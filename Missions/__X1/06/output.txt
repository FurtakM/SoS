// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 8578 0 2
// PrepareArabian ;
  32: CALL 400 0 0
// PrepareRussian ;
  36: CALL 9349 0 0
// Action ;
  40: CALL 17534 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 9 9$00 , 8 8$30 , 8 8$30 , 7 7$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 18900
 267: PUSH
 268: LD_INT 17850
 270: PUSH
 271: LD_INT 17850
 273: PUSH
 274: LD_INT 15750
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$30 , 8 8$30 , 7 7$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 21000
 296: PUSH
 297: LD_INT 19950
 299: PUSH
 300: LD_INT 17850
 302: PUSH
 303: LD_INT 15750
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 5 5$00 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 10500
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// end ; end_of_file
 395: LD_VAR 0 1
 399: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 400: LD_INT 0
 402: PPUSH
 403: PPUSH
 404: PPUSH
 405: PPUSH
 406: PPUSH
 407: PPUSH
 408: PPUSH
 409: PPUSH
 410: PPUSH
 411: PPUSH
 412: PPUSH
 413: PPUSH
// uc_nation := 2 ;
 414: LD_ADDR_OWVAR 21
 418: PUSH
 419: LD_INT 2
 421: ST_TO_ADDR
// uc_side := 5 ;
 422: LD_ADDR_OWVAR 20
 426: PUSH
 427: LD_INT 5
 429: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 430: LD_ADDR_EXP 40
 434: PUSH
 435: LD_STRING Abdul
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: LD_STRING 
 443: PPUSH
 444: CALL 27021 0 3
 448: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 449: LD_ADDR_EXP 42
 453: PUSH
 454: LD_STRING Omar
 456: PPUSH
 457: LD_INT 0
 459: PPUSH
 460: LD_STRING 
 462: PPUSH
 463: CALL 27021 0 3
 467: ST_TO_ADDR
// uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 476: LD_ADDR_EXP 32
 480: PUSH
 481: LD_STRING Heike
 483: PPUSH
 484: LD_EXP 1
 488: NOT
 489: PPUSH
 490: LD_EXP 2
 494: PPUSH
 495: CALL 27021 0 3
 499: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 500: LD_ADDR_EXP 35
 504: PUSH
 505: LD_STRING Ibrahim
 507: PPUSH
 508: LD_EXP 1
 512: NOT
 513: PPUSH
 514: LD_EXP 2
 518: PPUSH
 519: CALL 27021 0 3
 523: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 524: LD_ADDR_EXP 33
 528: PUSH
 529: LD_STRING Givi
 531: PPUSH
 532: LD_EXP 1
 536: NOT
 537: PPUSH
 538: LD_EXP 2
 542: PPUSH
 543: CALL 27021 0 3
 547: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 548: LD_ADDR_EXP 36
 552: PUSH
 553: LD_STRING Kamil
 555: PPUSH
 556: LD_EXP 1
 560: NOT
 561: PPUSH
 562: LD_EXP 2
 566: PPUSH
 567: CALL 27021 0 3
 571: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 572: LD_ADDR_EXP 37
 576: PUSH
 577: LD_STRING Kaia
 579: PPUSH
 580: LD_EXP 1
 584: NOT
 585: PPUSH
 586: LD_EXP 2
 590: PPUSH
 591: CALL 27021 0 3
 595: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 596: LD_ADDR_EXP 38
 600: PUSH
 601: LD_STRING Sophia
 603: PPUSH
 604: LD_EXP 1
 608: NOT
 609: PPUSH
 610: LD_EXP 2
 614: PPUSH
 615: CALL 27021 0 3
 619: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 620: LD_ADDR_EXP 39
 624: PUSH
 625: LD_STRING Markov
 627: PPUSH
 628: LD_EXP 1
 632: NOT
 633: PPUSH
 634: LD_EXP 2
 638: PPUSH
 639: CALL 27021 0 3
 643: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 644: LD_ADDR_EXP 44
 648: PUSH
 649: LD_STRING Aviradze
 651: PPUSH
 652: LD_EXP 1
 656: NOT
 657: PPUSH
 658: LD_EXP 2
 662: PPUSH
 663: CALL 27021 0 3
 667: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 668: LD_ADDR_EXP 43
 672: PUSH
 673: LD_STRING Kurt
 675: PPUSH
 676: LD_EXP 1
 680: NOT
 681: PPUSH
 682: LD_EXP 2
 686: PPUSH
 687: CALL 27021 0 3
 691: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 692: LD_ADDR_EXP 34
 696: PUSH
 697: LD_STRING Mike
 699: PPUSH
 700: LD_EXP 1
 704: NOT
 705: PPUSH
 706: LD_EXP 2
 710: PPUSH
 711: CALL 27021 0 3
 715: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 716: LD_ADDR_EXP 41
 720: PUSH
 721: LD_STRING Olaf
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: LD_STRING 
 729: PPUSH
 730: CALL 27021 0 3
 734: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 735: LD_ADDR_EXP 47
 739: PUSH
 740: LD_STRING 05_others
 742: PPUSH
 743: CALL_OW 31
 747: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 748: LD_ADDR_EXP 48
 752: PUSH
 753: LD_STRING 05_apes
 755: PPUSH
 756: CALL_OW 31
 760: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 761: LD_ADDR_VAR 0 5
 765: PUSH
 766: LD_STRING 05_Radar
 768: PPUSH
 769: LD_EXP 1
 773: PPUSH
 774: CALL_OW 30
 778: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 779: LD_ADDR_VAR 0 6
 783: PUSH
 784: LD_STRING 05_RemoteControl
 786: PPUSH
 787: LD_EXP 1
 791: PPUSH
 792: CALL_OW 30
 796: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 797: LD_ADDR_VAR 0 7
 801: PUSH
 802: LD_STRING 05_DrugsTested
 804: PPUSH
 805: LD_EXP 1
 809: PPUSH
 810: CALL_OW 30
 814: ST_TO_ADDR
// if hasDrugs then
 815: LD_VAR 0 7
 819: IFFALSE 834
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 821: LD_INT 5
 823: PPUSH
 824: LD_INT 2
 826: PPUSH
 827: LD_INT 2
 829: PPUSH
 830: CALL_OW 322
// if hasRadar then
 834: LD_VAR 0 5
 838: IFFALSE 853
// SetTech ( tech_radar , 2 , state_researched ) ;
 840: LD_INT 6
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 2
 848: PPUSH
 849: CALL_OW 322
// if hasRemote then
 853: LD_VAR 0 6
 857: IFFALSE 872
// SetTech ( tech_remCont , 2 , state_researched ) ;
 859: LD_INT 15
 861: PPUSH
 862: LD_INT 2
 864: PPUSH
 865: LD_INT 2
 867: PPUSH
 868: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 872: LD_ADDR_VAR 0 12
 876: PUSH
 877: LD_INT 5
 879: PPUSH
 880: LD_INT 0
 882: PPUSH
 883: CALL_OW 517
 887: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 888: LD_ADDR_VAR 0 2
 892: PUSH
 893: DOUBLE
 894: LD_INT 1
 896: DEC
 897: ST_TO_ADDR
 898: LD_VAR 0 12
 902: PUSH
 903: LD_INT 1
 905: ARRAY
 906: PUSH
 907: FOR_TO
 908: IFFALSE 985
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 910: LD_VAR 0 12
 914: PUSH
 915: LD_INT 1
 917: ARRAY
 918: PUSH
 919: LD_VAR 0 2
 923: ARRAY
 924: PPUSH
 925: LD_VAR 0 12
 929: PUSH
 930: LD_INT 2
 932: ARRAY
 933: PUSH
 934: LD_VAR 0 2
 938: ARRAY
 939: PPUSH
 940: CALL_OW 351
 944: IFFALSE 983
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 946: LD_VAR 0 12
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: PUSH
 955: LD_VAR 0 2
 959: ARRAY
 960: PPUSH
 961: LD_VAR 0 12
 965: PUSH
 966: LD_INT 2
 968: ARRAY
 969: PUSH
 970: LD_VAR 0 2
 974: ARRAY
 975: PPUSH
 976: LD_INT 2
 978: PPUSH
 979: CALL_OW 244
 983: GO 907
 985: POP
 986: POP
// base := [ ] ;
 987: LD_ADDR_VAR 0 4
 991: PUSH
 992: EMPTY
 993: ST_TO_ADDR
// if debug then
 994: LD_EXP 1
 998: IFFALSE 1048
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1000: LD_ADDR_VAR 0 4
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: LD_INT 51
1010: PUSH
1011: LD_INT 77
1013: PUSH
1014: LD_INT 1
1016: PUSH
1017: LD_INT 3
1019: PUSH
1020: LD_INT 3
1022: PUSH
1023: LD_INT 0
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: PUSH
1043: EMPTY
1044: LIST
1045: ST_TO_ADDR
// end else
1046: GO 1064
// if buildingsFromPrev then
1048: LD_EXP 30
1052: IFFALSE 1064
// base := buildingsFromPrev ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_EXP 30
1063: ST_TO_ADDR
// if base then
1064: LD_VAR 0 4
1068: IFFALSE 1266
// for i := 1 to base do
1070: LD_ADDR_VAR 0 2
1074: PUSH
1075: DOUBLE
1076: LD_INT 1
1078: DEC
1079: ST_TO_ADDR
1080: LD_VAR 0 4
1084: PUSH
1085: FOR_TO
1086: IFFALSE 1264
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1088: LD_ADDR_VAR 0 4
1092: PUSH
1093: LD_VAR 0 4
1097: PPUSH
1098: LD_VAR 0 2
1102: PPUSH
1103: LD_VAR 0 4
1107: PUSH
1108: LD_VAR 0 2
1112: ARRAY
1113: PUSH
1114: LD_INT 1
1116: ARRAY
1117: PUSH
1118: LD_VAR 0 4
1122: PUSH
1123: LD_VAR 0 2
1127: ARRAY
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PUSH
1133: LD_INT 155
1135: PLUS
1136: PUSH
1137: LD_VAR 0 4
1141: PUSH
1142: LD_VAR 0 2
1146: ARRAY
1147: PUSH
1148: LD_INT 3
1150: ARRAY
1151: PUSH
1152: LD_INT 3
1154: PLUS
1155: PUSH
1156: LD_VAR 0 4
1160: PUSH
1161: LD_VAR 0 2
1165: ARRAY
1166: PUSH
1167: LD_INT 4
1169: ARRAY
1170: PUSH
1171: LD_VAR 0 4
1175: PUSH
1176: LD_VAR 0 2
1180: ARRAY
1181: PUSH
1182: LD_INT 5
1184: ARRAY
1185: PUSH
1186: LD_VAR 0 4
1190: PUSH
1191: LD_VAR 0 2
1195: ARRAY
1196: PUSH
1197: LD_INT 6
1199: ARRAY
1200: PUSH
1201: LD_VAR 0 4
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PUSH
1212: LD_INT 7
1214: ARRAY
1215: PUSH
1216: LD_VAR 0 4
1220: PUSH
1221: LD_VAR 0 2
1225: ARRAY
1226: PUSH
1227: LD_INT 8
1229: ARRAY
1230: PUSH
1231: LD_VAR 0 4
1235: PUSH
1236: LD_VAR 0 2
1240: ARRAY
1241: PUSH
1242: LD_INT 9
1244: ARRAY
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 1
1261: ST_TO_ADDR
1262: GO 1085
1264: POP
1265: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1266: LD_ADDR_VAR 0 4
1270: PUSH
1271: LD_VAR 0 4
1275: PUSH
1276: LD_INT 0
1278: PUSH
1279: LD_INT 206
1281: PUSH
1282: LD_INT 80
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 0
1296: PUSH
1297: LD_INT 0
1299: PUSH
1300: LD_INT 0
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 32
1316: PUSH
1317: LD_INT 221
1319: PUSH
1320: LD_INT 95
1322: PUSH
1323: LD_INT 5
1325: PUSH
1326: LD_INT 2
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: LD_INT 0
1334: PUSH
1335: LD_INT 0
1337: PUSH
1338: LD_INT 23
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 32
1354: PUSH
1355: LD_INT 223
1357: PUSH
1358: LD_INT 88
1360: PUSH
1361: LD_INT 5
1363: PUSH
1364: LD_INT 2
1366: PUSH
1367: LD_INT 3
1369: PUSH
1370: LD_INT 0
1372: PUSH
1373: LD_INT 0
1375: PUSH
1376: LD_INT 24
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 32
1392: PUSH
1393: LD_INT 202
1395: PUSH
1396: LD_INT 64
1398: PUSH
1399: LD_INT 2
1401: PUSH
1402: LD_INT 2
1404: PUSH
1405: LD_INT 3
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 25
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 203
1433: PUSH
1434: LD_INT 91
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 2
1442: PUSH
1443: LD_INT 3
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 0
1451: PUSH
1452: LD_INT 0
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: LD_INT 8
1468: PUSH
1469: LD_INT 217
1471: PUSH
1472: LD_INT 78
1474: PUSH
1475: LD_INT 4
1477: PUSH
1478: LD_INT 2
1480: PUSH
1481: LD_INT 3
1483: PUSH
1484: LD_INT 0
1486: PUSH
1487: LD_INT 0
1489: PUSH
1490: LD_INT 0
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 27
1506: PUSH
1507: LD_INT 220
1509: PUSH
1510: LD_INT 99
1512: PUSH
1513: LD_INT 1
1515: PUSH
1516: LD_INT 2
1518: PUSH
1519: LD_INT 3
1521: PUSH
1522: LD_INT 0
1524: PUSH
1525: LD_INT 0
1527: PUSH
1528: LD_INT 0
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: PUSH
1542: LD_INT 27
1544: PUSH
1545: LD_INT 220
1547: PUSH
1548: LD_INT 103
1550: PUSH
1551: LD_INT 1
1553: PUSH
1554: LD_INT 2
1556: PUSH
1557: LD_INT 3
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: LD_INT 0
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: PUSH
1580: LD_INT 27
1582: PUSH
1583: LD_INT 216
1585: PUSH
1586: LD_INT 102
1588: PUSH
1589: LD_INT 1
1591: PUSH
1592: LD_INT 2
1594: PUSH
1595: LD_INT 3
1597: PUSH
1598: LD_INT 0
1600: PUSH
1601: LD_INT 0
1603: PUSH
1604: LD_INT 0
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 17
1620: PUSH
1621: LD_INT 203
1623: PUSH
1624: LD_INT 94
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: LD_INT 2
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: LD_INT 0
1641: PUSH
1642: LD_INT 0
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 23
1658: PUSH
1659: LD_INT 200
1661: PUSH
1662: LD_INT 88
1664: PUSH
1665: LD_INT 2
1667: PUSH
1668: LD_INT 2
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: LD_INT 0
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 16
1696: PUSH
1697: LD_INT 199
1699: PUSH
1700: LD_INT 91
1702: PUSH
1703: LD_INT 1
1705: PUSH
1706: LD_INT 2
1708: PUSH
1709: LD_INT 3
1711: PUSH
1712: LD_INT 0
1714: PUSH
1715: LD_INT 0
1717: PUSH
1718: LD_INT 0
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: LD_INT 26
1734: PUSH
1735: LD_INT 197
1737: PUSH
1738: LD_INT 81
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 2
1746: PUSH
1747: LD_INT 3
1749: PUSH
1750: LD_INT 0
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: LD_INT 0
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 26
1772: PUSH
1773: LD_INT 197
1775: PUSH
1776: LD_INT 78
1778: PUSH
1779: LD_INT 3
1781: PUSH
1782: LD_INT 2
1784: PUSH
1785: LD_INT 3
1787: PUSH
1788: LD_INT 0
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: LD_INT 0
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: ADD
1824: ST_TO_ADDR
// if hasRadar then
1825: LD_VAR 0 5
1829: IFFALSE 1893
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1831: LD_ADDR_VAR 0 4
1835: PUSH
1836: LD_VAR 0 4
1840: PPUSH
1841: LD_VAR 0 4
1845: PUSH
1846: LD_INT 1
1848: PLUS
1849: PPUSH
1850: LD_INT 20
1852: PUSH
1853: LD_INT 203
1855: PUSH
1856: LD_INT 87
1858: PUSH
1859: LD_INT 3
1861: PUSH
1862: LD_INT 2
1864: PUSH
1865: LD_INT 3
1867: PUSH
1868: LD_INT 0
1870: PUSH
1871: LD_INT 0
1873: PUSH
1874: LD_INT 0
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 1
1892: ST_TO_ADDR
// if hasRemote then
1893: LD_VAR 0 6
1897: IFFALSE 1961
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_INT 22
1920: PUSH
1921: LD_INT 207
1923: PUSH
1924: LD_INT 95
1926: PUSH
1927: LD_INT 5
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 3
1935: PUSH
1936: LD_INT 0
1938: PUSH
1939: LD_INT 0
1941: PUSH
1942: LD_INT 0
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 1
1960: ST_TO_ADDR
// for i in base do
1961: LD_ADDR_VAR 0 2
1965: PUSH
1966: LD_VAR 0 4
1970: PUSH
1971: FOR_IN
1972: IFFALSE 2305
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
1974: LD_VAR 0 2
1978: PUSH
1979: LD_INT 2
1981: ARRAY
1982: PPUSH
1983: LD_VAR 0 2
1987: PUSH
1988: LD_INT 3
1990: ARRAY
1991: PPUSH
1992: CALL_OW 428
1996: IFFALSE 2000
// continue ;
1998: GO 1971
// uc_nation := i [ 5 ] ;
2000: LD_ADDR_OWVAR 21
2004: PUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_INT 5
2012: ARRAY
2013: ST_TO_ADDR
// bc_type := i [ 1 ] ;
2014: LD_ADDR_OWVAR 42
2018: PUSH
2019: LD_VAR 0 2
2023: PUSH
2024: LD_INT 1
2026: ARRAY
2027: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2028: LD_ADDR_OWVAR 43
2032: PUSH
2033: LD_VAR 0 2
2037: PUSH
2038: LD_INT 6
2040: ARRAY
2041: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 7 ] and not i [ 8 ] then
2042: LD_VAR 0 2
2046: PUSH
2047: LD_INT 1
2049: ARRAY
2050: PUSH
2051: LD_INT 8
2053: EQUAL
2054: PUSH
2055: LD_VAR 0 2
2059: PUSH
2060: LD_INT 5
2062: ARRAY
2063: PUSH
2064: LD_INT 2
2066: EQUAL
2067: AND
2068: PUSH
2069: LD_VAR 0 2
2073: PUSH
2074: LD_INT 7
2076: ARRAY
2077: NOT
2078: AND
2079: PUSH
2080: LD_VAR 0 2
2084: PUSH
2085: LD_INT 8
2087: ARRAY
2088: NOT
2089: AND
2090: IFFALSE 2125
// begin bc_kind1 := b_lab_weapon ;
2092: LD_ADDR_OWVAR 44
2096: PUSH
2097: LD_INT 10
2099: ST_TO_ADDR
// if hasRadar then
2100: LD_VAR 0 5
2104: IFFALSE 2116
// bc_kind2 := b_lab_opto else
2106: LD_ADDR_OWVAR 45
2110: PUSH
2111: LD_INT 15
2113: ST_TO_ADDR
2114: GO 2125
// bc_kind2 := - 1 ;
2116: LD_ADDR_OWVAR 45
2120: PUSH
2121: LD_INT 1
2123: NEG
2124: ST_TO_ADDR
// end ; if i [ 7 ] then
2125: LD_VAR 0 2
2129: PUSH
2130: LD_INT 7
2132: ARRAY
2133: IFFALSE 2151
// bc_kind1 := i [ 7 ] else
2135: LD_ADDR_OWVAR 44
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 7
2147: ARRAY
2148: ST_TO_ADDR
2149: GO 2160
// bc_kind1 := - 1 ;
2151: LD_ADDR_OWVAR 44
2155: PUSH
2156: LD_INT 1
2158: NEG
2159: ST_TO_ADDR
// if i [ 8 ] then
2160: LD_VAR 0 2
2164: PUSH
2165: LD_INT 8
2167: ARRAY
2168: IFFALSE 2186
// bc_kind1 := i [ 8 ] else
2170: LD_ADDR_OWVAR 44
2174: PUSH
2175: LD_VAR 0 2
2179: PUSH
2180: LD_INT 8
2182: ARRAY
2183: ST_TO_ADDR
2184: GO 2195
// bc_kind1 := - 1 ;
2186: LD_ADDR_OWVAR 44
2190: PUSH
2191: LD_INT 1
2193: NEG
2194: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: LD_VAR 0 2
2204: PUSH
2205: LD_INT 2
2207: ARRAY
2208: PPUSH
2209: LD_VAR 0 2
2213: PUSH
2214: LD_INT 3
2216: ARRAY
2217: PPUSH
2218: LD_VAR 0 2
2222: PUSH
2223: LD_INT 4
2225: ARRAY
2226: PPUSH
2227: CALL_OW 47
2231: ST_TO_ADDR
// if i [ 9 ] then
2232: LD_VAR 0 2
2236: PUSH
2237: LD_INT 9
2239: ARRAY
2240: IFFALSE 2260
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2242: LD_VAR 0 3
2246: PPUSH
2247: LD_VAR 0 2
2251: PUSH
2252: LD_INT 9
2254: ARRAY
2255: PPUSH
2256: CALL_OW 431
// if i [ 1 ] = b_bunker then
2260: LD_VAR 0 2
2264: PUSH
2265: LD_INT 1
2267: ARRAY
2268: PUSH
2269: LD_INT 32
2271: EQUAL
2272: IFFALSE 2303
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2274: LD_ADDR_VAR 0 11
2278: PUSH
2279: LD_VAR 0 11
2283: PPUSH
2284: LD_VAR 0 11
2288: PUSH
2289: LD_INT 1
2291: PLUS
2292: PPUSH
2293: LD_VAR 0 3
2297: PPUSH
2298: CALL_OW 1
2302: ST_TO_ADDR
// end ;
2303: GO 1971
2305: POP
2306: POP
// depot := HexInfo ( 206 , 80 ) ;
2307: LD_ADDR_VAR 0 9
2311: PUSH
2312: LD_INT 206
2314: PPUSH
2315: LD_INT 80
2317: PPUSH
2318: CALL_OW 428
2322: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2323: LD_ADDR_VAR 0 8
2327: PUSH
2328: LD_INT 22
2330: PUSH
2331: LD_INT 2
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: PUSH
2338: LD_INT 30
2340: PUSH
2341: LD_INT 3
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PPUSH
2352: CALL_OW 69
2356: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2357: LD_ADDR_VAR 0 10
2361: PUSH
2362: LD_INT 22
2364: PUSH
2365: LD_INT 2
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: LD_INT 2
2374: PUSH
2375: LD_INT 30
2377: PUSH
2378: LD_INT 6
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 30
2387: PUSH
2388: LD_INT 7
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 30
2397: PUSH
2398: LD_INT 8
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PPUSH
2415: CALL_OW 69
2419: ST_TO_ADDR
// arDepot := depot ;
2420: LD_ADDR_EXP 46
2424: PUSH
2425: LD_VAR 0 9
2429: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 , 120 ] [ Difficulty ] ) ;
2430: LD_VAR 0 9
2434: PPUSH
2435: CALL_OW 274
2439: PPUSH
2440: LD_INT 1
2442: PPUSH
2443: LD_INT 360
2445: PUSH
2446: LD_INT 260
2448: PUSH
2449: LD_INT 160
2451: PUSH
2452: LD_INT 120
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: LD_OWVAR 67
2465: ARRAY
2466: PPUSH
2467: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 , 100 ] [ Difficulty ] ) ;
2471: LD_VAR 0 9
2475: PPUSH
2476: CALL_OW 274
2480: PPUSH
2481: LD_INT 2
2483: PPUSH
2484: LD_INT 200
2486: PUSH
2487: LD_INT 170
2489: PUSH
2490: LD_INT 130
2492: PUSH
2493: LD_INT 100
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: PUSH
2502: LD_OWVAR 67
2506: ARRAY
2507: PPUSH
2508: CALL_OW 277
// uc_nation := 2 ;
2512: LD_ADDR_OWVAR 21
2516: PUSH
2517: LD_INT 2
2519: ST_TO_ADDR
// uc_side := 2 ;
2520: LD_ADDR_OWVAR 20
2524: PUSH
2525: LD_INT 2
2527: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2528: LD_INT 13
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_INT 1
2536: PPUSH
2537: LD_INT 27
2539: PPUSH
2540: LD_INT 33
2542: PPUSH
2543: CALL 32036 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2547: CALL_OW 45
2551: PPUSH
2552: LD_INT 190
2554: PPUSH
2555: LD_INT 64
2557: PPUSH
2558: LD_INT 5
2560: PPUSH
2561: LD_INT 0
2563: PPUSH
2564: CALL 66610 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2568: LD_INT 13
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 25
2579: PPUSH
2580: LD_INT 22
2582: PPUSH
2583: CALL 32036 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2587: CALL_OW 45
2591: PPUSH
2592: LD_INT 188
2594: PPUSH
2595: LD_INT 67
2597: PPUSH
2598: LD_INT 5
2600: PPUSH
2601: LD_INT 0
2603: PPUSH
2604: CALL 66610 0 5
// if hasRemote then
2608: LD_VAR 0 6
2612: IFFALSE 2694
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
2614: LD_INT 13
2616: PPUSH
2617: LD_INT 1
2619: PPUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 31
2625: PPUSH
2626: LD_INT 35
2628: PPUSH
2629: CALL 32036 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
2633: CALL_OW 45
2637: PPUSH
2638: LD_INT 191
2640: PPUSH
2641: LD_INT 71
2643: PPUSH
2644: LD_INT 5
2646: PPUSH
2647: LD_INT 0
2649: PPUSH
2650: CALL 66610 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
2654: LD_INT 14
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 2
2662: PPUSH
2663: LD_INT 27
2665: PPUSH
2666: LD_INT 55
2668: PPUSH
2669: CALL 32036 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
2673: CALL_OW 45
2677: PPUSH
2678: LD_INT 199
2680: PPUSH
2681: LD_INT 67
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: LD_INT 0
2689: PPUSH
2690: CALL 66610 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2694: LD_EXP 32
2698: PPUSH
2699: LD_INT 213
2701: PPUSH
2702: LD_INT 87
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2712: LD_EXP 32
2716: PPUSH
2717: LD_INT 214
2719: PPUSH
2720: LD_INT 87
2722: PPUSH
2723: CALL_OW 118
// if Kaia then
2727: LD_EXP 37
2731: IFFALSE 2766
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2733: LD_EXP 37
2737: PPUSH
2738: LD_INT 213
2740: PPUSH
2741: LD_INT 85
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2751: LD_EXP 37
2755: PPUSH
2756: LD_INT 215
2758: PPUSH
2759: LD_INT 87
2761: PPUSH
2762: CALL_OW 118
// end ; if Olaf and Kaia then
2766: LD_EXP 41
2770: PUSH
2771: LD_EXP 37
2775: AND
2776: IFFALSE 2813
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2778: LD_EXP 41
2782: PPUSH
2783: LD_INT 215
2785: PPUSH
2786: LD_INT 87
2788: PPUSH
2789: LD_INT 0
2791: PPUSH
2792: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2796: LD_EXP 41
2800: PPUSH
2801: LD_INT 213
2803: PPUSH
2804: LD_INT 85
2806: PPUSH
2807: CALL_OW 118
// end else
2811: GO 2833
// if Olaf then
2813: LD_EXP 41
2817: IFFALSE 2833
// PlaceHumanInUnit ( Olaf , factory ) ;
2819: LD_EXP 41
2823: PPUSH
2824: LD_VAR 0 8
2828: PPUSH
2829: CALL_OW 52
// if Givi then
2833: LD_EXP 33
2837: IFFALSE 2918
// begin if Kaia and Olaf then
2839: LD_EXP 37
2843: PUSH
2844: LD_EXP 41
2848: AND
2849: IFFALSE 2886
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2851: LD_EXP 33
2855: PPUSH
2856: LD_INT 247
2858: PPUSH
2859: LD_INT 117
2861: PPUSH
2862: LD_INT 0
2864: PPUSH
2865: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2869: LD_EXP 33
2873: PPUSH
2874: LD_INT 248
2876: PPUSH
2877: LD_INT 118
2879: PPUSH
2880: CALL_OW 118
// end else
2884: GO 2918
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2886: LD_EXP 33
2890: PPUSH
2891: LD_INT 216
2893: PPUSH
2894: LD_INT 88
2896: PPUSH
2897: LD_INT 0
2899: PPUSH
2900: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2904: LD_EXP 33
2908: PPUSH
2909: LD_EXP 32
2913: PPUSH
2914: CALL_OW 119
// end ; end ; if Kurt then
2918: LD_EXP 43
2922: IFFALSE 2942
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2924: LD_EXP 43
2928: PPUSH
2929: LD_VAR 0 11
2933: PUSH
2934: LD_INT 2
2936: ARRAY
2937: PPUSH
2938: CALL_OW 52
// if Mike then
2942: LD_EXP 34
2946: IFFALSE 2966
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2948: LD_EXP 34
2952: PPUSH
2953: LD_VAR 0 11
2957: PUSH
2958: LD_INT 3
2960: ARRAY
2961: PPUSH
2962: CALL_OW 52
// if Kamil then
2966: LD_EXP 36
2970: IFFALSE 3032
// begin if Kaia and Olaf then
2972: LD_EXP 37
2976: PUSH
2977: LD_EXP 41
2981: AND
2982: IFFALSE 3000
// PlaceHumanInUnit ( Kamil , depot ) else
2984: LD_EXP 36
2988: PPUSH
2989: LD_VAR 0 9
2993: PPUSH
2994: CALL_OW 52
2998: GO 3032
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3000: LD_EXP 36
3004: PPUSH
3005: LD_INT 213
3007: PPUSH
3008: LD_INT 87
3010: PPUSH
3011: LD_INT 0
3013: PPUSH
3014: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3018: LD_EXP 36
3022: PPUSH
3023: LD_EXP 32
3027: PPUSH
3028: CALL_OW 119
// end ; end ; if Sophia then
3032: LD_EXP 38
3036: IFFALSE 3052
// PlaceHumanInUnit ( Sophia , depot ) ;
3038: LD_EXP 38
3042: PPUSH
3043: LD_VAR 0 9
3047: PPUSH
3048: CALL_OW 52
// if Aviradze then
3052: LD_EXP 44
3056: IFFALSE 3105
// if lab then
3058: LD_VAR 0 10
3062: IFFALSE 3084
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3064: LD_EXP 44
3068: PPUSH
3069: LD_VAR 0 10
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: CALL_OW 52
3082: GO 3105
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3084: LD_EXP 44
3088: PPUSH
3089: LD_INT 210
3091: PPUSH
3092: LD_INT 87
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 0
3100: PPUSH
3101: CALL_OW 50
// if Ibrahim then
3105: LD_EXP 35
3109: IFFALSE 3158
// if lab then
3111: LD_VAR 0 10
3115: IFFALSE 3137
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3117: LD_EXP 35
3121: PPUSH
3122: LD_VAR 0 10
3126: PUSH
3127: LD_INT 1
3129: ARRAY
3130: PPUSH
3131: CALL_OW 52
3135: GO 3158
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3137: LD_EXP 35
3141: PPUSH
3142: LD_INT 210
3144: PPUSH
3145: LD_INT 87
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 0
3153: PPUSH
3154: CALL_OW 50
// if Markov then
3158: LD_EXP 39
3162: IFFALSE 3211
// if factory then
3164: LD_VAR 0 8
3168: IFFALSE 3190
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3170: LD_EXP 39
3174: PPUSH
3175: LD_VAR 0 8
3179: PUSH
3180: LD_INT 1
3182: ARRAY
3183: PPUSH
3184: CALL_OW 52
3188: GO 3211
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3190: LD_EXP 39
3194: PPUSH
3195: LD_INT 210
3197: PPUSH
3198: LD_INT 87
3200: PPUSH
3201: LD_INT 3
3203: PPUSH
3204: LD_INT 0
3206: PPUSH
3207: CALL_OW 50
// if heikeSecondSquad then
3211: LD_EXP 47
3215: IFFALSE 3255
// for i in heikeSecondSquad do
3217: LD_ADDR_VAR 0 2
3221: PUSH
3222: LD_EXP 47
3226: PUSH
3227: FOR_IN
3228: IFFALSE 3253
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3230: LD_VAR 0 2
3234: PPUSH
3235: LD_INT 190
3237: PPUSH
3238: LD_INT 65
3240: PPUSH
3241: LD_INT 5
3243: PPUSH
3244: LD_INT 0
3246: PPUSH
3247: CALL_OW 50
3251: GO 3227
3253: POP
3254: POP
// if heikeApes then
3255: LD_EXP 48
3259: IFFALSE 3299
// for i in heikeApes do
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: LD_EXP 48
3270: PUSH
3271: FOR_IN
3272: IFFALSE 3297
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3274: LD_VAR 0 2
3278: PPUSH
3279: LD_INT 190
3281: PPUSH
3282: LD_INT 70
3284: PPUSH
3285: LD_INT 5
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: CALL_OW 50
3295: GO 3271
3297: POP
3298: POP
// end ;
3299: LD_VAR 0 1
3303: RET
// export function PrepareRolfSquad ; var i , j ; begin
3304: LD_INT 0
3306: PPUSH
3307: PPUSH
3308: PPUSH
// uc_side := 8 ;
3309: LD_ADDR_OWVAR 20
3313: PUSH
3314: LD_INT 8
3316: ST_TO_ADDR
// uc_nation := 2 ;
3317: LD_ADDR_OWVAR 21
3321: PUSH
3322: LD_INT 2
3324: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3325: LD_ADDR_EXP 45
3329: PUSH
3330: LD_STRING Bergkamp
3332: PPUSH
3333: CALL_OW 25
3337: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3338: LD_ADDR_EXP 49
3342: PUSH
3343: LD_EXP 45
3347: PUSH
3348: EMPTY
3349: LIST
3350: ST_TO_ADDR
// for i := 1 to 4 do
3351: LD_ADDR_VAR 0 2
3355: PUSH
3356: DOUBLE
3357: LD_INT 1
3359: DEC
3360: ST_TO_ADDR
3361: LD_INT 4
3363: PUSH
3364: FOR_TO
3365: IFFALSE 3445
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3367: LD_ADDR_VAR 0 3
3371: PUSH
3372: DOUBLE
3373: LD_INT 1
3375: DEC
3376: ST_TO_ADDR
3377: LD_INT 5
3379: PUSH
3380: LD_INT 2
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: LD_INT 1
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PUSH
3401: FOR_TO
3402: IFFALSE 3441
// begin PrepareHuman ( false , i , 5 ) ;
3404: LD_INT 0
3406: PPUSH
3407: LD_VAR 0 2
3411: PPUSH
3412: LD_INT 5
3414: PPUSH
3415: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3419: LD_ADDR_EXP 49
3423: PUSH
3424: LD_EXP 49
3428: PPUSH
3429: CALL_OW 44
3433: PPUSH
3434: CALL 64470 0 2
3438: ST_TO_ADDR
// end ;
3439: GO 3401
3441: POP
3442: POP
// end ;
3443: GO 3364
3445: POP
3446: POP
// if HexInfo ( 5 , 3 ) then
3447: LD_INT 5
3449: PPUSH
3450: LD_INT 3
3452: PPUSH
3453: CALL_OW 428
3457: IFFALSE 3474
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3459: LD_INT 5
3461: PPUSH
3462: LD_INT 3
3464: PPUSH
3465: CALL_OW 428
3469: PPUSH
3470: CALL_OW 64
// for i in rolfSquad do
3474: LD_ADDR_VAR 0 2
3478: PUSH
3479: LD_EXP 49
3483: PUSH
3484: FOR_IN
3485: IFFALSE 3621
// begin uc_direction := 2 ;
3487: LD_ADDR_OWVAR 24
3491: PUSH
3492: LD_INT 2
3494: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3495: LD_VAR 0 2
3499: PPUSH
3500: CALL_OW 257
3504: PUSH
3505: LD_INT 3
3507: EQUAL
3508: IFFALSE 3582
// begin uc_side := 8 ;
3510: LD_ADDR_OWVAR 20
3514: PUSH
3515: LD_INT 8
3517: ST_TO_ADDR
// uc_nation := 2 ;
3518: LD_ADDR_OWVAR 21
3522: PUSH
3523: LD_INT 2
3525: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3526: LD_INT 13
3528: PPUSH
3529: LD_INT 1
3531: PPUSH
3532: LD_INT 1
3534: PPUSH
3535: LD_INT 27
3537: PPUSH
3538: LD_INT 88
3540: PPUSH
3541: CALL 32036 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3545: CALL_OW 45
3549: PPUSH
3550: LD_INT 11
3552: PPUSH
3553: LD_INT 0
3555: PPUSH
3556: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3560: LD_VAR 0 2
3564: PPUSH
3565: LD_INT 5
3567: PPUSH
3568: LD_INT 3
3570: PPUSH
3571: CALL_OW 428
3575: PPUSH
3576: CALL_OW 52
// end else
3580: GO 3597
// PlaceUnitArea ( i , northSpawn , false ) ;
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_INT 11
3589: PPUSH
3590: LD_INT 0
3592: PPUSH
3593: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3597: LD_VAR 0 2
3601: PPUSH
3602: LD_INT 29
3604: PPUSH
3605: LD_INT 10
3607: PPUSH
3608: CALL_OW 111
// wait ( 0 0$2 ) ;
3612: LD_INT 70
3614: PPUSH
3615: CALL_OW 67
// end ;
3619: GO 3484
3621: POP
3622: POP
// wait ( 0 0$5 ) ;
3623: LD_INT 175
3625: PPUSH
3626: CALL_OW 67
// end ;
3630: LD_VAR 0 1
3634: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3635: LD_INT 0
3637: PPUSH
3638: PPUSH
3639: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3640: LD_EXP 45
3644: PPUSH
3645: LD_INT 94
3647: PPUSH
3648: LD_INT 63
3650: PPUSH
3651: CALL_OW 428
3655: PPUSH
3656: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3660: LD_ADDR_VAR 0 3
3664: PUSH
3665: LD_INT 4
3667: PUSH
3668: LD_INT 82
3670: PUSH
3671: LD_INT 64
3673: PUSH
3674: LD_INT 1
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 31
3685: PUSH
3686: LD_INT 73
3688: PUSH
3689: LD_INT 58
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: ST_TO_ADDR
// for i in tmp do
3705: LD_ADDR_VAR 0 2
3709: PUSH
3710: LD_VAR 0 3
3714: PUSH
3715: FOR_IN
3716: IFFALSE 3780
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3718: LD_EXP 49
3722: PPUSH
3723: LD_INT 25
3725: PUSH
3726: LD_INT 2
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PPUSH
3733: CALL_OW 72
3737: PPUSH
3738: LD_VAR 0 2
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: PPUSH
3747: LD_VAR 0 2
3751: PUSH
3752: LD_INT 2
3754: ARRAY
3755: PPUSH
3756: LD_VAR 0 2
3760: PUSH
3761: LD_INT 3
3763: ARRAY
3764: PPUSH
3765: LD_VAR 0 2
3769: PUSH
3770: LD_INT 4
3772: ARRAY
3773: PPUSH
3774: CALL_OW 205
3778: GO 3715
3780: POP
3781: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
3782: LD_EXP 49
3786: PUSH
3787: LD_INT 2
3789: ARRAY
3790: PPUSH
3791: LD_INT 63
3793: PPUSH
3794: LD_INT 42
3796: PPUSH
3797: CALL_OW 428
3801: PPUSH
3802: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
3806: LD_EXP 49
3810: PUSH
3811: LD_INT 3
3813: ARRAY
3814: PPUSH
3815: LD_INT 94
3817: PPUSH
3818: LD_INT 63
3820: PPUSH
3821: CALL_OW 428
3825: PPUSH
3826: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3830: LD_INT 35
3832: PPUSH
3833: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
3837: LD_EXP 49
3841: PPUSH
3842: LD_INT 25
3844: PUSH
3845: LD_INT 2
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 3
3854: PUSH
3855: LD_INT 60
3857: PUSH
3858: EMPTY
3859: LIST
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PPUSH
3869: CALL_OW 72
3873: IFFALSE 3830
// rolfScriptBase := true ;
3875: LD_ADDR_EXP 9
3879: PUSH
3880: LD_INT 1
3882: ST_TO_ADDR
// end ;
3883: LD_VAR 0 1
3887: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
3888: LD_EXP 9
3892: PUSH
3893: LD_EXP 45
3897: PPUSH
3898: CALL_OW 255
3902: PUSH
3903: LD_INT 8
3905: EQUAL
3906: AND
3907: IFFALSE 4914
3909: GO 3911
3911: DISABLE
3912: LD_INT 0
3914: PPUSH
3915: PPUSH
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
// begin enable ;
3924: ENABLE
// if not rolfSquad then
3925: LD_EXP 49
3929: NOT
3930: IFFALSE 3934
// exit ;
3932: GO 4914
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3934: LD_ADDR_VAR 0 9
3938: PUSH
3939: LD_INT 12
3941: PPUSH
3942: LD_INT 81
3944: PUSH
3945: LD_INT 8
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PPUSH
3952: CALL_OW 70
3956: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3957: LD_ADDR_VAR 0 5
3961: PUSH
3962: LD_EXP 49
3966: PPUSH
3967: LD_INT 25
3969: PUSH
3970: LD_INT 1
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PPUSH
3977: CALL_OW 72
3981: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3982: LD_ADDR_VAR 0 6
3986: PUSH
3987: LD_EXP 49
3991: PPUSH
3992: LD_INT 25
3994: PUSH
3995: LD_INT 2
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PPUSH
4002: CALL_OW 72
4006: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4007: LD_ADDR_VAR 0 8
4011: PUSH
4012: LD_EXP 49
4016: PPUSH
4017: LD_INT 25
4019: PUSH
4020: LD_INT 3
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PPUSH
4027: CALL_OW 72
4031: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4032: LD_ADDR_VAR 0 7
4036: PUSH
4037: LD_EXP 49
4041: PPUSH
4042: LD_INT 25
4044: PUSH
4045: LD_INT 4
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PPUSH
4052: CALL_OW 72
4056: ST_TO_ADDR
// if sol then
4057: LD_VAR 0 5
4061: IFFALSE 4359
// for i in sol union Rolf do
4063: LD_ADDR_VAR 0 1
4067: PUSH
4068: LD_VAR 0 5
4072: PUSH
4073: LD_EXP 45
4077: UNION
4078: PUSH
4079: FOR_IN
4080: IFFALSE 4357
// if not IsInUnit ( i ) and not HasTask ( i ) then
4082: LD_VAR 0 1
4086: PPUSH
4087: CALL_OW 310
4091: NOT
4092: PUSH
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 314
4102: NOT
4103: AND
4104: IFFALSE 4355
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4106: LD_VAR 0 1
4110: PPUSH
4111: CALL_OW 256
4115: PUSH
4116: LD_INT 500
4118: LESS
4119: PUSH
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_INT 80
4127: PPUSH
4128: LD_INT 49
4130: PPUSH
4131: CALL_OW 297
4135: PUSH
4136: LD_INT 6
4138: GREATER
4139: AND
4140: IFFALSE 4159
// begin ComMoveXY ( i , 80 , 49 ) ;
4142: LD_VAR 0 1
4146: PPUSH
4147: LD_INT 80
4149: PPUSH
4150: LD_INT 49
4152: PPUSH
4153: CALL_OW 111
// continue ;
4157: GO 4079
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4159: LD_ADDR_VAR 0 4
4163: PUSH
4164: LD_INT 22
4166: PUSH
4167: LD_INT 8
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: PUSH
4174: LD_INT 50
4176: PUSH
4177: EMPTY
4178: LIST
4179: PUSH
4180: LD_INT 2
4182: PUSH
4183: LD_INT 30
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 30
4195: PUSH
4196: LD_INT 5
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 30
4205: PUSH
4206: LD_INT 32
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 30
4215: PUSH
4216: LD_INT 31
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: ST_TO_ADDR
// if tmp then
4240: LD_VAR 0 4
4244: IFFALSE 4355
// begin for b in tmp do
4246: LD_ADDR_VAR 0 2
4250: PUSH
4251: LD_VAR 0 4
4255: PUSH
4256: FOR_IN
4257: IFFALSE 4353
// begin case GetBType ( b ) of b_armoury , b_barracks :
4259: LD_VAR 0 2
4263: PPUSH
4264: CALL_OW 266
4268: PUSH
4269: LD_INT 4
4271: DOUBLE
4272: EQUAL
4273: IFTRUE 4283
4275: LD_INT 5
4277: DOUBLE
4278: EQUAL
4279: IFTRUE 4283
4281: GO 4294
4283: POP
// p := 6 ; b_breastwork , b_bunker :
4284: LD_ADDR_VAR 0 3
4288: PUSH
4289: LD_INT 6
4291: ST_TO_ADDR
4292: GO 4320
4294: LD_INT 31
4296: DOUBLE
4297: EQUAL
4298: IFTRUE 4308
4300: LD_INT 32
4302: DOUBLE
4303: EQUAL
4304: IFTRUE 4308
4306: GO 4319
4308: POP
// p := 1 ; end ;
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: LD_INT 1
4316: ST_TO_ADDR
4317: GO 4320
4319: POP
// if UnitsInside ( b ) < p then
4320: LD_VAR 0 2
4324: PPUSH
4325: CALL_OW 313
4329: PUSH
4330: LD_VAR 0 3
4334: LESS
4335: IFFALSE 4351
// ComEnterUnit ( i , b ) ;
4337: LD_VAR 0 1
4341: PPUSH
4342: LD_VAR 0 2
4346: PPUSH
4347: CALL_OW 120
// end ;
4351: GO 4256
4353: POP
4354: POP
// end ; end ;
4355: GO 4079
4357: POP
4358: POP
// if sci then
4359: LD_VAR 0 7
4363: IFFALSE 4418
// for i in sci do
4365: LD_ADDR_VAR 0 1
4369: PUSH
4370: LD_VAR 0 7
4374: PUSH
4375: FOR_IN
4376: IFFALSE 4416
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4378: LD_VAR 0 1
4382: PPUSH
4383: LD_INT 80
4385: PPUSH
4386: LD_INT 49
4388: PPUSH
4389: CALL_OW 297
4393: PUSH
4394: LD_INT 9
4396: GREATER
4397: IFFALSE 4414
// ComMoveXY ( i , 80 , 49 ) ;
4399: LD_VAR 0 1
4403: PPUSH
4404: LD_INT 80
4406: PPUSH
4407: LD_INT 49
4409: PPUSH
4410: CALL_OW 111
// end ;
4414: GO 4375
4416: POP
4417: POP
// if mech then
4418: LD_VAR 0 8
4422: IFFALSE 4636
// for i in mech do
4424: LD_ADDR_VAR 0 1
4428: PUSH
4429: LD_VAR 0 8
4433: PUSH
4434: FOR_IN
4435: IFFALSE 4634
// begin hasVehicle := IsInUnit ( i ) ;
4437: LD_ADDR_VAR 0 10
4441: PUSH
4442: LD_VAR 0 1
4446: PPUSH
4447: CALL_OW 310
4451: ST_TO_ADDR
// if enemyInBase then
4452: LD_VAR 0 9
4456: IFFALSE 4552
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4458: LD_VAR 0 10
4462: PUSH
4463: LD_VAR 0 10
4467: PPUSH
4468: CALL_OW 256
4472: PUSH
4473: LD_INT 500
4475: GREATER
4476: AND
4477: IFFALSE 4505
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4479: LD_VAR 0 10
4483: PPUSH
4484: LD_VAR 0 9
4488: PPUSH
4489: LD_VAR 0 10
4493: PPUSH
4494: CALL_OW 74
4498: PPUSH
4499: CALL_OW 115
4503: GO 4550
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4505: LD_VAR 0 10
4509: PPUSH
4510: LD_INT 86
4512: PPUSH
4513: LD_INT 49
4515: PPUSH
4516: CALL_OW 297
4520: PUSH
4521: LD_INT 8
4523: GREATER
4524: IFFALSE 4550
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4526: LD_VAR 0 10
4530: PPUSH
4531: LD_INT 86
4533: PPUSH
4534: LD_INT 49
4536: PPUSH
4537: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4541: LD_VAR 0 1
4545: PPUSH
4546: CALL 66290 0 1
// end end else
4550: GO 4632
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4552: LD_VAR 0 1
4556: PPUSH
4557: LD_INT 86
4559: PPUSH
4560: LD_INT 49
4562: PPUSH
4563: CALL_OW 297
4567: PUSH
4568: LD_INT 8
4570: GREATER
4571: IFFALSE 4590
// ComMoveXY ( i , 86 , 49 ) else
4573: LD_VAR 0 1
4577: PPUSH
4578: LD_INT 86
4580: PPUSH
4581: LD_INT 49
4583: PPUSH
4584: CALL_OW 111
4588: GO 4632
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4590: LD_VAR 0 10
4594: PUSH
4595: LD_VAR 0 10
4599: PPUSH
4600: CALL_OW 256
4604: PUSH
4605: LD_INT 1000
4607: LESS
4608: AND
4609: IFFALSE 4632
// begin SetFuel ( hasVehicle , 100 ) ;
4611: LD_VAR 0 10
4615: PPUSH
4616: LD_INT 100
4618: PPUSH
4619: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4623: LD_VAR 0 1
4627: PPUSH
4628: CALL 66170 0 1
// end ; end ; end ;
4632: GO 4434
4634: POP
4635: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4636: LD_ADDR_VAR 0 4
4640: PUSH
4641: LD_INT 12
4643: PPUSH
4644: LD_INT 3
4646: PUSH
4647: LD_INT 24
4649: PUSH
4650: LD_INT 1000
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 21
4663: PUSH
4664: LD_INT 3
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PPUSH
4675: CALL_OW 70
4679: ST_TO_ADDR
// if tmp and eng then
4680: LD_VAR 0 4
4684: PUSH
4685: LD_VAR 0 6
4689: AND
4690: IFFALSE 4796
// begin for i in eng do
4692: LD_ADDR_VAR 0 1
4696: PUSH
4697: LD_VAR 0 6
4701: PUSH
4702: FOR_IN
4703: IFFALSE 4794
// if IsInUnit ( i ) then
4705: LD_VAR 0 1
4709: PPUSH
4710: CALL_OW 310
4714: IFFALSE 4727
// ComExitBuilding ( i ) else
4716: LD_VAR 0 1
4720: PPUSH
4721: CALL_OW 122
4725: GO 4792
// if GetLives ( i ) = 1000 then
4727: LD_VAR 0 1
4731: PPUSH
4732: CALL_OW 256
4736: PUSH
4737: LD_INT 1000
4739: EQUAL
4740: IFFALSE 4762
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4742: LD_VAR 0 1
4746: PPUSH
4747: LD_VAR 0 4
4751: PUSH
4752: LD_INT 1
4754: ARRAY
4755: PPUSH
4756: CALL_OW 130
4760: GO 4792
// if GetLives ( i ) < 700 then
4762: LD_VAR 0 1
4766: PPUSH
4767: CALL_OW 256
4771: PUSH
4772: LD_INT 700
4774: LESS
4775: IFFALSE 4792
// ComMoveXY ( i , 80 , 49 ) ;
4777: LD_VAR 0 1
4781: PPUSH
4782: LD_INT 80
4784: PPUSH
4785: LD_INT 49
4787: PPUSH
4788: CALL_OW 111
4792: GO 4702
4794: POP
4795: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
4796: LD_VAR 0 4
4800: NOT
4801: PUSH
4802: LD_VAR 0 6
4806: PPUSH
4807: LD_INT 3
4809: PUSH
4810: LD_INT 54
4812: PUSH
4813: EMPTY
4814: LIST
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PPUSH
4820: CALL_OW 72
4824: AND
4825: IFFALSE 4914
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
4827: LD_ADDR_VAR 0 1
4831: PUSH
4832: LD_VAR 0 6
4836: PPUSH
4837: LD_INT 3
4839: PUSH
4840: LD_INT 54
4842: PUSH
4843: EMPTY
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PPUSH
4850: CALL_OW 72
4854: PUSH
4855: FOR_IN
4856: IFFALSE 4912
// if GetLives ( i ) < 1000 then
4858: LD_VAR 0 1
4862: PPUSH
4863: CALL_OW 256
4867: PUSH
4868: LD_INT 1000
4870: LESS
4871: IFFALSE 4890
// ComMoveXY ( i , 80 , 49 ) else
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_INT 80
4880: PPUSH
4881: LD_INT 49
4883: PPUSH
4884: CALL_OW 111
4888: GO 4910
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
4890: LD_VAR 0 1
4894: PPUSH
4895: LD_INT 86
4897: PPUSH
4898: LD_INT 54
4900: PPUSH
4901: CALL_OW 428
4905: PPUSH
4906: CALL_OW 120
4910: GO 4855
4912: POP
4913: POP
// end ;
4914: PPOPN 10
4916: END
// export function PrepareOmarSquad ; var i , j , p ; begin
4917: LD_INT 0
4919: PPUSH
4920: PPUSH
4921: PPUSH
4922: PPUSH
// uc_side := 5 ;
4923: LD_ADDR_OWVAR 20
4927: PUSH
4928: LD_INT 5
4930: ST_TO_ADDR
// uc_nation := 2 ;
4931: LD_ADDR_OWVAR 21
4935: PUSH
4936: LD_INT 2
4938: ST_TO_ADDR
// omarSquad := [ ] ;
4939: LD_ADDR_EXP 50
4943: PUSH
4944: EMPTY
4945: ST_TO_ADDR
// for i := 1 to 4 do
4946: LD_ADDR_VAR 0 2
4950: PUSH
4951: DOUBLE
4952: LD_INT 1
4954: DEC
4955: ST_TO_ADDR
4956: LD_INT 4
4958: PUSH
4959: FOR_TO
4960: IFFALSE 5083
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: DOUBLE
4968: LD_INT 1
4970: DEC
4971: ST_TO_ADDR
4972: LD_INT 6
4974: PUSH
4975: LD_INT 2
4977: PUSH
4978: LD_INT 2
4980: PUSH
4981: LD_EXP 21
4985: PLUS
4986: PUSH
4987: LD_INT 2
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: PUSH
4996: LD_VAR 0 2
5000: ARRAY
5001: PUSH
5002: FOR_TO
5003: IFFALSE 5079
// begin PrepareHuman ( false , i , 5 ) ;
5005: LD_INT 0
5007: PPUSH
5008: LD_VAR 0 2
5012: PPUSH
5013: LD_INT 5
5015: PPUSH
5016: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5020: LD_ADDR_EXP 50
5024: PUSH
5025: LD_EXP 50
5029: PPUSH
5030: CALL_OW 44
5034: PPUSH
5035: CALL 64470 0 2
5039: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5040: LD_VAR 0 2
5044: PUSH
5045: LD_INT 1
5047: EQUAL
5048: PUSH
5049: LD_INT 50
5051: PPUSH
5052: CALL_OW 13
5056: AND
5057: IFFALSE 5077
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5059: LD_EXP 50
5063: PUSH
5064: LD_EXP 50
5068: ARRAY
5069: PPUSH
5070: LD_INT 8
5072: PPUSH
5073: CALL_OW 336
// end ;
5077: GO 5002
5079: POP
5080: POP
// end ;
5081: GO 4959
5083: POP
5084: POP
// if HexInfo ( 340 , 205 ) then
5085: LD_INT 340
5087: PPUSH
5088: LD_INT 205
5090: PPUSH
5091: CALL_OW 428
5095: IFFALSE 5112
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5097: LD_INT 340
5099: PPUSH
5100: LD_INT 205
5102: PPUSH
5103: CALL_OW 428
5107: PPUSH
5108: CALL_OW 64
// p := 0 ;
5112: LD_ADDR_VAR 0 4
5116: PUSH
5117: LD_INT 0
5119: ST_TO_ADDR
// for i in omarSquad do
5120: LD_ADDR_VAR 0 2
5124: PUSH
5125: LD_EXP 50
5129: PUSH
5130: FOR_IN
5131: IFFALSE 5332
// begin uc_direction := 4 ;
5133: LD_ADDR_OWVAR 24
5137: PUSH
5138: LD_INT 4
5140: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5141: LD_VAR 0 2
5145: PPUSH
5146: CALL_OW 257
5150: PUSH
5151: LD_INT 3
5153: EQUAL
5154: PUSH
5155: LD_VAR 0 4
5159: PUSH
5160: LD_INT 2
5162: LESS
5163: AND
5164: IFFALSE 5293
// begin p := p + 1 ;
5166: LD_ADDR_VAR 0 4
5170: PUSH
5171: LD_VAR 0 4
5175: PUSH
5176: LD_INT 1
5178: PLUS
5179: ST_TO_ADDR
// uc_side := 5 ;
5180: LD_ADDR_OWVAR 20
5184: PUSH
5185: LD_INT 5
5187: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5188: LD_INT 0
5190: PPUSH
5191: LD_INT 1
5193: PPUSH
5194: CALL_OW 12
5198: IFFALSE 5229
// begin uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5208: LD_INT 13
5210: PPUSH
5211: LD_INT 1
5213: PPUSH
5214: LD_INT 1
5216: PPUSH
5217: LD_INT 27
5219: PPUSH
5220: LD_INT 88
5222: PPUSH
5223: CALL 32036 0 5
// end else
5227: GO 5256
// begin uc_nation := 3 ;
5229: LD_ADDR_OWVAR 21
5233: PUSH
5234: LD_INT 3
5236: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5237: LD_INT 22
5239: PPUSH
5240: LD_INT 1
5242: PPUSH
5243: LD_INT 1
5245: PPUSH
5246: LD_INT 45
5248: PPUSH
5249: LD_INT 88
5251: PPUSH
5252: CALL 32036 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5256: CALL_OW 45
5260: PPUSH
5261: LD_INT 13
5263: PPUSH
5264: LD_INT 0
5266: PPUSH
5267: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5271: LD_VAR 0 2
5275: PPUSH
5276: LD_INT 340
5278: PPUSH
5279: LD_INT 205
5281: PPUSH
5282: CALL_OW 428
5286: PPUSH
5287: CALL_OW 52
// end else
5291: GO 5308
// PlaceUnitArea ( i , southSpawn , false ) ;
5293: LD_VAR 0 2
5297: PPUSH
5298: LD_INT 13
5300: PPUSH
5301: LD_INT 0
5303: PPUSH
5304: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5308: LD_VAR 0 2
5312: PPUSH
5313: LD_INT 333
5315: PPUSH
5316: LD_INT 210
5318: PPUSH
5319: CALL_OW 111
// wait ( 0 0$2 ) ;
5323: LD_INT 70
5325: PPUSH
5326: CALL_OW 67
// end ;
5330: GO 5130
5332: POP
5333: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5334: LD_EXP 42
5338: PPUSH
5339: LD_INT 340
5341: PPUSH
5342: LD_INT 205
5344: PPUSH
5345: LD_INT 0
5347: PPUSH
5348: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5352: LD_EXP 42
5356: PPUSH
5357: LD_INT 333
5359: PPUSH
5360: LD_INT 206
5362: PPUSH
5363: CALL_OW 111
// wait ( 0 0$2 ) ;
5367: LD_INT 70
5369: PPUSH
5370: CALL_OW 67
// ComHold ( omarSquad ) ;
5374: LD_EXP 50
5378: PPUSH
5379: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5383: LD_EXP 42
5387: PUSH
5388: LD_EXP 50
5392: PPUSH
5393: LD_INT 2
5395: PUSH
5396: LD_INT 25
5398: PUSH
5399: LD_INT 1
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 25
5408: PUSH
5409: LD_INT 8
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL_OW 72
5425: UNION
5426: PUSH
5427: LD_INT 22
5429: PUSH
5430: LD_INT 5
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: LD_INT 21
5439: PUSH
5440: LD_INT 2
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PPUSH
5451: CALL_OW 69
5455: UNION
5456: PPUSH
5457: LD_INT 315
5459: PPUSH
5460: LD_INT 214
5462: PPUSH
5463: CALL_OW 114
// wait ( 0 0$22 ) ;
5467: LD_INT 770
5469: PPUSH
5470: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5474: LD_EXP 50
5478: PUSH
5479: LD_EXP 42
5483: UNION
5484: PPUSH
5485: LD_INT 329
5487: PPUSH
5488: LD_INT 231
5490: PPUSH
5491: CALL_OW 114
// end ;
5495: LD_VAR 0 1
5499: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5500: LD_EXP 10
5504: IFFALSE 6587
5506: GO 5508
5508: DISABLE
5509: LD_INT 0
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
5521: PPUSH
// begin enable ;
5522: ENABLE
// if not omarSquad then
5523: LD_EXP 50
5527: NOT
5528: IFFALSE 5532
// exit ;
5530: GO 6587
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5532: LD_ADDR_VAR 0 10
5536: PUSH
5537: LD_INT 14
5539: PPUSH
5540: LD_INT 81
5542: PUSH
5543: LD_INT 5
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: PPUSH
5550: CALL_OW 70
5554: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5555: LD_ADDR_VAR 0 6
5559: PUSH
5560: LD_EXP 50
5564: PPUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 25
5580: PUSH
5581: LD_INT 8
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL_OW 72
5597: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5598: LD_ADDR_VAR 0 7
5602: PUSH
5603: LD_EXP 50
5607: PPUSH
5608: LD_INT 25
5610: PUSH
5611: LD_INT 2
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PPUSH
5618: CALL_OW 72
5622: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5623: LD_ADDR_VAR 0 9
5627: PUSH
5628: LD_EXP 50
5632: PPUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 3
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PPUSH
5643: CALL_OW 72
5647: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5648: LD_ADDR_VAR 0 8
5652: PUSH
5653: LD_EXP 50
5657: PPUSH
5658: LD_INT 25
5660: PUSH
5661: LD_INT 4
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: PPUSH
5668: CALL_OW 72
5672: ST_TO_ADDR
// if sol then
5673: LD_VAR 0 6
5677: IFFALSE 6041
// for i in sol do
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: LD_VAR 0 6
5688: PUSH
5689: FOR_IN
5690: IFFALSE 6039
// if not HasTask ( i ) then
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL_OW 314
5701: NOT
5702: IFFALSE 6037
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 310
5713: NOT
5714: PUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: CALL_OW 256
5724: PUSH
5725: LD_INT 500
5727: LESS
5728: AND
5729: PUSH
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 333
5737: PPUSH
5738: LD_INT 234
5740: PPUSH
5741: CALL_OW 297
5745: PUSH
5746: LD_INT 6
5748: GREATER
5749: AND
5750: IFFALSE 5769
// begin ComMoveXY ( i , 333 , 234 ) ;
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_INT 333
5759: PPUSH
5760: LD_INT 234
5762: PPUSH
5763: CALL_OW 111
// continue ;
5767: GO 5689
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5769: LD_ADDR_VAR 0 5
5773: PUSH
5774: LD_INT 22
5776: PUSH
5777: LD_INT 5
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PUSH
5784: LD_INT 58
5786: PUSH
5787: EMPTY
5788: LIST
5789: PUSH
5790: LD_INT 50
5792: PUSH
5793: EMPTY
5794: LIST
5795: PUSH
5796: LD_INT 2
5798: PUSH
5799: LD_INT 30
5801: PUSH
5802: LD_INT 32
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PUSH
5809: LD_INT 30
5811: PUSH
5812: LD_INT 31
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
5835: LD_VAR 0 5
5839: PUSH
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 310
5849: PPUSH
5850: CALL_OW 266
5854: PUSH
5855: LD_INT 31
5857: NONEQUAL
5858: AND
5859: IFFALSE 5941
// begin for j in tmp do
5861: LD_ADDR_VAR 0 2
5865: PUSH
5866: LD_VAR 0 5
5870: PUSH
5871: FOR_IN
5872: IFFALSE 5937
// if GetTag ( j ) <> 1 then
5874: LD_VAR 0 2
5878: PPUSH
5879: CALL_OW 110
5883: PUSH
5884: LD_INT 1
5886: NONEQUAL
5887: IFFALSE 5935
// begin SetTag ( j , 1 ) ;
5889: LD_VAR 0 2
5893: PPUSH
5894: LD_INT 1
5896: PPUSH
5897: CALL_OW 109
// if IsInUnit ( i ) then
5901: LD_VAR 0 1
5905: PPUSH
5906: CALL_OW 310
5910: IFFALSE 5921
// ComExit ( i ) ;
5912: LD_VAR 0 1
5916: PPUSH
5917: CALL 64868 0 1
// AddComEnterUnit ( i , j ) ;
5921: LD_VAR 0 1
5925: PPUSH
5926: LD_VAR 0 2
5930: PPUSH
5931: CALL_OW 180
// end ;
5935: GO 5871
5937: POP
5938: POP
// end else
5939: GO 6037
// if not IsInUnit ( i ) then
5941: LD_VAR 0 1
5945: PPUSH
5946: CALL_OW 310
5950: NOT
5951: IFFALSE 6037
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5953: LD_ADDR_VAR 0 5
5957: PUSH
5958: LD_INT 22
5960: PUSH
5961: LD_INT 5
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 50
5970: PUSH
5971: EMPTY
5972: LIST
5973: PUSH
5974: LD_INT 30
5976: PUSH
5977: LD_INT 4
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 69
5993: ST_TO_ADDR
// if tmp then
5994: LD_VAR 0 5
5998: IFFALSE 6037
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6000: LD_VAR 0 5
6004: PUSH
6005: LD_INT 1
6007: ARRAY
6008: PPUSH
6009: CALL_OW 313
6013: PUSH
6014: LD_INT 6
6016: LESS
6017: IFFALSE 6037
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6019: LD_VAR 0 1
6023: PPUSH
6024: LD_VAR 0 5
6028: PUSH
6029: LD_INT 1
6031: ARRAY
6032: PPUSH
6033: CALL_OW 120
// end ; end ;
6037: GO 5689
6039: POP
6040: POP
// if sci then
6041: LD_VAR 0 8
6045: IFFALSE 6100
// for i in sci do
6047: LD_ADDR_VAR 0 1
6051: PUSH
6052: LD_VAR 0 8
6056: PUSH
6057: FOR_IN
6058: IFFALSE 6098
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6060: LD_VAR 0 1
6064: PPUSH
6065: LD_INT 333
6067: PPUSH
6068: LD_INT 234
6070: PPUSH
6071: CALL_OW 297
6075: PUSH
6076: LD_INT 9
6078: GREATER
6079: IFFALSE 6096
// ComMoveXY ( i , 333 , 234 ) ;
6081: LD_VAR 0 1
6085: PPUSH
6086: LD_INT 333
6088: PPUSH
6089: LD_INT 234
6091: PPUSH
6092: CALL_OW 111
// end ;
6096: GO 6057
6098: POP
6099: POP
// if mech then
6100: LD_VAR 0 9
6104: IFFALSE 6309
// for i in mech do
6106: LD_ADDR_VAR 0 1
6110: PUSH
6111: LD_VAR 0 9
6115: PUSH
6116: FOR_IN
6117: IFFALSE 6307
// begin hasVehicle := IsInUnit ( i ) ;
6119: LD_ADDR_VAR 0 11
6123: PUSH
6124: LD_VAR 0 1
6128: PPUSH
6129: CALL_OW 310
6133: ST_TO_ADDR
// if enemyInBase then
6134: LD_VAR 0 10
6138: IFFALSE 6225
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6140: LD_VAR 0 11
6144: PUSH
6145: LD_VAR 0 11
6149: PPUSH
6150: CALL_OW 256
6154: PUSH
6155: LD_INT 500
6157: GREATER
6158: AND
6159: IFFALSE 6187
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6161: LD_VAR 0 11
6165: PPUSH
6166: LD_VAR 0 10
6170: PPUSH
6171: LD_VAR 0 11
6175: PPUSH
6176: CALL_OW 74
6180: PPUSH
6181: CALL_OW 115
6185: GO 6223
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6187: LD_VAR 0 11
6191: PPUSH
6192: LD_INT 333
6194: PPUSH
6195: LD_INT 234
6197: PPUSH
6198: CALL_OW 297
6202: PUSH
6203: LD_INT 6
6205: GREATER
6206: IFFALSE 6223
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6208: LD_VAR 0 11
6212: PPUSH
6213: LD_INT 333
6215: PPUSH
6216: LD_INT 234
6218: PPUSH
6219: CALL_OW 111
// end else
6223: GO 6305
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6225: LD_VAR 0 1
6229: PPUSH
6230: LD_INT 333
6232: PPUSH
6233: LD_INT 234
6235: PPUSH
6236: CALL_OW 297
6240: PUSH
6241: LD_INT 6
6243: GREATER
6244: IFFALSE 6263
// ComMoveXY ( i , 333 , 234 ) else
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_INT 333
6253: PPUSH
6254: LD_INT 234
6256: PPUSH
6257: CALL_OW 111
6261: GO 6305
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6263: LD_VAR 0 11
6267: PUSH
6268: LD_VAR 0 11
6272: PPUSH
6273: CALL_OW 256
6277: PUSH
6278: LD_INT 1000
6280: LESS
6281: AND
6282: IFFALSE 6305
// begin SetFuel ( hasVehicle , 100 ) ;
6284: LD_VAR 0 11
6288: PPUSH
6289: LD_INT 100
6291: PPUSH
6292: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6296: LD_VAR 0 1
6300: PPUSH
6301: CALL 66170 0 1
// end ; end ; end ;
6305: GO 6116
6307: POP
6308: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6309: LD_ADDR_VAR 0 5
6313: PUSH
6314: LD_INT 14
6316: PPUSH
6317: LD_INT 3
6319: PUSH
6320: LD_INT 24
6322: PUSH
6323: LD_INT 1000
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 21
6336: PUSH
6337: LD_INT 3
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PPUSH
6348: CALL_OW 70
6352: ST_TO_ADDR
// if tmp and eng then
6353: LD_VAR 0 5
6357: PUSH
6358: LD_VAR 0 7
6362: AND
6363: IFFALSE 6469
// begin for i in eng do
6365: LD_ADDR_VAR 0 1
6369: PUSH
6370: LD_VAR 0 7
6374: PUSH
6375: FOR_IN
6376: IFFALSE 6467
// if IsInUnit ( i ) then
6378: LD_VAR 0 1
6382: PPUSH
6383: CALL_OW 310
6387: IFFALSE 6400
// ComExitBuilding ( i ) else
6389: LD_VAR 0 1
6393: PPUSH
6394: CALL_OW 122
6398: GO 6465
// if GetLives ( i ) = 1000 then
6400: LD_VAR 0 1
6404: PPUSH
6405: CALL_OW 256
6409: PUSH
6410: LD_INT 1000
6412: EQUAL
6413: IFFALSE 6435
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6415: LD_VAR 0 1
6419: PPUSH
6420: LD_VAR 0 5
6424: PUSH
6425: LD_INT 1
6427: ARRAY
6428: PPUSH
6429: CALL_OW 130
6433: GO 6465
// if GetLives ( i ) < 700 then
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 256
6444: PUSH
6445: LD_INT 700
6447: LESS
6448: IFFALSE 6465
// ComMoveXY ( i , 333 , 234 ) ;
6450: LD_VAR 0 1
6454: PPUSH
6455: LD_INT 333
6457: PPUSH
6458: LD_INT 234
6460: PPUSH
6461: CALL_OW 111
6465: GO 6375
6467: POP
6468: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6469: LD_VAR 0 5
6473: NOT
6474: PUSH
6475: LD_VAR 0 7
6479: PPUSH
6480: LD_INT 3
6482: PUSH
6483: LD_INT 54
6485: PUSH
6486: EMPTY
6487: LIST
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PPUSH
6493: CALL_OW 72
6497: AND
6498: IFFALSE 6587
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6500: LD_ADDR_VAR 0 1
6504: PUSH
6505: LD_VAR 0 7
6509: PPUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 54
6515: PUSH
6516: EMPTY
6517: LIST
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PPUSH
6523: CALL_OW 72
6527: PUSH
6528: FOR_IN
6529: IFFALSE 6585
// if GetLives ( i ) < 1000 then
6531: LD_VAR 0 1
6535: PPUSH
6536: CALL_OW 256
6540: PUSH
6541: LD_INT 1000
6543: LESS
6544: IFFALSE 6563
// ComMoveXY ( i , 333 , 234 ) else
6546: LD_VAR 0 1
6550: PPUSH
6551: LD_INT 333
6553: PPUSH
6554: LD_INT 234
6556: PPUSH
6557: CALL_OW 111
6561: GO 6583
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6563: LD_VAR 0 1
6567: PPUSH
6568: LD_INT 341
6570: PPUSH
6571: LD_INT 232
6573: PPUSH
6574: CALL_OW 428
6578: PPUSH
6579: CALL_OW 120
6583: GO 6528
6585: POP
6586: POP
// end ;
6587: PPOPN 11
6589: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6590: LD_EXP 42
6594: PPUSH
6595: CALL_OW 256
6599: PUSH
6600: LD_INT 1000
6602: LESS
6603: IFFALSE 6621
6605: GO 6607
6607: DISABLE
// begin enable ;
6608: ENABLE
// SetLives ( Omar , 1000 ) ;
6609: LD_EXP 42
6613: PPUSH
6614: LD_INT 1000
6616: PPUSH
6617: CALL_OW 234
// end ;
6621: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
6622: LD_EXP 23
6626: IFFALSE 7502
6628: GO 6630
6630: DISABLE
6631: LD_INT 0
6633: PPUSH
6634: PPUSH
// begin wait ( 0 0$25 ) ;
6635: LD_INT 875
6637: PPUSH
6638: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
6642: LD_EXP 50
6646: PPUSH
6647: LD_INT 2
6649: PUSH
6650: LD_INT 25
6652: PUSH
6653: LD_INT 1
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: LD_INT 25
6662: PUSH
6663: LD_INT 8
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: PPUSH
6675: CALL_OW 72
6679: PPUSH
6680: CALL_OW 122
// wait ( 0 0$3 ) ;
6684: LD_INT 105
6686: PPUSH
6687: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
6691: LD_EXP 50
6695: PUSH
6696: LD_EXP 42
6700: UNION
6701: PPUSH
6702: LD_INT 225
6704: PPUSH
6705: LD_INT 223
6707: PPUSH
6708: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
6712: LD_INT 22
6714: PUSH
6715: LD_INT 5
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: LD_INT 25
6727: PUSH
6728: LD_INT 1
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 25
6737: PUSH
6738: LD_INT 8
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 21
6747: PUSH
6748: LD_INT 2
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PPUSH
6765: CALL_OW 69
6769: PPUSH
6770: LD_INT 167
6772: PPUSH
6773: LD_INT 231
6775: PPUSH
6776: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
6780: LD_EXP 50
6784: PPUSH
6785: LD_INT 25
6787: PUSH
6788: LD_INT 4
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: PPUSH
6800: LD_INT 222
6802: PPUSH
6803: LD_INT 229
6805: PPUSH
6806: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6810: LD_INT 35
6812: PPUSH
6813: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
6817: LD_ADDR_VAR 0 1
6821: PUSH
6822: LD_EXP 50
6826: PUSH
6827: LD_INT 22
6829: PUSH
6830: LD_INT 5
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: LD_INT 21
6839: PUSH
6840: LD_INT 2
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: UNION
6856: PUSH
6857: FOR_IN
6858: IFFALSE 7493
// begin if IsDead ( i ) then
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 301
6869: IFFALSE 6889
// begin omarSquad := omarSquad diff i ;
6871: LD_ADDR_EXP 50
6875: PUSH
6876: LD_EXP 50
6880: PUSH
6881: LD_VAR 0 1
6885: DIFF
6886: ST_TO_ADDR
// continue ;
6887: GO 6857
// end ; if GetClass ( i ) in [ 1 , 8 ] then
6889: LD_VAR 0 1
6893: PPUSH
6894: CALL_OW 257
6898: PUSH
6899: LD_INT 1
6901: PUSH
6902: LD_INT 8
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: IN
6909: IFFALSE 7103
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6911: LD_VAR 0 1
6915: PPUSH
6916: CALL_OW 256
6920: PUSH
6921: LD_INT 700
6923: LESS
6924: PUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 110
6934: PUSH
6935: LD_INT 0
6937: EQUAL
6938: AND
6939: IFFALSE 6968
// begin SetTag ( i , 1 ) ;
6941: LD_VAR 0 1
6945: PPUSH
6946: LD_INT 1
6948: PPUSH
6949: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
6953: LD_VAR 0 1
6957: PPUSH
6958: LD_INT 222
6960: PPUSH
6961: LD_INT 229
6963: PPUSH
6964: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6968: LD_VAR 0 1
6972: PPUSH
6973: CALL_OW 256
6977: PUSH
6978: LD_INT 1000
6980: EQUAL
6981: PUSH
6982: LD_VAR 0 1
6986: PPUSH
6987: CALL_OW 110
6991: PUSH
6992: LD_INT 1
6994: EQUAL
6995: AND
6996: IFFALSE 7010
// SetTag ( i , 0 ) ;
6998: LD_VAR 0 1
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
7010: LD_VAR 0 1
7014: PPUSH
7015: CALL_OW 110
7019: PUSH
7020: LD_INT 0
7022: EQUAL
7023: PUSH
7024: LD_VAR 0 1
7028: PPUSH
7029: CALL_OW 256
7033: PUSH
7034: LD_INT 700
7036: GREATEREQUAL
7037: AND
7038: PUSH
7039: LD_VAR 0 1
7043: PPUSH
7044: CALL_OW 314
7048: NOT
7049: AND
7050: IFFALSE 7103
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
7052: LD_INT 18
7054: PPUSH
7055: LD_INT 22
7057: PUSH
7058: LD_INT 3
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PPUSH
7065: CALL_OW 70
7069: IFFALSE 7088
// ComAgressiveMove ( i , 167 , 231 ) else
7071: LD_VAR 0 1
7075: PPUSH
7076: LD_INT 167
7078: PPUSH
7079: LD_INT 231
7081: PPUSH
7082: CALL_OW 114
7086: GO 7103
// ComAgressiveMove ( i , 106 , 153 ) ;
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_INT 106
7095: PPUSH
7096: LD_INT 153
7098: PPUSH
7099: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL_OW 247
7112: PUSH
7113: LD_INT 2
7115: EQUAL
7116: IFFALSE 7491
// begin nearestPoint := [ 219 , 219 ] ;
7118: LD_ADDR_VAR 0 2
7122: PUSH
7123: LD_INT 219
7125: PUSH
7126: LD_INT 219
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
7133: LD_VAR 0 1
7137: PPUSH
7138: LD_INT 156
7140: PPUSH
7141: LD_INT 202
7143: PPUSH
7144: CALL_OW 297
7148: PUSH
7149: LD_VAR 0 1
7153: PPUSH
7154: LD_INT 219
7156: PPUSH
7157: LD_INT 219
7159: PPUSH
7160: CALL_OW 297
7164: LESS
7165: IFFALSE 7182
// nearestPoint := [ 156 , 202 ] ;
7167: LD_ADDR_VAR 0 2
7171: PUSH
7172: LD_INT 156
7174: PUSH
7175: LD_INT 202
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
7182: LD_VAR 0 1
7186: PPUSH
7187: CALL_OW 256
7191: PUSH
7192: LD_INT 700
7194: LESS
7195: PUSH
7196: LD_VAR 0 1
7200: PPUSH
7201: CALL_OW 110
7205: PUSH
7206: LD_INT 0
7208: EQUAL
7209: AND
7210: IFFALSE 7251
// begin SetTag ( i , 1 ) ;
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
7224: LD_VAR 0 1
7228: PPUSH
7229: LD_VAR 0 2
7233: PUSH
7234: LD_INT 1
7236: ARRAY
7237: PPUSH
7238: LD_VAR 0 2
7242: PUSH
7243: LD_INT 2
7245: ARRAY
7246: PPUSH
7247: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
7251: LD_VAR 0 1
7255: PPUSH
7256: CALL_OW 256
7260: PUSH
7261: LD_INT 700
7263: LESS
7264: PUSH
7265: LD_VAR 0 1
7269: PPUSH
7270: CALL_OW 110
7274: PUSH
7275: LD_INT 1
7277: EQUAL
7278: AND
7279: PUSH
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 311
7289: AND
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: LD_VAR 0 2
7300: PUSH
7301: LD_INT 1
7303: ARRAY
7304: PPUSH
7305: LD_VAR 0 2
7309: PUSH
7310: LD_INT 2
7312: ARRAY
7313: PPUSH
7314: CALL_OW 297
7318: PUSH
7319: LD_INT 10
7321: LESS
7322: AND
7323: IFFALSE 7334
// ComRepairVehicleAndReturn ( i ) ;
7325: LD_VAR 0 1
7329: PPUSH
7330: CALL 66170 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
7334: LD_VAR 0 1
7338: PPUSH
7339: CALL_OW 256
7343: PUSH
7344: LD_INT 1000
7346: EQUAL
7347: PUSH
7348: LD_VAR 0 1
7352: PPUSH
7353: CALL_OW 110
7357: PUSH
7358: LD_INT 1
7360: EQUAL
7361: AND
7362: PUSH
7363: LD_VAR 0 1
7367: PPUSH
7368: CALL_OW 311
7372: AND
7373: IFFALSE 7387
// SetTag ( i , 0 ) ;
7375: LD_VAR 0 1
7379: PPUSH
7380: LD_INT 0
7382: PPUSH
7383: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
7387: LD_VAR 0 1
7391: PPUSH
7392: CALL_OW 110
7396: PUSH
7397: LD_INT 0
7399: EQUAL
7400: PUSH
7401: LD_VAR 0 1
7405: PPUSH
7406: CALL_OW 256
7410: PUSH
7411: LD_INT 700
7413: GREATEREQUAL
7414: AND
7415: PUSH
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 311
7425: AND
7426: PUSH
7427: LD_VAR 0 1
7431: PPUSH
7432: CALL_OW 314
7436: NOT
7437: AND
7438: IFFALSE 7491
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
7440: LD_INT 18
7442: PPUSH
7443: LD_INT 22
7445: PUSH
7446: LD_INT 3
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PPUSH
7453: CALL_OW 70
7457: IFFALSE 7476
// ComAgressiveMove ( i , 167 , 231 ) else
7459: LD_VAR 0 1
7463: PPUSH
7464: LD_INT 167
7466: PPUSH
7467: LD_INT 231
7469: PPUSH
7470: CALL_OW 114
7474: GO 7491
// ComAgressiveMove ( i , 106 , 153 ) ;
7476: LD_VAR 0 1
7480: PPUSH
7481: LD_INT 106
7483: PPUSH
7484: LD_INT 153
7486: PPUSH
7487: CALL_OW 114
// end ; end ;
7491: GO 6857
7493: POP
7494: POP
// until not omarSquad ;
7495: LD_EXP 50
7499: NOT
7500: IFFALSE 6810
// end ;
7502: PPOPN 2
7504: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , heikeInConvoy ; begin
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
7513: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
7514: LD_INT 20
7516: PPUSH
7517: LD_INT 1
7519: PPUSH
7520: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
7524: LD_INT 175
7526: PPUSH
7527: CALL_OW 67
// heikeInConvoy := false ;
7531: LD_ADDR_VAR 0 7
7535: PUSH
7536: LD_INT 0
7538: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] , [ f_control , control_manual ] ] ) ;
7539: LD_ADDR_VAR 0 3
7543: PUSH
7544: LD_INT 20
7546: PPUSH
7547: LD_INT 22
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 3
7559: PUSH
7560: LD_INT 34
7562: PUSH
7563: LD_INT 88
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 34
7572: PUSH
7573: LD_INT 31
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 33
7587: PUSH
7588: LD_INT 1
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: PPUSH
7600: CALL_OW 70
7604: ST_TO_ADDR
// for i in tmp do
7605: LD_ADDR_VAR 0 2
7609: PUSH
7610: LD_VAR 0 3
7614: PUSH
7615: FOR_IN
7616: IFFALSE 7654
// if IsDrivenBy ( i ) = Heike then
7618: LD_VAR 0 2
7622: PPUSH
7623: CALL_OW 311
7627: PUSH
7628: LD_EXP 32
7632: EQUAL
7633: IFFALSE 7652
// begin heikeInConvoy := true ;
7635: LD_ADDR_VAR 0 7
7639: PUSH
7640: LD_INT 1
7642: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
7643: LD_STRING QHeikeConvoy
7645: PPUSH
7646: CALL_OW 97
// break ;
7650: GO 7654
// end ;
7652: GO 7615
7654: POP
7655: POP
// if not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
7656: LD_VAR 0 7
7660: NOT
7661: PUSH
7662: LD_VAR 0 3
7666: PPUSH
7667: LD_INT 2
7669: PUSH
7670: LD_INT 34
7672: PUSH
7673: LD_INT 32
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 34
7682: PUSH
7683: LD_INT 51
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PPUSH
7695: CALL_OW 72
7699: AND
7700: IFFALSE 7717
// if Query ( QConvoy ) = 1 then
7702: LD_STRING QConvoy
7704: PPUSH
7705: CALL_OW 97
7709: PUSH
7710: LD_INT 1
7712: EQUAL
7713: IFFALSE 7717
// break ;
7715: GO 7721
// until false ;
7717: LD_INT 0
7719: IFFALSE 7524
// SetAreaMapShow ( oilArea , 0 ) ;
7721: LD_INT 20
7723: PPUSH
7724: LD_INT 0
7726: PPUSH
7727: CALL_OW 424
// data := [ ] ;
7731: LD_ADDR_VAR 0 4
7735: PUSH
7736: EMPTY
7737: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
7738: LD_ADDR_VAR 0 5
7742: PUSH
7743: LD_INT 60
7745: PUSH
7746: LD_INT 50
7748: PUSH
7749: LD_INT 40
7751: PUSH
7752: LD_INT 30
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_OWVAR 67
7765: ARRAY
7766: ST_TO_ADDR
// for i in tmp do
7767: LD_ADDR_VAR 0 2
7771: PUSH
7772: LD_VAR 0 3
7776: PUSH
7777: FOR_IN
7778: IFFALSE 7864
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , ] ) ;
7780: LD_ADDR_VAR 0 4
7784: PUSH
7785: LD_VAR 0 4
7789: PPUSH
7790: LD_VAR 0 2
7794: PUSH
7795: LD_VAR 0 2
7799: PPUSH
7800: CALL_OW 311
7804: PUSH
7805: LD_VAR 0 2
7809: PPUSH
7810: CALL_OW 256
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: PPUSH
7820: CALL 64470 0 2
7824: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
7825: LD_VAR 0 2
7829: PPUSH
7830: CALL_OW 311
7834: PPUSH
7835: CALL_OW 64
// RemoveUnit ( i ) ;
7839: LD_VAR 0 2
7843: PPUSH
7844: CALL_OW 64
// chance := chance + 20 ;
7848: LD_ADDR_VAR 0 5
7852: PUSH
7853: LD_VAR 0 5
7857: PUSH
7858: LD_INT 20
7860: PLUS
7861: ST_TO_ADDR
// end ;
7862: GO 7777
7864: POP
7865: POP
// wait ( rand ( 4 4$30 , 5 5$30 ) ) ;
7866: LD_INT 9450
7868: PPUSH
7869: LD_INT 11550
7871: PPUSH
7872: CALL_OW 12
7876: PPUSH
7877: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7881: LD_INT 35
7883: PPUSH
7884: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
7888: LD_INT 22
7890: PUSH
7891: LD_INT 3
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PUSH
7898: LD_INT 92
7900: PUSH
7901: LD_INT 261
7903: PUSH
7904: LD_INT 71
7906: PUSH
7907: LD_INT 12
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL_OW 69
7924: NOT
7925: PUSH
7926: LD_INT 277
7928: PPUSH
7929: LD_INT 80
7931: PPUSH
7932: CALL_OW 428
7936: NOT
7937: AND
7938: IFFALSE 7881
// for i in data do
7940: LD_ADDR_VAR 0 2
7944: PUSH
7945: LD_VAR 0 4
7949: PUSH
7950: FOR_IN
7951: IFFALSE 8255
// begin uc_nation := GetNation ( i [ 1 ] ) ;
7953: LD_ADDR_OWVAR 21
7957: PUSH
7958: LD_VAR 0 2
7962: PUSH
7963: LD_INT 1
7965: ARRAY
7966: PPUSH
7967: CALL_OW 248
7971: ST_TO_ADDR
// uc_side := 2 ;
7972: LD_ADDR_OWVAR 20
7976: PUSH
7977: LD_INT 2
7979: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
7980: LD_VAR 0 2
7984: PUSH
7985: LD_INT 1
7987: ARRAY
7988: PPUSH
7989: CALL_OW 265
7993: PPUSH
7994: LD_VAR 0 2
7998: PUSH
7999: LD_INT 1
8001: ARRAY
8002: PPUSH
8003: CALL_OW 262
8007: PPUSH
8008: LD_VAR 0 2
8012: PUSH
8013: LD_INT 1
8015: ARRAY
8016: PPUSH
8017: CALL_OW 263
8021: PPUSH
8022: LD_VAR 0 2
8026: PUSH
8027: LD_INT 1
8029: ARRAY
8030: PPUSH
8031: CALL_OW 264
8035: PPUSH
8036: LD_INT 66
8038: PPUSH
8039: CALL 32036 0 5
// vehicle := CreateVehicle ;
8043: LD_ADDR_VAR 0 6
8047: PUSH
8048: CALL_OW 45
8052: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
8053: LD_VAR 0 6
8057: PPUSH
8058: LD_INT 277
8060: PPUSH
8061: LD_INT 80
8063: PPUSH
8064: LD_INT 4
8066: PPUSH
8067: LD_INT 0
8069: PPUSH
8070: CALL 66610 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
8074: LD_VAR 0 2
8078: PUSH
8079: LD_INT 2
8081: ARRAY
8082: PPUSH
8083: LD_VAR 0 6
8087: PPUSH
8088: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
8092: LD_VAR 0 6
8096: PPUSH
8097: LD_VAR 0 2
8101: PUSH
8102: LD_INT 3
8104: ARRAY
8105: PPUSH
8106: CALL_OW 234
// if Prob ( chance ) then
8110: LD_VAR 0 5
8114: PPUSH
8115: CALL_OW 13
8119: IFFALSE 8160
// begin if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
8121: LD_VAR 0 6
8125: PPUSH
8126: CALL_OW 264
8130: PUSH
8131: LD_INT 32
8133: PUSH
8134: LD_INT 51
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: IN
8141: IFFALSE 8158
// SetCargo ( vehicle , mat_oil , 100 ) ;
8143: LD_VAR 0 6
8147: PPUSH
8148: LD_INT 2
8150: PPUSH
8151: LD_INT 100
8153: PPUSH
8154: CALL_OW 290
// end else
8158: GO 8186
// if i [ 3 ] > 333 then
8160: LD_VAR 0 2
8164: PUSH
8165: LD_INT 3
8167: ARRAY
8168: PUSH
8169: LD_INT 333
8171: GREATER
8172: IFFALSE 8186
// SetLives ( vehicle , 333 ) ;
8174: LD_VAR 0 6
8178: PPUSH
8179: LD_INT 333
8181: PPUSH
8182: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
8186: LD_VAR 0 6
8190: PPUSH
8191: LD_INT 250
8193: PPUSH
8194: LD_INT 119
8196: PPUSH
8197: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
8201: LD_VAR 0 6
8205: PPUSH
8206: LD_INT 211
8208: PPUSH
8209: LD_INT 80
8211: PPUSH
8212: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
8216: LD_INT 175
8218: PPUSH
8219: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
8223: LD_INT 20
8225: PPUSH
8226: LD_INT 22
8228: PUSH
8229: LD_INT 2
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PUSH
8236: LD_INT 52
8238: PUSH
8239: EMPTY
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 70
8250: NOT
8251: IFFALSE 8216
// end ;
8253: GO 7950
8255: POP
8256: POP
// wait ( 0 0$30 ) ;
8257: LD_INT 1050
8259: PPUSH
8260: CALL_OW 67
// GoForOil ;
8264: CALL 7505 0 0
// end ; end_of_file
8268: LD_VAR 0 1
8272: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
8273: LD_INT 0
8275: PPUSH
// uc_side := side ;
8276: LD_ADDR_OWVAR 20
8280: PUSH
8281: LD_VAR 0 1
8285: ST_TO_ADDR
// uc_nation := nation ;
8286: LD_ADDR_OWVAR 21
8290: PUSH
8291: LD_VAR 0 2
8295: ST_TO_ADDR
// vc_chassis := chassis ;
8296: LD_ADDR_OWVAR 37
8300: PUSH
8301: LD_VAR 0 3
8305: ST_TO_ADDR
// vc_engine := engine ;
8306: LD_ADDR_OWVAR 39
8310: PUSH
8311: LD_VAR 0 4
8315: ST_TO_ADDR
// vc_control := control ;
8316: LD_ADDR_OWVAR 38
8320: PUSH
8321: LD_VAR 0 5
8325: ST_TO_ADDR
// vc_weapon := weapon ;
8326: LD_ADDR_OWVAR 40
8330: PUSH
8331: LD_VAR 0 6
8335: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8336: LD_ADDR_OWVAR 41
8340: PUSH
8341: LD_VAR 0 7
8345: ST_TO_ADDR
// result := CreateVehicle ;
8346: LD_ADDR_VAR 0 8
8350: PUSH
8351: CALL_OW 45
8355: ST_TO_ADDR
// end ;
8356: LD_VAR 0 8
8360: RET
// export function SayX ( units , ident ) ; var i ; begin
8361: LD_INT 0
8363: PPUSH
8364: PPUSH
// result := false ;
8365: LD_ADDR_VAR 0 3
8369: PUSH
8370: LD_INT 0
8372: ST_TO_ADDR
// if not units then
8373: LD_VAR 0 1
8377: NOT
8378: IFFALSE 8382
// exit ;
8380: GO 8436
// for i in units do
8382: LD_ADDR_VAR 0 4
8386: PUSH
8387: LD_VAR 0 1
8391: PUSH
8392: FOR_IN
8393: IFFALSE 8434
// if IsOk ( i ) then
8395: LD_VAR 0 4
8399: PPUSH
8400: CALL_OW 302
8404: IFFALSE 8432
// begin Say ( i , ident ) ;
8406: LD_VAR 0 4
8410: PPUSH
8411: LD_VAR 0 2
8415: PPUSH
8416: CALL_OW 88
// result := i ;
8420: LD_ADDR_VAR 0 3
8424: PUSH
8425: LD_VAR 0 4
8429: ST_TO_ADDR
// break ;
8430: GO 8434
// end ;
8432: GO 8392
8434: POP
8435: POP
// end ;
8436: LD_VAR 0 3
8440: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
8441: LD_INT 0
8443: PPUSH
8444: PPUSH
// InitUc ;
8445: CALL_OW 18
// InitHc ;
8449: CALL_OW 19
// uc_side := 0 ;
8453: LD_ADDR_OWVAR 20
8457: PUSH
8458: LD_INT 0
8460: ST_TO_ADDR
// uc_nation := 0 ;
8461: LD_ADDR_OWVAR 21
8465: PUSH
8466: LD_INT 0
8468: ST_TO_ADDR
// for i = 1 to amount do
8469: LD_ADDR_VAR 0 4
8473: PUSH
8474: DOUBLE
8475: LD_INT 1
8477: DEC
8478: ST_TO_ADDR
8479: LD_VAR 0 2
8483: PUSH
8484: FOR_TO
8485: IFFALSE 8567
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
8487: LD_ADDR_OWVAR 29
8491: PUSH
8492: LD_INT 9
8494: PPUSH
8495: LD_INT 12
8497: PPUSH
8498: CALL_OW 12
8502: PUSH
8503: LD_INT 9
8505: PPUSH
8506: LD_INT 12
8508: PPUSH
8509: CALL_OW 12
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
8518: LD_ADDR_OWVAR 35
8522: PUSH
8523: LD_INT 1
8525: NEG
8526: PPUSH
8527: LD_INT 1
8529: PPUSH
8530: CALL_OW 12
8534: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8535: LD_INT 0
8537: PPUSH
8538: LD_INT 12
8540: PPUSH
8541: LD_INT 1
8543: PPUSH
8544: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
8548: CALL_OW 44
8552: PPUSH
8553: LD_VAR 0 1
8557: PPUSH
8558: LD_INT 0
8560: PPUSH
8561: CALL_OW 49
// end ;
8565: GO 8484
8567: POP
8568: POP
// InitHc ;
8569: CALL_OW 19
// end ;
8573: LD_VAR 0 3
8577: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
8578: LD_INT 0
8580: PPUSH
8581: PPUSH
// uc_side := 0 ;
8582: LD_ADDR_OWVAR 20
8586: PUSH
8587: LD_INT 0
8589: ST_TO_ADDR
// uc_nation := 0 ;
8590: LD_ADDR_OWVAR 21
8594: PUSH
8595: LD_INT 0
8597: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
8598: LD_INT 7
8600: PPUSH
8601: LD_INT 6
8603: PUSH
8604: LD_INT 5
8606: PUSH
8607: LD_INT 4
8609: PUSH
8610: LD_INT 3
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: PUSH
8619: LD_OWVAR 67
8623: ARRAY
8624: PPUSH
8625: CALL 8441 0 2
// for i = 1 to 2 do
8629: LD_ADDR_VAR 0 4
8633: PUSH
8634: DOUBLE
8635: LD_INT 1
8637: DEC
8638: ST_TO_ADDR
8639: LD_INT 2
8641: PUSH
8642: FOR_TO
8643: IFFALSE 8680
// begin vc_chassis := class_mastodont ;
8645: LD_ADDR_OWVAR 37
8649: PUSH
8650: LD_INT 31
8652: ST_TO_ADDR
// vc_control := control_rider ;
8653: LD_ADDR_OWVAR 38
8657: PUSH
8658: LD_INT 4
8660: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
8661: CALL_OW 45
8665: PPUSH
8666: LD_VAR 0 1
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL 63387 0 3
// end ;
8678: GO 8642
8680: POP
8681: POP
// for i := 1 to 4 do
8682: LD_ADDR_VAR 0 4
8686: PUSH
8687: DOUBLE
8688: LD_INT 1
8690: DEC
8691: ST_TO_ADDR
8692: LD_INT 4
8694: PUSH
8695: FOR_TO
8696: IFFALSE 8733
// begin hc_class := class_horse ;
8698: LD_ADDR_OWVAR 28
8702: PUSH
8703: LD_INT 21
8705: ST_TO_ADDR
// hc_gallery :=  ;
8706: LD_ADDR_OWVAR 33
8710: PUSH
8711: LD_STRING 
8713: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
8714: CALL_OW 44
8718: PPUSH
8719: LD_VAR 0 1
8723: PPUSH
8724: LD_INT 0
8726: PPUSH
8727: CALL_OW 49
// end ;
8731: GO 8695
8733: POP
8734: POP
// for i = 1 to 5 do
8735: LD_ADDR_VAR 0 4
8739: PUSH
8740: DOUBLE
8741: LD_INT 1
8743: DEC
8744: ST_TO_ADDR
8745: LD_INT 5
8747: PUSH
8748: FOR_TO
8749: IFFALSE 8803
// begin hc_class = class_tiger ;
8751: LD_ADDR_OWVAR 28
8755: PUSH
8756: LD_INT 14
8758: ST_TO_ADDR
// hc_gallery =  ;
8759: LD_ADDR_OWVAR 33
8763: PUSH
8764: LD_STRING 
8766: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
8767: LD_ADDR_OWVAR 35
8771: PUSH
8772: LD_INT 7
8774: NEG
8775: PPUSH
8776: LD_INT 7
8778: PPUSH
8779: CALL_OW 12
8783: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
8784: CALL_OW 44
8788: PPUSH
8789: LD_VAR 0 1
8793: PPUSH
8794: LD_INT 0
8796: PPUSH
8797: CALL 63387 0 3
// end ;
8801: GO 8748
8803: POP
8804: POP
// for i := 1 to 4 do
8805: LD_ADDR_VAR 0 4
8809: PUSH
8810: DOUBLE
8811: LD_INT 1
8813: DEC
8814: ST_TO_ADDR
8815: LD_INT 4
8817: PUSH
8818: FOR_TO
8819: IFFALSE 8856
// begin hc_class := class_phororhacos ;
8821: LD_ADDR_OWVAR 28
8825: PUSH
8826: LD_INT 18
8828: ST_TO_ADDR
// hc_gallery :=  ;
8829: LD_ADDR_OWVAR 33
8833: PUSH
8834: LD_STRING 
8836: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
8837: CALL_OW 44
8841: PPUSH
8842: LD_VAR 0 1
8846: PPUSH
8847: LD_INT 0
8849: PPUSH
8850: CALL_OW 49
// end ;
8854: GO 8818
8856: POP
8857: POP
// for i := 1 to 4 do
8858: LD_ADDR_VAR 0 4
8862: PUSH
8863: DOUBLE
8864: LD_INT 1
8866: DEC
8867: ST_TO_ADDR
8868: LD_INT 4
8870: PUSH
8871: FOR_TO
8872: IFFALSE 8909
// begin hc_class := class_baggie ;
8874: LD_ADDR_OWVAR 28
8878: PUSH
8879: LD_INT 13
8881: ST_TO_ADDR
// hc_gallery :=  ;
8882: LD_ADDR_OWVAR 33
8886: PUSH
8887: LD_STRING 
8889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
8890: CALL_OW 44
8894: PPUSH
8895: LD_VAR 0 1
8899: PPUSH
8900: LD_INT 0
8902: PPUSH
8903: CALL_OW 49
// end ;
8907: GO 8871
8909: POP
8910: POP
// for i := 1 to 7 do
8911: LD_ADDR_VAR 0 4
8915: PUSH
8916: DOUBLE
8917: LD_INT 1
8919: DEC
8920: ST_TO_ADDR
8921: LD_INT 7
8923: PUSH
8924: FOR_TO
8925: IFFALSE 8962
// begin hc_class := class_frog ;
8927: LD_ADDR_OWVAR 28
8931: PUSH
8932: LD_INT 19
8934: ST_TO_ADDR
// hc_gallery :=  ;
8935: LD_ADDR_OWVAR 33
8939: PUSH
8940: LD_STRING 
8942: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
8943: CALL_OW 44
8947: PPUSH
8948: LD_VAR 0 2
8952: PPUSH
8953: LD_INT 0
8955: PPUSH
8956: CALL_OW 49
// end ;
8960: GO 8924
8962: POP
8963: POP
// end ;
8964: LD_VAR 0 3
8968: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
8969: LD_INT 0
8971: PPUSH
8972: PPUSH
8973: PPUSH
// if not observer or not unit then
8974: LD_VAR 0 1
8978: NOT
8979: PUSH
8980: LD_VAR 0 2
8984: NOT
8985: OR
8986: IFFALSE 8990
// exit ;
8988: GO 9038
// if not See ( GetSide ( observer ) , unit ) then
8990: LD_VAR 0 1
8994: PPUSH
8995: CALL_OW 255
8999: PPUSH
9000: LD_VAR 0 2
9004: PPUSH
9005: CALL_OW 292
9009: NOT
9010: IFFALSE 9014
// exit ;
9012: GO 9038
// result := GetDistUnits ( observer , unit ) < 12 ;
9014: LD_ADDR_VAR 0 3
9018: PUSH
9019: LD_VAR 0 1
9023: PPUSH
9024: LD_VAR 0 2
9028: PPUSH
9029: CALL_OW 296
9033: PUSH
9034: LD_INT 12
9036: LESS
9037: ST_TO_ADDR
// end ;
9038: LD_VAR 0 3
9042: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
9043: LD_INT 0
9045: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
9046: LD_VAR 0 2
9050: PUSH
9051: LD_INT 1
9053: ARRAY
9054: PPUSH
9055: LD_VAR 0 2
9059: PUSH
9060: LD_INT 2
9062: ARRAY
9063: PPUSH
9064: CALL_OW 488
9068: PUSH
9069: LD_VAR 0 2
9073: PUSH
9074: LD_INT 1
9076: ARRAY
9077: PPUSH
9078: LD_VAR 0 2
9082: PUSH
9083: LD_INT 2
9085: ARRAY
9086: PPUSH
9087: CALL_OW 428
9091: PUSH
9092: LD_INT 0
9094: EQUAL
9095: AND
9096: IFFALSE 9130
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
9098: LD_VAR 0 1
9102: PPUSH
9103: LD_VAR 0 2
9107: PUSH
9108: LD_INT 1
9110: ARRAY
9111: PPUSH
9112: LD_VAR 0 2
9116: PUSH
9117: LD_INT 2
9119: ARRAY
9120: PPUSH
9121: LD_VAR 0 3
9125: PPUSH
9126: CALL_OW 48
// end ;
9130: LD_VAR 0 4
9134: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
9135: LD_INT 0
9137: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
9138: LD_VAR 0 1
9142: PPUSH
9143: LD_VAR 0 2
9147: PPUSH
9148: LD_VAR 0 3
9152: PPUSH
9153: LD_VAR 0 4
9157: PPUSH
9158: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
9162: LD_VAR 0 1
9166: PPUSH
9167: LD_VAR 0 2
9171: PPUSH
9172: LD_VAR 0 3
9176: PPUSH
9177: CALL_OW 331
// end ;
9181: LD_VAR 0 5
9185: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
9186: LD_INT 0
9188: PPUSH
// if not units then
9189: LD_VAR 0 1
9193: NOT
9194: IFFALSE 9198
// exit ;
9196: GO 9281
// result := true ;
9198: LD_ADDR_VAR 0 4
9202: PUSH
9203: LD_INT 1
9205: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
9206: LD_VAR 0 1
9210: PPUSH
9211: LD_INT 26
9213: PUSH
9214: LD_INT 1
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PPUSH
9221: CALL_OW 72
9225: PUSH
9226: LD_INT 1
9228: ARRAY
9229: PPUSH
9230: LD_VAR 0 2
9234: PPUSH
9235: CALL_OW 88
9239: NOT
9240: IFFALSE 9281
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
9242: LD_ADDR_VAR 0 4
9246: PUSH
9247: LD_VAR 0 1
9251: PPUSH
9252: LD_INT 26
9254: PUSH
9255: LD_INT 2
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PPUSH
9262: CALL_OW 72
9266: PUSH
9267: LD_INT 1
9269: ARRAY
9270: PPUSH
9271: LD_VAR 0 3
9275: PPUSH
9276: CALL_OW 88
9280: ST_TO_ADDR
// end ;
9281: LD_VAR 0 4
9285: RET
// export function SeeGroup ( side , group ) ; var i ; begin
9286: LD_INT 0
9288: PPUSH
9289: PPUSH
// if not group then
9290: LD_VAR 0 2
9294: NOT
9295: IFFALSE 9299
// exit ;
9297: GO 9344
// for i in group do
9299: LD_ADDR_VAR 0 4
9303: PUSH
9304: LD_VAR 0 2
9308: PUSH
9309: FOR_IN
9310: IFFALSE 9342
// if See ( side , i ) then
9312: LD_VAR 0 1
9316: PPUSH
9317: LD_VAR 0 4
9321: PPUSH
9322: CALL_OW 292
9326: IFFALSE 9340
// begin result := true ;
9328: LD_ADDR_VAR 0 3
9332: PUSH
9333: LD_INT 1
9335: ST_TO_ADDR
// exit ;
9336: POP
9337: POP
9338: GO 9344
// end ;
9340: GO 9309
9342: POP
9343: POP
// end ; end_of_file
9344: LD_VAR 0 3
9348: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
9349: LD_INT 0
9351: PPUSH
9352: PPUSH
9353: PPUSH
9354: PPUSH
9355: PPUSH
9356: PPUSH
9357: PPUSH
// uc_side := 3 ;
9358: LD_ADDR_OWVAR 20
9362: PUSH
9363: LD_INT 3
9365: ST_TO_ADDR
// uc_nation := 3 ;
9366: LD_ADDR_OWVAR 21
9370: PUSH
9371: LD_INT 3
9373: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
9374: LD_ADDR_EXP 51
9378: PUSH
9379: LD_STRING Morozov
9381: PPUSH
9382: CALL_OW 25
9386: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
9387: LD_EXP 51
9391: PPUSH
9392: LD_INT 52
9394: PPUSH
9395: CALL_OW 52
// if not gaidarKilled then
9399: LD_EXP 7
9403: NOT
9404: IFFALSE 9437
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
9406: LD_ADDR_EXP 52
9410: PUSH
9411: LD_STRING Gaydar
9413: PPUSH
9414: LD_INT 0
9416: PPUSH
9417: LD_STRING 
9419: PPUSH
9420: CALL 27021 0 3
9424: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
9425: LD_EXP 52
9429: PPUSH
9430: LD_INT 52
9432: PPUSH
9433: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
9437: LD_INT 52
9439: PPUSH
9440: LD_STRING lenin
9442: PPUSH
9443: CALL_OW 500
// ruOutsiders := [ ] ;
9447: LD_ADDR_EXP 54
9451: PUSH
9452: EMPTY
9453: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
9454: LD_ADDR_EXP 56
9458: PUSH
9459: EMPTY
9460: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
9461: LD_ADDR_EXP 57
9465: PUSH
9466: EMPTY
9467: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
9468: LD_ADDR_EXP 58
9472: PUSH
9473: EMPTY
9474: ST_TO_ADDR
// ruAttackers := [ ] ;
9475: LD_ADDR_EXP 59
9479: PUSH
9480: EMPTY
9481: ST_TO_ADDR
// waveStrength := 0 ;
9482: LD_ADDR_EXP 60
9486: PUSH
9487: LD_INT 0
9489: ST_TO_ADDR
// if not gaidarKilled then
9490: LD_EXP 7
9494: NOT
9495: IFFALSE 9505
// waveStrength := 2 ;
9497: LD_ADDR_EXP 60
9501: PUSH
9502: LD_INT 2
9504: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
9505: LD_ADDR_VAR 0 7
9509: PUSH
9510: LD_INT 22
9512: PUSH
9513: LD_INT 3
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 3
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 69
9538: ST_TO_ADDR
// for i in tmp do
9539: LD_ADDR_VAR 0 2
9543: PUSH
9544: LD_VAR 0 7
9548: PUSH
9549: FOR_IN
9550: IFFALSE 9587
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9552: LD_VAR 0 2
9556: PPUSH
9557: LD_INT 5
9559: PUSH
9560: LD_INT 6
9562: PUSH
9563: LD_INT 7
9565: PUSH
9566: LD_INT 8
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: PUSH
9575: LD_OWVAR 67
9579: ARRAY
9580: PPUSH
9581: CALL_OW 241
9585: GO 9549
9587: POP
9588: POP
// for i := 1 to 3 do
9589: LD_ADDR_VAR 0 2
9593: PUSH
9594: DOUBLE
9595: LD_INT 1
9597: DEC
9598: ST_TO_ADDR
9599: LD_INT 3
9601: PUSH
9602: FOR_TO
9603: IFFALSE 9641
// begin PrepareHuman ( false , 1 , 0 ) ;
9605: LD_INT 0
9607: PPUSH
9608: LD_INT 1
9610: PPUSH
9611: LD_INT 0
9613: PPUSH
9614: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
9618: CALL_OW 44
9622: PPUSH
9623: LD_INT 75
9625: PPUSH
9626: LD_INT 49
9628: PPUSH
9629: LD_INT 3
9631: PPUSH
9632: LD_INT 0
9634: PPUSH
9635: CALL_OW 50
// end ;
9639: GO 9602
9641: POP
9642: POP
// for i := 1 to 4 do
9643: LD_ADDR_VAR 0 2
9647: PUSH
9648: DOUBLE
9649: LD_INT 1
9651: DEC
9652: ST_TO_ADDR
9653: LD_INT 4
9655: PUSH
9656: FOR_TO
9657: IFFALSE 9703
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
9659: LD_INT 0
9661: PPUSH
9662: LD_INT 1
9664: PPUSH
9665: LD_INT 2
9667: PPUSH
9668: CALL_OW 12
9672: PPUSH
9673: LD_INT 0
9675: PPUSH
9676: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
9680: CALL_OW 44
9684: PPUSH
9685: LD_INT 330
9687: PPUSH
9688: LD_INT 231
9690: PPUSH
9691: LD_INT 5
9693: PPUSH
9694: LD_INT 0
9696: PPUSH
9697: CALL_OW 50
// end ;
9701: GO 9656
9703: POP
9704: POP
// hc_class := 1 ;
9705: LD_ADDR_OWVAR 28
9709: PUSH
9710: LD_INT 1
9712: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
9713: CALL_OW 44
9717: PPUSH
9718: LD_INT 324
9720: PPUSH
9721: LD_INT 219
9723: PPUSH
9724: CALL_OW 428
9728: PPUSH
9729: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
9733: CALL_OW 44
9737: PPUSH
9738: LD_INT 316
9740: PPUSH
9741: LD_INT 223
9743: PPUSH
9744: CALL_OW 428
9748: PPUSH
9749: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
9753: LD_ADDR_VAR 0 7
9757: PUSH
9758: LD_INT 172
9760: PPUSH
9761: LD_INT 198
9763: PPUSH
9764: CALL_OW 428
9768: PPUSH
9769: CALL_OW 274
9773: PUSH
9774: LD_INT 189
9776: PPUSH
9777: LD_INT 156
9779: PPUSH
9780: CALL_OW 428
9784: PPUSH
9785: CALL_OW 274
9789: PUSH
9790: LD_INT 341
9792: PPUSH
9793: LD_INT 232
9795: PPUSH
9796: CALL_OW 428
9800: PPUSH
9801: CALL_OW 274
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: ST_TO_ADDR
// for i in tmp do
9811: LD_ADDR_VAR 0 2
9815: PUSH
9816: LD_VAR 0 7
9820: PUSH
9821: FOR_IN
9822: IFFALSE 9856
// begin SetResourceType ( i , mat_cans , 200 ) ;
9824: LD_VAR 0 2
9828: PPUSH
9829: LD_INT 1
9831: PPUSH
9832: LD_INT 200
9834: PPUSH
9835: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
9839: LD_VAR 0 2
9843: PPUSH
9844: LD_INT 2
9846: PPUSH
9847: LD_INT 200
9849: PPUSH
9850: CALL_OW 277
// end ;
9854: GO 9821
9856: POP
9857: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
9858: LD_ADDR_VAR 0 7
9862: PUSH
9863: LD_INT 177
9865: PUSH
9866: LD_INT 114
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 138
9875: PUSH
9876: LD_INT 96
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: ST_TO_ADDR
// for i := 1 to tmp do
9887: LD_ADDR_VAR 0 2
9891: PUSH
9892: DOUBLE
9893: LD_INT 1
9895: DEC
9896: ST_TO_ADDR
9897: LD_VAR 0 7
9901: PUSH
9902: FOR_TO
9903: IFFALSE 9986
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
9905: LD_INT 0
9907: PPUSH
9908: LD_INT 9
9910: PPUSH
9911: LD_INT 6
9913: PPUSH
9914: CALL_OW 380
// un := CreateHuman ;
9918: LD_ADDR_VAR 0 5
9922: PUSH
9923: CALL_OW 44
9927: ST_TO_ADDR
// SetDir ( un , 2 ) ;
9928: LD_VAR 0 5
9932: PPUSH
9933: LD_INT 2
9935: PPUSH
9936: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9940: LD_VAR 0 5
9944: PPUSH
9945: LD_VAR 0 7
9949: PUSH
9950: LD_VAR 0 2
9954: ARRAY
9955: PUSH
9956: LD_INT 1
9958: ARRAY
9959: PPUSH
9960: LD_VAR 0 7
9964: PUSH
9965: LD_VAR 0 2
9969: ARRAY
9970: PUSH
9971: LD_INT 2
9973: ARRAY
9974: PPUSH
9975: CALL_OW 428
9979: PPUSH
9980: CALL_OW 52
// end ;
9984: GO 9902
9986: POP
9987: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
9988: LD_ADDR_VAR 0 7
9992: PUSH
9993: LD_INT 198
9995: PUSH
9996: LD_INT 158
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: LD_INT 203
10005: PUSH
10006: LD_INT 166
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: LD_INT 181
10015: PUSH
10016: LD_INT 209
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 178
10025: PUSH
10026: LD_INT 196
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 181
10035: PUSH
10036: LD_INT 212
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: ST_TO_ADDR
// for i := 1 to tmp do
10050: LD_ADDR_VAR 0 2
10054: PUSH
10055: DOUBLE
10056: LD_INT 1
10058: DEC
10059: ST_TO_ADDR
10060: LD_VAR 0 7
10064: PUSH
10065: FOR_TO
10066: IFFALSE 10187
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
10068: LD_INT 0
10070: PPUSH
10071: LD_INT 1
10073: PPUSH
10074: LD_INT 4
10076: PUSH
10077: LD_INT 5
10079: PUSH
10080: LD_INT 6
10082: PUSH
10083: LD_INT 7
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: PUSH
10092: LD_OWVAR 67
10096: ARRAY
10097: PPUSH
10098: CALL_OW 380
// un := CreateHuman ;
10102: LD_ADDR_VAR 0 5
10106: PUSH
10107: CALL_OW 44
10111: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10112: LD_ADDR_VAR 0 4
10116: PUSH
10117: LD_VAR 0 7
10121: PUSH
10122: LD_VAR 0 2
10126: ARRAY
10127: PUSH
10128: LD_INT 1
10130: ARRAY
10131: PPUSH
10132: LD_VAR 0 7
10136: PUSH
10137: LD_VAR 0 2
10141: ARRAY
10142: PUSH
10143: LD_INT 2
10145: ARRAY
10146: PPUSH
10147: CALL_OW 428
10151: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
10152: LD_VAR 0 5
10156: PPUSH
10157: LD_VAR 0 4
10161: PPUSH
10162: CALL 59737 0 1
10166: PPUSH
10167: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
10171: LD_VAR 0 5
10175: PPUSH
10176: LD_VAR 0 4
10180: PPUSH
10181: CALL_OW 52
// end ;
10185: GO 10065
10187: POP
10188: POP
// for i := 1 to 3 do
10189: LD_ADDR_VAR 0 2
10193: PUSH
10194: DOUBLE
10195: LD_INT 1
10197: DEC
10198: ST_TO_ADDR
10199: LD_INT 3
10201: PUSH
10202: FOR_TO
10203: IFFALSE 10258
// begin InitHc ;
10205: CALL_OW 19
// uc_nation := 0 ;
10209: LD_ADDR_OWVAR 21
10213: PUSH
10214: LD_INT 0
10216: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
10217: LD_ADDR_OWVAR 28
10221: PUSH
10222: LD_INT 16
10224: ST_TO_ADDR
// un := CreateHuman ;
10225: LD_ADDR_VAR 0 5
10229: PUSH
10230: CALL_OW 44
10234: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
10235: LD_VAR 0 5
10239: PPUSH
10240: LD_INT 194
10242: PPUSH
10243: LD_INT 164
10245: PPUSH
10246: LD_INT 6
10248: PPUSH
10249: LD_INT 0
10251: PPUSH
10252: CALL_OW 50
// end ;
10256: GO 10202
10258: POP
10259: POP
// uc_nation := 3 ;
10260: LD_ADDR_OWVAR 21
10264: PUSH
10265: LD_INT 3
10267: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
10268: LD_INT 24
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: LD_INT 1
10276: PPUSH
10277: LD_INT 44
10279: PPUSH
10280: LD_INT 10
10282: PPUSH
10283: CALL 32036 0 5
// un := CreateVehicle ;
10287: LD_ADDR_VAR 0 5
10291: PUSH
10292: CALL_OW 45
10296: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
10297: LD_VAR 0 5
10301: PPUSH
10302: LD_INT 199
10304: PPUSH
10305: LD_INT 162
10307: PPUSH
10308: LD_INT 1
10310: PPUSH
10311: LD_INT 0
10313: PPUSH
10314: CALL 66610 0 5
// ComHold ( un ) ;
10318: LD_VAR 0 5
10322: PPUSH
10323: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
10327: LD_INT 0
10329: PPUSH
10330: LD_INT 3
10332: PPUSH
10333: LD_INT 4
10335: PPUSH
10336: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
10340: CALL_OW 44
10344: PPUSH
10345: LD_VAR 0 5
10349: PPUSH
10350: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
10354: LD_INT 24
10356: PPUSH
10357: LD_INT 1
10359: PPUSH
10360: LD_INT 1
10362: PPUSH
10363: LD_INT 45
10365: PPUSH
10366: LD_INT 10
10368: PPUSH
10369: CALL 32036 0 5
// un := CreateVehicle ;
10373: LD_ADDR_VAR 0 5
10377: PUSH
10378: CALL_OW 45
10382: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
10383: LD_VAR 0 5
10387: PPUSH
10388: LD_INT 129
10390: PPUSH
10391: LD_INT 93
10393: PPUSH
10394: LD_INT 1
10396: PPUSH
10397: LD_INT 0
10399: PPUSH
10400: CALL 66610 0 5
// ComHold ( un ) ;
10404: LD_VAR 0 5
10408: PPUSH
10409: CALL_OW 140
// if Difficulty > 1 then
10413: LD_OWVAR 67
10417: PUSH
10418: LD_INT 1
10420: GREATER
10421: IFFALSE 10595
// begin PrepareHuman ( false , 3 , 4 ) ;
10423: LD_INT 0
10425: PPUSH
10426: LD_INT 3
10428: PPUSH
10429: LD_INT 4
10431: PPUSH
10432: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
10436: CALL_OW 44
10440: PPUSH
10441: LD_VAR 0 5
10445: PPUSH
10446: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
10450: LD_INT 24
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: LD_INT 1
10458: PPUSH
10459: LD_INT 45
10461: PPUSH
10462: LD_INT 10
10464: PPUSH
10465: CALL 32036 0 5
// un := CreateVehicle ;
10469: LD_ADDR_VAR 0 5
10473: PUSH
10474: CALL_OW 45
10478: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 92 , 2 , false ) ;
10479: LD_VAR 0 5
10483: PPUSH
10484: LD_INT 134
10486: PPUSH
10487: LD_INT 92
10489: PPUSH
10490: LD_INT 2
10492: PPUSH
10493: LD_INT 0
10495: PPUSH
10496: CALL 66610 0 5
// ComHold ( un ) ;
10500: LD_VAR 0 5
10504: PPUSH
10505: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
10509: LD_INT 0
10511: PPUSH
10512: LD_INT 3
10514: PPUSH
10515: LD_INT 4
10517: PPUSH
10518: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
10522: CALL_OW 44
10526: PPUSH
10527: LD_VAR 0 5
10531: PPUSH
10532: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
10536: LD_INT 24
10538: PPUSH
10539: LD_INT 1
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: LD_INT 45
10547: PPUSH
10548: LD_INT 10
10550: PPUSH
10551: CALL 32036 0 5
// un := CreateVehicle ;
10555: LD_ADDR_VAR 0 5
10559: PUSH
10560: CALL_OW 45
10564: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
10565: LD_VAR 0 5
10569: PPUSH
10570: LD_INT 200
10572: PPUSH
10573: LD_INT 173
10575: PPUSH
10576: LD_INT 1
10578: PPUSH
10579: LD_INT 0
10581: PPUSH
10582: CALL 66610 0 5
// ComHold ( un ) ;
10586: LD_VAR 0 5
10590: PPUSH
10591: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
10595: LD_INT 0
10597: PPUSH
10598: LD_INT 3
10600: PPUSH
10601: LD_INT 4
10603: PPUSH
10604: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
10608: CALL_OW 44
10612: PPUSH
10613: LD_VAR 0 5
10617: PPUSH
10618: CALL_OW 52
// bc_type := b_armoury ;
10622: LD_ADDR_OWVAR 42
10626: PUSH
10627: LD_INT 4
10629: ST_TO_ADDR
// if Difficulty > 1 then
10630: LD_OWVAR 67
10634: PUSH
10635: LD_INT 1
10637: GREATER
10638: IFFALSE 10648
// bc_type := b_barracks ;
10640: LD_ADDR_OWVAR 42
10644: PUSH
10645: LD_INT 5
10647: ST_TO_ADDR
// bc_level := 6 ;
10648: LD_ADDR_OWVAR 43
10652: PUSH
10653: LD_INT 6
10655: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
10656: LD_INT 120
10658: PPUSH
10659: LD_INT 100
10661: PPUSH
10662: LD_INT 5
10664: PPUSH
10665: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
10669: LD_ADDR_VAR 0 2
10673: PUSH
10674: DOUBLE
10675: LD_INT 1
10677: DEC
10678: ST_TO_ADDR
10679: LD_INT 3
10681: PUSH
10682: LD_INT 3
10684: PUSH
10685: LD_INT 4
10687: PUSH
10688: LD_INT 4
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: PUSH
10697: LD_OWVAR 67
10701: ARRAY
10702: PUSH
10703: FOR_TO
10704: IFFALSE 10762
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
10706: LD_INT 0
10708: PPUSH
10709: LD_INT 1
10711: PUSH
10712: LD_INT 1
10714: PUSH
10715: LD_INT 9
10717: PUSH
10718: LD_INT 9
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: PUSH
10727: LD_OWVAR 67
10731: ARRAY
10732: PPUSH
10733: LD_INT 5
10735: PPUSH
10736: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
10740: CALL_OW 44
10744: PPUSH
10745: LD_INT 120
10747: PPUSH
10748: LD_INT 100
10750: PPUSH
10751: CALL_OW 428
10755: PPUSH
10756: CALL_OW 52
// end ;
10760: GO 10703
10762: POP
10763: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
10764: LD_ADDR_VAR 0 7
10768: PUSH
10769: LD_INT 135
10771: PUSH
10772: LD_INT 100
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 137
10781: PUSH
10782: LD_INT 92
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: ST_TO_ADDR
// for i := 1 to tmp do
10793: LD_ADDR_VAR 0 2
10797: PUSH
10798: DOUBLE
10799: LD_INT 1
10801: DEC
10802: ST_TO_ADDR
10803: LD_VAR 0 7
10807: PUSH
10808: FOR_TO
10809: IFFALSE 10979
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
10811: LD_INT 22
10813: PUSH
10814: LD_INT 22
10816: PUSH
10817: LD_INT 24
10819: PUSH
10820: LD_INT 24
10822: PUSH
10823: LD_INT 24
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: PUSH
10833: LD_OWVAR 67
10837: PUSH
10838: LD_INT 0
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL_OW 12
10848: PLUS
10849: ARRAY
10850: PPUSH
10851: LD_INT 1
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: LD_INT 44
10859: PPUSH
10860: LD_INT 25
10862: PPUSH
10863: CALL 32036 0 5
// veh := CreateVehicle ;
10867: LD_ADDR_VAR 0 6
10871: PUSH
10872: CALL_OW 45
10876: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10877: LD_VAR 0 6
10881: PPUSH
10882: LD_INT 2
10884: PPUSH
10885: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
10889: LD_VAR 0 6
10893: PPUSH
10894: LD_VAR 0 7
10898: PUSH
10899: LD_VAR 0 2
10903: ARRAY
10904: PUSH
10905: LD_INT 1
10907: ARRAY
10908: PPUSH
10909: LD_VAR 0 7
10913: PUSH
10914: LD_VAR 0 2
10918: ARRAY
10919: PUSH
10920: LD_INT 2
10922: ARRAY
10923: PPUSH
10924: LD_INT 0
10926: PPUSH
10927: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
10931: LD_INT 0
10933: PPUSH
10934: LD_INT 3
10936: PPUSH
10937: LD_INT 6
10939: PPUSH
10940: CALL_OW 380
// un := CreateHuman ;
10944: LD_ADDR_VAR 0 5
10948: PUSH
10949: CALL_OW 44
10953: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10954: LD_VAR 0 5
10958: PPUSH
10959: LD_VAR 0 6
10963: PPUSH
10964: CALL_OW 52
// ComHold ( veh ) ;
10968: LD_VAR 0 6
10972: PPUSH
10973: CALL_OW 140
// end ;
10977: GO 10808
10979: POP
10980: POP
// tmp := [ 191 , 122 ] ;
10981: LD_ADDR_VAR 0 7
10985: PUSH
10986: LD_INT 191
10988: PUSH
10989: LD_INT 122
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
10996: LD_INT 24
10998: PPUSH
10999: LD_INT 1
11001: PPUSH
11002: LD_INT 1
11004: PPUSH
11005: LD_INT 44
11007: PPUSH
11008: LD_INT 30
11010: PPUSH
11011: CALL 32036 0 5
// ruBlockadeTank := CreateVehicle ;
11015: LD_ADDR_EXP 53
11019: PUSH
11020: CALL_OW 45
11024: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
11025: LD_EXP 53
11029: PPUSH
11030: LD_INT 2
11032: PPUSH
11033: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
11037: LD_EXP 53
11041: PPUSH
11042: LD_INT 191
11044: PPUSH
11045: LD_INT 122
11047: PPUSH
11048: LD_INT 0
11050: PPUSH
11051: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
11055: LD_INT 1
11057: PPUSH
11058: LD_INT 5
11060: PUSH
11061: LD_INT 6
11063: PUSH
11064: LD_INT 7
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: PUSH
11072: LD_OWVAR 67
11076: PUSH
11077: LD_INT 1
11079: MINUS
11080: ARRAY
11081: PPUSH
11082: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
11086: CALL_OW 44
11090: PPUSH
11091: LD_EXP 53
11095: PPUSH
11096: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
11100: LD_EXP 53
11104: PPUSH
11105: CALL_OW 140
// ruBlockadeSquad := [ ] ;
11109: LD_ADDR_EXP 55
11113: PUSH
11114: EMPTY
11115: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 , 6 ] [ Difficulty ] do
11116: LD_ADDR_VAR 0 2
11120: PUSH
11121: DOUBLE
11122: LD_INT 1
11124: DEC
11125: ST_TO_ADDR
11126: LD_INT 3
11128: PUSH
11129: LD_INT 4
11131: PUSH
11132: LD_INT 6
11134: PUSH
11135: LD_INT 6
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: PUSH
11144: LD_OWVAR 67
11148: ARRAY
11149: PUSH
11150: FOR_TO
11151: IFFALSE 11267
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11153: LD_INT 0
11155: PPUSH
11156: LD_INT 1
11158: PPUSH
11159: LD_INT 4
11161: PUSH
11162: LD_INT 5
11164: PUSH
11165: LD_INT 6
11167: PUSH
11168: LD_INT 7
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: PUSH
11177: LD_OWVAR 67
11181: ARRAY
11182: PPUSH
11183: CALL_OW 380
// un := CreateHuman ;
11187: LD_ADDR_VAR 0 5
11191: PUSH
11192: CALL_OW 44
11196: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
11197: LD_VAR 0 5
11201: PPUSH
11202: LD_INT 9
11204: PPUSH
11205: LD_INT 0
11207: PPUSH
11208: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
11212: LD_VAR 0 5
11216: PPUSH
11217: LD_INT 198
11219: PPUSH
11220: LD_INT 129
11222: PPUSH
11223: CALL_OW 118
// AddComCrawl ( un ) ;
11227: LD_VAR 0 5
11231: PPUSH
11232: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
11236: LD_ADDR_EXP 55
11240: PUSH
11241: LD_EXP 55
11245: PPUSH
11246: LD_EXP 55
11250: PUSH
11251: LD_INT 1
11253: PLUS
11254: PPUSH
11255: LD_VAR 0 5
11259: PPUSH
11260: CALL_OW 1
11264: ST_TO_ADDR
// end ;
11265: GO 11150
11267: POP
11268: POP
// PrepareHuman ( false , 4 , 5 ) ;
11269: LD_INT 0
11271: PPUSH
11272: LD_INT 4
11274: PPUSH
11275: LD_INT 5
11277: PPUSH
11278: CALL_OW 380
// un := CreateHuman ;
11282: LD_ADDR_VAR 0 5
11286: PUSH
11287: CALL_OW 44
11291: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
11292: LD_VAR 0 5
11296: PPUSH
11297: LD_INT 179
11299: PPUSH
11300: LD_INT 113
11302: PPUSH
11303: LD_INT 0
11305: PPUSH
11306: CALL_OW 48
// ComHold ( un ) ;
11310: LD_VAR 0 5
11314: PPUSH
11315: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
11319: LD_ADDR_EXP 55
11323: PUSH
11324: LD_EXP 55
11328: PPUSH
11329: LD_EXP 55
11333: PUSH
11334: LD_INT 1
11336: PLUS
11337: PPUSH
11338: LD_VAR 0 5
11342: PPUSH
11343: CALL_OW 1
11347: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
11348: LD_ADDR_VAR 0 7
11352: PUSH
11353: LD_INT 167
11355: PPUSH
11356: LD_INT 243
11358: PPUSH
11359: CALL_OW 428
11363: PPUSH
11364: CALL_OW 274
11368: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
11369: LD_VAR 0 7
11373: PPUSH
11374: LD_INT 1
11376: PPUSH
11377: LD_INT 1000
11379: PPUSH
11380: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
11384: LD_VAR 0 7
11388: PPUSH
11389: LD_INT 2
11391: PPUSH
11392: LD_INT 400
11394: PPUSH
11395: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
11399: LD_ADDR_VAR 0 7
11403: PUSH
11404: LD_INT 169
11406: PPUSH
11407: LD_INT 229
11409: PPUSH
11410: CALL_OW 428
11414: ST_TO_ADDR
// for i := 1 to 3 do
11415: LD_ADDR_VAR 0 2
11419: PUSH
11420: DOUBLE
11421: LD_INT 1
11423: DEC
11424: ST_TO_ADDR
11425: LD_INT 3
11427: PUSH
11428: FOR_TO
11429: IFFALSE 11520
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11431: LD_INT 0
11433: PPUSH
11434: LD_INT 1
11436: PPUSH
11437: LD_INT 4
11439: PUSH
11440: LD_INT 5
11442: PUSH
11443: LD_INT 5
11445: PUSH
11446: LD_INT 6
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: LD_OWVAR 67
11459: ARRAY
11460: PPUSH
11461: CALL_OW 380
// un := CreateHuman ;
11465: LD_ADDR_VAR 0 5
11469: PUSH
11470: CALL_OW 44
11474: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
11475: LD_VAR 0 5
11479: PPUSH
11480: LD_VAR 0 7
11484: PPUSH
11485: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
11489: LD_ADDR_EXP 56
11493: PUSH
11494: LD_EXP 56
11498: PPUSH
11499: LD_EXP 56
11503: PUSH
11504: LD_INT 1
11506: PLUS
11507: PPUSH
11508: LD_VAR 0 5
11512: PPUSH
11513: CALL_OW 1
11517: ST_TO_ADDR
// end ;
11518: GO 11428
11520: POP
11521: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
11522: LD_ADDR_VAR 0 7
11526: PUSH
11527: LD_INT 165
11529: PUSH
11530: LD_INT 227
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 173
11539: PUSH
11540: LD_INT 231
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: ST_TO_ADDR
// for i := 1 to tmp do
11551: LD_ADDR_VAR 0 2
11555: PUSH
11556: DOUBLE
11557: LD_INT 1
11559: DEC
11560: ST_TO_ADDR
11561: LD_VAR 0 7
11565: PUSH
11566: FOR_TO
11567: IFFALSE 11688
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11569: LD_INT 0
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: LD_INT 4
11577: PUSH
11578: LD_INT 5
11580: PUSH
11581: LD_INT 5
11583: PUSH
11584: LD_INT 6
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: PUSH
11593: LD_OWVAR 67
11597: ARRAY
11598: PPUSH
11599: CALL_OW 380
// un := CreateHuman ;
11603: LD_ADDR_VAR 0 5
11607: PUSH
11608: CALL_OW 44
11612: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11613: LD_VAR 0 5
11617: PPUSH
11618: LD_VAR 0 7
11622: PUSH
11623: LD_VAR 0 2
11627: ARRAY
11628: PUSH
11629: LD_INT 1
11631: ARRAY
11632: PPUSH
11633: LD_VAR 0 7
11637: PUSH
11638: LD_VAR 0 2
11642: ARRAY
11643: PUSH
11644: LD_INT 2
11646: ARRAY
11647: PPUSH
11648: CALL_OW 428
11652: PPUSH
11653: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
11657: LD_ADDR_EXP 56
11661: PUSH
11662: LD_EXP 56
11666: PPUSH
11667: LD_EXP 56
11671: PUSH
11672: LD_INT 1
11674: PLUS
11675: PPUSH
11676: LD_VAR 0 5
11680: PPUSH
11681: CALL_OW 1
11685: ST_TO_ADDR
// end ;
11686: GO 11566
11688: POP
11689: POP
// for i := 1 to 2 do
11690: LD_ADDR_VAR 0 2
11694: PUSH
11695: DOUBLE
11696: LD_INT 1
11698: DEC
11699: ST_TO_ADDR
11700: LD_INT 2
11702: PUSH
11703: FOR_TO
11704: IFFALSE 11759
// begin InitHc ;
11706: CALL_OW 19
// uc_nation := 0 ;
11710: LD_ADDR_OWVAR 21
11714: PUSH
11715: LD_INT 0
11717: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11718: LD_ADDR_OWVAR 28
11722: PUSH
11723: LD_INT 16
11725: ST_TO_ADDR
// un := CreateHuman ;
11726: LD_ADDR_VAR 0 5
11730: PUSH
11731: CALL_OW 44
11735: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
11736: LD_VAR 0 5
11740: PPUSH
11741: LD_INT 166
11743: PPUSH
11744: LD_INT 233
11746: PPUSH
11747: LD_INT 2
11749: PPUSH
11750: LD_INT 0
11752: PPUSH
11753: CALL_OW 50
// end ;
11757: GO 11703
11759: POP
11760: POP
// uc_nation := 3 ;
11761: LD_ADDR_OWVAR 21
11765: PUSH
11766: LD_INT 3
11768: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
11769: LD_ADDR_VAR 0 7
11773: PUSH
11774: LD_INT 71
11776: PUSH
11777: LD_INT 52
11779: PUSH
11780: LD_INT 11
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: LIST
11787: ST_TO_ADDR
// for i in tmp do
11788: LD_ADDR_VAR 0 2
11792: PUSH
11793: LD_VAR 0 7
11797: PUSH
11798: FOR_IN
11799: IFFALSE 11843
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
11801: LD_VAR 0 2
11805: PPUSH
11806: CALL_OW 274
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: LD_INT 3000
11816: PPUSH
11817: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
11821: LD_VAR 0 2
11825: PPUSH
11826: CALL_OW 274
11830: PPUSH
11831: LD_INT 2
11833: PPUSH
11834: LD_INT 600
11836: PPUSH
11837: CALL_OW 277
// end ;
11841: GO 11798
11843: POP
11844: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
11845: LD_ADDR_VAR 0 7
11849: PUSH
11850: LD_INT 41
11852: PUSH
11853: LD_INT 57
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 38
11862: PUSH
11863: LD_INT 55
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: LD_INT 50
11872: PUSH
11873: LD_INT 73
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 51
11882: PUSH
11883: LD_INT 65
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 82
11892: PUSH
11893: LD_INT 93
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 87
11902: PUSH
11903: LD_INT 100
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 91
11912: PUSH
11913: LD_INT 109
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 84
11922: PUSH
11923: LD_INT 120
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 113
11932: PUSH
11933: LD_INT 153
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 123
11942: PUSH
11943: LD_INT 171
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 125
11952: PUSH
11953: LD_INT 178
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 125
11962: PUSH
11963: LD_INT 188
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 125
11972: PUSH
11973: LD_INT 201
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 33
11982: PUSH
11983: LD_INT 60
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 76
11992: PUSH
11993: LD_INT 95
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 84
12002: PUSH
12003: LD_INT 111
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 112
12012: PUSH
12013: LD_INT 165
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: ST_TO_ADDR
// for i := 1 to tmp do
12039: LD_ADDR_VAR 0 2
12043: PUSH
12044: DOUBLE
12045: LD_INT 1
12047: DEC
12048: ST_TO_ADDR
12049: LD_VAR 0 7
12053: PUSH
12054: FOR_TO
12055: IFFALSE 12302
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
12057: LD_ADDR_VAR 0 4
12061: PUSH
12062: LD_VAR 0 7
12066: PUSH
12067: LD_VAR 0 2
12071: ARRAY
12072: PUSH
12073: LD_INT 1
12075: ARRAY
12076: PPUSH
12077: LD_VAR 0 7
12081: PUSH
12082: LD_VAR 0 2
12086: ARRAY
12087: PUSH
12088: LD_INT 2
12090: ARRAY
12091: PPUSH
12092: CALL_OW 428
12096: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
12097: LD_VAR 0 4
12101: PPUSH
12102: CALL_OW 266
12106: PUSH
12107: LD_INT 4
12109: PUSH
12110: LD_INT 5
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: IN
12117: IFFALSE 12201
// begin for j := 1 to Difficulty do
12119: LD_ADDR_VAR 0 3
12123: PUSH
12124: DOUBLE
12125: LD_INT 1
12127: DEC
12128: ST_TO_ADDR
12129: LD_OWVAR 67
12133: PUSH
12134: FOR_TO
12135: IFFALSE 12197
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12137: LD_INT 0
12139: PPUSH
12140: LD_INT 1
12142: PPUSH
12143: LD_INT 4
12145: PUSH
12146: LD_INT 5
12148: PUSH
12149: LD_INT 5
12151: PUSH
12152: LD_INT 6
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: PUSH
12161: LD_OWVAR 67
12165: ARRAY
12166: PPUSH
12167: CALL_OW 380
// un := CreateHuman ;
12171: LD_ADDR_VAR 0 5
12175: PUSH
12176: CALL_OW 44
12180: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
12181: LD_VAR 0 5
12185: PPUSH
12186: LD_VAR 0 4
12190: PPUSH
12191: CALL_OW 52
// end ;
12195: GO 12134
12197: POP
12198: POP
// end else
12199: GO 12271
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12201: LD_INT 0
12203: PPUSH
12204: LD_INT 1
12206: PPUSH
12207: LD_INT 4
12209: PUSH
12210: LD_INT 5
12212: PUSH
12213: LD_INT 5
12215: PUSH
12216: LD_INT 6
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: LD_OWVAR 67
12229: ARRAY
12230: PPUSH
12231: CALL_OW 380
// un := CreateHuman ;
12235: LD_ADDR_VAR 0 5
12239: PUSH
12240: CALL_OW 44
12244: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
12245: LD_VAR 0 5
12249: PPUSH
12250: LD_VAR 0 4
12254: PPUSH
12255: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
12259: LD_VAR 0 5
12263: PPUSH
12264: LD_INT 9
12266: PPUSH
12267: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12271: LD_ADDR_EXP 57
12275: PUSH
12276: LD_EXP 57
12280: PPUSH
12281: LD_EXP 57
12285: PUSH
12286: LD_INT 1
12288: PLUS
12289: PPUSH
12290: LD_VAR 0 5
12294: PPUSH
12295: CALL_OW 1
12299: ST_TO_ADDR
// end ;
12300: GO 12054
12302: POP
12303: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
12304: LD_ADDR_VAR 0 4
12308: PUSH
12309: LD_INT 10
12311: PPUSH
12312: LD_INT 22
12314: PUSH
12315: LD_INT 3
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 30
12324: PUSH
12325: LD_INT 32
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 58
12334: PUSH
12335: EMPTY
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: LIST
12342: PPUSH
12343: CALL_OW 70
12347: PUSH
12348: FOR_IN
12349: IFFALSE 12483
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
12351: LD_INT 40
12353: PUSH
12354: LD_INT 50
12356: PUSH
12357: LD_INT 75
12359: PUSH
12360: LD_INT 80
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: PUSH
12369: LD_OWVAR 67
12373: ARRAY
12374: PUSH
12375: LD_EXP 7
12379: PUSH
12380: LD_INT 10
12382: MUL
12383: MINUS
12384: PPUSH
12385: CALL_OW 13
12389: NOT
12390: IFFALSE 12394
// continue ;
12392: GO 12348
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12394: LD_INT 0
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: LD_INT 4
12402: PUSH
12403: LD_INT 5
12405: PUSH
12406: LD_INT 5
12408: PUSH
12409: LD_INT 6
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: PUSH
12418: LD_OWVAR 67
12422: ARRAY
12423: PPUSH
12424: CALL_OW 380
// un := CreateHuman ;
12428: LD_ADDR_VAR 0 5
12432: PUSH
12433: CALL_OW 44
12437: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
12438: LD_VAR 0 5
12442: PPUSH
12443: LD_VAR 0 4
12447: PPUSH
12448: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12452: LD_ADDR_EXP 57
12456: PUSH
12457: LD_EXP 57
12461: PPUSH
12462: LD_EXP 57
12466: PUSH
12467: LD_INT 1
12469: PLUS
12470: PPUSH
12471: LD_VAR 0 5
12475: PPUSH
12476: CALL_OW 1
12480: ST_TO_ADDR
// end ;
12481: GO 12348
12483: POP
12484: POP
// for i := 1 to 5 do
12485: LD_ADDR_VAR 0 2
12489: PUSH
12490: DOUBLE
12491: LD_INT 1
12493: DEC
12494: ST_TO_ADDR
12495: LD_INT 5
12497: PUSH
12498: FOR_TO
12499: IFFALSE 12597
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12501: LD_INT 0
12503: PPUSH
12504: LD_INT 2
12506: PPUSH
12507: LD_INT 4
12509: PUSH
12510: LD_INT 5
12512: PUSH
12513: LD_INT 5
12515: PUSH
12516: LD_INT 6
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: PUSH
12525: LD_OWVAR 67
12529: ARRAY
12530: PPUSH
12531: CALL_OW 380
// un := CreateHuman ;
12535: LD_ADDR_VAR 0 5
12539: PUSH
12540: CALL_OW 44
12544: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
12545: LD_VAR 0 5
12549: PPUSH
12550: LD_INT 66
12552: PPUSH
12553: LD_INT 101
12555: PPUSH
12556: LD_INT 3
12558: PPUSH
12559: LD_INT 0
12561: PPUSH
12562: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12566: LD_ADDR_EXP 57
12570: PUSH
12571: LD_EXP 57
12575: PPUSH
12576: LD_EXP 57
12580: PUSH
12581: LD_INT 1
12583: PLUS
12584: PPUSH
12585: LD_VAR 0 5
12589: PPUSH
12590: CALL_OW 1
12594: ST_TO_ADDR
// end ;
12595: GO 12498
12597: POP
12598: POP
// tmp := [ ruFac1 , ruFac2 ] ;
12599: LD_ADDR_VAR 0 7
12603: PUSH
12604: LD_INT 72
12606: PUSH
12607: LD_INT 12
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: ST_TO_ADDR
// for i := 1 to tmp do
12614: LD_ADDR_VAR 0 2
12618: PUSH
12619: DOUBLE
12620: LD_INT 1
12622: DEC
12623: ST_TO_ADDR
12624: LD_VAR 0 7
12628: PUSH
12629: FOR_TO
12630: IFFALSE 12747
// for j := 1 to 6 do
12632: LD_ADDR_VAR 0 3
12636: PUSH
12637: DOUBLE
12638: LD_INT 1
12640: DEC
12641: ST_TO_ADDR
12642: LD_INT 6
12644: PUSH
12645: FOR_TO
12646: IFFALSE 12743
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12648: LD_INT 0
12650: PPUSH
12651: LD_INT 3
12653: PPUSH
12654: LD_INT 4
12656: PUSH
12657: LD_INT 5
12659: PUSH
12660: LD_INT 5
12662: PUSH
12663: LD_INT 6
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: PUSH
12672: LD_OWVAR 67
12676: ARRAY
12677: PPUSH
12678: CALL_OW 380
// un := CreateHuman ;
12682: LD_ADDR_VAR 0 5
12686: PUSH
12687: CALL_OW 44
12691: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
12692: LD_VAR 0 5
12696: PPUSH
12697: LD_VAR 0 7
12701: PUSH
12702: LD_VAR 0 2
12706: ARRAY
12707: PPUSH
12708: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12712: LD_ADDR_EXP 57
12716: PUSH
12717: LD_EXP 57
12721: PPUSH
12722: LD_EXP 57
12726: PUSH
12727: LD_INT 1
12729: PLUS
12730: PPUSH
12731: LD_VAR 0 5
12735: PPUSH
12736: CALL_OW 1
12740: ST_TO_ADDR
// end ;
12741: GO 12645
12743: POP
12744: POP
12745: GO 12629
12747: POP
12748: POP
// for i := 1 to 3 do
12749: LD_ADDR_VAR 0 2
12753: PUSH
12754: DOUBLE
12755: LD_INT 1
12757: DEC
12758: ST_TO_ADDR
12759: LD_INT 3
12761: PUSH
12762: FOR_TO
12763: IFFALSE 12852
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12765: LD_INT 0
12767: PPUSH
12768: LD_INT 4
12770: PPUSH
12771: LD_INT 4
12773: PUSH
12774: LD_INT 5
12776: PUSH
12777: LD_INT 5
12779: PUSH
12780: LD_INT 6
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: PUSH
12789: LD_OWVAR 67
12793: ARRAY
12794: PPUSH
12795: CALL_OW 380
// un := CreateHuman ;
12799: LD_ADDR_VAR 0 5
12803: PUSH
12804: CALL_OW 44
12808: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
12809: LD_VAR 0 5
12813: PPUSH
12814: LD_INT 17
12816: PPUSH
12817: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12821: LD_ADDR_EXP 57
12825: PUSH
12826: LD_EXP 57
12830: PPUSH
12831: LD_EXP 57
12835: PUSH
12836: LD_INT 1
12838: PLUS
12839: PPUSH
12840: LD_VAR 0 5
12844: PPUSH
12845: CALL_OW 1
12849: ST_TO_ADDR
// end ;
12850: GO 12762
12852: POP
12853: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
12854: LD_ADDR_VAR 0 2
12858: PUSH
12859: DOUBLE
12860: LD_INT 1
12862: DEC
12863: ST_TO_ADDR
12864: LD_INT 2
12866: PUSH
12867: LD_INT 3
12869: PUSH
12870: LD_INT 3
12872: PUSH
12873: LD_INT 3
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: PUSH
12882: LD_OWVAR 67
12886: ARRAY
12887: PUSH
12888: FOR_TO
12889: IFFALSE 13009
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
12891: LD_INT 22
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: LD_INT 1
12899: PPUSH
12900: LD_INT 52
12902: PPUSH
12903: LD_INT 100
12905: PPUSH
12906: CALL 32036 0 5
// veh := CreateVehicle ;
12910: LD_ADDR_VAR 0 6
12914: PUSH
12915: CALL_OW 45
12919: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
12920: LD_INT 0
12922: PPUSH
12923: LD_INT 3
12925: PPUSH
12926: LD_INT 4
12928: PPUSH
12929: CALL_OW 380
// un := CreateHuman ;
12933: LD_ADDR_VAR 0 5
12937: PUSH
12938: CALL_OW 44
12942: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
12943: LD_VAR 0 6
12947: PPUSH
12948: LD_INT 107
12950: PPUSH
12951: LD_INT 182
12953: PPUSH
12954: LD_INT 4
12956: PPUSH
12957: LD_INT 0
12959: PPUSH
12960: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
12964: LD_VAR 0 5
12968: PPUSH
12969: LD_VAR 0 6
12973: PPUSH
12974: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12978: LD_ADDR_EXP 57
12982: PUSH
12983: LD_EXP 57
12987: PPUSH
12988: LD_EXP 57
12992: PUSH
12993: LD_INT 1
12995: PLUS
12996: PPUSH
12997: LD_VAR 0 5
13001: PPUSH
13002: CALL_OW 1
13006: ST_TO_ADDR
// end ;
13007: GO 12888
13009: POP
13010: POP
// InitHc ;
13011: CALL_OW 19
// for i := 1 to [ 4 , 6 , 8 , 12 ] [ Difficulty ] do
13015: LD_ADDR_VAR 0 2
13019: PUSH
13020: DOUBLE
13021: LD_INT 1
13023: DEC
13024: ST_TO_ADDR
13025: LD_INT 4
13027: PUSH
13028: LD_INT 6
13030: PUSH
13031: LD_INT 8
13033: PUSH
13034: LD_INT 12
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_OWVAR 67
13047: ARRAY
13048: PUSH
13049: FOR_TO
13050: IFFALSE 13145
// begin uc_nation := 0 ;
13052: LD_ADDR_OWVAR 21
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
13060: LD_ADDR_OWVAR 28
13064: PUSH
13065: LD_INT 15
13067: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
13068: LD_ADDR_OWVAR 31
13072: PUSH
13073: LD_INT 3
13075: PUSH
13076: LD_INT 0
13078: PUSH
13079: LD_INT 0
13081: PUSH
13082: LD_INT 0
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: ST_TO_ADDR
// un := CreateHuman ;
13091: LD_ADDR_VAR 0 5
13095: PUSH
13096: CALL_OW 44
13100: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
13101: LD_VAR 0 5
13105: PPUSH
13106: LD_INT 269
13108: PUSH
13109: LD_INT 300
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_VAR 0 2
13120: PUSH
13121: LD_INT 2
13123: MOD
13124: PUSH
13125: LD_INT 1
13127: PLUS
13128: ARRAY
13129: PPUSH
13130: LD_INT 182
13132: PPUSH
13133: LD_INT 4
13135: PPUSH
13136: LD_INT 0
13138: PPUSH
13139: CALL_OW 50
// end ;
13143: GO 13049
13145: POP
13146: POP
// uc_nation := 3 ;
13147: LD_ADDR_OWVAR 21
13151: PUSH
13152: LD_INT 3
13154: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13155: LD_EXP 8
13159: PUSH
13160: LD_INT 10
13162: PUSH
13163: LD_INT 8
13165: PUSH
13166: LD_INT 6
13168: PUSH
13169: LD_INT 5
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_OWVAR 67
13182: ARRAY
13183: LESS
13184: IFFALSE 13263
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
13186: LD_INT 21
13188: PPUSH
13189: LD_INT 1
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: LD_INT 51
13197: PPUSH
13198: LD_INT 12
13200: PPUSH
13201: CALL 32036 0 5
// veh := CreateVehicle ;
13205: LD_ADDR_VAR 0 6
13209: PUSH
13210: CALL_OW 45
13214: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
13215: LD_VAR 0 6
13219: PPUSH
13220: LD_INT 269
13222: PPUSH
13223: LD_INT 66
13225: PPUSH
13226: LD_INT 4
13228: PPUSH
13229: LD_INT 0
13231: PPUSH
13232: CALL 66610 0 5
// SetLives ( veh , 333 ) ;
13236: LD_VAR 0 6
13240: PPUSH
13241: LD_INT 333
13243: PPUSH
13244: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
13248: LD_VAR 0 6
13252: PPUSH
13253: LD_INT 2
13255: PPUSH
13256: LD_INT 100
13258: PPUSH
13259: CALL_OW 290
// end ; end ;
13263: LD_VAR 0 1
13267: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
13268: LD_EXP 53
13272: PUSH
13273: LD_EXP 53
13277: PPUSH
13278: CALL_OW 255
13282: PUSH
13283: LD_INT 3
13285: EQUAL
13286: AND
13287: IFFALSE 13450
13289: GO 13291
13291: DISABLE
13292: LD_INT 0
13294: PPUSH
// begin enable ;
13295: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
13296: LD_INT 81
13298: PUSH
13299: LD_INT 3
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 91
13308: PUSH
13309: LD_EXP 53
13313: PUSH
13314: LD_INT 15
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PPUSH
13326: CALL_OW 69
13330: IFFALSE 13410
// begin if not IsDrivenBy ( ruBlockadeTank ) then
13332: LD_EXP 53
13336: PPUSH
13337: CALL_OW 311
13341: NOT
13342: IFFALSE 13408
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
13344: LD_ADDR_VAR 0 1
13348: PUSH
13349: LD_INT 22
13351: PUSH
13352: LD_INT 3
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 21
13361: PUSH
13362: LD_INT 1
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 69
13377: PPUSH
13378: LD_EXP 53
13382: PPUSH
13383: CALL_OW 74
13387: ST_TO_ADDR
// if driver then
13388: LD_VAR 0 1
13392: IFFALSE 13408
// ComEnterUnit ( driver , ruBlockadeTank ) ;
13394: LD_VAR 0 1
13398: PPUSH
13399: LD_EXP 53
13403: PPUSH
13404: CALL_OW 120
// end ; exit ;
13408: GO 13450
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
13410: LD_EXP 53
13414: PPUSH
13415: CALL_OW 256
13419: PUSH
13420: LD_INT 1000
13422: LESS
13423: PUSH
13424: LD_EXP 53
13428: PPUSH
13429: CALL_OW 311
13433: AND
13434: IFFALSE 13450
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
13436: LD_EXP 53
13440: PPUSH
13441: CALL_OW 311
13445: PPUSH
13446: CALL 66170 0 1
// end ;
13450: PPOPN 1
13452: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
13453: LD_EXP 55
13457: PPUSH
13458: LD_INT 3
13460: PUSH
13461: LD_INT 24
13463: PUSH
13464: LD_INT 1000
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PPUSH
13475: CALL_OW 72
13479: PUSH
13480: LD_EXP 55
13484: PPUSH
13485: LD_INT 25
13487: PUSH
13488: LD_INT 4
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 50
13497: PUSH
13498: EMPTY
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 72
13509: AND
13510: IFFALSE 13698
13512: GO 13514
13514: DISABLE
13515: LD_INT 0
13517: PPUSH
13518: PPUSH
13519: PPUSH
// begin enable ;
13520: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
13521: LD_ADDR_VAR 0 3
13525: PUSH
13526: LD_EXP 55
13530: PPUSH
13531: LD_INT 3
13533: PUSH
13534: LD_INT 24
13536: PUSH
13537: LD_INT 1000
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PPUSH
13548: CALL_OW 72
13552: PPUSH
13553: LD_INT 1
13555: PPUSH
13556: CALL 66410 0 2
13560: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
13561: LD_ADDR_VAR 0 2
13565: PUSH
13566: LD_EXP 55
13570: PPUSH
13571: LD_INT 25
13573: PUSH
13574: LD_INT 4
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 50
13583: PUSH
13584: EMPTY
13585: LIST
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PPUSH
13591: CALL_OW 72
13595: PUSH
13596: LD_INT 1
13598: ARRAY
13599: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
13600: LD_VAR 0 2
13604: PPUSH
13605: LD_VAR 0 3
13609: PUSH
13610: LD_INT 1
13612: ARRAY
13613: PPUSH
13614: CALL 61756 0 2
13618: NOT
13619: IFFALSE 13698
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
13621: LD_VAR 0 3
13625: PUSH
13626: LD_INT 1
13628: ARRAY
13629: PPUSH
13630: LD_INT 9
13632: PPUSH
13633: CALL_OW 308
13637: NOT
13638: IFFALSE 13656
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
13640: LD_VAR 0 3
13644: PUSH
13645: LD_INT 1
13647: ARRAY
13648: PPUSH
13649: LD_INT 9
13651: PPUSH
13652: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
13656: LD_VAR 0 2
13660: PPUSH
13661: LD_VAR 0 3
13665: PUSH
13666: LD_INT 1
13668: ARRAY
13669: PPUSH
13670: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
13674: LD_VAR 0 2
13678: PPUSH
13679: LD_INT 179
13681: PPUSH
13682: LD_INT 113
13684: PPUSH
13685: CALL_OW 171
// AddComHold ( sci ) ;
13689: LD_VAR 0 2
13693: PPUSH
13694: CALL_OW 200
// end ; end ;
13698: PPOPN 3
13700: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
13701: LD_INT 2
13703: PPUSH
13704: LD_INT 52
13706: PPUSH
13707: CALL_OW 292
13711: IFFALSE 13816
13713: GO 13715
13715: DISABLE
13716: LD_INT 0
13718: PPUSH
13719: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
13720: LD_ADDR_VAR 0 2
13724: PUSH
13725: LD_EXP 57
13729: PPUSH
13730: LD_INT 25
13732: PUSH
13733: LD_INT 1
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: LD_INT 50
13742: PUSH
13743: EMPTY
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PPUSH
13750: CALL_OW 72
13754: ST_TO_ADDR
// if not tmp then
13755: LD_VAR 0 2
13759: NOT
13760: IFFALSE 13764
// exit ;
13762: GO 13816
// for i in tmp do
13764: LD_ADDR_VAR 0 1
13768: PUSH
13769: LD_VAR 0 2
13773: PUSH
13774: FOR_IN
13775: IFFALSE 13814
// begin if IsInUnit ( i ) then
13777: LD_VAR 0 1
13781: PPUSH
13782: CALL_OW 310
13786: IFFALSE 13797
// ComExitBuilding ( i ) ;
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
13797: LD_VAR 0 1
13801: PPUSH
13802: LD_INT 84
13804: PPUSH
13805: LD_INT 133
13807: PPUSH
13808: CALL_OW 174
// end ;
13812: GO 13774
13814: POP
13815: POP
// end ;
13816: PPOPN 2
13818: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
13819: LD_EXP 14
13823: IFFALSE 13983
13825: GO 13827
13827: DISABLE
13828: LD_INT 0
13830: PPUSH
13831: PPUSH
13832: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
13833: LD_ADDR_VAR 0 2
13837: PUSH
13838: LD_INT 72
13840: PUSH
13841: LD_INT 12
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
13848: LD_ADDR_VAR 0 3
13852: PUSH
13853: LD_INT 44
13855: PUSH
13856: LD_INT 43
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 45
13865: PUSH
13866: LD_INT 44
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 45
13875: PUSH
13876: LD_INT 46
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 45
13885: PUSH
13886: LD_INT 46
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: PUSH
13899: LD_OWVAR 67
13903: ARRAY
13904: ST_TO_ADDR
// for i := 1 to 6 do
13905: LD_ADDR_VAR 0 1
13909: PUSH
13910: DOUBLE
13911: LD_INT 1
13913: DEC
13914: ST_TO_ADDR
13915: LD_INT 6
13917: PUSH
13918: FOR_TO
13919: IFFALSE 13981
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
13921: LD_VAR 0 2
13925: PPUSH
13926: LD_INT 22
13928: PUSH
13929: LD_INT 23
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_VAR 0 1
13940: PUSH
13941: LD_INT 2
13943: MOD
13944: PUSH
13945: LD_INT 1
13947: PLUS
13948: ARRAY
13949: PPUSH
13950: LD_INT 1
13952: PPUSH
13953: LD_INT 1
13955: PPUSH
13956: LD_VAR 0 3
13960: PUSH
13961: LD_VAR 0 1
13965: PUSH
13966: LD_INT 2
13968: MOD
13969: PUSH
13970: LD_INT 1
13972: PLUS
13973: ARRAY
13974: PPUSH
13975: CALL_OW 185
13979: GO 13918
13981: POP
13982: POP
// end ;
13983: PPOPN 3
13985: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
13986: LD_EXP 11
13990: IFFALSE 15139
13992: GO 13994
13994: DISABLE
13995: LD_INT 0
13997: PPUSH
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
// begin enable ;
14003: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
14004: LD_ADDR_VAR 0 6
14008: PUSH
14009: LD_INT 10
14011: PPUSH
14012: LD_INT 81
14014: PUSH
14015: LD_INT 3
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 70
14026: ST_TO_ADDR
// if ruSpecialVehicleGroup then
14027: LD_EXP 58
14031: IFFALSE 14297
// begin for i in ruSpecialVehicleGroup do
14033: LD_ADDR_VAR 0 1
14037: PUSH
14038: LD_EXP 58
14042: PUSH
14043: FOR_IN
14044: IFFALSE 14295
// begin if enemyInBase then
14046: LD_VAR 0 6
14050: IFFALSE 14293
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
14052: LD_VAR 0 1
14056: PPUSH
14057: CALL_OW 256
14061: PUSH
14062: LD_INT 500
14064: GREATER
14065: PUSH
14066: LD_VAR 0 1
14070: PPUSH
14071: CALL_OW 110
14075: PUSH
14076: LD_INT 0
14078: EQUAL
14079: AND
14080: IFFALSE 14106
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
14082: LD_VAR 0 1
14086: PPUSH
14087: LD_VAR 0 6
14091: PPUSH
14092: LD_VAR 0 1
14096: PPUSH
14097: CALL_OW 74
14101: PPUSH
14102: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
14106: LD_VAR 0 1
14110: PPUSH
14111: CALL_OW 256
14115: PUSH
14116: LD_INT 500
14118: LESSEQUAL
14119: PUSH
14120: LD_VAR 0 1
14124: PPUSH
14125: CALL_OW 110
14129: PUSH
14130: LD_INT 0
14132: EQUAL
14133: AND
14134: IFFALSE 14163
// begin SetTag ( i , 1 ) ;
14136: LD_VAR 0 1
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
14148: LD_VAR 0 1
14152: PPUSH
14153: LD_INT 83
14155: PPUSH
14156: LD_INT 134
14158: PPUSH
14159: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
14163: LD_VAR 0 1
14167: PPUSH
14168: CALL_OW 256
14172: PUSH
14173: LD_INT 1000
14175: LESS
14176: PUSH
14177: LD_VAR 0 1
14181: PPUSH
14182: CALL_OW 110
14186: PUSH
14187: LD_INT 1
14189: EQUAL
14190: AND
14191: PUSH
14192: LD_VAR 0 1
14196: PPUSH
14197: LD_INT 83
14199: PPUSH
14200: LD_INT 134
14202: PPUSH
14203: CALL_OW 297
14207: PUSH
14208: LD_INT 6
14210: LESS
14211: AND
14212: IFFALSE 14240
// begin SetFuel ( i , 100 ) ;
14214: LD_VAR 0 1
14218: PPUSH
14219: LD_INT 100
14221: PPUSH
14222: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
14226: LD_VAR 0 1
14230: PPUSH
14231: CALL_OW 310
14235: PPUSH
14236: CALL 66290 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
14240: LD_VAR 0 1
14244: PPUSH
14245: CALL_OW 256
14249: PUSH
14250: LD_INT 1000
14252: EQUAL
14253: PUSH
14254: LD_VAR 0 1
14258: PPUSH
14259: CALL_OW 110
14263: PUSH
14264: LD_INT 1
14266: EQUAL
14267: AND
14268: PUSH
14269: LD_VAR 0 1
14273: PPUSH
14274: CALL_OW 311
14278: AND
14279: IFFALSE 14293
// SetTag ( i , 0 ) ;
14281: LD_VAR 0 1
14285: PPUSH
14286: LD_INT 0
14288: PPUSH
14289: CALL_OW 109
// end ; end ;
14293: GO 14043
14295: POP
14296: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
14297: LD_ADDR_VAR 0 5
14301: PUSH
14302: LD_EXP 57
14306: PPUSH
14307: LD_INT 25
14309: PUSH
14310: LD_INT 4
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PPUSH
14317: CALL_OW 72
14321: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14322: LD_ADDR_VAR 0 4
14326: PUSH
14327: LD_EXP 57
14331: PPUSH
14332: LD_INT 92
14334: PUSH
14335: LD_INT 92
14337: PUSH
14338: LD_INT 155
14340: PUSH
14341: LD_INT 12
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 3
14352: PUSH
14353: LD_INT 24
14355: PUSH
14356: LD_INT 1000
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 72
14375: ST_TO_ADDR
// if sci then
14376: LD_VAR 0 5
14380: IFFALSE 14513
// begin if hurt then
14382: LD_VAR 0 4
14386: IFFALSE 14459
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
14388: LD_VAR 0 5
14392: PPUSH
14393: LD_INT 3
14395: PUSH
14396: LD_INT 54
14398: PUSH
14399: EMPTY
14400: LIST
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PPUSH
14406: CALL_OW 72
14410: IFFALSE 14439
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
14412: LD_VAR 0 5
14416: PPUSH
14417: LD_INT 3
14419: PUSH
14420: LD_INT 54
14422: PUSH
14423: EMPTY
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PPUSH
14430: CALL_OW 72
14434: PPUSH
14435: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
14439: LD_VAR 0 5
14443: PPUSH
14444: LD_VAR 0 4
14448: PUSH
14449: LD_INT 1
14451: ARRAY
14452: PPUSH
14453: CALL_OW 188
// end else
14457: GO 14513
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
14459: LD_VAR 0 5
14463: PPUSH
14464: LD_INT 3
14466: PUSH
14467: LD_INT 54
14469: PUSH
14470: EMPTY
14471: LIST
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PPUSH
14477: CALL_OW 72
14481: IFFALSE 14513
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
14483: LD_VAR 0 5
14487: PPUSH
14488: LD_INT 3
14490: PUSH
14491: LD_INT 54
14493: PUSH
14494: EMPTY
14495: LIST
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PPUSH
14501: CALL_OW 72
14505: PPUSH
14506: LD_INT 17
14508: PPUSH
14509: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14513: LD_ADDR_VAR 0 3
14517: PUSH
14518: LD_INT 10
14520: PPUSH
14521: LD_INT 21
14523: PUSH
14524: LD_INT 3
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 3
14533: PUSH
14534: LD_INT 24
14536: PUSH
14537: LD_INT 1000
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PPUSH
14552: CALL_OW 70
14556: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
14557: LD_ADDR_VAR 0 2
14561: PUSH
14562: LD_EXP 57
14566: PPUSH
14567: LD_INT 25
14569: PUSH
14570: LD_INT 2
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 72
14581: PUSH
14582: LD_INT 22
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 34
14594: PUSH
14595: LD_INT 52
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: UNION
14611: ST_TO_ADDR
// if not tmp then
14612: LD_VAR 0 2
14616: NOT
14617: IFFALSE 14621
// exit ;
14619: GO 15139
// for i in tmp do
14621: LD_ADDR_VAR 0 1
14625: PUSH
14626: LD_VAR 0 2
14630: PUSH
14631: FOR_IN
14632: IFFALSE 15137
// begin if GetClass ( i ) = 2 then
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 257
14643: PUSH
14644: LD_INT 2
14646: EQUAL
14647: IFFALSE 14870
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
14649: LD_VAR 0 1
14653: PPUSH
14654: CALL_OW 256
14658: PUSH
14659: LD_INT 1000
14661: EQUAL
14662: PUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: CALL_OW 110
14672: PUSH
14673: LD_INT 1
14675: EQUAL
14676: AND
14677: IFFALSE 14691
// SetTag ( i , 0 ) ;
14679: LD_VAR 0 1
14683: PPUSH
14684: LD_INT 0
14686: PPUSH
14687: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
14691: LD_VAR 0 1
14695: PPUSH
14696: CALL_OW 256
14700: PUSH
14701: LD_INT 500
14703: LESSEQUAL
14704: PUSH
14705: LD_VAR 0 1
14709: PPUSH
14710: CALL_OW 110
14714: PUSH
14715: LD_INT 0
14717: EQUAL
14718: AND
14719: IFFALSE 14748
// begin SetTag ( i , 1 ) ;
14721: LD_VAR 0 1
14725: PPUSH
14726: LD_INT 1
14728: PPUSH
14729: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: LD_INT 92
14740: PPUSH
14741: LD_INT 155
14743: PPUSH
14744: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
14748: LD_VAR 0 3
14752: PUSH
14753: LD_VAR 0 1
14757: PPUSH
14758: CALL_OW 256
14762: PUSH
14763: LD_INT 500
14765: GREATER
14766: AND
14767: PUSH
14768: LD_VAR 0 1
14772: PPUSH
14773: CALL_OW 110
14777: PUSH
14778: LD_INT 0
14780: EQUAL
14781: AND
14782: PUSH
14783: LD_VAR 0 1
14787: PPUSH
14788: CALL_OW 314
14792: NOT
14793: AND
14794: IFFALSE 14868
// begin if b then
14796: LD_VAR 0 3
14800: IFFALSE 14832
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
14802: LD_VAR 0 1
14806: PPUSH
14807: LD_VAR 0 3
14811: PUSH
14812: LD_INT 1
14814: PPUSH
14815: LD_VAR 0 3
14819: PPUSH
14820: CALL_OW 12
14824: ARRAY
14825: PPUSH
14826: CALL_OW 130
14830: GO 14868
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
14832: LD_VAR 0 1
14836: PPUSH
14837: LD_INT 94
14839: PPUSH
14840: LD_INT 165
14842: PPUSH
14843: CALL_OW 297
14847: PUSH
14848: LD_INT 8
14850: GREATER
14851: IFFALSE 14868
// ComMoveXY ( i , 94 , 165 ) ;
14853: LD_VAR 0 1
14857: PPUSH
14858: LD_INT 94
14860: PPUSH
14861: LD_INT 165
14863: PPUSH
14864: CALL_OW 111
// end ; end else
14868: GO 15135
// if GetWeapon ( i ) = ru_crane then
14870: LD_VAR 0 1
14874: PPUSH
14875: CALL_OW 264
14879: PUSH
14880: LD_INT 52
14882: EQUAL
14883: IFFALSE 15135
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
14885: LD_VAR 0 1
14889: PPUSH
14890: CALL_OW 256
14894: PUSH
14895: LD_INT 1000
14897: EQUAL
14898: PUSH
14899: LD_VAR 0 1
14903: PPUSH
14904: CALL_OW 110
14908: PUSH
14909: LD_INT 1
14911: EQUAL
14912: AND
14913: IFFALSE 14939
// begin SetTag ( i , 0 ) ;
14915: LD_VAR 0 1
14919: PPUSH
14920: LD_INT 0
14922: PPUSH
14923: CALL_OW 109
// SetFuel ( i , 100 ) ;
14927: LD_VAR 0 1
14931: PPUSH
14932: LD_INT 100
14934: PPUSH
14935: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
14939: LD_VAR 0 1
14943: PPUSH
14944: CALL_OW 256
14948: PUSH
14949: LD_INT 500
14951: LESSEQUAL
14952: PUSH
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL_OW 110
14962: PUSH
14963: LD_INT 0
14965: EQUAL
14966: AND
14967: IFFALSE 15010
// begin SetTag ( i , 1 ) ;
14969: LD_VAR 0 1
14973: PPUSH
14974: LD_INT 1
14976: PPUSH
14977: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
14981: LD_VAR 0 1
14985: PPUSH
14986: LD_INT 83
14988: PPUSH
14989: LD_INT 135
14991: PPUSH
14992: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
14996: LD_VAR 0 1
15000: PPUSH
15001: CALL_OW 310
15005: PPUSH
15006: CALL 66290 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
15010: LD_VAR 0 1
15014: PPUSH
15015: CALL_OW 256
15019: PUSH
15020: LD_INT 500
15022: GREATER
15023: PUSH
15024: LD_VAR 0 1
15028: PPUSH
15029: CALL_OW 110
15033: PUSH
15034: LD_INT 0
15036: EQUAL
15037: AND
15038: PUSH
15039: LD_VAR 0 1
15043: PPUSH
15044: CALL_OW 311
15048: AND
15049: PUSH
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 314
15059: NOT
15060: AND
15061: IFFALSE 15135
// begin if b then
15063: LD_VAR 0 3
15067: IFFALSE 15099
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
15069: LD_VAR 0 1
15073: PPUSH
15074: LD_VAR 0 3
15078: PUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_VAR 0 3
15086: PPUSH
15087: CALL_OW 12
15091: ARRAY
15092: PPUSH
15093: CALL_OW 130
15097: GO 15135
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
15099: LD_VAR 0 1
15103: PPUSH
15104: LD_INT 94
15106: PPUSH
15107: LD_INT 165
15109: PPUSH
15110: CALL_OW 297
15114: PUSH
15115: LD_INT 8
15117: GREATER
15118: IFFALSE 15135
// ComMoveXY ( i , 94 , 165 ) ;
15120: LD_VAR 0 1
15124: PPUSH
15125: LD_INT 94
15127: PPUSH
15128: LD_INT 165
15130: PPUSH
15131: CALL_OW 111
// end ; end ; end ;
15135: GO 14631
15137: POP
15138: POP
// end ;
15139: PPOPN 6
15141: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
15142: LD_EXP 23
15146: NOT
15147: PUSH
15148: LD_EXP 27
15152: NOT
15153: AND
15154: IFFALSE 16070
15156: GO 15158
15158: DISABLE
15159: LD_INT 0
15161: PPUSH
15162: PPUSH
15163: PPUSH
15164: PPUSH
// begin enable ;
15165: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
15166: LD_INT 35
15168: PUSH
15169: LD_INT 45
15171: PUSH
15172: LD_INT 55
15174: PUSH
15175: LD_INT 60
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: PUSH
15184: LD_OWVAR 67
15188: ARRAY
15189: PPUSH
15190: CALL_OW 13
15194: IFFALSE 15210
// waveStrength := waveStrength + 1 ;
15196: LD_ADDR_EXP 60
15200: PUSH
15201: LD_EXP 60
15205: PUSH
15206: LD_INT 1
15208: PLUS
15209: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 , 7 ] [ Difficulty ] then
15210: LD_EXP 60
15214: PUSH
15215: LD_INT 4
15217: PUSH
15218: LD_INT 5
15220: PUSH
15221: LD_INT 6
15223: PUSH
15224: LD_INT 7
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: PUSH
15233: LD_OWVAR 67
15237: ARRAY
15238: GREATER
15239: IFFALSE 15272
// begin waveStrength := waveStrength + Difficulty ;
15241: LD_ADDR_EXP 60
15245: PUSH
15246: LD_EXP 60
15250: PUSH
15251: LD_OWVAR 67
15255: PLUS
15256: ST_TO_ADDR
// disableAttackOnHeike := true ;
15257: LD_ADDR_EXP 27
15261: PUSH
15262: LD_INT 1
15264: ST_TO_ADDR
// wait ( 3 3$00 ) ;
15265: LD_INT 6300
15267: PPUSH
15268: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
15272: LD_EXP 27
15276: PUSH
15277: LD_OWVAR 67
15281: PUSH
15282: LD_INT 1
15284: GREATER
15285: AND
15286: IFFALSE 15495
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
15288: LD_ADDR_VAR 0 1
15292: PUSH
15293: DOUBLE
15294: LD_INT 1
15296: DEC
15297: ST_TO_ADDR
15298: LD_INT 3
15300: PUSH
15301: LD_INT 3
15303: PUSH
15304: LD_INT 4
15306: PUSH
15307: LD_INT 4
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: PUSH
15316: LD_OWVAR 67
15320: ARRAY
15321: PUSH
15322: FOR_TO
15323: IFFALSE 15493
// begin InitHc ;
15325: CALL_OW 19
// InitVc ;
15329: CALL_OW 20
// uc_side := 3 ;
15333: LD_ADDR_OWVAR 20
15337: PUSH
15338: LD_INT 3
15340: ST_TO_ADDR
// uc_nation := 3 ;
15341: LD_ADDR_OWVAR 21
15345: PUSH
15346: LD_INT 3
15348: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
15349: LD_INT 0
15351: PPUSH
15352: LD_INT 1
15354: PPUSH
15355: LD_OWVAR 67
15359: PUSH
15360: LD_INT 2
15362: PLUS
15363: PPUSH
15364: CALL_OW 380
// un := CreateHuman ;
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: CALL_OW 44
15377: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
15378: LD_VAR 0 2
15382: PPUSH
15383: LD_INT 160
15385: PPUSH
15386: LD_INT 3
15388: PPUSH
15389: LD_INT 2
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL 66610 0 5
// SetClass ( un , class_bazooker ) ;
15399: LD_VAR 0 2
15403: PPUSH
15404: LD_INT 9
15406: PPUSH
15407: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15411: LD_ADDR_EXP 59
15415: PUSH
15416: LD_EXP 59
15420: PPUSH
15421: LD_EXP 59
15425: PUSH
15426: LD_INT 1
15428: PLUS
15429: PPUSH
15430: LD_VAR 0 2
15434: PPUSH
15435: CALL_OW 1
15439: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
15440: LD_VAR 0 2
15444: PPUSH
15445: LD_INT 177
15447: PPUSH
15448: LD_INT 17
15450: PPUSH
15451: CALL_OW 111
// wait ( 0 0$2 ) ;
15455: LD_INT 70
15457: PPUSH
15458: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15462: LD_ADDR_VAR 0 4
15466: PUSH
15467: LD_VAR 0 4
15471: PPUSH
15472: LD_VAR 0 4
15476: PUSH
15477: LD_INT 1
15479: PLUS
15480: PPUSH
15481: LD_VAR 0 2
15485: PPUSH
15486: CALL_OW 1
15490: ST_TO_ADDR
// end ;
15491: GO 15322
15493: POP
15494: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
15495: LD_ADDR_VAR 0 1
15499: PUSH
15500: DOUBLE
15501: LD_INT 1
15503: DEC
15504: ST_TO_ADDR
15505: LD_INT 2
15507: PUSH
15508: LD_INT 3
15510: PUSH
15511: LD_INT 4
15513: PUSH
15514: LD_INT 5
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: PUSH
15523: LD_OWVAR 67
15527: ARRAY
15528: PUSH
15529: LD_EXP 60
15533: PLUS
15534: PUSH
15535: FOR_TO
15536: IFFALSE 15845
// begin InitHc ;
15538: CALL_OW 19
// InitVc ;
15542: CALL_OW 20
// uc_side := 3 ;
15546: LD_ADDR_OWVAR 20
15550: PUSH
15551: LD_INT 3
15553: ST_TO_ADDR
// uc_nation := 3 ;
15554: LD_ADDR_OWVAR 21
15558: PUSH
15559: LD_INT 3
15561: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
15562: LD_INT 22
15564: PUSH
15565: LD_INT 23
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 1
15574: PPUSH
15575: LD_INT 2
15577: PPUSH
15578: CALL_OW 12
15582: ARRAY
15583: PPUSH
15584: LD_INT 1
15586: PPUSH
15587: LD_INT 1
15589: PPUSH
15590: LD_INT 44
15592: PUSH
15593: LD_INT 45
15595: PUSH
15596: LD_INT 43
15598: PUSH
15599: LD_INT 42
15601: PUSH
15602: LD_INT 44
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 1
15614: PPUSH
15615: LD_INT 5
15617: PPUSH
15618: CALL_OW 12
15622: ARRAY
15623: PPUSH
15624: LD_INT 99
15626: PPUSH
15627: CALL 32036 0 5
// veh := CreateVehicle ;
15631: LD_ADDR_VAR 0 3
15635: PUSH
15636: CALL_OW 45
15640: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
15641: LD_VAR 0 3
15645: PPUSH
15646: LD_INT 160
15648: PPUSH
15649: LD_INT 3
15651: PPUSH
15652: LD_INT 2
15654: PPUSH
15655: LD_INT 0
15657: PPUSH
15658: CALL 66610 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
15662: LD_ADDR_EXP 59
15666: PUSH
15667: LD_EXP 59
15671: PPUSH
15672: LD_EXP 59
15676: PUSH
15677: LD_INT 1
15679: PLUS
15680: PPUSH
15681: LD_VAR 0 3
15685: PPUSH
15686: CALL_OW 1
15690: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
15691: LD_INT 0
15693: PPUSH
15694: LD_INT 3
15696: PPUSH
15697: LD_OWVAR 67
15701: PUSH
15702: LD_INT 2
15704: PLUS
15705: PPUSH
15706: CALL_OW 380
// un := CreateHuman ;
15710: LD_ADDR_VAR 0 2
15714: PUSH
15715: CALL_OW 44
15719: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15720: LD_VAR 0 2
15724: PPUSH
15725: LD_VAR 0 3
15729: PPUSH
15730: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15734: LD_ADDR_EXP 59
15738: PUSH
15739: LD_EXP 59
15743: PPUSH
15744: LD_EXP 59
15748: PUSH
15749: LD_INT 1
15751: PLUS
15752: PPUSH
15753: LD_VAR 0 2
15757: PPUSH
15758: CALL_OW 1
15762: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
15763: LD_VAR 0 2
15767: PPUSH
15768: LD_INT 177
15770: PPUSH
15771: LD_INT 17
15773: PPUSH
15774: CALL_OW 111
// wait ( 0 0$2 ) ;
15778: LD_INT 70
15780: PPUSH
15781: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15785: LD_ADDR_VAR 0 4
15789: PUSH
15790: LD_VAR 0 4
15794: PPUSH
15795: LD_VAR 0 4
15799: PUSH
15800: LD_INT 1
15802: PLUS
15803: PPUSH
15804: LD_VAR 0 3
15808: PPUSH
15809: CALL_OW 1
15813: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15814: LD_ADDR_VAR 0 4
15818: PUSH
15819: LD_VAR 0 4
15823: PPUSH
15824: LD_VAR 0 4
15828: PUSH
15829: LD_INT 1
15831: PLUS
15832: PPUSH
15833: LD_VAR 0 2
15837: PPUSH
15838: CALL_OW 1
15842: ST_TO_ADDR
// end ;
15843: GO 15535
15845: POP
15846: POP
// for i in tmp do
15847: LD_ADDR_VAR 0 1
15851: PUSH
15852: LD_VAR 0 4
15856: PUSH
15857: FOR_IN
15858: IFFALSE 15948
// begin if Prob ( 50 ) then
15860: LD_INT 50
15862: PPUSH
15863: CALL_OW 13
15867: IFFALSE 15886
// ComAgressiveMove ( i , 206 , 73 ) else
15869: LD_VAR 0 1
15873: PPUSH
15874: LD_INT 206
15876: PPUSH
15877: LD_INT 73
15879: PPUSH
15880: CALL_OW 114
15884: GO 15946
// begin ComAgressiveMove ( i , 206 , 73 ) ;
15886: LD_VAR 0 1
15890: PPUSH
15891: LD_INT 206
15893: PPUSH
15894: LD_INT 73
15896: PPUSH
15897: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
15901: LD_VAR 0 1
15905: PPUSH
15906: LD_INT 257
15908: PPUSH
15909: LD_INT 105
15911: PPUSH
15912: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_INT 227
15923: PPUSH
15924: LD_INT 97
15926: PPUSH
15927: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
15931: LD_VAR 0 1
15935: PPUSH
15936: LD_INT 206
15938: PPUSH
15939: LD_INT 73
15941: PPUSH
15942: CALL_OW 174
// end ; end ;
15946: GO 15857
15948: POP
15949: POP
// repeat wait ( 0 0$1 ) ;
15950: LD_INT 35
15952: PPUSH
15953: CALL_OW 67
// for i in tmp do
15957: LD_ADDR_VAR 0 1
15961: PUSH
15962: LD_VAR 0 4
15966: PUSH
15967: FOR_IN
15968: IFFALSE 16047
// if IsDead ( i ) then
15970: LD_VAR 0 1
15974: PPUSH
15975: CALL_OW 301
15979: IFFALSE 15999
// tmp := tmp diff i else
15981: LD_ADDR_VAR 0 4
15985: PUSH
15986: LD_VAR 0 4
15990: PUSH
15991: LD_VAR 0 1
15995: DIFF
15996: ST_TO_ADDR
15997: GO 16045
// if not HasTask ( i ) then
15999: LD_VAR 0 1
16003: PPUSH
16004: CALL_OW 314
16008: NOT
16009: IFFALSE 16045
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
16011: LD_VAR 0 1
16015: PPUSH
16016: LD_INT 81
16018: PUSH
16019: LD_INT 3
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PPUSH
16026: CALL_OW 69
16030: PPUSH
16031: LD_VAR 0 1
16035: PPUSH
16036: CALL_OW 74
16040: PPUSH
16041: CALL_OW 115
16045: GO 15967
16047: POP
16048: POP
// until not tmp ;
16049: LD_VAR 0 4
16053: NOT
16054: IFFALSE 15950
// if firstAttack then
16056: LD_EXP 28
16060: IFFALSE 16070
// firstAttack := false ;
16062: LD_ADDR_EXP 28
16066: PUSH
16067: LD_INT 0
16069: ST_TO_ADDR
// end ;
16070: PPOPN 4
16072: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
16073: LD_EXP 23
16077: NOT
16078: PUSH
16079: LD_EXP 3
16083: AND
16084: PUSH
16085: LD_EXP 16
16089: NOT
16090: AND
16091: IFFALSE 16931
16093: GO 16095
16095: DISABLE
16096: LD_INT 0
16098: PPUSH
16099: PPUSH
16100: PPUSH
16101: PPUSH
// begin enable ;
16102: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
16103: LD_ADDR_VAR 0 1
16107: PUSH
16108: DOUBLE
16109: LD_INT 1
16111: DEC
16112: ST_TO_ADDR
16113: LD_INT 1
16115: PUSH
16116: LD_INT 2
16118: PUSH
16119: LD_INT 2
16121: PUSH
16122: LD_INT 3
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: PUSH
16131: LD_OWVAR 67
16135: ARRAY
16136: PUSH
16137: FOR_TO
16138: IFFALSE 16439
// begin InitHc ;
16140: CALL_OW 19
// InitVc ;
16144: CALL_OW 20
// uc_side := 3 ;
16148: LD_ADDR_OWVAR 20
16152: PUSH
16153: LD_INT 3
16155: ST_TO_ADDR
// uc_nation := 3 ;
16156: LD_ADDR_OWVAR 21
16160: PUSH
16161: LD_INT 3
16163: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
16164: LD_INT 22
16166: PUSH
16167: LD_INT 23
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 1
16176: PPUSH
16177: LD_INT 2
16179: PPUSH
16180: CALL_OW 12
16184: ARRAY
16185: PPUSH
16186: LD_INT 1
16188: PPUSH
16189: LD_INT 1
16191: PPUSH
16192: LD_INT 44
16194: PUSH
16195: LD_INT 43
16197: PUSH
16198: LD_INT 42
16200: PUSH
16201: LD_INT 44
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 1
16212: PPUSH
16213: LD_INT 4
16215: PPUSH
16216: CALL_OW 12
16220: ARRAY
16221: PPUSH
16222: LD_INT 99
16224: PPUSH
16225: CALL 32036 0 5
// veh := CreateVehicle ;
16229: LD_ADDR_VAR 0 3
16233: PUSH
16234: CALL_OW 45
16238: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
16239: LD_VAR 0 3
16243: PPUSH
16244: LD_INT 5
16246: PPUSH
16247: LD_INT 3
16249: PPUSH
16250: LD_INT 2
16252: PPUSH
16253: LD_INT 0
16255: PPUSH
16256: CALL 66610 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
16260: LD_ADDR_EXP 59
16264: PUSH
16265: LD_EXP 59
16269: PPUSH
16270: LD_EXP 59
16274: PUSH
16275: LD_INT 1
16277: PLUS
16278: PPUSH
16279: LD_VAR 0 3
16283: PPUSH
16284: CALL_OW 1
16288: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
16289: LD_INT 0
16291: PPUSH
16292: LD_INT 3
16294: PPUSH
16295: LD_OWVAR 67
16299: PPUSH
16300: CALL_OW 380
// un := CreateHuman ;
16304: LD_ADDR_VAR 0 2
16308: PUSH
16309: CALL_OW 44
16313: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16314: LD_VAR 0 2
16318: PPUSH
16319: LD_VAR 0 3
16323: PPUSH
16324: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16328: LD_ADDR_EXP 59
16332: PUSH
16333: LD_EXP 59
16337: PPUSH
16338: LD_EXP 59
16342: PUSH
16343: LD_INT 1
16345: PLUS
16346: PPUSH
16347: LD_VAR 0 2
16351: PPUSH
16352: CALL_OW 1
16356: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
16357: LD_VAR 0 2
16361: PPUSH
16362: LD_INT 23
16364: PPUSH
16365: LD_INT 7
16367: PPUSH
16368: CALL_OW 111
// wait ( 0 0$2 ) ;
16372: LD_INT 70
16374: PPUSH
16375: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
16379: LD_ADDR_VAR 0 4
16383: PUSH
16384: LD_VAR 0 4
16388: PPUSH
16389: LD_VAR 0 4
16393: PUSH
16394: LD_INT 1
16396: PLUS
16397: PPUSH
16398: LD_VAR 0 3
16402: PPUSH
16403: CALL_OW 1
16407: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
16408: LD_ADDR_VAR 0 4
16412: PUSH
16413: LD_VAR 0 4
16417: PPUSH
16418: LD_VAR 0 4
16422: PUSH
16423: LD_INT 1
16425: PLUS
16426: PPUSH
16427: LD_VAR 0 2
16431: PPUSH
16432: CALL_OW 1
16436: ST_TO_ADDR
// end ;
16437: GO 16137
16439: POP
16440: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
16441: LD_ADDR_VAR 0 1
16445: PUSH
16446: DOUBLE
16447: LD_INT 1
16449: DEC
16450: ST_TO_ADDR
16451: LD_INT 3
16453: PUSH
16454: LD_INT 4
16456: PUSH
16457: LD_INT 4
16459: PUSH
16460: LD_INT 5
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: PUSH
16469: LD_OWVAR 67
16473: ARRAY
16474: PUSH
16475: LD_EXP 60
16479: PLUS
16480: PUSH
16481: FOR_TO
16482: IFFALSE 16791
// begin InitHc ;
16484: CALL_OW 19
// InitVc ;
16488: CALL_OW 20
// uc_side := 3 ;
16492: LD_ADDR_OWVAR 20
16496: PUSH
16497: LD_INT 3
16499: ST_TO_ADDR
// uc_nation := 3 ;
16500: LD_ADDR_OWVAR 21
16504: PUSH
16505: LD_INT 3
16507: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
16508: LD_INT 22
16510: PUSH
16511: LD_INT 23
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 1
16520: PPUSH
16521: LD_INT 2
16523: PPUSH
16524: CALL_OW 12
16528: ARRAY
16529: PPUSH
16530: LD_INT 1
16532: PPUSH
16533: LD_INT 1
16535: PPUSH
16536: LD_INT 44
16538: PUSH
16539: LD_INT 45
16541: PUSH
16542: LD_INT 43
16544: PUSH
16545: LD_INT 42
16547: PUSH
16548: LD_INT 44
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 1
16560: PPUSH
16561: LD_INT 5
16563: PPUSH
16564: CALL_OW 12
16568: ARRAY
16569: PPUSH
16570: LD_INT 99
16572: PPUSH
16573: CALL 32036 0 5
// veh := CreateVehicle ;
16577: LD_ADDR_VAR 0 3
16581: PUSH
16582: CALL_OW 45
16586: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
16587: LD_VAR 0 3
16591: PPUSH
16592: LD_INT 127
16594: PPUSH
16595: LD_INT 243
16597: PPUSH
16598: LD_INT 0
16600: PPUSH
16601: LD_INT 0
16603: PPUSH
16604: CALL 66610 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
16608: LD_ADDR_EXP 59
16612: PUSH
16613: LD_EXP 59
16617: PPUSH
16618: LD_EXP 59
16622: PUSH
16623: LD_INT 1
16625: PLUS
16626: PPUSH
16627: LD_VAR 0 3
16631: PPUSH
16632: CALL_OW 1
16636: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
16637: LD_INT 0
16639: PPUSH
16640: LD_INT 3
16642: PPUSH
16643: LD_OWVAR 67
16647: PUSH
16648: LD_INT 2
16650: PLUS
16651: PPUSH
16652: CALL_OW 380
// un := CreateHuman ;
16656: LD_ADDR_VAR 0 2
16660: PUSH
16661: CALL_OW 44
16665: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16666: LD_VAR 0 2
16670: PPUSH
16671: LD_VAR 0 3
16675: PPUSH
16676: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16680: LD_ADDR_EXP 59
16684: PUSH
16685: LD_EXP 59
16689: PPUSH
16690: LD_EXP 59
16694: PUSH
16695: LD_INT 1
16697: PLUS
16698: PPUSH
16699: LD_VAR 0 2
16703: PPUSH
16704: CALL_OW 1
16708: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
16709: LD_VAR 0 2
16713: PPUSH
16714: LD_INT 130
16716: PPUSH
16717: LD_INT 233
16719: PPUSH
16720: CALL_OW 111
// wait ( 0 0$2 ) ;
16724: LD_INT 70
16726: PPUSH
16727: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
16731: LD_ADDR_VAR 0 4
16735: PUSH
16736: LD_VAR 0 4
16740: PPUSH
16741: LD_VAR 0 4
16745: PUSH
16746: LD_INT 1
16748: PLUS
16749: PPUSH
16750: LD_VAR 0 3
16754: PPUSH
16755: CALL_OW 1
16759: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
16760: LD_ADDR_VAR 0 4
16764: PUSH
16765: LD_VAR 0 4
16769: PPUSH
16770: LD_VAR 0 4
16774: PUSH
16775: LD_INT 1
16777: PLUS
16778: PPUSH
16779: LD_VAR 0 2
16783: PPUSH
16784: CALL_OW 1
16788: ST_TO_ADDR
// end ;
16789: GO 16481
16791: POP
16792: POP
// for i in tmp do
16793: LD_ADDR_VAR 0 1
16797: PUSH
16798: LD_VAR 0 4
16802: PUSH
16803: FOR_IN
16804: IFFALSE 16823
// ComAgressiveMove ( i , 76 , 49 ) ;
16806: LD_VAR 0 1
16810: PPUSH
16811: LD_INT 76
16813: PPUSH
16814: LD_INT 49
16816: PPUSH
16817: CALL_OW 114
16821: GO 16803
16823: POP
16824: POP
// repeat wait ( 0 0$1 ) ;
16825: LD_INT 35
16827: PPUSH
16828: CALL_OW 67
// for i in tmp do
16832: LD_ADDR_VAR 0 1
16836: PUSH
16837: LD_VAR 0 4
16841: PUSH
16842: FOR_IN
16843: IFFALSE 16922
// if IsDead ( i ) then
16845: LD_VAR 0 1
16849: PPUSH
16850: CALL_OW 301
16854: IFFALSE 16874
// tmp := tmp diff i else
16856: LD_ADDR_VAR 0 4
16860: PUSH
16861: LD_VAR 0 4
16865: PUSH
16866: LD_VAR 0 1
16870: DIFF
16871: ST_TO_ADDR
16872: GO 16920
// if not HasTask ( i ) then
16874: LD_VAR 0 1
16878: PPUSH
16879: CALL_OW 314
16883: NOT
16884: IFFALSE 16920
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
16886: LD_VAR 0 1
16890: PPUSH
16891: LD_INT 81
16893: PUSH
16894: LD_INT 3
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PPUSH
16901: CALL_OW 69
16905: PPUSH
16906: LD_VAR 0 1
16910: PPUSH
16911: CALL_OW 74
16915: PPUSH
16916: CALL_OW 115
16920: GO 16842
16922: POP
16923: POP
// until not tmp ;
16924: LD_VAR 0 4
16928: NOT
16929: IFFALSE 16825
// end ;
16931: PPOPN 4
16933: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
16934: LD_EXP 6
16938: IFFALSE 17409
16940: GO 16942
16942: DISABLE
16943: LD_INT 0
16945: PPUSH
16946: PPUSH
16947: PPUSH
16948: PPUSH
// begin wait ( 3 3$00 ) ;
16949: LD_INT 6300
16951: PPUSH
16952: CALL_OW 67
// for i := 1 to 3 do
16956: LD_ADDR_VAR 0 1
16960: PUSH
16961: DOUBLE
16962: LD_INT 1
16964: DEC
16965: ST_TO_ADDR
16966: LD_INT 3
16968: PUSH
16969: FOR_TO
16970: IFFALSE 17269
// begin InitHc ;
16972: CALL_OW 19
// InitVc ;
16976: CALL_OW 20
// uc_side := 3 ;
16980: LD_ADDR_OWVAR 20
16984: PUSH
16985: LD_INT 3
16987: ST_TO_ADDR
// uc_nation := 3 ;
16988: LD_ADDR_OWVAR 21
16992: PUSH
16993: LD_INT 3
16995: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
16996: LD_INT 22
16998: PUSH
16999: LD_INT 23
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 1
17008: PPUSH
17009: LD_INT 2
17011: PPUSH
17012: CALL_OW 12
17016: ARRAY
17017: PPUSH
17018: LD_INT 1
17020: PPUSH
17021: LD_INT 1
17023: PPUSH
17024: LD_INT 44
17026: PUSH
17027: LD_INT 43
17029: PUSH
17030: LD_INT 42
17032: PUSH
17033: LD_INT 44
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 1
17044: PPUSH
17045: LD_INT 4
17047: PPUSH
17048: CALL_OW 12
17052: ARRAY
17053: PPUSH
17054: LD_INT 99
17056: PPUSH
17057: CALL 32036 0 5
// veh := CreateVehicle ;
17061: LD_ADDR_VAR 0 3
17065: PUSH
17066: CALL_OW 45
17070: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
17071: LD_VAR 0 3
17075: PPUSH
17076: LD_INT 293
17078: PPUSH
17079: LD_INT 246
17081: PPUSH
17082: LD_INT 5
17084: PPUSH
17085: LD_INT 0
17087: PPUSH
17088: CALL 66610 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17092: LD_ADDR_EXP 59
17096: PUSH
17097: LD_EXP 59
17101: PPUSH
17102: LD_EXP 59
17106: PUSH
17107: LD_INT 1
17109: PLUS
17110: PPUSH
17111: LD_VAR 0 3
17115: PPUSH
17116: CALL_OW 1
17120: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
17121: LD_INT 0
17123: PPUSH
17124: LD_INT 3
17126: PPUSH
17127: LD_INT 3
17129: PPUSH
17130: CALL_OW 380
// un := CreateHuman ;
17134: LD_ADDR_VAR 0 2
17138: PUSH
17139: CALL_OW 44
17143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17144: LD_VAR 0 2
17148: PPUSH
17149: LD_VAR 0 3
17153: PPUSH
17154: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17158: LD_ADDR_EXP 59
17162: PUSH
17163: LD_EXP 59
17167: PPUSH
17168: LD_EXP 59
17172: PUSH
17173: LD_INT 1
17175: PLUS
17176: PPUSH
17177: LD_VAR 0 2
17181: PPUSH
17182: CALL_OW 1
17186: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
17187: LD_VAR 0 2
17191: PPUSH
17192: LD_INT 273
17194: PPUSH
17195: LD_INT 227
17197: PPUSH
17198: CALL_OW 111
// wait ( 0 0$2 ) ;
17202: LD_INT 70
17204: PPUSH
17205: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17209: LD_ADDR_VAR 0 4
17213: PUSH
17214: LD_VAR 0 4
17218: PPUSH
17219: LD_VAR 0 4
17223: PUSH
17224: LD_INT 1
17226: PLUS
17227: PPUSH
17228: LD_VAR 0 3
17232: PPUSH
17233: CALL_OW 1
17237: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17238: LD_ADDR_VAR 0 4
17242: PUSH
17243: LD_VAR 0 4
17247: PPUSH
17248: LD_VAR 0 4
17252: PUSH
17253: LD_INT 1
17255: PLUS
17256: PPUSH
17257: LD_VAR 0 2
17261: PPUSH
17262: CALL_OW 1
17266: ST_TO_ADDR
// end ;
17267: GO 16969
17269: POP
17270: POP
// for i in tmp do
17271: LD_ADDR_VAR 0 1
17275: PUSH
17276: LD_VAR 0 4
17280: PUSH
17281: FOR_IN
17282: IFFALSE 17301
// ComAgressiveMove ( i , 330 , 231 ) ;
17284: LD_VAR 0 1
17288: PPUSH
17289: LD_INT 330
17291: PPUSH
17292: LD_INT 231
17294: PPUSH
17295: CALL_OW 114
17299: GO 17281
17301: POP
17302: POP
// repeat wait ( 0 0$1 ) ;
17303: LD_INT 35
17305: PPUSH
17306: CALL_OW 67
// for i in tmp do
17310: LD_ADDR_VAR 0 1
17314: PUSH
17315: LD_VAR 0 4
17319: PUSH
17320: FOR_IN
17321: IFFALSE 17400
// if IsDead ( i ) then
17323: LD_VAR 0 1
17327: PPUSH
17328: CALL_OW 301
17332: IFFALSE 17352
// tmp := tmp diff i else
17334: LD_ADDR_VAR 0 4
17338: PUSH
17339: LD_VAR 0 4
17343: PUSH
17344: LD_VAR 0 1
17348: DIFF
17349: ST_TO_ADDR
17350: GO 17398
// if not HasTask ( i ) then
17352: LD_VAR 0 1
17356: PPUSH
17357: CALL_OW 314
17361: NOT
17362: IFFALSE 17398
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17364: LD_VAR 0 1
17368: PPUSH
17369: LD_INT 81
17371: PUSH
17372: LD_INT 3
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: PPUSH
17384: LD_VAR 0 1
17388: PPUSH
17389: CALL_OW 74
17393: PPUSH
17394: CALL_OW 115
17398: GO 17320
17400: POP
17401: POP
// until not tmp ;
17402: LD_VAR 0 4
17406: NOT
17407: IFFALSE 17303
// end ;
17409: PPOPN 4
17411: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
17412: LD_INT 3
17414: PUSH
17415: LD_INT 22
17417: PUSH
17418: LD_INT 2
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 32
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PPUSH
17443: CALL_OW 69
17447: IFFALSE 17531
17449: GO 17451
17451: DISABLE
17452: LD_INT 0
17454: PPUSH
// begin enable ;
17455: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
17456: LD_ADDR_VAR 0 1
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: LD_INT 22
17466: PUSH
17467: LD_INT 2
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 32
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PPUSH
17492: CALL_OW 69
17496: PUSH
17497: FOR_IN
17498: IFFALSE 17529
// if GetFuel ( i ) < 3 then
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 261
17509: PUSH
17510: LD_INT 3
17512: LESS
17513: IFFALSE 17527
// SetFuel ( i , 3 ) ;
17515: LD_VAR 0 1
17519: PPUSH
17520: LD_INT 3
17522: PPUSH
17523: CALL_OW 240
17527: GO 17497
17529: POP
17530: POP
// end ; end_of_file
17531: PPOPN 1
17533: END
// export function Action ; begin
17534: LD_INT 0
17536: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
17537: LD_INT 2
17539: PPUSH
17540: LD_INT 4
17542: PPUSH
17543: CALL_OW 332
// Video ( true ) ;
17547: LD_INT 1
17549: PPUSH
17550: CALL 64442 0 1
// music_nat := 3 ;
17554: LD_ADDR_OWVAR 71
17558: PUSH
17559: LD_INT 3
17561: ST_TO_ADDR
// music_class := music_recon ;
17562: LD_ADDR_OWVAR 72
17566: PUSH
17567: LD_INT 3
17569: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
17570: LD_INT 213
17572: PPUSH
17573: LD_INT 89
17575: PPUSH
17576: CALL_OW 86
// if debug then
17580: LD_EXP 1
17584: IFFALSE 17618
// begin if Kaia and Olaf then
17586: LD_EXP 37
17590: PUSH
17591: LD_EXP 41
17595: AND
17596: IFFALSE 17602
// SceneKaiaWithOlaf ;
17598: CALL 17673 0 0
// if Givi and Kamil then
17602: LD_EXP 33
17606: PUSH
17607: LD_EXP 36
17611: AND
17612: IFFALSE 17618
// SceneWithGiviAndKamil ;
17614: CALL 18244 0 0
// end ; tick := 0 ;
17618: LD_ADDR_OWVAR 1
17622: PUSH
17623: LD_INT 0
17625: ST_TO_ADDR
// Video ( false ) ;
17626: LD_INT 0
17628: PPUSH
17629: CALL 64442 0 1
// ChangeMissionObjectives ( M1 ) ;
17633: LD_STRING M1
17635: PPUSH
17636: CALL_OW 337
// music_nat := music_auto ;
17640: LD_ADDR_OWVAR 71
17644: PUSH
17645: LD_INT 0
17647: ST_TO_ADDR
// music_class := music_auto ;
17648: LD_ADDR_OWVAR 72
17652: PUSH
17653: LD_INT 0
17655: ST_TO_ADDR
// SaveForQuickRestart ;
17656: CALL_OW 22
// gameActive := true ;
17660: LD_ADDR_EXP 31
17664: PUSH
17665: LD_INT 1
17667: ST_TO_ADDR
// end ;
17668: LD_VAR 0 1
17672: RET
// export function SceneKaiaWithOlaf ; begin
17673: LD_INT 0
17675: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
17676: LD_INT 22
17678: PUSH
17679: LD_INT 2
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 30
17688: PUSH
17689: LD_INT 3
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: PPUSH
17705: LD_INT 14
17707: PPUSH
17708: LD_INT 1
17710: PPUSH
17711: LD_INT 1
17713: PPUSH
17714: LD_INT 26
17716: PPUSH
17717: CALL_OW 125
// wait ( 0 0$1 ) ;
17721: LD_INT 35
17723: PPUSH
17724: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
17728: LD_EXP 37
17732: PPUSH
17733: LD_STRING DK-Mem-1
17735: PPUSH
17736: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
17740: LD_EXP 37
17744: PPUSH
17745: LD_STRING DK-Mem-2
17747: PPUSH
17748: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
17752: LD_EXP 41
17756: PPUSH
17757: LD_STRING DO-Mem-3
17759: PPUSH
17760: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
17764: LD_EXP 37
17768: PPUSH
17769: LD_STRING DK-Mem-4
17771: PPUSH
17772: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
17776: LD_EXP 41
17780: PPUSH
17781: LD_STRING DO-Mem-5
17783: PPUSH
17784: CALL_OW 88
// wait ( 0 0$2 ) ;
17788: LD_INT 70
17790: PPUSH
17791: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
17795: LD_INT 22
17797: PUSH
17798: LD_INT 2
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 30
17807: PUSH
17808: LD_INT 3
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 69
17823: PPUSH
17824: LD_INT 90
17826: PPUSH
17827: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
17831: LD_EXP 41
17835: PPUSH
17836: LD_STRING DO-Mem-6
17838: PPUSH
17839: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
17843: LD_EXP 37
17847: PPUSH
17848: LD_STRING DK-Mem-7
17850: PPUSH
17851: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
17855: LD_EXP 32
17859: PPUSH
17860: LD_EXP 37
17864: PPUSH
17865: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
17869: LD_EXP 32
17873: PPUSH
17874: LD_STRING DH-Mem-8
17876: PPUSH
17877: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
17881: LD_EXP 37
17885: PUSH
17886: LD_EXP 41
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PPUSH
17895: LD_EXP 32
17899: PPUSH
17900: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
17904: LD_EXP 41
17908: PPUSH
17909: LD_STRING DO-Mem-9
17911: PPUSH
17912: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
17916: LD_EXP 41
17920: PPUSH
17921: LD_STRING DO-Mem-10
17923: PPUSH
17924: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
17928: LD_EXP 41
17932: PPUSH
17933: LD_STRING DO-Mem-11
17935: PPUSH
17936: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
17940: LD_EXP 41
17944: PPUSH
17945: LD_STRING DO-Mem-12
17947: PPUSH
17948: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
17952: LD_EXP 37
17956: PPUSH
17957: LD_STRING DK-Mem-13
17959: PPUSH
17960: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
17964: LD_EXP 37
17968: PPUSH
17969: LD_STRING DK-Mem-14
17971: PPUSH
17972: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
17976: LD_EXP 37
17980: PPUSH
17981: LD_STRING DK-Mem-15
17983: PPUSH
17984: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
17988: LD_EXP 37
17992: PPUSH
17993: LD_STRING DK-Mem-16
17995: PPUSH
17996: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
18000: LD_EXP 37
18004: PPUSH
18005: LD_STRING DK-Mem-17
18007: PPUSH
18008: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
18012: LD_EXP 41
18016: PPUSH
18017: LD_EXP 37
18021: PPUSH
18022: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
18026: LD_EXP 41
18030: PPUSH
18031: LD_STRING DO-Mem-18
18033: PPUSH
18034: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
18038: LD_EXP 37
18042: PPUSH
18043: LD_EXP 41
18047: PPUSH
18048: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
18052: LD_EXP 37
18056: PPUSH
18057: LD_STRING DK-Mem-19
18059: PPUSH
18060: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
18064: LD_EXP 41
18068: PPUSH
18069: LD_INT 214
18071: PPUSH
18072: LD_INT 86
18074: PPUSH
18075: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
18079: LD_EXP 41
18083: PPUSH
18084: LD_EXP 37
18088: PPUSH
18089: CALL_OW 179
// if Givi then
18093: LD_EXP 33
18097: IFFALSE 18128
// begin ComMoveXY ( Givi , 217 , 86 ) ;
18099: LD_EXP 33
18103: PPUSH
18104: LD_INT 217
18106: PPUSH
18107: LD_INT 86
18109: PPUSH
18110: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
18114: LD_EXP 33
18118: PPUSH
18119: LD_EXP 32
18123: PPUSH
18124: CALL_OW 179
// end ; if Kamil then
18128: LD_EXP 36
18132: IFFALSE 18172
// begin ComExit ( Kamil ) ;
18134: LD_EXP 36
18138: PPUSH
18139: CALL 64868 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
18143: LD_EXP 36
18147: PPUSH
18148: LD_INT 212
18150: PPUSH
18151: LD_INT 86
18153: PPUSH
18154: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
18158: LD_EXP 36
18162: PPUSH
18163: LD_EXP 32
18167: PPUSH
18168: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
18172: LD_INT 70
18174: PPUSH
18175: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
18179: LD_EXP 32
18183: PPUSH
18184: LD_STRING DH-Mem-20
18186: PPUSH
18187: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
18191: LD_EXP 41
18195: PPUSH
18196: LD_INT 215
18198: PPUSH
18199: LD_INT 87
18201: PPUSH
18202: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
18206: LD_EXP 41
18210: PPUSH
18211: LD_EXP 37
18215: PPUSH
18216: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
18220: LD_EXP 37
18224: PPUSH
18225: LD_STRING DK-Mem-21
18227: PPUSH
18228: CALL_OW 88
// wait ( 0 0$2 ) ;
18232: LD_INT 70
18234: PPUSH
18235: CALL_OW 67
// end ;
18239: LD_VAR 0 1
18243: RET
// export function SceneWithGiviAndKamil ; begin
18244: LD_INT 0
18246: PPUSH
// if Markov then
18247: LD_EXP 39
18251: IFFALSE 18336
// begin if IsInUnit ( Markov ) then
18253: LD_EXP 39
18257: PPUSH
18258: CALL_OW 310
18262: IFFALSE 18273
// ComExit ( Markov ) ;
18264: LD_EXP 39
18268: PPUSH
18269: CALL 64868 0 1
// wait ( 3 ) ;
18273: LD_INT 3
18275: PPUSH
18276: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
18280: LD_EXP 39
18284: PPUSH
18285: LD_INT 212
18287: PPUSH
18288: LD_INT 88
18290: PPUSH
18291: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18295: LD_INT 35
18297: PPUSH
18298: CALL_OW 67
// until GetDistUnits ( Markov , Heike ) < 6 ;
18302: LD_EXP 39
18306: PPUSH
18307: LD_EXP 32
18311: PPUSH
18312: CALL_OW 296
18316: PUSH
18317: LD_INT 6
18319: LESS
18320: IFFALSE 18295
// AddComTurnUnit ( Markov , Heike ) ;
18322: LD_EXP 39
18326: PPUSH
18327: LD_EXP 32
18331: PPUSH
18332: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
18336: LD_EXP 33
18340: PPUSH
18341: LD_STRING DG-Obj-1
18343: PPUSH
18344: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
18348: LD_EXP 36
18352: PPUSH
18353: LD_STRING DKam-Obj-2
18355: PPUSH
18356: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
18360: LD_EXP 32
18364: PPUSH
18365: LD_EXP 36
18369: PPUSH
18370: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
18374: LD_EXP 36
18378: PPUSH
18379: LD_STRING DKam-Obj-3
18381: PPUSH
18382: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
18386: LD_EXP 39
18390: PPUSH
18391: LD_STRING DMar-Obj-4
18393: PPUSH
18394: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
18398: LD_EXP 36
18402: PPUSH
18403: LD_STRING DKam-Obj-6
18405: PPUSH
18406: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
18410: LD_EXP 36
18414: PPUSH
18415: LD_STRING DKam-Obj-7
18417: PPUSH
18418: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
18422: LD_EXP 36
18426: PPUSH
18427: LD_STRING DKam-Obj-8
18429: PPUSH
18430: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
18434: LD_EXP 32
18438: PPUSH
18439: LD_STRING DH-Obj-9
18441: PPUSH
18442: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
18446: LD_EXP 36
18450: PPUSH
18451: LD_STRING DKam-Obj-10
18453: PPUSH
18454: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
18458: LD_EXP 36
18462: PPUSH
18463: LD_STRING DKam-Obj-11
18465: PPUSH
18466: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
18470: LD_EXP 39
18474: PPUSH
18475: LD_STRING DMar-Obj-12
18477: PPUSH
18478: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
18482: LD_EXP 39
18486: PPUSH
18487: LD_STRING DMar-Obj-13
18489: PPUSH
18490: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
18494: LD_EXP 39
18498: PPUSH
18499: LD_STRING DMar-Obj-14
18501: PPUSH
18502: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
18506: LD_EXP 41
18510: PPUSH
18511: LD_STRING DO-Obj-15
18513: PPUSH
18514: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
18518: LD_EXP 41
18522: PPUSH
18523: LD_STRING DO-Obj-16
18525: PPUSH
18526: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
18530: LD_EXP 32
18534: PPUSH
18535: LD_STRING DH-Obj-17
18537: PPUSH
18538: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
18542: LD_EXP 41
18546: PPUSH
18547: LD_STRING DO-Obj-18
18549: PPUSH
18550: CALL_OW 88
// end ;
18554: LD_VAR 0 1
18558: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
18559: LD_INT 34
18561: PUSH
18562: LD_INT 92
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PPUSH
18569: CALL_OW 69
18573: IFFALSE 18768
18575: GO 18577
18577: DISABLE
18578: LD_INT 0
18580: PPUSH
// begin wait ( 0 0$2 ) ;
18581: LD_INT 70
18583: PPUSH
18584: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
18588: LD_INT 34
18590: PUSH
18591: LD_INT 92
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PPUSH
18598: CALL_OW 69
18602: PPUSH
18603: CALL_OW 87
// DialogueOn ;
18607: CALL_OW 6
// if Markov then
18611: LD_EXP 39
18615: IFFALSE 18643
// begin Say ( Markov , DMar-Grn-1 ) ;
18617: LD_EXP 39
18621: PPUSH
18622: LD_STRING DMar-Grn-1
18624: PPUSH
18625: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
18629: LD_EXP 32
18633: PPUSH
18634: LD_STRING DH-Grn-2
18636: PPUSH
18637: CALL_OW 88
// end else
18641: GO 18742
// if heikeSecondSquad then
18643: LD_EXP 47
18647: IFFALSE 18742
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18649: LD_ADDR_VAR 0 1
18653: PUSH
18654: LD_EXP 47
18658: PUSH
18659: LD_INT 1
18661: PPUSH
18662: LD_EXP 47
18666: PPUSH
18667: CALL_OW 12
18671: ARRAY
18672: ST_TO_ADDR
// case GetSex ( random ) of 1 :
18673: LD_VAR 0 1
18677: PPUSH
18678: CALL_OW 258
18682: PUSH
18683: LD_INT 1
18685: DOUBLE
18686: EQUAL
18687: IFTRUE 18691
18689: GO 18706
18691: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
18692: LD_VAR 0 1
18696: PPUSH
18697: LD_STRING DArm-Grn-1
18699: PPUSH
18700: CALL_OW 88
18704: GO 18730
18706: LD_INT 2
18708: DOUBLE
18709: EQUAL
18710: IFTRUE 18714
18712: GO 18729
18714: POP
// Say ( random , DArf-Grn-1 ) ; end ;
18715: LD_VAR 0 1
18719: PPUSH
18720: LD_STRING DArf-Grn-1
18722: PPUSH
18723: CALL_OW 88
18727: GO 18730
18729: POP
// Say ( Heike , DH-Grn-2 ) ;
18730: LD_EXP 32
18734: PPUSH
18735: LD_STRING DH-Grn-2
18737: PPUSH
18738: CALL_OW 88
// end ; DialogueOff ;
18742: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
18746: LD_STRING MortarConstructed
18748: PPUSH
18749: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
18753: LD_STRING SelfPropelledMortar
18755: PPUSH
18756: CALL_OW 339
// mortarConstructed := true ;
18760: LD_ADDR_EXP 15
18764: PUSH
18765: LD_INT 1
18767: ST_TO_ADDR
// end ;
18768: PPOPN 1
18770: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
18771: LD_INT 2
18773: PPUSH
18774: LD_INT 8
18776: PPUSH
18777: CALL_OW 294
18781: IFFALSE 18924
18783: GO 18785
18785: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
18786: LD_INT 200
18788: PPUSH
18789: LD_INT 162
18791: PPUSH
18792: LD_INT 2
18794: PPUSH
18795: LD_INT 6
18797: NEG
18798: PPUSH
18799: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
18803: LD_INT 200
18805: PPUSH
18806: LD_INT 162
18808: PPUSH
18809: LD_INT 2
18811: PPUSH
18812: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
18816: LD_INT 200
18818: PPUSH
18819: LD_INT 162
18821: PPUSH
18822: CALL_OW 84
// if not IsOk ( Kurt ) then
18826: LD_EXP 43
18830: PPUSH
18831: CALL_OW 302
18835: NOT
18836: IFFALSE 18840
// exit ;
18838: GO 18924
// Say ( Kurt , DKs-Otpst-2-1 ) ;
18840: LD_EXP 43
18844: PPUSH
18845: LD_STRING DKs-Otpst-2-1
18847: PPUSH
18848: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
18852: LD_EXP 37
18856: PPUSH
18857: LD_STRING DK-Otpst-2-2
18859: PPUSH
18860: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
18864: LD_EXP 43
18868: PPUSH
18869: LD_STRING DKs-Otpst-2-3
18871: PPUSH
18872: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
18876: LD_EXP 43
18880: PPUSH
18881: LD_STRING DKs-Otpst-2-4
18883: PPUSH
18884: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
18888: LD_EXP 43
18892: PPUSH
18893: LD_STRING DKs-Otpst-2-5
18895: PPUSH
18896: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
18900: LD_EXP 36
18904: PPUSH
18905: LD_STRING DKam-Otpst-2-6
18907: PPUSH
18908: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
18912: LD_EXP 43
18916: PPUSH
18917: LD_STRING DKs-Otpst-2-7
18919: PPUSH
18920: CALL_OW 88
// end ;
18924: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
18925: LD_INT 8
18927: PPUSH
18928: LD_INT 22
18930: PUSH
18931: LD_INT 3
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 21
18940: PUSH
18941: LD_INT 3
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PPUSH
18952: CALL_OW 70
18956: NOT
18957: PUSH
18958: LD_EXP 3
18962: NOT
18963: AND
18964: IFFALSE 19212
18966: GO 18968
18968: DISABLE
18969: LD_INT 0
18971: PPUSH
// begin outpostDestroyed := true ;
18972: LD_ADDR_EXP 4
18976: PUSH
18977: LD_INT 1
18979: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
18980: LD_INT 22
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 34
18992: PUSH
18993: LD_INT 92
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 92
19002: PUSH
19003: LD_INT 195
19005: PUSH
19006: LD_INT 164
19008: PUSH
19009: LD_INT 12
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: LIST
19022: PPUSH
19023: CALL_OW 69
19027: NOT
19028: IFFALSE 19032
// exit ;
19030: GO 19212
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
19032: LD_EXP 33
19036: PPUSH
19037: CALL_OW 302
19041: NOT
19042: PUSH
19043: LD_EXP 37
19047: PPUSH
19048: CALL_OW 302
19052: NOT
19053: OR
19054: IFFALSE 19058
// exit ;
19056: GO 19212
// Say ( Givi , DG-Otpst-1-1 ) ;
19058: LD_EXP 33
19062: PPUSH
19063: LD_STRING DG-Otpst-1-1
19065: PPUSH
19066: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
19070: LD_EXP 37
19074: PPUSH
19075: LD_STRING DK-Otpst-1-2
19077: PPUSH
19078: CALL_OW 88
// if IsOk ( Markov ) then
19082: LD_EXP 39
19086: PPUSH
19087: CALL_OW 302
19091: IFFALSE 19119
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
19093: LD_EXP 39
19097: PPUSH
19098: LD_STRING DMar-Otpst-1-3
19100: PPUSH
19101: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
19105: LD_EXP 39
19109: PPUSH
19110: LD_STRING DMar-Otpst-1-4
19112: PPUSH
19113: CALL_OW 88
// end else
19117: GO 19200
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
19119: LD_ADDR_VAR 0 1
19123: PUSH
19124: LD_EXP 47
19128: PUSH
19129: LD_INT 1
19131: PPUSH
19132: LD_EXP 47
19136: PPUSH
19137: CALL_OW 12
19141: ARRAY
19142: ST_TO_ADDR
// case GetSex ( random ) of 1 :
19143: LD_VAR 0 1
19147: PPUSH
19148: CALL_OW 258
19152: PUSH
19153: LD_INT 1
19155: DOUBLE
19156: EQUAL
19157: IFTRUE 19161
19159: GO 19176
19161: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
19162: LD_VAR 0 1
19166: PPUSH
19167: LD_STRING DArm-Otpst-1-a-3
19169: PPUSH
19170: CALL_OW 88
19174: GO 19200
19176: LD_INT 2
19178: DOUBLE
19179: EQUAL
19180: IFTRUE 19184
19182: GO 19199
19184: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
19185: LD_VAR 0 1
19189: PPUSH
19190: LD_STRING DArf-Otpst-1-a-3
19192: PPUSH
19193: CALL_OW 88
19197: GO 19200
19199: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
19200: LD_EXP 33
19204: PPUSH
19205: LD_STRING DG-Otpst-1-5
19207: PPUSH
19208: CALL_OW 88
// end ;
19212: PPOPN 1
19214: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
19215: LD_EXP 37
19219: PPUSH
19220: CALL_OW 256
19224: PUSH
19225: LD_INT 10
19227: LESS
19228: IFFALSE 19342
19230: GO 19232
19232: DISABLE
// begin DialogueOn ;
19233: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
19237: LD_EXP 37
19241: PPUSH
19242: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
19246: LD_EXP 37
19250: PPUSH
19251: LD_STRING DK-Dead-1
19253: PPUSH
19254: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
19258: LD_EXP 32
19262: PPUSH
19263: LD_STRING DH-Dead-2
19265: PPUSH
19266: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
19270: LD_EXP 37
19274: PPUSH
19275: LD_STRING DK-Dead-3
19277: PPUSH
19278: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
19282: LD_EXP 32
19286: PPUSH
19287: LD_STRING DH-Dead-4
19289: PPUSH
19290: CALL_OW 88
// if IsOk ( Mike ) then
19294: LD_EXP 34
19298: PPUSH
19299: CALL_OW 302
19303: IFFALSE 19329
// begin Say ( Mike , DM-Dead-5 ) ;
19305: LD_EXP 34
19309: PPUSH
19310: LD_STRING DM-Dead-5
19312: PPUSH
19313: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
19317: LD_EXP 32
19321: PPUSH
19322: LD_STRING DH-Dead-6
19324: PPUSH
19325: CALL_OW 88
// end ; DialogueOff ;
19329: CALL_OW 7
// KillUnit ( Kaia ) ;
19333: LD_EXP 37
19337: PPUSH
19338: CALL_OW 66
// end ;
19342: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
19343: LD_OWVAR 1
19347: PUSH
19348: LD_INT 31500
19350: GREATEREQUAL
19351: PUSH
19352: LD_EXP 5
19356: PUSH
19357: LD_INT 5
19359: GREATER
19360: OR
19361: PUSH
19362: LD_INT 22
19364: PUSH
19365: LD_INT 2
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 92
19374: PUSH
19375: LD_INT 103
19377: PUSH
19378: LD_INT 81
19380: PUSH
19381: LD_INT 20
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PPUSH
19394: CALL_OW 69
19398: OR
19399: IFFALSE 19806
19401: GO 19403
19403: DISABLE
19404: LD_INT 0
19406: PPUSH
19407: PPUSH
19408: PPUSH
// begin PrepareRolfSquad ;
19409: CALL 3304 0 0
// dep := HexInfo ( 86 , 54 ) ;
19413: LD_ADDR_VAR 0 3
19417: PUSH
19418: LD_INT 86
19420: PPUSH
19421: LD_INT 54
19423: PPUSH
19424: CALL_OW 428
19428: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
19429: LD_VAR 0 3
19433: PPUSH
19434: CALL_OW 274
19438: PPUSH
19439: LD_INT 1
19441: PPUSH
19442: LD_INT 300
19444: PPUSH
19445: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
19449: LD_VAR 0 3
19453: PPUSH
19454: CALL_OW 274
19458: PPUSH
19459: LD_INT 2
19461: PPUSH
19462: LD_INT 300
19464: PPUSH
19465: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
19469: LD_EXP 49
19473: PPUSH
19474: LD_INT 79
19476: PPUSH
19477: LD_INT 52
19479: PPUSH
19480: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
19484: LD_INT 35
19486: PPUSH
19487: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
19491: LD_INT 12
19493: PPUSH
19494: LD_INT 22
19496: PUSH
19497: LD_INT 3
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 21
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PPUSH
19518: CALL_OW 70
19522: NOT
19523: IFFALSE 19484
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
19525: LD_ADDR_VAR 0 2
19529: PUSH
19530: LD_INT 12
19532: PPUSH
19533: LD_INT 21
19535: PUSH
19536: LD_INT 3
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PPUSH
19543: CALL_OW 70
19547: ST_TO_ADDR
// for i in tmp do
19548: LD_ADDR_VAR 0 1
19552: PUSH
19553: LD_VAR 0 2
19557: PUSH
19558: FOR_IN
19559: IFFALSE 19575
// SetSide ( i , 8 ) ;
19561: LD_VAR 0 1
19565: PPUSH
19566: LD_INT 8
19568: PPUSH
19569: CALL_OW 235
19573: GO 19558
19575: POP
19576: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
19577: LD_INT 63
19579: PPUSH
19580: LD_INT 42
19582: PPUSH
19583: CALL_OW 428
19587: PPUSH
19588: LD_INT 320
19590: PPUSH
19591: CALL_OW 234
// wait ( 0 0$10 ) ;
19595: LD_INT 350
19597: PPUSH
19598: CALL_OW 67
// DialogueOn ;
19602: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
19606: LD_INT 8
19608: PPUSH
19609: LD_INT 2
19611: PPUSH
19612: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
19616: LD_INT 86
19618: PPUSH
19619: LD_INT 54
19621: PPUSH
19622: CALL_OW 428
19626: PPUSH
19627: LD_STRING antwerp
19629: PPUSH
19630: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
19634: LD_EXP 45
19638: PPUSH
19639: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
19643: LD_EXP 45
19647: PPUSH
19648: LD_STRING DRf-rast-1
19650: PPUSH
19651: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
19655: LD_EXP 32
19659: PPUSH
19660: LD_STRING DH-rast-2
19662: PPUSH
19663: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
19667: LD_EXP 45
19671: PPUSH
19672: LD_STRING DRf-rast-3
19674: PPUSH
19675: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
19679: LD_EXP 45
19683: PPUSH
19684: LD_STRING DRf-rast-4
19686: PPUSH
19687: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
19691: LD_EXP 45
19695: PPUSH
19696: LD_STRING DRf-rast-5
19698: PPUSH
19699: CALL_OW 94
// if IsOk ( Aviradze ) then
19703: LD_EXP 44
19707: PPUSH
19708: CALL_OW 302
19712: IFFALSE 19771
// begin CenterNowOnUnits ( Aviradze ) ;
19714: LD_EXP 44
19718: PPUSH
19719: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
19723: LD_EXP 44
19727: PPUSH
19728: LD_STRING DA-rast-6
19730: PPUSH
19731: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
19735: LD_EXP 32
19739: PPUSH
19740: LD_STRING DH-rast-7
19742: PPUSH
19743: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
19747: LD_EXP 33
19751: PPUSH
19752: LD_STRING DG-rast-8
19754: PPUSH
19755: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
19759: LD_EXP 33
19763: PPUSH
19764: LD_STRING DG-rast-9
19766: PPUSH
19767: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
19771: LD_EXP 32
19775: PPUSH
19776: LD_STRING DH-rast-10
19778: PPUSH
19779: CALL_OW 88
// DialogueOff ;
19783: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
19787: LD_STRING M2
19789: PPUSH
19790: CALL_OW 337
// bergkampfArrived := true ;
19794: LD_ADDR_EXP 3
19798: PUSH
19799: LD_INT 1
19801: ST_TO_ADDR
// PrepareRolfBase ;
19802: CALL 3635 0 0
// end ;
19806: PPOPN 3
19808: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
19809: LD_INT 12
19811: PPUSH
19812: LD_INT 22
19814: PUSH
19815: LD_INT 2
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PPUSH
19822: CALL_OW 70
19826: PUSH
19827: LD_EXP 45
19831: PPUSH
19832: CALL_OW 302
19836: AND
19837: PUSH
19838: LD_EXP 29
19842: AND
19843: IFFALSE 20403
19845: GO 19847
19847: DISABLE
19848: LD_INT 0
19850: PPUSH
// begin rolfScriptBase := false ;
19851: LD_ADDR_EXP 9
19855: PUSH
19856: LD_INT 0
19858: ST_TO_ADDR
// DialogueOn ;
19859: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
19863: LD_EXP 45
19867: PPUSH
19868: CALL_OW 87
// if rolfSquad >= 10 then
19872: LD_EXP 49
19876: PUSH
19877: LD_INT 10
19879: GREATEREQUAL
19880: IFFALSE 20059
// begin linkedWithRolf := 2 ;
19882: LD_ADDR_EXP 12
19886: PUSH
19887: LD_INT 2
19889: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
19890: LD_EXP 45
19894: PPUSH
19895: LD_STRING DRf-rast-11
19897: PPUSH
19898: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
19902: LD_EXP 32
19906: PPUSH
19907: LD_STRING DH-rast-12
19909: PPUSH
19910: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
19914: LD_EXP 45
19918: PPUSH
19919: LD_STRING DRf-rast-13
19921: PPUSH
19922: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
19926: LD_EXP 32
19930: PPUSH
19931: LD_STRING DH-rast-14
19933: PPUSH
19934: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
19938: LD_EXP 45
19942: PPUSH
19943: LD_STRING DRf-rast-15
19945: PPUSH
19946: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
19950: LD_EXP 32
19954: PPUSH
19955: LD_STRING DH-rast-16
19957: PPUSH
19958: CALL_OW 88
// if IsOk ( Mike ) then
19962: LD_EXP 34
19966: PPUSH
19967: CALL_OW 302
19971: IFFALSE 20045
// begin Say ( Mike , DM-rast-17 ) ;
19973: LD_EXP 34
19977: PPUSH
19978: LD_STRING DM-rast-17
19980: PPUSH
19981: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
19985: LD_EXP 32
19989: PPUSH
19990: LD_STRING DH-rast-18
19992: PPUSH
19993: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
19997: LD_EXP 34
20001: PPUSH
20002: LD_STRING DM-rast-19
20004: PPUSH
20005: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
20009: LD_EXP 32
20013: PPUSH
20014: LD_STRING DH-rast-20
20016: PPUSH
20017: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
20021: LD_EXP 34
20025: PPUSH
20026: LD_STRING DM-rast-21
20028: PPUSH
20029: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
20033: LD_EXP 32
20037: PPUSH
20038: LD_STRING DH-rast-22
20040: PPUSH
20041: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
20045: LD_EXP 32
20049: PPUSH
20050: LD_STRING DH-rast-23
20052: PPUSH
20053: CALL_OW 88
// end else
20057: GO 20209
// begin linkedWithRolf := 1 ;
20059: LD_ADDR_EXP 12
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
20067: LD_EXP 45
20071: PPUSH
20072: LD_STRING DRf-rast-a-11
20074: PPUSH
20075: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
20079: LD_EXP 32
20083: PPUSH
20084: LD_STRING DH-rast-a-12
20086: PPUSH
20087: CALL_OW 88
// if IsOk ( Kurt ) then
20091: LD_EXP 43
20095: PPUSH
20096: CALL_OW 302
20100: IFFALSE 20197
// begin Say ( Kurt , DKs-rast-a-13 ) ;
20102: LD_EXP 43
20106: PPUSH
20107: LD_STRING DKs-rast-a-13
20109: PPUSH
20110: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
20114: LD_EXP 45
20118: PPUSH
20119: LD_STRING DRf-rast-a-14
20121: PPUSH
20122: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
20126: LD_EXP 45
20130: PPUSH
20131: LD_STRING DRf-rast-a-15
20133: PPUSH
20134: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
20138: LD_EXP 43
20142: PPUSH
20143: LD_STRING DKs-rast-a-16
20145: PPUSH
20146: CALL_OW 88
// if IsOk ( Givi ) then
20150: LD_EXP 33
20154: PPUSH
20155: CALL_OW 302
20159: IFFALSE 20197
// begin Say ( Givi , DG-rast-a-17 ) ;
20161: LD_EXP 33
20165: PPUSH
20166: LD_STRING DG-rast-a-17
20168: PPUSH
20169: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
20173: LD_EXP 33
20177: PPUSH
20178: LD_STRING DG-rast-a-18
20180: PPUSH
20181: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
20185: LD_EXP 43
20189: PPUSH
20190: LD_STRING DKs-rast-a-19
20192: PPUSH
20193: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
20197: LD_EXP 32
20201: PPUSH
20202: LD_STRING DH-rast-a-20
20204: PPUSH
20205: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
20209: LD_EXP 45
20213: PPUSH
20214: LD_STRING DRf-rast-24
20216: PPUSH
20217: CALL_OW 88
// if IsOk ( Aviradze ) then
20221: LD_EXP 44
20225: PPUSH
20226: CALL_OW 302
20230: IFFALSE 20330
// begin Say ( Aviradze , DA-rast-25 ) ;
20232: LD_EXP 44
20236: PPUSH
20237: LD_STRING DA-rast-25
20239: PPUSH
20240: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
20244: LD_EXP 32
20248: PPUSH
20249: LD_STRING DH-rast-26
20251: PPUSH
20252: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
20256: LD_EXP 44
20260: PPUSH
20261: LD_STRING DA-rast-27
20263: PPUSH
20264: CALL_OW 88
// if IsOk ( Markov ) then
20268: LD_EXP 39
20272: PPUSH
20273: CALL_OW 302
20277: IFFALSE 20305
// begin Say ( Markov , DMar-rast-28 ) ;
20279: LD_EXP 39
20283: PPUSH
20284: LD_STRING DMar-rast-28
20286: PPUSH
20287: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
20291: LD_EXP 39
20295: PPUSH
20296: LD_STRING DMar-rast-29
20298: PPUSH
20299: CALL_OW 88
// end else
20303: GO 20328
// if IsOk ( Sophia ) then
20305: LD_EXP 38
20309: PPUSH
20310: CALL_OW 302
20314: IFFALSE 20328
// begin Say ( Sophia , DS-rast-28 ) ;
20316: LD_EXP 38
20320: PPUSH
20321: LD_STRING DS-rast-28
20323: PPUSH
20324: CALL_OW 88
// end ; end else
20328: GO 20353
// if IsOk ( Sophia ) then
20330: LD_EXP 38
20334: PPUSH
20335: CALL_OW 302
20339: IFFALSE 20353
// Say ( Sophia , DS-rast-29 ) ;
20341: LD_EXP 38
20345: PPUSH
20346: LD_STRING DS-rast-29
20348: PPUSH
20349: CALL_OW 88
// DialogueOff ;
20353: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
20357: LD_STRING M3
20359: PPUSH
20360: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
20364: LD_ADDR_VAR 0 1
20368: PUSH
20369: LD_INT 22
20371: PUSH
20372: LD_INT 8
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PPUSH
20379: CALL_OW 69
20383: PUSH
20384: FOR_IN
20385: IFFALSE 20401
// SetSide ( i , 2 ) ;
20387: LD_VAR 0 1
20391: PPUSH
20392: LD_INT 2
20394: PPUSH
20395: CALL_OW 235
20399: GO 20384
20401: POP
20402: POP
// end ;
20403: PPOPN 1
20405: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
20406: LD_EXP 23
20410: PUSH
20411: LD_EXP 12
20415: NOT
20416: AND
20417: PUSH
20418: LD_EXP 29
20422: AND
20423: IFFALSE 20514
20425: GO 20427
20427: DISABLE
20428: LD_INT 0
20430: PPUSH
// begin canRolfJoin := false ;
20431: LD_ADDR_EXP 29
20435: PUSH
20436: LD_INT 0
20438: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
20439: LD_STRING M3
20441: PPUSH
20442: CALL_OW 337
// for i in rolfSquad do
20446: LD_ADDR_VAR 0 1
20450: PUSH
20451: LD_EXP 49
20455: PUSH
20456: FOR_IN
20457: IFFALSE 20512
// begin ComExit ( i ) ;
20459: LD_VAR 0 1
20463: PPUSH
20464: CALL 64868 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
20468: LD_VAR 0 1
20472: PPUSH
20473: LD_INT 147
20475: PPUSH
20476: LD_INT 162
20478: PPUSH
20479: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
20483: LD_VAR 0 1
20487: PPUSH
20488: LD_INT 1050
20490: PPUSH
20491: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
20495: LD_VAR 0 1
20499: PPUSH
20500: LD_INT 103
20502: PPUSH
20503: LD_INT 162
20505: PPUSH
20506: CALL_OW 174
// end ;
20510: GO 20456
20512: POP
20513: POP
// end ;
20514: PPOPN 1
20516: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
20517: LD_EXP 3
20521: PUSH
20522: LD_EXP 45
20526: PPUSH
20527: CALL_OW 256
20531: PUSH
20532: LD_INT 400
20534: LESS
20535: AND
20536: PUSH
20537: LD_EXP 12
20541: NOT
20542: AND
20543: PUSH
20544: LD_EXP 29
20548: AND
20549: IFFALSE 20823
20551: GO 20553
20553: DISABLE
20554: LD_INT 0
20556: PPUSH
// begin DialogueOn ;
20557: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
20561: LD_EXP 45
20565: PPUSH
20566: LD_STRING DRf-rast-f-11
20568: PPUSH
20569: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
20573: LD_EXP 45
20577: PPUSH
20578: LD_STRING DRf-rast-f-12
20580: PPUSH
20581: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
20585: LD_EXP 45
20589: PPUSH
20590: LD_STRING DRf-rast-f-13
20592: PPUSH
20593: CALL_OW 94
// DialogueOff ;
20597: CALL_OW 7
// KillUnit ( Rolf ) ;
20601: LD_EXP 45
20605: PPUSH
20606: CALL_OW 66
// wait ( 0 0$1 ) ;
20610: LD_INT 35
20612: PPUSH
20613: CALL_OW 67
// if not IsOk ( Givi ) then
20617: LD_EXP 33
20621: PPUSH
20622: CALL_OW 302
20626: NOT
20627: IFFALSE 20631
// exit ;
20629: GO 20823
// DialogueOn ;
20631: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
20635: LD_EXP 33
20639: PPUSH
20640: LD_STRING DG-rast-f-14
20642: PPUSH
20643: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
20647: LD_EXP 33
20651: PPUSH
20652: LD_STRING DG-rast-f-15
20654: PPUSH
20655: CALL_OW 88
// if IsOk ( Kaia ) then
20659: LD_EXP 37
20663: PPUSH
20664: CALL_OW 302
20668: IFFALSE 20684
// Say ( Kaia , DK-rast-f-16 ) else
20670: LD_EXP 37
20674: PPUSH
20675: LD_STRING DK-rast-f-16
20677: PPUSH
20678: CALL_OW 88
20682: GO 20771
// if heikeSecondSquad then
20684: LD_EXP 47
20688: IFFALSE 20771
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20690: LD_ADDR_VAR 0 1
20694: PUSH
20695: LD_EXP 47
20699: PUSH
20700: LD_INT 1
20702: PPUSH
20703: LD_EXP 47
20707: PPUSH
20708: CALL_OW 12
20712: ARRAY
20713: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20714: LD_VAR 0 1
20718: PPUSH
20719: CALL_OW 258
20723: PUSH
20724: LD_INT 1
20726: DOUBLE
20727: EQUAL
20728: IFTRUE 20732
20730: GO 20747
20732: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
20733: LD_VAR 0 1
20737: PPUSH
20738: LD_STRING DArm-rast-f-a-16
20740: PPUSH
20741: CALL_OW 88
20745: GO 20771
20747: LD_INT 2
20749: DOUBLE
20750: EQUAL
20751: IFTRUE 20755
20753: GO 20770
20755: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
20756: LD_VAR 0 1
20760: PPUSH
20761: LD_STRING DArf-rast-f-a-16
20763: PPUSH
20764: CALL_OW 88
20768: GO 20771
20770: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
20771: LD_EXP 33
20775: PPUSH
20776: LD_STRING DG-rast-f-17
20778: PPUSH
20779: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
20783: LD_EXP 33
20787: PPUSH
20788: LD_STRING DG-rast-f-18
20790: PPUSH
20791: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
20795: LD_EXP 33
20799: PPUSH
20800: LD_STRING DG-rast-f-19
20802: PPUSH
20803: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
20807: LD_EXP 33
20811: PPUSH
20812: LD_STRING DG-rast-f-20
20814: PPUSH
20815: CALL_OW 88
// DialogueOff ;
20819: CALL_OW 7
// end ;
20823: PPOPN 1
20825: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
20826: LD_EXP 31
20830: PUSH
20831: LD_INT 2
20833: PPUSH
20834: LD_INT 10
20836: PPUSH
20837: CALL_OW 294
20841: AND
20842: IFFALSE 20915
20844: GO 20846
20846: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
20847: LD_EXP 33
20851: PPUSH
20852: LD_STRING DG-Len-1
20854: PPUSH
20855: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
20859: LD_EXP 43
20863: PPUSH
20864: LD_STRING DKs-Len-2
20866: PPUSH
20867: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
20871: LD_EXP 43
20875: PPUSH
20876: LD_STRING DKs-Len-3
20878: PPUSH
20879: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
20883: LD_EXP 32
20887: PPUSH
20888: LD_STRING DH-Len-4
20890: PPUSH
20891: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
20895: LD_EXP 37
20899: PPUSH
20900: LD_STRING DK-Len-5
20902: PPUSH
20903: CALL_OW 88
// leninSpotted := true ;
20907: LD_ADDR_EXP 14
20911: PUSH
20912: LD_INT 1
20914: ST_TO_ADDR
// end ;
20915: END
// every 0 0$1 trigger bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] do var i , tmp , inOmarBase , heikeNearbyOmar ;
20916: LD_EXP 3
20920: PUSH
20921: LD_OWVAR 1
20925: PUSH
20926: LD_INT 67200
20928: PUSH
20929: LD_INT 63000
20931: PUSH
20932: LD_INT 52500
20934: PUSH
20935: LD_INT 46200
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: PUSH
20944: LD_OWVAR 67
20948: ARRAY
20949: GREATER
20950: AND
20951: IFFALSE 21645
20953: GO 20955
20955: DISABLE
20956: LD_INT 0
20958: PPUSH
20959: PPUSH
20960: PPUSH
20961: PPUSH
// begin PrepareOmarSquad ;
20962: CALL 4917 0 0
// repeat wait ( 0 0$1 ) ;
20966: LD_INT 35
20968: PPUSH
20969: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
20973: LD_INT 14
20975: PPUSH
20976: LD_INT 22
20978: PUSH
20979: LD_INT 3
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: LD_INT 21
20991: PUSH
20992: LD_INT 1
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 59
21001: PUSH
21002: EMPTY
21003: LIST
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PPUSH
21014: CALL_OW 70
21018: NOT
21019: IFFALSE 20966
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
21021: LD_ADDR_VAR 0 2
21025: PUSH
21026: LD_INT 14
21028: PPUSH
21029: LD_INT 22
21031: PUSH
21032: LD_INT 2
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PPUSH
21039: CALL_OW 70
21043: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
21044: LD_ADDR_VAR 0 3
21048: PUSH
21049: LD_VAR 0 2
21053: PUSH
21054: LD_INT 0
21056: GREATER
21057: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
21058: LD_ADDR_VAR 0 4
21062: PUSH
21063: LD_EXP 32
21067: PPUSH
21068: LD_INT 14
21070: PPUSH
21071: CALL_OW 308
21075: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
21076: LD_VAR 0 2
21080: PPUSH
21081: LD_INT 21
21083: PUSH
21084: LD_INT 3
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PPUSH
21091: CALL_OW 72
21095: IFFALSE 21200
// begin if heikeNearbyOmar then
21097: LD_VAR 0 4
21101: IFFALSE 21117
// Say ( Omar , DOm-Base-1b ) else
21103: LD_EXP 42
21107: PPUSH
21108: LD_STRING DOm-Base-1b
21110: PPUSH
21111: CALL_OW 88
21115: GO 21129
// SayRadio ( Omar , DOm-Base-1br ) ;
21117: LD_EXP 42
21121: PPUSH
21122: LD_STRING DOm-Base-1br
21124: PPUSH
21125: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
21129: LD_ADDR_VAR 0 1
21133: PUSH
21134: LD_VAR 0 2
21138: PPUSH
21139: LD_INT 21
21141: PUSH
21142: LD_INT 3
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PPUSH
21149: CALL_OW 72
21153: PUSH
21154: FOR_IN
21155: IFFALSE 21196
// begin if UnitsInside ( i ) then
21157: LD_VAR 0 1
21161: PPUSH
21162: CALL_OW 313
21166: IFFALSE 21182
// ComExitBuilding ( UnitsInside ( i ) ) ;
21168: LD_VAR 0 1
21172: PPUSH
21173: CALL_OW 313
21177: PPUSH
21178: CALL_OW 122
// SetSide ( i , 5 ) ;
21182: LD_VAR 0 1
21186: PPUSH
21187: LD_INT 5
21189: PPUSH
21190: CALL_OW 235
// end ;
21194: GO 21154
21196: POP
21197: POP
// end else
21198: GO 21287
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
21200: LD_VAR 0 2
21204: PPUSH
21205: LD_INT 21
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PPUSH
21215: CALL_OW 72
21219: IFFALSE 21255
// begin if heikeNearbyOmar then
21221: LD_VAR 0 4
21225: IFFALSE 21241
// Say ( Omar , DOm-Base-1v ) else
21227: LD_EXP 42
21231: PPUSH
21232: LD_STRING DOm-Base-1v
21234: PPUSH
21235: CALL_OW 88
21239: GO 21253
// SayRadio ( Omar , DOm-Base-1vr ) end else
21241: LD_EXP 42
21245: PPUSH
21246: LD_STRING DOm-Base-1vr
21248: PPUSH
21249: CALL_OW 94
21253: GO 21287
// begin if heikeNearbyOmar then
21255: LD_VAR 0 4
21259: IFFALSE 21275
// Say ( Omar , DOm-Base-1h ) else
21261: LD_EXP 42
21265: PPUSH
21266: LD_STRING DOm-Base-1h
21268: PPUSH
21269: CALL_OW 88
21273: GO 21287
// SayRadio ( Omar , DOm-Base-1hr ) end ;
21275: LD_EXP 42
21279: PPUSH
21280: LD_STRING DOm-Base-1hr
21282: PPUSH
21283: CALL_OW 94
// for i in omarSquad do
21287: LD_ADDR_VAR 0 1
21291: PUSH
21292: LD_EXP 50
21296: PUSH
21297: FOR_IN
21298: IFFALSE 21329
// if GetLives ( i ) < 750 then
21300: LD_VAR 0 1
21304: PPUSH
21305: CALL_OW 256
21309: PUSH
21310: LD_INT 750
21312: LESS
21313: IFFALSE 21327
// SetLives ( i , 1000 ) ;
21315: LD_VAR 0 1
21319: PPUSH
21320: LD_INT 1000
21322: PPUSH
21323: CALL_OW 234
21327: GO 21297
21329: POP
21330: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
21331: LD_ADDR_VAR 0 1
21335: PUSH
21336: LD_INT 14
21338: PPUSH
21339: LD_INT 21
21341: PUSH
21342: LD_INT 3
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PPUSH
21349: CALL_OW 70
21353: PUSH
21354: FOR_IN
21355: IFFALSE 21371
// SetSide ( i , 5 ) ;
21357: LD_VAR 0 1
21361: PPUSH
21362: LD_INT 5
21364: PPUSH
21365: CALL_OW 235
21369: GO 21354
21371: POP
21372: POP
// wait ( 0 0$3 ) ;
21373: LD_INT 105
21375: PPUSH
21376: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
21380: LD_INT 5
21382: PPUSH
21383: LD_INT 2
21385: PPUSH
21386: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
21390: LD_EXP 42
21394: PPUSH
21395: CALL_OW 87
// DialogueOn ;
21399: CALL_OW 6
// if heikeNearbyOmar then
21403: LD_VAR 0 4
21407: IFFALSE 21465
// begin Say ( Omar , DOm-Veh-1a ) ;
21409: LD_EXP 42
21413: PPUSH
21414: LD_STRING DOm-Veh-1a
21416: PPUSH
21417: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
21421: LD_EXP 42
21425: PPUSH
21426: LD_STRING DOm-Veh-2a
21428: PPUSH
21429: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
21433: LD_EXP 42
21437: PPUSH
21438: LD_STRING DOm-Veh-3a
21440: PPUSH
21441: CALL_OW 88
// if mortarConstructed then
21445: LD_EXP 15
21449: IFFALSE 21463
// Say ( Omar , DOm-Veh-4a ) ;
21451: LD_EXP 42
21455: PPUSH
21456: LD_STRING DOm-Veh-4a
21458: PPUSH
21459: CALL_OW 88
// end else
21463: GO 21519
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
21465: LD_EXP 42
21469: PPUSH
21470: LD_STRING DOm-Veh-1
21472: PPUSH
21473: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
21477: LD_EXP 42
21481: PPUSH
21482: LD_STRING DOm-Veh-2
21484: PPUSH
21485: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
21489: LD_EXP 42
21493: PPUSH
21494: LD_STRING DOm-Veh-3
21496: PPUSH
21497: CALL_OW 94
// if mortarConstructed then
21501: LD_EXP 15
21505: IFFALSE 21519
// SayRadio ( Omar , DOm-Veh-4 ) ;
21507: LD_EXP 42
21511: PPUSH
21512: LD_STRING DOm-Veh-4
21514: PPUSH
21515: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
21519: LD_EXP 32
21523: PPUSH
21524: LD_STRING DH-Veh-5
21526: PPUSH
21527: CALL_OW 88
// if IsOk ( Kurt ) then
21531: LD_EXP 43
21535: PPUSH
21536: CALL_OW 302
21540: IFFALSE 21590
// begin Say ( Kurt , DKs-Veh-6 ) ;
21542: LD_EXP 43
21546: PPUSH
21547: LD_STRING DKs-Veh-6
21549: PPUSH
21550: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
21554: LD_EXP 43
21558: PPUSH
21559: LD_STRING DKs-Veh-7
21561: PPUSH
21562: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
21566: LD_EXP 33
21570: PPUSH
21571: LD_STRING DG-Veh-8
21573: PPUSH
21574: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
21578: LD_EXP 34
21582: PPUSH
21583: LD_STRING DM-Veh-9
21585: PPUSH
21586: CALL_OW 88
// end ; DialogueOff ;
21590: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
21594: LD_STRING M4
21596: PPUSH
21597: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
21601: LD_EXP 42
21605: PPUSH
21606: LD_INT 341
21608: PPUSH
21609: LD_INT 232
21611: PPUSH
21612: CALL_OW 428
21616: PPUSH
21617: CALL_OW 120
// omarArrived := true ;
21621: LD_ADDR_EXP 6
21625: PUSH
21626: LD_INT 1
21628: ST_TO_ADDR
// omarScriptBase := true ;
21629: LD_ADDR_EXP 10
21633: PUSH
21634: LD_INT 1
21636: ST_TO_ADDR
// omarWantVehicles := true ;
21637: LD_ADDR_EXP 18
21641: PUSH
21642: LD_INT 1
21644: ST_TO_ADDR
// end ;
21645: PPOPN 4
21647: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
21648: LD_INT 10
21650: PPUSH
21651: LD_INT 22
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PPUSH
21661: CALL_OW 70
21665: PUSH
21666: LD_EXP 6
21670: AND
21671: PUSH
21672: LD_EXP 42
21676: PPUSH
21677: CALL_OW 302
21681: AND
21682: PUSH
21683: LD_EXP 23
21687: NOT
21688: AND
21689: IFFALSE 21706
21691: GO 21693
21693: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
21694: LD_EXP 42
21698: PPUSH
21699: LD_STRING DOm-Lenin
21701: PPUSH
21702: CALL_OW 94
21706: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
21707: LD_EXP 45
21711: PPUSH
21712: CALL_OW 302
21716: PUSH
21717: LD_EXP 12
21721: AND
21722: PUSH
21723: LD_EXP 6
21727: AND
21728: IFFALSE 21832
21730: GO 21732
21732: DISABLE
// begin wait ( 0 0$20 ) ;
21733: LD_INT 700
21735: PPUSH
21736: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
21740: LD_EXP 45
21744: PPUSH
21745: CALL_OW 87
// DialogueOn ;
21749: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
21753: LD_EXP 45
21757: PPUSH
21758: LD_STRING DRf-Veh-10
21760: PPUSH
21761: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
21765: LD_EXP 45
21769: PPUSH
21770: LD_STRING DRf-Veh-11
21772: PPUSH
21773: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
21777: LD_EXP 32
21781: PPUSH
21782: LD_STRING DH-Veh-12
21784: PPUSH
21785: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
21789: LD_EXP 32
21793: PPUSH
21794: LD_STRING DH-Veh-13
21796: PPUSH
21797: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
21801: LD_EXP 45
21805: PPUSH
21806: LD_STRING DRf-Veh-14
21808: PPUSH
21809: CALL_OW 88
// DialogueOff ;
21813: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
21817: LD_STRING M5
21819: PPUSH
21820: CALL_OW 337
// rolfWantVehicles := true ;
21824: LD_ADDR_EXP 17
21828: PUSH
21829: LD_INT 1
21831: ST_TO_ADDR
// end ;
21832: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
21833: LD_EXP 18
21837: IFFALSE 22536
21839: GO 21841
21841: DISABLE
21842: LD_INT 0
21844: PPUSH
21845: PPUSH
21846: PPUSH
21847: PPUSH
21848: PPUSH
21849: PPUSH
// begin wait ( 0 0$3 ) ;
21850: LD_INT 105
21852: PPUSH
21853: CALL_OW 67
// Hint ( OmarVehicles ) ;
21857: LD_STRING OmarVehicles
21859: PPUSH
21860: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
21864: LD_INT 16
21866: PPUSH
21867: LD_INT 1
21869: PPUSH
21870: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
21874: LD_INT 35
21876: PPUSH
21877: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
21881: LD_ADDR_EXP 20
21885: PUSH
21886: LD_EXP 20
21890: PUSH
21891: LD_INT 35
21893: MINUS
21894: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
21895: LD_EXP 20
21899: PUSH
21900: LD_INT 0
21902: LESSEQUAL
21903: IFFALSE 22003
// begin display_strings := [ ] ;
21905: LD_ADDR_OWVAR 47
21909: PUSH
21910: EMPTY
21911: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
21912: LD_STRING M4a
21914: PPUSH
21915: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
21919: LD_INT 16
21921: PPUSH
21922: LD_INT 0
21924: PPUSH
21925: CALL_OW 424
// DialogueOn ;
21929: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
21933: LD_EXP 42
21937: PPUSH
21938: LD_STRING DOm-Veh-b-15
21940: PPUSH
21941: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
21945: LD_EXP 32
21949: PPUSH
21950: LD_STRING DH-Veh-b-16
21952: PPUSH
21953: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
21957: LD_EXP 42
21961: PPUSH
21962: LD_STRING DOm-Veh-b-17
21964: PPUSH
21965: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
21969: LD_EXP 37
21973: PPUSH
21974: LD_STRING DK-Veh-b-18
21976: PPUSH
21977: CALL_OW 88
// DialogueOff ;
21981: CALL_OW 7
// omarAttack := true ;
21985: LD_ADDR_EXP 23
21989: PUSH
21990: LD_INT 1
21992: ST_TO_ADDR
// omarScriptBase := false ;
21993: LD_ADDR_EXP 10
21997: PUSH
21998: LD_INT 0
22000: ST_TO_ADDR
// exit ;
22001: GO 22536
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
22003: LD_EXP 21
22007: PUSH
22008: LD_INT 16
22010: PPUSH
22011: LD_INT 22
22013: PUSH
22014: LD_INT 2
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 21
22023: PUSH
22024: LD_INT 2
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 33
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 58
22043: PUSH
22044: EMPTY
22045: LIST
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: PPUSH
22053: CALL_OW 70
22057: LESSEQUAL
22058: IFFALSE 21874
// omarWaitingForVehiclesTimer := 0 0$00 ;
22060: LD_ADDR_EXP 20
22064: PUSH
22065: LD_INT 0
22067: ST_TO_ADDR
// display_strings := [ ] ;
22068: LD_ADDR_OWVAR 47
22072: PUSH
22073: EMPTY
22074: ST_TO_ADDR
// DialogueOn ;
22075: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
22079: LD_EXP 42
22083: PPUSH
22084: LD_STRING DOm-Veh-a-15
22086: PPUSH
22087: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
22091: LD_EXP 37
22095: PPUSH
22096: LD_STRING DK-Veh-a-16
22098: PPUSH
22099: CALL_OW 88
// DialogueOff ;
22103: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
22107: LD_STRING M4a
22109: PPUSH
22110: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
22114: LD_INT 16
22116: PPUSH
22117: LD_INT 0
22119: PPUSH
22120: CALL_OW 424
// omarHasVehicles := true ;
22124: LD_ADDR_EXP 22
22128: PUSH
22129: LD_INT 1
22131: ST_TO_ADDR
// wait ( 1 1$00 ) ;
22132: LD_INT 2100
22134: PPUSH
22135: CALL_OW 67
// omarAttack := true ;
22139: LD_ADDR_EXP 23
22143: PUSH
22144: LD_INT 1
22146: ST_TO_ADDR
// omarScriptBase := false ;
22147: LD_ADDR_EXP 10
22151: PUSH
22152: LD_INT 0
22154: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
22155: LD_ADDR_VAR 0 2
22159: PUSH
22160: LD_INT 16
22162: PPUSH
22163: LD_INT 22
22165: PUSH
22166: LD_INT 2
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 21
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 33
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 58
22195: PUSH
22196: EMPTY
22197: LIST
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: PPUSH
22205: CALL_OW 70
22209: ST_TO_ADDR
// for i in tmp do
22210: LD_ADDR_VAR 0 1
22214: PUSH
22215: LD_VAR 0 2
22219: PUSH
22220: FOR_IN
22221: IFFALSE 22249
// begin SetFuel ( i , 100 ) ;
22223: LD_VAR 0 1
22227: PPUSH
22228: LD_INT 100
22230: PPUSH
22231: CALL_OW 240
// SetSide ( i , 5 ) ;
22235: LD_VAR 0 1
22239: PPUSH
22240: LD_INT 5
22242: PPUSH
22243: CALL_OW 235
// end ;
22247: GO 22220
22249: POP
22250: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
22251: LD_ADDR_VAR 0 3
22255: PUSH
22256: LD_EXP 50
22260: PPUSH
22261: LD_INT 25
22263: PUSH
22264: LD_INT 2
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PPUSH
22271: CALL_OW 72
22275: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
22276: LD_ADDR_VAR 0 4
22280: PUSH
22281: LD_EXP 50
22285: PPUSH
22286: LD_INT 3
22288: PUSH
22289: LD_INT 55
22291: PUSH
22292: EMPTY
22293: LIST
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 25
22301: PUSH
22302: LD_INT 3
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PPUSH
22313: CALL_OW 72
22317: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
22318: LD_ADDR_VAR 0 5
22322: PUSH
22323: LD_INT 324
22325: PPUSH
22326: LD_INT 234
22328: PPUSH
22329: CALL_OW 428
22333: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
22334: LD_ADDR_VAR 0 6
22338: PUSH
22339: LD_INT 334
22341: PPUSH
22342: LD_INT 241
22344: PPUSH
22345: CALL_OW 428
22349: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
22350: LD_VAR 0 6
22354: PPUSH
22355: CALL_OW 313
22359: PPUSH
22360: CALL_OW 122
// if eng then
22364: LD_VAR 0 3
22368: IFFALSE 22476
// begin if eng + mech <= tmp then
22370: LD_VAR 0 3
22374: PUSH
22375: LD_VAR 0 4
22379: PLUS
22380: PUSH
22381: LD_VAR 0 2
22385: LESSEQUAL
22386: IFFALSE 22441
// begin ComEnterUnit ( eng , workshop ) ;
22388: LD_VAR 0 3
22392: PPUSH
22393: LD_VAR 0 5
22397: PPUSH
22398: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
22402: LD_VAR 0 3
22406: PPUSH
22407: LD_INT 3
22409: PPUSH
22410: CALL_OW 183
// AddComExitBuilding ( eng ) ;
22414: LD_VAR 0 3
22418: PPUSH
22419: CALL_OW 182
// mech := mech union eng ;
22423: LD_ADDR_VAR 0 4
22427: PUSH
22428: LD_VAR 0 4
22432: PUSH
22433: LD_VAR 0 3
22437: UNION
22438: ST_TO_ADDR
// end else
22439: GO 22476
// begin ComEnterUnit ( eng , armoury ) ;
22441: LD_VAR 0 3
22445: PPUSH
22446: LD_VAR 0 6
22450: PPUSH
22451: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
22455: LD_VAR 0 3
22459: PPUSH
22460: LD_INT 1
22462: PPUSH
22463: CALL_OW 183
// AddComExitBuilding ( eng ) ;
22467: LD_VAR 0 3
22471: PPUSH
22472: CALL_OW 182
// end ; end ; for i := 1 to tmp do
22476: LD_ADDR_VAR 0 1
22480: PUSH
22481: DOUBLE
22482: LD_INT 1
22484: DEC
22485: ST_TO_ADDR
22486: LD_VAR 0 2
22490: PUSH
22491: FOR_TO
22492: IFFALSE 22534
// if i <= mech then
22494: LD_VAR 0 1
22498: PUSH
22499: LD_VAR 0 4
22503: LESSEQUAL
22504: IFFALSE 22532
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
22506: LD_VAR 0 4
22510: PUSH
22511: LD_VAR 0 1
22515: ARRAY
22516: PPUSH
22517: LD_VAR 0 2
22521: PUSH
22522: LD_VAR 0 1
22526: ARRAY
22527: PPUSH
22528: CALL_OW 180
22532: GO 22491
22534: POP
22535: POP
// end ;
22536: PPOPN 6
22538: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
22539: LD_EXP 45
22543: PPUSH
22544: CALL_OW 302
22548: PUSH
22549: LD_EXP 17
22553: AND
22554: IFFALSE 23012
22556: GO 22558
22558: DISABLE
22559: LD_INT 0
22561: PPUSH
// begin repeat wait ( 0 0$1 ) ;
22562: LD_INT 35
22564: PPUSH
22565: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
22569: LD_ADDR_EXP 19
22573: PUSH
22574: LD_EXP 19
22578: PUSH
22579: LD_INT 35
22581: MINUS
22582: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
22583: LD_EXP 19
22587: PUSH
22588: LD_INT 0
22590: LESSEQUAL
22591: PUSH
22592: LD_EXP 23
22596: OR
22597: IFFALSE 22815
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
22599: LD_ADDR_EXP 19
22603: PUSH
22604: LD_INT 0
22606: ST_TO_ADDR
// display_strings := [ ] ;
22607: LD_ADDR_OWVAR 47
22611: PUSH
22612: EMPTY
22613: ST_TO_ADDR
// DialogueOn ;
22614: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
22618: LD_EXP 45
22622: PPUSH
22623: LD_STRING DRf-Veh-b-19
22625: PPUSH
22626: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
22630: LD_EXP 45
22634: PPUSH
22635: LD_STRING DRf-Veh-b-20
22637: PPUSH
22638: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
22642: LD_EXP 32
22646: PPUSH
22647: LD_STRING DH-Veh-b-21
22649: PPUSH
22650: CALL_OW 88
// if IsOk ( Givi ) then
22654: LD_EXP 33
22658: PPUSH
22659: CALL_OW 302
22663: IFFALSE 22701
// begin Say ( Givi , DG-Veh-b-22 ) ;
22665: LD_EXP 33
22669: PPUSH
22670: LD_STRING DG-Veh-b-22
22672: PPUSH
22673: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
22677: LD_EXP 32
22681: PPUSH
22682: LD_STRING DH-Veh-b-23
22684: PPUSH
22685: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
22689: LD_EXP 33
22693: PPUSH
22694: LD_STRING DG-Veh-b-24
22696: PPUSH
22697: CALL_OW 88
// end ; DialogueOff ;
22701: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
22705: LD_STRING M5a
22707: PPUSH
22708: CALL_OW 337
// for i in rolfSquad do
22712: LD_ADDR_VAR 0 1
22716: PUSH
22717: LD_EXP 49
22721: PUSH
22722: FOR_IN
22723: IFFALSE 22789
// begin SetSide ( i , 8 ) ;
22725: LD_VAR 0 1
22729: PPUSH
22730: LD_INT 8
22732: PPUSH
22733: CALL_OW 235
// if IsDriver ( i ) then
22737: LD_VAR 0 1
22741: PPUSH
22742: CALL 62079 0 1
22746: IFFALSE 22767
// SetSide ( IsInUnit ( i ) , 8 ) else
22748: LD_VAR 0 1
22752: PPUSH
22753: CALL_OW 310
22757: PPUSH
22758: LD_INT 8
22760: PPUSH
22761: CALL_OW 235
22765: GO 22787
// if IsInUnit ( i ) then
22767: LD_VAR 0 1
22771: PPUSH
22772: CALL_OW 310
22776: IFFALSE 22787
// ComExitBuilding ( i ) ;
22778: LD_VAR 0 1
22782: PPUSH
22783: CALL_OW 122
// end ;
22787: GO 22722
22789: POP
22790: POP
// wait ( 0 0$1 ) ;
22791: LD_INT 35
22793: PPUSH
22794: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
22798: LD_EXP 49
22802: PPUSH
22803: LD_INT 229
22805: PPUSH
22806: LD_INT 154
22808: PPUSH
22809: CALL_OW 114
// exit ;
22813: GO 23012
// end ; if IsDead ( Rolf ) then
22815: LD_EXP 45
22819: PPUSH
22820: CALL_OW 301
22824: IFFALSE 22835
// begin ChangeMissionObjectives ( M5a ) ;
22826: LD_STRING M5a
22828: PPUSH
22829: CALL_OW 337
// exit ;
22833: GO 23012
// end ; until Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) ;
22835: LD_EXP 49
22839: PPUSH
22840: LD_INT 55
22842: PUSH
22843: EMPTY
22844: LIST
22845: PPUSH
22846: CALL_OW 72
22850: PPUSH
22851: CALL 29123 0 1
22855: PUSH
22856: LD_EXP 49
22860: PPUSH
22861: CALL 29123 0 1
22865: EQUAL
22866: IFFALSE 22562
// rolfWaitingForVehiclesTimer := 0 0$00 ;
22868: LD_ADDR_EXP 19
22872: PUSH
22873: LD_INT 0
22875: ST_TO_ADDR
// display_strings := [ ] ;
22876: LD_ADDR_OWVAR 47
22880: PUSH
22881: EMPTY
22882: ST_TO_ADDR
// DialogueOn ;
22883: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
22887: LD_EXP 45
22891: PPUSH
22892: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
22896: LD_EXP 45
22900: PPUSH
22901: LD_STRING DRf-Veh-a-17
22903: PPUSH
22904: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
22908: LD_EXP 32
22912: PPUSH
22913: LD_STRING DH-08-Veh-a-18
22915: PPUSH
22916: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
22920: LD_EXP 45
22924: PPUSH
22925: LD_STRING DRf-Veh-a-19
22927: PPUSH
22928: CALL_OW 88
// DialogueOff ;
22932: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
22936: LD_STRING M5a
22938: PPUSH
22939: CALL_OW 337
// rolfHasVehicles := true ;
22943: LD_ADDR_EXP 16
22947: PUSH
22948: LD_INT 1
22950: ST_TO_ADDR
// for i in rolfSquad do
22951: LD_ADDR_VAR 0 1
22955: PUSH
22956: LD_EXP 49
22960: PUSH
22961: FOR_IN
22962: IFFALSE 22995
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
22964: LD_VAR 0 1
22968: PPUSH
22969: CALL_OW 310
22973: PPUSH
22974: LD_INT 8
22976: PPUSH
22977: CALL_OW 235
// SetSide ( i , 8 ) ;
22981: LD_VAR 0 1
22985: PPUSH
22986: LD_INT 8
22988: PPUSH
22989: CALL_OW 235
// end ;
22993: GO 22961
22995: POP
22996: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
22997: LD_EXP 49
23001: PPUSH
23002: LD_INT 229
23004: PPUSH
23005: LD_INT 154
23007: PPUSH
23008: CALL_OW 114
// end ;
23012: PPOPN 1
23014: END
// every 0 0$1 trigger leninSpotted do
23015: LD_EXP 14
23019: IFFALSE 23107
23021: GO 23023
23023: DISABLE
// begin wait ( 0 0$10 ) ;
23024: LD_INT 350
23026: PPUSH
23027: CALL_OW 67
// DialogueOn ;
23031: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
23035: LD_EXP 44
23039: PPUSH
23040: LD_STRING DA-Transmission-1
23042: PPUSH
23043: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
23047: LD_EXP 51
23051: PPUSH
23052: LD_STRING DMzw-Transmission-2
23054: PPUSH
23055: CALL_OW 94
// if gaidarKilled then
23059: LD_EXP 7
23063: IFFALSE 23079
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
23065: LD_EXP 51
23069: PPUSH
23070: LD_STRING DMzw-Transmission-3
23072: PPUSH
23073: CALL_OW 94
23077: GO 23091
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
23079: LD_EXP 51
23083: PPUSH
23084: LD_STRING DMzw-Transmission-a-3
23086: PPUSH
23087: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
23091: LD_EXP 32
23095: PPUSH
23096: LD_STRING DH-Transmission-4
23098: PPUSH
23099: CALL_OW 88
// DialogueOff ;
23103: CALL_OW 7
// end ;
23107: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
23108: LD_INT 22
23110: PUSH
23111: LD_INT 3
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 25
23120: PUSH
23121: LD_INT 9
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 101
23130: PUSH
23131: LD_INT 2
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: LIST
23142: PPUSH
23143: CALL_OW 69
23147: PUSH
23148: LD_EXP 32
23152: PPUSH
23153: CALL_OW 302
23157: AND
23158: IFFALSE 23223
23160: GO 23162
23162: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
23163: LD_INT 22
23165: PUSH
23166: LD_INT 3
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 25
23175: PUSH
23176: LD_INT 9
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 101
23185: PUSH
23186: LD_INT 2
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: PPUSH
23198: CALL_OW 69
23202: PUSH
23203: LD_INT 1
23205: ARRAY
23206: PPUSH
23207: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
23211: LD_EXP 32
23215: PPUSH
23216: LD_STRING DH-Rubazooka-1
23218: PPUSH
23219: CALL_OW 88
// end ;
23223: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
23224: LD_INT 19
23226: PPUSH
23227: LD_INT 22
23229: PUSH
23230: LD_INT 3
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PPUSH
23237: CALL_OW 70
23241: PUSH
23242: LD_EXP 28
23246: AND
23247: IFFALSE 23298
23249: GO 23251
23251: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
23252: LD_INT 19
23254: PPUSH
23255: LD_INT 22
23257: PUSH
23258: LD_INT 3
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PPUSH
23265: CALL_OW 70
23269: PPUSH
23270: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
23274: LD_EXP 32
23278: PPUSH
23279: LD_STRING DH-Ruattfirst-1
23281: PPUSH
23282: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
23286: LD_EXP 32
23290: PPUSH
23291: LD_STRING DH-Ruattfirst-2
23293: PPUSH
23294: CALL_OW 88
// end ;
23298: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
23299: LD_INT 19
23301: PPUSH
23302: LD_INT 22
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PPUSH
23312: CALL_OW 70
23316: PUSH
23317: LD_EXP 28
23321: NOT
23322: AND
23323: IFFALSE 23362
23325: GO 23327
23327: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
23328: LD_INT 19
23330: PPUSH
23331: LD_INT 22
23333: PUSH
23334: LD_INT 3
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PPUSH
23341: CALL_OW 70
23345: PPUSH
23346: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
23350: LD_EXP 32
23354: PPUSH
23355: LD_STRING DH-Ruattnext-1
23357: PPUSH
23358: CALL_OW 88
// end ;
23362: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
23363: LD_EXP 51
23367: PPUSH
23368: CALL_OW 301
23372: PUSH
23373: LD_EXP 42
23377: PPUSH
23378: CALL_OW 302
23382: AND
23383: IFFALSE 23400
23385: GO 23387
23387: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
23388: LD_EXP 42
23392: PPUSH
23393: LD_STRING DOm-Morozov
23395: PPUSH
23396: CALL_OW 94
23400: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do
23401: LD_EXP 31
23405: PUSH
23406: LD_EXP 46
23410: PPUSH
23411: CALL_OW 274
23415: PPUSH
23416: LD_INT 2
23418: PPUSH
23419: CALL_OW 275
23423: PUSH
23424: LD_INT 31
23426: LESS
23427: AND
23428: PUSH
23429: LD_EXP 33
23433: PPUSH
23434: CALL_OW 302
23438: AND
23439: IFFALSE 23521
23441: GO 23443
23443: DISABLE
// begin DialogueOn ;
23444: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
23448: LD_EXP 32
23452: PPUSH
23453: LD_STRING DH-Fuel-1
23455: PPUSH
23456: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
23460: LD_EXP 33
23464: PPUSH
23465: LD_STRING DG-Fuel-2
23467: PPUSH
23468: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
23472: LD_EXP 33
23476: PPUSH
23477: LD_STRING DG-Fuel-3
23479: PPUSH
23480: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
23484: LD_EXP 33
23488: PPUSH
23489: LD_STRING DG-Fuel-4
23491: PPUSH
23492: CALL_OW 88
// DialogueOff ;
23496: CALL_OW 7
// Query ( QOil ) ;
23500: LD_STRING QOil
23502: PPUSH
23503: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
23507: LD_INT 20
23509: PPUSH
23510: LD_INT 1
23512: PPUSH
23513: CALL_OW 424
// GoForOil ( ) ;
23517: CALL 7505 0 0
// end ;
23521: END
// every 0 0$1 trigger leninSpotted and omarAttack or IsDead ( Morozov ) do
23522: LD_EXP 14
23526: PUSH
23527: LD_EXP 23
23531: AND
23532: PUSH
23533: LD_EXP 51
23537: PPUSH
23538: CALL_OW 301
23542: OR
23543: IFFALSE 23843
23545: GO 23547
23547: DISABLE
// begin wait ( 1 1$45 ) ;
23548: LD_INT 3675
23550: PPUSH
23551: CALL_OW 67
// DialogueOn ;
23555: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
23559: LD_EXP 40
23563: PPUSH
23564: LD_STRING DShar-End-1
23566: PPUSH
23567: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
23571: LD_EXP 32
23575: PPUSH
23576: LD_STRING DH-End-2
23578: PPUSH
23579: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
23583: LD_EXP 40
23587: PPUSH
23588: LD_STRING DShar-End-3
23590: PPUSH
23591: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
23595: LD_EXP 32
23599: PPUSH
23600: LD_STRING DH-End-4
23602: PPUSH
23603: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
23607: LD_EXP 40
23611: PPUSH
23612: LD_STRING DShar-End-5
23614: PPUSH
23615: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
23619: LD_EXP 40
23623: PPUSH
23624: LD_STRING DShar-End-6
23626: PPUSH
23627: CALL_OW 94
// dwait ( 0 0$2 ) ;
23631: LD_INT 70
23633: PPUSH
23634: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
23638: LD_EXP 32
23642: PPUSH
23643: LD_STRING DH-End-7
23645: PPUSH
23646: CALL_OW 88
// DialogueOff ;
23650: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
23654: LD_STRING M6
23656: PPUSH
23657: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
23661: LD_INT 17
23663: PPUSH
23664: LD_INT 1
23666: PPUSH
23667: CALL_OW 424
// escapeAllowed := true ;
23671: LD_ADDR_EXP 24
23675: PUSH
23676: LD_INT 1
23678: ST_TO_ADDR
// wait ( 0 0$2 ) ;
23679: LD_INT 70
23681: PPUSH
23682: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
23686: LD_EXP 43
23690: PPUSH
23691: LD_STRING DKs-End-8
23693: PPUSH
23694: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
23698: LD_EXP 37
23702: PPUSH
23703: LD_STRING DK-End-10
23705: PPUSH
23706: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
23710: LD_EXP 43
23714: PPUSH
23715: LD_STRING DKs-End-9
23717: PPUSH
23718: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
23722: LD_EXP 39
23726: PPUSH
23727: LD_STRING DMar-End-11
23729: PPUSH
23730: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
23734: LD_STRING 05_DrugsTested
23736: PPUSH
23737: LD_EXP 1
23741: PPUSH
23742: CALL_OW 30
23746: IFFALSE 23760
// Say ( Mike , DM-End-12 ) ;
23748: LD_EXP 34
23752: PPUSH
23753: LD_STRING DM-End-12
23755: PPUSH
23756: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
23760: LD_EXP 41
23764: PPUSH
23765: LD_STRING DO-End-13
23767: PPUSH
23768: CALL_OW 88
// if IsOk ( Sophia ) then
23772: LD_EXP 38
23776: PPUSH
23777: CALL_OW 302
23781: IFFALSE 23807
// begin Say ( Sophia , DS-End-15 ) ;
23783: LD_EXP 38
23787: PPUSH
23788: LD_STRING DS-End-15
23790: PPUSH
23791: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
23795: LD_EXP 37
23799: PPUSH
23800: LD_STRING DK-End-16
23802: PPUSH
23803: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
23807: LD_EXP 33
23811: PPUSH
23812: LD_STRING DG-End-17
23814: PPUSH
23815: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
23819: LD_EXP 33
23823: PPUSH
23824: LD_STRING DG-End-18
23826: PPUSH
23827: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
23831: LD_EXP 33
23835: PPUSH
23836: LD_STRING DG-End-19
23838: PPUSH
23839: CALL_OW 88
// end ;
23843: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
23844: LD_EXP 24
23848: IFFALSE 23976
23850: GO 23852
23852: DISABLE
23853: LD_INT 0
23855: PPUSH
23856: PPUSH
// begin enable ;
23857: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
23858: LD_ADDR_OWVAR 47
23862: PUSH
23863: LD_STRING #X106-2
23865: PUSH
23866: LD_EXP 25
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
23875: LD_ADDR_EXP 25
23879: PUSH
23880: LD_EXP 25
23884: PUSH
23885: LD_INT 35
23887: MINUS
23888: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
23889: LD_ADDR_VAR 0 2
23893: PUSH
23894: LD_INT 17
23896: PPUSH
23897: LD_INT 22
23899: PUSH
23900: LD_INT 2
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 21
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 23
23919: PUSH
23920: LD_INT 2
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 71
23936: ST_TO_ADDR
// if not outsiders then
23937: LD_VAR 0 2
23941: NOT
23942: IFFALSE 23959
// begin escapeAllowed := false ;
23944: LD_ADDR_EXP 24
23948: PUSH
23949: LD_INT 0
23951: ST_TO_ADDR
// disable ;
23952: DISABLE
// MissionWin ;
23953: CALL 23979 0 0
// exit ;
23957: GO 23976
// end ; if escapeTimer <= 0 0$00 then
23959: LD_EXP 25
23963: PUSH
23964: LD_INT 0
23966: LESSEQUAL
23967: IFFALSE 23976
// YouLost ( TimeOut ) ;
23969: LD_STRING TimeOut
23971: PPUSH
23972: CALL_OW 104
// end ;
23976: PPOPN 2
23978: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
23979: LD_INT 0
23981: PPUSH
23982: PPUSH
23983: PPUSH
23984: PPUSH
23985: PPUSH
// Say ( Heike , DH-End-20 ) ;
23986: LD_EXP 32
23990: PPUSH
23991: LD_STRING DH-End-20
23993: PPUSH
23994: CALL_OW 88
// if rolfDied then
23998: LD_EXP 13
24002: IFFALSE 24017
// AddMedal ( med1 , - 1 ) else
24004: LD_STRING med1
24006: PPUSH
24007: LD_INT 1
24009: NEG
24010: PPUSH
24011: CALL_OW 101
24015: GO 24047
// if not canRolfJoin then
24017: LD_EXP 29
24021: NOT
24022: IFFALSE 24037
// AddMedal ( med1 , - 2 ) else
24024: LD_STRING med1
24026: PPUSH
24027: LD_INT 2
24029: NEG
24030: PPUSH
24031: CALL_OW 101
24035: GO 24047
// AddMedal ( med1 , 1 ) ;
24037: LD_STRING med1
24039: PPUSH
24040: LD_INT 1
24042: PPUSH
24043: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
24047: LD_EXP 22
24051: PUSH
24052: LD_EXP 16
24056: AND
24057: IFFALSE 24071
// AddMedal ( med2 , 1 ) else
24059: LD_STRING med2
24061: PPUSH
24062: LD_INT 1
24064: PPUSH
24065: CALL_OW 101
24069: GO 24120
// if omarHasVehicles then
24071: LD_EXP 22
24075: IFFALSE 24090
// AddMedal ( med2 , - 1 ) else
24077: LD_STRING med2
24079: PPUSH
24080: LD_INT 1
24082: NEG
24083: PPUSH
24084: CALL_OW 101
24088: GO 24120
// if rolfHasVehicles then
24090: LD_EXP 16
24094: IFFALSE 24109
// AddMedal ( med2 , - 2 ) else
24096: LD_STRING med2
24098: PPUSH
24099: LD_INT 2
24101: NEG
24102: PPUSH
24103: CALL_OW 101
24107: GO 24120
// AddMedal ( med2 , - 3 ) ;
24109: LD_STRING med2
24111: PPUSH
24112: LD_INT 3
24114: NEG
24115: PPUSH
24116: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 62 ] [ Difficulty ] and heikeLoseCounter = 0 then
24120: LD_EXP 5
24124: PUSH
24125: LD_INT 30
24127: PUSH
24128: LD_INT 45
24130: PUSH
24131: LD_INT 50
24133: PUSH
24134: LD_INT 62
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: PUSH
24143: LD_OWVAR 67
24147: ARRAY
24148: GREATEREQUAL
24149: PUSH
24150: LD_EXP 26
24154: PUSH
24155: LD_INT 0
24157: EQUAL
24158: AND
24159: IFFALSE 24173
// AddMedal ( med3 , 1 ) else
24161: LD_STRING med3
24163: PPUSH
24164: LD_INT 1
24166: PPUSH
24167: CALL_OW 101
24171: GO 24203
// if heikeLoseCounter then
24173: LD_EXP 26
24177: IFFALSE 24192
// AddMedal ( med3 , - 2 ) else
24179: LD_STRING med3
24181: PPUSH
24182: LD_INT 2
24184: NEG
24185: PPUSH
24186: CALL_OW 101
24190: GO 24203
// AddMedal ( med3 , - 1 ) ;
24192: LD_STRING med3
24194: PPUSH
24195: LD_INT 1
24197: NEG
24198: PPUSH
24199: CALL_OW 101
// GiveMedals ( MAIN ) ;
24203: LD_STRING MAIN
24205: PPUSH
24206: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
24210: LD_INT 22
24212: PUSH
24213: LD_INT 2
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 23
24222: PUSH
24223: LD_INT 2
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 21
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: LIST
24244: PPUSH
24245: CALL_OW 69
24249: PPUSH
24250: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
24254: LD_EXP 32
24258: PPUSH
24259: LD_STRING 06_Heike
24261: PPUSH
24262: CALL_OW 38
// if Aviradze then
24266: LD_EXP 44
24270: IFFALSE 24284
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
24272: LD_EXP 44
24276: PPUSH
24277: LD_STRING 06_Aviradze
24279: PPUSH
24280: CALL_OW 38
// if Ibrahim then
24284: LD_EXP 35
24288: IFFALSE 24302
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
24290: LD_EXP 35
24294: PPUSH
24295: LD_STRING 06_Ibrahim
24297: PPUSH
24298: CALL_OW 38
// if Kamil then
24302: LD_EXP 36
24306: IFFALSE 24320
// SaveCharacters ( Kamil , 06_Kamil ) ;
24308: LD_EXP 36
24312: PPUSH
24313: LD_STRING 06_Kamil
24315: PPUSH
24316: CALL_OW 38
// if Sophia then
24320: LD_EXP 38
24324: IFFALSE 24338
// SaveCharacters ( Sophia , 06_Sophia ) ;
24326: LD_EXP 38
24330: PPUSH
24331: LD_STRING 06_Sophia
24333: PPUSH
24334: CALL_OW 38
// if Kaia then
24338: LD_EXP 37
24342: IFFALSE 24356
// SaveCharacters ( Kaia , 06_Kaia ) ;
24344: LD_EXP 37
24348: PPUSH
24349: LD_STRING 06_Kaia
24351: PPUSH
24352: CALL_OW 38
// if Givi then
24356: LD_EXP 33
24360: IFFALSE 24374
// SaveCharacters ( Givi , 06_Givi ) ;
24362: LD_EXP 33
24366: PPUSH
24367: LD_STRING 06_Givi
24369: PPUSH
24370: CALL_OW 38
// if Mike then
24374: LD_EXP 34
24378: IFFALSE 24392
// SaveCharacters ( Mike , 06_Mike ) ;
24380: LD_EXP 34
24384: PPUSH
24385: LD_STRING 06_Mike
24387: PPUSH
24388: CALL_OW 38
// if Markov then
24392: LD_EXP 39
24396: IFFALSE 24410
// SaveCharacters ( Markov , 06_Markov ) ;
24398: LD_EXP 39
24402: PPUSH
24403: LD_STRING 06_Markov
24405: PPUSH
24406: CALL_OW 38
// if Kurt then
24410: LD_EXP 43
24414: IFFALSE 24428
// SaveCharacters ( Kurt , 06_Kurt ) ;
24416: LD_EXP 43
24420: PPUSH
24421: LD_STRING 06_Kurt
24423: PPUSH
24424: CALL_OW 38
// if heikeSecondSquad then
24428: LD_EXP 47
24432: IFFALSE 24446
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
24434: LD_EXP 47
24438: PPUSH
24439: LD_STRING 06_others
24441: PPUSH
24442: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
24446: LD_ADDR_VAR 0 3
24450: PUSH
24451: LD_INT 22
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 23
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: ST_TO_ADDR
// if tmp then
24480: LD_VAR 0 3
24484: IFFALSE 24498
// SaveCharacters ( tmp , 06_apes ) ;
24486: LD_VAR 0 3
24490: PPUSH
24491: LD_STRING 06_apes
24493: PPUSH
24494: CALL_OW 38
// if Rolf then
24498: LD_EXP 45
24502: IFFALSE 24553
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
24504: LD_EXP 45
24508: PPUSH
24509: LD_STRING 06_Rolf
24511: PPUSH
24512: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
24516: LD_STRING enableBioCharacter(BIO_ROLF)
24518: PPUSH
24519: CALL_OW 559
// if rolfSquad diff Rolf then
24523: LD_EXP 49
24527: PUSH
24528: LD_EXP 45
24532: DIFF
24533: IFFALSE 24553
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
24535: LD_EXP 49
24539: PUSH
24540: LD_EXP 45
24544: DIFF
24545: PPUSH
24546: LD_STRING 06_RolfSquad
24548: PPUSH
24549: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
24553: LD_ADDR_VAR 0 3
24557: PUSH
24558: LD_INT 17
24560: PPUSH
24561: LD_INT 21
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PPUSH
24571: CALL_OW 70
24575: ST_TO_ADDR
// if tmp then
24576: LD_VAR 0 3
24580: IFFALSE 24874
// begin tmp2 := [ ] ;
24582: LD_ADDR_VAR 0 4
24586: PUSH
24587: EMPTY
24588: ST_TO_ADDR
// for i in tmp do
24589: LD_ADDR_VAR 0 2
24593: PUSH
24594: LD_VAR 0 3
24598: PUSH
24599: FOR_IN
24600: IFFALSE 24860
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
24602: LD_VAR 0 2
24606: PPUSH
24607: CALL_OW 264
24611: PUSH
24612: LD_INT 32
24614: PUSH
24615: LD_INT 12
24617: PUSH
24618: LD_INT 51
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: IN
24626: IFFALSE 24763
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
24628: LD_ADDR_VAR 0 5
24632: PUSH
24633: LD_VAR 0 2
24637: PPUSH
24638: LD_INT 1
24640: PPUSH
24641: CALL_OW 289
24645: PUSH
24646: LD_VAR 0 2
24650: PPUSH
24651: LD_INT 2
24653: PPUSH
24654: CALL_OW 289
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
24663: LD_ADDR_VAR 0 4
24667: PUSH
24668: LD_VAR 0 4
24672: PPUSH
24673: LD_VAR 0 4
24677: PUSH
24678: LD_INT 1
24680: PLUS
24681: PPUSH
24682: LD_VAR 0 2
24686: PPUSH
24687: CALL_OW 265
24691: PUSH
24692: LD_VAR 0 2
24696: PPUSH
24697: CALL_OW 262
24701: PUSH
24702: LD_VAR 0 2
24706: PPUSH
24707: CALL_OW 263
24711: PUSH
24712: LD_VAR 0 2
24716: PPUSH
24717: CALL_OW 264
24721: PUSH
24722: LD_VAR 0 2
24726: PPUSH
24727: CALL_OW 248
24731: PUSH
24732: LD_VAR 0 2
24736: PPUSH
24737: CALL_OW 256
24741: PUSH
24742: LD_VAR 0 5
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: PPUSH
24756: CALL_OW 1
24760: ST_TO_ADDR
// end else
24761: GO 24858
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
24763: LD_ADDR_VAR 0 4
24767: PUSH
24768: LD_VAR 0 4
24772: PPUSH
24773: LD_VAR 0 4
24777: PUSH
24778: LD_INT 1
24780: PLUS
24781: PPUSH
24782: LD_VAR 0 2
24786: PPUSH
24787: CALL_OW 265
24791: PUSH
24792: LD_VAR 0 2
24796: PPUSH
24797: CALL_OW 262
24801: PUSH
24802: LD_VAR 0 2
24806: PPUSH
24807: CALL_OW 263
24811: PUSH
24812: LD_VAR 0 2
24816: PPUSH
24817: CALL_OW 264
24821: PUSH
24822: LD_VAR 0 2
24826: PPUSH
24827: CALL_OW 248
24831: PUSH
24832: LD_VAR 0 2
24836: PPUSH
24837: CALL_OW 256
24841: PUSH
24842: EMPTY
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: PPUSH
24853: CALL_OW 1
24857: ST_TO_ADDR
24858: GO 24599
24860: POP
24861: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
24862: LD_VAR 0 4
24866: PPUSH
24867: LD_STRING 06_Vehicles
24869: PPUSH
24870: CALL_OW 39
// end ; YouWin ;
24874: CALL_OW 103
// end ; end_of_file
24878: LD_VAR 0 1
24882: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
24883: LD_INT 0
24885: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
24886: LD_VAR 0 1
24890: PPUSH
24891: LD_VAR 0 2
24895: PPUSH
24896: CALL 84355 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
24900: LD_VAR 0 1
24904: PPUSH
24905: CALL_OW 255
24909: PUSH
24910: LD_INT 2
24912: EQUAL
24913: PUSH
24914: LD_OWVAR 52
24918: AND
24919: PUSH
24920: LD_VAR 0 1
24924: PPUSH
24925: CALL_OW 263
24929: PUSH
24930: LD_INT 1
24932: EQUAL
24933: AND
24934: IFFALSE 24989
// begin driver := IsDrivenBy ( vehicle ) ;
24936: LD_ADDR_VAR 0 3
24940: PUSH
24941: LD_VAR 0 1
24945: PPUSH
24946: CALL_OW 311
24950: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
24951: LD_VAR 0 1
24955: PPUSH
24956: LD_INT 211
24958: PPUSH
24959: LD_INT 101
24961: PPUSH
24962: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24966: LD_VAR 0 3
24970: PPUSH
24971: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24975: LD_VAR 0 3
24979: PPUSH
24980: LD_VAR 0 2
24984: PPUSH
24985: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
24989: LD_VAR 0 1
24993: PPUSH
24994: CALL_OW 255
24998: PUSH
24999: LD_INT 3
25001: EQUAL
25002: IFFALSE 25033
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
25004: LD_ADDR_EXP 58
25008: PUSH
25009: LD_EXP 58
25013: PPUSH
25014: LD_EXP 58
25018: PUSH
25019: LD_INT 1
25021: PLUS
25022: PPUSH
25023: LD_VAR 0 1
25027: PPUSH
25028: CALL_OW 1
25032: ST_TO_ADDR
// end ;
25033: PPOPN 3
25035: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
25036: LD_VAR 0 1
25040: PPUSH
25041: CALL_OW 255
25045: PUSH
25046: LD_INT 8
25048: EQUAL
25049: PUSH
25050: LD_VAR 0 1
25054: PPUSH
25055: CALL_OW 266
25059: PUSH
25060: LD_INT 4
25062: EQUAL
25063: AND
25064: IFFALSE 25075
// ComUpgrade ( b ) ;
25066: LD_VAR 0 1
25070: PPUSH
25071: CALL_OW 146
// end ;
25075: PPOPN 1
25077: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
25078: LD_VAR 0 1
25082: PPUSH
25083: CALL 84235 0 1
// if un = Heike then
25087: LD_VAR 0 1
25091: PUSH
25092: LD_EXP 32
25096: EQUAL
25097: IFFALSE 25106
// YouLost ( Heike ) ;
25099: LD_STRING Heike
25101: PPUSH
25102: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
25106: LD_VAR 0 1
25110: PUSH
25111: LD_INT 22
25113: PUSH
25114: LD_INT 2
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 23
25123: PUSH
25124: LD_INT 2
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PPUSH
25135: CALL_OW 69
25139: IN
25140: IFFALSE 25156
// heikeLoseCounter := heikeLoseCounter + 1 ;
25142: LD_ADDR_EXP 26
25146: PUSH
25147: LD_EXP 26
25151: PUSH
25152: LD_INT 1
25154: PLUS
25155: ST_TO_ADDR
// if un = arDepot then
25156: LD_VAR 0 1
25160: PUSH
25161: LD_EXP 46
25165: EQUAL
25166: IFFALSE 25175
// YouLost ( Base ) ;
25168: LD_STRING Base
25170: PPUSH
25171: CALL_OW 104
// if un = Rolf then
25175: LD_VAR 0 1
25179: PUSH
25180: LD_EXP 45
25184: EQUAL
25185: IFFALSE 25195
// rolfDied := true ;
25187: LD_ADDR_EXP 13
25191: PUSH
25192: LD_INT 1
25194: ST_TO_ADDR
// if un in rolfSquad then
25195: LD_VAR 0 1
25199: PUSH
25200: LD_EXP 49
25204: IN
25205: IFFALSE 25223
// rolfSquad := rolfSquad diff un ;
25207: LD_ADDR_EXP 49
25211: PUSH
25212: LD_EXP 49
25216: PUSH
25217: LD_VAR 0 1
25221: DIFF
25222: ST_TO_ADDR
// if un in omarSquad then
25223: LD_VAR 0 1
25227: PUSH
25228: LD_EXP 50
25232: IN
25233: IFFALSE 25251
// omarSquad := omarSquad diff un ;
25235: LD_ADDR_EXP 50
25239: PUSH
25240: LD_EXP 50
25244: PUSH
25245: LD_VAR 0 1
25249: DIFF
25250: ST_TO_ADDR
// if GetSide ( un ) = 3 then
25251: LD_VAR 0 1
25255: PPUSH
25256: CALL_OW 255
25260: PUSH
25261: LD_INT 3
25263: EQUAL
25264: IFFALSE 25280
// ruLoseCounter := ruLoseCounter + 1 ;
25266: LD_ADDR_EXP 5
25270: PUSH
25271: LD_EXP 5
25275: PUSH
25276: LD_INT 1
25278: PLUS
25279: ST_TO_ADDR
// if un in ruAttackers then
25280: LD_VAR 0 1
25284: PUSH
25285: LD_EXP 59
25289: IN
25290: IFFALSE 25308
// ruAttackers := ruAttackers diff un ;
25292: LD_ADDR_EXP 59
25296: PUSH
25297: LD_EXP 59
25301: PUSH
25302: LD_VAR 0 1
25306: DIFF
25307: ST_TO_ADDR
// end ;
25308: PPOPN 1
25310: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
25311: LD_INT 0
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
25317: LD_VAR 0 1
25321: PPUSH
25322: CALL_OW 255
25326: PUSH
25327: LD_INT 3
25329: EQUAL
25330: PUSH
25331: LD_VAR 0 1
25335: PUSH
25336: LD_EXP 59
25340: IN
25341: NOT
25342: AND
25343: IFFALSE 25839
// begin if not IsInArea ( un , ruMainBase ) then
25345: LD_VAR 0 1
25349: PPUSH
25350: LD_INT 10
25352: PPUSH
25353: CALL_OW 308
25357: NOT
25358: IFFALSE 25372
// ComMoveToArea ( un , ruMainBase ) ;
25360: LD_VAR 0 1
25364: PPUSH
25365: LD_INT 10
25367: PPUSH
25368: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
25372: LD_INT 35
25374: PPUSH
25375: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
25379: LD_VAR 0 1
25383: PPUSH
25384: CALL_OW 302
25388: NOT
25389: PUSH
25390: LD_VAR 0 1
25394: PPUSH
25395: LD_INT 10
25397: PPUSH
25398: CALL_OW 308
25402: OR
25403: IFFALSE 25372
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
25405: LD_ADDR_EXP 57
25409: PUSH
25410: LD_EXP 57
25414: PPUSH
25415: LD_EXP 57
25419: PUSH
25420: LD_INT 1
25422: PLUS
25423: PPUSH
25424: LD_VAR 0 1
25428: PPUSH
25429: CALL_OW 1
25433: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
25434: LD_ADDR_VAR 0 8
25438: PUSH
25439: LD_INT 72
25441: PUSH
25442: LD_INT 12
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: ST_TO_ADDR
// if tmp then
25449: LD_VAR 0 8
25453: IFFALSE 25568
// for i in tmp do
25455: LD_ADDR_VAR 0 5
25459: PUSH
25460: LD_VAR 0 8
25464: PUSH
25465: FOR_IN
25466: IFFALSE 25566
// if UnitsInside ( i ) < 6 then
25468: LD_VAR 0 5
25472: PPUSH
25473: CALL_OW 313
25477: PUSH
25478: LD_INT 6
25480: LESS
25481: IFFALSE 25564
// begin AddComEnterUnit ( un , i ) ;
25483: LD_VAR 0 1
25487: PPUSH
25488: LD_VAR 0 5
25492: PPUSH
25493: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
25497: LD_VAR 0 8
25501: PPUSH
25502: LD_INT 22
25504: PUSH
25505: LD_INT 23
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: PPUSH
25515: LD_INT 2
25517: PPUSH
25518: CALL_OW 12
25522: ARRAY
25523: PPUSH
25524: LD_INT 1
25526: PPUSH
25527: LD_INT 1
25529: PPUSH
25530: LD_INT 44
25532: PUSH
25533: LD_INT 46
25535: PUSH
25536: LD_INT 47
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: PPUSH
25547: LD_INT 3
25549: PPUSH
25550: CALL_OW 12
25554: ARRAY
25555: PPUSH
25556: CALL_OW 185
// exit ;
25560: POP
25561: POP
25562: GO 25839
// end ;
25564: GO 25465
25566: POP
25567: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
25568: LD_ADDR_VAR 0 8
25572: PUSH
25573: LD_INT 10
25575: PPUSH
25576: LD_INT 22
25578: PUSH
25579: LD_INT 3
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 50
25588: PUSH
25589: EMPTY
25590: LIST
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: LD_INT 30
25597: PUSH
25598: LD_INT 4
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 30
25607: PUSH
25608: LD_INT 5
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 30
25617: PUSH
25618: LD_INT 32
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 30
25627: PUSH
25628: LD_INT 31
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: LIST
25646: PPUSH
25647: CALL_OW 70
25651: ST_TO_ADDR
// if not tmp then
25652: LD_VAR 0 8
25656: NOT
25657: IFFALSE 25676
// begin ComMoveXY ( un , 83 , 133 ) ;
25659: LD_VAR 0 1
25663: PPUSH
25664: LD_INT 83
25666: PPUSH
25667: LD_INT 133
25669: PPUSH
25670: CALL_OW 111
// exit ;
25674: GO 25839
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
25676: LD_ADDR_VAR 0 6
25680: PUSH
25681: LD_VAR 0 1
25685: PPUSH
25686: LD_VAR 0 8
25690: PPUSH
25691: LD_INT 1
25693: PPUSH
25694: LD_INT 1
25696: PPUSH
25697: CALL 32593 0 4
25701: PUSH
25702: FOR_IN
25703: IFFALSE 25837
// begin case GetBType ( b ) of b_armoury , b_barracks :
25705: LD_VAR 0 6
25709: PPUSH
25710: CALL_OW 266
25714: PUSH
25715: LD_INT 4
25717: DOUBLE
25718: EQUAL
25719: IFTRUE 25729
25721: LD_INT 5
25723: DOUBLE
25724: EQUAL
25725: IFTRUE 25729
25727: GO 25740
25729: POP
// p := 6 ; b_breastwork , b_bunker :
25730: LD_ADDR_VAR 0 7
25734: PUSH
25735: LD_INT 6
25737: ST_TO_ADDR
25738: GO 25766
25740: LD_INT 31
25742: DOUBLE
25743: EQUAL
25744: IFTRUE 25754
25746: LD_INT 32
25748: DOUBLE
25749: EQUAL
25750: IFTRUE 25754
25752: GO 25765
25754: POP
// p := 1 ; end ;
25755: LD_ADDR_VAR 0 7
25759: PUSH
25760: LD_INT 1
25762: ST_TO_ADDR
25763: GO 25766
25765: POP
// if UnitsInside ( b ) < p then
25766: LD_VAR 0 6
25770: PPUSH
25771: CALL_OW 313
25775: PUSH
25776: LD_VAR 0 7
25780: LESS
25781: IFFALSE 25835
// begin ComEnterUnit ( un , b ) ;
25783: LD_VAR 0 1
25787: PPUSH
25788: LD_VAR 0 6
25792: PPUSH
25793: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
25797: LD_VAR 0 6
25801: PPUSH
25802: CALL_OW 266
25806: PUSH
25807: LD_INT 4
25809: PUSH
25810: LD_INT 5
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: IN
25817: IFFALSE 25831
// AddComChangeProfession ( un , class_soldier ) ;
25819: LD_VAR 0 1
25823: PPUSH
25824: LD_INT 1
25826: PPUSH
25827: CALL_OW 183
// exit ;
25831: POP
25832: POP
25833: GO 25839
// end ; end ;
25835: GO 25702
25837: POP
25838: POP
// end ; end ;
25839: PPOPN 8
25841: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
25842: LD_INT 0
25844: PPUSH
25845: PPUSH
25846: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
25847: LD_VAR 0 2
25851: PPUSH
25852: CALL_OW 255
25856: PUSH
25857: LD_INT 3
25859: EQUAL
25860: PUSH
25861: LD_VAR 0 2
25865: PPUSH
25866: CALL_OW 257
25870: PUSH
25871: LD_INT 1
25873: EQUAL
25874: AND
25875: PUSH
25876: LD_VAR 0 2
25880: PUSH
25881: LD_EXP 57
25885: IN
25886: NOT
25887: AND
25888: IFFALSE 26201
// begin ComMoveToArea ( un , ruMainBase ) ;
25890: LD_VAR 0 2
25894: PPUSH
25895: LD_INT 10
25897: PPUSH
25898: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
25902: LD_INT 35
25904: PPUSH
25905: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
25909: LD_VAR 0 2
25913: PPUSH
25914: CALL_OW 302
25918: NOT
25919: PUSH
25920: LD_VAR 0 2
25924: PPUSH
25925: LD_INT 10
25927: PPUSH
25928: CALL_OW 308
25932: OR
25933: IFFALSE 25902
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
25935: LD_ADDR_EXP 57
25939: PUSH
25940: LD_EXP 57
25944: PPUSH
25945: LD_EXP 57
25949: PUSH
25950: LD_INT 1
25952: PLUS
25953: PPUSH
25954: LD_VAR 0 2
25958: PPUSH
25959: CALL_OW 1
25963: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
25964: LD_ADDR_VAR 0 4
25968: PUSH
25969: LD_INT 10
25971: PPUSH
25972: LD_INT 22
25974: PUSH
25975: LD_INT 3
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 50
25984: PUSH
25985: EMPTY
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: LD_INT 30
25993: PUSH
25994: LD_INT 4
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 30
26003: PUSH
26004: LD_INT 5
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 30
26013: PUSH
26014: LD_INT 32
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 30
26023: PUSH
26024: LD_INT 31
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 70
26047: ST_TO_ADDR
// if not tmp then
26048: LD_VAR 0 4
26052: NOT
26053: IFFALSE 26072
// begin ComMoveXY ( un , 83 , 133 ) ;
26055: LD_VAR 0 2
26059: PPUSH
26060: LD_INT 83
26062: PPUSH
26063: LD_INT 133
26065: PPUSH
26066: CALL_OW 111
// exit ;
26070: GO 26450
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
26072: LD_ADDR_VAR 0 5
26076: PUSH
26077: LD_VAR 0 2
26081: PPUSH
26082: LD_VAR 0 4
26086: PPUSH
26087: LD_INT 1
26089: PPUSH
26090: LD_INT 1
26092: PPUSH
26093: CALL 32593 0 4
26097: PUSH
26098: FOR_IN
26099: IFFALSE 26199
// begin case GetBType ( b ) of b_armoury , b_barracks :
26101: LD_VAR 0 5
26105: PPUSH
26106: CALL_OW 266
26110: PUSH
26111: LD_INT 4
26113: DOUBLE
26114: EQUAL
26115: IFTRUE 26125
26117: LD_INT 5
26119: DOUBLE
26120: EQUAL
26121: IFTRUE 26125
26123: GO 26136
26125: POP
// p := 6 ; b_breastwork , b_bunker :
26126: LD_ADDR_VAR 0 3
26130: PUSH
26131: LD_INT 6
26133: ST_TO_ADDR
26134: GO 26162
26136: LD_INT 31
26138: DOUBLE
26139: EQUAL
26140: IFTRUE 26150
26142: LD_INT 32
26144: DOUBLE
26145: EQUAL
26146: IFTRUE 26150
26148: GO 26161
26150: POP
// p := 1 ; end ;
26151: LD_ADDR_VAR 0 3
26155: PUSH
26156: LD_INT 1
26158: ST_TO_ADDR
26159: GO 26162
26161: POP
// if UnitsInside ( b ) < p then
26162: LD_VAR 0 5
26166: PPUSH
26167: CALL_OW 313
26171: PUSH
26172: LD_VAR 0 3
26176: LESS
26177: IFFALSE 26197
// begin ComEnterUnit ( un , b ) ;
26179: LD_VAR 0 2
26183: PPUSH
26184: LD_VAR 0 5
26188: PPUSH
26189: CALL_OW 120
// exit ;
26193: POP
26194: POP
26195: GO 26450
// end ; end ;
26197: GO 26098
26199: POP
26200: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
26201: LD_VAR 0 2
26205: PUSH
26206: LD_EXP 57
26210: IN
26211: PUSH
26212: LD_VAR 0 2
26216: PPUSH
26217: CALL_OW 257
26221: PUSH
26222: LD_INT 1
26224: EQUAL
26225: AND
26226: IFFALSE 26450
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
26228: LD_ADDR_VAR 0 4
26232: PUSH
26233: LD_INT 10
26235: PPUSH
26236: LD_INT 22
26238: PUSH
26239: LD_INT 3
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 50
26248: PUSH
26249: EMPTY
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: LD_INT 30
26257: PUSH
26258: LD_INT 4
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 30
26267: PUSH
26268: LD_INT 5
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 30
26277: PUSH
26278: LD_INT 32
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 30
26287: PUSH
26288: LD_INT 31
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: LIST
26306: PPUSH
26307: CALL_OW 70
26311: ST_TO_ADDR
// if not tmp then
26312: LD_VAR 0 4
26316: NOT
26317: IFFALSE 26321
// exit ;
26319: GO 26450
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
26321: LD_ADDR_VAR 0 5
26325: PUSH
26326: LD_VAR 0 2
26330: PPUSH
26331: LD_VAR 0 4
26335: PPUSH
26336: LD_INT 1
26338: PPUSH
26339: LD_INT 1
26341: PPUSH
26342: CALL 32593 0 4
26346: PUSH
26347: FOR_IN
26348: IFFALSE 26448
// begin case GetBType ( b ) of b_armoury , b_barracks :
26350: LD_VAR 0 5
26354: PPUSH
26355: CALL_OW 266
26359: PUSH
26360: LD_INT 4
26362: DOUBLE
26363: EQUAL
26364: IFTRUE 26374
26366: LD_INT 5
26368: DOUBLE
26369: EQUAL
26370: IFTRUE 26374
26372: GO 26385
26374: POP
// p := 6 ; b_breastwork , b_bunker :
26375: LD_ADDR_VAR 0 3
26379: PUSH
26380: LD_INT 6
26382: ST_TO_ADDR
26383: GO 26411
26385: LD_INT 31
26387: DOUBLE
26388: EQUAL
26389: IFTRUE 26399
26391: LD_INT 32
26393: DOUBLE
26394: EQUAL
26395: IFTRUE 26399
26397: GO 26410
26399: POP
// p := 1 ; end ;
26400: LD_ADDR_VAR 0 3
26404: PUSH
26405: LD_INT 1
26407: ST_TO_ADDR
26408: GO 26411
26410: POP
// if UnitsInside ( b ) < p then
26411: LD_VAR 0 5
26415: PPUSH
26416: CALL_OW 313
26420: PUSH
26421: LD_VAR 0 3
26425: LESS
26426: IFFALSE 26446
// begin ComEnterUnit ( un , b ) ;
26428: LD_VAR 0 2
26432: PPUSH
26433: LD_VAR 0 5
26437: PPUSH
26438: CALL_OW 120
// exit ;
26442: POP
26443: POP
26444: GO 26450
// end ; end ;
26446: GO 26347
26448: POP
26449: POP
// end ; end ;
26450: PPOPN 5
26452: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
26453: LD_VAR 0 1
26457: PUSH
26458: LD_INT 2
26460: EQUAL
26461: PUSH
26462: LD_VAR 0 2
26466: PUSH
26467: LD_INT 5
26469: PUSH
26470: LD_INT 8
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: IN
26477: AND
26478: IFFALSE 26487
// YouLost ( FriendlyFire ) ;
26480: LD_STRING FriendlyFire
26482: PPUSH
26483: CALL_OW 104
// end ;
26487: PPOPN 2
26489: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
26490: LD_VAR 0 1
26494: PPUSH
26495: CALL_OW 255
26499: PUSH
26500: LD_INT 8
26502: EQUAL
26503: PUSH
26504: LD_VAR 0 1
26508: PPUSH
26509: CALL_OW 266
26513: PUSH
26514: LD_INT 5
26516: EQUAL
26517: AND
26518: IFFALSE 26532
// SetClass ( unit , class_mortar ) ;
26520: LD_VAR 0 2
26524: PPUSH
26525: LD_INT 8
26527: PPUSH
26528: CALL_OW 336
// end ; end_of_file
26532: PPOPN 2
26534: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 400 , 320 , 260 , 230 ] [ Difficulty ] do
26535: LD_INT 6
26537: PPUSH
26538: LD_INT 1
26540: PPUSH
26541: CALL_OW 287
26545: PUSH
26546: LD_INT 400
26548: PUSH
26549: LD_INT 320
26551: PUSH
26552: LD_INT 260
26554: PUSH
26555: LD_INT 230
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: PUSH
26564: LD_OWVAR 67
26568: ARRAY
26569: LESS
26570: IFFALSE 26597
26572: GO 26574
26574: DISABLE
// begin enable ;
26575: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
26576: LD_INT 1
26578: PPUSH
26579: LD_INT 5
26581: PPUSH
26582: CALL_OW 12
26586: PPUSH
26587: LD_INT 6
26589: PPUSH
26590: LD_INT 1
26592: PPUSH
26593: CALL_OW 55
// end ;
26597: END
// every 0 0$15 trigger Prob ( 50 ) and tick < [ 18 18$00 , 17 17$00 , 16 16$00 , 15 15$00 ] [ Difficulty ] do
26598: LD_INT 50
26600: PPUSH
26601: CALL_OW 13
26605: PUSH
26606: LD_OWVAR 1
26610: PUSH
26611: LD_INT 37800
26613: PUSH
26614: LD_INT 35700
26616: PUSH
26617: LD_INT 33600
26619: PUSH
26620: LD_INT 31500
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: PUSH
26629: LD_OWVAR 67
26633: ARRAY
26634: LESS
26635: AND
26636: IFFALSE 26678
26638: GO 26640
26640: DISABLE
// begin enable ;
26641: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
26642: LD_INT 35
26644: PPUSH
26645: LD_INT 350
26647: PPUSH
26648: CALL_OW 12
26652: PPUSH
26653: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
26657: LD_INT 1
26659: PPUSH
26660: LD_INT 5
26662: PPUSH
26663: CALL_OW 12
26667: PPUSH
26668: LD_INT 21
26670: PPUSH
26671: LD_INT 1
26673: PPUSH
26674: CALL_OW 55
// end ; end_of_file
26678: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
26679: LD_EXP 18
26683: PUSH
26684: LD_EXP 20
26688: AND
26689: PUSH
26690: LD_EXP 17
26694: PUSH
26695: LD_EXP 19
26699: AND
26700: OR
26701: IFFALSE 27020
26703: GO 26705
26705: DISABLE
// begin enable ;
26706: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
26707: LD_EXP 18
26711: PUSH
26712: LD_EXP 20
26716: AND
26717: PUSH
26718: LD_EXP 17
26722: PUSH
26723: LD_EXP 19
26727: AND
26728: AND
26729: IFFALSE 26866
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
26731: LD_ADDR_OWVAR 47
26735: PUSH
26736: LD_STRING #X106-1a
26738: PUSH
26739: LD_EXP 21
26743: PUSH
26744: LD_INT 16
26746: PPUSH
26747: LD_INT 22
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 21
26759: PUSH
26760: LD_INT 2
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 33
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 58
26779: PUSH
26780: EMPTY
26781: LIST
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: PPUSH
26789: CALL_OW 70
26793: MINUS
26794: PPUSH
26795: CALL 66656 0 1
26799: PUSH
26800: LD_STRING #X106-3a
26802: PUSH
26803: LD_EXP 20
26807: PUSH
26808: LD_STRING #X106-1
26810: PUSH
26811: LD_EXP 49
26815: PUSH
26816: LD_INT 0
26818: PLUS
26819: PUSH
26820: LD_EXP 49
26824: PPUSH
26825: LD_INT 55
26827: PUSH
26828: EMPTY
26829: LIST
26830: PPUSH
26831: CALL_OW 72
26835: PUSH
26836: LD_INT 0
26838: PLUS
26839: MINUS
26840: PPUSH
26841: CALL 66656 0 1
26845: PUSH
26846: LD_STRING #X106-3
26848: PUSH
26849: LD_EXP 19
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: ST_TO_ADDR
// end else
26864: GO 27020
// if omarWantVehicles and omarWaitingForVehiclesTimer then
26866: LD_EXP 18
26870: PUSH
26871: LD_EXP 20
26875: AND
26876: IFFALSE 26963
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
26878: LD_ADDR_OWVAR 47
26882: PUSH
26883: LD_STRING #X106-1a
26885: PUSH
26886: LD_EXP 21
26890: PUSH
26891: LD_INT 16
26893: PPUSH
26894: LD_INT 22
26896: PUSH
26897: LD_INT 2
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 21
26906: PUSH
26907: LD_INT 2
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 33
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 58
26926: PUSH
26927: EMPTY
26928: LIST
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: PPUSH
26936: CALL_OW 70
26940: MINUS
26941: PPUSH
26942: CALL 66656 0 1
26946: PUSH
26947: LD_STRING #X106-3a
26949: PUSH
26950: LD_EXP 20
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: ST_TO_ADDR
// end else
26961: GO 27020
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
26963: LD_ADDR_OWVAR 47
26967: PUSH
26968: LD_STRING #X106-1
26970: PUSH
26971: LD_EXP 49
26975: PUSH
26976: LD_INT 0
26978: PLUS
26979: PUSH
26980: LD_EXP 49
26984: PPUSH
26985: LD_INT 55
26987: PUSH
26988: EMPTY
26989: LIST
26990: PPUSH
26991: CALL_OW 72
26995: PUSH
26996: LD_INT 0
26998: PLUS
26999: MINUS
27000: PPUSH
27001: CALL 66656 0 1
27005: PUSH
27006: LD_STRING #X106-3
27008: PUSH
27009: LD_EXP 19
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: ST_TO_ADDR
// end ; end ; end_of_file
27020: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27021: LD_INT 0
27023: PPUSH
27024: PPUSH
// if exist_mode then
27025: LD_VAR 0 2
27029: IFFALSE 27054
// unit := CreateCharacter ( prefix & ident ) else
27031: LD_ADDR_VAR 0 5
27035: PUSH
27036: LD_VAR 0 3
27040: PUSH
27041: LD_VAR 0 1
27045: STR
27046: PPUSH
27047: CALL_OW 34
27051: ST_TO_ADDR
27052: GO 27069
// unit := NewCharacter ( ident ) ;
27054: LD_ADDR_VAR 0 5
27058: PUSH
27059: LD_VAR 0 1
27063: PPUSH
27064: CALL_OW 25
27068: ST_TO_ADDR
// result := unit ;
27069: LD_ADDR_VAR 0 4
27073: PUSH
27074: LD_VAR 0 5
27078: ST_TO_ADDR
// end ;
27079: LD_VAR 0 4
27083: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27084: LD_INT 0
27086: PPUSH
27087: PPUSH
// if not side or not nation then
27088: LD_VAR 0 1
27092: NOT
27093: PUSH
27094: LD_VAR 0 2
27098: NOT
27099: OR
27100: IFFALSE 27104
// exit ;
27102: GO 27872
// case nation of nation_american :
27104: LD_VAR 0 2
27108: PUSH
27109: LD_INT 1
27111: DOUBLE
27112: EQUAL
27113: IFTRUE 27117
27115: GO 27331
27117: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27118: LD_ADDR_VAR 0 4
27122: PUSH
27123: LD_INT 35
27125: PUSH
27126: LD_INT 45
27128: PUSH
27129: LD_INT 46
27131: PUSH
27132: LD_INT 47
27134: PUSH
27135: LD_INT 82
27137: PUSH
27138: LD_INT 83
27140: PUSH
27141: LD_INT 84
27143: PUSH
27144: LD_INT 85
27146: PUSH
27147: LD_INT 86
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 6
27158: PUSH
27159: LD_INT 15
27161: PUSH
27162: LD_INT 16
27164: PUSH
27165: LD_INT 7
27167: PUSH
27168: LD_INT 12
27170: PUSH
27171: LD_INT 13
27173: PUSH
27174: LD_INT 10
27176: PUSH
27177: LD_INT 14
27179: PUSH
27180: LD_INT 20
27182: PUSH
27183: LD_INT 21
27185: PUSH
27186: LD_INT 22
27188: PUSH
27189: LD_INT 25
27191: PUSH
27192: LD_INT 32
27194: PUSH
27195: LD_INT 27
27197: PUSH
27198: LD_INT 36
27200: PUSH
27201: LD_INT 69
27203: PUSH
27204: LD_INT 39
27206: PUSH
27207: LD_INT 34
27209: PUSH
27210: LD_INT 40
27212: PUSH
27213: LD_INT 48
27215: PUSH
27216: LD_INT 49
27218: PUSH
27219: LD_INT 50
27221: PUSH
27222: LD_INT 51
27224: PUSH
27225: LD_INT 52
27227: PUSH
27228: LD_INT 53
27230: PUSH
27231: LD_INT 54
27233: PUSH
27234: LD_INT 55
27236: PUSH
27237: LD_INT 56
27239: PUSH
27240: LD_INT 57
27242: PUSH
27243: LD_INT 58
27245: PUSH
27246: LD_INT 59
27248: PUSH
27249: LD_INT 60
27251: PUSH
27252: LD_INT 61
27254: PUSH
27255: LD_INT 62
27257: PUSH
27258: LD_INT 80
27260: PUSH
27261: LD_INT 82
27263: PUSH
27264: LD_INT 83
27266: PUSH
27267: LD_INT 84
27269: PUSH
27270: LD_INT 85
27272: PUSH
27273: LD_INT 86
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: ST_TO_ADDR
27329: GO 27796
27331: LD_INT 2
27333: DOUBLE
27334: EQUAL
27335: IFTRUE 27339
27337: GO 27565
27339: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27340: LD_ADDR_VAR 0 4
27344: PUSH
27345: LD_INT 35
27347: PUSH
27348: LD_INT 45
27350: PUSH
27351: LD_INT 46
27353: PUSH
27354: LD_INT 47
27356: PUSH
27357: LD_INT 82
27359: PUSH
27360: LD_INT 83
27362: PUSH
27363: LD_INT 84
27365: PUSH
27366: LD_INT 85
27368: PUSH
27369: LD_INT 87
27371: PUSH
27372: LD_INT 70
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: LD_INT 11
27380: PUSH
27381: LD_INT 3
27383: PUSH
27384: LD_INT 4
27386: PUSH
27387: LD_INT 5
27389: PUSH
27390: LD_INT 6
27392: PUSH
27393: LD_INT 15
27395: PUSH
27396: LD_INT 18
27398: PUSH
27399: LD_INT 7
27401: PUSH
27402: LD_INT 17
27404: PUSH
27405: LD_INT 8
27407: PUSH
27408: LD_INT 20
27410: PUSH
27411: LD_INT 21
27413: PUSH
27414: LD_INT 22
27416: PUSH
27417: LD_INT 72
27419: PUSH
27420: LD_INT 26
27422: PUSH
27423: LD_INT 69
27425: PUSH
27426: LD_INT 39
27428: PUSH
27429: LD_INT 40
27431: PUSH
27432: LD_INT 41
27434: PUSH
27435: LD_INT 42
27437: PUSH
27438: LD_INT 43
27440: PUSH
27441: LD_INT 48
27443: PUSH
27444: LD_INT 49
27446: PUSH
27447: LD_INT 50
27449: PUSH
27450: LD_INT 51
27452: PUSH
27453: LD_INT 52
27455: PUSH
27456: LD_INT 53
27458: PUSH
27459: LD_INT 54
27461: PUSH
27462: LD_INT 55
27464: PUSH
27465: LD_INT 56
27467: PUSH
27468: LD_INT 60
27470: PUSH
27471: LD_INT 61
27473: PUSH
27474: LD_INT 62
27476: PUSH
27477: LD_INT 66
27479: PUSH
27480: LD_INT 67
27482: PUSH
27483: LD_INT 68
27485: PUSH
27486: LD_INT 81
27488: PUSH
27489: LD_INT 82
27491: PUSH
27492: LD_INT 83
27494: PUSH
27495: LD_INT 84
27497: PUSH
27498: LD_INT 85
27500: PUSH
27501: LD_INT 87
27503: PUSH
27504: LD_INT 88
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: ST_TO_ADDR
27563: GO 27796
27565: LD_INT 3
27567: DOUBLE
27568: EQUAL
27569: IFTRUE 27573
27571: GO 27795
27573: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27574: LD_ADDR_VAR 0 4
27578: PUSH
27579: LD_INT 46
27581: PUSH
27582: LD_INT 47
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: LD_INT 82
27593: PUSH
27594: LD_INT 83
27596: PUSH
27597: LD_INT 84
27599: PUSH
27600: LD_INT 85
27602: PUSH
27603: LD_INT 86
27605: PUSH
27606: LD_INT 11
27608: PUSH
27609: LD_INT 9
27611: PUSH
27612: LD_INT 20
27614: PUSH
27615: LD_INT 19
27617: PUSH
27618: LD_INT 21
27620: PUSH
27621: LD_INT 24
27623: PUSH
27624: LD_INT 22
27626: PUSH
27627: LD_INT 25
27629: PUSH
27630: LD_INT 28
27632: PUSH
27633: LD_INT 29
27635: PUSH
27636: LD_INT 30
27638: PUSH
27639: LD_INT 31
27641: PUSH
27642: LD_INT 37
27644: PUSH
27645: LD_INT 38
27647: PUSH
27648: LD_INT 32
27650: PUSH
27651: LD_INT 27
27653: PUSH
27654: LD_INT 33
27656: PUSH
27657: LD_INT 69
27659: PUSH
27660: LD_INT 39
27662: PUSH
27663: LD_INT 34
27665: PUSH
27666: LD_INT 40
27668: PUSH
27669: LD_INT 71
27671: PUSH
27672: LD_INT 23
27674: PUSH
27675: LD_INT 44
27677: PUSH
27678: LD_INT 48
27680: PUSH
27681: LD_INT 49
27683: PUSH
27684: LD_INT 50
27686: PUSH
27687: LD_INT 51
27689: PUSH
27690: LD_INT 52
27692: PUSH
27693: LD_INT 53
27695: PUSH
27696: LD_INT 54
27698: PUSH
27699: LD_INT 55
27701: PUSH
27702: LD_INT 56
27704: PUSH
27705: LD_INT 57
27707: PUSH
27708: LD_INT 58
27710: PUSH
27711: LD_INT 59
27713: PUSH
27714: LD_INT 63
27716: PUSH
27717: LD_INT 64
27719: PUSH
27720: LD_INT 65
27722: PUSH
27723: LD_INT 82
27725: PUSH
27726: LD_INT 83
27728: PUSH
27729: LD_INT 84
27731: PUSH
27732: LD_INT 85
27734: PUSH
27735: LD_INT 86
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: ST_TO_ADDR
27793: GO 27796
27795: POP
// if state > - 1 and state < 3 then
27796: LD_VAR 0 3
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: GREATER
27805: PUSH
27806: LD_VAR 0 3
27810: PUSH
27811: LD_INT 3
27813: LESS
27814: AND
27815: IFFALSE 27872
// for i in result do
27817: LD_ADDR_VAR 0 5
27821: PUSH
27822: LD_VAR 0 4
27826: PUSH
27827: FOR_IN
27828: IFFALSE 27870
// if GetTech ( i , side ) <> state then
27830: LD_VAR 0 5
27834: PPUSH
27835: LD_VAR 0 1
27839: PPUSH
27840: CALL_OW 321
27844: PUSH
27845: LD_VAR 0 3
27849: NONEQUAL
27850: IFFALSE 27868
// result := result diff i ;
27852: LD_ADDR_VAR 0 4
27856: PUSH
27857: LD_VAR 0 4
27861: PUSH
27862: LD_VAR 0 5
27866: DIFF
27867: ST_TO_ADDR
27868: GO 27827
27870: POP
27871: POP
// end ;
27872: LD_VAR 0 4
27876: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27877: LD_INT 0
27879: PPUSH
27880: PPUSH
27881: PPUSH
// result := true ;
27882: LD_ADDR_VAR 0 3
27886: PUSH
27887: LD_INT 1
27889: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27890: LD_ADDR_VAR 0 5
27894: PUSH
27895: LD_VAR 0 2
27899: PPUSH
27900: CALL_OW 480
27904: ST_TO_ADDR
// if not tmp then
27905: LD_VAR 0 5
27909: NOT
27910: IFFALSE 27914
// exit ;
27912: GO 27963
// for i in tmp do
27914: LD_ADDR_VAR 0 4
27918: PUSH
27919: LD_VAR 0 5
27923: PUSH
27924: FOR_IN
27925: IFFALSE 27961
// if GetTech ( i , side ) <> state_researched then
27927: LD_VAR 0 4
27931: PPUSH
27932: LD_VAR 0 1
27936: PPUSH
27937: CALL_OW 321
27941: PUSH
27942: LD_INT 2
27944: NONEQUAL
27945: IFFALSE 27959
// begin result := false ;
27947: LD_ADDR_VAR 0 3
27951: PUSH
27952: LD_INT 0
27954: ST_TO_ADDR
// exit ;
27955: POP
27956: POP
27957: GO 27963
// end ;
27959: GO 27924
27961: POP
27962: POP
// end ;
27963: LD_VAR 0 3
27967: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27968: LD_INT 0
27970: PPUSH
27971: PPUSH
27972: PPUSH
27973: PPUSH
27974: PPUSH
27975: PPUSH
27976: PPUSH
27977: PPUSH
27978: PPUSH
27979: PPUSH
27980: PPUSH
27981: PPUSH
27982: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27983: LD_VAR 0 1
27987: NOT
27988: PUSH
27989: LD_VAR 0 1
27993: PPUSH
27994: CALL_OW 257
27998: PUSH
27999: LD_INT 9
28001: NONEQUAL
28002: OR
28003: IFFALSE 28007
// exit ;
28005: GO 28580
// side := GetSide ( unit ) ;
28007: LD_ADDR_VAR 0 9
28011: PUSH
28012: LD_VAR 0 1
28016: PPUSH
28017: CALL_OW 255
28021: ST_TO_ADDR
// tech_space := tech_spacanom ;
28022: LD_ADDR_VAR 0 12
28026: PUSH
28027: LD_INT 29
28029: ST_TO_ADDR
// tech_time := tech_taurad ;
28030: LD_ADDR_VAR 0 13
28034: PUSH
28035: LD_INT 28
28037: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28038: LD_ADDR_VAR 0 11
28042: PUSH
28043: LD_VAR 0 1
28047: PPUSH
28048: CALL_OW 310
28052: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28053: LD_VAR 0 11
28057: PPUSH
28058: CALL_OW 247
28062: PUSH
28063: LD_INT 2
28065: EQUAL
28066: IFFALSE 28070
// exit ;
28068: GO 28580
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28070: LD_ADDR_VAR 0 8
28074: PUSH
28075: LD_INT 81
28077: PUSH
28078: LD_VAR 0 9
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 3
28089: PUSH
28090: LD_INT 21
28092: PUSH
28093: LD_INT 3
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PPUSH
28108: CALL_OW 69
28112: ST_TO_ADDR
// if not tmp then
28113: LD_VAR 0 8
28117: NOT
28118: IFFALSE 28122
// exit ;
28120: GO 28580
// if in_unit then
28122: LD_VAR 0 11
28126: IFFALSE 28150
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28128: LD_ADDR_VAR 0 10
28132: PUSH
28133: LD_VAR 0 8
28137: PPUSH
28138: LD_VAR 0 11
28142: PPUSH
28143: CALL_OW 74
28147: ST_TO_ADDR
28148: GO 28170
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28150: LD_ADDR_VAR 0 10
28154: PUSH
28155: LD_VAR 0 8
28159: PPUSH
28160: LD_VAR 0 1
28164: PPUSH
28165: CALL_OW 74
28169: ST_TO_ADDR
// if not enemy then
28170: LD_VAR 0 10
28174: NOT
28175: IFFALSE 28179
// exit ;
28177: GO 28580
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28179: LD_VAR 0 11
28183: PUSH
28184: LD_VAR 0 11
28188: PPUSH
28189: LD_VAR 0 10
28193: PPUSH
28194: CALL_OW 296
28198: PUSH
28199: LD_INT 13
28201: GREATER
28202: AND
28203: PUSH
28204: LD_VAR 0 1
28208: PPUSH
28209: LD_VAR 0 10
28213: PPUSH
28214: CALL_OW 296
28218: PUSH
28219: LD_INT 12
28221: GREATER
28222: OR
28223: IFFALSE 28227
// exit ;
28225: GO 28580
// missile := [ 1 ] ;
28227: LD_ADDR_VAR 0 14
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: EMPTY
28236: LIST
28237: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28238: LD_VAR 0 9
28242: PPUSH
28243: LD_VAR 0 12
28247: PPUSH
28248: CALL_OW 325
28252: IFFALSE 28281
// missile := Replace ( missile , missile + 1 , 2 ) ;
28254: LD_ADDR_VAR 0 14
28258: PUSH
28259: LD_VAR 0 14
28263: PPUSH
28264: LD_VAR 0 14
28268: PUSH
28269: LD_INT 1
28271: PLUS
28272: PPUSH
28273: LD_INT 2
28275: PPUSH
28276: CALL_OW 1
28280: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28281: LD_VAR 0 9
28285: PPUSH
28286: LD_VAR 0 13
28290: PPUSH
28291: CALL_OW 325
28295: PUSH
28296: LD_VAR 0 10
28300: PPUSH
28301: CALL_OW 255
28305: PPUSH
28306: LD_VAR 0 13
28310: PPUSH
28311: CALL_OW 325
28315: NOT
28316: AND
28317: IFFALSE 28346
// missile := Replace ( missile , missile + 1 , 3 ) ;
28319: LD_ADDR_VAR 0 14
28323: PUSH
28324: LD_VAR 0 14
28328: PPUSH
28329: LD_VAR 0 14
28333: PUSH
28334: LD_INT 1
28336: PLUS
28337: PPUSH
28338: LD_INT 3
28340: PPUSH
28341: CALL_OW 1
28345: ST_TO_ADDR
// if missile < 2 then
28346: LD_VAR 0 14
28350: PUSH
28351: LD_INT 2
28353: LESS
28354: IFFALSE 28358
// exit ;
28356: GO 28580
// x := GetX ( enemy ) ;
28358: LD_ADDR_VAR 0 4
28362: PUSH
28363: LD_VAR 0 10
28367: PPUSH
28368: CALL_OW 250
28372: ST_TO_ADDR
// y := GetY ( enemy ) ;
28373: LD_ADDR_VAR 0 5
28377: PUSH
28378: LD_VAR 0 10
28382: PPUSH
28383: CALL_OW 251
28387: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28388: LD_ADDR_VAR 0 6
28392: PUSH
28393: LD_VAR 0 4
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PPUSH
28402: LD_INT 1
28404: PPUSH
28405: CALL_OW 12
28409: PLUS
28410: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28411: LD_ADDR_VAR 0 7
28415: PUSH
28416: LD_VAR 0 5
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PPUSH
28425: LD_INT 1
28427: PPUSH
28428: CALL_OW 12
28432: PLUS
28433: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28434: LD_VAR 0 6
28438: PPUSH
28439: LD_VAR 0 7
28443: PPUSH
28444: CALL_OW 488
28448: NOT
28449: IFFALSE 28471
// begin _x := x ;
28451: LD_ADDR_VAR 0 6
28455: PUSH
28456: LD_VAR 0 4
28460: ST_TO_ADDR
// _y := y ;
28461: LD_ADDR_VAR 0 7
28465: PUSH
28466: LD_VAR 0 5
28470: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28471: LD_ADDR_VAR 0 3
28475: PUSH
28476: LD_INT 1
28478: PPUSH
28479: LD_VAR 0 14
28483: PPUSH
28484: CALL_OW 12
28488: ST_TO_ADDR
// case i of 1 :
28489: LD_VAR 0 3
28493: PUSH
28494: LD_INT 1
28496: DOUBLE
28497: EQUAL
28498: IFTRUE 28502
28500: GO 28519
28502: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28503: LD_VAR 0 1
28507: PPUSH
28508: LD_VAR 0 10
28512: PPUSH
28513: CALL_OW 115
28517: GO 28580
28519: LD_INT 2
28521: DOUBLE
28522: EQUAL
28523: IFTRUE 28527
28525: GO 28549
28527: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28528: LD_VAR 0 1
28532: PPUSH
28533: LD_VAR 0 6
28537: PPUSH
28538: LD_VAR 0 7
28542: PPUSH
28543: CALL_OW 153
28547: GO 28580
28549: LD_INT 3
28551: DOUBLE
28552: EQUAL
28553: IFTRUE 28557
28555: GO 28579
28557: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28558: LD_VAR 0 1
28562: PPUSH
28563: LD_VAR 0 6
28567: PPUSH
28568: LD_VAR 0 7
28572: PPUSH
28573: CALL_OW 154
28577: GO 28580
28579: POP
// end ;
28580: LD_VAR 0 2
28584: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28585: LD_INT 0
28587: PPUSH
28588: PPUSH
28589: PPUSH
28590: PPUSH
28591: PPUSH
28592: PPUSH
// if not unit or not building then
28593: LD_VAR 0 1
28597: NOT
28598: PUSH
28599: LD_VAR 0 2
28603: NOT
28604: OR
28605: IFFALSE 28609
// exit ;
28607: GO 28767
// x := GetX ( building ) ;
28609: LD_ADDR_VAR 0 5
28613: PUSH
28614: LD_VAR 0 2
28618: PPUSH
28619: CALL_OW 250
28623: ST_TO_ADDR
// y := GetY ( building ) ;
28624: LD_ADDR_VAR 0 6
28628: PUSH
28629: LD_VAR 0 2
28633: PPUSH
28634: CALL_OW 251
28638: ST_TO_ADDR
// for i = 0 to 5 do
28639: LD_ADDR_VAR 0 4
28643: PUSH
28644: DOUBLE
28645: LD_INT 0
28647: DEC
28648: ST_TO_ADDR
28649: LD_INT 5
28651: PUSH
28652: FOR_TO
28653: IFFALSE 28765
// begin _x := ShiftX ( x , i , 3 ) ;
28655: LD_ADDR_VAR 0 7
28659: PUSH
28660: LD_VAR 0 5
28664: PPUSH
28665: LD_VAR 0 4
28669: PPUSH
28670: LD_INT 3
28672: PPUSH
28673: CALL_OW 272
28677: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28678: LD_ADDR_VAR 0 8
28682: PUSH
28683: LD_VAR 0 6
28687: PPUSH
28688: LD_VAR 0 4
28692: PPUSH
28693: LD_INT 3
28695: PPUSH
28696: CALL_OW 273
28700: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28701: LD_VAR 0 7
28705: PPUSH
28706: LD_VAR 0 8
28710: PPUSH
28711: CALL_OW 488
28715: NOT
28716: IFFALSE 28720
// continue ;
28718: GO 28652
// if HexInfo ( _x , _y ) = 0 then
28720: LD_VAR 0 7
28724: PPUSH
28725: LD_VAR 0 8
28729: PPUSH
28730: CALL_OW 428
28734: PUSH
28735: LD_INT 0
28737: EQUAL
28738: IFFALSE 28763
// begin ComMoveXY ( unit , _x , _y ) ;
28740: LD_VAR 0 1
28744: PPUSH
28745: LD_VAR 0 7
28749: PPUSH
28750: LD_VAR 0 8
28754: PPUSH
28755: CALL_OW 111
// exit ;
28759: POP
28760: POP
28761: GO 28767
// end ; end ;
28763: GO 28652
28765: POP
28766: POP
// end ;
28767: LD_VAR 0 3
28771: RET
// export function ScanBase ( side , base_area ) ; begin
28772: LD_INT 0
28774: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28775: LD_ADDR_VAR 0 3
28779: PUSH
28780: LD_VAR 0 2
28784: PPUSH
28785: LD_INT 81
28787: PUSH
28788: LD_VAR 0 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PPUSH
28797: CALL_OW 70
28801: ST_TO_ADDR
// end ;
28802: LD_VAR 0 3
28806: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28807: LD_INT 0
28809: PPUSH
28810: PPUSH
28811: PPUSH
28812: PPUSH
// result := false ;
28813: LD_ADDR_VAR 0 2
28817: PUSH
28818: LD_INT 0
28820: ST_TO_ADDR
// side := GetSide ( unit ) ;
28821: LD_ADDR_VAR 0 3
28825: PUSH
28826: LD_VAR 0 1
28830: PPUSH
28831: CALL_OW 255
28835: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28836: LD_ADDR_VAR 0 4
28840: PUSH
28841: LD_VAR 0 1
28845: PPUSH
28846: CALL_OW 248
28850: ST_TO_ADDR
// case nat of 1 :
28851: LD_VAR 0 4
28855: PUSH
28856: LD_INT 1
28858: DOUBLE
28859: EQUAL
28860: IFTRUE 28864
28862: GO 28875
28864: POP
// tech := tech_lassight ; 2 :
28865: LD_ADDR_VAR 0 5
28869: PUSH
28870: LD_INT 12
28872: ST_TO_ADDR
28873: GO 28914
28875: LD_INT 2
28877: DOUBLE
28878: EQUAL
28879: IFTRUE 28883
28881: GO 28894
28883: POP
// tech := tech_mortar ; 3 :
28884: LD_ADDR_VAR 0 5
28888: PUSH
28889: LD_INT 41
28891: ST_TO_ADDR
28892: GO 28914
28894: LD_INT 3
28896: DOUBLE
28897: EQUAL
28898: IFTRUE 28902
28900: GO 28913
28902: POP
// tech := tech_bazooka ; end ;
28903: LD_ADDR_VAR 0 5
28907: PUSH
28908: LD_INT 44
28910: ST_TO_ADDR
28911: GO 28914
28913: POP
// if Researched ( side , tech ) then
28914: LD_VAR 0 3
28918: PPUSH
28919: LD_VAR 0 5
28923: PPUSH
28924: CALL_OW 325
28928: IFFALSE 28955
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28930: LD_ADDR_VAR 0 2
28934: PUSH
28935: LD_INT 5
28937: PUSH
28938: LD_INT 8
28940: PUSH
28941: LD_INT 9
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: LIST
28948: PUSH
28949: LD_VAR 0 4
28953: ARRAY
28954: ST_TO_ADDR
// end ;
28955: LD_VAR 0 2
28959: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28960: LD_INT 0
28962: PPUSH
28963: PPUSH
28964: PPUSH
// if not mines then
28965: LD_VAR 0 2
28969: NOT
28970: IFFALSE 28974
// exit ;
28972: GO 29118
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28974: LD_ADDR_VAR 0 5
28978: PUSH
28979: LD_INT 81
28981: PUSH
28982: LD_VAR 0 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 3
28993: PUSH
28994: LD_INT 21
28996: PUSH
28997: LD_INT 3
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PPUSH
29012: CALL_OW 69
29016: ST_TO_ADDR
// for i in mines do
29017: LD_ADDR_VAR 0 4
29021: PUSH
29022: LD_VAR 0 2
29026: PUSH
29027: FOR_IN
29028: IFFALSE 29116
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29030: LD_VAR 0 4
29034: PUSH
29035: LD_INT 1
29037: ARRAY
29038: PPUSH
29039: LD_VAR 0 4
29043: PUSH
29044: LD_INT 2
29046: ARRAY
29047: PPUSH
29048: CALL_OW 458
29052: NOT
29053: IFFALSE 29057
// continue ;
29055: GO 29027
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29057: LD_VAR 0 4
29061: PUSH
29062: LD_INT 1
29064: ARRAY
29065: PPUSH
29066: LD_VAR 0 4
29070: PUSH
29071: LD_INT 2
29073: ARRAY
29074: PPUSH
29075: CALL_OW 428
29079: PUSH
29080: LD_VAR 0 5
29084: IN
29085: IFFALSE 29114
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29087: LD_VAR 0 4
29091: PUSH
29092: LD_INT 1
29094: ARRAY
29095: PPUSH
29096: LD_VAR 0 4
29100: PUSH
29101: LD_INT 2
29103: ARRAY
29104: PPUSH
29105: LD_VAR 0 1
29109: PPUSH
29110: CALL_OW 456
// end ;
29114: GO 29027
29116: POP
29117: POP
// end ;
29118: LD_VAR 0 3
29122: RET
// export function Count ( array ) ; var i ; begin
29123: LD_INT 0
29125: PPUSH
29126: PPUSH
// result := 0 ;
29127: LD_ADDR_VAR 0 2
29131: PUSH
29132: LD_INT 0
29134: ST_TO_ADDR
// for i in array do
29135: LD_ADDR_VAR 0 3
29139: PUSH
29140: LD_VAR 0 1
29144: PUSH
29145: FOR_IN
29146: IFFALSE 29170
// if i then
29148: LD_VAR 0 3
29152: IFFALSE 29168
// result := result + 1 ;
29154: LD_ADDR_VAR 0 2
29158: PUSH
29159: LD_VAR 0 2
29163: PUSH
29164: LD_INT 1
29166: PLUS
29167: ST_TO_ADDR
29168: GO 29145
29170: POP
29171: POP
// end ;
29172: LD_VAR 0 2
29176: RET
// export function IsEmpty ( building ) ; begin
29177: LD_INT 0
29179: PPUSH
// if not building then
29180: LD_VAR 0 1
29184: NOT
29185: IFFALSE 29189
// exit ;
29187: GO 29232
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29189: LD_ADDR_VAR 0 2
29193: PUSH
29194: LD_VAR 0 1
29198: PUSH
29199: LD_INT 22
29201: PUSH
29202: LD_VAR 0 1
29206: PPUSH
29207: CALL_OW 255
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 58
29218: PUSH
29219: EMPTY
29220: LIST
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PPUSH
29226: CALL_OW 69
29230: IN
29231: ST_TO_ADDR
// end ;
29232: LD_VAR 0 2
29236: RET
// export function IsNotFull ( building ) ; var places ; begin
29237: LD_INT 0
29239: PPUSH
29240: PPUSH
// if not building then
29241: LD_VAR 0 1
29245: NOT
29246: IFFALSE 29250
// exit ;
29248: GO 29421
// result := false ;
29250: LD_ADDR_VAR 0 2
29254: PUSH
29255: LD_INT 0
29257: ST_TO_ADDR
// places := 0 ;
29258: LD_ADDR_VAR 0 3
29262: PUSH
29263: LD_INT 0
29265: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29266: LD_VAR 0 1
29270: PPUSH
29271: CALL_OW 266
29275: PUSH
29276: LD_INT 0
29278: DOUBLE
29279: EQUAL
29280: IFTRUE 29338
29282: LD_INT 1
29284: DOUBLE
29285: EQUAL
29286: IFTRUE 29338
29288: LD_INT 6
29290: DOUBLE
29291: EQUAL
29292: IFTRUE 29338
29294: LD_INT 7
29296: DOUBLE
29297: EQUAL
29298: IFTRUE 29338
29300: LD_INT 8
29302: DOUBLE
29303: EQUAL
29304: IFTRUE 29338
29306: LD_INT 4
29308: DOUBLE
29309: EQUAL
29310: IFTRUE 29338
29312: LD_INT 5
29314: DOUBLE
29315: EQUAL
29316: IFTRUE 29338
29318: LD_INT 2
29320: DOUBLE
29321: EQUAL
29322: IFTRUE 29338
29324: LD_INT 3
29326: DOUBLE
29327: EQUAL
29328: IFTRUE 29338
29330: LD_INT 35
29332: DOUBLE
29333: EQUAL
29334: IFTRUE 29338
29336: GO 29349
29338: POP
// places := 6 ; b_bunker , b_breastwork :
29339: LD_ADDR_VAR 0 3
29343: PUSH
29344: LD_INT 6
29346: ST_TO_ADDR
29347: GO 29394
29349: LD_INT 32
29351: DOUBLE
29352: EQUAL
29353: IFTRUE 29363
29355: LD_INT 31
29357: DOUBLE
29358: EQUAL
29359: IFTRUE 29363
29361: GO 29374
29363: POP
// places := 1 ; b_control_tower :
29364: LD_ADDR_VAR 0 3
29368: PUSH
29369: LD_INT 1
29371: ST_TO_ADDR
29372: GO 29394
29374: LD_INT 36
29376: DOUBLE
29377: EQUAL
29378: IFTRUE 29382
29380: GO 29393
29382: POP
// places := 3 ; end ;
29383: LD_ADDR_VAR 0 3
29387: PUSH
29388: LD_INT 3
29390: ST_TO_ADDR
29391: GO 29394
29393: POP
// if places then
29394: LD_VAR 0 3
29398: IFFALSE 29421
// result := UnitsInside ( building ) < places ;
29400: LD_ADDR_VAR 0 2
29404: PUSH
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL_OW 313
29414: PUSH
29415: LD_VAR 0 3
29419: LESS
29420: ST_TO_ADDR
// end ;
29421: LD_VAR 0 2
29425: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29426: LD_INT 0
29428: PPUSH
29429: PPUSH
29430: PPUSH
29431: PPUSH
// tmp := [ ] ;
29432: LD_ADDR_VAR 0 3
29436: PUSH
29437: EMPTY
29438: ST_TO_ADDR
// list := [ ] ;
29439: LD_ADDR_VAR 0 5
29443: PUSH
29444: EMPTY
29445: ST_TO_ADDR
// for i = 16 to 25 do
29446: LD_ADDR_VAR 0 4
29450: PUSH
29451: DOUBLE
29452: LD_INT 16
29454: DEC
29455: ST_TO_ADDR
29456: LD_INT 25
29458: PUSH
29459: FOR_TO
29460: IFFALSE 29533
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29462: LD_ADDR_VAR 0 3
29466: PUSH
29467: LD_VAR 0 3
29471: PUSH
29472: LD_INT 22
29474: PUSH
29475: LD_VAR 0 1
29479: PPUSH
29480: CALL_OW 255
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 91
29491: PUSH
29492: LD_VAR 0 1
29496: PUSH
29497: LD_INT 6
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 30
29507: PUSH
29508: LD_VAR 0 4
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: LIST
29521: PUSH
29522: EMPTY
29523: LIST
29524: PPUSH
29525: CALL_OW 69
29529: ADD
29530: ST_TO_ADDR
29531: GO 29459
29533: POP
29534: POP
// for i = 1 to tmp do
29535: LD_ADDR_VAR 0 4
29539: PUSH
29540: DOUBLE
29541: LD_INT 1
29543: DEC
29544: ST_TO_ADDR
29545: LD_VAR 0 3
29549: PUSH
29550: FOR_TO
29551: IFFALSE 29639
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29553: LD_ADDR_VAR 0 5
29557: PUSH
29558: LD_VAR 0 5
29562: PUSH
29563: LD_VAR 0 3
29567: PUSH
29568: LD_VAR 0 4
29572: ARRAY
29573: PPUSH
29574: CALL_OW 266
29578: PUSH
29579: LD_VAR 0 3
29583: PUSH
29584: LD_VAR 0 4
29588: ARRAY
29589: PPUSH
29590: CALL_OW 250
29594: PUSH
29595: LD_VAR 0 3
29599: PUSH
29600: LD_VAR 0 4
29604: ARRAY
29605: PPUSH
29606: CALL_OW 251
29610: PUSH
29611: LD_VAR 0 3
29615: PUSH
29616: LD_VAR 0 4
29620: ARRAY
29621: PPUSH
29622: CALL_OW 254
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: PUSH
29633: EMPTY
29634: LIST
29635: ADD
29636: ST_TO_ADDR
29637: GO 29550
29639: POP
29640: POP
// result := list ;
29641: LD_ADDR_VAR 0 2
29645: PUSH
29646: LD_VAR 0 5
29650: ST_TO_ADDR
// end ;
29651: LD_VAR 0 2
29655: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29656: LD_INT 0
29658: PPUSH
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
29664: PPUSH
// if not factory then
29665: LD_VAR 0 1
29669: NOT
29670: IFFALSE 29674
// exit ;
29672: GO 30267
// if control = control_apeman then
29674: LD_VAR 0 4
29678: PUSH
29679: LD_INT 5
29681: EQUAL
29682: IFFALSE 29791
// begin tmp := UnitsInside ( factory ) ;
29684: LD_ADDR_VAR 0 8
29688: PUSH
29689: LD_VAR 0 1
29693: PPUSH
29694: CALL_OW 313
29698: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29699: LD_VAR 0 8
29703: PPUSH
29704: LD_INT 25
29706: PUSH
29707: LD_INT 12
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PPUSH
29714: CALL_OW 72
29718: NOT
29719: IFFALSE 29729
// control := control_manual ;
29721: LD_ADDR_VAR 0 4
29725: PUSH
29726: LD_INT 1
29728: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29729: LD_ADDR_VAR 0 8
29733: PUSH
29734: LD_VAR 0 1
29738: PPUSH
29739: CALL 29426 0 1
29743: ST_TO_ADDR
// if tmp then
29744: LD_VAR 0 8
29748: IFFALSE 29791
// begin for i in tmp do
29750: LD_ADDR_VAR 0 7
29754: PUSH
29755: LD_VAR 0 8
29759: PUSH
29760: FOR_IN
29761: IFFALSE 29789
// if i [ 1 ] = b_ext_radio then
29763: LD_VAR 0 7
29767: PUSH
29768: LD_INT 1
29770: ARRAY
29771: PUSH
29772: LD_INT 22
29774: EQUAL
29775: IFFALSE 29787
// begin control := control_remote ;
29777: LD_ADDR_VAR 0 4
29781: PUSH
29782: LD_INT 2
29784: ST_TO_ADDR
// break ;
29785: GO 29789
// end ;
29787: GO 29760
29789: POP
29790: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29791: LD_VAR 0 1
29795: PPUSH
29796: LD_VAR 0 2
29800: PPUSH
29801: LD_VAR 0 3
29805: PPUSH
29806: LD_VAR 0 4
29810: PPUSH
29811: LD_VAR 0 5
29815: PPUSH
29816: CALL_OW 448
29820: IFFALSE 29855
// begin result := [ chassis , engine , control , weapon ] ;
29822: LD_ADDR_VAR 0 6
29826: PUSH
29827: LD_VAR 0 2
29831: PUSH
29832: LD_VAR 0 3
29836: PUSH
29837: LD_VAR 0 4
29841: PUSH
29842: LD_VAR 0 5
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: ST_TO_ADDR
// exit ;
29853: GO 30267
// end ; _chassis := AvailableChassisList ( factory ) ;
29855: LD_ADDR_VAR 0 9
29859: PUSH
29860: LD_VAR 0 1
29864: PPUSH
29865: CALL_OW 475
29869: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29870: LD_ADDR_VAR 0 11
29874: PUSH
29875: LD_VAR 0 1
29879: PPUSH
29880: CALL_OW 476
29884: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29885: LD_ADDR_VAR 0 12
29889: PUSH
29890: LD_VAR 0 1
29894: PPUSH
29895: CALL_OW 477
29899: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29900: LD_ADDR_VAR 0 10
29904: PUSH
29905: LD_VAR 0 1
29909: PPUSH
29910: CALL_OW 478
29914: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29915: LD_VAR 0 9
29919: NOT
29920: PUSH
29921: LD_VAR 0 11
29925: NOT
29926: OR
29927: PUSH
29928: LD_VAR 0 12
29932: NOT
29933: OR
29934: PUSH
29935: LD_VAR 0 10
29939: NOT
29940: OR
29941: IFFALSE 29976
// begin result := [ chassis , engine , control , weapon ] ;
29943: LD_ADDR_VAR 0 6
29947: PUSH
29948: LD_VAR 0 2
29952: PUSH
29953: LD_VAR 0 3
29957: PUSH
29958: LD_VAR 0 4
29962: PUSH
29963: LD_VAR 0 5
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: ST_TO_ADDR
// exit ;
29974: GO 30267
// end ; if not chassis in _chassis then
29976: LD_VAR 0 2
29980: PUSH
29981: LD_VAR 0 9
29985: IN
29986: NOT
29987: IFFALSE 30013
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29989: LD_ADDR_VAR 0 2
29993: PUSH
29994: LD_VAR 0 9
29998: PUSH
29999: LD_INT 1
30001: PPUSH
30002: LD_VAR 0 9
30006: PPUSH
30007: CALL_OW 12
30011: ARRAY
30012: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30013: LD_VAR 0 2
30017: PPUSH
30018: LD_VAR 0 3
30022: PPUSH
30023: CALL 30272 0 2
30027: NOT
30028: IFFALSE 30087
// repeat engine := _engine [ 1 ] ;
30030: LD_ADDR_VAR 0 3
30034: PUSH
30035: LD_VAR 0 11
30039: PUSH
30040: LD_INT 1
30042: ARRAY
30043: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30044: LD_ADDR_VAR 0 11
30048: PUSH
30049: LD_VAR 0 11
30053: PPUSH
30054: LD_INT 1
30056: PPUSH
30057: CALL_OW 3
30061: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30062: LD_VAR 0 2
30066: PPUSH
30067: LD_VAR 0 3
30071: PPUSH
30072: CALL 30272 0 2
30076: PUSH
30077: LD_VAR 0 11
30081: PUSH
30082: EMPTY
30083: EQUAL
30084: OR
30085: IFFALSE 30030
// if not control in _control then
30087: LD_VAR 0 4
30091: PUSH
30092: LD_VAR 0 12
30096: IN
30097: NOT
30098: IFFALSE 30124
// control := _control [ rand ( 1 , _control ) ] ;
30100: LD_ADDR_VAR 0 4
30104: PUSH
30105: LD_VAR 0 12
30109: PUSH
30110: LD_INT 1
30112: PPUSH
30113: LD_VAR 0 12
30117: PPUSH
30118: CALL_OW 12
30122: ARRAY
30123: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30124: LD_VAR 0 2
30128: PPUSH
30129: LD_VAR 0 5
30133: PPUSH
30134: CALL 30492 0 2
30138: NOT
30139: IFFALSE 30198
// repeat weapon := _weapon [ 1 ] ;
30141: LD_ADDR_VAR 0 5
30145: PUSH
30146: LD_VAR 0 10
30150: PUSH
30151: LD_INT 1
30153: ARRAY
30154: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30155: LD_ADDR_VAR 0 10
30159: PUSH
30160: LD_VAR 0 10
30164: PPUSH
30165: LD_INT 1
30167: PPUSH
30168: CALL_OW 3
30172: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30173: LD_VAR 0 2
30177: PPUSH
30178: LD_VAR 0 5
30182: PPUSH
30183: CALL 30492 0 2
30187: PUSH
30188: LD_VAR 0 10
30192: PUSH
30193: EMPTY
30194: EQUAL
30195: OR
30196: IFFALSE 30141
// result := [ ] ;
30198: LD_ADDR_VAR 0 6
30202: PUSH
30203: EMPTY
30204: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30205: LD_VAR 0 1
30209: PPUSH
30210: LD_VAR 0 2
30214: PPUSH
30215: LD_VAR 0 3
30219: PPUSH
30220: LD_VAR 0 4
30224: PPUSH
30225: LD_VAR 0 5
30229: PPUSH
30230: CALL_OW 448
30234: IFFALSE 30267
// result := [ chassis , engine , control , weapon ] ;
30236: LD_ADDR_VAR 0 6
30240: PUSH
30241: LD_VAR 0 2
30245: PUSH
30246: LD_VAR 0 3
30250: PUSH
30251: LD_VAR 0 4
30255: PUSH
30256: LD_VAR 0 5
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: ST_TO_ADDR
// end ;
30267: LD_VAR 0 6
30271: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30272: LD_INT 0
30274: PPUSH
// if not chassis or not engine then
30275: LD_VAR 0 1
30279: NOT
30280: PUSH
30281: LD_VAR 0 2
30285: NOT
30286: OR
30287: IFFALSE 30291
// exit ;
30289: GO 30487
// case engine of engine_solar :
30291: LD_VAR 0 2
30295: PUSH
30296: LD_INT 2
30298: DOUBLE
30299: EQUAL
30300: IFTRUE 30304
30302: GO 30342
30304: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30305: LD_ADDR_VAR 0 3
30309: PUSH
30310: LD_INT 11
30312: PUSH
30313: LD_INT 12
30315: PUSH
30316: LD_INT 13
30318: PUSH
30319: LD_INT 14
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: LD_INT 2
30327: PUSH
30328: LD_INT 3
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: ST_TO_ADDR
30340: GO 30471
30342: LD_INT 1
30344: DOUBLE
30345: EQUAL
30346: IFTRUE 30350
30348: GO 30412
30350: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30351: LD_ADDR_VAR 0 3
30355: PUSH
30356: LD_INT 11
30358: PUSH
30359: LD_INT 12
30361: PUSH
30362: LD_INT 13
30364: PUSH
30365: LD_INT 14
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: LD_INT 2
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: LD_INT 4
30379: PUSH
30380: LD_INT 5
30382: PUSH
30383: LD_INT 21
30385: PUSH
30386: LD_INT 23
30388: PUSH
30389: LD_INT 22
30391: PUSH
30392: LD_INT 24
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: ST_TO_ADDR
30410: GO 30471
30412: LD_INT 3
30414: DOUBLE
30415: EQUAL
30416: IFTRUE 30420
30418: GO 30470
30420: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_INT 13
30428: PUSH
30429: LD_INT 14
30431: PUSH
30432: LD_INT 2
30434: PUSH
30435: LD_INT 3
30437: PUSH
30438: LD_INT 4
30440: PUSH
30441: LD_INT 5
30443: PUSH
30444: LD_INT 21
30446: PUSH
30447: LD_INT 22
30449: PUSH
30450: LD_INT 23
30452: PUSH
30453: LD_INT 24
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: ST_TO_ADDR
30468: GO 30471
30470: POP
// result := ( chassis in result ) ;
30471: LD_ADDR_VAR 0 3
30475: PUSH
30476: LD_VAR 0 1
30480: PUSH
30481: LD_VAR 0 3
30485: IN
30486: ST_TO_ADDR
// end ;
30487: LD_VAR 0 3
30491: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30492: LD_INT 0
30494: PPUSH
// if not chassis or not weapon then
30495: LD_VAR 0 1
30499: NOT
30500: PUSH
30501: LD_VAR 0 2
30505: NOT
30506: OR
30507: IFFALSE 30511
// exit ;
30509: GO 31571
// case weapon of us_machine_gun :
30511: LD_VAR 0 2
30515: PUSH
30516: LD_INT 2
30518: DOUBLE
30519: EQUAL
30520: IFTRUE 30524
30522: GO 30554
30524: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30525: LD_ADDR_VAR 0 3
30529: PUSH
30530: LD_INT 1
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: LD_INT 4
30541: PUSH
30542: LD_INT 5
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: ST_TO_ADDR
30552: GO 31555
30554: LD_INT 3
30556: DOUBLE
30557: EQUAL
30558: IFTRUE 30562
30560: GO 30592
30562: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30563: LD_ADDR_VAR 0 3
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: LD_INT 2
30573: PUSH
30574: LD_INT 3
30576: PUSH
30577: LD_INT 4
30579: PUSH
30580: LD_INT 5
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: ST_TO_ADDR
30590: GO 31555
30592: LD_INT 11
30594: DOUBLE
30595: EQUAL
30596: IFTRUE 30600
30598: GO 30630
30600: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30601: LD_ADDR_VAR 0 3
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: LD_INT 2
30611: PUSH
30612: LD_INT 3
30614: PUSH
30615: LD_INT 4
30617: PUSH
30618: LD_INT 5
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: ST_TO_ADDR
30628: GO 31555
30630: LD_INT 4
30632: DOUBLE
30633: EQUAL
30634: IFTRUE 30638
30636: GO 30664
30638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30639: LD_ADDR_VAR 0 3
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: LD_INT 3
30649: PUSH
30650: LD_INT 4
30652: PUSH
30653: LD_INT 5
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: ST_TO_ADDR
30662: GO 31555
30664: LD_INT 5
30666: DOUBLE
30667: EQUAL
30668: IFTRUE 30672
30670: GO 30698
30672: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30673: LD_ADDR_VAR 0 3
30677: PUSH
30678: LD_INT 2
30680: PUSH
30681: LD_INT 3
30683: PUSH
30684: LD_INT 4
30686: PUSH
30687: LD_INT 5
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: ST_TO_ADDR
30696: GO 31555
30698: LD_INT 9
30700: DOUBLE
30701: EQUAL
30702: IFTRUE 30706
30704: GO 30732
30706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30707: LD_ADDR_VAR 0 3
30711: PUSH
30712: LD_INT 2
30714: PUSH
30715: LD_INT 3
30717: PUSH
30718: LD_INT 4
30720: PUSH
30721: LD_INT 5
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: ST_TO_ADDR
30730: GO 31555
30732: LD_INT 7
30734: DOUBLE
30735: EQUAL
30736: IFTRUE 30740
30738: GO 30766
30740: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30741: LD_ADDR_VAR 0 3
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: LD_INT 3
30751: PUSH
30752: LD_INT 4
30754: PUSH
30755: LD_INT 5
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: ST_TO_ADDR
30764: GO 31555
30766: LD_INT 12
30768: DOUBLE
30769: EQUAL
30770: IFTRUE 30774
30772: GO 30800
30774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30775: LD_ADDR_VAR 0 3
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: LD_INT 3
30785: PUSH
30786: LD_INT 4
30788: PUSH
30789: LD_INT 5
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: ST_TO_ADDR
30798: GO 31555
30800: LD_INT 13
30802: DOUBLE
30803: EQUAL
30804: IFTRUE 30808
30806: GO 30834
30808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30809: LD_ADDR_VAR 0 3
30813: PUSH
30814: LD_INT 2
30816: PUSH
30817: LD_INT 3
30819: PUSH
30820: LD_INT 4
30822: PUSH
30823: LD_INT 5
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: ST_TO_ADDR
30832: GO 31555
30834: LD_INT 14
30836: DOUBLE
30837: EQUAL
30838: IFTRUE 30842
30840: GO 30860
30842: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30843: LD_ADDR_VAR 0 3
30847: PUSH
30848: LD_INT 4
30850: PUSH
30851: LD_INT 5
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: ST_TO_ADDR
30858: GO 31555
30860: LD_INT 6
30862: DOUBLE
30863: EQUAL
30864: IFTRUE 30868
30866: GO 30886
30868: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30869: LD_ADDR_VAR 0 3
30873: PUSH
30874: LD_INT 4
30876: PUSH
30877: LD_INT 5
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: ST_TO_ADDR
30884: GO 31555
30886: LD_INT 10
30888: DOUBLE
30889: EQUAL
30890: IFTRUE 30894
30892: GO 30912
30894: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30895: LD_ADDR_VAR 0 3
30899: PUSH
30900: LD_INT 4
30902: PUSH
30903: LD_INT 5
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: ST_TO_ADDR
30910: GO 31555
30912: LD_INT 22
30914: DOUBLE
30915: EQUAL
30916: IFTRUE 30920
30918: GO 30946
30920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30921: LD_ADDR_VAR 0 3
30925: PUSH
30926: LD_INT 11
30928: PUSH
30929: LD_INT 12
30931: PUSH
30932: LD_INT 13
30934: PUSH
30935: LD_INT 14
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: ST_TO_ADDR
30944: GO 31555
30946: LD_INT 23
30948: DOUBLE
30949: EQUAL
30950: IFTRUE 30954
30952: GO 30980
30954: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30955: LD_ADDR_VAR 0 3
30959: PUSH
30960: LD_INT 11
30962: PUSH
30963: LD_INT 12
30965: PUSH
30966: LD_INT 13
30968: PUSH
30969: LD_INT 14
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: ST_TO_ADDR
30978: GO 31555
30980: LD_INT 24
30982: DOUBLE
30983: EQUAL
30984: IFTRUE 30988
30986: GO 31014
30988: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30989: LD_ADDR_VAR 0 3
30993: PUSH
30994: LD_INT 11
30996: PUSH
30997: LD_INT 12
30999: PUSH
31000: LD_INT 13
31002: PUSH
31003: LD_INT 14
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: ST_TO_ADDR
31012: GO 31555
31014: LD_INT 30
31016: DOUBLE
31017: EQUAL
31018: IFTRUE 31022
31020: GO 31048
31022: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31023: LD_ADDR_VAR 0 3
31027: PUSH
31028: LD_INT 11
31030: PUSH
31031: LD_INT 12
31033: PUSH
31034: LD_INT 13
31036: PUSH
31037: LD_INT 14
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: ST_TO_ADDR
31046: GO 31555
31048: LD_INT 25
31050: DOUBLE
31051: EQUAL
31052: IFTRUE 31056
31054: GO 31074
31056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: LD_INT 13
31064: PUSH
31065: LD_INT 14
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: ST_TO_ADDR
31072: GO 31555
31074: LD_INT 27
31076: DOUBLE
31077: EQUAL
31078: IFTRUE 31082
31080: GO 31100
31082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31083: LD_ADDR_VAR 0 3
31087: PUSH
31088: LD_INT 13
31090: PUSH
31091: LD_INT 14
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: ST_TO_ADDR
31098: GO 31555
31100: LD_INT 92
31102: DOUBLE
31103: EQUAL
31104: IFTRUE 31108
31106: GO 31134
31108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31109: LD_ADDR_VAR 0 3
31113: PUSH
31114: LD_INT 11
31116: PUSH
31117: LD_INT 12
31119: PUSH
31120: LD_INT 13
31122: PUSH
31123: LD_INT 14
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: ST_TO_ADDR
31132: GO 31555
31134: LD_INT 28
31136: DOUBLE
31137: EQUAL
31138: IFTRUE 31142
31140: GO 31160
31142: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31143: LD_ADDR_VAR 0 3
31147: PUSH
31148: LD_INT 13
31150: PUSH
31151: LD_INT 14
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: ST_TO_ADDR
31158: GO 31555
31160: LD_INT 29
31162: DOUBLE
31163: EQUAL
31164: IFTRUE 31168
31166: GO 31186
31168: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31169: LD_ADDR_VAR 0 3
31173: PUSH
31174: LD_INT 13
31176: PUSH
31177: LD_INT 14
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: ST_TO_ADDR
31184: GO 31555
31186: LD_INT 31
31188: DOUBLE
31189: EQUAL
31190: IFTRUE 31194
31192: GO 31212
31194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31195: LD_ADDR_VAR 0 3
31199: PUSH
31200: LD_INT 13
31202: PUSH
31203: LD_INT 14
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: ST_TO_ADDR
31210: GO 31555
31212: LD_INT 26
31214: DOUBLE
31215: EQUAL
31216: IFTRUE 31220
31218: GO 31238
31220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31221: LD_ADDR_VAR 0 3
31225: PUSH
31226: LD_INT 13
31228: PUSH
31229: LD_INT 14
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: ST_TO_ADDR
31236: GO 31555
31238: LD_INT 42
31240: DOUBLE
31241: EQUAL
31242: IFTRUE 31246
31244: GO 31272
31246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31247: LD_ADDR_VAR 0 3
31251: PUSH
31252: LD_INT 21
31254: PUSH
31255: LD_INT 22
31257: PUSH
31258: LD_INT 23
31260: PUSH
31261: LD_INT 24
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: ST_TO_ADDR
31270: GO 31555
31272: LD_INT 43
31274: DOUBLE
31275: EQUAL
31276: IFTRUE 31280
31278: GO 31306
31280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31281: LD_ADDR_VAR 0 3
31285: PUSH
31286: LD_INT 21
31288: PUSH
31289: LD_INT 22
31291: PUSH
31292: LD_INT 23
31294: PUSH
31295: LD_INT 24
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
31304: GO 31555
31306: LD_INT 44
31308: DOUBLE
31309: EQUAL
31310: IFTRUE 31314
31312: GO 31340
31314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31315: LD_ADDR_VAR 0 3
31319: PUSH
31320: LD_INT 21
31322: PUSH
31323: LD_INT 22
31325: PUSH
31326: LD_INT 23
31328: PUSH
31329: LD_INT 24
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: ST_TO_ADDR
31338: GO 31555
31340: LD_INT 45
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31374
31348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31349: LD_ADDR_VAR 0 3
31353: PUSH
31354: LD_INT 21
31356: PUSH
31357: LD_INT 22
31359: PUSH
31360: LD_INT 23
31362: PUSH
31363: LD_INT 24
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: ST_TO_ADDR
31372: GO 31555
31374: LD_INT 49
31376: DOUBLE
31377: EQUAL
31378: IFTRUE 31382
31380: GO 31408
31382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31383: LD_ADDR_VAR 0 3
31387: PUSH
31388: LD_INT 21
31390: PUSH
31391: LD_INT 22
31393: PUSH
31394: LD_INT 23
31396: PUSH
31397: LD_INT 24
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: ST_TO_ADDR
31406: GO 31555
31408: LD_INT 51
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31416
31414: GO 31442
31416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31417: LD_ADDR_VAR 0 3
31421: PUSH
31422: LD_INT 21
31424: PUSH
31425: LD_INT 22
31427: PUSH
31428: LD_INT 23
31430: PUSH
31431: LD_INT 24
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: ST_TO_ADDR
31440: GO 31555
31442: LD_INT 52
31444: DOUBLE
31445: EQUAL
31446: IFTRUE 31450
31448: GO 31476
31450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31451: LD_ADDR_VAR 0 3
31455: PUSH
31456: LD_INT 21
31458: PUSH
31459: LD_INT 22
31461: PUSH
31462: LD_INT 23
31464: PUSH
31465: LD_INT 24
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: ST_TO_ADDR
31474: GO 31555
31476: LD_INT 53
31478: DOUBLE
31479: EQUAL
31480: IFTRUE 31484
31482: GO 31502
31484: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31485: LD_ADDR_VAR 0 3
31489: PUSH
31490: LD_INT 23
31492: PUSH
31493: LD_INT 24
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: ST_TO_ADDR
31500: GO 31555
31502: LD_INT 46
31504: DOUBLE
31505: EQUAL
31506: IFTRUE 31510
31508: GO 31528
31510: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31511: LD_ADDR_VAR 0 3
31515: PUSH
31516: LD_INT 23
31518: PUSH
31519: LD_INT 24
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: ST_TO_ADDR
31526: GO 31555
31528: LD_INT 47
31530: DOUBLE
31531: EQUAL
31532: IFTRUE 31536
31534: GO 31554
31536: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31537: LD_ADDR_VAR 0 3
31541: PUSH
31542: LD_INT 23
31544: PUSH
31545: LD_INT 24
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: ST_TO_ADDR
31552: GO 31555
31554: POP
// result := ( chassis in result ) ;
31555: LD_ADDR_VAR 0 3
31559: PUSH
31560: LD_VAR 0 1
31564: PUSH
31565: LD_VAR 0 3
31569: IN
31570: ST_TO_ADDR
// end ;
31571: LD_VAR 0 3
31575: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31576: LD_INT 0
31578: PPUSH
31579: PPUSH
31580: PPUSH
31581: PPUSH
31582: PPUSH
31583: PPUSH
31584: PPUSH
// result := array ;
31585: LD_ADDR_VAR 0 5
31589: PUSH
31590: LD_VAR 0 1
31594: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31595: LD_VAR 0 1
31599: NOT
31600: PUSH
31601: LD_VAR 0 2
31605: NOT
31606: OR
31607: PUSH
31608: LD_VAR 0 3
31612: NOT
31613: OR
31614: PUSH
31615: LD_VAR 0 2
31619: PUSH
31620: LD_VAR 0 1
31624: GREATER
31625: OR
31626: PUSH
31627: LD_VAR 0 3
31631: PUSH
31632: LD_VAR 0 1
31636: GREATER
31637: OR
31638: IFFALSE 31642
// exit ;
31640: GO 31938
// if direction then
31642: LD_VAR 0 4
31646: IFFALSE 31710
// begin d := 1 ;
31648: LD_ADDR_VAR 0 9
31652: PUSH
31653: LD_INT 1
31655: ST_TO_ADDR
// if i_from > i_to then
31656: LD_VAR 0 2
31660: PUSH
31661: LD_VAR 0 3
31665: GREATER
31666: IFFALSE 31692
// length := ( array - i_from ) + i_to else
31668: LD_ADDR_VAR 0 11
31672: PUSH
31673: LD_VAR 0 1
31677: PUSH
31678: LD_VAR 0 2
31682: MINUS
31683: PUSH
31684: LD_VAR 0 3
31688: PLUS
31689: ST_TO_ADDR
31690: GO 31708
// length := i_to - i_from ;
31692: LD_ADDR_VAR 0 11
31696: PUSH
31697: LD_VAR 0 3
31701: PUSH
31702: LD_VAR 0 2
31706: MINUS
31707: ST_TO_ADDR
// end else
31708: GO 31771
// begin d := - 1 ;
31710: LD_ADDR_VAR 0 9
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: ST_TO_ADDR
// if i_from > i_to then
31719: LD_VAR 0 2
31723: PUSH
31724: LD_VAR 0 3
31728: GREATER
31729: IFFALSE 31749
// length := i_from - i_to else
31731: LD_ADDR_VAR 0 11
31735: PUSH
31736: LD_VAR 0 2
31740: PUSH
31741: LD_VAR 0 3
31745: MINUS
31746: ST_TO_ADDR
31747: GO 31771
// length := ( array - i_to ) + i_from ;
31749: LD_ADDR_VAR 0 11
31753: PUSH
31754: LD_VAR 0 1
31758: PUSH
31759: LD_VAR 0 3
31763: MINUS
31764: PUSH
31765: LD_VAR 0 2
31769: PLUS
31770: ST_TO_ADDR
// end ; if not length then
31771: LD_VAR 0 11
31775: NOT
31776: IFFALSE 31780
// exit ;
31778: GO 31938
// tmp := array ;
31780: LD_ADDR_VAR 0 10
31784: PUSH
31785: LD_VAR 0 1
31789: ST_TO_ADDR
// for i = 1 to length do
31790: LD_ADDR_VAR 0 6
31794: PUSH
31795: DOUBLE
31796: LD_INT 1
31798: DEC
31799: ST_TO_ADDR
31800: LD_VAR 0 11
31804: PUSH
31805: FOR_TO
31806: IFFALSE 31926
// begin for j = 1 to array do
31808: LD_ADDR_VAR 0 7
31812: PUSH
31813: DOUBLE
31814: LD_INT 1
31816: DEC
31817: ST_TO_ADDR
31818: LD_VAR 0 1
31822: PUSH
31823: FOR_TO
31824: IFFALSE 31912
// begin k := j + d ;
31826: LD_ADDR_VAR 0 8
31830: PUSH
31831: LD_VAR 0 7
31835: PUSH
31836: LD_VAR 0 9
31840: PLUS
31841: ST_TO_ADDR
// if k > array then
31842: LD_VAR 0 8
31846: PUSH
31847: LD_VAR 0 1
31851: GREATER
31852: IFFALSE 31862
// k := 1 ;
31854: LD_ADDR_VAR 0 8
31858: PUSH
31859: LD_INT 1
31861: ST_TO_ADDR
// if not k then
31862: LD_VAR 0 8
31866: NOT
31867: IFFALSE 31879
// k := array ;
31869: LD_ADDR_VAR 0 8
31873: PUSH
31874: LD_VAR 0 1
31878: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31879: LD_ADDR_VAR 0 10
31883: PUSH
31884: LD_VAR 0 10
31888: PPUSH
31889: LD_VAR 0 8
31893: PPUSH
31894: LD_VAR 0 1
31898: PUSH
31899: LD_VAR 0 7
31903: ARRAY
31904: PPUSH
31905: CALL_OW 1
31909: ST_TO_ADDR
// end ;
31910: GO 31823
31912: POP
31913: POP
// array := tmp ;
31914: LD_ADDR_VAR 0 1
31918: PUSH
31919: LD_VAR 0 10
31923: ST_TO_ADDR
// end ;
31924: GO 31805
31926: POP
31927: POP
// result := array ;
31928: LD_ADDR_VAR 0 5
31932: PUSH
31933: LD_VAR 0 1
31937: ST_TO_ADDR
// end ;
31938: LD_VAR 0 5
31942: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31943: LD_INT 0
31945: PPUSH
31946: PPUSH
// result := 0 ;
31947: LD_ADDR_VAR 0 3
31951: PUSH
31952: LD_INT 0
31954: ST_TO_ADDR
// if not array or not value in array then
31955: LD_VAR 0 1
31959: NOT
31960: PUSH
31961: LD_VAR 0 2
31965: PUSH
31966: LD_VAR 0 1
31970: IN
31971: NOT
31972: OR
31973: IFFALSE 31977
// exit ;
31975: GO 32031
// for i = 1 to array do
31977: LD_ADDR_VAR 0 4
31981: PUSH
31982: DOUBLE
31983: LD_INT 1
31985: DEC
31986: ST_TO_ADDR
31987: LD_VAR 0 1
31991: PUSH
31992: FOR_TO
31993: IFFALSE 32029
// if value = array [ i ] then
31995: LD_VAR 0 2
31999: PUSH
32000: LD_VAR 0 1
32004: PUSH
32005: LD_VAR 0 4
32009: ARRAY
32010: EQUAL
32011: IFFALSE 32027
// begin result := i ;
32013: LD_ADDR_VAR 0 3
32017: PUSH
32018: LD_VAR 0 4
32022: ST_TO_ADDR
// exit ;
32023: POP
32024: POP
32025: GO 32031
// end ;
32027: GO 31992
32029: POP
32030: POP
// end ;
32031: LD_VAR 0 3
32035: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32036: LD_INT 0
32038: PPUSH
// vc_chassis := chassis ;
32039: LD_ADDR_OWVAR 37
32043: PUSH
32044: LD_VAR 0 1
32048: ST_TO_ADDR
// vc_engine := engine ;
32049: LD_ADDR_OWVAR 39
32053: PUSH
32054: LD_VAR 0 2
32058: ST_TO_ADDR
// vc_control := control ;
32059: LD_ADDR_OWVAR 38
32063: PUSH
32064: LD_VAR 0 3
32068: ST_TO_ADDR
// vc_weapon := weapon ;
32069: LD_ADDR_OWVAR 40
32073: PUSH
32074: LD_VAR 0 4
32078: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32079: LD_ADDR_OWVAR 41
32083: PUSH
32084: LD_VAR 0 5
32088: ST_TO_ADDR
// end ;
32089: LD_VAR 0 6
32093: RET
// export function WantPlant ( unit ) ; var task ; begin
32094: LD_INT 0
32096: PPUSH
32097: PPUSH
// result := false ;
32098: LD_ADDR_VAR 0 2
32102: PUSH
32103: LD_INT 0
32105: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: LD_VAR 0 1
32115: PPUSH
32116: CALL_OW 437
32120: ST_TO_ADDR
// if task then
32121: LD_VAR 0 3
32125: IFFALSE 32153
// if task [ 1 ] [ 1 ] = p then
32127: LD_VAR 0 3
32131: PUSH
32132: LD_INT 1
32134: ARRAY
32135: PUSH
32136: LD_INT 1
32138: ARRAY
32139: PUSH
32140: LD_STRING p
32142: EQUAL
32143: IFFALSE 32153
// result := true ;
32145: LD_ADDR_VAR 0 2
32149: PUSH
32150: LD_INT 1
32152: ST_TO_ADDR
// end ;
32153: LD_VAR 0 2
32157: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32158: LD_INT 0
32160: PPUSH
32161: PPUSH
32162: PPUSH
32163: PPUSH
// if pos < 1 then
32164: LD_VAR 0 2
32168: PUSH
32169: LD_INT 1
32171: LESS
32172: IFFALSE 32176
// exit ;
32174: GO 32479
// if pos = 1 then
32176: LD_VAR 0 2
32180: PUSH
32181: LD_INT 1
32183: EQUAL
32184: IFFALSE 32217
// result := Replace ( arr , pos [ 1 ] , value ) else
32186: LD_ADDR_VAR 0 4
32190: PUSH
32191: LD_VAR 0 1
32195: PPUSH
32196: LD_VAR 0 2
32200: PUSH
32201: LD_INT 1
32203: ARRAY
32204: PPUSH
32205: LD_VAR 0 3
32209: PPUSH
32210: CALL_OW 1
32214: ST_TO_ADDR
32215: GO 32479
// begin tmp := arr ;
32217: LD_ADDR_VAR 0 6
32221: PUSH
32222: LD_VAR 0 1
32226: ST_TO_ADDR
// s_arr := [ tmp ] ;
32227: LD_ADDR_VAR 0 7
32231: PUSH
32232: LD_VAR 0 6
32236: PUSH
32237: EMPTY
32238: LIST
32239: ST_TO_ADDR
// for i = 1 to pos - 1 do
32240: LD_ADDR_VAR 0 5
32244: PUSH
32245: DOUBLE
32246: LD_INT 1
32248: DEC
32249: ST_TO_ADDR
32250: LD_VAR 0 2
32254: PUSH
32255: LD_INT 1
32257: MINUS
32258: PUSH
32259: FOR_TO
32260: IFFALSE 32305
// begin tmp := tmp [ pos [ i ] ] ;
32262: LD_ADDR_VAR 0 6
32266: PUSH
32267: LD_VAR 0 6
32271: PUSH
32272: LD_VAR 0 2
32276: PUSH
32277: LD_VAR 0 5
32281: ARRAY
32282: ARRAY
32283: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32284: LD_ADDR_VAR 0 7
32288: PUSH
32289: LD_VAR 0 7
32293: PUSH
32294: LD_VAR 0 6
32298: PUSH
32299: EMPTY
32300: LIST
32301: ADD
32302: ST_TO_ADDR
// end ;
32303: GO 32259
32305: POP
32306: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32307: LD_ADDR_VAR 0 6
32311: PUSH
32312: LD_VAR 0 6
32316: PPUSH
32317: LD_VAR 0 2
32321: PUSH
32322: LD_VAR 0 2
32326: ARRAY
32327: PPUSH
32328: LD_VAR 0 3
32332: PPUSH
32333: CALL_OW 1
32337: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32338: LD_ADDR_VAR 0 7
32342: PUSH
32343: LD_VAR 0 7
32347: PPUSH
32348: LD_VAR 0 7
32352: PPUSH
32353: LD_VAR 0 6
32357: PPUSH
32358: CALL_OW 1
32362: ST_TO_ADDR
// for i = s_arr downto 2 do
32363: LD_ADDR_VAR 0 5
32367: PUSH
32368: DOUBLE
32369: LD_VAR 0 7
32373: INC
32374: ST_TO_ADDR
32375: LD_INT 2
32377: PUSH
32378: FOR_DOWNTO
32379: IFFALSE 32463
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32381: LD_ADDR_VAR 0 6
32385: PUSH
32386: LD_VAR 0 7
32390: PUSH
32391: LD_VAR 0 5
32395: PUSH
32396: LD_INT 1
32398: MINUS
32399: ARRAY
32400: PPUSH
32401: LD_VAR 0 2
32405: PUSH
32406: LD_VAR 0 5
32410: PUSH
32411: LD_INT 1
32413: MINUS
32414: ARRAY
32415: PPUSH
32416: LD_VAR 0 7
32420: PUSH
32421: LD_VAR 0 5
32425: ARRAY
32426: PPUSH
32427: CALL_OW 1
32431: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32432: LD_ADDR_VAR 0 7
32436: PUSH
32437: LD_VAR 0 7
32441: PPUSH
32442: LD_VAR 0 5
32446: PUSH
32447: LD_INT 1
32449: MINUS
32450: PPUSH
32451: LD_VAR 0 6
32455: PPUSH
32456: CALL_OW 1
32460: ST_TO_ADDR
// end ;
32461: GO 32378
32463: POP
32464: POP
// result := s_arr [ 1 ] ;
32465: LD_ADDR_VAR 0 4
32469: PUSH
32470: LD_VAR 0 7
32474: PUSH
32475: LD_INT 1
32477: ARRAY
32478: ST_TO_ADDR
// end ; end ;
32479: LD_VAR 0 4
32483: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32484: LD_INT 0
32486: PPUSH
32487: PPUSH
// if not list then
32488: LD_VAR 0 1
32492: NOT
32493: IFFALSE 32497
// exit ;
32495: GO 32588
// i := list [ pos1 ] ;
32497: LD_ADDR_VAR 0 5
32501: PUSH
32502: LD_VAR 0 1
32506: PUSH
32507: LD_VAR 0 2
32511: ARRAY
32512: ST_TO_ADDR
// if not i then
32513: LD_VAR 0 5
32517: NOT
32518: IFFALSE 32522
// exit ;
32520: GO 32588
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32522: LD_ADDR_VAR 0 1
32526: PUSH
32527: LD_VAR 0 1
32531: PPUSH
32532: LD_VAR 0 2
32536: PPUSH
32537: LD_VAR 0 1
32541: PUSH
32542: LD_VAR 0 3
32546: ARRAY
32547: PPUSH
32548: CALL_OW 1
32552: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32553: LD_ADDR_VAR 0 1
32557: PUSH
32558: LD_VAR 0 1
32562: PPUSH
32563: LD_VAR 0 3
32567: PPUSH
32568: LD_VAR 0 5
32572: PPUSH
32573: CALL_OW 1
32577: ST_TO_ADDR
// result := list ;
32578: LD_ADDR_VAR 0 4
32582: PUSH
32583: LD_VAR 0 1
32587: ST_TO_ADDR
// end ;
32588: LD_VAR 0 4
32592: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32593: LD_INT 0
32595: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32596: LD_ADDR_VAR 0 5
32600: PUSH
32601: LD_VAR 0 1
32605: PPUSH
32606: CALL_OW 250
32610: PPUSH
32611: LD_VAR 0 1
32615: PPUSH
32616: CALL_OW 251
32620: PPUSH
32621: LD_VAR 0 2
32625: PPUSH
32626: LD_VAR 0 3
32630: PPUSH
32631: LD_VAR 0 4
32635: PPUSH
32636: CALL 32646 0 5
32640: ST_TO_ADDR
// end ;
32641: LD_VAR 0 5
32645: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32646: LD_INT 0
32648: PPUSH
32649: PPUSH
32650: PPUSH
32651: PPUSH
// if not list then
32652: LD_VAR 0 3
32656: NOT
32657: IFFALSE 32661
// exit ;
32659: GO 33049
// result := [ ] ;
32661: LD_ADDR_VAR 0 6
32665: PUSH
32666: EMPTY
32667: ST_TO_ADDR
// for i in list do
32668: LD_ADDR_VAR 0 7
32672: PUSH
32673: LD_VAR 0 3
32677: PUSH
32678: FOR_IN
32679: IFFALSE 32881
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32681: LD_ADDR_VAR 0 9
32685: PUSH
32686: LD_VAR 0 7
32690: PPUSH
32691: LD_VAR 0 1
32695: PPUSH
32696: LD_VAR 0 2
32700: PPUSH
32701: CALL_OW 297
32705: ST_TO_ADDR
// if not result then
32706: LD_VAR 0 6
32710: NOT
32711: IFFALSE 32737
// result := [ [ i , tmp ] ] else
32713: LD_ADDR_VAR 0 6
32717: PUSH
32718: LD_VAR 0 7
32722: PUSH
32723: LD_VAR 0 9
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: EMPTY
32733: LIST
32734: ST_TO_ADDR
32735: GO 32879
// begin if result [ result ] [ 2 ] < tmp then
32737: LD_VAR 0 6
32741: PUSH
32742: LD_VAR 0 6
32746: ARRAY
32747: PUSH
32748: LD_INT 2
32750: ARRAY
32751: PUSH
32752: LD_VAR 0 9
32756: LESS
32757: IFFALSE 32799
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32759: LD_ADDR_VAR 0 6
32763: PUSH
32764: LD_VAR 0 6
32768: PPUSH
32769: LD_VAR 0 6
32773: PUSH
32774: LD_INT 1
32776: PLUS
32777: PPUSH
32778: LD_VAR 0 7
32782: PUSH
32783: LD_VAR 0 9
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PPUSH
32792: CALL_OW 2
32796: ST_TO_ADDR
32797: GO 32879
// for j = 1 to result do
32799: LD_ADDR_VAR 0 8
32803: PUSH
32804: DOUBLE
32805: LD_INT 1
32807: DEC
32808: ST_TO_ADDR
32809: LD_VAR 0 6
32813: PUSH
32814: FOR_TO
32815: IFFALSE 32877
// begin if tmp < result [ j ] [ 2 ] then
32817: LD_VAR 0 9
32821: PUSH
32822: LD_VAR 0 6
32826: PUSH
32827: LD_VAR 0 8
32831: ARRAY
32832: PUSH
32833: LD_INT 2
32835: ARRAY
32836: LESS
32837: IFFALSE 32875
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32839: LD_ADDR_VAR 0 6
32843: PUSH
32844: LD_VAR 0 6
32848: PPUSH
32849: LD_VAR 0 8
32853: PPUSH
32854: LD_VAR 0 7
32858: PUSH
32859: LD_VAR 0 9
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PPUSH
32868: CALL_OW 2
32872: ST_TO_ADDR
// break ;
32873: GO 32877
// end ; end ;
32875: GO 32814
32877: POP
32878: POP
// end ; end ;
32879: GO 32678
32881: POP
32882: POP
// if result and not asc then
32883: LD_VAR 0 6
32887: PUSH
32888: LD_VAR 0 4
32892: NOT
32893: AND
32894: IFFALSE 32969
// begin tmp := result ;
32896: LD_ADDR_VAR 0 9
32900: PUSH
32901: LD_VAR 0 6
32905: ST_TO_ADDR
// for i = tmp downto 1 do
32906: LD_ADDR_VAR 0 7
32910: PUSH
32911: DOUBLE
32912: LD_VAR 0 9
32916: INC
32917: ST_TO_ADDR
32918: LD_INT 1
32920: PUSH
32921: FOR_DOWNTO
32922: IFFALSE 32967
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32924: LD_ADDR_VAR 0 6
32928: PUSH
32929: LD_VAR 0 6
32933: PPUSH
32934: LD_VAR 0 9
32938: PUSH
32939: LD_VAR 0 7
32943: MINUS
32944: PUSH
32945: LD_INT 1
32947: PLUS
32948: PPUSH
32949: LD_VAR 0 9
32953: PUSH
32954: LD_VAR 0 7
32958: ARRAY
32959: PPUSH
32960: CALL_OW 1
32964: ST_TO_ADDR
32965: GO 32921
32967: POP
32968: POP
// end ; tmp := [ ] ;
32969: LD_ADDR_VAR 0 9
32973: PUSH
32974: EMPTY
32975: ST_TO_ADDR
// if mode then
32976: LD_VAR 0 5
32980: IFFALSE 33049
// begin for i = 1 to result do
32982: LD_ADDR_VAR 0 7
32986: PUSH
32987: DOUBLE
32988: LD_INT 1
32990: DEC
32991: ST_TO_ADDR
32992: LD_VAR 0 6
32996: PUSH
32997: FOR_TO
32998: IFFALSE 33037
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33000: LD_ADDR_VAR 0 9
33004: PUSH
33005: LD_VAR 0 9
33009: PPUSH
33010: LD_VAR 0 7
33014: PPUSH
33015: LD_VAR 0 6
33019: PUSH
33020: LD_VAR 0 7
33024: ARRAY
33025: PUSH
33026: LD_INT 1
33028: ARRAY
33029: PPUSH
33030: CALL_OW 1
33034: ST_TO_ADDR
33035: GO 32997
33037: POP
33038: POP
// result := tmp ;
33039: LD_ADDR_VAR 0 6
33043: PUSH
33044: LD_VAR 0 9
33048: ST_TO_ADDR
// end ; end ;
33049: LD_VAR 0 6
33053: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33054: LD_INT 0
33056: PPUSH
33057: PPUSH
33058: PPUSH
33059: PPUSH
33060: PPUSH
33061: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33062: LD_ADDR_VAR 0 5
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: EMPTY
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
// if not x or not y then
33084: LD_VAR 0 2
33088: NOT
33089: PUSH
33090: LD_VAR 0 3
33094: NOT
33095: OR
33096: IFFALSE 33100
// exit ;
33098: GO 34750
// if not range then
33100: LD_VAR 0 4
33104: NOT
33105: IFFALSE 33115
// range := 10 ;
33107: LD_ADDR_VAR 0 4
33111: PUSH
33112: LD_INT 10
33114: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33115: LD_ADDR_VAR 0 8
33119: PUSH
33120: LD_INT 81
33122: PUSH
33123: LD_VAR 0 1
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 92
33134: PUSH
33135: LD_VAR 0 2
33139: PUSH
33140: LD_VAR 0 3
33144: PUSH
33145: LD_VAR 0 4
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 3
33158: PUSH
33159: LD_INT 21
33161: PUSH
33162: LD_INT 3
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: LIST
33177: PPUSH
33178: CALL_OW 69
33182: ST_TO_ADDR
// if not tmp then
33183: LD_VAR 0 8
33187: NOT
33188: IFFALSE 33192
// exit ;
33190: GO 34750
// for i in tmp do
33192: LD_ADDR_VAR 0 6
33196: PUSH
33197: LD_VAR 0 8
33201: PUSH
33202: FOR_IN
33203: IFFALSE 34725
// begin points := [ 0 , 0 , 0 ] ;
33205: LD_ADDR_VAR 0 9
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: LIST
33223: ST_TO_ADDR
// bpoints := 1 ;
33224: LD_ADDR_VAR 0 10
33228: PUSH
33229: LD_INT 1
33231: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33232: LD_VAR 0 6
33236: PPUSH
33237: CALL_OW 247
33241: PUSH
33242: LD_INT 1
33244: DOUBLE
33245: EQUAL
33246: IFTRUE 33250
33248: GO 33828
33250: POP
// begin if GetClass ( i ) = 1 then
33251: LD_VAR 0 6
33255: PPUSH
33256: CALL_OW 257
33260: PUSH
33261: LD_INT 1
33263: EQUAL
33264: IFFALSE 33285
// points := [ 10 , 5 , 3 ] ;
33266: LD_ADDR_VAR 0 9
33270: PUSH
33271: LD_INT 10
33273: PUSH
33274: LD_INT 5
33276: PUSH
33277: LD_INT 3
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33285: LD_VAR 0 6
33289: PPUSH
33290: CALL_OW 257
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: LD_INT 3
33300: PUSH
33301: LD_INT 4
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: LIST
33308: IN
33309: IFFALSE 33330
// points := [ 3 , 2 , 1 ] ;
33311: LD_ADDR_VAR 0 9
33315: PUSH
33316: LD_INT 3
33318: PUSH
33319: LD_INT 2
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33330: LD_VAR 0 6
33334: PPUSH
33335: CALL_OW 257
33339: PUSH
33340: LD_INT 5
33342: EQUAL
33343: IFFALSE 33364
// points := [ 130 , 5 , 2 ] ;
33345: LD_ADDR_VAR 0 9
33349: PUSH
33350: LD_INT 130
33352: PUSH
33353: LD_INT 5
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: LIST
33363: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33364: LD_VAR 0 6
33368: PPUSH
33369: CALL_OW 257
33373: PUSH
33374: LD_INT 8
33376: EQUAL
33377: IFFALSE 33398
// points := [ 35 , 35 , 30 ] ;
33379: LD_ADDR_VAR 0 9
33383: PUSH
33384: LD_INT 35
33386: PUSH
33387: LD_INT 35
33389: PUSH
33390: LD_INT 30
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33398: LD_VAR 0 6
33402: PPUSH
33403: CALL_OW 257
33407: PUSH
33408: LD_INT 9
33410: EQUAL
33411: IFFALSE 33432
// points := [ 20 , 55 , 40 ] ;
33413: LD_ADDR_VAR 0 9
33417: PUSH
33418: LD_INT 20
33420: PUSH
33421: LD_INT 55
33423: PUSH
33424: LD_INT 40
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33432: LD_VAR 0 6
33436: PPUSH
33437: CALL_OW 257
33441: PUSH
33442: LD_INT 12
33444: PUSH
33445: LD_INT 16
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: IN
33452: IFFALSE 33473
// points := [ 5 , 3 , 2 ] ;
33454: LD_ADDR_VAR 0 9
33458: PUSH
33459: LD_INT 5
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: LD_INT 2
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: LIST
33472: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33473: LD_VAR 0 6
33477: PPUSH
33478: CALL_OW 257
33482: PUSH
33483: LD_INT 17
33485: EQUAL
33486: IFFALSE 33507
// points := [ 100 , 50 , 75 ] ;
33488: LD_ADDR_VAR 0 9
33492: PUSH
33493: LD_INT 100
33495: PUSH
33496: LD_INT 50
33498: PUSH
33499: LD_INT 75
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33507: LD_VAR 0 6
33511: PPUSH
33512: CALL_OW 257
33516: PUSH
33517: LD_INT 15
33519: EQUAL
33520: IFFALSE 33541
// points := [ 10 , 5 , 3 ] ;
33522: LD_ADDR_VAR 0 9
33526: PUSH
33527: LD_INT 10
33529: PUSH
33530: LD_INT 5
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: LIST
33540: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33541: LD_VAR 0 6
33545: PPUSH
33546: CALL_OW 257
33550: PUSH
33551: LD_INT 14
33553: EQUAL
33554: IFFALSE 33575
// points := [ 10 , 0 , 0 ] ;
33556: LD_ADDR_VAR 0 9
33560: PUSH
33561: LD_INT 10
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: LIST
33574: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33575: LD_VAR 0 6
33579: PPUSH
33580: CALL_OW 257
33584: PUSH
33585: LD_INT 11
33587: EQUAL
33588: IFFALSE 33609
// points := [ 30 , 10 , 5 ] ;
33590: LD_ADDR_VAR 0 9
33594: PUSH
33595: LD_INT 30
33597: PUSH
33598: LD_INT 10
33600: PUSH
33601: LD_INT 5
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: LIST
33608: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33609: LD_VAR 0 1
33613: PPUSH
33614: LD_INT 5
33616: PPUSH
33617: CALL_OW 321
33621: PUSH
33622: LD_INT 2
33624: EQUAL
33625: IFFALSE 33642
// bpoints := bpoints * 1.8 ;
33627: LD_ADDR_VAR 0 10
33631: PUSH
33632: LD_VAR 0 10
33636: PUSH
33637: LD_REAL  1.80000000000000E+0000
33640: MUL
33641: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33642: LD_VAR 0 6
33646: PPUSH
33647: CALL_OW 257
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 3
33660: PUSH
33661: LD_INT 4
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: IN
33670: PUSH
33671: LD_VAR 0 1
33675: PPUSH
33676: LD_INT 51
33678: PPUSH
33679: CALL_OW 321
33683: PUSH
33684: LD_INT 2
33686: EQUAL
33687: AND
33688: IFFALSE 33705
// bpoints := bpoints * 1.2 ;
33690: LD_ADDR_VAR 0 10
33694: PUSH
33695: LD_VAR 0 10
33699: PUSH
33700: LD_REAL  1.20000000000000E+0000
33703: MUL
33704: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33705: LD_VAR 0 6
33709: PPUSH
33710: CALL_OW 257
33714: PUSH
33715: LD_INT 5
33717: PUSH
33718: LD_INT 7
33720: PUSH
33721: LD_INT 9
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: IN
33729: PUSH
33730: LD_VAR 0 1
33734: PPUSH
33735: LD_INT 52
33737: PPUSH
33738: CALL_OW 321
33742: PUSH
33743: LD_INT 2
33745: EQUAL
33746: AND
33747: IFFALSE 33764
// bpoints := bpoints * 1.5 ;
33749: LD_ADDR_VAR 0 10
33753: PUSH
33754: LD_VAR 0 10
33758: PUSH
33759: LD_REAL  1.50000000000000E+0000
33762: MUL
33763: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33764: LD_VAR 0 1
33768: PPUSH
33769: LD_INT 66
33771: PPUSH
33772: CALL_OW 321
33776: PUSH
33777: LD_INT 2
33779: EQUAL
33780: IFFALSE 33797
// bpoints := bpoints * 1.1 ;
33782: LD_ADDR_VAR 0 10
33786: PUSH
33787: LD_VAR 0 10
33791: PUSH
33792: LD_REAL  1.10000000000000E+0000
33795: MUL
33796: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33797: LD_ADDR_VAR 0 10
33801: PUSH
33802: LD_VAR 0 10
33806: PUSH
33807: LD_VAR 0 6
33811: PPUSH
33812: LD_INT 1
33814: PPUSH
33815: CALL_OW 259
33819: PUSH
33820: LD_REAL  1.15000000000000E+0000
33823: MUL
33824: MUL
33825: ST_TO_ADDR
// end ; unit_vehicle :
33826: GO 34654
33828: LD_INT 2
33830: DOUBLE
33831: EQUAL
33832: IFTRUE 33836
33834: GO 34642
33836: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33837: LD_VAR 0 6
33841: PPUSH
33842: CALL_OW 264
33846: PUSH
33847: LD_INT 2
33849: PUSH
33850: LD_INT 42
33852: PUSH
33853: LD_INT 24
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: LIST
33860: IN
33861: IFFALSE 33882
// points := [ 25 , 5 , 3 ] ;
33863: LD_ADDR_VAR 0 9
33867: PUSH
33868: LD_INT 25
33870: PUSH
33871: LD_INT 5
33873: PUSH
33874: LD_INT 3
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33882: LD_VAR 0 6
33886: PPUSH
33887: CALL_OW 264
33891: PUSH
33892: LD_INT 4
33894: PUSH
33895: LD_INT 43
33897: PUSH
33898: LD_INT 25
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: LIST
33905: IN
33906: IFFALSE 33927
// points := [ 40 , 15 , 5 ] ;
33908: LD_ADDR_VAR 0 9
33912: PUSH
33913: LD_INT 40
33915: PUSH
33916: LD_INT 15
33918: PUSH
33919: LD_INT 5
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: LIST
33926: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33927: LD_VAR 0 6
33931: PPUSH
33932: CALL_OW 264
33936: PUSH
33937: LD_INT 3
33939: PUSH
33940: LD_INT 23
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: IN
33947: IFFALSE 33968
// points := [ 7 , 25 , 8 ] ;
33949: LD_ADDR_VAR 0 9
33953: PUSH
33954: LD_INT 7
33956: PUSH
33957: LD_INT 25
33959: PUSH
33960: LD_INT 8
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33968: LD_VAR 0 6
33972: PPUSH
33973: CALL_OW 264
33977: PUSH
33978: LD_INT 5
33980: PUSH
33981: LD_INT 27
33983: PUSH
33984: LD_INT 44
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: IN
33992: IFFALSE 34013
// points := [ 14 , 50 , 16 ] ;
33994: LD_ADDR_VAR 0 9
33998: PUSH
33999: LD_INT 14
34001: PUSH
34002: LD_INT 50
34004: PUSH
34005: LD_INT 16
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: LIST
34012: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34013: LD_VAR 0 6
34017: PPUSH
34018: CALL_OW 264
34022: PUSH
34023: LD_INT 6
34025: PUSH
34026: LD_INT 46
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: IN
34033: IFFALSE 34054
// points := [ 32 , 120 , 70 ] ;
34035: LD_ADDR_VAR 0 9
34039: PUSH
34040: LD_INT 32
34042: PUSH
34043: LD_INT 120
34045: PUSH
34046: LD_INT 70
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: LIST
34053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34054: LD_VAR 0 6
34058: PPUSH
34059: CALL_OW 264
34063: PUSH
34064: LD_INT 7
34066: PUSH
34067: LD_INT 28
34069: PUSH
34070: LD_INT 45
34072: PUSH
34073: LD_INT 92
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: IN
34082: IFFALSE 34103
// points := [ 35 , 20 , 45 ] ;
34084: LD_ADDR_VAR 0 9
34088: PUSH
34089: LD_INT 35
34091: PUSH
34092: LD_INT 20
34094: PUSH
34095: LD_INT 45
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: LIST
34102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34103: LD_VAR 0 6
34107: PPUSH
34108: CALL_OW 264
34112: PUSH
34113: LD_INT 47
34115: PUSH
34116: EMPTY
34117: LIST
34118: IN
34119: IFFALSE 34140
// points := [ 67 , 45 , 75 ] ;
34121: LD_ADDR_VAR 0 9
34125: PUSH
34126: LD_INT 67
34128: PUSH
34129: LD_INT 45
34131: PUSH
34132: LD_INT 75
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34140: LD_VAR 0 6
34144: PPUSH
34145: CALL_OW 264
34149: PUSH
34150: LD_INT 26
34152: PUSH
34153: EMPTY
34154: LIST
34155: IN
34156: IFFALSE 34177
// points := [ 120 , 30 , 80 ] ;
34158: LD_ADDR_VAR 0 9
34162: PUSH
34163: LD_INT 120
34165: PUSH
34166: LD_INT 30
34168: PUSH
34169: LD_INT 80
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34177: LD_VAR 0 6
34181: PPUSH
34182: CALL_OW 264
34186: PUSH
34187: LD_INT 22
34189: PUSH
34190: EMPTY
34191: LIST
34192: IN
34193: IFFALSE 34214
// points := [ 40 , 1 , 1 ] ;
34195: LD_ADDR_VAR 0 9
34199: PUSH
34200: LD_INT 40
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: LIST
34213: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34214: LD_VAR 0 6
34218: PPUSH
34219: CALL_OW 264
34223: PUSH
34224: LD_INT 29
34226: PUSH
34227: EMPTY
34228: LIST
34229: IN
34230: IFFALSE 34251
// points := [ 70 , 200 , 400 ] ;
34232: LD_ADDR_VAR 0 9
34236: PUSH
34237: LD_INT 70
34239: PUSH
34240: LD_INT 200
34242: PUSH
34243: LD_INT 400
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34251: LD_VAR 0 6
34255: PPUSH
34256: CALL_OW 264
34260: PUSH
34261: LD_INT 14
34263: PUSH
34264: LD_INT 53
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: IN
34271: IFFALSE 34292
// points := [ 40 , 10 , 20 ] ;
34273: LD_ADDR_VAR 0 9
34277: PUSH
34278: LD_INT 40
34280: PUSH
34281: LD_INT 10
34283: PUSH
34284: LD_INT 20
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: LIST
34291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34292: LD_VAR 0 6
34296: PPUSH
34297: CALL_OW 264
34301: PUSH
34302: LD_INT 9
34304: PUSH
34305: EMPTY
34306: LIST
34307: IN
34308: IFFALSE 34329
// points := [ 5 , 70 , 20 ] ;
34310: LD_ADDR_VAR 0 9
34314: PUSH
34315: LD_INT 5
34317: PUSH
34318: LD_INT 70
34320: PUSH
34321: LD_INT 20
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: LIST
34328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34329: LD_VAR 0 6
34333: PPUSH
34334: CALL_OW 264
34338: PUSH
34339: LD_INT 10
34341: PUSH
34342: EMPTY
34343: LIST
34344: IN
34345: IFFALSE 34366
// points := [ 35 , 110 , 70 ] ;
34347: LD_ADDR_VAR 0 9
34351: PUSH
34352: LD_INT 35
34354: PUSH
34355: LD_INT 110
34357: PUSH
34358: LD_INT 70
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: LIST
34365: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34366: LD_VAR 0 6
34370: PPUSH
34371: CALL_OW 265
34375: PUSH
34376: LD_INT 25
34378: EQUAL
34379: IFFALSE 34400
// points := [ 80 , 65 , 100 ] ;
34381: LD_ADDR_VAR 0 9
34385: PUSH
34386: LD_INT 80
34388: PUSH
34389: LD_INT 65
34391: PUSH
34392: LD_INT 100
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34400: LD_VAR 0 6
34404: PPUSH
34405: CALL_OW 263
34409: PUSH
34410: LD_INT 1
34412: EQUAL
34413: IFFALSE 34448
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34415: LD_ADDR_VAR 0 10
34419: PUSH
34420: LD_VAR 0 10
34424: PUSH
34425: LD_VAR 0 6
34429: PPUSH
34430: CALL_OW 311
34434: PPUSH
34435: LD_INT 3
34437: PPUSH
34438: CALL_OW 259
34442: PUSH
34443: LD_INT 4
34445: MUL
34446: MUL
34447: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34448: LD_VAR 0 6
34452: PPUSH
34453: CALL_OW 263
34457: PUSH
34458: LD_INT 2
34460: EQUAL
34461: IFFALSE 34512
// begin j := IsControledBy ( i ) ;
34463: LD_ADDR_VAR 0 7
34467: PUSH
34468: LD_VAR 0 6
34472: PPUSH
34473: CALL_OW 312
34477: ST_TO_ADDR
// if j then
34478: LD_VAR 0 7
34482: IFFALSE 34512
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34484: LD_ADDR_VAR 0 10
34488: PUSH
34489: LD_VAR 0 10
34493: PUSH
34494: LD_VAR 0 7
34498: PPUSH
34499: LD_INT 3
34501: PPUSH
34502: CALL_OW 259
34506: PUSH
34507: LD_INT 3
34509: MUL
34510: MUL
34511: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34512: LD_VAR 0 6
34516: PPUSH
34517: CALL_OW 264
34521: PUSH
34522: LD_INT 5
34524: PUSH
34525: LD_INT 6
34527: PUSH
34528: LD_INT 46
34530: PUSH
34531: LD_INT 44
34533: PUSH
34534: LD_INT 47
34536: PUSH
34537: LD_INT 45
34539: PUSH
34540: LD_INT 28
34542: PUSH
34543: LD_INT 7
34545: PUSH
34546: LD_INT 27
34548: PUSH
34549: LD_INT 29
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: IN
34564: PUSH
34565: LD_VAR 0 1
34569: PPUSH
34570: LD_INT 52
34572: PPUSH
34573: CALL_OW 321
34577: PUSH
34578: LD_INT 2
34580: EQUAL
34581: AND
34582: IFFALSE 34599
// bpoints := bpoints * 1.2 ;
34584: LD_ADDR_VAR 0 10
34588: PUSH
34589: LD_VAR 0 10
34593: PUSH
34594: LD_REAL  1.20000000000000E+0000
34597: MUL
34598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34599: LD_VAR 0 6
34603: PPUSH
34604: CALL_OW 264
34608: PUSH
34609: LD_INT 6
34611: PUSH
34612: LD_INT 46
34614: PUSH
34615: LD_INT 47
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: LIST
34622: IN
34623: IFFALSE 34640
// bpoints := bpoints * 1.2 ;
34625: LD_ADDR_VAR 0 10
34629: PUSH
34630: LD_VAR 0 10
34634: PUSH
34635: LD_REAL  1.20000000000000E+0000
34638: MUL
34639: ST_TO_ADDR
// end ; unit_building :
34640: GO 34654
34642: LD_INT 3
34644: DOUBLE
34645: EQUAL
34646: IFTRUE 34650
34648: GO 34653
34650: POP
// ; end ;
34651: GO 34654
34653: POP
// for j = 1 to 3 do
34654: LD_ADDR_VAR 0 7
34658: PUSH
34659: DOUBLE
34660: LD_INT 1
34662: DEC
34663: ST_TO_ADDR
34664: LD_INT 3
34666: PUSH
34667: FOR_TO
34668: IFFALSE 34721
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34670: LD_ADDR_VAR 0 5
34674: PUSH
34675: LD_VAR 0 5
34679: PPUSH
34680: LD_VAR 0 7
34684: PPUSH
34685: LD_VAR 0 5
34689: PUSH
34690: LD_VAR 0 7
34694: ARRAY
34695: PUSH
34696: LD_VAR 0 9
34700: PUSH
34701: LD_VAR 0 7
34705: ARRAY
34706: PUSH
34707: LD_VAR 0 10
34711: MUL
34712: PLUS
34713: PPUSH
34714: CALL_OW 1
34718: ST_TO_ADDR
34719: GO 34667
34721: POP
34722: POP
// end ;
34723: GO 33202
34725: POP
34726: POP
// result := Replace ( result , 4 , tmp ) ;
34727: LD_ADDR_VAR 0 5
34731: PUSH
34732: LD_VAR 0 5
34736: PPUSH
34737: LD_INT 4
34739: PPUSH
34740: LD_VAR 0 8
34744: PPUSH
34745: CALL_OW 1
34749: ST_TO_ADDR
// end ;
34750: LD_VAR 0 5
34754: RET
// export function DangerAtRange ( unit , range ) ; begin
34755: LD_INT 0
34757: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34758: LD_ADDR_VAR 0 3
34762: PUSH
34763: LD_VAR 0 1
34767: PPUSH
34768: CALL_OW 255
34772: PPUSH
34773: LD_VAR 0 1
34777: PPUSH
34778: CALL_OW 250
34782: PPUSH
34783: LD_VAR 0 1
34787: PPUSH
34788: CALL_OW 251
34792: PPUSH
34793: LD_VAR 0 2
34797: PPUSH
34798: CALL 33054 0 4
34802: ST_TO_ADDR
// end ;
34803: LD_VAR 0 3
34807: RET
// export function DangerInArea ( side , area ) ; begin
34808: LD_INT 0
34810: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34811: LD_ADDR_VAR 0 3
34815: PUSH
34816: LD_VAR 0 2
34820: PPUSH
34821: LD_INT 81
34823: PUSH
34824: LD_VAR 0 1
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PPUSH
34833: CALL_OW 70
34837: ST_TO_ADDR
// end ;
34838: LD_VAR 0 3
34842: RET
// export function IsExtension ( b ) ; begin
34843: LD_INT 0
34845: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34846: LD_ADDR_VAR 0 2
34850: PUSH
34851: LD_VAR 0 1
34855: PUSH
34856: LD_INT 23
34858: PUSH
34859: LD_INT 20
34861: PUSH
34862: LD_INT 22
34864: PUSH
34865: LD_INT 17
34867: PUSH
34868: LD_INT 24
34870: PUSH
34871: LD_INT 21
34873: PUSH
34874: LD_INT 19
34876: PUSH
34877: LD_INT 16
34879: PUSH
34880: LD_INT 25
34882: PUSH
34883: LD_INT 18
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: IN
34898: ST_TO_ADDR
// end ;
34899: LD_VAR 0 2
34903: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34904: LD_INT 0
34906: PPUSH
34907: PPUSH
34908: PPUSH
// result := [ ] ;
34909: LD_ADDR_VAR 0 4
34913: PUSH
34914: EMPTY
34915: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34916: LD_ADDR_VAR 0 5
34920: PUSH
34921: LD_VAR 0 2
34925: PPUSH
34926: LD_INT 21
34928: PUSH
34929: LD_INT 3
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PPUSH
34936: CALL_OW 70
34940: ST_TO_ADDR
// if not tmp then
34941: LD_VAR 0 5
34945: NOT
34946: IFFALSE 34950
// exit ;
34948: GO 35014
// if checkLink then
34950: LD_VAR 0 3
34954: IFFALSE 35004
// begin for i in tmp do
34956: LD_ADDR_VAR 0 6
34960: PUSH
34961: LD_VAR 0 5
34965: PUSH
34966: FOR_IN
34967: IFFALSE 35002
// if GetBase ( i ) <> base then
34969: LD_VAR 0 6
34973: PPUSH
34974: CALL_OW 274
34978: PUSH
34979: LD_VAR 0 1
34983: NONEQUAL
34984: IFFALSE 35000
// ComLinkToBase ( base , i ) ;
34986: LD_VAR 0 1
34990: PPUSH
34991: LD_VAR 0 6
34995: PPUSH
34996: CALL_OW 169
35000: GO 34966
35002: POP
35003: POP
// end ; result := tmp ;
35004: LD_ADDR_VAR 0 4
35008: PUSH
35009: LD_VAR 0 5
35013: ST_TO_ADDR
// end ;
35014: LD_VAR 0 4
35018: RET
// export function ComComplete ( units , b ) ; var i ; begin
35019: LD_INT 0
35021: PPUSH
35022: PPUSH
// if not units then
35023: LD_VAR 0 1
35027: NOT
35028: IFFALSE 35032
// exit ;
35030: GO 35122
// for i in units do
35032: LD_ADDR_VAR 0 4
35036: PUSH
35037: LD_VAR 0 1
35041: PUSH
35042: FOR_IN
35043: IFFALSE 35120
// if BuildingStatus ( b ) = bs_build then
35045: LD_VAR 0 2
35049: PPUSH
35050: CALL_OW 461
35054: PUSH
35055: LD_INT 1
35057: EQUAL
35058: IFFALSE 35118
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35060: LD_VAR 0 4
35064: PPUSH
35065: LD_STRING h
35067: PUSH
35068: LD_VAR 0 2
35072: PPUSH
35073: CALL_OW 250
35077: PUSH
35078: LD_VAR 0 2
35082: PPUSH
35083: CALL_OW 251
35087: PUSH
35088: LD_VAR 0 2
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: PUSH
35111: EMPTY
35112: LIST
35113: PPUSH
35114: CALL_OW 446
35118: GO 35042
35120: POP
35121: POP
// end ;
35122: LD_VAR 0 3
35126: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35127: LD_INT 0
35129: PPUSH
35130: PPUSH
35131: PPUSH
35132: PPUSH
35133: PPUSH
35134: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35135: LD_VAR 0 1
35139: NOT
35140: PUSH
35141: LD_VAR 0 1
35145: PPUSH
35146: CALL_OW 263
35150: PUSH
35151: LD_INT 2
35153: NONEQUAL
35154: OR
35155: IFFALSE 35159
// exit ;
35157: GO 35475
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35159: LD_ADDR_VAR 0 6
35163: PUSH
35164: LD_INT 22
35166: PUSH
35167: LD_VAR 0 1
35171: PPUSH
35172: CALL_OW 255
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: LD_INT 30
35186: PUSH
35187: LD_INT 36
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 34
35196: PUSH
35197: LD_INT 31
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: LIST
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PPUSH
35213: CALL_OW 69
35217: ST_TO_ADDR
// if not tmp then
35218: LD_VAR 0 6
35222: NOT
35223: IFFALSE 35227
// exit ;
35225: GO 35475
// result := [ ] ;
35227: LD_ADDR_VAR 0 2
35231: PUSH
35232: EMPTY
35233: ST_TO_ADDR
// for i in tmp do
35234: LD_ADDR_VAR 0 3
35238: PUSH
35239: LD_VAR 0 6
35243: PUSH
35244: FOR_IN
35245: IFFALSE 35316
// begin t := UnitsInside ( i ) ;
35247: LD_ADDR_VAR 0 4
35251: PUSH
35252: LD_VAR 0 3
35256: PPUSH
35257: CALL_OW 313
35261: ST_TO_ADDR
// if t then
35262: LD_VAR 0 4
35266: IFFALSE 35314
// for j in t do
35268: LD_ADDR_VAR 0 7
35272: PUSH
35273: LD_VAR 0 4
35277: PUSH
35278: FOR_IN
35279: IFFALSE 35312
// result := Replace ( result , result + 1 , j ) ;
35281: LD_ADDR_VAR 0 2
35285: PUSH
35286: LD_VAR 0 2
35290: PPUSH
35291: LD_VAR 0 2
35295: PUSH
35296: LD_INT 1
35298: PLUS
35299: PPUSH
35300: LD_VAR 0 7
35304: PPUSH
35305: CALL_OW 1
35309: ST_TO_ADDR
35310: GO 35278
35312: POP
35313: POP
// end ;
35314: GO 35244
35316: POP
35317: POP
// if not result then
35318: LD_VAR 0 2
35322: NOT
35323: IFFALSE 35327
// exit ;
35325: GO 35475
// mech := result [ 1 ] ;
35327: LD_ADDR_VAR 0 5
35331: PUSH
35332: LD_VAR 0 2
35336: PUSH
35337: LD_INT 1
35339: ARRAY
35340: ST_TO_ADDR
// if result > 1 then
35341: LD_VAR 0 2
35345: PUSH
35346: LD_INT 1
35348: GREATER
35349: IFFALSE 35461
// begin for i = 2 to result do
35351: LD_ADDR_VAR 0 3
35355: PUSH
35356: DOUBLE
35357: LD_INT 2
35359: DEC
35360: ST_TO_ADDR
35361: LD_VAR 0 2
35365: PUSH
35366: FOR_TO
35367: IFFALSE 35459
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35369: LD_ADDR_VAR 0 4
35373: PUSH
35374: LD_VAR 0 2
35378: PUSH
35379: LD_VAR 0 3
35383: ARRAY
35384: PPUSH
35385: LD_INT 3
35387: PPUSH
35388: CALL_OW 259
35392: PUSH
35393: LD_VAR 0 2
35397: PUSH
35398: LD_VAR 0 3
35402: ARRAY
35403: PPUSH
35404: CALL_OW 432
35408: MINUS
35409: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35410: LD_VAR 0 4
35414: PUSH
35415: LD_VAR 0 5
35419: PPUSH
35420: LD_INT 3
35422: PPUSH
35423: CALL_OW 259
35427: PUSH
35428: LD_VAR 0 5
35432: PPUSH
35433: CALL_OW 432
35437: MINUS
35438: GREATEREQUAL
35439: IFFALSE 35457
// mech := result [ i ] ;
35441: LD_ADDR_VAR 0 5
35445: PUSH
35446: LD_VAR 0 2
35450: PUSH
35451: LD_VAR 0 3
35455: ARRAY
35456: ST_TO_ADDR
// end ;
35457: GO 35366
35459: POP
35460: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35461: LD_VAR 0 1
35465: PPUSH
35466: LD_VAR 0 5
35470: PPUSH
35471: CALL_OW 135
// end ;
35475: LD_VAR 0 2
35479: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35480: LD_INT 0
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
35488: PPUSH
35489: PPUSH
35490: PPUSH
35491: PPUSH
35492: PPUSH
35493: PPUSH
35494: PPUSH
// result := [ ] ;
35495: LD_ADDR_VAR 0 7
35499: PUSH
35500: EMPTY
35501: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35502: LD_VAR 0 1
35506: PPUSH
35507: CALL_OW 266
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: IN
35522: NOT
35523: IFFALSE 35527
// exit ;
35525: GO 37161
// if name then
35527: LD_VAR 0 3
35531: IFFALSE 35547
// SetBName ( base_dep , name ) ;
35533: LD_VAR 0 1
35537: PPUSH
35538: LD_VAR 0 3
35542: PPUSH
35543: CALL_OW 500
// base := GetBase ( base_dep ) ;
35547: LD_ADDR_VAR 0 15
35551: PUSH
35552: LD_VAR 0 1
35556: PPUSH
35557: CALL_OW 274
35561: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35562: LD_ADDR_VAR 0 16
35566: PUSH
35567: LD_VAR 0 1
35571: PPUSH
35572: CALL_OW 255
35576: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35577: LD_ADDR_VAR 0 17
35581: PUSH
35582: LD_VAR 0 1
35586: PPUSH
35587: CALL_OW 248
35591: ST_TO_ADDR
// if sources then
35592: LD_VAR 0 5
35596: IFFALSE 35643
// for i = 1 to 3 do
35598: LD_ADDR_VAR 0 8
35602: PUSH
35603: DOUBLE
35604: LD_INT 1
35606: DEC
35607: ST_TO_ADDR
35608: LD_INT 3
35610: PUSH
35611: FOR_TO
35612: IFFALSE 35641
// AddResourceType ( base , i , sources [ i ] ) ;
35614: LD_VAR 0 15
35618: PPUSH
35619: LD_VAR 0 8
35623: PPUSH
35624: LD_VAR 0 5
35628: PUSH
35629: LD_VAR 0 8
35633: ARRAY
35634: PPUSH
35635: CALL_OW 276
35639: GO 35611
35641: POP
35642: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35643: LD_ADDR_VAR 0 18
35647: PUSH
35648: LD_VAR 0 15
35652: PPUSH
35653: LD_VAR 0 2
35657: PPUSH
35658: LD_INT 1
35660: PPUSH
35661: CALL 34904 0 3
35665: ST_TO_ADDR
// InitHc ;
35666: CALL_OW 19
// InitUc ;
35670: CALL_OW 18
// uc_side := side ;
35674: LD_ADDR_OWVAR 20
35678: PUSH
35679: LD_VAR 0 16
35683: ST_TO_ADDR
// uc_nation := nation ;
35684: LD_ADDR_OWVAR 21
35688: PUSH
35689: LD_VAR 0 17
35693: ST_TO_ADDR
// if buildings then
35694: LD_VAR 0 18
35698: IFFALSE 37020
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35700: LD_ADDR_VAR 0 19
35704: PUSH
35705: LD_VAR 0 18
35709: PPUSH
35710: LD_INT 2
35712: PUSH
35713: LD_INT 30
35715: PUSH
35716: LD_INT 29
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 30
35725: PUSH
35726: LD_INT 30
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: PPUSH
35738: CALL_OW 72
35742: ST_TO_ADDR
// if tmp then
35743: LD_VAR 0 19
35747: IFFALSE 35795
// for i in tmp do
35749: LD_ADDR_VAR 0 8
35753: PUSH
35754: LD_VAR 0 19
35758: PUSH
35759: FOR_IN
35760: IFFALSE 35793
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35762: LD_VAR 0 8
35766: PPUSH
35767: CALL_OW 250
35771: PPUSH
35772: LD_VAR 0 8
35776: PPUSH
35777: CALL_OW 251
35781: PPUSH
35782: LD_VAR 0 16
35786: PPUSH
35787: CALL_OW 441
35791: GO 35759
35793: POP
35794: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35795: LD_VAR 0 18
35799: PPUSH
35800: LD_INT 2
35802: PUSH
35803: LD_INT 30
35805: PUSH
35806: LD_INT 32
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 30
35815: PUSH
35816: LD_INT 33
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: PPUSH
35828: CALL_OW 72
35832: IFFALSE 35920
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35834: LD_ADDR_VAR 0 8
35838: PUSH
35839: LD_VAR 0 18
35843: PPUSH
35844: LD_INT 2
35846: PUSH
35847: LD_INT 30
35849: PUSH
35850: LD_INT 32
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 30
35859: PUSH
35860: LD_INT 33
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: PPUSH
35872: CALL_OW 72
35876: PUSH
35877: FOR_IN
35878: IFFALSE 35918
// begin if not GetBWeapon ( i ) then
35880: LD_VAR 0 8
35884: PPUSH
35885: CALL_OW 269
35889: NOT
35890: IFFALSE 35916
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35892: LD_VAR 0 8
35896: PPUSH
35897: LD_VAR 0 8
35901: PPUSH
35902: LD_VAR 0 2
35906: PPUSH
35907: CALL 37166 0 2
35911: PPUSH
35912: CALL_OW 431
// end ;
35916: GO 35877
35918: POP
35919: POP
// end ; for i = 1 to personel do
35920: LD_ADDR_VAR 0 8
35924: PUSH
35925: DOUBLE
35926: LD_INT 1
35928: DEC
35929: ST_TO_ADDR
35930: LD_VAR 0 6
35934: PUSH
35935: FOR_TO
35936: IFFALSE 37000
// begin if i > 4 then
35938: LD_VAR 0 8
35942: PUSH
35943: LD_INT 4
35945: GREATER
35946: IFFALSE 35950
// break ;
35948: GO 37000
// case i of 1 :
35950: LD_VAR 0 8
35954: PUSH
35955: LD_INT 1
35957: DOUBLE
35958: EQUAL
35959: IFTRUE 35963
35961: GO 36043
35963: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35964: LD_ADDR_VAR 0 12
35968: PUSH
35969: LD_VAR 0 18
35973: PPUSH
35974: LD_INT 22
35976: PUSH
35977: LD_VAR 0 16
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 58
35988: PUSH
35989: EMPTY
35990: LIST
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: LD_INT 30
35997: PUSH
35998: LD_INT 32
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 30
36007: PUSH
36008: LD_INT 4
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 30
36017: PUSH
36018: LD_INT 5
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: LIST
36035: PPUSH
36036: CALL_OW 72
36040: ST_TO_ADDR
36041: GO 36265
36043: LD_INT 2
36045: DOUBLE
36046: EQUAL
36047: IFTRUE 36051
36049: GO 36113
36051: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36052: LD_ADDR_VAR 0 12
36056: PUSH
36057: LD_VAR 0 18
36061: PPUSH
36062: LD_INT 22
36064: PUSH
36065: LD_VAR 0 16
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 2
36076: PUSH
36077: LD_INT 30
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 30
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PPUSH
36106: CALL_OW 72
36110: ST_TO_ADDR
36111: GO 36265
36113: LD_INT 3
36115: DOUBLE
36116: EQUAL
36117: IFTRUE 36121
36119: GO 36183
36121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36122: LD_ADDR_VAR 0 12
36126: PUSH
36127: LD_VAR 0 18
36131: PPUSH
36132: LD_INT 22
36134: PUSH
36135: LD_VAR 0 16
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: LD_INT 30
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 30
36159: PUSH
36160: LD_INT 3
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PPUSH
36176: CALL_OW 72
36180: ST_TO_ADDR
36181: GO 36265
36183: LD_INT 4
36185: DOUBLE
36186: EQUAL
36187: IFTRUE 36191
36189: GO 36264
36191: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36192: LD_ADDR_VAR 0 12
36196: PUSH
36197: LD_VAR 0 18
36201: PPUSH
36202: LD_INT 22
36204: PUSH
36205: LD_VAR 0 16
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: LD_INT 30
36219: PUSH
36220: LD_INT 6
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 30
36229: PUSH
36230: LD_INT 7
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 30
36239: PUSH
36240: LD_INT 8
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PPUSH
36257: CALL_OW 72
36261: ST_TO_ADDR
36262: GO 36265
36264: POP
// if i = 1 then
36265: LD_VAR 0 8
36269: PUSH
36270: LD_INT 1
36272: EQUAL
36273: IFFALSE 36384
// begin tmp := [ ] ;
36275: LD_ADDR_VAR 0 19
36279: PUSH
36280: EMPTY
36281: ST_TO_ADDR
// for j in f do
36282: LD_ADDR_VAR 0 9
36286: PUSH
36287: LD_VAR 0 12
36291: PUSH
36292: FOR_IN
36293: IFFALSE 36366
// if GetBType ( j ) = b_bunker then
36295: LD_VAR 0 9
36299: PPUSH
36300: CALL_OW 266
36304: PUSH
36305: LD_INT 32
36307: EQUAL
36308: IFFALSE 36335
// tmp := Insert ( tmp , 1 , j ) else
36310: LD_ADDR_VAR 0 19
36314: PUSH
36315: LD_VAR 0 19
36319: PPUSH
36320: LD_INT 1
36322: PPUSH
36323: LD_VAR 0 9
36327: PPUSH
36328: CALL_OW 2
36332: ST_TO_ADDR
36333: GO 36364
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36335: LD_ADDR_VAR 0 19
36339: PUSH
36340: LD_VAR 0 19
36344: PPUSH
36345: LD_VAR 0 19
36349: PUSH
36350: LD_INT 1
36352: PLUS
36353: PPUSH
36354: LD_VAR 0 9
36358: PPUSH
36359: CALL_OW 2
36363: ST_TO_ADDR
36364: GO 36292
36366: POP
36367: POP
// if tmp then
36368: LD_VAR 0 19
36372: IFFALSE 36384
// f := tmp ;
36374: LD_ADDR_VAR 0 12
36378: PUSH
36379: LD_VAR 0 19
36383: ST_TO_ADDR
// end ; x := personel [ i ] ;
36384: LD_ADDR_VAR 0 13
36388: PUSH
36389: LD_VAR 0 6
36393: PUSH
36394: LD_VAR 0 8
36398: ARRAY
36399: ST_TO_ADDR
// if x = - 1 then
36400: LD_VAR 0 13
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: EQUAL
36409: IFFALSE 36618
// begin for j in f do
36411: LD_ADDR_VAR 0 9
36415: PUSH
36416: LD_VAR 0 12
36420: PUSH
36421: FOR_IN
36422: IFFALSE 36614
// repeat InitHc ;
36424: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36428: LD_VAR 0 9
36432: PPUSH
36433: CALL_OW 266
36437: PUSH
36438: LD_INT 5
36440: EQUAL
36441: IFFALSE 36511
// begin if UnitsInside ( j ) < 3 then
36443: LD_VAR 0 9
36447: PPUSH
36448: CALL_OW 313
36452: PUSH
36453: LD_INT 3
36455: LESS
36456: IFFALSE 36492
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36458: LD_INT 0
36460: PPUSH
36461: LD_INT 5
36463: PUSH
36464: LD_INT 8
36466: PUSH
36467: LD_INT 9
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: LIST
36474: PUSH
36475: LD_VAR 0 17
36479: ARRAY
36480: PPUSH
36481: LD_VAR 0 4
36485: PPUSH
36486: CALL_OW 380
36490: GO 36509
// PrepareHuman ( false , i , skill ) ;
36492: LD_INT 0
36494: PPUSH
36495: LD_VAR 0 8
36499: PPUSH
36500: LD_VAR 0 4
36504: PPUSH
36505: CALL_OW 380
// end else
36509: GO 36528
// PrepareHuman ( false , i , skill ) ;
36511: LD_INT 0
36513: PPUSH
36514: LD_VAR 0 8
36518: PPUSH
36519: LD_VAR 0 4
36523: PPUSH
36524: CALL_OW 380
// un := CreateHuman ;
36528: LD_ADDR_VAR 0 14
36532: PUSH
36533: CALL_OW 44
36537: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36538: LD_ADDR_VAR 0 7
36542: PUSH
36543: LD_VAR 0 7
36547: PPUSH
36548: LD_INT 1
36550: PPUSH
36551: LD_VAR 0 14
36555: PPUSH
36556: CALL_OW 2
36560: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36561: LD_VAR 0 14
36565: PPUSH
36566: LD_VAR 0 9
36570: PPUSH
36571: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36575: LD_VAR 0 9
36579: PPUSH
36580: CALL_OW 313
36584: PUSH
36585: LD_INT 6
36587: EQUAL
36588: PUSH
36589: LD_VAR 0 9
36593: PPUSH
36594: CALL_OW 266
36598: PUSH
36599: LD_INT 32
36601: PUSH
36602: LD_INT 31
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: IN
36609: OR
36610: IFFALSE 36424
36612: GO 36421
36614: POP
36615: POP
// end else
36616: GO 36998
// for j = 1 to x do
36618: LD_ADDR_VAR 0 9
36622: PUSH
36623: DOUBLE
36624: LD_INT 1
36626: DEC
36627: ST_TO_ADDR
36628: LD_VAR 0 13
36632: PUSH
36633: FOR_TO
36634: IFFALSE 36996
// begin InitHc ;
36636: CALL_OW 19
// if not f then
36640: LD_VAR 0 12
36644: NOT
36645: IFFALSE 36734
// begin PrepareHuman ( false , i , skill ) ;
36647: LD_INT 0
36649: PPUSH
36650: LD_VAR 0 8
36654: PPUSH
36655: LD_VAR 0 4
36659: PPUSH
36660: CALL_OW 380
// un := CreateHuman ;
36664: LD_ADDR_VAR 0 14
36668: PUSH
36669: CALL_OW 44
36673: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36674: LD_ADDR_VAR 0 7
36678: PUSH
36679: LD_VAR 0 7
36683: PPUSH
36684: LD_INT 1
36686: PPUSH
36687: LD_VAR 0 14
36691: PPUSH
36692: CALL_OW 2
36696: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36697: LD_VAR 0 14
36701: PPUSH
36702: LD_VAR 0 1
36706: PPUSH
36707: CALL_OW 250
36711: PPUSH
36712: LD_VAR 0 1
36716: PPUSH
36717: CALL_OW 251
36721: PPUSH
36722: LD_INT 10
36724: PPUSH
36725: LD_INT 0
36727: PPUSH
36728: CALL_OW 50
// continue ;
36732: GO 36633
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36734: LD_VAR 0 12
36738: PUSH
36739: LD_INT 1
36741: ARRAY
36742: PPUSH
36743: CALL_OW 313
36747: PUSH
36748: LD_VAR 0 12
36752: PUSH
36753: LD_INT 1
36755: ARRAY
36756: PPUSH
36757: CALL_OW 266
36761: PUSH
36762: LD_INT 32
36764: PUSH
36765: LD_INT 31
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: IN
36772: AND
36773: PUSH
36774: LD_VAR 0 12
36778: PUSH
36779: LD_INT 1
36781: ARRAY
36782: PPUSH
36783: CALL_OW 313
36787: PUSH
36788: LD_INT 6
36790: EQUAL
36791: OR
36792: IFFALSE 36812
// f := Delete ( f , 1 ) ;
36794: LD_ADDR_VAR 0 12
36798: PUSH
36799: LD_VAR 0 12
36803: PPUSH
36804: LD_INT 1
36806: PPUSH
36807: CALL_OW 3
36811: ST_TO_ADDR
// if not f then
36812: LD_VAR 0 12
36816: NOT
36817: IFFALSE 36835
// begin x := x + 2 ;
36819: LD_ADDR_VAR 0 13
36823: PUSH
36824: LD_VAR 0 13
36828: PUSH
36829: LD_INT 2
36831: PLUS
36832: ST_TO_ADDR
// continue ;
36833: GO 36633
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36835: LD_VAR 0 12
36839: PUSH
36840: LD_INT 1
36842: ARRAY
36843: PPUSH
36844: CALL_OW 266
36848: PUSH
36849: LD_INT 5
36851: EQUAL
36852: IFFALSE 36926
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36854: LD_VAR 0 12
36858: PUSH
36859: LD_INT 1
36861: ARRAY
36862: PPUSH
36863: CALL_OW 313
36867: PUSH
36868: LD_INT 3
36870: LESS
36871: IFFALSE 36907
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36873: LD_INT 0
36875: PPUSH
36876: LD_INT 5
36878: PUSH
36879: LD_INT 8
36881: PUSH
36882: LD_INT 9
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: PUSH
36890: LD_VAR 0 17
36894: ARRAY
36895: PPUSH
36896: LD_VAR 0 4
36900: PPUSH
36901: CALL_OW 380
36905: GO 36924
// PrepareHuman ( false , i , skill ) ;
36907: LD_INT 0
36909: PPUSH
36910: LD_VAR 0 8
36914: PPUSH
36915: LD_VAR 0 4
36919: PPUSH
36920: CALL_OW 380
// end else
36924: GO 36943
// PrepareHuman ( false , i , skill ) ;
36926: LD_INT 0
36928: PPUSH
36929: LD_VAR 0 8
36933: PPUSH
36934: LD_VAR 0 4
36938: PPUSH
36939: CALL_OW 380
// un := CreateHuman ;
36943: LD_ADDR_VAR 0 14
36947: PUSH
36948: CALL_OW 44
36952: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36953: LD_ADDR_VAR 0 7
36957: PUSH
36958: LD_VAR 0 7
36962: PPUSH
36963: LD_INT 1
36965: PPUSH
36966: LD_VAR 0 14
36970: PPUSH
36971: CALL_OW 2
36975: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36976: LD_VAR 0 14
36980: PPUSH
36981: LD_VAR 0 12
36985: PUSH
36986: LD_INT 1
36988: ARRAY
36989: PPUSH
36990: CALL_OW 52
// end ;
36994: GO 36633
36996: POP
36997: POP
// end ;
36998: GO 35935
37000: POP
37001: POP
// result := result ^ buildings ;
37002: LD_ADDR_VAR 0 7
37006: PUSH
37007: LD_VAR 0 7
37011: PUSH
37012: LD_VAR 0 18
37016: ADD
37017: ST_TO_ADDR
// end else
37018: GO 37161
// begin for i = 1 to personel do
37020: LD_ADDR_VAR 0 8
37024: PUSH
37025: DOUBLE
37026: LD_INT 1
37028: DEC
37029: ST_TO_ADDR
37030: LD_VAR 0 6
37034: PUSH
37035: FOR_TO
37036: IFFALSE 37159
// begin if i > 4 then
37038: LD_VAR 0 8
37042: PUSH
37043: LD_INT 4
37045: GREATER
37046: IFFALSE 37050
// break ;
37048: GO 37159
// x := personel [ i ] ;
37050: LD_ADDR_VAR 0 13
37054: PUSH
37055: LD_VAR 0 6
37059: PUSH
37060: LD_VAR 0 8
37064: ARRAY
37065: ST_TO_ADDR
// if x = - 1 then
37066: LD_VAR 0 13
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: EQUAL
37075: IFFALSE 37079
// continue ;
37077: GO 37035
// PrepareHuman ( false , i , skill ) ;
37079: LD_INT 0
37081: PPUSH
37082: LD_VAR 0 8
37086: PPUSH
37087: LD_VAR 0 4
37091: PPUSH
37092: CALL_OW 380
// un := CreateHuman ;
37096: LD_ADDR_VAR 0 14
37100: PUSH
37101: CALL_OW 44
37105: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37106: LD_VAR 0 14
37110: PPUSH
37111: LD_VAR 0 1
37115: PPUSH
37116: CALL_OW 250
37120: PPUSH
37121: LD_VAR 0 1
37125: PPUSH
37126: CALL_OW 251
37130: PPUSH
37131: LD_INT 10
37133: PPUSH
37134: LD_INT 0
37136: PPUSH
37137: CALL_OW 50
// result := result ^ un ;
37141: LD_ADDR_VAR 0 7
37145: PUSH
37146: LD_VAR 0 7
37150: PUSH
37151: LD_VAR 0 14
37155: ADD
37156: ST_TO_ADDR
// end ;
37157: GO 37035
37159: POP
37160: POP
// end ; end ;
37161: LD_VAR 0 7
37165: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37166: LD_INT 0
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
37173: PPUSH
37174: PPUSH
37175: PPUSH
37176: PPUSH
37177: PPUSH
37178: PPUSH
37179: PPUSH
37180: PPUSH
37181: PPUSH
37182: PPUSH
37183: PPUSH
// result := false ;
37184: LD_ADDR_VAR 0 3
37188: PUSH
37189: LD_INT 0
37191: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37192: LD_VAR 0 1
37196: NOT
37197: PUSH
37198: LD_VAR 0 1
37202: PPUSH
37203: CALL_OW 266
37207: PUSH
37208: LD_INT 32
37210: PUSH
37211: LD_INT 33
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: IN
37218: NOT
37219: OR
37220: IFFALSE 37224
// exit ;
37222: GO 38333
// nat := GetNation ( tower ) ;
37224: LD_ADDR_VAR 0 12
37228: PUSH
37229: LD_VAR 0 1
37233: PPUSH
37234: CALL_OW 248
37238: ST_TO_ADDR
// side := GetSide ( tower ) ;
37239: LD_ADDR_VAR 0 16
37243: PUSH
37244: LD_VAR 0 1
37248: PPUSH
37249: CALL_OW 255
37253: ST_TO_ADDR
// x := GetX ( tower ) ;
37254: LD_ADDR_VAR 0 10
37258: PUSH
37259: LD_VAR 0 1
37263: PPUSH
37264: CALL_OW 250
37268: ST_TO_ADDR
// y := GetY ( tower ) ;
37269: LD_ADDR_VAR 0 11
37273: PUSH
37274: LD_VAR 0 1
37278: PPUSH
37279: CALL_OW 251
37283: ST_TO_ADDR
// if not x or not y then
37284: LD_VAR 0 10
37288: NOT
37289: PUSH
37290: LD_VAR 0 11
37294: NOT
37295: OR
37296: IFFALSE 37300
// exit ;
37298: GO 38333
// weapon := 0 ;
37300: LD_ADDR_VAR 0 18
37304: PUSH
37305: LD_INT 0
37307: ST_TO_ADDR
// fac_list := [ ] ;
37308: LD_ADDR_VAR 0 17
37312: PUSH
37313: EMPTY
37314: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37315: LD_ADDR_VAR 0 6
37319: PUSH
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL_OW 274
37329: PPUSH
37330: LD_VAR 0 2
37334: PPUSH
37335: LD_INT 0
37337: PPUSH
37338: CALL 34904 0 3
37342: PPUSH
37343: LD_INT 30
37345: PUSH
37346: LD_INT 3
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PPUSH
37353: CALL_OW 72
37357: ST_TO_ADDR
// if not factories then
37358: LD_VAR 0 6
37362: NOT
37363: IFFALSE 37367
// exit ;
37365: GO 38333
// for i in factories do
37367: LD_ADDR_VAR 0 8
37371: PUSH
37372: LD_VAR 0 6
37376: PUSH
37377: FOR_IN
37378: IFFALSE 37403
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37380: LD_ADDR_VAR 0 17
37384: PUSH
37385: LD_VAR 0 17
37389: PUSH
37390: LD_VAR 0 8
37394: PPUSH
37395: CALL_OW 478
37399: UNION
37400: ST_TO_ADDR
37401: GO 37377
37403: POP
37404: POP
// if not fac_list then
37405: LD_VAR 0 17
37409: NOT
37410: IFFALSE 37414
// exit ;
37412: GO 38333
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37414: LD_ADDR_VAR 0 5
37418: PUSH
37419: LD_INT 4
37421: PUSH
37422: LD_INT 5
37424: PUSH
37425: LD_INT 9
37427: PUSH
37428: LD_INT 10
37430: PUSH
37431: LD_INT 6
37433: PUSH
37434: LD_INT 7
37436: PUSH
37437: LD_INT 11
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 27
37451: PUSH
37452: LD_INT 28
37454: PUSH
37455: LD_INT 26
37457: PUSH
37458: LD_INT 30
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 43
37469: PUSH
37470: LD_INT 44
37472: PUSH
37473: LD_INT 46
37475: PUSH
37476: LD_INT 45
37478: PUSH
37479: LD_INT 47
37481: PUSH
37482: LD_INT 49
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: LIST
37497: PUSH
37498: LD_VAR 0 12
37502: ARRAY
37503: ST_TO_ADDR
// list := list isect fac_list ;
37504: LD_ADDR_VAR 0 5
37508: PUSH
37509: LD_VAR 0 5
37513: PUSH
37514: LD_VAR 0 17
37518: ISECT
37519: ST_TO_ADDR
// if not list then
37520: LD_VAR 0 5
37524: NOT
37525: IFFALSE 37529
// exit ;
37527: GO 38333
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37529: LD_VAR 0 12
37533: PUSH
37534: LD_INT 3
37536: EQUAL
37537: PUSH
37538: LD_INT 49
37540: PUSH
37541: LD_VAR 0 5
37545: IN
37546: AND
37547: PUSH
37548: LD_INT 31
37550: PPUSH
37551: LD_VAR 0 16
37555: PPUSH
37556: CALL_OW 321
37560: PUSH
37561: LD_INT 2
37563: EQUAL
37564: AND
37565: IFFALSE 37625
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37567: LD_INT 22
37569: PUSH
37570: LD_VAR 0 16
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 35
37581: PUSH
37582: LD_INT 49
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 91
37591: PUSH
37592: LD_VAR 0 1
37596: PUSH
37597: LD_INT 10
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: LIST
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: LIST
37609: PPUSH
37610: CALL_OW 69
37614: NOT
37615: IFFALSE 37625
// weapon := ru_time_lapser ;
37617: LD_ADDR_VAR 0 18
37621: PUSH
37622: LD_INT 49
37624: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37625: LD_VAR 0 12
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: IN
37640: PUSH
37641: LD_INT 11
37643: PUSH
37644: LD_VAR 0 5
37648: IN
37649: PUSH
37650: LD_INT 30
37652: PUSH
37653: LD_VAR 0 5
37657: IN
37658: OR
37659: AND
37660: PUSH
37661: LD_INT 6
37663: PPUSH
37664: LD_VAR 0 16
37668: PPUSH
37669: CALL_OW 321
37673: PUSH
37674: LD_INT 2
37676: EQUAL
37677: AND
37678: IFFALSE 37843
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37680: LD_INT 22
37682: PUSH
37683: LD_VAR 0 16
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: LD_INT 35
37697: PUSH
37698: LD_INT 11
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 35
37707: PUSH
37708: LD_INT 30
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 91
37722: PUSH
37723: LD_VAR 0 1
37727: PUSH
37728: LD_INT 18
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: PPUSH
37741: CALL_OW 69
37745: NOT
37746: PUSH
37747: LD_INT 22
37749: PUSH
37750: LD_VAR 0 16
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: LD_INT 30
37764: PUSH
37765: LD_INT 32
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 30
37774: PUSH
37775: LD_INT 33
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 91
37789: PUSH
37790: LD_VAR 0 1
37794: PUSH
37795: LD_INT 12
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: PUSH
37808: EMPTY
37809: LIST
37810: PPUSH
37811: CALL_OW 69
37815: PUSH
37816: LD_INT 2
37818: GREATER
37819: AND
37820: IFFALSE 37843
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37822: LD_ADDR_VAR 0 18
37826: PUSH
37827: LD_INT 11
37829: PUSH
37830: LD_INT 30
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_VAR 0 12
37841: ARRAY
37842: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37843: LD_VAR 0 18
37847: NOT
37848: PUSH
37849: LD_INT 40
37851: PPUSH
37852: LD_VAR 0 16
37856: PPUSH
37857: CALL_OW 321
37861: PUSH
37862: LD_INT 2
37864: EQUAL
37865: AND
37866: PUSH
37867: LD_INT 7
37869: PUSH
37870: LD_VAR 0 5
37874: IN
37875: PUSH
37876: LD_INT 28
37878: PUSH
37879: LD_VAR 0 5
37883: IN
37884: OR
37885: PUSH
37886: LD_INT 45
37888: PUSH
37889: LD_VAR 0 5
37893: IN
37894: OR
37895: AND
37896: IFFALSE 38150
// begin hex := GetHexInfo ( x , y ) ;
37898: LD_ADDR_VAR 0 4
37902: PUSH
37903: LD_VAR 0 10
37907: PPUSH
37908: LD_VAR 0 11
37912: PPUSH
37913: CALL_OW 546
37917: ST_TO_ADDR
// if hex [ 1 ] then
37918: LD_VAR 0 4
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: IFFALSE 37930
// exit ;
37928: GO 38333
// height := hex [ 2 ] ;
37930: LD_ADDR_VAR 0 15
37934: PUSH
37935: LD_VAR 0 4
37939: PUSH
37940: LD_INT 2
37942: ARRAY
37943: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37944: LD_ADDR_VAR 0 14
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: LD_INT 3
37957: PUSH
37958: LD_INT 5
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: ST_TO_ADDR
// for i in tmp do
37967: LD_ADDR_VAR 0 8
37971: PUSH
37972: LD_VAR 0 14
37976: PUSH
37977: FOR_IN
37978: IFFALSE 38148
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37980: LD_ADDR_VAR 0 9
37984: PUSH
37985: LD_VAR 0 10
37989: PPUSH
37990: LD_VAR 0 8
37994: PPUSH
37995: LD_INT 5
37997: PPUSH
37998: CALL_OW 272
38002: PUSH
38003: LD_VAR 0 11
38007: PPUSH
38008: LD_VAR 0 8
38012: PPUSH
38013: LD_INT 5
38015: PPUSH
38016: CALL_OW 273
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38025: LD_VAR 0 9
38029: PUSH
38030: LD_INT 1
38032: ARRAY
38033: PPUSH
38034: LD_VAR 0 9
38038: PUSH
38039: LD_INT 2
38041: ARRAY
38042: PPUSH
38043: CALL_OW 488
38047: IFFALSE 38146
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38049: LD_ADDR_VAR 0 4
38053: PUSH
38054: LD_VAR 0 9
38058: PUSH
38059: LD_INT 1
38061: ARRAY
38062: PPUSH
38063: LD_VAR 0 9
38067: PUSH
38068: LD_INT 2
38070: ARRAY
38071: PPUSH
38072: CALL_OW 546
38076: ST_TO_ADDR
// if hex [ 1 ] then
38077: LD_VAR 0 4
38081: PUSH
38082: LD_INT 1
38084: ARRAY
38085: IFFALSE 38089
// continue ;
38087: GO 37977
// h := hex [ 2 ] ;
38089: LD_ADDR_VAR 0 13
38093: PUSH
38094: LD_VAR 0 4
38098: PUSH
38099: LD_INT 2
38101: ARRAY
38102: ST_TO_ADDR
// if h + 7 < height then
38103: LD_VAR 0 13
38107: PUSH
38108: LD_INT 7
38110: PLUS
38111: PUSH
38112: LD_VAR 0 15
38116: LESS
38117: IFFALSE 38146
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38119: LD_ADDR_VAR 0 18
38123: PUSH
38124: LD_INT 7
38126: PUSH
38127: LD_INT 28
38129: PUSH
38130: LD_INT 45
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: LIST
38137: PUSH
38138: LD_VAR 0 12
38142: ARRAY
38143: ST_TO_ADDR
// break ;
38144: GO 38148
// end ; end ; end ;
38146: GO 37977
38148: POP
38149: POP
// end ; if not weapon then
38150: LD_VAR 0 18
38154: NOT
38155: IFFALSE 38215
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38157: LD_ADDR_VAR 0 5
38161: PUSH
38162: LD_VAR 0 5
38166: PUSH
38167: LD_INT 11
38169: PUSH
38170: LD_INT 30
38172: PUSH
38173: LD_INT 49
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: DIFF
38181: ST_TO_ADDR
// if not list then
38182: LD_VAR 0 5
38186: NOT
38187: IFFALSE 38191
// exit ;
38189: GO 38333
// weapon := list [ rand ( 1 , list ) ] ;
38191: LD_ADDR_VAR 0 18
38195: PUSH
38196: LD_VAR 0 5
38200: PUSH
38201: LD_INT 1
38203: PPUSH
38204: LD_VAR 0 5
38208: PPUSH
38209: CALL_OW 12
38213: ARRAY
38214: ST_TO_ADDR
// end ; if weapon then
38215: LD_VAR 0 18
38219: IFFALSE 38333
// begin tmp := CostOfWeapon ( weapon ) ;
38221: LD_ADDR_VAR 0 14
38225: PUSH
38226: LD_VAR 0 18
38230: PPUSH
38231: CALL_OW 451
38235: ST_TO_ADDR
// j := GetBase ( tower ) ;
38236: LD_ADDR_VAR 0 9
38240: PUSH
38241: LD_VAR 0 1
38245: PPUSH
38246: CALL_OW 274
38250: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38251: LD_VAR 0 9
38255: PPUSH
38256: LD_INT 1
38258: PPUSH
38259: CALL_OW 275
38263: PUSH
38264: LD_VAR 0 14
38268: PUSH
38269: LD_INT 1
38271: ARRAY
38272: GREATEREQUAL
38273: PUSH
38274: LD_VAR 0 9
38278: PPUSH
38279: LD_INT 2
38281: PPUSH
38282: CALL_OW 275
38286: PUSH
38287: LD_VAR 0 14
38291: PUSH
38292: LD_INT 2
38294: ARRAY
38295: GREATEREQUAL
38296: AND
38297: PUSH
38298: LD_VAR 0 9
38302: PPUSH
38303: LD_INT 3
38305: PPUSH
38306: CALL_OW 275
38310: PUSH
38311: LD_VAR 0 14
38315: PUSH
38316: LD_INT 3
38318: ARRAY
38319: GREATEREQUAL
38320: AND
38321: IFFALSE 38333
// result := weapon ;
38323: LD_ADDR_VAR 0 3
38327: PUSH
38328: LD_VAR 0 18
38332: ST_TO_ADDR
// end ; end ;
38333: LD_VAR 0 3
38337: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38338: LD_INT 0
38340: PPUSH
38341: PPUSH
// result := true ;
38342: LD_ADDR_VAR 0 3
38346: PUSH
38347: LD_INT 1
38349: ST_TO_ADDR
// if array1 = array2 then
38350: LD_VAR 0 1
38354: PUSH
38355: LD_VAR 0 2
38359: EQUAL
38360: IFFALSE 38420
// begin for i = 1 to array1 do
38362: LD_ADDR_VAR 0 4
38366: PUSH
38367: DOUBLE
38368: LD_INT 1
38370: DEC
38371: ST_TO_ADDR
38372: LD_VAR 0 1
38376: PUSH
38377: FOR_TO
38378: IFFALSE 38416
// if array1 [ i ] <> array2 [ i ] then
38380: LD_VAR 0 1
38384: PUSH
38385: LD_VAR 0 4
38389: ARRAY
38390: PUSH
38391: LD_VAR 0 2
38395: PUSH
38396: LD_VAR 0 4
38400: ARRAY
38401: NONEQUAL
38402: IFFALSE 38414
// begin result := false ;
38404: LD_ADDR_VAR 0 3
38408: PUSH
38409: LD_INT 0
38411: ST_TO_ADDR
// break ;
38412: GO 38416
// end ;
38414: GO 38377
38416: POP
38417: POP
// end else
38418: GO 38428
// result := false ;
38420: LD_ADDR_VAR 0 3
38424: PUSH
38425: LD_INT 0
38427: ST_TO_ADDR
// end ;
38428: LD_VAR 0 3
38432: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38433: LD_INT 0
38435: PPUSH
38436: PPUSH
// if not array1 or not array2 then
38437: LD_VAR 0 1
38441: NOT
38442: PUSH
38443: LD_VAR 0 2
38447: NOT
38448: OR
38449: IFFALSE 38453
// exit ;
38451: GO 38517
// result := true ;
38453: LD_ADDR_VAR 0 3
38457: PUSH
38458: LD_INT 1
38460: ST_TO_ADDR
// for i = 1 to array1 do
38461: LD_ADDR_VAR 0 4
38465: PUSH
38466: DOUBLE
38467: LD_INT 1
38469: DEC
38470: ST_TO_ADDR
38471: LD_VAR 0 1
38475: PUSH
38476: FOR_TO
38477: IFFALSE 38515
// if array1 [ i ] <> array2 [ i ] then
38479: LD_VAR 0 1
38483: PUSH
38484: LD_VAR 0 4
38488: ARRAY
38489: PUSH
38490: LD_VAR 0 2
38494: PUSH
38495: LD_VAR 0 4
38499: ARRAY
38500: NONEQUAL
38501: IFFALSE 38513
// begin result := false ;
38503: LD_ADDR_VAR 0 3
38507: PUSH
38508: LD_INT 0
38510: ST_TO_ADDR
// break ;
38511: GO 38515
// end ;
38513: GO 38476
38515: POP
38516: POP
// end ;
38517: LD_VAR 0 3
38521: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38522: LD_INT 0
38524: PPUSH
38525: PPUSH
38526: PPUSH
// pom := GetBase ( fac ) ;
38527: LD_ADDR_VAR 0 5
38531: PUSH
38532: LD_VAR 0 1
38536: PPUSH
38537: CALL_OW 274
38541: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38542: LD_ADDR_VAR 0 4
38546: PUSH
38547: LD_VAR 0 2
38551: PUSH
38552: LD_INT 1
38554: ARRAY
38555: PPUSH
38556: LD_VAR 0 2
38560: PUSH
38561: LD_INT 2
38563: ARRAY
38564: PPUSH
38565: LD_VAR 0 2
38569: PUSH
38570: LD_INT 3
38572: ARRAY
38573: PPUSH
38574: LD_VAR 0 2
38578: PUSH
38579: LD_INT 4
38581: ARRAY
38582: PPUSH
38583: CALL_OW 449
38587: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_VAR 0 5
38597: PPUSH
38598: LD_INT 1
38600: PPUSH
38601: CALL_OW 275
38605: PUSH
38606: LD_VAR 0 4
38610: PUSH
38611: LD_INT 1
38613: ARRAY
38614: GREATEREQUAL
38615: PUSH
38616: LD_VAR 0 5
38620: PPUSH
38621: LD_INT 2
38623: PPUSH
38624: CALL_OW 275
38628: PUSH
38629: LD_VAR 0 4
38633: PUSH
38634: LD_INT 2
38636: ARRAY
38637: GREATEREQUAL
38638: AND
38639: PUSH
38640: LD_VAR 0 5
38644: PPUSH
38645: LD_INT 3
38647: PPUSH
38648: CALL_OW 275
38652: PUSH
38653: LD_VAR 0 4
38657: PUSH
38658: LD_INT 3
38660: ARRAY
38661: GREATEREQUAL
38662: AND
38663: ST_TO_ADDR
// end ;
38664: LD_VAR 0 3
38668: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38669: LD_INT 0
38671: PPUSH
38672: PPUSH
38673: PPUSH
38674: PPUSH
// pom := GetBase ( building ) ;
38675: LD_ADDR_VAR 0 3
38679: PUSH
38680: LD_VAR 0 1
38684: PPUSH
38685: CALL_OW 274
38689: ST_TO_ADDR
// if not pom then
38690: LD_VAR 0 3
38694: NOT
38695: IFFALSE 38699
// exit ;
38697: GO 38869
// btype := GetBType ( building ) ;
38699: LD_ADDR_VAR 0 5
38703: PUSH
38704: LD_VAR 0 1
38708: PPUSH
38709: CALL_OW 266
38713: ST_TO_ADDR
// if btype = b_armoury then
38714: LD_VAR 0 5
38718: PUSH
38719: LD_INT 4
38721: EQUAL
38722: IFFALSE 38732
// btype := b_barracks ;
38724: LD_ADDR_VAR 0 5
38728: PUSH
38729: LD_INT 5
38731: ST_TO_ADDR
// if btype = b_depot then
38732: LD_VAR 0 5
38736: PUSH
38737: LD_INT 0
38739: EQUAL
38740: IFFALSE 38750
// btype := b_warehouse ;
38742: LD_ADDR_VAR 0 5
38746: PUSH
38747: LD_INT 1
38749: ST_TO_ADDR
// if btype = b_workshop then
38750: LD_VAR 0 5
38754: PUSH
38755: LD_INT 2
38757: EQUAL
38758: IFFALSE 38768
// btype := b_factory ;
38760: LD_ADDR_VAR 0 5
38764: PUSH
38765: LD_INT 3
38767: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38768: LD_ADDR_VAR 0 4
38772: PUSH
38773: LD_VAR 0 5
38777: PPUSH
38778: LD_VAR 0 1
38782: PPUSH
38783: CALL_OW 248
38787: PPUSH
38788: CALL_OW 450
38792: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38793: LD_ADDR_VAR 0 2
38797: PUSH
38798: LD_VAR 0 3
38802: PPUSH
38803: LD_INT 1
38805: PPUSH
38806: CALL_OW 275
38810: PUSH
38811: LD_VAR 0 4
38815: PUSH
38816: LD_INT 1
38818: ARRAY
38819: GREATEREQUAL
38820: PUSH
38821: LD_VAR 0 3
38825: PPUSH
38826: LD_INT 2
38828: PPUSH
38829: CALL_OW 275
38833: PUSH
38834: LD_VAR 0 4
38838: PUSH
38839: LD_INT 2
38841: ARRAY
38842: GREATEREQUAL
38843: AND
38844: PUSH
38845: LD_VAR 0 3
38849: PPUSH
38850: LD_INT 3
38852: PPUSH
38853: CALL_OW 275
38857: PUSH
38858: LD_VAR 0 4
38862: PUSH
38863: LD_INT 3
38865: ARRAY
38866: GREATEREQUAL
38867: AND
38868: ST_TO_ADDR
// end ;
38869: LD_VAR 0 2
38873: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38874: LD_INT 0
38876: PPUSH
38877: PPUSH
38878: PPUSH
// pom := GetBase ( building ) ;
38879: LD_ADDR_VAR 0 4
38883: PUSH
38884: LD_VAR 0 1
38888: PPUSH
38889: CALL_OW 274
38893: ST_TO_ADDR
// if not pom then
38894: LD_VAR 0 4
38898: NOT
38899: IFFALSE 38903
// exit ;
38901: GO 39004
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38903: LD_ADDR_VAR 0 5
38907: PUSH
38908: LD_VAR 0 2
38912: PPUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL_OW 248
38922: PPUSH
38923: CALL_OW 450
38927: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38928: LD_ADDR_VAR 0 3
38932: PUSH
38933: LD_VAR 0 4
38937: PPUSH
38938: LD_INT 1
38940: PPUSH
38941: CALL_OW 275
38945: PUSH
38946: LD_VAR 0 5
38950: PUSH
38951: LD_INT 1
38953: ARRAY
38954: GREATEREQUAL
38955: PUSH
38956: LD_VAR 0 4
38960: PPUSH
38961: LD_INT 2
38963: PPUSH
38964: CALL_OW 275
38968: PUSH
38969: LD_VAR 0 5
38973: PUSH
38974: LD_INT 2
38976: ARRAY
38977: GREATEREQUAL
38978: AND
38979: PUSH
38980: LD_VAR 0 4
38984: PPUSH
38985: LD_INT 3
38987: PPUSH
38988: CALL_OW 275
38992: PUSH
38993: LD_VAR 0 5
38997: PUSH
38998: LD_INT 3
39000: ARRAY
39001: GREATEREQUAL
39002: AND
39003: ST_TO_ADDR
// end ;
39004: LD_VAR 0 3
39008: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39009: LD_INT 0
39011: PPUSH
39012: PPUSH
39013: PPUSH
39014: PPUSH
39015: PPUSH
39016: PPUSH
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
39021: PPUSH
// result := false ;
39022: LD_ADDR_VAR 0 8
39026: PUSH
39027: LD_INT 0
39029: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39030: LD_VAR 0 5
39034: NOT
39035: PUSH
39036: LD_VAR 0 1
39040: NOT
39041: OR
39042: PUSH
39043: LD_VAR 0 2
39047: NOT
39048: OR
39049: PUSH
39050: LD_VAR 0 3
39054: NOT
39055: OR
39056: IFFALSE 39060
// exit ;
39058: GO 39874
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39060: LD_ADDR_VAR 0 14
39064: PUSH
39065: LD_VAR 0 1
39069: PPUSH
39070: LD_VAR 0 2
39074: PPUSH
39075: LD_VAR 0 3
39079: PPUSH
39080: LD_VAR 0 4
39084: PPUSH
39085: LD_VAR 0 5
39089: PUSH
39090: LD_INT 1
39092: ARRAY
39093: PPUSH
39094: CALL_OW 248
39098: PPUSH
39099: LD_INT 0
39101: PPUSH
39102: CALL 41107 0 6
39106: ST_TO_ADDR
// if not hexes then
39107: LD_VAR 0 14
39111: NOT
39112: IFFALSE 39116
// exit ;
39114: GO 39874
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39116: LD_ADDR_VAR 0 17
39120: PUSH
39121: LD_VAR 0 5
39125: PPUSH
39126: LD_INT 22
39128: PUSH
39129: LD_VAR 0 13
39133: PPUSH
39134: CALL_OW 255
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: LD_INT 30
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 30
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: LIST
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PPUSH
39175: CALL_OW 72
39179: ST_TO_ADDR
// for i = 1 to hexes do
39180: LD_ADDR_VAR 0 9
39184: PUSH
39185: DOUBLE
39186: LD_INT 1
39188: DEC
39189: ST_TO_ADDR
39190: LD_VAR 0 14
39194: PUSH
39195: FOR_TO
39196: IFFALSE 39872
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39198: LD_ADDR_VAR 0 13
39202: PUSH
39203: LD_VAR 0 14
39207: PUSH
39208: LD_VAR 0 9
39212: ARRAY
39213: PUSH
39214: LD_INT 1
39216: ARRAY
39217: PPUSH
39218: LD_VAR 0 14
39222: PUSH
39223: LD_VAR 0 9
39227: ARRAY
39228: PUSH
39229: LD_INT 2
39231: ARRAY
39232: PPUSH
39233: CALL_OW 428
39237: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39238: LD_VAR 0 14
39242: PUSH
39243: LD_VAR 0 9
39247: ARRAY
39248: PUSH
39249: LD_INT 1
39251: ARRAY
39252: PPUSH
39253: LD_VAR 0 14
39257: PUSH
39258: LD_VAR 0 9
39262: ARRAY
39263: PUSH
39264: LD_INT 2
39266: ARRAY
39267: PPUSH
39268: CALL_OW 351
39272: PUSH
39273: LD_VAR 0 14
39277: PUSH
39278: LD_VAR 0 9
39282: ARRAY
39283: PUSH
39284: LD_INT 1
39286: ARRAY
39287: PPUSH
39288: LD_VAR 0 14
39292: PUSH
39293: LD_VAR 0 9
39297: ARRAY
39298: PUSH
39299: LD_INT 2
39301: ARRAY
39302: PPUSH
39303: CALL_OW 488
39307: NOT
39308: OR
39309: PUSH
39310: LD_VAR 0 13
39314: PPUSH
39315: CALL_OW 247
39319: PUSH
39320: LD_INT 3
39322: EQUAL
39323: OR
39324: IFFALSE 39330
// exit ;
39326: POP
39327: POP
39328: GO 39874
// if not tmp then
39330: LD_VAR 0 13
39334: NOT
39335: IFFALSE 39339
// continue ;
39337: GO 39195
// result := true ;
39339: LD_ADDR_VAR 0 8
39343: PUSH
39344: LD_INT 1
39346: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39347: LD_VAR 0 6
39351: PUSH
39352: LD_VAR 0 13
39356: PPUSH
39357: CALL_OW 247
39361: PUSH
39362: LD_INT 2
39364: EQUAL
39365: AND
39366: PUSH
39367: LD_VAR 0 13
39371: PPUSH
39372: CALL_OW 263
39376: PUSH
39377: LD_INT 1
39379: EQUAL
39380: AND
39381: IFFALSE 39545
// begin if IsDrivenBy ( tmp ) then
39383: LD_VAR 0 13
39387: PPUSH
39388: CALL_OW 311
39392: IFFALSE 39396
// continue ;
39394: GO 39195
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39396: LD_VAR 0 6
39400: PPUSH
39401: LD_INT 3
39403: PUSH
39404: LD_INT 60
39406: PUSH
39407: EMPTY
39408: LIST
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: PUSH
39417: LD_INT 55
39419: PUSH
39420: EMPTY
39421: LIST
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PPUSH
39431: CALL_OW 72
39435: IFFALSE 39543
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39437: LD_ADDR_VAR 0 18
39441: PUSH
39442: LD_VAR 0 6
39446: PPUSH
39447: LD_INT 3
39449: PUSH
39450: LD_INT 60
39452: PUSH
39453: EMPTY
39454: LIST
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 3
39462: PUSH
39463: LD_INT 55
39465: PUSH
39466: EMPTY
39467: LIST
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PPUSH
39477: CALL_OW 72
39481: PUSH
39482: LD_INT 1
39484: ARRAY
39485: ST_TO_ADDR
// if IsInUnit ( driver ) then
39486: LD_VAR 0 18
39490: PPUSH
39491: CALL_OW 310
39495: IFFALSE 39506
// ComExit ( driver ) ;
39497: LD_VAR 0 18
39501: PPUSH
39502: CALL 64868 0 1
// AddComEnterUnit ( driver , tmp ) ;
39506: LD_VAR 0 18
39510: PPUSH
39511: LD_VAR 0 13
39515: PPUSH
39516: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39520: LD_VAR 0 18
39524: PPUSH
39525: LD_VAR 0 7
39529: PPUSH
39530: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39534: LD_VAR 0 18
39538: PPUSH
39539: CALL_OW 181
// end ; continue ;
39543: GO 39195
// end ; if not cleaners or not tmp in cleaners then
39545: LD_VAR 0 6
39549: NOT
39550: PUSH
39551: LD_VAR 0 13
39555: PUSH
39556: LD_VAR 0 6
39560: IN
39561: NOT
39562: OR
39563: IFFALSE 39870
// begin if dep then
39565: LD_VAR 0 17
39569: IFFALSE 39705
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39571: LD_ADDR_VAR 0 16
39575: PUSH
39576: LD_VAR 0 17
39580: PUSH
39581: LD_INT 1
39583: ARRAY
39584: PPUSH
39585: CALL_OW 250
39589: PPUSH
39590: LD_VAR 0 17
39594: PUSH
39595: LD_INT 1
39597: ARRAY
39598: PPUSH
39599: CALL_OW 254
39603: PPUSH
39604: LD_INT 5
39606: PPUSH
39607: CALL_OW 272
39611: PUSH
39612: LD_VAR 0 17
39616: PUSH
39617: LD_INT 1
39619: ARRAY
39620: PPUSH
39621: CALL_OW 251
39625: PPUSH
39626: LD_VAR 0 17
39630: PUSH
39631: LD_INT 1
39633: ARRAY
39634: PPUSH
39635: CALL_OW 254
39639: PPUSH
39640: LD_INT 5
39642: PPUSH
39643: CALL_OW 273
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39652: LD_VAR 0 16
39656: PUSH
39657: LD_INT 1
39659: ARRAY
39660: PPUSH
39661: LD_VAR 0 16
39665: PUSH
39666: LD_INT 2
39668: ARRAY
39669: PPUSH
39670: CALL_OW 488
39674: IFFALSE 39705
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39676: LD_VAR 0 13
39680: PPUSH
39681: LD_VAR 0 16
39685: PUSH
39686: LD_INT 1
39688: ARRAY
39689: PPUSH
39690: LD_VAR 0 16
39694: PUSH
39695: LD_INT 2
39697: ARRAY
39698: PPUSH
39699: CALL_OW 111
// continue ;
39703: GO 39195
// end ; end ; r := GetDir ( tmp ) ;
39705: LD_ADDR_VAR 0 15
39709: PUSH
39710: LD_VAR 0 13
39714: PPUSH
39715: CALL_OW 254
39719: ST_TO_ADDR
// if r = 5 then
39720: LD_VAR 0 15
39724: PUSH
39725: LD_INT 5
39727: EQUAL
39728: IFFALSE 39738
// r := 0 ;
39730: LD_ADDR_VAR 0 15
39734: PUSH
39735: LD_INT 0
39737: ST_TO_ADDR
// for j = r to 5 do
39738: LD_ADDR_VAR 0 10
39742: PUSH
39743: DOUBLE
39744: LD_VAR 0 15
39748: DEC
39749: ST_TO_ADDR
39750: LD_INT 5
39752: PUSH
39753: FOR_TO
39754: IFFALSE 39868
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39756: LD_ADDR_VAR 0 11
39760: PUSH
39761: LD_VAR 0 13
39765: PPUSH
39766: CALL_OW 250
39770: PPUSH
39771: LD_VAR 0 10
39775: PPUSH
39776: LD_INT 2
39778: PPUSH
39779: CALL_OW 272
39783: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39784: LD_ADDR_VAR 0 12
39788: PUSH
39789: LD_VAR 0 13
39793: PPUSH
39794: CALL_OW 251
39798: PPUSH
39799: LD_VAR 0 10
39803: PPUSH
39804: LD_INT 2
39806: PPUSH
39807: CALL_OW 273
39811: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39812: LD_VAR 0 11
39816: PPUSH
39817: LD_VAR 0 12
39821: PPUSH
39822: CALL_OW 488
39826: PUSH
39827: LD_VAR 0 11
39831: PPUSH
39832: LD_VAR 0 12
39836: PPUSH
39837: CALL_OW 428
39841: NOT
39842: AND
39843: IFFALSE 39866
// begin ComMoveXY ( tmp , _x , _y ) ;
39845: LD_VAR 0 13
39849: PPUSH
39850: LD_VAR 0 11
39854: PPUSH
39855: LD_VAR 0 12
39859: PPUSH
39860: CALL_OW 111
// break ;
39864: GO 39868
// end ; end ;
39866: GO 39753
39868: POP
39869: POP
// end ; end ;
39870: GO 39195
39872: POP
39873: POP
// end ;
39874: LD_VAR 0 8
39878: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39879: LD_INT 0
39881: PPUSH
// result := true ;
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_INT 1
39889: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39890: LD_VAR 0 2
39894: PUSH
39895: LD_INT 24
39897: DOUBLE
39898: EQUAL
39899: IFTRUE 39909
39901: LD_INT 33
39903: DOUBLE
39904: EQUAL
39905: IFTRUE 39909
39907: GO 39934
39909: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39910: LD_ADDR_VAR 0 3
39914: PUSH
39915: LD_INT 32
39917: PPUSH
39918: LD_VAR 0 1
39922: PPUSH
39923: CALL_OW 321
39927: PUSH
39928: LD_INT 2
39930: EQUAL
39931: ST_TO_ADDR
39932: GO 40250
39934: LD_INT 20
39936: DOUBLE
39937: EQUAL
39938: IFTRUE 39942
39940: GO 39967
39942: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39943: LD_ADDR_VAR 0 3
39947: PUSH
39948: LD_INT 6
39950: PPUSH
39951: LD_VAR 0 1
39955: PPUSH
39956: CALL_OW 321
39960: PUSH
39961: LD_INT 2
39963: EQUAL
39964: ST_TO_ADDR
39965: GO 40250
39967: LD_INT 22
39969: DOUBLE
39970: EQUAL
39971: IFTRUE 39981
39973: LD_INT 36
39975: DOUBLE
39976: EQUAL
39977: IFTRUE 39981
39979: GO 40006
39981: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39982: LD_ADDR_VAR 0 3
39986: PUSH
39987: LD_INT 15
39989: PPUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL_OW 321
39999: PUSH
40000: LD_INT 2
40002: EQUAL
40003: ST_TO_ADDR
40004: GO 40250
40006: LD_INT 30
40008: DOUBLE
40009: EQUAL
40010: IFTRUE 40014
40012: GO 40039
40014: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40015: LD_ADDR_VAR 0 3
40019: PUSH
40020: LD_INT 20
40022: PPUSH
40023: LD_VAR 0 1
40027: PPUSH
40028: CALL_OW 321
40032: PUSH
40033: LD_INT 2
40035: EQUAL
40036: ST_TO_ADDR
40037: GO 40250
40039: LD_INT 28
40041: DOUBLE
40042: EQUAL
40043: IFTRUE 40053
40045: LD_INT 21
40047: DOUBLE
40048: EQUAL
40049: IFTRUE 40053
40051: GO 40078
40053: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40054: LD_ADDR_VAR 0 3
40058: PUSH
40059: LD_INT 21
40061: PPUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL_OW 321
40071: PUSH
40072: LD_INT 2
40074: EQUAL
40075: ST_TO_ADDR
40076: GO 40250
40078: LD_INT 16
40080: DOUBLE
40081: EQUAL
40082: IFTRUE 40086
40084: GO 40111
40086: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40087: LD_ADDR_VAR 0 3
40091: PUSH
40092: LD_INT 84
40094: PPUSH
40095: LD_VAR 0 1
40099: PPUSH
40100: CALL_OW 321
40104: PUSH
40105: LD_INT 2
40107: EQUAL
40108: ST_TO_ADDR
40109: GO 40250
40111: LD_INT 19
40113: DOUBLE
40114: EQUAL
40115: IFTRUE 40125
40117: LD_INT 23
40119: DOUBLE
40120: EQUAL
40121: IFTRUE 40125
40123: GO 40150
40125: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40126: LD_ADDR_VAR 0 3
40130: PUSH
40131: LD_INT 83
40133: PPUSH
40134: LD_VAR 0 1
40138: PPUSH
40139: CALL_OW 321
40143: PUSH
40144: LD_INT 2
40146: EQUAL
40147: ST_TO_ADDR
40148: GO 40250
40150: LD_INT 17
40152: DOUBLE
40153: EQUAL
40154: IFTRUE 40158
40156: GO 40183
40158: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40159: LD_ADDR_VAR 0 3
40163: PUSH
40164: LD_INT 39
40166: PPUSH
40167: LD_VAR 0 1
40171: PPUSH
40172: CALL_OW 321
40176: PUSH
40177: LD_INT 2
40179: EQUAL
40180: ST_TO_ADDR
40181: GO 40250
40183: LD_INT 18
40185: DOUBLE
40186: EQUAL
40187: IFTRUE 40191
40189: GO 40216
40191: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40192: LD_ADDR_VAR 0 3
40196: PUSH
40197: LD_INT 40
40199: PPUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL_OW 321
40209: PUSH
40210: LD_INT 2
40212: EQUAL
40213: ST_TO_ADDR
40214: GO 40250
40216: LD_INT 27
40218: DOUBLE
40219: EQUAL
40220: IFTRUE 40224
40222: GO 40249
40224: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40225: LD_ADDR_VAR 0 3
40229: PUSH
40230: LD_INT 35
40232: PPUSH
40233: LD_VAR 0 1
40237: PPUSH
40238: CALL_OW 321
40242: PUSH
40243: LD_INT 2
40245: EQUAL
40246: ST_TO_ADDR
40247: GO 40250
40249: POP
// end ;
40250: LD_VAR 0 3
40254: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40255: LD_INT 0
40257: PPUSH
40258: PPUSH
40259: PPUSH
40260: PPUSH
40261: PPUSH
40262: PPUSH
40263: PPUSH
40264: PPUSH
40265: PPUSH
40266: PPUSH
40267: PPUSH
// result := false ;
40268: LD_ADDR_VAR 0 6
40272: PUSH
40273: LD_INT 0
40275: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40276: LD_VAR 0 1
40280: NOT
40281: PUSH
40282: LD_VAR 0 1
40286: PPUSH
40287: CALL_OW 266
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: IN
40302: NOT
40303: OR
40304: PUSH
40305: LD_VAR 0 2
40309: NOT
40310: OR
40311: PUSH
40312: LD_VAR 0 5
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: LD_INT 2
40325: PUSH
40326: LD_INT 3
40328: PUSH
40329: LD_INT 4
40331: PUSH
40332: LD_INT 5
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: IN
40343: NOT
40344: OR
40345: PUSH
40346: LD_VAR 0 3
40350: PPUSH
40351: LD_VAR 0 4
40355: PPUSH
40356: CALL_OW 488
40360: NOT
40361: OR
40362: IFFALSE 40366
// exit ;
40364: GO 41102
// side := GetSide ( depot ) ;
40366: LD_ADDR_VAR 0 9
40370: PUSH
40371: LD_VAR 0 1
40375: PPUSH
40376: CALL_OW 255
40380: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40381: LD_VAR 0 9
40385: PPUSH
40386: LD_VAR 0 2
40390: PPUSH
40391: CALL 39879 0 2
40395: NOT
40396: IFFALSE 40400
// exit ;
40398: GO 41102
// pom := GetBase ( depot ) ;
40400: LD_ADDR_VAR 0 10
40404: PUSH
40405: LD_VAR 0 1
40409: PPUSH
40410: CALL_OW 274
40414: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40415: LD_ADDR_VAR 0 11
40419: PUSH
40420: LD_VAR 0 2
40424: PPUSH
40425: LD_VAR 0 1
40429: PPUSH
40430: CALL_OW 248
40434: PPUSH
40435: CALL_OW 450
40439: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40440: LD_VAR 0 10
40444: PPUSH
40445: LD_INT 1
40447: PPUSH
40448: CALL_OW 275
40452: PUSH
40453: LD_VAR 0 11
40457: PUSH
40458: LD_INT 1
40460: ARRAY
40461: GREATEREQUAL
40462: PUSH
40463: LD_VAR 0 10
40467: PPUSH
40468: LD_INT 2
40470: PPUSH
40471: CALL_OW 275
40475: PUSH
40476: LD_VAR 0 11
40480: PUSH
40481: LD_INT 2
40483: ARRAY
40484: GREATEREQUAL
40485: AND
40486: PUSH
40487: LD_VAR 0 10
40491: PPUSH
40492: LD_INT 3
40494: PPUSH
40495: CALL_OW 275
40499: PUSH
40500: LD_VAR 0 11
40504: PUSH
40505: LD_INT 3
40507: ARRAY
40508: GREATEREQUAL
40509: AND
40510: NOT
40511: IFFALSE 40515
// exit ;
40513: GO 41102
// if GetBType ( depot ) = b_depot then
40515: LD_VAR 0 1
40519: PPUSH
40520: CALL_OW 266
40524: PUSH
40525: LD_INT 0
40527: EQUAL
40528: IFFALSE 40540
// dist := 28 else
40530: LD_ADDR_VAR 0 14
40534: PUSH
40535: LD_INT 28
40537: ST_TO_ADDR
40538: GO 40548
// dist := 36 ;
40540: LD_ADDR_VAR 0 14
40544: PUSH
40545: LD_INT 36
40547: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40548: LD_VAR 0 1
40552: PPUSH
40553: LD_VAR 0 3
40557: PPUSH
40558: LD_VAR 0 4
40562: PPUSH
40563: CALL_OW 297
40567: PUSH
40568: LD_VAR 0 14
40572: GREATER
40573: IFFALSE 40577
// exit ;
40575: GO 41102
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40577: LD_ADDR_VAR 0 12
40581: PUSH
40582: LD_VAR 0 2
40586: PPUSH
40587: LD_VAR 0 3
40591: PPUSH
40592: LD_VAR 0 4
40596: PPUSH
40597: LD_VAR 0 5
40601: PPUSH
40602: LD_VAR 0 1
40606: PPUSH
40607: CALL_OW 248
40611: PPUSH
40612: LD_INT 0
40614: PPUSH
40615: CALL 41107 0 6
40619: ST_TO_ADDR
// if not hexes then
40620: LD_VAR 0 12
40624: NOT
40625: IFFALSE 40629
// exit ;
40627: GO 41102
// hex := GetHexInfo ( x , y ) ;
40629: LD_ADDR_VAR 0 15
40633: PUSH
40634: LD_VAR 0 3
40638: PPUSH
40639: LD_VAR 0 4
40643: PPUSH
40644: CALL_OW 546
40648: ST_TO_ADDR
// if hex [ 1 ] then
40649: LD_VAR 0 15
40653: PUSH
40654: LD_INT 1
40656: ARRAY
40657: IFFALSE 40661
// exit ;
40659: GO 41102
// height := hex [ 2 ] ;
40661: LD_ADDR_VAR 0 13
40665: PUSH
40666: LD_VAR 0 15
40670: PUSH
40671: LD_INT 2
40673: ARRAY
40674: ST_TO_ADDR
// for i = 1 to hexes do
40675: LD_ADDR_VAR 0 7
40679: PUSH
40680: DOUBLE
40681: LD_INT 1
40683: DEC
40684: ST_TO_ADDR
40685: LD_VAR 0 12
40689: PUSH
40690: FOR_TO
40691: IFFALSE 41021
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40693: LD_VAR 0 12
40697: PUSH
40698: LD_VAR 0 7
40702: ARRAY
40703: PUSH
40704: LD_INT 1
40706: ARRAY
40707: PPUSH
40708: LD_VAR 0 12
40712: PUSH
40713: LD_VAR 0 7
40717: ARRAY
40718: PUSH
40719: LD_INT 2
40721: ARRAY
40722: PPUSH
40723: CALL_OW 488
40727: NOT
40728: PUSH
40729: LD_VAR 0 12
40733: PUSH
40734: LD_VAR 0 7
40738: ARRAY
40739: PUSH
40740: LD_INT 1
40742: ARRAY
40743: PPUSH
40744: LD_VAR 0 12
40748: PUSH
40749: LD_VAR 0 7
40753: ARRAY
40754: PUSH
40755: LD_INT 2
40757: ARRAY
40758: PPUSH
40759: CALL_OW 428
40763: PUSH
40764: LD_INT 0
40766: GREATER
40767: OR
40768: PUSH
40769: LD_VAR 0 12
40773: PUSH
40774: LD_VAR 0 7
40778: ARRAY
40779: PUSH
40780: LD_INT 1
40782: ARRAY
40783: PPUSH
40784: LD_VAR 0 12
40788: PUSH
40789: LD_VAR 0 7
40793: ARRAY
40794: PUSH
40795: LD_INT 2
40797: ARRAY
40798: PPUSH
40799: CALL_OW 351
40803: OR
40804: IFFALSE 40810
// exit ;
40806: POP
40807: POP
40808: GO 41102
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40810: LD_ADDR_VAR 0 8
40814: PUSH
40815: LD_VAR 0 12
40819: PUSH
40820: LD_VAR 0 7
40824: ARRAY
40825: PUSH
40826: LD_INT 1
40828: ARRAY
40829: PPUSH
40830: LD_VAR 0 12
40834: PUSH
40835: LD_VAR 0 7
40839: ARRAY
40840: PUSH
40841: LD_INT 2
40843: ARRAY
40844: PPUSH
40845: CALL_OW 546
40849: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40850: LD_VAR 0 8
40854: PUSH
40855: LD_INT 1
40857: ARRAY
40858: PUSH
40859: LD_VAR 0 8
40863: PUSH
40864: LD_INT 2
40866: ARRAY
40867: PUSH
40868: LD_VAR 0 13
40872: PUSH
40873: LD_INT 2
40875: PLUS
40876: GREATER
40877: OR
40878: PUSH
40879: LD_VAR 0 8
40883: PUSH
40884: LD_INT 2
40886: ARRAY
40887: PUSH
40888: LD_VAR 0 13
40892: PUSH
40893: LD_INT 2
40895: MINUS
40896: LESS
40897: OR
40898: PUSH
40899: LD_VAR 0 8
40903: PUSH
40904: LD_INT 3
40906: ARRAY
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 8
40913: PUSH
40914: LD_INT 9
40916: PUSH
40917: LD_INT 10
40919: PUSH
40920: LD_INT 11
40922: PUSH
40923: LD_INT 12
40925: PUSH
40926: LD_INT 13
40928: PUSH
40929: LD_INT 16
40931: PUSH
40932: LD_INT 17
40934: PUSH
40935: LD_INT 18
40937: PUSH
40938: LD_INT 19
40940: PUSH
40941: LD_INT 20
40943: PUSH
40944: LD_INT 21
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: IN
40962: NOT
40963: OR
40964: PUSH
40965: LD_VAR 0 8
40969: PUSH
40970: LD_INT 5
40972: ARRAY
40973: NOT
40974: OR
40975: PUSH
40976: LD_VAR 0 8
40980: PUSH
40981: LD_INT 6
40983: ARRAY
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: LD_INT 7
40993: PUSH
40994: LD_INT 9
40996: PUSH
40997: LD_INT 10
40999: PUSH
41000: LD_INT 11
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: IN
41011: NOT
41012: OR
41013: IFFALSE 41019
// exit ;
41015: POP
41016: POP
41017: GO 41102
// end ;
41019: GO 40690
41021: POP
41022: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41023: LD_VAR 0 9
41027: PPUSH
41028: LD_VAR 0 3
41032: PPUSH
41033: LD_VAR 0 4
41037: PPUSH
41038: LD_INT 20
41040: PPUSH
41041: CALL 33054 0 4
41045: PUSH
41046: LD_INT 4
41048: ARRAY
41049: IFFALSE 41053
// exit ;
41051: GO 41102
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41053: LD_VAR 0 2
41057: PUSH
41058: LD_INT 29
41060: PUSH
41061: LD_INT 30
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: IN
41068: PUSH
41069: LD_VAR 0 3
41073: PPUSH
41074: LD_VAR 0 4
41078: PPUSH
41079: LD_VAR 0 9
41083: PPUSH
41084: CALL_OW 440
41088: NOT
41089: AND
41090: IFFALSE 41094
// exit ;
41092: GO 41102
// result := true ;
41094: LD_ADDR_VAR 0 6
41098: PUSH
41099: LD_INT 1
41101: ST_TO_ADDR
// end ;
41102: LD_VAR 0 6
41106: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41107: LD_INT 0
41109: PPUSH
41110: PPUSH
41111: PPUSH
41112: PPUSH
41113: PPUSH
41114: PPUSH
41115: PPUSH
41116: PPUSH
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
41124: PPUSH
41125: PPUSH
41126: PPUSH
41127: PPUSH
41128: PPUSH
41129: PPUSH
41130: PPUSH
41131: PPUSH
41132: PPUSH
41133: PPUSH
41134: PPUSH
41135: PPUSH
41136: PPUSH
41137: PPUSH
41138: PPUSH
41139: PPUSH
41140: PPUSH
41141: PPUSH
41142: PPUSH
41143: PPUSH
41144: PPUSH
41145: PPUSH
41146: PPUSH
41147: PPUSH
41148: PPUSH
41149: PPUSH
41150: PPUSH
41151: PPUSH
41152: PPUSH
41153: PPUSH
41154: PPUSH
41155: PPUSH
41156: PPUSH
41157: PPUSH
41158: PPUSH
41159: PPUSH
41160: PPUSH
41161: PPUSH
41162: PPUSH
41163: PPUSH
41164: PPUSH
41165: PPUSH
41166: PPUSH
// result = [ ] ;
41167: LD_ADDR_VAR 0 7
41171: PUSH
41172: EMPTY
41173: ST_TO_ADDR
// temp_list = [ ] ;
41174: LD_ADDR_VAR 0 9
41178: PUSH
41179: EMPTY
41180: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41181: LD_VAR 0 4
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: LD_INT 3
41197: PUSH
41198: LD_INT 4
41200: PUSH
41201: LD_INT 5
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: IN
41212: NOT
41213: PUSH
41214: LD_VAR 0 1
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: IN
41229: PUSH
41230: LD_VAR 0 5
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 3
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: LIST
41248: IN
41249: NOT
41250: AND
41251: OR
41252: IFFALSE 41256
// exit ;
41254: GO 59647
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41256: LD_VAR 0 1
41260: PUSH
41261: LD_INT 6
41263: PUSH
41264: LD_INT 7
41266: PUSH
41267: LD_INT 8
41269: PUSH
41270: LD_INT 13
41272: PUSH
41273: LD_INT 12
41275: PUSH
41276: LD_INT 15
41278: PUSH
41279: LD_INT 11
41281: PUSH
41282: LD_INT 14
41284: PUSH
41285: LD_INT 10
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: IN
41299: IFFALSE 41309
// btype = b_lab ;
41301: LD_ADDR_VAR 0 1
41305: PUSH
41306: LD_INT 6
41308: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41309: LD_VAR 0 6
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: LIST
41327: IN
41328: NOT
41329: PUSH
41330: LD_VAR 0 1
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: LD_INT 6
41349: PUSH
41350: LD_INT 36
41352: PUSH
41353: LD_INT 4
41355: PUSH
41356: LD_INT 5
41358: PUSH
41359: LD_INT 31
41361: PUSH
41362: LD_INT 32
41364: PUSH
41365: LD_INT 33
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: IN
41381: NOT
41382: PUSH
41383: LD_VAR 0 6
41387: PUSH
41388: LD_INT 1
41390: EQUAL
41391: AND
41392: OR
41393: PUSH
41394: LD_VAR 0 1
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 3
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: IN
41409: NOT
41410: PUSH
41411: LD_VAR 0 6
41415: PUSH
41416: LD_INT 2
41418: EQUAL
41419: AND
41420: OR
41421: IFFALSE 41431
// mode = 0 ;
41423: LD_ADDR_VAR 0 6
41427: PUSH
41428: LD_INT 0
41430: ST_TO_ADDR
// case mode of 0 :
41431: LD_VAR 0 6
41435: PUSH
41436: LD_INT 0
41438: DOUBLE
41439: EQUAL
41440: IFTRUE 41444
41442: GO 52897
41444: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41445: LD_ADDR_VAR 0 11
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: LD_INT 2
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 3
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: LD_INT 3
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41638: LD_ADDR_VAR 0 12
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 2
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 3
41795: NEG
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 3
41806: NEG
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41834: LD_ADDR_VAR 0 13
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: LD_INT 2
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: LD_INT 1
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: LD_INT 3
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 3
41993: NEG
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 3
42005: NEG
42006: PUSH
42007: LD_INT 3
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42033: LD_ADDR_VAR 0 14
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: LD_INT 2
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: LD_INT 2
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 3
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 3
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42229: LD_ADDR_VAR 0 15
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: NEG
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 2
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 3
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 3
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42422: LD_ADDR_VAR 0 16
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: LD_INT 2
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 3
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42615: LD_ADDR_VAR 0 17
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42845: LD_ADDR_VAR 0 18
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: LD_INT 2
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: NEG
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43075: LD_ADDR_VAR 0 19
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 2
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 2
43262: NEG
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43305: LD_ADDR_VAR 0 20
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: NEG
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43535: LD_ADDR_VAR 0 21
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 2
43722: NEG
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: NEG
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43765: LD_ADDR_VAR 0 22
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 2
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43995: LD_ADDR_VAR 0 23
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: NEG
44195: PUSH
44196: LD_INT 2
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 2
44206: NEG
44207: PUSH
44208: LD_INT 3
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 3
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44275: LD_ADDR_VAR 0 24
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: NEG
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: LD_INT 2
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 3
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44551: LD_ADDR_VAR 0 25
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 3
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: LD_INT 3
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: LD_INT 3
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44825: LD_ADDR_VAR 0 26
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 3
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45101: LD_ADDR_VAR 0 27
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 3
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 3
45346: NEG
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45381: LD_ADDR_VAR 0 28
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 2
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 2
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: NEG
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: LD_INT 3
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 3
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 3
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 3
45628: NEG
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45663: LD_ADDR_VAR 0 29
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: LD_INT 3
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 3
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: LD_INT 3
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: NEG
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45942: LD_ADDR_VAR 0 30
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: LD_INT 2
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 3
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 3
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 3
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 3
46185: NEG
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46220: LD_ADDR_VAR 0 31
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: LD_INT 3
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: LD_INT 3
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 3
46463: NEG
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46498: LD_ADDR_VAR 0 32
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 3
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 3
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: LD_INT 3
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46776: LD_ADDR_VAR 0 33
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 3
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 3
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 3
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 3
47020: NEG
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47055: LD_ADDR_VAR 0 34
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 3
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 3
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47335: LD_ADDR_VAR 0 35
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47447: LD_ADDR_VAR 0 36
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47559: LD_ADDR_VAR 0 37
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47671: LD_ADDR_VAR 0 38
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47783: LD_ADDR_VAR 0 39
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 2
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47895: LD_ADDR_VAR 0 40
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48007: LD_ADDR_VAR 0 41
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 3
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 3
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 3
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 3
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: LD_INT 3
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 3
48281: NEG
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 3
48316: NEG
48317: PUSH
48318: LD_INT 3
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48357: LD_ADDR_VAR 0 42
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 3
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 3
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 3
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: PUSH
48604: LD_INT 3
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: LD_INT 3
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 3
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 3
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 3
48666: NEG
48667: PUSH
48668: LD_INT 3
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48707: LD_ADDR_VAR 0 43
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 2
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 3
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 3
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 3
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 3
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 3
49003: NEG
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 3
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49055: LD_ADDR_VAR 0 44
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: LD_INT 3
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 3
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 3
49298: PUSH
49299: LD_INT 3
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: LD_INT 3
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 3
49329: NEG
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 3
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 3
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: LD_INT 3
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49405: LD_ADDR_VAR 0 45
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 2
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: LD_INT 3
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 3
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 3
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 3
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 3
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 3
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 3
49702: NEG
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 3
49714: NEG
49715: PUSH
49716: LD_INT 3
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49755: LD_ADDR_VAR 0 46
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 3
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 3
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 3
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 3
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 3
50062: NEG
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50103: LD_ADDR_VAR 0 47
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50254: LD_ADDR_VAR 0 48
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 2
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50401: LD_ADDR_VAR 0 49
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50545: LD_ADDR_VAR 0 50
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50689: LD_ADDR_VAR 0 51
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50836: LD_ADDR_VAR 0 52
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: NEG
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50987: LD_ADDR_VAR 0 53
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51217: LD_ADDR_VAR 0 54
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51447: LD_ADDR_VAR 0 55
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51677: LD_ADDR_VAR 0 56
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51907: LD_ADDR_VAR 0 57
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 2
52083: NEG
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52137: LD_ADDR_VAR 0 58
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 2
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52367: LD_ADDR_VAR 0 59
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52455: LD_ADDR_VAR 0 60
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52543: LD_ADDR_VAR 0 61
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52631: LD_ADDR_VAR 0 62
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52719: LD_ADDR_VAR 0 63
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52807: LD_ADDR_VAR 0 64
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: ST_TO_ADDR
// end ; 1 :
52895: GO 58792
52897: LD_INT 1
52899: DOUBLE
52900: EQUAL
52901: IFTRUE 52905
52903: GO 55528
52905: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52906: LD_ADDR_VAR 0 11
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 3
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52950: LD_ADDR_VAR 0 12
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 3
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: LIST
52990: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52991: LD_ADDR_VAR 0 13
52995: PUSH
52996: LD_INT 3
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: LD_INT 3
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53031: LD_ADDR_VAR 0 14
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 3
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53072: LD_ADDR_VAR 0 15
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 3
53090: NEG
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 3
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: LIST
53115: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53116: LD_ADDR_VAR 0 16
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: LD_INT 3
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 3
53135: NEG
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 3
53147: NEG
53148: PUSH
53149: LD_INT 3
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: LIST
53161: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53162: LD_ADDR_VAR 0 17
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: LIST
53205: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53206: LD_ADDR_VAR 0 18
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: LIST
53246: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53247: LD_ADDR_VAR 0 19
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 3
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53287: LD_ADDR_VAR 0 20
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: LD_INT 3
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 3
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: LIST
53327: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53328: LD_ADDR_VAR 0 21
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 3
53357: NEG
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53372: LD_ADDR_VAR 0 22
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: LD_INT 3
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: NEG
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 3
53403: NEG
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: LIST
53417: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53418: LD_ADDR_VAR 0 23
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 4
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53462: LD_ADDR_VAR 0 24
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 4
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53503: LD_ADDR_VAR 0 25
53507: PUSH
53508: LD_INT 3
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 4
53520: PUSH
53521: LD_INT 3
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 3
53530: PUSH
53531: LD_INT 4
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53543: LD_ADDR_VAR 0 26
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 3
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 4
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53584: LD_ADDR_VAR 0 27
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 4
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: LIST
53627: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53628: LD_ADDR_VAR 0 28
53632: PUSH
53633: LD_INT 3
53635: NEG
53636: PUSH
53637: LD_INT 3
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 3
53647: NEG
53648: PUSH
53649: LD_INT 4
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 4
53659: NEG
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53674: LD_ADDR_VAR 0 29
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: LD_INT 3
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 4
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 4
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: LD_INT 3
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 5
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 5
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 4
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: LD_INT 6
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 6
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 5
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53829: LD_ADDR_VAR 0 30
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 3
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 3
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 4
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 4
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 4
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 5
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 5
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 5
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 6
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 6
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53972: LD_ADDR_VAR 0 31
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: PUSH
53990: LD_INT 3
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 4
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 4
54019: PUSH
54020: LD_INT 4
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 3
54029: PUSH
54030: LD_INT 4
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 5
54039: PUSH
54040: LD_INT 4
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 5
54049: PUSH
54050: LD_INT 5
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 4
54059: PUSH
54060: LD_INT 5
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 6
54069: PUSH
54070: LD_INT 5
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 6
54079: PUSH
54080: LD_INT 6
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 5
54089: PUSH
54090: LD_INT 6
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54111: LD_ADDR_VAR 0 32
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: LD_INT 3
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 3
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 4
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 4
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 3
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 5
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 5
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 4
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 6
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 6
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 5
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54254: LD_ADDR_VAR 0 33
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 3
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 4
54306: NEG
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 4
54317: NEG
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 4
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 5
54340: NEG
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 5
54351: NEG
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 5
54363: NEG
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 6
54374: NEG
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 6
54385: NEG
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54409: LD_ADDR_VAR 0 34
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: LD_INT 3
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 3
54428: NEG
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 3
54440: NEG
54441: PUSH
54442: LD_INT 3
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: LD_INT 4
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 4
54464: NEG
54465: PUSH
54466: LD_INT 3
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 4
54476: NEG
54477: PUSH
54478: LD_INT 4
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 4
54488: NEG
54489: PUSH
54490: LD_INT 5
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 5
54500: NEG
54501: PUSH
54502: LD_INT 4
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 5
54512: NEG
54513: PUSH
54514: LD_INT 5
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 5
54524: NEG
54525: PUSH
54526: LD_INT 6
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 6
54536: NEG
54537: PUSH
54538: LD_INT 5
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 6
54548: NEG
54549: PUSH
54550: LD_INT 6
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54572: LD_ADDR_VAR 0 41
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: LD_INT 3
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54616: LD_ADDR_VAR 0 42
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 3
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54657: LD_ADDR_VAR 0 43
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: LD_INT 3
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: LIST
54696: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54697: LD_ADDR_VAR 0 44
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 3
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54738: LD_ADDR_VAR 0 45
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 3
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54782: LD_ADDR_VAR 0 46
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: LD_INT 3
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 3
54813: NEG
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54828: LD_ADDR_VAR 0 47
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PUSH
54837: LD_INT 3
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54861: LD_ADDR_VAR 0 48
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54892: LD_ADDR_VAR 0 49
54896: PUSH
54897: LD_INT 3
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 3
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54921: LD_ADDR_VAR 0 50
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: LD_INT 3
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54950: LD_ADDR_VAR 0 51
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54981: LD_ADDR_VAR 0 52
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 3
55000: NEG
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55014: LD_ADDR_VAR 0 53
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 3
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 3
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55058: LD_ADDR_VAR 0 54
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55099: LD_ADDR_VAR 0 55
55103: PUSH
55104: LD_INT 3
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: LD_INT 3
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: LIST
55138: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55139: LD_ADDR_VAR 0 56
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 3
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55180: LD_ADDR_VAR 0 57
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55224: LD_ADDR_VAR 0 58
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: LD_INT 3
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 3
55243: NEG
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 3
55255: NEG
55256: PUSH
55257: LD_INT 3
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55270: LD_ADDR_VAR 0 59
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55314: LD_ADDR_VAR 0 60
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55355: LD_ADDR_VAR 0 61
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55395: LD_ADDR_VAR 0 62
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: LIST
55435: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55436: LD_ADDR_VAR 0 63
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55480: LD_ADDR_VAR 0 64
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: ST_TO_ADDR
// end ; 2 :
55526: GO 58792
55528: LD_INT 2
55530: DOUBLE
55531: EQUAL
55532: IFTRUE 55536
55534: GO 58791
55536: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55537: LD_ADDR_VAR 0 29
55541: PUSH
55542: LD_INT 4
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 4
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 5
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 5
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 4
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 3
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 3
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 5
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 3
55637: PUSH
55638: LD_INT 3
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 3
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 4
55657: PUSH
55658: LD_INT 3
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 4
55667: PUSH
55668: LD_INT 4
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: LD_INT 4
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 4
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 4
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 4
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 3
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 4
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 5
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 5
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 4
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: LD_INT 5
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: LD_INT 3
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 3
55820: NEG
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 3
55831: NEG
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 3
55865: NEG
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 4
55876: NEG
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 4
55887: NEG
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 4
55899: NEG
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 4
55922: NEG
55923: PUSH
55924: LD_INT 4
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 4
55934: NEG
55935: PUSH
55936: LD_INT 5
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: LD_INT 4
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: NEG
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 4
55970: NEG
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 5
55982: NEG
55983: PUSH
55984: LD_INT 4
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 5
55994: NEG
55995: PUSH
55996: LD_INT 5
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: LD_INT 5
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 5
56018: NEG
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56075: LD_ADDR_VAR 0 30
56079: PUSH
56080: LD_INT 4
56082: PUSH
56083: LD_INT 4
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 4
56092: PUSH
56093: LD_INT 3
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 5
56102: PUSH
56103: LD_INT 4
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 5
56112: PUSH
56113: LD_INT 5
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 4
56122: PUSH
56123: LD_INT 5
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: LD_INT 4
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 3
56142: PUSH
56143: LD_INT 3
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 5
56152: PUSH
56153: LD_INT 3
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: LD_INT 5
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 3
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 4
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 4
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 4
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 4
56265: NEG
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 4
56276: NEG
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: NEG
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 4
56310: NEG
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 5
56321: NEG
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 5
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 5
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: LD_INT 2
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 3
56367: NEG
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: NEG
56380: PUSH
56381: LD_INT 4
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: LD_INT 3
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 3
56415: NEG
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 4
56427: NEG
56428: PUSH
56429: LD_INT 3
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 4
56439: NEG
56440: PUSH
56441: LD_INT 4
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: LD_INT 4
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 4
56463: NEG
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 4
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 5
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 4
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 3
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: LD_INT 4
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: LD_INT 5
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 3
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 5
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56622: LD_ADDR_VAR 0 31
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 4
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 3
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 4
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 5
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 5
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 4
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 3
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: LD_INT 5
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 3
56722: NEG
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 3
56733: NEG
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: NEG
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 4
56778: NEG
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 4
56789: NEG
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 4
56824: NEG
56825: PUSH
56826: LD_INT 4
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 4
56836: NEG
56837: PUSH
56838: LD_INT 5
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: LD_INT 4
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 4
56872: NEG
56873: PUSH
56874: LD_INT 3
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 5
56884: NEG
56885: PUSH
56886: LD_INT 4
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 5
56896: NEG
56897: PUSH
56898: LD_INT 5
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: LD_INT 5
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 5
56920: NEG
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: LD_INT 3
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: LD_INT 4
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 3
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 4
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: LD_INT 4
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 4
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 4
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 5
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 5
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 4
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 3
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 5
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57172: LD_ADDR_VAR 0 32
57176: PUSH
57177: LD_INT 4
57179: NEG
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 4
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 4
57224: NEG
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 5
57235: NEG
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 5
57246: NEG
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 5
57258: NEG
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: NEG
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 3
57281: NEG
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 3
57293: NEG
57294: PUSH
57295: LD_INT 4
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 4
57341: NEG
57342: PUSH
57343: LD_INT 3
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 4
57353: NEG
57354: PUSH
57355: LD_INT 4
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 4
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 4
57377: NEG
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: LD_INT 4
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 5
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 4
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: LD_INT 3
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 5
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: LD_INT 5
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 4
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 4
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 3
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 2
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 4
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 4
57584: PUSH
57585: LD_INT 4
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 4
57594: PUSH
57595: LD_INT 3
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 5
57604: PUSH
57605: LD_INT 4
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 5
57614: PUSH
57615: LD_INT 5
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 4
57624: PUSH
57625: LD_INT 5
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: PUSH
57635: LD_INT 4
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 3
57644: PUSH
57645: LD_INT 3
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 5
57654: PUSH
57655: LD_INT 3
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: LD_INT 5
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57719: LD_ADDR_VAR 0 33
57723: PUSH
57724: LD_INT 4
57726: NEG
57727: PUSH
57728: LD_INT 4
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 4
57738: NEG
57739: PUSH
57740: LD_INT 5
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: LD_INT 4
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: LD_INT 3
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 4
57774: NEG
57775: PUSH
57776: LD_INT 3
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 5
57786: NEG
57787: PUSH
57788: LD_INT 4
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 5
57798: NEG
57799: PUSH
57800: LD_INT 5
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 3
57810: NEG
57811: PUSH
57812: LD_INT 5
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 5
57822: NEG
57823: PUSH
57824: LD_INT 3
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 3
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 4
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 3
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: LD_INT 4
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 4
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 4
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 4
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 5
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 5
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 3
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 5
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 3
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 4
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 4
58059: PUSH
58060: LD_INT 4
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: PUSH
58070: LD_INT 4
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: PUSH
58080: LD_INT 3
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 4
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 4
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 4
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: LD_INT 4
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 5
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 5
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: LD_INT 4
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 3
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 2
58191: PUSH
58192: LD_INT 5
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 2
58201: NEG
58202: PUSH
58203: LD_INT 3
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58257: LD_ADDR_VAR 0 34
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 4
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 5
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: LD_INT 4
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: LD_INT 3
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 4
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 5
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 5
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 3
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 4
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 4
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 4
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 4
58459: PUSH
58460: LD_INT 4
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 4
58469: PUSH
58470: LD_INT 3
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 5
58479: PUSH
58480: LD_INT 4
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 5
58489: PUSH
58490: LD_INT 5
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 4
58499: PUSH
58500: LD_INT 5
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: LD_INT 4
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: LD_INT 3
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 5
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: LD_INT 5
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 4
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 4
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: LD_INT 4
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 4
58642: NEG
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 4
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: NEG
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 4
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 5
58698: NEG
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 5
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 5
58721: NEG
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 3
58733: NEG
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: ST_TO_ADDR
// end ; end ;
58789: GO 58792
58791: POP
// case btype of b_depot , b_warehouse :
58792: LD_VAR 0 1
58796: PUSH
58797: LD_INT 0
58799: DOUBLE
58800: EQUAL
58801: IFTRUE 58811
58803: LD_INT 1
58805: DOUBLE
58806: EQUAL
58807: IFTRUE 58811
58809: GO 59012
58811: POP
// case nation of nation_american :
58812: LD_VAR 0 5
58816: PUSH
58817: LD_INT 1
58819: DOUBLE
58820: EQUAL
58821: IFTRUE 58825
58823: GO 58881
58825: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58826: LD_ADDR_VAR 0 9
58830: PUSH
58831: LD_VAR 0 11
58835: PUSH
58836: LD_VAR 0 12
58840: PUSH
58841: LD_VAR 0 13
58845: PUSH
58846: LD_VAR 0 14
58850: PUSH
58851: LD_VAR 0 15
58855: PUSH
58856: LD_VAR 0 16
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: PUSH
58869: LD_VAR 0 4
58873: PUSH
58874: LD_INT 1
58876: PLUS
58877: ARRAY
58878: ST_TO_ADDR
58879: GO 59010
58881: LD_INT 2
58883: DOUBLE
58884: EQUAL
58885: IFTRUE 58889
58887: GO 58945
58889: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58890: LD_ADDR_VAR 0 9
58894: PUSH
58895: LD_VAR 0 17
58899: PUSH
58900: LD_VAR 0 18
58904: PUSH
58905: LD_VAR 0 19
58909: PUSH
58910: LD_VAR 0 20
58914: PUSH
58915: LD_VAR 0 21
58919: PUSH
58920: LD_VAR 0 22
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: PUSH
58933: LD_VAR 0 4
58937: PUSH
58938: LD_INT 1
58940: PLUS
58941: ARRAY
58942: ST_TO_ADDR
58943: GO 59010
58945: LD_INT 3
58947: DOUBLE
58948: EQUAL
58949: IFTRUE 58953
58951: GO 59009
58953: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58954: LD_ADDR_VAR 0 9
58958: PUSH
58959: LD_VAR 0 23
58963: PUSH
58964: LD_VAR 0 24
58968: PUSH
58969: LD_VAR 0 25
58973: PUSH
58974: LD_VAR 0 26
58978: PUSH
58979: LD_VAR 0 27
58983: PUSH
58984: LD_VAR 0 28
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: PUSH
58997: LD_VAR 0 4
59001: PUSH
59002: LD_INT 1
59004: PLUS
59005: ARRAY
59006: ST_TO_ADDR
59007: GO 59010
59009: POP
59010: GO 59565
59012: LD_INT 2
59014: DOUBLE
59015: EQUAL
59016: IFTRUE 59026
59018: LD_INT 3
59020: DOUBLE
59021: EQUAL
59022: IFTRUE 59026
59024: GO 59082
59026: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59027: LD_ADDR_VAR 0 9
59031: PUSH
59032: LD_VAR 0 29
59036: PUSH
59037: LD_VAR 0 30
59041: PUSH
59042: LD_VAR 0 31
59046: PUSH
59047: LD_VAR 0 32
59051: PUSH
59052: LD_VAR 0 33
59056: PUSH
59057: LD_VAR 0 34
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: PUSH
59070: LD_VAR 0 4
59074: PUSH
59075: LD_INT 1
59077: PLUS
59078: ARRAY
59079: ST_TO_ADDR
59080: GO 59565
59082: LD_INT 16
59084: DOUBLE
59085: EQUAL
59086: IFTRUE 59144
59088: LD_INT 17
59090: DOUBLE
59091: EQUAL
59092: IFTRUE 59144
59094: LD_INT 18
59096: DOUBLE
59097: EQUAL
59098: IFTRUE 59144
59100: LD_INT 19
59102: DOUBLE
59103: EQUAL
59104: IFTRUE 59144
59106: LD_INT 22
59108: DOUBLE
59109: EQUAL
59110: IFTRUE 59144
59112: LD_INT 20
59114: DOUBLE
59115: EQUAL
59116: IFTRUE 59144
59118: LD_INT 21
59120: DOUBLE
59121: EQUAL
59122: IFTRUE 59144
59124: LD_INT 23
59126: DOUBLE
59127: EQUAL
59128: IFTRUE 59144
59130: LD_INT 24
59132: DOUBLE
59133: EQUAL
59134: IFTRUE 59144
59136: LD_INT 25
59138: DOUBLE
59139: EQUAL
59140: IFTRUE 59144
59142: GO 59200
59144: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59145: LD_ADDR_VAR 0 9
59149: PUSH
59150: LD_VAR 0 35
59154: PUSH
59155: LD_VAR 0 36
59159: PUSH
59160: LD_VAR 0 37
59164: PUSH
59165: LD_VAR 0 38
59169: PUSH
59170: LD_VAR 0 39
59174: PUSH
59175: LD_VAR 0 40
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: PUSH
59188: LD_VAR 0 4
59192: PUSH
59193: LD_INT 1
59195: PLUS
59196: ARRAY
59197: ST_TO_ADDR
59198: GO 59565
59200: LD_INT 6
59202: DOUBLE
59203: EQUAL
59204: IFTRUE 59256
59206: LD_INT 7
59208: DOUBLE
59209: EQUAL
59210: IFTRUE 59256
59212: LD_INT 8
59214: DOUBLE
59215: EQUAL
59216: IFTRUE 59256
59218: LD_INT 13
59220: DOUBLE
59221: EQUAL
59222: IFTRUE 59256
59224: LD_INT 12
59226: DOUBLE
59227: EQUAL
59228: IFTRUE 59256
59230: LD_INT 15
59232: DOUBLE
59233: EQUAL
59234: IFTRUE 59256
59236: LD_INT 11
59238: DOUBLE
59239: EQUAL
59240: IFTRUE 59256
59242: LD_INT 14
59244: DOUBLE
59245: EQUAL
59246: IFTRUE 59256
59248: LD_INT 10
59250: DOUBLE
59251: EQUAL
59252: IFTRUE 59256
59254: GO 59312
59256: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59257: LD_ADDR_VAR 0 9
59261: PUSH
59262: LD_VAR 0 41
59266: PUSH
59267: LD_VAR 0 42
59271: PUSH
59272: LD_VAR 0 43
59276: PUSH
59277: LD_VAR 0 44
59281: PUSH
59282: LD_VAR 0 45
59286: PUSH
59287: LD_VAR 0 46
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: PUSH
59300: LD_VAR 0 4
59304: PUSH
59305: LD_INT 1
59307: PLUS
59308: ARRAY
59309: ST_TO_ADDR
59310: GO 59565
59312: LD_INT 36
59314: DOUBLE
59315: EQUAL
59316: IFTRUE 59320
59318: GO 59376
59320: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59321: LD_ADDR_VAR 0 9
59325: PUSH
59326: LD_VAR 0 47
59330: PUSH
59331: LD_VAR 0 48
59335: PUSH
59336: LD_VAR 0 49
59340: PUSH
59341: LD_VAR 0 50
59345: PUSH
59346: LD_VAR 0 51
59350: PUSH
59351: LD_VAR 0 52
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: PUSH
59364: LD_VAR 0 4
59368: PUSH
59369: LD_INT 1
59371: PLUS
59372: ARRAY
59373: ST_TO_ADDR
59374: GO 59565
59376: LD_INT 4
59378: DOUBLE
59379: EQUAL
59380: IFTRUE 59402
59382: LD_INT 5
59384: DOUBLE
59385: EQUAL
59386: IFTRUE 59402
59388: LD_INT 34
59390: DOUBLE
59391: EQUAL
59392: IFTRUE 59402
59394: LD_INT 37
59396: DOUBLE
59397: EQUAL
59398: IFTRUE 59402
59400: GO 59458
59402: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59403: LD_ADDR_VAR 0 9
59407: PUSH
59408: LD_VAR 0 53
59412: PUSH
59413: LD_VAR 0 54
59417: PUSH
59418: LD_VAR 0 55
59422: PUSH
59423: LD_VAR 0 56
59427: PUSH
59428: LD_VAR 0 57
59432: PUSH
59433: LD_VAR 0 58
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: PUSH
59446: LD_VAR 0 4
59450: PUSH
59451: LD_INT 1
59453: PLUS
59454: ARRAY
59455: ST_TO_ADDR
59456: GO 59565
59458: LD_INT 31
59460: DOUBLE
59461: EQUAL
59462: IFTRUE 59508
59464: LD_INT 32
59466: DOUBLE
59467: EQUAL
59468: IFTRUE 59508
59470: LD_INT 33
59472: DOUBLE
59473: EQUAL
59474: IFTRUE 59508
59476: LD_INT 27
59478: DOUBLE
59479: EQUAL
59480: IFTRUE 59508
59482: LD_INT 26
59484: DOUBLE
59485: EQUAL
59486: IFTRUE 59508
59488: LD_INT 28
59490: DOUBLE
59491: EQUAL
59492: IFTRUE 59508
59494: LD_INT 29
59496: DOUBLE
59497: EQUAL
59498: IFTRUE 59508
59500: LD_INT 30
59502: DOUBLE
59503: EQUAL
59504: IFTRUE 59508
59506: GO 59564
59508: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59509: LD_ADDR_VAR 0 9
59513: PUSH
59514: LD_VAR 0 59
59518: PUSH
59519: LD_VAR 0 60
59523: PUSH
59524: LD_VAR 0 61
59528: PUSH
59529: LD_VAR 0 62
59533: PUSH
59534: LD_VAR 0 63
59538: PUSH
59539: LD_VAR 0 64
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: PUSH
59552: LD_VAR 0 4
59556: PUSH
59557: LD_INT 1
59559: PLUS
59560: ARRAY
59561: ST_TO_ADDR
59562: GO 59565
59564: POP
// temp_list2 = [ ] ;
59565: LD_ADDR_VAR 0 10
59569: PUSH
59570: EMPTY
59571: ST_TO_ADDR
// for i in temp_list do
59572: LD_ADDR_VAR 0 8
59576: PUSH
59577: LD_VAR 0 9
59581: PUSH
59582: FOR_IN
59583: IFFALSE 59635
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59585: LD_ADDR_VAR 0 10
59589: PUSH
59590: LD_VAR 0 10
59594: PUSH
59595: LD_VAR 0 8
59599: PUSH
59600: LD_INT 1
59602: ARRAY
59603: PUSH
59604: LD_VAR 0 2
59608: PLUS
59609: PUSH
59610: LD_VAR 0 8
59614: PUSH
59615: LD_INT 2
59617: ARRAY
59618: PUSH
59619: LD_VAR 0 3
59623: PLUS
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: EMPTY
59630: LIST
59631: ADD
59632: ST_TO_ADDR
59633: GO 59582
59635: POP
59636: POP
// result = temp_list2 ;
59637: LD_ADDR_VAR 0 7
59641: PUSH
59642: LD_VAR 0 10
59646: ST_TO_ADDR
// end ;
59647: LD_VAR 0 7
59651: RET
// export function EnemyInRange ( unit , dist ) ; begin
59652: LD_INT 0
59654: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59655: LD_ADDR_VAR 0 3
59659: PUSH
59660: LD_VAR 0 1
59664: PPUSH
59665: CALL_OW 255
59669: PPUSH
59670: LD_VAR 0 1
59674: PPUSH
59675: CALL_OW 250
59679: PPUSH
59680: LD_VAR 0 1
59684: PPUSH
59685: CALL_OW 251
59689: PPUSH
59690: LD_VAR 0 2
59694: PPUSH
59695: CALL 33054 0 4
59699: PUSH
59700: LD_INT 4
59702: ARRAY
59703: ST_TO_ADDR
// end ;
59704: LD_VAR 0 3
59708: RET
// export function PlayerSeeMe ( unit ) ; begin
59709: LD_INT 0
59711: PPUSH
// result := See ( your_side , unit ) ;
59712: LD_ADDR_VAR 0 2
59716: PUSH
59717: LD_OWVAR 2
59721: PPUSH
59722: LD_VAR 0 1
59726: PPUSH
59727: CALL_OW 292
59731: ST_TO_ADDR
// end ;
59732: LD_VAR 0 2
59736: RET
// export function ReverseDir ( unit ) ; begin
59737: LD_INT 0
59739: PPUSH
// if not unit then
59740: LD_VAR 0 1
59744: NOT
59745: IFFALSE 59749
// exit ;
59747: GO 59772
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59749: LD_ADDR_VAR 0 2
59753: PUSH
59754: LD_VAR 0 1
59758: PPUSH
59759: CALL_OW 254
59763: PUSH
59764: LD_INT 3
59766: PLUS
59767: PUSH
59768: LD_INT 6
59770: MOD
59771: ST_TO_ADDR
// end ;
59772: LD_VAR 0 2
59776: RET
// export function ReverseArray ( array ) ; var i ; begin
59777: LD_INT 0
59779: PPUSH
59780: PPUSH
// if not array then
59781: LD_VAR 0 1
59785: NOT
59786: IFFALSE 59790
// exit ;
59788: GO 59845
// result := [ ] ;
59790: LD_ADDR_VAR 0 2
59794: PUSH
59795: EMPTY
59796: ST_TO_ADDR
// for i := array downto 1 do
59797: LD_ADDR_VAR 0 3
59801: PUSH
59802: DOUBLE
59803: LD_VAR 0 1
59807: INC
59808: ST_TO_ADDR
59809: LD_INT 1
59811: PUSH
59812: FOR_DOWNTO
59813: IFFALSE 59843
// result := Join ( result , array [ i ] ) ;
59815: LD_ADDR_VAR 0 2
59819: PUSH
59820: LD_VAR 0 2
59824: PPUSH
59825: LD_VAR 0 1
59829: PUSH
59830: LD_VAR 0 3
59834: ARRAY
59835: PPUSH
59836: CALL 64470 0 2
59840: ST_TO_ADDR
59841: GO 59812
59843: POP
59844: POP
// end ;
59845: LD_VAR 0 2
59849: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59850: LD_INT 0
59852: PPUSH
59853: PPUSH
59854: PPUSH
59855: PPUSH
59856: PPUSH
59857: PPUSH
// if not unit or not hexes then
59858: LD_VAR 0 1
59862: NOT
59863: PUSH
59864: LD_VAR 0 2
59868: NOT
59869: OR
59870: IFFALSE 59874
// exit ;
59872: GO 59997
// dist := 9999 ;
59874: LD_ADDR_VAR 0 5
59878: PUSH
59879: LD_INT 9999
59881: ST_TO_ADDR
// for i = 1 to hexes do
59882: LD_ADDR_VAR 0 4
59886: PUSH
59887: DOUBLE
59888: LD_INT 1
59890: DEC
59891: ST_TO_ADDR
59892: LD_VAR 0 2
59896: PUSH
59897: FOR_TO
59898: IFFALSE 59985
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59900: LD_ADDR_VAR 0 6
59904: PUSH
59905: LD_VAR 0 1
59909: PPUSH
59910: LD_VAR 0 2
59914: PUSH
59915: LD_VAR 0 4
59919: ARRAY
59920: PUSH
59921: LD_INT 1
59923: ARRAY
59924: PPUSH
59925: LD_VAR 0 2
59929: PUSH
59930: LD_VAR 0 4
59934: ARRAY
59935: PUSH
59936: LD_INT 2
59938: ARRAY
59939: PPUSH
59940: CALL_OW 297
59944: ST_TO_ADDR
// if tdist < dist then
59945: LD_VAR 0 6
59949: PUSH
59950: LD_VAR 0 5
59954: LESS
59955: IFFALSE 59983
// begin hex := hexes [ i ] ;
59957: LD_ADDR_VAR 0 8
59961: PUSH
59962: LD_VAR 0 2
59966: PUSH
59967: LD_VAR 0 4
59971: ARRAY
59972: ST_TO_ADDR
// dist := tdist ;
59973: LD_ADDR_VAR 0 5
59977: PUSH
59978: LD_VAR 0 6
59982: ST_TO_ADDR
// end ; end ;
59983: GO 59897
59985: POP
59986: POP
// result := hex ;
59987: LD_ADDR_VAR 0 3
59991: PUSH
59992: LD_VAR 0 8
59996: ST_TO_ADDR
// end ;
59997: LD_VAR 0 3
60001: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60002: LD_INT 0
60004: PPUSH
60005: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60006: LD_VAR 0 1
60010: NOT
60011: PUSH
60012: LD_VAR 0 1
60016: PUSH
60017: LD_INT 21
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 23
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PPUSH
60041: CALL_OW 69
60045: IN
60046: NOT
60047: OR
60048: IFFALSE 60052
// exit ;
60050: GO 60099
// for i = 1 to 3 do
60052: LD_ADDR_VAR 0 3
60056: PUSH
60057: DOUBLE
60058: LD_INT 1
60060: DEC
60061: ST_TO_ADDR
60062: LD_INT 3
60064: PUSH
60065: FOR_TO
60066: IFFALSE 60097
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60068: LD_VAR 0 1
60072: PPUSH
60073: CALL_OW 250
60077: PPUSH
60078: LD_VAR 0 1
60082: PPUSH
60083: CALL_OW 251
60087: PPUSH
60088: LD_INT 1
60090: PPUSH
60091: CALL_OW 453
60095: GO 60065
60097: POP
60098: POP
// end ;
60099: LD_VAR 0 2
60103: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60104: LD_INT 0
60106: PPUSH
60107: PPUSH
60108: PPUSH
60109: PPUSH
60110: PPUSH
60111: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60112: LD_VAR 0 1
60116: NOT
60117: PUSH
60118: LD_VAR 0 2
60122: NOT
60123: OR
60124: PUSH
60125: LD_VAR 0 1
60129: PPUSH
60130: CALL_OW 314
60134: OR
60135: IFFALSE 60139
// exit ;
60137: GO 60580
// x := GetX ( enemy_unit ) ;
60139: LD_ADDR_VAR 0 7
60143: PUSH
60144: LD_VAR 0 2
60148: PPUSH
60149: CALL_OW 250
60153: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60154: LD_ADDR_VAR 0 8
60158: PUSH
60159: LD_VAR 0 2
60163: PPUSH
60164: CALL_OW 251
60168: ST_TO_ADDR
// if not x or not y then
60169: LD_VAR 0 7
60173: NOT
60174: PUSH
60175: LD_VAR 0 8
60179: NOT
60180: OR
60181: IFFALSE 60185
// exit ;
60183: GO 60580
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60185: LD_ADDR_VAR 0 6
60189: PUSH
60190: LD_VAR 0 7
60194: PPUSH
60195: LD_INT 0
60197: PPUSH
60198: LD_INT 4
60200: PPUSH
60201: CALL_OW 272
60205: PUSH
60206: LD_VAR 0 8
60210: PPUSH
60211: LD_INT 0
60213: PPUSH
60214: LD_INT 4
60216: PPUSH
60217: CALL_OW 273
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_VAR 0 7
60230: PPUSH
60231: LD_INT 1
60233: PPUSH
60234: LD_INT 4
60236: PPUSH
60237: CALL_OW 272
60241: PUSH
60242: LD_VAR 0 8
60246: PPUSH
60247: LD_INT 1
60249: PPUSH
60250: LD_INT 4
60252: PPUSH
60253: CALL_OW 273
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_VAR 0 7
60266: PPUSH
60267: LD_INT 2
60269: PPUSH
60270: LD_INT 4
60272: PPUSH
60273: CALL_OW 272
60277: PUSH
60278: LD_VAR 0 8
60282: PPUSH
60283: LD_INT 2
60285: PPUSH
60286: LD_INT 4
60288: PPUSH
60289: CALL_OW 273
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_VAR 0 7
60302: PPUSH
60303: LD_INT 3
60305: PPUSH
60306: LD_INT 4
60308: PPUSH
60309: CALL_OW 272
60313: PUSH
60314: LD_VAR 0 8
60318: PPUSH
60319: LD_INT 3
60321: PPUSH
60322: LD_INT 4
60324: PPUSH
60325: CALL_OW 273
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_VAR 0 7
60338: PPUSH
60339: LD_INT 4
60341: PPUSH
60342: LD_INT 4
60344: PPUSH
60345: CALL_OW 272
60349: PUSH
60350: LD_VAR 0 8
60354: PPUSH
60355: LD_INT 4
60357: PPUSH
60358: LD_INT 4
60360: PPUSH
60361: CALL_OW 273
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_VAR 0 7
60374: PPUSH
60375: LD_INT 5
60377: PPUSH
60378: LD_INT 4
60380: PPUSH
60381: CALL_OW 272
60385: PUSH
60386: LD_VAR 0 8
60390: PPUSH
60391: LD_INT 5
60393: PPUSH
60394: LD_INT 4
60396: PPUSH
60397: CALL_OW 273
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: ST_TO_ADDR
// for i = tmp downto 1 do
60414: LD_ADDR_VAR 0 4
60418: PUSH
60419: DOUBLE
60420: LD_VAR 0 6
60424: INC
60425: ST_TO_ADDR
60426: LD_INT 1
60428: PUSH
60429: FOR_DOWNTO
60430: IFFALSE 60531
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60432: LD_VAR 0 6
60436: PUSH
60437: LD_VAR 0 4
60441: ARRAY
60442: PUSH
60443: LD_INT 1
60445: ARRAY
60446: PPUSH
60447: LD_VAR 0 6
60451: PUSH
60452: LD_VAR 0 4
60456: ARRAY
60457: PUSH
60458: LD_INT 2
60460: ARRAY
60461: PPUSH
60462: CALL_OW 488
60466: NOT
60467: PUSH
60468: LD_VAR 0 6
60472: PUSH
60473: LD_VAR 0 4
60477: ARRAY
60478: PUSH
60479: LD_INT 1
60481: ARRAY
60482: PPUSH
60483: LD_VAR 0 6
60487: PUSH
60488: LD_VAR 0 4
60492: ARRAY
60493: PUSH
60494: LD_INT 2
60496: ARRAY
60497: PPUSH
60498: CALL_OW 428
60502: PUSH
60503: LD_INT 0
60505: NONEQUAL
60506: OR
60507: IFFALSE 60529
// tmp := Delete ( tmp , i ) ;
60509: LD_ADDR_VAR 0 6
60513: PUSH
60514: LD_VAR 0 6
60518: PPUSH
60519: LD_VAR 0 4
60523: PPUSH
60524: CALL_OW 3
60528: ST_TO_ADDR
60529: GO 60429
60531: POP
60532: POP
// j := GetClosestHex ( unit , tmp ) ;
60533: LD_ADDR_VAR 0 5
60537: PUSH
60538: LD_VAR 0 1
60542: PPUSH
60543: LD_VAR 0 6
60547: PPUSH
60548: CALL 59850 0 2
60552: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60553: LD_VAR 0 1
60557: PPUSH
60558: LD_VAR 0 5
60562: PUSH
60563: LD_INT 1
60565: ARRAY
60566: PPUSH
60567: LD_VAR 0 5
60571: PUSH
60572: LD_INT 2
60574: ARRAY
60575: PPUSH
60576: CALL_OW 111
// end ;
60580: LD_VAR 0 3
60584: RET
// export function PrepareApemanSoldier ( ) ; begin
60585: LD_INT 0
60587: PPUSH
// uc_nation := 0 ;
60588: LD_ADDR_OWVAR 21
60592: PUSH
60593: LD_INT 0
60595: ST_TO_ADDR
// hc_sex := sex_male ;
60596: LD_ADDR_OWVAR 27
60600: PUSH
60601: LD_INT 1
60603: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60604: LD_ADDR_OWVAR 28
60608: PUSH
60609: LD_INT 15
60611: ST_TO_ADDR
// hc_gallery :=  ;
60612: LD_ADDR_OWVAR 33
60616: PUSH
60617: LD_STRING 
60619: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60620: LD_ADDR_OWVAR 31
60624: PUSH
60625: LD_INT 0
60627: PPUSH
60628: LD_INT 3
60630: PPUSH
60631: CALL_OW 12
60635: PUSH
60636: LD_INT 0
60638: PPUSH
60639: LD_INT 3
60641: PPUSH
60642: CALL_OW 12
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: ST_TO_ADDR
// end ;
60659: LD_VAR 0 1
60663: RET
// export function PrepareApemanEngineer ( ) ; begin
60664: LD_INT 0
60666: PPUSH
// uc_nation := 0 ;
60667: LD_ADDR_OWVAR 21
60671: PUSH
60672: LD_INT 0
60674: ST_TO_ADDR
// hc_sex := sex_male ;
60675: LD_ADDR_OWVAR 27
60679: PUSH
60680: LD_INT 1
60682: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60683: LD_ADDR_OWVAR 28
60687: PUSH
60688: LD_INT 16
60690: ST_TO_ADDR
// hc_gallery :=  ;
60691: LD_ADDR_OWVAR 33
60695: PUSH
60696: LD_STRING 
60698: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60699: LD_ADDR_OWVAR 31
60703: PUSH
60704: LD_INT 0
60706: PPUSH
60707: LD_INT 3
60709: PPUSH
60710: CALL_OW 12
60714: PUSH
60715: LD_INT 0
60717: PPUSH
60718: LD_INT 3
60720: PPUSH
60721: CALL_OW 12
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: ST_TO_ADDR
// end ;
60738: LD_VAR 0 1
60742: RET
// export function PrepareApeman ( agressivity ) ; begin
60743: LD_INT 0
60745: PPUSH
// uc_side := 0 ;
60746: LD_ADDR_OWVAR 20
60750: PUSH
60751: LD_INT 0
60753: ST_TO_ADDR
// uc_nation := 0 ;
60754: LD_ADDR_OWVAR 21
60758: PUSH
60759: LD_INT 0
60761: ST_TO_ADDR
// hc_sex := sex_male ;
60762: LD_ADDR_OWVAR 27
60766: PUSH
60767: LD_INT 1
60769: ST_TO_ADDR
// hc_class := class_apeman ;
60770: LD_ADDR_OWVAR 28
60774: PUSH
60775: LD_INT 12
60777: ST_TO_ADDR
// hc_gallery :=  ;
60778: LD_ADDR_OWVAR 33
60782: PUSH
60783: LD_STRING 
60785: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60786: LD_ADDR_OWVAR 35
60790: PUSH
60791: LD_VAR 0 1
60795: NEG
60796: PPUSH
60797: LD_VAR 0 1
60801: PPUSH
60802: CALL_OW 12
60806: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60807: LD_ADDR_OWVAR 31
60811: PUSH
60812: LD_INT 0
60814: PPUSH
60815: LD_INT 3
60817: PPUSH
60818: CALL_OW 12
60822: PUSH
60823: LD_INT 0
60825: PPUSH
60826: LD_INT 3
60828: PPUSH
60829: CALL_OW 12
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: ST_TO_ADDR
// end ;
60846: LD_VAR 0 2
60850: RET
// export function PrepareTiger ( agressivity ) ; begin
60851: LD_INT 0
60853: PPUSH
// uc_side := 0 ;
60854: LD_ADDR_OWVAR 20
60858: PUSH
60859: LD_INT 0
60861: ST_TO_ADDR
// uc_nation := 0 ;
60862: LD_ADDR_OWVAR 21
60866: PUSH
60867: LD_INT 0
60869: ST_TO_ADDR
// hc_class := class_tiger ;
60870: LD_ADDR_OWVAR 28
60874: PUSH
60875: LD_INT 14
60877: ST_TO_ADDR
// hc_gallery :=  ;
60878: LD_ADDR_OWVAR 33
60882: PUSH
60883: LD_STRING 
60885: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60886: LD_ADDR_OWVAR 35
60890: PUSH
60891: LD_VAR 0 1
60895: NEG
60896: PPUSH
60897: LD_VAR 0 1
60901: PPUSH
60902: CALL_OW 12
60906: ST_TO_ADDR
// end ;
60907: LD_VAR 0 2
60911: RET
// export function PrepareEnchidna ( ) ; begin
60912: LD_INT 0
60914: PPUSH
// uc_side := 0 ;
60915: LD_ADDR_OWVAR 20
60919: PUSH
60920: LD_INT 0
60922: ST_TO_ADDR
// uc_nation := 0 ;
60923: LD_ADDR_OWVAR 21
60927: PUSH
60928: LD_INT 0
60930: ST_TO_ADDR
// hc_class := class_baggie ;
60931: LD_ADDR_OWVAR 28
60935: PUSH
60936: LD_INT 13
60938: ST_TO_ADDR
// hc_gallery :=  ;
60939: LD_ADDR_OWVAR 33
60943: PUSH
60944: LD_STRING 
60946: ST_TO_ADDR
// end ;
60947: LD_VAR 0 1
60951: RET
// export function PrepareFrog ( ) ; begin
60952: LD_INT 0
60954: PPUSH
// uc_side := 0 ;
60955: LD_ADDR_OWVAR 20
60959: PUSH
60960: LD_INT 0
60962: ST_TO_ADDR
// uc_nation := 0 ;
60963: LD_ADDR_OWVAR 21
60967: PUSH
60968: LD_INT 0
60970: ST_TO_ADDR
// hc_class := class_frog ;
60971: LD_ADDR_OWVAR 28
60975: PUSH
60976: LD_INT 19
60978: ST_TO_ADDR
// hc_gallery :=  ;
60979: LD_ADDR_OWVAR 33
60983: PUSH
60984: LD_STRING 
60986: ST_TO_ADDR
// end ;
60987: LD_VAR 0 1
60991: RET
// export function PrepareFish ( ) ; begin
60992: LD_INT 0
60994: PPUSH
// uc_side := 0 ;
60995: LD_ADDR_OWVAR 20
60999: PUSH
61000: LD_INT 0
61002: ST_TO_ADDR
// uc_nation := 0 ;
61003: LD_ADDR_OWVAR 21
61007: PUSH
61008: LD_INT 0
61010: ST_TO_ADDR
// hc_class := class_fish ;
61011: LD_ADDR_OWVAR 28
61015: PUSH
61016: LD_INT 20
61018: ST_TO_ADDR
// hc_gallery :=  ;
61019: LD_ADDR_OWVAR 33
61023: PUSH
61024: LD_STRING 
61026: ST_TO_ADDR
// end ;
61027: LD_VAR 0 1
61031: RET
// export function PrepareBird ( ) ; begin
61032: LD_INT 0
61034: PPUSH
// uc_side := 0 ;
61035: LD_ADDR_OWVAR 20
61039: PUSH
61040: LD_INT 0
61042: ST_TO_ADDR
// uc_nation := 0 ;
61043: LD_ADDR_OWVAR 21
61047: PUSH
61048: LD_INT 0
61050: ST_TO_ADDR
// hc_class := class_phororhacos ;
61051: LD_ADDR_OWVAR 28
61055: PUSH
61056: LD_INT 18
61058: ST_TO_ADDR
// hc_gallery :=  ;
61059: LD_ADDR_OWVAR 33
61063: PUSH
61064: LD_STRING 
61066: ST_TO_ADDR
// end ;
61067: LD_VAR 0 1
61071: RET
// export function PrepareHorse ( ) ; begin
61072: LD_INT 0
61074: PPUSH
// uc_side := 0 ;
61075: LD_ADDR_OWVAR 20
61079: PUSH
61080: LD_INT 0
61082: ST_TO_ADDR
// uc_nation := 0 ;
61083: LD_ADDR_OWVAR 21
61087: PUSH
61088: LD_INT 0
61090: ST_TO_ADDR
// hc_class := class_horse ;
61091: LD_ADDR_OWVAR 28
61095: PUSH
61096: LD_INT 21
61098: ST_TO_ADDR
// hc_gallery :=  ;
61099: LD_ADDR_OWVAR 33
61103: PUSH
61104: LD_STRING 
61106: ST_TO_ADDR
// end ;
61107: LD_VAR 0 1
61111: RET
// export function PrepareMastodont ( ) ; begin
61112: LD_INT 0
61114: PPUSH
// uc_side := 0 ;
61115: LD_ADDR_OWVAR 20
61119: PUSH
61120: LD_INT 0
61122: ST_TO_ADDR
// uc_nation := 0 ;
61123: LD_ADDR_OWVAR 21
61127: PUSH
61128: LD_INT 0
61130: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61131: LD_ADDR_OWVAR 37
61135: PUSH
61136: LD_INT 31
61138: ST_TO_ADDR
// vc_control := control_rider ;
61139: LD_ADDR_OWVAR 38
61143: PUSH
61144: LD_INT 4
61146: ST_TO_ADDR
// end ;
61147: LD_VAR 0 1
61151: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61152: LD_INT 0
61154: PPUSH
61155: PPUSH
61156: PPUSH
// uc_side = 0 ;
61157: LD_ADDR_OWVAR 20
61161: PUSH
61162: LD_INT 0
61164: ST_TO_ADDR
// uc_nation = 0 ;
61165: LD_ADDR_OWVAR 21
61169: PUSH
61170: LD_INT 0
61172: ST_TO_ADDR
// InitHc_All ( ) ;
61173: CALL_OW 584
// InitVc ;
61177: CALL_OW 20
// if mastodonts then
61181: LD_VAR 0 6
61185: IFFALSE 61252
// for i = 1 to mastodonts do
61187: LD_ADDR_VAR 0 11
61191: PUSH
61192: DOUBLE
61193: LD_INT 1
61195: DEC
61196: ST_TO_ADDR
61197: LD_VAR 0 6
61201: PUSH
61202: FOR_TO
61203: IFFALSE 61250
// begin vc_chassis := 31 ;
61205: LD_ADDR_OWVAR 37
61209: PUSH
61210: LD_INT 31
61212: ST_TO_ADDR
// vc_control := control_rider ;
61213: LD_ADDR_OWVAR 38
61217: PUSH
61218: LD_INT 4
61220: ST_TO_ADDR
// animal := CreateVehicle ;
61221: LD_ADDR_VAR 0 12
61225: PUSH
61226: CALL_OW 45
61230: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61231: LD_VAR 0 12
61235: PPUSH
61236: LD_VAR 0 8
61240: PPUSH
61241: LD_INT 0
61243: PPUSH
61244: CALL 63387 0 3
// end ;
61248: GO 61202
61250: POP
61251: POP
// if horses then
61252: LD_VAR 0 5
61256: IFFALSE 61323
// for i = 1 to horses do
61258: LD_ADDR_VAR 0 11
61262: PUSH
61263: DOUBLE
61264: LD_INT 1
61266: DEC
61267: ST_TO_ADDR
61268: LD_VAR 0 5
61272: PUSH
61273: FOR_TO
61274: IFFALSE 61321
// begin hc_class := 21 ;
61276: LD_ADDR_OWVAR 28
61280: PUSH
61281: LD_INT 21
61283: ST_TO_ADDR
// hc_gallery :=  ;
61284: LD_ADDR_OWVAR 33
61288: PUSH
61289: LD_STRING 
61291: ST_TO_ADDR
// animal := CreateHuman ;
61292: LD_ADDR_VAR 0 12
61296: PUSH
61297: CALL_OW 44
61301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61302: LD_VAR 0 12
61306: PPUSH
61307: LD_VAR 0 8
61311: PPUSH
61312: LD_INT 0
61314: PPUSH
61315: CALL 63387 0 3
// end ;
61319: GO 61273
61321: POP
61322: POP
// if birds then
61323: LD_VAR 0 1
61327: IFFALSE 61394
// for i = 1 to birds do
61329: LD_ADDR_VAR 0 11
61333: PUSH
61334: DOUBLE
61335: LD_INT 1
61337: DEC
61338: ST_TO_ADDR
61339: LD_VAR 0 1
61343: PUSH
61344: FOR_TO
61345: IFFALSE 61392
// begin hc_class = 18 ;
61347: LD_ADDR_OWVAR 28
61351: PUSH
61352: LD_INT 18
61354: ST_TO_ADDR
// hc_gallery =  ;
61355: LD_ADDR_OWVAR 33
61359: PUSH
61360: LD_STRING 
61362: ST_TO_ADDR
// animal := CreateHuman ;
61363: LD_ADDR_VAR 0 12
61367: PUSH
61368: CALL_OW 44
61372: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61373: LD_VAR 0 12
61377: PPUSH
61378: LD_VAR 0 8
61382: PPUSH
61383: LD_INT 0
61385: PPUSH
61386: CALL 63387 0 3
// end ;
61390: GO 61344
61392: POP
61393: POP
// if tigers then
61394: LD_VAR 0 2
61398: IFFALSE 61482
// for i = 1 to tigers do
61400: LD_ADDR_VAR 0 11
61404: PUSH
61405: DOUBLE
61406: LD_INT 1
61408: DEC
61409: ST_TO_ADDR
61410: LD_VAR 0 2
61414: PUSH
61415: FOR_TO
61416: IFFALSE 61480
// begin hc_class = class_tiger ;
61418: LD_ADDR_OWVAR 28
61422: PUSH
61423: LD_INT 14
61425: ST_TO_ADDR
// hc_gallery =  ;
61426: LD_ADDR_OWVAR 33
61430: PUSH
61431: LD_STRING 
61433: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61434: LD_ADDR_OWVAR 35
61438: PUSH
61439: LD_INT 7
61441: NEG
61442: PPUSH
61443: LD_INT 7
61445: PPUSH
61446: CALL_OW 12
61450: ST_TO_ADDR
// animal := CreateHuman ;
61451: LD_ADDR_VAR 0 12
61455: PUSH
61456: CALL_OW 44
61460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61461: LD_VAR 0 12
61465: PPUSH
61466: LD_VAR 0 8
61470: PPUSH
61471: LD_INT 0
61473: PPUSH
61474: CALL 63387 0 3
// end ;
61478: GO 61415
61480: POP
61481: POP
// if apemans then
61482: LD_VAR 0 3
61486: IFFALSE 61609
// for i = 1 to apemans do
61488: LD_ADDR_VAR 0 11
61492: PUSH
61493: DOUBLE
61494: LD_INT 1
61496: DEC
61497: ST_TO_ADDR
61498: LD_VAR 0 3
61502: PUSH
61503: FOR_TO
61504: IFFALSE 61607
// begin hc_class = class_apeman ;
61506: LD_ADDR_OWVAR 28
61510: PUSH
61511: LD_INT 12
61513: ST_TO_ADDR
// hc_gallery =  ;
61514: LD_ADDR_OWVAR 33
61518: PUSH
61519: LD_STRING 
61521: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61522: LD_ADDR_OWVAR 35
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PPUSH
61531: LD_INT 2
61533: PPUSH
61534: CALL_OW 12
61538: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61539: LD_ADDR_OWVAR 31
61543: PUSH
61544: LD_INT 1
61546: PPUSH
61547: LD_INT 3
61549: PPUSH
61550: CALL_OW 12
61554: PUSH
61555: LD_INT 1
61557: PPUSH
61558: LD_INT 3
61560: PPUSH
61561: CALL_OW 12
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: ST_TO_ADDR
// animal := CreateHuman ;
61578: LD_ADDR_VAR 0 12
61582: PUSH
61583: CALL_OW 44
61587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61588: LD_VAR 0 12
61592: PPUSH
61593: LD_VAR 0 8
61597: PPUSH
61598: LD_INT 0
61600: PPUSH
61601: CALL 63387 0 3
// end ;
61605: GO 61503
61607: POP
61608: POP
// if enchidnas then
61609: LD_VAR 0 4
61613: IFFALSE 61680
// for i = 1 to enchidnas do
61615: LD_ADDR_VAR 0 11
61619: PUSH
61620: DOUBLE
61621: LD_INT 1
61623: DEC
61624: ST_TO_ADDR
61625: LD_VAR 0 4
61629: PUSH
61630: FOR_TO
61631: IFFALSE 61678
// begin hc_class = 13 ;
61633: LD_ADDR_OWVAR 28
61637: PUSH
61638: LD_INT 13
61640: ST_TO_ADDR
// hc_gallery =  ;
61641: LD_ADDR_OWVAR 33
61645: PUSH
61646: LD_STRING 
61648: ST_TO_ADDR
// animal := CreateHuman ;
61649: LD_ADDR_VAR 0 12
61653: PUSH
61654: CALL_OW 44
61658: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61659: LD_VAR 0 12
61663: PPUSH
61664: LD_VAR 0 8
61668: PPUSH
61669: LD_INT 0
61671: PPUSH
61672: CALL 63387 0 3
// end ;
61676: GO 61630
61678: POP
61679: POP
// if fishes then
61680: LD_VAR 0 7
61684: IFFALSE 61751
// for i = 1 to fishes do
61686: LD_ADDR_VAR 0 11
61690: PUSH
61691: DOUBLE
61692: LD_INT 1
61694: DEC
61695: ST_TO_ADDR
61696: LD_VAR 0 7
61700: PUSH
61701: FOR_TO
61702: IFFALSE 61749
// begin hc_class = 20 ;
61704: LD_ADDR_OWVAR 28
61708: PUSH
61709: LD_INT 20
61711: ST_TO_ADDR
// hc_gallery =  ;
61712: LD_ADDR_OWVAR 33
61716: PUSH
61717: LD_STRING 
61719: ST_TO_ADDR
// animal := CreateHuman ;
61720: LD_ADDR_VAR 0 12
61724: PUSH
61725: CALL_OW 44
61729: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61730: LD_VAR 0 12
61734: PPUSH
61735: LD_VAR 0 9
61739: PPUSH
61740: LD_INT 0
61742: PPUSH
61743: CALL 63387 0 3
// end ;
61747: GO 61701
61749: POP
61750: POP
// end ;
61751: LD_VAR 0 10
61755: RET
// export function WantHeal ( sci , unit ) ; begin
61756: LD_INT 0
61758: PPUSH
// if GetTaskList ( sci ) > 0 then
61759: LD_VAR 0 1
61763: PPUSH
61764: CALL_OW 437
61768: PUSH
61769: LD_INT 0
61771: GREATER
61772: IFFALSE 61842
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61774: LD_VAR 0 1
61778: PPUSH
61779: CALL_OW 437
61783: PUSH
61784: LD_INT 1
61786: ARRAY
61787: PUSH
61788: LD_INT 1
61790: ARRAY
61791: PUSH
61792: LD_STRING l
61794: EQUAL
61795: PUSH
61796: LD_VAR 0 1
61800: PPUSH
61801: CALL_OW 437
61805: PUSH
61806: LD_INT 1
61808: ARRAY
61809: PUSH
61810: LD_INT 4
61812: ARRAY
61813: PUSH
61814: LD_VAR 0 2
61818: EQUAL
61819: AND
61820: IFFALSE 61832
// result := true else
61822: LD_ADDR_VAR 0 3
61826: PUSH
61827: LD_INT 1
61829: ST_TO_ADDR
61830: GO 61840
// result := false ;
61832: LD_ADDR_VAR 0 3
61836: PUSH
61837: LD_INT 0
61839: ST_TO_ADDR
// end else
61840: GO 61850
// result := false ;
61842: LD_ADDR_VAR 0 3
61846: PUSH
61847: LD_INT 0
61849: ST_TO_ADDR
// end ;
61850: LD_VAR 0 3
61854: RET
// export function HealTarget ( sci ) ; begin
61855: LD_INT 0
61857: PPUSH
// if not sci then
61858: LD_VAR 0 1
61862: NOT
61863: IFFALSE 61867
// exit ;
61865: GO 61932
// result := 0 ;
61867: LD_ADDR_VAR 0 2
61871: PUSH
61872: LD_INT 0
61874: ST_TO_ADDR
// if GetTaskList ( sci ) then
61875: LD_VAR 0 1
61879: PPUSH
61880: CALL_OW 437
61884: IFFALSE 61932
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61886: LD_VAR 0 1
61890: PPUSH
61891: CALL_OW 437
61895: PUSH
61896: LD_INT 1
61898: ARRAY
61899: PUSH
61900: LD_INT 1
61902: ARRAY
61903: PUSH
61904: LD_STRING l
61906: EQUAL
61907: IFFALSE 61932
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61909: LD_ADDR_VAR 0 2
61913: PUSH
61914: LD_VAR 0 1
61918: PPUSH
61919: CALL_OW 437
61923: PUSH
61924: LD_INT 1
61926: ARRAY
61927: PUSH
61928: LD_INT 4
61930: ARRAY
61931: ST_TO_ADDR
// end ;
61932: LD_VAR 0 2
61936: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61937: LD_INT 0
61939: PPUSH
61940: PPUSH
61941: PPUSH
61942: PPUSH
// if not base_units then
61943: LD_VAR 0 1
61947: NOT
61948: IFFALSE 61952
// exit ;
61950: GO 62039
// result := false ;
61952: LD_ADDR_VAR 0 2
61956: PUSH
61957: LD_INT 0
61959: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61960: LD_ADDR_VAR 0 5
61964: PUSH
61965: LD_VAR 0 1
61969: PPUSH
61970: LD_INT 21
61972: PUSH
61973: LD_INT 3
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PPUSH
61980: CALL_OW 72
61984: ST_TO_ADDR
// if not tmp then
61985: LD_VAR 0 5
61989: NOT
61990: IFFALSE 61994
// exit ;
61992: GO 62039
// for i in tmp do
61994: LD_ADDR_VAR 0 3
61998: PUSH
61999: LD_VAR 0 5
62003: PUSH
62004: FOR_IN
62005: IFFALSE 62037
// begin result := EnemyInRange ( i , 22 ) ;
62007: LD_ADDR_VAR 0 2
62011: PUSH
62012: LD_VAR 0 3
62016: PPUSH
62017: LD_INT 22
62019: PPUSH
62020: CALL 59652 0 2
62024: ST_TO_ADDR
// if result then
62025: LD_VAR 0 2
62029: IFFALSE 62035
// exit ;
62031: POP
62032: POP
62033: GO 62039
// end ;
62035: GO 62004
62037: POP
62038: POP
// end ;
62039: LD_VAR 0 2
62043: RET
// export function FilterByTag ( units , tag ) ; begin
62044: LD_INT 0
62046: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62047: LD_ADDR_VAR 0 3
62051: PUSH
62052: LD_VAR 0 1
62056: PPUSH
62057: LD_INT 120
62059: PUSH
62060: LD_VAR 0 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PPUSH
62069: CALL_OW 72
62073: ST_TO_ADDR
// end ;
62074: LD_VAR 0 3
62078: RET
// export function IsDriver ( un ) ; begin
62079: LD_INT 0
62081: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62082: LD_ADDR_VAR 0 2
62086: PUSH
62087: LD_VAR 0 1
62091: PUSH
62092: LD_INT 55
62094: PUSH
62095: EMPTY
62096: LIST
62097: PPUSH
62098: CALL_OW 69
62102: IN
62103: ST_TO_ADDR
// end ;
62104: LD_VAR 0 2
62108: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62109: LD_INT 0
62111: PPUSH
62112: PPUSH
// list := [ ] ;
62113: LD_ADDR_VAR 0 5
62117: PUSH
62118: EMPTY
62119: ST_TO_ADDR
// case d of 0 :
62120: LD_VAR 0 3
62124: PUSH
62125: LD_INT 0
62127: DOUBLE
62128: EQUAL
62129: IFTRUE 62133
62131: GO 62266
62133: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62134: LD_ADDR_VAR 0 5
62138: PUSH
62139: LD_VAR 0 1
62143: PUSH
62144: LD_INT 4
62146: MINUS
62147: PUSH
62148: LD_VAR 0 2
62152: PUSH
62153: LD_INT 4
62155: MINUS
62156: PUSH
62157: LD_INT 2
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: LIST
62164: PUSH
62165: LD_VAR 0 1
62169: PUSH
62170: LD_INT 3
62172: MINUS
62173: PUSH
62174: LD_VAR 0 2
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: LIST
62186: PUSH
62187: LD_VAR 0 1
62191: PUSH
62192: LD_INT 4
62194: PLUS
62195: PUSH
62196: LD_VAR 0 2
62200: PUSH
62201: LD_INT 4
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: PUSH
62209: LD_VAR 0 1
62213: PUSH
62214: LD_INT 3
62216: PLUS
62217: PUSH
62218: LD_VAR 0 2
62222: PUSH
62223: LD_INT 3
62225: PLUS
62226: PUSH
62227: LD_INT 5
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: LIST
62234: PUSH
62235: LD_VAR 0 1
62239: PUSH
62240: LD_VAR 0 2
62244: PUSH
62245: LD_INT 4
62247: PLUS
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: LIST
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: ST_TO_ADDR
// end ; 1 :
62264: GO 62964
62266: LD_INT 1
62268: DOUBLE
62269: EQUAL
62270: IFTRUE 62274
62272: GO 62407
62274: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62275: LD_ADDR_VAR 0 5
62279: PUSH
62280: LD_VAR 0 1
62284: PUSH
62285: LD_VAR 0 2
62289: PUSH
62290: LD_INT 4
62292: MINUS
62293: PUSH
62294: LD_INT 3
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: PUSH
62302: LD_VAR 0 1
62306: PUSH
62307: LD_INT 3
62309: MINUS
62310: PUSH
62311: LD_VAR 0 2
62315: PUSH
62316: LD_INT 3
62318: MINUS
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: LIST
62327: PUSH
62328: LD_VAR 0 1
62332: PUSH
62333: LD_INT 4
62335: MINUS
62336: PUSH
62337: LD_VAR 0 2
62341: PUSH
62342: LD_INT 1
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: LIST
62349: PUSH
62350: LD_VAR 0 1
62354: PUSH
62355: LD_VAR 0 2
62359: PUSH
62360: LD_INT 3
62362: PLUS
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: LIST
62371: PUSH
62372: LD_VAR 0 1
62376: PUSH
62377: LD_INT 4
62379: PLUS
62380: PUSH
62381: LD_VAR 0 2
62385: PUSH
62386: LD_INT 4
62388: PLUS
62389: PUSH
62390: LD_INT 5
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: LIST
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: ST_TO_ADDR
// end ; 2 :
62405: GO 62964
62407: LD_INT 2
62409: DOUBLE
62410: EQUAL
62411: IFTRUE 62415
62413: GO 62544
62415: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62416: LD_ADDR_VAR 0 5
62420: PUSH
62421: LD_VAR 0 1
62425: PUSH
62426: LD_VAR 0 2
62430: PUSH
62431: LD_INT 3
62433: MINUS
62434: PUSH
62435: LD_INT 3
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: LIST
62442: PUSH
62443: LD_VAR 0 1
62447: PUSH
62448: LD_INT 4
62450: PLUS
62451: PUSH
62452: LD_VAR 0 2
62456: PUSH
62457: LD_INT 4
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: PUSH
62465: LD_VAR 0 1
62469: PUSH
62470: LD_VAR 0 2
62474: PUSH
62475: LD_INT 4
62477: PLUS
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: LIST
62486: PUSH
62487: LD_VAR 0 1
62491: PUSH
62492: LD_INT 3
62494: MINUS
62495: PUSH
62496: LD_VAR 0 2
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: LIST
62508: PUSH
62509: LD_VAR 0 1
62513: PUSH
62514: LD_INT 4
62516: MINUS
62517: PUSH
62518: LD_VAR 0 2
62522: PUSH
62523: LD_INT 4
62525: MINUS
62526: PUSH
62527: LD_INT 2
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: LIST
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: ST_TO_ADDR
// end ; 3 :
62542: GO 62964
62544: LD_INT 3
62546: DOUBLE
62547: EQUAL
62548: IFTRUE 62552
62550: GO 62685
62552: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62553: LD_ADDR_VAR 0 5
62557: PUSH
62558: LD_VAR 0 1
62562: PUSH
62563: LD_INT 3
62565: PLUS
62566: PUSH
62567: LD_VAR 0 2
62571: PUSH
62572: LD_INT 4
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: LIST
62579: PUSH
62580: LD_VAR 0 1
62584: PUSH
62585: LD_INT 4
62587: PLUS
62588: PUSH
62589: LD_VAR 0 2
62593: PUSH
62594: LD_INT 4
62596: PLUS
62597: PUSH
62598: LD_INT 5
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: LIST
62605: PUSH
62606: LD_VAR 0 1
62610: PUSH
62611: LD_INT 4
62613: MINUS
62614: PUSH
62615: LD_VAR 0 2
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: LIST
62627: PUSH
62628: LD_VAR 0 1
62632: PUSH
62633: LD_VAR 0 2
62637: PUSH
62638: LD_INT 4
62640: MINUS
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: LIST
62649: PUSH
62650: LD_VAR 0 1
62654: PUSH
62655: LD_INT 3
62657: MINUS
62658: PUSH
62659: LD_VAR 0 2
62663: PUSH
62664: LD_INT 3
62666: MINUS
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: LIST
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: ST_TO_ADDR
// end ; 4 :
62683: GO 62964
62685: LD_INT 4
62687: DOUBLE
62688: EQUAL
62689: IFTRUE 62693
62691: GO 62826
62693: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62694: LD_ADDR_VAR 0 5
62698: PUSH
62699: LD_VAR 0 1
62703: PUSH
62704: LD_VAR 0 2
62708: PUSH
62709: LD_INT 4
62711: PLUS
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: LIST
62720: PUSH
62721: LD_VAR 0 1
62725: PUSH
62726: LD_INT 3
62728: PLUS
62729: PUSH
62730: LD_VAR 0 2
62734: PUSH
62735: LD_INT 3
62737: PLUS
62738: PUSH
62739: LD_INT 5
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: PUSH
62747: LD_VAR 0 1
62751: PUSH
62752: LD_INT 4
62754: PLUS
62755: PUSH
62756: LD_VAR 0 2
62760: PUSH
62761: LD_INT 4
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: LIST
62768: PUSH
62769: LD_VAR 0 1
62773: PUSH
62774: LD_VAR 0 2
62778: PUSH
62779: LD_INT 3
62781: MINUS
62782: PUSH
62783: LD_INT 3
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: LIST
62790: PUSH
62791: LD_VAR 0 1
62795: PUSH
62796: LD_INT 4
62798: MINUS
62799: PUSH
62800: LD_VAR 0 2
62804: PUSH
62805: LD_INT 4
62807: MINUS
62808: PUSH
62809: LD_INT 2
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: ST_TO_ADDR
// end ; 5 :
62824: GO 62964
62826: LD_INT 5
62828: DOUBLE
62829: EQUAL
62830: IFTRUE 62834
62832: GO 62963
62834: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62835: LD_ADDR_VAR 0 5
62839: PUSH
62840: LD_VAR 0 1
62844: PUSH
62845: LD_INT 4
62847: MINUS
62848: PUSH
62849: LD_VAR 0 2
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: LIST
62861: PUSH
62862: LD_VAR 0 1
62866: PUSH
62867: LD_VAR 0 2
62871: PUSH
62872: LD_INT 4
62874: MINUS
62875: PUSH
62876: LD_INT 3
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: PUSH
62884: LD_VAR 0 1
62888: PUSH
62889: LD_INT 4
62891: PLUS
62892: PUSH
62893: LD_VAR 0 2
62897: PUSH
62898: LD_INT 4
62900: PLUS
62901: PUSH
62902: LD_INT 5
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: LIST
62909: PUSH
62910: LD_VAR 0 1
62914: PUSH
62915: LD_INT 3
62917: PLUS
62918: PUSH
62919: LD_VAR 0 2
62923: PUSH
62924: LD_INT 4
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: LIST
62931: PUSH
62932: LD_VAR 0 1
62936: PUSH
62937: LD_VAR 0 2
62941: PUSH
62942: LD_INT 3
62944: PLUS
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: ST_TO_ADDR
// end ; end ;
62961: GO 62964
62963: POP
// result := list ;
62964: LD_ADDR_VAR 0 4
62968: PUSH
62969: LD_VAR 0 5
62973: ST_TO_ADDR
// end ;
62974: LD_VAR 0 4
62978: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62979: LD_INT 0
62981: PPUSH
62982: PPUSH
62983: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62984: LD_VAR 0 1
62988: NOT
62989: PUSH
62990: LD_VAR 0 2
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: LD_INT 3
63003: PUSH
63004: LD_INT 4
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: IN
63013: NOT
63014: OR
63015: IFFALSE 63019
// exit ;
63017: GO 63111
// tmp := [ ] ;
63019: LD_ADDR_VAR 0 5
63023: PUSH
63024: EMPTY
63025: ST_TO_ADDR
// for i in units do
63026: LD_ADDR_VAR 0 4
63030: PUSH
63031: LD_VAR 0 1
63035: PUSH
63036: FOR_IN
63037: IFFALSE 63080
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63039: LD_ADDR_VAR 0 5
63043: PUSH
63044: LD_VAR 0 5
63048: PPUSH
63049: LD_VAR 0 5
63053: PUSH
63054: LD_INT 1
63056: PLUS
63057: PPUSH
63058: LD_VAR 0 4
63062: PPUSH
63063: LD_VAR 0 2
63067: PPUSH
63068: CALL_OW 259
63072: PPUSH
63073: CALL_OW 2
63077: ST_TO_ADDR
63078: GO 63036
63080: POP
63081: POP
// if not tmp then
63082: LD_VAR 0 5
63086: NOT
63087: IFFALSE 63091
// exit ;
63089: GO 63111
// result := SortListByListDesc ( units , tmp ) ;
63091: LD_ADDR_VAR 0 3
63095: PUSH
63096: LD_VAR 0 1
63100: PPUSH
63101: LD_VAR 0 5
63105: PPUSH
63106: CALL_OW 77
63110: ST_TO_ADDR
// end ;
63111: LD_VAR 0 3
63115: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63116: LD_INT 0
63118: PPUSH
63119: PPUSH
63120: PPUSH
// result := false ;
63121: LD_ADDR_VAR 0 3
63125: PUSH
63126: LD_INT 0
63128: ST_TO_ADDR
// x := GetX ( building ) ;
63129: LD_ADDR_VAR 0 4
63133: PUSH
63134: LD_VAR 0 2
63138: PPUSH
63139: CALL_OW 250
63143: ST_TO_ADDR
// y := GetY ( building ) ;
63144: LD_ADDR_VAR 0 5
63148: PUSH
63149: LD_VAR 0 2
63153: PPUSH
63154: CALL_OW 251
63158: ST_TO_ADDR
// if not building or not x or not y then
63159: LD_VAR 0 2
63163: NOT
63164: PUSH
63165: LD_VAR 0 4
63169: NOT
63170: OR
63171: PUSH
63172: LD_VAR 0 5
63176: NOT
63177: OR
63178: IFFALSE 63182
// exit ;
63180: GO 63274
// if GetTaskList ( unit ) then
63182: LD_VAR 0 1
63186: PPUSH
63187: CALL_OW 437
63191: IFFALSE 63274
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63193: LD_STRING e
63195: PUSH
63196: LD_VAR 0 1
63200: PPUSH
63201: CALL_OW 437
63205: PUSH
63206: LD_INT 1
63208: ARRAY
63209: PUSH
63210: LD_INT 1
63212: ARRAY
63213: EQUAL
63214: PUSH
63215: LD_VAR 0 4
63219: PUSH
63220: LD_VAR 0 1
63224: PPUSH
63225: CALL_OW 437
63229: PUSH
63230: LD_INT 1
63232: ARRAY
63233: PUSH
63234: LD_INT 2
63236: ARRAY
63237: EQUAL
63238: AND
63239: PUSH
63240: LD_VAR 0 5
63244: PUSH
63245: LD_VAR 0 1
63249: PPUSH
63250: CALL_OW 437
63254: PUSH
63255: LD_INT 1
63257: ARRAY
63258: PUSH
63259: LD_INT 3
63261: ARRAY
63262: EQUAL
63263: AND
63264: IFFALSE 63274
// result := true end ;
63266: LD_ADDR_VAR 0 3
63270: PUSH
63271: LD_INT 1
63273: ST_TO_ADDR
// end ;
63274: LD_VAR 0 3
63278: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63279: LD_INT 0
63281: PPUSH
// result := false ;
63282: LD_ADDR_VAR 0 4
63286: PUSH
63287: LD_INT 0
63289: ST_TO_ADDR
// if GetTaskList ( unit ) then
63290: LD_VAR 0 1
63294: PPUSH
63295: CALL_OW 437
63299: IFFALSE 63382
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63301: LD_STRING M
63303: PUSH
63304: LD_VAR 0 1
63308: PPUSH
63309: CALL_OW 437
63313: PUSH
63314: LD_INT 1
63316: ARRAY
63317: PUSH
63318: LD_INT 1
63320: ARRAY
63321: EQUAL
63322: PUSH
63323: LD_VAR 0 2
63327: PUSH
63328: LD_VAR 0 1
63332: PPUSH
63333: CALL_OW 437
63337: PUSH
63338: LD_INT 1
63340: ARRAY
63341: PUSH
63342: LD_INT 2
63344: ARRAY
63345: EQUAL
63346: AND
63347: PUSH
63348: LD_VAR 0 3
63352: PUSH
63353: LD_VAR 0 1
63357: PPUSH
63358: CALL_OW 437
63362: PUSH
63363: LD_INT 1
63365: ARRAY
63366: PUSH
63367: LD_INT 3
63369: ARRAY
63370: EQUAL
63371: AND
63372: IFFALSE 63382
// result := true ;
63374: LD_ADDR_VAR 0 4
63378: PUSH
63379: LD_INT 1
63381: ST_TO_ADDR
// end ; end ;
63382: LD_VAR 0 4
63386: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63387: LD_INT 0
63389: PPUSH
63390: PPUSH
63391: PPUSH
63392: PPUSH
// if not unit or not area then
63393: LD_VAR 0 1
63397: NOT
63398: PUSH
63399: LD_VAR 0 2
63403: NOT
63404: OR
63405: IFFALSE 63409
// exit ;
63407: GO 63573
// tmp := AreaToList ( area , i ) ;
63409: LD_ADDR_VAR 0 6
63413: PUSH
63414: LD_VAR 0 2
63418: PPUSH
63419: LD_VAR 0 5
63423: PPUSH
63424: CALL_OW 517
63428: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63429: LD_ADDR_VAR 0 5
63433: PUSH
63434: DOUBLE
63435: LD_INT 1
63437: DEC
63438: ST_TO_ADDR
63439: LD_VAR 0 6
63443: PUSH
63444: LD_INT 1
63446: ARRAY
63447: PUSH
63448: FOR_TO
63449: IFFALSE 63571
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63451: LD_ADDR_VAR 0 7
63455: PUSH
63456: LD_VAR 0 6
63460: PUSH
63461: LD_INT 1
63463: ARRAY
63464: PUSH
63465: LD_VAR 0 5
63469: ARRAY
63470: PUSH
63471: LD_VAR 0 6
63475: PUSH
63476: LD_INT 2
63478: ARRAY
63479: PUSH
63480: LD_VAR 0 5
63484: ARRAY
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63490: LD_VAR 0 7
63494: PUSH
63495: LD_INT 1
63497: ARRAY
63498: PPUSH
63499: LD_VAR 0 7
63503: PUSH
63504: LD_INT 2
63506: ARRAY
63507: PPUSH
63508: CALL_OW 428
63512: PUSH
63513: LD_INT 0
63515: EQUAL
63516: IFFALSE 63569
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63518: LD_VAR 0 1
63522: PPUSH
63523: LD_VAR 0 7
63527: PUSH
63528: LD_INT 1
63530: ARRAY
63531: PPUSH
63532: LD_VAR 0 7
63536: PUSH
63537: LD_INT 2
63539: ARRAY
63540: PPUSH
63541: LD_VAR 0 3
63545: PPUSH
63546: CALL_OW 48
// result := IsPlaced ( unit ) ;
63550: LD_ADDR_VAR 0 4
63554: PUSH
63555: LD_VAR 0 1
63559: PPUSH
63560: CALL_OW 305
63564: ST_TO_ADDR
// exit ;
63565: POP
63566: POP
63567: GO 63573
// end ; end ;
63569: GO 63448
63571: POP
63572: POP
// end ;
63573: LD_VAR 0 4
63577: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63578: LD_INT 0
63580: PPUSH
63581: PPUSH
63582: PPUSH
// if not side or side > 8 then
63583: LD_VAR 0 1
63587: NOT
63588: PUSH
63589: LD_VAR 0 1
63593: PUSH
63594: LD_INT 8
63596: GREATER
63597: OR
63598: IFFALSE 63602
// exit ;
63600: GO 63789
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63602: LD_ADDR_VAR 0 4
63606: PUSH
63607: LD_INT 22
63609: PUSH
63610: LD_VAR 0 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 21
63621: PUSH
63622: LD_INT 3
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PPUSH
63633: CALL_OW 69
63637: ST_TO_ADDR
// if not tmp then
63638: LD_VAR 0 4
63642: NOT
63643: IFFALSE 63647
// exit ;
63645: GO 63789
// enable_addtolog := true ;
63647: LD_ADDR_OWVAR 81
63651: PUSH
63652: LD_INT 1
63654: ST_TO_ADDR
// AddToLog ( [ ) ;
63655: LD_STRING [
63657: PPUSH
63658: CALL_OW 561
// for i in tmp do
63662: LD_ADDR_VAR 0 3
63666: PUSH
63667: LD_VAR 0 4
63671: PUSH
63672: FOR_IN
63673: IFFALSE 63780
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63675: LD_STRING [
63677: PUSH
63678: LD_VAR 0 3
63682: PPUSH
63683: CALL_OW 266
63687: STR
63688: PUSH
63689: LD_STRING , 
63691: STR
63692: PUSH
63693: LD_VAR 0 3
63697: PPUSH
63698: CALL_OW 250
63702: STR
63703: PUSH
63704: LD_STRING , 
63706: STR
63707: PUSH
63708: LD_VAR 0 3
63712: PPUSH
63713: CALL_OW 251
63717: STR
63718: PUSH
63719: LD_STRING , 
63721: STR
63722: PUSH
63723: LD_VAR 0 3
63727: PPUSH
63728: CALL_OW 254
63732: STR
63733: PUSH
63734: LD_STRING , 
63736: STR
63737: PUSH
63738: LD_VAR 0 3
63742: PPUSH
63743: LD_INT 1
63745: PPUSH
63746: CALL_OW 268
63750: STR
63751: PUSH
63752: LD_STRING , 
63754: STR
63755: PUSH
63756: LD_VAR 0 3
63760: PPUSH
63761: LD_INT 2
63763: PPUSH
63764: CALL_OW 268
63768: STR
63769: PUSH
63770: LD_STRING ],
63772: STR
63773: PPUSH
63774: CALL_OW 561
// end ;
63778: GO 63672
63780: POP
63781: POP
// AddToLog ( ]; ) ;
63782: LD_STRING ];
63784: PPUSH
63785: CALL_OW 561
// end ;
63789: LD_VAR 0 2
63793: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63794: LD_INT 0
63796: PPUSH
63797: PPUSH
63798: PPUSH
63799: PPUSH
63800: PPUSH
// if not area or not rate or not max then
63801: LD_VAR 0 1
63805: NOT
63806: PUSH
63807: LD_VAR 0 2
63811: NOT
63812: OR
63813: PUSH
63814: LD_VAR 0 4
63818: NOT
63819: OR
63820: IFFALSE 63824
// exit ;
63822: GO 64013
// while 1 do
63824: LD_INT 1
63826: IFFALSE 64013
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63828: LD_ADDR_VAR 0 9
63832: PUSH
63833: LD_VAR 0 1
63837: PPUSH
63838: LD_INT 1
63840: PPUSH
63841: CALL_OW 287
63845: PUSH
63846: LD_INT 10
63848: MUL
63849: ST_TO_ADDR
// r := rate / 10 ;
63850: LD_ADDR_VAR 0 7
63854: PUSH
63855: LD_VAR 0 2
63859: PUSH
63860: LD_INT 10
63862: DIVREAL
63863: ST_TO_ADDR
// time := 1 1$00 ;
63864: LD_ADDR_VAR 0 8
63868: PUSH
63869: LD_INT 2100
63871: ST_TO_ADDR
// if amount < min then
63872: LD_VAR 0 9
63876: PUSH
63877: LD_VAR 0 3
63881: LESS
63882: IFFALSE 63900
// r := r * 2 else
63884: LD_ADDR_VAR 0 7
63888: PUSH
63889: LD_VAR 0 7
63893: PUSH
63894: LD_INT 2
63896: MUL
63897: ST_TO_ADDR
63898: GO 63926
// if amount > max then
63900: LD_VAR 0 9
63904: PUSH
63905: LD_VAR 0 4
63909: GREATER
63910: IFFALSE 63926
// r := r / 2 ;
63912: LD_ADDR_VAR 0 7
63916: PUSH
63917: LD_VAR 0 7
63921: PUSH
63922: LD_INT 2
63924: DIVREAL
63925: ST_TO_ADDR
// time := time / r ;
63926: LD_ADDR_VAR 0 8
63930: PUSH
63931: LD_VAR 0 8
63935: PUSH
63936: LD_VAR 0 7
63940: DIVREAL
63941: ST_TO_ADDR
// if time < 0 then
63942: LD_VAR 0 8
63946: PUSH
63947: LD_INT 0
63949: LESS
63950: IFFALSE 63967
// time := time * - 1 ;
63952: LD_ADDR_VAR 0 8
63956: PUSH
63957: LD_VAR 0 8
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: MUL
63966: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63967: LD_VAR 0 8
63971: PUSH
63972: LD_INT 35
63974: PPUSH
63975: LD_INT 875
63977: PPUSH
63978: CALL_OW 12
63982: PLUS
63983: PPUSH
63984: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63988: LD_INT 1
63990: PPUSH
63991: LD_INT 5
63993: PPUSH
63994: CALL_OW 12
63998: PPUSH
63999: LD_VAR 0 1
64003: PPUSH
64004: LD_INT 1
64006: PPUSH
64007: CALL_OW 55
// end ;
64011: GO 63824
// end ;
64013: LD_VAR 0 5
64017: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64018: LD_INT 0
64020: PPUSH
64021: PPUSH
64022: PPUSH
64023: PPUSH
64024: PPUSH
64025: PPUSH
64026: PPUSH
64027: PPUSH
// if not turrets or not factories then
64028: LD_VAR 0 1
64032: NOT
64033: PUSH
64034: LD_VAR 0 2
64038: NOT
64039: OR
64040: IFFALSE 64044
// exit ;
64042: GO 64351
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64044: LD_ADDR_VAR 0 10
64048: PUSH
64049: LD_INT 5
64051: PUSH
64052: LD_INT 6
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 2
64061: PUSH
64062: LD_INT 4
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 3
64071: PUSH
64072: LD_INT 5
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 24
64086: PUSH
64087: LD_INT 25
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 23
64096: PUSH
64097: LD_INT 27
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 42
64110: PUSH
64111: LD_INT 43
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 44
64120: PUSH
64121: LD_INT 46
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 45
64130: PUSH
64131: LD_INT 47
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: LIST
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: LIST
64147: ST_TO_ADDR
// result := [ ] ;
64148: LD_ADDR_VAR 0 3
64152: PUSH
64153: EMPTY
64154: ST_TO_ADDR
// for i in turrets do
64155: LD_ADDR_VAR 0 4
64159: PUSH
64160: LD_VAR 0 1
64164: PUSH
64165: FOR_IN
64166: IFFALSE 64349
// begin nat := GetNation ( i ) ;
64168: LD_ADDR_VAR 0 7
64172: PUSH
64173: LD_VAR 0 4
64177: PPUSH
64178: CALL_OW 248
64182: ST_TO_ADDR
// weapon := 0 ;
64183: LD_ADDR_VAR 0 8
64187: PUSH
64188: LD_INT 0
64190: ST_TO_ADDR
// if not nat then
64191: LD_VAR 0 7
64195: NOT
64196: IFFALSE 64200
// continue ;
64198: GO 64165
// for j in list [ nat ] do
64200: LD_ADDR_VAR 0 5
64204: PUSH
64205: LD_VAR 0 10
64209: PUSH
64210: LD_VAR 0 7
64214: ARRAY
64215: PUSH
64216: FOR_IN
64217: IFFALSE 64258
// if GetBWeapon ( i ) = j [ 1 ] then
64219: LD_VAR 0 4
64223: PPUSH
64224: CALL_OW 269
64228: PUSH
64229: LD_VAR 0 5
64233: PUSH
64234: LD_INT 1
64236: ARRAY
64237: EQUAL
64238: IFFALSE 64256
// begin weapon := j [ 2 ] ;
64240: LD_ADDR_VAR 0 8
64244: PUSH
64245: LD_VAR 0 5
64249: PUSH
64250: LD_INT 2
64252: ARRAY
64253: ST_TO_ADDR
// break ;
64254: GO 64258
// end ;
64256: GO 64216
64258: POP
64259: POP
// if not weapon then
64260: LD_VAR 0 8
64264: NOT
64265: IFFALSE 64269
// continue ;
64267: GO 64165
// for k in factories do
64269: LD_ADDR_VAR 0 6
64273: PUSH
64274: LD_VAR 0 2
64278: PUSH
64279: FOR_IN
64280: IFFALSE 64345
// begin weapons := AvailableWeaponList ( k ) ;
64282: LD_ADDR_VAR 0 9
64286: PUSH
64287: LD_VAR 0 6
64291: PPUSH
64292: CALL_OW 478
64296: ST_TO_ADDR
// if not weapons then
64297: LD_VAR 0 9
64301: NOT
64302: IFFALSE 64306
// continue ;
64304: GO 64279
// if weapon in weapons then
64306: LD_VAR 0 8
64310: PUSH
64311: LD_VAR 0 9
64315: IN
64316: IFFALSE 64343
// begin result := [ i , weapon ] ;
64318: LD_ADDR_VAR 0 3
64322: PUSH
64323: LD_VAR 0 4
64327: PUSH
64328: LD_VAR 0 8
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: ST_TO_ADDR
// exit ;
64337: POP
64338: POP
64339: POP
64340: POP
64341: GO 64351
// end ; end ;
64343: GO 64279
64345: POP
64346: POP
// end ;
64347: GO 64165
64349: POP
64350: POP
// end ;
64351: LD_VAR 0 3
64355: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64356: LD_INT 0
64358: PPUSH
// if not side or side > 8 then
64359: LD_VAR 0 3
64363: NOT
64364: PUSH
64365: LD_VAR 0 3
64369: PUSH
64370: LD_INT 8
64372: GREATER
64373: OR
64374: IFFALSE 64378
// exit ;
64376: GO 64437
// if not range then
64378: LD_VAR 0 4
64382: NOT
64383: IFFALSE 64394
// range := - 12 ;
64385: LD_ADDR_VAR 0 4
64389: PUSH
64390: LD_INT 12
64392: NEG
64393: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64394: LD_VAR 0 1
64398: PPUSH
64399: LD_VAR 0 2
64403: PPUSH
64404: LD_VAR 0 3
64408: PPUSH
64409: LD_VAR 0 4
64413: PPUSH
64414: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64418: LD_VAR 0 1
64422: PPUSH
64423: LD_VAR 0 2
64427: PPUSH
64428: LD_VAR 0 3
64432: PPUSH
64433: CALL_OW 331
// end ;
64437: LD_VAR 0 5
64441: RET
// export function Video ( mode ) ; begin
64442: LD_INT 0
64444: PPUSH
// ingame_video = mode ;
64445: LD_ADDR_OWVAR 52
64449: PUSH
64450: LD_VAR 0 1
64454: ST_TO_ADDR
// interface_hidden = mode ;
64455: LD_ADDR_OWVAR 54
64459: PUSH
64460: LD_VAR 0 1
64464: ST_TO_ADDR
// end ;
64465: LD_VAR 0 2
64469: RET
// export function Join ( array , element ) ; begin
64470: LD_INT 0
64472: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64473: LD_ADDR_VAR 0 3
64477: PUSH
64478: LD_VAR 0 1
64482: PPUSH
64483: LD_VAR 0 1
64487: PUSH
64488: LD_INT 1
64490: PLUS
64491: PPUSH
64492: LD_VAR 0 2
64496: PPUSH
64497: CALL_OW 1
64501: ST_TO_ADDR
// end ;
64502: LD_VAR 0 3
64506: RET
// export function JoinUnion ( array , element ) ; begin
64507: LD_INT 0
64509: PPUSH
// result := array union element ;
64510: LD_ADDR_VAR 0 3
64514: PUSH
64515: LD_VAR 0 1
64519: PUSH
64520: LD_VAR 0 2
64524: UNION
64525: ST_TO_ADDR
// end ;
64526: LD_VAR 0 3
64530: RET
// export function GetBehemoths ( side ) ; begin
64531: LD_INT 0
64533: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64534: LD_ADDR_VAR 0 2
64538: PUSH
64539: LD_INT 22
64541: PUSH
64542: LD_VAR 0 1
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 31
64553: PUSH
64554: LD_INT 25
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PPUSH
64565: CALL_OW 69
64569: ST_TO_ADDR
// end ;
64570: LD_VAR 0 2
64574: RET
// export function Shuffle ( array ) ; var i , index ; begin
64575: LD_INT 0
64577: PPUSH
64578: PPUSH
64579: PPUSH
// result := [ ] ;
64580: LD_ADDR_VAR 0 2
64584: PUSH
64585: EMPTY
64586: ST_TO_ADDR
// if not array then
64587: LD_VAR 0 1
64591: NOT
64592: IFFALSE 64596
// exit ;
64594: GO 64695
// Randomize ;
64596: CALL_OW 10
// for i = array downto 1 do
64600: LD_ADDR_VAR 0 3
64604: PUSH
64605: DOUBLE
64606: LD_VAR 0 1
64610: INC
64611: ST_TO_ADDR
64612: LD_INT 1
64614: PUSH
64615: FOR_DOWNTO
64616: IFFALSE 64693
// begin index := rand ( 1 , array ) ;
64618: LD_ADDR_VAR 0 4
64622: PUSH
64623: LD_INT 1
64625: PPUSH
64626: LD_VAR 0 1
64630: PPUSH
64631: CALL_OW 12
64635: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64636: LD_ADDR_VAR 0 2
64640: PUSH
64641: LD_VAR 0 2
64645: PPUSH
64646: LD_VAR 0 2
64650: PUSH
64651: LD_INT 1
64653: PLUS
64654: PPUSH
64655: LD_VAR 0 1
64659: PUSH
64660: LD_VAR 0 4
64664: ARRAY
64665: PPUSH
64666: CALL_OW 2
64670: ST_TO_ADDR
// array := Delete ( array , index ) ;
64671: LD_ADDR_VAR 0 1
64675: PUSH
64676: LD_VAR 0 1
64680: PPUSH
64681: LD_VAR 0 4
64685: PPUSH
64686: CALL_OW 3
64690: ST_TO_ADDR
// end ;
64691: GO 64615
64693: POP
64694: POP
// end ;
64695: LD_VAR 0 2
64699: RET
// export function GetBaseMaterials ( base ) ; begin
64700: LD_INT 0
64702: PPUSH
// result := [ 0 , 0 , 0 ] ;
64703: LD_ADDR_VAR 0 2
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 0
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: ST_TO_ADDR
// if not base then
64722: LD_VAR 0 1
64726: NOT
64727: IFFALSE 64731
// exit ;
64729: GO 64780
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64731: LD_ADDR_VAR 0 2
64735: PUSH
64736: LD_VAR 0 1
64740: PPUSH
64741: LD_INT 1
64743: PPUSH
64744: CALL_OW 275
64748: PUSH
64749: LD_VAR 0 1
64753: PPUSH
64754: LD_INT 2
64756: PPUSH
64757: CALL_OW 275
64761: PUSH
64762: LD_VAR 0 1
64766: PPUSH
64767: LD_INT 3
64769: PPUSH
64770: CALL_OW 275
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: LIST
64779: ST_TO_ADDR
// end ;
64780: LD_VAR 0 2
64784: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64785: LD_INT 0
64787: PPUSH
64788: PPUSH
// result := array ;
64789: LD_ADDR_VAR 0 3
64793: PUSH
64794: LD_VAR 0 1
64798: ST_TO_ADDR
// if size >= result then
64799: LD_VAR 0 2
64803: PUSH
64804: LD_VAR 0 3
64808: GREATEREQUAL
64809: IFFALSE 64813
// exit ;
64811: GO 64863
// if size then
64813: LD_VAR 0 2
64817: IFFALSE 64863
// for i := array downto size do
64819: LD_ADDR_VAR 0 4
64823: PUSH
64824: DOUBLE
64825: LD_VAR 0 1
64829: INC
64830: ST_TO_ADDR
64831: LD_VAR 0 2
64835: PUSH
64836: FOR_DOWNTO
64837: IFFALSE 64861
// result := Delete ( result , result ) ;
64839: LD_ADDR_VAR 0 3
64843: PUSH
64844: LD_VAR 0 3
64848: PPUSH
64849: LD_VAR 0 3
64853: PPUSH
64854: CALL_OW 3
64858: ST_TO_ADDR
64859: GO 64836
64861: POP
64862: POP
// end ;
64863: LD_VAR 0 3
64867: RET
// export function ComExit ( unit ) ; var tmp ; begin
64868: LD_INT 0
64870: PPUSH
64871: PPUSH
// if not IsInUnit ( unit ) then
64872: LD_VAR 0 1
64876: PPUSH
64877: CALL_OW 310
64881: NOT
64882: IFFALSE 64886
// exit ;
64884: GO 64946
// tmp := IsInUnit ( unit ) ;
64886: LD_ADDR_VAR 0 3
64890: PUSH
64891: LD_VAR 0 1
64895: PPUSH
64896: CALL_OW 310
64900: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64901: LD_VAR 0 3
64905: PPUSH
64906: CALL_OW 247
64910: PUSH
64911: LD_INT 2
64913: EQUAL
64914: IFFALSE 64927
// ComExitVehicle ( unit ) else
64916: LD_VAR 0 1
64920: PPUSH
64921: CALL_OW 121
64925: GO 64936
// ComExitBuilding ( unit ) ;
64927: LD_VAR 0 1
64931: PPUSH
64932: CALL_OW 122
// result := tmp ;
64936: LD_ADDR_VAR 0 2
64940: PUSH
64941: LD_VAR 0 3
64945: ST_TO_ADDR
// end ;
64946: LD_VAR 0 2
64950: RET
// export function ComExitAll ( units ) ; var i ; begin
64951: LD_INT 0
64953: PPUSH
64954: PPUSH
// if not units then
64955: LD_VAR 0 1
64959: NOT
64960: IFFALSE 64964
// exit ;
64962: GO 64990
// for i in units do
64964: LD_ADDR_VAR 0 3
64968: PUSH
64969: LD_VAR 0 1
64973: PUSH
64974: FOR_IN
64975: IFFALSE 64988
// ComExit ( i ) ;
64977: LD_VAR 0 3
64981: PPUSH
64982: CALL 64868 0 1
64986: GO 64974
64988: POP
64989: POP
// end ;
64990: LD_VAR 0 2
64994: RET
// export function ResetHc ; begin
64995: LD_INT 0
64997: PPUSH
// InitHc ;
64998: CALL_OW 19
// hc_importance := 0 ;
65002: LD_ADDR_OWVAR 32
65006: PUSH
65007: LD_INT 0
65009: ST_TO_ADDR
// end ;
65010: LD_VAR 0 1
65014: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65015: LD_INT 0
65017: PPUSH
65018: PPUSH
65019: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65020: LD_ADDR_VAR 0 6
65024: PUSH
65025: LD_VAR 0 1
65029: PUSH
65030: LD_VAR 0 3
65034: PLUS
65035: PUSH
65036: LD_INT 2
65038: DIV
65039: ST_TO_ADDR
// if _x < 0 then
65040: LD_VAR 0 6
65044: PUSH
65045: LD_INT 0
65047: LESS
65048: IFFALSE 65065
// _x := _x * - 1 ;
65050: LD_ADDR_VAR 0 6
65054: PUSH
65055: LD_VAR 0 6
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: MUL
65064: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65065: LD_ADDR_VAR 0 7
65069: PUSH
65070: LD_VAR 0 2
65074: PUSH
65075: LD_VAR 0 4
65079: PLUS
65080: PUSH
65081: LD_INT 2
65083: DIV
65084: ST_TO_ADDR
// if _y < 0 then
65085: LD_VAR 0 7
65089: PUSH
65090: LD_INT 0
65092: LESS
65093: IFFALSE 65110
// _y := _y * - 1 ;
65095: LD_ADDR_VAR 0 7
65099: PUSH
65100: LD_VAR 0 7
65104: PUSH
65105: LD_INT 1
65107: NEG
65108: MUL
65109: ST_TO_ADDR
// result := [ _x , _y ] ;
65110: LD_ADDR_VAR 0 5
65114: PUSH
65115: LD_VAR 0 6
65119: PUSH
65120: LD_VAR 0 7
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: ST_TO_ADDR
// end ;
65129: LD_VAR 0 5
65133: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65134: LD_INT 0
65136: PPUSH
65137: PPUSH
65138: PPUSH
65139: PPUSH
// task := GetTaskList ( unit ) ;
65140: LD_ADDR_VAR 0 7
65144: PUSH
65145: LD_VAR 0 1
65149: PPUSH
65150: CALL_OW 437
65154: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65155: LD_VAR 0 7
65159: NOT
65160: PUSH
65161: LD_VAR 0 1
65165: PPUSH
65166: LD_VAR 0 2
65170: PPUSH
65171: CALL_OW 308
65175: NOT
65176: AND
65177: IFFALSE 65181
// exit ;
65179: GO 65299
// if IsInArea ( unit , area ) then
65181: LD_VAR 0 1
65185: PPUSH
65186: LD_VAR 0 2
65190: PPUSH
65191: CALL_OW 308
65195: IFFALSE 65213
// begin ComMoveToArea ( unit , goAway ) ;
65197: LD_VAR 0 1
65201: PPUSH
65202: LD_VAR 0 3
65206: PPUSH
65207: CALL_OW 113
// exit ;
65211: GO 65299
// end ; if task [ 1 ] [ 1 ] <> M then
65213: LD_VAR 0 7
65217: PUSH
65218: LD_INT 1
65220: ARRAY
65221: PUSH
65222: LD_INT 1
65224: ARRAY
65225: PUSH
65226: LD_STRING M
65228: NONEQUAL
65229: IFFALSE 65233
// exit ;
65231: GO 65299
// x := task [ 1 ] [ 2 ] ;
65233: LD_ADDR_VAR 0 5
65237: PUSH
65238: LD_VAR 0 7
65242: PUSH
65243: LD_INT 1
65245: ARRAY
65246: PUSH
65247: LD_INT 2
65249: ARRAY
65250: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65251: LD_ADDR_VAR 0 6
65255: PUSH
65256: LD_VAR 0 7
65260: PUSH
65261: LD_INT 1
65263: ARRAY
65264: PUSH
65265: LD_INT 3
65267: ARRAY
65268: ST_TO_ADDR
// if InArea ( x , y , area ) then
65269: LD_VAR 0 5
65273: PPUSH
65274: LD_VAR 0 6
65278: PPUSH
65279: LD_VAR 0 2
65283: PPUSH
65284: CALL_OW 309
65288: IFFALSE 65299
// ComStop ( unit ) ;
65290: LD_VAR 0 1
65294: PPUSH
65295: CALL_OW 141
// end ;
65299: LD_VAR 0 4
65303: RET
// export function Abs ( value ) ; begin
65304: LD_INT 0
65306: PPUSH
// result := value ;
65307: LD_ADDR_VAR 0 2
65311: PUSH
65312: LD_VAR 0 1
65316: ST_TO_ADDR
// if value < 0 then
65317: LD_VAR 0 1
65321: PUSH
65322: LD_INT 0
65324: LESS
65325: IFFALSE 65342
// result := value * - 1 ;
65327: LD_ADDR_VAR 0 2
65331: PUSH
65332: LD_VAR 0 1
65336: PUSH
65337: LD_INT 1
65339: NEG
65340: MUL
65341: ST_TO_ADDR
// end ;
65342: LD_VAR 0 2
65346: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65347: LD_INT 0
65349: PPUSH
65350: PPUSH
65351: PPUSH
65352: PPUSH
65353: PPUSH
65354: PPUSH
65355: PPUSH
65356: PPUSH
// if not unit or not building then
65357: LD_VAR 0 1
65361: NOT
65362: PUSH
65363: LD_VAR 0 2
65367: NOT
65368: OR
65369: IFFALSE 65373
// exit ;
65371: GO 65599
// x := GetX ( building ) ;
65373: LD_ADDR_VAR 0 4
65377: PUSH
65378: LD_VAR 0 2
65382: PPUSH
65383: CALL_OW 250
65387: ST_TO_ADDR
// y := GetY ( building ) ;
65388: LD_ADDR_VAR 0 6
65392: PUSH
65393: LD_VAR 0 2
65397: PPUSH
65398: CALL_OW 251
65402: ST_TO_ADDR
// d := GetDir ( building ) ;
65403: LD_ADDR_VAR 0 8
65407: PUSH
65408: LD_VAR 0 2
65412: PPUSH
65413: CALL_OW 254
65417: ST_TO_ADDR
// r := 4 ;
65418: LD_ADDR_VAR 0 9
65422: PUSH
65423: LD_INT 4
65425: ST_TO_ADDR
// for i := 1 to 5 do
65426: LD_ADDR_VAR 0 10
65430: PUSH
65431: DOUBLE
65432: LD_INT 1
65434: DEC
65435: ST_TO_ADDR
65436: LD_INT 5
65438: PUSH
65439: FOR_TO
65440: IFFALSE 65597
// begin _x := ShiftX ( x , d , r + i ) ;
65442: LD_ADDR_VAR 0 5
65446: PUSH
65447: LD_VAR 0 4
65451: PPUSH
65452: LD_VAR 0 8
65456: PPUSH
65457: LD_VAR 0 9
65461: PUSH
65462: LD_VAR 0 10
65466: PLUS
65467: PPUSH
65468: CALL_OW 272
65472: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65473: LD_ADDR_VAR 0 7
65477: PUSH
65478: LD_VAR 0 6
65482: PPUSH
65483: LD_VAR 0 8
65487: PPUSH
65488: LD_VAR 0 9
65492: PUSH
65493: LD_VAR 0 10
65497: PLUS
65498: PPUSH
65499: CALL_OW 273
65503: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65504: LD_VAR 0 5
65508: PPUSH
65509: LD_VAR 0 7
65513: PPUSH
65514: CALL_OW 488
65518: PUSH
65519: LD_VAR 0 5
65523: PPUSH
65524: LD_VAR 0 7
65528: PPUSH
65529: CALL_OW 428
65533: PPUSH
65534: CALL_OW 247
65538: PUSH
65539: LD_INT 3
65541: PUSH
65542: LD_INT 2
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: IN
65549: NOT
65550: AND
65551: IFFALSE 65595
// begin ComMoveXY ( unit , _x , _y ) ;
65553: LD_VAR 0 1
65557: PPUSH
65558: LD_VAR 0 5
65562: PPUSH
65563: LD_VAR 0 7
65567: PPUSH
65568: CALL_OW 111
// result := [ _x , _y ] ;
65572: LD_ADDR_VAR 0 3
65576: PUSH
65577: LD_VAR 0 5
65581: PUSH
65582: LD_VAR 0 7
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: ST_TO_ADDR
// exit ;
65591: POP
65592: POP
65593: GO 65599
// end ; end ;
65595: GO 65439
65597: POP
65598: POP
// end ;
65599: LD_VAR 0 3
65603: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65604: LD_INT 0
65606: PPUSH
65607: PPUSH
65608: PPUSH
// result := 0 ;
65609: LD_ADDR_VAR 0 3
65613: PUSH
65614: LD_INT 0
65616: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65617: LD_VAR 0 1
65621: PUSH
65622: LD_INT 0
65624: LESS
65625: PUSH
65626: LD_VAR 0 1
65630: PUSH
65631: LD_INT 8
65633: GREATER
65634: OR
65635: PUSH
65636: LD_VAR 0 2
65640: PUSH
65641: LD_INT 0
65643: LESS
65644: OR
65645: PUSH
65646: LD_VAR 0 2
65650: PUSH
65651: LD_INT 8
65653: GREATER
65654: OR
65655: IFFALSE 65659
// exit ;
65657: GO 65734
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65659: LD_ADDR_VAR 0 4
65663: PUSH
65664: LD_INT 22
65666: PUSH
65667: LD_VAR 0 2
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PPUSH
65676: CALL_OW 69
65680: PUSH
65681: FOR_IN
65682: IFFALSE 65732
// begin un := UnitShoot ( i ) ;
65684: LD_ADDR_VAR 0 5
65688: PUSH
65689: LD_VAR 0 4
65693: PPUSH
65694: CALL_OW 504
65698: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65699: LD_VAR 0 5
65703: PPUSH
65704: CALL_OW 255
65708: PUSH
65709: LD_VAR 0 1
65713: EQUAL
65714: IFFALSE 65730
// begin result := un ;
65716: LD_ADDR_VAR 0 3
65720: PUSH
65721: LD_VAR 0 5
65725: ST_TO_ADDR
// exit ;
65726: POP
65727: POP
65728: GO 65734
// end ; end ;
65730: GO 65681
65732: POP
65733: POP
// end ;
65734: LD_VAR 0 3
65738: RET
// export function GetCargoBay ( units ) ; begin
65739: LD_INT 0
65741: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65742: LD_ADDR_VAR 0 2
65746: PUSH
65747: LD_VAR 0 1
65751: PPUSH
65752: LD_INT 2
65754: PUSH
65755: LD_INT 34
65757: PUSH
65758: LD_INT 12
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 34
65767: PUSH
65768: LD_INT 51
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 34
65777: PUSH
65778: LD_INT 32
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 34
65787: PUSH
65788: LD_INT 89
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: PPUSH
65802: CALL_OW 72
65806: ST_TO_ADDR
// end ;
65807: LD_VAR 0 2
65811: RET
// export function Negate ( value ) ; begin
65812: LD_INT 0
65814: PPUSH
// result := not value ;
65815: LD_ADDR_VAR 0 2
65819: PUSH
65820: LD_VAR 0 1
65824: NOT
65825: ST_TO_ADDR
// end ;
65826: LD_VAR 0 2
65830: RET
// export function Inc ( value ) ; begin
65831: LD_INT 0
65833: PPUSH
// result := value + 1 ;
65834: LD_ADDR_VAR 0 2
65838: PUSH
65839: LD_VAR 0 1
65843: PUSH
65844: LD_INT 1
65846: PLUS
65847: ST_TO_ADDR
// end ;
65848: LD_VAR 0 2
65852: RET
// export function Dec ( value ) ; begin
65853: LD_INT 0
65855: PPUSH
// result := value - 1 ;
65856: LD_ADDR_VAR 0 2
65860: PUSH
65861: LD_VAR 0 1
65865: PUSH
65866: LD_INT 1
65868: MINUS
65869: ST_TO_ADDR
// end ;
65870: LD_VAR 0 2
65874: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65875: LD_INT 0
65877: PPUSH
65878: PPUSH
65879: PPUSH
65880: PPUSH
65881: PPUSH
65882: PPUSH
65883: PPUSH
65884: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65885: LD_VAR 0 1
65889: PPUSH
65890: LD_VAR 0 2
65894: PPUSH
65895: CALL_OW 488
65899: NOT
65900: PUSH
65901: LD_VAR 0 3
65905: PPUSH
65906: LD_VAR 0 4
65910: PPUSH
65911: CALL_OW 488
65915: NOT
65916: OR
65917: IFFALSE 65930
// begin result := - 1 ;
65919: LD_ADDR_VAR 0 5
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: ST_TO_ADDR
// exit ;
65928: GO 66165
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65930: LD_ADDR_VAR 0 12
65934: PUSH
65935: LD_VAR 0 1
65939: PPUSH
65940: LD_VAR 0 2
65944: PPUSH
65945: LD_VAR 0 3
65949: PPUSH
65950: LD_VAR 0 4
65954: PPUSH
65955: CALL 65015 0 4
65959: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65960: LD_ADDR_VAR 0 11
65964: PUSH
65965: LD_VAR 0 1
65969: PPUSH
65970: LD_VAR 0 2
65974: PPUSH
65975: LD_VAR 0 12
65979: PUSH
65980: LD_INT 1
65982: ARRAY
65983: PPUSH
65984: LD_VAR 0 12
65988: PUSH
65989: LD_INT 2
65991: ARRAY
65992: PPUSH
65993: CALL_OW 298
65997: ST_TO_ADDR
// distance := 9999 ;
65998: LD_ADDR_VAR 0 10
66002: PUSH
66003: LD_INT 9999
66005: ST_TO_ADDR
// for i := 0 to 5 do
66006: LD_ADDR_VAR 0 6
66010: PUSH
66011: DOUBLE
66012: LD_INT 0
66014: DEC
66015: ST_TO_ADDR
66016: LD_INT 5
66018: PUSH
66019: FOR_TO
66020: IFFALSE 66163
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66022: LD_ADDR_VAR 0 7
66026: PUSH
66027: LD_VAR 0 1
66031: PPUSH
66032: LD_VAR 0 6
66036: PPUSH
66037: LD_VAR 0 11
66041: PPUSH
66042: CALL_OW 272
66046: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66047: LD_ADDR_VAR 0 8
66051: PUSH
66052: LD_VAR 0 2
66056: PPUSH
66057: LD_VAR 0 6
66061: PPUSH
66062: LD_VAR 0 11
66066: PPUSH
66067: CALL_OW 273
66071: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66072: LD_VAR 0 7
66076: PPUSH
66077: LD_VAR 0 8
66081: PPUSH
66082: CALL_OW 488
66086: NOT
66087: IFFALSE 66091
// continue ;
66089: GO 66019
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66091: LD_ADDR_VAR 0 9
66095: PUSH
66096: LD_VAR 0 12
66100: PUSH
66101: LD_INT 1
66103: ARRAY
66104: PPUSH
66105: LD_VAR 0 12
66109: PUSH
66110: LD_INT 2
66112: ARRAY
66113: PPUSH
66114: LD_VAR 0 7
66118: PPUSH
66119: LD_VAR 0 8
66123: PPUSH
66124: CALL_OW 298
66128: ST_TO_ADDR
// if tmp < distance then
66129: LD_VAR 0 9
66133: PUSH
66134: LD_VAR 0 10
66138: LESS
66139: IFFALSE 66161
// begin result := i ;
66141: LD_ADDR_VAR 0 5
66145: PUSH
66146: LD_VAR 0 6
66150: ST_TO_ADDR
// distance := tmp ;
66151: LD_ADDR_VAR 0 10
66155: PUSH
66156: LD_VAR 0 9
66160: ST_TO_ADDR
// end ; end ;
66161: GO 66019
66163: POP
66164: POP
// end ;
66165: LD_VAR 0 5
66169: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66170: LD_INT 0
66172: PPUSH
66173: PPUSH
// if not driver or not IsInUnit ( driver ) then
66174: LD_VAR 0 1
66178: NOT
66179: PUSH
66180: LD_VAR 0 1
66184: PPUSH
66185: CALL_OW 310
66189: NOT
66190: OR
66191: IFFALSE 66195
// exit ;
66193: GO 66285
// vehicle := IsInUnit ( driver ) ;
66195: LD_ADDR_VAR 0 3
66199: PUSH
66200: LD_VAR 0 1
66204: PPUSH
66205: CALL_OW 310
66209: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66210: LD_VAR 0 1
66214: PPUSH
66215: LD_STRING \
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: PUSH
66245: LD_STRING E
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: LD_VAR 0 3
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PPUSH
66281: CALL_OW 446
// end ;
66285: LD_VAR 0 2
66289: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66290: LD_INT 0
66292: PPUSH
66293: PPUSH
// if not driver or not IsInUnit ( driver ) then
66294: LD_VAR 0 1
66298: NOT
66299: PUSH
66300: LD_VAR 0 1
66304: PPUSH
66305: CALL_OW 310
66309: NOT
66310: OR
66311: IFFALSE 66315
// exit ;
66313: GO 66405
// vehicle := IsInUnit ( driver ) ;
66315: LD_ADDR_VAR 0 3
66319: PUSH
66320: LD_VAR 0 1
66324: PPUSH
66325: CALL_OW 310
66329: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66330: LD_VAR 0 1
66334: PPUSH
66335: LD_STRING \
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: LD_INT 0
66343: PUSH
66344: LD_INT 0
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: LD_INT 0
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: PUSH
66365: LD_STRING E
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_VAR 0 3
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: LD_INT 0
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PPUSH
66401: CALL_OW 447
// end ;
66405: LD_VAR 0 2
66409: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66410: LD_INT 0
66412: PPUSH
66413: PPUSH
66414: PPUSH
// tmp := [ ] ;
66415: LD_ADDR_VAR 0 5
66419: PUSH
66420: EMPTY
66421: ST_TO_ADDR
// for i in units do
66422: LD_ADDR_VAR 0 4
66426: PUSH
66427: LD_VAR 0 1
66431: PUSH
66432: FOR_IN
66433: IFFALSE 66471
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66435: LD_ADDR_VAR 0 5
66439: PUSH
66440: LD_VAR 0 5
66444: PPUSH
66445: LD_VAR 0 5
66449: PUSH
66450: LD_INT 1
66452: PLUS
66453: PPUSH
66454: LD_VAR 0 4
66458: PPUSH
66459: CALL_OW 256
66463: PPUSH
66464: CALL_OW 2
66468: ST_TO_ADDR
66469: GO 66432
66471: POP
66472: POP
// if not tmp then
66473: LD_VAR 0 5
66477: NOT
66478: IFFALSE 66482
// exit ;
66480: GO 66530
// if asc then
66482: LD_VAR 0 2
66486: IFFALSE 66510
// result := SortListByListAsc ( units , tmp ) else
66488: LD_ADDR_VAR 0 3
66492: PUSH
66493: LD_VAR 0 1
66497: PPUSH
66498: LD_VAR 0 5
66502: PPUSH
66503: CALL_OW 76
66507: ST_TO_ADDR
66508: GO 66530
// result := SortListByListDesc ( units , tmp ) ;
66510: LD_ADDR_VAR 0 3
66514: PUSH
66515: LD_VAR 0 1
66519: PPUSH
66520: LD_VAR 0 5
66524: PPUSH
66525: CALL_OW 77
66529: ST_TO_ADDR
// end ;
66530: LD_VAR 0 3
66534: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66535: LD_INT 0
66537: PPUSH
66538: PPUSH
// task := GetTaskList ( mech ) ;
66539: LD_ADDR_VAR 0 4
66543: PUSH
66544: LD_VAR 0 1
66548: PPUSH
66549: CALL_OW 437
66553: ST_TO_ADDR
// if not task then
66554: LD_VAR 0 4
66558: NOT
66559: IFFALSE 66563
// exit ;
66561: GO 66605
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66563: LD_ADDR_VAR 0 3
66567: PUSH
66568: LD_VAR 0 4
66572: PUSH
66573: LD_INT 1
66575: ARRAY
66576: PUSH
66577: LD_INT 1
66579: ARRAY
66580: PUSH
66581: LD_STRING r
66583: EQUAL
66584: PUSH
66585: LD_VAR 0 4
66589: PUSH
66590: LD_INT 1
66592: ARRAY
66593: PUSH
66594: LD_INT 4
66596: ARRAY
66597: PUSH
66598: LD_VAR 0 2
66602: EQUAL
66603: AND
66604: ST_TO_ADDR
// end ;
66605: LD_VAR 0 3
66609: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66610: LD_INT 0
66612: PPUSH
// SetDir ( unit , d ) ;
66613: LD_VAR 0 1
66617: PPUSH
66618: LD_VAR 0 4
66622: PPUSH
66623: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66627: LD_VAR 0 1
66631: PPUSH
66632: LD_VAR 0 2
66636: PPUSH
66637: LD_VAR 0 3
66641: PPUSH
66642: LD_VAR 0 5
66646: PPUSH
66647: CALL_OW 48
// end ;
66651: LD_VAR 0 6
66655: RET
// export function ToNaturalNumber ( number ) ; begin
66656: LD_INT 0
66658: PPUSH
// result := number div 1 ;
66659: LD_ADDR_VAR 0 2
66663: PUSH
66664: LD_VAR 0 1
66668: PUSH
66669: LD_INT 1
66671: DIV
66672: ST_TO_ADDR
// if number < 0 then
66673: LD_VAR 0 1
66677: PUSH
66678: LD_INT 0
66680: LESS
66681: IFFALSE 66691
// result := 0 ;
66683: LD_ADDR_VAR 0 2
66687: PUSH
66688: LD_INT 0
66690: ST_TO_ADDR
// end ;
66691: LD_VAR 0 2
66695: RET
// export function SortByClass ( units , class ) ; var un ; begin
66696: LD_INT 0
66698: PPUSH
66699: PPUSH
// if not units or not class then
66700: LD_VAR 0 1
66704: NOT
66705: PUSH
66706: LD_VAR 0 2
66710: NOT
66711: OR
66712: IFFALSE 66716
// exit ;
66714: GO 66811
// result := [ ] ;
66716: LD_ADDR_VAR 0 3
66720: PUSH
66721: EMPTY
66722: ST_TO_ADDR
// for un in units do
66723: LD_ADDR_VAR 0 4
66727: PUSH
66728: LD_VAR 0 1
66732: PUSH
66733: FOR_IN
66734: IFFALSE 66809
// if GetClass ( un ) = class then
66736: LD_VAR 0 4
66740: PPUSH
66741: CALL_OW 257
66745: PUSH
66746: LD_VAR 0 2
66750: EQUAL
66751: IFFALSE 66778
// result := Insert ( result , 1 , un ) else
66753: LD_ADDR_VAR 0 3
66757: PUSH
66758: LD_VAR 0 3
66762: PPUSH
66763: LD_INT 1
66765: PPUSH
66766: LD_VAR 0 4
66770: PPUSH
66771: CALL_OW 2
66775: ST_TO_ADDR
66776: GO 66807
// result := Replace ( result , result + 1 , un ) ;
66778: LD_ADDR_VAR 0 3
66782: PUSH
66783: LD_VAR 0 3
66787: PPUSH
66788: LD_VAR 0 3
66792: PUSH
66793: LD_INT 1
66795: PLUS
66796: PPUSH
66797: LD_VAR 0 4
66801: PPUSH
66802: CALL_OW 1
66806: ST_TO_ADDR
66807: GO 66733
66809: POP
66810: POP
// end ;
66811: LD_VAR 0 3
66815: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66816: LD_INT 0
66818: PPUSH
66819: PPUSH
66820: PPUSH
66821: PPUSH
66822: PPUSH
66823: PPUSH
66824: PPUSH
// result := [ ] ;
66825: LD_ADDR_VAR 0 4
66829: PUSH
66830: EMPTY
66831: ST_TO_ADDR
// if x - r < 0 then
66832: LD_VAR 0 1
66836: PUSH
66837: LD_VAR 0 3
66841: MINUS
66842: PUSH
66843: LD_INT 0
66845: LESS
66846: IFFALSE 66858
// min_x := 0 else
66848: LD_ADDR_VAR 0 8
66852: PUSH
66853: LD_INT 0
66855: ST_TO_ADDR
66856: GO 66874
// min_x := x - r ;
66858: LD_ADDR_VAR 0 8
66862: PUSH
66863: LD_VAR 0 1
66867: PUSH
66868: LD_VAR 0 3
66872: MINUS
66873: ST_TO_ADDR
// if y - r < 0 then
66874: LD_VAR 0 2
66878: PUSH
66879: LD_VAR 0 3
66883: MINUS
66884: PUSH
66885: LD_INT 0
66887: LESS
66888: IFFALSE 66900
// min_y := 0 else
66890: LD_ADDR_VAR 0 7
66894: PUSH
66895: LD_INT 0
66897: ST_TO_ADDR
66898: GO 66916
// min_y := y - r ;
66900: LD_ADDR_VAR 0 7
66904: PUSH
66905: LD_VAR 0 2
66909: PUSH
66910: LD_VAR 0 3
66914: MINUS
66915: ST_TO_ADDR
// max_x := x + r ;
66916: LD_ADDR_VAR 0 9
66920: PUSH
66921: LD_VAR 0 1
66925: PUSH
66926: LD_VAR 0 3
66930: PLUS
66931: ST_TO_ADDR
// max_y := y + r ;
66932: LD_ADDR_VAR 0 10
66936: PUSH
66937: LD_VAR 0 2
66941: PUSH
66942: LD_VAR 0 3
66946: PLUS
66947: ST_TO_ADDR
// for _x = min_x to max_x do
66948: LD_ADDR_VAR 0 5
66952: PUSH
66953: DOUBLE
66954: LD_VAR 0 8
66958: DEC
66959: ST_TO_ADDR
66960: LD_VAR 0 9
66964: PUSH
66965: FOR_TO
66966: IFFALSE 67067
// for _y = min_y to max_y do
66968: LD_ADDR_VAR 0 6
66972: PUSH
66973: DOUBLE
66974: LD_VAR 0 7
66978: DEC
66979: ST_TO_ADDR
66980: LD_VAR 0 10
66984: PUSH
66985: FOR_TO
66986: IFFALSE 67063
// begin if not ValidHex ( _x , _y ) then
66988: LD_VAR 0 5
66992: PPUSH
66993: LD_VAR 0 6
66997: PPUSH
66998: CALL_OW 488
67002: NOT
67003: IFFALSE 67007
// continue ;
67005: GO 66985
// if GetResourceTypeXY ( _x , _y ) then
67007: LD_VAR 0 5
67011: PPUSH
67012: LD_VAR 0 6
67016: PPUSH
67017: CALL_OW 283
67021: IFFALSE 67061
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67023: LD_ADDR_VAR 0 4
67027: PUSH
67028: LD_VAR 0 4
67032: PPUSH
67033: LD_VAR 0 4
67037: PUSH
67038: LD_INT 1
67040: PLUS
67041: PPUSH
67042: LD_VAR 0 5
67046: PUSH
67047: LD_VAR 0 6
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PPUSH
67056: CALL_OW 1
67060: ST_TO_ADDR
// end ;
67061: GO 66985
67063: POP
67064: POP
67065: GO 66965
67067: POP
67068: POP
// end ;
67069: LD_VAR 0 4
67073: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67074: LD_INT 0
67076: PPUSH
67077: PPUSH
67078: PPUSH
67079: PPUSH
67080: PPUSH
67081: PPUSH
67082: PPUSH
67083: PPUSH
// if not units then
67084: LD_VAR 0 1
67088: NOT
67089: IFFALSE 67093
// exit ;
67091: GO 67617
// result := UnitFilter ( units , [ f_ok ] ) ;
67093: LD_ADDR_VAR 0 3
67097: PUSH
67098: LD_VAR 0 1
67102: PPUSH
67103: LD_INT 50
67105: PUSH
67106: EMPTY
67107: LIST
67108: PPUSH
67109: CALL_OW 72
67113: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67114: LD_ADDR_VAR 0 8
67118: PUSH
67119: LD_VAR 0 1
67123: PUSH
67124: LD_INT 1
67126: ARRAY
67127: PPUSH
67128: CALL_OW 255
67132: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67133: LD_ADDR_VAR 0 10
67137: PUSH
67138: LD_INT 29
67140: PUSH
67141: LD_INT 91
67143: PUSH
67144: LD_INT 49
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: LIST
67151: ST_TO_ADDR
// if not result then
67152: LD_VAR 0 3
67156: NOT
67157: IFFALSE 67161
// exit ;
67159: GO 67617
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67161: LD_ADDR_VAR 0 5
67165: PUSH
67166: LD_INT 81
67168: PUSH
67169: LD_VAR 0 8
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PPUSH
67178: CALL_OW 69
67182: ST_TO_ADDR
// for i in result do
67183: LD_ADDR_VAR 0 4
67187: PUSH
67188: LD_VAR 0 3
67192: PUSH
67193: FOR_IN
67194: IFFALSE 67615
// begin tag := GetTag ( i ) + 1 ;
67196: LD_ADDR_VAR 0 9
67200: PUSH
67201: LD_VAR 0 4
67205: PPUSH
67206: CALL_OW 110
67210: PUSH
67211: LD_INT 1
67213: PLUS
67214: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67215: LD_ADDR_VAR 0 7
67219: PUSH
67220: LD_VAR 0 4
67224: PPUSH
67225: CALL_OW 250
67229: PPUSH
67230: LD_VAR 0 4
67234: PPUSH
67235: CALL_OW 251
67239: PPUSH
67240: LD_INT 6
67242: PPUSH
67243: CALL 66816 0 3
67247: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67248: LD_VAR 0 4
67252: PPUSH
67253: CALL_OW 247
67257: PUSH
67258: LD_INT 2
67260: EQUAL
67261: PUSH
67262: LD_VAR 0 7
67266: AND
67267: PUSH
67268: LD_VAR 0 4
67272: PPUSH
67273: CALL_OW 264
67277: PUSH
67278: LD_VAR 0 10
67282: IN
67283: NOT
67284: AND
67285: IFFALSE 67324
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67287: LD_VAR 0 4
67291: PPUSH
67292: LD_VAR 0 7
67296: PUSH
67297: LD_INT 1
67299: ARRAY
67300: PUSH
67301: LD_INT 1
67303: ARRAY
67304: PPUSH
67305: LD_VAR 0 7
67309: PUSH
67310: LD_INT 1
67312: ARRAY
67313: PUSH
67314: LD_INT 2
67316: ARRAY
67317: PPUSH
67318: CALL_OW 116
67322: GO 67613
// if path > tag then
67324: LD_VAR 0 2
67328: PUSH
67329: LD_VAR 0 9
67333: GREATER
67334: IFFALSE 67542
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67336: LD_ADDR_VAR 0 6
67340: PUSH
67341: LD_VAR 0 5
67345: PPUSH
67346: LD_INT 91
67348: PUSH
67349: LD_VAR 0 4
67353: PUSH
67354: LD_INT 8
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: PPUSH
67362: CALL_OW 72
67366: ST_TO_ADDR
// if nearEnemy then
67367: LD_VAR 0 6
67371: IFFALSE 67440
// begin if GetWeapon ( i ) = ru_time_lapser then
67373: LD_VAR 0 4
67377: PPUSH
67378: CALL_OW 264
67382: PUSH
67383: LD_INT 49
67385: EQUAL
67386: IFFALSE 67414
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67388: LD_VAR 0 4
67392: PPUSH
67393: LD_VAR 0 6
67397: PPUSH
67398: LD_VAR 0 4
67402: PPUSH
67403: CALL_OW 74
67407: PPUSH
67408: CALL_OW 112
67412: GO 67438
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67414: LD_VAR 0 4
67418: PPUSH
67419: LD_VAR 0 6
67423: PPUSH
67424: LD_VAR 0 4
67428: PPUSH
67429: CALL_OW 74
67433: PPUSH
67434: CALL_OW 115
// end else
67438: GO 67540
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67440: LD_VAR 0 4
67444: PPUSH
67445: LD_VAR 0 2
67449: PUSH
67450: LD_VAR 0 9
67454: ARRAY
67455: PUSH
67456: LD_INT 1
67458: ARRAY
67459: PPUSH
67460: LD_VAR 0 2
67464: PUSH
67465: LD_VAR 0 9
67469: ARRAY
67470: PUSH
67471: LD_INT 2
67473: ARRAY
67474: PPUSH
67475: CALL_OW 297
67479: PUSH
67480: LD_INT 6
67482: GREATER
67483: IFFALSE 67526
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67485: LD_VAR 0 4
67489: PPUSH
67490: LD_VAR 0 2
67494: PUSH
67495: LD_VAR 0 9
67499: ARRAY
67500: PUSH
67501: LD_INT 1
67503: ARRAY
67504: PPUSH
67505: LD_VAR 0 2
67509: PUSH
67510: LD_VAR 0 9
67514: ARRAY
67515: PUSH
67516: LD_INT 2
67518: ARRAY
67519: PPUSH
67520: CALL_OW 114
67524: GO 67540
// SetTag ( i , tag ) ;
67526: LD_VAR 0 4
67530: PPUSH
67531: LD_VAR 0 9
67535: PPUSH
67536: CALL_OW 109
// end else
67540: GO 67613
// if enemy then
67542: LD_VAR 0 5
67546: IFFALSE 67613
// begin if GetWeapon ( i ) = ru_time_lapser then
67548: LD_VAR 0 4
67552: PPUSH
67553: CALL_OW 264
67557: PUSH
67558: LD_INT 49
67560: EQUAL
67561: IFFALSE 67589
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67563: LD_VAR 0 4
67567: PPUSH
67568: LD_VAR 0 5
67572: PPUSH
67573: LD_VAR 0 4
67577: PPUSH
67578: CALL_OW 74
67582: PPUSH
67583: CALL_OW 112
67587: GO 67613
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67589: LD_VAR 0 4
67593: PPUSH
67594: LD_VAR 0 5
67598: PPUSH
67599: LD_VAR 0 4
67603: PPUSH
67604: CALL_OW 74
67608: PPUSH
67609: CALL_OW 115
// end ; end ;
67613: GO 67193
67615: POP
67616: POP
// end ;
67617: LD_VAR 0 3
67621: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67622: LD_INT 0
67624: PPUSH
67625: PPUSH
67626: PPUSH
// if not unit or IsInUnit ( unit ) then
67627: LD_VAR 0 1
67631: NOT
67632: PUSH
67633: LD_VAR 0 1
67637: PPUSH
67638: CALL_OW 310
67642: OR
67643: IFFALSE 67647
// exit ;
67645: GO 67738
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67647: LD_ADDR_VAR 0 4
67651: PUSH
67652: LD_VAR 0 1
67656: PPUSH
67657: CALL_OW 250
67661: PPUSH
67662: LD_VAR 0 2
67666: PPUSH
67667: LD_INT 1
67669: PPUSH
67670: CALL_OW 272
67674: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67675: LD_ADDR_VAR 0 5
67679: PUSH
67680: LD_VAR 0 1
67684: PPUSH
67685: CALL_OW 251
67689: PPUSH
67690: LD_VAR 0 2
67694: PPUSH
67695: LD_INT 1
67697: PPUSH
67698: CALL_OW 273
67702: ST_TO_ADDR
// if ValidHex ( x , y ) then
67703: LD_VAR 0 4
67707: PPUSH
67708: LD_VAR 0 5
67712: PPUSH
67713: CALL_OW 488
67717: IFFALSE 67738
// ComTurnXY ( unit , x , y ) ;
67719: LD_VAR 0 1
67723: PPUSH
67724: LD_VAR 0 4
67728: PPUSH
67729: LD_VAR 0 5
67733: PPUSH
67734: CALL_OW 118
// end ;
67738: LD_VAR 0 3
67742: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67743: LD_INT 0
67745: PPUSH
67746: PPUSH
// result := false ;
67747: LD_ADDR_VAR 0 3
67751: PUSH
67752: LD_INT 0
67754: ST_TO_ADDR
// if not units then
67755: LD_VAR 0 2
67759: NOT
67760: IFFALSE 67764
// exit ;
67762: GO 67809
// for i in units do
67764: LD_ADDR_VAR 0 4
67768: PUSH
67769: LD_VAR 0 2
67773: PUSH
67774: FOR_IN
67775: IFFALSE 67807
// if See ( side , i ) then
67777: LD_VAR 0 1
67781: PPUSH
67782: LD_VAR 0 4
67786: PPUSH
67787: CALL_OW 292
67791: IFFALSE 67805
// begin result := true ;
67793: LD_ADDR_VAR 0 3
67797: PUSH
67798: LD_INT 1
67800: ST_TO_ADDR
// exit ;
67801: POP
67802: POP
67803: GO 67809
// end ;
67805: GO 67774
67807: POP
67808: POP
// end ;
67809: LD_VAR 0 3
67813: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67814: LD_INT 0
67816: PPUSH
67817: PPUSH
67818: PPUSH
67819: PPUSH
// if not unit or not points then
67820: LD_VAR 0 1
67824: NOT
67825: PUSH
67826: LD_VAR 0 2
67830: NOT
67831: OR
67832: IFFALSE 67836
// exit ;
67834: GO 67926
// dist := 99999 ;
67836: LD_ADDR_VAR 0 5
67840: PUSH
67841: LD_INT 99999
67843: ST_TO_ADDR
// for i in points do
67844: LD_ADDR_VAR 0 4
67848: PUSH
67849: LD_VAR 0 2
67853: PUSH
67854: FOR_IN
67855: IFFALSE 67924
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67857: LD_ADDR_VAR 0 6
67861: PUSH
67862: LD_VAR 0 1
67866: PPUSH
67867: LD_VAR 0 4
67871: PUSH
67872: LD_INT 1
67874: ARRAY
67875: PPUSH
67876: LD_VAR 0 4
67880: PUSH
67881: LD_INT 2
67883: ARRAY
67884: PPUSH
67885: CALL_OW 297
67889: ST_TO_ADDR
// if tmpDist < dist then
67890: LD_VAR 0 6
67894: PUSH
67895: LD_VAR 0 5
67899: LESS
67900: IFFALSE 67922
// begin result := i ;
67902: LD_ADDR_VAR 0 3
67906: PUSH
67907: LD_VAR 0 4
67911: ST_TO_ADDR
// dist := tmpDist ;
67912: LD_ADDR_VAR 0 5
67916: PUSH
67917: LD_VAR 0 6
67921: ST_TO_ADDR
// end ; end ;
67922: GO 67854
67924: POP
67925: POP
// end ;
67926: LD_VAR 0 3
67930: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67931: LD_INT 0
67933: PPUSH
// uc_side := side ;
67934: LD_ADDR_OWVAR 20
67938: PUSH
67939: LD_VAR 0 1
67943: ST_TO_ADDR
// uc_nation := 3 ;
67944: LD_ADDR_OWVAR 21
67948: PUSH
67949: LD_INT 3
67951: ST_TO_ADDR
// vc_chassis := 25 ;
67952: LD_ADDR_OWVAR 37
67956: PUSH
67957: LD_INT 25
67959: ST_TO_ADDR
// vc_engine := engine_siberite ;
67960: LD_ADDR_OWVAR 39
67964: PUSH
67965: LD_INT 3
67967: ST_TO_ADDR
// vc_control := control_computer ;
67968: LD_ADDR_OWVAR 38
67972: PUSH
67973: LD_INT 3
67975: ST_TO_ADDR
// vc_weapon := 59 ;
67976: LD_ADDR_OWVAR 40
67980: PUSH
67981: LD_INT 59
67983: ST_TO_ADDR
// result := CreateVehicle ;
67984: LD_ADDR_VAR 0 5
67988: PUSH
67989: CALL_OW 45
67993: ST_TO_ADDR
// SetDir ( result , d ) ;
67994: LD_VAR 0 5
67998: PPUSH
67999: LD_VAR 0 4
68003: PPUSH
68004: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68008: LD_VAR 0 5
68012: PPUSH
68013: LD_VAR 0 2
68017: PPUSH
68018: LD_VAR 0 3
68022: PPUSH
68023: LD_INT 0
68025: PPUSH
68026: CALL_OW 48
// end ;
68030: LD_VAR 0 5
68034: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68035: LD_INT 0
68037: PPUSH
68038: PPUSH
68039: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68040: LD_ADDR_VAR 0 2
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68063: LD_VAR 0 1
68067: NOT
68068: PUSH
68069: LD_VAR 0 1
68073: PPUSH
68074: CALL_OW 264
68078: PUSH
68079: LD_INT 12
68081: PUSH
68082: LD_INT 51
68084: PUSH
68085: LD_INT 32
68087: PUSH
68088: LD_INT 89
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: IN
68097: NOT
68098: OR
68099: IFFALSE 68103
// exit ;
68101: GO 68201
// for i := 1 to 3 do
68103: LD_ADDR_VAR 0 3
68107: PUSH
68108: DOUBLE
68109: LD_INT 1
68111: DEC
68112: ST_TO_ADDR
68113: LD_INT 3
68115: PUSH
68116: FOR_TO
68117: IFFALSE 68199
// begin tmp := GetCargo ( cargo , i ) ;
68119: LD_ADDR_VAR 0 4
68123: PUSH
68124: LD_VAR 0 1
68128: PPUSH
68129: LD_VAR 0 3
68133: PPUSH
68134: CALL_OW 289
68138: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68139: LD_ADDR_VAR 0 2
68143: PUSH
68144: LD_VAR 0 2
68148: PPUSH
68149: LD_VAR 0 3
68153: PPUSH
68154: LD_VAR 0 4
68158: PPUSH
68159: CALL_OW 1
68163: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68164: LD_ADDR_VAR 0 2
68168: PUSH
68169: LD_VAR 0 2
68173: PPUSH
68174: LD_INT 4
68176: PPUSH
68177: LD_VAR 0 2
68181: PUSH
68182: LD_INT 4
68184: ARRAY
68185: PUSH
68186: LD_VAR 0 4
68190: PLUS
68191: PPUSH
68192: CALL_OW 1
68196: ST_TO_ADDR
// end ;
68197: GO 68116
68199: POP
68200: POP
// end ;
68201: LD_VAR 0 2
68205: RET
// export function Length ( array ) ; begin
68206: LD_INT 0
68208: PPUSH
// result := array + 0 ;
68209: LD_ADDR_VAR 0 2
68213: PUSH
68214: LD_VAR 0 1
68218: PUSH
68219: LD_INT 0
68221: PLUS
68222: ST_TO_ADDR
// end ;
68223: LD_VAR 0 2
68227: RET
// export function PrepareArray ( array ) ; begin
68228: LD_INT 0
68230: PPUSH
// result := array diff 0 ;
68231: LD_ADDR_VAR 0 2
68235: PUSH
68236: LD_VAR 0 1
68240: PUSH
68241: LD_INT 0
68243: DIFF
68244: ST_TO_ADDR
// if not result [ 1 ] then
68245: LD_VAR 0 2
68249: PUSH
68250: LD_INT 1
68252: ARRAY
68253: NOT
68254: IFFALSE 68274
// result := Delete ( result , 1 ) ;
68256: LD_ADDR_VAR 0 2
68260: PUSH
68261: LD_VAR 0 2
68265: PPUSH
68266: LD_INT 1
68268: PPUSH
68269: CALL_OW 3
68273: ST_TO_ADDR
// end ;
68274: LD_VAR 0 2
68278: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68279: LD_INT 0
68281: PPUSH
68282: PPUSH
68283: PPUSH
68284: PPUSH
// sibRocketRange := 25 ;
68285: LD_ADDR_VAR 0 6
68289: PUSH
68290: LD_INT 25
68292: ST_TO_ADDR
// result := false ;
68293: LD_ADDR_VAR 0 4
68297: PUSH
68298: LD_INT 0
68300: ST_TO_ADDR
// for i := 0 to 5 do
68301: LD_ADDR_VAR 0 5
68305: PUSH
68306: DOUBLE
68307: LD_INT 0
68309: DEC
68310: ST_TO_ADDR
68311: LD_INT 5
68313: PUSH
68314: FOR_TO
68315: IFFALSE 68382
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68317: LD_VAR 0 1
68321: PPUSH
68322: LD_VAR 0 5
68326: PPUSH
68327: LD_VAR 0 6
68331: PPUSH
68332: CALL_OW 272
68336: PPUSH
68337: LD_VAR 0 2
68341: PPUSH
68342: LD_VAR 0 5
68346: PPUSH
68347: LD_VAR 0 6
68351: PPUSH
68352: CALL_OW 273
68356: PPUSH
68357: LD_VAR 0 3
68361: PPUSH
68362: CALL_OW 309
68366: IFFALSE 68380
// begin result := true ;
68368: LD_ADDR_VAR 0 4
68372: PUSH
68373: LD_INT 1
68375: ST_TO_ADDR
// exit ;
68376: POP
68377: POP
68378: GO 68384
// end ;
68380: GO 68314
68382: POP
68383: POP
// end ;
68384: LD_VAR 0 4
68388: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68389: LD_INT 0
68391: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68392: LD_VAR 0 1
68396: PPUSH
68397: LD_VAR 0 2
68401: PPUSH
68402: LD_INT 0
68404: PPUSH
68405: LD_INT 0
68407: PPUSH
68408: LD_INT 1
68410: PPUSH
68411: LD_INT 0
68413: PPUSH
68414: CALL_OW 587
// end ; end_of_file end_of_file
68418: LD_VAR 0 3
68422: RET
// every 0 0$1 do
68423: GO 68425
68425: DISABLE
// begin enable ;
68426: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
68427: LD_STRING updateTimer(
68429: PUSH
68430: LD_OWVAR 1
68434: STR
68435: PUSH
68436: LD_STRING );
68438: STR
68439: PPUSH
68440: CALL_OW 559
// end ;
68444: END
// export function SOS_MapStart ( ) ; begin
68445: LD_INT 0
68447: PPUSH
// if streamModeActive then
68448: LD_EXP 61
68452: IFFALSE 68461
// DefineStreamItems ( true ) ;
68454: LD_INT 1
68456: PPUSH
68457: CALL 70115 0 1
// UpdateFactoryWaypoints ( ) ;
68461: CALL 82976 0 0
// UpdateWarehouseGatheringPoints ( ) ;
68465: CALL 83233 0 0
// end ;
68469: LD_VAR 0 1
68473: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
68474: LD_INT 0
68476: PPUSH
// if p2 = hack_mode then
68477: LD_VAR 0 2
68481: PUSH
68482: LD_INT 100
68484: EQUAL
68485: IFFALSE 69488
// begin if not StreamModeActive then
68487: LD_EXP 61
68491: NOT
68492: IFFALSE 68502
// StreamModeActive := true ;
68494: LD_ADDR_EXP 61
68498: PUSH
68499: LD_INT 1
68501: ST_TO_ADDR
// if p3 = 0 then
68502: LD_VAR 0 3
68506: PUSH
68507: LD_INT 0
68509: EQUAL
68510: IFFALSE 68516
// InitStreamMode ;
68512: CALL 69651 0 0
// if p3 = 1 then
68516: LD_VAR 0 3
68520: PUSH
68521: LD_INT 1
68523: EQUAL
68524: IFFALSE 68534
// sRocket := true ;
68526: LD_ADDR_EXP 66
68530: PUSH
68531: LD_INT 1
68533: ST_TO_ADDR
// if p3 = 2 then
68534: LD_VAR 0 3
68538: PUSH
68539: LD_INT 2
68541: EQUAL
68542: IFFALSE 68552
// sSpeed := true ;
68544: LD_ADDR_EXP 65
68548: PUSH
68549: LD_INT 1
68551: ST_TO_ADDR
// if p3 = 3 then
68552: LD_VAR 0 3
68556: PUSH
68557: LD_INT 3
68559: EQUAL
68560: IFFALSE 68570
// sEngine := true ;
68562: LD_ADDR_EXP 67
68566: PUSH
68567: LD_INT 1
68569: ST_TO_ADDR
// if p3 = 4 then
68570: LD_VAR 0 3
68574: PUSH
68575: LD_INT 4
68577: EQUAL
68578: IFFALSE 68588
// sSpec := true ;
68580: LD_ADDR_EXP 64
68584: PUSH
68585: LD_INT 1
68587: ST_TO_ADDR
// if p3 = 5 then
68588: LD_VAR 0 3
68592: PUSH
68593: LD_INT 5
68595: EQUAL
68596: IFFALSE 68606
// sLevel := true ;
68598: LD_ADDR_EXP 68
68602: PUSH
68603: LD_INT 1
68605: ST_TO_ADDR
// if p3 = 6 then
68606: LD_VAR 0 3
68610: PUSH
68611: LD_INT 6
68613: EQUAL
68614: IFFALSE 68624
// sArmoury := true ;
68616: LD_ADDR_EXP 69
68620: PUSH
68621: LD_INT 1
68623: ST_TO_ADDR
// if p3 = 7 then
68624: LD_VAR 0 3
68628: PUSH
68629: LD_INT 7
68631: EQUAL
68632: IFFALSE 68642
// sRadar := true ;
68634: LD_ADDR_EXP 70
68638: PUSH
68639: LD_INT 1
68641: ST_TO_ADDR
// if p3 = 8 then
68642: LD_VAR 0 3
68646: PUSH
68647: LD_INT 8
68649: EQUAL
68650: IFFALSE 68660
// sBunker := true ;
68652: LD_ADDR_EXP 71
68656: PUSH
68657: LD_INT 1
68659: ST_TO_ADDR
// if p3 = 9 then
68660: LD_VAR 0 3
68664: PUSH
68665: LD_INT 9
68667: EQUAL
68668: IFFALSE 68678
// sHack := true ;
68670: LD_ADDR_EXP 72
68674: PUSH
68675: LD_INT 1
68677: ST_TO_ADDR
// if p3 = 10 then
68678: LD_VAR 0 3
68682: PUSH
68683: LD_INT 10
68685: EQUAL
68686: IFFALSE 68696
// sFire := true ;
68688: LD_ADDR_EXP 73
68692: PUSH
68693: LD_INT 1
68695: ST_TO_ADDR
// if p3 = 11 then
68696: LD_VAR 0 3
68700: PUSH
68701: LD_INT 11
68703: EQUAL
68704: IFFALSE 68714
// sRefresh := true ;
68706: LD_ADDR_EXP 74
68710: PUSH
68711: LD_INT 1
68713: ST_TO_ADDR
// if p3 = 12 then
68714: LD_VAR 0 3
68718: PUSH
68719: LD_INT 12
68721: EQUAL
68722: IFFALSE 68732
// sExp := true ;
68724: LD_ADDR_EXP 75
68728: PUSH
68729: LD_INT 1
68731: ST_TO_ADDR
// if p3 = 13 then
68732: LD_VAR 0 3
68736: PUSH
68737: LD_INT 13
68739: EQUAL
68740: IFFALSE 68750
// sDepot := true ;
68742: LD_ADDR_EXP 76
68746: PUSH
68747: LD_INT 1
68749: ST_TO_ADDR
// if p3 = 14 then
68750: LD_VAR 0 3
68754: PUSH
68755: LD_INT 14
68757: EQUAL
68758: IFFALSE 68768
// sFlag := true ;
68760: LD_ADDR_EXP 77
68764: PUSH
68765: LD_INT 1
68767: ST_TO_ADDR
// if p3 = 15 then
68768: LD_VAR 0 3
68772: PUSH
68773: LD_INT 15
68775: EQUAL
68776: IFFALSE 68786
// sKamikadze := true ;
68778: LD_ADDR_EXP 85
68782: PUSH
68783: LD_INT 1
68785: ST_TO_ADDR
// if p3 = 16 then
68786: LD_VAR 0 3
68790: PUSH
68791: LD_INT 16
68793: EQUAL
68794: IFFALSE 68804
// sTroll := true ;
68796: LD_ADDR_EXP 86
68800: PUSH
68801: LD_INT 1
68803: ST_TO_ADDR
// if p3 = 17 then
68804: LD_VAR 0 3
68808: PUSH
68809: LD_INT 17
68811: EQUAL
68812: IFFALSE 68822
// sSlow := true ;
68814: LD_ADDR_EXP 87
68818: PUSH
68819: LD_INT 1
68821: ST_TO_ADDR
// if p3 = 18 then
68822: LD_VAR 0 3
68826: PUSH
68827: LD_INT 18
68829: EQUAL
68830: IFFALSE 68840
// sLack := true ;
68832: LD_ADDR_EXP 88
68836: PUSH
68837: LD_INT 1
68839: ST_TO_ADDR
// if p3 = 19 then
68840: LD_VAR 0 3
68844: PUSH
68845: LD_INT 19
68847: EQUAL
68848: IFFALSE 68858
// sTank := true ;
68850: LD_ADDR_EXP 90
68854: PUSH
68855: LD_INT 1
68857: ST_TO_ADDR
// if p3 = 20 then
68858: LD_VAR 0 3
68862: PUSH
68863: LD_INT 20
68865: EQUAL
68866: IFFALSE 68876
// sRemote := true ;
68868: LD_ADDR_EXP 91
68872: PUSH
68873: LD_INT 1
68875: ST_TO_ADDR
// if p3 = 21 then
68876: LD_VAR 0 3
68880: PUSH
68881: LD_INT 21
68883: EQUAL
68884: IFFALSE 68894
// sPowell := true ;
68886: LD_ADDR_EXP 92
68890: PUSH
68891: LD_INT 1
68893: ST_TO_ADDR
// if p3 = 22 then
68894: LD_VAR 0 3
68898: PUSH
68899: LD_INT 22
68901: EQUAL
68902: IFFALSE 68912
// sTeleport := true ;
68904: LD_ADDR_EXP 95
68908: PUSH
68909: LD_INT 1
68911: ST_TO_ADDR
// if p3 = 23 then
68912: LD_VAR 0 3
68916: PUSH
68917: LD_INT 23
68919: EQUAL
68920: IFFALSE 68930
// sOilTower := true ;
68922: LD_ADDR_EXP 97
68926: PUSH
68927: LD_INT 1
68929: ST_TO_ADDR
// if p3 = 24 then
68930: LD_VAR 0 3
68934: PUSH
68935: LD_INT 24
68937: EQUAL
68938: IFFALSE 68948
// sShovel := true ;
68940: LD_ADDR_EXP 98
68944: PUSH
68945: LD_INT 1
68947: ST_TO_ADDR
// if p3 = 25 then
68948: LD_VAR 0 3
68952: PUSH
68953: LD_INT 25
68955: EQUAL
68956: IFFALSE 68966
// sSheik := true ;
68958: LD_ADDR_EXP 99
68962: PUSH
68963: LD_INT 1
68965: ST_TO_ADDR
// if p3 = 26 then
68966: LD_VAR 0 3
68970: PUSH
68971: LD_INT 26
68973: EQUAL
68974: IFFALSE 68984
// sEarthquake := true ;
68976: LD_ADDR_EXP 101
68980: PUSH
68981: LD_INT 1
68983: ST_TO_ADDR
// if p3 = 27 then
68984: LD_VAR 0 3
68988: PUSH
68989: LD_INT 27
68991: EQUAL
68992: IFFALSE 69002
// sAI := true ;
68994: LD_ADDR_EXP 102
68998: PUSH
68999: LD_INT 1
69001: ST_TO_ADDR
// if p3 = 28 then
69002: LD_VAR 0 3
69006: PUSH
69007: LD_INT 28
69009: EQUAL
69010: IFFALSE 69020
// sCargo := true ;
69012: LD_ADDR_EXP 105
69016: PUSH
69017: LD_INT 1
69019: ST_TO_ADDR
// if p3 = 29 then
69020: LD_VAR 0 3
69024: PUSH
69025: LD_INT 29
69027: EQUAL
69028: IFFALSE 69038
// sDLaser := true ;
69030: LD_ADDR_EXP 106
69034: PUSH
69035: LD_INT 1
69037: ST_TO_ADDR
// if p3 = 30 then
69038: LD_VAR 0 3
69042: PUSH
69043: LD_INT 30
69045: EQUAL
69046: IFFALSE 69056
// sExchange := true ;
69048: LD_ADDR_EXP 107
69052: PUSH
69053: LD_INT 1
69055: ST_TO_ADDR
// if p3 = 31 then
69056: LD_VAR 0 3
69060: PUSH
69061: LD_INT 31
69063: EQUAL
69064: IFFALSE 69074
// sFac := true ;
69066: LD_ADDR_EXP 108
69070: PUSH
69071: LD_INT 1
69073: ST_TO_ADDR
// if p3 = 32 then
69074: LD_VAR 0 3
69078: PUSH
69079: LD_INT 32
69081: EQUAL
69082: IFFALSE 69092
// sPower := true ;
69084: LD_ADDR_EXP 109
69088: PUSH
69089: LD_INT 1
69091: ST_TO_ADDR
// if p3 = 33 then
69092: LD_VAR 0 3
69096: PUSH
69097: LD_INT 33
69099: EQUAL
69100: IFFALSE 69110
// sRandom := true ;
69102: LD_ADDR_EXP 110
69106: PUSH
69107: LD_INT 1
69109: ST_TO_ADDR
// if p3 = 34 then
69110: LD_VAR 0 3
69114: PUSH
69115: LD_INT 34
69117: EQUAL
69118: IFFALSE 69128
// sShield := true ;
69120: LD_ADDR_EXP 111
69124: PUSH
69125: LD_INT 1
69127: ST_TO_ADDR
// if p3 = 35 then
69128: LD_VAR 0 3
69132: PUSH
69133: LD_INT 35
69135: EQUAL
69136: IFFALSE 69146
// sTime := true ;
69138: LD_ADDR_EXP 112
69142: PUSH
69143: LD_INT 1
69145: ST_TO_ADDR
// if p3 = 36 then
69146: LD_VAR 0 3
69150: PUSH
69151: LD_INT 36
69153: EQUAL
69154: IFFALSE 69164
// sTools := true ;
69156: LD_ADDR_EXP 113
69160: PUSH
69161: LD_INT 1
69163: ST_TO_ADDR
// if p3 = 101 then
69164: LD_VAR 0 3
69168: PUSH
69169: LD_INT 101
69171: EQUAL
69172: IFFALSE 69182
// sSold := true ;
69174: LD_ADDR_EXP 78
69178: PUSH
69179: LD_INT 1
69181: ST_TO_ADDR
// if p3 = 102 then
69182: LD_VAR 0 3
69186: PUSH
69187: LD_INT 102
69189: EQUAL
69190: IFFALSE 69200
// sDiff := true ;
69192: LD_ADDR_EXP 79
69196: PUSH
69197: LD_INT 1
69199: ST_TO_ADDR
// if p3 = 103 then
69200: LD_VAR 0 3
69204: PUSH
69205: LD_INT 103
69207: EQUAL
69208: IFFALSE 69218
// sFog := true ;
69210: LD_ADDR_EXP 82
69214: PUSH
69215: LD_INT 1
69217: ST_TO_ADDR
// if p3 = 104 then
69218: LD_VAR 0 3
69222: PUSH
69223: LD_INT 104
69225: EQUAL
69226: IFFALSE 69236
// sReset := true ;
69228: LD_ADDR_EXP 83
69232: PUSH
69233: LD_INT 1
69235: ST_TO_ADDR
// if p3 = 105 then
69236: LD_VAR 0 3
69240: PUSH
69241: LD_INT 105
69243: EQUAL
69244: IFFALSE 69254
// sSun := true ;
69246: LD_ADDR_EXP 84
69250: PUSH
69251: LD_INT 1
69253: ST_TO_ADDR
// if p3 = 106 then
69254: LD_VAR 0 3
69258: PUSH
69259: LD_INT 106
69261: EQUAL
69262: IFFALSE 69272
// sTiger := true ;
69264: LD_ADDR_EXP 80
69268: PUSH
69269: LD_INT 1
69271: ST_TO_ADDR
// if p3 = 107 then
69272: LD_VAR 0 3
69276: PUSH
69277: LD_INT 107
69279: EQUAL
69280: IFFALSE 69290
// sBomb := true ;
69282: LD_ADDR_EXP 81
69286: PUSH
69287: LD_INT 1
69289: ST_TO_ADDR
// if p3 = 108 then
69290: LD_VAR 0 3
69294: PUSH
69295: LD_INT 108
69297: EQUAL
69298: IFFALSE 69308
// sWound := true ;
69300: LD_ADDR_EXP 89
69304: PUSH
69305: LD_INT 1
69307: ST_TO_ADDR
// if p3 = 109 then
69308: LD_VAR 0 3
69312: PUSH
69313: LD_INT 109
69315: EQUAL
69316: IFFALSE 69326
// sBetray := true ;
69318: LD_ADDR_EXP 93
69322: PUSH
69323: LD_INT 1
69325: ST_TO_ADDR
// if p3 = 110 then
69326: LD_VAR 0 3
69330: PUSH
69331: LD_INT 110
69333: EQUAL
69334: IFFALSE 69344
// sContamin := true ;
69336: LD_ADDR_EXP 94
69340: PUSH
69341: LD_INT 1
69343: ST_TO_ADDR
// if p3 = 111 then
69344: LD_VAR 0 3
69348: PUSH
69349: LD_INT 111
69351: EQUAL
69352: IFFALSE 69362
// sOil := true ;
69354: LD_ADDR_EXP 96
69358: PUSH
69359: LD_INT 1
69361: ST_TO_ADDR
// if p3 = 112 then
69362: LD_VAR 0 3
69366: PUSH
69367: LD_INT 112
69369: EQUAL
69370: IFFALSE 69380
// sStu := true ;
69372: LD_ADDR_EXP 100
69376: PUSH
69377: LD_INT 1
69379: ST_TO_ADDR
// if p3 = 113 then
69380: LD_VAR 0 3
69384: PUSH
69385: LD_INT 113
69387: EQUAL
69388: IFFALSE 69398
// sBazooka := true ;
69390: LD_ADDR_EXP 103
69394: PUSH
69395: LD_INT 1
69397: ST_TO_ADDR
// if p3 = 114 then
69398: LD_VAR 0 3
69402: PUSH
69403: LD_INT 114
69405: EQUAL
69406: IFFALSE 69416
// sMortar := true ;
69408: LD_ADDR_EXP 104
69412: PUSH
69413: LD_INT 1
69415: ST_TO_ADDR
// if p3 = 115 then
69416: LD_VAR 0 3
69420: PUSH
69421: LD_INT 115
69423: EQUAL
69424: IFFALSE 69434
// sRanger := true ;
69426: LD_ADDR_EXP 114
69430: PUSH
69431: LD_INT 1
69433: ST_TO_ADDR
// if p3 = 116 then
69434: LD_VAR 0 3
69438: PUSH
69439: LD_INT 116
69441: EQUAL
69442: IFFALSE 69452
// sComputer := true ;
69444: LD_ADDR_EXP 115
69448: PUSH
69449: LD_INT 1
69451: ST_TO_ADDR
// if p3 = 117 then
69452: LD_VAR 0 3
69456: PUSH
69457: LD_INT 117
69459: EQUAL
69460: IFFALSE 69470
// s30 := true ;
69462: LD_ADDR_EXP 116
69466: PUSH
69467: LD_INT 1
69469: ST_TO_ADDR
// if p3 = 118 then
69470: LD_VAR 0 3
69474: PUSH
69475: LD_INT 118
69477: EQUAL
69478: IFFALSE 69488
// s60 := true ;
69480: LD_ADDR_EXP 117
69484: PUSH
69485: LD_INT 1
69487: ST_TO_ADDR
// end ; if p2 = stream_mode then
69488: LD_VAR 0 2
69492: PUSH
69493: LD_INT 101
69495: EQUAL
69496: IFFALSE 69624
// begin case p3 of 1 :
69498: LD_VAR 0 3
69502: PUSH
69503: LD_INT 1
69505: DOUBLE
69506: EQUAL
69507: IFTRUE 69511
69509: GO 69518
69511: POP
// hHackUnlimitedResources ; 2 :
69512: CALL 81722 0 0
69516: GO 69624
69518: LD_INT 2
69520: DOUBLE
69521: EQUAL
69522: IFTRUE 69526
69524: GO 69533
69526: POP
// hHackSetLevel10 ; 3 :
69527: CALL 81855 0 0
69531: GO 69624
69533: LD_INT 3
69535: DOUBLE
69536: EQUAL
69537: IFTRUE 69541
69539: GO 69548
69541: POP
// hHackSetLevel10YourUnits ; 4 :
69542: CALL 81940 0 0
69546: GO 69624
69548: LD_INT 4
69550: DOUBLE
69551: EQUAL
69552: IFTRUE 69556
69554: GO 69563
69556: POP
// hHackInvincible ; 5 :
69557: CALL 82388 0 0
69561: GO 69624
69563: LD_INT 5
69565: DOUBLE
69566: EQUAL
69567: IFTRUE 69571
69569: GO 69578
69571: POP
// hHackInvisible ; 6 :
69572: CALL 82499 0 0
69576: GO 69624
69578: LD_INT 6
69580: DOUBLE
69581: EQUAL
69582: IFTRUE 69586
69584: GO 69593
69586: POP
// hHackChangeYourSide ; 7 :
69587: CALL 82556 0 0
69591: GO 69624
69593: LD_INT 7
69595: DOUBLE
69596: EQUAL
69597: IFTRUE 69601
69599: GO 69608
69601: POP
// hHackChangeUnitSide ; 8 :
69602: CALL 82598 0 0
69606: GO 69624
69608: LD_INT 8
69610: DOUBLE
69611: EQUAL
69612: IFTRUE 69616
69614: GO 69623
69616: POP
// hHackFog ; end ;
69617: CALL 82699 0 0
69621: GO 69624
69623: POP
// end ; end ;
69624: LD_VAR 0 7
69628: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
69629: GO 69631
69631: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69632: LD_STRING initStreamRollete();
69634: PPUSH
69635: CALL_OW 559
// InitStreamMode ;
69639: CALL 69651 0 0
// DefineStreamItems ( false ) ;
69643: LD_INT 0
69645: PPUSH
69646: CALL 70115 0 1
// end ;
69650: END
// function InitStreamMode ; begin
69651: LD_INT 0
69653: PPUSH
// streamModeActive := false ;
69654: LD_ADDR_EXP 61
69658: PUSH
69659: LD_INT 0
69661: ST_TO_ADDR
// normalCounter := 36 ;
69662: LD_ADDR_EXP 62
69666: PUSH
69667: LD_INT 36
69669: ST_TO_ADDR
// hardcoreCounter := 18 ;
69670: LD_ADDR_EXP 63
69674: PUSH
69675: LD_INT 18
69677: ST_TO_ADDR
// sRocket := false ;
69678: LD_ADDR_EXP 66
69682: PUSH
69683: LD_INT 0
69685: ST_TO_ADDR
// sSpeed := false ;
69686: LD_ADDR_EXP 65
69690: PUSH
69691: LD_INT 0
69693: ST_TO_ADDR
// sEngine := false ;
69694: LD_ADDR_EXP 67
69698: PUSH
69699: LD_INT 0
69701: ST_TO_ADDR
// sSpec := false ;
69702: LD_ADDR_EXP 64
69706: PUSH
69707: LD_INT 0
69709: ST_TO_ADDR
// sLevel := false ;
69710: LD_ADDR_EXP 68
69714: PUSH
69715: LD_INT 0
69717: ST_TO_ADDR
// sArmoury := false ;
69718: LD_ADDR_EXP 69
69722: PUSH
69723: LD_INT 0
69725: ST_TO_ADDR
// sRadar := false ;
69726: LD_ADDR_EXP 70
69730: PUSH
69731: LD_INT 0
69733: ST_TO_ADDR
// sBunker := false ;
69734: LD_ADDR_EXP 71
69738: PUSH
69739: LD_INT 0
69741: ST_TO_ADDR
// sHack := false ;
69742: LD_ADDR_EXP 72
69746: PUSH
69747: LD_INT 0
69749: ST_TO_ADDR
// sFire := false ;
69750: LD_ADDR_EXP 73
69754: PUSH
69755: LD_INT 0
69757: ST_TO_ADDR
// sRefresh := false ;
69758: LD_ADDR_EXP 74
69762: PUSH
69763: LD_INT 0
69765: ST_TO_ADDR
// sExp := false ;
69766: LD_ADDR_EXP 75
69770: PUSH
69771: LD_INT 0
69773: ST_TO_ADDR
// sDepot := false ;
69774: LD_ADDR_EXP 76
69778: PUSH
69779: LD_INT 0
69781: ST_TO_ADDR
// sFlag := false ;
69782: LD_ADDR_EXP 77
69786: PUSH
69787: LD_INT 0
69789: ST_TO_ADDR
// sKamikadze := false ;
69790: LD_ADDR_EXP 85
69794: PUSH
69795: LD_INT 0
69797: ST_TO_ADDR
// sTroll := false ;
69798: LD_ADDR_EXP 86
69802: PUSH
69803: LD_INT 0
69805: ST_TO_ADDR
// sSlow := false ;
69806: LD_ADDR_EXP 87
69810: PUSH
69811: LD_INT 0
69813: ST_TO_ADDR
// sLack := false ;
69814: LD_ADDR_EXP 88
69818: PUSH
69819: LD_INT 0
69821: ST_TO_ADDR
// sTank := false ;
69822: LD_ADDR_EXP 90
69826: PUSH
69827: LD_INT 0
69829: ST_TO_ADDR
// sRemote := false ;
69830: LD_ADDR_EXP 91
69834: PUSH
69835: LD_INT 0
69837: ST_TO_ADDR
// sPowell := false ;
69838: LD_ADDR_EXP 92
69842: PUSH
69843: LD_INT 0
69845: ST_TO_ADDR
// sTeleport := false ;
69846: LD_ADDR_EXP 95
69850: PUSH
69851: LD_INT 0
69853: ST_TO_ADDR
// sOilTower := false ;
69854: LD_ADDR_EXP 97
69858: PUSH
69859: LD_INT 0
69861: ST_TO_ADDR
// sShovel := false ;
69862: LD_ADDR_EXP 98
69866: PUSH
69867: LD_INT 0
69869: ST_TO_ADDR
// sSheik := false ;
69870: LD_ADDR_EXP 99
69874: PUSH
69875: LD_INT 0
69877: ST_TO_ADDR
// sEarthquake := false ;
69878: LD_ADDR_EXP 101
69882: PUSH
69883: LD_INT 0
69885: ST_TO_ADDR
// sAI := false ;
69886: LD_ADDR_EXP 102
69890: PUSH
69891: LD_INT 0
69893: ST_TO_ADDR
// sCargo := false ;
69894: LD_ADDR_EXP 105
69898: PUSH
69899: LD_INT 0
69901: ST_TO_ADDR
// sDLaser := false ;
69902: LD_ADDR_EXP 106
69906: PUSH
69907: LD_INT 0
69909: ST_TO_ADDR
// sExchange := false ;
69910: LD_ADDR_EXP 107
69914: PUSH
69915: LD_INT 0
69917: ST_TO_ADDR
// sFac := false ;
69918: LD_ADDR_EXP 108
69922: PUSH
69923: LD_INT 0
69925: ST_TO_ADDR
// sPower := false ;
69926: LD_ADDR_EXP 109
69930: PUSH
69931: LD_INT 0
69933: ST_TO_ADDR
// sRandom := false ;
69934: LD_ADDR_EXP 110
69938: PUSH
69939: LD_INT 0
69941: ST_TO_ADDR
// sShield := false ;
69942: LD_ADDR_EXP 111
69946: PUSH
69947: LD_INT 0
69949: ST_TO_ADDR
// sTime := false ;
69950: LD_ADDR_EXP 112
69954: PUSH
69955: LD_INT 0
69957: ST_TO_ADDR
// sTools := false ;
69958: LD_ADDR_EXP 113
69962: PUSH
69963: LD_INT 0
69965: ST_TO_ADDR
// sSold := false ;
69966: LD_ADDR_EXP 78
69970: PUSH
69971: LD_INT 0
69973: ST_TO_ADDR
// sDiff := false ;
69974: LD_ADDR_EXP 79
69978: PUSH
69979: LD_INT 0
69981: ST_TO_ADDR
// sFog := false ;
69982: LD_ADDR_EXP 82
69986: PUSH
69987: LD_INT 0
69989: ST_TO_ADDR
// sReset := false ;
69990: LD_ADDR_EXP 83
69994: PUSH
69995: LD_INT 0
69997: ST_TO_ADDR
// sSun := false ;
69998: LD_ADDR_EXP 84
70002: PUSH
70003: LD_INT 0
70005: ST_TO_ADDR
// sTiger := false ;
70006: LD_ADDR_EXP 80
70010: PUSH
70011: LD_INT 0
70013: ST_TO_ADDR
// sBomb := false ;
70014: LD_ADDR_EXP 81
70018: PUSH
70019: LD_INT 0
70021: ST_TO_ADDR
// sWound := false ;
70022: LD_ADDR_EXP 89
70026: PUSH
70027: LD_INT 0
70029: ST_TO_ADDR
// sBetray := false ;
70030: LD_ADDR_EXP 93
70034: PUSH
70035: LD_INT 0
70037: ST_TO_ADDR
// sContamin := false ;
70038: LD_ADDR_EXP 94
70042: PUSH
70043: LD_INT 0
70045: ST_TO_ADDR
// sOil := false ;
70046: LD_ADDR_EXP 96
70050: PUSH
70051: LD_INT 0
70053: ST_TO_ADDR
// sStu := false ;
70054: LD_ADDR_EXP 100
70058: PUSH
70059: LD_INT 0
70061: ST_TO_ADDR
// sBazooka := false ;
70062: LD_ADDR_EXP 103
70066: PUSH
70067: LD_INT 0
70069: ST_TO_ADDR
// sMortar := false ;
70070: LD_ADDR_EXP 104
70074: PUSH
70075: LD_INT 0
70077: ST_TO_ADDR
// sRanger := false ;
70078: LD_ADDR_EXP 114
70082: PUSH
70083: LD_INT 0
70085: ST_TO_ADDR
// sComputer := false ;
70086: LD_ADDR_EXP 115
70090: PUSH
70091: LD_INT 0
70093: ST_TO_ADDR
// s30 := false ;
70094: LD_ADDR_EXP 116
70098: PUSH
70099: LD_INT 0
70101: ST_TO_ADDR
// s60 := false ;
70102: LD_ADDR_EXP 117
70106: PUSH
70107: LD_INT 0
70109: ST_TO_ADDR
// end ;
70110: LD_VAR 0 1
70114: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
70115: LD_INT 0
70117: PPUSH
70118: PPUSH
70119: PPUSH
70120: PPUSH
70121: PPUSH
70122: PPUSH
70123: PPUSH
// result := [ ] ;
70124: LD_ADDR_VAR 0 2
70128: PUSH
70129: EMPTY
70130: ST_TO_ADDR
// if campaign_id = 1 then
70131: LD_OWVAR 69
70135: PUSH
70136: LD_INT 1
70138: EQUAL
70139: IFFALSE 73305
// begin case mission_number of 1 :
70141: LD_OWVAR 70
70145: PUSH
70146: LD_INT 1
70148: DOUBLE
70149: EQUAL
70150: IFTRUE 70154
70152: GO 70230
70154: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
70155: LD_ADDR_VAR 0 2
70159: PUSH
70160: LD_INT 2
70162: PUSH
70163: LD_INT 4
70165: PUSH
70166: LD_INT 11
70168: PUSH
70169: LD_INT 12
70171: PUSH
70172: LD_INT 15
70174: PUSH
70175: LD_INT 16
70177: PUSH
70178: LD_INT 22
70180: PUSH
70181: LD_INT 23
70183: PUSH
70184: LD_INT 26
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 101
70200: PUSH
70201: LD_INT 102
70203: PUSH
70204: LD_INT 106
70206: PUSH
70207: LD_INT 116
70209: PUSH
70210: LD_INT 117
70212: PUSH
70213: LD_INT 118
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: ST_TO_ADDR
70228: GO 73303
70230: LD_INT 2
70232: DOUBLE
70233: EQUAL
70234: IFTRUE 70238
70236: GO 70322
70238: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
70239: LD_ADDR_VAR 0 2
70243: PUSH
70244: LD_INT 2
70246: PUSH
70247: LD_INT 4
70249: PUSH
70250: LD_INT 11
70252: PUSH
70253: LD_INT 12
70255: PUSH
70256: LD_INT 15
70258: PUSH
70259: LD_INT 16
70261: PUSH
70262: LD_INT 22
70264: PUSH
70265: LD_INT 23
70267: PUSH
70268: LD_INT 26
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 101
70284: PUSH
70285: LD_INT 102
70287: PUSH
70288: LD_INT 105
70290: PUSH
70291: LD_INT 106
70293: PUSH
70294: LD_INT 108
70296: PUSH
70297: LD_INT 116
70299: PUSH
70300: LD_INT 117
70302: PUSH
70303: LD_INT 118
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: ST_TO_ADDR
70320: GO 73303
70322: LD_INT 3
70324: DOUBLE
70325: EQUAL
70326: IFTRUE 70330
70328: GO 70418
70330: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
70331: LD_ADDR_VAR 0 2
70335: PUSH
70336: LD_INT 2
70338: PUSH
70339: LD_INT 4
70341: PUSH
70342: LD_INT 5
70344: PUSH
70345: LD_INT 11
70347: PUSH
70348: LD_INT 12
70350: PUSH
70351: LD_INT 15
70353: PUSH
70354: LD_INT 16
70356: PUSH
70357: LD_INT 22
70359: PUSH
70360: LD_INT 26
70362: PUSH
70363: LD_INT 36
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 101
70380: PUSH
70381: LD_INT 102
70383: PUSH
70384: LD_INT 105
70386: PUSH
70387: LD_INT 106
70389: PUSH
70390: LD_INT 108
70392: PUSH
70393: LD_INT 116
70395: PUSH
70396: LD_INT 117
70398: PUSH
70399: LD_INT 118
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: ST_TO_ADDR
70416: GO 73303
70418: LD_INT 4
70420: DOUBLE
70421: EQUAL
70422: IFTRUE 70426
70424: GO 70522
70426: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
70427: LD_ADDR_VAR 0 2
70431: PUSH
70432: LD_INT 2
70434: PUSH
70435: LD_INT 4
70437: PUSH
70438: LD_INT 5
70440: PUSH
70441: LD_INT 8
70443: PUSH
70444: LD_INT 11
70446: PUSH
70447: LD_INT 12
70449: PUSH
70450: LD_INT 15
70452: PUSH
70453: LD_INT 16
70455: PUSH
70456: LD_INT 22
70458: PUSH
70459: LD_INT 23
70461: PUSH
70462: LD_INT 26
70464: PUSH
70465: LD_INT 36
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 101
70484: PUSH
70485: LD_INT 102
70487: PUSH
70488: LD_INT 105
70490: PUSH
70491: LD_INT 106
70493: PUSH
70494: LD_INT 108
70496: PUSH
70497: LD_INT 116
70499: PUSH
70500: LD_INT 117
70502: PUSH
70503: LD_INT 118
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: ST_TO_ADDR
70520: GO 73303
70522: LD_INT 5
70524: DOUBLE
70525: EQUAL
70526: IFTRUE 70530
70528: GO 70642
70530: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
70531: LD_ADDR_VAR 0 2
70535: PUSH
70536: LD_INT 2
70538: PUSH
70539: LD_INT 4
70541: PUSH
70542: LD_INT 5
70544: PUSH
70545: LD_INT 6
70547: PUSH
70548: LD_INT 8
70550: PUSH
70551: LD_INT 11
70553: PUSH
70554: LD_INT 12
70556: PUSH
70557: LD_INT 15
70559: PUSH
70560: LD_INT 16
70562: PUSH
70563: LD_INT 22
70565: PUSH
70566: LD_INT 23
70568: PUSH
70569: LD_INT 25
70571: PUSH
70572: LD_INT 26
70574: PUSH
70575: LD_INT 36
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 101
70596: PUSH
70597: LD_INT 102
70599: PUSH
70600: LD_INT 105
70602: PUSH
70603: LD_INT 106
70605: PUSH
70606: LD_INT 108
70608: PUSH
70609: LD_INT 109
70611: PUSH
70612: LD_INT 112
70614: PUSH
70615: LD_INT 116
70617: PUSH
70618: LD_INT 117
70620: PUSH
70621: LD_INT 118
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: ST_TO_ADDR
70640: GO 73303
70642: LD_INT 6
70644: DOUBLE
70645: EQUAL
70646: IFTRUE 70650
70648: GO 70782
70650: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
70651: LD_ADDR_VAR 0 2
70655: PUSH
70656: LD_INT 2
70658: PUSH
70659: LD_INT 4
70661: PUSH
70662: LD_INT 5
70664: PUSH
70665: LD_INT 6
70667: PUSH
70668: LD_INT 8
70670: PUSH
70671: LD_INT 11
70673: PUSH
70674: LD_INT 12
70676: PUSH
70677: LD_INT 15
70679: PUSH
70680: LD_INT 16
70682: PUSH
70683: LD_INT 20
70685: PUSH
70686: LD_INT 21
70688: PUSH
70689: LD_INT 22
70691: PUSH
70692: LD_INT 23
70694: PUSH
70695: LD_INT 25
70697: PUSH
70698: LD_INT 26
70700: PUSH
70701: LD_INT 30
70703: PUSH
70704: LD_INT 31
70706: PUSH
70707: LD_INT 32
70709: PUSH
70710: LD_INT 36
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 101
70736: PUSH
70737: LD_INT 102
70739: PUSH
70740: LD_INT 105
70742: PUSH
70743: LD_INT 106
70745: PUSH
70746: LD_INT 108
70748: PUSH
70749: LD_INT 109
70751: PUSH
70752: LD_INT 112
70754: PUSH
70755: LD_INT 116
70757: PUSH
70758: LD_INT 117
70760: PUSH
70761: LD_INT 118
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: ST_TO_ADDR
70780: GO 73303
70782: LD_INT 7
70784: DOUBLE
70785: EQUAL
70786: IFTRUE 70790
70788: GO 70902
70790: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
70791: LD_ADDR_VAR 0 2
70795: PUSH
70796: LD_INT 2
70798: PUSH
70799: LD_INT 4
70801: PUSH
70802: LD_INT 5
70804: PUSH
70805: LD_INT 7
70807: PUSH
70808: LD_INT 11
70810: PUSH
70811: LD_INT 12
70813: PUSH
70814: LD_INT 15
70816: PUSH
70817: LD_INT 16
70819: PUSH
70820: LD_INT 20
70822: PUSH
70823: LD_INT 21
70825: PUSH
70826: LD_INT 22
70828: PUSH
70829: LD_INT 23
70831: PUSH
70832: LD_INT 25
70834: PUSH
70835: LD_INT 26
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 101
70856: PUSH
70857: LD_INT 102
70859: PUSH
70860: LD_INT 103
70862: PUSH
70863: LD_INT 105
70865: PUSH
70866: LD_INT 106
70868: PUSH
70869: LD_INT 108
70871: PUSH
70872: LD_INT 112
70874: PUSH
70875: LD_INT 116
70877: PUSH
70878: LD_INT 117
70880: PUSH
70881: LD_INT 118
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: ST_TO_ADDR
70900: GO 73303
70902: LD_INT 8
70904: DOUBLE
70905: EQUAL
70906: IFTRUE 70910
70908: GO 71050
70910: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
70911: LD_ADDR_VAR 0 2
70915: PUSH
70916: LD_INT 2
70918: PUSH
70919: LD_INT 4
70921: PUSH
70922: LD_INT 5
70924: PUSH
70925: LD_INT 6
70927: PUSH
70928: LD_INT 7
70930: PUSH
70931: LD_INT 8
70933: PUSH
70934: LD_INT 11
70936: PUSH
70937: LD_INT 12
70939: PUSH
70940: LD_INT 15
70942: PUSH
70943: LD_INT 16
70945: PUSH
70946: LD_INT 20
70948: PUSH
70949: LD_INT 21
70951: PUSH
70952: LD_INT 22
70954: PUSH
70955: LD_INT 23
70957: PUSH
70958: LD_INT 25
70960: PUSH
70961: LD_INT 26
70963: PUSH
70964: LD_INT 30
70966: PUSH
70967: LD_INT 31
70969: PUSH
70970: LD_INT 32
70972: PUSH
70973: LD_INT 36
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 101
71000: PUSH
71001: LD_INT 102
71003: PUSH
71004: LD_INT 103
71006: PUSH
71007: LD_INT 105
71009: PUSH
71010: LD_INT 106
71012: PUSH
71013: LD_INT 108
71015: PUSH
71016: LD_INT 109
71018: PUSH
71019: LD_INT 112
71021: PUSH
71022: LD_INT 116
71024: PUSH
71025: LD_INT 117
71027: PUSH
71028: LD_INT 118
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: ST_TO_ADDR
71048: GO 73303
71050: LD_INT 9
71052: DOUBLE
71053: EQUAL
71054: IFTRUE 71058
71056: GO 71206
71058: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
71059: LD_ADDR_VAR 0 2
71063: PUSH
71064: LD_INT 2
71066: PUSH
71067: LD_INT 4
71069: PUSH
71070: LD_INT 5
71072: PUSH
71073: LD_INT 6
71075: PUSH
71076: LD_INT 7
71078: PUSH
71079: LD_INT 8
71081: PUSH
71082: LD_INT 11
71084: PUSH
71085: LD_INT 12
71087: PUSH
71088: LD_INT 15
71090: PUSH
71091: LD_INT 16
71093: PUSH
71094: LD_INT 20
71096: PUSH
71097: LD_INT 21
71099: PUSH
71100: LD_INT 22
71102: PUSH
71103: LD_INT 23
71105: PUSH
71106: LD_INT 25
71108: PUSH
71109: LD_INT 26
71111: PUSH
71112: LD_INT 28
71114: PUSH
71115: LD_INT 30
71117: PUSH
71118: LD_INT 31
71120: PUSH
71121: LD_INT 32
71123: PUSH
71124: LD_INT 36
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 101
71152: PUSH
71153: LD_INT 102
71155: PUSH
71156: LD_INT 103
71158: PUSH
71159: LD_INT 105
71161: PUSH
71162: LD_INT 106
71164: PUSH
71165: LD_INT 108
71167: PUSH
71168: LD_INT 109
71170: PUSH
71171: LD_INT 112
71173: PUSH
71174: LD_INT 114
71176: PUSH
71177: LD_INT 116
71179: PUSH
71180: LD_INT 117
71182: PUSH
71183: LD_INT 118
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: ST_TO_ADDR
71204: GO 73303
71206: LD_INT 10
71208: DOUBLE
71209: EQUAL
71210: IFTRUE 71214
71212: GO 71410
71214: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
71215: LD_ADDR_VAR 0 2
71219: PUSH
71220: LD_INT 2
71222: PUSH
71223: LD_INT 4
71225: PUSH
71226: LD_INT 5
71228: PUSH
71229: LD_INT 6
71231: PUSH
71232: LD_INT 7
71234: PUSH
71235: LD_INT 8
71237: PUSH
71238: LD_INT 9
71240: PUSH
71241: LD_INT 10
71243: PUSH
71244: LD_INT 11
71246: PUSH
71247: LD_INT 12
71249: PUSH
71250: LD_INT 13
71252: PUSH
71253: LD_INT 14
71255: PUSH
71256: LD_INT 15
71258: PUSH
71259: LD_INT 16
71261: PUSH
71262: LD_INT 17
71264: PUSH
71265: LD_INT 18
71267: PUSH
71268: LD_INT 19
71270: PUSH
71271: LD_INT 20
71273: PUSH
71274: LD_INT 21
71276: PUSH
71277: LD_INT 22
71279: PUSH
71280: LD_INT 23
71282: PUSH
71283: LD_INT 24
71285: PUSH
71286: LD_INT 25
71288: PUSH
71289: LD_INT 26
71291: PUSH
71292: LD_INT 28
71294: PUSH
71295: LD_INT 30
71297: PUSH
71298: LD_INT 31
71300: PUSH
71301: LD_INT 32
71303: PUSH
71304: LD_INT 36
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 101
71340: PUSH
71341: LD_INT 102
71343: PUSH
71344: LD_INT 103
71346: PUSH
71347: LD_INT 104
71349: PUSH
71350: LD_INT 105
71352: PUSH
71353: LD_INT 106
71355: PUSH
71356: LD_INT 107
71358: PUSH
71359: LD_INT 108
71361: PUSH
71362: LD_INT 109
71364: PUSH
71365: LD_INT 110
71367: PUSH
71368: LD_INT 111
71370: PUSH
71371: LD_INT 112
71373: PUSH
71374: LD_INT 114
71376: PUSH
71377: LD_INT 116
71379: PUSH
71380: LD_INT 117
71382: PUSH
71383: LD_INT 118
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: ST_TO_ADDR
71408: GO 73303
71410: LD_INT 11
71412: DOUBLE
71413: EQUAL
71414: IFTRUE 71418
71416: GO 71622
71418: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
71419: LD_ADDR_VAR 0 2
71423: PUSH
71424: LD_INT 2
71426: PUSH
71427: LD_INT 3
71429: PUSH
71430: LD_INT 4
71432: PUSH
71433: LD_INT 5
71435: PUSH
71436: LD_INT 6
71438: PUSH
71439: LD_INT 7
71441: PUSH
71442: LD_INT 8
71444: PUSH
71445: LD_INT 9
71447: PUSH
71448: LD_INT 10
71450: PUSH
71451: LD_INT 11
71453: PUSH
71454: LD_INT 12
71456: PUSH
71457: LD_INT 13
71459: PUSH
71460: LD_INT 14
71462: PUSH
71463: LD_INT 15
71465: PUSH
71466: LD_INT 16
71468: PUSH
71469: LD_INT 17
71471: PUSH
71472: LD_INT 18
71474: PUSH
71475: LD_INT 19
71477: PUSH
71478: LD_INT 20
71480: PUSH
71481: LD_INT 21
71483: PUSH
71484: LD_INT 22
71486: PUSH
71487: LD_INT 23
71489: PUSH
71490: LD_INT 24
71492: PUSH
71493: LD_INT 25
71495: PUSH
71496: LD_INT 26
71498: PUSH
71499: LD_INT 28
71501: PUSH
71502: LD_INT 30
71504: PUSH
71505: LD_INT 31
71507: PUSH
71508: LD_INT 32
71510: PUSH
71511: LD_INT 34
71513: PUSH
71514: LD_INT 36
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: PUSH
71550: LD_INT 101
71552: PUSH
71553: LD_INT 102
71555: PUSH
71556: LD_INT 103
71558: PUSH
71559: LD_INT 104
71561: PUSH
71562: LD_INT 105
71564: PUSH
71565: LD_INT 106
71567: PUSH
71568: LD_INT 107
71570: PUSH
71571: LD_INT 108
71573: PUSH
71574: LD_INT 109
71576: PUSH
71577: LD_INT 110
71579: PUSH
71580: LD_INT 111
71582: PUSH
71583: LD_INT 112
71585: PUSH
71586: LD_INT 114
71588: PUSH
71589: LD_INT 116
71591: PUSH
71592: LD_INT 117
71594: PUSH
71595: LD_INT 118
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: ST_TO_ADDR
71620: GO 73303
71622: LD_INT 12
71624: DOUBLE
71625: EQUAL
71626: IFTRUE 71630
71628: GO 71850
71630: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
71631: LD_ADDR_VAR 0 2
71635: PUSH
71636: LD_INT 1
71638: PUSH
71639: LD_INT 2
71641: PUSH
71642: LD_INT 3
71644: PUSH
71645: LD_INT 4
71647: PUSH
71648: LD_INT 5
71650: PUSH
71651: LD_INT 6
71653: PUSH
71654: LD_INT 7
71656: PUSH
71657: LD_INT 8
71659: PUSH
71660: LD_INT 9
71662: PUSH
71663: LD_INT 10
71665: PUSH
71666: LD_INT 11
71668: PUSH
71669: LD_INT 12
71671: PUSH
71672: LD_INT 13
71674: PUSH
71675: LD_INT 14
71677: PUSH
71678: LD_INT 15
71680: PUSH
71681: LD_INT 16
71683: PUSH
71684: LD_INT 17
71686: PUSH
71687: LD_INT 18
71689: PUSH
71690: LD_INT 19
71692: PUSH
71693: LD_INT 20
71695: PUSH
71696: LD_INT 21
71698: PUSH
71699: LD_INT 22
71701: PUSH
71702: LD_INT 23
71704: PUSH
71705: LD_INT 24
71707: PUSH
71708: LD_INT 25
71710: PUSH
71711: LD_INT 26
71713: PUSH
71714: LD_INT 27
71716: PUSH
71717: LD_INT 28
71719: PUSH
71720: LD_INT 30
71722: PUSH
71723: LD_INT 31
71725: PUSH
71726: LD_INT 32
71728: PUSH
71729: LD_INT 33
71731: PUSH
71732: LD_INT 34
71734: PUSH
71735: LD_INT 36
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 101
71776: PUSH
71777: LD_INT 102
71779: PUSH
71780: LD_INT 103
71782: PUSH
71783: LD_INT 104
71785: PUSH
71786: LD_INT 105
71788: PUSH
71789: LD_INT 106
71791: PUSH
71792: LD_INT 107
71794: PUSH
71795: LD_INT 108
71797: PUSH
71798: LD_INT 109
71800: PUSH
71801: LD_INT 110
71803: PUSH
71804: LD_INT 111
71806: PUSH
71807: LD_INT 112
71809: PUSH
71810: LD_INT 113
71812: PUSH
71813: LD_INT 114
71815: PUSH
71816: LD_INT 116
71818: PUSH
71819: LD_INT 117
71821: PUSH
71822: LD_INT 118
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: ST_TO_ADDR
71848: GO 73303
71850: LD_INT 13
71852: DOUBLE
71853: EQUAL
71854: IFTRUE 71858
71856: GO 72066
71858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
71859: LD_ADDR_VAR 0 2
71863: PUSH
71864: LD_INT 1
71866: PUSH
71867: LD_INT 2
71869: PUSH
71870: LD_INT 3
71872: PUSH
71873: LD_INT 4
71875: PUSH
71876: LD_INT 5
71878: PUSH
71879: LD_INT 8
71881: PUSH
71882: LD_INT 9
71884: PUSH
71885: LD_INT 10
71887: PUSH
71888: LD_INT 11
71890: PUSH
71891: LD_INT 12
71893: PUSH
71894: LD_INT 14
71896: PUSH
71897: LD_INT 15
71899: PUSH
71900: LD_INT 16
71902: PUSH
71903: LD_INT 17
71905: PUSH
71906: LD_INT 18
71908: PUSH
71909: LD_INT 19
71911: PUSH
71912: LD_INT 20
71914: PUSH
71915: LD_INT 21
71917: PUSH
71918: LD_INT 22
71920: PUSH
71921: LD_INT 23
71923: PUSH
71924: LD_INT 24
71926: PUSH
71927: LD_INT 25
71929: PUSH
71930: LD_INT 26
71932: PUSH
71933: LD_INT 27
71935: PUSH
71936: LD_INT 28
71938: PUSH
71939: LD_INT 30
71941: PUSH
71942: LD_INT 31
71944: PUSH
71945: LD_INT 32
71947: PUSH
71948: LD_INT 33
71950: PUSH
71951: LD_INT 34
71953: PUSH
71954: LD_INT 36
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 101
71992: PUSH
71993: LD_INT 102
71995: PUSH
71996: LD_INT 103
71998: PUSH
71999: LD_INT 104
72001: PUSH
72002: LD_INT 105
72004: PUSH
72005: LD_INT 106
72007: PUSH
72008: LD_INT 107
72010: PUSH
72011: LD_INT 108
72013: PUSH
72014: LD_INT 109
72016: PUSH
72017: LD_INT 110
72019: PUSH
72020: LD_INT 111
72022: PUSH
72023: LD_INT 112
72025: PUSH
72026: LD_INT 113
72028: PUSH
72029: LD_INT 114
72031: PUSH
72032: LD_INT 116
72034: PUSH
72035: LD_INT 117
72037: PUSH
72038: LD_INT 118
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: ST_TO_ADDR
72064: GO 73303
72066: LD_INT 14
72068: DOUBLE
72069: EQUAL
72070: IFTRUE 72074
72072: GO 72298
72074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
72075: LD_ADDR_VAR 0 2
72079: PUSH
72080: LD_INT 1
72082: PUSH
72083: LD_INT 2
72085: PUSH
72086: LD_INT 3
72088: PUSH
72089: LD_INT 4
72091: PUSH
72092: LD_INT 5
72094: PUSH
72095: LD_INT 6
72097: PUSH
72098: LD_INT 7
72100: PUSH
72101: LD_INT 8
72103: PUSH
72104: LD_INT 9
72106: PUSH
72107: LD_INT 10
72109: PUSH
72110: LD_INT 11
72112: PUSH
72113: LD_INT 12
72115: PUSH
72116: LD_INT 13
72118: PUSH
72119: LD_INT 14
72121: PUSH
72122: LD_INT 15
72124: PUSH
72125: LD_INT 16
72127: PUSH
72128: LD_INT 17
72130: PUSH
72131: LD_INT 18
72133: PUSH
72134: LD_INT 19
72136: PUSH
72137: LD_INT 20
72139: PUSH
72140: LD_INT 21
72142: PUSH
72143: LD_INT 22
72145: PUSH
72146: LD_INT 23
72148: PUSH
72149: LD_INT 24
72151: PUSH
72152: LD_INT 25
72154: PUSH
72155: LD_INT 26
72157: PUSH
72158: LD_INT 27
72160: PUSH
72161: LD_INT 28
72163: PUSH
72164: LD_INT 29
72166: PUSH
72167: LD_INT 30
72169: PUSH
72170: LD_INT 31
72172: PUSH
72173: LD_INT 32
72175: PUSH
72176: LD_INT 33
72178: PUSH
72179: LD_INT 34
72181: PUSH
72182: LD_INT 36
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 101
72224: PUSH
72225: LD_INT 102
72227: PUSH
72228: LD_INT 103
72230: PUSH
72231: LD_INT 104
72233: PUSH
72234: LD_INT 105
72236: PUSH
72237: LD_INT 106
72239: PUSH
72240: LD_INT 107
72242: PUSH
72243: LD_INT 108
72245: PUSH
72246: LD_INT 109
72248: PUSH
72249: LD_INT 110
72251: PUSH
72252: LD_INT 111
72254: PUSH
72255: LD_INT 112
72257: PUSH
72258: LD_INT 113
72260: PUSH
72261: LD_INT 114
72263: PUSH
72264: LD_INT 116
72266: PUSH
72267: LD_INT 117
72269: PUSH
72270: LD_INT 118
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: ST_TO_ADDR
72296: GO 73303
72298: LD_INT 15
72300: DOUBLE
72301: EQUAL
72302: IFTRUE 72306
72304: GO 72530
72306: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
72307: LD_ADDR_VAR 0 2
72311: PUSH
72312: LD_INT 1
72314: PUSH
72315: LD_INT 2
72317: PUSH
72318: LD_INT 3
72320: PUSH
72321: LD_INT 4
72323: PUSH
72324: LD_INT 5
72326: PUSH
72327: LD_INT 6
72329: PUSH
72330: LD_INT 7
72332: PUSH
72333: LD_INT 8
72335: PUSH
72336: LD_INT 9
72338: PUSH
72339: LD_INT 10
72341: PUSH
72342: LD_INT 11
72344: PUSH
72345: LD_INT 12
72347: PUSH
72348: LD_INT 13
72350: PUSH
72351: LD_INT 14
72353: PUSH
72354: LD_INT 15
72356: PUSH
72357: LD_INT 16
72359: PUSH
72360: LD_INT 17
72362: PUSH
72363: LD_INT 18
72365: PUSH
72366: LD_INT 19
72368: PUSH
72369: LD_INT 20
72371: PUSH
72372: LD_INT 21
72374: PUSH
72375: LD_INT 22
72377: PUSH
72378: LD_INT 23
72380: PUSH
72381: LD_INT 24
72383: PUSH
72384: LD_INT 25
72386: PUSH
72387: LD_INT 26
72389: PUSH
72390: LD_INT 27
72392: PUSH
72393: LD_INT 28
72395: PUSH
72396: LD_INT 29
72398: PUSH
72399: LD_INT 30
72401: PUSH
72402: LD_INT 31
72404: PUSH
72405: LD_INT 32
72407: PUSH
72408: LD_INT 33
72410: PUSH
72411: LD_INT 34
72413: PUSH
72414: LD_INT 36
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 101
72456: PUSH
72457: LD_INT 102
72459: PUSH
72460: LD_INT 103
72462: PUSH
72463: LD_INT 104
72465: PUSH
72466: LD_INT 105
72468: PUSH
72469: LD_INT 106
72471: PUSH
72472: LD_INT 107
72474: PUSH
72475: LD_INT 108
72477: PUSH
72478: LD_INT 109
72480: PUSH
72481: LD_INT 110
72483: PUSH
72484: LD_INT 111
72486: PUSH
72487: LD_INT 112
72489: PUSH
72490: LD_INT 113
72492: PUSH
72493: LD_INT 114
72495: PUSH
72496: LD_INT 116
72498: PUSH
72499: LD_INT 117
72501: PUSH
72502: LD_INT 118
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: ST_TO_ADDR
72528: GO 73303
72530: LD_INT 16
72532: DOUBLE
72533: EQUAL
72534: IFTRUE 72538
72536: GO 72674
72538: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
72539: LD_ADDR_VAR 0 2
72543: PUSH
72544: LD_INT 2
72546: PUSH
72547: LD_INT 4
72549: PUSH
72550: LD_INT 5
72552: PUSH
72553: LD_INT 7
72555: PUSH
72556: LD_INT 11
72558: PUSH
72559: LD_INT 12
72561: PUSH
72562: LD_INT 15
72564: PUSH
72565: LD_INT 16
72567: PUSH
72568: LD_INT 20
72570: PUSH
72571: LD_INT 21
72573: PUSH
72574: LD_INT 22
72576: PUSH
72577: LD_INT 23
72579: PUSH
72580: LD_INT 25
72582: PUSH
72583: LD_INT 26
72585: PUSH
72586: LD_INT 30
72588: PUSH
72589: LD_INT 31
72591: PUSH
72592: LD_INT 32
72594: PUSH
72595: LD_INT 33
72597: PUSH
72598: LD_INT 34
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 101
72624: PUSH
72625: LD_INT 102
72627: PUSH
72628: LD_INT 103
72630: PUSH
72631: LD_INT 106
72633: PUSH
72634: LD_INT 108
72636: PUSH
72637: LD_INT 112
72639: PUSH
72640: LD_INT 113
72642: PUSH
72643: LD_INT 114
72645: PUSH
72646: LD_INT 116
72648: PUSH
72649: LD_INT 117
72651: PUSH
72652: LD_INT 118
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: ST_TO_ADDR
72672: GO 73303
72674: LD_INT 17
72676: DOUBLE
72677: EQUAL
72678: IFTRUE 72682
72680: GO 72906
72682: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
72683: LD_ADDR_VAR 0 2
72687: PUSH
72688: LD_INT 1
72690: PUSH
72691: LD_INT 2
72693: PUSH
72694: LD_INT 3
72696: PUSH
72697: LD_INT 4
72699: PUSH
72700: LD_INT 5
72702: PUSH
72703: LD_INT 6
72705: PUSH
72706: LD_INT 7
72708: PUSH
72709: LD_INT 8
72711: PUSH
72712: LD_INT 9
72714: PUSH
72715: LD_INT 10
72717: PUSH
72718: LD_INT 11
72720: PUSH
72721: LD_INT 12
72723: PUSH
72724: LD_INT 13
72726: PUSH
72727: LD_INT 14
72729: PUSH
72730: LD_INT 15
72732: PUSH
72733: LD_INT 16
72735: PUSH
72736: LD_INT 17
72738: PUSH
72739: LD_INT 18
72741: PUSH
72742: LD_INT 19
72744: PUSH
72745: LD_INT 20
72747: PUSH
72748: LD_INT 21
72750: PUSH
72751: LD_INT 22
72753: PUSH
72754: LD_INT 23
72756: PUSH
72757: LD_INT 24
72759: PUSH
72760: LD_INT 25
72762: PUSH
72763: LD_INT 26
72765: PUSH
72766: LD_INT 27
72768: PUSH
72769: LD_INT 28
72771: PUSH
72772: LD_INT 29
72774: PUSH
72775: LD_INT 30
72777: PUSH
72778: LD_INT 31
72780: PUSH
72781: LD_INT 32
72783: PUSH
72784: LD_INT 33
72786: PUSH
72787: LD_INT 34
72789: PUSH
72790: LD_INT 36
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 101
72832: PUSH
72833: LD_INT 102
72835: PUSH
72836: LD_INT 103
72838: PUSH
72839: LD_INT 104
72841: PUSH
72842: LD_INT 105
72844: PUSH
72845: LD_INT 106
72847: PUSH
72848: LD_INT 107
72850: PUSH
72851: LD_INT 108
72853: PUSH
72854: LD_INT 109
72856: PUSH
72857: LD_INT 110
72859: PUSH
72860: LD_INT 111
72862: PUSH
72863: LD_INT 112
72865: PUSH
72866: LD_INT 113
72868: PUSH
72869: LD_INT 114
72871: PUSH
72872: LD_INT 116
72874: PUSH
72875: LD_INT 117
72877: PUSH
72878: LD_INT 118
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: ST_TO_ADDR
72904: GO 73303
72906: LD_INT 18
72908: DOUBLE
72909: EQUAL
72910: IFTRUE 72914
72912: GO 73062
72914: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
72915: LD_ADDR_VAR 0 2
72919: PUSH
72920: LD_INT 2
72922: PUSH
72923: LD_INT 4
72925: PUSH
72926: LD_INT 5
72928: PUSH
72929: LD_INT 7
72931: PUSH
72932: LD_INT 11
72934: PUSH
72935: LD_INT 12
72937: PUSH
72938: LD_INT 15
72940: PUSH
72941: LD_INT 16
72943: PUSH
72944: LD_INT 20
72946: PUSH
72947: LD_INT 21
72949: PUSH
72950: LD_INT 22
72952: PUSH
72953: LD_INT 23
72955: PUSH
72956: LD_INT 25
72958: PUSH
72959: LD_INT 26
72961: PUSH
72962: LD_INT 30
72964: PUSH
72965: LD_INT 31
72967: PUSH
72968: LD_INT 32
72970: PUSH
72971: LD_INT 33
72973: PUSH
72974: LD_INT 34
72976: PUSH
72977: LD_INT 35
72979: PUSH
72980: LD_INT 36
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 101
73008: PUSH
73009: LD_INT 102
73011: PUSH
73012: LD_INT 103
73014: PUSH
73015: LD_INT 106
73017: PUSH
73018: LD_INT 108
73020: PUSH
73021: LD_INT 112
73023: PUSH
73024: LD_INT 113
73026: PUSH
73027: LD_INT 114
73029: PUSH
73030: LD_INT 115
73032: PUSH
73033: LD_INT 116
73035: PUSH
73036: LD_INT 117
73038: PUSH
73039: LD_INT 118
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: ST_TO_ADDR
73060: GO 73303
73062: LD_INT 19
73064: DOUBLE
73065: EQUAL
73066: IFTRUE 73070
73068: GO 73302
73070: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
73071: LD_ADDR_VAR 0 2
73075: PUSH
73076: LD_INT 1
73078: PUSH
73079: LD_INT 2
73081: PUSH
73082: LD_INT 3
73084: PUSH
73085: LD_INT 4
73087: PUSH
73088: LD_INT 5
73090: PUSH
73091: LD_INT 6
73093: PUSH
73094: LD_INT 7
73096: PUSH
73097: LD_INT 8
73099: PUSH
73100: LD_INT 9
73102: PUSH
73103: LD_INT 10
73105: PUSH
73106: LD_INT 11
73108: PUSH
73109: LD_INT 12
73111: PUSH
73112: LD_INT 13
73114: PUSH
73115: LD_INT 14
73117: PUSH
73118: LD_INT 15
73120: PUSH
73121: LD_INT 16
73123: PUSH
73124: LD_INT 17
73126: PUSH
73127: LD_INT 18
73129: PUSH
73130: LD_INT 19
73132: PUSH
73133: LD_INT 20
73135: PUSH
73136: LD_INT 21
73138: PUSH
73139: LD_INT 22
73141: PUSH
73142: LD_INT 23
73144: PUSH
73145: LD_INT 24
73147: PUSH
73148: LD_INT 25
73150: PUSH
73151: LD_INT 26
73153: PUSH
73154: LD_INT 27
73156: PUSH
73157: LD_INT 28
73159: PUSH
73160: LD_INT 29
73162: PUSH
73163: LD_INT 30
73165: PUSH
73166: LD_INT 31
73168: PUSH
73169: LD_INT 32
73171: PUSH
73172: LD_INT 33
73174: PUSH
73175: LD_INT 34
73177: PUSH
73178: LD_INT 35
73180: PUSH
73181: LD_INT 36
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: PUSH
73222: LD_INT 101
73224: PUSH
73225: LD_INT 102
73227: PUSH
73228: LD_INT 103
73230: PUSH
73231: LD_INT 104
73233: PUSH
73234: LD_INT 105
73236: PUSH
73237: LD_INT 106
73239: PUSH
73240: LD_INT 107
73242: PUSH
73243: LD_INT 108
73245: PUSH
73246: LD_INT 109
73248: PUSH
73249: LD_INT 110
73251: PUSH
73252: LD_INT 111
73254: PUSH
73255: LD_INT 112
73257: PUSH
73258: LD_INT 113
73260: PUSH
73261: LD_INT 114
73263: PUSH
73264: LD_INT 115
73266: PUSH
73267: LD_INT 116
73269: PUSH
73270: LD_INT 117
73272: PUSH
73273: LD_INT 118
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: ST_TO_ADDR
73300: GO 73303
73302: POP
// end else
73303: GO 73534
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
73305: LD_ADDR_VAR 0 2
73309: PUSH
73310: LD_INT 1
73312: PUSH
73313: LD_INT 2
73315: PUSH
73316: LD_INT 3
73318: PUSH
73319: LD_INT 4
73321: PUSH
73322: LD_INT 5
73324: PUSH
73325: LD_INT 6
73327: PUSH
73328: LD_INT 7
73330: PUSH
73331: LD_INT 8
73333: PUSH
73334: LD_INT 9
73336: PUSH
73337: LD_INT 10
73339: PUSH
73340: LD_INT 11
73342: PUSH
73343: LD_INT 12
73345: PUSH
73346: LD_INT 13
73348: PUSH
73349: LD_INT 14
73351: PUSH
73352: LD_INT 15
73354: PUSH
73355: LD_INT 16
73357: PUSH
73358: LD_INT 17
73360: PUSH
73361: LD_INT 18
73363: PUSH
73364: LD_INT 19
73366: PUSH
73367: LD_INT 20
73369: PUSH
73370: LD_INT 21
73372: PUSH
73373: LD_INT 22
73375: PUSH
73376: LD_INT 23
73378: PUSH
73379: LD_INT 24
73381: PUSH
73382: LD_INT 25
73384: PUSH
73385: LD_INT 26
73387: PUSH
73388: LD_INT 27
73390: PUSH
73391: LD_INT 28
73393: PUSH
73394: LD_INT 29
73396: PUSH
73397: LD_INT 30
73399: PUSH
73400: LD_INT 31
73402: PUSH
73403: LD_INT 32
73405: PUSH
73406: LD_INT 33
73408: PUSH
73409: LD_INT 34
73411: PUSH
73412: LD_INT 35
73414: PUSH
73415: LD_INT 36
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: PUSH
73456: LD_INT 101
73458: PUSH
73459: LD_INT 102
73461: PUSH
73462: LD_INT 103
73464: PUSH
73465: LD_INT 104
73467: PUSH
73468: LD_INT 105
73470: PUSH
73471: LD_INT 106
73473: PUSH
73474: LD_INT 107
73476: PUSH
73477: LD_INT 108
73479: PUSH
73480: LD_INT 109
73482: PUSH
73483: LD_INT 110
73485: PUSH
73486: LD_INT 111
73488: PUSH
73489: LD_INT 112
73491: PUSH
73492: LD_INT 113
73494: PUSH
73495: LD_INT 114
73497: PUSH
73498: LD_INT 115
73500: PUSH
73501: LD_INT 116
73503: PUSH
73504: LD_INT 117
73506: PUSH
73507: LD_INT 118
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: LIST
73514: LIST
73515: LIST
73516: LIST
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: ST_TO_ADDR
// if result then
73534: LD_VAR 0 2
73538: IFFALSE 74324
// begin normal :=  ;
73540: LD_ADDR_VAR 0 5
73544: PUSH
73545: LD_STRING 
73547: ST_TO_ADDR
// hardcore :=  ;
73548: LD_ADDR_VAR 0 6
73552: PUSH
73553: LD_STRING 
73555: ST_TO_ADDR
// active :=  ;
73556: LD_ADDR_VAR 0 7
73560: PUSH
73561: LD_STRING 
73563: ST_TO_ADDR
// for i = 1 to normalCounter do
73564: LD_ADDR_VAR 0 8
73568: PUSH
73569: DOUBLE
73570: LD_INT 1
73572: DEC
73573: ST_TO_ADDR
73574: LD_EXP 62
73578: PUSH
73579: FOR_TO
73580: IFFALSE 73681
// begin tmp := 0 ;
73582: LD_ADDR_VAR 0 3
73586: PUSH
73587: LD_STRING 0
73589: ST_TO_ADDR
// if result [ 1 ] then
73590: LD_VAR 0 2
73594: PUSH
73595: LD_INT 1
73597: ARRAY
73598: IFFALSE 73663
// if result [ 1 ] [ 1 ] = i then
73600: LD_VAR 0 2
73604: PUSH
73605: LD_INT 1
73607: ARRAY
73608: PUSH
73609: LD_INT 1
73611: ARRAY
73612: PUSH
73613: LD_VAR 0 8
73617: EQUAL
73618: IFFALSE 73663
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
73620: LD_ADDR_VAR 0 2
73624: PUSH
73625: LD_VAR 0 2
73629: PPUSH
73630: LD_INT 1
73632: PPUSH
73633: LD_VAR 0 2
73637: PUSH
73638: LD_INT 1
73640: ARRAY
73641: PPUSH
73642: LD_INT 1
73644: PPUSH
73645: CALL_OW 3
73649: PPUSH
73650: CALL_OW 1
73654: ST_TO_ADDR
// tmp := 1 ;
73655: LD_ADDR_VAR 0 3
73659: PUSH
73660: LD_STRING 1
73662: ST_TO_ADDR
// end ; normal := normal & tmp ;
73663: LD_ADDR_VAR 0 5
73667: PUSH
73668: LD_VAR 0 5
73672: PUSH
73673: LD_VAR 0 3
73677: STR
73678: ST_TO_ADDR
// end ;
73679: GO 73579
73681: POP
73682: POP
// for i = 1 to hardcoreCounter do
73683: LD_ADDR_VAR 0 8
73687: PUSH
73688: DOUBLE
73689: LD_INT 1
73691: DEC
73692: ST_TO_ADDR
73693: LD_EXP 63
73697: PUSH
73698: FOR_TO
73699: IFFALSE 73804
// begin tmp := 0 ;
73701: LD_ADDR_VAR 0 3
73705: PUSH
73706: LD_STRING 0
73708: ST_TO_ADDR
// if result [ 2 ] then
73709: LD_VAR 0 2
73713: PUSH
73714: LD_INT 2
73716: ARRAY
73717: IFFALSE 73786
// if result [ 2 ] [ 1 ] = 100 + i then
73719: LD_VAR 0 2
73723: PUSH
73724: LD_INT 2
73726: ARRAY
73727: PUSH
73728: LD_INT 1
73730: ARRAY
73731: PUSH
73732: LD_INT 100
73734: PUSH
73735: LD_VAR 0 8
73739: PLUS
73740: EQUAL
73741: IFFALSE 73786
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
73743: LD_ADDR_VAR 0 2
73747: PUSH
73748: LD_VAR 0 2
73752: PPUSH
73753: LD_INT 2
73755: PPUSH
73756: LD_VAR 0 2
73760: PUSH
73761: LD_INT 2
73763: ARRAY
73764: PPUSH
73765: LD_INT 1
73767: PPUSH
73768: CALL_OW 3
73772: PPUSH
73773: CALL_OW 1
73777: ST_TO_ADDR
// tmp := 1 ;
73778: LD_ADDR_VAR 0 3
73782: PUSH
73783: LD_STRING 1
73785: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
73786: LD_ADDR_VAR 0 6
73790: PUSH
73791: LD_VAR 0 6
73795: PUSH
73796: LD_VAR 0 3
73800: STR
73801: ST_TO_ADDR
// end ;
73802: GO 73698
73804: POP
73805: POP
// if isGameLoad then
73806: LD_VAR 0 1
73810: IFFALSE 74285
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
73812: LD_ADDR_VAR 0 4
73816: PUSH
73817: LD_EXP 66
73821: PUSH
73822: LD_EXP 65
73826: PUSH
73827: LD_EXP 67
73831: PUSH
73832: LD_EXP 64
73836: PUSH
73837: LD_EXP 68
73841: PUSH
73842: LD_EXP 69
73846: PUSH
73847: LD_EXP 70
73851: PUSH
73852: LD_EXP 71
73856: PUSH
73857: LD_EXP 72
73861: PUSH
73862: LD_EXP 73
73866: PUSH
73867: LD_EXP 74
73871: PUSH
73872: LD_EXP 75
73876: PUSH
73877: LD_EXP 76
73881: PUSH
73882: LD_EXP 77
73886: PUSH
73887: LD_EXP 85
73891: PUSH
73892: LD_EXP 86
73896: PUSH
73897: LD_EXP 87
73901: PUSH
73902: LD_EXP 88
73906: PUSH
73907: LD_EXP 90
73911: PUSH
73912: LD_EXP 91
73916: PUSH
73917: LD_EXP 92
73921: PUSH
73922: LD_EXP 95
73926: PUSH
73927: LD_EXP 97
73931: PUSH
73932: LD_EXP 98
73936: PUSH
73937: LD_EXP 99
73941: PUSH
73942: LD_EXP 101
73946: PUSH
73947: LD_EXP 102
73951: PUSH
73952: LD_EXP 105
73956: PUSH
73957: LD_EXP 106
73961: PUSH
73962: LD_EXP 107
73966: PUSH
73967: LD_EXP 108
73971: PUSH
73972: LD_EXP 109
73976: PUSH
73977: LD_EXP 110
73981: PUSH
73982: LD_EXP 111
73986: PUSH
73987: LD_EXP 112
73991: PUSH
73992: LD_EXP 113
73996: PUSH
73997: LD_EXP 78
74001: PUSH
74002: LD_EXP 79
74006: PUSH
74007: LD_EXP 82
74011: PUSH
74012: LD_EXP 83
74016: PUSH
74017: LD_EXP 84
74021: PUSH
74022: LD_EXP 80
74026: PUSH
74027: LD_EXP 81
74031: PUSH
74032: LD_EXP 89
74036: PUSH
74037: LD_EXP 93
74041: PUSH
74042: LD_EXP 94
74046: PUSH
74047: LD_EXP 96
74051: PUSH
74052: LD_EXP 100
74056: PUSH
74057: LD_EXP 103
74061: PUSH
74062: LD_EXP 104
74066: PUSH
74067: LD_EXP 114
74071: PUSH
74072: LD_EXP 115
74076: PUSH
74077: LD_EXP 116
74081: PUSH
74082: LD_EXP 117
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: ST_TO_ADDR
// tmp :=  ;
74143: LD_ADDR_VAR 0 3
74147: PUSH
74148: LD_STRING 
74150: ST_TO_ADDR
// for i = 1 to normalCounter do
74151: LD_ADDR_VAR 0 8
74155: PUSH
74156: DOUBLE
74157: LD_INT 1
74159: DEC
74160: ST_TO_ADDR
74161: LD_EXP 62
74165: PUSH
74166: FOR_TO
74167: IFFALSE 74203
// begin if flags [ i ] then
74169: LD_VAR 0 4
74173: PUSH
74174: LD_VAR 0 8
74178: ARRAY
74179: IFFALSE 74201
// tmp := tmp & i & ; ;
74181: LD_ADDR_VAR 0 3
74185: PUSH
74186: LD_VAR 0 3
74190: PUSH
74191: LD_VAR 0 8
74195: STR
74196: PUSH
74197: LD_STRING ;
74199: STR
74200: ST_TO_ADDR
// end ;
74201: GO 74166
74203: POP
74204: POP
// for i = 1 to hardcoreCounter do
74205: LD_ADDR_VAR 0 8
74209: PUSH
74210: DOUBLE
74211: LD_INT 1
74213: DEC
74214: ST_TO_ADDR
74215: LD_EXP 63
74219: PUSH
74220: FOR_TO
74221: IFFALSE 74267
// begin if flags [ normalCounter + i ] then
74223: LD_VAR 0 4
74227: PUSH
74228: LD_EXP 62
74232: PUSH
74233: LD_VAR 0 8
74237: PLUS
74238: ARRAY
74239: IFFALSE 74265
// tmp := tmp & ( 100 + i ) & ; ;
74241: LD_ADDR_VAR 0 3
74245: PUSH
74246: LD_VAR 0 3
74250: PUSH
74251: LD_INT 100
74253: PUSH
74254: LD_VAR 0 8
74258: PLUS
74259: STR
74260: PUSH
74261: LD_STRING ;
74263: STR
74264: ST_TO_ADDR
// end ;
74265: GO 74220
74267: POP
74268: POP
// if tmp then
74269: LD_VAR 0 3
74273: IFFALSE 74285
// active := tmp ;
74275: LD_ADDR_VAR 0 7
74279: PUSH
74280: LD_VAR 0 3
74284: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
74285: LD_STRING getStreamItemsFromMission("
74287: PUSH
74288: LD_VAR 0 5
74292: STR
74293: PUSH
74294: LD_STRING ","
74296: STR
74297: PUSH
74298: LD_VAR 0 6
74302: STR
74303: PUSH
74304: LD_STRING ","
74306: STR
74307: PUSH
74308: LD_VAR 0 7
74312: STR
74313: PUSH
74314: LD_STRING ")
74316: STR
74317: PPUSH
74318: CALL_OW 559
// end else
74322: GO 74331
// ToLua ( getStreamItemsFromMission("","","") ) ;
74324: LD_STRING getStreamItemsFromMission("","","")
74326: PPUSH
74327: CALL_OW 559
// end ;
74331: LD_VAR 0 2
74335: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
74336: LD_EXP 61
74340: PUSH
74341: LD_EXP 66
74345: AND
74346: IFFALSE 74470
74348: GO 74350
74350: DISABLE
74351: LD_INT 0
74353: PPUSH
74354: PPUSH
// begin enable ;
74355: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
74356: LD_ADDR_VAR 0 2
74360: PUSH
74361: LD_INT 22
74363: PUSH
74364: LD_OWVAR 2
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PUSH
74373: LD_INT 2
74375: PUSH
74376: LD_INT 34
74378: PUSH
74379: LD_INT 7
74381: PUSH
74382: EMPTY
74383: LIST
74384: LIST
74385: PUSH
74386: LD_INT 34
74388: PUSH
74389: LD_INT 45
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: PUSH
74396: LD_INT 34
74398: PUSH
74399: LD_INT 28
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: PUSH
74406: LD_INT 34
74408: PUSH
74409: LD_INT 47
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: PPUSH
74427: CALL_OW 69
74431: ST_TO_ADDR
// if not tmp then
74432: LD_VAR 0 2
74436: NOT
74437: IFFALSE 74441
// exit ;
74439: GO 74470
// for i in tmp do
74441: LD_ADDR_VAR 0 1
74445: PUSH
74446: LD_VAR 0 2
74450: PUSH
74451: FOR_IN
74452: IFFALSE 74468
// begin SetLives ( i , 0 ) ;
74454: LD_VAR 0 1
74458: PPUSH
74459: LD_INT 0
74461: PPUSH
74462: CALL_OW 234
// end ;
74466: GO 74451
74468: POP
74469: POP
// end ;
74470: PPOPN 2
74472: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
74473: LD_EXP 61
74477: PUSH
74478: LD_EXP 67
74482: AND
74483: IFFALSE 74567
74485: GO 74487
74487: DISABLE
74488: LD_INT 0
74490: PPUSH
74491: PPUSH
// begin enable ;
74492: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
74493: LD_ADDR_VAR 0 2
74497: PUSH
74498: LD_INT 22
74500: PUSH
74501: LD_OWVAR 2
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: PUSH
74510: LD_INT 32
74512: PUSH
74513: LD_INT 3
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PPUSH
74524: CALL_OW 69
74528: ST_TO_ADDR
// if not tmp then
74529: LD_VAR 0 2
74533: NOT
74534: IFFALSE 74538
// exit ;
74536: GO 74567
// for i in tmp do
74538: LD_ADDR_VAR 0 1
74542: PUSH
74543: LD_VAR 0 2
74547: PUSH
74548: FOR_IN
74549: IFFALSE 74565
// begin SetLives ( i , 0 ) ;
74551: LD_VAR 0 1
74555: PPUSH
74556: LD_INT 0
74558: PPUSH
74559: CALL_OW 234
// end ;
74563: GO 74548
74565: POP
74566: POP
// end ;
74567: PPOPN 2
74569: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
74570: LD_EXP 61
74574: PUSH
74575: LD_EXP 64
74579: AND
74580: IFFALSE 74673
74582: GO 74584
74584: DISABLE
74585: LD_INT 0
74587: PPUSH
// begin enable ;
74588: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
74589: LD_ADDR_VAR 0 1
74593: PUSH
74594: LD_INT 22
74596: PUSH
74597: LD_OWVAR 2
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PUSH
74606: LD_INT 2
74608: PUSH
74609: LD_INT 25
74611: PUSH
74612: LD_INT 5
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: LD_INT 25
74621: PUSH
74622: LD_INT 9
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 25
74631: PUSH
74632: LD_INT 8
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: PPUSH
74649: CALL_OW 69
74653: PUSH
74654: FOR_IN
74655: IFFALSE 74671
// begin SetClass ( i , 1 ) ;
74657: LD_VAR 0 1
74661: PPUSH
74662: LD_INT 1
74664: PPUSH
74665: CALL_OW 336
// end ;
74669: GO 74654
74671: POP
74672: POP
// end ;
74673: PPOPN 1
74675: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
74676: LD_EXP 61
74680: PUSH
74681: LD_EXP 65
74685: AND
74686: PUSH
74687: LD_OWVAR 65
74691: PUSH
74692: LD_INT 7
74694: LESS
74695: AND
74696: IFFALSE 74710
74698: GO 74700
74700: DISABLE
// begin enable ;
74701: ENABLE
// game_speed := 7 ;
74702: LD_ADDR_OWVAR 65
74706: PUSH
74707: LD_INT 7
74709: ST_TO_ADDR
// end ;
74710: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
74711: LD_EXP 61
74715: PUSH
74716: LD_EXP 68
74720: AND
74721: IFFALSE 74923
74723: GO 74725
74725: DISABLE
74726: LD_INT 0
74728: PPUSH
74729: PPUSH
74730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74731: LD_ADDR_VAR 0 3
74735: PUSH
74736: LD_INT 81
74738: PUSH
74739: LD_OWVAR 2
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_INT 21
74750: PUSH
74751: LD_INT 1
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PUSH
74758: EMPTY
74759: LIST
74760: LIST
74761: PPUSH
74762: CALL_OW 69
74766: ST_TO_ADDR
// if not tmp then
74767: LD_VAR 0 3
74771: NOT
74772: IFFALSE 74776
// exit ;
74774: GO 74923
// if tmp > 5 then
74776: LD_VAR 0 3
74780: PUSH
74781: LD_INT 5
74783: GREATER
74784: IFFALSE 74796
// k := 5 else
74786: LD_ADDR_VAR 0 2
74790: PUSH
74791: LD_INT 5
74793: ST_TO_ADDR
74794: GO 74806
// k := tmp ;
74796: LD_ADDR_VAR 0 2
74800: PUSH
74801: LD_VAR 0 3
74805: ST_TO_ADDR
// for i := 1 to k do
74806: LD_ADDR_VAR 0 1
74810: PUSH
74811: DOUBLE
74812: LD_INT 1
74814: DEC
74815: ST_TO_ADDR
74816: LD_VAR 0 2
74820: PUSH
74821: FOR_TO
74822: IFFALSE 74921
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
74824: LD_VAR 0 3
74828: PUSH
74829: LD_VAR 0 1
74833: ARRAY
74834: PPUSH
74835: LD_VAR 0 1
74839: PUSH
74840: LD_INT 4
74842: MOD
74843: PUSH
74844: LD_INT 1
74846: PLUS
74847: PPUSH
74848: CALL_OW 259
74852: PUSH
74853: LD_INT 10
74855: LESS
74856: IFFALSE 74919
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
74858: LD_VAR 0 3
74862: PUSH
74863: LD_VAR 0 1
74867: ARRAY
74868: PPUSH
74869: LD_VAR 0 1
74873: PUSH
74874: LD_INT 4
74876: MOD
74877: PUSH
74878: LD_INT 1
74880: PLUS
74881: PPUSH
74882: LD_VAR 0 3
74886: PUSH
74887: LD_VAR 0 1
74891: ARRAY
74892: PPUSH
74893: LD_VAR 0 1
74897: PUSH
74898: LD_INT 4
74900: MOD
74901: PUSH
74902: LD_INT 1
74904: PLUS
74905: PPUSH
74906: CALL_OW 259
74910: PUSH
74911: LD_INT 1
74913: PLUS
74914: PPUSH
74915: CALL_OW 237
74919: GO 74821
74921: POP
74922: POP
// end ;
74923: PPOPN 3
74925: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
74926: LD_EXP 61
74930: PUSH
74931: LD_EXP 69
74935: AND
74936: IFFALSE 74956
74938: GO 74940
74940: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
74941: LD_INT 4
74943: PPUSH
74944: LD_OWVAR 2
74948: PPUSH
74949: LD_INT 0
74951: PPUSH
74952: CALL_OW 324
74956: END
// every 0 0$1 trigger StreamModeActive and sShovel do
74957: LD_EXP 61
74961: PUSH
74962: LD_EXP 98
74966: AND
74967: IFFALSE 74987
74969: GO 74971
74971: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
74972: LD_INT 19
74974: PPUSH
74975: LD_OWVAR 2
74979: PPUSH
74980: LD_INT 0
74982: PPUSH
74983: CALL_OW 324
74987: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
74988: LD_EXP 61
74992: PUSH
74993: LD_EXP 70
74997: AND
74998: IFFALSE 75100
75000: GO 75002
75002: DISABLE
75003: LD_INT 0
75005: PPUSH
75006: PPUSH
// begin enable ;
75007: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
75008: LD_ADDR_VAR 0 2
75012: PUSH
75013: LD_INT 22
75015: PUSH
75016: LD_OWVAR 2
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: PUSH
75025: LD_INT 2
75027: PUSH
75028: LD_INT 34
75030: PUSH
75031: LD_INT 11
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: PUSH
75038: LD_INT 34
75040: PUSH
75041: LD_INT 30
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: PUSH
75048: EMPTY
75049: LIST
75050: LIST
75051: LIST
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PPUSH
75057: CALL_OW 69
75061: ST_TO_ADDR
// if not tmp then
75062: LD_VAR 0 2
75066: NOT
75067: IFFALSE 75071
// exit ;
75069: GO 75100
// for i in tmp do
75071: LD_ADDR_VAR 0 1
75075: PUSH
75076: LD_VAR 0 2
75080: PUSH
75081: FOR_IN
75082: IFFALSE 75098
// begin SetLives ( i , 0 ) ;
75084: LD_VAR 0 1
75088: PPUSH
75089: LD_INT 0
75091: PPUSH
75092: CALL_OW 234
// end ;
75096: GO 75081
75098: POP
75099: POP
// end ;
75100: PPOPN 2
75102: END
// every 0 0$1 trigger StreamModeActive and sBunker do
75103: LD_EXP 61
75107: PUSH
75108: LD_EXP 71
75112: AND
75113: IFFALSE 75133
75115: GO 75117
75117: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
75118: LD_INT 32
75120: PPUSH
75121: LD_OWVAR 2
75125: PPUSH
75126: LD_INT 0
75128: PPUSH
75129: CALL_OW 324
75133: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
75134: LD_EXP 61
75138: PUSH
75139: LD_EXP 72
75143: AND
75144: IFFALSE 75325
75146: GO 75148
75148: DISABLE
75149: LD_INT 0
75151: PPUSH
75152: PPUSH
75153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
75154: LD_ADDR_VAR 0 2
75158: PUSH
75159: LD_INT 22
75161: PUSH
75162: LD_OWVAR 2
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 33
75173: PUSH
75174: LD_INT 3
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PPUSH
75185: CALL_OW 69
75189: ST_TO_ADDR
// if not tmp then
75190: LD_VAR 0 2
75194: NOT
75195: IFFALSE 75199
// exit ;
75197: GO 75325
// side := 0 ;
75199: LD_ADDR_VAR 0 3
75203: PUSH
75204: LD_INT 0
75206: ST_TO_ADDR
// for i := 1 to 8 do
75207: LD_ADDR_VAR 0 1
75211: PUSH
75212: DOUBLE
75213: LD_INT 1
75215: DEC
75216: ST_TO_ADDR
75217: LD_INT 8
75219: PUSH
75220: FOR_TO
75221: IFFALSE 75269
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
75223: LD_OWVAR 2
75227: PUSH
75228: LD_VAR 0 1
75232: NONEQUAL
75233: PUSH
75234: LD_OWVAR 2
75238: PPUSH
75239: LD_VAR 0 1
75243: PPUSH
75244: CALL_OW 81
75248: PUSH
75249: LD_INT 2
75251: EQUAL
75252: AND
75253: IFFALSE 75267
// begin side := i ;
75255: LD_ADDR_VAR 0 3
75259: PUSH
75260: LD_VAR 0 1
75264: ST_TO_ADDR
// break ;
75265: GO 75269
// end ;
75267: GO 75220
75269: POP
75270: POP
// if not side then
75271: LD_VAR 0 3
75275: NOT
75276: IFFALSE 75280
// exit ;
75278: GO 75325
// for i := 1 to tmp do
75280: LD_ADDR_VAR 0 1
75284: PUSH
75285: DOUBLE
75286: LD_INT 1
75288: DEC
75289: ST_TO_ADDR
75290: LD_VAR 0 2
75294: PUSH
75295: FOR_TO
75296: IFFALSE 75323
// if Prob ( 60 ) then
75298: LD_INT 60
75300: PPUSH
75301: CALL_OW 13
75305: IFFALSE 75321
// SetSide ( i , side ) ;
75307: LD_VAR 0 1
75311: PPUSH
75312: LD_VAR 0 3
75316: PPUSH
75317: CALL_OW 235
75321: GO 75295
75323: POP
75324: POP
// end ;
75325: PPOPN 3
75327: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
75328: LD_EXP 61
75332: PUSH
75333: LD_EXP 74
75337: AND
75338: IFFALSE 75457
75340: GO 75342
75342: DISABLE
75343: LD_INT 0
75345: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
75346: LD_ADDR_VAR 0 1
75350: PUSH
75351: LD_INT 22
75353: PUSH
75354: LD_OWVAR 2
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: PUSH
75363: LD_INT 21
75365: PUSH
75366: LD_INT 1
75368: PUSH
75369: EMPTY
75370: LIST
75371: LIST
75372: PUSH
75373: LD_INT 3
75375: PUSH
75376: LD_INT 23
75378: PUSH
75379: LD_INT 0
75381: PUSH
75382: EMPTY
75383: LIST
75384: LIST
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: LIST
75394: PPUSH
75395: CALL_OW 69
75399: PUSH
75400: FOR_IN
75401: IFFALSE 75455
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
75403: LD_VAR 0 1
75407: PPUSH
75408: CALL_OW 257
75412: PUSH
75413: LD_INT 1
75415: PUSH
75416: LD_INT 2
75418: PUSH
75419: LD_INT 3
75421: PUSH
75422: LD_INT 4
75424: PUSH
75425: EMPTY
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: IN
75431: IFFALSE 75453
// SetClass ( un , rand ( 1 , 4 ) ) ;
75433: LD_VAR 0 1
75437: PPUSH
75438: LD_INT 1
75440: PPUSH
75441: LD_INT 4
75443: PPUSH
75444: CALL_OW 12
75448: PPUSH
75449: CALL_OW 336
75453: GO 75400
75455: POP
75456: POP
// end ;
75457: PPOPN 1
75459: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
75460: LD_EXP 61
75464: PUSH
75465: LD_EXP 73
75469: AND
75470: IFFALSE 75549
75472: GO 75474
75474: DISABLE
75475: LD_INT 0
75477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75478: LD_ADDR_VAR 0 1
75482: PUSH
75483: LD_INT 22
75485: PUSH
75486: LD_OWVAR 2
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 21
75497: PUSH
75498: LD_INT 3
75500: PUSH
75501: EMPTY
75502: LIST
75503: LIST
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: PPUSH
75509: CALL_OW 69
75513: ST_TO_ADDR
// if not tmp then
75514: LD_VAR 0 1
75518: NOT
75519: IFFALSE 75523
// exit ;
75521: GO 75549
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
75523: LD_VAR 0 1
75527: PUSH
75528: LD_INT 1
75530: PPUSH
75531: LD_VAR 0 1
75535: PPUSH
75536: CALL_OW 12
75540: ARRAY
75541: PPUSH
75542: LD_INT 100
75544: PPUSH
75545: CALL_OW 234
// end ;
75549: PPOPN 1
75551: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
75552: LD_EXP 61
75556: PUSH
75557: LD_EXP 75
75561: AND
75562: IFFALSE 75660
75564: GO 75566
75566: DISABLE
75567: LD_INT 0
75569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75570: LD_ADDR_VAR 0 1
75574: PUSH
75575: LD_INT 22
75577: PUSH
75578: LD_OWVAR 2
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: PUSH
75587: LD_INT 21
75589: PUSH
75590: LD_INT 1
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: PPUSH
75601: CALL_OW 69
75605: ST_TO_ADDR
// if not tmp then
75606: LD_VAR 0 1
75610: NOT
75611: IFFALSE 75615
// exit ;
75613: GO 75660
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
75615: LD_VAR 0 1
75619: PUSH
75620: LD_INT 1
75622: PPUSH
75623: LD_VAR 0 1
75627: PPUSH
75628: CALL_OW 12
75632: ARRAY
75633: PPUSH
75634: LD_INT 1
75636: PPUSH
75637: LD_INT 4
75639: PPUSH
75640: CALL_OW 12
75644: PPUSH
75645: LD_INT 3000
75647: PPUSH
75648: LD_INT 9000
75650: PPUSH
75651: CALL_OW 12
75655: PPUSH
75656: CALL_OW 492
// end ;
75660: PPOPN 1
75662: END
// every 0 0$1 trigger StreamModeActive and sDepot do
75663: LD_EXP 61
75667: PUSH
75668: LD_EXP 76
75672: AND
75673: IFFALSE 75693
75675: GO 75677
75677: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
75678: LD_INT 1
75680: PPUSH
75681: LD_OWVAR 2
75685: PPUSH
75686: LD_INT 0
75688: PPUSH
75689: CALL_OW 324
75693: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
75694: LD_EXP 61
75698: PUSH
75699: LD_EXP 77
75703: AND
75704: IFFALSE 75787
75706: GO 75708
75708: DISABLE
75709: LD_INT 0
75711: PPUSH
75712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75713: LD_ADDR_VAR 0 2
75717: PUSH
75718: LD_INT 22
75720: PUSH
75721: LD_OWVAR 2
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: PUSH
75730: LD_INT 21
75732: PUSH
75733: LD_INT 3
75735: PUSH
75736: EMPTY
75737: LIST
75738: LIST
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PPUSH
75744: CALL_OW 69
75748: ST_TO_ADDR
// if not tmp then
75749: LD_VAR 0 2
75753: NOT
75754: IFFALSE 75758
// exit ;
75756: GO 75787
// for i in tmp do
75758: LD_ADDR_VAR 0 1
75762: PUSH
75763: LD_VAR 0 2
75767: PUSH
75768: FOR_IN
75769: IFFALSE 75785
// SetBLevel ( i , 10 ) ;
75771: LD_VAR 0 1
75775: PPUSH
75776: LD_INT 10
75778: PPUSH
75779: CALL_OW 241
75783: GO 75768
75785: POP
75786: POP
// end ;
75787: PPOPN 2
75789: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
75790: LD_EXP 61
75794: PUSH
75795: LD_EXP 78
75799: AND
75800: IFFALSE 75911
75802: GO 75804
75804: DISABLE
75805: LD_INT 0
75807: PPUSH
75808: PPUSH
75809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75810: LD_ADDR_VAR 0 3
75814: PUSH
75815: LD_INT 22
75817: PUSH
75818: LD_OWVAR 2
75822: PUSH
75823: EMPTY
75824: LIST
75825: LIST
75826: PUSH
75827: LD_INT 25
75829: PUSH
75830: LD_INT 1
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PPUSH
75841: CALL_OW 69
75845: ST_TO_ADDR
// if not tmp then
75846: LD_VAR 0 3
75850: NOT
75851: IFFALSE 75855
// exit ;
75853: GO 75911
// un := tmp [ rand ( 1 , tmp ) ] ;
75855: LD_ADDR_VAR 0 2
75859: PUSH
75860: LD_VAR 0 3
75864: PUSH
75865: LD_INT 1
75867: PPUSH
75868: LD_VAR 0 3
75872: PPUSH
75873: CALL_OW 12
75877: ARRAY
75878: ST_TO_ADDR
// if Crawls ( un ) then
75879: LD_VAR 0 2
75883: PPUSH
75884: CALL_OW 318
75888: IFFALSE 75899
// ComWalk ( un ) ;
75890: LD_VAR 0 2
75894: PPUSH
75895: CALL_OW 138
// SetClass ( un , class_sniper ) ;
75899: LD_VAR 0 2
75903: PPUSH
75904: LD_INT 5
75906: PPUSH
75907: CALL_OW 336
// end ;
75911: PPOPN 3
75913: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
75914: LD_EXP 61
75918: PUSH
75919: LD_EXP 79
75923: AND
75924: PUSH
75925: LD_OWVAR 67
75929: PUSH
75930: LD_INT 4
75932: LESS
75933: AND
75934: IFFALSE 75953
75936: GO 75938
75938: DISABLE
// begin Difficulty := Difficulty + 1 ;
75939: LD_ADDR_OWVAR 67
75943: PUSH
75944: LD_OWVAR 67
75948: PUSH
75949: LD_INT 1
75951: PLUS
75952: ST_TO_ADDR
// end ;
75953: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
75954: LD_EXP 61
75958: PUSH
75959: LD_EXP 80
75963: AND
75964: IFFALSE 76067
75966: GO 75968
75968: DISABLE
75969: LD_INT 0
75971: PPUSH
// begin for i := 1 to 5 do
75972: LD_ADDR_VAR 0 1
75976: PUSH
75977: DOUBLE
75978: LD_INT 1
75980: DEC
75981: ST_TO_ADDR
75982: LD_INT 5
75984: PUSH
75985: FOR_TO
75986: IFFALSE 76065
// begin uc_nation := nation_nature ;
75988: LD_ADDR_OWVAR 21
75992: PUSH
75993: LD_INT 0
75995: ST_TO_ADDR
// uc_side := 0 ;
75996: LD_ADDR_OWVAR 20
76000: PUSH
76001: LD_INT 0
76003: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76004: LD_ADDR_OWVAR 29
76008: PUSH
76009: LD_INT 12
76011: PUSH
76012: LD_INT 12
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: ST_TO_ADDR
// hc_agressivity := 20 ;
76019: LD_ADDR_OWVAR 35
76023: PUSH
76024: LD_INT 20
76026: ST_TO_ADDR
// hc_class := class_tiger ;
76027: LD_ADDR_OWVAR 28
76031: PUSH
76032: LD_INT 14
76034: ST_TO_ADDR
// hc_gallery :=  ;
76035: LD_ADDR_OWVAR 33
76039: PUSH
76040: LD_STRING 
76042: ST_TO_ADDR
// hc_name :=  ;
76043: LD_ADDR_OWVAR 26
76047: PUSH
76048: LD_STRING 
76050: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
76051: CALL_OW 44
76055: PPUSH
76056: LD_INT 0
76058: PPUSH
76059: CALL_OW 51
// end ;
76063: GO 75985
76065: POP
76066: POP
// end ;
76067: PPOPN 1
76069: END
// every 0 0$1 trigger StreamModeActive and sBomb do
76070: LD_EXP 61
76074: PUSH
76075: LD_EXP 81
76079: AND
76080: IFFALSE 76089
76082: GO 76084
76084: DISABLE
// StreamSibBomb ;
76085: CALL 76090 0 0
76089: END
// export function StreamSibBomb ; var i , x , y ; begin
76090: LD_INT 0
76092: PPUSH
76093: PPUSH
76094: PPUSH
76095: PPUSH
// result := false ;
76096: LD_ADDR_VAR 0 1
76100: PUSH
76101: LD_INT 0
76103: ST_TO_ADDR
// for i := 1 to 16 do
76104: LD_ADDR_VAR 0 2
76108: PUSH
76109: DOUBLE
76110: LD_INT 1
76112: DEC
76113: ST_TO_ADDR
76114: LD_INT 16
76116: PUSH
76117: FOR_TO
76118: IFFALSE 76317
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76120: LD_ADDR_VAR 0 3
76124: PUSH
76125: LD_INT 10
76127: PUSH
76128: LD_INT 20
76130: PUSH
76131: LD_INT 30
76133: PUSH
76134: LD_INT 40
76136: PUSH
76137: LD_INT 50
76139: PUSH
76140: LD_INT 60
76142: PUSH
76143: LD_INT 70
76145: PUSH
76146: LD_INT 80
76148: PUSH
76149: LD_INT 90
76151: PUSH
76152: LD_INT 100
76154: PUSH
76155: LD_INT 110
76157: PUSH
76158: LD_INT 120
76160: PUSH
76161: LD_INT 130
76163: PUSH
76164: LD_INT 140
76166: PUSH
76167: LD_INT 150
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: LIST
76177: LIST
76178: LIST
76179: LIST
76180: LIST
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: LIST
76186: PUSH
76187: LD_INT 1
76189: PPUSH
76190: LD_INT 15
76192: PPUSH
76193: CALL_OW 12
76197: ARRAY
76198: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76199: LD_ADDR_VAR 0 4
76203: PUSH
76204: LD_INT 10
76206: PUSH
76207: LD_INT 20
76209: PUSH
76210: LD_INT 30
76212: PUSH
76213: LD_INT 40
76215: PUSH
76216: LD_INT 50
76218: PUSH
76219: LD_INT 60
76221: PUSH
76222: LD_INT 70
76224: PUSH
76225: LD_INT 80
76227: PUSH
76228: LD_INT 90
76230: PUSH
76231: LD_INT 100
76233: PUSH
76234: LD_INT 110
76236: PUSH
76237: LD_INT 120
76239: PUSH
76240: LD_INT 130
76242: PUSH
76243: LD_INT 140
76245: PUSH
76246: LD_INT 150
76248: PUSH
76249: EMPTY
76250: LIST
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: LIST
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: LIST
76265: PUSH
76266: LD_INT 1
76268: PPUSH
76269: LD_INT 15
76271: PPUSH
76272: CALL_OW 12
76276: ARRAY
76277: ST_TO_ADDR
// if ValidHex ( x , y ) then
76278: LD_VAR 0 3
76282: PPUSH
76283: LD_VAR 0 4
76287: PPUSH
76288: CALL_OW 488
76292: IFFALSE 76315
// begin result := [ x , y ] ;
76294: LD_ADDR_VAR 0 1
76298: PUSH
76299: LD_VAR 0 3
76303: PUSH
76304: LD_VAR 0 4
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: ST_TO_ADDR
// break ;
76313: GO 76317
// end ; end ;
76315: GO 76117
76317: POP
76318: POP
// if result then
76319: LD_VAR 0 1
76323: IFFALSE 76383
// begin ToLua ( playSibBomb() ) ;
76325: LD_STRING playSibBomb()
76327: PPUSH
76328: CALL_OW 559
// wait ( 0 0$14 ) ;
76332: LD_INT 490
76334: PPUSH
76335: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
76339: LD_VAR 0 1
76343: PUSH
76344: LD_INT 1
76346: ARRAY
76347: PPUSH
76348: LD_VAR 0 1
76352: PUSH
76353: LD_INT 2
76355: ARRAY
76356: PPUSH
76357: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
76361: LD_VAR 0 1
76365: PUSH
76366: LD_INT 1
76368: ARRAY
76369: PPUSH
76370: LD_VAR 0 1
76374: PUSH
76375: LD_INT 2
76377: ARRAY
76378: PPUSH
76379: CALL_OW 429
// end ; end ;
76383: LD_VAR 0 1
76387: RET
// every 0 0$1 trigger StreamModeActive and sReset do
76388: LD_EXP 61
76392: PUSH
76393: LD_EXP 83
76397: AND
76398: IFFALSE 76410
76400: GO 76402
76402: DISABLE
// YouLost (  ) ;
76403: LD_STRING 
76405: PPUSH
76406: CALL_OW 104
76410: END
// every 0 0$1 trigger StreamModeActive and sFog do
76411: LD_EXP 61
76415: PUSH
76416: LD_EXP 82
76420: AND
76421: IFFALSE 76435
76423: GO 76425
76425: DISABLE
// FogOff ( your_side ) ;
76426: LD_OWVAR 2
76430: PPUSH
76431: CALL_OW 344
76435: END
// every 0 0$1 trigger StreamModeActive and sSun do
76436: LD_EXP 61
76440: PUSH
76441: LD_EXP 84
76445: AND
76446: IFFALSE 76474
76448: GO 76450
76450: DISABLE
// begin solar_recharge_percent := 0 ;
76451: LD_ADDR_OWVAR 79
76455: PUSH
76456: LD_INT 0
76458: ST_TO_ADDR
// wait ( 5 5$00 ) ;
76459: LD_INT 10500
76461: PPUSH
76462: CALL_OW 67
// solar_recharge_percent := 100 ;
76466: LD_ADDR_OWVAR 79
76470: PUSH
76471: LD_INT 100
76473: ST_TO_ADDR
// end ;
76474: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
76475: LD_EXP 61
76479: PUSH
76480: LD_EXP 85
76484: AND
76485: IFFALSE 76724
76487: GO 76489
76489: DISABLE
76490: LD_INT 0
76492: PPUSH
76493: PPUSH
76494: PPUSH
// begin tmp := [ ] ;
76495: LD_ADDR_VAR 0 3
76499: PUSH
76500: EMPTY
76501: ST_TO_ADDR
// for i := 1 to 6 do
76502: LD_ADDR_VAR 0 1
76506: PUSH
76507: DOUBLE
76508: LD_INT 1
76510: DEC
76511: ST_TO_ADDR
76512: LD_INT 6
76514: PUSH
76515: FOR_TO
76516: IFFALSE 76621
// begin uc_nation := nation_nature ;
76518: LD_ADDR_OWVAR 21
76522: PUSH
76523: LD_INT 0
76525: ST_TO_ADDR
// uc_side := 0 ;
76526: LD_ADDR_OWVAR 20
76530: PUSH
76531: LD_INT 0
76533: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76534: LD_ADDR_OWVAR 29
76538: PUSH
76539: LD_INT 12
76541: PUSH
76542: LD_INT 12
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: ST_TO_ADDR
// hc_agressivity := 20 ;
76549: LD_ADDR_OWVAR 35
76553: PUSH
76554: LD_INT 20
76556: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
76557: LD_ADDR_OWVAR 28
76561: PUSH
76562: LD_INT 17
76564: ST_TO_ADDR
// hc_gallery :=  ;
76565: LD_ADDR_OWVAR 33
76569: PUSH
76570: LD_STRING 
76572: ST_TO_ADDR
// hc_name :=  ;
76573: LD_ADDR_OWVAR 26
76577: PUSH
76578: LD_STRING 
76580: ST_TO_ADDR
// un := CreateHuman ;
76581: LD_ADDR_VAR 0 2
76585: PUSH
76586: CALL_OW 44
76590: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
76591: LD_VAR 0 2
76595: PPUSH
76596: LD_INT 1
76598: PPUSH
76599: CALL_OW 51
// tmp := tmp ^ un ;
76603: LD_ADDR_VAR 0 3
76607: PUSH
76608: LD_VAR 0 3
76612: PUSH
76613: LD_VAR 0 2
76617: ADD
76618: ST_TO_ADDR
// end ;
76619: GO 76515
76621: POP
76622: POP
// repeat wait ( 0 0$1 ) ;
76623: LD_INT 35
76625: PPUSH
76626: CALL_OW 67
// for un in tmp do
76630: LD_ADDR_VAR 0 2
76634: PUSH
76635: LD_VAR 0 3
76639: PUSH
76640: FOR_IN
76641: IFFALSE 76715
// begin if IsDead ( un ) then
76643: LD_VAR 0 2
76647: PPUSH
76648: CALL_OW 301
76652: IFFALSE 76672
// begin tmp := tmp diff un ;
76654: LD_ADDR_VAR 0 3
76658: PUSH
76659: LD_VAR 0 3
76663: PUSH
76664: LD_VAR 0 2
76668: DIFF
76669: ST_TO_ADDR
// continue ;
76670: GO 76640
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
76672: LD_VAR 0 2
76676: PPUSH
76677: LD_INT 3
76679: PUSH
76680: LD_INT 22
76682: PUSH
76683: LD_INT 0
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: PPUSH
76694: CALL_OW 69
76698: PPUSH
76699: LD_VAR 0 2
76703: PPUSH
76704: CALL_OW 74
76708: PPUSH
76709: CALL_OW 115
// end ;
76713: GO 76640
76715: POP
76716: POP
// until not tmp ;
76717: LD_VAR 0 3
76721: NOT
76722: IFFALSE 76623
// end ;
76724: PPOPN 3
76726: END
// every 0 0$1 trigger StreamModeActive and sTroll do
76727: LD_EXP 61
76731: PUSH
76732: LD_EXP 86
76736: AND
76737: IFFALSE 76791
76739: GO 76741
76741: DISABLE
// begin ToLua ( displayTroll(); ) ;
76742: LD_STRING displayTroll();
76744: PPUSH
76745: CALL_OW 559
// wait ( 3 3$00 ) ;
76749: LD_INT 6300
76751: PPUSH
76752: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76756: LD_STRING hideTroll();
76758: PPUSH
76759: CALL_OW 559
// wait ( 1 1$00 ) ;
76763: LD_INT 2100
76765: PPUSH
76766: CALL_OW 67
// ToLua ( displayTroll(); ) ;
76770: LD_STRING displayTroll();
76772: PPUSH
76773: CALL_OW 559
// wait ( 1 1$00 ) ;
76777: LD_INT 2100
76779: PPUSH
76780: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76784: LD_STRING hideTroll();
76786: PPUSH
76787: CALL_OW 559
// end ;
76791: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
76792: LD_EXP 61
76796: PUSH
76797: LD_EXP 87
76801: AND
76802: IFFALSE 76865
76804: GO 76806
76806: DISABLE
76807: LD_INT 0
76809: PPUSH
// begin p := 0 ;
76810: LD_ADDR_VAR 0 1
76814: PUSH
76815: LD_INT 0
76817: ST_TO_ADDR
// repeat game_speed := 1 ;
76818: LD_ADDR_OWVAR 65
76822: PUSH
76823: LD_INT 1
76825: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76826: LD_INT 35
76828: PPUSH
76829: CALL_OW 67
// p := p + 1 ;
76833: LD_ADDR_VAR 0 1
76837: PUSH
76838: LD_VAR 0 1
76842: PUSH
76843: LD_INT 1
76845: PLUS
76846: ST_TO_ADDR
// until p >= 60 ;
76847: LD_VAR 0 1
76851: PUSH
76852: LD_INT 60
76854: GREATEREQUAL
76855: IFFALSE 76818
// game_speed := 4 ;
76857: LD_ADDR_OWVAR 65
76861: PUSH
76862: LD_INT 4
76864: ST_TO_ADDR
// end ;
76865: PPOPN 1
76867: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
76868: LD_EXP 61
76872: PUSH
76873: LD_EXP 88
76877: AND
76878: IFFALSE 77024
76880: GO 76882
76882: DISABLE
76883: LD_INT 0
76885: PPUSH
76886: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76887: LD_ADDR_VAR 0 1
76891: PUSH
76892: LD_INT 22
76894: PUSH
76895: LD_OWVAR 2
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: PUSH
76904: LD_INT 2
76906: PUSH
76907: LD_INT 30
76909: PUSH
76910: LD_INT 0
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PUSH
76917: LD_INT 30
76919: PUSH
76920: LD_INT 1
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: LIST
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: PPUSH
76936: CALL_OW 69
76940: ST_TO_ADDR
// if not depot then
76941: LD_VAR 0 1
76945: NOT
76946: IFFALSE 76950
// exit ;
76948: GO 77024
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
76950: LD_ADDR_VAR 0 2
76954: PUSH
76955: LD_VAR 0 1
76959: PUSH
76960: LD_INT 1
76962: PPUSH
76963: LD_VAR 0 1
76967: PPUSH
76968: CALL_OW 12
76972: ARRAY
76973: PPUSH
76974: CALL_OW 274
76978: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
76979: LD_VAR 0 2
76983: PPUSH
76984: LD_INT 1
76986: PPUSH
76987: LD_INT 0
76989: PPUSH
76990: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
76994: LD_VAR 0 2
76998: PPUSH
76999: LD_INT 2
77001: PPUSH
77002: LD_INT 0
77004: PPUSH
77005: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
77009: LD_VAR 0 2
77013: PPUSH
77014: LD_INT 3
77016: PPUSH
77017: LD_INT 0
77019: PPUSH
77020: CALL_OW 277
// end ;
77024: PPOPN 2
77026: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
77027: LD_EXP 61
77031: PUSH
77032: LD_EXP 89
77036: AND
77037: IFFALSE 77134
77039: GO 77041
77041: DISABLE
77042: LD_INT 0
77044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77045: LD_ADDR_VAR 0 1
77049: PUSH
77050: LD_INT 22
77052: PUSH
77053: LD_OWVAR 2
77057: PUSH
77058: EMPTY
77059: LIST
77060: LIST
77061: PUSH
77062: LD_INT 21
77064: PUSH
77065: LD_INT 1
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: PUSH
77072: LD_INT 3
77074: PUSH
77075: LD_INT 23
77077: PUSH
77078: LD_INT 0
77080: PUSH
77081: EMPTY
77082: LIST
77083: LIST
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: LIST
77093: PPUSH
77094: CALL_OW 69
77098: ST_TO_ADDR
// if not tmp then
77099: LD_VAR 0 1
77103: NOT
77104: IFFALSE 77108
// exit ;
77106: GO 77134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
77108: LD_VAR 0 1
77112: PUSH
77113: LD_INT 1
77115: PPUSH
77116: LD_VAR 0 1
77120: PPUSH
77121: CALL_OW 12
77125: ARRAY
77126: PPUSH
77127: LD_INT 200
77129: PPUSH
77130: CALL_OW 234
// end ;
77134: PPOPN 1
77136: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
77137: LD_EXP 61
77141: PUSH
77142: LD_EXP 90
77146: AND
77147: IFFALSE 77226
77149: GO 77151
77151: DISABLE
77152: LD_INT 0
77154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
77155: LD_ADDR_VAR 0 1
77159: PUSH
77160: LD_INT 22
77162: PUSH
77163: LD_OWVAR 2
77167: PUSH
77168: EMPTY
77169: LIST
77170: LIST
77171: PUSH
77172: LD_INT 21
77174: PUSH
77175: LD_INT 2
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: PUSH
77182: EMPTY
77183: LIST
77184: LIST
77185: PPUSH
77186: CALL_OW 69
77190: ST_TO_ADDR
// if not tmp then
77191: LD_VAR 0 1
77195: NOT
77196: IFFALSE 77200
// exit ;
77198: GO 77226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
77200: LD_VAR 0 1
77204: PUSH
77205: LD_INT 1
77207: PPUSH
77208: LD_VAR 0 1
77212: PPUSH
77213: CALL_OW 12
77217: ARRAY
77218: PPUSH
77219: LD_INT 60
77221: PPUSH
77222: CALL_OW 234
// end ;
77226: PPOPN 1
77228: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
77229: LD_EXP 61
77233: PUSH
77234: LD_EXP 91
77238: AND
77239: IFFALSE 77338
77241: GO 77243
77243: DISABLE
77244: LD_INT 0
77246: PPUSH
77247: PPUSH
// begin enable ;
77248: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
77249: LD_ADDR_VAR 0 1
77253: PUSH
77254: LD_INT 22
77256: PUSH
77257: LD_OWVAR 2
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: PUSH
77266: LD_INT 61
77268: PUSH
77269: EMPTY
77270: LIST
77271: PUSH
77272: LD_INT 33
77274: PUSH
77275: LD_INT 2
77277: PUSH
77278: EMPTY
77279: LIST
77280: LIST
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: LIST
77286: PPUSH
77287: CALL_OW 69
77291: ST_TO_ADDR
// if not tmp then
77292: LD_VAR 0 1
77296: NOT
77297: IFFALSE 77301
// exit ;
77299: GO 77338
// for i in tmp do
77301: LD_ADDR_VAR 0 2
77305: PUSH
77306: LD_VAR 0 1
77310: PUSH
77311: FOR_IN
77312: IFFALSE 77336
// if IsControledBy ( i ) then
77314: LD_VAR 0 2
77318: PPUSH
77319: CALL_OW 312
77323: IFFALSE 77334
// ComUnlink ( i ) ;
77325: LD_VAR 0 2
77329: PPUSH
77330: CALL_OW 136
77334: GO 77311
77336: POP
77337: POP
// end ;
77338: PPOPN 2
77340: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
77341: LD_EXP 61
77345: PUSH
77346: LD_EXP 92
77350: AND
77351: IFFALSE 77491
77353: GO 77355
77355: DISABLE
77356: LD_INT 0
77358: PPUSH
77359: PPUSH
// begin ToLua ( displayPowell(); ) ;
77360: LD_STRING displayPowell();
77362: PPUSH
77363: CALL_OW 559
// uc_side := 0 ;
77367: LD_ADDR_OWVAR 20
77371: PUSH
77372: LD_INT 0
77374: ST_TO_ADDR
// uc_nation := 2 ;
77375: LD_ADDR_OWVAR 21
77379: PUSH
77380: LD_INT 2
77382: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
77383: LD_ADDR_OWVAR 37
77387: PUSH
77388: LD_INT 14
77390: ST_TO_ADDR
// vc_engine := engine_siberite ;
77391: LD_ADDR_OWVAR 39
77395: PUSH
77396: LD_INT 3
77398: ST_TO_ADDR
// vc_control := control_apeman ;
77399: LD_ADDR_OWVAR 38
77403: PUSH
77404: LD_INT 5
77406: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
77407: LD_ADDR_OWVAR 40
77411: PUSH
77412: LD_INT 29
77414: ST_TO_ADDR
// un := CreateVehicle ;
77415: LD_ADDR_VAR 0 2
77419: PUSH
77420: CALL_OW 45
77424: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77425: LD_VAR 0 2
77429: PPUSH
77430: LD_INT 1
77432: PPUSH
77433: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77437: LD_INT 35
77439: PPUSH
77440: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77444: LD_VAR 0 2
77448: PPUSH
77449: LD_INT 22
77451: PUSH
77452: LD_OWVAR 2
77456: PUSH
77457: EMPTY
77458: LIST
77459: LIST
77460: PPUSH
77461: CALL_OW 69
77465: PPUSH
77466: LD_VAR 0 2
77470: PPUSH
77471: CALL_OW 74
77475: PPUSH
77476: CALL_OW 115
// until IsDead ( un ) ;
77480: LD_VAR 0 2
77484: PPUSH
77485: CALL_OW 301
77489: IFFALSE 77437
// end ;
77491: PPOPN 2
77493: END
// every 0 0$1 trigger StreamModeActive and sStu do
77494: LD_EXP 61
77498: PUSH
77499: LD_EXP 100
77503: AND
77504: IFFALSE 77520
77506: GO 77508
77508: DISABLE
// begin ToLua ( displayStucuk(); ) ;
77509: LD_STRING displayStucuk();
77511: PPUSH
77512: CALL_OW 559
// ResetFog ;
77516: CALL_OW 335
// end ;
77520: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
77521: LD_EXP 61
77525: PUSH
77526: LD_EXP 93
77530: AND
77531: IFFALSE 77672
77533: GO 77535
77535: DISABLE
77536: LD_INT 0
77538: PPUSH
77539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77540: LD_ADDR_VAR 0 2
77544: PUSH
77545: LD_INT 22
77547: PUSH
77548: LD_OWVAR 2
77552: PUSH
77553: EMPTY
77554: LIST
77555: LIST
77556: PUSH
77557: LD_INT 21
77559: PUSH
77560: LD_INT 1
77562: PUSH
77563: EMPTY
77564: LIST
77565: LIST
77566: PUSH
77567: EMPTY
77568: LIST
77569: LIST
77570: PPUSH
77571: CALL_OW 69
77575: ST_TO_ADDR
// if not tmp then
77576: LD_VAR 0 2
77580: NOT
77581: IFFALSE 77585
// exit ;
77583: GO 77672
// un := tmp [ rand ( 1 , tmp ) ] ;
77585: LD_ADDR_VAR 0 1
77589: PUSH
77590: LD_VAR 0 2
77594: PUSH
77595: LD_INT 1
77597: PPUSH
77598: LD_VAR 0 2
77602: PPUSH
77603: CALL_OW 12
77607: ARRAY
77608: ST_TO_ADDR
// SetSide ( un , 0 ) ;
77609: LD_VAR 0 1
77613: PPUSH
77614: LD_INT 0
77616: PPUSH
77617: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
77621: LD_VAR 0 1
77625: PPUSH
77626: LD_OWVAR 3
77630: PUSH
77631: LD_VAR 0 1
77635: DIFF
77636: PPUSH
77637: LD_VAR 0 1
77641: PPUSH
77642: CALL_OW 74
77646: PPUSH
77647: CALL_OW 115
// wait ( 0 0$20 ) ;
77651: LD_INT 700
77653: PPUSH
77654: CALL_OW 67
// SetSide ( un , your_side ) ;
77658: LD_VAR 0 1
77662: PPUSH
77663: LD_OWVAR 2
77667: PPUSH
77668: CALL_OW 235
// end ;
77672: PPOPN 2
77674: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
77675: LD_EXP 61
77679: PUSH
77680: LD_EXP 94
77684: AND
77685: IFFALSE 77791
77687: GO 77689
77689: DISABLE
77690: LD_INT 0
77692: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77693: LD_ADDR_VAR 0 1
77697: PUSH
77698: LD_INT 22
77700: PUSH
77701: LD_OWVAR 2
77705: PUSH
77706: EMPTY
77707: LIST
77708: LIST
77709: PUSH
77710: LD_INT 2
77712: PUSH
77713: LD_INT 30
77715: PUSH
77716: LD_INT 0
77718: PUSH
77719: EMPTY
77720: LIST
77721: LIST
77722: PUSH
77723: LD_INT 30
77725: PUSH
77726: LD_INT 1
77728: PUSH
77729: EMPTY
77730: LIST
77731: LIST
77732: PUSH
77733: EMPTY
77734: LIST
77735: LIST
77736: LIST
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: PPUSH
77742: CALL_OW 69
77746: ST_TO_ADDR
// if not depot then
77747: LD_VAR 0 1
77751: NOT
77752: IFFALSE 77756
// exit ;
77754: GO 77791
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
77756: LD_VAR 0 1
77760: PUSH
77761: LD_INT 1
77763: ARRAY
77764: PPUSH
77765: CALL_OW 250
77769: PPUSH
77770: LD_VAR 0 1
77774: PUSH
77775: LD_INT 1
77777: ARRAY
77778: PPUSH
77779: CALL_OW 251
77783: PPUSH
77784: LD_INT 70
77786: PPUSH
77787: CALL_OW 495
// end ;
77791: PPOPN 1
77793: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
77794: LD_EXP 61
77798: PUSH
77799: LD_EXP 95
77803: AND
77804: IFFALSE 78015
77806: GO 77808
77808: DISABLE
77809: LD_INT 0
77811: PPUSH
77812: PPUSH
77813: PPUSH
77814: PPUSH
77815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77816: LD_ADDR_VAR 0 5
77820: PUSH
77821: LD_INT 22
77823: PUSH
77824: LD_OWVAR 2
77828: PUSH
77829: EMPTY
77830: LIST
77831: LIST
77832: PUSH
77833: LD_INT 21
77835: PUSH
77836: LD_INT 1
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: PUSH
77843: EMPTY
77844: LIST
77845: LIST
77846: PPUSH
77847: CALL_OW 69
77851: ST_TO_ADDR
// if not tmp then
77852: LD_VAR 0 5
77856: NOT
77857: IFFALSE 77861
// exit ;
77859: GO 78015
// for i in tmp do
77861: LD_ADDR_VAR 0 1
77865: PUSH
77866: LD_VAR 0 5
77870: PUSH
77871: FOR_IN
77872: IFFALSE 78013
// begin d := rand ( 0 , 5 ) ;
77874: LD_ADDR_VAR 0 4
77878: PUSH
77879: LD_INT 0
77881: PPUSH
77882: LD_INT 5
77884: PPUSH
77885: CALL_OW 12
77889: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
77890: LD_ADDR_VAR 0 2
77894: PUSH
77895: LD_VAR 0 1
77899: PPUSH
77900: CALL_OW 250
77904: PPUSH
77905: LD_VAR 0 4
77909: PPUSH
77910: LD_INT 3
77912: PPUSH
77913: LD_INT 12
77915: PPUSH
77916: CALL_OW 12
77920: PPUSH
77921: CALL_OW 272
77925: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
77926: LD_ADDR_VAR 0 3
77930: PUSH
77931: LD_VAR 0 1
77935: PPUSH
77936: CALL_OW 251
77940: PPUSH
77941: LD_VAR 0 4
77945: PPUSH
77946: LD_INT 3
77948: PPUSH
77949: LD_INT 12
77951: PPUSH
77952: CALL_OW 12
77956: PPUSH
77957: CALL_OW 273
77961: ST_TO_ADDR
// if ValidHex ( x , y ) then
77962: LD_VAR 0 2
77966: PPUSH
77967: LD_VAR 0 3
77971: PPUSH
77972: CALL_OW 488
77976: IFFALSE 78011
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
77978: LD_VAR 0 1
77982: PPUSH
77983: LD_VAR 0 2
77987: PPUSH
77988: LD_VAR 0 3
77992: PPUSH
77993: LD_INT 3
77995: PPUSH
77996: LD_INT 6
77998: PPUSH
77999: CALL_OW 12
78003: PPUSH
78004: LD_INT 1
78006: PPUSH
78007: CALL_OW 483
// end ;
78011: GO 77871
78013: POP
78014: POP
// end ;
78015: PPOPN 5
78017: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
78018: LD_EXP 61
78022: PUSH
78023: LD_EXP 96
78027: AND
78028: IFFALSE 78122
78030: GO 78032
78032: DISABLE
78033: LD_INT 0
78035: PPUSH
78036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
78037: LD_ADDR_VAR 0 2
78041: PUSH
78042: LD_INT 22
78044: PUSH
78045: LD_OWVAR 2
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: PUSH
78054: LD_INT 32
78056: PUSH
78057: LD_INT 1
78059: PUSH
78060: EMPTY
78061: LIST
78062: LIST
78063: PUSH
78064: LD_INT 21
78066: PUSH
78067: LD_INT 2
78069: PUSH
78070: EMPTY
78071: LIST
78072: LIST
78073: PUSH
78074: EMPTY
78075: LIST
78076: LIST
78077: LIST
78078: PPUSH
78079: CALL_OW 69
78083: ST_TO_ADDR
// if not tmp then
78084: LD_VAR 0 2
78088: NOT
78089: IFFALSE 78093
// exit ;
78091: GO 78122
// for i in tmp do
78093: LD_ADDR_VAR 0 1
78097: PUSH
78098: LD_VAR 0 2
78102: PUSH
78103: FOR_IN
78104: IFFALSE 78120
// SetFuel ( i , 0 ) ;
78106: LD_VAR 0 1
78110: PPUSH
78111: LD_INT 0
78113: PPUSH
78114: CALL_OW 240
78118: GO 78103
78120: POP
78121: POP
// end ;
78122: PPOPN 2
78124: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
78125: LD_EXP 61
78129: PUSH
78130: LD_EXP 97
78134: AND
78135: IFFALSE 78201
78137: GO 78139
78139: DISABLE
78140: LD_INT 0
78142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78143: LD_ADDR_VAR 0 1
78147: PUSH
78148: LD_INT 22
78150: PUSH
78151: LD_OWVAR 2
78155: PUSH
78156: EMPTY
78157: LIST
78158: LIST
78159: PUSH
78160: LD_INT 30
78162: PUSH
78163: LD_INT 29
78165: PUSH
78166: EMPTY
78167: LIST
78168: LIST
78169: PUSH
78170: EMPTY
78171: LIST
78172: LIST
78173: PPUSH
78174: CALL_OW 69
78178: ST_TO_ADDR
// if not tmp then
78179: LD_VAR 0 1
78183: NOT
78184: IFFALSE 78188
// exit ;
78186: GO 78201
// DestroyUnit ( tmp [ 1 ] ) ;
78188: LD_VAR 0 1
78192: PUSH
78193: LD_INT 1
78195: ARRAY
78196: PPUSH
78197: CALL_OW 65
// end ;
78201: PPOPN 1
78203: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
78204: LD_EXP 61
78208: PUSH
78209: LD_EXP 99
78213: AND
78214: IFFALSE 78343
78216: GO 78218
78218: DISABLE
78219: LD_INT 0
78221: PPUSH
// begin uc_side := 0 ;
78222: LD_ADDR_OWVAR 20
78226: PUSH
78227: LD_INT 0
78229: ST_TO_ADDR
// uc_nation := nation_arabian ;
78230: LD_ADDR_OWVAR 21
78234: PUSH
78235: LD_INT 2
78237: ST_TO_ADDR
// hc_gallery :=  ;
78238: LD_ADDR_OWVAR 33
78242: PUSH
78243: LD_STRING 
78245: ST_TO_ADDR
// hc_name :=  ;
78246: LD_ADDR_OWVAR 26
78250: PUSH
78251: LD_STRING 
78253: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
78254: LD_INT 1
78256: PPUSH
78257: LD_INT 11
78259: PPUSH
78260: LD_INT 10
78262: PPUSH
78263: CALL_OW 380
// un := CreateHuman ;
78267: LD_ADDR_VAR 0 1
78271: PUSH
78272: CALL_OW 44
78276: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78277: LD_VAR 0 1
78281: PPUSH
78282: LD_INT 1
78284: PPUSH
78285: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78289: LD_INT 35
78291: PPUSH
78292: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78296: LD_VAR 0 1
78300: PPUSH
78301: LD_INT 22
78303: PUSH
78304: LD_OWVAR 2
78308: PUSH
78309: EMPTY
78310: LIST
78311: LIST
78312: PPUSH
78313: CALL_OW 69
78317: PPUSH
78318: LD_VAR 0 1
78322: PPUSH
78323: CALL_OW 74
78327: PPUSH
78328: CALL_OW 115
// until IsDead ( un ) ;
78332: LD_VAR 0 1
78336: PPUSH
78337: CALL_OW 301
78341: IFFALSE 78289
// end ;
78343: PPOPN 1
78345: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
78346: LD_EXP 61
78350: PUSH
78351: LD_EXP 101
78355: AND
78356: IFFALSE 78368
78358: GO 78360
78360: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
78361: LD_STRING earthquake(getX(game), 0, 32)
78363: PPUSH
78364: CALL_OW 559
78368: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
78369: LD_EXP 61
78373: PUSH
78374: LD_EXP 102
78378: AND
78379: IFFALSE 78470
78381: GO 78383
78383: DISABLE
78384: LD_INT 0
78386: PPUSH
// begin enable ;
78387: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
78388: LD_ADDR_VAR 0 1
78392: PUSH
78393: LD_INT 22
78395: PUSH
78396: LD_OWVAR 2
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: PUSH
78405: LD_INT 21
78407: PUSH
78408: LD_INT 2
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: PUSH
78415: LD_INT 33
78417: PUSH
78418: LD_INT 3
78420: PUSH
78421: EMPTY
78422: LIST
78423: LIST
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: LIST
78429: PPUSH
78430: CALL_OW 69
78434: ST_TO_ADDR
// if not tmp then
78435: LD_VAR 0 1
78439: NOT
78440: IFFALSE 78444
// exit ;
78442: GO 78470
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78444: LD_VAR 0 1
78448: PUSH
78449: LD_INT 1
78451: PPUSH
78452: LD_VAR 0 1
78456: PPUSH
78457: CALL_OW 12
78461: ARRAY
78462: PPUSH
78463: LD_INT 1
78465: PPUSH
78466: CALL_OW 234
// end ;
78470: PPOPN 1
78472: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
78473: LD_EXP 61
78477: PUSH
78478: LD_EXP 103
78482: AND
78483: IFFALSE 78624
78485: GO 78487
78487: DISABLE
78488: LD_INT 0
78490: PPUSH
78491: PPUSH
78492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78493: LD_ADDR_VAR 0 3
78497: PUSH
78498: LD_INT 22
78500: PUSH
78501: LD_OWVAR 2
78505: PUSH
78506: EMPTY
78507: LIST
78508: LIST
78509: PUSH
78510: LD_INT 25
78512: PUSH
78513: LD_INT 1
78515: PUSH
78516: EMPTY
78517: LIST
78518: LIST
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: PPUSH
78524: CALL_OW 69
78528: ST_TO_ADDR
// if not tmp then
78529: LD_VAR 0 3
78533: NOT
78534: IFFALSE 78538
// exit ;
78536: GO 78624
// un := tmp [ rand ( 1 , tmp ) ] ;
78538: LD_ADDR_VAR 0 2
78542: PUSH
78543: LD_VAR 0 3
78547: PUSH
78548: LD_INT 1
78550: PPUSH
78551: LD_VAR 0 3
78555: PPUSH
78556: CALL_OW 12
78560: ARRAY
78561: ST_TO_ADDR
// if Crawls ( un ) then
78562: LD_VAR 0 2
78566: PPUSH
78567: CALL_OW 318
78571: IFFALSE 78582
// ComWalk ( un ) ;
78573: LD_VAR 0 2
78577: PPUSH
78578: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
78582: LD_VAR 0 2
78586: PPUSH
78587: LD_INT 9
78589: PPUSH
78590: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
78594: LD_INT 28
78596: PPUSH
78597: LD_OWVAR 2
78601: PPUSH
78602: LD_INT 2
78604: PPUSH
78605: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
78609: LD_INT 29
78611: PPUSH
78612: LD_OWVAR 2
78616: PPUSH
78617: LD_INT 2
78619: PPUSH
78620: CALL_OW 322
// end ;
78624: PPOPN 3
78626: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
78627: LD_EXP 61
78631: PUSH
78632: LD_EXP 104
78636: AND
78637: IFFALSE 78748
78639: GO 78641
78641: DISABLE
78642: LD_INT 0
78644: PPUSH
78645: PPUSH
78646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78647: LD_ADDR_VAR 0 3
78651: PUSH
78652: LD_INT 22
78654: PUSH
78655: LD_OWVAR 2
78659: PUSH
78660: EMPTY
78661: LIST
78662: LIST
78663: PUSH
78664: LD_INT 25
78666: PUSH
78667: LD_INT 1
78669: PUSH
78670: EMPTY
78671: LIST
78672: LIST
78673: PUSH
78674: EMPTY
78675: LIST
78676: LIST
78677: PPUSH
78678: CALL_OW 69
78682: ST_TO_ADDR
// if not tmp then
78683: LD_VAR 0 3
78687: NOT
78688: IFFALSE 78692
// exit ;
78690: GO 78748
// un := tmp [ rand ( 1 , tmp ) ] ;
78692: LD_ADDR_VAR 0 2
78696: PUSH
78697: LD_VAR 0 3
78701: PUSH
78702: LD_INT 1
78704: PPUSH
78705: LD_VAR 0 3
78709: PPUSH
78710: CALL_OW 12
78714: ARRAY
78715: ST_TO_ADDR
// if Crawls ( un ) then
78716: LD_VAR 0 2
78720: PPUSH
78721: CALL_OW 318
78725: IFFALSE 78736
// ComWalk ( un ) ;
78727: LD_VAR 0 2
78731: PPUSH
78732: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78736: LD_VAR 0 2
78740: PPUSH
78741: LD_INT 8
78743: PPUSH
78744: CALL_OW 336
// end ;
78748: PPOPN 3
78750: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
78751: LD_EXP 61
78755: PUSH
78756: LD_EXP 105
78760: AND
78761: IFFALSE 78905
78763: GO 78765
78765: DISABLE
78766: LD_INT 0
78768: PPUSH
78769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
78770: LD_ADDR_VAR 0 2
78774: PUSH
78775: LD_INT 22
78777: PUSH
78778: LD_OWVAR 2
78782: PUSH
78783: EMPTY
78784: LIST
78785: LIST
78786: PUSH
78787: LD_INT 21
78789: PUSH
78790: LD_INT 2
78792: PUSH
78793: EMPTY
78794: LIST
78795: LIST
78796: PUSH
78797: LD_INT 2
78799: PUSH
78800: LD_INT 34
78802: PUSH
78803: LD_INT 12
78805: PUSH
78806: EMPTY
78807: LIST
78808: LIST
78809: PUSH
78810: LD_INT 34
78812: PUSH
78813: LD_INT 51
78815: PUSH
78816: EMPTY
78817: LIST
78818: LIST
78819: PUSH
78820: LD_INT 34
78822: PUSH
78823: LD_INT 32
78825: PUSH
78826: EMPTY
78827: LIST
78828: LIST
78829: PUSH
78830: EMPTY
78831: LIST
78832: LIST
78833: LIST
78834: LIST
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: LIST
78840: PPUSH
78841: CALL_OW 69
78845: ST_TO_ADDR
// if not tmp then
78846: LD_VAR 0 2
78850: NOT
78851: IFFALSE 78855
// exit ;
78853: GO 78905
// for i in tmp do
78855: LD_ADDR_VAR 0 1
78859: PUSH
78860: LD_VAR 0 2
78864: PUSH
78865: FOR_IN
78866: IFFALSE 78903
// if GetCargo ( i , mat_artifact ) = 0 then
78868: LD_VAR 0 1
78872: PPUSH
78873: LD_INT 4
78875: PPUSH
78876: CALL_OW 289
78880: PUSH
78881: LD_INT 0
78883: EQUAL
78884: IFFALSE 78901
// SetCargo ( i , mat_siberit , 100 ) ;
78886: LD_VAR 0 1
78890: PPUSH
78891: LD_INT 3
78893: PPUSH
78894: LD_INT 100
78896: PPUSH
78897: CALL_OW 290
78901: GO 78865
78903: POP
78904: POP
// end ;
78905: PPOPN 2
78907: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
78908: LD_EXP 61
78912: PUSH
78913: LD_EXP 106
78917: AND
78918: IFFALSE 79101
78920: GO 78922
78922: DISABLE
78923: LD_INT 0
78925: PPUSH
78926: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78927: LD_ADDR_VAR 0 2
78931: PUSH
78932: LD_INT 22
78934: PUSH
78935: LD_OWVAR 2
78939: PUSH
78940: EMPTY
78941: LIST
78942: LIST
78943: PPUSH
78944: CALL_OW 69
78948: ST_TO_ADDR
// if not tmp then
78949: LD_VAR 0 2
78953: NOT
78954: IFFALSE 78958
// exit ;
78956: GO 79101
// for i := 1 to 2 do
78958: LD_ADDR_VAR 0 1
78962: PUSH
78963: DOUBLE
78964: LD_INT 1
78966: DEC
78967: ST_TO_ADDR
78968: LD_INT 2
78970: PUSH
78971: FOR_TO
78972: IFFALSE 79099
// begin uc_side := your_side ;
78974: LD_ADDR_OWVAR 20
78978: PUSH
78979: LD_OWVAR 2
78983: ST_TO_ADDR
// uc_nation := nation_american ;
78984: LD_ADDR_OWVAR 21
78988: PUSH
78989: LD_INT 1
78991: ST_TO_ADDR
// vc_chassis := us_morphling ;
78992: LD_ADDR_OWVAR 37
78996: PUSH
78997: LD_INT 5
78999: ST_TO_ADDR
// vc_engine := engine_siberite ;
79000: LD_ADDR_OWVAR 39
79004: PUSH
79005: LD_INT 3
79007: ST_TO_ADDR
// vc_control := control_computer ;
79008: LD_ADDR_OWVAR 38
79012: PUSH
79013: LD_INT 3
79015: ST_TO_ADDR
// vc_weapon := us_double_laser ;
79016: LD_ADDR_OWVAR 40
79020: PUSH
79021: LD_INT 10
79023: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
79024: LD_VAR 0 2
79028: PUSH
79029: LD_INT 1
79031: ARRAY
79032: PPUSH
79033: CALL_OW 310
79037: NOT
79038: IFFALSE 79085
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
79040: CALL_OW 45
79044: PPUSH
79045: LD_VAR 0 2
79049: PUSH
79050: LD_INT 1
79052: ARRAY
79053: PPUSH
79054: CALL_OW 250
79058: PPUSH
79059: LD_VAR 0 2
79063: PUSH
79064: LD_INT 1
79066: ARRAY
79067: PPUSH
79068: CALL_OW 251
79072: PPUSH
79073: LD_INT 12
79075: PPUSH
79076: LD_INT 1
79078: PPUSH
79079: CALL_OW 50
79083: GO 79097
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
79085: CALL_OW 45
79089: PPUSH
79090: LD_INT 1
79092: PPUSH
79093: CALL_OW 51
// end ;
79097: GO 78971
79099: POP
79100: POP
// end ;
79101: PPOPN 2
79103: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
79104: LD_EXP 61
79108: PUSH
79109: LD_EXP 107
79113: AND
79114: IFFALSE 79336
79116: GO 79118
79118: DISABLE
79119: LD_INT 0
79121: PPUSH
79122: PPUSH
79123: PPUSH
79124: PPUSH
79125: PPUSH
79126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79127: LD_ADDR_VAR 0 6
79131: PUSH
79132: LD_INT 22
79134: PUSH
79135: LD_OWVAR 2
79139: PUSH
79140: EMPTY
79141: LIST
79142: LIST
79143: PUSH
79144: LD_INT 21
79146: PUSH
79147: LD_INT 1
79149: PUSH
79150: EMPTY
79151: LIST
79152: LIST
79153: PUSH
79154: LD_INT 3
79156: PUSH
79157: LD_INT 23
79159: PUSH
79160: LD_INT 0
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: PUSH
79167: EMPTY
79168: LIST
79169: LIST
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: LIST
79175: PPUSH
79176: CALL_OW 69
79180: ST_TO_ADDR
// if not tmp then
79181: LD_VAR 0 6
79185: NOT
79186: IFFALSE 79190
// exit ;
79188: GO 79336
// s1 := rand ( 1 , 4 ) ;
79190: LD_ADDR_VAR 0 2
79194: PUSH
79195: LD_INT 1
79197: PPUSH
79198: LD_INT 4
79200: PPUSH
79201: CALL_OW 12
79205: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
79206: LD_ADDR_VAR 0 4
79210: PUSH
79211: LD_VAR 0 6
79215: PUSH
79216: LD_INT 1
79218: ARRAY
79219: PPUSH
79220: LD_VAR 0 2
79224: PPUSH
79225: CALL_OW 259
79229: ST_TO_ADDR
// if s1 = 1 then
79230: LD_VAR 0 2
79234: PUSH
79235: LD_INT 1
79237: EQUAL
79238: IFFALSE 79258
// s2 := rand ( 2 , 4 ) else
79240: LD_ADDR_VAR 0 3
79244: PUSH
79245: LD_INT 2
79247: PPUSH
79248: LD_INT 4
79250: PPUSH
79251: CALL_OW 12
79255: ST_TO_ADDR
79256: GO 79266
// s2 := 1 ;
79258: LD_ADDR_VAR 0 3
79262: PUSH
79263: LD_INT 1
79265: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
79266: LD_ADDR_VAR 0 5
79270: PUSH
79271: LD_VAR 0 6
79275: PUSH
79276: LD_INT 1
79278: ARRAY
79279: PPUSH
79280: LD_VAR 0 3
79284: PPUSH
79285: CALL_OW 259
79289: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
79290: LD_VAR 0 6
79294: PUSH
79295: LD_INT 1
79297: ARRAY
79298: PPUSH
79299: LD_VAR 0 2
79303: PPUSH
79304: LD_VAR 0 5
79308: PPUSH
79309: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
79313: LD_VAR 0 6
79317: PUSH
79318: LD_INT 1
79320: ARRAY
79321: PPUSH
79322: LD_VAR 0 3
79326: PPUSH
79327: LD_VAR 0 4
79331: PPUSH
79332: CALL_OW 237
// end ;
79336: PPOPN 6
79338: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
79339: LD_EXP 61
79343: PUSH
79344: LD_EXP 108
79348: AND
79349: IFFALSE 79428
79351: GO 79353
79353: DISABLE
79354: LD_INT 0
79356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
79357: LD_ADDR_VAR 0 1
79361: PUSH
79362: LD_INT 22
79364: PUSH
79365: LD_OWVAR 2
79369: PUSH
79370: EMPTY
79371: LIST
79372: LIST
79373: PUSH
79374: LD_INT 30
79376: PUSH
79377: LD_INT 3
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: PPUSH
79388: CALL_OW 69
79392: ST_TO_ADDR
// if not tmp then
79393: LD_VAR 0 1
79397: NOT
79398: IFFALSE 79402
// exit ;
79400: GO 79428
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79402: LD_VAR 0 1
79406: PUSH
79407: LD_INT 1
79409: PPUSH
79410: LD_VAR 0 1
79414: PPUSH
79415: CALL_OW 12
79419: ARRAY
79420: PPUSH
79421: LD_INT 1
79423: PPUSH
79424: CALL_OW 234
// end ;
79428: PPOPN 1
79430: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
79431: LD_EXP 61
79435: PUSH
79436: LD_EXP 109
79440: AND
79441: IFFALSE 79553
79443: GO 79445
79445: DISABLE
79446: LD_INT 0
79448: PPUSH
79449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
79450: LD_ADDR_VAR 0 2
79454: PUSH
79455: LD_INT 22
79457: PUSH
79458: LD_OWVAR 2
79462: PUSH
79463: EMPTY
79464: LIST
79465: LIST
79466: PUSH
79467: LD_INT 2
79469: PUSH
79470: LD_INT 30
79472: PUSH
79473: LD_INT 27
79475: PUSH
79476: EMPTY
79477: LIST
79478: LIST
79479: PUSH
79480: LD_INT 30
79482: PUSH
79483: LD_INT 26
79485: PUSH
79486: EMPTY
79487: LIST
79488: LIST
79489: PUSH
79490: LD_INT 30
79492: PUSH
79493: LD_INT 28
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: PUSH
79500: EMPTY
79501: LIST
79502: LIST
79503: LIST
79504: LIST
79505: PUSH
79506: EMPTY
79507: LIST
79508: LIST
79509: PPUSH
79510: CALL_OW 69
79514: ST_TO_ADDR
// if not tmp then
79515: LD_VAR 0 2
79519: NOT
79520: IFFALSE 79524
// exit ;
79522: GO 79553
// for i in tmp do
79524: LD_ADDR_VAR 0 1
79528: PUSH
79529: LD_VAR 0 2
79533: PUSH
79534: FOR_IN
79535: IFFALSE 79551
// SetLives ( i , 1 ) ;
79537: LD_VAR 0 1
79541: PPUSH
79542: LD_INT 1
79544: PPUSH
79545: CALL_OW 234
79549: GO 79534
79551: POP
79552: POP
// end ;
79553: PPOPN 2
79555: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
79556: LD_EXP 61
79560: PUSH
79561: LD_EXP 110
79565: AND
79566: IFFALSE 79853
79568: GO 79570
79570: DISABLE
79571: LD_INT 0
79573: PPUSH
79574: PPUSH
79575: PPUSH
// begin i := rand ( 1 , 7 ) ;
79576: LD_ADDR_VAR 0 1
79580: PUSH
79581: LD_INT 1
79583: PPUSH
79584: LD_INT 7
79586: PPUSH
79587: CALL_OW 12
79591: ST_TO_ADDR
// case i of 1 :
79592: LD_VAR 0 1
79596: PUSH
79597: LD_INT 1
79599: DOUBLE
79600: EQUAL
79601: IFTRUE 79605
79603: GO 79615
79605: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
79606: LD_STRING earthquake(getX(game), 0, 32)
79608: PPUSH
79609: CALL_OW 559
79613: GO 79853
79615: LD_INT 2
79617: DOUBLE
79618: EQUAL
79619: IFTRUE 79623
79621: GO 79637
79623: POP
// begin ToLua ( displayStucuk(); ) ;
79624: LD_STRING displayStucuk();
79626: PPUSH
79627: CALL_OW 559
// ResetFog ;
79631: CALL_OW 335
// end ; 3 :
79635: GO 79853
79637: LD_INT 3
79639: DOUBLE
79640: EQUAL
79641: IFTRUE 79645
79643: GO 79749
79645: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79646: LD_ADDR_VAR 0 2
79650: PUSH
79651: LD_INT 22
79653: PUSH
79654: LD_OWVAR 2
79658: PUSH
79659: EMPTY
79660: LIST
79661: LIST
79662: PUSH
79663: LD_INT 25
79665: PUSH
79666: LD_INT 1
79668: PUSH
79669: EMPTY
79670: LIST
79671: LIST
79672: PUSH
79673: EMPTY
79674: LIST
79675: LIST
79676: PPUSH
79677: CALL_OW 69
79681: ST_TO_ADDR
// if not tmp then
79682: LD_VAR 0 2
79686: NOT
79687: IFFALSE 79691
// exit ;
79689: GO 79853
// un := tmp [ rand ( 1 , tmp ) ] ;
79691: LD_ADDR_VAR 0 3
79695: PUSH
79696: LD_VAR 0 2
79700: PUSH
79701: LD_INT 1
79703: PPUSH
79704: LD_VAR 0 2
79708: PPUSH
79709: CALL_OW 12
79713: ARRAY
79714: ST_TO_ADDR
// if Crawls ( un ) then
79715: LD_VAR 0 3
79719: PPUSH
79720: CALL_OW 318
79724: IFFALSE 79735
// ComWalk ( un ) ;
79726: LD_VAR 0 3
79730: PPUSH
79731: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79735: LD_VAR 0 3
79739: PPUSH
79740: LD_INT 8
79742: PPUSH
79743: CALL_OW 336
// end ; 4 :
79747: GO 79853
79749: LD_INT 4
79751: DOUBLE
79752: EQUAL
79753: IFTRUE 79757
79755: GO 79831
79757: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79758: LD_ADDR_VAR 0 2
79762: PUSH
79763: LD_INT 22
79765: PUSH
79766: LD_OWVAR 2
79770: PUSH
79771: EMPTY
79772: LIST
79773: LIST
79774: PUSH
79775: LD_INT 30
79777: PUSH
79778: LD_INT 29
79780: PUSH
79781: EMPTY
79782: LIST
79783: LIST
79784: PUSH
79785: EMPTY
79786: LIST
79787: LIST
79788: PPUSH
79789: CALL_OW 69
79793: ST_TO_ADDR
// if not tmp then
79794: LD_VAR 0 2
79798: NOT
79799: IFFALSE 79803
// exit ;
79801: GO 79853
// CenterNowOnUnits ( tmp [ 1 ] ) ;
79803: LD_VAR 0 2
79807: PUSH
79808: LD_INT 1
79810: ARRAY
79811: PPUSH
79812: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
79816: LD_VAR 0 2
79820: PUSH
79821: LD_INT 1
79823: ARRAY
79824: PPUSH
79825: CALL_OW 65
// end ; 5 .. 7 :
79829: GO 79853
79831: LD_INT 5
79833: DOUBLE
79834: GREATEREQUAL
79835: IFFALSE 79843
79837: LD_INT 7
79839: DOUBLE
79840: LESSEQUAL
79841: IFTRUE 79845
79843: GO 79852
79845: POP
// StreamSibBomb ; end ;
79846: CALL 76090 0 0
79850: GO 79853
79852: POP
// end ;
79853: PPOPN 3
79855: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
79856: LD_EXP 61
79860: PUSH
79861: LD_EXP 111
79865: AND
79866: IFFALSE 80022
79868: GO 79870
79870: DISABLE
79871: LD_INT 0
79873: PPUSH
79874: PPUSH
79875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
79876: LD_ADDR_VAR 0 2
79880: PUSH
79881: LD_INT 81
79883: PUSH
79884: LD_OWVAR 2
79888: PUSH
79889: EMPTY
79890: LIST
79891: LIST
79892: PUSH
79893: LD_INT 2
79895: PUSH
79896: LD_INT 21
79898: PUSH
79899: LD_INT 1
79901: PUSH
79902: EMPTY
79903: LIST
79904: LIST
79905: PUSH
79906: LD_INT 21
79908: PUSH
79909: LD_INT 2
79911: PUSH
79912: EMPTY
79913: LIST
79914: LIST
79915: PUSH
79916: EMPTY
79917: LIST
79918: LIST
79919: LIST
79920: PUSH
79921: EMPTY
79922: LIST
79923: LIST
79924: PPUSH
79925: CALL_OW 69
79929: ST_TO_ADDR
// if not tmp then
79930: LD_VAR 0 2
79934: NOT
79935: IFFALSE 79939
// exit ;
79937: GO 80022
// p := 0 ;
79939: LD_ADDR_VAR 0 3
79943: PUSH
79944: LD_INT 0
79946: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79947: LD_INT 35
79949: PPUSH
79950: CALL_OW 67
// p := p + 1 ;
79954: LD_ADDR_VAR 0 3
79958: PUSH
79959: LD_VAR 0 3
79963: PUSH
79964: LD_INT 1
79966: PLUS
79967: ST_TO_ADDR
// for i in tmp do
79968: LD_ADDR_VAR 0 1
79972: PUSH
79973: LD_VAR 0 2
79977: PUSH
79978: FOR_IN
79979: IFFALSE 80010
// if GetLives ( i ) < 1000 then
79981: LD_VAR 0 1
79985: PPUSH
79986: CALL_OW 256
79990: PUSH
79991: LD_INT 1000
79993: LESS
79994: IFFALSE 80008
// SetLives ( i , 1000 ) ;
79996: LD_VAR 0 1
80000: PPUSH
80001: LD_INT 1000
80003: PPUSH
80004: CALL_OW 234
80008: GO 79978
80010: POP
80011: POP
// until p > 20 ;
80012: LD_VAR 0 3
80016: PUSH
80017: LD_INT 20
80019: GREATER
80020: IFFALSE 79947
// end ;
80022: PPOPN 3
80024: END
// every 0 0$1 trigger StreamModeActive and sTime do
80025: LD_EXP 61
80029: PUSH
80030: LD_EXP 112
80034: AND
80035: IFFALSE 80070
80037: GO 80039
80039: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
80040: LD_INT 28
80042: PPUSH
80043: LD_OWVAR 2
80047: PPUSH
80048: LD_INT 2
80050: PPUSH
80051: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
80055: LD_INT 30
80057: PPUSH
80058: LD_OWVAR 2
80062: PPUSH
80063: LD_INT 2
80065: PPUSH
80066: CALL_OW 322
// end ;
80070: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
80071: LD_EXP 61
80075: PUSH
80076: LD_EXP 113
80080: AND
80081: IFFALSE 80202
80083: GO 80085
80085: DISABLE
80086: LD_INT 0
80088: PPUSH
80089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80090: LD_ADDR_VAR 0 2
80094: PUSH
80095: LD_INT 22
80097: PUSH
80098: LD_OWVAR 2
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: PUSH
80107: LD_INT 21
80109: PUSH
80110: LD_INT 1
80112: PUSH
80113: EMPTY
80114: LIST
80115: LIST
80116: PUSH
80117: LD_INT 3
80119: PUSH
80120: LD_INT 23
80122: PUSH
80123: LD_INT 0
80125: PUSH
80126: EMPTY
80127: LIST
80128: LIST
80129: PUSH
80130: EMPTY
80131: LIST
80132: LIST
80133: PUSH
80134: EMPTY
80135: LIST
80136: LIST
80137: LIST
80138: PPUSH
80139: CALL_OW 69
80143: ST_TO_ADDR
// if not tmp then
80144: LD_VAR 0 2
80148: NOT
80149: IFFALSE 80153
// exit ;
80151: GO 80202
// for i in tmp do
80153: LD_ADDR_VAR 0 1
80157: PUSH
80158: LD_VAR 0 2
80162: PUSH
80163: FOR_IN
80164: IFFALSE 80200
// begin if Crawls ( i ) then
80166: LD_VAR 0 1
80170: PPUSH
80171: CALL_OW 318
80175: IFFALSE 80186
// ComWalk ( i ) ;
80177: LD_VAR 0 1
80181: PPUSH
80182: CALL_OW 138
// SetClass ( i , 2 ) ;
80186: LD_VAR 0 1
80190: PPUSH
80191: LD_INT 2
80193: PPUSH
80194: CALL_OW 336
// end ;
80198: GO 80163
80200: POP
80201: POP
// end ;
80202: PPOPN 2
80204: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
80205: LD_EXP 61
80209: PUSH
80210: LD_EXP 114
80214: AND
80215: IFFALSE 80503
80217: GO 80219
80219: DISABLE
80220: LD_INT 0
80222: PPUSH
80223: PPUSH
80224: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
80225: LD_OWVAR 2
80229: PPUSH
80230: LD_INT 9
80232: PPUSH
80233: LD_INT 1
80235: PPUSH
80236: LD_INT 1
80238: PPUSH
80239: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
80243: LD_INT 9
80245: PPUSH
80246: LD_OWVAR 2
80250: PPUSH
80251: CALL_OW 343
// uc_side := 9 ;
80255: LD_ADDR_OWVAR 20
80259: PUSH
80260: LD_INT 9
80262: ST_TO_ADDR
// uc_nation := 2 ;
80263: LD_ADDR_OWVAR 21
80267: PUSH
80268: LD_INT 2
80270: ST_TO_ADDR
// hc_name := Dark Warrior ;
80271: LD_ADDR_OWVAR 26
80275: PUSH
80276: LD_STRING Dark Warrior
80278: ST_TO_ADDR
// hc_gallery :=  ;
80279: LD_ADDR_OWVAR 33
80283: PUSH
80284: LD_STRING 
80286: ST_TO_ADDR
// hc_noskilllimit := true ;
80287: LD_ADDR_OWVAR 76
80291: PUSH
80292: LD_INT 1
80294: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
80295: LD_ADDR_OWVAR 31
80299: PUSH
80300: LD_INT 30
80302: PUSH
80303: LD_INT 30
80305: PUSH
80306: LD_INT 30
80308: PUSH
80309: LD_INT 30
80311: PUSH
80312: EMPTY
80313: LIST
80314: LIST
80315: LIST
80316: LIST
80317: ST_TO_ADDR
// un := CreateHuman ;
80318: LD_ADDR_VAR 0 3
80322: PUSH
80323: CALL_OW 44
80327: ST_TO_ADDR
// hc_noskilllimit := false ;
80328: LD_ADDR_OWVAR 76
80332: PUSH
80333: LD_INT 0
80335: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80336: LD_VAR 0 3
80340: PPUSH
80341: LD_INT 1
80343: PPUSH
80344: CALL_OW 51
// ToLua ( playRanger() ) ;
80348: LD_STRING playRanger()
80350: PPUSH
80351: CALL_OW 559
// p := 0 ;
80355: LD_ADDR_VAR 0 2
80359: PUSH
80360: LD_INT 0
80362: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80363: LD_INT 35
80365: PPUSH
80366: CALL_OW 67
// p := p + 1 ;
80370: LD_ADDR_VAR 0 2
80374: PUSH
80375: LD_VAR 0 2
80379: PUSH
80380: LD_INT 1
80382: PLUS
80383: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
80384: LD_VAR 0 3
80388: PPUSH
80389: CALL_OW 256
80393: PUSH
80394: LD_INT 1000
80396: LESS
80397: IFFALSE 80411
// SetLives ( un , 1000 ) ;
80399: LD_VAR 0 3
80403: PPUSH
80404: LD_INT 1000
80406: PPUSH
80407: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
80411: LD_VAR 0 3
80415: PPUSH
80416: LD_INT 81
80418: PUSH
80419: LD_OWVAR 2
80423: PUSH
80424: EMPTY
80425: LIST
80426: LIST
80427: PUSH
80428: LD_INT 91
80430: PUSH
80431: LD_VAR 0 3
80435: PUSH
80436: LD_INT 30
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: LIST
80443: PUSH
80444: EMPTY
80445: LIST
80446: LIST
80447: PPUSH
80448: CALL_OW 69
80452: PPUSH
80453: LD_VAR 0 3
80457: PPUSH
80458: CALL_OW 74
80462: PPUSH
80463: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
80467: LD_VAR 0 2
80471: PUSH
80472: LD_INT 80
80474: GREATER
80475: PUSH
80476: LD_VAR 0 3
80480: PPUSH
80481: CALL_OW 301
80485: OR
80486: IFFALSE 80363
// if un then
80488: LD_VAR 0 3
80492: IFFALSE 80503
// RemoveUnit ( un ) ;
80494: LD_VAR 0 3
80498: PPUSH
80499: CALL_OW 64
// end ;
80503: PPOPN 3
80505: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
80506: LD_EXP 115
80510: IFFALSE 80626
80512: GO 80514
80514: DISABLE
80515: LD_INT 0
80517: PPUSH
80518: PPUSH
80519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80520: LD_ADDR_VAR 0 2
80524: PUSH
80525: LD_INT 81
80527: PUSH
80528: LD_OWVAR 2
80532: PUSH
80533: EMPTY
80534: LIST
80535: LIST
80536: PUSH
80537: LD_INT 21
80539: PUSH
80540: LD_INT 1
80542: PUSH
80543: EMPTY
80544: LIST
80545: LIST
80546: PUSH
80547: EMPTY
80548: LIST
80549: LIST
80550: PPUSH
80551: CALL_OW 69
80555: ST_TO_ADDR
// ToLua ( playComputer() ) ;
80556: LD_STRING playComputer()
80558: PPUSH
80559: CALL_OW 559
// if not tmp then
80563: LD_VAR 0 2
80567: NOT
80568: IFFALSE 80572
// exit ;
80570: GO 80626
// for i in tmp do
80572: LD_ADDR_VAR 0 1
80576: PUSH
80577: LD_VAR 0 2
80581: PUSH
80582: FOR_IN
80583: IFFALSE 80624
// for j := 1 to 4 do
80585: LD_ADDR_VAR 0 3
80589: PUSH
80590: DOUBLE
80591: LD_INT 1
80593: DEC
80594: ST_TO_ADDR
80595: LD_INT 4
80597: PUSH
80598: FOR_TO
80599: IFFALSE 80620
// SetSkill ( i , j , 10 ) ;
80601: LD_VAR 0 1
80605: PPUSH
80606: LD_VAR 0 3
80610: PPUSH
80611: LD_INT 10
80613: PPUSH
80614: CALL_OW 237
80618: GO 80598
80620: POP
80621: POP
80622: GO 80582
80624: POP
80625: POP
// end ;
80626: PPOPN 3
80628: END
// every 0 0$1 trigger s30 do var i , tmp ;
80629: LD_EXP 116
80633: IFFALSE 80702
80635: GO 80637
80637: DISABLE
80638: LD_INT 0
80640: PPUSH
80641: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80642: LD_ADDR_VAR 0 2
80646: PUSH
80647: LD_INT 22
80649: PUSH
80650: LD_OWVAR 2
80654: PUSH
80655: EMPTY
80656: LIST
80657: LIST
80658: PPUSH
80659: CALL_OW 69
80663: ST_TO_ADDR
// if not tmp then
80664: LD_VAR 0 2
80668: NOT
80669: IFFALSE 80673
// exit ;
80671: GO 80702
// for i in tmp do
80673: LD_ADDR_VAR 0 1
80677: PUSH
80678: LD_VAR 0 2
80682: PUSH
80683: FOR_IN
80684: IFFALSE 80700
// SetLives ( i , 300 ) ;
80686: LD_VAR 0 1
80690: PPUSH
80691: LD_INT 300
80693: PPUSH
80694: CALL_OW 234
80698: GO 80683
80700: POP
80701: POP
// end ;
80702: PPOPN 2
80704: END
// every 0 0$1 trigger s60 do var i , tmp ;
80705: LD_EXP 117
80709: IFFALSE 80778
80711: GO 80713
80713: DISABLE
80714: LD_INT 0
80716: PPUSH
80717: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80718: LD_ADDR_VAR 0 2
80722: PUSH
80723: LD_INT 22
80725: PUSH
80726: LD_OWVAR 2
80730: PUSH
80731: EMPTY
80732: LIST
80733: LIST
80734: PPUSH
80735: CALL_OW 69
80739: ST_TO_ADDR
// if not tmp then
80740: LD_VAR 0 2
80744: NOT
80745: IFFALSE 80749
// exit ;
80747: GO 80778
// for i in tmp do
80749: LD_ADDR_VAR 0 1
80753: PUSH
80754: LD_VAR 0 2
80758: PUSH
80759: FOR_IN
80760: IFFALSE 80776
// SetLives ( i , 600 ) ;
80762: LD_VAR 0 1
80766: PPUSH
80767: LD_INT 600
80769: PPUSH
80770: CALL_OW 234
80774: GO 80759
80776: POP
80777: POP
// end ;
80778: PPOPN 2
80780: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
80781: LD_INT 0
80783: PPUSH
// case cmd of 301 :
80784: LD_VAR 0 1
80788: PUSH
80789: LD_INT 301
80791: DOUBLE
80792: EQUAL
80793: IFTRUE 80797
80795: GO 80829
80797: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
80798: LD_VAR 0 6
80802: PPUSH
80803: LD_VAR 0 7
80807: PPUSH
80808: LD_VAR 0 8
80812: PPUSH
80813: LD_VAR 0 4
80817: PPUSH
80818: LD_VAR 0 5
80822: PPUSH
80823: CALL 82030 0 5
80827: GO 80950
80829: LD_INT 302
80831: DOUBLE
80832: EQUAL
80833: IFTRUE 80837
80835: GO 80874
80837: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
80838: LD_VAR 0 6
80842: PPUSH
80843: LD_VAR 0 7
80847: PPUSH
80848: LD_VAR 0 8
80852: PPUSH
80853: LD_VAR 0 9
80857: PPUSH
80858: LD_VAR 0 4
80862: PPUSH
80863: LD_VAR 0 5
80867: PPUSH
80868: CALL 82121 0 6
80872: GO 80950
80874: LD_INT 303
80876: DOUBLE
80877: EQUAL
80878: IFTRUE 80882
80880: GO 80919
80882: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
80883: LD_VAR 0 6
80887: PPUSH
80888: LD_VAR 0 7
80892: PPUSH
80893: LD_VAR 0 8
80897: PPUSH
80898: LD_VAR 0 9
80902: PPUSH
80903: LD_VAR 0 4
80907: PPUSH
80908: LD_VAR 0 5
80912: PPUSH
80913: CALL 80955 0 6
80917: GO 80950
80919: LD_INT 304
80921: DOUBLE
80922: EQUAL
80923: IFTRUE 80927
80925: GO 80949
80927: POP
// hHackTeleport ( unit , x , y ) ; end ;
80928: LD_VAR 0 2
80932: PPUSH
80933: LD_VAR 0 4
80937: PPUSH
80938: LD_VAR 0 5
80942: PPUSH
80943: CALL 82714 0 3
80947: GO 80950
80949: POP
// end ;
80950: LD_VAR 0 12
80954: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
80955: LD_INT 0
80957: PPUSH
80958: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
80959: LD_VAR 0 1
80963: PUSH
80964: LD_INT 1
80966: LESS
80967: PUSH
80968: LD_VAR 0 1
80972: PUSH
80973: LD_INT 3
80975: GREATER
80976: OR
80977: PUSH
80978: LD_VAR 0 5
80982: PPUSH
80983: LD_VAR 0 6
80987: PPUSH
80988: CALL_OW 428
80992: OR
80993: IFFALSE 80997
// exit ;
80995: GO 81717
// uc_side := your_side ;
80997: LD_ADDR_OWVAR 20
81001: PUSH
81002: LD_OWVAR 2
81006: ST_TO_ADDR
// uc_nation := nation ;
81007: LD_ADDR_OWVAR 21
81011: PUSH
81012: LD_VAR 0 1
81016: ST_TO_ADDR
// bc_level = 1 ;
81017: LD_ADDR_OWVAR 43
81021: PUSH
81022: LD_INT 1
81024: ST_TO_ADDR
// case btype of 1 :
81025: LD_VAR 0 2
81029: PUSH
81030: LD_INT 1
81032: DOUBLE
81033: EQUAL
81034: IFTRUE 81038
81036: GO 81049
81038: POP
// bc_type := b_depot ; 2 :
81039: LD_ADDR_OWVAR 42
81043: PUSH
81044: LD_INT 0
81046: ST_TO_ADDR
81047: GO 81661
81049: LD_INT 2
81051: DOUBLE
81052: EQUAL
81053: IFTRUE 81057
81055: GO 81068
81057: POP
// bc_type := b_warehouse ; 3 :
81058: LD_ADDR_OWVAR 42
81062: PUSH
81063: LD_INT 1
81065: ST_TO_ADDR
81066: GO 81661
81068: LD_INT 3
81070: DOUBLE
81071: EQUAL
81072: IFTRUE 81076
81074: GO 81087
81076: POP
// bc_type := b_lab ; 4 .. 9 :
81077: LD_ADDR_OWVAR 42
81081: PUSH
81082: LD_INT 6
81084: ST_TO_ADDR
81085: GO 81661
81087: LD_INT 4
81089: DOUBLE
81090: GREATEREQUAL
81091: IFFALSE 81099
81093: LD_INT 9
81095: DOUBLE
81096: LESSEQUAL
81097: IFTRUE 81101
81099: GO 81153
81101: POP
// begin bc_type := b_lab_half ;
81102: LD_ADDR_OWVAR 42
81106: PUSH
81107: LD_INT 7
81109: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
81110: LD_ADDR_OWVAR 44
81114: PUSH
81115: LD_INT 10
81117: PUSH
81118: LD_INT 11
81120: PUSH
81121: LD_INT 12
81123: PUSH
81124: LD_INT 15
81126: PUSH
81127: LD_INT 14
81129: PUSH
81130: LD_INT 13
81132: PUSH
81133: EMPTY
81134: LIST
81135: LIST
81136: LIST
81137: LIST
81138: LIST
81139: LIST
81140: PUSH
81141: LD_VAR 0 2
81145: PUSH
81146: LD_INT 3
81148: MINUS
81149: ARRAY
81150: ST_TO_ADDR
// end ; 10 .. 13 :
81151: GO 81661
81153: LD_INT 10
81155: DOUBLE
81156: GREATEREQUAL
81157: IFFALSE 81165
81159: LD_INT 13
81161: DOUBLE
81162: LESSEQUAL
81163: IFTRUE 81167
81165: GO 81244
81167: POP
// begin bc_type := b_lab_full ;
81168: LD_ADDR_OWVAR 42
81172: PUSH
81173: LD_INT 8
81175: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
81176: LD_ADDR_OWVAR 44
81180: PUSH
81181: LD_INT 10
81183: PUSH
81184: LD_INT 12
81186: PUSH
81187: LD_INT 14
81189: PUSH
81190: LD_INT 13
81192: PUSH
81193: EMPTY
81194: LIST
81195: LIST
81196: LIST
81197: LIST
81198: PUSH
81199: LD_VAR 0 2
81203: PUSH
81204: LD_INT 9
81206: MINUS
81207: ARRAY
81208: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
81209: LD_ADDR_OWVAR 45
81213: PUSH
81214: LD_INT 11
81216: PUSH
81217: LD_INT 15
81219: PUSH
81220: LD_INT 12
81222: PUSH
81223: LD_INT 15
81225: PUSH
81226: EMPTY
81227: LIST
81228: LIST
81229: LIST
81230: LIST
81231: PUSH
81232: LD_VAR 0 2
81236: PUSH
81237: LD_INT 9
81239: MINUS
81240: ARRAY
81241: ST_TO_ADDR
// end ; 14 :
81242: GO 81661
81244: LD_INT 14
81246: DOUBLE
81247: EQUAL
81248: IFTRUE 81252
81250: GO 81263
81252: POP
// bc_type := b_workshop ; 15 :
81253: LD_ADDR_OWVAR 42
81257: PUSH
81258: LD_INT 2
81260: ST_TO_ADDR
81261: GO 81661
81263: LD_INT 15
81265: DOUBLE
81266: EQUAL
81267: IFTRUE 81271
81269: GO 81282
81271: POP
// bc_type := b_factory ; 16 :
81272: LD_ADDR_OWVAR 42
81276: PUSH
81277: LD_INT 3
81279: ST_TO_ADDR
81280: GO 81661
81282: LD_INT 16
81284: DOUBLE
81285: EQUAL
81286: IFTRUE 81290
81288: GO 81301
81290: POP
// bc_type := b_ext_gun ; 17 :
81291: LD_ADDR_OWVAR 42
81295: PUSH
81296: LD_INT 17
81298: ST_TO_ADDR
81299: GO 81661
81301: LD_INT 17
81303: DOUBLE
81304: EQUAL
81305: IFTRUE 81309
81307: GO 81337
81309: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
81310: LD_ADDR_OWVAR 42
81314: PUSH
81315: LD_INT 19
81317: PUSH
81318: LD_INT 23
81320: PUSH
81321: LD_INT 19
81323: PUSH
81324: EMPTY
81325: LIST
81326: LIST
81327: LIST
81328: PUSH
81329: LD_VAR 0 1
81333: ARRAY
81334: ST_TO_ADDR
81335: GO 81661
81337: LD_INT 18
81339: DOUBLE
81340: EQUAL
81341: IFTRUE 81345
81343: GO 81356
81345: POP
// bc_type := b_ext_radar ; 19 :
81346: LD_ADDR_OWVAR 42
81350: PUSH
81351: LD_INT 20
81353: ST_TO_ADDR
81354: GO 81661
81356: LD_INT 19
81358: DOUBLE
81359: EQUAL
81360: IFTRUE 81364
81362: GO 81375
81364: POP
// bc_type := b_ext_radio ; 20 :
81365: LD_ADDR_OWVAR 42
81369: PUSH
81370: LD_INT 22
81372: ST_TO_ADDR
81373: GO 81661
81375: LD_INT 20
81377: DOUBLE
81378: EQUAL
81379: IFTRUE 81383
81381: GO 81394
81383: POP
// bc_type := b_ext_siberium ; 21 :
81384: LD_ADDR_OWVAR 42
81388: PUSH
81389: LD_INT 21
81391: ST_TO_ADDR
81392: GO 81661
81394: LD_INT 21
81396: DOUBLE
81397: EQUAL
81398: IFTRUE 81402
81400: GO 81413
81402: POP
// bc_type := b_ext_computer ; 22 :
81403: LD_ADDR_OWVAR 42
81407: PUSH
81408: LD_INT 24
81410: ST_TO_ADDR
81411: GO 81661
81413: LD_INT 22
81415: DOUBLE
81416: EQUAL
81417: IFTRUE 81421
81419: GO 81432
81421: POP
// bc_type := b_ext_track ; 23 :
81422: LD_ADDR_OWVAR 42
81426: PUSH
81427: LD_INT 16
81429: ST_TO_ADDR
81430: GO 81661
81432: LD_INT 23
81434: DOUBLE
81435: EQUAL
81436: IFTRUE 81440
81438: GO 81451
81440: POP
// bc_type := b_ext_laser ; 24 :
81441: LD_ADDR_OWVAR 42
81445: PUSH
81446: LD_INT 25
81448: ST_TO_ADDR
81449: GO 81661
81451: LD_INT 24
81453: DOUBLE
81454: EQUAL
81455: IFTRUE 81459
81457: GO 81470
81459: POP
// bc_type := b_control_tower ; 25 :
81460: LD_ADDR_OWVAR 42
81464: PUSH
81465: LD_INT 36
81467: ST_TO_ADDR
81468: GO 81661
81470: LD_INT 25
81472: DOUBLE
81473: EQUAL
81474: IFTRUE 81478
81476: GO 81489
81478: POP
// bc_type := b_breastwork ; 26 :
81479: LD_ADDR_OWVAR 42
81483: PUSH
81484: LD_INT 31
81486: ST_TO_ADDR
81487: GO 81661
81489: LD_INT 26
81491: DOUBLE
81492: EQUAL
81493: IFTRUE 81497
81495: GO 81508
81497: POP
// bc_type := b_bunker ; 27 :
81498: LD_ADDR_OWVAR 42
81502: PUSH
81503: LD_INT 32
81505: ST_TO_ADDR
81506: GO 81661
81508: LD_INT 27
81510: DOUBLE
81511: EQUAL
81512: IFTRUE 81516
81514: GO 81527
81516: POP
// bc_type := b_turret ; 28 :
81517: LD_ADDR_OWVAR 42
81521: PUSH
81522: LD_INT 33
81524: ST_TO_ADDR
81525: GO 81661
81527: LD_INT 28
81529: DOUBLE
81530: EQUAL
81531: IFTRUE 81535
81533: GO 81546
81535: POP
// bc_type := b_armoury ; 29 :
81536: LD_ADDR_OWVAR 42
81540: PUSH
81541: LD_INT 4
81543: ST_TO_ADDR
81544: GO 81661
81546: LD_INT 29
81548: DOUBLE
81549: EQUAL
81550: IFTRUE 81554
81552: GO 81565
81554: POP
// bc_type := b_barracks ; 30 :
81555: LD_ADDR_OWVAR 42
81559: PUSH
81560: LD_INT 5
81562: ST_TO_ADDR
81563: GO 81661
81565: LD_INT 30
81567: DOUBLE
81568: EQUAL
81569: IFTRUE 81573
81571: GO 81584
81573: POP
// bc_type := b_solar_power ; 31 :
81574: LD_ADDR_OWVAR 42
81578: PUSH
81579: LD_INT 27
81581: ST_TO_ADDR
81582: GO 81661
81584: LD_INT 31
81586: DOUBLE
81587: EQUAL
81588: IFTRUE 81592
81590: GO 81603
81592: POP
// bc_type := b_oil_power ; 32 :
81593: LD_ADDR_OWVAR 42
81597: PUSH
81598: LD_INT 26
81600: ST_TO_ADDR
81601: GO 81661
81603: LD_INT 32
81605: DOUBLE
81606: EQUAL
81607: IFTRUE 81611
81609: GO 81622
81611: POP
// bc_type := b_siberite_power ; 33 :
81612: LD_ADDR_OWVAR 42
81616: PUSH
81617: LD_INT 28
81619: ST_TO_ADDR
81620: GO 81661
81622: LD_INT 33
81624: DOUBLE
81625: EQUAL
81626: IFTRUE 81630
81628: GO 81641
81630: POP
// bc_type := b_oil_mine ; 34 :
81631: LD_ADDR_OWVAR 42
81635: PUSH
81636: LD_INT 29
81638: ST_TO_ADDR
81639: GO 81661
81641: LD_INT 34
81643: DOUBLE
81644: EQUAL
81645: IFTRUE 81649
81647: GO 81660
81649: POP
// bc_type := b_siberite_mine ; end ;
81650: LD_ADDR_OWVAR 42
81654: PUSH
81655: LD_INT 30
81657: ST_TO_ADDR
81658: GO 81661
81660: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
81661: LD_ADDR_VAR 0 8
81665: PUSH
81666: LD_VAR 0 5
81670: PPUSH
81671: LD_VAR 0 6
81675: PPUSH
81676: LD_VAR 0 3
81680: PPUSH
81681: CALL_OW 47
81685: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
81686: LD_OWVAR 42
81690: PUSH
81691: LD_INT 32
81693: PUSH
81694: LD_INT 33
81696: PUSH
81697: EMPTY
81698: LIST
81699: LIST
81700: IN
81701: IFFALSE 81717
// PlaceWeaponTurret ( b , weapon ) ;
81703: LD_VAR 0 8
81707: PPUSH
81708: LD_VAR 0 4
81712: PPUSH
81713: CALL_OW 431
// end ;
81717: LD_VAR 0 7
81721: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
81722: LD_INT 0
81724: PPUSH
81725: PPUSH
81726: PPUSH
81727: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81728: LD_ADDR_VAR 0 4
81732: PUSH
81733: LD_INT 22
81735: PUSH
81736: LD_OWVAR 2
81740: PUSH
81741: EMPTY
81742: LIST
81743: LIST
81744: PUSH
81745: LD_INT 2
81747: PUSH
81748: LD_INT 30
81750: PUSH
81751: LD_INT 0
81753: PUSH
81754: EMPTY
81755: LIST
81756: LIST
81757: PUSH
81758: LD_INT 30
81760: PUSH
81761: LD_INT 1
81763: PUSH
81764: EMPTY
81765: LIST
81766: LIST
81767: PUSH
81768: EMPTY
81769: LIST
81770: LIST
81771: LIST
81772: PUSH
81773: EMPTY
81774: LIST
81775: LIST
81776: PPUSH
81777: CALL_OW 69
81781: ST_TO_ADDR
// if not tmp then
81782: LD_VAR 0 4
81786: NOT
81787: IFFALSE 81791
// exit ;
81789: GO 81850
// for i in tmp do
81791: LD_ADDR_VAR 0 2
81795: PUSH
81796: LD_VAR 0 4
81800: PUSH
81801: FOR_IN
81802: IFFALSE 81848
// for j = 1 to 3 do
81804: LD_ADDR_VAR 0 3
81808: PUSH
81809: DOUBLE
81810: LD_INT 1
81812: DEC
81813: ST_TO_ADDR
81814: LD_INT 3
81816: PUSH
81817: FOR_TO
81818: IFFALSE 81844
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
81820: LD_VAR 0 2
81824: PPUSH
81825: CALL_OW 274
81829: PPUSH
81830: LD_VAR 0 3
81834: PPUSH
81835: LD_INT 99999
81837: PPUSH
81838: CALL_OW 277
81842: GO 81817
81844: POP
81845: POP
81846: GO 81801
81848: POP
81849: POP
// end ;
81850: LD_VAR 0 1
81854: RET
// export function hHackSetLevel10 ; var i , j ; begin
81855: LD_INT 0
81857: PPUSH
81858: PPUSH
81859: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81860: LD_ADDR_VAR 0 2
81864: PUSH
81865: LD_INT 21
81867: PUSH
81868: LD_INT 1
81870: PUSH
81871: EMPTY
81872: LIST
81873: LIST
81874: PPUSH
81875: CALL_OW 69
81879: PUSH
81880: FOR_IN
81881: IFFALSE 81933
// if IsSelected ( i ) then
81883: LD_VAR 0 2
81887: PPUSH
81888: CALL_OW 306
81892: IFFALSE 81931
// begin for j := 1 to 4 do
81894: LD_ADDR_VAR 0 3
81898: PUSH
81899: DOUBLE
81900: LD_INT 1
81902: DEC
81903: ST_TO_ADDR
81904: LD_INT 4
81906: PUSH
81907: FOR_TO
81908: IFFALSE 81929
// SetSkill ( i , j , 10 ) ;
81910: LD_VAR 0 2
81914: PPUSH
81915: LD_VAR 0 3
81919: PPUSH
81920: LD_INT 10
81922: PPUSH
81923: CALL_OW 237
81927: GO 81907
81929: POP
81930: POP
// end ;
81931: GO 81880
81933: POP
81934: POP
// end ;
81935: LD_VAR 0 1
81939: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
81940: LD_INT 0
81942: PPUSH
81943: PPUSH
81944: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
81945: LD_ADDR_VAR 0 2
81949: PUSH
81950: LD_INT 22
81952: PUSH
81953: LD_OWVAR 2
81957: PUSH
81958: EMPTY
81959: LIST
81960: LIST
81961: PUSH
81962: LD_INT 21
81964: PUSH
81965: LD_INT 1
81967: PUSH
81968: EMPTY
81969: LIST
81970: LIST
81971: PUSH
81972: EMPTY
81973: LIST
81974: LIST
81975: PPUSH
81976: CALL_OW 69
81980: PUSH
81981: FOR_IN
81982: IFFALSE 82023
// begin for j := 1 to 4 do
81984: LD_ADDR_VAR 0 3
81988: PUSH
81989: DOUBLE
81990: LD_INT 1
81992: DEC
81993: ST_TO_ADDR
81994: LD_INT 4
81996: PUSH
81997: FOR_TO
81998: IFFALSE 82019
// SetSkill ( i , j , 10 ) ;
82000: LD_VAR 0 2
82004: PPUSH
82005: LD_VAR 0 3
82009: PPUSH
82010: LD_INT 10
82012: PPUSH
82013: CALL_OW 237
82017: GO 81997
82019: POP
82020: POP
// end ;
82021: GO 81981
82023: POP
82024: POP
// end ;
82025: LD_VAR 0 1
82029: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
82030: LD_INT 0
82032: PPUSH
// uc_side := your_side ;
82033: LD_ADDR_OWVAR 20
82037: PUSH
82038: LD_OWVAR 2
82042: ST_TO_ADDR
// uc_nation := nation ;
82043: LD_ADDR_OWVAR 21
82047: PUSH
82048: LD_VAR 0 1
82052: ST_TO_ADDR
// InitHc ;
82053: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
82057: LD_INT 0
82059: PPUSH
82060: LD_VAR 0 2
82064: PPUSH
82065: LD_VAR 0 3
82069: PPUSH
82070: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
82074: LD_VAR 0 4
82078: PPUSH
82079: LD_VAR 0 5
82083: PPUSH
82084: CALL_OW 428
82088: PUSH
82089: LD_INT 0
82091: EQUAL
82092: IFFALSE 82116
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
82094: CALL_OW 44
82098: PPUSH
82099: LD_VAR 0 4
82103: PPUSH
82104: LD_VAR 0 5
82108: PPUSH
82109: LD_INT 1
82111: PPUSH
82112: CALL_OW 48
// end ;
82116: LD_VAR 0 6
82120: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
82121: LD_INT 0
82123: PPUSH
82124: PPUSH
// uc_side := your_side ;
82125: LD_ADDR_OWVAR 20
82129: PUSH
82130: LD_OWVAR 2
82134: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
82135: LD_VAR 0 1
82139: PUSH
82140: LD_INT 1
82142: PUSH
82143: LD_INT 2
82145: PUSH
82146: LD_INT 3
82148: PUSH
82149: LD_INT 4
82151: PUSH
82152: LD_INT 5
82154: PUSH
82155: EMPTY
82156: LIST
82157: LIST
82158: LIST
82159: LIST
82160: LIST
82161: IN
82162: IFFALSE 82174
// uc_nation := nation_american else
82164: LD_ADDR_OWVAR 21
82168: PUSH
82169: LD_INT 1
82171: ST_TO_ADDR
82172: GO 82217
// if chassis in [ 11 , 12 , 13 , 14 ] then
82174: LD_VAR 0 1
82178: PUSH
82179: LD_INT 11
82181: PUSH
82182: LD_INT 12
82184: PUSH
82185: LD_INT 13
82187: PUSH
82188: LD_INT 14
82190: PUSH
82191: EMPTY
82192: LIST
82193: LIST
82194: LIST
82195: LIST
82196: IN
82197: IFFALSE 82209
// uc_nation := nation_arabian else
82199: LD_ADDR_OWVAR 21
82203: PUSH
82204: LD_INT 2
82206: ST_TO_ADDR
82207: GO 82217
// uc_nation := nation_russian ;
82209: LD_ADDR_OWVAR 21
82213: PUSH
82214: LD_INT 3
82216: ST_TO_ADDR
// vc_chassis := chassis ;
82217: LD_ADDR_OWVAR 37
82221: PUSH
82222: LD_VAR 0 1
82226: ST_TO_ADDR
// vc_engine := engine ;
82227: LD_ADDR_OWVAR 39
82231: PUSH
82232: LD_VAR 0 2
82236: ST_TO_ADDR
// vc_control := control ;
82237: LD_ADDR_OWVAR 38
82241: PUSH
82242: LD_VAR 0 3
82246: ST_TO_ADDR
// vc_weapon := weapon ;
82247: LD_ADDR_OWVAR 40
82251: PUSH
82252: LD_VAR 0 4
82256: ST_TO_ADDR
// un := CreateVehicle ;
82257: LD_ADDR_VAR 0 8
82261: PUSH
82262: CALL_OW 45
82266: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
82267: LD_VAR 0 8
82271: PPUSH
82272: LD_INT 0
82274: PPUSH
82275: LD_INT 5
82277: PPUSH
82278: CALL_OW 12
82282: PPUSH
82283: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
82287: LD_VAR 0 8
82291: PPUSH
82292: LD_VAR 0 5
82296: PPUSH
82297: LD_VAR 0 6
82301: PPUSH
82302: LD_INT 1
82304: PPUSH
82305: CALL_OW 48
// end ;
82309: LD_VAR 0 7
82313: RET
// export hInvincible ; every 1 do
82314: GO 82316
82316: DISABLE
// hInvincible := [ ] ;
82317: LD_ADDR_EXP 118
82321: PUSH
82322: EMPTY
82323: ST_TO_ADDR
82324: END
// every 10 do var i ;
82325: GO 82327
82327: DISABLE
82328: LD_INT 0
82330: PPUSH
// begin enable ;
82331: ENABLE
// if not hInvincible then
82332: LD_EXP 118
82336: NOT
82337: IFFALSE 82341
// exit ;
82339: GO 82385
// for i in hInvincible do
82341: LD_ADDR_VAR 0 1
82345: PUSH
82346: LD_EXP 118
82350: PUSH
82351: FOR_IN
82352: IFFALSE 82383
// if GetLives ( i ) < 1000 then
82354: LD_VAR 0 1
82358: PPUSH
82359: CALL_OW 256
82363: PUSH
82364: LD_INT 1000
82366: LESS
82367: IFFALSE 82381
// SetLives ( i , 1000 ) ;
82369: LD_VAR 0 1
82373: PPUSH
82374: LD_INT 1000
82376: PPUSH
82377: CALL_OW 234
82381: GO 82351
82383: POP
82384: POP
// end ;
82385: PPOPN 1
82387: END
// export function hHackInvincible ; var i ; begin
82388: LD_INT 0
82390: PPUSH
82391: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
82392: LD_ADDR_VAR 0 2
82396: PUSH
82397: LD_INT 2
82399: PUSH
82400: LD_INT 21
82402: PUSH
82403: LD_INT 1
82405: PUSH
82406: EMPTY
82407: LIST
82408: LIST
82409: PUSH
82410: LD_INT 21
82412: PUSH
82413: LD_INT 2
82415: PUSH
82416: EMPTY
82417: LIST
82418: LIST
82419: PUSH
82420: EMPTY
82421: LIST
82422: LIST
82423: LIST
82424: PPUSH
82425: CALL_OW 69
82429: PUSH
82430: FOR_IN
82431: IFFALSE 82492
// if IsSelected ( i ) then
82433: LD_VAR 0 2
82437: PPUSH
82438: CALL_OW 306
82442: IFFALSE 82490
// begin if i in hInvincible then
82444: LD_VAR 0 2
82448: PUSH
82449: LD_EXP 118
82453: IN
82454: IFFALSE 82474
// hInvincible := hInvincible diff i else
82456: LD_ADDR_EXP 118
82460: PUSH
82461: LD_EXP 118
82465: PUSH
82466: LD_VAR 0 2
82470: DIFF
82471: ST_TO_ADDR
82472: GO 82490
// hInvincible := hInvincible union i ;
82474: LD_ADDR_EXP 118
82478: PUSH
82479: LD_EXP 118
82483: PUSH
82484: LD_VAR 0 2
82488: UNION
82489: ST_TO_ADDR
// end ;
82490: GO 82430
82492: POP
82493: POP
// end ;
82494: LD_VAR 0 1
82498: RET
// export function hHackInvisible ; var i , j ; begin
82499: LD_INT 0
82501: PPUSH
82502: PPUSH
82503: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82504: LD_ADDR_VAR 0 2
82508: PUSH
82509: LD_INT 21
82511: PUSH
82512: LD_INT 1
82514: PUSH
82515: EMPTY
82516: LIST
82517: LIST
82518: PPUSH
82519: CALL_OW 69
82523: PUSH
82524: FOR_IN
82525: IFFALSE 82549
// if IsSelected ( i ) then
82527: LD_VAR 0 2
82531: PPUSH
82532: CALL_OW 306
82536: IFFALSE 82547
// ComForceInvisible ( i ) ;
82538: LD_VAR 0 2
82542: PPUSH
82543: CALL_OW 496
82547: GO 82524
82549: POP
82550: POP
// end ;
82551: LD_VAR 0 1
82555: RET
// export function hHackChangeYourSide ; begin
82556: LD_INT 0
82558: PPUSH
// if your_side = 8 then
82559: LD_OWVAR 2
82563: PUSH
82564: LD_INT 8
82566: EQUAL
82567: IFFALSE 82579
// your_side := 0 else
82569: LD_ADDR_OWVAR 2
82573: PUSH
82574: LD_INT 0
82576: ST_TO_ADDR
82577: GO 82593
// your_side := your_side + 1 ;
82579: LD_ADDR_OWVAR 2
82583: PUSH
82584: LD_OWVAR 2
82588: PUSH
82589: LD_INT 1
82591: PLUS
82592: ST_TO_ADDR
// end ;
82593: LD_VAR 0 1
82597: RET
// export function hHackChangeUnitSide ; var i , j ; begin
82598: LD_INT 0
82600: PPUSH
82601: PPUSH
82602: PPUSH
// for i in all_units do
82603: LD_ADDR_VAR 0 2
82607: PUSH
82608: LD_OWVAR 3
82612: PUSH
82613: FOR_IN
82614: IFFALSE 82692
// if IsSelected ( i ) then
82616: LD_VAR 0 2
82620: PPUSH
82621: CALL_OW 306
82625: IFFALSE 82690
// begin j := GetSide ( i ) ;
82627: LD_ADDR_VAR 0 3
82631: PUSH
82632: LD_VAR 0 2
82636: PPUSH
82637: CALL_OW 255
82641: ST_TO_ADDR
// if j = 8 then
82642: LD_VAR 0 3
82646: PUSH
82647: LD_INT 8
82649: EQUAL
82650: IFFALSE 82662
// j := 0 else
82652: LD_ADDR_VAR 0 3
82656: PUSH
82657: LD_INT 0
82659: ST_TO_ADDR
82660: GO 82676
// j := j + 1 ;
82662: LD_ADDR_VAR 0 3
82666: PUSH
82667: LD_VAR 0 3
82671: PUSH
82672: LD_INT 1
82674: PLUS
82675: ST_TO_ADDR
// SetSide ( i , j ) ;
82676: LD_VAR 0 2
82680: PPUSH
82681: LD_VAR 0 3
82685: PPUSH
82686: CALL_OW 235
// end ;
82690: GO 82613
82692: POP
82693: POP
// end ;
82694: LD_VAR 0 1
82698: RET
// export function hHackFog ; begin
82699: LD_INT 0
82701: PPUSH
// FogOff ( true ) ;
82702: LD_INT 1
82704: PPUSH
82705: CALL_OW 344
// end ;
82709: LD_VAR 0 1
82713: RET
// export function hHackTeleport ( unit , x , y ) ; begin
82714: LD_INT 0
82716: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
82717: LD_VAR 0 1
82721: PPUSH
82722: LD_VAR 0 2
82726: PPUSH
82727: LD_VAR 0 3
82731: PPUSH
82732: LD_INT 1
82734: PPUSH
82735: LD_INT 1
82737: PPUSH
82738: CALL_OW 483
// CenterOnXY ( x , y ) ;
82742: LD_VAR 0 2
82746: PPUSH
82747: LD_VAR 0 3
82751: PPUSH
82752: CALL_OW 84
// end ;
82756: LD_VAR 0 4
82760: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
82761: LD_INT 0
82763: PPUSH
82764: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
82765: LD_VAR 0 1
82769: NOT
82770: PUSH
82771: LD_VAR 0 2
82775: PPUSH
82776: LD_VAR 0 3
82780: PPUSH
82781: CALL_OW 488
82785: NOT
82786: OR
82787: PUSH
82788: LD_VAR 0 1
82792: PPUSH
82793: CALL_OW 266
82797: PUSH
82798: LD_INT 3
82800: NONEQUAL
82801: PUSH
82802: LD_VAR 0 1
82806: PPUSH
82807: CALL_OW 247
82811: PUSH
82812: LD_INT 1
82814: EQUAL
82815: NOT
82816: AND
82817: OR
82818: IFFALSE 82822
// exit ;
82820: GO 82971
// if GetType ( factory ) = unit_human then
82822: LD_VAR 0 1
82826: PPUSH
82827: CALL_OW 247
82831: PUSH
82832: LD_INT 1
82834: EQUAL
82835: IFFALSE 82852
// factory := IsInUnit ( factory ) ;
82837: LD_ADDR_VAR 0 1
82841: PUSH
82842: LD_VAR 0 1
82846: PPUSH
82847: CALL_OW 310
82851: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
82852: LD_VAR 0 1
82856: PPUSH
82857: CALL_OW 266
82861: PUSH
82862: LD_INT 3
82864: NONEQUAL
82865: IFFALSE 82869
// exit ;
82867: GO 82971
// if HexInfo ( x , y ) = factory then
82869: LD_VAR 0 2
82873: PPUSH
82874: LD_VAR 0 3
82878: PPUSH
82879: CALL_OW 428
82883: PUSH
82884: LD_VAR 0 1
82888: EQUAL
82889: IFFALSE 82916
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
82891: LD_ADDR_EXP 119
82895: PUSH
82896: LD_EXP 119
82900: PPUSH
82901: LD_VAR 0 1
82905: PPUSH
82906: LD_INT 0
82908: PPUSH
82909: CALL_OW 1
82913: ST_TO_ADDR
82914: GO 82967
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
82916: LD_ADDR_EXP 119
82920: PUSH
82921: LD_EXP 119
82925: PPUSH
82926: LD_VAR 0 1
82930: PPUSH
82931: LD_VAR 0 1
82935: PPUSH
82936: CALL_OW 255
82940: PUSH
82941: LD_VAR 0 1
82945: PUSH
82946: LD_VAR 0 2
82950: PUSH
82951: LD_VAR 0 3
82955: PUSH
82956: EMPTY
82957: LIST
82958: LIST
82959: LIST
82960: LIST
82961: PPUSH
82962: CALL_OW 1
82966: ST_TO_ADDR
// UpdateFactoryWaypoints ;
82967: CALL 82976 0 0
// end ;
82971: LD_VAR 0 4
82975: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
82976: LD_INT 0
82978: PPUSH
82979: PPUSH
82980: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
82981: LD_STRING resetFactoryWaypoint();
82983: PPUSH
82984: CALL_OW 559
// if factoryWaypoints then
82988: LD_EXP 119
82992: IFFALSE 83118
// begin list := PrepareArray ( factoryWaypoints ) ;
82994: LD_ADDR_VAR 0 3
82998: PUSH
82999: LD_EXP 119
83003: PPUSH
83004: CALL 68228 0 1
83008: ST_TO_ADDR
// for i := 1 to list do
83009: LD_ADDR_VAR 0 2
83013: PUSH
83014: DOUBLE
83015: LD_INT 1
83017: DEC
83018: ST_TO_ADDR
83019: LD_VAR 0 3
83023: PUSH
83024: FOR_TO
83025: IFFALSE 83116
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
83027: LD_STRING setFactoryWaypointXY(
83029: PUSH
83030: LD_VAR 0 3
83034: PUSH
83035: LD_VAR 0 2
83039: ARRAY
83040: PUSH
83041: LD_INT 1
83043: ARRAY
83044: STR
83045: PUSH
83046: LD_STRING ,
83048: STR
83049: PUSH
83050: LD_VAR 0 3
83054: PUSH
83055: LD_VAR 0 2
83059: ARRAY
83060: PUSH
83061: LD_INT 2
83063: ARRAY
83064: STR
83065: PUSH
83066: LD_STRING ,
83068: STR
83069: PUSH
83070: LD_VAR 0 3
83074: PUSH
83075: LD_VAR 0 2
83079: ARRAY
83080: PUSH
83081: LD_INT 3
83083: ARRAY
83084: STR
83085: PUSH
83086: LD_STRING ,
83088: STR
83089: PUSH
83090: LD_VAR 0 3
83094: PUSH
83095: LD_VAR 0 2
83099: ARRAY
83100: PUSH
83101: LD_INT 4
83103: ARRAY
83104: STR
83105: PUSH
83106: LD_STRING )
83108: STR
83109: PPUSH
83110: CALL_OW 559
83114: GO 83024
83116: POP
83117: POP
// end ; end ;
83118: LD_VAR 0 1
83122: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
83123: LD_INT 0
83125: PPUSH
// if HexInfo ( x , y ) = warehouse then
83126: LD_VAR 0 2
83130: PPUSH
83131: LD_VAR 0 3
83135: PPUSH
83136: CALL_OW 428
83140: PUSH
83141: LD_VAR 0 1
83145: EQUAL
83146: IFFALSE 83173
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
83148: LD_ADDR_EXP 120
83152: PUSH
83153: LD_EXP 120
83157: PPUSH
83158: LD_VAR 0 1
83162: PPUSH
83163: LD_INT 0
83165: PPUSH
83166: CALL_OW 1
83170: ST_TO_ADDR
83171: GO 83224
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
83173: LD_ADDR_EXP 120
83177: PUSH
83178: LD_EXP 120
83182: PPUSH
83183: LD_VAR 0 1
83187: PPUSH
83188: LD_VAR 0 1
83192: PPUSH
83193: CALL_OW 255
83197: PUSH
83198: LD_VAR 0 1
83202: PUSH
83203: LD_VAR 0 2
83207: PUSH
83208: LD_VAR 0 3
83212: PUSH
83213: EMPTY
83214: LIST
83215: LIST
83216: LIST
83217: LIST
83218: PPUSH
83219: CALL_OW 1
83223: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
83224: CALL 83233 0 0
// end ;
83228: LD_VAR 0 4
83232: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
83233: LD_INT 0
83235: PPUSH
83236: PPUSH
83237: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
83238: LD_STRING resetWarehouseGatheringPoints();
83240: PPUSH
83241: CALL_OW 559
// if warehouseGatheringPoints then
83245: LD_EXP 120
83249: IFFALSE 83375
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
83251: LD_ADDR_VAR 0 3
83255: PUSH
83256: LD_EXP 120
83260: PPUSH
83261: CALL 68228 0 1
83265: ST_TO_ADDR
// for i := 1 to list do
83266: LD_ADDR_VAR 0 2
83270: PUSH
83271: DOUBLE
83272: LD_INT 1
83274: DEC
83275: ST_TO_ADDR
83276: LD_VAR 0 3
83280: PUSH
83281: FOR_TO
83282: IFFALSE 83373
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
83284: LD_STRING setWarehouseGatheringPointXY(
83286: PUSH
83287: LD_VAR 0 3
83291: PUSH
83292: LD_VAR 0 2
83296: ARRAY
83297: PUSH
83298: LD_INT 1
83300: ARRAY
83301: STR
83302: PUSH
83303: LD_STRING ,
83305: STR
83306: PUSH
83307: LD_VAR 0 3
83311: PUSH
83312: LD_VAR 0 2
83316: ARRAY
83317: PUSH
83318: LD_INT 2
83320: ARRAY
83321: STR
83322: PUSH
83323: LD_STRING ,
83325: STR
83326: PUSH
83327: LD_VAR 0 3
83331: PUSH
83332: LD_VAR 0 2
83336: ARRAY
83337: PUSH
83338: LD_INT 3
83340: ARRAY
83341: STR
83342: PUSH
83343: LD_STRING ,
83345: STR
83346: PUSH
83347: LD_VAR 0 3
83351: PUSH
83352: LD_VAR 0 2
83356: ARRAY
83357: PUSH
83358: LD_INT 4
83360: ARRAY
83361: STR
83362: PUSH
83363: LD_STRING )
83365: STR
83366: PPUSH
83367: CALL_OW 559
83371: GO 83281
83373: POP
83374: POP
// end ; end ;
83375: LD_VAR 0 1
83379: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
83380: LD_EXP 120
83384: IFFALSE 84069
83386: GO 83388
83388: DISABLE
83389: LD_INT 0
83391: PPUSH
83392: PPUSH
83393: PPUSH
83394: PPUSH
83395: PPUSH
83396: PPUSH
83397: PPUSH
83398: PPUSH
83399: PPUSH
// begin enable ;
83400: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
83401: LD_ADDR_VAR 0 3
83405: PUSH
83406: LD_EXP 120
83410: PPUSH
83411: CALL 68228 0 1
83415: ST_TO_ADDR
// if not list then
83416: LD_VAR 0 3
83420: NOT
83421: IFFALSE 83425
// exit ;
83423: GO 84069
// for i := 1 to list do
83425: LD_ADDR_VAR 0 1
83429: PUSH
83430: DOUBLE
83431: LD_INT 1
83433: DEC
83434: ST_TO_ADDR
83435: LD_VAR 0 3
83439: PUSH
83440: FOR_TO
83441: IFFALSE 84067
// begin depot := list [ i ] [ 2 ] ;
83443: LD_ADDR_VAR 0 8
83447: PUSH
83448: LD_VAR 0 3
83452: PUSH
83453: LD_VAR 0 1
83457: ARRAY
83458: PUSH
83459: LD_INT 2
83461: ARRAY
83462: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
83463: LD_ADDR_VAR 0 5
83467: PUSH
83468: LD_VAR 0 3
83472: PUSH
83473: LD_VAR 0 1
83477: ARRAY
83478: PUSH
83479: LD_INT 1
83481: ARRAY
83482: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
83483: LD_VAR 0 8
83487: PPUSH
83488: CALL_OW 301
83492: PUSH
83493: LD_VAR 0 5
83497: PUSH
83498: LD_VAR 0 8
83502: PPUSH
83503: CALL_OW 255
83507: NONEQUAL
83508: OR
83509: IFFALSE 83538
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
83511: LD_ADDR_EXP 120
83515: PUSH
83516: LD_EXP 120
83520: PPUSH
83521: LD_VAR 0 8
83525: PPUSH
83526: LD_INT 0
83528: PPUSH
83529: CALL_OW 1
83533: ST_TO_ADDR
// exit ;
83534: POP
83535: POP
83536: GO 84069
// end ; x := list [ i ] [ 3 ] ;
83538: LD_ADDR_VAR 0 6
83542: PUSH
83543: LD_VAR 0 3
83547: PUSH
83548: LD_VAR 0 1
83552: ARRAY
83553: PUSH
83554: LD_INT 3
83556: ARRAY
83557: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
83558: LD_ADDR_VAR 0 7
83562: PUSH
83563: LD_VAR 0 3
83567: PUSH
83568: LD_VAR 0 1
83572: ARRAY
83573: PUSH
83574: LD_INT 4
83576: ARRAY
83577: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
83578: LD_ADDR_VAR 0 9
83582: PUSH
83583: LD_VAR 0 6
83587: PPUSH
83588: LD_VAR 0 7
83592: PPUSH
83593: LD_INT 16
83595: PPUSH
83596: CALL 66816 0 3
83600: ST_TO_ADDR
// if not cratesNearbyPoint then
83601: LD_VAR 0 9
83605: NOT
83606: IFFALSE 83612
// exit ;
83608: POP
83609: POP
83610: GO 84069
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
83612: LD_ADDR_VAR 0 4
83616: PUSH
83617: LD_INT 22
83619: PUSH
83620: LD_VAR 0 5
83624: PUSH
83625: EMPTY
83626: LIST
83627: LIST
83628: PUSH
83629: LD_INT 3
83631: PUSH
83632: LD_INT 60
83634: PUSH
83635: EMPTY
83636: LIST
83637: PUSH
83638: EMPTY
83639: LIST
83640: LIST
83641: PUSH
83642: LD_INT 91
83644: PUSH
83645: LD_VAR 0 8
83649: PUSH
83650: LD_INT 6
83652: PUSH
83653: EMPTY
83654: LIST
83655: LIST
83656: LIST
83657: PUSH
83658: LD_INT 2
83660: PUSH
83661: LD_INT 25
83663: PUSH
83664: LD_INT 2
83666: PUSH
83667: EMPTY
83668: LIST
83669: LIST
83670: PUSH
83671: LD_INT 25
83673: PUSH
83674: LD_INT 16
83676: PUSH
83677: EMPTY
83678: LIST
83679: LIST
83680: PUSH
83681: EMPTY
83682: LIST
83683: LIST
83684: LIST
83685: PUSH
83686: EMPTY
83687: LIST
83688: LIST
83689: LIST
83690: LIST
83691: PPUSH
83692: CALL_OW 69
83696: PUSH
83697: LD_VAR 0 8
83701: PPUSH
83702: CALL_OW 313
83706: PPUSH
83707: LD_INT 3
83709: PUSH
83710: LD_INT 60
83712: PUSH
83713: EMPTY
83714: LIST
83715: PUSH
83716: EMPTY
83717: LIST
83718: LIST
83719: PUSH
83720: LD_INT 2
83722: PUSH
83723: LD_INT 25
83725: PUSH
83726: LD_INT 2
83728: PUSH
83729: EMPTY
83730: LIST
83731: LIST
83732: PUSH
83733: LD_INT 25
83735: PUSH
83736: LD_INT 16
83738: PUSH
83739: EMPTY
83740: LIST
83741: LIST
83742: PUSH
83743: EMPTY
83744: LIST
83745: LIST
83746: LIST
83747: PUSH
83748: EMPTY
83749: LIST
83750: LIST
83751: PPUSH
83752: CALL_OW 72
83756: UNION
83757: ST_TO_ADDR
// if tmp then
83758: LD_VAR 0 4
83762: IFFALSE 83842
// begin tmp := ShrinkArray ( tmp , 3 ) ;
83764: LD_ADDR_VAR 0 4
83768: PUSH
83769: LD_VAR 0 4
83773: PPUSH
83774: LD_INT 3
83776: PPUSH
83777: CALL 64785 0 2
83781: ST_TO_ADDR
// for j in tmp do
83782: LD_ADDR_VAR 0 2
83786: PUSH
83787: LD_VAR 0 4
83791: PUSH
83792: FOR_IN
83793: IFFALSE 83836
// begin if IsInUnit ( j ) then
83795: LD_VAR 0 2
83799: PPUSH
83800: CALL_OW 310
83804: IFFALSE 83815
// ComExit ( j ) ;
83806: LD_VAR 0 2
83810: PPUSH
83811: CALL 64868 0 1
// AddComCollect ( j , x , y ) ;
83815: LD_VAR 0 2
83819: PPUSH
83820: LD_VAR 0 6
83824: PPUSH
83825: LD_VAR 0 7
83829: PPUSH
83830: CALL_OW 177
// end ;
83834: GO 83792
83836: POP
83837: POP
// exit ;
83838: POP
83839: POP
83840: GO 84069
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
83842: LD_ADDR_VAR 0 4
83846: PUSH
83847: LD_INT 22
83849: PUSH
83850: LD_VAR 0 5
83854: PUSH
83855: EMPTY
83856: LIST
83857: LIST
83858: PUSH
83859: LD_INT 91
83861: PUSH
83862: LD_VAR 0 8
83866: PUSH
83867: LD_INT 8
83869: PUSH
83870: EMPTY
83871: LIST
83872: LIST
83873: LIST
83874: PUSH
83875: LD_INT 2
83877: PUSH
83878: LD_INT 34
83880: PUSH
83881: LD_INT 12
83883: PUSH
83884: EMPTY
83885: LIST
83886: LIST
83887: PUSH
83888: LD_INT 34
83890: PUSH
83891: LD_INT 51
83893: PUSH
83894: EMPTY
83895: LIST
83896: LIST
83897: PUSH
83898: LD_INT 34
83900: PUSH
83901: LD_INT 32
83903: PUSH
83904: EMPTY
83905: LIST
83906: LIST
83907: PUSH
83908: LD_INT 34
83910: PUSH
83911: LD_INT 89
83913: PUSH
83914: EMPTY
83915: LIST
83916: LIST
83917: PUSH
83918: EMPTY
83919: LIST
83920: LIST
83921: LIST
83922: LIST
83923: LIST
83924: PUSH
83925: EMPTY
83926: LIST
83927: LIST
83928: LIST
83929: PPUSH
83930: CALL_OW 69
83934: ST_TO_ADDR
// if tmp then
83935: LD_VAR 0 4
83939: IFFALSE 84065
// begin for j in tmp do
83941: LD_ADDR_VAR 0 2
83945: PUSH
83946: LD_VAR 0 4
83950: PUSH
83951: FOR_IN
83952: IFFALSE 84063
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
83954: LD_VAR 0 2
83958: PPUSH
83959: CALL_OW 262
83963: PUSH
83964: LD_INT 3
83966: EQUAL
83967: PUSH
83968: LD_VAR 0 2
83972: PPUSH
83973: CALL_OW 261
83977: PUSH
83978: LD_INT 20
83980: GREATER
83981: OR
83982: PUSH
83983: LD_VAR 0 2
83987: PPUSH
83988: CALL_OW 314
83992: NOT
83993: AND
83994: PUSH
83995: LD_VAR 0 2
83999: PPUSH
84000: CALL_OW 263
84004: PUSH
84005: LD_INT 1
84007: NONEQUAL
84008: PUSH
84009: LD_VAR 0 2
84013: PPUSH
84014: CALL_OW 311
84018: OR
84019: AND
84020: IFFALSE 84061
// begin ComCollect ( j , x , y ) ;
84022: LD_VAR 0 2
84026: PPUSH
84027: LD_VAR 0 6
84031: PPUSH
84032: LD_VAR 0 7
84036: PPUSH
84037: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
84041: LD_VAR 0 2
84045: PPUSH
84046: LD_VAR 0 8
84050: PPUSH
84051: CALL_OW 172
// exit ;
84055: POP
84056: POP
84057: POP
84058: POP
84059: GO 84069
// end ;
84061: GO 83951
84063: POP
84064: POP
// end ; end ;
84065: GO 83440
84067: POP
84068: POP
// end ; end_of_file
84069: PPOPN 9
84071: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84072: LD_VAR 0 1
84076: PUSH
84077: LD_INT 200
84079: DOUBLE
84080: GREATEREQUAL
84081: IFFALSE 84089
84083: LD_INT 299
84085: DOUBLE
84086: LESSEQUAL
84087: IFTRUE 84091
84089: GO 84123
84091: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84092: LD_VAR 0 1
84096: PPUSH
84097: LD_VAR 0 2
84101: PPUSH
84102: LD_VAR 0 3
84106: PPUSH
84107: LD_VAR 0 4
84111: PPUSH
84112: LD_VAR 0 5
84116: PPUSH
84117: CALL 84611 0 5
84121: GO 84200
84123: LD_INT 300
84125: DOUBLE
84126: GREATEREQUAL
84127: IFFALSE 84135
84129: LD_INT 399
84131: DOUBLE
84132: LESSEQUAL
84133: IFTRUE 84137
84135: GO 84199
84137: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84138: LD_VAR 0 1
84142: PPUSH
84143: LD_VAR 0 2
84147: PPUSH
84148: LD_VAR 0 3
84152: PPUSH
84153: LD_VAR 0 4
84157: PPUSH
84158: LD_VAR 0 5
84162: PPUSH
84163: LD_VAR 0 6
84167: PPUSH
84168: LD_VAR 0 7
84172: PPUSH
84173: LD_VAR 0 8
84177: PPUSH
84178: LD_VAR 0 9
84182: PPUSH
84183: LD_VAR 0 10
84187: PPUSH
84188: LD_VAR 0 11
84192: PPUSH
84193: CALL 80781 0 11
84197: GO 84200
84199: POP
// end ;
84200: PPOPN 11
84202: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84203: LD_VAR 0 1
84207: PPUSH
84208: LD_VAR 0 2
84212: PPUSH
84213: LD_VAR 0 3
84217: PPUSH
84218: LD_VAR 0 4
84222: PPUSH
84223: LD_VAR 0 5
84227: PPUSH
84228: CALL 84347 0 5
// end ; end_of_file
84232: PPOPN 5
84234: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
84235: LD_INT 0
84237: PPUSH
84238: PPUSH
84239: PPUSH
84240: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
84241: LD_VAR 0 1
84245: PPUSH
84246: CALL_OW 264
84250: PUSH
84251: LD_INT 91
84253: EQUAL
84254: IFFALSE 84326
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
84256: LD_INT 68
84258: PPUSH
84259: LD_VAR 0 1
84263: PPUSH
84264: CALL_OW 255
84268: PPUSH
84269: CALL_OW 321
84273: PUSH
84274: LD_INT 2
84276: EQUAL
84277: IFFALSE 84289
// eff := 70 else
84279: LD_ADDR_VAR 0 4
84283: PUSH
84284: LD_INT 70
84286: ST_TO_ADDR
84287: GO 84297
// eff := 30 ;
84289: LD_ADDR_VAR 0 4
84293: PUSH
84294: LD_INT 30
84296: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
84297: LD_VAR 0 1
84301: PPUSH
84302: CALL_OW 250
84306: PPUSH
84307: LD_VAR 0 1
84311: PPUSH
84312: CALL_OW 251
84316: PPUSH
84317: LD_VAR 0 4
84321: PPUSH
84322: CALL_OW 495
// end ; end ;
84326: LD_VAR 0 2
84330: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
84331: LD_INT 0
84333: PPUSH
// end ;
84334: LD_VAR 0 4
84338: RET
// export function SOS_Command ( cmd ) ; begin
84339: LD_INT 0
84341: PPUSH
// end ;
84342: LD_VAR 0 2
84346: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
84347: LD_INT 0
84349: PPUSH
// end ;
84350: LD_VAR 0 6
84354: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
84355: LD_INT 0
84357: PPUSH
84358: PPUSH
// if not vehicle or not factory then
84359: LD_VAR 0 1
84363: NOT
84364: PUSH
84365: LD_VAR 0 2
84369: NOT
84370: OR
84371: IFFALSE 84375
// exit ;
84373: GO 84606
// if factoryWaypoints >= factory then
84375: LD_EXP 119
84379: PUSH
84380: LD_VAR 0 2
84384: GREATEREQUAL
84385: IFFALSE 84606
// if factoryWaypoints [ factory ] then
84387: LD_EXP 119
84391: PUSH
84392: LD_VAR 0 2
84396: ARRAY
84397: IFFALSE 84606
// begin if GetControl ( vehicle ) = control_manual then
84399: LD_VAR 0 1
84403: PPUSH
84404: CALL_OW 263
84408: PUSH
84409: LD_INT 1
84411: EQUAL
84412: IFFALSE 84493
// begin driver := IsDrivenBy ( vehicle ) ;
84414: LD_ADDR_VAR 0 4
84418: PUSH
84419: LD_VAR 0 1
84423: PPUSH
84424: CALL_OW 311
84428: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84429: LD_VAR 0 4
84433: PPUSH
84434: LD_EXP 119
84438: PUSH
84439: LD_VAR 0 2
84443: ARRAY
84444: PUSH
84445: LD_INT 3
84447: ARRAY
84448: PPUSH
84449: LD_EXP 119
84453: PUSH
84454: LD_VAR 0 2
84458: ARRAY
84459: PUSH
84460: LD_INT 4
84462: ARRAY
84463: PPUSH
84464: CALL_OW 171
// AddComExitVehicle ( driver ) ;
84468: LD_VAR 0 4
84472: PPUSH
84473: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
84477: LD_VAR 0 4
84481: PPUSH
84482: LD_VAR 0 2
84486: PPUSH
84487: CALL_OW 180
// end else
84491: GO 84606
// if GetControl ( vehicle ) = control_remote then
84493: LD_VAR 0 1
84497: PPUSH
84498: CALL_OW 263
84502: PUSH
84503: LD_INT 2
84505: EQUAL
84506: IFFALSE 84567
// begin wait ( 0 0$2 ) ;
84508: LD_INT 70
84510: PPUSH
84511: CALL_OW 67
// if Connect ( vehicle ) then
84515: LD_VAR 0 1
84519: PPUSH
84520: CALL 35127 0 1
84524: IFFALSE 84565
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84526: LD_VAR 0 1
84530: PPUSH
84531: LD_EXP 119
84535: PUSH
84536: LD_VAR 0 2
84540: ARRAY
84541: PUSH
84542: LD_INT 3
84544: ARRAY
84545: PPUSH
84546: LD_EXP 119
84550: PUSH
84551: LD_VAR 0 2
84555: ARRAY
84556: PUSH
84557: LD_INT 4
84559: ARRAY
84560: PPUSH
84561: CALL_OW 171
// end else
84565: GO 84606
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84567: LD_VAR 0 1
84571: PPUSH
84572: LD_EXP 119
84576: PUSH
84577: LD_VAR 0 2
84581: ARRAY
84582: PUSH
84583: LD_INT 3
84585: ARRAY
84586: PPUSH
84587: LD_EXP 119
84591: PUSH
84592: LD_VAR 0 2
84596: ARRAY
84597: PUSH
84598: LD_INT 4
84600: ARRAY
84601: PPUSH
84602: CALL_OW 171
// end ; end ;
84606: LD_VAR 0 3
84610: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
84611: LD_INT 0
84613: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
84614: LD_VAR 0 1
84618: PUSH
84619: LD_INT 250
84621: EQUAL
84622: PUSH
84623: LD_VAR 0 2
84627: PPUSH
84628: CALL_OW 264
84632: PUSH
84633: LD_INT 81
84635: EQUAL
84636: AND
84637: IFFALSE 84658
// MinerPlaceMine ( unit , x , y ) ;
84639: LD_VAR 0 2
84643: PPUSH
84644: LD_VAR 0 4
84648: PPUSH
84649: LD_VAR 0 5
84653: PPUSH
84654: CALL 87043 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
84658: LD_VAR 0 1
84662: PUSH
84663: LD_INT 251
84665: EQUAL
84666: PUSH
84667: LD_VAR 0 2
84671: PPUSH
84672: CALL_OW 264
84676: PUSH
84677: LD_INT 81
84679: EQUAL
84680: AND
84681: IFFALSE 84702
// MinerDetonateMine ( unit , x , y ) ;
84683: LD_VAR 0 2
84687: PPUSH
84688: LD_VAR 0 4
84692: PPUSH
84693: LD_VAR 0 5
84697: PPUSH
84698: CALL 87318 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
84702: LD_VAR 0 1
84706: PUSH
84707: LD_INT 252
84709: EQUAL
84710: PUSH
84711: LD_VAR 0 2
84715: PPUSH
84716: CALL_OW 264
84720: PUSH
84721: LD_INT 81
84723: EQUAL
84724: AND
84725: IFFALSE 84746
// MinerCreateMinefield ( unit , x , y ) ;
84727: LD_VAR 0 2
84731: PPUSH
84732: LD_VAR 0 4
84736: PPUSH
84737: LD_VAR 0 5
84741: PPUSH
84742: CALL 87735 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
84746: LD_VAR 0 1
84750: PUSH
84751: LD_INT 253
84753: EQUAL
84754: PUSH
84755: LD_VAR 0 2
84759: PPUSH
84760: CALL_OW 257
84764: PUSH
84765: LD_INT 5
84767: EQUAL
84768: AND
84769: IFFALSE 84790
// ComBinocular ( unit , x , y ) ;
84771: LD_VAR 0 2
84775: PPUSH
84776: LD_VAR 0 4
84780: PPUSH
84781: LD_VAR 0 5
84785: PPUSH
84786: CALL 88104 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
84790: LD_VAR 0 1
84794: PUSH
84795: LD_INT 254
84797: EQUAL
84798: PUSH
84799: LD_VAR 0 2
84803: PPUSH
84804: CALL_OW 264
84808: PUSH
84809: LD_INT 99
84811: EQUAL
84812: AND
84813: PUSH
84814: LD_VAR 0 3
84818: PPUSH
84819: CALL_OW 263
84823: PUSH
84824: LD_INT 3
84826: EQUAL
84827: AND
84828: IFFALSE 84844
// HackDestroyVehicle ( unit , selectedUnit ) ;
84830: LD_VAR 0 2
84834: PPUSH
84835: LD_VAR 0 3
84839: PPUSH
84840: CALL 86407 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
84844: LD_VAR 0 1
84848: PUSH
84849: LD_INT 255
84851: EQUAL
84852: PUSH
84853: LD_VAR 0 2
84857: PPUSH
84858: CALL_OW 264
84862: PUSH
84863: LD_INT 14
84865: PUSH
84866: LD_INT 53
84868: PUSH
84869: EMPTY
84870: LIST
84871: LIST
84872: IN
84873: AND
84874: PUSH
84875: LD_VAR 0 4
84879: PPUSH
84880: LD_VAR 0 5
84884: PPUSH
84885: CALL_OW 488
84889: AND
84890: IFFALSE 84914
// CutTreeXYR ( unit , x , y , 12 ) ;
84892: LD_VAR 0 2
84896: PPUSH
84897: LD_VAR 0 4
84901: PPUSH
84902: LD_VAR 0 5
84906: PPUSH
84907: LD_INT 12
84909: PPUSH
84910: CALL 84977 0 4
// if cmd = 256 then
84914: LD_VAR 0 1
84918: PUSH
84919: LD_INT 256
84921: EQUAL
84922: IFFALSE 84943
// SetFactoryWaypoint ( unit , x , y ) ;
84924: LD_VAR 0 2
84928: PPUSH
84929: LD_VAR 0 4
84933: PPUSH
84934: LD_VAR 0 5
84938: PPUSH
84939: CALL 82761 0 3
// if cmd = 257 then
84943: LD_VAR 0 1
84947: PUSH
84948: LD_INT 257
84950: EQUAL
84951: IFFALSE 84972
// SetWarehouseGatheringPoint ( unit , x , y ) ;
84953: LD_VAR 0 2
84957: PPUSH
84958: LD_VAR 0 4
84962: PPUSH
84963: LD_VAR 0 5
84967: PPUSH
84968: CALL 83123 0 3
// end ;
84972: LD_VAR 0 6
84976: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
84977: LD_INT 0
84979: PPUSH
84980: PPUSH
84981: PPUSH
84982: PPUSH
84983: PPUSH
84984: PPUSH
84985: PPUSH
84986: PPUSH
84987: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
84988: LD_VAR 0 1
84992: NOT
84993: PUSH
84994: LD_VAR 0 2
84998: PPUSH
84999: LD_VAR 0 3
85003: PPUSH
85004: CALL_OW 488
85008: NOT
85009: OR
85010: PUSH
85011: LD_VAR 0 4
85015: NOT
85016: OR
85017: IFFALSE 85021
// exit ;
85019: GO 85361
// list := [ ] ;
85021: LD_ADDR_VAR 0 13
85025: PUSH
85026: EMPTY
85027: ST_TO_ADDR
// if x - r < 0 then
85028: LD_VAR 0 2
85032: PUSH
85033: LD_VAR 0 4
85037: MINUS
85038: PUSH
85039: LD_INT 0
85041: LESS
85042: IFFALSE 85054
// min_x := 0 else
85044: LD_ADDR_VAR 0 7
85048: PUSH
85049: LD_INT 0
85051: ST_TO_ADDR
85052: GO 85070
// min_x := x - r ;
85054: LD_ADDR_VAR 0 7
85058: PUSH
85059: LD_VAR 0 2
85063: PUSH
85064: LD_VAR 0 4
85068: MINUS
85069: ST_TO_ADDR
// if y - r < 0 then
85070: LD_VAR 0 3
85074: PUSH
85075: LD_VAR 0 4
85079: MINUS
85080: PUSH
85081: LD_INT 0
85083: LESS
85084: IFFALSE 85096
// min_y := 0 else
85086: LD_ADDR_VAR 0 8
85090: PUSH
85091: LD_INT 0
85093: ST_TO_ADDR
85094: GO 85112
// min_y := y - r ;
85096: LD_ADDR_VAR 0 8
85100: PUSH
85101: LD_VAR 0 3
85105: PUSH
85106: LD_VAR 0 4
85110: MINUS
85111: ST_TO_ADDR
// max_x := x + r ;
85112: LD_ADDR_VAR 0 9
85116: PUSH
85117: LD_VAR 0 2
85121: PUSH
85122: LD_VAR 0 4
85126: PLUS
85127: ST_TO_ADDR
// max_y := y + r ;
85128: LD_ADDR_VAR 0 10
85132: PUSH
85133: LD_VAR 0 3
85137: PUSH
85138: LD_VAR 0 4
85142: PLUS
85143: ST_TO_ADDR
// for _x = min_x to max_x do
85144: LD_ADDR_VAR 0 11
85148: PUSH
85149: DOUBLE
85150: LD_VAR 0 7
85154: DEC
85155: ST_TO_ADDR
85156: LD_VAR 0 9
85160: PUSH
85161: FOR_TO
85162: IFFALSE 85279
// for _y = min_y to max_y do
85164: LD_ADDR_VAR 0 12
85168: PUSH
85169: DOUBLE
85170: LD_VAR 0 8
85174: DEC
85175: ST_TO_ADDR
85176: LD_VAR 0 10
85180: PUSH
85181: FOR_TO
85182: IFFALSE 85275
// begin if not ValidHex ( _x , _y ) then
85184: LD_VAR 0 11
85188: PPUSH
85189: LD_VAR 0 12
85193: PPUSH
85194: CALL_OW 488
85198: NOT
85199: IFFALSE 85203
// continue ;
85201: GO 85181
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
85203: LD_VAR 0 11
85207: PPUSH
85208: LD_VAR 0 12
85212: PPUSH
85213: CALL_OW 351
85217: PUSH
85218: LD_VAR 0 11
85222: PPUSH
85223: LD_VAR 0 12
85227: PPUSH
85228: CALL_OW 554
85232: AND
85233: IFFALSE 85273
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
85235: LD_ADDR_VAR 0 13
85239: PUSH
85240: LD_VAR 0 13
85244: PPUSH
85245: LD_VAR 0 13
85249: PUSH
85250: LD_INT 1
85252: PLUS
85253: PPUSH
85254: LD_VAR 0 11
85258: PUSH
85259: LD_VAR 0 12
85263: PUSH
85264: EMPTY
85265: LIST
85266: LIST
85267: PPUSH
85268: CALL_OW 2
85272: ST_TO_ADDR
// end ;
85273: GO 85181
85275: POP
85276: POP
85277: GO 85161
85279: POP
85280: POP
// if not list then
85281: LD_VAR 0 13
85285: NOT
85286: IFFALSE 85290
// exit ;
85288: GO 85361
// for i in list do
85290: LD_ADDR_VAR 0 6
85294: PUSH
85295: LD_VAR 0 13
85299: PUSH
85300: FOR_IN
85301: IFFALSE 85359
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
85303: LD_VAR 0 1
85307: PPUSH
85308: LD_STRING M
85310: PUSH
85311: LD_VAR 0 6
85315: PUSH
85316: LD_INT 1
85318: ARRAY
85319: PUSH
85320: LD_VAR 0 6
85324: PUSH
85325: LD_INT 2
85327: ARRAY
85328: PUSH
85329: LD_INT 0
85331: PUSH
85332: LD_INT 0
85334: PUSH
85335: LD_INT 0
85337: PUSH
85338: LD_INT 0
85340: PUSH
85341: EMPTY
85342: LIST
85343: LIST
85344: LIST
85345: LIST
85346: LIST
85347: LIST
85348: LIST
85349: PUSH
85350: EMPTY
85351: LIST
85352: PPUSH
85353: CALL_OW 447
85357: GO 85300
85359: POP
85360: POP
// end ;
85361: LD_VAR 0 5
85365: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
85366: LD_EXP 122
85370: NOT
85371: IFFALSE 85421
85373: GO 85375
85375: DISABLE
// begin initHack := true ;
85376: LD_ADDR_EXP 122
85380: PUSH
85381: LD_INT 1
85383: ST_TO_ADDR
// hackTanks := [ ] ;
85384: LD_ADDR_EXP 123
85388: PUSH
85389: EMPTY
85390: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
85391: LD_ADDR_EXP 124
85395: PUSH
85396: EMPTY
85397: ST_TO_ADDR
// hackLimit := 3 ;
85398: LD_ADDR_EXP 125
85402: PUSH
85403: LD_INT 3
85405: ST_TO_ADDR
// hackDist := 12 ;
85406: LD_ADDR_EXP 126
85410: PUSH
85411: LD_INT 12
85413: ST_TO_ADDR
// hackCounter := [ ] ;
85414: LD_ADDR_EXP 127
85418: PUSH
85419: EMPTY
85420: ST_TO_ADDR
// end ;
85421: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
85422: LD_EXP 122
85426: PUSH
85427: LD_INT 34
85429: PUSH
85430: LD_INT 99
85432: PUSH
85433: EMPTY
85434: LIST
85435: LIST
85436: PPUSH
85437: CALL_OW 69
85441: AND
85442: IFFALSE 85695
85444: GO 85446
85446: DISABLE
85447: LD_INT 0
85449: PPUSH
85450: PPUSH
// begin enable ;
85451: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
85452: LD_ADDR_VAR 0 1
85456: PUSH
85457: LD_INT 34
85459: PUSH
85460: LD_INT 99
85462: PUSH
85463: EMPTY
85464: LIST
85465: LIST
85466: PPUSH
85467: CALL_OW 69
85471: PUSH
85472: FOR_IN
85473: IFFALSE 85693
// begin if not i in hackTanks then
85475: LD_VAR 0 1
85479: PUSH
85480: LD_EXP 123
85484: IN
85485: NOT
85486: IFFALSE 85569
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
85488: LD_ADDR_EXP 123
85492: PUSH
85493: LD_EXP 123
85497: PPUSH
85498: LD_EXP 123
85502: PUSH
85503: LD_INT 1
85505: PLUS
85506: PPUSH
85507: LD_VAR 0 1
85511: PPUSH
85512: CALL_OW 1
85516: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
85517: LD_ADDR_EXP 124
85521: PUSH
85522: LD_EXP 124
85526: PPUSH
85527: LD_EXP 124
85531: PUSH
85532: LD_INT 1
85534: PLUS
85535: PPUSH
85536: EMPTY
85537: PPUSH
85538: CALL_OW 1
85542: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
85543: LD_ADDR_EXP 127
85547: PUSH
85548: LD_EXP 127
85552: PPUSH
85553: LD_EXP 127
85557: PUSH
85558: LD_INT 1
85560: PLUS
85561: PPUSH
85562: EMPTY
85563: PPUSH
85564: CALL_OW 1
85568: ST_TO_ADDR
// end ; if not IsOk ( i ) then
85569: LD_VAR 0 1
85573: PPUSH
85574: CALL_OW 302
85578: NOT
85579: IFFALSE 85592
// begin HackUnlinkAll ( i ) ;
85581: LD_VAR 0 1
85585: PPUSH
85586: CALL 85698 0 1
// continue ;
85590: GO 85472
// end ; HackCheckCapturedStatus ( i ) ;
85592: LD_VAR 0 1
85596: PPUSH
85597: CALL 86141 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
85601: LD_ADDR_VAR 0 2
85605: PUSH
85606: LD_INT 81
85608: PUSH
85609: LD_VAR 0 1
85613: PPUSH
85614: CALL_OW 255
85618: PUSH
85619: EMPTY
85620: LIST
85621: LIST
85622: PUSH
85623: LD_INT 33
85625: PUSH
85626: LD_INT 3
85628: PUSH
85629: EMPTY
85630: LIST
85631: LIST
85632: PUSH
85633: LD_INT 91
85635: PUSH
85636: LD_VAR 0 1
85640: PUSH
85641: LD_EXP 126
85645: PUSH
85646: EMPTY
85647: LIST
85648: LIST
85649: LIST
85650: PUSH
85651: LD_INT 50
85653: PUSH
85654: EMPTY
85655: LIST
85656: PUSH
85657: EMPTY
85658: LIST
85659: LIST
85660: LIST
85661: LIST
85662: PPUSH
85663: CALL_OW 69
85667: ST_TO_ADDR
// if not tmp then
85668: LD_VAR 0 2
85672: NOT
85673: IFFALSE 85677
// continue ;
85675: GO 85472
// HackLink ( i , tmp ) ;
85677: LD_VAR 0 1
85681: PPUSH
85682: LD_VAR 0 2
85686: PPUSH
85687: CALL 85834 0 2
// end ;
85691: GO 85472
85693: POP
85694: POP
// end ;
85695: PPOPN 2
85697: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
85698: LD_INT 0
85700: PPUSH
85701: PPUSH
85702: PPUSH
// if not hack in hackTanks then
85703: LD_VAR 0 1
85707: PUSH
85708: LD_EXP 123
85712: IN
85713: NOT
85714: IFFALSE 85718
// exit ;
85716: GO 85829
// index := GetElementIndex ( hackTanks , hack ) ;
85718: LD_ADDR_VAR 0 4
85722: PUSH
85723: LD_EXP 123
85727: PPUSH
85728: LD_VAR 0 1
85732: PPUSH
85733: CALL 31943 0 2
85737: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
85738: LD_EXP 124
85742: PUSH
85743: LD_VAR 0 4
85747: ARRAY
85748: IFFALSE 85829
// begin for i in hackTanksCaptured [ index ] do
85750: LD_ADDR_VAR 0 3
85754: PUSH
85755: LD_EXP 124
85759: PUSH
85760: LD_VAR 0 4
85764: ARRAY
85765: PUSH
85766: FOR_IN
85767: IFFALSE 85793
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
85769: LD_VAR 0 3
85773: PUSH
85774: LD_INT 1
85776: ARRAY
85777: PPUSH
85778: LD_VAR 0 3
85782: PUSH
85783: LD_INT 2
85785: ARRAY
85786: PPUSH
85787: CALL_OW 235
85791: GO 85766
85793: POP
85794: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
85795: LD_ADDR_EXP 124
85799: PUSH
85800: LD_EXP 124
85804: PPUSH
85805: LD_VAR 0 4
85809: PPUSH
85810: EMPTY
85811: PPUSH
85812: CALL_OW 1
85816: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
85817: LD_VAR 0 1
85821: PPUSH
85822: LD_INT 0
85824: PPUSH
85825: CALL_OW 505
// end ; end ;
85829: LD_VAR 0 2
85833: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
85834: LD_INT 0
85836: PPUSH
85837: PPUSH
85838: PPUSH
// if not hack in hackTanks or not vehicles then
85839: LD_VAR 0 1
85843: PUSH
85844: LD_EXP 123
85848: IN
85849: NOT
85850: PUSH
85851: LD_VAR 0 2
85855: NOT
85856: OR
85857: IFFALSE 85861
// exit ;
85859: GO 86136
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
85861: LD_ADDR_VAR 0 2
85865: PUSH
85866: LD_VAR 0 1
85870: PPUSH
85871: LD_VAR 0 2
85875: PPUSH
85876: LD_INT 1
85878: PPUSH
85879: LD_INT 1
85881: PPUSH
85882: CALL 32593 0 4
85886: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
85887: LD_ADDR_VAR 0 5
85891: PUSH
85892: LD_EXP 123
85896: PPUSH
85897: LD_VAR 0 1
85901: PPUSH
85902: CALL 31943 0 2
85906: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
85907: LD_EXP 124
85911: PUSH
85912: LD_VAR 0 5
85916: ARRAY
85917: PUSH
85918: LD_EXP 125
85922: LESS
85923: IFFALSE 86112
// begin for i := 1 to vehicles do
85925: LD_ADDR_VAR 0 4
85929: PUSH
85930: DOUBLE
85931: LD_INT 1
85933: DEC
85934: ST_TO_ADDR
85935: LD_VAR 0 2
85939: PUSH
85940: FOR_TO
85941: IFFALSE 86110
// begin if hackTanksCaptured [ index ] = hackLimit then
85943: LD_EXP 124
85947: PUSH
85948: LD_VAR 0 5
85952: ARRAY
85953: PUSH
85954: LD_EXP 125
85958: EQUAL
85959: IFFALSE 85963
// break ;
85961: GO 86110
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
85963: LD_ADDR_EXP 127
85967: PUSH
85968: LD_EXP 127
85972: PPUSH
85973: LD_VAR 0 5
85977: PPUSH
85978: LD_EXP 127
85982: PUSH
85983: LD_VAR 0 5
85987: ARRAY
85988: PUSH
85989: LD_INT 1
85991: PLUS
85992: PPUSH
85993: CALL_OW 1
85997: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
85998: LD_ADDR_EXP 124
86002: PUSH
86003: LD_EXP 124
86007: PPUSH
86008: LD_VAR 0 5
86012: PUSH
86013: LD_EXP 124
86017: PUSH
86018: LD_VAR 0 5
86022: ARRAY
86023: PUSH
86024: LD_INT 1
86026: PLUS
86027: PUSH
86028: EMPTY
86029: LIST
86030: LIST
86031: PPUSH
86032: LD_VAR 0 2
86036: PUSH
86037: LD_VAR 0 4
86041: ARRAY
86042: PUSH
86043: LD_VAR 0 2
86047: PUSH
86048: LD_VAR 0 4
86052: ARRAY
86053: PPUSH
86054: CALL_OW 255
86058: PUSH
86059: EMPTY
86060: LIST
86061: LIST
86062: PPUSH
86063: CALL 32158 0 3
86067: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
86068: LD_VAR 0 2
86072: PUSH
86073: LD_VAR 0 4
86077: ARRAY
86078: PPUSH
86079: LD_VAR 0 1
86083: PPUSH
86084: CALL_OW 255
86088: PPUSH
86089: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
86093: LD_VAR 0 2
86097: PUSH
86098: LD_VAR 0 4
86102: ARRAY
86103: PPUSH
86104: CALL_OW 141
// end ;
86108: GO 85940
86110: POP
86111: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86112: LD_VAR 0 1
86116: PPUSH
86117: LD_EXP 124
86121: PUSH
86122: LD_VAR 0 5
86126: ARRAY
86127: PUSH
86128: LD_INT 0
86130: PLUS
86131: PPUSH
86132: CALL_OW 505
// end ;
86136: LD_VAR 0 3
86140: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
86141: LD_INT 0
86143: PPUSH
86144: PPUSH
86145: PPUSH
86146: PPUSH
// if not hack in hackTanks then
86147: LD_VAR 0 1
86151: PUSH
86152: LD_EXP 123
86156: IN
86157: NOT
86158: IFFALSE 86162
// exit ;
86160: GO 86402
// index := GetElementIndex ( hackTanks , hack ) ;
86162: LD_ADDR_VAR 0 4
86166: PUSH
86167: LD_EXP 123
86171: PPUSH
86172: LD_VAR 0 1
86176: PPUSH
86177: CALL 31943 0 2
86181: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
86182: LD_ADDR_VAR 0 3
86186: PUSH
86187: DOUBLE
86188: LD_EXP 124
86192: PUSH
86193: LD_VAR 0 4
86197: ARRAY
86198: INC
86199: ST_TO_ADDR
86200: LD_INT 1
86202: PUSH
86203: FOR_DOWNTO
86204: IFFALSE 86376
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
86206: LD_ADDR_VAR 0 5
86210: PUSH
86211: LD_EXP 124
86215: PUSH
86216: LD_VAR 0 4
86220: ARRAY
86221: PUSH
86222: LD_VAR 0 3
86226: ARRAY
86227: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
86228: LD_VAR 0 5
86232: PUSH
86233: LD_INT 1
86235: ARRAY
86236: PPUSH
86237: CALL_OW 302
86241: NOT
86242: PUSH
86243: LD_VAR 0 5
86247: PUSH
86248: LD_INT 1
86250: ARRAY
86251: PPUSH
86252: CALL_OW 255
86256: PUSH
86257: LD_VAR 0 1
86261: PPUSH
86262: CALL_OW 255
86266: NONEQUAL
86267: OR
86268: IFFALSE 86374
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
86270: LD_VAR 0 5
86274: PUSH
86275: LD_INT 1
86277: ARRAY
86278: PPUSH
86279: CALL_OW 305
86283: PUSH
86284: LD_VAR 0 5
86288: PUSH
86289: LD_INT 1
86291: ARRAY
86292: PPUSH
86293: CALL_OW 255
86297: PUSH
86298: LD_VAR 0 1
86302: PPUSH
86303: CALL_OW 255
86307: EQUAL
86308: AND
86309: IFFALSE 86333
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
86311: LD_VAR 0 5
86315: PUSH
86316: LD_INT 1
86318: ARRAY
86319: PPUSH
86320: LD_VAR 0 5
86324: PUSH
86325: LD_INT 2
86327: ARRAY
86328: PPUSH
86329: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
86333: LD_ADDR_EXP 124
86337: PUSH
86338: LD_EXP 124
86342: PPUSH
86343: LD_VAR 0 4
86347: PPUSH
86348: LD_EXP 124
86352: PUSH
86353: LD_VAR 0 4
86357: ARRAY
86358: PPUSH
86359: LD_VAR 0 3
86363: PPUSH
86364: CALL_OW 3
86368: PPUSH
86369: CALL_OW 1
86373: ST_TO_ADDR
// end ; end ;
86374: GO 86203
86376: POP
86377: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86378: LD_VAR 0 1
86382: PPUSH
86383: LD_EXP 124
86387: PUSH
86388: LD_VAR 0 4
86392: ARRAY
86393: PUSH
86394: LD_INT 0
86396: PLUS
86397: PPUSH
86398: CALL_OW 505
// end ;
86402: LD_VAR 0 2
86406: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
86407: LD_INT 0
86409: PPUSH
86410: PPUSH
86411: PPUSH
86412: PPUSH
// if not hack in hackTanks then
86413: LD_VAR 0 1
86417: PUSH
86418: LD_EXP 123
86422: IN
86423: NOT
86424: IFFALSE 86428
// exit ;
86426: GO 86513
// index := GetElementIndex ( hackTanks , hack ) ;
86428: LD_ADDR_VAR 0 5
86432: PUSH
86433: LD_EXP 123
86437: PPUSH
86438: LD_VAR 0 1
86442: PPUSH
86443: CALL 31943 0 2
86447: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
86448: LD_ADDR_VAR 0 4
86452: PUSH
86453: DOUBLE
86454: LD_INT 1
86456: DEC
86457: ST_TO_ADDR
86458: LD_EXP 124
86462: PUSH
86463: LD_VAR 0 5
86467: ARRAY
86468: PUSH
86469: FOR_TO
86470: IFFALSE 86511
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
86472: LD_EXP 124
86476: PUSH
86477: LD_VAR 0 5
86481: ARRAY
86482: PUSH
86483: LD_VAR 0 4
86487: ARRAY
86488: PUSH
86489: LD_INT 1
86491: ARRAY
86492: PUSH
86493: LD_VAR 0 2
86497: EQUAL
86498: IFFALSE 86509
// KillUnit ( vehicle ) ;
86500: LD_VAR 0 2
86504: PPUSH
86505: CALL_OW 66
86509: GO 86469
86511: POP
86512: POP
// end ;
86513: LD_VAR 0 3
86517: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
86518: LD_EXP 128
86522: NOT
86523: IFFALSE 86558
86525: GO 86527
86527: DISABLE
// begin initMiner := true ;
86528: LD_ADDR_EXP 128
86532: PUSH
86533: LD_INT 1
86535: ST_TO_ADDR
// minersList := [ ] ;
86536: LD_ADDR_EXP 129
86540: PUSH
86541: EMPTY
86542: ST_TO_ADDR
// minerMinesList := [ ] ;
86543: LD_ADDR_EXP 130
86547: PUSH
86548: EMPTY
86549: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
86550: LD_ADDR_EXP 131
86554: PUSH
86555: LD_INT 5
86557: ST_TO_ADDR
// end ;
86558: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
86559: LD_EXP 128
86563: PUSH
86564: LD_INT 34
86566: PUSH
86567: LD_INT 81
86569: PUSH
86570: EMPTY
86571: LIST
86572: LIST
86573: PPUSH
86574: CALL_OW 69
86578: AND
86579: IFFALSE 87040
86581: GO 86583
86583: DISABLE
86584: LD_INT 0
86586: PPUSH
86587: PPUSH
86588: PPUSH
86589: PPUSH
// begin enable ;
86590: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
86591: LD_ADDR_VAR 0 1
86595: PUSH
86596: LD_INT 34
86598: PUSH
86599: LD_INT 81
86601: PUSH
86602: EMPTY
86603: LIST
86604: LIST
86605: PPUSH
86606: CALL_OW 69
86610: PUSH
86611: FOR_IN
86612: IFFALSE 86684
// begin if not i in minersList then
86614: LD_VAR 0 1
86618: PUSH
86619: LD_EXP 129
86623: IN
86624: NOT
86625: IFFALSE 86682
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
86627: LD_ADDR_EXP 129
86631: PUSH
86632: LD_EXP 129
86636: PPUSH
86637: LD_EXP 129
86641: PUSH
86642: LD_INT 1
86644: PLUS
86645: PPUSH
86646: LD_VAR 0 1
86650: PPUSH
86651: CALL_OW 1
86655: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
86656: LD_ADDR_EXP 130
86660: PUSH
86661: LD_EXP 130
86665: PPUSH
86666: LD_EXP 130
86670: PUSH
86671: LD_INT 1
86673: PLUS
86674: PPUSH
86675: EMPTY
86676: PPUSH
86677: CALL_OW 1
86681: ST_TO_ADDR
// end end ;
86682: GO 86611
86684: POP
86685: POP
// for i := minerMinesList downto 1 do
86686: LD_ADDR_VAR 0 1
86690: PUSH
86691: DOUBLE
86692: LD_EXP 130
86696: INC
86697: ST_TO_ADDR
86698: LD_INT 1
86700: PUSH
86701: FOR_DOWNTO
86702: IFFALSE 87038
// begin if IsLive ( minersList [ i ] ) then
86704: LD_EXP 129
86708: PUSH
86709: LD_VAR 0 1
86713: ARRAY
86714: PPUSH
86715: CALL_OW 300
86719: IFFALSE 86747
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
86721: LD_EXP 129
86725: PUSH
86726: LD_VAR 0 1
86730: ARRAY
86731: PPUSH
86732: LD_EXP 130
86736: PUSH
86737: LD_VAR 0 1
86741: ARRAY
86742: PPUSH
86743: CALL_OW 505
// if not minerMinesList [ i ] then
86747: LD_EXP 130
86751: PUSH
86752: LD_VAR 0 1
86756: ARRAY
86757: NOT
86758: IFFALSE 86762
// continue ;
86760: GO 86701
// for j := minerMinesList [ i ] downto 1 do
86762: LD_ADDR_VAR 0 2
86766: PUSH
86767: DOUBLE
86768: LD_EXP 130
86772: PUSH
86773: LD_VAR 0 1
86777: ARRAY
86778: INC
86779: ST_TO_ADDR
86780: LD_INT 1
86782: PUSH
86783: FOR_DOWNTO
86784: IFFALSE 87034
// begin side := GetSide ( minersList [ i ] ) ;
86786: LD_ADDR_VAR 0 3
86790: PUSH
86791: LD_EXP 129
86795: PUSH
86796: LD_VAR 0 1
86800: ARRAY
86801: PPUSH
86802: CALL_OW 255
86806: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
86807: LD_ADDR_VAR 0 4
86811: PUSH
86812: LD_EXP 130
86816: PUSH
86817: LD_VAR 0 1
86821: ARRAY
86822: PUSH
86823: LD_VAR 0 2
86827: ARRAY
86828: PUSH
86829: LD_INT 1
86831: ARRAY
86832: PPUSH
86833: LD_EXP 130
86837: PUSH
86838: LD_VAR 0 1
86842: ARRAY
86843: PUSH
86844: LD_VAR 0 2
86848: ARRAY
86849: PUSH
86850: LD_INT 2
86852: ARRAY
86853: PPUSH
86854: CALL_OW 428
86858: ST_TO_ADDR
// if not tmp then
86859: LD_VAR 0 4
86863: NOT
86864: IFFALSE 86868
// continue ;
86866: GO 86783
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
86868: LD_VAR 0 4
86872: PUSH
86873: LD_INT 81
86875: PUSH
86876: LD_VAR 0 3
86880: PUSH
86881: EMPTY
86882: LIST
86883: LIST
86884: PPUSH
86885: CALL_OW 69
86889: IN
86890: PUSH
86891: LD_EXP 130
86895: PUSH
86896: LD_VAR 0 1
86900: ARRAY
86901: PUSH
86902: LD_VAR 0 2
86906: ARRAY
86907: PUSH
86908: LD_INT 1
86910: ARRAY
86911: PPUSH
86912: LD_EXP 130
86916: PUSH
86917: LD_VAR 0 1
86921: ARRAY
86922: PUSH
86923: LD_VAR 0 2
86927: ARRAY
86928: PUSH
86929: LD_INT 2
86931: ARRAY
86932: PPUSH
86933: CALL_OW 458
86937: AND
86938: IFFALSE 87032
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
86940: LD_EXP 130
86944: PUSH
86945: LD_VAR 0 1
86949: ARRAY
86950: PUSH
86951: LD_VAR 0 2
86955: ARRAY
86956: PUSH
86957: LD_INT 1
86959: ARRAY
86960: PPUSH
86961: LD_EXP 130
86965: PUSH
86966: LD_VAR 0 1
86970: ARRAY
86971: PUSH
86972: LD_VAR 0 2
86976: ARRAY
86977: PUSH
86978: LD_INT 2
86980: ARRAY
86981: PPUSH
86982: LD_VAR 0 3
86986: PPUSH
86987: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
86991: LD_ADDR_EXP 130
86995: PUSH
86996: LD_EXP 130
87000: PPUSH
87001: LD_VAR 0 1
87005: PPUSH
87006: LD_EXP 130
87010: PUSH
87011: LD_VAR 0 1
87015: ARRAY
87016: PPUSH
87017: LD_VAR 0 2
87021: PPUSH
87022: CALL_OW 3
87026: PPUSH
87027: CALL_OW 1
87031: ST_TO_ADDR
// end ; end ;
87032: GO 86783
87034: POP
87035: POP
// end ;
87036: GO 86701
87038: POP
87039: POP
// end ;
87040: PPOPN 4
87042: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
87043: LD_INT 0
87045: PPUSH
87046: PPUSH
// result := false ;
87047: LD_ADDR_VAR 0 4
87051: PUSH
87052: LD_INT 0
87054: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
87055: LD_VAR 0 1
87059: PPUSH
87060: CALL_OW 264
87064: PUSH
87065: LD_INT 81
87067: EQUAL
87068: NOT
87069: IFFALSE 87073
// exit ;
87071: GO 87313
// index := GetElementIndex ( minersList , unit ) ;
87073: LD_ADDR_VAR 0 5
87077: PUSH
87078: LD_EXP 129
87082: PPUSH
87083: LD_VAR 0 1
87087: PPUSH
87088: CALL 31943 0 2
87092: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
87093: LD_EXP 130
87097: PUSH
87098: LD_VAR 0 5
87102: ARRAY
87103: PUSH
87104: LD_EXP 131
87108: GREATEREQUAL
87109: IFFALSE 87113
// exit ;
87111: GO 87313
// ComMoveXY ( unit , x , y ) ;
87113: LD_VAR 0 1
87117: PPUSH
87118: LD_VAR 0 2
87122: PPUSH
87123: LD_VAR 0 3
87127: PPUSH
87128: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87132: LD_INT 35
87134: PPUSH
87135: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
87139: LD_VAR 0 1
87143: PPUSH
87144: LD_VAR 0 2
87148: PPUSH
87149: LD_VAR 0 3
87153: PPUSH
87154: CALL 63279 0 3
87158: NOT
87159: PUSH
87160: LD_VAR 0 1
87164: PPUSH
87165: CALL_OW 314
87169: AND
87170: IFFALSE 87174
// exit ;
87172: GO 87313
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
87174: LD_VAR 0 2
87178: PPUSH
87179: LD_VAR 0 3
87183: PPUSH
87184: CALL_OW 428
87188: PUSH
87189: LD_VAR 0 1
87193: EQUAL
87194: PUSH
87195: LD_VAR 0 1
87199: PPUSH
87200: CALL_OW 314
87204: NOT
87205: AND
87206: IFFALSE 87132
// PlaySoundXY ( x , y , PlantMine ) ;
87208: LD_VAR 0 2
87212: PPUSH
87213: LD_VAR 0 3
87217: PPUSH
87218: LD_STRING PlantMine
87220: PPUSH
87221: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
87225: LD_VAR 0 2
87229: PPUSH
87230: LD_VAR 0 3
87234: PPUSH
87235: LD_VAR 0 1
87239: PPUSH
87240: CALL_OW 255
87244: PPUSH
87245: LD_INT 0
87247: PPUSH
87248: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
87252: LD_ADDR_EXP 130
87256: PUSH
87257: LD_EXP 130
87261: PPUSH
87262: LD_VAR 0 5
87266: PUSH
87267: LD_EXP 130
87271: PUSH
87272: LD_VAR 0 5
87276: ARRAY
87277: PUSH
87278: LD_INT 1
87280: PLUS
87281: PUSH
87282: EMPTY
87283: LIST
87284: LIST
87285: PPUSH
87286: LD_VAR 0 2
87290: PUSH
87291: LD_VAR 0 3
87295: PUSH
87296: EMPTY
87297: LIST
87298: LIST
87299: PPUSH
87300: CALL 32158 0 3
87304: ST_TO_ADDR
// result := true ;
87305: LD_ADDR_VAR 0 4
87309: PUSH
87310: LD_INT 1
87312: ST_TO_ADDR
// end ;
87313: LD_VAR 0 4
87317: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
87318: LD_INT 0
87320: PPUSH
87321: PPUSH
87322: PPUSH
// if not unit in minersList then
87323: LD_VAR 0 1
87327: PUSH
87328: LD_EXP 129
87332: IN
87333: NOT
87334: IFFALSE 87338
// exit ;
87336: GO 87730
// index := GetElementIndex ( minersList , unit ) ;
87338: LD_ADDR_VAR 0 6
87342: PUSH
87343: LD_EXP 129
87347: PPUSH
87348: LD_VAR 0 1
87352: PPUSH
87353: CALL 31943 0 2
87357: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
87358: LD_ADDR_VAR 0 5
87362: PUSH
87363: DOUBLE
87364: LD_EXP 130
87368: PUSH
87369: LD_VAR 0 6
87373: ARRAY
87374: INC
87375: ST_TO_ADDR
87376: LD_INT 1
87378: PUSH
87379: FOR_DOWNTO
87380: IFFALSE 87541
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
87382: LD_EXP 130
87386: PUSH
87387: LD_VAR 0 6
87391: ARRAY
87392: PUSH
87393: LD_VAR 0 5
87397: ARRAY
87398: PUSH
87399: LD_INT 1
87401: ARRAY
87402: PUSH
87403: LD_VAR 0 2
87407: EQUAL
87408: PUSH
87409: LD_EXP 130
87413: PUSH
87414: LD_VAR 0 6
87418: ARRAY
87419: PUSH
87420: LD_VAR 0 5
87424: ARRAY
87425: PUSH
87426: LD_INT 2
87428: ARRAY
87429: PUSH
87430: LD_VAR 0 3
87434: EQUAL
87435: AND
87436: IFFALSE 87539
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87438: LD_EXP 130
87442: PUSH
87443: LD_VAR 0 6
87447: ARRAY
87448: PUSH
87449: LD_VAR 0 5
87453: ARRAY
87454: PUSH
87455: LD_INT 1
87457: ARRAY
87458: PPUSH
87459: LD_EXP 130
87463: PUSH
87464: LD_VAR 0 6
87468: ARRAY
87469: PUSH
87470: LD_VAR 0 5
87474: ARRAY
87475: PUSH
87476: LD_INT 2
87478: ARRAY
87479: PPUSH
87480: LD_VAR 0 1
87484: PPUSH
87485: CALL_OW 255
87489: PPUSH
87490: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87494: LD_ADDR_EXP 130
87498: PUSH
87499: LD_EXP 130
87503: PPUSH
87504: LD_VAR 0 6
87508: PPUSH
87509: LD_EXP 130
87513: PUSH
87514: LD_VAR 0 6
87518: ARRAY
87519: PPUSH
87520: LD_VAR 0 5
87524: PPUSH
87525: CALL_OW 3
87529: PPUSH
87530: CALL_OW 1
87534: ST_TO_ADDR
// exit ;
87535: POP
87536: POP
87537: GO 87730
// end ; end ;
87539: GO 87379
87541: POP
87542: POP
// for i := minerMinesList [ index ] downto 1 do
87543: LD_ADDR_VAR 0 5
87547: PUSH
87548: DOUBLE
87549: LD_EXP 130
87553: PUSH
87554: LD_VAR 0 6
87558: ARRAY
87559: INC
87560: ST_TO_ADDR
87561: LD_INT 1
87563: PUSH
87564: FOR_DOWNTO
87565: IFFALSE 87728
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
87567: LD_EXP 130
87571: PUSH
87572: LD_VAR 0 6
87576: ARRAY
87577: PUSH
87578: LD_VAR 0 5
87582: ARRAY
87583: PUSH
87584: LD_INT 1
87586: ARRAY
87587: PPUSH
87588: LD_EXP 130
87592: PUSH
87593: LD_VAR 0 6
87597: ARRAY
87598: PUSH
87599: LD_VAR 0 5
87603: ARRAY
87604: PUSH
87605: LD_INT 2
87607: ARRAY
87608: PPUSH
87609: LD_VAR 0 2
87613: PPUSH
87614: LD_VAR 0 3
87618: PPUSH
87619: CALL_OW 298
87623: PUSH
87624: LD_INT 6
87626: LESS
87627: IFFALSE 87726
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87629: LD_EXP 130
87633: PUSH
87634: LD_VAR 0 6
87638: ARRAY
87639: PUSH
87640: LD_VAR 0 5
87644: ARRAY
87645: PUSH
87646: LD_INT 1
87648: ARRAY
87649: PPUSH
87650: LD_EXP 130
87654: PUSH
87655: LD_VAR 0 6
87659: ARRAY
87660: PUSH
87661: LD_VAR 0 5
87665: ARRAY
87666: PUSH
87667: LD_INT 2
87669: ARRAY
87670: PPUSH
87671: LD_VAR 0 1
87675: PPUSH
87676: CALL_OW 255
87680: PPUSH
87681: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87685: LD_ADDR_EXP 130
87689: PUSH
87690: LD_EXP 130
87694: PPUSH
87695: LD_VAR 0 6
87699: PPUSH
87700: LD_EXP 130
87704: PUSH
87705: LD_VAR 0 6
87709: ARRAY
87710: PPUSH
87711: LD_VAR 0 5
87715: PPUSH
87716: CALL_OW 3
87720: PPUSH
87721: CALL_OW 1
87725: ST_TO_ADDR
// end ; end ;
87726: GO 87564
87728: POP
87729: POP
// end ;
87730: LD_VAR 0 4
87734: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
87735: LD_INT 0
87737: PPUSH
87738: PPUSH
87739: PPUSH
87740: PPUSH
87741: PPUSH
87742: PPUSH
87743: PPUSH
87744: PPUSH
87745: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
87746: LD_VAR 0 1
87750: PPUSH
87751: CALL_OW 264
87755: PUSH
87756: LD_INT 81
87758: EQUAL
87759: NOT
87760: PUSH
87761: LD_VAR 0 1
87765: PUSH
87766: LD_EXP 129
87770: IN
87771: NOT
87772: OR
87773: IFFALSE 87777
// exit ;
87775: GO 88099
// index := GetElementIndex ( minersList , unit ) ;
87777: LD_ADDR_VAR 0 6
87781: PUSH
87782: LD_EXP 129
87786: PPUSH
87787: LD_VAR 0 1
87791: PPUSH
87792: CALL 31943 0 2
87796: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
87797: LD_ADDR_VAR 0 8
87801: PUSH
87802: LD_EXP 131
87806: PUSH
87807: LD_EXP 130
87811: PUSH
87812: LD_VAR 0 6
87816: ARRAY
87817: MINUS
87818: ST_TO_ADDR
// if not minesFreeAmount then
87819: LD_VAR 0 8
87823: NOT
87824: IFFALSE 87828
// exit ;
87826: GO 88099
// tmp := [ ] ;
87828: LD_ADDR_VAR 0 7
87832: PUSH
87833: EMPTY
87834: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
87835: LD_ADDR_VAR 0 5
87839: PUSH
87840: DOUBLE
87841: LD_INT 1
87843: DEC
87844: ST_TO_ADDR
87845: LD_VAR 0 8
87849: PUSH
87850: FOR_TO
87851: IFFALSE 88046
// begin _d := rand ( 0 , 5 ) ;
87853: LD_ADDR_VAR 0 11
87857: PUSH
87858: LD_INT 0
87860: PPUSH
87861: LD_INT 5
87863: PPUSH
87864: CALL_OW 12
87868: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
87869: LD_ADDR_VAR 0 12
87873: PUSH
87874: LD_INT 2
87876: PPUSH
87877: LD_INT 6
87879: PPUSH
87880: CALL_OW 12
87884: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
87885: LD_ADDR_VAR 0 9
87889: PUSH
87890: LD_VAR 0 2
87894: PPUSH
87895: LD_VAR 0 11
87899: PPUSH
87900: LD_VAR 0 12
87904: PPUSH
87905: CALL_OW 272
87909: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
87910: LD_ADDR_VAR 0 10
87914: PUSH
87915: LD_VAR 0 3
87919: PPUSH
87920: LD_VAR 0 11
87924: PPUSH
87925: LD_VAR 0 12
87929: PPUSH
87930: CALL_OW 273
87934: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
87935: LD_VAR 0 9
87939: PPUSH
87940: LD_VAR 0 10
87944: PPUSH
87945: CALL_OW 488
87949: PUSH
87950: LD_VAR 0 9
87954: PUSH
87955: LD_VAR 0 10
87959: PUSH
87960: EMPTY
87961: LIST
87962: LIST
87963: PUSH
87964: LD_VAR 0 7
87968: IN
87969: NOT
87970: AND
87971: PUSH
87972: LD_VAR 0 9
87976: PPUSH
87977: LD_VAR 0 10
87981: PPUSH
87982: CALL_OW 458
87986: NOT
87987: AND
87988: IFFALSE 88030
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
87990: LD_ADDR_VAR 0 7
87994: PUSH
87995: LD_VAR 0 7
87999: PPUSH
88000: LD_VAR 0 7
88004: PUSH
88005: LD_INT 1
88007: PLUS
88008: PPUSH
88009: LD_VAR 0 9
88013: PUSH
88014: LD_VAR 0 10
88018: PUSH
88019: EMPTY
88020: LIST
88021: LIST
88022: PPUSH
88023: CALL_OW 1
88027: ST_TO_ADDR
88028: GO 88044
// i := i - 1 ;
88030: LD_ADDR_VAR 0 5
88034: PUSH
88035: LD_VAR 0 5
88039: PUSH
88040: LD_INT 1
88042: MINUS
88043: ST_TO_ADDR
// end ;
88044: GO 87850
88046: POP
88047: POP
// for i in tmp do
88048: LD_ADDR_VAR 0 5
88052: PUSH
88053: LD_VAR 0 7
88057: PUSH
88058: FOR_IN
88059: IFFALSE 88097
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
88061: LD_VAR 0 1
88065: PPUSH
88066: LD_VAR 0 5
88070: PUSH
88071: LD_INT 1
88073: ARRAY
88074: PPUSH
88075: LD_VAR 0 5
88079: PUSH
88080: LD_INT 2
88082: ARRAY
88083: PPUSH
88084: CALL 87043 0 3
88088: NOT
88089: IFFALSE 88095
// exit ;
88091: POP
88092: POP
88093: GO 88099
88095: GO 88058
88097: POP
88098: POP
// end ;
88099: LD_VAR 0 4
88103: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
88104: LD_INT 0
88106: PPUSH
88107: PPUSH
88108: PPUSH
88109: PPUSH
88110: PPUSH
88111: PPUSH
88112: PPUSH
// if not GetClass ( unit ) = class_sniper then
88113: LD_VAR 0 1
88117: PPUSH
88118: CALL_OW 257
88122: PUSH
88123: LD_INT 5
88125: EQUAL
88126: NOT
88127: IFFALSE 88131
// exit ;
88129: GO 88519
// dist := 8 ;
88131: LD_ADDR_VAR 0 5
88135: PUSH
88136: LD_INT 8
88138: ST_TO_ADDR
// viewRange := 12 ;
88139: LD_ADDR_VAR 0 7
88143: PUSH
88144: LD_INT 12
88146: ST_TO_ADDR
// side := GetSide ( unit ) ;
88147: LD_ADDR_VAR 0 6
88151: PUSH
88152: LD_VAR 0 1
88156: PPUSH
88157: CALL_OW 255
88161: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
88162: LD_INT 61
88164: PPUSH
88165: LD_VAR 0 6
88169: PPUSH
88170: CALL_OW 321
88174: PUSH
88175: LD_INT 2
88177: EQUAL
88178: IFFALSE 88188
// viewRange := 16 ;
88180: LD_ADDR_VAR 0 7
88184: PUSH
88185: LD_INT 16
88187: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
88188: LD_VAR 0 1
88192: PPUSH
88193: LD_VAR 0 2
88197: PPUSH
88198: LD_VAR 0 3
88202: PPUSH
88203: CALL_OW 297
88207: PUSH
88208: LD_VAR 0 5
88212: GREATER
88213: IFFALSE 88292
// begin ComMoveXY ( unit , x , y ) ;
88215: LD_VAR 0 1
88219: PPUSH
88220: LD_VAR 0 2
88224: PPUSH
88225: LD_VAR 0 3
88229: PPUSH
88230: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
88234: LD_INT 35
88236: PPUSH
88237: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
88241: LD_VAR 0 1
88245: PPUSH
88246: LD_VAR 0 2
88250: PPUSH
88251: LD_VAR 0 3
88255: PPUSH
88256: CALL 63279 0 3
88260: NOT
88261: IFFALSE 88265
// exit ;
88263: GO 88519
// until GetDistUnitXY ( unit , x , y ) < dist ;
88265: LD_VAR 0 1
88269: PPUSH
88270: LD_VAR 0 2
88274: PPUSH
88275: LD_VAR 0 3
88279: PPUSH
88280: CALL_OW 297
88284: PUSH
88285: LD_VAR 0 5
88289: LESS
88290: IFFALSE 88234
// end ; ComTurnXY ( unit , x , y ) ;
88292: LD_VAR 0 1
88296: PPUSH
88297: LD_VAR 0 2
88301: PPUSH
88302: LD_VAR 0 3
88306: PPUSH
88307: CALL_OW 118
// wait ( 5 ) ;
88311: LD_INT 5
88313: PPUSH
88314: CALL_OW 67
// _d := GetDir ( unit ) ;
88318: LD_ADDR_VAR 0 10
88322: PUSH
88323: LD_VAR 0 1
88327: PPUSH
88328: CALL_OW 254
88332: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
88333: LD_ADDR_VAR 0 8
88337: PUSH
88338: LD_VAR 0 1
88342: PPUSH
88343: CALL_OW 250
88347: PPUSH
88348: LD_VAR 0 10
88352: PPUSH
88353: LD_VAR 0 5
88357: PPUSH
88358: CALL_OW 272
88362: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
88363: LD_ADDR_VAR 0 9
88367: PUSH
88368: LD_VAR 0 1
88372: PPUSH
88373: CALL_OW 251
88377: PPUSH
88378: LD_VAR 0 10
88382: PPUSH
88383: LD_VAR 0 5
88387: PPUSH
88388: CALL_OW 273
88392: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
88393: LD_VAR 0 8
88397: PPUSH
88398: LD_VAR 0 9
88402: PPUSH
88403: CALL_OW 488
88407: NOT
88408: IFFALSE 88412
// exit ;
88410: GO 88519
// ComAnimCustom ( unit , 1 ) ;
88412: LD_VAR 0 1
88416: PPUSH
88417: LD_INT 1
88419: PPUSH
88420: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
88424: LD_VAR 0 8
88428: PPUSH
88429: LD_VAR 0 9
88433: PPUSH
88434: LD_VAR 0 6
88438: PPUSH
88439: LD_VAR 0 7
88443: PPUSH
88444: CALL_OW 330
// repeat wait ( 1 ) ;
88448: LD_INT 1
88450: PPUSH
88451: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
88455: LD_VAR 0 1
88459: PPUSH
88460: CALL_OW 316
88464: PUSH
88465: LD_VAR 0 1
88469: PPUSH
88470: CALL_OW 314
88474: OR
88475: PUSH
88476: LD_VAR 0 1
88480: PPUSH
88481: CALL_OW 302
88485: NOT
88486: OR
88487: PUSH
88488: LD_VAR 0 1
88492: PPUSH
88493: CALL_OW 301
88497: OR
88498: IFFALSE 88448
// RemoveSeeing ( _x , _y , side ) ;
88500: LD_VAR 0 8
88504: PPUSH
88505: LD_VAR 0 9
88509: PPUSH
88510: LD_VAR 0 6
88514: PPUSH
88515: CALL_OW 331
// end ; end_of_file
88519: LD_VAR 0 4
88523: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
88524: LD_VAR 0 1
88528: PPUSH
88529: LD_VAR 0 2
88533: PPUSH
88534: LD_VAR 0 3
88538: PPUSH
88539: LD_VAR 0 4
88543: PPUSH
88544: LD_VAR 0 5
88548: PPUSH
88549: LD_VAR 0 6
88553: PPUSH
88554: CALL 68474 0 6
// end ;
88558: PPOPN 6
88560: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
88561: LD_INT 0
88563: PPUSH
// begin if not units then
88564: LD_VAR 0 1
88568: NOT
88569: IFFALSE 88573
// exit ;
88571: GO 88573
// end ;
88573: PPOPN 7
88575: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
88576: CALL 68445 0 0
// end ;
88580: PPOPN 1
88582: END
