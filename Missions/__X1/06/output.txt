// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 41970 0 0
// Init ;
   8: CALL 35 0 0
// CreateNature ( natureArea , swampArea ) ;
  12: LD_INT 1
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: CALL 2121 0 2
// PrepareArabian ;
  22: CALL 59 0 0
// PrepareRussian ;
  26: CALL 2968 0 0
// Action ;
  30: CALL 3015 0 0
// end ;
  34: END
// export debug , prefix ; function Init ; begin
  35: LD_INT 0
  37: PPUSH
// debug := true ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_INT 1
  45: ST_TO_ADDR
// prefix := 05_ ;
  46: LD_ADDR_EXP 2
  50: PUSH
  51: LD_STRING 05_
  53: ST_TO_ADDR
// end ; end_of_file
  54: LD_VAR 0 1
  58: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeApes ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
  59: LD_INT 0
  61: PPUSH
  62: PPUSH
  63: PPUSH
  64: PPUSH
  65: PPUSH
  66: PPUSH
  67: PPUSH
  68: PPUSH
  69: PPUSH
  70: PPUSH
  71: PPUSH
  72: PPUSH
// uc_nation := 2 ;
  73: LD_ADDR_OWVAR 21
  77: PUSH
  78: LD_INT 2
  80: ST_TO_ADDR
// uc_side := 5 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 5
  88: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
  89: LD_ADDR_EXP 11
  93: PUSH
  94: LD_STRING Abdul
  96: PPUSH
  97: LD_INT 0
  99: PPUSH
 100: LD_STRING 
 102: PPUSH
 103: CALL 4314 0 3
 107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_STRING Omar
 115: PPUSH
 116: LD_INT 0
 118: PPUSH
 119: LD_STRING 
 121: PPUSH
 122: CALL 4314 0 3
 126: ST_TO_ADDR
// uc_side := 2 ;
 127: LD_ADDR_OWVAR 20
 131: PUSH
 132: LD_INT 2
 134: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 135: LD_ADDR_EXP 3
 139: PUSH
 140: LD_STRING Heike
 142: PPUSH
 143: LD_EXP 1
 147: NOT
 148: PPUSH
 149: LD_EXP 2
 153: PPUSH
 154: CALL 4314 0 3
 158: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 159: LD_ADDR_EXP 6
 163: PUSH
 164: LD_STRING Ibrahim
 166: PPUSH
 167: LD_EXP 1
 171: NOT
 172: PPUSH
 173: LD_EXP 2
 177: PPUSH
 178: CALL 4314 0 3
 182: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 183: LD_ADDR_EXP 4
 187: PUSH
 188: LD_STRING Givi
 190: PPUSH
 191: LD_EXP 1
 195: NOT
 196: PPUSH
 197: LD_EXP 2
 201: PPUSH
 202: CALL 4314 0 3
 206: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 207: LD_ADDR_EXP 7
 211: PUSH
 212: LD_STRING Kamil
 214: PPUSH
 215: LD_EXP 1
 219: NOT
 220: PPUSH
 221: LD_EXP 2
 225: PPUSH
 226: CALL 4314 0 3
 230: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 231: LD_ADDR_EXP 8
 235: PUSH
 236: LD_STRING Kaia
 238: PPUSH
 239: LD_EXP 1
 243: NOT
 244: PPUSH
 245: LD_EXP 2
 249: PPUSH
 250: CALL 4314 0 3
 254: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: LD_STRING Sophia
 262: PPUSH
 263: LD_EXP 1
 267: NOT
 268: PPUSH
 269: LD_EXP 2
 273: PPUSH
 274: CALL 4314 0 3
 278: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 279: LD_ADDR_EXP 10
 283: PUSH
 284: LD_STRING Markov
 286: PPUSH
 287: LD_EXP 1
 291: NOT
 292: PPUSH
 293: LD_EXP 2
 297: PPUSH
 298: CALL 4314 0 3
 302: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 303: LD_ADDR_EXP 15
 307: PUSH
 308: LD_STRING Aviradze
 310: PPUSH
 311: LD_EXP 1
 315: NOT
 316: PPUSH
 317: LD_EXP 2
 321: PPUSH
 322: CALL 4314 0 3
 326: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 327: LD_ADDR_EXP 14
 331: PUSH
 332: LD_STRING Kurt
 334: PPUSH
 335: LD_EXP 1
 339: NOT
 340: PPUSH
 341: LD_EXP 2
 345: PPUSH
 346: CALL 4314 0 3
 350: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 351: LD_ADDR_EXP 5
 355: PUSH
 356: LD_STRING Mike
 358: PPUSH
 359: LD_EXP 1
 363: NOT
 364: PPUSH
 365: LD_EXP 2
 369: PPUSH
 370: CALL 4314 0 3
 374: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 375: LD_ADDR_EXP 12
 379: PUSH
 380: LD_STRING Olaf
 382: PPUSH
 383: LD_INT 0
 385: PPUSH
 386: LD_STRING 
 388: PPUSH
 389: CALL 4314 0 3
 393: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 394: LD_ADDR_EXP 16
 398: PUSH
 399: LD_STRING 05_others
 401: PPUSH
 402: CALL_OW 31
 406: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 407: LD_ADDR_EXP 17
 411: PUSH
 412: LD_STRING 05_apes
 414: PPUSH
 415: CALL_OW 31
 419: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 420: LD_ADDR_VAR 0 5
 424: PUSH
 425: LD_STRING 05_Radar
 427: PPUSH
 428: LD_EXP 1
 432: PPUSH
 433: CALL_OW 30
 437: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 438: LD_ADDR_VAR 0 6
 442: PUSH
 443: LD_STRING 05_RemoteControl
 445: PPUSH
 446: LD_EXP 1
 450: PPUSH
 451: CALL_OW 30
 455: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 456: LD_ADDR_VAR 0 7
 460: PUSH
 461: LD_STRING 05_DrugsTested
 463: PPUSH
 464: LD_EXP 1
 468: PPUSH
 469: CALL_OW 30
 473: ST_TO_ADDR
// if hasDrugs then
 474: LD_VAR 0 7
 478: IFFALSE 493
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 480: LD_INT 5
 482: PPUSH
 483: LD_INT 2
 485: PPUSH
 486: LD_INT 2
 488: PPUSH
 489: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 493: LD_ADDR_VAR 0 12
 497: PUSH
 498: LD_INT 5
 500: PPUSH
 501: LD_INT 0
 503: PPUSH
 504: CALL_OW 517
 508: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 509: LD_ADDR_VAR 0 2
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 12
 523: PUSH
 524: LD_INT 1
 526: ARRAY
 527: PUSH
 528: FOR_TO
 529: IFFALSE 606
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 531: LD_VAR 0 12
 535: PUSH
 536: LD_INT 1
 538: ARRAY
 539: PUSH
 540: LD_VAR 0 2
 544: ARRAY
 545: PPUSH
 546: LD_VAR 0 12
 550: PUSH
 551: LD_INT 2
 553: ARRAY
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: CALL_OW 351
 565: IFFALSE 604
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 567: LD_VAR 0 12
 571: PUSH
 572: LD_INT 1
 574: ARRAY
 575: PUSH
 576: LD_VAR 0 2
 580: ARRAY
 581: PPUSH
 582: LD_VAR 0 12
 586: PUSH
 587: LD_INT 2
 589: ARRAY
 590: PUSH
 591: LD_VAR 0 2
 595: ARRAY
 596: PPUSH
 597: LD_INT 2
 599: PPUSH
 600: CALL_OW 244
 604: GO 528
 606: POP
 607: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 608: LD_ADDR_VAR 0 4
 612: PUSH
 613: LD_INT 0
 615: PUSH
 616: LD_INT 206
 618: PUSH
 619: LD_INT 80
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 32
 633: PUSH
 634: LD_INT 221
 636: PUSH
 637: LD_INT 95
 639: PUSH
 640: LD_INT 5
 642: PUSH
 643: LD_INT 23
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: PUSH
 653: LD_INT 32
 655: PUSH
 656: LD_INT 223
 658: PUSH
 659: LD_INT 88
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 24
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 32
 677: PUSH
 678: LD_INT 202
 680: PUSH
 681: LD_INT 64
 683: PUSH
 684: LD_INT 2
 686: PUSH
 687: LD_INT 25
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 3
 699: PUSH
 700: LD_INT 203
 702: PUSH
 703: LD_INT 91
 705: PUSH
 706: LD_INT 1
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: PUSH
 715: LD_INT 8
 717: PUSH
 718: LD_INT 217
 720: PUSH
 721: LD_INT 78
 723: PUSH
 724: LD_INT 4
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 27
 735: PUSH
 736: LD_INT 220
 738: PUSH
 739: LD_INT 99
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: PUSH
 751: LD_INT 27
 753: PUSH
 754: LD_INT 220
 756: PUSH
 757: LD_INT 103
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 27
 771: PUSH
 772: LD_INT 216
 774: PUSH
 775: LD_INT 102
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 17
 789: PUSH
 790: LD_INT 203
 792: PUSH
 793: LD_INT 94
 795: PUSH
 796: LD_INT 0
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_INT 23
 807: PUSH
 808: LD_INT 200
 810: PUSH
 811: LD_INT 88
 813: PUSH
 814: LD_INT 2
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 16
 825: PUSH
 826: LD_INT 199
 828: PUSH
 829: LD_INT 91
 831: PUSH
 832: LD_INT 1
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 26
 843: PUSH
 844: LD_INT 197
 846: PUSH
 847: LD_INT 81
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 26
 861: PUSH
 862: LD_INT 197
 864: PUSH
 865: LD_INT 78
 867: PUSH
 868: LD_INT 3
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: ST_TO_ADDR
// if hasRadar then
 893: LD_VAR 0 5
 897: IFFALSE 941
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
 899: LD_ADDR_VAR 0 4
 903: PUSH
 904: LD_VAR 0 4
 908: PPUSH
 909: LD_VAR 0 4
 913: PUSH
 914: LD_INT 1
 916: PLUS
 917: PPUSH
 918: LD_INT 20
 920: PUSH
 921: LD_INT 203
 923: PUSH
 924: LD_INT 87
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: PPUSH
 936: CALL_OW 1
 940: ST_TO_ADDR
// if hasRemote then
 941: LD_VAR 0 6
 945: IFFALSE 989
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
 947: LD_ADDR_VAR 0 4
 951: PUSH
 952: LD_VAR 0 4
 956: PPUSH
 957: LD_VAR 0 4
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: PPUSH
 966: LD_INT 22
 968: PUSH
 969: LD_INT 207
 971: PUSH
 972: LD_INT 95
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PPUSH
 984: CALL_OW 1
 988: ST_TO_ADDR
// for i in base do
 989: LD_ADDR_VAR 0 2
 993: PUSH
 994: LD_VAR 0 4
 998: PUSH
 999: FOR_IN
1000: IFFALSE 1181
// begin bc_type := i [ 1 ] ;
1002: LD_ADDR_OWVAR 42
1006: PUSH
1007: LD_VAR 0 2
1011: PUSH
1012: LD_INT 1
1014: ARRAY
1015: ST_TO_ADDR
// bc_level := 3 ;
1016: LD_ADDR_OWVAR 43
1020: PUSH
1021: LD_INT 3
1023: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1024: LD_VAR 0 2
1028: PUSH
1029: LD_INT 1
1031: ARRAY
1032: PUSH
1033: LD_INT 8
1035: EQUAL
1036: IFFALSE 1071
// begin bc_kind1 := b_lab_weapon ;
1038: LD_ADDR_OWVAR 44
1042: PUSH
1043: LD_INT 10
1045: ST_TO_ADDR
// if hasRadar then
1046: LD_VAR 0 5
1050: IFFALSE 1062
// bc_kind2 := b_lab_opto else
1052: LD_ADDR_OWVAR 45
1056: PUSH
1057: LD_INT 15
1059: ST_TO_ADDR
1060: GO 1071
// bc_kind2 := - 1 ;
1062: LD_ADDR_OWVAR 45
1066: PUSH
1067: LD_INT 1
1069: NEG
1070: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1071: LD_ADDR_VAR 0 3
1075: PUSH
1076: LD_VAR 0 2
1080: PUSH
1081: LD_INT 2
1083: ARRAY
1084: PPUSH
1085: LD_VAR 0 2
1089: PUSH
1090: LD_INT 3
1092: ARRAY
1093: PPUSH
1094: LD_VAR 0 2
1098: PUSH
1099: LD_INT 4
1101: ARRAY
1102: PPUSH
1103: CALL_OW 47
1107: ST_TO_ADDR
// if i > 4 then
1108: LD_VAR 0 2
1112: PUSH
1113: LD_INT 4
1115: GREATER
1116: IFFALSE 1136
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1118: LD_VAR 0 3
1122: PPUSH
1123: LD_VAR 0 2
1127: PUSH
1128: LD_INT 5
1130: ARRAY
1131: PPUSH
1132: CALL_OW 431
// if i [ 1 ] = b_bunker then
1136: LD_VAR 0 2
1140: PUSH
1141: LD_INT 1
1143: ARRAY
1144: PUSH
1145: LD_INT 32
1147: EQUAL
1148: IFFALSE 1179
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1150: LD_ADDR_VAR 0 11
1154: PUSH
1155: LD_VAR 0 11
1159: PPUSH
1160: LD_VAR 0 11
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: PPUSH
1169: LD_VAR 0 3
1173: PPUSH
1174: CALL_OW 1
1178: ST_TO_ADDR
// end ;
1179: GO 999
1181: POP
1182: POP
// depot := HexInfo ( 206 , 80 ) ;
1183: LD_ADDR_VAR 0 9
1187: PUSH
1188: LD_INT 206
1190: PPUSH
1191: LD_INT 80
1193: PPUSH
1194: CALL_OW 428
1198: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1199: LD_ADDR_VAR 0 8
1203: PUSH
1204: LD_INT 203
1206: PPUSH
1207: LD_INT 91
1209: PPUSH
1210: CALL_OW 428
1214: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1215: LD_ADDR_VAR 0 10
1219: PUSH
1220: LD_INT 217
1222: PPUSH
1223: LD_INT 78
1225: PPUSH
1226: CALL_OW 428
1230: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1231: LD_VAR 0 9
1235: PPUSH
1236: CALL_OW 274
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_INT 360
1246: PUSH
1247: LD_INT 260
1249: PUSH
1250: LD_INT 160
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: LIST
1257: PUSH
1258: LD_OWVAR 67
1262: ARRAY
1263: PPUSH
1264: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 150 , 100 ] [ Difficulty ] ) ;
1268: LD_VAR 0 9
1272: PPUSH
1273: CALL_OW 274
1277: PPUSH
1278: LD_INT 2
1280: PPUSH
1281: LD_INT 200
1283: PUSH
1284: LD_INT 150
1286: PUSH
1287: LD_INT 100
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: PUSH
1295: LD_OWVAR 67
1299: ARRAY
1300: PPUSH
1301: CALL_OW 277
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1305: LD_EXP 3
1309: PPUSH
1310: LD_INT 213
1312: PPUSH
1313: LD_INT 87
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1323: LD_EXP 3
1327: PPUSH
1328: LD_INT 214
1330: PPUSH
1331: LD_INT 87
1333: PPUSH
1334: CALL_OW 118
// if Kaia then
1338: LD_EXP 8
1342: IFFALSE 1377
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1344: LD_EXP 8
1348: PPUSH
1349: LD_INT 213
1351: PPUSH
1352: LD_INT 85
1354: PPUSH
1355: LD_INT 0
1357: PPUSH
1358: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1362: LD_EXP 8
1366: PPUSH
1367: LD_INT 215
1369: PPUSH
1370: LD_INT 87
1372: PPUSH
1373: CALL_OW 118
// end ; if Olaf and Kaia then
1377: LD_EXP 12
1381: PUSH
1382: LD_EXP 8
1386: AND
1387: IFFALSE 1424
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1389: LD_EXP 12
1393: PPUSH
1394: LD_INT 215
1396: PPUSH
1397: LD_INT 87
1399: PPUSH
1400: LD_INT 0
1402: PPUSH
1403: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1407: LD_EXP 12
1411: PPUSH
1412: LD_INT 213
1414: PPUSH
1415: LD_INT 85
1417: PPUSH
1418: CALL_OW 118
// end else
1422: GO 1444
// if Olaf then
1424: LD_EXP 12
1428: IFFALSE 1444
// PlaceHumanInUnit ( Olaf , factory ) ;
1430: LD_EXP 12
1434: PPUSH
1435: LD_VAR 0 8
1439: PPUSH
1440: CALL_OW 52
// if Givi then
1444: LD_EXP 4
1448: IFFALSE 1529
// begin if Kaia and Olaf then
1450: LD_EXP 8
1454: PUSH
1455: LD_EXP 12
1459: AND
1460: IFFALSE 1497
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
1462: LD_EXP 4
1466: PPUSH
1467: LD_INT 247
1469: PPUSH
1470: LD_INT 117
1472: PPUSH
1473: LD_INT 0
1475: PPUSH
1476: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
1480: LD_EXP 4
1484: PPUSH
1485: LD_INT 248
1487: PPUSH
1488: LD_INT 118
1490: PPUSH
1491: CALL_OW 118
// end else
1495: GO 1529
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
1497: LD_EXP 4
1501: PPUSH
1502: LD_INT 216
1504: PPUSH
1505: LD_INT 88
1507: PPUSH
1508: LD_INT 0
1510: PPUSH
1511: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
1515: LD_EXP 4
1519: PPUSH
1520: LD_EXP 3
1524: PPUSH
1525: CALL_OW 119
// end ; end ; if Kurt then
1529: LD_EXP 14
1533: IFFALSE 1553
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
1535: LD_EXP 14
1539: PPUSH
1540: LD_VAR 0 11
1544: PUSH
1545: LD_INT 2
1547: ARRAY
1548: PPUSH
1549: CALL_OW 52
// if Mike then
1553: LD_EXP 5
1557: IFFALSE 1577
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
1559: LD_EXP 5
1563: PPUSH
1564: LD_VAR 0 11
1568: PUSH
1569: LD_INT 3
1571: ARRAY
1572: PPUSH
1573: CALL_OW 52
// if Kamil then
1577: LD_EXP 7
1581: IFFALSE 1643
// begin if Kaia and Olaf then
1583: LD_EXP 8
1587: PUSH
1588: LD_EXP 12
1592: AND
1593: IFFALSE 1611
// PlaceHumanInUnit ( Kamil , depot ) else
1595: LD_EXP 7
1599: PPUSH
1600: LD_VAR 0 9
1604: PPUSH
1605: CALL_OW 52
1609: GO 1643
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
1611: LD_EXP 7
1615: PPUSH
1616: LD_INT 213
1618: PPUSH
1619: LD_INT 87
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
1629: LD_EXP 7
1633: PPUSH
1634: LD_EXP 3
1638: PPUSH
1639: CALL_OW 119
// end ; end ; if Sophia then
1643: LD_EXP 9
1647: IFFALSE 1663
// PlaceHumanInUnit ( Sophia , depot ) ;
1649: LD_EXP 9
1653: PPUSH
1654: LD_VAR 0 9
1658: PPUSH
1659: CALL_OW 52
// if Aviradze then
1663: LD_EXP 15
1667: IFFALSE 1683
// PlaceHumanInUnit ( Aviradze , lab ) ;
1669: LD_EXP 15
1673: PPUSH
1674: LD_VAR 0 10
1678: PPUSH
1679: CALL_OW 52
// if Ibrahim then
1683: LD_EXP 6
1687: IFFALSE 1703
// PlaceHumanInUnit ( Ibrahim , lab ) ;
1689: LD_EXP 6
1693: PPUSH
1694: LD_VAR 0 10
1698: PPUSH
1699: CALL_OW 52
// if Markov then
1703: LD_EXP 10
1707: IFFALSE 1723
// PlaceHumanInUnit ( Markov , factory ) ;
1709: LD_EXP 10
1713: PPUSH
1714: LD_VAR 0 8
1718: PPUSH
1719: CALL_OW 52
// if heikeSecondSquad then
1723: LD_EXP 16
1727: IFFALSE 1767
// for i in heikeSecondSquad do
1729: LD_ADDR_VAR 0 2
1733: PUSH
1734: LD_EXP 16
1738: PUSH
1739: FOR_IN
1740: IFFALSE 1765
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
1742: LD_VAR 0 2
1746: PPUSH
1747: LD_INT 190
1749: PPUSH
1750: LD_INT 65
1752: PPUSH
1753: LD_INT 5
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: CALL_OW 50
1763: GO 1739
1765: POP
1766: POP
// if heikeApes then
1767: LD_EXP 17
1771: IFFALSE 1811
// for i in heikeApes do
1773: LD_ADDR_VAR 0 2
1777: PUSH
1778: LD_EXP 17
1782: PUSH
1783: FOR_IN
1784: IFFALSE 1809
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
1786: LD_VAR 0 2
1790: PPUSH
1791: LD_INT 190
1793: PPUSH
1794: LD_INT 70
1796: PPUSH
1797: LD_INT 5
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL_OW 50
1807: GO 1783
1809: POP
1810: POP
// end ; end_of_file
1811: LD_VAR 0 1
1815: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
1816: LD_INT 0
1818: PPUSH
// uc_side := side ;
1819: LD_ADDR_OWVAR 20
1823: PUSH
1824: LD_VAR 0 1
1828: ST_TO_ADDR
// uc_nation := nation ;
1829: LD_ADDR_OWVAR 21
1833: PUSH
1834: LD_VAR 0 2
1838: ST_TO_ADDR
// vc_chassis := chassis ;
1839: LD_ADDR_OWVAR 37
1843: PUSH
1844: LD_VAR 0 3
1848: ST_TO_ADDR
// vc_engine := engine ;
1849: LD_ADDR_OWVAR 39
1853: PUSH
1854: LD_VAR 0 4
1858: ST_TO_ADDR
// vc_control := control ;
1859: LD_ADDR_OWVAR 38
1863: PUSH
1864: LD_VAR 0 5
1868: ST_TO_ADDR
// vc_weapon := weapon ;
1869: LD_ADDR_OWVAR 40
1873: PUSH
1874: LD_VAR 0 6
1878: ST_TO_ADDR
// vc_fuel_battery := fuel ;
1879: LD_ADDR_OWVAR 41
1883: PUSH
1884: LD_VAR 0 7
1888: ST_TO_ADDR
// result := CreateVehicle ;
1889: LD_ADDR_VAR 0 8
1893: PUSH
1894: CALL_OW 45
1898: ST_TO_ADDR
// end ;
1899: LD_VAR 0 8
1903: RET
// export function SayX ( units , ident ) ; var i ; begin
1904: LD_INT 0
1906: PPUSH
1907: PPUSH
// result := false ;
1908: LD_ADDR_VAR 0 3
1912: PUSH
1913: LD_INT 0
1915: ST_TO_ADDR
// if not units then
1916: LD_VAR 0 1
1920: NOT
1921: IFFALSE 1925
// exit ;
1923: GO 1979
// for i in units do
1925: LD_ADDR_VAR 0 4
1929: PUSH
1930: LD_VAR 0 1
1934: PUSH
1935: FOR_IN
1936: IFFALSE 1977
// if IsOk ( i ) then
1938: LD_VAR 0 4
1942: PPUSH
1943: CALL_OW 302
1947: IFFALSE 1975
// begin Say ( i , ident ) ;
1949: LD_VAR 0 4
1953: PPUSH
1954: LD_VAR 0 2
1958: PPUSH
1959: CALL_OW 88
// result := i ;
1963: LD_ADDR_VAR 0 3
1967: PUSH
1968: LD_VAR 0 4
1972: ST_TO_ADDR
// break ;
1973: GO 1977
// end ;
1975: GO 1935
1977: POP
1978: POP
// end ;
1979: LD_VAR 0 3
1983: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1984: LD_INT 0
1986: PPUSH
1987: PPUSH
// InitUc ;
1988: CALL_OW 18
// InitHc ;
1992: CALL_OW 19
// uc_side := 0 ;
1996: LD_ADDR_OWVAR 20
2000: PUSH
2001: LD_INT 0
2003: ST_TO_ADDR
// uc_nation := 0 ;
2004: LD_ADDR_OWVAR 21
2008: PUSH
2009: LD_INT 0
2011: ST_TO_ADDR
// for i = 1 to amount do
2012: LD_ADDR_VAR 0 4
2016: PUSH
2017: DOUBLE
2018: LD_INT 1
2020: DEC
2021: ST_TO_ADDR
2022: LD_VAR 0 2
2026: PUSH
2027: FOR_TO
2028: IFFALSE 2110
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
2030: LD_ADDR_OWVAR 29
2034: PUSH
2035: LD_INT 9
2037: PPUSH
2038: LD_INT 12
2040: PPUSH
2041: CALL_OW 12
2045: PUSH
2046: LD_INT 9
2048: PPUSH
2049: LD_INT 12
2051: PPUSH
2052: CALL_OW 12
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
2061: LD_ADDR_OWVAR 35
2065: PUSH
2066: LD_INT 1
2068: NEG
2069: PPUSH
2070: LD_INT 1
2072: PPUSH
2073: CALL_OW 12
2077: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2078: LD_INT 0
2080: PPUSH
2081: LD_INT 12
2083: PPUSH
2084: LD_INT 1
2086: PPUSH
2087: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
2091: CALL_OW 44
2095: PPUSH
2096: LD_VAR 0 1
2100: PPUSH
2101: LD_INT 0
2103: PPUSH
2104: CALL_OW 49
// end ;
2108: GO 2027
2110: POP
2111: POP
// InitHc ;
2112: CALL_OW 19
// end ;
2116: LD_VAR 0 3
2120: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
2121: LD_INT 0
2123: PPUSH
2124: PPUSH
// uc_side := 0 ;
2125: LD_ADDR_OWVAR 20
2129: PUSH
2130: LD_INT 0
2132: ST_TO_ADDR
// uc_nation := 0 ;
2133: LD_ADDR_OWVAR 21
2137: PUSH
2138: LD_INT 0
2140: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
2141: LD_INT 7
2143: PPUSH
2144: LD_INT 6
2146: PUSH
2147: LD_INT 5
2149: PUSH
2150: LD_INT 4
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: LD_OWVAR 67
2162: ARRAY
2163: PPUSH
2164: CALL 1984 0 2
// for i = 1 to 2 do
2168: LD_ADDR_VAR 0 4
2172: PUSH
2173: DOUBLE
2174: LD_INT 1
2176: DEC
2177: ST_TO_ADDR
2178: LD_INT 2
2180: PUSH
2181: FOR_TO
2182: IFFALSE 2221
// begin vc_chassis := class_mastodont ;
2184: LD_ADDR_OWVAR 37
2188: PUSH
2189: LD_EXP 36
2193: ST_TO_ADDR
// vc_control := control_rider ;
2194: LD_ADDR_OWVAR 38
2198: PUSH
2199: LD_INT 4
2201: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
2202: CALL_OW 45
2206: PPUSH
2207: LD_VAR 0 1
2211: PPUSH
2212: LD_INT 0
2214: PPUSH
2215: CALL 39550 0 3
// end ;
2219: GO 2181
2221: POP
2222: POP
// for i := 1 to 4 do
2223: LD_ADDR_VAR 0 4
2227: PUSH
2228: DOUBLE
2229: LD_INT 1
2231: DEC
2232: ST_TO_ADDR
2233: LD_INT 4
2235: PUSH
2236: FOR_TO
2237: IFFALSE 2276
// begin hc_class := class_horse ;
2239: LD_ADDR_OWVAR 28
2243: PUSH
2244: LD_EXP 37
2248: ST_TO_ADDR
// hc_gallery :=  ;
2249: LD_ADDR_OWVAR 33
2253: PUSH
2254: LD_STRING 
2256: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2257: CALL_OW 44
2261: PPUSH
2262: LD_VAR 0 1
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: CALL_OW 49
// end ;
2274: GO 2236
2276: POP
2277: POP
// for i = 1 to 5 do
2278: LD_ADDR_VAR 0 4
2282: PUSH
2283: DOUBLE
2284: LD_INT 1
2286: DEC
2287: ST_TO_ADDR
2288: LD_INT 5
2290: PUSH
2291: FOR_TO
2292: IFFALSE 2346
// begin hc_class = class_tiger ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 14
2301: ST_TO_ADDR
// hc_gallery =  ;
2302: LD_ADDR_OWVAR 33
2306: PUSH
2307: LD_STRING 
2309: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
2310: LD_ADDR_OWVAR 35
2314: PUSH
2315: LD_INT 7
2317: NEG
2318: PPUSH
2319: LD_INT 7
2321: PPUSH
2322: CALL_OW 12
2326: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
2327: CALL_OW 44
2331: PPUSH
2332: LD_VAR 0 1
2336: PPUSH
2337: LD_INT 0
2339: PPUSH
2340: CALL 39550 0 3
// end ;
2344: GO 2291
2346: POP
2347: POP
// for i := 1 to 4 do
2348: LD_ADDR_VAR 0 4
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_INT 4
2360: PUSH
2361: FOR_TO
2362: IFFALSE 2399
// begin hc_class := class_phororhacos ;
2364: LD_ADDR_OWVAR 28
2368: PUSH
2369: LD_INT 18
2371: ST_TO_ADDR
// hc_gallery :=  ;
2372: LD_ADDR_OWVAR 33
2376: PUSH
2377: LD_STRING 
2379: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2380: CALL_OW 44
2384: PPUSH
2385: LD_VAR 0 1
2389: PPUSH
2390: LD_INT 0
2392: PPUSH
2393: CALL_OW 49
// end ;
2397: GO 2361
2399: POP
2400: POP
// for i := 1 to 4 do
2401: LD_ADDR_VAR 0 4
2405: PUSH
2406: DOUBLE
2407: LD_INT 1
2409: DEC
2410: ST_TO_ADDR
2411: LD_INT 4
2413: PUSH
2414: FOR_TO
2415: IFFALSE 2452
// begin hc_class := class_baggie ;
2417: LD_ADDR_OWVAR 28
2421: PUSH
2422: LD_INT 13
2424: ST_TO_ADDR
// hc_gallery :=  ;
2425: LD_ADDR_OWVAR 33
2429: PUSH
2430: LD_STRING 
2432: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
2433: CALL_OW 44
2437: PPUSH
2438: LD_VAR 0 1
2442: PPUSH
2443: LD_INT 0
2445: PPUSH
2446: CALL_OW 49
// end ;
2450: GO 2414
2452: POP
2453: POP
// for i := 1 to 7 do
2454: LD_ADDR_VAR 0 4
2458: PUSH
2459: DOUBLE
2460: LD_INT 1
2462: DEC
2463: ST_TO_ADDR
2464: LD_INT 7
2466: PUSH
2467: FOR_TO
2468: IFFALSE 2505
// begin hc_class := class_frog ;
2470: LD_ADDR_OWVAR 28
2474: PUSH
2475: LD_INT 19
2477: ST_TO_ADDR
// hc_gallery :=  ;
2478: LD_ADDR_OWVAR 33
2482: PUSH
2483: LD_STRING 
2485: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
2486: CALL_OW 44
2490: PPUSH
2491: LD_VAR 0 2
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: CALL_OW 49
// end ;
2503: GO 2467
2505: POP
2506: POP
// end ;
2507: LD_VAR 0 3
2511: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
2512: LD_INT 0
2514: PPUSH
2515: PPUSH
2516: PPUSH
// if not observer or not unit then
2517: LD_VAR 0 1
2521: NOT
2522: PUSH
2523: LD_VAR 0 2
2527: NOT
2528: OR
2529: IFFALSE 2533
// exit ;
2531: GO 2581
// if not See ( GetSide ( observer ) , unit ) then
2533: LD_VAR 0 1
2537: PPUSH
2538: CALL_OW 255
2542: PPUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL_OW 292
2552: NOT
2553: IFFALSE 2557
// exit ;
2555: GO 2581
// result := GetDistUnits ( observer , unit ) < 12 ;
2557: LD_ADDR_VAR 0 3
2561: PUSH
2562: LD_VAR 0 1
2566: PPUSH
2567: LD_VAR 0 2
2571: PPUSH
2572: CALL_OW 296
2576: PUSH
2577: LD_INT 12
2579: LESS
2580: ST_TO_ADDR
// end ;
2581: LD_VAR 0 3
2585: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
2586: LD_INT 0
2588: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
2589: LD_VAR 0 2
2593: PUSH
2594: LD_INT 1
2596: ARRAY
2597: PPUSH
2598: LD_VAR 0 2
2602: PUSH
2603: LD_INT 2
2605: ARRAY
2606: PPUSH
2607: CALL_OW 488
2611: PUSH
2612: LD_VAR 0 2
2616: PUSH
2617: LD_INT 1
2619: ARRAY
2620: PPUSH
2621: LD_VAR 0 2
2625: PUSH
2626: LD_INT 2
2628: ARRAY
2629: PPUSH
2630: CALL_OW 428
2634: PUSH
2635: LD_INT 0
2637: EQUAL
2638: AND
2639: IFFALSE 2673
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
2641: LD_VAR 0 1
2645: PPUSH
2646: LD_VAR 0 2
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 2
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PPUSH
2669: CALL_OW 48
// end ;
2673: LD_VAR 0 4
2677: RET
// export function ReverseArray ( array ) ; var i ; begin
2678: LD_INT 0
2680: PPUSH
2681: PPUSH
// if not array then
2682: LD_VAR 0 1
2686: NOT
2687: IFFALSE 2691
// exit ;
2689: GO 2749
// result := [ ] ;
2691: LD_ADDR_VAR 0 2
2695: PUSH
2696: EMPTY
2697: ST_TO_ADDR
// for i := 1 to array do
2698: LD_ADDR_VAR 0 3
2702: PUSH
2703: DOUBLE
2704: LD_INT 1
2706: DEC
2707: ST_TO_ADDR
2708: LD_VAR 0 1
2712: PUSH
2713: FOR_TO
2714: IFFALSE 2747
// result := Insert ( result , 1 , array [ i ] ) ;
2716: LD_ADDR_VAR 0 2
2720: PUSH
2721: LD_VAR 0 2
2725: PPUSH
2726: LD_INT 1
2728: PPUSH
2729: LD_VAR 0 1
2733: PUSH
2734: LD_VAR 0 3
2738: ARRAY
2739: PPUSH
2740: CALL_OW 2
2744: ST_TO_ADDR
2745: GO 2713
2747: POP
2748: POP
// end ;
2749: LD_VAR 0 2
2753: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2754: LD_INT 0
2756: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2757: LD_VAR 0 1
2761: PPUSH
2762: LD_VAR 0 2
2766: PPUSH
2767: LD_VAR 0 3
2771: PPUSH
2772: LD_VAR 0 4
2776: PPUSH
2777: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_VAR 0 2
2790: PPUSH
2791: LD_VAR 0 3
2795: PPUSH
2796: CALL_OW 331
// end ;
2800: LD_VAR 0 5
2804: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
2805: LD_INT 0
2807: PPUSH
// if not units then
2808: LD_VAR 0 1
2812: NOT
2813: IFFALSE 2817
// exit ;
2815: GO 2900
// result := true ;
2817: LD_ADDR_VAR 0 4
2821: PUSH
2822: LD_INT 1
2824: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
2825: LD_VAR 0 1
2829: PPUSH
2830: LD_INT 26
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PPUSH
2840: CALL_OW 72
2844: PUSH
2845: LD_INT 1
2847: ARRAY
2848: PPUSH
2849: LD_VAR 0 2
2853: PPUSH
2854: CALL_OW 88
2858: NOT
2859: IFFALSE 2900
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
2861: LD_ADDR_VAR 0 4
2865: PUSH
2866: LD_VAR 0 1
2870: PPUSH
2871: LD_INT 26
2873: PUSH
2874: LD_INT 2
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: CALL_OW 72
2885: PUSH
2886: LD_INT 1
2888: ARRAY
2889: PPUSH
2890: LD_VAR 0 3
2894: PPUSH
2895: CALL_OW 88
2899: ST_TO_ADDR
// end ;
2900: LD_VAR 0 4
2904: RET
// export function SeeGroup ( side , group ) ; var i ; begin
2905: LD_INT 0
2907: PPUSH
2908: PPUSH
// if not group then
2909: LD_VAR 0 2
2913: NOT
2914: IFFALSE 2918
// exit ;
2916: GO 2963
// for i in group do
2918: LD_ADDR_VAR 0 4
2922: PUSH
2923: LD_VAR 0 2
2927: PUSH
2928: FOR_IN
2929: IFFALSE 2961
// if See ( side , i ) then
2931: LD_VAR 0 1
2935: PPUSH
2936: LD_VAR 0 4
2940: PPUSH
2941: CALL_OW 292
2945: IFFALSE 2959
// begin result := true ;
2947: LD_ADDR_VAR 0 3
2951: PUSH
2952: LD_INT 1
2954: ST_TO_ADDR
// exit ;
2955: POP
2956: POP
2957: GO 2963
// end ;
2959: GO 2928
2961: POP
2962: POP
// end ; end_of_file
2963: LD_VAR 0 3
2967: RET
// export Morozov ; export function PrepareRussian ; begin
2968: LD_INT 0
2970: PPUSH
// uc_side := 3 ;
2971: LD_ADDR_OWVAR 20
2975: PUSH
2976: LD_INT 3
2978: ST_TO_ADDR
// uc_nation := 3 ;
2979: LD_ADDR_OWVAR 21
2983: PUSH
2984: LD_INT 3
2986: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
2987: LD_ADDR_EXP 18
2991: PUSH
2992: LD_STRING Morozov
2994: PPUSH
2995: CALL_OW 25
2999: ST_TO_ADDR
// SetBName ( ruLenin , lenin ) ;
3000: LD_INT 52
3002: PPUSH
3003: LD_STRING lenin
3005: PPUSH
3006: CALL_OW 500
// end ; end_of_file
3010: LD_VAR 0 1
3014: RET
// export function Action ; begin
3015: LD_INT 0
3017: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
3018: LD_INT 2
3020: PPUSH
3021: LD_INT 4
3023: PPUSH
3024: CALL_OW 332
// Video ( true ) ;
3028: LD_INT 1
3030: PPUSH
3031: CALL 40608 0 1
// CenterNowOnXY ( 213 , 89 ) ;
3035: LD_INT 213
3037: PPUSH
3038: LD_INT 89
3040: PPUSH
3041: CALL_OW 86
// if not debug then
3045: LD_EXP 1
3049: NOT
3050: IFFALSE 3084
// begin if Kaia and Olaf then
3052: LD_EXP 8
3056: PUSH
3057: LD_EXP 12
3061: AND
3062: IFFALSE 3068
// SceneKaiaWithOlaf ;
3064: CALL 3107 0 0
// if Givi and Kamil then
3068: LD_EXP 4
3072: PUSH
3073: LD_EXP 7
3077: AND
3078: IFFALSE 3084
// SceneWithGiviAndKamil ;
3080: CALL 3678 0 0
// end ; Video ( false ) ;
3084: LD_INT 0
3086: PPUSH
3087: CALL 40608 0 1
// ChangeMissionObjectives ( M1 ) ;
3091: LD_STRING M1
3093: PPUSH
3094: CALL_OW 337
// SaveForQuickRestart ;
3098: CALL_OW 22
// end ;
3102: LD_VAR 0 1
3106: RET
// export function SceneKaiaWithOlaf ; begin
3107: LD_INT 0
3109: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
3110: LD_INT 22
3112: PUSH
3113: LD_INT 2
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 30
3122: PUSH
3123: LD_INT 3
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PPUSH
3134: CALL_OW 69
3138: PPUSH
3139: LD_INT 14
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: LD_INT 1
3147: PPUSH
3148: LD_INT 26
3150: PPUSH
3151: CALL_OW 125
// wait ( 0 0$1 ) ;
3155: LD_INT 35
3157: PPUSH
3158: CALL_OW 67
// Say ( Kaia , DK-06-Mem-1 ) ;
3162: LD_EXP 8
3166: PPUSH
3167: LD_STRING DK-06-Mem-1
3169: PPUSH
3170: CALL_OW 88
// Say ( Kaia , DK-06-Mem-2 ) ;
3174: LD_EXP 8
3178: PPUSH
3179: LD_STRING DK-06-Mem-2
3181: PPUSH
3182: CALL_OW 88
// Say ( Olaf , DO-06-Mem-3 ) ;
3186: LD_EXP 12
3190: PPUSH
3191: LD_STRING DO-06-Mem-3
3193: PPUSH
3194: CALL_OW 88
// Say ( Kaia , DK-06-Mem-4 ) ;
3198: LD_EXP 8
3202: PPUSH
3203: LD_STRING DK-06-Mem-4
3205: PPUSH
3206: CALL_OW 88
// Say ( Olaf , DO-06-Mem-5 ) ;
3210: LD_EXP 12
3214: PPUSH
3215: LD_STRING DO-06-Mem-5
3217: PPUSH
3218: CALL_OW 88
// wait ( 0 0$2 ) ;
3222: LD_INT 70
3224: PPUSH
3225: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
3229: LD_INT 22
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PUSH
3239: LD_INT 30
3241: PUSH
3242: LD_INT 3
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PPUSH
3253: CALL_OW 69
3257: PPUSH
3258: LD_INT 90
3260: PPUSH
3261: CALL_OW 329
// Say ( Olaf , DO-06-Mem-6 ) ;
3265: LD_EXP 12
3269: PPUSH
3270: LD_STRING DO-06-Mem-6
3272: PPUSH
3273: CALL_OW 88
// Say ( Kaia , DK-06-Mem-7 ) ;
3277: LD_EXP 8
3281: PPUSH
3282: LD_STRING DK-06-Mem-7
3284: PPUSH
3285: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
3289: LD_EXP 3
3293: PPUSH
3294: LD_EXP 8
3298: PPUSH
3299: CALL_OW 119
// Say ( Heike , DH-06-Mem-8 ) ;
3303: LD_EXP 3
3307: PPUSH
3308: LD_STRING DH-06-Mem-8
3310: PPUSH
3311: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
3315: LD_EXP 8
3319: PUSH
3320: LD_EXP 12
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: LD_EXP 3
3333: PPUSH
3334: CALL_OW 119
// Say ( Olaf , DO-06-Mem-9 ) ;
3338: LD_EXP 12
3342: PPUSH
3343: LD_STRING DO-06-Mem-9
3345: PPUSH
3346: CALL_OW 88
// Say ( Olaf , DO-06-Mem-10 ) ;
3350: LD_EXP 12
3354: PPUSH
3355: LD_STRING DO-06-Mem-10
3357: PPUSH
3358: CALL_OW 88
// Say ( Olaf , DO-06-Mem-11 ) ;
3362: LD_EXP 12
3366: PPUSH
3367: LD_STRING DO-06-Mem-11
3369: PPUSH
3370: CALL_OW 88
// Say ( Olaf , DO-06-Mem-12 ) ;
3374: LD_EXP 12
3378: PPUSH
3379: LD_STRING DO-06-Mem-12
3381: PPUSH
3382: CALL_OW 88
// Say ( Kaia , DK-06-Mem-13 ) ;
3386: LD_EXP 8
3390: PPUSH
3391: LD_STRING DK-06-Mem-13
3393: PPUSH
3394: CALL_OW 88
// Say ( Kaia , DK-06-Mem-14 ) ;
3398: LD_EXP 8
3402: PPUSH
3403: LD_STRING DK-06-Mem-14
3405: PPUSH
3406: CALL_OW 88
// Say ( Kaia , DK-06-Mem-15 ) ;
3410: LD_EXP 8
3414: PPUSH
3415: LD_STRING DK-06-Mem-15
3417: PPUSH
3418: CALL_OW 88
// Say ( Kaia , DK-06-Mem-16 ) ;
3422: LD_EXP 8
3426: PPUSH
3427: LD_STRING DK-06-Mem-16
3429: PPUSH
3430: CALL_OW 88
// Say ( Kaia , DK-06-Mem-17 ) ;
3434: LD_EXP 8
3438: PPUSH
3439: LD_STRING DK-06-Mem-17
3441: PPUSH
3442: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
3446: LD_EXP 12
3450: PPUSH
3451: LD_EXP 8
3455: PPUSH
3456: CALL_OW 119
// Say ( Olaf , DO-06-Mem-18 ) ;
3460: LD_EXP 12
3464: PPUSH
3465: LD_STRING DO-06-Mem-18
3467: PPUSH
3468: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
3472: LD_EXP 8
3476: PPUSH
3477: LD_EXP 12
3481: PPUSH
3482: CALL_OW 119
// Say ( Kaia , DK-06-Mem-19 ) ;
3486: LD_EXP 8
3490: PPUSH
3491: LD_STRING DK-06-Mem-19
3493: PPUSH
3494: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
3498: LD_EXP 12
3502: PPUSH
3503: LD_INT 214
3505: PPUSH
3506: LD_INT 86
3508: PPUSH
3509: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
3513: LD_EXP 12
3517: PPUSH
3518: LD_EXP 8
3522: PPUSH
3523: CALL_OW 179
// if Givi then
3527: LD_EXP 4
3531: IFFALSE 3562
// begin ComMoveXY ( Givi , 217 , 86 ) ;
3533: LD_EXP 4
3537: PPUSH
3538: LD_INT 217
3540: PPUSH
3541: LD_INT 86
3543: PPUSH
3544: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
3548: LD_EXP 4
3552: PPUSH
3553: LD_EXP 3
3557: PPUSH
3558: CALL_OW 179
// end ; if Kamil then
3562: LD_EXP 7
3566: IFFALSE 3606
// begin ComExit ( Kamil ) ;
3568: LD_EXP 7
3572: PPUSH
3573: CALL 41024 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
3577: LD_EXP 7
3581: PPUSH
3582: LD_INT 212
3584: PPUSH
3585: LD_INT 86
3587: PPUSH
3588: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
3592: LD_EXP 7
3596: PPUSH
3597: LD_EXP 3
3601: PPUSH
3602: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
3606: LD_INT 70
3608: PPUSH
3609: CALL_OW 67
// Say ( Heike , DH-06-Mem-20 ) ;
3613: LD_EXP 3
3617: PPUSH
3618: LD_STRING DH-06-Mem-20
3620: PPUSH
3621: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
3625: LD_EXP 12
3629: PPUSH
3630: LD_INT 215
3632: PPUSH
3633: LD_INT 87
3635: PPUSH
3636: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
3640: LD_EXP 12
3644: PPUSH
3645: LD_EXP 8
3649: PPUSH
3650: CALL_OW 179
// Say ( Kaia , DK-06-Mem-21 ) ;
3654: LD_EXP 8
3658: PPUSH
3659: LD_STRING DK-06-Mem-21
3661: PPUSH
3662: CALL_OW 88
// wait ( 0 0$2 ) ;
3666: LD_INT 70
3668: PPUSH
3669: CALL_OW 67
// end ;
3673: LD_VAR 0 1
3677: RET
// export function SceneWithGiviAndKamil ; begin
3678: LD_INT 0
3680: PPUSH
// if Markov then
3681: LD_EXP 10
3685: IFFALSE 3736
// begin if IsInUnit ( Markov ) then
3687: LD_EXP 10
3691: PPUSH
3692: CALL_OW 310
3696: IFFALSE 3707
// ComExit ( Markov ) ;
3698: LD_EXP 10
3702: PPUSH
3703: CALL 41024 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
3707: LD_EXP 10
3711: PPUSH
3712: LD_INT 212
3714: PPUSH
3715: LD_INT 88
3717: PPUSH
3718: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
3722: LD_EXP 10
3726: PPUSH
3727: LD_EXP 3
3731: PPUSH
3732: CALL_OW 179
// end ; Say ( Givi , DG-06-Obj-1 ) ;
3736: LD_EXP 4
3740: PPUSH
3741: LD_STRING DG-06-Obj-1
3743: PPUSH
3744: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-2 ) ;
3748: LD_EXP 7
3752: PPUSH
3753: LD_STRING DKam-06-Obj-2
3755: PPUSH
3756: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
3760: LD_EXP 3
3764: PPUSH
3765: LD_EXP 7
3769: PPUSH
3770: CALL_OW 119
// Say ( Kamil , DKam-06-Obj-3 ) ;
3774: LD_EXP 7
3778: PPUSH
3779: LD_STRING DKam-06-Obj-3
3781: PPUSH
3782: CALL_OW 88
// Say ( Markov , DMar-06-Obj-4 ) ;
3786: LD_EXP 10
3790: PPUSH
3791: LD_STRING DMar-06-Obj-4
3793: PPUSH
3794: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-6 ) ;
3798: LD_EXP 7
3802: PPUSH
3803: LD_STRING DKam-06-Obj-6
3805: PPUSH
3806: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-7 ) ;
3810: LD_EXP 7
3814: PPUSH
3815: LD_STRING DKam-06-Obj-7
3817: PPUSH
3818: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-8 ) ;
3822: LD_EXP 7
3826: PPUSH
3827: LD_STRING DKam-06-Obj-8
3829: PPUSH
3830: CALL_OW 88
// Say ( Heike , DH-06-Obj-9 ) ;
3834: LD_EXP 3
3838: PPUSH
3839: LD_STRING DH-06-Obj-9
3841: PPUSH
3842: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-10 ) ;
3846: LD_EXP 7
3850: PPUSH
3851: LD_STRING DKam-06-Obj-10
3853: PPUSH
3854: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-11 ) ;
3858: LD_EXP 7
3862: PPUSH
3863: LD_STRING DKam-06-Obj-11
3865: PPUSH
3866: CALL_OW 88
// Say ( Markov , DMar-06-Obj-12 ) ;
3870: LD_EXP 10
3874: PPUSH
3875: LD_STRING DMar-06-Obj-12
3877: PPUSH
3878: CALL_OW 88
// Say ( Markov , DMar-06-Obj-13 ) ;
3882: LD_EXP 10
3886: PPUSH
3887: LD_STRING DMar-06-Obj-13
3889: PPUSH
3890: CALL_OW 88
// Say ( Markov , DMar-06-Obj-14 ) ;
3894: LD_EXP 10
3898: PPUSH
3899: LD_STRING DMar-06-Obj-14
3901: PPUSH
3902: CALL_OW 88
// Say ( Olaf , DO-06-Obj-15 ) ;
3906: LD_EXP 12
3910: PPUSH
3911: LD_STRING DO-06-Obj-15
3913: PPUSH
3914: CALL_OW 88
// Say ( Olaf , DO-06-Obj-16 ) ;
3918: LD_EXP 12
3922: PPUSH
3923: LD_STRING DO-06-Obj-16
3925: PPUSH
3926: CALL_OW 88
// Say ( Heike , DH-06-Obj-17 ) ;
3930: LD_EXP 3
3934: PPUSH
3935: LD_STRING DH-06-Obj-17
3937: PPUSH
3938: CALL_OW 88
// Say ( Olaf , DO-06-Obj-18 ) ;
3942: LD_EXP 12
3946: PPUSH
3947: LD_STRING DO-06-Obj-18
3949: PPUSH
3950: CALL_OW 88
// end ;
3954: LD_VAR 0 1
3958: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
3959: LD_INT 34
3961: PUSH
3962: LD_EXP 24
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: PPUSH
3971: CALL_OW 69
3975: IFFALSE 4157
3977: GO 3979
3979: DISABLE
3980: LD_INT 0
3982: PPUSH
// begin CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
3983: LD_INT 34
3985: PUSH
3986: LD_EXP 24
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: CALL_OW 69
3999: PPUSH
4000: CALL_OW 87
// DialogueOn ;
4004: CALL_OW 6
// if Markov then
4008: LD_EXP 10
4012: IFFALSE 4040
// begin Say ( Markov , DMar-06-Grn-1 ) ;
4014: LD_EXP 10
4018: PPUSH
4019: LD_STRING DMar-06-Grn-1
4021: PPUSH
4022: CALL_OW 88
// Say ( Heike , DH-06-Grn-2 ) ;
4026: LD_EXP 3
4030: PPUSH
4031: LD_STRING DH-06-Grn-2
4033: PPUSH
4034: CALL_OW 88
// end else
4038: GO 4139
// if heikeSecondSquad then
4040: LD_EXP 16
4044: IFFALSE 4139
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
4046: LD_ADDR_VAR 0 1
4050: PUSH
4051: LD_EXP 16
4055: PUSH
4056: LD_INT 1
4058: PPUSH
4059: LD_EXP 16
4063: PPUSH
4064: CALL_OW 12
4068: ARRAY
4069: ST_TO_ADDR
// case GetSex ( random ) of 1 :
4070: LD_VAR 0 1
4074: PPUSH
4075: CALL_OW 258
4079: PUSH
4080: LD_INT 1
4082: DOUBLE
4083: EQUAL
4084: IFTRUE 4088
4086: GO 4103
4088: POP
// Say ( random , DArm-06-Grn-1 ) ; 2 :
4089: LD_VAR 0 1
4093: PPUSH
4094: LD_STRING DArm-06-Grn-1
4096: PPUSH
4097: CALL_OW 88
4101: GO 4127
4103: LD_INT 2
4105: DOUBLE
4106: EQUAL
4107: IFTRUE 4111
4109: GO 4126
4111: POP
// Say ( random , DArf-06-Grn-1 ) ; end ;
4112: LD_VAR 0 1
4116: PPUSH
4117: LD_STRING DArf-06-Grn-1
4119: PPUSH
4120: CALL_OW 88
4124: GO 4127
4126: POP
// Say ( Heike , DH-06-Grn-2 ) ;
4127: LD_EXP 3
4131: PPUSH
4132: LD_STRING DH-06-Grn-2
4134: PPUSH
4135: CALL_OW 88
// end ; DialogueOff ;
4139: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
4143: LD_STRING MortarConstructed
4145: PPUSH
4146: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
4150: LD_STRING SelfPropelledMortar
4152: PPUSH
4153: CALL_OW 339
// end ; end_of_file
4157: PPOPN 1
4159: END
// on VehicleConstructed ( vehicle , factory ) do var driver ;
4160: LD_INT 0
4162: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
4163: LD_VAR 0 1
4167: PPUSH
4168: CALL_OW 255
4172: PUSH
4173: LD_INT 2
4175: EQUAL
4176: PUSH
4177: LD_OWVAR 52
4181: AND
4182: PUSH
4183: LD_VAR 0 1
4187: PPUSH
4188: CALL_OW 263
4192: PUSH
4193: LD_INT 1
4195: EQUAL
4196: AND
4197: IFFALSE 4252
// begin driver := IsDrivenBy ( vehicle ) ;
4199: LD_ADDR_VAR 0 3
4203: PUSH
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 311
4213: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
4214: LD_VAR 0 1
4218: PPUSH
4219: LD_INT 211
4221: PPUSH
4222: LD_INT 101
4224: PPUSH
4225: CALL_OW 111
// AddComExitVehicle ( driver ) ;
4229: LD_VAR 0 3
4233: PPUSH
4234: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
4238: LD_VAR 0 3
4242: PPUSH
4243: LD_VAR 0 2
4247: PPUSH
4248: CALL_OW 180
// end ; end ; end_of_file
4252: PPOPN 3
4254: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
4255: LD_INT 6
4257: PPUSH
4258: LD_INT 1
4260: PPUSH
4261: CALL_OW 287
4265: PUSH
4266: LD_INT 300
4268: PUSH
4269: LD_INT 250
4271: PUSH
4272: LD_INT 200
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: PUSH
4280: LD_OWVAR 67
4284: ARRAY
4285: LESS
4286: IFFALSE 4313
4288: GO 4290
4290: DISABLE
// begin enable ;
4291: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
4292: LD_INT 1
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: CALL_OW 12
4302: PPUSH
4303: LD_INT 6
4305: PPUSH
4306: LD_INT 1
4308: PPUSH
4309: CALL_OW 55
// end ; end_of_file
4313: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4314: LD_INT 0
4316: PPUSH
4317: PPUSH
// if exist_mode then
4318: LD_VAR 0 2
4322: IFFALSE 4347
// unit := CreateCharacter ( prefix & ident ) else
4324: LD_ADDR_VAR 0 5
4328: PUSH
4329: LD_VAR 0 3
4333: PUSH
4334: LD_VAR 0 1
4338: STR
4339: PPUSH
4340: CALL_OW 34
4344: ST_TO_ADDR
4345: GO 4362
// unit := NewCharacter ( ident ) ;
4347: LD_ADDR_VAR 0 5
4351: PUSH
4352: LD_VAR 0 1
4356: PPUSH
4357: CALL_OW 25
4361: ST_TO_ADDR
// result := unit ;
4362: LD_ADDR_VAR 0 4
4366: PUSH
4367: LD_VAR 0 5
4371: ST_TO_ADDR
// end ;
4372: LD_VAR 0 4
4376: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4377: LD_INT 0
4379: PPUSH
4380: PPUSH
// if not side or not nation then
4381: LD_VAR 0 1
4385: NOT
4386: PUSH
4387: LD_VAR 0 2
4391: NOT
4392: OR
4393: IFFALSE 4397
// exit ;
4395: GO 5161
// case nation of nation_american :
4397: LD_VAR 0 2
4401: PUSH
4402: LD_INT 1
4404: DOUBLE
4405: EQUAL
4406: IFTRUE 4410
4408: GO 4624
4410: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4411: LD_ADDR_VAR 0 4
4415: PUSH
4416: LD_INT 35
4418: PUSH
4419: LD_INT 45
4421: PUSH
4422: LD_INT 46
4424: PUSH
4425: LD_INT 47
4427: PUSH
4428: LD_INT 82
4430: PUSH
4431: LD_INT 83
4433: PUSH
4434: LD_INT 84
4436: PUSH
4437: LD_INT 85
4439: PUSH
4440: LD_INT 86
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: LD_INT 2
4448: PUSH
4449: LD_INT 6
4451: PUSH
4452: LD_INT 15
4454: PUSH
4455: LD_INT 16
4457: PUSH
4458: LD_INT 7
4460: PUSH
4461: LD_INT 12
4463: PUSH
4464: LD_INT 13
4466: PUSH
4467: LD_INT 10
4469: PUSH
4470: LD_INT 14
4472: PUSH
4473: LD_INT 20
4475: PUSH
4476: LD_INT 21
4478: PUSH
4479: LD_INT 22
4481: PUSH
4482: LD_INT 25
4484: PUSH
4485: LD_INT 32
4487: PUSH
4488: LD_INT 27
4490: PUSH
4491: LD_INT 36
4493: PUSH
4494: LD_INT 69
4496: PUSH
4497: LD_INT 39
4499: PUSH
4500: LD_INT 34
4502: PUSH
4503: LD_INT 40
4505: PUSH
4506: LD_INT 48
4508: PUSH
4509: LD_INT 49
4511: PUSH
4512: LD_INT 50
4514: PUSH
4515: LD_INT 51
4517: PUSH
4518: LD_INT 52
4520: PUSH
4521: LD_INT 53
4523: PUSH
4524: LD_INT 54
4526: PUSH
4527: LD_INT 55
4529: PUSH
4530: LD_INT 56
4532: PUSH
4533: LD_INT 57
4535: PUSH
4536: LD_INT 58
4538: PUSH
4539: LD_INT 59
4541: PUSH
4542: LD_INT 60
4544: PUSH
4545: LD_INT 61
4547: PUSH
4548: LD_INT 62
4550: PUSH
4551: LD_INT 80
4553: PUSH
4554: LD_INT 82
4556: PUSH
4557: LD_INT 83
4559: PUSH
4560: LD_INT 84
4562: PUSH
4563: LD_INT 85
4565: PUSH
4566: LD_INT 86
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: ST_TO_ADDR
4622: GO 5085
4624: LD_INT 2
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4854
4632: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
4633: LD_ADDR_VAR 0 4
4637: PUSH
4638: LD_INT 35
4640: PUSH
4641: LD_INT 45
4643: PUSH
4644: LD_INT 46
4646: PUSH
4647: LD_INT 47
4649: PUSH
4650: LD_INT 82
4652: PUSH
4653: LD_INT 83
4655: PUSH
4656: LD_INT 84
4658: PUSH
4659: LD_INT 85
4661: PUSH
4662: LD_INT 87
4664: PUSH
4665: LD_INT 70
4667: PUSH
4668: LD_INT 1
4670: PUSH
4671: LD_INT 11
4673: PUSH
4674: LD_INT 3
4676: PUSH
4677: LD_INT 4
4679: PUSH
4680: LD_INT 5
4682: PUSH
4683: LD_INT 6
4685: PUSH
4686: LD_INT 15
4688: PUSH
4689: LD_INT 18
4691: PUSH
4692: LD_INT 7
4694: PUSH
4695: LD_INT 17
4697: PUSH
4698: LD_INT 8
4700: PUSH
4701: LD_INT 20
4703: PUSH
4704: LD_INT 21
4706: PUSH
4707: LD_INT 22
4709: PUSH
4710: LD_INT 72
4712: PUSH
4713: LD_INT 26
4715: PUSH
4716: LD_INT 69
4718: PUSH
4719: LD_INT 39
4721: PUSH
4722: LD_INT 40
4724: PUSH
4725: LD_INT 41
4727: PUSH
4728: LD_INT 42
4730: PUSH
4731: LD_INT 43
4733: PUSH
4734: LD_INT 48
4736: PUSH
4737: LD_INT 49
4739: PUSH
4740: LD_INT 50
4742: PUSH
4743: LD_INT 51
4745: PUSH
4746: LD_INT 52
4748: PUSH
4749: LD_INT 53
4751: PUSH
4752: LD_INT 54
4754: PUSH
4755: LD_INT 55
4757: PUSH
4758: LD_INT 56
4760: PUSH
4761: LD_INT 60
4763: PUSH
4764: LD_INT 61
4766: PUSH
4767: LD_INT 62
4769: PUSH
4770: LD_INT 66
4772: PUSH
4773: LD_INT 67
4775: PUSH
4776: LD_INT 68
4778: PUSH
4779: LD_INT 81
4781: PUSH
4782: LD_INT 82
4784: PUSH
4785: LD_INT 83
4787: PUSH
4788: LD_INT 84
4790: PUSH
4791: LD_INT 85
4793: PUSH
4794: LD_INT 87
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: ST_TO_ADDR
4852: GO 5085
4854: LD_INT 3
4856: DOUBLE
4857: EQUAL
4858: IFTRUE 4862
4860: GO 5084
4862: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4863: LD_ADDR_VAR 0 4
4867: PUSH
4868: LD_INT 46
4870: PUSH
4871: LD_INT 47
4873: PUSH
4874: LD_INT 1
4876: PUSH
4877: LD_INT 2
4879: PUSH
4880: LD_INT 82
4882: PUSH
4883: LD_INT 83
4885: PUSH
4886: LD_INT 84
4888: PUSH
4889: LD_INT 85
4891: PUSH
4892: LD_INT 86
4894: PUSH
4895: LD_INT 11
4897: PUSH
4898: LD_INT 9
4900: PUSH
4901: LD_INT 20
4903: PUSH
4904: LD_INT 19
4906: PUSH
4907: LD_INT 21
4909: PUSH
4910: LD_INT 24
4912: PUSH
4913: LD_INT 22
4915: PUSH
4916: LD_INT 25
4918: PUSH
4919: LD_INT 28
4921: PUSH
4922: LD_INT 29
4924: PUSH
4925: LD_INT 30
4927: PUSH
4928: LD_INT 31
4930: PUSH
4931: LD_INT 37
4933: PUSH
4934: LD_INT 38
4936: PUSH
4937: LD_INT 32
4939: PUSH
4940: LD_INT 27
4942: PUSH
4943: LD_INT 33
4945: PUSH
4946: LD_INT 69
4948: PUSH
4949: LD_INT 39
4951: PUSH
4952: LD_INT 34
4954: PUSH
4955: LD_INT 40
4957: PUSH
4958: LD_INT 71
4960: PUSH
4961: LD_INT 23
4963: PUSH
4964: LD_INT 44
4966: PUSH
4967: LD_INT 48
4969: PUSH
4970: LD_INT 49
4972: PUSH
4973: LD_INT 50
4975: PUSH
4976: LD_INT 51
4978: PUSH
4979: LD_INT 52
4981: PUSH
4982: LD_INT 53
4984: PUSH
4985: LD_INT 54
4987: PUSH
4988: LD_INT 55
4990: PUSH
4991: LD_INT 56
4993: PUSH
4994: LD_INT 57
4996: PUSH
4997: LD_INT 58
4999: PUSH
5000: LD_INT 59
5002: PUSH
5003: LD_INT 63
5005: PUSH
5006: LD_INT 64
5008: PUSH
5009: LD_INT 65
5011: PUSH
5012: LD_INT 82
5014: PUSH
5015: LD_INT 83
5017: PUSH
5018: LD_INT 84
5020: PUSH
5021: LD_INT 85
5023: PUSH
5024: LD_INT 86
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: ST_TO_ADDR
5082: GO 5085
5084: POP
// if state > - 1 and state < 3 then
5085: LD_VAR 0 3
5089: PUSH
5090: LD_INT 1
5092: NEG
5093: GREATER
5094: PUSH
5095: LD_VAR 0 3
5099: PUSH
5100: LD_INT 3
5102: LESS
5103: AND
5104: IFFALSE 5161
// for i in result do
5106: LD_ADDR_VAR 0 5
5110: PUSH
5111: LD_VAR 0 4
5115: PUSH
5116: FOR_IN
5117: IFFALSE 5159
// if GetTech ( i , side ) <> state then
5119: LD_VAR 0 5
5123: PPUSH
5124: LD_VAR 0 1
5128: PPUSH
5129: CALL_OW 321
5133: PUSH
5134: LD_VAR 0 3
5138: NONEQUAL
5139: IFFALSE 5157
// result := result diff i ;
5141: LD_ADDR_VAR 0 4
5145: PUSH
5146: LD_VAR 0 4
5150: PUSH
5151: LD_VAR 0 5
5155: DIFF
5156: ST_TO_ADDR
5157: GO 5116
5159: POP
5160: POP
// end ;
5161: LD_VAR 0 4
5165: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5166: LD_INT 0
5168: PPUSH
5169: PPUSH
5170: PPUSH
// result := true ;
5171: LD_ADDR_VAR 0 3
5175: PUSH
5176: LD_INT 1
5178: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5179: LD_ADDR_VAR 0 5
5183: PUSH
5184: LD_VAR 0 2
5188: PPUSH
5189: CALL_OW 480
5193: ST_TO_ADDR
// if not tmp then
5194: LD_VAR 0 5
5198: NOT
5199: IFFALSE 5203
// exit ;
5201: GO 5252
// for i in tmp do
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: LD_VAR 0 5
5212: PUSH
5213: FOR_IN
5214: IFFALSE 5250
// if GetTech ( i , side ) <> state_researched then
5216: LD_VAR 0 4
5220: PPUSH
5221: LD_VAR 0 1
5225: PPUSH
5226: CALL_OW 321
5230: PUSH
5231: LD_INT 2
5233: NONEQUAL
5234: IFFALSE 5248
// begin result := false ;
5236: LD_ADDR_VAR 0 3
5240: PUSH
5241: LD_INT 0
5243: ST_TO_ADDR
// exit ;
5244: POP
5245: POP
5246: GO 5252
// end ;
5248: GO 5213
5250: POP
5251: POP
// end ;
5252: LD_VAR 0 3
5256: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5257: LD_INT 0
5259: PPUSH
5260: PPUSH
5261: PPUSH
5262: PPUSH
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5272: LD_VAR 0 1
5276: NOT
5277: PUSH
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 257
5287: PUSH
5288: LD_INT 9
5290: NONEQUAL
5291: OR
5292: IFFALSE 5296
// exit ;
5294: GO 5869
// side := GetSide ( unit ) ;
5296: LD_ADDR_VAR 0 9
5300: PUSH
5301: LD_VAR 0 1
5305: PPUSH
5306: CALL_OW 255
5310: ST_TO_ADDR
// tech_space := tech_spacanom ;
5311: LD_ADDR_VAR 0 12
5315: PUSH
5316: LD_INT 29
5318: ST_TO_ADDR
// tech_time := tech_taurad ;
5319: LD_ADDR_VAR 0 13
5323: PUSH
5324: LD_INT 28
5326: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5327: LD_ADDR_VAR 0 11
5331: PUSH
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 310
5341: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5342: LD_VAR 0 11
5346: PPUSH
5347: CALL_OW 247
5351: PUSH
5352: LD_INT 2
5354: EQUAL
5355: IFFALSE 5359
// exit ;
5357: GO 5869
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5359: LD_ADDR_VAR 0 8
5363: PUSH
5364: LD_INT 81
5366: PUSH
5367: LD_VAR 0 9
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: LD_INT 21
5381: PUSH
5382: LD_INT 3
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PPUSH
5397: CALL_OW 69
5401: ST_TO_ADDR
// if not tmp then
5402: LD_VAR 0 8
5406: NOT
5407: IFFALSE 5411
// exit ;
5409: GO 5869
// if in_unit then
5411: LD_VAR 0 11
5415: IFFALSE 5439
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5417: LD_ADDR_VAR 0 10
5421: PUSH
5422: LD_VAR 0 8
5426: PPUSH
5427: LD_VAR 0 11
5431: PPUSH
5432: CALL_OW 74
5436: ST_TO_ADDR
5437: GO 5459
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5439: LD_ADDR_VAR 0 10
5443: PUSH
5444: LD_VAR 0 8
5448: PPUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 74
5458: ST_TO_ADDR
// if not enemy then
5459: LD_VAR 0 10
5463: NOT
5464: IFFALSE 5468
// exit ;
5466: GO 5869
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5468: LD_VAR 0 11
5472: PUSH
5473: LD_VAR 0 11
5477: PPUSH
5478: LD_VAR 0 10
5482: PPUSH
5483: CALL_OW 296
5487: PUSH
5488: LD_INT 13
5490: GREATER
5491: AND
5492: PUSH
5493: LD_VAR 0 1
5497: PPUSH
5498: LD_VAR 0 10
5502: PPUSH
5503: CALL_OW 296
5507: PUSH
5508: LD_INT 12
5510: GREATER
5511: OR
5512: IFFALSE 5516
// exit ;
5514: GO 5869
// missile := [ 1 ] ;
5516: LD_ADDR_VAR 0 14
5520: PUSH
5521: LD_INT 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5527: LD_VAR 0 9
5531: PPUSH
5532: LD_VAR 0 12
5536: PPUSH
5537: CALL_OW 325
5541: IFFALSE 5570
// missile := Insert ( missile , missile + 1 , 2 ) ;
5543: LD_ADDR_VAR 0 14
5547: PUSH
5548: LD_VAR 0 14
5552: PPUSH
5553: LD_VAR 0 14
5557: PUSH
5558: LD_INT 1
5560: PLUS
5561: PPUSH
5562: LD_INT 2
5564: PPUSH
5565: CALL_OW 2
5569: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5570: LD_VAR 0 9
5574: PPUSH
5575: LD_VAR 0 13
5579: PPUSH
5580: CALL_OW 325
5584: PUSH
5585: LD_VAR 0 10
5589: PPUSH
5590: CALL_OW 255
5594: PPUSH
5595: LD_VAR 0 13
5599: PPUSH
5600: CALL_OW 325
5604: NOT
5605: AND
5606: IFFALSE 5635
// missile := Insert ( missile , missile + 1 , 3 ) ;
5608: LD_ADDR_VAR 0 14
5612: PUSH
5613: LD_VAR 0 14
5617: PPUSH
5618: LD_VAR 0 14
5622: PUSH
5623: LD_INT 1
5625: PLUS
5626: PPUSH
5627: LD_INT 3
5629: PPUSH
5630: CALL_OW 2
5634: ST_TO_ADDR
// if missile < 2 then
5635: LD_VAR 0 14
5639: PUSH
5640: LD_INT 2
5642: LESS
5643: IFFALSE 5647
// exit ;
5645: GO 5869
// x := GetX ( enemy ) ;
5647: LD_ADDR_VAR 0 4
5651: PUSH
5652: LD_VAR 0 10
5656: PPUSH
5657: CALL_OW 250
5661: ST_TO_ADDR
// y := GetY ( enemy ) ;
5662: LD_ADDR_VAR 0 5
5666: PUSH
5667: LD_VAR 0 10
5671: PPUSH
5672: CALL_OW 251
5676: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5677: LD_ADDR_VAR 0 6
5681: PUSH
5682: LD_VAR 0 4
5686: PUSH
5687: LD_INT 1
5689: NEG
5690: PPUSH
5691: LD_INT 1
5693: PPUSH
5694: CALL_OW 12
5698: PLUS
5699: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5700: LD_ADDR_VAR 0 7
5704: PUSH
5705: LD_VAR 0 5
5709: PUSH
5710: LD_INT 1
5712: NEG
5713: PPUSH
5714: LD_INT 1
5716: PPUSH
5717: CALL_OW 12
5721: PLUS
5722: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5723: LD_VAR 0 6
5727: PPUSH
5728: LD_VAR 0 7
5732: PPUSH
5733: CALL_OW 488
5737: NOT
5738: IFFALSE 5760
// begin _x := x ;
5740: LD_ADDR_VAR 0 6
5744: PUSH
5745: LD_VAR 0 4
5749: ST_TO_ADDR
// _y := y ;
5750: LD_ADDR_VAR 0 7
5754: PUSH
5755: LD_VAR 0 5
5759: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5760: LD_ADDR_VAR 0 3
5764: PUSH
5765: LD_INT 1
5767: PPUSH
5768: LD_VAR 0 14
5772: PPUSH
5773: CALL_OW 12
5777: ST_TO_ADDR
// case i of 1 :
5778: LD_VAR 0 3
5782: PUSH
5783: LD_INT 1
5785: DOUBLE
5786: EQUAL
5787: IFTRUE 5791
5789: GO 5808
5791: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5792: LD_VAR 0 1
5796: PPUSH
5797: LD_VAR 0 10
5801: PPUSH
5802: CALL_OW 115
5806: GO 5869
5808: LD_INT 2
5810: DOUBLE
5811: EQUAL
5812: IFTRUE 5816
5814: GO 5838
5816: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5817: LD_VAR 0 1
5821: PPUSH
5822: LD_VAR 0 6
5826: PPUSH
5827: LD_VAR 0 7
5831: PPUSH
5832: CALL_OW 153
5836: GO 5869
5838: LD_INT 3
5840: DOUBLE
5841: EQUAL
5842: IFTRUE 5846
5844: GO 5868
5846: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5847: LD_VAR 0 1
5851: PPUSH
5852: LD_VAR 0 6
5856: PPUSH
5857: LD_VAR 0 7
5861: PPUSH
5862: CALL_OW 154
5866: GO 5869
5868: POP
// end ;
5869: LD_VAR 0 2
5873: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5874: LD_INT 0
5876: PPUSH
5877: PPUSH
5878: PPUSH
5879: PPUSH
5880: PPUSH
5881: PPUSH
// if not unit or not building then
5882: LD_VAR 0 1
5886: NOT
5887: PUSH
5888: LD_VAR 0 2
5892: NOT
5893: OR
5894: IFFALSE 5898
// exit ;
5896: GO 6056
// x := GetX ( building ) ;
5898: LD_ADDR_VAR 0 5
5902: PUSH
5903: LD_VAR 0 2
5907: PPUSH
5908: CALL_OW 250
5912: ST_TO_ADDR
// y := GetY ( building ) ;
5913: LD_ADDR_VAR 0 6
5917: PUSH
5918: LD_VAR 0 2
5922: PPUSH
5923: CALL_OW 251
5927: ST_TO_ADDR
// for i = 0 to 5 do
5928: LD_ADDR_VAR 0 4
5932: PUSH
5933: DOUBLE
5934: LD_INT 0
5936: DEC
5937: ST_TO_ADDR
5938: LD_INT 5
5940: PUSH
5941: FOR_TO
5942: IFFALSE 6054
// begin _x := ShiftX ( x , i , 3 ) ;
5944: LD_ADDR_VAR 0 7
5948: PUSH
5949: LD_VAR 0 5
5953: PPUSH
5954: LD_VAR 0 4
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: CALL_OW 272
5966: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5967: LD_ADDR_VAR 0 8
5971: PUSH
5972: LD_VAR 0 6
5976: PPUSH
5977: LD_VAR 0 4
5981: PPUSH
5982: LD_INT 3
5984: PPUSH
5985: CALL_OW 273
5989: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5990: LD_VAR 0 7
5994: PPUSH
5995: LD_VAR 0 8
5999: PPUSH
6000: CALL_OW 488
6004: NOT
6005: IFFALSE 6009
// continue ;
6007: GO 5941
// if HexInfo ( _x , _y ) = 0 then
6009: LD_VAR 0 7
6013: PPUSH
6014: LD_VAR 0 8
6018: PPUSH
6019: CALL_OW 428
6023: PUSH
6024: LD_INT 0
6026: EQUAL
6027: IFFALSE 6052
// begin ComMoveXY ( unit , _x , _y ) ;
6029: LD_VAR 0 1
6033: PPUSH
6034: LD_VAR 0 7
6038: PPUSH
6039: LD_VAR 0 8
6043: PPUSH
6044: CALL_OW 111
// exit ;
6048: POP
6049: POP
6050: GO 6056
// end ; end ;
6052: GO 5941
6054: POP
6055: POP
// end ;
6056: LD_VAR 0 3
6060: RET
// export function ScanBase ( side , base_area ) ; begin
6061: LD_INT 0
6063: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6064: LD_ADDR_VAR 0 3
6068: PUSH
6069: LD_VAR 0 2
6073: PPUSH
6074: LD_INT 81
6076: PUSH
6077: LD_VAR 0 1
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PPUSH
6086: CALL_OW 70
6090: ST_TO_ADDR
// end ;
6091: LD_VAR 0 3
6095: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6096: LD_INT 0
6098: PPUSH
6099: PPUSH
6100: PPUSH
6101: PPUSH
// result := false ;
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: LD_INT 0
6109: ST_TO_ADDR
// side := GetSide ( unit ) ;
6110: LD_ADDR_VAR 0 3
6114: PUSH
6115: LD_VAR 0 1
6119: PPUSH
6120: CALL_OW 255
6124: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6125: LD_ADDR_VAR 0 4
6129: PUSH
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 248
6139: ST_TO_ADDR
// case nat of 1 :
6140: LD_VAR 0 4
6144: PUSH
6145: LD_INT 1
6147: DOUBLE
6148: EQUAL
6149: IFTRUE 6153
6151: GO 6164
6153: POP
// tech := tech_lassight ; 2 :
6154: LD_ADDR_VAR 0 5
6158: PUSH
6159: LD_INT 12
6161: ST_TO_ADDR
6162: GO 6203
6164: LD_INT 2
6166: DOUBLE
6167: EQUAL
6168: IFTRUE 6172
6170: GO 6183
6172: POP
// tech := tech_mortar ; 3 :
6173: LD_ADDR_VAR 0 5
6177: PUSH
6178: LD_INT 41
6180: ST_TO_ADDR
6181: GO 6203
6183: LD_INT 3
6185: DOUBLE
6186: EQUAL
6187: IFTRUE 6191
6189: GO 6202
6191: POP
// tech := tech_bazooka ; end ;
6192: LD_ADDR_VAR 0 5
6196: PUSH
6197: LD_INT 44
6199: ST_TO_ADDR
6200: GO 6203
6202: POP
// if Researched ( side , tech ) then
6203: LD_VAR 0 3
6207: PPUSH
6208: LD_VAR 0 5
6212: PPUSH
6213: CALL_OW 325
6217: IFFALSE 6244
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6219: LD_ADDR_VAR 0 2
6223: PUSH
6224: LD_INT 5
6226: PUSH
6227: LD_INT 8
6229: PUSH
6230: LD_INT 9
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: LD_VAR 0 4
6242: ARRAY
6243: ST_TO_ADDR
// end ;
6244: LD_VAR 0 2
6248: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6249: LD_INT 0
6251: PPUSH
6252: PPUSH
6253: PPUSH
// if not mines then
6254: LD_VAR 0 2
6258: NOT
6259: IFFALSE 6263
// exit ;
6261: GO 6407
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6263: LD_ADDR_VAR 0 5
6267: PUSH
6268: LD_INT 81
6270: PUSH
6271: LD_VAR 0 1
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: LD_INT 21
6285: PUSH
6286: LD_INT 3
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: CALL_OW 69
6305: ST_TO_ADDR
// for i in mines do
6306: LD_ADDR_VAR 0 4
6310: PUSH
6311: LD_VAR 0 2
6315: PUSH
6316: FOR_IN
6317: IFFALSE 6405
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6319: LD_VAR 0 4
6323: PUSH
6324: LD_INT 1
6326: ARRAY
6327: PPUSH
6328: LD_VAR 0 4
6332: PUSH
6333: LD_INT 2
6335: ARRAY
6336: PPUSH
6337: CALL_OW 458
6341: NOT
6342: IFFALSE 6346
// continue ;
6344: GO 6316
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6346: LD_VAR 0 4
6350: PUSH
6351: LD_INT 1
6353: ARRAY
6354: PPUSH
6355: LD_VAR 0 4
6359: PUSH
6360: LD_INT 2
6362: ARRAY
6363: PPUSH
6364: CALL_OW 428
6368: PUSH
6369: LD_VAR 0 5
6373: IN
6374: IFFALSE 6403
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6376: LD_VAR 0 4
6380: PUSH
6381: LD_INT 1
6383: ARRAY
6384: PPUSH
6385: LD_VAR 0 4
6389: PUSH
6390: LD_INT 2
6392: ARRAY
6393: PPUSH
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 456
// end ;
6403: GO 6316
6405: POP
6406: POP
// end ;
6407: LD_VAR 0 3
6411: RET
// export function Count ( array ) ; var i ; begin
6412: LD_INT 0
6414: PPUSH
6415: PPUSH
// result := 0 ;
6416: LD_ADDR_VAR 0 2
6420: PUSH
6421: LD_INT 0
6423: ST_TO_ADDR
// for i in array do
6424: LD_ADDR_VAR 0 3
6428: PUSH
6429: LD_VAR 0 1
6433: PUSH
6434: FOR_IN
6435: IFFALSE 6459
// if i then
6437: LD_VAR 0 3
6441: IFFALSE 6457
// result := result + 1 ;
6443: LD_ADDR_VAR 0 2
6447: PUSH
6448: LD_VAR 0 2
6452: PUSH
6453: LD_INT 1
6455: PLUS
6456: ST_TO_ADDR
6457: GO 6434
6459: POP
6460: POP
// end ;
6461: LD_VAR 0 2
6465: RET
// export function IsEmpty ( building ) ; begin
6466: LD_INT 0
6468: PPUSH
// if not building then
6469: LD_VAR 0 1
6473: NOT
6474: IFFALSE 6478
// exit ;
6476: GO 6521
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6478: LD_ADDR_VAR 0 2
6482: PUSH
6483: LD_VAR 0 1
6487: PUSH
6488: LD_INT 22
6490: PUSH
6491: LD_VAR 0 1
6495: PPUSH
6496: CALL_OW 255
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: LD_INT 58
6507: PUSH
6508: EMPTY
6509: LIST
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PPUSH
6515: CALL_OW 69
6519: IN
6520: ST_TO_ADDR
// end ;
6521: LD_VAR 0 2
6525: RET
// export function IsNotFull ( building ) ; begin
6526: LD_INT 0
6528: PPUSH
// if not building then
6529: LD_VAR 0 1
6533: NOT
6534: IFFALSE 6538
// exit ;
6536: GO 6557
// result := UnitsInside ( building ) < 6 ;
6538: LD_ADDR_VAR 0 2
6542: PUSH
6543: LD_VAR 0 1
6547: PPUSH
6548: CALL_OW 313
6552: PUSH
6553: LD_INT 6
6555: LESS
6556: ST_TO_ADDR
// end ;
6557: LD_VAR 0 2
6561: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6562: LD_INT 0
6564: PPUSH
6565: PPUSH
6566: PPUSH
6567: PPUSH
// tmp := [ ] ;
6568: LD_ADDR_VAR 0 3
6572: PUSH
6573: EMPTY
6574: ST_TO_ADDR
// list := [ ] ;
6575: LD_ADDR_VAR 0 5
6579: PUSH
6580: EMPTY
6581: ST_TO_ADDR
// for i = 16 to 25 do
6582: LD_ADDR_VAR 0 4
6586: PUSH
6587: DOUBLE
6588: LD_INT 16
6590: DEC
6591: ST_TO_ADDR
6592: LD_INT 25
6594: PUSH
6595: FOR_TO
6596: IFFALSE 6669
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: LD_VAR 0 3
6607: PUSH
6608: LD_INT 22
6610: PUSH
6611: LD_VAR 0 1
6615: PPUSH
6616: CALL_OW 255
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 91
6627: PUSH
6628: LD_VAR 0 1
6632: PUSH
6633: LD_INT 6
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 30
6643: PUSH
6644: LD_VAR 0 4
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: EMPTY
6659: LIST
6660: PPUSH
6661: CALL_OW 69
6665: ADD
6666: ST_TO_ADDR
6667: GO 6595
6669: POP
6670: POP
// for i = 1 to tmp do
6671: LD_ADDR_VAR 0 4
6675: PUSH
6676: DOUBLE
6677: LD_INT 1
6679: DEC
6680: ST_TO_ADDR
6681: LD_VAR 0 3
6685: PUSH
6686: FOR_TO
6687: IFFALSE 6775
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6689: LD_ADDR_VAR 0 5
6693: PUSH
6694: LD_VAR 0 5
6698: PUSH
6699: LD_VAR 0 3
6703: PUSH
6704: LD_VAR 0 4
6708: ARRAY
6709: PPUSH
6710: CALL_OW 266
6714: PUSH
6715: LD_VAR 0 3
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: PPUSH
6726: CALL_OW 250
6730: PUSH
6731: LD_VAR 0 3
6735: PUSH
6736: LD_VAR 0 4
6740: ARRAY
6741: PPUSH
6742: CALL_OW 251
6746: PUSH
6747: LD_VAR 0 3
6751: PUSH
6752: LD_VAR 0 4
6756: ARRAY
6757: PPUSH
6758: CALL_OW 254
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: ADD
6772: ST_TO_ADDR
6773: GO 6686
6775: POP
6776: POP
// result := list ;
6777: LD_ADDR_VAR 0 2
6781: PUSH
6782: LD_VAR 0 5
6786: ST_TO_ADDR
// end ;
6787: LD_VAR 0 2
6791: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6792: LD_INT 0
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
6799: PPUSH
6800: PPUSH
// if not factory then
6801: LD_VAR 0 1
6805: NOT
6806: IFFALSE 6810
// exit ;
6808: GO 7403
// if control = control_apeman then
6810: LD_VAR 0 4
6814: PUSH
6815: LD_INT 5
6817: EQUAL
6818: IFFALSE 6927
// begin tmp := UnitsInside ( factory ) ;
6820: LD_ADDR_VAR 0 8
6824: PUSH
6825: LD_VAR 0 1
6829: PPUSH
6830: CALL_OW 313
6834: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6835: LD_VAR 0 8
6839: PPUSH
6840: LD_INT 25
6842: PUSH
6843: LD_INT 12
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PPUSH
6850: CALL_OW 72
6854: NOT
6855: IFFALSE 6865
// control := control_manual ;
6857: LD_ADDR_VAR 0 4
6861: PUSH
6862: LD_INT 1
6864: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6865: LD_ADDR_VAR 0 8
6869: PUSH
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL 6562 0 1
6879: ST_TO_ADDR
// if tmp then
6880: LD_VAR 0 8
6884: IFFALSE 6927
// begin for i in tmp do
6886: LD_ADDR_VAR 0 7
6890: PUSH
6891: LD_VAR 0 8
6895: PUSH
6896: FOR_IN
6897: IFFALSE 6925
// if i [ 1 ] = b_ext_radio then
6899: LD_VAR 0 7
6903: PUSH
6904: LD_INT 1
6906: ARRAY
6907: PUSH
6908: LD_INT 22
6910: EQUAL
6911: IFFALSE 6923
// begin control := control_remote ;
6913: LD_ADDR_VAR 0 4
6917: PUSH
6918: LD_INT 2
6920: ST_TO_ADDR
// break ;
6921: GO 6925
// end ;
6923: GO 6896
6925: POP
6926: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6927: LD_VAR 0 1
6931: PPUSH
6932: LD_VAR 0 2
6936: PPUSH
6937: LD_VAR 0 3
6941: PPUSH
6942: LD_VAR 0 4
6946: PPUSH
6947: LD_VAR 0 5
6951: PPUSH
6952: CALL_OW 448
6956: IFFALSE 6991
// begin result := [ chassis , engine , control , weapon ] ;
6958: LD_ADDR_VAR 0 6
6962: PUSH
6963: LD_VAR 0 2
6967: PUSH
6968: LD_VAR 0 3
6972: PUSH
6973: LD_VAR 0 4
6977: PUSH
6978: LD_VAR 0 5
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: ST_TO_ADDR
// exit ;
6989: GO 7403
// end ; _chassis := AvailableChassisList ( factory ) ;
6991: LD_ADDR_VAR 0 9
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 475
7005: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7006: LD_ADDR_VAR 0 11
7010: PUSH
7011: LD_VAR 0 1
7015: PPUSH
7016: CALL_OW 476
7020: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7021: LD_ADDR_VAR 0 12
7025: PUSH
7026: LD_VAR 0 1
7030: PPUSH
7031: CALL_OW 477
7035: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7036: LD_ADDR_VAR 0 10
7040: PUSH
7041: LD_VAR 0 1
7045: PPUSH
7046: CALL_OW 478
7050: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7051: LD_VAR 0 9
7055: NOT
7056: PUSH
7057: LD_VAR 0 11
7061: NOT
7062: OR
7063: PUSH
7064: LD_VAR 0 12
7068: NOT
7069: OR
7070: PUSH
7071: LD_VAR 0 10
7075: NOT
7076: OR
7077: IFFALSE 7112
// begin result := [ chassis , engine , control , weapon ] ;
7079: LD_ADDR_VAR 0 6
7083: PUSH
7084: LD_VAR 0 2
7088: PUSH
7089: LD_VAR 0 3
7093: PUSH
7094: LD_VAR 0 4
7098: PUSH
7099: LD_VAR 0 5
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: ST_TO_ADDR
// exit ;
7110: GO 7403
// end ; if not chassis in _chassis then
7112: LD_VAR 0 2
7116: PUSH
7117: LD_VAR 0 9
7121: IN
7122: NOT
7123: IFFALSE 7149
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7125: LD_ADDR_VAR 0 2
7129: PUSH
7130: LD_VAR 0 9
7134: PUSH
7135: LD_INT 1
7137: PPUSH
7138: LD_VAR 0 9
7142: PPUSH
7143: CALL_OW 12
7147: ARRAY
7148: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7149: LD_VAR 0 2
7153: PPUSH
7154: LD_VAR 0 3
7158: PPUSH
7159: CALL 7408 0 2
7163: NOT
7164: IFFALSE 7223
// repeat engine := _engine [ 1 ] ;
7166: LD_ADDR_VAR 0 3
7170: PUSH
7171: LD_VAR 0 11
7175: PUSH
7176: LD_INT 1
7178: ARRAY
7179: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7180: LD_ADDR_VAR 0 11
7184: PUSH
7185: LD_VAR 0 11
7189: PPUSH
7190: LD_INT 1
7192: PPUSH
7193: CALL_OW 3
7197: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7198: LD_VAR 0 2
7202: PPUSH
7203: LD_VAR 0 3
7207: PPUSH
7208: CALL 7408 0 2
7212: PUSH
7213: LD_VAR 0 11
7217: PUSH
7218: EMPTY
7219: EQUAL
7220: OR
7221: IFFALSE 7166
// if not control in _control then
7223: LD_VAR 0 4
7227: PUSH
7228: LD_VAR 0 12
7232: IN
7233: NOT
7234: IFFALSE 7260
// control := _control [ rand ( 1 , _control ) ] ;
7236: LD_ADDR_VAR 0 4
7240: PUSH
7241: LD_VAR 0 12
7245: PUSH
7246: LD_INT 1
7248: PPUSH
7249: LD_VAR 0 12
7253: PPUSH
7254: CALL_OW 12
7258: ARRAY
7259: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7260: LD_VAR 0 2
7264: PPUSH
7265: LD_VAR 0 5
7269: PPUSH
7270: CALL 7628 0 2
7274: NOT
7275: IFFALSE 7334
// repeat weapon := _weapon [ 1 ] ;
7277: LD_ADDR_VAR 0 5
7281: PUSH
7282: LD_VAR 0 10
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7291: LD_ADDR_VAR 0 10
7295: PUSH
7296: LD_VAR 0 10
7300: PPUSH
7301: LD_INT 1
7303: PPUSH
7304: CALL_OW 3
7308: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7309: LD_VAR 0 2
7313: PPUSH
7314: LD_VAR 0 5
7318: PPUSH
7319: CALL 7628 0 2
7323: PUSH
7324: LD_VAR 0 10
7328: PUSH
7329: EMPTY
7330: EQUAL
7331: OR
7332: IFFALSE 7277
// result := [ ] ;
7334: LD_ADDR_VAR 0 6
7338: PUSH
7339: EMPTY
7340: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7341: LD_VAR 0 1
7345: PPUSH
7346: LD_VAR 0 2
7350: PPUSH
7351: LD_VAR 0 3
7355: PPUSH
7356: LD_VAR 0 4
7360: PPUSH
7361: LD_VAR 0 5
7365: PPUSH
7366: CALL_OW 448
7370: IFFALSE 7403
// result := [ chassis , engine , control , weapon ] ;
7372: LD_ADDR_VAR 0 6
7376: PUSH
7377: LD_VAR 0 2
7381: PUSH
7382: LD_VAR 0 3
7386: PUSH
7387: LD_VAR 0 4
7391: PUSH
7392: LD_VAR 0 5
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: ST_TO_ADDR
// end ;
7403: LD_VAR 0 6
7407: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7408: LD_INT 0
7410: PPUSH
// if not chassis or not engine then
7411: LD_VAR 0 1
7415: NOT
7416: PUSH
7417: LD_VAR 0 2
7421: NOT
7422: OR
7423: IFFALSE 7427
// exit ;
7425: GO 7623
// case engine of engine_solar :
7427: LD_VAR 0 2
7431: PUSH
7432: LD_INT 2
7434: DOUBLE
7435: EQUAL
7436: IFTRUE 7440
7438: GO 7478
7440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7441: LD_ADDR_VAR 0 3
7445: PUSH
7446: LD_INT 11
7448: PUSH
7449: LD_INT 12
7451: PUSH
7452: LD_INT 13
7454: PUSH
7455: LD_INT 14
7457: PUSH
7458: LD_INT 1
7460: PUSH
7461: LD_INT 2
7463: PUSH
7464: LD_INT 3
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: ST_TO_ADDR
7476: GO 7607
7478: LD_INT 1
7480: DOUBLE
7481: EQUAL
7482: IFTRUE 7486
7484: GO 7548
7486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7487: LD_ADDR_VAR 0 3
7491: PUSH
7492: LD_INT 11
7494: PUSH
7495: LD_INT 12
7497: PUSH
7498: LD_INT 13
7500: PUSH
7501: LD_INT 14
7503: PUSH
7504: LD_INT 1
7506: PUSH
7507: LD_INT 2
7509: PUSH
7510: LD_INT 3
7512: PUSH
7513: LD_INT 4
7515: PUSH
7516: LD_INT 5
7518: PUSH
7519: LD_INT 21
7521: PUSH
7522: LD_INT 23
7524: PUSH
7525: LD_INT 22
7527: PUSH
7528: LD_INT 24
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: ST_TO_ADDR
7546: GO 7607
7548: LD_INT 3
7550: DOUBLE
7551: EQUAL
7552: IFTRUE 7556
7554: GO 7606
7556: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7557: LD_ADDR_VAR 0 3
7561: PUSH
7562: LD_INT 13
7564: PUSH
7565: LD_INT 14
7567: PUSH
7568: LD_INT 2
7570: PUSH
7571: LD_INT 3
7573: PUSH
7574: LD_INT 4
7576: PUSH
7577: LD_INT 5
7579: PUSH
7580: LD_INT 21
7582: PUSH
7583: LD_INT 22
7585: PUSH
7586: LD_INT 23
7588: PUSH
7589: LD_INT 24
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: ST_TO_ADDR
7604: GO 7607
7606: POP
// result := ( chassis in result ) ;
7607: LD_ADDR_VAR 0 3
7611: PUSH
7612: LD_VAR 0 1
7616: PUSH
7617: LD_VAR 0 3
7621: IN
7622: ST_TO_ADDR
// end ;
7623: LD_VAR 0 3
7627: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7628: LD_INT 0
7630: PPUSH
// if not chassis or not weapon then
7631: LD_VAR 0 1
7635: NOT
7636: PUSH
7637: LD_VAR 0 2
7641: NOT
7642: OR
7643: IFFALSE 7647
// exit ;
7645: GO 8673
// case weapon of us_machine_gun :
7647: LD_VAR 0 2
7651: PUSH
7652: LD_INT 2
7654: DOUBLE
7655: EQUAL
7656: IFTRUE 7660
7658: GO 7690
7660: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7661: LD_ADDR_VAR 0 3
7665: PUSH
7666: LD_INT 1
7668: PUSH
7669: LD_INT 2
7671: PUSH
7672: LD_INT 3
7674: PUSH
7675: LD_INT 4
7677: PUSH
7678: LD_INT 5
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: ST_TO_ADDR
7688: GO 8657
7690: LD_INT 3
7692: DOUBLE
7693: EQUAL
7694: IFTRUE 7698
7696: GO 7728
7698: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7699: LD_ADDR_VAR 0 3
7703: PUSH
7704: LD_INT 1
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: LD_INT 3
7712: PUSH
7713: LD_INT 4
7715: PUSH
7716: LD_INT 5
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: ST_TO_ADDR
7726: GO 8657
7728: LD_INT 11
7730: DOUBLE
7731: EQUAL
7732: IFTRUE 7736
7734: GO 7766
7736: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7737: LD_ADDR_VAR 0 3
7741: PUSH
7742: LD_INT 1
7744: PUSH
7745: LD_INT 2
7747: PUSH
7748: LD_INT 3
7750: PUSH
7751: LD_INT 4
7753: PUSH
7754: LD_INT 5
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: ST_TO_ADDR
7764: GO 8657
7766: LD_INT 4
7768: DOUBLE
7769: EQUAL
7770: IFTRUE 7774
7772: GO 7800
7774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7775: LD_ADDR_VAR 0 3
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 4
7788: PUSH
7789: LD_INT 5
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: ST_TO_ADDR
7798: GO 8657
7800: LD_INT 5
7802: DOUBLE
7803: EQUAL
7804: IFTRUE 7808
7806: GO 7834
7808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7809: LD_ADDR_VAR 0 3
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: LD_INT 4
7822: PUSH
7823: LD_INT 5
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: ST_TO_ADDR
7832: GO 8657
7834: LD_INT 9
7836: DOUBLE
7837: EQUAL
7838: IFTRUE 7842
7840: GO 7868
7842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7843: LD_ADDR_VAR 0 3
7847: PUSH
7848: LD_INT 2
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: LD_INT 4
7856: PUSH
7857: LD_INT 5
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: ST_TO_ADDR
7866: GO 8657
7868: LD_INT 7
7870: DOUBLE
7871: EQUAL
7872: IFTRUE 7876
7874: GO 7902
7876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7877: LD_ADDR_VAR 0 3
7881: PUSH
7882: LD_INT 2
7884: PUSH
7885: LD_INT 3
7887: PUSH
7888: LD_INT 4
7890: PUSH
7891: LD_INT 5
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: ST_TO_ADDR
7900: GO 8657
7902: LD_INT 12
7904: DOUBLE
7905: EQUAL
7906: IFTRUE 7910
7908: GO 7936
7910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7911: LD_ADDR_VAR 0 3
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: LD_INT 4
7924: PUSH
7925: LD_INT 5
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: ST_TO_ADDR
7934: GO 8657
7936: LD_INT 13
7938: DOUBLE
7939: EQUAL
7940: IFTRUE 7944
7942: GO 7970
7944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7945: LD_ADDR_VAR 0 3
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: LD_INT 3
7955: PUSH
7956: LD_INT 4
7958: PUSH
7959: LD_INT 5
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: ST_TO_ADDR
7968: GO 8657
7970: LD_INT 14
7972: DOUBLE
7973: EQUAL
7974: IFTRUE 7978
7976: GO 7996
7978: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7979: LD_ADDR_VAR 0 3
7983: PUSH
7984: LD_INT 4
7986: PUSH
7987: LD_INT 5
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: ST_TO_ADDR
7994: GO 8657
7996: LD_INT 6
7998: DOUBLE
7999: EQUAL
8000: IFTRUE 8004
8002: GO 8022
8004: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8005: LD_ADDR_VAR 0 3
8009: PUSH
8010: LD_INT 4
8012: PUSH
8013: LD_INT 5
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: ST_TO_ADDR
8020: GO 8657
8022: LD_INT 10
8024: DOUBLE
8025: EQUAL
8026: IFTRUE 8030
8028: GO 8048
8030: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8031: LD_ADDR_VAR 0 3
8035: PUSH
8036: LD_INT 4
8038: PUSH
8039: LD_INT 5
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: ST_TO_ADDR
8046: GO 8657
8048: LD_INT 22
8050: DOUBLE
8051: EQUAL
8052: IFTRUE 8056
8054: GO 8082
8056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8057: LD_ADDR_VAR 0 3
8061: PUSH
8062: LD_INT 11
8064: PUSH
8065: LD_INT 12
8067: PUSH
8068: LD_INT 13
8070: PUSH
8071: LD_INT 14
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: ST_TO_ADDR
8080: GO 8657
8082: LD_INT 23
8084: DOUBLE
8085: EQUAL
8086: IFTRUE 8090
8088: GO 8116
8090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8091: LD_ADDR_VAR 0 3
8095: PUSH
8096: LD_INT 11
8098: PUSH
8099: LD_INT 12
8101: PUSH
8102: LD_INT 13
8104: PUSH
8105: LD_INT 14
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: ST_TO_ADDR
8114: GO 8657
8116: LD_INT 24
8118: DOUBLE
8119: EQUAL
8120: IFTRUE 8124
8122: GO 8150
8124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8125: LD_ADDR_VAR 0 3
8129: PUSH
8130: LD_INT 11
8132: PUSH
8133: LD_INT 12
8135: PUSH
8136: LD_INT 13
8138: PUSH
8139: LD_INT 14
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: ST_TO_ADDR
8148: GO 8657
8150: LD_INT 30
8152: DOUBLE
8153: EQUAL
8154: IFTRUE 8158
8156: GO 8184
8158: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8159: LD_ADDR_VAR 0 3
8163: PUSH
8164: LD_INT 11
8166: PUSH
8167: LD_INT 12
8169: PUSH
8170: LD_INT 13
8172: PUSH
8173: LD_INT 14
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: ST_TO_ADDR
8182: GO 8657
8184: LD_INT 25
8186: DOUBLE
8187: EQUAL
8188: IFTRUE 8192
8190: GO 8210
8192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8193: LD_ADDR_VAR 0 3
8197: PUSH
8198: LD_INT 13
8200: PUSH
8201: LD_INT 14
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: ST_TO_ADDR
8208: GO 8657
8210: LD_INT 27
8212: DOUBLE
8213: EQUAL
8214: IFTRUE 8218
8216: GO 8236
8218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8219: LD_ADDR_VAR 0 3
8223: PUSH
8224: LD_INT 13
8226: PUSH
8227: LD_INT 14
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: ST_TO_ADDR
8234: GO 8657
8236: LD_INT 28
8238: DOUBLE
8239: EQUAL
8240: IFTRUE 8244
8242: GO 8262
8244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8245: LD_ADDR_VAR 0 3
8249: PUSH
8250: LD_INT 13
8252: PUSH
8253: LD_INT 14
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: ST_TO_ADDR
8260: GO 8657
8262: LD_INT 29
8264: DOUBLE
8265: EQUAL
8266: IFTRUE 8270
8268: GO 8288
8270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8271: LD_ADDR_VAR 0 3
8275: PUSH
8276: LD_INT 13
8278: PUSH
8279: LD_INT 14
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: ST_TO_ADDR
8286: GO 8657
8288: LD_INT 31
8290: DOUBLE
8291: EQUAL
8292: IFTRUE 8296
8294: GO 8314
8296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8297: LD_ADDR_VAR 0 3
8301: PUSH
8302: LD_INT 13
8304: PUSH
8305: LD_INT 14
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: ST_TO_ADDR
8312: GO 8657
8314: LD_INT 26
8316: DOUBLE
8317: EQUAL
8318: IFTRUE 8322
8320: GO 8340
8322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8323: LD_ADDR_VAR 0 3
8327: PUSH
8328: LD_INT 13
8330: PUSH
8331: LD_INT 14
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: ST_TO_ADDR
8338: GO 8657
8340: LD_INT 42
8342: DOUBLE
8343: EQUAL
8344: IFTRUE 8348
8346: GO 8374
8348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8349: LD_ADDR_VAR 0 3
8353: PUSH
8354: LD_INT 21
8356: PUSH
8357: LD_INT 22
8359: PUSH
8360: LD_INT 23
8362: PUSH
8363: LD_INT 24
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: ST_TO_ADDR
8372: GO 8657
8374: LD_INT 43
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8382
8380: GO 8408
8382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8383: LD_ADDR_VAR 0 3
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 22
8393: PUSH
8394: LD_INT 23
8396: PUSH
8397: LD_INT 24
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: ST_TO_ADDR
8406: GO 8657
8408: LD_INT 44
8410: DOUBLE
8411: EQUAL
8412: IFTRUE 8416
8414: GO 8442
8416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8417: LD_ADDR_VAR 0 3
8421: PUSH
8422: LD_INT 21
8424: PUSH
8425: LD_INT 22
8427: PUSH
8428: LD_INT 23
8430: PUSH
8431: LD_INT 24
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: ST_TO_ADDR
8440: GO 8657
8442: LD_INT 45
8444: DOUBLE
8445: EQUAL
8446: IFTRUE 8450
8448: GO 8476
8450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8451: LD_ADDR_VAR 0 3
8455: PUSH
8456: LD_INT 21
8458: PUSH
8459: LD_INT 22
8461: PUSH
8462: LD_INT 23
8464: PUSH
8465: LD_INT 24
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: ST_TO_ADDR
8474: GO 8657
8476: LD_INT 49
8478: DOUBLE
8479: EQUAL
8480: IFTRUE 8484
8482: GO 8510
8484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8485: LD_ADDR_VAR 0 3
8489: PUSH
8490: LD_INT 21
8492: PUSH
8493: LD_INT 22
8495: PUSH
8496: LD_INT 23
8498: PUSH
8499: LD_INT 24
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: ST_TO_ADDR
8508: GO 8657
8510: LD_INT 51
8512: DOUBLE
8513: EQUAL
8514: IFTRUE 8518
8516: GO 8544
8518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8519: LD_ADDR_VAR 0 3
8523: PUSH
8524: LD_INT 21
8526: PUSH
8527: LD_INT 22
8529: PUSH
8530: LD_INT 23
8532: PUSH
8533: LD_INT 24
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: ST_TO_ADDR
8542: GO 8657
8544: LD_INT 52
8546: DOUBLE
8547: EQUAL
8548: IFTRUE 8552
8550: GO 8578
8552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8553: LD_ADDR_VAR 0 3
8557: PUSH
8558: LD_INT 21
8560: PUSH
8561: LD_INT 22
8563: PUSH
8564: LD_INT 23
8566: PUSH
8567: LD_INT 24
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: ST_TO_ADDR
8576: GO 8657
8578: LD_INT 53
8580: DOUBLE
8581: EQUAL
8582: IFTRUE 8586
8584: GO 8604
8586: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8587: LD_ADDR_VAR 0 3
8591: PUSH
8592: LD_INT 23
8594: PUSH
8595: LD_INT 24
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: ST_TO_ADDR
8602: GO 8657
8604: LD_INT 46
8606: DOUBLE
8607: EQUAL
8608: IFTRUE 8612
8610: GO 8630
8612: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8613: LD_ADDR_VAR 0 3
8617: PUSH
8618: LD_INT 23
8620: PUSH
8621: LD_INT 24
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: ST_TO_ADDR
8628: GO 8657
8630: LD_INT 47
8632: DOUBLE
8633: EQUAL
8634: IFTRUE 8638
8636: GO 8656
8638: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8639: LD_ADDR_VAR 0 3
8643: PUSH
8644: LD_INT 23
8646: PUSH
8647: LD_INT 24
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: ST_TO_ADDR
8654: GO 8657
8656: POP
// result := ( chassis in result ) ;
8657: LD_ADDR_VAR 0 3
8661: PUSH
8662: LD_VAR 0 1
8666: PUSH
8667: LD_VAR 0 3
8671: IN
8672: ST_TO_ADDR
// end ;
8673: LD_VAR 0 3
8677: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8678: LD_INT 0
8680: PPUSH
8681: PPUSH
8682: PPUSH
8683: PPUSH
8684: PPUSH
8685: PPUSH
8686: PPUSH
// result := array ;
8687: LD_ADDR_VAR 0 5
8691: PUSH
8692: LD_VAR 0 1
8696: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8697: LD_VAR 0 1
8701: NOT
8702: PUSH
8703: LD_VAR 0 2
8707: NOT
8708: OR
8709: PUSH
8710: LD_VAR 0 3
8714: NOT
8715: OR
8716: PUSH
8717: LD_VAR 0 2
8721: PUSH
8722: LD_VAR 0 1
8726: GREATER
8727: OR
8728: PUSH
8729: LD_VAR 0 3
8733: PUSH
8734: LD_VAR 0 1
8738: GREATER
8739: OR
8740: IFFALSE 8744
// exit ;
8742: GO 9040
// if direction then
8744: LD_VAR 0 4
8748: IFFALSE 8812
// begin d := 1 ;
8750: LD_ADDR_VAR 0 9
8754: PUSH
8755: LD_INT 1
8757: ST_TO_ADDR
// if i_from > i_to then
8758: LD_VAR 0 2
8762: PUSH
8763: LD_VAR 0 3
8767: GREATER
8768: IFFALSE 8794
// length := ( array - i_from ) + i_to else
8770: LD_ADDR_VAR 0 11
8774: PUSH
8775: LD_VAR 0 1
8779: PUSH
8780: LD_VAR 0 2
8784: MINUS
8785: PUSH
8786: LD_VAR 0 3
8790: PLUS
8791: ST_TO_ADDR
8792: GO 8810
// length := i_to - i_from ;
8794: LD_ADDR_VAR 0 11
8798: PUSH
8799: LD_VAR 0 3
8803: PUSH
8804: LD_VAR 0 2
8808: MINUS
8809: ST_TO_ADDR
// end else
8810: GO 8873
// begin d := - 1 ;
8812: LD_ADDR_VAR 0 9
8816: PUSH
8817: LD_INT 1
8819: NEG
8820: ST_TO_ADDR
// if i_from > i_to then
8821: LD_VAR 0 2
8825: PUSH
8826: LD_VAR 0 3
8830: GREATER
8831: IFFALSE 8851
// length := i_from - i_to else
8833: LD_ADDR_VAR 0 11
8837: PUSH
8838: LD_VAR 0 2
8842: PUSH
8843: LD_VAR 0 3
8847: MINUS
8848: ST_TO_ADDR
8849: GO 8873
// length := ( array - i_to ) + i_from ;
8851: LD_ADDR_VAR 0 11
8855: PUSH
8856: LD_VAR 0 1
8860: PUSH
8861: LD_VAR 0 3
8865: MINUS
8866: PUSH
8867: LD_VAR 0 2
8871: PLUS
8872: ST_TO_ADDR
// end ; if not length then
8873: LD_VAR 0 11
8877: NOT
8878: IFFALSE 8882
// exit ;
8880: GO 9040
// tmp := array ;
8882: LD_ADDR_VAR 0 10
8886: PUSH
8887: LD_VAR 0 1
8891: ST_TO_ADDR
// for i = 1 to length do
8892: LD_ADDR_VAR 0 6
8896: PUSH
8897: DOUBLE
8898: LD_INT 1
8900: DEC
8901: ST_TO_ADDR
8902: LD_VAR 0 11
8906: PUSH
8907: FOR_TO
8908: IFFALSE 9028
// begin for j = 1 to array do
8910: LD_ADDR_VAR 0 7
8914: PUSH
8915: DOUBLE
8916: LD_INT 1
8918: DEC
8919: ST_TO_ADDR
8920: LD_VAR 0 1
8924: PUSH
8925: FOR_TO
8926: IFFALSE 9014
// begin k := j + d ;
8928: LD_ADDR_VAR 0 8
8932: PUSH
8933: LD_VAR 0 7
8937: PUSH
8938: LD_VAR 0 9
8942: PLUS
8943: ST_TO_ADDR
// if k > array then
8944: LD_VAR 0 8
8948: PUSH
8949: LD_VAR 0 1
8953: GREATER
8954: IFFALSE 8964
// k := 1 ;
8956: LD_ADDR_VAR 0 8
8960: PUSH
8961: LD_INT 1
8963: ST_TO_ADDR
// if not k then
8964: LD_VAR 0 8
8968: NOT
8969: IFFALSE 8981
// k := array ;
8971: LD_ADDR_VAR 0 8
8975: PUSH
8976: LD_VAR 0 1
8980: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8981: LD_ADDR_VAR 0 10
8985: PUSH
8986: LD_VAR 0 10
8990: PPUSH
8991: LD_VAR 0 8
8995: PPUSH
8996: LD_VAR 0 1
9000: PUSH
9001: LD_VAR 0 7
9005: ARRAY
9006: PPUSH
9007: CALL_OW 1
9011: ST_TO_ADDR
// end ;
9012: GO 8925
9014: POP
9015: POP
// array := tmp ;
9016: LD_ADDR_VAR 0 1
9020: PUSH
9021: LD_VAR 0 10
9025: ST_TO_ADDR
// end ;
9026: GO 8907
9028: POP
9029: POP
// result := array ;
9030: LD_ADDR_VAR 0 5
9034: PUSH
9035: LD_VAR 0 1
9039: ST_TO_ADDR
// end ;
9040: LD_VAR 0 5
9044: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9045: LD_INT 0
9047: PPUSH
9048: PPUSH
// result := 0 ;
9049: LD_ADDR_VAR 0 3
9053: PUSH
9054: LD_INT 0
9056: ST_TO_ADDR
// if not array or not value in array then
9057: LD_VAR 0 1
9061: NOT
9062: PUSH
9063: LD_VAR 0 2
9067: PUSH
9068: LD_VAR 0 1
9072: IN
9073: NOT
9074: OR
9075: IFFALSE 9079
// exit ;
9077: GO 9133
// for i = 1 to array do
9079: LD_ADDR_VAR 0 4
9083: PUSH
9084: DOUBLE
9085: LD_INT 1
9087: DEC
9088: ST_TO_ADDR
9089: LD_VAR 0 1
9093: PUSH
9094: FOR_TO
9095: IFFALSE 9131
// if value = array [ i ] then
9097: LD_VAR 0 2
9101: PUSH
9102: LD_VAR 0 1
9106: PUSH
9107: LD_VAR 0 4
9111: ARRAY
9112: EQUAL
9113: IFFALSE 9129
// begin result := i ;
9115: LD_ADDR_VAR 0 3
9119: PUSH
9120: LD_VAR 0 4
9124: ST_TO_ADDR
// exit ;
9125: POP
9126: POP
9127: GO 9133
// end ;
9129: GO 9094
9131: POP
9132: POP
// end ;
9133: LD_VAR 0 3
9137: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9138: LD_INT 0
9140: PPUSH
// vc_chassis := chassis ;
9141: LD_ADDR_OWVAR 37
9145: PUSH
9146: LD_VAR 0 1
9150: ST_TO_ADDR
// vc_engine := engine ;
9151: LD_ADDR_OWVAR 39
9155: PUSH
9156: LD_VAR 0 2
9160: ST_TO_ADDR
// vc_control := control ;
9161: LD_ADDR_OWVAR 38
9165: PUSH
9166: LD_VAR 0 3
9170: ST_TO_ADDR
// vc_weapon := weapon ;
9171: LD_ADDR_OWVAR 40
9175: PUSH
9176: LD_VAR 0 4
9180: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9181: LD_ADDR_OWVAR 41
9185: PUSH
9186: LD_VAR 0 5
9190: ST_TO_ADDR
// end ;
9191: LD_VAR 0 6
9195: RET
// export function WantPlant ( unit ) ; var task ; begin
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
// result := false ;
9200: LD_ADDR_VAR 0 2
9204: PUSH
9205: LD_INT 0
9207: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9208: LD_ADDR_VAR 0 3
9212: PUSH
9213: LD_VAR 0 1
9217: PPUSH
9218: CALL_OW 437
9222: ST_TO_ADDR
// if task then
9223: LD_VAR 0 3
9227: IFFALSE 9255
// if task [ 1 ] [ 1 ] = p then
9229: LD_VAR 0 3
9233: PUSH
9234: LD_INT 1
9236: ARRAY
9237: PUSH
9238: LD_INT 1
9240: ARRAY
9241: PUSH
9242: LD_STRING p
9244: EQUAL
9245: IFFALSE 9255
// result := true ;
9247: LD_ADDR_VAR 0 2
9251: PUSH
9252: LD_INT 1
9254: ST_TO_ADDR
// end ;
9255: LD_VAR 0 2
9259: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9260: LD_INT 0
9262: PPUSH
9263: PPUSH
9264: PPUSH
9265: PPUSH
// if pos < 1 then
9266: LD_VAR 0 2
9270: PUSH
9271: LD_INT 1
9273: LESS
9274: IFFALSE 9278
// exit ;
9276: GO 9581
// if pos = 1 then
9278: LD_VAR 0 2
9282: PUSH
9283: LD_INT 1
9285: EQUAL
9286: IFFALSE 9319
// result := Replace ( arr , pos [ 1 ] , value ) else
9288: LD_ADDR_VAR 0 4
9292: PUSH
9293: LD_VAR 0 1
9297: PPUSH
9298: LD_VAR 0 2
9302: PUSH
9303: LD_INT 1
9305: ARRAY
9306: PPUSH
9307: LD_VAR 0 3
9311: PPUSH
9312: CALL_OW 1
9316: ST_TO_ADDR
9317: GO 9581
// begin tmp := arr ;
9319: LD_ADDR_VAR 0 6
9323: PUSH
9324: LD_VAR 0 1
9328: ST_TO_ADDR
// s_arr := [ tmp ] ;
9329: LD_ADDR_VAR 0 7
9333: PUSH
9334: LD_VAR 0 6
9338: PUSH
9339: EMPTY
9340: LIST
9341: ST_TO_ADDR
// for i = 1 to pos - 1 do
9342: LD_ADDR_VAR 0 5
9346: PUSH
9347: DOUBLE
9348: LD_INT 1
9350: DEC
9351: ST_TO_ADDR
9352: LD_VAR 0 2
9356: PUSH
9357: LD_INT 1
9359: MINUS
9360: PUSH
9361: FOR_TO
9362: IFFALSE 9407
// begin tmp := tmp [ pos [ i ] ] ;
9364: LD_ADDR_VAR 0 6
9368: PUSH
9369: LD_VAR 0 6
9373: PUSH
9374: LD_VAR 0 2
9378: PUSH
9379: LD_VAR 0 5
9383: ARRAY
9384: ARRAY
9385: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9386: LD_ADDR_VAR 0 7
9390: PUSH
9391: LD_VAR 0 7
9395: PUSH
9396: LD_VAR 0 6
9400: PUSH
9401: EMPTY
9402: LIST
9403: ADD
9404: ST_TO_ADDR
// end ;
9405: GO 9361
9407: POP
9408: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9409: LD_ADDR_VAR 0 6
9413: PUSH
9414: LD_VAR 0 6
9418: PPUSH
9419: LD_VAR 0 2
9423: PUSH
9424: LD_VAR 0 2
9428: ARRAY
9429: PPUSH
9430: LD_VAR 0 3
9434: PPUSH
9435: CALL_OW 1
9439: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9440: LD_ADDR_VAR 0 7
9444: PUSH
9445: LD_VAR 0 7
9449: PPUSH
9450: LD_VAR 0 7
9454: PPUSH
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 1
9464: ST_TO_ADDR
// for i = s_arr downto 2 do
9465: LD_ADDR_VAR 0 5
9469: PUSH
9470: DOUBLE
9471: LD_VAR 0 7
9475: INC
9476: ST_TO_ADDR
9477: LD_INT 2
9479: PUSH
9480: FOR_DOWNTO
9481: IFFALSE 9565
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9483: LD_ADDR_VAR 0 6
9487: PUSH
9488: LD_VAR 0 7
9492: PUSH
9493: LD_VAR 0 5
9497: PUSH
9498: LD_INT 1
9500: MINUS
9501: ARRAY
9502: PPUSH
9503: LD_VAR 0 2
9507: PUSH
9508: LD_VAR 0 5
9512: PUSH
9513: LD_INT 1
9515: MINUS
9516: ARRAY
9517: PPUSH
9518: LD_VAR 0 7
9522: PUSH
9523: LD_VAR 0 5
9527: ARRAY
9528: PPUSH
9529: CALL_OW 1
9533: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9534: LD_ADDR_VAR 0 7
9538: PUSH
9539: LD_VAR 0 7
9543: PPUSH
9544: LD_VAR 0 5
9548: PUSH
9549: LD_INT 1
9551: MINUS
9552: PPUSH
9553: LD_VAR 0 6
9557: PPUSH
9558: CALL_OW 1
9562: ST_TO_ADDR
// end ;
9563: GO 9480
9565: POP
9566: POP
// result := s_arr [ 1 ] ;
9567: LD_ADDR_VAR 0 4
9571: PUSH
9572: LD_VAR 0 7
9576: PUSH
9577: LD_INT 1
9579: ARRAY
9580: ST_TO_ADDR
// end ; end ;
9581: LD_VAR 0 4
9585: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9586: LD_INT 0
9588: PPUSH
9589: PPUSH
// if not list then
9590: LD_VAR 0 1
9594: NOT
9595: IFFALSE 9599
// exit ;
9597: GO 9690
// i := list [ pos1 ] ;
9599: LD_ADDR_VAR 0 5
9603: PUSH
9604: LD_VAR 0 1
9608: PUSH
9609: LD_VAR 0 2
9613: ARRAY
9614: ST_TO_ADDR
// if not i then
9615: LD_VAR 0 5
9619: NOT
9620: IFFALSE 9624
// exit ;
9622: GO 9690
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9624: LD_ADDR_VAR 0 1
9628: PUSH
9629: LD_VAR 0 1
9633: PPUSH
9634: LD_VAR 0 2
9638: PPUSH
9639: LD_VAR 0 1
9643: PUSH
9644: LD_VAR 0 3
9648: ARRAY
9649: PPUSH
9650: CALL_OW 1
9654: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9655: LD_ADDR_VAR 0 1
9659: PUSH
9660: LD_VAR 0 1
9664: PPUSH
9665: LD_VAR 0 3
9669: PPUSH
9670: LD_VAR 0 5
9674: PPUSH
9675: CALL_OW 1
9679: ST_TO_ADDR
// result := list ;
9680: LD_ADDR_VAR 0 4
9684: PUSH
9685: LD_VAR 0 1
9689: ST_TO_ADDR
// end ;
9690: LD_VAR 0 4
9694: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9695: LD_INT 0
9697: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9698: LD_ADDR_VAR 0 5
9702: PUSH
9703: LD_VAR 0 1
9707: PPUSH
9708: CALL_OW 250
9712: PPUSH
9713: LD_VAR 0 1
9717: PPUSH
9718: CALL_OW 251
9722: PPUSH
9723: LD_VAR 0 2
9727: PPUSH
9728: LD_VAR 0 3
9732: PPUSH
9733: LD_VAR 0 4
9737: PPUSH
9738: CALL 9748 0 5
9742: ST_TO_ADDR
// end ;
9743: LD_VAR 0 5
9747: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9748: LD_INT 0
9750: PPUSH
9751: PPUSH
9752: PPUSH
9753: PPUSH
// if not list then
9754: LD_VAR 0 3
9758: NOT
9759: IFFALSE 9763
// exit ;
9761: GO 10151
// result := [ ] ;
9763: LD_ADDR_VAR 0 6
9767: PUSH
9768: EMPTY
9769: ST_TO_ADDR
// for i in list do
9770: LD_ADDR_VAR 0 7
9774: PUSH
9775: LD_VAR 0 3
9779: PUSH
9780: FOR_IN
9781: IFFALSE 9983
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9783: LD_ADDR_VAR 0 9
9787: PUSH
9788: LD_VAR 0 7
9792: PPUSH
9793: LD_VAR 0 1
9797: PPUSH
9798: LD_VAR 0 2
9802: PPUSH
9803: CALL_OW 297
9807: ST_TO_ADDR
// if not result then
9808: LD_VAR 0 6
9812: NOT
9813: IFFALSE 9839
// result := [ [ i , tmp ] ] else
9815: LD_ADDR_VAR 0 6
9819: PUSH
9820: LD_VAR 0 7
9824: PUSH
9825: LD_VAR 0 9
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: ST_TO_ADDR
9837: GO 9981
// begin if result [ result ] [ 2 ] < tmp then
9839: LD_VAR 0 6
9843: PUSH
9844: LD_VAR 0 6
9848: ARRAY
9849: PUSH
9850: LD_INT 2
9852: ARRAY
9853: PUSH
9854: LD_VAR 0 9
9858: LESS
9859: IFFALSE 9901
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9861: LD_ADDR_VAR 0 6
9865: PUSH
9866: LD_VAR 0 6
9870: PPUSH
9871: LD_VAR 0 6
9875: PUSH
9876: LD_INT 1
9878: PLUS
9879: PPUSH
9880: LD_VAR 0 7
9884: PUSH
9885: LD_VAR 0 9
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 2
9898: ST_TO_ADDR
9899: GO 9981
// for j = 1 to result do
9901: LD_ADDR_VAR 0 8
9905: PUSH
9906: DOUBLE
9907: LD_INT 1
9909: DEC
9910: ST_TO_ADDR
9911: LD_VAR 0 6
9915: PUSH
9916: FOR_TO
9917: IFFALSE 9979
// begin if tmp < result [ j ] [ 2 ] then
9919: LD_VAR 0 9
9923: PUSH
9924: LD_VAR 0 6
9928: PUSH
9929: LD_VAR 0 8
9933: ARRAY
9934: PUSH
9935: LD_INT 2
9937: ARRAY
9938: LESS
9939: IFFALSE 9977
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9941: LD_ADDR_VAR 0 6
9945: PUSH
9946: LD_VAR 0 6
9950: PPUSH
9951: LD_VAR 0 8
9955: PPUSH
9956: LD_VAR 0 7
9960: PUSH
9961: LD_VAR 0 9
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PPUSH
9970: CALL_OW 2
9974: ST_TO_ADDR
// break ;
9975: GO 9979
// end ; end ;
9977: GO 9916
9979: POP
9980: POP
// end ; end ;
9981: GO 9780
9983: POP
9984: POP
// if result and not asc then
9985: LD_VAR 0 6
9989: PUSH
9990: LD_VAR 0 4
9994: NOT
9995: AND
9996: IFFALSE 10071
// begin tmp := result ;
9998: LD_ADDR_VAR 0 9
10002: PUSH
10003: LD_VAR 0 6
10007: ST_TO_ADDR
// for i = tmp downto 1 do
10008: LD_ADDR_VAR 0 7
10012: PUSH
10013: DOUBLE
10014: LD_VAR 0 9
10018: INC
10019: ST_TO_ADDR
10020: LD_INT 1
10022: PUSH
10023: FOR_DOWNTO
10024: IFFALSE 10069
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10026: LD_ADDR_VAR 0 6
10030: PUSH
10031: LD_VAR 0 6
10035: PPUSH
10036: LD_VAR 0 9
10040: PUSH
10041: LD_VAR 0 7
10045: MINUS
10046: PUSH
10047: LD_INT 1
10049: PLUS
10050: PPUSH
10051: LD_VAR 0 9
10055: PUSH
10056: LD_VAR 0 7
10060: ARRAY
10061: PPUSH
10062: CALL_OW 1
10066: ST_TO_ADDR
10067: GO 10023
10069: POP
10070: POP
// end ; tmp := [ ] ;
10071: LD_ADDR_VAR 0 9
10075: PUSH
10076: EMPTY
10077: ST_TO_ADDR
// if mode then
10078: LD_VAR 0 5
10082: IFFALSE 10151
// begin for i = 1 to result do
10084: LD_ADDR_VAR 0 7
10088: PUSH
10089: DOUBLE
10090: LD_INT 1
10092: DEC
10093: ST_TO_ADDR
10094: LD_VAR 0 6
10098: PUSH
10099: FOR_TO
10100: IFFALSE 10139
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10102: LD_ADDR_VAR 0 9
10106: PUSH
10107: LD_VAR 0 9
10111: PPUSH
10112: LD_VAR 0 7
10116: PPUSH
10117: LD_VAR 0 6
10121: PUSH
10122: LD_VAR 0 7
10126: ARRAY
10127: PUSH
10128: LD_INT 1
10130: ARRAY
10131: PPUSH
10132: CALL_OW 1
10136: ST_TO_ADDR
10137: GO 10099
10139: POP
10140: POP
// result := tmp ;
10141: LD_ADDR_VAR 0 6
10145: PUSH
10146: LD_VAR 0 9
10150: ST_TO_ADDR
// end ; end ;
10151: LD_VAR 0 6
10155: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10156: LD_INT 0
10158: PPUSH
10159: PPUSH
10160: PPUSH
10161: PPUSH
10162: PPUSH
10163: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10164: LD_ADDR_VAR 0 5
10168: PUSH
10169: LD_INT 0
10171: PUSH
10172: LD_INT 0
10174: PUSH
10175: LD_INT 0
10177: PUSH
10178: EMPTY
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: ST_TO_ADDR
// if not x or not y then
10186: LD_VAR 0 2
10190: NOT
10191: PUSH
10192: LD_VAR 0 3
10196: NOT
10197: OR
10198: IFFALSE 10202
// exit ;
10200: GO 11848
// if not range then
10202: LD_VAR 0 4
10206: NOT
10207: IFFALSE 10217
// range := 10 ;
10209: LD_ADDR_VAR 0 4
10213: PUSH
10214: LD_INT 10
10216: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10217: LD_ADDR_VAR 0 8
10221: PUSH
10222: LD_INT 81
10224: PUSH
10225: LD_VAR 0 1
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 92
10236: PUSH
10237: LD_VAR 0 2
10241: PUSH
10242: LD_VAR 0 3
10246: PUSH
10247: LD_VAR 0 4
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 3
10260: PUSH
10261: LD_INT 21
10263: PUSH
10264: LD_INT 3
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: PPUSH
10280: CALL_OW 69
10284: ST_TO_ADDR
// if not tmp then
10285: LD_VAR 0 8
10289: NOT
10290: IFFALSE 10294
// exit ;
10292: GO 11848
// for i in tmp do
10294: LD_ADDR_VAR 0 6
10298: PUSH
10299: LD_VAR 0 8
10303: PUSH
10304: FOR_IN
10305: IFFALSE 11823
// begin points := [ 0 , 0 , 0 ] ;
10307: LD_ADDR_VAR 0 9
10311: PUSH
10312: LD_INT 0
10314: PUSH
10315: LD_INT 0
10317: PUSH
10318: LD_INT 0
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: LIST
10325: ST_TO_ADDR
// bpoints := 1 ;
10326: LD_ADDR_VAR 0 10
10330: PUSH
10331: LD_INT 1
10333: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10334: LD_VAR 0 6
10338: PPUSH
10339: CALL_OW 247
10343: PUSH
10344: LD_INT 1
10346: DOUBLE
10347: EQUAL
10348: IFTRUE 10352
10350: GO 10930
10352: POP
// begin if GetClass ( i ) = 1 then
10353: LD_VAR 0 6
10357: PPUSH
10358: CALL_OW 257
10362: PUSH
10363: LD_INT 1
10365: EQUAL
10366: IFFALSE 10387
// points := [ 10 , 5 , 3 ] ;
10368: LD_ADDR_VAR 0 9
10372: PUSH
10373: LD_INT 10
10375: PUSH
10376: LD_INT 5
10378: PUSH
10379: LD_INT 3
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: LIST
10386: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10387: LD_VAR 0 6
10391: PPUSH
10392: CALL_OW 257
10396: PUSH
10397: LD_INT 2
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: LD_INT 4
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: IN
10411: IFFALSE 10432
// points := [ 3 , 2 , 1 ] ;
10413: LD_ADDR_VAR 0 9
10417: PUSH
10418: LD_INT 3
10420: PUSH
10421: LD_INT 2
10423: PUSH
10424: LD_INT 1
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10432: LD_VAR 0 6
10436: PPUSH
10437: CALL_OW 257
10441: PUSH
10442: LD_INT 5
10444: EQUAL
10445: IFFALSE 10466
// points := [ 130 , 5 , 2 ] ;
10447: LD_ADDR_VAR 0 9
10451: PUSH
10452: LD_INT 130
10454: PUSH
10455: LD_INT 5
10457: PUSH
10458: LD_INT 2
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10466: LD_VAR 0 6
10470: PPUSH
10471: CALL_OW 257
10475: PUSH
10476: LD_INT 8
10478: EQUAL
10479: IFFALSE 10500
// points := [ 35 , 35 , 30 ] ;
10481: LD_ADDR_VAR 0 9
10485: PUSH
10486: LD_INT 35
10488: PUSH
10489: LD_INT 35
10491: PUSH
10492: LD_INT 30
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10500: LD_VAR 0 6
10504: PPUSH
10505: CALL_OW 257
10509: PUSH
10510: LD_INT 9
10512: EQUAL
10513: IFFALSE 10534
// points := [ 20 , 55 , 40 ] ;
10515: LD_ADDR_VAR 0 9
10519: PUSH
10520: LD_INT 20
10522: PUSH
10523: LD_INT 55
10525: PUSH
10526: LD_INT 40
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10534: LD_VAR 0 6
10538: PPUSH
10539: CALL_OW 257
10543: PUSH
10544: LD_INT 12
10546: PUSH
10547: LD_INT 16
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: IN
10554: IFFALSE 10575
// points := [ 5 , 3 , 2 ] ;
10556: LD_ADDR_VAR 0 9
10560: PUSH
10561: LD_INT 5
10563: PUSH
10564: LD_INT 3
10566: PUSH
10567: LD_INT 2
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: LIST
10574: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10575: LD_VAR 0 6
10579: PPUSH
10580: CALL_OW 257
10584: PUSH
10585: LD_INT 17
10587: EQUAL
10588: IFFALSE 10609
// points := [ 100 , 50 , 75 ] ;
10590: LD_ADDR_VAR 0 9
10594: PUSH
10595: LD_INT 100
10597: PUSH
10598: LD_INT 50
10600: PUSH
10601: LD_INT 75
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10609: LD_VAR 0 6
10613: PPUSH
10614: CALL_OW 257
10618: PUSH
10619: LD_INT 15
10621: EQUAL
10622: IFFALSE 10643
// points := [ 10 , 5 , 3 ] ;
10624: LD_ADDR_VAR 0 9
10628: PUSH
10629: LD_INT 10
10631: PUSH
10632: LD_INT 5
10634: PUSH
10635: LD_INT 3
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10643: LD_VAR 0 6
10647: PPUSH
10648: CALL_OW 257
10652: PUSH
10653: LD_INT 14
10655: EQUAL
10656: IFFALSE 10677
// points := [ 10 , 0 , 0 ] ;
10658: LD_ADDR_VAR 0 9
10662: PUSH
10663: LD_INT 10
10665: PUSH
10666: LD_INT 0
10668: PUSH
10669: LD_INT 0
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: LIST
10676: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10677: LD_VAR 0 6
10681: PPUSH
10682: CALL_OW 257
10686: PUSH
10687: LD_INT 11
10689: EQUAL
10690: IFFALSE 10711
// points := [ 30 , 10 , 5 ] ;
10692: LD_ADDR_VAR 0 9
10696: PUSH
10697: LD_INT 30
10699: PUSH
10700: LD_INT 10
10702: PUSH
10703: LD_INT 5
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10711: LD_VAR 0 1
10715: PPUSH
10716: LD_INT 5
10718: PPUSH
10719: CALL_OW 321
10723: PUSH
10724: LD_INT 2
10726: EQUAL
10727: IFFALSE 10744
// bpoints := bpoints * 1.8 ;
10729: LD_ADDR_VAR 0 10
10733: PUSH
10734: LD_VAR 0 10
10738: PUSH
10739: LD_REAL  1.80000000000000E+0000
10742: MUL
10743: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10744: LD_VAR 0 6
10748: PPUSH
10749: CALL_OW 257
10753: PUSH
10754: LD_INT 1
10756: PUSH
10757: LD_INT 2
10759: PUSH
10760: LD_INT 3
10762: PUSH
10763: LD_INT 4
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: IN
10772: PUSH
10773: LD_VAR 0 1
10777: PPUSH
10778: LD_INT 51
10780: PPUSH
10781: CALL_OW 321
10785: PUSH
10786: LD_INT 2
10788: EQUAL
10789: AND
10790: IFFALSE 10807
// bpoints := bpoints * 1.2 ;
10792: LD_ADDR_VAR 0 10
10796: PUSH
10797: LD_VAR 0 10
10801: PUSH
10802: LD_REAL  1.20000000000000E+0000
10805: MUL
10806: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10807: LD_VAR 0 6
10811: PPUSH
10812: CALL_OW 257
10816: PUSH
10817: LD_INT 5
10819: PUSH
10820: LD_INT 7
10822: PUSH
10823: LD_INT 9
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: IN
10831: PUSH
10832: LD_VAR 0 1
10836: PPUSH
10837: LD_INT 52
10839: PPUSH
10840: CALL_OW 321
10844: PUSH
10845: LD_INT 2
10847: EQUAL
10848: AND
10849: IFFALSE 10866
// bpoints := bpoints * 1.5 ;
10851: LD_ADDR_VAR 0 10
10855: PUSH
10856: LD_VAR 0 10
10860: PUSH
10861: LD_REAL  1.50000000000000E+0000
10864: MUL
10865: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10866: LD_VAR 0 1
10870: PPUSH
10871: LD_INT 66
10873: PPUSH
10874: CALL_OW 321
10878: PUSH
10879: LD_INT 2
10881: EQUAL
10882: IFFALSE 10899
// bpoints := bpoints * 1.1 ;
10884: LD_ADDR_VAR 0 10
10888: PUSH
10889: LD_VAR 0 10
10893: PUSH
10894: LD_REAL  1.10000000000000E+0000
10897: MUL
10898: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10899: LD_ADDR_VAR 0 10
10903: PUSH
10904: LD_VAR 0 10
10908: PUSH
10909: LD_VAR 0 6
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 259
10921: PUSH
10922: LD_REAL  1.15000000000000E+0000
10925: MUL
10926: MUL
10927: ST_TO_ADDR
// end ; unit_vehicle :
10928: GO 11752
10930: LD_INT 2
10932: DOUBLE
10933: EQUAL
10934: IFTRUE 10938
10936: GO 11740
10938: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10939: LD_VAR 0 6
10943: PPUSH
10944: CALL_OW 264
10948: PUSH
10949: LD_INT 2
10951: PUSH
10952: LD_INT 42
10954: PUSH
10955: LD_INT 24
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: LIST
10962: IN
10963: IFFALSE 10984
// points := [ 25 , 5 , 3 ] ;
10965: LD_ADDR_VAR 0 9
10969: PUSH
10970: LD_INT 25
10972: PUSH
10973: LD_INT 5
10975: PUSH
10976: LD_INT 3
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10984: LD_VAR 0 6
10988: PPUSH
10989: CALL_OW 264
10993: PUSH
10994: LD_INT 4
10996: PUSH
10997: LD_INT 43
10999: PUSH
11000: LD_INT 25
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: IN
11008: IFFALSE 11029
// points := [ 40 , 15 , 5 ] ;
11010: LD_ADDR_VAR 0 9
11014: PUSH
11015: LD_INT 40
11017: PUSH
11018: LD_INT 15
11020: PUSH
11021: LD_INT 5
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11029: LD_VAR 0 6
11033: PPUSH
11034: CALL_OW 264
11038: PUSH
11039: LD_INT 3
11041: PUSH
11042: LD_INT 23
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: IN
11049: IFFALSE 11070
// points := [ 7 , 25 , 8 ] ;
11051: LD_ADDR_VAR 0 9
11055: PUSH
11056: LD_INT 7
11058: PUSH
11059: LD_INT 25
11061: PUSH
11062: LD_INT 8
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11070: LD_VAR 0 6
11074: PPUSH
11075: CALL_OW 264
11079: PUSH
11080: LD_INT 5
11082: PUSH
11083: LD_INT 27
11085: PUSH
11086: LD_INT 44
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: IN
11094: IFFALSE 11115
// points := [ 14 , 50 , 16 ] ;
11096: LD_ADDR_VAR 0 9
11100: PUSH
11101: LD_INT 14
11103: PUSH
11104: LD_INT 50
11106: PUSH
11107: LD_INT 16
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: LIST
11114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11115: LD_VAR 0 6
11119: PPUSH
11120: CALL_OW 264
11124: PUSH
11125: LD_INT 6
11127: PUSH
11128: LD_INT 46
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: IN
11135: IFFALSE 11156
// points := [ 32 , 120 , 70 ] ;
11137: LD_ADDR_VAR 0 9
11141: PUSH
11142: LD_INT 32
11144: PUSH
11145: LD_INT 120
11147: PUSH
11148: LD_INT 70
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
11156: LD_VAR 0 6
11160: PPUSH
11161: CALL_OW 264
11165: PUSH
11166: LD_INT 7
11168: PUSH
11169: LD_INT 28
11171: PUSH
11172: LD_INT 45
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: LIST
11179: IN
11180: IFFALSE 11201
// points := [ 35 , 20 , 45 ] ;
11182: LD_ADDR_VAR 0 9
11186: PUSH
11187: LD_INT 35
11189: PUSH
11190: LD_INT 20
11192: PUSH
11193: LD_INT 45
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: LIST
11200: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11201: LD_VAR 0 6
11205: PPUSH
11206: CALL_OW 264
11210: PUSH
11211: LD_INT 47
11213: PUSH
11214: EMPTY
11215: LIST
11216: IN
11217: IFFALSE 11238
// points := [ 67 , 45 , 75 ] ;
11219: LD_ADDR_VAR 0 9
11223: PUSH
11224: LD_INT 67
11226: PUSH
11227: LD_INT 45
11229: PUSH
11230: LD_INT 75
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11238: LD_VAR 0 6
11242: PPUSH
11243: CALL_OW 264
11247: PUSH
11248: LD_INT 26
11250: PUSH
11251: EMPTY
11252: LIST
11253: IN
11254: IFFALSE 11275
// points := [ 120 , 30 , 80 ] ;
11256: LD_ADDR_VAR 0 9
11260: PUSH
11261: LD_INT 120
11263: PUSH
11264: LD_INT 30
11266: PUSH
11267: LD_INT 80
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: LIST
11274: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11275: LD_VAR 0 6
11279: PPUSH
11280: CALL_OW 264
11284: PUSH
11285: LD_INT 22
11287: PUSH
11288: EMPTY
11289: LIST
11290: IN
11291: IFFALSE 11312
// points := [ 40 , 1 , 1 ] ;
11293: LD_ADDR_VAR 0 9
11297: PUSH
11298: LD_INT 40
11300: PUSH
11301: LD_INT 1
11303: PUSH
11304: LD_INT 1
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11312: LD_VAR 0 6
11316: PPUSH
11317: CALL_OW 264
11321: PUSH
11322: LD_INT 29
11324: PUSH
11325: EMPTY
11326: LIST
11327: IN
11328: IFFALSE 11349
// points := [ 70 , 200 , 400 ] ;
11330: LD_ADDR_VAR 0 9
11334: PUSH
11335: LD_INT 70
11337: PUSH
11338: LD_INT 200
11340: PUSH
11341: LD_INT 400
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11349: LD_VAR 0 6
11353: PPUSH
11354: CALL_OW 264
11358: PUSH
11359: LD_INT 14
11361: PUSH
11362: LD_INT 53
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: IN
11369: IFFALSE 11390
// points := [ 40 , 10 , 20 ] ;
11371: LD_ADDR_VAR 0 9
11375: PUSH
11376: LD_INT 40
11378: PUSH
11379: LD_INT 10
11381: PUSH
11382: LD_INT 20
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: LIST
11389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11390: LD_VAR 0 6
11394: PPUSH
11395: CALL_OW 264
11399: PUSH
11400: LD_INT 9
11402: PUSH
11403: EMPTY
11404: LIST
11405: IN
11406: IFFALSE 11427
// points := [ 5 , 70 , 20 ] ;
11408: LD_ADDR_VAR 0 9
11412: PUSH
11413: LD_INT 5
11415: PUSH
11416: LD_INT 70
11418: PUSH
11419: LD_INT 20
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11427: LD_VAR 0 6
11431: PPUSH
11432: CALL_OW 264
11436: PUSH
11437: LD_INT 10
11439: PUSH
11440: EMPTY
11441: LIST
11442: IN
11443: IFFALSE 11464
// points := [ 35 , 110 , 70 ] ;
11445: LD_ADDR_VAR 0 9
11449: PUSH
11450: LD_INT 35
11452: PUSH
11453: LD_INT 110
11455: PUSH
11456: LD_INT 70
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: LIST
11463: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11464: LD_VAR 0 6
11468: PPUSH
11469: CALL_OW 265
11473: PUSH
11474: LD_INT 25
11476: EQUAL
11477: IFFALSE 11498
// points := [ 80 , 65 , 100 ] ;
11479: LD_ADDR_VAR 0 9
11483: PUSH
11484: LD_INT 80
11486: PUSH
11487: LD_INT 65
11489: PUSH
11490: LD_INT 100
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: LIST
11497: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11498: LD_VAR 0 6
11502: PPUSH
11503: CALL_OW 263
11507: PUSH
11508: LD_INT 1
11510: EQUAL
11511: IFFALSE 11546
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11513: LD_ADDR_VAR 0 10
11517: PUSH
11518: LD_VAR 0 10
11522: PUSH
11523: LD_VAR 0 6
11527: PPUSH
11528: CALL_OW 311
11532: PPUSH
11533: LD_INT 3
11535: PPUSH
11536: CALL_OW 259
11540: PUSH
11541: LD_INT 4
11543: MUL
11544: MUL
11545: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11546: LD_VAR 0 6
11550: PPUSH
11551: CALL_OW 263
11555: PUSH
11556: LD_INT 2
11558: EQUAL
11559: IFFALSE 11610
// begin j := IsControledBy ( i ) ;
11561: LD_ADDR_VAR 0 7
11565: PUSH
11566: LD_VAR 0 6
11570: PPUSH
11571: CALL_OW 312
11575: ST_TO_ADDR
// if j then
11576: LD_VAR 0 7
11580: IFFALSE 11610
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11582: LD_ADDR_VAR 0 10
11586: PUSH
11587: LD_VAR 0 10
11591: PUSH
11592: LD_VAR 0 7
11596: PPUSH
11597: LD_INT 3
11599: PPUSH
11600: CALL_OW 259
11604: PUSH
11605: LD_INT 3
11607: MUL
11608: MUL
11609: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11610: LD_VAR 0 6
11614: PPUSH
11615: CALL_OW 264
11619: PUSH
11620: LD_INT 5
11622: PUSH
11623: LD_INT 6
11625: PUSH
11626: LD_INT 46
11628: PUSH
11629: LD_INT 44
11631: PUSH
11632: LD_INT 47
11634: PUSH
11635: LD_INT 45
11637: PUSH
11638: LD_INT 28
11640: PUSH
11641: LD_INT 7
11643: PUSH
11644: LD_INT 27
11646: PUSH
11647: LD_INT 29
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: IN
11662: PUSH
11663: LD_VAR 0 1
11667: PPUSH
11668: LD_INT 52
11670: PPUSH
11671: CALL_OW 321
11675: PUSH
11676: LD_INT 2
11678: EQUAL
11679: AND
11680: IFFALSE 11697
// bpoints := bpoints * 1.2 ;
11682: LD_ADDR_VAR 0 10
11686: PUSH
11687: LD_VAR 0 10
11691: PUSH
11692: LD_REAL  1.20000000000000E+0000
11695: MUL
11696: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11697: LD_VAR 0 6
11701: PPUSH
11702: CALL_OW 264
11706: PUSH
11707: LD_INT 6
11709: PUSH
11710: LD_INT 46
11712: PUSH
11713: LD_INT 47
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: IN
11721: IFFALSE 11738
// bpoints := bpoints * 1.2 ;
11723: LD_ADDR_VAR 0 10
11727: PUSH
11728: LD_VAR 0 10
11732: PUSH
11733: LD_REAL  1.20000000000000E+0000
11736: MUL
11737: ST_TO_ADDR
// end ; unit_building :
11738: GO 11752
11740: LD_INT 3
11742: DOUBLE
11743: EQUAL
11744: IFTRUE 11748
11746: GO 11751
11748: POP
// ; end ;
11749: GO 11752
11751: POP
// for j = 1 to 3 do
11752: LD_ADDR_VAR 0 7
11756: PUSH
11757: DOUBLE
11758: LD_INT 1
11760: DEC
11761: ST_TO_ADDR
11762: LD_INT 3
11764: PUSH
11765: FOR_TO
11766: IFFALSE 11819
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11768: LD_ADDR_VAR 0 5
11772: PUSH
11773: LD_VAR 0 5
11777: PPUSH
11778: LD_VAR 0 7
11782: PPUSH
11783: LD_VAR 0 5
11787: PUSH
11788: LD_VAR 0 7
11792: ARRAY
11793: PUSH
11794: LD_VAR 0 9
11798: PUSH
11799: LD_VAR 0 7
11803: ARRAY
11804: PUSH
11805: LD_VAR 0 10
11809: MUL
11810: PLUS
11811: PPUSH
11812: CALL_OW 1
11816: ST_TO_ADDR
11817: GO 11765
11819: POP
11820: POP
// end ;
11821: GO 10304
11823: POP
11824: POP
// result := Replace ( result , 4 , tmp ) ;
11825: LD_ADDR_VAR 0 5
11829: PUSH
11830: LD_VAR 0 5
11834: PPUSH
11835: LD_INT 4
11837: PPUSH
11838: LD_VAR 0 8
11842: PPUSH
11843: CALL_OW 1
11847: ST_TO_ADDR
// end ;
11848: LD_VAR 0 5
11852: RET
// export function DangerAtRange ( unit , range ) ; begin
11853: LD_INT 0
11855: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11856: LD_ADDR_VAR 0 3
11860: PUSH
11861: LD_VAR 0 1
11865: PPUSH
11866: CALL_OW 255
11870: PPUSH
11871: LD_VAR 0 1
11875: PPUSH
11876: CALL_OW 250
11880: PPUSH
11881: LD_VAR 0 1
11885: PPUSH
11886: CALL_OW 251
11890: PPUSH
11891: LD_VAR 0 2
11895: PPUSH
11896: CALL 10156 0 4
11900: ST_TO_ADDR
// end ;
11901: LD_VAR 0 3
11905: RET
// export function DangerInArea ( side , area ) ; begin
11906: LD_INT 0
11908: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11909: LD_ADDR_VAR 0 3
11913: PUSH
11914: LD_VAR 0 2
11918: PPUSH
11919: LD_INT 81
11921: PUSH
11922: LD_VAR 0 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 70
11935: ST_TO_ADDR
// end ;
11936: LD_VAR 0 3
11940: RET
// export function IsExtension ( b ) ; begin
11941: LD_INT 0
11943: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11944: LD_ADDR_VAR 0 2
11948: PUSH
11949: LD_VAR 0 1
11953: PUSH
11954: LD_INT 23
11956: PUSH
11957: LD_INT 20
11959: PUSH
11960: LD_INT 22
11962: PUSH
11963: LD_INT 17
11965: PUSH
11966: LD_INT 24
11968: PUSH
11969: LD_INT 21
11971: PUSH
11972: LD_INT 19
11974: PUSH
11975: LD_INT 16
11977: PUSH
11978: LD_INT 25
11980: PUSH
11981: LD_INT 18
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: IN
11996: ST_TO_ADDR
// end ;
11997: LD_VAR 0 2
12001: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12002: LD_INT 0
12004: PPUSH
12005: PPUSH
12006: PPUSH
// result := [ ] ;
12007: LD_ADDR_VAR 0 4
12011: PUSH
12012: EMPTY
12013: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12014: LD_ADDR_VAR 0 5
12018: PUSH
12019: LD_VAR 0 2
12023: PPUSH
12024: LD_INT 21
12026: PUSH
12027: LD_INT 3
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 70
12038: ST_TO_ADDR
// if not tmp then
12039: LD_VAR 0 5
12043: NOT
12044: IFFALSE 12048
// exit ;
12046: GO 12112
// if checkLink then
12048: LD_VAR 0 3
12052: IFFALSE 12102
// begin for i in tmp do
12054: LD_ADDR_VAR 0 6
12058: PUSH
12059: LD_VAR 0 5
12063: PUSH
12064: FOR_IN
12065: IFFALSE 12100
// if GetBase ( i ) <> base then
12067: LD_VAR 0 6
12071: PPUSH
12072: CALL_OW 274
12076: PUSH
12077: LD_VAR 0 1
12081: NONEQUAL
12082: IFFALSE 12098
// ComLinkToBase ( base , i ) ;
12084: LD_VAR 0 1
12088: PPUSH
12089: LD_VAR 0 6
12093: PPUSH
12094: CALL_OW 169
12098: GO 12064
12100: POP
12101: POP
// end ; result := tmp ;
12102: LD_ADDR_VAR 0 4
12106: PUSH
12107: LD_VAR 0 5
12111: ST_TO_ADDR
// end ;
12112: LD_VAR 0 4
12116: RET
// export function ComComplete ( units , b ) ; var i ; begin
12117: LD_INT 0
12119: PPUSH
12120: PPUSH
// if not units then
12121: LD_VAR 0 1
12125: NOT
12126: IFFALSE 12130
// exit ;
12128: GO 12220
// for i in units do
12130: LD_ADDR_VAR 0 4
12134: PUSH
12135: LD_VAR 0 1
12139: PUSH
12140: FOR_IN
12141: IFFALSE 12218
// if BuildingStatus ( b ) = bs_build then
12143: LD_VAR 0 2
12147: PPUSH
12148: CALL_OW 461
12152: PUSH
12153: LD_INT 1
12155: EQUAL
12156: IFFALSE 12216
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12158: LD_VAR 0 4
12162: PPUSH
12163: LD_STRING h
12165: PUSH
12166: LD_VAR 0 2
12170: PPUSH
12171: CALL_OW 250
12175: PUSH
12176: LD_VAR 0 2
12180: PPUSH
12181: CALL_OW 251
12185: PUSH
12186: LD_VAR 0 2
12190: PUSH
12191: LD_INT 0
12193: PUSH
12194: LD_INT 0
12196: PUSH
12197: LD_INT 0
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: PPUSH
12212: CALL_OW 446
12216: GO 12140
12218: POP
12219: POP
// end ;
12220: LD_VAR 0 3
12224: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
12229: PPUSH
12230: PPUSH
12231: PPUSH
12232: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
12233: LD_VAR 0 1
12237: NOT
12238: PUSH
12239: LD_VAR 0 1
12243: PPUSH
12244: CALL_OW 263
12248: PUSH
12249: LD_INT 2
12251: EQUAL
12252: NOT
12253: OR
12254: IFFALSE 12258
// exit ;
12256: GO 12574
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12258: LD_ADDR_VAR 0 6
12262: PUSH
12263: LD_INT 22
12265: PUSH
12266: LD_VAR 0 1
12270: PPUSH
12271: CALL_OW 255
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 2
12282: PUSH
12283: LD_INT 30
12285: PUSH
12286: LD_INT 36
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 34
12295: PUSH
12296: LD_INT 31
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PPUSH
12312: CALL_OW 69
12316: ST_TO_ADDR
// if not tmp then
12317: LD_VAR 0 6
12321: NOT
12322: IFFALSE 12326
// exit ;
12324: GO 12574
// result := [ ] ;
12326: LD_ADDR_VAR 0 2
12330: PUSH
12331: EMPTY
12332: ST_TO_ADDR
// for i in tmp do
12333: LD_ADDR_VAR 0 3
12337: PUSH
12338: LD_VAR 0 6
12342: PUSH
12343: FOR_IN
12344: IFFALSE 12415
// begin t := UnitsInside ( i ) ;
12346: LD_ADDR_VAR 0 4
12350: PUSH
12351: LD_VAR 0 3
12355: PPUSH
12356: CALL_OW 313
12360: ST_TO_ADDR
// if t then
12361: LD_VAR 0 4
12365: IFFALSE 12413
// for j in t do
12367: LD_ADDR_VAR 0 7
12371: PUSH
12372: LD_VAR 0 4
12376: PUSH
12377: FOR_IN
12378: IFFALSE 12411
// result := Insert ( result , result + 1 , j ) ;
12380: LD_ADDR_VAR 0 2
12384: PUSH
12385: LD_VAR 0 2
12389: PPUSH
12390: LD_VAR 0 2
12394: PUSH
12395: LD_INT 1
12397: PLUS
12398: PPUSH
12399: LD_VAR 0 7
12403: PPUSH
12404: CALL_OW 2
12408: ST_TO_ADDR
12409: GO 12377
12411: POP
12412: POP
// end ;
12413: GO 12343
12415: POP
12416: POP
// if not result then
12417: LD_VAR 0 2
12421: NOT
12422: IFFALSE 12426
// exit ;
12424: GO 12574
// mech := result [ 1 ] ;
12426: LD_ADDR_VAR 0 5
12430: PUSH
12431: LD_VAR 0 2
12435: PUSH
12436: LD_INT 1
12438: ARRAY
12439: ST_TO_ADDR
// if result > 1 then
12440: LD_VAR 0 2
12444: PUSH
12445: LD_INT 1
12447: GREATER
12448: IFFALSE 12560
// for i = 2 to result do
12450: LD_ADDR_VAR 0 3
12454: PUSH
12455: DOUBLE
12456: LD_INT 2
12458: DEC
12459: ST_TO_ADDR
12460: LD_VAR 0 2
12464: PUSH
12465: FOR_TO
12466: IFFALSE 12558
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12468: LD_ADDR_VAR 0 4
12472: PUSH
12473: LD_VAR 0 2
12477: PUSH
12478: LD_VAR 0 3
12482: ARRAY
12483: PPUSH
12484: LD_INT 3
12486: PPUSH
12487: CALL_OW 259
12491: PUSH
12492: LD_VAR 0 2
12496: PUSH
12497: LD_VAR 0 3
12501: ARRAY
12502: PPUSH
12503: CALL_OW 432
12507: MINUS
12508: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12509: LD_VAR 0 4
12513: PUSH
12514: LD_VAR 0 5
12518: PPUSH
12519: LD_INT 3
12521: PPUSH
12522: CALL_OW 259
12526: PUSH
12527: LD_VAR 0 5
12531: PPUSH
12532: CALL_OW 432
12536: MINUS
12537: GREATEREQUAL
12538: IFFALSE 12556
// mech := result [ i ] ;
12540: LD_ADDR_VAR 0 5
12544: PUSH
12545: LD_VAR 0 2
12549: PUSH
12550: LD_VAR 0 3
12554: ARRAY
12555: ST_TO_ADDR
// end ;
12556: GO 12465
12558: POP
12559: POP
// ComLinkTo ( vehicle , mech ) ;
12560: LD_VAR 0 1
12564: PPUSH
12565: LD_VAR 0 5
12569: PPUSH
12570: CALL_OW 135
// end ;
12574: LD_VAR 0 2
12578: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12579: LD_INT 0
12581: PPUSH
12582: PPUSH
12583: PPUSH
12584: PPUSH
12585: PPUSH
12586: PPUSH
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
// result := [ ] ;
12594: LD_ADDR_VAR 0 7
12598: PUSH
12599: EMPTY
12600: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12601: LD_VAR 0 1
12605: PPUSH
12606: CALL_OW 266
12610: PUSH
12611: LD_INT 0
12613: PUSH
12614: LD_INT 1
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: IN
12621: NOT
12622: IFFALSE 12626
// exit ;
12624: GO 14260
// if name then
12626: LD_VAR 0 3
12630: IFFALSE 12646
// SetBName ( base_dep , name ) ;
12632: LD_VAR 0 1
12636: PPUSH
12637: LD_VAR 0 3
12641: PPUSH
12642: CALL_OW 500
// base := GetBase ( base_dep ) ;
12646: LD_ADDR_VAR 0 15
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: CALL_OW 274
12660: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12661: LD_ADDR_VAR 0 16
12665: PUSH
12666: LD_VAR 0 1
12670: PPUSH
12671: CALL_OW 255
12675: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12676: LD_ADDR_VAR 0 17
12680: PUSH
12681: LD_VAR 0 1
12685: PPUSH
12686: CALL_OW 248
12690: ST_TO_ADDR
// if sources then
12691: LD_VAR 0 5
12695: IFFALSE 12742
// for i = 1 to 3 do
12697: LD_ADDR_VAR 0 8
12701: PUSH
12702: DOUBLE
12703: LD_INT 1
12705: DEC
12706: ST_TO_ADDR
12707: LD_INT 3
12709: PUSH
12710: FOR_TO
12711: IFFALSE 12740
// AddResourceType ( base , i , sources [ i ] ) ;
12713: LD_VAR 0 15
12717: PPUSH
12718: LD_VAR 0 8
12722: PPUSH
12723: LD_VAR 0 5
12727: PUSH
12728: LD_VAR 0 8
12732: ARRAY
12733: PPUSH
12734: CALL_OW 276
12738: GO 12710
12740: POP
12741: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12742: LD_ADDR_VAR 0 18
12746: PUSH
12747: LD_VAR 0 15
12751: PPUSH
12752: LD_VAR 0 2
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL 12002 0 3
12764: ST_TO_ADDR
// InitHc ;
12765: CALL_OW 19
// InitUc ;
12769: CALL_OW 18
// uc_side := side ;
12773: LD_ADDR_OWVAR 20
12777: PUSH
12778: LD_VAR 0 16
12782: ST_TO_ADDR
// uc_nation := nation ;
12783: LD_ADDR_OWVAR 21
12787: PUSH
12788: LD_VAR 0 17
12792: ST_TO_ADDR
// if buildings then
12793: LD_VAR 0 18
12797: IFFALSE 14119
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12799: LD_ADDR_VAR 0 19
12803: PUSH
12804: LD_VAR 0 18
12808: PPUSH
12809: LD_INT 2
12811: PUSH
12812: LD_INT 30
12814: PUSH
12815: LD_INT 29
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 30
12824: PUSH
12825: LD_INT 30
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 72
12841: ST_TO_ADDR
// if tmp then
12842: LD_VAR 0 19
12846: IFFALSE 12894
// for i in tmp do
12848: LD_ADDR_VAR 0 8
12852: PUSH
12853: LD_VAR 0 19
12857: PUSH
12858: FOR_IN
12859: IFFALSE 12892
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12861: LD_VAR 0 8
12865: PPUSH
12866: CALL_OW 250
12870: PPUSH
12871: LD_VAR 0 8
12875: PPUSH
12876: CALL_OW 251
12880: PPUSH
12881: LD_VAR 0 16
12885: PPUSH
12886: CALL_OW 441
12890: GO 12858
12892: POP
12893: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12894: LD_VAR 0 18
12898: PPUSH
12899: LD_INT 2
12901: PUSH
12902: LD_INT 30
12904: PUSH
12905: LD_INT 32
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 30
12914: PUSH
12915: LD_INT 33
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 72
12931: IFFALSE 13019
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12933: LD_ADDR_VAR 0 8
12937: PUSH
12938: LD_VAR 0 18
12942: PPUSH
12943: LD_INT 2
12945: PUSH
12946: LD_INT 30
12948: PUSH
12949: LD_INT 32
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 30
12958: PUSH
12959: LD_INT 33
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 72
12975: PUSH
12976: FOR_IN
12977: IFFALSE 13017
// begin if not GetBWeapon ( i ) then
12979: LD_VAR 0 8
12983: PPUSH
12984: CALL_OW 269
12988: NOT
12989: IFFALSE 13015
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12991: LD_VAR 0 8
12995: PPUSH
12996: LD_VAR 0 8
13000: PPUSH
13001: LD_VAR 0 2
13005: PPUSH
13006: CALL 14265 0 2
13010: PPUSH
13011: CALL_OW 431
// end ;
13015: GO 12976
13017: POP
13018: POP
// end ; for i = 1 to personel do
13019: LD_ADDR_VAR 0 8
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_VAR 0 6
13033: PUSH
13034: FOR_TO
13035: IFFALSE 14099
// begin if i > 4 then
13037: LD_VAR 0 8
13041: PUSH
13042: LD_INT 4
13044: GREATER
13045: IFFALSE 13049
// break ;
13047: GO 14099
// case i of 1 :
13049: LD_VAR 0 8
13053: PUSH
13054: LD_INT 1
13056: DOUBLE
13057: EQUAL
13058: IFTRUE 13062
13060: GO 13142
13062: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13063: LD_ADDR_VAR 0 12
13067: PUSH
13068: LD_VAR 0 18
13072: PPUSH
13073: LD_INT 22
13075: PUSH
13076: LD_VAR 0 16
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 58
13087: PUSH
13088: EMPTY
13089: LIST
13090: PUSH
13091: LD_INT 2
13093: PUSH
13094: LD_INT 30
13096: PUSH
13097: LD_INT 32
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 30
13106: PUSH
13107: LD_INT 4
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 30
13116: PUSH
13117: LD_INT 5
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: LIST
13134: PPUSH
13135: CALL_OW 72
13139: ST_TO_ADDR
13140: GO 13364
13142: LD_INT 2
13144: DOUBLE
13145: EQUAL
13146: IFTRUE 13150
13148: GO 13212
13150: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13151: LD_ADDR_VAR 0 12
13155: PUSH
13156: LD_VAR 0 18
13160: PPUSH
13161: LD_INT 22
13163: PUSH
13164: LD_VAR 0 16
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 2
13175: PUSH
13176: LD_INT 30
13178: PUSH
13179: LD_INT 0
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 1
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PPUSH
13205: CALL_OW 72
13209: ST_TO_ADDR
13210: GO 13364
13212: LD_INT 3
13214: DOUBLE
13215: EQUAL
13216: IFTRUE 13220
13218: GO 13282
13220: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13221: LD_ADDR_VAR 0 12
13225: PUSH
13226: LD_VAR 0 18
13230: PPUSH
13231: LD_INT 22
13233: PUSH
13234: LD_VAR 0 16
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PUSH
13243: LD_INT 2
13245: PUSH
13246: LD_INT 30
13248: PUSH
13249: LD_INT 2
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 30
13258: PUSH
13259: LD_INT 3
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PPUSH
13275: CALL_OW 72
13279: ST_TO_ADDR
13280: GO 13364
13282: LD_INT 4
13284: DOUBLE
13285: EQUAL
13286: IFTRUE 13290
13288: GO 13363
13290: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13291: LD_ADDR_VAR 0 12
13295: PUSH
13296: LD_VAR 0 18
13300: PPUSH
13301: LD_INT 22
13303: PUSH
13304: LD_VAR 0 16
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 2
13315: PUSH
13316: LD_INT 30
13318: PUSH
13319: LD_INT 6
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 30
13328: PUSH
13329: LD_INT 7
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 30
13338: PUSH
13339: LD_INT 8
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PPUSH
13356: CALL_OW 72
13360: ST_TO_ADDR
13361: GO 13364
13363: POP
// if i = 1 then
13364: LD_VAR 0 8
13368: PUSH
13369: LD_INT 1
13371: EQUAL
13372: IFFALSE 13483
// begin tmp := [ ] ;
13374: LD_ADDR_VAR 0 19
13378: PUSH
13379: EMPTY
13380: ST_TO_ADDR
// for j in f do
13381: LD_ADDR_VAR 0 9
13385: PUSH
13386: LD_VAR 0 12
13390: PUSH
13391: FOR_IN
13392: IFFALSE 13465
// if GetBType ( j ) = b_bunker then
13394: LD_VAR 0 9
13398: PPUSH
13399: CALL_OW 266
13403: PUSH
13404: LD_INT 32
13406: EQUAL
13407: IFFALSE 13434
// tmp := Insert ( tmp , 1 , j ) else
13409: LD_ADDR_VAR 0 19
13413: PUSH
13414: LD_VAR 0 19
13418: PPUSH
13419: LD_INT 1
13421: PPUSH
13422: LD_VAR 0 9
13426: PPUSH
13427: CALL_OW 2
13431: ST_TO_ADDR
13432: GO 13463
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13434: LD_ADDR_VAR 0 19
13438: PUSH
13439: LD_VAR 0 19
13443: PPUSH
13444: LD_VAR 0 19
13448: PUSH
13449: LD_INT 1
13451: PLUS
13452: PPUSH
13453: LD_VAR 0 9
13457: PPUSH
13458: CALL_OW 2
13462: ST_TO_ADDR
13463: GO 13391
13465: POP
13466: POP
// if tmp then
13467: LD_VAR 0 19
13471: IFFALSE 13483
// f := tmp ;
13473: LD_ADDR_VAR 0 12
13477: PUSH
13478: LD_VAR 0 19
13482: ST_TO_ADDR
// end ; x := personel [ i ] ;
13483: LD_ADDR_VAR 0 13
13487: PUSH
13488: LD_VAR 0 6
13492: PUSH
13493: LD_VAR 0 8
13497: ARRAY
13498: ST_TO_ADDR
// if x = - 1 then
13499: LD_VAR 0 13
13503: PUSH
13504: LD_INT 1
13506: NEG
13507: EQUAL
13508: IFFALSE 13717
// begin for j in f do
13510: LD_ADDR_VAR 0 9
13514: PUSH
13515: LD_VAR 0 12
13519: PUSH
13520: FOR_IN
13521: IFFALSE 13713
// repeat InitHc ;
13523: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13527: LD_VAR 0 9
13531: PPUSH
13532: CALL_OW 266
13536: PUSH
13537: LD_INT 5
13539: EQUAL
13540: IFFALSE 13610
// begin if UnitsInside ( j ) < 3 then
13542: LD_VAR 0 9
13546: PPUSH
13547: CALL_OW 313
13551: PUSH
13552: LD_INT 3
13554: LESS
13555: IFFALSE 13591
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13557: LD_INT 0
13559: PPUSH
13560: LD_INT 5
13562: PUSH
13563: LD_INT 8
13565: PUSH
13566: LD_INT 9
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: LD_VAR 0 17
13578: ARRAY
13579: PPUSH
13580: LD_VAR 0 4
13584: PPUSH
13585: CALL_OW 380
13589: GO 13608
// PrepareHuman ( false , i , skill ) ;
13591: LD_INT 0
13593: PPUSH
13594: LD_VAR 0 8
13598: PPUSH
13599: LD_VAR 0 4
13603: PPUSH
13604: CALL_OW 380
// end else
13608: GO 13627
// PrepareHuman ( false , i , skill ) ;
13610: LD_INT 0
13612: PPUSH
13613: LD_VAR 0 8
13617: PPUSH
13618: LD_VAR 0 4
13622: PPUSH
13623: CALL_OW 380
// un := CreateHuman ;
13627: LD_ADDR_VAR 0 14
13631: PUSH
13632: CALL_OW 44
13636: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13637: LD_ADDR_VAR 0 7
13641: PUSH
13642: LD_VAR 0 7
13646: PPUSH
13647: LD_INT 1
13649: PPUSH
13650: LD_VAR 0 14
13654: PPUSH
13655: CALL_OW 2
13659: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13660: LD_VAR 0 14
13664: PPUSH
13665: LD_VAR 0 9
13669: PPUSH
13670: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13674: LD_VAR 0 9
13678: PPUSH
13679: CALL_OW 313
13683: PUSH
13684: LD_INT 6
13686: EQUAL
13687: PUSH
13688: LD_VAR 0 9
13692: PPUSH
13693: CALL_OW 266
13697: PUSH
13698: LD_INT 32
13700: PUSH
13701: LD_INT 31
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: IN
13708: OR
13709: IFFALSE 13523
13711: GO 13520
13713: POP
13714: POP
// end else
13715: GO 14097
// for j = 1 to x do
13717: LD_ADDR_VAR 0 9
13721: PUSH
13722: DOUBLE
13723: LD_INT 1
13725: DEC
13726: ST_TO_ADDR
13727: LD_VAR 0 13
13731: PUSH
13732: FOR_TO
13733: IFFALSE 14095
// begin InitHc ;
13735: CALL_OW 19
// if not f then
13739: LD_VAR 0 12
13743: NOT
13744: IFFALSE 13833
// begin PrepareHuman ( false , i , skill ) ;
13746: LD_INT 0
13748: PPUSH
13749: LD_VAR 0 8
13753: PPUSH
13754: LD_VAR 0 4
13758: PPUSH
13759: CALL_OW 380
// un := CreateHuman ;
13763: LD_ADDR_VAR 0 14
13767: PUSH
13768: CALL_OW 44
13772: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13773: LD_ADDR_VAR 0 7
13777: PUSH
13778: LD_VAR 0 7
13782: PPUSH
13783: LD_INT 1
13785: PPUSH
13786: LD_VAR 0 14
13790: PPUSH
13791: CALL_OW 2
13795: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13796: LD_VAR 0 14
13800: PPUSH
13801: LD_VAR 0 1
13805: PPUSH
13806: CALL_OW 250
13810: PPUSH
13811: LD_VAR 0 1
13815: PPUSH
13816: CALL_OW 251
13820: PPUSH
13821: LD_INT 10
13823: PPUSH
13824: LD_INT 0
13826: PPUSH
13827: CALL_OW 50
// continue ;
13831: GO 13732
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13833: LD_VAR 0 12
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PPUSH
13842: CALL_OW 313
13846: PUSH
13847: LD_VAR 0 12
13851: PUSH
13852: LD_INT 1
13854: ARRAY
13855: PPUSH
13856: CALL_OW 266
13860: PUSH
13861: LD_INT 32
13863: PUSH
13864: LD_INT 31
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: IN
13871: AND
13872: PUSH
13873: LD_VAR 0 12
13877: PUSH
13878: LD_INT 1
13880: ARRAY
13881: PPUSH
13882: CALL_OW 313
13886: PUSH
13887: LD_INT 6
13889: EQUAL
13890: OR
13891: IFFALSE 13911
// f := Delete ( f , 1 ) ;
13893: LD_ADDR_VAR 0 12
13897: PUSH
13898: LD_VAR 0 12
13902: PPUSH
13903: LD_INT 1
13905: PPUSH
13906: CALL_OW 3
13910: ST_TO_ADDR
// if not f then
13911: LD_VAR 0 12
13915: NOT
13916: IFFALSE 13934
// begin x := x + 2 ;
13918: LD_ADDR_VAR 0 13
13922: PUSH
13923: LD_VAR 0 13
13927: PUSH
13928: LD_INT 2
13930: PLUS
13931: ST_TO_ADDR
// continue ;
13932: GO 13732
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13934: LD_VAR 0 12
13938: PUSH
13939: LD_INT 1
13941: ARRAY
13942: PPUSH
13943: CALL_OW 266
13947: PUSH
13948: LD_INT 5
13950: EQUAL
13951: IFFALSE 14025
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13953: LD_VAR 0 12
13957: PUSH
13958: LD_INT 1
13960: ARRAY
13961: PPUSH
13962: CALL_OW 313
13966: PUSH
13967: LD_INT 3
13969: LESS
13970: IFFALSE 14006
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13972: LD_INT 0
13974: PPUSH
13975: LD_INT 5
13977: PUSH
13978: LD_INT 8
13980: PUSH
13981: LD_INT 9
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: PUSH
13989: LD_VAR 0 17
13993: ARRAY
13994: PPUSH
13995: LD_VAR 0 4
13999: PPUSH
14000: CALL_OW 380
14004: GO 14023
// PrepareHuman ( false , i , skill ) ;
14006: LD_INT 0
14008: PPUSH
14009: LD_VAR 0 8
14013: PPUSH
14014: LD_VAR 0 4
14018: PPUSH
14019: CALL_OW 380
// end else
14023: GO 14042
// PrepareHuman ( false , i , skill ) ;
14025: LD_INT 0
14027: PPUSH
14028: LD_VAR 0 8
14032: PPUSH
14033: LD_VAR 0 4
14037: PPUSH
14038: CALL_OW 380
// un := CreateHuman ;
14042: LD_ADDR_VAR 0 14
14046: PUSH
14047: CALL_OW 44
14051: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14052: LD_ADDR_VAR 0 7
14056: PUSH
14057: LD_VAR 0 7
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: LD_VAR 0 14
14069: PPUSH
14070: CALL_OW 2
14074: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14075: LD_VAR 0 14
14079: PPUSH
14080: LD_VAR 0 12
14084: PUSH
14085: LD_INT 1
14087: ARRAY
14088: PPUSH
14089: CALL_OW 52
// end ;
14093: GO 13732
14095: POP
14096: POP
// end ;
14097: GO 13034
14099: POP
14100: POP
// result := result ^ buildings ;
14101: LD_ADDR_VAR 0 7
14105: PUSH
14106: LD_VAR 0 7
14110: PUSH
14111: LD_VAR 0 18
14115: ADD
14116: ST_TO_ADDR
// end else
14117: GO 14260
// begin for i = 1 to personel do
14119: LD_ADDR_VAR 0 8
14123: PUSH
14124: DOUBLE
14125: LD_INT 1
14127: DEC
14128: ST_TO_ADDR
14129: LD_VAR 0 6
14133: PUSH
14134: FOR_TO
14135: IFFALSE 14258
// begin if i > 4 then
14137: LD_VAR 0 8
14141: PUSH
14142: LD_INT 4
14144: GREATER
14145: IFFALSE 14149
// break ;
14147: GO 14258
// x := personel [ i ] ;
14149: LD_ADDR_VAR 0 13
14153: PUSH
14154: LD_VAR 0 6
14158: PUSH
14159: LD_VAR 0 8
14163: ARRAY
14164: ST_TO_ADDR
// if x = - 1 then
14165: LD_VAR 0 13
14169: PUSH
14170: LD_INT 1
14172: NEG
14173: EQUAL
14174: IFFALSE 14178
// continue ;
14176: GO 14134
// PrepareHuman ( false , i , skill ) ;
14178: LD_INT 0
14180: PPUSH
14181: LD_VAR 0 8
14185: PPUSH
14186: LD_VAR 0 4
14190: PPUSH
14191: CALL_OW 380
// un := CreateHuman ;
14195: LD_ADDR_VAR 0 14
14199: PUSH
14200: CALL_OW 44
14204: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14205: LD_VAR 0 14
14209: PPUSH
14210: LD_VAR 0 1
14214: PPUSH
14215: CALL_OW 250
14219: PPUSH
14220: LD_VAR 0 1
14224: PPUSH
14225: CALL_OW 251
14229: PPUSH
14230: LD_INT 10
14232: PPUSH
14233: LD_INT 0
14235: PPUSH
14236: CALL_OW 50
// result := result ^ un ;
14240: LD_ADDR_VAR 0 7
14244: PUSH
14245: LD_VAR 0 7
14249: PUSH
14250: LD_VAR 0 14
14254: ADD
14255: ST_TO_ADDR
// end ;
14256: GO 14134
14258: POP
14259: POP
// end ; end ;
14260: LD_VAR 0 7
14264: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14265: LD_INT 0
14267: PPUSH
14268: PPUSH
14269: PPUSH
14270: PPUSH
14271: PPUSH
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
14276: PPUSH
14277: PPUSH
14278: PPUSH
14279: PPUSH
14280: PPUSH
14281: PPUSH
14282: PPUSH
// result := false ;
14283: LD_ADDR_VAR 0 3
14287: PUSH
14288: LD_INT 0
14290: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14291: LD_VAR 0 1
14295: NOT
14296: PUSH
14297: LD_VAR 0 1
14301: PPUSH
14302: CALL_OW 266
14306: PUSH
14307: LD_INT 32
14309: PUSH
14310: LD_INT 33
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: IN
14317: NOT
14318: OR
14319: IFFALSE 14323
// exit ;
14321: GO 15462
// nat := GetNation ( tower ) ;
14323: LD_ADDR_VAR 0 12
14327: PUSH
14328: LD_VAR 0 1
14332: PPUSH
14333: CALL_OW 248
14337: ST_TO_ADDR
// side := GetSide ( tower ) ;
14338: LD_ADDR_VAR 0 16
14342: PUSH
14343: LD_VAR 0 1
14347: PPUSH
14348: CALL_OW 255
14352: ST_TO_ADDR
// x := GetX ( tower ) ;
14353: LD_ADDR_VAR 0 10
14357: PUSH
14358: LD_VAR 0 1
14362: PPUSH
14363: CALL_OW 250
14367: ST_TO_ADDR
// y := GetY ( tower ) ;
14368: LD_ADDR_VAR 0 11
14372: PUSH
14373: LD_VAR 0 1
14377: PPUSH
14378: CALL_OW 251
14382: ST_TO_ADDR
// if not x or not y then
14383: LD_VAR 0 10
14387: NOT
14388: PUSH
14389: LD_VAR 0 11
14393: NOT
14394: OR
14395: IFFALSE 14399
// exit ;
14397: GO 15462
// weapon := 0 ;
14399: LD_ADDR_VAR 0 18
14403: PUSH
14404: LD_INT 0
14406: ST_TO_ADDR
// fac_list := [ ] ;
14407: LD_ADDR_VAR 0 17
14411: PUSH
14412: EMPTY
14413: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14414: LD_ADDR_VAR 0 6
14418: PUSH
14419: LD_VAR 0 1
14423: PPUSH
14424: CALL_OW 274
14428: PPUSH
14429: LD_VAR 0 2
14433: PPUSH
14434: LD_INT 0
14436: PPUSH
14437: CALL 12002 0 3
14441: PPUSH
14442: LD_INT 30
14444: PUSH
14445: LD_INT 3
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PPUSH
14452: CALL_OW 72
14456: ST_TO_ADDR
// if not factories then
14457: LD_VAR 0 6
14461: NOT
14462: IFFALSE 14466
// exit ;
14464: GO 15462
// for i in factories do
14466: LD_ADDR_VAR 0 8
14470: PUSH
14471: LD_VAR 0 6
14475: PUSH
14476: FOR_IN
14477: IFFALSE 14502
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14479: LD_ADDR_VAR 0 17
14483: PUSH
14484: LD_VAR 0 17
14488: PUSH
14489: LD_VAR 0 8
14493: PPUSH
14494: CALL_OW 478
14498: UNION
14499: ST_TO_ADDR
14500: GO 14476
14502: POP
14503: POP
// if not fac_list then
14504: LD_VAR 0 17
14508: NOT
14509: IFFALSE 14513
// exit ;
14511: GO 15462
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14513: LD_ADDR_VAR 0 5
14517: PUSH
14518: LD_INT 4
14520: PUSH
14521: LD_INT 5
14523: PUSH
14524: LD_INT 9
14526: PUSH
14527: LD_INT 10
14529: PUSH
14530: LD_INT 6
14532: PUSH
14533: LD_INT 7
14535: PUSH
14536: LD_INT 11
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 27
14550: PUSH
14551: LD_INT 28
14553: PUSH
14554: LD_INT 26
14556: PUSH
14557: LD_INT 30
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 43
14568: PUSH
14569: LD_INT 44
14571: PUSH
14572: LD_INT 46
14574: PUSH
14575: LD_INT 45
14577: PUSH
14578: LD_INT 47
14580: PUSH
14581: LD_INT 49
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: PUSH
14597: LD_VAR 0 12
14601: ARRAY
14602: ST_TO_ADDR
// for i in list do
14603: LD_ADDR_VAR 0 8
14607: PUSH
14608: LD_VAR 0 5
14612: PUSH
14613: FOR_IN
14614: IFFALSE 14647
// if not i in fac_list then
14616: LD_VAR 0 8
14620: PUSH
14621: LD_VAR 0 17
14625: IN
14626: NOT
14627: IFFALSE 14645
// list := list diff i ;
14629: LD_ADDR_VAR 0 5
14633: PUSH
14634: LD_VAR 0 5
14638: PUSH
14639: LD_VAR 0 8
14643: DIFF
14644: ST_TO_ADDR
14645: GO 14613
14647: POP
14648: POP
// if not list then
14649: LD_VAR 0 5
14653: NOT
14654: IFFALSE 14658
// exit ;
14656: GO 15462
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14658: LD_VAR 0 12
14662: PUSH
14663: LD_INT 3
14665: EQUAL
14666: PUSH
14667: LD_INT 49
14669: PUSH
14670: LD_VAR 0 5
14674: IN
14675: AND
14676: PUSH
14677: LD_INT 31
14679: PPUSH
14680: LD_VAR 0 16
14684: PPUSH
14685: CALL_OW 321
14689: PUSH
14690: LD_INT 2
14692: EQUAL
14693: AND
14694: IFFALSE 14754
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14696: LD_INT 22
14698: PUSH
14699: LD_VAR 0 16
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 35
14710: PUSH
14711: LD_INT 49
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 91
14720: PUSH
14721: LD_VAR 0 1
14725: PUSH
14726: LD_INT 10
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: NOT
14744: IFFALSE 14754
// weapon := ru_time_lapser ;
14746: LD_ADDR_VAR 0 18
14750: PUSH
14751: LD_INT 49
14753: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14754: LD_VAR 0 12
14758: PUSH
14759: LD_INT 1
14761: PUSH
14762: LD_INT 2
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: IN
14769: PUSH
14770: LD_INT 11
14772: PUSH
14773: LD_VAR 0 5
14777: IN
14778: PUSH
14779: LD_INT 30
14781: PUSH
14782: LD_VAR 0 5
14786: IN
14787: OR
14788: AND
14789: PUSH
14790: LD_INT 6
14792: PPUSH
14793: LD_VAR 0 16
14797: PPUSH
14798: CALL_OW 321
14802: PUSH
14803: LD_INT 2
14805: EQUAL
14806: AND
14807: IFFALSE 14972
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14809: LD_INT 22
14811: PUSH
14812: LD_VAR 0 16
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 2
14823: PUSH
14824: LD_INT 35
14826: PUSH
14827: LD_INT 11
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 35
14836: PUSH
14837: LD_INT 30
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 91
14851: PUSH
14852: LD_VAR 0 1
14856: PUSH
14857: LD_INT 18
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: NOT
14875: PUSH
14876: LD_INT 22
14878: PUSH
14879: LD_VAR 0 16
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 2
14890: PUSH
14891: LD_INT 30
14893: PUSH
14894: LD_INT 32
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 30
14903: PUSH
14904: LD_INT 33
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: LIST
14915: PUSH
14916: LD_INT 91
14918: PUSH
14919: LD_VAR 0 1
14923: PUSH
14924: LD_INT 12
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: LIST
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: LIST
14936: PUSH
14937: EMPTY
14938: LIST
14939: PPUSH
14940: CALL_OW 69
14944: PUSH
14945: LD_INT 2
14947: GREATER
14948: AND
14949: IFFALSE 14972
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14951: LD_ADDR_VAR 0 18
14955: PUSH
14956: LD_INT 11
14958: PUSH
14959: LD_INT 30
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_VAR 0 12
14970: ARRAY
14971: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14972: LD_VAR 0 18
14976: NOT
14977: PUSH
14978: LD_INT 40
14980: PPUSH
14981: LD_VAR 0 16
14985: PPUSH
14986: CALL_OW 321
14990: PUSH
14991: LD_INT 2
14993: EQUAL
14994: AND
14995: PUSH
14996: LD_INT 7
14998: PUSH
14999: LD_VAR 0 5
15003: IN
15004: PUSH
15005: LD_INT 28
15007: PUSH
15008: LD_VAR 0 5
15012: IN
15013: OR
15014: PUSH
15015: LD_INT 45
15017: PUSH
15018: LD_VAR 0 5
15022: IN
15023: OR
15024: AND
15025: IFFALSE 15279
// begin hex := GetHexInfo ( x , y ) ;
15027: LD_ADDR_VAR 0 4
15031: PUSH
15032: LD_VAR 0 10
15036: PPUSH
15037: LD_VAR 0 11
15041: PPUSH
15042: CALL_OW 546
15046: ST_TO_ADDR
// if hex [ 1 ] then
15047: LD_VAR 0 4
15051: PUSH
15052: LD_INT 1
15054: ARRAY
15055: IFFALSE 15059
// exit ;
15057: GO 15462
// height := hex [ 2 ] ;
15059: LD_ADDR_VAR 0 15
15063: PUSH
15064: LD_VAR 0 4
15068: PUSH
15069: LD_INT 2
15071: ARRAY
15072: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15073: LD_ADDR_VAR 0 14
15077: PUSH
15078: LD_INT 0
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: LD_INT 3
15086: PUSH
15087: LD_INT 5
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: ST_TO_ADDR
// for i in tmp do
15096: LD_ADDR_VAR 0 8
15100: PUSH
15101: LD_VAR 0 14
15105: PUSH
15106: FOR_IN
15107: IFFALSE 15277
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15109: LD_ADDR_VAR 0 9
15113: PUSH
15114: LD_VAR 0 10
15118: PPUSH
15119: LD_VAR 0 8
15123: PPUSH
15124: LD_INT 5
15126: PPUSH
15127: CALL_OW 272
15131: PUSH
15132: LD_VAR 0 11
15136: PPUSH
15137: LD_VAR 0 8
15141: PPUSH
15142: LD_INT 5
15144: PPUSH
15145: CALL_OW 273
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15154: LD_VAR 0 9
15158: PUSH
15159: LD_INT 1
15161: ARRAY
15162: PPUSH
15163: LD_VAR 0 9
15167: PUSH
15168: LD_INT 2
15170: ARRAY
15171: PPUSH
15172: CALL_OW 488
15176: IFFALSE 15275
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15178: LD_ADDR_VAR 0 4
15182: PUSH
15183: LD_VAR 0 9
15187: PUSH
15188: LD_INT 1
15190: ARRAY
15191: PPUSH
15192: LD_VAR 0 9
15196: PUSH
15197: LD_INT 2
15199: ARRAY
15200: PPUSH
15201: CALL_OW 546
15205: ST_TO_ADDR
// if hex [ 1 ] then
15206: LD_VAR 0 4
15210: PUSH
15211: LD_INT 1
15213: ARRAY
15214: IFFALSE 15218
// continue ;
15216: GO 15106
// h := hex [ 2 ] ;
15218: LD_ADDR_VAR 0 13
15222: PUSH
15223: LD_VAR 0 4
15227: PUSH
15228: LD_INT 2
15230: ARRAY
15231: ST_TO_ADDR
// if h + 7 < height then
15232: LD_VAR 0 13
15236: PUSH
15237: LD_INT 7
15239: PLUS
15240: PUSH
15241: LD_VAR 0 15
15245: LESS
15246: IFFALSE 15275
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15248: LD_ADDR_VAR 0 18
15252: PUSH
15253: LD_INT 7
15255: PUSH
15256: LD_INT 28
15258: PUSH
15259: LD_INT 45
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: LIST
15266: PUSH
15267: LD_VAR 0 12
15271: ARRAY
15272: ST_TO_ADDR
// break ;
15273: GO 15277
// end ; end ; end ;
15275: GO 15106
15277: POP
15278: POP
// end ; if not weapon then
15279: LD_VAR 0 18
15283: NOT
15284: IFFALSE 15344
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15286: LD_ADDR_VAR 0 5
15290: PUSH
15291: LD_VAR 0 5
15295: PUSH
15296: LD_INT 11
15298: PUSH
15299: LD_INT 30
15301: PUSH
15302: LD_INT 49
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: DIFF
15310: ST_TO_ADDR
// if not list then
15311: LD_VAR 0 5
15315: NOT
15316: IFFALSE 15320
// exit ;
15318: GO 15462
// weapon := list [ rand ( 1 , list ) ] ;
15320: LD_ADDR_VAR 0 18
15324: PUSH
15325: LD_VAR 0 5
15329: PUSH
15330: LD_INT 1
15332: PPUSH
15333: LD_VAR 0 5
15337: PPUSH
15338: CALL_OW 12
15342: ARRAY
15343: ST_TO_ADDR
// end ; if weapon then
15344: LD_VAR 0 18
15348: IFFALSE 15462
// begin tmp := CostOfWeapon ( weapon ) ;
15350: LD_ADDR_VAR 0 14
15354: PUSH
15355: LD_VAR 0 18
15359: PPUSH
15360: CALL_OW 451
15364: ST_TO_ADDR
// j := GetBase ( tower ) ;
15365: LD_ADDR_VAR 0 9
15369: PUSH
15370: LD_VAR 0 1
15374: PPUSH
15375: CALL_OW 274
15379: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15380: LD_VAR 0 9
15384: PPUSH
15385: LD_INT 1
15387: PPUSH
15388: CALL_OW 275
15392: PUSH
15393: LD_VAR 0 14
15397: PUSH
15398: LD_INT 1
15400: ARRAY
15401: GREATEREQUAL
15402: PUSH
15403: LD_VAR 0 9
15407: PPUSH
15408: LD_INT 2
15410: PPUSH
15411: CALL_OW 275
15415: PUSH
15416: LD_VAR 0 14
15420: PUSH
15421: LD_INT 2
15423: ARRAY
15424: GREATEREQUAL
15425: AND
15426: PUSH
15427: LD_VAR 0 9
15431: PPUSH
15432: LD_INT 3
15434: PPUSH
15435: CALL_OW 275
15439: PUSH
15440: LD_VAR 0 14
15444: PUSH
15445: LD_INT 3
15447: ARRAY
15448: GREATEREQUAL
15449: AND
15450: IFFALSE 15462
// result := weapon ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_VAR 0 18
15461: ST_TO_ADDR
// end ; end ;
15462: LD_VAR 0 3
15466: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15467: LD_INT 0
15469: PPUSH
15470: PPUSH
// result := true ;
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: LD_INT 1
15478: ST_TO_ADDR
// if array1 = array2 then
15479: LD_VAR 0 1
15483: PUSH
15484: LD_VAR 0 2
15488: EQUAL
15489: IFFALSE 15549
// begin for i = 1 to array1 do
15491: LD_ADDR_VAR 0 4
15495: PUSH
15496: DOUBLE
15497: LD_INT 1
15499: DEC
15500: ST_TO_ADDR
15501: LD_VAR 0 1
15505: PUSH
15506: FOR_TO
15507: IFFALSE 15545
// if array1 [ i ] <> array2 [ i ] then
15509: LD_VAR 0 1
15513: PUSH
15514: LD_VAR 0 4
15518: ARRAY
15519: PUSH
15520: LD_VAR 0 2
15524: PUSH
15525: LD_VAR 0 4
15529: ARRAY
15530: NONEQUAL
15531: IFFALSE 15543
// begin result := false ;
15533: LD_ADDR_VAR 0 3
15537: PUSH
15538: LD_INT 0
15540: ST_TO_ADDR
// break ;
15541: GO 15545
// end ;
15543: GO 15506
15545: POP
15546: POP
// end else
15547: GO 15557
// result := false ;
15549: LD_ADDR_VAR 0 3
15553: PUSH
15554: LD_INT 0
15556: ST_TO_ADDR
// end ;
15557: LD_VAR 0 3
15561: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15562: LD_INT 0
15564: PPUSH
15565: PPUSH
// if not array1 or not array2 then
15566: LD_VAR 0 1
15570: NOT
15571: PUSH
15572: LD_VAR 0 2
15576: NOT
15577: OR
15578: IFFALSE 15582
// exit ;
15580: GO 15646
// result := true ;
15582: LD_ADDR_VAR 0 3
15586: PUSH
15587: LD_INT 1
15589: ST_TO_ADDR
// for i = 1 to array1 do
15590: LD_ADDR_VAR 0 4
15594: PUSH
15595: DOUBLE
15596: LD_INT 1
15598: DEC
15599: ST_TO_ADDR
15600: LD_VAR 0 1
15604: PUSH
15605: FOR_TO
15606: IFFALSE 15644
// if array1 [ i ] <> array2 [ i ] then
15608: LD_VAR 0 1
15612: PUSH
15613: LD_VAR 0 4
15617: ARRAY
15618: PUSH
15619: LD_VAR 0 2
15623: PUSH
15624: LD_VAR 0 4
15628: ARRAY
15629: NONEQUAL
15630: IFFALSE 15642
// begin result := false ;
15632: LD_ADDR_VAR 0 3
15636: PUSH
15637: LD_INT 0
15639: ST_TO_ADDR
// break ;
15640: GO 15644
// end ;
15642: GO 15605
15644: POP
15645: POP
// end ;
15646: LD_VAR 0 3
15650: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15651: LD_INT 0
15653: PPUSH
15654: PPUSH
15655: PPUSH
// pom := GetBase ( fac ) ;
15656: LD_ADDR_VAR 0 5
15660: PUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL_OW 274
15670: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15671: LD_ADDR_VAR 0 4
15675: PUSH
15676: LD_VAR 0 2
15680: PUSH
15681: LD_INT 1
15683: ARRAY
15684: PPUSH
15685: LD_VAR 0 2
15689: PUSH
15690: LD_INT 2
15692: ARRAY
15693: PPUSH
15694: LD_VAR 0 2
15698: PUSH
15699: LD_INT 3
15701: ARRAY
15702: PPUSH
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 4
15710: ARRAY
15711: PPUSH
15712: CALL_OW 449
15716: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15717: LD_ADDR_VAR 0 3
15721: PUSH
15722: LD_VAR 0 5
15726: PPUSH
15727: LD_INT 1
15729: PPUSH
15730: CALL_OW 275
15734: PUSH
15735: LD_VAR 0 4
15739: PUSH
15740: LD_INT 1
15742: ARRAY
15743: GREATEREQUAL
15744: PUSH
15745: LD_VAR 0 5
15749: PPUSH
15750: LD_INT 2
15752: PPUSH
15753: CALL_OW 275
15757: PUSH
15758: LD_VAR 0 4
15762: PUSH
15763: LD_INT 2
15765: ARRAY
15766: GREATEREQUAL
15767: AND
15768: PUSH
15769: LD_VAR 0 5
15773: PPUSH
15774: LD_INT 3
15776: PPUSH
15777: CALL_OW 275
15781: PUSH
15782: LD_VAR 0 4
15786: PUSH
15787: LD_INT 3
15789: ARRAY
15790: GREATEREQUAL
15791: AND
15792: ST_TO_ADDR
// end ;
15793: LD_VAR 0 3
15797: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15798: LD_INT 0
15800: PPUSH
15801: PPUSH
15802: PPUSH
15803: PPUSH
// pom := GetBase ( building ) ;
15804: LD_ADDR_VAR 0 3
15808: PUSH
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 274
15818: ST_TO_ADDR
// if not pom then
15819: LD_VAR 0 3
15823: NOT
15824: IFFALSE 15828
// exit ;
15826: GO 15998
// btype := GetBType ( building ) ;
15828: LD_ADDR_VAR 0 5
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 266
15842: ST_TO_ADDR
// if btype = b_armoury then
15843: LD_VAR 0 5
15847: PUSH
15848: LD_INT 4
15850: EQUAL
15851: IFFALSE 15861
// btype := b_barracks ;
15853: LD_ADDR_VAR 0 5
15857: PUSH
15858: LD_INT 5
15860: ST_TO_ADDR
// if btype = b_depot then
15861: LD_VAR 0 5
15865: PUSH
15866: LD_INT 0
15868: EQUAL
15869: IFFALSE 15879
// btype := b_warehouse ;
15871: LD_ADDR_VAR 0 5
15875: PUSH
15876: LD_INT 1
15878: ST_TO_ADDR
// if btype = b_workshop then
15879: LD_VAR 0 5
15883: PUSH
15884: LD_INT 2
15886: EQUAL
15887: IFFALSE 15897
// btype := b_factory ;
15889: LD_ADDR_VAR 0 5
15893: PUSH
15894: LD_INT 3
15896: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15897: LD_ADDR_VAR 0 4
15901: PUSH
15902: LD_VAR 0 5
15906: PPUSH
15907: LD_VAR 0 1
15911: PPUSH
15912: CALL_OW 248
15916: PPUSH
15917: CALL_OW 450
15921: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15922: LD_ADDR_VAR 0 2
15926: PUSH
15927: LD_VAR 0 3
15931: PPUSH
15932: LD_INT 1
15934: PPUSH
15935: CALL_OW 275
15939: PUSH
15940: LD_VAR 0 4
15944: PUSH
15945: LD_INT 1
15947: ARRAY
15948: GREATEREQUAL
15949: PUSH
15950: LD_VAR 0 3
15954: PPUSH
15955: LD_INT 2
15957: PPUSH
15958: CALL_OW 275
15962: PUSH
15963: LD_VAR 0 4
15967: PUSH
15968: LD_INT 2
15970: ARRAY
15971: GREATEREQUAL
15972: AND
15973: PUSH
15974: LD_VAR 0 3
15978: PPUSH
15979: LD_INT 3
15981: PPUSH
15982: CALL_OW 275
15986: PUSH
15987: LD_VAR 0 4
15991: PUSH
15992: LD_INT 3
15994: ARRAY
15995: GREATEREQUAL
15996: AND
15997: ST_TO_ADDR
// end ;
15998: LD_VAR 0 2
16002: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16003: LD_INT 0
16005: PPUSH
16006: PPUSH
16007: PPUSH
// pom := GetBase ( building ) ;
16008: LD_ADDR_VAR 0 4
16012: PUSH
16013: LD_VAR 0 1
16017: PPUSH
16018: CALL_OW 274
16022: ST_TO_ADDR
// if not pom then
16023: LD_VAR 0 4
16027: NOT
16028: IFFALSE 16032
// exit ;
16030: GO 16133
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16032: LD_ADDR_VAR 0 5
16036: PUSH
16037: LD_VAR 0 2
16041: PPUSH
16042: LD_VAR 0 1
16046: PPUSH
16047: CALL_OW 248
16051: PPUSH
16052: CALL_OW 450
16056: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16057: LD_ADDR_VAR 0 3
16061: PUSH
16062: LD_VAR 0 4
16066: PPUSH
16067: LD_INT 1
16069: PPUSH
16070: CALL_OW 275
16074: PUSH
16075: LD_VAR 0 5
16079: PUSH
16080: LD_INT 1
16082: ARRAY
16083: GREATEREQUAL
16084: PUSH
16085: LD_VAR 0 4
16089: PPUSH
16090: LD_INT 2
16092: PPUSH
16093: CALL_OW 275
16097: PUSH
16098: LD_VAR 0 5
16102: PUSH
16103: LD_INT 2
16105: ARRAY
16106: GREATEREQUAL
16107: AND
16108: PUSH
16109: LD_VAR 0 4
16113: PPUSH
16114: LD_INT 3
16116: PPUSH
16117: CALL_OW 275
16121: PUSH
16122: LD_VAR 0 5
16126: PUSH
16127: LD_INT 3
16129: ARRAY
16130: GREATEREQUAL
16131: AND
16132: ST_TO_ADDR
// end ;
16133: LD_VAR 0 3
16137: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16138: LD_INT 0
16140: PPUSH
16141: PPUSH
16142: PPUSH
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
16149: PPUSH
16150: PPUSH
// result := false ;
16151: LD_ADDR_VAR 0 8
16155: PUSH
16156: LD_INT 0
16158: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16159: LD_VAR 0 5
16163: NOT
16164: PUSH
16165: LD_VAR 0 1
16169: NOT
16170: OR
16171: PUSH
16172: LD_VAR 0 2
16176: NOT
16177: OR
16178: PUSH
16179: LD_VAR 0 3
16183: NOT
16184: OR
16185: IFFALSE 16189
// exit ;
16187: GO 17003
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16189: LD_ADDR_VAR 0 14
16193: PUSH
16194: LD_VAR 0 1
16198: PPUSH
16199: LD_VAR 0 2
16203: PPUSH
16204: LD_VAR 0 3
16208: PPUSH
16209: LD_VAR 0 4
16213: PPUSH
16214: LD_VAR 0 5
16218: PUSH
16219: LD_INT 1
16221: ARRAY
16222: PPUSH
16223: CALL_OW 248
16227: PPUSH
16228: LD_INT 0
16230: PPUSH
16231: CALL 17840 0 6
16235: ST_TO_ADDR
// if not hexes then
16236: LD_VAR 0 14
16240: NOT
16241: IFFALSE 16245
// exit ;
16243: GO 17003
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16245: LD_ADDR_VAR 0 17
16249: PUSH
16250: LD_VAR 0 5
16254: PPUSH
16255: LD_INT 22
16257: PUSH
16258: LD_VAR 0 13
16262: PPUSH
16263: CALL_OW 255
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 2
16274: PUSH
16275: LD_INT 30
16277: PUSH
16278: LD_INT 0
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 30
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PPUSH
16304: CALL_OW 72
16308: ST_TO_ADDR
// for i = 1 to hexes do
16309: LD_ADDR_VAR 0 9
16313: PUSH
16314: DOUBLE
16315: LD_INT 1
16317: DEC
16318: ST_TO_ADDR
16319: LD_VAR 0 14
16323: PUSH
16324: FOR_TO
16325: IFFALSE 17001
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16327: LD_ADDR_VAR 0 13
16331: PUSH
16332: LD_VAR 0 14
16336: PUSH
16337: LD_VAR 0 9
16341: ARRAY
16342: PUSH
16343: LD_INT 1
16345: ARRAY
16346: PPUSH
16347: LD_VAR 0 14
16351: PUSH
16352: LD_VAR 0 9
16356: ARRAY
16357: PUSH
16358: LD_INT 2
16360: ARRAY
16361: PPUSH
16362: CALL_OW 428
16366: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16367: LD_VAR 0 14
16371: PUSH
16372: LD_VAR 0 9
16376: ARRAY
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_VAR 0 14
16386: PUSH
16387: LD_VAR 0 9
16391: ARRAY
16392: PUSH
16393: LD_INT 2
16395: ARRAY
16396: PPUSH
16397: CALL_OW 351
16401: PUSH
16402: LD_VAR 0 14
16406: PUSH
16407: LD_VAR 0 9
16411: ARRAY
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_VAR 0 14
16421: PUSH
16422: LD_VAR 0 9
16426: ARRAY
16427: PUSH
16428: LD_INT 2
16430: ARRAY
16431: PPUSH
16432: CALL_OW 488
16436: NOT
16437: OR
16438: PUSH
16439: LD_VAR 0 13
16443: PPUSH
16444: CALL_OW 247
16448: PUSH
16449: LD_INT 3
16451: EQUAL
16452: OR
16453: IFFALSE 16459
// exit ;
16455: POP
16456: POP
16457: GO 17003
// if not tmp then
16459: LD_VAR 0 13
16463: NOT
16464: IFFALSE 16468
// continue ;
16466: GO 16324
// result := true ;
16468: LD_ADDR_VAR 0 8
16472: PUSH
16473: LD_INT 1
16475: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16476: LD_VAR 0 6
16480: PUSH
16481: LD_VAR 0 13
16485: PPUSH
16486: CALL_OW 247
16490: PUSH
16491: LD_INT 2
16493: EQUAL
16494: AND
16495: PUSH
16496: LD_VAR 0 13
16500: PPUSH
16501: CALL_OW 263
16505: PUSH
16506: LD_INT 1
16508: EQUAL
16509: AND
16510: IFFALSE 16674
// begin if IsDrivenBy ( tmp ) then
16512: LD_VAR 0 13
16516: PPUSH
16517: CALL_OW 311
16521: IFFALSE 16525
// continue ;
16523: GO 16324
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16525: LD_VAR 0 6
16529: PPUSH
16530: LD_INT 3
16532: PUSH
16533: LD_INT 60
16535: PUSH
16536: EMPTY
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 3
16545: PUSH
16546: LD_INT 55
16548: PUSH
16549: EMPTY
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PPUSH
16560: CALL_OW 72
16564: IFFALSE 16672
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16566: LD_ADDR_VAR 0 18
16570: PUSH
16571: LD_VAR 0 6
16575: PPUSH
16576: LD_INT 3
16578: PUSH
16579: LD_INT 60
16581: PUSH
16582: EMPTY
16583: LIST
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 3
16591: PUSH
16592: LD_INT 55
16594: PUSH
16595: EMPTY
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PPUSH
16606: CALL_OW 72
16610: PUSH
16611: LD_INT 1
16613: ARRAY
16614: ST_TO_ADDR
// if IsInUnit ( driver ) then
16615: LD_VAR 0 18
16619: PPUSH
16620: CALL_OW 310
16624: IFFALSE 16635
// ComExit ( driver ) ;
16626: LD_VAR 0 18
16630: PPUSH
16631: CALL 41024 0 1
// AddComEnterUnit ( driver , tmp ) ;
16635: LD_VAR 0 18
16639: PPUSH
16640: LD_VAR 0 13
16644: PPUSH
16645: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16649: LD_VAR 0 18
16653: PPUSH
16654: LD_VAR 0 7
16658: PPUSH
16659: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16663: LD_VAR 0 18
16667: PPUSH
16668: CALL_OW 181
// end ; continue ;
16672: GO 16324
// end ; if not cleaners or not tmp in cleaners then
16674: LD_VAR 0 6
16678: NOT
16679: PUSH
16680: LD_VAR 0 13
16684: PUSH
16685: LD_VAR 0 6
16689: IN
16690: NOT
16691: OR
16692: IFFALSE 16999
// begin if dep then
16694: LD_VAR 0 17
16698: IFFALSE 16834
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16700: LD_ADDR_VAR 0 16
16704: PUSH
16705: LD_VAR 0 17
16709: PUSH
16710: LD_INT 1
16712: ARRAY
16713: PPUSH
16714: CALL_OW 250
16718: PPUSH
16719: LD_VAR 0 17
16723: PUSH
16724: LD_INT 1
16726: ARRAY
16727: PPUSH
16728: CALL_OW 254
16732: PPUSH
16733: LD_INT 5
16735: PPUSH
16736: CALL_OW 272
16740: PUSH
16741: LD_VAR 0 17
16745: PUSH
16746: LD_INT 1
16748: ARRAY
16749: PPUSH
16750: CALL_OW 251
16754: PPUSH
16755: LD_VAR 0 17
16759: PUSH
16760: LD_INT 1
16762: ARRAY
16763: PPUSH
16764: CALL_OW 254
16768: PPUSH
16769: LD_INT 5
16771: PPUSH
16772: CALL_OW 273
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16781: LD_VAR 0 16
16785: PUSH
16786: LD_INT 1
16788: ARRAY
16789: PPUSH
16790: LD_VAR 0 16
16794: PUSH
16795: LD_INT 2
16797: ARRAY
16798: PPUSH
16799: CALL_OW 488
16803: IFFALSE 16834
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16805: LD_VAR 0 13
16809: PPUSH
16810: LD_VAR 0 16
16814: PUSH
16815: LD_INT 1
16817: ARRAY
16818: PPUSH
16819: LD_VAR 0 16
16823: PUSH
16824: LD_INT 2
16826: ARRAY
16827: PPUSH
16828: CALL_OW 111
// continue ;
16832: GO 16324
// end ; end ; r := GetDir ( tmp ) ;
16834: LD_ADDR_VAR 0 15
16838: PUSH
16839: LD_VAR 0 13
16843: PPUSH
16844: CALL_OW 254
16848: ST_TO_ADDR
// if r = 5 then
16849: LD_VAR 0 15
16853: PUSH
16854: LD_INT 5
16856: EQUAL
16857: IFFALSE 16867
// r := 0 ;
16859: LD_ADDR_VAR 0 15
16863: PUSH
16864: LD_INT 0
16866: ST_TO_ADDR
// for j = r to 5 do
16867: LD_ADDR_VAR 0 10
16871: PUSH
16872: DOUBLE
16873: LD_VAR 0 15
16877: DEC
16878: ST_TO_ADDR
16879: LD_INT 5
16881: PUSH
16882: FOR_TO
16883: IFFALSE 16997
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16885: LD_ADDR_VAR 0 11
16889: PUSH
16890: LD_VAR 0 13
16894: PPUSH
16895: CALL_OW 250
16899: PPUSH
16900: LD_VAR 0 10
16904: PPUSH
16905: LD_INT 2
16907: PPUSH
16908: CALL_OW 272
16912: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16913: LD_ADDR_VAR 0 12
16917: PUSH
16918: LD_VAR 0 13
16922: PPUSH
16923: CALL_OW 251
16927: PPUSH
16928: LD_VAR 0 10
16932: PPUSH
16933: LD_INT 2
16935: PPUSH
16936: CALL_OW 273
16940: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16941: LD_VAR 0 11
16945: PPUSH
16946: LD_VAR 0 12
16950: PPUSH
16951: CALL_OW 488
16955: PUSH
16956: LD_VAR 0 11
16960: PPUSH
16961: LD_VAR 0 12
16965: PPUSH
16966: CALL_OW 428
16970: NOT
16971: AND
16972: IFFALSE 16995
// begin ComMoveXY ( tmp , _x , _y ) ;
16974: LD_VAR 0 13
16978: PPUSH
16979: LD_VAR 0 11
16983: PPUSH
16984: LD_VAR 0 12
16988: PPUSH
16989: CALL_OW 111
// break ;
16993: GO 16997
// end ; end ;
16995: GO 16882
16997: POP
16998: POP
// end ; end ;
16999: GO 16324
17001: POP
17002: POP
// end ;
17003: LD_VAR 0 8
17007: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
17008: LD_INT 0
17010: PPUSH
17011: PPUSH
17012: PPUSH
17013: PPUSH
17014: PPUSH
17015: PPUSH
17016: PPUSH
17017: PPUSH
17018: PPUSH
17019: PPUSH
// result := false ;
17020: LD_ADDR_VAR 0 6
17024: PUSH
17025: LD_INT 0
17027: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17028: LD_VAR 0 1
17032: NOT
17033: PUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL_OW 266
17043: PUSH
17044: LD_INT 0
17046: PUSH
17047: LD_INT 1
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: IN
17054: NOT
17055: OR
17056: PUSH
17057: LD_VAR 0 2
17061: NOT
17062: OR
17063: PUSH
17064: LD_VAR 0 5
17068: PUSH
17069: LD_INT 0
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: LD_INT 3
17080: PUSH
17081: LD_INT 4
17083: PUSH
17084: LD_INT 5
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: IN
17095: NOT
17096: OR
17097: PUSH
17098: LD_VAR 0 3
17102: PPUSH
17103: LD_VAR 0 4
17107: PPUSH
17108: CALL_OW 488
17112: NOT
17113: OR
17114: IFFALSE 17118
// exit ;
17116: GO 17835
// pom := GetBase ( depot ) ;
17118: LD_ADDR_VAR 0 10
17122: PUSH
17123: LD_VAR 0 1
17127: PPUSH
17128: CALL_OW 274
17132: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17133: LD_ADDR_VAR 0 11
17137: PUSH
17138: LD_VAR 0 2
17142: PPUSH
17143: LD_VAR 0 1
17147: PPUSH
17148: CALL_OW 248
17152: PPUSH
17153: CALL_OW 450
17157: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17158: LD_VAR 0 10
17162: PPUSH
17163: LD_INT 1
17165: PPUSH
17166: CALL_OW 275
17170: PUSH
17171: LD_VAR 0 11
17175: PUSH
17176: LD_INT 1
17178: ARRAY
17179: GREATEREQUAL
17180: PUSH
17181: LD_VAR 0 10
17185: PPUSH
17186: LD_INT 2
17188: PPUSH
17189: CALL_OW 275
17193: PUSH
17194: LD_VAR 0 11
17198: PUSH
17199: LD_INT 2
17201: ARRAY
17202: GREATEREQUAL
17203: AND
17204: PUSH
17205: LD_VAR 0 10
17209: PPUSH
17210: LD_INT 3
17212: PPUSH
17213: CALL_OW 275
17217: PUSH
17218: LD_VAR 0 11
17222: PUSH
17223: LD_INT 3
17225: ARRAY
17226: GREATEREQUAL
17227: AND
17228: NOT
17229: IFFALSE 17233
// exit ;
17231: GO 17835
// if GetBType ( depot ) = b_depot then
17233: LD_VAR 0 1
17237: PPUSH
17238: CALL_OW 266
17242: PUSH
17243: LD_INT 0
17245: EQUAL
17246: IFFALSE 17258
// dist := 28 else
17248: LD_ADDR_VAR 0 14
17252: PUSH
17253: LD_INT 28
17255: ST_TO_ADDR
17256: GO 17266
// dist := 36 ;
17258: LD_ADDR_VAR 0 14
17262: PUSH
17263: LD_INT 36
17265: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17266: LD_VAR 0 1
17270: PPUSH
17271: LD_VAR 0 3
17275: PPUSH
17276: LD_VAR 0 4
17280: PPUSH
17281: CALL_OW 297
17285: PUSH
17286: LD_VAR 0 14
17290: GREATER
17291: IFFALSE 17295
// exit ;
17293: GO 17835
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17295: LD_ADDR_VAR 0 12
17299: PUSH
17300: LD_VAR 0 2
17304: PPUSH
17305: LD_VAR 0 3
17309: PPUSH
17310: LD_VAR 0 4
17314: PPUSH
17315: LD_VAR 0 5
17319: PPUSH
17320: LD_VAR 0 1
17324: PPUSH
17325: CALL_OW 248
17329: PPUSH
17330: LD_INT 0
17332: PPUSH
17333: CALL 17840 0 6
17337: ST_TO_ADDR
// if not hexes then
17338: LD_VAR 0 12
17342: NOT
17343: IFFALSE 17347
// exit ;
17345: GO 17835
// hex := GetHexInfo ( x , y ) ;
17347: LD_ADDR_VAR 0 15
17351: PUSH
17352: LD_VAR 0 3
17356: PPUSH
17357: LD_VAR 0 4
17361: PPUSH
17362: CALL_OW 546
17366: ST_TO_ADDR
// if hex [ 1 ] then
17367: LD_VAR 0 15
17371: PUSH
17372: LD_INT 1
17374: ARRAY
17375: IFFALSE 17379
// exit ;
17377: GO 17835
// height := hex [ 2 ] ;
17379: LD_ADDR_VAR 0 13
17383: PUSH
17384: LD_VAR 0 15
17388: PUSH
17389: LD_INT 2
17391: ARRAY
17392: ST_TO_ADDR
// for i = 1 to hexes do
17393: LD_ADDR_VAR 0 7
17397: PUSH
17398: DOUBLE
17399: LD_INT 1
17401: DEC
17402: ST_TO_ADDR
17403: LD_VAR 0 12
17407: PUSH
17408: FOR_TO
17409: IFFALSE 17739
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17411: LD_VAR 0 12
17415: PUSH
17416: LD_VAR 0 7
17420: ARRAY
17421: PUSH
17422: LD_INT 1
17424: ARRAY
17425: PPUSH
17426: LD_VAR 0 12
17430: PUSH
17431: LD_VAR 0 7
17435: ARRAY
17436: PUSH
17437: LD_INT 2
17439: ARRAY
17440: PPUSH
17441: CALL_OW 488
17445: NOT
17446: PUSH
17447: LD_VAR 0 12
17451: PUSH
17452: LD_VAR 0 7
17456: ARRAY
17457: PUSH
17458: LD_INT 1
17460: ARRAY
17461: PPUSH
17462: LD_VAR 0 12
17466: PUSH
17467: LD_VAR 0 7
17471: ARRAY
17472: PUSH
17473: LD_INT 2
17475: ARRAY
17476: PPUSH
17477: CALL_OW 428
17481: PUSH
17482: LD_INT 0
17484: GREATER
17485: OR
17486: PUSH
17487: LD_VAR 0 12
17491: PUSH
17492: LD_VAR 0 7
17496: ARRAY
17497: PUSH
17498: LD_INT 1
17500: ARRAY
17501: PPUSH
17502: LD_VAR 0 12
17506: PUSH
17507: LD_VAR 0 7
17511: ARRAY
17512: PUSH
17513: LD_INT 2
17515: ARRAY
17516: PPUSH
17517: CALL_OW 351
17521: OR
17522: IFFALSE 17528
// exit ;
17524: POP
17525: POP
17526: GO 17835
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17528: LD_ADDR_VAR 0 8
17532: PUSH
17533: LD_VAR 0 12
17537: PUSH
17538: LD_VAR 0 7
17542: ARRAY
17543: PUSH
17544: LD_INT 1
17546: ARRAY
17547: PPUSH
17548: LD_VAR 0 12
17552: PUSH
17553: LD_VAR 0 7
17557: ARRAY
17558: PUSH
17559: LD_INT 2
17561: ARRAY
17562: PPUSH
17563: CALL_OW 546
17567: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17568: LD_VAR 0 8
17572: PUSH
17573: LD_INT 1
17575: ARRAY
17576: PUSH
17577: LD_VAR 0 8
17581: PUSH
17582: LD_INT 2
17584: ARRAY
17585: PUSH
17586: LD_VAR 0 13
17590: PUSH
17591: LD_INT 2
17593: PLUS
17594: GREATER
17595: OR
17596: PUSH
17597: LD_VAR 0 8
17601: PUSH
17602: LD_INT 2
17604: ARRAY
17605: PUSH
17606: LD_VAR 0 13
17610: PUSH
17611: LD_INT 2
17613: MINUS
17614: LESS
17615: OR
17616: PUSH
17617: LD_VAR 0 8
17621: PUSH
17622: LD_INT 3
17624: ARRAY
17625: PUSH
17626: LD_INT 0
17628: PUSH
17629: LD_INT 8
17631: PUSH
17632: LD_INT 9
17634: PUSH
17635: LD_INT 10
17637: PUSH
17638: LD_INT 11
17640: PUSH
17641: LD_INT 12
17643: PUSH
17644: LD_INT 13
17646: PUSH
17647: LD_INT 16
17649: PUSH
17650: LD_INT 17
17652: PUSH
17653: LD_INT 18
17655: PUSH
17656: LD_INT 19
17658: PUSH
17659: LD_INT 20
17661: PUSH
17662: LD_INT 21
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: IN
17680: NOT
17681: OR
17682: PUSH
17683: LD_VAR 0 8
17687: PUSH
17688: LD_INT 5
17690: ARRAY
17691: NOT
17692: OR
17693: PUSH
17694: LD_VAR 0 8
17698: PUSH
17699: LD_INT 6
17701: ARRAY
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: LD_INT 2
17708: PUSH
17709: LD_INT 7
17711: PUSH
17712: LD_INT 9
17714: PUSH
17715: LD_INT 10
17717: PUSH
17718: LD_INT 11
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: IN
17729: NOT
17730: OR
17731: IFFALSE 17737
// exit ;
17733: POP
17734: POP
17735: GO 17835
// end ;
17737: GO 17408
17739: POP
17740: POP
// side := GetSide ( depot ) ;
17741: LD_ADDR_VAR 0 9
17745: PUSH
17746: LD_VAR 0 1
17750: PPUSH
17751: CALL_OW 255
17755: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17756: LD_VAR 0 9
17760: PPUSH
17761: LD_VAR 0 3
17765: PPUSH
17766: LD_VAR 0 4
17770: PPUSH
17771: LD_INT 20
17773: PPUSH
17774: CALL 10156 0 4
17778: PUSH
17779: LD_INT 4
17781: ARRAY
17782: IFFALSE 17786
// exit ;
17784: GO 17835
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17786: LD_VAR 0 2
17790: PUSH
17791: LD_INT 29
17793: PUSH
17794: LD_INT 30
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: IN
17801: PUSH
17802: LD_VAR 0 3
17806: PPUSH
17807: LD_VAR 0 4
17811: PPUSH
17812: LD_VAR 0 9
17816: PPUSH
17817: CALL_OW 440
17821: NOT
17822: AND
17823: IFFALSE 17827
// exit ;
17825: GO 17835
// result := true ;
17827: LD_ADDR_VAR 0 6
17831: PUSH
17832: LD_INT 1
17834: ST_TO_ADDR
// end ;
17835: LD_VAR 0 6
17839: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17840: LD_INT 0
17842: PPUSH
17843: PPUSH
17844: PPUSH
17845: PPUSH
17846: PPUSH
17847: PPUSH
17848: PPUSH
17849: PPUSH
17850: PPUSH
17851: PPUSH
17852: PPUSH
17853: PPUSH
17854: PPUSH
17855: PPUSH
17856: PPUSH
17857: PPUSH
17858: PPUSH
17859: PPUSH
17860: PPUSH
17861: PPUSH
17862: PPUSH
17863: PPUSH
17864: PPUSH
17865: PPUSH
17866: PPUSH
17867: PPUSH
17868: PPUSH
17869: PPUSH
17870: PPUSH
17871: PPUSH
17872: PPUSH
17873: PPUSH
17874: PPUSH
17875: PPUSH
17876: PPUSH
17877: PPUSH
17878: PPUSH
17879: PPUSH
17880: PPUSH
17881: PPUSH
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
17886: PPUSH
17887: PPUSH
17888: PPUSH
17889: PPUSH
17890: PPUSH
17891: PPUSH
17892: PPUSH
17893: PPUSH
17894: PPUSH
17895: PPUSH
17896: PPUSH
17897: PPUSH
17898: PPUSH
17899: PPUSH
// result = [ ] ;
17900: LD_ADDR_VAR 0 7
17904: PUSH
17905: EMPTY
17906: ST_TO_ADDR
// temp_list = [ ] ;
17907: LD_ADDR_VAR 0 9
17911: PUSH
17912: EMPTY
17913: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17914: LD_VAR 0 4
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: LD_INT 3
17930: PUSH
17931: LD_INT 4
17933: PUSH
17934: LD_INT 5
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: IN
17945: NOT
17946: PUSH
17947: LD_VAR 0 1
17951: PUSH
17952: LD_INT 0
17954: PUSH
17955: LD_INT 1
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: IN
17962: PUSH
17963: LD_VAR 0 5
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: LD_INT 2
17973: PUSH
17974: LD_INT 3
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: LIST
17981: IN
17982: NOT
17983: AND
17984: OR
17985: IFFALSE 17989
// exit ;
17987: GO 36380
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17989: LD_VAR 0 1
17993: PUSH
17994: LD_INT 6
17996: PUSH
17997: LD_INT 7
17999: PUSH
18000: LD_INT 8
18002: PUSH
18003: LD_INT 13
18005: PUSH
18006: LD_INT 12
18008: PUSH
18009: LD_INT 15
18011: PUSH
18012: LD_INT 11
18014: PUSH
18015: LD_INT 14
18017: PUSH
18018: LD_INT 10
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: IN
18032: IFFALSE 18042
// btype = b_lab ;
18034: LD_ADDR_VAR 0 1
18038: PUSH
18039: LD_INT 6
18041: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18042: LD_VAR 0 6
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: LD_INT 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: LIST
18060: IN
18061: NOT
18062: PUSH
18063: LD_VAR 0 1
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: LD_INT 2
18076: PUSH
18077: LD_INT 3
18079: PUSH
18080: LD_INT 6
18082: PUSH
18083: LD_INT 36
18085: PUSH
18086: LD_INT 4
18088: PUSH
18089: LD_INT 5
18091: PUSH
18092: LD_INT 31
18094: PUSH
18095: LD_INT 32
18097: PUSH
18098: LD_INT 33
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: IN
18114: NOT
18115: PUSH
18116: LD_VAR 0 6
18120: PUSH
18121: LD_INT 1
18123: EQUAL
18124: AND
18125: OR
18126: PUSH
18127: LD_VAR 0 1
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: LD_INT 3
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: IN
18142: NOT
18143: PUSH
18144: LD_VAR 0 6
18148: PUSH
18149: LD_INT 2
18151: EQUAL
18152: AND
18153: OR
18154: IFFALSE 18164
// mode = 0 ;
18156: LD_ADDR_VAR 0 6
18160: PUSH
18161: LD_INT 0
18163: ST_TO_ADDR
// case mode of 0 :
18164: LD_VAR 0 6
18168: PUSH
18169: LD_INT 0
18171: DOUBLE
18172: EQUAL
18173: IFTRUE 18177
18175: GO 29630
18177: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18178: LD_ADDR_VAR 0 11
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 0
18195: PUSH
18196: LD_INT 1
18198: NEG
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 0
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 1
18236: NEG
18237: PUSH
18238: LD_INT 0
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 1
18247: NEG
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 1
18259: NEG
18260: PUSH
18261: LD_INT 2
18263: NEG
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: LD_INT 2
18274: NEG
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 1
18282: PUSH
18283: LD_INT 1
18285: NEG
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: LD_INT 2
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: LD_INT 2
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 1
18313: NEG
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: LD_INT 3
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 0
18334: PUSH
18335: LD_INT 3
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 1
18344: NEG
18345: PUSH
18346: LD_INT 2
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18371: LD_ADDR_VAR 0 12
18375: PUSH
18376: LD_INT 0
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: LD_INT 1
18444: NEG
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: LD_INT 1
18455: NEG
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 2
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 1
18483: NEG
18484: PUSH
18485: LD_INT 1
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 2
18494: NEG
18495: PUSH
18496: LD_INT 0
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: NEG
18506: PUSH
18507: LD_INT 1
18509: NEG
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 2
18517: NEG
18518: PUSH
18519: LD_INT 1
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 3
18528: NEG
18529: PUSH
18530: LD_INT 0
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 3
18539: NEG
18540: PUSH
18541: LD_INT 1
18543: NEG
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18567: LD_ADDR_VAR 0 13
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: LD_INT 0
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 0
18584: PUSH
18585: LD_INT 1
18587: NEG
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 1
18595: PUSH
18596: LD_INT 0
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: LD_INT 1
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 0
18615: PUSH
18616: LD_INT 1
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 1
18625: NEG
18626: PUSH
18627: LD_INT 0
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: LD_INT 1
18640: NEG
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 1
18648: NEG
18649: PUSH
18650: LD_INT 2
18652: NEG
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 2
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 2
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 1
18680: PUSH
18681: LD_INT 2
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 2
18690: NEG
18691: PUSH
18692: LD_INT 1
18694: NEG
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 2
18702: NEG
18703: PUSH
18704: LD_INT 2
18706: NEG
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 2
18714: NEG
18715: PUSH
18716: LD_INT 3
18718: NEG
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 3
18726: NEG
18727: PUSH
18728: LD_INT 2
18730: NEG
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 3
18738: NEG
18739: PUSH
18740: LD_INT 3
18742: NEG
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18766: LD_ADDR_VAR 0 14
18770: PUSH
18771: LD_INT 0
18773: PUSH
18774: LD_INT 0
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 0
18783: PUSH
18784: LD_INT 1
18786: NEG
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: LD_INT 0
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 0
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 1
18824: NEG
18825: PUSH
18826: LD_INT 0
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 1
18835: NEG
18836: PUSH
18837: LD_INT 1
18839: NEG
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 1
18847: NEG
18848: PUSH
18849: LD_INT 2
18851: NEG
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 0
18859: PUSH
18860: LD_INT 2
18862: NEG
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: LD_INT 1
18873: NEG
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: PUSH
18882: LD_INT 2
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 0
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 1
18901: NEG
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: LD_INT 3
18916: NEG
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 0
18924: PUSH
18925: LD_INT 3
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: LD_INT 2
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18962: LD_ADDR_VAR 0 15
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 0
18979: PUSH
18980: LD_INT 1
18982: NEG
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: LD_INT 0
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: LD_INT 1
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 1
19020: NEG
19021: PUSH
19022: LD_INT 0
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 1
19031: NEG
19032: PUSH
19033: LD_INT 1
19035: NEG
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: LD_INT 1
19046: NEG
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 2
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: LD_INT 1
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 2
19085: NEG
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 2
19096: NEG
19097: PUSH
19098: LD_INT 1
19100: NEG
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 1
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 3
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 3
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19155: LD_ADDR_VAR 0 16
19159: PUSH
19160: LD_INT 0
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 1
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: LD_INT 1
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 1
19213: NEG
19214: PUSH
19215: LD_INT 0
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: LD_INT 1
19228: NEG
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 1
19236: NEG
19237: PUSH
19238: LD_INT 2
19240: NEG
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: LD_INT 1
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 2
19278: NEG
19279: PUSH
19280: LD_INT 1
19282: NEG
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 2
19290: NEG
19291: PUSH
19292: LD_INT 2
19294: NEG
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 3
19302: PUSH
19303: LD_INT 2
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 3
19312: PUSH
19313: LD_INT 3
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 2
19322: PUSH
19323: LD_INT 3
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19348: LD_ADDR_VAR 0 17
19352: PUSH
19353: LD_INT 0
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 0
19365: PUSH
19366: LD_INT 1
19368: NEG
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: LD_INT 0
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 0
19396: PUSH
19397: LD_INT 1
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 1
19406: NEG
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 1
19417: NEG
19418: PUSH
19419: LD_INT 1
19421: NEG
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: NEG
19430: PUSH
19431: LD_INT 2
19433: NEG
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 0
19441: PUSH
19442: LD_INT 2
19444: NEG
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: LD_INT 1
19455: NEG
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: LD_INT 1
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 2
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 0
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: NEG
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 2
19524: NEG
19525: PUSH
19526: LD_INT 0
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 2
19535: NEG
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 2
19547: NEG
19548: PUSH
19549: LD_INT 2
19551: NEG
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19578: LD_ADDR_VAR 0 18
19582: PUSH
19583: LD_INT 0
19585: PUSH
19586: LD_INT 0
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 0
19595: PUSH
19596: LD_INT 1
19598: NEG
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 1
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 0
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 1
19636: NEG
19637: PUSH
19638: LD_INT 0
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 1
19647: NEG
19648: PUSH
19649: LD_INT 1
19651: NEG
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: LD_INT 2
19663: NEG
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 0
19671: PUSH
19672: LD_INT 2
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 1
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 2
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 0
19733: PUSH
19734: LD_INT 2
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 1
19743: NEG
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 2
19754: NEG
19755: PUSH
19756: LD_INT 0
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: NEG
19766: PUSH
19767: LD_INT 1
19769: NEG
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 2
19777: NEG
19778: PUSH
19779: LD_INT 2
19781: NEG
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19808: LD_ADDR_VAR 0 19
19812: PUSH
19813: LD_INT 0
19815: PUSH
19816: LD_INT 0
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: LD_INT 1
19828: NEG
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 1
19877: NEG
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: LD_INT 2
19893: NEG
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 0
19901: PUSH
19902: LD_INT 2
19904: NEG
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 0
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: LD_INT 1
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: NEG
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: NEG
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: NEG
20008: PUSH
20009: LD_INT 2
20011: NEG
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20038: LD_ADDR_VAR 0 20
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: LD_INT 0
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 0
20055: PUSH
20056: LD_INT 1
20058: NEG
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 1
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 1
20096: NEG
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 1
20107: NEG
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: LD_INT 2
20123: NEG
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: LD_INT 2
20134: NEG
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: LD_INT 1
20145: NEG
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 2
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: LD_INT 1
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 2
20214: NEG
20215: PUSH
20216: LD_INT 0
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 2
20225: NEG
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: NEG
20238: PUSH
20239: LD_INT 2
20241: NEG
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20268: LD_ADDR_VAR 0 21
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 0
20285: PUSH
20286: LD_INT 1
20288: NEG
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: LD_INT 0
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 1
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 1
20326: NEG
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 1
20349: NEG
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 0
20361: PUSH
20362: LD_INT 2
20364: NEG
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 1
20372: PUSH
20373: LD_INT 1
20375: NEG
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 2
20383: PUSH
20384: LD_INT 0
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 2
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 2
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 0
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: NEG
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 2
20444: NEG
20445: PUSH
20446: LD_INT 0
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: NEG
20456: PUSH
20457: LD_INT 1
20459: NEG
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 2
20467: NEG
20468: PUSH
20469: LD_INT 2
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20498: LD_ADDR_VAR 0 22
20502: PUSH
20503: LD_INT 0
20505: PUSH
20506: LD_INT 0
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 0
20515: PUSH
20516: LD_INT 1
20518: NEG
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 1
20526: PUSH
20527: LD_INT 0
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 1
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 0
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 1
20556: NEG
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 1
20567: NEG
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: LD_INT 2
20583: NEG
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 0
20591: PUSH
20592: LD_INT 2
20594: NEG
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: LD_INT 0
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 2
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 2
20633: PUSH
20634: LD_INT 2
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 1
20663: NEG
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 2
20674: NEG
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: NEG
20686: PUSH
20687: LD_INT 1
20689: NEG
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 2
20697: NEG
20698: PUSH
20699: LD_INT 2
20701: NEG
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20728: LD_ADDR_VAR 0 23
20732: PUSH
20733: LD_INT 0
20735: PUSH
20736: LD_INT 0
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 0
20745: PUSH
20746: LD_INT 1
20748: NEG
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 0
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 1
20786: NEG
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 1
20797: NEG
20798: PUSH
20799: LD_INT 1
20801: NEG
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 1
20809: NEG
20810: PUSH
20811: LD_INT 2
20813: NEG
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: LD_INT 2
20824: NEG
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: LD_INT 1
20835: NEG
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 2
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 1
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 1
20893: NEG
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 2
20904: NEG
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 2
20915: NEG
20916: PUSH
20917: LD_INT 1
20919: NEG
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 2
20927: NEG
20928: PUSH
20929: LD_INT 2
20931: NEG
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: NEG
20940: PUSH
20941: LD_INT 3
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 1
20951: NEG
20952: PUSH
20953: LD_INT 3
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: LD_INT 2
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 1
20977: NEG
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21008: LD_ADDR_VAR 0 24
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 0
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 1
21066: NEG
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: NEG
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: LD_INT 2
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: LD_INT 2
21104: NEG
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 2
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: LD_INT 2
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: LD_INT 2
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: LD_INT 2
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: NEG
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 2
21184: NEG
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: NEG
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: NEG
21208: PUSH
21209: LD_INT 2
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: LD_INT 2
21222: NEG
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: LD_INT 1
21233: NEG
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 3
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 3
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21284: LD_ADDR_VAR 0 25
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: LD_INT 1
21304: NEG
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: LD_INT 0
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 1
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 0
21332: PUSH
21333: LD_INT 1
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: NEG
21354: PUSH
21355: LD_INT 1
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 1
21365: NEG
21366: PUSH
21367: LD_INT 2
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 0
21377: PUSH
21378: LD_INT 2
21380: NEG
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 1
21388: PUSH
21389: LD_INT 1
21391: NEG
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 2
21399: PUSH
21400: LD_INT 0
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 2
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 2
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 1
21429: PUSH
21430: LD_INT 2
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: LD_INT 2
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 1
21449: NEG
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 2
21460: NEG
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 2
21471: NEG
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 2
21483: NEG
21484: PUSH
21485: LD_INT 2
21487: NEG
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 3
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 3
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: LD_INT 3
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: LD_INT 3
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21558: LD_ADDR_VAR 0 26
21562: PUSH
21563: LD_INT 0
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 0
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: NEG
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: NEG
21628: PUSH
21629: LD_INT 1
21631: NEG
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: LD_INT 2
21643: NEG
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 2
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 2
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: PUSH
21704: LD_INT 2
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: LD_INT 2
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 1
21723: NEG
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 2
21734: NEG
21735: PUSH
21736: LD_INT 0
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 2
21745: NEG
21746: PUSH
21747: LD_INT 1
21749: NEG
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 2
21757: NEG
21758: PUSH
21759: LD_INT 2
21761: NEG
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 2
21769: PUSH
21770: LD_INT 3
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: LD_INT 3
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: LD_INT 2
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 2
21800: NEG
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21834: LD_ADDR_VAR 0 27
21838: PUSH
21839: LD_INT 0
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 0
21851: PUSH
21852: LD_INT 1
21854: NEG
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 1
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 1
21903: NEG
21904: PUSH
21905: LD_INT 1
21907: NEG
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 1
21915: NEG
21916: PUSH
21917: LD_INT 2
21919: NEG
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: LD_INT 2
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: PUSH
21939: LD_INT 1
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 0
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: LD_INT 1
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 2
21969: PUSH
21970: LD_INT 2
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: PUSH
21980: LD_INT 2
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 2
22010: NEG
22011: PUSH
22012: LD_INT 0
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 2
22021: NEG
22022: PUSH
22023: LD_INT 1
22025: NEG
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 2
22033: NEG
22034: PUSH
22035: LD_INT 2
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: LD_INT 2
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 2
22056: NEG
22057: PUSH
22058: LD_INT 1
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 3
22067: NEG
22068: PUSH
22069: LD_INT 1
22071: NEG
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 3
22079: NEG
22080: PUSH
22081: LD_INT 2
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22114: LD_ADDR_VAR 0 28
22118: PUSH
22119: LD_INT 0
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: LD_INT 1
22134: NEG
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: LD_INT 0
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 1
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 0
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 1
22172: NEG
22173: PUSH
22174: LD_INT 0
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 1
22183: NEG
22184: PUSH
22185: LD_INT 1
22187: NEG
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: LD_INT 2
22199: NEG
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 0
22207: PUSH
22208: LD_INT 2
22210: NEG
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: LD_INT 1
22221: NEG
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 2
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 2
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: LD_INT 2
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 1
22259: PUSH
22260: LD_INT 2
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 0
22269: PUSH
22270: LD_INT 2
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: LD_INT 1
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 2
22290: NEG
22291: PUSH
22292: LD_INT 0
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 2
22301: NEG
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 2
22313: NEG
22314: PUSH
22315: LD_INT 2
22317: NEG
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 2
22325: NEG
22326: PUSH
22327: LD_INT 3
22329: NEG
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 1
22337: NEG
22338: PUSH
22339: LD_INT 3
22341: NEG
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 3
22349: NEG
22350: PUSH
22351: LD_INT 1
22353: NEG
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 3
22361: NEG
22362: PUSH
22363: LD_INT 2
22365: NEG
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22396: LD_ADDR_VAR 0 29
22400: PUSH
22401: LD_INT 0
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: NEG
22478: PUSH
22479: LD_INT 2
22481: NEG
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: LD_INT 2
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 2
22562: NEG
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 2
22574: NEG
22575: PUSH
22576: LD_INT 2
22578: NEG
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 2
22586: NEG
22587: PUSH
22588: LD_INT 3
22590: NEG
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 3
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: PUSH
22620: LD_INT 3
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 1
22629: NEG
22630: PUSH
22631: LD_INT 2
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 3
22640: NEG
22641: PUSH
22642: LD_INT 2
22644: NEG
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22675: LD_ADDR_VAR 0 30
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: LD_INT 0
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 0
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 1
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 0
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 1
22733: NEG
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: LD_INT 2
22760: NEG
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 0
22768: PUSH
22769: LD_INT 2
22771: NEG
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 2
22790: PUSH
22791: LD_INT 0
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 2
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: LD_INT 1
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 2
22841: NEG
22842: PUSH
22843: LD_INT 0
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 2
22852: NEG
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: NEG
22865: PUSH
22866: LD_INT 3
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: LD_INT 2
22879: NEG
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 3
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 2
22907: NEG
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 3
22918: NEG
22919: PUSH
22920: LD_INT 1
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22953: LD_ADDR_VAR 0 31
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 1
23011: NEG
23012: PUSH
23013: LD_INT 0
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 1
23022: NEG
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 1
23034: NEG
23035: PUSH
23036: LD_INT 2
23038: NEG
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 1
23046: PUSH
23047: LD_INT 1
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: LD_INT 0
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 2
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: PUSH
23088: LD_INT 2
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 0
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 2
23118: NEG
23119: PUSH
23120: LD_INT 1
23122: NEG
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: LD_INT 2
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: NEG
23143: PUSH
23144: LD_INT 3
23146: NEG
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 2
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 3
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 1
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 1
23185: NEG
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 3
23196: NEG
23197: PUSH
23198: LD_INT 2
23200: NEG
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23231: LD_ADDR_VAR 0 32
23235: PUSH
23236: LD_INT 0
23238: PUSH
23239: LD_INT 0
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 0
23248: PUSH
23249: LD_INT 1
23251: NEG
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 1
23259: PUSH
23260: LD_INT 0
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 1
23269: PUSH
23270: LD_INT 1
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 0
23279: PUSH
23280: LD_INT 1
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 1
23300: NEG
23301: PUSH
23302: LD_INT 1
23304: NEG
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 1
23312: NEG
23313: PUSH
23314: LD_INT 2
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: LD_INT 2
23327: NEG
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 1
23335: PUSH
23336: LD_INT 1
23338: NEG
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 2
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 2
23356: PUSH
23357: LD_INT 2
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 1
23366: PUSH
23367: LD_INT 2
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: LD_INT 2
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: NEG
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 2
23408: NEG
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 1
23420: NEG
23421: PUSH
23422: LD_INT 3
23424: NEG
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 3
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: LD_INT 3
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 2
23463: NEG
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 3
23474: NEG
23475: PUSH
23476: LD_INT 1
23478: NEG
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23509: LD_ADDR_VAR 0 33
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 1
23567: NEG
23568: PUSH
23569: LD_INT 0
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: NEG
23591: PUSH
23592: LD_INT 2
23594: NEG
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 1
23602: PUSH
23603: LD_INT 1
23605: NEG
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 2
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 2
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: LD_INT 2
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: LD_INT 2
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 2
23664: NEG
23665: PUSH
23666: LD_INT 0
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 2
23675: NEG
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 2
23687: NEG
23688: PUSH
23689: LD_INT 2
23691: NEG
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 2
23699: NEG
23700: PUSH
23701: LD_INT 3
23703: NEG
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 2
23711: PUSH
23712: LD_INT 1
23714: NEG
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 3
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: LD_INT 3
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: LD_INT 2
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 3
23753: NEG
23754: PUSH
23755: LD_INT 2
23757: NEG
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23788: LD_ADDR_VAR 0 34
23792: PUSH
23793: LD_INT 0
23795: PUSH
23796: LD_INT 0
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: LD_INT 1
23808: NEG
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: NEG
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 1
23857: NEG
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 1
23869: NEG
23870: PUSH
23871: LD_INT 2
23873: NEG
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: LD_INT 2
23884: NEG
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 1
23892: PUSH
23893: LD_INT 1
23895: NEG
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 2
23903: PUSH
23904: LD_INT 1
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 1
23933: NEG
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 2
23944: NEG
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 2
23955: NEG
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 2
23967: NEG
23968: PUSH
23969: LD_INT 2
23971: NEG
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: LD_INT 3
23983: NEG
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: LD_INT 2
23994: NEG
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 3
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 3
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 2
24022: NEG
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 3
24033: NEG
24034: PUSH
24035: LD_INT 1
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24068: LD_ADDR_VAR 0 35
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: LD_INT 0
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 1
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: LD_INT 0
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: LD_INT 1
24141: NEG
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 2
24159: NEG
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24180: LD_ADDR_VAR 0 36
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: NEG
24239: PUSH
24240: LD_INT 0
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PUSH
24251: LD_INT 1
24253: NEG
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: LD_INT 2
24265: NEG
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24292: LD_ADDR_VAR 0 37
24296: PUSH
24297: LD_INT 0
24299: PUSH
24300: LD_INT 0
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: LD_INT 1
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: LD_INT 0
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 1
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: LD_INT 1
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: NEG
24351: PUSH
24352: LD_INT 0
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: LD_INT 1
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: LD_INT 1
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: NEG
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24404: LD_ADDR_VAR 0 38
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 1
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: LD_INT 1
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 1
24462: NEG
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 2
24495: NEG
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24516: LD_ADDR_VAR 0 39
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: LD_INT 0
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: LD_INT 1
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: LD_INT 0
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 0
24564: PUSH
24565: LD_INT 1
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 1
24574: NEG
24575: PUSH
24576: LD_INT 0
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 1
24585: NEG
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: LD_INT 2
24601: NEG
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24628: LD_ADDR_VAR 0 40
24632: PUSH
24633: LD_INT 0
24635: PUSH
24636: LD_INT 0
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 0
24645: PUSH
24646: LD_INT 1
24648: NEG
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 1
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: LD_INT 1
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: NEG
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: LD_INT 1
24712: NEG
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 1
24720: NEG
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24740: LD_ADDR_VAR 0 41
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 0
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: LD_INT 0
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 2
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 2
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: LD_INT 2
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 1
24884: NEG
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 2
24895: NEG
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 2
24906: NEG
24907: PUSH
24908: LD_INT 1
24910: NEG
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 2
24918: NEG
24919: PUSH
24920: LD_INT 2
24922: NEG
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: LD_INT 3
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 2
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 3
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 3
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 3
24973: PUSH
24974: LD_INT 2
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 3
24983: PUSH
24984: LD_INT 3
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: LD_INT 3
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: LD_INT 1
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 3
25014: NEG
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 3
25025: NEG
25026: PUSH
25027: LD_INT 1
25029: NEG
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 3
25037: NEG
25038: PUSH
25039: LD_INT 2
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 3
25049: NEG
25050: PUSH
25051: LD_INT 3
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25090: LD_ADDR_VAR 0 42
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 1
25148: NEG
25149: PUSH
25150: LD_INT 0
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: LD_INT 2
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: LD_INT 2
25186: NEG
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: PUSH
25206: LD_INT 1
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 2
25215: PUSH
25216: LD_INT 2
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 1
25225: PUSH
25226: LD_INT 2
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: LD_INT 2
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 2
25256: NEG
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 2
25268: NEG
25269: PUSH
25270: LD_INT 2
25272: NEG
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 2
25280: NEG
25281: PUSH
25282: LD_INT 3
25284: NEG
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: LD_INT 3
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: LD_INT 3
25307: NEG
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: LD_INT 2
25318: NEG
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 3
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 3
25336: PUSH
25337: LD_INT 3
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: LD_INT 3
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: LD_INT 3
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 3
25387: NEG
25388: PUSH
25389: LD_INT 2
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 3
25399: NEG
25400: PUSH
25401: LD_INT 3
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25440: LD_ADDR_VAR 0 43
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 0
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 1
25498: NEG
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: LD_INT 1
25513: NEG
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: LD_INT 2
25525: NEG
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: LD_INT 2
25536: NEG
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 1
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 2
25606: NEG
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 2
25617: NEG
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: NEG
25630: PUSH
25631: LD_INT 3
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: LD_INT 3
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 2
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: PUSH
25664: LD_INT 1
25666: NEG
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 3
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 3
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: LD_INT 3
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: LD_INT 3
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 2
25725: NEG
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 3
25736: NEG
25737: PUSH
25738: LD_INT 0
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 3
25747: NEG
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25788: LD_ADDR_VAR 0 44
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: LD_INT 1
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 1
25846: NEG
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 2
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: LD_INT 1
25884: NEG
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 2
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 2
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 2
25943: NEG
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 2
25954: NEG
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: LD_INT 2
25970: NEG
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: LD_INT 3
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 3
26001: PUSH
26002: LD_INT 0
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 3
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 3
26021: PUSH
26022: LD_INT 2
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 3
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: LD_INT 3
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 2
26051: NEG
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 3
26062: NEG
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 3
26073: NEG
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 3
26085: NEG
26086: PUSH
26087: LD_INT 2
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 3
26097: NEG
26098: PUSH
26099: LD_INT 3
26101: NEG
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26138: LD_ADDR_VAR 0 45
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: LD_INT 2
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: LD_INT 2
26234: NEG
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 2
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: LD_INT 2
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 2
26304: NEG
26305: PUSH
26306: LD_INT 1
26308: NEG
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: LD_INT 2
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: LD_INT 3
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: LD_INT 3
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: LD_INT 3
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: LD_INT 2
26366: NEG
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 3
26374: PUSH
26375: LD_INT 2
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 3
26384: PUSH
26385: LD_INT 3
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: LD_INT 3
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: LD_INT 3
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 3
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 3
26435: NEG
26436: PUSH
26437: LD_INT 2
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 3
26447: NEG
26448: PUSH
26449: LD_INT 3
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26488: LD_ADDR_VAR 0 46
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 1
26508: NEG
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: LD_INT 0
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: LD_INT 0
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: LD_INT 2
26573: NEG
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 2
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 2
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: LD_INT 2
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 2
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 2
26654: NEG
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 2
26665: NEG
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: LD_INT 3
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: LD_INT 3
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: LD_INT 2
26703: NEG
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: LD_INT 1
26714: NEG
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 3
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 3
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: LD_INT 3
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: LD_INT 3
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: NEG
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 3
26784: NEG
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 3
26795: NEG
26796: PUSH
26797: LD_INT 1
26799: NEG
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26836: LD_ADDR_VAR 0 47
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 0
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 2
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 2
26932: NEG
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 2
26951: NEG
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 2
26963: NEG
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26987: LD_ADDR_VAR 0 48
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 1
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: LD_INT 2
27072: NEG
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: LD_INT 2
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 2
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 2
27112: PUSH
27113: LD_INT 1
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27134: LD_ADDR_VAR 0 49
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: LD_INT 1
27207: NEG
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 2
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 2
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 2
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: PUSH
27257: LD_INT 2
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27278: LD_ADDR_VAR 0 50
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: LD_INT 2
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: LD_INT 2
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 2
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27422: LD_ADDR_VAR 0 51
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 1
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: LD_INT 1
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: LD_INT 1
27495: NEG
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: LD_INT 2
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 2
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 2
27534: NEG
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 2
27545: NEG
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27569: LD_ADDR_VAR 0 52
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: NEG
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: NEG
27639: PUSH
27640: LD_INT 1
27642: NEG
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: LD_INT 2
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 2
27673: NEG
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: NEG
27685: PUSH
27686: LD_INT 1
27688: NEG
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 2
27696: NEG
27697: PUSH
27698: LD_INT 2
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27720: LD_ADDR_VAR 0 53
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: LD_INT 1
27740: NEG
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: LD_INT 2
27805: NEG
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: LD_INT 2
27816: NEG
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 2
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 2
27896: NEG
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: NEG
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: NEG
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27950: LD_ADDR_VAR 0 54
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: LD_INT 0
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: LD_INT 1
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: LD_INT 0
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: LD_INT 0
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: LD_INT 1
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: LD_INT 2
28035: NEG
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: LD_INT 2
28046: NEG
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 2
28126: NEG
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 2
28137: NEG
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: LD_INT 2
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28180: LD_ADDR_VAR 0 55
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: LD_INT 2
28265: NEG
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: LD_INT 2
28276: NEG
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: LD_INT 1
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 2
28356: NEG
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 2
28367: NEG
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 2
28379: NEG
28380: PUSH
28381: LD_INT 2
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28410: LD_ADDR_VAR 0 56
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: LD_INT 1
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: LD_INT 0
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: LD_INT 2
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 2
28586: NEG
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: NEG
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: LD_INT 2
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28640: LD_ADDR_VAR 0 57
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: LD_INT 2
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: LD_INT 2
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 2
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 2
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: LD_INT 2
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: LD_INT 2
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 2
28816: NEG
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 2
28827: NEG
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 2
28839: NEG
28840: PUSH
28841: LD_INT 2
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28870: LD_ADDR_VAR 0 58
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 1
28928: NEG
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: NEG
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: LD_INT 2
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: LD_INT 2
28966: NEG
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: LD_INT 1
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: LD_INT 0
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: LD_INT 2
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: LD_INT 2
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 2
29046: NEG
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 2
29057: NEG
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 2
29069: NEG
29070: PUSH
29071: LD_INT 2
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29100: LD_ADDR_VAR 0 59
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: LD_INT 1
29120: NEG
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 1
29169: NEG
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29188: LD_ADDR_VAR 0 60
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: LD_INT 1
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: LD_INT 1
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 1
29257: NEG
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29276: LD_ADDR_VAR 0 61
29280: PUSH
29281: LD_INT 0
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 1
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 1
29334: NEG
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: NEG
29346: PUSH
29347: LD_INT 1
29349: NEG
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29364: LD_ADDR_VAR 0 62
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: LD_INT 1
29384: NEG
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 1
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: NEG
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29452: LD_ADDR_VAR 0 63
29456: PUSH
29457: LD_INT 0
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 0
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 1
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 1
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: LD_INT 1
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29540: LD_ADDR_VAR 0 64
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: LD_INT 1
29560: NEG
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 1
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: NEG
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 1
29609: NEG
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: ST_TO_ADDR
// end ; 1 :
29628: GO 35525
29630: LD_INT 1
29632: DOUBLE
29633: EQUAL
29634: IFTRUE 29638
29636: GO 32261
29638: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29639: LD_ADDR_VAR 0 11
29643: PUSH
29644: LD_INT 1
29646: NEG
29647: PUSH
29648: LD_INT 3
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: LD_INT 3
29661: NEG
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: LD_INT 2
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29683: LD_ADDR_VAR 0 12
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: LD_INT 1
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 3
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 3
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: LIST
29723: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29724: LD_ADDR_VAR 0 13
29728: PUSH
29729: LD_INT 3
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 3
29741: PUSH
29742: LD_INT 3
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 2
29751: PUSH
29752: LD_INT 3
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29764: LD_ADDR_VAR 0 14
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: LD_INT 3
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: LD_INT 3
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 1
29791: NEG
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29805: LD_ADDR_VAR 0 15
29809: PUSH
29810: LD_INT 2
29812: NEG
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 3
29823: NEG
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 3
29834: NEG
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: LIST
29848: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29849: LD_ADDR_VAR 0 16
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: LD_INT 3
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 3
29868: NEG
29869: PUSH
29870: LD_INT 2
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 3
29880: NEG
29881: PUSH
29882: LD_INT 3
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: LIST
29894: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29895: LD_ADDR_VAR 0 17
29899: PUSH
29900: LD_INT 1
29902: NEG
29903: PUSH
29904: LD_INT 3
29906: NEG
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: LD_INT 3
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: LD_INT 2
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29939: LD_ADDR_VAR 0 18
29943: PUSH
29944: LD_INT 2
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 3
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29980: LD_ADDR_VAR 0 19
29984: PUSH
29985: LD_INT 3
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 3
29997: PUSH
29998: LD_INT 3
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 2
30007: PUSH
30008: LD_INT 3
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30020: LD_ADDR_VAR 0 20
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: LD_INT 3
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: LD_INT 3
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: LD_INT 2
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30061: LD_ADDR_VAR 0 21
30065: PUSH
30066: LD_INT 2
30068: NEG
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 3
30079: NEG
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 3
30090: NEG
30091: PUSH
30092: LD_INT 1
30094: NEG
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: LIST
30104: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30105: LD_ADDR_VAR 0 22
30109: PUSH
30110: LD_INT 2
30112: NEG
30113: PUSH
30114: LD_INT 3
30116: NEG
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 3
30124: NEG
30125: PUSH
30126: LD_INT 2
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 3
30136: NEG
30137: PUSH
30138: LD_INT 3
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: LIST
30150: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30151: LD_ADDR_VAR 0 23
30155: PUSH
30156: LD_INT 0
30158: PUSH
30159: LD_INT 3
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 1
30169: NEG
30170: PUSH
30171: LD_INT 4
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30195: LD_ADDR_VAR 0 24
30199: PUSH
30200: LD_INT 3
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 3
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 4
30223: PUSH
30224: LD_INT 1
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30236: LD_ADDR_VAR 0 25
30240: PUSH
30241: LD_INT 3
30243: PUSH
30244: LD_INT 3
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 4
30253: PUSH
30254: LD_INT 3
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 3
30263: PUSH
30264: LD_INT 4
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: LIST
30275: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30276: LD_ADDR_VAR 0 26
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: LD_INT 4
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: LD_INT 3
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30317: LD_ADDR_VAR 0 27
30321: PUSH
30322: LD_INT 3
30324: NEG
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 3
30335: NEG
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 4
30346: NEG
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30361: LD_ADDR_VAR 0 28
30365: PUSH
30366: LD_INT 3
30368: NEG
30369: PUSH
30370: LD_INT 3
30372: NEG
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 3
30380: NEG
30381: PUSH
30382: LD_INT 4
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 4
30392: NEG
30393: PUSH
30394: LD_INT 3
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30407: LD_ADDR_VAR 0 29
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 3
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: LD_INT 3
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: LD_INT 2
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: NEG
30449: PUSH
30450: LD_INT 4
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: LD_INT 4
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: LD_INT 3
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: LD_INT 5
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: LD_INT 5
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: LD_INT 4
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: LD_INT 6
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: LD_INT 6
30531: NEG
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: LD_INT 5
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30562: LD_ADDR_VAR 0 30
30566: PUSH
30567: LD_INT 2
30569: PUSH
30570: LD_INT 1
30572: NEG
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 3
30580: PUSH
30581: LD_INT 0
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 3
30590: PUSH
30591: LD_INT 1
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 3
30600: PUSH
30601: LD_INT 1
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 4
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 4
30621: PUSH
30622: LD_INT 1
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 4
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 5
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 5
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 5
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 6
30673: PUSH
30674: LD_INT 0
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 6
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30705: LD_ADDR_VAR 0 31
30709: PUSH
30710: LD_INT 3
30712: PUSH
30713: LD_INT 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 3
30722: PUSH
30723: LD_INT 3
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 2
30732: PUSH
30733: LD_INT 3
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 4
30742: PUSH
30743: LD_INT 3
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 4
30752: PUSH
30753: LD_INT 4
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: PUSH
30763: LD_INT 4
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 5
30772: PUSH
30773: LD_INT 4
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 5
30782: PUSH
30783: LD_INT 5
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 4
30792: PUSH
30793: LD_INT 5
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 6
30802: PUSH
30803: LD_INT 5
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 6
30812: PUSH
30813: LD_INT 6
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 5
30822: PUSH
30823: LD_INT 6
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30844: LD_ADDR_VAR 0 32
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: LD_INT 3
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 0
30861: PUSH
30862: LD_INT 3
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 1
30882: PUSH
30883: LD_INT 4
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: LD_INT 4
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: LD_INT 3
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 5
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: LD_INT 5
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: PUSH
30935: LD_INT 4
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: LD_INT 6
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 6
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: LD_INT 5
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30987: LD_ADDR_VAR 0 33
30991: PUSH
30992: LD_INT 2
30994: NEG
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 3
31005: NEG
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 3
31016: NEG
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 3
31028: NEG
31029: PUSH
31030: LD_INT 1
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 4
31039: NEG
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 4
31050: NEG
31051: PUSH
31052: LD_INT 1
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 4
31062: NEG
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 5
31073: NEG
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 5
31084: NEG
31085: PUSH
31086: LD_INT 1
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 5
31096: NEG
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 6
31107: NEG
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 6
31118: NEG
31119: PUSH
31120: LD_INT 1
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31142: LD_ADDR_VAR 0 34
31146: PUSH
31147: LD_INT 2
31149: NEG
31150: PUSH
31151: LD_INT 3
31153: NEG
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 3
31161: NEG
31162: PUSH
31163: LD_INT 2
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 3
31173: NEG
31174: PUSH
31175: LD_INT 3
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 3
31185: NEG
31186: PUSH
31187: LD_INT 4
31189: NEG
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 4
31197: NEG
31198: PUSH
31199: LD_INT 3
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 4
31209: NEG
31210: PUSH
31211: LD_INT 4
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 4
31221: NEG
31222: PUSH
31223: LD_INT 5
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 5
31233: NEG
31234: PUSH
31235: LD_INT 4
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 5
31245: NEG
31246: PUSH
31247: LD_INT 5
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 5
31257: NEG
31258: PUSH
31259: LD_INT 6
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 6
31269: NEG
31270: PUSH
31271: LD_INT 5
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 6
31281: NEG
31282: PUSH
31283: LD_INT 6
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31305: LD_ADDR_VAR 0 41
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 2
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: LD_INT 3
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: LD_INT 2
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: LIST
31348: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31349: LD_ADDR_VAR 0 42
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 2
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 3
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: LIST
31389: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31390: LD_ADDR_VAR 0 43
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 3
31407: PUSH
31408: LD_INT 2
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31430: LD_ADDR_VAR 0 44
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: LD_INT 3
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: LIST
31470: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31471: LD_ADDR_VAR 0 45
31475: PUSH
31476: LD_INT 2
31478: NEG
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 2
31489: NEG
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 3
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: LIST
31514: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31515: LD_ADDR_VAR 0 46
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: LD_INT 3
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: NEG
31547: PUSH
31548: LD_INT 2
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31561: LD_ADDR_VAR 0 47
31565: PUSH
31566: LD_INT 2
31568: NEG
31569: PUSH
31570: LD_INT 3
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: LD_INT 3
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31594: LD_ADDR_VAR 0 48
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: LD_INT 2
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31625: LD_ADDR_VAR 0 49
31629: PUSH
31630: LD_INT 3
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: LD_INT 2
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31654: LD_ADDR_VAR 0 50
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: LD_INT 3
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: LD_INT 3
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31683: LD_ADDR_VAR 0 51
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: LD_INT 2
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 2
31701: NEG
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31714: LD_ADDR_VAR 0 52
31718: PUSH
31719: LD_INT 3
31721: NEG
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 3
31733: NEG
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31747: LD_ADDR_VAR 0 53
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: LD_INT 3
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: LD_INT 3
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31791: LD_ADDR_VAR 0 54
31795: PUSH
31796: LD_INT 2
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 3
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: LIST
31831: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31832: LD_ADDR_VAR 0 55
31836: PUSH
31837: LD_INT 3
31839: PUSH
31840: LD_INT 2
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 3
31849: PUSH
31850: LD_INT 3
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: LD_INT 3
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: LIST
31871: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31872: LD_ADDR_VAR 0 56
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: LD_INT 3
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: LD_INT 3
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31913: LD_ADDR_VAR 0 57
31917: PUSH
31918: LD_INT 2
31920: NEG
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: NEG
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 3
31942: NEG
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31957: LD_ADDR_VAR 0 58
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: LD_INT 3
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 3
31976: NEG
31977: PUSH
31978: LD_INT 2
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 3
31988: NEG
31989: PUSH
31990: LD_INT 3
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32003: LD_ADDR_VAR 0 59
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: LD_INT 2
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 2
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: LIST
32046: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32047: LD_ADDR_VAR 0 60
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32088: LD_ADDR_VAR 0 61
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: LD_INT 1
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: LIST
32127: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32128: LD_ADDR_VAR 0 62
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: LD_INT 2
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: LD_INT 2
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 1
32155: NEG
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: LIST
32168: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32169: LD_ADDR_VAR 0 63
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 2
32198: NEG
32199: PUSH
32200: LD_INT 1
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: LIST
32212: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32213: LD_ADDR_VAR 0 64
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 2
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 2
32232: NEG
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: LD_INT 2
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: ST_TO_ADDR
// end ; 2 :
32259: GO 35525
32261: LD_INT 2
32263: DOUBLE
32264: EQUAL
32265: IFTRUE 32269
32267: GO 35524
32269: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32270: LD_ADDR_VAR 0 29
32274: PUSH
32275: LD_INT 4
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 4
32287: PUSH
32288: LD_INT 1
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 5
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 5
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 4
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: LD_INT 1
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 3
32349: PUSH
32350: LD_INT 2
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 5
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 3
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 3
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 4
32390: PUSH
32391: LD_INT 3
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 4
32400: PUSH
32401: LD_INT 4
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 3
32410: PUSH
32411: LD_INT 4
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 4
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 4
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: LD_INT 4
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 3
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 4
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 5
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: LD_INT 5
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 4
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: LD_INT 3
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: LD_INT 5
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 2
32542: NEG
32543: PUSH
32544: LD_INT 3
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 3
32553: NEG
32554: PUSH
32555: LD_INT 0
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 3
32564: NEG
32565: PUSH
32566: LD_INT 1
32568: NEG
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 2
32576: NEG
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: NEG
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 3
32598: NEG
32599: PUSH
32600: LD_INT 1
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 4
32609: NEG
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 4
32620: NEG
32621: PUSH
32622: LD_INT 1
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 4
32632: NEG
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: NEG
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 4
32655: NEG
32656: PUSH
32657: LD_INT 4
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 4
32667: NEG
32668: PUSH
32669: LD_INT 5
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 3
32679: NEG
32680: PUSH
32681: LD_INT 4
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 3
32691: NEG
32692: PUSH
32693: LD_INT 3
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 4
32703: NEG
32704: PUSH
32705: LD_INT 3
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 5
32715: NEG
32716: PUSH
32717: LD_INT 4
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 5
32727: NEG
32728: PUSH
32729: LD_INT 5
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 3
32739: NEG
32740: PUSH
32741: LD_INT 5
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 5
32751: NEG
32752: PUSH
32753: LD_INT 3
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32808: LD_ADDR_VAR 0 30
32812: PUSH
32813: LD_INT 4
32815: PUSH
32816: LD_INT 4
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 4
32825: PUSH
32826: LD_INT 3
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 5
32835: PUSH
32836: LD_INT 4
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 5
32845: PUSH
32846: LD_INT 5
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 4
32855: PUSH
32856: LD_INT 5
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 3
32865: PUSH
32866: LD_INT 4
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 3
32875: PUSH
32876: LD_INT 3
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 5
32885: PUSH
32886: LD_INT 3
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 3
32895: PUSH
32896: LD_INT 5
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: LD_INT 3
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 0
32915: PUSH
32916: LD_INT 2
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 3
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: LD_INT 4
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: LD_INT 4
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 3
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 1
32966: NEG
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: LD_INT 4
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 2
32987: NEG
32988: PUSH
32989: LD_INT 2
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 4
32998: NEG
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 4
33009: NEG
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 3
33021: NEG
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 3
33032: NEG
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 4
33043: NEG
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 5
33054: NEG
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 5
33065: NEG
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 5
33077: NEG
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 3
33089: NEG
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 3
33100: NEG
33101: PUSH
33102: LD_INT 3
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 3
33112: NEG
33113: PUSH
33114: LD_INT 4
33116: NEG
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 2
33124: NEG
33125: PUSH
33126: LD_INT 3
33128: NEG
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 2
33136: NEG
33137: PUSH
33138: LD_INT 2
33140: NEG
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 3
33148: NEG
33149: PUSH
33150: LD_INT 2
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 4
33160: NEG
33161: PUSH
33162: LD_INT 3
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 4
33172: NEG
33173: PUSH
33174: LD_INT 4
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: LD_INT 4
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 4
33196: NEG
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: LD_INT 4
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 5
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: LD_INT 4
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: PUSH
33242: LD_INT 3
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: LD_INT 3
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PUSH
33265: LD_INT 4
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: LD_INT 5
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: LD_INT 3
33290: NEG
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 2
33298: NEG
33299: PUSH
33300: LD_INT 5
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33355: LD_ADDR_VAR 0 31
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: LD_INT 4
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: LD_INT 3
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: LD_INT 4
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: LD_INT 5
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: LD_INT 5
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: LD_INT 4
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: LD_INT 3
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: LD_INT 5
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 2
33444: NEG
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 3
33455: NEG
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 3
33466: NEG
33467: PUSH
33468: LD_INT 1
33470: NEG
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 2
33478: NEG
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 3
33500: NEG
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 4
33511: NEG
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 4
33522: NEG
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 4
33534: NEG
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 2
33546: NEG
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 4
33557: NEG
33558: PUSH
33559: LD_INT 4
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 4
33569: NEG
33570: PUSH
33571: LD_INT 5
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 3
33581: NEG
33582: PUSH
33583: LD_INT 4
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 3
33593: NEG
33594: PUSH
33595: LD_INT 3
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 4
33605: NEG
33606: PUSH
33607: LD_INT 3
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 5
33617: NEG
33618: PUSH
33619: LD_INT 4
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 5
33629: NEG
33630: PUSH
33631: LD_INT 5
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 3
33641: NEG
33642: PUSH
33643: LD_INT 5
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 5
33653: NEG
33654: PUSH
33655: LD_INT 3
33657: NEG
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: LD_INT 3
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: LD_INT 4
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: LD_INT 3
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 2
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 1
33720: NEG
33721: PUSH
33722: LD_INT 3
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: NEG
33733: PUSH
33734: LD_INT 4
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: LD_INT 2
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 2
33755: NEG
33756: PUSH
33757: LD_INT 4
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 4
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 4
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 5
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 5
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 4
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 3
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 3
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: LD_INT 2
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 5
33850: PUSH
33851: LD_INT 2
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33905: LD_ADDR_VAR 0 32
33909: PUSH
33910: LD_INT 4
33912: NEG
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 4
33923: NEG
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 3
33935: NEG
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 3
33946: NEG
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 4
33957: NEG
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 5
33968: NEG
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 5
33979: NEG
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 5
33991: NEG
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 3
34003: NEG
34004: PUSH
34005: LD_INT 2
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 3
34014: NEG
34015: PUSH
34016: LD_INT 3
34018: NEG
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 3
34026: NEG
34027: PUSH
34028: LD_INT 4
34030: NEG
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 2
34038: NEG
34039: PUSH
34040: LD_INT 3
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 3
34062: NEG
34063: PUSH
34064: LD_INT 2
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 4
34074: NEG
34075: PUSH
34076: LD_INT 3
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 4
34086: NEG
34087: PUSH
34088: LD_INT 4
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: NEG
34099: PUSH
34100: LD_INT 4
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 4
34110: NEG
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: LD_INT 4
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: LD_INT 5
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: LD_INT 4
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: LD_INT 3
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: LD_INT 3
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: LD_INT 4
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 5
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 2
34201: PUSH
34202: LD_INT 3
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: LD_INT 5
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 3
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 3
34234: PUSH
34235: LD_INT 1
34237: NEG
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 4
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 4
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 3
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 2
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: LD_INT 2
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 4
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 4
34317: PUSH
34318: LD_INT 4
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 4
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 5
34337: PUSH
34338: LD_INT 4
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 5
34347: PUSH
34348: LD_INT 5
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 4
34357: PUSH
34358: LD_INT 5
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 3
34367: PUSH
34368: LD_INT 4
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 3
34377: PUSH
34378: LD_INT 3
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 5
34387: PUSH
34388: LD_INT 3
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 3
34397: PUSH
34398: LD_INT 5
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34452: LD_ADDR_VAR 0 33
34456: PUSH
34457: LD_INT 4
34459: NEG
34460: PUSH
34461: LD_INT 4
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 4
34471: NEG
34472: PUSH
34473: LD_INT 5
34475: NEG
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 3
34483: NEG
34484: PUSH
34485: LD_INT 4
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 3
34495: NEG
34496: PUSH
34497: LD_INT 3
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 4
34507: NEG
34508: PUSH
34509: LD_INT 3
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 5
34519: NEG
34520: PUSH
34521: LD_INT 4
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 5
34531: NEG
34532: PUSH
34533: LD_INT 5
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: NEG
34544: PUSH
34545: LD_INT 5
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 5
34555: NEG
34556: PUSH
34557: LD_INT 3
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: LD_INT 3
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 4
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 3
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: LD_INT 2
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: LD_INT 3
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: LD_INT 4
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: LD_INT 2
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 2
34657: NEG
34658: PUSH
34659: LD_INT 4
34661: NEG
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 4
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 4
34679: PUSH
34680: LD_INT 1
34682: NEG
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 5
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 5
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 4
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 3
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 3
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 3
34741: PUSH
34742: LD_INT 2
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 5
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 3
34762: PUSH
34763: LD_INT 3
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 3
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 4
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 4
34792: PUSH
34793: LD_INT 4
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: LD_INT 4
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: PUSH
34813: LD_INT 3
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: LD_INT 2
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 4
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: LD_INT 4
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: LD_INT 4
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 3
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: LD_INT 4
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: LD_INT 5
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: LD_INT 5
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: LD_INT 4
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 1
34913: NEG
34914: PUSH
34915: LD_INT 3
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 2
34924: PUSH
34925: LD_INT 5
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 2
34934: NEG
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34990: LD_ADDR_VAR 0 34
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 4
35000: NEG
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: LD_INT 5
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: LD_INT 4
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: LD_INT 3
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 3
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: LD_INT 4
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: LD_INT 5
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: LD_INT 3
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: NEG
35088: PUSH
35089: LD_INT 5
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 3
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 3
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 4
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 4
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 3
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: LD_INT 2
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 4
35182: PUSH
35183: LD_INT 2
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 4
35192: PUSH
35193: LD_INT 4
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 4
35202: PUSH
35203: LD_INT 3
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 5
35212: PUSH
35213: LD_INT 4
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 5
35222: PUSH
35223: LD_INT 5
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 4
35232: PUSH
35233: LD_INT 5
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 3
35242: PUSH
35243: LD_INT 4
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 3
35252: PUSH
35253: LD_INT 3
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 5
35262: PUSH
35263: LD_INT 3
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 3
35272: PUSH
35273: LD_INT 5
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 0
35282: PUSH
35283: LD_INT 3
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: LD_INT 3
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: LD_INT 4
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: LD_INT 4
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: LD_INT 3
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: LD_INT 4
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 2
35364: NEG
35365: PUSH
35366: LD_INT 2
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 4
35375: NEG
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 4
35386: NEG
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 3
35398: NEG
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 3
35409: NEG
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 4
35420: NEG
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 5
35431: NEG
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 5
35442: NEG
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 5
35454: NEG
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 3
35466: NEG
35467: PUSH
35468: LD_INT 2
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: ST_TO_ADDR
// end ; end ;
35522: GO 35525
35524: POP
// case btype of b_depot , b_warehouse :
35525: LD_VAR 0 1
35529: PUSH
35530: LD_INT 0
35532: DOUBLE
35533: EQUAL
35534: IFTRUE 35544
35536: LD_INT 1
35538: DOUBLE
35539: EQUAL
35540: IFTRUE 35544
35542: GO 35745
35544: POP
// case nation of nation_american :
35545: LD_VAR 0 5
35549: PUSH
35550: LD_INT 1
35552: DOUBLE
35553: EQUAL
35554: IFTRUE 35558
35556: GO 35614
35558: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35559: LD_ADDR_VAR 0 9
35563: PUSH
35564: LD_VAR 0 11
35568: PUSH
35569: LD_VAR 0 12
35573: PUSH
35574: LD_VAR 0 13
35578: PUSH
35579: LD_VAR 0 14
35583: PUSH
35584: LD_VAR 0 15
35588: PUSH
35589: LD_VAR 0 16
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: PUSH
35602: LD_VAR 0 4
35606: PUSH
35607: LD_INT 1
35609: PLUS
35610: ARRAY
35611: ST_TO_ADDR
35612: GO 35743
35614: LD_INT 2
35616: DOUBLE
35617: EQUAL
35618: IFTRUE 35622
35620: GO 35678
35622: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35623: LD_ADDR_VAR 0 9
35627: PUSH
35628: LD_VAR 0 17
35632: PUSH
35633: LD_VAR 0 18
35637: PUSH
35638: LD_VAR 0 19
35642: PUSH
35643: LD_VAR 0 20
35647: PUSH
35648: LD_VAR 0 21
35652: PUSH
35653: LD_VAR 0 22
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: PUSH
35666: LD_VAR 0 4
35670: PUSH
35671: LD_INT 1
35673: PLUS
35674: ARRAY
35675: ST_TO_ADDR
35676: GO 35743
35678: LD_INT 3
35680: DOUBLE
35681: EQUAL
35682: IFTRUE 35686
35684: GO 35742
35686: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35687: LD_ADDR_VAR 0 9
35691: PUSH
35692: LD_VAR 0 23
35696: PUSH
35697: LD_VAR 0 24
35701: PUSH
35702: LD_VAR 0 25
35706: PUSH
35707: LD_VAR 0 26
35711: PUSH
35712: LD_VAR 0 27
35716: PUSH
35717: LD_VAR 0 28
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: PUSH
35730: LD_VAR 0 4
35734: PUSH
35735: LD_INT 1
35737: PLUS
35738: ARRAY
35739: ST_TO_ADDR
35740: GO 35743
35742: POP
35743: GO 36298
35745: LD_INT 2
35747: DOUBLE
35748: EQUAL
35749: IFTRUE 35759
35751: LD_INT 3
35753: DOUBLE
35754: EQUAL
35755: IFTRUE 35759
35757: GO 35815
35759: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35760: LD_ADDR_VAR 0 9
35764: PUSH
35765: LD_VAR 0 29
35769: PUSH
35770: LD_VAR 0 30
35774: PUSH
35775: LD_VAR 0 31
35779: PUSH
35780: LD_VAR 0 32
35784: PUSH
35785: LD_VAR 0 33
35789: PUSH
35790: LD_VAR 0 34
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: PUSH
35803: LD_VAR 0 4
35807: PUSH
35808: LD_INT 1
35810: PLUS
35811: ARRAY
35812: ST_TO_ADDR
35813: GO 36298
35815: LD_INT 16
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35877
35821: LD_INT 17
35823: DOUBLE
35824: EQUAL
35825: IFTRUE 35877
35827: LD_INT 18
35829: DOUBLE
35830: EQUAL
35831: IFTRUE 35877
35833: LD_INT 19
35835: DOUBLE
35836: EQUAL
35837: IFTRUE 35877
35839: LD_INT 22
35841: DOUBLE
35842: EQUAL
35843: IFTRUE 35877
35845: LD_INT 20
35847: DOUBLE
35848: EQUAL
35849: IFTRUE 35877
35851: LD_INT 21
35853: DOUBLE
35854: EQUAL
35855: IFTRUE 35877
35857: LD_INT 23
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35877
35863: LD_INT 24
35865: DOUBLE
35866: EQUAL
35867: IFTRUE 35877
35869: LD_INT 25
35871: DOUBLE
35872: EQUAL
35873: IFTRUE 35877
35875: GO 35933
35877: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35878: LD_ADDR_VAR 0 9
35882: PUSH
35883: LD_VAR 0 35
35887: PUSH
35888: LD_VAR 0 36
35892: PUSH
35893: LD_VAR 0 37
35897: PUSH
35898: LD_VAR 0 38
35902: PUSH
35903: LD_VAR 0 39
35907: PUSH
35908: LD_VAR 0 40
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: PUSH
35921: LD_VAR 0 4
35925: PUSH
35926: LD_INT 1
35928: PLUS
35929: ARRAY
35930: ST_TO_ADDR
35931: GO 36298
35933: LD_INT 6
35935: DOUBLE
35936: EQUAL
35937: IFTRUE 35989
35939: LD_INT 7
35941: DOUBLE
35942: EQUAL
35943: IFTRUE 35989
35945: LD_INT 8
35947: DOUBLE
35948: EQUAL
35949: IFTRUE 35989
35951: LD_INT 13
35953: DOUBLE
35954: EQUAL
35955: IFTRUE 35989
35957: LD_INT 12
35959: DOUBLE
35960: EQUAL
35961: IFTRUE 35989
35963: LD_INT 15
35965: DOUBLE
35966: EQUAL
35967: IFTRUE 35989
35969: LD_INT 11
35971: DOUBLE
35972: EQUAL
35973: IFTRUE 35989
35975: LD_INT 14
35977: DOUBLE
35978: EQUAL
35979: IFTRUE 35989
35981: LD_INT 10
35983: DOUBLE
35984: EQUAL
35985: IFTRUE 35989
35987: GO 36045
35989: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35990: LD_ADDR_VAR 0 9
35994: PUSH
35995: LD_VAR 0 41
35999: PUSH
36000: LD_VAR 0 42
36004: PUSH
36005: LD_VAR 0 43
36009: PUSH
36010: LD_VAR 0 44
36014: PUSH
36015: LD_VAR 0 45
36019: PUSH
36020: LD_VAR 0 46
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: PUSH
36033: LD_VAR 0 4
36037: PUSH
36038: LD_INT 1
36040: PLUS
36041: ARRAY
36042: ST_TO_ADDR
36043: GO 36298
36045: LD_INT 36
36047: DOUBLE
36048: EQUAL
36049: IFTRUE 36053
36051: GO 36109
36053: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36054: LD_ADDR_VAR 0 9
36058: PUSH
36059: LD_VAR 0 47
36063: PUSH
36064: LD_VAR 0 48
36068: PUSH
36069: LD_VAR 0 49
36073: PUSH
36074: LD_VAR 0 50
36078: PUSH
36079: LD_VAR 0 51
36083: PUSH
36084: LD_VAR 0 52
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: PUSH
36097: LD_VAR 0 4
36101: PUSH
36102: LD_INT 1
36104: PLUS
36105: ARRAY
36106: ST_TO_ADDR
36107: GO 36298
36109: LD_INT 4
36111: DOUBLE
36112: EQUAL
36113: IFTRUE 36135
36115: LD_INT 5
36117: DOUBLE
36118: EQUAL
36119: IFTRUE 36135
36121: LD_INT 34
36123: DOUBLE
36124: EQUAL
36125: IFTRUE 36135
36127: LD_INT 37
36129: DOUBLE
36130: EQUAL
36131: IFTRUE 36135
36133: GO 36191
36135: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36136: LD_ADDR_VAR 0 9
36140: PUSH
36141: LD_VAR 0 53
36145: PUSH
36146: LD_VAR 0 54
36150: PUSH
36151: LD_VAR 0 55
36155: PUSH
36156: LD_VAR 0 56
36160: PUSH
36161: LD_VAR 0 57
36165: PUSH
36166: LD_VAR 0 58
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: PUSH
36179: LD_VAR 0 4
36183: PUSH
36184: LD_INT 1
36186: PLUS
36187: ARRAY
36188: ST_TO_ADDR
36189: GO 36298
36191: LD_INT 31
36193: DOUBLE
36194: EQUAL
36195: IFTRUE 36241
36197: LD_INT 32
36199: DOUBLE
36200: EQUAL
36201: IFTRUE 36241
36203: LD_INT 33
36205: DOUBLE
36206: EQUAL
36207: IFTRUE 36241
36209: LD_INT 27
36211: DOUBLE
36212: EQUAL
36213: IFTRUE 36241
36215: LD_INT 26
36217: DOUBLE
36218: EQUAL
36219: IFTRUE 36241
36221: LD_INT 28
36223: DOUBLE
36224: EQUAL
36225: IFTRUE 36241
36227: LD_INT 29
36229: DOUBLE
36230: EQUAL
36231: IFTRUE 36241
36233: LD_INT 30
36235: DOUBLE
36236: EQUAL
36237: IFTRUE 36241
36239: GO 36297
36241: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36242: LD_ADDR_VAR 0 9
36246: PUSH
36247: LD_VAR 0 59
36251: PUSH
36252: LD_VAR 0 60
36256: PUSH
36257: LD_VAR 0 61
36261: PUSH
36262: LD_VAR 0 62
36266: PUSH
36267: LD_VAR 0 63
36271: PUSH
36272: LD_VAR 0 64
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: PUSH
36285: LD_VAR 0 4
36289: PUSH
36290: LD_INT 1
36292: PLUS
36293: ARRAY
36294: ST_TO_ADDR
36295: GO 36298
36297: POP
// temp_list2 = [ ] ;
36298: LD_ADDR_VAR 0 10
36302: PUSH
36303: EMPTY
36304: ST_TO_ADDR
// for i in temp_list do
36305: LD_ADDR_VAR 0 8
36309: PUSH
36310: LD_VAR 0 9
36314: PUSH
36315: FOR_IN
36316: IFFALSE 36368
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36318: LD_ADDR_VAR 0 10
36322: PUSH
36323: LD_VAR 0 10
36327: PUSH
36328: LD_VAR 0 8
36332: PUSH
36333: LD_INT 1
36335: ARRAY
36336: PUSH
36337: LD_VAR 0 2
36341: PLUS
36342: PUSH
36343: LD_VAR 0 8
36347: PUSH
36348: LD_INT 2
36350: ARRAY
36351: PUSH
36352: LD_VAR 0 3
36356: PLUS
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: EMPTY
36363: LIST
36364: ADD
36365: ST_TO_ADDR
36366: GO 36315
36368: POP
36369: POP
// result = temp_list2 ;
36370: LD_ADDR_VAR 0 7
36374: PUSH
36375: LD_VAR 0 10
36379: ST_TO_ADDR
// end ;
36380: LD_VAR 0 7
36384: RET
// export function EnemyInRange ( unit , dist ) ; begin
36385: LD_INT 0
36387: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36388: LD_ADDR_VAR 0 3
36392: PUSH
36393: LD_VAR 0 1
36397: PPUSH
36398: CALL_OW 255
36402: PPUSH
36403: LD_VAR 0 1
36407: PPUSH
36408: CALL_OW 250
36412: PPUSH
36413: LD_VAR 0 1
36417: PPUSH
36418: CALL_OW 251
36422: PPUSH
36423: LD_VAR 0 2
36427: PPUSH
36428: CALL 10156 0 4
36432: PUSH
36433: LD_INT 4
36435: ARRAY
36436: ST_TO_ADDR
// end ;
36437: LD_VAR 0 3
36441: RET
// export function PlayerSeeMe ( unit ) ; begin
36442: LD_INT 0
36444: PPUSH
// result := See ( your_side , unit ) ;
36445: LD_ADDR_VAR 0 2
36449: PUSH
36450: LD_OWVAR 2
36454: PPUSH
36455: LD_VAR 0 1
36459: PPUSH
36460: CALL_OW 292
36464: ST_TO_ADDR
// end ;
36465: LD_VAR 0 2
36469: RET
// export function ReverseDir ( unit ) ; begin
36470: LD_INT 0
36472: PPUSH
// if not unit then
36473: LD_VAR 0 1
36477: NOT
36478: IFFALSE 36482
// exit ;
36480: GO 36505
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36482: LD_ADDR_VAR 0 2
36486: PUSH
36487: LD_VAR 0 1
36491: PPUSH
36492: CALL_OW 254
36496: PUSH
36497: LD_INT 3
36499: PLUS
36500: PUSH
36501: LD_INT 6
36503: MOD
36504: ST_TO_ADDR
// end ;
36505: LD_VAR 0 2
36509: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36510: LD_INT 0
36512: PPUSH
36513: PPUSH
36514: PPUSH
36515: PPUSH
36516: PPUSH
// if not hexes then
36517: LD_VAR 0 2
36521: NOT
36522: IFFALSE 36526
// exit ;
36524: GO 36674
// dist := 9999 ;
36526: LD_ADDR_VAR 0 5
36530: PUSH
36531: LD_INT 9999
36533: ST_TO_ADDR
// for i = 1 to hexes do
36534: LD_ADDR_VAR 0 4
36538: PUSH
36539: DOUBLE
36540: LD_INT 1
36542: DEC
36543: ST_TO_ADDR
36544: LD_VAR 0 2
36548: PUSH
36549: FOR_TO
36550: IFFALSE 36662
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36552: LD_VAR 0 1
36556: PPUSH
36557: LD_VAR 0 2
36561: PUSH
36562: LD_VAR 0 4
36566: ARRAY
36567: PUSH
36568: LD_INT 1
36570: ARRAY
36571: PPUSH
36572: LD_VAR 0 2
36576: PUSH
36577: LD_VAR 0 4
36581: ARRAY
36582: PUSH
36583: LD_INT 2
36585: ARRAY
36586: PPUSH
36587: CALL_OW 297
36591: PUSH
36592: LD_VAR 0 5
36596: LESS
36597: IFFALSE 36660
// begin hex := hexes [ i ] ;
36599: LD_ADDR_VAR 0 7
36603: PUSH
36604: LD_VAR 0 2
36608: PUSH
36609: LD_VAR 0 4
36613: ARRAY
36614: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36615: LD_ADDR_VAR 0 5
36619: PUSH
36620: LD_VAR 0 1
36624: PPUSH
36625: LD_VAR 0 2
36629: PUSH
36630: LD_VAR 0 4
36634: ARRAY
36635: PUSH
36636: LD_INT 1
36638: ARRAY
36639: PPUSH
36640: LD_VAR 0 2
36644: PUSH
36645: LD_VAR 0 4
36649: ARRAY
36650: PUSH
36651: LD_INT 2
36653: ARRAY
36654: PPUSH
36655: CALL_OW 297
36659: ST_TO_ADDR
// end ; end ;
36660: GO 36549
36662: POP
36663: POP
// result := hex ;
36664: LD_ADDR_VAR 0 3
36668: PUSH
36669: LD_VAR 0 7
36673: ST_TO_ADDR
// end ;
36674: LD_VAR 0 3
36678: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36679: LD_INT 0
36681: PPUSH
36682: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36683: LD_VAR 0 1
36687: NOT
36688: PUSH
36689: LD_VAR 0 1
36693: PUSH
36694: LD_INT 21
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 23
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PPUSH
36718: CALL_OW 69
36722: IN
36723: NOT
36724: OR
36725: IFFALSE 36729
// exit ;
36727: GO 36776
// for i = 1 to 3 do
36729: LD_ADDR_VAR 0 3
36733: PUSH
36734: DOUBLE
36735: LD_INT 1
36737: DEC
36738: ST_TO_ADDR
36739: LD_INT 3
36741: PUSH
36742: FOR_TO
36743: IFFALSE 36774
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36745: LD_VAR 0 1
36749: PPUSH
36750: CALL_OW 250
36754: PPUSH
36755: LD_VAR 0 1
36759: PPUSH
36760: CALL_OW 251
36764: PPUSH
36765: LD_INT 1
36767: PPUSH
36768: CALL_OW 453
36772: GO 36742
36774: POP
36775: POP
// end ;
36776: LD_VAR 0 2
36780: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36781: LD_INT 0
36783: PPUSH
36784: PPUSH
36785: PPUSH
36786: PPUSH
36787: PPUSH
36788: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36789: LD_VAR 0 1
36793: NOT
36794: PUSH
36795: LD_VAR 0 2
36799: NOT
36800: OR
36801: PUSH
36802: LD_VAR 0 1
36806: PPUSH
36807: CALL_OW 314
36811: OR
36812: IFFALSE 36816
// exit ;
36814: GO 37257
// x := GetX ( enemy_unit ) ;
36816: LD_ADDR_VAR 0 7
36820: PUSH
36821: LD_VAR 0 2
36825: PPUSH
36826: CALL_OW 250
36830: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36831: LD_ADDR_VAR 0 8
36835: PUSH
36836: LD_VAR 0 2
36840: PPUSH
36841: CALL_OW 251
36845: ST_TO_ADDR
// if not x or not y then
36846: LD_VAR 0 7
36850: NOT
36851: PUSH
36852: LD_VAR 0 8
36856: NOT
36857: OR
36858: IFFALSE 36862
// exit ;
36860: GO 37257
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36862: LD_ADDR_VAR 0 6
36866: PUSH
36867: LD_VAR 0 7
36871: PPUSH
36872: LD_INT 0
36874: PPUSH
36875: LD_INT 4
36877: PPUSH
36878: CALL_OW 272
36882: PUSH
36883: LD_VAR 0 8
36887: PPUSH
36888: LD_INT 0
36890: PPUSH
36891: LD_INT 4
36893: PPUSH
36894: CALL_OW 273
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_VAR 0 7
36907: PPUSH
36908: LD_INT 1
36910: PPUSH
36911: LD_INT 4
36913: PPUSH
36914: CALL_OW 272
36918: PUSH
36919: LD_VAR 0 8
36923: PPUSH
36924: LD_INT 1
36926: PPUSH
36927: LD_INT 4
36929: PPUSH
36930: CALL_OW 273
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_VAR 0 7
36943: PPUSH
36944: LD_INT 2
36946: PPUSH
36947: LD_INT 4
36949: PPUSH
36950: CALL_OW 272
36954: PUSH
36955: LD_VAR 0 8
36959: PPUSH
36960: LD_INT 2
36962: PPUSH
36963: LD_INT 4
36965: PPUSH
36966: CALL_OW 273
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_VAR 0 7
36979: PPUSH
36980: LD_INT 3
36982: PPUSH
36983: LD_INT 4
36985: PPUSH
36986: CALL_OW 272
36990: PUSH
36991: LD_VAR 0 8
36995: PPUSH
36996: LD_INT 3
36998: PPUSH
36999: LD_INT 4
37001: PPUSH
37002: CALL_OW 273
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_VAR 0 7
37015: PPUSH
37016: LD_INT 4
37018: PPUSH
37019: LD_INT 4
37021: PPUSH
37022: CALL_OW 272
37026: PUSH
37027: LD_VAR 0 8
37031: PPUSH
37032: LD_INT 4
37034: PPUSH
37035: LD_INT 4
37037: PPUSH
37038: CALL_OW 273
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_VAR 0 7
37051: PPUSH
37052: LD_INT 5
37054: PPUSH
37055: LD_INT 4
37057: PPUSH
37058: CALL_OW 272
37062: PUSH
37063: LD_VAR 0 8
37067: PPUSH
37068: LD_INT 5
37070: PPUSH
37071: LD_INT 4
37073: PPUSH
37074: CALL_OW 273
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: ST_TO_ADDR
// for i = tmp downto 1 do
37091: LD_ADDR_VAR 0 4
37095: PUSH
37096: DOUBLE
37097: LD_VAR 0 6
37101: INC
37102: ST_TO_ADDR
37103: LD_INT 1
37105: PUSH
37106: FOR_DOWNTO
37107: IFFALSE 37208
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37109: LD_VAR 0 6
37113: PUSH
37114: LD_VAR 0 4
37118: ARRAY
37119: PUSH
37120: LD_INT 1
37122: ARRAY
37123: PPUSH
37124: LD_VAR 0 6
37128: PUSH
37129: LD_VAR 0 4
37133: ARRAY
37134: PUSH
37135: LD_INT 2
37137: ARRAY
37138: PPUSH
37139: CALL_OW 488
37143: NOT
37144: PUSH
37145: LD_VAR 0 6
37149: PUSH
37150: LD_VAR 0 4
37154: ARRAY
37155: PUSH
37156: LD_INT 1
37158: ARRAY
37159: PPUSH
37160: LD_VAR 0 6
37164: PUSH
37165: LD_VAR 0 4
37169: ARRAY
37170: PUSH
37171: LD_INT 2
37173: ARRAY
37174: PPUSH
37175: CALL_OW 428
37179: PUSH
37180: LD_INT 0
37182: NONEQUAL
37183: OR
37184: IFFALSE 37206
// tmp := Delete ( tmp , i ) ;
37186: LD_ADDR_VAR 0 6
37190: PUSH
37191: LD_VAR 0 6
37195: PPUSH
37196: LD_VAR 0 4
37200: PPUSH
37201: CALL_OW 3
37205: ST_TO_ADDR
37206: GO 37106
37208: POP
37209: POP
// j := GetClosestHex ( unit , tmp ) ;
37210: LD_ADDR_VAR 0 5
37214: PUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: LD_VAR 0 6
37224: PPUSH
37225: CALL 36510 0 2
37229: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37230: LD_VAR 0 1
37234: PPUSH
37235: LD_VAR 0 5
37239: PUSH
37240: LD_INT 1
37242: ARRAY
37243: PPUSH
37244: LD_VAR 0 5
37248: PUSH
37249: LD_INT 2
37251: ARRAY
37252: PPUSH
37253: CALL_OW 111
// end ;
37257: LD_VAR 0 3
37261: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37262: LD_INT 0
37264: PPUSH
37265: PPUSH
37266: PPUSH
// uc_side = 0 ;
37267: LD_ADDR_OWVAR 20
37271: PUSH
37272: LD_INT 0
37274: ST_TO_ADDR
// uc_nation = 0 ;
37275: LD_ADDR_OWVAR 21
37279: PUSH
37280: LD_INT 0
37282: ST_TO_ADDR
// InitHc_All ( ) ;
37283: CALL_OW 584
// InitVc ;
37287: CALL_OW 20
// if mastodonts then
37291: LD_VAR 0 6
37295: IFFALSE 37362
// for i = 1 to mastodonts do
37297: LD_ADDR_VAR 0 11
37301: PUSH
37302: DOUBLE
37303: LD_INT 1
37305: DEC
37306: ST_TO_ADDR
37307: LD_VAR 0 6
37311: PUSH
37312: FOR_TO
37313: IFFALSE 37360
// begin vc_chassis := 31 ;
37315: LD_ADDR_OWVAR 37
37319: PUSH
37320: LD_INT 31
37322: ST_TO_ADDR
// vc_control := control_rider ;
37323: LD_ADDR_OWVAR 38
37327: PUSH
37328: LD_INT 4
37330: ST_TO_ADDR
// animal := CreateVehicle ;
37331: LD_ADDR_VAR 0 12
37335: PUSH
37336: CALL_OW 45
37340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37341: LD_VAR 0 12
37345: PPUSH
37346: LD_VAR 0 8
37350: PPUSH
37351: LD_INT 0
37353: PPUSH
37354: CALL 39550 0 3
// end ;
37358: GO 37312
37360: POP
37361: POP
// if horses then
37362: LD_VAR 0 5
37366: IFFALSE 37433
// for i = 1 to horses do
37368: LD_ADDR_VAR 0 11
37372: PUSH
37373: DOUBLE
37374: LD_INT 1
37376: DEC
37377: ST_TO_ADDR
37378: LD_VAR 0 5
37382: PUSH
37383: FOR_TO
37384: IFFALSE 37431
// begin hc_class := 21 ;
37386: LD_ADDR_OWVAR 28
37390: PUSH
37391: LD_INT 21
37393: ST_TO_ADDR
// hc_gallery :=  ;
37394: LD_ADDR_OWVAR 33
37398: PUSH
37399: LD_STRING 
37401: ST_TO_ADDR
// animal := CreateHuman ;
37402: LD_ADDR_VAR 0 12
37406: PUSH
37407: CALL_OW 44
37411: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37412: LD_VAR 0 12
37416: PPUSH
37417: LD_VAR 0 8
37421: PPUSH
37422: LD_INT 0
37424: PPUSH
37425: CALL 39550 0 3
// end ;
37429: GO 37383
37431: POP
37432: POP
// if birds then
37433: LD_VAR 0 1
37437: IFFALSE 37504
// for i = 1 to birds do
37439: LD_ADDR_VAR 0 11
37443: PUSH
37444: DOUBLE
37445: LD_INT 1
37447: DEC
37448: ST_TO_ADDR
37449: LD_VAR 0 1
37453: PUSH
37454: FOR_TO
37455: IFFALSE 37502
// begin hc_class = 18 ;
37457: LD_ADDR_OWVAR 28
37461: PUSH
37462: LD_INT 18
37464: ST_TO_ADDR
// hc_gallery =  ;
37465: LD_ADDR_OWVAR 33
37469: PUSH
37470: LD_STRING 
37472: ST_TO_ADDR
// animal := CreateHuman ;
37473: LD_ADDR_VAR 0 12
37477: PUSH
37478: CALL_OW 44
37482: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37483: LD_VAR 0 12
37487: PPUSH
37488: LD_VAR 0 8
37492: PPUSH
37493: LD_INT 0
37495: PPUSH
37496: CALL 39550 0 3
// end ;
37500: GO 37454
37502: POP
37503: POP
// if tigers then
37504: LD_VAR 0 2
37508: IFFALSE 37592
// for i = 1 to tigers do
37510: LD_ADDR_VAR 0 11
37514: PUSH
37515: DOUBLE
37516: LD_INT 1
37518: DEC
37519: ST_TO_ADDR
37520: LD_VAR 0 2
37524: PUSH
37525: FOR_TO
37526: IFFALSE 37590
// begin hc_class = class_tiger ;
37528: LD_ADDR_OWVAR 28
37532: PUSH
37533: LD_INT 14
37535: ST_TO_ADDR
// hc_gallery =  ;
37536: LD_ADDR_OWVAR 33
37540: PUSH
37541: LD_STRING 
37543: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37544: LD_ADDR_OWVAR 35
37548: PUSH
37549: LD_INT 7
37551: NEG
37552: PPUSH
37553: LD_INT 7
37555: PPUSH
37556: CALL_OW 12
37560: ST_TO_ADDR
// animal := CreateHuman ;
37561: LD_ADDR_VAR 0 12
37565: PUSH
37566: CALL_OW 44
37570: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37571: LD_VAR 0 12
37575: PPUSH
37576: LD_VAR 0 8
37580: PPUSH
37581: LD_INT 0
37583: PPUSH
37584: CALL 39550 0 3
// end ;
37588: GO 37525
37590: POP
37591: POP
// if apemans then
37592: LD_VAR 0 3
37596: IFFALSE 37719
// for i = 1 to apemans do
37598: LD_ADDR_VAR 0 11
37602: PUSH
37603: DOUBLE
37604: LD_INT 1
37606: DEC
37607: ST_TO_ADDR
37608: LD_VAR 0 3
37612: PUSH
37613: FOR_TO
37614: IFFALSE 37717
// begin hc_class = class_apeman ;
37616: LD_ADDR_OWVAR 28
37620: PUSH
37621: LD_INT 12
37623: ST_TO_ADDR
// hc_gallery =  ;
37624: LD_ADDR_OWVAR 33
37628: PUSH
37629: LD_STRING 
37631: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
37632: LD_ADDR_OWVAR 35
37636: PUSH
37637: LD_INT 5
37639: NEG
37640: PPUSH
37641: LD_INT 5
37643: PPUSH
37644: CALL_OW 12
37648: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37649: LD_ADDR_OWVAR 31
37653: PUSH
37654: LD_INT 1
37656: PPUSH
37657: LD_INT 3
37659: PPUSH
37660: CALL_OW 12
37664: PUSH
37665: LD_INT 1
37667: PPUSH
37668: LD_INT 3
37670: PPUSH
37671: CALL_OW 12
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: ST_TO_ADDR
// animal := CreateHuman ;
37688: LD_ADDR_VAR 0 12
37692: PUSH
37693: CALL_OW 44
37697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37698: LD_VAR 0 12
37702: PPUSH
37703: LD_VAR 0 8
37707: PPUSH
37708: LD_INT 0
37710: PPUSH
37711: CALL 39550 0 3
// end ;
37715: GO 37613
37717: POP
37718: POP
// if enchidnas then
37719: LD_VAR 0 4
37723: IFFALSE 37790
// for i = 1 to enchidnas do
37725: LD_ADDR_VAR 0 11
37729: PUSH
37730: DOUBLE
37731: LD_INT 1
37733: DEC
37734: ST_TO_ADDR
37735: LD_VAR 0 4
37739: PUSH
37740: FOR_TO
37741: IFFALSE 37788
// begin hc_class = 13 ;
37743: LD_ADDR_OWVAR 28
37747: PUSH
37748: LD_INT 13
37750: ST_TO_ADDR
// hc_gallery =  ;
37751: LD_ADDR_OWVAR 33
37755: PUSH
37756: LD_STRING 
37758: ST_TO_ADDR
// animal := CreateHuman ;
37759: LD_ADDR_VAR 0 12
37763: PUSH
37764: CALL_OW 44
37768: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37769: LD_VAR 0 12
37773: PPUSH
37774: LD_VAR 0 8
37778: PPUSH
37779: LD_INT 0
37781: PPUSH
37782: CALL 39550 0 3
// end ;
37786: GO 37740
37788: POP
37789: POP
// if fishes then
37790: LD_VAR 0 7
37794: IFFALSE 37861
// for i = 1 to fishes do
37796: LD_ADDR_VAR 0 11
37800: PUSH
37801: DOUBLE
37802: LD_INT 1
37804: DEC
37805: ST_TO_ADDR
37806: LD_VAR 0 7
37810: PUSH
37811: FOR_TO
37812: IFFALSE 37859
// begin hc_class = 20 ;
37814: LD_ADDR_OWVAR 28
37818: PUSH
37819: LD_INT 20
37821: ST_TO_ADDR
// hc_gallery =  ;
37822: LD_ADDR_OWVAR 33
37826: PUSH
37827: LD_STRING 
37829: ST_TO_ADDR
// animal := CreateHuman ;
37830: LD_ADDR_VAR 0 12
37834: PUSH
37835: CALL_OW 44
37839: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37840: LD_VAR 0 12
37844: PPUSH
37845: LD_VAR 0 9
37849: PPUSH
37850: LD_INT 0
37852: PPUSH
37853: CALL 39550 0 3
// end ;
37857: GO 37811
37859: POP
37860: POP
// end ;
37861: LD_VAR 0 10
37865: RET
// export function WantHeal ( sci , unit ) ; begin
37866: LD_INT 0
37868: PPUSH
// if GetTaskList ( sci ) > 0 then
37869: LD_VAR 0 1
37873: PPUSH
37874: CALL_OW 437
37878: PUSH
37879: LD_INT 0
37881: GREATER
37882: IFFALSE 37952
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37884: LD_VAR 0 1
37888: PPUSH
37889: CALL_OW 437
37893: PUSH
37894: LD_INT 1
37896: ARRAY
37897: PUSH
37898: LD_INT 1
37900: ARRAY
37901: PUSH
37902: LD_STRING l
37904: EQUAL
37905: PUSH
37906: LD_VAR 0 1
37910: PPUSH
37911: CALL_OW 437
37915: PUSH
37916: LD_INT 1
37918: ARRAY
37919: PUSH
37920: LD_INT 4
37922: ARRAY
37923: PUSH
37924: LD_VAR 0 2
37928: EQUAL
37929: AND
37930: IFFALSE 37942
// result := true else
37932: LD_ADDR_VAR 0 3
37936: PUSH
37937: LD_INT 1
37939: ST_TO_ADDR
37940: GO 37950
// result := false ;
37942: LD_ADDR_VAR 0 3
37946: PUSH
37947: LD_INT 0
37949: ST_TO_ADDR
// end else
37950: GO 37960
// result := false ;
37952: LD_ADDR_VAR 0 3
37956: PUSH
37957: LD_INT 0
37959: ST_TO_ADDR
// end ;
37960: LD_VAR 0 3
37964: RET
// export function HealTarget ( sci ) ; begin
37965: LD_INT 0
37967: PPUSH
// if not sci then
37968: LD_VAR 0 1
37972: NOT
37973: IFFALSE 37977
// exit ;
37975: GO 38042
// result := 0 ;
37977: LD_ADDR_VAR 0 2
37981: PUSH
37982: LD_INT 0
37984: ST_TO_ADDR
// if GetTaskList ( sci ) then
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 437
37994: IFFALSE 38042
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37996: LD_VAR 0 1
38000: PPUSH
38001: CALL_OW 437
38005: PUSH
38006: LD_INT 1
38008: ARRAY
38009: PUSH
38010: LD_INT 1
38012: ARRAY
38013: PUSH
38014: LD_STRING l
38016: EQUAL
38017: IFFALSE 38042
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38019: LD_ADDR_VAR 0 2
38023: PUSH
38024: LD_VAR 0 1
38028: PPUSH
38029: CALL_OW 437
38033: PUSH
38034: LD_INT 1
38036: ARRAY
38037: PUSH
38038: LD_INT 4
38040: ARRAY
38041: ST_TO_ADDR
// end ;
38042: LD_VAR 0 2
38046: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38047: LD_INT 0
38049: PPUSH
38050: PPUSH
38051: PPUSH
38052: PPUSH
// if not base_units then
38053: LD_VAR 0 1
38057: NOT
38058: IFFALSE 38062
// exit ;
38060: GO 38149
// result := false ;
38062: LD_ADDR_VAR 0 2
38066: PUSH
38067: LD_INT 0
38069: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38070: LD_ADDR_VAR 0 5
38074: PUSH
38075: LD_VAR 0 1
38079: PPUSH
38080: LD_INT 21
38082: PUSH
38083: LD_INT 3
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PPUSH
38090: CALL_OW 72
38094: ST_TO_ADDR
// if not tmp then
38095: LD_VAR 0 5
38099: NOT
38100: IFFALSE 38104
// exit ;
38102: GO 38149
// for i in tmp do
38104: LD_ADDR_VAR 0 3
38108: PUSH
38109: LD_VAR 0 5
38113: PUSH
38114: FOR_IN
38115: IFFALSE 38147
// begin result := EnemyInRange ( i , 22 ) ;
38117: LD_ADDR_VAR 0 2
38121: PUSH
38122: LD_VAR 0 3
38126: PPUSH
38127: LD_INT 22
38129: PPUSH
38130: CALL 36385 0 2
38134: ST_TO_ADDR
// if result then
38135: LD_VAR 0 2
38139: IFFALSE 38145
// exit ;
38141: POP
38142: POP
38143: GO 38149
// end ;
38145: GO 38114
38147: POP
38148: POP
// end ;
38149: LD_VAR 0 2
38153: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
38154: LD_INT 0
38156: PPUSH
38157: PPUSH
// if not units then
38158: LD_VAR 0 1
38162: NOT
38163: IFFALSE 38167
// exit ;
38165: GO 38237
// result := [ ] ;
38167: LD_ADDR_VAR 0 3
38171: PUSH
38172: EMPTY
38173: ST_TO_ADDR
// for i in units do
38174: LD_ADDR_VAR 0 4
38178: PUSH
38179: LD_VAR 0 1
38183: PUSH
38184: FOR_IN
38185: IFFALSE 38235
// if GetTag ( i ) = tag then
38187: LD_VAR 0 4
38191: PPUSH
38192: CALL_OW 110
38196: PUSH
38197: LD_VAR 0 2
38201: EQUAL
38202: IFFALSE 38233
// result := Insert ( result , result + 1 , i ) ;
38204: LD_ADDR_VAR 0 3
38208: PUSH
38209: LD_VAR 0 3
38213: PPUSH
38214: LD_VAR 0 3
38218: PUSH
38219: LD_INT 1
38221: PLUS
38222: PPUSH
38223: LD_VAR 0 4
38227: PPUSH
38228: CALL_OW 2
38232: ST_TO_ADDR
38233: GO 38184
38235: POP
38236: POP
// end ;
38237: LD_VAR 0 3
38241: RET
// export function IsDriver ( un ) ; begin
38242: LD_INT 0
38244: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38245: LD_ADDR_VAR 0 2
38249: PUSH
38250: LD_VAR 0 1
38254: PUSH
38255: LD_INT 55
38257: PUSH
38258: EMPTY
38259: LIST
38260: PPUSH
38261: CALL_OW 69
38265: IN
38266: ST_TO_ADDR
// end ;
38267: LD_VAR 0 2
38271: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38272: LD_INT 0
38274: PPUSH
38275: PPUSH
// list := [ ] ;
38276: LD_ADDR_VAR 0 5
38280: PUSH
38281: EMPTY
38282: ST_TO_ADDR
// case d of 0 :
38283: LD_VAR 0 3
38287: PUSH
38288: LD_INT 0
38290: DOUBLE
38291: EQUAL
38292: IFTRUE 38296
38294: GO 38429
38296: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38297: LD_ADDR_VAR 0 5
38301: PUSH
38302: LD_VAR 0 1
38306: PUSH
38307: LD_INT 4
38309: MINUS
38310: PUSH
38311: LD_VAR 0 2
38315: PUSH
38316: LD_INT 4
38318: MINUS
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: LIST
38327: PUSH
38328: LD_VAR 0 1
38332: PUSH
38333: LD_INT 3
38335: MINUS
38336: PUSH
38337: LD_VAR 0 2
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: PUSH
38350: LD_VAR 0 1
38354: PUSH
38355: LD_INT 4
38357: PLUS
38358: PUSH
38359: LD_VAR 0 2
38363: PUSH
38364: LD_INT 4
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: LIST
38371: PUSH
38372: LD_VAR 0 1
38376: PUSH
38377: LD_INT 3
38379: PLUS
38380: PUSH
38381: LD_VAR 0 2
38385: PUSH
38386: LD_INT 3
38388: PLUS
38389: PUSH
38390: LD_INT 5
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: PUSH
38398: LD_VAR 0 1
38402: PUSH
38403: LD_VAR 0 2
38407: PUSH
38408: LD_INT 4
38410: PLUS
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: ST_TO_ADDR
// end ; 1 :
38427: GO 39127
38429: LD_INT 1
38431: DOUBLE
38432: EQUAL
38433: IFTRUE 38437
38435: GO 38570
38437: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38438: LD_ADDR_VAR 0 5
38442: PUSH
38443: LD_VAR 0 1
38447: PUSH
38448: LD_VAR 0 2
38452: PUSH
38453: LD_INT 4
38455: MINUS
38456: PUSH
38457: LD_INT 3
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: LIST
38464: PUSH
38465: LD_VAR 0 1
38469: PUSH
38470: LD_INT 3
38472: MINUS
38473: PUSH
38474: LD_VAR 0 2
38478: PUSH
38479: LD_INT 3
38481: MINUS
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: PUSH
38491: LD_VAR 0 1
38495: PUSH
38496: LD_INT 4
38498: MINUS
38499: PUSH
38500: LD_VAR 0 2
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: LIST
38512: PUSH
38513: LD_VAR 0 1
38517: PUSH
38518: LD_VAR 0 2
38522: PUSH
38523: LD_INT 3
38525: PLUS
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: PUSH
38535: LD_VAR 0 1
38539: PUSH
38540: LD_INT 4
38542: PLUS
38543: PUSH
38544: LD_VAR 0 2
38548: PUSH
38549: LD_INT 4
38551: PLUS
38552: PUSH
38553: LD_INT 5
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: ST_TO_ADDR
// end ; 2 :
38568: GO 39127
38570: LD_INT 2
38572: DOUBLE
38573: EQUAL
38574: IFTRUE 38578
38576: GO 38707
38578: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38579: LD_ADDR_VAR 0 5
38583: PUSH
38584: LD_VAR 0 1
38588: PUSH
38589: LD_VAR 0 2
38593: PUSH
38594: LD_INT 3
38596: MINUS
38597: PUSH
38598: LD_INT 3
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: PUSH
38606: LD_VAR 0 1
38610: PUSH
38611: LD_INT 4
38613: PLUS
38614: PUSH
38615: LD_VAR 0 2
38619: PUSH
38620: LD_INT 4
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: PUSH
38628: LD_VAR 0 1
38632: PUSH
38633: LD_VAR 0 2
38637: PUSH
38638: LD_INT 4
38640: PLUS
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: PUSH
38650: LD_VAR 0 1
38654: PUSH
38655: LD_INT 3
38657: MINUS
38658: PUSH
38659: LD_VAR 0 2
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: PUSH
38672: LD_VAR 0 1
38676: PUSH
38677: LD_INT 4
38679: MINUS
38680: PUSH
38681: LD_VAR 0 2
38685: PUSH
38686: LD_INT 4
38688: MINUS
38689: PUSH
38690: LD_INT 2
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: ST_TO_ADDR
// end ; 3 :
38705: GO 39127
38707: LD_INT 3
38709: DOUBLE
38710: EQUAL
38711: IFTRUE 38715
38713: GO 38848
38715: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38716: LD_ADDR_VAR 0 5
38720: PUSH
38721: LD_VAR 0 1
38725: PUSH
38726: LD_INT 3
38728: PLUS
38729: PUSH
38730: LD_VAR 0 2
38734: PUSH
38735: LD_INT 4
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: LIST
38742: PUSH
38743: LD_VAR 0 1
38747: PUSH
38748: LD_INT 4
38750: PLUS
38751: PUSH
38752: LD_VAR 0 2
38756: PUSH
38757: LD_INT 4
38759: PLUS
38760: PUSH
38761: LD_INT 5
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: LIST
38768: PUSH
38769: LD_VAR 0 1
38773: PUSH
38774: LD_INT 4
38776: MINUS
38777: PUSH
38778: LD_VAR 0 2
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: PUSH
38791: LD_VAR 0 1
38795: PUSH
38796: LD_VAR 0 2
38800: PUSH
38801: LD_INT 4
38803: MINUS
38804: PUSH
38805: LD_INT 3
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: PUSH
38813: LD_VAR 0 1
38817: PUSH
38818: LD_INT 3
38820: MINUS
38821: PUSH
38822: LD_VAR 0 2
38826: PUSH
38827: LD_INT 3
38829: MINUS
38830: PUSH
38831: LD_INT 2
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: ST_TO_ADDR
// end ; 4 :
38846: GO 39127
38848: LD_INT 4
38850: DOUBLE
38851: EQUAL
38852: IFTRUE 38856
38854: GO 38989
38856: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38857: LD_ADDR_VAR 0 5
38861: PUSH
38862: LD_VAR 0 1
38866: PUSH
38867: LD_VAR 0 2
38871: PUSH
38872: LD_INT 4
38874: PLUS
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: PUSH
38884: LD_VAR 0 1
38888: PUSH
38889: LD_INT 3
38891: PLUS
38892: PUSH
38893: LD_VAR 0 2
38897: PUSH
38898: LD_INT 3
38900: PLUS
38901: PUSH
38902: LD_INT 5
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: PUSH
38910: LD_VAR 0 1
38914: PUSH
38915: LD_INT 4
38917: PLUS
38918: PUSH
38919: LD_VAR 0 2
38923: PUSH
38924: LD_INT 4
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: PUSH
38932: LD_VAR 0 1
38936: PUSH
38937: LD_VAR 0 2
38941: PUSH
38942: LD_INT 3
38944: MINUS
38945: PUSH
38946: LD_INT 3
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: PUSH
38954: LD_VAR 0 1
38958: PUSH
38959: LD_INT 4
38961: MINUS
38962: PUSH
38963: LD_VAR 0 2
38967: PUSH
38968: LD_INT 4
38970: MINUS
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: ST_TO_ADDR
// end ; 5 :
38987: GO 39127
38989: LD_INT 5
38991: DOUBLE
38992: EQUAL
38993: IFTRUE 38997
38995: GO 39126
38997: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38998: LD_ADDR_VAR 0 5
39002: PUSH
39003: LD_VAR 0 1
39007: PUSH
39008: LD_INT 4
39010: MINUS
39011: PUSH
39012: LD_VAR 0 2
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: LIST
39024: PUSH
39025: LD_VAR 0 1
39029: PUSH
39030: LD_VAR 0 2
39034: PUSH
39035: LD_INT 4
39037: MINUS
39038: PUSH
39039: LD_INT 3
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: LIST
39046: PUSH
39047: LD_VAR 0 1
39051: PUSH
39052: LD_INT 4
39054: PLUS
39055: PUSH
39056: LD_VAR 0 2
39060: PUSH
39061: LD_INT 4
39063: PLUS
39064: PUSH
39065: LD_INT 5
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: LIST
39072: PUSH
39073: LD_VAR 0 1
39077: PUSH
39078: LD_INT 3
39080: PLUS
39081: PUSH
39082: LD_VAR 0 2
39086: PUSH
39087: LD_INT 4
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: PUSH
39095: LD_VAR 0 1
39099: PUSH
39100: LD_VAR 0 2
39104: PUSH
39105: LD_INT 3
39107: PLUS
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: ST_TO_ADDR
// end ; end ;
39124: GO 39127
39126: POP
// result := list ;
39127: LD_ADDR_VAR 0 4
39131: PUSH
39132: LD_VAR 0 5
39136: ST_TO_ADDR
// end ;
39137: LD_VAR 0 4
39141: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39142: LD_INT 0
39144: PPUSH
39145: PPUSH
39146: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39147: LD_VAR 0 1
39151: NOT
39152: PUSH
39153: LD_VAR 0 2
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: LD_INT 3
39166: PUSH
39167: LD_INT 4
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: IN
39176: NOT
39177: OR
39178: IFFALSE 39182
// exit ;
39180: GO 39274
// tmp := [ ] ;
39182: LD_ADDR_VAR 0 5
39186: PUSH
39187: EMPTY
39188: ST_TO_ADDR
// for i in units do
39189: LD_ADDR_VAR 0 4
39193: PUSH
39194: LD_VAR 0 1
39198: PUSH
39199: FOR_IN
39200: IFFALSE 39243
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39202: LD_ADDR_VAR 0 5
39206: PUSH
39207: LD_VAR 0 5
39211: PPUSH
39212: LD_VAR 0 5
39216: PUSH
39217: LD_INT 1
39219: PLUS
39220: PPUSH
39221: LD_VAR 0 4
39225: PPUSH
39226: LD_VAR 0 2
39230: PPUSH
39231: CALL_OW 259
39235: PPUSH
39236: CALL_OW 2
39240: ST_TO_ADDR
39241: GO 39199
39243: POP
39244: POP
// if not tmp then
39245: LD_VAR 0 5
39249: NOT
39250: IFFALSE 39254
// exit ;
39252: GO 39274
// result := SortListByListDesc ( units , tmp ) ;
39254: LD_ADDR_VAR 0 3
39258: PUSH
39259: LD_VAR 0 1
39263: PPUSH
39264: LD_VAR 0 5
39268: PPUSH
39269: CALL_OW 77
39273: ST_TO_ADDR
// end ;
39274: LD_VAR 0 3
39278: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39279: LD_INT 0
39281: PPUSH
39282: PPUSH
39283: PPUSH
// result := false ;
39284: LD_ADDR_VAR 0 3
39288: PUSH
39289: LD_INT 0
39291: ST_TO_ADDR
// x := GetX ( building ) ;
39292: LD_ADDR_VAR 0 4
39296: PUSH
39297: LD_VAR 0 2
39301: PPUSH
39302: CALL_OW 250
39306: ST_TO_ADDR
// y := GetY ( building ) ;
39307: LD_ADDR_VAR 0 5
39311: PUSH
39312: LD_VAR 0 2
39316: PPUSH
39317: CALL_OW 251
39321: ST_TO_ADDR
// if not building or not x or not y then
39322: LD_VAR 0 2
39326: NOT
39327: PUSH
39328: LD_VAR 0 4
39332: NOT
39333: OR
39334: PUSH
39335: LD_VAR 0 5
39339: NOT
39340: OR
39341: IFFALSE 39345
// exit ;
39343: GO 39437
// if GetTaskList ( unit ) then
39345: LD_VAR 0 1
39349: PPUSH
39350: CALL_OW 437
39354: IFFALSE 39437
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39356: LD_STRING e
39358: PUSH
39359: LD_VAR 0 1
39363: PPUSH
39364: CALL_OW 437
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PUSH
39373: LD_INT 1
39375: ARRAY
39376: EQUAL
39377: PUSH
39378: LD_VAR 0 4
39382: PUSH
39383: LD_VAR 0 1
39387: PPUSH
39388: CALL_OW 437
39392: PUSH
39393: LD_INT 1
39395: ARRAY
39396: PUSH
39397: LD_INT 2
39399: ARRAY
39400: EQUAL
39401: AND
39402: PUSH
39403: LD_VAR 0 5
39407: PUSH
39408: LD_VAR 0 1
39412: PPUSH
39413: CALL_OW 437
39417: PUSH
39418: LD_INT 1
39420: ARRAY
39421: PUSH
39422: LD_INT 3
39424: ARRAY
39425: EQUAL
39426: AND
39427: IFFALSE 39437
// result := true end ;
39429: LD_ADDR_VAR 0 3
39433: PUSH
39434: LD_INT 1
39436: ST_TO_ADDR
// end ;
39437: LD_VAR 0 3
39441: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39442: LD_INT 0
39444: PPUSH
// result := false ;
39445: LD_ADDR_VAR 0 4
39449: PUSH
39450: LD_INT 0
39452: ST_TO_ADDR
// if GetTaskList ( unit ) then
39453: LD_VAR 0 1
39457: PPUSH
39458: CALL_OW 437
39462: IFFALSE 39545
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39464: LD_STRING M
39466: PUSH
39467: LD_VAR 0 1
39471: PPUSH
39472: CALL_OW 437
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PUSH
39481: LD_INT 1
39483: ARRAY
39484: EQUAL
39485: PUSH
39486: LD_VAR 0 2
39490: PUSH
39491: LD_VAR 0 1
39495: PPUSH
39496: CALL_OW 437
39500: PUSH
39501: LD_INT 1
39503: ARRAY
39504: PUSH
39505: LD_INT 2
39507: ARRAY
39508: EQUAL
39509: AND
39510: PUSH
39511: LD_VAR 0 3
39515: PUSH
39516: LD_VAR 0 1
39520: PPUSH
39521: CALL_OW 437
39525: PUSH
39526: LD_INT 1
39528: ARRAY
39529: PUSH
39530: LD_INT 3
39532: ARRAY
39533: EQUAL
39534: AND
39535: IFFALSE 39545
// result := true ;
39537: LD_ADDR_VAR 0 4
39541: PUSH
39542: LD_INT 1
39544: ST_TO_ADDR
// end ; end ;
39545: LD_VAR 0 4
39549: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39550: LD_INT 0
39552: PPUSH
39553: PPUSH
39554: PPUSH
39555: PPUSH
// if not unit or not area then
39556: LD_VAR 0 1
39560: NOT
39561: PUSH
39562: LD_VAR 0 2
39566: NOT
39567: OR
39568: IFFALSE 39572
// exit ;
39570: GO 39736
// tmp := AreaToList ( area , i ) ;
39572: LD_ADDR_VAR 0 6
39576: PUSH
39577: LD_VAR 0 2
39581: PPUSH
39582: LD_VAR 0 5
39586: PPUSH
39587: CALL_OW 517
39591: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39592: LD_ADDR_VAR 0 5
39596: PUSH
39597: DOUBLE
39598: LD_INT 1
39600: DEC
39601: ST_TO_ADDR
39602: LD_VAR 0 6
39606: PUSH
39607: LD_INT 1
39609: ARRAY
39610: PUSH
39611: FOR_TO
39612: IFFALSE 39734
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39614: LD_ADDR_VAR 0 7
39618: PUSH
39619: LD_VAR 0 6
39623: PUSH
39624: LD_INT 1
39626: ARRAY
39627: PUSH
39628: LD_VAR 0 5
39632: ARRAY
39633: PUSH
39634: LD_VAR 0 6
39638: PUSH
39639: LD_INT 2
39641: ARRAY
39642: PUSH
39643: LD_VAR 0 5
39647: ARRAY
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39653: LD_VAR 0 7
39657: PUSH
39658: LD_INT 1
39660: ARRAY
39661: PPUSH
39662: LD_VAR 0 7
39666: PUSH
39667: LD_INT 2
39669: ARRAY
39670: PPUSH
39671: CALL_OW 428
39675: PUSH
39676: LD_INT 0
39678: EQUAL
39679: IFFALSE 39732
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39681: LD_VAR 0 1
39685: PPUSH
39686: LD_VAR 0 7
39690: PUSH
39691: LD_INT 1
39693: ARRAY
39694: PPUSH
39695: LD_VAR 0 7
39699: PUSH
39700: LD_INT 2
39702: ARRAY
39703: PPUSH
39704: LD_VAR 0 3
39708: PPUSH
39709: CALL_OW 48
// result := IsPlaced ( unit ) ;
39713: LD_ADDR_VAR 0 4
39717: PUSH
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 305
39727: ST_TO_ADDR
// exit ;
39728: POP
39729: POP
39730: GO 39736
// end ; end ;
39732: GO 39611
39734: POP
39735: POP
// end ;
39736: LD_VAR 0 4
39740: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39741: LD_INT 0
39743: PPUSH
39744: PPUSH
39745: PPUSH
// if not side or side > 8 then
39746: LD_VAR 0 1
39750: NOT
39751: PUSH
39752: LD_VAR 0 1
39756: PUSH
39757: LD_INT 8
39759: GREATER
39760: OR
39761: IFFALSE 39765
// exit ;
39763: GO 39952
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39765: LD_ADDR_VAR 0 4
39769: PUSH
39770: LD_INT 22
39772: PUSH
39773: LD_VAR 0 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 21
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PPUSH
39796: CALL_OW 69
39800: ST_TO_ADDR
// if not tmp then
39801: LD_VAR 0 4
39805: NOT
39806: IFFALSE 39810
// exit ;
39808: GO 39952
// enable_addtolog := true ;
39810: LD_ADDR_OWVAR 81
39814: PUSH
39815: LD_INT 1
39817: ST_TO_ADDR
// AddToLog ( [ ) ;
39818: LD_STRING [
39820: PPUSH
39821: CALL_OW 561
// for i in tmp do
39825: LD_ADDR_VAR 0 3
39829: PUSH
39830: LD_VAR 0 4
39834: PUSH
39835: FOR_IN
39836: IFFALSE 39943
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39838: LD_STRING [
39840: PUSH
39841: LD_VAR 0 3
39845: PPUSH
39846: CALL_OW 266
39850: STR
39851: PUSH
39852: LD_STRING , 
39854: STR
39855: PUSH
39856: LD_VAR 0 3
39860: PPUSH
39861: CALL_OW 250
39865: STR
39866: PUSH
39867: LD_STRING , 
39869: STR
39870: PUSH
39871: LD_VAR 0 3
39875: PPUSH
39876: CALL_OW 251
39880: STR
39881: PUSH
39882: LD_STRING , 
39884: STR
39885: PUSH
39886: LD_VAR 0 3
39890: PPUSH
39891: CALL_OW 254
39895: STR
39896: PUSH
39897: LD_STRING , 
39899: STR
39900: PUSH
39901: LD_VAR 0 3
39905: PPUSH
39906: LD_INT 1
39908: PPUSH
39909: CALL_OW 268
39913: STR
39914: PUSH
39915: LD_STRING , 
39917: STR
39918: PUSH
39919: LD_VAR 0 3
39923: PPUSH
39924: LD_INT 2
39926: PPUSH
39927: CALL_OW 268
39931: STR
39932: PUSH
39933: LD_STRING ],
39935: STR
39936: PPUSH
39937: CALL_OW 561
// end ;
39941: GO 39835
39943: POP
39944: POP
// AddToLog ( ]; ) ;
39945: LD_STRING ];
39947: PPUSH
39948: CALL_OW 561
// end ;
39952: LD_VAR 0 2
39956: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39957: LD_INT 0
39959: PPUSH
39960: PPUSH
39961: PPUSH
39962: PPUSH
39963: PPUSH
// if not area or not rate or not max then
39964: LD_VAR 0 1
39968: NOT
39969: PUSH
39970: LD_VAR 0 2
39974: NOT
39975: OR
39976: PUSH
39977: LD_VAR 0 4
39981: NOT
39982: OR
39983: IFFALSE 39987
// exit ;
39985: GO 40179
// while 1 do
39987: LD_INT 1
39989: IFFALSE 40179
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39991: LD_ADDR_VAR 0 9
39995: PUSH
39996: LD_VAR 0 1
40000: PPUSH
40001: LD_INT 1
40003: PPUSH
40004: CALL_OW 287
40008: PUSH
40009: LD_INT 10
40011: MUL
40012: ST_TO_ADDR
// r := rate / 10 ;
40013: LD_ADDR_VAR 0 7
40017: PUSH
40018: LD_VAR 0 2
40022: PUSH
40023: LD_INT 10
40025: DIVREAL
40026: ST_TO_ADDR
// time := 1 1$00 ;
40027: LD_ADDR_VAR 0 8
40031: PUSH
40032: LD_INT 2100
40034: ST_TO_ADDR
// if amount < min then
40035: LD_VAR 0 9
40039: PUSH
40040: LD_VAR 0 3
40044: LESS
40045: IFFALSE 40063
// r := r * 2 else
40047: LD_ADDR_VAR 0 7
40051: PUSH
40052: LD_VAR 0 7
40056: PUSH
40057: LD_INT 2
40059: MUL
40060: ST_TO_ADDR
40061: GO 40089
// if amount > max then
40063: LD_VAR 0 9
40067: PUSH
40068: LD_VAR 0 4
40072: GREATER
40073: IFFALSE 40089
// r := r / 2 ;
40075: LD_ADDR_VAR 0 7
40079: PUSH
40080: LD_VAR 0 7
40084: PUSH
40085: LD_INT 2
40087: DIVREAL
40088: ST_TO_ADDR
// time := time / r ;
40089: LD_ADDR_VAR 0 8
40093: PUSH
40094: LD_VAR 0 8
40098: PUSH
40099: LD_VAR 0 7
40103: DIVREAL
40104: ST_TO_ADDR
// if time < 0 then
40105: LD_VAR 0 8
40109: PUSH
40110: LD_INT 0
40112: LESS
40113: IFFALSE 40130
// time := time * - 1 ;
40115: LD_ADDR_VAR 0 8
40119: PUSH
40120: LD_VAR 0 8
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: MUL
40129: ST_TO_ADDR
// wait ( time ) ;
40130: LD_VAR 0 8
40134: PPUSH
40135: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
40139: LD_INT 35
40141: PPUSH
40142: LD_INT 875
40144: PPUSH
40145: CALL_OW 12
40149: PPUSH
40150: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40154: LD_INT 1
40156: PPUSH
40157: LD_INT 5
40159: PPUSH
40160: CALL_OW 12
40164: PPUSH
40165: LD_VAR 0 1
40169: PPUSH
40170: LD_INT 1
40172: PPUSH
40173: CALL_OW 55
// end ;
40177: GO 39987
// end ;
40179: LD_VAR 0 5
40183: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40184: LD_INT 0
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
// if not turrets or not factories then
40194: LD_VAR 0 1
40198: NOT
40199: PUSH
40200: LD_VAR 0 2
40204: NOT
40205: OR
40206: IFFALSE 40210
// exit ;
40208: GO 40517
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40210: LD_ADDR_VAR 0 10
40214: PUSH
40215: LD_INT 5
40217: PUSH
40218: LD_INT 6
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 4
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 3
40237: PUSH
40238: LD_INT 5
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 24
40252: PUSH
40253: LD_INT 25
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 23
40262: PUSH
40263: LD_INT 27
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 42
40276: PUSH
40277: LD_INT 43
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 44
40286: PUSH
40287: LD_INT 46
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 45
40296: PUSH
40297: LD_INT 47
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: LIST
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: LIST
40313: ST_TO_ADDR
// result := [ ] ;
40314: LD_ADDR_VAR 0 3
40318: PUSH
40319: EMPTY
40320: ST_TO_ADDR
// for i in turrets do
40321: LD_ADDR_VAR 0 4
40325: PUSH
40326: LD_VAR 0 1
40330: PUSH
40331: FOR_IN
40332: IFFALSE 40515
// begin nat := GetNation ( i ) ;
40334: LD_ADDR_VAR 0 7
40338: PUSH
40339: LD_VAR 0 4
40343: PPUSH
40344: CALL_OW 248
40348: ST_TO_ADDR
// weapon := 0 ;
40349: LD_ADDR_VAR 0 8
40353: PUSH
40354: LD_INT 0
40356: ST_TO_ADDR
// if not nat then
40357: LD_VAR 0 7
40361: NOT
40362: IFFALSE 40366
// continue ;
40364: GO 40331
// for j in list [ nat ] do
40366: LD_ADDR_VAR 0 5
40370: PUSH
40371: LD_VAR 0 10
40375: PUSH
40376: LD_VAR 0 7
40380: ARRAY
40381: PUSH
40382: FOR_IN
40383: IFFALSE 40424
// if GetBWeapon ( i ) = j [ 1 ] then
40385: LD_VAR 0 4
40389: PPUSH
40390: CALL_OW 269
40394: PUSH
40395: LD_VAR 0 5
40399: PUSH
40400: LD_INT 1
40402: ARRAY
40403: EQUAL
40404: IFFALSE 40422
// begin weapon := j [ 2 ] ;
40406: LD_ADDR_VAR 0 8
40410: PUSH
40411: LD_VAR 0 5
40415: PUSH
40416: LD_INT 2
40418: ARRAY
40419: ST_TO_ADDR
// break ;
40420: GO 40424
// end ;
40422: GO 40382
40424: POP
40425: POP
// if not weapon then
40426: LD_VAR 0 8
40430: NOT
40431: IFFALSE 40435
// continue ;
40433: GO 40331
// for k in factories do
40435: LD_ADDR_VAR 0 6
40439: PUSH
40440: LD_VAR 0 2
40444: PUSH
40445: FOR_IN
40446: IFFALSE 40511
// begin weapons := AvailableWeaponList ( k ) ;
40448: LD_ADDR_VAR 0 9
40452: PUSH
40453: LD_VAR 0 6
40457: PPUSH
40458: CALL_OW 478
40462: ST_TO_ADDR
// if not weapons then
40463: LD_VAR 0 9
40467: NOT
40468: IFFALSE 40472
// continue ;
40470: GO 40445
// if weapon in weapons then
40472: LD_VAR 0 8
40476: PUSH
40477: LD_VAR 0 9
40481: IN
40482: IFFALSE 40509
// begin result := [ i , weapon ] ;
40484: LD_ADDR_VAR 0 3
40488: PUSH
40489: LD_VAR 0 4
40493: PUSH
40494: LD_VAR 0 8
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: ST_TO_ADDR
// exit ;
40503: POP
40504: POP
40505: POP
40506: POP
40507: GO 40517
// end ; end ;
40509: GO 40445
40511: POP
40512: POP
// end ;
40513: GO 40331
40515: POP
40516: POP
// end ;
40517: LD_VAR 0 3
40521: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40522: LD_INT 0
40524: PPUSH
// if not side or side > 8 then
40525: LD_VAR 0 3
40529: NOT
40530: PUSH
40531: LD_VAR 0 3
40535: PUSH
40536: LD_INT 8
40538: GREATER
40539: OR
40540: IFFALSE 40544
// exit ;
40542: GO 40603
// if not range then
40544: LD_VAR 0 4
40548: NOT
40549: IFFALSE 40560
// range := - 12 ;
40551: LD_ADDR_VAR 0 4
40555: PUSH
40556: LD_INT 12
40558: NEG
40559: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40560: LD_VAR 0 1
40564: PPUSH
40565: LD_VAR 0 2
40569: PPUSH
40570: LD_VAR 0 3
40574: PPUSH
40575: LD_VAR 0 4
40579: PPUSH
40580: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40584: LD_VAR 0 1
40588: PPUSH
40589: LD_VAR 0 2
40593: PPUSH
40594: LD_VAR 0 3
40598: PPUSH
40599: CALL_OW 331
// end ;
40603: LD_VAR 0 5
40607: RET
// export function Video ( mode ) ; begin
40608: LD_INT 0
40610: PPUSH
// ingame_video = mode ;
40611: LD_ADDR_OWVAR 52
40615: PUSH
40616: LD_VAR 0 1
40620: ST_TO_ADDR
// interface_hidden = mode ;
40621: LD_ADDR_OWVAR 54
40625: PUSH
40626: LD_VAR 0 1
40630: ST_TO_ADDR
// end ;
40631: LD_VAR 0 2
40635: RET
// export function Join ( array , element ) ; begin
40636: LD_INT 0
40638: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40639: LD_ADDR_VAR 0 3
40643: PUSH
40644: LD_VAR 0 1
40648: PPUSH
40649: LD_VAR 0 1
40653: PUSH
40654: LD_INT 1
40656: PLUS
40657: PPUSH
40658: LD_VAR 0 2
40662: PPUSH
40663: CALL_OW 1
40667: ST_TO_ADDR
// end ;
40668: LD_VAR 0 3
40672: RET
// export function JoinUnion ( array , element ) ; begin
40673: LD_INT 0
40675: PPUSH
// result := array union element ;
40676: LD_ADDR_VAR 0 3
40680: PUSH
40681: LD_VAR 0 1
40685: PUSH
40686: LD_VAR 0 2
40690: UNION
40691: ST_TO_ADDR
// end ;
40692: LD_VAR 0 3
40696: RET
// export function GetBehemoths ( side ) ; begin
40697: LD_INT 0
40699: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
40700: LD_ADDR_VAR 0 2
40704: PUSH
40705: LD_INT 22
40707: PUSH
40708: LD_VAR 0 1
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 31
40719: PUSH
40720: LD_INT 25
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PPUSH
40731: CALL_OW 69
40735: ST_TO_ADDR
// end ;
40736: LD_VAR 0 2
40740: RET
// export function Shuffle ( array ) ; var i , index ; begin
40741: LD_INT 0
40743: PPUSH
40744: PPUSH
40745: PPUSH
// result := [ ] ;
40746: LD_ADDR_VAR 0 2
40750: PUSH
40751: EMPTY
40752: ST_TO_ADDR
// if not array then
40753: LD_VAR 0 1
40757: NOT
40758: IFFALSE 40762
// exit ;
40760: GO 40861
// Randomize ;
40762: CALL_OW 10
// for i = array downto 1 do
40766: LD_ADDR_VAR 0 3
40770: PUSH
40771: DOUBLE
40772: LD_VAR 0 1
40776: INC
40777: ST_TO_ADDR
40778: LD_INT 1
40780: PUSH
40781: FOR_DOWNTO
40782: IFFALSE 40859
// begin index := rand ( 1 , array ) ;
40784: LD_ADDR_VAR 0 4
40788: PUSH
40789: LD_INT 1
40791: PPUSH
40792: LD_VAR 0 1
40796: PPUSH
40797: CALL_OW 12
40801: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40802: LD_ADDR_VAR 0 2
40806: PUSH
40807: LD_VAR 0 2
40811: PPUSH
40812: LD_VAR 0 2
40816: PUSH
40817: LD_INT 1
40819: PLUS
40820: PPUSH
40821: LD_VAR 0 1
40825: PUSH
40826: LD_VAR 0 4
40830: ARRAY
40831: PPUSH
40832: CALL_OW 2
40836: ST_TO_ADDR
// array := Delete ( array , index ) ;
40837: LD_ADDR_VAR 0 1
40841: PUSH
40842: LD_VAR 0 1
40846: PPUSH
40847: LD_VAR 0 4
40851: PPUSH
40852: CALL_OW 3
40856: ST_TO_ADDR
// end ;
40857: GO 40781
40859: POP
40860: POP
// end ;
40861: LD_VAR 0 2
40865: RET
// export function GetBaseMaterials ( base ) ; begin
40866: LD_INT 0
40868: PPUSH
// result := [ 0 , 0 , 0 ] ;
40869: LD_ADDR_VAR 0 2
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: LIST
40887: ST_TO_ADDR
// if not base then
40888: LD_VAR 0 1
40892: NOT
40893: IFFALSE 40897
// exit ;
40895: GO 40946
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40897: LD_ADDR_VAR 0 2
40901: PUSH
40902: LD_VAR 0 1
40906: PPUSH
40907: LD_INT 1
40909: PPUSH
40910: CALL_OW 275
40914: PUSH
40915: LD_VAR 0 1
40919: PPUSH
40920: LD_INT 2
40922: PPUSH
40923: CALL_OW 275
40927: PUSH
40928: LD_VAR 0 1
40932: PPUSH
40933: LD_INT 3
40935: PPUSH
40936: CALL_OW 275
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: ST_TO_ADDR
// end ;
40946: LD_VAR 0 2
40950: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40951: LD_INT 0
40953: PPUSH
40954: PPUSH
// result := array ;
40955: LD_ADDR_VAR 0 3
40959: PUSH
40960: LD_VAR 0 1
40964: ST_TO_ADDR
// if size > 0 then
40965: LD_VAR 0 2
40969: PUSH
40970: LD_INT 0
40972: GREATER
40973: IFFALSE 41019
// for i := array downto size do
40975: LD_ADDR_VAR 0 4
40979: PUSH
40980: DOUBLE
40981: LD_VAR 0 1
40985: INC
40986: ST_TO_ADDR
40987: LD_VAR 0 2
40991: PUSH
40992: FOR_DOWNTO
40993: IFFALSE 41017
// result := Delete ( result , result ) ;
40995: LD_ADDR_VAR 0 3
40999: PUSH
41000: LD_VAR 0 3
41004: PPUSH
41005: LD_VAR 0 3
41009: PPUSH
41010: CALL_OW 3
41014: ST_TO_ADDR
41015: GO 40992
41017: POP
41018: POP
// end ;
41019: LD_VAR 0 3
41023: RET
// export function ComExit ( unit ) ; var tmp ; begin
41024: LD_INT 0
41026: PPUSH
41027: PPUSH
// if not IsInUnit ( unit ) then
41028: LD_VAR 0 1
41032: PPUSH
41033: CALL_OW 310
41037: NOT
41038: IFFALSE 41042
// exit ;
41040: GO 41102
// tmp := IsInUnit ( unit ) ;
41042: LD_ADDR_VAR 0 3
41046: PUSH
41047: LD_VAR 0 1
41051: PPUSH
41052: CALL_OW 310
41056: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41057: LD_VAR 0 3
41061: PPUSH
41062: CALL_OW 247
41066: PUSH
41067: LD_INT 2
41069: EQUAL
41070: IFFALSE 41083
// ComExitVehicle ( unit ) else
41072: LD_VAR 0 1
41076: PPUSH
41077: CALL_OW 121
41081: GO 41092
// ComExitBuilding ( unit ) ;
41083: LD_VAR 0 1
41087: PPUSH
41088: CALL_OW 122
// result := tmp ;
41092: LD_ADDR_VAR 0 2
41096: PUSH
41097: LD_VAR 0 3
41101: ST_TO_ADDR
// end ;
41102: LD_VAR 0 2
41106: RET
// export function ComExitAll ( units ) ; var i ; begin
41107: LD_INT 0
41109: PPUSH
41110: PPUSH
// if not units then
41111: LD_VAR 0 1
41115: NOT
41116: IFFALSE 41120
// exit ;
41118: GO 41146
// for i in units do
41120: LD_ADDR_VAR 0 3
41124: PUSH
41125: LD_VAR 0 1
41129: PUSH
41130: FOR_IN
41131: IFFALSE 41144
// ComExit ( i ) ;
41133: LD_VAR 0 3
41137: PPUSH
41138: CALL 41024 0 1
41142: GO 41130
41144: POP
41145: POP
// end ;
41146: LD_VAR 0 2
41150: RET
// export function ResetHc ; begin
41151: LD_INT 0
41153: PPUSH
// InitHc ;
41154: CALL_OW 19
// hc_importance := 0 ;
41158: LD_ADDR_OWVAR 32
41162: PUSH
41163: LD_INT 0
41165: ST_TO_ADDR
// end ;
41166: LD_VAR 0 1
41170: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41171: LD_INT 0
41173: PPUSH
41174: PPUSH
41175: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41176: LD_ADDR_VAR 0 6
41180: PUSH
41181: LD_VAR 0 1
41185: PUSH
41186: LD_VAR 0 3
41190: PLUS
41191: PUSH
41192: LD_INT 2
41194: DIV
41195: ST_TO_ADDR
// if _x < 0 then
41196: LD_VAR 0 6
41200: PUSH
41201: LD_INT 0
41203: LESS
41204: IFFALSE 41221
// _x := _x * - 1 ;
41206: LD_ADDR_VAR 0 6
41210: PUSH
41211: LD_VAR 0 6
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: MUL
41220: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41221: LD_ADDR_VAR 0 7
41225: PUSH
41226: LD_VAR 0 2
41230: PUSH
41231: LD_VAR 0 4
41235: PLUS
41236: PUSH
41237: LD_INT 2
41239: DIV
41240: ST_TO_ADDR
// if _y < 0 then
41241: LD_VAR 0 7
41245: PUSH
41246: LD_INT 0
41248: LESS
41249: IFFALSE 41266
// _y := _y * - 1 ;
41251: LD_ADDR_VAR 0 7
41255: PUSH
41256: LD_VAR 0 7
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: MUL
41265: ST_TO_ADDR
// result := [ _x , _y ] ;
41266: LD_ADDR_VAR 0 5
41270: PUSH
41271: LD_VAR 0 6
41275: PUSH
41276: LD_VAR 0 7
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: ST_TO_ADDR
// end ;
41285: LD_VAR 0 5
41289: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41290: LD_INT 0
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
// task := GetTaskList ( unit ) ;
41296: LD_ADDR_VAR 0 7
41300: PUSH
41301: LD_VAR 0 1
41305: PPUSH
41306: CALL_OW 437
41310: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41311: LD_VAR 0 7
41315: NOT
41316: PUSH
41317: LD_VAR 0 1
41321: PPUSH
41322: LD_VAR 0 2
41326: PPUSH
41327: CALL_OW 308
41331: NOT
41332: AND
41333: IFFALSE 41337
// exit ;
41335: GO 41455
// if IsInArea ( unit , area ) then
41337: LD_VAR 0 1
41341: PPUSH
41342: LD_VAR 0 2
41346: PPUSH
41347: CALL_OW 308
41351: IFFALSE 41369
// begin ComMoveToArea ( unit , goAway ) ;
41353: LD_VAR 0 1
41357: PPUSH
41358: LD_VAR 0 3
41362: PPUSH
41363: CALL_OW 113
// exit ;
41367: GO 41455
// end ; if task [ 1 ] [ 1 ] <> M then
41369: LD_VAR 0 7
41373: PUSH
41374: LD_INT 1
41376: ARRAY
41377: PUSH
41378: LD_INT 1
41380: ARRAY
41381: PUSH
41382: LD_STRING M
41384: NONEQUAL
41385: IFFALSE 41389
// exit ;
41387: GO 41455
// x := task [ 1 ] [ 2 ] ;
41389: LD_ADDR_VAR 0 5
41393: PUSH
41394: LD_VAR 0 7
41398: PUSH
41399: LD_INT 1
41401: ARRAY
41402: PUSH
41403: LD_INT 2
41405: ARRAY
41406: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41407: LD_ADDR_VAR 0 6
41411: PUSH
41412: LD_VAR 0 7
41416: PUSH
41417: LD_INT 1
41419: ARRAY
41420: PUSH
41421: LD_INT 3
41423: ARRAY
41424: ST_TO_ADDR
// if InArea ( x , y , area ) then
41425: LD_VAR 0 5
41429: PPUSH
41430: LD_VAR 0 6
41434: PPUSH
41435: LD_VAR 0 2
41439: PPUSH
41440: CALL_OW 309
41444: IFFALSE 41455
// ComStop ( unit ) ;
41446: LD_VAR 0 1
41450: PPUSH
41451: CALL_OW 141
// end ;
41455: LD_VAR 0 4
41459: RET
// export function Abs ( value ) ; begin
41460: LD_INT 0
41462: PPUSH
// result := value ;
41463: LD_ADDR_VAR 0 2
41467: PUSH
41468: LD_VAR 0 1
41472: ST_TO_ADDR
// if value < 0 then
41473: LD_VAR 0 1
41477: PUSH
41478: LD_INT 0
41480: LESS
41481: IFFALSE 41498
// result := value * - 1 ;
41483: LD_ADDR_VAR 0 2
41487: PUSH
41488: LD_VAR 0 1
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: MUL
41497: ST_TO_ADDR
// end ;
41498: LD_VAR 0 2
41502: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41503: LD_INT 0
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
// if not unit or not building then
41513: LD_VAR 0 1
41517: NOT
41518: PUSH
41519: LD_VAR 0 2
41523: NOT
41524: OR
41525: IFFALSE 41529
// exit ;
41527: GO 41755
// x := GetX ( building ) ;
41529: LD_ADDR_VAR 0 4
41533: PUSH
41534: LD_VAR 0 2
41538: PPUSH
41539: CALL_OW 250
41543: ST_TO_ADDR
// y := GetY ( building ) ;
41544: LD_ADDR_VAR 0 6
41548: PUSH
41549: LD_VAR 0 2
41553: PPUSH
41554: CALL_OW 251
41558: ST_TO_ADDR
// d := GetDir ( building ) ;
41559: LD_ADDR_VAR 0 8
41563: PUSH
41564: LD_VAR 0 2
41568: PPUSH
41569: CALL_OW 254
41573: ST_TO_ADDR
// r := 4 ;
41574: LD_ADDR_VAR 0 9
41578: PUSH
41579: LD_INT 4
41581: ST_TO_ADDR
// for i := 1 to 5 do
41582: LD_ADDR_VAR 0 10
41586: PUSH
41587: DOUBLE
41588: LD_INT 1
41590: DEC
41591: ST_TO_ADDR
41592: LD_INT 5
41594: PUSH
41595: FOR_TO
41596: IFFALSE 41753
// begin _x := ShiftX ( x , d , r + i ) ;
41598: LD_ADDR_VAR 0 5
41602: PUSH
41603: LD_VAR 0 4
41607: PPUSH
41608: LD_VAR 0 8
41612: PPUSH
41613: LD_VAR 0 9
41617: PUSH
41618: LD_VAR 0 10
41622: PLUS
41623: PPUSH
41624: CALL_OW 272
41628: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41629: LD_ADDR_VAR 0 7
41633: PUSH
41634: LD_VAR 0 6
41638: PPUSH
41639: LD_VAR 0 8
41643: PPUSH
41644: LD_VAR 0 9
41648: PUSH
41649: LD_VAR 0 10
41653: PLUS
41654: PPUSH
41655: CALL_OW 273
41659: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41660: LD_VAR 0 5
41664: PPUSH
41665: LD_VAR 0 7
41669: PPUSH
41670: CALL_OW 488
41674: PUSH
41675: LD_VAR 0 5
41679: PPUSH
41680: LD_VAR 0 7
41684: PPUSH
41685: CALL_OW 428
41689: PPUSH
41690: CALL_OW 247
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: IN
41705: NOT
41706: AND
41707: IFFALSE 41751
// begin ComMoveXY ( unit , _x , _y ) ;
41709: LD_VAR 0 1
41713: PPUSH
41714: LD_VAR 0 5
41718: PPUSH
41719: LD_VAR 0 7
41723: PPUSH
41724: CALL_OW 111
// result := [ _x , _y ] ;
41728: LD_ADDR_VAR 0 3
41732: PUSH
41733: LD_VAR 0 5
41737: PUSH
41738: LD_VAR 0 7
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: ST_TO_ADDR
// exit ;
41747: POP
41748: POP
41749: GO 41755
// end ; end ;
41751: GO 41595
41753: POP
41754: POP
// end ;
41755: LD_VAR 0 3
41759: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41760: LD_INT 0
41762: PPUSH
41763: PPUSH
41764: PPUSH
// result := 0 ;
41765: LD_ADDR_VAR 0 3
41769: PUSH
41770: LD_INT 0
41772: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41773: LD_VAR 0 1
41777: PUSH
41778: LD_INT 0
41780: LESS
41781: PUSH
41782: LD_VAR 0 1
41786: PUSH
41787: LD_INT 8
41789: GREATER
41790: OR
41791: PUSH
41792: LD_VAR 0 2
41796: PUSH
41797: LD_INT 0
41799: LESS
41800: OR
41801: PUSH
41802: LD_VAR 0 2
41806: PUSH
41807: LD_INT 8
41809: GREATER
41810: OR
41811: IFFALSE 41815
// exit ;
41813: GO 41890
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41815: LD_ADDR_VAR 0 4
41819: PUSH
41820: LD_INT 22
41822: PUSH
41823: LD_VAR 0 2
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PPUSH
41832: CALL_OW 69
41836: PUSH
41837: FOR_IN
41838: IFFALSE 41888
// begin un := UnitShoot ( i ) ;
41840: LD_ADDR_VAR 0 5
41844: PUSH
41845: LD_VAR 0 4
41849: PPUSH
41850: CALL_OW 504
41854: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41855: LD_VAR 0 5
41859: PPUSH
41860: CALL_OW 255
41864: PUSH
41865: LD_VAR 0 1
41869: EQUAL
41870: IFFALSE 41886
// begin result := un ;
41872: LD_ADDR_VAR 0 3
41876: PUSH
41877: LD_VAR 0 5
41881: ST_TO_ADDR
// exit ;
41882: POP
41883: POP
41884: GO 41890
// end ; end ;
41886: GO 41837
41888: POP
41889: POP
// end ;
41890: LD_VAR 0 3
41894: RET
// export function GetCargoBay ( units ) ; begin
41895: LD_INT 0
41897: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41898: LD_ADDR_VAR 0 2
41902: PUSH
41903: LD_VAR 0 1
41907: PPUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 34
41913: PUSH
41914: LD_INT 12
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 34
41923: PUSH
41924: LD_INT 51
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 34
41933: PUSH
41934: LD_INT 32
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 34
41943: PUSH
41944: LD_EXP 20
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: PPUSH
41960: CALL_OW 72
41964: ST_TO_ADDR
// end ; end_of_file
41965: LD_VAR 0 2
41969: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
41970: LD_INT 0
41972: PPUSH
// ar_miner := 81 ;
41973: LD_ADDR_EXP 26
41977: PUSH
41978: LD_INT 81
41980: ST_TO_ADDR
// ar_crane := 88 ;
41981: LD_ADDR_EXP 25
41985: PUSH
41986: LD_INT 88
41988: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
41989: LD_ADDR_EXP 20
41993: PUSH
41994: LD_INT 89
41996: ST_TO_ADDR
// us_hack := 99 ;
41997: LD_ADDR_EXP 21
42001: PUSH
42002: LD_INT 99
42004: ST_TO_ADDR
// us_artillery := 97 ;
42005: LD_ADDR_EXP 22
42009: PUSH
42010: LD_INT 97
42012: ST_TO_ADDR
// ar_bio_bomb := 91 ;
42013: LD_ADDR_EXP 23
42017: PUSH
42018: LD_INT 91
42020: ST_TO_ADDR
// ar_mortar := 92 ;
42021: LD_ADDR_EXP 24
42025: PUSH
42026: LD_INT 92
42028: ST_TO_ADDR
// ru_radar := 98 ;
42029: LD_ADDR_EXP 19
42033: PUSH
42034: LD_INT 98
42036: ST_TO_ADDR
// tech_Artillery := 80 ;
42037: LD_ADDR_EXP 27
42041: PUSH
42042: LD_INT 80
42044: ST_TO_ADDR
// tech_RadMat := 81 ;
42045: LD_ADDR_EXP 28
42049: PUSH
42050: LD_INT 81
42052: ST_TO_ADDR
// tech_BasicTools := 82 ;
42053: LD_ADDR_EXP 29
42057: PUSH
42058: LD_INT 82
42060: ST_TO_ADDR
// tech_Cargo := 83 ;
42061: LD_ADDR_EXP 30
42065: PUSH
42066: LD_INT 83
42068: ST_TO_ADDR
// tech_Track := 84 ;
42069: LD_ADDR_EXP 31
42073: PUSH
42074: LD_INT 84
42076: ST_TO_ADDR
// tech_Crane := 85 ;
42077: LD_ADDR_EXP 32
42081: PUSH
42082: LD_INT 85
42084: ST_TO_ADDR
// tech_Bulldozer := 86 ;
42085: LD_ADDR_EXP 33
42089: PUSH
42090: LD_INT 86
42092: ST_TO_ADDR
// tech_Hovercraft := 87 ;
42093: LD_ADDR_EXP 34
42097: PUSH
42098: LD_INT 87
42100: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
42101: LD_ADDR_EXP 35
42105: PUSH
42106: LD_INT 88
42108: ST_TO_ADDR
// class_mastodont := 31 ;
42109: LD_ADDR_EXP 36
42113: PUSH
42114: LD_INT 31
42116: ST_TO_ADDR
// class_horse := 21 ;
42117: LD_ADDR_EXP 37
42121: PUSH
42122: LD_INT 21
42124: ST_TO_ADDR
// end ;
42125: LD_VAR 0 1
42129: RET
// every 1 do
42130: GO 42132
42132: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
42133: CALL 41970 0 0
42137: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42138: LD_INT 0
42140: PPUSH
// if p2 = 100 then
42141: LD_VAR 0 2
42145: PUSH
42146: LD_INT 100
42148: EQUAL
42149: IFFALSE 43098
// begin if not StreamModeActive then
42151: LD_EXP 38
42155: NOT
42156: IFFALSE 42166
// StreamModeActive := true ;
42158: LD_ADDR_EXP 38
42162: PUSH
42163: LD_INT 1
42165: ST_TO_ADDR
// if p3 = 0 then
42166: LD_VAR 0 3
42170: PUSH
42171: LD_INT 0
42173: EQUAL
42174: IFFALSE 42180
// InitStreamMode ;
42176: CALL 43258 0 0
// if p3 = 1 then
42180: LD_VAR 0 3
42184: PUSH
42185: LD_INT 1
42187: EQUAL
42188: IFFALSE 42198
// sRocket := true ;
42190: LD_ADDR_EXP 43
42194: PUSH
42195: LD_INT 1
42197: ST_TO_ADDR
// if p3 = 2 then
42198: LD_VAR 0 3
42202: PUSH
42203: LD_INT 2
42205: EQUAL
42206: IFFALSE 42216
// sSpeed := true ;
42208: LD_ADDR_EXP 42
42212: PUSH
42213: LD_INT 1
42215: ST_TO_ADDR
// if p3 = 3 then
42216: LD_VAR 0 3
42220: PUSH
42221: LD_INT 3
42223: EQUAL
42224: IFFALSE 42234
// sEngine := true ;
42226: LD_ADDR_EXP 44
42230: PUSH
42231: LD_INT 1
42233: ST_TO_ADDR
// if p3 = 4 then
42234: LD_VAR 0 3
42238: PUSH
42239: LD_INT 4
42241: EQUAL
42242: IFFALSE 42252
// sSpec := true ;
42244: LD_ADDR_EXP 41
42248: PUSH
42249: LD_INT 1
42251: ST_TO_ADDR
// if p3 = 5 then
42252: LD_VAR 0 3
42256: PUSH
42257: LD_INT 5
42259: EQUAL
42260: IFFALSE 42270
// sLevel := true ;
42262: LD_ADDR_EXP 45
42266: PUSH
42267: LD_INT 1
42269: ST_TO_ADDR
// if p3 = 6 then
42270: LD_VAR 0 3
42274: PUSH
42275: LD_INT 6
42277: EQUAL
42278: IFFALSE 42288
// sArmoury := true ;
42280: LD_ADDR_EXP 46
42284: PUSH
42285: LD_INT 1
42287: ST_TO_ADDR
// if p3 = 7 then
42288: LD_VAR 0 3
42292: PUSH
42293: LD_INT 7
42295: EQUAL
42296: IFFALSE 42306
// sRadar := true ;
42298: LD_ADDR_EXP 47
42302: PUSH
42303: LD_INT 1
42305: ST_TO_ADDR
// if p3 = 8 then
42306: LD_VAR 0 3
42310: PUSH
42311: LD_INT 8
42313: EQUAL
42314: IFFALSE 42324
// sBunker := true ;
42316: LD_ADDR_EXP 48
42320: PUSH
42321: LD_INT 1
42323: ST_TO_ADDR
// if p3 = 9 then
42324: LD_VAR 0 3
42328: PUSH
42329: LD_INT 9
42331: EQUAL
42332: IFFALSE 42342
// sHack := true ;
42334: LD_ADDR_EXP 49
42338: PUSH
42339: LD_INT 1
42341: ST_TO_ADDR
// if p3 = 10 then
42342: LD_VAR 0 3
42346: PUSH
42347: LD_INT 10
42349: EQUAL
42350: IFFALSE 42360
// sFire := true ;
42352: LD_ADDR_EXP 50
42356: PUSH
42357: LD_INT 1
42359: ST_TO_ADDR
// if p3 = 11 then
42360: LD_VAR 0 3
42364: PUSH
42365: LD_INT 11
42367: EQUAL
42368: IFFALSE 42378
// sRefresh := true ;
42370: LD_ADDR_EXP 51
42374: PUSH
42375: LD_INT 1
42377: ST_TO_ADDR
// if p3 = 12 then
42378: LD_VAR 0 3
42382: PUSH
42383: LD_INT 12
42385: EQUAL
42386: IFFALSE 42396
// sExp := true ;
42388: LD_ADDR_EXP 52
42392: PUSH
42393: LD_INT 1
42395: ST_TO_ADDR
// if p3 = 13 then
42396: LD_VAR 0 3
42400: PUSH
42401: LD_INT 13
42403: EQUAL
42404: IFFALSE 42414
// sDepot := true ;
42406: LD_ADDR_EXP 53
42410: PUSH
42411: LD_INT 1
42413: ST_TO_ADDR
// if p3 = 14 then
42414: LD_VAR 0 3
42418: PUSH
42419: LD_INT 14
42421: EQUAL
42422: IFFALSE 42432
// sFlag := true ;
42424: LD_ADDR_EXP 54
42428: PUSH
42429: LD_INT 1
42431: ST_TO_ADDR
// if p3 = 15 then
42432: LD_VAR 0 3
42436: PUSH
42437: LD_INT 15
42439: EQUAL
42440: IFFALSE 42450
// sKamikadze := true ;
42442: LD_ADDR_EXP 62
42446: PUSH
42447: LD_INT 1
42449: ST_TO_ADDR
// if p3 = 16 then
42450: LD_VAR 0 3
42454: PUSH
42455: LD_INT 16
42457: EQUAL
42458: IFFALSE 42468
// sTroll := true ;
42460: LD_ADDR_EXP 63
42464: PUSH
42465: LD_INT 1
42467: ST_TO_ADDR
// if p3 = 17 then
42468: LD_VAR 0 3
42472: PUSH
42473: LD_INT 17
42475: EQUAL
42476: IFFALSE 42486
// sSlow := true ;
42478: LD_ADDR_EXP 64
42482: PUSH
42483: LD_INT 1
42485: ST_TO_ADDR
// if p3 = 18 then
42486: LD_VAR 0 3
42490: PUSH
42491: LD_INT 18
42493: EQUAL
42494: IFFALSE 42504
// sLack := true ;
42496: LD_ADDR_EXP 65
42500: PUSH
42501: LD_INT 1
42503: ST_TO_ADDR
// if p3 = 19 then
42504: LD_VAR 0 3
42508: PUSH
42509: LD_INT 19
42511: EQUAL
42512: IFFALSE 42522
// sTank := true ;
42514: LD_ADDR_EXP 67
42518: PUSH
42519: LD_INT 1
42521: ST_TO_ADDR
// if p3 = 20 then
42522: LD_VAR 0 3
42526: PUSH
42527: LD_INT 20
42529: EQUAL
42530: IFFALSE 42540
// sRemote := true ;
42532: LD_ADDR_EXP 68
42536: PUSH
42537: LD_INT 1
42539: ST_TO_ADDR
// if p3 = 21 then
42540: LD_VAR 0 3
42544: PUSH
42545: LD_INT 21
42547: EQUAL
42548: IFFALSE 42558
// sPowell := true ;
42550: LD_ADDR_EXP 69
42554: PUSH
42555: LD_INT 1
42557: ST_TO_ADDR
// if p3 = 22 then
42558: LD_VAR 0 3
42562: PUSH
42563: LD_INT 22
42565: EQUAL
42566: IFFALSE 42576
// sTeleport := true ;
42568: LD_ADDR_EXP 72
42572: PUSH
42573: LD_INT 1
42575: ST_TO_ADDR
// if p3 = 23 then
42576: LD_VAR 0 3
42580: PUSH
42581: LD_INT 23
42583: EQUAL
42584: IFFALSE 42594
// sOilTower := true ;
42586: LD_ADDR_EXP 74
42590: PUSH
42591: LD_INT 1
42593: ST_TO_ADDR
// if p3 = 24 then
42594: LD_VAR 0 3
42598: PUSH
42599: LD_INT 24
42601: EQUAL
42602: IFFALSE 42612
// sShovel := true ;
42604: LD_ADDR_EXP 75
42608: PUSH
42609: LD_INT 1
42611: ST_TO_ADDR
// if p3 = 25 then
42612: LD_VAR 0 3
42616: PUSH
42617: LD_INT 25
42619: EQUAL
42620: IFFALSE 42630
// sSheik := true ;
42622: LD_ADDR_EXP 76
42626: PUSH
42627: LD_INT 1
42629: ST_TO_ADDR
// if p3 = 26 then
42630: LD_VAR 0 3
42634: PUSH
42635: LD_INT 26
42637: EQUAL
42638: IFFALSE 42648
// sEarthquake := true ;
42640: LD_ADDR_EXP 78
42644: PUSH
42645: LD_INT 1
42647: ST_TO_ADDR
// if p3 = 27 then
42648: LD_VAR 0 3
42652: PUSH
42653: LD_INT 27
42655: EQUAL
42656: IFFALSE 42666
// sAI := true ;
42658: LD_ADDR_EXP 79
42662: PUSH
42663: LD_INT 1
42665: ST_TO_ADDR
// if p3 = 28 then
42666: LD_VAR 0 3
42670: PUSH
42671: LD_INT 28
42673: EQUAL
42674: IFFALSE 42684
// sCargo := true ;
42676: LD_ADDR_EXP 82
42680: PUSH
42681: LD_INT 1
42683: ST_TO_ADDR
// if p3 = 29 then
42684: LD_VAR 0 3
42688: PUSH
42689: LD_INT 29
42691: EQUAL
42692: IFFALSE 42702
// sDLaser := true ;
42694: LD_ADDR_EXP 83
42698: PUSH
42699: LD_INT 1
42701: ST_TO_ADDR
// if p3 = 30 then
42702: LD_VAR 0 3
42706: PUSH
42707: LD_INT 30
42709: EQUAL
42710: IFFALSE 42720
// sExchange := true ;
42712: LD_ADDR_EXP 84
42716: PUSH
42717: LD_INT 1
42719: ST_TO_ADDR
// if p3 = 31 then
42720: LD_VAR 0 3
42724: PUSH
42725: LD_INT 31
42727: EQUAL
42728: IFFALSE 42738
// sFac := true ;
42730: LD_ADDR_EXP 85
42734: PUSH
42735: LD_INT 1
42737: ST_TO_ADDR
// if p3 = 32 then
42738: LD_VAR 0 3
42742: PUSH
42743: LD_INT 32
42745: EQUAL
42746: IFFALSE 42756
// sPower := true ;
42748: LD_ADDR_EXP 86
42752: PUSH
42753: LD_INT 1
42755: ST_TO_ADDR
// if p3 = 33 then
42756: LD_VAR 0 3
42760: PUSH
42761: LD_INT 33
42763: EQUAL
42764: IFFALSE 42774
// sRandom := true ;
42766: LD_ADDR_EXP 87
42770: PUSH
42771: LD_INT 1
42773: ST_TO_ADDR
// if p3 = 34 then
42774: LD_VAR 0 3
42778: PUSH
42779: LD_INT 34
42781: EQUAL
42782: IFFALSE 42792
// sShield := true ;
42784: LD_ADDR_EXP 88
42788: PUSH
42789: LD_INT 1
42791: ST_TO_ADDR
// if p3 = 35 then
42792: LD_VAR 0 3
42796: PUSH
42797: LD_INT 35
42799: EQUAL
42800: IFFALSE 42810
// sTime := true ;
42802: LD_ADDR_EXP 89
42806: PUSH
42807: LD_INT 1
42809: ST_TO_ADDR
// if p3 = 36 then
42810: LD_VAR 0 3
42814: PUSH
42815: LD_INT 36
42817: EQUAL
42818: IFFALSE 42828
// sTools := true ;
42820: LD_ADDR_EXP 90
42824: PUSH
42825: LD_INT 1
42827: ST_TO_ADDR
// if p3 = 101 then
42828: LD_VAR 0 3
42832: PUSH
42833: LD_INT 101
42835: EQUAL
42836: IFFALSE 42846
// sSold := true ;
42838: LD_ADDR_EXP 55
42842: PUSH
42843: LD_INT 1
42845: ST_TO_ADDR
// if p3 = 102 then
42846: LD_VAR 0 3
42850: PUSH
42851: LD_INT 102
42853: EQUAL
42854: IFFALSE 42864
// sDiff := true ;
42856: LD_ADDR_EXP 56
42860: PUSH
42861: LD_INT 1
42863: ST_TO_ADDR
// if p3 = 103 then
42864: LD_VAR 0 3
42868: PUSH
42869: LD_INT 103
42871: EQUAL
42872: IFFALSE 42882
// sFog := true ;
42874: LD_ADDR_EXP 59
42878: PUSH
42879: LD_INT 1
42881: ST_TO_ADDR
// if p3 = 104 then
42882: LD_VAR 0 3
42886: PUSH
42887: LD_INT 104
42889: EQUAL
42890: IFFALSE 42900
// sReset := true ;
42892: LD_ADDR_EXP 60
42896: PUSH
42897: LD_INT 1
42899: ST_TO_ADDR
// if p3 = 105 then
42900: LD_VAR 0 3
42904: PUSH
42905: LD_INT 105
42907: EQUAL
42908: IFFALSE 42918
// sSun := true ;
42910: LD_ADDR_EXP 61
42914: PUSH
42915: LD_INT 1
42917: ST_TO_ADDR
// if p3 = 106 then
42918: LD_VAR 0 3
42922: PUSH
42923: LD_INT 106
42925: EQUAL
42926: IFFALSE 42936
// sTiger := true ;
42928: LD_ADDR_EXP 57
42932: PUSH
42933: LD_INT 1
42935: ST_TO_ADDR
// if p3 = 107 then
42936: LD_VAR 0 3
42940: PUSH
42941: LD_INT 107
42943: EQUAL
42944: IFFALSE 42954
// sBomb := true ;
42946: LD_ADDR_EXP 58
42950: PUSH
42951: LD_INT 1
42953: ST_TO_ADDR
// if p3 = 108 then
42954: LD_VAR 0 3
42958: PUSH
42959: LD_INT 108
42961: EQUAL
42962: IFFALSE 42972
// sWound := true ;
42964: LD_ADDR_EXP 66
42968: PUSH
42969: LD_INT 1
42971: ST_TO_ADDR
// if p3 = 109 then
42972: LD_VAR 0 3
42976: PUSH
42977: LD_INT 109
42979: EQUAL
42980: IFFALSE 42990
// sBetray := true ;
42982: LD_ADDR_EXP 70
42986: PUSH
42987: LD_INT 1
42989: ST_TO_ADDR
// if p3 = 110 then
42990: LD_VAR 0 3
42994: PUSH
42995: LD_INT 110
42997: EQUAL
42998: IFFALSE 43008
// sContamin := true ;
43000: LD_ADDR_EXP 71
43004: PUSH
43005: LD_INT 1
43007: ST_TO_ADDR
// if p3 = 111 then
43008: LD_VAR 0 3
43012: PUSH
43013: LD_INT 111
43015: EQUAL
43016: IFFALSE 43026
// sOil := true ;
43018: LD_ADDR_EXP 73
43022: PUSH
43023: LD_INT 1
43025: ST_TO_ADDR
// if p3 = 112 then
43026: LD_VAR 0 3
43030: PUSH
43031: LD_INT 112
43033: EQUAL
43034: IFFALSE 43044
// sStu := true ;
43036: LD_ADDR_EXP 77
43040: PUSH
43041: LD_INT 1
43043: ST_TO_ADDR
// if p3 = 113 then
43044: LD_VAR 0 3
43048: PUSH
43049: LD_INT 113
43051: EQUAL
43052: IFFALSE 43062
// sBazooka := true ;
43054: LD_ADDR_EXP 80
43058: PUSH
43059: LD_INT 1
43061: ST_TO_ADDR
// if p3 = 114 then
43062: LD_VAR 0 3
43066: PUSH
43067: LD_INT 114
43069: EQUAL
43070: IFFALSE 43080
// sMortar := true ;
43072: LD_ADDR_EXP 81
43076: PUSH
43077: LD_INT 1
43079: ST_TO_ADDR
// if p3 = 115 then
43080: LD_VAR 0 3
43084: PUSH
43085: LD_INT 115
43087: EQUAL
43088: IFFALSE 43098
// sRanger := true ;
43090: LD_ADDR_EXP 91
43094: PUSH
43095: LD_INT 1
43097: ST_TO_ADDR
// end ; if p2 = 101 then
43098: LD_VAR 0 2
43102: PUSH
43103: LD_INT 101
43105: EQUAL
43106: IFFALSE 43234
// begin case p3 of 1 :
43108: LD_VAR 0 3
43112: PUSH
43113: LD_INT 1
43115: DOUBLE
43116: EQUAL
43117: IFTRUE 43121
43119: GO 43128
43121: POP
// hHackUnlimitedResources ; 2 :
43122: CALL 54271 0 0
43126: GO 43234
43128: LD_INT 2
43130: DOUBLE
43131: EQUAL
43132: IFTRUE 43136
43134: GO 43143
43136: POP
// hHackSetLevel10 ; 3 :
43137: CALL 54404 0 0
43141: GO 43234
43143: LD_INT 3
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43151
43149: GO 43158
43151: POP
// hHackSetLevel10YourUnits ; 4 :
43152: CALL 54489 0 0
43156: GO 43234
43158: LD_INT 4
43160: DOUBLE
43161: EQUAL
43162: IFTRUE 43166
43164: GO 43173
43166: POP
// hHackInvincible ; 5 :
43167: CALL 54937 0 0
43171: GO 43234
43173: LD_INT 5
43175: DOUBLE
43176: EQUAL
43177: IFTRUE 43181
43179: GO 43188
43181: POP
// hHackInvisible ; 6 :
43182: CALL 55048 0 0
43186: GO 43234
43188: LD_INT 6
43190: DOUBLE
43191: EQUAL
43192: IFTRUE 43196
43194: GO 43203
43196: POP
// hHackChangeYourSide ; 7 :
43197: CALL 55105 0 0
43201: GO 43234
43203: LD_INT 7
43205: DOUBLE
43206: EQUAL
43207: IFTRUE 43211
43209: GO 43218
43211: POP
// hHackChangeUnitSide ; 8 :
43212: CALL 55147 0 0
43216: GO 43234
43218: LD_INT 8
43220: DOUBLE
43221: EQUAL
43222: IFTRUE 43226
43224: GO 43233
43226: POP
// hHackFog ; end ;
43227: CALL 55248 0 0
43231: GO 43234
43233: POP
// end ; end ;
43234: LD_VAR 0 7
43238: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
43239: GO 43241
43241: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
43242: LD_STRING initStreamRollete();
43244: PPUSH
43245: CALL_OW 559
// InitStreamMode ;
43249: CALL 43258 0 0
// DefineStreamItems ( ) ;
43253: CALL 43698 0 0
// end ;
43257: END
// function InitStreamMode ; begin
43258: LD_INT 0
43260: PPUSH
// streamModeActive := false ;
43261: LD_ADDR_EXP 38
43265: PUSH
43266: LD_INT 0
43268: ST_TO_ADDR
// normalCounter := 36 ;
43269: LD_ADDR_EXP 39
43273: PUSH
43274: LD_INT 36
43276: ST_TO_ADDR
// hardcoreCounter := 16 ;
43277: LD_ADDR_EXP 40
43281: PUSH
43282: LD_INT 16
43284: ST_TO_ADDR
// sRocket := false ;
43285: LD_ADDR_EXP 43
43289: PUSH
43290: LD_INT 0
43292: ST_TO_ADDR
// sSpeed := false ;
43293: LD_ADDR_EXP 42
43297: PUSH
43298: LD_INT 0
43300: ST_TO_ADDR
// sEngine := false ;
43301: LD_ADDR_EXP 44
43305: PUSH
43306: LD_INT 0
43308: ST_TO_ADDR
// sSpec := false ;
43309: LD_ADDR_EXP 41
43313: PUSH
43314: LD_INT 0
43316: ST_TO_ADDR
// sLevel := false ;
43317: LD_ADDR_EXP 45
43321: PUSH
43322: LD_INT 0
43324: ST_TO_ADDR
// sArmoury := false ;
43325: LD_ADDR_EXP 46
43329: PUSH
43330: LD_INT 0
43332: ST_TO_ADDR
// sRadar := false ;
43333: LD_ADDR_EXP 47
43337: PUSH
43338: LD_INT 0
43340: ST_TO_ADDR
// sBunker := false ;
43341: LD_ADDR_EXP 48
43345: PUSH
43346: LD_INT 0
43348: ST_TO_ADDR
// sHack := false ;
43349: LD_ADDR_EXP 49
43353: PUSH
43354: LD_INT 0
43356: ST_TO_ADDR
// sFire := false ;
43357: LD_ADDR_EXP 50
43361: PUSH
43362: LD_INT 0
43364: ST_TO_ADDR
// sRefresh := false ;
43365: LD_ADDR_EXP 51
43369: PUSH
43370: LD_INT 0
43372: ST_TO_ADDR
// sExp := false ;
43373: LD_ADDR_EXP 52
43377: PUSH
43378: LD_INT 0
43380: ST_TO_ADDR
// sDepot := false ;
43381: LD_ADDR_EXP 53
43385: PUSH
43386: LD_INT 0
43388: ST_TO_ADDR
// sFlag := false ;
43389: LD_ADDR_EXP 54
43393: PUSH
43394: LD_INT 0
43396: ST_TO_ADDR
// sKamikadze := false ;
43397: LD_ADDR_EXP 62
43401: PUSH
43402: LD_INT 0
43404: ST_TO_ADDR
// sTroll := false ;
43405: LD_ADDR_EXP 63
43409: PUSH
43410: LD_INT 0
43412: ST_TO_ADDR
// sSlow := false ;
43413: LD_ADDR_EXP 64
43417: PUSH
43418: LD_INT 0
43420: ST_TO_ADDR
// sLack := false ;
43421: LD_ADDR_EXP 65
43425: PUSH
43426: LD_INT 0
43428: ST_TO_ADDR
// sTank := false ;
43429: LD_ADDR_EXP 67
43433: PUSH
43434: LD_INT 0
43436: ST_TO_ADDR
// sRemote := false ;
43437: LD_ADDR_EXP 68
43441: PUSH
43442: LD_INT 0
43444: ST_TO_ADDR
// sPowell := false ;
43445: LD_ADDR_EXP 69
43449: PUSH
43450: LD_INT 0
43452: ST_TO_ADDR
// sTeleport := false ;
43453: LD_ADDR_EXP 72
43457: PUSH
43458: LD_INT 0
43460: ST_TO_ADDR
// sOilTower := false ;
43461: LD_ADDR_EXP 74
43465: PUSH
43466: LD_INT 0
43468: ST_TO_ADDR
// sShovel := false ;
43469: LD_ADDR_EXP 75
43473: PUSH
43474: LD_INT 0
43476: ST_TO_ADDR
// sSheik := false ;
43477: LD_ADDR_EXP 76
43481: PUSH
43482: LD_INT 0
43484: ST_TO_ADDR
// sEarthquake := false ;
43485: LD_ADDR_EXP 78
43489: PUSH
43490: LD_INT 0
43492: ST_TO_ADDR
// sAI := false ;
43493: LD_ADDR_EXP 79
43497: PUSH
43498: LD_INT 0
43500: ST_TO_ADDR
// sCargo := false ;
43501: LD_ADDR_EXP 82
43505: PUSH
43506: LD_INT 0
43508: ST_TO_ADDR
// sDLaser := false ;
43509: LD_ADDR_EXP 83
43513: PUSH
43514: LD_INT 0
43516: ST_TO_ADDR
// sExchange := false ;
43517: LD_ADDR_EXP 84
43521: PUSH
43522: LD_INT 0
43524: ST_TO_ADDR
// sFac := false ;
43525: LD_ADDR_EXP 85
43529: PUSH
43530: LD_INT 0
43532: ST_TO_ADDR
// sPower := false ;
43533: LD_ADDR_EXP 86
43537: PUSH
43538: LD_INT 0
43540: ST_TO_ADDR
// sRandom := false ;
43541: LD_ADDR_EXP 87
43545: PUSH
43546: LD_INT 0
43548: ST_TO_ADDR
// sShield := false ;
43549: LD_ADDR_EXP 88
43553: PUSH
43554: LD_INT 0
43556: ST_TO_ADDR
// sTime := false ;
43557: LD_ADDR_EXP 89
43561: PUSH
43562: LD_INT 0
43564: ST_TO_ADDR
// sTools := false ;
43565: LD_ADDR_EXP 90
43569: PUSH
43570: LD_INT 0
43572: ST_TO_ADDR
// sSold := false ;
43573: LD_ADDR_EXP 55
43577: PUSH
43578: LD_INT 0
43580: ST_TO_ADDR
// sDiff := false ;
43581: LD_ADDR_EXP 56
43585: PUSH
43586: LD_INT 0
43588: ST_TO_ADDR
// sFog := false ;
43589: LD_ADDR_EXP 59
43593: PUSH
43594: LD_INT 0
43596: ST_TO_ADDR
// sReset := false ;
43597: LD_ADDR_EXP 60
43601: PUSH
43602: LD_INT 0
43604: ST_TO_ADDR
// sSun := false ;
43605: LD_ADDR_EXP 61
43609: PUSH
43610: LD_INT 0
43612: ST_TO_ADDR
// sTiger := false ;
43613: LD_ADDR_EXP 57
43617: PUSH
43618: LD_INT 0
43620: ST_TO_ADDR
// sBomb := false ;
43621: LD_ADDR_EXP 58
43625: PUSH
43626: LD_INT 0
43628: ST_TO_ADDR
// sWound := false ;
43629: LD_ADDR_EXP 66
43633: PUSH
43634: LD_INT 0
43636: ST_TO_ADDR
// sBetray := false ;
43637: LD_ADDR_EXP 70
43641: PUSH
43642: LD_INT 0
43644: ST_TO_ADDR
// sContamin := false ;
43645: LD_ADDR_EXP 71
43649: PUSH
43650: LD_INT 0
43652: ST_TO_ADDR
// sOil := false ;
43653: LD_ADDR_EXP 73
43657: PUSH
43658: LD_INT 0
43660: ST_TO_ADDR
// sStu := false ;
43661: LD_ADDR_EXP 77
43665: PUSH
43666: LD_INT 0
43668: ST_TO_ADDR
// sBazooka := false ;
43669: LD_ADDR_EXP 80
43673: PUSH
43674: LD_INT 0
43676: ST_TO_ADDR
// sMortar := false ;
43677: LD_ADDR_EXP 81
43681: PUSH
43682: LD_INT 0
43684: ST_TO_ADDR
// sRanger := false ;
43685: LD_ADDR_EXP 91
43689: PUSH
43690: LD_INT 0
43692: ST_TO_ADDR
// end ;
43693: LD_VAR 0 1
43697: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
43698: LD_INT 0
43700: PPUSH
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
// result := [ ] ;
43705: LD_ADDR_VAR 0 1
43709: PUSH
43710: EMPTY
43711: ST_TO_ADDR
// if campaign_id = 1 then
43712: LD_OWVAR 69
43716: PUSH
43717: LD_INT 1
43719: EQUAL
43720: IFFALSE 46658
// begin case mission_number of 1 :
43722: LD_OWVAR 70
43726: PUSH
43727: LD_INT 1
43729: DOUBLE
43730: EQUAL
43731: IFTRUE 43735
43733: GO 43799
43735: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
43736: LD_ADDR_VAR 0 1
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: LD_INT 4
43746: PUSH
43747: LD_INT 11
43749: PUSH
43750: LD_INT 12
43752: PUSH
43753: LD_INT 15
43755: PUSH
43756: LD_INT 16
43758: PUSH
43759: LD_INT 22
43761: PUSH
43762: LD_INT 23
43764: PUSH
43765: LD_INT 26
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 101
43781: PUSH
43782: LD_INT 102
43784: PUSH
43785: LD_INT 106
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: ST_TO_ADDR
43797: GO 46656
43799: LD_INT 2
43801: DOUBLE
43802: EQUAL
43803: IFTRUE 43807
43805: GO 43879
43807: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
43808: LD_ADDR_VAR 0 1
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: LD_INT 4
43818: PUSH
43819: LD_INT 11
43821: PUSH
43822: LD_INT 12
43824: PUSH
43825: LD_INT 15
43827: PUSH
43828: LD_INT 16
43830: PUSH
43831: LD_INT 22
43833: PUSH
43834: LD_INT 23
43836: PUSH
43837: LD_INT 26
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 101
43853: PUSH
43854: LD_INT 102
43856: PUSH
43857: LD_INT 105
43859: PUSH
43860: LD_INT 106
43862: PUSH
43863: LD_INT 108
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: ST_TO_ADDR
43877: GO 46656
43879: LD_INT 3
43881: DOUBLE
43882: EQUAL
43883: IFTRUE 43887
43885: GO 43963
43887: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
43888: LD_ADDR_VAR 0 1
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 4
43898: PUSH
43899: LD_INT 5
43901: PUSH
43902: LD_INT 11
43904: PUSH
43905: LD_INT 12
43907: PUSH
43908: LD_INT 15
43910: PUSH
43911: LD_INT 16
43913: PUSH
43914: LD_INT 22
43916: PUSH
43917: LD_INT 26
43919: PUSH
43920: LD_INT 36
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 101
43937: PUSH
43938: LD_INT 102
43940: PUSH
43941: LD_INT 105
43943: PUSH
43944: LD_INT 106
43946: PUSH
43947: LD_INT 108
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: ST_TO_ADDR
43961: GO 46656
43963: LD_INT 4
43965: DOUBLE
43966: EQUAL
43967: IFTRUE 43971
43969: GO 44055
43971: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
43972: LD_ADDR_VAR 0 1
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 4
43982: PUSH
43983: LD_INT 5
43985: PUSH
43986: LD_INT 8
43988: PUSH
43989: LD_INT 11
43991: PUSH
43992: LD_INT 12
43994: PUSH
43995: LD_INT 15
43997: PUSH
43998: LD_INT 16
44000: PUSH
44001: LD_INT 22
44003: PUSH
44004: LD_INT 23
44006: PUSH
44007: LD_INT 26
44009: PUSH
44010: LD_INT 36
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 101
44029: PUSH
44030: LD_INT 102
44032: PUSH
44033: LD_INT 105
44035: PUSH
44036: LD_INT 106
44038: PUSH
44039: LD_INT 108
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: ST_TO_ADDR
44053: GO 46656
44055: LD_INT 5
44057: DOUBLE
44058: EQUAL
44059: IFTRUE 44063
44061: GO 44163
44063: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
44064: LD_ADDR_VAR 0 1
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 4
44074: PUSH
44075: LD_INT 5
44077: PUSH
44078: LD_INT 6
44080: PUSH
44081: LD_INT 8
44083: PUSH
44084: LD_INT 11
44086: PUSH
44087: LD_INT 12
44089: PUSH
44090: LD_INT 15
44092: PUSH
44093: LD_INT 16
44095: PUSH
44096: LD_INT 22
44098: PUSH
44099: LD_INT 23
44101: PUSH
44102: LD_INT 25
44104: PUSH
44105: LD_INT 26
44107: PUSH
44108: LD_INT 36
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 101
44129: PUSH
44130: LD_INT 102
44132: PUSH
44133: LD_INT 105
44135: PUSH
44136: LD_INT 106
44138: PUSH
44139: LD_INT 108
44141: PUSH
44142: LD_INT 109
44144: PUSH
44145: LD_INT 112
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: ST_TO_ADDR
44161: GO 46656
44163: LD_INT 6
44165: DOUBLE
44166: EQUAL
44167: IFTRUE 44171
44169: GO 44291
44171: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
44172: LD_ADDR_VAR 0 1
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: LD_INT 4
44182: PUSH
44183: LD_INT 5
44185: PUSH
44186: LD_INT 6
44188: PUSH
44189: LD_INT 8
44191: PUSH
44192: LD_INT 11
44194: PUSH
44195: LD_INT 12
44197: PUSH
44198: LD_INT 15
44200: PUSH
44201: LD_INT 16
44203: PUSH
44204: LD_INT 20
44206: PUSH
44207: LD_INT 21
44209: PUSH
44210: LD_INT 22
44212: PUSH
44213: LD_INT 23
44215: PUSH
44216: LD_INT 25
44218: PUSH
44219: LD_INT 26
44221: PUSH
44222: LD_INT 30
44224: PUSH
44225: LD_INT 31
44227: PUSH
44228: LD_INT 32
44230: PUSH
44231: LD_INT 36
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 101
44257: PUSH
44258: LD_INT 102
44260: PUSH
44261: LD_INT 105
44263: PUSH
44264: LD_INT 106
44266: PUSH
44267: LD_INT 108
44269: PUSH
44270: LD_INT 109
44272: PUSH
44273: LD_INT 112
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: ST_TO_ADDR
44289: GO 46656
44291: LD_INT 7
44293: DOUBLE
44294: EQUAL
44295: IFTRUE 44299
44297: GO 44399
44299: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
44300: LD_ADDR_VAR 0 1
44304: PUSH
44305: LD_INT 2
44307: PUSH
44308: LD_INT 4
44310: PUSH
44311: LD_INT 5
44313: PUSH
44314: LD_INT 7
44316: PUSH
44317: LD_INT 11
44319: PUSH
44320: LD_INT 12
44322: PUSH
44323: LD_INT 15
44325: PUSH
44326: LD_INT 16
44328: PUSH
44329: LD_INT 20
44331: PUSH
44332: LD_INT 21
44334: PUSH
44335: LD_INT 22
44337: PUSH
44338: LD_INT 23
44340: PUSH
44341: LD_INT 25
44343: PUSH
44344: LD_INT 26
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 101
44365: PUSH
44366: LD_INT 102
44368: PUSH
44369: LD_INT 103
44371: PUSH
44372: LD_INT 105
44374: PUSH
44375: LD_INT 106
44377: PUSH
44378: LD_INT 108
44380: PUSH
44381: LD_INT 112
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: ST_TO_ADDR
44397: GO 46656
44399: LD_INT 8
44401: DOUBLE
44402: EQUAL
44403: IFTRUE 44407
44405: GO 44535
44407: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
44408: LD_ADDR_VAR 0 1
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 4
44418: PUSH
44419: LD_INT 5
44421: PUSH
44422: LD_INT 6
44424: PUSH
44425: LD_INT 7
44427: PUSH
44428: LD_INT 8
44430: PUSH
44431: LD_INT 11
44433: PUSH
44434: LD_INT 12
44436: PUSH
44437: LD_INT 15
44439: PUSH
44440: LD_INT 16
44442: PUSH
44443: LD_INT 20
44445: PUSH
44446: LD_INT 21
44448: PUSH
44449: LD_INT 22
44451: PUSH
44452: LD_INT 23
44454: PUSH
44455: LD_INT 25
44457: PUSH
44458: LD_INT 26
44460: PUSH
44461: LD_INT 30
44463: PUSH
44464: LD_INT 31
44466: PUSH
44467: LD_INT 32
44469: PUSH
44470: LD_INT 36
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 101
44497: PUSH
44498: LD_INT 102
44500: PUSH
44501: LD_INT 103
44503: PUSH
44504: LD_INT 105
44506: PUSH
44507: LD_INT 106
44509: PUSH
44510: LD_INT 108
44512: PUSH
44513: LD_INT 109
44515: PUSH
44516: LD_INT 112
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: ST_TO_ADDR
44533: GO 46656
44535: LD_INT 9
44537: DOUBLE
44538: EQUAL
44539: IFTRUE 44543
44541: GO 44679
44543: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
44544: LD_ADDR_VAR 0 1
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 4
44554: PUSH
44555: LD_INT 5
44557: PUSH
44558: LD_INT 6
44560: PUSH
44561: LD_INT 7
44563: PUSH
44564: LD_INT 8
44566: PUSH
44567: LD_INT 11
44569: PUSH
44570: LD_INT 12
44572: PUSH
44573: LD_INT 15
44575: PUSH
44576: LD_INT 16
44578: PUSH
44579: LD_INT 20
44581: PUSH
44582: LD_INT 21
44584: PUSH
44585: LD_INT 22
44587: PUSH
44588: LD_INT 23
44590: PUSH
44591: LD_INT 25
44593: PUSH
44594: LD_INT 26
44596: PUSH
44597: LD_INT 28
44599: PUSH
44600: LD_INT 30
44602: PUSH
44603: LD_INT 31
44605: PUSH
44606: LD_INT 32
44608: PUSH
44609: LD_INT 36
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 101
44637: PUSH
44638: LD_INT 102
44640: PUSH
44641: LD_INT 103
44643: PUSH
44644: LD_INT 105
44646: PUSH
44647: LD_INT 106
44649: PUSH
44650: LD_INT 108
44652: PUSH
44653: LD_INT 109
44655: PUSH
44656: LD_INT 112
44658: PUSH
44659: LD_INT 114
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: ST_TO_ADDR
44677: GO 46656
44679: LD_INT 10
44681: DOUBLE
44682: EQUAL
44683: IFTRUE 44687
44685: GO 44871
44687: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
44688: LD_ADDR_VAR 0 1
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 4
44698: PUSH
44699: LD_INT 5
44701: PUSH
44702: LD_INT 6
44704: PUSH
44705: LD_INT 7
44707: PUSH
44708: LD_INT 8
44710: PUSH
44711: LD_INT 9
44713: PUSH
44714: LD_INT 10
44716: PUSH
44717: LD_INT 11
44719: PUSH
44720: LD_INT 12
44722: PUSH
44723: LD_INT 13
44725: PUSH
44726: LD_INT 14
44728: PUSH
44729: LD_INT 15
44731: PUSH
44732: LD_INT 16
44734: PUSH
44735: LD_INT 17
44737: PUSH
44738: LD_INT 18
44740: PUSH
44741: LD_INT 19
44743: PUSH
44744: LD_INT 20
44746: PUSH
44747: LD_INT 21
44749: PUSH
44750: LD_INT 22
44752: PUSH
44753: LD_INT 23
44755: PUSH
44756: LD_INT 24
44758: PUSH
44759: LD_INT 25
44761: PUSH
44762: LD_INT 26
44764: PUSH
44765: LD_INT 28
44767: PUSH
44768: LD_INT 30
44770: PUSH
44771: LD_INT 31
44773: PUSH
44774: LD_INT 32
44776: PUSH
44777: LD_INT 36
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 101
44813: PUSH
44814: LD_INT 102
44816: PUSH
44817: LD_INT 103
44819: PUSH
44820: LD_INT 104
44822: PUSH
44823: LD_INT 105
44825: PUSH
44826: LD_INT 106
44828: PUSH
44829: LD_INT 107
44831: PUSH
44832: LD_INT 108
44834: PUSH
44835: LD_INT 109
44837: PUSH
44838: LD_INT 110
44840: PUSH
44841: LD_INT 111
44843: PUSH
44844: LD_INT 112
44846: PUSH
44847: LD_INT 114
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: ST_TO_ADDR
44869: GO 46656
44871: LD_INT 11
44873: DOUBLE
44874: EQUAL
44875: IFTRUE 44879
44877: GO 45071
44879: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
44880: LD_ADDR_VAR 0 1
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 3
44890: PUSH
44891: LD_INT 4
44893: PUSH
44894: LD_INT 5
44896: PUSH
44897: LD_INT 6
44899: PUSH
44900: LD_INT 7
44902: PUSH
44903: LD_INT 8
44905: PUSH
44906: LD_INT 9
44908: PUSH
44909: LD_INT 10
44911: PUSH
44912: LD_INT 11
44914: PUSH
44915: LD_INT 12
44917: PUSH
44918: LD_INT 13
44920: PUSH
44921: LD_INT 14
44923: PUSH
44924: LD_INT 15
44926: PUSH
44927: LD_INT 16
44929: PUSH
44930: LD_INT 17
44932: PUSH
44933: LD_INT 18
44935: PUSH
44936: LD_INT 19
44938: PUSH
44939: LD_INT 20
44941: PUSH
44942: LD_INT 21
44944: PUSH
44945: LD_INT 22
44947: PUSH
44948: LD_INT 23
44950: PUSH
44951: LD_INT 24
44953: PUSH
44954: LD_INT 25
44956: PUSH
44957: LD_INT 26
44959: PUSH
44960: LD_INT 28
44962: PUSH
44963: LD_INT 30
44965: PUSH
44966: LD_INT 31
44968: PUSH
44969: LD_INT 32
44971: PUSH
44972: LD_INT 34
44974: PUSH
44975: LD_INT 36
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 101
45013: PUSH
45014: LD_INT 102
45016: PUSH
45017: LD_INT 103
45019: PUSH
45020: LD_INT 104
45022: PUSH
45023: LD_INT 105
45025: PUSH
45026: LD_INT 106
45028: PUSH
45029: LD_INT 107
45031: PUSH
45032: LD_INT 108
45034: PUSH
45035: LD_INT 109
45037: PUSH
45038: LD_INT 110
45040: PUSH
45041: LD_INT 111
45043: PUSH
45044: LD_INT 112
45046: PUSH
45047: LD_INT 114
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: ST_TO_ADDR
45069: GO 46656
45071: LD_INT 12
45073: DOUBLE
45074: EQUAL
45075: IFTRUE 45079
45077: GO 45287
45079: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
45080: LD_ADDR_VAR 0 1
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: LD_INT 3
45093: PUSH
45094: LD_INT 4
45096: PUSH
45097: LD_INT 5
45099: PUSH
45100: LD_INT 6
45102: PUSH
45103: LD_INT 7
45105: PUSH
45106: LD_INT 8
45108: PUSH
45109: LD_INT 9
45111: PUSH
45112: LD_INT 10
45114: PUSH
45115: LD_INT 11
45117: PUSH
45118: LD_INT 12
45120: PUSH
45121: LD_INT 13
45123: PUSH
45124: LD_INT 14
45126: PUSH
45127: LD_INT 15
45129: PUSH
45130: LD_INT 16
45132: PUSH
45133: LD_INT 17
45135: PUSH
45136: LD_INT 18
45138: PUSH
45139: LD_INT 19
45141: PUSH
45142: LD_INT 20
45144: PUSH
45145: LD_INT 21
45147: PUSH
45148: LD_INT 22
45150: PUSH
45151: LD_INT 23
45153: PUSH
45154: LD_INT 24
45156: PUSH
45157: LD_INT 25
45159: PUSH
45160: LD_INT 26
45162: PUSH
45163: LD_INT 27
45165: PUSH
45166: LD_INT 28
45168: PUSH
45169: LD_INT 30
45171: PUSH
45172: LD_INT 31
45174: PUSH
45175: LD_INT 32
45177: PUSH
45178: LD_INT 33
45180: PUSH
45181: LD_INT 34
45183: PUSH
45184: LD_INT 36
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 101
45225: PUSH
45226: LD_INT 102
45228: PUSH
45229: LD_INT 103
45231: PUSH
45232: LD_INT 104
45234: PUSH
45235: LD_INT 105
45237: PUSH
45238: LD_INT 106
45240: PUSH
45241: LD_INT 107
45243: PUSH
45244: LD_INT 108
45246: PUSH
45247: LD_INT 109
45249: PUSH
45250: LD_INT 110
45252: PUSH
45253: LD_INT 111
45255: PUSH
45256: LD_INT 112
45258: PUSH
45259: LD_INT 113
45261: PUSH
45262: LD_INT 114
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: ST_TO_ADDR
45285: GO 46656
45287: LD_INT 13
45289: DOUBLE
45290: EQUAL
45291: IFTRUE 45295
45293: GO 45491
45295: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
45296: LD_ADDR_VAR 0 1
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 4
45312: PUSH
45313: LD_INT 5
45315: PUSH
45316: LD_INT 8
45318: PUSH
45319: LD_INT 9
45321: PUSH
45322: LD_INT 10
45324: PUSH
45325: LD_INT 11
45327: PUSH
45328: LD_INT 12
45330: PUSH
45331: LD_INT 14
45333: PUSH
45334: LD_INT 15
45336: PUSH
45337: LD_INT 16
45339: PUSH
45340: LD_INT 17
45342: PUSH
45343: LD_INT 18
45345: PUSH
45346: LD_INT 19
45348: PUSH
45349: LD_INT 20
45351: PUSH
45352: LD_INT 21
45354: PUSH
45355: LD_INT 22
45357: PUSH
45358: LD_INT 23
45360: PUSH
45361: LD_INT 24
45363: PUSH
45364: LD_INT 25
45366: PUSH
45367: LD_INT 26
45369: PUSH
45370: LD_INT 27
45372: PUSH
45373: LD_INT 28
45375: PUSH
45376: LD_INT 30
45378: PUSH
45379: LD_INT 31
45381: PUSH
45382: LD_INT 32
45384: PUSH
45385: LD_INT 33
45387: PUSH
45388: LD_INT 34
45390: PUSH
45391: LD_INT 36
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 101
45429: PUSH
45430: LD_INT 102
45432: PUSH
45433: LD_INT 103
45435: PUSH
45436: LD_INT 104
45438: PUSH
45439: LD_INT 105
45441: PUSH
45442: LD_INT 106
45444: PUSH
45445: LD_INT 107
45447: PUSH
45448: LD_INT 108
45450: PUSH
45451: LD_INT 109
45453: PUSH
45454: LD_INT 110
45456: PUSH
45457: LD_INT 111
45459: PUSH
45460: LD_INT 112
45462: PUSH
45463: LD_INT 113
45465: PUSH
45466: LD_INT 114
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: ST_TO_ADDR
45489: GO 46656
45491: LD_INT 14
45493: DOUBLE
45494: EQUAL
45495: IFTRUE 45499
45497: GO 45711
45499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
45500: LD_ADDR_VAR 0 1
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: LD_INT 3
45513: PUSH
45514: LD_INT 4
45516: PUSH
45517: LD_INT 5
45519: PUSH
45520: LD_INT 6
45522: PUSH
45523: LD_INT 7
45525: PUSH
45526: LD_INT 8
45528: PUSH
45529: LD_INT 9
45531: PUSH
45532: LD_INT 10
45534: PUSH
45535: LD_INT 11
45537: PUSH
45538: LD_INT 12
45540: PUSH
45541: LD_INT 13
45543: PUSH
45544: LD_INT 14
45546: PUSH
45547: LD_INT 15
45549: PUSH
45550: LD_INT 16
45552: PUSH
45553: LD_INT 17
45555: PUSH
45556: LD_INT 18
45558: PUSH
45559: LD_INT 19
45561: PUSH
45562: LD_INT 20
45564: PUSH
45565: LD_INT 21
45567: PUSH
45568: LD_INT 22
45570: PUSH
45571: LD_INT 23
45573: PUSH
45574: LD_INT 24
45576: PUSH
45577: LD_INT 25
45579: PUSH
45580: LD_INT 26
45582: PUSH
45583: LD_INT 27
45585: PUSH
45586: LD_INT 28
45588: PUSH
45589: LD_INT 29
45591: PUSH
45592: LD_INT 30
45594: PUSH
45595: LD_INT 31
45597: PUSH
45598: LD_INT 32
45600: PUSH
45601: LD_INT 33
45603: PUSH
45604: LD_INT 34
45606: PUSH
45607: LD_INT 36
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 101
45649: PUSH
45650: LD_INT 102
45652: PUSH
45653: LD_INT 103
45655: PUSH
45656: LD_INT 104
45658: PUSH
45659: LD_INT 105
45661: PUSH
45662: LD_INT 106
45664: PUSH
45665: LD_INT 107
45667: PUSH
45668: LD_INT 108
45670: PUSH
45671: LD_INT 109
45673: PUSH
45674: LD_INT 110
45676: PUSH
45677: LD_INT 111
45679: PUSH
45680: LD_INT 112
45682: PUSH
45683: LD_INT 113
45685: PUSH
45686: LD_INT 114
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: ST_TO_ADDR
45709: GO 46656
45711: LD_INT 15
45713: DOUBLE
45714: EQUAL
45715: IFTRUE 45719
45717: GO 45931
45719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
45720: LD_ADDR_VAR 0 1
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: LD_INT 3
45733: PUSH
45734: LD_INT 4
45736: PUSH
45737: LD_INT 5
45739: PUSH
45740: LD_INT 6
45742: PUSH
45743: LD_INT 7
45745: PUSH
45746: LD_INT 8
45748: PUSH
45749: LD_INT 9
45751: PUSH
45752: LD_INT 10
45754: PUSH
45755: LD_INT 11
45757: PUSH
45758: LD_INT 12
45760: PUSH
45761: LD_INT 13
45763: PUSH
45764: LD_INT 14
45766: PUSH
45767: LD_INT 15
45769: PUSH
45770: LD_INT 16
45772: PUSH
45773: LD_INT 17
45775: PUSH
45776: LD_INT 18
45778: PUSH
45779: LD_INT 19
45781: PUSH
45782: LD_INT 20
45784: PUSH
45785: LD_INT 21
45787: PUSH
45788: LD_INT 22
45790: PUSH
45791: LD_INT 23
45793: PUSH
45794: LD_INT 24
45796: PUSH
45797: LD_INT 25
45799: PUSH
45800: LD_INT 26
45802: PUSH
45803: LD_INT 27
45805: PUSH
45806: LD_INT 28
45808: PUSH
45809: LD_INT 29
45811: PUSH
45812: LD_INT 30
45814: PUSH
45815: LD_INT 31
45817: PUSH
45818: LD_INT 32
45820: PUSH
45821: LD_INT 33
45823: PUSH
45824: LD_INT 34
45826: PUSH
45827: LD_INT 36
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 101
45869: PUSH
45870: LD_INT 102
45872: PUSH
45873: LD_INT 103
45875: PUSH
45876: LD_INT 104
45878: PUSH
45879: LD_INT 105
45881: PUSH
45882: LD_INT 106
45884: PUSH
45885: LD_INT 107
45887: PUSH
45888: LD_INT 108
45890: PUSH
45891: LD_INT 109
45893: PUSH
45894: LD_INT 110
45896: PUSH
45897: LD_INT 111
45899: PUSH
45900: LD_INT 112
45902: PUSH
45903: LD_INT 113
45905: PUSH
45906: LD_INT 114
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: ST_TO_ADDR
45929: GO 46656
45931: LD_INT 16
45933: DOUBLE
45934: EQUAL
45935: IFTRUE 45939
45937: GO 46063
45939: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
45940: LD_ADDR_VAR 0 1
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: LD_INT 4
45950: PUSH
45951: LD_INT 5
45953: PUSH
45954: LD_INT 7
45956: PUSH
45957: LD_INT 11
45959: PUSH
45960: LD_INT 12
45962: PUSH
45963: LD_INT 15
45965: PUSH
45966: LD_INT 16
45968: PUSH
45969: LD_INT 20
45971: PUSH
45972: LD_INT 21
45974: PUSH
45975: LD_INT 22
45977: PUSH
45978: LD_INT 23
45980: PUSH
45981: LD_INT 25
45983: PUSH
45984: LD_INT 26
45986: PUSH
45987: LD_INT 30
45989: PUSH
45990: LD_INT 31
45992: PUSH
45993: LD_INT 32
45995: PUSH
45996: LD_INT 33
45998: PUSH
45999: LD_INT 34
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 101
46025: PUSH
46026: LD_INT 102
46028: PUSH
46029: LD_INT 103
46031: PUSH
46032: LD_INT 106
46034: PUSH
46035: LD_INT 108
46037: PUSH
46038: LD_INT 112
46040: PUSH
46041: LD_INT 113
46043: PUSH
46044: LD_INT 114
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: ST_TO_ADDR
46061: GO 46656
46063: LD_INT 17
46065: DOUBLE
46066: EQUAL
46067: IFTRUE 46071
46069: GO 46283
46071: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
46072: LD_ADDR_VAR 0 1
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: LD_INT 3
46085: PUSH
46086: LD_INT 4
46088: PUSH
46089: LD_INT 5
46091: PUSH
46092: LD_INT 6
46094: PUSH
46095: LD_INT 7
46097: PUSH
46098: LD_INT 8
46100: PUSH
46101: LD_INT 9
46103: PUSH
46104: LD_INT 10
46106: PUSH
46107: LD_INT 11
46109: PUSH
46110: LD_INT 12
46112: PUSH
46113: LD_INT 13
46115: PUSH
46116: LD_INT 14
46118: PUSH
46119: LD_INT 15
46121: PUSH
46122: LD_INT 16
46124: PUSH
46125: LD_INT 17
46127: PUSH
46128: LD_INT 18
46130: PUSH
46131: LD_INT 19
46133: PUSH
46134: LD_INT 20
46136: PUSH
46137: LD_INT 21
46139: PUSH
46140: LD_INT 22
46142: PUSH
46143: LD_INT 23
46145: PUSH
46146: LD_INT 24
46148: PUSH
46149: LD_INT 25
46151: PUSH
46152: LD_INT 26
46154: PUSH
46155: LD_INT 27
46157: PUSH
46158: LD_INT 28
46160: PUSH
46161: LD_INT 29
46163: PUSH
46164: LD_INT 30
46166: PUSH
46167: LD_INT 31
46169: PUSH
46170: LD_INT 32
46172: PUSH
46173: LD_INT 33
46175: PUSH
46176: LD_INT 34
46178: PUSH
46179: LD_INT 36
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 101
46221: PUSH
46222: LD_INT 102
46224: PUSH
46225: LD_INT 103
46227: PUSH
46228: LD_INT 104
46230: PUSH
46231: LD_INT 105
46233: PUSH
46234: LD_INT 106
46236: PUSH
46237: LD_INT 107
46239: PUSH
46240: LD_INT 108
46242: PUSH
46243: LD_INT 109
46245: PUSH
46246: LD_INT 110
46248: PUSH
46249: LD_INT 111
46251: PUSH
46252: LD_INT 112
46254: PUSH
46255: LD_INT 113
46257: PUSH
46258: LD_INT 114
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: ST_TO_ADDR
46281: GO 46656
46283: LD_INT 18
46285: DOUBLE
46286: EQUAL
46287: IFTRUE 46291
46289: GO 46427
46291: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
46292: LD_ADDR_VAR 0 1
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 4
46302: PUSH
46303: LD_INT 5
46305: PUSH
46306: LD_INT 7
46308: PUSH
46309: LD_INT 11
46311: PUSH
46312: LD_INT 12
46314: PUSH
46315: LD_INT 15
46317: PUSH
46318: LD_INT 16
46320: PUSH
46321: LD_INT 20
46323: PUSH
46324: LD_INT 21
46326: PUSH
46327: LD_INT 22
46329: PUSH
46330: LD_INT 23
46332: PUSH
46333: LD_INT 25
46335: PUSH
46336: LD_INT 26
46338: PUSH
46339: LD_INT 30
46341: PUSH
46342: LD_INT 31
46344: PUSH
46345: LD_INT 32
46347: PUSH
46348: LD_INT 33
46350: PUSH
46351: LD_INT 34
46353: PUSH
46354: LD_INT 35
46356: PUSH
46357: LD_INT 36
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 101
46385: PUSH
46386: LD_INT 102
46388: PUSH
46389: LD_INT 103
46391: PUSH
46392: LD_INT 106
46394: PUSH
46395: LD_INT 108
46397: PUSH
46398: LD_INT 112
46400: PUSH
46401: LD_INT 113
46403: PUSH
46404: LD_INT 114
46406: PUSH
46407: LD_INT 115
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: ST_TO_ADDR
46425: GO 46656
46427: LD_INT 19
46429: DOUBLE
46430: EQUAL
46431: IFTRUE 46435
46433: GO 46655
46435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
46436: LD_ADDR_VAR 0 1
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: LD_INT 4
46452: PUSH
46453: LD_INT 5
46455: PUSH
46456: LD_INT 6
46458: PUSH
46459: LD_INT 7
46461: PUSH
46462: LD_INT 8
46464: PUSH
46465: LD_INT 9
46467: PUSH
46468: LD_INT 10
46470: PUSH
46471: LD_INT 11
46473: PUSH
46474: LD_INT 12
46476: PUSH
46477: LD_INT 13
46479: PUSH
46480: LD_INT 14
46482: PUSH
46483: LD_INT 15
46485: PUSH
46486: LD_INT 16
46488: PUSH
46489: LD_INT 17
46491: PUSH
46492: LD_INT 18
46494: PUSH
46495: LD_INT 19
46497: PUSH
46498: LD_INT 20
46500: PUSH
46501: LD_INT 21
46503: PUSH
46504: LD_INT 22
46506: PUSH
46507: LD_INT 23
46509: PUSH
46510: LD_INT 24
46512: PUSH
46513: LD_INT 25
46515: PUSH
46516: LD_INT 26
46518: PUSH
46519: LD_INT 27
46521: PUSH
46522: LD_INT 28
46524: PUSH
46525: LD_INT 29
46527: PUSH
46528: LD_INT 30
46530: PUSH
46531: LD_INT 31
46533: PUSH
46534: LD_INT 32
46536: PUSH
46537: LD_INT 33
46539: PUSH
46540: LD_INT 34
46542: PUSH
46543: LD_INT 35
46545: PUSH
46546: LD_INT 36
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 101
46589: PUSH
46590: LD_INT 102
46592: PUSH
46593: LD_INT 103
46595: PUSH
46596: LD_INT 104
46598: PUSH
46599: LD_INT 105
46601: PUSH
46602: LD_INT 106
46604: PUSH
46605: LD_INT 107
46607: PUSH
46608: LD_INT 108
46610: PUSH
46611: LD_INT 109
46613: PUSH
46614: LD_INT 110
46616: PUSH
46617: LD_INT 111
46619: PUSH
46620: LD_INT 112
46622: PUSH
46623: LD_INT 113
46625: PUSH
46626: LD_INT 114
46628: PUSH
46629: LD_INT 115
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: ST_TO_ADDR
46653: GO 46656
46655: POP
// end else
46656: GO 46875
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
46658: LD_ADDR_VAR 0 1
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 3
46671: PUSH
46672: LD_INT 4
46674: PUSH
46675: LD_INT 5
46677: PUSH
46678: LD_INT 6
46680: PUSH
46681: LD_INT 7
46683: PUSH
46684: LD_INT 8
46686: PUSH
46687: LD_INT 9
46689: PUSH
46690: LD_INT 10
46692: PUSH
46693: LD_INT 11
46695: PUSH
46696: LD_INT 12
46698: PUSH
46699: LD_INT 13
46701: PUSH
46702: LD_INT 14
46704: PUSH
46705: LD_INT 15
46707: PUSH
46708: LD_INT 16
46710: PUSH
46711: LD_INT 17
46713: PUSH
46714: LD_INT 18
46716: PUSH
46717: LD_INT 19
46719: PUSH
46720: LD_INT 20
46722: PUSH
46723: LD_INT 21
46725: PUSH
46726: LD_INT 22
46728: PUSH
46729: LD_INT 23
46731: PUSH
46732: LD_INT 24
46734: PUSH
46735: LD_INT 25
46737: PUSH
46738: LD_INT 26
46740: PUSH
46741: LD_INT 27
46743: PUSH
46744: LD_INT 28
46746: PUSH
46747: LD_INT 29
46749: PUSH
46750: LD_INT 30
46752: PUSH
46753: LD_INT 31
46755: PUSH
46756: LD_INT 32
46758: PUSH
46759: LD_INT 33
46761: PUSH
46762: LD_INT 34
46764: PUSH
46765: LD_INT 35
46767: PUSH
46768: LD_INT 36
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 101
46811: PUSH
46812: LD_INT 102
46814: PUSH
46815: LD_INT 103
46817: PUSH
46818: LD_INT 104
46820: PUSH
46821: LD_INT 105
46823: PUSH
46824: LD_INT 106
46826: PUSH
46827: LD_INT 107
46829: PUSH
46830: LD_INT 108
46832: PUSH
46833: LD_INT 109
46835: PUSH
46836: LD_INT 110
46838: PUSH
46839: LD_INT 111
46841: PUSH
46842: LD_INT 112
46844: PUSH
46845: LD_INT 113
46847: PUSH
46848: LD_INT 114
46850: PUSH
46851: LD_INT 115
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: ST_TO_ADDR
// if result then
46875: LD_VAR 0 1
46879: IFFALSE 47168
// begin normal :=  ;
46881: LD_ADDR_VAR 0 3
46885: PUSH
46886: LD_STRING 
46888: ST_TO_ADDR
// hardcore :=  ;
46889: LD_ADDR_VAR 0 4
46893: PUSH
46894: LD_STRING 
46896: ST_TO_ADDR
// for i = 1 to normalCounter do
46897: LD_ADDR_VAR 0 5
46901: PUSH
46902: DOUBLE
46903: LD_INT 1
46905: DEC
46906: ST_TO_ADDR
46907: LD_EXP 39
46911: PUSH
46912: FOR_TO
46913: IFFALSE 47014
// begin tmp := 0 ;
46915: LD_ADDR_VAR 0 2
46919: PUSH
46920: LD_STRING 0
46922: ST_TO_ADDR
// if result [ 1 ] then
46923: LD_VAR 0 1
46927: PUSH
46928: LD_INT 1
46930: ARRAY
46931: IFFALSE 46996
// if result [ 1 ] [ 1 ] = i then
46933: LD_VAR 0 1
46937: PUSH
46938: LD_INT 1
46940: ARRAY
46941: PUSH
46942: LD_INT 1
46944: ARRAY
46945: PUSH
46946: LD_VAR 0 5
46950: EQUAL
46951: IFFALSE 46996
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
46953: LD_ADDR_VAR 0 1
46957: PUSH
46958: LD_VAR 0 1
46962: PPUSH
46963: LD_INT 1
46965: PPUSH
46966: LD_VAR 0 1
46970: PUSH
46971: LD_INT 1
46973: ARRAY
46974: PPUSH
46975: LD_INT 1
46977: PPUSH
46978: CALL_OW 3
46982: PPUSH
46983: CALL_OW 1
46987: ST_TO_ADDR
// tmp := 1 ;
46988: LD_ADDR_VAR 0 2
46992: PUSH
46993: LD_STRING 1
46995: ST_TO_ADDR
// end ; normal := normal & tmp ;
46996: LD_ADDR_VAR 0 3
47000: PUSH
47001: LD_VAR 0 3
47005: PUSH
47006: LD_VAR 0 2
47010: STR
47011: ST_TO_ADDR
// end ;
47012: GO 46912
47014: POP
47015: POP
// for i = 1 to hardcoreCounter do
47016: LD_ADDR_VAR 0 5
47020: PUSH
47021: DOUBLE
47022: LD_INT 1
47024: DEC
47025: ST_TO_ADDR
47026: LD_EXP 40
47030: PUSH
47031: FOR_TO
47032: IFFALSE 47137
// begin tmp := 0 ;
47034: LD_ADDR_VAR 0 2
47038: PUSH
47039: LD_STRING 0
47041: ST_TO_ADDR
// if result [ 2 ] then
47042: LD_VAR 0 1
47046: PUSH
47047: LD_INT 2
47049: ARRAY
47050: IFFALSE 47119
// if result [ 2 ] [ 1 ] = 100 + i then
47052: LD_VAR 0 1
47056: PUSH
47057: LD_INT 2
47059: ARRAY
47060: PUSH
47061: LD_INT 1
47063: ARRAY
47064: PUSH
47065: LD_INT 100
47067: PUSH
47068: LD_VAR 0 5
47072: PLUS
47073: EQUAL
47074: IFFALSE 47119
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
47076: LD_ADDR_VAR 0 1
47080: PUSH
47081: LD_VAR 0 1
47085: PPUSH
47086: LD_INT 2
47088: PPUSH
47089: LD_VAR 0 1
47093: PUSH
47094: LD_INT 2
47096: ARRAY
47097: PPUSH
47098: LD_INT 1
47100: PPUSH
47101: CALL_OW 3
47105: PPUSH
47106: CALL_OW 1
47110: ST_TO_ADDR
// tmp := 1 ;
47111: LD_ADDR_VAR 0 2
47115: PUSH
47116: LD_STRING 1
47118: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
47119: LD_ADDR_VAR 0 4
47123: PUSH
47124: LD_VAR 0 4
47128: PUSH
47129: LD_VAR 0 2
47133: STR
47134: ST_TO_ADDR
// end ;
47135: GO 47031
47137: POP
47138: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
47139: LD_STRING getStreamItemsFromMission("
47141: PUSH
47142: LD_VAR 0 3
47146: STR
47147: PUSH
47148: LD_STRING ","
47150: STR
47151: PUSH
47152: LD_VAR 0 4
47156: STR
47157: PUSH
47158: LD_STRING ")
47160: STR
47161: PPUSH
47162: CALL_OW 559
// end else
47166: GO 47175
// ToLua ( getStreamItemsFromMission("","") ) ;
47168: LD_STRING getStreamItemsFromMission("","")
47170: PPUSH
47171: CALL_OW 559
// end ;
47175: LD_VAR 0 1
47179: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
47180: LD_EXP 38
47184: PUSH
47185: LD_EXP 43
47189: AND
47190: IFFALSE 47314
47192: GO 47194
47194: DISABLE
47195: LD_INT 0
47197: PPUSH
47198: PPUSH
// begin enable ;
47199: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
47200: LD_ADDR_VAR 0 2
47204: PUSH
47205: LD_INT 22
47207: PUSH
47208: LD_OWVAR 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: LD_INT 34
47222: PUSH
47223: LD_INT 7
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 34
47232: PUSH
47233: LD_INT 45
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 34
47242: PUSH
47243: LD_INT 28
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 34
47252: PUSH
47253: LD_INT 47
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PPUSH
47271: CALL_OW 69
47275: ST_TO_ADDR
// if not tmp then
47276: LD_VAR 0 2
47280: NOT
47281: IFFALSE 47285
// exit ;
47283: GO 47314
// for i in tmp do
47285: LD_ADDR_VAR 0 1
47289: PUSH
47290: LD_VAR 0 2
47294: PUSH
47295: FOR_IN
47296: IFFALSE 47312
// begin SetLives ( i , 0 ) ;
47298: LD_VAR 0 1
47302: PPUSH
47303: LD_INT 0
47305: PPUSH
47306: CALL_OW 234
// end ;
47310: GO 47295
47312: POP
47313: POP
// end ;
47314: PPOPN 2
47316: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
47317: LD_EXP 38
47321: PUSH
47322: LD_EXP 44
47326: AND
47327: IFFALSE 47411
47329: GO 47331
47331: DISABLE
47332: LD_INT 0
47334: PPUSH
47335: PPUSH
// begin enable ;
47336: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
47337: LD_ADDR_VAR 0 2
47341: PUSH
47342: LD_INT 22
47344: PUSH
47345: LD_OWVAR 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 32
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PPUSH
47368: CALL_OW 69
47372: ST_TO_ADDR
// if not tmp then
47373: LD_VAR 0 2
47377: NOT
47378: IFFALSE 47382
// exit ;
47380: GO 47411
// for i in tmp do
47382: LD_ADDR_VAR 0 1
47386: PUSH
47387: LD_VAR 0 2
47391: PUSH
47392: FOR_IN
47393: IFFALSE 47409
// begin SetLives ( i , 0 ) ;
47395: LD_VAR 0 1
47399: PPUSH
47400: LD_INT 0
47402: PPUSH
47403: CALL_OW 234
// end ;
47407: GO 47392
47409: POP
47410: POP
// end ;
47411: PPOPN 2
47413: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
47414: LD_EXP 38
47418: PUSH
47419: LD_EXP 41
47423: AND
47424: IFFALSE 47517
47426: GO 47428
47428: DISABLE
47429: LD_INT 0
47431: PPUSH
// begin enable ;
47432: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
47433: LD_ADDR_VAR 0 1
47437: PUSH
47438: LD_INT 22
47440: PUSH
47441: LD_OWVAR 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: LD_INT 25
47455: PUSH
47456: LD_INT 5
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 25
47465: PUSH
47466: LD_INT 9
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 25
47475: PUSH
47476: LD_INT 8
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PPUSH
47493: CALL_OW 69
47497: PUSH
47498: FOR_IN
47499: IFFALSE 47515
// begin SetClass ( i , 1 ) ;
47501: LD_VAR 0 1
47505: PPUSH
47506: LD_INT 1
47508: PPUSH
47509: CALL_OW 336
// end ;
47513: GO 47498
47515: POP
47516: POP
// end ;
47517: PPOPN 1
47519: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
47520: LD_EXP 38
47524: PUSH
47525: LD_EXP 42
47529: AND
47530: PUSH
47531: LD_OWVAR 65
47535: PUSH
47536: LD_INT 7
47538: LESS
47539: AND
47540: IFFALSE 47554
47542: GO 47544
47544: DISABLE
// begin enable ;
47545: ENABLE
// game_speed := 7 ;
47546: LD_ADDR_OWVAR 65
47550: PUSH
47551: LD_INT 7
47553: ST_TO_ADDR
// end ;
47554: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
47555: LD_EXP 38
47559: PUSH
47560: LD_EXP 45
47564: AND
47565: IFFALSE 47767
47567: GO 47569
47569: DISABLE
47570: LD_INT 0
47572: PPUSH
47573: PPUSH
47574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
47575: LD_ADDR_VAR 0 3
47579: PUSH
47580: LD_INT 81
47582: PUSH
47583: LD_OWVAR 2
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 21
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PPUSH
47606: CALL_OW 69
47610: ST_TO_ADDR
// if not tmp then
47611: LD_VAR 0 3
47615: NOT
47616: IFFALSE 47620
// exit ;
47618: GO 47767
// if tmp > 5 then
47620: LD_VAR 0 3
47624: PUSH
47625: LD_INT 5
47627: GREATER
47628: IFFALSE 47640
// k := 5 else
47630: LD_ADDR_VAR 0 2
47634: PUSH
47635: LD_INT 5
47637: ST_TO_ADDR
47638: GO 47650
// k := tmp ;
47640: LD_ADDR_VAR 0 2
47644: PUSH
47645: LD_VAR 0 3
47649: ST_TO_ADDR
// for i := 1 to k do
47650: LD_ADDR_VAR 0 1
47654: PUSH
47655: DOUBLE
47656: LD_INT 1
47658: DEC
47659: ST_TO_ADDR
47660: LD_VAR 0 2
47664: PUSH
47665: FOR_TO
47666: IFFALSE 47765
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
47668: LD_VAR 0 3
47672: PUSH
47673: LD_VAR 0 1
47677: ARRAY
47678: PPUSH
47679: LD_VAR 0 1
47683: PUSH
47684: LD_INT 4
47686: MOD
47687: PUSH
47688: LD_INT 1
47690: PLUS
47691: PPUSH
47692: CALL_OW 259
47696: PUSH
47697: LD_INT 10
47699: LESS
47700: IFFALSE 47763
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
47702: LD_VAR 0 3
47706: PUSH
47707: LD_VAR 0 1
47711: ARRAY
47712: PPUSH
47713: LD_VAR 0 1
47717: PUSH
47718: LD_INT 4
47720: MOD
47721: PUSH
47722: LD_INT 1
47724: PLUS
47725: PPUSH
47726: LD_VAR 0 3
47730: PUSH
47731: LD_VAR 0 1
47735: ARRAY
47736: PPUSH
47737: LD_VAR 0 1
47741: PUSH
47742: LD_INT 4
47744: MOD
47745: PUSH
47746: LD_INT 1
47748: PLUS
47749: PPUSH
47750: CALL_OW 259
47754: PUSH
47755: LD_INT 1
47757: PLUS
47758: PPUSH
47759: CALL_OW 237
47763: GO 47665
47765: POP
47766: POP
// end ;
47767: PPOPN 3
47769: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
47770: LD_EXP 38
47774: PUSH
47775: LD_EXP 46
47779: AND
47780: IFFALSE 47800
47782: GO 47784
47784: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
47785: LD_INT 4
47787: PPUSH
47788: LD_OWVAR 2
47792: PPUSH
47793: LD_INT 0
47795: PPUSH
47796: CALL_OW 324
47800: END
// every 0 0$1 trigger StreamModeActive and sShovel do
47801: LD_EXP 38
47805: PUSH
47806: LD_EXP 75
47810: AND
47811: IFFALSE 47831
47813: GO 47815
47815: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
47816: LD_INT 19
47818: PPUSH
47819: LD_OWVAR 2
47823: PPUSH
47824: LD_INT 0
47826: PPUSH
47827: CALL_OW 324
47831: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
47832: LD_EXP 38
47836: PUSH
47837: LD_EXP 47
47841: AND
47842: IFFALSE 47944
47844: GO 47846
47846: DISABLE
47847: LD_INT 0
47849: PPUSH
47850: PPUSH
// begin enable ;
47851: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
47852: LD_ADDR_VAR 0 2
47856: PUSH
47857: LD_INT 22
47859: PUSH
47860: LD_OWVAR 2
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 34
47874: PUSH
47875: LD_INT 11
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 34
47884: PUSH
47885: LD_INT 30
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: LIST
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PPUSH
47901: CALL_OW 69
47905: ST_TO_ADDR
// if not tmp then
47906: LD_VAR 0 2
47910: NOT
47911: IFFALSE 47915
// exit ;
47913: GO 47944
// for i in tmp do
47915: LD_ADDR_VAR 0 1
47919: PUSH
47920: LD_VAR 0 2
47924: PUSH
47925: FOR_IN
47926: IFFALSE 47942
// begin SetLives ( i , 0 ) ;
47928: LD_VAR 0 1
47932: PPUSH
47933: LD_INT 0
47935: PPUSH
47936: CALL_OW 234
// end ;
47940: GO 47925
47942: POP
47943: POP
// end ;
47944: PPOPN 2
47946: END
// every 0 0$1 trigger StreamModeActive and sBunker do
47947: LD_EXP 38
47951: PUSH
47952: LD_EXP 48
47956: AND
47957: IFFALSE 47977
47959: GO 47961
47961: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
47962: LD_INT 32
47964: PPUSH
47965: LD_OWVAR 2
47969: PPUSH
47970: LD_INT 0
47972: PPUSH
47973: CALL_OW 324
47977: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
47978: LD_EXP 38
47982: PUSH
47983: LD_EXP 49
47987: AND
47988: IFFALSE 48169
47990: GO 47992
47992: DISABLE
47993: LD_INT 0
47995: PPUSH
47996: PPUSH
47997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
47998: LD_ADDR_VAR 0 2
48002: PUSH
48003: LD_INT 22
48005: PUSH
48006: LD_OWVAR 2
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 33
48017: PUSH
48018: LD_INT 3
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PPUSH
48029: CALL_OW 69
48033: ST_TO_ADDR
// if not tmp then
48034: LD_VAR 0 2
48038: NOT
48039: IFFALSE 48043
// exit ;
48041: GO 48169
// side := 0 ;
48043: LD_ADDR_VAR 0 3
48047: PUSH
48048: LD_INT 0
48050: ST_TO_ADDR
// for i := 1 to 8 do
48051: LD_ADDR_VAR 0 1
48055: PUSH
48056: DOUBLE
48057: LD_INT 1
48059: DEC
48060: ST_TO_ADDR
48061: LD_INT 8
48063: PUSH
48064: FOR_TO
48065: IFFALSE 48113
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
48067: LD_OWVAR 2
48071: PUSH
48072: LD_VAR 0 1
48076: NONEQUAL
48077: PUSH
48078: LD_OWVAR 2
48082: PPUSH
48083: LD_VAR 0 1
48087: PPUSH
48088: CALL_OW 81
48092: PUSH
48093: LD_INT 2
48095: EQUAL
48096: AND
48097: IFFALSE 48111
// begin side := i ;
48099: LD_ADDR_VAR 0 3
48103: PUSH
48104: LD_VAR 0 1
48108: ST_TO_ADDR
// break ;
48109: GO 48113
// end ;
48111: GO 48064
48113: POP
48114: POP
// if not side then
48115: LD_VAR 0 3
48119: NOT
48120: IFFALSE 48124
// exit ;
48122: GO 48169
// for i := 1 to tmp do
48124: LD_ADDR_VAR 0 1
48128: PUSH
48129: DOUBLE
48130: LD_INT 1
48132: DEC
48133: ST_TO_ADDR
48134: LD_VAR 0 2
48138: PUSH
48139: FOR_TO
48140: IFFALSE 48167
// if Prob ( 60 ) then
48142: LD_INT 60
48144: PPUSH
48145: CALL_OW 13
48149: IFFALSE 48165
// SetSide ( i , side ) ;
48151: LD_VAR 0 1
48155: PPUSH
48156: LD_VAR 0 3
48160: PPUSH
48161: CALL_OW 235
48165: GO 48139
48167: POP
48168: POP
// end ;
48169: PPOPN 3
48171: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
48172: LD_EXP 38
48176: PUSH
48177: LD_EXP 51
48181: AND
48182: IFFALSE 48301
48184: GO 48186
48186: DISABLE
48187: LD_INT 0
48189: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
48190: LD_ADDR_VAR 0 1
48194: PUSH
48195: LD_INT 22
48197: PUSH
48198: LD_OWVAR 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 21
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 3
48219: PUSH
48220: LD_INT 23
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: PPUSH
48239: CALL_OW 69
48243: PUSH
48244: FOR_IN
48245: IFFALSE 48299
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
48247: LD_VAR 0 1
48251: PPUSH
48252: CALL_OW 257
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 3
48265: PUSH
48266: LD_INT 4
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: IN
48275: IFFALSE 48297
// SetClass ( un , rand ( 1 , 4 ) ) ;
48277: LD_VAR 0 1
48281: PPUSH
48282: LD_INT 1
48284: PPUSH
48285: LD_INT 4
48287: PPUSH
48288: CALL_OW 12
48292: PPUSH
48293: CALL_OW 336
48297: GO 48244
48299: POP
48300: POP
// end ;
48301: PPOPN 1
48303: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
48304: LD_EXP 38
48308: PUSH
48309: LD_EXP 50
48313: AND
48314: IFFALSE 48393
48316: GO 48318
48318: DISABLE
48319: LD_INT 0
48321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48322: LD_ADDR_VAR 0 1
48326: PUSH
48327: LD_INT 22
48329: PUSH
48330: LD_OWVAR 2
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 21
48341: PUSH
48342: LD_INT 3
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PPUSH
48353: CALL_OW 69
48357: ST_TO_ADDR
// if not tmp then
48358: LD_VAR 0 1
48362: NOT
48363: IFFALSE 48367
// exit ;
48365: GO 48393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
48367: LD_VAR 0 1
48371: PUSH
48372: LD_INT 1
48374: PPUSH
48375: LD_VAR 0 1
48379: PPUSH
48380: CALL_OW 12
48384: ARRAY
48385: PPUSH
48386: LD_INT 100
48388: PPUSH
48389: CALL_OW 234
// end ;
48393: PPOPN 1
48395: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
48396: LD_EXP 38
48400: PUSH
48401: LD_EXP 52
48405: AND
48406: IFFALSE 48504
48408: GO 48410
48410: DISABLE
48411: LD_INT 0
48413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
48414: LD_ADDR_VAR 0 1
48418: PUSH
48419: LD_INT 22
48421: PUSH
48422: LD_OWVAR 2
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 21
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PPUSH
48445: CALL_OW 69
48449: ST_TO_ADDR
// if not tmp then
48450: LD_VAR 0 1
48454: NOT
48455: IFFALSE 48459
// exit ;
48457: GO 48504
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
48459: LD_VAR 0 1
48463: PUSH
48464: LD_INT 1
48466: PPUSH
48467: LD_VAR 0 1
48471: PPUSH
48472: CALL_OW 12
48476: ARRAY
48477: PPUSH
48478: LD_INT 1
48480: PPUSH
48481: LD_INT 4
48483: PPUSH
48484: CALL_OW 12
48488: PPUSH
48489: LD_INT 3000
48491: PPUSH
48492: LD_INT 9000
48494: PPUSH
48495: CALL_OW 12
48499: PPUSH
48500: CALL_OW 492
// end ;
48504: PPOPN 1
48506: END
// every 0 0$1 trigger StreamModeActive and sDepot do
48507: LD_EXP 38
48511: PUSH
48512: LD_EXP 53
48516: AND
48517: IFFALSE 48537
48519: GO 48521
48521: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
48522: LD_INT 1
48524: PPUSH
48525: LD_OWVAR 2
48529: PPUSH
48530: LD_INT 0
48532: PPUSH
48533: CALL_OW 324
48537: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
48538: LD_EXP 38
48542: PUSH
48543: LD_EXP 54
48547: AND
48548: IFFALSE 48631
48550: GO 48552
48552: DISABLE
48553: LD_INT 0
48555: PPUSH
48556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48557: LD_ADDR_VAR 0 2
48561: PUSH
48562: LD_INT 22
48564: PUSH
48565: LD_OWVAR 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 21
48576: PUSH
48577: LD_INT 3
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PPUSH
48588: CALL_OW 69
48592: ST_TO_ADDR
// if not tmp then
48593: LD_VAR 0 2
48597: NOT
48598: IFFALSE 48602
// exit ;
48600: GO 48631
// for i in tmp do
48602: LD_ADDR_VAR 0 1
48606: PUSH
48607: LD_VAR 0 2
48611: PUSH
48612: FOR_IN
48613: IFFALSE 48629
// SetBLevel ( i , 10 ) ;
48615: LD_VAR 0 1
48619: PPUSH
48620: LD_INT 10
48622: PPUSH
48623: CALL_OW 241
48627: GO 48612
48629: POP
48630: POP
// end ;
48631: PPOPN 2
48633: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
48634: LD_EXP 38
48638: PUSH
48639: LD_EXP 55
48643: AND
48644: IFFALSE 48755
48646: GO 48648
48648: DISABLE
48649: LD_INT 0
48651: PPUSH
48652: PPUSH
48653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
48654: LD_ADDR_VAR 0 3
48658: PUSH
48659: LD_INT 22
48661: PUSH
48662: LD_OWVAR 2
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 25
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PPUSH
48685: CALL_OW 69
48689: ST_TO_ADDR
// if not tmp then
48690: LD_VAR 0 3
48694: NOT
48695: IFFALSE 48699
// exit ;
48697: GO 48755
// un := tmp [ rand ( 1 , tmp ) ] ;
48699: LD_ADDR_VAR 0 2
48703: PUSH
48704: LD_VAR 0 3
48708: PUSH
48709: LD_INT 1
48711: PPUSH
48712: LD_VAR 0 3
48716: PPUSH
48717: CALL_OW 12
48721: ARRAY
48722: ST_TO_ADDR
// if Crawls ( un ) then
48723: LD_VAR 0 2
48727: PPUSH
48728: CALL_OW 318
48732: IFFALSE 48743
// ComWalk ( un ) ;
48734: LD_VAR 0 2
48738: PPUSH
48739: CALL_OW 138
// SetClass ( un , class_sniper ) ;
48743: LD_VAR 0 2
48747: PPUSH
48748: LD_INT 5
48750: PPUSH
48751: CALL_OW 336
// end ;
48755: PPOPN 3
48757: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
48758: LD_EXP 38
48762: PUSH
48763: LD_EXP 56
48767: AND
48768: PUSH
48769: LD_OWVAR 67
48773: PUSH
48774: LD_INT 3
48776: LESS
48777: AND
48778: IFFALSE 48797
48780: GO 48782
48782: DISABLE
// Difficulty := Difficulty + 1 ;
48783: LD_ADDR_OWVAR 67
48787: PUSH
48788: LD_OWVAR 67
48792: PUSH
48793: LD_INT 1
48795: PLUS
48796: ST_TO_ADDR
48797: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
48798: LD_EXP 38
48802: PUSH
48803: LD_EXP 57
48807: AND
48808: IFFALSE 48911
48810: GO 48812
48812: DISABLE
48813: LD_INT 0
48815: PPUSH
// begin for i := 1 to 5 do
48816: LD_ADDR_VAR 0 1
48820: PUSH
48821: DOUBLE
48822: LD_INT 1
48824: DEC
48825: ST_TO_ADDR
48826: LD_INT 5
48828: PUSH
48829: FOR_TO
48830: IFFALSE 48909
// begin uc_nation := nation_nature ;
48832: LD_ADDR_OWVAR 21
48836: PUSH
48837: LD_INT 0
48839: ST_TO_ADDR
// uc_side := 0 ;
48840: LD_ADDR_OWVAR 20
48844: PUSH
48845: LD_INT 0
48847: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
48848: LD_ADDR_OWVAR 29
48852: PUSH
48853: LD_INT 12
48855: PUSH
48856: LD_INT 12
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: ST_TO_ADDR
// hc_agressivity := 20 ;
48863: LD_ADDR_OWVAR 35
48867: PUSH
48868: LD_INT 20
48870: ST_TO_ADDR
// hc_class := class_tiger ;
48871: LD_ADDR_OWVAR 28
48875: PUSH
48876: LD_INT 14
48878: ST_TO_ADDR
// hc_gallery :=  ;
48879: LD_ADDR_OWVAR 33
48883: PUSH
48884: LD_STRING 
48886: ST_TO_ADDR
// hc_name :=  ;
48887: LD_ADDR_OWVAR 26
48891: PUSH
48892: LD_STRING 
48894: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
48895: CALL_OW 44
48899: PPUSH
48900: LD_INT 0
48902: PPUSH
48903: CALL_OW 51
// end ;
48907: GO 48829
48909: POP
48910: POP
// end ;
48911: PPOPN 1
48913: END
// every 0 0$1 trigger StreamModeActive and sBomb do
48914: LD_EXP 38
48918: PUSH
48919: LD_EXP 58
48923: AND
48924: IFFALSE 48933
48926: GO 48928
48928: DISABLE
// StreamSibBomb ;
48929: CALL 48934 0 0
48933: END
// export function StreamSibBomb ; var i , x , y ; begin
48934: LD_INT 0
48936: PPUSH
48937: PPUSH
48938: PPUSH
48939: PPUSH
// result := false ;
48940: LD_ADDR_VAR 0 1
48944: PUSH
48945: LD_INT 0
48947: ST_TO_ADDR
// for i := 1 to 16 do
48948: LD_ADDR_VAR 0 2
48952: PUSH
48953: DOUBLE
48954: LD_INT 1
48956: DEC
48957: ST_TO_ADDR
48958: LD_INT 16
48960: PUSH
48961: FOR_TO
48962: IFFALSE 49161
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
48964: LD_ADDR_VAR 0 3
48968: PUSH
48969: LD_INT 10
48971: PUSH
48972: LD_INT 20
48974: PUSH
48975: LD_INT 30
48977: PUSH
48978: LD_INT 40
48980: PUSH
48981: LD_INT 50
48983: PUSH
48984: LD_INT 60
48986: PUSH
48987: LD_INT 70
48989: PUSH
48990: LD_INT 80
48992: PUSH
48993: LD_INT 90
48995: PUSH
48996: LD_INT 100
48998: PUSH
48999: LD_INT 110
49001: PUSH
49002: LD_INT 120
49004: PUSH
49005: LD_INT 130
49007: PUSH
49008: LD_INT 140
49010: PUSH
49011: LD_INT 150
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: PPUSH
49034: LD_INT 15
49036: PPUSH
49037: CALL_OW 12
49041: ARRAY
49042: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
49043: LD_ADDR_VAR 0 4
49047: PUSH
49048: LD_INT 10
49050: PUSH
49051: LD_INT 20
49053: PUSH
49054: LD_INT 30
49056: PUSH
49057: LD_INT 40
49059: PUSH
49060: LD_INT 50
49062: PUSH
49063: LD_INT 60
49065: PUSH
49066: LD_INT 70
49068: PUSH
49069: LD_INT 80
49071: PUSH
49072: LD_INT 90
49074: PUSH
49075: LD_INT 100
49077: PUSH
49078: LD_INT 110
49080: PUSH
49081: LD_INT 120
49083: PUSH
49084: LD_INT 130
49086: PUSH
49087: LD_INT 140
49089: PUSH
49090: LD_INT 150
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: PPUSH
49113: LD_INT 15
49115: PPUSH
49116: CALL_OW 12
49120: ARRAY
49121: ST_TO_ADDR
// if ValidHex ( x , y ) then
49122: LD_VAR 0 3
49126: PPUSH
49127: LD_VAR 0 4
49131: PPUSH
49132: CALL_OW 488
49136: IFFALSE 49159
// begin result := [ x , y ] ;
49138: LD_ADDR_VAR 0 1
49142: PUSH
49143: LD_VAR 0 3
49147: PUSH
49148: LD_VAR 0 4
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: ST_TO_ADDR
// break ;
49157: GO 49161
// end ; end ;
49159: GO 48961
49161: POP
49162: POP
// if result then
49163: LD_VAR 0 1
49167: IFFALSE 49227
// begin ToLua ( playSibBomb() ) ;
49169: LD_STRING playSibBomb()
49171: PPUSH
49172: CALL_OW 559
// wait ( 0 0$14 ) ;
49176: LD_INT 490
49178: PPUSH
49179: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
49183: LD_VAR 0 1
49187: PUSH
49188: LD_INT 1
49190: ARRAY
49191: PPUSH
49192: LD_VAR 0 1
49196: PUSH
49197: LD_INT 2
49199: ARRAY
49200: PPUSH
49201: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
49205: LD_VAR 0 1
49209: PUSH
49210: LD_INT 1
49212: ARRAY
49213: PPUSH
49214: LD_VAR 0 1
49218: PUSH
49219: LD_INT 2
49221: ARRAY
49222: PPUSH
49223: CALL_OW 429
// end ; end ;
49227: LD_VAR 0 1
49231: RET
// every 0 0$1 trigger StreamModeActive and sReset do
49232: LD_EXP 38
49236: PUSH
49237: LD_EXP 60
49241: AND
49242: IFFALSE 49254
49244: GO 49246
49246: DISABLE
// YouLost (  ) ;
49247: LD_STRING 
49249: PPUSH
49250: CALL_OW 104
49254: END
// every 0 0$1 trigger StreamModeActive and sFog do
49255: LD_EXP 38
49259: PUSH
49260: LD_EXP 59
49264: AND
49265: IFFALSE 49279
49267: GO 49269
49269: DISABLE
// FogOff ( your_side ) ;
49270: LD_OWVAR 2
49274: PPUSH
49275: CALL_OW 344
49279: END
// every 0 0$1 trigger StreamModeActive and sSun do
49280: LD_EXP 38
49284: PUSH
49285: LD_EXP 61
49289: AND
49290: IFFALSE 49318
49292: GO 49294
49294: DISABLE
// begin solar_recharge_percent := 0 ;
49295: LD_ADDR_OWVAR 79
49299: PUSH
49300: LD_INT 0
49302: ST_TO_ADDR
// wait ( 5 5$00 ) ;
49303: LD_INT 10500
49305: PPUSH
49306: CALL_OW 67
// solar_recharge_percent := 100 ;
49310: LD_ADDR_OWVAR 79
49314: PUSH
49315: LD_INT 100
49317: ST_TO_ADDR
// end ;
49318: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
49319: LD_EXP 38
49323: PUSH
49324: LD_EXP 62
49328: AND
49329: IFFALSE 49568
49331: GO 49333
49333: DISABLE
49334: LD_INT 0
49336: PPUSH
49337: PPUSH
49338: PPUSH
// begin tmp := [ ] ;
49339: LD_ADDR_VAR 0 3
49343: PUSH
49344: EMPTY
49345: ST_TO_ADDR
// for i := 1 to 6 do
49346: LD_ADDR_VAR 0 1
49350: PUSH
49351: DOUBLE
49352: LD_INT 1
49354: DEC
49355: ST_TO_ADDR
49356: LD_INT 6
49358: PUSH
49359: FOR_TO
49360: IFFALSE 49465
// begin uc_nation := nation_nature ;
49362: LD_ADDR_OWVAR 21
49366: PUSH
49367: LD_INT 0
49369: ST_TO_ADDR
// uc_side := 0 ;
49370: LD_ADDR_OWVAR 20
49374: PUSH
49375: LD_INT 0
49377: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49378: LD_ADDR_OWVAR 29
49382: PUSH
49383: LD_INT 12
49385: PUSH
49386: LD_INT 12
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: ST_TO_ADDR
// hc_agressivity := 20 ;
49393: LD_ADDR_OWVAR 35
49397: PUSH
49398: LD_INT 20
49400: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
49401: LD_ADDR_OWVAR 28
49405: PUSH
49406: LD_INT 17
49408: ST_TO_ADDR
// hc_gallery :=  ;
49409: LD_ADDR_OWVAR 33
49413: PUSH
49414: LD_STRING 
49416: ST_TO_ADDR
// hc_name :=  ;
49417: LD_ADDR_OWVAR 26
49421: PUSH
49422: LD_STRING 
49424: ST_TO_ADDR
// un := CreateHuman ;
49425: LD_ADDR_VAR 0 2
49429: PUSH
49430: CALL_OW 44
49434: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
49435: LD_VAR 0 2
49439: PPUSH
49440: LD_INT 1
49442: PPUSH
49443: CALL_OW 51
// tmp := tmp ^ un ;
49447: LD_ADDR_VAR 0 3
49451: PUSH
49452: LD_VAR 0 3
49456: PUSH
49457: LD_VAR 0 2
49461: ADD
49462: ST_TO_ADDR
// end ;
49463: GO 49359
49465: POP
49466: POP
// repeat wait ( 0 0$1 ) ;
49467: LD_INT 35
49469: PPUSH
49470: CALL_OW 67
// for un in tmp do
49474: LD_ADDR_VAR 0 2
49478: PUSH
49479: LD_VAR 0 3
49483: PUSH
49484: FOR_IN
49485: IFFALSE 49559
// begin if IsDead ( un ) then
49487: LD_VAR 0 2
49491: PPUSH
49492: CALL_OW 301
49496: IFFALSE 49516
// begin tmp := tmp diff un ;
49498: LD_ADDR_VAR 0 3
49502: PUSH
49503: LD_VAR 0 3
49507: PUSH
49508: LD_VAR 0 2
49512: DIFF
49513: ST_TO_ADDR
// continue ;
49514: GO 49484
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
49516: LD_VAR 0 2
49520: PPUSH
49521: LD_INT 3
49523: PUSH
49524: LD_INT 22
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PPUSH
49538: CALL_OW 69
49542: PPUSH
49543: LD_VAR 0 2
49547: PPUSH
49548: CALL_OW 74
49552: PPUSH
49553: CALL_OW 115
// end ;
49557: GO 49484
49559: POP
49560: POP
// until not tmp ;
49561: LD_VAR 0 3
49565: NOT
49566: IFFALSE 49467
// end ;
49568: PPOPN 3
49570: END
// every 0 0$1 trigger StreamModeActive and sTroll do
49571: LD_EXP 38
49575: PUSH
49576: LD_EXP 63
49580: AND
49581: IFFALSE 49635
49583: GO 49585
49585: DISABLE
// begin ToLua ( displayTroll(); ) ;
49586: LD_STRING displayTroll();
49588: PPUSH
49589: CALL_OW 559
// wait ( 3 3$00 ) ;
49593: LD_INT 6300
49595: PPUSH
49596: CALL_OW 67
// ToLua ( hideTroll(); ) ;
49600: LD_STRING hideTroll();
49602: PPUSH
49603: CALL_OW 559
// wait ( 1 1$00 ) ;
49607: LD_INT 2100
49609: PPUSH
49610: CALL_OW 67
// ToLua ( displayTroll(); ) ;
49614: LD_STRING displayTroll();
49616: PPUSH
49617: CALL_OW 559
// wait ( 1 1$00 ) ;
49621: LD_INT 2100
49623: PPUSH
49624: CALL_OW 67
// ToLua ( hideTroll(); ) ;
49628: LD_STRING hideTroll();
49630: PPUSH
49631: CALL_OW 559
// end ;
49635: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
49636: LD_EXP 38
49640: PUSH
49641: LD_EXP 64
49645: AND
49646: IFFALSE 49709
49648: GO 49650
49650: DISABLE
49651: LD_INT 0
49653: PPUSH
// begin p := 0 ;
49654: LD_ADDR_VAR 0 1
49658: PUSH
49659: LD_INT 0
49661: ST_TO_ADDR
// repeat game_speed := 1 ;
49662: LD_ADDR_OWVAR 65
49666: PUSH
49667: LD_INT 1
49669: ST_TO_ADDR
// wait ( 0 0$1 ) ;
49670: LD_INT 35
49672: PPUSH
49673: CALL_OW 67
// p := p + 1 ;
49677: LD_ADDR_VAR 0 1
49681: PUSH
49682: LD_VAR 0 1
49686: PUSH
49687: LD_INT 1
49689: PLUS
49690: ST_TO_ADDR
// until p >= 60 ;
49691: LD_VAR 0 1
49695: PUSH
49696: LD_INT 60
49698: GREATEREQUAL
49699: IFFALSE 49662
// game_speed := 4 ;
49701: LD_ADDR_OWVAR 65
49705: PUSH
49706: LD_INT 4
49708: ST_TO_ADDR
// end ;
49709: PPOPN 1
49711: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
49712: LD_EXP 38
49716: PUSH
49717: LD_EXP 65
49721: AND
49722: IFFALSE 49868
49724: GO 49726
49726: DISABLE
49727: LD_INT 0
49729: PPUSH
49730: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49731: LD_ADDR_VAR 0 1
49735: PUSH
49736: LD_INT 22
49738: PUSH
49739: LD_OWVAR 2
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 30
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 30
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: LIST
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PPUSH
49780: CALL_OW 69
49784: ST_TO_ADDR
// if not depot then
49785: LD_VAR 0 1
49789: NOT
49790: IFFALSE 49794
// exit ;
49792: GO 49868
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
49794: LD_ADDR_VAR 0 2
49798: PUSH
49799: LD_VAR 0 1
49803: PUSH
49804: LD_INT 1
49806: PPUSH
49807: LD_VAR 0 1
49811: PPUSH
49812: CALL_OW 12
49816: ARRAY
49817: PPUSH
49818: CALL_OW 274
49822: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
49823: LD_VAR 0 2
49827: PPUSH
49828: LD_INT 1
49830: PPUSH
49831: LD_INT 0
49833: PPUSH
49834: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
49838: LD_VAR 0 2
49842: PPUSH
49843: LD_INT 2
49845: PPUSH
49846: LD_INT 0
49848: PPUSH
49849: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
49853: LD_VAR 0 2
49857: PPUSH
49858: LD_INT 3
49860: PPUSH
49861: LD_INT 0
49863: PPUSH
49864: CALL_OW 277
// end ;
49868: PPOPN 2
49870: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
49871: LD_EXP 38
49875: PUSH
49876: LD_EXP 66
49880: AND
49881: IFFALSE 49978
49883: GO 49885
49885: DISABLE
49886: LD_INT 0
49888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
49889: LD_ADDR_VAR 0 1
49893: PUSH
49894: LD_INT 22
49896: PUSH
49897: LD_OWVAR 2
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 21
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: LD_INT 23
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: LIST
49937: PPUSH
49938: CALL_OW 69
49942: ST_TO_ADDR
// if not tmp then
49943: LD_VAR 0 1
49947: NOT
49948: IFFALSE 49952
// exit ;
49950: GO 49978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
49952: LD_VAR 0 1
49956: PUSH
49957: LD_INT 1
49959: PPUSH
49960: LD_VAR 0 1
49964: PPUSH
49965: CALL_OW 12
49969: ARRAY
49970: PPUSH
49971: LD_INT 200
49973: PPUSH
49974: CALL_OW 234
// end ;
49978: PPOPN 1
49980: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
49981: LD_EXP 38
49985: PUSH
49986: LD_EXP 67
49990: AND
49991: IFFALSE 50070
49993: GO 49995
49995: DISABLE
49996: LD_INT 0
49998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
49999: LD_ADDR_VAR 0 1
50003: PUSH
50004: LD_INT 22
50006: PUSH
50007: LD_OWVAR 2
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 21
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PPUSH
50030: CALL_OW 69
50034: ST_TO_ADDR
// if not tmp then
50035: LD_VAR 0 1
50039: NOT
50040: IFFALSE 50044
// exit ;
50042: GO 50070
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
50044: LD_VAR 0 1
50048: PUSH
50049: LD_INT 1
50051: PPUSH
50052: LD_VAR 0 1
50056: PPUSH
50057: CALL_OW 12
50061: ARRAY
50062: PPUSH
50063: LD_INT 60
50065: PPUSH
50066: CALL_OW 234
// end ;
50070: PPOPN 1
50072: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
50073: LD_EXP 38
50077: PUSH
50078: LD_EXP 68
50082: AND
50083: IFFALSE 50182
50085: GO 50087
50087: DISABLE
50088: LD_INT 0
50090: PPUSH
50091: PPUSH
// begin enable ;
50092: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
50093: LD_ADDR_VAR 0 1
50097: PUSH
50098: LD_INT 22
50100: PUSH
50101: LD_OWVAR 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 61
50112: PUSH
50113: EMPTY
50114: LIST
50115: PUSH
50116: LD_INT 33
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: LIST
50130: PPUSH
50131: CALL_OW 69
50135: ST_TO_ADDR
// if not tmp then
50136: LD_VAR 0 1
50140: NOT
50141: IFFALSE 50145
// exit ;
50143: GO 50182
// for i in tmp do
50145: LD_ADDR_VAR 0 2
50149: PUSH
50150: LD_VAR 0 1
50154: PUSH
50155: FOR_IN
50156: IFFALSE 50180
// if IsControledBy ( i ) then
50158: LD_VAR 0 2
50162: PPUSH
50163: CALL_OW 312
50167: IFFALSE 50178
// ComUnlink ( i ) ;
50169: LD_VAR 0 2
50173: PPUSH
50174: CALL_OW 136
50178: GO 50155
50180: POP
50181: POP
// end ;
50182: PPOPN 2
50184: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
50185: LD_EXP 38
50189: PUSH
50190: LD_EXP 69
50194: AND
50195: IFFALSE 50335
50197: GO 50199
50199: DISABLE
50200: LD_INT 0
50202: PPUSH
50203: PPUSH
// begin ToLua ( displayPowell(); ) ;
50204: LD_STRING displayPowell();
50206: PPUSH
50207: CALL_OW 559
// uc_side := 0 ;
50211: LD_ADDR_OWVAR 20
50215: PUSH
50216: LD_INT 0
50218: ST_TO_ADDR
// uc_nation := 2 ;
50219: LD_ADDR_OWVAR 21
50223: PUSH
50224: LD_INT 2
50226: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
50227: LD_ADDR_OWVAR 37
50231: PUSH
50232: LD_INT 14
50234: ST_TO_ADDR
// vc_engine := engine_siberite ;
50235: LD_ADDR_OWVAR 39
50239: PUSH
50240: LD_INT 3
50242: ST_TO_ADDR
// vc_control := control_apeman ;
50243: LD_ADDR_OWVAR 38
50247: PUSH
50248: LD_INT 5
50250: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
50251: LD_ADDR_OWVAR 40
50255: PUSH
50256: LD_INT 29
50258: ST_TO_ADDR
// un := CreateVehicle ;
50259: LD_ADDR_VAR 0 2
50263: PUSH
50264: CALL_OW 45
50268: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
50269: LD_VAR 0 2
50273: PPUSH
50274: LD_INT 1
50276: PPUSH
50277: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
50281: LD_INT 35
50283: PPUSH
50284: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
50288: LD_VAR 0 2
50292: PPUSH
50293: LD_INT 22
50295: PUSH
50296: LD_OWVAR 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PPUSH
50305: CALL_OW 69
50309: PPUSH
50310: LD_VAR 0 2
50314: PPUSH
50315: CALL_OW 74
50319: PPUSH
50320: CALL_OW 115
// until IsDead ( un ) ;
50324: LD_VAR 0 2
50328: PPUSH
50329: CALL_OW 301
50333: IFFALSE 50281
// end ;
50335: PPOPN 2
50337: END
// every 0 0$1 trigger StreamModeActive and sStu do
50338: LD_EXP 38
50342: PUSH
50343: LD_EXP 77
50347: AND
50348: IFFALSE 50364
50350: GO 50352
50352: DISABLE
// begin ToLua ( displayStucuk(); ) ;
50353: LD_STRING displayStucuk();
50355: PPUSH
50356: CALL_OW 559
// ResetFog ;
50360: CALL_OW 335
// end ;
50364: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
50365: LD_EXP 38
50369: PUSH
50370: LD_EXP 70
50374: AND
50375: IFFALSE 50516
50377: GO 50379
50379: DISABLE
50380: LD_INT 0
50382: PPUSH
50383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50384: LD_ADDR_VAR 0 2
50388: PUSH
50389: LD_INT 22
50391: PUSH
50392: LD_OWVAR 2
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 21
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PPUSH
50415: CALL_OW 69
50419: ST_TO_ADDR
// if not tmp then
50420: LD_VAR 0 2
50424: NOT
50425: IFFALSE 50429
// exit ;
50427: GO 50516
// un := tmp [ rand ( 1 , tmp ) ] ;
50429: LD_ADDR_VAR 0 1
50433: PUSH
50434: LD_VAR 0 2
50438: PUSH
50439: LD_INT 1
50441: PPUSH
50442: LD_VAR 0 2
50446: PPUSH
50447: CALL_OW 12
50451: ARRAY
50452: ST_TO_ADDR
// SetSide ( un , 0 ) ;
50453: LD_VAR 0 1
50457: PPUSH
50458: LD_INT 0
50460: PPUSH
50461: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
50465: LD_VAR 0 1
50469: PPUSH
50470: LD_OWVAR 3
50474: PUSH
50475: LD_VAR 0 1
50479: DIFF
50480: PPUSH
50481: LD_VAR 0 1
50485: PPUSH
50486: CALL_OW 74
50490: PPUSH
50491: CALL_OW 115
// wait ( 0 0$20 ) ;
50495: LD_INT 700
50497: PPUSH
50498: CALL_OW 67
// SetSide ( un , your_side ) ;
50502: LD_VAR 0 1
50506: PPUSH
50507: LD_OWVAR 2
50511: PPUSH
50512: CALL_OW 235
// end ;
50516: PPOPN 2
50518: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
50519: LD_EXP 38
50523: PUSH
50524: LD_EXP 71
50528: AND
50529: IFFALSE 50635
50531: GO 50533
50533: DISABLE
50534: LD_INT 0
50536: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50537: LD_ADDR_VAR 0 1
50541: PUSH
50542: LD_INT 22
50544: PUSH
50545: LD_OWVAR 2
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 30
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 30
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PPUSH
50586: CALL_OW 69
50590: ST_TO_ADDR
// if not depot then
50591: LD_VAR 0 1
50595: NOT
50596: IFFALSE 50600
// exit ;
50598: GO 50635
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
50600: LD_VAR 0 1
50604: PUSH
50605: LD_INT 1
50607: ARRAY
50608: PPUSH
50609: CALL_OW 250
50613: PPUSH
50614: LD_VAR 0 1
50618: PUSH
50619: LD_INT 1
50621: ARRAY
50622: PPUSH
50623: CALL_OW 251
50627: PPUSH
50628: LD_INT 70
50630: PPUSH
50631: CALL_OW 495
// end ;
50635: PPOPN 1
50637: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
50638: LD_EXP 38
50642: PUSH
50643: LD_EXP 72
50647: AND
50648: IFFALSE 50859
50650: GO 50652
50652: DISABLE
50653: LD_INT 0
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50660: LD_ADDR_VAR 0 5
50664: PUSH
50665: LD_INT 22
50667: PUSH
50668: LD_OWVAR 2
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 21
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PPUSH
50691: CALL_OW 69
50695: ST_TO_ADDR
// if not tmp then
50696: LD_VAR 0 5
50700: NOT
50701: IFFALSE 50705
// exit ;
50703: GO 50859
// for i in tmp do
50705: LD_ADDR_VAR 0 1
50709: PUSH
50710: LD_VAR 0 5
50714: PUSH
50715: FOR_IN
50716: IFFALSE 50857
// begin d := rand ( 0 , 5 ) ;
50718: LD_ADDR_VAR 0 4
50722: PUSH
50723: LD_INT 0
50725: PPUSH
50726: LD_INT 5
50728: PPUSH
50729: CALL_OW 12
50733: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
50734: LD_ADDR_VAR 0 2
50738: PUSH
50739: LD_VAR 0 1
50743: PPUSH
50744: CALL_OW 250
50748: PPUSH
50749: LD_VAR 0 4
50753: PPUSH
50754: LD_INT 3
50756: PPUSH
50757: LD_INT 12
50759: PPUSH
50760: CALL_OW 12
50764: PPUSH
50765: CALL_OW 272
50769: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
50770: LD_ADDR_VAR 0 3
50774: PUSH
50775: LD_VAR 0 1
50779: PPUSH
50780: CALL_OW 251
50784: PPUSH
50785: LD_VAR 0 4
50789: PPUSH
50790: LD_INT 3
50792: PPUSH
50793: LD_INT 12
50795: PPUSH
50796: CALL_OW 12
50800: PPUSH
50801: CALL_OW 273
50805: ST_TO_ADDR
// if ValidHex ( x , y ) then
50806: LD_VAR 0 2
50810: PPUSH
50811: LD_VAR 0 3
50815: PPUSH
50816: CALL_OW 488
50820: IFFALSE 50855
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
50822: LD_VAR 0 1
50826: PPUSH
50827: LD_VAR 0 2
50831: PPUSH
50832: LD_VAR 0 3
50836: PPUSH
50837: LD_INT 3
50839: PPUSH
50840: LD_INT 6
50842: PPUSH
50843: CALL_OW 12
50847: PPUSH
50848: LD_INT 1
50850: PPUSH
50851: CALL_OW 483
// end ;
50855: GO 50715
50857: POP
50858: POP
// end ;
50859: PPOPN 5
50861: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
50862: LD_EXP 38
50866: PUSH
50867: LD_EXP 73
50871: AND
50872: IFFALSE 50966
50874: GO 50876
50876: DISABLE
50877: LD_INT 0
50879: PPUSH
50880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
50881: LD_ADDR_VAR 0 2
50885: PUSH
50886: LD_INT 22
50888: PUSH
50889: LD_OWVAR 2
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 32
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 21
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: PPUSH
50923: CALL_OW 69
50927: ST_TO_ADDR
// if not tmp then
50928: LD_VAR 0 2
50932: NOT
50933: IFFALSE 50937
// exit ;
50935: GO 50966
// for i in tmp do
50937: LD_ADDR_VAR 0 1
50941: PUSH
50942: LD_VAR 0 2
50946: PUSH
50947: FOR_IN
50948: IFFALSE 50964
// SetFuel ( i , 0 ) ;
50950: LD_VAR 0 1
50954: PPUSH
50955: LD_INT 0
50957: PPUSH
50958: CALL_OW 240
50962: GO 50947
50964: POP
50965: POP
// end ;
50966: PPOPN 2
50968: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
50969: LD_EXP 38
50973: PUSH
50974: LD_EXP 74
50978: AND
50979: IFFALSE 51045
50981: GO 50983
50983: DISABLE
50984: LD_INT 0
50986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
50987: LD_ADDR_VAR 0 1
50991: PUSH
50992: LD_INT 22
50994: PUSH
50995: LD_OWVAR 2
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 30
51006: PUSH
51007: LD_INT 29
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PPUSH
51018: CALL_OW 69
51022: ST_TO_ADDR
// if not tmp then
51023: LD_VAR 0 1
51027: NOT
51028: IFFALSE 51032
// exit ;
51030: GO 51045
// DestroyUnit ( tmp [ 1 ] ) ;
51032: LD_VAR 0 1
51036: PUSH
51037: LD_INT 1
51039: ARRAY
51040: PPUSH
51041: CALL_OW 65
// end ;
51045: PPOPN 1
51047: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
51048: LD_EXP 38
51052: PUSH
51053: LD_EXP 76
51057: AND
51058: IFFALSE 51187
51060: GO 51062
51062: DISABLE
51063: LD_INT 0
51065: PPUSH
// begin uc_side := 0 ;
51066: LD_ADDR_OWVAR 20
51070: PUSH
51071: LD_INT 0
51073: ST_TO_ADDR
// uc_nation := nation_arabian ;
51074: LD_ADDR_OWVAR 21
51078: PUSH
51079: LD_INT 2
51081: ST_TO_ADDR
// hc_gallery :=  ;
51082: LD_ADDR_OWVAR 33
51086: PUSH
51087: LD_STRING 
51089: ST_TO_ADDR
// hc_name :=  ;
51090: LD_ADDR_OWVAR 26
51094: PUSH
51095: LD_STRING 
51097: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
51098: LD_INT 1
51100: PPUSH
51101: LD_INT 11
51103: PPUSH
51104: LD_INT 10
51106: PPUSH
51107: CALL_OW 380
// un := CreateHuman ;
51111: LD_ADDR_VAR 0 1
51115: PUSH
51116: CALL_OW 44
51120: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51121: LD_VAR 0 1
51125: PPUSH
51126: LD_INT 1
51128: PPUSH
51129: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51133: LD_INT 35
51135: PPUSH
51136: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51140: LD_VAR 0 1
51144: PPUSH
51145: LD_INT 22
51147: PUSH
51148: LD_OWVAR 2
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PPUSH
51157: CALL_OW 69
51161: PPUSH
51162: LD_VAR 0 1
51166: PPUSH
51167: CALL_OW 74
51171: PPUSH
51172: CALL_OW 115
// until IsDead ( un ) ;
51176: LD_VAR 0 1
51180: PPUSH
51181: CALL_OW 301
51185: IFFALSE 51133
// end ;
51187: PPOPN 1
51189: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
51190: LD_EXP 38
51194: PUSH
51195: LD_EXP 78
51199: AND
51200: IFFALSE 51212
51202: GO 51204
51204: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
51205: LD_STRING earthquake(getX(game), 0, 32)
51207: PPUSH
51208: CALL_OW 559
51212: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
51213: LD_EXP 38
51217: PUSH
51218: LD_EXP 79
51222: AND
51223: IFFALSE 51314
51225: GO 51227
51227: DISABLE
51228: LD_INT 0
51230: PPUSH
// begin enable ;
51231: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
51232: LD_ADDR_VAR 0 1
51236: PUSH
51237: LD_INT 22
51239: PUSH
51240: LD_OWVAR 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 21
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 33
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: LIST
51273: PPUSH
51274: CALL_OW 69
51278: ST_TO_ADDR
// if not tmp then
51279: LD_VAR 0 1
51283: NOT
51284: IFFALSE 51288
// exit ;
51286: GO 51314
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
51288: LD_VAR 0 1
51292: PUSH
51293: LD_INT 1
51295: PPUSH
51296: LD_VAR 0 1
51300: PPUSH
51301: CALL_OW 12
51305: ARRAY
51306: PPUSH
51307: LD_INT 1
51309: PPUSH
51310: CALL_OW 234
// end ;
51314: PPOPN 1
51316: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
51317: LD_EXP 38
51321: PUSH
51322: LD_EXP 80
51326: AND
51327: IFFALSE 51468
51329: GO 51331
51331: DISABLE
51332: LD_INT 0
51334: PPUSH
51335: PPUSH
51336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51337: LD_ADDR_VAR 0 3
51341: PUSH
51342: LD_INT 22
51344: PUSH
51345: LD_OWVAR 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 25
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PPUSH
51368: CALL_OW 69
51372: ST_TO_ADDR
// if not tmp then
51373: LD_VAR 0 3
51377: NOT
51378: IFFALSE 51382
// exit ;
51380: GO 51468
// un := tmp [ rand ( 1 , tmp ) ] ;
51382: LD_ADDR_VAR 0 2
51386: PUSH
51387: LD_VAR 0 3
51391: PUSH
51392: LD_INT 1
51394: PPUSH
51395: LD_VAR 0 3
51399: PPUSH
51400: CALL_OW 12
51404: ARRAY
51405: ST_TO_ADDR
// if Crawls ( un ) then
51406: LD_VAR 0 2
51410: PPUSH
51411: CALL_OW 318
51415: IFFALSE 51426
// ComWalk ( un ) ;
51417: LD_VAR 0 2
51421: PPUSH
51422: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
51426: LD_VAR 0 2
51430: PPUSH
51431: LD_INT 9
51433: PPUSH
51434: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
51438: LD_INT 28
51440: PPUSH
51441: LD_OWVAR 2
51445: PPUSH
51446: LD_INT 2
51448: PPUSH
51449: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
51453: LD_INT 29
51455: PPUSH
51456: LD_OWVAR 2
51460: PPUSH
51461: LD_INT 2
51463: PPUSH
51464: CALL_OW 322
// end ;
51468: PPOPN 3
51470: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
51471: LD_EXP 38
51475: PUSH
51476: LD_EXP 81
51480: AND
51481: IFFALSE 51592
51483: GO 51485
51485: DISABLE
51486: LD_INT 0
51488: PPUSH
51489: PPUSH
51490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51491: LD_ADDR_VAR 0 3
51495: PUSH
51496: LD_INT 22
51498: PUSH
51499: LD_OWVAR 2
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 25
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PPUSH
51522: CALL_OW 69
51526: ST_TO_ADDR
// if not tmp then
51527: LD_VAR 0 3
51531: NOT
51532: IFFALSE 51536
// exit ;
51534: GO 51592
// un := tmp [ rand ( 1 , tmp ) ] ;
51536: LD_ADDR_VAR 0 2
51540: PUSH
51541: LD_VAR 0 3
51545: PUSH
51546: LD_INT 1
51548: PPUSH
51549: LD_VAR 0 3
51553: PPUSH
51554: CALL_OW 12
51558: ARRAY
51559: ST_TO_ADDR
// if Crawls ( un ) then
51560: LD_VAR 0 2
51564: PPUSH
51565: CALL_OW 318
51569: IFFALSE 51580
// ComWalk ( un ) ;
51571: LD_VAR 0 2
51575: PPUSH
51576: CALL_OW 138
// SetClass ( un , class_mortar ) ;
51580: LD_VAR 0 2
51584: PPUSH
51585: LD_INT 8
51587: PPUSH
51588: CALL_OW 336
// end ;
51592: PPOPN 3
51594: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
51595: LD_EXP 38
51599: PUSH
51600: LD_EXP 82
51604: AND
51605: IFFALSE 51749
51607: GO 51609
51609: DISABLE
51610: LD_INT 0
51612: PPUSH
51613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
51614: LD_ADDR_VAR 0 2
51618: PUSH
51619: LD_INT 22
51621: PUSH
51622: LD_OWVAR 2
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 21
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 34
51646: PUSH
51647: LD_INT 12
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 34
51656: PUSH
51657: LD_INT 51
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 34
51666: PUSH
51667: LD_INT 32
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: LIST
51684: PPUSH
51685: CALL_OW 69
51689: ST_TO_ADDR
// if not tmp then
51690: LD_VAR 0 2
51694: NOT
51695: IFFALSE 51699
// exit ;
51697: GO 51749
// for i in tmp do
51699: LD_ADDR_VAR 0 1
51703: PUSH
51704: LD_VAR 0 2
51708: PUSH
51709: FOR_IN
51710: IFFALSE 51747
// if GetCargo ( i , mat_artifact ) = 0 then
51712: LD_VAR 0 1
51716: PPUSH
51717: LD_INT 4
51719: PPUSH
51720: CALL_OW 289
51724: PUSH
51725: LD_INT 0
51727: EQUAL
51728: IFFALSE 51745
// SetCargo ( i , mat_siberit , 100 ) ;
51730: LD_VAR 0 1
51734: PPUSH
51735: LD_INT 3
51737: PPUSH
51738: LD_INT 100
51740: PPUSH
51741: CALL_OW 290
51745: GO 51709
51747: POP
51748: POP
// end ;
51749: PPOPN 2
51751: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
51752: LD_EXP 38
51756: PUSH
51757: LD_EXP 83
51761: AND
51762: IFFALSE 51945
51764: GO 51766
51766: DISABLE
51767: LD_INT 0
51769: PPUSH
51770: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
51771: LD_ADDR_VAR 0 2
51775: PUSH
51776: LD_INT 22
51778: PUSH
51779: LD_OWVAR 2
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PPUSH
51788: CALL_OW 69
51792: ST_TO_ADDR
// if not tmp then
51793: LD_VAR 0 2
51797: NOT
51798: IFFALSE 51802
// exit ;
51800: GO 51945
// for i := 1 to 2 do
51802: LD_ADDR_VAR 0 1
51806: PUSH
51807: DOUBLE
51808: LD_INT 1
51810: DEC
51811: ST_TO_ADDR
51812: LD_INT 2
51814: PUSH
51815: FOR_TO
51816: IFFALSE 51943
// begin uc_side := your_side ;
51818: LD_ADDR_OWVAR 20
51822: PUSH
51823: LD_OWVAR 2
51827: ST_TO_ADDR
// uc_nation := nation_american ;
51828: LD_ADDR_OWVAR 21
51832: PUSH
51833: LD_INT 1
51835: ST_TO_ADDR
// vc_chassis := us_morphling ;
51836: LD_ADDR_OWVAR 37
51840: PUSH
51841: LD_INT 5
51843: ST_TO_ADDR
// vc_engine := engine_siberite ;
51844: LD_ADDR_OWVAR 39
51848: PUSH
51849: LD_INT 3
51851: ST_TO_ADDR
// vc_control := control_computer ;
51852: LD_ADDR_OWVAR 38
51856: PUSH
51857: LD_INT 3
51859: ST_TO_ADDR
// vc_weapon := us_double_laser ;
51860: LD_ADDR_OWVAR 40
51864: PUSH
51865: LD_INT 10
51867: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
51868: LD_VAR 0 2
51872: PUSH
51873: LD_INT 1
51875: ARRAY
51876: PPUSH
51877: CALL_OW 310
51881: NOT
51882: IFFALSE 51929
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
51884: CALL_OW 45
51888: PPUSH
51889: LD_VAR 0 2
51893: PUSH
51894: LD_INT 1
51896: ARRAY
51897: PPUSH
51898: CALL_OW 250
51902: PPUSH
51903: LD_VAR 0 2
51907: PUSH
51908: LD_INT 1
51910: ARRAY
51911: PPUSH
51912: CALL_OW 251
51916: PPUSH
51917: LD_INT 12
51919: PPUSH
51920: LD_INT 1
51922: PPUSH
51923: CALL_OW 50
51927: GO 51941
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
51929: CALL_OW 45
51933: PPUSH
51934: LD_INT 1
51936: PPUSH
51937: CALL_OW 51
// end ;
51941: GO 51815
51943: POP
51944: POP
// end ;
51945: PPOPN 2
51947: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
51948: LD_EXP 38
51952: PUSH
51953: LD_EXP 84
51957: AND
51958: IFFALSE 52180
51960: GO 51962
51962: DISABLE
51963: LD_INT 0
51965: PPUSH
51966: PPUSH
51967: PPUSH
51968: PPUSH
51969: PPUSH
51970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
51971: LD_ADDR_VAR 0 6
51975: PUSH
51976: LD_INT 22
51978: PUSH
51979: LD_OWVAR 2
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 21
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: LD_INT 23
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: LIST
52019: PPUSH
52020: CALL_OW 69
52024: ST_TO_ADDR
// if not tmp then
52025: LD_VAR 0 6
52029: NOT
52030: IFFALSE 52034
// exit ;
52032: GO 52180
// s1 := rand ( 1 , 4 ) ;
52034: LD_ADDR_VAR 0 2
52038: PUSH
52039: LD_INT 1
52041: PPUSH
52042: LD_INT 4
52044: PPUSH
52045: CALL_OW 12
52049: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
52050: LD_ADDR_VAR 0 4
52054: PUSH
52055: LD_VAR 0 6
52059: PUSH
52060: LD_INT 1
52062: ARRAY
52063: PPUSH
52064: LD_VAR 0 2
52068: PPUSH
52069: CALL_OW 259
52073: ST_TO_ADDR
// if s1 = 1 then
52074: LD_VAR 0 2
52078: PUSH
52079: LD_INT 1
52081: EQUAL
52082: IFFALSE 52102
// s2 := rand ( 2 , 4 ) else
52084: LD_ADDR_VAR 0 3
52088: PUSH
52089: LD_INT 2
52091: PPUSH
52092: LD_INT 4
52094: PPUSH
52095: CALL_OW 12
52099: ST_TO_ADDR
52100: GO 52110
// s2 := 1 ;
52102: LD_ADDR_VAR 0 3
52106: PUSH
52107: LD_INT 1
52109: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
52110: LD_ADDR_VAR 0 5
52114: PUSH
52115: LD_VAR 0 6
52119: PUSH
52120: LD_INT 1
52122: ARRAY
52123: PPUSH
52124: LD_VAR 0 3
52128: PPUSH
52129: CALL_OW 259
52133: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
52134: LD_VAR 0 6
52138: PUSH
52139: LD_INT 1
52141: ARRAY
52142: PPUSH
52143: LD_VAR 0 2
52147: PPUSH
52148: LD_VAR 0 5
52152: PPUSH
52153: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
52157: LD_VAR 0 6
52161: PUSH
52162: LD_INT 1
52164: ARRAY
52165: PPUSH
52166: LD_VAR 0 3
52170: PPUSH
52171: LD_VAR 0 4
52175: PPUSH
52176: CALL_OW 237
// end ;
52180: PPOPN 6
52182: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
52183: LD_EXP 38
52187: PUSH
52188: LD_EXP 85
52192: AND
52193: IFFALSE 52272
52195: GO 52197
52197: DISABLE
52198: LD_INT 0
52200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
52201: LD_ADDR_VAR 0 1
52205: PUSH
52206: LD_INT 22
52208: PUSH
52209: LD_OWVAR 2
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 30
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PPUSH
52232: CALL_OW 69
52236: ST_TO_ADDR
// if not tmp then
52237: LD_VAR 0 1
52241: NOT
52242: IFFALSE 52246
// exit ;
52244: GO 52272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52246: LD_VAR 0 1
52250: PUSH
52251: LD_INT 1
52253: PPUSH
52254: LD_VAR 0 1
52258: PPUSH
52259: CALL_OW 12
52263: ARRAY
52264: PPUSH
52265: LD_INT 1
52267: PPUSH
52268: CALL_OW 234
// end ;
52272: PPOPN 1
52274: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
52275: LD_EXP 38
52279: PUSH
52280: LD_EXP 86
52284: AND
52285: IFFALSE 52397
52287: GO 52289
52289: DISABLE
52290: LD_INT 0
52292: PPUSH
52293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
52294: LD_ADDR_VAR 0 2
52298: PUSH
52299: LD_INT 22
52301: PUSH
52302: LD_OWVAR 2
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: LD_INT 30
52316: PUSH
52317: LD_INT 27
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 30
52326: PUSH
52327: LD_INT 26
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 30
52336: PUSH
52337: LD_INT 28
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PPUSH
52354: CALL_OW 69
52358: ST_TO_ADDR
// if not tmp then
52359: LD_VAR 0 2
52363: NOT
52364: IFFALSE 52368
// exit ;
52366: GO 52397
// for i in tmp do
52368: LD_ADDR_VAR 0 1
52372: PUSH
52373: LD_VAR 0 2
52377: PUSH
52378: FOR_IN
52379: IFFALSE 52395
// SetLives ( i , 1 ) ;
52381: LD_VAR 0 1
52385: PPUSH
52386: LD_INT 1
52388: PPUSH
52389: CALL_OW 234
52393: GO 52378
52395: POP
52396: POP
// end ;
52397: PPOPN 2
52399: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
52400: LD_EXP 38
52404: PUSH
52405: LD_EXP 87
52409: AND
52410: IFFALSE 52684
52412: GO 52414
52414: DISABLE
52415: LD_INT 0
52417: PPUSH
52418: PPUSH
52419: PPUSH
// begin i := rand ( 1 , 7 ) ;
52420: LD_ADDR_VAR 0 1
52424: PUSH
52425: LD_INT 1
52427: PPUSH
52428: LD_INT 7
52430: PPUSH
52431: CALL_OW 12
52435: ST_TO_ADDR
// case i of 1 :
52436: LD_VAR 0 1
52440: PUSH
52441: LD_INT 1
52443: DOUBLE
52444: EQUAL
52445: IFTRUE 52449
52447: GO 52459
52449: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
52450: LD_STRING earthquake(getX(game), 0, 32)
52452: PPUSH
52453: CALL_OW 559
52457: GO 52684
52459: LD_INT 2
52461: DOUBLE
52462: EQUAL
52463: IFTRUE 52467
52465: GO 52481
52467: POP
// begin ToLua ( displayStucuk(); ) ;
52468: LD_STRING displayStucuk();
52470: PPUSH
52471: CALL_OW 559
// ResetFog ;
52475: CALL_OW 335
// end ; 3 :
52479: GO 52684
52481: LD_INT 3
52483: DOUBLE
52484: EQUAL
52485: IFTRUE 52489
52487: GO 52593
52489: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52490: LD_ADDR_VAR 0 2
52494: PUSH
52495: LD_INT 22
52497: PUSH
52498: LD_OWVAR 2
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 25
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PPUSH
52521: CALL_OW 69
52525: ST_TO_ADDR
// if not tmp then
52526: LD_VAR 0 2
52530: NOT
52531: IFFALSE 52535
// exit ;
52533: GO 52684
// un := tmp [ rand ( 1 , tmp ) ] ;
52535: LD_ADDR_VAR 0 3
52539: PUSH
52540: LD_VAR 0 2
52544: PUSH
52545: LD_INT 1
52547: PPUSH
52548: LD_VAR 0 2
52552: PPUSH
52553: CALL_OW 12
52557: ARRAY
52558: ST_TO_ADDR
// if Crawls ( un ) then
52559: LD_VAR 0 3
52563: PPUSH
52564: CALL_OW 318
52568: IFFALSE 52579
// ComWalk ( un ) ;
52570: LD_VAR 0 3
52574: PPUSH
52575: CALL_OW 138
// SetClass ( un , class_mortar ) ;
52579: LD_VAR 0 3
52583: PPUSH
52584: LD_INT 8
52586: PPUSH
52587: CALL_OW 336
// end ; 4 :
52591: GO 52684
52593: LD_INT 4
52595: DOUBLE
52596: EQUAL
52597: IFTRUE 52601
52599: GO 52662
52601: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
52602: LD_ADDR_VAR 0 2
52606: PUSH
52607: LD_INT 22
52609: PUSH
52610: LD_OWVAR 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 30
52621: PUSH
52622: LD_INT 29
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PPUSH
52633: CALL_OW 69
52637: ST_TO_ADDR
// if not tmp then
52638: LD_VAR 0 2
52642: NOT
52643: IFFALSE 52647
// exit ;
52645: GO 52684
// DestroyUnit ( tmp [ 1 ] ) ;
52647: LD_VAR 0 2
52651: PUSH
52652: LD_INT 1
52654: ARRAY
52655: PPUSH
52656: CALL_OW 65
// end ; 5 .. 7 :
52660: GO 52684
52662: LD_INT 5
52664: DOUBLE
52665: GREATEREQUAL
52666: IFFALSE 52674
52668: LD_INT 7
52670: DOUBLE
52671: LESSEQUAL
52672: IFTRUE 52676
52674: GO 52683
52676: POP
// StreamSibBomb ; end ;
52677: CALL 48934 0 0
52681: GO 52684
52683: POP
// end ;
52684: PPOPN 3
52686: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
52687: LD_EXP 38
52691: PUSH
52692: LD_EXP 88
52696: AND
52697: IFFALSE 52853
52699: GO 52701
52701: DISABLE
52702: LD_INT 0
52704: PPUSH
52705: PPUSH
52706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
52707: LD_ADDR_VAR 0 2
52711: PUSH
52712: LD_INT 81
52714: PUSH
52715: LD_OWVAR 2
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: LD_INT 21
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 21
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: LIST
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PPUSH
52756: CALL_OW 69
52760: ST_TO_ADDR
// if not tmp then
52761: LD_VAR 0 2
52765: NOT
52766: IFFALSE 52770
// exit ;
52768: GO 52853
// p := 0 ;
52770: LD_ADDR_VAR 0 3
52774: PUSH
52775: LD_INT 0
52777: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
52778: LD_INT 35
52780: PPUSH
52781: CALL_OW 67
// p := p + 1 ;
52785: LD_ADDR_VAR 0 3
52789: PUSH
52790: LD_VAR 0 3
52794: PUSH
52795: LD_INT 1
52797: PLUS
52798: ST_TO_ADDR
// for i in tmp do
52799: LD_ADDR_VAR 0 1
52803: PUSH
52804: LD_VAR 0 2
52808: PUSH
52809: FOR_IN
52810: IFFALSE 52841
// if GetLives ( i ) < 1000 then
52812: LD_VAR 0 1
52816: PPUSH
52817: CALL_OW 256
52821: PUSH
52822: LD_INT 1000
52824: LESS
52825: IFFALSE 52839
// SetLives ( i , 1000 ) ;
52827: LD_VAR 0 1
52831: PPUSH
52832: LD_INT 1000
52834: PPUSH
52835: CALL_OW 234
52839: GO 52809
52841: POP
52842: POP
// until p > 20 ;
52843: LD_VAR 0 3
52847: PUSH
52848: LD_INT 20
52850: GREATER
52851: IFFALSE 52778
// end ;
52853: PPOPN 3
52855: END
// every 0 0$1 trigger StreamModeActive and sTime do
52856: LD_EXP 38
52860: PUSH
52861: LD_EXP 89
52865: AND
52866: IFFALSE 52901
52868: GO 52870
52870: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
52871: LD_INT 28
52873: PPUSH
52874: LD_OWVAR 2
52878: PPUSH
52879: LD_INT 2
52881: PPUSH
52882: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
52886: LD_INT 30
52888: PPUSH
52889: LD_OWVAR 2
52893: PPUSH
52894: LD_INT 2
52896: PPUSH
52897: CALL_OW 322
// end ;
52901: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
52902: LD_EXP 38
52906: PUSH
52907: LD_EXP 90
52911: AND
52912: IFFALSE 53033
52914: GO 52916
52916: DISABLE
52917: LD_INT 0
52919: PPUSH
52920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52921: LD_ADDR_VAR 0 2
52925: PUSH
52926: LD_INT 22
52928: PUSH
52929: LD_OWVAR 2
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 21
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: LD_INT 23
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: LIST
52969: PPUSH
52970: CALL_OW 69
52974: ST_TO_ADDR
// if not tmp then
52975: LD_VAR 0 2
52979: NOT
52980: IFFALSE 52984
// exit ;
52982: GO 53033
// for i in tmp do
52984: LD_ADDR_VAR 0 1
52988: PUSH
52989: LD_VAR 0 2
52993: PUSH
52994: FOR_IN
52995: IFFALSE 53031
// begin if Crawls ( i ) then
52997: LD_VAR 0 1
53001: PPUSH
53002: CALL_OW 318
53006: IFFALSE 53017
// ComWalk ( i ) ;
53008: LD_VAR 0 1
53012: PPUSH
53013: CALL_OW 138
// SetClass ( i , 2 ) ;
53017: LD_VAR 0 1
53021: PPUSH
53022: LD_INT 2
53024: PPUSH
53025: CALL_OW 336
// end ;
53029: GO 52994
53031: POP
53032: POP
// end ;
53033: PPOPN 2
53035: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
53036: LD_EXP 38
53040: PUSH
53041: LD_EXP 91
53045: AND
53046: IFFALSE 53327
53048: GO 53050
53050: DISABLE
53051: LD_INT 0
53053: PPUSH
53054: PPUSH
53055: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
53056: LD_OWVAR 2
53060: PPUSH
53061: LD_INT 9
53063: PPUSH
53064: LD_INT 1
53066: PPUSH
53067: LD_INT 1
53069: PPUSH
53070: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
53074: LD_INT 9
53076: PPUSH
53077: LD_OWVAR 2
53081: PPUSH
53082: CALL_OW 343
// uc_side := 9 ;
53086: LD_ADDR_OWVAR 20
53090: PUSH
53091: LD_INT 9
53093: ST_TO_ADDR
// uc_nation := 2 ;
53094: LD_ADDR_OWVAR 21
53098: PUSH
53099: LD_INT 2
53101: ST_TO_ADDR
// hc_name := Dark Warrior ;
53102: LD_ADDR_OWVAR 26
53106: PUSH
53107: LD_STRING Dark Warrior
53109: ST_TO_ADDR
// hc_gallery :=  ;
53110: LD_ADDR_OWVAR 33
53114: PUSH
53115: LD_STRING 
53117: ST_TO_ADDR
// hc_noskilllimit := true ;
53118: LD_ADDR_OWVAR 76
53122: PUSH
53123: LD_INT 1
53125: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
53126: LD_ADDR_OWVAR 31
53130: PUSH
53131: LD_INT 30
53133: PUSH
53134: LD_INT 30
53136: PUSH
53137: LD_INT 30
53139: PUSH
53140: LD_INT 30
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// un := CreateHuman ;
53149: LD_ADDR_VAR 0 3
53153: PUSH
53154: CALL_OW 44
53158: ST_TO_ADDR
// hc_noskilllimit := false ;
53159: LD_ADDR_OWVAR 76
53163: PUSH
53164: LD_INT 0
53166: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53167: LD_VAR 0 3
53171: PPUSH
53172: LD_INT 1
53174: PPUSH
53175: CALL_OW 51
// p := 0 ;
53179: LD_ADDR_VAR 0 2
53183: PUSH
53184: LD_INT 0
53186: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53187: LD_INT 35
53189: PPUSH
53190: CALL_OW 67
// p := p + 1 ;
53194: LD_ADDR_VAR 0 2
53198: PUSH
53199: LD_VAR 0 2
53203: PUSH
53204: LD_INT 1
53206: PLUS
53207: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
53208: LD_VAR 0 3
53212: PPUSH
53213: CALL_OW 256
53217: PUSH
53218: LD_INT 1000
53220: LESS
53221: IFFALSE 53235
// SetLives ( un , 1000 ) ;
53223: LD_VAR 0 3
53227: PPUSH
53228: LD_INT 1000
53230: PPUSH
53231: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
53235: LD_VAR 0 3
53239: PPUSH
53240: LD_INT 81
53242: PUSH
53243: LD_OWVAR 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 91
53254: PUSH
53255: LD_VAR 0 3
53259: PUSH
53260: LD_INT 30
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PPUSH
53272: CALL_OW 69
53276: PPUSH
53277: LD_VAR 0 3
53281: PPUSH
53282: CALL_OW 74
53286: PPUSH
53287: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
53291: LD_VAR 0 2
53295: PUSH
53296: LD_INT 60
53298: GREATER
53299: PUSH
53300: LD_VAR 0 3
53304: PPUSH
53305: CALL_OW 301
53309: OR
53310: IFFALSE 53187
// if un then
53312: LD_VAR 0 3
53316: IFFALSE 53327
// RemoveUnit ( un ) ;
53318: LD_VAR 0 3
53322: PPUSH
53323: CALL_OW 64
// end ;
53327: PPOPN 3
53329: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53330: LD_INT 0
53332: PPUSH
// case cmd of 301 :
53333: LD_VAR 0 1
53337: PUSH
53338: LD_INT 301
53340: DOUBLE
53341: EQUAL
53342: IFTRUE 53346
53344: GO 53378
53346: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
53347: LD_VAR 0 6
53351: PPUSH
53352: LD_VAR 0 7
53356: PPUSH
53357: LD_VAR 0 8
53361: PPUSH
53362: LD_VAR 0 4
53366: PPUSH
53367: LD_VAR 0 5
53371: PPUSH
53372: CALL 54579 0 5
53376: GO 53499
53378: LD_INT 302
53380: DOUBLE
53381: EQUAL
53382: IFTRUE 53386
53384: GO 53423
53386: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
53387: LD_VAR 0 6
53391: PPUSH
53392: LD_VAR 0 7
53396: PPUSH
53397: LD_VAR 0 8
53401: PPUSH
53402: LD_VAR 0 9
53406: PPUSH
53407: LD_VAR 0 4
53411: PPUSH
53412: LD_VAR 0 5
53416: PPUSH
53417: CALL 54670 0 6
53421: GO 53499
53423: LD_INT 303
53425: DOUBLE
53426: EQUAL
53427: IFTRUE 53431
53429: GO 53468
53431: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
53432: LD_VAR 0 6
53436: PPUSH
53437: LD_VAR 0 7
53441: PPUSH
53442: LD_VAR 0 8
53446: PPUSH
53447: LD_VAR 0 9
53451: PPUSH
53452: LD_VAR 0 4
53456: PPUSH
53457: LD_VAR 0 5
53461: PPUSH
53462: CALL 53504 0 6
53466: GO 53499
53468: LD_INT 304
53470: DOUBLE
53471: EQUAL
53472: IFTRUE 53476
53474: GO 53498
53476: POP
// hHackTeleport ( unit , x , y ) ; end ;
53477: LD_VAR 0 2
53481: PPUSH
53482: LD_VAR 0 4
53486: PPUSH
53487: LD_VAR 0 5
53491: PPUSH
53492: CALL 55263 0 3
53496: GO 53499
53498: POP
// end ;
53499: LD_VAR 0 12
53503: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
53504: LD_INT 0
53506: PPUSH
53507: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
53508: LD_VAR 0 1
53512: PUSH
53513: LD_INT 1
53515: LESS
53516: PUSH
53517: LD_VAR 0 1
53521: PUSH
53522: LD_INT 3
53524: GREATER
53525: OR
53526: PUSH
53527: LD_VAR 0 5
53531: PPUSH
53532: LD_VAR 0 6
53536: PPUSH
53537: CALL_OW 428
53541: OR
53542: IFFALSE 53546
// exit ;
53544: GO 54266
// uc_side := your_side ;
53546: LD_ADDR_OWVAR 20
53550: PUSH
53551: LD_OWVAR 2
53555: ST_TO_ADDR
// uc_nation := nation ;
53556: LD_ADDR_OWVAR 21
53560: PUSH
53561: LD_VAR 0 1
53565: ST_TO_ADDR
// bc_level = 1 ;
53566: LD_ADDR_OWVAR 43
53570: PUSH
53571: LD_INT 1
53573: ST_TO_ADDR
// case btype of 1 :
53574: LD_VAR 0 2
53578: PUSH
53579: LD_INT 1
53581: DOUBLE
53582: EQUAL
53583: IFTRUE 53587
53585: GO 53598
53587: POP
// bc_type := b_depot ; 2 :
53588: LD_ADDR_OWVAR 42
53592: PUSH
53593: LD_INT 0
53595: ST_TO_ADDR
53596: GO 54210
53598: LD_INT 2
53600: DOUBLE
53601: EQUAL
53602: IFTRUE 53606
53604: GO 53617
53606: POP
// bc_type := b_warehouse ; 3 :
53607: LD_ADDR_OWVAR 42
53611: PUSH
53612: LD_INT 1
53614: ST_TO_ADDR
53615: GO 54210
53617: LD_INT 3
53619: DOUBLE
53620: EQUAL
53621: IFTRUE 53625
53623: GO 53636
53625: POP
// bc_type := b_lab ; 4 .. 9 :
53626: LD_ADDR_OWVAR 42
53630: PUSH
53631: LD_INT 6
53633: ST_TO_ADDR
53634: GO 54210
53636: LD_INT 4
53638: DOUBLE
53639: GREATEREQUAL
53640: IFFALSE 53648
53642: LD_INT 9
53644: DOUBLE
53645: LESSEQUAL
53646: IFTRUE 53650
53648: GO 53702
53650: POP
// begin bc_type := b_lab_half ;
53651: LD_ADDR_OWVAR 42
53655: PUSH
53656: LD_INT 7
53658: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
53659: LD_ADDR_OWVAR 44
53663: PUSH
53664: LD_INT 10
53666: PUSH
53667: LD_INT 11
53669: PUSH
53670: LD_INT 12
53672: PUSH
53673: LD_INT 15
53675: PUSH
53676: LD_INT 14
53678: PUSH
53679: LD_INT 13
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: PUSH
53690: LD_VAR 0 2
53694: PUSH
53695: LD_INT 3
53697: MINUS
53698: ARRAY
53699: ST_TO_ADDR
// end ; 10 .. 13 :
53700: GO 54210
53702: LD_INT 10
53704: DOUBLE
53705: GREATEREQUAL
53706: IFFALSE 53714
53708: LD_INT 13
53710: DOUBLE
53711: LESSEQUAL
53712: IFTRUE 53716
53714: GO 53793
53716: POP
// begin bc_type := b_lab_full ;
53717: LD_ADDR_OWVAR 42
53721: PUSH
53722: LD_INT 8
53724: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
53725: LD_ADDR_OWVAR 44
53729: PUSH
53730: LD_INT 10
53732: PUSH
53733: LD_INT 12
53735: PUSH
53736: LD_INT 14
53738: PUSH
53739: LD_INT 13
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: PUSH
53748: LD_VAR 0 2
53752: PUSH
53753: LD_INT 9
53755: MINUS
53756: ARRAY
53757: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
53758: LD_ADDR_OWVAR 45
53762: PUSH
53763: LD_INT 11
53765: PUSH
53766: LD_INT 15
53768: PUSH
53769: LD_INT 12
53771: PUSH
53772: LD_INT 15
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: PUSH
53781: LD_VAR 0 2
53785: PUSH
53786: LD_INT 9
53788: MINUS
53789: ARRAY
53790: ST_TO_ADDR
// end ; 14 :
53791: GO 54210
53793: LD_INT 14
53795: DOUBLE
53796: EQUAL
53797: IFTRUE 53801
53799: GO 53812
53801: POP
// bc_type := b_workshop ; 15 :
53802: LD_ADDR_OWVAR 42
53806: PUSH
53807: LD_INT 2
53809: ST_TO_ADDR
53810: GO 54210
53812: LD_INT 15
53814: DOUBLE
53815: EQUAL
53816: IFTRUE 53820
53818: GO 53831
53820: POP
// bc_type := b_factory ; 16 :
53821: LD_ADDR_OWVAR 42
53825: PUSH
53826: LD_INT 3
53828: ST_TO_ADDR
53829: GO 54210
53831: LD_INT 16
53833: DOUBLE
53834: EQUAL
53835: IFTRUE 53839
53837: GO 53850
53839: POP
// bc_type := b_ext_gun ; 17 :
53840: LD_ADDR_OWVAR 42
53844: PUSH
53845: LD_INT 17
53847: ST_TO_ADDR
53848: GO 54210
53850: LD_INT 17
53852: DOUBLE
53853: EQUAL
53854: IFTRUE 53858
53856: GO 53886
53858: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
53859: LD_ADDR_OWVAR 42
53863: PUSH
53864: LD_INT 19
53866: PUSH
53867: LD_INT 23
53869: PUSH
53870: LD_INT 19
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: PUSH
53878: LD_VAR 0 1
53882: ARRAY
53883: ST_TO_ADDR
53884: GO 54210
53886: LD_INT 18
53888: DOUBLE
53889: EQUAL
53890: IFTRUE 53894
53892: GO 53905
53894: POP
// bc_type := b_ext_radar ; 19 :
53895: LD_ADDR_OWVAR 42
53899: PUSH
53900: LD_INT 20
53902: ST_TO_ADDR
53903: GO 54210
53905: LD_INT 19
53907: DOUBLE
53908: EQUAL
53909: IFTRUE 53913
53911: GO 53924
53913: POP
// bc_type := b_ext_radio ; 20 :
53914: LD_ADDR_OWVAR 42
53918: PUSH
53919: LD_INT 22
53921: ST_TO_ADDR
53922: GO 54210
53924: LD_INT 20
53926: DOUBLE
53927: EQUAL
53928: IFTRUE 53932
53930: GO 53943
53932: POP
// bc_type := b_ext_siberium ; 21 :
53933: LD_ADDR_OWVAR 42
53937: PUSH
53938: LD_INT 21
53940: ST_TO_ADDR
53941: GO 54210
53943: LD_INT 21
53945: DOUBLE
53946: EQUAL
53947: IFTRUE 53951
53949: GO 53962
53951: POP
// bc_type := b_ext_computer ; 22 :
53952: LD_ADDR_OWVAR 42
53956: PUSH
53957: LD_INT 24
53959: ST_TO_ADDR
53960: GO 54210
53962: LD_INT 22
53964: DOUBLE
53965: EQUAL
53966: IFTRUE 53970
53968: GO 53981
53970: POP
// bc_type := b_ext_track ; 23 :
53971: LD_ADDR_OWVAR 42
53975: PUSH
53976: LD_INT 16
53978: ST_TO_ADDR
53979: GO 54210
53981: LD_INT 23
53983: DOUBLE
53984: EQUAL
53985: IFTRUE 53989
53987: GO 54000
53989: POP
// bc_type := b_ext_laser ; 24 :
53990: LD_ADDR_OWVAR 42
53994: PUSH
53995: LD_INT 25
53997: ST_TO_ADDR
53998: GO 54210
54000: LD_INT 24
54002: DOUBLE
54003: EQUAL
54004: IFTRUE 54008
54006: GO 54019
54008: POP
// bc_type := b_control_tower ; 25 :
54009: LD_ADDR_OWVAR 42
54013: PUSH
54014: LD_INT 36
54016: ST_TO_ADDR
54017: GO 54210
54019: LD_INT 25
54021: DOUBLE
54022: EQUAL
54023: IFTRUE 54027
54025: GO 54038
54027: POP
// bc_type := b_breastwork ; 26 :
54028: LD_ADDR_OWVAR 42
54032: PUSH
54033: LD_INT 31
54035: ST_TO_ADDR
54036: GO 54210
54038: LD_INT 26
54040: DOUBLE
54041: EQUAL
54042: IFTRUE 54046
54044: GO 54057
54046: POP
// bc_type := b_bunker ; 27 :
54047: LD_ADDR_OWVAR 42
54051: PUSH
54052: LD_INT 32
54054: ST_TO_ADDR
54055: GO 54210
54057: LD_INT 27
54059: DOUBLE
54060: EQUAL
54061: IFTRUE 54065
54063: GO 54076
54065: POP
// bc_type := b_turret ; 28 :
54066: LD_ADDR_OWVAR 42
54070: PUSH
54071: LD_INT 33
54073: ST_TO_ADDR
54074: GO 54210
54076: LD_INT 28
54078: DOUBLE
54079: EQUAL
54080: IFTRUE 54084
54082: GO 54095
54084: POP
// bc_type := b_armoury ; 29 :
54085: LD_ADDR_OWVAR 42
54089: PUSH
54090: LD_INT 4
54092: ST_TO_ADDR
54093: GO 54210
54095: LD_INT 29
54097: DOUBLE
54098: EQUAL
54099: IFTRUE 54103
54101: GO 54114
54103: POP
// bc_type := b_barracks ; 30 :
54104: LD_ADDR_OWVAR 42
54108: PUSH
54109: LD_INT 5
54111: ST_TO_ADDR
54112: GO 54210
54114: LD_INT 30
54116: DOUBLE
54117: EQUAL
54118: IFTRUE 54122
54120: GO 54133
54122: POP
// bc_type := b_solar_power ; 31 :
54123: LD_ADDR_OWVAR 42
54127: PUSH
54128: LD_INT 27
54130: ST_TO_ADDR
54131: GO 54210
54133: LD_INT 31
54135: DOUBLE
54136: EQUAL
54137: IFTRUE 54141
54139: GO 54152
54141: POP
// bc_type := b_oil_power ; 32 :
54142: LD_ADDR_OWVAR 42
54146: PUSH
54147: LD_INT 26
54149: ST_TO_ADDR
54150: GO 54210
54152: LD_INT 32
54154: DOUBLE
54155: EQUAL
54156: IFTRUE 54160
54158: GO 54171
54160: POP
// bc_type := b_siberite_power ; 33 :
54161: LD_ADDR_OWVAR 42
54165: PUSH
54166: LD_INT 28
54168: ST_TO_ADDR
54169: GO 54210
54171: LD_INT 33
54173: DOUBLE
54174: EQUAL
54175: IFTRUE 54179
54177: GO 54190
54179: POP
// bc_type := b_oil_mine ; 34 :
54180: LD_ADDR_OWVAR 42
54184: PUSH
54185: LD_INT 29
54187: ST_TO_ADDR
54188: GO 54210
54190: LD_INT 34
54192: DOUBLE
54193: EQUAL
54194: IFTRUE 54198
54196: GO 54209
54198: POP
// bc_type := b_siberite_mine ; end ;
54199: LD_ADDR_OWVAR 42
54203: PUSH
54204: LD_INT 30
54206: ST_TO_ADDR
54207: GO 54210
54209: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
54210: LD_ADDR_VAR 0 8
54214: PUSH
54215: LD_VAR 0 5
54219: PPUSH
54220: LD_VAR 0 6
54224: PPUSH
54225: LD_VAR 0 3
54229: PPUSH
54230: CALL_OW 47
54234: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
54235: LD_OWVAR 42
54239: PUSH
54240: LD_INT 32
54242: PUSH
54243: LD_INT 33
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: IN
54250: IFFALSE 54266
// PlaceWeaponTurret ( b , weapon ) ;
54252: LD_VAR 0 8
54256: PPUSH
54257: LD_VAR 0 4
54261: PPUSH
54262: CALL_OW 431
// end ;
54266: LD_VAR 0 7
54270: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
54271: LD_INT 0
54273: PPUSH
54274: PPUSH
54275: PPUSH
54276: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54277: LD_ADDR_VAR 0 4
54281: PUSH
54282: LD_INT 22
54284: PUSH
54285: LD_OWVAR 2
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: LD_INT 30
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 30
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: LIST
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PPUSH
54326: CALL_OW 69
54330: ST_TO_ADDR
// if not tmp then
54331: LD_VAR 0 4
54335: NOT
54336: IFFALSE 54340
// exit ;
54338: GO 54399
// for i in tmp do
54340: LD_ADDR_VAR 0 2
54344: PUSH
54345: LD_VAR 0 4
54349: PUSH
54350: FOR_IN
54351: IFFALSE 54397
// for j = 1 to 3 do
54353: LD_ADDR_VAR 0 3
54357: PUSH
54358: DOUBLE
54359: LD_INT 1
54361: DEC
54362: ST_TO_ADDR
54363: LD_INT 3
54365: PUSH
54366: FOR_TO
54367: IFFALSE 54393
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
54369: LD_VAR 0 2
54373: PPUSH
54374: CALL_OW 274
54378: PPUSH
54379: LD_VAR 0 3
54383: PPUSH
54384: LD_INT 99999
54386: PPUSH
54387: CALL_OW 277
54391: GO 54366
54393: POP
54394: POP
54395: GO 54350
54397: POP
54398: POP
// end ;
54399: LD_VAR 0 1
54403: RET
// export function hHackSetLevel10 ; var i , j ; begin
54404: LD_INT 0
54406: PPUSH
54407: PPUSH
54408: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
54409: LD_ADDR_VAR 0 2
54413: PUSH
54414: LD_INT 21
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PPUSH
54424: CALL_OW 69
54428: PUSH
54429: FOR_IN
54430: IFFALSE 54482
// if IsSelected ( i ) then
54432: LD_VAR 0 2
54436: PPUSH
54437: CALL_OW 306
54441: IFFALSE 54480
// begin for j := 1 to 4 do
54443: LD_ADDR_VAR 0 3
54447: PUSH
54448: DOUBLE
54449: LD_INT 1
54451: DEC
54452: ST_TO_ADDR
54453: LD_INT 4
54455: PUSH
54456: FOR_TO
54457: IFFALSE 54478
// SetSkill ( i , j , 10 ) ;
54459: LD_VAR 0 2
54463: PPUSH
54464: LD_VAR 0 3
54468: PPUSH
54469: LD_INT 10
54471: PPUSH
54472: CALL_OW 237
54476: GO 54456
54478: POP
54479: POP
// end ;
54480: GO 54429
54482: POP
54483: POP
// end ;
54484: LD_VAR 0 1
54488: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
54489: LD_INT 0
54491: PPUSH
54492: PPUSH
54493: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
54494: LD_ADDR_VAR 0 2
54498: PUSH
54499: LD_INT 22
54501: PUSH
54502: LD_OWVAR 2
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 21
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PPUSH
54525: CALL_OW 69
54529: PUSH
54530: FOR_IN
54531: IFFALSE 54572
// begin for j := 1 to 4 do
54533: LD_ADDR_VAR 0 3
54537: PUSH
54538: DOUBLE
54539: LD_INT 1
54541: DEC
54542: ST_TO_ADDR
54543: LD_INT 4
54545: PUSH
54546: FOR_TO
54547: IFFALSE 54568
// SetSkill ( i , j , 10 ) ;
54549: LD_VAR 0 2
54553: PPUSH
54554: LD_VAR 0 3
54558: PPUSH
54559: LD_INT 10
54561: PPUSH
54562: CALL_OW 237
54566: GO 54546
54568: POP
54569: POP
// end ;
54570: GO 54530
54572: POP
54573: POP
// end ;
54574: LD_VAR 0 1
54578: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
54579: LD_INT 0
54581: PPUSH
// uc_side := your_side ;
54582: LD_ADDR_OWVAR 20
54586: PUSH
54587: LD_OWVAR 2
54591: ST_TO_ADDR
// uc_nation := nation ;
54592: LD_ADDR_OWVAR 21
54596: PUSH
54597: LD_VAR 0 1
54601: ST_TO_ADDR
// InitHc ;
54602: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
54606: LD_INT 0
54608: PPUSH
54609: LD_VAR 0 2
54613: PPUSH
54614: LD_VAR 0 3
54618: PPUSH
54619: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
54623: LD_VAR 0 4
54627: PPUSH
54628: LD_VAR 0 5
54632: PPUSH
54633: CALL_OW 428
54637: PUSH
54638: LD_INT 0
54640: EQUAL
54641: IFFALSE 54665
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
54643: CALL_OW 44
54647: PPUSH
54648: LD_VAR 0 4
54652: PPUSH
54653: LD_VAR 0 5
54657: PPUSH
54658: LD_INT 1
54660: PPUSH
54661: CALL_OW 48
// end ;
54665: LD_VAR 0 6
54669: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
54670: LD_INT 0
54672: PPUSH
54673: PPUSH
// uc_side := your_side ;
54674: LD_ADDR_OWVAR 20
54678: PUSH
54679: LD_OWVAR 2
54683: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
54684: LD_VAR 0 1
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: LD_INT 3
54697: PUSH
54698: LD_INT 4
54700: PUSH
54701: LD_INT 5
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: IN
54711: IFFALSE 54723
// uc_nation := nation_american else
54713: LD_ADDR_OWVAR 21
54717: PUSH
54718: LD_INT 1
54720: ST_TO_ADDR
54721: GO 54766
// if chassis in [ 11 , 12 , 13 , 14 ] then
54723: LD_VAR 0 1
54727: PUSH
54728: LD_INT 11
54730: PUSH
54731: LD_INT 12
54733: PUSH
54734: LD_INT 13
54736: PUSH
54737: LD_INT 14
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: IN
54746: IFFALSE 54758
// uc_nation := nation_arabian else
54748: LD_ADDR_OWVAR 21
54752: PUSH
54753: LD_INT 2
54755: ST_TO_ADDR
54756: GO 54766
// uc_nation := nation_russian ;
54758: LD_ADDR_OWVAR 21
54762: PUSH
54763: LD_INT 3
54765: ST_TO_ADDR
// vc_chassis := chassis ;
54766: LD_ADDR_OWVAR 37
54770: PUSH
54771: LD_VAR 0 1
54775: ST_TO_ADDR
// vc_engine := engine ;
54776: LD_ADDR_OWVAR 39
54780: PUSH
54781: LD_VAR 0 2
54785: ST_TO_ADDR
// vc_control := control ;
54786: LD_ADDR_OWVAR 38
54790: PUSH
54791: LD_VAR 0 3
54795: ST_TO_ADDR
// vc_weapon := weapon ;
54796: LD_ADDR_OWVAR 40
54800: PUSH
54801: LD_VAR 0 4
54805: ST_TO_ADDR
// un := CreateVehicle ;
54806: LD_ADDR_VAR 0 8
54810: PUSH
54811: CALL_OW 45
54815: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
54816: LD_VAR 0 8
54820: PPUSH
54821: LD_INT 0
54823: PPUSH
54824: LD_INT 5
54826: PPUSH
54827: CALL_OW 12
54831: PPUSH
54832: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
54836: LD_VAR 0 8
54840: PPUSH
54841: LD_VAR 0 5
54845: PPUSH
54846: LD_VAR 0 6
54850: PPUSH
54851: LD_INT 1
54853: PPUSH
54854: CALL_OW 48
// end ;
54858: LD_VAR 0 7
54862: RET
// export hInvincible ; every 1 do
54863: GO 54865
54865: DISABLE
// hInvincible := [ ] ;
54866: LD_ADDR_EXP 92
54870: PUSH
54871: EMPTY
54872: ST_TO_ADDR
54873: END
// every 10 do var i ;
54874: GO 54876
54876: DISABLE
54877: LD_INT 0
54879: PPUSH
// begin enable ;
54880: ENABLE
// if not hInvincible then
54881: LD_EXP 92
54885: NOT
54886: IFFALSE 54890
// exit ;
54888: GO 54934
// for i in hInvincible do
54890: LD_ADDR_VAR 0 1
54894: PUSH
54895: LD_EXP 92
54899: PUSH
54900: FOR_IN
54901: IFFALSE 54932
// if GetLives ( i ) < 1000 then
54903: LD_VAR 0 1
54907: PPUSH
54908: CALL_OW 256
54912: PUSH
54913: LD_INT 1000
54915: LESS
54916: IFFALSE 54930
// SetLives ( i , 1000 ) ;
54918: LD_VAR 0 1
54922: PPUSH
54923: LD_INT 1000
54925: PPUSH
54926: CALL_OW 234
54930: GO 54900
54932: POP
54933: POP
// end ;
54934: PPOPN 1
54936: END
// export function hHackInvincible ; var i ; begin
54937: LD_INT 0
54939: PPUSH
54940: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
54941: LD_ADDR_VAR 0 2
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: LD_INT 21
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 21
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: PPUSH
54974: CALL_OW 69
54978: PUSH
54979: FOR_IN
54980: IFFALSE 55041
// if IsSelected ( i ) then
54982: LD_VAR 0 2
54986: PPUSH
54987: CALL_OW 306
54991: IFFALSE 55039
// begin if i in hInvincible then
54993: LD_VAR 0 2
54997: PUSH
54998: LD_EXP 92
55002: IN
55003: IFFALSE 55023
// hInvincible := hInvincible diff i else
55005: LD_ADDR_EXP 92
55009: PUSH
55010: LD_EXP 92
55014: PUSH
55015: LD_VAR 0 2
55019: DIFF
55020: ST_TO_ADDR
55021: GO 55039
// hInvincible := hInvincible union i ;
55023: LD_ADDR_EXP 92
55027: PUSH
55028: LD_EXP 92
55032: PUSH
55033: LD_VAR 0 2
55037: UNION
55038: ST_TO_ADDR
// end ;
55039: GO 54979
55041: POP
55042: POP
// end ;
55043: LD_VAR 0 1
55047: RET
// export function hHackInvisible ; var i , j ; begin
55048: LD_INT 0
55050: PPUSH
55051: PPUSH
55052: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55053: LD_ADDR_VAR 0 2
55057: PUSH
55058: LD_INT 21
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PPUSH
55068: CALL_OW 69
55072: PUSH
55073: FOR_IN
55074: IFFALSE 55098
// if IsSelected ( i ) then
55076: LD_VAR 0 2
55080: PPUSH
55081: CALL_OW 306
55085: IFFALSE 55096
// ComForceInvisible ( i ) ;
55087: LD_VAR 0 2
55091: PPUSH
55092: CALL_OW 496
55096: GO 55073
55098: POP
55099: POP
// end ;
55100: LD_VAR 0 1
55104: RET
// export function hHackChangeYourSide ; begin
55105: LD_INT 0
55107: PPUSH
// if your_side = 8 then
55108: LD_OWVAR 2
55112: PUSH
55113: LD_INT 8
55115: EQUAL
55116: IFFALSE 55128
// your_side := 0 else
55118: LD_ADDR_OWVAR 2
55122: PUSH
55123: LD_INT 0
55125: ST_TO_ADDR
55126: GO 55142
// your_side := your_side + 1 ;
55128: LD_ADDR_OWVAR 2
55132: PUSH
55133: LD_OWVAR 2
55137: PUSH
55138: LD_INT 1
55140: PLUS
55141: ST_TO_ADDR
// end ;
55142: LD_VAR 0 1
55146: RET
// export function hHackChangeUnitSide ; var i , j ; begin
55147: LD_INT 0
55149: PPUSH
55150: PPUSH
55151: PPUSH
// for i in all_units do
55152: LD_ADDR_VAR 0 2
55156: PUSH
55157: LD_OWVAR 3
55161: PUSH
55162: FOR_IN
55163: IFFALSE 55241
// if IsSelected ( i ) then
55165: LD_VAR 0 2
55169: PPUSH
55170: CALL_OW 306
55174: IFFALSE 55239
// begin j := GetSide ( i ) ;
55176: LD_ADDR_VAR 0 3
55180: PUSH
55181: LD_VAR 0 2
55185: PPUSH
55186: CALL_OW 255
55190: ST_TO_ADDR
// if j = 8 then
55191: LD_VAR 0 3
55195: PUSH
55196: LD_INT 8
55198: EQUAL
55199: IFFALSE 55211
// j := 0 else
55201: LD_ADDR_VAR 0 3
55205: PUSH
55206: LD_INT 0
55208: ST_TO_ADDR
55209: GO 55225
// j := j + 1 ;
55211: LD_ADDR_VAR 0 3
55215: PUSH
55216: LD_VAR 0 3
55220: PUSH
55221: LD_INT 1
55223: PLUS
55224: ST_TO_ADDR
// SetSide ( i , j ) ;
55225: LD_VAR 0 2
55229: PPUSH
55230: LD_VAR 0 3
55234: PPUSH
55235: CALL_OW 235
// end ;
55239: GO 55162
55241: POP
55242: POP
// end ;
55243: LD_VAR 0 1
55247: RET
// export function hHackFog ; begin
55248: LD_INT 0
55250: PPUSH
// FogOff ( true ) ;
55251: LD_INT 1
55253: PPUSH
55254: CALL_OW 344
// end ;
55258: LD_VAR 0 1
55262: RET
// export function hHackTeleport ( unit , x , y ) ; begin
55263: LD_INT 0
55265: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
55266: LD_VAR 0 1
55270: PPUSH
55271: LD_VAR 0 2
55275: PPUSH
55276: LD_VAR 0 3
55280: PPUSH
55281: LD_INT 1
55283: PPUSH
55284: LD_INT 1
55286: PPUSH
55287: CALL_OW 483
// CenterOnXY ( x , y ) ;
55291: LD_VAR 0 2
55295: PPUSH
55296: LD_VAR 0 3
55300: PPUSH
55301: CALL_OW 84
// end ; end_of_file
55305: LD_VAR 0 4
55309: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55310: LD_VAR 0 1
55314: PUSH
55315: LD_INT 200
55317: DOUBLE
55318: GREATEREQUAL
55319: IFFALSE 55327
55321: LD_INT 299
55323: DOUBLE
55324: LESSEQUAL
55325: IFTRUE 55329
55327: GO 55361
55329: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55330: LD_VAR 0 1
55334: PPUSH
55335: LD_VAR 0 2
55339: PPUSH
55340: LD_VAR 0 3
55344: PPUSH
55345: LD_VAR 0 4
55349: PPUSH
55350: LD_VAR 0 5
55354: PPUSH
55355: CALL 55605 0 5
55359: GO 55438
55361: LD_INT 300
55363: DOUBLE
55364: GREATEREQUAL
55365: IFFALSE 55373
55367: LD_INT 399
55369: DOUBLE
55370: LESSEQUAL
55371: IFTRUE 55375
55373: GO 55437
55375: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55376: LD_VAR 0 1
55380: PPUSH
55381: LD_VAR 0 2
55385: PPUSH
55386: LD_VAR 0 3
55390: PPUSH
55391: LD_VAR 0 4
55395: PPUSH
55396: LD_VAR 0 5
55400: PPUSH
55401: LD_VAR 0 6
55405: PPUSH
55406: LD_VAR 0 7
55410: PPUSH
55411: LD_VAR 0 8
55415: PPUSH
55416: LD_VAR 0 9
55420: PPUSH
55421: LD_VAR 0 10
55425: PPUSH
55426: LD_VAR 0 11
55430: PPUSH
55431: CALL 53330 0 11
55435: GO 55438
55437: POP
// end ;
55438: PPOPN 11
55440: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55441: LD_VAR 0 1
55445: PPUSH
55446: LD_VAR 0 2
55450: PPUSH
55451: LD_VAR 0 3
55455: PPUSH
55456: LD_VAR 0 4
55460: PPUSH
55461: LD_VAR 0 5
55465: PPUSH
55466: CALL 55587 0 5
// end ; end_of_file
55470: PPOPN 5
55472: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
55473: LD_INT 0
55475: PPUSH
55476: PPUSH
55477: PPUSH
55478: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
55479: LD_VAR 0 1
55483: PPUSH
55484: CALL_OW 264
55488: PUSH
55489: LD_EXP 23
55493: EQUAL
55494: IFFALSE 55566
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55496: LD_INT 68
55498: PPUSH
55499: LD_VAR 0 1
55503: PPUSH
55504: CALL_OW 255
55508: PPUSH
55509: CALL_OW 321
55513: PUSH
55514: LD_INT 2
55516: EQUAL
55517: IFFALSE 55529
// eff := 70 else
55519: LD_ADDR_VAR 0 4
55523: PUSH
55524: LD_INT 70
55526: ST_TO_ADDR
55527: GO 55537
// eff := 30 ;
55529: LD_ADDR_VAR 0 4
55533: PUSH
55534: LD_INT 30
55536: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55537: LD_VAR 0 1
55541: PPUSH
55542: CALL_OW 250
55546: PPUSH
55547: LD_VAR 0 1
55551: PPUSH
55552: CALL_OW 251
55556: PPUSH
55557: LD_VAR 0 4
55561: PPUSH
55562: CALL_OW 495
// end ; end ;
55566: LD_VAR 0 2
55570: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55571: LD_INT 0
55573: PPUSH
// end ;
55574: LD_VAR 0 4
55578: RET
// export function SOS_Command ( cmd ) ; begin
55579: LD_INT 0
55581: PPUSH
// end ;
55582: LD_VAR 0 2
55586: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55587: LD_INT 0
55589: PPUSH
// if cmd = 121 then
55590: LD_VAR 0 1
55594: PUSH
55595: LD_INT 121
55597: EQUAL
55598: IFFALSE 55600
// end ;
55600: LD_VAR 0 6
55604: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55605: LD_INT 0
55607: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55608: LD_VAR 0 1
55612: PUSH
55613: LD_INT 250
55615: EQUAL
55616: PUSH
55617: LD_VAR 0 2
55621: PPUSH
55622: CALL_OW 264
55626: PUSH
55627: LD_EXP 26
55631: EQUAL
55632: AND
55633: IFFALSE 55654
// MinerPlaceMine ( unit , x , y ) ;
55635: LD_VAR 0 2
55639: PPUSH
55640: LD_VAR 0 4
55644: PPUSH
55645: LD_VAR 0 5
55649: PPUSH
55650: CALL 58003 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55654: LD_VAR 0 1
55658: PUSH
55659: LD_INT 251
55661: EQUAL
55662: PUSH
55663: LD_VAR 0 2
55667: PPUSH
55668: CALL_OW 264
55672: PUSH
55673: LD_EXP 26
55677: EQUAL
55678: AND
55679: IFFALSE 55700
// MinerDetonateMine ( unit , x , y ) ;
55681: LD_VAR 0 2
55685: PPUSH
55686: LD_VAR 0 4
55690: PPUSH
55691: LD_VAR 0 5
55695: PPUSH
55696: CALL 58280 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55700: LD_VAR 0 1
55704: PUSH
55705: LD_INT 252
55707: EQUAL
55708: PUSH
55709: LD_VAR 0 2
55713: PPUSH
55714: CALL_OW 264
55718: PUSH
55719: LD_EXP 26
55723: EQUAL
55724: AND
55725: IFFALSE 55746
// MinerCreateMinefield ( unit , x , y ) ;
55727: LD_VAR 0 2
55731: PPUSH
55732: LD_VAR 0 4
55736: PPUSH
55737: LD_VAR 0 5
55741: PPUSH
55742: CALL 58697 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55746: LD_VAR 0 1
55750: PUSH
55751: LD_INT 253
55753: EQUAL
55754: PUSH
55755: LD_VAR 0 2
55759: PPUSH
55760: CALL_OW 257
55764: PUSH
55765: LD_INT 5
55767: EQUAL
55768: AND
55769: IFFALSE 55790
// ComBinocular ( unit , x , y ) ;
55771: LD_VAR 0 2
55775: PPUSH
55776: LD_VAR 0 4
55780: PPUSH
55781: LD_VAR 0 5
55785: PPUSH
55786: CALL 59068 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55790: LD_VAR 0 1
55794: PUSH
55795: LD_INT 254
55797: EQUAL
55798: PUSH
55799: LD_VAR 0 2
55803: PPUSH
55804: CALL_OW 264
55808: PUSH
55809: LD_EXP 21
55813: EQUAL
55814: AND
55815: PUSH
55816: LD_VAR 0 3
55820: PPUSH
55821: CALL_OW 263
55825: PUSH
55826: LD_INT 3
55828: EQUAL
55829: AND
55830: IFFALSE 55846
// HackDestroyVehicle ( unit , selectedUnit ) ;
55832: LD_VAR 0 2
55836: PPUSH
55837: LD_VAR 0 3
55841: PPUSH
55842: CALL 57363 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55846: LD_VAR 0 1
55850: PUSH
55851: LD_INT 255
55853: EQUAL
55854: PUSH
55855: LD_VAR 0 2
55859: PPUSH
55860: CALL_OW 264
55864: PUSH
55865: LD_INT 14
55867: PUSH
55868: LD_INT 53
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: IN
55875: AND
55876: PUSH
55877: LD_VAR 0 4
55881: PPUSH
55882: LD_VAR 0 5
55886: PPUSH
55887: CALL_OW 488
55891: AND
55892: IFFALSE 55916
// CutTreeXYR ( unit , x , y , 12 ) ;
55894: LD_VAR 0 2
55898: PPUSH
55899: LD_VAR 0 4
55903: PPUSH
55904: LD_VAR 0 5
55908: PPUSH
55909: LD_INT 12
55911: PPUSH
55912: CALL 55929 0 4
// end ;
55916: LD_VAR 0 6
55920: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
55921: LD_INT 0
55923: PPUSH
// end ;
55924: LD_VAR 0 4
55928: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55929: LD_INT 0
55931: PPUSH
55932: PPUSH
55933: PPUSH
55934: PPUSH
55935: PPUSH
55936: PPUSH
55937: PPUSH
55938: PPUSH
55939: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
55940: LD_VAR 0 1
55944: NOT
55945: PUSH
55946: LD_VAR 0 2
55950: PPUSH
55951: LD_VAR 0 3
55955: PPUSH
55956: CALL_OW 488
55960: NOT
55961: OR
55962: PUSH
55963: LD_VAR 0 4
55967: NOT
55968: OR
55969: IFFALSE 55973
// exit ;
55971: GO 56313
// list := [ ] ;
55973: LD_ADDR_VAR 0 13
55977: PUSH
55978: EMPTY
55979: ST_TO_ADDR
// if x - r < 0 then
55980: LD_VAR 0 2
55984: PUSH
55985: LD_VAR 0 4
55989: MINUS
55990: PUSH
55991: LD_INT 0
55993: LESS
55994: IFFALSE 56006
// min_x := 0 else
55996: LD_ADDR_VAR 0 7
56000: PUSH
56001: LD_INT 0
56003: ST_TO_ADDR
56004: GO 56022
// min_x := x - r ;
56006: LD_ADDR_VAR 0 7
56010: PUSH
56011: LD_VAR 0 2
56015: PUSH
56016: LD_VAR 0 4
56020: MINUS
56021: ST_TO_ADDR
// if y - r < 0 then
56022: LD_VAR 0 3
56026: PUSH
56027: LD_VAR 0 4
56031: MINUS
56032: PUSH
56033: LD_INT 0
56035: LESS
56036: IFFALSE 56048
// min_y := 0 else
56038: LD_ADDR_VAR 0 8
56042: PUSH
56043: LD_INT 0
56045: ST_TO_ADDR
56046: GO 56064
// min_y := y - r ;
56048: LD_ADDR_VAR 0 8
56052: PUSH
56053: LD_VAR 0 3
56057: PUSH
56058: LD_VAR 0 4
56062: MINUS
56063: ST_TO_ADDR
// max_x := x + r ;
56064: LD_ADDR_VAR 0 9
56068: PUSH
56069: LD_VAR 0 2
56073: PUSH
56074: LD_VAR 0 4
56078: PLUS
56079: ST_TO_ADDR
// max_y := y + r ;
56080: LD_ADDR_VAR 0 10
56084: PUSH
56085: LD_VAR 0 3
56089: PUSH
56090: LD_VAR 0 4
56094: PLUS
56095: ST_TO_ADDR
// for _x = min_x to max_x do
56096: LD_ADDR_VAR 0 11
56100: PUSH
56101: DOUBLE
56102: LD_VAR 0 7
56106: DEC
56107: ST_TO_ADDR
56108: LD_VAR 0 9
56112: PUSH
56113: FOR_TO
56114: IFFALSE 56231
// for _y = min_y to max_y do
56116: LD_ADDR_VAR 0 12
56120: PUSH
56121: DOUBLE
56122: LD_VAR 0 8
56126: DEC
56127: ST_TO_ADDR
56128: LD_VAR 0 10
56132: PUSH
56133: FOR_TO
56134: IFFALSE 56227
// begin if not ValidHex ( _x , _y ) then
56136: LD_VAR 0 11
56140: PPUSH
56141: LD_VAR 0 12
56145: PPUSH
56146: CALL_OW 488
56150: NOT
56151: IFFALSE 56155
// continue ;
56153: GO 56133
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56155: LD_VAR 0 11
56159: PPUSH
56160: LD_VAR 0 12
56164: PPUSH
56165: CALL_OW 351
56169: PUSH
56170: LD_VAR 0 11
56174: PPUSH
56175: LD_VAR 0 12
56179: PPUSH
56180: CALL_OW 554
56184: AND
56185: IFFALSE 56225
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56187: LD_ADDR_VAR 0 13
56191: PUSH
56192: LD_VAR 0 13
56196: PPUSH
56197: LD_VAR 0 13
56201: PUSH
56202: LD_INT 1
56204: PLUS
56205: PPUSH
56206: LD_VAR 0 11
56210: PUSH
56211: LD_VAR 0 12
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PPUSH
56220: CALL_OW 2
56224: ST_TO_ADDR
// end ;
56225: GO 56133
56227: POP
56228: POP
56229: GO 56113
56231: POP
56232: POP
// if not list then
56233: LD_VAR 0 13
56237: NOT
56238: IFFALSE 56242
// exit ;
56240: GO 56313
// for i in list do
56242: LD_ADDR_VAR 0 6
56246: PUSH
56247: LD_VAR 0 13
56251: PUSH
56252: FOR_IN
56253: IFFALSE 56311
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56255: LD_VAR 0 1
56259: PPUSH
56260: LD_STRING M
56262: PUSH
56263: LD_VAR 0 6
56267: PUSH
56268: LD_INT 1
56270: ARRAY
56271: PUSH
56272: LD_VAR 0 6
56276: PUSH
56277: LD_INT 2
56279: ARRAY
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: PUSH
56302: EMPTY
56303: LIST
56304: PPUSH
56305: CALL_OW 447
56309: GO 56252
56311: POP
56312: POP
// end ;
56313: LD_VAR 0 5
56317: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56318: LD_EXP 95
56322: NOT
56323: IFFALSE 56373
56325: GO 56327
56327: DISABLE
// begin initHack := true ;
56328: LD_ADDR_EXP 95
56332: PUSH
56333: LD_INT 1
56335: ST_TO_ADDR
// hackTanks := [ ] ;
56336: LD_ADDR_EXP 96
56340: PUSH
56341: EMPTY
56342: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56343: LD_ADDR_EXP 97
56347: PUSH
56348: EMPTY
56349: ST_TO_ADDR
// hackLimit := 3 ;
56350: LD_ADDR_EXP 98
56354: PUSH
56355: LD_INT 3
56357: ST_TO_ADDR
// hackDist := 12 ;
56358: LD_ADDR_EXP 99
56362: PUSH
56363: LD_INT 12
56365: ST_TO_ADDR
// hackCounter := [ ] ;
56366: LD_ADDR_EXP 100
56370: PUSH
56371: EMPTY
56372: ST_TO_ADDR
// end ;
56373: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56374: LD_EXP 95
56378: PUSH
56379: LD_INT 34
56381: PUSH
56382: LD_EXP 21
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PPUSH
56391: CALL_OW 69
56395: AND
56396: IFFALSE 56651
56398: GO 56400
56400: DISABLE
56401: LD_INT 0
56403: PPUSH
56404: PPUSH
// begin enable ;
56405: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56406: LD_ADDR_VAR 0 1
56410: PUSH
56411: LD_INT 34
56413: PUSH
56414: LD_EXP 21
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PPUSH
56423: CALL_OW 69
56427: PUSH
56428: FOR_IN
56429: IFFALSE 56649
// begin if not i in hackTanks then
56431: LD_VAR 0 1
56435: PUSH
56436: LD_EXP 96
56440: IN
56441: NOT
56442: IFFALSE 56525
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56444: LD_ADDR_EXP 96
56448: PUSH
56449: LD_EXP 96
56453: PPUSH
56454: LD_EXP 96
56458: PUSH
56459: LD_INT 1
56461: PLUS
56462: PPUSH
56463: LD_VAR 0 1
56467: PPUSH
56468: CALL_OW 1
56472: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56473: LD_ADDR_EXP 97
56477: PUSH
56478: LD_EXP 97
56482: PPUSH
56483: LD_EXP 97
56487: PUSH
56488: LD_INT 1
56490: PLUS
56491: PPUSH
56492: EMPTY
56493: PPUSH
56494: CALL_OW 1
56498: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56499: LD_ADDR_EXP 100
56503: PUSH
56504: LD_EXP 100
56508: PPUSH
56509: LD_EXP 100
56513: PUSH
56514: LD_INT 1
56516: PLUS
56517: PPUSH
56518: EMPTY
56519: PPUSH
56520: CALL_OW 1
56524: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56525: LD_VAR 0 1
56529: PPUSH
56530: CALL_OW 302
56534: NOT
56535: IFFALSE 56548
// begin HackUnlinkAll ( i ) ;
56537: LD_VAR 0 1
56541: PPUSH
56542: CALL 56654 0 1
// continue ;
56546: GO 56428
// end ; HackCheckCapturedStatus ( i ) ;
56548: LD_VAR 0 1
56552: PPUSH
56553: CALL 57097 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56557: LD_ADDR_VAR 0 2
56561: PUSH
56562: LD_INT 81
56564: PUSH
56565: LD_VAR 0 1
56569: PPUSH
56570: CALL_OW 255
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 33
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 91
56591: PUSH
56592: LD_VAR 0 1
56596: PUSH
56597: LD_EXP 99
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 50
56609: PUSH
56610: EMPTY
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: PPUSH
56619: CALL_OW 69
56623: ST_TO_ADDR
// if not tmp then
56624: LD_VAR 0 2
56628: NOT
56629: IFFALSE 56633
// continue ;
56631: GO 56428
// HackLink ( i , tmp ) ;
56633: LD_VAR 0 1
56637: PPUSH
56638: LD_VAR 0 2
56642: PPUSH
56643: CALL 56790 0 2
// end ;
56647: GO 56428
56649: POP
56650: POP
// end ;
56651: PPOPN 2
56653: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56654: LD_INT 0
56656: PPUSH
56657: PPUSH
56658: PPUSH
// if not hack in hackTanks then
56659: LD_VAR 0 1
56663: PUSH
56664: LD_EXP 96
56668: IN
56669: NOT
56670: IFFALSE 56674
// exit ;
56672: GO 56785
// index := GetElementIndex ( hackTanks , hack ) ;
56674: LD_ADDR_VAR 0 4
56678: PUSH
56679: LD_EXP 96
56683: PPUSH
56684: LD_VAR 0 1
56688: PPUSH
56689: CALL 9045 0 2
56693: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56694: LD_EXP 97
56698: PUSH
56699: LD_VAR 0 4
56703: ARRAY
56704: IFFALSE 56785
// begin for i in hackTanksCaptured [ index ] do
56706: LD_ADDR_VAR 0 3
56710: PUSH
56711: LD_EXP 97
56715: PUSH
56716: LD_VAR 0 4
56720: ARRAY
56721: PUSH
56722: FOR_IN
56723: IFFALSE 56749
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56725: LD_VAR 0 3
56729: PUSH
56730: LD_INT 1
56732: ARRAY
56733: PPUSH
56734: LD_VAR 0 3
56738: PUSH
56739: LD_INT 2
56741: ARRAY
56742: PPUSH
56743: CALL_OW 235
56747: GO 56722
56749: POP
56750: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56751: LD_ADDR_EXP 97
56755: PUSH
56756: LD_EXP 97
56760: PPUSH
56761: LD_VAR 0 4
56765: PPUSH
56766: EMPTY
56767: PPUSH
56768: CALL_OW 1
56772: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56773: LD_VAR 0 1
56777: PPUSH
56778: LD_INT 0
56780: PPUSH
56781: CALL_OW 505
// end ; end ;
56785: LD_VAR 0 2
56789: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56790: LD_INT 0
56792: PPUSH
56793: PPUSH
56794: PPUSH
// if not hack in hackTanks or not vehicles then
56795: LD_VAR 0 1
56799: PUSH
56800: LD_EXP 96
56804: IN
56805: NOT
56806: PUSH
56807: LD_VAR 0 2
56811: NOT
56812: OR
56813: IFFALSE 56817
// exit ;
56815: GO 57092
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56817: LD_ADDR_VAR 0 2
56821: PUSH
56822: LD_VAR 0 1
56826: PPUSH
56827: LD_VAR 0 2
56831: PPUSH
56832: LD_INT 1
56834: PPUSH
56835: LD_INT 1
56837: PPUSH
56838: CALL 9695 0 4
56842: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56843: LD_ADDR_VAR 0 5
56847: PUSH
56848: LD_EXP 96
56852: PPUSH
56853: LD_VAR 0 1
56857: PPUSH
56858: CALL 9045 0 2
56862: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56863: LD_EXP 97
56867: PUSH
56868: LD_VAR 0 5
56872: ARRAY
56873: PUSH
56874: LD_EXP 98
56878: LESS
56879: IFFALSE 57068
// begin for i := 1 to vehicles do
56881: LD_ADDR_VAR 0 4
56885: PUSH
56886: DOUBLE
56887: LD_INT 1
56889: DEC
56890: ST_TO_ADDR
56891: LD_VAR 0 2
56895: PUSH
56896: FOR_TO
56897: IFFALSE 57066
// begin if hackTanksCaptured [ index ] = hackLimit then
56899: LD_EXP 97
56903: PUSH
56904: LD_VAR 0 5
56908: ARRAY
56909: PUSH
56910: LD_EXP 98
56914: EQUAL
56915: IFFALSE 56919
// break ;
56917: GO 57066
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56919: LD_ADDR_EXP 100
56923: PUSH
56924: LD_EXP 100
56928: PPUSH
56929: LD_VAR 0 5
56933: PPUSH
56934: LD_EXP 100
56938: PUSH
56939: LD_VAR 0 5
56943: ARRAY
56944: PUSH
56945: LD_INT 1
56947: PLUS
56948: PPUSH
56949: CALL_OW 1
56953: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56954: LD_ADDR_EXP 97
56958: PUSH
56959: LD_EXP 97
56963: PPUSH
56964: LD_VAR 0 5
56968: PUSH
56969: LD_EXP 97
56973: PUSH
56974: LD_VAR 0 5
56978: ARRAY
56979: PUSH
56980: LD_INT 1
56982: PLUS
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PPUSH
56988: LD_VAR 0 2
56992: PUSH
56993: LD_VAR 0 4
56997: ARRAY
56998: PUSH
56999: LD_VAR 0 2
57003: PUSH
57004: LD_VAR 0 4
57008: ARRAY
57009: PPUSH
57010: CALL_OW 255
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PPUSH
57019: CALL 9260 0 3
57023: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57024: LD_VAR 0 2
57028: PUSH
57029: LD_VAR 0 4
57033: ARRAY
57034: PPUSH
57035: LD_VAR 0 1
57039: PPUSH
57040: CALL_OW 255
57044: PPUSH
57045: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57049: LD_VAR 0 2
57053: PUSH
57054: LD_VAR 0 4
57058: ARRAY
57059: PPUSH
57060: CALL_OW 141
// end ;
57064: GO 56896
57066: POP
57067: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57068: LD_VAR 0 1
57072: PPUSH
57073: LD_EXP 97
57077: PUSH
57078: LD_VAR 0 5
57082: ARRAY
57083: PUSH
57084: LD_INT 0
57086: PLUS
57087: PPUSH
57088: CALL_OW 505
// end ;
57092: LD_VAR 0 3
57096: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57097: LD_INT 0
57099: PPUSH
57100: PPUSH
57101: PPUSH
57102: PPUSH
// if not hack in hackTanks then
57103: LD_VAR 0 1
57107: PUSH
57108: LD_EXP 96
57112: IN
57113: NOT
57114: IFFALSE 57118
// exit ;
57116: GO 57358
// index := GetElementIndex ( hackTanks , hack ) ;
57118: LD_ADDR_VAR 0 4
57122: PUSH
57123: LD_EXP 96
57127: PPUSH
57128: LD_VAR 0 1
57132: PPUSH
57133: CALL 9045 0 2
57137: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57138: LD_ADDR_VAR 0 3
57142: PUSH
57143: DOUBLE
57144: LD_EXP 97
57148: PUSH
57149: LD_VAR 0 4
57153: ARRAY
57154: INC
57155: ST_TO_ADDR
57156: LD_INT 1
57158: PUSH
57159: FOR_DOWNTO
57160: IFFALSE 57332
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57162: LD_ADDR_VAR 0 5
57166: PUSH
57167: LD_EXP 97
57171: PUSH
57172: LD_VAR 0 4
57176: ARRAY
57177: PUSH
57178: LD_VAR 0 3
57182: ARRAY
57183: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57184: LD_VAR 0 5
57188: PUSH
57189: LD_INT 1
57191: ARRAY
57192: PPUSH
57193: CALL_OW 302
57197: NOT
57198: PUSH
57199: LD_VAR 0 5
57203: PUSH
57204: LD_INT 1
57206: ARRAY
57207: PPUSH
57208: CALL_OW 255
57212: PUSH
57213: LD_VAR 0 1
57217: PPUSH
57218: CALL_OW 255
57222: NONEQUAL
57223: OR
57224: IFFALSE 57330
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57226: LD_VAR 0 5
57230: PUSH
57231: LD_INT 1
57233: ARRAY
57234: PPUSH
57235: CALL_OW 305
57239: PUSH
57240: LD_VAR 0 5
57244: PUSH
57245: LD_INT 1
57247: ARRAY
57248: PPUSH
57249: CALL_OW 255
57253: PUSH
57254: LD_VAR 0 1
57258: PPUSH
57259: CALL_OW 255
57263: EQUAL
57264: AND
57265: IFFALSE 57289
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57267: LD_VAR 0 5
57271: PUSH
57272: LD_INT 1
57274: ARRAY
57275: PPUSH
57276: LD_VAR 0 5
57280: PUSH
57281: LD_INT 2
57283: ARRAY
57284: PPUSH
57285: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57289: LD_ADDR_EXP 97
57293: PUSH
57294: LD_EXP 97
57298: PPUSH
57299: LD_VAR 0 4
57303: PPUSH
57304: LD_EXP 97
57308: PUSH
57309: LD_VAR 0 4
57313: ARRAY
57314: PPUSH
57315: LD_VAR 0 3
57319: PPUSH
57320: CALL_OW 3
57324: PPUSH
57325: CALL_OW 1
57329: ST_TO_ADDR
// end ; end ;
57330: GO 57159
57332: POP
57333: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57334: LD_VAR 0 1
57338: PPUSH
57339: LD_EXP 97
57343: PUSH
57344: LD_VAR 0 4
57348: ARRAY
57349: PUSH
57350: LD_INT 0
57352: PLUS
57353: PPUSH
57354: CALL_OW 505
// end ;
57358: LD_VAR 0 2
57362: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57363: LD_INT 0
57365: PPUSH
57366: PPUSH
57367: PPUSH
57368: PPUSH
// if not hack in hackTanks then
57369: LD_VAR 0 1
57373: PUSH
57374: LD_EXP 96
57378: IN
57379: NOT
57380: IFFALSE 57384
// exit ;
57382: GO 57469
// index := GetElementIndex ( hackTanks , hack ) ;
57384: LD_ADDR_VAR 0 5
57388: PUSH
57389: LD_EXP 96
57393: PPUSH
57394: LD_VAR 0 1
57398: PPUSH
57399: CALL 9045 0 2
57403: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57404: LD_ADDR_VAR 0 4
57408: PUSH
57409: DOUBLE
57410: LD_INT 1
57412: DEC
57413: ST_TO_ADDR
57414: LD_EXP 97
57418: PUSH
57419: LD_VAR 0 5
57423: ARRAY
57424: PUSH
57425: FOR_TO
57426: IFFALSE 57467
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57428: LD_EXP 97
57432: PUSH
57433: LD_VAR 0 5
57437: ARRAY
57438: PUSH
57439: LD_VAR 0 4
57443: ARRAY
57444: PUSH
57445: LD_INT 1
57447: ARRAY
57448: PUSH
57449: LD_VAR 0 2
57453: EQUAL
57454: IFFALSE 57465
// KillUnit ( vehicle ) ;
57456: LD_VAR 0 2
57460: PPUSH
57461: CALL_OW 66
57465: GO 57425
57467: POP
57468: POP
// end ;
57469: LD_VAR 0 3
57473: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57474: LD_EXP 101
57478: NOT
57479: IFFALSE 57514
57481: GO 57483
57483: DISABLE
// begin initMiner := true ;
57484: LD_ADDR_EXP 101
57488: PUSH
57489: LD_INT 1
57491: ST_TO_ADDR
// minersList := [ ] ;
57492: LD_ADDR_EXP 102
57496: PUSH
57497: EMPTY
57498: ST_TO_ADDR
// minerMinesList := [ ] ;
57499: LD_ADDR_EXP 103
57503: PUSH
57504: EMPTY
57505: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57506: LD_ADDR_EXP 104
57510: PUSH
57511: LD_INT 5
57513: ST_TO_ADDR
// end ;
57514: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57515: LD_EXP 101
57519: PUSH
57520: LD_INT 34
57522: PUSH
57523: LD_EXP 26
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PPUSH
57532: CALL_OW 69
57536: AND
57537: IFFALSE 58000
57539: GO 57541
57541: DISABLE
57542: LD_INT 0
57544: PPUSH
57545: PPUSH
57546: PPUSH
57547: PPUSH
// begin enable ;
57548: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57549: LD_ADDR_VAR 0 1
57553: PUSH
57554: LD_INT 34
57556: PUSH
57557: LD_EXP 26
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PPUSH
57566: CALL_OW 69
57570: PUSH
57571: FOR_IN
57572: IFFALSE 57644
// begin if not i in minersList then
57574: LD_VAR 0 1
57578: PUSH
57579: LD_EXP 102
57583: IN
57584: NOT
57585: IFFALSE 57642
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57587: LD_ADDR_EXP 102
57591: PUSH
57592: LD_EXP 102
57596: PPUSH
57597: LD_EXP 102
57601: PUSH
57602: LD_INT 1
57604: PLUS
57605: PPUSH
57606: LD_VAR 0 1
57610: PPUSH
57611: CALL_OW 1
57615: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57616: LD_ADDR_EXP 103
57620: PUSH
57621: LD_EXP 103
57625: PPUSH
57626: LD_EXP 103
57630: PUSH
57631: LD_INT 1
57633: PLUS
57634: PPUSH
57635: EMPTY
57636: PPUSH
57637: CALL_OW 1
57641: ST_TO_ADDR
// end end ;
57642: GO 57571
57644: POP
57645: POP
// for i := minerMinesList downto 1 do
57646: LD_ADDR_VAR 0 1
57650: PUSH
57651: DOUBLE
57652: LD_EXP 103
57656: INC
57657: ST_TO_ADDR
57658: LD_INT 1
57660: PUSH
57661: FOR_DOWNTO
57662: IFFALSE 57998
// begin if IsLive ( minersList [ i ] ) then
57664: LD_EXP 102
57668: PUSH
57669: LD_VAR 0 1
57673: ARRAY
57674: PPUSH
57675: CALL_OW 300
57679: IFFALSE 57707
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57681: LD_EXP 102
57685: PUSH
57686: LD_VAR 0 1
57690: ARRAY
57691: PPUSH
57692: LD_EXP 103
57696: PUSH
57697: LD_VAR 0 1
57701: ARRAY
57702: PPUSH
57703: CALL_OW 505
// if not minerMinesList [ i ] then
57707: LD_EXP 103
57711: PUSH
57712: LD_VAR 0 1
57716: ARRAY
57717: NOT
57718: IFFALSE 57722
// continue ;
57720: GO 57661
// for j := minerMinesList [ i ] downto 1 do
57722: LD_ADDR_VAR 0 2
57726: PUSH
57727: DOUBLE
57728: LD_EXP 103
57732: PUSH
57733: LD_VAR 0 1
57737: ARRAY
57738: INC
57739: ST_TO_ADDR
57740: LD_INT 1
57742: PUSH
57743: FOR_DOWNTO
57744: IFFALSE 57994
// begin side := GetSide ( minersList [ i ] ) ;
57746: LD_ADDR_VAR 0 3
57750: PUSH
57751: LD_EXP 102
57755: PUSH
57756: LD_VAR 0 1
57760: ARRAY
57761: PPUSH
57762: CALL_OW 255
57766: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57767: LD_ADDR_VAR 0 4
57771: PUSH
57772: LD_EXP 103
57776: PUSH
57777: LD_VAR 0 1
57781: ARRAY
57782: PUSH
57783: LD_VAR 0 2
57787: ARRAY
57788: PUSH
57789: LD_INT 1
57791: ARRAY
57792: PPUSH
57793: LD_EXP 103
57797: PUSH
57798: LD_VAR 0 1
57802: ARRAY
57803: PUSH
57804: LD_VAR 0 2
57808: ARRAY
57809: PUSH
57810: LD_INT 2
57812: ARRAY
57813: PPUSH
57814: CALL_OW 428
57818: ST_TO_ADDR
// if not tmp then
57819: LD_VAR 0 4
57823: NOT
57824: IFFALSE 57828
// continue ;
57826: GO 57743
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57828: LD_VAR 0 4
57832: PUSH
57833: LD_INT 81
57835: PUSH
57836: LD_VAR 0 3
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PPUSH
57845: CALL_OW 69
57849: IN
57850: PUSH
57851: LD_EXP 103
57855: PUSH
57856: LD_VAR 0 1
57860: ARRAY
57861: PUSH
57862: LD_VAR 0 2
57866: ARRAY
57867: PUSH
57868: LD_INT 1
57870: ARRAY
57871: PPUSH
57872: LD_EXP 103
57876: PUSH
57877: LD_VAR 0 1
57881: ARRAY
57882: PUSH
57883: LD_VAR 0 2
57887: ARRAY
57888: PUSH
57889: LD_INT 2
57891: ARRAY
57892: PPUSH
57893: CALL_OW 458
57897: AND
57898: IFFALSE 57992
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57900: LD_EXP 103
57904: PUSH
57905: LD_VAR 0 1
57909: ARRAY
57910: PUSH
57911: LD_VAR 0 2
57915: ARRAY
57916: PUSH
57917: LD_INT 1
57919: ARRAY
57920: PPUSH
57921: LD_EXP 103
57925: PUSH
57926: LD_VAR 0 1
57930: ARRAY
57931: PUSH
57932: LD_VAR 0 2
57936: ARRAY
57937: PUSH
57938: LD_INT 2
57940: ARRAY
57941: PPUSH
57942: LD_VAR 0 3
57946: PPUSH
57947: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57951: LD_ADDR_EXP 103
57955: PUSH
57956: LD_EXP 103
57960: PPUSH
57961: LD_VAR 0 1
57965: PPUSH
57966: LD_EXP 103
57970: PUSH
57971: LD_VAR 0 1
57975: ARRAY
57976: PPUSH
57977: LD_VAR 0 2
57981: PPUSH
57982: CALL_OW 3
57986: PPUSH
57987: CALL_OW 1
57991: ST_TO_ADDR
// end ; end ;
57992: GO 57743
57994: POP
57995: POP
// end ;
57996: GO 57661
57998: POP
57999: POP
// end ;
58000: PPOPN 4
58002: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
58003: LD_INT 0
58005: PPUSH
58006: PPUSH
// result := false ;
58007: LD_ADDR_VAR 0 4
58011: PUSH
58012: LD_INT 0
58014: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58015: LD_VAR 0 1
58019: PPUSH
58020: CALL_OW 264
58024: PUSH
58025: LD_EXP 26
58029: EQUAL
58030: NOT
58031: IFFALSE 58035
// exit ;
58033: GO 58275
// index := GetElementIndex ( minersList , unit ) ;
58035: LD_ADDR_VAR 0 5
58039: PUSH
58040: LD_EXP 102
58044: PPUSH
58045: LD_VAR 0 1
58049: PPUSH
58050: CALL 9045 0 2
58054: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58055: LD_EXP 103
58059: PUSH
58060: LD_VAR 0 5
58064: ARRAY
58065: PUSH
58066: LD_EXP 104
58070: GREATEREQUAL
58071: IFFALSE 58075
// exit ;
58073: GO 58275
// ComMoveXY ( unit , x , y ) ;
58075: LD_VAR 0 1
58079: PPUSH
58080: LD_VAR 0 2
58084: PPUSH
58085: LD_VAR 0 3
58089: PPUSH
58090: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58094: LD_INT 35
58096: PPUSH
58097: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58101: LD_VAR 0 1
58105: PPUSH
58106: LD_VAR 0 2
58110: PPUSH
58111: LD_VAR 0 3
58115: PPUSH
58116: CALL 39442 0 3
58120: NOT
58121: PUSH
58122: LD_VAR 0 1
58126: PPUSH
58127: CALL_OW 314
58131: AND
58132: IFFALSE 58136
// exit ;
58134: GO 58275
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58136: LD_VAR 0 2
58140: PPUSH
58141: LD_VAR 0 3
58145: PPUSH
58146: CALL_OW 428
58150: PUSH
58151: LD_VAR 0 1
58155: EQUAL
58156: PUSH
58157: LD_VAR 0 1
58161: PPUSH
58162: CALL_OW 314
58166: NOT
58167: AND
58168: IFFALSE 58094
// PlaySoundXY ( x , y , PlantMine ) ;
58170: LD_VAR 0 2
58174: PPUSH
58175: LD_VAR 0 3
58179: PPUSH
58180: LD_STRING PlantMine
58182: PPUSH
58183: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
58187: LD_VAR 0 2
58191: PPUSH
58192: LD_VAR 0 3
58196: PPUSH
58197: LD_VAR 0 1
58201: PPUSH
58202: CALL_OW 255
58206: PPUSH
58207: LD_INT 0
58209: PPUSH
58210: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58214: LD_ADDR_EXP 103
58218: PUSH
58219: LD_EXP 103
58223: PPUSH
58224: LD_VAR 0 5
58228: PUSH
58229: LD_EXP 103
58233: PUSH
58234: LD_VAR 0 5
58238: ARRAY
58239: PUSH
58240: LD_INT 1
58242: PLUS
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PPUSH
58248: LD_VAR 0 2
58252: PUSH
58253: LD_VAR 0 3
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PPUSH
58262: CALL 9260 0 3
58266: ST_TO_ADDR
// result := true ;
58267: LD_ADDR_VAR 0 4
58271: PUSH
58272: LD_INT 1
58274: ST_TO_ADDR
// end ;
58275: LD_VAR 0 4
58279: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58280: LD_INT 0
58282: PPUSH
58283: PPUSH
58284: PPUSH
// if not unit in minersList then
58285: LD_VAR 0 1
58289: PUSH
58290: LD_EXP 102
58294: IN
58295: NOT
58296: IFFALSE 58300
// exit ;
58298: GO 58692
// index := GetElementIndex ( minersList , unit ) ;
58300: LD_ADDR_VAR 0 6
58304: PUSH
58305: LD_EXP 102
58309: PPUSH
58310: LD_VAR 0 1
58314: PPUSH
58315: CALL 9045 0 2
58319: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58320: LD_ADDR_VAR 0 5
58324: PUSH
58325: DOUBLE
58326: LD_EXP 103
58330: PUSH
58331: LD_VAR 0 6
58335: ARRAY
58336: INC
58337: ST_TO_ADDR
58338: LD_INT 1
58340: PUSH
58341: FOR_DOWNTO
58342: IFFALSE 58503
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
58344: LD_EXP 103
58348: PUSH
58349: LD_VAR 0 6
58353: ARRAY
58354: PUSH
58355: LD_VAR 0 5
58359: ARRAY
58360: PUSH
58361: LD_INT 1
58363: ARRAY
58364: PUSH
58365: LD_VAR 0 2
58369: EQUAL
58370: PUSH
58371: LD_EXP 103
58375: PUSH
58376: LD_VAR 0 6
58380: ARRAY
58381: PUSH
58382: LD_VAR 0 5
58386: ARRAY
58387: PUSH
58388: LD_INT 2
58390: ARRAY
58391: PUSH
58392: LD_VAR 0 3
58396: EQUAL
58397: AND
58398: IFFALSE 58501
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58400: LD_EXP 103
58404: PUSH
58405: LD_VAR 0 6
58409: ARRAY
58410: PUSH
58411: LD_VAR 0 5
58415: ARRAY
58416: PUSH
58417: LD_INT 1
58419: ARRAY
58420: PPUSH
58421: LD_EXP 103
58425: PUSH
58426: LD_VAR 0 6
58430: ARRAY
58431: PUSH
58432: LD_VAR 0 5
58436: ARRAY
58437: PUSH
58438: LD_INT 2
58440: ARRAY
58441: PPUSH
58442: LD_VAR 0 1
58446: PPUSH
58447: CALL_OW 255
58451: PPUSH
58452: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58456: LD_ADDR_EXP 103
58460: PUSH
58461: LD_EXP 103
58465: PPUSH
58466: LD_VAR 0 6
58470: PPUSH
58471: LD_EXP 103
58475: PUSH
58476: LD_VAR 0 6
58480: ARRAY
58481: PPUSH
58482: LD_VAR 0 5
58486: PPUSH
58487: CALL_OW 3
58491: PPUSH
58492: CALL_OW 1
58496: ST_TO_ADDR
// exit ;
58497: POP
58498: POP
58499: GO 58692
// end ; end ;
58501: GO 58341
58503: POP
58504: POP
// for i := minerMinesList [ index ] downto 1 do
58505: LD_ADDR_VAR 0 5
58509: PUSH
58510: DOUBLE
58511: LD_EXP 103
58515: PUSH
58516: LD_VAR 0 6
58520: ARRAY
58521: INC
58522: ST_TO_ADDR
58523: LD_INT 1
58525: PUSH
58526: FOR_DOWNTO
58527: IFFALSE 58690
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58529: LD_EXP 103
58533: PUSH
58534: LD_VAR 0 6
58538: ARRAY
58539: PUSH
58540: LD_VAR 0 5
58544: ARRAY
58545: PUSH
58546: LD_INT 1
58548: ARRAY
58549: PPUSH
58550: LD_EXP 103
58554: PUSH
58555: LD_VAR 0 6
58559: ARRAY
58560: PUSH
58561: LD_VAR 0 5
58565: ARRAY
58566: PUSH
58567: LD_INT 2
58569: ARRAY
58570: PPUSH
58571: LD_VAR 0 2
58575: PPUSH
58576: LD_VAR 0 3
58580: PPUSH
58581: CALL_OW 298
58585: PUSH
58586: LD_INT 6
58588: LESS
58589: IFFALSE 58688
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58591: LD_EXP 103
58595: PUSH
58596: LD_VAR 0 6
58600: ARRAY
58601: PUSH
58602: LD_VAR 0 5
58606: ARRAY
58607: PUSH
58608: LD_INT 1
58610: ARRAY
58611: PPUSH
58612: LD_EXP 103
58616: PUSH
58617: LD_VAR 0 6
58621: ARRAY
58622: PUSH
58623: LD_VAR 0 5
58627: ARRAY
58628: PUSH
58629: LD_INT 2
58631: ARRAY
58632: PPUSH
58633: LD_VAR 0 1
58637: PPUSH
58638: CALL_OW 255
58642: PPUSH
58643: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58647: LD_ADDR_EXP 103
58651: PUSH
58652: LD_EXP 103
58656: PPUSH
58657: LD_VAR 0 6
58661: PPUSH
58662: LD_EXP 103
58666: PUSH
58667: LD_VAR 0 6
58671: ARRAY
58672: PPUSH
58673: LD_VAR 0 5
58677: PPUSH
58678: CALL_OW 3
58682: PPUSH
58683: CALL_OW 1
58687: ST_TO_ADDR
// end ; end ;
58688: GO 58526
58690: POP
58691: POP
// end ;
58692: LD_VAR 0 4
58696: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58697: LD_INT 0
58699: PPUSH
58700: PPUSH
58701: PPUSH
58702: PPUSH
58703: PPUSH
58704: PPUSH
58705: PPUSH
58706: PPUSH
58707: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58708: LD_VAR 0 1
58712: PPUSH
58713: CALL_OW 264
58717: PUSH
58718: LD_EXP 26
58722: EQUAL
58723: NOT
58724: PUSH
58725: LD_VAR 0 1
58729: PUSH
58730: LD_EXP 102
58734: IN
58735: NOT
58736: OR
58737: IFFALSE 58741
// exit ;
58739: GO 59063
// index := GetElementIndex ( minersList , unit ) ;
58741: LD_ADDR_VAR 0 6
58745: PUSH
58746: LD_EXP 102
58750: PPUSH
58751: LD_VAR 0 1
58755: PPUSH
58756: CALL 9045 0 2
58760: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58761: LD_ADDR_VAR 0 8
58765: PUSH
58766: LD_EXP 104
58770: PUSH
58771: LD_EXP 103
58775: PUSH
58776: LD_VAR 0 6
58780: ARRAY
58781: MINUS
58782: ST_TO_ADDR
// if not minesFreeAmount then
58783: LD_VAR 0 8
58787: NOT
58788: IFFALSE 58792
// exit ;
58790: GO 59063
// tmp := [ ] ;
58792: LD_ADDR_VAR 0 7
58796: PUSH
58797: EMPTY
58798: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58799: LD_ADDR_VAR 0 5
58803: PUSH
58804: DOUBLE
58805: LD_INT 1
58807: DEC
58808: ST_TO_ADDR
58809: LD_VAR 0 8
58813: PUSH
58814: FOR_TO
58815: IFFALSE 59010
// begin _d := rand ( 0 , 5 ) ;
58817: LD_ADDR_VAR 0 11
58821: PUSH
58822: LD_INT 0
58824: PPUSH
58825: LD_INT 5
58827: PPUSH
58828: CALL_OW 12
58832: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58833: LD_ADDR_VAR 0 12
58837: PUSH
58838: LD_INT 2
58840: PPUSH
58841: LD_INT 6
58843: PPUSH
58844: CALL_OW 12
58848: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58849: LD_ADDR_VAR 0 9
58853: PUSH
58854: LD_VAR 0 2
58858: PPUSH
58859: LD_VAR 0 11
58863: PPUSH
58864: LD_VAR 0 12
58868: PPUSH
58869: CALL_OW 272
58873: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58874: LD_ADDR_VAR 0 10
58878: PUSH
58879: LD_VAR 0 3
58883: PPUSH
58884: LD_VAR 0 11
58888: PPUSH
58889: LD_VAR 0 12
58893: PPUSH
58894: CALL_OW 273
58898: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58899: LD_VAR 0 9
58903: PPUSH
58904: LD_VAR 0 10
58908: PPUSH
58909: CALL_OW 488
58913: PUSH
58914: LD_VAR 0 9
58918: PUSH
58919: LD_VAR 0 10
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_VAR 0 7
58932: IN
58933: NOT
58934: AND
58935: PUSH
58936: LD_VAR 0 9
58940: PPUSH
58941: LD_VAR 0 10
58945: PPUSH
58946: CALL_OW 458
58950: NOT
58951: AND
58952: IFFALSE 58994
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58954: LD_ADDR_VAR 0 7
58958: PUSH
58959: LD_VAR 0 7
58963: PPUSH
58964: LD_VAR 0 7
58968: PUSH
58969: LD_INT 1
58971: PLUS
58972: PPUSH
58973: LD_VAR 0 9
58977: PUSH
58978: LD_VAR 0 10
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PPUSH
58987: CALL_OW 1
58991: ST_TO_ADDR
58992: GO 59008
// i := i - 1 ;
58994: LD_ADDR_VAR 0 5
58998: PUSH
58999: LD_VAR 0 5
59003: PUSH
59004: LD_INT 1
59006: MINUS
59007: ST_TO_ADDR
// end ;
59008: GO 58814
59010: POP
59011: POP
// for i in tmp do
59012: LD_ADDR_VAR 0 5
59016: PUSH
59017: LD_VAR 0 7
59021: PUSH
59022: FOR_IN
59023: IFFALSE 59061
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59025: LD_VAR 0 1
59029: PPUSH
59030: LD_VAR 0 5
59034: PUSH
59035: LD_INT 1
59037: ARRAY
59038: PPUSH
59039: LD_VAR 0 5
59043: PUSH
59044: LD_INT 2
59046: ARRAY
59047: PPUSH
59048: CALL 58003 0 3
59052: NOT
59053: IFFALSE 59059
// exit ;
59055: POP
59056: POP
59057: GO 59063
59059: GO 59022
59061: POP
59062: POP
// end ;
59063: LD_VAR 0 4
59067: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
59068: LD_INT 0
59070: PPUSH
59071: PPUSH
59072: PPUSH
59073: PPUSH
59074: PPUSH
59075: PPUSH
59076: PPUSH
// if not GetClass ( unit ) = class_sniper then
59077: LD_VAR 0 1
59081: PPUSH
59082: CALL_OW 257
59086: PUSH
59087: LD_INT 5
59089: EQUAL
59090: NOT
59091: IFFALSE 59095
// exit ;
59093: GO 59483
// dist := 8 ;
59095: LD_ADDR_VAR 0 5
59099: PUSH
59100: LD_INT 8
59102: ST_TO_ADDR
// viewRange := 12 ;
59103: LD_ADDR_VAR 0 7
59107: PUSH
59108: LD_INT 12
59110: ST_TO_ADDR
// side := GetSide ( unit ) ;
59111: LD_ADDR_VAR 0 6
59115: PUSH
59116: LD_VAR 0 1
59120: PPUSH
59121: CALL_OW 255
59125: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59126: LD_INT 61
59128: PPUSH
59129: LD_VAR 0 6
59133: PPUSH
59134: CALL_OW 321
59138: PUSH
59139: LD_INT 2
59141: EQUAL
59142: IFFALSE 59152
// viewRange := 16 ;
59144: LD_ADDR_VAR 0 7
59148: PUSH
59149: LD_INT 16
59151: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59152: LD_VAR 0 1
59156: PPUSH
59157: LD_VAR 0 2
59161: PPUSH
59162: LD_VAR 0 3
59166: PPUSH
59167: CALL_OW 297
59171: PUSH
59172: LD_VAR 0 5
59176: GREATER
59177: IFFALSE 59256
// begin ComMoveXY ( unit , x , y ) ;
59179: LD_VAR 0 1
59183: PPUSH
59184: LD_VAR 0 2
59188: PPUSH
59189: LD_VAR 0 3
59193: PPUSH
59194: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59198: LD_INT 35
59200: PPUSH
59201: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59205: LD_VAR 0 1
59209: PPUSH
59210: LD_VAR 0 2
59214: PPUSH
59215: LD_VAR 0 3
59219: PPUSH
59220: CALL 39442 0 3
59224: NOT
59225: IFFALSE 59229
// exit ;
59227: GO 59483
// until GetDistUnitXY ( unit , x , y ) < dist ;
59229: LD_VAR 0 1
59233: PPUSH
59234: LD_VAR 0 2
59238: PPUSH
59239: LD_VAR 0 3
59243: PPUSH
59244: CALL_OW 297
59248: PUSH
59249: LD_VAR 0 5
59253: LESS
59254: IFFALSE 59198
// end ; ComTurnXY ( unit , x , y ) ;
59256: LD_VAR 0 1
59260: PPUSH
59261: LD_VAR 0 2
59265: PPUSH
59266: LD_VAR 0 3
59270: PPUSH
59271: CALL_OW 118
// wait ( 5 ) ;
59275: LD_INT 5
59277: PPUSH
59278: CALL_OW 67
// _d := GetDir ( unit ) ;
59282: LD_ADDR_VAR 0 10
59286: PUSH
59287: LD_VAR 0 1
59291: PPUSH
59292: CALL_OW 254
59296: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
59297: LD_ADDR_VAR 0 8
59301: PUSH
59302: LD_VAR 0 1
59306: PPUSH
59307: CALL_OW 250
59311: PPUSH
59312: LD_VAR 0 10
59316: PPUSH
59317: LD_VAR 0 5
59321: PPUSH
59322: CALL_OW 272
59326: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
59327: LD_ADDR_VAR 0 9
59331: PUSH
59332: LD_VAR 0 1
59336: PPUSH
59337: CALL_OW 251
59341: PPUSH
59342: LD_VAR 0 10
59346: PPUSH
59347: LD_VAR 0 5
59351: PPUSH
59352: CALL_OW 273
59356: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59357: LD_VAR 0 8
59361: PPUSH
59362: LD_VAR 0 9
59366: PPUSH
59367: CALL_OW 488
59371: NOT
59372: IFFALSE 59376
// exit ;
59374: GO 59483
// ComAnimCustom ( unit , 1 ) ;
59376: LD_VAR 0 1
59380: PPUSH
59381: LD_INT 1
59383: PPUSH
59384: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59388: LD_VAR 0 8
59392: PPUSH
59393: LD_VAR 0 9
59397: PPUSH
59398: LD_VAR 0 6
59402: PPUSH
59403: LD_VAR 0 7
59407: PPUSH
59408: CALL_OW 330
// repeat wait ( 1 ) ;
59412: LD_INT 1
59414: PPUSH
59415: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
59419: LD_VAR 0 1
59423: PPUSH
59424: CALL_OW 316
59428: PUSH
59429: LD_VAR 0 1
59433: PPUSH
59434: CALL_OW 314
59438: OR
59439: PUSH
59440: LD_VAR 0 1
59444: PPUSH
59445: CALL_OW 302
59449: NOT
59450: OR
59451: PUSH
59452: LD_VAR 0 1
59456: PPUSH
59457: CALL_OW 301
59461: OR
59462: IFFALSE 59412
// RemoveSeeing ( _x , _y , side ) ;
59464: LD_VAR 0 8
59468: PPUSH
59469: LD_VAR 0 9
59473: PPUSH
59474: LD_VAR 0 6
59478: PPUSH
59479: CALL_OW 331
// end ; end_of_file
59483: LD_VAR 0 4
59487: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59488: LD_VAR 0 1
59492: PPUSH
59493: LD_VAR 0 2
59497: PPUSH
59498: LD_VAR 0 3
59502: PPUSH
59503: LD_VAR 0 4
59507: PPUSH
59508: LD_VAR 0 5
59512: PPUSH
59513: LD_VAR 0 6
59517: PPUSH
59518: CALL 42138 0 6
// end ;
59522: PPOPN 6
59524: END
