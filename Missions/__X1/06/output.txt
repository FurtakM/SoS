// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 63324 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 1 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 1
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6854 0 2
// PrepareArabian ;
  36: CALL 361 0 0
// PrepareRussian ;
  40: CALL 7701 0 0
// Action ;
  44: CALL 15416 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_STRING 04_2_GaidarKilled
  88: PPUSH
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_STRING 05_ConvoySavedCounter
 104: PPUSH
 105: LD_INT 0
 107: PPUSH
 108: CALL_OW 30
 112: ST_TO_ADDR
// bergkampfArrived := false ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarArrived := false ;
 121: LD_ADDR_EXP 6
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// outpostDestroyed := false ;
 129: LD_ADDR_EXP 4
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ruLoseCounter := 0 ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfScriptBase := false ;
 145: LD_ADDR_EXP 9
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// omarScriptBase := false ;
 153: LD_ADDR_EXP 10
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// linkedWithRolf := 0 ;
 161: LD_ADDR_EXP 12
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 169: LD_ADDR_EXP 26
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// rolfDied := false ;
 177: LD_ADDR_EXP 13
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// leninSpotted := false ;
 185: LD_ADDR_EXP 14
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// mortarConstructed := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// rolfHasVehicles := false ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// leninScriptBase := true ;
 209: LD_ADDR_EXP 11
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// rolfWantVehicles := false ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omarWantVehicles := false ;
 225: LD_ADDR_EXP 18
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// omarHasVehicles := false ;
 233: LD_ADDR_EXP 22
 237: PUSH
 238: LD_INT 0
 240: ST_TO_ADDR
// escapeAllowed := false ;
 241: LD_ADDR_EXP 24
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$00 ] [ Difficulty ] ;
 249: LD_ADDR_EXP 19
 253: PUSH
 254: LD_INT 16800
 256: PUSH
 257: LD_INT 12600
 259: PUSH
 260: LD_INT 10500
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] ;
 274: LD_ADDR_EXP 20
 278: PUSH
 279: LD_INT 21000
 281: PUSH
 282: LD_INT 18900
 284: PUSH
 285: LD_INT 16800
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: PUSH
 293: LD_OWVAR 67
 297: ARRAY
 298: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 299: LD_ADDR_EXP 21
 303: PUSH
 304: LD_INT 4
 306: PUSH
 307: LD_INT 5
 309: PUSH
 310: LD_INT 6
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: LD_OWVAR 67
 322: ARRAY
 323: ST_TO_ADDR
// omarAttack := false ;
 324: LD_ADDR_EXP 23
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// disableAttackOnHeike := false ;
 332: LD_ADDR_EXP 27
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 340: LD_ADDR_EXP 25
 344: PUSH
 345: LD_INT 8400
 347: ST_TO_ADDR
// firstAttack := true ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 1
 355: ST_TO_ADDR
// end ; end_of_file
 356: LD_VAR 0 1
 360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 361: LD_INT 0
 363: PPUSH
 364: PPUSH
 365: PPUSH
 366: PPUSH
 367: PPUSH
 368: PPUSH
 369: PPUSH
 370: PPUSH
 371: PPUSH
 372: PPUSH
 373: PPUSH
 374: PPUSH
// uc_nation := 2 ;
 375: LD_ADDR_OWVAR 21
 379: PUSH
 380: LD_INT 2
 382: ST_TO_ADDR
// uc_side := 5 ;
 383: LD_ADDR_OWVAR 20
 387: PUSH
 388: LD_INT 5
 390: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 391: LD_ADDR_EXP 37
 395: PUSH
 396: LD_STRING Abdul
 398: PPUSH
 399: LD_INT 0
 401: PPUSH
 402: LD_STRING 
 404: PPUSH
 405: CALL 24569 0 3
 409: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 410: LD_ADDR_EXP 39
 414: PUSH
 415: LD_STRING Omar
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 24569 0 3
 428: ST_TO_ADDR
// uc_side := 2 ;
 429: LD_ADDR_OWVAR 20
 433: PUSH
 434: LD_INT 2
 436: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 437: LD_ADDR_EXP 29
 441: PUSH
 442: LD_STRING Heike
 444: PPUSH
 445: LD_EXP 1
 449: NOT
 450: PPUSH
 451: LD_EXP 2
 455: PPUSH
 456: CALL 24569 0 3
 460: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 461: LD_ADDR_EXP 32
 465: PUSH
 466: LD_STRING Ibrahim
 468: PPUSH
 469: LD_EXP 1
 473: NOT
 474: PPUSH
 475: LD_EXP 2
 479: PPUSH
 480: CALL 24569 0 3
 484: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 485: LD_ADDR_EXP 30
 489: PUSH
 490: LD_STRING Givi
 492: PPUSH
 493: LD_EXP 1
 497: NOT
 498: PPUSH
 499: LD_EXP 2
 503: PPUSH
 504: CALL 24569 0 3
 508: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 509: LD_ADDR_EXP 33
 513: PUSH
 514: LD_STRING Kamil
 516: PPUSH
 517: LD_EXP 1
 521: NOT
 522: PPUSH
 523: LD_EXP 2
 527: PPUSH
 528: CALL 24569 0 3
 532: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 533: LD_ADDR_EXP 34
 537: PUSH
 538: LD_STRING Kaia
 540: PPUSH
 541: LD_EXP 1
 545: NOT
 546: PPUSH
 547: LD_EXP 2
 551: PPUSH
 552: CALL 24569 0 3
 556: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 557: LD_ADDR_EXP 35
 561: PUSH
 562: LD_STRING Sophia
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_EXP 2
 575: PPUSH
 576: CALL 24569 0 3
 580: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 581: LD_ADDR_EXP 36
 585: PUSH
 586: LD_STRING Markov
 588: PPUSH
 589: LD_EXP 1
 593: NOT
 594: PPUSH
 595: LD_EXP 2
 599: PPUSH
 600: CALL 24569 0 3
 604: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_STRING Aviradze
 612: PPUSH
 613: LD_EXP 1
 617: NOT
 618: PPUSH
 619: LD_EXP 2
 623: PPUSH
 624: CALL 24569 0 3
 628: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 629: LD_ADDR_EXP 40
 633: PUSH
 634: LD_STRING Kurt
 636: PPUSH
 637: LD_EXP 1
 641: NOT
 642: PPUSH
 643: LD_EXP 2
 647: PPUSH
 648: CALL 24569 0 3
 652: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 653: LD_ADDR_EXP 31
 657: PUSH
 658: LD_STRING Mike
 660: PPUSH
 661: LD_EXP 1
 665: NOT
 666: PPUSH
 667: LD_EXP 2
 671: PPUSH
 672: CALL 24569 0 3
 676: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 677: LD_ADDR_EXP 38
 681: PUSH
 682: LD_STRING Olaf
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: LD_STRING 
 690: PPUSH
 691: CALL 24569 0 3
 695: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 696: LD_ADDR_EXP 44
 700: PUSH
 701: LD_STRING 05_others
 703: PPUSH
 704: CALL_OW 31
 708: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 709: LD_ADDR_EXP 45
 713: PUSH
 714: LD_STRING 05_apes
 716: PPUSH
 717: CALL_OW 31
 721: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 722: LD_ADDR_VAR 0 5
 726: PUSH
 727: LD_STRING 05_Radar
 729: PPUSH
 730: LD_EXP 1
 734: PPUSH
 735: CALL_OW 30
 739: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 740: LD_ADDR_VAR 0 6
 744: PUSH
 745: LD_STRING 05_RemoteControl
 747: PPUSH
 748: LD_EXP 1
 752: PPUSH
 753: CALL_OW 30
 757: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 758: LD_ADDR_VAR 0 7
 762: PUSH
 763: LD_STRING 05_DrugsTested
 765: PPUSH
 766: LD_EXP 1
 770: PPUSH
 771: CALL_OW 30
 775: ST_TO_ADDR
// if hasDrugs then
 776: LD_VAR 0 7
 780: IFFALSE 795
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 782: LD_INT 5
 784: PPUSH
 785: LD_INT 2
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: CALL_OW 322
// if hasRadar then
 795: LD_VAR 0 5
 799: IFFALSE 814
// SetTech ( tech_radar , 2 , state_researched ) ;
 801: LD_INT 6
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: CALL_OW 322
// if hasRemote then
 814: LD_VAR 0 6
 818: IFFALSE 833
// SetTech ( tech_remCont , 2 , state_researched ) ;
 820: LD_INT 15
 822: PPUSH
 823: LD_INT 2
 825: PPUSH
 826: LD_INT 2
 828: PPUSH
 829: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 833: LD_ADDR_VAR 0 12
 837: PUSH
 838: LD_INT 5
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 517
 848: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 849: LD_ADDR_VAR 0 2
 853: PUSH
 854: DOUBLE
 855: LD_INT 1
 857: DEC
 858: ST_TO_ADDR
 859: LD_VAR 0 12
 863: PUSH
 864: LD_INT 1
 866: ARRAY
 867: PUSH
 868: FOR_TO
 869: IFFALSE 946
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 871: LD_VAR 0 12
 875: PUSH
 876: LD_INT 1
 878: ARRAY
 879: PUSH
 880: LD_VAR 0 2
 884: ARRAY
 885: PPUSH
 886: LD_VAR 0 12
 890: PUSH
 891: LD_INT 2
 893: ARRAY
 894: PUSH
 895: LD_VAR 0 2
 899: ARRAY
 900: PPUSH
 901: CALL_OW 351
 905: IFFALSE 944
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 907: LD_VAR 0 12
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PUSH
 916: LD_VAR 0 2
 920: ARRAY
 921: PPUSH
 922: LD_VAR 0 12
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: PUSH
 931: LD_VAR 0 2
 935: ARRAY
 936: PPUSH
 937: LD_INT 2
 939: PPUSH
 940: CALL_OW 244
 944: GO 868
 946: POP
 947: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 948: LD_ADDR_VAR 0 4
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 206
 958: PUSH
 959: LD_INT 80
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 32
 973: PUSH
 974: LD_INT 221
 976: PUSH
 977: LD_INT 95
 979: PUSH
 980: LD_INT 5
 982: PUSH
 983: LD_INT 23
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 32
 995: PUSH
 996: LD_INT 223
 998: PUSH
 999: LD_INT 88
1001: PUSH
1002: LD_INT 5
1004: PUSH
1005: LD_INT 24
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: PUSH
1015: LD_INT 32
1017: PUSH
1018: LD_INT 202
1020: PUSH
1021: LD_INT 64
1023: PUSH
1024: LD_INT 2
1026: PUSH
1027: LD_INT 25
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 203
1042: PUSH
1043: LD_INT 91
1045: PUSH
1046: LD_INT 1
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_INT 8
1057: PUSH
1058: LD_INT 217
1060: PUSH
1061: LD_INT 78
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_INT 27
1075: PUSH
1076: LD_INT 220
1078: PUSH
1079: LD_INT 99
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 27
1093: PUSH
1094: LD_INT 220
1096: PUSH
1097: LD_INT 103
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 27
1111: PUSH
1112: LD_INT 216
1114: PUSH
1115: LD_INT 102
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 17
1129: PUSH
1130: LD_INT 203
1132: PUSH
1133: LD_INT 94
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: PUSH
1145: LD_INT 23
1147: PUSH
1148: LD_INT 200
1150: PUSH
1151: LD_INT 88
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 16
1165: PUSH
1166: LD_INT 199
1168: PUSH
1169: LD_INT 91
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 26
1183: PUSH
1184: LD_INT 197
1186: PUSH
1187: LD_INT 81
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 26
1201: PUSH
1202: LD_INT 197
1204: PUSH
1205: LD_INT 78
1207: PUSH
1208: LD_INT 3
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: ST_TO_ADDR
// if hasRadar then
1233: LD_VAR 0 5
1237: IFFALSE 1281
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1239: LD_ADDR_VAR 0 4
1243: PUSH
1244: LD_VAR 0 4
1248: PPUSH
1249: LD_VAR 0 4
1253: PUSH
1254: LD_INT 1
1256: PLUS
1257: PPUSH
1258: LD_INT 20
1260: PUSH
1261: LD_INT 203
1263: PUSH
1264: LD_INT 87
1266: PUSH
1267: LD_INT 3
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PPUSH
1276: CALL_OW 1
1280: ST_TO_ADDR
// if hasRemote then
1281: LD_VAR 0 6
1285: IFFALSE 1329
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1287: LD_ADDR_VAR 0 4
1291: PUSH
1292: LD_VAR 0 4
1296: PPUSH
1297: LD_VAR 0 4
1301: PUSH
1302: LD_INT 1
1304: PLUS
1305: PPUSH
1306: LD_INT 22
1308: PUSH
1309: LD_INT 207
1311: PUSH
1312: LD_INT 95
1314: PUSH
1315: LD_INT 5
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 1
1328: ST_TO_ADDR
// for i in base do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: FOR_IN
1340: IFFALSE 1521
// begin bc_type := i [ 1 ] ;
1342: LD_ADDR_OWVAR 42
1346: PUSH
1347: LD_VAR 0 2
1351: PUSH
1352: LD_INT 1
1354: ARRAY
1355: ST_TO_ADDR
// bc_level := 3 ;
1356: LD_ADDR_OWVAR 43
1360: PUSH
1361: LD_INT 3
1363: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1364: LD_VAR 0 2
1368: PUSH
1369: LD_INT 1
1371: ARRAY
1372: PUSH
1373: LD_INT 8
1375: EQUAL
1376: IFFALSE 1411
// begin bc_kind1 := b_lab_weapon ;
1378: LD_ADDR_OWVAR 44
1382: PUSH
1383: LD_INT 10
1385: ST_TO_ADDR
// if hasRadar then
1386: LD_VAR 0 5
1390: IFFALSE 1402
// bc_kind2 := b_lab_opto else
1392: LD_ADDR_OWVAR 45
1396: PUSH
1397: LD_INT 15
1399: ST_TO_ADDR
1400: GO 1411
// bc_kind2 := - 1 ;
1402: LD_ADDR_OWVAR 45
1406: PUSH
1407: LD_INT 1
1409: NEG
1410: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1411: LD_ADDR_VAR 0 3
1415: PUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_INT 2
1423: ARRAY
1424: PPUSH
1425: LD_VAR 0 2
1429: PUSH
1430: LD_INT 3
1432: ARRAY
1433: PPUSH
1434: LD_VAR 0 2
1438: PUSH
1439: LD_INT 4
1441: ARRAY
1442: PPUSH
1443: CALL_OW 47
1447: ST_TO_ADDR
// if i > 4 then
1448: LD_VAR 0 2
1452: PUSH
1453: LD_INT 4
1455: GREATER
1456: IFFALSE 1476
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1458: LD_VAR 0 3
1462: PPUSH
1463: LD_VAR 0 2
1467: PUSH
1468: LD_INT 5
1470: ARRAY
1471: PPUSH
1472: CALL_OW 431
// if i [ 1 ] = b_bunker then
1476: LD_VAR 0 2
1480: PUSH
1481: LD_INT 1
1483: ARRAY
1484: PUSH
1485: LD_INT 32
1487: EQUAL
1488: IFFALSE 1519
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1490: LD_ADDR_VAR 0 11
1494: PUSH
1495: LD_VAR 0 11
1499: PPUSH
1500: LD_VAR 0 11
1504: PUSH
1505: LD_INT 1
1507: PLUS
1508: PPUSH
1509: LD_VAR 0 3
1513: PPUSH
1514: CALL_OW 1
1518: ST_TO_ADDR
// end ;
1519: GO 1339
1521: POP
1522: POP
// depot := HexInfo ( 206 , 80 ) ;
1523: LD_ADDR_VAR 0 9
1527: PUSH
1528: LD_INT 206
1530: PPUSH
1531: LD_INT 80
1533: PPUSH
1534: CALL_OW 428
1538: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1539: LD_ADDR_VAR 0 8
1543: PUSH
1544: LD_INT 203
1546: PPUSH
1547: LD_INT 91
1549: PPUSH
1550: CALL_OW 428
1554: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1555: LD_ADDR_VAR 0 10
1559: PUSH
1560: LD_INT 217
1562: PPUSH
1563: LD_INT 78
1565: PPUSH
1566: CALL_OW 428
1570: ST_TO_ADDR
// arDepot := depot ;
1571: LD_ADDR_EXP 43
1575: PUSH
1576: LD_VAR 0 9
1580: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1581: LD_VAR 0 9
1585: PPUSH
1586: CALL_OW 274
1590: PPUSH
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 360
1596: PUSH
1597: LD_INT 260
1599: PUSH
1600: LD_INT 160
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: LD_OWVAR 67
1612: ARRAY
1613: PPUSH
1614: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 ] [ Difficulty ] ) ;
1618: LD_VAR 0 9
1622: PPUSH
1623: CALL_OW 274
1627: PPUSH
1628: LD_INT 2
1630: PPUSH
1631: LD_INT 200
1633: PUSH
1634: LD_INT 170
1636: PUSH
1637: LD_INT 130
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_OWVAR 67
1649: ARRAY
1650: PPUSH
1651: CALL_OW 277
// uc_nation := 2 ;
1655: LD_ADDR_OWVAR 21
1659: PUSH
1660: LD_INT 2
1662: ST_TO_ADDR
// uc_side := 2 ;
1663: LD_ADDR_OWVAR 20
1667: PUSH
1668: LD_INT 2
1670: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1671: LD_INT 13
1673: PPUSH
1674: LD_INT 1
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: LD_INT 27
1682: PPUSH
1683: LD_INT 33
1685: PPUSH
1686: CALL 29433 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1690: CALL_OW 45
1694: PPUSH
1695: LD_INT 190
1697: PPUSH
1698: LD_INT 64
1700: PPUSH
1701: LD_INT 5
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL 63238 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1711: LD_INT 13
1713: PPUSH
1714: LD_INT 1
1716: PPUSH
1717: LD_INT 1
1719: PPUSH
1720: LD_INT 25
1722: PPUSH
1723: LD_INT 22
1725: PPUSH
1726: CALL 29433 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1730: CALL_OW 45
1734: PPUSH
1735: LD_INT 188
1737: PPUSH
1738: LD_INT 67
1740: PPUSH
1741: LD_INT 5
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL 63238 0 5
// if hasRemote then
1751: LD_VAR 0 6
1755: IFFALSE 1837
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1757: LD_INT 13
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_INT 1
1765: PPUSH
1766: LD_INT 31
1768: PPUSH
1769: LD_INT 35
1771: PPUSH
1772: CALL 29433 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1776: CALL_OW 45
1780: PPUSH
1781: LD_INT 191
1783: PPUSH
1784: LD_INT 71
1786: PPUSH
1787: LD_INT 5
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL 63238 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1797: LD_INT 14
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 2
1805: PPUSH
1806: LD_INT 27
1808: PPUSH
1809: LD_INT 55
1811: PPUSH
1812: CALL 29433 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1816: CALL_OW 45
1820: PPUSH
1821: LD_INT 199
1823: PPUSH
1824: LD_INT 67
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: LD_INT 0
1832: PPUSH
1833: CALL 63238 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1837: LD_EXP 29
1841: PPUSH
1842: LD_INT 213
1844: PPUSH
1845: LD_INT 87
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1855: LD_EXP 29
1859: PPUSH
1860: LD_INT 214
1862: PPUSH
1863: LD_INT 87
1865: PPUSH
1866: CALL_OW 118
// if Kaia then
1870: LD_EXP 34
1874: IFFALSE 1909
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1876: LD_EXP 34
1880: PPUSH
1881: LD_INT 213
1883: PPUSH
1884: LD_INT 85
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1894: LD_EXP 34
1898: PPUSH
1899: LD_INT 215
1901: PPUSH
1902: LD_INT 87
1904: PPUSH
1905: CALL_OW 118
// end ; if Olaf and Kaia then
1909: LD_EXP 38
1913: PUSH
1914: LD_EXP 34
1918: AND
1919: IFFALSE 1956
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1921: LD_EXP 38
1925: PPUSH
1926: LD_INT 215
1928: PPUSH
1929: LD_INT 87
1931: PPUSH
1932: LD_INT 0
1934: PPUSH
1935: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1939: LD_EXP 38
1943: PPUSH
1944: LD_INT 213
1946: PPUSH
1947: LD_INT 85
1949: PPUSH
1950: CALL_OW 118
// end else
1954: GO 1976
// if Olaf then
1956: LD_EXP 38
1960: IFFALSE 1976
// PlaceHumanInUnit ( Olaf , factory ) ;
1962: LD_EXP 38
1966: PPUSH
1967: LD_VAR 0 8
1971: PPUSH
1972: CALL_OW 52
// if Givi then
1976: LD_EXP 30
1980: IFFALSE 2061
// begin if Kaia and Olaf then
1982: LD_EXP 34
1986: PUSH
1987: LD_EXP 38
1991: AND
1992: IFFALSE 2029
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
1994: LD_EXP 30
1998: PPUSH
1999: LD_INT 247
2001: PPUSH
2002: LD_INT 117
2004: PPUSH
2005: LD_INT 0
2007: PPUSH
2008: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2012: LD_EXP 30
2016: PPUSH
2017: LD_INT 248
2019: PPUSH
2020: LD_INT 118
2022: PPUSH
2023: CALL_OW 118
// end else
2027: GO 2061
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2029: LD_EXP 30
2033: PPUSH
2034: LD_INT 216
2036: PPUSH
2037: LD_INT 88
2039: PPUSH
2040: LD_INT 0
2042: PPUSH
2043: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2047: LD_EXP 30
2051: PPUSH
2052: LD_EXP 29
2056: PPUSH
2057: CALL_OW 119
// end ; end ; if Kurt then
2061: LD_EXP 40
2065: IFFALSE 2085
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2067: LD_EXP 40
2071: PPUSH
2072: LD_VAR 0 11
2076: PUSH
2077: LD_INT 2
2079: ARRAY
2080: PPUSH
2081: CALL_OW 52
// if Mike then
2085: LD_EXP 31
2089: IFFALSE 2109
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2091: LD_EXP 31
2095: PPUSH
2096: LD_VAR 0 11
2100: PUSH
2101: LD_INT 3
2103: ARRAY
2104: PPUSH
2105: CALL_OW 52
// if Kamil then
2109: LD_EXP 33
2113: IFFALSE 2175
// begin if Kaia and Olaf then
2115: LD_EXP 34
2119: PUSH
2120: LD_EXP 38
2124: AND
2125: IFFALSE 2143
// PlaceHumanInUnit ( Kamil , depot ) else
2127: LD_EXP 33
2131: PPUSH
2132: LD_VAR 0 9
2136: PPUSH
2137: CALL_OW 52
2141: GO 2175
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2143: LD_EXP 33
2147: PPUSH
2148: LD_INT 213
2150: PPUSH
2151: LD_INT 87
2153: PPUSH
2154: LD_INT 0
2156: PPUSH
2157: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2161: LD_EXP 33
2165: PPUSH
2166: LD_EXP 29
2170: PPUSH
2171: CALL_OW 119
// end ; end ; if Sophia then
2175: LD_EXP 35
2179: IFFALSE 2195
// PlaceHumanInUnit ( Sophia , depot ) ;
2181: LD_EXP 35
2185: PPUSH
2186: LD_VAR 0 9
2190: PPUSH
2191: CALL_OW 52
// if Aviradze then
2195: LD_EXP 41
2199: IFFALSE 2215
// PlaceHumanInUnit ( Aviradze , lab ) ;
2201: LD_EXP 41
2205: PPUSH
2206: LD_VAR 0 10
2210: PPUSH
2211: CALL_OW 52
// if Ibrahim then
2215: LD_EXP 32
2219: IFFALSE 2235
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2221: LD_EXP 32
2225: PPUSH
2226: LD_VAR 0 10
2230: PPUSH
2231: CALL_OW 52
// if Markov then
2235: LD_EXP 36
2239: IFFALSE 2255
// PlaceHumanInUnit ( Markov , factory ) ;
2241: LD_EXP 36
2245: PPUSH
2246: LD_VAR 0 8
2250: PPUSH
2251: CALL_OW 52
// if heikeSecondSquad then
2255: LD_EXP 44
2259: IFFALSE 2299
// for i in heikeSecondSquad do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_EXP 44
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2297
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2274: LD_VAR 0 2
2278: PPUSH
2279: LD_INT 190
2281: PPUSH
2282: LD_INT 65
2284: PPUSH
2285: LD_INT 5
2287: PPUSH
2288: LD_INT 0
2290: PPUSH
2291: CALL_OW 50
2295: GO 2271
2297: POP
2298: POP
// if heikeApes then
2299: LD_EXP 45
2303: IFFALSE 2343
// for i in heikeApes do
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_EXP 45
2314: PUSH
2315: FOR_IN
2316: IFFALSE 2341
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2318: LD_VAR 0 2
2322: PPUSH
2323: LD_INT 190
2325: PPUSH
2326: LD_INT 70
2328: PPUSH
2329: LD_INT 5
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 50
2339: GO 2315
2341: POP
2342: POP
// end ;
2343: LD_VAR 0 1
2347: RET
// export function PrepareRolfSquad ; var i , j ; begin
2348: LD_INT 0
2350: PPUSH
2351: PPUSH
2352: PPUSH
// uc_side := 8 ;
2353: LD_ADDR_OWVAR 20
2357: PUSH
2358: LD_INT 8
2360: ST_TO_ADDR
// uc_nation := 2 ;
2361: LD_ADDR_OWVAR 21
2365: PUSH
2366: LD_INT 2
2368: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2369: LD_ADDR_EXP 42
2373: PUSH
2374: LD_STRING Bergkamp
2376: PPUSH
2377: CALL_OW 25
2381: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2382: LD_ADDR_EXP 46
2386: PUSH
2387: LD_EXP 42
2391: PUSH
2392: EMPTY
2393: LIST
2394: ST_TO_ADDR
// for i := 1 to 4 do
2395: LD_ADDR_VAR 0 2
2399: PUSH
2400: DOUBLE
2401: LD_INT 1
2403: DEC
2404: ST_TO_ADDR
2405: LD_INT 4
2407: PUSH
2408: FOR_TO
2409: IFFALSE 2489
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2411: LD_ADDR_VAR 0 3
2415: PUSH
2416: DOUBLE
2417: LD_INT 1
2419: DEC
2420: ST_TO_ADDR
2421: LD_INT 5
2423: PUSH
2424: LD_INT 2
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: LD_INT 1
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: PUSH
2439: LD_VAR 0 2
2443: ARRAY
2444: PUSH
2445: FOR_TO
2446: IFFALSE 2485
// begin PrepareHuman ( false , i , 5 ) ;
2448: LD_INT 0
2450: PPUSH
2451: LD_VAR 0 2
2455: PPUSH
2456: LD_INT 5
2458: PPUSH
2459: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2463: LD_ADDR_EXP 46
2467: PUSH
2468: LD_EXP 46
2472: PPUSH
2473: CALL_OW 44
2477: PPUSH
2478: CALL 61307 0 2
2482: ST_TO_ADDR
// end ;
2483: GO 2445
2485: POP
2486: POP
// end ;
2487: GO 2408
2489: POP
2490: POP
// if HexInfo ( 5 , 3 ) then
2491: LD_INT 5
2493: PPUSH
2494: LD_INT 3
2496: PPUSH
2497: CALL_OW 428
2501: IFFALSE 2518
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2503: LD_INT 5
2505: PPUSH
2506: LD_INT 3
2508: PPUSH
2509: CALL_OW 428
2513: PPUSH
2514: CALL_OW 64
// for i in rolfSquad do
2518: LD_ADDR_VAR 0 2
2522: PUSH
2523: LD_EXP 46
2527: PUSH
2528: FOR_IN
2529: IFFALSE 2665
// begin uc_direction := 2 ;
2531: LD_ADDR_OWVAR 24
2535: PUSH
2536: LD_INT 2
2538: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2539: LD_VAR 0 2
2543: PPUSH
2544: CALL_OW 257
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: IFFALSE 2626
// begin uc_side := 8 ;
2554: LD_ADDR_OWVAR 20
2558: PUSH
2559: LD_INT 8
2561: ST_TO_ADDR
// uc_nation := 2 ;
2562: LD_ADDR_OWVAR 21
2566: PUSH
2567: LD_INT 2
2569: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2570: LD_INT 13
2572: PPUSH
2573: LD_INT 1
2575: PPUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 27
2581: PPUSH
2582: LD_INT 88
2584: PPUSH
2585: CALL 29433 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2589: CALL_OW 45
2593: PPUSH
2594: LD_INT 11
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2604: LD_VAR 0 2
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: LD_INT 3
2614: PPUSH
2615: CALL_OW 428
2619: PPUSH
2620: CALL_OW 52
// end else
2624: GO 2641
// PlaceUnitArea ( i , northSpawn , false ) ;
2626: LD_VAR 0 2
2630: PPUSH
2631: LD_INT 11
2633: PPUSH
2634: LD_INT 0
2636: PPUSH
2637: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2641: LD_VAR 0 2
2645: PPUSH
2646: LD_INT 29
2648: PPUSH
2649: LD_INT 10
2651: PPUSH
2652: CALL_OW 111
// wait ( 0 0$2 ) ;
2656: LD_INT 70
2658: PPUSH
2659: CALL_OW 67
// end ;
2663: GO 2528
2665: POP
2666: POP
// wait ( 0 0$5 ) ;
2667: LD_INT 175
2669: PPUSH
2670: CALL_OW 67
// end ;
2674: LD_VAR 0 1
2678: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2679: LD_INT 0
2681: PPUSH
2682: PPUSH
2683: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2684: LD_EXP 42
2688: PPUSH
2689: LD_INT 94
2691: PPUSH
2692: LD_INT 63
2694: PPUSH
2695: CALL_OW 428
2699: PPUSH
2700: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2704: LD_ADDR_VAR 0 3
2708: PUSH
2709: LD_INT 4
2711: PUSH
2712: LD_INT 82
2714: PUSH
2715: LD_INT 64
2717: PUSH
2718: LD_INT 1
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 31
2729: PUSH
2730: LD_INT 73
2732: PUSH
2733: LD_INT 58
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: ST_TO_ADDR
// for i in tmp do
2749: LD_ADDR_VAR 0 2
2753: PUSH
2754: LD_VAR 0 3
2758: PUSH
2759: FOR_IN
2760: IFFALSE 2824
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2762: LD_EXP 46
2766: PPUSH
2767: LD_INT 25
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PPUSH
2777: CALL_OW 72
2781: PPUSH
2782: LD_VAR 0 2
2786: PUSH
2787: LD_INT 1
2789: ARRAY
2790: PPUSH
2791: LD_VAR 0 2
2795: PUSH
2796: LD_INT 2
2798: ARRAY
2799: PPUSH
2800: LD_VAR 0 2
2804: PUSH
2805: LD_INT 3
2807: ARRAY
2808: PPUSH
2809: LD_VAR 0 2
2813: PUSH
2814: LD_INT 4
2816: ARRAY
2817: PPUSH
2818: CALL_OW 205
2822: GO 2759
2824: POP
2825: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2826: LD_EXP 46
2830: PUSH
2831: LD_INT 2
2833: ARRAY
2834: PPUSH
2835: LD_INT 63
2837: PPUSH
2838: LD_INT 42
2840: PPUSH
2841: CALL_OW 428
2845: PPUSH
2846: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2850: LD_EXP 46
2854: PUSH
2855: LD_INT 3
2857: ARRAY
2858: PPUSH
2859: LD_INT 94
2861: PPUSH
2862: LD_INT 63
2864: PPUSH
2865: CALL_OW 428
2869: PPUSH
2870: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2874: LD_INT 35
2876: PPUSH
2877: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2881: LD_EXP 46
2885: PPUSH
2886: LD_INT 25
2888: PUSH
2889: LD_INT 2
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: PUSH
2896: LD_INT 3
2898: PUSH
2899: LD_INT 60
2901: PUSH
2902: EMPTY
2903: LIST
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 72
2917: IFFALSE 2874
// rolfScriptBase := true ;
2919: LD_ADDR_EXP 9
2923: PUSH
2924: LD_INT 1
2926: ST_TO_ADDR
// end ;
2927: LD_VAR 0 1
2931: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2932: LD_EXP 9
2936: PUSH
2937: LD_EXP 42
2941: PPUSH
2942: CALL_OW 255
2946: PUSH
2947: LD_INT 8
2949: EQUAL
2950: AND
2951: IFFALSE 3958
2953: GO 2955
2955: DISABLE
2956: LD_INT 0
2958: PPUSH
2959: PPUSH
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// begin enable ;
2968: ENABLE
// if not rolfSquad then
2969: LD_EXP 46
2973: NOT
2974: IFFALSE 2978
// exit ;
2976: GO 3958
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
2978: LD_ADDR_VAR 0 9
2982: PUSH
2983: LD_INT 12
2985: PPUSH
2986: LD_INT 81
2988: PUSH
2989: LD_INT 8
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PPUSH
2996: CALL_OW 70
3000: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3001: LD_ADDR_VAR 0 5
3005: PUSH
3006: LD_EXP 46
3010: PPUSH
3011: LD_INT 25
3013: PUSH
3014: LD_INT 1
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 72
3025: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3026: LD_ADDR_VAR 0 6
3030: PUSH
3031: LD_EXP 46
3035: PPUSH
3036: LD_INT 25
3038: PUSH
3039: LD_INT 2
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 72
3050: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3051: LD_ADDR_VAR 0 8
3055: PUSH
3056: LD_EXP 46
3060: PPUSH
3061: LD_INT 25
3063: PUSH
3064: LD_INT 3
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PPUSH
3071: CALL_OW 72
3075: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3076: LD_ADDR_VAR 0 7
3080: PUSH
3081: LD_EXP 46
3085: PPUSH
3086: LD_INT 25
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 72
3100: ST_TO_ADDR
// if sol then
3101: LD_VAR 0 5
3105: IFFALSE 3403
// for i in sol union Rolf do
3107: LD_ADDR_VAR 0 1
3111: PUSH
3112: LD_VAR 0 5
3116: PUSH
3117: LD_EXP 42
3121: UNION
3122: PUSH
3123: FOR_IN
3124: IFFALSE 3401
// if not IsInUnit ( i ) and not HasTask ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: NOT
3136: PUSH
3137: LD_VAR 0 1
3141: PPUSH
3142: CALL_OW 314
3146: NOT
3147: AND
3148: IFFALSE 3399
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3150: LD_VAR 0 1
3154: PPUSH
3155: CALL_OW 256
3159: PUSH
3160: LD_INT 500
3162: LESS
3163: PUSH
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_INT 80
3171: PPUSH
3172: LD_INT 49
3174: PPUSH
3175: CALL_OW 297
3179: PUSH
3180: LD_INT 6
3182: GREATER
3183: AND
3184: IFFALSE 3203
// begin ComMoveXY ( i , 80 , 49 ) ;
3186: LD_VAR 0 1
3190: PPUSH
3191: LD_INT 80
3193: PPUSH
3194: LD_INT 49
3196: PPUSH
3197: CALL_OW 111
// continue ;
3201: GO 3123
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: LD_INT 22
3210: PUSH
3211: LD_INT 8
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 50
3220: PUSH
3221: EMPTY
3222: LIST
3223: PUSH
3224: LD_INT 2
3226: PUSH
3227: LD_INT 30
3229: PUSH
3230: LD_INT 4
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 30
3239: PUSH
3240: LD_INT 5
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: LD_INT 30
3249: PUSH
3250: LD_INT 32
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: PPUSH
3279: CALL_OW 69
3283: ST_TO_ADDR
// if tmp then
3284: LD_VAR 0 4
3288: IFFALSE 3399
// begin for b in tmp do
3290: LD_ADDR_VAR 0 2
3294: PUSH
3295: LD_VAR 0 4
3299: PUSH
3300: FOR_IN
3301: IFFALSE 3397
// begin case GetBType ( b ) of b_armoury , b_barracks :
3303: LD_VAR 0 2
3307: PPUSH
3308: CALL_OW 266
3312: PUSH
3313: LD_INT 4
3315: DOUBLE
3316: EQUAL
3317: IFTRUE 3327
3319: LD_INT 5
3321: DOUBLE
3322: EQUAL
3323: IFTRUE 3327
3325: GO 3338
3327: POP
// p := 6 ; b_breastwork , b_bunker :
3328: LD_ADDR_VAR 0 3
3332: PUSH
3333: LD_INT 6
3335: ST_TO_ADDR
3336: GO 3364
3338: LD_INT 31
3340: DOUBLE
3341: EQUAL
3342: IFTRUE 3352
3344: LD_INT 32
3346: DOUBLE
3347: EQUAL
3348: IFTRUE 3352
3350: GO 3363
3352: POP
// p := 1 ; end ;
3353: LD_ADDR_VAR 0 3
3357: PUSH
3358: LD_INT 1
3360: ST_TO_ADDR
3361: GO 3364
3363: POP
// if UnitsInside ( b ) < p then
3364: LD_VAR 0 2
3368: PPUSH
3369: CALL_OW 313
3373: PUSH
3374: LD_VAR 0 3
3378: LESS
3379: IFFALSE 3395
// ComEnterUnit ( i , b ) ;
3381: LD_VAR 0 1
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL_OW 120
// end ;
3395: GO 3300
3397: POP
3398: POP
// end ; end ;
3399: GO 3123
3401: POP
3402: POP
// if sci then
3403: LD_VAR 0 7
3407: IFFALSE 3462
// for i in sci do
3409: LD_ADDR_VAR 0 1
3413: PUSH
3414: LD_VAR 0 7
3418: PUSH
3419: FOR_IN
3420: IFFALSE 3460
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3422: LD_VAR 0 1
3426: PPUSH
3427: LD_INT 80
3429: PPUSH
3430: LD_INT 49
3432: PPUSH
3433: CALL_OW 297
3437: PUSH
3438: LD_INT 9
3440: GREATER
3441: IFFALSE 3458
// ComMoveXY ( i , 80 , 49 ) ;
3443: LD_VAR 0 1
3447: PPUSH
3448: LD_INT 80
3450: PPUSH
3451: LD_INT 49
3453: PPUSH
3454: CALL_OW 111
// end ;
3458: GO 3419
3460: POP
3461: POP
// if mech then
3462: LD_VAR 0 8
3466: IFFALSE 3680
// for i in mech do
3468: LD_ADDR_VAR 0 1
3472: PUSH
3473: LD_VAR 0 8
3477: PUSH
3478: FOR_IN
3479: IFFALSE 3678
// begin hasVehicle := IsInUnit ( i ) ;
3481: LD_ADDR_VAR 0 10
3485: PUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 310
3495: ST_TO_ADDR
// if enemyInBase then
3496: LD_VAR 0 9
3500: IFFALSE 3596
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3502: LD_VAR 0 10
3506: PUSH
3507: LD_VAR 0 10
3511: PPUSH
3512: CALL_OW 256
3516: PUSH
3517: LD_INT 500
3519: GREATER
3520: AND
3521: IFFALSE 3549
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3523: LD_VAR 0 10
3527: PPUSH
3528: LD_VAR 0 9
3532: PPUSH
3533: LD_VAR 0 10
3537: PPUSH
3538: CALL_OW 74
3542: PPUSH
3543: CALL_OW 115
3547: GO 3594
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3549: LD_VAR 0 10
3553: PPUSH
3554: LD_INT 86
3556: PPUSH
3557: LD_INT 49
3559: PPUSH
3560: CALL_OW 297
3564: PUSH
3565: LD_INT 8
3567: GREATER
3568: IFFALSE 3594
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3570: LD_VAR 0 10
3574: PPUSH
3575: LD_INT 86
3577: PPUSH
3578: LD_INT 49
3580: PPUSH
3581: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL 62918 0 1
// end end else
3594: GO 3676
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3596: LD_VAR 0 1
3600: PPUSH
3601: LD_INT 86
3603: PPUSH
3604: LD_INT 49
3606: PPUSH
3607: CALL_OW 297
3611: PUSH
3612: LD_INT 8
3614: GREATER
3615: IFFALSE 3634
// ComMoveXY ( i , 86 , 49 ) else
3617: LD_VAR 0 1
3621: PPUSH
3622: LD_INT 86
3624: PPUSH
3625: LD_INT 49
3627: PPUSH
3628: CALL_OW 111
3632: GO 3676
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3634: LD_VAR 0 10
3638: PUSH
3639: LD_VAR 0 10
3643: PPUSH
3644: CALL_OW 256
3648: PUSH
3649: LD_INT 1000
3651: LESS
3652: AND
3653: IFFALSE 3676
// begin SetFuel ( hasVehicle , 100 ) ;
3655: LD_VAR 0 10
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3667: LD_VAR 0 1
3671: PPUSH
3672: CALL 62798 0 1
// end ; end ; end ;
3676: GO 3478
3678: POP
3679: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3680: LD_ADDR_VAR 0 4
3684: PUSH
3685: LD_INT 12
3687: PPUSH
3688: LD_INT 3
3690: PUSH
3691: LD_INT 24
3693: PUSH
3694: LD_INT 1000
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: LD_INT 21
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PPUSH
3719: CALL_OW 70
3723: ST_TO_ADDR
// if tmp and eng then
3724: LD_VAR 0 4
3728: PUSH
3729: LD_VAR 0 6
3733: AND
3734: IFFALSE 3840
// begin for i in eng do
3736: LD_ADDR_VAR 0 1
3740: PUSH
3741: LD_VAR 0 6
3745: PUSH
3746: FOR_IN
3747: IFFALSE 3838
// if IsInUnit ( i ) then
3749: LD_VAR 0 1
3753: PPUSH
3754: CALL_OW 310
3758: IFFALSE 3771
// ComExitBuilding ( i ) else
3760: LD_VAR 0 1
3764: PPUSH
3765: CALL_OW 122
3769: GO 3836
// if GetLives ( i ) = 1000 then
3771: LD_VAR 0 1
3775: PPUSH
3776: CALL_OW 256
3780: PUSH
3781: LD_INT 1000
3783: EQUAL
3784: IFFALSE 3806
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3786: LD_VAR 0 1
3790: PPUSH
3791: LD_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: ARRAY
3799: PPUSH
3800: CALL_OW 130
3804: GO 3836
// if GetLives ( i ) < 700 then
3806: LD_VAR 0 1
3810: PPUSH
3811: CALL_OW 256
3815: PUSH
3816: LD_INT 700
3818: LESS
3819: IFFALSE 3836
// ComMoveXY ( i , 80 , 49 ) ;
3821: LD_VAR 0 1
3825: PPUSH
3826: LD_INT 80
3828: PPUSH
3829: LD_INT 49
3831: PPUSH
3832: CALL_OW 111
3836: GO 3746
3838: POP
3839: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3840: LD_VAR 0 4
3844: NOT
3845: PUSH
3846: LD_VAR 0 6
3850: PPUSH
3851: LD_INT 3
3853: PUSH
3854: LD_INT 54
3856: PUSH
3857: EMPTY
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PPUSH
3864: CALL_OW 72
3868: AND
3869: IFFALSE 3958
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3871: LD_ADDR_VAR 0 1
3875: PUSH
3876: LD_VAR 0 6
3880: PPUSH
3881: LD_INT 3
3883: PUSH
3884: LD_INT 54
3886: PUSH
3887: EMPTY
3888: LIST
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 72
3898: PUSH
3899: FOR_IN
3900: IFFALSE 3956
// if GetLives ( i ) < 1000 then
3902: LD_VAR 0 1
3906: PPUSH
3907: CALL_OW 256
3911: PUSH
3912: LD_INT 1000
3914: LESS
3915: IFFALSE 3934
// ComMoveXY ( i , 80 , 49 ) else
3917: LD_VAR 0 1
3921: PPUSH
3922: LD_INT 80
3924: PPUSH
3925: LD_INT 49
3927: PPUSH
3928: CALL_OW 111
3932: GO 3954
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3934: LD_VAR 0 1
3938: PPUSH
3939: LD_INT 86
3941: PPUSH
3942: LD_INT 54
3944: PPUSH
3945: CALL_OW 428
3949: PPUSH
3950: CALL_OW 120
3954: GO 3899
3956: POP
3957: POP
// end ;
3958: PPOPN 10
3960: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
// uc_side := 5 ;
3967: LD_ADDR_OWVAR 20
3971: PUSH
3972: LD_INT 5
3974: ST_TO_ADDR
// uc_nation := 2 ;
3975: LD_ADDR_OWVAR 21
3979: PUSH
3980: LD_INT 2
3982: ST_TO_ADDR
// omarSquad := [ ] ;
3983: LD_ADDR_EXP 47
3987: PUSH
3988: EMPTY
3989: ST_TO_ADDR
// for i := 1 to 4 do
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: DOUBLE
3996: LD_INT 1
3998: DEC
3999: ST_TO_ADDR
4000: LD_INT 4
4002: PUSH
4003: FOR_TO
4004: IFFALSE 4127
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4006: LD_ADDR_VAR 0 3
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_INT 6
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: LD_INT 2
4024: PUSH
4025: LD_EXP 21
4029: PLUS
4030: PUSH
4031: LD_INT 2
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: PUSH
4040: LD_VAR 0 2
4044: ARRAY
4045: PUSH
4046: FOR_TO
4047: IFFALSE 4123
// begin PrepareHuman ( false , i , 5 ) ;
4049: LD_INT 0
4051: PPUSH
4052: LD_VAR 0 2
4056: PPUSH
4057: LD_INT 5
4059: PPUSH
4060: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4064: LD_ADDR_EXP 47
4068: PUSH
4069: LD_EXP 47
4073: PPUSH
4074: CALL_OW 44
4078: PPUSH
4079: CALL 61307 0 2
4083: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4084: LD_VAR 0 2
4088: PUSH
4089: LD_INT 1
4091: EQUAL
4092: PUSH
4093: LD_INT 50
4095: PPUSH
4096: CALL_OW 13
4100: AND
4101: IFFALSE 4121
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4103: LD_EXP 47
4107: PUSH
4108: LD_EXP 47
4112: ARRAY
4113: PPUSH
4114: LD_INT 8
4116: PPUSH
4117: CALL_OW 336
// end ;
4121: GO 4046
4123: POP
4124: POP
// end ;
4125: GO 4003
4127: POP
4128: POP
// if HexInfo ( 340 , 205 ) then
4129: LD_INT 340
4131: PPUSH
4132: LD_INT 205
4134: PPUSH
4135: CALL_OW 428
4139: IFFALSE 4156
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4141: LD_INT 340
4143: PPUSH
4144: LD_INT 205
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 64
// p := 0 ;
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: LD_INT 0
4163: ST_TO_ADDR
// for i in omarSquad do
4164: LD_ADDR_VAR 0 2
4168: PUSH
4169: LD_EXP 47
4173: PUSH
4174: FOR_IN
4175: IFFALSE 4376
// begin uc_direction := 4 ;
4177: LD_ADDR_OWVAR 24
4181: PUSH
4182: LD_INT 4
4184: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4185: LD_VAR 0 2
4189: PPUSH
4190: CALL_OW 257
4194: PUSH
4195: LD_INT 3
4197: EQUAL
4198: PUSH
4199: LD_VAR 0 4
4203: PUSH
4204: LD_INT 2
4206: LESS
4207: AND
4208: IFFALSE 4337
// begin p := p + 1 ;
4210: LD_ADDR_VAR 0 4
4214: PUSH
4215: LD_VAR 0 4
4219: PUSH
4220: LD_INT 1
4222: PLUS
4223: ST_TO_ADDR
// uc_side := 5 ;
4224: LD_ADDR_OWVAR 20
4228: PUSH
4229: LD_INT 5
4231: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4232: LD_INT 0
4234: PPUSH
4235: LD_INT 1
4237: PPUSH
4238: CALL_OW 12
4242: IFFALSE 4273
// begin uc_nation := 2 ;
4244: LD_ADDR_OWVAR 21
4248: PUSH
4249: LD_INT 2
4251: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4252: LD_INT 13
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: LD_INT 1
4260: PPUSH
4261: LD_INT 27
4263: PPUSH
4264: LD_INT 88
4266: PPUSH
4267: CALL 29433 0 5
// end else
4271: GO 4300
// begin uc_nation := 3 ;
4273: LD_ADDR_OWVAR 21
4277: PUSH
4278: LD_INT 3
4280: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4281: LD_INT 22
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 1
4289: PPUSH
4290: LD_INT 45
4292: PPUSH
4293: LD_INT 88
4295: PPUSH
4296: CALL 29433 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4300: CALL_OW 45
4304: PPUSH
4305: LD_INT 13
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4315: LD_VAR 0 2
4319: PPUSH
4320: LD_INT 340
4322: PPUSH
4323: LD_INT 205
4325: PPUSH
4326: CALL_OW 428
4330: PPUSH
4331: CALL_OW 52
// end else
4335: GO 4352
// PlaceUnitArea ( i , southSpawn , false ) ;
4337: LD_VAR 0 2
4341: PPUSH
4342: LD_INT 13
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4352: LD_VAR 0 2
4356: PPUSH
4357: LD_INT 333
4359: PPUSH
4360: LD_INT 210
4362: PPUSH
4363: CALL_OW 111
// wait ( 0 0$2 ) ;
4367: LD_INT 70
4369: PPUSH
4370: CALL_OW 67
// end ;
4374: GO 4174
4376: POP
4377: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4378: LD_EXP 39
4382: PPUSH
4383: LD_INT 340
4385: PPUSH
4386: LD_INT 205
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4396: LD_EXP 39
4400: PPUSH
4401: LD_INT 333
4403: PPUSH
4404: LD_INT 206
4406: PPUSH
4407: CALL_OW 111
// wait ( 0 0$2 ) ;
4411: LD_INT 70
4413: PPUSH
4414: CALL_OW 67
// ComHold ( omarSquad ) ;
4418: LD_EXP 47
4422: PPUSH
4423: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4427: LD_EXP 39
4431: PUSH
4432: LD_EXP 47
4436: PPUSH
4437: LD_INT 2
4439: PUSH
4440: LD_INT 25
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 25
4452: PUSH
4453: LD_INT 8
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 72
4469: UNION
4470: PUSH
4471: LD_INT 22
4473: PUSH
4474: LD_INT 5
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 2
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PPUSH
4495: CALL_OW 69
4499: UNION
4500: PPUSH
4501: LD_INT 315
4503: PPUSH
4504: LD_INT 214
4506: PPUSH
4507: CALL_OW 114
// wait ( 0 0$22 ) ;
4511: LD_INT 770
4513: PPUSH
4514: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4518: LD_EXP 47
4522: PUSH
4523: LD_EXP 39
4527: UNION
4528: PPUSH
4529: LD_INT 329
4531: PPUSH
4532: LD_INT 231
4534: PPUSH
4535: CALL_OW 114
// end ;
4539: LD_VAR 0 1
4543: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4544: LD_EXP 10
4548: IFFALSE 5631
4550: GO 4552
4552: DISABLE
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// if not omarSquad then
4567: LD_EXP 47
4571: NOT
4572: IFFALSE 4576
// exit ;
4574: GO 5631
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4576: LD_ADDR_VAR 0 10
4580: PUSH
4581: LD_INT 14
4583: PPUSH
4584: LD_INT 81
4586: PUSH
4587: LD_INT 5
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PPUSH
4594: CALL_OW 70
4598: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4599: LD_ADDR_VAR 0 6
4603: PUSH
4604: LD_EXP 47
4608: PPUSH
4609: LD_INT 2
4611: PUSH
4612: LD_INT 25
4614: PUSH
4615: LD_INT 1
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 25
4624: PUSH
4625: LD_INT 8
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 72
4641: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4642: LD_ADDR_VAR 0 7
4646: PUSH
4647: LD_EXP 47
4651: PPUSH
4652: LD_INT 25
4654: PUSH
4655: LD_INT 2
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PPUSH
4662: CALL_OW 72
4666: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4667: LD_ADDR_VAR 0 9
4671: PUSH
4672: LD_EXP 47
4676: PPUSH
4677: LD_INT 25
4679: PUSH
4680: LD_INT 3
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 72
4691: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4692: LD_ADDR_VAR 0 8
4696: PUSH
4697: LD_EXP 47
4701: PPUSH
4702: LD_INT 25
4704: PUSH
4705: LD_INT 4
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PPUSH
4712: CALL_OW 72
4716: ST_TO_ADDR
// if sol then
4717: LD_VAR 0 6
4721: IFFALSE 5085
// for i in sol do
4723: LD_ADDR_VAR 0 1
4727: PUSH
4728: LD_VAR 0 6
4732: PUSH
4733: FOR_IN
4734: IFFALSE 5083
// if not HasTask ( i ) then
4736: LD_VAR 0 1
4740: PPUSH
4741: CALL_OW 314
4745: NOT
4746: IFFALSE 5081
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 310
4757: NOT
4758: PUSH
4759: LD_VAR 0 1
4763: PPUSH
4764: CALL_OW 256
4768: PUSH
4769: LD_INT 500
4771: LESS
4772: AND
4773: PUSH
4774: LD_VAR 0 1
4778: PPUSH
4779: LD_INT 333
4781: PPUSH
4782: LD_INT 234
4784: PPUSH
4785: CALL_OW 297
4789: PUSH
4790: LD_INT 6
4792: GREATER
4793: AND
4794: IFFALSE 4813
// begin ComMoveXY ( i , 333 , 234 ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_INT 333
4803: PPUSH
4804: LD_INT 234
4806: PPUSH
4807: CALL_OW 111
// continue ;
4811: GO 4733
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4813: LD_ADDR_VAR 0 5
4817: PUSH
4818: LD_INT 22
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 58
4830: PUSH
4831: EMPTY
4832: LIST
4833: PUSH
4834: LD_INT 50
4836: PUSH
4837: EMPTY
4838: LIST
4839: PUSH
4840: LD_INT 2
4842: PUSH
4843: LD_INT 30
4845: PUSH
4846: LD_INT 32
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 30
4855: PUSH
4856: LD_INT 31
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: PPUSH
4874: CALL_OW 69
4878: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4879: LD_VAR 0 5
4883: PUSH
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 310
4893: PPUSH
4894: CALL_OW 266
4898: PUSH
4899: LD_INT 31
4901: NONEQUAL
4902: AND
4903: IFFALSE 4985
// begin for j in tmp do
4905: LD_ADDR_VAR 0 2
4909: PUSH
4910: LD_VAR 0 5
4914: PUSH
4915: FOR_IN
4916: IFFALSE 4981
// if GetTag ( j ) <> 1 then
4918: LD_VAR 0 2
4922: PPUSH
4923: CALL_OW 110
4927: PUSH
4928: LD_INT 1
4930: NONEQUAL
4931: IFFALSE 4979
// begin SetTag ( j , 1 ) ;
4933: LD_VAR 0 2
4937: PPUSH
4938: LD_INT 1
4940: PPUSH
4941: CALL_OW 109
// if IsInUnit ( i ) then
4945: LD_VAR 0 1
4949: PPUSH
4950: CALL_OW 310
4954: IFFALSE 4965
// ComExit ( i ) ;
4956: LD_VAR 0 1
4960: PPUSH
4961: CALL 61695 0 1
// AddComEnterUnit ( i , j ) ;
4965: LD_VAR 0 1
4969: PPUSH
4970: LD_VAR 0 2
4974: PPUSH
4975: CALL_OW 180
// end ;
4979: GO 4915
4981: POP
4982: POP
// end else
4983: GO 5081
// if not IsInUnit ( i ) then
4985: LD_VAR 0 1
4989: PPUSH
4990: CALL_OW 310
4994: NOT
4995: IFFALSE 5081
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
4997: LD_ADDR_VAR 0 5
5001: PUSH
5002: LD_INT 22
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 50
5014: PUSH
5015: EMPTY
5016: LIST
5017: PUSH
5018: LD_INT 30
5020: PUSH
5021: LD_INT 4
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: ST_TO_ADDR
// if tmp then
5038: LD_VAR 0 5
5042: IFFALSE 5081
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5044: LD_VAR 0 5
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: CALL_OW 313
5057: PUSH
5058: LD_INT 6
5060: LESS
5061: IFFALSE 5081
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5063: LD_VAR 0 1
5067: PPUSH
5068: LD_VAR 0 5
5072: PUSH
5073: LD_INT 1
5075: ARRAY
5076: PPUSH
5077: CALL_OW 120
// end ; end ;
5081: GO 4733
5083: POP
5084: POP
// if sci then
5085: LD_VAR 0 8
5089: IFFALSE 5144
// for i in sci do
5091: LD_ADDR_VAR 0 1
5095: PUSH
5096: LD_VAR 0 8
5100: PUSH
5101: FOR_IN
5102: IFFALSE 5142
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5104: LD_VAR 0 1
5108: PPUSH
5109: LD_INT 333
5111: PPUSH
5112: LD_INT 234
5114: PPUSH
5115: CALL_OW 297
5119: PUSH
5120: LD_INT 9
5122: GREATER
5123: IFFALSE 5140
// ComMoveXY ( i , 333 , 234 ) ;
5125: LD_VAR 0 1
5129: PPUSH
5130: LD_INT 333
5132: PPUSH
5133: LD_INT 234
5135: PPUSH
5136: CALL_OW 111
// end ;
5140: GO 5101
5142: POP
5143: POP
// if mech then
5144: LD_VAR 0 9
5148: IFFALSE 5353
// for i in mech do
5150: LD_ADDR_VAR 0 1
5154: PUSH
5155: LD_VAR 0 9
5159: PUSH
5160: FOR_IN
5161: IFFALSE 5351
// begin hasVehicle := IsInUnit ( i ) ;
5163: LD_ADDR_VAR 0 11
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 310
5177: ST_TO_ADDR
// if enemyInBase then
5178: LD_VAR 0 10
5182: IFFALSE 5269
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5184: LD_VAR 0 11
5188: PUSH
5189: LD_VAR 0 11
5193: PPUSH
5194: CALL_OW 256
5198: PUSH
5199: LD_INT 500
5201: GREATER
5202: AND
5203: IFFALSE 5231
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5205: LD_VAR 0 11
5209: PPUSH
5210: LD_VAR 0 10
5214: PPUSH
5215: LD_VAR 0 11
5219: PPUSH
5220: CALL_OW 74
5224: PPUSH
5225: CALL_OW 115
5229: GO 5267
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5231: LD_VAR 0 11
5235: PPUSH
5236: LD_INT 333
5238: PPUSH
5239: LD_INT 234
5241: PPUSH
5242: CALL_OW 297
5246: PUSH
5247: LD_INT 6
5249: GREATER
5250: IFFALSE 5267
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5252: LD_VAR 0 11
5256: PPUSH
5257: LD_INT 333
5259: PPUSH
5260: LD_INT 234
5262: PPUSH
5263: CALL_OW 111
// end else
5267: GO 5349
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5269: LD_VAR 0 1
5273: PPUSH
5274: LD_INT 333
5276: PPUSH
5277: LD_INT 234
5279: PPUSH
5280: CALL_OW 297
5284: PUSH
5285: LD_INT 6
5287: GREATER
5288: IFFALSE 5307
// ComMoveXY ( i , 333 , 234 ) else
5290: LD_VAR 0 1
5294: PPUSH
5295: LD_INT 333
5297: PPUSH
5298: LD_INT 234
5300: PPUSH
5301: CALL_OW 111
5305: GO 5349
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5307: LD_VAR 0 11
5311: PUSH
5312: LD_VAR 0 11
5316: PPUSH
5317: CALL_OW 256
5321: PUSH
5322: LD_INT 1000
5324: LESS
5325: AND
5326: IFFALSE 5349
// begin SetFuel ( hasVehicle , 100 ) ;
5328: LD_VAR 0 11
5332: PPUSH
5333: LD_INT 100
5335: PPUSH
5336: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5340: LD_VAR 0 1
5344: PPUSH
5345: CALL 62798 0 1
// end ; end ; end ;
5349: GO 5160
5351: POP
5352: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5353: LD_ADDR_VAR 0 5
5357: PUSH
5358: LD_INT 14
5360: PPUSH
5361: LD_INT 3
5363: PUSH
5364: LD_INT 24
5366: PUSH
5367: LD_INT 1000
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 21
5380: PUSH
5381: LD_INT 3
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PPUSH
5392: CALL_OW 70
5396: ST_TO_ADDR
// if tmp and eng then
5397: LD_VAR 0 5
5401: PUSH
5402: LD_VAR 0 7
5406: AND
5407: IFFALSE 5513
// begin for i in eng do
5409: LD_ADDR_VAR 0 1
5413: PUSH
5414: LD_VAR 0 7
5418: PUSH
5419: FOR_IN
5420: IFFALSE 5511
// if IsInUnit ( i ) then
5422: LD_VAR 0 1
5426: PPUSH
5427: CALL_OW 310
5431: IFFALSE 5444
// ComExitBuilding ( i ) else
5433: LD_VAR 0 1
5437: PPUSH
5438: CALL_OW 122
5442: GO 5509
// if GetLives ( i ) = 1000 then
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 256
5453: PUSH
5454: LD_INT 1000
5456: EQUAL
5457: IFFALSE 5479
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5459: LD_VAR 0 1
5463: PPUSH
5464: LD_VAR 0 5
5468: PUSH
5469: LD_INT 1
5471: ARRAY
5472: PPUSH
5473: CALL_OW 130
5477: GO 5509
// if GetLives ( i ) < 700 then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 256
5488: PUSH
5489: LD_INT 700
5491: LESS
5492: IFFALSE 5509
// ComMoveXY ( i , 333 , 234 ) ;
5494: LD_VAR 0 1
5498: PPUSH
5499: LD_INT 333
5501: PPUSH
5502: LD_INT 234
5504: PPUSH
5505: CALL_OW 111
5509: GO 5419
5511: POP
5512: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5513: LD_VAR 0 5
5517: NOT
5518: PUSH
5519: LD_VAR 0 7
5523: PPUSH
5524: LD_INT 3
5526: PUSH
5527: LD_INT 54
5529: PUSH
5530: EMPTY
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: CALL_OW 72
5541: AND
5542: IFFALSE 5631
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5544: LD_ADDR_VAR 0 1
5548: PUSH
5549: LD_VAR 0 7
5553: PPUSH
5554: LD_INT 3
5556: PUSH
5557: LD_INT 54
5559: PUSH
5560: EMPTY
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 72
5571: PUSH
5572: FOR_IN
5573: IFFALSE 5629
// if GetLives ( i ) < 1000 then
5575: LD_VAR 0 1
5579: PPUSH
5580: CALL_OW 256
5584: PUSH
5585: LD_INT 1000
5587: LESS
5588: IFFALSE 5607
// ComMoveXY ( i , 333 , 234 ) else
5590: LD_VAR 0 1
5594: PPUSH
5595: LD_INT 333
5597: PPUSH
5598: LD_INT 234
5600: PPUSH
5601: CALL_OW 111
5605: GO 5627
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_INT 341
5614: PPUSH
5615: LD_INT 232
5617: PPUSH
5618: CALL_OW 428
5622: PPUSH
5623: CALL_OW 120
5627: GO 5572
5629: POP
5630: POP
// end ;
5631: PPOPN 11
5633: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5634: LD_EXP 39
5638: PPUSH
5639: CALL_OW 256
5643: PUSH
5644: LD_INT 1000
5646: LESS
5647: IFFALSE 5665
5649: GO 5651
5651: DISABLE
// begin enable ;
5652: ENABLE
// SetLives ( Omar , 1000 ) ;
5653: LD_EXP 39
5657: PPUSH
5658: LD_INT 1000
5660: PPUSH
5661: CALL_OW 234
// end ;
5665: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5666: LD_EXP 23
5670: IFFALSE 6546
5672: GO 5674
5674: DISABLE
5675: LD_INT 0
5677: PPUSH
5678: PPUSH
// begin wait ( 0 0$25 ) ;
5679: LD_INT 875
5681: PPUSH
5682: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5686: LD_EXP 47
5690: PPUSH
5691: LD_INT 2
5693: PUSH
5694: LD_INT 25
5696: PUSH
5697: LD_INT 1
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: LD_INT 25
5706: PUSH
5707: LD_INT 8
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: LIST
5718: PPUSH
5719: CALL_OW 72
5723: PPUSH
5724: CALL_OW 122
// wait ( 0 0$3 ) ;
5728: LD_INT 105
5730: PPUSH
5731: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5735: LD_EXP 47
5739: PUSH
5740: LD_EXP 39
5744: UNION
5745: PPUSH
5746: LD_INT 225
5748: PPUSH
5749: LD_INT 223
5751: PPUSH
5752: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5756: LD_INT 22
5758: PUSH
5759: LD_INT 5
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PUSH
5766: LD_INT 2
5768: PUSH
5769: LD_INT 25
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 25
5781: PUSH
5782: LD_INT 8
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 21
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PPUSH
5809: CALL_OW 69
5813: PPUSH
5814: LD_INT 167
5816: PPUSH
5817: LD_INT 231
5819: PPUSH
5820: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5824: LD_EXP 47
5828: PPUSH
5829: LD_INT 25
5831: PUSH
5832: LD_INT 4
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 72
5843: PPUSH
5844: LD_INT 222
5846: PPUSH
5847: LD_INT 229
5849: PPUSH
5850: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5854: LD_INT 35
5856: PPUSH
5857: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5861: LD_ADDR_VAR 0 1
5865: PUSH
5866: LD_EXP 47
5870: PUSH
5871: LD_INT 22
5873: PUSH
5874: LD_INT 5
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 21
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: UNION
5900: PUSH
5901: FOR_IN
5902: IFFALSE 6537
// begin if IsDead ( i ) then
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 301
5913: IFFALSE 5933
// begin omarSquad := omarSquad diff i ;
5915: LD_ADDR_EXP 47
5919: PUSH
5920: LD_EXP 47
5924: PUSH
5925: LD_VAR 0 1
5929: DIFF
5930: ST_TO_ADDR
// continue ;
5931: GO 5901
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5933: LD_VAR 0 1
5937: PPUSH
5938: CALL_OW 257
5942: PUSH
5943: LD_INT 1
5945: PUSH
5946: LD_INT 8
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: IN
5953: IFFALSE 6147
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5955: LD_VAR 0 1
5959: PPUSH
5960: CALL_OW 256
5964: PUSH
5965: LD_INT 700
5967: LESS
5968: PUSH
5969: LD_VAR 0 1
5973: PPUSH
5974: CALL_OW 110
5978: PUSH
5979: LD_INT 0
5981: EQUAL
5982: AND
5983: IFFALSE 6012
// begin SetTag ( i , 1 ) ;
5985: LD_VAR 0 1
5989: PPUSH
5990: LD_INT 1
5992: PPUSH
5993: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
5997: LD_VAR 0 1
6001: PPUSH
6002: LD_INT 222
6004: PPUSH
6005: LD_INT 229
6007: PPUSH
6008: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6012: LD_VAR 0 1
6016: PPUSH
6017: CALL_OW 256
6021: PUSH
6022: LD_INT 1000
6024: EQUAL
6025: PUSH
6026: LD_VAR 0 1
6030: PPUSH
6031: CALL_OW 110
6035: PUSH
6036: LD_INT 1
6038: EQUAL
6039: AND
6040: IFFALSE 6054
// SetTag ( i , 0 ) ;
6042: LD_VAR 0 1
6046: PPUSH
6047: LD_INT 0
6049: PPUSH
6050: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 110
6063: PUSH
6064: LD_INT 0
6066: EQUAL
6067: PUSH
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 256
6077: PUSH
6078: LD_INT 700
6080: GREATEREQUAL
6081: AND
6082: PUSH
6083: LD_VAR 0 1
6087: PPUSH
6088: CALL_OW 314
6092: NOT
6093: AND
6094: IFFALSE 6147
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6096: LD_INT 18
6098: PPUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PPUSH
6109: CALL_OW 70
6113: IFFALSE 6132
// ComAgressiveMove ( i , 167 , 231 ) else
6115: LD_VAR 0 1
6119: PPUSH
6120: LD_INT 167
6122: PPUSH
6123: LD_INT 231
6125: PPUSH
6126: CALL_OW 114
6130: GO 6147
// ComAgressiveMove ( i , 106 , 153 ) ;
6132: LD_VAR 0 1
6136: PPUSH
6137: LD_INT 106
6139: PPUSH
6140: LD_INT 153
6142: PPUSH
6143: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6147: LD_VAR 0 1
6151: PPUSH
6152: CALL_OW 247
6156: PUSH
6157: LD_INT 2
6159: EQUAL
6160: IFFALSE 6535
// begin nearestPoint := [ 219 , 219 ] ;
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: LD_INT 219
6169: PUSH
6170: LD_INT 219
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6177: LD_VAR 0 1
6181: PPUSH
6182: LD_INT 156
6184: PPUSH
6185: LD_INT 202
6187: PPUSH
6188: CALL_OW 297
6192: PUSH
6193: LD_VAR 0 1
6197: PPUSH
6198: LD_INT 219
6200: PPUSH
6201: LD_INT 219
6203: PPUSH
6204: CALL_OW 297
6208: LESS
6209: IFFALSE 6226
// nearestPoint := [ 156 , 202 ] ;
6211: LD_ADDR_VAR 0 2
6215: PUSH
6216: LD_INT 156
6218: PUSH
6219: LD_INT 202
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6226: LD_VAR 0 1
6230: PPUSH
6231: CALL_OW 256
6235: PUSH
6236: LD_INT 700
6238: LESS
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 110
6249: PUSH
6250: LD_INT 0
6252: EQUAL
6253: AND
6254: IFFALSE 6295
// begin SetTag ( i , 1 ) ;
6256: LD_VAR 0 1
6260: PPUSH
6261: LD_INT 1
6263: PPUSH
6264: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6268: LD_VAR 0 1
6272: PPUSH
6273: LD_VAR 0 2
6277: PUSH
6278: LD_INT 1
6280: ARRAY
6281: PPUSH
6282: LD_VAR 0 2
6286: PUSH
6287: LD_INT 2
6289: ARRAY
6290: PPUSH
6291: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6295: LD_VAR 0 1
6299: PPUSH
6300: CALL_OW 256
6304: PUSH
6305: LD_INT 700
6307: LESS
6308: PUSH
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 110
6318: PUSH
6319: LD_INT 1
6321: EQUAL
6322: AND
6323: PUSH
6324: LD_VAR 0 1
6328: PPUSH
6329: CALL_OW 311
6333: AND
6334: PUSH
6335: LD_VAR 0 1
6339: PPUSH
6340: LD_VAR 0 2
6344: PUSH
6345: LD_INT 1
6347: ARRAY
6348: PPUSH
6349: LD_VAR 0 2
6353: PUSH
6354: LD_INT 2
6356: ARRAY
6357: PPUSH
6358: CALL_OW 297
6362: PUSH
6363: LD_INT 10
6365: LESS
6366: AND
6367: IFFALSE 6378
// ComRepairVehicleAndReturn ( i ) ;
6369: LD_VAR 0 1
6373: PPUSH
6374: CALL 62798 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6378: LD_VAR 0 1
6382: PPUSH
6383: CALL_OW 256
6387: PUSH
6388: LD_INT 1000
6390: EQUAL
6391: PUSH
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 110
6401: PUSH
6402: LD_INT 1
6404: EQUAL
6405: AND
6406: PUSH
6407: LD_VAR 0 1
6411: PPUSH
6412: CALL_OW 311
6416: AND
6417: IFFALSE 6431
// SetTag ( i , 0 ) ;
6419: LD_VAR 0 1
6423: PPUSH
6424: LD_INT 0
6426: PPUSH
6427: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 110
6440: PUSH
6441: LD_INT 0
6443: EQUAL
6444: PUSH
6445: LD_VAR 0 1
6449: PPUSH
6450: CALL_OW 256
6454: PUSH
6455: LD_INT 700
6457: GREATEREQUAL
6458: AND
6459: PUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL_OW 311
6469: AND
6470: PUSH
6471: LD_VAR 0 1
6475: PPUSH
6476: CALL_OW 314
6480: NOT
6481: AND
6482: IFFALSE 6535
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6484: LD_INT 18
6486: PPUSH
6487: LD_INT 22
6489: PUSH
6490: LD_INT 3
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PPUSH
6497: CALL_OW 70
6501: IFFALSE 6520
// ComAgressiveMove ( i , 167 , 231 ) else
6503: LD_VAR 0 1
6507: PPUSH
6508: LD_INT 167
6510: PPUSH
6511: LD_INT 231
6513: PPUSH
6514: CALL_OW 114
6518: GO 6535
// ComAgressiveMove ( i , 106 , 153 ) ;
6520: LD_VAR 0 1
6524: PPUSH
6525: LD_INT 106
6527: PPUSH
6528: LD_INT 153
6530: PPUSH
6531: CALL_OW 114
// end ; end ;
6535: GO 5901
6537: POP
6538: POP
// until not omarSquad ;
6539: LD_EXP 47
6543: NOT
6544: IFFALSE 5854
// end ; end_of_file
6546: PPOPN 2
6548: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6549: LD_INT 0
6551: PPUSH
// uc_side := side ;
6552: LD_ADDR_OWVAR 20
6556: PUSH
6557: LD_VAR 0 1
6561: ST_TO_ADDR
// uc_nation := nation ;
6562: LD_ADDR_OWVAR 21
6566: PUSH
6567: LD_VAR 0 2
6571: ST_TO_ADDR
// vc_chassis := chassis ;
6572: LD_ADDR_OWVAR 37
6576: PUSH
6577: LD_VAR 0 3
6581: ST_TO_ADDR
// vc_engine := engine ;
6582: LD_ADDR_OWVAR 39
6586: PUSH
6587: LD_VAR 0 4
6591: ST_TO_ADDR
// vc_control := control ;
6592: LD_ADDR_OWVAR 38
6596: PUSH
6597: LD_VAR 0 5
6601: ST_TO_ADDR
// vc_weapon := weapon ;
6602: LD_ADDR_OWVAR 40
6606: PUSH
6607: LD_VAR 0 6
6611: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6612: LD_ADDR_OWVAR 41
6616: PUSH
6617: LD_VAR 0 7
6621: ST_TO_ADDR
// result := CreateVehicle ;
6622: LD_ADDR_VAR 0 8
6626: PUSH
6627: CALL_OW 45
6631: ST_TO_ADDR
// end ;
6632: LD_VAR 0 8
6636: RET
// export function SayX ( units , ident ) ; var i ; begin
6637: LD_INT 0
6639: PPUSH
6640: PPUSH
// result := false ;
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 0
6648: ST_TO_ADDR
// if not units then
6649: LD_VAR 0 1
6653: NOT
6654: IFFALSE 6658
// exit ;
6656: GO 6712
// for i in units do
6658: LD_ADDR_VAR 0 4
6662: PUSH
6663: LD_VAR 0 1
6667: PUSH
6668: FOR_IN
6669: IFFALSE 6710
// if IsOk ( i ) then
6671: LD_VAR 0 4
6675: PPUSH
6676: CALL_OW 302
6680: IFFALSE 6708
// begin Say ( i , ident ) ;
6682: LD_VAR 0 4
6686: PPUSH
6687: LD_VAR 0 2
6691: PPUSH
6692: CALL_OW 88
// result := i ;
6696: LD_ADDR_VAR 0 3
6700: PUSH
6701: LD_VAR 0 4
6705: ST_TO_ADDR
// break ;
6706: GO 6710
// end ;
6708: GO 6668
6710: POP
6711: POP
// end ;
6712: LD_VAR 0 3
6716: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6717: LD_INT 0
6719: PPUSH
6720: PPUSH
// InitUc ;
6721: CALL_OW 18
// InitHc ;
6725: CALL_OW 19
// uc_side := 0 ;
6729: LD_ADDR_OWVAR 20
6733: PUSH
6734: LD_INT 0
6736: ST_TO_ADDR
// uc_nation := 0 ;
6737: LD_ADDR_OWVAR 21
6741: PUSH
6742: LD_INT 0
6744: ST_TO_ADDR
// for i = 1 to amount do
6745: LD_ADDR_VAR 0 4
6749: PUSH
6750: DOUBLE
6751: LD_INT 1
6753: DEC
6754: ST_TO_ADDR
6755: LD_VAR 0 2
6759: PUSH
6760: FOR_TO
6761: IFFALSE 6843
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6763: LD_ADDR_OWVAR 29
6767: PUSH
6768: LD_INT 9
6770: PPUSH
6771: LD_INT 12
6773: PPUSH
6774: CALL_OW 12
6778: PUSH
6779: LD_INT 9
6781: PPUSH
6782: LD_INT 12
6784: PPUSH
6785: CALL_OW 12
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6794: LD_ADDR_OWVAR 35
6798: PUSH
6799: LD_INT 1
6801: NEG
6802: PPUSH
6803: LD_INT 1
6805: PPUSH
6806: CALL_OW 12
6810: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6811: LD_INT 0
6813: PPUSH
6814: LD_INT 12
6816: PPUSH
6817: LD_INT 1
6819: PPUSH
6820: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6824: CALL_OW 44
6828: PPUSH
6829: LD_VAR 0 1
6833: PPUSH
6834: LD_INT 0
6836: PPUSH
6837: CALL_OW 49
// end ;
6841: GO 6760
6843: POP
6844: POP
// InitHc ;
6845: CALL_OW 19
// end ;
6849: LD_VAR 0 3
6853: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6854: LD_INT 0
6856: PPUSH
6857: PPUSH
// uc_side := 0 ;
6858: LD_ADDR_OWVAR 20
6862: PUSH
6863: LD_INT 0
6865: ST_TO_ADDR
// uc_nation := 0 ;
6866: LD_ADDR_OWVAR 21
6870: PUSH
6871: LD_INT 0
6873: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
6874: LD_INT 7
6876: PPUSH
6877: LD_INT 6
6879: PUSH
6880: LD_INT 5
6882: PUSH
6883: LD_INT 4
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: PUSH
6891: LD_OWVAR 67
6895: ARRAY
6896: PPUSH
6897: CALL 6717 0 2
// for i = 1 to 2 do
6901: LD_ADDR_VAR 0 4
6905: PUSH
6906: DOUBLE
6907: LD_INT 1
6909: DEC
6910: ST_TO_ADDR
6911: LD_INT 2
6913: PUSH
6914: FOR_TO
6915: IFFALSE 6954
// begin vc_chassis := class_mastodont ;
6917: LD_ADDR_OWVAR 37
6921: PUSH
6922: LD_EXP 75
6926: ST_TO_ADDR
// vc_control := control_rider ;
6927: LD_ADDR_OWVAR 38
6931: PUSH
6932: LD_INT 4
6934: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6935: CALL_OW 45
6939: PPUSH
6940: LD_VAR 0 1
6944: PPUSH
6945: LD_INT 0
6947: PPUSH
6948: CALL 60221 0 3
// end ;
6952: GO 6914
6954: POP
6955: POP
// for i := 1 to 4 do
6956: LD_ADDR_VAR 0 4
6960: PUSH
6961: DOUBLE
6962: LD_INT 1
6964: DEC
6965: ST_TO_ADDR
6966: LD_INT 4
6968: PUSH
6969: FOR_TO
6970: IFFALSE 7009
// begin hc_class := class_horse ;
6972: LD_ADDR_OWVAR 28
6976: PUSH
6977: LD_EXP 76
6981: ST_TO_ADDR
// hc_gallery :=  ;
6982: LD_ADDR_OWVAR 33
6986: PUSH
6987: LD_STRING 
6989: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
6990: CALL_OW 44
6994: PPUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: LD_INT 0
7002: PPUSH
7003: CALL_OW 49
// end ;
7007: GO 6969
7009: POP
7010: POP
// for i = 1 to 5 do
7011: LD_ADDR_VAR 0 4
7015: PUSH
7016: DOUBLE
7017: LD_INT 1
7019: DEC
7020: ST_TO_ADDR
7021: LD_INT 5
7023: PUSH
7024: FOR_TO
7025: IFFALSE 7079
// begin hc_class = class_tiger ;
7027: LD_ADDR_OWVAR 28
7031: PUSH
7032: LD_INT 14
7034: ST_TO_ADDR
// hc_gallery =  ;
7035: LD_ADDR_OWVAR 33
7039: PUSH
7040: LD_STRING 
7042: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7043: LD_ADDR_OWVAR 35
7047: PUSH
7048: LD_INT 7
7050: NEG
7051: PPUSH
7052: LD_INT 7
7054: PPUSH
7055: CALL_OW 12
7059: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7060: CALL_OW 44
7064: PPUSH
7065: LD_VAR 0 1
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL 60221 0 3
// end ;
7077: GO 7024
7079: POP
7080: POP
// for i := 1 to 4 do
7081: LD_ADDR_VAR 0 4
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_INT 4
7093: PUSH
7094: FOR_TO
7095: IFFALSE 7132
// begin hc_class := class_phororhacos ;
7097: LD_ADDR_OWVAR 28
7101: PUSH
7102: LD_INT 18
7104: ST_TO_ADDR
// hc_gallery :=  ;
7105: LD_ADDR_OWVAR 33
7109: PUSH
7110: LD_STRING 
7112: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7113: CALL_OW 44
7117: PPUSH
7118: LD_VAR 0 1
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 49
// end ;
7130: GO 7094
7132: POP
7133: POP
// for i := 1 to 4 do
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: DOUBLE
7140: LD_INT 1
7142: DEC
7143: ST_TO_ADDR
7144: LD_INT 4
7146: PUSH
7147: FOR_TO
7148: IFFALSE 7185
// begin hc_class := class_baggie ;
7150: LD_ADDR_OWVAR 28
7154: PUSH
7155: LD_INT 13
7157: ST_TO_ADDR
// hc_gallery :=  ;
7158: LD_ADDR_OWVAR 33
7162: PUSH
7163: LD_STRING 
7165: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7166: CALL_OW 44
7170: PPUSH
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_INT 0
7178: PPUSH
7179: CALL_OW 49
// end ;
7183: GO 7147
7185: POP
7186: POP
// for i := 1 to 7 do
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: DOUBLE
7193: LD_INT 1
7195: DEC
7196: ST_TO_ADDR
7197: LD_INT 7
7199: PUSH
7200: FOR_TO
7201: IFFALSE 7238
// begin hc_class := class_frog ;
7203: LD_ADDR_OWVAR 28
7207: PUSH
7208: LD_INT 19
7210: ST_TO_ADDR
// hc_gallery :=  ;
7211: LD_ADDR_OWVAR 33
7215: PUSH
7216: LD_STRING 
7218: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7219: CALL_OW 44
7223: PPUSH
7224: LD_VAR 0 2
7228: PPUSH
7229: LD_INT 0
7231: PPUSH
7232: CALL_OW 49
// end ;
7236: GO 7200
7238: POP
7239: POP
// end ;
7240: LD_VAR 0 3
7244: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7245: LD_INT 0
7247: PPUSH
7248: PPUSH
7249: PPUSH
// if not observer or not unit then
7250: LD_VAR 0 1
7254: NOT
7255: PUSH
7256: LD_VAR 0 2
7260: NOT
7261: OR
7262: IFFALSE 7266
// exit ;
7264: GO 7314
// if not See ( GetSide ( observer ) , unit ) then
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 255
7275: PPUSH
7276: LD_VAR 0 2
7280: PPUSH
7281: CALL_OW 292
7285: NOT
7286: IFFALSE 7290
// exit ;
7288: GO 7314
// result := GetDistUnits ( observer , unit ) < 12 ;
7290: LD_ADDR_VAR 0 3
7294: PUSH
7295: LD_VAR 0 1
7299: PPUSH
7300: LD_VAR 0 2
7304: PPUSH
7305: CALL_OW 296
7309: PUSH
7310: LD_INT 12
7312: LESS
7313: ST_TO_ADDR
// end ;
7314: LD_VAR 0 3
7318: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7319: LD_INT 0
7321: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_INT 2
7338: ARRAY
7339: PPUSH
7340: CALL_OW 488
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: LD_INT 1
7352: ARRAY
7353: PPUSH
7354: LD_VAR 0 2
7358: PUSH
7359: LD_INT 2
7361: ARRAY
7362: PPUSH
7363: CALL_OW 428
7367: PUSH
7368: LD_INT 0
7370: EQUAL
7371: AND
7372: IFFALSE 7406
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7374: LD_VAR 0 1
7378: PPUSH
7379: LD_VAR 0 2
7383: PUSH
7384: LD_INT 1
7386: ARRAY
7387: PPUSH
7388: LD_VAR 0 2
7392: PUSH
7393: LD_INT 2
7395: ARRAY
7396: PPUSH
7397: LD_VAR 0 3
7401: PPUSH
7402: CALL_OW 48
// end ;
7406: LD_VAR 0 4
7410: RET
// export function ReverseArray ( array ) ; var i ; begin
7411: LD_INT 0
7413: PPUSH
7414: PPUSH
// if not array then
7415: LD_VAR 0 1
7419: NOT
7420: IFFALSE 7424
// exit ;
7422: GO 7482
// result := [ ] ;
7424: LD_ADDR_VAR 0 2
7428: PUSH
7429: EMPTY
7430: ST_TO_ADDR
// for i := 1 to array do
7431: LD_ADDR_VAR 0 3
7435: PUSH
7436: DOUBLE
7437: LD_INT 1
7439: DEC
7440: ST_TO_ADDR
7441: LD_VAR 0 1
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7480
// result := Insert ( result , 1 , array [ i ] ) ;
7449: LD_ADDR_VAR 0 2
7453: PUSH
7454: LD_VAR 0 2
7458: PPUSH
7459: LD_INT 1
7461: PPUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_VAR 0 3
7471: ARRAY
7472: PPUSH
7473: CALL_OW 2
7477: ST_TO_ADDR
7478: GO 7446
7480: POP
7481: POP
// end ;
7482: LD_VAR 0 2
7486: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7487: LD_INT 0
7489: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7490: LD_VAR 0 1
7494: PPUSH
7495: LD_VAR 0 2
7499: PPUSH
7500: LD_VAR 0 3
7504: PPUSH
7505: LD_VAR 0 4
7509: PPUSH
7510: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: LD_VAR 0 3
7528: PPUSH
7529: CALL_OW 331
// end ;
7533: LD_VAR 0 5
7537: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7538: LD_INT 0
7540: PPUSH
// if not units then
7541: LD_VAR 0 1
7545: NOT
7546: IFFALSE 7550
// exit ;
7548: GO 7633
// result := true ;
7550: LD_ADDR_VAR 0 4
7554: PUSH
7555: LD_INT 1
7557: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7558: LD_VAR 0 1
7562: PPUSH
7563: LD_INT 26
7565: PUSH
7566: LD_INT 1
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 72
7577: PUSH
7578: LD_INT 1
7580: ARRAY
7581: PPUSH
7582: LD_VAR 0 2
7586: PPUSH
7587: CALL_OW 88
7591: NOT
7592: IFFALSE 7633
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7594: LD_ADDR_VAR 0 4
7598: PUSH
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 26
7606: PUSH
7607: LD_INT 2
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PPUSH
7614: CALL_OW 72
7618: PUSH
7619: LD_INT 1
7621: ARRAY
7622: PPUSH
7623: LD_VAR 0 3
7627: PPUSH
7628: CALL_OW 88
7632: ST_TO_ADDR
// end ;
7633: LD_VAR 0 4
7637: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7638: LD_INT 0
7640: PPUSH
7641: PPUSH
// if not group then
7642: LD_VAR 0 2
7646: NOT
7647: IFFALSE 7651
// exit ;
7649: GO 7696
// for i in group do
7651: LD_ADDR_VAR 0 4
7655: PUSH
7656: LD_VAR 0 2
7660: PUSH
7661: FOR_IN
7662: IFFALSE 7694
// if See ( side , i ) then
7664: LD_VAR 0 1
7668: PPUSH
7669: LD_VAR 0 4
7673: PPUSH
7674: CALL_OW 292
7678: IFFALSE 7692
// begin result := true ;
7680: LD_ADDR_VAR 0 3
7684: PUSH
7685: LD_INT 1
7687: ST_TO_ADDR
// exit ;
7688: POP
7689: POP
7690: GO 7696
// end ;
7692: GO 7661
7694: POP
7695: POP
// end ; end_of_file
7696: LD_VAR 0 3
7700: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7701: LD_INT 0
7703: PPUSH
7704: PPUSH
7705: PPUSH
7706: PPUSH
7707: PPUSH
7708: PPUSH
7709: PPUSH
// uc_side := 3 ;
7710: LD_ADDR_OWVAR 20
7714: PUSH
7715: LD_INT 3
7717: ST_TO_ADDR
// uc_nation := 3 ;
7718: LD_ADDR_OWVAR 21
7722: PUSH
7723: LD_INT 3
7725: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7726: LD_ADDR_EXP 48
7730: PUSH
7731: LD_STRING Morozov
7733: PPUSH
7734: CALL_OW 25
7738: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7739: LD_EXP 48
7743: PPUSH
7744: LD_INT 52
7746: PPUSH
7747: CALL_OW 52
// if not gaidarKilled then
7751: LD_EXP 7
7755: NOT
7756: IFFALSE 7789
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7758: LD_ADDR_EXP 49
7762: PUSH
7763: LD_STRING Gaydar
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: LD_STRING 
7771: PPUSH
7772: CALL 24569 0 3
7776: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7777: LD_EXP 49
7781: PPUSH
7782: LD_INT 52
7784: PPUSH
7785: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7789: LD_INT 52
7791: PPUSH
7792: LD_STRING lenin
7794: PPUSH
7795: CALL_OW 500
// ruOutsiders := [ ] ;
7799: LD_ADDR_EXP 51
7803: PUSH
7804: EMPTY
7805: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7806: LD_ADDR_EXP 53
7810: PUSH
7811: EMPTY
7812: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7813: LD_ADDR_EXP 54
7817: PUSH
7818: EMPTY
7819: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7820: LD_ADDR_EXP 55
7824: PUSH
7825: EMPTY
7826: ST_TO_ADDR
// ruAttackers := [ ] ;
7827: LD_ADDR_EXP 56
7831: PUSH
7832: EMPTY
7833: ST_TO_ADDR
// waveStrength := 0 ;
7834: LD_ADDR_EXP 57
7838: PUSH
7839: LD_INT 0
7841: ST_TO_ADDR
// if not gaidarKilled then
7842: LD_EXP 7
7846: NOT
7847: IFFALSE 7857
// waveStrength := 2 ;
7849: LD_ADDR_EXP 57
7853: PUSH
7854: LD_INT 2
7856: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7857: LD_ADDR_VAR 0 7
7861: PUSH
7862: LD_INT 22
7864: PUSH
7865: LD_INT 3
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 3
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: ST_TO_ADDR
// for i in tmp do
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: LD_VAR 0 7
7900: PUSH
7901: FOR_IN
7902: IFFALSE 7935
// SetBLevel ( i , [ 5 , 5 , 6 ] [ Difficulty ] ) ;
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_INT 5
7911: PUSH
7912: LD_INT 5
7914: PUSH
7915: LD_INT 6
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: PUSH
7923: LD_OWVAR 67
7927: ARRAY
7928: PPUSH
7929: CALL_OW 241
7933: GO 7901
7935: POP
7936: POP
// for i := 1 to 3 do
7937: LD_ADDR_VAR 0 2
7941: PUSH
7942: DOUBLE
7943: LD_INT 1
7945: DEC
7946: ST_TO_ADDR
7947: LD_INT 3
7949: PUSH
7950: FOR_TO
7951: IFFALSE 7989
// begin PrepareHuman ( false , 1 , 0 ) ;
7953: LD_INT 0
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: LD_INT 0
7961: PPUSH
7962: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
7966: CALL_OW 44
7970: PPUSH
7971: LD_INT 75
7973: PPUSH
7974: LD_INT 49
7976: PPUSH
7977: LD_INT 3
7979: PPUSH
7980: LD_INT 0
7982: PPUSH
7983: CALL_OW 50
// end ;
7987: GO 7950
7989: POP
7990: POP
// for i := 1 to 4 do
7991: LD_ADDR_VAR 0 2
7995: PUSH
7996: DOUBLE
7997: LD_INT 1
7999: DEC
8000: ST_TO_ADDR
8001: LD_INT 4
8003: PUSH
8004: FOR_TO
8005: IFFALSE 8051
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8007: LD_INT 0
8009: PPUSH
8010: LD_INT 1
8012: PPUSH
8013: LD_INT 2
8015: PPUSH
8016: CALL_OW 12
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8028: CALL_OW 44
8032: PPUSH
8033: LD_INT 330
8035: PPUSH
8036: LD_INT 231
8038: PPUSH
8039: LD_INT 5
8041: PPUSH
8042: LD_INT 0
8044: PPUSH
8045: CALL_OW 50
// end ;
8049: GO 8004
8051: POP
8052: POP
// hc_class := 1 ;
8053: LD_ADDR_OWVAR 28
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8061: CALL_OW 44
8065: PPUSH
8066: LD_INT 324
8068: PPUSH
8069: LD_INT 219
8071: PPUSH
8072: CALL_OW 428
8076: PPUSH
8077: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8081: CALL_OW 44
8085: PPUSH
8086: LD_INT 316
8088: PPUSH
8089: LD_INT 223
8091: PPUSH
8092: CALL_OW 428
8096: PPUSH
8097: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8101: LD_ADDR_VAR 0 7
8105: PUSH
8106: LD_INT 172
8108: PPUSH
8109: LD_INT 198
8111: PPUSH
8112: CALL_OW 428
8116: PPUSH
8117: CALL_OW 274
8121: PUSH
8122: LD_INT 189
8124: PPUSH
8125: LD_INT 156
8127: PPUSH
8128: CALL_OW 428
8132: PPUSH
8133: CALL_OW 274
8137: PUSH
8138: LD_INT 341
8140: PPUSH
8141: LD_INT 232
8143: PPUSH
8144: CALL_OW 428
8148: PPUSH
8149: CALL_OW 274
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: ST_TO_ADDR
// for i in tmp do
8159: LD_ADDR_VAR 0 2
8163: PUSH
8164: LD_VAR 0 7
8168: PUSH
8169: FOR_IN
8170: IFFALSE 8204
// begin SetResourceType ( i , mat_cans , 200 ) ;
8172: LD_VAR 0 2
8176: PPUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_INT 200
8182: PPUSH
8183: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: LD_INT 2
8194: PPUSH
8195: LD_INT 200
8197: PPUSH
8198: CALL_OW 277
// end ;
8202: GO 8169
8204: POP
8205: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 177 , 114 ] , [ 138 , 96 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8206: LD_ADDR_VAR 0 7
8210: PUSH
8211: LD_INT 198
8213: PUSH
8214: LD_INT 158
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 203
8223: PUSH
8224: LD_INT 166
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: LD_INT 177
8233: PUSH
8234: LD_INT 114
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 138
8243: PUSH
8244: LD_INT 96
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PUSH
8251: LD_INT 181
8253: PUSH
8254: LD_INT 209
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 178
8263: PUSH
8264: LD_INT 196
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 181
8273: PUSH
8274: LD_INT 212
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: ST_TO_ADDR
// for i := 1 to tmp do
8290: LD_ADDR_VAR 0 2
8294: PUSH
8295: DOUBLE
8296: LD_INT 1
8298: DEC
8299: ST_TO_ADDR
8300: LD_VAR 0 7
8304: PUSH
8305: FOR_TO
8306: IFFALSE 8423
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
8308: LD_INT 0
8310: PPUSH
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 4
8316: PUSH
8317: LD_INT 5
8319: PUSH
8320: LD_INT 6
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: LD_OWVAR 67
8332: ARRAY
8333: PPUSH
8334: CALL_OW 380
// un := CreateHuman ;
8338: LD_ADDR_VAR 0 5
8342: PUSH
8343: CALL_OW 44
8347: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8348: LD_ADDR_VAR 0 4
8352: PUSH
8353: LD_VAR 0 7
8357: PUSH
8358: LD_VAR 0 2
8362: ARRAY
8363: PUSH
8364: LD_INT 1
8366: ARRAY
8367: PPUSH
8368: LD_VAR 0 7
8372: PUSH
8373: LD_VAR 0 2
8377: ARRAY
8378: PUSH
8379: LD_INT 2
8381: ARRAY
8382: PPUSH
8383: CALL_OW 428
8387: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8388: LD_VAR 0 5
8392: PPUSH
8393: LD_VAR 0 4
8397: PPUSH
8398: CALL 57141 0 1
8402: PPUSH
8403: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8407: LD_VAR 0 5
8411: PPUSH
8412: LD_VAR 0 4
8416: PPUSH
8417: CALL_OW 52
// end ;
8421: GO 8305
8423: POP
8424: POP
// for i := 1 to 3 do
8425: LD_ADDR_VAR 0 2
8429: PUSH
8430: DOUBLE
8431: LD_INT 1
8433: DEC
8434: ST_TO_ADDR
8435: LD_INT 3
8437: PUSH
8438: FOR_TO
8439: IFFALSE 8494
// begin InitHc ;
8441: CALL_OW 19
// uc_nation := 0 ;
8445: LD_ADDR_OWVAR 21
8449: PUSH
8450: LD_INT 0
8452: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8453: LD_ADDR_OWVAR 28
8457: PUSH
8458: LD_INT 16
8460: ST_TO_ADDR
// un := CreateHuman ;
8461: LD_ADDR_VAR 0 5
8465: PUSH
8466: CALL_OW 44
8470: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8471: LD_VAR 0 5
8475: PPUSH
8476: LD_INT 194
8478: PPUSH
8479: LD_INT 164
8481: PPUSH
8482: LD_INT 6
8484: PPUSH
8485: LD_INT 0
8487: PPUSH
8488: CALL_OW 50
// end ;
8492: GO 8438
8494: POP
8495: POP
// uc_nation := 3 ;
8496: LD_ADDR_OWVAR 21
8500: PUSH
8501: LD_INT 3
8503: ST_TO_ADDR
// if Difficulty > 1 then
8504: LD_OWVAR 67
8508: PUSH
8509: LD_INT 1
8511: GREATER
8512: IFFALSE 8768
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8514: LD_INT 24
8516: PPUSH
8517: LD_INT 1
8519: PPUSH
8520: LD_INT 1
8522: PPUSH
8523: LD_INT 44
8525: PPUSH
8526: LD_INT 10
8528: PPUSH
8529: CALL 29433 0 5
// un := CreateVehicle ;
8533: LD_ADDR_VAR 0 5
8537: PUSH
8538: CALL_OW 45
8542: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8543: LD_VAR 0 5
8547: PPUSH
8548: LD_INT 199
8550: PPUSH
8551: LD_INT 162
8553: PPUSH
8554: LD_INT 1
8556: PPUSH
8557: LD_INT 0
8559: PPUSH
8560: CALL 63238 0 5
// ComHold ( un ) ;
8564: LD_VAR 0 5
8568: PPUSH
8569: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8573: LD_INT 0
8575: PPUSH
8576: LD_INT 3
8578: PPUSH
8579: LD_INT 4
8581: PPUSH
8582: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8586: CALL_OW 44
8590: PPUSH
8591: LD_VAR 0 5
8595: PPUSH
8596: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8600: LD_INT 24
8602: PPUSH
8603: LD_INT 1
8605: PPUSH
8606: LD_INT 1
8608: PPUSH
8609: LD_INT 45
8611: PPUSH
8612: LD_INT 10
8614: PPUSH
8615: CALL 29433 0 5
// un := CreateVehicle ;
8619: LD_ADDR_VAR 0 5
8623: PUSH
8624: CALL_OW 45
8628: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8629: LD_VAR 0 5
8633: PPUSH
8634: LD_INT 129
8636: PPUSH
8637: LD_INT 93
8639: PPUSH
8640: LD_INT 1
8642: PPUSH
8643: LD_INT 0
8645: PPUSH
8646: CALL 63238 0 5
// ComHold ( un ) ;
8650: LD_VAR 0 5
8654: PPUSH
8655: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8659: LD_INT 0
8661: PPUSH
8662: LD_INT 3
8664: PPUSH
8665: LD_INT 4
8667: PPUSH
8668: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8672: CALL_OW 44
8676: PPUSH
8677: LD_VAR 0 5
8681: PPUSH
8682: CALL_OW 52
// bc_type := b_armoury ;
8686: LD_ADDR_OWVAR 42
8690: PUSH
8691: LD_INT 4
8693: ST_TO_ADDR
// bc_level := 6 ;
8694: LD_ADDR_OWVAR 43
8698: PUSH
8699: LD_INT 6
8701: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
8702: LD_INT 120
8704: PPUSH
8705: LD_INT 100
8707: PPUSH
8708: LD_INT 5
8710: PPUSH
8711: CALL_OW 47
// for i := 1 to 3 do
8715: LD_ADDR_VAR 0 2
8719: PUSH
8720: DOUBLE
8721: LD_INT 1
8723: DEC
8724: ST_TO_ADDR
8725: LD_INT 3
8727: PUSH
8728: FOR_TO
8729: IFFALSE 8766
// begin PrepareHuman ( false , 1 , 5 ) ;
8731: LD_INT 0
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 5
8739: PPUSH
8740: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
8744: CALL_OW 44
8748: PPUSH
8749: LD_INT 120
8751: PPUSH
8752: LD_INT 100
8754: PPUSH
8755: CALL_OW 428
8759: PPUSH
8760: CALL_OW 52
// end ;
8764: GO 8728
8766: POP
8767: POP
// end ; tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
8768: LD_ADDR_VAR 0 7
8772: PUSH
8773: LD_INT 135
8775: PUSH
8776: LD_INT 100
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 137
8785: PUSH
8786: LD_INT 92
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: ST_TO_ADDR
// for i := 1 to tmp do
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_VAR 0 7
8811: PUSH
8812: FOR_TO
8813: IFFALSE 8979
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
8815: LD_INT 22
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 24
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: PUSH
8833: LD_OWVAR 67
8837: PUSH
8838: LD_INT 0
8840: PPUSH
8841: LD_INT 1
8843: PPUSH
8844: CALL_OW 12
8848: PLUS
8849: ARRAY
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_INT 1
8856: PPUSH
8857: LD_INT 44
8859: PPUSH
8860: LD_INT 25
8862: PPUSH
8863: CALL 29433 0 5
// veh := CreateVehicle ;
8867: LD_ADDR_VAR 0 6
8871: PUSH
8872: CALL_OW 45
8876: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8877: LD_VAR 0 6
8881: PPUSH
8882: LD_INT 2
8884: PPUSH
8885: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
8889: LD_VAR 0 6
8893: PPUSH
8894: LD_VAR 0 7
8898: PUSH
8899: LD_VAR 0 2
8903: ARRAY
8904: PUSH
8905: LD_INT 1
8907: ARRAY
8908: PPUSH
8909: LD_VAR 0 7
8913: PUSH
8914: LD_VAR 0 2
8918: ARRAY
8919: PUSH
8920: LD_INT 2
8922: ARRAY
8923: PPUSH
8924: LD_INT 0
8926: PPUSH
8927: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
8931: LD_INT 0
8933: PPUSH
8934: LD_INT 3
8936: PPUSH
8937: LD_INT 6
8939: PPUSH
8940: CALL_OW 380
// un := CreateHuman ;
8944: LD_ADDR_VAR 0 5
8948: PUSH
8949: CALL_OW 44
8953: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8954: LD_VAR 0 5
8958: PPUSH
8959: LD_VAR 0 6
8963: PPUSH
8964: CALL_OW 52
// ComHold ( veh ) ;
8968: LD_VAR 0 6
8972: PPUSH
8973: CALL_OW 140
// end ;
8977: GO 8812
8979: POP
8980: POP
// tmp := [ 191 , 122 ] ;
8981: LD_ADDR_VAR 0 7
8985: PUSH
8986: LD_INT 191
8988: PUSH
8989: LD_INT 122
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
8996: LD_INT 24
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: LD_INT 1
9004: PPUSH
9005: LD_INT 44
9007: PPUSH
9008: LD_INT 30
9010: PPUSH
9011: CALL 29433 0 5
// ruBlockadeTank := CreateVehicle ;
9015: LD_ADDR_EXP 50
9019: PUSH
9020: CALL_OW 45
9024: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9025: LD_EXP 50
9029: PPUSH
9030: LD_INT 2
9032: PPUSH
9033: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9037: LD_EXP 50
9041: PPUSH
9042: LD_INT 191
9044: PPUSH
9045: LD_INT 122
9047: PPUSH
9048: LD_INT 0
9050: PPUSH
9051: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
9055: LD_INT 1
9057: PPUSH
9058: LD_INT 5
9060: PUSH
9061: LD_INT 6
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PUSH
9068: LD_OWVAR 67
9072: PUSH
9073: LD_INT 1
9075: MINUS
9076: ARRAY
9077: PPUSH
9078: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9082: CALL_OW 44
9086: PPUSH
9087: LD_EXP 50
9091: PPUSH
9092: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9096: LD_EXP 50
9100: PPUSH
9101: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9105: LD_ADDR_EXP 52
9109: PUSH
9110: EMPTY
9111: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
9112: LD_ADDR_VAR 0 2
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_INT 3
9124: PUSH
9125: LD_INT 4
9127: PUSH
9128: LD_INT 6
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: PUSH
9136: LD_OWVAR 67
9140: ARRAY
9141: PUSH
9142: FOR_TO
9143: IFFALSE 9255
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
9145: LD_INT 0
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: LD_INT 4
9153: PUSH
9154: LD_INT 5
9156: PUSH
9157: LD_INT 6
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_OWVAR 67
9169: ARRAY
9170: PPUSH
9171: CALL_OW 380
// un := CreateHuman ;
9175: LD_ADDR_VAR 0 5
9179: PUSH
9180: CALL_OW 44
9184: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9185: LD_VAR 0 5
9189: PPUSH
9190: LD_INT 9
9192: PPUSH
9193: LD_INT 0
9195: PPUSH
9196: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9200: LD_VAR 0 5
9204: PPUSH
9205: LD_INT 198
9207: PPUSH
9208: LD_INT 129
9210: PPUSH
9211: CALL_OW 118
// AddComCrawl ( un ) ;
9215: LD_VAR 0 5
9219: PPUSH
9220: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9224: LD_ADDR_EXP 52
9228: PUSH
9229: LD_EXP 52
9233: PPUSH
9234: LD_EXP 52
9238: PUSH
9239: LD_INT 1
9241: PLUS
9242: PPUSH
9243: LD_VAR 0 5
9247: PPUSH
9248: CALL_OW 1
9252: ST_TO_ADDR
// end ;
9253: GO 9142
9255: POP
9256: POP
// PrepareHuman ( false , 4 , 5 ) ;
9257: LD_INT 0
9259: PPUSH
9260: LD_INT 4
9262: PPUSH
9263: LD_INT 5
9265: PPUSH
9266: CALL_OW 380
// un := CreateHuman ;
9270: LD_ADDR_VAR 0 5
9274: PUSH
9275: CALL_OW 44
9279: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9280: LD_VAR 0 5
9284: PPUSH
9285: LD_INT 179
9287: PPUSH
9288: LD_INT 113
9290: PPUSH
9291: LD_INT 0
9293: PPUSH
9294: CALL_OW 48
// ComHold ( un ) ;
9298: LD_VAR 0 5
9302: PPUSH
9303: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9307: LD_ADDR_EXP 52
9311: PUSH
9312: LD_EXP 52
9316: PPUSH
9317: LD_EXP 52
9321: PUSH
9322: LD_INT 1
9324: PLUS
9325: PPUSH
9326: LD_VAR 0 5
9330: PPUSH
9331: CALL_OW 1
9335: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9336: LD_ADDR_VAR 0 7
9340: PUSH
9341: LD_INT 167
9343: PPUSH
9344: LD_INT 243
9346: PPUSH
9347: CALL_OW 428
9351: PPUSH
9352: CALL_OW 274
9356: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9357: LD_VAR 0 7
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_INT 1000
9367: PPUSH
9368: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9372: LD_VAR 0 7
9376: PPUSH
9377: LD_INT 2
9379: PPUSH
9380: LD_INT 400
9382: PPUSH
9383: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9387: LD_ADDR_VAR 0 7
9391: PUSH
9392: LD_INT 169
9394: PPUSH
9395: LD_INT 229
9397: PPUSH
9398: CALL_OW 428
9402: ST_TO_ADDR
// for i := 1 to 3 do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: DOUBLE
9409: LD_INT 1
9411: DEC
9412: ST_TO_ADDR
9413: LD_INT 3
9415: PUSH
9416: FOR_TO
9417: IFFALSE 9504
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9419: LD_INT 0
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: LD_INT 4
9427: PUSH
9428: LD_INT 5
9430: PUSH
9431: LD_INT 5
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PPUSH
9445: CALL_OW 380
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 5
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9459: LD_VAR 0 5
9463: PPUSH
9464: LD_VAR 0 7
9468: PPUSH
9469: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9473: LD_ADDR_EXP 53
9477: PUSH
9478: LD_EXP 53
9482: PPUSH
9483: LD_EXP 53
9487: PUSH
9488: LD_INT 1
9490: PLUS
9491: PPUSH
9492: LD_VAR 0 5
9496: PPUSH
9497: CALL_OW 1
9501: ST_TO_ADDR
// end ;
9502: GO 9416
9504: POP
9505: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9506: LD_ADDR_VAR 0 7
9510: PUSH
9511: LD_INT 165
9513: PUSH
9514: LD_INT 227
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 173
9523: PUSH
9524: LD_INT 231
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: ST_TO_ADDR
// for i := 1 to tmp do
9535: LD_ADDR_VAR 0 2
9539: PUSH
9540: DOUBLE
9541: LD_INT 1
9543: DEC
9544: ST_TO_ADDR
9545: LD_VAR 0 7
9549: PUSH
9550: FOR_TO
9551: IFFALSE 9668
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9553: LD_INT 0
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: LD_INT 4
9561: PUSH
9562: LD_INT 5
9564: PUSH
9565: LD_INT 5
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: LD_OWVAR 67
9577: ARRAY
9578: PPUSH
9579: CALL_OW 380
// un := CreateHuman ;
9583: LD_ADDR_VAR 0 5
9587: PUSH
9588: CALL_OW 44
9592: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9593: LD_VAR 0 5
9597: PPUSH
9598: LD_VAR 0 7
9602: PUSH
9603: LD_VAR 0 2
9607: ARRAY
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PPUSH
9613: LD_VAR 0 7
9617: PUSH
9618: LD_VAR 0 2
9622: ARRAY
9623: PUSH
9624: LD_INT 2
9626: ARRAY
9627: PPUSH
9628: CALL_OW 428
9632: PPUSH
9633: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9637: LD_ADDR_EXP 53
9641: PUSH
9642: LD_EXP 53
9646: PPUSH
9647: LD_EXP 53
9651: PUSH
9652: LD_INT 1
9654: PLUS
9655: PPUSH
9656: LD_VAR 0 5
9660: PPUSH
9661: CALL_OW 1
9665: ST_TO_ADDR
// end ;
9666: GO 9550
9668: POP
9669: POP
// for i := 1 to 2 do
9670: LD_ADDR_VAR 0 2
9674: PUSH
9675: DOUBLE
9676: LD_INT 1
9678: DEC
9679: ST_TO_ADDR
9680: LD_INT 2
9682: PUSH
9683: FOR_TO
9684: IFFALSE 9739
// begin InitHc ;
9686: CALL_OW 19
// uc_nation := 0 ;
9690: LD_ADDR_OWVAR 21
9694: PUSH
9695: LD_INT 0
9697: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
9698: LD_ADDR_OWVAR 28
9702: PUSH
9703: LD_INT 16
9705: ST_TO_ADDR
// un := CreateHuman ;
9706: LD_ADDR_VAR 0 5
9710: PUSH
9711: CALL_OW 44
9715: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
9716: LD_VAR 0 5
9720: PPUSH
9721: LD_INT 166
9723: PPUSH
9724: LD_INT 233
9726: PPUSH
9727: LD_INT 2
9729: PPUSH
9730: LD_INT 0
9732: PPUSH
9733: CALL_OW 50
// end ;
9737: GO 9683
9739: POP
9740: POP
// uc_nation := 3 ;
9741: LD_ADDR_OWVAR 21
9745: PUSH
9746: LD_INT 3
9748: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
9749: LD_ADDR_VAR 0 7
9753: PUSH
9754: LD_INT 71
9756: PUSH
9757: LD_INT 52
9759: PUSH
9760: LD_INT 11
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: ST_TO_ADDR
// for i in tmp do
9768: LD_ADDR_VAR 0 2
9772: PUSH
9773: LD_VAR 0 7
9777: PUSH
9778: FOR_IN
9779: IFFALSE 9823
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
9781: LD_VAR 0 2
9785: PPUSH
9786: CALL_OW 274
9790: PPUSH
9791: LD_INT 1
9793: PPUSH
9794: LD_INT 3000
9796: PPUSH
9797: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
9801: LD_VAR 0 2
9805: PPUSH
9806: CALL_OW 274
9810: PPUSH
9811: LD_INT 2
9813: PPUSH
9814: LD_INT 600
9816: PPUSH
9817: CALL_OW 277
// end ;
9821: GO 9778
9823: POP
9824: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
9825: LD_ADDR_VAR 0 7
9829: PUSH
9830: LD_INT 41
9832: PUSH
9833: LD_INT 57
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 38
9842: PUSH
9843: LD_INT 55
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 50
9852: PUSH
9853: LD_INT 73
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 51
9862: PUSH
9863: LD_INT 65
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 82
9872: PUSH
9873: LD_INT 93
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 87
9882: PUSH
9883: LD_INT 100
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 91
9892: PUSH
9893: LD_INT 109
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 84
9902: PUSH
9903: LD_INT 120
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 113
9912: PUSH
9913: LD_INT 153
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 123
9922: PUSH
9923: LD_INT 171
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: LD_INT 125
9932: PUSH
9933: LD_INT 178
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: LD_INT 125
9942: PUSH
9943: LD_INT 188
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 125
9952: PUSH
9953: LD_INT 201
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 33
9962: PUSH
9963: LD_INT 60
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 76
9972: PUSH
9973: LD_INT 95
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 84
9982: PUSH
9983: LD_INT 111
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 112
9992: PUSH
9993: LD_INT 165
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: ST_TO_ADDR
// for i := 1 to tmp do
10019: LD_ADDR_VAR 0 2
10023: PUSH
10024: DOUBLE
10025: LD_INT 1
10027: DEC
10028: ST_TO_ADDR
10029: LD_VAR 0 7
10033: PUSH
10034: FOR_TO
10035: IFFALSE 10274
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10037: LD_ADDR_VAR 0 4
10041: PUSH
10042: LD_VAR 0 7
10046: PUSH
10047: LD_VAR 0 2
10051: ARRAY
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: LD_VAR 0 7
10061: PUSH
10062: LD_VAR 0 2
10066: ARRAY
10067: PUSH
10068: LD_INT 2
10070: ARRAY
10071: PPUSH
10072: CALL_OW 428
10076: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10077: LD_VAR 0 4
10081: PPUSH
10082: CALL_OW 266
10086: PUSH
10087: LD_INT 4
10089: PUSH
10090: LD_INT 5
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: IN
10097: IFFALSE 10177
// begin for j := 1 to Difficulty do
10099: LD_ADDR_VAR 0 3
10103: PUSH
10104: DOUBLE
10105: LD_INT 1
10107: DEC
10108: ST_TO_ADDR
10109: LD_OWVAR 67
10113: PUSH
10114: FOR_TO
10115: IFFALSE 10173
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10117: LD_INT 0
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: LD_INT 4
10125: PUSH
10126: LD_INT 5
10128: PUSH
10129: LD_INT 5
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: PUSH
10137: LD_OWVAR 67
10141: ARRAY
10142: PPUSH
10143: CALL_OW 380
// un := CreateHuman ;
10147: LD_ADDR_VAR 0 5
10151: PUSH
10152: CALL_OW 44
10156: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10157: LD_VAR 0 5
10161: PPUSH
10162: LD_VAR 0 4
10166: PPUSH
10167: CALL_OW 52
// end ;
10171: GO 10114
10173: POP
10174: POP
// end else
10175: GO 10243
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10177: LD_INT 0
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: LD_INT 4
10185: PUSH
10186: LD_INT 5
10188: PUSH
10189: LD_INT 5
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: PUSH
10197: LD_OWVAR 67
10201: ARRAY
10202: PPUSH
10203: CALL_OW 380
// un := CreateHuman ;
10207: LD_ADDR_VAR 0 5
10211: PUSH
10212: CALL_OW 44
10216: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10217: LD_VAR 0 5
10221: PPUSH
10222: LD_VAR 0 4
10226: PPUSH
10227: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10231: LD_VAR 0 5
10235: PPUSH
10236: LD_INT 9
10238: PPUSH
10239: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10243: LD_ADDR_EXP 54
10247: PUSH
10248: LD_EXP 54
10252: PPUSH
10253: LD_EXP 54
10257: PUSH
10258: LD_INT 1
10260: PLUS
10261: PPUSH
10262: LD_VAR 0 5
10266: PPUSH
10267: CALL_OW 1
10271: ST_TO_ADDR
// end ;
10272: GO 10034
10274: POP
10275: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10276: LD_ADDR_VAR 0 4
10280: PUSH
10281: LD_INT 10
10283: PPUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 30
10296: PUSH
10297: LD_INT 32
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 58
10306: PUSH
10307: EMPTY
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: PPUSH
10315: CALL_OW 70
10319: PUSH
10320: FOR_IN
10321: IFFALSE 10447
// begin if not Prob ( [ 40 , 50 , 75 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10323: LD_INT 40
10325: PUSH
10326: LD_INT 50
10328: PUSH
10329: LD_INT 75
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: PUSH
10337: LD_OWVAR 67
10341: ARRAY
10342: PUSH
10343: LD_EXP 7
10347: PUSH
10348: LD_INT 10
10350: MUL
10351: MINUS
10352: PPUSH
10353: CALL_OW 13
10357: NOT
10358: IFFALSE 10362
// continue ;
10360: GO 10320
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10362: LD_INT 0
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: LD_INT 4
10370: PUSH
10371: LD_INT 5
10373: PUSH
10374: LD_INT 5
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: LD_OWVAR 67
10386: ARRAY
10387: PPUSH
10388: CALL_OW 380
// un := CreateHuman ;
10392: LD_ADDR_VAR 0 5
10396: PUSH
10397: CALL_OW 44
10401: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10402: LD_VAR 0 5
10406: PPUSH
10407: LD_VAR 0 4
10411: PPUSH
10412: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10416: LD_ADDR_EXP 54
10420: PUSH
10421: LD_EXP 54
10425: PPUSH
10426: LD_EXP 54
10430: PUSH
10431: LD_INT 1
10433: PLUS
10434: PPUSH
10435: LD_VAR 0 5
10439: PPUSH
10440: CALL_OW 1
10444: ST_TO_ADDR
// end ;
10445: GO 10320
10447: POP
10448: POP
// for i := 1 to 5 do
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: DOUBLE
10455: LD_INT 1
10457: DEC
10458: ST_TO_ADDR
10459: LD_INT 5
10461: PUSH
10462: FOR_TO
10463: IFFALSE 10557
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10465: LD_INT 0
10467: PPUSH
10468: LD_INT 2
10470: PPUSH
10471: LD_INT 4
10473: PUSH
10474: LD_INT 5
10476: PUSH
10477: LD_INT 5
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_OWVAR 67
10489: ARRAY
10490: PPUSH
10491: CALL_OW 380
// un := CreateHuman ;
10495: LD_ADDR_VAR 0 5
10499: PUSH
10500: CALL_OW 44
10504: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10505: LD_VAR 0 5
10509: PPUSH
10510: LD_INT 66
10512: PPUSH
10513: LD_INT 101
10515: PPUSH
10516: LD_INT 3
10518: PPUSH
10519: LD_INT 0
10521: PPUSH
10522: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10526: LD_ADDR_EXP 54
10530: PUSH
10531: LD_EXP 54
10535: PPUSH
10536: LD_EXP 54
10540: PUSH
10541: LD_INT 1
10543: PLUS
10544: PPUSH
10545: LD_VAR 0 5
10549: PPUSH
10550: CALL_OW 1
10554: ST_TO_ADDR
// end ;
10555: GO 10462
10557: POP
10558: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10559: LD_ADDR_VAR 0 7
10563: PUSH
10564: LD_INT 72
10566: PUSH
10567: LD_INT 12
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: ST_TO_ADDR
// for i := 1 to tmp do
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: DOUBLE
10580: LD_INT 1
10582: DEC
10583: ST_TO_ADDR
10584: LD_VAR 0 7
10588: PUSH
10589: FOR_TO
10590: IFFALSE 10703
// for j := 1 to 6 do
10592: LD_ADDR_VAR 0 3
10596: PUSH
10597: DOUBLE
10598: LD_INT 1
10600: DEC
10601: ST_TO_ADDR
10602: LD_INT 6
10604: PUSH
10605: FOR_TO
10606: IFFALSE 10699
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10608: LD_INT 0
10610: PPUSH
10611: LD_INT 3
10613: PPUSH
10614: LD_INT 4
10616: PUSH
10617: LD_INT 5
10619: PUSH
10620: LD_INT 5
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: LIST
10627: PUSH
10628: LD_OWVAR 67
10632: ARRAY
10633: PPUSH
10634: CALL_OW 380
// un := CreateHuman ;
10638: LD_ADDR_VAR 0 5
10642: PUSH
10643: CALL_OW 44
10647: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
10648: LD_VAR 0 5
10652: PPUSH
10653: LD_VAR 0 7
10657: PUSH
10658: LD_VAR 0 2
10662: ARRAY
10663: PPUSH
10664: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10668: LD_ADDR_EXP 54
10672: PUSH
10673: LD_EXP 54
10677: PPUSH
10678: LD_EXP 54
10682: PUSH
10683: LD_INT 1
10685: PLUS
10686: PPUSH
10687: LD_VAR 0 5
10691: PPUSH
10692: CALL_OW 1
10696: ST_TO_ADDR
// end ;
10697: GO 10605
10699: POP
10700: POP
10701: GO 10589
10703: POP
10704: POP
// for i := 1 to 3 do
10705: LD_ADDR_VAR 0 2
10709: PUSH
10710: DOUBLE
10711: LD_INT 1
10713: DEC
10714: ST_TO_ADDR
10715: LD_INT 3
10717: PUSH
10718: FOR_TO
10719: IFFALSE 10804
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
10721: LD_INT 0
10723: PPUSH
10724: LD_INT 4
10726: PPUSH
10727: LD_INT 4
10729: PUSH
10730: LD_INT 5
10732: PUSH
10733: LD_INT 5
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_OWVAR 67
10745: ARRAY
10746: PPUSH
10747: CALL_OW 380
// un := CreateHuman ;
10751: LD_ADDR_VAR 0 5
10755: PUSH
10756: CALL_OW 44
10760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
10761: LD_VAR 0 5
10765: PPUSH
10766: LD_INT 17
10768: PPUSH
10769: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10773: LD_ADDR_EXP 54
10777: PUSH
10778: LD_EXP 54
10782: PPUSH
10783: LD_EXP 54
10787: PUSH
10788: LD_INT 1
10790: PLUS
10791: PPUSH
10792: LD_VAR 0 5
10796: PPUSH
10797: CALL_OW 1
10801: ST_TO_ADDR
// end ;
10802: GO 10718
10804: POP
10805: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
10806: LD_ADDR_VAR 0 2
10810: PUSH
10811: DOUBLE
10812: LD_INT 1
10814: DEC
10815: ST_TO_ADDR
10816: LD_INT 2
10818: PUSH
10819: LD_INT 3
10821: PUSH
10822: LD_INT 3
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: PUSH
10830: LD_OWVAR 67
10834: ARRAY
10835: PUSH
10836: FOR_TO
10837: IFFALSE 10957
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
10839: LD_INT 22
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: LD_INT 52
10850: PPUSH
10851: LD_INT 100
10853: PPUSH
10854: CALL 29433 0 5
// veh := CreateVehicle ;
10858: LD_ADDR_VAR 0 6
10862: PUSH
10863: CALL_OW 45
10867: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
10868: LD_INT 0
10870: PPUSH
10871: LD_INT 3
10873: PPUSH
10874: LD_INT 4
10876: PPUSH
10877: CALL_OW 380
// un := CreateHuman ;
10881: LD_ADDR_VAR 0 5
10885: PUSH
10886: CALL_OW 44
10890: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
10891: LD_VAR 0 6
10895: PPUSH
10896: LD_INT 107
10898: PPUSH
10899: LD_INT 182
10901: PPUSH
10902: LD_INT 4
10904: PPUSH
10905: LD_INT 0
10907: PPUSH
10908: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10912: LD_VAR 0 5
10916: PPUSH
10917: LD_VAR 0 6
10921: PPUSH
10922: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10926: LD_ADDR_EXP 54
10930: PUSH
10931: LD_EXP 54
10935: PPUSH
10936: LD_EXP 54
10940: PUSH
10941: LD_INT 1
10943: PLUS
10944: PPUSH
10945: LD_VAR 0 5
10949: PPUSH
10950: CALL_OW 1
10954: ST_TO_ADDR
// end ;
10955: GO 10836
10957: POP
10958: POP
// InitHc ;
10959: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 ] [ Difficulty ] do
10963: LD_ADDR_VAR 0 2
10967: PUSH
10968: DOUBLE
10969: LD_INT 1
10971: DEC
10972: ST_TO_ADDR
10973: LD_INT 6
10975: PUSH
10976: LD_INT 8
10978: PUSH
10979: LD_INT 10
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: LD_OWVAR 67
10991: ARRAY
10992: PUSH
10993: FOR_TO
10994: IFFALSE 11066
// begin uc_nation := 0 ;
10996: LD_ADDR_OWVAR 21
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11004: LD_ADDR_OWVAR 28
11008: PUSH
11009: LD_INT 15
11011: ST_TO_ADDR
// un := CreateHuman ;
11012: LD_ADDR_VAR 0 5
11016: PUSH
11017: CALL_OW 44
11021: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11022: LD_VAR 0 5
11026: PPUSH
11027: LD_INT 269
11029: PUSH
11030: LD_INT 300
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_VAR 0 2
11041: PUSH
11042: LD_INT 2
11044: MOD
11045: PUSH
11046: LD_INT 1
11048: PLUS
11049: ARRAY
11050: PPUSH
11051: LD_INT 182
11053: PPUSH
11054: LD_INT 4
11056: PPUSH
11057: LD_INT 0
11059: PPUSH
11060: CALL_OW 50
// end ;
11064: GO 10993
11066: POP
11067: POP
// uc_nation := 3 ;
11068: LD_ADDR_OWVAR 21
11072: PUSH
11073: LD_INT 3
11075: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
11076: LD_EXP 8
11080: PUSH
11081: LD_INT 10
11083: PUSH
11084: LD_INT 8
11086: PUSH
11087: LD_INT 6
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: PUSH
11095: LD_OWVAR 67
11099: ARRAY
11100: LESS
11101: IFFALSE 11180
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11103: LD_INT 21
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: LD_INT 1
11111: PPUSH
11112: LD_INT 51
11114: PPUSH
11115: LD_INT 12
11117: PPUSH
11118: CALL 29433 0 5
// veh := CreateVehicle ;
11122: LD_ADDR_VAR 0 6
11126: PUSH
11127: CALL_OW 45
11131: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11132: LD_VAR 0 6
11136: PPUSH
11137: LD_INT 269
11139: PPUSH
11140: LD_INT 66
11142: PPUSH
11143: LD_INT 4
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL 63238 0 5
// SetLives ( veh , 333 ) ;
11153: LD_VAR 0 6
11157: PPUSH
11158: LD_INT 333
11160: PPUSH
11161: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11165: LD_VAR 0 6
11169: PPUSH
11170: LD_INT 2
11172: PPUSH
11173: LD_INT 100
11175: PPUSH
11176: CALL_OW 290
// end ; end ;
11180: LD_VAR 0 1
11184: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11185: LD_EXP 50
11189: PUSH
11190: LD_EXP 50
11194: PPUSH
11195: CALL_OW 255
11199: PUSH
11200: LD_INT 3
11202: EQUAL
11203: AND
11204: IFFALSE 11367
11206: GO 11208
11208: DISABLE
11209: LD_INT 0
11211: PPUSH
// begin enable ;
11212: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11213: LD_INT 81
11215: PUSH
11216: LD_INT 3
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 91
11225: PUSH
11226: LD_EXP 50
11230: PUSH
11231: LD_INT 15
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PPUSH
11243: CALL_OW 69
11247: IFFALSE 11327
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11249: LD_EXP 50
11253: PPUSH
11254: CALL_OW 311
11258: NOT
11259: IFFALSE 11325
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11261: LD_ADDR_VAR 0 1
11265: PUSH
11266: LD_INT 22
11268: PUSH
11269: LD_INT 3
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 21
11278: PUSH
11279: LD_INT 1
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PPUSH
11290: CALL_OW 69
11294: PPUSH
11295: LD_EXP 50
11299: PPUSH
11300: CALL_OW 74
11304: ST_TO_ADDR
// if driver then
11305: LD_VAR 0 1
11309: IFFALSE 11325
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11311: LD_VAR 0 1
11315: PPUSH
11316: LD_EXP 50
11320: PPUSH
11321: CALL_OW 120
// end ; exit ;
11325: GO 11367
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11327: LD_EXP 50
11331: PPUSH
11332: CALL_OW 256
11336: PUSH
11337: LD_INT 1000
11339: LESS
11340: PUSH
11341: LD_EXP 50
11345: PPUSH
11346: CALL_OW 311
11350: AND
11351: IFFALSE 11367
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11353: LD_EXP 50
11357: PPUSH
11358: CALL_OW 311
11362: PPUSH
11363: CALL 62798 0 1
// end ;
11367: PPOPN 1
11369: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11370: LD_EXP 52
11374: PPUSH
11375: LD_INT 3
11377: PUSH
11378: LD_INT 24
11380: PUSH
11381: LD_INT 1000
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 72
11396: PUSH
11397: LD_EXP 52
11401: PPUSH
11402: LD_INT 25
11404: PUSH
11405: LD_INT 4
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 50
11414: PUSH
11415: EMPTY
11416: LIST
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PPUSH
11422: CALL_OW 72
11426: AND
11427: IFFALSE 11615
11429: GO 11431
11431: DISABLE
11432: LD_INT 0
11434: PPUSH
11435: PPUSH
11436: PPUSH
// begin enable ;
11437: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11438: LD_ADDR_VAR 0 3
11442: PUSH
11443: LD_EXP 52
11447: PPUSH
11448: LD_INT 3
11450: PUSH
11451: LD_INT 24
11453: PUSH
11454: LD_INT 1000
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PPUSH
11465: CALL_OW 72
11469: PPUSH
11470: LD_INT 1
11472: PPUSH
11473: CALL 63038 0 2
11477: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11478: LD_ADDR_VAR 0 2
11482: PUSH
11483: LD_EXP 52
11487: PPUSH
11488: LD_INT 25
11490: PUSH
11491: LD_INT 4
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 50
11500: PUSH
11501: EMPTY
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PPUSH
11508: CALL_OW 72
11512: PUSH
11513: LD_INT 1
11515: ARRAY
11516: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11517: LD_VAR 0 2
11521: PPUSH
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 1
11529: ARRAY
11530: PPUSH
11531: CALL 58537 0 2
11535: NOT
11536: IFFALSE 11615
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11538: LD_VAR 0 3
11542: PUSH
11543: LD_INT 1
11545: ARRAY
11546: PPUSH
11547: LD_INT 9
11549: PPUSH
11550: CALL_OW 308
11554: NOT
11555: IFFALSE 11573
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
11557: LD_VAR 0 3
11561: PUSH
11562: LD_INT 1
11564: ARRAY
11565: PPUSH
11566: LD_INT 9
11568: PPUSH
11569: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
11573: LD_VAR 0 2
11577: PPUSH
11578: LD_VAR 0 3
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
11591: LD_VAR 0 2
11595: PPUSH
11596: LD_INT 179
11598: PPUSH
11599: LD_INT 113
11601: PPUSH
11602: CALL_OW 171
// AddComHold ( sci ) ;
11606: LD_VAR 0 2
11610: PPUSH
11611: CALL_OW 200
// end ; end ;
11615: PPOPN 3
11617: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
11618: LD_INT 2
11620: PPUSH
11621: LD_INT 52
11623: PPUSH
11624: CALL_OW 292
11628: IFFALSE 11733
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
11636: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: LD_EXP 54
11646: PPUSH
11647: LD_INT 25
11649: PUSH
11650: LD_INT 1
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 50
11659: PUSH
11660: EMPTY
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 72
11671: ST_TO_ADDR
// if not tmp then
11672: LD_VAR 0 2
11676: NOT
11677: IFFALSE 11681
// exit ;
11679: GO 11733
// for i in tmp do
11681: LD_ADDR_VAR 0 1
11685: PUSH
11686: LD_VAR 0 2
11690: PUSH
11691: FOR_IN
11692: IFFALSE 11731
// begin if IsInUnit ( i ) then
11694: LD_VAR 0 1
11698: PPUSH
11699: CALL_OW 310
11703: IFFALSE 11714
// ComExitBuilding ( i ) ;
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
11714: LD_VAR 0 1
11718: PPUSH
11719: LD_INT 84
11721: PPUSH
11722: LD_INT 133
11724: PPUSH
11725: CALL_OW 174
// end ;
11729: GO 11691
11731: POP
11732: POP
// end ;
11733: PPOPN 2
11735: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
11736: LD_EXP 14
11740: IFFALSE 11889
11742: GO 11744
11744: DISABLE
11745: LD_INT 0
11747: PPUSH
11748: PPUSH
11749: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
11750: LD_ADDR_VAR 0 2
11754: PUSH
11755: LD_INT 72
11757: PUSH
11758: LD_INT 12
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket , ru_gun ] , [ ru_rocket , ru_heavy_gun ] ] [ Difficulty ] ;
11765: LD_ADDR_VAR 0 3
11769: PUSH
11770: LD_INT 44
11772: PUSH
11773: LD_INT 43
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 47
11782: PUSH
11783: LD_INT 44
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 47
11792: PUSH
11793: LD_INT 46
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: PUSH
11805: LD_OWVAR 67
11809: ARRAY
11810: ST_TO_ADDR
// for i := 1 to 6 do
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: DOUBLE
11817: LD_INT 1
11819: DEC
11820: ST_TO_ADDR
11821: LD_INT 6
11823: PUSH
11824: FOR_TO
11825: IFFALSE 11887
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
11827: LD_VAR 0 2
11831: PPUSH
11832: LD_INT 22
11834: PUSH
11835: LD_INT 23
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_VAR 0 1
11846: PUSH
11847: LD_INT 2
11849: MOD
11850: PUSH
11851: LD_INT 1
11853: PLUS
11854: ARRAY
11855: PPUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: LD_VAR 0 3
11866: PUSH
11867: LD_VAR 0 1
11871: PUSH
11872: LD_INT 2
11874: MOD
11875: PUSH
11876: LD_INT 1
11878: PLUS
11879: ARRAY
11880: PPUSH
11881: CALL_OW 185
11885: GO 11824
11887: POP
11888: POP
// end ;
11889: PPOPN 3
11891: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
11892: LD_EXP 11
11896: IFFALSE 13045
11898: GO 11900
11900: DISABLE
11901: LD_INT 0
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
11907: PPUSH
11908: PPUSH
// begin enable ;
11909: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
11910: LD_ADDR_VAR 0 6
11914: PUSH
11915: LD_INT 10
11917: PPUSH
11918: LD_INT 81
11920: PUSH
11921: LD_INT 3
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 70
11932: ST_TO_ADDR
// if ruSpecialVehicleGroup then
11933: LD_EXP 55
11937: IFFALSE 12203
// begin for i in ruSpecialVehicleGroup do
11939: LD_ADDR_VAR 0 1
11943: PUSH
11944: LD_EXP 55
11948: PUSH
11949: FOR_IN
11950: IFFALSE 12201
// begin if enemyInBase then
11952: LD_VAR 0 6
11956: IFFALSE 12199
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
11958: LD_VAR 0 1
11962: PPUSH
11963: CALL_OW 256
11967: PUSH
11968: LD_INT 500
11970: GREATER
11971: PUSH
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL_OW 110
11981: PUSH
11982: LD_INT 0
11984: EQUAL
11985: AND
11986: IFFALSE 12012
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_VAR 0 6
11997: PPUSH
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 74
12007: PPUSH
12008: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12012: LD_VAR 0 1
12016: PPUSH
12017: CALL_OW 256
12021: PUSH
12022: LD_INT 500
12024: LESSEQUAL
12025: PUSH
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 110
12035: PUSH
12036: LD_INT 0
12038: EQUAL
12039: AND
12040: IFFALSE 12069
// begin SetTag ( i , 1 ) ;
12042: LD_VAR 0 1
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_INT 83
12061: PPUSH
12062: LD_INT 134
12064: PPUSH
12065: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12069: LD_VAR 0 1
12073: PPUSH
12074: CALL_OW 256
12078: PUSH
12079: LD_INT 1000
12081: LESS
12082: PUSH
12083: LD_VAR 0 1
12087: PPUSH
12088: CALL_OW 110
12092: PUSH
12093: LD_INT 1
12095: EQUAL
12096: AND
12097: PUSH
12098: LD_VAR 0 1
12102: PPUSH
12103: LD_INT 83
12105: PPUSH
12106: LD_INT 134
12108: PPUSH
12109: CALL_OW 297
12113: PUSH
12114: LD_INT 6
12116: LESS
12117: AND
12118: IFFALSE 12146
// begin SetFuel ( i , 100 ) ;
12120: LD_VAR 0 1
12124: PPUSH
12125: LD_INT 100
12127: PPUSH
12128: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12132: LD_VAR 0 1
12136: PPUSH
12137: CALL_OW 310
12141: PPUSH
12142: CALL 62918 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12146: LD_VAR 0 1
12150: PPUSH
12151: CALL_OW 256
12155: PUSH
12156: LD_INT 1000
12158: EQUAL
12159: PUSH
12160: LD_VAR 0 1
12164: PPUSH
12165: CALL_OW 110
12169: PUSH
12170: LD_INT 1
12172: EQUAL
12173: AND
12174: PUSH
12175: LD_VAR 0 1
12179: PPUSH
12180: CALL_OW 311
12184: AND
12185: IFFALSE 12199
// SetTag ( i , 0 ) ;
12187: LD_VAR 0 1
12191: PPUSH
12192: LD_INT 0
12194: PPUSH
12195: CALL_OW 109
// end ; end ;
12199: GO 11949
12201: POP
12202: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12203: LD_ADDR_VAR 0 5
12207: PUSH
12208: LD_EXP 54
12212: PPUSH
12213: LD_INT 25
12215: PUSH
12216: LD_INT 4
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 72
12227: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12228: LD_ADDR_VAR 0 4
12232: PUSH
12233: LD_EXP 54
12237: PPUSH
12238: LD_INT 92
12240: PUSH
12241: LD_INT 92
12243: PUSH
12244: LD_INT 155
12246: PUSH
12247: LD_INT 12
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 3
12258: PUSH
12259: LD_INT 24
12261: PUSH
12262: LD_INT 1000
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 72
12281: ST_TO_ADDR
// if sci then
12282: LD_VAR 0 5
12286: IFFALSE 12419
// begin if hurt then
12288: LD_VAR 0 4
12292: IFFALSE 12365
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12294: LD_VAR 0 5
12298: PPUSH
12299: LD_INT 3
12301: PUSH
12302: LD_INT 54
12304: PUSH
12305: EMPTY
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PPUSH
12312: CALL_OW 72
12316: IFFALSE 12345
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12318: LD_VAR 0 5
12322: PPUSH
12323: LD_INT 3
12325: PUSH
12326: LD_INT 54
12328: PUSH
12329: EMPTY
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PPUSH
12336: CALL_OW 72
12340: PPUSH
12341: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12345: LD_VAR 0 5
12349: PPUSH
12350: LD_VAR 0 4
12354: PUSH
12355: LD_INT 1
12357: ARRAY
12358: PPUSH
12359: CALL_OW 188
// end else
12363: GO 12419
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12365: LD_VAR 0 5
12369: PPUSH
12370: LD_INT 3
12372: PUSH
12373: LD_INT 54
12375: PUSH
12376: EMPTY
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 72
12387: IFFALSE 12419
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12389: LD_VAR 0 5
12393: PPUSH
12394: LD_INT 3
12396: PUSH
12397: LD_INT 54
12399: PUSH
12400: EMPTY
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PPUSH
12407: CALL_OW 72
12411: PPUSH
12412: LD_INT 17
12414: PPUSH
12415: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12419: LD_ADDR_VAR 0 3
12423: PUSH
12424: LD_INT 10
12426: PPUSH
12427: LD_INT 21
12429: PUSH
12430: LD_INT 3
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 3
12439: PUSH
12440: LD_INT 24
12442: PUSH
12443: LD_INT 1000
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PPUSH
12458: CALL_OW 70
12462: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12463: LD_ADDR_VAR 0 2
12467: PUSH
12468: LD_EXP 54
12472: PPUSH
12473: LD_INT 25
12475: PUSH
12476: LD_INT 2
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PPUSH
12483: CALL_OW 72
12487: PUSH
12488: LD_INT 22
12490: PUSH
12491: LD_INT 3
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 34
12500: PUSH
12501: LD_INT 52
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 69
12516: UNION
12517: ST_TO_ADDR
// if not tmp then
12518: LD_VAR 0 2
12522: NOT
12523: IFFALSE 12527
// exit ;
12525: GO 13045
// for i in tmp do
12527: LD_ADDR_VAR 0 1
12531: PUSH
12532: LD_VAR 0 2
12536: PUSH
12537: FOR_IN
12538: IFFALSE 13043
// begin if GetClass ( i ) = 2 then
12540: LD_VAR 0 1
12544: PPUSH
12545: CALL_OW 257
12549: PUSH
12550: LD_INT 2
12552: EQUAL
12553: IFFALSE 12776
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12555: LD_VAR 0 1
12559: PPUSH
12560: CALL_OW 256
12564: PUSH
12565: LD_INT 1000
12567: EQUAL
12568: PUSH
12569: LD_VAR 0 1
12573: PPUSH
12574: CALL_OW 110
12578: PUSH
12579: LD_INT 1
12581: EQUAL
12582: AND
12583: IFFALSE 12597
// SetTag ( i , 0 ) ;
12585: LD_VAR 0 1
12589: PPUSH
12590: LD_INT 0
12592: PPUSH
12593: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12597: LD_VAR 0 1
12601: PPUSH
12602: CALL_OW 256
12606: PUSH
12607: LD_INT 500
12609: LESSEQUAL
12610: PUSH
12611: LD_VAR 0 1
12615: PPUSH
12616: CALL_OW 110
12620: PUSH
12621: LD_INT 0
12623: EQUAL
12624: AND
12625: IFFALSE 12654
// begin SetTag ( i , 1 ) ;
12627: LD_VAR 0 1
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
12639: LD_VAR 0 1
12643: PPUSH
12644: LD_INT 92
12646: PPUSH
12647: LD_INT 155
12649: PPUSH
12650: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
12654: LD_VAR 0 3
12658: PUSH
12659: LD_VAR 0 1
12663: PPUSH
12664: CALL_OW 256
12668: PUSH
12669: LD_INT 500
12671: GREATER
12672: AND
12673: PUSH
12674: LD_VAR 0 1
12678: PPUSH
12679: CALL_OW 110
12683: PUSH
12684: LD_INT 0
12686: EQUAL
12687: AND
12688: PUSH
12689: LD_VAR 0 1
12693: PPUSH
12694: CALL_OW 314
12698: NOT
12699: AND
12700: IFFALSE 12774
// begin if b then
12702: LD_VAR 0 3
12706: IFFALSE 12738
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12708: LD_VAR 0 1
12712: PPUSH
12713: LD_VAR 0 3
12717: PUSH
12718: LD_INT 1
12720: PPUSH
12721: LD_VAR 0 3
12725: PPUSH
12726: CALL_OW 12
12730: ARRAY
12731: PPUSH
12732: CALL_OW 130
12736: GO 12774
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
12738: LD_VAR 0 1
12742: PPUSH
12743: LD_INT 94
12745: PPUSH
12746: LD_INT 165
12748: PPUSH
12749: CALL_OW 297
12753: PUSH
12754: LD_INT 8
12756: GREATER
12757: IFFALSE 12774
// ComMoveXY ( i , 94 , 165 ) ;
12759: LD_VAR 0 1
12763: PPUSH
12764: LD_INT 94
12766: PPUSH
12767: LD_INT 165
12769: PPUSH
12770: CALL_OW 111
// end ; end else
12774: GO 13041
// if GetWeapon ( i ) = ru_crane then
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 264
12785: PUSH
12786: LD_INT 52
12788: EQUAL
12789: IFFALSE 13041
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12791: LD_VAR 0 1
12795: PPUSH
12796: CALL_OW 256
12800: PUSH
12801: LD_INT 1000
12803: EQUAL
12804: PUSH
12805: LD_VAR 0 1
12809: PPUSH
12810: CALL_OW 110
12814: PUSH
12815: LD_INT 1
12817: EQUAL
12818: AND
12819: IFFALSE 12845
// begin SetTag ( i , 0 ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_INT 0
12828: PPUSH
12829: CALL_OW 109
// SetFuel ( i , 100 ) ;
12833: LD_VAR 0 1
12837: PPUSH
12838: LD_INT 100
12840: PPUSH
12841: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12845: LD_VAR 0 1
12849: PPUSH
12850: CALL_OW 256
12854: PUSH
12855: LD_INT 500
12857: LESSEQUAL
12858: PUSH
12859: LD_VAR 0 1
12863: PPUSH
12864: CALL_OW 110
12868: PUSH
12869: LD_INT 0
12871: EQUAL
12872: AND
12873: IFFALSE 12916
// begin SetTag ( i , 1 ) ;
12875: LD_VAR 0 1
12879: PPUSH
12880: LD_INT 1
12882: PPUSH
12883: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
12887: LD_VAR 0 1
12891: PPUSH
12892: LD_INT 83
12894: PPUSH
12895: LD_INT 135
12897: PPUSH
12898: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12902: LD_VAR 0 1
12906: PPUSH
12907: CALL_OW 310
12911: PPUSH
12912: CALL 62918 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
12916: LD_VAR 0 1
12920: PPUSH
12921: CALL_OW 256
12925: PUSH
12926: LD_INT 500
12928: GREATER
12929: PUSH
12930: LD_VAR 0 1
12934: PPUSH
12935: CALL_OW 110
12939: PUSH
12940: LD_INT 0
12942: EQUAL
12943: AND
12944: PUSH
12945: LD_VAR 0 1
12949: PPUSH
12950: CALL_OW 311
12954: AND
12955: PUSH
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 314
12965: NOT
12966: AND
12967: IFFALSE 13041
// begin if b then
12969: LD_VAR 0 3
12973: IFFALSE 13005
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
12975: LD_VAR 0 1
12979: PPUSH
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 1
12987: PPUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: CALL_OW 12
12997: ARRAY
12998: PPUSH
12999: CALL_OW 130
13003: GO 13041
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13005: LD_VAR 0 1
13009: PPUSH
13010: LD_INT 94
13012: PPUSH
13013: LD_INT 165
13015: PPUSH
13016: CALL_OW 297
13020: PUSH
13021: LD_INT 8
13023: GREATER
13024: IFFALSE 13041
// ComMoveXY ( i , 94 , 165 ) ;
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_INT 94
13033: PPUSH
13034: LD_INT 165
13036: PPUSH
13037: CALL_OW 111
// end ; end ; end ;
13041: GO 12537
13043: POP
13044: POP
// end ;
13045: PPOPN 6
13047: END
// every 7 7$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13048: LD_EXP 23
13052: NOT
13053: PUSH
13054: LD_EXP 27
13058: NOT
13059: AND
13060: IFFALSE 13960
13062: GO 13064
13064: DISABLE
13065: LD_INT 0
13067: PPUSH
13068: PPUSH
13069: PPUSH
13070: PPUSH
// begin enable ;
13071: ENABLE
// if Prob ( [ 35 , 45 , 55 ] [ Difficulty ] ) then
13072: LD_INT 35
13074: PUSH
13075: LD_INT 45
13077: PUSH
13078: LD_INT 55
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_OWVAR 67
13090: ARRAY
13091: PPUSH
13092: CALL_OW 13
13096: IFFALSE 13112
// waveStrength := waveStrength + 1 ;
13098: LD_ADDR_EXP 57
13102: PUSH
13103: LD_EXP 57
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 ] [ Difficulty ] then
13112: LD_EXP 57
13116: PUSH
13117: LD_INT 4
13119: PUSH
13120: LD_INT 5
13122: PUSH
13123: LD_INT 6
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: LD_OWVAR 67
13135: ARRAY
13136: GREATER
13137: IFFALSE 13170
// begin waveStrength := waveStrength + Difficulty ;
13139: LD_ADDR_EXP 57
13143: PUSH
13144: LD_EXP 57
13148: PUSH
13149: LD_OWVAR 67
13153: PLUS
13154: ST_TO_ADDR
// disableAttackOnHeike := true ;
13155: LD_ADDR_EXP 27
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13163: LD_INT 6300
13165: PPUSH
13166: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13170: LD_EXP 27
13174: PUSH
13175: LD_OWVAR 67
13179: PUSH
13180: LD_INT 1
13182: GREATER
13183: AND
13184: IFFALSE 13389
// begin for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
13186: LD_ADDR_VAR 0 1
13190: PUSH
13191: DOUBLE
13192: LD_INT 1
13194: DEC
13195: ST_TO_ADDR
13196: LD_INT 3
13198: PUSH
13199: LD_INT 3
13201: PUSH
13202: LD_INT 4
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: PUSH
13210: LD_OWVAR 67
13214: ARRAY
13215: PUSH
13216: FOR_TO
13217: IFFALSE 13387
// begin InitHc ;
13219: CALL_OW 19
// InitVc ;
13223: CALL_OW 20
// uc_side := 3 ;
13227: LD_ADDR_OWVAR 20
13231: PUSH
13232: LD_INT 3
13234: ST_TO_ADDR
// uc_nation := 3 ;
13235: LD_ADDR_OWVAR 21
13239: PUSH
13240: LD_INT 3
13242: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13243: LD_INT 0
13245: PPUSH
13246: LD_INT 1
13248: PPUSH
13249: LD_OWVAR 67
13253: PUSH
13254: LD_INT 2
13256: PLUS
13257: PPUSH
13258: CALL_OW 380
// un := CreateHuman ;
13262: LD_ADDR_VAR 0 2
13266: PUSH
13267: CALL_OW 44
13271: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13272: LD_VAR 0 2
13276: PPUSH
13277: LD_INT 160
13279: PPUSH
13280: LD_INT 3
13282: PPUSH
13283: LD_INT 2
13285: PPUSH
13286: LD_INT 0
13288: PPUSH
13289: CALL 63238 0 5
// SetClass ( un , class_bazooker ) ;
13293: LD_VAR 0 2
13297: PPUSH
13298: LD_INT 9
13300: PPUSH
13301: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13305: LD_ADDR_EXP 56
13309: PUSH
13310: LD_EXP 56
13314: PPUSH
13315: LD_EXP 56
13319: PUSH
13320: LD_INT 1
13322: PLUS
13323: PPUSH
13324: LD_VAR 0 2
13328: PPUSH
13329: CALL_OW 1
13333: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13334: LD_VAR 0 2
13338: PPUSH
13339: LD_INT 177
13341: PPUSH
13342: LD_INT 17
13344: PPUSH
13345: CALL_OW 111
// wait ( 0 0$2 ) ;
13349: LD_INT 70
13351: PPUSH
13352: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13356: LD_ADDR_VAR 0 4
13360: PUSH
13361: LD_VAR 0 4
13365: PPUSH
13366: LD_VAR 0 4
13370: PUSH
13371: LD_INT 1
13373: PLUS
13374: PPUSH
13375: LD_VAR 0 2
13379: PPUSH
13380: CALL_OW 1
13384: ST_TO_ADDR
// end ;
13385: GO 13216
13387: POP
13388: POP
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + waveStrength do
13389: LD_ADDR_VAR 0 1
13393: PUSH
13394: DOUBLE
13395: LD_INT 1
13397: DEC
13398: ST_TO_ADDR
13399: LD_INT 2
13401: PUSH
13402: LD_INT 3
13404: PUSH
13405: LD_INT 4
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_OWVAR 67
13417: ARRAY
13418: PUSH
13419: LD_EXP 57
13423: PLUS
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13735
// begin InitHc ;
13428: CALL_OW 19
// InitVc ;
13432: CALL_OW 20
// uc_side := 3 ;
13436: LD_ADDR_OWVAR 20
13440: PUSH
13441: LD_INT 3
13443: ST_TO_ADDR
// uc_nation := 3 ;
13444: LD_ADDR_OWVAR 21
13448: PUSH
13449: LD_INT 3
13451: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13452: LD_INT 22
13454: PUSH
13455: LD_INT 23
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 1
13464: PPUSH
13465: LD_INT 2
13467: PPUSH
13468: CALL_OW 12
13472: ARRAY
13473: PPUSH
13474: LD_INT 1
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: LD_INT 44
13482: PUSH
13483: LD_INT 45
13485: PUSH
13486: LD_INT 43
13488: PUSH
13489: LD_INT 42
13491: PUSH
13492: LD_INT 44
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 1
13504: PPUSH
13505: LD_INT 5
13507: PPUSH
13508: CALL_OW 12
13512: ARRAY
13513: PPUSH
13514: LD_INT 99
13516: PPUSH
13517: CALL 29433 0 5
// veh := CreateVehicle ;
13521: LD_ADDR_VAR 0 3
13525: PUSH
13526: CALL_OW 45
13530: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
13531: LD_VAR 0 3
13535: PPUSH
13536: LD_INT 160
13538: PPUSH
13539: LD_INT 3
13541: PPUSH
13542: LD_INT 2
13544: PPUSH
13545: LD_INT 0
13547: PPUSH
13548: CALL 63238 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
13552: LD_ADDR_EXP 56
13556: PUSH
13557: LD_EXP 56
13561: PPUSH
13562: LD_EXP 56
13566: PUSH
13567: LD_INT 1
13569: PLUS
13570: PPUSH
13571: LD_VAR 0 3
13575: PPUSH
13576: CALL_OW 1
13580: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
13581: LD_INT 0
13583: PPUSH
13584: LD_INT 3
13586: PPUSH
13587: LD_OWVAR 67
13591: PUSH
13592: LD_INT 2
13594: PLUS
13595: PPUSH
13596: CALL_OW 380
// un := CreateHuman ;
13600: LD_ADDR_VAR 0 2
13604: PUSH
13605: CALL_OW 44
13609: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13610: LD_VAR 0 2
13614: PPUSH
13615: LD_VAR 0 3
13619: PPUSH
13620: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13624: LD_ADDR_EXP 56
13628: PUSH
13629: LD_EXP 56
13633: PPUSH
13634: LD_EXP 56
13638: PUSH
13639: LD_INT 1
13641: PLUS
13642: PPUSH
13643: LD_VAR 0 2
13647: PPUSH
13648: CALL_OW 1
13652: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13653: LD_VAR 0 2
13657: PPUSH
13658: LD_INT 177
13660: PPUSH
13661: LD_INT 17
13663: PPUSH
13664: CALL_OW 111
// wait ( 0 0$2 ) ;
13668: LD_INT 70
13670: PPUSH
13671: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
13675: LD_ADDR_VAR 0 4
13679: PUSH
13680: LD_VAR 0 4
13684: PPUSH
13685: LD_VAR 0 4
13689: PUSH
13690: LD_INT 1
13692: PLUS
13693: PPUSH
13694: LD_VAR 0 3
13698: PPUSH
13699: CALL_OW 1
13703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13704: LD_ADDR_VAR 0 4
13708: PUSH
13709: LD_VAR 0 4
13713: PPUSH
13714: LD_VAR 0 4
13718: PUSH
13719: LD_INT 1
13721: PLUS
13722: PPUSH
13723: LD_VAR 0 2
13727: PPUSH
13728: CALL_OW 1
13732: ST_TO_ADDR
// end ;
13733: GO 13425
13735: POP
13736: POP
// for i in tmp do
13737: LD_ADDR_VAR 0 1
13741: PUSH
13742: LD_VAR 0 4
13746: PUSH
13747: FOR_IN
13748: IFFALSE 13838
// begin if Prob ( 50 ) then
13750: LD_INT 50
13752: PPUSH
13753: CALL_OW 13
13757: IFFALSE 13776
// ComAgressiveMove ( i , 206 , 73 ) else
13759: LD_VAR 0 1
13763: PPUSH
13764: LD_INT 206
13766: PPUSH
13767: LD_INT 73
13769: PPUSH
13770: CALL_OW 114
13774: GO 13836
// begin ComAgressiveMove ( i , 206 , 73 ) ;
13776: LD_VAR 0 1
13780: PPUSH
13781: LD_INT 206
13783: PPUSH
13784: LD_INT 73
13786: PPUSH
13787: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
13791: LD_VAR 0 1
13795: PPUSH
13796: LD_INT 257
13798: PPUSH
13799: LD_INT 105
13801: PPUSH
13802: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
13806: LD_VAR 0 1
13810: PPUSH
13811: LD_INT 227
13813: PPUSH
13814: LD_INT 97
13816: PPUSH
13817: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 206
13828: PPUSH
13829: LD_INT 73
13831: PPUSH
13832: CALL_OW 174
// end ; end ;
13836: GO 13747
13838: POP
13839: POP
// repeat wait ( 0 0$1 ) ;
13840: LD_INT 35
13842: PPUSH
13843: CALL_OW 67
// for i in tmp do
13847: LD_ADDR_VAR 0 1
13851: PUSH
13852: LD_VAR 0 4
13856: PUSH
13857: FOR_IN
13858: IFFALSE 13937
// if IsDead ( i ) then
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL_OW 301
13869: IFFALSE 13889
// tmp := tmp diff i else
13871: LD_ADDR_VAR 0 4
13875: PUSH
13876: LD_VAR 0 4
13880: PUSH
13881: LD_VAR 0 1
13885: DIFF
13886: ST_TO_ADDR
13887: GO 13935
// if not HasTask ( i ) then
13889: LD_VAR 0 1
13893: PPUSH
13894: CALL_OW 314
13898: NOT
13899: IFFALSE 13935
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
13901: LD_VAR 0 1
13905: PPUSH
13906: LD_INT 81
13908: PUSH
13909: LD_INT 3
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: PPUSH
13921: LD_VAR 0 1
13925: PPUSH
13926: CALL_OW 74
13930: PPUSH
13931: CALL_OW 115
13935: GO 13857
13937: POP
13938: POP
// until not tmp ;
13939: LD_VAR 0 4
13943: NOT
13944: IFFALSE 13840
// if firstAttack then
13946: LD_EXP 28
13950: IFFALSE 13960
// firstAttack := false ;
13952: LD_ADDR_EXP 28
13956: PUSH
13957: LD_INT 0
13959: ST_TO_ADDR
// end ;
13960: PPOPN 4
13962: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
13963: LD_EXP 23
13967: NOT
13968: PUSH
13969: LD_EXP 3
13973: AND
13974: PUSH
13975: LD_EXP 16
13979: NOT
13980: AND
13981: IFFALSE 14813
13983: GO 13985
13985: DISABLE
13986: LD_INT 0
13988: PPUSH
13989: PPUSH
13990: PPUSH
13991: PPUSH
// begin enable ;
13992: ENABLE
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: DOUBLE
13999: LD_INT 1
14001: DEC
14002: ST_TO_ADDR
14003: LD_INT 1
14005: PUSH
14006: LD_INT 2
14008: PUSH
14009: LD_INT 2
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_OWVAR 67
14021: ARRAY
14022: PUSH
14023: FOR_TO
14024: IFFALSE 14325
// begin InitHc ;
14026: CALL_OW 19
// InitVc ;
14030: CALL_OW 20
// uc_side := 3 ;
14034: LD_ADDR_OWVAR 20
14038: PUSH
14039: LD_INT 3
14041: ST_TO_ADDR
// uc_nation := 3 ;
14042: LD_ADDR_OWVAR 21
14046: PUSH
14047: LD_INT 3
14049: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14050: LD_INT 22
14052: PUSH
14053: LD_INT 23
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 1
14062: PPUSH
14063: LD_INT 2
14065: PPUSH
14066: CALL_OW 12
14070: ARRAY
14071: PPUSH
14072: LD_INT 1
14074: PPUSH
14075: LD_INT 1
14077: PPUSH
14078: LD_INT 44
14080: PUSH
14081: LD_INT 43
14083: PUSH
14084: LD_INT 42
14086: PUSH
14087: LD_INT 44
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 1
14098: PPUSH
14099: LD_INT 4
14101: PPUSH
14102: CALL_OW 12
14106: ARRAY
14107: PPUSH
14108: LD_INT 99
14110: PPUSH
14111: CALL 29433 0 5
// veh := CreateVehicle ;
14115: LD_ADDR_VAR 0 3
14119: PUSH
14120: CALL_OW 45
14124: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14125: LD_VAR 0 3
14129: PPUSH
14130: LD_INT 5
14132: PPUSH
14133: LD_INT 3
14135: PPUSH
14136: LD_INT 2
14138: PPUSH
14139: LD_INT 0
14141: PPUSH
14142: CALL 63238 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14146: LD_ADDR_EXP 56
14150: PUSH
14151: LD_EXP 56
14155: PPUSH
14156: LD_EXP 56
14160: PUSH
14161: LD_INT 1
14163: PLUS
14164: PPUSH
14165: LD_VAR 0 3
14169: PPUSH
14170: CALL_OW 1
14174: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14175: LD_INT 0
14177: PPUSH
14178: LD_INT 3
14180: PPUSH
14181: LD_OWVAR 67
14185: PPUSH
14186: CALL_OW 380
// un := CreateHuman ;
14190: LD_ADDR_VAR 0 2
14194: PUSH
14195: CALL_OW 44
14199: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14200: LD_VAR 0 2
14204: PPUSH
14205: LD_VAR 0 3
14209: PPUSH
14210: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14214: LD_ADDR_EXP 56
14218: PUSH
14219: LD_EXP 56
14223: PPUSH
14224: LD_EXP 56
14228: PUSH
14229: LD_INT 1
14231: PLUS
14232: PPUSH
14233: LD_VAR 0 2
14237: PPUSH
14238: CALL_OW 1
14242: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14243: LD_VAR 0 2
14247: PPUSH
14248: LD_INT 23
14250: PPUSH
14251: LD_INT 7
14253: PPUSH
14254: CALL_OW 111
// wait ( 0 0$2 ) ;
14258: LD_INT 70
14260: PPUSH
14261: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14265: LD_ADDR_VAR 0 4
14269: PUSH
14270: LD_VAR 0 4
14274: PPUSH
14275: LD_VAR 0 4
14279: PUSH
14280: LD_INT 1
14282: PLUS
14283: PPUSH
14284: LD_VAR 0 3
14288: PPUSH
14289: CALL_OW 1
14293: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14294: LD_ADDR_VAR 0 4
14298: PUSH
14299: LD_VAR 0 4
14303: PPUSH
14304: LD_VAR 0 4
14308: PUSH
14309: LD_INT 1
14311: PLUS
14312: PPUSH
14313: LD_VAR 0 2
14317: PPUSH
14318: CALL_OW 1
14322: ST_TO_ADDR
// end ;
14323: GO 14023
14325: POP
14326: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + waveStrength do
14327: LD_ADDR_VAR 0 1
14331: PUSH
14332: DOUBLE
14333: LD_INT 1
14335: DEC
14336: ST_TO_ADDR
14337: LD_INT 2
14339: PUSH
14340: LD_INT 3
14342: PUSH
14343: LD_INT 3
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: PUSH
14351: LD_OWVAR 67
14355: ARRAY
14356: PUSH
14357: LD_EXP 57
14361: PLUS
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14673
// begin InitHc ;
14366: CALL_OW 19
// InitVc ;
14370: CALL_OW 20
// uc_side := 3 ;
14374: LD_ADDR_OWVAR 20
14378: PUSH
14379: LD_INT 3
14381: ST_TO_ADDR
// uc_nation := 3 ;
14382: LD_ADDR_OWVAR 21
14386: PUSH
14387: LD_INT 3
14389: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14390: LD_INT 22
14392: PUSH
14393: LD_INT 23
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 1
14402: PPUSH
14403: LD_INT 2
14405: PPUSH
14406: CALL_OW 12
14410: ARRAY
14411: PPUSH
14412: LD_INT 1
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: LD_INT 44
14420: PUSH
14421: LD_INT 45
14423: PUSH
14424: LD_INT 43
14426: PUSH
14427: LD_INT 42
14429: PUSH
14430: LD_INT 44
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 1
14442: PPUSH
14443: LD_INT 5
14445: PPUSH
14446: CALL_OW 12
14450: ARRAY
14451: PPUSH
14452: LD_INT 99
14454: PPUSH
14455: CALL 29433 0 5
// veh := CreateVehicle ;
14459: LD_ADDR_VAR 0 3
14463: PUSH
14464: CALL_OW 45
14468: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14469: LD_VAR 0 3
14473: PPUSH
14474: LD_INT 127
14476: PPUSH
14477: LD_INT 243
14479: PPUSH
14480: LD_INT 0
14482: PPUSH
14483: LD_INT 0
14485: PPUSH
14486: CALL 63238 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14490: LD_ADDR_EXP 56
14494: PUSH
14495: LD_EXP 56
14499: PPUSH
14500: LD_EXP 56
14504: PUSH
14505: LD_INT 1
14507: PLUS
14508: PPUSH
14509: LD_VAR 0 3
14513: PPUSH
14514: CALL_OW 1
14518: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14519: LD_INT 0
14521: PPUSH
14522: LD_INT 3
14524: PPUSH
14525: LD_OWVAR 67
14529: PUSH
14530: LD_INT 2
14532: PLUS
14533: PPUSH
14534: CALL_OW 380
// un := CreateHuman ;
14538: LD_ADDR_VAR 0 2
14542: PUSH
14543: CALL_OW 44
14547: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14548: LD_VAR 0 2
14552: PPUSH
14553: LD_VAR 0 3
14557: PPUSH
14558: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14562: LD_ADDR_EXP 56
14566: PUSH
14567: LD_EXP 56
14571: PPUSH
14572: LD_EXP 56
14576: PUSH
14577: LD_INT 1
14579: PLUS
14580: PPUSH
14581: LD_VAR 0 2
14585: PPUSH
14586: CALL_OW 1
14590: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_INT 130
14598: PPUSH
14599: LD_INT 233
14601: PPUSH
14602: CALL_OW 111
// wait ( 0 0$2 ) ;
14606: LD_INT 70
14608: PPUSH
14609: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14613: LD_ADDR_VAR 0 4
14617: PUSH
14618: LD_VAR 0 4
14622: PPUSH
14623: LD_VAR 0 4
14627: PUSH
14628: LD_INT 1
14630: PLUS
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: CALL_OW 1
14641: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14642: LD_ADDR_VAR 0 4
14646: PUSH
14647: LD_VAR 0 4
14651: PPUSH
14652: LD_VAR 0 4
14656: PUSH
14657: LD_INT 1
14659: PLUS
14660: PPUSH
14661: LD_VAR 0 2
14665: PPUSH
14666: CALL_OW 1
14670: ST_TO_ADDR
// end ;
14671: GO 14363
14673: POP
14674: POP
// for i in tmp do
14675: LD_ADDR_VAR 0 1
14679: PUSH
14680: LD_VAR 0 4
14684: PUSH
14685: FOR_IN
14686: IFFALSE 14705
// begin ComAgressiveMove ( i , 76 , 49 ) ;
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 76
14695: PPUSH
14696: LD_INT 49
14698: PPUSH
14699: CALL_OW 114
// end ;
14703: GO 14685
14705: POP
14706: POP
// repeat wait ( 0 0$1 ) ;
14707: LD_INT 35
14709: PPUSH
14710: CALL_OW 67
// for i in tmp do
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: LD_VAR 0 4
14723: PUSH
14724: FOR_IN
14725: IFFALSE 14804
// if IsDead ( i ) then
14727: LD_VAR 0 1
14731: PPUSH
14732: CALL_OW 301
14736: IFFALSE 14756
// tmp := tmp diff i else
14738: LD_ADDR_VAR 0 4
14742: PUSH
14743: LD_VAR 0 4
14747: PUSH
14748: LD_VAR 0 1
14752: DIFF
14753: ST_TO_ADDR
14754: GO 14802
// if not HasTask ( i ) then
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 314
14765: NOT
14766: IFFALSE 14802
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14768: LD_VAR 0 1
14772: PPUSH
14773: LD_INT 81
14775: PUSH
14776: LD_INT 3
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 69
14787: PPUSH
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 74
14797: PPUSH
14798: CALL_OW 115
14802: GO 14724
14804: POP
14805: POP
// until not tmp ;
14806: LD_VAR 0 4
14810: NOT
14811: IFFALSE 14707
// end ;
14813: PPOPN 4
14815: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
14816: LD_EXP 6
14820: IFFALSE 15291
14822: GO 14824
14824: DISABLE
14825: LD_INT 0
14827: PPUSH
14828: PPUSH
14829: PPUSH
14830: PPUSH
// begin wait ( 3 3$00 ) ;
14831: LD_INT 6300
14833: PPUSH
14834: CALL_OW 67
// for i := 1 to 3 do
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: DOUBLE
14844: LD_INT 1
14846: DEC
14847: ST_TO_ADDR
14848: LD_INT 3
14850: PUSH
14851: FOR_TO
14852: IFFALSE 15151
// begin InitHc ;
14854: CALL_OW 19
// InitVc ;
14858: CALL_OW 20
// uc_side := 3 ;
14862: LD_ADDR_OWVAR 20
14866: PUSH
14867: LD_INT 3
14869: ST_TO_ADDR
// uc_nation := 3 ;
14870: LD_ADDR_OWVAR 21
14874: PUSH
14875: LD_INT 3
14877: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14878: LD_INT 22
14880: PUSH
14881: LD_INT 23
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 2
14893: PPUSH
14894: CALL_OW 12
14898: ARRAY
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: LD_INT 44
14908: PUSH
14909: LD_INT 43
14911: PUSH
14912: LD_INT 42
14914: PUSH
14915: LD_INT 44
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 1
14926: PPUSH
14927: LD_INT 4
14929: PPUSH
14930: CALL_OW 12
14934: ARRAY
14935: PPUSH
14936: LD_INT 99
14938: PPUSH
14939: CALL 29433 0 5
// veh := CreateVehicle ;
14943: LD_ADDR_VAR 0 3
14947: PUSH
14948: CALL_OW 45
14952: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
14953: LD_VAR 0 3
14957: PPUSH
14958: LD_INT 293
14960: PPUSH
14961: LD_INT 246
14963: PPUSH
14964: LD_INT 5
14966: PPUSH
14967: LD_INT 0
14969: PPUSH
14970: CALL 63238 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14974: LD_ADDR_EXP 56
14978: PUSH
14979: LD_EXP 56
14983: PPUSH
14984: LD_EXP 56
14988: PUSH
14989: LD_INT 1
14991: PLUS
14992: PPUSH
14993: LD_VAR 0 3
14997: PPUSH
14998: CALL_OW 1
15002: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15003: LD_INT 0
15005: PPUSH
15006: LD_INT 3
15008: PPUSH
15009: LD_INT 3
15011: PPUSH
15012: CALL_OW 380
// un := CreateHuman ;
15016: LD_ADDR_VAR 0 2
15020: PUSH
15021: CALL_OW 44
15025: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15026: LD_VAR 0 2
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15040: LD_ADDR_EXP 56
15044: PUSH
15045: LD_EXP 56
15049: PPUSH
15050: LD_EXP 56
15054: PUSH
15055: LD_INT 1
15057: PLUS
15058: PPUSH
15059: LD_VAR 0 2
15063: PPUSH
15064: CALL_OW 1
15068: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15069: LD_VAR 0 2
15073: PPUSH
15074: LD_INT 273
15076: PPUSH
15077: LD_INT 227
15079: PPUSH
15080: CALL_OW 111
// wait ( 0 0$2 ) ;
15084: LD_INT 70
15086: PPUSH
15087: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15091: LD_ADDR_VAR 0 4
15095: PUSH
15096: LD_VAR 0 4
15100: PPUSH
15101: LD_VAR 0 4
15105: PUSH
15106: LD_INT 1
15108: PLUS
15109: PPUSH
15110: LD_VAR 0 3
15114: PPUSH
15115: CALL_OW 1
15119: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15120: LD_ADDR_VAR 0 4
15124: PUSH
15125: LD_VAR 0 4
15129: PPUSH
15130: LD_VAR 0 4
15134: PUSH
15135: LD_INT 1
15137: PLUS
15138: PPUSH
15139: LD_VAR 0 2
15143: PPUSH
15144: CALL_OW 1
15148: ST_TO_ADDR
// end ;
15149: GO 14851
15151: POP
15152: POP
// for i in tmp do
15153: LD_ADDR_VAR 0 1
15157: PUSH
15158: LD_VAR 0 4
15162: PUSH
15163: FOR_IN
15164: IFFALSE 15183
// begin ComAgressiveMove ( i , 330 , 231 ) ;
15166: LD_VAR 0 1
15170: PPUSH
15171: LD_INT 330
15173: PPUSH
15174: LD_INT 231
15176: PPUSH
15177: CALL_OW 114
// end ;
15181: GO 15163
15183: POP
15184: POP
// repeat wait ( 0 0$1 ) ;
15185: LD_INT 35
15187: PPUSH
15188: CALL_OW 67
// for i in tmp do
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: LD_VAR 0 4
15201: PUSH
15202: FOR_IN
15203: IFFALSE 15282
// if IsDead ( i ) then
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 301
15214: IFFALSE 15234
// tmp := tmp diff i else
15216: LD_ADDR_VAR 0 4
15220: PUSH
15221: LD_VAR 0 4
15225: PUSH
15226: LD_VAR 0 1
15230: DIFF
15231: ST_TO_ADDR
15232: GO 15280
// if not HasTask ( i ) then
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 314
15243: NOT
15244: IFFALSE 15280
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15246: LD_VAR 0 1
15250: PPUSH
15251: LD_INT 81
15253: PUSH
15254: LD_INT 3
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 69
15265: PPUSH
15266: LD_VAR 0 1
15270: PPUSH
15271: CALL_OW 74
15275: PPUSH
15276: CALL_OW 115
15280: GO 15202
15282: POP
15283: POP
// until not tmp ;
15284: LD_VAR 0 4
15288: NOT
15289: IFFALSE 15185
// end ;
15291: PPOPN 4
15293: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15294: LD_INT 3
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 32
15313: PUSH
15314: LD_INT 1
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PPUSH
15325: CALL_OW 69
15329: IFFALSE 15413
15331: GO 15333
15333: DISABLE
15334: LD_INT 0
15336: PPUSH
// begin enable ;
15337: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15338: LD_ADDR_VAR 0 1
15342: PUSH
15343: LD_INT 3
15345: PUSH
15346: LD_INT 22
15348: PUSH
15349: LD_INT 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 32
15362: PUSH
15363: LD_INT 1
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PPUSH
15374: CALL_OW 69
15378: PUSH
15379: FOR_IN
15380: IFFALSE 15411
// if GetFuel ( i ) < 3 then
15382: LD_VAR 0 1
15386: PPUSH
15387: CALL_OW 261
15391: PUSH
15392: LD_INT 3
15394: LESS
15395: IFFALSE 15409
// SetFuel ( i , 3 ) ;
15397: LD_VAR 0 1
15401: PPUSH
15402: LD_INT 3
15404: PPUSH
15405: CALL_OW 240
15409: GO 15379
15411: POP
15412: POP
// end ; end_of_file
15413: PPOPN 1
15415: END
// export function Action ; begin
15416: LD_INT 0
15418: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15419: LD_INT 2
15421: PPUSH
15422: LD_INT 4
15424: PPUSH
15425: CALL_OW 332
// Video ( true ) ;
15429: LD_INT 1
15431: PPUSH
15432: CALL 61279 0 1
// CenterNowOnXY ( 213 , 89 ) ;
15436: LD_INT 213
15438: PPUSH
15439: LD_INT 89
15441: PPUSH
15442: CALL_OW 86
// if not debug then
15446: LD_EXP 1
15450: NOT
15451: IFFALSE 15485
// begin if Kaia and Olaf then
15453: LD_EXP 34
15457: PUSH
15458: LD_EXP 38
15462: AND
15463: IFFALSE 15469
// SceneKaiaWithOlaf ;
15465: CALL 15508 0 0
// if Givi and Kamil then
15469: LD_EXP 30
15473: PUSH
15474: LD_EXP 33
15478: AND
15479: IFFALSE 15485
// SceneWithGiviAndKamil ;
15481: CALL 16079 0 0
// end ; Video ( false ) ;
15485: LD_INT 0
15487: PPUSH
15488: CALL 61279 0 1
// ChangeMissionObjectives ( M1 ) ;
15492: LD_STRING M1
15494: PPUSH
15495: CALL_OW 337
// SaveForQuickRestart ;
15499: CALL_OW 22
// end ;
15503: LD_VAR 0 1
15507: RET
// export function SceneKaiaWithOlaf ; begin
15508: LD_INT 0
15510: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
15511: LD_INT 22
15513: PUSH
15514: LD_INT 2
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 30
15523: PUSH
15524: LD_INT 3
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PPUSH
15535: CALL_OW 69
15539: PPUSH
15540: LD_INT 14
15542: PPUSH
15543: LD_INT 1
15545: PPUSH
15546: LD_INT 1
15548: PPUSH
15549: LD_INT 26
15551: PPUSH
15552: CALL_OW 125
// wait ( 0 0$1 ) ;
15556: LD_INT 35
15558: PPUSH
15559: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
15563: LD_EXP 34
15567: PPUSH
15568: LD_STRING DK-Mem-1
15570: PPUSH
15571: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
15575: LD_EXP 34
15579: PPUSH
15580: LD_STRING DK-Mem-2
15582: PPUSH
15583: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
15587: LD_EXP 38
15591: PPUSH
15592: LD_STRING DO-Mem-3
15594: PPUSH
15595: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
15599: LD_EXP 34
15603: PPUSH
15604: LD_STRING DK-Mem-4
15606: PPUSH
15607: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
15611: LD_EXP 38
15615: PPUSH
15616: LD_STRING DO-Mem-5
15618: PPUSH
15619: CALL_OW 88
// wait ( 0 0$2 ) ;
15623: LD_INT 70
15625: PPUSH
15626: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
15630: LD_INT 22
15632: PUSH
15633: LD_INT 2
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 30
15642: PUSH
15643: LD_INT 3
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PPUSH
15654: CALL_OW 69
15658: PPUSH
15659: LD_INT 90
15661: PPUSH
15662: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
15666: LD_EXP 38
15670: PPUSH
15671: LD_STRING DO-Mem-6
15673: PPUSH
15674: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
15678: LD_EXP 34
15682: PPUSH
15683: LD_STRING DK-Mem-7
15685: PPUSH
15686: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
15690: LD_EXP 29
15694: PPUSH
15695: LD_EXP 34
15699: PPUSH
15700: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
15704: LD_EXP 29
15708: PPUSH
15709: LD_STRING DH-Mem-8
15711: PPUSH
15712: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
15716: LD_EXP 34
15720: PUSH
15721: LD_EXP 38
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: LD_EXP 29
15734: PPUSH
15735: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
15739: LD_EXP 38
15743: PPUSH
15744: LD_STRING DO-Mem-9
15746: PPUSH
15747: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
15751: LD_EXP 38
15755: PPUSH
15756: LD_STRING DO-Mem-10
15758: PPUSH
15759: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
15763: LD_EXP 38
15767: PPUSH
15768: LD_STRING DO-Mem-11
15770: PPUSH
15771: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
15775: LD_EXP 38
15779: PPUSH
15780: LD_STRING DO-Mem-12
15782: PPUSH
15783: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
15787: LD_EXP 34
15791: PPUSH
15792: LD_STRING DK-Mem-13
15794: PPUSH
15795: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
15799: LD_EXP 34
15803: PPUSH
15804: LD_STRING DK-Mem-14
15806: PPUSH
15807: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
15811: LD_EXP 34
15815: PPUSH
15816: LD_STRING DK-Mem-15
15818: PPUSH
15819: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
15823: LD_EXP 34
15827: PPUSH
15828: LD_STRING DK-Mem-16
15830: PPUSH
15831: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
15835: LD_EXP 34
15839: PPUSH
15840: LD_STRING DK-Mem-17
15842: PPUSH
15843: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
15847: LD_EXP 38
15851: PPUSH
15852: LD_EXP 34
15856: PPUSH
15857: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
15861: LD_EXP 38
15865: PPUSH
15866: LD_STRING DO-Mem-18
15868: PPUSH
15869: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
15873: LD_EXP 34
15877: PPUSH
15878: LD_EXP 38
15882: PPUSH
15883: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
15887: LD_EXP 34
15891: PPUSH
15892: LD_STRING DK-Mem-19
15894: PPUSH
15895: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
15899: LD_EXP 38
15903: PPUSH
15904: LD_INT 214
15906: PPUSH
15907: LD_INT 86
15909: PPUSH
15910: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
15914: LD_EXP 38
15918: PPUSH
15919: LD_EXP 34
15923: PPUSH
15924: CALL_OW 179
// if Givi then
15928: LD_EXP 30
15932: IFFALSE 15963
// begin ComMoveXY ( Givi , 217 , 86 ) ;
15934: LD_EXP 30
15938: PPUSH
15939: LD_INT 217
15941: PPUSH
15942: LD_INT 86
15944: PPUSH
15945: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
15949: LD_EXP 30
15953: PPUSH
15954: LD_EXP 29
15958: PPUSH
15959: CALL_OW 179
// end ; if Kamil then
15963: LD_EXP 33
15967: IFFALSE 16007
// begin ComExit ( Kamil ) ;
15969: LD_EXP 33
15973: PPUSH
15974: CALL 61695 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
15978: LD_EXP 33
15982: PPUSH
15983: LD_INT 212
15985: PPUSH
15986: LD_INT 86
15988: PPUSH
15989: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
15993: LD_EXP 33
15997: PPUSH
15998: LD_EXP 29
16002: PPUSH
16003: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16007: LD_INT 70
16009: PPUSH
16010: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16014: LD_EXP 29
16018: PPUSH
16019: LD_STRING DH-Mem-20
16021: PPUSH
16022: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16026: LD_EXP 38
16030: PPUSH
16031: LD_INT 215
16033: PPUSH
16034: LD_INT 87
16036: PPUSH
16037: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16041: LD_EXP 38
16045: PPUSH
16046: LD_EXP 34
16050: PPUSH
16051: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16055: LD_EXP 34
16059: PPUSH
16060: LD_STRING DK-Mem-21
16062: PPUSH
16063: CALL_OW 88
// wait ( 0 0$2 ) ;
16067: LD_INT 70
16069: PPUSH
16070: CALL_OW 67
// end ;
16074: LD_VAR 0 1
16078: RET
// export function SceneWithGiviAndKamil ; begin
16079: LD_INT 0
16081: PPUSH
// if Markov then
16082: LD_EXP 36
16086: IFFALSE 16137
// begin if IsInUnit ( Markov ) then
16088: LD_EXP 36
16092: PPUSH
16093: CALL_OW 310
16097: IFFALSE 16108
// ComExit ( Markov ) ;
16099: LD_EXP 36
16103: PPUSH
16104: CALL 61695 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16108: LD_EXP 36
16112: PPUSH
16113: LD_INT 212
16115: PPUSH
16116: LD_INT 88
16118: PPUSH
16119: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16123: LD_EXP 36
16127: PPUSH
16128: LD_EXP 29
16132: PPUSH
16133: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16137: LD_EXP 30
16141: PPUSH
16142: LD_STRING DG-Obj-1
16144: PPUSH
16145: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16149: LD_EXP 33
16153: PPUSH
16154: LD_STRING DKam-Obj-2
16156: PPUSH
16157: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16161: LD_EXP 29
16165: PPUSH
16166: LD_EXP 33
16170: PPUSH
16171: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16175: LD_EXP 33
16179: PPUSH
16180: LD_STRING DKam-Obj-3
16182: PPUSH
16183: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16187: LD_EXP 36
16191: PPUSH
16192: LD_STRING DMar-Obj-4
16194: PPUSH
16195: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16199: LD_EXP 33
16203: PPUSH
16204: LD_STRING DKam-Obj-6
16206: PPUSH
16207: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16211: LD_EXP 33
16215: PPUSH
16216: LD_STRING DKam-Obj-7
16218: PPUSH
16219: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16223: LD_EXP 33
16227: PPUSH
16228: LD_STRING DKam-Obj-8
16230: PPUSH
16231: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16235: LD_EXP 29
16239: PPUSH
16240: LD_STRING DH-Obj-9
16242: PPUSH
16243: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16247: LD_EXP 33
16251: PPUSH
16252: LD_STRING DKam-Obj-10
16254: PPUSH
16255: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16259: LD_EXP 33
16263: PPUSH
16264: LD_STRING DKam-Obj-11
16266: PPUSH
16267: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16271: LD_EXP 36
16275: PPUSH
16276: LD_STRING DMar-Obj-12
16278: PPUSH
16279: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16283: LD_EXP 36
16287: PPUSH
16288: LD_STRING DMar-Obj-13
16290: PPUSH
16291: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16295: LD_EXP 36
16299: PPUSH
16300: LD_STRING DMar-Obj-14
16302: PPUSH
16303: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16307: LD_EXP 38
16311: PPUSH
16312: LD_STRING DO-Obj-15
16314: PPUSH
16315: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16319: LD_EXP 38
16323: PPUSH
16324: LD_STRING DO-Obj-16
16326: PPUSH
16327: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16331: LD_EXP 29
16335: PPUSH
16336: LD_STRING DH-Obj-17
16338: PPUSH
16339: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16343: LD_EXP 38
16347: PPUSH
16348: LD_STRING DO-Obj-18
16350: PPUSH
16351: CALL_OW 88
// end ;
16355: LD_VAR 0 1
16359: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16360: LD_INT 34
16362: PUSH
16363: LD_EXP 63
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PPUSH
16372: CALL_OW 69
16376: IFFALSE 16573
16378: GO 16380
16380: DISABLE
16381: LD_INT 0
16383: PPUSH
// begin wait ( 0 0$2 ) ;
16384: LD_INT 70
16386: PPUSH
16387: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16391: LD_INT 34
16393: PUSH
16394: LD_EXP 63
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PPUSH
16403: CALL_OW 69
16407: PPUSH
16408: CALL_OW 87
// DialogueOn ;
16412: CALL_OW 6
// if Markov then
16416: LD_EXP 36
16420: IFFALSE 16448
// begin Say ( Markov , DMar-Grn-1 ) ;
16422: LD_EXP 36
16426: PPUSH
16427: LD_STRING DMar-Grn-1
16429: PPUSH
16430: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16434: LD_EXP 29
16438: PPUSH
16439: LD_STRING DH-Grn-2
16441: PPUSH
16442: CALL_OW 88
// end else
16446: GO 16547
// if heikeSecondSquad then
16448: LD_EXP 44
16452: IFFALSE 16547
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16454: LD_ADDR_VAR 0 1
16458: PUSH
16459: LD_EXP 44
16463: PUSH
16464: LD_INT 1
16466: PPUSH
16467: LD_EXP 44
16471: PPUSH
16472: CALL_OW 12
16476: ARRAY
16477: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16478: LD_VAR 0 1
16482: PPUSH
16483: CALL_OW 258
16487: PUSH
16488: LD_INT 1
16490: DOUBLE
16491: EQUAL
16492: IFTRUE 16496
16494: GO 16511
16496: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
16497: LD_VAR 0 1
16501: PPUSH
16502: LD_STRING DArm-Grn-1
16504: PPUSH
16505: CALL_OW 88
16509: GO 16535
16511: LD_INT 2
16513: DOUBLE
16514: EQUAL
16515: IFTRUE 16519
16517: GO 16534
16519: POP
// Say ( random , DArf-Grn-1 ) ; end ;
16520: LD_VAR 0 1
16524: PPUSH
16525: LD_STRING DArf-Grn-1
16527: PPUSH
16528: CALL_OW 88
16532: GO 16535
16534: POP
// Say ( Heike , DH-Grn-2 ) ;
16535: LD_EXP 29
16539: PPUSH
16540: LD_STRING DH-Grn-2
16542: PPUSH
16543: CALL_OW 88
// end ; DialogueOff ;
16547: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
16551: LD_STRING MortarConstructed
16553: PPUSH
16554: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
16558: LD_STRING SelfPropelledMortar
16560: PPUSH
16561: CALL_OW 339
// mortarConstructed := true ;
16565: LD_ADDR_EXP 15
16569: PUSH
16570: LD_INT 1
16572: ST_TO_ADDR
// end ;
16573: PPOPN 1
16575: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
16576: LD_INT 2
16578: PPUSH
16579: LD_INT 8
16581: PPUSH
16582: CALL_OW 294
16586: IFFALSE 16729
16588: GO 16590
16590: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
16591: LD_INT 200
16593: PPUSH
16594: LD_INT 162
16596: PPUSH
16597: LD_INT 2
16599: PPUSH
16600: LD_INT 6
16602: NEG
16603: PPUSH
16604: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
16608: LD_INT 200
16610: PPUSH
16611: LD_INT 162
16613: PPUSH
16614: LD_INT 2
16616: PPUSH
16617: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
16621: LD_INT 200
16623: PPUSH
16624: LD_INT 162
16626: PPUSH
16627: CALL_OW 84
// if not IsOk ( Kurt ) then
16631: LD_EXP 40
16635: PPUSH
16636: CALL_OW 302
16640: NOT
16641: IFFALSE 16645
// exit ;
16643: GO 16729
// Say ( Kurt , DKs-Otpst-2-1 ) ;
16645: LD_EXP 40
16649: PPUSH
16650: LD_STRING DKs-Otpst-2-1
16652: PPUSH
16653: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
16657: LD_EXP 34
16661: PPUSH
16662: LD_STRING DK-Otpst-2-2
16664: PPUSH
16665: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
16669: LD_EXP 40
16673: PPUSH
16674: LD_STRING DKs-Otpst-2-3
16676: PPUSH
16677: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
16681: LD_EXP 40
16685: PPUSH
16686: LD_STRING DKs-Otpst-2-4
16688: PPUSH
16689: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
16693: LD_EXP 40
16697: PPUSH
16698: LD_STRING DKs-Otpst-2-5
16700: PPUSH
16701: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
16705: LD_EXP 33
16709: PPUSH
16710: LD_STRING DKam-Otpst-2-6
16712: PPUSH
16713: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
16717: LD_EXP 40
16721: PPUSH
16722: LD_STRING DKs-Otpst-2-7
16724: PPUSH
16725: CALL_OW 88
// end ;
16729: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
16730: LD_INT 8
16732: PPUSH
16733: LD_INT 22
16735: PUSH
16736: LD_INT 3
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 21
16745: PUSH
16746: LD_INT 3
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PPUSH
16757: CALL_OW 70
16761: NOT
16762: PUSH
16763: LD_EXP 3
16767: NOT
16768: AND
16769: IFFALSE 17019
16771: GO 16773
16773: DISABLE
16774: LD_INT 0
16776: PPUSH
// begin outpostDestroyed := true ;
16777: LD_ADDR_EXP 4
16781: PUSH
16782: LD_INT 1
16784: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
16785: LD_INT 22
16787: PUSH
16788: LD_INT 2
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 34
16797: PUSH
16798: LD_EXP 63
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 92
16809: PUSH
16810: LD_INT 195
16812: PUSH
16813: LD_INT 164
16815: PUSH
16816: LD_INT 12
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: PPUSH
16830: CALL_OW 69
16834: NOT
16835: IFFALSE 16839
// exit ;
16837: GO 17019
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
16839: LD_EXP 30
16843: PPUSH
16844: CALL_OW 302
16848: NOT
16849: PUSH
16850: LD_EXP 34
16854: PPUSH
16855: CALL_OW 302
16859: NOT
16860: OR
16861: IFFALSE 16865
// exit ;
16863: GO 17019
// Say ( Givi , DG-Otpst-1-1 ) ;
16865: LD_EXP 30
16869: PPUSH
16870: LD_STRING DG-Otpst-1-1
16872: PPUSH
16873: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
16877: LD_EXP 34
16881: PPUSH
16882: LD_STRING DK-Otpst-1-2
16884: PPUSH
16885: CALL_OW 88
// if IsOk ( Markov ) then
16889: LD_EXP 36
16893: PPUSH
16894: CALL_OW 302
16898: IFFALSE 16926
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
16900: LD_EXP 36
16904: PPUSH
16905: LD_STRING DMar-Otpst-1-3
16907: PPUSH
16908: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
16912: LD_EXP 36
16916: PPUSH
16917: LD_STRING DMar-Otpst-1-4
16919: PPUSH
16920: CALL_OW 88
// end else
16924: GO 17007
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16926: LD_ADDR_VAR 0 1
16930: PUSH
16931: LD_EXP 44
16935: PUSH
16936: LD_INT 1
16938: PPUSH
16939: LD_EXP 44
16943: PPUSH
16944: CALL_OW 12
16948: ARRAY
16949: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16950: LD_VAR 0 1
16954: PPUSH
16955: CALL_OW 258
16959: PUSH
16960: LD_INT 1
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 16983
16968: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
16969: LD_VAR 0 1
16973: PPUSH
16974: LD_STRING DArm-Otpst-1-a-3
16976: PPUSH
16977: CALL_OW 88
16981: GO 17007
16983: LD_INT 2
16985: DOUBLE
16986: EQUAL
16987: IFTRUE 16991
16989: GO 17006
16991: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
16992: LD_VAR 0 1
16996: PPUSH
16997: LD_STRING DArf-Otpst-1-a-3
16999: PPUSH
17000: CALL_OW 88
17004: GO 17007
17006: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17007: LD_EXP 30
17011: PPUSH
17012: LD_STRING DG-Otpst-1-5
17014: PPUSH
17015: CALL_OW 88
// end ;
17019: PPOPN 1
17021: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17022: LD_EXP 34
17026: PPUSH
17027: CALL_OW 256
17031: PUSH
17032: LD_INT 10
17034: LESS
17035: IFFALSE 17149
17037: GO 17039
17039: DISABLE
// begin DialogueOn ;
17040: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17044: LD_EXP 34
17048: PPUSH
17049: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17053: LD_EXP 34
17057: PPUSH
17058: LD_STRING DK-Dead-1
17060: PPUSH
17061: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17065: LD_EXP 29
17069: PPUSH
17070: LD_STRING DH-Dead-2
17072: PPUSH
17073: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17077: LD_EXP 34
17081: PPUSH
17082: LD_STRING DK-Dead-3
17084: PPUSH
17085: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17089: LD_EXP 29
17093: PPUSH
17094: LD_STRING DH-Dead-4
17096: PPUSH
17097: CALL_OW 88
// if IsOk ( Mike ) then
17101: LD_EXP 31
17105: PPUSH
17106: CALL_OW 302
17110: IFFALSE 17136
// begin Say ( Mike , DM-Dead-5 ) ;
17112: LD_EXP 31
17116: PPUSH
17117: LD_STRING DM-Dead-5
17119: PPUSH
17120: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17124: LD_EXP 29
17128: PPUSH
17129: LD_STRING DH-Dead-6
17131: PPUSH
17132: CALL_OW 88
// end ; DialogueOff ;
17136: CALL_OW 7
// KillUnit ( Kaia ) ;
17140: LD_EXP 34
17144: PPUSH
17145: CALL_OW 66
// end ;
17149: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17150: LD_OWVAR 1
17154: PUSH
17155: LD_INT 21700
17157: GREATEREQUAL
17158: PUSH
17159: LD_EXP 5
17163: PUSH
17164: LD_INT 5
17166: GREATER
17167: OR
17168: PUSH
17169: LD_INT 22
17171: PUSH
17172: LD_INT 2
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 92
17181: PUSH
17182: LD_INT 103
17184: PUSH
17185: LD_INT 81
17187: PUSH
17188: LD_INT 20
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PPUSH
17201: CALL_OW 69
17205: OR
17206: IFFALSE 17613
17208: GO 17210
17210: DISABLE
17211: LD_INT 0
17213: PPUSH
17214: PPUSH
17215: PPUSH
// begin PrepareRolfSquad ;
17216: CALL 2348 0 0
// dep := HexInfo ( 86 , 54 ) ;
17220: LD_ADDR_VAR 0 3
17224: PUSH
17225: LD_INT 86
17227: PPUSH
17228: LD_INT 54
17230: PPUSH
17231: CALL_OW 428
17235: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17236: LD_VAR 0 3
17240: PPUSH
17241: CALL_OW 274
17245: PPUSH
17246: LD_INT 1
17248: PPUSH
17249: LD_INT 300
17251: PPUSH
17252: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17256: LD_VAR 0 3
17260: PPUSH
17261: CALL_OW 274
17265: PPUSH
17266: LD_INT 2
17268: PPUSH
17269: LD_INT 300
17271: PPUSH
17272: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17276: LD_EXP 46
17280: PPUSH
17281: LD_INT 79
17283: PPUSH
17284: LD_INT 52
17286: PPUSH
17287: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17291: LD_INT 35
17293: PPUSH
17294: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17298: LD_INT 12
17300: PPUSH
17301: LD_INT 22
17303: PUSH
17304: LD_INT 3
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 21
17313: PUSH
17314: LD_INT 1
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PPUSH
17325: CALL_OW 70
17329: NOT
17330: IFFALSE 17291
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17332: LD_ADDR_VAR 0 2
17336: PUSH
17337: LD_INT 12
17339: PPUSH
17340: LD_INT 21
17342: PUSH
17343: LD_INT 3
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PPUSH
17350: CALL_OW 70
17354: ST_TO_ADDR
// for i in tmp do
17355: LD_ADDR_VAR 0 1
17359: PUSH
17360: LD_VAR 0 2
17364: PUSH
17365: FOR_IN
17366: IFFALSE 17382
// SetSide ( i , 8 ) ;
17368: LD_VAR 0 1
17372: PPUSH
17373: LD_INT 8
17375: PPUSH
17376: CALL_OW 235
17380: GO 17365
17382: POP
17383: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17384: LD_INT 63
17386: PPUSH
17387: LD_INT 42
17389: PPUSH
17390: CALL_OW 428
17394: PPUSH
17395: LD_INT 320
17397: PPUSH
17398: CALL_OW 234
// wait ( 0 0$10 ) ;
17402: LD_INT 350
17404: PPUSH
17405: CALL_OW 67
// DialogueOn ;
17409: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17413: LD_INT 8
17415: PPUSH
17416: LD_INT 2
17418: PPUSH
17419: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17423: LD_INT 86
17425: PPUSH
17426: LD_INT 54
17428: PPUSH
17429: CALL_OW 428
17433: PPUSH
17434: LD_STRING antwerp
17436: PPUSH
17437: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17441: LD_EXP 42
17445: PPUSH
17446: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17450: LD_EXP 42
17454: PPUSH
17455: LD_STRING DRf-rast-1
17457: PPUSH
17458: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17462: LD_EXP 29
17466: PPUSH
17467: LD_STRING DH-rast-2
17469: PPUSH
17470: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17474: LD_EXP 42
17478: PPUSH
17479: LD_STRING DRf-rast-3
17481: PPUSH
17482: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17486: LD_EXP 42
17490: PPUSH
17491: LD_STRING DRf-rast-4
17493: PPUSH
17494: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
17498: LD_EXP 42
17502: PPUSH
17503: LD_STRING DRf-rast-5
17505: PPUSH
17506: CALL_OW 94
// if IsOk ( Aviradze ) then
17510: LD_EXP 41
17514: PPUSH
17515: CALL_OW 302
17519: IFFALSE 17578
// begin CenterNowOnUnits ( Aviradze ) ;
17521: LD_EXP 41
17525: PPUSH
17526: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
17530: LD_EXP 41
17534: PPUSH
17535: LD_STRING DA-rast-6
17537: PPUSH
17538: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
17542: LD_EXP 29
17546: PPUSH
17547: LD_STRING DH-rast-7
17549: PPUSH
17550: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
17554: LD_EXP 30
17558: PPUSH
17559: LD_STRING DG-rast-8
17561: PPUSH
17562: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
17566: LD_EXP 30
17570: PPUSH
17571: LD_STRING DG-rast-9
17573: PPUSH
17574: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
17578: LD_EXP 29
17582: PPUSH
17583: LD_STRING DH-rast-10
17585: PPUSH
17586: CALL_OW 88
// DialogueOff ;
17590: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
17594: LD_STRING M2
17596: PPUSH
17597: CALL_OW 337
// bergkampfArrived := true ;
17601: LD_ADDR_EXP 3
17605: PUSH
17606: LD_INT 1
17608: ST_TO_ADDR
// PrepareRolfBase ;
17609: CALL 2679 0 0
// end ;
17613: PPOPN 3
17615: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) do var i ;
17616: LD_INT 12
17618: PPUSH
17619: LD_INT 22
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PPUSH
17629: CALL_OW 70
17633: PUSH
17634: LD_EXP 42
17638: PPUSH
17639: CALL_OW 302
17643: AND
17644: IFFALSE 18204
17646: GO 17648
17648: DISABLE
17649: LD_INT 0
17651: PPUSH
// begin rolfScriptBase := false ;
17652: LD_ADDR_EXP 9
17656: PUSH
17657: LD_INT 0
17659: ST_TO_ADDR
// DialogueOn ;
17660: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
17664: LD_EXP 42
17668: PPUSH
17669: CALL_OW 87
// if rolfSquad >= 10 then
17673: LD_EXP 46
17677: PUSH
17678: LD_INT 10
17680: GREATEREQUAL
17681: IFFALSE 17860
// begin linkedWithRolf := 2 ;
17683: LD_ADDR_EXP 12
17687: PUSH
17688: LD_INT 2
17690: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
17691: LD_EXP 42
17695: PPUSH
17696: LD_STRING DRf-rast-11
17698: PPUSH
17699: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
17703: LD_EXP 29
17707: PPUSH
17708: LD_STRING DH-rast-12
17710: PPUSH
17711: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
17715: LD_EXP 42
17719: PPUSH
17720: LD_STRING DRf-rast-13
17722: PPUSH
17723: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
17727: LD_EXP 29
17731: PPUSH
17732: LD_STRING DH-rast-14
17734: PPUSH
17735: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
17739: LD_EXP 42
17743: PPUSH
17744: LD_STRING DRf-rast-15
17746: PPUSH
17747: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
17751: LD_EXP 29
17755: PPUSH
17756: LD_STRING DH-rast-16
17758: PPUSH
17759: CALL_OW 88
// if IsOk ( Mike ) then
17763: LD_EXP 31
17767: PPUSH
17768: CALL_OW 302
17772: IFFALSE 17846
// begin Say ( Mike , DM-rast-17 ) ;
17774: LD_EXP 31
17778: PPUSH
17779: LD_STRING DM-rast-17
17781: PPUSH
17782: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
17786: LD_EXP 29
17790: PPUSH
17791: LD_STRING DH-rast-18
17793: PPUSH
17794: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
17798: LD_EXP 31
17802: PPUSH
17803: LD_STRING DM-rast-19
17805: PPUSH
17806: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
17810: LD_EXP 29
17814: PPUSH
17815: LD_STRING DH-rast-20
17817: PPUSH
17818: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
17822: LD_EXP 31
17826: PPUSH
17827: LD_STRING DM-rast-21
17829: PPUSH
17830: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
17834: LD_EXP 29
17838: PPUSH
17839: LD_STRING DH-rast-22
17841: PPUSH
17842: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
17846: LD_EXP 29
17850: PPUSH
17851: LD_STRING DH-rast-23
17853: PPUSH
17854: CALL_OW 88
// end else
17858: GO 18010
// begin linkedWithRolf := 1 ;
17860: LD_ADDR_EXP 12
17864: PUSH
17865: LD_INT 1
17867: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
17868: LD_EXP 42
17872: PPUSH
17873: LD_STRING DRf-rast-a-11
17875: PPUSH
17876: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
17880: LD_EXP 29
17884: PPUSH
17885: LD_STRING DH-rast-a-12
17887: PPUSH
17888: CALL_OW 88
// if IsOk ( Kurt ) then
17892: LD_EXP 40
17896: PPUSH
17897: CALL_OW 302
17901: IFFALSE 17998
// begin Say ( Kurt , DKs-rast-a-13 ) ;
17903: LD_EXP 40
17907: PPUSH
17908: LD_STRING DKs-rast-a-13
17910: PPUSH
17911: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
17915: LD_EXP 42
17919: PPUSH
17920: LD_STRING DRf-rast-a-14
17922: PPUSH
17923: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
17927: LD_EXP 42
17931: PPUSH
17932: LD_STRING DRf-rast-a-15
17934: PPUSH
17935: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
17939: LD_EXP 40
17943: PPUSH
17944: LD_STRING DKs-rast-a-16
17946: PPUSH
17947: CALL_OW 88
// if IsOk ( Givi ) then
17951: LD_EXP 30
17955: PPUSH
17956: CALL_OW 302
17960: IFFALSE 17998
// begin Say ( Givi , DG-rast-a-17 ) ;
17962: LD_EXP 30
17966: PPUSH
17967: LD_STRING DG-rast-a-17
17969: PPUSH
17970: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
17974: LD_EXP 30
17978: PPUSH
17979: LD_STRING DG-rast-a-18
17981: PPUSH
17982: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
17986: LD_EXP 40
17990: PPUSH
17991: LD_STRING DKs-rast-a-19
17993: PPUSH
17994: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
17998: LD_EXP 29
18002: PPUSH
18003: LD_STRING DH-rast-a-20
18005: PPUSH
18006: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18010: LD_EXP 42
18014: PPUSH
18015: LD_STRING DRf-rast-24
18017: PPUSH
18018: CALL_OW 88
// if IsOk ( Aviradze ) then
18022: LD_EXP 41
18026: PPUSH
18027: CALL_OW 302
18031: IFFALSE 18131
// begin Say ( Aviradze , DA-rast-25 ) ;
18033: LD_EXP 41
18037: PPUSH
18038: LD_STRING DA-rast-25
18040: PPUSH
18041: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18045: LD_EXP 29
18049: PPUSH
18050: LD_STRING DH-rast-26
18052: PPUSH
18053: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18057: LD_EXP 41
18061: PPUSH
18062: LD_STRING DA-rast-27
18064: PPUSH
18065: CALL_OW 88
// if IsOk ( Markov ) then
18069: LD_EXP 36
18073: PPUSH
18074: CALL_OW 302
18078: IFFALSE 18106
// begin Say ( Markov , DMar-rast-28 ) ;
18080: LD_EXP 36
18084: PPUSH
18085: LD_STRING DMar-rast-28
18087: PPUSH
18088: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18092: LD_EXP 36
18096: PPUSH
18097: LD_STRING DMar-rast-29
18099: PPUSH
18100: CALL_OW 88
// end else
18104: GO 18129
// if IsOk ( Sophia ) then
18106: LD_EXP 35
18110: PPUSH
18111: CALL_OW 302
18115: IFFALSE 18129
// begin Say ( Sophia , DS-rast-28 ) ;
18117: LD_EXP 35
18121: PPUSH
18122: LD_STRING DS-rast-28
18124: PPUSH
18125: CALL_OW 88
// end ; end else
18129: GO 18154
// if IsOk ( Sophia ) then
18131: LD_EXP 35
18135: PPUSH
18136: CALL_OW 302
18140: IFFALSE 18154
// Say ( Sophia , DS-rast-29 ) ;
18142: LD_EXP 35
18146: PPUSH
18147: LD_STRING DS-rast-29
18149: PPUSH
18150: CALL_OW 88
// DialogueOff ;
18154: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18158: LD_STRING M3
18160: PPUSH
18161: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18165: LD_ADDR_VAR 0 1
18169: PUSH
18170: LD_INT 22
18172: PUSH
18173: LD_INT 8
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PPUSH
18180: CALL_OW 69
18184: PUSH
18185: FOR_IN
18186: IFFALSE 18202
// SetSide ( i , 2 ) ;
18188: LD_VAR 0 1
18192: PPUSH
18193: LD_INT 2
18195: PPUSH
18196: CALL_OW 235
18200: GO 18185
18202: POP
18203: POP
// end ;
18204: PPOPN 1
18206: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf do var random ;
18207: LD_EXP 3
18211: PUSH
18212: LD_EXP 42
18216: PPUSH
18217: CALL_OW 256
18221: PUSH
18222: LD_INT 400
18224: LESS
18225: AND
18226: PUSH
18227: LD_EXP 12
18231: NOT
18232: AND
18233: IFFALSE 18507
18235: GO 18237
18237: DISABLE
18238: LD_INT 0
18240: PPUSH
// begin DialogueOn ;
18241: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18245: LD_EXP 42
18249: PPUSH
18250: LD_STRING DRf-rast-f-11
18252: PPUSH
18253: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18257: LD_EXP 42
18261: PPUSH
18262: LD_STRING DRf-rast-f-12
18264: PPUSH
18265: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18269: LD_EXP 42
18273: PPUSH
18274: LD_STRING DRf-rast-f-13
18276: PPUSH
18277: CALL_OW 94
// DialogueOff ;
18281: CALL_OW 7
// KillUnit ( Rolf ) ;
18285: LD_EXP 42
18289: PPUSH
18290: CALL_OW 66
// wait ( 0 0$1 ) ;
18294: LD_INT 35
18296: PPUSH
18297: CALL_OW 67
// if not IsOk ( Givi ) then
18301: LD_EXP 30
18305: PPUSH
18306: CALL_OW 302
18310: NOT
18311: IFFALSE 18315
// exit ;
18313: GO 18507
// DialogueOn ;
18315: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18319: LD_EXP 30
18323: PPUSH
18324: LD_STRING DG-rast-f-14
18326: PPUSH
18327: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18331: LD_EXP 30
18335: PPUSH
18336: LD_STRING DG-rast-f-15
18338: PPUSH
18339: CALL_OW 88
// if IsOk ( Kaia ) then
18343: LD_EXP 34
18347: PPUSH
18348: CALL_OW 302
18352: IFFALSE 18368
// Say ( Kaia , DK-rast-f-16 ) else
18354: LD_EXP 34
18358: PPUSH
18359: LD_STRING DK-rast-f-16
18361: PPUSH
18362: CALL_OW 88
18366: GO 18455
// if heikeSecondSquad then
18368: LD_EXP 44
18372: IFFALSE 18455
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18374: LD_ADDR_VAR 0 1
18378: PUSH
18379: LD_EXP 44
18383: PUSH
18384: LD_INT 1
18386: PPUSH
18387: LD_EXP 44
18391: PPUSH
18392: CALL_OW 12
18396: ARRAY
18397: ST_TO_ADDR
// case GetSex ( random ) of 1 :
18398: LD_VAR 0 1
18402: PPUSH
18403: CALL_OW 258
18407: PUSH
18408: LD_INT 1
18410: DOUBLE
18411: EQUAL
18412: IFTRUE 18416
18414: GO 18431
18416: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
18417: LD_VAR 0 1
18421: PPUSH
18422: LD_STRING DArm-rast-f-a-16
18424: PPUSH
18425: CALL_OW 88
18429: GO 18455
18431: LD_INT 2
18433: DOUBLE
18434: EQUAL
18435: IFTRUE 18439
18437: GO 18454
18439: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
18440: LD_VAR 0 1
18444: PPUSH
18445: LD_STRING DArf-rast-f-a-16
18447: PPUSH
18448: CALL_OW 88
18452: GO 18455
18454: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
18455: LD_EXP 30
18459: PPUSH
18460: LD_STRING DG-rast-f-17
18462: PPUSH
18463: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
18467: LD_EXP 30
18471: PPUSH
18472: LD_STRING DG-rast-f-18
18474: PPUSH
18475: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
18479: LD_EXP 30
18483: PPUSH
18484: LD_STRING DG-rast-f-19
18486: PPUSH
18487: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
18491: LD_EXP 30
18495: PPUSH
18496: LD_STRING DG-rast-f-20
18498: PPUSH
18499: CALL_OW 88
// DialogueOff ;
18503: CALL_OW 7
// end ;
18507: PPOPN 1
18509: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
18510: LD_INT 2
18512: PPUSH
18513: LD_INT 10
18515: PPUSH
18516: CALL_OW 294
18520: IFFALSE 18593
18522: GO 18524
18524: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
18525: LD_EXP 30
18529: PPUSH
18530: LD_STRING DG-Len-1
18532: PPUSH
18533: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
18537: LD_EXP 40
18541: PPUSH
18542: LD_STRING DKs-Len-2
18544: PPUSH
18545: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
18549: LD_EXP 40
18553: PPUSH
18554: LD_STRING DKs-Len-3
18556: PPUSH
18557: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
18561: LD_EXP 29
18565: PPUSH
18566: LD_STRING DH-Len-4
18568: PPUSH
18569: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
18573: LD_EXP 34
18577: PPUSH
18578: LD_STRING DK-Len-5
18580: PPUSH
18581: CALL_OW 88
// leninSpotted := true ;
18585: LD_ADDR_EXP 14
18589: PUSH
18590: LD_INT 1
18592: ST_TO_ADDR
// end ;
18593: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 14 14$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
18594: LD_EXP 3
18598: PUSH
18599: LD_OWVAR 1
18603: PUSH
18604: LD_INT 29400
18606: GREATER
18607: AND
18608: PUSH
18609: LD_INT 22
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 92
18621: PUSH
18622: LD_INT 322
18624: PUSH
18625: LD_INT 215
18627: PUSH
18628: LD_INT 20
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PPUSH
18641: CALL_OW 69
18645: OR
18646: IFFALSE 19009
18648: GO 18650
18650: DISABLE
18651: LD_INT 0
18653: PPUSH
// begin PrepareOmarSquad ;
18654: CALL 3961 0 0
// repeat wait ( 0 0$1 ) ;
18658: LD_INT 35
18660: PPUSH
18661: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
18665: LD_INT 14
18667: PPUSH
18668: LD_INT 22
18670: PUSH
18671: LD_INT 3
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 2
18680: PUSH
18681: LD_INT 21
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 59
18693: PUSH
18694: EMPTY
18695: LIST
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: LIST
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PPUSH
18706: CALL_OW 70
18710: NOT
18711: IFFALSE 18658
// for i in omarSquad do
18713: LD_ADDR_VAR 0 1
18717: PUSH
18718: LD_EXP 47
18722: PUSH
18723: FOR_IN
18724: IFFALSE 18755
// if GetLives ( i ) < 750 then
18726: LD_VAR 0 1
18730: PPUSH
18731: CALL_OW 256
18735: PUSH
18736: LD_INT 750
18738: LESS
18739: IFFALSE 18753
// SetLives ( i , 1000 ) ;
18741: LD_VAR 0 1
18745: PPUSH
18746: LD_INT 1000
18748: PPUSH
18749: CALL_OW 234
18753: GO 18723
18755: POP
18756: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
18757: LD_ADDR_VAR 0 1
18761: PUSH
18762: LD_INT 14
18764: PPUSH
18765: LD_INT 21
18767: PUSH
18768: LD_INT 3
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PPUSH
18775: CALL_OW 70
18779: PUSH
18780: FOR_IN
18781: IFFALSE 18797
// SetSide ( i , 5 ) ;
18783: LD_VAR 0 1
18787: PPUSH
18788: LD_INT 5
18790: PPUSH
18791: CALL_OW 235
18795: GO 18780
18797: POP
18798: POP
// wait ( 0 0$3 ) ;
18799: LD_INT 105
18801: PPUSH
18802: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
18806: LD_INT 5
18808: PPUSH
18809: LD_INT 2
18811: PPUSH
18812: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
18816: LD_EXP 39
18820: PPUSH
18821: CALL_OW 87
// DialogueOn ;
18825: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
18829: LD_EXP 39
18833: PPUSH
18834: LD_STRING DOm-Veh-1
18836: PPUSH
18837: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
18841: LD_EXP 39
18845: PPUSH
18846: LD_STRING DOm-Veh-2
18848: PPUSH
18849: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
18853: LD_EXP 39
18857: PPUSH
18858: LD_STRING DOm-Veh-3
18860: PPUSH
18861: CALL_OW 94
// if mortarConstructed then
18865: LD_EXP 15
18869: IFFALSE 18883
// SayRadio ( Omar , DOm-Veh-4 ) ;
18871: LD_EXP 39
18875: PPUSH
18876: LD_STRING DOm-Veh-4
18878: PPUSH
18879: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
18883: LD_EXP 29
18887: PPUSH
18888: LD_STRING DH-Veh-5
18890: PPUSH
18891: CALL_OW 88
// if IsOk ( Kurt ) then
18895: LD_EXP 40
18899: PPUSH
18900: CALL_OW 302
18904: IFFALSE 18954
// begin Say ( Kurt , DKs-Veh-6 ) ;
18906: LD_EXP 40
18910: PPUSH
18911: LD_STRING DKs-Veh-6
18913: PPUSH
18914: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
18918: LD_EXP 40
18922: PPUSH
18923: LD_STRING DKs-Veh-7
18925: PPUSH
18926: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
18930: LD_EXP 30
18934: PPUSH
18935: LD_STRING DG-Veh-8
18937: PPUSH
18938: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
18942: LD_EXP 31
18946: PPUSH
18947: LD_STRING DM-Veh-9
18949: PPUSH
18950: CALL_OW 88
// end ; DialogueOff ;
18954: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
18958: LD_STRING M4
18960: PPUSH
18961: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
18965: LD_EXP 39
18969: PPUSH
18970: LD_INT 341
18972: PPUSH
18973: LD_INT 232
18975: PPUSH
18976: CALL_OW 428
18980: PPUSH
18981: CALL_OW 120
// omarArrived := true ;
18985: LD_ADDR_EXP 6
18989: PUSH
18990: LD_INT 1
18992: ST_TO_ADDR
// omarScriptBase := true ;
18993: LD_ADDR_EXP 10
18997: PUSH
18998: LD_INT 1
19000: ST_TO_ADDR
// omarWantVehicles := true ;
19001: LD_ADDR_EXP 18
19005: PUSH
19006: LD_INT 1
19008: ST_TO_ADDR
// end ;
19009: PPOPN 1
19011: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19012: LD_EXP 42
19016: PPUSH
19017: CALL_OW 302
19021: PUSH
19022: LD_EXP 12
19026: AND
19027: PUSH
19028: LD_EXP 6
19032: AND
19033: IFFALSE 19130
19035: GO 19037
19037: DISABLE
// begin CenterNowOnUnits ( Rolf ) ;
19038: LD_EXP 42
19042: PPUSH
19043: CALL_OW 87
// DialogueOn ;
19047: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19051: LD_EXP 42
19055: PPUSH
19056: LD_STRING DRf-Veh-10
19058: PPUSH
19059: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19063: LD_EXP 42
19067: PPUSH
19068: LD_STRING DRf-Veh-11
19070: PPUSH
19071: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19075: LD_EXP 29
19079: PPUSH
19080: LD_STRING DH-Veh-12
19082: PPUSH
19083: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19087: LD_EXP 29
19091: PPUSH
19092: LD_STRING DH-Veh-13
19094: PPUSH
19095: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19099: LD_EXP 42
19103: PPUSH
19104: LD_STRING DRf-Veh-14
19106: PPUSH
19107: CALL_OW 88
// DialogueOff ;
19111: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19115: LD_STRING M5
19117: PPUSH
19118: CALL_OW 337
// rolfWantVehicles := true ;
19122: LD_ADDR_EXP 17
19126: PUSH
19127: LD_INT 1
19129: ST_TO_ADDR
// end ;
19130: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19131: LD_EXP 18
19135: IFFALSE 19827
19137: GO 19139
19139: DISABLE
19140: LD_INT 0
19142: PPUSH
19143: PPUSH
19144: PPUSH
19145: PPUSH
19146: PPUSH
19147: PPUSH
// begin wait ( 0 0$3 ) ;
19148: LD_INT 105
19150: PPUSH
19151: CALL_OW 67
// Hint ( OmarVehicles ) ;
19155: LD_STRING OmarVehicles
19157: PPUSH
19158: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19162: LD_INT 16
19164: PPUSH
19165: LD_INT 1
19167: PPUSH
19168: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19172: LD_INT 35
19174: PPUSH
19175: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19179: LD_ADDR_EXP 20
19183: PUSH
19184: LD_EXP 20
19188: PUSH
19189: LD_INT 35
19191: MINUS
19192: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19193: LD_EXP 20
19197: PUSH
19198: LD_INT 0
19200: LESSEQUAL
19201: IFFALSE 19301
// begin display_strings := [ ] ;
19203: LD_ADDR_OWVAR 47
19207: PUSH
19208: EMPTY
19209: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19210: LD_STRING M4a
19212: PPUSH
19213: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19217: LD_INT 16
19219: PPUSH
19220: LD_INT 0
19222: PPUSH
19223: CALL_OW 424
// DialogueOn ;
19227: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19231: LD_EXP 39
19235: PPUSH
19236: LD_STRING DOm-Veh-b-15
19238: PPUSH
19239: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19243: LD_EXP 29
19247: PPUSH
19248: LD_STRING DH-Veh-b-16
19250: PPUSH
19251: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19255: LD_EXP 39
19259: PPUSH
19260: LD_STRING DOm-Veh-b-17
19262: PPUSH
19263: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19267: LD_EXP 34
19271: PPUSH
19272: LD_STRING DK-Veh-b-18
19274: PPUSH
19275: CALL_OW 88
// DialogueOff ;
19279: CALL_OW 7
// omarAttack := true ;
19283: LD_ADDR_EXP 23
19287: PUSH
19288: LD_INT 1
19290: ST_TO_ADDR
// omarScriptBase := false ;
19291: LD_ADDR_EXP 10
19295: PUSH
19296: LD_INT 0
19298: ST_TO_ADDR
// exit ;
19299: GO 19827
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19301: LD_EXP 21
19305: PUSH
19306: LD_INT 16
19308: PPUSH
19309: LD_INT 22
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 21
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 33
19331: PUSH
19332: LD_INT 1
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 58
19341: PUSH
19342: EMPTY
19343: LIST
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: PPUSH
19351: CALL_OW 70
19355: LESSEQUAL
19356: IFFALSE 19172
// omarWaitingForVehiclesTimer := 0 0$00 ;
19358: LD_ADDR_EXP 20
19362: PUSH
19363: LD_INT 0
19365: ST_TO_ADDR
// display_strings := [ ] ;
19366: LD_ADDR_OWVAR 47
19370: PUSH
19371: EMPTY
19372: ST_TO_ADDR
// DialogueOn ;
19373: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
19377: LD_EXP 39
19381: PPUSH
19382: LD_STRING DOm-Veh-a-15
19384: PPUSH
19385: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
19389: LD_EXP 34
19393: PPUSH
19394: LD_STRING DK-Veh-a-16
19396: PPUSH
19397: CALL_OW 88
// DialogueOff ;
19401: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
19405: LD_STRING M4a
19407: PPUSH
19408: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19412: LD_INT 16
19414: PPUSH
19415: LD_INT 0
19417: PPUSH
19418: CALL_OW 424
// omarHasVehicles := true ;
19422: LD_ADDR_EXP 22
19426: PUSH
19427: LD_INT 1
19429: ST_TO_ADDR
// omarAttack := true ;
19430: LD_ADDR_EXP 23
19434: PUSH
19435: LD_INT 1
19437: ST_TO_ADDR
// omarScriptBase := false ;
19438: LD_ADDR_EXP 10
19442: PUSH
19443: LD_INT 0
19445: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19446: LD_ADDR_VAR 0 2
19450: PUSH
19451: LD_INT 16
19453: PPUSH
19454: LD_INT 22
19456: PUSH
19457: LD_INT 2
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 21
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 33
19476: PUSH
19477: LD_INT 1
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 58
19486: PUSH
19487: EMPTY
19488: LIST
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: PPUSH
19496: CALL_OW 70
19500: ST_TO_ADDR
// for i in tmp do
19501: LD_ADDR_VAR 0 1
19505: PUSH
19506: LD_VAR 0 2
19510: PUSH
19511: FOR_IN
19512: IFFALSE 19540
// begin SetFuel ( i , 100 ) ;
19514: LD_VAR 0 1
19518: PPUSH
19519: LD_INT 100
19521: PPUSH
19522: CALL_OW 240
// SetSide ( i , 5 ) ;
19526: LD_VAR 0 1
19530: PPUSH
19531: LD_INT 5
19533: PPUSH
19534: CALL_OW 235
// end ;
19538: GO 19511
19540: POP
19541: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
19542: LD_ADDR_VAR 0 3
19546: PUSH
19547: LD_EXP 47
19551: PPUSH
19552: LD_INT 25
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PPUSH
19562: CALL_OW 72
19566: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
19567: LD_ADDR_VAR 0 4
19571: PUSH
19572: LD_EXP 47
19576: PPUSH
19577: LD_INT 3
19579: PUSH
19580: LD_INT 55
19582: PUSH
19583: EMPTY
19584: LIST
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 25
19592: PUSH
19593: LD_INT 3
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PPUSH
19604: CALL_OW 72
19608: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
19609: LD_ADDR_VAR 0 5
19613: PUSH
19614: LD_INT 324
19616: PPUSH
19617: LD_INT 234
19619: PPUSH
19620: CALL_OW 428
19624: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
19625: LD_ADDR_VAR 0 6
19629: PUSH
19630: LD_INT 334
19632: PPUSH
19633: LD_INT 241
19635: PPUSH
19636: CALL_OW 428
19640: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
19641: LD_VAR 0 6
19645: PPUSH
19646: CALL_OW 313
19650: PPUSH
19651: CALL_OW 122
// if eng then
19655: LD_VAR 0 3
19659: IFFALSE 19767
// begin if eng + mech <= tmp then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_VAR 0 4
19670: PLUS
19671: PUSH
19672: LD_VAR 0 2
19676: LESSEQUAL
19677: IFFALSE 19732
// begin ComEnterUnit ( eng , workshop ) ;
19679: LD_VAR 0 3
19683: PPUSH
19684: LD_VAR 0 5
19688: PPUSH
19689: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
19693: LD_VAR 0 3
19697: PPUSH
19698: LD_INT 3
19700: PPUSH
19701: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19705: LD_VAR 0 3
19709: PPUSH
19710: CALL_OW 182
// mech := mech union eng ;
19714: LD_ADDR_VAR 0 4
19718: PUSH
19719: LD_VAR 0 4
19723: PUSH
19724: LD_VAR 0 3
19728: UNION
19729: ST_TO_ADDR
// end else
19730: GO 19767
// begin ComEnterUnit ( eng , armoury ) ;
19732: LD_VAR 0 3
19736: PPUSH
19737: LD_VAR 0 6
19741: PPUSH
19742: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
19746: LD_VAR 0 3
19750: PPUSH
19751: LD_INT 1
19753: PPUSH
19754: CALL_OW 183
// AddComExitBuilding ( eng ) ;
19758: LD_VAR 0 3
19762: PPUSH
19763: CALL_OW 182
// end ; end ; for i := 1 to tmp do
19767: LD_ADDR_VAR 0 1
19771: PUSH
19772: DOUBLE
19773: LD_INT 1
19775: DEC
19776: ST_TO_ADDR
19777: LD_VAR 0 2
19781: PUSH
19782: FOR_TO
19783: IFFALSE 19825
// if i <= mech then
19785: LD_VAR 0 1
19789: PUSH
19790: LD_VAR 0 4
19794: LESSEQUAL
19795: IFFALSE 19823
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
19797: LD_VAR 0 4
19801: PUSH
19802: LD_VAR 0 1
19806: ARRAY
19807: PPUSH
19808: LD_VAR 0 2
19812: PUSH
19813: LD_VAR 0 1
19817: ARRAY
19818: PPUSH
19819: CALL_OW 180
19823: GO 19782
19825: POP
19826: POP
// end ;
19827: PPOPN 6
19829: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
19830: LD_EXP 42
19834: PPUSH
19835: CALL_OW 302
19839: PUSH
19840: LD_EXP 17
19844: AND
19845: IFFALSE 20301
19847: GO 19849
19849: DISABLE
19850: LD_INT 0
19852: PPUSH
// begin repeat wait ( 0 0$1 ) ;
19853: LD_INT 35
19855: PPUSH
19856: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
19860: LD_ADDR_EXP 19
19864: PUSH
19865: LD_EXP 19
19869: PUSH
19870: LD_INT 35
19872: MINUS
19873: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
19874: LD_EXP 19
19878: PUSH
19879: LD_INT 0
19881: LESSEQUAL
19882: PUSH
19883: LD_EXP 23
19887: OR
19888: IFFALSE 20106
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
19890: LD_ADDR_EXP 19
19894: PUSH
19895: LD_INT 0
19897: ST_TO_ADDR
// display_strings := [ ] ;
19898: LD_ADDR_OWVAR 47
19902: PUSH
19903: EMPTY
19904: ST_TO_ADDR
// DialogueOn ;
19905: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
19909: LD_EXP 42
19913: PPUSH
19914: LD_STRING DRf-Veh-b-19
19916: PPUSH
19917: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
19921: LD_EXP 42
19925: PPUSH
19926: LD_STRING DRf-Veh-b-20
19928: PPUSH
19929: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
19933: LD_EXP 29
19937: PPUSH
19938: LD_STRING DH-Veh-b-21
19940: PPUSH
19941: CALL_OW 88
// if IsOk ( Givi ) then
19945: LD_EXP 30
19949: PPUSH
19950: CALL_OW 302
19954: IFFALSE 19992
// begin Say ( Givi , DG-Veh-b-22 ) ;
19956: LD_EXP 30
19960: PPUSH
19961: LD_STRING DG-Veh-b-22
19963: PPUSH
19964: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
19968: LD_EXP 29
19972: PPUSH
19973: LD_STRING DH-Veh-b-23
19975: PPUSH
19976: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
19980: LD_EXP 30
19984: PPUSH
19985: LD_STRING DG-Veh-b-24
19987: PPUSH
19988: CALL_OW 88
// end ; DialogueOff ;
19992: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
19996: LD_STRING M5a
19998: PPUSH
19999: CALL_OW 337
// for i in rolfSquad do
20003: LD_ADDR_VAR 0 1
20007: PUSH
20008: LD_EXP 46
20012: PUSH
20013: FOR_IN
20014: IFFALSE 20080
// begin SetSide ( i , 8 ) ;
20016: LD_VAR 0 1
20020: PPUSH
20021: LD_INT 8
20023: PPUSH
20024: CALL_OW 235
// if IsDriver ( i ) then
20028: LD_VAR 0 1
20032: PPUSH
20033: CALL 58913 0 1
20037: IFFALSE 20058
// SetSide ( IsInUnit ( i ) , 8 ) else
20039: LD_VAR 0 1
20043: PPUSH
20044: CALL_OW 310
20048: PPUSH
20049: LD_INT 8
20051: PPUSH
20052: CALL_OW 235
20056: GO 20078
// if IsInUnit ( i ) then
20058: LD_VAR 0 1
20062: PPUSH
20063: CALL_OW 310
20067: IFFALSE 20078
// ComExitBuilding ( i ) ;
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 122
// end ;
20078: GO 20013
20080: POP
20081: POP
// wait ( 0 0$1 ) ;
20082: LD_INT 35
20084: PPUSH
20085: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20089: LD_EXP 46
20093: PPUSH
20094: LD_INT 229
20096: PPUSH
20097: LD_INT 154
20099: PPUSH
20100: CALL_OW 114
// exit ;
20104: GO 20301
// end ; if IsDead ( Rolf ) then
20106: LD_EXP 42
20110: PPUSH
20111: CALL_OW 301
20115: IFFALSE 20126
// begin ChangeMissionObjectives ( M5a ) ;
20117: LD_STRING M5a
20119: PPUSH
20120: CALL_OW 337
// exit ;
20124: GO 20301
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20126: LD_EXP 46
20130: PPUSH
20131: LD_INT 55
20133: PUSH
20134: EMPTY
20135: LIST
20136: PPUSH
20137: CALL_OW 72
20141: PUSH
20142: LD_INT 0
20144: PLUS
20145: PUSH
20146: LD_EXP 46
20150: PUSH
20151: LD_INT 0
20153: PLUS
20154: EQUAL
20155: IFFALSE 19853
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20157: LD_ADDR_EXP 19
20161: PUSH
20162: LD_INT 0
20164: ST_TO_ADDR
// display_strings := [ ] ;
20165: LD_ADDR_OWVAR 47
20169: PUSH
20170: EMPTY
20171: ST_TO_ADDR
// DialogueOn ;
20172: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20176: LD_EXP 42
20180: PPUSH
20181: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20185: LD_EXP 42
20189: PPUSH
20190: LD_STRING DRf-Veh-a-17
20192: PPUSH
20193: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20197: LD_EXP 29
20201: PPUSH
20202: LD_STRING DH-08-Veh-a-18
20204: PPUSH
20205: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20209: LD_EXP 42
20213: PPUSH
20214: LD_STRING DRf-Veh-a-19
20216: PPUSH
20217: CALL_OW 88
// DialogueOff ;
20221: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20225: LD_STRING M5a
20227: PPUSH
20228: CALL_OW 337
// rolfHasVehicles := true ;
20232: LD_ADDR_EXP 16
20236: PUSH
20237: LD_INT 1
20239: ST_TO_ADDR
// for i in rolfSquad do
20240: LD_ADDR_VAR 0 1
20244: PUSH
20245: LD_EXP 46
20249: PUSH
20250: FOR_IN
20251: IFFALSE 20284
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20253: LD_VAR 0 1
20257: PPUSH
20258: CALL_OW 310
20262: PPUSH
20263: LD_INT 8
20265: PPUSH
20266: CALL_OW 235
// SetSide ( i , 8 ) ;
20270: LD_VAR 0 1
20274: PPUSH
20275: LD_INT 8
20277: PPUSH
20278: CALL_OW 235
// end ;
20282: GO 20250
20284: POP
20285: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20286: LD_EXP 46
20290: PPUSH
20291: LD_INT 229
20293: PPUSH
20294: LD_INT 154
20296: PPUSH
20297: CALL_OW 114
// end ;
20301: PPOPN 1
20303: END
// every 0 0$1 trigger leninSpotted do
20304: LD_EXP 14
20308: IFFALSE 20396
20310: GO 20312
20312: DISABLE
// begin wait ( 0 0$10 ) ;
20313: LD_INT 350
20315: PPUSH
20316: CALL_OW 67
// DialogueOn ;
20320: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20324: LD_EXP 41
20328: PPUSH
20329: LD_STRING DA-Transmission-1
20331: PPUSH
20332: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20336: LD_EXP 48
20340: PPUSH
20341: LD_STRING DMzw-Transmission-2
20343: PPUSH
20344: CALL_OW 94
// if gaidarKilled then
20348: LD_EXP 7
20352: IFFALSE 20368
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
20354: LD_EXP 48
20358: PPUSH
20359: LD_STRING DMzw-Transmission-3
20361: PPUSH
20362: CALL_OW 94
20366: GO 20380
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
20368: LD_EXP 48
20372: PPUSH
20373: LD_STRING DMzw-Transmission-a-3
20375: PPUSH
20376: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
20380: LD_EXP 29
20384: PPUSH
20385: LD_STRING DH-Transmission-4
20387: PPUSH
20388: CALL_OW 88
// DialogueOff ;
20392: CALL_OW 7
// end ;
20396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
20397: LD_INT 22
20399: PUSH
20400: LD_INT 3
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 25
20409: PUSH
20410: LD_INT 9
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 101
20419: PUSH
20420: LD_INT 2
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: LIST
20431: PPUSH
20432: CALL_OW 69
20436: PUSH
20437: LD_EXP 29
20441: PPUSH
20442: CALL_OW 302
20446: AND
20447: IFFALSE 20512
20449: GO 20451
20451: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
20452: LD_INT 22
20454: PUSH
20455: LD_INT 3
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 25
20464: PUSH
20465: LD_INT 9
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 101
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: LIST
20486: PPUSH
20487: CALL_OW 69
20491: PUSH
20492: LD_INT 1
20494: ARRAY
20495: PPUSH
20496: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
20500: LD_EXP 29
20504: PPUSH
20505: LD_STRING DH-Rubazooka-1
20507: PPUSH
20508: CALL_OW 88
// end ;
20512: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
20513: LD_INT 19
20515: PPUSH
20516: LD_INT 22
20518: PUSH
20519: LD_INT 3
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PPUSH
20526: CALL_OW 70
20530: PUSH
20531: LD_EXP 28
20535: AND
20536: IFFALSE 20587
20538: GO 20540
20540: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20541: LD_INT 19
20543: PPUSH
20544: LD_INT 22
20546: PUSH
20547: LD_INT 3
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 70
20558: PPUSH
20559: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
20563: LD_EXP 29
20567: PPUSH
20568: LD_STRING DH-Ruattfirst-1
20570: PPUSH
20571: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
20575: LD_EXP 29
20579: PPUSH
20580: LD_STRING DH-Ruattfirst-2
20582: PPUSH
20583: CALL_OW 88
// end ;
20587: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
20588: LD_INT 19
20590: PPUSH
20591: LD_INT 22
20593: PUSH
20594: LD_INT 3
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PPUSH
20601: CALL_OW 70
20605: PUSH
20606: LD_EXP 28
20610: NOT
20611: AND
20612: IFFALSE 20651
20614: GO 20616
20616: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
20617: LD_INT 19
20619: PPUSH
20620: LD_INT 22
20622: PUSH
20623: LD_INT 3
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 70
20634: PPUSH
20635: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
20639: LD_EXP 29
20643: PPUSH
20644: LD_STRING DH-Ruattnext-1
20646: PPUSH
20647: CALL_OW 88
// end ;
20651: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
20652: LD_EXP 43
20656: PPUSH
20657: CALL_OW 274
20661: PPUSH
20662: LD_INT 2
20664: PPUSH
20665: CALL_OW 275
20669: PUSH
20670: LD_INT 31
20672: LESS
20673: PUSH
20674: LD_EXP 30
20678: PPUSH
20679: CALL_OW 302
20683: AND
20684: IFFALSE 21247
20686: GO 20688
20688: DISABLE
20689: LD_INT 0
20691: PPUSH
20692: PPUSH
20693: PPUSH
// begin DialogueOn ;
20694: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
20698: LD_EXP 29
20702: PPUSH
20703: LD_STRING DH-Fuel-1
20705: PPUSH
20706: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
20710: LD_EXP 30
20714: PPUSH
20715: LD_STRING DG-Fuel-2
20717: PPUSH
20718: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
20722: LD_EXP 30
20726: PPUSH
20727: LD_STRING DG-Fuel-3
20729: PPUSH
20730: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
20734: LD_EXP 30
20738: PPUSH
20739: LD_STRING DG-Fuel-4
20741: PPUSH
20742: CALL_OW 88
// DialogueOff ;
20746: CALL_OW 7
// Query ( Oil ) ;
20750: LD_STRING Oil
20752: PPUSH
20753: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
20757: LD_INT 20
20759: PPUSH
20760: LD_INT 1
20762: PPUSH
20763: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
20767: LD_INT 35
20769: PPUSH
20770: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
20774: LD_INT 20
20776: PPUSH
20777: LD_INT 22
20779: PUSH
20780: LD_INT 2
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 33
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: LD_INT 34
20802: PUSH
20803: LD_INT 32
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 34
20812: PUSH
20813: LD_INT 51
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: LIST
20829: PPUSH
20830: CALL_OW 70
20834: IFFALSE 20767
// SetAreaMapShow ( oilArea , 0 ) ;
20836: LD_INT 20
20838: PPUSH
20839: LD_INT 0
20841: PPUSH
20842: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
20846: LD_ADDR_VAR 0 1
20850: PUSH
20851: LD_INT 20
20853: PPUSH
20854: LD_INT 22
20856: PUSH
20857: LD_INT 2
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 33
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: LD_INT 34
20879: PUSH
20880: LD_INT 32
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 34
20889: PUSH
20890: LD_INT 51
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: LIST
20906: PPUSH
20907: CALL_OW 70
20911: PUSH
20912: LD_INT 1
20914: ARRAY
20915: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
20916: LD_ADDR_VAR 0 2
20920: PUSH
20921: LD_VAR 0 1
20925: PPUSH
20926: CALL_OW 311
20930: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
20931: LD_ADDR_VAR 0 3
20935: PUSH
20936: LD_VAR 0 1
20940: PPUSH
20941: CALL_OW 256
20945: ST_TO_ADDR
// RemoveUnit ( driver ) ;
20946: LD_VAR 0 2
20950: PPUSH
20951: CALL_OW 64
// RemoveUnit ( vehicle ) ;
20955: LD_VAR 0 1
20959: PPUSH
20960: CALL_OW 64
// wait ( rand ( 3 3$30 , 5 5$00 ) ) ;
20964: LD_INT 7350
20966: PPUSH
20967: LD_INT 10500
20969: PPUSH
20970: CALL_OW 12
20974: PPUSH
20975: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20979: LD_INT 35
20981: PPUSH
20982: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
20986: LD_INT 22
20988: PUSH
20989: LD_INT 3
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 92
20998: PUSH
20999: LD_INT 261
21001: PUSH
21002: LD_INT 71
21004: PUSH
21005: LD_INT 12
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PPUSH
21018: CALL_OW 69
21022: NOT
21023: PUSH
21024: LD_INT 277
21026: PPUSH
21027: LD_INT 80
21029: PPUSH
21030: CALL_OW 428
21034: NOT
21035: AND
21036: IFFALSE 20979
// uc_nation := GetNation ( vehicle ) ;
21038: LD_ADDR_OWVAR 21
21042: PUSH
21043: LD_VAR 0 1
21047: PPUSH
21048: CALL_OW 248
21052: ST_TO_ADDR
// uc_side := 2 ;
21053: LD_ADDR_OWVAR 20
21057: PUSH
21058: LD_INT 2
21060: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21061: LD_VAR 0 1
21065: PPUSH
21066: CALL_OW 265
21070: PPUSH
21071: LD_VAR 0 1
21075: PPUSH
21076: CALL_OW 262
21080: PPUSH
21081: LD_VAR 0 1
21085: PPUSH
21086: CALL_OW 263
21090: PPUSH
21091: LD_VAR 0 1
21095: PPUSH
21096: CALL_OW 264
21100: PPUSH
21101: LD_INT 66
21103: PPUSH
21104: CALL 29433 0 5
// vehicle := CreateVehicle ;
21108: LD_ADDR_VAR 0 1
21112: PUSH
21113: CALL_OW 45
21117: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21118: LD_VAR 0 1
21122: PPUSH
21123: LD_INT 277
21125: PPUSH
21126: LD_INT 80
21128: PPUSH
21129: LD_INT 4
21131: PPUSH
21132: LD_INT 0
21134: PPUSH
21135: CALL 63238 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21139: LD_VAR 0 2
21143: PPUSH
21144: LD_VAR 0 1
21148: PPUSH
21149: CALL_OW 52
// SetLives ( vehicle , live ) ;
21153: LD_VAR 0 1
21157: PPUSH
21158: LD_VAR 0 3
21162: PPUSH
21163: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 ] [ Difficulty ] ) then
21167: LD_INT 70
21169: PUSH
21170: LD_INT 60
21172: PUSH
21173: LD_INT 50
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: PUSH
21181: LD_OWVAR 67
21185: ARRAY
21186: PPUSH
21187: CALL_OW 13
21191: IFFALSE 21210
// SetCargo ( vehicle , mat_oil , 100 ) else
21193: LD_VAR 0 1
21197: PPUSH
21198: LD_INT 2
21200: PPUSH
21201: LD_INT 100
21203: PPUSH
21204: CALL_OW 290
21208: GO 21232
// if live > 333 then
21210: LD_VAR 0 3
21214: PUSH
21215: LD_INT 333
21217: GREATER
21218: IFFALSE 21232
// SetLives ( vehicle , 333 ) ;
21220: LD_VAR 0 1
21224: PPUSH
21225: LD_INT 333
21227: PPUSH
21228: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21232: LD_VAR 0 1
21236: PPUSH
21237: LD_INT 250
21239: PPUSH
21240: LD_INT 119
21242: PPUSH
21243: CALL_OW 111
// end ;
21247: PPOPN 3
21249: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21250: LD_EXP 14
21254: PUSH
21255: LD_EXP 23
21259: AND
21260: IFFALSE 21560
21262: GO 21264
21264: DISABLE
// begin wait ( 0 0$45 ) ;
21265: LD_INT 1575
21267: PPUSH
21268: CALL_OW 67
// DialogueOn ;
21272: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21276: LD_EXP 37
21280: PPUSH
21281: LD_STRING DShar-End-1
21283: PPUSH
21284: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21288: LD_EXP 29
21292: PPUSH
21293: LD_STRING DH-End-2
21295: PPUSH
21296: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21300: LD_EXP 37
21304: PPUSH
21305: LD_STRING DShar-End-3
21307: PPUSH
21308: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21312: LD_EXP 29
21316: PPUSH
21317: LD_STRING DH-End-4
21319: PPUSH
21320: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21324: LD_EXP 37
21328: PPUSH
21329: LD_STRING DShar-End-5
21331: PPUSH
21332: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21336: LD_EXP 37
21340: PPUSH
21341: LD_STRING DShar-End-6
21343: PPUSH
21344: CALL_OW 94
// dwait ( 0 0$2 ) ;
21348: LD_INT 70
21350: PPUSH
21351: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21355: LD_EXP 29
21359: PPUSH
21360: LD_STRING DH-End-7
21362: PPUSH
21363: CALL_OW 88
// DialogueOff ;
21367: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
21371: LD_STRING M6
21373: PPUSH
21374: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
21378: LD_INT 17
21380: PPUSH
21381: LD_INT 1
21383: PPUSH
21384: CALL_OW 424
// escapeAllowed := true ;
21388: LD_ADDR_EXP 24
21392: PUSH
21393: LD_INT 1
21395: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21396: LD_INT 35
21398: PPUSH
21399: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
21403: LD_EXP 40
21407: PPUSH
21408: LD_STRING DKs-End-8
21410: PPUSH
21411: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
21415: LD_EXP 34
21419: PPUSH
21420: LD_STRING DK-End-10
21422: PPUSH
21423: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
21427: LD_EXP 40
21431: PPUSH
21432: LD_STRING DKs-End-9
21434: PPUSH
21435: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
21439: LD_EXP 36
21443: PPUSH
21444: LD_STRING DMar-End-11
21446: PPUSH
21447: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
21451: LD_STRING 05_DrugsTested
21453: PPUSH
21454: LD_EXP 1
21458: PPUSH
21459: CALL_OW 30
21463: IFFALSE 21477
// Say ( Mike , DM-End-12 ) ;
21465: LD_EXP 31
21469: PPUSH
21470: LD_STRING DM-End-12
21472: PPUSH
21473: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
21477: LD_EXP 38
21481: PPUSH
21482: LD_STRING DO-End-13
21484: PPUSH
21485: CALL_OW 88
// if IsOk ( Sophia ) then
21489: LD_EXP 35
21493: PPUSH
21494: CALL_OW 302
21498: IFFALSE 21524
// begin Say ( Sophia , DS-End-15 ) ;
21500: LD_EXP 35
21504: PPUSH
21505: LD_STRING DS-End-15
21507: PPUSH
21508: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
21512: LD_EXP 34
21516: PPUSH
21517: LD_STRING DK-End-16
21519: PPUSH
21520: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
21524: LD_EXP 30
21528: PPUSH
21529: LD_STRING DG-End-17
21531: PPUSH
21532: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
21536: LD_EXP 30
21540: PPUSH
21541: LD_STRING DG-End-18
21543: PPUSH
21544: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
21548: LD_EXP 30
21552: PPUSH
21553: LD_STRING DG-End-19
21555: PPUSH
21556: CALL_OW 88
// end ;
21560: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
21561: LD_EXP 24
21565: IFFALSE 21693
21567: GO 21569
21569: DISABLE
21570: LD_INT 0
21572: PPUSH
21573: PPUSH
// begin enable ;
21574: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
21575: LD_ADDR_OWVAR 47
21579: PUSH
21580: LD_STRING #X106-2
21582: PUSH
21583: LD_EXP 25
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
21592: LD_ADDR_EXP 25
21596: PUSH
21597: LD_EXP 25
21601: PUSH
21602: LD_INT 35
21604: MINUS
21605: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
21606: LD_ADDR_VAR 0 2
21610: PUSH
21611: LD_INT 17
21613: PPUSH
21614: LD_INT 22
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 21
21626: PUSH
21627: LD_INT 1
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 23
21636: PUSH
21637: LD_INT 2
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: PPUSH
21649: CALL_OW 71
21653: ST_TO_ADDR
// if not outsiders then
21654: LD_VAR 0 2
21658: NOT
21659: IFFALSE 21676
// begin escapeAllowed := false ;
21661: LD_ADDR_EXP 24
21665: PUSH
21666: LD_INT 0
21668: ST_TO_ADDR
// disable ;
21669: DISABLE
// MissionWin ;
21670: CALL 21696 0 0
// exit ;
21674: GO 21693
// end ; if escapeTimer <= 0 0$00 then
21676: LD_EXP 25
21680: PUSH
21681: LD_INT 0
21683: LESSEQUAL
21684: IFFALSE 21693
// YouLost ( TimeOut ) ;
21686: LD_STRING TimeOut
21688: PPUSH
21689: CALL_OW 104
// end ;
21693: PPOPN 2
21695: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
21696: LD_INT 0
21698: PPUSH
21699: PPUSH
21700: PPUSH
21701: PPUSH
21702: PPUSH
// Say ( Heike , DH-End-20 ) ;
21703: LD_EXP 29
21707: PPUSH
21708: LD_STRING DH-End-20
21710: PPUSH
21711: CALL_OW 88
// if rolfDied then
21715: LD_EXP 13
21719: IFFALSE 21734
// AddMedal ( med1 , - 1 ) else
21721: LD_STRING med1
21723: PPUSH
21724: LD_INT 1
21726: NEG
21727: PPUSH
21728: CALL_OW 101
21732: GO 21744
// AddMedal ( med1 , 1 ) ;
21734: LD_STRING med1
21736: PPUSH
21737: LD_INT 1
21739: PPUSH
21740: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
21744: LD_EXP 22
21748: PUSH
21749: LD_EXP 16
21753: AND
21754: IFFALSE 21768
// AddMedal ( med2 , 1 ) else
21756: LD_STRING med2
21758: PPUSH
21759: LD_INT 1
21761: PPUSH
21762: CALL_OW 101
21766: GO 21817
// if omarHasVehicles then
21768: LD_EXP 22
21772: IFFALSE 21787
// AddMedal ( med2 , - 1 ) else
21774: LD_STRING med2
21776: PPUSH
21777: LD_INT 1
21779: NEG
21780: PPUSH
21781: CALL_OW 101
21785: GO 21817
// if rolfHasVehicles then
21787: LD_EXP 16
21791: IFFALSE 21806
// AddMedal ( med2 , - 2 ) else
21793: LD_STRING med2
21795: PPUSH
21796: LD_INT 2
21798: NEG
21799: PPUSH
21800: CALL_OW 101
21804: GO 21817
// AddMedal ( med2 , - 3 ) ;
21806: LD_STRING med2
21808: PPUSH
21809: LD_INT 3
21811: NEG
21812: PPUSH
21813: CALL_OW 101
// if ruLoseCounter >= [ 40 , 55 , 70 ] [ Difficulty ] and heikeLoseCounter = 0 then
21817: LD_EXP 5
21821: PUSH
21822: LD_INT 40
21824: PUSH
21825: LD_INT 55
21827: PUSH
21828: LD_INT 70
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: PUSH
21836: LD_OWVAR 67
21840: ARRAY
21841: GREATEREQUAL
21842: PUSH
21843: LD_EXP 26
21847: PUSH
21848: LD_INT 0
21850: EQUAL
21851: AND
21852: IFFALSE 21866
// AddMedal ( med3 , 1 ) else
21854: LD_STRING med3
21856: PPUSH
21857: LD_INT 1
21859: PPUSH
21860: CALL_OW 101
21864: GO 21896
// if heikeLoseCounter then
21866: LD_EXP 26
21870: IFFALSE 21885
// AddMedal ( med3 , - 1 ) else
21872: LD_STRING med3
21874: PPUSH
21875: LD_INT 1
21877: NEG
21878: PPUSH
21879: CALL_OW 101
21883: GO 21896
// AddMedal ( med3 , - 2 ) ;
21885: LD_STRING med3
21887: PPUSH
21888: LD_INT 2
21890: NEG
21891: PPUSH
21892: CALL_OW 101
// GiveMedals ( MAIN ) ;
21896: LD_STRING MAIN
21898: PPUSH
21899: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
21903: LD_INT 22
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 23
21915: PUSH
21916: LD_INT 2
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 21
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: LIST
21937: PPUSH
21938: CALL_OW 69
21942: PPUSH
21943: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
21947: LD_EXP 29
21951: PPUSH
21952: LD_STRING 06_Heike
21954: PPUSH
21955: CALL_OW 38
// if Aviradze then
21959: LD_EXP 41
21963: IFFALSE 21977
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
21965: LD_EXP 41
21969: PPUSH
21970: LD_STRING 06_Aviradze
21972: PPUSH
21973: CALL_OW 38
// if Ibrahim then
21977: LD_EXP 32
21981: IFFALSE 21995
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
21983: LD_EXP 32
21987: PPUSH
21988: LD_STRING 06_Ibrahim
21990: PPUSH
21991: CALL_OW 38
// if Kamil then
21995: LD_EXP 33
21999: IFFALSE 22013
// SaveCharacters ( Kamil , 06_Kamil ) ;
22001: LD_EXP 33
22005: PPUSH
22006: LD_STRING 06_Kamil
22008: PPUSH
22009: CALL_OW 38
// if Sophia then
22013: LD_EXP 35
22017: IFFALSE 22031
// SaveCharacters ( Sophia , 06_Sophia ) ;
22019: LD_EXP 35
22023: PPUSH
22024: LD_STRING 06_Sophia
22026: PPUSH
22027: CALL_OW 38
// if Kaia then
22031: LD_EXP 34
22035: IFFALSE 22049
// SaveCharacters ( Kaia , 06_Kaia ) ;
22037: LD_EXP 34
22041: PPUSH
22042: LD_STRING 06_Kaia
22044: PPUSH
22045: CALL_OW 38
// if Givi then
22049: LD_EXP 30
22053: IFFALSE 22067
// SaveCharacters ( Givi , 06_Givi ) ;
22055: LD_EXP 30
22059: PPUSH
22060: LD_STRING 06_Givi
22062: PPUSH
22063: CALL_OW 38
// if Mike then
22067: LD_EXP 31
22071: IFFALSE 22085
// SaveCharacters ( Mike , 06_Mike ) ;
22073: LD_EXP 31
22077: PPUSH
22078: LD_STRING 06_Mike
22080: PPUSH
22081: CALL_OW 38
// if Markov then
22085: LD_EXP 36
22089: IFFALSE 22103
// SaveCharacters ( Markov , 06_Markov ) ;
22091: LD_EXP 36
22095: PPUSH
22096: LD_STRING 06_Markov
22098: PPUSH
22099: CALL_OW 38
// if Kurt then
22103: LD_EXP 40
22107: IFFALSE 22121
// SaveCharacters ( Kurt , 06_Kurt ) ;
22109: LD_EXP 40
22113: PPUSH
22114: LD_STRING 06_Kurt
22116: PPUSH
22117: CALL_OW 38
// if heikeSecondSquad then
22121: LD_EXP 44
22125: IFFALSE 22139
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22127: LD_EXP 44
22131: PPUSH
22132: LD_STRING 06_others
22134: PPUSH
22135: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22139: LD_ADDR_VAR 0 3
22143: PUSH
22144: LD_INT 22
22146: PUSH
22147: LD_INT 2
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 23
22156: PUSH
22157: LD_INT 0
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PPUSH
22168: CALL_OW 69
22172: ST_TO_ADDR
// if tmp then
22173: LD_VAR 0 3
22177: IFFALSE 22191
// SaveCharacters ( tmp , 06_apes ) ;
22179: LD_VAR 0 3
22183: PPUSH
22184: LD_STRING 06_apes
22186: PPUSH
22187: CALL_OW 38
// if Rolf then
22191: LD_EXP 42
22195: IFFALSE 22209
// SaveCharacters ( Rolf , 06_Rolf ) ;
22197: LD_EXP 42
22201: PPUSH
22202: LD_STRING 06_Rolf
22204: PPUSH
22205: CALL_OW 38
// tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22209: LD_ADDR_VAR 0 3
22213: PUSH
22214: LD_INT 17
22216: PPUSH
22217: LD_INT 21
22219: PUSH
22220: LD_INT 2
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PPUSH
22227: CALL_OW 70
22231: ST_TO_ADDR
// if tmp then
22232: LD_VAR 0 3
22236: IFFALSE 22530
// begin tmp2 := [ ] ;
22238: LD_ADDR_VAR 0 4
22242: PUSH
22243: EMPTY
22244: ST_TO_ADDR
// for i in tmp do
22245: LD_ADDR_VAR 0 2
22249: PUSH
22250: LD_VAR 0 3
22254: PUSH
22255: FOR_IN
22256: IFFALSE 22516
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22258: LD_VAR 0 2
22262: PPUSH
22263: CALL_OW 264
22267: PUSH
22268: LD_INT 32
22270: PUSH
22271: LD_INT 12
22273: PUSH
22274: LD_INT 51
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: IN
22282: IFFALSE 22419
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22284: LD_ADDR_VAR 0 5
22288: PUSH
22289: LD_VAR 0 2
22293: PPUSH
22294: LD_INT 1
22296: PPUSH
22297: CALL_OW 289
22301: PUSH
22302: LD_VAR 0 2
22306: PPUSH
22307: LD_INT 2
22309: PPUSH
22310: CALL_OW 289
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
22319: LD_ADDR_VAR 0 4
22323: PUSH
22324: LD_VAR 0 4
22328: PPUSH
22329: LD_VAR 0 4
22333: PUSH
22334: LD_INT 1
22336: PLUS
22337: PPUSH
22338: LD_VAR 0 2
22342: PPUSH
22343: CALL_OW 265
22347: PUSH
22348: LD_VAR 0 2
22352: PPUSH
22353: CALL_OW 262
22357: PUSH
22358: LD_VAR 0 2
22362: PPUSH
22363: CALL_OW 263
22367: PUSH
22368: LD_VAR 0 2
22372: PPUSH
22373: CALL_OW 264
22377: PUSH
22378: LD_VAR 0 2
22382: PPUSH
22383: CALL_OW 248
22387: PUSH
22388: LD_VAR 0 2
22392: PPUSH
22393: CALL_OW 256
22397: PUSH
22398: LD_VAR 0 5
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: PPUSH
22412: CALL_OW 1
22416: ST_TO_ADDR
// end else
22417: GO 22514
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
22419: LD_ADDR_VAR 0 4
22423: PUSH
22424: LD_VAR 0 4
22428: PPUSH
22429: LD_VAR 0 4
22433: PUSH
22434: LD_INT 1
22436: PLUS
22437: PPUSH
22438: LD_VAR 0 2
22442: PPUSH
22443: CALL_OW 265
22447: PUSH
22448: LD_VAR 0 2
22452: PPUSH
22453: CALL_OW 262
22457: PUSH
22458: LD_VAR 0 2
22462: PPUSH
22463: CALL_OW 263
22467: PUSH
22468: LD_VAR 0 2
22472: PPUSH
22473: CALL_OW 264
22477: PUSH
22478: LD_VAR 0 2
22482: PPUSH
22483: CALL_OW 248
22487: PUSH
22488: LD_VAR 0 2
22492: PPUSH
22493: CALL_OW 256
22497: PUSH
22498: EMPTY
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: PPUSH
22509: CALL_OW 1
22513: ST_TO_ADDR
22514: GO 22255
22516: POP
22517: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
22518: LD_VAR 0 4
22522: PPUSH
22523: LD_STRING 06_Vehicles
22525: PPUSH
22526: CALL_OW 39
// end ; YouWin ;
22530: CALL_OW 103
// end ; end_of_file
22534: LD_VAR 0 1
22538: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
22539: LD_INT 0
22541: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
22542: LD_VAR 0 1
22546: PPUSH
22547: CALL_OW 255
22551: PUSH
22552: LD_INT 2
22554: EQUAL
22555: PUSH
22556: LD_OWVAR 52
22560: AND
22561: PUSH
22562: LD_VAR 0 1
22566: PPUSH
22567: CALL_OW 263
22571: PUSH
22572: LD_INT 1
22574: EQUAL
22575: AND
22576: IFFALSE 22631
// begin driver := IsDrivenBy ( vehicle ) ;
22578: LD_ADDR_VAR 0 3
22582: PUSH
22583: LD_VAR 0 1
22587: PPUSH
22588: CALL_OW 311
22592: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
22593: LD_VAR 0 1
22597: PPUSH
22598: LD_INT 211
22600: PPUSH
22601: LD_INT 101
22603: PPUSH
22604: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22608: LD_VAR 0 3
22612: PPUSH
22613: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22617: LD_VAR 0 3
22621: PPUSH
22622: LD_VAR 0 2
22626: PPUSH
22627: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
22631: LD_VAR 0 1
22635: PPUSH
22636: CALL_OW 255
22640: PUSH
22641: LD_INT 3
22643: EQUAL
22644: IFFALSE 22675
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
22646: LD_ADDR_EXP 55
22650: PUSH
22651: LD_EXP 55
22655: PPUSH
22656: LD_EXP 55
22660: PUSH
22661: LD_INT 1
22663: PLUS
22664: PPUSH
22665: LD_VAR 0 1
22669: PPUSH
22670: CALL_OW 1
22674: ST_TO_ADDR
// end ;
22675: PPOPN 3
22677: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
22678: LD_VAR 0 1
22682: PPUSH
22683: CALL_OW 255
22687: PUSH
22688: LD_INT 8
22690: EQUAL
22691: PUSH
22692: LD_VAR 0 1
22696: PPUSH
22697: CALL_OW 266
22701: PUSH
22702: LD_INT 4
22704: EQUAL
22705: AND
22706: IFFALSE 22717
// ComUpgrade ( b ) ;
22708: LD_VAR 0 1
22712: PPUSH
22713: CALL_OW 146
// end ;
22717: PPOPN 1
22719: END
// on UnitDestroyed ( un ) do begin if un = Heike then
22720: LD_VAR 0 1
22724: PUSH
22725: LD_EXP 29
22729: EQUAL
22730: IFFALSE 22739
// YouLost ( Heike ) ;
22732: LD_STRING Heike
22734: PPUSH
22735: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
22739: LD_VAR 0 1
22743: PUSH
22744: LD_INT 22
22746: PUSH
22747: LD_INT 2
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 23
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PPUSH
22768: CALL_OW 69
22772: IN
22773: IFFALSE 22789
// heikeLoseCounter := heikeLoseCounter + 1 ;
22775: LD_ADDR_EXP 26
22779: PUSH
22780: LD_EXP 26
22784: PUSH
22785: LD_INT 1
22787: PLUS
22788: ST_TO_ADDR
// if un = arDepot then
22789: LD_VAR 0 1
22793: PUSH
22794: LD_EXP 43
22798: EQUAL
22799: IFFALSE 22808
// YouLost ( Base ) ;
22801: LD_STRING Base
22803: PPUSH
22804: CALL_OW 104
// if un = Rolf then
22808: LD_VAR 0 1
22812: PUSH
22813: LD_EXP 42
22817: EQUAL
22818: IFFALSE 22828
// rolfDied := true ;
22820: LD_ADDR_EXP 13
22824: PUSH
22825: LD_INT 1
22827: ST_TO_ADDR
// if un in rolfSquad then
22828: LD_VAR 0 1
22832: PUSH
22833: LD_EXP 46
22837: IN
22838: IFFALSE 22856
// rolfSquad := rolfSquad diff un ;
22840: LD_ADDR_EXP 46
22844: PUSH
22845: LD_EXP 46
22849: PUSH
22850: LD_VAR 0 1
22854: DIFF
22855: ST_TO_ADDR
// if un in omarSquad then
22856: LD_VAR 0 1
22860: PUSH
22861: LD_EXP 47
22865: IN
22866: IFFALSE 22884
// omarSquad := omarSquad diff un ;
22868: LD_ADDR_EXP 47
22872: PUSH
22873: LD_EXP 47
22877: PUSH
22878: LD_VAR 0 1
22882: DIFF
22883: ST_TO_ADDR
// if GetSide ( un ) = 3 then
22884: LD_VAR 0 1
22888: PPUSH
22889: CALL_OW 255
22893: PUSH
22894: LD_INT 3
22896: EQUAL
22897: IFFALSE 22913
// ruLoseCounter := ruLoseCounter + 1 ;
22899: LD_ADDR_EXP 5
22903: PUSH
22904: LD_EXP 5
22908: PUSH
22909: LD_INT 1
22911: PLUS
22912: ST_TO_ADDR
// if un in ruAttackers then
22913: LD_VAR 0 1
22917: PUSH
22918: LD_EXP 56
22922: IN
22923: IFFALSE 22941
// ruAttackers := ruAttackers diff un ;
22925: LD_ADDR_EXP 56
22929: PUSH
22930: LD_EXP 56
22934: PUSH
22935: LD_VAR 0 1
22939: DIFF
22940: ST_TO_ADDR
// end ;
22941: PPOPN 1
22943: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
22944: LD_INT 0
22946: PPUSH
22947: PPUSH
22948: PPUSH
22949: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
22950: LD_VAR 0 1
22954: PPUSH
22955: CALL_OW 255
22959: PUSH
22960: LD_INT 3
22962: EQUAL
22963: PUSH
22964: LD_VAR 0 1
22968: PUSH
22969: LD_EXP 56
22973: IN
22974: NOT
22975: AND
22976: IFFALSE 23472
// begin if not IsInArea ( un , ruMainBase ) then
22978: LD_VAR 0 1
22982: PPUSH
22983: LD_INT 10
22985: PPUSH
22986: CALL_OW 308
22990: NOT
22991: IFFALSE 23005
// ComMoveToArea ( un , ruMainBase ) ;
22993: LD_VAR 0 1
22997: PPUSH
22998: LD_INT 10
23000: PPUSH
23001: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23005: LD_INT 35
23007: PPUSH
23008: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23012: LD_VAR 0 1
23016: PPUSH
23017: CALL_OW 302
23021: NOT
23022: PUSH
23023: LD_VAR 0 1
23027: PPUSH
23028: LD_INT 10
23030: PPUSH
23031: CALL_OW 308
23035: OR
23036: IFFALSE 23005
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23038: LD_ADDR_EXP 54
23042: PUSH
23043: LD_EXP 54
23047: PPUSH
23048: LD_EXP 54
23052: PUSH
23053: LD_INT 1
23055: PLUS
23056: PPUSH
23057: LD_VAR 0 1
23061: PPUSH
23062: CALL_OW 1
23066: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23067: LD_ADDR_VAR 0 8
23071: PUSH
23072: LD_INT 72
23074: PUSH
23075: LD_INT 12
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: ST_TO_ADDR
// if tmp then
23082: LD_VAR 0 8
23086: IFFALSE 23201
// for i in tmp do
23088: LD_ADDR_VAR 0 5
23092: PUSH
23093: LD_VAR 0 8
23097: PUSH
23098: FOR_IN
23099: IFFALSE 23199
// if UnitsInside ( i ) < 6 then
23101: LD_VAR 0 5
23105: PPUSH
23106: CALL_OW 313
23110: PUSH
23111: LD_INT 6
23113: LESS
23114: IFFALSE 23197
// begin AddComEnterUnit ( un , i ) ;
23116: LD_VAR 0 1
23120: PPUSH
23121: LD_VAR 0 5
23125: PPUSH
23126: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23130: LD_VAR 0 8
23134: PPUSH
23135: LD_INT 22
23137: PUSH
23138: LD_INT 23
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 1
23147: PPUSH
23148: LD_INT 2
23150: PPUSH
23151: CALL_OW 12
23155: ARRAY
23156: PPUSH
23157: LD_INT 1
23159: PPUSH
23160: LD_INT 1
23162: PPUSH
23163: LD_INT 44
23165: PUSH
23166: LD_INT 46
23168: PUSH
23169: LD_INT 47
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: PPUSH
23180: LD_INT 3
23182: PPUSH
23183: CALL_OW 12
23187: ARRAY
23188: PPUSH
23189: CALL_OW 185
// exit ;
23193: POP
23194: POP
23195: GO 23472
// end ;
23197: GO 23098
23199: POP
23200: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23201: LD_ADDR_VAR 0 8
23205: PUSH
23206: LD_INT 10
23208: PPUSH
23209: LD_INT 22
23211: PUSH
23212: LD_INT 3
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 50
23221: PUSH
23222: EMPTY
23223: LIST
23224: PUSH
23225: LD_INT 2
23227: PUSH
23228: LD_INT 30
23230: PUSH
23231: LD_INT 4
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 30
23240: PUSH
23241: LD_INT 5
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 30
23250: PUSH
23251: LD_INT 32
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 30
23260: PUSH
23261: LD_INT 31
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: PPUSH
23280: CALL_OW 70
23284: ST_TO_ADDR
// if not tmp then
23285: LD_VAR 0 8
23289: NOT
23290: IFFALSE 23309
// begin ComMoveXY ( un , 83 , 133 ) ;
23292: LD_VAR 0 1
23296: PPUSH
23297: LD_INT 83
23299: PPUSH
23300: LD_INT 133
23302: PPUSH
23303: CALL_OW 111
// exit ;
23307: GO 23472
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23309: LD_ADDR_VAR 0 6
23313: PUSH
23314: LD_VAR 0 1
23318: PPUSH
23319: LD_VAR 0 8
23323: PPUSH
23324: LD_INT 1
23326: PPUSH
23327: LD_INT 1
23329: PPUSH
23330: CALL 29990 0 4
23334: PUSH
23335: FOR_IN
23336: IFFALSE 23470
// begin case GetBType ( b ) of b_armoury , b_barracks :
23338: LD_VAR 0 6
23342: PPUSH
23343: CALL_OW 266
23347: PUSH
23348: LD_INT 4
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23362
23354: LD_INT 5
23356: DOUBLE
23357: EQUAL
23358: IFTRUE 23362
23360: GO 23373
23362: POP
// p := 6 ; b_breastwork , b_bunker :
23363: LD_ADDR_VAR 0 7
23367: PUSH
23368: LD_INT 6
23370: ST_TO_ADDR
23371: GO 23399
23373: LD_INT 31
23375: DOUBLE
23376: EQUAL
23377: IFTRUE 23387
23379: LD_INT 32
23381: DOUBLE
23382: EQUAL
23383: IFTRUE 23387
23385: GO 23398
23387: POP
// p := 1 ; end ;
23388: LD_ADDR_VAR 0 7
23392: PUSH
23393: LD_INT 1
23395: ST_TO_ADDR
23396: GO 23399
23398: POP
// if UnitsInside ( b ) < p then
23399: LD_VAR 0 6
23403: PPUSH
23404: CALL_OW 313
23408: PUSH
23409: LD_VAR 0 7
23413: LESS
23414: IFFALSE 23468
// begin ComEnterUnit ( un , b ) ;
23416: LD_VAR 0 1
23420: PPUSH
23421: LD_VAR 0 6
23425: PPUSH
23426: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
23430: LD_VAR 0 6
23434: PPUSH
23435: CALL_OW 266
23439: PUSH
23440: LD_INT 4
23442: PUSH
23443: LD_INT 5
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: IN
23450: IFFALSE 23464
// AddComChangeProfession ( un , class_soldier ) ;
23452: LD_VAR 0 1
23456: PPUSH
23457: LD_INT 1
23459: PPUSH
23460: CALL_OW 183
// exit ;
23464: POP
23465: POP
23466: GO 23472
// end ; end ;
23468: GO 23335
23470: POP
23471: POP
// end ; end ;
23472: PPOPN 8
23474: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
23475: LD_INT 0
23477: PPUSH
23478: PPUSH
23479: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
23480: LD_VAR 0 2
23484: PPUSH
23485: CALL_OW 255
23489: PUSH
23490: LD_INT 3
23492: EQUAL
23493: PUSH
23494: LD_VAR 0 2
23498: PPUSH
23499: CALL_OW 257
23503: PUSH
23504: LD_INT 1
23506: EQUAL
23507: AND
23508: PUSH
23509: LD_VAR 0 2
23513: PUSH
23514: LD_EXP 54
23518: IN
23519: NOT
23520: AND
23521: IFFALSE 23834
// begin ComMoveToArea ( un , ruMainBase ) ;
23523: LD_VAR 0 2
23527: PPUSH
23528: LD_INT 10
23530: PPUSH
23531: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23535: LD_INT 35
23537: PPUSH
23538: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23542: LD_VAR 0 2
23546: PPUSH
23547: CALL_OW 302
23551: NOT
23552: PUSH
23553: LD_VAR 0 2
23557: PPUSH
23558: LD_INT 10
23560: PPUSH
23561: CALL_OW 308
23565: OR
23566: IFFALSE 23535
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23568: LD_ADDR_EXP 54
23572: PUSH
23573: LD_EXP 54
23577: PPUSH
23578: LD_EXP 54
23582: PUSH
23583: LD_INT 1
23585: PLUS
23586: PPUSH
23587: LD_VAR 0 2
23591: PPUSH
23592: CALL_OW 1
23596: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23597: LD_ADDR_VAR 0 4
23601: PUSH
23602: LD_INT 10
23604: PPUSH
23605: LD_INT 22
23607: PUSH
23608: LD_INT 3
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 50
23617: PUSH
23618: EMPTY
23619: LIST
23620: PUSH
23621: LD_INT 2
23623: PUSH
23624: LD_INT 30
23626: PUSH
23627: LD_INT 4
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 30
23636: PUSH
23637: LD_INT 5
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 30
23646: PUSH
23647: LD_INT 32
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 30
23656: PUSH
23657: LD_INT 31
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: PPUSH
23676: CALL_OW 70
23680: ST_TO_ADDR
// if not tmp then
23681: LD_VAR 0 4
23685: NOT
23686: IFFALSE 23705
// begin ComMoveXY ( un , 83 , 133 ) ;
23688: LD_VAR 0 2
23692: PPUSH
23693: LD_INT 83
23695: PPUSH
23696: LD_INT 133
23698: PPUSH
23699: CALL_OW 111
// exit ;
23703: GO 24083
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23705: LD_ADDR_VAR 0 5
23709: PUSH
23710: LD_VAR 0 2
23714: PPUSH
23715: LD_VAR 0 4
23719: PPUSH
23720: LD_INT 1
23722: PPUSH
23723: LD_INT 1
23725: PPUSH
23726: CALL 29990 0 4
23730: PUSH
23731: FOR_IN
23732: IFFALSE 23832
// begin case GetBType ( b ) of b_armoury , b_barracks :
23734: LD_VAR 0 5
23738: PPUSH
23739: CALL_OW 266
23743: PUSH
23744: LD_INT 4
23746: DOUBLE
23747: EQUAL
23748: IFTRUE 23758
23750: LD_INT 5
23752: DOUBLE
23753: EQUAL
23754: IFTRUE 23758
23756: GO 23769
23758: POP
// p := 6 ; b_breastwork , b_bunker :
23759: LD_ADDR_VAR 0 3
23763: PUSH
23764: LD_INT 6
23766: ST_TO_ADDR
23767: GO 23795
23769: LD_INT 31
23771: DOUBLE
23772: EQUAL
23773: IFTRUE 23783
23775: LD_INT 32
23777: DOUBLE
23778: EQUAL
23779: IFTRUE 23783
23781: GO 23794
23783: POP
// p := 1 ; end ;
23784: LD_ADDR_VAR 0 3
23788: PUSH
23789: LD_INT 1
23791: ST_TO_ADDR
23792: GO 23795
23794: POP
// if UnitsInside ( b ) < p then
23795: LD_VAR 0 5
23799: PPUSH
23800: CALL_OW 313
23804: PUSH
23805: LD_VAR 0 3
23809: LESS
23810: IFFALSE 23830
// begin ComEnterUnit ( un , b ) ;
23812: LD_VAR 0 2
23816: PPUSH
23817: LD_VAR 0 5
23821: PPUSH
23822: CALL_OW 120
// exit ;
23826: POP
23827: POP
23828: GO 24083
// end ; end ;
23830: GO 23731
23832: POP
23833: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
23834: LD_VAR 0 2
23838: PUSH
23839: LD_EXP 54
23843: IN
23844: PUSH
23845: LD_VAR 0 2
23849: PPUSH
23850: CALL_OW 257
23854: PUSH
23855: LD_INT 1
23857: EQUAL
23858: AND
23859: IFFALSE 24083
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23861: LD_ADDR_VAR 0 4
23865: PUSH
23866: LD_INT 10
23868: PPUSH
23869: LD_INT 22
23871: PUSH
23872: LD_INT 3
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 50
23881: PUSH
23882: EMPTY
23883: LIST
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: LD_INT 30
23890: PUSH
23891: LD_INT 4
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 30
23900: PUSH
23901: LD_INT 5
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 30
23910: PUSH
23911: LD_INT 32
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 30
23920: PUSH
23921: LD_INT 31
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: PPUSH
23940: CALL_OW 70
23944: ST_TO_ADDR
// if not tmp then
23945: LD_VAR 0 4
23949: NOT
23950: IFFALSE 23954
// exit ;
23952: GO 24083
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
23954: LD_ADDR_VAR 0 5
23958: PUSH
23959: LD_VAR 0 2
23963: PPUSH
23964: LD_VAR 0 4
23968: PPUSH
23969: LD_INT 1
23971: PPUSH
23972: LD_INT 1
23974: PPUSH
23975: CALL 29990 0 4
23979: PUSH
23980: FOR_IN
23981: IFFALSE 24081
// begin case GetBType ( b ) of b_armoury , b_barracks :
23983: LD_VAR 0 5
23987: PPUSH
23988: CALL_OW 266
23992: PUSH
23993: LD_INT 4
23995: DOUBLE
23996: EQUAL
23997: IFTRUE 24007
23999: LD_INT 5
24001: DOUBLE
24002: EQUAL
24003: IFTRUE 24007
24005: GO 24018
24007: POP
// p := 6 ; b_breastwork , b_bunker :
24008: LD_ADDR_VAR 0 3
24012: PUSH
24013: LD_INT 6
24015: ST_TO_ADDR
24016: GO 24044
24018: LD_INT 31
24020: DOUBLE
24021: EQUAL
24022: IFTRUE 24032
24024: LD_INT 32
24026: DOUBLE
24027: EQUAL
24028: IFTRUE 24032
24030: GO 24043
24032: POP
// p := 1 ; end ;
24033: LD_ADDR_VAR 0 3
24037: PUSH
24038: LD_INT 1
24040: ST_TO_ADDR
24041: GO 24044
24043: POP
// if UnitsInside ( b ) < p then
24044: LD_VAR 0 5
24048: PPUSH
24049: CALL_OW 313
24053: PUSH
24054: LD_VAR 0 3
24058: LESS
24059: IFFALSE 24079
// begin ComEnterUnit ( un , b ) ;
24061: LD_VAR 0 2
24065: PPUSH
24066: LD_VAR 0 5
24070: PPUSH
24071: CALL_OW 120
// exit ;
24075: POP
24076: POP
24077: GO 24083
// end ; end ;
24079: GO 23980
24081: POP
24082: POP
// end ; end ;
24083: PPOPN 5
24085: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24086: LD_VAR 0 1
24090: PUSH
24091: LD_INT 2
24093: EQUAL
24094: PUSH
24095: LD_VAR 0 2
24099: PUSH
24100: LD_INT 5
24102: PUSH
24103: LD_INT 8
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: IN
24110: AND
24111: IFFALSE 24120
// YouLost ( FriendlyFire ) ;
24113: LD_STRING FriendlyFire
24115: PPUSH
24116: CALL_OW 104
// end ;
24120: PPOPN 2
24122: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24123: LD_VAR 0 1
24127: PPUSH
24128: CALL_OW 255
24132: PUSH
24133: LD_INT 8
24135: EQUAL
24136: PUSH
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 266
24146: PUSH
24147: LD_INT 5
24149: EQUAL
24150: AND
24151: IFFALSE 24165
// SetClass ( unit , class_mortar ) ;
24153: LD_VAR 0 2
24157: PPUSH
24158: LD_INT 8
24160: PPUSH
24161: CALL_OW 336
// end ; end_of_file
24165: PPOPN 2
24167: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
24168: LD_INT 6
24170: PPUSH
24171: LD_INT 1
24173: PPUSH
24174: CALL_OW 287
24178: PUSH
24179: LD_INT 300
24181: PUSH
24182: LD_INT 250
24184: PUSH
24185: LD_INT 200
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: PUSH
24193: LD_OWVAR 67
24197: ARRAY
24198: LESS
24199: IFFALSE 24226
24201: GO 24203
24203: DISABLE
// begin enable ;
24204: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24205: LD_INT 1
24207: PPUSH
24208: LD_INT 5
24210: PPUSH
24211: CALL_OW 12
24215: PPUSH
24216: LD_INT 6
24218: PPUSH
24219: LD_INT 1
24221: PPUSH
24222: CALL_OW 55
// end ; end_of_file
24226: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24227: LD_EXP 18
24231: PUSH
24232: LD_EXP 20
24236: AND
24237: PUSH
24238: LD_EXP 17
24242: PUSH
24243: LD_EXP 19
24247: AND
24248: OR
24249: IFFALSE 24568
24251: GO 24253
24253: DISABLE
// begin enable ;
24254: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24255: LD_EXP 18
24259: PUSH
24260: LD_EXP 20
24264: AND
24265: PUSH
24266: LD_EXP 17
24270: PUSH
24271: LD_EXP 19
24275: AND
24276: AND
24277: IFFALSE 24414
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24279: LD_ADDR_OWVAR 47
24283: PUSH
24284: LD_STRING #X106-1a
24286: PUSH
24287: LD_EXP 21
24291: PUSH
24292: LD_INT 16
24294: PPUSH
24295: LD_INT 22
24297: PUSH
24298: LD_INT 2
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 21
24307: PUSH
24308: LD_INT 2
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 33
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 58
24327: PUSH
24328: EMPTY
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: PPUSH
24337: CALL_OW 70
24341: MINUS
24342: PPUSH
24343: CALL 63284 0 1
24347: PUSH
24348: LD_STRING #X106-3a
24350: PUSH
24351: LD_EXP 20
24355: PUSH
24356: LD_STRING #X106-1
24358: PUSH
24359: LD_EXP 46
24363: PUSH
24364: LD_INT 0
24366: PLUS
24367: PUSH
24368: LD_EXP 46
24372: PPUSH
24373: LD_INT 55
24375: PUSH
24376: EMPTY
24377: LIST
24378: PPUSH
24379: CALL_OW 72
24383: PUSH
24384: LD_INT 0
24386: PLUS
24387: MINUS
24388: PPUSH
24389: CALL 63284 0 1
24393: PUSH
24394: LD_STRING #X106-3
24396: PUSH
24397: LD_EXP 19
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: ST_TO_ADDR
// end else
24412: GO 24568
// if omarWantVehicles and omarWaitingForVehiclesTimer then
24414: LD_EXP 18
24418: PUSH
24419: LD_EXP 20
24423: AND
24424: IFFALSE 24511
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
24426: LD_ADDR_OWVAR 47
24430: PUSH
24431: LD_STRING #X106-1a
24433: PUSH
24434: LD_EXP 21
24438: PUSH
24439: LD_INT 16
24441: PPUSH
24442: LD_INT 22
24444: PUSH
24445: LD_INT 2
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 21
24454: PUSH
24455: LD_INT 2
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 33
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 58
24474: PUSH
24475: EMPTY
24476: LIST
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: PPUSH
24484: CALL_OW 70
24488: MINUS
24489: PPUSH
24490: CALL 63284 0 1
24494: PUSH
24495: LD_STRING #X106-3a
24497: PUSH
24498: LD_EXP 20
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: ST_TO_ADDR
// end else
24509: GO 24568
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24511: LD_ADDR_OWVAR 47
24515: PUSH
24516: LD_STRING #X106-1
24518: PUSH
24519: LD_EXP 46
24523: PUSH
24524: LD_INT 0
24526: PLUS
24527: PUSH
24528: LD_EXP 46
24532: PPUSH
24533: LD_INT 55
24535: PUSH
24536: EMPTY
24537: LIST
24538: PPUSH
24539: CALL_OW 72
24543: PUSH
24544: LD_INT 0
24546: PLUS
24547: MINUS
24548: PPUSH
24549: CALL 63284 0 1
24553: PUSH
24554: LD_STRING #X106-3
24556: PUSH
24557: LD_EXP 19
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: ST_TO_ADDR
// end ; end ; end_of_file
24568: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24569: LD_INT 0
24571: PPUSH
24572: PPUSH
// if exist_mode then
24573: LD_VAR 0 2
24577: IFFALSE 24602
// unit := CreateCharacter ( prefix & ident ) else
24579: LD_ADDR_VAR 0 5
24583: PUSH
24584: LD_VAR 0 3
24588: PUSH
24589: LD_VAR 0 1
24593: STR
24594: PPUSH
24595: CALL_OW 34
24599: ST_TO_ADDR
24600: GO 24617
// unit := NewCharacter ( ident ) ;
24602: LD_ADDR_VAR 0 5
24606: PUSH
24607: LD_VAR 0 1
24611: PPUSH
24612: CALL_OW 25
24616: ST_TO_ADDR
// result := unit ;
24617: LD_ADDR_VAR 0 4
24621: PUSH
24622: LD_VAR 0 5
24626: ST_TO_ADDR
// end ;
24627: LD_VAR 0 4
24631: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24632: LD_INT 0
24634: PPUSH
24635: PPUSH
// if not side or not nation then
24636: LD_VAR 0 1
24640: NOT
24641: PUSH
24642: LD_VAR 0 2
24646: NOT
24647: OR
24648: IFFALSE 24652
// exit ;
24650: GO 25420
// case nation of nation_american :
24652: LD_VAR 0 2
24656: PUSH
24657: LD_INT 1
24659: DOUBLE
24660: EQUAL
24661: IFTRUE 24665
24663: GO 24879
24665: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24666: LD_ADDR_VAR 0 4
24670: PUSH
24671: LD_INT 35
24673: PUSH
24674: LD_INT 45
24676: PUSH
24677: LD_INT 46
24679: PUSH
24680: LD_INT 47
24682: PUSH
24683: LD_INT 82
24685: PUSH
24686: LD_INT 83
24688: PUSH
24689: LD_INT 84
24691: PUSH
24692: LD_INT 85
24694: PUSH
24695: LD_INT 86
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 6
24706: PUSH
24707: LD_INT 15
24709: PUSH
24710: LD_INT 16
24712: PUSH
24713: LD_INT 7
24715: PUSH
24716: LD_INT 12
24718: PUSH
24719: LD_INT 13
24721: PUSH
24722: LD_INT 10
24724: PUSH
24725: LD_INT 14
24727: PUSH
24728: LD_INT 20
24730: PUSH
24731: LD_INT 21
24733: PUSH
24734: LD_INT 22
24736: PUSH
24737: LD_INT 25
24739: PUSH
24740: LD_INT 32
24742: PUSH
24743: LD_INT 27
24745: PUSH
24746: LD_INT 36
24748: PUSH
24749: LD_INT 69
24751: PUSH
24752: LD_INT 39
24754: PUSH
24755: LD_INT 34
24757: PUSH
24758: LD_INT 40
24760: PUSH
24761: LD_INT 48
24763: PUSH
24764: LD_INT 49
24766: PUSH
24767: LD_INT 50
24769: PUSH
24770: LD_INT 51
24772: PUSH
24773: LD_INT 52
24775: PUSH
24776: LD_INT 53
24778: PUSH
24779: LD_INT 54
24781: PUSH
24782: LD_INT 55
24784: PUSH
24785: LD_INT 56
24787: PUSH
24788: LD_INT 57
24790: PUSH
24791: LD_INT 58
24793: PUSH
24794: LD_INT 59
24796: PUSH
24797: LD_INT 60
24799: PUSH
24800: LD_INT 61
24802: PUSH
24803: LD_INT 62
24805: PUSH
24806: LD_INT 80
24808: PUSH
24809: LD_INT 82
24811: PUSH
24812: LD_INT 83
24814: PUSH
24815: LD_INT 84
24817: PUSH
24818: LD_INT 85
24820: PUSH
24821: LD_INT 86
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: ST_TO_ADDR
24877: GO 25344
24879: LD_INT 2
24881: DOUBLE
24882: EQUAL
24883: IFTRUE 24887
24885: GO 25113
24887: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24888: LD_ADDR_VAR 0 4
24892: PUSH
24893: LD_INT 35
24895: PUSH
24896: LD_INT 45
24898: PUSH
24899: LD_INT 46
24901: PUSH
24902: LD_INT 47
24904: PUSH
24905: LD_INT 82
24907: PUSH
24908: LD_INT 83
24910: PUSH
24911: LD_INT 84
24913: PUSH
24914: LD_INT 85
24916: PUSH
24917: LD_INT 87
24919: PUSH
24920: LD_INT 70
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 11
24928: PUSH
24929: LD_INT 3
24931: PUSH
24932: LD_INT 4
24934: PUSH
24935: LD_INT 5
24937: PUSH
24938: LD_INT 6
24940: PUSH
24941: LD_INT 15
24943: PUSH
24944: LD_INT 18
24946: PUSH
24947: LD_INT 7
24949: PUSH
24950: LD_INT 17
24952: PUSH
24953: LD_INT 8
24955: PUSH
24956: LD_INT 20
24958: PUSH
24959: LD_INT 21
24961: PUSH
24962: LD_INT 22
24964: PUSH
24965: LD_INT 72
24967: PUSH
24968: LD_INT 26
24970: PUSH
24971: LD_INT 69
24973: PUSH
24974: LD_INT 39
24976: PUSH
24977: LD_INT 40
24979: PUSH
24980: LD_INT 41
24982: PUSH
24983: LD_INT 42
24985: PUSH
24986: LD_INT 43
24988: PUSH
24989: LD_INT 48
24991: PUSH
24992: LD_INT 49
24994: PUSH
24995: LD_INT 50
24997: PUSH
24998: LD_INT 51
25000: PUSH
25001: LD_INT 52
25003: PUSH
25004: LD_INT 53
25006: PUSH
25007: LD_INT 54
25009: PUSH
25010: LD_INT 55
25012: PUSH
25013: LD_INT 56
25015: PUSH
25016: LD_INT 60
25018: PUSH
25019: LD_INT 61
25021: PUSH
25022: LD_INT 62
25024: PUSH
25025: LD_INT 66
25027: PUSH
25028: LD_INT 67
25030: PUSH
25031: LD_INT 68
25033: PUSH
25034: LD_INT 81
25036: PUSH
25037: LD_INT 82
25039: PUSH
25040: LD_INT 83
25042: PUSH
25043: LD_INT 84
25045: PUSH
25046: LD_INT 85
25048: PUSH
25049: LD_INT 87
25051: PUSH
25052: LD_INT 88
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: ST_TO_ADDR
25111: GO 25344
25113: LD_INT 3
25115: DOUBLE
25116: EQUAL
25117: IFTRUE 25121
25119: GO 25343
25121: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25122: LD_ADDR_VAR 0 4
25126: PUSH
25127: LD_INT 46
25129: PUSH
25130: LD_INT 47
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 2
25138: PUSH
25139: LD_INT 82
25141: PUSH
25142: LD_INT 83
25144: PUSH
25145: LD_INT 84
25147: PUSH
25148: LD_INT 85
25150: PUSH
25151: LD_INT 86
25153: PUSH
25154: LD_INT 11
25156: PUSH
25157: LD_INT 9
25159: PUSH
25160: LD_INT 20
25162: PUSH
25163: LD_INT 19
25165: PUSH
25166: LD_INT 21
25168: PUSH
25169: LD_INT 24
25171: PUSH
25172: LD_INT 22
25174: PUSH
25175: LD_INT 25
25177: PUSH
25178: LD_INT 28
25180: PUSH
25181: LD_INT 29
25183: PUSH
25184: LD_INT 30
25186: PUSH
25187: LD_INT 31
25189: PUSH
25190: LD_INT 37
25192: PUSH
25193: LD_INT 38
25195: PUSH
25196: LD_INT 32
25198: PUSH
25199: LD_INT 27
25201: PUSH
25202: LD_INT 33
25204: PUSH
25205: LD_INT 69
25207: PUSH
25208: LD_INT 39
25210: PUSH
25211: LD_INT 34
25213: PUSH
25214: LD_INT 40
25216: PUSH
25217: LD_INT 71
25219: PUSH
25220: LD_INT 23
25222: PUSH
25223: LD_INT 44
25225: PUSH
25226: LD_INT 48
25228: PUSH
25229: LD_INT 49
25231: PUSH
25232: LD_INT 50
25234: PUSH
25235: LD_INT 51
25237: PUSH
25238: LD_INT 52
25240: PUSH
25241: LD_INT 53
25243: PUSH
25244: LD_INT 54
25246: PUSH
25247: LD_INT 55
25249: PUSH
25250: LD_INT 56
25252: PUSH
25253: LD_INT 57
25255: PUSH
25256: LD_INT 58
25258: PUSH
25259: LD_INT 59
25261: PUSH
25262: LD_INT 63
25264: PUSH
25265: LD_INT 64
25267: PUSH
25268: LD_INT 65
25270: PUSH
25271: LD_INT 82
25273: PUSH
25274: LD_INT 83
25276: PUSH
25277: LD_INT 84
25279: PUSH
25280: LD_INT 85
25282: PUSH
25283: LD_INT 86
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: ST_TO_ADDR
25341: GO 25344
25343: POP
// if state > - 1 and state < 3 then
25344: LD_VAR 0 3
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: GREATER
25353: PUSH
25354: LD_VAR 0 3
25358: PUSH
25359: LD_INT 3
25361: LESS
25362: AND
25363: IFFALSE 25420
// for i in result do
25365: LD_ADDR_VAR 0 5
25369: PUSH
25370: LD_VAR 0 4
25374: PUSH
25375: FOR_IN
25376: IFFALSE 25418
// if GetTech ( i , side ) <> state then
25378: LD_VAR 0 5
25382: PPUSH
25383: LD_VAR 0 1
25387: PPUSH
25388: CALL_OW 321
25392: PUSH
25393: LD_VAR 0 3
25397: NONEQUAL
25398: IFFALSE 25416
// result := result diff i ;
25400: LD_ADDR_VAR 0 4
25404: PUSH
25405: LD_VAR 0 4
25409: PUSH
25410: LD_VAR 0 5
25414: DIFF
25415: ST_TO_ADDR
25416: GO 25375
25418: POP
25419: POP
// end ;
25420: LD_VAR 0 4
25424: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25425: LD_INT 0
25427: PPUSH
25428: PPUSH
25429: PPUSH
// result := true ;
25430: LD_ADDR_VAR 0 3
25434: PUSH
25435: LD_INT 1
25437: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25438: LD_ADDR_VAR 0 5
25442: PUSH
25443: LD_VAR 0 2
25447: PPUSH
25448: CALL_OW 480
25452: ST_TO_ADDR
// if not tmp then
25453: LD_VAR 0 5
25457: NOT
25458: IFFALSE 25462
// exit ;
25460: GO 25511
// for i in tmp do
25462: LD_ADDR_VAR 0 4
25466: PUSH
25467: LD_VAR 0 5
25471: PUSH
25472: FOR_IN
25473: IFFALSE 25509
// if GetTech ( i , side ) <> state_researched then
25475: LD_VAR 0 4
25479: PPUSH
25480: LD_VAR 0 1
25484: PPUSH
25485: CALL_OW 321
25489: PUSH
25490: LD_INT 2
25492: NONEQUAL
25493: IFFALSE 25507
// begin result := false ;
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_INT 0
25502: ST_TO_ADDR
// exit ;
25503: POP
25504: POP
25505: GO 25511
// end ;
25507: GO 25472
25509: POP
25510: POP
// end ;
25511: LD_VAR 0 3
25515: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25516: LD_INT 0
25518: PPUSH
25519: PPUSH
25520: PPUSH
25521: PPUSH
25522: PPUSH
25523: PPUSH
25524: PPUSH
25525: PPUSH
25526: PPUSH
25527: PPUSH
25528: PPUSH
25529: PPUSH
25530: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25531: LD_VAR 0 1
25535: NOT
25536: PUSH
25537: LD_VAR 0 1
25541: PPUSH
25542: CALL_OW 257
25546: PUSH
25547: LD_INT 9
25549: NONEQUAL
25550: OR
25551: IFFALSE 25555
// exit ;
25553: GO 26128
// side := GetSide ( unit ) ;
25555: LD_ADDR_VAR 0 9
25559: PUSH
25560: LD_VAR 0 1
25564: PPUSH
25565: CALL_OW 255
25569: ST_TO_ADDR
// tech_space := tech_spacanom ;
25570: LD_ADDR_VAR 0 12
25574: PUSH
25575: LD_INT 29
25577: ST_TO_ADDR
// tech_time := tech_taurad ;
25578: LD_ADDR_VAR 0 13
25582: PUSH
25583: LD_INT 28
25585: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25586: LD_ADDR_VAR 0 11
25590: PUSH
25591: LD_VAR 0 1
25595: PPUSH
25596: CALL_OW 310
25600: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25601: LD_VAR 0 11
25605: PPUSH
25606: CALL_OW 247
25610: PUSH
25611: LD_INT 2
25613: EQUAL
25614: IFFALSE 25618
// exit ;
25616: GO 26128
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25618: LD_ADDR_VAR 0 8
25622: PUSH
25623: LD_INT 81
25625: PUSH
25626: LD_VAR 0 9
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 3
25637: PUSH
25638: LD_INT 21
25640: PUSH
25641: LD_INT 3
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PPUSH
25656: CALL_OW 69
25660: ST_TO_ADDR
// if not tmp then
25661: LD_VAR 0 8
25665: NOT
25666: IFFALSE 25670
// exit ;
25668: GO 26128
// if in_unit then
25670: LD_VAR 0 11
25674: IFFALSE 25698
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25676: LD_ADDR_VAR 0 10
25680: PUSH
25681: LD_VAR 0 8
25685: PPUSH
25686: LD_VAR 0 11
25690: PPUSH
25691: CALL_OW 74
25695: ST_TO_ADDR
25696: GO 25718
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25698: LD_ADDR_VAR 0 10
25702: PUSH
25703: LD_VAR 0 8
25707: PPUSH
25708: LD_VAR 0 1
25712: PPUSH
25713: CALL_OW 74
25717: ST_TO_ADDR
// if not enemy then
25718: LD_VAR 0 10
25722: NOT
25723: IFFALSE 25727
// exit ;
25725: GO 26128
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25727: LD_VAR 0 11
25731: PUSH
25732: LD_VAR 0 11
25736: PPUSH
25737: LD_VAR 0 10
25741: PPUSH
25742: CALL_OW 296
25746: PUSH
25747: LD_INT 13
25749: GREATER
25750: AND
25751: PUSH
25752: LD_VAR 0 1
25756: PPUSH
25757: LD_VAR 0 10
25761: PPUSH
25762: CALL_OW 296
25766: PUSH
25767: LD_INT 12
25769: GREATER
25770: OR
25771: IFFALSE 25775
// exit ;
25773: GO 26128
// missile := [ 1 ] ;
25775: LD_ADDR_VAR 0 14
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: EMPTY
25784: LIST
25785: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25786: LD_VAR 0 9
25790: PPUSH
25791: LD_VAR 0 12
25795: PPUSH
25796: CALL_OW 325
25800: IFFALSE 25829
// missile := Insert ( missile , missile + 1 , 2 ) ;
25802: LD_ADDR_VAR 0 14
25806: PUSH
25807: LD_VAR 0 14
25811: PPUSH
25812: LD_VAR 0 14
25816: PUSH
25817: LD_INT 1
25819: PLUS
25820: PPUSH
25821: LD_INT 2
25823: PPUSH
25824: CALL_OW 2
25828: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25829: LD_VAR 0 9
25833: PPUSH
25834: LD_VAR 0 13
25838: PPUSH
25839: CALL_OW 325
25843: PUSH
25844: LD_VAR 0 10
25848: PPUSH
25849: CALL_OW 255
25853: PPUSH
25854: LD_VAR 0 13
25858: PPUSH
25859: CALL_OW 325
25863: NOT
25864: AND
25865: IFFALSE 25894
// missile := Insert ( missile , missile + 1 , 3 ) ;
25867: LD_ADDR_VAR 0 14
25871: PUSH
25872: LD_VAR 0 14
25876: PPUSH
25877: LD_VAR 0 14
25881: PUSH
25882: LD_INT 1
25884: PLUS
25885: PPUSH
25886: LD_INT 3
25888: PPUSH
25889: CALL_OW 2
25893: ST_TO_ADDR
// if missile < 2 then
25894: LD_VAR 0 14
25898: PUSH
25899: LD_INT 2
25901: LESS
25902: IFFALSE 25906
// exit ;
25904: GO 26128
// x := GetX ( enemy ) ;
25906: LD_ADDR_VAR 0 4
25910: PUSH
25911: LD_VAR 0 10
25915: PPUSH
25916: CALL_OW 250
25920: ST_TO_ADDR
// y := GetY ( enemy ) ;
25921: LD_ADDR_VAR 0 5
25925: PUSH
25926: LD_VAR 0 10
25930: PPUSH
25931: CALL_OW 251
25935: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25936: LD_ADDR_VAR 0 6
25940: PUSH
25941: LD_VAR 0 4
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PPUSH
25950: LD_INT 1
25952: PPUSH
25953: CALL_OW 12
25957: PLUS
25958: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25959: LD_ADDR_VAR 0 7
25963: PUSH
25964: LD_VAR 0 5
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PPUSH
25973: LD_INT 1
25975: PPUSH
25976: CALL_OW 12
25980: PLUS
25981: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25982: LD_VAR 0 6
25986: PPUSH
25987: LD_VAR 0 7
25991: PPUSH
25992: CALL_OW 488
25996: NOT
25997: IFFALSE 26019
// begin _x := x ;
25999: LD_ADDR_VAR 0 6
26003: PUSH
26004: LD_VAR 0 4
26008: ST_TO_ADDR
// _y := y ;
26009: LD_ADDR_VAR 0 7
26013: PUSH
26014: LD_VAR 0 5
26018: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26019: LD_ADDR_VAR 0 3
26023: PUSH
26024: LD_INT 1
26026: PPUSH
26027: LD_VAR 0 14
26031: PPUSH
26032: CALL_OW 12
26036: ST_TO_ADDR
// case i of 1 :
26037: LD_VAR 0 3
26041: PUSH
26042: LD_INT 1
26044: DOUBLE
26045: EQUAL
26046: IFTRUE 26050
26048: GO 26067
26050: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26051: LD_VAR 0 1
26055: PPUSH
26056: LD_VAR 0 10
26060: PPUSH
26061: CALL_OW 115
26065: GO 26128
26067: LD_INT 2
26069: DOUBLE
26070: EQUAL
26071: IFTRUE 26075
26073: GO 26097
26075: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26076: LD_VAR 0 1
26080: PPUSH
26081: LD_VAR 0 6
26085: PPUSH
26086: LD_VAR 0 7
26090: PPUSH
26091: CALL_OW 153
26095: GO 26128
26097: LD_INT 3
26099: DOUBLE
26100: EQUAL
26101: IFTRUE 26105
26103: GO 26127
26105: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26106: LD_VAR 0 1
26110: PPUSH
26111: LD_VAR 0 6
26115: PPUSH
26116: LD_VAR 0 7
26120: PPUSH
26121: CALL_OW 154
26125: GO 26128
26127: POP
// end ;
26128: LD_VAR 0 2
26132: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26133: LD_INT 0
26135: PPUSH
26136: PPUSH
26137: PPUSH
26138: PPUSH
26139: PPUSH
26140: PPUSH
// if not unit or not building then
26141: LD_VAR 0 1
26145: NOT
26146: PUSH
26147: LD_VAR 0 2
26151: NOT
26152: OR
26153: IFFALSE 26157
// exit ;
26155: GO 26315
// x := GetX ( building ) ;
26157: LD_ADDR_VAR 0 5
26161: PUSH
26162: LD_VAR 0 2
26166: PPUSH
26167: CALL_OW 250
26171: ST_TO_ADDR
// y := GetY ( building ) ;
26172: LD_ADDR_VAR 0 6
26176: PUSH
26177: LD_VAR 0 2
26181: PPUSH
26182: CALL_OW 251
26186: ST_TO_ADDR
// for i = 0 to 5 do
26187: LD_ADDR_VAR 0 4
26191: PUSH
26192: DOUBLE
26193: LD_INT 0
26195: DEC
26196: ST_TO_ADDR
26197: LD_INT 5
26199: PUSH
26200: FOR_TO
26201: IFFALSE 26313
// begin _x := ShiftX ( x , i , 3 ) ;
26203: LD_ADDR_VAR 0 7
26207: PUSH
26208: LD_VAR 0 5
26212: PPUSH
26213: LD_VAR 0 4
26217: PPUSH
26218: LD_INT 3
26220: PPUSH
26221: CALL_OW 272
26225: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26226: LD_ADDR_VAR 0 8
26230: PUSH
26231: LD_VAR 0 6
26235: PPUSH
26236: LD_VAR 0 4
26240: PPUSH
26241: LD_INT 3
26243: PPUSH
26244: CALL_OW 273
26248: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26249: LD_VAR 0 7
26253: PPUSH
26254: LD_VAR 0 8
26258: PPUSH
26259: CALL_OW 488
26263: NOT
26264: IFFALSE 26268
// continue ;
26266: GO 26200
// if HexInfo ( _x , _y ) = 0 then
26268: LD_VAR 0 7
26272: PPUSH
26273: LD_VAR 0 8
26277: PPUSH
26278: CALL_OW 428
26282: PUSH
26283: LD_INT 0
26285: EQUAL
26286: IFFALSE 26311
// begin ComMoveXY ( unit , _x , _y ) ;
26288: LD_VAR 0 1
26292: PPUSH
26293: LD_VAR 0 7
26297: PPUSH
26298: LD_VAR 0 8
26302: PPUSH
26303: CALL_OW 111
// exit ;
26307: POP
26308: POP
26309: GO 26315
// end ; end ;
26311: GO 26200
26313: POP
26314: POP
// end ;
26315: LD_VAR 0 3
26319: RET
// export function ScanBase ( side , base_area ) ; begin
26320: LD_INT 0
26322: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26323: LD_ADDR_VAR 0 3
26327: PUSH
26328: LD_VAR 0 2
26332: PPUSH
26333: LD_INT 81
26335: PUSH
26336: LD_VAR 0 1
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PPUSH
26345: CALL_OW 70
26349: ST_TO_ADDR
// end ;
26350: LD_VAR 0 3
26354: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26355: LD_INT 0
26357: PPUSH
26358: PPUSH
26359: PPUSH
26360: PPUSH
// result := false ;
26361: LD_ADDR_VAR 0 2
26365: PUSH
26366: LD_INT 0
26368: ST_TO_ADDR
// side := GetSide ( unit ) ;
26369: LD_ADDR_VAR 0 3
26373: PUSH
26374: LD_VAR 0 1
26378: PPUSH
26379: CALL_OW 255
26383: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26384: LD_ADDR_VAR 0 4
26388: PUSH
26389: LD_VAR 0 1
26393: PPUSH
26394: CALL_OW 248
26398: ST_TO_ADDR
// case nat of 1 :
26399: LD_VAR 0 4
26403: PUSH
26404: LD_INT 1
26406: DOUBLE
26407: EQUAL
26408: IFTRUE 26412
26410: GO 26423
26412: POP
// tech := tech_lassight ; 2 :
26413: LD_ADDR_VAR 0 5
26417: PUSH
26418: LD_INT 12
26420: ST_TO_ADDR
26421: GO 26462
26423: LD_INT 2
26425: DOUBLE
26426: EQUAL
26427: IFTRUE 26431
26429: GO 26442
26431: POP
// tech := tech_mortar ; 3 :
26432: LD_ADDR_VAR 0 5
26436: PUSH
26437: LD_INT 41
26439: ST_TO_ADDR
26440: GO 26462
26442: LD_INT 3
26444: DOUBLE
26445: EQUAL
26446: IFTRUE 26450
26448: GO 26461
26450: POP
// tech := tech_bazooka ; end ;
26451: LD_ADDR_VAR 0 5
26455: PUSH
26456: LD_INT 44
26458: ST_TO_ADDR
26459: GO 26462
26461: POP
// if Researched ( side , tech ) then
26462: LD_VAR 0 3
26466: PPUSH
26467: LD_VAR 0 5
26471: PPUSH
26472: CALL_OW 325
26476: IFFALSE 26503
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26478: LD_ADDR_VAR 0 2
26482: PUSH
26483: LD_INT 5
26485: PUSH
26486: LD_INT 8
26488: PUSH
26489: LD_INT 9
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: PUSH
26497: LD_VAR 0 4
26501: ARRAY
26502: ST_TO_ADDR
// end ;
26503: LD_VAR 0 2
26507: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26508: LD_INT 0
26510: PPUSH
26511: PPUSH
26512: PPUSH
// if not mines then
26513: LD_VAR 0 2
26517: NOT
26518: IFFALSE 26522
// exit ;
26520: GO 26666
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26522: LD_ADDR_VAR 0 5
26526: PUSH
26527: LD_INT 81
26529: PUSH
26530: LD_VAR 0 1
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 3
26541: PUSH
26542: LD_INT 21
26544: PUSH
26545: LD_INT 3
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PPUSH
26560: CALL_OW 69
26564: ST_TO_ADDR
// for i in mines do
26565: LD_ADDR_VAR 0 4
26569: PUSH
26570: LD_VAR 0 2
26574: PUSH
26575: FOR_IN
26576: IFFALSE 26664
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26578: LD_VAR 0 4
26582: PUSH
26583: LD_INT 1
26585: ARRAY
26586: PPUSH
26587: LD_VAR 0 4
26591: PUSH
26592: LD_INT 2
26594: ARRAY
26595: PPUSH
26596: CALL_OW 458
26600: NOT
26601: IFFALSE 26605
// continue ;
26603: GO 26575
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26605: LD_VAR 0 4
26609: PUSH
26610: LD_INT 1
26612: ARRAY
26613: PPUSH
26614: LD_VAR 0 4
26618: PUSH
26619: LD_INT 2
26621: ARRAY
26622: PPUSH
26623: CALL_OW 428
26627: PUSH
26628: LD_VAR 0 5
26632: IN
26633: IFFALSE 26662
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26635: LD_VAR 0 4
26639: PUSH
26640: LD_INT 1
26642: ARRAY
26643: PPUSH
26644: LD_VAR 0 4
26648: PUSH
26649: LD_INT 2
26651: ARRAY
26652: PPUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 456
// end ;
26662: GO 26575
26664: POP
26665: POP
// end ;
26666: LD_VAR 0 3
26670: RET
// export function Count ( array ) ; var i ; begin
26671: LD_INT 0
26673: PPUSH
26674: PPUSH
// result := 0 ;
26675: LD_ADDR_VAR 0 2
26679: PUSH
26680: LD_INT 0
26682: ST_TO_ADDR
// for i in array do
26683: LD_ADDR_VAR 0 3
26687: PUSH
26688: LD_VAR 0 1
26692: PUSH
26693: FOR_IN
26694: IFFALSE 26718
// if i then
26696: LD_VAR 0 3
26700: IFFALSE 26716
// result := result + 1 ;
26702: LD_ADDR_VAR 0 2
26706: PUSH
26707: LD_VAR 0 2
26711: PUSH
26712: LD_INT 1
26714: PLUS
26715: ST_TO_ADDR
26716: GO 26693
26718: POP
26719: POP
// end ;
26720: LD_VAR 0 2
26724: RET
// export function IsEmpty ( building ) ; begin
26725: LD_INT 0
26727: PPUSH
// if not building then
26728: LD_VAR 0 1
26732: NOT
26733: IFFALSE 26737
// exit ;
26735: GO 26780
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26737: LD_ADDR_VAR 0 2
26741: PUSH
26742: LD_VAR 0 1
26746: PUSH
26747: LD_INT 22
26749: PUSH
26750: LD_VAR 0 1
26754: PPUSH
26755: CALL_OW 255
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 58
26766: PUSH
26767: EMPTY
26768: LIST
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PPUSH
26774: CALL_OW 69
26778: IN
26779: ST_TO_ADDR
// end ;
26780: LD_VAR 0 2
26784: RET
// export function IsNotFull ( building ) ; begin
26785: LD_INT 0
26787: PPUSH
// if not building then
26788: LD_VAR 0 1
26792: NOT
26793: IFFALSE 26797
// exit ;
26795: GO 26816
// result := UnitsInside ( building ) < 6 ;
26797: LD_ADDR_VAR 0 2
26801: PUSH
26802: LD_VAR 0 1
26806: PPUSH
26807: CALL_OW 313
26811: PUSH
26812: LD_INT 6
26814: LESS
26815: ST_TO_ADDR
// end ;
26816: LD_VAR 0 2
26820: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26821: LD_INT 0
26823: PPUSH
26824: PPUSH
26825: PPUSH
26826: PPUSH
// tmp := [ ] ;
26827: LD_ADDR_VAR 0 3
26831: PUSH
26832: EMPTY
26833: ST_TO_ADDR
// list := [ ] ;
26834: LD_ADDR_VAR 0 5
26838: PUSH
26839: EMPTY
26840: ST_TO_ADDR
// for i = 16 to 25 do
26841: LD_ADDR_VAR 0 4
26845: PUSH
26846: DOUBLE
26847: LD_INT 16
26849: DEC
26850: ST_TO_ADDR
26851: LD_INT 25
26853: PUSH
26854: FOR_TO
26855: IFFALSE 26928
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26857: LD_ADDR_VAR 0 3
26861: PUSH
26862: LD_VAR 0 3
26866: PUSH
26867: LD_INT 22
26869: PUSH
26870: LD_VAR 0 1
26874: PPUSH
26875: CALL_OW 255
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 91
26886: PUSH
26887: LD_VAR 0 1
26891: PUSH
26892: LD_INT 6
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 30
26902: PUSH
26903: LD_VAR 0 4
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: PPUSH
26920: CALL_OW 69
26924: ADD
26925: ST_TO_ADDR
26926: GO 26854
26928: POP
26929: POP
// for i = 1 to tmp do
26930: LD_ADDR_VAR 0 4
26934: PUSH
26935: DOUBLE
26936: LD_INT 1
26938: DEC
26939: ST_TO_ADDR
26940: LD_VAR 0 3
26944: PUSH
26945: FOR_TO
26946: IFFALSE 27034
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26948: LD_ADDR_VAR 0 5
26952: PUSH
26953: LD_VAR 0 5
26957: PUSH
26958: LD_VAR 0 3
26962: PUSH
26963: LD_VAR 0 4
26967: ARRAY
26968: PPUSH
26969: CALL_OW 266
26973: PUSH
26974: LD_VAR 0 3
26978: PUSH
26979: LD_VAR 0 4
26983: ARRAY
26984: PPUSH
26985: CALL_OW 250
26989: PUSH
26990: LD_VAR 0 3
26994: PUSH
26995: LD_VAR 0 4
26999: ARRAY
27000: PPUSH
27001: CALL_OW 251
27005: PUSH
27006: LD_VAR 0 3
27010: PUSH
27011: LD_VAR 0 4
27015: ARRAY
27016: PPUSH
27017: CALL_OW 254
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: PUSH
27028: EMPTY
27029: LIST
27030: ADD
27031: ST_TO_ADDR
27032: GO 26945
27034: POP
27035: POP
// result := list ;
27036: LD_ADDR_VAR 0 2
27040: PUSH
27041: LD_VAR 0 5
27045: ST_TO_ADDR
// end ;
27046: LD_VAR 0 2
27050: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27051: LD_INT 0
27053: PPUSH
27054: PPUSH
27055: PPUSH
27056: PPUSH
27057: PPUSH
27058: PPUSH
27059: PPUSH
// if not factory then
27060: LD_VAR 0 1
27064: NOT
27065: IFFALSE 27069
// exit ;
27067: GO 27662
// if control = control_apeman then
27069: LD_VAR 0 4
27073: PUSH
27074: LD_INT 5
27076: EQUAL
27077: IFFALSE 27186
// begin tmp := UnitsInside ( factory ) ;
27079: LD_ADDR_VAR 0 8
27083: PUSH
27084: LD_VAR 0 1
27088: PPUSH
27089: CALL_OW 313
27093: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27094: LD_VAR 0 8
27098: PPUSH
27099: LD_INT 25
27101: PUSH
27102: LD_INT 12
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PPUSH
27109: CALL_OW 72
27113: NOT
27114: IFFALSE 27124
// control := control_manual ;
27116: LD_ADDR_VAR 0 4
27120: PUSH
27121: LD_INT 1
27123: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27124: LD_ADDR_VAR 0 8
27128: PUSH
27129: LD_VAR 0 1
27133: PPUSH
27134: CALL 26821 0 1
27138: ST_TO_ADDR
// if tmp then
27139: LD_VAR 0 8
27143: IFFALSE 27186
// begin for i in tmp do
27145: LD_ADDR_VAR 0 7
27149: PUSH
27150: LD_VAR 0 8
27154: PUSH
27155: FOR_IN
27156: IFFALSE 27184
// if i [ 1 ] = b_ext_radio then
27158: LD_VAR 0 7
27162: PUSH
27163: LD_INT 1
27165: ARRAY
27166: PUSH
27167: LD_INT 22
27169: EQUAL
27170: IFFALSE 27182
// begin control := control_remote ;
27172: LD_ADDR_VAR 0 4
27176: PUSH
27177: LD_INT 2
27179: ST_TO_ADDR
// break ;
27180: GO 27184
// end ;
27182: GO 27155
27184: POP
27185: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27186: LD_VAR 0 1
27190: PPUSH
27191: LD_VAR 0 2
27195: PPUSH
27196: LD_VAR 0 3
27200: PPUSH
27201: LD_VAR 0 4
27205: PPUSH
27206: LD_VAR 0 5
27210: PPUSH
27211: CALL_OW 448
27215: IFFALSE 27250
// begin result := [ chassis , engine , control , weapon ] ;
27217: LD_ADDR_VAR 0 6
27221: PUSH
27222: LD_VAR 0 2
27226: PUSH
27227: LD_VAR 0 3
27231: PUSH
27232: LD_VAR 0 4
27236: PUSH
27237: LD_VAR 0 5
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: ST_TO_ADDR
// exit ;
27248: GO 27662
// end ; _chassis := AvailableChassisList ( factory ) ;
27250: LD_ADDR_VAR 0 9
27254: PUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL_OW 475
27264: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27265: LD_ADDR_VAR 0 11
27269: PUSH
27270: LD_VAR 0 1
27274: PPUSH
27275: CALL_OW 476
27279: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27280: LD_ADDR_VAR 0 12
27284: PUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 477
27294: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27295: LD_ADDR_VAR 0 10
27299: PUSH
27300: LD_VAR 0 1
27304: PPUSH
27305: CALL_OW 478
27309: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27310: LD_VAR 0 9
27314: NOT
27315: PUSH
27316: LD_VAR 0 11
27320: NOT
27321: OR
27322: PUSH
27323: LD_VAR 0 12
27327: NOT
27328: OR
27329: PUSH
27330: LD_VAR 0 10
27334: NOT
27335: OR
27336: IFFALSE 27371
// begin result := [ chassis , engine , control , weapon ] ;
27338: LD_ADDR_VAR 0 6
27342: PUSH
27343: LD_VAR 0 2
27347: PUSH
27348: LD_VAR 0 3
27352: PUSH
27353: LD_VAR 0 4
27357: PUSH
27358: LD_VAR 0 5
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: ST_TO_ADDR
// exit ;
27369: GO 27662
// end ; if not chassis in _chassis then
27371: LD_VAR 0 2
27375: PUSH
27376: LD_VAR 0 9
27380: IN
27381: NOT
27382: IFFALSE 27408
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27384: LD_ADDR_VAR 0 2
27388: PUSH
27389: LD_VAR 0 9
27393: PUSH
27394: LD_INT 1
27396: PPUSH
27397: LD_VAR 0 9
27401: PPUSH
27402: CALL_OW 12
27406: ARRAY
27407: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27408: LD_VAR 0 2
27412: PPUSH
27413: LD_VAR 0 3
27417: PPUSH
27418: CALL 27667 0 2
27422: NOT
27423: IFFALSE 27482
// repeat engine := _engine [ 1 ] ;
27425: LD_ADDR_VAR 0 3
27429: PUSH
27430: LD_VAR 0 11
27434: PUSH
27435: LD_INT 1
27437: ARRAY
27438: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27439: LD_ADDR_VAR 0 11
27443: PUSH
27444: LD_VAR 0 11
27448: PPUSH
27449: LD_INT 1
27451: PPUSH
27452: CALL_OW 3
27456: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27457: LD_VAR 0 2
27461: PPUSH
27462: LD_VAR 0 3
27466: PPUSH
27467: CALL 27667 0 2
27471: PUSH
27472: LD_VAR 0 11
27476: PUSH
27477: EMPTY
27478: EQUAL
27479: OR
27480: IFFALSE 27425
// if not control in _control then
27482: LD_VAR 0 4
27486: PUSH
27487: LD_VAR 0 12
27491: IN
27492: NOT
27493: IFFALSE 27519
// control := _control [ rand ( 1 , _control ) ] ;
27495: LD_ADDR_VAR 0 4
27499: PUSH
27500: LD_VAR 0 12
27504: PUSH
27505: LD_INT 1
27507: PPUSH
27508: LD_VAR 0 12
27512: PPUSH
27513: CALL_OW 12
27517: ARRAY
27518: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27519: LD_VAR 0 2
27523: PPUSH
27524: LD_VAR 0 5
27528: PPUSH
27529: CALL 27887 0 2
27533: NOT
27534: IFFALSE 27593
// repeat weapon := _weapon [ 1 ] ;
27536: LD_ADDR_VAR 0 5
27540: PUSH
27541: LD_VAR 0 10
27545: PUSH
27546: LD_INT 1
27548: ARRAY
27549: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27550: LD_ADDR_VAR 0 10
27554: PUSH
27555: LD_VAR 0 10
27559: PPUSH
27560: LD_INT 1
27562: PPUSH
27563: CALL_OW 3
27567: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27568: LD_VAR 0 2
27572: PPUSH
27573: LD_VAR 0 5
27577: PPUSH
27578: CALL 27887 0 2
27582: PUSH
27583: LD_VAR 0 10
27587: PUSH
27588: EMPTY
27589: EQUAL
27590: OR
27591: IFFALSE 27536
// result := [ ] ;
27593: LD_ADDR_VAR 0 6
27597: PUSH
27598: EMPTY
27599: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27600: LD_VAR 0 1
27604: PPUSH
27605: LD_VAR 0 2
27609: PPUSH
27610: LD_VAR 0 3
27614: PPUSH
27615: LD_VAR 0 4
27619: PPUSH
27620: LD_VAR 0 5
27624: PPUSH
27625: CALL_OW 448
27629: IFFALSE 27662
// result := [ chassis , engine , control , weapon ] ;
27631: LD_ADDR_VAR 0 6
27635: PUSH
27636: LD_VAR 0 2
27640: PUSH
27641: LD_VAR 0 3
27645: PUSH
27646: LD_VAR 0 4
27650: PUSH
27651: LD_VAR 0 5
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: ST_TO_ADDR
// end ;
27662: LD_VAR 0 6
27666: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27667: LD_INT 0
27669: PPUSH
// if not chassis or not engine then
27670: LD_VAR 0 1
27674: NOT
27675: PUSH
27676: LD_VAR 0 2
27680: NOT
27681: OR
27682: IFFALSE 27686
// exit ;
27684: GO 27882
// case engine of engine_solar :
27686: LD_VAR 0 2
27690: PUSH
27691: LD_INT 2
27693: DOUBLE
27694: EQUAL
27695: IFTRUE 27699
27697: GO 27737
27699: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27700: LD_ADDR_VAR 0 3
27704: PUSH
27705: LD_INT 11
27707: PUSH
27708: LD_INT 12
27710: PUSH
27711: LD_INT 13
27713: PUSH
27714: LD_INT 14
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: LD_INT 3
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: ST_TO_ADDR
27735: GO 27866
27737: LD_INT 1
27739: DOUBLE
27740: EQUAL
27741: IFTRUE 27745
27743: GO 27807
27745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27746: LD_ADDR_VAR 0 3
27750: PUSH
27751: LD_INT 11
27753: PUSH
27754: LD_INT 12
27756: PUSH
27757: LD_INT 13
27759: PUSH
27760: LD_INT 14
27762: PUSH
27763: LD_INT 1
27765: PUSH
27766: LD_INT 2
27768: PUSH
27769: LD_INT 3
27771: PUSH
27772: LD_INT 4
27774: PUSH
27775: LD_INT 5
27777: PUSH
27778: LD_INT 21
27780: PUSH
27781: LD_INT 23
27783: PUSH
27784: LD_INT 22
27786: PUSH
27787: LD_INT 24
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
27805: GO 27866
27807: LD_INT 3
27809: DOUBLE
27810: EQUAL
27811: IFTRUE 27815
27813: GO 27865
27815: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27816: LD_ADDR_VAR 0 3
27820: PUSH
27821: LD_INT 13
27823: PUSH
27824: LD_INT 14
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: LD_INT 3
27832: PUSH
27833: LD_INT 4
27835: PUSH
27836: LD_INT 5
27838: PUSH
27839: LD_INT 21
27841: PUSH
27842: LD_INT 22
27844: PUSH
27845: LD_INT 23
27847: PUSH
27848: LD_INT 24
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: ST_TO_ADDR
27863: GO 27866
27865: POP
// result := ( chassis in result ) ;
27866: LD_ADDR_VAR 0 3
27870: PUSH
27871: LD_VAR 0 1
27875: PUSH
27876: LD_VAR 0 3
27880: IN
27881: ST_TO_ADDR
// end ;
27882: LD_VAR 0 3
27886: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27887: LD_INT 0
27889: PPUSH
// if not chassis or not weapon then
27890: LD_VAR 0 1
27894: NOT
27895: PUSH
27896: LD_VAR 0 2
27900: NOT
27901: OR
27902: IFFALSE 27906
// exit ;
27904: GO 28968
// case weapon of us_machine_gun :
27906: LD_VAR 0 2
27910: PUSH
27911: LD_INT 2
27913: DOUBLE
27914: EQUAL
27915: IFTRUE 27919
27917: GO 27949
27919: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27920: LD_ADDR_VAR 0 3
27924: PUSH
27925: LD_INT 1
27927: PUSH
27928: LD_INT 2
27930: PUSH
27931: LD_INT 3
27933: PUSH
27934: LD_INT 4
27936: PUSH
27937: LD_INT 5
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
27947: GO 28952
27949: LD_INT 3
27951: DOUBLE
27952: EQUAL
27953: IFTRUE 27957
27955: GO 27987
27957: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27958: LD_ADDR_VAR 0 3
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: LD_INT 3
27971: PUSH
27972: LD_INT 4
27974: PUSH
27975: LD_INT 5
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: ST_TO_ADDR
27985: GO 28952
27987: LD_INT 11
27989: DOUBLE
27990: EQUAL
27991: IFTRUE 27995
27993: GO 28025
27995: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27996: LD_ADDR_VAR 0 3
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: LD_INT 2
28006: PUSH
28007: LD_INT 3
28009: PUSH
28010: LD_INT 4
28012: PUSH
28013: LD_INT 5
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: ST_TO_ADDR
28023: GO 28952
28025: LD_INT 4
28027: DOUBLE
28028: EQUAL
28029: IFTRUE 28033
28031: GO 28059
28033: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28034: LD_ADDR_VAR 0 3
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: LD_INT 3
28044: PUSH
28045: LD_INT 4
28047: PUSH
28048: LD_INT 5
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: ST_TO_ADDR
28057: GO 28952
28059: LD_INT 5
28061: DOUBLE
28062: EQUAL
28063: IFTRUE 28067
28065: GO 28093
28067: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28068: LD_ADDR_VAR 0 3
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 3
28078: PUSH
28079: LD_INT 4
28081: PUSH
28082: LD_INT 5
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: ST_TO_ADDR
28091: GO 28952
28093: LD_INT 9
28095: DOUBLE
28096: EQUAL
28097: IFTRUE 28101
28099: GO 28127
28101: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28102: LD_ADDR_VAR 0 3
28106: PUSH
28107: LD_INT 2
28109: PUSH
28110: LD_INT 3
28112: PUSH
28113: LD_INT 4
28115: PUSH
28116: LD_INT 5
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: ST_TO_ADDR
28125: GO 28952
28127: LD_INT 7
28129: DOUBLE
28130: EQUAL
28131: IFTRUE 28135
28133: GO 28161
28135: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: LD_INT 2
28143: PUSH
28144: LD_INT 3
28146: PUSH
28147: LD_INT 4
28149: PUSH
28150: LD_INT 5
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: ST_TO_ADDR
28159: GO 28952
28161: LD_INT 12
28163: DOUBLE
28164: EQUAL
28165: IFTRUE 28169
28167: GO 28195
28169: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28170: LD_ADDR_VAR 0 3
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: LD_INT 3
28180: PUSH
28181: LD_INT 4
28183: PUSH
28184: LD_INT 5
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: ST_TO_ADDR
28193: GO 28952
28195: LD_INT 13
28197: DOUBLE
28198: EQUAL
28199: IFTRUE 28203
28201: GO 28229
28203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28204: LD_ADDR_VAR 0 3
28208: PUSH
28209: LD_INT 2
28211: PUSH
28212: LD_INT 3
28214: PUSH
28215: LD_INT 4
28217: PUSH
28218: LD_INT 5
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: ST_TO_ADDR
28227: GO 28952
28229: LD_INT 14
28231: DOUBLE
28232: EQUAL
28233: IFTRUE 28237
28235: GO 28255
28237: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28238: LD_ADDR_VAR 0 3
28242: PUSH
28243: LD_INT 4
28245: PUSH
28246: LD_INT 5
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: ST_TO_ADDR
28253: GO 28952
28255: LD_INT 6
28257: DOUBLE
28258: EQUAL
28259: IFTRUE 28263
28261: GO 28281
28263: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28264: LD_ADDR_VAR 0 3
28268: PUSH
28269: LD_INT 4
28271: PUSH
28272: LD_INT 5
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: ST_TO_ADDR
28279: GO 28952
28281: LD_INT 10
28283: DOUBLE
28284: EQUAL
28285: IFTRUE 28289
28287: GO 28307
28289: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28290: LD_ADDR_VAR 0 3
28294: PUSH
28295: LD_INT 4
28297: PUSH
28298: LD_INT 5
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: ST_TO_ADDR
28305: GO 28952
28307: LD_INT 22
28309: DOUBLE
28310: EQUAL
28311: IFTRUE 28315
28313: GO 28341
28315: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28316: LD_ADDR_VAR 0 3
28320: PUSH
28321: LD_INT 11
28323: PUSH
28324: LD_INT 12
28326: PUSH
28327: LD_INT 13
28329: PUSH
28330: LD_INT 14
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: ST_TO_ADDR
28339: GO 28952
28341: LD_INT 23
28343: DOUBLE
28344: EQUAL
28345: IFTRUE 28349
28347: GO 28375
28349: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28350: LD_ADDR_VAR 0 3
28354: PUSH
28355: LD_INT 11
28357: PUSH
28358: LD_INT 12
28360: PUSH
28361: LD_INT 13
28363: PUSH
28364: LD_INT 14
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: ST_TO_ADDR
28373: GO 28952
28375: LD_INT 24
28377: DOUBLE
28378: EQUAL
28379: IFTRUE 28383
28381: GO 28409
28383: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28384: LD_ADDR_VAR 0 3
28388: PUSH
28389: LD_INT 11
28391: PUSH
28392: LD_INT 12
28394: PUSH
28395: LD_INT 13
28397: PUSH
28398: LD_INT 14
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: ST_TO_ADDR
28407: GO 28952
28409: LD_INT 30
28411: DOUBLE
28412: EQUAL
28413: IFTRUE 28417
28415: GO 28443
28417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28418: LD_ADDR_VAR 0 3
28422: PUSH
28423: LD_INT 11
28425: PUSH
28426: LD_INT 12
28428: PUSH
28429: LD_INT 13
28431: PUSH
28432: LD_INT 14
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: ST_TO_ADDR
28441: GO 28952
28443: LD_INT 25
28445: DOUBLE
28446: EQUAL
28447: IFTRUE 28451
28449: GO 28469
28451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28452: LD_ADDR_VAR 0 3
28456: PUSH
28457: LD_INT 13
28459: PUSH
28460: LD_INT 14
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: ST_TO_ADDR
28467: GO 28952
28469: LD_INT 27
28471: DOUBLE
28472: EQUAL
28473: IFTRUE 28477
28475: GO 28495
28477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28478: LD_ADDR_VAR 0 3
28482: PUSH
28483: LD_INT 13
28485: PUSH
28486: LD_INT 14
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: ST_TO_ADDR
28493: GO 28952
28495: LD_EXP 63
28499: DOUBLE
28500: EQUAL
28501: IFTRUE 28505
28503: GO 28531
28505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28506: LD_ADDR_VAR 0 3
28510: PUSH
28511: LD_INT 11
28513: PUSH
28514: LD_INT 12
28516: PUSH
28517: LD_INT 13
28519: PUSH
28520: LD_INT 14
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: ST_TO_ADDR
28529: GO 28952
28531: LD_INT 28
28533: DOUBLE
28534: EQUAL
28535: IFTRUE 28539
28537: GO 28557
28539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28540: LD_ADDR_VAR 0 3
28544: PUSH
28545: LD_INT 13
28547: PUSH
28548: LD_INT 14
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: ST_TO_ADDR
28555: GO 28952
28557: LD_INT 29
28559: DOUBLE
28560: EQUAL
28561: IFTRUE 28565
28563: GO 28583
28565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28566: LD_ADDR_VAR 0 3
28570: PUSH
28571: LD_INT 13
28573: PUSH
28574: LD_INT 14
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: ST_TO_ADDR
28581: GO 28952
28583: LD_INT 31
28585: DOUBLE
28586: EQUAL
28587: IFTRUE 28591
28589: GO 28609
28591: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28592: LD_ADDR_VAR 0 3
28596: PUSH
28597: LD_INT 13
28599: PUSH
28600: LD_INT 14
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: ST_TO_ADDR
28607: GO 28952
28609: LD_INT 26
28611: DOUBLE
28612: EQUAL
28613: IFTRUE 28617
28615: GO 28635
28617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28618: LD_ADDR_VAR 0 3
28622: PUSH
28623: LD_INT 13
28625: PUSH
28626: LD_INT 14
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: ST_TO_ADDR
28633: GO 28952
28635: LD_INT 42
28637: DOUBLE
28638: EQUAL
28639: IFTRUE 28643
28641: GO 28669
28643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28644: LD_ADDR_VAR 0 3
28648: PUSH
28649: LD_INT 21
28651: PUSH
28652: LD_INT 22
28654: PUSH
28655: LD_INT 23
28657: PUSH
28658: LD_INT 24
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: ST_TO_ADDR
28667: GO 28952
28669: LD_INT 43
28671: DOUBLE
28672: EQUAL
28673: IFTRUE 28677
28675: GO 28703
28677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28678: LD_ADDR_VAR 0 3
28682: PUSH
28683: LD_INT 21
28685: PUSH
28686: LD_INT 22
28688: PUSH
28689: LD_INT 23
28691: PUSH
28692: LD_INT 24
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: ST_TO_ADDR
28701: GO 28952
28703: LD_INT 44
28705: DOUBLE
28706: EQUAL
28707: IFTRUE 28711
28709: GO 28737
28711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28712: LD_ADDR_VAR 0 3
28716: PUSH
28717: LD_INT 21
28719: PUSH
28720: LD_INT 22
28722: PUSH
28723: LD_INT 23
28725: PUSH
28726: LD_INT 24
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: ST_TO_ADDR
28735: GO 28952
28737: LD_INT 45
28739: DOUBLE
28740: EQUAL
28741: IFTRUE 28745
28743: GO 28771
28745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28746: LD_ADDR_VAR 0 3
28750: PUSH
28751: LD_INT 21
28753: PUSH
28754: LD_INT 22
28756: PUSH
28757: LD_INT 23
28759: PUSH
28760: LD_INT 24
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
28769: GO 28952
28771: LD_INT 49
28773: DOUBLE
28774: EQUAL
28775: IFTRUE 28779
28777: GO 28805
28779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28780: LD_ADDR_VAR 0 3
28784: PUSH
28785: LD_INT 21
28787: PUSH
28788: LD_INT 22
28790: PUSH
28791: LD_INT 23
28793: PUSH
28794: LD_INT 24
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: ST_TO_ADDR
28803: GO 28952
28805: LD_INT 51
28807: DOUBLE
28808: EQUAL
28809: IFTRUE 28813
28811: GO 28839
28813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28814: LD_ADDR_VAR 0 3
28818: PUSH
28819: LD_INT 21
28821: PUSH
28822: LD_INT 22
28824: PUSH
28825: LD_INT 23
28827: PUSH
28828: LD_INT 24
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: ST_TO_ADDR
28837: GO 28952
28839: LD_INT 52
28841: DOUBLE
28842: EQUAL
28843: IFTRUE 28847
28845: GO 28873
28847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28848: LD_ADDR_VAR 0 3
28852: PUSH
28853: LD_INT 21
28855: PUSH
28856: LD_INT 22
28858: PUSH
28859: LD_INT 23
28861: PUSH
28862: LD_INT 24
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: ST_TO_ADDR
28871: GO 28952
28873: LD_INT 53
28875: DOUBLE
28876: EQUAL
28877: IFTRUE 28881
28879: GO 28899
28881: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28882: LD_ADDR_VAR 0 3
28886: PUSH
28887: LD_INT 23
28889: PUSH
28890: LD_INT 24
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: ST_TO_ADDR
28897: GO 28952
28899: LD_INT 46
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28925
28907: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28908: LD_ADDR_VAR 0 3
28912: PUSH
28913: LD_INT 23
28915: PUSH
28916: LD_INT 24
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: ST_TO_ADDR
28923: GO 28952
28925: LD_INT 47
28927: DOUBLE
28928: EQUAL
28929: IFTRUE 28933
28931: GO 28951
28933: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28934: LD_ADDR_VAR 0 3
28938: PUSH
28939: LD_INT 23
28941: PUSH
28942: LD_INT 24
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: ST_TO_ADDR
28949: GO 28952
28951: POP
// result := ( chassis in result ) ;
28952: LD_ADDR_VAR 0 3
28956: PUSH
28957: LD_VAR 0 1
28961: PUSH
28962: LD_VAR 0 3
28966: IN
28967: ST_TO_ADDR
// end ;
28968: LD_VAR 0 3
28972: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28973: LD_INT 0
28975: PPUSH
28976: PPUSH
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
28981: PPUSH
// result := array ;
28982: LD_ADDR_VAR 0 5
28986: PUSH
28987: LD_VAR 0 1
28991: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28992: LD_VAR 0 1
28996: NOT
28997: PUSH
28998: LD_VAR 0 2
29002: NOT
29003: OR
29004: PUSH
29005: LD_VAR 0 3
29009: NOT
29010: OR
29011: PUSH
29012: LD_VAR 0 2
29016: PUSH
29017: LD_VAR 0 1
29021: GREATER
29022: OR
29023: PUSH
29024: LD_VAR 0 3
29028: PUSH
29029: LD_VAR 0 1
29033: GREATER
29034: OR
29035: IFFALSE 29039
// exit ;
29037: GO 29335
// if direction then
29039: LD_VAR 0 4
29043: IFFALSE 29107
// begin d := 1 ;
29045: LD_ADDR_VAR 0 9
29049: PUSH
29050: LD_INT 1
29052: ST_TO_ADDR
// if i_from > i_to then
29053: LD_VAR 0 2
29057: PUSH
29058: LD_VAR 0 3
29062: GREATER
29063: IFFALSE 29089
// length := ( array - i_from ) + i_to else
29065: LD_ADDR_VAR 0 11
29069: PUSH
29070: LD_VAR 0 1
29074: PUSH
29075: LD_VAR 0 2
29079: MINUS
29080: PUSH
29081: LD_VAR 0 3
29085: PLUS
29086: ST_TO_ADDR
29087: GO 29105
// length := i_to - i_from ;
29089: LD_ADDR_VAR 0 11
29093: PUSH
29094: LD_VAR 0 3
29098: PUSH
29099: LD_VAR 0 2
29103: MINUS
29104: ST_TO_ADDR
// end else
29105: GO 29168
// begin d := - 1 ;
29107: LD_ADDR_VAR 0 9
29111: PUSH
29112: LD_INT 1
29114: NEG
29115: ST_TO_ADDR
// if i_from > i_to then
29116: LD_VAR 0 2
29120: PUSH
29121: LD_VAR 0 3
29125: GREATER
29126: IFFALSE 29146
// length := i_from - i_to else
29128: LD_ADDR_VAR 0 11
29132: PUSH
29133: LD_VAR 0 2
29137: PUSH
29138: LD_VAR 0 3
29142: MINUS
29143: ST_TO_ADDR
29144: GO 29168
// length := ( array - i_to ) + i_from ;
29146: LD_ADDR_VAR 0 11
29150: PUSH
29151: LD_VAR 0 1
29155: PUSH
29156: LD_VAR 0 3
29160: MINUS
29161: PUSH
29162: LD_VAR 0 2
29166: PLUS
29167: ST_TO_ADDR
// end ; if not length then
29168: LD_VAR 0 11
29172: NOT
29173: IFFALSE 29177
// exit ;
29175: GO 29335
// tmp := array ;
29177: LD_ADDR_VAR 0 10
29181: PUSH
29182: LD_VAR 0 1
29186: ST_TO_ADDR
// for i = 1 to length do
29187: LD_ADDR_VAR 0 6
29191: PUSH
29192: DOUBLE
29193: LD_INT 1
29195: DEC
29196: ST_TO_ADDR
29197: LD_VAR 0 11
29201: PUSH
29202: FOR_TO
29203: IFFALSE 29323
// begin for j = 1 to array do
29205: LD_ADDR_VAR 0 7
29209: PUSH
29210: DOUBLE
29211: LD_INT 1
29213: DEC
29214: ST_TO_ADDR
29215: LD_VAR 0 1
29219: PUSH
29220: FOR_TO
29221: IFFALSE 29309
// begin k := j + d ;
29223: LD_ADDR_VAR 0 8
29227: PUSH
29228: LD_VAR 0 7
29232: PUSH
29233: LD_VAR 0 9
29237: PLUS
29238: ST_TO_ADDR
// if k > array then
29239: LD_VAR 0 8
29243: PUSH
29244: LD_VAR 0 1
29248: GREATER
29249: IFFALSE 29259
// k := 1 ;
29251: LD_ADDR_VAR 0 8
29255: PUSH
29256: LD_INT 1
29258: ST_TO_ADDR
// if not k then
29259: LD_VAR 0 8
29263: NOT
29264: IFFALSE 29276
// k := array ;
29266: LD_ADDR_VAR 0 8
29270: PUSH
29271: LD_VAR 0 1
29275: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29276: LD_ADDR_VAR 0 10
29280: PUSH
29281: LD_VAR 0 10
29285: PPUSH
29286: LD_VAR 0 8
29290: PPUSH
29291: LD_VAR 0 1
29295: PUSH
29296: LD_VAR 0 7
29300: ARRAY
29301: PPUSH
29302: CALL_OW 1
29306: ST_TO_ADDR
// end ;
29307: GO 29220
29309: POP
29310: POP
// array := tmp ;
29311: LD_ADDR_VAR 0 1
29315: PUSH
29316: LD_VAR 0 10
29320: ST_TO_ADDR
// end ;
29321: GO 29202
29323: POP
29324: POP
// result := array ;
29325: LD_ADDR_VAR 0 5
29329: PUSH
29330: LD_VAR 0 1
29334: ST_TO_ADDR
// end ;
29335: LD_VAR 0 5
29339: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29340: LD_INT 0
29342: PPUSH
29343: PPUSH
// result := 0 ;
29344: LD_ADDR_VAR 0 3
29348: PUSH
29349: LD_INT 0
29351: ST_TO_ADDR
// if not array or not value in array then
29352: LD_VAR 0 1
29356: NOT
29357: PUSH
29358: LD_VAR 0 2
29362: PUSH
29363: LD_VAR 0 1
29367: IN
29368: NOT
29369: OR
29370: IFFALSE 29374
// exit ;
29372: GO 29428
// for i = 1 to array do
29374: LD_ADDR_VAR 0 4
29378: PUSH
29379: DOUBLE
29380: LD_INT 1
29382: DEC
29383: ST_TO_ADDR
29384: LD_VAR 0 1
29388: PUSH
29389: FOR_TO
29390: IFFALSE 29426
// if value = array [ i ] then
29392: LD_VAR 0 2
29396: PUSH
29397: LD_VAR 0 1
29401: PUSH
29402: LD_VAR 0 4
29406: ARRAY
29407: EQUAL
29408: IFFALSE 29424
// begin result := i ;
29410: LD_ADDR_VAR 0 3
29414: PUSH
29415: LD_VAR 0 4
29419: ST_TO_ADDR
// exit ;
29420: POP
29421: POP
29422: GO 29428
// end ;
29424: GO 29389
29426: POP
29427: POP
// end ;
29428: LD_VAR 0 3
29432: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29433: LD_INT 0
29435: PPUSH
// vc_chassis := chassis ;
29436: LD_ADDR_OWVAR 37
29440: PUSH
29441: LD_VAR 0 1
29445: ST_TO_ADDR
// vc_engine := engine ;
29446: LD_ADDR_OWVAR 39
29450: PUSH
29451: LD_VAR 0 2
29455: ST_TO_ADDR
// vc_control := control ;
29456: LD_ADDR_OWVAR 38
29460: PUSH
29461: LD_VAR 0 3
29465: ST_TO_ADDR
// vc_weapon := weapon ;
29466: LD_ADDR_OWVAR 40
29470: PUSH
29471: LD_VAR 0 4
29475: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29476: LD_ADDR_OWVAR 41
29480: PUSH
29481: LD_VAR 0 5
29485: ST_TO_ADDR
// end ;
29486: LD_VAR 0 6
29490: RET
// export function WantPlant ( unit ) ; var task ; begin
29491: LD_INT 0
29493: PPUSH
29494: PPUSH
// result := false ;
29495: LD_ADDR_VAR 0 2
29499: PUSH
29500: LD_INT 0
29502: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_VAR 0 1
29512: PPUSH
29513: CALL_OW 437
29517: ST_TO_ADDR
// if task then
29518: LD_VAR 0 3
29522: IFFALSE 29550
// if task [ 1 ] [ 1 ] = p then
29524: LD_VAR 0 3
29528: PUSH
29529: LD_INT 1
29531: ARRAY
29532: PUSH
29533: LD_INT 1
29535: ARRAY
29536: PUSH
29537: LD_STRING p
29539: EQUAL
29540: IFFALSE 29550
// result := true ;
29542: LD_ADDR_VAR 0 2
29546: PUSH
29547: LD_INT 1
29549: ST_TO_ADDR
// end ;
29550: LD_VAR 0 2
29554: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29555: LD_INT 0
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
// if pos < 1 then
29561: LD_VAR 0 2
29565: PUSH
29566: LD_INT 1
29568: LESS
29569: IFFALSE 29573
// exit ;
29571: GO 29876
// if pos = 1 then
29573: LD_VAR 0 2
29577: PUSH
29578: LD_INT 1
29580: EQUAL
29581: IFFALSE 29614
// result := Replace ( arr , pos [ 1 ] , value ) else
29583: LD_ADDR_VAR 0 4
29587: PUSH
29588: LD_VAR 0 1
29592: PPUSH
29593: LD_VAR 0 2
29597: PUSH
29598: LD_INT 1
29600: ARRAY
29601: PPUSH
29602: LD_VAR 0 3
29606: PPUSH
29607: CALL_OW 1
29611: ST_TO_ADDR
29612: GO 29876
// begin tmp := arr ;
29614: LD_ADDR_VAR 0 6
29618: PUSH
29619: LD_VAR 0 1
29623: ST_TO_ADDR
// s_arr := [ tmp ] ;
29624: LD_ADDR_VAR 0 7
29628: PUSH
29629: LD_VAR 0 6
29633: PUSH
29634: EMPTY
29635: LIST
29636: ST_TO_ADDR
// for i = 1 to pos - 1 do
29637: LD_ADDR_VAR 0 5
29641: PUSH
29642: DOUBLE
29643: LD_INT 1
29645: DEC
29646: ST_TO_ADDR
29647: LD_VAR 0 2
29651: PUSH
29652: LD_INT 1
29654: MINUS
29655: PUSH
29656: FOR_TO
29657: IFFALSE 29702
// begin tmp := tmp [ pos [ i ] ] ;
29659: LD_ADDR_VAR 0 6
29663: PUSH
29664: LD_VAR 0 6
29668: PUSH
29669: LD_VAR 0 2
29673: PUSH
29674: LD_VAR 0 5
29678: ARRAY
29679: ARRAY
29680: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29681: LD_ADDR_VAR 0 7
29685: PUSH
29686: LD_VAR 0 7
29690: PUSH
29691: LD_VAR 0 6
29695: PUSH
29696: EMPTY
29697: LIST
29698: ADD
29699: ST_TO_ADDR
// end ;
29700: GO 29656
29702: POP
29703: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29704: LD_ADDR_VAR 0 6
29708: PUSH
29709: LD_VAR 0 6
29713: PPUSH
29714: LD_VAR 0 2
29718: PUSH
29719: LD_VAR 0 2
29723: ARRAY
29724: PPUSH
29725: LD_VAR 0 3
29729: PPUSH
29730: CALL_OW 1
29734: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29735: LD_ADDR_VAR 0 7
29739: PUSH
29740: LD_VAR 0 7
29744: PPUSH
29745: LD_VAR 0 7
29749: PPUSH
29750: LD_VAR 0 6
29754: PPUSH
29755: CALL_OW 1
29759: ST_TO_ADDR
// for i = s_arr downto 2 do
29760: LD_ADDR_VAR 0 5
29764: PUSH
29765: DOUBLE
29766: LD_VAR 0 7
29770: INC
29771: ST_TO_ADDR
29772: LD_INT 2
29774: PUSH
29775: FOR_DOWNTO
29776: IFFALSE 29860
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29778: LD_ADDR_VAR 0 6
29782: PUSH
29783: LD_VAR 0 7
29787: PUSH
29788: LD_VAR 0 5
29792: PUSH
29793: LD_INT 1
29795: MINUS
29796: ARRAY
29797: PPUSH
29798: LD_VAR 0 2
29802: PUSH
29803: LD_VAR 0 5
29807: PUSH
29808: LD_INT 1
29810: MINUS
29811: ARRAY
29812: PPUSH
29813: LD_VAR 0 7
29817: PUSH
29818: LD_VAR 0 5
29822: ARRAY
29823: PPUSH
29824: CALL_OW 1
29828: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29829: LD_ADDR_VAR 0 7
29833: PUSH
29834: LD_VAR 0 7
29838: PPUSH
29839: LD_VAR 0 5
29843: PUSH
29844: LD_INT 1
29846: MINUS
29847: PPUSH
29848: LD_VAR 0 6
29852: PPUSH
29853: CALL_OW 1
29857: ST_TO_ADDR
// end ;
29858: GO 29775
29860: POP
29861: POP
// result := s_arr [ 1 ] ;
29862: LD_ADDR_VAR 0 4
29866: PUSH
29867: LD_VAR 0 7
29871: PUSH
29872: LD_INT 1
29874: ARRAY
29875: ST_TO_ADDR
// end ; end ;
29876: LD_VAR 0 4
29880: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29881: LD_INT 0
29883: PPUSH
29884: PPUSH
// if not list then
29885: LD_VAR 0 1
29889: NOT
29890: IFFALSE 29894
// exit ;
29892: GO 29985
// i := list [ pos1 ] ;
29894: LD_ADDR_VAR 0 5
29898: PUSH
29899: LD_VAR 0 1
29903: PUSH
29904: LD_VAR 0 2
29908: ARRAY
29909: ST_TO_ADDR
// if not i then
29910: LD_VAR 0 5
29914: NOT
29915: IFFALSE 29919
// exit ;
29917: GO 29985
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29919: LD_ADDR_VAR 0 1
29923: PUSH
29924: LD_VAR 0 1
29928: PPUSH
29929: LD_VAR 0 2
29933: PPUSH
29934: LD_VAR 0 1
29938: PUSH
29939: LD_VAR 0 3
29943: ARRAY
29944: PPUSH
29945: CALL_OW 1
29949: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29950: LD_ADDR_VAR 0 1
29954: PUSH
29955: LD_VAR 0 1
29959: PPUSH
29960: LD_VAR 0 3
29964: PPUSH
29965: LD_VAR 0 5
29969: PPUSH
29970: CALL_OW 1
29974: ST_TO_ADDR
// result := list ;
29975: LD_ADDR_VAR 0 4
29979: PUSH
29980: LD_VAR 0 1
29984: ST_TO_ADDR
// end ;
29985: LD_VAR 0 4
29989: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29990: LD_INT 0
29992: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29993: LD_ADDR_VAR 0 5
29997: PUSH
29998: LD_VAR 0 1
30002: PPUSH
30003: CALL_OW 250
30007: PPUSH
30008: LD_VAR 0 1
30012: PPUSH
30013: CALL_OW 251
30017: PPUSH
30018: LD_VAR 0 2
30022: PPUSH
30023: LD_VAR 0 3
30027: PPUSH
30028: LD_VAR 0 4
30032: PPUSH
30033: CALL 30043 0 5
30037: ST_TO_ADDR
// end ;
30038: LD_VAR 0 5
30042: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30043: LD_INT 0
30045: PPUSH
30046: PPUSH
30047: PPUSH
30048: PPUSH
// if not list then
30049: LD_VAR 0 3
30053: NOT
30054: IFFALSE 30058
// exit ;
30056: GO 30446
// result := [ ] ;
30058: LD_ADDR_VAR 0 6
30062: PUSH
30063: EMPTY
30064: ST_TO_ADDR
// for i in list do
30065: LD_ADDR_VAR 0 7
30069: PUSH
30070: LD_VAR 0 3
30074: PUSH
30075: FOR_IN
30076: IFFALSE 30278
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30078: LD_ADDR_VAR 0 9
30082: PUSH
30083: LD_VAR 0 7
30087: PPUSH
30088: LD_VAR 0 1
30092: PPUSH
30093: LD_VAR 0 2
30097: PPUSH
30098: CALL_OW 297
30102: ST_TO_ADDR
// if not result then
30103: LD_VAR 0 6
30107: NOT
30108: IFFALSE 30134
// result := [ [ i , tmp ] ] else
30110: LD_ADDR_VAR 0 6
30114: PUSH
30115: LD_VAR 0 7
30119: PUSH
30120: LD_VAR 0 9
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: EMPTY
30130: LIST
30131: ST_TO_ADDR
30132: GO 30276
// begin if result [ result ] [ 2 ] < tmp then
30134: LD_VAR 0 6
30138: PUSH
30139: LD_VAR 0 6
30143: ARRAY
30144: PUSH
30145: LD_INT 2
30147: ARRAY
30148: PUSH
30149: LD_VAR 0 9
30153: LESS
30154: IFFALSE 30196
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30156: LD_ADDR_VAR 0 6
30160: PUSH
30161: LD_VAR 0 6
30165: PPUSH
30166: LD_VAR 0 6
30170: PUSH
30171: LD_INT 1
30173: PLUS
30174: PPUSH
30175: LD_VAR 0 7
30179: PUSH
30180: LD_VAR 0 9
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PPUSH
30189: CALL_OW 2
30193: ST_TO_ADDR
30194: GO 30276
// for j = 1 to result do
30196: LD_ADDR_VAR 0 8
30200: PUSH
30201: DOUBLE
30202: LD_INT 1
30204: DEC
30205: ST_TO_ADDR
30206: LD_VAR 0 6
30210: PUSH
30211: FOR_TO
30212: IFFALSE 30274
// begin if tmp < result [ j ] [ 2 ] then
30214: LD_VAR 0 9
30218: PUSH
30219: LD_VAR 0 6
30223: PUSH
30224: LD_VAR 0 8
30228: ARRAY
30229: PUSH
30230: LD_INT 2
30232: ARRAY
30233: LESS
30234: IFFALSE 30272
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30236: LD_ADDR_VAR 0 6
30240: PUSH
30241: LD_VAR 0 6
30245: PPUSH
30246: LD_VAR 0 8
30250: PPUSH
30251: LD_VAR 0 7
30255: PUSH
30256: LD_VAR 0 9
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PPUSH
30265: CALL_OW 2
30269: ST_TO_ADDR
// break ;
30270: GO 30274
// end ; end ;
30272: GO 30211
30274: POP
30275: POP
// end ; end ;
30276: GO 30075
30278: POP
30279: POP
// if result and not asc then
30280: LD_VAR 0 6
30284: PUSH
30285: LD_VAR 0 4
30289: NOT
30290: AND
30291: IFFALSE 30366
// begin tmp := result ;
30293: LD_ADDR_VAR 0 9
30297: PUSH
30298: LD_VAR 0 6
30302: ST_TO_ADDR
// for i = tmp downto 1 do
30303: LD_ADDR_VAR 0 7
30307: PUSH
30308: DOUBLE
30309: LD_VAR 0 9
30313: INC
30314: ST_TO_ADDR
30315: LD_INT 1
30317: PUSH
30318: FOR_DOWNTO
30319: IFFALSE 30364
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30321: LD_ADDR_VAR 0 6
30325: PUSH
30326: LD_VAR 0 6
30330: PPUSH
30331: LD_VAR 0 9
30335: PUSH
30336: LD_VAR 0 7
30340: MINUS
30341: PUSH
30342: LD_INT 1
30344: PLUS
30345: PPUSH
30346: LD_VAR 0 9
30350: PUSH
30351: LD_VAR 0 7
30355: ARRAY
30356: PPUSH
30357: CALL_OW 1
30361: ST_TO_ADDR
30362: GO 30318
30364: POP
30365: POP
// end ; tmp := [ ] ;
30366: LD_ADDR_VAR 0 9
30370: PUSH
30371: EMPTY
30372: ST_TO_ADDR
// if mode then
30373: LD_VAR 0 5
30377: IFFALSE 30446
// begin for i = 1 to result do
30379: LD_ADDR_VAR 0 7
30383: PUSH
30384: DOUBLE
30385: LD_INT 1
30387: DEC
30388: ST_TO_ADDR
30389: LD_VAR 0 6
30393: PUSH
30394: FOR_TO
30395: IFFALSE 30434
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30397: LD_ADDR_VAR 0 9
30401: PUSH
30402: LD_VAR 0 9
30406: PPUSH
30407: LD_VAR 0 7
30411: PPUSH
30412: LD_VAR 0 6
30416: PUSH
30417: LD_VAR 0 7
30421: ARRAY
30422: PUSH
30423: LD_INT 1
30425: ARRAY
30426: PPUSH
30427: CALL_OW 1
30431: ST_TO_ADDR
30432: GO 30394
30434: POP
30435: POP
// result := tmp ;
30436: LD_ADDR_VAR 0 6
30440: PUSH
30441: LD_VAR 0 9
30445: ST_TO_ADDR
// end ; end ;
30446: LD_VAR 0 6
30450: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30451: LD_INT 0
30453: PPUSH
30454: PPUSH
30455: PPUSH
30456: PPUSH
30457: PPUSH
30458: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30459: LD_ADDR_VAR 0 5
30463: PUSH
30464: LD_INT 0
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: EMPTY
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: ST_TO_ADDR
// if not x or not y then
30481: LD_VAR 0 2
30485: NOT
30486: PUSH
30487: LD_VAR 0 3
30491: NOT
30492: OR
30493: IFFALSE 30497
// exit ;
30495: GO 32149
// if not range then
30497: LD_VAR 0 4
30501: NOT
30502: IFFALSE 30512
// range := 10 ;
30504: LD_ADDR_VAR 0 4
30508: PUSH
30509: LD_INT 10
30511: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30512: LD_ADDR_VAR 0 8
30516: PUSH
30517: LD_INT 81
30519: PUSH
30520: LD_VAR 0 1
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 92
30531: PUSH
30532: LD_VAR 0 2
30536: PUSH
30537: LD_VAR 0 3
30541: PUSH
30542: LD_VAR 0 4
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 3
30555: PUSH
30556: LD_INT 21
30558: PUSH
30559: LD_INT 3
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: PPUSH
30575: CALL_OW 69
30579: ST_TO_ADDR
// if not tmp then
30580: LD_VAR 0 8
30584: NOT
30585: IFFALSE 30589
// exit ;
30587: GO 32149
// for i in tmp do
30589: LD_ADDR_VAR 0 6
30593: PUSH
30594: LD_VAR 0 8
30598: PUSH
30599: FOR_IN
30600: IFFALSE 32124
// begin points := [ 0 , 0 , 0 ] ;
30602: LD_ADDR_VAR 0 9
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: ST_TO_ADDR
// bpoints := 1 ;
30621: LD_ADDR_VAR 0 10
30625: PUSH
30626: LD_INT 1
30628: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30629: LD_VAR 0 6
30633: PPUSH
30634: CALL_OW 247
30638: PUSH
30639: LD_INT 1
30641: DOUBLE
30642: EQUAL
30643: IFTRUE 30647
30645: GO 31225
30647: POP
// begin if GetClass ( i ) = 1 then
30648: LD_VAR 0 6
30652: PPUSH
30653: CALL_OW 257
30657: PUSH
30658: LD_INT 1
30660: EQUAL
30661: IFFALSE 30682
// points := [ 10 , 5 , 3 ] ;
30663: LD_ADDR_VAR 0 9
30667: PUSH
30668: LD_INT 10
30670: PUSH
30671: LD_INT 5
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30682: LD_VAR 0 6
30686: PPUSH
30687: CALL_OW 257
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: LD_INT 3
30697: PUSH
30698: LD_INT 4
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: IN
30706: IFFALSE 30727
// points := [ 3 , 2 , 1 ] ;
30708: LD_ADDR_VAR 0 9
30712: PUSH
30713: LD_INT 3
30715: PUSH
30716: LD_INT 2
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30727: LD_VAR 0 6
30731: PPUSH
30732: CALL_OW 257
30736: PUSH
30737: LD_INT 5
30739: EQUAL
30740: IFFALSE 30761
// points := [ 130 , 5 , 2 ] ;
30742: LD_ADDR_VAR 0 9
30746: PUSH
30747: LD_INT 130
30749: PUSH
30750: LD_INT 5
30752: PUSH
30753: LD_INT 2
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: LIST
30760: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30761: LD_VAR 0 6
30765: PPUSH
30766: CALL_OW 257
30770: PUSH
30771: LD_INT 8
30773: EQUAL
30774: IFFALSE 30795
// points := [ 35 , 35 , 30 ] ;
30776: LD_ADDR_VAR 0 9
30780: PUSH
30781: LD_INT 35
30783: PUSH
30784: LD_INT 35
30786: PUSH
30787: LD_INT 30
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30795: LD_VAR 0 6
30799: PPUSH
30800: CALL_OW 257
30804: PUSH
30805: LD_INT 9
30807: EQUAL
30808: IFFALSE 30829
// points := [ 20 , 55 , 40 ] ;
30810: LD_ADDR_VAR 0 9
30814: PUSH
30815: LD_INT 20
30817: PUSH
30818: LD_INT 55
30820: PUSH
30821: LD_INT 40
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: LIST
30828: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30829: LD_VAR 0 6
30833: PPUSH
30834: CALL_OW 257
30838: PUSH
30839: LD_INT 12
30841: PUSH
30842: LD_INT 16
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: IN
30849: IFFALSE 30870
// points := [ 5 , 3 , 2 ] ;
30851: LD_ADDR_VAR 0 9
30855: PUSH
30856: LD_INT 5
30858: PUSH
30859: LD_INT 3
30861: PUSH
30862: LD_INT 2
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30870: LD_VAR 0 6
30874: PPUSH
30875: CALL_OW 257
30879: PUSH
30880: LD_INT 17
30882: EQUAL
30883: IFFALSE 30904
// points := [ 100 , 50 , 75 ] ;
30885: LD_ADDR_VAR 0 9
30889: PUSH
30890: LD_INT 100
30892: PUSH
30893: LD_INT 50
30895: PUSH
30896: LD_INT 75
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30904: LD_VAR 0 6
30908: PPUSH
30909: CALL_OW 257
30913: PUSH
30914: LD_INT 15
30916: EQUAL
30917: IFFALSE 30938
// points := [ 10 , 5 , 3 ] ;
30919: LD_ADDR_VAR 0 9
30923: PUSH
30924: LD_INT 10
30926: PUSH
30927: LD_INT 5
30929: PUSH
30930: LD_INT 3
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30938: LD_VAR 0 6
30942: PPUSH
30943: CALL_OW 257
30947: PUSH
30948: LD_INT 14
30950: EQUAL
30951: IFFALSE 30972
// points := [ 10 , 0 , 0 ] ;
30953: LD_ADDR_VAR 0 9
30957: PUSH
30958: LD_INT 10
30960: PUSH
30961: LD_INT 0
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30972: LD_VAR 0 6
30976: PPUSH
30977: CALL_OW 257
30981: PUSH
30982: LD_INT 11
30984: EQUAL
30985: IFFALSE 31006
// points := [ 30 , 10 , 5 ] ;
30987: LD_ADDR_VAR 0 9
30991: PUSH
30992: LD_INT 30
30994: PUSH
30995: LD_INT 10
30997: PUSH
30998: LD_INT 5
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31006: LD_VAR 0 1
31010: PPUSH
31011: LD_INT 5
31013: PPUSH
31014: CALL_OW 321
31018: PUSH
31019: LD_INT 2
31021: EQUAL
31022: IFFALSE 31039
// bpoints := bpoints * 1.8 ;
31024: LD_ADDR_VAR 0 10
31028: PUSH
31029: LD_VAR 0 10
31033: PUSH
31034: LD_REAL  1.80000000000000E+0000
31037: MUL
31038: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31039: LD_VAR 0 6
31043: PPUSH
31044: CALL_OW 257
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: LD_INT 3
31057: PUSH
31058: LD_INT 4
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: IN
31067: PUSH
31068: LD_VAR 0 1
31072: PPUSH
31073: LD_INT 51
31075: PPUSH
31076: CALL_OW 321
31080: PUSH
31081: LD_INT 2
31083: EQUAL
31084: AND
31085: IFFALSE 31102
// bpoints := bpoints * 1.2 ;
31087: LD_ADDR_VAR 0 10
31091: PUSH
31092: LD_VAR 0 10
31096: PUSH
31097: LD_REAL  1.20000000000000E+0000
31100: MUL
31101: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31102: LD_VAR 0 6
31106: PPUSH
31107: CALL_OW 257
31111: PUSH
31112: LD_INT 5
31114: PUSH
31115: LD_INT 7
31117: PUSH
31118: LD_INT 9
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: LIST
31125: IN
31126: PUSH
31127: LD_VAR 0 1
31131: PPUSH
31132: LD_INT 52
31134: PPUSH
31135: CALL_OW 321
31139: PUSH
31140: LD_INT 2
31142: EQUAL
31143: AND
31144: IFFALSE 31161
// bpoints := bpoints * 1.5 ;
31146: LD_ADDR_VAR 0 10
31150: PUSH
31151: LD_VAR 0 10
31155: PUSH
31156: LD_REAL  1.50000000000000E+0000
31159: MUL
31160: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31161: LD_VAR 0 1
31165: PPUSH
31166: LD_INT 66
31168: PPUSH
31169: CALL_OW 321
31173: PUSH
31174: LD_INT 2
31176: EQUAL
31177: IFFALSE 31194
// bpoints := bpoints * 1.1 ;
31179: LD_ADDR_VAR 0 10
31183: PUSH
31184: LD_VAR 0 10
31188: PUSH
31189: LD_REAL  1.10000000000000E+0000
31192: MUL
31193: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31194: LD_ADDR_VAR 0 10
31198: PUSH
31199: LD_VAR 0 10
31203: PUSH
31204: LD_VAR 0 6
31208: PPUSH
31209: LD_INT 1
31211: PPUSH
31212: CALL_OW 259
31216: PUSH
31217: LD_REAL  1.15000000000000E+0000
31220: MUL
31221: MUL
31222: ST_TO_ADDR
// end ; unit_vehicle :
31223: GO 32053
31225: LD_INT 2
31227: DOUBLE
31228: EQUAL
31229: IFTRUE 31233
31231: GO 32041
31233: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31234: LD_VAR 0 6
31238: PPUSH
31239: CALL_OW 264
31243: PUSH
31244: LD_INT 2
31246: PUSH
31247: LD_INT 42
31249: PUSH
31250: LD_INT 24
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: LIST
31257: IN
31258: IFFALSE 31279
// points := [ 25 , 5 , 3 ] ;
31260: LD_ADDR_VAR 0 9
31264: PUSH
31265: LD_INT 25
31267: PUSH
31268: LD_INT 5
31270: PUSH
31271: LD_INT 3
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31279: LD_VAR 0 6
31283: PPUSH
31284: CALL_OW 264
31288: PUSH
31289: LD_INT 4
31291: PUSH
31292: LD_INT 43
31294: PUSH
31295: LD_INT 25
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: IN
31303: IFFALSE 31324
// points := [ 40 , 15 , 5 ] ;
31305: LD_ADDR_VAR 0 9
31309: PUSH
31310: LD_INT 40
31312: PUSH
31313: LD_INT 15
31315: PUSH
31316: LD_INT 5
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31324: LD_VAR 0 6
31328: PPUSH
31329: CALL_OW 264
31333: PUSH
31334: LD_INT 3
31336: PUSH
31337: LD_INT 23
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: IN
31344: IFFALSE 31365
// points := [ 7 , 25 , 8 ] ;
31346: LD_ADDR_VAR 0 9
31350: PUSH
31351: LD_INT 7
31353: PUSH
31354: LD_INT 25
31356: PUSH
31357: LD_INT 8
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31365: LD_VAR 0 6
31369: PPUSH
31370: CALL_OW 264
31374: PUSH
31375: LD_INT 5
31377: PUSH
31378: LD_INT 27
31380: PUSH
31381: LD_INT 44
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: IN
31389: IFFALSE 31410
// points := [ 14 , 50 , 16 ] ;
31391: LD_ADDR_VAR 0 9
31395: PUSH
31396: LD_INT 14
31398: PUSH
31399: LD_INT 50
31401: PUSH
31402: LD_INT 16
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31410: LD_VAR 0 6
31414: PPUSH
31415: CALL_OW 264
31419: PUSH
31420: LD_INT 6
31422: PUSH
31423: LD_INT 46
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: IN
31430: IFFALSE 31451
// points := [ 32 , 120 , 70 ] ;
31432: LD_ADDR_VAR 0 9
31436: PUSH
31437: LD_INT 32
31439: PUSH
31440: LD_INT 120
31442: PUSH
31443: LD_INT 70
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: LIST
31450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31451: LD_VAR 0 6
31455: PPUSH
31456: CALL_OW 264
31460: PUSH
31461: LD_INT 7
31463: PUSH
31464: LD_INT 28
31466: PUSH
31467: LD_INT 45
31469: PUSH
31470: LD_EXP 63
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: IN
31481: IFFALSE 31502
// points := [ 35 , 20 , 45 ] ;
31483: LD_ADDR_VAR 0 9
31487: PUSH
31488: LD_INT 35
31490: PUSH
31491: LD_INT 20
31493: PUSH
31494: LD_INT 45
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31502: LD_VAR 0 6
31506: PPUSH
31507: CALL_OW 264
31511: PUSH
31512: LD_INT 47
31514: PUSH
31515: EMPTY
31516: LIST
31517: IN
31518: IFFALSE 31539
// points := [ 67 , 45 , 75 ] ;
31520: LD_ADDR_VAR 0 9
31524: PUSH
31525: LD_INT 67
31527: PUSH
31528: LD_INT 45
31530: PUSH
31531: LD_INT 75
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31539: LD_VAR 0 6
31543: PPUSH
31544: CALL_OW 264
31548: PUSH
31549: LD_INT 26
31551: PUSH
31552: EMPTY
31553: LIST
31554: IN
31555: IFFALSE 31576
// points := [ 120 , 30 , 80 ] ;
31557: LD_ADDR_VAR 0 9
31561: PUSH
31562: LD_INT 120
31564: PUSH
31565: LD_INT 30
31567: PUSH
31568: LD_INT 80
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31576: LD_VAR 0 6
31580: PPUSH
31581: CALL_OW 264
31585: PUSH
31586: LD_INT 22
31588: PUSH
31589: EMPTY
31590: LIST
31591: IN
31592: IFFALSE 31613
// points := [ 40 , 1 , 1 ] ;
31594: LD_ADDR_VAR 0 9
31598: PUSH
31599: LD_INT 40
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: LIST
31612: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31613: LD_VAR 0 6
31617: PPUSH
31618: CALL_OW 264
31622: PUSH
31623: LD_INT 29
31625: PUSH
31626: EMPTY
31627: LIST
31628: IN
31629: IFFALSE 31650
// points := [ 70 , 200 , 400 ] ;
31631: LD_ADDR_VAR 0 9
31635: PUSH
31636: LD_INT 70
31638: PUSH
31639: LD_INT 200
31641: PUSH
31642: LD_INT 400
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: LIST
31649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31650: LD_VAR 0 6
31654: PPUSH
31655: CALL_OW 264
31659: PUSH
31660: LD_INT 14
31662: PUSH
31663: LD_INT 53
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: IN
31670: IFFALSE 31691
// points := [ 40 , 10 , 20 ] ;
31672: LD_ADDR_VAR 0 9
31676: PUSH
31677: LD_INT 40
31679: PUSH
31680: LD_INT 10
31682: PUSH
31683: LD_INT 20
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: LIST
31690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31691: LD_VAR 0 6
31695: PPUSH
31696: CALL_OW 264
31700: PUSH
31701: LD_INT 9
31703: PUSH
31704: EMPTY
31705: LIST
31706: IN
31707: IFFALSE 31728
// points := [ 5 , 70 , 20 ] ;
31709: LD_ADDR_VAR 0 9
31713: PUSH
31714: LD_INT 5
31716: PUSH
31717: LD_INT 70
31719: PUSH
31720: LD_INT 20
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: LIST
31727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31728: LD_VAR 0 6
31732: PPUSH
31733: CALL_OW 264
31737: PUSH
31738: LD_INT 10
31740: PUSH
31741: EMPTY
31742: LIST
31743: IN
31744: IFFALSE 31765
// points := [ 35 , 110 , 70 ] ;
31746: LD_ADDR_VAR 0 9
31750: PUSH
31751: LD_INT 35
31753: PUSH
31754: LD_INT 110
31756: PUSH
31757: LD_INT 70
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31765: LD_VAR 0 6
31769: PPUSH
31770: CALL_OW 265
31774: PUSH
31775: LD_INT 25
31777: EQUAL
31778: IFFALSE 31799
// points := [ 80 , 65 , 100 ] ;
31780: LD_ADDR_VAR 0 9
31784: PUSH
31785: LD_INT 80
31787: PUSH
31788: LD_INT 65
31790: PUSH
31791: LD_INT 100
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31799: LD_VAR 0 6
31803: PPUSH
31804: CALL_OW 263
31808: PUSH
31809: LD_INT 1
31811: EQUAL
31812: IFFALSE 31847
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31814: LD_ADDR_VAR 0 10
31818: PUSH
31819: LD_VAR 0 10
31823: PUSH
31824: LD_VAR 0 6
31828: PPUSH
31829: CALL_OW 311
31833: PPUSH
31834: LD_INT 3
31836: PPUSH
31837: CALL_OW 259
31841: PUSH
31842: LD_INT 4
31844: MUL
31845: MUL
31846: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31847: LD_VAR 0 6
31851: PPUSH
31852: CALL_OW 263
31856: PUSH
31857: LD_INT 2
31859: EQUAL
31860: IFFALSE 31911
// begin j := IsControledBy ( i ) ;
31862: LD_ADDR_VAR 0 7
31866: PUSH
31867: LD_VAR 0 6
31871: PPUSH
31872: CALL_OW 312
31876: ST_TO_ADDR
// if j then
31877: LD_VAR 0 7
31881: IFFALSE 31911
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31883: LD_ADDR_VAR 0 10
31887: PUSH
31888: LD_VAR 0 10
31892: PUSH
31893: LD_VAR 0 7
31897: PPUSH
31898: LD_INT 3
31900: PPUSH
31901: CALL_OW 259
31905: PUSH
31906: LD_INT 3
31908: MUL
31909: MUL
31910: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31911: LD_VAR 0 6
31915: PPUSH
31916: CALL_OW 264
31920: PUSH
31921: LD_INT 5
31923: PUSH
31924: LD_INT 6
31926: PUSH
31927: LD_INT 46
31929: PUSH
31930: LD_INT 44
31932: PUSH
31933: LD_INT 47
31935: PUSH
31936: LD_INT 45
31938: PUSH
31939: LD_INT 28
31941: PUSH
31942: LD_INT 7
31944: PUSH
31945: LD_INT 27
31947: PUSH
31948: LD_INT 29
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: IN
31963: PUSH
31964: LD_VAR 0 1
31968: PPUSH
31969: LD_INT 52
31971: PPUSH
31972: CALL_OW 321
31976: PUSH
31977: LD_INT 2
31979: EQUAL
31980: AND
31981: IFFALSE 31998
// bpoints := bpoints * 1.2 ;
31983: LD_ADDR_VAR 0 10
31987: PUSH
31988: LD_VAR 0 10
31992: PUSH
31993: LD_REAL  1.20000000000000E+0000
31996: MUL
31997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31998: LD_VAR 0 6
32002: PPUSH
32003: CALL_OW 264
32007: PUSH
32008: LD_INT 6
32010: PUSH
32011: LD_INT 46
32013: PUSH
32014: LD_INT 47
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: LIST
32021: IN
32022: IFFALSE 32039
// bpoints := bpoints * 1.2 ;
32024: LD_ADDR_VAR 0 10
32028: PUSH
32029: LD_VAR 0 10
32033: PUSH
32034: LD_REAL  1.20000000000000E+0000
32037: MUL
32038: ST_TO_ADDR
// end ; unit_building :
32039: GO 32053
32041: LD_INT 3
32043: DOUBLE
32044: EQUAL
32045: IFTRUE 32049
32047: GO 32052
32049: POP
// ; end ;
32050: GO 32053
32052: POP
// for j = 1 to 3 do
32053: LD_ADDR_VAR 0 7
32057: PUSH
32058: DOUBLE
32059: LD_INT 1
32061: DEC
32062: ST_TO_ADDR
32063: LD_INT 3
32065: PUSH
32066: FOR_TO
32067: IFFALSE 32120
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32069: LD_ADDR_VAR 0 5
32073: PUSH
32074: LD_VAR 0 5
32078: PPUSH
32079: LD_VAR 0 7
32083: PPUSH
32084: LD_VAR 0 5
32088: PUSH
32089: LD_VAR 0 7
32093: ARRAY
32094: PUSH
32095: LD_VAR 0 9
32099: PUSH
32100: LD_VAR 0 7
32104: ARRAY
32105: PUSH
32106: LD_VAR 0 10
32110: MUL
32111: PLUS
32112: PPUSH
32113: CALL_OW 1
32117: ST_TO_ADDR
32118: GO 32066
32120: POP
32121: POP
// end ;
32122: GO 30599
32124: POP
32125: POP
// result := Replace ( result , 4 , tmp ) ;
32126: LD_ADDR_VAR 0 5
32130: PUSH
32131: LD_VAR 0 5
32135: PPUSH
32136: LD_INT 4
32138: PPUSH
32139: LD_VAR 0 8
32143: PPUSH
32144: CALL_OW 1
32148: ST_TO_ADDR
// end ;
32149: LD_VAR 0 5
32153: RET
// export function DangerAtRange ( unit , range ) ; begin
32154: LD_INT 0
32156: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32157: LD_ADDR_VAR 0 3
32161: PUSH
32162: LD_VAR 0 1
32166: PPUSH
32167: CALL_OW 255
32171: PPUSH
32172: LD_VAR 0 1
32176: PPUSH
32177: CALL_OW 250
32181: PPUSH
32182: LD_VAR 0 1
32186: PPUSH
32187: CALL_OW 251
32191: PPUSH
32192: LD_VAR 0 2
32196: PPUSH
32197: CALL 30451 0 4
32201: ST_TO_ADDR
// end ;
32202: LD_VAR 0 3
32206: RET
// export function DangerInArea ( side , area ) ; begin
32207: LD_INT 0
32209: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32210: LD_ADDR_VAR 0 3
32214: PUSH
32215: LD_VAR 0 2
32219: PPUSH
32220: LD_INT 81
32222: PUSH
32223: LD_VAR 0 1
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PPUSH
32232: CALL_OW 70
32236: ST_TO_ADDR
// end ;
32237: LD_VAR 0 3
32241: RET
// export function IsExtension ( b ) ; begin
32242: LD_INT 0
32244: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32245: LD_ADDR_VAR 0 2
32249: PUSH
32250: LD_VAR 0 1
32254: PUSH
32255: LD_INT 23
32257: PUSH
32258: LD_INT 20
32260: PUSH
32261: LD_INT 22
32263: PUSH
32264: LD_INT 17
32266: PUSH
32267: LD_INT 24
32269: PUSH
32270: LD_INT 21
32272: PUSH
32273: LD_INT 19
32275: PUSH
32276: LD_INT 16
32278: PUSH
32279: LD_INT 25
32281: PUSH
32282: LD_INT 18
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: IN
32297: ST_TO_ADDR
// end ;
32298: LD_VAR 0 2
32302: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32303: LD_INT 0
32305: PPUSH
32306: PPUSH
32307: PPUSH
// result := [ ] ;
32308: LD_ADDR_VAR 0 4
32312: PUSH
32313: EMPTY
32314: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32315: LD_ADDR_VAR 0 5
32319: PUSH
32320: LD_VAR 0 2
32324: PPUSH
32325: LD_INT 21
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PPUSH
32335: CALL_OW 70
32339: ST_TO_ADDR
// if not tmp then
32340: LD_VAR 0 5
32344: NOT
32345: IFFALSE 32349
// exit ;
32347: GO 32413
// if checkLink then
32349: LD_VAR 0 3
32353: IFFALSE 32403
// begin for i in tmp do
32355: LD_ADDR_VAR 0 6
32359: PUSH
32360: LD_VAR 0 5
32364: PUSH
32365: FOR_IN
32366: IFFALSE 32401
// if GetBase ( i ) <> base then
32368: LD_VAR 0 6
32372: PPUSH
32373: CALL_OW 274
32377: PUSH
32378: LD_VAR 0 1
32382: NONEQUAL
32383: IFFALSE 32399
// ComLinkToBase ( base , i ) ;
32385: LD_VAR 0 1
32389: PPUSH
32390: LD_VAR 0 6
32394: PPUSH
32395: CALL_OW 169
32399: GO 32365
32401: POP
32402: POP
// end ; result := tmp ;
32403: LD_ADDR_VAR 0 4
32407: PUSH
32408: LD_VAR 0 5
32412: ST_TO_ADDR
// end ;
32413: LD_VAR 0 4
32417: RET
// export function ComComplete ( units , b ) ; var i ; begin
32418: LD_INT 0
32420: PPUSH
32421: PPUSH
// if not units then
32422: LD_VAR 0 1
32426: NOT
32427: IFFALSE 32431
// exit ;
32429: GO 32521
// for i in units do
32431: LD_ADDR_VAR 0 4
32435: PUSH
32436: LD_VAR 0 1
32440: PUSH
32441: FOR_IN
32442: IFFALSE 32519
// if BuildingStatus ( b ) = bs_build then
32444: LD_VAR 0 2
32448: PPUSH
32449: CALL_OW 461
32453: PUSH
32454: LD_INT 1
32456: EQUAL
32457: IFFALSE 32517
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32459: LD_VAR 0 4
32463: PPUSH
32464: LD_STRING h
32466: PUSH
32467: LD_VAR 0 2
32471: PPUSH
32472: CALL_OW 250
32476: PUSH
32477: LD_VAR 0 2
32481: PPUSH
32482: CALL_OW 251
32486: PUSH
32487: LD_VAR 0 2
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: PPUSH
32513: CALL_OW 446
32517: GO 32441
32519: POP
32520: POP
// end ;
32521: LD_VAR 0 3
32525: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32526: LD_INT 0
32528: PPUSH
32529: PPUSH
32530: PPUSH
32531: PPUSH
32532: PPUSH
32533: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
32534: LD_VAR 0 1
32538: NOT
32539: PUSH
32540: LD_VAR 0 1
32544: PPUSH
32545: CALL_OW 263
32549: PUSH
32550: LD_INT 2
32552: EQUAL
32553: NOT
32554: OR
32555: IFFALSE 32559
// exit ;
32557: GO 32875
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32559: LD_ADDR_VAR 0 6
32563: PUSH
32564: LD_INT 22
32566: PUSH
32567: LD_VAR 0 1
32571: PPUSH
32572: CALL_OW 255
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: LD_INT 30
32586: PUSH
32587: LD_INT 36
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 34
32596: PUSH
32597: LD_INT 31
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PPUSH
32613: CALL_OW 69
32617: ST_TO_ADDR
// if not tmp then
32618: LD_VAR 0 6
32622: NOT
32623: IFFALSE 32627
// exit ;
32625: GO 32875
// result := [ ] ;
32627: LD_ADDR_VAR 0 2
32631: PUSH
32632: EMPTY
32633: ST_TO_ADDR
// for i in tmp do
32634: LD_ADDR_VAR 0 3
32638: PUSH
32639: LD_VAR 0 6
32643: PUSH
32644: FOR_IN
32645: IFFALSE 32716
// begin t := UnitsInside ( i ) ;
32647: LD_ADDR_VAR 0 4
32651: PUSH
32652: LD_VAR 0 3
32656: PPUSH
32657: CALL_OW 313
32661: ST_TO_ADDR
// if t then
32662: LD_VAR 0 4
32666: IFFALSE 32714
// for j in t do
32668: LD_ADDR_VAR 0 7
32672: PUSH
32673: LD_VAR 0 4
32677: PUSH
32678: FOR_IN
32679: IFFALSE 32712
// result := Insert ( result , result + 1 , j ) ;
32681: LD_ADDR_VAR 0 2
32685: PUSH
32686: LD_VAR 0 2
32690: PPUSH
32691: LD_VAR 0 2
32695: PUSH
32696: LD_INT 1
32698: PLUS
32699: PPUSH
32700: LD_VAR 0 7
32704: PPUSH
32705: CALL_OW 2
32709: ST_TO_ADDR
32710: GO 32678
32712: POP
32713: POP
// end ;
32714: GO 32644
32716: POP
32717: POP
// if not result then
32718: LD_VAR 0 2
32722: NOT
32723: IFFALSE 32727
// exit ;
32725: GO 32875
// mech := result [ 1 ] ;
32727: LD_ADDR_VAR 0 5
32731: PUSH
32732: LD_VAR 0 2
32736: PUSH
32737: LD_INT 1
32739: ARRAY
32740: ST_TO_ADDR
// if result > 1 then
32741: LD_VAR 0 2
32745: PUSH
32746: LD_INT 1
32748: GREATER
32749: IFFALSE 32861
// for i = 2 to result do
32751: LD_ADDR_VAR 0 3
32755: PUSH
32756: DOUBLE
32757: LD_INT 2
32759: DEC
32760: ST_TO_ADDR
32761: LD_VAR 0 2
32765: PUSH
32766: FOR_TO
32767: IFFALSE 32859
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32769: LD_ADDR_VAR 0 4
32773: PUSH
32774: LD_VAR 0 2
32778: PUSH
32779: LD_VAR 0 3
32783: ARRAY
32784: PPUSH
32785: LD_INT 3
32787: PPUSH
32788: CALL_OW 259
32792: PUSH
32793: LD_VAR 0 2
32797: PUSH
32798: LD_VAR 0 3
32802: ARRAY
32803: PPUSH
32804: CALL_OW 432
32808: MINUS
32809: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32810: LD_VAR 0 4
32814: PUSH
32815: LD_VAR 0 5
32819: PPUSH
32820: LD_INT 3
32822: PPUSH
32823: CALL_OW 259
32827: PUSH
32828: LD_VAR 0 5
32832: PPUSH
32833: CALL_OW 432
32837: MINUS
32838: GREATEREQUAL
32839: IFFALSE 32857
// mech := result [ i ] ;
32841: LD_ADDR_VAR 0 5
32845: PUSH
32846: LD_VAR 0 2
32850: PUSH
32851: LD_VAR 0 3
32855: ARRAY
32856: ST_TO_ADDR
// end ;
32857: GO 32766
32859: POP
32860: POP
// ComLinkTo ( vehicle , mech ) ;
32861: LD_VAR 0 1
32865: PPUSH
32866: LD_VAR 0 5
32870: PPUSH
32871: CALL_OW 135
// end ;
32875: LD_VAR 0 2
32879: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32880: LD_INT 0
32882: PPUSH
32883: PPUSH
32884: PPUSH
32885: PPUSH
32886: PPUSH
32887: PPUSH
32888: PPUSH
32889: PPUSH
32890: PPUSH
32891: PPUSH
32892: PPUSH
32893: PPUSH
32894: PPUSH
// result := [ ] ;
32895: LD_ADDR_VAR 0 7
32899: PUSH
32900: EMPTY
32901: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32902: LD_VAR 0 1
32906: PPUSH
32907: CALL_OW 266
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: IN
32922: NOT
32923: IFFALSE 32927
// exit ;
32925: GO 34561
// if name then
32927: LD_VAR 0 3
32931: IFFALSE 32947
// SetBName ( base_dep , name ) ;
32933: LD_VAR 0 1
32937: PPUSH
32938: LD_VAR 0 3
32942: PPUSH
32943: CALL_OW 500
// base := GetBase ( base_dep ) ;
32947: LD_ADDR_VAR 0 15
32951: PUSH
32952: LD_VAR 0 1
32956: PPUSH
32957: CALL_OW 274
32961: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32962: LD_ADDR_VAR 0 16
32966: PUSH
32967: LD_VAR 0 1
32971: PPUSH
32972: CALL_OW 255
32976: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32977: LD_ADDR_VAR 0 17
32981: PUSH
32982: LD_VAR 0 1
32986: PPUSH
32987: CALL_OW 248
32991: ST_TO_ADDR
// if sources then
32992: LD_VAR 0 5
32996: IFFALSE 33043
// for i = 1 to 3 do
32998: LD_ADDR_VAR 0 8
33002: PUSH
33003: DOUBLE
33004: LD_INT 1
33006: DEC
33007: ST_TO_ADDR
33008: LD_INT 3
33010: PUSH
33011: FOR_TO
33012: IFFALSE 33041
// AddResourceType ( base , i , sources [ i ] ) ;
33014: LD_VAR 0 15
33018: PPUSH
33019: LD_VAR 0 8
33023: PPUSH
33024: LD_VAR 0 5
33028: PUSH
33029: LD_VAR 0 8
33033: ARRAY
33034: PPUSH
33035: CALL_OW 276
33039: GO 33011
33041: POP
33042: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33043: LD_ADDR_VAR 0 18
33047: PUSH
33048: LD_VAR 0 15
33052: PPUSH
33053: LD_VAR 0 2
33057: PPUSH
33058: LD_INT 1
33060: PPUSH
33061: CALL 32303 0 3
33065: ST_TO_ADDR
// InitHc ;
33066: CALL_OW 19
// InitUc ;
33070: CALL_OW 18
// uc_side := side ;
33074: LD_ADDR_OWVAR 20
33078: PUSH
33079: LD_VAR 0 16
33083: ST_TO_ADDR
// uc_nation := nation ;
33084: LD_ADDR_OWVAR 21
33088: PUSH
33089: LD_VAR 0 17
33093: ST_TO_ADDR
// if buildings then
33094: LD_VAR 0 18
33098: IFFALSE 34420
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33100: LD_ADDR_VAR 0 19
33104: PUSH
33105: LD_VAR 0 18
33109: PPUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 30
33115: PUSH
33116: LD_INT 29
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 30
33125: PUSH
33126: LD_INT 30
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: LIST
33137: PPUSH
33138: CALL_OW 72
33142: ST_TO_ADDR
// if tmp then
33143: LD_VAR 0 19
33147: IFFALSE 33195
// for i in tmp do
33149: LD_ADDR_VAR 0 8
33153: PUSH
33154: LD_VAR 0 19
33158: PUSH
33159: FOR_IN
33160: IFFALSE 33193
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33162: LD_VAR 0 8
33166: PPUSH
33167: CALL_OW 250
33171: PPUSH
33172: LD_VAR 0 8
33176: PPUSH
33177: CALL_OW 251
33181: PPUSH
33182: LD_VAR 0 16
33186: PPUSH
33187: CALL_OW 441
33191: GO 33159
33193: POP
33194: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33195: LD_VAR 0 18
33199: PPUSH
33200: LD_INT 2
33202: PUSH
33203: LD_INT 30
33205: PUSH
33206: LD_INT 32
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 30
33215: PUSH
33216: LD_INT 33
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: PPUSH
33228: CALL_OW 72
33232: IFFALSE 33320
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33234: LD_ADDR_VAR 0 8
33238: PUSH
33239: LD_VAR 0 18
33243: PPUSH
33244: LD_INT 2
33246: PUSH
33247: LD_INT 30
33249: PUSH
33250: LD_INT 32
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 30
33259: PUSH
33260: LD_INT 33
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: LIST
33271: PPUSH
33272: CALL_OW 72
33276: PUSH
33277: FOR_IN
33278: IFFALSE 33318
// begin if not GetBWeapon ( i ) then
33280: LD_VAR 0 8
33284: PPUSH
33285: CALL_OW 269
33289: NOT
33290: IFFALSE 33316
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33292: LD_VAR 0 8
33296: PPUSH
33297: LD_VAR 0 8
33301: PPUSH
33302: LD_VAR 0 2
33306: PPUSH
33307: CALL 34566 0 2
33311: PPUSH
33312: CALL_OW 431
// end ;
33316: GO 33277
33318: POP
33319: POP
// end ; for i = 1 to personel do
33320: LD_ADDR_VAR 0 8
33324: PUSH
33325: DOUBLE
33326: LD_INT 1
33328: DEC
33329: ST_TO_ADDR
33330: LD_VAR 0 6
33334: PUSH
33335: FOR_TO
33336: IFFALSE 34400
// begin if i > 4 then
33338: LD_VAR 0 8
33342: PUSH
33343: LD_INT 4
33345: GREATER
33346: IFFALSE 33350
// break ;
33348: GO 34400
// case i of 1 :
33350: LD_VAR 0 8
33354: PUSH
33355: LD_INT 1
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33363
33361: GO 33443
33363: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33364: LD_ADDR_VAR 0 12
33368: PUSH
33369: LD_VAR 0 18
33373: PPUSH
33374: LD_INT 22
33376: PUSH
33377: LD_VAR 0 16
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 58
33388: PUSH
33389: EMPTY
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: LD_INT 30
33397: PUSH
33398: LD_INT 32
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 30
33407: PUSH
33408: LD_INT 4
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 30
33417: PUSH
33418: LD_INT 5
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: LIST
33435: PPUSH
33436: CALL_OW 72
33440: ST_TO_ADDR
33441: GO 33665
33443: LD_INT 2
33445: DOUBLE
33446: EQUAL
33447: IFTRUE 33451
33449: GO 33513
33451: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33452: LD_ADDR_VAR 0 12
33456: PUSH
33457: LD_VAR 0 18
33461: PPUSH
33462: LD_INT 22
33464: PUSH
33465: LD_VAR 0 16
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: LD_INT 30
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 30
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PPUSH
33506: CALL_OW 72
33510: ST_TO_ADDR
33511: GO 33665
33513: LD_INT 3
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33583
33521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33522: LD_ADDR_VAR 0 12
33526: PUSH
33527: LD_VAR 0 18
33531: PPUSH
33532: LD_INT 22
33534: PUSH
33535: LD_VAR 0 16
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 2
33546: PUSH
33547: LD_INT 30
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 30
33559: PUSH
33560: LD_INT 3
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PPUSH
33576: CALL_OW 72
33580: ST_TO_ADDR
33581: GO 33665
33583: LD_INT 4
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33591
33589: GO 33664
33591: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33592: LD_ADDR_VAR 0 12
33596: PUSH
33597: LD_VAR 0 18
33601: PPUSH
33602: LD_INT 22
33604: PUSH
33605: LD_VAR 0 16
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 30
33619: PUSH
33620: LD_INT 6
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 30
33629: PUSH
33630: LD_INT 7
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 30
33639: PUSH
33640: LD_INT 8
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PPUSH
33657: CALL_OW 72
33661: ST_TO_ADDR
33662: GO 33665
33664: POP
// if i = 1 then
33665: LD_VAR 0 8
33669: PUSH
33670: LD_INT 1
33672: EQUAL
33673: IFFALSE 33784
// begin tmp := [ ] ;
33675: LD_ADDR_VAR 0 19
33679: PUSH
33680: EMPTY
33681: ST_TO_ADDR
// for j in f do
33682: LD_ADDR_VAR 0 9
33686: PUSH
33687: LD_VAR 0 12
33691: PUSH
33692: FOR_IN
33693: IFFALSE 33766
// if GetBType ( j ) = b_bunker then
33695: LD_VAR 0 9
33699: PPUSH
33700: CALL_OW 266
33704: PUSH
33705: LD_INT 32
33707: EQUAL
33708: IFFALSE 33735
// tmp := Insert ( tmp , 1 , j ) else
33710: LD_ADDR_VAR 0 19
33714: PUSH
33715: LD_VAR 0 19
33719: PPUSH
33720: LD_INT 1
33722: PPUSH
33723: LD_VAR 0 9
33727: PPUSH
33728: CALL_OW 2
33732: ST_TO_ADDR
33733: GO 33764
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33735: LD_ADDR_VAR 0 19
33739: PUSH
33740: LD_VAR 0 19
33744: PPUSH
33745: LD_VAR 0 19
33749: PUSH
33750: LD_INT 1
33752: PLUS
33753: PPUSH
33754: LD_VAR 0 9
33758: PPUSH
33759: CALL_OW 2
33763: ST_TO_ADDR
33764: GO 33692
33766: POP
33767: POP
// if tmp then
33768: LD_VAR 0 19
33772: IFFALSE 33784
// f := tmp ;
33774: LD_ADDR_VAR 0 12
33778: PUSH
33779: LD_VAR 0 19
33783: ST_TO_ADDR
// end ; x := personel [ i ] ;
33784: LD_ADDR_VAR 0 13
33788: PUSH
33789: LD_VAR 0 6
33793: PUSH
33794: LD_VAR 0 8
33798: ARRAY
33799: ST_TO_ADDR
// if x = - 1 then
33800: LD_VAR 0 13
33804: PUSH
33805: LD_INT 1
33807: NEG
33808: EQUAL
33809: IFFALSE 34018
// begin for j in f do
33811: LD_ADDR_VAR 0 9
33815: PUSH
33816: LD_VAR 0 12
33820: PUSH
33821: FOR_IN
33822: IFFALSE 34014
// repeat InitHc ;
33824: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33828: LD_VAR 0 9
33832: PPUSH
33833: CALL_OW 266
33837: PUSH
33838: LD_INT 5
33840: EQUAL
33841: IFFALSE 33911
// begin if UnitsInside ( j ) < 3 then
33843: LD_VAR 0 9
33847: PPUSH
33848: CALL_OW 313
33852: PUSH
33853: LD_INT 3
33855: LESS
33856: IFFALSE 33892
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33858: LD_INT 0
33860: PPUSH
33861: LD_INT 5
33863: PUSH
33864: LD_INT 8
33866: PUSH
33867: LD_INT 9
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: PUSH
33875: LD_VAR 0 17
33879: ARRAY
33880: PPUSH
33881: LD_VAR 0 4
33885: PPUSH
33886: CALL_OW 380
33890: GO 33909
// PrepareHuman ( false , i , skill ) ;
33892: LD_INT 0
33894: PPUSH
33895: LD_VAR 0 8
33899: PPUSH
33900: LD_VAR 0 4
33904: PPUSH
33905: CALL_OW 380
// end else
33909: GO 33928
// PrepareHuman ( false , i , skill ) ;
33911: LD_INT 0
33913: PPUSH
33914: LD_VAR 0 8
33918: PPUSH
33919: LD_VAR 0 4
33923: PPUSH
33924: CALL_OW 380
// un := CreateHuman ;
33928: LD_ADDR_VAR 0 14
33932: PUSH
33933: CALL_OW 44
33937: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33938: LD_ADDR_VAR 0 7
33942: PUSH
33943: LD_VAR 0 7
33947: PPUSH
33948: LD_INT 1
33950: PPUSH
33951: LD_VAR 0 14
33955: PPUSH
33956: CALL_OW 2
33960: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33961: LD_VAR 0 14
33965: PPUSH
33966: LD_VAR 0 9
33970: PPUSH
33971: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33975: LD_VAR 0 9
33979: PPUSH
33980: CALL_OW 313
33984: PUSH
33985: LD_INT 6
33987: EQUAL
33988: PUSH
33989: LD_VAR 0 9
33993: PPUSH
33994: CALL_OW 266
33998: PUSH
33999: LD_INT 32
34001: PUSH
34002: LD_INT 31
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: IN
34009: OR
34010: IFFALSE 33824
34012: GO 33821
34014: POP
34015: POP
// end else
34016: GO 34398
// for j = 1 to x do
34018: LD_ADDR_VAR 0 9
34022: PUSH
34023: DOUBLE
34024: LD_INT 1
34026: DEC
34027: ST_TO_ADDR
34028: LD_VAR 0 13
34032: PUSH
34033: FOR_TO
34034: IFFALSE 34396
// begin InitHc ;
34036: CALL_OW 19
// if not f then
34040: LD_VAR 0 12
34044: NOT
34045: IFFALSE 34134
// begin PrepareHuman ( false , i , skill ) ;
34047: LD_INT 0
34049: PPUSH
34050: LD_VAR 0 8
34054: PPUSH
34055: LD_VAR 0 4
34059: PPUSH
34060: CALL_OW 380
// un := CreateHuman ;
34064: LD_ADDR_VAR 0 14
34068: PUSH
34069: CALL_OW 44
34073: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34074: LD_ADDR_VAR 0 7
34078: PUSH
34079: LD_VAR 0 7
34083: PPUSH
34084: LD_INT 1
34086: PPUSH
34087: LD_VAR 0 14
34091: PPUSH
34092: CALL_OW 2
34096: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34097: LD_VAR 0 14
34101: PPUSH
34102: LD_VAR 0 1
34106: PPUSH
34107: CALL_OW 250
34111: PPUSH
34112: LD_VAR 0 1
34116: PPUSH
34117: CALL_OW 251
34121: PPUSH
34122: LD_INT 10
34124: PPUSH
34125: LD_INT 0
34127: PPUSH
34128: CALL_OW 50
// continue ;
34132: GO 34033
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34134: LD_VAR 0 12
34138: PUSH
34139: LD_INT 1
34141: ARRAY
34142: PPUSH
34143: CALL_OW 313
34147: PUSH
34148: LD_VAR 0 12
34152: PUSH
34153: LD_INT 1
34155: ARRAY
34156: PPUSH
34157: CALL_OW 266
34161: PUSH
34162: LD_INT 32
34164: PUSH
34165: LD_INT 31
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: IN
34172: AND
34173: PUSH
34174: LD_VAR 0 12
34178: PUSH
34179: LD_INT 1
34181: ARRAY
34182: PPUSH
34183: CALL_OW 313
34187: PUSH
34188: LD_INT 6
34190: EQUAL
34191: OR
34192: IFFALSE 34212
// f := Delete ( f , 1 ) ;
34194: LD_ADDR_VAR 0 12
34198: PUSH
34199: LD_VAR 0 12
34203: PPUSH
34204: LD_INT 1
34206: PPUSH
34207: CALL_OW 3
34211: ST_TO_ADDR
// if not f then
34212: LD_VAR 0 12
34216: NOT
34217: IFFALSE 34235
// begin x := x + 2 ;
34219: LD_ADDR_VAR 0 13
34223: PUSH
34224: LD_VAR 0 13
34228: PUSH
34229: LD_INT 2
34231: PLUS
34232: ST_TO_ADDR
// continue ;
34233: GO 34033
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34235: LD_VAR 0 12
34239: PUSH
34240: LD_INT 1
34242: ARRAY
34243: PPUSH
34244: CALL_OW 266
34248: PUSH
34249: LD_INT 5
34251: EQUAL
34252: IFFALSE 34326
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34254: LD_VAR 0 12
34258: PUSH
34259: LD_INT 1
34261: ARRAY
34262: PPUSH
34263: CALL_OW 313
34267: PUSH
34268: LD_INT 3
34270: LESS
34271: IFFALSE 34307
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34273: LD_INT 0
34275: PPUSH
34276: LD_INT 5
34278: PUSH
34279: LD_INT 8
34281: PUSH
34282: LD_INT 9
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: PUSH
34290: LD_VAR 0 17
34294: ARRAY
34295: PPUSH
34296: LD_VAR 0 4
34300: PPUSH
34301: CALL_OW 380
34305: GO 34324
// PrepareHuman ( false , i , skill ) ;
34307: LD_INT 0
34309: PPUSH
34310: LD_VAR 0 8
34314: PPUSH
34315: LD_VAR 0 4
34319: PPUSH
34320: CALL_OW 380
// end else
34324: GO 34343
// PrepareHuman ( false , i , skill ) ;
34326: LD_INT 0
34328: PPUSH
34329: LD_VAR 0 8
34333: PPUSH
34334: LD_VAR 0 4
34338: PPUSH
34339: CALL_OW 380
// un := CreateHuman ;
34343: LD_ADDR_VAR 0 14
34347: PUSH
34348: CALL_OW 44
34352: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34353: LD_ADDR_VAR 0 7
34357: PUSH
34358: LD_VAR 0 7
34362: PPUSH
34363: LD_INT 1
34365: PPUSH
34366: LD_VAR 0 14
34370: PPUSH
34371: CALL_OW 2
34375: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34376: LD_VAR 0 14
34380: PPUSH
34381: LD_VAR 0 12
34385: PUSH
34386: LD_INT 1
34388: ARRAY
34389: PPUSH
34390: CALL_OW 52
// end ;
34394: GO 34033
34396: POP
34397: POP
// end ;
34398: GO 33335
34400: POP
34401: POP
// result := result ^ buildings ;
34402: LD_ADDR_VAR 0 7
34406: PUSH
34407: LD_VAR 0 7
34411: PUSH
34412: LD_VAR 0 18
34416: ADD
34417: ST_TO_ADDR
// end else
34418: GO 34561
// begin for i = 1 to personel do
34420: LD_ADDR_VAR 0 8
34424: PUSH
34425: DOUBLE
34426: LD_INT 1
34428: DEC
34429: ST_TO_ADDR
34430: LD_VAR 0 6
34434: PUSH
34435: FOR_TO
34436: IFFALSE 34559
// begin if i > 4 then
34438: LD_VAR 0 8
34442: PUSH
34443: LD_INT 4
34445: GREATER
34446: IFFALSE 34450
// break ;
34448: GO 34559
// x := personel [ i ] ;
34450: LD_ADDR_VAR 0 13
34454: PUSH
34455: LD_VAR 0 6
34459: PUSH
34460: LD_VAR 0 8
34464: ARRAY
34465: ST_TO_ADDR
// if x = - 1 then
34466: LD_VAR 0 13
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: EQUAL
34475: IFFALSE 34479
// continue ;
34477: GO 34435
// PrepareHuman ( false , i , skill ) ;
34479: LD_INT 0
34481: PPUSH
34482: LD_VAR 0 8
34486: PPUSH
34487: LD_VAR 0 4
34491: PPUSH
34492: CALL_OW 380
// un := CreateHuman ;
34496: LD_ADDR_VAR 0 14
34500: PUSH
34501: CALL_OW 44
34505: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34506: LD_VAR 0 14
34510: PPUSH
34511: LD_VAR 0 1
34515: PPUSH
34516: CALL_OW 250
34520: PPUSH
34521: LD_VAR 0 1
34525: PPUSH
34526: CALL_OW 251
34530: PPUSH
34531: LD_INT 10
34533: PPUSH
34534: LD_INT 0
34536: PPUSH
34537: CALL_OW 50
// result := result ^ un ;
34541: LD_ADDR_VAR 0 7
34545: PUSH
34546: LD_VAR 0 7
34550: PUSH
34551: LD_VAR 0 14
34555: ADD
34556: ST_TO_ADDR
// end ;
34557: GO 34435
34559: POP
34560: POP
// end ; end ;
34561: LD_VAR 0 7
34565: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34566: LD_INT 0
34568: PPUSH
34569: PPUSH
34570: PPUSH
34571: PPUSH
34572: PPUSH
34573: PPUSH
34574: PPUSH
34575: PPUSH
34576: PPUSH
34577: PPUSH
34578: PPUSH
34579: PPUSH
34580: PPUSH
34581: PPUSH
34582: PPUSH
34583: PPUSH
// result := false ;
34584: LD_ADDR_VAR 0 3
34588: PUSH
34589: LD_INT 0
34591: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34592: LD_VAR 0 1
34596: NOT
34597: PUSH
34598: LD_VAR 0 1
34602: PPUSH
34603: CALL_OW 266
34607: PUSH
34608: LD_INT 32
34610: PUSH
34611: LD_INT 33
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: IN
34618: NOT
34619: OR
34620: IFFALSE 34624
// exit ;
34622: GO 35733
// nat := GetNation ( tower ) ;
34624: LD_ADDR_VAR 0 12
34628: PUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL_OW 248
34638: ST_TO_ADDR
// side := GetSide ( tower ) ;
34639: LD_ADDR_VAR 0 16
34643: PUSH
34644: LD_VAR 0 1
34648: PPUSH
34649: CALL_OW 255
34653: ST_TO_ADDR
// x := GetX ( tower ) ;
34654: LD_ADDR_VAR 0 10
34658: PUSH
34659: LD_VAR 0 1
34663: PPUSH
34664: CALL_OW 250
34668: ST_TO_ADDR
// y := GetY ( tower ) ;
34669: LD_ADDR_VAR 0 11
34673: PUSH
34674: LD_VAR 0 1
34678: PPUSH
34679: CALL_OW 251
34683: ST_TO_ADDR
// if not x or not y then
34684: LD_VAR 0 10
34688: NOT
34689: PUSH
34690: LD_VAR 0 11
34694: NOT
34695: OR
34696: IFFALSE 34700
// exit ;
34698: GO 35733
// weapon := 0 ;
34700: LD_ADDR_VAR 0 18
34704: PUSH
34705: LD_INT 0
34707: ST_TO_ADDR
// fac_list := [ ] ;
34708: LD_ADDR_VAR 0 17
34712: PUSH
34713: EMPTY
34714: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34715: LD_ADDR_VAR 0 6
34719: PUSH
34720: LD_VAR 0 1
34724: PPUSH
34725: CALL_OW 274
34729: PPUSH
34730: LD_VAR 0 2
34734: PPUSH
34735: LD_INT 0
34737: PPUSH
34738: CALL 32303 0 3
34742: PPUSH
34743: LD_INT 30
34745: PUSH
34746: LD_INT 3
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PPUSH
34753: CALL_OW 72
34757: ST_TO_ADDR
// if not factories then
34758: LD_VAR 0 6
34762: NOT
34763: IFFALSE 34767
// exit ;
34765: GO 35733
// for i in factories do
34767: LD_ADDR_VAR 0 8
34771: PUSH
34772: LD_VAR 0 6
34776: PUSH
34777: FOR_IN
34778: IFFALSE 34803
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34780: LD_ADDR_VAR 0 17
34784: PUSH
34785: LD_VAR 0 17
34789: PUSH
34790: LD_VAR 0 8
34794: PPUSH
34795: CALL_OW 478
34799: UNION
34800: ST_TO_ADDR
34801: GO 34777
34803: POP
34804: POP
// if not fac_list then
34805: LD_VAR 0 17
34809: NOT
34810: IFFALSE 34814
// exit ;
34812: GO 35733
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34814: LD_ADDR_VAR 0 5
34818: PUSH
34819: LD_INT 4
34821: PUSH
34822: LD_INT 5
34824: PUSH
34825: LD_INT 9
34827: PUSH
34828: LD_INT 10
34830: PUSH
34831: LD_INT 6
34833: PUSH
34834: LD_INT 7
34836: PUSH
34837: LD_INT 11
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 27
34851: PUSH
34852: LD_INT 28
34854: PUSH
34855: LD_INT 26
34857: PUSH
34858: LD_INT 30
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 43
34869: PUSH
34870: LD_INT 44
34872: PUSH
34873: LD_INT 46
34875: PUSH
34876: LD_INT 45
34878: PUSH
34879: LD_INT 47
34881: PUSH
34882: LD_INT 49
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: LIST
34897: PUSH
34898: LD_VAR 0 12
34902: ARRAY
34903: ST_TO_ADDR
// list := list isect fac_list ;
34904: LD_ADDR_VAR 0 5
34908: PUSH
34909: LD_VAR 0 5
34913: PUSH
34914: LD_VAR 0 17
34918: ISECT
34919: ST_TO_ADDR
// if not list then
34920: LD_VAR 0 5
34924: NOT
34925: IFFALSE 34929
// exit ;
34927: GO 35733
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34929: LD_VAR 0 12
34933: PUSH
34934: LD_INT 3
34936: EQUAL
34937: PUSH
34938: LD_INT 49
34940: PUSH
34941: LD_VAR 0 5
34945: IN
34946: AND
34947: PUSH
34948: LD_INT 31
34950: PPUSH
34951: LD_VAR 0 16
34955: PPUSH
34956: CALL_OW 321
34960: PUSH
34961: LD_INT 2
34963: EQUAL
34964: AND
34965: IFFALSE 35025
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34967: LD_INT 22
34969: PUSH
34970: LD_VAR 0 16
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 35
34981: PUSH
34982: LD_INT 49
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 91
34991: PUSH
34992: LD_VAR 0 1
34996: PUSH
34997: LD_INT 10
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: LIST
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: PPUSH
35010: CALL_OW 69
35014: NOT
35015: IFFALSE 35025
// weapon := ru_time_lapser ;
35017: LD_ADDR_VAR 0 18
35021: PUSH
35022: LD_INT 49
35024: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35025: LD_VAR 0 12
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: IN
35040: PUSH
35041: LD_INT 11
35043: PUSH
35044: LD_VAR 0 5
35048: IN
35049: PUSH
35050: LD_INT 30
35052: PUSH
35053: LD_VAR 0 5
35057: IN
35058: OR
35059: AND
35060: PUSH
35061: LD_INT 6
35063: PPUSH
35064: LD_VAR 0 16
35068: PPUSH
35069: CALL_OW 321
35073: PUSH
35074: LD_INT 2
35076: EQUAL
35077: AND
35078: IFFALSE 35243
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35080: LD_INT 22
35082: PUSH
35083: LD_VAR 0 16
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: LD_INT 35
35097: PUSH
35098: LD_INT 11
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 35
35107: PUSH
35108: LD_INT 30
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 91
35122: PUSH
35123: LD_VAR 0 1
35127: PUSH
35128: LD_INT 18
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: PPUSH
35141: CALL_OW 69
35145: NOT
35146: PUSH
35147: LD_INT 22
35149: PUSH
35150: LD_VAR 0 16
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: LD_INT 30
35164: PUSH
35165: LD_INT 32
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 30
35174: PUSH
35175: LD_INT 33
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 91
35189: PUSH
35190: LD_VAR 0 1
35194: PUSH
35195: LD_INT 12
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: PUSH
35208: EMPTY
35209: LIST
35210: PPUSH
35211: CALL_OW 69
35215: PUSH
35216: LD_INT 2
35218: GREATER
35219: AND
35220: IFFALSE 35243
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35222: LD_ADDR_VAR 0 18
35226: PUSH
35227: LD_INT 11
35229: PUSH
35230: LD_INT 30
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_VAR 0 12
35241: ARRAY
35242: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35243: LD_VAR 0 18
35247: NOT
35248: PUSH
35249: LD_INT 40
35251: PPUSH
35252: LD_VAR 0 16
35256: PPUSH
35257: CALL_OW 321
35261: PUSH
35262: LD_INT 2
35264: EQUAL
35265: AND
35266: PUSH
35267: LD_INT 7
35269: PUSH
35270: LD_VAR 0 5
35274: IN
35275: PUSH
35276: LD_INT 28
35278: PUSH
35279: LD_VAR 0 5
35283: IN
35284: OR
35285: PUSH
35286: LD_INT 45
35288: PUSH
35289: LD_VAR 0 5
35293: IN
35294: OR
35295: AND
35296: IFFALSE 35550
// begin hex := GetHexInfo ( x , y ) ;
35298: LD_ADDR_VAR 0 4
35302: PUSH
35303: LD_VAR 0 10
35307: PPUSH
35308: LD_VAR 0 11
35312: PPUSH
35313: CALL_OW 546
35317: ST_TO_ADDR
// if hex [ 1 ] then
35318: LD_VAR 0 4
35322: PUSH
35323: LD_INT 1
35325: ARRAY
35326: IFFALSE 35330
// exit ;
35328: GO 35733
// height := hex [ 2 ] ;
35330: LD_ADDR_VAR 0 15
35334: PUSH
35335: LD_VAR 0 4
35339: PUSH
35340: LD_INT 2
35342: ARRAY
35343: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35344: LD_ADDR_VAR 0 14
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: LD_INT 3
35357: PUSH
35358: LD_INT 5
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: ST_TO_ADDR
// for i in tmp do
35367: LD_ADDR_VAR 0 8
35371: PUSH
35372: LD_VAR 0 14
35376: PUSH
35377: FOR_IN
35378: IFFALSE 35548
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35380: LD_ADDR_VAR 0 9
35384: PUSH
35385: LD_VAR 0 10
35389: PPUSH
35390: LD_VAR 0 8
35394: PPUSH
35395: LD_INT 5
35397: PPUSH
35398: CALL_OW 272
35402: PUSH
35403: LD_VAR 0 11
35407: PPUSH
35408: LD_VAR 0 8
35412: PPUSH
35413: LD_INT 5
35415: PPUSH
35416: CALL_OW 273
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35425: LD_VAR 0 9
35429: PUSH
35430: LD_INT 1
35432: ARRAY
35433: PPUSH
35434: LD_VAR 0 9
35438: PUSH
35439: LD_INT 2
35441: ARRAY
35442: PPUSH
35443: CALL_OW 488
35447: IFFALSE 35546
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35449: LD_ADDR_VAR 0 4
35453: PUSH
35454: LD_VAR 0 9
35458: PUSH
35459: LD_INT 1
35461: ARRAY
35462: PPUSH
35463: LD_VAR 0 9
35467: PUSH
35468: LD_INT 2
35470: ARRAY
35471: PPUSH
35472: CALL_OW 546
35476: ST_TO_ADDR
// if hex [ 1 ] then
35477: LD_VAR 0 4
35481: PUSH
35482: LD_INT 1
35484: ARRAY
35485: IFFALSE 35489
// continue ;
35487: GO 35377
// h := hex [ 2 ] ;
35489: LD_ADDR_VAR 0 13
35493: PUSH
35494: LD_VAR 0 4
35498: PUSH
35499: LD_INT 2
35501: ARRAY
35502: ST_TO_ADDR
// if h + 7 < height then
35503: LD_VAR 0 13
35507: PUSH
35508: LD_INT 7
35510: PLUS
35511: PUSH
35512: LD_VAR 0 15
35516: LESS
35517: IFFALSE 35546
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35519: LD_ADDR_VAR 0 18
35523: PUSH
35524: LD_INT 7
35526: PUSH
35527: LD_INT 28
35529: PUSH
35530: LD_INT 45
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: PUSH
35538: LD_VAR 0 12
35542: ARRAY
35543: ST_TO_ADDR
// break ;
35544: GO 35548
// end ; end ; end ;
35546: GO 35377
35548: POP
35549: POP
// end ; if not weapon then
35550: LD_VAR 0 18
35554: NOT
35555: IFFALSE 35615
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35557: LD_ADDR_VAR 0 5
35561: PUSH
35562: LD_VAR 0 5
35566: PUSH
35567: LD_INT 11
35569: PUSH
35570: LD_INT 30
35572: PUSH
35573: LD_INT 49
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: LIST
35580: DIFF
35581: ST_TO_ADDR
// if not list then
35582: LD_VAR 0 5
35586: NOT
35587: IFFALSE 35591
// exit ;
35589: GO 35733
// weapon := list [ rand ( 1 , list ) ] ;
35591: LD_ADDR_VAR 0 18
35595: PUSH
35596: LD_VAR 0 5
35600: PUSH
35601: LD_INT 1
35603: PPUSH
35604: LD_VAR 0 5
35608: PPUSH
35609: CALL_OW 12
35613: ARRAY
35614: ST_TO_ADDR
// end ; if weapon then
35615: LD_VAR 0 18
35619: IFFALSE 35733
// begin tmp := CostOfWeapon ( weapon ) ;
35621: LD_ADDR_VAR 0 14
35625: PUSH
35626: LD_VAR 0 18
35630: PPUSH
35631: CALL_OW 451
35635: ST_TO_ADDR
// j := GetBase ( tower ) ;
35636: LD_ADDR_VAR 0 9
35640: PUSH
35641: LD_VAR 0 1
35645: PPUSH
35646: CALL_OW 274
35650: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35651: LD_VAR 0 9
35655: PPUSH
35656: LD_INT 1
35658: PPUSH
35659: CALL_OW 275
35663: PUSH
35664: LD_VAR 0 14
35668: PUSH
35669: LD_INT 1
35671: ARRAY
35672: GREATEREQUAL
35673: PUSH
35674: LD_VAR 0 9
35678: PPUSH
35679: LD_INT 2
35681: PPUSH
35682: CALL_OW 275
35686: PUSH
35687: LD_VAR 0 14
35691: PUSH
35692: LD_INT 2
35694: ARRAY
35695: GREATEREQUAL
35696: AND
35697: PUSH
35698: LD_VAR 0 9
35702: PPUSH
35703: LD_INT 3
35705: PPUSH
35706: CALL_OW 275
35710: PUSH
35711: LD_VAR 0 14
35715: PUSH
35716: LD_INT 3
35718: ARRAY
35719: GREATEREQUAL
35720: AND
35721: IFFALSE 35733
// result := weapon ;
35723: LD_ADDR_VAR 0 3
35727: PUSH
35728: LD_VAR 0 18
35732: ST_TO_ADDR
// end ; end ;
35733: LD_VAR 0 3
35737: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35738: LD_INT 0
35740: PPUSH
35741: PPUSH
// result := true ;
35742: LD_ADDR_VAR 0 3
35746: PUSH
35747: LD_INT 1
35749: ST_TO_ADDR
// if array1 = array2 then
35750: LD_VAR 0 1
35754: PUSH
35755: LD_VAR 0 2
35759: EQUAL
35760: IFFALSE 35820
// begin for i = 1 to array1 do
35762: LD_ADDR_VAR 0 4
35766: PUSH
35767: DOUBLE
35768: LD_INT 1
35770: DEC
35771: ST_TO_ADDR
35772: LD_VAR 0 1
35776: PUSH
35777: FOR_TO
35778: IFFALSE 35816
// if array1 [ i ] <> array2 [ i ] then
35780: LD_VAR 0 1
35784: PUSH
35785: LD_VAR 0 4
35789: ARRAY
35790: PUSH
35791: LD_VAR 0 2
35795: PUSH
35796: LD_VAR 0 4
35800: ARRAY
35801: NONEQUAL
35802: IFFALSE 35814
// begin result := false ;
35804: LD_ADDR_VAR 0 3
35808: PUSH
35809: LD_INT 0
35811: ST_TO_ADDR
// break ;
35812: GO 35816
// end ;
35814: GO 35777
35816: POP
35817: POP
// end else
35818: GO 35828
// result := false ;
35820: LD_ADDR_VAR 0 3
35824: PUSH
35825: LD_INT 0
35827: ST_TO_ADDR
// end ;
35828: LD_VAR 0 3
35832: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35833: LD_INT 0
35835: PPUSH
35836: PPUSH
// if not array1 or not array2 then
35837: LD_VAR 0 1
35841: NOT
35842: PUSH
35843: LD_VAR 0 2
35847: NOT
35848: OR
35849: IFFALSE 35853
// exit ;
35851: GO 35917
// result := true ;
35853: LD_ADDR_VAR 0 3
35857: PUSH
35858: LD_INT 1
35860: ST_TO_ADDR
// for i = 1 to array1 do
35861: LD_ADDR_VAR 0 4
35865: PUSH
35866: DOUBLE
35867: LD_INT 1
35869: DEC
35870: ST_TO_ADDR
35871: LD_VAR 0 1
35875: PUSH
35876: FOR_TO
35877: IFFALSE 35915
// if array1 [ i ] <> array2 [ i ] then
35879: LD_VAR 0 1
35883: PUSH
35884: LD_VAR 0 4
35888: ARRAY
35889: PUSH
35890: LD_VAR 0 2
35894: PUSH
35895: LD_VAR 0 4
35899: ARRAY
35900: NONEQUAL
35901: IFFALSE 35913
// begin result := false ;
35903: LD_ADDR_VAR 0 3
35907: PUSH
35908: LD_INT 0
35910: ST_TO_ADDR
// break ;
35911: GO 35915
// end ;
35913: GO 35876
35915: POP
35916: POP
// end ;
35917: LD_VAR 0 3
35921: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35922: LD_INT 0
35924: PPUSH
35925: PPUSH
35926: PPUSH
// pom := GetBase ( fac ) ;
35927: LD_ADDR_VAR 0 5
35931: PUSH
35932: LD_VAR 0 1
35936: PPUSH
35937: CALL_OW 274
35941: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35942: LD_ADDR_VAR 0 4
35946: PUSH
35947: LD_VAR 0 2
35951: PUSH
35952: LD_INT 1
35954: ARRAY
35955: PPUSH
35956: LD_VAR 0 2
35960: PUSH
35961: LD_INT 2
35963: ARRAY
35964: PPUSH
35965: LD_VAR 0 2
35969: PUSH
35970: LD_INT 3
35972: ARRAY
35973: PPUSH
35974: LD_VAR 0 2
35978: PUSH
35979: LD_INT 4
35981: ARRAY
35982: PPUSH
35983: CALL_OW 449
35987: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35988: LD_ADDR_VAR 0 3
35992: PUSH
35993: LD_VAR 0 5
35997: PPUSH
35998: LD_INT 1
36000: PPUSH
36001: CALL_OW 275
36005: PUSH
36006: LD_VAR 0 4
36010: PUSH
36011: LD_INT 1
36013: ARRAY
36014: GREATEREQUAL
36015: PUSH
36016: LD_VAR 0 5
36020: PPUSH
36021: LD_INT 2
36023: PPUSH
36024: CALL_OW 275
36028: PUSH
36029: LD_VAR 0 4
36033: PUSH
36034: LD_INT 2
36036: ARRAY
36037: GREATEREQUAL
36038: AND
36039: PUSH
36040: LD_VAR 0 5
36044: PPUSH
36045: LD_INT 3
36047: PPUSH
36048: CALL_OW 275
36052: PUSH
36053: LD_VAR 0 4
36057: PUSH
36058: LD_INT 3
36060: ARRAY
36061: GREATEREQUAL
36062: AND
36063: ST_TO_ADDR
// end ;
36064: LD_VAR 0 3
36068: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36069: LD_INT 0
36071: PPUSH
36072: PPUSH
36073: PPUSH
36074: PPUSH
// pom := GetBase ( building ) ;
36075: LD_ADDR_VAR 0 3
36079: PUSH
36080: LD_VAR 0 1
36084: PPUSH
36085: CALL_OW 274
36089: ST_TO_ADDR
// if not pom then
36090: LD_VAR 0 3
36094: NOT
36095: IFFALSE 36099
// exit ;
36097: GO 36269
// btype := GetBType ( building ) ;
36099: LD_ADDR_VAR 0 5
36103: PUSH
36104: LD_VAR 0 1
36108: PPUSH
36109: CALL_OW 266
36113: ST_TO_ADDR
// if btype = b_armoury then
36114: LD_VAR 0 5
36118: PUSH
36119: LD_INT 4
36121: EQUAL
36122: IFFALSE 36132
// btype := b_barracks ;
36124: LD_ADDR_VAR 0 5
36128: PUSH
36129: LD_INT 5
36131: ST_TO_ADDR
// if btype = b_depot then
36132: LD_VAR 0 5
36136: PUSH
36137: LD_INT 0
36139: EQUAL
36140: IFFALSE 36150
// btype := b_warehouse ;
36142: LD_ADDR_VAR 0 5
36146: PUSH
36147: LD_INT 1
36149: ST_TO_ADDR
// if btype = b_workshop then
36150: LD_VAR 0 5
36154: PUSH
36155: LD_INT 2
36157: EQUAL
36158: IFFALSE 36168
// btype := b_factory ;
36160: LD_ADDR_VAR 0 5
36164: PUSH
36165: LD_INT 3
36167: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36168: LD_ADDR_VAR 0 4
36172: PUSH
36173: LD_VAR 0 5
36177: PPUSH
36178: LD_VAR 0 1
36182: PPUSH
36183: CALL_OW 248
36187: PPUSH
36188: CALL_OW 450
36192: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36193: LD_ADDR_VAR 0 2
36197: PUSH
36198: LD_VAR 0 3
36202: PPUSH
36203: LD_INT 1
36205: PPUSH
36206: CALL_OW 275
36210: PUSH
36211: LD_VAR 0 4
36215: PUSH
36216: LD_INT 1
36218: ARRAY
36219: GREATEREQUAL
36220: PUSH
36221: LD_VAR 0 3
36225: PPUSH
36226: LD_INT 2
36228: PPUSH
36229: CALL_OW 275
36233: PUSH
36234: LD_VAR 0 4
36238: PUSH
36239: LD_INT 2
36241: ARRAY
36242: GREATEREQUAL
36243: AND
36244: PUSH
36245: LD_VAR 0 3
36249: PPUSH
36250: LD_INT 3
36252: PPUSH
36253: CALL_OW 275
36257: PUSH
36258: LD_VAR 0 4
36262: PUSH
36263: LD_INT 3
36265: ARRAY
36266: GREATEREQUAL
36267: AND
36268: ST_TO_ADDR
// end ;
36269: LD_VAR 0 2
36273: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36274: LD_INT 0
36276: PPUSH
36277: PPUSH
36278: PPUSH
// pom := GetBase ( building ) ;
36279: LD_ADDR_VAR 0 4
36283: PUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 274
36293: ST_TO_ADDR
// if not pom then
36294: LD_VAR 0 4
36298: NOT
36299: IFFALSE 36303
// exit ;
36301: GO 36404
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36303: LD_ADDR_VAR 0 5
36307: PUSH
36308: LD_VAR 0 2
36312: PPUSH
36313: LD_VAR 0 1
36317: PPUSH
36318: CALL_OW 248
36322: PPUSH
36323: CALL_OW 450
36327: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36328: LD_ADDR_VAR 0 3
36332: PUSH
36333: LD_VAR 0 4
36337: PPUSH
36338: LD_INT 1
36340: PPUSH
36341: CALL_OW 275
36345: PUSH
36346: LD_VAR 0 5
36350: PUSH
36351: LD_INT 1
36353: ARRAY
36354: GREATEREQUAL
36355: PUSH
36356: LD_VAR 0 4
36360: PPUSH
36361: LD_INT 2
36363: PPUSH
36364: CALL_OW 275
36368: PUSH
36369: LD_VAR 0 5
36373: PUSH
36374: LD_INT 2
36376: ARRAY
36377: GREATEREQUAL
36378: AND
36379: PUSH
36380: LD_VAR 0 4
36384: PPUSH
36385: LD_INT 3
36387: PPUSH
36388: CALL_OW 275
36392: PUSH
36393: LD_VAR 0 5
36397: PUSH
36398: LD_INT 3
36400: ARRAY
36401: GREATEREQUAL
36402: AND
36403: ST_TO_ADDR
// end ;
36404: LD_VAR 0 3
36408: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36409: LD_INT 0
36411: PPUSH
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
36416: PPUSH
36417: PPUSH
36418: PPUSH
36419: PPUSH
36420: PPUSH
36421: PPUSH
// result := false ;
36422: LD_ADDR_VAR 0 8
36426: PUSH
36427: LD_INT 0
36429: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36430: LD_VAR 0 5
36434: NOT
36435: PUSH
36436: LD_VAR 0 1
36440: NOT
36441: OR
36442: PUSH
36443: LD_VAR 0 2
36447: NOT
36448: OR
36449: PUSH
36450: LD_VAR 0 3
36454: NOT
36455: OR
36456: IFFALSE 36460
// exit ;
36458: GO 37274
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36460: LD_ADDR_VAR 0 14
36464: PUSH
36465: LD_VAR 0 1
36469: PPUSH
36470: LD_VAR 0 2
36474: PPUSH
36475: LD_VAR 0 3
36479: PPUSH
36480: LD_VAR 0 4
36484: PPUSH
36485: LD_VAR 0 5
36489: PUSH
36490: LD_INT 1
36492: ARRAY
36493: PPUSH
36494: CALL_OW 248
36498: PPUSH
36499: LD_INT 0
36501: PPUSH
36502: CALL 38511 0 6
36506: ST_TO_ADDR
// if not hexes then
36507: LD_VAR 0 14
36511: NOT
36512: IFFALSE 36516
// exit ;
36514: GO 37274
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36516: LD_ADDR_VAR 0 17
36520: PUSH
36521: LD_VAR 0 5
36525: PPUSH
36526: LD_INT 22
36528: PUSH
36529: LD_VAR 0 13
36533: PPUSH
36534: CALL_OW 255
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: LD_INT 30
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 30
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PPUSH
36575: CALL_OW 72
36579: ST_TO_ADDR
// for i = 1 to hexes do
36580: LD_ADDR_VAR 0 9
36584: PUSH
36585: DOUBLE
36586: LD_INT 1
36588: DEC
36589: ST_TO_ADDR
36590: LD_VAR 0 14
36594: PUSH
36595: FOR_TO
36596: IFFALSE 37272
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36598: LD_ADDR_VAR 0 13
36602: PUSH
36603: LD_VAR 0 14
36607: PUSH
36608: LD_VAR 0 9
36612: ARRAY
36613: PUSH
36614: LD_INT 1
36616: ARRAY
36617: PPUSH
36618: LD_VAR 0 14
36622: PUSH
36623: LD_VAR 0 9
36627: ARRAY
36628: PUSH
36629: LD_INT 2
36631: ARRAY
36632: PPUSH
36633: CALL_OW 428
36637: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36638: LD_VAR 0 14
36642: PUSH
36643: LD_VAR 0 9
36647: ARRAY
36648: PUSH
36649: LD_INT 1
36651: ARRAY
36652: PPUSH
36653: LD_VAR 0 14
36657: PUSH
36658: LD_VAR 0 9
36662: ARRAY
36663: PUSH
36664: LD_INT 2
36666: ARRAY
36667: PPUSH
36668: CALL_OW 351
36672: PUSH
36673: LD_VAR 0 14
36677: PUSH
36678: LD_VAR 0 9
36682: ARRAY
36683: PUSH
36684: LD_INT 1
36686: ARRAY
36687: PPUSH
36688: LD_VAR 0 14
36692: PUSH
36693: LD_VAR 0 9
36697: ARRAY
36698: PUSH
36699: LD_INT 2
36701: ARRAY
36702: PPUSH
36703: CALL_OW 488
36707: NOT
36708: OR
36709: PUSH
36710: LD_VAR 0 13
36714: PPUSH
36715: CALL_OW 247
36719: PUSH
36720: LD_INT 3
36722: EQUAL
36723: OR
36724: IFFALSE 36730
// exit ;
36726: POP
36727: POP
36728: GO 37274
// if not tmp then
36730: LD_VAR 0 13
36734: NOT
36735: IFFALSE 36739
// continue ;
36737: GO 36595
// result := true ;
36739: LD_ADDR_VAR 0 8
36743: PUSH
36744: LD_INT 1
36746: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36747: LD_VAR 0 6
36751: PUSH
36752: LD_VAR 0 13
36756: PPUSH
36757: CALL_OW 247
36761: PUSH
36762: LD_INT 2
36764: EQUAL
36765: AND
36766: PUSH
36767: LD_VAR 0 13
36771: PPUSH
36772: CALL_OW 263
36776: PUSH
36777: LD_INT 1
36779: EQUAL
36780: AND
36781: IFFALSE 36945
// begin if IsDrivenBy ( tmp ) then
36783: LD_VAR 0 13
36787: PPUSH
36788: CALL_OW 311
36792: IFFALSE 36796
// continue ;
36794: GO 36595
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36796: LD_VAR 0 6
36800: PPUSH
36801: LD_INT 3
36803: PUSH
36804: LD_INT 60
36806: PUSH
36807: EMPTY
36808: LIST
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 3
36816: PUSH
36817: LD_INT 55
36819: PUSH
36820: EMPTY
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PPUSH
36831: CALL_OW 72
36835: IFFALSE 36943
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36837: LD_ADDR_VAR 0 18
36841: PUSH
36842: LD_VAR 0 6
36846: PPUSH
36847: LD_INT 3
36849: PUSH
36850: LD_INT 60
36852: PUSH
36853: EMPTY
36854: LIST
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 3
36862: PUSH
36863: LD_INT 55
36865: PUSH
36866: EMPTY
36867: LIST
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PPUSH
36877: CALL_OW 72
36881: PUSH
36882: LD_INT 1
36884: ARRAY
36885: ST_TO_ADDR
// if IsInUnit ( driver ) then
36886: LD_VAR 0 18
36890: PPUSH
36891: CALL_OW 310
36895: IFFALSE 36906
// ComExit ( driver ) ;
36897: LD_VAR 0 18
36901: PPUSH
36902: CALL 61695 0 1
// AddComEnterUnit ( driver , tmp ) ;
36906: LD_VAR 0 18
36910: PPUSH
36911: LD_VAR 0 13
36915: PPUSH
36916: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36920: LD_VAR 0 18
36924: PPUSH
36925: LD_VAR 0 7
36929: PPUSH
36930: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36934: LD_VAR 0 18
36938: PPUSH
36939: CALL_OW 181
// end ; continue ;
36943: GO 36595
// end ; if not cleaners or not tmp in cleaners then
36945: LD_VAR 0 6
36949: NOT
36950: PUSH
36951: LD_VAR 0 13
36955: PUSH
36956: LD_VAR 0 6
36960: IN
36961: NOT
36962: OR
36963: IFFALSE 37270
// begin if dep then
36965: LD_VAR 0 17
36969: IFFALSE 37105
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36971: LD_ADDR_VAR 0 16
36975: PUSH
36976: LD_VAR 0 17
36980: PUSH
36981: LD_INT 1
36983: ARRAY
36984: PPUSH
36985: CALL_OW 250
36989: PPUSH
36990: LD_VAR 0 17
36994: PUSH
36995: LD_INT 1
36997: ARRAY
36998: PPUSH
36999: CALL_OW 254
37003: PPUSH
37004: LD_INT 5
37006: PPUSH
37007: CALL_OW 272
37011: PUSH
37012: LD_VAR 0 17
37016: PUSH
37017: LD_INT 1
37019: ARRAY
37020: PPUSH
37021: CALL_OW 251
37025: PPUSH
37026: LD_VAR 0 17
37030: PUSH
37031: LD_INT 1
37033: ARRAY
37034: PPUSH
37035: CALL_OW 254
37039: PPUSH
37040: LD_INT 5
37042: PPUSH
37043: CALL_OW 273
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37052: LD_VAR 0 16
37056: PUSH
37057: LD_INT 1
37059: ARRAY
37060: PPUSH
37061: LD_VAR 0 16
37065: PUSH
37066: LD_INT 2
37068: ARRAY
37069: PPUSH
37070: CALL_OW 488
37074: IFFALSE 37105
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37076: LD_VAR 0 13
37080: PPUSH
37081: LD_VAR 0 16
37085: PUSH
37086: LD_INT 1
37088: ARRAY
37089: PPUSH
37090: LD_VAR 0 16
37094: PUSH
37095: LD_INT 2
37097: ARRAY
37098: PPUSH
37099: CALL_OW 111
// continue ;
37103: GO 36595
// end ; end ; r := GetDir ( tmp ) ;
37105: LD_ADDR_VAR 0 15
37109: PUSH
37110: LD_VAR 0 13
37114: PPUSH
37115: CALL_OW 254
37119: ST_TO_ADDR
// if r = 5 then
37120: LD_VAR 0 15
37124: PUSH
37125: LD_INT 5
37127: EQUAL
37128: IFFALSE 37138
// r := 0 ;
37130: LD_ADDR_VAR 0 15
37134: PUSH
37135: LD_INT 0
37137: ST_TO_ADDR
// for j = r to 5 do
37138: LD_ADDR_VAR 0 10
37142: PUSH
37143: DOUBLE
37144: LD_VAR 0 15
37148: DEC
37149: ST_TO_ADDR
37150: LD_INT 5
37152: PUSH
37153: FOR_TO
37154: IFFALSE 37268
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37156: LD_ADDR_VAR 0 11
37160: PUSH
37161: LD_VAR 0 13
37165: PPUSH
37166: CALL_OW 250
37170: PPUSH
37171: LD_VAR 0 10
37175: PPUSH
37176: LD_INT 2
37178: PPUSH
37179: CALL_OW 272
37183: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37184: LD_ADDR_VAR 0 12
37188: PUSH
37189: LD_VAR 0 13
37193: PPUSH
37194: CALL_OW 251
37198: PPUSH
37199: LD_VAR 0 10
37203: PPUSH
37204: LD_INT 2
37206: PPUSH
37207: CALL_OW 273
37211: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37212: LD_VAR 0 11
37216: PPUSH
37217: LD_VAR 0 12
37221: PPUSH
37222: CALL_OW 488
37226: PUSH
37227: LD_VAR 0 11
37231: PPUSH
37232: LD_VAR 0 12
37236: PPUSH
37237: CALL_OW 428
37241: NOT
37242: AND
37243: IFFALSE 37266
// begin ComMoveXY ( tmp , _x , _y ) ;
37245: LD_VAR 0 13
37249: PPUSH
37250: LD_VAR 0 11
37254: PPUSH
37255: LD_VAR 0 12
37259: PPUSH
37260: CALL_OW 111
// break ;
37264: GO 37268
// end ; end ;
37266: GO 37153
37268: POP
37269: POP
// end ; end ;
37270: GO 36595
37272: POP
37273: POP
// end ;
37274: LD_VAR 0 8
37278: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37279: LD_INT 0
37281: PPUSH
// result := true ;
37282: LD_ADDR_VAR 0 3
37286: PUSH
37287: LD_INT 1
37289: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37290: LD_VAR 0 2
37294: PUSH
37295: LD_INT 24
37297: DOUBLE
37298: EQUAL
37299: IFTRUE 37309
37301: LD_INT 33
37303: DOUBLE
37304: EQUAL
37305: IFTRUE 37309
37307: GO 37334
37309: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37310: LD_ADDR_VAR 0 3
37314: PUSH
37315: LD_INT 32
37317: PPUSH
37318: LD_VAR 0 1
37322: PPUSH
37323: CALL_OW 321
37327: PUSH
37328: LD_INT 2
37330: EQUAL
37331: ST_TO_ADDR
37332: GO 37654
37334: LD_INT 20
37336: DOUBLE
37337: EQUAL
37338: IFTRUE 37342
37340: GO 37367
37342: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37343: LD_ADDR_VAR 0 3
37347: PUSH
37348: LD_INT 6
37350: PPUSH
37351: LD_VAR 0 1
37355: PPUSH
37356: CALL_OW 321
37360: PUSH
37361: LD_INT 2
37363: EQUAL
37364: ST_TO_ADDR
37365: GO 37654
37367: LD_INT 22
37369: DOUBLE
37370: EQUAL
37371: IFTRUE 37381
37373: LD_INT 36
37375: DOUBLE
37376: EQUAL
37377: IFTRUE 37381
37379: GO 37406
37381: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37382: LD_ADDR_VAR 0 3
37386: PUSH
37387: LD_INT 15
37389: PPUSH
37390: LD_VAR 0 1
37394: PPUSH
37395: CALL_OW 321
37399: PUSH
37400: LD_INT 2
37402: EQUAL
37403: ST_TO_ADDR
37404: GO 37654
37406: LD_INT 30
37408: DOUBLE
37409: EQUAL
37410: IFTRUE 37414
37412: GO 37439
37414: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37415: LD_ADDR_VAR 0 3
37419: PUSH
37420: LD_INT 20
37422: PPUSH
37423: LD_VAR 0 1
37427: PPUSH
37428: CALL_OW 321
37432: PUSH
37433: LD_INT 2
37435: EQUAL
37436: ST_TO_ADDR
37437: GO 37654
37439: LD_INT 28
37441: DOUBLE
37442: EQUAL
37443: IFTRUE 37453
37445: LD_INT 21
37447: DOUBLE
37448: EQUAL
37449: IFTRUE 37453
37451: GO 37478
37453: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37454: LD_ADDR_VAR 0 3
37458: PUSH
37459: LD_INT 21
37461: PPUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 321
37471: PUSH
37472: LD_INT 2
37474: EQUAL
37475: ST_TO_ADDR
37476: GO 37654
37478: LD_INT 16
37480: DOUBLE
37481: EQUAL
37482: IFTRUE 37486
37484: GO 37513
37486: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37487: LD_ADDR_VAR 0 3
37491: PUSH
37492: LD_EXP 70
37496: PPUSH
37497: LD_VAR 0 1
37501: PPUSH
37502: CALL_OW 321
37506: PUSH
37507: LD_INT 2
37509: EQUAL
37510: ST_TO_ADDR
37511: GO 37654
37513: LD_INT 19
37515: DOUBLE
37516: EQUAL
37517: IFTRUE 37527
37519: LD_INT 23
37521: DOUBLE
37522: EQUAL
37523: IFTRUE 37527
37525: GO 37554
37527: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37528: LD_ADDR_VAR 0 3
37532: PUSH
37533: LD_EXP 69
37537: PPUSH
37538: LD_VAR 0 1
37542: PPUSH
37543: CALL_OW 321
37547: PUSH
37548: LD_INT 2
37550: EQUAL
37551: ST_TO_ADDR
37552: GO 37654
37554: LD_INT 17
37556: DOUBLE
37557: EQUAL
37558: IFTRUE 37562
37560: GO 37587
37562: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37563: LD_ADDR_VAR 0 3
37567: PUSH
37568: LD_INT 39
37570: PPUSH
37571: LD_VAR 0 1
37575: PPUSH
37576: CALL_OW 321
37580: PUSH
37581: LD_INT 2
37583: EQUAL
37584: ST_TO_ADDR
37585: GO 37654
37587: LD_INT 18
37589: DOUBLE
37590: EQUAL
37591: IFTRUE 37595
37593: GO 37620
37595: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37596: LD_ADDR_VAR 0 3
37600: PUSH
37601: LD_INT 40
37603: PPUSH
37604: LD_VAR 0 1
37608: PPUSH
37609: CALL_OW 321
37613: PUSH
37614: LD_INT 2
37616: EQUAL
37617: ST_TO_ADDR
37618: GO 37654
37620: LD_INT 27
37622: DOUBLE
37623: EQUAL
37624: IFTRUE 37628
37626: GO 37653
37628: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37629: LD_ADDR_VAR 0 3
37633: PUSH
37634: LD_INT 35
37636: PPUSH
37637: LD_VAR 0 1
37641: PPUSH
37642: CALL_OW 321
37646: PUSH
37647: LD_INT 2
37649: EQUAL
37650: ST_TO_ADDR
37651: GO 37654
37653: POP
// end ;
37654: LD_VAR 0 3
37658: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37659: LD_INT 0
37661: PPUSH
37662: PPUSH
37663: PPUSH
37664: PPUSH
37665: PPUSH
37666: PPUSH
37667: PPUSH
37668: PPUSH
37669: PPUSH
37670: PPUSH
37671: PPUSH
// result := false ;
37672: LD_ADDR_VAR 0 6
37676: PUSH
37677: LD_INT 0
37679: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37680: LD_VAR 0 1
37684: NOT
37685: PUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL_OW 266
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: IN
37706: NOT
37707: OR
37708: PUSH
37709: LD_VAR 0 2
37713: NOT
37714: OR
37715: PUSH
37716: LD_VAR 0 5
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: LD_INT 3
37732: PUSH
37733: LD_INT 4
37735: PUSH
37736: LD_INT 5
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: IN
37747: NOT
37748: OR
37749: PUSH
37750: LD_VAR 0 3
37754: PPUSH
37755: LD_VAR 0 4
37759: PPUSH
37760: CALL_OW 488
37764: NOT
37765: OR
37766: IFFALSE 37770
// exit ;
37768: GO 38506
// side := GetSide ( depot ) ;
37770: LD_ADDR_VAR 0 9
37774: PUSH
37775: LD_VAR 0 1
37779: PPUSH
37780: CALL_OW 255
37784: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37785: LD_VAR 0 9
37789: PPUSH
37790: LD_VAR 0 2
37794: PPUSH
37795: CALL 37279 0 2
37799: NOT
37800: IFFALSE 37804
// exit ;
37802: GO 38506
// pom := GetBase ( depot ) ;
37804: LD_ADDR_VAR 0 10
37808: PUSH
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 274
37818: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37819: LD_ADDR_VAR 0 11
37823: PUSH
37824: LD_VAR 0 2
37828: PPUSH
37829: LD_VAR 0 1
37833: PPUSH
37834: CALL_OW 248
37838: PPUSH
37839: CALL_OW 450
37843: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37844: LD_VAR 0 10
37848: PPUSH
37849: LD_INT 1
37851: PPUSH
37852: CALL_OW 275
37856: PUSH
37857: LD_VAR 0 11
37861: PUSH
37862: LD_INT 1
37864: ARRAY
37865: GREATEREQUAL
37866: PUSH
37867: LD_VAR 0 10
37871: PPUSH
37872: LD_INT 2
37874: PPUSH
37875: CALL_OW 275
37879: PUSH
37880: LD_VAR 0 11
37884: PUSH
37885: LD_INT 2
37887: ARRAY
37888: GREATEREQUAL
37889: AND
37890: PUSH
37891: LD_VAR 0 10
37895: PPUSH
37896: LD_INT 3
37898: PPUSH
37899: CALL_OW 275
37903: PUSH
37904: LD_VAR 0 11
37908: PUSH
37909: LD_INT 3
37911: ARRAY
37912: GREATEREQUAL
37913: AND
37914: NOT
37915: IFFALSE 37919
// exit ;
37917: GO 38506
// if GetBType ( depot ) = b_depot then
37919: LD_VAR 0 1
37923: PPUSH
37924: CALL_OW 266
37928: PUSH
37929: LD_INT 0
37931: EQUAL
37932: IFFALSE 37944
// dist := 28 else
37934: LD_ADDR_VAR 0 14
37938: PUSH
37939: LD_INT 28
37941: ST_TO_ADDR
37942: GO 37952
// dist := 36 ;
37944: LD_ADDR_VAR 0 14
37948: PUSH
37949: LD_INT 36
37951: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37952: LD_VAR 0 1
37956: PPUSH
37957: LD_VAR 0 3
37961: PPUSH
37962: LD_VAR 0 4
37966: PPUSH
37967: CALL_OW 297
37971: PUSH
37972: LD_VAR 0 14
37976: GREATER
37977: IFFALSE 37981
// exit ;
37979: GO 38506
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37981: LD_ADDR_VAR 0 12
37985: PUSH
37986: LD_VAR 0 2
37990: PPUSH
37991: LD_VAR 0 3
37995: PPUSH
37996: LD_VAR 0 4
38000: PPUSH
38001: LD_VAR 0 5
38005: PPUSH
38006: LD_VAR 0 1
38010: PPUSH
38011: CALL_OW 248
38015: PPUSH
38016: LD_INT 0
38018: PPUSH
38019: CALL 38511 0 6
38023: ST_TO_ADDR
// if not hexes then
38024: LD_VAR 0 12
38028: NOT
38029: IFFALSE 38033
// exit ;
38031: GO 38506
// hex := GetHexInfo ( x , y ) ;
38033: LD_ADDR_VAR 0 15
38037: PUSH
38038: LD_VAR 0 3
38042: PPUSH
38043: LD_VAR 0 4
38047: PPUSH
38048: CALL_OW 546
38052: ST_TO_ADDR
// if hex [ 1 ] then
38053: LD_VAR 0 15
38057: PUSH
38058: LD_INT 1
38060: ARRAY
38061: IFFALSE 38065
// exit ;
38063: GO 38506
// height := hex [ 2 ] ;
38065: LD_ADDR_VAR 0 13
38069: PUSH
38070: LD_VAR 0 15
38074: PUSH
38075: LD_INT 2
38077: ARRAY
38078: ST_TO_ADDR
// for i = 1 to hexes do
38079: LD_ADDR_VAR 0 7
38083: PUSH
38084: DOUBLE
38085: LD_INT 1
38087: DEC
38088: ST_TO_ADDR
38089: LD_VAR 0 12
38093: PUSH
38094: FOR_TO
38095: IFFALSE 38425
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38097: LD_VAR 0 12
38101: PUSH
38102: LD_VAR 0 7
38106: ARRAY
38107: PUSH
38108: LD_INT 1
38110: ARRAY
38111: PPUSH
38112: LD_VAR 0 12
38116: PUSH
38117: LD_VAR 0 7
38121: ARRAY
38122: PUSH
38123: LD_INT 2
38125: ARRAY
38126: PPUSH
38127: CALL_OW 488
38131: NOT
38132: PUSH
38133: LD_VAR 0 12
38137: PUSH
38138: LD_VAR 0 7
38142: ARRAY
38143: PUSH
38144: LD_INT 1
38146: ARRAY
38147: PPUSH
38148: LD_VAR 0 12
38152: PUSH
38153: LD_VAR 0 7
38157: ARRAY
38158: PUSH
38159: LD_INT 2
38161: ARRAY
38162: PPUSH
38163: CALL_OW 428
38167: PUSH
38168: LD_INT 0
38170: GREATER
38171: OR
38172: PUSH
38173: LD_VAR 0 12
38177: PUSH
38178: LD_VAR 0 7
38182: ARRAY
38183: PUSH
38184: LD_INT 1
38186: ARRAY
38187: PPUSH
38188: LD_VAR 0 12
38192: PUSH
38193: LD_VAR 0 7
38197: ARRAY
38198: PUSH
38199: LD_INT 2
38201: ARRAY
38202: PPUSH
38203: CALL_OW 351
38207: OR
38208: IFFALSE 38214
// exit ;
38210: POP
38211: POP
38212: GO 38506
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38214: LD_ADDR_VAR 0 8
38218: PUSH
38219: LD_VAR 0 12
38223: PUSH
38224: LD_VAR 0 7
38228: ARRAY
38229: PUSH
38230: LD_INT 1
38232: ARRAY
38233: PPUSH
38234: LD_VAR 0 12
38238: PUSH
38239: LD_VAR 0 7
38243: ARRAY
38244: PUSH
38245: LD_INT 2
38247: ARRAY
38248: PPUSH
38249: CALL_OW 546
38253: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38254: LD_VAR 0 8
38258: PUSH
38259: LD_INT 1
38261: ARRAY
38262: PUSH
38263: LD_VAR 0 8
38267: PUSH
38268: LD_INT 2
38270: ARRAY
38271: PUSH
38272: LD_VAR 0 13
38276: PUSH
38277: LD_INT 2
38279: PLUS
38280: GREATER
38281: OR
38282: PUSH
38283: LD_VAR 0 8
38287: PUSH
38288: LD_INT 2
38290: ARRAY
38291: PUSH
38292: LD_VAR 0 13
38296: PUSH
38297: LD_INT 2
38299: MINUS
38300: LESS
38301: OR
38302: PUSH
38303: LD_VAR 0 8
38307: PUSH
38308: LD_INT 3
38310: ARRAY
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: LD_INT 8
38317: PUSH
38318: LD_INT 9
38320: PUSH
38321: LD_INT 10
38323: PUSH
38324: LD_INT 11
38326: PUSH
38327: LD_INT 12
38329: PUSH
38330: LD_INT 13
38332: PUSH
38333: LD_INT 16
38335: PUSH
38336: LD_INT 17
38338: PUSH
38339: LD_INT 18
38341: PUSH
38342: LD_INT 19
38344: PUSH
38345: LD_INT 20
38347: PUSH
38348: LD_INT 21
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: IN
38366: NOT
38367: OR
38368: PUSH
38369: LD_VAR 0 8
38373: PUSH
38374: LD_INT 5
38376: ARRAY
38377: NOT
38378: OR
38379: PUSH
38380: LD_VAR 0 8
38384: PUSH
38385: LD_INT 6
38387: ARRAY
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: LD_INT 7
38397: PUSH
38398: LD_INT 9
38400: PUSH
38401: LD_INT 10
38403: PUSH
38404: LD_INT 11
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: IN
38415: NOT
38416: OR
38417: IFFALSE 38423
// exit ;
38419: POP
38420: POP
38421: GO 38506
// end ;
38423: GO 38094
38425: POP
38426: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38427: LD_VAR 0 9
38431: PPUSH
38432: LD_VAR 0 3
38436: PPUSH
38437: LD_VAR 0 4
38441: PPUSH
38442: LD_INT 20
38444: PPUSH
38445: CALL 30451 0 4
38449: PUSH
38450: LD_INT 4
38452: ARRAY
38453: IFFALSE 38457
// exit ;
38455: GO 38506
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38457: LD_VAR 0 2
38461: PUSH
38462: LD_INT 29
38464: PUSH
38465: LD_INT 30
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: IN
38472: PUSH
38473: LD_VAR 0 3
38477: PPUSH
38478: LD_VAR 0 4
38482: PPUSH
38483: LD_VAR 0 9
38487: PPUSH
38488: CALL_OW 440
38492: NOT
38493: AND
38494: IFFALSE 38498
// exit ;
38496: GO 38506
// result := true ;
38498: LD_ADDR_VAR 0 6
38502: PUSH
38503: LD_INT 1
38505: ST_TO_ADDR
// end ;
38506: LD_VAR 0 6
38510: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38511: LD_INT 0
38513: PPUSH
38514: PPUSH
38515: PPUSH
38516: PPUSH
38517: PPUSH
38518: PPUSH
38519: PPUSH
38520: PPUSH
38521: PPUSH
38522: PPUSH
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
38537: PPUSH
38538: PPUSH
38539: PPUSH
38540: PPUSH
38541: PPUSH
38542: PPUSH
38543: PPUSH
38544: PPUSH
38545: PPUSH
38546: PPUSH
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
38551: PPUSH
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
38556: PPUSH
38557: PPUSH
38558: PPUSH
38559: PPUSH
38560: PPUSH
38561: PPUSH
38562: PPUSH
38563: PPUSH
38564: PPUSH
38565: PPUSH
38566: PPUSH
38567: PPUSH
38568: PPUSH
38569: PPUSH
38570: PPUSH
// result = [ ] ;
38571: LD_ADDR_VAR 0 7
38575: PUSH
38576: EMPTY
38577: ST_TO_ADDR
// temp_list = [ ] ;
38578: LD_ADDR_VAR 0 9
38582: PUSH
38583: EMPTY
38584: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38585: LD_VAR 0 4
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: LD_INT 2
38598: PUSH
38599: LD_INT 3
38601: PUSH
38602: LD_INT 4
38604: PUSH
38605: LD_INT 5
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: IN
38616: NOT
38617: PUSH
38618: LD_VAR 0 1
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: IN
38633: PUSH
38634: LD_VAR 0 5
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: LIST
38652: IN
38653: NOT
38654: AND
38655: OR
38656: IFFALSE 38660
// exit ;
38658: GO 57051
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38660: LD_VAR 0 1
38664: PUSH
38665: LD_INT 6
38667: PUSH
38668: LD_INT 7
38670: PUSH
38671: LD_INT 8
38673: PUSH
38674: LD_INT 13
38676: PUSH
38677: LD_INT 12
38679: PUSH
38680: LD_INT 15
38682: PUSH
38683: LD_INT 11
38685: PUSH
38686: LD_INT 14
38688: PUSH
38689: LD_INT 10
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: IN
38703: IFFALSE 38713
// btype = b_lab ;
38705: LD_ADDR_VAR 0 1
38709: PUSH
38710: LD_INT 6
38712: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38713: LD_VAR 0 6
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: IN
38732: NOT
38733: PUSH
38734: LD_VAR 0 1
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: LD_INT 3
38750: PUSH
38751: LD_INT 6
38753: PUSH
38754: LD_INT 36
38756: PUSH
38757: LD_INT 4
38759: PUSH
38760: LD_INT 5
38762: PUSH
38763: LD_INT 31
38765: PUSH
38766: LD_INT 32
38768: PUSH
38769: LD_INT 33
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: IN
38785: NOT
38786: PUSH
38787: LD_VAR 0 6
38791: PUSH
38792: LD_INT 1
38794: EQUAL
38795: AND
38796: OR
38797: PUSH
38798: LD_VAR 0 1
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: LD_INT 3
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: IN
38813: NOT
38814: PUSH
38815: LD_VAR 0 6
38819: PUSH
38820: LD_INT 2
38822: EQUAL
38823: AND
38824: OR
38825: IFFALSE 38835
// mode = 0 ;
38827: LD_ADDR_VAR 0 6
38831: PUSH
38832: LD_INT 0
38834: ST_TO_ADDR
// case mode of 0 :
38835: LD_VAR 0 6
38839: PUSH
38840: LD_INT 0
38842: DOUBLE
38843: EQUAL
38844: IFTRUE 38848
38846: GO 50301
38848: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38849: LD_ADDR_VAR 0 11
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: LD_INT 2
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 3
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 3
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39042: LD_ADDR_VAR 0 12
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: PUSH
39145: LD_INT 1
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 2
39188: NEG
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 3
39199: NEG
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 3
39210: NEG
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39238: LD_ADDR_VAR 0 13
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 2
39373: NEG
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: LD_INT 3
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 3
39397: NEG
39398: PUSH
39399: LD_INT 2
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 3
39409: NEG
39410: PUSH
39411: LD_INT 3
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39437: LD_ADDR_VAR 0 14
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 1
39518: NEG
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: LD_INT 3
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 3
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39633: LD_ADDR_VAR 0 15
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 3
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 3
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39826: LD_ADDR_VAR 0 16
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: NEG
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: LD_INT 3
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: LD_INT 3
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40019: LD_ADDR_VAR 0 17
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 2
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 2
40195: NEG
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 2
40206: NEG
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: LD_INT 2
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40249: LD_ADDR_VAR 0 18
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 2
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 2
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 2
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40479: LD_ADDR_VAR 0 19
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40709: LD_ADDR_VAR 0 20
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 2
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 2
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 2
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 2
40885: NEG
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 2
40908: NEG
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40939: LD_ADDR_VAR 0 21
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: NEG
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41169: LD_ADDR_VAR 0 22
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: NEG
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: NEG
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41399: LD_ADDR_VAR 0 23
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 2
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: LD_INT 3
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: LD_INT 3
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 2
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41679: LD_ADDR_VAR 0 24
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: LD_INT 2
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 3
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 3
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41955: LD_ADDR_VAR 0 25
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: LD_INT 2
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: LD_INT 3
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42229: LD_ADDR_VAR 0 26
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 2
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 2
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: LD_INT 3
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42505: LD_ADDR_VAR 0 27
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 2
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 3
42738: NEG
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 3
42750: NEG
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42785: LD_ADDR_VAR 0 28
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 2
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: LD_INT 3
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 3
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 3
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 3
43032: NEG
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43067: LD_ADDR_VAR 0 29
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: LD_INT 3
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 3
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: LD_INT 3
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43346: LD_ADDR_VAR 0 30
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 3
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 3
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 3
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 3
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43624: LD_ADDR_VAR 0 31
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: LD_INT 2
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: LD_INT 2
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: LD_INT 3
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 3
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 3
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 3
43867: NEG
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43902: LD_ADDR_VAR 0 32
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 2
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 3
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 3
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 3
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 3
44145: NEG
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44180: LD_ADDR_VAR 0 33
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 2
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: NEG
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: LD_INT 3
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 3
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 3
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 3
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44459: LD_ADDR_VAR 0 34
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: LD_INT 3
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 3
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44739: LD_ADDR_VAR 0 35
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44851: LD_ADDR_VAR 0 36
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44963: LD_ADDR_VAR 0 37
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45075: LD_ADDR_VAR 0 38
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 2
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45187: LD_ADDR_VAR 0 39
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45299: LD_ADDR_VAR 0 40
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45411: LD_ADDR_VAR 0 41
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: NEG
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: LD_INT 3
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 3
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 3
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 3
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 3
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 3
45685: NEG
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 3
45720: NEG
45721: PUSH
45722: LD_INT 3
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45761: LD_ADDR_VAR 0 42
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 3
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 3
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 3
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 3
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 3
46007: PUSH
46008: LD_INT 3
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 3
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 3
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 3
46070: NEG
46071: PUSH
46072: LD_INT 3
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46111: LD_ADDR_VAR 0 43
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 2
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 3
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 3
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 3
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 3
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 3
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 3
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 3
46407: NEG
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 3
46418: NEG
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46459: LD_ADDR_VAR 0 44
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: LD_INT 3
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 3
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: LD_INT 3
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: LD_INT 3
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 3
46733: NEG
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 3
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 3
46756: NEG
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: LD_INT 3
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46809: LD_ADDR_VAR 0 45
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 3
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 3
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 3
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 3
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 3
47118: NEG
47119: PUSH
47120: LD_INT 3
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47159: LD_ADDR_VAR 0 46
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 3
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 3
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 3
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 3
47455: NEG
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47507: LD_ADDR_VAR 0 47
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47658: LD_ADDR_VAR 0 48
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47805: LD_ADDR_VAR 0 49
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47949: LD_ADDR_VAR 0 50
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48093: LD_ADDR_VAR 0 51
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48240: LD_ADDR_VAR 0 52
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48391: LD_ADDR_VAR 0 53
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48621: LD_ADDR_VAR 0 54
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48851: LD_ADDR_VAR 0 55
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49081: LD_ADDR_VAR 0 56
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: NEG
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49311: LD_ADDR_VAR 0 57
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49541: LD_ADDR_VAR 0 58
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49771: LD_ADDR_VAR 0 59
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49859: LD_ADDR_VAR 0 60
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49947: LD_ADDR_VAR 0 61
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50035: LD_ADDR_VAR 0 62
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50123: LD_ADDR_VAR 0 63
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50211: LD_ADDR_VAR 0 64
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: ST_TO_ADDR
// end ; 1 :
50299: GO 56196
50301: LD_INT 1
50303: DOUBLE
50304: EQUAL
50305: IFTRUE 50309
50307: GO 52932
50309: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50310: LD_ADDR_VAR 0 11
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 3
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 3
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: LIST
50353: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50354: LD_ADDR_VAR 0 12
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 3
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: LIST
50394: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50395: LD_ADDR_VAR 0 13
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50435: LD_ADDR_VAR 0 14
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 3
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 3
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50476: LD_ADDR_VAR 0 15
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 3
50494: NEG
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: LIST
50519: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50520: LD_ADDR_VAR 0 16
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 3
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 3
50551: NEG
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50566: LD_ADDR_VAR 0 17
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 3
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 3
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 2
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: LIST
50609: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50610: LD_ADDR_VAR 0 18
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 3
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: LIST
50650: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50651: LD_ADDR_VAR 0 19
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: LD_INT 3
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50691: LD_ADDR_VAR 0 20
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50732: LD_ADDR_VAR 0 21
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 3
50750: NEG
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 3
50761: NEG
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50776: LD_ADDR_VAR 0 22
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 3
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 3
50807: NEG
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50822: LD_ADDR_VAR 0 23
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 3
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: LD_INT 4
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 3
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: LIST
50865: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50866: LD_ADDR_VAR 0 24
50870: PUSH
50871: LD_INT 3
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 4
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50907: LD_ADDR_VAR 0 25
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 4
50924: PUSH
50925: LD_INT 3
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 3
50934: PUSH
50935: LD_INT 4
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50947: LD_ADDR_VAR 0 26
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 4
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50988: LD_ADDR_VAR 0 27
50992: PUSH
50993: LD_INT 3
50995: NEG
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 4
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51032: LD_ADDR_VAR 0 28
51036: PUSH
51037: LD_INT 3
51039: NEG
51040: PUSH
51041: LD_INT 3
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 3
51051: NEG
51052: PUSH
51053: LD_INT 4
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 4
51063: NEG
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: LIST
51077: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51078: LD_ADDR_VAR 0 29
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 4
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 4
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 5
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 5
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: LD_INT 4
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 6
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 6
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 5
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51233: LD_ADDR_VAR 0 30
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 4
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 4
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 4
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 5
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 5
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 5
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 6
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 6
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51376: LD_ADDR_VAR 0 31
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 4
51413: PUSH
51414: LD_INT 3
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 4
51423: PUSH
51424: LD_INT 4
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: LD_INT 4
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 5
51443: PUSH
51444: LD_INT 4
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 5
51453: PUSH
51454: LD_INT 5
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 4
51463: PUSH
51464: LD_INT 5
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 6
51473: PUSH
51474: LD_INT 5
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 6
51483: PUSH
51484: LD_INT 6
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 5
51493: PUSH
51494: LD_INT 6
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51515: LD_ADDR_VAR 0 32
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 3
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 3
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: LD_INT 4
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 4
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 5
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 5
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 4
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 6
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 6
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 5
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51658: LD_ADDR_VAR 0 33
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 4
51710: NEG
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 4
51721: NEG
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 4
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 5
51744: NEG
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 5
51755: NEG
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 5
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 6
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 6
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51813: LD_ADDR_VAR 0 34
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: LD_INT 4
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 4
51868: NEG
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 4
51880: NEG
51881: PUSH
51882: LD_INT 4
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 4
51892: NEG
51893: PUSH
51894: LD_INT 5
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 5
51904: NEG
51905: PUSH
51906: LD_INT 4
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 5
51916: NEG
51917: PUSH
51918: LD_INT 5
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 5
51928: NEG
51929: PUSH
51930: LD_INT 6
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 6
51940: NEG
51941: PUSH
51942: LD_INT 5
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 6
51952: NEG
51953: PUSH
51954: LD_INT 6
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51976: LD_ADDR_VAR 0 41
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 3
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: LIST
52019: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52020: LD_ADDR_VAR 0 42
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52061: LD_ADDR_VAR 0 43
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: LIST
52100: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52101: LD_ADDR_VAR 0 44
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52142: LD_ADDR_VAR 0 45
52146: PUSH
52147: LD_INT 2
52149: NEG
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: LIST
52185: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52186: LD_ADDR_VAR 0 46
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 3
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: LIST
52231: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52232: LD_ADDR_VAR 0 47
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 3
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52265: LD_ADDR_VAR 0 48
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52296: LD_ADDR_VAR 0 49
52300: PUSH
52301: LD_INT 3
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52325: LD_ADDR_VAR 0 50
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: LD_INT 3
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 3
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52354: LD_ADDR_VAR 0 51
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52385: LD_ADDR_VAR 0 52
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 3
52404: NEG
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52418: LD_ADDR_VAR 0 53
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 3
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52462: LD_ADDR_VAR 0 54
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 3
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52503: LD_ADDR_VAR 0 55
52507: PUSH
52508: LD_INT 3
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 3
52520: PUSH
52521: LD_INT 3
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: LD_INT 3
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52543: LD_ADDR_VAR 0 56
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 3
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 3
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: LIST
52583: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52584: LD_ADDR_VAR 0 57
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 3
52602: NEG
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: LIST
52627: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52628: LD_ADDR_VAR 0 58
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 3
52659: NEG
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52674: LD_ADDR_VAR 0 59
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52718: LD_ADDR_VAR 0 60
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52759: LD_ADDR_VAR 0 61
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: LIST
52798: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52799: LD_ADDR_VAR 0 62
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: LIST
52839: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52840: LD_ADDR_VAR 0 63
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: LIST
52883: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52884: LD_ADDR_VAR 0 64
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: ST_TO_ADDR
// end ; 2 :
52930: GO 56196
52932: LD_INT 2
52934: DOUBLE
52935: EQUAL
52936: IFTRUE 52940
52938: GO 56195
52940: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52941: LD_ADDR_VAR 0 29
52945: PUSH
52946: LD_INT 4
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 4
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 5
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 5
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 4
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 3
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 5
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 4
53061: PUSH
53062: LD_INT 3
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 4
53071: PUSH
53072: LD_INT 4
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 3
53081: PUSH
53082: LD_INT 4
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: LD_INT 3
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 4
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 4
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 4
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: LD_INT 4
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 5
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: LD_INT 5
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 4
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 3
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: LD_INT 5
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: LD_INT 3
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 4
53280: NEG
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 4
53291: NEG
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 4
53303: NEG
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 4
53326: NEG
53327: PUSH
53328: LD_INT 4
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 4
53338: NEG
53339: PUSH
53340: LD_INT 5
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 3
53350: NEG
53351: PUSH
53352: LD_INT 4
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 3
53362: NEG
53363: PUSH
53364: LD_INT 3
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 4
53374: NEG
53375: PUSH
53376: LD_INT 3
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 5
53386: NEG
53387: PUSH
53388: LD_INT 4
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 5
53398: NEG
53399: PUSH
53400: LD_INT 5
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 3
53410: NEG
53411: PUSH
53412: LD_INT 5
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 5
53422: NEG
53423: PUSH
53424: LD_INT 3
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53479: LD_ADDR_VAR 0 30
53483: PUSH
53484: LD_INT 4
53486: PUSH
53487: LD_INT 4
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 4
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 5
53506: PUSH
53507: LD_INT 4
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 5
53516: PUSH
53517: LD_INT 5
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 4
53526: PUSH
53527: LD_INT 5
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 3
53536: PUSH
53537: LD_INT 4
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: LD_INT 3
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 5
53556: PUSH
53557: LD_INT 3
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 3
53566: PUSH
53567: LD_INT 5
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 3
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 4
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 4
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 4
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 4
53669: NEG
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 4
53680: NEG
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 3
53703: NEG
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 4
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 5
53725: NEG
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 5
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 5
53748: NEG
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: LD_INT 4
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: LD_INT 3
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: NEG
53820: PUSH
53821: LD_INT 2
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 4
53831: NEG
53832: PUSH
53833: LD_INT 3
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 4
53843: NEG
53844: PUSH
53845: LD_INT 4
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 2
53855: NEG
53856: PUSH
53857: LD_INT 4
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 4
53867: NEG
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 4
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 5
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 4
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: LD_INT 3
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 4
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 5
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 3
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: LD_INT 5
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54026: LD_ADDR_VAR 0 31
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 4
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 4
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 5
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 5
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 4
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 3
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: LD_INT 5
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 3
54126: NEG
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 3
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 3
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 4
54182: NEG
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 4
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 4
54205: NEG
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 4
54228: NEG
54229: PUSH
54230: LD_INT 4
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 4
54240: NEG
54241: PUSH
54242: LD_INT 5
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 3
54252: NEG
54253: PUSH
54254: LD_INT 4
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 3
54264: NEG
54265: PUSH
54266: LD_INT 3
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 4
54276: NEG
54277: PUSH
54278: LD_INT 3
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 5
54288: NEG
54289: PUSH
54290: LD_INT 4
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 5
54300: NEG
54301: PUSH
54302: LD_INT 5
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 3
54312: NEG
54313: PUSH
54314: LD_INT 5
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 5
54324: NEG
54325: PUSH
54326: LD_INT 3
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 3
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 4
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 3
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 4
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: LD_INT 4
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 4
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 4
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 5
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 5
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 4
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 5
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54576: LD_ADDR_VAR 0 32
54580: PUSH
54581: LD_INT 4
54583: NEG
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 4
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 4
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 5
54639: NEG
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 5
54650: NEG
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 5
54662: NEG
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 3
54685: NEG
54686: PUSH
54687: LD_INT 3
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 3
54697: NEG
54698: PUSH
54699: LD_INT 4
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: LD_INT 3
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: NEG
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 4
54745: NEG
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 4
54757: NEG
54758: PUSH
54759: LD_INT 4
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: LD_INT 4
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 4
54781: NEG
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 4
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 5
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 4
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 3
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 4
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 5
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 3
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 5
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 3
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 4
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 4
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 4
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 4
54988: PUSH
54989: LD_INT 4
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 4
54998: PUSH
54999: LD_INT 3
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 5
55008: PUSH
55009: LD_INT 4
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 5
55018: PUSH
55019: LD_INT 5
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 4
55028: PUSH
55029: LD_INT 5
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 3
55038: PUSH
55039: LD_INT 4
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 3
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 5
55058: PUSH
55059: LD_INT 3
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: LD_INT 5
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55123: LD_ADDR_VAR 0 33
55127: PUSH
55128: LD_INT 4
55130: NEG
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 4
55142: NEG
55143: PUSH
55144: LD_INT 5
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: LD_INT 4
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: NEG
55167: PUSH
55168: LD_INT 3
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 4
55178: NEG
55179: PUSH
55180: LD_INT 3
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 5
55190: NEG
55191: PUSH
55192: LD_INT 4
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 5
55202: NEG
55203: PUSH
55204: LD_INT 5
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 3
55214: NEG
55215: PUSH
55216: LD_INT 5
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 5
55226: NEG
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 4
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 3
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 3
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: LD_INT 4
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 4
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 4
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 4
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 5
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 5
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 4
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 5
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 3
55433: PUSH
55434: LD_INT 3
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 3
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 4
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 4
55463: PUSH
55464: LD_INT 4
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: LD_INT 4
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: LD_INT 3
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 4
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: LD_INT 4
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 4
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 3
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 4
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 5
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 5
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: LD_INT 4
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 5
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55661: LD_ADDR_VAR 0 34
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 4
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 5
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 4
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 3
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 3
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: LD_INT 4
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: LD_INT 5
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 3
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 5
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 3
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 4
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 4
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 3
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 4
55863: PUSH
55864: LD_INT 4
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 4
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 5
55883: PUSH
55884: LD_INT 4
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 5
55893: PUSH
55894: LD_INT 5
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 4
55903: PUSH
55904: LD_INT 5
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: PUSH
55914: LD_INT 4
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: LD_INT 3
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 5
55933: PUSH
55934: LD_INT 3
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 3
55943: PUSH
55944: LD_INT 5
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 3
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 4
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 4
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 3
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 4
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 4
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 4
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 3
56069: NEG
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 4
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 5
56102: NEG
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 5
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 5
56125: NEG
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: ST_TO_ADDR
// end ; end ;
56193: GO 56196
56195: POP
// case btype of b_depot , b_warehouse :
56196: LD_VAR 0 1
56200: PUSH
56201: LD_INT 0
56203: DOUBLE
56204: EQUAL
56205: IFTRUE 56215
56207: LD_INT 1
56209: DOUBLE
56210: EQUAL
56211: IFTRUE 56215
56213: GO 56416
56215: POP
// case nation of nation_american :
56216: LD_VAR 0 5
56220: PUSH
56221: LD_INT 1
56223: DOUBLE
56224: EQUAL
56225: IFTRUE 56229
56227: GO 56285
56229: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56230: LD_ADDR_VAR 0 9
56234: PUSH
56235: LD_VAR 0 11
56239: PUSH
56240: LD_VAR 0 12
56244: PUSH
56245: LD_VAR 0 13
56249: PUSH
56250: LD_VAR 0 14
56254: PUSH
56255: LD_VAR 0 15
56259: PUSH
56260: LD_VAR 0 16
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: PUSH
56273: LD_VAR 0 4
56277: PUSH
56278: LD_INT 1
56280: PLUS
56281: ARRAY
56282: ST_TO_ADDR
56283: GO 56414
56285: LD_INT 2
56287: DOUBLE
56288: EQUAL
56289: IFTRUE 56293
56291: GO 56349
56293: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56294: LD_ADDR_VAR 0 9
56298: PUSH
56299: LD_VAR 0 17
56303: PUSH
56304: LD_VAR 0 18
56308: PUSH
56309: LD_VAR 0 19
56313: PUSH
56314: LD_VAR 0 20
56318: PUSH
56319: LD_VAR 0 21
56323: PUSH
56324: LD_VAR 0 22
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: PUSH
56337: LD_VAR 0 4
56341: PUSH
56342: LD_INT 1
56344: PLUS
56345: ARRAY
56346: ST_TO_ADDR
56347: GO 56414
56349: LD_INT 3
56351: DOUBLE
56352: EQUAL
56353: IFTRUE 56357
56355: GO 56413
56357: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56358: LD_ADDR_VAR 0 9
56362: PUSH
56363: LD_VAR 0 23
56367: PUSH
56368: LD_VAR 0 24
56372: PUSH
56373: LD_VAR 0 25
56377: PUSH
56378: LD_VAR 0 26
56382: PUSH
56383: LD_VAR 0 27
56387: PUSH
56388: LD_VAR 0 28
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: PUSH
56401: LD_VAR 0 4
56405: PUSH
56406: LD_INT 1
56408: PLUS
56409: ARRAY
56410: ST_TO_ADDR
56411: GO 56414
56413: POP
56414: GO 56969
56416: LD_INT 2
56418: DOUBLE
56419: EQUAL
56420: IFTRUE 56430
56422: LD_INT 3
56424: DOUBLE
56425: EQUAL
56426: IFTRUE 56430
56428: GO 56486
56430: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56431: LD_ADDR_VAR 0 9
56435: PUSH
56436: LD_VAR 0 29
56440: PUSH
56441: LD_VAR 0 30
56445: PUSH
56446: LD_VAR 0 31
56450: PUSH
56451: LD_VAR 0 32
56455: PUSH
56456: LD_VAR 0 33
56460: PUSH
56461: LD_VAR 0 34
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: PUSH
56474: LD_VAR 0 4
56478: PUSH
56479: LD_INT 1
56481: PLUS
56482: ARRAY
56483: ST_TO_ADDR
56484: GO 56969
56486: LD_INT 16
56488: DOUBLE
56489: EQUAL
56490: IFTRUE 56548
56492: LD_INT 17
56494: DOUBLE
56495: EQUAL
56496: IFTRUE 56548
56498: LD_INT 18
56500: DOUBLE
56501: EQUAL
56502: IFTRUE 56548
56504: LD_INT 19
56506: DOUBLE
56507: EQUAL
56508: IFTRUE 56548
56510: LD_INT 22
56512: DOUBLE
56513: EQUAL
56514: IFTRUE 56548
56516: LD_INT 20
56518: DOUBLE
56519: EQUAL
56520: IFTRUE 56548
56522: LD_INT 21
56524: DOUBLE
56525: EQUAL
56526: IFTRUE 56548
56528: LD_INT 23
56530: DOUBLE
56531: EQUAL
56532: IFTRUE 56548
56534: LD_INT 24
56536: DOUBLE
56537: EQUAL
56538: IFTRUE 56548
56540: LD_INT 25
56542: DOUBLE
56543: EQUAL
56544: IFTRUE 56548
56546: GO 56604
56548: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56549: LD_ADDR_VAR 0 9
56553: PUSH
56554: LD_VAR 0 35
56558: PUSH
56559: LD_VAR 0 36
56563: PUSH
56564: LD_VAR 0 37
56568: PUSH
56569: LD_VAR 0 38
56573: PUSH
56574: LD_VAR 0 39
56578: PUSH
56579: LD_VAR 0 40
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: PUSH
56592: LD_VAR 0 4
56596: PUSH
56597: LD_INT 1
56599: PLUS
56600: ARRAY
56601: ST_TO_ADDR
56602: GO 56969
56604: LD_INT 6
56606: DOUBLE
56607: EQUAL
56608: IFTRUE 56660
56610: LD_INT 7
56612: DOUBLE
56613: EQUAL
56614: IFTRUE 56660
56616: LD_INT 8
56618: DOUBLE
56619: EQUAL
56620: IFTRUE 56660
56622: LD_INT 13
56624: DOUBLE
56625: EQUAL
56626: IFTRUE 56660
56628: LD_INT 12
56630: DOUBLE
56631: EQUAL
56632: IFTRUE 56660
56634: LD_INT 15
56636: DOUBLE
56637: EQUAL
56638: IFTRUE 56660
56640: LD_INT 11
56642: DOUBLE
56643: EQUAL
56644: IFTRUE 56660
56646: LD_INT 14
56648: DOUBLE
56649: EQUAL
56650: IFTRUE 56660
56652: LD_INT 10
56654: DOUBLE
56655: EQUAL
56656: IFTRUE 56660
56658: GO 56716
56660: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56661: LD_ADDR_VAR 0 9
56665: PUSH
56666: LD_VAR 0 41
56670: PUSH
56671: LD_VAR 0 42
56675: PUSH
56676: LD_VAR 0 43
56680: PUSH
56681: LD_VAR 0 44
56685: PUSH
56686: LD_VAR 0 45
56690: PUSH
56691: LD_VAR 0 46
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: PUSH
56704: LD_VAR 0 4
56708: PUSH
56709: LD_INT 1
56711: PLUS
56712: ARRAY
56713: ST_TO_ADDR
56714: GO 56969
56716: LD_INT 36
56718: DOUBLE
56719: EQUAL
56720: IFTRUE 56724
56722: GO 56780
56724: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56725: LD_ADDR_VAR 0 9
56729: PUSH
56730: LD_VAR 0 47
56734: PUSH
56735: LD_VAR 0 48
56739: PUSH
56740: LD_VAR 0 49
56744: PUSH
56745: LD_VAR 0 50
56749: PUSH
56750: LD_VAR 0 51
56754: PUSH
56755: LD_VAR 0 52
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: PUSH
56768: LD_VAR 0 4
56772: PUSH
56773: LD_INT 1
56775: PLUS
56776: ARRAY
56777: ST_TO_ADDR
56778: GO 56969
56780: LD_INT 4
56782: DOUBLE
56783: EQUAL
56784: IFTRUE 56806
56786: LD_INT 5
56788: DOUBLE
56789: EQUAL
56790: IFTRUE 56806
56792: LD_INT 34
56794: DOUBLE
56795: EQUAL
56796: IFTRUE 56806
56798: LD_INT 37
56800: DOUBLE
56801: EQUAL
56802: IFTRUE 56806
56804: GO 56862
56806: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56807: LD_ADDR_VAR 0 9
56811: PUSH
56812: LD_VAR 0 53
56816: PUSH
56817: LD_VAR 0 54
56821: PUSH
56822: LD_VAR 0 55
56826: PUSH
56827: LD_VAR 0 56
56831: PUSH
56832: LD_VAR 0 57
56836: PUSH
56837: LD_VAR 0 58
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: PUSH
56850: LD_VAR 0 4
56854: PUSH
56855: LD_INT 1
56857: PLUS
56858: ARRAY
56859: ST_TO_ADDR
56860: GO 56969
56862: LD_INT 31
56864: DOUBLE
56865: EQUAL
56866: IFTRUE 56912
56868: LD_INT 32
56870: DOUBLE
56871: EQUAL
56872: IFTRUE 56912
56874: LD_INT 33
56876: DOUBLE
56877: EQUAL
56878: IFTRUE 56912
56880: LD_INT 27
56882: DOUBLE
56883: EQUAL
56884: IFTRUE 56912
56886: LD_INT 26
56888: DOUBLE
56889: EQUAL
56890: IFTRUE 56912
56892: LD_INT 28
56894: DOUBLE
56895: EQUAL
56896: IFTRUE 56912
56898: LD_INT 29
56900: DOUBLE
56901: EQUAL
56902: IFTRUE 56912
56904: LD_INT 30
56906: DOUBLE
56907: EQUAL
56908: IFTRUE 56912
56910: GO 56968
56912: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56913: LD_ADDR_VAR 0 9
56917: PUSH
56918: LD_VAR 0 59
56922: PUSH
56923: LD_VAR 0 60
56927: PUSH
56928: LD_VAR 0 61
56932: PUSH
56933: LD_VAR 0 62
56937: PUSH
56938: LD_VAR 0 63
56942: PUSH
56943: LD_VAR 0 64
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: PUSH
56956: LD_VAR 0 4
56960: PUSH
56961: LD_INT 1
56963: PLUS
56964: ARRAY
56965: ST_TO_ADDR
56966: GO 56969
56968: POP
// temp_list2 = [ ] ;
56969: LD_ADDR_VAR 0 10
56973: PUSH
56974: EMPTY
56975: ST_TO_ADDR
// for i in temp_list do
56976: LD_ADDR_VAR 0 8
56980: PUSH
56981: LD_VAR 0 9
56985: PUSH
56986: FOR_IN
56987: IFFALSE 57039
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56989: LD_ADDR_VAR 0 10
56993: PUSH
56994: LD_VAR 0 10
56998: PUSH
56999: LD_VAR 0 8
57003: PUSH
57004: LD_INT 1
57006: ARRAY
57007: PUSH
57008: LD_VAR 0 2
57012: PLUS
57013: PUSH
57014: LD_VAR 0 8
57018: PUSH
57019: LD_INT 2
57021: ARRAY
57022: PUSH
57023: LD_VAR 0 3
57027: PLUS
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: EMPTY
57034: LIST
57035: ADD
57036: ST_TO_ADDR
57037: GO 56986
57039: POP
57040: POP
// result = temp_list2 ;
57041: LD_ADDR_VAR 0 7
57045: PUSH
57046: LD_VAR 0 10
57050: ST_TO_ADDR
// end ;
57051: LD_VAR 0 7
57055: RET
// export function EnemyInRange ( unit , dist ) ; begin
57056: LD_INT 0
57058: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57059: LD_ADDR_VAR 0 3
57063: PUSH
57064: LD_VAR 0 1
57068: PPUSH
57069: CALL_OW 255
57073: PPUSH
57074: LD_VAR 0 1
57078: PPUSH
57079: CALL_OW 250
57083: PPUSH
57084: LD_VAR 0 1
57088: PPUSH
57089: CALL_OW 251
57093: PPUSH
57094: LD_VAR 0 2
57098: PPUSH
57099: CALL 30451 0 4
57103: PUSH
57104: LD_INT 4
57106: ARRAY
57107: ST_TO_ADDR
// end ;
57108: LD_VAR 0 3
57112: RET
// export function PlayerSeeMe ( unit ) ; begin
57113: LD_INT 0
57115: PPUSH
// result := See ( your_side , unit ) ;
57116: LD_ADDR_VAR 0 2
57120: PUSH
57121: LD_OWVAR 2
57125: PPUSH
57126: LD_VAR 0 1
57130: PPUSH
57131: CALL_OW 292
57135: ST_TO_ADDR
// end ;
57136: LD_VAR 0 2
57140: RET
// export function ReverseDir ( unit ) ; begin
57141: LD_INT 0
57143: PPUSH
// if not unit then
57144: LD_VAR 0 1
57148: NOT
57149: IFFALSE 57153
// exit ;
57151: GO 57176
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57153: LD_ADDR_VAR 0 2
57157: PUSH
57158: LD_VAR 0 1
57162: PPUSH
57163: CALL_OW 254
57167: PUSH
57168: LD_INT 3
57170: PLUS
57171: PUSH
57172: LD_INT 6
57174: MOD
57175: ST_TO_ADDR
// end ;
57176: LD_VAR 0 2
57180: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57181: LD_INT 0
57183: PPUSH
57184: PPUSH
57185: PPUSH
57186: PPUSH
57187: PPUSH
// if not hexes then
57188: LD_VAR 0 2
57192: NOT
57193: IFFALSE 57197
// exit ;
57195: GO 57345
// dist := 9999 ;
57197: LD_ADDR_VAR 0 5
57201: PUSH
57202: LD_INT 9999
57204: ST_TO_ADDR
// for i = 1 to hexes do
57205: LD_ADDR_VAR 0 4
57209: PUSH
57210: DOUBLE
57211: LD_INT 1
57213: DEC
57214: ST_TO_ADDR
57215: LD_VAR 0 2
57219: PUSH
57220: FOR_TO
57221: IFFALSE 57333
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57223: LD_VAR 0 1
57227: PPUSH
57228: LD_VAR 0 2
57232: PUSH
57233: LD_VAR 0 4
57237: ARRAY
57238: PUSH
57239: LD_INT 1
57241: ARRAY
57242: PPUSH
57243: LD_VAR 0 2
57247: PUSH
57248: LD_VAR 0 4
57252: ARRAY
57253: PUSH
57254: LD_INT 2
57256: ARRAY
57257: PPUSH
57258: CALL_OW 297
57262: PUSH
57263: LD_VAR 0 5
57267: LESS
57268: IFFALSE 57331
// begin hex := hexes [ i ] ;
57270: LD_ADDR_VAR 0 7
57274: PUSH
57275: LD_VAR 0 2
57279: PUSH
57280: LD_VAR 0 4
57284: ARRAY
57285: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57286: LD_ADDR_VAR 0 5
57290: PUSH
57291: LD_VAR 0 1
57295: PPUSH
57296: LD_VAR 0 2
57300: PUSH
57301: LD_VAR 0 4
57305: ARRAY
57306: PUSH
57307: LD_INT 1
57309: ARRAY
57310: PPUSH
57311: LD_VAR 0 2
57315: PUSH
57316: LD_VAR 0 4
57320: ARRAY
57321: PUSH
57322: LD_INT 2
57324: ARRAY
57325: PPUSH
57326: CALL_OW 297
57330: ST_TO_ADDR
// end ; end ;
57331: GO 57220
57333: POP
57334: POP
// result := hex ;
57335: LD_ADDR_VAR 0 3
57339: PUSH
57340: LD_VAR 0 7
57344: ST_TO_ADDR
// end ;
57345: LD_VAR 0 3
57349: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57350: LD_INT 0
57352: PPUSH
57353: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57354: LD_VAR 0 1
57358: NOT
57359: PUSH
57360: LD_VAR 0 1
57364: PUSH
57365: LD_INT 21
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 23
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PPUSH
57389: CALL_OW 69
57393: IN
57394: NOT
57395: OR
57396: IFFALSE 57400
// exit ;
57398: GO 57447
// for i = 1 to 3 do
57400: LD_ADDR_VAR 0 3
57404: PUSH
57405: DOUBLE
57406: LD_INT 1
57408: DEC
57409: ST_TO_ADDR
57410: LD_INT 3
57412: PUSH
57413: FOR_TO
57414: IFFALSE 57445
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57416: LD_VAR 0 1
57420: PPUSH
57421: CALL_OW 250
57425: PPUSH
57426: LD_VAR 0 1
57430: PPUSH
57431: CALL_OW 251
57435: PPUSH
57436: LD_INT 1
57438: PPUSH
57439: CALL_OW 453
57443: GO 57413
57445: POP
57446: POP
// end ;
57447: LD_VAR 0 2
57451: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57452: LD_INT 0
57454: PPUSH
57455: PPUSH
57456: PPUSH
57457: PPUSH
57458: PPUSH
57459: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57460: LD_VAR 0 1
57464: NOT
57465: PUSH
57466: LD_VAR 0 2
57470: NOT
57471: OR
57472: PUSH
57473: LD_VAR 0 1
57477: PPUSH
57478: CALL_OW 314
57482: OR
57483: IFFALSE 57487
// exit ;
57485: GO 57928
// x := GetX ( enemy_unit ) ;
57487: LD_ADDR_VAR 0 7
57491: PUSH
57492: LD_VAR 0 2
57496: PPUSH
57497: CALL_OW 250
57501: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57502: LD_ADDR_VAR 0 8
57506: PUSH
57507: LD_VAR 0 2
57511: PPUSH
57512: CALL_OW 251
57516: ST_TO_ADDR
// if not x or not y then
57517: LD_VAR 0 7
57521: NOT
57522: PUSH
57523: LD_VAR 0 8
57527: NOT
57528: OR
57529: IFFALSE 57533
// exit ;
57531: GO 57928
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57533: LD_ADDR_VAR 0 6
57537: PUSH
57538: LD_VAR 0 7
57542: PPUSH
57543: LD_INT 0
57545: PPUSH
57546: LD_INT 4
57548: PPUSH
57549: CALL_OW 272
57553: PUSH
57554: LD_VAR 0 8
57558: PPUSH
57559: LD_INT 0
57561: PPUSH
57562: LD_INT 4
57564: PPUSH
57565: CALL_OW 273
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_VAR 0 7
57578: PPUSH
57579: LD_INT 1
57581: PPUSH
57582: LD_INT 4
57584: PPUSH
57585: CALL_OW 272
57589: PUSH
57590: LD_VAR 0 8
57594: PPUSH
57595: LD_INT 1
57597: PPUSH
57598: LD_INT 4
57600: PPUSH
57601: CALL_OW 273
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_VAR 0 7
57614: PPUSH
57615: LD_INT 2
57617: PPUSH
57618: LD_INT 4
57620: PPUSH
57621: CALL_OW 272
57625: PUSH
57626: LD_VAR 0 8
57630: PPUSH
57631: LD_INT 2
57633: PPUSH
57634: LD_INT 4
57636: PPUSH
57637: CALL_OW 273
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_VAR 0 7
57650: PPUSH
57651: LD_INT 3
57653: PPUSH
57654: LD_INT 4
57656: PPUSH
57657: CALL_OW 272
57661: PUSH
57662: LD_VAR 0 8
57666: PPUSH
57667: LD_INT 3
57669: PPUSH
57670: LD_INT 4
57672: PPUSH
57673: CALL_OW 273
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_VAR 0 7
57686: PPUSH
57687: LD_INT 4
57689: PPUSH
57690: LD_INT 4
57692: PPUSH
57693: CALL_OW 272
57697: PUSH
57698: LD_VAR 0 8
57702: PPUSH
57703: LD_INT 4
57705: PPUSH
57706: LD_INT 4
57708: PPUSH
57709: CALL_OW 273
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_VAR 0 7
57722: PPUSH
57723: LD_INT 5
57725: PPUSH
57726: LD_INT 4
57728: PPUSH
57729: CALL_OW 272
57733: PUSH
57734: LD_VAR 0 8
57738: PPUSH
57739: LD_INT 5
57741: PPUSH
57742: LD_INT 4
57744: PPUSH
57745: CALL_OW 273
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: ST_TO_ADDR
// for i = tmp downto 1 do
57762: LD_ADDR_VAR 0 4
57766: PUSH
57767: DOUBLE
57768: LD_VAR 0 6
57772: INC
57773: ST_TO_ADDR
57774: LD_INT 1
57776: PUSH
57777: FOR_DOWNTO
57778: IFFALSE 57879
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57780: LD_VAR 0 6
57784: PUSH
57785: LD_VAR 0 4
57789: ARRAY
57790: PUSH
57791: LD_INT 1
57793: ARRAY
57794: PPUSH
57795: LD_VAR 0 6
57799: PUSH
57800: LD_VAR 0 4
57804: ARRAY
57805: PUSH
57806: LD_INT 2
57808: ARRAY
57809: PPUSH
57810: CALL_OW 488
57814: NOT
57815: PUSH
57816: LD_VAR 0 6
57820: PUSH
57821: LD_VAR 0 4
57825: ARRAY
57826: PUSH
57827: LD_INT 1
57829: ARRAY
57830: PPUSH
57831: LD_VAR 0 6
57835: PUSH
57836: LD_VAR 0 4
57840: ARRAY
57841: PUSH
57842: LD_INT 2
57844: ARRAY
57845: PPUSH
57846: CALL_OW 428
57850: PUSH
57851: LD_INT 0
57853: NONEQUAL
57854: OR
57855: IFFALSE 57877
// tmp := Delete ( tmp , i ) ;
57857: LD_ADDR_VAR 0 6
57861: PUSH
57862: LD_VAR 0 6
57866: PPUSH
57867: LD_VAR 0 4
57871: PPUSH
57872: CALL_OW 3
57876: ST_TO_ADDR
57877: GO 57777
57879: POP
57880: POP
// j := GetClosestHex ( unit , tmp ) ;
57881: LD_ADDR_VAR 0 5
57885: PUSH
57886: LD_VAR 0 1
57890: PPUSH
57891: LD_VAR 0 6
57895: PPUSH
57896: CALL 57181 0 2
57900: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57901: LD_VAR 0 1
57905: PPUSH
57906: LD_VAR 0 5
57910: PUSH
57911: LD_INT 1
57913: ARRAY
57914: PPUSH
57915: LD_VAR 0 5
57919: PUSH
57920: LD_INT 2
57922: ARRAY
57923: PPUSH
57924: CALL_OW 111
// end ;
57928: LD_VAR 0 3
57932: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57933: LD_INT 0
57935: PPUSH
57936: PPUSH
57937: PPUSH
// uc_side = 0 ;
57938: LD_ADDR_OWVAR 20
57942: PUSH
57943: LD_INT 0
57945: ST_TO_ADDR
// uc_nation = 0 ;
57946: LD_ADDR_OWVAR 21
57950: PUSH
57951: LD_INT 0
57953: ST_TO_ADDR
// InitHc_All ( ) ;
57954: CALL_OW 584
// InitVc ;
57958: CALL_OW 20
// if mastodonts then
57962: LD_VAR 0 6
57966: IFFALSE 58033
// for i = 1 to mastodonts do
57968: LD_ADDR_VAR 0 11
57972: PUSH
57973: DOUBLE
57974: LD_INT 1
57976: DEC
57977: ST_TO_ADDR
57978: LD_VAR 0 6
57982: PUSH
57983: FOR_TO
57984: IFFALSE 58031
// begin vc_chassis := 31 ;
57986: LD_ADDR_OWVAR 37
57990: PUSH
57991: LD_INT 31
57993: ST_TO_ADDR
// vc_control := control_rider ;
57994: LD_ADDR_OWVAR 38
57998: PUSH
57999: LD_INT 4
58001: ST_TO_ADDR
// animal := CreateVehicle ;
58002: LD_ADDR_VAR 0 12
58006: PUSH
58007: CALL_OW 45
58011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58012: LD_VAR 0 12
58016: PPUSH
58017: LD_VAR 0 8
58021: PPUSH
58022: LD_INT 0
58024: PPUSH
58025: CALL 60221 0 3
// end ;
58029: GO 57983
58031: POP
58032: POP
// if horses then
58033: LD_VAR 0 5
58037: IFFALSE 58104
// for i = 1 to horses do
58039: LD_ADDR_VAR 0 11
58043: PUSH
58044: DOUBLE
58045: LD_INT 1
58047: DEC
58048: ST_TO_ADDR
58049: LD_VAR 0 5
58053: PUSH
58054: FOR_TO
58055: IFFALSE 58102
// begin hc_class := 21 ;
58057: LD_ADDR_OWVAR 28
58061: PUSH
58062: LD_INT 21
58064: ST_TO_ADDR
// hc_gallery :=  ;
58065: LD_ADDR_OWVAR 33
58069: PUSH
58070: LD_STRING 
58072: ST_TO_ADDR
// animal := CreateHuman ;
58073: LD_ADDR_VAR 0 12
58077: PUSH
58078: CALL_OW 44
58082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58083: LD_VAR 0 12
58087: PPUSH
58088: LD_VAR 0 8
58092: PPUSH
58093: LD_INT 0
58095: PPUSH
58096: CALL 60221 0 3
// end ;
58100: GO 58054
58102: POP
58103: POP
// if birds then
58104: LD_VAR 0 1
58108: IFFALSE 58175
// for i = 1 to birds do
58110: LD_ADDR_VAR 0 11
58114: PUSH
58115: DOUBLE
58116: LD_INT 1
58118: DEC
58119: ST_TO_ADDR
58120: LD_VAR 0 1
58124: PUSH
58125: FOR_TO
58126: IFFALSE 58173
// begin hc_class = 18 ;
58128: LD_ADDR_OWVAR 28
58132: PUSH
58133: LD_INT 18
58135: ST_TO_ADDR
// hc_gallery =  ;
58136: LD_ADDR_OWVAR 33
58140: PUSH
58141: LD_STRING 
58143: ST_TO_ADDR
// animal := CreateHuman ;
58144: LD_ADDR_VAR 0 12
58148: PUSH
58149: CALL_OW 44
58153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58154: LD_VAR 0 12
58158: PPUSH
58159: LD_VAR 0 8
58163: PPUSH
58164: LD_INT 0
58166: PPUSH
58167: CALL 60221 0 3
// end ;
58171: GO 58125
58173: POP
58174: POP
// if tigers then
58175: LD_VAR 0 2
58179: IFFALSE 58263
// for i = 1 to tigers do
58181: LD_ADDR_VAR 0 11
58185: PUSH
58186: DOUBLE
58187: LD_INT 1
58189: DEC
58190: ST_TO_ADDR
58191: LD_VAR 0 2
58195: PUSH
58196: FOR_TO
58197: IFFALSE 58261
// begin hc_class = class_tiger ;
58199: LD_ADDR_OWVAR 28
58203: PUSH
58204: LD_INT 14
58206: ST_TO_ADDR
// hc_gallery =  ;
58207: LD_ADDR_OWVAR 33
58211: PUSH
58212: LD_STRING 
58214: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58215: LD_ADDR_OWVAR 35
58219: PUSH
58220: LD_INT 7
58222: NEG
58223: PPUSH
58224: LD_INT 7
58226: PPUSH
58227: CALL_OW 12
58231: ST_TO_ADDR
// animal := CreateHuman ;
58232: LD_ADDR_VAR 0 12
58236: PUSH
58237: CALL_OW 44
58241: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58242: LD_VAR 0 12
58246: PPUSH
58247: LD_VAR 0 8
58251: PPUSH
58252: LD_INT 0
58254: PPUSH
58255: CALL 60221 0 3
// end ;
58259: GO 58196
58261: POP
58262: POP
// if apemans then
58263: LD_VAR 0 3
58267: IFFALSE 58390
// for i = 1 to apemans do
58269: LD_ADDR_VAR 0 11
58273: PUSH
58274: DOUBLE
58275: LD_INT 1
58277: DEC
58278: ST_TO_ADDR
58279: LD_VAR 0 3
58283: PUSH
58284: FOR_TO
58285: IFFALSE 58388
// begin hc_class = class_apeman ;
58287: LD_ADDR_OWVAR 28
58291: PUSH
58292: LD_INT 12
58294: ST_TO_ADDR
// hc_gallery =  ;
58295: LD_ADDR_OWVAR 33
58299: PUSH
58300: LD_STRING 
58302: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58303: LD_ADDR_OWVAR 35
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PPUSH
58312: LD_INT 2
58314: PPUSH
58315: CALL_OW 12
58319: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58320: LD_ADDR_OWVAR 31
58324: PUSH
58325: LD_INT 1
58327: PPUSH
58328: LD_INT 3
58330: PPUSH
58331: CALL_OW 12
58335: PUSH
58336: LD_INT 1
58338: PPUSH
58339: LD_INT 3
58341: PPUSH
58342: CALL_OW 12
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: ST_TO_ADDR
// animal := CreateHuman ;
58359: LD_ADDR_VAR 0 12
58363: PUSH
58364: CALL_OW 44
58368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58369: LD_VAR 0 12
58373: PPUSH
58374: LD_VAR 0 8
58378: PPUSH
58379: LD_INT 0
58381: PPUSH
58382: CALL 60221 0 3
// end ;
58386: GO 58284
58388: POP
58389: POP
// if enchidnas then
58390: LD_VAR 0 4
58394: IFFALSE 58461
// for i = 1 to enchidnas do
58396: LD_ADDR_VAR 0 11
58400: PUSH
58401: DOUBLE
58402: LD_INT 1
58404: DEC
58405: ST_TO_ADDR
58406: LD_VAR 0 4
58410: PUSH
58411: FOR_TO
58412: IFFALSE 58459
// begin hc_class = 13 ;
58414: LD_ADDR_OWVAR 28
58418: PUSH
58419: LD_INT 13
58421: ST_TO_ADDR
// hc_gallery =  ;
58422: LD_ADDR_OWVAR 33
58426: PUSH
58427: LD_STRING 
58429: ST_TO_ADDR
// animal := CreateHuman ;
58430: LD_ADDR_VAR 0 12
58434: PUSH
58435: CALL_OW 44
58439: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58440: LD_VAR 0 12
58444: PPUSH
58445: LD_VAR 0 8
58449: PPUSH
58450: LD_INT 0
58452: PPUSH
58453: CALL 60221 0 3
// end ;
58457: GO 58411
58459: POP
58460: POP
// if fishes then
58461: LD_VAR 0 7
58465: IFFALSE 58532
// for i = 1 to fishes do
58467: LD_ADDR_VAR 0 11
58471: PUSH
58472: DOUBLE
58473: LD_INT 1
58475: DEC
58476: ST_TO_ADDR
58477: LD_VAR 0 7
58481: PUSH
58482: FOR_TO
58483: IFFALSE 58530
// begin hc_class = 20 ;
58485: LD_ADDR_OWVAR 28
58489: PUSH
58490: LD_INT 20
58492: ST_TO_ADDR
// hc_gallery =  ;
58493: LD_ADDR_OWVAR 33
58497: PUSH
58498: LD_STRING 
58500: ST_TO_ADDR
// animal := CreateHuman ;
58501: LD_ADDR_VAR 0 12
58505: PUSH
58506: CALL_OW 44
58510: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58511: LD_VAR 0 12
58515: PPUSH
58516: LD_VAR 0 9
58520: PPUSH
58521: LD_INT 0
58523: PPUSH
58524: CALL 60221 0 3
// end ;
58528: GO 58482
58530: POP
58531: POP
// end ;
58532: LD_VAR 0 10
58536: RET
// export function WantHeal ( sci , unit ) ; begin
58537: LD_INT 0
58539: PPUSH
// if GetTaskList ( sci ) > 0 then
58540: LD_VAR 0 1
58544: PPUSH
58545: CALL_OW 437
58549: PUSH
58550: LD_INT 0
58552: GREATER
58553: IFFALSE 58623
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58555: LD_VAR 0 1
58559: PPUSH
58560: CALL_OW 437
58564: PUSH
58565: LD_INT 1
58567: ARRAY
58568: PUSH
58569: LD_INT 1
58571: ARRAY
58572: PUSH
58573: LD_STRING l
58575: EQUAL
58576: PUSH
58577: LD_VAR 0 1
58581: PPUSH
58582: CALL_OW 437
58586: PUSH
58587: LD_INT 1
58589: ARRAY
58590: PUSH
58591: LD_INT 4
58593: ARRAY
58594: PUSH
58595: LD_VAR 0 2
58599: EQUAL
58600: AND
58601: IFFALSE 58613
// result := true else
58603: LD_ADDR_VAR 0 3
58607: PUSH
58608: LD_INT 1
58610: ST_TO_ADDR
58611: GO 58621
// result := false ;
58613: LD_ADDR_VAR 0 3
58617: PUSH
58618: LD_INT 0
58620: ST_TO_ADDR
// end else
58621: GO 58631
// result := false ;
58623: LD_ADDR_VAR 0 3
58627: PUSH
58628: LD_INT 0
58630: ST_TO_ADDR
// end ;
58631: LD_VAR 0 3
58635: RET
// export function HealTarget ( sci ) ; begin
58636: LD_INT 0
58638: PPUSH
// if not sci then
58639: LD_VAR 0 1
58643: NOT
58644: IFFALSE 58648
// exit ;
58646: GO 58713
// result := 0 ;
58648: LD_ADDR_VAR 0 2
58652: PUSH
58653: LD_INT 0
58655: ST_TO_ADDR
// if GetTaskList ( sci ) then
58656: LD_VAR 0 1
58660: PPUSH
58661: CALL_OW 437
58665: IFFALSE 58713
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58667: LD_VAR 0 1
58671: PPUSH
58672: CALL_OW 437
58676: PUSH
58677: LD_INT 1
58679: ARRAY
58680: PUSH
58681: LD_INT 1
58683: ARRAY
58684: PUSH
58685: LD_STRING l
58687: EQUAL
58688: IFFALSE 58713
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58690: LD_ADDR_VAR 0 2
58694: PUSH
58695: LD_VAR 0 1
58699: PPUSH
58700: CALL_OW 437
58704: PUSH
58705: LD_INT 1
58707: ARRAY
58708: PUSH
58709: LD_INT 4
58711: ARRAY
58712: ST_TO_ADDR
// end ;
58713: LD_VAR 0 2
58717: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58718: LD_INT 0
58720: PPUSH
58721: PPUSH
58722: PPUSH
58723: PPUSH
// if not base_units then
58724: LD_VAR 0 1
58728: NOT
58729: IFFALSE 58733
// exit ;
58731: GO 58820
// result := false ;
58733: LD_ADDR_VAR 0 2
58737: PUSH
58738: LD_INT 0
58740: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58741: LD_ADDR_VAR 0 5
58745: PUSH
58746: LD_VAR 0 1
58750: PPUSH
58751: LD_INT 21
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PPUSH
58761: CALL_OW 72
58765: ST_TO_ADDR
// if not tmp then
58766: LD_VAR 0 5
58770: NOT
58771: IFFALSE 58775
// exit ;
58773: GO 58820
// for i in tmp do
58775: LD_ADDR_VAR 0 3
58779: PUSH
58780: LD_VAR 0 5
58784: PUSH
58785: FOR_IN
58786: IFFALSE 58818
// begin result := EnemyInRange ( i , 22 ) ;
58788: LD_ADDR_VAR 0 2
58792: PUSH
58793: LD_VAR 0 3
58797: PPUSH
58798: LD_INT 22
58800: PPUSH
58801: CALL 57056 0 2
58805: ST_TO_ADDR
// if result then
58806: LD_VAR 0 2
58810: IFFALSE 58816
// exit ;
58812: POP
58813: POP
58814: GO 58820
// end ;
58816: GO 58785
58818: POP
58819: POP
// end ;
58820: LD_VAR 0 2
58824: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58825: LD_INT 0
58827: PPUSH
58828: PPUSH
// if not units then
58829: LD_VAR 0 1
58833: NOT
58834: IFFALSE 58838
// exit ;
58836: GO 58908
// result := [ ] ;
58838: LD_ADDR_VAR 0 3
58842: PUSH
58843: EMPTY
58844: ST_TO_ADDR
// for i in units do
58845: LD_ADDR_VAR 0 4
58849: PUSH
58850: LD_VAR 0 1
58854: PUSH
58855: FOR_IN
58856: IFFALSE 58906
// if GetTag ( i ) = tag then
58858: LD_VAR 0 4
58862: PPUSH
58863: CALL_OW 110
58867: PUSH
58868: LD_VAR 0 2
58872: EQUAL
58873: IFFALSE 58904
// result := Insert ( result , result + 1 , i ) ;
58875: LD_ADDR_VAR 0 3
58879: PUSH
58880: LD_VAR 0 3
58884: PPUSH
58885: LD_VAR 0 3
58889: PUSH
58890: LD_INT 1
58892: PLUS
58893: PPUSH
58894: LD_VAR 0 4
58898: PPUSH
58899: CALL_OW 2
58903: ST_TO_ADDR
58904: GO 58855
58906: POP
58907: POP
// end ;
58908: LD_VAR 0 3
58912: RET
// export function IsDriver ( un ) ; begin
58913: LD_INT 0
58915: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58916: LD_ADDR_VAR 0 2
58920: PUSH
58921: LD_VAR 0 1
58925: PUSH
58926: LD_INT 55
58928: PUSH
58929: EMPTY
58930: LIST
58931: PPUSH
58932: CALL_OW 69
58936: IN
58937: ST_TO_ADDR
// end ;
58938: LD_VAR 0 2
58942: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58943: LD_INT 0
58945: PPUSH
58946: PPUSH
// list := [ ] ;
58947: LD_ADDR_VAR 0 5
58951: PUSH
58952: EMPTY
58953: ST_TO_ADDR
// case d of 0 :
58954: LD_VAR 0 3
58958: PUSH
58959: LD_INT 0
58961: DOUBLE
58962: EQUAL
58963: IFTRUE 58967
58965: GO 59100
58967: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58968: LD_ADDR_VAR 0 5
58972: PUSH
58973: LD_VAR 0 1
58977: PUSH
58978: LD_INT 4
58980: MINUS
58981: PUSH
58982: LD_VAR 0 2
58986: PUSH
58987: LD_INT 4
58989: MINUS
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: LIST
58998: PUSH
58999: LD_VAR 0 1
59003: PUSH
59004: LD_INT 3
59006: MINUS
59007: PUSH
59008: LD_VAR 0 2
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: LIST
59020: PUSH
59021: LD_VAR 0 1
59025: PUSH
59026: LD_INT 4
59028: PLUS
59029: PUSH
59030: LD_VAR 0 2
59034: PUSH
59035: LD_INT 4
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: LIST
59042: PUSH
59043: LD_VAR 0 1
59047: PUSH
59048: LD_INT 3
59050: PLUS
59051: PUSH
59052: LD_VAR 0 2
59056: PUSH
59057: LD_INT 3
59059: PLUS
59060: PUSH
59061: LD_INT 5
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: LIST
59068: PUSH
59069: LD_VAR 0 1
59073: PUSH
59074: LD_VAR 0 2
59078: PUSH
59079: LD_INT 4
59081: PLUS
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: LIST
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: ST_TO_ADDR
// end ; 1 :
59098: GO 59798
59100: LD_INT 1
59102: DOUBLE
59103: EQUAL
59104: IFTRUE 59108
59106: GO 59241
59108: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59109: LD_ADDR_VAR 0 5
59113: PUSH
59114: LD_VAR 0 1
59118: PUSH
59119: LD_VAR 0 2
59123: PUSH
59124: LD_INT 4
59126: MINUS
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: LIST
59135: PUSH
59136: LD_VAR 0 1
59140: PUSH
59141: LD_INT 3
59143: MINUS
59144: PUSH
59145: LD_VAR 0 2
59149: PUSH
59150: LD_INT 3
59152: MINUS
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: LIST
59161: PUSH
59162: LD_VAR 0 1
59166: PUSH
59167: LD_INT 4
59169: MINUS
59170: PUSH
59171: LD_VAR 0 2
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: LIST
59183: PUSH
59184: LD_VAR 0 1
59188: PUSH
59189: LD_VAR 0 2
59193: PUSH
59194: LD_INT 3
59196: PLUS
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: LIST
59205: PUSH
59206: LD_VAR 0 1
59210: PUSH
59211: LD_INT 4
59213: PLUS
59214: PUSH
59215: LD_VAR 0 2
59219: PUSH
59220: LD_INT 4
59222: PLUS
59223: PUSH
59224: LD_INT 5
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: ST_TO_ADDR
// end ; 2 :
59239: GO 59798
59241: LD_INT 2
59243: DOUBLE
59244: EQUAL
59245: IFTRUE 59249
59247: GO 59378
59249: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59250: LD_ADDR_VAR 0 5
59254: PUSH
59255: LD_VAR 0 1
59259: PUSH
59260: LD_VAR 0 2
59264: PUSH
59265: LD_INT 3
59267: MINUS
59268: PUSH
59269: LD_INT 3
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: PUSH
59277: LD_VAR 0 1
59281: PUSH
59282: LD_INT 4
59284: PLUS
59285: PUSH
59286: LD_VAR 0 2
59290: PUSH
59291: LD_INT 4
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: LIST
59298: PUSH
59299: LD_VAR 0 1
59303: PUSH
59304: LD_VAR 0 2
59308: PUSH
59309: LD_INT 4
59311: PLUS
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: PUSH
59321: LD_VAR 0 1
59325: PUSH
59326: LD_INT 3
59328: MINUS
59329: PUSH
59330: LD_VAR 0 2
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: LIST
59342: PUSH
59343: LD_VAR 0 1
59347: PUSH
59348: LD_INT 4
59350: MINUS
59351: PUSH
59352: LD_VAR 0 2
59356: PUSH
59357: LD_INT 4
59359: MINUS
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: ST_TO_ADDR
// end ; 3 :
59376: GO 59798
59378: LD_INT 3
59380: DOUBLE
59381: EQUAL
59382: IFTRUE 59386
59384: GO 59519
59386: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59387: LD_ADDR_VAR 0 5
59391: PUSH
59392: LD_VAR 0 1
59396: PUSH
59397: LD_INT 3
59399: PLUS
59400: PUSH
59401: LD_VAR 0 2
59405: PUSH
59406: LD_INT 4
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: PUSH
59414: LD_VAR 0 1
59418: PUSH
59419: LD_INT 4
59421: PLUS
59422: PUSH
59423: LD_VAR 0 2
59427: PUSH
59428: LD_INT 4
59430: PLUS
59431: PUSH
59432: LD_INT 5
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: PUSH
59440: LD_VAR 0 1
59444: PUSH
59445: LD_INT 4
59447: MINUS
59448: PUSH
59449: LD_VAR 0 2
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: LIST
59461: PUSH
59462: LD_VAR 0 1
59466: PUSH
59467: LD_VAR 0 2
59471: PUSH
59472: LD_INT 4
59474: MINUS
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: LIST
59483: PUSH
59484: LD_VAR 0 1
59488: PUSH
59489: LD_INT 3
59491: MINUS
59492: PUSH
59493: LD_VAR 0 2
59497: PUSH
59498: LD_INT 3
59500: MINUS
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: LIST
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: ST_TO_ADDR
// end ; 4 :
59517: GO 59798
59519: LD_INT 4
59521: DOUBLE
59522: EQUAL
59523: IFTRUE 59527
59525: GO 59660
59527: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59528: LD_ADDR_VAR 0 5
59532: PUSH
59533: LD_VAR 0 1
59537: PUSH
59538: LD_VAR 0 2
59542: PUSH
59543: LD_INT 4
59545: PLUS
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: LIST
59554: PUSH
59555: LD_VAR 0 1
59559: PUSH
59560: LD_INT 3
59562: PLUS
59563: PUSH
59564: LD_VAR 0 2
59568: PUSH
59569: LD_INT 3
59571: PLUS
59572: PUSH
59573: LD_INT 5
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: PUSH
59581: LD_VAR 0 1
59585: PUSH
59586: LD_INT 4
59588: PLUS
59589: PUSH
59590: LD_VAR 0 2
59594: PUSH
59595: LD_INT 4
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: LIST
59602: PUSH
59603: LD_VAR 0 1
59607: PUSH
59608: LD_VAR 0 2
59612: PUSH
59613: LD_INT 3
59615: MINUS
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: LIST
59624: PUSH
59625: LD_VAR 0 1
59629: PUSH
59630: LD_INT 4
59632: MINUS
59633: PUSH
59634: LD_VAR 0 2
59638: PUSH
59639: LD_INT 4
59641: MINUS
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: ST_TO_ADDR
// end ; 5 :
59658: GO 59798
59660: LD_INT 5
59662: DOUBLE
59663: EQUAL
59664: IFTRUE 59668
59666: GO 59797
59668: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59669: LD_ADDR_VAR 0 5
59673: PUSH
59674: LD_VAR 0 1
59678: PUSH
59679: LD_INT 4
59681: MINUS
59682: PUSH
59683: LD_VAR 0 2
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: PUSH
59696: LD_VAR 0 1
59700: PUSH
59701: LD_VAR 0 2
59705: PUSH
59706: LD_INT 4
59708: MINUS
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: PUSH
59718: LD_VAR 0 1
59722: PUSH
59723: LD_INT 4
59725: PLUS
59726: PUSH
59727: LD_VAR 0 2
59731: PUSH
59732: LD_INT 4
59734: PLUS
59735: PUSH
59736: LD_INT 5
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: PUSH
59744: LD_VAR 0 1
59748: PUSH
59749: LD_INT 3
59751: PLUS
59752: PUSH
59753: LD_VAR 0 2
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: LIST
59765: PUSH
59766: LD_VAR 0 1
59770: PUSH
59771: LD_VAR 0 2
59775: PUSH
59776: LD_INT 3
59778: PLUS
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: LIST
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// end ; end ;
59795: GO 59798
59797: POP
// result := list ;
59798: LD_ADDR_VAR 0 4
59802: PUSH
59803: LD_VAR 0 5
59807: ST_TO_ADDR
// end ;
59808: LD_VAR 0 4
59812: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59813: LD_INT 0
59815: PPUSH
59816: PPUSH
59817: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59818: LD_VAR 0 1
59822: NOT
59823: PUSH
59824: LD_VAR 0 2
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: LD_INT 3
59837: PUSH
59838: LD_INT 4
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: IN
59847: NOT
59848: OR
59849: IFFALSE 59853
// exit ;
59851: GO 59945
// tmp := [ ] ;
59853: LD_ADDR_VAR 0 5
59857: PUSH
59858: EMPTY
59859: ST_TO_ADDR
// for i in units do
59860: LD_ADDR_VAR 0 4
59864: PUSH
59865: LD_VAR 0 1
59869: PUSH
59870: FOR_IN
59871: IFFALSE 59914
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59873: LD_ADDR_VAR 0 5
59877: PUSH
59878: LD_VAR 0 5
59882: PPUSH
59883: LD_VAR 0 5
59887: PUSH
59888: LD_INT 1
59890: PLUS
59891: PPUSH
59892: LD_VAR 0 4
59896: PPUSH
59897: LD_VAR 0 2
59901: PPUSH
59902: CALL_OW 259
59906: PPUSH
59907: CALL_OW 2
59911: ST_TO_ADDR
59912: GO 59870
59914: POP
59915: POP
// if not tmp then
59916: LD_VAR 0 5
59920: NOT
59921: IFFALSE 59925
// exit ;
59923: GO 59945
// result := SortListByListDesc ( units , tmp ) ;
59925: LD_ADDR_VAR 0 3
59929: PUSH
59930: LD_VAR 0 1
59934: PPUSH
59935: LD_VAR 0 5
59939: PPUSH
59940: CALL_OW 77
59944: ST_TO_ADDR
// end ;
59945: LD_VAR 0 3
59949: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59950: LD_INT 0
59952: PPUSH
59953: PPUSH
59954: PPUSH
// result := false ;
59955: LD_ADDR_VAR 0 3
59959: PUSH
59960: LD_INT 0
59962: ST_TO_ADDR
// x := GetX ( building ) ;
59963: LD_ADDR_VAR 0 4
59967: PUSH
59968: LD_VAR 0 2
59972: PPUSH
59973: CALL_OW 250
59977: ST_TO_ADDR
// y := GetY ( building ) ;
59978: LD_ADDR_VAR 0 5
59982: PUSH
59983: LD_VAR 0 2
59987: PPUSH
59988: CALL_OW 251
59992: ST_TO_ADDR
// if not building or not x or not y then
59993: LD_VAR 0 2
59997: NOT
59998: PUSH
59999: LD_VAR 0 4
60003: NOT
60004: OR
60005: PUSH
60006: LD_VAR 0 5
60010: NOT
60011: OR
60012: IFFALSE 60016
// exit ;
60014: GO 60108
// if GetTaskList ( unit ) then
60016: LD_VAR 0 1
60020: PPUSH
60021: CALL_OW 437
60025: IFFALSE 60108
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60027: LD_STRING e
60029: PUSH
60030: LD_VAR 0 1
60034: PPUSH
60035: CALL_OW 437
60039: PUSH
60040: LD_INT 1
60042: ARRAY
60043: PUSH
60044: LD_INT 1
60046: ARRAY
60047: EQUAL
60048: PUSH
60049: LD_VAR 0 4
60053: PUSH
60054: LD_VAR 0 1
60058: PPUSH
60059: CALL_OW 437
60063: PUSH
60064: LD_INT 1
60066: ARRAY
60067: PUSH
60068: LD_INT 2
60070: ARRAY
60071: EQUAL
60072: AND
60073: PUSH
60074: LD_VAR 0 5
60078: PUSH
60079: LD_VAR 0 1
60083: PPUSH
60084: CALL_OW 437
60088: PUSH
60089: LD_INT 1
60091: ARRAY
60092: PUSH
60093: LD_INT 3
60095: ARRAY
60096: EQUAL
60097: AND
60098: IFFALSE 60108
// result := true end ;
60100: LD_ADDR_VAR 0 3
60104: PUSH
60105: LD_INT 1
60107: ST_TO_ADDR
// end ;
60108: LD_VAR 0 3
60112: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60113: LD_INT 0
60115: PPUSH
// result := false ;
60116: LD_ADDR_VAR 0 4
60120: PUSH
60121: LD_INT 0
60123: ST_TO_ADDR
// if GetTaskList ( unit ) then
60124: LD_VAR 0 1
60128: PPUSH
60129: CALL_OW 437
60133: IFFALSE 60216
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60135: LD_STRING M
60137: PUSH
60138: LD_VAR 0 1
60142: PPUSH
60143: CALL_OW 437
60147: PUSH
60148: LD_INT 1
60150: ARRAY
60151: PUSH
60152: LD_INT 1
60154: ARRAY
60155: EQUAL
60156: PUSH
60157: LD_VAR 0 2
60161: PUSH
60162: LD_VAR 0 1
60166: PPUSH
60167: CALL_OW 437
60171: PUSH
60172: LD_INT 1
60174: ARRAY
60175: PUSH
60176: LD_INT 2
60178: ARRAY
60179: EQUAL
60180: AND
60181: PUSH
60182: LD_VAR 0 3
60186: PUSH
60187: LD_VAR 0 1
60191: PPUSH
60192: CALL_OW 437
60196: PUSH
60197: LD_INT 1
60199: ARRAY
60200: PUSH
60201: LD_INT 3
60203: ARRAY
60204: EQUAL
60205: AND
60206: IFFALSE 60216
// result := true ;
60208: LD_ADDR_VAR 0 4
60212: PUSH
60213: LD_INT 1
60215: ST_TO_ADDR
// end ; end ;
60216: LD_VAR 0 4
60220: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60221: LD_INT 0
60223: PPUSH
60224: PPUSH
60225: PPUSH
60226: PPUSH
// if not unit or not area then
60227: LD_VAR 0 1
60231: NOT
60232: PUSH
60233: LD_VAR 0 2
60237: NOT
60238: OR
60239: IFFALSE 60243
// exit ;
60241: GO 60407
// tmp := AreaToList ( area , i ) ;
60243: LD_ADDR_VAR 0 6
60247: PUSH
60248: LD_VAR 0 2
60252: PPUSH
60253: LD_VAR 0 5
60257: PPUSH
60258: CALL_OW 517
60262: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60263: LD_ADDR_VAR 0 5
60267: PUSH
60268: DOUBLE
60269: LD_INT 1
60271: DEC
60272: ST_TO_ADDR
60273: LD_VAR 0 6
60277: PUSH
60278: LD_INT 1
60280: ARRAY
60281: PUSH
60282: FOR_TO
60283: IFFALSE 60405
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60285: LD_ADDR_VAR 0 7
60289: PUSH
60290: LD_VAR 0 6
60294: PUSH
60295: LD_INT 1
60297: ARRAY
60298: PUSH
60299: LD_VAR 0 5
60303: ARRAY
60304: PUSH
60305: LD_VAR 0 6
60309: PUSH
60310: LD_INT 2
60312: ARRAY
60313: PUSH
60314: LD_VAR 0 5
60318: ARRAY
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60324: LD_VAR 0 7
60328: PUSH
60329: LD_INT 1
60331: ARRAY
60332: PPUSH
60333: LD_VAR 0 7
60337: PUSH
60338: LD_INT 2
60340: ARRAY
60341: PPUSH
60342: CALL_OW 428
60346: PUSH
60347: LD_INT 0
60349: EQUAL
60350: IFFALSE 60403
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60352: LD_VAR 0 1
60356: PPUSH
60357: LD_VAR 0 7
60361: PUSH
60362: LD_INT 1
60364: ARRAY
60365: PPUSH
60366: LD_VAR 0 7
60370: PUSH
60371: LD_INT 2
60373: ARRAY
60374: PPUSH
60375: LD_VAR 0 3
60379: PPUSH
60380: CALL_OW 48
// result := IsPlaced ( unit ) ;
60384: LD_ADDR_VAR 0 4
60388: PUSH
60389: LD_VAR 0 1
60393: PPUSH
60394: CALL_OW 305
60398: ST_TO_ADDR
// exit ;
60399: POP
60400: POP
60401: GO 60407
// end ; end ;
60403: GO 60282
60405: POP
60406: POP
// end ;
60407: LD_VAR 0 4
60411: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60412: LD_INT 0
60414: PPUSH
60415: PPUSH
60416: PPUSH
// if not side or side > 8 then
60417: LD_VAR 0 1
60421: NOT
60422: PUSH
60423: LD_VAR 0 1
60427: PUSH
60428: LD_INT 8
60430: GREATER
60431: OR
60432: IFFALSE 60436
// exit ;
60434: GO 60623
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60436: LD_ADDR_VAR 0 4
60440: PUSH
60441: LD_INT 22
60443: PUSH
60444: LD_VAR 0 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 21
60455: PUSH
60456: LD_INT 3
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PPUSH
60467: CALL_OW 69
60471: ST_TO_ADDR
// if not tmp then
60472: LD_VAR 0 4
60476: NOT
60477: IFFALSE 60481
// exit ;
60479: GO 60623
// enable_addtolog := true ;
60481: LD_ADDR_OWVAR 81
60485: PUSH
60486: LD_INT 1
60488: ST_TO_ADDR
// AddToLog ( [ ) ;
60489: LD_STRING [
60491: PPUSH
60492: CALL_OW 561
// for i in tmp do
60496: LD_ADDR_VAR 0 3
60500: PUSH
60501: LD_VAR 0 4
60505: PUSH
60506: FOR_IN
60507: IFFALSE 60614
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60509: LD_STRING [
60511: PUSH
60512: LD_VAR 0 3
60516: PPUSH
60517: CALL_OW 266
60521: STR
60522: PUSH
60523: LD_STRING , 
60525: STR
60526: PUSH
60527: LD_VAR 0 3
60531: PPUSH
60532: CALL_OW 250
60536: STR
60537: PUSH
60538: LD_STRING , 
60540: STR
60541: PUSH
60542: LD_VAR 0 3
60546: PPUSH
60547: CALL_OW 251
60551: STR
60552: PUSH
60553: LD_STRING , 
60555: STR
60556: PUSH
60557: LD_VAR 0 3
60561: PPUSH
60562: CALL_OW 254
60566: STR
60567: PUSH
60568: LD_STRING , 
60570: STR
60571: PUSH
60572: LD_VAR 0 3
60576: PPUSH
60577: LD_INT 1
60579: PPUSH
60580: CALL_OW 268
60584: STR
60585: PUSH
60586: LD_STRING , 
60588: STR
60589: PUSH
60590: LD_VAR 0 3
60594: PPUSH
60595: LD_INT 2
60597: PPUSH
60598: CALL_OW 268
60602: STR
60603: PUSH
60604: LD_STRING ],
60606: STR
60607: PPUSH
60608: CALL_OW 561
// end ;
60612: GO 60506
60614: POP
60615: POP
// AddToLog ( ]; ) ;
60616: LD_STRING ];
60618: PPUSH
60619: CALL_OW 561
// end ;
60623: LD_VAR 0 2
60627: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60628: LD_INT 0
60630: PPUSH
60631: PPUSH
60632: PPUSH
60633: PPUSH
60634: PPUSH
// if not area or not rate or not max then
60635: LD_VAR 0 1
60639: NOT
60640: PUSH
60641: LD_VAR 0 2
60645: NOT
60646: OR
60647: PUSH
60648: LD_VAR 0 4
60652: NOT
60653: OR
60654: IFFALSE 60658
// exit ;
60656: GO 60850
// while 1 do
60658: LD_INT 1
60660: IFFALSE 60850
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60662: LD_ADDR_VAR 0 9
60666: PUSH
60667: LD_VAR 0 1
60671: PPUSH
60672: LD_INT 1
60674: PPUSH
60675: CALL_OW 287
60679: PUSH
60680: LD_INT 10
60682: MUL
60683: ST_TO_ADDR
// r := rate / 10 ;
60684: LD_ADDR_VAR 0 7
60688: PUSH
60689: LD_VAR 0 2
60693: PUSH
60694: LD_INT 10
60696: DIVREAL
60697: ST_TO_ADDR
// time := 1 1$00 ;
60698: LD_ADDR_VAR 0 8
60702: PUSH
60703: LD_INT 2100
60705: ST_TO_ADDR
// if amount < min then
60706: LD_VAR 0 9
60710: PUSH
60711: LD_VAR 0 3
60715: LESS
60716: IFFALSE 60734
// r := r * 2 else
60718: LD_ADDR_VAR 0 7
60722: PUSH
60723: LD_VAR 0 7
60727: PUSH
60728: LD_INT 2
60730: MUL
60731: ST_TO_ADDR
60732: GO 60760
// if amount > max then
60734: LD_VAR 0 9
60738: PUSH
60739: LD_VAR 0 4
60743: GREATER
60744: IFFALSE 60760
// r := r / 2 ;
60746: LD_ADDR_VAR 0 7
60750: PUSH
60751: LD_VAR 0 7
60755: PUSH
60756: LD_INT 2
60758: DIVREAL
60759: ST_TO_ADDR
// time := time / r ;
60760: LD_ADDR_VAR 0 8
60764: PUSH
60765: LD_VAR 0 8
60769: PUSH
60770: LD_VAR 0 7
60774: DIVREAL
60775: ST_TO_ADDR
// if time < 0 then
60776: LD_VAR 0 8
60780: PUSH
60781: LD_INT 0
60783: LESS
60784: IFFALSE 60801
// time := time * - 1 ;
60786: LD_ADDR_VAR 0 8
60790: PUSH
60791: LD_VAR 0 8
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: MUL
60800: ST_TO_ADDR
// wait ( time ) ;
60801: LD_VAR 0 8
60805: PPUSH
60806: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60810: LD_INT 35
60812: PPUSH
60813: LD_INT 875
60815: PPUSH
60816: CALL_OW 12
60820: PPUSH
60821: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60825: LD_INT 1
60827: PPUSH
60828: LD_INT 5
60830: PPUSH
60831: CALL_OW 12
60835: PPUSH
60836: LD_VAR 0 1
60840: PPUSH
60841: LD_INT 1
60843: PPUSH
60844: CALL_OW 55
// end ;
60848: GO 60658
// end ;
60850: LD_VAR 0 5
60854: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60855: LD_INT 0
60857: PPUSH
60858: PPUSH
60859: PPUSH
60860: PPUSH
60861: PPUSH
60862: PPUSH
60863: PPUSH
60864: PPUSH
// if not turrets or not factories then
60865: LD_VAR 0 1
60869: NOT
60870: PUSH
60871: LD_VAR 0 2
60875: NOT
60876: OR
60877: IFFALSE 60881
// exit ;
60879: GO 61188
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60881: LD_ADDR_VAR 0 10
60885: PUSH
60886: LD_INT 5
60888: PUSH
60889: LD_INT 6
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: LD_INT 4
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: LD_INT 5
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 24
60923: PUSH
60924: LD_INT 25
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 23
60933: PUSH
60934: LD_INT 27
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 42
60947: PUSH
60948: LD_INT 43
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 44
60957: PUSH
60958: LD_INT 46
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 45
60967: PUSH
60968: LD_INT 47
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: LIST
60984: ST_TO_ADDR
// result := [ ] ;
60985: LD_ADDR_VAR 0 3
60989: PUSH
60990: EMPTY
60991: ST_TO_ADDR
// for i in turrets do
60992: LD_ADDR_VAR 0 4
60996: PUSH
60997: LD_VAR 0 1
61001: PUSH
61002: FOR_IN
61003: IFFALSE 61186
// begin nat := GetNation ( i ) ;
61005: LD_ADDR_VAR 0 7
61009: PUSH
61010: LD_VAR 0 4
61014: PPUSH
61015: CALL_OW 248
61019: ST_TO_ADDR
// weapon := 0 ;
61020: LD_ADDR_VAR 0 8
61024: PUSH
61025: LD_INT 0
61027: ST_TO_ADDR
// if not nat then
61028: LD_VAR 0 7
61032: NOT
61033: IFFALSE 61037
// continue ;
61035: GO 61002
// for j in list [ nat ] do
61037: LD_ADDR_VAR 0 5
61041: PUSH
61042: LD_VAR 0 10
61046: PUSH
61047: LD_VAR 0 7
61051: ARRAY
61052: PUSH
61053: FOR_IN
61054: IFFALSE 61095
// if GetBWeapon ( i ) = j [ 1 ] then
61056: LD_VAR 0 4
61060: PPUSH
61061: CALL_OW 269
61065: PUSH
61066: LD_VAR 0 5
61070: PUSH
61071: LD_INT 1
61073: ARRAY
61074: EQUAL
61075: IFFALSE 61093
// begin weapon := j [ 2 ] ;
61077: LD_ADDR_VAR 0 8
61081: PUSH
61082: LD_VAR 0 5
61086: PUSH
61087: LD_INT 2
61089: ARRAY
61090: ST_TO_ADDR
// break ;
61091: GO 61095
// end ;
61093: GO 61053
61095: POP
61096: POP
// if not weapon then
61097: LD_VAR 0 8
61101: NOT
61102: IFFALSE 61106
// continue ;
61104: GO 61002
// for k in factories do
61106: LD_ADDR_VAR 0 6
61110: PUSH
61111: LD_VAR 0 2
61115: PUSH
61116: FOR_IN
61117: IFFALSE 61182
// begin weapons := AvailableWeaponList ( k ) ;
61119: LD_ADDR_VAR 0 9
61123: PUSH
61124: LD_VAR 0 6
61128: PPUSH
61129: CALL_OW 478
61133: ST_TO_ADDR
// if not weapons then
61134: LD_VAR 0 9
61138: NOT
61139: IFFALSE 61143
// continue ;
61141: GO 61116
// if weapon in weapons then
61143: LD_VAR 0 8
61147: PUSH
61148: LD_VAR 0 9
61152: IN
61153: IFFALSE 61180
// begin result := [ i , weapon ] ;
61155: LD_ADDR_VAR 0 3
61159: PUSH
61160: LD_VAR 0 4
61164: PUSH
61165: LD_VAR 0 8
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: ST_TO_ADDR
// exit ;
61174: POP
61175: POP
61176: POP
61177: POP
61178: GO 61188
// end ; end ;
61180: GO 61116
61182: POP
61183: POP
// end ;
61184: GO 61002
61186: POP
61187: POP
// end ;
61188: LD_VAR 0 3
61192: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61193: LD_INT 0
61195: PPUSH
// if not side or side > 8 then
61196: LD_VAR 0 3
61200: NOT
61201: PUSH
61202: LD_VAR 0 3
61206: PUSH
61207: LD_INT 8
61209: GREATER
61210: OR
61211: IFFALSE 61215
// exit ;
61213: GO 61274
// if not range then
61215: LD_VAR 0 4
61219: NOT
61220: IFFALSE 61231
// range := - 12 ;
61222: LD_ADDR_VAR 0 4
61226: PUSH
61227: LD_INT 12
61229: NEG
61230: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61231: LD_VAR 0 1
61235: PPUSH
61236: LD_VAR 0 2
61240: PPUSH
61241: LD_VAR 0 3
61245: PPUSH
61246: LD_VAR 0 4
61250: PPUSH
61251: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61255: LD_VAR 0 1
61259: PPUSH
61260: LD_VAR 0 2
61264: PPUSH
61265: LD_VAR 0 3
61269: PPUSH
61270: CALL_OW 331
// end ;
61274: LD_VAR 0 5
61278: RET
// export function Video ( mode ) ; begin
61279: LD_INT 0
61281: PPUSH
// ingame_video = mode ;
61282: LD_ADDR_OWVAR 52
61286: PUSH
61287: LD_VAR 0 1
61291: ST_TO_ADDR
// interface_hidden = mode ;
61292: LD_ADDR_OWVAR 54
61296: PUSH
61297: LD_VAR 0 1
61301: ST_TO_ADDR
// end ;
61302: LD_VAR 0 2
61306: RET
// export function Join ( array , element ) ; begin
61307: LD_INT 0
61309: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61310: LD_ADDR_VAR 0 3
61314: PUSH
61315: LD_VAR 0 1
61319: PPUSH
61320: LD_VAR 0 1
61324: PUSH
61325: LD_INT 1
61327: PLUS
61328: PPUSH
61329: LD_VAR 0 2
61333: PPUSH
61334: CALL_OW 1
61338: ST_TO_ADDR
// end ;
61339: LD_VAR 0 3
61343: RET
// export function JoinUnion ( array , element ) ; begin
61344: LD_INT 0
61346: PPUSH
// result := array union element ;
61347: LD_ADDR_VAR 0 3
61351: PUSH
61352: LD_VAR 0 1
61356: PUSH
61357: LD_VAR 0 2
61361: UNION
61362: ST_TO_ADDR
// end ;
61363: LD_VAR 0 3
61367: RET
// export function GetBehemoths ( side ) ; begin
61368: LD_INT 0
61370: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61371: LD_ADDR_VAR 0 2
61375: PUSH
61376: LD_INT 22
61378: PUSH
61379: LD_VAR 0 1
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 31
61390: PUSH
61391: LD_INT 25
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PPUSH
61402: CALL_OW 69
61406: ST_TO_ADDR
// end ;
61407: LD_VAR 0 2
61411: RET
// export function Shuffle ( array ) ; var i , index ; begin
61412: LD_INT 0
61414: PPUSH
61415: PPUSH
61416: PPUSH
// result := [ ] ;
61417: LD_ADDR_VAR 0 2
61421: PUSH
61422: EMPTY
61423: ST_TO_ADDR
// if not array then
61424: LD_VAR 0 1
61428: NOT
61429: IFFALSE 61433
// exit ;
61431: GO 61532
// Randomize ;
61433: CALL_OW 10
// for i = array downto 1 do
61437: LD_ADDR_VAR 0 3
61441: PUSH
61442: DOUBLE
61443: LD_VAR 0 1
61447: INC
61448: ST_TO_ADDR
61449: LD_INT 1
61451: PUSH
61452: FOR_DOWNTO
61453: IFFALSE 61530
// begin index := rand ( 1 , array ) ;
61455: LD_ADDR_VAR 0 4
61459: PUSH
61460: LD_INT 1
61462: PPUSH
61463: LD_VAR 0 1
61467: PPUSH
61468: CALL_OW 12
61472: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61473: LD_ADDR_VAR 0 2
61477: PUSH
61478: LD_VAR 0 2
61482: PPUSH
61483: LD_VAR 0 2
61487: PUSH
61488: LD_INT 1
61490: PLUS
61491: PPUSH
61492: LD_VAR 0 1
61496: PUSH
61497: LD_VAR 0 4
61501: ARRAY
61502: PPUSH
61503: CALL_OW 2
61507: ST_TO_ADDR
// array := Delete ( array , index ) ;
61508: LD_ADDR_VAR 0 1
61512: PUSH
61513: LD_VAR 0 1
61517: PPUSH
61518: LD_VAR 0 4
61522: PPUSH
61523: CALL_OW 3
61527: ST_TO_ADDR
// end ;
61528: GO 61452
61530: POP
61531: POP
// end ;
61532: LD_VAR 0 2
61536: RET
// export function GetBaseMaterials ( base ) ; begin
61537: LD_INT 0
61539: PPUSH
// result := [ 0 , 0 , 0 ] ;
61540: LD_ADDR_VAR 0 2
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: LIST
61558: ST_TO_ADDR
// if not base then
61559: LD_VAR 0 1
61563: NOT
61564: IFFALSE 61568
// exit ;
61566: GO 61617
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61568: LD_ADDR_VAR 0 2
61572: PUSH
61573: LD_VAR 0 1
61577: PPUSH
61578: LD_INT 1
61580: PPUSH
61581: CALL_OW 275
61585: PUSH
61586: LD_VAR 0 1
61590: PPUSH
61591: LD_INT 2
61593: PPUSH
61594: CALL_OW 275
61598: PUSH
61599: LD_VAR 0 1
61603: PPUSH
61604: LD_INT 3
61606: PPUSH
61607: CALL_OW 275
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: LIST
61616: ST_TO_ADDR
// end ;
61617: LD_VAR 0 2
61621: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61622: LD_INT 0
61624: PPUSH
61625: PPUSH
// result := array ;
61626: LD_ADDR_VAR 0 3
61630: PUSH
61631: LD_VAR 0 1
61635: ST_TO_ADDR
// if size > 0 then
61636: LD_VAR 0 2
61640: PUSH
61641: LD_INT 0
61643: GREATER
61644: IFFALSE 61690
// for i := array downto size do
61646: LD_ADDR_VAR 0 4
61650: PUSH
61651: DOUBLE
61652: LD_VAR 0 1
61656: INC
61657: ST_TO_ADDR
61658: LD_VAR 0 2
61662: PUSH
61663: FOR_DOWNTO
61664: IFFALSE 61688
// result := Delete ( result , result ) ;
61666: LD_ADDR_VAR 0 3
61670: PUSH
61671: LD_VAR 0 3
61675: PPUSH
61676: LD_VAR 0 3
61680: PPUSH
61681: CALL_OW 3
61685: ST_TO_ADDR
61686: GO 61663
61688: POP
61689: POP
// end ;
61690: LD_VAR 0 3
61694: RET
// export function ComExit ( unit ) ; var tmp ; begin
61695: LD_INT 0
61697: PPUSH
61698: PPUSH
// if not IsInUnit ( unit ) then
61699: LD_VAR 0 1
61703: PPUSH
61704: CALL_OW 310
61708: NOT
61709: IFFALSE 61713
// exit ;
61711: GO 61773
// tmp := IsInUnit ( unit ) ;
61713: LD_ADDR_VAR 0 3
61717: PUSH
61718: LD_VAR 0 1
61722: PPUSH
61723: CALL_OW 310
61727: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61728: LD_VAR 0 3
61732: PPUSH
61733: CALL_OW 247
61737: PUSH
61738: LD_INT 2
61740: EQUAL
61741: IFFALSE 61754
// ComExitVehicle ( unit ) else
61743: LD_VAR 0 1
61747: PPUSH
61748: CALL_OW 121
61752: GO 61763
// ComExitBuilding ( unit ) ;
61754: LD_VAR 0 1
61758: PPUSH
61759: CALL_OW 122
// result := tmp ;
61763: LD_ADDR_VAR 0 2
61767: PUSH
61768: LD_VAR 0 3
61772: ST_TO_ADDR
// end ;
61773: LD_VAR 0 2
61777: RET
// export function ComExitAll ( units ) ; var i ; begin
61778: LD_INT 0
61780: PPUSH
61781: PPUSH
// if not units then
61782: LD_VAR 0 1
61786: NOT
61787: IFFALSE 61791
// exit ;
61789: GO 61817
// for i in units do
61791: LD_ADDR_VAR 0 3
61795: PUSH
61796: LD_VAR 0 1
61800: PUSH
61801: FOR_IN
61802: IFFALSE 61815
// ComExit ( i ) ;
61804: LD_VAR 0 3
61808: PPUSH
61809: CALL 61695 0 1
61813: GO 61801
61815: POP
61816: POP
// end ;
61817: LD_VAR 0 2
61821: RET
// export function ResetHc ; begin
61822: LD_INT 0
61824: PPUSH
// InitHc ;
61825: CALL_OW 19
// hc_importance := 0 ;
61829: LD_ADDR_OWVAR 32
61833: PUSH
61834: LD_INT 0
61836: ST_TO_ADDR
// end ;
61837: LD_VAR 0 1
61841: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61842: LD_INT 0
61844: PPUSH
61845: PPUSH
61846: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61847: LD_ADDR_VAR 0 6
61851: PUSH
61852: LD_VAR 0 1
61856: PUSH
61857: LD_VAR 0 3
61861: PLUS
61862: PUSH
61863: LD_INT 2
61865: DIV
61866: ST_TO_ADDR
// if _x < 0 then
61867: LD_VAR 0 6
61871: PUSH
61872: LD_INT 0
61874: LESS
61875: IFFALSE 61892
// _x := _x * - 1 ;
61877: LD_ADDR_VAR 0 6
61881: PUSH
61882: LD_VAR 0 6
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: MUL
61891: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61892: LD_ADDR_VAR 0 7
61896: PUSH
61897: LD_VAR 0 2
61901: PUSH
61902: LD_VAR 0 4
61906: PLUS
61907: PUSH
61908: LD_INT 2
61910: DIV
61911: ST_TO_ADDR
// if _y < 0 then
61912: LD_VAR 0 7
61916: PUSH
61917: LD_INT 0
61919: LESS
61920: IFFALSE 61937
// _y := _y * - 1 ;
61922: LD_ADDR_VAR 0 7
61926: PUSH
61927: LD_VAR 0 7
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: MUL
61936: ST_TO_ADDR
// result := [ _x , _y ] ;
61937: LD_ADDR_VAR 0 5
61941: PUSH
61942: LD_VAR 0 6
61946: PUSH
61947: LD_VAR 0 7
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: ST_TO_ADDR
// end ;
61956: LD_VAR 0 5
61960: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61961: LD_INT 0
61963: PPUSH
61964: PPUSH
61965: PPUSH
61966: PPUSH
// task := GetTaskList ( unit ) ;
61967: LD_ADDR_VAR 0 7
61971: PUSH
61972: LD_VAR 0 1
61976: PPUSH
61977: CALL_OW 437
61981: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61982: LD_VAR 0 7
61986: NOT
61987: PUSH
61988: LD_VAR 0 1
61992: PPUSH
61993: LD_VAR 0 2
61997: PPUSH
61998: CALL_OW 308
62002: NOT
62003: AND
62004: IFFALSE 62008
// exit ;
62006: GO 62126
// if IsInArea ( unit , area ) then
62008: LD_VAR 0 1
62012: PPUSH
62013: LD_VAR 0 2
62017: PPUSH
62018: CALL_OW 308
62022: IFFALSE 62040
// begin ComMoveToArea ( unit , goAway ) ;
62024: LD_VAR 0 1
62028: PPUSH
62029: LD_VAR 0 3
62033: PPUSH
62034: CALL_OW 113
// exit ;
62038: GO 62126
// end ; if task [ 1 ] [ 1 ] <> M then
62040: LD_VAR 0 7
62044: PUSH
62045: LD_INT 1
62047: ARRAY
62048: PUSH
62049: LD_INT 1
62051: ARRAY
62052: PUSH
62053: LD_STRING M
62055: NONEQUAL
62056: IFFALSE 62060
// exit ;
62058: GO 62126
// x := task [ 1 ] [ 2 ] ;
62060: LD_ADDR_VAR 0 5
62064: PUSH
62065: LD_VAR 0 7
62069: PUSH
62070: LD_INT 1
62072: ARRAY
62073: PUSH
62074: LD_INT 2
62076: ARRAY
62077: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62078: LD_ADDR_VAR 0 6
62082: PUSH
62083: LD_VAR 0 7
62087: PUSH
62088: LD_INT 1
62090: ARRAY
62091: PUSH
62092: LD_INT 3
62094: ARRAY
62095: ST_TO_ADDR
// if InArea ( x , y , area ) then
62096: LD_VAR 0 5
62100: PPUSH
62101: LD_VAR 0 6
62105: PPUSH
62106: LD_VAR 0 2
62110: PPUSH
62111: CALL_OW 309
62115: IFFALSE 62126
// ComStop ( unit ) ;
62117: LD_VAR 0 1
62121: PPUSH
62122: CALL_OW 141
// end ;
62126: LD_VAR 0 4
62130: RET
// export function Abs ( value ) ; begin
62131: LD_INT 0
62133: PPUSH
// result := value ;
62134: LD_ADDR_VAR 0 2
62138: PUSH
62139: LD_VAR 0 1
62143: ST_TO_ADDR
// if value < 0 then
62144: LD_VAR 0 1
62148: PUSH
62149: LD_INT 0
62151: LESS
62152: IFFALSE 62169
// result := value * - 1 ;
62154: LD_ADDR_VAR 0 2
62158: PUSH
62159: LD_VAR 0 1
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: MUL
62168: ST_TO_ADDR
// end ;
62169: LD_VAR 0 2
62173: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62174: LD_INT 0
62176: PPUSH
62177: PPUSH
62178: PPUSH
62179: PPUSH
62180: PPUSH
62181: PPUSH
62182: PPUSH
62183: PPUSH
// if not unit or not building then
62184: LD_VAR 0 1
62188: NOT
62189: PUSH
62190: LD_VAR 0 2
62194: NOT
62195: OR
62196: IFFALSE 62200
// exit ;
62198: GO 62426
// x := GetX ( building ) ;
62200: LD_ADDR_VAR 0 4
62204: PUSH
62205: LD_VAR 0 2
62209: PPUSH
62210: CALL_OW 250
62214: ST_TO_ADDR
// y := GetY ( building ) ;
62215: LD_ADDR_VAR 0 6
62219: PUSH
62220: LD_VAR 0 2
62224: PPUSH
62225: CALL_OW 251
62229: ST_TO_ADDR
// d := GetDir ( building ) ;
62230: LD_ADDR_VAR 0 8
62234: PUSH
62235: LD_VAR 0 2
62239: PPUSH
62240: CALL_OW 254
62244: ST_TO_ADDR
// r := 4 ;
62245: LD_ADDR_VAR 0 9
62249: PUSH
62250: LD_INT 4
62252: ST_TO_ADDR
// for i := 1 to 5 do
62253: LD_ADDR_VAR 0 10
62257: PUSH
62258: DOUBLE
62259: LD_INT 1
62261: DEC
62262: ST_TO_ADDR
62263: LD_INT 5
62265: PUSH
62266: FOR_TO
62267: IFFALSE 62424
// begin _x := ShiftX ( x , d , r + i ) ;
62269: LD_ADDR_VAR 0 5
62273: PUSH
62274: LD_VAR 0 4
62278: PPUSH
62279: LD_VAR 0 8
62283: PPUSH
62284: LD_VAR 0 9
62288: PUSH
62289: LD_VAR 0 10
62293: PLUS
62294: PPUSH
62295: CALL_OW 272
62299: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62300: LD_ADDR_VAR 0 7
62304: PUSH
62305: LD_VAR 0 6
62309: PPUSH
62310: LD_VAR 0 8
62314: PPUSH
62315: LD_VAR 0 9
62319: PUSH
62320: LD_VAR 0 10
62324: PLUS
62325: PPUSH
62326: CALL_OW 273
62330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62331: LD_VAR 0 5
62335: PPUSH
62336: LD_VAR 0 7
62340: PPUSH
62341: CALL_OW 488
62345: PUSH
62346: LD_VAR 0 5
62350: PPUSH
62351: LD_VAR 0 7
62355: PPUSH
62356: CALL_OW 428
62360: PPUSH
62361: CALL_OW 247
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: IN
62376: NOT
62377: AND
62378: IFFALSE 62422
// begin ComMoveXY ( unit , _x , _y ) ;
62380: LD_VAR 0 1
62384: PPUSH
62385: LD_VAR 0 5
62389: PPUSH
62390: LD_VAR 0 7
62394: PPUSH
62395: CALL_OW 111
// result := [ _x , _y ] ;
62399: LD_ADDR_VAR 0 3
62403: PUSH
62404: LD_VAR 0 5
62408: PUSH
62409: LD_VAR 0 7
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: ST_TO_ADDR
// exit ;
62418: POP
62419: POP
62420: GO 62426
// end ; end ;
62422: GO 62266
62424: POP
62425: POP
// end ;
62426: LD_VAR 0 3
62430: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62431: LD_INT 0
62433: PPUSH
62434: PPUSH
62435: PPUSH
// result := 0 ;
62436: LD_ADDR_VAR 0 3
62440: PUSH
62441: LD_INT 0
62443: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62444: LD_VAR 0 1
62448: PUSH
62449: LD_INT 0
62451: LESS
62452: PUSH
62453: LD_VAR 0 1
62457: PUSH
62458: LD_INT 8
62460: GREATER
62461: OR
62462: PUSH
62463: LD_VAR 0 2
62467: PUSH
62468: LD_INT 0
62470: LESS
62471: OR
62472: PUSH
62473: LD_VAR 0 2
62477: PUSH
62478: LD_INT 8
62480: GREATER
62481: OR
62482: IFFALSE 62486
// exit ;
62484: GO 62561
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62486: LD_ADDR_VAR 0 4
62490: PUSH
62491: LD_INT 22
62493: PUSH
62494: LD_VAR 0 2
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PPUSH
62503: CALL_OW 69
62507: PUSH
62508: FOR_IN
62509: IFFALSE 62559
// begin un := UnitShoot ( i ) ;
62511: LD_ADDR_VAR 0 5
62515: PUSH
62516: LD_VAR 0 4
62520: PPUSH
62521: CALL_OW 504
62525: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62526: LD_VAR 0 5
62530: PPUSH
62531: CALL_OW 255
62535: PUSH
62536: LD_VAR 0 1
62540: EQUAL
62541: IFFALSE 62557
// begin result := un ;
62543: LD_ADDR_VAR 0 3
62547: PUSH
62548: LD_VAR 0 5
62552: ST_TO_ADDR
// exit ;
62553: POP
62554: POP
62555: GO 62561
// end ; end ;
62557: GO 62508
62559: POP
62560: POP
// end ;
62561: LD_VAR 0 3
62565: RET
// export function GetCargoBay ( units ) ; begin
62566: LD_INT 0
62568: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62569: LD_ADDR_VAR 0 2
62573: PUSH
62574: LD_VAR 0 1
62578: PPUSH
62579: LD_INT 2
62581: PUSH
62582: LD_INT 34
62584: PUSH
62585: LD_INT 12
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 34
62594: PUSH
62595: LD_INT 51
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 34
62604: PUSH
62605: LD_INT 32
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 34
62614: PUSH
62615: LD_EXP 59
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: PPUSH
62631: CALL_OW 72
62635: ST_TO_ADDR
// end ;
62636: LD_VAR 0 2
62640: RET
// export function Negate ( value ) ; begin
62641: LD_INT 0
62643: PPUSH
// result := not value ;
62644: LD_ADDR_VAR 0 2
62648: PUSH
62649: LD_VAR 0 1
62653: NOT
62654: ST_TO_ADDR
// end ;
62655: LD_VAR 0 2
62659: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
62660: LD_INT 0
62662: PPUSH
// if x1 = x2 then
62663: LD_VAR 0 1
62667: PUSH
62668: LD_VAR 0 3
62672: EQUAL
62673: IFFALSE 62707
// begin if y1 > y2 then
62675: LD_VAR 0 2
62679: PUSH
62680: LD_VAR 0 4
62684: GREATER
62685: IFFALSE 62697
// result := 0 else
62687: LD_ADDR_VAR 0 5
62691: PUSH
62692: LD_INT 0
62694: ST_TO_ADDR
62695: GO 62705
// result := 3 ;
62697: LD_ADDR_VAR 0 5
62701: PUSH
62702: LD_INT 3
62704: ST_TO_ADDR
// exit ;
62705: GO 62793
// end ; if y1 = y2 then
62707: LD_VAR 0 2
62711: PUSH
62712: LD_VAR 0 4
62716: EQUAL
62717: IFFALSE 62751
// begin if x1 > x2 then
62719: LD_VAR 0 1
62723: PUSH
62724: LD_VAR 0 3
62728: GREATER
62729: IFFALSE 62741
// result := 1 else
62731: LD_ADDR_VAR 0 5
62735: PUSH
62736: LD_INT 1
62738: ST_TO_ADDR
62739: GO 62749
// result := 4 ;
62741: LD_ADDR_VAR 0 5
62745: PUSH
62746: LD_INT 4
62748: ST_TO_ADDR
// exit ;
62749: GO 62793
// end ; if x1 > x2 and y1 > y2 then
62751: LD_VAR 0 1
62755: PUSH
62756: LD_VAR 0 3
62760: GREATER
62761: PUSH
62762: LD_VAR 0 2
62766: PUSH
62767: LD_VAR 0 4
62771: GREATER
62772: AND
62773: IFFALSE 62785
// result := 2 else
62775: LD_ADDR_VAR 0 5
62779: PUSH
62780: LD_INT 2
62782: ST_TO_ADDR
62783: GO 62793
// result := 5 ;
62785: LD_ADDR_VAR 0 5
62789: PUSH
62790: LD_INT 5
62792: ST_TO_ADDR
// end ;
62793: LD_VAR 0 5
62797: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62798: LD_INT 0
62800: PPUSH
62801: PPUSH
// if not driver or not IsInUnit ( driver ) then
62802: LD_VAR 0 1
62806: NOT
62807: PUSH
62808: LD_VAR 0 1
62812: PPUSH
62813: CALL_OW 310
62817: NOT
62818: OR
62819: IFFALSE 62823
// exit ;
62821: GO 62913
// vehicle := IsInUnit ( driver ) ;
62823: LD_ADDR_VAR 0 3
62827: PUSH
62828: LD_VAR 0 1
62832: PPUSH
62833: CALL_OW 310
62837: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62838: LD_VAR 0 1
62842: PPUSH
62843: LD_STRING \
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: PUSH
62873: LD_STRING E
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: LD_VAR 0 3
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PPUSH
62909: CALL_OW 446
// end ;
62913: LD_VAR 0 2
62917: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62918: LD_INT 0
62920: PPUSH
62921: PPUSH
// if not driver or not IsInUnit ( driver ) then
62922: LD_VAR 0 1
62926: NOT
62927: PUSH
62928: LD_VAR 0 1
62932: PPUSH
62933: CALL_OW 310
62937: NOT
62938: OR
62939: IFFALSE 62943
// exit ;
62941: GO 63033
// vehicle := IsInUnit ( driver ) ;
62943: LD_ADDR_VAR 0 3
62947: PUSH
62948: LD_VAR 0 1
62952: PPUSH
62953: CALL_OW 310
62957: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62958: LD_VAR 0 1
62962: PPUSH
62963: LD_STRING \
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: PUSH
62993: LD_STRING E
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: LD_VAR 0 3
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PPUSH
63029: CALL_OW 447
// end ;
63033: LD_VAR 0 2
63037: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63038: LD_INT 0
63040: PPUSH
63041: PPUSH
63042: PPUSH
// tmp := [ ] ;
63043: LD_ADDR_VAR 0 5
63047: PUSH
63048: EMPTY
63049: ST_TO_ADDR
// for i in units do
63050: LD_ADDR_VAR 0 4
63054: PUSH
63055: LD_VAR 0 1
63059: PUSH
63060: FOR_IN
63061: IFFALSE 63099
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63063: LD_ADDR_VAR 0 5
63067: PUSH
63068: LD_VAR 0 5
63072: PPUSH
63073: LD_VAR 0 5
63077: PUSH
63078: LD_INT 1
63080: PLUS
63081: PPUSH
63082: LD_VAR 0 4
63086: PPUSH
63087: CALL_OW 256
63091: PPUSH
63092: CALL_OW 2
63096: ST_TO_ADDR
63097: GO 63060
63099: POP
63100: POP
// if not tmp then
63101: LD_VAR 0 5
63105: NOT
63106: IFFALSE 63110
// exit ;
63108: GO 63158
// if asc then
63110: LD_VAR 0 2
63114: IFFALSE 63138
// result := SortListByListAsc ( units , tmp ) else
63116: LD_ADDR_VAR 0 3
63120: PUSH
63121: LD_VAR 0 1
63125: PPUSH
63126: LD_VAR 0 5
63130: PPUSH
63131: CALL_OW 76
63135: ST_TO_ADDR
63136: GO 63158
// result := SortListByListDesc ( units , tmp ) ;
63138: LD_ADDR_VAR 0 3
63142: PUSH
63143: LD_VAR 0 1
63147: PPUSH
63148: LD_VAR 0 5
63152: PPUSH
63153: CALL_OW 77
63157: ST_TO_ADDR
// end ;
63158: LD_VAR 0 3
63162: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63163: LD_INT 0
63165: PPUSH
63166: PPUSH
// task := GetTaskList ( mech ) ;
63167: LD_ADDR_VAR 0 4
63171: PUSH
63172: LD_VAR 0 1
63176: PPUSH
63177: CALL_OW 437
63181: ST_TO_ADDR
// if not task then
63182: LD_VAR 0 4
63186: NOT
63187: IFFALSE 63191
// exit ;
63189: GO 63233
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63191: LD_ADDR_VAR 0 3
63195: PUSH
63196: LD_VAR 0 4
63200: PUSH
63201: LD_INT 1
63203: ARRAY
63204: PUSH
63205: LD_INT 1
63207: ARRAY
63208: PUSH
63209: LD_STRING r
63211: EQUAL
63212: PUSH
63213: LD_VAR 0 4
63217: PUSH
63218: LD_INT 1
63220: ARRAY
63221: PUSH
63222: LD_INT 4
63224: ARRAY
63225: PUSH
63226: LD_VAR 0 2
63230: EQUAL
63231: AND
63232: ST_TO_ADDR
// end ;
63233: LD_VAR 0 3
63237: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63238: LD_INT 0
63240: PPUSH
// SetDir ( unit , d ) ;
63241: LD_VAR 0 1
63245: PPUSH
63246: LD_VAR 0 4
63250: PPUSH
63251: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63255: LD_VAR 0 1
63259: PPUSH
63260: LD_VAR 0 2
63264: PPUSH
63265: LD_VAR 0 3
63269: PPUSH
63270: LD_VAR 0 5
63274: PPUSH
63275: CALL_OW 48
// end ;
63279: LD_VAR 0 6
63283: RET
// export function ToNaturalNumber ( number ) ; begin
63284: LD_INT 0
63286: PPUSH
// result := number div 1 ;
63287: LD_ADDR_VAR 0 2
63291: PUSH
63292: LD_VAR 0 1
63296: PUSH
63297: LD_INT 1
63299: DIV
63300: ST_TO_ADDR
// if number < 0 then
63301: LD_VAR 0 1
63305: PUSH
63306: LD_INT 0
63308: LESS
63309: IFFALSE 63319
// result := 0 ;
63311: LD_ADDR_VAR 0 2
63315: PUSH
63316: LD_INT 0
63318: ST_TO_ADDR
// end ; end_of_file
63319: LD_VAR 0 2
63323: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
63324: LD_INT 0
63326: PPUSH
// ar_miner := 81 ;
63327: LD_ADDR_EXP 65
63331: PUSH
63332: LD_INT 81
63334: ST_TO_ADDR
// ar_crane := 88 ;
63335: LD_ADDR_EXP 64
63339: PUSH
63340: LD_INT 88
63342: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
63343: LD_ADDR_EXP 59
63347: PUSH
63348: LD_INT 89
63350: ST_TO_ADDR
// us_hack := 99 ;
63351: LD_ADDR_EXP 60
63355: PUSH
63356: LD_INT 99
63358: ST_TO_ADDR
// us_artillery := 97 ;
63359: LD_ADDR_EXP 61
63363: PUSH
63364: LD_INT 97
63366: ST_TO_ADDR
// ar_bio_bomb := 91 ;
63367: LD_ADDR_EXP 62
63371: PUSH
63372: LD_INT 91
63374: ST_TO_ADDR
// ar_mortar := 92 ;
63375: LD_ADDR_EXP 63
63379: PUSH
63380: LD_INT 92
63382: ST_TO_ADDR
// ru_radar := 98 ;
63383: LD_ADDR_EXP 58
63387: PUSH
63388: LD_INT 98
63390: ST_TO_ADDR
// tech_Artillery := 80 ;
63391: LD_ADDR_EXP 66
63395: PUSH
63396: LD_INT 80
63398: ST_TO_ADDR
// tech_RadMat := 81 ;
63399: LD_ADDR_EXP 67
63403: PUSH
63404: LD_INT 81
63406: ST_TO_ADDR
// tech_BasicTools := 82 ;
63407: LD_ADDR_EXP 68
63411: PUSH
63412: LD_INT 82
63414: ST_TO_ADDR
// tech_Cargo := 83 ;
63415: LD_ADDR_EXP 69
63419: PUSH
63420: LD_INT 83
63422: ST_TO_ADDR
// tech_Track := 84 ;
63423: LD_ADDR_EXP 70
63427: PUSH
63428: LD_INT 84
63430: ST_TO_ADDR
// tech_Crane := 85 ;
63431: LD_ADDR_EXP 71
63435: PUSH
63436: LD_INT 85
63438: ST_TO_ADDR
// tech_Bulldozer := 86 ;
63439: LD_ADDR_EXP 72
63443: PUSH
63444: LD_INT 86
63446: ST_TO_ADDR
// tech_Hovercraft := 87 ;
63447: LD_ADDR_EXP 73
63451: PUSH
63452: LD_INT 87
63454: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
63455: LD_ADDR_EXP 74
63459: PUSH
63460: LD_INT 88
63462: ST_TO_ADDR
// class_mastodont := 31 ;
63463: LD_ADDR_EXP 75
63467: PUSH
63468: LD_INT 31
63470: ST_TO_ADDR
// class_horse := 21 ;
63471: LD_ADDR_EXP 76
63475: PUSH
63476: LD_INT 21
63478: ST_TO_ADDR
// end ;
63479: LD_VAR 0 1
63483: RET
// every 1 do
63484: GO 63486
63486: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
63487: CALL 63324 0 0
63491: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63492: LD_INT 0
63494: PPUSH
// if p2 = 100 then
63495: LD_VAR 0 2
63499: PUSH
63500: LD_INT 100
63502: EQUAL
63503: IFFALSE 64452
// begin if not StreamModeActive then
63505: LD_EXP 77
63509: NOT
63510: IFFALSE 63520
// StreamModeActive := true ;
63512: LD_ADDR_EXP 77
63516: PUSH
63517: LD_INT 1
63519: ST_TO_ADDR
// if p3 = 0 then
63520: LD_VAR 0 3
63524: PUSH
63525: LD_INT 0
63527: EQUAL
63528: IFFALSE 63534
// InitStreamMode ;
63530: CALL 64612 0 0
// if p3 = 1 then
63534: LD_VAR 0 3
63538: PUSH
63539: LD_INT 1
63541: EQUAL
63542: IFFALSE 63552
// sRocket := true ;
63544: LD_ADDR_EXP 82
63548: PUSH
63549: LD_INT 1
63551: ST_TO_ADDR
// if p3 = 2 then
63552: LD_VAR 0 3
63556: PUSH
63557: LD_INT 2
63559: EQUAL
63560: IFFALSE 63570
// sSpeed := true ;
63562: LD_ADDR_EXP 81
63566: PUSH
63567: LD_INT 1
63569: ST_TO_ADDR
// if p3 = 3 then
63570: LD_VAR 0 3
63574: PUSH
63575: LD_INT 3
63577: EQUAL
63578: IFFALSE 63588
// sEngine := true ;
63580: LD_ADDR_EXP 83
63584: PUSH
63585: LD_INT 1
63587: ST_TO_ADDR
// if p3 = 4 then
63588: LD_VAR 0 3
63592: PUSH
63593: LD_INT 4
63595: EQUAL
63596: IFFALSE 63606
// sSpec := true ;
63598: LD_ADDR_EXP 80
63602: PUSH
63603: LD_INT 1
63605: ST_TO_ADDR
// if p3 = 5 then
63606: LD_VAR 0 3
63610: PUSH
63611: LD_INT 5
63613: EQUAL
63614: IFFALSE 63624
// sLevel := true ;
63616: LD_ADDR_EXP 84
63620: PUSH
63621: LD_INT 1
63623: ST_TO_ADDR
// if p3 = 6 then
63624: LD_VAR 0 3
63628: PUSH
63629: LD_INT 6
63631: EQUAL
63632: IFFALSE 63642
// sArmoury := true ;
63634: LD_ADDR_EXP 85
63638: PUSH
63639: LD_INT 1
63641: ST_TO_ADDR
// if p3 = 7 then
63642: LD_VAR 0 3
63646: PUSH
63647: LD_INT 7
63649: EQUAL
63650: IFFALSE 63660
// sRadar := true ;
63652: LD_ADDR_EXP 86
63656: PUSH
63657: LD_INT 1
63659: ST_TO_ADDR
// if p3 = 8 then
63660: LD_VAR 0 3
63664: PUSH
63665: LD_INT 8
63667: EQUAL
63668: IFFALSE 63678
// sBunker := true ;
63670: LD_ADDR_EXP 87
63674: PUSH
63675: LD_INT 1
63677: ST_TO_ADDR
// if p3 = 9 then
63678: LD_VAR 0 3
63682: PUSH
63683: LD_INT 9
63685: EQUAL
63686: IFFALSE 63696
// sHack := true ;
63688: LD_ADDR_EXP 88
63692: PUSH
63693: LD_INT 1
63695: ST_TO_ADDR
// if p3 = 10 then
63696: LD_VAR 0 3
63700: PUSH
63701: LD_INT 10
63703: EQUAL
63704: IFFALSE 63714
// sFire := true ;
63706: LD_ADDR_EXP 89
63710: PUSH
63711: LD_INT 1
63713: ST_TO_ADDR
// if p3 = 11 then
63714: LD_VAR 0 3
63718: PUSH
63719: LD_INT 11
63721: EQUAL
63722: IFFALSE 63732
// sRefresh := true ;
63724: LD_ADDR_EXP 90
63728: PUSH
63729: LD_INT 1
63731: ST_TO_ADDR
// if p3 = 12 then
63732: LD_VAR 0 3
63736: PUSH
63737: LD_INT 12
63739: EQUAL
63740: IFFALSE 63750
// sExp := true ;
63742: LD_ADDR_EXP 91
63746: PUSH
63747: LD_INT 1
63749: ST_TO_ADDR
// if p3 = 13 then
63750: LD_VAR 0 3
63754: PUSH
63755: LD_INT 13
63757: EQUAL
63758: IFFALSE 63768
// sDepot := true ;
63760: LD_ADDR_EXP 92
63764: PUSH
63765: LD_INT 1
63767: ST_TO_ADDR
// if p3 = 14 then
63768: LD_VAR 0 3
63772: PUSH
63773: LD_INT 14
63775: EQUAL
63776: IFFALSE 63786
// sFlag := true ;
63778: LD_ADDR_EXP 93
63782: PUSH
63783: LD_INT 1
63785: ST_TO_ADDR
// if p3 = 15 then
63786: LD_VAR 0 3
63790: PUSH
63791: LD_INT 15
63793: EQUAL
63794: IFFALSE 63804
// sKamikadze := true ;
63796: LD_ADDR_EXP 101
63800: PUSH
63801: LD_INT 1
63803: ST_TO_ADDR
// if p3 = 16 then
63804: LD_VAR 0 3
63808: PUSH
63809: LD_INT 16
63811: EQUAL
63812: IFFALSE 63822
// sTroll := true ;
63814: LD_ADDR_EXP 102
63818: PUSH
63819: LD_INT 1
63821: ST_TO_ADDR
// if p3 = 17 then
63822: LD_VAR 0 3
63826: PUSH
63827: LD_INT 17
63829: EQUAL
63830: IFFALSE 63840
// sSlow := true ;
63832: LD_ADDR_EXP 103
63836: PUSH
63837: LD_INT 1
63839: ST_TO_ADDR
// if p3 = 18 then
63840: LD_VAR 0 3
63844: PUSH
63845: LD_INT 18
63847: EQUAL
63848: IFFALSE 63858
// sLack := true ;
63850: LD_ADDR_EXP 104
63854: PUSH
63855: LD_INT 1
63857: ST_TO_ADDR
// if p3 = 19 then
63858: LD_VAR 0 3
63862: PUSH
63863: LD_INT 19
63865: EQUAL
63866: IFFALSE 63876
// sTank := true ;
63868: LD_ADDR_EXP 106
63872: PUSH
63873: LD_INT 1
63875: ST_TO_ADDR
// if p3 = 20 then
63876: LD_VAR 0 3
63880: PUSH
63881: LD_INT 20
63883: EQUAL
63884: IFFALSE 63894
// sRemote := true ;
63886: LD_ADDR_EXP 107
63890: PUSH
63891: LD_INT 1
63893: ST_TO_ADDR
// if p3 = 21 then
63894: LD_VAR 0 3
63898: PUSH
63899: LD_INT 21
63901: EQUAL
63902: IFFALSE 63912
// sPowell := true ;
63904: LD_ADDR_EXP 108
63908: PUSH
63909: LD_INT 1
63911: ST_TO_ADDR
// if p3 = 22 then
63912: LD_VAR 0 3
63916: PUSH
63917: LD_INT 22
63919: EQUAL
63920: IFFALSE 63930
// sTeleport := true ;
63922: LD_ADDR_EXP 111
63926: PUSH
63927: LD_INT 1
63929: ST_TO_ADDR
// if p3 = 23 then
63930: LD_VAR 0 3
63934: PUSH
63935: LD_INT 23
63937: EQUAL
63938: IFFALSE 63948
// sOilTower := true ;
63940: LD_ADDR_EXP 113
63944: PUSH
63945: LD_INT 1
63947: ST_TO_ADDR
// if p3 = 24 then
63948: LD_VAR 0 3
63952: PUSH
63953: LD_INT 24
63955: EQUAL
63956: IFFALSE 63966
// sShovel := true ;
63958: LD_ADDR_EXP 114
63962: PUSH
63963: LD_INT 1
63965: ST_TO_ADDR
// if p3 = 25 then
63966: LD_VAR 0 3
63970: PUSH
63971: LD_INT 25
63973: EQUAL
63974: IFFALSE 63984
// sSheik := true ;
63976: LD_ADDR_EXP 115
63980: PUSH
63981: LD_INT 1
63983: ST_TO_ADDR
// if p3 = 26 then
63984: LD_VAR 0 3
63988: PUSH
63989: LD_INT 26
63991: EQUAL
63992: IFFALSE 64002
// sEarthquake := true ;
63994: LD_ADDR_EXP 117
63998: PUSH
63999: LD_INT 1
64001: ST_TO_ADDR
// if p3 = 27 then
64002: LD_VAR 0 3
64006: PUSH
64007: LD_INT 27
64009: EQUAL
64010: IFFALSE 64020
// sAI := true ;
64012: LD_ADDR_EXP 118
64016: PUSH
64017: LD_INT 1
64019: ST_TO_ADDR
// if p3 = 28 then
64020: LD_VAR 0 3
64024: PUSH
64025: LD_INT 28
64027: EQUAL
64028: IFFALSE 64038
// sCargo := true ;
64030: LD_ADDR_EXP 121
64034: PUSH
64035: LD_INT 1
64037: ST_TO_ADDR
// if p3 = 29 then
64038: LD_VAR 0 3
64042: PUSH
64043: LD_INT 29
64045: EQUAL
64046: IFFALSE 64056
// sDLaser := true ;
64048: LD_ADDR_EXP 122
64052: PUSH
64053: LD_INT 1
64055: ST_TO_ADDR
// if p3 = 30 then
64056: LD_VAR 0 3
64060: PUSH
64061: LD_INT 30
64063: EQUAL
64064: IFFALSE 64074
// sExchange := true ;
64066: LD_ADDR_EXP 123
64070: PUSH
64071: LD_INT 1
64073: ST_TO_ADDR
// if p3 = 31 then
64074: LD_VAR 0 3
64078: PUSH
64079: LD_INT 31
64081: EQUAL
64082: IFFALSE 64092
// sFac := true ;
64084: LD_ADDR_EXP 124
64088: PUSH
64089: LD_INT 1
64091: ST_TO_ADDR
// if p3 = 32 then
64092: LD_VAR 0 3
64096: PUSH
64097: LD_INT 32
64099: EQUAL
64100: IFFALSE 64110
// sPower := true ;
64102: LD_ADDR_EXP 125
64106: PUSH
64107: LD_INT 1
64109: ST_TO_ADDR
// if p3 = 33 then
64110: LD_VAR 0 3
64114: PUSH
64115: LD_INT 33
64117: EQUAL
64118: IFFALSE 64128
// sRandom := true ;
64120: LD_ADDR_EXP 126
64124: PUSH
64125: LD_INT 1
64127: ST_TO_ADDR
// if p3 = 34 then
64128: LD_VAR 0 3
64132: PUSH
64133: LD_INT 34
64135: EQUAL
64136: IFFALSE 64146
// sShield := true ;
64138: LD_ADDR_EXP 127
64142: PUSH
64143: LD_INT 1
64145: ST_TO_ADDR
// if p3 = 35 then
64146: LD_VAR 0 3
64150: PUSH
64151: LD_INT 35
64153: EQUAL
64154: IFFALSE 64164
// sTime := true ;
64156: LD_ADDR_EXP 128
64160: PUSH
64161: LD_INT 1
64163: ST_TO_ADDR
// if p3 = 36 then
64164: LD_VAR 0 3
64168: PUSH
64169: LD_INT 36
64171: EQUAL
64172: IFFALSE 64182
// sTools := true ;
64174: LD_ADDR_EXP 129
64178: PUSH
64179: LD_INT 1
64181: ST_TO_ADDR
// if p3 = 101 then
64182: LD_VAR 0 3
64186: PUSH
64187: LD_INT 101
64189: EQUAL
64190: IFFALSE 64200
// sSold := true ;
64192: LD_ADDR_EXP 94
64196: PUSH
64197: LD_INT 1
64199: ST_TO_ADDR
// if p3 = 102 then
64200: LD_VAR 0 3
64204: PUSH
64205: LD_INT 102
64207: EQUAL
64208: IFFALSE 64218
// sDiff := true ;
64210: LD_ADDR_EXP 95
64214: PUSH
64215: LD_INT 1
64217: ST_TO_ADDR
// if p3 = 103 then
64218: LD_VAR 0 3
64222: PUSH
64223: LD_INT 103
64225: EQUAL
64226: IFFALSE 64236
// sFog := true ;
64228: LD_ADDR_EXP 98
64232: PUSH
64233: LD_INT 1
64235: ST_TO_ADDR
// if p3 = 104 then
64236: LD_VAR 0 3
64240: PUSH
64241: LD_INT 104
64243: EQUAL
64244: IFFALSE 64254
// sReset := true ;
64246: LD_ADDR_EXP 99
64250: PUSH
64251: LD_INT 1
64253: ST_TO_ADDR
// if p3 = 105 then
64254: LD_VAR 0 3
64258: PUSH
64259: LD_INT 105
64261: EQUAL
64262: IFFALSE 64272
// sSun := true ;
64264: LD_ADDR_EXP 100
64268: PUSH
64269: LD_INT 1
64271: ST_TO_ADDR
// if p3 = 106 then
64272: LD_VAR 0 3
64276: PUSH
64277: LD_INT 106
64279: EQUAL
64280: IFFALSE 64290
// sTiger := true ;
64282: LD_ADDR_EXP 96
64286: PUSH
64287: LD_INT 1
64289: ST_TO_ADDR
// if p3 = 107 then
64290: LD_VAR 0 3
64294: PUSH
64295: LD_INT 107
64297: EQUAL
64298: IFFALSE 64308
// sBomb := true ;
64300: LD_ADDR_EXP 97
64304: PUSH
64305: LD_INT 1
64307: ST_TO_ADDR
// if p3 = 108 then
64308: LD_VAR 0 3
64312: PUSH
64313: LD_INT 108
64315: EQUAL
64316: IFFALSE 64326
// sWound := true ;
64318: LD_ADDR_EXP 105
64322: PUSH
64323: LD_INT 1
64325: ST_TO_ADDR
// if p3 = 109 then
64326: LD_VAR 0 3
64330: PUSH
64331: LD_INT 109
64333: EQUAL
64334: IFFALSE 64344
// sBetray := true ;
64336: LD_ADDR_EXP 109
64340: PUSH
64341: LD_INT 1
64343: ST_TO_ADDR
// if p3 = 110 then
64344: LD_VAR 0 3
64348: PUSH
64349: LD_INT 110
64351: EQUAL
64352: IFFALSE 64362
// sContamin := true ;
64354: LD_ADDR_EXP 110
64358: PUSH
64359: LD_INT 1
64361: ST_TO_ADDR
// if p3 = 111 then
64362: LD_VAR 0 3
64366: PUSH
64367: LD_INT 111
64369: EQUAL
64370: IFFALSE 64380
// sOil := true ;
64372: LD_ADDR_EXP 112
64376: PUSH
64377: LD_INT 1
64379: ST_TO_ADDR
// if p3 = 112 then
64380: LD_VAR 0 3
64384: PUSH
64385: LD_INT 112
64387: EQUAL
64388: IFFALSE 64398
// sStu := true ;
64390: LD_ADDR_EXP 116
64394: PUSH
64395: LD_INT 1
64397: ST_TO_ADDR
// if p3 = 113 then
64398: LD_VAR 0 3
64402: PUSH
64403: LD_INT 113
64405: EQUAL
64406: IFFALSE 64416
// sBazooka := true ;
64408: LD_ADDR_EXP 119
64412: PUSH
64413: LD_INT 1
64415: ST_TO_ADDR
// if p3 = 114 then
64416: LD_VAR 0 3
64420: PUSH
64421: LD_INT 114
64423: EQUAL
64424: IFFALSE 64434
// sMortar := true ;
64426: LD_ADDR_EXP 120
64430: PUSH
64431: LD_INT 1
64433: ST_TO_ADDR
// if p3 = 115 then
64434: LD_VAR 0 3
64438: PUSH
64439: LD_INT 115
64441: EQUAL
64442: IFFALSE 64452
// sRanger := true ;
64444: LD_ADDR_EXP 130
64448: PUSH
64449: LD_INT 1
64451: ST_TO_ADDR
// end ; if p2 = 101 then
64452: LD_VAR 0 2
64456: PUSH
64457: LD_INT 101
64459: EQUAL
64460: IFFALSE 64588
// begin case p3 of 1 :
64462: LD_VAR 0 3
64466: PUSH
64467: LD_INT 1
64469: DOUBLE
64470: EQUAL
64471: IFTRUE 64475
64473: GO 64482
64475: POP
// hHackUnlimitedResources ; 2 :
64476: CALL 75625 0 0
64480: GO 64588
64482: LD_INT 2
64484: DOUBLE
64485: EQUAL
64486: IFTRUE 64490
64488: GO 64497
64490: POP
// hHackSetLevel10 ; 3 :
64491: CALL 75758 0 0
64495: GO 64588
64497: LD_INT 3
64499: DOUBLE
64500: EQUAL
64501: IFTRUE 64505
64503: GO 64512
64505: POP
// hHackSetLevel10YourUnits ; 4 :
64506: CALL 75843 0 0
64510: GO 64588
64512: LD_INT 4
64514: DOUBLE
64515: EQUAL
64516: IFTRUE 64520
64518: GO 64527
64520: POP
// hHackInvincible ; 5 :
64521: CALL 76291 0 0
64525: GO 64588
64527: LD_INT 5
64529: DOUBLE
64530: EQUAL
64531: IFTRUE 64535
64533: GO 64542
64535: POP
// hHackInvisible ; 6 :
64536: CALL 76402 0 0
64540: GO 64588
64542: LD_INT 6
64544: DOUBLE
64545: EQUAL
64546: IFTRUE 64550
64548: GO 64557
64550: POP
// hHackChangeYourSide ; 7 :
64551: CALL 76459 0 0
64555: GO 64588
64557: LD_INT 7
64559: DOUBLE
64560: EQUAL
64561: IFTRUE 64565
64563: GO 64572
64565: POP
// hHackChangeUnitSide ; 8 :
64566: CALL 76501 0 0
64570: GO 64588
64572: LD_INT 8
64574: DOUBLE
64575: EQUAL
64576: IFTRUE 64580
64578: GO 64587
64580: POP
// hHackFog ; end ;
64581: CALL 76602 0 0
64585: GO 64588
64587: POP
// end ; end ;
64588: LD_VAR 0 7
64592: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
64593: GO 64595
64595: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
64596: LD_STRING initStreamRollete();
64598: PPUSH
64599: CALL_OW 559
// InitStreamMode ;
64603: CALL 64612 0 0
// DefineStreamItems ( ) ;
64607: CALL 65052 0 0
// end ;
64611: END
// function InitStreamMode ; begin
64612: LD_INT 0
64614: PPUSH
// streamModeActive := false ;
64615: LD_ADDR_EXP 77
64619: PUSH
64620: LD_INT 0
64622: ST_TO_ADDR
// normalCounter := 36 ;
64623: LD_ADDR_EXP 78
64627: PUSH
64628: LD_INT 36
64630: ST_TO_ADDR
// hardcoreCounter := 16 ;
64631: LD_ADDR_EXP 79
64635: PUSH
64636: LD_INT 16
64638: ST_TO_ADDR
// sRocket := false ;
64639: LD_ADDR_EXP 82
64643: PUSH
64644: LD_INT 0
64646: ST_TO_ADDR
// sSpeed := false ;
64647: LD_ADDR_EXP 81
64651: PUSH
64652: LD_INT 0
64654: ST_TO_ADDR
// sEngine := false ;
64655: LD_ADDR_EXP 83
64659: PUSH
64660: LD_INT 0
64662: ST_TO_ADDR
// sSpec := false ;
64663: LD_ADDR_EXP 80
64667: PUSH
64668: LD_INT 0
64670: ST_TO_ADDR
// sLevel := false ;
64671: LD_ADDR_EXP 84
64675: PUSH
64676: LD_INT 0
64678: ST_TO_ADDR
// sArmoury := false ;
64679: LD_ADDR_EXP 85
64683: PUSH
64684: LD_INT 0
64686: ST_TO_ADDR
// sRadar := false ;
64687: LD_ADDR_EXP 86
64691: PUSH
64692: LD_INT 0
64694: ST_TO_ADDR
// sBunker := false ;
64695: LD_ADDR_EXP 87
64699: PUSH
64700: LD_INT 0
64702: ST_TO_ADDR
// sHack := false ;
64703: LD_ADDR_EXP 88
64707: PUSH
64708: LD_INT 0
64710: ST_TO_ADDR
// sFire := false ;
64711: LD_ADDR_EXP 89
64715: PUSH
64716: LD_INT 0
64718: ST_TO_ADDR
// sRefresh := false ;
64719: LD_ADDR_EXP 90
64723: PUSH
64724: LD_INT 0
64726: ST_TO_ADDR
// sExp := false ;
64727: LD_ADDR_EXP 91
64731: PUSH
64732: LD_INT 0
64734: ST_TO_ADDR
// sDepot := false ;
64735: LD_ADDR_EXP 92
64739: PUSH
64740: LD_INT 0
64742: ST_TO_ADDR
// sFlag := false ;
64743: LD_ADDR_EXP 93
64747: PUSH
64748: LD_INT 0
64750: ST_TO_ADDR
// sKamikadze := false ;
64751: LD_ADDR_EXP 101
64755: PUSH
64756: LD_INT 0
64758: ST_TO_ADDR
// sTroll := false ;
64759: LD_ADDR_EXP 102
64763: PUSH
64764: LD_INT 0
64766: ST_TO_ADDR
// sSlow := false ;
64767: LD_ADDR_EXP 103
64771: PUSH
64772: LD_INT 0
64774: ST_TO_ADDR
// sLack := false ;
64775: LD_ADDR_EXP 104
64779: PUSH
64780: LD_INT 0
64782: ST_TO_ADDR
// sTank := false ;
64783: LD_ADDR_EXP 106
64787: PUSH
64788: LD_INT 0
64790: ST_TO_ADDR
// sRemote := false ;
64791: LD_ADDR_EXP 107
64795: PUSH
64796: LD_INT 0
64798: ST_TO_ADDR
// sPowell := false ;
64799: LD_ADDR_EXP 108
64803: PUSH
64804: LD_INT 0
64806: ST_TO_ADDR
// sTeleport := false ;
64807: LD_ADDR_EXP 111
64811: PUSH
64812: LD_INT 0
64814: ST_TO_ADDR
// sOilTower := false ;
64815: LD_ADDR_EXP 113
64819: PUSH
64820: LD_INT 0
64822: ST_TO_ADDR
// sShovel := false ;
64823: LD_ADDR_EXP 114
64827: PUSH
64828: LD_INT 0
64830: ST_TO_ADDR
// sSheik := false ;
64831: LD_ADDR_EXP 115
64835: PUSH
64836: LD_INT 0
64838: ST_TO_ADDR
// sEarthquake := false ;
64839: LD_ADDR_EXP 117
64843: PUSH
64844: LD_INT 0
64846: ST_TO_ADDR
// sAI := false ;
64847: LD_ADDR_EXP 118
64851: PUSH
64852: LD_INT 0
64854: ST_TO_ADDR
// sCargo := false ;
64855: LD_ADDR_EXP 121
64859: PUSH
64860: LD_INT 0
64862: ST_TO_ADDR
// sDLaser := false ;
64863: LD_ADDR_EXP 122
64867: PUSH
64868: LD_INT 0
64870: ST_TO_ADDR
// sExchange := false ;
64871: LD_ADDR_EXP 123
64875: PUSH
64876: LD_INT 0
64878: ST_TO_ADDR
// sFac := false ;
64879: LD_ADDR_EXP 124
64883: PUSH
64884: LD_INT 0
64886: ST_TO_ADDR
// sPower := false ;
64887: LD_ADDR_EXP 125
64891: PUSH
64892: LD_INT 0
64894: ST_TO_ADDR
// sRandom := false ;
64895: LD_ADDR_EXP 126
64899: PUSH
64900: LD_INT 0
64902: ST_TO_ADDR
// sShield := false ;
64903: LD_ADDR_EXP 127
64907: PUSH
64908: LD_INT 0
64910: ST_TO_ADDR
// sTime := false ;
64911: LD_ADDR_EXP 128
64915: PUSH
64916: LD_INT 0
64918: ST_TO_ADDR
// sTools := false ;
64919: LD_ADDR_EXP 129
64923: PUSH
64924: LD_INT 0
64926: ST_TO_ADDR
// sSold := false ;
64927: LD_ADDR_EXP 94
64931: PUSH
64932: LD_INT 0
64934: ST_TO_ADDR
// sDiff := false ;
64935: LD_ADDR_EXP 95
64939: PUSH
64940: LD_INT 0
64942: ST_TO_ADDR
// sFog := false ;
64943: LD_ADDR_EXP 98
64947: PUSH
64948: LD_INT 0
64950: ST_TO_ADDR
// sReset := false ;
64951: LD_ADDR_EXP 99
64955: PUSH
64956: LD_INT 0
64958: ST_TO_ADDR
// sSun := false ;
64959: LD_ADDR_EXP 100
64963: PUSH
64964: LD_INT 0
64966: ST_TO_ADDR
// sTiger := false ;
64967: LD_ADDR_EXP 96
64971: PUSH
64972: LD_INT 0
64974: ST_TO_ADDR
// sBomb := false ;
64975: LD_ADDR_EXP 97
64979: PUSH
64980: LD_INT 0
64982: ST_TO_ADDR
// sWound := false ;
64983: LD_ADDR_EXP 105
64987: PUSH
64988: LD_INT 0
64990: ST_TO_ADDR
// sBetray := false ;
64991: LD_ADDR_EXP 109
64995: PUSH
64996: LD_INT 0
64998: ST_TO_ADDR
// sContamin := false ;
64999: LD_ADDR_EXP 110
65003: PUSH
65004: LD_INT 0
65006: ST_TO_ADDR
// sOil := false ;
65007: LD_ADDR_EXP 112
65011: PUSH
65012: LD_INT 0
65014: ST_TO_ADDR
// sStu := false ;
65015: LD_ADDR_EXP 116
65019: PUSH
65020: LD_INT 0
65022: ST_TO_ADDR
// sBazooka := false ;
65023: LD_ADDR_EXP 119
65027: PUSH
65028: LD_INT 0
65030: ST_TO_ADDR
// sMortar := false ;
65031: LD_ADDR_EXP 120
65035: PUSH
65036: LD_INT 0
65038: ST_TO_ADDR
// sRanger := false ;
65039: LD_ADDR_EXP 130
65043: PUSH
65044: LD_INT 0
65046: ST_TO_ADDR
// end ;
65047: LD_VAR 0 1
65051: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
65052: LD_INT 0
65054: PPUSH
65055: PPUSH
65056: PPUSH
65057: PPUSH
65058: PPUSH
// result := [ ] ;
65059: LD_ADDR_VAR 0 1
65063: PUSH
65064: EMPTY
65065: ST_TO_ADDR
// if campaign_id = 1 then
65066: LD_OWVAR 69
65070: PUSH
65071: LD_INT 1
65073: EQUAL
65074: IFFALSE 68012
// begin case mission_number of 1 :
65076: LD_OWVAR 70
65080: PUSH
65081: LD_INT 1
65083: DOUBLE
65084: EQUAL
65085: IFTRUE 65089
65087: GO 65153
65089: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
65090: LD_ADDR_VAR 0 1
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: LD_INT 4
65100: PUSH
65101: LD_INT 11
65103: PUSH
65104: LD_INT 12
65106: PUSH
65107: LD_INT 15
65109: PUSH
65110: LD_INT 16
65112: PUSH
65113: LD_INT 22
65115: PUSH
65116: LD_INT 23
65118: PUSH
65119: LD_INT 26
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 101
65135: PUSH
65136: LD_INT 102
65138: PUSH
65139: LD_INT 106
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: LIST
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: ST_TO_ADDR
65151: GO 68010
65153: LD_INT 2
65155: DOUBLE
65156: EQUAL
65157: IFTRUE 65161
65159: GO 65233
65161: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
65162: LD_ADDR_VAR 0 1
65166: PUSH
65167: LD_INT 2
65169: PUSH
65170: LD_INT 4
65172: PUSH
65173: LD_INT 11
65175: PUSH
65176: LD_INT 12
65178: PUSH
65179: LD_INT 15
65181: PUSH
65182: LD_INT 16
65184: PUSH
65185: LD_INT 22
65187: PUSH
65188: LD_INT 23
65190: PUSH
65191: LD_INT 26
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 101
65207: PUSH
65208: LD_INT 102
65210: PUSH
65211: LD_INT 105
65213: PUSH
65214: LD_INT 106
65216: PUSH
65217: LD_INT 108
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: ST_TO_ADDR
65231: GO 68010
65233: LD_INT 3
65235: DOUBLE
65236: EQUAL
65237: IFTRUE 65241
65239: GO 65317
65241: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
65242: LD_ADDR_VAR 0 1
65246: PUSH
65247: LD_INT 2
65249: PUSH
65250: LD_INT 4
65252: PUSH
65253: LD_INT 5
65255: PUSH
65256: LD_INT 11
65258: PUSH
65259: LD_INT 12
65261: PUSH
65262: LD_INT 15
65264: PUSH
65265: LD_INT 16
65267: PUSH
65268: LD_INT 22
65270: PUSH
65271: LD_INT 26
65273: PUSH
65274: LD_INT 36
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 101
65291: PUSH
65292: LD_INT 102
65294: PUSH
65295: LD_INT 105
65297: PUSH
65298: LD_INT 106
65300: PUSH
65301: LD_INT 108
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: ST_TO_ADDR
65315: GO 68010
65317: LD_INT 4
65319: DOUBLE
65320: EQUAL
65321: IFTRUE 65325
65323: GO 65409
65325: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
65326: LD_ADDR_VAR 0 1
65330: PUSH
65331: LD_INT 2
65333: PUSH
65334: LD_INT 4
65336: PUSH
65337: LD_INT 5
65339: PUSH
65340: LD_INT 8
65342: PUSH
65343: LD_INT 11
65345: PUSH
65346: LD_INT 12
65348: PUSH
65349: LD_INT 15
65351: PUSH
65352: LD_INT 16
65354: PUSH
65355: LD_INT 22
65357: PUSH
65358: LD_INT 23
65360: PUSH
65361: LD_INT 26
65363: PUSH
65364: LD_INT 36
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 101
65383: PUSH
65384: LD_INT 102
65386: PUSH
65387: LD_INT 105
65389: PUSH
65390: LD_INT 106
65392: PUSH
65393: LD_INT 108
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: ST_TO_ADDR
65407: GO 68010
65409: LD_INT 5
65411: DOUBLE
65412: EQUAL
65413: IFTRUE 65417
65415: GO 65517
65417: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
65418: LD_ADDR_VAR 0 1
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: LD_INT 4
65428: PUSH
65429: LD_INT 5
65431: PUSH
65432: LD_INT 6
65434: PUSH
65435: LD_INT 8
65437: PUSH
65438: LD_INT 11
65440: PUSH
65441: LD_INT 12
65443: PUSH
65444: LD_INT 15
65446: PUSH
65447: LD_INT 16
65449: PUSH
65450: LD_INT 22
65452: PUSH
65453: LD_INT 23
65455: PUSH
65456: LD_INT 25
65458: PUSH
65459: LD_INT 26
65461: PUSH
65462: LD_INT 36
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 101
65483: PUSH
65484: LD_INT 102
65486: PUSH
65487: LD_INT 105
65489: PUSH
65490: LD_INT 106
65492: PUSH
65493: LD_INT 108
65495: PUSH
65496: LD_INT 109
65498: PUSH
65499: LD_INT 112
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: ST_TO_ADDR
65515: GO 68010
65517: LD_INT 6
65519: DOUBLE
65520: EQUAL
65521: IFTRUE 65525
65523: GO 65645
65525: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
65526: LD_ADDR_VAR 0 1
65530: PUSH
65531: LD_INT 2
65533: PUSH
65534: LD_INT 4
65536: PUSH
65537: LD_INT 5
65539: PUSH
65540: LD_INT 6
65542: PUSH
65543: LD_INT 8
65545: PUSH
65546: LD_INT 11
65548: PUSH
65549: LD_INT 12
65551: PUSH
65552: LD_INT 15
65554: PUSH
65555: LD_INT 16
65557: PUSH
65558: LD_INT 20
65560: PUSH
65561: LD_INT 21
65563: PUSH
65564: LD_INT 22
65566: PUSH
65567: LD_INT 23
65569: PUSH
65570: LD_INT 25
65572: PUSH
65573: LD_INT 26
65575: PUSH
65576: LD_INT 30
65578: PUSH
65579: LD_INT 31
65581: PUSH
65582: LD_INT 32
65584: PUSH
65585: LD_INT 36
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 101
65611: PUSH
65612: LD_INT 102
65614: PUSH
65615: LD_INT 105
65617: PUSH
65618: LD_INT 106
65620: PUSH
65621: LD_INT 108
65623: PUSH
65624: LD_INT 109
65626: PUSH
65627: LD_INT 112
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: ST_TO_ADDR
65643: GO 68010
65645: LD_INT 7
65647: DOUBLE
65648: EQUAL
65649: IFTRUE 65653
65651: GO 65753
65653: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
65654: LD_ADDR_VAR 0 1
65658: PUSH
65659: LD_INT 2
65661: PUSH
65662: LD_INT 4
65664: PUSH
65665: LD_INT 5
65667: PUSH
65668: LD_INT 7
65670: PUSH
65671: LD_INT 11
65673: PUSH
65674: LD_INT 12
65676: PUSH
65677: LD_INT 15
65679: PUSH
65680: LD_INT 16
65682: PUSH
65683: LD_INT 20
65685: PUSH
65686: LD_INT 21
65688: PUSH
65689: LD_INT 22
65691: PUSH
65692: LD_INT 23
65694: PUSH
65695: LD_INT 25
65697: PUSH
65698: LD_INT 26
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 101
65719: PUSH
65720: LD_INT 102
65722: PUSH
65723: LD_INT 103
65725: PUSH
65726: LD_INT 105
65728: PUSH
65729: LD_INT 106
65731: PUSH
65732: LD_INT 108
65734: PUSH
65735: LD_INT 112
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: ST_TO_ADDR
65751: GO 68010
65753: LD_INT 8
65755: DOUBLE
65756: EQUAL
65757: IFTRUE 65761
65759: GO 65889
65761: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
65762: LD_ADDR_VAR 0 1
65766: PUSH
65767: LD_INT 2
65769: PUSH
65770: LD_INT 4
65772: PUSH
65773: LD_INT 5
65775: PUSH
65776: LD_INT 6
65778: PUSH
65779: LD_INT 7
65781: PUSH
65782: LD_INT 8
65784: PUSH
65785: LD_INT 11
65787: PUSH
65788: LD_INT 12
65790: PUSH
65791: LD_INT 15
65793: PUSH
65794: LD_INT 16
65796: PUSH
65797: LD_INT 20
65799: PUSH
65800: LD_INT 21
65802: PUSH
65803: LD_INT 22
65805: PUSH
65806: LD_INT 23
65808: PUSH
65809: LD_INT 25
65811: PUSH
65812: LD_INT 26
65814: PUSH
65815: LD_INT 30
65817: PUSH
65818: LD_INT 31
65820: PUSH
65821: LD_INT 32
65823: PUSH
65824: LD_INT 36
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 101
65851: PUSH
65852: LD_INT 102
65854: PUSH
65855: LD_INT 103
65857: PUSH
65858: LD_INT 105
65860: PUSH
65861: LD_INT 106
65863: PUSH
65864: LD_INT 108
65866: PUSH
65867: LD_INT 109
65869: PUSH
65870: LD_INT 112
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: ST_TO_ADDR
65887: GO 68010
65889: LD_INT 9
65891: DOUBLE
65892: EQUAL
65893: IFTRUE 65897
65895: GO 66033
65897: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
65898: LD_ADDR_VAR 0 1
65902: PUSH
65903: LD_INT 2
65905: PUSH
65906: LD_INT 4
65908: PUSH
65909: LD_INT 5
65911: PUSH
65912: LD_INT 6
65914: PUSH
65915: LD_INT 7
65917: PUSH
65918: LD_INT 8
65920: PUSH
65921: LD_INT 11
65923: PUSH
65924: LD_INT 12
65926: PUSH
65927: LD_INT 15
65929: PUSH
65930: LD_INT 16
65932: PUSH
65933: LD_INT 20
65935: PUSH
65936: LD_INT 21
65938: PUSH
65939: LD_INT 22
65941: PUSH
65942: LD_INT 23
65944: PUSH
65945: LD_INT 25
65947: PUSH
65948: LD_INT 26
65950: PUSH
65951: LD_INT 28
65953: PUSH
65954: LD_INT 30
65956: PUSH
65957: LD_INT 31
65959: PUSH
65960: LD_INT 32
65962: PUSH
65963: LD_INT 36
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 101
65991: PUSH
65992: LD_INT 102
65994: PUSH
65995: LD_INT 103
65997: PUSH
65998: LD_INT 105
66000: PUSH
66001: LD_INT 106
66003: PUSH
66004: LD_INT 108
66006: PUSH
66007: LD_INT 109
66009: PUSH
66010: LD_INT 112
66012: PUSH
66013: LD_INT 114
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: ST_TO_ADDR
66031: GO 68010
66033: LD_INT 10
66035: DOUBLE
66036: EQUAL
66037: IFTRUE 66041
66039: GO 66225
66041: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
66042: LD_ADDR_VAR 0 1
66046: PUSH
66047: LD_INT 2
66049: PUSH
66050: LD_INT 4
66052: PUSH
66053: LD_INT 5
66055: PUSH
66056: LD_INT 6
66058: PUSH
66059: LD_INT 7
66061: PUSH
66062: LD_INT 8
66064: PUSH
66065: LD_INT 9
66067: PUSH
66068: LD_INT 10
66070: PUSH
66071: LD_INT 11
66073: PUSH
66074: LD_INT 12
66076: PUSH
66077: LD_INT 13
66079: PUSH
66080: LD_INT 14
66082: PUSH
66083: LD_INT 15
66085: PUSH
66086: LD_INT 16
66088: PUSH
66089: LD_INT 17
66091: PUSH
66092: LD_INT 18
66094: PUSH
66095: LD_INT 19
66097: PUSH
66098: LD_INT 20
66100: PUSH
66101: LD_INT 21
66103: PUSH
66104: LD_INT 22
66106: PUSH
66107: LD_INT 23
66109: PUSH
66110: LD_INT 24
66112: PUSH
66113: LD_INT 25
66115: PUSH
66116: LD_INT 26
66118: PUSH
66119: LD_INT 28
66121: PUSH
66122: LD_INT 30
66124: PUSH
66125: LD_INT 31
66127: PUSH
66128: LD_INT 32
66130: PUSH
66131: LD_INT 36
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 101
66167: PUSH
66168: LD_INT 102
66170: PUSH
66171: LD_INT 103
66173: PUSH
66174: LD_INT 104
66176: PUSH
66177: LD_INT 105
66179: PUSH
66180: LD_INT 106
66182: PUSH
66183: LD_INT 107
66185: PUSH
66186: LD_INT 108
66188: PUSH
66189: LD_INT 109
66191: PUSH
66192: LD_INT 110
66194: PUSH
66195: LD_INT 111
66197: PUSH
66198: LD_INT 112
66200: PUSH
66201: LD_INT 114
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: ST_TO_ADDR
66223: GO 68010
66225: LD_INT 11
66227: DOUBLE
66228: EQUAL
66229: IFTRUE 66233
66231: GO 66425
66233: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
66234: LD_ADDR_VAR 0 1
66238: PUSH
66239: LD_INT 2
66241: PUSH
66242: LD_INT 3
66244: PUSH
66245: LD_INT 4
66247: PUSH
66248: LD_INT 5
66250: PUSH
66251: LD_INT 6
66253: PUSH
66254: LD_INT 7
66256: PUSH
66257: LD_INT 8
66259: PUSH
66260: LD_INT 9
66262: PUSH
66263: LD_INT 10
66265: PUSH
66266: LD_INT 11
66268: PUSH
66269: LD_INT 12
66271: PUSH
66272: LD_INT 13
66274: PUSH
66275: LD_INT 14
66277: PUSH
66278: LD_INT 15
66280: PUSH
66281: LD_INT 16
66283: PUSH
66284: LD_INT 17
66286: PUSH
66287: LD_INT 18
66289: PUSH
66290: LD_INT 19
66292: PUSH
66293: LD_INT 20
66295: PUSH
66296: LD_INT 21
66298: PUSH
66299: LD_INT 22
66301: PUSH
66302: LD_INT 23
66304: PUSH
66305: LD_INT 24
66307: PUSH
66308: LD_INT 25
66310: PUSH
66311: LD_INT 26
66313: PUSH
66314: LD_INT 28
66316: PUSH
66317: LD_INT 30
66319: PUSH
66320: LD_INT 31
66322: PUSH
66323: LD_INT 32
66325: PUSH
66326: LD_INT 34
66328: PUSH
66329: LD_INT 36
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 101
66367: PUSH
66368: LD_INT 102
66370: PUSH
66371: LD_INT 103
66373: PUSH
66374: LD_INT 104
66376: PUSH
66377: LD_INT 105
66379: PUSH
66380: LD_INT 106
66382: PUSH
66383: LD_INT 107
66385: PUSH
66386: LD_INT 108
66388: PUSH
66389: LD_INT 109
66391: PUSH
66392: LD_INT 110
66394: PUSH
66395: LD_INT 111
66397: PUSH
66398: LD_INT 112
66400: PUSH
66401: LD_INT 114
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: ST_TO_ADDR
66423: GO 68010
66425: LD_INT 12
66427: DOUBLE
66428: EQUAL
66429: IFTRUE 66433
66431: GO 66641
66433: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
66434: LD_ADDR_VAR 0 1
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: LD_INT 2
66444: PUSH
66445: LD_INT 3
66447: PUSH
66448: LD_INT 4
66450: PUSH
66451: LD_INT 5
66453: PUSH
66454: LD_INT 6
66456: PUSH
66457: LD_INT 7
66459: PUSH
66460: LD_INT 8
66462: PUSH
66463: LD_INT 9
66465: PUSH
66466: LD_INT 10
66468: PUSH
66469: LD_INT 11
66471: PUSH
66472: LD_INT 12
66474: PUSH
66475: LD_INT 13
66477: PUSH
66478: LD_INT 14
66480: PUSH
66481: LD_INT 15
66483: PUSH
66484: LD_INT 16
66486: PUSH
66487: LD_INT 17
66489: PUSH
66490: LD_INT 18
66492: PUSH
66493: LD_INT 19
66495: PUSH
66496: LD_INT 20
66498: PUSH
66499: LD_INT 21
66501: PUSH
66502: LD_INT 22
66504: PUSH
66505: LD_INT 23
66507: PUSH
66508: LD_INT 24
66510: PUSH
66511: LD_INT 25
66513: PUSH
66514: LD_INT 26
66516: PUSH
66517: LD_INT 27
66519: PUSH
66520: LD_INT 28
66522: PUSH
66523: LD_INT 30
66525: PUSH
66526: LD_INT 31
66528: PUSH
66529: LD_INT 32
66531: PUSH
66532: LD_INT 33
66534: PUSH
66535: LD_INT 34
66537: PUSH
66538: LD_INT 36
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 101
66579: PUSH
66580: LD_INT 102
66582: PUSH
66583: LD_INT 103
66585: PUSH
66586: LD_INT 104
66588: PUSH
66589: LD_INT 105
66591: PUSH
66592: LD_INT 106
66594: PUSH
66595: LD_INT 107
66597: PUSH
66598: LD_INT 108
66600: PUSH
66601: LD_INT 109
66603: PUSH
66604: LD_INT 110
66606: PUSH
66607: LD_INT 111
66609: PUSH
66610: LD_INT 112
66612: PUSH
66613: LD_INT 113
66615: PUSH
66616: LD_INT 114
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: ST_TO_ADDR
66639: GO 68010
66641: LD_INT 13
66643: DOUBLE
66644: EQUAL
66645: IFTRUE 66649
66647: GO 66845
66649: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
66650: LD_ADDR_VAR 0 1
66654: PUSH
66655: LD_INT 1
66657: PUSH
66658: LD_INT 2
66660: PUSH
66661: LD_INT 3
66663: PUSH
66664: LD_INT 4
66666: PUSH
66667: LD_INT 5
66669: PUSH
66670: LD_INT 8
66672: PUSH
66673: LD_INT 9
66675: PUSH
66676: LD_INT 10
66678: PUSH
66679: LD_INT 11
66681: PUSH
66682: LD_INT 12
66684: PUSH
66685: LD_INT 14
66687: PUSH
66688: LD_INT 15
66690: PUSH
66691: LD_INT 16
66693: PUSH
66694: LD_INT 17
66696: PUSH
66697: LD_INT 18
66699: PUSH
66700: LD_INT 19
66702: PUSH
66703: LD_INT 20
66705: PUSH
66706: LD_INT 21
66708: PUSH
66709: LD_INT 22
66711: PUSH
66712: LD_INT 23
66714: PUSH
66715: LD_INT 24
66717: PUSH
66718: LD_INT 25
66720: PUSH
66721: LD_INT 26
66723: PUSH
66724: LD_INT 27
66726: PUSH
66727: LD_INT 28
66729: PUSH
66730: LD_INT 30
66732: PUSH
66733: LD_INT 31
66735: PUSH
66736: LD_INT 32
66738: PUSH
66739: LD_INT 33
66741: PUSH
66742: LD_INT 34
66744: PUSH
66745: LD_INT 36
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 101
66783: PUSH
66784: LD_INT 102
66786: PUSH
66787: LD_INT 103
66789: PUSH
66790: LD_INT 104
66792: PUSH
66793: LD_INT 105
66795: PUSH
66796: LD_INT 106
66798: PUSH
66799: LD_INT 107
66801: PUSH
66802: LD_INT 108
66804: PUSH
66805: LD_INT 109
66807: PUSH
66808: LD_INT 110
66810: PUSH
66811: LD_INT 111
66813: PUSH
66814: LD_INT 112
66816: PUSH
66817: LD_INT 113
66819: PUSH
66820: LD_INT 114
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: ST_TO_ADDR
66843: GO 68010
66845: LD_INT 14
66847: DOUBLE
66848: EQUAL
66849: IFTRUE 66853
66851: GO 67065
66853: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
66854: LD_ADDR_VAR 0 1
66858: PUSH
66859: LD_INT 1
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: LD_INT 3
66867: PUSH
66868: LD_INT 4
66870: PUSH
66871: LD_INT 5
66873: PUSH
66874: LD_INT 6
66876: PUSH
66877: LD_INT 7
66879: PUSH
66880: LD_INT 8
66882: PUSH
66883: LD_INT 9
66885: PUSH
66886: LD_INT 10
66888: PUSH
66889: LD_INT 11
66891: PUSH
66892: LD_INT 12
66894: PUSH
66895: LD_INT 13
66897: PUSH
66898: LD_INT 14
66900: PUSH
66901: LD_INT 15
66903: PUSH
66904: LD_INT 16
66906: PUSH
66907: LD_INT 17
66909: PUSH
66910: LD_INT 18
66912: PUSH
66913: LD_INT 19
66915: PUSH
66916: LD_INT 20
66918: PUSH
66919: LD_INT 21
66921: PUSH
66922: LD_INT 22
66924: PUSH
66925: LD_INT 23
66927: PUSH
66928: LD_INT 24
66930: PUSH
66931: LD_INT 25
66933: PUSH
66934: LD_INT 26
66936: PUSH
66937: LD_INT 27
66939: PUSH
66940: LD_INT 28
66942: PUSH
66943: LD_INT 29
66945: PUSH
66946: LD_INT 30
66948: PUSH
66949: LD_INT 31
66951: PUSH
66952: LD_INT 32
66954: PUSH
66955: LD_INT 33
66957: PUSH
66958: LD_INT 34
66960: PUSH
66961: LD_INT 36
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 101
67003: PUSH
67004: LD_INT 102
67006: PUSH
67007: LD_INT 103
67009: PUSH
67010: LD_INT 104
67012: PUSH
67013: LD_INT 105
67015: PUSH
67016: LD_INT 106
67018: PUSH
67019: LD_INT 107
67021: PUSH
67022: LD_INT 108
67024: PUSH
67025: LD_INT 109
67027: PUSH
67028: LD_INT 110
67030: PUSH
67031: LD_INT 111
67033: PUSH
67034: LD_INT 112
67036: PUSH
67037: LD_INT 113
67039: PUSH
67040: LD_INT 114
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: ST_TO_ADDR
67063: GO 68010
67065: LD_INT 15
67067: DOUBLE
67068: EQUAL
67069: IFTRUE 67073
67071: GO 67285
67073: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
67074: LD_ADDR_VAR 0 1
67078: PUSH
67079: LD_INT 1
67081: PUSH
67082: LD_INT 2
67084: PUSH
67085: LD_INT 3
67087: PUSH
67088: LD_INT 4
67090: PUSH
67091: LD_INT 5
67093: PUSH
67094: LD_INT 6
67096: PUSH
67097: LD_INT 7
67099: PUSH
67100: LD_INT 8
67102: PUSH
67103: LD_INT 9
67105: PUSH
67106: LD_INT 10
67108: PUSH
67109: LD_INT 11
67111: PUSH
67112: LD_INT 12
67114: PUSH
67115: LD_INT 13
67117: PUSH
67118: LD_INT 14
67120: PUSH
67121: LD_INT 15
67123: PUSH
67124: LD_INT 16
67126: PUSH
67127: LD_INT 17
67129: PUSH
67130: LD_INT 18
67132: PUSH
67133: LD_INT 19
67135: PUSH
67136: LD_INT 20
67138: PUSH
67139: LD_INT 21
67141: PUSH
67142: LD_INT 22
67144: PUSH
67145: LD_INT 23
67147: PUSH
67148: LD_INT 24
67150: PUSH
67151: LD_INT 25
67153: PUSH
67154: LD_INT 26
67156: PUSH
67157: LD_INT 27
67159: PUSH
67160: LD_INT 28
67162: PUSH
67163: LD_INT 29
67165: PUSH
67166: LD_INT 30
67168: PUSH
67169: LD_INT 31
67171: PUSH
67172: LD_INT 32
67174: PUSH
67175: LD_INT 33
67177: PUSH
67178: LD_INT 34
67180: PUSH
67181: LD_INT 36
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 101
67223: PUSH
67224: LD_INT 102
67226: PUSH
67227: LD_INT 103
67229: PUSH
67230: LD_INT 104
67232: PUSH
67233: LD_INT 105
67235: PUSH
67236: LD_INT 106
67238: PUSH
67239: LD_INT 107
67241: PUSH
67242: LD_INT 108
67244: PUSH
67245: LD_INT 109
67247: PUSH
67248: LD_INT 110
67250: PUSH
67251: LD_INT 111
67253: PUSH
67254: LD_INT 112
67256: PUSH
67257: LD_INT 113
67259: PUSH
67260: LD_INT 114
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: ST_TO_ADDR
67283: GO 68010
67285: LD_INT 16
67287: DOUBLE
67288: EQUAL
67289: IFTRUE 67293
67291: GO 67417
67293: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
67294: LD_ADDR_VAR 0 1
67298: PUSH
67299: LD_INT 2
67301: PUSH
67302: LD_INT 4
67304: PUSH
67305: LD_INT 5
67307: PUSH
67308: LD_INT 7
67310: PUSH
67311: LD_INT 11
67313: PUSH
67314: LD_INT 12
67316: PUSH
67317: LD_INT 15
67319: PUSH
67320: LD_INT 16
67322: PUSH
67323: LD_INT 20
67325: PUSH
67326: LD_INT 21
67328: PUSH
67329: LD_INT 22
67331: PUSH
67332: LD_INT 23
67334: PUSH
67335: LD_INT 25
67337: PUSH
67338: LD_INT 26
67340: PUSH
67341: LD_INT 30
67343: PUSH
67344: LD_INT 31
67346: PUSH
67347: LD_INT 32
67349: PUSH
67350: LD_INT 33
67352: PUSH
67353: LD_INT 34
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 101
67379: PUSH
67380: LD_INT 102
67382: PUSH
67383: LD_INT 103
67385: PUSH
67386: LD_INT 106
67388: PUSH
67389: LD_INT 108
67391: PUSH
67392: LD_INT 112
67394: PUSH
67395: LD_INT 113
67397: PUSH
67398: LD_INT 114
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: ST_TO_ADDR
67415: GO 68010
67417: LD_INT 17
67419: DOUBLE
67420: EQUAL
67421: IFTRUE 67425
67423: GO 67637
67425: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
67426: LD_ADDR_VAR 0 1
67430: PUSH
67431: LD_INT 1
67433: PUSH
67434: LD_INT 2
67436: PUSH
67437: LD_INT 3
67439: PUSH
67440: LD_INT 4
67442: PUSH
67443: LD_INT 5
67445: PUSH
67446: LD_INT 6
67448: PUSH
67449: LD_INT 7
67451: PUSH
67452: LD_INT 8
67454: PUSH
67455: LD_INT 9
67457: PUSH
67458: LD_INT 10
67460: PUSH
67461: LD_INT 11
67463: PUSH
67464: LD_INT 12
67466: PUSH
67467: LD_INT 13
67469: PUSH
67470: LD_INT 14
67472: PUSH
67473: LD_INT 15
67475: PUSH
67476: LD_INT 16
67478: PUSH
67479: LD_INT 17
67481: PUSH
67482: LD_INT 18
67484: PUSH
67485: LD_INT 19
67487: PUSH
67488: LD_INT 20
67490: PUSH
67491: LD_INT 21
67493: PUSH
67494: LD_INT 22
67496: PUSH
67497: LD_INT 23
67499: PUSH
67500: LD_INT 24
67502: PUSH
67503: LD_INT 25
67505: PUSH
67506: LD_INT 26
67508: PUSH
67509: LD_INT 27
67511: PUSH
67512: LD_INT 28
67514: PUSH
67515: LD_INT 29
67517: PUSH
67518: LD_INT 30
67520: PUSH
67521: LD_INT 31
67523: PUSH
67524: LD_INT 32
67526: PUSH
67527: LD_INT 33
67529: PUSH
67530: LD_INT 34
67532: PUSH
67533: LD_INT 36
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 101
67575: PUSH
67576: LD_INT 102
67578: PUSH
67579: LD_INT 103
67581: PUSH
67582: LD_INT 104
67584: PUSH
67585: LD_INT 105
67587: PUSH
67588: LD_INT 106
67590: PUSH
67591: LD_INT 107
67593: PUSH
67594: LD_INT 108
67596: PUSH
67597: LD_INT 109
67599: PUSH
67600: LD_INT 110
67602: PUSH
67603: LD_INT 111
67605: PUSH
67606: LD_INT 112
67608: PUSH
67609: LD_INT 113
67611: PUSH
67612: LD_INT 114
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: ST_TO_ADDR
67635: GO 68010
67637: LD_INT 18
67639: DOUBLE
67640: EQUAL
67641: IFTRUE 67645
67643: GO 67781
67645: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
67646: LD_ADDR_VAR 0 1
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: LD_INT 4
67656: PUSH
67657: LD_INT 5
67659: PUSH
67660: LD_INT 7
67662: PUSH
67663: LD_INT 11
67665: PUSH
67666: LD_INT 12
67668: PUSH
67669: LD_INT 15
67671: PUSH
67672: LD_INT 16
67674: PUSH
67675: LD_INT 20
67677: PUSH
67678: LD_INT 21
67680: PUSH
67681: LD_INT 22
67683: PUSH
67684: LD_INT 23
67686: PUSH
67687: LD_INT 25
67689: PUSH
67690: LD_INT 26
67692: PUSH
67693: LD_INT 30
67695: PUSH
67696: LD_INT 31
67698: PUSH
67699: LD_INT 32
67701: PUSH
67702: LD_INT 33
67704: PUSH
67705: LD_INT 34
67707: PUSH
67708: LD_INT 35
67710: PUSH
67711: LD_INT 36
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 101
67739: PUSH
67740: LD_INT 102
67742: PUSH
67743: LD_INT 103
67745: PUSH
67746: LD_INT 106
67748: PUSH
67749: LD_INT 108
67751: PUSH
67752: LD_INT 112
67754: PUSH
67755: LD_INT 113
67757: PUSH
67758: LD_INT 114
67760: PUSH
67761: LD_INT 115
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: ST_TO_ADDR
67779: GO 68010
67781: LD_INT 19
67783: DOUBLE
67784: EQUAL
67785: IFTRUE 67789
67787: GO 68009
67789: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
67790: LD_ADDR_VAR 0 1
67794: PUSH
67795: LD_INT 1
67797: PUSH
67798: LD_INT 2
67800: PUSH
67801: LD_INT 3
67803: PUSH
67804: LD_INT 4
67806: PUSH
67807: LD_INT 5
67809: PUSH
67810: LD_INT 6
67812: PUSH
67813: LD_INT 7
67815: PUSH
67816: LD_INT 8
67818: PUSH
67819: LD_INT 9
67821: PUSH
67822: LD_INT 10
67824: PUSH
67825: LD_INT 11
67827: PUSH
67828: LD_INT 12
67830: PUSH
67831: LD_INT 13
67833: PUSH
67834: LD_INT 14
67836: PUSH
67837: LD_INT 15
67839: PUSH
67840: LD_INT 16
67842: PUSH
67843: LD_INT 17
67845: PUSH
67846: LD_INT 18
67848: PUSH
67849: LD_INT 19
67851: PUSH
67852: LD_INT 20
67854: PUSH
67855: LD_INT 21
67857: PUSH
67858: LD_INT 22
67860: PUSH
67861: LD_INT 23
67863: PUSH
67864: LD_INT 24
67866: PUSH
67867: LD_INT 25
67869: PUSH
67870: LD_INT 26
67872: PUSH
67873: LD_INT 27
67875: PUSH
67876: LD_INT 28
67878: PUSH
67879: LD_INT 29
67881: PUSH
67882: LD_INT 30
67884: PUSH
67885: LD_INT 31
67887: PUSH
67888: LD_INT 32
67890: PUSH
67891: LD_INT 33
67893: PUSH
67894: LD_INT 34
67896: PUSH
67897: LD_INT 35
67899: PUSH
67900: LD_INT 36
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 101
67943: PUSH
67944: LD_INT 102
67946: PUSH
67947: LD_INT 103
67949: PUSH
67950: LD_INT 104
67952: PUSH
67953: LD_INT 105
67955: PUSH
67956: LD_INT 106
67958: PUSH
67959: LD_INT 107
67961: PUSH
67962: LD_INT 108
67964: PUSH
67965: LD_INT 109
67967: PUSH
67968: LD_INT 110
67970: PUSH
67971: LD_INT 111
67973: PUSH
67974: LD_INT 112
67976: PUSH
67977: LD_INT 113
67979: PUSH
67980: LD_INT 114
67982: PUSH
67983: LD_INT 115
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: ST_TO_ADDR
68007: GO 68010
68009: POP
// end else
68010: GO 68229
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
68012: LD_ADDR_VAR 0 1
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: LD_INT 2
68022: PUSH
68023: LD_INT 3
68025: PUSH
68026: LD_INT 4
68028: PUSH
68029: LD_INT 5
68031: PUSH
68032: LD_INT 6
68034: PUSH
68035: LD_INT 7
68037: PUSH
68038: LD_INT 8
68040: PUSH
68041: LD_INT 9
68043: PUSH
68044: LD_INT 10
68046: PUSH
68047: LD_INT 11
68049: PUSH
68050: LD_INT 12
68052: PUSH
68053: LD_INT 13
68055: PUSH
68056: LD_INT 14
68058: PUSH
68059: LD_INT 15
68061: PUSH
68062: LD_INT 16
68064: PUSH
68065: LD_INT 17
68067: PUSH
68068: LD_INT 18
68070: PUSH
68071: LD_INT 19
68073: PUSH
68074: LD_INT 20
68076: PUSH
68077: LD_INT 21
68079: PUSH
68080: LD_INT 22
68082: PUSH
68083: LD_INT 23
68085: PUSH
68086: LD_INT 24
68088: PUSH
68089: LD_INT 25
68091: PUSH
68092: LD_INT 26
68094: PUSH
68095: LD_INT 27
68097: PUSH
68098: LD_INT 28
68100: PUSH
68101: LD_INT 29
68103: PUSH
68104: LD_INT 30
68106: PUSH
68107: LD_INT 31
68109: PUSH
68110: LD_INT 32
68112: PUSH
68113: LD_INT 33
68115: PUSH
68116: LD_INT 34
68118: PUSH
68119: LD_INT 35
68121: PUSH
68122: LD_INT 36
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 101
68165: PUSH
68166: LD_INT 102
68168: PUSH
68169: LD_INT 103
68171: PUSH
68172: LD_INT 104
68174: PUSH
68175: LD_INT 105
68177: PUSH
68178: LD_INT 106
68180: PUSH
68181: LD_INT 107
68183: PUSH
68184: LD_INT 108
68186: PUSH
68187: LD_INT 109
68189: PUSH
68190: LD_INT 110
68192: PUSH
68193: LD_INT 111
68195: PUSH
68196: LD_INT 112
68198: PUSH
68199: LD_INT 113
68201: PUSH
68202: LD_INT 114
68204: PUSH
68205: LD_INT 115
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: ST_TO_ADDR
// if result then
68229: LD_VAR 0 1
68233: IFFALSE 68522
// begin normal :=  ;
68235: LD_ADDR_VAR 0 3
68239: PUSH
68240: LD_STRING 
68242: ST_TO_ADDR
// hardcore :=  ;
68243: LD_ADDR_VAR 0 4
68247: PUSH
68248: LD_STRING 
68250: ST_TO_ADDR
// for i = 1 to normalCounter do
68251: LD_ADDR_VAR 0 5
68255: PUSH
68256: DOUBLE
68257: LD_INT 1
68259: DEC
68260: ST_TO_ADDR
68261: LD_EXP 78
68265: PUSH
68266: FOR_TO
68267: IFFALSE 68368
// begin tmp := 0 ;
68269: LD_ADDR_VAR 0 2
68273: PUSH
68274: LD_STRING 0
68276: ST_TO_ADDR
// if result [ 1 ] then
68277: LD_VAR 0 1
68281: PUSH
68282: LD_INT 1
68284: ARRAY
68285: IFFALSE 68350
// if result [ 1 ] [ 1 ] = i then
68287: LD_VAR 0 1
68291: PUSH
68292: LD_INT 1
68294: ARRAY
68295: PUSH
68296: LD_INT 1
68298: ARRAY
68299: PUSH
68300: LD_VAR 0 5
68304: EQUAL
68305: IFFALSE 68350
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
68307: LD_ADDR_VAR 0 1
68311: PUSH
68312: LD_VAR 0 1
68316: PPUSH
68317: LD_INT 1
68319: PPUSH
68320: LD_VAR 0 1
68324: PUSH
68325: LD_INT 1
68327: ARRAY
68328: PPUSH
68329: LD_INT 1
68331: PPUSH
68332: CALL_OW 3
68336: PPUSH
68337: CALL_OW 1
68341: ST_TO_ADDR
// tmp := 1 ;
68342: LD_ADDR_VAR 0 2
68346: PUSH
68347: LD_STRING 1
68349: ST_TO_ADDR
// end ; normal := normal & tmp ;
68350: LD_ADDR_VAR 0 3
68354: PUSH
68355: LD_VAR 0 3
68359: PUSH
68360: LD_VAR 0 2
68364: STR
68365: ST_TO_ADDR
// end ;
68366: GO 68266
68368: POP
68369: POP
// for i = 1 to hardcoreCounter do
68370: LD_ADDR_VAR 0 5
68374: PUSH
68375: DOUBLE
68376: LD_INT 1
68378: DEC
68379: ST_TO_ADDR
68380: LD_EXP 79
68384: PUSH
68385: FOR_TO
68386: IFFALSE 68491
// begin tmp := 0 ;
68388: LD_ADDR_VAR 0 2
68392: PUSH
68393: LD_STRING 0
68395: ST_TO_ADDR
// if result [ 2 ] then
68396: LD_VAR 0 1
68400: PUSH
68401: LD_INT 2
68403: ARRAY
68404: IFFALSE 68473
// if result [ 2 ] [ 1 ] = 100 + i then
68406: LD_VAR 0 1
68410: PUSH
68411: LD_INT 2
68413: ARRAY
68414: PUSH
68415: LD_INT 1
68417: ARRAY
68418: PUSH
68419: LD_INT 100
68421: PUSH
68422: LD_VAR 0 5
68426: PLUS
68427: EQUAL
68428: IFFALSE 68473
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
68430: LD_ADDR_VAR 0 1
68434: PUSH
68435: LD_VAR 0 1
68439: PPUSH
68440: LD_INT 2
68442: PPUSH
68443: LD_VAR 0 1
68447: PUSH
68448: LD_INT 2
68450: ARRAY
68451: PPUSH
68452: LD_INT 1
68454: PPUSH
68455: CALL_OW 3
68459: PPUSH
68460: CALL_OW 1
68464: ST_TO_ADDR
// tmp := 1 ;
68465: LD_ADDR_VAR 0 2
68469: PUSH
68470: LD_STRING 1
68472: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
68473: LD_ADDR_VAR 0 4
68477: PUSH
68478: LD_VAR 0 4
68482: PUSH
68483: LD_VAR 0 2
68487: STR
68488: ST_TO_ADDR
// end ;
68489: GO 68385
68491: POP
68492: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
68493: LD_STRING getStreamItemsFromMission("
68495: PUSH
68496: LD_VAR 0 3
68500: STR
68501: PUSH
68502: LD_STRING ","
68504: STR
68505: PUSH
68506: LD_VAR 0 4
68510: STR
68511: PUSH
68512: LD_STRING ")
68514: STR
68515: PPUSH
68516: CALL_OW 559
// end else
68520: GO 68529
// ToLua ( getStreamItemsFromMission("","") ) ;
68522: LD_STRING getStreamItemsFromMission("","")
68524: PPUSH
68525: CALL_OW 559
// end ;
68529: LD_VAR 0 1
68533: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
68534: LD_EXP 77
68538: PUSH
68539: LD_EXP 82
68543: AND
68544: IFFALSE 68668
68546: GO 68548
68548: DISABLE
68549: LD_INT 0
68551: PPUSH
68552: PPUSH
// begin enable ;
68553: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
68554: LD_ADDR_VAR 0 2
68558: PUSH
68559: LD_INT 22
68561: PUSH
68562: LD_OWVAR 2
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 2
68573: PUSH
68574: LD_INT 34
68576: PUSH
68577: LD_INT 7
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 34
68586: PUSH
68587: LD_INT 45
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 34
68596: PUSH
68597: LD_INT 28
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 34
68606: PUSH
68607: LD_INT 47
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PPUSH
68625: CALL_OW 69
68629: ST_TO_ADDR
// if not tmp then
68630: LD_VAR 0 2
68634: NOT
68635: IFFALSE 68639
// exit ;
68637: GO 68668
// for i in tmp do
68639: LD_ADDR_VAR 0 1
68643: PUSH
68644: LD_VAR 0 2
68648: PUSH
68649: FOR_IN
68650: IFFALSE 68666
// begin SetLives ( i , 0 ) ;
68652: LD_VAR 0 1
68656: PPUSH
68657: LD_INT 0
68659: PPUSH
68660: CALL_OW 234
// end ;
68664: GO 68649
68666: POP
68667: POP
// end ;
68668: PPOPN 2
68670: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
68671: LD_EXP 77
68675: PUSH
68676: LD_EXP 83
68680: AND
68681: IFFALSE 68765
68683: GO 68685
68685: DISABLE
68686: LD_INT 0
68688: PPUSH
68689: PPUSH
// begin enable ;
68690: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
68691: LD_ADDR_VAR 0 2
68695: PUSH
68696: LD_INT 22
68698: PUSH
68699: LD_OWVAR 2
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 32
68710: PUSH
68711: LD_INT 3
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PPUSH
68722: CALL_OW 69
68726: ST_TO_ADDR
// if not tmp then
68727: LD_VAR 0 2
68731: NOT
68732: IFFALSE 68736
// exit ;
68734: GO 68765
// for i in tmp do
68736: LD_ADDR_VAR 0 1
68740: PUSH
68741: LD_VAR 0 2
68745: PUSH
68746: FOR_IN
68747: IFFALSE 68763
// begin SetLives ( i , 0 ) ;
68749: LD_VAR 0 1
68753: PPUSH
68754: LD_INT 0
68756: PPUSH
68757: CALL_OW 234
// end ;
68761: GO 68746
68763: POP
68764: POP
// end ;
68765: PPOPN 2
68767: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
68768: LD_EXP 77
68772: PUSH
68773: LD_EXP 80
68777: AND
68778: IFFALSE 68871
68780: GO 68782
68782: DISABLE
68783: LD_INT 0
68785: PPUSH
// begin enable ;
68786: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
68787: LD_ADDR_VAR 0 1
68791: PUSH
68792: LD_INT 22
68794: PUSH
68795: LD_OWVAR 2
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: LD_INT 25
68809: PUSH
68810: LD_INT 5
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 25
68819: PUSH
68820: LD_INT 9
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 25
68829: PUSH
68830: LD_INT 8
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PPUSH
68847: CALL_OW 69
68851: PUSH
68852: FOR_IN
68853: IFFALSE 68869
// begin SetClass ( i , 1 ) ;
68855: LD_VAR 0 1
68859: PPUSH
68860: LD_INT 1
68862: PPUSH
68863: CALL_OW 336
// end ;
68867: GO 68852
68869: POP
68870: POP
// end ;
68871: PPOPN 1
68873: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
68874: LD_EXP 77
68878: PUSH
68879: LD_EXP 81
68883: AND
68884: PUSH
68885: LD_OWVAR 65
68889: PUSH
68890: LD_INT 7
68892: LESS
68893: AND
68894: IFFALSE 68908
68896: GO 68898
68898: DISABLE
// begin enable ;
68899: ENABLE
// game_speed := 7 ;
68900: LD_ADDR_OWVAR 65
68904: PUSH
68905: LD_INT 7
68907: ST_TO_ADDR
// end ;
68908: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
68909: LD_EXP 77
68913: PUSH
68914: LD_EXP 84
68918: AND
68919: IFFALSE 69121
68921: GO 68923
68923: DISABLE
68924: LD_INT 0
68926: PPUSH
68927: PPUSH
68928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68929: LD_ADDR_VAR 0 3
68933: PUSH
68934: LD_INT 81
68936: PUSH
68937: LD_OWVAR 2
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 21
68948: PUSH
68949: LD_INT 1
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PPUSH
68960: CALL_OW 69
68964: ST_TO_ADDR
// if not tmp then
68965: LD_VAR 0 3
68969: NOT
68970: IFFALSE 68974
// exit ;
68972: GO 69121
// if tmp > 5 then
68974: LD_VAR 0 3
68978: PUSH
68979: LD_INT 5
68981: GREATER
68982: IFFALSE 68994
// k := 5 else
68984: LD_ADDR_VAR 0 2
68988: PUSH
68989: LD_INT 5
68991: ST_TO_ADDR
68992: GO 69004
// k := tmp ;
68994: LD_ADDR_VAR 0 2
68998: PUSH
68999: LD_VAR 0 3
69003: ST_TO_ADDR
// for i := 1 to k do
69004: LD_ADDR_VAR 0 1
69008: PUSH
69009: DOUBLE
69010: LD_INT 1
69012: DEC
69013: ST_TO_ADDR
69014: LD_VAR 0 2
69018: PUSH
69019: FOR_TO
69020: IFFALSE 69119
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
69022: LD_VAR 0 3
69026: PUSH
69027: LD_VAR 0 1
69031: ARRAY
69032: PPUSH
69033: LD_VAR 0 1
69037: PUSH
69038: LD_INT 4
69040: MOD
69041: PUSH
69042: LD_INT 1
69044: PLUS
69045: PPUSH
69046: CALL_OW 259
69050: PUSH
69051: LD_INT 10
69053: LESS
69054: IFFALSE 69117
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
69056: LD_VAR 0 3
69060: PUSH
69061: LD_VAR 0 1
69065: ARRAY
69066: PPUSH
69067: LD_VAR 0 1
69071: PUSH
69072: LD_INT 4
69074: MOD
69075: PUSH
69076: LD_INT 1
69078: PLUS
69079: PPUSH
69080: LD_VAR 0 3
69084: PUSH
69085: LD_VAR 0 1
69089: ARRAY
69090: PPUSH
69091: LD_VAR 0 1
69095: PUSH
69096: LD_INT 4
69098: MOD
69099: PUSH
69100: LD_INT 1
69102: PLUS
69103: PPUSH
69104: CALL_OW 259
69108: PUSH
69109: LD_INT 1
69111: PLUS
69112: PPUSH
69113: CALL_OW 237
69117: GO 69019
69119: POP
69120: POP
// end ;
69121: PPOPN 3
69123: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
69124: LD_EXP 77
69128: PUSH
69129: LD_EXP 85
69133: AND
69134: IFFALSE 69154
69136: GO 69138
69138: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
69139: LD_INT 4
69141: PPUSH
69142: LD_OWVAR 2
69146: PPUSH
69147: LD_INT 0
69149: PPUSH
69150: CALL_OW 324
69154: END
// every 0 0$1 trigger StreamModeActive and sShovel do
69155: LD_EXP 77
69159: PUSH
69160: LD_EXP 114
69164: AND
69165: IFFALSE 69185
69167: GO 69169
69169: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
69170: LD_INT 19
69172: PPUSH
69173: LD_OWVAR 2
69177: PPUSH
69178: LD_INT 0
69180: PPUSH
69181: CALL_OW 324
69185: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
69186: LD_EXP 77
69190: PUSH
69191: LD_EXP 86
69195: AND
69196: IFFALSE 69298
69198: GO 69200
69200: DISABLE
69201: LD_INT 0
69203: PPUSH
69204: PPUSH
// begin enable ;
69205: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
69206: LD_ADDR_VAR 0 2
69210: PUSH
69211: LD_INT 22
69213: PUSH
69214: LD_OWVAR 2
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 2
69225: PUSH
69226: LD_INT 34
69228: PUSH
69229: LD_INT 11
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 34
69238: PUSH
69239: LD_INT 30
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: LIST
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PPUSH
69255: CALL_OW 69
69259: ST_TO_ADDR
// if not tmp then
69260: LD_VAR 0 2
69264: NOT
69265: IFFALSE 69269
// exit ;
69267: GO 69298
// for i in tmp do
69269: LD_ADDR_VAR 0 1
69273: PUSH
69274: LD_VAR 0 2
69278: PUSH
69279: FOR_IN
69280: IFFALSE 69296
// begin SetLives ( i , 0 ) ;
69282: LD_VAR 0 1
69286: PPUSH
69287: LD_INT 0
69289: PPUSH
69290: CALL_OW 234
// end ;
69294: GO 69279
69296: POP
69297: POP
// end ;
69298: PPOPN 2
69300: END
// every 0 0$1 trigger StreamModeActive and sBunker do
69301: LD_EXP 77
69305: PUSH
69306: LD_EXP 87
69310: AND
69311: IFFALSE 69331
69313: GO 69315
69315: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
69316: LD_INT 32
69318: PPUSH
69319: LD_OWVAR 2
69323: PPUSH
69324: LD_INT 0
69326: PPUSH
69327: CALL_OW 324
69331: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
69332: LD_EXP 77
69336: PUSH
69337: LD_EXP 88
69341: AND
69342: IFFALSE 69523
69344: GO 69346
69346: DISABLE
69347: LD_INT 0
69349: PPUSH
69350: PPUSH
69351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
69352: LD_ADDR_VAR 0 2
69356: PUSH
69357: LD_INT 22
69359: PUSH
69360: LD_OWVAR 2
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 33
69371: PUSH
69372: LD_INT 3
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PPUSH
69383: CALL_OW 69
69387: ST_TO_ADDR
// if not tmp then
69388: LD_VAR 0 2
69392: NOT
69393: IFFALSE 69397
// exit ;
69395: GO 69523
// side := 0 ;
69397: LD_ADDR_VAR 0 3
69401: PUSH
69402: LD_INT 0
69404: ST_TO_ADDR
// for i := 1 to 8 do
69405: LD_ADDR_VAR 0 1
69409: PUSH
69410: DOUBLE
69411: LD_INT 1
69413: DEC
69414: ST_TO_ADDR
69415: LD_INT 8
69417: PUSH
69418: FOR_TO
69419: IFFALSE 69467
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
69421: LD_OWVAR 2
69425: PUSH
69426: LD_VAR 0 1
69430: NONEQUAL
69431: PUSH
69432: LD_OWVAR 2
69436: PPUSH
69437: LD_VAR 0 1
69441: PPUSH
69442: CALL_OW 81
69446: PUSH
69447: LD_INT 2
69449: EQUAL
69450: AND
69451: IFFALSE 69465
// begin side := i ;
69453: LD_ADDR_VAR 0 3
69457: PUSH
69458: LD_VAR 0 1
69462: ST_TO_ADDR
// break ;
69463: GO 69467
// end ;
69465: GO 69418
69467: POP
69468: POP
// if not side then
69469: LD_VAR 0 3
69473: NOT
69474: IFFALSE 69478
// exit ;
69476: GO 69523
// for i := 1 to tmp do
69478: LD_ADDR_VAR 0 1
69482: PUSH
69483: DOUBLE
69484: LD_INT 1
69486: DEC
69487: ST_TO_ADDR
69488: LD_VAR 0 2
69492: PUSH
69493: FOR_TO
69494: IFFALSE 69521
// if Prob ( 60 ) then
69496: LD_INT 60
69498: PPUSH
69499: CALL_OW 13
69503: IFFALSE 69519
// SetSide ( i , side ) ;
69505: LD_VAR 0 1
69509: PPUSH
69510: LD_VAR 0 3
69514: PPUSH
69515: CALL_OW 235
69519: GO 69493
69521: POP
69522: POP
// end ;
69523: PPOPN 3
69525: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
69526: LD_EXP 77
69530: PUSH
69531: LD_EXP 90
69535: AND
69536: IFFALSE 69655
69538: GO 69540
69540: DISABLE
69541: LD_INT 0
69543: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
69544: LD_ADDR_VAR 0 1
69548: PUSH
69549: LD_INT 22
69551: PUSH
69552: LD_OWVAR 2
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 21
69563: PUSH
69564: LD_INT 1
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 3
69573: PUSH
69574: LD_INT 23
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: LIST
69592: PPUSH
69593: CALL_OW 69
69597: PUSH
69598: FOR_IN
69599: IFFALSE 69653
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
69601: LD_VAR 0 1
69605: PPUSH
69606: CALL_OW 257
69610: PUSH
69611: LD_INT 1
69613: PUSH
69614: LD_INT 2
69616: PUSH
69617: LD_INT 3
69619: PUSH
69620: LD_INT 4
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: IN
69629: IFFALSE 69651
// SetClass ( un , rand ( 1 , 4 ) ) ;
69631: LD_VAR 0 1
69635: PPUSH
69636: LD_INT 1
69638: PPUSH
69639: LD_INT 4
69641: PPUSH
69642: CALL_OW 12
69646: PPUSH
69647: CALL_OW 336
69651: GO 69598
69653: POP
69654: POP
// end ;
69655: PPOPN 1
69657: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
69658: LD_EXP 77
69662: PUSH
69663: LD_EXP 89
69667: AND
69668: IFFALSE 69747
69670: GO 69672
69672: DISABLE
69673: LD_INT 0
69675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69676: LD_ADDR_VAR 0 1
69680: PUSH
69681: LD_INT 22
69683: PUSH
69684: LD_OWVAR 2
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 21
69695: PUSH
69696: LD_INT 3
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PPUSH
69707: CALL_OW 69
69711: ST_TO_ADDR
// if not tmp then
69712: LD_VAR 0 1
69716: NOT
69717: IFFALSE 69721
// exit ;
69719: GO 69747
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
69721: LD_VAR 0 1
69725: PUSH
69726: LD_INT 1
69728: PPUSH
69729: LD_VAR 0 1
69733: PPUSH
69734: CALL_OW 12
69738: ARRAY
69739: PPUSH
69740: LD_INT 100
69742: PPUSH
69743: CALL_OW 234
// end ;
69747: PPOPN 1
69749: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
69750: LD_EXP 77
69754: PUSH
69755: LD_EXP 91
69759: AND
69760: IFFALSE 69858
69762: GO 69764
69764: DISABLE
69765: LD_INT 0
69767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69768: LD_ADDR_VAR 0 1
69772: PUSH
69773: LD_INT 22
69775: PUSH
69776: LD_OWVAR 2
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 21
69787: PUSH
69788: LD_INT 1
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PPUSH
69799: CALL_OW 69
69803: ST_TO_ADDR
// if not tmp then
69804: LD_VAR 0 1
69808: NOT
69809: IFFALSE 69813
// exit ;
69811: GO 69858
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
69813: LD_VAR 0 1
69817: PUSH
69818: LD_INT 1
69820: PPUSH
69821: LD_VAR 0 1
69825: PPUSH
69826: CALL_OW 12
69830: ARRAY
69831: PPUSH
69832: LD_INT 1
69834: PPUSH
69835: LD_INT 4
69837: PPUSH
69838: CALL_OW 12
69842: PPUSH
69843: LD_INT 3000
69845: PPUSH
69846: LD_INT 9000
69848: PPUSH
69849: CALL_OW 12
69853: PPUSH
69854: CALL_OW 492
// end ;
69858: PPOPN 1
69860: END
// every 0 0$1 trigger StreamModeActive and sDepot do
69861: LD_EXP 77
69865: PUSH
69866: LD_EXP 92
69870: AND
69871: IFFALSE 69891
69873: GO 69875
69875: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
69876: LD_INT 1
69878: PPUSH
69879: LD_OWVAR 2
69883: PPUSH
69884: LD_INT 0
69886: PPUSH
69887: CALL_OW 324
69891: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
69892: LD_EXP 77
69896: PUSH
69897: LD_EXP 93
69901: AND
69902: IFFALSE 69985
69904: GO 69906
69906: DISABLE
69907: LD_INT 0
69909: PPUSH
69910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69911: LD_ADDR_VAR 0 2
69915: PUSH
69916: LD_INT 22
69918: PUSH
69919: LD_OWVAR 2
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 21
69930: PUSH
69931: LD_INT 3
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PPUSH
69942: CALL_OW 69
69946: ST_TO_ADDR
// if not tmp then
69947: LD_VAR 0 2
69951: NOT
69952: IFFALSE 69956
// exit ;
69954: GO 69985
// for i in tmp do
69956: LD_ADDR_VAR 0 1
69960: PUSH
69961: LD_VAR 0 2
69965: PUSH
69966: FOR_IN
69967: IFFALSE 69983
// SetBLevel ( i , 10 ) ;
69969: LD_VAR 0 1
69973: PPUSH
69974: LD_INT 10
69976: PPUSH
69977: CALL_OW 241
69981: GO 69966
69983: POP
69984: POP
// end ;
69985: PPOPN 2
69987: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
69988: LD_EXP 77
69992: PUSH
69993: LD_EXP 94
69997: AND
69998: IFFALSE 70109
70000: GO 70002
70002: DISABLE
70003: LD_INT 0
70005: PPUSH
70006: PPUSH
70007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70008: LD_ADDR_VAR 0 3
70012: PUSH
70013: LD_INT 22
70015: PUSH
70016: LD_OWVAR 2
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 25
70027: PUSH
70028: LD_INT 1
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PPUSH
70039: CALL_OW 69
70043: ST_TO_ADDR
// if not tmp then
70044: LD_VAR 0 3
70048: NOT
70049: IFFALSE 70053
// exit ;
70051: GO 70109
// un := tmp [ rand ( 1 , tmp ) ] ;
70053: LD_ADDR_VAR 0 2
70057: PUSH
70058: LD_VAR 0 3
70062: PUSH
70063: LD_INT 1
70065: PPUSH
70066: LD_VAR 0 3
70070: PPUSH
70071: CALL_OW 12
70075: ARRAY
70076: ST_TO_ADDR
// if Crawls ( un ) then
70077: LD_VAR 0 2
70081: PPUSH
70082: CALL_OW 318
70086: IFFALSE 70097
// ComWalk ( un ) ;
70088: LD_VAR 0 2
70092: PPUSH
70093: CALL_OW 138
// SetClass ( un , class_sniper ) ;
70097: LD_VAR 0 2
70101: PPUSH
70102: LD_INT 5
70104: PPUSH
70105: CALL_OW 336
// end ;
70109: PPOPN 3
70111: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
70112: LD_EXP 77
70116: PUSH
70117: LD_EXP 95
70121: AND
70122: PUSH
70123: LD_OWVAR 67
70127: PUSH
70128: LD_INT 3
70130: LESS
70131: AND
70132: IFFALSE 70151
70134: GO 70136
70136: DISABLE
// Difficulty := Difficulty + 1 ;
70137: LD_ADDR_OWVAR 67
70141: PUSH
70142: LD_OWVAR 67
70146: PUSH
70147: LD_INT 1
70149: PLUS
70150: ST_TO_ADDR
70151: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
70152: LD_EXP 77
70156: PUSH
70157: LD_EXP 96
70161: AND
70162: IFFALSE 70265
70164: GO 70166
70166: DISABLE
70167: LD_INT 0
70169: PPUSH
// begin for i := 1 to 5 do
70170: LD_ADDR_VAR 0 1
70174: PUSH
70175: DOUBLE
70176: LD_INT 1
70178: DEC
70179: ST_TO_ADDR
70180: LD_INT 5
70182: PUSH
70183: FOR_TO
70184: IFFALSE 70263
// begin uc_nation := nation_nature ;
70186: LD_ADDR_OWVAR 21
70190: PUSH
70191: LD_INT 0
70193: ST_TO_ADDR
// uc_side := 0 ;
70194: LD_ADDR_OWVAR 20
70198: PUSH
70199: LD_INT 0
70201: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70202: LD_ADDR_OWVAR 29
70206: PUSH
70207: LD_INT 12
70209: PUSH
70210: LD_INT 12
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: ST_TO_ADDR
// hc_agressivity := 20 ;
70217: LD_ADDR_OWVAR 35
70221: PUSH
70222: LD_INT 20
70224: ST_TO_ADDR
// hc_class := class_tiger ;
70225: LD_ADDR_OWVAR 28
70229: PUSH
70230: LD_INT 14
70232: ST_TO_ADDR
// hc_gallery :=  ;
70233: LD_ADDR_OWVAR 33
70237: PUSH
70238: LD_STRING 
70240: ST_TO_ADDR
// hc_name :=  ;
70241: LD_ADDR_OWVAR 26
70245: PUSH
70246: LD_STRING 
70248: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
70249: CALL_OW 44
70253: PPUSH
70254: LD_INT 0
70256: PPUSH
70257: CALL_OW 51
// end ;
70261: GO 70183
70263: POP
70264: POP
// end ;
70265: PPOPN 1
70267: END
// every 0 0$1 trigger StreamModeActive and sBomb do
70268: LD_EXP 77
70272: PUSH
70273: LD_EXP 97
70277: AND
70278: IFFALSE 70287
70280: GO 70282
70282: DISABLE
// StreamSibBomb ;
70283: CALL 70288 0 0
70287: END
// export function StreamSibBomb ; var i , x , y ; begin
70288: LD_INT 0
70290: PPUSH
70291: PPUSH
70292: PPUSH
70293: PPUSH
// result := false ;
70294: LD_ADDR_VAR 0 1
70298: PUSH
70299: LD_INT 0
70301: ST_TO_ADDR
// for i := 1 to 16 do
70302: LD_ADDR_VAR 0 2
70306: PUSH
70307: DOUBLE
70308: LD_INT 1
70310: DEC
70311: ST_TO_ADDR
70312: LD_INT 16
70314: PUSH
70315: FOR_TO
70316: IFFALSE 70515
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70318: LD_ADDR_VAR 0 3
70322: PUSH
70323: LD_INT 10
70325: PUSH
70326: LD_INT 20
70328: PUSH
70329: LD_INT 30
70331: PUSH
70332: LD_INT 40
70334: PUSH
70335: LD_INT 50
70337: PUSH
70338: LD_INT 60
70340: PUSH
70341: LD_INT 70
70343: PUSH
70344: LD_INT 80
70346: PUSH
70347: LD_INT 90
70349: PUSH
70350: LD_INT 100
70352: PUSH
70353: LD_INT 110
70355: PUSH
70356: LD_INT 120
70358: PUSH
70359: LD_INT 130
70361: PUSH
70362: LD_INT 140
70364: PUSH
70365: LD_INT 150
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 1
70387: PPUSH
70388: LD_INT 15
70390: PPUSH
70391: CALL_OW 12
70395: ARRAY
70396: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70397: LD_ADDR_VAR 0 4
70401: PUSH
70402: LD_INT 10
70404: PUSH
70405: LD_INT 20
70407: PUSH
70408: LD_INT 30
70410: PUSH
70411: LD_INT 40
70413: PUSH
70414: LD_INT 50
70416: PUSH
70417: LD_INT 60
70419: PUSH
70420: LD_INT 70
70422: PUSH
70423: LD_INT 80
70425: PUSH
70426: LD_INT 90
70428: PUSH
70429: LD_INT 100
70431: PUSH
70432: LD_INT 110
70434: PUSH
70435: LD_INT 120
70437: PUSH
70438: LD_INT 130
70440: PUSH
70441: LD_INT 140
70443: PUSH
70444: LD_INT 150
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 1
70466: PPUSH
70467: LD_INT 15
70469: PPUSH
70470: CALL_OW 12
70474: ARRAY
70475: ST_TO_ADDR
// if ValidHex ( x , y ) then
70476: LD_VAR 0 3
70480: PPUSH
70481: LD_VAR 0 4
70485: PPUSH
70486: CALL_OW 488
70490: IFFALSE 70513
// begin result := [ x , y ] ;
70492: LD_ADDR_VAR 0 1
70496: PUSH
70497: LD_VAR 0 3
70501: PUSH
70502: LD_VAR 0 4
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: ST_TO_ADDR
// break ;
70511: GO 70515
// end ; end ;
70513: GO 70315
70515: POP
70516: POP
// if result then
70517: LD_VAR 0 1
70521: IFFALSE 70581
// begin ToLua ( playSibBomb() ) ;
70523: LD_STRING playSibBomb()
70525: PPUSH
70526: CALL_OW 559
// wait ( 0 0$14 ) ;
70530: LD_INT 490
70532: PPUSH
70533: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
70537: LD_VAR 0 1
70541: PUSH
70542: LD_INT 1
70544: ARRAY
70545: PPUSH
70546: LD_VAR 0 1
70550: PUSH
70551: LD_INT 2
70553: ARRAY
70554: PPUSH
70555: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
70559: LD_VAR 0 1
70563: PUSH
70564: LD_INT 1
70566: ARRAY
70567: PPUSH
70568: LD_VAR 0 1
70572: PUSH
70573: LD_INT 2
70575: ARRAY
70576: PPUSH
70577: CALL_OW 429
// end ; end ;
70581: LD_VAR 0 1
70585: RET
// every 0 0$1 trigger StreamModeActive and sReset do
70586: LD_EXP 77
70590: PUSH
70591: LD_EXP 99
70595: AND
70596: IFFALSE 70608
70598: GO 70600
70600: DISABLE
// YouLost (  ) ;
70601: LD_STRING 
70603: PPUSH
70604: CALL_OW 104
70608: END
// every 0 0$1 trigger StreamModeActive and sFog do
70609: LD_EXP 77
70613: PUSH
70614: LD_EXP 98
70618: AND
70619: IFFALSE 70633
70621: GO 70623
70623: DISABLE
// FogOff ( your_side ) ;
70624: LD_OWVAR 2
70628: PPUSH
70629: CALL_OW 344
70633: END
// every 0 0$1 trigger StreamModeActive and sSun do
70634: LD_EXP 77
70638: PUSH
70639: LD_EXP 100
70643: AND
70644: IFFALSE 70672
70646: GO 70648
70648: DISABLE
// begin solar_recharge_percent := 0 ;
70649: LD_ADDR_OWVAR 79
70653: PUSH
70654: LD_INT 0
70656: ST_TO_ADDR
// wait ( 5 5$00 ) ;
70657: LD_INT 10500
70659: PPUSH
70660: CALL_OW 67
// solar_recharge_percent := 100 ;
70664: LD_ADDR_OWVAR 79
70668: PUSH
70669: LD_INT 100
70671: ST_TO_ADDR
// end ;
70672: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
70673: LD_EXP 77
70677: PUSH
70678: LD_EXP 101
70682: AND
70683: IFFALSE 70922
70685: GO 70687
70687: DISABLE
70688: LD_INT 0
70690: PPUSH
70691: PPUSH
70692: PPUSH
// begin tmp := [ ] ;
70693: LD_ADDR_VAR 0 3
70697: PUSH
70698: EMPTY
70699: ST_TO_ADDR
// for i := 1 to 6 do
70700: LD_ADDR_VAR 0 1
70704: PUSH
70705: DOUBLE
70706: LD_INT 1
70708: DEC
70709: ST_TO_ADDR
70710: LD_INT 6
70712: PUSH
70713: FOR_TO
70714: IFFALSE 70819
// begin uc_nation := nation_nature ;
70716: LD_ADDR_OWVAR 21
70720: PUSH
70721: LD_INT 0
70723: ST_TO_ADDR
// uc_side := 0 ;
70724: LD_ADDR_OWVAR 20
70728: PUSH
70729: LD_INT 0
70731: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70732: LD_ADDR_OWVAR 29
70736: PUSH
70737: LD_INT 12
70739: PUSH
70740: LD_INT 12
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: ST_TO_ADDR
// hc_agressivity := 20 ;
70747: LD_ADDR_OWVAR 35
70751: PUSH
70752: LD_INT 20
70754: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
70755: LD_ADDR_OWVAR 28
70759: PUSH
70760: LD_INT 17
70762: ST_TO_ADDR
// hc_gallery :=  ;
70763: LD_ADDR_OWVAR 33
70767: PUSH
70768: LD_STRING 
70770: ST_TO_ADDR
// hc_name :=  ;
70771: LD_ADDR_OWVAR 26
70775: PUSH
70776: LD_STRING 
70778: ST_TO_ADDR
// un := CreateHuman ;
70779: LD_ADDR_VAR 0 2
70783: PUSH
70784: CALL_OW 44
70788: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
70789: LD_VAR 0 2
70793: PPUSH
70794: LD_INT 1
70796: PPUSH
70797: CALL_OW 51
// tmp := tmp ^ un ;
70801: LD_ADDR_VAR 0 3
70805: PUSH
70806: LD_VAR 0 3
70810: PUSH
70811: LD_VAR 0 2
70815: ADD
70816: ST_TO_ADDR
// end ;
70817: GO 70713
70819: POP
70820: POP
// repeat wait ( 0 0$1 ) ;
70821: LD_INT 35
70823: PPUSH
70824: CALL_OW 67
// for un in tmp do
70828: LD_ADDR_VAR 0 2
70832: PUSH
70833: LD_VAR 0 3
70837: PUSH
70838: FOR_IN
70839: IFFALSE 70913
// begin if IsDead ( un ) then
70841: LD_VAR 0 2
70845: PPUSH
70846: CALL_OW 301
70850: IFFALSE 70870
// begin tmp := tmp diff un ;
70852: LD_ADDR_VAR 0 3
70856: PUSH
70857: LD_VAR 0 3
70861: PUSH
70862: LD_VAR 0 2
70866: DIFF
70867: ST_TO_ADDR
// continue ;
70868: GO 70838
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
70870: LD_VAR 0 2
70874: PPUSH
70875: LD_INT 3
70877: PUSH
70878: LD_INT 22
70880: PUSH
70881: LD_INT 0
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PPUSH
70892: CALL_OW 69
70896: PPUSH
70897: LD_VAR 0 2
70901: PPUSH
70902: CALL_OW 74
70906: PPUSH
70907: CALL_OW 115
// end ;
70911: GO 70838
70913: POP
70914: POP
// until not tmp ;
70915: LD_VAR 0 3
70919: NOT
70920: IFFALSE 70821
// end ;
70922: PPOPN 3
70924: END
// every 0 0$1 trigger StreamModeActive and sTroll do
70925: LD_EXP 77
70929: PUSH
70930: LD_EXP 102
70934: AND
70935: IFFALSE 70989
70937: GO 70939
70939: DISABLE
// begin ToLua ( displayTroll(); ) ;
70940: LD_STRING displayTroll();
70942: PPUSH
70943: CALL_OW 559
// wait ( 3 3$00 ) ;
70947: LD_INT 6300
70949: PPUSH
70950: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70954: LD_STRING hideTroll();
70956: PPUSH
70957: CALL_OW 559
// wait ( 1 1$00 ) ;
70961: LD_INT 2100
70963: PPUSH
70964: CALL_OW 67
// ToLua ( displayTroll(); ) ;
70968: LD_STRING displayTroll();
70970: PPUSH
70971: CALL_OW 559
// wait ( 1 1$00 ) ;
70975: LD_INT 2100
70977: PPUSH
70978: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70982: LD_STRING hideTroll();
70984: PPUSH
70985: CALL_OW 559
// end ;
70989: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
70990: LD_EXP 77
70994: PUSH
70995: LD_EXP 103
70999: AND
71000: IFFALSE 71063
71002: GO 71004
71004: DISABLE
71005: LD_INT 0
71007: PPUSH
// begin p := 0 ;
71008: LD_ADDR_VAR 0 1
71012: PUSH
71013: LD_INT 0
71015: ST_TO_ADDR
// repeat game_speed := 1 ;
71016: LD_ADDR_OWVAR 65
71020: PUSH
71021: LD_INT 1
71023: ST_TO_ADDR
// wait ( 0 0$1 ) ;
71024: LD_INT 35
71026: PPUSH
71027: CALL_OW 67
// p := p + 1 ;
71031: LD_ADDR_VAR 0 1
71035: PUSH
71036: LD_VAR 0 1
71040: PUSH
71041: LD_INT 1
71043: PLUS
71044: ST_TO_ADDR
// until p >= 60 ;
71045: LD_VAR 0 1
71049: PUSH
71050: LD_INT 60
71052: GREATEREQUAL
71053: IFFALSE 71016
// game_speed := 4 ;
71055: LD_ADDR_OWVAR 65
71059: PUSH
71060: LD_INT 4
71062: ST_TO_ADDR
// end ;
71063: PPOPN 1
71065: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
71066: LD_EXP 77
71070: PUSH
71071: LD_EXP 104
71075: AND
71076: IFFALSE 71222
71078: GO 71080
71080: DISABLE
71081: LD_INT 0
71083: PPUSH
71084: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71085: LD_ADDR_VAR 0 1
71089: PUSH
71090: LD_INT 22
71092: PUSH
71093: LD_OWVAR 2
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 2
71104: PUSH
71105: LD_INT 30
71107: PUSH
71108: LD_INT 0
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 30
71117: PUSH
71118: LD_INT 1
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: LIST
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PPUSH
71134: CALL_OW 69
71138: ST_TO_ADDR
// if not depot then
71139: LD_VAR 0 1
71143: NOT
71144: IFFALSE 71148
// exit ;
71146: GO 71222
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
71148: LD_ADDR_VAR 0 2
71152: PUSH
71153: LD_VAR 0 1
71157: PUSH
71158: LD_INT 1
71160: PPUSH
71161: LD_VAR 0 1
71165: PPUSH
71166: CALL_OW 12
71170: ARRAY
71171: PPUSH
71172: CALL_OW 274
71176: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
71177: LD_VAR 0 2
71181: PPUSH
71182: LD_INT 1
71184: PPUSH
71185: LD_INT 0
71187: PPUSH
71188: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
71192: LD_VAR 0 2
71196: PPUSH
71197: LD_INT 2
71199: PPUSH
71200: LD_INT 0
71202: PPUSH
71203: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
71207: LD_VAR 0 2
71211: PPUSH
71212: LD_INT 3
71214: PPUSH
71215: LD_INT 0
71217: PPUSH
71218: CALL_OW 277
// end ;
71222: PPOPN 2
71224: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
71225: LD_EXP 77
71229: PUSH
71230: LD_EXP 105
71234: AND
71235: IFFALSE 71332
71237: GO 71239
71239: DISABLE
71240: LD_INT 0
71242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71243: LD_ADDR_VAR 0 1
71247: PUSH
71248: LD_INT 22
71250: PUSH
71251: LD_OWVAR 2
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 21
71262: PUSH
71263: LD_INT 1
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 3
71272: PUSH
71273: LD_INT 23
71275: PUSH
71276: LD_INT 0
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: LIST
71291: PPUSH
71292: CALL_OW 69
71296: ST_TO_ADDR
// if not tmp then
71297: LD_VAR 0 1
71301: NOT
71302: IFFALSE 71306
// exit ;
71304: GO 71332
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
71306: LD_VAR 0 1
71310: PUSH
71311: LD_INT 1
71313: PPUSH
71314: LD_VAR 0 1
71318: PPUSH
71319: CALL_OW 12
71323: ARRAY
71324: PPUSH
71325: LD_INT 200
71327: PPUSH
71328: CALL_OW 234
// end ;
71332: PPOPN 1
71334: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
71335: LD_EXP 77
71339: PUSH
71340: LD_EXP 106
71344: AND
71345: IFFALSE 71424
71347: GO 71349
71349: DISABLE
71350: LD_INT 0
71352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
71353: LD_ADDR_VAR 0 1
71357: PUSH
71358: LD_INT 22
71360: PUSH
71361: LD_OWVAR 2
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 21
71372: PUSH
71373: LD_INT 2
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PPUSH
71384: CALL_OW 69
71388: ST_TO_ADDR
// if not tmp then
71389: LD_VAR 0 1
71393: NOT
71394: IFFALSE 71398
// exit ;
71396: GO 71424
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
71398: LD_VAR 0 1
71402: PUSH
71403: LD_INT 1
71405: PPUSH
71406: LD_VAR 0 1
71410: PPUSH
71411: CALL_OW 12
71415: ARRAY
71416: PPUSH
71417: LD_INT 60
71419: PPUSH
71420: CALL_OW 234
// end ;
71424: PPOPN 1
71426: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
71427: LD_EXP 77
71431: PUSH
71432: LD_EXP 107
71436: AND
71437: IFFALSE 71536
71439: GO 71441
71441: DISABLE
71442: LD_INT 0
71444: PPUSH
71445: PPUSH
// begin enable ;
71446: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
71447: LD_ADDR_VAR 0 1
71451: PUSH
71452: LD_INT 22
71454: PUSH
71455: LD_OWVAR 2
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 61
71466: PUSH
71467: EMPTY
71468: LIST
71469: PUSH
71470: LD_INT 33
71472: PUSH
71473: LD_INT 2
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: LIST
71484: PPUSH
71485: CALL_OW 69
71489: ST_TO_ADDR
// if not tmp then
71490: LD_VAR 0 1
71494: NOT
71495: IFFALSE 71499
// exit ;
71497: GO 71536
// for i in tmp do
71499: LD_ADDR_VAR 0 2
71503: PUSH
71504: LD_VAR 0 1
71508: PUSH
71509: FOR_IN
71510: IFFALSE 71534
// if IsControledBy ( i ) then
71512: LD_VAR 0 2
71516: PPUSH
71517: CALL_OW 312
71521: IFFALSE 71532
// ComUnlink ( i ) ;
71523: LD_VAR 0 2
71527: PPUSH
71528: CALL_OW 136
71532: GO 71509
71534: POP
71535: POP
// end ;
71536: PPOPN 2
71538: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
71539: LD_EXP 77
71543: PUSH
71544: LD_EXP 108
71548: AND
71549: IFFALSE 71689
71551: GO 71553
71553: DISABLE
71554: LD_INT 0
71556: PPUSH
71557: PPUSH
// begin ToLua ( displayPowell(); ) ;
71558: LD_STRING displayPowell();
71560: PPUSH
71561: CALL_OW 559
// uc_side := 0 ;
71565: LD_ADDR_OWVAR 20
71569: PUSH
71570: LD_INT 0
71572: ST_TO_ADDR
// uc_nation := 2 ;
71573: LD_ADDR_OWVAR 21
71577: PUSH
71578: LD_INT 2
71580: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
71581: LD_ADDR_OWVAR 37
71585: PUSH
71586: LD_INT 14
71588: ST_TO_ADDR
// vc_engine := engine_siberite ;
71589: LD_ADDR_OWVAR 39
71593: PUSH
71594: LD_INT 3
71596: ST_TO_ADDR
// vc_control := control_apeman ;
71597: LD_ADDR_OWVAR 38
71601: PUSH
71602: LD_INT 5
71604: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
71605: LD_ADDR_OWVAR 40
71609: PUSH
71610: LD_INT 29
71612: ST_TO_ADDR
// un := CreateVehicle ;
71613: LD_ADDR_VAR 0 2
71617: PUSH
71618: CALL_OW 45
71622: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71623: LD_VAR 0 2
71627: PPUSH
71628: LD_INT 1
71630: PPUSH
71631: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71635: LD_INT 35
71637: PPUSH
71638: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71642: LD_VAR 0 2
71646: PPUSH
71647: LD_INT 22
71649: PUSH
71650: LD_OWVAR 2
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PPUSH
71659: CALL_OW 69
71663: PPUSH
71664: LD_VAR 0 2
71668: PPUSH
71669: CALL_OW 74
71673: PPUSH
71674: CALL_OW 115
// until IsDead ( un ) ;
71678: LD_VAR 0 2
71682: PPUSH
71683: CALL_OW 301
71687: IFFALSE 71635
// end ;
71689: PPOPN 2
71691: END
// every 0 0$1 trigger StreamModeActive and sStu do
71692: LD_EXP 77
71696: PUSH
71697: LD_EXP 116
71701: AND
71702: IFFALSE 71718
71704: GO 71706
71706: DISABLE
// begin ToLua ( displayStucuk(); ) ;
71707: LD_STRING displayStucuk();
71709: PPUSH
71710: CALL_OW 559
// ResetFog ;
71714: CALL_OW 335
// end ;
71718: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
71719: LD_EXP 77
71723: PUSH
71724: LD_EXP 109
71728: AND
71729: IFFALSE 71870
71731: GO 71733
71733: DISABLE
71734: LD_INT 0
71736: PPUSH
71737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71738: LD_ADDR_VAR 0 2
71742: PUSH
71743: LD_INT 22
71745: PUSH
71746: LD_OWVAR 2
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 21
71757: PUSH
71758: LD_INT 1
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PPUSH
71769: CALL_OW 69
71773: ST_TO_ADDR
// if not tmp then
71774: LD_VAR 0 2
71778: NOT
71779: IFFALSE 71783
// exit ;
71781: GO 71870
// un := tmp [ rand ( 1 , tmp ) ] ;
71783: LD_ADDR_VAR 0 1
71787: PUSH
71788: LD_VAR 0 2
71792: PUSH
71793: LD_INT 1
71795: PPUSH
71796: LD_VAR 0 2
71800: PPUSH
71801: CALL_OW 12
71805: ARRAY
71806: ST_TO_ADDR
// SetSide ( un , 0 ) ;
71807: LD_VAR 0 1
71811: PPUSH
71812: LD_INT 0
71814: PPUSH
71815: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
71819: LD_VAR 0 1
71823: PPUSH
71824: LD_OWVAR 3
71828: PUSH
71829: LD_VAR 0 1
71833: DIFF
71834: PPUSH
71835: LD_VAR 0 1
71839: PPUSH
71840: CALL_OW 74
71844: PPUSH
71845: CALL_OW 115
// wait ( 0 0$20 ) ;
71849: LD_INT 700
71851: PPUSH
71852: CALL_OW 67
// SetSide ( un , your_side ) ;
71856: LD_VAR 0 1
71860: PPUSH
71861: LD_OWVAR 2
71865: PPUSH
71866: CALL_OW 235
// end ;
71870: PPOPN 2
71872: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
71873: LD_EXP 77
71877: PUSH
71878: LD_EXP 110
71882: AND
71883: IFFALSE 71989
71885: GO 71887
71887: DISABLE
71888: LD_INT 0
71890: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71891: LD_ADDR_VAR 0 1
71895: PUSH
71896: LD_INT 22
71898: PUSH
71899: LD_OWVAR 2
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 2
71910: PUSH
71911: LD_INT 30
71913: PUSH
71914: LD_INT 0
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 30
71923: PUSH
71924: LD_INT 1
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: LIST
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: PPUSH
71940: CALL_OW 69
71944: ST_TO_ADDR
// if not depot then
71945: LD_VAR 0 1
71949: NOT
71950: IFFALSE 71954
// exit ;
71952: GO 71989
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
71954: LD_VAR 0 1
71958: PUSH
71959: LD_INT 1
71961: ARRAY
71962: PPUSH
71963: CALL_OW 250
71967: PPUSH
71968: LD_VAR 0 1
71972: PUSH
71973: LD_INT 1
71975: ARRAY
71976: PPUSH
71977: CALL_OW 251
71981: PPUSH
71982: LD_INT 70
71984: PPUSH
71985: CALL_OW 495
// end ;
71989: PPOPN 1
71991: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
71992: LD_EXP 77
71996: PUSH
71997: LD_EXP 111
72001: AND
72002: IFFALSE 72213
72004: GO 72006
72006: DISABLE
72007: LD_INT 0
72009: PPUSH
72010: PPUSH
72011: PPUSH
72012: PPUSH
72013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72014: LD_ADDR_VAR 0 5
72018: PUSH
72019: LD_INT 22
72021: PUSH
72022: LD_OWVAR 2
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 21
72033: PUSH
72034: LD_INT 1
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PPUSH
72045: CALL_OW 69
72049: ST_TO_ADDR
// if not tmp then
72050: LD_VAR 0 5
72054: NOT
72055: IFFALSE 72059
// exit ;
72057: GO 72213
// for i in tmp do
72059: LD_ADDR_VAR 0 1
72063: PUSH
72064: LD_VAR 0 5
72068: PUSH
72069: FOR_IN
72070: IFFALSE 72211
// begin d := rand ( 0 , 5 ) ;
72072: LD_ADDR_VAR 0 4
72076: PUSH
72077: LD_INT 0
72079: PPUSH
72080: LD_INT 5
72082: PPUSH
72083: CALL_OW 12
72087: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
72088: LD_ADDR_VAR 0 2
72092: PUSH
72093: LD_VAR 0 1
72097: PPUSH
72098: CALL_OW 250
72102: PPUSH
72103: LD_VAR 0 4
72107: PPUSH
72108: LD_INT 3
72110: PPUSH
72111: LD_INT 12
72113: PPUSH
72114: CALL_OW 12
72118: PPUSH
72119: CALL_OW 272
72123: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
72124: LD_ADDR_VAR 0 3
72128: PUSH
72129: LD_VAR 0 1
72133: PPUSH
72134: CALL_OW 251
72138: PPUSH
72139: LD_VAR 0 4
72143: PPUSH
72144: LD_INT 3
72146: PPUSH
72147: LD_INT 12
72149: PPUSH
72150: CALL_OW 12
72154: PPUSH
72155: CALL_OW 273
72159: ST_TO_ADDR
// if ValidHex ( x , y ) then
72160: LD_VAR 0 2
72164: PPUSH
72165: LD_VAR 0 3
72169: PPUSH
72170: CALL_OW 488
72174: IFFALSE 72209
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
72176: LD_VAR 0 1
72180: PPUSH
72181: LD_VAR 0 2
72185: PPUSH
72186: LD_VAR 0 3
72190: PPUSH
72191: LD_INT 3
72193: PPUSH
72194: LD_INT 6
72196: PPUSH
72197: CALL_OW 12
72201: PPUSH
72202: LD_INT 1
72204: PPUSH
72205: CALL_OW 483
// end ;
72209: GO 72069
72211: POP
72212: POP
// end ;
72213: PPOPN 5
72215: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
72216: LD_EXP 77
72220: PUSH
72221: LD_EXP 112
72225: AND
72226: IFFALSE 72320
72228: GO 72230
72230: DISABLE
72231: LD_INT 0
72233: PPUSH
72234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
72235: LD_ADDR_VAR 0 2
72239: PUSH
72240: LD_INT 22
72242: PUSH
72243: LD_OWVAR 2
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PUSH
72252: LD_INT 32
72254: PUSH
72255: LD_INT 1
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 21
72264: PUSH
72265: LD_INT 2
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: LIST
72276: PPUSH
72277: CALL_OW 69
72281: ST_TO_ADDR
// if not tmp then
72282: LD_VAR 0 2
72286: NOT
72287: IFFALSE 72291
// exit ;
72289: GO 72320
// for i in tmp do
72291: LD_ADDR_VAR 0 1
72295: PUSH
72296: LD_VAR 0 2
72300: PUSH
72301: FOR_IN
72302: IFFALSE 72318
// SetFuel ( i , 0 ) ;
72304: LD_VAR 0 1
72308: PPUSH
72309: LD_INT 0
72311: PPUSH
72312: CALL_OW 240
72316: GO 72301
72318: POP
72319: POP
// end ;
72320: PPOPN 2
72322: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
72323: LD_EXP 77
72327: PUSH
72328: LD_EXP 113
72332: AND
72333: IFFALSE 72399
72335: GO 72337
72337: DISABLE
72338: LD_INT 0
72340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72341: LD_ADDR_VAR 0 1
72345: PUSH
72346: LD_INT 22
72348: PUSH
72349: LD_OWVAR 2
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 30
72360: PUSH
72361: LD_INT 29
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PPUSH
72372: CALL_OW 69
72376: ST_TO_ADDR
// if not tmp then
72377: LD_VAR 0 1
72381: NOT
72382: IFFALSE 72386
// exit ;
72384: GO 72399
// DestroyUnit ( tmp [ 1 ] ) ;
72386: LD_VAR 0 1
72390: PUSH
72391: LD_INT 1
72393: ARRAY
72394: PPUSH
72395: CALL_OW 65
// end ;
72399: PPOPN 1
72401: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
72402: LD_EXP 77
72406: PUSH
72407: LD_EXP 115
72411: AND
72412: IFFALSE 72541
72414: GO 72416
72416: DISABLE
72417: LD_INT 0
72419: PPUSH
// begin uc_side := 0 ;
72420: LD_ADDR_OWVAR 20
72424: PUSH
72425: LD_INT 0
72427: ST_TO_ADDR
// uc_nation := nation_arabian ;
72428: LD_ADDR_OWVAR 21
72432: PUSH
72433: LD_INT 2
72435: ST_TO_ADDR
// hc_gallery :=  ;
72436: LD_ADDR_OWVAR 33
72440: PUSH
72441: LD_STRING 
72443: ST_TO_ADDR
// hc_name :=  ;
72444: LD_ADDR_OWVAR 26
72448: PUSH
72449: LD_STRING 
72451: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
72452: LD_INT 1
72454: PPUSH
72455: LD_INT 11
72457: PPUSH
72458: LD_INT 10
72460: PPUSH
72461: CALL_OW 380
// un := CreateHuman ;
72465: LD_ADDR_VAR 0 1
72469: PUSH
72470: CALL_OW 44
72474: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72475: LD_VAR 0 1
72479: PPUSH
72480: LD_INT 1
72482: PPUSH
72483: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72487: LD_INT 35
72489: PPUSH
72490: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72494: LD_VAR 0 1
72498: PPUSH
72499: LD_INT 22
72501: PUSH
72502: LD_OWVAR 2
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PPUSH
72511: CALL_OW 69
72515: PPUSH
72516: LD_VAR 0 1
72520: PPUSH
72521: CALL_OW 74
72525: PPUSH
72526: CALL_OW 115
// until IsDead ( un ) ;
72530: LD_VAR 0 1
72534: PPUSH
72535: CALL_OW 301
72539: IFFALSE 72487
// end ;
72541: PPOPN 1
72543: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
72544: LD_EXP 77
72548: PUSH
72549: LD_EXP 117
72553: AND
72554: IFFALSE 72566
72556: GO 72558
72558: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
72559: LD_STRING earthquake(getX(game), 0, 32)
72561: PPUSH
72562: CALL_OW 559
72566: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
72567: LD_EXP 77
72571: PUSH
72572: LD_EXP 118
72576: AND
72577: IFFALSE 72668
72579: GO 72581
72581: DISABLE
72582: LD_INT 0
72584: PPUSH
// begin enable ;
72585: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
72586: LD_ADDR_VAR 0 1
72590: PUSH
72591: LD_INT 22
72593: PUSH
72594: LD_OWVAR 2
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 21
72605: PUSH
72606: LD_INT 2
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 33
72615: PUSH
72616: LD_INT 3
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: LIST
72627: PPUSH
72628: CALL_OW 69
72632: ST_TO_ADDR
// if not tmp then
72633: LD_VAR 0 1
72637: NOT
72638: IFFALSE 72642
// exit ;
72640: GO 72668
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72642: LD_VAR 0 1
72646: PUSH
72647: LD_INT 1
72649: PPUSH
72650: LD_VAR 0 1
72654: PPUSH
72655: CALL_OW 12
72659: ARRAY
72660: PPUSH
72661: LD_INT 1
72663: PPUSH
72664: CALL_OW 234
// end ;
72668: PPOPN 1
72670: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
72671: LD_EXP 77
72675: PUSH
72676: LD_EXP 119
72680: AND
72681: IFFALSE 72822
72683: GO 72685
72685: DISABLE
72686: LD_INT 0
72688: PPUSH
72689: PPUSH
72690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72691: LD_ADDR_VAR 0 3
72695: PUSH
72696: LD_INT 22
72698: PUSH
72699: LD_OWVAR 2
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 25
72710: PUSH
72711: LD_INT 1
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PPUSH
72722: CALL_OW 69
72726: ST_TO_ADDR
// if not tmp then
72727: LD_VAR 0 3
72731: NOT
72732: IFFALSE 72736
// exit ;
72734: GO 72822
// un := tmp [ rand ( 1 , tmp ) ] ;
72736: LD_ADDR_VAR 0 2
72740: PUSH
72741: LD_VAR 0 3
72745: PUSH
72746: LD_INT 1
72748: PPUSH
72749: LD_VAR 0 3
72753: PPUSH
72754: CALL_OW 12
72758: ARRAY
72759: ST_TO_ADDR
// if Crawls ( un ) then
72760: LD_VAR 0 2
72764: PPUSH
72765: CALL_OW 318
72769: IFFALSE 72780
// ComWalk ( un ) ;
72771: LD_VAR 0 2
72775: PPUSH
72776: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
72780: LD_VAR 0 2
72784: PPUSH
72785: LD_INT 9
72787: PPUSH
72788: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
72792: LD_INT 28
72794: PPUSH
72795: LD_OWVAR 2
72799: PPUSH
72800: LD_INT 2
72802: PPUSH
72803: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
72807: LD_INT 29
72809: PPUSH
72810: LD_OWVAR 2
72814: PPUSH
72815: LD_INT 2
72817: PPUSH
72818: CALL_OW 322
// end ;
72822: PPOPN 3
72824: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
72825: LD_EXP 77
72829: PUSH
72830: LD_EXP 120
72834: AND
72835: IFFALSE 72946
72837: GO 72839
72839: DISABLE
72840: LD_INT 0
72842: PPUSH
72843: PPUSH
72844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72845: LD_ADDR_VAR 0 3
72849: PUSH
72850: LD_INT 22
72852: PUSH
72853: LD_OWVAR 2
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 25
72864: PUSH
72865: LD_INT 1
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PPUSH
72876: CALL_OW 69
72880: ST_TO_ADDR
// if not tmp then
72881: LD_VAR 0 3
72885: NOT
72886: IFFALSE 72890
// exit ;
72888: GO 72946
// un := tmp [ rand ( 1 , tmp ) ] ;
72890: LD_ADDR_VAR 0 2
72894: PUSH
72895: LD_VAR 0 3
72899: PUSH
72900: LD_INT 1
72902: PPUSH
72903: LD_VAR 0 3
72907: PPUSH
72908: CALL_OW 12
72912: ARRAY
72913: ST_TO_ADDR
// if Crawls ( un ) then
72914: LD_VAR 0 2
72918: PPUSH
72919: CALL_OW 318
72923: IFFALSE 72934
// ComWalk ( un ) ;
72925: LD_VAR 0 2
72929: PPUSH
72930: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72934: LD_VAR 0 2
72938: PPUSH
72939: LD_INT 8
72941: PPUSH
72942: CALL_OW 336
// end ;
72946: PPOPN 3
72948: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
72949: LD_EXP 77
72953: PUSH
72954: LD_EXP 121
72958: AND
72959: IFFALSE 73103
72961: GO 72963
72963: DISABLE
72964: LD_INT 0
72966: PPUSH
72967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
72968: LD_ADDR_VAR 0 2
72972: PUSH
72973: LD_INT 22
72975: PUSH
72976: LD_OWVAR 2
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: LD_INT 21
72987: PUSH
72988: LD_INT 2
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 2
72997: PUSH
72998: LD_INT 34
73000: PUSH
73001: LD_INT 12
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 34
73010: PUSH
73011: LD_INT 51
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 34
73020: PUSH
73021: LD_INT 32
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: LIST
73038: PPUSH
73039: CALL_OW 69
73043: ST_TO_ADDR
// if not tmp then
73044: LD_VAR 0 2
73048: NOT
73049: IFFALSE 73053
// exit ;
73051: GO 73103
// for i in tmp do
73053: LD_ADDR_VAR 0 1
73057: PUSH
73058: LD_VAR 0 2
73062: PUSH
73063: FOR_IN
73064: IFFALSE 73101
// if GetCargo ( i , mat_artifact ) = 0 then
73066: LD_VAR 0 1
73070: PPUSH
73071: LD_INT 4
73073: PPUSH
73074: CALL_OW 289
73078: PUSH
73079: LD_INT 0
73081: EQUAL
73082: IFFALSE 73099
// SetCargo ( i , mat_siberit , 100 ) ;
73084: LD_VAR 0 1
73088: PPUSH
73089: LD_INT 3
73091: PPUSH
73092: LD_INT 100
73094: PPUSH
73095: CALL_OW 290
73099: GO 73063
73101: POP
73102: POP
// end ;
73103: PPOPN 2
73105: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
73106: LD_EXP 77
73110: PUSH
73111: LD_EXP 122
73115: AND
73116: IFFALSE 73299
73118: GO 73120
73120: DISABLE
73121: LD_INT 0
73123: PPUSH
73124: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73125: LD_ADDR_VAR 0 2
73129: PUSH
73130: LD_INT 22
73132: PUSH
73133: LD_OWVAR 2
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PPUSH
73142: CALL_OW 69
73146: ST_TO_ADDR
// if not tmp then
73147: LD_VAR 0 2
73151: NOT
73152: IFFALSE 73156
// exit ;
73154: GO 73299
// for i := 1 to 2 do
73156: LD_ADDR_VAR 0 1
73160: PUSH
73161: DOUBLE
73162: LD_INT 1
73164: DEC
73165: ST_TO_ADDR
73166: LD_INT 2
73168: PUSH
73169: FOR_TO
73170: IFFALSE 73297
// begin uc_side := your_side ;
73172: LD_ADDR_OWVAR 20
73176: PUSH
73177: LD_OWVAR 2
73181: ST_TO_ADDR
// uc_nation := nation_american ;
73182: LD_ADDR_OWVAR 21
73186: PUSH
73187: LD_INT 1
73189: ST_TO_ADDR
// vc_chassis := us_morphling ;
73190: LD_ADDR_OWVAR 37
73194: PUSH
73195: LD_INT 5
73197: ST_TO_ADDR
// vc_engine := engine_siberite ;
73198: LD_ADDR_OWVAR 39
73202: PUSH
73203: LD_INT 3
73205: ST_TO_ADDR
// vc_control := control_computer ;
73206: LD_ADDR_OWVAR 38
73210: PUSH
73211: LD_INT 3
73213: ST_TO_ADDR
// vc_weapon := us_double_laser ;
73214: LD_ADDR_OWVAR 40
73218: PUSH
73219: LD_INT 10
73221: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
73222: LD_VAR 0 2
73226: PUSH
73227: LD_INT 1
73229: ARRAY
73230: PPUSH
73231: CALL_OW 310
73235: NOT
73236: IFFALSE 73283
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
73238: CALL_OW 45
73242: PPUSH
73243: LD_VAR 0 2
73247: PUSH
73248: LD_INT 1
73250: ARRAY
73251: PPUSH
73252: CALL_OW 250
73256: PPUSH
73257: LD_VAR 0 2
73261: PUSH
73262: LD_INT 1
73264: ARRAY
73265: PPUSH
73266: CALL_OW 251
73270: PPUSH
73271: LD_INT 12
73273: PPUSH
73274: LD_INT 1
73276: PPUSH
73277: CALL_OW 50
73281: GO 73295
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
73283: CALL_OW 45
73287: PPUSH
73288: LD_INT 1
73290: PPUSH
73291: CALL_OW 51
// end ;
73295: GO 73169
73297: POP
73298: POP
// end ;
73299: PPOPN 2
73301: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
73302: LD_EXP 77
73306: PUSH
73307: LD_EXP 123
73311: AND
73312: IFFALSE 73534
73314: GO 73316
73316: DISABLE
73317: LD_INT 0
73319: PPUSH
73320: PPUSH
73321: PPUSH
73322: PPUSH
73323: PPUSH
73324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73325: LD_ADDR_VAR 0 6
73329: PUSH
73330: LD_INT 22
73332: PUSH
73333: LD_OWVAR 2
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: LD_INT 21
73344: PUSH
73345: LD_INT 1
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_INT 3
73354: PUSH
73355: LD_INT 23
73357: PUSH
73358: LD_INT 0
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: LIST
73373: PPUSH
73374: CALL_OW 69
73378: ST_TO_ADDR
// if not tmp then
73379: LD_VAR 0 6
73383: NOT
73384: IFFALSE 73388
// exit ;
73386: GO 73534
// s1 := rand ( 1 , 4 ) ;
73388: LD_ADDR_VAR 0 2
73392: PUSH
73393: LD_INT 1
73395: PPUSH
73396: LD_INT 4
73398: PPUSH
73399: CALL_OW 12
73403: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
73404: LD_ADDR_VAR 0 4
73408: PUSH
73409: LD_VAR 0 6
73413: PUSH
73414: LD_INT 1
73416: ARRAY
73417: PPUSH
73418: LD_VAR 0 2
73422: PPUSH
73423: CALL_OW 259
73427: ST_TO_ADDR
// if s1 = 1 then
73428: LD_VAR 0 2
73432: PUSH
73433: LD_INT 1
73435: EQUAL
73436: IFFALSE 73456
// s2 := rand ( 2 , 4 ) else
73438: LD_ADDR_VAR 0 3
73442: PUSH
73443: LD_INT 2
73445: PPUSH
73446: LD_INT 4
73448: PPUSH
73449: CALL_OW 12
73453: ST_TO_ADDR
73454: GO 73464
// s2 := 1 ;
73456: LD_ADDR_VAR 0 3
73460: PUSH
73461: LD_INT 1
73463: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
73464: LD_ADDR_VAR 0 5
73468: PUSH
73469: LD_VAR 0 6
73473: PUSH
73474: LD_INT 1
73476: ARRAY
73477: PPUSH
73478: LD_VAR 0 3
73482: PPUSH
73483: CALL_OW 259
73487: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
73488: LD_VAR 0 6
73492: PUSH
73493: LD_INT 1
73495: ARRAY
73496: PPUSH
73497: LD_VAR 0 2
73501: PPUSH
73502: LD_VAR 0 5
73506: PPUSH
73507: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
73511: LD_VAR 0 6
73515: PUSH
73516: LD_INT 1
73518: ARRAY
73519: PPUSH
73520: LD_VAR 0 3
73524: PPUSH
73525: LD_VAR 0 4
73529: PPUSH
73530: CALL_OW 237
// end ;
73534: PPOPN 6
73536: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
73537: LD_EXP 77
73541: PUSH
73542: LD_EXP 124
73546: AND
73547: IFFALSE 73626
73549: GO 73551
73551: DISABLE
73552: LD_INT 0
73554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
73555: LD_ADDR_VAR 0 1
73559: PUSH
73560: LD_INT 22
73562: PUSH
73563: LD_OWVAR 2
73567: PUSH
73568: EMPTY
73569: LIST
73570: LIST
73571: PUSH
73572: LD_INT 30
73574: PUSH
73575: LD_INT 3
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PPUSH
73586: CALL_OW 69
73590: ST_TO_ADDR
// if not tmp then
73591: LD_VAR 0 1
73595: NOT
73596: IFFALSE 73600
// exit ;
73598: GO 73626
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73600: LD_VAR 0 1
73604: PUSH
73605: LD_INT 1
73607: PPUSH
73608: LD_VAR 0 1
73612: PPUSH
73613: CALL_OW 12
73617: ARRAY
73618: PPUSH
73619: LD_INT 1
73621: PPUSH
73622: CALL_OW 234
// end ;
73626: PPOPN 1
73628: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
73629: LD_EXP 77
73633: PUSH
73634: LD_EXP 125
73638: AND
73639: IFFALSE 73751
73641: GO 73643
73643: DISABLE
73644: LD_INT 0
73646: PPUSH
73647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
73648: LD_ADDR_VAR 0 2
73652: PUSH
73653: LD_INT 22
73655: PUSH
73656: LD_OWVAR 2
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 2
73667: PUSH
73668: LD_INT 30
73670: PUSH
73671: LD_INT 27
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: LD_INT 30
73680: PUSH
73681: LD_INT 26
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 30
73690: PUSH
73691: LD_INT 28
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PPUSH
73708: CALL_OW 69
73712: ST_TO_ADDR
// if not tmp then
73713: LD_VAR 0 2
73717: NOT
73718: IFFALSE 73722
// exit ;
73720: GO 73751
// for i in tmp do
73722: LD_ADDR_VAR 0 1
73726: PUSH
73727: LD_VAR 0 2
73731: PUSH
73732: FOR_IN
73733: IFFALSE 73749
// SetLives ( i , 1 ) ;
73735: LD_VAR 0 1
73739: PPUSH
73740: LD_INT 1
73742: PPUSH
73743: CALL_OW 234
73747: GO 73732
73749: POP
73750: POP
// end ;
73751: PPOPN 2
73753: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
73754: LD_EXP 77
73758: PUSH
73759: LD_EXP 126
73763: AND
73764: IFFALSE 74038
73766: GO 73768
73768: DISABLE
73769: LD_INT 0
73771: PPUSH
73772: PPUSH
73773: PPUSH
// begin i := rand ( 1 , 7 ) ;
73774: LD_ADDR_VAR 0 1
73778: PUSH
73779: LD_INT 1
73781: PPUSH
73782: LD_INT 7
73784: PPUSH
73785: CALL_OW 12
73789: ST_TO_ADDR
// case i of 1 :
73790: LD_VAR 0 1
73794: PUSH
73795: LD_INT 1
73797: DOUBLE
73798: EQUAL
73799: IFTRUE 73803
73801: GO 73813
73803: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
73804: LD_STRING earthquake(getX(game), 0, 32)
73806: PPUSH
73807: CALL_OW 559
73811: GO 74038
73813: LD_INT 2
73815: DOUBLE
73816: EQUAL
73817: IFTRUE 73821
73819: GO 73835
73821: POP
// begin ToLua ( displayStucuk(); ) ;
73822: LD_STRING displayStucuk();
73824: PPUSH
73825: CALL_OW 559
// ResetFog ;
73829: CALL_OW 335
// end ; 3 :
73833: GO 74038
73835: LD_INT 3
73837: DOUBLE
73838: EQUAL
73839: IFTRUE 73843
73841: GO 73947
73843: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73844: LD_ADDR_VAR 0 2
73848: PUSH
73849: LD_INT 22
73851: PUSH
73852: LD_OWVAR 2
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: PUSH
73861: LD_INT 25
73863: PUSH
73864: LD_INT 1
73866: PUSH
73867: EMPTY
73868: LIST
73869: LIST
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PPUSH
73875: CALL_OW 69
73879: ST_TO_ADDR
// if not tmp then
73880: LD_VAR 0 2
73884: NOT
73885: IFFALSE 73889
// exit ;
73887: GO 74038
// un := tmp [ rand ( 1 , tmp ) ] ;
73889: LD_ADDR_VAR 0 3
73893: PUSH
73894: LD_VAR 0 2
73898: PUSH
73899: LD_INT 1
73901: PPUSH
73902: LD_VAR 0 2
73906: PPUSH
73907: CALL_OW 12
73911: ARRAY
73912: ST_TO_ADDR
// if Crawls ( un ) then
73913: LD_VAR 0 3
73917: PPUSH
73918: CALL_OW 318
73922: IFFALSE 73933
// ComWalk ( un ) ;
73924: LD_VAR 0 3
73928: PPUSH
73929: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73933: LD_VAR 0 3
73937: PPUSH
73938: LD_INT 8
73940: PPUSH
73941: CALL_OW 336
// end ; 4 :
73945: GO 74038
73947: LD_INT 4
73949: DOUBLE
73950: EQUAL
73951: IFTRUE 73955
73953: GO 74016
73955: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73956: LD_ADDR_VAR 0 2
73960: PUSH
73961: LD_INT 22
73963: PUSH
73964: LD_OWVAR 2
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: PUSH
73973: LD_INT 30
73975: PUSH
73976: LD_INT 29
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PPUSH
73987: CALL_OW 69
73991: ST_TO_ADDR
// if not tmp then
73992: LD_VAR 0 2
73996: NOT
73997: IFFALSE 74001
// exit ;
73999: GO 74038
// DestroyUnit ( tmp [ 1 ] ) ;
74001: LD_VAR 0 2
74005: PUSH
74006: LD_INT 1
74008: ARRAY
74009: PPUSH
74010: CALL_OW 65
// end ; 5 .. 7 :
74014: GO 74038
74016: LD_INT 5
74018: DOUBLE
74019: GREATEREQUAL
74020: IFFALSE 74028
74022: LD_INT 7
74024: DOUBLE
74025: LESSEQUAL
74026: IFTRUE 74030
74028: GO 74037
74030: POP
// StreamSibBomb ; end ;
74031: CALL 70288 0 0
74035: GO 74038
74037: POP
// end ;
74038: PPOPN 3
74040: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
74041: LD_EXP 77
74045: PUSH
74046: LD_EXP 127
74050: AND
74051: IFFALSE 74207
74053: GO 74055
74055: DISABLE
74056: LD_INT 0
74058: PPUSH
74059: PPUSH
74060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
74061: LD_ADDR_VAR 0 2
74065: PUSH
74066: LD_INT 81
74068: PUSH
74069: LD_OWVAR 2
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: PUSH
74078: LD_INT 2
74080: PUSH
74081: LD_INT 21
74083: PUSH
74084: LD_INT 1
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: LD_INT 21
74093: PUSH
74094: LD_INT 2
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: LIST
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PPUSH
74110: CALL_OW 69
74114: ST_TO_ADDR
// if not tmp then
74115: LD_VAR 0 2
74119: NOT
74120: IFFALSE 74124
// exit ;
74122: GO 74207
// p := 0 ;
74124: LD_ADDR_VAR 0 3
74128: PUSH
74129: LD_INT 0
74131: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74132: LD_INT 35
74134: PPUSH
74135: CALL_OW 67
// p := p + 1 ;
74139: LD_ADDR_VAR 0 3
74143: PUSH
74144: LD_VAR 0 3
74148: PUSH
74149: LD_INT 1
74151: PLUS
74152: ST_TO_ADDR
// for i in tmp do
74153: LD_ADDR_VAR 0 1
74157: PUSH
74158: LD_VAR 0 2
74162: PUSH
74163: FOR_IN
74164: IFFALSE 74195
// if GetLives ( i ) < 1000 then
74166: LD_VAR 0 1
74170: PPUSH
74171: CALL_OW 256
74175: PUSH
74176: LD_INT 1000
74178: LESS
74179: IFFALSE 74193
// SetLives ( i , 1000 ) ;
74181: LD_VAR 0 1
74185: PPUSH
74186: LD_INT 1000
74188: PPUSH
74189: CALL_OW 234
74193: GO 74163
74195: POP
74196: POP
// until p > 20 ;
74197: LD_VAR 0 3
74201: PUSH
74202: LD_INT 20
74204: GREATER
74205: IFFALSE 74132
// end ;
74207: PPOPN 3
74209: END
// every 0 0$1 trigger StreamModeActive and sTime do
74210: LD_EXP 77
74214: PUSH
74215: LD_EXP 128
74219: AND
74220: IFFALSE 74255
74222: GO 74224
74224: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
74225: LD_INT 28
74227: PPUSH
74228: LD_OWVAR 2
74232: PPUSH
74233: LD_INT 2
74235: PPUSH
74236: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
74240: LD_INT 30
74242: PPUSH
74243: LD_OWVAR 2
74247: PPUSH
74248: LD_INT 2
74250: PPUSH
74251: CALL_OW 322
// end ;
74255: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
74256: LD_EXP 77
74260: PUSH
74261: LD_EXP 129
74265: AND
74266: IFFALSE 74387
74268: GO 74270
74270: DISABLE
74271: LD_INT 0
74273: PPUSH
74274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74275: LD_ADDR_VAR 0 2
74279: PUSH
74280: LD_INT 22
74282: PUSH
74283: LD_OWVAR 2
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 21
74294: PUSH
74295: LD_INT 1
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: PUSH
74302: LD_INT 3
74304: PUSH
74305: LD_INT 23
74307: PUSH
74308: LD_INT 0
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: LIST
74323: PPUSH
74324: CALL_OW 69
74328: ST_TO_ADDR
// if not tmp then
74329: LD_VAR 0 2
74333: NOT
74334: IFFALSE 74338
// exit ;
74336: GO 74387
// for i in tmp do
74338: LD_ADDR_VAR 0 1
74342: PUSH
74343: LD_VAR 0 2
74347: PUSH
74348: FOR_IN
74349: IFFALSE 74385
// begin if Crawls ( i ) then
74351: LD_VAR 0 1
74355: PPUSH
74356: CALL_OW 318
74360: IFFALSE 74371
// ComWalk ( i ) ;
74362: LD_VAR 0 1
74366: PPUSH
74367: CALL_OW 138
// SetClass ( i , 2 ) ;
74371: LD_VAR 0 1
74375: PPUSH
74376: LD_INT 2
74378: PPUSH
74379: CALL_OW 336
// end ;
74383: GO 74348
74385: POP
74386: POP
// end ;
74387: PPOPN 2
74389: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
74390: LD_EXP 77
74394: PUSH
74395: LD_EXP 130
74399: AND
74400: IFFALSE 74681
74402: GO 74404
74404: DISABLE
74405: LD_INT 0
74407: PPUSH
74408: PPUSH
74409: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
74410: LD_OWVAR 2
74414: PPUSH
74415: LD_INT 9
74417: PPUSH
74418: LD_INT 1
74420: PPUSH
74421: LD_INT 1
74423: PPUSH
74424: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
74428: LD_INT 9
74430: PPUSH
74431: LD_OWVAR 2
74435: PPUSH
74436: CALL_OW 343
// uc_side := 9 ;
74440: LD_ADDR_OWVAR 20
74444: PUSH
74445: LD_INT 9
74447: ST_TO_ADDR
// uc_nation := 2 ;
74448: LD_ADDR_OWVAR 21
74452: PUSH
74453: LD_INT 2
74455: ST_TO_ADDR
// hc_name := Dark Warrior ;
74456: LD_ADDR_OWVAR 26
74460: PUSH
74461: LD_STRING Dark Warrior
74463: ST_TO_ADDR
// hc_gallery :=  ;
74464: LD_ADDR_OWVAR 33
74468: PUSH
74469: LD_STRING 
74471: ST_TO_ADDR
// hc_noskilllimit := true ;
74472: LD_ADDR_OWVAR 76
74476: PUSH
74477: LD_INT 1
74479: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
74480: LD_ADDR_OWVAR 31
74484: PUSH
74485: LD_INT 30
74487: PUSH
74488: LD_INT 30
74490: PUSH
74491: LD_INT 30
74493: PUSH
74494: LD_INT 30
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: ST_TO_ADDR
// un := CreateHuman ;
74503: LD_ADDR_VAR 0 3
74507: PUSH
74508: CALL_OW 44
74512: ST_TO_ADDR
// hc_noskilllimit := false ;
74513: LD_ADDR_OWVAR 76
74517: PUSH
74518: LD_INT 0
74520: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74521: LD_VAR 0 3
74525: PPUSH
74526: LD_INT 1
74528: PPUSH
74529: CALL_OW 51
// p := 0 ;
74533: LD_ADDR_VAR 0 2
74537: PUSH
74538: LD_INT 0
74540: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74541: LD_INT 35
74543: PPUSH
74544: CALL_OW 67
// p := p + 1 ;
74548: LD_ADDR_VAR 0 2
74552: PUSH
74553: LD_VAR 0 2
74557: PUSH
74558: LD_INT 1
74560: PLUS
74561: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
74562: LD_VAR 0 3
74566: PPUSH
74567: CALL_OW 256
74571: PUSH
74572: LD_INT 1000
74574: LESS
74575: IFFALSE 74589
// SetLives ( un , 1000 ) ;
74577: LD_VAR 0 3
74581: PPUSH
74582: LD_INT 1000
74584: PPUSH
74585: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
74589: LD_VAR 0 3
74593: PPUSH
74594: LD_INT 81
74596: PUSH
74597: LD_OWVAR 2
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PUSH
74606: LD_INT 91
74608: PUSH
74609: LD_VAR 0 3
74613: PUSH
74614: LD_INT 30
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: LIST
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PPUSH
74626: CALL_OW 69
74630: PPUSH
74631: LD_VAR 0 3
74635: PPUSH
74636: CALL_OW 74
74640: PPUSH
74641: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
74645: LD_VAR 0 2
74649: PUSH
74650: LD_INT 60
74652: GREATER
74653: PUSH
74654: LD_VAR 0 3
74658: PPUSH
74659: CALL_OW 301
74663: OR
74664: IFFALSE 74541
// if un then
74666: LD_VAR 0 3
74670: IFFALSE 74681
// RemoveUnit ( un ) ;
74672: LD_VAR 0 3
74676: PPUSH
74677: CALL_OW 64
// end ;
74681: PPOPN 3
74683: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74684: LD_INT 0
74686: PPUSH
// case cmd of 301 :
74687: LD_VAR 0 1
74691: PUSH
74692: LD_INT 301
74694: DOUBLE
74695: EQUAL
74696: IFTRUE 74700
74698: GO 74732
74700: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74701: LD_VAR 0 6
74705: PPUSH
74706: LD_VAR 0 7
74710: PPUSH
74711: LD_VAR 0 8
74715: PPUSH
74716: LD_VAR 0 4
74720: PPUSH
74721: LD_VAR 0 5
74725: PPUSH
74726: CALL 75933 0 5
74730: GO 74853
74732: LD_INT 302
74734: DOUBLE
74735: EQUAL
74736: IFTRUE 74740
74738: GO 74777
74740: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74741: LD_VAR 0 6
74745: PPUSH
74746: LD_VAR 0 7
74750: PPUSH
74751: LD_VAR 0 8
74755: PPUSH
74756: LD_VAR 0 9
74760: PPUSH
74761: LD_VAR 0 4
74765: PPUSH
74766: LD_VAR 0 5
74770: PPUSH
74771: CALL 76024 0 6
74775: GO 74853
74777: LD_INT 303
74779: DOUBLE
74780: EQUAL
74781: IFTRUE 74785
74783: GO 74822
74785: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74786: LD_VAR 0 6
74790: PPUSH
74791: LD_VAR 0 7
74795: PPUSH
74796: LD_VAR 0 8
74800: PPUSH
74801: LD_VAR 0 9
74805: PPUSH
74806: LD_VAR 0 4
74810: PPUSH
74811: LD_VAR 0 5
74815: PPUSH
74816: CALL 74858 0 6
74820: GO 74853
74822: LD_INT 304
74824: DOUBLE
74825: EQUAL
74826: IFTRUE 74830
74828: GO 74852
74830: POP
// hHackTeleport ( unit , x , y ) ; end ;
74831: LD_VAR 0 2
74835: PPUSH
74836: LD_VAR 0 4
74840: PPUSH
74841: LD_VAR 0 5
74845: PPUSH
74846: CALL 76617 0 3
74850: GO 74853
74852: POP
// end ;
74853: LD_VAR 0 12
74857: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74858: LD_INT 0
74860: PPUSH
74861: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74862: LD_VAR 0 1
74866: PUSH
74867: LD_INT 1
74869: LESS
74870: PUSH
74871: LD_VAR 0 1
74875: PUSH
74876: LD_INT 3
74878: GREATER
74879: OR
74880: PUSH
74881: LD_VAR 0 5
74885: PPUSH
74886: LD_VAR 0 6
74890: PPUSH
74891: CALL_OW 428
74895: OR
74896: IFFALSE 74900
// exit ;
74898: GO 75620
// uc_side := your_side ;
74900: LD_ADDR_OWVAR 20
74904: PUSH
74905: LD_OWVAR 2
74909: ST_TO_ADDR
// uc_nation := nation ;
74910: LD_ADDR_OWVAR 21
74914: PUSH
74915: LD_VAR 0 1
74919: ST_TO_ADDR
// bc_level = 1 ;
74920: LD_ADDR_OWVAR 43
74924: PUSH
74925: LD_INT 1
74927: ST_TO_ADDR
// case btype of 1 :
74928: LD_VAR 0 2
74932: PUSH
74933: LD_INT 1
74935: DOUBLE
74936: EQUAL
74937: IFTRUE 74941
74939: GO 74952
74941: POP
// bc_type := b_depot ; 2 :
74942: LD_ADDR_OWVAR 42
74946: PUSH
74947: LD_INT 0
74949: ST_TO_ADDR
74950: GO 75564
74952: LD_INT 2
74954: DOUBLE
74955: EQUAL
74956: IFTRUE 74960
74958: GO 74971
74960: POP
// bc_type := b_warehouse ; 3 :
74961: LD_ADDR_OWVAR 42
74965: PUSH
74966: LD_INT 1
74968: ST_TO_ADDR
74969: GO 75564
74971: LD_INT 3
74973: DOUBLE
74974: EQUAL
74975: IFTRUE 74979
74977: GO 74990
74979: POP
// bc_type := b_lab ; 4 .. 9 :
74980: LD_ADDR_OWVAR 42
74984: PUSH
74985: LD_INT 6
74987: ST_TO_ADDR
74988: GO 75564
74990: LD_INT 4
74992: DOUBLE
74993: GREATEREQUAL
74994: IFFALSE 75002
74996: LD_INT 9
74998: DOUBLE
74999: LESSEQUAL
75000: IFTRUE 75004
75002: GO 75056
75004: POP
// begin bc_type := b_lab_half ;
75005: LD_ADDR_OWVAR 42
75009: PUSH
75010: LD_INT 7
75012: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
75013: LD_ADDR_OWVAR 44
75017: PUSH
75018: LD_INT 10
75020: PUSH
75021: LD_INT 11
75023: PUSH
75024: LD_INT 12
75026: PUSH
75027: LD_INT 15
75029: PUSH
75030: LD_INT 14
75032: PUSH
75033: LD_INT 13
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: PUSH
75044: LD_VAR 0 2
75048: PUSH
75049: LD_INT 3
75051: MINUS
75052: ARRAY
75053: ST_TO_ADDR
// end ; 10 .. 13 :
75054: GO 75564
75056: LD_INT 10
75058: DOUBLE
75059: GREATEREQUAL
75060: IFFALSE 75068
75062: LD_INT 13
75064: DOUBLE
75065: LESSEQUAL
75066: IFTRUE 75070
75068: GO 75147
75070: POP
// begin bc_type := b_lab_full ;
75071: LD_ADDR_OWVAR 42
75075: PUSH
75076: LD_INT 8
75078: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
75079: LD_ADDR_OWVAR 44
75083: PUSH
75084: LD_INT 10
75086: PUSH
75087: LD_INT 12
75089: PUSH
75090: LD_INT 14
75092: PUSH
75093: LD_INT 13
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: PUSH
75102: LD_VAR 0 2
75106: PUSH
75107: LD_INT 9
75109: MINUS
75110: ARRAY
75111: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
75112: LD_ADDR_OWVAR 45
75116: PUSH
75117: LD_INT 11
75119: PUSH
75120: LD_INT 15
75122: PUSH
75123: LD_INT 12
75125: PUSH
75126: LD_INT 15
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: PUSH
75135: LD_VAR 0 2
75139: PUSH
75140: LD_INT 9
75142: MINUS
75143: ARRAY
75144: ST_TO_ADDR
// end ; 14 :
75145: GO 75564
75147: LD_INT 14
75149: DOUBLE
75150: EQUAL
75151: IFTRUE 75155
75153: GO 75166
75155: POP
// bc_type := b_workshop ; 15 :
75156: LD_ADDR_OWVAR 42
75160: PUSH
75161: LD_INT 2
75163: ST_TO_ADDR
75164: GO 75564
75166: LD_INT 15
75168: DOUBLE
75169: EQUAL
75170: IFTRUE 75174
75172: GO 75185
75174: POP
// bc_type := b_factory ; 16 :
75175: LD_ADDR_OWVAR 42
75179: PUSH
75180: LD_INT 3
75182: ST_TO_ADDR
75183: GO 75564
75185: LD_INT 16
75187: DOUBLE
75188: EQUAL
75189: IFTRUE 75193
75191: GO 75204
75193: POP
// bc_type := b_ext_gun ; 17 :
75194: LD_ADDR_OWVAR 42
75198: PUSH
75199: LD_INT 17
75201: ST_TO_ADDR
75202: GO 75564
75204: LD_INT 17
75206: DOUBLE
75207: EQUAL
75208: IFTRUE 75212
75210: GO 75240
75212: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
75213: LD_ADDR_OWVAR 42
75217: PUSH
75218: LD_INT 19
75220: PUSH
75221: LD_INT 23
75223: PUSH
75224: LD_INT 19
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: LIST
75231: PUSH
75232: LD_VAR 0 1
75236: ARRAY
75237: ST_TO_ADDR
75238: GO 75564
75240: LD_INT 18
75242: DOUBLE
75243: EQUAL
75244: IFTRUE 75248
75246: GO 75259
75248: POP
// bc_type := b_ext_radar ; 19 :
75249: LD_ADDR_OWVAR 42
75253: PUSH
75254: LD_INT 20
75256: ST_TO_ADDR
75257: GO 75564
75259: LD_INT 19
75261: DOUBLE
75262: EQUAL
75263: IFTRUE 75267
75265: GO 75278
75267: POP
// bc_type := b_ext_radio ; 20 :
75268: LD_ADDR_OWVAR 42
75272: PUSH
75273: LD_INT 22
75275: ST_TO_ADDR
75276: GO 75564
75278: LD_INT 20
75280: DOUBLE
75281: EQUAL
75282: IFTRUE 75286
75284: GO 75297
75286: POP
// bc_type := b_ext_siberium ; 21 :
75287: LD_ADDR_OWVAR 42
75291: PUSH
75292: LD_INT 21
75294: ST_TO_ADDR
75295: GO 75564
75297: LD_INT 21
75299: DOUBLE
75300: EQUAL
75301: IFTRUE 75305
75303: GO 75316
75305: POP
// bc_type := b_ext_computer ; 22 :
75306: LD_ADDR_OWVAR 42
75310: PUSH
75311: LD_INT 24
75313: ST_TO_ADDR
75314: GO 75564
75316: LD_INT 22
75318: DOUBLE
75319: EQUAL
75320: IFTRUE 75324
75322: GO 75335
75324: POP
// bc_type := b_ext_track ; 23 :
75325: LD_ADDR_OWVAR 42
75329: PUSH
75330: LD_INT 16
75332: ST_TO_ADDR
75333: GO 75564
75335: LD_INT 23
75337: DOUBLE
75338: EQUAL
75339: IFTRUE 75343
75341: GO 75354
75343: POP
// bc_type := b_ext_laser ; 24 :
75344: LD_ADDR_OWVAR 42
75348: PUSH
75349: LD_INT 25
75351: ST_TO_ADDR
75352: GO 75564
75354: LD_INT 24
75356: DOUBLE
75357: EQUAL
75358: IFTRUE 75362
75360: GO 75373
75362: POP
// bc_type := b_control_tower ; 25 :
75363: LD_ADDR_OWVAR 42
75367: PUSH
75368: LD_INT 36
75370: ST_TO_ADDR
75371: GO 75564
75373: LD_INT 25
75375: DOUBLE
75376: EQUAL
75377: IFTRUE 75381
75379: GO 75392
75381: POP
// bc_type := b_breastwork ; 26 :
75382: LD_ADDR_OWVAR 42
75386: PUSH
75387: LD_INT 31
75389: ST_TO_ADDR
75390: GO 75564
75392: LD_INT 26
75394: DOUBLE
75395: EQUAL
75396: IFTRUE 75400
75398: GO 75411
75400: POP
// bc_type := b_bunker ; 27 :
75401: LD_ADDR_OWVAR 42
75405: PUSH
75406: LD_INT 32
75408: ST_TO_ADDR
75409: GO 75564
75411: LD_INT 27
75413: DOUBLE
75414: EQUAL
75415: IFTRUE 75419
75417: GO 75430
75419: POP
// bc_type := b_turret ; 28 :
75420: LD_ADDR_OWVAR 42
75424: PUSH
75425: LD_INT 33
75427: ST_TO_ADDR
75428: GO 75564
75430: LD_INT 28
75432: DOUBLE
75433: EQUAL
75434: IFTRUE 75438
75436: GO 75449
75438: POP
// bc_type := b_armoury ; 29 :
75439: LD_ADDR_OWVAR 42
75443: PUSH
75444: LD_INT 4
75446: ST_TO_ADDR
75447: GO 75564
75449: LD_INT 29
75451: DOUBLE
75452: EQUAL
75453: IFTRUE 75457
75455: GO 75468
75457: POP
// bc_type := b_barracks ; 30 :
75458: LD_ADDR_OWVAR 42
75462: PUSH
75463: LD_INT 5
75465: ST_TO_ADDR
75466: GO 75564
75468: LD_INT 30
75470: DOUBLE
75471: EQUAL
75472: IFTRUE 75476
75474: GO 75487
75476: POP
// bc_type := b_solar_power ; 31 :
75477: LD_ADDR_OWVAR 42
75481: PUSH
75482: LD_INT 27
75484: ST_TO_ADDR
75485: GO 75564
75487: LD_INT 31
75489: DOUBLE
75490: EQUAL
75491: IFTRUE 75495
75493: GO 75506
75495: POP
// bc_type := b_oil_power ; 32 :
75496: LD_ADDR_OWVAR 42
75500: PUSH
75501: LD_INT 26
75503: ST_TO_ADDR
75504: GO 75564
75506: LD_INT 32
75508: DOUBLE
75509: EQUAL
75510: IFTRUE 75514
75512: GO 75525
75514: POP
// bc_type := b_siberite_power ; 33 :
75515: LD_ADDR_OWVAR 42
75519: PUSH
75520: LD_INT 28
75522: ST_TO_ADDR
75523: GO 75564
75525: LD_INT 33
75527: DOUBLE
75528: EQUAL
75529: IFTRUE 75533
75531: GO 75544
75533: POP
// bc_type := b_oil_mine ; 34 :
75534: LD_ADDR_OWVAR 42
75538: PUSH
75539: LD_INT 29
75541: ST_TO_ADDR
75542: GO 75564
75544: LD_INT 34
75546: DOUBLE
75547: EQUAL
75548: IFTRUE 75552
75550: GO 75563
75552: POP
// bc_type := b_siberite_mine ; end ;
75553: LD_ADDR_OWVAR 42
75557: PUSH
75558: LD_INT 30
75560: ST_TO_ADDR
75561: GO 75564
75563: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
75564: LD_ADDR_VAR 0 8
75568: PUSH
75569: LD_VAR 0 5
75573: PPUSH
75574: LD_VAR 0 6
75578: PPUSH
75579: LD_VAR 0 3
75583: PPUSH
75584: CALL_OW 47
75588: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
75589: LD_OWVAR 42
75593: PUSH
75594: LD_INT 32
75596: PUSH
75597: LD_INT 33
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: IN
75604: IFFALSE 75620
// PlaceWeaponTurret ( b , weapon ) ;
75606: LD_VAR 0 8
75610: PPUSH
75611: LD_VAR 0 4
75615: PPUSH
75616: CALL_OW 431
// end ;
75620: LD_VAR 0 7
75624: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75625: LD_INT 0
75627: PPUSH
75628: PPUSH
75629: PPUSH
75630: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75631: LD_ADDR_VAR 0 4
75635: PUSH
75636: LD_INT 22
75638: PUSH
75639: LD_OWVAR 2
75643: PUSH
75644: EMPTY
75645: LIST
75646: LIST
75647: PUSH
75648: LD_INT 2
75650: PUSH
75651: LD_INT 30
75653: PUSH
75654: LD_INT 0
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: PUSH
75661: LD_INT 30
75663: PUSH
75664: LD_INT 1
75666: PUSH
75667: EMPTY
75668: LIST
75669: LIST
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: LIST
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: PPUSH
75680: CALL_OW 69
75684: ST_TO_ADDR
// if not tmp then
75685: LD_VAR 0 4
75689: NOT
75690: IFFALSE 75694
// exit ;
75692: GO 75753
// for i in tmp do
75694: LD_ADDR_VAR 0 2
75698: PUSH
75699: LD_VAR 0 4
75703: PUSH
75704: FOR_IN
75705: IFFALSE 75751
// for j = 1 to 3 do
75707: LD_ADDR_VAR 0 3
75711: PUSH
75712: DOUBLE
75713: LD_INT 1
75715: DEC
75716: ST_TO_ADDR
75717: LD_INT 3
75719: PUSH
75720: FOR_TO
75721: IFFALSE 75747
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75723: LD_VAR 0 2
75727: PPUSH
75728: CALL_OW 274
75732: PPUSH
75733: LD_VAR 0 3
75737: PPUSH
75738: LD_INT 99999
75740: PPUSH
75741: CALL_OW 277
75745: GO 75720
75747: POP
75748: POP
75749: GO 75704
75751: POP
75752: POP
// end ;
75753: LD_VAR 0 1
75757: RET
// export function hHackSetLevel10 ; var i , j ; begin
75758: LD_INT 0
75760: PPUSH
75761: PPUSH
75762: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75763: LD_ADDR_VAR 0 2
75767: PUSH
75768: LD_INT 21
75770: PUSH
75771: LD_INT 1
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: PPUSH
75778: CALL_OW 69
75782: PUSH
75783: FOR_IN
75784: IFFALSE 75836
// if IsSelected ( i ) then
75786: LD_VAR 0 2
75790: PPUSH
75791: CALL_OW 306
75795: IFFALSE 75834
// begin for j := 1 to 4 do
75797: LD_ADDR_VAR 0 3
75801: PUSH
75802: DOUBLE
75803: LD_INT 1
75805: DEC
75806: ST_TO_ADDR
75807: LD_INT 4
75809: PUSH
75810: FOR_TO
75811: IFFALSE 75832
// SetSkill ( i , j , 10 ) ;
75813: LD_VAR 0 2
75817: PPUSH
75818: LD_VAR 0 3
75822: PPUSH
75823: LD_INT 10
75825: PPUSH
75826: CALL_OW 237
75830: GO 75810
75832: POP
75833: POP
// end ;
75834: GO 75783
75836: POP
75837: POP
// end ;
75838: LD_VAR 0 1
75842: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75843: LD_INT 0
75845: PPUSH
75846: PPUSH
75847: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75848: LD_ADDR_VAR 0 2
75852: PUSH
75853: LD_INT 22
75855: PUSH
75856: LD_OWVAR 2
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: PUSH
75865: LD_INT 21
75867: PUSH
75868: LD_INT 1
75870: PUSH
75871: EMPTY
75872: LIST
75873: LIST
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: PPUSH
75879: CALL_OW 69
75883: PUSH
75884: FOR_IN
75885: IFFALSE 75926
// begin for j := 1 to 4 do
75887: LD_ADDR_VAR 0 3
75891: PUSH
75892: DOUBLE
75893: LD_INT 1
75895: DEC
75896: ST_TO_ADDR
75897: LD_INT 4
75899: PUSH
75900: FOR_TO
75901: IFFALSE 75922
// SetSkill ( i , j , 10 ) ;
75903: LD_VAR 0 2
75907: PPUSH
75908: LD_VAR 0 3
75912: PPUSH
75913: LD_INT 10
75915: PPUSH
75916: CALL_OW 237
75920: GO 75900
75922: POP
75923: POP
// end ;
75924: GO 75884
75926: POP
75927: POP
// end ;
75928: LD_VAR 0 1
75932: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75933: LD_INT 0
75935: PPUSH
// uc_side := your_side ;
75936: LD_ADDR_OWVAR 20
75940: PUSH
75941: LD_OWVAR 2
75945: ST_TO_ADDR
// uc_nation := nation ;
75946: LD_ADDR_OWVAR 21
75950: PUSH
75951: LD_VAR 0 1
75955: ST_TO_ADDR
// InitHc ;
75956: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75960: LD_INT 0
75962: PPUSH
75963: LD_VAR 0 2
75967: PPUSH
75968: LD_VAR 0 3
75972: PPUSH
75973: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75977: LD_VAR 0 4
75981: PPUSH
75982: LD_VAR 0 5
75986: PPUSH
75987: CALL_OW 428
75991: PUSH
75992: LD_INT 0
75994: EQUAL
75995: IFFALSE 76019
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75997: CALL_OW 44
76001: PPUSH
76002: LD_VAR 0 4
76006: PPUSH
76007: LD_VAR 0 5
76011: PPUSH
76012: LD_INT 1
76014: PPUSH
76015: CALL_OW 48
// end ;
76019: LD_VAR 0 6
76023: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
76024: LD_INT 0
76026: PPUSH
76027: PPUSH
// uc_side := your_side ;
76028: LD_ADDR_OWVAR 20
76032: PUSH
76033: LD_OWVAR 2
76037: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
76038: LD_VAR 0 1
76042: PUSH
76043: LD_INT 1
76045: PUSH
76046: LD_INT 2
76048: PUSH
76049: LD_INT 3
76051: PUSH
76052: LD_INT 4
76054: PUSH
76055: LD_INT 5
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: IN
76065: IFFALSE 76077
// uc_nation := nation_american else
76067: LD_ADDR_OWVAR 21
76071: PUSH
76072: LD_INT 1
76074: ST_TO_ADDR
76075: GO 76120
// if chassis in [ 11 , 12 , 13 , 14 ] then
76077: LD_VAR 0 1
76081: PUSH
76082: LD_INT 11
76084: PUSH
76085: LD_INT 12
76087: PUSH
76088: LD_INT 13
76090: PUSH
76091: LD_INT 14
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: IN
76100: IFFALSE 76112
// uc_nation := nation_arabian else
76102: LD_ADDR_OWVAR 21
76106: PUSH
76107: LD_INT 2
76109: ST_TO_ADDR
76110: GO 76120
// uc_nation := nation_russian ;
76112: LD_ADDR_OWVAR 21
76116: PUSH
76117: LD_INT 3
76119: ST_TO_ADDR
// vc_chassis := chassis ;
76120: LD_ADDR_OWVAR 37
76124: PUSH
76125: LD_VAR 0 1
76129: ST_TO_ADDR
// vc_engine := engine ;
76130: LD_ADDR_OWVAR 39
76134: PUSH
76135: LD_VAR 0 2
76139: ST_TO_ADDR
// vc_control := control ;
76140: LD_ADDR_OWVAR 38
76144: PUSH
76145: LD_VAR 0 3
76149: ST_TO_ADDR
// vc_weapon := weapon ;
76150: LD_ADDR_OWVAR 40
76154: PUSH
76155: LD_VAR 0 4
76159: ST_TO_ADDR
// un := CreateVehicle ;
76160: LD_ADDR_VAR 0 8
76164: PUSH
76165: CALL_OW 45
76169: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
76170: LD_VAR 0 8
76174: PPUSH
76175: LD_INT 0
76177: PPUSH
76178: LD_INT 5
76180: PPUSH
76181: CALL_OW 12
76185: PPUSH
76186: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
76190: LD_VAR 0 8
76194: PPUSH
76195: LD_VAR 0 5
76199: PPUSH
76200: LD_VAR 0 6
76204: PPUSH
76205: LD_INT 1
76207: PPUSH
76208: CALL_OW 48
// end ;
76212: LD_VAR 0 7
76216: RET
// export hInvincible ; every 1 do
76217: GO 76219
76219: DISABLE
// hInvincible := [ ] ;
76220: LD_ADDR_EXP 131
76224: PUSH
76225: EMPTY
76226: ST_TO_ADDR
76227: END
// every 10 do var i ;
76228: GO 76230
76230: DISABLE
76231: LD_INT 0
76233: PPUSH
// begin enable ;
76234: ENABLE
// if not hInvincible then
76235: LD_EXP 131
76239: NOT
76240: IFFALSE 76244
// exit ;
76242: GO 76288
// for i in hInvincible do
76244: LD_ADDR_VAR 0 1
76248: PUSH
76249: LD_EXP 131
76253: PUSH
76254: FOR_IN
76255: IFFALSE 76286
// if GetLives ( i ) < 1000 then
76257: LD_VAR 0 1
76261: PPUSH
76262: CALL_OW 256
76266: PUSH
76267: LD_INT 1000
76269: LESS
76270: IFFALSE 76284
// SetLives ( i , 1000 ) ;
76272: LD_VAR 0 1
76276: PPUSH
76277: LD_INT 1000
76279: PPUSH
76280: CALL_OW 234
76284: GO 76254
76286: POP
76287: POP
// end ;
76288: PPOPN 1
76290: END
// export function hHackInvincible ; var i ; begin
76291: LD_INT 0
76293: PPUSH
76294: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
76295: LD_ADDR_VAR 0 2
76299: PUSH
76300: LD_INT 2
76302: PUSH
76303: LD_INT 21
76305: PUSH
76306: LD_INT 1
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: LD_INT 21
76315: PUSH
76316: LD_INT 2
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: LIST
76327: PPUSH
76328: CALL_OW 69
76332: PUSH
76333: FOR_IN
76334: IFFALSE 76395
// if IsSelected ( i ) then
76336: LD_VAR 0 2
76340: PPUSH
76341: CALL_OW 306
76345: IFFALSE 76393
// begin if i in hInvincible then
76347: LD_VAR 0 2
76351: PUSH
76352: LD_EXP 131
76356: IN
76357: IFFALSE 76377
// hInvincible := hInvincible diff i else
76359: LD_ADDR_EXP 131
76363: PUSH
76364: LD_EXP 131
76368: PUSH
76369: LD_VAR 0 2
76373: DIFF
76374: ST_TO_ADDR
76375: GO 76393
// hInvincible := hInvincible union i ;
76377: LD_ADDR_EXP 131
76381: PUSH
76382: LD_EXP 131
76386: PUSH
76387: LD_VAR 0 2
76391: UNION
76392: ST_TO_ADDR
// end ;
76393: GO 76333
76395: POP
76396: POP
// end ;
76397: LD_VAR 0 1
76401: RET
// export function hHackInvisible ; var i , j ; begin
76402: LD_INT 0
76404: PPUSH
76405: PPUSH
76406: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76407: LD_ADDR_VAR 0 2
76411: PUSH
76412: LD_INT 21
76414: PUSH
76415: LD_INT 1
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: PPUSH
76422: CALL_OW 69
76426: PUSH
76427: FOR_IN
76428: IFFALSE 76452
// if IsSelected ( i ) then
76430: LD_VAR 0 2
76434: PPUSH
76435: CALL_OW 306
76439: IFFALSE 76450
// ComForceInvisible ( i ) ;
76441: LD_VAR 0 2
76445: PPUSH
76446: CALL_OW 496
76450: GO 76427
76452: POP
76453: POP
// end ;
76454: LD_VAR 0 1
76458: RET
// export function hHackChangeYourSide ; begin
76459: LD_INT 0
76461: PPUSH
// if your_side = 8 then
76462: LD_OWVAR 2
76466: PUSH
76467: LD_INT 8
76469: EQUAL
76470: IFFALSE 76482
// your_side := 0 else
76472: LD_ADDR_OWVAR 2
76476: PUSH
76477: LD_INT 0
76479: ST_TO_ADDR
76480: GO 76496
// your_side := your_side + 1 ;
76482: LD_ADDR_OWVAR 2
76486: PUSH
76487: LD_OWVAR 2
76491: PUSH
76492: LD_INT 1
76494: PLUS
76495: ST_TO_ADDR
// end ;
76496: LD_VAR 0 1
76500: RET
// export function hHackChangeUnitSide ; var i , j ; begin
76501: LD_INT 0
76503: PPUSH
76504: PPUSH
76505: PPUSH
// for i in all_units do
76506: LD_ADDR_VAR 0 2
76510: PUSH
76511: LD_OWVAR 3
76515: PUSH
76516: FOR_IN
76517: IFFALSE 76595
// if IsSelected ( i ) then
76519: LD_VAR 0 2
76523: PPUSH
76524: CALL_OW 306
76528: IFFALSE 76593
// begin j := GetSide ( i ) ;
76530: LD_ADDR_VAR 0 3
76534: PUSH
76535: LD_VAR 0 2
76539: PPUSH
76540: CALL_OW 255
76544: ST_TO_ADDR
// if j = 8 then
76545: LD_VAR 0 3
76549: PUSH
76550: LD_INT 8
76552: EQUAL
76553: IFFALSE 76565
// j := 0 else
76555: LD_ADDR_VAR 0 3
76559: PUSH
76560: LD_INT 0
76562: ST_TO_ADDR
76563: GO 76579
// j := j + 1 ;
76565: LD_ADDR_VAR 0 3
76569: PUSH
76570: LD_VAR 0 3
76574: PUSH
76575: LD_INT 1
76577: PLUS
76578: ST_TO_ADDR
// SetSide ( i , j ) ;
76579: LD_VAR 0 2
76583: PPUSH
76584: LD_VAR 0 3
76588: PPUSH
76589: CALL_OW 235
// end ;
76593: GO 76516
76595: POP
76596: POP
// end ;
76597: LD_VAR 0 1
76601: RET
// export function hHackFog ; begin
76602: LD_INT 0
76604: PPUSH
// FogOff ( true ) ;
76605: LD_INT 1
76607: PPUSH
76608: CALL_OW 344
// end ;
76612: LD_VAR 0 1
76616: RET
// export function hHackTeleport ( unit , x , y ) ; begin
76617: LD_INT 0
76619: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
76620: LD_VAR 0 1
76624: PPUSH
76625: LD_VAR 0 2
76629: PPUSH
76630: LD_VAR 0 3
76634: PPUSH
76635: LD_INT 1
76637: PPUSH
76638: LD_INT 1
76640: PPUSH
76641: CALL_OW 483
// CenterOnXY ( x , y ) ;
76645: LD_VAR 0 2
76649: PPUSH
76650: LD_VAR 0 3
76654: PPUSH
76655: CALL_OW 84
// end ; end_of_file
76659: LD_VAR 0 4
76663: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76664: LD_VAR 0 1
76668: PUSH
76669: LD_INT 200
76671: DOUBLE
76672: GREATEREQUAL
76673: IFFALSE 76681
76675: LD_INT 299
76677: DOUBLE
76678: LESSEQUAL
76679: IFTRUE 76683
76681: GO 76715
76683: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76684: LD_VAR 0 1
76688: PPUSH
76689: LD_VAR 0 2
76693: PPUSH
76694: LD_VAR 0 3
76698: PPUSH
76699: LD_VAR 0 4
76703: PPUSH
76704: LD_VAR 0 5
76708: PPUSH
76709: CALL 76959 0 5
76713: GO 76792
76715: LD_INT 300
76717: DOUBLE
76718: GREATEREQUAL
76719: IFFALSE 76727
76721: LD_INT 399
76723: DOUBLE
76724: LESSEQUAL
76725: IFTRUE 76729
76727: GO 76791
76729: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76730: LD_VAR 0 1
76734: PPUSH
76735: LD_VAR 0 2
76739: PPUSH
76740: LD_VAR 0 3
76744: PPUSH
76745: LD_VAR 0 4
76749: PPUSH
76750: LD_VAR 0 5
76754: PPUSH
76755: LD_VAR 0 6
76759: PPUSH
76760: LD_VAR 0 7
76764: PPUSH
76765: LD_VAR 0 8
76769: PPUSH
76770: LD_VAR 0 9
76774: PPUSH
76775: LD_VAR 0 10
76779: PPUSH
76780: LD_VAR 0 11
76784: PPUSH
76785: CALL 74684 0 11
76789: GO 76792
76791: POP
// end ;
76792: PPOPN 11
76794: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76795: LD_VAR 0 1
76799: PPUSH
76800: LD_VAR 0 2
76804: PPUSH
76805: LD_VAR 0 3
76809: PPUSH
76810: LD_VAR 0 4
76814: PPUSH
76815: LD_VAR 0 5
76819: PPUSH
76820: CALL 76941 0 5
// end ; end_of_file
76824: PPOPN 5
76826: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
76827: LD_INT 0
76829: PPUSH
76830: PPUSH
76831: PPUSH
76832: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
76833: LD_VAR 0 1
76837: PPUSH
76838: CALL_OW 264
76842: PUSH
76843: LD_EXP 62
76847: EQUAL
76848: IFFALSE 76920
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
76850: LD_INT 68
76852: PPUSH
76853: LD_VAR 0 1
76857: PPUSH
76858: CALL_OW 255
76862: PPUSH
76863: CALL_OW 321
76867: PUSH
76868: LD_INT 2
76870: EQUAL
76871: IFFALSE 76883
// eff := 70 else
76873: LD_ADDR_VAR 0 4
76877: PUSH
76878: LD_INT 70
76880: ST_TO_ADDR
76881: GO 76891
// eff := 30 ;
76883: LD_ADDR_VAR 0 4
76887: PUSH
76888: LD_INT 30
76890: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
76891: LD_VAR 0 1
76895: PPUSH
76896: CALL_OW 250
76900: PPUSH
76901: LD_VAR 0 1
76905: PPUSH
76906: CALL_OW 251
76910: PPUSH
76911: LD_VAR 0 4
76915: PPUSH
76916: CALL_OW 495
// end ; end ;
76920: LD_VAR 0 2
76924: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
76925: LD_INT 0
76927: PPUSH
// end ;
76928: LD_VAR 0 4
76932: RET
// export function SOS_Command ( cmd ) ; begin
76933: LD_INT 0
76935: PPUSH
// end ;
76936: LD_VAR 0 2
76940: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
76941: LD_INT 0
76943: PPUSH
// if cmd = 121 then
76944: LD_VAR 0 1
76948: PUSH
76949: LD_INT 121
76951: EQUAL
76952: IFFALSE 76954
// end ;
76954: LD_VAR 0 6
76958: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
76959: LD_INT 0
76961: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
76962: LD_VAR 0 1
76966: PUSH
76967: LD_INT 250
76969: EQUAL
76970: PUSH
76971: LD_VAR 0 2
76975: PPUSH
76976: CALL_OW 264
76980: PUSH
76981: LD_EXP 65
76985: EQUAL
76986: AND
76987: IFFALSE 77008
// MinerPlaceMine ( unit , x , y ) ;
76989: LD_VAR 0 2
76993: PPUSH
76994: LD_VAR 0 4
76998: PPUSH
76999: LD_VAR 0 5
77003: PPUSH
77004: CALL 79357 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
77008: LD_VAR 0 1
77012: PUSH
77013: LD_INT 251
77015: EQUAL
77016: PUSH
77017: LD_VAR 0 2
77021: PPUSH
77022: CALL_OW 264
77026: PUSH
77027: LD_EXP 65
77031: EQUAL
77032: AND
77033: IFFALSE 77054
// MinerDetonateMine ( unit , x , y ) ;
77035: LD_VAR 0 2
77039: PPUSH
77040: LD_VAR 0 4
77044: PPUSH
77045: LD_VAR 0 5
77049: PPUSH
77050: CALL 79634 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
77054: LD_VAR 0 1
77058: PUSH
77059: LD_INT 252
77061: EQUAL
77062: PUSH
77063: LD_VAR 0 2
77067: PPUSH
77068: CALL_OW 264
77072: PUSH
77073: LD_EXP 65
77077: EQUAL
77078: AND
77079: IFFALSE 77100
// MinerCreateMinefield ( unit , x , y ) ;
77081: LD_VAR 0 2
77085: PPUSH
77086: LD_VAR 0 4
77090: PPUSH
77091: LD_VAR 0 5
77095: PPUSH
77096: CALL 80051 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
77100: LD_VAR 0 1
77104: PUSH
77105: LD_INT 253
77107: EQUAL
77108: PUSH
77109: LD_VAR 0 2
77113: PPUSH
77114: CALL_OW 257
77118: PUSH
77119: LD_INT 5
77121: EQUAL
77122: AND
77123: IFFALSE 77144
// ComBinocular ( unit , x , y ) ;
77125: LD_VAR 0 2
77129: PPUSH
77130: LD_VAR 0 4
77134: PPUSH
77135: LD_VAR 0 5
77139: PPUSH
77140: CALL 80422 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
77144: LD_VAR 0 1
77148: PUSH
77149: LD_INT 254
77151: EQUAL
77152: PUSH
77153: LD_VAR 0 2
77157: PPUSH
77158: CALL_OW 264
77162: PUSH
77163: LD_EXP 60
77167: EQUAL
77168: AND
77169: PUSH
77170: LD_VAR 0 3
77174: PPUSH
77175: CALL_OW 263
77179: PUSH
77180: LD_INT 3
77182: EQUAL
77183: AND
77184: IFFALSE 77200
// HackDestroyVehicle ( unit , selectedUnit ) ;
77186: LD_VAR 0 2
77190: PPUSH
77191: LD_VAR 0 3
77195: PPUSH
77196: CALL 78717 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
77200: LD_VAR 0 1
77204: PUSH
77205: LD_INT 255
77207: EQUAL
77208: PUSH
77209: LD_VAR 0 2
77213: PPUSH
77214: CALL_OW 264
77218: PUSH
77219: LD_INT 14
77221: PUSH
77222: LD_INT 53
77224: PUSH
77225: EMPTY
77226: LIST
77227: LIST
77228: IN
77229: AND
77230: PUSH
77231: LD_VAR 0 4
77235: PPUSH
77236: LD_VAR 0 5
77240: PPUSH
77241: CALL_OW 488
77245: AND
77246: IFFALSE 77270
// CutTreeXYR ( unit , x , y , 12 ) ;
77248: LD_VAR 0 2
77252: PPUSH
77253: LD_VAR 0 4
77257: PPUSH
77258: LD_VAR 0 5
77262: PPUSH
77263: LD_INT 12
77265: PPUSH
77266: CALL 77283 0 4
// end ;
77270: LD_VAR 0 6
77274: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
77275: LD_INT 0
77277: PPUSH
// end ;
77278: LD_VAR 0 4
77282: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77283: LD_INT 0
77285: PPUSH
77286: PPUSH
77287: PPUSH
77288: PPUSH
77289: PPUSH
77290: PPUSH
77291: PPUSH
77292: PPUSH
77293: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
77294: LD_VAR 0 1
77298: NOT
77299: PUSH
77300: LD_VAR 0 2
77304: PPUSH
77305: LD_VAR 0 3
77309: PPUSH
77310: CALL_OW 488
77314: NOT
77315: OR
77316: PUSH
77317: LD_VAR 0 4
77321: NOT
77322: OR
77323: IFFALSE 77327
// exit ;
77325: GO 77667
// list := [ ] ;
77327: LD_ADDR_VAR 0 13
77331: PUSH
77332: EMPTY
77333: ST_TO_ADDR
// if x - r < 0 then
77334: LD_VAR 0 2
77338: PUSH
77339: LD_VAR 0 4
77343: MINUS
77344: PUSH
77345: LD_INT 0
77347: LESS
77348: IFFALSE 77360
// min_x := 0 else
77350: LD_ADDR_VAR 0 7
77354: PUSH
77355: LD_INT 0
77357: ST_TO_ADDR
77358: GO 77376
// min_x := x - r ;
77360: LD_ADDR_VAR 0 7
77364: PUSH
77365: LD_VAR 0 2
77369: PUSH
77370: LD_VAR 0 4
77374: MINUS
77375: ST_TO_ADDR
// if y - r < 0 then
77376: LD_VAR 0 3
77380: PUSH
77381: LD_VAR 0 4
77385: MINUS
77386: PUSH
77387: LD_INT 0
77389: LESS
77390: IFFALSE 77402
// min_y := 0 else
77392: LD_ADDR_VAR 0 8
77396: PUSH
77397: LD_INT 0
77399: ST_TO_ADDR
77400: GO 77418
// min_y := y - r ;
77402: LD_ADDR_VAR 0 8
77406: PUSH
77407: LD_VAR 0 3
77411: PUSH
77412: LD_VAR 0 4
77416: MINUS
77417: ST_TO_ADDR
// max_x := x + r ;
77418: LD_ADDR_VAR 0 9
77422: PUSH
77423: LD_VAR 0 2
77427: PUSH
77428: LD_VAR 0 4
77432: PLUS
77433: ST_TO_ADDR
// max_y := y + r ;
77434: LD_ADDR_VAR 0 10
77438: PUSH
77439: LD_VAR 0 3
77443: PUSH
77444: LD_VAR 0 4
77448: PLUS
77449: ST_TO_ADDR
// for _x = min_x to max_x do
77450: LD_ADDR_VAR 0 11
77454: PUSH
77455: DOUBLE
77456: LD_VAR 0 7
77460: DEC
77461: ST_TO_ADDR
77462: LD_VAR 0 9
77466: PUSH
77467: FOR_TO
77468: IFFALSE 77585
// for _y = min_y to max_y do
77470: LD_ADDR_VAR 0 12
77474: PUSH
77475: DOUBLE
77476: LD_VAR 0 8
77480: DEC
77481: ST_TO_ADDR
77482: LD_VAR 0 10
77486: PUSH
77487: FOR_TO
77488: IFFALSE 77581
// begin if not ValidHex ( _x , _y ) then
77490: LD_VAR 0 11
77494: PPUSH
77495: LD_VAR 0 12
77499: PPUSH
77500: CALL_OW 488
77504: NOT
77505: IFFALSE 77509
// continue ;
77507: GO 77487
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77509: LD_VAR 0 11
77513: PPUSH
77514: LD_VAR 0 12
77518: PPUSH
77519: CALL_OW 351
77523: PUSH
77524: LD_VAR 0 11
77528: PPUSH
77529: LD_VAR 0 12
77533: PPUSH
77534: CALL_OW 554
77538: AND
77539: IFFALSE 77579
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77541: LD_ADDR_VAR 0 13
77545: PUSH
77546: LD_VAR 0 13
77550: PPUSH
77551: LD_VAR 0 13
77555: PUSH
77556: LD_INT 1
77558: PLUS
77559: PPUSH
77560: LD_VAR 0 11
77564: PUSH
77565: LD_VAR 0 12
77569: PUSH
77570: EMPTY
77571: LIST
77572: LIST
77573: PPUSH
77574: CALL_OW 2
77578: ST_TO_ADDR
// end ;
77579: GO 77487
77581: POP
77582: POP
77583: GO 77467
77585: POP
77586: POP
// if not list then
77587: LD_VAR 0 13
77591: NOT
77592: IFFALSE 77596
// exit ;
77594: GO 77667
// for i in list do
77596: LD_ADDR_VAR 0 6
77600: PUSH
77601: LD_VAR 0 13
77605: PUSH
77606: FOR_IN
77607: IFFALSE 77665
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
77609: LD_VAR 0 1
77613: PPUSH
77614: LD_STRING M
77616: PUSH
77617: LD_VAR 0 6
77621: PUSH
77622: LD_INT 1
77624: ARRAY
77625: PUSH
77626: LD_VAR 0 6
77630: PUSH
77631: LD_INT 2
77633: ARRAY
77634: PUSH
77635: LD_INT 0
77637: PUSH
77638: LD_INT 0
77640: PUSH
77641: LD_INT 0
77643: PUSH
77644: LD_INT 0
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: LIST
77651: LIST
77652: LIST
77653: LIST
77654: LIST
77655: PUSH
77656: EMPTY
77657: LIST
77658: PPUSH
77659: CALL_OW 447
77663: GO 77606
77665: POP
77666: POP
// end ;
77667: LD_VAR 0 5
77671: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
77672: LD_EXP 134
77676: NOT
77677: IFFALSE 77727
77679: GO 77681
77681: DISABLE
// begin initHack := true ;
77682: LD_ADDR_EXP 134
77686: PUSH
77687: LD_INT 1
77689: ST_TO_ADDR
// hackTanks := [ ] ;
77690: LD_ADDR_EXP 135
77694: PUSH
77695: EMPTY
77696: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
77697: LD_ADDR_EXP 136
77701: PUSH
77702: EMPTY
77703: ST_TO_ADDR
// hackLimit := 3 ;
77704: LD_ADDR_EXP 137
77708: PUSH
77709: LD_INT 3
77711: ST_TO_ADDR
// hackDist := 12 ;
77712: LD_ADDR_EXP 138
77716: PUSH
77717: LD_INT 12
77719: ST_TO_ADDR
// hackCounter := [ ] ;
77720: LD_ADDR_EXP 139
77724: PUSH
77725: EMPTY
77726: ST_TO_ADDR
// end ;
77727: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
77728: LD_EXP 134
77732: PUSH
77733: LD_INT 34
77735: PUSH
77736: LD_EXP 60
77740: PUSH
77741: EMPTY
77742: LIST
77743: LIST
77744: PPUSH
77745: CALL_OW 69
77749: AND
77750: IFFALSE 78005
77752: GO 77754
77754: DISABLE
77755: LD_INT 0
77757: PPUSH
77758: PPUSH
// begin enable ;
77759: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
77760: LD_ADDR_VAR 0 1
77764: PUSH
77765: LD_INT 34
77767: PUSH
77768: LD_EXP 60
77772: PUSH
77773: EMPTY
77774: LIST
77775: LIST
77776: PPUSH
77777: CALL_OW 69
77781: PUSH
77782: FOR_IN
77783: IFFALSE 78003
// begin if not i in hackTanks then
77785: LD_VAR 0 1
77789: PUSH
77790: LD_EXP 135
77794: IN
77795: NOT
77796: IFFALSE 77879
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
77798: LD_ADDR_EXP 135
77802: PUSH
77803: LD_EXP 135
77807: PPUSH
77808: LD_EXP 135
77812: PUSH
77813: LD_INT 1
77815: PLUS
77816: PPUSH
77817: LD_VAR 0 1
77821: PPUSH
77822: CALL_OW 1
77826: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
77827: LD_ADDR_EXP 136
77831: PUSH
77832: LD_EXP 136
77836: PPUSH
77837: LD_EXP 136
77841: PUSH
77842: LD_INT 1
77844: PLUS
77845: PPUSH
77846: EMPTY
77847: PPUSH
77848: CALL_OW 1
77852: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
77853: LD_ADDR_EXP 139
77857: PUSH
77858: LD_EXP 139
77862: PPUSH
77863: LD_EXP 139
77867: PUSH
77868: LD_INT 1
77870: PLUS
77871: PPUSH
77872: EMPTY
77873: PPUSH
77874: CALL_OW 1
77878: ST_TO_ADDR
// end ; if not IsOk ( i ) then
77879: LD_VAR 0 1
77883: PPUSH
77884: CALL_OW 302
77888: NOT
77889: IFFALSE 77902
// begin HackUnlinkAll ( i ) ;
77891: LD_VAR 0 1
77895: PPUSH
77896: CALL 78008 0 1
// continue ;
77900: GO 77782
// end ; HackCheckCapturedStatus ( i ) ;
77902: LD_VAR 0 1
77906: PPUSH
77907: CALL 78451 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
77911: LD_ADDR_VAR 0 2
77915: PUSH
77916: LD_INT 81
77918: PUSH
77919: LD_VAR 0 1
77923: PPUSH
77924: CALL_OW 255
77928: PUSH
77929: EMPTY
77930: LIST
77931: LIST
77932: PUSH
77933: LD_INT 33
77935: PUSH
77936: LD_INT 3
77938: PUSH
77939: EMPTY
77940: LIST
77941: LIST
77942: PUSH
77943: LD_INT 91
77945: PUSH
77946: LD_VAR 0 1
77950: PUSH
77951: LD_EXP 138
77955: PUSH
77956: EMPTY
77957: LIST
77958: LIST
77959: LIST
77960: PUSH
77961: LD_INT 50
77963: PUSH
77964: EMPTY
77965: LIST
77966: PUSH
77967: EMPTY
77968: LIST
77969: LIST
77970: LIST
77971: LIST
77972: PPUSH
77973: CALL_OW 69
77977: ST_TO_ADDR
// if not tmp then
77978: LD_VAR 0 2
77982: NOT
77983: IFFALSE 77987
// continue ;
77985: GO 77782
// HackLink ( i , tmp ) ;
77987: LD_VAR 0 1
77991: PPUSH
77992: LD_VAR 0 2
77996: PPUSH
77997: CALL 78144 0 2
// end ;
78001: GO 77782
78003: POP
78004: POP
// end ;
78005: PPOPN 2
78007: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78008: LD_INT 0
78010: PPUSH
78011: PPUSH
78012: PPUSH
// if not hack in hackTanks then
78013: LD_VAR 0 1
78017: PUSH
78018: LD_EXP 135
78022: IN
78023: NOT
78024: IFFALSE 78028
// exit ;
78026: GO 78139
// index := GetElementIndex ( hackTanks , hack ) ;
78028: LD_ADDR_VAR 0 4
78032: PUSH
78033: LD_EXP 135
78037: PPUSH
78038: LD_VAR 0 1
78042: PPUSH
78043: CALL 29340 0 2
78047: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
78048: LD_EXP 136
78052: PUSH
78053: LD_VAR 0 4
78057: ARRAY
78058: IFFALSE 78139
// begin for i in hackTanksCaptured [ index ] do
78060: LD_ADDR_VAR 0 3
78064: PUSH
78065: LD_EXP 136
78069: PUSH
78070: LD_VAR 0 4
78074: ARRAY
78075: PUSH
78076: FOR_IN
78077: IFFALSE 78103
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
78079: LD_VAR 0 3
78083: PUSH
78084: LD_INT 1
78086: ARRAY
78087: PPUSH
78088: LD_VAR 0 3
78092: PUSH
78093: LD_INT 2
78095: ARRAY
78096: PPUSH
78097: CALL_OW 235
78101: GO 78076
78103: POP
78104: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78105: LD_ADDR_EXP 136
78109: PUSH
78110: LD_EXP 136
78114: PPUSH
78115: LD_VAR 0 4
78119: PPUSH
78120: EMPTY
78121: PPUSH
78122: CALL_OW 1
78126: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78127: LD_VAR 0 1
78131: PPUSH
78132: LD_INT 0
78134: PPUSH
78135: CALL_OW 505
// end ; end ;
78139: LD_VAR 0 2
78143: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78144: LD_INT 0
78146: PPUSH
78147: PPUSH
78148: PPUSH
// if not hack in hackTanks or not vehicles then
78149: LD_VAR 0 1
78153: PUSH
78154: LD_EXP 135
78158: IN
78159: NOT
78160: PUSH
78161: LD_VAR 0 2
78165: NOT
78166: OR
78167: IFFALSE 78171
// exit ;
78169: GO 78446
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78171: LD_ADDR_VAR 0 2
78175: PUSH
78176: LD_VAR 0 1
78180: PPUSH
78181: LD_VAR 0 2
78185: PPUSH
78186: LD_INT 1
78188: PPUSH
78189: LD_INT 1
78191: PPUSH
78192: CALL 29990 0 4
78196: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78197: LD_ADDR_VAR 0 5
78201: PUSH
78202: LD_EXP 135
78206: PPUSH
78207: LD_VAR 0 1
78211: PPUSH
78212: CALL 29340 0 2
78216: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78217: LD_EXP 136
78221: PUSH
78222: LD_VAR 0 5
78226: ARRAY
78227: PUSH
78228: LD_EXP 137
78232: LESS
78233: IFFALSE 78422
// begin for i := 1 to vehicles do
78235: LD_ADDR_VAR 0 4
78239: PUSH
78240: DOUBLE
78241: LD_INT 1
78243: DEC
78244: ST_TO_ADDR
78245: LD_VAR 0 2
78249: PUSH
78250: FOR_TO
78251: IFFALSE 78420
// begin if hackTanksCaptured [ index ] = hackLimit then
78253: LD_EXP 136
78257: PUSH
78258: LD_VAR 0 5
78262: ARRAY
78263: PUSH
78264: LD_EXP 137
78268: EQUAL
78269: IFFALSE 78273
// break ;
78271: GO 78420
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78273: LD_ADDR_EXP 139
78277: PUSH
78278: LD_EXP 139
78282: PPUSH
78283: LD_VAR 0 5
78287: PPUSH
78288: LD_EXP 139
78292: PUSH
78293: LD_VAR 0 5
78297: ARRAY
78298: PUSH
78299: LD_INT 1
78301: PLUS
78302: PPUSH
78303: CALL_OW 1
78307: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78308: LD_ADDR_EXP 136
78312: PUSH
78313: LD_EXP 136
78317: PPUSH
78318: LD_VAR 0 5
78322: PUSH
78323: LD_EXP 136
78327: PUSH
78328: LD_VAR 0 5
78332: ARRAY
78333: PUSH
78334: LD_INT 1
78336: PLUS
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: PPUSH
78342: LD_VAR 0 2
78346: PUSH
78347: LD_VAR 0 4
78351: ARRAY
78352: PUSH
78353: LD_VAR 0 2
78357: PUSH
78358: LD_VAR 0 4
78362: ARRAY
78363: PPUSH
78364: CALL_OW 255
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: PPUSH
78373: CALL 29555 0 3
78377: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78378: LD_VAR 0 2
78382: PUSH
78383: LD_VAR 0 4
78387: ARRAY
78388: PPUSH
78389: LD_VAR 0 1
78393: PPUSH
78394: CALL_OW 255
78398: PPUSH
78399: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78403: LD_VAR 0 2
78407: PUSH
78408: LD_VAR 0 4
78412: ARRAY
78413: PPUSH
78414: CALL_OW 141
// end ;
78418: GO 78250
78420: POP
78421: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78422: LD_VAR 0 1
78426: PPUSH
78427: LD_EXP 136
78431: PUSH
78432: LD_VAR 0 5
78436: ARRAY
78437: PUSH
78438: LD_INT 0
78440: PLUS
78441: PPUSH
78442: CALL_OW 505
// end ;
78446: LD_VAR 0 3
78450: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78451: LD_INT 0
78453: PPUSH
78454: PPUSH
78455: PPUSH
78456: PPUSH
// if not hack in hackTanks then
78457: LD_VAR 0 1
78461: PUSH
78462: LD_EXP 135
78466: IN
78467: NOT
78468: IFFALSE 78472
// exit ;
78470: GO 78712
// index := GetElementIndex ( hackTanks , hack ) ;
78472: LD_ADDR_VAR 0 4
78476: PUSH
78477: LD_EXP 135
78481: PPUSH
78482: LD_VAR 0 1
78486: PPUSH
78487: CALL 29340 0 2
78491: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78492: LD_ADDR_VAR 0 3
78496: PUSH
78497: DOUBLE
78498: LD_EXP 136
78502: PUSH
78503: LD_VAR 0 4
78507: ARRAY
78508: INC
78509: ST_TO_ADDR
78510: LD_INT 1
78512: PUSH
78513: FOR_DOWNTO
78514: IFFALSE 78686
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
78516: LD_ADDR_VAR 0 5
78520: PUSH
78521: LD_EXP 136
78525: PUSH
78526: LD_VAR 0 4
78530: ARRAY
78531: PUSH
78532: LD_VAR 0 3
78536: ARRAY
78537: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
78538: LD_VAR 0 5
78542: PUSH
78543: LD_INT 1
78545: ARRAY
78546: PPUSH
78547: CALL_OW 302
78551: NOT
78552: PUSH
78553: LD_VAR 0 5
78557: PUSH
78558: LD_INT 1
78560: ARRAY
78561: PPUSH
78562: CALL_OW 255
78566: PUSH
78567: LD_VAR 0 1
78571: PPUSH
78572: CALL_OW 255
78576: NONEQUAL
78577: OR
78578: IFFALSE 78684
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
78580: LD_VAR 0 5
78584: PUSH
78585: LD_INT 1
78587: ARRAY
78588: PPUSH
78589: CALL_OW 305
78593: PUSH
78594: LD_VAR 0 5
78598: PUSH
78599: LD_INT 1
78601: ARRAY
78602: PPUSH
78603: CALL_OW 255
78607: PUSH
78608: LD_VAR 0 1
78612: PPUSH
78613: CALL_OW 255
78617: EQUAL
78618: AND
78619: IFFALSE 78643
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
78621: LD_VAR 0 5
78625: PUSH
78626: LD_INT 1
78628: ARRAY
78629: PPUSH
78630: LD_VAR 0 5
78634: PUSH
78635: LD_INT 2
78637: ARRAY
78638: PPUSH
78639: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
78643: LD_ADDR_EXP 136
78647: PUSH
78648: LD_EXP 136
78652: PPUSH
78653: LD_VAR 0 4
78657: PPUSH
78658: LD_EXP 136
78662: PUSH
78663: LD_VAR 0 4
78667: ARRAY
78668: PPUSH
78669: LD_VAR 0 3
78673: PPUSH
78674: CALL_OW 3
78678: PPUSH
78679: CALL_OW 1
78683: ST_TO_ADDR
// end ; end ;
78684: GO 78513
78686: POP
78687: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78688: LD_VAR 0 1
78692: PPUSH
78693: LD_EXP 136
78697: PUSH
78698: LD_VAR 0 4
78702: ARRAY
78703: PUSH
78704: LD_INT 0
78706: PLUS
78707: PPUSH
78708: CALL_OW 505
// end ;
78712: LD_VAR 0 2
78716: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
78717: LD_INT 0
78719: PPUSH
78720: PPUSH
78721: PPUSH
78722: PPUSH
// if not hack in hackTanks then
78723: LD_VAR 0 1
78727: PUSH
78728: LD_EXP 135
78732: IN
78733: NOT
78734: IFFALSE 78738
// exit ;
78736: GO 78823
// index := GetElementIndex ( hackTanks , hack ) ;
78738: LD_ADDR_VAR 0 5
78742: PUSH
78743: LD_EXP 135
78747: PPUSH
78748: LD_VAR 0 1
78752: PPUSH
78753: CALL 29340 0 2
78757: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
78758: LD_ADDR_VAR 0 4
78762: PUSH
78763: DOUBLE
78764: LD_INT 1
78766: DEC
78767: ST_TO_ADDR
78768: LD_EXP 136
78772: PUSH
78773: LD_VAR 0 5
78777: ARRAY
78778: PUSH
78779: FOR_TO
78780: IFFALSE 78821
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
78782: LD_EXP 136
78786: PUSH
78787: LD_VAR 0 5
78791: ARRAY
78792: PUSH
78793: LD_VAR 0 4
78797: ARRAY
78798: PUSH
78799: LD_INT 1
78801: ARRAY
78802: PUSH
78803: LD_VAR 0 2
78807: EQUAL
78808: IFFALSE 78819
// KillUnit ( vehicle ) ;
78810: LD_VAR 0 2
78814: PPUSH
78815: CALL_OW 66
78819: GO 78779
78821: POP
78822: POP
// end ;
78823: LD_VAR 0 3
78827: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
78828: LD_EXP 140
78832: NOT
78833: IFFALSE 78868
78835: GO 78837
78837: DISABLE
// begin initMiner := true ;
78838: LD_ADDR_EXP 140
78842: PUSH
78843: LD_INT 1
78845: ST_TO_ADDR
// minersList := [ ] ;
78846: LD_ADDR_EXP 141
78850: PUSH
78851: EMPTY
78852: ST_TO_ADDR
// minerMinesList := [ ] ;
78853: LD_ADDR_EXP 142
78857: PUSH
78858: EMPTY
78859: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
78860: LD_ADDR_EXP 143
78864: PUSH
78865: LD_INT 5
78867: ST_TO_ADDR
// end ;
78868: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
78869: LD_EXP 140
78873: PUSH
78874: LD_INT 34
78876: PUSH
78877: LD_EXP 65
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: PPUSH
78886: CALL_OW 69
78890: AND
78891: IFFALSE 79354
78893: GO 78895
78895: DISABLE
78896: LD_INT 0
78898: PPUSH
78899: PPUSH
78900: PPUSH
78901: PPUSH
// begin enable ;
78902: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
78903: LD_ADDR_VAR 0 1
78907: PUSH
78908: LD_INT 34
78910: PUSH
78911: LD_EXP 65
78915: PUSH
78916: EMPTY
78917: LIST
78918: LIST
78919: PPUSH
78920: CALL_OW 69
78924: PUSH
78925: FOR_IN
78926: IFFALSE 78998
// begin if not i in minersList then
78928: LD_VAR 0 1
78932: PUSH
78933: LD_EXP 141
78937: IN
78938: NOT
78939: IFFALSE 78996
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
78941: LD_ADDR_EXP 141
78945: PUSH
78946: LD_EXP 141
78950: PPUSH
78951: LD_EXP 141
78955: PUSH
78956: LD_INT 1
78958: PLUS
78959: PPUSH
78960: LD_VAR 0 1
78964: PPUSH
78965: CALL_OW 1
78969: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
78970: LD_ADDR_EXP 142
78974: PUSH
78975: LD_EXP 142
78979: PPUSH
78980: LD_EXP 142
78984: PUSH
78985: LD_INT 1
78987: PLUS
78988: PPUSH
78989: EMPTY
78990: PPUSH
78991: CALL_OW 1
78995: ST_TO_ADDR
// end end ;
78996: GO 78925
78998: POP
78999: POP
// for i := minerMinesList downto 1 do
79000: LD_ADDR_VAR 0 1
79004: PUSH
79005: DOUBLE
79006: LD_EXP 142
79010: INC
79011: ST_TO_ADDR
79012: LD_INT 1
79014: PUSH
79015: FOR_DOWNTO
79016: IFFALSE 79352
// begin if IsLive ( minersList [ i ] ) then
79018: LD_EXP 141
79022: PUSH
79023: LD_VAR 0 1
79027: ARRAY
79028: PPUSH
79029: CALL_OW 300
79033: IFFALSE 79061
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
79035: LD_EXP 141
79039: PUSH
79040: LD_VAR 0 1
79044: ARRAY
79045: PPUSH
79046: LD_EXP 142
79050: PUSH
79051: LD_VAR 0 1
79055: ARRAY
79056: PPUSH
79057: CALL_OW 505
// if not minerMinesList [ i ] then
79061: LD_EXP 142
79065: PUSH
79066: LD_VAR 0 1
79070: ARRAY
79071: NOT
79072: IFFALSE 79076
// continue ;
79074: GO 79015
// for j := minerMinesList [ i ] downto 1 do
79076: LD_ADDR_VAR 0 2
79080: PUSH
79081: DOUBLE
79082: LD_EXP 142
79086: PUSH
79087: LD_VAR 0 1
79091: ARRAY
79092: INC
79093: ST_TO_ADDR
79094: LD_INT 1
79096: PUSH
79097: FOR_DOWNTO
79098: IFFALSE 79348
// begin side := GetSide ( minersList [ i ] ) ;
79100: LD_ADDR_VAR 0 3
79104: PUSH
79105: LD_EXP 141
79109: PUSH
79110: LD_VAR 0 1
79114: ARRAY
79115: PPUSH
79116: CALL_OW 255
79120: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79121: LD_ADDR_VAR 0 4
79125: PUSH
79126: LD_EXP 142
79130: PUSH
79131: LD_VAR 0 1
79135: ARRAY
79136: PUSH
79137: LD_VAR 0 2
79141: ARRAY
79142: PUSH
79143: LD_INT 1
79145: ARRAY
79146: PPUSH
79147: LD_EXP 142
79151: PUSH
79152: LD_VAR 0 1
79156: ARRAY
79157: PUSH
79158: LD_VAR 0 2
79162: ARRAY
79163: PUSH
79164: LD_INT 2
79166: ARRAY
79167: PPUSH
79168: CALL_OW 428
79172: ST_TO_ADDR
// if not tmp then
79173: LD_VAR 0 4
79177: NOT
79178: IFFALSE 79182
// continue ;
79180: GO 79097
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79182: LD_VAR 0 4
79186: PUSH
79187: LD_INT 81
79189: PUSH
79190: LD_VAR 0 3
79194: PUSH
79195: EMPTY
79196: LIST
79197: LIST
79198: PPUSH
79199: CALL_OW 69
79203: IN
79204: PUSH
79205: LD_EXP 142
79209: PUSH
79210: LD_VAR 0 1
79214: ARRAY
79215: PUSH
79216: LD_VAR 0 2
79220: ARRAY
79221: PUSH
79222: LD_INT 1
79224: ARRAY
79225: PPUSH
79226: LD_EXP 142
79230: PUSH
79231: LD_VAR 0 1
79235: ARRAY
79236: PUSH
79237: LD_VAR 0 2
79241: ARRAY
79242: PUSH
79243: LD_INT 2
79245: ARRAY
79246: PPUSH
79247: CALL_OW 458
79251: AND
79252: IFFALSE 79346
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79254: LD_EXP 142
79258: PUSH
79259: LD_VAR 0 1
79263: ARRAY
79264: PUSH
79265: LD_VAR 0 2
79269: ARRAY
79270: PUSH
79271: LD_INT 1
79273: ARRAY
79274: PPUSH
79275: LD_EXP 142
79279: PUSH
79280: LD_VAR 0 1
79284: ARRAY
79285: PUSH
79286: LD_VAR 0 2
79290: ARRAY
79291: PUSH
79292: LD_INT 2
79294: ARRAY
79295: PPUSH
79296: LD_VAR 0 3
79300: PPUSH
79301: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79305: LD_ADDR_EXP 142
79309: PUSH
79310: LD_EXP 142
79314: PPUSH
79315: LD_VAR 0 1
79319: PPUSH
79320: LD_EXP 142
79324: PUSH
79325: LD_VAR 0 1
79329: ARRAY
79330: PPUSH
79331: LD_VAR 0 2
79335: PPUSH
79336: CALL_OW 3
79340: PPUSH
79341: CALL_OW 1
79345: ST_TO_ADDR
// end ; end ;
79346: GO 79097
79348: POP
79349: POP
// end ;
79350: GO 79015
79352: POP
79353: POP
// end ;
79354: PPOPN 4
79356: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
79357: LD_INT 0
79359: PPUSH
79360: PPUSH
// result := false ;
79361: LD_ADDR_VAR 0 4
79365: PUSH
79366: LD_INT 0
79368: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79369: LD_VAR 0 1
79373: PPUSH
79374: CALL_OW 264
79378: PUSH
79379: LD_EXP 65
79383: EQUAL
79384: NOT
79385: IFFALSE 79389
// exit ;
79387: GO 79629
// index := GetElementIndex ( minersList , unit ) ;
79389: LD_ADDR_VAR 0 5
79393: PUSH
79394: LD_EXP 141
79398: PPUSH
79399: LD_VAR 0 1
79403: PPUSH
79404: CALL 29340 0 2
79408: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79409: LD_EXP 142
79413: PUSH
79414: LD_VAR 0 5
79418: ARRAY
79419: PUSH
79420: LD_EXP 143
79424: GREATEREQUAL
79425: IFFALSE 79429
// exit ;
79427: GO 79629
// ComMoveXY ( unit , x , y ) ;
79429: LD_VAR 0 1
79433: PPUSH
79434: LD_VAR 0 2
79438: PPUSH
79439: LD_VAR 0 3
79443: PPUSH
79444: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79448: LD_INT 35
79450: PPUSH
79451: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79455: LD_VAR 0 1
79459: PPUSH
79460: LD_VAR 0 2
79464: PPUSH
79465: LD_VAR 0 3
79469: PPUSH
79470: CALL 60113 0 3
79474: NOT
79475: PUSH
79476: LD_VAR 0 1
79480: PPUSH
79481: CALL_OW 314
79485: AND
79486: IFFALSE 79490
// exit ;
79488: GO 79629
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79490: LD_VAR 0 2
79494: PPUSH
79495: LD_VAR 0 3
79499: PPUSH
79500: CALL_OW 428
79504: PUSH
79505: LD_VAR 0 1
79509: EQUAL
79510: PUSH
79511: LD_VAR 0 1
79515: PPUSH
79516: CALL_OW 314
79520: NOT
79521: AND
79522: IFFALSE 79448
// PlaySoundXY ( x , y , PlantMine ) ;
79524: LD_VAR 0 2
79528: PPUSH
79529: LD_VAR 0 3
79533: PPUSH
79534: LD_STRING PlantMine
79536: PPUSH
79537: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
79541: LD_VAR 0 2
79545: PPUSH
79546: LD_VAR 0 3
79550: PPUSH
79551: LD_VAR 0 1
79555: PPUSH
79556: CALL_OW 255
79560: PPUSH
79561: LD_INT 0
79563: PPUSH
79564: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
79568: LD_ADDR_EXP 142
79572: PUSH
79573: LD_EXP 142
79577: PPUSH
79578: LD_VAR 0 5
79582: PUSH
79583: LD_EXP 142
79587: PUSH
79588: LD_VAR 0 5
79592: ARRAY
79593: PUSH
79594: LD_INT 1
79596: PLUS
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PPUSH
79602: LD_VAR 0 2
79606: PUSH
79607: LD_VAR 0 3
79611: PUSH
79612: EMPTY
79613: LIST
79614: LIST
79615: PPUSH
79616: CALL 29555 0 3
79620: ST_TO_ADDR
// result := true ;
79621: LD_ADDR_VAR 0 4
79625: PUSH
79626: LD_INT 1
79628: ST_TO_ADDR
// end ;
79629: LD_VAR 0 4
79633: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
79634: LD_INT 0
79636: PPUSH
79637: PPUSH
79638: PPUSH
// if not unit in minersList then
79639: LD_VAR 0 1
79643: PUSH
79644: LD_EXP 141
79648: IN
79649: NOT
79650: IFFALSE 79654
// exit ;
79652: GO 80046
// index := GetElementIndex ( minersList , unit ) ;
79654: LD_ADDR_VAR 0 6
79658: PUSH
79659: LD_EXP 141
79663: PPUSH
79664: LD_VAR 0 1
79668: PPUSH
79669: CALL 29340 0 2
79673: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
79674: LD_ADDR_VAR 0 5
79678: PUSH
79679: DOUBLE
79680: LD_EXP 142
79684: PUSH
79685: LD_VAR 0 6
79689: ARRAY
79690: INC
79691: ST_TO_ADDR
79692: LD_INT 1
79694: PUSH
79695: FOR_DOWNTO
79696: IFFALSE 79857
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
79698: LD_EXP 142
79702: PUSH
79703: LD_VAR 0 6
79707: ARRAY
79708: PUSH
79709: LD_VAR 0 5
79713: ARRAY
79714: PUSH
79715: LD_INT 1
79717: ARRAY
79718: PUSH
79719: LD_VAR 0 2
79723: EQUAL
79724: PUSH
79725: LD_EXP 142
79729: PUSH
79730: LD_VAR 0 6
79734: ARRAY
79735: PUSH
79736: LD_VAR 0 5
79740: ARRAY
79741: PUSH
79742: LD_INT 2
79744: ARRAY
79745: PUSH
79746: LD_VAR 0 3
79750: EQUAL
79751: AND
79752: IFFALSE 79855
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79754: LD_EXP 142
79758: PUSH
79759: LD_VAR 0 6
79763: ARRAY
79764: PUSH
79765: LD_VAR 0 5
79769: ARRAY
79770: PUSH
79771: LD_INT 1
79773: ARRAY
79774: PPUSH
79775: LD_EXP 142
79779: PUSH
79780: LD_VAR 0 6
79784: ARRAY
79785: PUSH
79786: LD_VAR 0 5
79790: ARRAY
79791: PUSH
79792: LD_INT 2
79794: ARRAY
79795: PPUSH
79796: LD_VAR 0 1
79800: PPUSH
79801: CALL_OW 255
79805: PPUSH
79806: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79810: LD_ADDR_EXP 142
79814: PUSH
79815: LD_EXP 142
79819: PPUSH
79820: LD_VAR 0 6
79824: PPUSH
79825: LD_EXP 142
79829: PUSH
79830: LD_VAR 0 6
79834: ARRAY
79835: PPUSH
79836: LD_VAR 0 5
79840: PPUSH
79841: CALL_OW 3
79845: PPUSH
79846: CALL_OW 1
79850: ST_TO_ADDR
// exit ;
79851: POP
79852: POP
79853: GO 80046
// end ; end ;
79855: GO 79695
79857: POP
79858: POP
// for i := minerMinesList [ index ] downto 1 do
79859: LD_ADDR_VAR 0 5
79863: PUSH
79864: DOUBLE
79865: LD_EXP 142
79869: PUSH
79870: LD_VAR 0 6
79874: ARRAY
79875: INC
79876: ST_TO_ADDR
79877: LD_INT 1
79879: PUSH
79880: FOR_DOWNTO
79881: IFFALSE 80044
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
79883: LD_EXP 142
79887: PUSH
79888: LD_VAR 0 6
79892: ARRAY
79893: PUSH
79894: LD_VAR 0 5
79898: ARRAY
79899: PUSH
79900: LD_INT 1
79902: ARRAY
79903: PPUSH
79904: LD_EXP 142
79908: PUSH
79909: LD_VAR 0 6
79913: ARRAY
79914: PUSH
79915: LD_VAR 0 5
79919: ARRAY
79920: PUSH
79921: LD_INT 2
79923: ARRAY
79924: PPUSH
79925: LD_VAR 0 2
79929: PPUSH
79930: LD_VAR 0 3
79934: PPUSH
79935: CALL_OW 298
79939: PUSH
79940: LD_INT 6
79942: LESS
79943: IFFALSE 80042
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79945: LD_EXP 142
79949: PUSH
79950: LD_VAR 0 6
79954: ARRAY
79955: PUSH
79956: LD_VAR 0 5
79960: ARRAY
79961: PUSH
79962: LD_INT 1
79964: ARRAY
79965: PPUSH
79966: LD_EXP 142
79970: PUSH
79971: LD_VAR 0 6
79975: ARRAY
79976: PUSH
79977: LD_VAR 0 5
79981: ARRAY
79982: PUSH
79983: LD_INT 2
79985: ARRAY
79986: PPUSH
79987: LD_VAR 0 1
79991: PPUSH
79992: CALL_OW 255
79996: PPUSH
79997: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80001: LD_ADDR_EXP 142
80005: PUSH
80006: LD_EXP 142
80010: PPUSH
80011: LD_VAR 0 6
80015: PPUSH
80016: LD_EXP 142
80020: PUSH
80021: LD_VAR 0 6
80025: ARRAY
80026: PPUSH
80027: LD_VAR 0 5
80031: PPUSH
80032: CALL_OW 3
80036: PPUSH
80037: CALL_OW 1
80041: ST_TO_ADDR
// end ; end ;
80042: GO 79880
80044: POP
80045: POP
// end ;
80046: LD_VAR 0 4
80050: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
80051: LD_INT 0
80053: PPUSH
80054: PPUSH
80055: PPUSH
80056: PPUSH
80057: PPUSH
80058: PPUSH
80059: PPUSH
80060: PPUSH
80061: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
80062: LD_VAR 0 1
80066: PPUSH
80067: CALL_OW 264
80071: PUSH
80072: LD_EXP 65
80076: EQUAL
80077: NOT
80078: PUSH
80079: LD_VAR 0 1
80083: PUSH
80084: LD_EXP 141
80088: IN
80089: NOT
80090: OR
80091: IFFALSE 80095
// exit ;
80093: GO 80417
// index := GetElementIndex ( minersList , unit ) ;
80095: LD_ADDR_VAR 0 6
80099: PUSH
80100: LD_EXP 141
80104: PPUSH
80105: LD_VAR 0 1
80109: PPUSH
80110: CALL 29340 0 2
80114: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80115: LD_ADDR_VAR 0 8
80119: PUSH
80120: LD_EXP 143
80124: PUSH
80125: LD_EXP 142
80129: PUSH
80130: LD_VAR 0 6
80134: ARRAY
80135: MINUS
80136: ST_TO_ADDR
// if not minesFreeAmount then
80137: LD_VAR 0 8
80141: NOT
80142: IFFALSE 80146
// exit ;
80144: GO 80417
// tmp := [ ] ;
80146: LD_ADDR_VAR 0 7
80150: PUSH
80151: EMPTY
80152: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80153: LD_ADDR_VAR 0 5
80157: PUSH
80158: DOUBLE
80159: LD_INT 1
80161: DEC
80162: ST_TO_ADDR
80163: LD_VAR 0 8
80167: PUSH
80168: FOR_TO
80169: IFFALSE 80364
// begin _d := rand ( 0 , 5 ) ;
80171: LD_ADDR_VAR 0 11
80175: PUSH
80176: LD_INT 0
80178: PPUSH
80179: LD_INT 5
80181: PPUSH
80182: CALL_OW 12
80186: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80187: LD_ADDR_VAR 0 12
80191: PUSH
80192: LD_INT 2
80194: PPUSH
80195: LD_INT 6
80197: PPUSH
80198: CALL_OW 12
80202: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80203: LD_ADDR_VAR 0 9
80207: PUSH
80208: LD_VAR 0 2
80212: PPUSH
80213: LD_VAR 0 11
80217: PPUSH
80218: LD_VAR 0 12
80222: PPUSH
80223: CALL_OW 272
80227: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80228: LD_ADDR_VAR 0 10
80232: PUSH
80233: LD_VAR 0 3
80237: PPUSH
80238: LD_VAR 0 11
80242: PPUSH
80243: LD_VAR 0 12
80247: PPUSH
80248: CALL_OW 273
80252: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80253: LD_VAR 0 9
80257: PPUSH
80258: LD_VAR 0 10
80262: PPUSH
80263: CALL_OW 488
80267: PUSH
80268: LD_VAR 0 9
80272: PUSH
80273: LD_VAR 0 10
80277: PUSH
80278: EMPTY
80279: LIST
80280: LIST
80281: PUSH
80282: LD_VAR 0 7
80286: IN
80287: NOT
80288: AND
80289: PUSH
80290: LD_VAR 0 9
80294: PPUSH
80295: LD_VAR 0 10
80299: PPUSH
80300: CALL_OW 458
80304: NOT
80305: AND
80306: IFFALSE 80348
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80308: LD_ADDR_VAR 0 7
80312: PUSH
80313: LD_VAR 0 7
80317: PPUSH
80318: LD_VAR 0 7
80322: PUSH
80323: LD_INT 1
80325: PLUS
80326: PPUSH
80327: LD_VAR 0 9
80331: PUSH
80332: LD_VAR 0 10
80336: PUSH
80337: EMPTY
80338: LIST
80339: LIST
80340: PPUSH
80341: CALL_OW 1
80345: ST_TO_ADDR
80346: GO 80362
// i := i - 1 ;
80348: LD_ADDR_VAR 0 5
80352: PUSH
80353: LD_VAR 0 5
80357: PUSH
80358: LD_INT 1
80360: MINUS
80361: ST_TO_ADDR
// end ;
80362: GO 80168
80364: POP
80365: POP
// for i in tmp do
80366: LD_ADDR_VAR 0 5
80370: PUSH
80371: LD_VAR 0 7
80375: PUSH
80376: FOR_IN
80377: IFFALSE 80415
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80379: LD_VAR 0 1
80383: PPUSH
80384: LD_VAR 0 5
80388: PUSH
80389: LD_INT 1
80391: ARRAY
80392: PPUSH
80393: LD_VAR 0 5
80397: PUSH
80398: LD_INT 2
80400: ARRAY
80401: PPUSH
80402: CALL 79357 0 3
80406: NOT
80407: IFFALSE 80413
// exit ;
80409: POP
80410: POP
80411: GO 80417
80413: GO 80376
80415: POP
80416: POP
// end ;
80417: LD_VAR 0 4
80421: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
80422: LD_INT 0
80424: PPUSH
80425: PPUSH
80426: PPUSH
80427: PPUSH
80428: PPUSH
80429: PPUSH
80430: PPUSH
// if not GetClass ( unit ) = class_sniper then
80431: LD_VAR 0 1
80435: PPUSH
80436: CALL_OW 257
80440: PUSH
80441: LD_INT 5
80443: EQUAL
80444: NOT
80445: IFFALSE 80449
// exit ;
80447: GO 80837
// dist := 8 ;
80449: LD_ADDR_VAR 0 5
80453: PUSH
80454: LD_INT 8
80456: ST_TO_ADDR
// viewRange := 12 ;
80457: LD_ADDR_VAR 0 7
80461: PUSH
80462: LD_INT 12
80464: ST_TO_ADDR
// side := GetSide ( unit ) ;
80465: LD_ADDR_VAR 0 6
80469: PUSH
80470: LD_VAR 0 1
80474: PPUSH
80475: CALL_OW 255
80479: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80480: LD_INT 61
80482: PPUSH
80483: LD_VAR 0 6
80487: PPUSH
80488: CALL_OW 321
80492: PUSH
80493: LD_INT 2
80495: EQUAL
80496: IFFALSE 80506
// viewRange := 16 ;
80498: LD_ADDR_VAR 0 7
80502: PUSH
80503: LD_INT 16
80505: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
80506: LD_VAR 0 1
80510: PPUSH
80511: LD_VAR 0 2
80515: PPUSH
80516: LD_VAR 0 3
80520: PPUSH
80521: CALL_OW 297
80525: PUSH
80526: LD_VAR 0 5
80530: GREATER
80531: IFFALSE 80610
// begin ComMoveXY ( unit , x , y ) ;
80533: LD_VAR 0 1
80537: PPUSH
80538: LD_VAR 0 2
80542: PPUSH
80543: LD_VAR 0 3
80547: PPUSH
80548: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80552: LD_INT 35
80554: PPUSH
80555: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
80559: LD_VAR 0 1
80563: PPUSH
80564: LD_VAR 0 2
80568: PPUSH
80569: LD_VAR 0 3
80573: PPUSH
80574: CALL 60113 0 3
80578: NOT
80579: IFFALSE 80583
// exit ;
80581: GO 80837
// until GetDistUnitXY ( unit , x , y ) < dist ;
80583: LD_VAR 0 1
80587: PPUSH
80588: LD_VAR 0 2
80592: PPUSH
80593: LD_VAR 0 3
80597: PPUSH
80598: CALL_OW 297
80602: PUSH
80603: LD_VAR 0 5
80607: LESS
80608: IFFALSE 80552
// end ; ComTurnXY ( unit , x , y ) ;
80610: LD_VAR 0 1
80614: PPUSH
80615: LD_VAR 0 2
80619: PPUSH
80620: LD_VAR 0 3
80624: PPUSH
80625: CALL_OW 118
// wait ( 5 ) ;
80629: LD_INT 5
80631: PPUSH
80632: CALL_OW 67
// _d := GetDir ( unit ) ;
80636: LD_ADDR_VAR 0 10
80640: PUSH
80641: LD_VAR 0 1
80645: PPUSH
80646: CALL_OW 254
80650: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
80651: LD_ADDR_VAR 0 8
80655: PUSH
80656: LD_VAR 0 1
80660: PPUSH
80661: CALL_OW 250
80665: PPUSH
80666: LD_VAR 0 10
80670: PPUSH
80671: LD_VAR 0 5
80675: PPUSH
80676: CALL_OW 272
80680: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
80681: LD_ADDR_VAR 0 9
80685: PUSH
80686: LD_VAR 0 1
80690: PPUSH
80691: CALL_OW 251
80695: PPUSH
80696: LD_VAR 0 10
80700: PPUSH
80701: LD_VAR 0 5
80705: PPUSH
80706: CALL_OW 273
80710: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80711: LD_VAR 0 8
80715: PPUSH
80716: LD_VAR 0 9
80720: PPUSH
80721: CALL_OW 488
80725: NOT
80726: IFFALSE 80730
// exit ;
80728: GO 80837
// ComAnimCustom ( unit , 1 ) ;
80730: LD_VAR 0 1
80734: PPUSH
80735: LD_INT 1
80737: PPUSH
80738: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
80742: LD_VAR 0 8
80746: PPUSH
80747: LD_VAR 0 9
80751: PPUSH
80752: LD_VAR 0 6
80756: PPUSH
80757: LD_VAR 0 7
80761: PPUSH
80762: CALL_OW 330
// repeat wait ( 1 ) ;
80766: LD_INT 1
80768: PPUSH
80769: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
80773: LD_VAR 0 1
80777: PPUSH
80778: CALL_OW 316
80782: PUSH
80783: LD_VAR 0 1
80787: PPUSH
80788: CALL_OW 314
80792: OR
80793: PUSH
80794: LD_VAR 0 1
80798: PPUSH
80799: CALL_OW 302
80803: NOT
80804: OR
80805: PUSH
80806: LD_VAR 0 1
80810: PPUSH
80811: CALL_OW 301
80815: OR
80816: IFFALSE 80766
// RemoveSeeing ( _x , _y , side ) ;
80818: LD_VAR 0 8
80822: PPUSH
80823: LD_VAR 0 9
80827: PPUSH
80828: LD_VAR 0 6
80832: PPUSH
80833: CALL_OW 331
// end ; end_of_file
80837: LD_VAR 0 4
80841: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80842: LD_VAR 0 1
80846: PPUSH
80847: LD_VAR 0 2
80851: PPUSH
80852: LD_VAR 0 3
80856: PPUSH
80857: LD_VAR 0 4
80861: PPUSH
80862: LD_VAR 0 5
80866: PPUSH
80867: LD_VAR 0 6
80871: PPUSH
80872: CALL 63492 0 6
// end ;
80876: PPOPN 6
80878: END
