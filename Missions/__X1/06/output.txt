// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 8591 0 2
// PrepareArabian ;
  32: CALL 400 0 0
// PrepareRussian ;
  36: CALL 9382 0 0
// Action ;
  40: CALL 17587 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$00 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 23100
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$00 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 23100
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 5 5$00 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 10500
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// end ; end_of_file
 395: LD_VAR 0 1
 399: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 400: LD_INT 0
 402: PPUSH
 403: PPUSH
 404: PPUSH
 405: PPUSH
 406: PPUSH
 407: PPUSH
 408: PPUSH
 409: PPUSH
 410: PPUSH
 411: PPUSH
 412: PPUSH
 413: PPUSH
// uc_nation := 2 ;
 414: LD_ADDR_OWVAR 21
 418: PUSH
 419: LD_INT 2
 421: ST_TO_ADDR
// uc_side := 5 ;
 422: LD_ADDR_OWVAR 20
 426: PUSH
 427: LD_INT 5
 429: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 430: LD_ADDR_EXP 40
 434: PUSH
 435: LD_STRING Abdul
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: LD_STRING 
 443: PPUSH
 444: CALL 27143 0 3
 448: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 449: LD_ADDR_EXP 42
 453: PUSH
 454: LD_STRING Omar
 456: PPUSH
 457: LD_INT 0
 459: PPUSH
 460: LD_STRING 
 462: PPUSH
 463: CALL 27143 0 3
 467: ST_TO_ADDR
// uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 476: LD_ADDR_EXP 32
 480: PUSH
 481: LD_STRING Heike
 483: PPUSH
 484: LD_EXP 1
 488: NOT
 489: PPUSH
 490: LD_EXP 2
 494: PPUSH
 495: CALL 27143 0 3
 499: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 500: LD_ADDR_EXP 35
 504: PUSH
 505: LD_STRING Ibrahim
 507: PPUSH
 508: LD_EXP 1
 512: NOT
 513: PPUSH
 514: LD_EXP 2
 518: PPUSH
 519: CALL 27143 0 3
 523: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 524: LD_ADDR_EXP 33
 528: PUSH
 529: LD_STRING Givi
 531: PPUSH
 532: LD_EXP 1
 536: NOT
 537: PPUSH
 538: LD_EXP 2
 542: PPUSH
 543: CALL 27143 0 3
 547: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 548: LD_ADDR_EXP 36
 552: PUSH
 553: LD_STRING Kamil
 555: PPUSH
 556: LD_EXP 1
 560: NOT
 561: PPUSH
 562: LD_EXP 2
 566: PPUSH
 567: CALL 27143 0 3
 571: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 572: LD_ADDR_EXP 37
 576: PUSH
 577: LD_STRING Kaia
 579: PPUSH
 580: LD_EXP 1
 584: NOT
 585: PPUSH
 586: LD_EXP 2
 590: PPUSH
 591: CALL 27143 0 3
 595: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 596: LD_ADDR_EXP 38
 600: PUSH
 601: LD_STRING Sophia
 603: PPUSH
 604: LD_EXP 1
 608: NOT
 609: PPUSH
 610: LD_EXP 2
 614: PPUSH
 615: CALL 27143 0 3
 619: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 620: LD_ADDR_EXP 39
 624: PUSH
 625: LD_STRING Markov
 627: PPUSH
 628: LD_EXP 1
 632: NOT
 633: PPUSH
 634: LD_EXP 2
 638: PPUSH
 639: CALL 27143 0 3
 643: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 644: LD_ADDR_EXP 44
 648: PUSH
 649: LD_STRING Aviradze
 651: PPUSH
 652: LD_EXP 1
 656: NOT
 657: PPUSH
 658: LD_EXP 2
 662: PPUSH
 663: CALL 27143 0 3
 667: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 668: LD_ADDR_EXP 43
 672: PUSH
 673: LD_STRING Kurt
 675: PPUSH
 676: LD_EXP 1
 680: NOT
 681: PPUSH
 682: LD_EXP 2
 686: PPUSH
 687: CALL 27143 0 3
 691: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 692: LD_ADDR_EXP 34
 696: PUSH
 697: LD_STRING Mike
 699: PPUSH
 700: LD_EXP 1
 704: NOT
 705: PPUSH
 706: LD_EXP 2
 710: PPUSH
 711: CALL 27143 0 3
 715: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 716: LD_ADDR_EXP 41
 720: PUSH
 721: LD_STRING Olaf
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: LD_STRING 
 729: PPUSH
 730: CALL 27143 0 3
 734: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 735: LD_ADDR_EXP 47
 739: PUSH
 740: LD_STRING 05_others
 742: PPUSH
 743: CALL_OW 31
 747: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 748: LD_ADDR_EXP 48
 752: PUSH
 753: LD_STRING 05_apes
 755: PPUSH
 756: CALL_OW 31
 760: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 761: LD_ADDR_VAR 0 5
 765: PUSH
 766: LD_STRING 05_Radar
 768: PPUSH
 769: LD_EXP 1
 773: PPUSH
 774: CALL_OW 30
 778: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 779: LD_ADDR_VAR 0 6
 783: PUSH
 784: LD_STRING 05_RemoteControl
 786: PPUSH
 787: LD_EXP 1
 791: PPUSH
 792: CALL_OW 30
 796: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 797: LD_ADDR_VAR 0 7
 801: PUSH
 802: LD_STRING 05_DrugsTested
 804: PPUSH
 805: LD_EXP 1
 809: PPUSH
 810: CALL_OW 30
 814: ST_TO_ADDR
// if hasDrugs then
 815: LD_VAR 0 7
 819: IFFALSE 834
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 821: LD_INT 5
 823: PPUSH
 824: LD_INT 2
 826: PPUSH
 827: LD_INT 2
 829: PPUSH
 830: CALL_OW 322
// if hasRadar then
 834: LD_VAR 0 5
 838: IFFALSE 853
// SetTech ( tech_radar , 2 , state_researched ) ;
 840: LD_INT 6
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 2
 848: PPUSH
 849: CALL_OW 322
// if hasRemote then
 853: LD_VAR 0 6
 857: IFFALSE 872
// SetTech ( tech_remCont , 2 , state_researched ) ;
 859: LD_INT 15
 861: PPUSH
 862: LD_INT 2
 864: PPUSH
 865: LD_INT 2
 867: PPUSH
 868: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 872: LD_ADDR_VAR 0 12
 876: PUSH
 877: LD_INT 5
 879: PPUSH
 880: LD_INT 0
 882: PPUSH
 883: CALL_OW 517
 887: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 888: LD_ADDR_VAR 0 2
 892: PUSH
 893: DOUBLE
 894: LD_INT 1
 896: DEC
 897: ST_TO_ADDR
 898: LD_VAR 0 12
 902: PUSH
 903: LD_INT 1
 905: ARRAY
 906: PUSH
 907: FOR_TO
 908: IFFALSE 985
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 910: LD_VAR 0 12
 914: PUSH
 915: LD_INT 1
 917: ARRAY
 918: PUSH
 919: LD_VAR 0 2
 923: ARRAY
 924: PPUSH
 925: LD_VAR 0 12
 929: PUSH
 930: LD_INT 2
 932: ARRAY
 933: PUSH
 934: LD_VAR 0 2
 938: ARRAY
 939: PPUSH
 940: CALL_OW 351
 944: IFFALSE 983
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 946: LD_VAR 0 12
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: PUSH
 955: LD_VAR 0 2
 959: ARRAY
 960: PPUSH
 961: LD_VAR 0 12
 965: PUSH
 966: LD_INT 2
 968: ARRAY
 969: PUSH
 970: LD_VAR 0 2
 974: ARRAY
 975: PPUSH
 976: LD_INT 2
 978: PPUSH
 979: CALL_OW 244
 983: GO 907
 985: POP
 986: POP
// base := [ ] ;
 987: LD_ADDR_VAR 0 4
 991: PUSH
 992: EMPTY
 993: ST_TO_ADDR
// if debug then
 994: LD_EXP 1
 998: IFFALSE 1048
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1000: LD_ADDR_VAR 0 4
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: LD_INT 51
1010: PUSH
1011: LD_INT 77
1013: PUSH
1014: LD_INT 1
1016: PUSH
1017: LD_INT 3
1019: PUSH
1020: LD_INT 3
1022: PUSH
1023: LD_INT 0
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: PUSH
1043: EMPTY
1044: LIST
1045: ST_TO_ADDR
// end else
1046: GO 1064
// if buildingsFromPrev then
1048: LD_EXP 30
1052: IFFALSE 1064
// base := buildingsFromPrev ;
1054: LD_ADDR_VAR 0 4
1058: PUSH
1059: LD_EXP 30
1063: ST_TO_ADDR
// if base then
1064: LD_VAR 0 4
1068: IFFALSE 1266
// for i := 1 to base do
1070: LD_ADDR_VAR 0 2
1074: PUSH
1075: DOUBLE
1076: LD_INT 1
1078: DEC
1079: ST_TO_ADDR
1080: LD_VAR 0 4
1084: PUSH
1085: FOR_TO
1086: IFFALSE 1264
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1088: LD_ADDR_VAR 0 4
1092: PUSH
1093: LD_VAR 0 4
1097: PPUSH
1098: LD_VAR 0 2
1102: PPUSH
1103: LD_VAR 0 4
1107: PUSH
1108: LD_VAR 0 2
1112: ARRAY
1113: PUSH
1114: LD_INT 1
1116: ARRAY
1117: PUSH
1118: LD_VAR 0 4
1122: PUSH
1123: LD_VAR 0 2
1127: ARRAY
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PUSH
1133: LD_INT 155
1135: PLUS
1136: PUSH
1137: LD_VAR 0 4
1141: PUSH
1142: LD_VAR 0 2
1146: ARRAY
1147: PUSH
1148: LD_INT 3
1150: ARRAY
1151: PUSH
1152: LD_INT 3
1154: PLUS
1155: PUSH
1156: LD_VAR 0 4
1160: PUSH
1161: LD_VAR 0 2
1165: ARRAY
1166: PUSH
1167: LD_INT 4
1169: ARRAY
1170: PUSH
1171: LD_VAR 0 4
1175: PUSH
1176: LD_VAR 0 2
1180: ARRAY
1181: PUSH
1182: LD_INT 5
1184: ARRAY
1185: PUSH
1186: LD_VAR 0 4
1190: PUSH
1191: LD_VAR 0 2
1195: ARRAY
1196: PUSH
1197: LD_INT 6
1199: ARRAY
1200: PUSH
1201: LD_VAR 0 4
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: PUSH
1212: LD_INT 7
1214: ARRAY
1215: PUSH
1216: LD_VAR 0 4
1220: PUSH
1221: LD_VAR 0 2
1225: ARRAY
1226: PUSH
1227: LD_INT 8
1229: ARRAY
1230: PUSH
1231: LD_VAR 0 4
1235: PUSH
1236: LD_VAR 0 2
1240: ARRAY
1241: PUSH
1242: LD_INT 9
1244: ARRAY
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 1
1261: ST_TO_ADDR
1262: GO 1085
1264: POP
1265: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1266: LD_ADDR_VAR 0 4
1270: PUSH
1271: LD_VAR 0 4
1275: PUSH
1276: LD_INT 0
1278: PUSH
1279: LD_INT 206
1281: PUSH
1282: LD_INT 80
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 0
1296: PUSH
1297: LD_INT 0
1299: PUSH
1300: LD_INT 0
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 32
1316: PUSH
1317: LD_INT 221
1319: PUSH
1320: LD_INT 95
1322: PUSH
1323: LD_INT 5
1325: PUSH
1326: LD_INT 2
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: LD_INT 0
1334: PUSH
1335: LD_INT 0
1337: PUSH
1338: LD_INT 23
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 32
1354: PUSH
1355: LD_INT 223
1357: PUSH
1358: LD_INT 88
1360: PUSH
1361: LD_INT 5
1363: PUSH
1364: LD_INT 2
1366: PUSH
1367: LD_INT 3
1369: PUSH
1370: LD_INT 0
1372: PUSH
1373: LD_INT 0
1375: PUSH
1376: LD_INT 24
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 32
1392: PUSH
1393: LD_INT 202
1395: PUSH
1396: LD_INT 64
1398: PUSH
1399: LD_INT 2
1401: PUSH
1402: LD_INT 2
1404: PUSH
1405: LD_INT 3
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 25
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 203
1433: PUSH
1434: LD_INT 91
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 2
1442: PUSH
1443: LD_INT 3
1445: PUSH
1446: LD_INT 0
1448: PUSH
1449: LD_INT 0
1451: PUSH
1452: LD_INT 0
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: LD_INT 8
1468: PUSH
1469: LD_INT 217
1471: PUSH
1472: LD_INT 78
1474: PUSH
1475: LD_INT 4
1477: PUSH
1478: LD_INT 2
1480: PUSH
1481: LD_INT 3
1483: PUSH
1484: LD_INT 10
1486: PUSH
1487: LD_INT 0
1489: PUSH
1490: LD_INT 0
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 27
1506: PUSH
1507: LD_INT 220
1509: PUSH
1510: LD_INT 99
1512: PUSH
1513: LD_INT 1
1515: PUSH
1516: LD_INT 2
1518: PUSH
1519: LD_INT 3
1521: PUSH
1522: LD_INT 0
1524: PUSH
1525: LD_INT 0
1527: PUSH
1528: LD_INT 0
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: PUSH
1542: LD_INT 27
1544: PUSH
1545: LD_INT 220
1547: PUSH
1548: LD_INT 103
1550: PUSH
1551: LD_INT 1
1553: PUSH
1554: LD_INT 2
1556: PUSH
1557: LD_INT 3
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: LD_INT 0
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: PUSH
1580: LD_INT 27
1582: PUSH
1583: LD_INT 216
1585: PUSH
1586: LD_INT 102
1588: PUSH
1589: LD_INT 1
1591: PUSH
1592: LD_INT 2
1594: PUSH
1595: LD_INT 3
1597: PUSH
1598: LD_INT 0
1600: PUSH
1601: LD_INT 0
1603: PUSH
1604: LD_INT 0
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 17
1620: PUSH
1621: LD_INT 203
1623: PUSH
1624: LD_INT 94
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: LD_INT 2
1632: PUSH
1633: LD_INT 3
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: LD_INT 0
1641: PUSH
1642: LD_INT 0
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 23
1658: PUSH
1659: LD_INT 200
1661: PUSH
1662: LD_INT 88
1664: PUSH
1665: LD_INT 2
1667: PUSH
1668: LD_INT 2
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: LD_INT 0
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 16
1696: PUSH
1697: LD_INT 199
1699: PUSH
1700: LD_INT 91
1702: PUSH
1703: LD_INT 1
1705: PUSH
1706: LD_INT 2
1708: PUSH
1709: LD_INT 3
1711: PUSH
1712: LD_INT 0
1714: PUSH
1715: LD_INT 0
1717: PUSH
1718: LD_INT 0
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: LD_INT 26
1734: PUSH
1735: LD_INT 197
1737: PUSH
1738: LD_INT 81
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 2
1746: PUSH
1747: LD_INT 3
1749: PUSH
1750: LD_INT 0
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: LD_INT 0
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 26
1772: PUSH
1773: LD_INT 197
1775: PUSH
1776: LD_INT 78
1778: PUSH
1779: LD_INT 3
1781: PUSH
1782: LD_INT 2
1784: PUSH
1785: LD_INT 3
1787: PUSH
1788: LD_INT 0
1790: PUSH
1791: LD_INT 0
1793: PUSH
1794: LD_INT 0
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: ADD
1824: ST_TO_ADDR
// if hasRadar then
1825: LD_VAR 0 5
1829: IFFALSE 1893
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1831: LD_ADDR_VAR 0 4
1835: PUSH
1836: LD_VAR 0 4
1840: PPUSH
1841: LD_VAR 0 4
1845: PUSH
1846: LD_INT 1
1848: PLUS
1849: PPUSH
1850: LD_INT 20
1852: PUSH
1853: LD_INT 203
1855: PUSH
1856: LD_INT 87
1858: PUSH
1859: LD_INT 3
1861: PUSH
1862: LD_INT 2
1864: PUSH
1865: LD_INT 3
1867: PUSH
1868: LD_INT 0
1870: PUSH
1871: LD_INT 0
1873: PUSH
1874: LD_INT 0
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 1
1892: ST_TO_ADDR
// if hasRemote then
1893: LD_VAR 0 6
1897: IFFALSE 1961
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: PLUS
1917: PPUSH
1918: LD_INT 22
1920: PUSH
1921: LD_INT 207
1923: PUSH
1924: LD_INT 95
1926: PUSH
1927: LD_INT 5
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 3
1935: PUSH
1936: LD_INT 0
1938: PUSH
1939: LD_INT 0
1941: PUSH
1942: LD_INT 0
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 1
1960: ST_TO_ADDR
// for i in base do
1961: LD_ADDR_VAR 0 2
1965: PUSH
1966: LD_VAR 0 4
1970: PUSH
1971: FOR_IN
1972: IFFALSE 2311
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
1974: LD_VAR 0 2
1978: PUSH
1979: LD_INT 2
1981: ARRAY
1982: PPUSH
1983: LD_VAR 0 2
1987: PUSH
1988: LD_INT 3
1990: ARRAY
1991: PPUSH
1992: CALL_OW 428
1996: IFFALSE 2000
// continue ;
1998: GO 1971
// uc_nation := i [ 5 ] ;
2000: LD_ADDR_OWVAR 21
2004: PUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_INT 5
2012: ARRAY
2013: ST_TO_ADDR
// InitBc ;
2014: CALL_OW 21
// bc_type := i [ 1 ] ;
2018: LD_ADDR_OWVAR 42
2022: PUSH
2023: LD_VAR 0 2
2027: PUSH
2028: LD_INT 1
2030: ARRAY
2031: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2032: LD_ADDR_OWVAR 43
2036: PUSH
2037: LD_VAR 0 2
2041: PUSH
2042: LD_INT 6
2044: ARRAY
2045: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2046: LD_VAR 0 2
2050: PUSH
2051: LD_INT 1
2053: ARRAY
2054: PUSH
2055: LD_INT 8
2057: EQUAL
2058: PUSH
2059: LD_VAR 0 2
2063: PUSH
2064: LD_INT 5
2066: ARRAY
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: AND
2072: PUSH
2073: LD_VAR 0 2
2077: PUSH
2078: LD_INT 8
2080: ARRAY
2081: NOT
2082: AND
2083: IFFALSE 2118
// begin bc_kind1 := b_lab_weapon ;
2085: LD_ADDR_OWVAR 44
2089: PUSH
2090: LD_INT 10
2092: ST_TO_ADDR
// if hasRadar then
2093: LD_VAR 0 5
2097: IFFALSE 2109
// bc_kind2 := b_lab_opto else
2099: LD_ADDR_OWVAR 45
2103: PUSH
2104: LD_INT 15
2106: ST_TO_ADDR
2107: GO 2118
// bc_kind2 := - 1 ;
2109: LD_ADDR_OWVAR 45
2113: PUSH
2114: LD_INT 1
2116: NEG
2117: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2118: LD_VAR 0 2
2122: PUSH
2123: LD_INT 1
2125: ARRAY
2126: PUSH
2127: LD_INT 7
2129: PUSH
2130: LD_INT 8
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: IN
2137: PUSH
2138: LD_VAR 0 2
2142: PUSH
2143: LD_INT 7
2145: ARRAY
2146: AND
2147: IFFALSE 2163
// bc_kind1 := i [ 7 ] ;
2149: LD_ADDR_OWVAR 44
2153: PUSH
2154: LD_VAR 0 2
2158: PUSH
2159: LD_INT 7
2161: ARRAY
2162: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2163: LD_VAR 0 2
2167: PUSH
2168: LD_INT 1
2170: ARRAY
2171: PUSH
2172: LD_INT 8
2174: EQUAL
2175: PUSH
2176: LD_VAR 0 2
2180: PUSH
2181: LD_INT 8
2183: ARRAY
2184: AND
2185: IFFALSE 2201
// bc_kind1 := i [ 8 ] ;
2187: LD_ADDR_OWVAR 44
2191: PUSH
2192: LD_VAR 0 2
2196: PUSH
2197: LD_INT 8
2199: ARRAY
2200: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: LD_VAR 0 2
2210: PUSH
2211: LD_INT 2
2213: ARRAY
2214: PPUSH
2215: LD_VAR 0 2
2219: PUSH
2220: LD_INT 3
2222: ARRAY
2223: PPUSH
2224: LD_VAR 0 2
2228: PUSH
2229: LD_INT 4
2231: ARRAY
2232: PPUSH
2233: CALL_OW 47
2237: ST_TO_ADDR
// if i [ 9 ] then
2238: LD_VAR 0 2
2242: PUSH
2243: LD_INT 9
2245: ARRAY
2246: IFFALSE 2266
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2248: LD_VAR 0 3
2252: PPUSH
2253: LD_VAR 0 2
2257: PUSH
2258: LD_INT 9
2260: ARRAY
2261: PPUSH
2262: CALL_OW 431
// if i [ 1 ] = b_bunker then
2266: LD_VAR 0 2
2270: PUSH
2271: LD_INT 1
2273: ARRAY
2274: PUSH
2275: LD_INT 32
2277: EQUAL
2278: IFFALSE 2309
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2280: LD_ADDR_VAR 0 11
2284: PUSH
2285: LD_VAR 0 11
2289: PPUSH
2290: LD_VAR 0 11
2294: PUSH
2295: LD_INT 1
2297: PLUS
2298: PPUSH
2299: LD_VAR 0 3
2303: PPUSH
2304: CALL_OW 1
2308: ST_TO_ADDR
// end ;
2309: GO 1971
2311: POP
2312: POP
// depot := HexInfo ( 206 , 80 ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_INT 206
2320: PPUSH
2321: LD_INT 80
2323: PPUSH
2324: CALL_OW 428
2328: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2329: LD_ADDR_VAR 0 8
2333: PUSH
2334: LD_INT 22
2336: PUSH
2337: LD_INT 2
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 30
2346: PUSH
2347: LD_INT 3
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: PPUSH
2358: CALL_OW 69
2362: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2363: LD_ADDR_VAR 0 10
2367: PUSH
2368: LD_INT 22
2370: PUSH
2371: LD_INT 2
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 2
2380: PUSH
2381: LD_INT 30
2383: PUSH
2384: LD_INT 6
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: PUSH
2391: LD_INT 30
2393: PUSH
2394: LD_INT 7
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: PUSH
2401: LD_INT 30
2403: PUSH
2404: LD_INT 8
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PPUSH
2421: CALL_OW 69
2425: ST_TO_ADDR
// arDepot := depot ;
2426: LD_ADDR_EXP 46
2430: PUSH
2431: LD_VAR 0 9
2435: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2436: LD_VAR 0 9
2440: PPUSH
2441: CALL_OW 274
2445: PPUSH
2446: LD_INT 1
2448: PPUSH
2449: LD_INT 360
2451: PUSH
2452: LD_INT 260
2454: PUSH
2455: LD_INT 190
2457: PUSH
2458: LD_INT 150
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: PUSH
2467: LD_OWVAR 67
2471: ARRAY
2472: PPUSH
2473: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2477: LD_VAR 0 9
2481: PPUSH
2482: CALL_OW 274
2486: PPUSH
2487: LD_INT 2
2489: PPUSH
2490: LD_INT 200
2492: PUSH
2493: LD_INT 170
2495: PUSH
2496: LD_INT 150
2498: PUSH
2499: LD_INT 120
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: LD_OWVAR 67
2512: ARRAY
2513: PPUSH
2514: CALL_OW 277
// uc_nation := 2 ;
2518: LD_ADDR_OWVAR 21
2522: PUSH
2523: LD_INT 2
2525: ST_TO_ADDR
// uc_side := 2 ;
2526: LD_ADDR_OWVAR 20
2530: PUSH
2531: LD_INT 2
2533: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2534: LD_INT 13
2536: PPUSH
2537: LD_INT 1
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: LD_INT 27
2545: PPUSH
2546: LD_INT 33
2548: PPUSH
2549: CALL 32158 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2553: CALL_OW 45
2557: PPUSH
2558: LD_INT 190
2560: PPUSH
2561: LD_INT 64
2563: PPUSH
2564: LD_INT 5
2566: PPUSH
2567: LD_INT 0
2569: PPUSH
2570: CALL 66732 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2574: LD_INT 13
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: LD_INT 1
2582: PPUSH
2583: LD_INT 25
2585: PPUSH
2586: LD_INT 22
2588: PPUSH
2589: CALL 32158 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2593: CALL_OW 45
2597: PPUSH
2598: LD_INT 188
2600: PPUSH
2601: LD_INT 67
2603: PPUSH
2604: LD_INT 5
2606: PPUSH
2607: LD_INT 0
2609: PPUSH
2610: CALL 66732 0 5
// if hasRemote then
2614: LD_VAR 0 6
2618: IFFALSE 2700
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
2620: LD_INT 13
2622: PPUSH
2623: LD_INT 1
2625: PPUSH
2626: LD_INT 1
2628: PPUSH
2629: LD_INT 31
2631: PPUSH
2632: LD_INT 35
2634: PPUSH
2635: CALL 32158 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
2639: CALL_OW 45
2643: PPUSH
2644: LD_INT 191
2646: PPUSH
2647: LD_INT 71
2649: PPUSH
2650: LD_INT 5
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL 66732 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
2660: LD_INT 14
2662: PPUSH
2663: LD_INT 1
2665: PPUSH
2666: LD_INT 2
2668: PPUSH
2669: LD_INT 27
2671: PPUSH
2672: LD_INT 55
2674: PPUSH
2675: CALL 32158 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
2679: CALL_OW 45
2683: PPUSH
2684: LD_INT 199
2686: PPUSH
2687: LD_INT 67
2689: PPUSH
2690: LD_INT 0
2692: PPUSH
2693: LD_INT 0
2695: PPUSH
2696: CALL 66732 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2700: LD_EXP 32
2704: PPUSH
2705: LD_INT 213
2707: PPUSH
2708: LD_INT 87
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2718: LD_EXP 32
2722: PPUSH
2723: LD_INT 214
2725: PPUSH
2726: LD_INT 87
2728: PPUSH
2729: CALL_OW 118
// if Kaia then
2733: LD_EXP 37
2737: IFFALSE 2772
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2739: LD_EXP 37
2743: PPUSH
2744: LD_INT 213
2746: PPUSH
2747: LD_INT 85
2749: PPUSH
2750: LD_INT 0
2752: PPUSH
2753: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2757: LD_EXP 37
2761: PPUSH
2762: LD_INT 215
2764: PPUSH
2765: LD_INT 87
2767: PPUSH
2768: CALL_OW 118
// end ; if Olaf and Kaia then
2772: LD_EXP 41
2776: PUSH
2777: LD_EXP 37
2781: AND
2782: IFFALSE 2819
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2784: LD_EXP 41
2788: PPUSH
2789: LD_INT 215
2791: PPUSH
2792: LD_INT 87
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2802: LD_EXP 41
2806: PPUSH
2807: LD_INT 213
2809: PPUSH
2810: LD_INT 85
2812: PPUSH
2813: CALL_OW 118
// end else
2817: GO 2839
// if Olaf then
2819: LD_EXP 41
2823: IFFALSE 2839
// PlaceHumanInUnit ( Olaf , factory ) ;
2825: LD_EXP 41
2829: PPUSH
2830: LD_VAR 0 8
2834: PPUSH
2835: CALL_OW 52
// if Givi then
2839: LD_EXP 33
2843: IFFALSE 2924
// begin if Kaia and Olaf then
2845: LD_EXP 37
2849: PUSH
2850: LD_EXP 41
2854: AND
2855: IFFALSE 2892
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2857: LD_EXP 33
2861: PPUSH
2862: LD_INT 247
2864: PPUSH
2865: LD_INT 117
2867: PPUSH
2868: LD_INT 0
2870: PPUSH
2871: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2875: LD_EXP 33
2879: PPUSH
2880: LD_INT 248
2882: PPUSH
2883: LD_INT 118
2885: PPUSH
2886: CALL_OW 118
// end else
2890: GO 2924
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2892: LD_EXP 33
2896: PPUSH
2897: LD_INT 216
2899: PPUSH
2900: LD_INT 88
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2910: LD_EXP 33
2914: PPUSH
2915: LD_EXP 32
2919: PPUSH
2920: CALL_OW 119
// end ; end ; if Kurt then
2924: LD_EXP 43
2928: IFFALSE 2948
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2930: LD_EXP 43
2934: PPUSH
2935: LD_VAR 0 11
2939: PUSH
2940: LD_INT 2
2942: ARRAY
2943: PPUSH
2944: CALL_OW 52
// if Mike then
2948: LD_EXP 34
2952: IFFALSE 2972
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2954: LD_EXP 34
2958: PPUSH
2959: LD_VAR 0 11
2963: PUSH
2964: LD_INT 3
2966: ARRAY
2967: PPUSH
2968: CALL_OW 52
// if Kamil then
2972: LD_EXP 36
2976: IFFALSE 3038
// begin if Kaia and Olaf then
2978: LD_EXP 37
2982: PUSH
2983: LD_EXP 41
2987: AND
2988: IFFALSE 3006
// PlaceHumanInUnit ( Kamil , depot ) else
2990: LD_EXP 36
2994: PPUSH
2995: LD_VAR 0 9
2999: PPUSH
3000: CALL_OW 52
3004: GO 3038
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3006: LD_EXP 36
3010: PPUSH
3011: LD_INT 213
3013: PPUSH
3014: LD_INT 87
3016: PPUSH
3017: LD_INT 0
3019: PPUSH
3020: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3024: LD_EXP 36
3028: PPUSH
3029: LD_EXP 32
3033: PPUSH
3034: CALL_OW 119
// end ; end ; if Sophia then
3038: LD_EXP 38
3042: IFFALSE 3058
// PlaceHumanInUnit ( Sophia , depot ) ;
3044: LD_EXP 38
3048: PPUSH
3049: LD_VAR 0 9
3053: PPUSH
3054: CALL_OW 52
// if Aviradze then
3058: LD_EXP 44
3062: IFFALSE 3111
// if lab then
3064: LD_VAR 0 10
3068: IFFALSE 3090
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3070: LD_EXP 44
3074: PPUSH
3075: LD_VAR 0 10
3079: PUSH
3080: LD_INT 1
3082: ARRAY
3083: PPUSH
3084: CALL_OW 52
3088: GO 3111
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3090: LD_EXP 44
3094: PPUSH
3095: LD_INT 210
3097: PPUSH
3098: LD_INT 87
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: LD_INT 0
3106: PPUSH
3107: CALL_OW 50
// if Ibrahim then
3111: LD_EXP 35
3115: IFFALSE 3164
// if lab then
3117: LD_VAR 0 10
3121: IFFALSE 3143
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3123: LD_EXP 35
3127: PPUSH
3128: LD_VAR 0 10
3132: PUSH
3133: LD_INT 1
3135: ARRAY
3136: PPUSH
3137: CALL_OW 52
3141: GO 3164
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3143: LD_EXP 35
3147: PPUSH
3148: LD_INT 210
3150: PPUSH
3151: LD_INT 87
3153: PPUSH
3154: LD_INT 3
3156: PPUSH
3157: LD_INT 0
3159: PPUSH
3160: CALL_OW 50
// if Markov then
3164: LD_EXP 39
3168: IFFALSE 3217
// if factory then
3170: LD_VAR 0 8
3174: IFFALSE 3196
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3176: LD_EXP 39
3180: PPUSH
3181: LD_VAR 0 8
3185: PUSH
3186: LD_INT 1
3188: ARRAY
3189: PPUSH
3190: CALL_OW 52
3194: GO 3217
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3196: LD_EXP 39
3200: PPUSH
3201: LD_INT 210
3203: PPUSH
3204: LD_INT 87
3206: PPUSH
3207: LD_INT 3
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: CALL_OW 50
// if heikeSecondSquad then
3217: LD_EXP 47
3221: IFFALSE 3261
// for i in heikeSecondSquad do
3223: LD_ADDR_VAR 0 2
3227: PUSH
3228: LD_EXP 47
3232: PUSH
3233: FOR_IN
3234: IFFALSE 3259
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 190
3243: PPUSH
3244: LD_INT 65
3246: PPUSH
3247: LD_INT 5
3249: PPUSH
3250: LD_INT 0
3252: PPUSH
3253: CALL_OW 50
3257: GO 3233
3259: POP
3260: POP
// if heikeApes then
3261: LD_EXP 48
3265: IFFALSE 3305
// for i in heikeApes do
3267: LD_ADDR_VAR 0 2
3271: PUSH
3272: LD_EXP 48
3276: PUSH
3277: FOR_IN
3278: IFFALSE 3303
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3280: LD_VAR 0 2
3284: PPUSH
3285: LD_INT 190
3287: PPUSH
3288: LD_INT 70
3290: PPUSH
3291: LD_INT 5
3293: PPUSH
3294: LD_INT 0
3296: PPUSH
3297: CALL_OW 50
3301: GO 3277
3303: POP
3304: POP
// end ;
3305: LD_VAR 0 1
3309: RET
// export function PrepareRolfSquad ; var i , j ; begin
3310: LD_INT 0
3312: PPUSH
3313: PPUSH
3314: PPUSH
// uc_side := 8 ;
3315: LD_ADDR_OWVAR 20
3319: PUSH
3320: LD_INT 8
3322: ST_TO_ADDR
// uc_nation := 2 ;
3323: LD_ADDR_OWVAR 21
3327: PUSH
3328: LD_INT 2
3330: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3331: LD_ADDR_EXP 45
3335: PUSH
3336: LD_STRING Bergkamp
3338: PPUSH
3339: CALL_OW 25
3343: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3344: LD_ADDR_EXP 49
3348: PUSH
3349: LD_EXP 45
3353: PUSH
3354: EMPTY
3355: LIST
3356: ST_TO_ADDR
// for i := 1 to 4 do
3357: LD_ADDR_VAR 0 2
3361: PUSH
3362: DOUBLE
3363: LD_INT 1
3365: DEC
3366: ST_TO_ADDR
3367: LD_INT 4
3369: PUSH
3370: FOR_TO
3371: IFFALSE 3451
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3373: LD_ADDR_VAR 0 3
3377: PUSH
3378: DOUBLE
3379: LD_INT 1
3381: DEC
3382: ST_TO_ADDR
3383: LD_INT 5
3385: PUSH
3386: LD_INT 2
3388: PUSH
3389: LD_INT 3
3391: PUSH
3392: LD_INT 1
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: PUSH
3401: LD_VAR 0 2
3405: ARRAY
3406: PUSH
3407: FOR_TO
3408: IFFALSE 3447
// begin PrepareHuman ( false , i , 5 ) ;
3410: LD_INT 0
3412: PPUSH
3413: LD_VAR 0 2
3417: PPUSH
3418: LD_INT 5
3420: PPUSH
3421: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3425: LD_ADDR_EXP 49
3429: PUSH
3430: LD_EXP 49
3434: PPUSH
3435: CALL_OW 44
3439: PPUSH
3440: CALL 64592 0 2
3444: ST_TO_ADDR
// end ;
3445: GO 3407
3447: POP
3448: POP
// end ;
3449: GO 3370
3451: POP
3452: POP
// if HexInfo ( 5 , 3 ) then
3453: LD_INT 5
3455: PPUSH
3456: LD_INT 3
3458: PPUSH
3459: CALL_OW 428
3463: IFFALSE 3480
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3465: LD_INT 5
3467: PPUSH
3468: LD_INT 3
3470: PPUSH
3471: CALL_OW 428
3475: PPUSH
3476: CALL_OW 64
// for i in rolfSquad do
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: LD_EXP 49
3489: PUSH
3490: FOR_IN
3491: IFFALSE 3627
// begin uc_direction := 2 ;
3493: LD_ADDR_OWVAR 24
3497: PUSH
3498: LD_INT 2
3500: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3501: LD_VAR 0 2
3505: PPUSH
3506: CALL_OW 257
3510: PUSH
3511: LD_INT 3
3513: EQUAL
3514: IFFALSE 3588
// begin uc_side := 8 ;
3516: LD_ADDR_OWVAR 20
3520: PUSH
3521: LD_INT 8
3523: ST_TO_ADDR
// uc_nation := 2 ;
3524: LD_ADDR_OWVAR 21
3528: PUSH
3529: LD_INT 2
3531: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3532: LD_INT 13
3534: PPUSH
3535: LD_INT 1
3537: PPUSH
3538: LD_INT 1
3540: PPUSH
3541: LD_INT 27
3543: PPUSH
3544: LD_INT 88
3546: PPUSH
3547: CALL 32158 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3551: CALL_OW 45
3555: PPUSH
3556: LD_INT 11
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3566: LD_VAR 0 2
3570: PPUSH
3571: LD_INT 5
3573: PPUSH
3574: LD_INT 3
3576: PPUSH
3577: CALL_OW 428
3581: PPUSH
3582: CALL_OW 52
// end else
3586: GO 3603
// PlaceUnitArea ( i , northSpawn , false ) ;
3588: LD_VAR 0 2
3592: PPUSH
3593: LD_INT 11
3595: PPUSH
3596: LD_INT 0
3598: PPUSH
3599: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3603: LD_VAR 0 2
3607: PPUSH
3608: LD_INT 29
3610: PPUSH
3611: LD_INT 10
3613: PPUSH
3614: CALL_OW 111
// wait ( 0 0$2 ) ;
3618: LD_INT 70
3620: PPUSH
3621: CALL_OW 67
// end ;
3625: GO 3490
3627: POP
3628: POP
// wait ( 0 0$5 ) ;
3629: LD_INT 175
3631: PPUSH
3632: CALL_OW 67
// end ;
3636: LD_VAR 0 1
3640: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3641: LD_INT 0
3643: PPUSH
3644: PPUSH
3645: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3646: LD_EXP 45
3650: PPUSH
3651: LD_INT 94
3653: PPUSH
3654: LD_INT 63
3656: PPUSH
3657: CALL_OW 428
3661: PPUSH
3662: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3666: LD_ADDR_VAR 0 3
3670: PUSH
3671: LD_INT 4
3673: PUSH
3674: LD_INT 82
3676: PUSH
3677: LD_INT 64
3679: PUSH
3680: LD_INT 1
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: PUSH
3689: LD_INT 31
3691: PUSH
3692: LD_INT 73
3694: PUSH
3695: LD_INT 58
3697: PUSH
3698: LD_INT 0
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: ST_TO_ADDR
// for i in tmp do
3711: LD_ADDR_VAR 0 2
3715: PUSH
3716: LD_VAR 0 3
3720: PUSH
3721: FOR_IN
3722: IFFALSE 3786
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3724: LD_EXP 49
3728: PPUSH
3729: LD_INT 25
3731: PUSH
3732: LD_INT 2
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PPUSH
3739: CALL_OW 72
3743: PPUSH
3744: LD_VAR 0 2
3748: PUSH
3749: LD_INT 1
3751: ARRAY
3752: PPUSH
3753: LD_VAR 0 2
3757: PUSH
3758: LD_INT 2
3760: ARRAY
3761: PPUSH
3762: LD_VAR 0 2
3766: PUSH
3767: LD_INT 3
3769: ARRAY
3770: PPUSH
3771: LD_VAR 0 2
3775: PUSH
3776: LD_INT 4
3778: ARRAY
3779: PPUSH
3780: CALL_OW 205
3784: GO 3721
3786: POP
3787: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
3788: LD_EXP 49
3792: PUSH
3793: LD_INT 2
3795: ARRAY
3796: PPUSH
3797: LD_INT 63
3799: PPUSH
3800: LD_INT 42
3802: PPUSH
3803: CALL_OW 428
3807: PPUSH
3808: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
3812: LD_EXP 49
3816: PUSH
3817: LD_INT 3
3819: ARRAY
3820: PPUSH
3821: LD_INT 94
3823: PPUSH
3824: LD_INT 63
3826: PPUSH
3827: CALL_OW 428
3831: PPUSH
3832: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3836: LD_INT 35
3838: PPUSH
3839: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
3843: LD_EXP 49
3847: PPUSH
3848: LD_INT 25
3850: PUSH
3851: LD_INT 2
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 60
3863: PUSH
3864: EMPTY
3865: LIST
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PPUSH
3875: CALL_OW 72
3879: IFFALSE 3836
// rolfScriptBase := true ;
3881: LD_ADDR_EXP 9
3885: PUSH
3886: LD_INT 1
3888: ST_TO_ADDR
// end ;
3889: LD_VAR 0 1
3893: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
3894: LD_EXP 9
3898: PUSH
3899: LD_EXP 45
3903: PPUSH
3904: CALL_OW 255
3908: PUSH
3909: LD_INT 8
3911: EQUAL
3912: AND
3913: IFFALSE 4920
3915: GO 3917
3917: DISABLE
3918: LD_INT 0
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
3924: PPUSH
3925: PPUSH
3926: PPUSH
3927: PPUSH
3928: PPUSH
3929: PPUSH
// begin enable ;
3930: ENABLE
// if not rolfSquad then
3931: LD_EXP 49
3935: NOT
3936: IFFALSE 3940
// exit ;
3938: GO 4920
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3940: LD_ADDR_VAR 0 9
3944: PUSH
3945: LD_INT 12
3947: PPUSH
3948: LD_INT 81
3950: PUSH
3951: LD_INT 8
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 70
3962: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3963: LD_ADDR_VAR 0 5
3967: PUSH
3968: LD_EXP 49
3972: PPUSH
3973: LD_INT 25
3975: PUSH
3976: LD_INT 1
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PPUSH
3983: CALL_OW 72
3987: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3988: LD_ADDR_VAR 0 6
3992: PUSH
3993: LD_EXP 49
3997: PPUSH
3998: LD_INT 25
4000: PUSH
4001: LD_INT 2
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PPUSH
4008: CALL_OW 72
4012: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4013: LD_ADDR_VAR 0 8
4017: PUSH
4018: LD_EXP 49
4022: PPUSH
4023: LD_INT 25
4025: PUSH
4026: LD_INT 3
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PPUSH
4033: CALL_OW 72
4037: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4038: LD_ADDR_VAR 0 7
4042: PUSH
4043: LD_EXP 49
4047: PPUSH
4048: LD_INT 25
4050: PUSH
4051: LD_INT 4
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: PPUSH
4058: CALL_OW 72
4062: ST_TO_ADDR
// if sol then
4063: LD_VAR 0 5
4067: IFFALSE 4365
// for i in sol union Rolf do
4069: LD_ADDR_VAR 0 1
4073: PUSH
4074: LD_VAR 0 5
4078: PUSH
4079: LD_EXP 45
4083: UNION
4084: PUSH
4085: FOR_IN
4086: IFFALSE 4363
// if not IsInUnit ( i ) and not HasTask ( i ) then
4088: LD_VAR 0 1
4092: PPUSH
4093: CALL_OW 310
4097: NOT
4098: PUSH
4099: LD_VAR 0 1
4103: PPUSH
4104: CALL_OW 314
4108: NOT
4109: AND
4110: IFFALSE 4361
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4112: LD_VAR 0 1
4116: PPUSH
4117: CALL_OW 256
4121: PUSH
4122: LD_INT 500
4124: LESS
4125: PUSH
4126: LD_VAR 0 1
4130: PPUSH
4131: LD_INT 80
4133: PPUSH
4134: LD_INT 49
4136: PPUSH
4137: CALL_OW 297
4141: PUSH
4142: LD_INT 6
4144: GREATER
4145: AND
4146: IFFALSE 4165
// begin ComMoveXY ( i , 80 , 49 ) ;
4148: LD_VAR 0 1
4152: PPUSH
4153: LD_INT 80
4155: PPUSH
4156: LD_INT 49
4158: PPUSH
4159: CALL_OW 111
// continue ;
4163: GO 4085
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4165: LD_ADDR_VAR 0 4
4169: PUSH
4170: LD_INT 22
4172: PUSH
4173: LD_INT 8
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: LD_INT 50
4182: PUSH
4183: EMPTY
4184: LIST
4185: PUSH
4186: LD_INT 2
4188: PUSH
4189: LD_INT 30
4191: PUSH
4192: LD_INT 4
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PUSH
4199: LD_INT 30
4201: PUSH
4202: LD_INT 5
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 30
4211: PUSH
4212: LD_INT 32
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 30
4221: PUSH
4222: LD_INT 31
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: PPUSH
4241: CALL_OW 69
4245: ST_TO_ADDR
// if tmp then
4246: LD_VAR 0 4
4250: IFFALSE 4361
// begin for b in tmp do
4252: LD_ADDR_VAR 0 2
4256: PUSH
4257: LD_VAR 0 4
4261: PUSH
4262: FOR_IN
4263: IFFALSE 4359
// begin case GetBType ( b ) of b_armoury , b_barracks :
4265: LD_VAR 0 2
4269: PPUSH
4270: CALL_OW 266
4274: PUSH
4275: LD_INT 4
4277: DOUBLE
4278: EQUAL
4279: IFTRUE 4289
4281: LD_INT 5
4283: DOUBLE
4284: EQUAL
4285: IFTRUE 4289
4287: GO 4300
4289: POP
// p := 6 ; b_breastwork , b_bunker :
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_INT 6
4297: ST_TO_ADDR
4298: GO 4326
4300: LD_INT 31
4302: DOUBLE
4303: EQUAL
4304: IFTRUE 4314
4306: LD_INT 32
4308: DOUBLE
4309: EQUAL
4310: IFTRUE 4314
4312: GO 4325
4314: POP
// p := 1 ; end ;
4315: LD_ADDR_VAR 0 3
4319: PUSH
4320: LD_INT 1
4322: ST_TO_ADDR
4323: GO 4326
4325: POP
// if UnitsInside ( b ) < p then
4326: LD_VAR 0 2
4330: PPUSH
4331: CALL_OW 313
4335: PUSH
4336: LD_VAR 0 3
4340: LESS
4341: IFFALSE 4357
// ComEnterUnit ( i , b ) ;
4343: LD_VAR 0 1
4347: PPUSH
4348: LD_VAR 0 2
4352: PPUSH
4353: CALL_OW 120
// end ;
4357: GO 4262
4359: POP
4360: POP
// end ; end ;
4361: GO 4085
4363: POP
4364: POP
// if sci then
4365: LD_VAR 0 7
4369: IFFALSE 4424
// for i in sci do
4371: LD_ADDR_VAR 0 1
4375: PUSH
4376: LD_VAR 0 7
4380: PUSH
4381: FOR_IN
4382: IFFALSE 4422
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4384: LD_VAR 0 1
4388: PPUSH
4389: LD_INT 80
4391: PPUSH
4392: LD_INT 49
4394: PPUSH
4395: CALL_OW 297
4399: PUSH
4400: LD_INT 9
4402: GREATER
4403: IFFALSE 4420
// ComMoveXY ( i , 80 , 49 ) ;
4405: LD_VAR 0 1
4409: PPUSH
4410: LD_INT 80
4412: PPUSH
4413: LD_INT 49
4415: PPUSH
4416: CALL_OW 111
// end ;
4420: GO 4381
4422: POP
4423: POP
// if mech then
4424: LD_VAR 0 8
4428: IFFALSE 4642
// for i in mech do
4430: LD_ADDR_VAR 0 1
4434: PUSH
4435: LD_VAR 0 8
4439: PUSH
4440: FOR_IN
4441: IFFALSE 4640
// begin hasVehicle := IsInUnit ( i ) ;
4443: LD_ADDR_VAR 0 10
4447: PUSH
4448: LD_VAR 0 1
4452: PPUSH
4453: CALL_OW 310
4457: ST_TO_ADDR
// if enemyInBase then
4458: LD_VAR 0 9
4462: IFFALSE 4558
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4464: LD_VAR 0 10
4468: PUSH
4469: LD_VAR 0 10
4473: PPUSH
4474: CALL_OW 256
4478: PUSH
4479: LD_INT 500
4481: GREATER
4482: AND
4483: IFFALSE 4511
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4485: LD_VAR 0 10
4489: PPUSH
4490: LD_VAR 0 9
4494: PPUSH
4495: LD_VAR 0 10
4499: PPUSH
4500: CALL_OW 74
4504: PPUSH
4505: CALL_OW 115
4509: GO 4556
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4511: LD_VAR 0 10
4515: PPUSH
4516: LD_INT 86
4518: PPUSH
4519: LD_INT 49
4521: PPUSH
4522: CALL_OW 297
4526: PUSH
4527: LD_INT 8
4529: GREATER
4530: IFFALSE 4556
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4532: LD_VAR 0 10
4536: PPUSH
4537: LD_INT 86
4539: PPUSH
4540: LD_INT 49
4542: PPUSH
4543: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4547: LD_VAR 0 1
4551: PPUSH
4552: CALL 66412 0 1
// end end else
4556: GO 4638
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4558: LD_VAR 0 1
4562: PPUSH
4563: LD_INT 86
4565: PPUSH
4566: LD_INT 49
4568: PPUSH
4569: CALL_OW 297
4573: PUSH
4574: LD_INT 8
4576: GREATER
4577: IFFALSE 4596
// ComMoveXY ( i , 86 , 49 ) else
4579: LD_VAR 0 1
4583: PPUSH
4584: LD_INT 86
4586: PPUSH
4587: LD_INT 49
4589: PPUSH
4590: CALL_OW 111
4594: GO 4638
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4596: LD_VAR 0 10
4600: PUSH
4601: LD_VAR 0 10
4605: PPUSH
4606: CALL_OW 256
4610: PUSH
4611: LD_INT 1000
4613: LESS
4614: AND
4615: IFFALSE 4638
// begin SetFuel ( hasVehicle , 100 ) ;
4617: LD_VAR 0 10
4621: PPUSH
4622: LD_INT 100
4624: PPUSH
4625: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4629: LD_VAR 0 1
4633: PPUSH
4634: CALL 66292 0 1
// end ; end ; end ;
4638: GO 4440
4640: POP
4641: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4642: LD_ADDR_VAR 0 4
4646: PUSH
4647: LD_INT 12
4649: PPUSH
4650: LD_INT 3
4652: PUSH
4653: LD_INT 24
4655: PUSH
4656: LD_INT 1000
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: PUSH
4667: LD_INT 21
4669: PUSH
4670: LD_INT 3
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PPUSH
4681: CALL_OW 70
4685: ST_TO_ADDR
// if tmp and eng then
4686: LD_VAR 0 4
4690: PUSH
4691: LD_VAR 0 6
4695: AND
4696: IFFALSE 4802
// begin for i in eng do
4698: LD_ADDR_VAR 0 1
4702: PUSH
4703: LD_VAR 0 6
4707: PUSH
4708: FOR_IN
4709: IFFALSE 4800
// if IsInUnit ( i ) then
4711: LD_VAR 0 1
4715: PPUSH
4716: CALL_OW 310
4720: IFFALSE 4733
// ComExitBuilding ( i ) else
4722: LD_VAR 0 1
4726: PPUSH
4727: CALL_OW 122
4731: GO 4798
// if GetLives ( i ) = 1000 then
4733: LD_VAR 0 1
4737: PPUSH
4738: CALL_OW 256
4742: PUSH
4743: LD_INT 1000
4745: EQUAL
4746: IFFALSE 4768
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_VAR 0 4
4757: PUSH
4758: LD_INT 1
4760: ARRAY
4761: PPUSH
4762: CALL_OW 130
4766: GO 4798
// if GetLives ( i ) < 700 then
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL_OW 256
4777: PUSH
4778: LD_INT 700
4780: LESS
4781: IFFALSE 4798
// ComMoveXY ( i , 80 , 49 ) ;
4783: LD_VAR 0 1
4787: PPUSH
4788: LD_INT 80
4790: PPUSH
4791: LD_INT 49
4793: PPUSH
4794: CALL_OW 111
4798: GO 4708
4800: POP
4801: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
4802: LD_VAR 0 4
4806: NOT
4807: PUSH
4808: LD_VAR 0 6
4812: PPUSH
4813: LD_INT 3
4815: PUSH
4816: LD_INT 54
4818: PUSH
4819: EMPTY
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 72
4830: AND
4831: IFFALSE 4920
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
4833: LD_ADDR_VAR 0 1
4837: PUSH
4838: LD_VAR 0 6
4842: PPUSH
4843: LD_INT 3
4845: PUSH
4846: LD_INT 54
4848: PUSH
4849: EMPTY
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PPUSH
4856: CALL_OW 72
4860: PUSH
4861: FOR_IN
4862: IFFALSE 4918
// if GetLives ( i ) < 1000 then
4864: LD_VAR 0 1
4868: PPUSH
4869: CALL_OW 256
4873: PUSH
4874: LD_INT 1000
4876: LESS
4877: IFFALSE 4896
// ComMoveXY ( i , 80 , 49 ) else
4879: LD_VAR 0 1
4883: PPUSH
4884: LD_INT 80
4886: PPUSH
4887: LD_INT 49
4889: PPUSH
4890: CALL_OW 111
4894: GO 4916
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 86
4903: PPUSH
4904: LD_INT 54
4906: PPUSH
4907: CALL_OW 428
4911: PPUSH
4912: CALL_OW 120
4916: GO 4861
4918: POP
4919: POP
// end ;
4920: PPOPN 10
4922: END
// export function PrepareOmarSquad ; var i , j , p ; begin
4923: LD_INT 0
4925: PPUSH
4926: PPUSH
4927: PPUSH
4928: PPUSH
// uc_side := 5 ;
4929: LD_ADDR_OWVAR 20
4933: PUSH
4934: LD_INT 5
4936: ST_TO_ADDR
// uc_nation := 2 ;
4937: LD_ADDR_OWVAR 21
4941: PUSH
4942: LD_INT 2
4944: ST_TO_ADDR
// omarSquad := [ ] ;
4945: LD_ADDR_EXP 50
4949: PUSH
4950: EMPTY
4951: ST_TO_ADDR
// for i := 1 to 4 do
4952: LD_ADDR_VAR 0 2
4956: PUSH
4957: DOUBLE
4958: LD_INT 1
4960: DEC
4961: ST_TO_ADDR
4962: LD_INT 4
4964: PUSH
4965: FOR_TO
4966: IFFALSE 5089
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4968: LD_ADDR_VAR 0 3
4972: PUSH
4973: DOUBLE
4974: LD_INT 1
4976: DEC
4977: ST_TO_ADDR
4978: LD_INT 6
4980: PUSH
4981: LD_INT 2
4983: PUSH
4984: LD_INT 2
4986: PUSH
4987: LD_EXP 21
4991: PLUS
4992: PUSH
4993: LD_INT 2
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: PUSH
5002: LD_VAR 0 2
5006: ARRAY
5007: PUSH
5008: FOR_TO
5009: IFFALSE 5085
// begin PrepareHuman ( false , i , 5 ) ;
5011: LD_INT 0
5013: PPUSH
5014: LD_VAR 0 2
5018: PPUSH
5019: LD_INT 5
5021: PPUSH
5022: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5026: LD_ADDR_EXP 50
5030: PUSH
5031: LD_EXP 50
5035: PPUSH
5036: CALL_OW 44
5040: PPUSH
5041: CALL 64592 0 2
5045: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5046: LD_VAR 0 2
5050: PUSH
5051: LD_INT 1
5053: EQUAL
5054: PUSH
5055: LD_INT 50
5057: PPUSH
5058: CALL_OW 13
5062: AND
5063: IFFALSE 5083
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5065: LD_EXP 50
5069: PUSH
5070: LD_EXP 50
5074: ARRAY
5075: PPUSH
5076: LD_INT 8
5078: PPUSH
5079: CALL_OW 336
// end ;
5083: GO 5008
5085: POP
5086: POP
// end ;
5087: GO 4965
5089: POP
5090: POP
// if HexInfo ( 340 , 205 ) then
5091: LD_INT 340
5093: PPUSH
5094: LD_INT 205
5096: PPUSH
5097: CALL_OW 428
5101: IFFALSE 5118
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5103: LD_INT 340
5105: PPUSH
5106: LD_INT 205
5108: PPUSH
5109: CALL_OW 428
5113: PPUSH
5114: CALL_OW 64
// p := 0 ;
5118: LD_ADDR_VAR 0 4
5122: PUSH
5123: LD_INT 0
5125: ST_TO_ADDR
// for i in omarSquad do
5126: LD_ADDR_VAR 0 2
5130: PUSH
5131: LD_EXP 50
5135: PUSH
5136: FOR_IN
5137: IFFALSE 5338
// begin uc_direction := 4 ;
5139: LD_ADDR_OWVAR 24
5143: PUSH
5144: LD_INT 4
5146: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5147: LD_VAR 0 2
5151: PPUSH
5152: CALL_OW 257
5156: PUSH
5157: LD_INT 3
5159: EQUAL
5160: PUSH
5161: LD_VAR 0 4
5165: PUSH
5166: LD_INT 2
5168: LESS
5169: AND
5170: IFFALSE 5299
// begin p := p + 1 ;
5172: LD_ADDR_VAR 0 4
5176: PUSH
5177: LD_VAR 0 4
5181: PUSH
5182: LD_INT 1
5184: PLUS
5185: ST_TO_ADDR
// uc_side := 5 ;
5186: LD_ADDR_OWVAR 20
5190: PUSH
5191: LD_INT 5
5193: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5194: LD_INT 0
5196: PPUSH
5197: LD_INT 1
5199: PPUSH
5200: CALL_OW 12
5204: IFFALSE 5235
// begin uc_nation := 2 ;
5206: LD_ADDR_OWVAR 21
5210: PUSH
5211: LD_INT 2
5213: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5214: LD_INT 13
5216: PPUSH
5217: LD_INT 1
5219: PPUSH
5220: LD_INT 1
5222: PPUSH
5223: LD_INT 27
5225: PPUSH
5226: LD_INT 88
5228: PPUSH
5229: CALL 32158 0 5
// end else
5233: GO 5262
// begin uc_nation := 3 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 3
5242: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5243: LD_INT 22
5245: PPUSH
5246: LD_INT 1
5248: PPUSH
5249: LD_INT 1
5251: PPUSH
5252: LD_INT 45
5254: PPUSH
5255: LD_INT 88
5257: PPUSH
5258: CALL 32158 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5262: CALL_OW 45
5266: PPUSH
5267: LD_INT 13
5269: PPUSH
5270: LD_INT 0
5272: PPUSH
5273: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5277: LD_VAR 0 2
5281: PPUSH
5282: LD_INT 340
5284: PPUSH
5285: LD_INT 205
5287: PPUSH
5288: CALL_OW 428
5292: PPUSH
5293: CALL_OW 52
// end else
5297: GO 5314
// PlaceUnitArea ( i , southSpawn , false ) ;
5299: LD_VAR 0 2
5303: PPUSH
5304: LD_INT 13
5306: PPUSH
5307: LD_INT 0
5309: PPUSH
5310: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5314: LD_VAR 0 2
5318: PPUSH
5319: LD_INT 333
5321: PPUSH
5322: LD_INT 210
5324: PPUSH
5325: CALL_OW 111
// wait ( 0 0$2 ) ;
5329: LD_INT 70
5331: PPUSH
5332: CALL_OW 67
// end ;
5336: GO 5136
5338: POP
5339: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5340: LD_EXP 42
5344: PPUSH
5345: LD_INT 340
5347: PPUSH
5348: LD_INT 205
5350: PPUSH
5351: LD_INT 0
5353: PPUSH
5354: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5358: LD_EXP 42
5362: PPUSH
5363: LD_INT 333
5365: PPUSH
5366: LD_INT 206
5368: PPUSH
5369: CALL_OW 111
// wait ( 0 0$2 ) ;
5373: LD_INT 70
5375: PPUSH
5376: CALL_OW 67
// ComHold ( omarSquad ) ;
5380: LD_EXP 50
5384: PPUSH
5385: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5389: LD_EXP 42
5393: PUSH
5394: LD_EXP 50
5398: PPUSH
5399: LD_INT 2
5401: PUSH
5402: LD_INT 25
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 25
5414: PUSH
5415: LD_INT 8
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: PPUSH
5427: CALL_OW 72
5431: UNION
5432: PUSH
5433: LD_INT 22
5435: PUSH
5436: LD_INT 5
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 21
5445: PUSH
5446: LD_INT 2
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PPUSH
5457: CALL_OW 69
5461: UNION
5462: PPUSH
5463: LD_INT 315
5465: PPUSH
5466: LD_INT 214
5468: PPUSH
5469: CALL_OW 114
// wait ( 0 0$22 ) ;
5473: LD_INT 770
5475: PPUSH
5476: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5480: LD_EXP 50
5484: PUSH
5485: LD_EXP 42
5489: UNION
5490: PPUSH
5491: LD_INT 329
5493: PPUSH
5494: LD_INT 231
5496: PPUSH
5497: CALL_OW 114
// end ;
5501: LD_VAR 0 1
5505: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5506: LD_EXP 10
5510: IFFALSE 6593
5512: GO 5514
5514: DISABLE
5515: LD_INT 0
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
5521: PPUSH
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
// begin enable ;
5528: ENABLE
// if not omarSquad then
5529: LD_EXP 50
5533: NOT
5534: IFFALSE 5538
// exit ;
5536: GO 6593
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5538: LD_ADDR_VAR 0 10
5542: PUSH
5543: LD_INT 14
5545: PPUSH
5546: LD_INT 81
5548: PUSH
5549: LD_INT 5
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PPUSH
5556: CALL_OW 70
5560: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5561: LD_ADDR_VAR 0 6
5565: PUSH
5566: LD_EXP 50
5570: PPUSH
5571: LD_INT 2
5573: PUSH
5574: LD_INT 25
5576: PUSH
5577: LD_INT 1
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 25
5586: PUSH
5587: LD_INT 8
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 72
5603: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5604: LD_ADDR_VAR 0 7
5608: PUSH
5609: LD_EXP 50
5613: PPUSH
5614: LD_INT 25
5616: PUSH
5617: LD_INT 2
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: PPUSH
5624: CALL_OW 72
5628: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5629: LD_ADDR_VAR 0 9
5633: PUSH
5634: LD_EXP 50
5638: PPUSH
5639: LD_INT 25
5641: PUSH
5642: LD_INT 3
5644: PUSH
5645: EMPTY
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 72
5653: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5654: LD_ADDR_VAR 0 8
5658: PUSH
5659: LD_EXP 50
5663: PPUSH
5664: LD_INT 25
5666: PUSH
5667: LD_INT 4
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PPUSH
5674: CALL_OW 72
5678: ST_TO_ADDR
// if sol then
5679: LD_VAR 0 6
5683: IFFALSE 6047
// for i in sol do
5685: LD_ADDR_VAR 0 1
5689: PUSH
5690: LD_VAR 0 6
5694: PUSH
5695: FOR_IN
5696: IFFALSE 6045
// if not HasTask ( i ) then
5698: LD_VAR 0 1
5702: PPUSH
5703: CALL_OW 314
5707: NOT
5708: IFFALSE 6043
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5710: LD_VAR 0 1
5714: PPUSH
5715: CALL_OW 310
5719: NOT
5720: PUSH
5721: LD_VAR 0 1
5725: PPUSH
5726: CALL_OW 256
5730: PUSH
5731: LD_INT 500
5733: LESS
5734: AND
5735: PUSH
5736: LD_VAR 0 1
5740: PPUSH
5741: LD_INT 333
5743: PPUSH
5744: LD_INT 234
5746: PPUSH
5747: CALL_OW 297
5751: PUSH
5752: LD_INT 6
5754: GREATER
5755: AND
5756: IFFALSE 5775
// begin ComMoveXY ( i , 333 , 234 ) ;
5758: LD_VAR 0 1
5762: PPUSH
5763: LD_INT 333
5765: PPUSH
5766: LD_INT 234
5768: PPUSH
5769: CALL_OW 111
// continue ;
5773: GO 5695
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5775: LD_ADDR_VAR 0 5
5779: PUSH
5780: LD_INT 22
5782: PUSH
5783: LD_INT 5
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: LD_INT 58
5792: PUSH
5793: EMPTY
5794: LIST
5795: PUSH
5796: LD_INT 50
5798: PUSH
5799: EMPTY
5800: LIST
5801: PUSH
5802: LD_INT 2
5804: PUSH
5805: LD_INT 30
5807: PUSH
5808: LD_INT 32
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: LD_INT 30
5817: PUSH
5818: LD_INT 31
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: PPUSH
5836: CALL_OW 69
5840: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
5841: LD_VAR 0 5
5845: PUSH
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 310
5855: PPUSH
5856: CALL_OW 266
5860: PUSH
5861: LD_INT 31
5863: NONEQUAL
5864: AND
5865: IFFALSE 5947
// begin for j in tmp do
5867: LD_ADDR_VAR 0 2
5871: PUSH
5872: LD_VAR 0 5
5876: PUSH
5877: FOR_IN
5878: IFFALSE 5943
// if GetTag ( j ) <> 1 then
5880: LD_VAR 0 2
5884: PPUSH
5885: CALL_OW 110
5889: PUSH
5890: LD_INT 1
5892: NONEQUAL
5893: IFFALSE 5941
// begin SetTag ( j , 1 ) ;
5895: LD_VAR 0 2
5899: PPUSH
5900: LD_INT 1
5902: PPUSH
5903: CALL_OW 109
// if IsInUnit ( i ) then
5907: LD_VAR 0 1
5911: PPUSH
5912: CALL_OW 310
5916: IFFALSE 5927
// ComExit ( i ) ;
5918: LD_VAR 0 1
5922: PPUSH
5923: CALL 64990 0 1
// AddComEnterUnit ( i , j ) ;
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 180
// end ;
5941: GO 5877
5943: POP
5944: POP
// end else
5945: GO 6043
// if not IsInUnit ( i ) then
5947: LD_VAR 0 1
5951: PPUSH
5952: CALL_OW 310
5956: NOT
5957: IFFALSE 6043
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5959: LD_ADDR_VAR 0 5
5963: PUSH
5964: LD_INT 22
5966: PUSH
5967: LD_INT 5
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 50
5976: PUSH
5977: EMPTY
5978: LIST
5979: PUSH
5980: LD_INT 30
5982: PUSH
5983: LD_INT 4
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: PPUSH
5995: CALL_OW 69
5999: ST_TO_ADDR
// if tmp then
6000: LD_VAR 0 5
6004: IFFALSE 6043
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6006: LD_VAR 0 5
6010: PUSH
6011: LD_INT 1
6013: ARRAY
6014: PPUSH
6015: CALL_OW 313
6019: PUSH
6020: LD_INT 6
6022: LESS
6023: IFFALSE 6043
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6025: LD_VAR 0 1
6029: PPUSH
6030: LD_VAR 0 5
6034: PUSH
6035: LD_INT 1
6037: ARRAY
6038: PPUSH
6039: CALL_OW 120
// end ; end ;
6043: GO 5695
6045: POP
6046: POP
// if sci then
6047: LD_VAR 0 8
6051: IFFALSE 6106
// for i in sci do
6053: LD_ADDR_VAR 0 1
6057: PUSH
6058: LD_VAR 0 8
6062: PUSH
6063: FOR_IN
6064: IFFALSE 6104
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6066: LD_VAR 0 1
6070: PPUSH
6071: LD_INT 333
6073: PPUSH
6074: LD_INT 234
6076: PPUSH
6077: CALL_OW 297
6081: PUSH
6082: LD_INT 9
6084: GREATER
6085: IFFALSE 6102
// ComMoveXY ( i , 333 , 234 ) ;
6087: LD_VAR 0 1
6091: PPUSH
6092: LD_INT 333
6094: PPUSH
6095: LD_INT 234
6097: PPUSH
6098: CALL_OW 111
// end ;
6102: GO 6063
6104: POP
6105: POP
// if mech then
6106: LD_VAR 0 9
6110: IFFALSE 6315
// for i in mech do
6112: LD_ADDR_VAR 0 1
6116: PUSH
6117: LD_VAR 0 9
6121: PUSH
6122: FOR_IN
6123: IFFALSE 6313
// begin hasVehicle := IsInUnit ( i ) ;
6125: LD_ADDR_VAR 0 11
6129: PUSH
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 310
6139: ST_TO_ADDR
// if enemyInBase then
6140: LD_VAR 0 10
6144: IFFALSE 6231
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6146: LD_VAR 0 11
6150: PUSH
6151: LD_VAR 0 11
6155: PPUSH
6156: CALL_OW 256
6160: PUSH
6161: LD_INT 500
6163: GREATER
6164: AND
6165: IFFALSE 6193
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6167: LD_VAR 0 11
6171: PPUSH
6172: LD_VAR 0 10
6176: PPUSH
6177: LD_VAR 0 11
6181: PPUSH
6182: CALL_OW 74
6186: PPUSH
6187: CALL_OW 115
6191: GO 6229
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6193: LD_VAR 0 11
6197: PPUSH
6198: LD_INT 333
6200: PPUSH
6201: LD_INT 234
6203: PPUSH
6204: CALL_OW 297
6208: PUSH
6209: LD_INT 6
6211: GREATER
6212: IFFALSE 6229
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6214: LD_VAR 0 11
6218: PPUSH
6219: LD_INT 333
6221: PPUSH
6222: LD_INT 234
6224: PPUSH
6225: CALL_OW 111
// end else
6229: GO 6311
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6231: LD_VAR 0 1
6235: PPUSH
6236: LD_INT 333
6238: PPUSH
6239: LD_INT 234
6241: PPUSH
6242: CALL_OW 297
6246: PUSH
6247: LD_INT 6
6249: GREATER
6250: IFFALSE 6269
// ComMoveXY ( i , 333 , 234 ) else
6252: LD_VAR 0 1
6256: PPUSH
6257: LD_INT 333
6259: PPUSH
6260: LD_INT 234
6262: PPUSH
6263: CALL_OW 111
6267: GO 6311
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6269: LD_VAR 0 11
6273: PUSH
6274: LD_VAR 0 11
6278: PPUSH
6279: CALL_OW 256
6283: PUSH
6284: LD_INT 1000
6286: LESS
6287: AND
6288: IFFALSE 6311
// begin SetFuel ( hasVehicle , 100 ) ;
6290: LD_VAR 0 11
6294: PPUSH
6295: LD_INT 100
6297: PPUSH
6298: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6302: LD_VAR 0 1
6306: PPUSH
6307: CALL 66292 0 1
// end ; end ; end ;
6311: GO 6122
6313: POP
6314: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6315: LD_ADDR_VAR 0 5
6319: PUSH
6320: LD_INT 14
6322: PPUSH
6323: LD_INT 3
6325: PUSH
6326: LD_INT 24
6328: PUSH
6329: LD_INT 1000
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 21
6342: PUSH
6343: LD_INT 3
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: PPUSH
6354: CALL_OW 70
6358: ST_TO_ADDR
// if tmp and eng then
6359: LD_VAR 0 5
6363: PUSH
6364: LD_VAR 0 7
6368: AND
6369: IFFALSE 6475
// begin for i in eng do
6371: LD_ADDR_VAR 0 1
6375: PUSH
6376: LD_VAR 0 7
6380: PUSH
6381: FOR_IN
6382: IFFALSE 6473
// if IsInUnit ( i ) then
6384: LD_VAR 0 1
6388: PPUSH
6389: CALL_OW 310
6393: IFFALSE 6406
// ComExitBuilding ( i ) else
6395: LD_VAR 0 1
6399: PPUSH
6400: CALL_OW 122
6404: GO 6471
// if GetLives ( i ) = 1000 then
6406: LD_VAR 0 1
6410: PPUSH
6411: CALL_OW 256
6415: PUSH
6416: LD_INT 1000
6418: EQUAL
6419: IFFALSE 6441
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6421: LD_VAR 0 1
6425: PPUSH
6426: LD_VAR 0 5
6430: PUSH
6431: LD_INT 1
6433: ARRAY
6434: PPUSH
6435: CALL_OW 130
6439: GO 6471
// if GetLives ( i ) < 700 then
6441: LD_VAR 0 1
6445: PPUSH
6446: CALL_OW 256
6450: PUSH
6451: LD_INT 700
6453: LESS
6454: IFFALSE 6471
// ComMoveXY ( i , 333 , 234 ) ;
6456: LD_VAR 0 1
6460: PPUSH
6461: LD_INT 333
6463: PPUSH
6464: LD_INT 234
6466: PPUSH
6467: CALL_OW 111
6471: GO 6381
6473: POP
6474: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6475: LD_VAR 0 5
6479: NOT
6480: PUSH
6481: LD_VAR 0 7
6485: PPUSH
6486: LD_INT 3
6488: PUSH
6489: LD_INT 54
6491: PUSH
6492: EMPTY
6493: LIST
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 72
6503: AND
6504: IFFALSE 6593
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6506: LD_ADDR_VAR 0 1
6510: PUSH
6511: LD_VAR 0 7
6515: PPUSH
6516: LD_INT 3
6518: PUSH
6519: LD_INT 54
6521: PUSH
6522: EMPTY
6523: LIST
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 72
6533: PUSH
6534: FOR_IN
6535: IFFALSE 6591
// if GetLives ( i ) < 1000 then
6537: LD_VAR 0 1
6541: PPUSH
6542: CALL_OW 256
6546: PUSH
6547: LD_INT 1000
6549: LESS
6550: IFFALSE 6569
// ComMoveXY ( i , 333 , 234 ) else
6552: LD_VAR 0 1
6556: PPUSH
6557: LD_INT 333
6559: PPUSH
6560: LD_INT 234
6562: PPUSH
6563: CALL_OW 111
6567: GO 6589
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6569: LD_VAR 0 1
6573: PPUSH
6574: LD_INT 341
6576: PPUSH
6577: LD_INT 232
6579: PPUSH
6580: CALL_OW 428
6584: PPUSH
6585: CALL_OW 120
6589: GO 6534
6591: POP
6592: POP
// end ;
6593: PPOPN 11
6595: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6596: LD_EXP 42
6600: PPUSH
6601: CALL_OW 256
6605: PUSH
6606: LD_INT 1000
6608: LESS
6609: IFFALSE 6627
6611: GO 6613
6613: DISABLE
// begin enable ;
6614: ENABLE
// SetLives ( Omar , 1000 ) ;
6615: LD_EXP 42
6619: PPUSH
6620: LD_INT 1000
6622: PPUSH
6623: CALL_OW 234
// end ;
6627: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
6628: LD_EXP 23
6632: IFFALSE 7508
6634: GO 6636
6636: DISABLE
6637: LD_INT 0
6639: PPUSH
6640: PPUSH
// begin wait ( 0 0$25 ) ;
6641: LD_INT 875
6643: PPUSH
6644: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
6648: LD_EXP 50
6652: PPUSH
6653: LD_INT 2
6655: PUSH
6656: LD_INT 25
6658: PUSH
6659: LD_INT 1
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 25
6668: PUSH
6669: LD_INT 8
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: PPUSH
6681: CALL_OW 72
6685: PPUSH
6686: CALL_OW 122
// wait ( 0 0$3 ) ;
6690: LD_INT 105
6692: PPUSH
6693: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
6697: LD_EXP 50
6701: PUSH
6702: LD_EXP 42
6706: UNION
6707: PPUSH
6708: LD_INT 225
6710: PPUSH
6711: LD_INT 223
6713: PPUSH
6714: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
6718: LD_INT 22
6720: PUSH
6721: LD_INT 5
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 2
6730: PUSH
6731: LD_INT 25
6733: PUSH
6734: LD_INT 1
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 25
6743: PUSH
6744: LD_INT 8
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 21
6753: PUSH
6754: LD_INT 2
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PPUSH
6771: CALL_OW 69
6775: PPUSH
6776: LD_INT 167
6778: PPUSH
6779: LD_INT 231
6781: PPUSH
6782: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
6786: LD_EXP 50
6790: PPUSH
6791: LD_INT 25
6793: PUSH
6794: LD_INT 4
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PPUSH
6801: CALL_OW 72
6805: PPUSH
6806: LD_INT 222
6808: PPUSH
6809: LD_INT 229
6811: PPUSH
6812: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6816: LD_INT 35
6818: PPUSH
6819: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
6823: LD_ADDR_VAR 0 1
6827: PUSH
6828: LD_EXP 50
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 5
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 21
6845: PUSH
6846: LD_INT 2
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 69
6861: UNION
6862: PUSH
6863: FOR_IN
6864: IFFALSE 7499
// begin if IsDead ( i ) then
6866: LD_VAR 0 1
6870: PPUSH
6871: CALL_OW 301
6875: IFFALSE 6895
// begin omarSquad := omarSquad diff i ;
6877: LD_ADDR_EXP 50
6881: PUSH
6882: LD_EXP 50
6886: PUSH
6887: LD_VAR 0 1
6891: DIFF
6892: ST_TO_ADDR
// continue ;
6893: GO 6863
// end ; if GetClass ( i ) in [ 1 , 8 ] then
6895: LD_VAR 0 1
6899: PPUSH
6900: CALL_OW 257
6904: PUSH
6905: LD_INT 1
6907: PUSH
6908: LD_INT 8
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: IN
6915: IFFALSE 7109
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6917: LD_VAR 0 1
6921: PPUSH
6922: CALL_OW 256
6926: PUSH
6927: LD_INT 700
6929: LESS
6930: PUSH
6931: LD_VAR 0 1
6935: PPUSH
6936: CALL_OW 110
6940: PUSH
6941: LD_INT 0
6943: EQUAL
6944: AND
6945: IFFALSE 6974
// begin SetTag ( i , 1 ) ;
6947: LD_VAR 0 1
6951: PPUSH
6952: LD_INT 1
6954: PPUSH
6955: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 222
6966: PPUSH
6967: LD_INT 229
6969: PPUSH
6970: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6974: LD_VAR 0 1
6978: PPUSH
6979: CALL_OW 256
6983: PUSH
6984: LD_INT 1000
6986: EQUAL
6987: PUSH
6988: LD_VAR 0 1
6992: PPUSH
6993: CALL_OW 110
6997: PUSH
6998: LD_INT 1
7000: EQUAL
7001: AND
7002: IFFALSE 7016
// SetTag ( i , 0 ) ;
7004: LD_VAR 0 1
7008: PPUSH
7009: LD_INT 0
7011: PPUSH
7012: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
7016: LD_VAR 0 1
7020: PPUSH
7021: CALL_OW 110
7025: PUSH
7026: LD_INT 0
7028: EQUAL
7029: PUSH
7030: LD_VAR 0 1
7034: PPUSH
7035: CALL_OW 256
7039: PUSH
7040: LD_INT 700
7042: GREATEREQUAL
7043: AND
7044: PUSH
7045: LD_VAR 0 1
7049: PPUSH
7050: CALL_OW 314
7054: NOT
7055: AND
7056: IFFALSE 7109
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
7058: LD_INT 18
7060: PPUSH
7061: LD_INT 22
7063: PUSH
7064: LD_INT 3
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL_OW 70
7075: IFFALSE 7094
// ComAgressiveMove ( i , 167 , 231 ) else
7077: LD_VAR 0 1
7081: PPUSH
7082: LD_INT 167
7084: PPUSH
7085: LD_INT 231
7087: PPUSH
7088: CALL_OW 114
7092: GO 7109
// ComAgressiveMove ( i , 106 , 153 ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: LD_INT 106
7101: PPUSH
7102: LD_INT 153
7104: PPUSH
7105: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 247
7118: PUSH
7119: LD_INT 2
7121: EQUAL
7122: IFFALSE 7497
// begin nearestPoint := [ 219 , 219 ] ;
7124: LD_ADDR_VAR 0 2
7128: PUSH
7129: LD_INT 219
7131: PUSH
7132: LD_INT 219
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
7139: LD_VAR 0 1
7143: PPUSH
7144: LD_INT 156
7146: PPUSH
7147: LD_INT 202
7149: PPUSH
7150: CALL_OW 297
7154: PUSH
7155: LD_VAR 0 1
7159: PPUSH
7160: LD_INT 219
7162: PPUSH
7163: LD_INT 219
7165: PPUSH
7166: CALL_OW 297
7170: LESS
7171: IFFALSE 7188
// nearestPoint := [ 156 , 202 ] ;
7173: LD_ADDR_VAR 0 2
7177: PUSH
7178: LD_INT 156
7180: PUSH
7181: LD_INT 202
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL_OW 256
7197: PUSH
7198: LD_INT 700
7200: LESS
7201: PUSH
7202: LD_VAR 0 1
7206: PPUSH
7207: CALL_OW 110
7211: PUSH
7212: LD_INT 0
7214: EQUAL
7215: AND
7216: IFFALSE 7257
// begin SetTag ( i , 1 ) ;
7218: LD_VAR 0 1
7222: PPUSH
7223: LD_INT 1
7225: PPUSH
7226: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_VAR 0 2
7239: PUSH
7240: LD_INT 1
7242: ARRAY
7243: PPUSH
7244: LD_VAR 0 2
7248: PUSH
7249: LD_INT 2
7251: ARRAY
7252: PPUSH
7253: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
7257: LD_VAR 0 1
7261: PPUSH
7262: CALL_OW 256
7266: PUSH
7267: LD_INT 700
7269: LESS
7270: PUSH
7271: LD_VAR 0 1
7275: PPUSH
7276: CALL_OW 110
7280: PUSH
7281: LD_INT 1
7283: EQUAL
7284: AND
7285: PUSH
7286: LD_VAR 0 1
7290: PPUSH
7291: CALL_OW 311
7295: AND
7296: PUSH
7297: LD_VAR 0 1
7301: PPUSH
7302: LD_VAR 0 2
7306: PUSH
7307: LD_INT 1
7309: ARRAY
7310: PPUSH
7311: LD_VAR 0 2
7315: PUSH
7316: LD_INT 2
7318: ARRAY
7319: PPUSH
7320: CALL_OW 297
7324: PUSH
7325: LD_INT 10
7327: LESS
7328: AND
7329: IFFALSE 7340
// ComRepairVehicleAndReturn ( i ) ;
7331: LD_VAR 0 1
7335: PPUSH
7336: CALL 66292 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
7340: LD_VAR 0 1
7344: PPUSH
7345: CALL_OW 256
7349: PUSH
7350: LD_INT 1000
7352: EQUAL
7353: PUSH
7354: LD_VAR 0 1
7358: PPUSH
7359: CALL_OW 110
7363: PUSH
7364: LD_INT 1
7366: EQUAL
7367: AND
7368: PUSH
7369: LD_VAR 0 1
7373: PPUSH
7374: CALL_OW 311
7378: AND
7379: IFFALSE 7393
// SetTag ( i , 0 ) ;
7381: LD_VAR 0 1
7385: PPUSH
7386: LD_INT 0
7388: PPUSH
7389: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 110
7402: PUSH
7403: LD_INT 0
7405: EQUAL
7406: PUSH
7407: LD_VAR 0 1
7411: PPUSH
7412: CALL_OW 256
7416: PUSH
7417: LD_INT 700
7419: GREATEREQUAL
7420: AND
7421: PUSH
7422: LD_VAR 0 1
7426: PPUSH
7427: CALL_OW 311
7431: AND
7432: PUSH
7433: LD_VAR 0 1
7437: PPUSH
7438: CALL_OW 314
7442: NOT
7443: AND
7444: IFFALSE 7497
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
7446: LD_INT 18
7448: PPUSH
7449: LD_INT 22
7451: PUSH
7452: LD_INT 3
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 70
7463: IFFALSE 7482
// ComAgressiveMove ( i , 167 , 231 ) else
7465: LD_VAR 0 1
7469: PPUSH
7470: LD_INT 167
7472: PPUSH
7473: LD_INT 231
7475: PPUSH
7476: CALL_OW 114
7480: GO 7497
// ComAgressiveMove ( i , 106 , 153 ) ;
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_INT 106
7489: PPUSH
7490: LD_INT 153
7492: PPUSH
7493: CALL_OW 114
// end ; end ;
7497: GO 6863
7499: POP
7500: POP
// until not omarSquad ;
7501: LD_EXP 50
7505: NOT
7506: IFFALSE 6816
// end ;
7508: PPOPN 2
7510: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , heikeInConvoy ; begin
7511: LD_INT 0
7513: PPUSH
7514: PPUSH
7515: PPUSH
7516: PPUSH
7517: PPUSH
7518: PPUSH
7519: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
7520: LD_INT 20
7522: PPUSH
7523: LD_INT 1
7525: PPUSH
7526: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
7530: LD_INT 175
7532: PPUSH
7533: CALL_OW 67
// heikeInConvoy := false ;
7537: LD_ADDR_VAR 0 7
7541: PUSH
7542: LD_INT 0
7544: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
7545: LD_ADDR_VAR 0 3
7549: PUSH
7550: LD_INT 20
7552: PPUSH
7553: LD_INT 22
7555: PUSH
7556: LD_INT 2
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 3
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: LD_INT 34
7571: PUSH
7572: LD_INT 88
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 34
7581: PUSH
7582: LD_INT 31
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 33
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 70
7617: ST_TO_ADDR
// for i in tmp do
7618: LD_ADDR_VAR 0 2
7622: PUSH
7623: LD_VAR 0 3
7627: PUSH
7628: FOR_IN
7629: IFFALSE 7667
// if IsDrivenBy ( i ) = Heike then
7631: LD_VAR 0 2
7635: PPUSH
7636: CALL_OW 311
7640: PUSH
7641: LD_EXP 32
7645: EQUAL
7646: IFFALSE 7665
// begin heikeInConvoy := true ;
7648: LD_ADDR_VAR 0 7
7652: PUSH
7653: LD_INT 1
7655: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
7656: LD_STRING QHeikeConvoy
7658: PPUSH
7659: CALL_OW 97
// break ;
7663: GO 7667
// end ;
7665: GO 7628
7667: POP
7668: POP
// if not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
7669: LD_VAR 0 7
7673: NOT
7674: PUSH
7675: LD_VAR 0 3
7679: PPUSH
7680: LD_INT 2
7682: PUSH
7683: LD_INT 34
7685: PUSH
7686: LD_INT 32
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: LD_INT 34
7695: PUSH
7696: LD_INT 51
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: LIST
7707: PPUSH
7708: CALL_OW 72
7712: AND
7713: IFFALSE 7730
// if Query ( QConvoy ) = 1 then
7715: LD_STRING QConvoy
7717: PPUSH
7718: CALL_OW 97
7722: PUSH
7723: LD_INT 1
7725: EQUAL
7726: IFFALSE 7730
// break ;
7728: GO 7734
// until false ;
7730: LD_INT 0
7732: IFFALSE 7530
// SetAreaMapShow ( oilArea , 0 ) ;
7734: LD_INT 20
7736: PPUSH
7737: LD_INT 0
7739: PPUSH
7740: CALL_OW 424
// data := [ ] ;
7744: LD_ADDR_VAR 0 4
7748: PUSH
7749: EMPTY
7750: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
7751: LD_ADDR_VAR 0 5
7755: PUSH
7756: LD_INT 60
7758: PUSH
7759: LD_INT 50
7761: PUSH
7762: LD_INT 40
7764: PUSH
7765: LD_INT 30
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: PUSH
7774: LD_OWVAR 67
7778: ARRAY
7779: ST_TO_ADDR
// for i in tmp do
7780: LD_ADDR_VAR 0 2
7784: PUSH
7785: LD_VAR 0 3
7789: PUSH
7790: FOR_IN
7791: IFFALSE 7877
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , ] ) ;
7793: LD_ADDR_VAR 0 4
7797: PUSH
7798: LD_VAR 0 4
7802: PPUSH
7803: LD_VAR 0 2
7807: PUSH
7808: LD_VAR 0 2
7812: PPUSH
7813: CALL_OW 311
7817: PUSH
7818: LD_VAR 0 2
7822: PPUSH
7823: CALL_OW 256
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: PPUSH
7833: CALL 64592 0 2
7837: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
7838: LD_VAR 0 2
7842: PPUSH
7843: CALL_OW 311
7847: PPUSH
7848: CALL_OW 64
// RemoveUnit ( i ) ;
7852: LD_VAR 0 2
7856: PPUSH
7857: CALL_OW 64
// chance := chance + 20 ;
7861: LD_ADDR_VAR 0 5
7865: PUSH
7866: LD_VAR 0 5
7870: PUSH
7871: LD_INT 20
7873: PLUS
7874: ST_TO_ADDR
// end ;
7875: GO 7790
7877: POP
7878: POP
// wait ( rand ( 2 2$30 , 3 3$30 ) ) ;
7879: LD_INT 5250
7881: PPUSH
7882: LD_INT 7350
7884: PPUSH
7885: CALL_OW 12
7889: PPUSH
7890: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7894: LD_INT 35
7896: PPUSH
7897: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
7901: LD_INT 22
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 92
7913: PUSH
7914: LD_INT 261
7916: PUSH
7917: LD_INT 71
7919: PUSH
7920: LD_INT 12
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PPUSH
7933: CALL_OW 69
7937: NOT
7938: PUSH
7939: LD_INT 277
7941: PPUSH
7942: LD_INT 80
7944: PPUSH
7945: CALL_OW 428
7949: NOT
7950: AND
7951: IFFALSE 7894
// for i in data do
7953: LD_ADDR_VAR 0 2
7957: PUSH
7958: LD_VAR 0 4
7962: PUSH
7963: FOR_IN
7964: IFFALSE 8268
// begin uc_nation := GetNation ( i [ 1 ] ) ;
7966: LD_ADDR_OWVAR 21
7970: PUSH
7971: LD_VAR 0 2
7975: PUSH
7976: LD_INT 1
7978: ARRAY
7979: PPUSH
7980: CALL_OW 248
7984: ST_TO_ADDR
// uc_side := 2 ;
7985: LD_ADDR_OWVAR 20
7989: PUSH
7990: LD_INT 2
7992: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 1
8000: ARRAY
8001: PPUSH
8002: CALL_OW 265
8006: PPUSH
8007: LD_VAR 0 2
8011: PUSH
8012: LD_INT 1
8014: ARRAY
8015: PPUSH
8016: CALL_OW 262
8020: PPUSH
8021: LD_VAR 0 2
8025: PUSH
8026: LD_INT 1
8028: ARRAY
8029: PPUSH
8030: CALL_OW 263
8034: PPUSH
8035: LD_VAR 0 2
8039: PUSH
8040: LD_INT 1
8042: ARRAY
8043: PPUSH
8044: CALL_OW 264
8048: PPUSH
8049: LD_INT 66
8051: PPUSH
8052: CALL 32158 0 5
// vehicle := CreateVehicle ;
8056: LD_ADDR_VAR 0 6
8060: PUSH
8061: CALL_OW 45
8065: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
8066: LD_VAR 0 6
8070: PPUSH
8071: LD_INT 277
8073: PPUSH
8074: LD_INT 80
8076: PPUSH
8077: LD_INT 4
8079: PPUSH
8080: LD_INT 0
8082: PPUSH
8083: CALL 66732 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
8087: LD_VAR 0 2
8091: PUSH
8092: LD_INT 2
8094: ARRAY
8095: PPUSH
8096: LD_VAR 0 6
8100: PPUSH
8101: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
8105: LD_VAR 0 6
8109: PPUSH
8110: LD_VAR 0 2
8114: PUSH
8115: LD_INT 3
8117: ARRAY
8118: PPUSH
8119: CALL_OW 234
// if Prob ( chance ) then
8123: LD_VAR 0 5
8127: PPUSH
8128: CALL_OW 13
8132: IFFALSE 8173
// begin if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
8134: LD_VAR 0 6
8138: PPUSH
8139: CALL_OW 264
8143: PUSH
8144: LD_INT 32
8146: PUSH
8147: LD_INT 51
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: IN
8154: IFFALSE 8171
// SetCargo ( vehicle , mat_oil , 100 ) ;
8156: LD_VAR 0 6
8160: PPUSH
8161: LD_INT 2
8163: PPUSH
8164: LD_INT 100
8166: PPUSH
8167: CALL_OW 290
// end else
8171: GO 8199
// if i [ 3 ] > 333 then
8173: LD_VAR 0 2
8177: PUSH
8178: LD_INT 3
8180: ARRAY
8181: PUSH
8182: LD_INT 333
8184: GREATER
8185: IFFALSE 8199
// SetLives ( vehicle , 333 ) ;
8187: LD_VAR 0 6
8191: PPUSH
8192: LD_INT 333
8194: PPUSH
8195: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
8199: LD_VAR 0 6
8203: PPUSH
8204: LD_INT 250
8206: PPUSH
8207: LD_INT 119
8209: PPUSH
8210: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
8214: LD_VAR 0 6
8218: PPUSH
8219: LD_INT 211
8221: PPUSH
8222: LD_INT 80
8224: PPUSH
8225: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
8229: LD_INT 175
8231: PPUSH
8232: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
8236: LD_INT 20
8238: PPUSH
8239: LD_INT 22
8241: PUSH
8242: LD_INT 2
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 52
8251: PUSH
8252: EMPTY
8253: LIST
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PPUSH
8259: CALL_OW 70
8263: NOT
8264: IFFALSE 8229
// end ;
8266: GO 7963
8268: POP
8269: POP
// wait ( 0 0$30 ) ;
8270: LD_INT 1050
8272: PPUSH
8273: CALL_OW 67
// GoForOil ;
8277: CALL 7511 0 0
// end ; end_of_file
8281: LD_VAR 0 1
8285: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
8286: LD_INT 0
8288: PPUSH
// uc_side := side ;
8289: LD_ADDR_OWVAR 20
8293: PUSH
8294: LD_VAR 0 1
8298: ST_TO_ADDR
// uc_nation := nation ;
8299: LD_ADDR_OWVAR 21
8303: PUSH
8304: LD_VAR 0 2
8308: ST_TO_ADDR
// vc_chassis := chassis ;
8309: LD_ADDR_OWVAR 37
8313: PUSH
8314: LD_VAR 0 3
8318: ST_TO_ADDR
// vc_engine := engine ;
8319: LD_ADDR_OWVAR 39
8323: PUSH
8324: LD_VAR 0 4
8328: ST_TO_ADDR
// vc_control := control ;
8329: LD_ADDR_OWVAR 38
8333: PUSH
8334: LD_VAR 0 5
8338: ST_TO_ADDR
// vc_weapon := weapon ;
8339: LD_ADDR_OWVAR 40
8343: PUSH
8344: LD_VAR 0 6
8348: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8349: LD_ADDR_OWVAR 41
8353: PUSH
8354: LD_VAR 0 7
8358: ST_TO_ADDR
// result := CreateVehicle ;
8359: LD_ADDR_VAR 0 8
8363: PUSH
8364: CALL_OW 45
8368: ST_TO_ADDR
// end ;
8369: LD_VAR 0 8
8373: RET
// export function SayX ( units , ident ) ; var i ; begin
8374: LD_INT 0
8376: PPUSH
8377: PPUSH
// result := false ;
8378: LD_ADDR_VAR 0 3
8382: PUSH
8383: LD_INT 0
8385: ST_TO_ADDR
// if not units then
8386: LD_VAR 0 1
8390: NOT
8391: IFFALSE 8395
// exit ;
8393: GO 8449
// for i in units do
8395: LD_ADDR_VAR 0 4
8399: PUSH
8400: LD_VAR 0 1
8404: PUSH
8405: FOR_IN
8406: IFFALSE 8447
// if IsOk ( i ) then
8408: LD_VAR 0 4
8412: PPUSH
8413: CALL_OW 302
8417: IFFALSE 8445
// begin Say ( i , ident ) ;
8419: LD_VAR 0 4
8423: PPUSH
8424: LD_VAR 0 2
8428: PPUSH
8429: CALL_OW 88
// result := i ;
8433: LD_ADDR_VAR 0 3
8437: PUSH
8438: LD_VAR 0 4
8442: ST_TO_ADDR
// break ;
8443: GO 8447
// end ;
8445: GO 8405
8447: POP
8448: POP
// end ;
8449: LD_VAR 0 3
8453: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
8454: LD_INT 0
8456: PPUSH
8457: PPUSH
// InitUc ;
8458: CALL_OW 18
// InitHc ;
8462: CALL_OW 19
// uc_side := 0 ;
8466: LD_ADDR_OWVAR 20
8470: PUSH
8471: LD_INT 0
8473: ST_TO_ADDR
// uc_nation := 0 ;
8474: LD_ADDR_OWVAR 21
8478: PUSH
8479: LD_INT 0
8481: ST_TO_ADDR
// for i = 1 to amount do
8482: LD_ADDR_VAR 0 4
8486: PUSH
8487: DOUBLE
8488: LD_INT 1
8490: DEC
8491: ST_TO_ADDR
8492: LD_VAR 0 2
8496: PUSH
8497: FOR_TO
8498: IFFALSE 8580
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
8500: LD_ADDR_OWVAR 29
8504: PUSH
8505: LD_INT 9
8507: PPUSH
8508: LD_INT 12
8510: PPUSH
8511: CALL_OW 12
8515: PUSH
8516: LD_INT 9
8518: PPUSH
8519: LD_INT 12
8521: PPUSH
8522: CALL_OW 12
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
8531: LD_ADDR_OWVAR 35
8535: PUSH
8536: LD_INT 1
8538: NEG
8539: PPUSH
8540: LD_INT 1
8542: PPUSH
8543: CALL_OW 12
8547: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8548: LD_INT 0
8550: PPUSH
8551: LD_INT 12
8553: PPUSH
8554: LD_INT 1
8556: PPUSH
8557: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
8561: CALL_OW 44
8565: PPUSH
8566: LD_VAR 0 1
8570: PPUSH
8571: LD_INT 0
8573: PPUSH
8574: CALL_OW 49
// end ;
8578: GO 8497
8580: POP
8581: POP
// InitHc ;
8582: CALL_OW 19
// end ;
8586: LD_VAR 0 3
8590: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
8591: LD_INT 0
8593: PPUSH
8594: PPUSH
// uc_side := 0 ;
8595: LD_ADDR_OWVAR 20
8599: PUSH
8600: LD_INT 0
8602: ST_TO_ADDR
// uc_nation := 0 ;
8603: LD_ADDR_OWVAR 21
8607: PUSH
8608: LD_INT 0
8610: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
8611: LD_INT 7
8613: PPUSH
8614: LD_INT 6
8616: PUSH
8617: LD_INT 5
8619: PUSH
8620: LD_INT 4
8622: PUSH
8623: LD_INT 3
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: PUSH
8632: LD_OWVAR 67
8636: ARRAY
8637: PPUSH
8638: CALL 8454 0 2
// for i = 1 to 2 do
8642: LD_ADDR_VAR 0 4
8646: PUSH
8647: DOUBLE
8648: LD_INT 1
8650: DEC
8651: ST_TO_ADDR
8652: LD_INT 2
8654: PUSH
8655: FOR_TO
8656: IFFALSE 8693
// begin vc_chassis := class_mastodont ;
8658: LD_ADDR_OWVAR 37
8662: PUSH
8663: LD_INT 31
8665: ST_TO_ADDR
// vc_control := control_rider ;
8666: LD_ADDR_OWVAR 38
8670: PUSH
8671: LD_INT 4
8673: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
8674: CALL_OW 45
8678: PPUSH
8679: LD_VAR 0 1
8683: PPUSH
8684: LD_INT 0
8686: PPUSH
8687: CALL 63509 0 3
// end ;
8691: GO 8655
8693: POP
8694: POP
// InitHc ;
8695: CALL_OW 19
// for i := 1 to 4 do
8699: LD_ADDR_VAR 0 4
8703: PUSH
8704: DOUBLE
8705: LD_INT 1
8707: DEC
8708: ST_TO_ADDR
8709: LD_INT 4
8711: PUSH
8712: FOR_TO
8713: IFFALSE 8750
// begin hc_class := class_horse ;
8715: LD_ADDR_OWVAR 28
8719: PUSH
8720: LD_INT 21
8722: ST_TO_ADDR
// hc_gallery :=  ;
8723: LD_ADDR_OWVAR 33
8727: PUSH
8728: LD_STRING 
8730: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
8731: CALL_OW 44
8735: PPUSH
8736: LD_VAR 0 1
8740: PPUSH
8741: LD_INT 0
8743: PPUSH
8744: CALL_OW 49
// end ;
8748: GO 8712
8750: POP
8751: POP
// InitHc ;
8752: CALL_OW 19
// for i = 1 to 5 do
8756: LD_ADDR_VAR 0 4
8760: PUSH
8761: DOUBLE
8762: LD_INT 1
8764: DEC
8765: ST_TO_ADDR
8766: LD_INT 5
8768: PUSH
8769: FOR_TO
8770: IFFALSE 8824
// begin hc_class = class_tiger ;
8772: LD_ADDR_OWVAR 28
8776: PUSH
8777: LD_INT 14
8779: ST_TO_ADDR
// hc_gallery =  ;
8780: LD_ADDR_OWVAR 33
8784: PUSH
8785: LD_STRING 
8787: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
8788: LD_ADDR_OWVAR 35
8792: PUSH
8793: LD_INT 7
8795: NEG
8796: PPUSH
8797: LD_INT 7
8799: PPUSH
8800: CALL_OW 12
8804: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
8805: CALL_OW 44
8809: PPUSH
8810: LD_VAR 0 1
8814: PPUSH
8815: LD_INT 0
8817: PPUSH
8818: CALL 63509 0 3
// end ;
8822: GO 8769
8824: POP
8825: POP
// InitHc ;
8826: CALL_OW 19
// for i := 1 to 4 do
8830: LD_ADDR_VAR 0 4
8834: PUSH
8835: DOUBLE
8836: LD_INT 1
8838: DEC
8839: ST_TO_ADDR
8840: LD_INT 4
8842: PUSH
8843: FOR_TO
8844: IFFALSE 8881
// begin hc_class := class_phororhacos ;
8846: LD_ADDR_OWVAR 28
8850: PUSH
8851: LD_INT 18
8853: ST_TO_ADDR
// hc_gallery :=  ;
8854: LD_ADDR_OWVAR 33
8858: PUSH
8859: LD_STRING 
8861: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
8862: CALL_OW 44
8866: PPUSH
8867: LD_VAR 0 1
8871: PPUSH
8872: LD_INT 0
8874: PPUSH
8875: CALL_OW 49
// end ;
8879: GO 8843
8881: POP
8882: POP
// InitHc ;
8883: CALL_OW 19
// for i := 1 to 4 do
8887: LD_ADDR_VAR 0 4
8891: PUSH
8892: DOUBLE
8893: LD_INT 1
8895: DEC
8896: ST_TO_ADDR
8897: LD_INT 4
8899: PUSH
8900: FOR_TO
8901: IFFALSE 8938
// begin hc_class := class_baggie ;
8903: LD_ADDR_OWVAR 28
8907: PUSH
8908: LD_INT 13
8910: ST_TO_ADDR
// hc_gallery :=  ;
8911: LD_ADDR_OWVAR 33
8915: PUSH
8916: LD_STRING 
8918: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
8919: CALL_OW 44
8923: PPUSH
8924: LD_VAR 0 1
8928: PPUSH
8929: LD_INT 0
8931: PPUSH
8932: CALL_OW 49
// end ;
8936: GO 8900
8938: POP
8939: POP
// InitHc ;
8940: CALL_OW 19
// for i := 1 to 7 do
8944: LD_ADDR_VAR 0 4
8948: PUSH
8949: DOUBLE
8950: LD_INT 1
8952: DEC
8953: ST_TO_ADDR
8954: LD_INT 7
8956: PUSH
8957: FOR_TO
8958: IFFALSE 8995
// begin hc_class := class_frog ;
8960: LD_ADDR_OWVAR 28
8964: PUSH
8965: LD_INT 19
8967: ST_TO_ADDR
// hc_gallery :=  ;
8968: LD_ADDR_OWVAR 33
8972: PUSH
8973: LD_STRING 
8975: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
8976: CALL_OW 44
8980: PPUSH
8981: LD_VAR 0 2
8985: PPUSH
8986: LD_INT 0
8988: PPUSH
8989: CALL_OW 49
// end ;
8993: GO 8957
8995: POP
8996: POP
// end ;
8997: LD_VAR 0 3
9001: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
9002: LD_INT 0
9004: PPUSH
9005: PPUSH
9006: PPUSH
// if not observer or not unit then
9007: LD_VAR 0 1
9011: NOT
9012: PUSH
9013: LD_VAR 0 2
9017: NOT
9018: OR
9019: IFFALSE 9023
// exit ;
9021: GO 9071
// if not See ( GetSide ( observer ) , unit ) then
9023: LD_VAR 0 1
9027: PPUSH
9028: CALL_OW 255
9032: PPUSH
9033: LD_VAR 0 2
9037: PPUSH
9038: CALL_OW 292
9042: NOT
9043: IFFALSE 9047
// exit ;
9045: GO 9071
// result := GetDistUnits ( observer , unit ) < 12 ;
9047: LD_ADDR_VAR 0 3
9051: PUSH
9052: LD_VAR 0 1
9056: PPUSH
9057: LD_VAR 0 2
9061: PPUSH
9062: CALL_OW 296
9066: PUSH
9067: LD_INT 12
9069: LESS
9070: ST_TO_ADDR
// end ;
9071: LD_VAR 0 3
9075: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
9076: LD_INT 0
9078: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
9079: LD_VAR 0 2
9083: PUSH
9084: LD_INT 1
9086: ARRAY
9087: PPUSH
9088: LD_VAR 0 2
9092: PUSH
9093: LD_INT 2
9095: ARRAY
9096: PPUSH
9097: CALL_OW 488
9101: PUSH
9102: LD_VAR 0 2
9106: PUSH
9107: LD_INT 1
9109: ARRAY
9110: PPUSH
9111: LD_VAR 0 2
9115: PUSH
9116: LD_INT 2
9118: ARRAY
9119: PPUSH
9120: CALL_OW 428
9124: PUSH
9125: LD_INT 0
9127: EQUAL
9128: AND
9129: IFFALSE 9163
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
9131: LD_VAR 0 1
9135: PPUSH
9136: LD_VAR 0 2
9140: PUSH
9141: LD_INT 1
9143: ARRAY
9144: PPUSH
9145: LD_VAR 0 2
9149: PUSH
9150: LD_INT 2
9152: ARRAY
9153: PPUSH
9154: LD_VAR 0 3
9158: PPUSH
9159: CALL_OW 48
// end ;
9163: LD_VAR 0 4
9167: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
9168: LD_INT 0
9170: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
9171: LD_VAR 0 1
9175: PPUSH
9176: LD_VAR 0 2
9180: PPUSH
9181: LD_VAR 0 3
9185: PPUSH
9186: LD_VAR 0 4
9190: PPUSH
9191: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
9195: LD_VAR 0 1
9199: PPUSH
9200: LD_VAR 0 2
9204: PPUSH
9205: LD_VAR 0 3
9209: PPUSH
9210: CALL_OW 331
// end ;
9214: LD_VAR 0 5
9218: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
9219: LD_INT 0
9221: PPUSH
// if not units then
9222: LD_VAR 0 1
9226: NOT
9227: IFFALSE 9231
// exit ;
9229: GO 9314
// result := true ;
9231: LD_ADDR_VAR 0 4
9235: PUSH
9236: LD_INT 1
9238: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
9239: LD_VAR 0 1
9243: PPUSH
9244: LD_INT 26
9246: PUSH
9247: LD_INT 1
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PPUSH
9254: CALL_OW 72
9258: PUSH
9259: LD_INT 1
9261: ARRAY
9262: PPUSH
9263: LD_VAR 0 2
9267: PPUSH
9268: CALL_OW 88
9272: NOT
9273: IFFALSE 9314
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
9275: LD_ADDR_VAR 0 4
9279: PUSH
9280: LD_VAR 0 1
9284: PPUSH
9285: LD_INT 26
9287: PUSH
9288: LD_INT 2
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PPUSH
9295: CALL_OW 72
9299: PUSH
9300: LD_INT 1
9302: ARRAY
9303: PPUSH
9304: LD_VAR 0 3
9308: PPUSH
9309: CALL_OW 88
9313: ST_TO_ADDR
// end ;
9314: LD_VAR 0 4
9318: RET
// export function SeeGroup ( side , group ) ; var i ; begin
9319: LD_INT 0
9321: PPUSH
9322: PPUSH
// if not group then
9323: LD_VAR 0 2
9327: NOT
9328: IFFALSE 9332
// exit ;
9330: GO 9377
// for i in group do
9332: LD_ADDR_VAR 0 4
9336: PUSH
9337: LD_VAR 0 2
9341: PUSH
9342: FOR_IN
9343: IFFALSE 9375
// if See ( side , i ) then
9345: LD_VAR 0 1
9349: PPUSH
9350: LD_VAR 0 4
9354: PPUSH
9355: CALL_OW 292
9359: IFFALSE 9373
// begin result := true ;
9361: LD_ADDR_VAR 0 3
9365: PUSH
9366: LD_INT 1
9368: ST_TO_ADDR
// exit ;
9369: POP
9370: POP
9371: GO 9377
// end ;
9373: GO 9342
9375: POP
9376: POP
// end ; end_of_file
9377: LD_VAR 0 3
9381: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
9382: LD_INT 0
9384: PPUSH
9385: PPUSH
9386: PPUSH
9387: PPUSH
9388: PPUSH
9389: PPUSH
9390: PPUSH
// uc_side := 3 ;
9391: LD_ADDR_OWVAR 20
9395: PUSH
9396: LD_INT 3
9398: ST_TO_ADDR
// uc_nation := 3 ;
9399: LD_ADDR_OWVAR 21
9403: PUSH
9404: LD_INT 3
9406: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
9407: LD_ADDR_EXP 51
9411: PUSH
9412: LD_STRING Morozov
9414: PPUSH
9415: CALL_OW 25
9419: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
9420: LD_EXP 51
9424: PPUSH
9425: LD_INT 52
9427: PPUSH
9428: CALL_OW 52
// if not gaidarKilled then
9432: LD_EXP 7
9436: NOT
9437: IFFALSE 9470
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
9439: LD_ADDR_EXP 52
9443: PUSH
9444: LD_STRING Gaydar
9446: PPUSH
9447: LD_INT 0
9449: PPUSH
9450: LD_STRING 
9452: PPUSH
9453: CALL 27143 0 3
9457: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
9458: LD_EXP 52
9462: PPUSH
9463: LD_INT 52
9465: PPUSH
9466: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
9470: LD_INT 52
9472: PPUSH
9473: LD_STRING lenin
9475: PPUSH
9476: CALL_OW 500
// ruOutsiders := [ ] ;
9480: LD_ADDR_EXP 54
9484: PUSH
9485: EMPTY
9486: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
9487: LD_ADDR_EXP 56
9491: PUSH
9492: EMPTY
9493: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
9494: LD_ADDR_EXP 57
9498: PUSH
9499: EMPTY
9500: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
9501: LD_ADDR_EXP 58
9505: PUSH
9506: EMPTY
9507: ST_TO_ADDR
// ruAttackers := [ ] ;
9508: LD_ADDR_EXP 59
9512: PUSH
9513: EMPTY
9514: ST_TO_ADDR
// waveStrength := 0 ;
9515: LD_ADDR_EXP 60
9519: PUSH
9520: LD_INT 0
9522: ST_TO_ADDR
// if not gaidarKilled then
9523: LD_EXP 7
9527: NOT
9528: IFFALSE 9538
// waveStrength := 2 ;
9530: LD_ADDR_EXP 60
9534: PUSH
9535: LD_INT 2
9537: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
9538: LD_ADDR_VAR 0 7
9542: PUSH
9543: LD_INT 22
9545: PUSH
9546: LD_INT 3
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PUSH
9553: LD_INT 21
9555: PUSH
9556: LD_INT 3
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PPUSH
9567: CALL_OW 69
9571: ST_TO_ADDR
// for i in tmp do
9572: LD_ADDR_VAR 0 2
9576: PUSH
9577: LD_VAR 0 7
9581: PUSH
9582: FOR_IN
9583: IFFALSE 9620
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9585: LD_VAR 0 2
9589: PPUSH
9590: LD_INT 5
9592: PUSH
9593: LD_INT 6
9595: PUSH
9596: LD_INT 7
9598: PUSH
9599: LD_INT 8
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: PUSH
9608: LD_OWVAR 67
9612: ARRAY
9613: PPUSH
9614: CALL_OW 241
9618: GO 9582
9620: POP
9621: POP
// for i := 1 to 3 do
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: DOUBLE
9628: LD_INT 1
9630: DEC
9631: ST_TO_ADDR
9632: LD_INT 3
9634: PUSH
9635: FOR_TO
9636: IFFALSE 9674
// begin PrepareHuman ( false , 1 , 0 ) ;
9638: LD_INT 0
9640: PPUSH
9641: LD_INT 1
9643: PPUSH
9644: LD_INT 0
9646: PPUSH
9647: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
9651: CALL_OW 44
9655: PPUSH
9656: LD_INT 75
9658: PPUSH
9659: LD_INT 49
9661: PPUSH
9662: LD_INT 3
9664: PPUSH
9665: LD_INT 0
9667: PPUSH
9668: CALL_OW 50
// end ;
9672: GO 9635
9674: POP
9675: POP
// for i := 1 to 4 do
9676: LD_ADDR_VAR 0 2
9680: PUSH
9681: DOUBLE
9682: LD_INT 1
9684: DEC
9685: ST_TO_ADDR
9686: LD_INT 4
9688: PUSH
9689: FOR_TO
9690: IFFALSE 9736
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
9692: LD_INT 0
9694: PPUSH
9695: LD_INT 1
9697: PPUSH
9698: LD_INT 2
9700: PPUSH
9701: CALL_OW 12
9705: PPUSH
9706: LD_INT 0
9708: PPUSH
9709: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
9713: CALL_OW 44
9717: PPUSH
9718: LD_INT 330
9720: PPUSH
9721: LD_INT 231
9723: PPUSH
9724: LD_INT 5
9726: PPUSH
9727: LD_INT 0
9729: PPUSH
9730: CALL_OW 50
// end ;
9734: GO 9689
9736: POP
9737: POP
// hc_class := 1 ;
9738: LD_ADDR_OWVAR 28
9742: PUSH
9743: LD_INT 1
9745: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
9746: CALL_OW 44
9750: PPUSH
9751: LD_INT 324
9753: PPUSH
9754: LD_INT 219
9756: PPUSH
9757: CALL_OW 428
9761: PPUSH
9762: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
9766: CALL_OW 44
9770: PPUSH
9771: LD_INT 316
9773: PPUSH
9774: LD_INT 223
9776: PPUSH
9777: CALL_OW 428
9781: PPUSH
9782: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
9786: LD_ADDR_VAR 0 7
9790: PUSH
9791: LD_INT 172
9793: PPUSH
9794: LD_INT 198
9796: PPUSH
9797: CALL_OW 428
9801: PPUSH
9802: CALL_OW 274
9806: PUSH
9807: LD_INT 189
9809: PPUSH
9810: LD_INT 156
9812: PPUSH
9813: CALL_OW 428
9817: PPUSH
9818: CALL_OW 274
9822: PUSH
9823: LD_INT 341
9825: PPUSH
9826: LD_INT 232
9828: PPUSH
9829: CALL_OW 428
9833: PPUSH
9834: CALL_OW 274
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: ST_TO_ADDR
// for i in tmp do
9844: LD_ADDR_VAR 0 2
9848: PUSH
9849: LD_VAR 0 7
9853: PUSH
9854: FOR_IN
9855: IFFALSE 9889
// begin SetResourceType ( i , mat_cans , 200 ) ;
9857: LD_VAR 0 2
9861: PPUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 200
9867: PPUSH
9868: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
9872: LD_VAR 0 2
9876: PPUSH
9877: LD_INT 2
9879: PPUSH
9880: LD_INT 200
9882: PPUSH
9883: CALL_OW 277
// end ;
9887: GO 9854
9889: POP
9890: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
9891: LD_ADDR_VAR 0 7
9895: PUSH
9896: LD_INT 177
9898: PUSH
9899: LD_INT 114
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: LD_INT 138
9908: PUSH
9909: LD_INT 96
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: ST_TO_ADDR
// for i := 1 to tmp do
9920: LD_ADDR_VAR 0 2
9924: PUSH
9925: DOUBLE
9926: LD_INT 1
9928: DEC
9929: ST_TO_ADDR
9930: LD_VAR 0 7
9934: PUSH
9935: FOR_TO
9936: IFFALSE 10019
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
9938: LD_INT 0
9940: PPUSH
9941: LD_INT 9
9943: PPUSH
9944: LD_INT 6
9946: PPUSH
9947: CALL_OW 380
// un := CreateHuman ;
9951: LD_ADDR_VAR 0 5
9955: PUSH
9956: CALL_OW 44
9960: ST_TO_ADDR
// SetDir ( un , 2 ) ;
9961: LD_VAR 0 5
9965: PPUSH
9966: LD_INT 2
9968: PPUSH
9969: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9973: LD_VAR 0 5
9977: PPUSH
9978: LD_VAR 0 7
9982: PUSH
9983: LD_VAR 0 2
9987: ARRAY
9988: PUSH
9989: LD_INT 1
9991: ARRAY
9992: PPUSH
9993: LD_VAR 0 7
9997: PUSH
9998: LD_VAR 0 2
10002: ARRAY
10003: PUSH
10004: LD_INT 2
10006: ARRAY
10007: PPUSH
10008: CALL_OW 428
10012: PPUSH
10013: CALL_OW 52
// end ;
10017: GO 9935
10019: POP
10020: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
10021: LD_ADDR_VAR 0 7
10025: PUSH
10026: LD_INT 198
10028: PUSH
10029: LD_INT 158
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 203
10038: PUSH
10039: LD_INT 166
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 181
10048: PUSH
10049: LD_INT 209
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 178
10058: PUSH
10059: LD_INT 196
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 181
10068: PUSH
10069: LD_INT 212
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: ST_TO_ADDR
// for i := 1 to tmp do
10083: LD_ADDR_VAR 0 2
10087: PUSH
10088: DOUBLE
10089: LD_INT 1
10091: DEC
10092: ST_TO_ADDR
10093: LD_VAR 0 7
10097: PUSH
10098: FOR_TO
10099: IFFALSE 10220
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
10101: LD_INT 0
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: LD_INT 4
10109: PUSH
10110: LD_INT 5
10112: PUSH
10113: LD_INT 6
10115: PUSH
10116: LD_INT 7
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: PUSH
10125: LD_OWVAR 67
10129: ARRAY
10130: PPUSH
10131: CALL_OW 380
// un := CreateHuman ;
10135: LD_ADDR_VAR 0 5
10139: PUSH
10140: CALL_OW 44
10144: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10145: LD_ADDR_VAR 0 4
10149: PUSH
10150: LD_VAR 0 7
10154: PUSH
10155: LD_VAR 0 2
10159: ARRAY
10160: PUSH
10161: LD_INT 1
10163: ARRAY
10164: PPUSH
10165: LD_VAR 0 7
10169: PUSH
10170: LD_VAR 0 2
10174: ARRAY
10175: PUSH
10176: LD_INT 2
10178: ARRAY
10179: PPUSH
10180: CALL_OW 428
10184: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
10185: LD_VAR 0 5
10189: PPUSH
10190: LD_VAR 0 4
10194: PPUSH
10195: CALL 59859 0 1
10199: PPUSH
10200: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
10204: LD_VAR 0 5
10208: PPUSH
10209: LD_VAR 0 4
10213: PPUSH
10214: CALL_OW 52
// end ;
10218: GO 10098
10220: POP
10221: POP
// for i := 1 to 3 do
10222: LD_ADDR_VAR 0 2
10226: PUSH
10227: DOUBLE
10228: LD_INT 1
10230: DEC
10231: ST_TO_ADDR
10232: LD_INT 3
10234: PUSH
10235: FOR_TO
10236: IFFALSE 10291
// begin InitHc ;
10238: CALL_OW 19
// uc_nation := 0 ;
10242: LD_ADDR_OWVAR 21
10246: PUSH
10247: LD_INT 0
10249: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
10250: LD_ADDR_OWVAR 28
10254: PUSH
10255: LD_INT 16
10257: ST_TO_ADDR
// un := CreateHuman ;
10258: LD_ADDR_VAR 0 5
10262: PUSH
10263: CALL_OW 44
10267: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
10268: LD_VAR 0 5
10272: PPUSH
10273: LD_INT 194
10275: PPUSH
10276: LD_INT 164
10278: PPUSH
10279: LD_INT 6
10281: PPUSH
10282: LD_INT 0
10284: PPUSH
10285: CALL_OW 50
// end ;
10289: GO 10235
10291: POP
10292: POP
// uc_nation := 3 ;
10293: LD_ADDR_OWVAR 21
10297: PUSH
10298: LD_INT 3
10300: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
10301: LD_INT 24
10303: PPUSH
10304: LD_INT 1
10306: PPUSH
10307: LD_INT 1
10309: PPUSH
10310: LD_INT 44
10312: PPUSH
10313: LD_INT 10
10315: PPUSH
10316: CALL 32158 0 5
// un := CreateVehicle ;
10320: LD_ADDR_VAR 0 5
10324: PUSH
10325: CALL_OW 45
10329: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
10330: LD_VAR 0 5
10334: PPUSH
10335: LD_INT 199
10337: PPUSH
10338: LD_INT 162
10340: PPUSH
10341: LD_INT 1
10343: PPUSH
10344: LD_INT 0
10346: PPUSH
10347: CALL 66732 0 5
// ComHold ( un ) ;
10351: LD_VAR 0 5
10355: PPUSH
10356: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
10360: LD_INT 0
10362: PPUSH
10363: LD_INT 3
10365: PPUSH
10366: LD_INT 4
10368: PPUSH
10369: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
10373: CALL_OW 44
10377: PPUSH
10378: LD_VAR 0 5
10382: PPUSH
10383: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
10387: LD_INT 24
10389: PPUSH
10390: LD_INT 1
10392: PPUSH
10393: LD_INT 1
10395: PPUSH
10396: LD_INT 45
10398: PPUSH
10399: LD_INT 10
10401: PPUSH
10402: CALL 32158 0 5
// un := CreateVehicle ;
10406: LD_ADDR_VAR 0 5
10410: PUSH
10411: CALL_OW 45
10415: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
10416: LD_VAR 0 5
10420: PPUSH
10421: LD_INT 129
10423: PPUSH
10424: LD_INT 93
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: LD_INT 0
10432: PPUSH
10433: CALL 66732 0 5
// ComHold ( un ) ;
10437: LD_VAR 0 5
10441: PPUSH
10442: CALL_OW 140
// if Difficulty > 1 then
10446: LD_OWVAR 67
10450: PUSH
10451: LD_INT 1
10453: GREATER
10454: IFFALSE 10628
// begin PrepareHuman ( false , 3 , 4 ) ;
10456: LD_INT 0
10458: PPUSH
10459: LD_INT 3
10461: PPUSH
10462: LD_INT 4
10464: PPUSH
10465: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
10469: CALL_OW 44
10473: PPUSH
10474: LD_VAR 0 5
10478: PPUSH
10479: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
10483: LD_INT 24
10485: PPUSH
10486: LD_INT 1
10488: PPUSH
10489: LD_INT 1
10491: PPUSH
10492: LD_INT 45
10494: PPUSH
10495: LD_INT 10
10497: PPUSH
10498: CALL 32158 0 5
// un := CreateVehicle ;
10502: LD_ADDR_VAR 0 5
10506: PUSH
10507: CALL_OW 45
10511: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 92 , 2 , false ) ;
10512: LD_VAR 0 5
10516: PPUSH
10517: LD_INT 134
10519: PPUSH
10520: LD_INT 92
10522: PPUSH
10523: LD_INT 2
10525: PPUSH
10526: LD_INT 0
10528: PPUSH
10529: CALL 66732 0 5
// ComHold ( un ) ;
10533: LD_VAR 0 5
10537: PPUSH
10538: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
10542: LD_INT 0
10544: PPUSH
10545: LD_INT 3
10547: PPUSH
10548: LD_INT 4
10550: PPUSH
10551: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
10555: CALL_OW 44
10559: PPUSH
10560: LD_VAR 0 5
10564: PPUSH
10565: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
10569: LD_INT 24
10571: PPUSH
10572: LD_INT 1
10574: PPUSH
10575: LD_INT 1
10577: PPUSH
10578: LD_INT 45
10580: PPUSH
10581: LD_INT 10
10583: PPUSH
10584: CALL 32158 0 5
// un := CreateVehicle ;
10588: LD_ADDR_VAR 0 5
10592: PUSH
10593: CALL_OW 45
10597: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
10598: LD_VAR 0 5
10602: PPUSH
10603: LD_INT 200
10605: PPUSH
10606: LD_INT 173
10608: PPUSH
10609: LD_INT 1
10611: PPUSH
10612: LD_INT 0
10614: PPUSH
10615: CALL 66732 0 5
// ComHold ( un ) ;
10619: LD_VAR 0 5
10623: PPUSH
10624: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
10628: LD_INT 0
10630: PPUSH
10631: LD_INT 3
10633: PPUSH
10634: LD_INT 4
10636: PPUSH
10637: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
10641: CALL_OW 44
10645: PPUSH
10646: LD_VAR 0 5
10650: PPUSH
10651: CALL_OW 52
// bc_type := b_armoury ;
10655: LD_ADDR_OWVAR 42
10659: PUSH
10660: LD_INT 4
10662: ST_TO_ADDR
// if Difficulty > 1 then
10663: LD_OWVAR 67
10667: PUSH
10668: LD_INT 1
10670: GREATER
10671: IFFALSE 10681
// bc_type := b_barracks ;
10673: LD_ADDR_OWVAR 42
10677: PUSH
10678: LD_INT 5
10680: ST_TO_ADDR
// bc_level := 6 ;
10681: LD_ADDR_OWVAR 43
10685: PUSH
10686: LD_INT 6
10688: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
10689: LD_INT 120
10691: PPUSH
10692: LD_INT 100
10694: PPUSH
10695: LD_INT 5
10697: PPUSH
10698: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
10702: LD_ADDR_VAR 0 2
10706: PUSH
10707: DOUBLE
10708: LD_INT 1
10710: DEC
10711: ST_TO_ADDR
10712: LD_INT 3
10714: PUSH
10715: LD_INT 3
10717: PUSH
10718: LD_INT 4
10720: PUSH
10721: LD_INT 4
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: PUSH
10730: LD_OWVAR 67
10734: ARRAY
10735: PUSH
10736: FOR_TO
10737: IFFALSE 10795
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
10739: LD_INT 0
10741: PPUSH
10742: LD_INT 1
10744: PUSH
10745: LD_INT 1
10747: PUSH
10748: LD_INT 9
10750: PUSH
10751: LD_INT 9
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: PUSH
10760: LD_OWVAR 67
10764: ARRAY
10765: PPUSH
10766: LD_INT 5
10768: PPUSH
10769: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
10773: CALL_OW 44
10777: PPUSH
10778: LD_INT 120
10780: PPUSH
10781: LD_INT 100
10783: PPUSH
10784: CALL_OW 428
10788: PPUSH
10789: CALL_OW 52
// end ;
10793: GO 10736
10795: POP
10796: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
10797: LD_ADDR_VAR 0 7
10801: PUSH
10802: LD_INT 135
10804: PUSH
10805: LD_INT 100
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 137
10814: PUSH
10815: LD_INT 92
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: ST_TO_ADDR
// for i := 1 to tmp do
10826: LD_ADDR_VAR 0 2
10830: PUSH
10831: DOUBLE
10832: LD_INT 1
10834: DEC
10835: ST_TO_ADDR
10836: LD_VAR 0 7
10840: PUSH
10841: FOR_TO
10842: IFFALSE 11012
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
10844: LD_INT 22
10846: PUSH
10847: LD_INT 22
10849: PUSH
10850: LD_INT 24
10852: PUSH
10853: LD_INT 24
10855: PUSH
10856: LD_INT 24
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: PUSH
10866: LD_OWVAR 67
10870: PUSH
10871: LD_INT 0
10873: PPUSH
10874: LD_INT 1
10876: PPUSH
10877: CALL_OW 12
10881: PLUS
10882: ARRAY
10883: PPUSH
10884: LD_INT 1
10886: PPUSH
10887: LD_INT 1
10889: PPUSH
10890: LD_INT 44
10892: PPUSH
10893: LD_INT 25
10895: PPUSH
10896: CALL 32158 0 5
// veh := CreateVehicle ;
10900: LD_ADDR_VAR 0 6
10904: PUSH
10905: CALL_OW 45
10909: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10910: LD_VAR 0 6
10914: PPUSH
10915: LD_INT 2
10917: PPUSH
10918: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
10922: LD_VAR 0 6
10926: PPUSH
10927: LD_VAR 0 7
10931: PUSH
10932: LD_VAR 0 2
10936: ARRAY
10937: PUSH
10938: LD_INT 1
10940: ARRAY
10941: PPUSH
10942: LD_VAR 0 7
10946: PUSH
10947: LD_VAR 0 2
10951: ARRAY
10952: PUSH
10953: LD_INT 2
10955: ARRAY
10956: PPUSH
10957: LD_INT 0
10959: PPUSH
10960: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
10964: LD_INT 0
10966: PPUSH
10967: LD_INT 3
10969: PPUSH
10970: LD_INT 6
10972: PPUSH
10973: CALL_OW 380
// un := CreateHuman ;
10977: LD_ADDR_VAR 0 5
10981: PUSH
10982: CALL_OW 44
10986: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10987: LD_VAR 0 5
10991: PPUSH
10992: LD_VAR 0 6
10996: PPUSH
10997: CALL_OW 52
// ComHold ( veh ) ;
11001: LD_VAR 0 6
11005: PPUSH
11006: CALL_OW 140
// end ;
11010: GO 10841
11012: POP
11013: POP
// tmp := [ 191 , 122 ] ;
11014: LD_ADDR_VAR 0 7
11018: PUSH
11019: LD_INT 191
11021: PUSH
11022: LD_INT 122
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
11029: LD_INT 24
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: LD_INT 44
11040: PPUSH
11041: LD_INT 30
11043: PPUSH
11044: CALL 32158 0 5
// ruBlockadeTank := CreateVehicle ;
11048: LD_ADDR_EXP 53
11052: PUSH
11053: CALL_OW 45
11057: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
11058: LD_EXP 53
11062: PPUSH
11063: LD_INT 2
11065: PPUSH
11066: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
11070: LD_EXP 53
11074: PPUSH
11075: LD_INT 191
11077: PPUSH
11078: LD_INT 122
11080: PPUSH
11081: LD_INT 0
11083: PPUSH
11084: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
11088: LD_INT 1
11090: PPUSH
11091: LD_INT 5
11093: PUSH
11094: LD_INT 6
11096: PUSH
11097: LD_INT 7
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: PUSH
11105: LD_OWVAR 67
11109: PUSH
11110: LD_INT 1
11112: MINUS
11113: ARRAY
11114: PPUSH
11115: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
11119: CALL_OW 44
11123: PPUSH
11124: LD_EXP 53
11128: PPUSH
11129: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
11133: LD_EXP 53
11137: PPUSH
11138: CALL_OW 140
// ruBlockadeSquad := [ ] ;
11142: LD_ADDR_EXP 55
11146: PUSH
11147: EMPTY
11148: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 , 6 ] [ Difficulty ] do
11149: LD_ADDR_VAR 0 2
11153: PUSH
11154: DOUBLE
11155: LD_INT 1
11157: DEC
11158: ST_TO_ADDR
11159: LD_INT 3
11161: PUSH
11162: LD_INT 4
11164: PUSH
11165: LD_INT 6
11167: PUSH
11168: LD_INT 6
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: PUSH
11177: LD_OWVAR 67
11181: ARRAY
11182: PUSH
11183: FOR_TO
11184: IFFALSE 11300
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11186: LD_INT 0
11188: PPUSH
11189: LD_INT 1
11191: PPUSH
11192: LD_INT 4
11194: PUSH
11195: LD_INT 5
11197: PUSH
11198: LD_INT 6
11200: PUSH
11201: LD_INT 7
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: PUSH
11210: LD_OWVAR 67
11214: ARRAY
11215: PPUSH
11216: CALL_OW 380
// un := CreateHuman ;
11220: LD_ADDR_VAR 0 5
11224: PUSH
11225: CALL_OW 44
11229: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
11230: LD_VAR 0 5
11234: PPUSH
11235: LD_INT 9
11237: PPUSH
11238: LD_INT 0
11240: PPUSH
11241: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
11245: LD_VAR 0 5
11249: PPUSH
11250: LD_INT 198
11252: PPUSH
11253: LD_INT 129
11255: PPUSH
11256: CALL_OW 118
// AddComCrawl ( un ) ;
11260: LD_VAR 0 5
11264: PPUSH
11265: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
11269: LD_ADDR_EXP 55
11273: PUSH
11274: LD_EXP 55
11278: PPUSH
11279: LD_EXP 55
11283: PUSH
11284: LD_INT 1
11286: PLUS
11287: PPUSH
11288: LD_VAR 0 5
11292: PPUSH
11293: CALL_OW 1
11297: ST_TO_ADDR
// end ;
11298: GO 11183
11300: POP
11301: POP
// PrepareHuman ( false , 4 , 5 ) ;
11302: LD_INT 0
11304: PPUSH
11305: LD_INT 4
11307: PPUSH
11308: LD_INT 5
11310: PPUSH
11311: CALL_OW 380
// un := CreateHuman ;
11315: LD_ADDR_VAR 0 5
11319: PUSH
11320: CALL_OW 44
11324: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
11325: LD_VAR 0 5
11329: PPUSH
11330: LD_INT 179
11332: PPUSH
11333: LD_INT 113
11335: PPUSH
11336: LD_INT 0
11338: PPUSH
11339: CALL_OW 48
// ComHold ( un ) ;
11343: LD_VAR 0 5
11347: PPUSH
11348: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
11352: LD_ADDR_EXP 55
11356: PUSH
11357: LD_EXP 55
11361: PPUSH
11362: LD_EXP 55
11366: PUSH
11367: LD_INT 1
11369: PLUS
11370: PPUSH
11371: LD_VAR 0 5
11375: PPUSH
11376: CALL_OW 1
11380: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
11381: LD_ADDR_VAR 0 7
11385: PUSH
11386: LD_INT 167
11388: PPUSH
11389: LD_INT 243
11391: PPUSH
11392: CALL_OW 428
11396: PPUSH
11397: CALL_OW 274
11401: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
11402: LD_VAR 0 7
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: LD_INT 1000
11412: PPUSH
11413: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
11417: LD_VAR 0 7
11421: PPUSH
11422: LD_INT 2
11424: PPUSH
11425: LD_INT 400
11427: PPUSH
11428: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
11432: LD_ADDR_VAR 0 7
11436: PUSH
11437: LD_INT 169
11439: PPUSH
11440: LD_INT 229
11442: PPUSH
11443: CALL_OW 428
11447: ST_TO_ADDR
// for i := 1 to 3 do
11448: LD_ADDR_VAR 0 2
11452: PUSH
11453: DOUBLE
11454: LD_INT 1
11456: DEC
11457: ST_TO_ADDR
11458: LD_INT 3
11460: PUSH
11461: FOR_TO
11462: IFFALSE 11553
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11464: LD_INT 0
11466: PPUSH
11467: LD_INT 1
11469: PPUSH
11470: LD_INT 4
11472: PUSH
11473: LD_INT 5
11475: PUSH
11476: LD_INT 5
11478: PUSH
11479: LD_INT 6
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: PUSH
11488: LD_OWVAR 67
11492: ARRAY
11493: PPUSH
11494: CALL_OW 380
// un := CreateHuman ;
11498: LD_ADDR_VAR 0 5
11502: PUSH
11503: CALL_OW 44
11507: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
11508: LD_VAR 0 5
11512: PPUSH
11513: LD_VAR 0 7
11517: PPUSH
11518: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
11522: LD_ADDR_EXP 56
11526: PUSH
11527: LD_EXP 56
11531: PPUSH
11532: LD_EXP 56
11536: PUSH
11537: LD_INT 1
11539: PLUS
11540: PPUSH
11541: LD_VAR 0 5
11545: PPUSH
11546: CALL_OW 1
11550: ST_TO_ADDR
// end ;
11551: GO 11461
11553: POP
11554: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
11555: LD_ADDR_VAR 0 7
11559: PUSH
11560: LD_INT 165
11562: PUSH
11563: LD_INT 227
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PUSH
11570: LD_INT 173
11572: PUSH
11573: LD_INT 231
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: ST_TO_ADDR
// for i := 1 to tmp do
11584: LD_ADDR_VAR 0 2
11588: PUSH
11589: DOUBLE
11590: LD_INT 1
11592: DEC
11593: ST_TO_ADDR
11594: LD_VAR 0 7
11598: PUSH
11599: FOR_TO
11600: IFFALSE 11721
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11602: LD_INT 0
11604: PPUSH
11605: LD_INT 1
11607: PPUSH
11608: LD_INT 4
11610: PUSH
11611: LD_INT 5
11613: PUSH
11614: LD_INT 5
11616: PUSH
11617: LD_INT 6
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: PUSH
11626: LD_OWVAR 67
11630: ARRAY
11631: PPUSH
11632: CALL_OW 380
// un := CreateHuman ;
11636: LD_ADDR_VAR 0 5
11640: PUSH
11641: CALL_OW 44
11645: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11646: LD_VAR 0 5
11650: PPUSH
11651: LD_VAR 0 7
11655: PUSH
11656: LD_VAR 0 2
11660: ARRAY
11661: PUSH
11662: LD_INT 1
11664: ARRAY
11665: PPUSH
11666: LD_VAR 0 7
11670: PUSH
11671: LD_VAR 0 2
11675: ARRAY
11676: PUSH
11677: LD_INT 2
11679: ARRAY
11680: PPUSH
11681: CALL_OW 428
11685: PPUSH
11686: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
11690: LD_ADDR_EXP 56
11694: PUSH
11695: LD_EXP 56
11699: PPUSH
11700: LD_EXP 56
11704: PUSH
11705: LD_INT 1
11707: PLUS
11708: PPUSH
11709: LD_VAR 0 5
11713: PPUSH
11714: CALL_OW 1
11718: ST_TO_ADDR
// end ;
11719: GO 11599
11721: POP
11722: POP
// for i := 1 to 2 do
11723: LD_ADDR_VAR 0 2
11727: PUSH
11728: DOUBLE
11729: LD_INT 1
11731: DEC
11732: ST_TO_ADDR
11733: LD_INT 2
11735: PUSH
11736: FOR_TO
11737: IFFALSE 11792
// begin InitHc ;
11739: CALL_OW 19
// uc_nation := 0 ;
11743: LD_ADDR_OWVAR 21
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11751: LD_ADDR_OWVAR 28
11755: PUSH
11756: LD_INT 16
11758: ST_TO_ADDR
// un := CreateHuman ;
11759: LD_ADDR_VAR 0 5
11763: PUSH
11764: CALL_OW 44
11768: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
11769: LD_VAR 0 5
11773: PPUSH
11774: LD_INT 166
11776: PPUSH
11777: LD_INT 233
11779: PPUSH
11780: LD_INT 2
11782: PPUSH
11783: LD_INT 0
11785: PPUSH
11786: CALL_OW 50
// end ;
11790: GO 11736
11792: POP
11793: POP
// uc_nation := 3 ;
11794: LD_ADDR_OWVAR 21
11798: PUSH
11799: LD_INT 3
11801: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
11802: LD_ADDR_VAR 0 7
11806: PUSH
11807: LD_INT 71
11809: PUSH
11810: LD_INT 52
11812: PUSH
11813: LD_INT 11
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: LIST
11820: ST_TO_ADDR
// for i in tmp do
11821: LD_ADDR_VAR 0 2
11825: PUSH
11826: LD_VAR 0 7
11830: PUSH
11831: FOR_IN
11832: IFFALSE 11876
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
11834: LD_VAR 0 2
11838: PPUSH
11839: CALL_OW 274
11843: PPUSH
11844: LD_INT 1
11846: PPUSH
11847: LD_INT 3000
11849: PPUSH
11850: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
11854: LD_VAR 0 2
11858: PPUSH
11859: CALL_OW 274
11863: PPUSH
11864: LD_INT 2
11866: PPUSH
11867: LD_INT 600
11869: PPUSH
11870: CALL_OW 277
// end ;
11874: GO 11831
11876: POP
11877: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
11878: LD_ADDR_VAR 0 7
11882: PUSH
11883: LD_INT 41
11885: PUSH
11886: LD_INT 57
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 38
11895: PUSH
11896: LD_INT 55
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 50
11905: PUSH
11906: LD_INT 73
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 51
11915: PUSH
11916: LD_INT 65
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 82
11925: PUSH
11926: LD_INT 93
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: LD_INT 87
11935: PUSH
11936: LD_INT 100
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 91
11945: PUSH
11946: LD_INT 109
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 84
11955: PUSH
11956: LD_INT 120
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 113
11965: PUSH
11966: LD_INT 153
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 123
11975: PUSH
11976: LD_INT 171
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 125
11985: PUSH
11986: LD_INT 178
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 125
11995: PUSH
11996: LD_INT 188
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 125
12005: PUSH
12006: LD_INT 201
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 33
12015: PUSH
12016: LD_INT 60
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 76
12025: PUSH
12026: LD_INT 95
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 84
12035: PUSH
12036: LD_INT 111
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 112
12045: PUSH
12046: LD_INT 165
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: ST_TO_ADDR
// for i := 1 to tmp do
12072: LD_ADDR_VAR 0 2
12076: PUSH
12077: DOUBLE
12078: LD_INT 1
12080: DEC
12081: ST_TO_ADDR
12082: LD_VAR 0 7
12086: PUSH
12087: FOR_TO
12088: IFFALSE 12335
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
12090: LD_ADDR_VAR 0 4
12094: PUSH
12095: LD_VAR 0 7
12099: PUSH
12100: LD_VAR 0 2
12104: ARRAY
12105: PUSH
12106: LD_INT 1
12108: ARRAY
12109: PPUSH
12110: LD_VAR 0 7
12114: PUSH
12115: LD_VAR 0 2
12119: ARRAY
12120: PUSH
12121: LD_INT 2
12123: ARRAY
12124: PPUSH
12125: CALL_OW 428
12129: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
12130: LD_VAR 0 4
12134: PPUSH
12135: CALL_OW 266
12139: PUSH
12140: LD_INT 4
12142: PUSH
12143: LD_INT 5
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: IN
12150: IFFALSE 12234
// begin for j := 1 to Difficulty do
12152: LD_ADDR_VAR 0 3
12156: PUSH
12157: DOUBLE
12158: LD_INT 1
12160: DEC
12161: ST_TO_ADDR
12162: LD_OWVAR 67
12166: PUSH
12167: FOR_TO
12168: IFFALSE 12230
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12170: LD_INT 0
12172: PPUSH
12173: LD_INT 1
12175: PPUSH
12176: LD_INT 4
12178: PUSH
12179: LD_INT 5
12181: PUSH
12182: LD_INT 5
12184: PUSH
12185: LD_INT 6
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: PUSH
12194: LD_OWVAR 67
12198: ARRAY
12199: PPUSH
12200: CALL_OW 380
// un := CreateHuman ;
12204: LD_ADDR_VAR 0 5
12208: PUSH
12209: CALL_OW 44
12213: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
12214: LD_VAR 0 5
12218: PPUSH
12219: LD_VAR 0 4
12223: PPUSH
12224: CALL_OW 52
// end ;
12228: GO 12167
12230: POP
12231: POP
// end else
12232: GO 12304
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12234: LD_INT 0
12236: PPUSH
12237: LD_INT 1
12239: PPUSH
12240: LD_INT 4
12242: PUSH
12243: LD_INT 5
12245: PUSH
12246: LD_INT 5
12248: PUSH
12249: LD_INT 6
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_OWVAR 67
12262: ARRAY
12263: PPUSH
12264: CALL_OW 380
// un := CreateHuman ;
12268: LD_ADDR_VAR 0 5
12272: PUSH
12273: CALL_OW 44
12277: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
12278: LD_VAR 0 5
12282: PPUSH
12283: LD_VAR 0 4
12287: PPUSH
12288: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
12292: LD_VAR 0 5
12296: PPUSH
12297: LD_INT 9
12299: PPUSH
12300: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12304: LD_ADDR_EXP 57
12308: PUSH
12309: LD_EXP 57
12313: PPUSH
12314: LD_EXP 57
12318: PUSH
12319: LD_INT 1
12321: PLUS
12322: PPUSH
12323: LD_VAR 0 5
12327: PPUSH
12328: CALL_OW 1
12332: ST_TO_ADDR
// end ;
12333: GO 12087
12335: POP
12336: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
12337: LD_ADDR_VAR 0 4
12341: PUSH
12342: LD_INT 10
12344: PPUSH
12345: LD_INT 22
12347: PUSH
12348: LD_INT 3
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 30
12357: PUSH
12358: LD_INT 32
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 58
12367: PUSH
12368: EMPTY
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: PPUSH
12376: CALL_OW 70
12380: PUSH
12381: FOR_IN
12382: IFFALSE 12516
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
12384: LD_INT 40
12386: PUSH
12387: LD_INT 50
12389: PUSH
12390: LD_INT 75
12392: PUSH
12393: LD_INT 80
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: PUSH
12402: LD_OWVAR 67
12406: ARRAY
12407: PUSH
12408: LD_EXP 7
12412: PUSH
12413: LD_INT 10
12415: MUL
12416: MINUS
12417: PPUSH
12418: CALL_OW 13
12422: NOT
12423: IFFALSE 12427
// continue ;
12425: GO 12381
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12427: LD_INT 0
12429: PPUSH
12430: LD_INT 1
12432: PPUSH
12433: LD_INT 4
12435: PUSH
12436: LD_INT 5
12438: PUSH
12439: LD_INT 5
12441: PUSH
12442: LD_INT 6
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: LD_OWVAR 67
12455: ARRAY
12456: PPUSH
12457: CALL_OW 380
// un := CreateHuman ;
12461: LD_ADDR_VAR 0 5
12465: PUSH
12466: CALL_OW 44
12470: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
12471: LD_VAR 0 5
12475: PPUSH
12476: LD_VAR 0 4
12480: PPUSH
12481: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12485: LD_ADDR_EXP 57
12489: PUSH
12490: LD_EXP 57
12494: PPUSH
12495: LD_EXP 57
12499: PUSH
12500: LD_INT 1
12502: PLUS
12503: PPUSH
12504: LD_VAR 0 5
12508: PPUSH
12509: CALL_OW 1
12513: ST_TO_ADDR
// end ;
12514: GO 12381
12516: POP
12517: POP
// for i := 1 to 5 do
12518: LD_ADDR_VAR 0 2
12522: PUSH
12523: DOUBLE
12524: LD_INT 1
12526: DEC
12527: ST_TO_ADDR
12528: LD_INT 5
12530: PUSH
12531: FOR_TO
12532: IFFALSE 12630
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12534: LD_INT 0
12536: PPUSH
12537: LD_INT 2
12539: PPUSH
12540: LD_INT 4
12542: PUSH
12543: LD_INT 5
12545: PUSH
12546: LD_INT 5
12548: PUSH
12549: LD_INT 6
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: LD_OWVAR 67
12562: ARRAY
12563: PPUSH
12564: CALL_OW 380
// un := CreateHuman ;
12568: LD_ADDR_VAR 0 5
12572: PUSH
12573: CALL_OW 44
12577: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
12578: LD_VAR 0 5
12582: PPUSH
12583: LD_INT 66
12585: PPUSH
12586: LD_INT 101
12588: PPUSH
12589: LD_INT 3
12591: PPUSH
12592: LD_INT 0
12594: PPUSH
12595: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12599: LD_ADDR_EXP 57
12603: PUSH
12604: LD_EXP 57
12608: PPUSH
12609: LD_EXP 57
12613: PUSH
12614: LD_INT 1
12616: PLUS
12617: PPUSH
12618: LD_VAR 0 5
12622: PPUSH
12623: CALL_OW 1
12627: ST_TO_ADDR
// end ;
12628: GO 12531
12630: POP
12631: POP
// tmp := [ ruFac1 , ruFac2 ] ;
12632: LD_ADDR_VAR 0 7
12636: PUSH
12637: LD_INT 72
12639: PUSH
12640: LD_INT 12
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: ST_TO_ADDR
// for i := 1 to tmp do
12647: LD_ADDR_VAR 0 2
12651: PUSH
12652: DOUBLE
12653: LD_INT 1
12655: DEC
12656: ST_TO_ADDR
12657: LD_VAR 0 7
12661: PUSH
12662: FOR_TO
12663: IFFALSE 12780
// for j := 1 to 6 do
12665: LD_ADDR_VAR 0 3
12669: PUSH
12670: DOUBLE
12671: LD_INT 1
12673: DEC
12674: ST_TO_ADDR
12675: LD_INT 6
12677: PUSH
12678: FOR_TO
12679: IFFALSE 12776
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12681: LD_INT 0
12683: PPUSH
12684: LD_INT 3
12686: PPUSH
12687: LD_INT 4
12689: PUSH
12690: LD_INT 5
12692: PUSH
12693: LD_INT 5
12695: PUSH
12696: LD_INT 6
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_OWVAR 67
12709: ARRAY
12710: PPUSH
12711: CALL_OW 380
// un := CreateHuman ;
12715: LD_ADDR_VAR 0 5
12719: PUSH
12720: CALL_OW 44
12724: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
12725: LD_VAR 0 5
12729: PPUSH
12730: LD_VAR 0 7
12734: PUSH
12735: LD_VAR 0 2
12739: ARRAY
12740: PPUSH
12741: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12745: LD_ADDR_EXP 57
12749: PUSH
12750: LD_EXP 57
12754: PPUSH
12755: LD_EXP 57
12759: PUSH
12760: LD_INT 1
12762: PLUS
12763: PPUSH
12764: LD_VAR 0 5
12768: PPUSH
12769: CALL_OW 1
12773: ST_TO_ADDR
// end ;
12774: GO 12678
12776: POP
12777: POP
12778: GO 12662
12780: POP
12781: POP
// for i := 1 to 3 do
12782: LD_ADDR_VAR 0 2
12786: PUSH
12787: DOUBLE
12788: LD_INT 1
12790: DEC
12791: ST_TO_ADDR
12792: LD_INT 3
12794: PUSH
12795: FOR_TO
12796: IFFALSE 12885
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12798: LD_INT 0
12800: PPUSH
12801: LD_INT 4
12803: PPUSH
12804: LD_INT 4
12806: PUSH
12807: LD_INT 5
12809: PUSH
12810: LD_INT 5
12812: PUSH
12813: LD_INT 6
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_OWVAR 67
12826: ARRAY
12827: PPUSH
12828: CALL_OW 380
// un := CreateHuman ;
12832: LD_ADDR_VAR 0 5
12836: PUSH
12837: CALL_OW 44
12841: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
12842: LD_VAR 0 5
12846: PPUSH
12847: LD_INT 17
12849: PPUSH
12850: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
12854: LD_ADDR_EXP 57
12858: PUSH
12859: LD_EXP 57
12863: PPUSH
12864: LD_EXP 57
12868: PUSH
12869: LD_INT 1
12871: PLUS
12872: PPUSH
12873: LD_VAR 0 5
12877: PPUSH
12878: CALL_OW 1
12882: ST_TO_ADDR
// end ;
12883: GO 12795
12885: POP
12886: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
12887: LD_ADDR_VAR 0 2
12891: PUSH
12892: DOUBLE
12893: LD_INT 1
12895: DEC
12896: ST_TO_ADDR
12897: LD_INT 2
12899: PUSH
12900: LD_INT 3
12902: PUSH
12903: LD_INT 3
12905: PUSH
12906: LD_INT 3
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: LD_OWVAR 67
12919: ARRAY
12920: PUSH
12921: FOR_TO
12922: IFFALSE 13042
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
12924: LD_INT 22
12926: PPUSH
12927: LD_INT 1
12929: PPUSH
12930: LD_INT 1
12932: PPUSH
12933: LD_INT 52
12935: PPUSH
12936: LD_INT 100
12938: PPUSH
12939: CALL 32158 0 5
// veh := CreateVehicle ;
12943: LD_ADDR_VAR 0 6
12947: PUSH
12948: CALL_OW 45
12952: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
12953: LD_INT 0
12955: PPUSH
12956: LD_INT 3
12958: PPUSH
12959: LD_INT 4
12961: PPUSH
12962: CALL_OW 380
// un := CreateHuman ;
12966: LD_ADDR_VAR 0 5
12970: PUSH
12971: CALL_OW 44
12975: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
12976: LD_VAR 0 6
12980: PPUSH
12981: LD_INT 107
12983: PPUSH
12984: LD_INT 182
12986: PPUSH
12987: LD_INT 4
12989: PPUSH
12990: LD_INT 0
12992: PPUSH
12993: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
12997: LD_VAR 0 5
13001: PPUSH
13002: LD_VAR 0 6
13006: PPUSH
13007: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13011: LD_ADDR_EXP 57
13015: PUSH
13016: LD_EXP 57
13020: PPUSH
13021: LD_EXP 57
13025: PUSH
13026: LD_INT 1
13028: PLUS
13029: PPUSH
13030: LD_VAR 0 5
13034: PPUSH
13035: CALL_OW 1
13039: ST_TO_ADDR
// end ;
13040: GO 12921
13042: POP
13043: POP
// InitHc ;
13044: CALL_OW 19
// for i := 1 to [ 4 , 6 , 8 , 12 ] [ Difficulty ] do
13048: LD_ADDR_VAR 0 2
13052: PUSH
13053: DOUBLE
13054: LD_INT 1
13056: DEC
13057: ST_TO_ADDR
13058: LD_INT 4
13060: PUSH
13061: LD_INT 6
13063: PUSH
13064: LD_INT 8
13066: PUSH
13067: LD_INT 12
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: PUSH
13076: LD_OWVAR 67
13080: ARRAY
13081: PUSH
13082: FOR_TO
13083: IFFALSE 13178
// begin uc_nation := 0 ;
13085: LD_ADDR_OWVAR 21
13089: PUSH
13090: LD_INT 0
13092: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
13093: LD_ADDR_OWVAR 28
13097: PUSH
13098: LD_INT 15
13100: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
13101: LD_ADDR_OWVAR 31
13105: PUSH
13106: LD_INT 3
13108: PUSH
13109: LD_INT 0
13111: PUSH
13112: LD_INT 0
13114: PUSH
13115: LD_INT 0
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: ST_TO_ADDR
// un := CreateHuman ;
13124: LD_ADDR_VAR 0 5
13128: PUSH
13129: CALL_OW 44
13133: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
13134: LD_VAR 0 5
13138: PPUSH
13139: LD_INT 269
13141: PUSH
13142: LD_INT 300
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_VAR 0 2
13153: PUSH
13154: LD_INT 2
13156: MOD
13157: PUSH
13158: LD_INT 1
13160: PLUS
13161: ARRAY
13162: PPUSH
13163: LD_INT 182
13165: PPUSH
13166: LD_INT 4
13168: PPUSH
13169: LD_INT 0
13171: PPUSH
13172: CALL_OW 50
// end ;
13176: GO 13082
13178: POP
13179: POP
// uc_nation := 3 ;
13180: LD_ADDR_OWVAR 21
13184: PUSH
13185: LD_INT 3
13187: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13188: LD_EXP 8
13192: PUSH
13193: LD_INT 10
13195: PUSH
13196: LD_INT 8
13198: PUSH
13199: LD_INT 6
13201: PUSH
13202: LD_INT 5
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: PUSH
13211: LD_OWVAR 67
13215: ARRAY
13216: LESS
13217: IFFALSE 13296
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
13219: LD_INT 21
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: LD_INT 51
13230: PPUSH
13231: LD_INT 12
13233: PPUSH
13234: CALL 32158 0 5
// veh := CreateVehicle ;
13238: LD_ADDR_VAR 0 6
13242: PUSH
13243: CALL_OW 45
13247: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
13248: LD_VAR 0 6
13252: PPUSH
13253: LD_INT 269
13255: PPUSH
13256: LD_INT 66
13258: PPUSH
13259: LD_INT 4
13261: PPUSH
13262: LD_INT 0
13264: PPUSH
13265: CALL 66732 0 5
// SetLives ( veh , 333 ) ;
13269: LD_VAR 0 6
13273: PPUSH
13274: LD_INT 333
13276: PPUSH
13277: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
13281: LD_VAR 0 6
13285: PPUSH
13286: LD_INT 2
13288: PPUSH
13289: LD_INT 100
13291: PPUSH
13292: CALL_OW 290
// end ; end ;
13296: LD_VAR 0 1
13300: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
13301: LD_EXP 53
13305: PUSH
13306: LD_EXP 53
13310: PPUSH
13311: CALL_OW 255
13315: PUSH
13316: LD_INT 3
13318: EQUAL
13319: AND
13320: IFFALSE 13483
13322: GO 13324
13324: DISABLE
13325: LD_INT 0
13327: PPUSH
// begin enable ;
13328: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
13329: LD_INT 81
13331: PUSH
13332: LD_INT 3
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 91
13341: PUSH
13342: LD_EXP 53
13346: PUSH
13347: LD_INT 15
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: LIST
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PPUSH
13359: CALL_OW 69
13363: IFFALSE 13443
// begin if not IsDrivenBy ( ruBlockadeTank ) then
13365: LD_EXP 53
13369: PPUSH
13370: CALL_OW 311
13374: NOT
13375: IFFALSE 13441
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
13377: LD_ADDR_VAR 0 1
13381: PUSH
13382: LD_INT 22
13384: PUSH
13385: LD_INT 3
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 21
13394: PUSH
13395: LD_INT 1
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: PPUSH
13411: LD_EXP 53
13415: PPUSH
13416: CALL_OW 74
13420: ST_TO_ADDR
// if driver then
13421: LD_VAR 0 1
13425: IFFALSE 13441
// ComEnterUnit ( driver , ruBlockadeTank ) ;
13427: LD_VAR 0 1
13431: PPUSH
13432: LD_EXP 53
13436: PPUSH
13437: CALL_OW 120
// end ; exit ;
13441: GO 13483
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
13443: LD_EXP 53
13447: PPUSH
13448: CALL_OW 256
13452: PUSH
13453: LD_INT 1000
13455: LESS
13456: PUSH
13457: LD_EXP 53
13461: PPUSH
13462: CALL_OW 311
13466: AND
13467: IFFALSE 13483
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
13469: LD_EXP 53
13473: PPUSH
13474: CALL_OW 311
13478: PPUSH
13479: CALL 66292 0 1
// end ;
13483: PPOPN 1
13485: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
13486: LD_EXP 55
13490: PPUSH
13491: LD_INT 3
13493: PUSH
13494: LD_INT 24
13496: PUSH
13497: LD_INT 1000
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PPUSH
13508: CALL_OW 72
13512: PUSH
13513: LD_EXP 55
13517: PPUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 4
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 50
13530: PUSH
13531: EMPTY
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PPUSH
13538: CALL_OW 72
13542: AND
13543: IFFALSE 13731
13545: GO 13547
13547: DISABLE
13548: LD_INT 0
13550: PPUSH
13551: PPUSH
13552: PPUSH
// begin enable ;
13553: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
13554: LD_ADDR_VAR 0 3
13558: PUSH
13559: LD_EXP 55
13563: PPUSH
13564: LD_INT 3
13566: PUSH
13567: LD_INT 24
13569: PUSH
13570: LD_INT 1000
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 72
13585: PPUSH
13586: LD_INT 1
13588: PPUSH
13589: CALL 66532 0 2
13593: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
13594: LD_ADDR_VAR 0 2
13598: PUSH
13599: LD_EXP 55
13603: PPUSH
13604: LD_INT 25
13606: PUSH
13607: LD_INT 4
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 50
13616: PUSH
13617: EMPTY
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PPUSH
13624: CALL_OW 72
13628: PUSH
13629: LD_INT 1
13631: ARRAY
13632: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
13633: LD_VAR 0 2
13637: PPUSH
13638: LD_VAR 0 3
13642: PUSH
13643: LD_INT 1
13645: ARRAY
13646: PPUSH
13647: CALL 61878 0 2
13651: NOT
13652: IFFALSE 13731
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
13654: LD_VAR 0 3
13658: PUSH
13659: LD_INT 1
13661: ARRAY
13662: PPUSH
13663: LD_INT 9
13665: PPUSH
13666: CALL_OW 308
13670: NOT
13671: IFFALSE 13689
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
13673: LD_VAR 0 3
13677: PUSH
13678: LD_INT 1
13680: ARRAY
13681: PPUSH
13682: LD_INT 9
13684: PPUSH
13685: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
13689: LD_VAR 0 2
13693: PPUSH
13694: LD_VAR 0 3
13698: PUSH
13699: LD_INT 1
13701: ARRAY
13702: PPUSH
13703: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
13707: LD_VAR 0 2
13711: PPUSH
13712: LD_INT 179
13714: PPUSH
13715: LD_INT 113
13717: PPUSH
13718: CALL_OW 171
// AddComHold ( sci ) ;
13722: LD_VAR 0 2
13726: PPUSH
13727: CALL_OW 200
// end ; end ;
13731: PPOPN 3
13733: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
13734: LD_INT 2
13736: PPUSH
13737: LD_INT 52
13739: PPUSH
13740: CALL_OW 292
13744: IFFALSE 13849
13746: GO 13748
13748: DISABLE
13749: LD_INT 0
13751: PPUSH
13752: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
13753: LD_ADDR_VAR 0 2
13757: PUSH
13758: LD_EXP 57
13762: PPUSH
13763: LD_INT 25
13765: PUSH
13766: LD_INT 1
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 50
13775: PUSH
13776: EMPTY
13777: LIST
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PPUSH
13783: CALL_OW 72
13787: ST_TO_ADDR
// if not tmp then
13788: LD_VAR 0 2
13792: NOT
13793: IFFALSE 13797
// exit ;
13795: GO 13849
// for i in tmp do
13797: LD_ADDR_VAR 0 1
13801: PUSH
13802: LD_VAR 0 2
13806: PUSH
13807: FOR_IN
13808: IFFALSE 13847
// begin if IsInUnit ( i ) then
13810: LD_VAR 0 1
13814: PPUSH
13815: CALL_OW 310
13819: IFFALSE 13830
// ComExitBuilding ( i ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
13830: LD_VAR 0 1
13834: PPUSH
13835: LD_INT 84
13837: PPUSH
13838: LD_INT 133
13840: PPUSH
13841: CALL_OW 174
// end ;
13845: GO 13807
13847: POP
13848: POP
// end ;
13849: PPOPN 2
13851: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
13852: LD_EXP 14
13856: IFFALSE 14016
13858: GO 13860
13860: DISABLE
13861: LD_INT 0
13863: PPUSH
13864: PPUSH
13865: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
13866: LD_ADDR_VAR 0 2
13870: PUSH
13871: LD_INT 72
13873: PUSH
13874: LD_INT 12
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
13881: LD_ADDR_VAR 0 3
13885: PUSH
13886: LD_INT 44
13888: PUSH
13889: LD_INT 43
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 45
13898: PUSH
13899: LD_INT 44
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 45
13908: PUSH
13909: LD_INT 46
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 45
13918: PUSH
13919: LD_INT 46
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: PUSH
13932: LD_OWVAR 67
13936: ARRAY
13937: ST_TO_ADDR
// for i := 1 to 6 do
13938: LD_ADDR_VAR 0 1
13942: PUSH
13943: DOUBLE
13944: LD_INT 1
13946: DEC
13947: ST_TO_ADDR
13948: LD_INT 6
13950: PUSH
13951: FOR_TO
13952: IFFALSE 14014
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
13954: LD_VAR 0 2
13958: PPUSH
13959: LD_INT 22
13961: PUSH
13962: LD_INT 23
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_VAR 0 1
13973: PUSH
13974: LD_INT 2
13976: MOD
13977: PUSH
13978: LD_INT 1
13980: PLUS
13981: ARRAY
13982: PPUSH
13983: LD_INT 1
13985: PPUSH
13986: LD_INT 1
13988: PPUSH
13989: LD_VAR 0 3
13993: PUSH
13994: LD_VAR 0 1
13998: PUSH
13999: LD_INT 2
14001: MOD
14002: PUSH
14003: LD_INT 1
14005: PLUS
14006: ARRAY
14007: PPUSH
14008: CALL_OW 185
14012: GO 13951
14014: POP
14015: POP
// end ;
14016: PPOPN 3
14018: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
14019: LD_EXP 11
14023: IFFALSE 15172
14025: GO 14027
14027: DISABLE
14028: LD_INT 0
14030: PPUSH
14031: PPUSH
14032: PPUSH
14033: PPUSH
14034: PPUSH
14035: PPUSH
// begin enable ;
14036: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
14037: LD_ADDR_VAR 0 6
14041: PUSH
14042: LD_INT 10
14044: PPUSH
14045: LD_INT 81
14047: PUSH
14048: LD_INT 3
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PPUSH
14055: CALL_OW 70
14059: ST_TO_ADDR
// if ruSpecialVehicleGroup then
14060: LD_EXP 58
14064: IFFALSE 14330
// begin for i in ruSpecialVehicleGroup do
14066: LD_ADDR_VAR 0 1
14070: PUSH
14071: LD_EXP 58
14075: PUSH
14076: FOR_IN
14077: IFFALSE 14328
// begin if enemyInBase then
14079: LD_VAR 0 6
14083: IFFALSE 14326
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
14085: LD_VAR 0 1
14089: PPUSH
14090: CALL_OW 256
14094: PUSH
14095: LD_INT 500
14097: GREATER
14098: PUSH
14099: LD_VAR 0 1
14103: PPUSH
14104: CALL_OW 110
14108: PUSH
14109: LD_INT 0
14111: EQUAL
14112: AND
14113: IFFALSE 14139
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
14115: LD_VAR 0 1
14119: PPUSH
14120: LD_VAR 0 6
14124: PPUSH
14125: LD_VAR 0 1
14129: PPUSH
14130: CALL_OW 74
14134: PPUSH
14135: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
14139: LD_VAR 0 1
14143: PPUSH
14144: CALL_OW 256
14148: PUSH
14149: LD_INT 500
14151: LESSEQUAL
14152: PUSH
14153: LD_VAR 0 1
14157: PPUSH
14158: CALL_OW 110
14162: PUSH
14163: LD_INT 0
14165: EQUAL
14166: AND
14167: IFFALSE 14196
// begin SetTag ( i , 1 ) ;
14169: LD_VAR 0 1
14173: PPUSH
14174: LD_INT 1
14176: PPUSH
14177: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
14181: LD_VAR 0 1
14185: PPUSH
14186: LD_INT 83
14188: PPUSH
14189: LD_INT 134
14191: PPUSH
14192: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
14196: LD_VAR 0 1
14200: PPUSH
14201: CALL_OW 256
14205: PUSH
14206: LD_INT 1000
14208: LESS
14209: PUSH
14210: LD_VAR 0 1
14214: PPUSH
14215: CALL_OW 110
14219: PUSH
14220: LD_INT 1
14222: EQUAL
14223: AND
14224: PUSH
14225: LD_VAR 0 1
14229: PPUSH
14230: LD_INT 83
14232: PPUSH
14233: LD_INT 134
14235: PPUSH
14236: CALL_OW 297
14240: PUSH
14241: LD_INT 6
14243: LESS
14244: AND
14245: IFFALSE 14273
// begin SetFuel ( i , 100 ) ;
14247: LD_VAR 0 1
14251: PPUSH
14252: LD_INT 100
14254: PPUSH
14255: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
14259: LD_VAR 0 1
14263: PPUSH
14264: CALL_OW 310
14268: PPUSH
14269: CALL 66412 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
14273: LD_VAR 0 1
14277: PPUSH
14278: CALL_OW 256
14282: PUSH
14283: LD_INT 1000
14285: EQUAL
14286: PUSH
14287: LD_VAR 0 1
14291: PPUSH
14292: CALL_OW 110
14296: PUSH
14297: LD_INT 1
14299: EQUAL
14300: AND
14301: PUSH
14302: LD_VAR 0 1
14306: PPUSH
14307: CALL_OW 311
14311: AND
14312: IFFALSE 14326
// SetTag ( i , 0 ) ;
14314: LD_VAR 0 1
14318: PPUSH
14319: LD_INT 0
14321: PPUSH
14322: CALL_OW 109
// end ; end ;
14326: GO 14076
14328: POP
14329: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
14330: LD_ADDR_VAR 0 5
14334: PUSH
14335: LD_EXP 57
14339: PPUSH
14340: LD_INT 25
14342: PUSH
14343: LD_INT 4
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PPUSH
14350: CALL_OW 72
14354: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14355: LD_ADDR_VAR 0 4
14359: PUSH
14360: LD_EXP 57
14364: PPUSH
14365: LD_INT 92
14367: PUSH
14368: LD_INT 92
14370: PUSH
14371: LD_INT 155
14373: PUSH
14374: LD_INT 12
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 3
14385: PUSH
14386: LD_INT 24
14388: PUSH
14389: LD_INT 1000
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 72
14408: ST_TO_ADDR
// if sci then
14409: LD_VAR 0 5
14413: IFFALSE 14546
// begin if hurt then
14415: LD_VAR 0 4
14419: IFFALSE 14492
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
14421: LD_VAR 0 5
14425: PPUSH
14426: LD_INT 3
14428: PUSH
14429: LD_INT 54
14431: PUSH
14432: EMPTY
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL_OW 72
14443: IFFALSE 14472
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
14445: LD_VAR 0 5
14449: PPUSH
14450: LD_INT 3
14452: PUSH
14453: LD_INT 54
14455: PUSH
14456: EMPTY
14457: LIST
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PPUSH
14463: CALL_OW 72
14467: PPUSH
14468: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
14472: LD_VAR 0 5
14476: PPUSH
14477: LD_VAR 0 4
14481: PUSH
14482: LD_INT 1
14484: ARRAY
14485: PPUSH
14486: CALL_OW 188
// end else
14490: GO 14546
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
14492: LD_VAR 0 5
14496: PPUSH
14497: LD_INT 3
14499: PUSH
14500: LD_INT 54
14502: PUSH
14503: EMPTY
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PPUSH
14510: CALL_OW 72
14514: IFFALSE 14546
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
14516: LD_VAR 0 5
14520: PPUSH
14521: LD_INT 3
14523: PUSH
14524: LD_INT 54
14526: PUSH
14527: EMPTY
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PPUSH
14534: CALL_OW 72
14538: PPUSH
14539: LD_INT 17
14541: PPUSH
14542: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: LD_INT 10
14553: PPUSH
14554: LD_INT 21
14556: PUSH
14557: LD_INT 3
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 3
14566: PUSH
14567: LD_INT 24
14569: PUSH
14570: LD_INT 1000
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PPUSH
14585: CALL_OW 70
14589: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
14590: LD_ADDR_VAR 0 2
14594: PUSH
14595: LD_EXP 57
14599: PPUSH
14600: LD_INT 25
14602: PUSH
14603: LD_INT 2
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PPUSH
14610: CALL_OW 72
14614: PUSH
14615: LD_INT 22
14617: PUSH
14618: LD_INT 3
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 34
14627: PUSH
14628: LD_INT 52
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PPUSH
14639: CALL_OW 69
14643: UNION
14644: ST_TO_ADDR
// if not tmp then
14645: LD_VAR 0 2
14649: NOT
14650: IFFALSE 14654
// exit ;
14652: GO 15172
// for i in tmp do
14654: LD_ADDR_VAR 0 1
14658: PUSH
14659: LD_VAR 0 2
14663: PUSH
14664: FOR_IN
14665: IFFALSE 15170
// begin if GetClass ( i ) = 2 then
14667: LD_VAR 0 1
14671: PPUSH
14672: CALL_OW 257
14676: PUSH
14677: LD_INT 2
14679: EQUAL
14680: IFFALSE 14903
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
14682: LD_VAR 0 1
14686: PPUSH
14687: CALL_OW 256
14691: PUSH
14692: LD_INT 1000
14694: EQUAL
14695: PUSH
14696: LD_VAR 0 1
14700: PPUSH
14701: CALL_OW 110
14705: PUSH
14706: LD_INT 1
14708: EQUAL
14709: AND
14710: IFFALSE 14724
// SetTag ( i , 0 ) ;
14712: LD_VAR 0 1
14716: PPUSH
14717: LD_INT 0
14719: PPUSH
14720: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 256
14733: PUSH
14734: LD_INT 500
14736: LESSEQUAL
14737: PUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 110
14747: PUSH
14748: LD_INT 0
14750: EQUAL
14751: AND
14752: IFFALSE 14781
// begin SetTag ( i , 1 ) ;
14754: LD_VAR 0 1
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
14766: LD_VAR 0 1
14770: PPUSH
14771: LD_INT 92
14773: PPUSH
14774: LD_INT 155
14776: PPUSH
14777: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
14781: LD_VAR 0 3
14785: PUSH
14786: LD_VAR 0 1
14790: PPUSH
14791: CALL_OW 256
14795: PUSH
14796: LD_INT 500
14798: GREATER
14799: AND
14800: PUSH
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL_OW 110
14810: PUSH
14811: LD_INT 0
14813: EQUAL
14814: AND
14815: PUSH
14816: LD_VAR 0 1
14820: PPUSH
14821: CALL_OW 314
14825: NOT
14826: AND
14827: IFFALSE 14901
// begin if b then
14829: LD_VAR 0 3
14833: IFFALSE 14865
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
14835: LD_VAR 0 1
14839: PPUSH
14840: LD_VAR 0 3
14844: PUSH
14845: LD_INT 1
14847: PPUSH
14848: LD_VAR 0 3
14852: PPUSH
14853: CALL_OW 12
14857: ARRAY
14858: PPUSH
14859: CALL_OW 130
14863: GO 14901
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
14865: LD_VAR 0 1
14869: PPUSH
14870: LD_INT 94
14872: PPUSH
14873: LD_INT 165
14875: PPUSH
14876: CALL_OW 297
14880: PUSH
14881: LD_INT 8
14883: GREATER
14884: IFFALSE 14901
// ComMoveXY ( i , 94 , 165 ) ;
14886: LD_VAR 0 1
14890: PPUSH
14891: LD_INT 94
14893: PPUSH
14894: LD_INT 165
14896: PPUSH
14897: CALL_OW 111
// end ; end else
14901: GO 15168
// if GetWeapon ( i ) = ru_crane then
14903: LD_VAR 0 1
14907: PPUSH
14908: CALL_OW 264
14912: PUSH
14913: LD_INT 52
14915: EQUAL
14916: IFFALSE 15168
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 256
14927: PUSH
14928: LD_INT 1000
14930: EQUAL
14931: PUSH
14932: LD_VAR 0 1
14936: PPUSH
14937: CALL_OW 110
14941: PUSH
14942: LD_INT 1
14944: EQUAL
14945: AND
14946: IFFALSE 14972
// begin SetTag ( i , 0 ) ;
14948: LD_VAR 0 1
14952: PPUSH
14953: LD_INT 0
14955: PPUSH
14956: CALL_OW 109
// SetFuel ( i , 100 ) ;
14960: LD_VAR 0 1
14964: PPUSH
14965: LD_INT 100
14967: PPUSH
14968: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
14972: LD_VAR 0 1
14976: PPUSH
14977: CALL_OW 256
14981: PUSH
14982: LD_INT 500
14984: LESSEQUAL
14985: PUSH
14986: LD_VAR 0 1
14990: PPUSH
14991: CALL_OW 110
14995: PUSH
14996: LD_INT 0
14998: EQUAL
14999: AND
15000: IFFALSE 15043
// begin SetTag ( i , 1 ) ;
15002: LD_VAR 0 1
15006: PPUSH
15007: LD_INT 1
15009: PPUSH
15010: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
15014: LD_VAR 0 1
15018: PPUSH
15019: LD_INT 83
15021: PPUSH
15022: LD_INT 135
15024: PPUSH
15025: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15029: LD_VAR 0 1
15033: PPUSH
15034: CALL_OW 310
15038: PPUSH
15039: CALL 66412 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
15043: LD_VAR 0 1
15047: PPUSH
15048: CALL_OW 256
15052: PUSH
15053: LD_INT 500
15055: GREATER
15056: PUSH
15057: LD_VAR 0 1
15061: PPUSH
15062: CALL_OW 110
15066: PUSH
15067: LD_INT 0
15069: EQUAL
15070: AND
15071: PUSH
15072: LD_VAR 0 1
15076: PPUSH
15077: CALL_OW 311
15081: AND
15082: PUSH
15083: LD_VAR 0 1
15087: PPUSH
15088: CALL_OW 314
15092: NOT
15093: AND
15094: IFFALSE 15168
// begin if b then
15096: LD_VAR 0 3
15100: IFFALSE 15132
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
15102: LD_VAR 0 1
15106: PPUSH
15107: LD_VAR 0 3
15111: PUSH
15112: LD_INT 1
15114: PPUSH
15115: LD_VAR 0 3
15119: PPUSH
15120: CALL_OW 12
15124: ARRAY
15125: PPUSH
15126: CALL_OW 130
15130: GO 15168
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
15132: LD_VAR 0 1
15136: PPUSH
15137: LD_INT 94
15139: PPUSH
15140: LD_INT 165
15142: PPUSH
15143: CALL_OW 297
15147: PUSH
15148: LD_INT 8
15150: GREATER
15151: IFFALSE 15168
// ComMoveXY ( i , 94 , 165 ) ;
15153: LD_VAR 0 1
15157: PPUSH
15158: LD_INT 94
15160: PPUSH
15161: LD_INT 165
15163: PPUSH
15164: CALL_OW 111
// end ; end ; end ;
15168: GO 14664
15170: POP
15171: POP
// end ;
15172: PPOPN 6
15174: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
15175: LD_EXP 23
15179: NOT
15180: PUSH
15181: LD_EXP 27
15185: NOT
15186: AND
15187: IFFALSE 16116
15189: GO 15191
15191: DISABLE
15192: LD_INT 0
15194: PPUSH
15195: PPUSH
15196: PPUSH
15197: PPUSH
// begin enable ;
15198: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
15199: LD_INT 35
15201: PUSH
15202: LD_INT 45
15204: PUSH
15205: LD_INT 55
15207: PUSH
15208: LD_INT 60
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: PUSH
15217: LD_OWVAR 67
15221: ARRAY
15222: PPUSH
15223: CALL_OW 13
15227: IFFALSE 15243
// waveStrength := waveStrength + 1 ;
15229: LD_ADDR_EXP 60
15233: PUSH
15234: LD_EXP 60
15238: PUSH
15239: LD_INT 1
15241: PLUS
15242: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 , 7 ] [ Difficulty ] then
15243: LD_EXP 60
15247: PUSH
15248: LD_INT 4
15250: PUSH
15251: LD_INT 5
15253: PUSH
15254: LD_INT 6
15256: PUSH
15257: LD_INT 7
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: PUSH
15266: LD_OWVAR 67
15270: ARRAY
15271: GREATER
15272: IFFALSE 15305
// begin waveStrength := waveStrength + Difficulty ;
15274: LD_ADDR_EXP 60
15278: PUSH
15279: LD_EXP 60
15283: PUSH
15284: LD_OWVAR 67
15288: PLUS
15289: ST_TO_ADDR
// disableAttackOnHeike := true ;
15290: LD_ADDR_EXP 27
15294: PUSH
15295: LD_INT 1
15297: ST_TO_ADDR
// wait ( 3 3$00 ) ;
15298: LD_INT 6300
15300: PPUSH
15301: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
15305: LD_EXP 27
15309: PUSH
15310: LD_OWVAR 67
15314: PUSH
15315: LD_INT 1
15317: GREATER
15318: AND
15319: IFFALSE 15528
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
15321: LD_ADDR_VAR 0 1
15325: PUSH
15326: DOUBLE
15327: LD_INT 1
15329: DEC
15330: ST_TO_ADDR
15331: LD_INT 3
15333: PUSH
15334: LD_INT 3
15336: PUSH
15337: LD_INT 4
15339: PUSH
15340: LD_INT 4
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: PUSH
15349: LD_OWVAR 67
15353: ARRAY
15354: PUSH
15355: FOR_TO
15356: IFFALSE 15526
// begin InitHc ;
15358: CALL_OW 19
// InitVc ;
15362: CALL_OW 20
// uc_side := 3 ;
15366: LD_ADDR_OWVAR 20
15370: PUSH
15371: LD_INT 3
15373: ST_TO_ADDR
// uc_nation := 3 ;
15374: LD_ADDR_OWVAR 21
15378: PUSH
15379: LD_INT 3
15381: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
15382: LD_INT 0
15384: PPUSH
15385: LD_INT 1
15387: PPUSH
15388: LD_OWVAR 67
15392: PUSH
15393: LD_INT 2
15395: PLUS
15396: PPUSH
15397: CALL_OW 380
// un := CreateHuman ;
15401: LD_ADDR_VAR 0 2
15405: PUSH
15406: CALL_OW 44
15410: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
15411: LD_VAR 0 2
15415: PPUSH
15416: LD_INT 160
15418: PPUSH
15419: LD_INT 3
15421: PPUSH
15422: LD_INT 2
15424: PPUSH
15425: LD_INT 0
15427: PPUSH
15428: CALL 66732 0 5
// SetClass ( un , class_bazooker ) ;
15432: LD_VAR 0 2
15436: PPUSH
15437: LD_INT 9
15439: PPUSH
15440: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15444: LD_ADDR_EXP 59
15448: PUSH
15449: LD_EXP 59
15453: PPUSH
15454: LD_EXP 59
15458: PUSH
15459: LD_INT 1
15461: PLUS
15462: PPUSH
15463: LD_VAR 0 2
15467: PPUSH
15468: CALL_OW 1
15472: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
15473: LD_VAR 0 2
15477: PPUSH
15478: LD_INT 177
15480: PPUSH
15481: LD_INT 17
15483: PPUSH
15484: CALL_OW 111
// wait ( 0 0$2 ) ;
15488: LD_INT 70
15490: PPUSH
15491: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15495: LD_ADDR_VAR 0 4
15499: PUSH
15500: LD_VAR 0 4
15504: PPUSH
15505: LD_VAR 0 4
15509: PUSH
15510: LD_INT 1
15512: PLUS
15513: PPUSH
15514: LD_VAR 0 2
15518: PPUSH
15519: CALL_OW 1
15523: ST_TO_ADDR
// end ;
15524: GO 15355
15526: POP
15527: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
15528: LD_ADDR_VAR 0 1
15532: PUSH
15533: DOUBLE
15534: LD_INT 1
15536: DEC
15537: ST_TO_ADDR
15538: LD_INT 2
15540: PUSH
15541: LD_INT 3
15543: PUSH
15544: LD_INT 4
15546: PUSH
15547: LD_INT 5
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: PUSH
15556: LD_OWVAR 67
15560: ARRAY
15561: PUSH
15562: LD_EXP 60
15566: PLUS
15567: PUSH
15568: FOR_TO
15569: IFFALSE 15878
// begin InitHc ;
15571: CALL_OW 19
// InitVc ;
15575: CALL_OW 20
// uc_side := 3 ;
15579: LD_ADDR_OWVAR 20
15583: PUSH
15584: LD_INT 3
15586: ST_TO_ADDR
// uc_nation := 3 ;
15587: LD_ADDR_OWVAR 21
15591: PUSH
15592: LD_INT 3
15594: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
15595: LD_INT 22
15597: PUSH
15598: LD_INT 23
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 1
15607: PPUSH
15608: LD_INT 2
15610: PPUSH
15611: CALL_OW 12
15615: ARRAY
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: LD_INT 1
15622: PPUSH
15623: LD_INT 44
15625: PUSH
15626: LD_INT 45
15628: PUSH
15629: LD_INT 43
15631: PUSH
15632: LD_INT 42
15634: PUSH
15635: LD_INT 44
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: PUSH
15645: LD_INT 1
15647: PPUSH
15648: LD_INT 5
15650: PPUSH
15651: CALL_OW 12
15655: ARRAY
15656: PPUSH
15657: LD_INT 99
15659: PPUSH
15660: CALL 32158 0 5
// veh := CreateVehicle ;
15664: LD_ADDR_VAR 0 3
15668: PUSH
15669: CALL_OW 45
15673: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
15674: LD_VAR 0 3
15678: PPUSH
15679: LD_INT 160
15681: PPUSH
15682: LD_INT 3
15684: PPUSH
15685: LD_INT 2
15687: PPUSH
15688: LD_INT 0
15690: PPUSH
15691: CALL 66732 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
15695: LD_ADDR_EXP 59
15699: PUSH
15700: LD_EXP 59
15704: PPUSH
15705: LD_EXP 59
15709: PUSH
15710: LD_INT 1
15712: PLUS
15713: PPUSH
15714: LD_VAR 0 3
15718: PPUSH
15719: CALL_OW 1
15723: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
15724: LD_INT 0
15726: PPUSH
15727: LD_INT 3
15729: PPUSH
15730: LD_OWVAR 67
15734: PUSH
15735: LD_INT 2
15737: PLUS
15738: PPUSH
15739: CALL_OW 380
// un := CreateHuman ;
15743: LD_ADDR_VAR 0 2
15747: PUSH
15748: CALL_OW 44
15752: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15753: LD_VAR 0 2
15757: PPUSH
15758: LD_VAR 0 3
15762: PPUSH
15763: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15767: LD_ADDR_EXP 59
15771: PUSH
15772: LD_EXP 59
15776: PPUSH
15777: LD_EXP 59
15781: PUSH
15782: LD_INT 1
15784: PLUS
15785: PPUSH
15786: LD_VAR 0 2
15790: PPUSH
15791: CALL_OW 1
15795: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
15796: LD_VAR 0 2
15800: PPUSH
15801: LD_INT 177
15803: PPUSH
15804: LD_INT 17
15806: PPUSH
15807: CALL_OW 111
// wait ( 0 0$2 ) ;
15811: LD_INT 70
15813: PPUSH
15814: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15818: LD_ADDR_VAR 0 4
15822: PUSH
15823: LD_VAR 0 4
15827: PPUSH
15828: LD_VAR 0 4
15832: PUSH
15833: LD_INT 1
15835: PLUS
15836: PPUSH
15837: LD_VAR 0 3
15841: PPUSH
15842: CALL_OW 1
15846: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15847: LD_ADDR_VAR 0 4
15851: PUSH
15852: LD_VAR 0 4
15856: PPUSH
15857: LD_VAR 0 4
15861: PUSH
15862: LD_INT 1
15864: PLUS
15865: PPUSH
15866: LD_VAR 0 2
15870: PPUSH
15871: CALL_OW 1
15875: ST_TO_ADDR
// end ;
15876: GO 15568
15878: POP
15879: POP
// for i in tmp do
15880: LD_ADDR_VAR 0 1
15884: PUSH
15885: LD_VAR 0 4
15889: PUSH
15890: FOR_IN
15891: IFFALSE 15994
// begin if Prob ( 50 ) then
15893: LD_INT 50
15895: PPUSH
15896: CALL_OW 13
15900: IFFALSE 15937
// AgressiveMove ( i , [ [ 192 , 34 ] , [ 198 , 56 ] ] ) else
15902: LD_VAR 0 1
15906: PPUSH
15907: LD_INT 192
15909: PUSH
15910: LD_INT 34
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 198
15919: PUSH
15920: LD_INT 56
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PPUSH
15931: CALL 67196 0 2
15935: GO 15992
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
15937: LD_VAR 0 1
15941: PPUSH
15942: LD_INT 206
15944: PUSH
15945: LD_INT 37
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 239
15954: PUSH
15955: LD_INT 53
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 257
15964: PUSH
15965: LD_INT 105
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 227
15974: PUSH
15975: LD_INT 97
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: PPUSH
15988: CALL 67196 0 2
// end ;
15992: GO 15890
15994: POP
15995: POP
// repeat wait ( 0 0$1 ) ;
15996: LD_INT 35
15998: PPUSH
15999: CALL_OW 67
// for i in tmp do
16003: LD_ADDR_VAR 0 1
16007: PUSH
16008: LD_VAR 0 4
16012: PUSH
16013: FOR_IN
16014: IFFALSE 16093
// if IsDead ( i ) then
16016: LD_VAR 0 1
16020: PPUSH
16021: CALL_OW 301
16025: IFFALSE 16045
// tmp := tmp diff i else
16027: LD_ADDR_VAR 0 4
16031: PUSH
16032: LD_VAR 0 4
16036: PUSH
16037: LD_VAR 0 1
16041: DIFF
16042: ST_TO_ADDR
16043: GO 16091
// if not HasTask ( i ) then
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 314
16054: NOT
16055: IFFALSE 16091
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
16057: LD_VAR 0 1
16061: PPUSH
16062: LD_INT 81
16064: PUSH
16065: LD_INT 3
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PPUSH
16072: CALL_OW 69
16076: PPUSH
16077: LD_VAR 0 1
16081: PPUSH
16082: CALL_OW 74
16086: PPUSH
16087: CALL_OW 115
16091: GO 16013
16093: POP
16094: POP
// until not tmp ;
16095: LD_VAR 0 4
16099: NOT
16100: IFFALSE 15996
// if firstAttack then
16102: LD_EXP 28
16106: IFFALSE 16116
// firstAttack := false ;
16108: LD_ADDR_EXP 28
16112: PUSH
16113: LD_INT 0
16115: ST_TO_ADDR
// end ;
16116: PPOPN 4
16118: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
16119: LD_EXP 23
16123: NOT
16124: PUSH
16125: LD_EXP 3
16129: AND
16130: PUSH
16131: LD_EXP 16
16135: NOT
16136: AND
16137: IFFALSE 16984
16139: GO 16141
16141: DISABLE
16142: LD_INT 0
16144: PPUSH
16145: PPUSH
16146: PPUSH
16147: PPUSH
// begin enable ;
16148: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
16149: LD_ADDR_VAR 0 1
16153: PUSH
16154: DOUBLE
16155: LD_INT 1
16157: DEC
16158: ST_TO_ADDR
16159: LD_INT 1
16161: PUSH
16162: LD_INT 2
16164: PUSH
16165: LD_INT 2
16167: PUSH
16168: LD_INT 3
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: PUSH
16177: LD_OWVAR 67
16181: ARRAY
16182: PUSH
16183: FOR_TO
16184: IFFALSE 16485
// begin InitHc ;
16186: CALL_OW 19
// InitVc ;
16190: CALL_OW 20
// uc_side := 3 ;
16194: LD_ADDR_OWVAR 20
16198: PUSH
16199: LD_INT 3
16201: ST_TO_ADDR
// uc_nation := 3 ;
16202: LD_ADDR_OWVAR 21
16206: PUSH
16207: LD_INT 3
16209: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
16210: LD_INT 22
16212: PUSH
16213: LD_INT 23
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 1
16222: PPUSH
16223: LD_INT 2
16225: PPUSH
16226: CALL_OW 12
16230: ARRAY
16231: PPUSH
16232: LD_INT 1
16234: PPUSH
16235: LD_INT 1
16237: PPUSH
16238: LD_INT 44
16240: PUSH
16241: LD_INT 43
16243: PUSH
16244: LD_INT 42
16246: PUSH
16247: LD_INT 44
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 1
16258: PPUSH
16259: LD_INT 4
16261: PPUSH
16262: CALL_OW 12
16266: ARRAY
16267: PPUSH
16268: LD_INT 99
16270: PPUSH
16271: CALL 32158 0 5
// veh := CreateVehicle ;
16275: LD_ADDR_VAR 0 3
16279: PUSH
16280: CALL_OW 45
16284: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
16285: LD_VAR 0 3
16289: PPUSH
16290: LD_INT 5
16292: PPUSH
16293: LD_INT 3
16295: PPUSH
16296: LD_INT 2
16298: PPUSH
16299: LD_INT 0
16301: PPUSH
16302: CALL 66732 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
16306: LD_ADDR_EXP 59
16310: PUSH
16311: LD_EXP 59
16315: PPUSH
16316: LD_EXP 59
16320: PUSH
16321: LD_INT 1
16323: PLUS
16324: PPUSH
16325: LD_VAR 0 3
16329: PPUSH
16330: CALL_OW 1
16334: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
16335: LD_INT 0
16337: PPUSH
16338: LD_INT 3
16340: PPUSH
16341: LD_OWVAR 67
16345: PPUSH
16346: CALL_OW 380
// un := CreateHuman ;
16350: LD_ADDR_VAR 0 2
16354: PUSH
16355: CALL_OW 44
16359: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16360: LD_VAR 0 2
16364: PPUSH
16365: LD_VAR 0 3
16369: PPUSH
16370: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16374: LD_ADDR_EXP 59
16378: PUSH
16379: LD_EXP 59
16383: PPUSH
16384: LD_EXP 59
16388: PUSH
16389: LD_INT 1
16391: PLUS
16392: PPUSH
16393: LD_VAR 0 2
16397: PPUSH
16398: CALL_OW 1
16402: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
16403: LD_VAR 0 2
16407: PPUSH
16408: LD_INT 23
16410: PPUSH
16411: LD_INT 7
16413: PPUSH
16414: CALL_OW 111
// wait ( 0 0$2 ) ;
16418: LD_INT 70
16420: PPUSH
16421: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
16425: LD_ADDR_VAR 0 4
16429: PUSH
16430: LD_VAR 0 4
16434: PPUSH
16435: LD_VAR 0 4
16439: PUSH
16440: LD_INT 1
16442: PLUS
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: CALL_OW 1
16453: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
16454: LD_ADDR_VAR 0 4
16458: PUSH
16459: LD_VAR 0 4
16463: PPUSH
16464: LD_VAR 0 4
16468: PUSH
16469: LD_INT 1
16471: PLUS
16472: PPUSH
16473: LD_VAR 0 2
16477: PPUSH
16478: CALL_OW 1
16482: ST_TO_ADDR
// end ;
16483: GO 16183
16485: POP
16486: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: DOUBLE
16493: LD_INT 1
16495: DEC
16496: ST_TO_ADDR
16497: LD_INT 3
16499: PUSH
16500: LD_INT 4
16502: PUSH
16503: LD_INT 4
16505: PUSH
16506: LD_INT 5
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: PUSH
16515: LD_OWVAR 67
16519: ARRAY
16520: PUSH
16521: LD_EXP 60
16525: PLUS
16526: PUSH
16527: FOR_TO
16528: IFFALSE 16837
// begin InitHc ;
16530: CALL_OW 19
// InitVc ;
16534: CALL_OW 20
// uc_side := 3 ;
16538: LD_ADDR_OWVAR 20
16542: PUSH
16543: LD_INT 3
16545: ST_TO_ADDR
// uc_nation := 3 ;
16546: LD_ADDR_OWVAR 21
16550: PUSH
16551: LD_INT 3
16553: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
16554: LD_INT 22
16556: PUSH
16557: LD_INT 23
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 1
16566: PPUSH
16567: LD_INT 2
16569: PPUSH
16570: CALL_OW 12
16574: ARRAY
16575: PPUSH
16576: LD_INT 1
16578: PPUSH
16579: LD_INT 1
16581: PPUSH
16582: LD_INT 44
16584: PUSH
16585: LD_INT 45
16587: PUSH
16588: LD_INT 43
16590: PUSH
16591: LD_INT 42
16593: PUSH
16594: LD_INT 44
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 1
16606: PPUSH
16607: LD_INT 5
16609: PPUSH
16610: CALL_OW 12
16614: ARRAY
16615: PPUSH
16616: LD_INT 99
16618: PPUSH
16619: CALL 32158 0 5
// veh := CreateVehicle ;
16623: LD_ADDR_VAR 0 3
16627: PUSH
16628: CALL_OW 45
16632: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
16633: LD_VAR 0 3
16637: PPUSH
16638: LD_INT 127
16640: PPUSH
16641: LD_INT 243
16643: PPUSH
16644: LD_INT 0
16646: PPUSH
16647: LD_INT 0
16649: PPUSH
16650: CALL 66732 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
16654: LD_ADDR_EXP 59
16658: PUSH
16659: LD_EXP 59
16663: PPUSH
16664: LD_EXP 59
16668: PUSH
16669: LD_INT 1
16671: PLUS
16672: PPUSH
16673: LD_VAR 0 3
16677: PPUSH
16678: CALL_OW 1
16682: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
16683: LD_INT 0
16685: PPUSH
16686: LD_INT 3
16688: PPUSH
16689: LD_OWVAR 67
16693: PUSH
16694: LD_INT 2
16696: PLUS
16697: PPUSH
16698: CALL_OW 380
// un := CreateHuman ;
16702: LD_ADDR_VAR 0 2
16706: PUSH
16707: CALL_OW 44
16711: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16712: LD_VAR 0 2
16716: PPUSH
16717: LD_VAR 0 3
16721: PPUSH
16722: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16726: LD_ADDR_EXP 59
16730: PUSH
16731: LD_EXP 59
16735: PPUSH
16736: LD_EXP 59
16740: PUSH
16741: LD_INT 1
16743: PLUS
16744: PPUSH
16745: LD_VAR 0 2
16749: PPUSH
16750: CALL_OW 1
16754: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
16755: LD_VAR 0 2
16759: PPUSH
16760: LD_INT 130
16762: PPUSH
16763: LD_INT 233
16765: PPUSH
16766: CALL_OW 111
// wait ( 0 0$2 ) ;
16770: LD_INT 70
16772: PPUSH
16773: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
16777: LD_ADDR_VAR 0 4
16781: PUSH
16782: LD_VAR 0 4
16786: PPUSH
16787: LD_VAR 0 4
16791: PUSH
16792: LD_INT 1
16794: PLUS
16795: PPUSH
16796: LD_VAR 0 3
16800: PPUSH
16801: CALL_OW 1
16805: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
16806: LD_ADDR_VAR 0 4
16810: PUSH
16811: LD_VAR 0 4
16815: PPUSH
16816: LD_VAR 0 4
16820: PUSH
16821: LD_INT 1
16823: PLUS
16824: PPUSH
16825: LD_VAR 0 2
16829: PPUSH
16830: CALL_OW 1
16834: ST_TO_ADDR
// end ;
16835: GO 16527
16837: POP
16838: POP
// for i in tmp do
16839: LD_ADDR_VAR 0 1
16843: PUSH
16844: LD_VAR 0 4
16848: PUSH
16849: FOR_IN
16850: IFFALSE 16876
// AgressiveMove ( i , [ [ 76 , 49 ] ] ) ;
16852: LD_VAR 0 1
16856: PPUSH
16857: LD_INT 76
16859: PUSH
16860: LD_INT 49
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: PPUSH
16870: CALL 67196 0 2
16874: GO 16849
16876: POP
16877: POP
// repeat wait ( 0 0$1 ) ;
16878: LD_INT 35
16880: PPUSH
16881: CALL_OW 67
// for i in tmp do
16885: LD_ADDR_VAR 0 1
16889: PUSH
16890: LD_VAR 0 4
16894: PUSH
16895: FOR_IN
16896: IFFALSE 16975
// if IsDead ( i ) then
16898: LD_VAR 0 1
16902: PPUSH
16903: CALL_OW 301
16907: IFFALSE 16927
// tmp := tmp diff i else
16909: LD_ADDR_VAR 0 4
16913: PUSH
16914: LD_VAR 0 4
16918: PUSH
16919: LD_VAR 0 1
16923: DIFF
16924: ST_TO_ADDR
16925: GO 16973
// if not HasTask ( i ) then
16927: LD_VAR 0 1
16931: PPUSH
16932: CALL_OW 314
16936: NOT
16937: IFFALSE 16973
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
16939: LD_VAR 0 1
16943: PPUSH
16944: LD_INT 81
16946: PUSH
16947: LD_INT 3
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PPUSH
16954: CALL_OW 69
16958: PPUSH
16959: LD_VAR 0 1
16963: PPUSH
16964: CALL_OW 74
16968: PPUSH
16969: CALL_OW 115
16973: GO 16895
16975: POP
16976: POP
// until not tmp ;
16977: LD_VAR 0 4
16981: NOT
16982: IFFALSE 16878
// end ;
16984: PPOPN 4
16986: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
16987: LD_EXP 6
16991: IFFALSE 17462
16993: GO 16995
16995: DISABLE
16996: LD_INT 0
16998: PPUSH
16999: PPUSH
17000: PPUSH
17001: PPUSH
// begin wait ( 3 3$00 ) ;
17002: LD_INT 6300
17004: PPUSH
17005: CALL_OW 67
// for i := 1 to 3 do
17009: LD_ADDR_VAR 0 1
17013: PUSH
17014: DOUBLE
17015: LD_INT 1
17017: DEC
17018: ST_TO_ADDR
17019: LD_INT 3
17021: PUSH
17022: FOR_TO
17023: IFFALSE 17322
// begin InitHc ;
17025: CALL_OW 19
// InitVc ;
17029: CALL_OW 20
// uc_side := 3 ;
17033: LD_ADDR_OWVAR 20
17037: PUSH
17038: LD_INT 3
17040: ST_TO_ADDR
// uc_nation := 3 ;
17041: LD_ADDR_OWVAR 21
17045: PUSH
17046: LD_INT 3
17048: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17049: LD_INT 22
17051: PUSH
17052: LD_INT 23
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 1
17061: PPUSH
17062: LD_INT 2
17064: PPUSH
17065: CALL_OW 12
17069: ARRAY
17070: PPUSH
17071: LD_INT 1
17073: PPUSH
17074: LD_INT 1
17076: PPUSH
17077: LD_INT 44
17079: PUSH
17080: LD_INT 43
17082: PUSH
17083: LD_INT 42
17085: PUSH
17086: LD_INT 44
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 1
17097: PPUSH
17098: LD_INT 4
17100: PPUSH
17101: CALL_OW 12
17105: ARRAY
17106: PPUSH
17107: LD_INT 99
17109: PPUSH
17110: CALL 32158 0 5
// veh := CreateVehicle ;
17114: LD_ADDR_VAR 0 3
17118: PUSH
17119: CALL_OW 45
17123: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
17124: LD_VAR 0 3
17128: PPUSH
17129: LD_INT 293
17131: PPUSH
17132: LD_INT 246
17134: PPUSH
17135: LD_INT 5
17137: PPUSH
17138: LD_INT 0
17140: PPUSH
17141: CALL 66732 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17145: LD_ADDR_EXP 59
17149: PUSH
17150: LD_EXP 59
17154: PPUSH
17155: LD_EXP 59
17159: PUSH
17160: LD_INT 1
17162: PLUS
17163: PPUSH
17164: LD_VAR 0 3
17168: PPUSH
17169: CALL_OW 1
17173: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
17174: LD_INT 0
17176: PPUSH
17177: LD_INT 3
17179: PPUSH
17180: LD_INT 3
17182: PPUSH
17183: CALL_OW 380
// un := CreateHuman ;
17187: LD_ADDR_VAR 0 2
17191: PUSH
17192: CALL_OW 44
17196: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17197: LD_VAR 0 2
17201: PPUSH
17202: LD_VAR 0 3
17206: PPUSH
17207: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17211: LD_ADDR_EXP 59
17215: PUSH
17216: LD_EXP 59
17220: PPUSH
17221: LD_EXP 59
17225: PUSH
17226: LD_INT 1
17228: PLUS
17229: PPUSH
17230: LD_VAR 0 2
17234: PPUSH
17235: CALL_OW 1
17239: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
17240: LD_VAR 0 2
17244: PPUSH
17245: LD_INT 273
17247: PPUSH
17248: LD_INT 227
17250: PPUSH
17251: CALL_OW 111
// wait ( 0 0$2 ) ;
17255: LD_INT 70
17257: PPUSH
17258: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17262: LD_ADDR_VAR 0 4
17266: PUSH
17267: LD_VAR 0 4
17271: PPUSH
17272: LD_VAR 0 4
17276: PUSH
17277: LD_INT 1
17279: PLUS
17280: PPUSH
17281: LD_VAR 0 3
17285: PPUSH
17286: CALL_OW 1
17290: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17291: LD_ADDR_VAR 0 4
17295: PUSH
17296: LD_VAR 0 4
17300: PPUSH
17301: LD_VAR 0 4
17305: PUSH
17306: LD_INT 1
17308: PLUS
17309: PPUSH
17310: LD_VAR 0 2
17314: PPUSH
17315: CALL_OW 1
17319: ST_TO_ADDR
// end ;
17320: GO 17022
17322: POP
17323: POP
// for i in tmp do
17324: LD_ADDR_VAR 0 1
17328: PUSH
17329: LD_VAR 0 4
17333: PUSH
17334: FOR_IN
17335: IFFALSE 17354
// ComAgressiveMove ( i , 330 , 231 ) ;
17337: LD_VAR 0 1
17341: PPUSH
17342: LD_INT 330
17344: PPUSH
17345: LD_INT 231
17347: PPUSH
17348: CALL_OW 114
17352: GO 17334
17354: POP
17355: POP
// repeat wait ( 0 0$1 ) ;
17356: LD_INT 35
17358: PPUSH
17359: CALL_OW 67
// for i in tmp do
17363: LD_ADDR_VAR 0 1
17367: PUSH
17368: LD_VAR 0 4
17372: PUSH
17373: FOR_IN
17374: IFFALSE 17453
// if IsDead ( i ) then
17376: LD_VAR 0 1
17380: PPUSH
17381: CALL_OW 301
17385: IFFALSE 17405
// tmp := tmp diff i else
17387: LD_ADDR_VAR 0 4
17391: PUSH
17392: LD_VAR 0 4
17396: PUSH
17397: LD_VAR 0 1
17401: DIFF
17402: ST_TO_ADDR
17403: GO 17451
// if not HasTask ( i ) then
17405: LD_VAR 0 1
17409: PPUSH
17410: CALL_OW 314
17414: NOT
17415: IFFALSE 17451
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17417: LD_VAR 0 1
17421: PPUSH
17422: LD_INT 81
17424: PUSH
17425: LD_INT 3
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PPUSH
17432: CALL_OW 69
17436: PPUSH
17437: LD_VAR 0 1
17441: PPUSH
17442: CALL_OW 74
17446: PPUSH
17447: CALL_OW 115
17451: GO 17373
17453: POP
17454: POP
// until not tmp ;
17455: LD_VAR 0 4
17459: NOT
17460: IFFALSE 17356
// end ;
17462: PPOPN 4
17464: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
17465: LD_INT 3
17467: PUSH
17468: LD_INT 22
17470: PUSH
17471: LD_INT 2
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 32
17484: PUSH
17485: LD_INT 1
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PPUSH
17496: CALL_OW 69
17500: IFFALSE 17584
17502: GO 17504
17504: DISABLE
17505: LD_INT 0
17507: PPUSH
// begin enable ;
17508: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
17509: LD_ADDR_VAR 0 1
17513: PUSH
17514: LD_INT 3
17516: PUSH
17517: LD_INT 22
17519: PUSH
17520: LD_INT 2
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 32
17533: PUSH
17534: LD_INT 1
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PPUSH
17545: CALL_OW 69
17549: PUSH
17550: FOR_IN
17551: IFFALSE 17582
// if GetFuel ( i ) < 3 then
17553: LD_VAR 0 1
17557: PPUSH
17558: CALL_OW 261
17562: PUSH
17563: LD_INT 3
17565: LESS
17566: IFFALSE 17580
// SetFuel ( i , 3 ) ;
17568: LD_VAR 0 1
17572: PPUSH
17573: LD_INT 3
17575: PPUSH
17576: CALL_OW 240
17580: GO 17550
17582: POP
17583: POP
// end ; end_of_file
17584: PPOPN 1
17586: END
// export function Action ; begin
17587: LD_INT 0
17589: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
17590: LD_INT 2
17592: PPUSH
17593: LD_INT 4
17595: PPUSH
17596: CALL_OW 332
// Video ( true ) ;
17600: LD_INT 1
17602: PPUSH
17603: CALL 64564 0 1
// music_nat := 3 ;
17607: LD_ADDR_OWVAR 71
17611: PUSH
17612: LD_INT 3
17614: ST_TO_ADDR
// music_class := music_recon ;
17615: LD_ADDR_OWVAR 72
17619: PUSH
17620: LD_INT 3
17622: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
17623: LD_INT 213
17625: PPUSH
17626: LD_INT 89
17628: PPUSH
17629: CALL_OW 86
// if not debug then
17633: LD_EXP 1
17637: NOT
17638: IFFALSE 17672
// begin if Kaia and Olaf then
17640: LD_EXP 37
17644: PUSH
17645: LD_EXP 41
17649: AND
17650: IFFALSE 17656
// SceneKaiaWithOlaf ;
17652: CALL 17734 0 0
// if Givi and Kamil then
17656: LD_EXP 33
17660: PUSH
17661: LD_EXP 36
17665: AND
17666: IFFALSE 17672
// SceneWithGiviAndKamil ;
17668: CALL 18305 0 0
// end ; tick := 0 ;
17672: LD_ADDR_OWVAR 1
17676: PUSH
17677: LD_INT 0
17679: ST_TO_ADDR
// wait ( 3 ) ;
17680: LD_INT 3
17682: PPUSH
17683: CALL_OW 67
// Video ( false ) ;
17687: LD_INT 0
17689: PPUSH
17690: CALL 64564 0 1
// ChangeMissionObjectives ( M1 ) ;
17694: LD_STRING M1
17696: PPUSH
17697: CALL_OW 337
// music_nat := music_auto ;
17701: LD_ADDR_OWVAR 71
17705: PUSH
17706: LD_INT 0
17708: ST_TO_ADDR
// music_class := music_auto ;
17709: LD_ADDR_OWVAR 72
17713: PUSH
17714: LD_INT 0
17716: ST_TO_ADDR
// SaveForQuickRestart ;
17717: CALL_OW 22
// gameActive := true ;
17721: LD_ADDR_EXP 31
17725: PUSH
17726: LD_INT 1
17728: ST_TO_ADDR
// end ;
17729: LD_VAR 0 1
17733: RET
// export function SceneKaiaWithOlaf ; begin
17734: LD_INT 0
17736: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
17737: LD_INT 22
17739: PUSH
17740: LD_INT 2
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 30
17749: PUSH
17750: LD_INT 3
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PPUSH
17761: CALL_OW 69
17765: PPUSH
17766: LD_INT 14
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: LD_INT 1
17774: PPUSH
17775: LD_INT 26
17777: PPUSH
17778: CALL_OW 125
// wait ( 0 0$1 ) ;
17782: LD_INT 35
17784: PPUSH
17785: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
17789: LD_EXP 37
17793: PPUSH
17794: LD_STRING DK-Mem-1
17796: PPUSH
17797: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
17801: LD_EXP 37
17805: PPUSH
17806: LD_STRING DK-Mem-2
17808: PPUSH
17809: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
17813: LD_EXP 41
17817: PPUSH
17818: LD_STRING DO-Mem-3
17820: PPUSH
17821: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
17825: LD_EXP 37
17829: PPUSH
17830: LD_STRING DK-Mem-4
17832: PPUSH
17833: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
17837: LD_EXP 41
17841: PPUSH
17842: LD_STRING DO-Mem-5
17844: PPUSH
17845: CALL_OW 88
// wait ( 0 0$2 ) ;
17849: LD_INT 70
17851: PPUSH
17852: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
17856: LD_INT 22
17858: PUSH
17859: LD_INT 2
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 30
17868: PUSH
17869: LD_INT 3
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PPUSH
17880: CALL_OW 69
17884: PPUSH
17885: LD_INT 90
17887: PPUSH
17888: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
17892: LD_EXP 41
17896: PPUSH
17897: LD_STRING DO-Mem-6
17899: PPUSH
17900: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
17904: LD_EXP 37
17908: PPUSH
17909: LD_STRING DK-Mem-7
17911: PPUSH
17912: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
17916: LD_EXP 32
17920: PPUSH
17921: LD_EXP 37
17925: PPUSH
17926: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
17930: LD_EXP 32
17934: PPUSH
17935: LD_STRING DH-Mem-8
17937: PPUSH
17938: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
17942: LD_EXP 37
17946: PUSH
17947: LD_EXP 41
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PPUSH
17956: LD_EXP 32
17960: PPUSH
17961: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
17965: LD_EXP 41
17969: PPUSH
17970: LD_STRING DO-Mem-9
17972: PPUSH
17973: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
17977: LD_EXP 41
17981: PPUSH
17982: LD_STRING DO-Mem-10
17984: PPUSH
17985: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
17989: LD_EXP 41
17993: PPUSH
17994: LD_STRING DO-Mem-11
17996: PPUSH
17997: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
18001: LD_EXP 41
18005: PPUSH
18006: LD_STRING DO-Mem-12
18008: PPUSH
18009: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
18013: LD_EXP 37
18017: PPUSH
18018: LD_STRING DK-Mem-13
18020: PPUSH
18021: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
18025: LD_EXP 37
18029: PPUSH
18030: LD_STRING DK-Mem-14
18032: PPUSH
18033: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
18037: LD_EXP 37
18041: PPUSH
18042: LD_STRING DK-Mem-15
18044: PPUSH
18045: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
18049: LD_EXP 37
18053: PPUSH
18054: LD_STRING DK-Mem-16
18056: PPUSH
18057: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
18061: LD_EXP 37
18065: PPUSH
18066: LD_STRING DK-Mem-17
18068: PPUSH
18069: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
18073: LD_EXP 41
18077: PPUSH
18078: LD_EXP 37
18082: PPUSH
18083: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
18087: LD_EXP 41
18091: PPUSH
18092: LD_STRING DO-Mem-18
18094: PPUSH
18095: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
18099: LD_EXP 37
18103: PPUSH
18104: LD_EXP 41
18108: PPUSH
18109: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
18113: LD_EXP 37
18117: PPUSH
18118: LD_STRING DK-Mem-19
18120: PPUSH
18121: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
18125: LD_EXP 41
18129: PPUSH
18130: LD_INT 214
18132: PPUSH
18133: LD_INT 86
18135: PPUSH
18136: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
18140: LD_EXP 41
18144: PPUSH
18145: LD_EXP 37
18149: PPUSH
18150: CALL_OW 179
// if Givi then
18154: LD_EXP 33
18158: IFFALSE 18189
// begin ComMoveXY ( Givi , 217 , 86 ) ;
18160: LD_EXP 33
18164: PPUSH
18165: LD_INT 217
18167: PPUSH
18168: LD_INT 86
18170: PPUSH
18171: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
18175: LD_EXP 33
18179: PPUSH
18180: LD_EXP 32
18184: PPUSH
18185: CALL_OW 179
// end ; if Kamil then
18189: LD_EXP 36
18193: IFFALSE 18233
// begin ComExit ( Kamil ) ;
18195: LD_EXP 36
18199: PPUSH
18200: CALL 64990 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
18204: LD_EXP 36
18208: PPUSH
18209: LD_INT 212
18211: PPUSH
18212: LD_INT 86
18214: PPUSH
18215: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
18219: LD_EXP 36
18223: PPUSH
18224: LD_EXP 32
18228: PPUSH
18229: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
18233: LD_INT 70
18235: PPUSH
18236: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
18240: LD_EXP 32
18244: PPUSH
18245: LD_STRING DH-Mem-20
18247: PPUSH
18248: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
18252: LD_EXP 41
18256: PPUSH
18257: LD_INT 215
18259: PPUSH
18260: LD_INT 87
18262: PPUSH
18263: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
18267: LD_EXP 41
18271: PPUSH
18272: LD_EXP 37
18276: PPUSH
18277: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
18281: LD_EXP 37
18285: PPUSH
18286: LD_STRING DK-Mem-21
18288: PPUSH
18289: CALL_OW 88
// wait ( 0 0$2 ) ;
18293: LD_INT 70
18295: PPUSH
18296: CALL_OW 67
// end ;
18300: LD_VAR 0 1
18304: RET
// export function SceneWithGiviAndKamil ; begin
18305: LD_INT 0
18307: PPUSH
// if Markov then
18308: LD_EXP 39
18312: IFFALSE 18397
// begin if IsInUnit ( Markov ) then
18314: LD_EXP 39
18318: PPUSH
18319: CALL_OW 310
18323: IFFALSE 18334
// ComExit ( Markov ) ;
18325: LD_EXP 39
18329: PPUSH
18330: CALL 64990 0 1
// wait ( 3 ) ;
18334: LD_INT 3
18336: PPUSH
18337: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
18341: LD_EXP 39
18345: PPUSH
18346: LD_INT 212
18348: PPUSH
18349: LD_INT 88
18351: PPUSH
18352: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18356: LD_INT 35
18358: PPUSH
18359: CALL_OW 67
// until GetDistUnits ( Markov , Heike ) < 6 ;
18363: LD_EXP 39
18367: PPUSH
18368: LD_EXP 32
18372: PPUSH
18373: CALL_OW 296
18377: PUSH
18378: LD_INT 6
18380: LESS
18381: IFFALSE 18356
// AddComTurnUnit ( Markov , Heike ) ;
18383: LD_EXP 39
18387: PPUSH
18388: LD_EXP 32
18392: PPUSH
18393: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
18397: LD_EXP 33
18401: PPUSH
18402: LD_STRING DG-Obj-1
18404: PPUSH
18405: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
18409: LD_EXP 36
18413: PPUSH
18414: LD_STRING DKam-Obj-2
18416: PPUSH
18417: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
18421: LD_EXP 32
18425: PPUSH
18426: LD_EXP 36
18430: PPUSH
18431: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
18435: LD_EXP 36
18439: PPUSH
18440: LD_STRING DKam-Obj-3
18442: PPUSH
18443: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
18447: LD_EXP 39
18451: PPUSH
18452: LD_STRING DMar-Obj-4
18454: PPUSH
18455: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
18459: LD_EXP 36
18463: PPUSH
18464: LD_STRING DKam-Obj-6
18466: PPUSH
18467: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
18471: LD_EXP 36
18475: PPUSH
18476: LD_STRING DKam-Obj-7
18478: PPUSH
18479: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
18483: LD_EXP 36
18487: PPUSH
18488: LD_STRING DKam-Obj-8
18490: PPUSH
18491: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
18495: LD_EXP 32
18499: PPUSH
18500: LD_STRING DH-Obj-9
18502: PPUSH
18503: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
18507: LD_EXP 36
18511: PPUSH
18512: LD_STRING DKam-Obj-10
18514: PPUSH
18515: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
18519: LD_EXP 36
18523: PPUSH
18524: LD_STRING DKam-Obj-11
18526: PPUSH
18527: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
18531: LD_EXP 39
18535: PPUSH
18536: LD_STRING DMar-Obj-12
18538: PPUSH
18539: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
18543: LD_EXP 39
18547: PPUSH
18548: LD_STRING DMar-Obj-13
18550: PPUSH
18551: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
18555: LD_EXP 39
18559: PPUSH
18560: LD_STRING DMar-Obj-14
18562: PPUSH
18563: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
18567: LD_EXP 41
18571: PPUSH
18572: LD_STRING DO-Obj-15
18574: PPUSH
18575: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
18579: LD_EXP 41
18583: PPUSH
18584: LD_STRING DO-Obj-16
18586: PPUSH
18587: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
18591: LD_EXP 32
18595: PPUSH
18596: LD_STRING DH-Obj-17
18598: PPUSH
18599: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
18603: LD_EXP 41
18607: PPUSH
18608: LD_STRING DO-Obj-18
18610: PPUSH
18611: CALL_OW 88
// end ;
18615: LD_VAR 0 1
18619: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
18620: LD_INT 34
18622: PUSH
18623: LD_INT 92
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PPUSH
18630: CALL_OW 69
18634: IFFALSE 18829
18636: GO 18638
18638: DISABLE
18639: LD_INT 0
18641: PPUSH
// begin wait ( 0 0$2 ) ;
18642: LD_INT 70
18644: PPUSH
18645: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
18649: LD_INT 34
18651: PUSH
18652: LD_INT 92
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PPUSH
18659: CALL_OW 69
18663: PPUSH
18664: CALL_OW 87
// DialogueOn ;
18668: CALL_OW 6
// if Markov then
18672: LD_EXP 39
18676: IFFALSE 18704
// begin Say ( Markov , DMar-Grn-1 ) ;
18678: LD_EXP 39
18682: PPUSH
18683: LD_STRING DMar-Grn-1
18685: PPUSH
18686: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
18690: LD_EXP 32
18694: PPUSH
18695: LD_STRING DH-Grn-2
18697: PPUSH
18698: CALL_OW 88
// end else
18702: GO 18803
// if heikeSecondSquad then
18704: LD_EXP 47
18708: IFFALSE 18803
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18710: LD_ADDR_VAR 0 1
18714: PUSH
18715: LD_EXP 47
18719: PUSH
18720: LD_INT 1
18722: PPUSH
18723: LD_EXP 47
18727: PPUSH
18728: CALL_OW 12
18732: ARRAY
18733: ST_TO_ADDR
// case GetSex ( random ) of 1 :
18734: LD_VAR 0 1
18738: PPUSH
18739: CALL_OW 258
18743: PUSH
18744: LD_INT 1
18746: DOUBLE
18747: EQUAL
18748: IFTRUE 18752
18750: GO 18767
18752: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
18753: LD_VAR 0 1
18757: PPUSH
18758: LD_STRING DArm-Grn-1
18760: PPUSH
18761: CALL_OW 88
18765: GO 18791
18767: LD_INT 2
18769: DOUBLE
18770: EQUAL
18771: IFTRUE 18775
18773: GO 18790
18775: POP
// Say ( random , DArf-Grn-1 ) ; end ;
18776: LD_VAR 0 1
18780: PPUSH
18781: LD_STRING DArf-Grn-1
18783: PPUSH
18784: CALL_OW 88
18788: GO 18791
18790: POP
// Say ( Heike , DH-Grn-2 ) ;
18791: LD_EXP 32
18795: PPUSH
18796: LD_STRING DH-Grn-2
18798: PPUSH
18799: CALL_OW 88
// end ; DialogueOff ;
18803: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
18807: LD_STRING MortarConstructed
18809: PPUSH
18810: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
18814: LD_STRING SelfPropelledMortar
18816: PPUSH
18817: CALL_OW 339
// mortarConstructed := true ;
18821: LD_ADDR_EXP 15
18825: PUSH
18826: LD_INT 1
18828: ST_TO_ADDR
// end ;
18829: PPOPN 1
18831: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
18832: LD_INT 2
18834: PPUSH
18835: LD_INT 8
18837: PPUSH
18838: CALL_OW 294
18842: IFFALSE 18985
18844: GO 18846
18846: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
18847: LD_INT 200
18849: PPUSH
18850: LD_INT 162
18852: PPUSH
18853: LD_INT 2
18855: PPUSH
18856: LD_INT 6
18858: NEG
18859: PPUSH
18860: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
18864: LD_INT 200
18866: PPUSH
18867: LD_INT 162
18869: PPUSH
18870: LD_INT 2
18872: PPUSH
18873: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
18877: LD_INT 200
18879: PPUSH
18880: LD_INT 162
18882: PPUSH
18883: CALL_OW 84
// if not IsOk ( Kurt ) then
18887: LD_EXP 43
18891: PPUSH
18892: CALL_OW 302
18896: NOT
18897: IFFALSE 18901
// exit ;
18899: GO 18985
// Say ( Kurt , DKs-Otpst-2-1 ) ;
18901: LD_EXP 43
18905: PPUSH
18906: LD_STRING DKs-Otpst-2-1
18908: PPUSH
18909: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
18913: LD_EXP 37
18917: PPUSH
18918: LD_STRING DK-Otpst-2-2
18920: PPUSH
18921: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
18925: LD_EXP 43
18929: PPUSH
18930: LD_STRING DKs-Otpst-2-3
18932: PPUSH
18933: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
18937: LD_EXP 43
18941: PPUSH
18942: LD_STRING DKs-Otpst-2-4
18944: PPUSH
18945: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
18949: LD_EXP 43
18953: PPUSH
18954: LD_STRING DKs-Otpst-2-5
18956: PPUSH
18957: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
18961: LD_EXP 36
18965: PPUSH
18966: LD_STRING DKam-Otpst-2-6
18968: PPUSH
18969: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
18973: LD_EXP 43
18977: PPUSH
18978: LD_STRING DKs-Otpst-2-7
18980: PPUSH
18981: CALL_OW 88
// end ;
18985: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
18986: LD_INT 8
18988: PPUSH
18989: LD_INT 22
18991: PUSH
18992: LD_INT 3
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 21
19001: PUSH
19002: LD_INT 3
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PPUSH
19013: CALL_OW 70
19017: NOT
19018: PUSH
19019: LD_EXP 3
19023: NOT
19024: AND
19025: IFFALSE 19273
19027: GO 19029
19029: DISABLE
19030: LD_INT 0
19032: PPUSH
// begin outpostDestroyed := true ;
19033: LD_ADDR_EXP 4
19037: PUSH
19038: LD_INT 1
19040: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
19041: LD_INT 22
19043: PUSH
19044: LD_INT 2
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 34
19053: PUSH
19054: LD_INT 92
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 92
19063: PUSH
19064: LD_INT 195
19066: PUSH
19067: LD_INT 164
19069: PUSH
19070: LD_INT 12
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: LIST
19083: PPUSH
19084: CALL_OW 69
19088: NOT
19089: IFFALSE 19093
// exit ;
19091: GO 19273
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
19093: LD_EXP 33
19097: PPUSH
19098: CALL_OW 302
19102: NOT
19103: PUSH
19104: LD_EXP 37
19108: PPUSH
19109: CALL_OW 302
19113: NOT
19114: OR
19115: IFFALSE 19119
// exit ;
19117: GO 19273
// Say ( Givi , DG-Otpst-1-1 ) ;
19119: LD_EXP 33
19123: PPUSH
19124: LD_STRING DG-Otpst-1-1
19126: PPUSH
19127: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
19131: LD_EXP 37
19135: PPUSH
19136: LD_STRING DK-Otpst-1-2
19138: PPUSH
19139: CALL_OW 88
// if IsOk ( Markov ) then
19143: LD_EXP 39
19147: PPUSH
19148: CALL_OW 302
19152: IFFALSE 19180
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
19154: LD_EXP 39
19158: PPUSH
19159: LD_STRING DMar-Otpst-1-3
19161: PPUSH
19162: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
19166: LD_EXP 39
19170: PPUSH
19171: LD_STRING DMar-Otpst-1-4
19173: PPUSH
19174: CALL_OW 88
// end else
19178: GO 19261
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
19180: LD_ADDR_VAR 0 1
19184: PUSH
19185: LD_EXP 47
19189: PUSH
19190: LD_INT 1
19192: PPUSH
19193: LD_EXP 47
19197: PPUSH
19198: CALL_OW 12
19202: ARRAY
19203: ST_TO_ADDR
// case GetSex ( random ) of 1 :
19204: LD_VAR 0 1
19208: PPUSH
19209: CALL_OW 258
19213: PUSH
19214: LD_INT 1
19216: DOUBLE
19217: EQUAL
19218: IFTRUE 19222
19220: GO 19237
19222: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
19223: LD_VAR 0 1
19227: PPUSH
19228: LD_STRING DArm-Otpst-1-a-3
19230: PPUSH
19231: CALL_OW 88
19235: GO 19261
19237: LD_INT 2
19239: DOUBLE
19240: EQUAL
19241: IFTRUE 19245
19243: GO 19260
19245: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
19246: LD_VAR 0 1
19250: PPUSH
19251: LD_STRING DArf-Otpst-1-a-3
19253: PPUSH
19254: CALL_OW 88
19258: GO 19261
19260: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
19261: LD_EXP 33
19265: PPUSH
19266: LD_STRING DG-Otpst-1-5
19268: PPUSH
19269: CALL_OW 88
// end ;
19273: PPOPN 1
19275: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
19276: LD_EXP 37
19280: PPUSH
19281: CALL_OW 256
19285: PUSH
19286: LD_INT 10
19288: LESS
19289: IFFALSE 19403
19291: GO 19293
19293: DISABLE
// begin DialogueOn ;
19294: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
19298: LD_EXP 37
19302: PPUSH
19303: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
19307: LD_EXP 37
19311: PPUSH
19312: LD_STRING DK-Dead-1
19314: PPUSH
19315: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
19319: LD_EXP 32
19323: PPUSH
19324: LD_STRING DH-Dead-2
19326: PPUSH
19327: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
19331: LD_EXP 37
19335: PPUSH
19336: LD_STRING DK-Dead-3
19338: PPUSH
19339: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
19343: LD_EXP 32
19347: PPUSH
19348: LD_STRING DH-Dead-4
19350: PPUSH
19351: CALL_OW 88
// if IsOk ( Mike ) then
19355: LD_EXP 34
19359: PPUSH
19360: CALL_OW 302
19364: IFFALSE 19390
// begin Say ( Mike , DM-Dead-5 ) ;
19366: LD_EXP 34
19370: PPUSH
19371: LD_STRING DM-Dead-5
19373: PPUSH
19374: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
19378: LD_EXP 32
19382: PPUSH
19383: LD_STRING DH-Dead-6
19385: PPUSH
19386: CALL_OW 88
// end ; DialogueOff ;
19390: CALL_OW 7
// KillUnit ( Kaia ) ;
19394: LD_EXP 37
19398: PPUSH
19399: CALL_OW 66
// end ;
19403: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
19404: LD_OWVAR 1
19408: PUSH
19409: LD_INT 31500
19411: GREATEREQUAL
19412: PUSH
19413: LD_EXP 5
19417: PUSH
19418: LD_INT 5
19420: GREATER
19421: OR
19422: PUSH
19423: LD_INT 22
19425: PUSH
19426: LD_INT 2
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 92
19435: PUSH
19436: LD_INT 103
19438: PUSH
19439: LD_INT 81
19441: PUSH
19442: LD_INT 20
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PPUSH
19455: CALL_OW 69
19459: OR
19460: IFFALSE 19867
19462: GO 19464
19464: DISABLE
19465: LD_INT 0
19467: PPUSH
19468: PPUSH
19469: PPUSH
// begin PrepareRolfSquad ;
19470: CALL 3310 0 0
// dep := HexInfo ( 86 , 54 ) ;
19474: LD_ADDR_VAR 0 3
19478: PUSH
19479: LD_INT 86
19481: PPUSH
19482: LD_INT 54
19484: PPUSH
19485: CALL_OW 428
19489: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
19490: LD_VAR 0 3
19494: PPUSH
19495: CALL_OW 274
19499: PPUSH
19500: LD_INT 1
19502: PPUSH
19503: LD_INT 300
19505: PPUSH
19506: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
19510: LD_VAR 0 3
19514: PPUSH
19515: CALL_OW 274
19519: PPUSH
19520: LD_INT 2
19522: PPUSH
19523: LD_INT 300
19525: PPUSH
19526: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
19530: LD_EXP 49
19534: PPUSH
19535: LD_INT 79
19537: PPUSH
19538: LD_INT 52
19540: PPUSH
19541: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
19545: LD_INT 35
19547: PPUSH
19548: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
19552: LD_INT 12
19554: PPUSH
19555: LD_INT 22
19557: PUSH
19558: LD_INT 3
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 21
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PPUSH
19579: CALL_OW 70
19583: NOT
19584: IFFALSE 19545
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
19586: LD_ADDR_VAR 0 2
19590: PUSH
19591: LD_INT 12
19593: PPUSH
19594: LD_INT 21
19596: PUSH
19597: LD_INT 3
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PPUSH
19604: CALL_OW 70
19608: ST_TO_ADDR
// for i in tmp do
19609: LD_ADDR_VAR 0 1
19613: PUSH
19614: LD_VAR 0 2
19618: PUSH
19619: FOR_IN
19620: IFFALSE 19636
// SetSide ( i , 8 ) ;
19622: LD_VAR 0 1
19626: PPUSH
19627: LD_INT 8
19629: PPUSH
19630: CALL_OW 235
19634: GO 19619
19636: POP
19637: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
19638: LD_INT 63
19640: PPUSH
19641: LD_INT 42
19643: PPUSH
19644: CALL_OW 428
19648: PPUSH
19649: LD_INT 320
19651: PPUSH
19652: CALL_OW 234
// wait ( 0 0$10 ) ;
19656: LD_INT 350
19658: PPUSH
19659: CALL_OW 67
// DialogueOn ;
19663: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
19667: LD_INT 8
19669: PPUSH
19670: LD_INT 2
19672: PPUSH
19673: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
19677: LD_INT 86
19679: PPUSH
19680: LD_INT 54
19682: PPUSH
19683: CALL_OW 428
19687: PPUSH
19688: LD_STRING antwerp
19690: PPUSH
19691: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
19695: LD_EXP 45
19699: PPUSH
19700: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
19704: LD_EXP 45
19708: PPUSH
19709: LD_STRING DRf-rast-1
19711: PPUSH
19712: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
19716: LD_EXP 32
19720: PPUSH
19721: LD_STRING DH-rast-2
19723: PPUSH
19724: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
19728: LD_EXP 45
19732: PPUSH
19733: LD_STRING DRf-rast-3
19735: PPUSH
19736: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
19740: LD_EXP 45
19744: PPUSH
19745: LD_STRING DRf-rast-4
19747: PPUSH
19748: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
19752: LD_EXP 45
19756: PPUSH
19757: LD_STRING DRf-rast-5
19759: PPUSH
19760: CALL_OW 94
// if IsOk ( Aviradze ) then
19764: LD_EXP 44
19768: PPUSH
19769: CALL_OW 302
19773: IFFALSE 19832
// begin CenterNowOnUnits ( Aviradze ) ;
19775: LD_EXP 44
19779: PPUSH
19780: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
19784: LD_EXP 44
19788: PPUSH
19789: LD_STRING DA-rast-6
19791: PPUSH
19792: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
19796: LD_EXP 32
19800: PPUSH
19801: LD_STRING DH-rast-7
19803: PPUSH
19804: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
19808: LD_EXP 33
19812: PPUSH
19813: LD_STRING DG-rast-8
19815: PPUSH
19816: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
19820: LD_EXP 33
19824: PPUSH
19825: LD_STRING DG-rast-9
19827: PPUSH
19828: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
19832: LD_EXP 32
19836: PPUSH
19837: LD_STRING DH-rast-10
19839: PPUSH
19840: CALL_OW 88
// DialogueOff ;
19844: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
19848: LD_STRING M2
19850: PPUSH
19851: CALL_OW 337
// bergkampfArrived := true ;
19855: LD_ADDR_EXP 3
19859: PUSH
19860: LD_INT 1
19862: ST_TO_ADDR
// PrepareRolfBase ;
19863: CALL 3641 0 0
// end ;
19867: PPOPN 3
19869: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
19870: LD_INT 12
19872: PPUSH
19873: LD_INT 22
19875: PUSH
19876: LD_INT 2
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PPUSH
19883: CALL_OW 70
19887: PUSH
19888: LD_EXP 45
19892: PPUSH
19893: CALL_OW 302
19897: AND
19898: PUSH
19899: LD_EXP 29
19903: AND
19904: IFFALSE 20464
19906: GO 19908
19908: DISABLE
19909: LD_INT 0
19911: PPUSH
// begin rolfScriptBase := false ;
19912: LD_ADDR_EXP 9
19916: PUSH
19917: LD_INT 0
19919: ST_TO_ADDR
// DialogueOn ;
19920: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
19924: LD_EXP 45
19928: PPUSH
19929: CALL_OW 87
// if rolfSquad >= 10 then
19933: LD_EXP 49
19937: PUSH
19938: LD_INT 10
19940: GREATEREQUAL
19941: IFFALSE 20120
// begin linkedWithRolf := 2 ;
19943: LD_ADDR_EXP 12
19947: PUSH
19948: LD_INT 2
19950: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
19951: LD_EXP 45
19955: PPUSH
19956: LD_STRING DRf-rast-11
19958: PPUSH
19959: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
19963: LD_EXP 32
19967: PPUSH
19968: LD_STRING DH-rast-12
19970: PPUSH
19971: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
19975: LD_EXP 45
19979: PPUSH
19980: LD_STRING DRf-rast-13
19982: PPUSH
19983: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
19987: LD_EXP 32
19991: PPUSH
19992: LD_STRING DH-rast-14
19994: PPUSH
19995: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
19999: LD_EXP 45
20003: PPUSH
20004: LD_STRING DRf-rast-15
20006: PPUSH
20007: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
20011: LD_EXP 32
20015: PPUSH
20016: LD_STRING DH-rast-16
20018: PPUSH
20019: CALL_OW 88
// if IsOk ( Mike ) then
20023: LD_EXP 34
20027: PPUSH
20028: CALL_OW 302
20032: IFFALSE 20106
// begin Say ( Mike , DM-rast-17 ) ;
20034: LD_EXP 34
20038: PPUSH
20039: LD_STRING DM-rast-17
20041: PPUSH
20042: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
20046: LD_EXP 32
20050: PPUSH
20051: LD_STRING DH-rast-18
20053: PPUSH
20054: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
20058: LD_EXP 34
20062: PPUSH
20063: LD_STRING DM-rast-19
20065: PPUSH
20066: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
20070: LD_EXP 32
20074: PPUSH
20075: LD_STRING DH-rast-20
20077: PPUSH
20078: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
20082: LD_EXP 34
20086: PPUSH
20087: LD_STRING DM-rast-21
20089: PPUSH
20090: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
20094: LD_EXP 32
20098: PPUSH
20099: LD_STRING DH-rast-22
20101: PPUSH
20102: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
20106: LD_EXP 32
20110: PPUSH
20111: LD_STRING DH-rast-23
20113: PPUSH
20114: CALL_OW 88
// end else
20118: GO 20270
// begin linkedWithRolf := 1 ;
20120: LD_ADDR_EXP 12
20124: PUSH
20125: LD_INT 1
20127: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
20128: LD_EXP 45
20132: PPUSH
20133: LD_STRING DRf-rast-a-11
20135: PPUSH
20136: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
20140: LD_EXP 32
20144: PPUSH
20145: LD_STRING DH-rast-a-12
20147: PPUSH
20148: CALL_OW 88
// if IsOk ( Kurt ) then
20152: LD_EXP 43
20156: PPUSH
20157: CALL_OW 302
20161: IFFALSE 20258
// begin Say ( Kurt , DKs-rast-a-13 ) ;
20163: LD_EXP 43
20167: PPUSH
20168: LD_STRING DKs-rast-a-13
20170: PPUSH
20171: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
20175: LD_EXP 45
20179: PPUSH
20180: LD_STRING DRf-rast-a-14
20182: PPUSH
20183: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
20187: LD_EXP 45
20191: PPUSH
20192: LD_STRING DRf-rast-a-15
20194: PPUSH
20195: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
20199: LD_EXP 43
20203: PPUSH
20204: LD_STRING DKs-rast-a-16
20206: PPUSH
20207: CALL_OW 88
// if IsOk ( Givi ) then
20211: LD_EXP 33
20215: PPUSH
20216: CALL_OW 302
20220: IFFALSE 20258
// begin Say ( Givi , DG-rast-a-17 ) ;
20222: LD_EXP 33
20226: PPUSH
20227: LD_STRING DG-rast-a-17
20229: PPUSH
20230: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
20234: LD_EXP 33
20238: PPUSH
20239: LD_STRING DG-rast-a-18
20241: PPUSH
20242: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
20246: LD_EXP 43
20250: PPUSH
20251: LD_STRING DKs-rast-a-19
20253: PPUSH
20254: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
20258: LD_EXP 32
20262: PPUSH
20263: LD_STRING DH-rast-a-20
20265: PPUSH
20266: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
20270: LD_EXP 45
20274: PPUSH
20275: LD_STRING DRf-rast-24
20277: PPUSH
20278: CALL_OW 88
// if IsOk ( Aviradze ) then
20282: LD_EXP 44
20286: PPUSH
20287: CALL_OW 302
20291: IFFALSE 20391
// begin Say ( Aviradze , DA-rast-25 ) ;
20293: LD_EXP 44
20297: PPUSH
20298: LD_STRING DA-rast-25
20300: PPUSH
20301: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
20305: LD_EXP 32
20309: PPUSH
20310: LD_STRING DH-rast-26
20312: PPUSH
20313: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
20317: LD_EXP 44
20321: PPUSH
20322: LD_STRING DA-rast-27
20324: PPUSH
20325: CALL_OW 88
// if IsOk ( Markov ) then
20329: LD_EXP 39
20333: PPUSH
20334: CALL_OW 302
20338: IFFALSE 20366
// begin Say ( Markov , DMar-rast-28 ) ;
20340: LD_EXP 39
20344: PPUSH
20345: LD_STRING DMar-rast-28
20347: PPUSH
20348: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
20352: LD_EXP 39
20356: PPUSH
20357: LD_STRING DMar-rast-29
20359: PPUSH
20360: CALL_OW 88
// end else
20364: GO 20389
// if IsOk ( Sophia ) then
20366: LD_EXP 38
20370: PPUSH
20371: CALL_OW 302
20375: IFFALSE 20389
// begin Say ( Sophia , DS-rast-28 ) ;
20377: LD_EXP 38
20381: PPUSH
20382: LD_STRING DS-rast-28
20384: PPUSH
20385: CALL_OW 88
// end ; end else
20389: GO 20414
// if IsOk ( Sophia ) then
20391: LD_EXP 38
20395: PPUSH
20396: CALL_OW 302
20400: IFFALSE 20414
// Say ( Sophia , DS-rast-29 ) ;
20402: LD_EXP 38
20406: PPUSH
20407: LD_STRING DS-rast-29
20409: PPUSH
20410: CALL_OW 88
// DialogueOff ;
20414: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
20418: LD_STRING M3
20420: PPUSH
20421: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
20425: LD_ADDR_VAR 0 1
20429: PUSH
20430: LD_INT 22
20432: PUSH
20433: LD_INT 8
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PPUSH
20440: CALL_OW 69
20444: PUSH
20445: FOR_IN
20446: IFFALSE 20462
// SetSide ( i , 2 ) ;
20448: LD_VAR 0 1
20452: PPUSH
20453: LD_INT 2
20455: PPUSH
20456: CALL_OW 235
20460: GO 20445
20462: POP
20463: POP
// end ;
20464: PPOPN 1
20466: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
20467: LD_EXP 23
20471: PUSH
20472: LD_EXP 12
20476: NOT
20477: AND
20478: PUSH
20479: LD_EXP 29
20483: AND
20484: IFFALSE 20575
20486: GO 20488
20488: DISABLE
20489: LD_INT 0
20491: PPUSH
// begin canRolfJoin := false ;
20492: LD_ADDR_EXP 29
20496: PUSH
20497: LD_INT 0
20499: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
20500: LD_STRING M3
20502: PPUSH
20503: CALL_OW 337
// for i in rolfSquad do
20507: LD_ADDR_VAR 0 1
20511: PUSH
20512: LD_EXP 49
20516: PUSH
20517: FOR_IN
20518: IFFALSE 20573
// begin ComExit ( i ) ;
20520: LD_VAR 0 1
20524: PPUSH
20525: CALL 64990 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
20529: LD_VAR 0 1
20533: PPUSH
20534: LD_INT 147
20536: PPUSH
20537: LD_INT 162
20539: PPUSH
20540: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
20544: LD_VAR 0 1
20548: PPUSH
20549: LD_INT 1050
20551: PPUSH
20552: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
20556: LD_VAR 0 1
20560: PPUSH
20561: LD_INT 103
20563: PPUSH
20564: LD_INT 162
20566: PPUSH
20567: CALL_OW 174
// end ;
20571: GO 20517
20573: POP
20574: POP
// end ;
20575: PPOPN 1
20577: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
20578: LD_EXP 3
20582: PUSH
20583: LD_EXP 45
20587: PPUSH
20588: CALL_OW 256
20592: PUSH
20593: LD_INT 400
20595: LESS
20596: AND
20597: PUSH
20598: LD_EXP 12
20602: NOT
20603: AND
20604: PUSH
20605: LD_EXP 29
20609: AND
20610: IFFALSE 20884
20612: GO 20614
20614: DISABLE
20615: LD_INT 0
20617: PPUSH
// begin DialogueOn ;
20618: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
20622: LD_EXP 45
20626: PPUSH
20627: LD_STRING DRf-rast-f-11
20629: PPUSH
20630: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
20634: LD_EXP 45
20638: PPUSH
20639: LD_STRING DRf-rast-f-12
20641: PPUSH
20642: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
20646: LD_EXP 45
20650: PPUSH
20651: LD_STRING DRf-rast-f-13
20653: PPUSH
20654: CALL_OW 94
// DialogueOff ;
20658: CALL_OW 7
// KillUnit ( Rolf ) ;
20662: LD_EXP 45
20666: PPUSH
20667: CALL_OW 66
// wait ( 0 0$1 ) ;
20671: LD_INT 35
20673: PPUSH
20674: CALL_OW 67
// if not IsOk ( Givi ) then
20678: LD_EXP 33
20682: PPUSH
20683: CALL_OW 302
20687: NOT
20688: IFFALSE 20692
// exit ;
20690: GO 20884
// DialogueOn ;
20692: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
20696: LD_EXP 33
20700: PPUSH
20701: LD_STRING DG-rast-f-14
20703: PPUSH
20704: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
20708: LD_EXP 33
20712: PPUSH
20713: LD_STRING DG-rast-f-15
20715: PPUSH
20716: CALL_OW 88
// if IsOk ( Kaia ) then
20720: LD_EXP 37
20724: PPUSH
20725: CALL_OW 302
20729: IFFALSE 20745
// Say ( Kaia , DK-rast-f-16 ) else
20731: LD_EXP 37
20735: PPUSH
20736: LD_STRING DK-rast-f-16
20738: PPUSH
20739: CALL_OW 88
20743: GO 20832
// if heikeSecondSquad then
20745: LD_EXP 47
20749: IFFALSE 20832
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20751: LD_ADDR_VAR 0 1
20755: PUSH
20756: LD_EXP 47
20760: PUSH
20761: LD_INT 1
20763: PPUSH
20764: LD_EXP 47
20768: PPUSH
20769: CALL_OW 12
20773: ARRAY
20774: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 258
20784: PUSH
20785: LD_INT 1
20787: DOUBLE
20788: EQUAL
20789: IFTRUE 20793
20791: GO 20808
20793: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
20794: LD_VAR 0 1
20798: PPUSH
20799: LD_STRING DArm-rast-f-a-16
20801: PPUSH
20802: CALL_OW 88
20806: GO 20832
20808: LD_INT 2
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 20831
20816: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
20817: LD_VAR 0 1
20821: PPUSH
20822: LD_STRING DArf-rast-f-a-16
20824: PPUSH
20825: CALL_OW 88
20829: GO 20832
20831: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
20832: LD_EXP 33
20836: PPUSH
20837: LD_STRING DG-rast-f-17
20839: PPUSH
20840: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
20844: LD_EXP 33
20848: PPUSH
20849: LD_STRING DG-rast-f-18
20851: PPUSH
20852: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
20856: LD_EXP 33
20860: PPUSH
20861: LD_STRING DG-rast-f-19
20863: PPUSH
20864: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
20868: LD_EXP 33
20872: PPUSH
20873: LD_STRING DG-rast-f-20
20875: PPUSH
20876: CALL_OW 88
// DialogueOff ;
20880: CALL_OW 7
// end ;
20884: PPOPN 1
20886: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
20887: LD_EXP 31
20891: PUSH
20892: LD_INT 2
20894: PPUSH
20895: LD_INT 10
20897: PPUSH
20898: CALL_OW 294
20902: AND
20903: IFFALSE 20976
20905: GO 20907
20907: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
20908: LD_EXP 33
20912: PPUSH
20913: LD_STRING DG-Len-1
20915: PPUSH
20916: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
20920: LD_EXP 43
20924: PPUSH
20925: LD_STRING DKs-Len-2
20927: PPUSH
20928: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
20932: LD_EXP 43
20936: PPUSH
20937: LD_STRING DKs-Len-3
20939: PPUSH
20940: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
20944: LD_EXP 32
20948: PPUSH
20949: LD_STRING DH-Len-4
20951: PPUSH
20952: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
20956: LD_EXP 37
20960: PPUSH
20961: LD_STRING DK-Len-5
20963: PPUSH
20964: CALL_OW 88
// leninSpotted := true ;
20968: LD_ADDR_EXP 14
20972: PUSH
20973: LD_INT 1
20975: ST_TO_ADDR
// end ;
20976: END
// every 0 0$1 trigger bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] do var i , tmp , inOmarBase , heikeNearbyOmar ;
20977: LD_EXP 3
20981: PUSH
20982: LD_OWVAR 1
20986: PUSH
20987: LD_INT 67200
20989: PUSH
20990: LD_INT 63000
20992: PUSH
20993: LD_INT 58800
20995: PUSH
20996: LD_INT 54600
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: PUSH
21005: LD_OWVAR 67
21009: ARRAY
21010: GREATER
21011: AND
21012: IFFALSE 21712
21014: GO 21016
21016: DISABLE
21017: LD_INT 0
21019: PPUSH
21020: PPUSH
21021: PPUSH
21022: PPUSH
// begin PrepareOmarSquad ;
21023: CALL 4923 0 0
// repeat wait ( 0 0$1 ) ;
21027: LD_INT 35
21029: PPUSH
21030: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
21034: LD_INT 14
21036: PPUSH
21037: LD_INT 22
21039: PUSH
21040: LD_INT 3
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 2
21049: PUSH
21050: LD_INT 21
21052: PUSH
21053: LD_INT 1
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 59
21062: PUSH
21063: EMPTY
21064: LIST
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PPUSH
21075: CALL_OW 70
21079: NOT
21080: IFFALSE 21027
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
21082: LD_ADDR_VAR 0 2
21086: PUSH
21087: LD_INT 14
21089: PPUSH
21090: LD_INT 22
21092: PUSH
21093: LD_INT 2
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PPUSH
21100: CALL_OW 70
21104: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
21105: LD_ADDR_VAR 0 3
21109: PUSH
21110: LD_VAR 0 2
21114: PUSH
21115: LD_INT 0
21117: GREATER
21118: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
21119: LD_ADDR_VAR 0 4
21123: PUSH
21124: LD_EXP 32
21128: PPUSH
21129: LD_INT 14
21131: PPUSH
21132: CALL_OW 308
21136: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
21137: LD_VAR 0 2
21141: PPUSH
21142: LD_INT 21
21144: PUSH
21145: LD_INT 3
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PPUSH
21152: CALL_OW 72
21156: IFFALSE 21261
// begin if heikeNearbyOmar then
21158: LD_VAR 0 4
21162: IFFALSE 21178
// Say ( Omar , DOm-Base-1b ) else
21164: LD_EXP 42
21168: PPUSH
21169: LD_STRING DOm-Base-1b
21171: PPUSH
21172: CALL_OW 88
21176: GO 21190
// SayRadio ( Omar , DOm-Base-1br ) ;
21178: LD_EXP 42
21182: PPUSH
21183: LD_STRING DOm-Base-1br
21185: PPUSH
21186: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
21190: LD_ADDR_VAR 0 1
21194: PUSH
21195: LD_VAR 0 2
21199: PPUSH
21200: LD_INT 21
21202: PUSH
21203: LD_INT 3
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PPUSH
21210: CALL_OW 72
21214: PUSH
21215: FOR_IN
21216: IFFALSE 21257
// begin if UnitsInside ( i ) then
21218: LD_VAR 0 1
21222: PPUSH
21223: CALL_OW 313
21227: IFFALSE 21243
// ComExitBuilding ( UnitsInside ( i ) ) ;
21229: LD_VAR 0 1
21233: PPUSH
21234: CALL_OW 313
21238: PPUSH
21239: CALL_OW 122
// SetSide ( i , 5 ) ;
21243: LD_VAR 0 1
21247: PPUSH
21248: LD_INT 5
21250: PPUSH
21251: CALL_OW 235
// end ;
21255: GO 21215
21257: POP
21258: POP
// end else
21259: GO 21354
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
21261: LD_VAR 0 2
21265: PPUSH
21266: LD_INT 21
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PPUSH
21276: CALL_OW 72
21280: IFFALSE 21316
// begin if heikeNearbyOmar then
21282: LD_VAR 0 4
21286: IFFALSE 21302
// Say ( Omar , DOm-Base-1v ) else
21288: LD_EXP 42
21292: PPUSH
21293: LD_STRING DOm-Base-1v
21295: PPUSH
21296: CALL_OW 88
21300: GO 21314
// SayRadio ( Omar , DOm-Base-1vr ) end else
21302: LD_EXP 42
21306: PPUSH
21307: LD_STRING DOm-Base-1vr
21309: PPUSH
21310: CALL_OW 94
21314: GO 21354
// if inOmarBase then
21316: LD_VAR 0 3
21320: IFFALSE 21354
// begin if heikeNearbyOmar then
21322: LD_VAR 0 4
21326: IFFALSE 21342
// Say ( Omar , DOm-Base-1h ) else
21328: LD_EXP 42
21332: PPUSH
21333: LD_STRING DOm-Base-1h
21335: PPUSH
21336: CALL_OW 88
21340: GO 21354
// SayRadio ( Omar , DOm-Base-1hr ) end ;
21342: LD_EXP 42
21346: PPUSH
21347: LD_STRING DOm-Base-1hr
21349: PPUSH
21350: CALL_OW 94
// for i in omarSquad do
21354: LD_ADDR_VAR 0 1
21358: PUSH
21359: LD_EXP 50
21363: PUSH
21364: FOR_IN
21365: IFFALSE 21396
// if GetLives ( i ) < 750 then
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL_OW 256
21376: PUSH
21377: LD_INT 750
21379: LESS
21380: IFFALSE 21394
// SetLives ( i , 1000 ) ;
21382: LD_VAR 0 1
21386: PPUSH
21387: LD_INT 1000
21389: PPUSH
21390: CALL_OW 234
21394: GO 21364
21396: POP
21397: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
21398: LD_ADDR_VAR 0 1
21402: PUSH
21403: LD_INT 14
21405: PPUSH
21406: LD_INT 21
21408: PUSH
21409: LD_INT 3
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PPUSH
21416: CALL_OW 70
21420: PUSH
21421: FOR_IN
21422: IFFALSE 21438
// SetSide ( i , 5 ) ;
21424: LD_VAR 0 1
21428: PPUSH
21429: LD_INT 5
21431: PPUSH
21432: CALL_OW 235
21436: GO 21421
21438: POP
21439: POP
// wait ( 0 0$3 ) ;
21440: LD_INT 105
21442: PPUSH
21443: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
21447: LD_INT 5
21449: PPUSH
21450: LD_INT 2
21452: PPUSH
21453: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
21457: LD_EXP 42
21461: PPUSH
21462: CALL_OW 87
// DialogueOn ;
21466: CALL_OW 6
// if heikeNearbyOmar then
21470: LD_VAR 0 4
21474: IFFALSE 21532
// begin Say ( Omar , DOm-Veh-1a ) ;
21476: LD_EXP 42
21480: PPUSH
21481: LD_STRING DOm-Veh-1a
21483: PPUSH
21484: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
21488: LD_EXP 42
21492: PPUSH
21493: LD_STRING DOm-Veh-2a
21495: PPUSH
21496: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
21500: LD_EXP 42
21504: PPUSH
21505: LD_STRING DOm-Veh-3a
21507: PPUSH
21508: CALL_OW 88
// if mortarConstructed then
21512: LD_EXP 15
21516: IFFALSE 21530
// Say ( Omar , DOm-Veh-4a ) ;
21518: LD_EXP 42
21522: PPUSH
21523: LD_STRING DOm-Veh-4a
21525: PPUSH
21526: CALL_OW 88
// end else
21530: GO 21586
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
21532: LD_EXP 42
21536: PPUSH
21537: LD_STRING DOm-Veh-1
21539: PPUSH
21540: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
21544: LD_EXP 42
21548: PPUSH
21549: LD_STRING DOm-Veh-2
21551: PPUSH
21552: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
21556: LD_EXP 42
21560: PPUSH
21561: LD_STRING DOm-Veh-3
21563: PPUSH
21564: CALL_OW 94
// if mortarConstructed then
21568: LD_EXP 15
21572: IFFALSE 21586
// SayRadio ( Omar , DOm-Veh-4 ) ;
21574: LD_EXP 42
21578: PPUSH
21579: LD_STRING DOm-Veh-4
21581: PPUSH
21582: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
21586: LD_EXP 32
21590: PPUSH
21591: LD_STRING DH-Veh-5
21593: PPUSH
21594: CALL_OW 88
// if IsOk ( Kurt ) then
21598: LD_EXP 43
21602: PPUSH
21603: CALL_OW 302
21607: IFFALSE 21657
// begin Say ( Kurt , DKs-Veh-6 ) ;
21609: LD_EXP 43
21613: PPUSH
21614: LD_STRING DKs-Veh-6
21616: PPUSH
21617: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
21621: LD_EXP 43
21625: PPUSH
21626: LD_STRING DKs-Veh-7
21628: PPUSH
21629: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
21633: LD_EXP 33
21637: PPUSH
21638: LD_STRING DG-Veh-8
21640: PPUSH
21641: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
21645: LD_EXP 34
21649: PPUSH
21650: LD_STRING DM-Veh-9
21652: PPUSH
21653: CALL_OW 88
// end ; DialogueOff ;
21657: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
21661: LD_STRING M4
21663: PPUSH
21664: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
21668: LD_EXP 42
21672: PPUSH
21673: LD_INT 341
21675: PPUSH
21676: LD_INT 232
21678: PPUSH
21679: CALL_OW 428
21683: PPUSH
21684: CALL_OW 120
// omarArrived := true ;
21688: LD_ADDR_EXP 6
21692: PUSH
21693: LD_INT 1
21695: ST_TO_ADDR
// omarScriptBase := true ;
21696: LD_ADDR_EXP 10
21700: PUSH
21701: LD_INT 1
21703: ST_TO_ADDR
// omarWantVehicles := true ;
21704: LD_ADDR_EXP 18
21708: PUSH
21709: LD_INT 1
21711: ST_TO_ADDR
// end ;
21712: PPOPN 4
21714: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
21715: LD_INT 10
21717: PPUSH
21718: LD_INT 22
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PPUSH
21728: CALL_OW 70
21732: PUSH
21733: LD_EXP 6
21737: AND
21738: PUSH
21739: LD_EXP 42
21743: PPUSH
21744: CALL_OW 302
21748: AND
21749: PUSH
21750: LD_EXP 23
21754: NOT
21755: AND
21756: IFFALSE 21773
21758: GO 21760
21760: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
21761: LD_EXP 42
21765: PPUSH
21766: LD_STRING DOm-Lenin
21768: PPUSH
21769: CALL_OW 94
21773: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
21774: LD_EXP 45
21778: PPUSH
21779: CALL_OW 302
21783: PUSH
21784: LD_EXP 12
21788: AND
21789: PUSH
21790: LD_EXP 6
21794: AND
21795: IFFALSE 21899
21797: GO 21799
21799: DISABLE
// begin wait ( 0 0$20 ) ;
21800: LD_INT 700
21802: PPUSH
21803: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
21807: LD_EXP 45
21811: PPUSH
21812: CALL_OW 87
// DialogueOn ;
21816: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
21820: LD_EXP 45
21824: PPUSH
21825: LD_STRING DRf-Veh-10
21827: PPUSH
21828: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
21832: LD_EXP 45
21836: PPUSH
21837: LD_STRING DRf-Veh-11
21839: PPUSH
21840: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
21844: LD_EXP 32
21848: PPUSH
21849: LD_STRING DH-Veh-12
21851: PPUSH
21852: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
21856: LD_EXP 32
21860: PPUSH
21861: LD_STRING DH-Veh-13
21863: PPUSH
21864: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
21868: LD_EXP 45
21872: PPUSH
21873: LD_STRING DRf-Veh-14
21875: PPUSH
21876: CALL_OW 88
// DialogueOff ;
21880: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
21884: LD_STRING M5
21886: PPUSH
21887: CALL_OW 337
// rolfWantVehicles := true ;
21891: LD_ADDR_EXP 17
21895: PUSH
21896: LD_INT 1
21898: ST_TO_ADDR
// end ;
21899: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
21900: LD_EXP 18
21904: IFFALSE 22667
21906: GO 21908
21908: DISABLE
21909: LD_INT 0
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
21916: PPUSH
// begin wait ( 0 0$3 ) ;
21917: LD_INT 105
21919: PPUSH
21920: CALL_OW 67
// Hint ( OmarVehicles ) ;
21924: LD_STRING OmarVehicles
21926: PPUSH
21927: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
21931: LD_INT 16
21933: PPUSH
21934: LD_INT 1
21936: PPUSH
21937: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
21941: LD_INT 35
21943: PPUSH
21944: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
21948: LD_ADDR_EXP 20
21952: PUSH
21953: LD_EXP 20
21957: PUSH
21958: LD_INT 35
21960: MINUS
21961: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
21962: LD_EXP 20
21966: PUSH
21967: LD_INT 0
21969: LESSEQUAL
21970: IFFALSE 22070
// begin display_strings := [ ] ;
21972: LD_ADDR_OWVAR 47
21976: PUSH
21977: EMPTY
21978: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
21979: LD_STRING M4a
21981: PPUSH
21982: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
21986: LD_INT 16
21988: PPUSH
21989: LD_INT 0
21991: PPUSH
21992: CALL_OW 424
// DialogueOn ;
21996: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
22000: LD_EXP 42
22004: PPUSH
22005: LD_STRING DOm-Veh-b-15
22007: PPUSH
22008: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
22012: LD_EXP 32
22016: PPUSH
22017: LD_STRING DH-Veh-b-16
22019: PPUSH
22020: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
22024: LD_EXP 42
22028: PPUSH
22029: LD_STRING DOm-Veh-b-17
22031: PPUSH
22032: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
22036: LD_EXP 37
22040: PPUSH
22041: LD_STRING DK-Veh-b-18
22043: PPUSH
22044: CALL_OW 88
// DialogueOff ;
22048: CALL_OW 7
// omarAttack := true ;
22052: LD_ADDR_EXP 23
22056: PUSH
22057: LD_INT 1
22059: ST_TO_ADDR
// omarScriptBase := false ;
22060: LD_ADDR_EXP 10
22064: PUSH
22065: LD_INT 0
22067: ST_TO_ADDR
// exit ;
22068: GO 22667
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
22070: LD_EXP 21
22074: PUSH
22075: LD_INT 16
22077: PPUSH
22078: LD_INT 22
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 21
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 3
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: LD_INT 34
22106: PUSH
22107: LD_INT 32
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 34
22116: PUSH
22117: LD_INT 88
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 34
22126: PUSH
22127: LD_INT 31
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 33
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 58
22156: PUSH
22157: EMPTY
22158: LIST
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: PPUSH
22167: CALL_OW 70
22171: LESSEQUAL
22172: IFFALSE 21941
// omarWaitingForVehiclesTimer := 0 0$00 ;
22174: LD_ADDR_EXP 20
22178: PUSH
22179: LD_INT 0
22181: ST_TO_ADDR
// display_strings := [ ] ;
22182: LD_ADDR_OWVAR 47
22186: PUSH
22187: EMPTY
22188: ST_TO_ADDR
// DialogueOn ;
22189: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
22193: LD_EXP 42
22197: PPUSH
22198: LD_STRING DOm-Veh-a-15
22200: PPUSH
22201: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
22205: LD_EXP 37
22209: PPUSH
22210: LD_STRING DK-Veh-a-16
22212: PPUSH
22213: CALL_OW 88
// DialogueOff ;
22217: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
22221: LD_STRING M4a
22223: PPUSH
22224: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
22228: LD_INT 16
22230: PPUSH
22231: LD_INT 0
22233: PPUSH
22234: CALL_OW 424
// omarHasVehicles := true ;
22238: LD_ADDR_EXP 22
22242: PUSH
22243: LD_INT 1
22245: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22246: LD_INT 35
22248: PPUSH
22249: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
22253: LD_EXP 19
22257: PUSH
22258: LD_INT 0
22260: EQUAL
22261: IFFALSE 22246
// wait ( 1 1$00 ) ;
22263: LD_INT 2100
22265: PPUSH
22266: CALL_OW 67
// omarAttack := true ;
22270: LD_ADDR_EXP 23
22274: PUSH
22275: LD_INT 1
22277: ST_TO_ADDR
// omarScriptBase := false ;
22278: LD_ADDR_EXP 10
22282: PUSH
22283: LD_INT 0
22285: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
22286: LD_ADDR_VAR 0 2
22290: PUSH
22291: LD_INT 16
22293: PPUSH
22294: LD_INT 22
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 21
22306: PUSH
22307: LD_INT 2
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 33
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 58
22326: PUSH
22327: EMPTY
22328: LIST
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: PPUSH
22336: CALL_OW 70
22340: ST_TO_ADDR
// for i in tmp do
22341: LD_ADDR_VAR 0 1
22345: PUSH
22346: LD_VAR 0 2
22350: PUSH
22351: FOR_IN
22352: IFFALSE 22380
// begin SetFuel ( i , 100 ) ;
22354: LD_VAR 0 1
22358: PPUSH
22359: LD_INT 100
22361: PPUSH
22362: CALL_OW 240
// SetSide ( i , 5 ) ;
22366: LD_VAR 0 1
22370: PPUSH
22371: LD_INT 5
22373: PPUSH
22374: CALL_OW 235
// end ;
22378: GO 22351
22380: POP
22381: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
22382: LD_ADDR_VAR 0 3
22386: PUSH
22387: LD_EXP 50
22391: PPUSH
22392: LD_INT 25
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PPUSH
22402: CALL_OW 72
22406: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
22407: LD_ADDR_VAR 0 4
22411: PUSH
22412: LD_EXP 50
22416: PPUSH
22417: LD_INT 3
22419: PUSH
22420: LD_INT 55
22422: PUSH
22423: EMPTY
22424: LIST
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 25
22432: PUSH
22433: LD_INT 3
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PPUSH
22444: CALL_OW 72
22448: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
22449: LD_ADDR_VAR 0 5
22453: PUSH
22454: LD_INT 324
22456: PPUSH
22457: LD_INT 234
22459: PPUSH
22460: CALL_OW 428
22464: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
22465: LD_ADDR_VAR 0 6
22469: PUSH
22470: LD_INT 334
22472: PPUSH
22473: LD_INT 241
22475: PPUSH
22476: CALL_OW 428
22480: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
22481: LD_VAR 0 6
22485: PPUSH
22486: CALL_OW 313
22490: PPUSH
22491: CALL_OW 122
// if eng then
22495: LD_VAR 0 3
22499: IFFALSE 22607
// begin if eng + mech <= tmp then
22501: LD_VAR 0 3
22505: PUSH
22506: LD_VAR 0 4
22510: PLUS
22511: PUSH
22512: LD_VAR 0 2
22516: LESSEQUAL
22517: IFFALSE 22572
// begin ComEnterUnit ( eng , workshop ) ;
22519: LD_VAR 0 3
22523: PPUSH
22524: LD_VAR 0 5
22528: PPUSH
22529: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
22533: LD_VAR 0 3
22537: PPUSH
22538: LD_INT 3
22540: PPUSH
22541: CALL_OW 183
// AddComExitBuilding ( eng ) ;
22545: LD_VAR 0 3
22549: PPUSH
22550: CALL_OW 182
// mech := mech union eng ;
22554: LD_ADDR_VAR 0 4
22558: PUSH
22559: LD_VAR 0 4
22563: PUSH
22564: LD_VAR 0 3
22568: UNION
22569: ST_TO_ADDR
// end else
22570: GO 22607
// begin ComEnterUnit ( eng , armoury ) ;
22572: LD_VAR 0 3
22576: PPUSH
22577: LD_VAR 0 6
22581: PPUSH
22582: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
22586: LD_VAR 0 3
22590: PPUSH
22591: LD_INT 1
22593: PPUSH
22594: CALL_OW 183
// AddComExitBuilding ( eng ) ;
22598: LD_VAR 0 3
22602: PPUSH
22603: CALL_OW 182
// end ; end ; for i := 1 to tmp do
22607: LD_ADDR_VAR 0 1
22611: PUSH
22612: DOUBLE
22613: LD_INT 1
22615: DEC
22616: ST_TO_ADDR
22617: LD_VAR 0 2
22621: PUSH
22622: FOR_TO
22623: IFFALSE 22665
// if i <= mech then
22625: LD_VAR 0 1
22629: PUSH
22630: LD_VAR 0 4
22634: LESSEQUAL
22635: IFFALSE 22663
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
22637: LD_VAR 0 4
22641: PUSH
22642: LD_VAR 0 1
22646: ARRAY
22647: PPUSH
22648: LD_VAR 0 2
22652: PUSH
22653: LD_VAR 0 1
22657: ARRAY
22658: PPUSH
22659: CALL_OW 180
22663: GO 22622
22665: POP
22666: POP
// end ;
22667: PPOPN 6
22669: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
22670: LD_EXP 45
22674: PPUSH
22675: CALL_OW 302
22679: PUSH
22680: LD_EXP 17
22684: AND
22685: IFFALSE 23137
22687: GO 22689
22689: DISABLE
22690: LD_INT 0
22692: PPUSH
// begin repeat wait ( 0 0$1 ) ;
22693: LD_INT 35
22695: PPUSH
22696: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
22700: LD_ADDR_EXP 19
22704: PUSH
22705: LD_EXP 19
22709: PUSH
22710: LD_INT 35
22712: MINUS
22713: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
22714: LD_EXP 19
22718: PUSH
22719: LD_INT 0
22721: LESSEQUAL
22722: IFFALSE 22940
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
22724: LD_ADDR_EXP 19
22728: PUSH
22729: LD_INT 0
22731: ST_TO_ADDR
// display_strings := [ ] ;
22732: LD_ADDR_OWVAR 47
22736: PUSH
22737: EMPTY
22738: ST_TO_ADDR
// DialogueOn ;
22739: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
22743: LD_EXP 45
22747: PPUSH
22748: LD_STRING DRf-Veh-b-19
22750: PPUSH
22751: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
22755: LD_EXP 45
22759: PPUSH
22760: LD_STRING DRf-Veh-b-20
22762: PPUSH
22763: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
22767: LD_EXP 32
22771: PPUSH
22772: LD_STRING DH-Veh-b-21
22774: PPUSH
22775: CALL_OW 88
// if IsOk ( Givi ) then
22779: LD_EXP 33
22783: PPUSH
22784: CALL_OW 302
22788: IFFALSE 22826
// begin Say ( Givi , DG-Veh-b-22 ) ;
22790: LD_EXP 33
22794: PPUSH
22795: LD_STRING DG-Veh-b-22
22797: PPUSH
22798: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
22802: LD_EXP 32
22806: PPUSH
22807: LD_STRING DH-Veh-b-23
22809: PPUSH
22810: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
22814: LD_EXP 33
22818: PPUSH
22819: LD_STRING DG-Veh-b-24
22821: PPUSH
22822: CALL_OW 88
// end ; DialogueOff ;
22826: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
22830: LD_STRING M5a
22832: PPUSH
22833: CALL_OW 337
// for i in rolfSquad do
22837: LD_ADDR_VAR 0 1
22841: PUSH
22842: LD_EXP 49
22846: PUSH
22847: FOR_IN
22848: IFFALSE 22914
// begin SetSide ( i , 8 ) ;
22850: LD_VAR 0 1
22854: PPUSH
22855: LD_INT 8
22857: PPUSH
22858: CALL_OW 235
// if IsDriver ( i ) then
22862: LD_VAR 0 1
22866: PPUSH
22867: CALL 62201 0 1
22871: IFFALSE 22892
// SetSide ( IsInUnit ( i ) , 8 ) else
22873: LD_VAR 0 1
22877: PPUSH
22878: CALL_OW 310
22882: PPUSH
22883: LD_INT 8
22885: PPUSH
22886: CALL_OW 235
22890: GO 22912
// if IsInUnit ( i ) then
22892: LD_VAR 0 1
22896: PPUSH
22897: CALL_OW 310
22901: IFFALSE 22912
// ComExitBuilding ( i ) ;
22903: LD_VAR 0 1
22907: PPUSH
22908: CALL_OW 122
// end ;
22912: GO 22847
22914: POP
22915: POP
// wait ( 0 0$1 ) ;
22916: LD_INT 35
22918: PPUSH
22919: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
22923: LD_EXP 49
22927: PPUSH
22928: LD_INT 229
22930: PPUSH
22931: LD_INT 154
22933: PPUSH
22934: CALL_OW 114
// exit ;
22938: GO 23137
// end ; if IsDead ( Rolf ) then
22940: LD_EXP 45
22944: PPUSH
22945: CALL_OW 301
22949: IFFALSE 22960
// begin ChangeMissionObjectives ( M5a ) ;
22951: LD_STRING M5a
22953: PPUSH
22954: CALL_OW 337
// exit ;
22958: GO 23137
// end ; until Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) ;
22960: LD_EXP 49
22964: PPUSH
22965: LD_INT 55
22967: PUSH
22968: EMPTY
22969: LIST
22970: PPUSH
22971: CALL_OW 72
22975: PPUSH
22976: CALL 29245 0 1
22980: PUSH
22981: LD_EXP 49
22985: PPUSH
22986: CALL 29245 0 1
22990: EQUAL
22991: IFFALSE 22693
// rolfWaitingForVehiclesTimer := 0 0$00 ;
22993: LD_ADDR_EXP 19
22997: PUSH
22998: LD_INT 0
23000: ST_TO_ADDR
// display_strings := [ ] ;
23001: LD_ADDR_OWVAR 47
23005: PUSH
23006: EMPTY
23007: ST_TO_ADDR
// DialogueOn ;
23008: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
23012: LD_EXP 45
23016: PPUSH
23017: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
23021: LD_EXP 45
23025: PPUSH
23026: LD_STRING DRf-Veh-a-17
23028: PPUSH
23029: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
23033: LD_EXP 32
23037: PPUSH
23038: LD_STRING DH-08-Veh-a-18
23040: PPUSH
23041: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
23045: LD_EXP 45
23049: PPUSH
23050: LD_STRING DRf-Veh-a-19
23052: PPUSH
23053: CALL_OW 88
// DialogueOff ;
23057: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
23061: LD_STRING M5a
23063: PPUSH
23064: CALL_OW 337
// rolfHasVehicles := true ;
23068: LD_ADDR_EXP 16
23072: PUSH
23073: LD_INT 1
23075: ST_TO_ADDR
// for i in rolfSquad do
23076: LD_ADDR_VAR 0 1
23080: PUSH
23081: LD_EXP 49
23085: PUSH
23086: FOR_IN
23087: IFFALSE 23120
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
23089: LD_VAR 0 1
23093: PPUSH
23094: CALL_OW 310
23098: PPUSH
23099: LD_INT 8
23101: PPUSH
23102: CALL_OW 235
// SetSide ( i , 8 ) ;
23106: LD_VAR 0 1
23110: PPUSH
23111: LD_INT 8
23113: PPUSH
23114: CALL_OW 235
// end ;
23118: GO 23086
23120: POP
23121: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
23122: LD_EXP 49
23126: PPUSH
23127: LD_INT 229
23129: PPUSH
23130: LD_INT 154
23132: PPUSH
23133: CALL_OW 114
// end ;
23137: PPOPN 1
23139: END
// every 0 0$1 trigger leninSpotted do
23140: LD_EXP 14
23144: IFFALSE 23232
23146: GO 23148
23148: DISABLE
// begin wait ( 0 0$10 ) ;
23149: LD_INT 350
23151: PPUSH
23152: CALL_OW 67
// DialogueOn ;
23156: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
23160: LD_EXP 44
23164: PPUSH
23165: LD_STRING DA-Transmission-1
23167: PPUSH
23168: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
23172: LD_EXP 51
23176: PPUSH
23177: LD_STRING DMzw-Transmission-2
23179: PPUSH
23180: CALL_OW 94
// if gaidarKilled then
23184: LD_EXP 7
23188: IFFALSE 23204
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
23190: LD_EXP 51
23194: PPUSH
23195: LD_STRING DMzw-Transmission-3
23197: PPUSH
23198: CALL_OW 94
23202: GO 23216
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
23204: LD_EXP 51
23208: PPUSH
23209: LD_STRING DMzw-Transmission-a-3
23211: PPUSH
23212: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
23216: LD_EXP 32
23220: PPUSH
23221: LD_STRING DH-Transmission-4
23223: PPUSH
23224: CALL_OW 88
// DialogueOff ;
23228: CALL_OW 7
// end ;
23232: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
23233: LD_INT 22
23235: PUSH
23236: LD_INT 3
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 25
23245: PUSH
23246: LD_INT 9
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 101
23255: PUSH
23256: LD_INT 2
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: LIST
23267: PPUSH
23268: CALL_OW 69
23272: PUSH
23273: LD_EXP 32
23277: PPUSH
23278: CALL_OW 302
23282: AND
23283: IFFALSE 23348
23285: GO 23287
23287: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
23288: LD_INT 22
23290: PUSH
23291: LD_INT 3
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 25
23300: PUSH
23301: LD_INT 9
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 101
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: PPUSH
23323: CALL_OW 69
23327: PUSH
23328: LD_INT 1
23330: ARRAY
23331: PPUSH
23332: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
23336: LD_EXP 32
23340: PPUSH
23341: LD_STRING DH-Rubazooka-1
23343: PPUSH
23344: CALL_OW 88
// end ;
23348: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
23349: LD_INT 19
23351: PPUSH
23352: LD_INT 22
23354: PUSH
23355: LD_INT 3
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PPUSH
23362: CALL_OW 70
23366: PUSH
23367: LD_EXP 28
23371: AND
23372: IFFALSE 23423
23374: GO 23376
23376: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
23377: LD_INT 19
23379: PPUSH
23380: LD_INT 22
23382: PUSH
23383: LD_INT 3
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PPUSH
23390: CALL_OW 70
23394: PPUSH
23395: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
23399: LD_EXP 32
23403: PPUSH
23404: LD_STRING DH-Ruattfirst-1
23406: PPUSH
23407: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
23411: LD_EXP 32
23415: PPUSH
23416: LD_STRING DH-Ruattfirst-2
23418: PPUSH
23419: CALL_OW 88
// end ;
23423: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
23424: LD_INT 19
23426: PPUSH
23427: LD_INT 22
23429: PUSH
23430: LD_INT 3
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PPUSH
23437: CALL_OW 70
23441: PUSH
23442: LD_EXP 28
23446: NOT
23447: AND
23448: IFFALSE 23487
23450: GO 23452
23452: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
23453: LD_INT 19
23455: PPUSH
23456: LD_INT 22
23458: PUSH
23459: LD_INT 3
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PPUSH
23466: CALL_OW 70
23470: PPUSH
23471: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
23475: LD_EXP 32
23479: PPUSH
23480: LD_STRING DH-Ruattnext-1
23482: PPUSH
23483: CALL_OW 88
// end ;
23487: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
23488: LD_EXP 51
23492: PPUSH
23493: CALL_OW 301
23497: PUSH
23498: LD_EXP 42
23502: PPUSH
23503: CALL_OW 302
23507: AND
23508: IFFALSE 23525
23510: GO 23512
23512: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
23513: LD_EXP 42
23517: PPUSH
23518: LD_STRING DOm-Morozov
23520: PPUSH
23521: CALL_OW 94
23525: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 do
23526: LD_EXP 31
23530: PUSH
23531: LD_EXP 46
23535: PPUSH
23536: CALL_OW 274
23540: PPUSH
23541: LD_INT 2
23543: PPUSH
23544: CALL_OW 275
23548: PUSH
23549: LD_INT 31
23551: LESS
23552: AND
23553: IFFALSE 23643
23555: GO 23557
23557: DISABLE
// begin wait ( 0 0$10 ) ;
23558: LD_INT 350
23560: PPUSH
23561: CALL_OW 67
// DialogueOn ;
23565: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
23569: LD_EXP 32
23573: PPUSH
23574: LD_STRING DH-Fuel-1
23576: PPUSH
23577: CALL_OW 88
// if IsOk ( Givi ) then
23581: LD_EXP 33
23585: PPUSH
23586: CALL_OW 302
23590: IFFALSE 23628
// begin Say ( Givi , DG-Fuel-2 ) ;
23592: LD_EXP 33
23596: PPUSH
23597: LD_STRING DG-Fuel-2
23599: PPUSH
23600: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
23604: LD_EXP 33
23608: PPUSH
23609: LD_STRING DG-Fuel-3
23611: PPUSH
23612: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
23616: LD_EXP 33
23620: PPUSH
23621: LD_STRING DG-Fuel-4
23623: PPUSH
23624: CALL_OW 88
// end ; DialogueOff ;
23628: CALL_OW 7
// Query ( QOil ) ;
23632: LD_STRING QOil
23634: PPUSH
23635: CALL_OW 97
// GoForOil ( ) ;
23639: CALL 7511 0 0
// end ;
23643: END
// every 0 0$1 trigger leninSpotted and omarAttack or IsDead ( Morozov ) do
23644: LD_EXP 14
23648: PUSH
23649: LD_EXP 23
23653: AND
23654: PUSH
23655: LD_EXP 51
23659: PPUSH
23660: CALL_OW 301
23664: OR
23665: IFFALSE 23965
23667: GO 23669
23669: DISABLE
// begin wait ( 1 1$45 ) ;
23670: LD_INT 3675
23672: PPUSH
23673: CALL_OW 67
// DialogueOn ;
23677: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
23681: LD_EXP 40
23685: PPUSH
23686: LD_STRING DShar-End-1
23688: PPUSH
23689: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
23693: LD_EXP 32
23697: PPUSH
23698: LD_STRING DH-End-2
23700: PPUSH
23701: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
23705: LD_EXP 40
23709: PPUSH
23710: LD_STRING DShar-End-3
23712: PPUSH
23713: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
23717: LD_EXP 32
23721: PPUSH
23722: LD_STRING DH-End-4
23724: PPUSH
23725: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
23729: LD_EXP 40
23733: PPUSH
23734: LD_STRING DShar-End-5
23736: PPUSH
23737: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
23741: LD_EXP 40
23745: PPUSH
23746: LD_STRING DShar-End-6
23748: PPUSH
23749: CALL_OW 94
// dwait ( 0 0$2 ) ;
23753: LD_INT 70
23755: PPUSH
23756: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
23760: LD_EXP 32
23764: PPUSH
23765: LD_STRING DH-End-7
23767: PPUSH
23768: CALL_OW 88
// DialogueOff ;
23772: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
23776: LD_STRING M6
23778: PPUSH
23779: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
23783: LD_INT 17
23785: PPUSH
23786: LD_INT 1
23788: PPUSH
23789: CALL_OW 424
// escapeAllowed := true ;
23793: LD_ADDR_EXP 24
23797: PUSH
23798: LD_INT 1
23800: ST_TO_ADDR
// wait ( 0 0$2 ) ;
23801: LD_INT 70
23803: PPUSH
23804: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
23808: LD_EXP 43
23812: PPUSH
23813: LD_STRING DKs-End-8
23815: PPUSH
23816: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
23820: LD_EXP 37
23824: PPUSH
23825: LD_STRING DK-End-10
23827: PPUSH
23828: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
23832: LD_EXP 43
23836: PPUSH
23837: LD_STRING DKs-End-9
23839: PPUSH
23840: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
23844: LD_EXP 39
23848: PPUSH
23849: LD_STRING DMar-End-11
23851: PPUSH
23852: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
23856: LD_STRING 05_DrugsTested
23858: PPUSH
23859: LD_EXP 1
23863: PPUSH
23864: CALL_OW 30
23868: IFFALSE 23882
// Say ( Mike , DM-End-12 ) ;
23870: LD_EXP 34
23874: PPUSH
23875: LD_STRING DM-End-12
23877: PPUSH
23878: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
23882: LD_EXP 41
23886: PPUSH
23887: LD_STRING DO-End-13
23889: PPUSH
23890: CALL_OW 88
// if IsOk ( Sophia ) then
23894: LD_EXP 38
23898: PPUSH
23899: CALL_OW 302
23903: IFFALSE 23929
// begin Say ( Sophia , DS-End-15 ) ;
23905: LD_EXP 38
23909: PPUSH
23910: LD_STRING DS-End-15
23912: PPUSH
23913: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
23917: LD_EXP 37
23921: PPUSH
23922: LD_STRING DK-End-16
23924: PPUSH
23925: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
23929: LD_EXP 33
23933: PPUSH
23934: LD_STRING DG-End-17
23936: PPUSH
23937: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
23941: LD_EXP 33
23945: PPUSH
23946: LD_STRING DG-End-18
23948: PPUSH
23949: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
23953: LD_EXP 33
23957: PPUSH
23958: LD_STRING DG-End-19
23960: PPUSH
23961: CALL_OW 88
// end ;
23965: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
23966: LD_EXP 24
23970: IFFALSE 24098
23972: GO 23974
23974: DISABLE
23975: LD_INT 0
23977: PPUSH
23978: PPUSH
// begin enable ;
23979: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
23980: LD_ADDR_OWVAR 47
23984: PUSH
23985: LD_STRING #X106-2
23987: PUSH
23988: LD_EXP 25
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
23997: LD_ADDR_EXP 25
24001: PUSH
24002: LD_EXP 25
24006: PUSH
24007: LD_INT 35
24009: MINUS
24010: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
24011: LD_ADDR_VAR 0 2
24015: PUSH
24016: LD_INT 17
24018: PPUSH
24019: LD_INT 22
24021: PUSH
24022: LD_INT 2
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 21
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 23
24041: PUSH
24042: LD_INT 2
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: PPUSH
24054: CALL_OW 71
24058: ST_TO_ADDR
// if not outsiders then
24059: LD_VAR 0 2
24063: NOT
24064: IFFALSE 24081
// begin escapeAllowed := false ;
24066: LD_ADDR_EXP 24
24070: PUSH
24071: LD_INT 0
24073: ST_TO_ADDR
// disable ;
24074: DISABLE
// MissionWin ;
24075: CALL 24101 0 0
// exit ;
24079: GO 24098
// end ; if escapeTimer <= 0 0$00 then
24081: LD_EXP 25
24085: PUSH
24086: LD_INT 0
24088: LESSEQUAL
24089: IFFALSE 24098
// YouLost ( TimeOut ) ;
24091: LD_STRING TimeOut
24093: PPUSH
24094: CALL_OW 104
// end ;
24098: PPOPN 2
24100: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
24101: LD_INT 0
24103: PPUSH
24104: PPUSH
24105: PPUSH
24106: PPUSH
24107: PPUSH
// Say ( Heike , DH-End-20 ) ;
24108: LD_EXP 32
24112: PPUSH
24113: LD_STRING DH-End-20
24115: PPUSH
24116: CALL_OW 88
// if rolfDied then
24120: LD_EXP 13
24124: IFFALSE 24139
// AddMedal ( med1 , - 1 ) else
24126: LD_STRING med1
24128: PPUSH
24129: LD_INT 1
24131: NEG
24132: PPUSH
24133: CALL_OW 101
24137: GO 24169
// if not canRolfJoin then
24139: LD_EXP 29
24143: NOT
24144: IFFALSE 24159
// AddMedal ( med1 , - 2 ) else
24146: LD_STRING med1
24148: PPUSH
24149: LD_INT 2
24151: NEG
24152: PPUSH
24153: CALL_OW 101
24157: GO 24169
// AddMedal ( med1 , 1 ) ;
24159: LD_STRING med1
24161: PPUSH
24162: LD_INT 1
24164: PPUSH
24165: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
24169: LD_EXP 22
24173: PUSH
24174: LD_EXP 16
24178: AND
24179: IFFALSE 24193
// AddMedal ( med2 , 1 ) else
24181: LD_STRING med2
24183: PPUSH
24184: LD_INT 1
24186: PPUSH
24187: CALL_OW 101
24191: GO 24242
// if omarHasVehicles then
24193: LD_EXP 22
24197: IFFALSE 24212
// AddMedal ( med2 , - 1 ) else
24199: LD_STRING med2
24201: PPUSH
24202: LD_INT 1
24204: NEG
24205: PPUSH
24206: CALL_OW 101
24210: GO 24242
// if rolfHasVehicles then
24212: LD_EXP 16
24216: IFFALSE 24231
// AddMedal ( med2 , - 2 ) else
24218: LD_STRING med2
24220: PPUSH
24221: LD_INT 2
24223: NEG
24224: PPUSH
24225: CALL_OW 101
24229: GO 24242
// AddMedal ( med2 , - 3 ) ;
24231: LD_STRING med2
24233: PPUSH
24234: LD_INT 3
24236: NEG
24237: PPUSH
24238: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 62 ] [ Difficulty ] and heikeLoseCounter = 0 then
24242: LD_EXP 5
24246: PUSH
24247: LD_INT 30
24249: PUSH
24250: LD_INT 45
24252: PUSH
24253: LD_INT 50
24255: PUSH
24256: LD_INT 62
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: PUSH
24265: LD_OWVAR 67
24269: ARRAY
24270: GREATEREQUAL
24271: PUSH
24272: LD_EXP 26
24276: PUSH
24277: LD_INT 0
24279: EQUAL
24280: AND
24281: IFFALSE 24295
// AddMedal ( med3 , 1 ) else
24283: LD_STRING med3
24285: PPUSH
24286: LD_INT 1
24288: PPUSH
24289: CALL_OW 101
24293: GO 24325
// if heikeLoseCounter then
24295: LD_EXP 26
24299: IFFALSE 24314
// AddMedal ( med3 , - 2 ) else
24301: LD_STRING med3
24303: PPUSH
24304: LD_INT 2
24306: NEG
24307: PPUSH
24308: CALL_OW 101
24312: GO 24325
// AddMedal ( med3 , - 1 ) ;
24314: LD_STRING med3
24316: PPUSH
24317: LD_INT 1
24319: NEG
24320: PPUSH
24321: CALL_OW 101
// GiveMedals ( MAIN ) ;
24325: LD_STRING MAIN
24327: PPUSH
24328: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
24332: LD_INT 22
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 23
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 21
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: LIST
24366: PPUSH
24367: CALL_OW 69
24371: PPUSH
24372: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
24376: LD_EXP 32
24380: PPUSH
24381: LD_STRING 06_Heike
24383: PPUSH
24384: CALL_OW 38
// if Aviradze then
24388: LD_EXP 44
24392: IFFALSE 24406
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
24394: LD_EXP 44
24398: PPUSH
24399: LD_STRING 06_Aviradze
24401: PPUSH
24402: CALL_OW 38
// if Ibrahim then
24406: LD_EXP 35
24410: IFFALSE 24424
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
24412: LD_EXP 35
24416: PPUSH
24417: LD_STRING 06_Ibrahim
24419: PPUSH
24420: CALL_OW 38
// if Kamil then
24424: LD_EXP 36
24428: IFFALSE 24442
// SaveCharacters ( Kamil , 06_Kamil ) ;
24430: LD_EXP 36
24434: PPUSH
24435: LD_STRING 06_Kamil
24437: PPUSH
24438: CALL_OW 38
// if Sophia then
24442: LD_EXP 38
24446: IFFALSE 24460
// SaveCharacters ( Sophia , 06_Sophia ) ;
24448: LD_EXP 38
24452: PPUSH
24453: LD_STRING 06_Sophia
24455: PPUSH
24456: CALL_OW 38
// if Kaia then
24460: LD_EXP 37
24464: IFFALSE 24478
// SaveCharacters ( Kaia , 06_Kaia ) ;
24466: LD_EXP 37
24470: PPUSH
24471: LD_STRING 06_Kaia
24473: PPUSH
24474: CALL_OW 38
// if Givi then
24478: LD_EXP 33
24482: IFFALSE 24496
// SaveCharacters ( Givi , 06_Givi ) ;
24484: LD_EXP 33
24488: PPUSH
24489: LD_STRING 06_Givi
24491: PPUSH
24492: CALL_OW 38
// if Mike then
24496: LD_EXP 34
24500: IFFALSE 24514
// SaveCharacters ( Mike , 06_Mike ) ;
24502: LD_EXP 34
24506: PPUSH
24507: LD_STRING 06_Mike
24509: PPUSH
24510: CALL_OW 38
// if Markov then
24514: LD_EXP 39
24518: IFFALSE 24532
// SaveCharacters ( Markov , 06_Markov ) ;
24520: LD_EXP 39
24524: PPUSH
24525: LD_STRING 06_Markov
24527: PPUSH
24528: CALL_OW 38
// if Kurt then
24532: LD_EXP 43
24536: IFFALSE 24550
// SaveCharacters ( Kurt , 06_Kurt ) ;
24538: LD_EXP 43
24542: PPUSH
24543: LD_STRING 06_Kurt
24545: PPUSH
24546: CALL_OW 38
// if heikeSecondSquad then
24550: LD_EXP 47
24554: IFFALSE 24568
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
24556: LD_EXP 47
24560: PPUSH
24561: LD_STRING 06_others
24563: PPUSH
24564: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
24568: LD_ADDR_VAR 0 3
24572: PUSH
24573: LD_INT 22
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 23
24585: PUSH
24586: LD_INT 0
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PPUSH
24597: CALL_OW 69
24601: ST_TO_ADDR
// if tmp then
24602: LD_VAR 0 3
24606: IFFALSE 24620
// SaveCharacters ( tmp , 06_apes ) ;
24608: LD_VAR 0 3
24612: PPUSH
24613: LD_STRING 06_apes
24615: PPUSH
24616: CALL_OW 38
// if Rolf then
24620: LD_EXP 45
24624: IFFALSE 24675
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
24626: LD_EXP 45
24630: PPUSH
24631: LD_STRING 06_Rolf
24633: PPUSH
24634: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
24638: LD_STRING enableBioCharacter(BIO_ROLF)
24640: PPUSH
24641: CALL_OW 559
// if rolfSquad diff Rolf then
24645: LD_EXP 49
24649: PUSH
24650: LD_EXP 45
24654: DIFF
24655: IFFALSE 24675
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
24657: LD_EXP 49
24661: PUSH
24662: LD_EXP 45
24666: DIFF
24667: PPUSH
24668: LD_STRING 06_RolfSquad
24670: PPUSH
24671: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
24675: LD_ADDR_VAR 0 3
24679: PUSH
24680: LD_INT 17
24682: PPUSH
24683: LD_INT 21
24685: PUSH
24686: LD_INT 2
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PPUSH
24693: CALL_OW 70
24697: ST_TO_ADDR
// if tmp then
24698: LD_VAR 0 3
24702: IFFALSE 24996
// begin tmp2 := [ ] ;
24704: LD_ADDR_VAR 0 4
24708: PUSH
24709: EMPTY
24710: ST_TO_ADDR
// for i in tmp do
24711: LD_ADDR_VAR 0 2
24715: PUSH
24716: LD_VAR 0 3
24720: PUSH
24721: FOR_IN
24722: IFFALSE 24982
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
24724: LD_VAR 0 2
24728: PPUSH
24729: CALL_OW 264
24733: PUSH
24734: LD_INT 32
24736: PUSH
24737: LD_INT 12
24739: PUSH
24740: LD_INT 51
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: IN
24748: IFFALSE 24885
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
24750: LD_ADDR_VAR 0 5
24754: PUSH
24755: LD_VAR 0 2
24759: PPUSH
24760: LD_INT 1
24762: PPUSH
24763: CALL_OW 289
24767: PUSH
24768: LD_VAR 0 2
24772: PPUSH
24773: LD_INT 2
24775: PPUSH
24776: CALL_OW 289
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
24785: LD_ADDR_VAR 0 4
24789: PUSH
24790: LD_VAR 0 4
24794: PPUSH
24795: LD_VAR 0 4
24799: PUSH
24800: LD_INT 1
24802: PLUS
24803: PPUSH
24804: LD_VAR 0 2
24808: PPUSH
24809: CALL_OW 265
24813: PUSH
24814: LD_VAR 0 2
24818: PPUSH
24819: CALL_OW 262
24823: PUSH
24824: LD_VAR 0 2
24828: PPUSH
24829: CALL_OW 263
24833: PUSH
24834: LD_VAR 0 2
24838: PPUSH
24839: CALL_OW 264
24843: PUSH
24844: LD_VAR 0 2
24848: PPUSH
24849: CALL_OW 248
24853: PUSH
24854: LD_VAR 0 2
24858: PPUSH
24859: CALL_OW 256
24863: PUSH
24864: LD_VAR 0 5
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: PPUSH
24878: CALL_OW 1
24882: ST_TO_ADDR
// end else
24883: GO 24980
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
24885: LD_ADDR_VAR 0 4
24889: PUSH
24890: LD_VAR 0 4
24894: PPUSH
24895: LD_VAR 0 4
24899: PUSH
24900: LD_INT 1
24902: PLUS
24903: PPUSH
24904: LD_VAR 0 2
24908: PPUSH
24909: CALL_OW 265
24913: PUSH
24914: LD_VAR 0 2
24918: PPUSH
24919: CALL_OW 262
24923: PUSH
24924: LD_VAR 0 2
24928: PPUSH
24929: CALL_OW 263
24933: PUSH
24934: LD_VAR 0 2
24938: PPUSH
24939: CALL_OW 264
24943: PUSH
24944: LD_VAR 0 2
24948: PPUSH
24949: CALL_OW 248
24953: PUSH
24954: LD_VAR 0 2
24958: PPUSH
24959: CALL_OW 256
24963: PUSH
24964: EMPTY
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: PPUSH
24975: CALL_OW 1
24979: ST_TO_ADDR
24980: GO 24721
24982: POP
24983: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
24984: LD_VAR 0 4
24988: PPUSH
24989: LD_STRING 06_Vehicles
24991: PPUSH
24992: CALL_OW 39
// end ; YouWin ;
24996: CALL_OW 103
// end ; end_of_file
25000: LD_VAR 0 1
25004: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
25005: LD_INT 0
25007: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
25008: LD_VAR 0 1
25012: PPUSH
25013: LD_VAR 0 2
25017: PPUSH
25018: CALL 84477 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
25022: LD_VAR 0 1
25026: PPUSH
25027: CALL_OW 255
25031: PUSH
25032: LD_INT 2
25034: EQUAL
25035: PUSH
25036: LD_OWVAR 52
25040: AND
25041: PUSH
25042: LD_VAR 0 1
25046: PPUSH
25047: CALL_OW 263
25051: PUSH
25052: LD_INT 1
25054: EQUAL
25055: AND
25056: IFFALSE 25111
// begin driver := IsDrivenBy ( vehicle ) ;
25058: LD_ADDR_VAR 0 3
25062: PUSH
25063: LD_VAR 0 1
25067: PPUSH
25068: CALL_OW 311
25072: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
25073: LD_VAR 0 1
25077: PPUSH
25078: LD_INT 211
25080: PPUSH
25081: LD_INT 101
25083: PPUSH
25084: CALL_OW 111
// AddComExitVehicle ( driver ) ;
25088: LD_VAR 0 3
25092: PPUSH
25093: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25097: LD_VAR 0 3
25101: PPUSH
25102: LD_VAR 0 2
25106: PPUSH
25107: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
25111: LD_VAR 0 1
25115: PPUSH
25116: CALL_OW 255
25120: PUSH
25121: LD_INT 3
25123: EQUAL
25124: IFFALSE 25155
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
25126: LD_ADDR_EXP 58
25130: PUSH
25131: LD_EXP 58
25135: PPUSH
25136: LD_EXP 58
25140: PUSH
25141: LD_INT 1
25143: PLUS
25144: PPUSH
25145: LD_VAR 0 1
25149: PPUSH
25150: CALL_OW 1
25154: ST_TO_ADDR
// end ;
25155: PPOPN 3
25157: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
25158: LD_VAR 0 1
25162: PPUSH
25163: CALL_OW 255
25167: PUSH
25168: LD_INT 8
25170: EQUAL
25171: PUSH
25172: LD_VAR 0 1
25176: PPUSH
25177: CALL_OW 266
25181: PUSH
25182: LD_INT 4
25184: EQUAL
25185: AND
25186: IFFALSE 25197
// ComUpgrade ( b ) ;
25188: LD_VAR 0 1
25192: PPUSH
25193: CALL_OW 146
// end ;
25197: PPOPN 1
25199: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
25200: LD_VAR 0 1
25204: PPUSH
25205: CALL 84357 0 1
// if un = Heike then
25209: LD_VAR 0 1
25213: PUSH
25214: LD_EXP 32
25218: EQUAL
25219: IFFALSE 25228
// YouLost ( Heike ) ;
25221: LD_STRING Heike
25223: PPUSH
25224: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
25228: LD_VAR 0 1
25232: PUSH
25233: LD_INT 22
25235: PUSH
25236: LD_INT 2
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 23
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PPUSH
25257: CALL_OW 69
25261: IN
25262: IFFALSE 25278
// heikeLoseCounter := heikeLoseCounter + 1 ;
25264: LD_ADDR_EXP 26
25268: PUSH
25269: LD_EXP 26
25273: PUSH
25274: LD_INT 1
25276: PLUS
25277: ST_TO_ADDR
// if un = arDepot then
25278: LD_VAR 0 1
25282: PUSH
25283: LD_EXP 46
25287: EQUAL
25288: IFFALSE 25297
// YouLost ( Base ) ;
25290: LD_STRING Base
25292: PPUSH
25293: CALL_OW 104
// if un = Rolf then
25297: LD_VAR 0 1
25301: PUSH
25302: LD_EXP 45
25306: EQUAL
25307: IFFALSE 25317
// rolfDied := true ;
25309: LD_ADDR_EXP 13
25313: PUSH
25314: LD_INT 1
25316: ST_TO_ADDR
// if un in rolfSquad then
25317: LD_VAR 0 1
25321: PUSH
25322: LD_EXP 49
25326: IN
25327: IFFALSE 25345
// rolfSquad := rolfSquad diff un ;
25329: LD_ADDR_EXP 49
25333: PUSH
25334: LD_EXP 49
25338: PUSH
25339: LD_VAR 0 1
25343: DIFF
25344: ST_TO_ADDR
// if un in omarSquad then
25345: LD_VAR 0 1
25349: PUSH
25350: LD_EXP 50
25354: IN
25355: IFFALSE 25373
// omarSquad := omarSquad diff un ;
25357: LD_ADDR_EXP 50
25361: PUSH
25362: LD_EXP 50
25366: PUSH
25367: LD_VAR 0 1
25371: DIFF
25372: ST_TO_ADDR
// if GetSide ( un ) = 3 then
25373: LD_VAR 0 1
25377: PPUSH
25378: CALL_OW 255
25382: PUSH
25383: LD_INT 3
25385: EQUAL
25386: IFFALSE 25402
// ruLoseCounter := ruLoseCounter + 1 ;
25388: LD_ADDR_EXP 5
25392: PUSH
25393: LD_EXP 5
25397: PUSH
25398: LD_INT 1
25400: PLUS
25401: ST_TO_ADDR
// if un in ruAttackers then
25402: LD_VAR 0 1
25406: PUSH
25407: LD_EXP 59
25411: IN
25412: IFFALSE 25430
// ruAttackers := ruAttackers diff un ;
25414: LD_ADDR_EXP 59
25418: PUSH
25419: LD_EXP 59
25423: PUSH
25424: LD_VAR 0 1
25428: DIFF
25429: ST_TO_ADDR
// end ;
25430: PPOPN 1
25432: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
25433: LD_INT 0
25435: PPUSH
25436: PPUSH
25437: PPUSH
25438: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
25439: LD_VAR 0 1
25443: PPUSH
25444: CALL_OW 255
25448: PUSH
25449: LD_INT 3
25451: EQUAL
25452: PUSH
25453: LD_VAR 0 1
25457: PUSH
25458: LD_EXP 59
25462: IN
25463: NOT
25464: AND
25465: IFFALSE 25961
// begin if not IsInArea ( un , ruMainBase ) then
25467: LD_VAR 0 1
25471: PPUSH
25472: LD_INT 10
25474: PPUSH
25475: CALL_OW 308
25479: NOT
25480: IFFALSE 25494
// ComMoveToArea ( un , ruMainBase ) ;
25482: LD_VAR 0 1
25486: PPUSH
25487: LD_INT 10
25489: PPUSH
25490: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
25494: LD_INT 35
25496: PPUSH
25497: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
25501: LD_VAR 0 1
25505: PPUSH
25506: CALL_OW 302
25510: NOT
25511: PUSH
25512: LD_VAR 0 1
25516: PPUSH
25517: LD_INT 10
25519: PPUSH
25520: CALL_OW 308
25524: OR
25525: IFFALSE 25494
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
25527: LD_ADDR_EXP 57
25531: PUSH
25532: LD_EXP 57
25536: PPUSH
25537: LD_EXP 57
25541: PUSH
25542: LD_INT 1
25544: PLUS
25545: PPUSH
25546: LD_VAR 0 1
25550: PPUSH
25551: CALL_OW 1
25555: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
25556: LD_ADDR_VAR 0 8
25560: PUSH
25561: LD_INT 72
25563: PUSH
25564: LD_INT 12
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: ST_TO_ADDR
// if tmp then
25571: LD_VAR 0 8
25575: IFFALSE 25690
// for i in tmp do
25577: LD_ADDR_VAR 0 5
25581: PUSH
25582: LD_VAR 0 8
25586: PUSH
25587: FOR_IN
25588: IFFALSE 25688
// if UnitsInside ( i ) < 6 then
25590: LD_VAR 0 5
25594: PPUSH
25595: CALL_OW 313
25599: PUSH
25600: LD_INT 6
25602: LESS
25603: IFFALSE 25686
// begin AddComEnterUnit ( un , i ) ;
25605: LD_VAR 0 1
25609: PPUSH
25610: LD_VAR 0 5
25614: PPUSH
25615: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
25619: LD_VAR 0 8
25623: PPUSH
25624: LD_INT 22
25626: PUSH
25627: LD_INT 23
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 1
25636: PPUSH
25637: LD_INT 2
25639: PPUSH
25640: CALL_OW 12
25644: ARRAY
25645: PPUSH
25646: LD_INT 1
25648: PPUSH
25649: LD_INT 1
25651: PPUSH
25652: LD_INT 44
25654: PUSH
25655: LD_INT 46
25657: PUSH
25658: LD_INT 47
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: PPUSH
25669: LD_INT 3
25671: PPUSH
25672: CALL_OW 12
25676: ARRAY
25677: PPUSH
25678: CALL_OW 185
// exit ;
25682: POP
25683: POP
25684: GO 25961
// end ;
25686: GO 25587
25688: POP
25689: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
25690: LD_ADDR_VAR 0 8
25694: PUSH
25695: LD_INT 10
25697: PPUSH
25698: LD_INT 22
25700: PUSH
25701: LD_INT 3
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 50
25710: PUSH
25711: EMPTY
25712: LIST
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: LD_INT 30
25719: PUSH
25720: LD_INT 4
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 30
25729: PUSH
25730: LD_INT 5
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 30
25739: PUSH
25740: LD_INT 32
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 30
25749: PUSH
25750: LD_INT 31
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: LIST
25768: PPUSH
25769: CALL_OW 70
25773: ST_TO_ADDR
// if not tmp then
25774: LD_VAR 0 8
25778: NOT
25779: IFFALSE 25798
// begin ComMoveXY ( un , 83 , 133 ) ;
25781: LD_VAR 0 1
25785: PPUSH
25786: LD_INT 83
25788: PPUSH
25789: LD_INT 133
25791: PPUSH
25792: CALL_OW 111
// exit ;
25796: GO 25961
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
25798: LD_ADDR_VAR 0 6
25802: PUSH
25803: LD_VAR 0 1
25807: PPUSH
25808: LD_VAR 0 8
25812: PPUSH
25813: LD_INT 1
25815: PPUSH
25816: LD_INT 1
25818: PPUSH
25819: CALL 32715 0 4
25823: PUSH
25824: FOR_IN
25825: IFFALSE 25959
// begin case GetBType ( b ) of b_armoury , b_barracks :
25827: LD_VAR 0 6
25831: PPUSH
25832: CALL_OW 266
25836: PUSH
25837: LD_INT 4
25839: DOUBLE
25840: EQUAL
25841: IFTRUE 25851
25843: LD_INT 5
25845: DOUBLE
25846: EQUAL
25847: IFTRUE 25851
25849: GO 25862
25851: POP
// p := 6 ; b_breastwork , b_bunker :
25852: LD_ADDR_VAR 0 7
25856: PUSH
25857: LD_INT 6
25859: ST_TO_ADDR
25860: GO 25888
25862: LD_INT 31
25864: DOUBLE
25865: EQUAL
25866: IFTRUE 25876
25868: LD_INT 32
25870: DOUBLE
25871: EQUAL
25872: IFTRUE 25876
25874: GO 25887
25876: POP
// p := 1 ; end ;
25877: LD_ADDR_VAR 0 7
25881: PUSH
25882: LD_INT 1
25884: ST_TO_ADDR
25885: GO 25888
25887: POP
// if UnitsInside ( b ) < p then
25888: LD_VAR 0 6
25892: PPUSH
25893: CALL_OW 313
25897: PUSH
25898: LD_VAR 0 7
25902: LESS
25903: IFFALSE 25957
// begin ComEnterUnit ( un , b ) ;
25905: LD_VAR 0 1
25909: PPUSH
25910: LD_VAR 0 6
25914: PPUSH
25915: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
25919: LD_VAR 0 6
25923: PPUSH
25924: CALL_OW 266
25928: PUSH
25929: LD_INT 4
25931: PUSH
25932: LD_INT 5
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: IN
25939: IFFALSE 25953
// AddComChangeProfession ( un , class_soldier ) ;
25941: LD_VAR 0 1
25945: PPUSH
25946: LD_INT 1
25948: PPUSH
25949: CALL_OW 183
// exit ;
25953: POP
25954: POP
25955: GO 25961
// end ; end ;
25957: GO 25824
25959: POP
25960: POP
// end ; end ;
25961: PPOPN 8
25963: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
25964: LD_INT 0
25966: PPUSH
25967: PPUSH
25968: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
25969: LD_VAR 0 2
25973: PPUSH
25974: CALL_OW 255
25978: PUSH
25979: LD_INT 3
25981: EQUAL
25982: PUSH
25983: LD_VAR 0 2
25987: PPUSH
25988: CALL_OW 257
25992: PUSH
25993: LD_INT 1
25995: EQUAL
25996: AND
25997: PUSH
25998: LD_VAR 0 2
26002: PUSH
26003: LD_EXP 57
26007: IN
26008: NOT
26009: AND
26010: IFFALSE 26323
// begin ComMoveToArea ( un , ruMainBase ) ;
26012: LD_VAR 0 2
26016: PPUSH
26017: LD_INT 10
26019: PPUSH
26020: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
26024: LD_INT 35
26026: PPUSH
26027: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
26031: LD_VAR 0 2
26035: PPUSH
26036: CALL_OW 302
26040: NOT
26041: PUSH
26042: LD_VAR 0 2
26046: PPUSH
26047: LD_INT 10
26049: PPUSH
26050: CALL_OW 308
26054: OR
26055: IFFALSE 26024
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
26057: LD_ADDR_EXP 57
26061: PUSH
26062: LD_EXP 57
26066: PPUSH
26067: LD_EXP 57
26071: PUSH
26072: LD_INT 1
26074: PLUS
26075: PPUSH
26076: LD_VAR 0 2
26080: PPUSH
26081: CALL_OW 1
26085: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
26086: LD_ADDR_VAR 0 4
26090: PUSH
26091: LD_INT 10
26093: PPUSH
26094: LD_INT 22
26096: PUSH
26097: LD_INT 3
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 50
26106: PUSH
26107: EMPTY
26108: LIST
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: LD_INT 30
26115: PUSH
26116: LD_INT 4
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 30
26125: PUSH
26126: LD_INT 5
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 30
26135: PUSH
26136: LD_INT 32
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 30
26145: PUSH
26146: LD_INT 31
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: PPUSH
26165: CALL_OW 70
26169: ST_TO_ADDR
// if not tmp then
26170: LD_VAR 0 4
26174: NOT
26175: IFFALSE 26194
// begin ComMoveXY ( un , 83 , 133 ) ;
26177: LD_VAR 0 2
26181: PPUSH
26182: LD_INT 83
26184: PPUSH
26185: LD_INT 133
26187: PPUSH
26188: CALL_OW 111
// exit ;
26192: GO 26572
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
26194: LD_ADDR_VAR 0 5
26198: PUSH
26199: LD_VAR 0 2
26203: PPUSH
26204: LD_VAR 0 4
26208: PPUSH
26209: LD_INT 1
26211: PPUSH
26212: LD_INT 1
26214: PPUSH
26215: CALL 32715 0 4
26219: PUSH
26220: FOR_IN
26221: IFFALSE 26321
// begin case GetBType ( b ) of b_armoury , b_barracks :
26223: LD_VAR 0 5
26227: PPUSH
26228: CALL_OW 266
26232: PUSH
26233: LD_INT 4
26235: DOUBLE
26236: EQUAL
26237: IFTRUE 26247
26239: LD_INT 5
26241: DOUBLE
26242: EQUAL
26243: IFTRUE 26247
26245: GO 26258
26247: POP
// p := 6 ; b_breastwork , b_bunker :
26248: LD_ADDR_VAR 0 3
26252: PUSH
26253: LD_INT 6
26255: ST_TO_ADDR
26256: GO 26284
26258: LD_INT 31
26260: DOUBLE
26261: EQUAL
26262: IFTRUE 26272
26264: LD_INT 32
26266: DOUBLE
26267: EQUAL
26268: IFTRUE 26272
26270: GO 26283
26272: POP
// p := 1 ; end ;
26273: LD_ADDR_VAR 0 3
26277: PUSH
26278: LD_INT 1
26280: ST_TO_ADDR
26281: GO 26284
26283: POP
// if UnitsInside ( b ) < p then
26284: LD_VAR 0 5
26288: PPUSH
26289: CALL_OW 313
26293: PUSH
26294: LD_VAR 0 3
26298: LESS
26299: IFFALSE 26319
// begin ComEnterUnit ( un , b ) ;
26301: LD_VAR 0 2
26305: PPUSH
26306: LD_VAR 0 5
26310: PPUSH
26311: CALL_OW 120
// exit ;
26315: POP
26316: POP
26317: GO 26572
// end ; end ;
26319: GO 26220
26321: POP
26322: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
26323: LD_VAR 0 2
26327: PUSH
26328: LD_EXP 57
26332: IN
26333: PUSH
26334: LD_VAR 0 2
26338: PPUSH
26339: CALL_OW 257
26343: PUSH
26344: LD_INT 1
26346: EQUAL
26347: AND
26348: IFFALSE 26572
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
26350: LD_ADDR_VAR 0 4
26354: PUSH
26355: LD_INT 10
26357: PPUSH
26358: LD_INT 22
26360: PUSH
26361: LD_INT 3
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 50
26370: PUSH
26371: EMPTY
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: PUSH
26377: LD_INT 30
26379: PUSH
26380: LD_INT 4
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 30
26389: PUSH
26390: LD_INT 5
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 30
26399: PUSH
26400: LD_INT 32
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 30
26409: PUSH
26410: LD_INT 31
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: PPUSH
26429: CALL_OW 70
26433: ST_TO_ADDR
// if not tmp then
26434: LD_VAR 0 4
26438: NOT
26439: IFFALSE 26443
// exit ;
26441: GO 26572
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
26443: LD_ADDR_VAR 0 5
26447: PUSH
26448: LD_VAR 0 2
26452: PPUSH
26453: LD_VAR 0 4
26457: PPUSH
26458: LD_INT 1
26460: PPUSH
26461: LD_INT 1
26463: PPUSH
26464: CALL 32715 0 4
26468: PUSH
26469: FOR_IN
26470: IFFALSE 26570
// begin case GetBType ( b ) of b_armoury , b_barracks :
26472: LD_VAR 0 5
26476: PPUSH
26477: CALL_OW 266
26481: PUSH
26482: LD_INT 4
26484: DOUBLE
26485: EQUAL
26486: IFTRUE 26496
26488: LD_INT 5
26490: DOUBLE
26491: EQUAL
26492: IFTRUE 26496
26494: GO 26507
26496: POP
// p := 6 ; b_breastwork , b_bunker :
26497: LD_ADDR_VAR 0 3
26501: PUSH
26502: LD_INT 6
26504: ST_TO_ADDR
26505: GO 26533
26507: LD_INT 31
26509: DOUBLE
26510: EQUAL
26511: IFTRUE 26521
26513: LD_INT 32
26515: DOUBLE
26516: EQUAL
26517: IFTRUE 26521
26519: GO 26532
26521: POP
// p := 1 ; end ;
26522: LD_ADDR_VAR 0 3
26526: PUSH
26527: LD_INT 1
26529: ST_TO_ADDR
26530: GO 26533
26532: POP
// if UnitsInside ( b ) < p then
26533: LD_VAR 0 5
26537: PPUSH
26538: CALL_OW 313
26542: PUSH
26543: LD_VAR 0 3
26547: LESS
26548: IFFALSE 26568
// begin ComEnterUnit ( un , b ) ;
26550: LD_VAR 0 2
26554: PPUSH
26555: LD_VAR 0 5
26559: PPUSH
26560: CALL_OW 120
// exit ;
26564: POP
26565: POP
26566: GO 26572
// end ; end ;
26568: GO 26469
26570: POP
26571: POP
// end ; end ;
26572: PPOPN 5
26574: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
26575: LD_VAR 0 1
26579: PUSH
26580: LD_INT 2
26582: EQUAL
26583: PUSH
26584: LD_VAR 0 2
26588: PUSH
26589: LD_INT 5
26591: PUSH
26592: LD_INT 8
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: IN
26599: AND
26600: IFFALSE 26609
// YouLost ( FriendlyFire ) ;
26602: LD_STRING FriendlyFire
26604: PPUSH
26605: CALL_OW 104
// end ;
26609: PPOPN 2
26611: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
26612: LD_VAR 0 1
26616: PPUSH
26617: CALL_OW 255
26621: PUSH
26622: LD_INT 8
26624: EQUAL
26625: PUSH
26626: LD_VAR 0 1
26630: PPUSH
26631: CALL_OW 266
26635: PUSH
26636: LD_INT 5
26638: EQUAL
26639: AND
26640: IFFALSE 26654
// SetClass ( unit , class_mortar ) ;
26642: LD_VAR 0 2
26646: PPUSH
26647: LD_INT 8
26649: PPUSH
26650: CALL_OW 336
// end ; end_of_file
26654: PPOPN 2
26656: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 400 , 320 , 260 , 230 ] [ Difficulty ] do
26657: LD_INT 6
26659: PPUSH
26660: LD_INT 1
26662: PPUSH
26663: CALL_OW 287
26667: PUSH
26668: LD_INT 400
26670: PUSH
26671: LD_INT 320
26673: PUSH
26674: LD_INT 260
26676: PUSH
26677: LD_INT 230
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: PUSH
26686: LD_OWVAR 67
26690: ARRAY
26691: LESS
26692: IFFALSE 26719
26694: GO 26696
26696: DISABLE
// begin enable ;
26697: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
26698: LD_INT 1
26700: PPUSH
26701: LD_INT 5
26703: PPUSH
26704: CALL_OW 12
26708: PPUSH
26709: LD_INT 6
26711: PPUSH
26712: LD_INT 1
26714: PPUSH
26715: CALL_OW 55
// end ;
26719: END
// every 0 0$15 trigger Prob ( 50 ) and tick < [ 18 18$00 , 17 17$00 , 16 16$00 , 15 15$00 ] [ Difficulty ] do
26720: LD_INT 50
26722: PPUSH
26723: CALL_OW 13
26727: PUSH
26728: LD_OWVAR 1
26732: PUSH
26733: LD_INT 37800
26735: PUSH
26736: LD_INT 35700
26738: PUSH
26739: LD_INT 33600
26741: PUSH
26742: LD_INT 31500
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: PUSH
26751: LD_OWVAR 67
26755: ARRAY
26756: LESS
26757: AND
26758: IFFALSE 26800
26760: GO 26762
26762: DISABLE
// begin enable ;
26763: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
26764: LD_INT 35
26766: PPUSH
26767: LD_INT 350
26769: PPUSH
26770: CALL_OW 12
26774: PPUSH
26775: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
26779: LD_INT 1
26781: PPUSH
26782: LD_INT 5
26784: PPUSH
26785: CALL_OW 12
26789: PPUSH
26790: LD_INT 21
26792: PPUSH
26793: LD_INT 1
26795: PPUSH
26796: CALL_OW 55
// end ; end_of_file
26800: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
26801: LD_EXP 18
26805: PUSH
26806: LD_EXP 20
26810: AND
26811: PUSH
26812: LD_EXP 17
26816: PUSH
26817: LD_EXP 19
26821: AND
26822: OR
26823: IFFALSE 27142
26825: GO 26827
26827: DISABLE
// begin enable ;
26828: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
26829: LD_EXP 18
26833: PUSH
26834: LD_EXP 20
26838: AND
26839: PUSH
26840: LD_EXP 17
26844: PUSH
26845: LD_EXP 19
26849: AND
26850: AND
26851: IFFALSE 26988
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
26853: LD_ADDR_OWVAR 47
26857: PUSH
26858: LD_STRING #X106-1a
26860: PUSH
26861: LD_EXP 21
26865: PUSH
26866: LD_INT 16
26868: PPUSH
26869: LD_INT 22
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 21
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 33
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 58
26901: PUSH
26902: EMPTY
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: PPUSH
26911: CALL_OW 70
26915: MINUS
26916: PPUSH
26917: CALL 66778 0 1
26921: PUSH
26922: LD_STRING #X106-3a
26924: PUSH
26925: LD_EXP 20
26929: PUSH
26930: LD_STRING #X106-1
26932: PUSH
26933: LD_EXP 49
26937: PUSH
26938: LD_INT 0
26940: PLUS
26941: PUSH
26942: LD_EXP 49
26946: PPUSH
26947: LD_INT 55
26949: PUSH
26950: EMPTY
26951: LIST
26952: PPUSH
26953: CALL_OW 72
26957: PUSH
26958: LD_INT 0
26960: PLUS
26961: MINUS
26962: PPUSH
26963: CALL 66778 0 1
26967: PUSH
26968: LD_STRING #X106-3
26970: PUSH
26971: LD_EXP 19
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: ST_TO_ADDR
// end else
26986: GO 27142
// if omarWantVehicles and omarWaitingForVehiclesTimer then
26988: LD_EXP 18
26992: PUSH
26993: LD_EXP 20
26997: AND
26998: IFFALSE 27085
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
27000: LD_ADDR_OWVAR 47
27004: PUSH
27005: LD_STRING #X106-1a
27007: PUSH
27008: LD_EXP 21
27012: PUSH
27013: LD_INT 16
27015: PPUSH
27016: LD_INT 22
27018: PUSH
27019: LD_INT 2
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 21
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 33
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 58
27048: PUSH
27049: EMPTY
27050: LIST
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: PPUSH
27058: CALL_OW 70
27062: MINUS
27063: PPUSH
27064: CALL 66778 0 1
27068: PUSH
27069: LD_STRING #X106-3a
27071: PUSH
27072: LD_EXP 20
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: ST_TO_ADDR
// end else
27083: GO 27142
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
27085: LD_ADDR_OWVAR 47
27089: PUSH
27090: LD_STRING #X106-1
27092: PUSH
27093: LD_EXP 49
27097: PUSH
27098: LD_INT 0
27100: PLUS
27101: PUSH
27102: LD_EXP 49
27106: PPUSH
27107: LD_INT 55
27109: PUSH
27110: EMPTY
27111: LIST
27112: PPUSH
27113: CALL_OW 72
27117: PUSH
27118: LD_INT 0
27120: PLUS
27121: MINUS
27122: PPUSH
27123: CALL 66778 0 1
27127: PUSH
27128: LD_STRING #X106-3
27130: PUSH
27131: LD_EXP 19
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: ST_TO_ADDR
// end ; end ; end_of_file
27142: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27143: LD_INT 0
27145: PPUSH
27146: PPUSH
// if exist_mode then
27147: LD_VAR 0 2
27151: IFFALSE 27176
// unit := CreateCharacter ( prefix & ident ) else
27153: LD_ADDR_VAR 0 5
27157: PUSH
27158: LD_VAR 0 3
27162: PUSH
27163: LD_VAR 0 1
27167: STR
27168: PPUSH
27169: CALL_OW 34
27173: ST_TO_ADDR
27174: GO 27191
// unit := NewCharacter ( ident ) ;
27176: LD_ADDR_VAR 0 5
27180: PUSH
27181: LD_VAR 0 1
27185: PPUSH
27186: CALL_OW 25
27190: ST_TO_ADDR
// result := unit ;
27191: LD_ADDR_VAR 0 4
27195: PUSH
27196: LD_VAR 0 5
27200: ST_TO_ADDR
// end ;
27201: LD_VAR 0 4
27205: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27206: LD_INT 0
27208: PPUSH
27209: PPUSH
// if not side or not nation then
27210: LD_VAR 0 1
27214: NOT
27215: PUSH
27216: LD_VAR 0 2
27220: NOT
27221: OR
27222: IFFALSE 27226
// exit ;
27224: GO 27994
// case nation of nation_american :
27226: LD_VAR 0 2
27230: PUSH
27231: LD_INT 1
27233: DOUBLE
27234: EQUAL
27235: IFTRUE 27239
27237: GO 27453
27239: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27240: LD_ADDR_VAR 0 4
27244: PUSH
27245: LD_INT 35
27247: PUSH
27248: LD_INT 45
27250: PUSH
27251: LD_INT 46
27253: PUSH
27254: LD_INT 47
27256: PUSH
27257: LD_INT 82
27259: PUSH
27260: LD_INT 83
27262: PUSH
27263: LD_INT 84
27265: PUSH
27266: LD_INT 85
27268: PUSH
27269: LD_INT 86
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: LD_INT 2
27277: PUSH
27278: LD_INT 6
27280: PUSH
27281: LD_INT 15
27283: PUSH
27284: LD_INT 16
27286: PUSH
27287: LD_INT 7
27289: PUSH
27290: LD_INT 12
27292: PUSH
27293: LD_INT 13
27295: PUSH
27296: LD_INT 10
27298: PUSH
27299: LD_INT 14
27301: PUSH
27302: LD_INT 20
27304: PUSH
27305: LD_INT 21
27307: PUSH
27308: LD_INT 22
27310: PUSH
27311: LD_INT 25
27313: PUSH
27314: LD_INT 32
27316: PUSH
27317: LD_INT 27
27319: PUSH
27320: LD_INT 36
27322: PUSH
27323: LD_INT 69
27325: PUSH
27326: LD_INT 39
27328: PUSH
27329: LD_INT 34
27331: PUSH
27332: LD_INT 40
27334: PUSH
27335: LD_INT 48
27337: PUSH
27338: LD_INT 49
27340: PUSH
27341: LD_INT 50
27343: PUSH
27344: LD_INT 51
27346: PUSH
27347: LD_INT 52
27349: PUSH
27350: LD_INT 53
27352: PUSH
27353: LD_INT 54
27355: PUSH
27356: LD_INT 55
27358: PUSH
27359: LD_INT 56
27361: PUSH
27362: LD_INT 57
27364: PUSH
27365: LD_INT 58
27367: PUSH
27368: LD_INT 59
27370: PUSH
27371: LD_INT 60
27373: PUSH
27374: LD_INT 61
27376: PUSH
27377: LD_INT 62
27379: PUSH
27380: LD_INT 80
27382: PUSH
27383: LD_INT 82
27385: PUSH
27386: LD_INT 83
27388: PUSH
27389: LD_INT 84
27391: PUSH
27392: LD_INT 85
27394: PUSH
27395: LD_INT 86
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: ST_TO_ADDR
27451: GO 27918
27453: LD_INT 2
27455: DOUBLE
27456: EQUAL
27457: IFTRUE 27461
27459: GO 27687
27461: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27462: LD_ADDR_VAR 0 4
27466: PUSH
27467: LD_INT 35
27469: PUSH
27470: LD_INT 45
27472: PUSH
27473: LD_INT 46
27475: PUSH
27476: LD_INT 47
27478: PUSH
27479: LD_INT 82
27481: PUSH
27482: LD_INT 83
27484: PUSH
27485: LD_INT 84
27487: PUSH
27488: LD_INT 85
27490: PUSH
27491: LD_INT 87
27493: PUSH
27494: LD_INT 70
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: LD_INT 11
27502: PUSH
27503: LD_INT 3
27505: PUSH
27506: LD_INT 4
27508: PUSH
27509: LD_INT 5
27511: PUSH
27512: LD_INT 6
27514: PUSH
27515: LD_INT 15
27517: PUSH
27518: LD_INT 18
27520: PUSH
27521: LD_INT 7
27523: PUSH
27524: LD_INT 17
27526: PUSH
27527: LD_INT 8
27529: PUSH
27530: LD_INT 20
27532: PUSH
27533: LD_INT 21
27535: PUSH
27536: LD_INT 22
27538: PUSH
27539: LD_INT 72
27541: PUSH
27542: LD_INT 26
27544: PUSH
27545: LD_INT 69
27547: PUSH
27548: LD_INT 39
27550: PUSH
27551: LD_INT 40
27553: PUSH
27554: LD_INT 41
27556: PUSH
27557: LD_INT 42
27559: PUSH
27560: LD_INT 43
27562: PUSH
27563: LD_INT 48
27565: PUSH
27566: LD_INT 49
27568: PUSH
27569: LD_INT 50
27571: PUSH
27572: LD_INT 51
27574: PUSH
27575: LD_INT 52
27577: PUSH
27578: LD_INT 53
27580: PUSH
27581: LD_INT 54
27583: PUSH
27584: LD_INT 55
27586: PUSH
27587: LD_INT 56
27589: PUSH
27590: LD_INT 60
27592: PUSH
27593: LD_INT 61
27595: PUSH
27596: LD_INT 62
27598: PUSH
27599: LD_INT 66
27601: PUSH
27602: LD_INT 67
27604: PUSH
27605: LD_INT 68
27607: PUSH
27608: LD_INT 81
27610: PUSH
27611: LD_INT 82
27613: PUSH
27614: LD_INT 83
27616: PUSH
27617: LD_INT 84
27619: PUSH
27620: LD_INT 85
27622: PUSH
27623: LD_INT 87
27625: PUSH
27626: LD_INT 88
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: ST_TO_ADDR
27685: GO 27918
27687: LD_INT 3
27689: DOUBLE
27690: EQUAL
27691: IFTRUE 27695
27693: GO 27917
27695: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27696: LD_ADDR_VAR 0 4
27700: PUSH
27701: LD_INT 46
27703: PUSH
27704: LD_INT 47
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: LD_INT 82
27715: PUSH
27716: LD_INT 83
27718: PUSH
27719: LD_INT 84
27721: PUSH
27722: LD_INT 85
27724: PUSH
27725: LD_INT 86
27727: PUSH
27728: LD_INT 11
27730: PUSH
27731: LD_INT 9
27733: PUSH
27734: LD_INT 20
27736: PUSH
27737: LD_INT 19
27739: PUSH
27740: LD_INT 21
27742: PUSH
27743: LD_INT 24
27745: PUSH
27746: LD_INT 22
27748: PUSH
27749: LD_INT 25
27751: PUSH
27752: LD_INT 28
27754: PUSH
27755: LD_INT 29
27757: PUSH
27758: LD_INT 30
27760: PUSH
27761: LD_INT 31
27763: PUSH
27764: LD_INT 37
27766: PUSH
27767: LD_INT 38
27769: PUSH
27770: LD_INT 32
27772: PUSH
27773: LD_INT 27
27775: PUSH
27776: LD_INT 33
27778: PUSH
27779: LD_INT 69
27781: PUSH
27782: LD_INT 39
27784: PUSH
27785: LD_INT 34
27787: PUSH
27788: LD_INT 40
27790: PUSH
27791: LD_INT 71
27793: PUSH
27794: LD_INT 23
27796: PUSH
27797: LD_INT 44
27799: PUSH
27800: LD_INT 48
27802: PUSH
27803: LD_INT 49
27805: PUSH
27806: LD_INT 50
27808: PUSH
27809: LD_INT 51
27811: PUSH
27812: LD_INT 52
27814: PUSH
27815: LD_INT 53
27817: PUSH
27818: LD_INT 54
27820: PUSH
27821: LD_INT 55
27823: PUSH
27824: LD_INT 56
27826: PUSH
27827: LD_INT 57
27829: PUSH
27830: LD_INT 58
27832: PUSH
27833: LD_INT 59
27835: PUSH
27836: LD_INT 63
27838: PUSH
27839: LD_INT 64
27841: PUSH
27842: LD_INT 65
27844: PUSH
27845: LD_INT 82
27847: PUSH
27848: LD_INT 83
27850: PUSH
27851: LD_INT 84
27853: PUSH
27854: LD_INT 85
27856: PUSH
27857: LD_INT 86
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
27915: GO 27918
27917: POP
// if state > - 1 and state < 3 then
27918: LD_VAR 0 3
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: GREATER
27927: PUSH
27928: LD_VAR 0 3
27932: PUSH
27933: LD_INT 3
27935: LESS
27936: AND
27937: IFFALSE 27994
// for i in result do
27939: LD_ADDR_VAR 0 5
27943: PUSH
27944: LD_VAR 0 4
27948: PUSH
27949: FOR_IN
27950: IFFALSE 27992
// if GetTech ( i , side ) <> state then
27952: LD_VAR 0 5
27956: PPUSH
27957: LD_VAR 0 1
27961: PPUSH
27962: CALL_OW 321
27966: PUSH
27967: LD_VAR 0 3
27971: NONEQUAL
27972: IFFALSE 27990
// result := result diff i ;
27974: LD_ADDR_VAR 0 4
27978: PUSH
27979: LD_VAR 0 4
27983: PUSH
27984: LD_VAR 0 5
27988: DIFF
27989: ST_TO_ADDR
27990: GO 27949
27992: POP
27993: POP
// end ;
27994: LD_VAR 0 4
27998: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27999: LD_INT 0
28001: PPUSH
28002: PPUSH
28003: PPUSH
// result := true ;
28004: LD_ADDR_VAR 0 3
28008: PUSH
28009: LD_INT 1
28011: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28012: LD_ADDR_VAR 0 5
28016: PUSH
28017: LD_VAR 0 2
28021: PPUSH
28022: CALL_OW 480
28026: ST_TO_ADDR
// if not tmp then
28027: LD_VAR 0 5
28031: NOT
28032: IFFALSE 28036
// exit ;
28034: GO 28085
// for i in tmp do
28036: LD_ADDR_VAR 0 4
28040: PUSH
28041: LD_VAR 0 5
28045: PUSH
28046: FOR_IN
28047: IFFALSE 28083
// if GetTech ( i , side ) <> state_researched then
28049: LD_VAR 0 4
28053: PPUSH
28054: LD_VAR 0 1
28058: PPUSH
28059: CALL_OW 321
28063: PUSH
28064: LD_INT 2
28066: NONEQUAL
28067: IFFALSE 28081
// begin result := false ;
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_INT 0
28076: ST_TO_ADDR
// exit ;
28077: POP
28078: POP
28079: GO 28085
// end ;
28081: GO 28046
28083: POP
28084: POP
// end ;
28085: LD_VAR 0 3
28089: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28090: LD_INT 0
28092: PPUSH
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
28099: PPUSH
28100: PPUSH
28101: PPUSH
28102: PPUSH
28103: PPUSH
28104: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28105: LD_VAR 0 1
28109: NOT
28110: PUSH
28111: LD_VAR 0 1
28115: PPUSH
28116: CALL_OW 257
28120: PUSH
28121: LD_INT 9
28123: NONEQUAL
28124: OR
28125: IFFALSE 28129
// exit ;
28127: GO 28702
// side := GetSide ( unit ) ;
28129: LD_ADDR_VAR 0 9
28133: PUSH
28134: LD_VAR 0 1
28138: PPUSH
28139: CALL_OW 255
28143: ST_TO_ADDR
// tech_space := tech_spacanom ;
28144: LD_ADDR_VAR 0 12
28148: PUSH
28149: LD_INT 29
28151: ST_TO_ADDR
// tech_time := tech_taurad ;
28152: LD_ADDR_VAR 0 13
28156: PUSH
28157: LD_INT 28
28159: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28160: LD_ADDR_VAR 0 11
28164: PUSH
28165: LD_VAR 0 1
28169: PPUSH
28170: CALL_OW 310
28174: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28175: LD_VAR 0 11
28179: PPUSH
28180: CALL_OW 247
28184: PUSH
28185: LD_INT 2
28187: EQUAL
28188: IFFALSE 28192
// exit ;
28190: GO 28702
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28192: LD_ADDR_VAR 0 8
28196: PUSH
28197: LD_INT 81
28199: PUSH
28200: LD_VAR 0 9
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 3
28211: PUSH
28212: LD_INT 21
28214: PUSH
28215: LD_INT 3
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PPUSH
28230: CALL_OW 69
28234: ST_TO_ADDR
// if not tmp then
28235: LD_VAR 0 8
28239: NOT
28240: IFFALSE 28244
// exit ;
28242: GO 28702
// if in_unit then
28244: LD_VAR 0 11
28248: IFFALSE 28272
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28250: LD_ADDR_VAR 0 10
28254: PUSH
28255: LD_VAR 0 8
28259: PPUSH
28260: LD_VAR 0 11
28264: PPUSH
28265: CALL_OW 74
28269: ST_TO_ADDR
28270: GO 28292
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28272: LD_ADDR_VAR 0 10
28276: PUSH
28277: LD_VAR 0 8
28281: PPUSH
28282: LD_VAR 0 1
28286: PPUSH
28287: CALL_OW 74
28291: ST_TO_ADDR
// if not enemy then
28292: LD_VAR 0 10
28296: NOT
28297: IFFALSE 28301
// exit ;
28299: GO 28702
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28301: LD_VAR 0 11
28305: PUSH
28306: LD_VAR 0 11
28310: PPUSH
28311: LD_VAR 0 10
28315: PPUSH
28316: CALL_OW 296
28320: PUSH
28321: LD_INT 13
28323: GREATER
28324: AND
28325: PUSH
28326: LD_VAR 0 1
28330: PPUSH
28331: LD_VAR 0 10
28335: PPUSH
28336: CALL_OW 296
28340: PUSH
28341: LD_INT 12
28343: GREATER
28344: OR
28345: IFFALSE 28349
// exit ;
28347: GO 28702
// missile := [ 1 ] ;
28349: LD_ADDR_VAR 0 14
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28360: LD_VAR 0 9
28364: PPUSH
28365: LD_VAR 0 12
28369: PPUSH
28370: CALL_OW 325
28374: IFFALSE 28403
// missile := Replace ( missile , missile + 1 , 2 ) ;
28376: LD_ADDR_VAR 0 14
28380: PUSH
28381: LD_VAR 0 14
28385: PPUSH
28386: LD_VAR 0 14
28390: PUSH
28391: LD_INT 1
28393: PLUS
28394: PPUSH
28395: LD_INT 2
28397: PPUSH
28398: CALL_OW 1
28402: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28403: LD_VAR 0 9
28407: PPUSH
28408: LD_VAR 0 13
28412: PPUSH
28413: CALL_OW 325
28417: PUSH
28418: LD_VAR 0 10
28422: PPUSH
28423: CALL_OW 255
28427: PPUSH
28428: LD_VAR 0 13
28432: PPUSH
28433: CALL_OW 325
28437: NOT
28438: AND
28439: IFFALSE 28468
// missile := Replace ( missile , missile + 1 , 3 ) ;
28441: LD_ADDR_VAR 0 14
28445: PUSH
28446: LD_VAR 0 14
28450: PPUSH
28451: LD_VAR 0 14
28455: PUSH
28456: LD_INT 1
28458: PLUS
28459: PPUSH
28460: LD_INT 3
28462: PPUSH
28463: CALL_OW 1
28467: ST_TO_ADDR
// if missile < 2 then
28468: LD_VAR 0 14
28472: PUSH
28473: LD_INT 2
28475: LESS
28476: IFFALSE 28480
// exit ;
28478: GO 28702
// x := GetX ( enemy ) ;
28480: LD_ADDR_VAR 0 4
28484: PUSH
28485: LD_VAR 0 10
28489: PPUSH
28490: CALL_OW 250
28494: ST_TO_ADDR
// y := GetY ( enemy ) ;
28495: LD_ADDR_VAR 0 5
28499: PUSH
28500: LD_VAR 0 10
28504: PPUSH
28505: CALL_OW 251
28509: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28510: LD_ADDR_VAR 0 6
28514: PUSH
28515: LD_VAR 0 4
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PPUSH
28524: LD_INT 1
28526: PPUSH
28527: CALL_OW 12
28531: PLUS
28532: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28533: LD_ADDR_VAR 0 7
28537: PUSH
28538: LD_VAR 0 5
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PPUSH
28547: LD_INT 1
28549: PPUSH
28550: CALL_OW 12
28554: PLUS
28555: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28556: LD_VAR 0 6
28560: PPUSH
28561: LD_VAR 0 7
28565: PPUSH
28566: CALL_OW 488
28570: NOT
28571: IFFALSE 28593
// begin _x := x ;
28573: LD_ADDR_VAR 0 6
28577: PUSH
28578: LD_VAR 0 4
28582: ST_TO_ADDR
// _y := y ;
28583: LD_ADDR_VAR 0 7
28587: PUSH
28588: LD_VAR 0 5
28592: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28593: LD_ADDR_VAR 0 3
28597: PUSH
28598: LD_INT 1
28600: PPUSH
28601: LD_VAR 0 14
28605: PPUSH
28606: CALL_OW 12
28610: ST_TO_ADDR
// case i of 1 :
28611: LD_VAR 0 3
28615: PUSH
28616: LD_INT 1
28618: DOUBLE
28619: EQUAL
28620: IFTRUE 28624
28622: GO 28641
28624: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28625: LD_VAR 0 1
28629: PPUSH
28630: LD_VAR 0 10
28634: PPUSH
28635: CALL_OW 115
28639: GO 28702
28641: LD_INT 2
28643: DOUBLE
28644: EQUAL
28645: IFTRUE 28649
28647: GO 28671
28649: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28650: LD_VAR 0 1
28654: PPUSH
28655: LD_VAR 0 6
28659: PPUSH
28660: LD_VAR 0 7
28664: PPUSH
28665: CALL_OW 153
28669: GO 28702
28671: LD_INT 3
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28701
28679: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28680: LD_VAR 0 1
28684: PPUSH
28685: LD_VAR 0 6
28689: PPUSH
28690: LD_VAR 0 7
28694: PPUSH
28695: CALL_OW 154
28699: GO 28702
28701: POP
// end ;
28702: LD_VAR 0 2
28706: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28707: LD_INT 0
28709: PPUSH
28710: PPUSH
28711: PPUSH
28712: PPUSH
28713: PPUSH
28714: PPUSH
// if not unit or not building then
28715: LD_VAR 0 1
28719: NOT
28720: PUSH
28721: LD_VAR 0 2
28725: NOT
28726: OR
28727: IFFALSE 28731
// exit ;
28729: GO 28889
// x := GetX ( building ) ;
28731: LD_ADDR_VAR 0 5
28735: PUSH
28736: LD_VAR 0 2
28740: PPUSH
28741: CALL_OW 250
28745: ST_TO_ADDR
// y := GetY ( building ) ;
28746: LD_ADDR_VAR 0 6
28750: PUSH
28751: LD_VAR 0 2
28755: PPUSH
28756: CALL_OW 251
28760: ST_TO_ADDR
// for i = 0 to 5 do
28761: LD_ADDR_VAR 0 4
28765: PUSH
28766: DOUBLE
28767: LD_INT 0
28769: DEC
28770: ST_TO_ADDR
28771: LD_INT 5
28773: PUSH
28774: FOR_TO
28775: IFFALSE 28887
// begin _x := ShiftX ( x , i , 3 ) ;
28777: LD_ADDR_VAR 0 7
28781: PUSH
28782: LD_VAR 0 5
28786: PPUSH
28787: LD_VAR 0 4
28791: PPUSH
28792: LD_INT 3
28794: PPUSH
28795: CALL_OW 272
28799: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28800: LD_ADDR_VAR 0 8
28804: PUSH
28805: LD_VAR 0 6
28809: PPUSH
28810: LD_VAR 0 4
28814: PPUSH
28815: LD_INT 3
28817: PPUSH
28818: CALL_OW 273
28822: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28823: LD_VAR 0 7
28827: PPUSH
28828: LD_VAR 0 8
28832: PPUSH
28833: CALL_OW 488
28837: NOT
28838: IFFALSE 28842
// continue ;
28840: GO 28774
// if HexInfo ( _x , _y ) = 0 then
28842: LD_VAR 0 7
28846: PPUSH
28847: LD_VAR 0 8
28851: PPUSH
28852: CALL_OW 428
28856: PUSH
28857: LD_INT 0
28859: EQUAL
28860: IFFALSE 28885
// begin ComMoveXY ( unit , _x , _y ) ;
28862: LD_VAR 0 1
28866: PPUSH
28867: LD_VAR 0 7
28871: PPUSH
28872: LD_VAR 0 8
28876: PPUSH
28877: CALL_OW 111
// exit ;
28881: POP
28882: POP
28883: GO 28889
// end ; end ;
28885: GO 28774
28887: POP
28888: POP
// end ;
28889: LD_VAR 0 3
28893: RET
// export function ScanBase ( side , base_area ) ; begin
28894: LD_INT 0
28896: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28897: LD_ADDR_VAR 0 3
28901: PUSH
28902: LD_VAR 0 2
28906: PPUSH
28907: LD_INT 81
28909: PUSH
28910: LD_VAR 0 1
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PPUSH
28919: CALL_OW 70
28923: ST_TO_ADDR
// end ;
28924: LD_VAR 0 3
28928: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28929: LD_INT 0
28931: PPUSH
28932: PPUSH
28933: PPUSH
28934: PPUSH
// result := false ;
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: LD_INT 0
28942: ST_TO_ADDR
// side := GetSide ( unit ) ;
28943: LD_ADDR_VAR 0 3
28947: PUSH
28948: LD_VAR 0 1
28952: PPUSH
28953: CALL_OW 255
28957: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28958: LD_ADDR_VAR 0 4
28962: PUSH
28963: LD_VAR 0 1
28967: PPUSH
28968: CALL_OW 248
28972: ST_TO_ADDR
// case nat of 1 :
28973: LD_VAR 0 4
28977: PUSH
28978: LD_INT 1
28980: DOUBLE
28981: EQUAL
28982: IFTRUE 28986
28984: GO 28997
28986: POP
// tech := tech_lassight ; 2 :
28987: LD_ADDR_VAR 0 5
28991: PUSH
28992: LD_INT 12
28994: ST_TO_ADDR
28995: GO 29036
28997: LD_INT 2
28999: DOUBLE
29000: EQUAL
29001: IFTRUE 29005
29003: GO 29016
29005: POP
// tech := tech_mortar ; 3 :
29006: LD_ADDR_VAR 0 5
29010: PUSH
29011: LD_INT 41
29013: ST_TO_ADDR
29014: GO 29036
29016: LD_INT 3
29018: DOUBLE
29019: EQUAL
29020: IFTRUE 29024
29022: GO 29035
29024: POP
// tech := tech_bazooka ; end ;
29025: LD_ADDR_VAR 0 5
29029: PUSH
29030: LD_INT 44
29032: ST_TO_ADDR
29033: GO 29036
29035: POP
// if Researched ( side , tech ) then
29036: LD_VAR 0 3
29040: PPUSH
29041: LD_VAR 0 5
29045: PPUSH
29046: CALL_OW 325
29050: IFFALSE 29077
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29052: LD_ADDR_VAR 0 2
29056: PUSH
29057: LD_INT 5
29059: PUSH
29060: LD_INT 8
29062: PUSH
29063: LD_INT 9
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: LIST
29070: PUSH
29071: LD_VAR 0 4
29075: ARRAY
29076: ST_TO_ADDR
// end ;
29077: LD_VAR 0 2
29081: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29082: LD_INT 0
29084: PPUSH
29085: PPUSH
29086: PPUSH
// if not mines then
29087: LD_VAR 0 2
29091: NOT
29092: IFFALSE 29096
// exit ;
29094: GO 29240
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29096: LD_ADDR_VAR 0 5
29100: PUSH
29101: LD_INT 81
29103: PUSH
29104: LD_VAR 0 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 3
29115: PUSH
29116: LD_INT 21
29118: PUSH
29119: LD_INT 3
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PPUSH
29134: CALL_OW 69
29138: ST_TO_ADDR
// for i in mines do
29139: LD_ADDR_VAR 0 4
29143: PUSH
29144: LD_VAR 0 2
29148: PUSH
29149: FOR_IN
29150: IFFALSE 29238
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29152: LD_VAR 0 4
29156: PUSH
29157: LD_INT 1
29159: ARRAY
29160: PPUSH
29161: LD_VAR 0 4
29165: PUSH
29166: LD_INT 2
29168: ARRAY
29169: PPUSH
29170: CALL_OW 458
29174: NOT
29175: IFFALSE 29179
// continue ;
29177: GO 29149
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29179: LD_VAR 0 4
29183: PUSH
29184: LD_INT 1
29186: ARRAY
29187: PPUSH
29188: LD_VAR 0 4
29192: PUSH
29193: LD_INT 2
29195: ARRAY
29196: PPUSH
29197: CALL_OW 428
29201: PUSH
29202: LD_VAR 0 5
29206: IN
29207: IFFALSE 29236
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29209: LD_VAR 0 4
29213: PUSH
29214: LD_INT 1
29216: ARRAY
29217: PPUSH
29218: LD_VAR 0 4
29222: PUSH
29223: LD_INT 2
29225: ARRAY
29226: PPUSH
29227: LD_VAR 0 1
29231: PPUSH
29232: CALL_OW 456
// end ;
29236: GO 29149
29238: POP
29239: POP
// end ;
29240: LD_VAR 0 3
29244: RET
// export function Count ( array ) ; var i ; begin
29245: LD_INT 0
29247: PPUSH
29248: PPUSH
// result := 0 ;
29249: LD_ADDR_VAR 0 2
29253: PUSH
29254: LD_INT 0
29256: ST_TO_ADDR
// for i in array do
29257: LD_ADDR_VAR 0 3
29261: PUSH
29262: LD_VAR 0 1
29266: PUSH
29267: FOR_IN
29268: IFFALSE 29292
// if i then
29270: LD_VAR 0 3
29274: IFFALSE 29290
// result := result + 1 ;
29276: LD_ADDR_VAR 0 2
29280: PUSH
29281: LD_VAR 0 2
29285: PUSH
29286: LD_INT 1
29288: PLUS
29289: ST_TO_ADDR
29290: GO 29267
29292: POP
29293: POP
// end ;
29294: LD_VAR 0 2
29298: RET
// export function IsEmpty ( building ) ; begin
29299: LD_INT 0
29301: PPUSH
// if not building then
29302: LD_VAR 0 1
29306: NOT
29307: IFFALSE 29311
// exit ;
29309: GO 29354
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29311: LD_ADDR_VAR 0 2
29315: PUSH
29316: LD_VAR 0 1
29320: PUSH
29321: LD_INT 22
29323: PUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 255
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 58
29340: PUSH
29341: EMPTY
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PPUSH
29348: CALL_OW 69
29352: IN
29353: ST_TO_ADDR
// end ;
29354: LD_VAR 0 2
29358: RET
// export function IsNotFull ( building ) ; var places ; begin
29359: LD_INT 0
29361: PPUSH
29362: PPUSH
// if not building then
29363: LD_VAR 0 1
29367: NOT
29368: IFFALSE 29372
// exit ;
29370: GO 29543
// result := false ;
29372: LD_ADDR_VAR 0 2
29376: PUSH
29377: LD_INT 0
29379: ST_TO_ADDR
// places := 0 ;
29380: LD_ADDR_VAR 0 3
29384: PUSH
29385: LD_INT 0
29387: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29388: LD_VAR 0 1
29392: PPUSH
29393: CALL_OW 266
29397: PUSH
29398: LD_INT 0
29400: DOUBLE
29401: EQUAL
29402: IFTRUE 29460
29404: LD_INT 1
29406: DOUBLE
29407: EQUAL
29408: IFTRUE 29460
29410: LD_INT 6
29412: DOUBLE
29413: EQUAL
29414: IFTRUE 29460
29416: LD_INT 7
29418: DOUBLE
29419: EQUAL
29420: IFTRUE 29460
29422: LD_INT 8
29424: DOUBLE
29425: EQUAL
29426: IFTRUE 29460
29428: LD_INT 4
29430: DOUBLE
29431: EQUAL
29432: IFTRUE 29460
29434: LD_INT 5
29436: DOUBLE
29437: EQUAL
29438: IFTRUE 29460
29440: LD_INT 2
29442: DOUBLE
29443: EQUAL
29444: IFTRUE 29460
29446: LD_INT 3
29448: DOUBLE
29449: EQUAL
29450: IFTRUE 29460
29452: LD_INT 35
29454: DOUBLE
29455: EQUAL
29456: IFTRUE 29460
29458: GO 29471
29460: POP
// places := 6 ; b_bunker , b_breastwork :
29461: LD_ADDR_VAR 0 3
29465: PUSH
29466: LD_INT 6
29468: ST_TO_ADDR
29469: GO 29516
29471: LD_INT 32
29473: DOUBLE
29474: EQUAL
29475: IFTRUE 29485
29477: LD_INT 31
29479: DOUBLE
29480: EQUAL
29481: IFTRUE 29485
29483: GO 29496
29485: POP
// places := 1 ; b_control_tower :
29486: LD_ADDR_VAR 0 3
29490: PUSH
29491: LD_INT 1
29493: ST_TO_ADDR
29494: GO 29516
29496: LD_INT 36
29498: DOUBLE
29499: EQUAL
29500: IFTRUE 29504
29502: GO 29515
29504: POP
// places := 3 ; end ;
29505: LD_ADDR_VAR 0 3
29509: PUSH
29510: LD_INT 3
29512: ST_TO_ADDR
29513: GO 29516
29515: POP
// if places then
29516: LD_VAR 0 3
29520: IFFALSE 29543
// result := UnitsInside ( building ) < places ;
29522: LD_ADDR_VAR 0 2
29526: PUSH
29527: LD_VAR 0 1
29531: PPUSH
29532: CALL_OW 313
29536: PUSH
29537: LD_VAR 0 3
29541: LESS
29542: ST_TO_ADDR
// end ;
29543: LD_VAR 0 2
29547: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29548: LD_INT 0
29550: PPUSH
29551: PPUSH
29552: PPUSH
29553: PPUSH
// tmp := [ ] ;
29554: LD_ADDR_VAR 0 3
29558: PUSH
29559: EMPTY
29560: ST_TO_ADDR
// list := [ ] ;
29561: LD_ADDR_VAR 0 5
29565: PUSH
29566: EMPTY
29567: ST_TO_ADDR
// for i = 16 to 25 do
29568: LD_ADDR_VAR 0 4
29572: PUSH
29573: DOUBLE
29574: LD_INT 16
29576: DEC
29577: ST_TO_ADDR
29578: LD_INT 25
29580: PUSH
29581: FOR_TO
29582: IFFALSE 29655
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29584: LD_ADDR_VAR 0 3
29588: PUSH
29589: LD_VAR 0 3
29593: PUSH
29594: LD_INT 22
29596: PUSH
29597: LD_VAR 0 1
29601: PPUSH
29602: CALL_OW 255
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 91
29613: PUSH
29614: LD_VAR 0 1
29618: PUSH
29619: LD_INT 6
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 30
29629: PUSH
29630: LD_VAR 0 4
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: PPUSH
29647: CALL_OW 69
29651: ADD
29652: ST_TO_ADDR
29653: GO 29581
29655: POP
29656: POP
// for i = 1 to tmp do
29657: LD_ADDR_VAR 0 4
29661: PUSH
29662: DOUBLE
29663: LD_INT 1
29665: DEC
29666: ST_TO_ADDR
29667: LD_VAR 0 3
29671: PUSH
29672: FOR_TO
29673: IFFALSE 29761
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29675: LD_ADDR_VAR 0 5
29679: PUSH
29680: LD_VAR 0 5
29684: PUSH
29685: LD_VAR 0 3
29689: PUSH
29690: LD_VAR 0 4
29694: ARRAY
29695: PPUSH
29696: CALL_OW 266
29700: PUSH
29701: LD_VAR 0 3
29705: PUSH
29706: LD_VAR 0 4
29710: ARRAY
29711: PPUSH
29712: CALL_OW 250
29716: PUSH
29717: LD_VAR 0 3
29721: PUSH
29722: LD_VAR 0 4
29726: ARRAY
29727: PPUSH
29728: CALL_OW 251
29732: PUSH
29733: LD_VAR 0 3
29737: PUSH
29738: LD_VAR 0 4
29742: ARRAY
29743: PPUSH
29744: CALL_OW 254
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: PUSH
29755: EMPTY
29756: LIST
29757: ADD
29758: ST_TO_ADDR
29759: GO 29672
29761: POP
29762: POP
// result := list ;
29763: LD_ADDR_VAR 0 2
29767: PUSH
29768: LD_VAR 0 5
29772: ST_TO_ADDR
// end ;
29773: LD_VAR 0 2
29777: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29778: LD_INT 0
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
// if not factory then
29787: LD_VAR 0 1
29791: NOT
29792: IFFALSE 29796
// exit ;
29794: GO 30389
// if control = control_apeman then
29796: LD_VAR 0 4
29800: PUSH
29801: LD_INT 5
29803: EQUAL
29804: IFFALSE 29913
// begin tmp := UnitsInside ( factory ) ;
29806: LD_ADDR_VAR 0 8
29810: PUSH
29811: LD_VAR 0 1
29815: PPUSH
29816: CALL_OW 313
29820: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29821: LD_VAR 0 8
29825: PPUSH
29826: LD_INT 25
29828: PUSH
29829: LD_INT 12
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PPUSH
29836: CALL_OW 72
29840: NOT
29841: IFFALSE 29851
// control := control_manual ;
29843: LD_ADDR_VAR 0 4
29847: PUSH
29848: LD_INT 1
29850: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29851: LD_ADDR_VAR 0 8
29855: PUSH
29856: LD_VAR 0 1
29860: PPUSH
29861: CALL 29548 0 1
29865: ST_TO_ADDR
// if tmp then
29866: LD_VAR 0 8
29870: IFFALSE 29913
// begin for i in tmp do
29872: LD_ADDR_VAR 0 7
29876: PUSH
29877: LD_VAR 0 8
29881: PUSH
29882: FOR_IN
29883: IFFALSE 29911
// if i [ 1 ] = b_ext_radio then
29885: LD_VAR 0 7
29889: PUSH
29890: LD_INT 1
29892: ARRAY
29893: PUSH
29894: LD_INT 22
29896: EQUAL
29897: IFFALSE 29909
// begin control := control_remote ;
29899: LD_ADDR_VAR 0 4
29903: PUSH
29904: LD_INT 2
29906: ST_TO_ADDR
// break ;
29907: GO 29911
// end ;
29909: GO 29882
29911: POP
29912: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29913: LD_VAR 0 1
29917: PPUSH
29918: LD_VAR 0 2
29922: PPUSH
29923: LD_VAR 0 3
29927: PPUSH
29928: LD_VAR 0 4
29932: PPUSH
29933: LD_VAR 0 5
29937: PPUSH
29938: CALL_OW 448
29942: IFFALSE 29977
// begin result := [ chassis , engine , control , weapon ] ;
29944: LD_ADDR_VAR 0 6
29948: PUSH
29949: LD_VAR 0 2
29953: PUSH
29954: LD_VAR 0 3
29958: PUSH
29959: LD_VAR 0 4
29963: PUSH
29964: LD_VAR 0 5
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: ST_TO_ADDR
// exit ;
29975: GO 30389
// end ; _chassis := AvailableChassisList ( factory ) ;
29977: LD_ADDR_VAR 0 9
29981: PUSH
29982: LD_VAR 0 1
29986: PPUSH
29987: CALL_OW 475
29991: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29992: LD_ADDR_VAR 0 11
29996: PUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 476
30006: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30007: LD_ADDR_VAR 0 12
30011: PUSH
30012: LD_VAR 0 1
30016: PPUSH
30017: CALL_OW 477
30021: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30022: LD_ADDR_VAR 0 10
30026: PUSH
30027: LD_VAR 0 1
30031: PPUSH
30032: CALL_OW 478
30036: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30037: LD_VAR 0 9
30041: NOT
30042: PUSH
30043: LD_VAR 0 11
30047: NOT
30048: OR
30049: PUSH
30050: LD_VAR 0 12
30054: NOT
30055: OR
30056: PUSH
30057: LD_VAR 0 10
30061: NOT
30062: OR
30063: IFFALSE 30098
// begin result := [ chassis , engine , control , weapon ] ;
30065: LD_ADDR_VAR 0 6
30069: PUSH
30070: LD_VAR 0 2
30074: PUSH
30075: LD_VAR 0 3
30079: PUSH
30080: LD_VAR 0 4
30084: PUSH
30085: LD_VAR 0 5
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
// exit ;
30096: GO 30389
// end ; if not chassis in _chassis then
30098: LD_VAR 0 2
30102: PUSH
30103: LD_VAR 0 9
30107: IN
30108: NOT
30109: IFFALSE 30135
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30111: LD_ADDR_VAR 0 2
30115: PUSH
30116: LD_VAR 0 9
30120: PUSH
30121: LD_INT 1
30123: PPUSH
30124: LD_VAR 0 9
30128: PPUSH
30129: CALL_OW 12
30133: ARRAY
30134: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30135: LD_VAR 0 2
30139: PPUSH
30140: LD_VAR 0 3
30144: PPUSH
30145: CALL 30394 0 2
30149: NOT
30150: IFFALSE 30209
// repeat engine := _engine [ 1 ] ;
30152: LD_ADDR_VAR 0 3
30156: PUSH
30157: LD_VAR 0 11
30161: PUSH
30162: LD_INT 1
30164: ARRAY
30165: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30166: LD_ADDR_VAR 0 11
30170: PUSH
30171: LD_VAR 0 11
30175: PPUSH
30176: LD_INT 1
30178: PPUSH
30179: CALL_OW 3
30183: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30184: LD_VAR 0 2
30188: PPUSH
30189: LD_VAR 0 3
30193: PPUSH
30194: CALL 30394 0 2
30198: PUSH
30199: LD_VAR 0 11
30203: PUSH
30204: EMPTY
30205: EQUAL
30206: OR
30207: IFFALSE 30152
// if not control in _control then
30209: LD_VAR 0 4
30213: PUSH
30214: LD_VAR 0 12
30218: IN
30219: NOT
30220: IFFALSE 30246
// control := _control [ rand ( 1 , _control ) ] ;
30222: LD_ADDR_VAR 0 4
30226: PUSH
30227: LD_VAR 0 12
30231: PUSH
30232: LD_INT 1
30234: PPUSH
30235: LD_VAR 0 12
30239: PPUSH
30240: CALL_OW 12
30244: ARRAY
30245: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30246: LD_VAR 0 2
30250: PPUSH
30251: LD_VAR 0 5
30255: PPUSH
30256: CALL 30614 0 2
30260: NOT
30261: IFFALSE 30320
// repeat weapon := _weapon [ 1 ] ;
30263: LD_ADDR_VAR 0 5
30267: PUSH
30268: LD_VAR 0 10
30272: PUSH
30273: LD_INT 1
30275: ARRAY
30276: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30277: LD_ADDR_VAR 0 10
30281: PUSH
30282: LD_VAR 0 10
30286: PPUSH
30287: LD_INT 1
30289: PPUSH
30290: CALL_OW 3
30294: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30295: LD_VAR 0 2
30299: PPUSH
30300: LD_VAR 0 5
30304: PPUSH
30305: CALL 30614 0 2
30309: PUSH
30310: LD_VAR 0 10
30314: PUSH
30315: EMPTY
30316: EQUAL
30317: OR
30318: IFFALSE 30263
// result := [ ] ;
30320: LD_ADDR_VAR 0 6
30324: PUSH
30325: EMPTY
30326: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30327: LD_VAR 0 1
30331: PPUSH
30332: LD_VAR 0 2
30336: PPUSH
30337: LD_VAR 0 3
30341: PPUSH
30342: LD_VAR 0 4
30346: PPUSH
30347: LD_VAR 0 5
30351: PPUSH
30352: CALL_OW 448
30356: IFFALSE 30389
// result := [ chassis , engine , control , weapon ] ;
30358: LD_ADDR_VAR 0 6
30362: PUSH
30363: LD_VAR 0 2
30367: PUSH
30368: LD_VAR 0 3
30372: PUSH
30373: LD_VAR 0 4
30377: PUSH
30378: LD_VAR 0 5
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: ST_TO_ADDR
// end ;
30389: LD_VAR 0 6
30393: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30394: LD_INT 0
30396: PPUSH
// if not chassis or not engine then
30397: LD_VAR 0 1
30401: NOT
30402: PUSH
30403: LD_VAR 0 2
30407: NOT
30408: OR
30409: IFFALSE 30413
// exit ;
30411: GO 30609
// case engine of engine_solar :
30413: LD_VAR 0 2
30417: PUSH
30418: LD_INT 2
30420: DOUBLE
30421: EQUAL
30422: IFTRUE 30426
30424: GO 30464
30426: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30427: LD_ADDR_VAR 0 3
30431: PUSH
30432: LD_INT 11
30434: PUSH
30435: LD_INT 12
30437: PUSH
30438: LD_INT 13
30440: PUSH
30441: LD_INT 14
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: LD_INT 2
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: ST_TO_ADDR
30462: GO 30593
30464: LD_INT 1
30466: DOUBLE
30467: EQUAL
30468: IFTRUE 30472
30470: GO 30534
30472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30473: LD_ADDR_VAR 0 3
30477: PUSH
30478: LD_INT 11
30480: PUSH
30481: LD_INT 12
30483: PUSH
30484: LD_INT 13
30486: PUSH
30487: LD_INT 14
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: LD_INT 2
30495: PUSH
30496: LD_INT 3
30498: PUSH
30499: LD_INT 4
30501: PUSH
30502: LD_INT 5
30504: PUSH
30505: LD_INT 21
30507: PUSH
30508: LD_INT 23
30510: PUSH
30511: LD_INT 22
30513: PUSH
30514: LD_INT 24
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: ST_TO_ADDR
30532: GO 30593
30534: LD_INT 3
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30542
30540: GO 30592
30542: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30543: LD_ADDR_VAR 0 3
30547: PUSH
30548: LD_INT 13
30550: PUSH
30551: LD_INT 14
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: LD_INT 3
30559: PUSH
30560: LD_INT 4
30562: PUSH
30563: LD_INT 5
30565: PUSH
30566: LD_INT 21
30568: PUSH
30569: LD_INT 22
30571: PUSH
30572: LD_INT 23
30574: PUSH
30575: LD_INT 24
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: ST_TO_ADDR
30590: GO 30593
30592: POP
// result := ( chassis in result ) ;
30593: LD_ADDR_VAR 0 3
30597: PUSH
30598: LD_VAR 0 1
30602: PUSH
30603: LD_VAR 0 3
30607: IN
30608: ST_TO_ADDR
// end ;
30609: LD_VAR 0 3
30613: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30614: LD_INT 0
30616: PPUSH
// if not chassis or not weapon then
30617: LD_VAR 0 1
30621: NOT
30622: PUSH
30623: LD_VAR 0 2
30627: NOT
30628: OR
30629: IFFALSE 30633
// exit ;
30631: GO 31693
// case weapon of us_machine_gun :
30633: LD_VAR 0 2
30637: PUSH
30638: LD_INT 2
30640: DOUBLE
30641: EQUAL
30642: IFTRUE 30646
30644: GO 30676
30646: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30647: LD_ADDR_VAR 0 3
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: LD_INT 2
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: LD_INT 4
30663: PUSH
30664: LD_INT 5
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: ST_TO_ADDR
30674: GO 31677
30676: LD_INT 3
30678: DOUBLE
30679: EQUAL
30680: IFTRUE 30684
30682: GO 30714
30684: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30685: LD_ADDR_VAR 0 3
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 2
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: LD_INT 4
30701: PUSH
30702: LD_INT 5
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: ST_TO_ADDR
30712: GO 31677
30714: LD_INT 11
30716: DOUBLE
30717: EQUAL
30718: IFTRUE 30722
30720: GO 30752
30722: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30723: LD_ADDR_VAR 0 3
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 2
30733: PUSH
30734: LD_INT 3
30736: PUSH
30737: LD_INT 4
30739: PUSH
30740: LD_INT 5
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: ST_TO_ADDR
30750: GO 31677
30752: LD_INT 4
30754: DOUBLE
30755: EQUAL
30756: IFTRUE 30760
30758: GO 30786
30760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30761: LD_ADDR_VAR 0 3
30765: PUSH
30766: LD_INT 2
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: LD_INT 4
30774: PUSH
30775: LD_INT 5
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: ST_TO_ADDR
30784: GO 31677
30786: LD_INT 5
30788: DOUBLE
30789: EQUAL
30790: IFTRUE 30794
30792: GO 30820
30794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30795: LD_ADDR_VAR 0 3
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: LD_INT 3
30805: PUSH
30806: LD_INT 4
30808: PUSH
30809: LD_INT 5
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
30818: GO 31677
30820: LD_INT 9
30822: DOUBLE
30823: EQUAL
30824: IFTRUE 30828
30826: GO 30854
30828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30829: LD_ADDR_VAR 0 3
30833: PUSH
30834: LD_INT 2
30836: PUSH
30837: LD_INT 3
30839: PUSH
30840: LD_INT 4
30842: PUSH
30843: LD_INT 5
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: ST_TO_ADDR
30852: GO 31677
30854: LD_INT 7
30856: DOUBLE
30857: EQUAL
30858: IFTRUE 30862
30860: GO 30888
30862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30863: LD_ADDR_VAR 0 3
30867: PUSH
30868: LD_INT 2
30870: PUSH
30871: LD_INT 3
30873: PUSH
30874: LD_INT 4
30876: PUSH
30877: LD_INT 5
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: ST_TO_ADDR
30886: GO 31677
30888: LD_INT 12
30890: DOUBLE
30891: EQUAL
30892: IFTRUE 30896
30894: GO 30922
30896: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30897: LD_ADDR_VAR 0 3
30901: PUSH
30902: LD_INT 2
30904: PUSH
30905: LD_INT 3
30907: PUSH
30908: LD_INT 4
30910: PUSH
30911: LD_INT 5
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: ST_TO_ADDR
30920: GO 31677
30922: LD_INT 13
30924: DOUBLE
30925: EQUAL
30926: IFTRUE 30930
30928: GO 30956
30930: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30931: LD_ADDR_VAR 0 3
30935: PUSH
30936: LD_INT 2
30938: PUSH
30939: LD_INT 3
30941: PUSH
30942: LD_INT 4
30944: PUSH
30945: LD_INT 5
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
30954: GO 31677
30956: LD_INT 14
30958: DOUBLE
30959: EQUAL
30960: IFTRUE 30964
30962: GO 30982
30964: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30965: LD_ADDR_VAR 0 3
30969: PUSH
30970: LD_INT 4
30972: PUSH
30973: LD_INT 5
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: ST_TO_ADDR
30980: GO 31677
30982: LD_INT 6
30984: DOUBLE
30985: EQUAL
30986: IFTRUE 30990
30988: GO 31008
30990: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30991: LD_ADDR_VAR 0 3
30995: PUSH
30996: LD_INT 4
30998: PUSH
30999: LD_INT 5
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: ST_TO_ADDR
31006: GO 31677
31008: LD_INT 10
31010: DOUBLE
31011: EQUAL
31012: IFTRUE 31016
31014: GO 31034
31016: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31017: LD_ADDR_VAR 0 3
31021: PUSH
31022: LD_INT 4
31024: PUSH
31025: LD_INT 5
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: ST_TO_ADDR
31032: GO 31677
31034: LD_INT 22
31036: DOUBLE
31037: EQUAL
31038: IFTRUE 31042
31040: GO 31068
31042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31043: LD_ADDR_VAR 0 3
31047: PUSH
31048: LD_INT 11
31050: PUSH
31051: LD_INT 12
31053: PUSH
31054: LD_INT 13
31056: PUSH
31057: LD_INT 14
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: ST_TO_ADDR
31066: GO 31677
31068: LD_INT 23
31070: DOUBLE
31071: EQUAL
31072: IFTRUE 31076
31074: GO 31102
31076: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31077: LD_ADDR_VAR 0 3
31081: PUSH
31082: LD_INT 11
31084: PUSH
31085: LD_INT 12
31087: PUSH
31088: LD_INT 13
31090: PUSH
31091: LD_INT 14
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: ST_TO_ADDR
31100: GO 31677
31102: LD_INT 24
31104: DOUBLE
31105: EQUAL
31106: IFTRUE 31110
31108: GO 31136
31110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31111: LD_ADDR_VAR 0 3
31115: PUSH
31116: LD_INT 11
31118: PUSH
31119: LD_INT 12
31121: PUSH
31122: LD_INT 13
31124: PUSH
31125: LD_INT 14
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: ST_TO_ADDR
31134: GO 31677
31136: LD_INT 30
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31170
31144: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_INT 11
31152: PUSH
31153: LD_INT 12
31155: PUSH
31156: LD_INT 13
31158: PUSH
31159: LD_INT 14
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: ST_TO_ADDR
31168: GO 31677
31170: LD_INT 25
31172: DOUBLE
31173: EQUAL
31174: IFTRUE 31178
31176: GO 31196
31178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31179: LD_ADDR_VAR 0 3
31183: PUSH
31184: LD_INT 13
31186: PUSH
31187: LD_INT 14
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: ST_TO_ADDR
31194: GO 31677
31196: LD_INT 27
31198: DOUBLE
31199: EQUAL
31200: IFTRUE 31204
31202: GO 31222
31204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31205: LD_ADDR_VAR 0 3
31209: PUSH
31210: LD_INT 13
31212: PUSH
31213: LD_INT 14
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: ST_TO_ADDR
31220: GO 31677
31222: LD_INT 92
31224: DOUBLE
31225: EQUAL
31226: IFTRUE 31230
31228: GO 31256
31230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31231: LD_ADDR_VAR 0 3
31235: PUSH
31236: LD_INT 11
31238: PUSH
31239: LD_INT 12
31241: PUSH
31242: LD_INT 13
31244: PUSH
31245: LD_INT 14
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: ST_TO_ADDR
31254: GO 31677
31256: LD_INT 28
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31282
31264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31265: LD_ADDR_VAR 0 3
31269: PUSH
31270: LD_INT 13
31272: PUSH
31273: LD_INT 14
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: ST_TO_ADDR
31280: GO 31677
31282: LD_INT 29
31284: DOUBLE
31285: EQUAL
31286: IFTRUE 31290
31288: GO 31308
31290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31291: LD_ADDR_VAR 0 3
31295: PUSH
31296: LD_INT 13
31298: PUSH
31299: LD_INT 14
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: ST_TO_ADDR
31306: GO 31677
31308: LD_INT 31
31310: DOUBLE
31311: EQUAL
31312: IFTRUE 31316
31314: GO 31334
31316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31317: LD_ADDR_VAR 0 3
31321: PUSH
31322: LD_INT 13
31324: PUSH
31325: LD_INT 14
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: ST_TO_ADDR
31332: GO 31677
31334: LD_INT 26
31336: DOUBLE
31337: EQUAL
31338: IFTRUE 31342
31340: GO 31360
31342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31343: LD_ADDR_VAR 0 3
31347: PUSH
31348: LD_INT 13
31350: PUSH
31351: LD_INT 14
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: ST_TO_ADDR
31358: GO 31677
31360: LD_INT 42
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 31394
31368: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31369: LD_ADDR_VAR 0 3
31373: PUSH
31374: LD_INT 21
31376: PUSH
31377: LD_INT 22
31379: PUSH
31380: LD_INT 23
31382: PUSH
31383: LD_INT 24
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
31392: GO 31677
31394: LD_INT 43
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31428
31402: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31403: LD_ADDR_VAR 0 3
31407: PUSH
31408: LD_INT 21
31410: PUSH
31411: LD_INT 22
31413: PUSH
31414: LD_INT 23
31416: PUSH
31417: LD_INT 24
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: ST_TO_ADDR
31426: GO 31677
31428: LD_INT 44
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31462
31436: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31437: LD_ADDR_VAR 0 3
31441: PUSH
31442: LD_INT 21
31444: PUSH
31445: LD_INT 22
31447: PUSH
31448: LD_INT 23
31450: PUSH
31451: LD_INT 24
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: ST_TO_ADDR
31460: GO 31677
31462: LD_INT 45
31464: DOUBLE
31465: EQUAL
31466: IFTRUE 31470
31468: GO 31496
31470: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31471: LD_ADDR_VAR 0 3
31475: PUSH
31476: LD_INT 21
31478: PUSH
31479: LD_INT 22
31481: PUSH
31482: LD_INT 23
31484: PUSH
31485: LD_INT 24
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
31494: GO 31677
31496: LD_INT 49
31498: DOUBLE
31499: EQUAL
31500: IFTRUE 31504
31502: GO 31530
31504: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31505: LD_ADDR_VAR 0 3
31509: PUSH
31510: LD_INT 21
31512: PUSH
31513: LD_INT 22
31515: PUSH
31516: LD_INT 23
31518: PUSH
31519: LD_INT 24
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: ST_TO_ADDR
31528: GO 31677
31530: LD_INT 51
31532: DOUBLE
31533: EQUAL
31534: IFTRUE 31538
31536: GO 31564
31538: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31539: LD_ADDR_VAR 0 3
31543: PUSH
31544: LD_INT 21
31546: PUSH
31547: LD_INT 22
31549: PUSH
31550: LD_INT 23
31552: PUSH
31553: LD_INT 24
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: ST_TO_ADDR
31562: GO 31677
31564: LD_INT 52
31566: DOUBLE
31567: EQUAL
31568: IFTRUE 31572
31570: GO 31598
31572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31573: LD_ADDR_VAR 0 3
31577: PUSH
31578: LD_INT 21
31580: PUSH
31581: LD_INT 22
31583: PUSH
31584: LD_INT 23
31586: PUSH
31587: LD_INT 24
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: ST_TO_ADDR
31596: GO 31677
31598: LD_INT 53
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31624
31606: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31607: LD_ADDR_VAR 0 3
31611: PUSH
31612: LD_INT 23
31614: PUSH
31615: LD_INT 24
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: ST_TO_ADDR
31622: GO 31677
31624: LD_INT 46
31626: DOUBLE
31627: EQUAL
31628: IFTRUE 31632
31630: GO 31650
31632: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31633: LD_ADDR_VAR 0 3
31637: PUSH
31638: LD_INT 23
31640: PUSH
31641: LD_INT 24
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: ST_TO_ADDR
31648: GO 31677
31650: LD_INT 47
31652: DOUBLE
31653: EQUAL
31654: IFTRUE 31658
31656: GO 31676
31658: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31659: LD_ADDR_VAR 0 3
31663: PUSH
31664: LD_INT 23
31666: PUSH
31667: LD_INT 24
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: ST_TO_ADDR
31674: GO 31677
31676: POP
// result := ( chassis in result ) ;
31677: LD_ADDR_VAR 0 3
31681: PUSH
31682: LD_VAR 0 1
31686: PUSH
31687: LD_VAR 0 3
31691: IN
31692: ST_TO_ADDR
// end ;
31693: LD_VAR 0 3
31697: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
31702: PPUSH
31703: PPUSH
31704: PPUSH
31705: PPUSH
31706: PPUSH
// result := array ;
31707: LD_ADDR_VAR 0 5
31711: PUSH
31712: LD_VAR 0 1
31716: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31717: LD_VAR 0 1
31721: NOT
31722: PUSH
31723: LD_VAR 0 2
31727: NOT
31728: OR
31729: PUSH
31730: LD_VAR 0 3
31734: NOT
31735: OR
31736: PUSH
31737: LD_VAR 0 2
31741: PUSH
31742: LD_VAR 0 1
31746: GREATER
31747: OR
31748: PUSH
31749: LD_VAR 0 3
31753: PUSH
31754: LD_VAR 0 1
31758: GREATER
31759: OR
31760: IFFALSE 31764
// exit ;
31762: GO 32060
// if direction then
31764: LD_VAR 0 4
31768: IFFALSE 31832
// begin d := 1 ;
31770: LD_ADDR_VAR 0 9
31774: PUSH
31775: LD_INT 1
31777: ST_TO_ADDR
// if i_from > i_to then
31778: LD_VAR 0 2
31782: PUSH
31783: LD_VAR 0 3
31787: GREATER
31788: IFFALSE 31814
// length := ( array - i_from ) + i_to else
31790: LD_ADDR_VAR 0 11
31794: PUSH
31795: LD_VAR 0 1
31799: PUSH
31800: LD_VAR 0 2
31804: MINUS
31805: PUSH
31806: LD_VAR 0 3
31810: PLUS
31811: ST_TO_ADDR
31812: GO 31830
// length := i_to - i_from ;
31814: LD_ADDR_VAR 0 11
31818: PUSH
31819: LD_VAR 0 3
31823: PUSH
31824: LD_VAR 0 2
31828: MINUS
31829: ST_TO_ADDR
// end else
31830: GO 31893
// begin d := - 1 ;
31832: LD_ADDR_VAR 0 9
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: ST_TO_ADDR
// if i_from > i_to then
31841: LD_VAR 0 2
31845: PUSH
31846: LD_VAR 0 3
31850: GREATER
31851: IFFALSE 31871
// length := i_from - i_to else
31853: LD_ADDR_VAR 0 11
31857: PUSH
31858: LD_VAR 0 2
31862: PUSH
31863: LD_VAR 0 3
31867: MINUS
31868: ST_TO_ADDR
31869: GO 31893
// length := ( array - i_to ) + i_from ;
31871: LD_ADDR_VAR 0 11
31875: PUSH
31876: LD_VAR 0 1
31880: PUSH
31881: LD_VAR 0 3
31885: MINUS
31886: PUSH
31887: LD_VAR 0 2
31891: PLUS
31892: ST_TO_ADDR
// end ; if not length then
31893: LD_VAR 0 11
31897: NOT
31898: IFFALSE 31902
// exit ;
31900: GO 32060
// tmp := array ;
31902: LD_ADDR_VAR 0 10
31906: PUSH
31907: LD_VAR 0 1
31911: ST_TO_ADDR
// for i = 1 to length do
31912: LD_ADDR_VAR 0 6
31916: PUSH
31917: DOUBLE
31918: LD_INT 1
31920: DEC
31921: ST_TO_ADDR
31922: LD_VAR 0 11
31926: PUSH
31927: FOR_TO
31928: IFFALSE 32048
// begin for j = 1 to array do
31930: LD_ADDR_VAR 0 7
31934: PUSH
31935: DOUBLE
31936: LD_INT 1
31938: DEC
31939: ST_TO_ADDR
31940: LD_VAR 0 1
31944: PUSH
31945: FOR_TO
31946: IFFALSE 32034
// begin k := j + d ;
31948: LD_ADDR_VAR 0 8
31952: PUSH
31953: LD_VAR 0 7
31957: PUSH
31958: LD_VAR 0 9
31962: PLUS
31963: ST_TO_ADDR
// if k > array then
31964: LD_VAR 0 8
31968: PUSH
31969: LD_VAR 0 1
31973: GREATER
31974: IFFALSE 31984
// k := 1 ;
31976: LD_ADDR_VAR 0 8
31980: PUSH
31981: LD_INT 1
31983: ST_TO_ADDR
// if not k then
31984: LD_VAR 0 8
31988: NOT
31989: IFFALSE 32001
// k := array ;
31991: LD_ADDR_VAR 0 8
31995: PUSH
31996: LD_VAR 0 1
32000: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32001: LD_ADDR_VAR 0 10
32005: PUSH
32006: LD_VAR 0 10
32010: PPUSH
32011: LD_VAR 0 8
32015: PPUSH
32016: LD_VAR 0 1
32020: PUSH
32021: LD_VAR 0 7
32025: ARRAY
32026: PPUSH
32027: CALL_OW 1
32031: ST_TO_ADDR
// end ;
32032: GO 31945
32034: POP
32035: POP
// array := tmp ;
32036: LD_ADDR_VAR 0 1
32040: PUSH
32041: LD_VAR 0 10
32045: ST_TO_ADDR
// end ;
32046: GO 31927
32048: POP
32049: POP
// result := array ;
32050: LD_ADDR_VAR 0 5
32054: PUSH
32055: LD_VAR 0 1
32059: ST_TO_ADDR
// end ;
32060: LD_VAR 0 5
32064: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32065: LD_INT 0
32067: PPUSH
32068: PPUSH
// result := 0 ;
32069: LD_ADDR_VAR 0 3
32073: PUSH
32074: LD_INT 0
32076: ST_TO_ADDR
// if not array or not value in array then
32077: LD_VAR 0 1
32081: NOT
32082: PUSH
32083: LD_VAR 0 2
32087: PUSH
32088: LD_VAR 0 1
32092: IN
32093: NOT
32094: OR
32095: IFFALSE 32099
// exit ;
32097: GO 32153
// for i = 1 to array do
32099: LD_ADDR_VAR 0 4
32103: PUSH
32104: DOUBLE
32105: LD_INT 1
32107: DEC
32108: ST_TO_ADDR
32109: LD_VAR 0 1
32113: PUSH
32114: FOR_TO
32115: IFFALSE 32151
// if value = array [ i ] then
32117: LD_VAR 0 2
32121: PUSH
32122: LD_VAR 0 1
32126: PUSH
32127: LD_VAR 0 4
32131: ARRAY
32132: EQUAL
32133: IFFALSE 32149
// begin result := i ;
32135: LD_ADDR_VAR 0 3
32139: PUSH
32140: LD_VAR 0 4
32144: ST_TO_ADDR
// exit ;
32145: POP
32146: POP
32147: GO 32153
// end ;
32149: GO 32114
32151: POP
32152: POP
// end ;
32153: LD_VAR 0 3
32157: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32158: LD_INT 0
32160: PPUSH
// vc_chassis := chassis ;
32161: LD_ADDR_OWVAR 37
32165: PUSH
32166: LD_VAR 0 1
32170: ST_TO_ADDR
// vc_engine := engine ;
32171: LD_ADDR_OWVAR 39
32175: PUSH
32176: LD_VAR 0 2
32180: ST_TO_ADDR
// vc_control := control ;
32181: LD_ADDR_OWVAR 38
32185: PUSH
32186: LD_VAR 0 3
32190: ST_TO_ADDR
// vc_weapon := weapon ;
32191: LD_ADDR_OWVAR 40
32195: PUSH
32196: LD_VAR 0 4
32200: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32201: LD_ADDR_OWVAR 41
32205: PUSH
32206: LD_VAR 0 5
32210: ST_TO_ADDR
// end ;
32211: LD_VAR 0 6
32215: RET
// export function WantPlant ( unit ) ; var task ; begin
32216: LD_INT 0
32218: PPUSH
32219: PPUSH
// result := false ;
32220: LD_ADDR_VAR 0 2
32224: PUSH
32225: LD_INT 0
32227: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32228: LD_ADDR_VAR 0 3
32232: PUSH
32233: LD_VAR 0 1
32237: PPUSH
32238: CALL_OW 437
32242: ST_TO_ADDR
// if task then
32243: LD_VAR 0 3
32247: IFFALSE 32275
// if task [ 1 ] [ 1 ] = p then
32249: LD_VAR 0 3
32253: PUSH
32254: LD_INT 1
32256: ARRAY
32257: PUSH
32258: LD_INT 1
32260: ARRAY
32261: PUSH
32262: LD_STRING p
32264: EQUAL
32265: IFFALSE 32275
// result := true ;
32267: LD_ADDR_VAR 0 2
32271: PUSH
32272: LD_INT 1
32274: ST_TO_ADDR
// end ;
32275: LD_VAR 0 2
32279: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32280: LD_INT 0
32282: PPUSH
32283: PPUSH
32284: PPUSH
32285: PPUSH
// if pos < 1 then
32286: LD_VAR 0 2
32290: PUSH
32291: LD_INT 1
32293: LESS
32294: IFFALSE 32298
// exit ;
32296: GO 32601
// if pos = 1 then
32298: LD_VAR 0 2
32302: PUSH
32303: LD_INT 1
32305: EQUAL
32306: IFFALSE 32339
// result := Replace ( arr , pos [ 1 ] , value ) else
32308: LD_ADDR_VAR 0 4
32312: PUSH
32313: LD_VAR 0 1
32317: PPUSH
32318: LD_VAR 0 2
32322: PUSH
32323: LD_INT 1
32325: ARRAY
32326: PPUSH
32327: LD_VAR 0 3
32331: PPUSH
32332: CALL_OW 1
32336: ST_TO_ADDR
32337: GO 32601
// begin tmp := arr ;
32339: LD_ADDR_VAR 0 6
32343: PUSH
32344: LD_VAR 0 1
32348: ST_TO_ADDR
// s_arr := [ tmp ] ;
32349: LD_ADDR_VAR 0 7
32353: PUSH
32354: LD_VAR 0 6
32358: PUSH
32359: EMPTY
32360: LIST
32361: ST_TO_ADDR
// for i = 1 to pos - 1 do
32362: LD_ADDR_VAR 0 5
32366: PUSH
32367: DOUBLE
32368: LD_INT 1
32370: DEC
32371: ST_TO_ADDR
32372: LD_VAR 0 2
32376: PUSH
32377: LD_INT 1
32379: MINUS
32380: PUSH
32381: FOR_TO
32382: IFFALSE 32427
// begin tmp := tmp [ pos [ i ] ] ;
32384: LD_ADDR_VAR 0 6
32388: PUSH
32389: LD_VAR 0 6
32393: PUSH
32394: LD_VAR 0 2
32398: PUSH
32399: LD_VAR 0 5
32403: ARRAY
32404: ARRAY
32405: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32406: LD_ADDR_VAR 0 7
32410: PUSH
32411: LD_VAR 0 7
32415: PUSH
32416: LD_VAR 0 6
32420: PUSH
32421: EMPTY
32422: LIST
32423: ADD
32424: ST_TO_ADDR
// end ;
32425: GO 32381
32427: POP
32428: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32429: LD_ADDR_VAR 0 6
32433: PUSH
32434: LD_VAR 0 6
32438: PPUSH
32439: LD_VAR 0 2
32443: PUSH
32444: LD_VAR 0 2
32448: ARRAY
32449: PPUSH
32450: LD_VAR 0 3
32454: PPUSH
32455: CALL_OW 1
32459: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32460: LD_ADDR_VAR 0 7
32464: PUSH
32465: LD_VAR 0 7
32469: PPUSH
32470: LD_VAR 0 7
32474: PPUSH
32475: LD_VAR 0 6
32479: PPUSH
32480: CALL_OW 1
32484: ST_TO_ADDR
// for i = s_arr downto 2 do
32485: LD_ADDR_VAR 0 5
32489: PUSH
32490: DOUBLE
32491: LD_VAR 0 7
32495: INC
32496: ST_TO_ADDR
32497: LD_INT 2
32499: PUSH
32500: FOR_DOWNTO
32501: IFFALSE 32585
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32503: LD_ADDR_VAR 0 6
32507: PUSH
32508: LD_VAR 0 7
32512: PUSH
32513: LD_VAR 0 5
32517: PUSH
32518: LD_INT 1
32520: MINUS
32521: ARRAY
32522: PPUSH
32523: LD_VAR 0 2
32527: PUSH
32528: LD_VAR 0 5
32532: PUSH
32533: LD_INT 1
32535: MINUS
32536: ARRAY
32537: PPUSH
32538: LD_VAR 0 7
32542: PUSH
32543: LD_VAR 0 5
32547: ARRAY
32548: PPUSH
32549: CALL_OW 1
32553: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32554: LD_ADDR_VAR 0 7
32558: PUSH
32559: LD_VAR 0 7
32563: PPUSH
32564: LD_VAR 0 5
32568: PUSH
32569: LD_INT 1
32571: MINUS
32572: PPUSH
32573: LD_VAR 0 6
32577: PPUSH
32578: CALL_OW 1
32582: ST_TO_ADDR
// end ;
32583: GO 32500
32585: POP
32586: POP
// result := s_arr [ 1 ] ;
32587: LD_ADDR_VAR 0 4
32591: PUSH
32592: LD_VAR 0 7
32596: PUSH
32597: LD_INT 1
32599: ARRAY
32600: ST_TO_ADDR
// end ; end ;
32601: LD_VAR 0 4
32605: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32606: LD_INT 0
32608: PPUSH
32609: PPUSH
// if not list then
32610: LD_VAR 0 1
32614: NOT
32615: IFFALSE 32619
// exit ;
32617: GO 32710
// i := list [ pos1 ] ;
32619: LD_ADDR_VAR 0 5
32623: PUSH
32624: LD_VAR 0 1
32628: PUSH
32629: LD_VAR 0 2
32633: ARRAY
32634: ST_TO_ADDR
// if not i then
32635: LD_VAR 0 5
32639: NOT
32640: IFFALSE 32644
// exit ;
32642: GO 32710
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32644: LD_ADDR_VAR 0 1
32648: PUSH
32649: LD_VAR 0 1
32653: PPUSH
32654: LD_VAR 0 2
32658: PPUSH
32659: LD_VAR 0 1
32663: PUSH
32664: LD_VAR 0 3
32668: ARRAY
32669: PPUSH
32670: CALL_OW 1
32674: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32675: LD_ADDR_VAR 0 1
32679: PUSH
32680: LD_VAR 0 1
32684: PPUSH
32685: LD_VAR 0 3
32689: PPUSH
32690: LD_VAR 0 5
32694: PPUSH
32695: CALL_OW 1
32699: ST_TO_ADDR
// result := list ;
32700: LD_ADDR_VAR 0 4
32704: PUSH
32705: LD_VAR 0 1
32709: ST_TO_ADDR
// end ;
32710: LD_VAR 0 4
32714: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32715: LD_INT 0
32717: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32718: LD_ADDR_VAR 0 5
32722: PUSH
32723: LD_VAR 0 1
32727: PPUSH
32728: CALL_OW 250
32732: PPUSH
32733: LD_VAR 0 1
32737: PPUSH
32738: CALL_OW 251
32742: PPUSH
32743: LD_VAR 0 2
32747: PPUSH
32748: LD_VAR 0 3
32752: PPUSH
32753: LD_VAR 0 4
32757: PPUSH
32758: CALL 32768 0 5
32762: ST_TO_ADDR
// end ;
32763: LD_VAR 0 5
32767: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32768: LD_INT 0
32770: PPUSH
32771: PPUSH
32772: PPUSH
32773: PPUSH
// if not list then
32774: LD_VAR 0 3
32778: NOT
32779: IFFALSE 32783
// exit ;
32781: GO 33171
// result := [ ] ;
32783: LD_ADDR_VAR 0 6
32787: PUSH
32788: EMPTY
32789: ST_TO_ADDR
// for i in list do
32790: LD_ADDR_VAR 0 7
32794: PUSH
32795: LD_VAR 0 3
32799: PUSH
32800: FOR_IN
32801: IFFALSE 33003
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32803: LD_ADDR_VAR 0 9
32807: PUSH
32808: LD_VAR 0 7
32812: PPUSH
32813: LD_VAR 0 1
32817: PPUSH
32818: LD_VAR 0 2
32822: PPUSH
32823: CALL_OW 297
32827: ST_TO_ADDR
// if not result then
32828: LD_VAR 0 6
32832: NOT
32833: IFFALSE 32859
// result := [ [ i , tmp ] ] else
32835: LD_ADDR_VAR 0 6
32839: PUSH
32840: LD_VAR 0 7
32844: PUSH
32845: LD_VAR 0 9
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: EMPTY
32855: LIST
32856: ST_TO_ADDR
32857: GO 33001
// begin if result [ result ] [ 2 ] < tmp then
32859: LD_VAR 0 6
32863: PUSH
32864: LD_VAR 0 6
32868: ARRAY
32869: PUSH
32870: LD_INT 2
32872: ARRAY
32873: PUSH
32874: LD_VAR 0 9
32878: LESS
32879: IFFALSE 32921
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32881: LD_ADDR_VAR 0 6
32885: PUSH
32886: LD_VAR 0 6
32890: PPUSH
32891: LD_VAR 0 6
32895: PUSH
32896: LD_INT 1
32898: PLUS
32899: PPUSH
32900: LD_VAR 0 7
32904: PUSH
32905: LD_VAR 0 9
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PPUSH
32914: CALL_OW 2
32918: ST_TO_ADDR
32919: GO 33001
// for j = 1 to result do
32921: LD_ADDR_VAR 0 8
32925: PUSH
32926: DOUBLE
32927: LD_INT 1
32929: DEC
32930: ST_TO_ADDR
32931: LD_VAR 0 6
32935: PUSH
32936: FOR_TO
32937: IFFALSE 32999
// begin if tmp < result [ j ] [ 2 ] then
32939: LD_VAR 0 9
32943: PUSH
32944: LD_VAR 0 6
32948: PUSH
32949: LD_VAR 0 8
32953: ARRAY
32954: PUSH
32955: LD_INT 2
32957: ARRAY
32958: LESS
32959: IFFALSE 32997
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32961: LD_ADDR_VAR 0 6
32965: PUSH
32966: LD_VAR 0 6
32970: PPUSH
32971: LD_VAR 0 8
32975: PPUSH
32976: LD_VAR 0 7
32980: PUSH
32981: LD_VAR 0 9
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PPUSH
32990: CALL_OW 2
32994: ST_TO_ADDR
// break ;
32995: GO 32999
// end ; end ;
32997: GO 32936
32999: POP
33000: POP
// end ; end ;
33001: GO 32800
33003: POP
33004: POP
// if result and not asc then
33005: LD_VAR 0 6
33009: PUSH
33010: LD_VAR 0 4
33014: NOT
33015: AND
33016: IFFALSE 33091
// begin tmp := result ;
33018: LD_ADDR_VAR 0 9
33022: PUSH
33023: LD_VAR 0 6
33027: ST_TO_ADDR
// for i = tmp downto 1 do
33028: LD_ADDR_VAR 0 7
33032: PUSH
33033: DOUBLE
33034: LD_VAR 0 9
33038: INC
33039: ST_TO_ADDR
33040: LD_INT 1
33042: PUSH
33043: FOR_DOWNTO
33044: IFFALSE 33089
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33046: LD_ADDR_VAR 0 6
33050: PUSH
33051: LD_VAR 0 6
33055: PPUSH
33056: LD_VAR 0 9
33060: PUSH
33061: LD_VAR 0 7
33065: MINUS
33066: PUSH
33067: LD_INT 1
33069: PLUS
33070: PPUSH
33071: LD_VAR 0 9
33075: PUSH
33076: LD_VAR 0 7
33080: ARRAY
33081: PPUSH
33082: CALL_OW 1
33086: ST_TO_ADDR
33087: GO 33043
33089: POP
33090: POP
// end ; tmp := [ ] ;
33091: LD_ADDR_VAR 0 9
33095: PUSH
33096: EMPTY
33097: ST_TO_ADDR
// if mode then
33098: LD_VAR 0 5
33102: IFFALSE 33171
// begin for i = 1 to result do
33104: LD_ADDR_VAR 0 7
33108: PUSH
33109: DOUBLE
33110: LD_INT 1
33112: DEC
33113: ST_TO_ADDR
33114: LD_VAR 0 6
33118: PUSH
33119: FOR_TO
33120: IFFALSE 33159
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33122: LD_ADDR_VAR 0 9
33126: PUSH
33127: LD_VAR 0 9
33131: PPUSH
33132: LD_VAR 0 7
33136: PPUSH
33137: LD_VAR 0 6
33141: PUSH
33142: LD_VAR 0 7
33146: ARRAY
33147: PUSH
33148: LD_INT 1
33150: ARRAY
33151: PPUSH
33152: CALL_OW 1
33156: ST_TO_ADDR
33157: GO 33119
33159: POP
33160: POP
// result := tmp ;
33161: LD_ADDR_VAR 0 6
33165: PUSH
33166: LD_VAR 0 9
33170: ST_TO_ADDR
// end ; end ;
33171: LD_VAR 0 6
33175: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33176: LD_INT 0
33178: PPUSH
33179: PPUSH
33180: PPUSH
33181: PPUSH
33182: PPUSH
33183: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33184: LD_ADDR_VAR 0 5
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: EMPTY
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: ST_TO_ADDR
// if not x or not y then
33206: LD_VAR 0 2
33210: NOT
33211: PUSH
33212: LD_VAR 0 3
33216: NOT
33217: OR
33218: IFFALSE 33222
// exit ;
33220: GO 34872
// if not range then
33222: LD_VAR 0 4
33226: NOT
33227: IFFALSE 33237
// range := 10 ;
33229: LD_ADDR_VAR 0 4
33233: PUSH
33234: LD_INT 10
33236: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33237: LD_ADDR_VAR 0 8
33241: PUSH
33242: LD_INT 81
33244: PUSH
33245: LD_VAR 0 1
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 92
33256: PUSH
33257: LD_VAR 0 2
33261: PUSH
33262: LD_VAR 0 3
33266: PUSH
33267: LD_VAR 0 4
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 3
33280: PUSH
33281: LD_INT 21
33283: PUSH
33284: LD_INT 3
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: LIST
33299: PPUSH
33300: CALL_OW 69
33304: ST_TO_ADDR
// if not tmp then
33305: LD_VAR 0 8
33309: NOT
33310: IFFALSE 33314
// exit ;
33312: GO 34872
// for i in tmp do
33314: LD_ADDR_VAR 0 6
33318: PUSH
33319: LD_VAR 0 8
33323: PUSH
33324: FOR_IN
33325: IFFALSE 34847
// begin points := [ 0 , 0 , 0 ] ;
33327: LD_ADDR_VAR 0 9
33331: PUSH
33332: LD_INT 0
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: ST_TO_ADDR
// bpoints := 1 ;
33346: LD_ADDR_VAR 0 10
33350: PUSH
33351: LD_INT 1
33353: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33354: LD_VAR 0 6
33358: PPUSH
33359: CALL_OW 247
33363: PUSH
33364: LD_INT 1
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33372
33370: GO 33950
33372: POP
// begin if GetClass ( i ) = 1 then
33373: LD_VAR 0 6
33377: PPUSH
33378: CALL_OW 257
33382: PUSH
33383: LD_INT 1
33385: EQUAL
33386: IFFALSE 33407
// points := [ 10 , 5 , 3 ] ;
33388: LD_ADDR_VAR 0 9
33392: PUSH
33393: LD_INT 10
33395: PUSH
33396: LD_INT 5
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: LIST
33406: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33407: LD_VAR 0 6
33411: PPUSH
33412: CALL_OW 257
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: LD_INT 3
33422: PUSH
33423: LD_INT 4
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: LIST
33430: IN
33431: IFFALSE 33452
// points := [ 3 , 2 , 1 ] ;
33433: LD_ADDR_VAR 0 9
33437: PUSH
33438: LD_INT 3
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33452: LD_VAR 0 6
33456: PPUSH
33457: CALL_OW 257
33461: PUSH
33462: LD_INT 5
33464: EQUAL
33465: IFFALSE 33486
// points := [ 130 , 5 , 2 ] ;
33467: LD_ADDR_VAR 0 9
33471: PUSH
33472: LD_INT 130
33474: PUSH
33475: LD_INT 5
33477: PUSH
33478: LD_INT 2
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: LIST
33485: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33486: LD_VAR 0 6
33490: PPUSH
33491: CALL_OW 257
33495: PUSH
33496: LD_INT 8
33498: EQUAL
33499: IFFALSE 33520
// points := [ 35 , 35 , 30 ] ;
33501: LD_ADDR_VAR 0 9
33505: PUSH
33506: LD_INT 35
33508: PUSH
33509: LD_INT 35
33511: PUSH
33512: LD_INT 30
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33520: LD_VAR 0 6
33524: PPUSH
33525: CALL_OW 257
33529: PUSH
33530: LD_INT 9
33532: EQUAL
33533: IFFALSE 33554
// points := [ 20 , 55 , 40 ] ;
33535: LD_ADDR_VAR 0 9
33539: PUSH
33540: LD_INT 20
33542: PUSH
33543: LD_INT 55
33545: PUSH
33546: LD_INT 40
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33554: LD_VAR 0 6
33558: PPUSH
33559: CALL_OW 257
33563: PUSH
33564: LD_INT 12
33566: PUSH
33567: LD_INT 16
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: IN
33574: IFFALSE 33595
// points := [ 5 , 3 , 2 ] ;
33576: LD_ADDR_VAR 0 9
33580: PUSH
33581: LD_INT 5
33583: PUSH
33584: LD_INT 3
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33595: LD_VAR 0 6
33599: PPUSH
33600: CALL_OW 257
33604: PUSH
33605: LD_INT 17
33607: EQUAL
33608: IFFALSE 33629
// points := [ 100 , 50 , 75 ] ;
33610: LD_ADDR_VAR 0 9
33614: PUSH
33615: LD_INT 100
33617: PUSH
33618: LD_INT 50
33620: PUSH
33621: LD_INT 75
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33629: LD_VAR 0 6
33633: PPUSH
33634: CALL_OW 257
33638: PUSH
33639: LD_INT 15
33641: EQUAL
33642: IFFALSE 33663
// points := [ 10 , 5 , 3 ] ;
33644: LD_ADDR_VAR 0 9
33648: PUSH
33649: LD_INT 10
33651: PUSH
33652: LD_INT 5
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33663: LD_VAR 0 6
33667: PPUSH
33668: CALL_OW 257
33672: PUSH
33673: LD_INT 14
33675: EQUAL
33676: IFFALSE 33697
// points := [ 10 , 0 , 0 ] ;
33678: LD_ADDR_VAR 0 9
33682: PUSH
33683: LD_INT 10
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33697: LD_VAR 0 6
33701: PPUSH
33702: CALL_OW 257
33706: PUSH
33707: LD_INT 11
33709: EQUAL
33710: IFFALSE 33731
// points := [ 30 , 10 , 5 ] ;
33712: LD_ADDR_VAR 0 9
33716: PUSH
33717: LD_INT 30
33719: PUSH
33720: LD_INT 10
33722: PUSH
33723: LD_INT 5
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: LIST
33730: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33731: LD_VAR 0 1
33735: PPUSH
33736: LD_INT 5
33738: PPUSH
33739: CALL_OW 321
33743: PUSH
33744: LD_INT 2
33746: EQUAL
33747: IFFALSE 33764
// bpoints := bpoints * 1.8 ;
33749: LD_ADDR_VAR 0 10
33753: PUSH
33754: LD_VAR 0 10
33758: PUSH
33759: LD_REAL  1.80000000000000E+0000
33762: MUL
33763: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33764: LD_VAR 0 6
33768: PPUSH
33769: CALL_OW 257
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 3
33782: PUSH
33783: LD_INT 4
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: IN
33792: PUSH
33793: LD_VAR 0 1
33797: PPUSH
33798: LD_INT 51
33800: PPUSH
33801: CALL_OW 321
33805: PUSH
33806: LD_INT 2
33808: EQUAL
33809: AND
33810: IFFALSE 33827
// bpoints := bpoints * 1.2 ;
33812: LD_ADDR_VAR 0 10
33816: PUSH
33817: LD_VAR 0 10
33821: PUSH
33822: LD_REAL  1.20000000000000E+0000
33825: MUL
33826: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33827: LD_VAR 0 6
33831: PPUSH
33832: CALL_OW 257
33836: PUSH
33837: LD_INT 5
33839: PUSH
33840: LD_INT 7
33842: PUSH
33843: LD_INT 9
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: IN
33851: PUSH
33852: LD_VAR 0 1
33856: PPUSH
33857: LD_INT 52
33859: PPUSH
33860: CALL_OW 321
33864: PUSH
33865: LD_INT 2
33867: EQUAL
33868: AND
33869: IFFALSE 33886
// bpoints := bpoints * 1.5 ;
33871: LD_ADDR_VAR 0 10
33875: PUSH
33876: LD_VAR 0 10
33880: PUSH
33881: LD_REAL  1.50000000000000E+0000
33884: MUL
33885: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33886: LD_VAR 0 1
33890: PPUSH
33891: LD_INT 66
33893: PPUSH
33894: CALL_OW 321
33898: PUSH
33899: LD_INT 2
33901: EQUAL
33902: IFFALSE 33919
// bpoints := bpoints * 1.1 ;
33904: LD_ADDR_VAR 0 10
33908: PUSH
33909: LD_VAR 0 10
33913: PUSH
33914: LD_REAL  1.10000000000000E+0000
33917: MUL
33918: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33919: LD_ADDR_VAR 0 10
33923: PUSH
33924: LD_VAR 0 10
33928: PUSH
33929: LD_VAR 0 6
33933: PPUSH
33934: LD_INT 1
33936: PPUSH
33937: CALL_OW 259
33941: PUSH
33942: LD_REAL  1.15000000000000E+0000
33945: MUL
33946: MUL
33947: ST_TO_ADDR
// end ; unit_vehicle :
33948: GO 34776
33950: LD_INT 2
33952: DOUBLE
33953: EQUAL
33954: IFTRUE 33958
33956: GO 34764
33958: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33959: LD_VAR 0 6
33963: PPUSH
33964: CALL_OW 264
33968: PUSH
33969: LD_INT 2
33971: PUSH
33972: LD_INT 42
33974: PUSH
33975: LD_INT 24
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: IN
33983: IFFALSE 34004
// points := [ 25 , 5 , 3 ] ;
33985: LD_ADDR_VAR 0 9
33989: PUSH
33990: LD_INT 25
33992: PUSH
33993: LD_INT 5
33995: PUSH
33996: LD_INT 3
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34004: LD_VAR 0 6
34008: PPUSH
34009: CALL_OW 264
34013: PUSH
34014: LD_INT 4
34016: PUSH
34017: LD_INT 43
34019: PUSH
34020: LD_INT 25
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: IN
34028: IFFALSE 34049
// points := [ 40 , 15 , 5 ] ;
34030: LD_ADDR_VAR 0 9
34034: PUSH
34035: LD_INT 40
34037: PUSH
34038: LD_INT 15
34040: PUSH
34041: LD_INT 5
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34049: LD_VAR 0 6
34053: PPUSH
34054: CALL_OW 264
34058: PUSH
34059: LD_INT 3
34061: PUSH
34062: LD_INT 23
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: IN
34069: IFFALSE 34090
// points := [ 7 , 25 , 8 ] ;
34071: LD_ADDR_VAR 0 9
34075: PUSH
34076: LD_INT 7
34078: PUSH
34079: LD_INT 25
34081: PUSH
34082: LD_INT 8
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34090: LD_VAR 0 6
34094: PPUSH
34095: CALL_OW 264
34099: PUSH
34100: LD_INT 5
34102: PUSH
34103: LD_INT 27
34105: PUSH
34106: LD_INT 44
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: IN
34114: IFFALSE 34135
// points := [ 14 , 50 , 16 ] ;
34116: LD_ADDR_VAR 0 9
34120: PUSH
34121: LD_INT 14
34123: PUSH
34124: LD_INT 50
34126: PUSH
34127: LD_INT 16
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34135: LD_VAR 0 6
34139: PPUSH
34140: CALL_OW 264
34144: PUSH
34145: LD_INT 6
34147: PUSH
34148: LD_INT 46
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: IN
34155: IFFALSE 34176
// points := [ 32 , 120 , 70 ] ;
34157: LD_ADDR_VAR 0 9
34161: PUSH
34162: LD_INT 32
34164: PUSH
34165: LD_INT 120
34167: PUSH
34168: LD_INT 70
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34176: LD_VAR 0 6
34180: PPUSH
34181: CALL_OW 264
34185: PUSH
34186: LD_INT 7
34188: PUSH
34189: LD_INT 28
34191: PUSH
34192: LD_INT 45
34194: PUSH
34195: LD_INT 92
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: IN
34204: IFFALSE 34225
// points := [ 35 , 20 , 45 ] ;
34206: LD_ADDR_VAR 0 9
34210: PUSH
34211: LD_INT 35
34213: PUSH
34214: LD_INT 20
34216: PUSH
34217: LD_INT 45
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34225: LD_VAR 0 6
34229: PPUSH
34230: CALL_OW 264
34234: PUSH
34235: LD_INT 47
34237: PUSH
34238: EMPTY
34239: LIST
34240: IN
34241: IFFALSE 34262
// points := [ 67 , 45 , 75 ] ;
34243: LD_ADDR_VAR 0 9
34247: PUSH
34248: LD_INT 67
34250: PUSH
34251: LD_INT 45
34253: PUSH
34254: LD_INT 75
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34262: LD_VAR 0 6
34266: PPUSH
34267: CALL_OW 264
34271: PUSH
34272: LD_INT 26
34274: PUSH
34275: EMPTY
34276: LIST
34277: IN
34278: IFFALSE 34299
// points := [ 120 , 30 , 80 ] ;
34280: LD_ADDR_VAR 0 9
34284: PUSH
34285: LD_INT 120
34287: PUSH
34288: LD_INT 30
34290: PUSH
34291: LD_INT 80
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34299: LD_VAR 0 6
34303: PPUSH
34304: CALL_OW 264
34308: PUSH
34309: LD_INT 22
34311: PUSH
34312: EMPTY
34313: LIST
34314: IN
34315: IFFALSE 34336
// points := [ 40 , 1 , 1 ] ;
34317: LD_ADDR_VAR 0 9
34321: PUSH
34322: LD_INT 40
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34336: LD_VAR 0 6
34340: PPUSH
34341: CALL_OW 264
34345: PUSH
34346: LD_INT 29
34348: PUSH
34349: EMPTY
34350: LIST
34351: IN
34352: IFFALSE 34373
// points := [ 70 , 200 , 400 ] ;
34354: LD_ADDR_VAR 0 9
34358: PUSH
34359: LD_INT 70
34361: PUSH
34362: LD_INT 200
34364: PUSH
34365: LD_INT 400
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: LIST
34372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34373: LD_VAR 0 6
34377: PPUSH
34378: CALL_OW 264
34382: PUSH
34383: LD_INT 14
34385: PUSH
34386: LD_INT 53
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: IN
34393: IFFALSE 34414
// points := [ 40 , 10 , 20 ] ;
34395: LD_ADDR_VAR 0 9
34399: PUSH
34400: LD_INT 40
34402: PUSH
34403: LD_INT 10
34405: PUSH
34406: LD_INT 20
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34414: LD_VAR 0 6
34418: PPUSH
34419: CALL_OW 264
34423: PUSH
34424: LD_INT 9
34426: PUSH
34427: EMPTY
34428: LIST
34429: IN
34430: IFFALSE 34451
// points := [ 5 , 70 , 20 ] ;
34432: LD_ADDR_VAR 0 9
34436: PUSH
34437: LD_INT 5
34439: PUSH
34440: LD_INT 70
34442: PUSH
34443: LD_INT 20
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34451: LD_VAR 0 6
34455: PPUSH
34456: CALL_OW 264
34460: PUSH
34461: LD_INT 10
34463: PUSH
34464: EMPTY
34465: LIST
34466: IN
34467: IFFALSE 34488
// points := [ 35 , 110 , 70 ] ;
34469: LD_ADDR_VAR 0 9
34473: PUSH
34474: LD_INT 35
34476: PUSH
34477: LD_INT 110
34479: PUSH
34480: LD_INT 70
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34488: LD_VAR 0 6
34492: PPUSH
34493: CALL_OW 265
34497: PUSH
34498: LD_INT 25
34500: EQUAL
34501: IFFALSE 34522
// points := [ 80 , 65 , 100 ] ;
34503: LD_ADDR_VAR 0 9
34507: PUSH
34508: LD_INT 80
34510: PUSH
34511: LD_INT 65
34513: PUSH
34514: LD_INT 100
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34522: LD_VAR 0 6
34526: PPUSH
34527: CALL_OW 263
34531: PUSH
34532: LD_INT 1
34534: EQUAL
34535: IFFALSE 34570
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34537: LD_ADDR_VAR 0 10
34541: PUSH
34542: LD_VAR 0 10
34546: PUSH
34547: LD_VAR 0 6
34551: PPUSH
34552: CALL_OW 311
34556: PPUSH
34557: LD_INT 3
34559: PPUSH
34560: CALL_OW 259
34564: PUSH
34565: LD_INT 4
34567: MUL
34568: MUL
34569: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34570: LD_VAR 0 6
34574: PPUSH
34575: CALL_OW 263
34579: PUSH
34580: LD_INT 2
34582: EQUAL
34583: IFFALSE 34634
// begin j := IsControledBy ( i ) ;
34585: LD_ADDR_VAR 0 7
34589: PUSH
34590: LD_VAR 0 6
34594: PPUSH
34595: CALL_OW 312
34599: ST_TO_ADDR
// if j then
34600: LD_VAR 0 7
34604: IFFALSE 34634
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34606: LD_ADDR_VAR 0 10
34610: PUSH
34611: LD_VAR 0 10
34615: PUSH
34616: LD_VAR 0 7
34620: PPUSH
34621: LD_INT 3
34623: PPUSH
34624: CALL_OW 259
34628: PUSH
34629: LD_INT 3
34631: MUL
34632: MUL
34633: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34634: LD_VAR 0 6
34638: PPUSH
34639: CALL_OW 264
34643: PUSH
34644: LD_INT 5
34646: PUSH
34647: LD_INT 6
34649: PUSH
34650: LD_INT 46
34652: PUSH
34653: LD_INT 44
34655: PUSH
34656: LD_INT 47
34658: PUSH
34659: LD_INT 45
34661: PUSH
34662: LD_INT 28
34664: PUSH
34665: LD_INT 7
34667: PUSH
34668: LD_INT 27
34670: PUSH
34671: LD_INT 29
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: IN
34686: PUSH
34687: LD_VAR 0 1
34691: PPUSH
34692: LD_INT 52
34694: PPUSH
34695: CALL_OW 321
34699: PUSH
34700: LD_INT 2
34702: EQUAL
34703: AND
34704: IFFALSE 34721
// bpoints := bpoints * 1.2 ;
34706: LD_ADDR_VAR 0 10
34710: PUSH
34711: LD_VAR 0 10
34715: PUSH
34716: LD_REAL  1.20000000000000E+0000
34719: MUL
34720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34721: LD_VAR 0 6
34725: PPUSH
34726: CALL_OW 264
34730: PUSH
34731: LD_INT 6
34733: PUSH
34734: LD_INT 46
34736: PUSH
34737: LD_INT 47
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: IN
34745: IFFALSE 34762
// bpoints := bpoints * 1.2 ;
34747: LD_ADDR_VAR 0 10
34751: PUSH
34752: LD_VAR 0 10
34756: PUSH
34757: LD_REAL  1.20000000000000E+0000
34760: MUL
34761: ST_TO_ADDR
// end ; unit_building :
34762: GO 34776
34764: LD_INT 3
34766: DOUBLE
34767: EQUAL
34768: IFTRUE 34772
34770: GO 34775
34772: POP
// ; end ;
34773: GO 34776
34775: POP
// for j = 1 to 3 do
34776: LD_ADDR_VAR 0 7
34780: PUSH
34781: DOUBLE
34782: LD_INT 1
34784: DEC
34785: ST_TO_ADDR
34786: LD_INT 3
34788: PUSH
34789: FOR_TO
34790: IFFALSE 34843
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34792: LD_ADDR_VAR 0 5
34796: PUSH
34797: LD_VAR 0 5
34801: PPUSH
34802: LD_VAR 0 7
34806: PPUSH
34807: LD_VAR 0 5
34811: PUSH
34812: LD_VAR 0 7
34816: ARRAY
34817: PUSH
34818: LD_VAR 0 9
34822: PUSH
34823: LD_VAR 0 7
34827: ARRAY
34828: PUSH
34829: LD_VAR 0 10
34833: MUL
34834: PLUS
34835: PPUSH
34836: CALL_OW 1
34840: ST_TO_ADDR
34841: GO 34789
34843: POP
34844: POP
// end ;
34845: GO 33324
34847: POP
34848: POP
// result := Replace ( result , 4 , tmp ) ;
34849: LD_ADDR_VAR 0 5
34853: PUSH
34854: LD_VAR 0 5
34858: PPUSH
34859: LD_INT 4
34861: PPUSH
34862: LD_VAR 0 8
34866: PPUSH
34867: CALL_OW 1
34871: ST_TO_ADDR
// end ;
34872: LD_VAR 0 5
34876: RET
// export function DangerAtRange ( unit , range ) ; begin
34877: LD_INT 0
34879: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34880: LD_ADDR_VAR 0 3
34884: PUSH
34885: LD_VAR 0 1
34889: PPUSH
34890: CALL_OW 255
34894: PPUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL_OW 250
34904: PPUSH
34905: LD_VAR 0 1
34909: PPUSH
34910: CALL_OW 251
34914: PPUSH
34915: LD_VAR 0 2
34919: PPUSH
34920: CALL 33176 0 4
34924: ST_TO_ADDR
// end ;
34925: LD_VAR 0 3
34929: RET
// export function DangerInArea ( side , area ) ; begin
34930: LD_INT 0
34932: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34933: LD_ADDR_VAR 0 3
34937: PUSH
34938: LD_VAR 0 2
34942: PPUSH
34943: LD_INT 81
34945: PUSH
34946: LD_VAR 0 1
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PPUSH
34955: CALL_OW 70
34959: ST_TO_ADDR
// end ;
34960: LD_VAR 0 3
34964: RET
// export function IsExtension ( b ) ; begin
34965: LD_INT 0
34967: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34968: LD_ADDR_VAR 0 2
34972: PUSH
34973: LD_VAR 0 1
34977: PUSH
34978: LD_INT 23
34980: PUSH
34981: LD_INT 20
34983: PUSH
34984: LD_INT 22
34986: PUSH
34987: LD_INT 17
34989: PUSH
34990: LD_INT 24
34992: PUSH
34993: LD_INT 21
34995: PUSH
34996: LD_INT 19
34998: PUSH
34999: LD_INT 16
35001: PUSH
35002: LD_INT 25
35004: PUSH
35005: LD_INT 18
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: IN
35020: ST_TO_ADDR
// end ;
35021: LD_VAR 0 2
35025: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35026: LD_INT 0
35028: PPUSH
35029: PPUSH
35030: PPUSH
// result := [ ] ;
35031: LD_ADDR_VAR 0 4
35035: PUSH
35036: EMPTY
35037: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35038: LD_ADDR_VAR 0 5
35042: PUSH
35043: LD_VAR 0 2
35047: PPUSH
35048: LD_INT 21
35050: PUSH
35051: LD_INT 3
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PPUSH
35058: CALL_OW 70
35062: ST_TO_ADDR
// if not tmp then
35063: LD_VAR 0 5
35067: NOT
35068: IFFALSE 35072
// exit ;
35070: GO 35136
// if checkLink then
35072: LD_VAR 0 3
35076: IFFALSE 35126
// begin for i in tmp do
35078: LD_ADDR_VAR 0 6
35082: PUSH
35083: LD_VAR 0 5
35087: PUSH
35088: FOR_IN
35089: IFFALSE 35124
// if GetBase ( i ) <> base then
35091: LD_VAR 0 6
35095: PPUSH
35096: CALL_OW 274
35100: PUSH
35101: LD_VAR 0 1
35105: NONEQUAL
35106: IFFALSE 35122
// ComLinkToBase ( base , i ) ;
35108: LD_VAR 0 1
35112: PPUSH
35113: LD_VAR 0 6
35117: PPUSH
35118: CALL_OW 169
35122: GO 35088
35124: POP
35125: POP
// end ; result := tmp ;
35126: LD_ADDR_VAR 0 4
35130: PUSH
35131: LD_VAR 0 5
35135: ST_TO_ADDR
// end ;
35136: LD_VAR 0 4
35140: RET
// export function ComComplete ( units , b ) ; var i ; begin
35141: LD_INT 0
35143: PPUSH
35144: PPUSH
// if not units then
35145: LD_VAR 0 1
35149: NOT
35150: IFFALSE 35154
// exit ;
35152: GO 35244
// for i in units do
35154: LD_ADDR_VAR 0 4
35158: PUSH
35159: LD_VAR 0 1
35163: PUSH
35164: FOR_IN
35165: IFFALSE 35242
// if BuildingStatus ( b ) = bs_build then
35167: LD_VAR 0 2
35171: PPUSH
35172: CALL_OW 461
35176: PUSH
35177: LD_INT 1
35179: EQUAL
35180: IFFALSE 35240
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35182: LD_VAR 0 4
35186: PPUSH
35187: LD_STRING h
35189: PUSH
35190: LD_VAR 0 2
35194: PPUSH
35195: CALL_OW 250
35199: PUSH
35200: LD_VAR 0 2
35204: PPUSH
35205: CALL_OW 251
35209: PUSH
35210: LD_VAR 0 2
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: PUSH
35233: EMPTY
35234: LIST
35235: PPUSH
35236: CALL_OW 446
35240: GO 35164
35242: POP
35243: POP
// end ;
35244: LD_VAR 0 3
35248: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35249: LD_INT 0
35251: PPUSH
35252: PPUSH
35253: PPUSH
35254: PPUSH
35255: PPUSH
35256: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35257: LD_VAR 0 1
35261: NOT
35262: PUSH
35263: LD_VAR 0 1
35267: PPUSH
35268: CALL_OW 263
35272: PUSH
35273: LD_INT 2
35275: NONEQUAL
35276: OR
35277: IFFALSE 35281
// exit ;
35279: GO 35597
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35281: LD_ADDR_VAR 0 6
35285: PUSH
35286: LD_INT 22
35288: PUSH
35289: LD_VAR 0 1
35293: PPUSH
35294: CALL_OW 255
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 30
35308: PUSH
35309: LD_INT 36
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 34
35318: PUSH
35319: LD_INT 31
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: LIST
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PPUSH
35335: CALL_OW 69
35339: ST_TO_ADDR
// if not tmp then
35340: LD_VAR 0 6
35344: NOT
35345: IFFALSE 35349
// exit ;
35347: GO 35597
// result := [ ] ;
35349: LD_ADDR_VAR 0 2
35353: PUSH
35354: EMPTY
35355: ST_TO_ADDR
// for i in tmp do
35356: LD_ADDR_VAR 0 3
35360: PUSH
35361: LD_VAR 0 6
35365: PUSH
35366: FOR_IN
35367: IFFALSE 35438
// begin t := UnitsInside ( i ) ;
35369: LD_ADDR_VAR 0 4
35373: PUSH
35374: LD_VAR 0 3
35378: PPUSH
35379: CALL_OW 313
35383: ST_TO_ADDR
// if t then
35384: LD_VAR 0 4
35388: IFFALSE 35436
// for j in t do
35390: LD_ADDR_VAR 0 7
35394: PUSH
35395: LD_VAR 0 4
35399: PUSH
35400: FOR_IN
35401: IFFALSE 35434
// result := Replace ( result , result + 1 , j ) ;
35403: LD_ADDR_VAR 0 2
35407: PUSH
35408: LD_VAR 0 2
35412: PPUSH
35413: LD_VAR 0 2
35417: PUSH
35418: LD_INT 1
35420: PLUS
35421: PPUSH
35422: LD_VAR 0 7
35426: PPUSH
35427: CALL_OW 1
35431: ST_TO_ADDR
35432: GO 35400
35434: POP
35435: POP
// end ;
35436: GO 35366
35438: POP
35439: POP
// if not result then
35440: LD_VAR 0 2
35444: NOT
35445: IFFALSE 35449
// exit ;
35447: GO 35597
// mech := result [ 1 ] ;
35449: LD_ADDR_VAR 0 5
35453: PUSH
35454: LD_VAR 0 2
35458: PUSH
35459: LD_INT 1
35461: ARRAY
35462: ST_TO_ADDR
// if result > 1 then
35463: LD_VAR 0 2
35467: PUSH
35468: LD_INT 1
35470: GREATER
35471: IFFALSE 35583
// begin for i = 2 to result do
35473: LD_ADDR_VAR 0 3
35477: PUSH
35478: DOUBLE
35479: LD_INT 2
35481: DEC
35482: ST_TO_ADDR
35483: LD_VAR 0 2
35487: PUSH
35488: FOR_TO
35489: IFFALSE 35581
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35491: LD_ADDR_VAR 0 4
35495: PUSH
35496: LD_VAR 0 2
35500: PUSH
35501: LD_VAR 0 3
35505: ARRAY
35506: PPUSH
35507: LD_INT 3
35509: PPUSH
35510: CALL_OW 259
35514: PUSH
35515: LD_VAR 0 2
35519: PUSH
35520: LD_VAR 0 3
35524: ARRAY
35525: PPUSH
35526: CALL_OW 432
35530: MINUS
35531: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35532: LD_VAR 0 4
35536: PUSH
35537: LD_VAR 0 5
35541: PPUSH
35542: LD_INT 3
35544: PPUSH
35545: CALL_OW 259
35549: PUSH
35550: LD_VAR 0 5
35554: PPUSH
35555: CALL_OW 432
35559: MINUS
35560: GREATEREQUAL
35561: IFFALSE 35579
// mech := result [ i ] ;
35563: LD_ADDR_VAR 0 5
35567: PUSH
35568: LD_VAR 0 2
35572: PUSH
35573: LD_VAR 0 3
35577: ARRAY
35578: ST_TO_ADDR
// end ;
35579: GO 35488
35581: POP
35582: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35583: LD_VAR 0 1
35587: PPUSH
35588: LD_VAR 0 5
35592: PPUSH
35593: CALL_OW 135
// end ;
35597: LD_VAR 0 2
35601: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35602: LD_INT 0
35604: PPUSH
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
35613: PPUSH
35614: PPUSH
35615: PPUSH
35616: PPUSH
// result := [ ] ;
35617: LD_ADDR_VAR 0 7
35621: PUSH
35622: EMPTY
35623: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35624: LD_VAR 0 1
35628: PPUSH
35629: CALL_OW 266
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: IN
35644: NOT
35645: IFFALSE 35649
// exit ;
35647: GO 37283
// if name then
35649: LD_VAR 0 3
35653: IFFALSE 35669
// SetBName ( base_dep , name ) ;
35655: LD_VAR 0 1
35659: PPUSH
35660: LD_VAR 0 3
35664: PPUSH
35665: CALL_OW 500
// base := GetBase ( base_dep ) ;
35669: LD_ADDR_VAR 0 15
35673: PUSH
35674: LD_VAR 0 1
35678: PPUSH
35679: CALL_OW 274
35683: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35684: LD_ADDR_VAR 0 16
35688: PUSH
35689: LD_VAR 0 1
35693: PPUSH
35694: CALL_OW 255
35698: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35699: LD_ADDR_VAR 0 17
35703: PUSH
35704: LD_VAR 0 1
35708: PPUSH
35709: CALL_OW 248
35713: ST_TO_ADDR
// if sources then
35714: LD_VAR 0 5
35718: IFFALSE 35765
// for i = 1 to 3 do
35720: LD_ADDR_VAR 0 8
35724: PUSH
35725: DOUBLE
35726: LD_INT 1
35728: DEC
35729: ST_TO_ADDR
35730: LD_INT 3
35732: PUSH
35733: FOR_TO
35734: IFFALSE 35763
// AddResourceType ( base , i , sources [ i ] ) ;
35736: LD_VAR 0 15
35740: PPUSH
35741: LD_VAR 0 8
35745: PPUSH
35746: LD_VAR 0 5
35750: PUSH
35751: LD_VAR 0 8
35755: ARRAY
35756: PPUSH
35757: CALL_OW 276
35761: GO 35733
35763: POP
35764: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35765: LD_ADDR_VAR 0 18
35769: PUSH
35770: LD_VAR 0 15
35774: PPUSH
35775: LD_VAR 0 2
35779: PPUSH
35780: LD_INT 1
35782: PPUSH
35783: CALL 35026 0 3
35787: ST_TO_ADDR
// InitHc ;
35788: CALL_OW 19
// InitUc ;
35792: CALL_OW 18
// uc_side := side ;
35796: LD_ADDR_OWVAR 20
35800: PUSH
35801: LD_VAR 0 16
35805: ST_TO_ADDR
// uc_nation := nation ;
35806: LD_ADDR_OWVAR 21
35810: PUSH
35811: LD_VAR 0 17
35815: ST_TO_ADDR
// if buildings then
35816: LD_VAR 0 18
35820: IFFALSE 37142
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35822: LD_ADDR_VAR 0 19
35826: PUSH
35827: LD_VAR 0 18
35831: PPUSH
35832: LD_INT 2
35834: PUSH
35835: LD_INT 30
35837: PUSH
35838: LD_INT 29
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 30
35847: PUSH
35848: LD_INT 30
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: PPUSH
35860: CALL_OW 72
35864: ST_TO_ADDR
// if tmp then
35865: LD_VAR 0 19
35869: IFFALSE 35917
// for i in tmp do
35871: LD_ADDR_VAR 0 8
35875: PUSH
35876: LD_VAR 0 19
35880: PUSH
35881: FOR_IN
35882: IFFALSE 35915
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35884: LD_VAR 0 8
35888: PPUSH
35889: CALL_OW 250
35893: PPUSH
35894: LD_VAR 0 8
35898: PPUSH
35899: CALL_OW 251
35903: PPUSH
35904: LD_VAR 0 16
35908: PPUSH
35909: CALL_OW 441
35913: GO 35881
35915: POP
35916: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35917: LD_VAR 0 18
35921: PPUSH
35922: LD_INT 2
35924: PUSH
35925: LD_INT 30
35927: PUSH
35928: LD_INT 32
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 30
35937: PUSH
35938: LD_INT 33
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: PPUSH
35950: CALL_OW 72
35954: IFFALSE 36042
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35956: LD_ADDR_VAR 0 8
35960: PUSH
35961: LD_VAR 0 18
35965: PPUSH
35966: LD_INT 2
35968: PUSH
35969: LD_INT 30
35971: PUSH
35972: LD_INT 32
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 30
35981: PUSH
35982: LD_INT 33
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: PPUSH
35994: CALL_OW 72
35998: PUSH
35999: FOR_IN
36000: IFFALSE 36040
// begin if not GetBWeapon ( i ) then
36002: LD_VAR 0 8
36006: PPUSH
36007: CALL_OW 269
36011: NOT
36012: IFFALSE 36038
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36014: LD_VAR 0 8
36018: PPUSH
36019: LD_VAR 0 8
36023: PPUSH
36024: LD_VAR 0 2
36028: PPUSH
36029: CALL 37288 0 2
36033: PPUSH
36034: CALL_OW 431
// end ;
36038: GO 35999
36040: POP
36041: POP
// end ; for i = 1 to personel do
36042: LD_ADDR_VAR 0 8
36046: PUSH
36047: DOUBLE
36048: LD_INT 1
36050: DEC
36051: ST_TO_ADDR
36052: LD_VAR 0 6
36056: PUSH
36057: FOR_TO
36058: IFFALSE 37122
// begin if i > 4 then
36060: LD_VAR 0 8
36064: PUSH
36065: LD_INT 4
36067: GREATER
36068: IFFALSE 36072
// break ;
36070: GO 37122
// case i of 1 :
36072: LD_VAR 0 8
36076: PUSH
36077: LD_INT 1
36079: DOUBLE
36080: EQUAL
36081: IFTRUE 36085
36083: GO 36165
36085: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36086: LD_ADDR_VAR 0 12
36090: PUSH
36091: LD_VAR 0 18
36095: PPUSH
36096: LD_INT 22
36098: PUSH
36099: LD_VAR 0 16
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 58
36110: PUSH
36111: EMPTY
36112: LIST
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: LD_INT 30
36119: PUSH
36120: LD_INT 32
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 30
36129: PUSH
36130: LD_INT 4
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 30
36139: PUSH
36140: LD_INT 5
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: PPUSH
36158: CALL_OW 72
36162: ST_TO_ADDR
36163: GO 36387
36165: LD_INT 2
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 36235
36173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36174: LD_ADDR_VAR 0 12
36178: PUSH
36179: LD_VAR 0 18
36183: PPUSH
36184: LD_INT 22
36186: PUSH
36187: LD_VAR 0 16
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: LD_INT 30
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 30
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PPUSH
36228: CALL_OW 72
36232: ST_TO_ADDR
36233: GO 36387
36235: LD_INT 3
36237: DOUBLE
36238: EQUAL
36239: IFTRUE 36243
36241: GO 36305
36243: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36244: LD_ADDR_VAR 0 12
36248: PUSH
36249: LD_VAR 0 18
36253: PPUSH
36254: LD_INT 22
36256: PUSH
36257: LD_VAR 0 16
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: LD_INT 30
36271: PUSH
36272: LD_INT 2
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 30
36281: PUSH
36282: LD_INT 3
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: LIST
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PPUSH
36298: CALL_OW 72
36302: ST_TO_ADDR
36303: GO 36387
36305: LD_INT 4
36307: DOUBLE
36308: EQUAL
36309: IFTRUE 36313
36311: GO 36386
36313: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36314: LD_ADDR_VAR 0 12
36318: PUSH
36319: LD_VAR 0 18
36323: PPUSH
36324: LD_INT 22
36326: PUSH
36327: LD_VAR 0 16
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 30
36341: PUSH
36342: LD_INT 6
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 30
36351: PUSH
36352: LD_INT 7
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 30
36361: PUSH
36362: LD_INT 8
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PPUSH
36379: CALL_OW 72
36383: ST_TO_ADDR
36384: GO 36387
36386: POP
// if i = 1 then
36387: LD_VAR 0 8
36391: PUSH
36392: LD_INT 1
36394: EQUAL
36395: IFFALSE 36506
// begin tmp := [ ] ;
36397: LD_ADDR_VAR 0 19
36401: PUSH
36402: EMPTY
36403: ST_TO_ADDR
// for j in f do
36404: LD_ADDR_VAR 0 9
36408: PUSH
36409: LD_VAR 0 12
36413: PUSH
36414: FOR_IN
36415: IFFALSE 36488
// if GetBType ( j ) = b_bunker then
36417: LD_VAR 0 9
36421: PPUSH
36422: CALL_OW 266
36426: PUSH
36427: LD_INT 32
36429: EQUAL
36430: IFFALSE 36457
// tmp := Insert ( tmp , 1 , j ) else
36432: LD_ADDR_VAR 0 19
36436: PUSH
36437: LD_VAR 0 19
36441: PPUSH
36442: LD_INT 1
36444: PPUSH
36445: LD_VAR 0 9
36449: PPUSH
36450: CALL_OW 2
36454: ST_TO_ADDR
36455: GO 36486
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36457: LD_ADDR_VAR 0 19
36461: PUSH
36462: LD_VAR 0 19
36466: PPUSH
36467: LD_VAR 0 19
36471: PUSH
36472: LD_INT 1
36474: PLUS
36475: PPUSH
36476: LD_VAR 0 9
36480: PPUSH
36481: CALL_OW 2
36485: ST_TO_ADDR
36486: GO 36414
36488: POP
36489: POP
// if tmp then
36490: LD_VAR 0 19
36494: IFFALSE 36506
// f := tmp ;
36496: LD_ADDR_VAR 0 12
36500: PUSH
36501: LD_VAR 0 19
36505: ST_TO_ADDR
// end ; x := personel [ i ] ;
36506: LD_ADDR_VAR 0 13
36510: PUSH
36511: LD_VAR 0 6
36515: PUSH
36516: LD_VAR 0 8
36520: ARRAY
36521: ST_TO_ADDR
// if x = - 1 then
36522: LD_VAR 0 13
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: EQUAL
36531: IFFALSE 36740
// begin for j in f do
36533: LD_ADDR_VAR 0 9
36537: PUSH
36538: LD_VAR 0 12
36542: PUSH
36543: FOR_IN
36544: IFFALSE 36736
// repeat InitHc ;
36546: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36550: LD_VAR 0 9
36554: PPUSH
36555: CALL_OW 266
36559: PUSH
36560: LD_INT 5
36562: EQUAL
36563: IFFALSE 36633
// begin if UnitsInside ( j ) < 3 then
36565: LD_VAR 0 9
36569: PPUSH
36570: CALL_OW 313
36574: PUSH
36575: LD_INT 3
36577: LESS
36578: IFFALSE 36614
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36580: LD_INT 0
36582: PPUSH
36583: LD_INT 5
36585: PUSH
36586: LD_INT 8
36588: PUSH
36589: LD_INT 9
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: PUSH
36597: LD_VAR 0 17
36601: ARRAY
36602: PPUSH
36603: LD_VAR 0 4
36607: PPUSH
36608: CALL_OW 380
36612: GO 36631
// PrepareHuman ( false , i , skill ) ;
36614: LD_INT 0
36616: PPUSH
36617: LD_VAR 0 8
36621: PPUSH
36622: LD_VAR 0 4
36626: PPUSH
36627: CALL_OW 380
// end else
36631: GO 36650
// PrepareHuman ( false , i , skill ) ;
36633: LD_INT 0
36635: PPUSH
36636: LD_VAR 0 8
36640: PPUSH
36641: LD_VAR 0 4
36645: PPUSH
36646: CALL_OW 380
// un := CreateHuman ;
36650: LD_ADDR_VAR 0 14
36654: PUSH
36655: CALL_OW 44
36659: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36660: LD_ADDR_VAR 0 7
36664: PUSH
36665: LD_VAR 0 7
36669: PPUSH
36670: LD_INT 1
36672: PPUSH
36673: LD_VAR 0 14
36677: PPUSH
36678: CALL_OW 2
36682: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36683: LD_VAR 0 14
36687: PPUSH
36688: LD_VAR 0 9
36692: PPUSH
36693: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36697: LD_VAR 0 9
36701: PPUSH
36702: CALL_OW 313
36706: PUSH
36707: LD_INT 6
36709: EQUAL
36710: PUSH
36711: LD_VAR 0 9
36715: PPUSH
36716: CALL_OW 266
36720: PUSH
36721: LD_INT 32
36723: PUSH
36724: LD_INT 31
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: IN
36731: OR
36732: IFFALSE 36546
36734: GO 36543
36736: POP
36737: POP
// end else
36738: GO 37120
// for j = 1 to x do
36740: LD_ADDR_VAR 0 9
36744: PUSH
36745: DOUBLE
36746: LD_INT 1
36748: DEC
36749: ST_TO_ADDR
36750: LD_VAR 0 13
36754: PUSH
36755: FOR_TO
36756: IFFALSE 37118
// begin InitHc ;
36758: CALL_OW 19
// if not f then
36762: LD_VAR 0 12
36766: NOT
36767: IFFALSE 36856
// begin PrepareHuman ( false , i , skill ) ;
36769: LD_INT 0
36771: PPUSH
36772: LD_VAR 0 8
36776: PPUSH
36777: LD_VAR 0 4
36781: PPUSH
36782: CALL_OW 380
// un := CreateHuman ;
36786: LD_ADDR_VAR 0 14
36790: PUSH
36791: CALL_OW 44
36795: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36796: LD_ADDR_VAR 0 7
36800: PUSH
36801: LD_VAR 0 7
36805: PPUSH
36806: LD_INT 1
36808: PPUSH
36809: LD_VAR 0 14
36813: PPUSH
36814: CALL_OW 2
36818: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36819: LD_VAR 0 14
36823: PPUSH
36824: LD_VAR 0 1
36828: PPUSH
36829: CALL_OW 250
36833: PPUSH
36834: LD_VAR 0 1
36838: PPUSH
36839: CALL_OW 251
36843: PPUSH
36844: LD_INT 10
36846: PPUSH
36847: LD_INT 0
36849: PPUSH
36850: CALL_OW 50
// continue ;
36854: GO 36755
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36856: LD_VAR 0 12
36860: PUSH
36861: LD_INT 1
36863: ARRAY
36864: PPUSH
36865: CALL_OW 313
36869: PUSH
36870: LD_VAR 0 12
36874: PUSH
36875: LD_INT 1
36877: ARRAY
36878: PPUSH
36879: CALL_OW 266
36883: PUSH
36884: LD_INT 32
36886: PUSH
36887: LD_INT 31
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: IN
36894: AND
36895: PUSH
36896: LD_VAR 0 12
36900: PUSH
36901: LD_INT 1
36903: ARRAY
36904: PPUSH
36905: CALL_OW 313
36909: PUSH
36910: LD_INT 6
36912: EQUAL
36913: OR
36914: IFFALSE 36934
// f := Delete ( f , 1 ) ;
36916: LD_ADDR_VAR 0 12
36920: PUSH
36921: LD_VAR 0 12
36925: PPUSH
36926: LD_INT 1
36928: PPUSH
36929: CALL_OW 3
36933: ST_TO_ADDR
// if not f then
36934: LD_VAR 0 12
36938: NOT
36939: IFFALSE 36957
// begin x := x + 2 ;
36941: LD_ADDR_VAR 0 13
36945: PUSH
36946: LD_VAR 0 13
36950: PUSH
36951: LD_INT 2
36953: PLUS
36954: ST_TO_ADDR
// continue ;
36955: GO 36755
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36957: LD_VAR 0 12
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PPUSH
36966: CALL_OW 266
36970: PUSH
36971: LD_INT 5
36973: EQUAL
36974: IFFALSE 37048
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36976: LD_VAR 0 12
36980: PUSH
36981: LD_INT 1
36983: ARRAY
36984: PPUSH
36985: CALL_OW 313
36989: PUSH
36990: LD_INT 3
36992: LESS
36993: IFFALSE 37029
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36995: LD_INT 0
36997: PPUSH
36998: LD_INT 5
37000: PUSH
37001: LD_INT 8
37003: PUSH
37004: LD_INT 9
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: LIST
37011: PUSH
37012: LD_VAR 0 17
37016: ARRAY
37017: PPUSH
37018: LD_VAR 0 4
37022: PPUSH
37023: CALL_OW 380
37027: GO 37046
// PrepareHuman ( false , i , skill ) ;
37029: LD_INT 0
37031: PPUSH
37032: LD_VAR 0 8
37036: PPUSH
37037: LD_VAR 0 4
37041: PPUSH
37042: CALL_OW 380
// end else
37046: GO 37065
// PrepareHuman ( false , i , skill ) ;
37048: LD_INT 0
37050: PPUSH
37051: LD_VAR 0 8
37055: PPUSH
37056: LD_VAR 0 4
37060: PPUSH
37061: CALL_OW 380
// un := CreateHuman ;
37065: LD_ADDR_VAR 0 14
37069: PUSH
37070: CALL_OW 44
37074: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37075: LD_ADDR_VAR 0 7
37079: PUSH
37080: LD_VAR 0 7
37084: PPUSH
37085: LD_INT 1
37087: PPUSH
37088: LD_VAR 0 14
37092: PPUSH
37093: CALL_OW 2
37097: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37098: LD_VAR 0 14
37102: PPUSH
37103: LD_VAR 0 12
37107: PUSH
37108: LD_INT 1
37110: ARRAY
37111: PPUSH
37112: CALL_OW 52
// end ;
37116: GO 36755
37118: POP
37119: POP
// end ;
37120: GO 36057
37122: POP
37123: POP
// result := result ^ buildings ;
37124: LD_ADDR_VAR 0 7
37128: PUSH
37129: LD_VAR 0 7
37133: PUSH
37134: LD_VAR 0 18
37138: ADD
37139: ST_TO_ADDR
// end else
37140: GO 37283
// begin for i = 1 to personel do
37142: LD_ADDR_VAR 0 8
37146: PUSH
37147: DOUBLE
37148: LD_INT 1
37150: DEC
37151: ST_TO_ADDR
37152: LD_VAR 0 6
37156: PUSH
37157: FOR_TO
37158: IFFALSE 37281
// begin if i > 4 then
37160: LD_VAR 0 8
37164: PUSH
37165: LD_INT 4
37167: GREATER
37168: IFFALSE 37172
// break ;
37170: GO 37281
// x := personel [ i ] ;
37172: LD_ADDR_VAR 0 13
37176: PUSH
37177: LD_VAR 0 6
37181: PUSH
37182: LD_VAR 0 8
37186: ARRAY
37187: ST_TO_ADDR
// if x = - 1 then
37188: LD_VAR 0 13
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: EQUAL
37197: IFFALSE 37201
// continue ;
37199: GO 37157
// PrepareHuman ( false , i , skill ) ;
37201: LD_INT 0
37203: PPUSH
37204: LD_VAR 0 8
37208: PPUSH
37209: LD_VAR 0 4
37213: PPUSH
37214: CALL_OW 380
// un := CreateHuman ;
37218: LD_ADDR_VAR 0 14
37222: PUSH
37223: CALL_OW 44
37227: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37228: LD_VAR 0 14
37232: PPUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL_OW 250
37242: PPUSH
37243: LD_VAR 0 1
37247: PPUSH
37248: CALL_OW 251
37252: PPUSH
37253: LD_INT 10
37255: PPUSH
37256: LD_INT 0
37258: PPUSH
37259: CALL_OW 50
// result := result ^ un ;
37263: LD_ADDR_VAR 0 7
37267: PUSH
37268: LD_VAR 0 7
37272: PUSH
37273: LD_VAR 0 14
37277: ADD
37278: ST_TO_ADDR
// end ;
37279: GO 37157
37281: POP
37282: POP
// end ; end ;
37283: LD_VAR 0 7
37287: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37288: LD_INT 0
37290: PPUSH
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
37302: PPUSH
37303: PPUSH
37304: PPUSH
37305: PPUSH
// result := false ;
37306: LD_ADDR_VAR 0 3
37310: PUSH
37311: LD_INT 0
37313: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37314: LD_VAR 0 1
37318: NOT
37319: PUSH
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL_OW 266
37329: PUSH
37330: LD_INT 32
37332: PUSH
37333: LD_INT 33
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: IN
37340: NOT
37341: OR
37342: IFFALSE 37346
// exit ;
37344: GO 38455
// nat := GetNation ( tower ) ;
37346: LD_ADDR_VAR 0 12
37350: PUSH
37351: LD_VAR 0 1
37355: PPUSH
37356: CALL_OW 248
37360: ST_TO_ADDR
// side := GetSide ( tower ) ;
37361: LD_ADDR_VAR 0 16
37365: PUSH
37366: LD_VAR 0 1
37370: PPUSH
37371: CALL_OW 255
37375: ST_TO_ADDR
// x := GetX ( tower ) ;
37376: LD_ADDR_VAR 0 10
37380: PUSH
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL_OW 250
37390: ST_TO_ADDR
// y := GetY ( tower ) ;
37391: LD_ADDR_VAR 0 11
37395: PUSH
37396: LD_VAR 0 1
37400: PPUSH
37401: CALL_OW 251
37405: ST_TO_ADDR
// if not x or not y then
37406: LD_VAR 0 10
37410: NOT
37411: PUSH
37412: LD_VAR 0 11
37416: NOT
37417: OR
37418: IFFALSE 37422
// exit ;
37420: GO 38455
// weapon := 0 ;
37422: LD_ADDR_VAR 0 18
37426: PUSH
37427: LD_INT 0
37429: ST_TO_ADDR
// fac_list := [ ] ;
37430: LD_ADDR_VAR 0 17
37434: PUSH
37435: EMPTY
37436: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37437: LD_ADDR_VAR 0 6
37441: PUSH
37442: LD_VAR 0 1
37446: PPUSH
37447: CALL_OW 274
37451: PPUSH
37452: LD_VAR 0 2
37456: PPUSH
37457: LD_INT 0
37459: PPUSH
37460: CALL 35026 0 3
37464: PPUSH
37465: LD_INT 30
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PPUSH
37475: CALL_OW 72
37479: ST_TO_ADDR
// if not factories then
37480: LD_VAR 0 6
37484: NOT
37485: IFFALSE 37489
// exit ;
37487: GO 38455
// for i in factories do
37489: LD_ADDR_VAR 0 8
37493: PUSH
37494: LD_VAR 0 6
37498: PUSH
37499: FOR_IN
37500: IFFALSE 37525
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37502: LD_ADDR_VAR 0 17
37506: PUSH
37507: LD_VAR 0 17
37511: PUSH
37512: LD_VAR 0 8
37516: PPUSH
37517: CALL_OW 478
37521: UNION
37522: ST_TO_ADDR
37523: GO 37499
37525: POP
37526: POP
// if not fac_list then
37527: LD_VAR 0 17
37531: NOT
37532: IFFALSE 37536
// exit ;
37534: GO 38455
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37536: LD_ADDR_VAR 0 5
37540: PUSH
37541: LD_INT 4
37543: PUSH
37544: LD_INT 5
37546: PUSH
37547: LD_INT 9
37549: PUSH
37550: LD_INT 10
37552: PUSH
37553: LD_INT 6
37555: PUSH
37556: LD_INT 7
37558: PUSH
37559: LD_INT 11
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 27
37573: PUSH
37574: LD_INT 28
37576: PUSH
37577: LD_INT 26
37579: PUSH
37580: LD_INT 30
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 43
37591: PUSH
37592: LD_INT 44
37594: PUSH
37595: LD_INT 46
37597: PUSH
37598: LD_INT 45
37600: PUSH
37601: LD_INT 47
37603: PUSH
37604: LD_INT 49
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: LIST
37619: PUSH
37620: LD_VAR 0 12
37624: ARRAY
37625: ST_TO_ADDR
// list := list isect fac_list ;
37626: LD_ADDR_VAR 0 5
37630: PUSH
37631: LD_VAR 0 5
37635: PUSH
37636: LD_VAR 0 17
37640: ISECT
37641: ST_TO_ADDR
// if not list then
37642: LD_VAR 0 5
37646: NOT
37647: IFFALSE 37651
// exit ;
37649: GO 38455
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37651: LD_VAR 0 12
37655: PUSH
37656: LD_INT 3
37658: EQUAL
37659: PUSH
37660: LD_INT 49
37662: PUSH
37663: LD_VAR 0 5
37667: IN
37668: AND
37669: PUSH
37670: LD_INT 31
37672: PPUSH
37673: LD_VAR 0 16
37677: PPUSH
37678: CALL_OW 321
37682: PUSH
37683: LD_INT 2
37685: EQUAL
37686: AND
37687: IFFALSE 37747
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37689: LD_INT 22
37691: PUSH
37692: LD_VAR 0 16
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 35
37703: PUSH
37704: LD_INT 49
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 91
37713: PUSH
37714: LD_VAR 0 1
37718: PUSH
37719: LD_INT 10
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: PPUSH
37732: CALL_OW 69
37736: NOT
37737: IFFALSE 37747
// weapon := ru_time_lapser ;
37739: LD_ADDR_VAR 0 18
37743: PUSH
37744: LD_INT 49
37746: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37747: LD_VAR 0 12
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: IN
37762: PUSH
37763: LD_INT 11
37765: PUSH
37766: LD_VAR 0 5
37770: IN
37771: PUSH
37772: LD_INT 30
37774: PUSH
37775: LD_VAR 0 5
37779: IN
37780: OR
37781: AND
37782: PUSH
37783: LD_INT 6
37785: PPUSH
37786: LD_VAR 0 16
37790: PPUSH
37791: CALL_OW 321
37795: PUSH
37796: LD_INT 2
37798: EQUAL
37799: AND
37800: IFFALSE 37965
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37802: LD_INT 22
37804: PUSH
37805: LD_VAR 0 16
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: PUSH
37817: LD_INT 35
37819: PUSH
37820: LD_INT 11
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 35
37829: PUSH
37830: LD_INT 30
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 91
37844: PUSH
37845: LD_VAR 0 1
37849: PUSH
37850: LD_INT 18
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: PPUSH
37863: CALL_OW 69
37867: NOT
37868: PUSH
37869: LD_INT 22
37871: PUSH
37872: LD_VAR 0 16
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 2
37883: PUSH
37884: LD_INT 30
37886: PUSH
37887: LD_INT 32
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 30
37896: PUSH
37897: LD_INT 33
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 91
37911: PUSH
37912: LD_VAR 0 1
37916: PUSH
37917: LD_INT 12
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: PUSH
37930: EMPTY
37931: LIST
37932: PPUSH
37933: CALL_OW 69
37937: PUSH
37938: LD_INT 2
37940: GREATER
37941: AND
37942: IFFALSE 37965
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37944: LD_ADDR_VAR 0 18
37948: PUSH
37949: LD_INT 11
37951: PUSH
37952: LD_INT 30
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_VAR 0 12
37963: ARRAY
37964: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37965: LD_VAR 0 18
37969: NOT
37970: PUSH
37971: LD_INT 40
37973: PPUSH
37974: LD_VAR 0 16
37978: PPUSH
37979: CALL_OW 321
37983: PUSH
37984: LD_INT 2
37986: EQUAL
37987: AND
37988: PUSH
37989: LD_INT 7
37991: PUSH
37992: LD_VAR 0 5
37996: IN
37997: PUSH
37998: LD_INT 28
38000: PUSH
38001: LD_VAR 0 5
38005: IN
38006: OR
38007: PUSH
38008: LD_INT 45
38010: PUSH
38011: LD_VAR 0 5
38015: IN
38016: OR
38017: AND
38018: IFFALSE 38272
// begin hex := GetHexInfo ( x , y ) ;
38020: LD_ADDR_VAR 0 4
38024: PUSH
38025: LD_VAR 0 10
38029: PPUSH
38030: LD_VAR 0 11
38034: PPUSH
38035: CALL_OW 546
38039: ST_TO_ADDR
// if hex [ 1 ] then
38040: LD_VAR 0 4
38044: PUSH
38045: LD_INT 1
38047: ARRAY
38048: IFFALSE 38052
// exit ;
38050: GO 38455
// height := hex [ 2 ] ;
38052: LD_ADDR_VAR 0 15
38056: PUSH
38057: LD_VAR 0 4
38061: PUSH
38062: LD_INT 2
38064: ARRAY
38065: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38066: LD_ADDR_VAR 0 14
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 3
38079: PUSH
38080: LD_INT 5
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: ST_TO_ADDR
// for i in tmp do
38089: LD_ADDR_VAR 0 8
38093: PUSH
38094: LD_VAR 0 14
38098: PUSH
38099: FOR_IN
38100: IFFALSE 38270
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38102: LD_ADDR_VAR 0 9
38106: PUSH
38107: LD_VAR 0 10
38111: PPUSH
38112: LD_VAR 0 8
38116: PPUSH
38117: LD_INT 5
38119: PPUSH
38120: CALL_OW 272
38124: PUSH
38125: LD_VAR 0 11
38129: PPUSH
38130: LD_VAR 0 8
38134: PPUSH
38135: LD_INT 5
38137: PPUSH
38138: CALL_OW 273
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38147: LD_VAR 0 9
38151: PUSH
38152: LD_INT 1
38154: ARRAY
38155: PPUSH
38156: LD_VAR 0 9
38160: PUSH
38161: LD_INT 2
38163: ARRAY
38164: PPUSH
38165: CALL_OW 488
38169: IFFALSE 38268
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38171: LD_ADDR_VAR 0 4
38175: PUSH
38176: LD_VAR 0 9
38180: PUSH
38181: LD_INT 1
38183: ARRAY
38184: PPUSH
38185: LD_VAR 0 9
38189: PUSH
38190: LD_INT 2
38192: ARRAY
38193: PPUSH
38194: CALL_OW 546
38198: ST_TO_ADDR
// if hex [ 1 ] then
38199: LD_VAR 0 4
38203: PUSH
38204: LD_INT 1
38206: ARRAY
38207: IFFALSE 38211
// continue ;
38209: GO 38099
// h := hex [ 2 ] ;
38211: LD_ADDR_VAR 0 13
38215: PUSH
38216: LD_VAR 0 4
38220: PUSH
38221: LD_INT 2
38223: ARRAY
38224: ST_TO_ADDR
// if h + 7 < height then
38225: LD_VAR 0 13
38229: PUSH
38230: LD_INT 7
38232: PLUS
38233: PUSH
38234: LD_VAR 0 15
38238: LESS
38239: IFFALSE 38268
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38241: LD_ADDR_VAR 0 18
38245: PUSH
38246: LD_INT 7
38248: PUSH
38249: LD_INT 28
38251: PUSH
38252: LD_INT 45
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: PUSH
38260: LD_VAR 0 12
38264: ARRAY
38265: ST_TO_ADDR
// break ;
38266: GO 38270
// end ; end ; end ;
38268: GO 38099
38270: POP
38271: POP
// end ; if not weapon then
38272: LD_VAR 0 18
38276: NOT
38277: IFFALSE 38337
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38279: LD_ADDR_VAR 0 5
38283: PUSH
38284: LD_VAR 0 5
38288: PUSH
38289: LD_INT 11
38291: PUSH
38292: LD_INT 30
38294: PUSH
38295: LD_INT 49
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: LIST
38302: DIFF
38303: ST_TO_ADDR
// if not list then
38304: LD_VAR 0 5
38308: NOT
38309: IFFALSE 38313
// exit ;
38311: GO 38455
// weapon := list [ rand ( 1 , list ) ] ;
38313: LD_ADDR_VAR 0 18
38317: PUSH
38318: LD_VAR 0 5
38322: PUSH
38323: LD_INT 1
38325: PPUSH
38326: LD_VAR 0 5
38330: PPUSH
38331: CALL_OW 12
38335: ARRAY
38336: ST_TO_ADDR
// end ; if weapon then
38337: LD_VAR 0 18
38341: IFFALSE 38455
// begin tmp := CostOfWeapon ( weapon ) ;
38343: LD_ADDR_VAR 0 14
38347: PUSH
38348: LD_VAR 0 18
38352: PPUSH
38353: CALL_OW 451
38357: ST_TO_ADDR
// j := GetBase ( tower ) ;
38358: LD_ADDR_VAR 0 9
38362: PUSH
38363: LD_VAR 0 1
38367: PPUSH
38368: CALL_OW 274
38372: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38373: LD_VAR 0 9
38377: PPUSH
38378: LD_INT 1
38380: PPUSH
38381: CALL_OW 275
38385: PUSH
38386: LD_VAR 0 14
38390: PUSH
38391: LD_INT 1
38393: ARRAY
38394: GREATEREQUAL
38395: PUSH
38396: LD_VAR 0 9
38400: PPUSH
38401: LD_INT 2
38403: PPUSH
38404: CALL_OW 275
38408: PUSH
38409: LD_VAR 0 14
38413: PUSH
38414: LD_INT 2
38416: ARRAY
38417: GREATEREQUAL
38418: AND
38419: PUSH
38420: LD_VAR 0 9
38424: PPUSH
38425: LD_INT 3
38427: PPUSH
38428: CALL_OW 275
38432: PUSH
38433: LD_VAR 0 14
38437: PUSH
38438: LD_INT 3
38440: ARRAY
38441: GREATEREQUAL
38442: AND
38443: IFFALSE 38455
// result := weapon ;
38445: LD_ADDR_VAR 0 3
38449: PUSH
38450: LD_VAR 0 18
38454: ST_TO_ADDR
// end ; end ;
38455: LD_VAR 0 3
38459: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38460: LD_INT 0
38462: PPUSH
38463: PPUSH
// result := true ;
38464: LD_ADDR_VAR 0 3
38468: PUSH
38469: LD_INT 1
38471: ST_TO_ADDR
// if array1 = array2 then
38472: LD_VAR 0 1
38476: PUSH
38477: LD_VAR 0 2
38481: EQUAL
38482: IFFALSE 38542
// begin for i = 1 to array1 do
38484: LD_ADDR_VAR 0 4
38488: PUSH
38489: DOUBLE
38490: LD_INT 1
38492: DEC
38493: ST_TO_ADDR
38494: LD_VAR 0 1
38498: PUSH
38499: FOR_TO
38500: IFFALSE 38538
// if array1 [ i ] <> array2 [ i ] then
38502: LD_VAR 0 1
38506: PUSH
38507: LD_VAR 0 4
38511: ARRAY
38512: PUSH
38513: LD_VAR 0 2
38517: PUSH
38518: LD_VAR 0 4
38522: ARRAY
38523: NONEQUAL
38524: IFFALSE 38536
// begin result := false ;
38526: LD_ADDR_VAR 0 3
38530: PUSH
38531: LD_INT 0
38533: ST_TO_ADDR
// break ;
38534: GO 38538
// end ;
38536: GO 38499
38538: POP
38539: POP
// end else
38540: GO 38550
// result := false ;
38542: LD_ADDR_VAR 0 3
38546: PUSH
38547: LD_INT 0
38549: ST_TO_ADDR
// end ;
38550: LD_VAR 0 3
38554: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38555: LD_INT 0
38557: PPUSH
38558: PPUSH
// if not array1 or not array2 then
38559: LD_VAR 0 1
38563: NOT
38564: PUSH
38565: LD_VAR 0 2
38569: NOT
38570: OR
38571: IFFALSE 38575
// exit ;
38573: GO 38639
// result := true ;
38575: LD_ADDR_VAR 0 3
38579: PUSH
38580: LD_INT 1
38582: ST_TO_ADDR
// for i = 1 to array1 do
38583: LD_ADDR_VAR 0 4
38587: PUSH
38588: DOUBLE
38589: LD_INT 1
38591: DEC
38592: ST_TO_ADDR
38593: LD_VAR 0 1
38597: PUSH
38598: FOR_TO
38599: IFFALSE 38637
// if array1 [ i ] <> array2 [ i ] then
38601: LD_VAR 0 1
38605: PUSH
38606: LD_VAR 0 4
38610: ARRAY
38611: PUSH
38612: LD_VAR 0 2
38616: PUSH
38617: LD_VAR 0 4
38621: ARRAY
38622: NONEQUAL
38623: IFFALSE 38635
// begin result := false ;
38625: LD_ADDR_VAR 0 3
38629: PUSH
38630: LD_INT 0
38632: ST_TO_ADDR
// break ;
38633: GO 38637
// end ;
38635: GO 38598
38637: POP
38638: POP
// end ;
38639: LD_VAR 0 3
38643: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38644: LD_INT 0
38646: PPUSH
38647: PPUSH
38648: PPUSH
// pom := GetBase ( fac ) ;
38649: LD_ADDR_VAR 0 5
38653: PUSH
38654: LD_VAR 0 1
38658: PPUSH
38659: CALL_OW 274
38663: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38664: LD_ADDR_VAR 0 4
38668: PUSH
38669: LD_VAR 0 2
38673: PUSH
38674: LD_INT 1
38676: ARRAY
38677: PPUSH
38678: LD_VAR 0 2
38682: PUSH
38683: LD_INT 2
38685: ARRAY
38686: PPUSH
38687: LD_VAR 0 2
38691: PUSH
38692: LD_INT 3
38694: ARRAY
38695: PPUSH
38696: LD_VAR 0 2
38700: PUSH
38701: LD_INT 4
38703: ARRAY
38704: PPUSH
38705: CALL_OW 449
38709: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38710: LD_ADDR_VAR 0 3
38714: PUSH
38715: LD_VAR 0 5
38719: PPUSH
38720: LD_INT 1
38722: PPUSH
38723: CALL_OW 275
38727: PUSH
38728: LD_VAR 0 4
38732: PUSH
38733: LD_INT 1
38735: ARRAY
38736: GREATEREQUAL
38737: PUSH
38738: LD_VAR 0 5
38742: PPUSH
38743: LD_INT 2
38745: PPUSH
38746: CALL_OW 275
38750: PUSH
38751: LD_VAR 0 4
38755: PUSH
38756: LD_INT 2
38758: ARRAY
38759: GREATEREQUAL
38760: AND
38761: PUSH
38762: LD_VAR 0 5
38766: PPUSH
38767: LD_INT 3
38769: PPUSH
38770: CALL_OW 275
38774: PUSH
38775: LD_VAR 0 4
38779: PUSH
38780: LD_INT 3
38782: ARRAY
38783: GREATEREQUAL
38784: AND
38785: ST_TO_ADDR
// end ;
38786: LD_VAR 0 3
38790: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38791: LD_INT 0
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
// pom := GetBase ( building ) ;
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_VAR 0 1
38806: PPUSH
38807: CALL_OW 274
38811: ST_TO_ADDR
// if not pom then
38812: LD_VAR 0 3
38816: NOT
38817: IFFALSE 38821
// exit ;
38819: GO 38991
// btype := GetBType ( building ) ;
38821: LD_ADDR_VAR 0 5
38825: PUSH
38826: LD_VAR 0 1
38830: PPUSH
38831: CALL_OW 266
38835: ST_TO_ADDR
// if btype = b_armoury then
38836: LD_VAR 0 5
38840: PUSH
38841: LD_INT 4
38843: EQUAL
38844: IFFALSE 38854
// btype := b_barracks ;
38846: LD_ADDR_VAR 0 5
38850: PUSH
38851: LD_INT 5
38853: ST_TO_ADDR
// if btype = b_depot then
38854: LD_VAR 0 5
38858: PUSH
38859: LD_INT 0
38861: EQUAL
38862: IFFALSE 38872
// btype := b_warehouse ;
38864: LD_ADDR_VAR 0 5
38868: PUSH
38869: LD_INT 1
38871: ST_TO_ADDR
// if btype = b_workshop then
38872: LD_VAR 0 5
38876: PUSH
38877: LD_INT 2
38879: EQUAL
38880: IFFALSE 38890
// btype := b_factory ;
38882: LD_ADDR_VAR 0 5
38886: PUSH
38887: LD_INT 3
38889: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38890: LD_ADDR_VAR 0 4
38894: PUSH
38895: LD_VAR 0 5
38899: PPUSH
38900: LD_VAR 0 1
38904: PPUSH
38905: CALL_OW 248
38909: PPUSH
38910: CALL_OW 450
38914: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38915: LD_ADDR_VAR 0 2
38919: PUSH
38920: LD_VAR 0 3
38924: PPUSH
38925: LD_INT 1
38927: PPUSH
38928: CALL_OW 275
38932: PUSH
38933: LD_VAR 0 4
38937: PUSH
38938: LD_INT 1
38940: ARRAY
38941: GREATEREQUAL
38942: PUSH
38943: LD_VAR 0 3
38947: PPUSH
38948: LD_INT 2
38950: PPUSH
38951: CALL_OW 275
38955: PUSH
38956: LD_VAR 0 4
38960: PUSH
38961: LD_INT 2
38963: ARRAY
38964: GREATEREQUAL
38965: AND
38966: PUSH
38967: LD_VAR 0 3
38971: PPUSH
38972: LD_INT 3
38974: PPUSH
38975: CALL_OW 275
38979: PUSH
38980: LD_VAR 0 4
38984: PUSH
38985: LD_INT 3
38987: ARRAY
38988: GREATEREQUAL
38989: AND
38990: ST_TO_ADDR
// end ;
38991: LD_VAR 0 2
38995: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38996: LD_INT 0
38998: PPUSH
38999: PPUSH
39000: PPUSH
// pom := GetBase ( building ) ;
39001: LD_ADDR_VAR 0 4
39005: PUSH
39006: LD_VAR 0 1
39010: PPUSH
39011: CALL_OW 274
39015: ST_TO_ADDR
// if not pom then
39016: LD_VAR 0 4
39020: NOT
39021: IFFALSE 39025
// exit ;
39023: GO 39126
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39025: LD_ADDR_VAR 0 5
39029: PUSH
39030: LD_VAR 0 2
39034: PPUSH
39035: LD_VAR 0 1
39039: PPUSH
39040: CALL_OW 248
39044: PPUSH
39045: CALL_OW 450
39049: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39050: LD_ADDR_VAR 0 3
39054: PUSH
39055: LD_VAR 0 4
39059: PPUSH
39060: LD_INT 1
39062: PPUSH
39063: CALL_OW 275
39067: PUSH
39068: LD_VAR 0 5
39072: PUSH
39073: LD_INT 1
39075: ARRAY
39076: GREATEREQUAL
39077: PUSH
39078: LD_VAR 0 4
39082: PPUSH
39083: LD_INT 2
39085: PPUSH
39086: CALL_OW 275
39090: PUSH
39091: LD_VAR 0 5
39095: PUSH
39096: LD_INT 2
39098: ARRAY
39099: GREATEREQUAL
39100: AND
39101: PUSH
39102: LD_VAR 0 4
39106: PPUSH
39107: LD_INT 3
39109: PPUSH
39110: CALL_OW 275
39114: PUSH
39115: LD_VAR 0 5
39119: PUSH
39120: LD_INT 3
39122: ARRAY
39123: GREATEREQUAL
39124: AND
39125: ST_TO_ADDR
// end ;
39126: LD_VAR 0 3
39130: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39131: LD_INT 0
39133: PPUSH
39134: PPUSH
39135: PPUSH
39136: PPUSH
39137: PPUSH
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
// result := false ;
39144: LD_ADDR_VAR 0 8
39148: PUSH
39149: LD_INT 0
39151: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39152: LD_VAR 0 5
39156: NOT
39157: PUSH
39158: LD_VAR 0 1
39162: NOT
39163: OR
39164: PUSH
39165: LD_VAR 0 2
39169: NOT
39170: OR
39171: PUSH
39172: LD_VAR 0 3
39176: NOT
39177: OR
39178: IFFALSE 39182
// exit ;
39180: GO 39996
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39182: LD_ADDR_VAR 0 14
39186: PUSH
39187: LD_VAR 0 1
39191: PPUSH
39192: LD_VAR 0 2
39196: PPUSH
39197: LD_VAR 0 3
39201: PPUSH
39202: LD_VAR 0 4
39206: PPUSH
39207: LD_VAR 0 5
39211: PUSH
39212: LD_INT 1
39214: ARRAY
39215: PPUSH
39216: CALL_OW 248
39220: PPUSH
39221: LD_INT 0
39223: PPUSH
39224: CALL 41229 0 6
39228: ST_TO_ADDR
// if not hexes then
39229: LD_VAR 0 14
39233: NOT
39234: IFFALSE 39238
// exit ;
39236: GO 39996
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39238: LD_ADDR_VAR 0 17
39242: PUSH
39243: LD_VAR 0 5
39247: PPUSH
39248: LD_INT 22
39250: PUSH
39251: LD_VAR 0 13
39255: PPUSH
39256: CALL_OW 255
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 2
39267: PUSH
39268: LD_INT 30
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 30
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PPUSH
39297: CALL_OW 72
39301: ST_TO_ADDR
// for i = 1 to hexes do
39302: LD_ADDR_VAR 0 9
39306: PUSH
39307: DOUBLE
39308: LD_INT 1
39310: DEC
39311: ST_TO_ADDR
39312: LD_VAR 0 14
39316: PUSH
39317: FOR_TO
39318: IFFALSE 39994
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39320: LD_ADDR_VAR 0 13
39324: PUSH
39325: LD_VAR 0 14
39329: PUSH
39330: LD_VAR 0 9
39334: ARRAY
39335: PUSH
39336: LD_INT 1
39338: ARRAY
39339: PPUSH
39340: LD_VAR 0 14
39344: PUSH
39345: LD_VAR 0 9
39349: ARRAY
39350: PUSH
39351: LD_INT 2
39353: ARRAY
39354: PPUSH
39355: CALL_OW 428
39359: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39360: LD_VAR 0 14
39364: PUSH
39365: LD_VAR 0 9
39369: ARRAY
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: PPUSH
39375: LD_VAR 0 14
39379: PUSH
39380: LD_VAR 0 9
39384: ARRAY
39385: PUSH
39386: LD_INT 2
39388: ARRAY
39389: PPUSH
39390: CALL_OW 351
39394: PUSH
39395: LD_VAR 0 14
39399: PUSH
39400: LD_VAR 0 9
39404: ARRAY
39405: PUSH
39406: LD_INT 1
39408: ARRAY
39409: PPUSH
39410: LD_VAR 0 14
39414: PUSH
39415: LD_VAR 0 9
39419: ARRAY
39420: PUSH
39421: LD_INT 2
39423: ARRAY
39424: PPUSH
39425: CALL_OW 488
39429: NOT
39430: OR
39431: PUSH
39432: LD_VAR 0 13
39436: PPUSH
39437: CALL_OW 247
39441: PUSH
39442: LD_INT 3
39444: EQUAL
39445: OR
39446: IFFALSE 39452
// exit ;
39448: POP
39449: POP
39450: GO 39996
// if not tmp then
39452: LD_VAR 0 13
39456: NOT
39457: IFFALSE 39461
// continue ;
39459: GO 39317
// result := true ;
39461: LD_ADDR_VAR 0 8
39465: PUSH
39466: LD_INT 1
39468: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39469: LD_VAR 0 6
39473: PUSH
39474: LD_VAR 0 13
39478: PPUSH
39479: CALL_OW 247
39483: PUSH
39484: LD_INT 2
39486: EQUAL
39487: AND
39488: PUSH
39489: LD_VAR 0 13
39493: PPUSH
39494: CALL_OW 263
39498: PUSH
39499: LD_INT 1
39501: EQUAL
39502: AND
39503: IFFALSE 39667
// begin if IsDrivenBy ( tmp ) then
39505: LD_VAR 0 13
39509: PPUSH
39510: CALL_OW 311
39514: IFFALSE 39518
// continue ;
39516: GO 39317
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39518: LD_VAR 0 6
39522: PPUSH
39523: LD_INT 3
39525: PUSH
39526: LD_INT 60
39528: PUSH
39529: EMPTY
39530: LIST
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 3
39538: PUSH
39539: LD_INT 55
39541: PUSH
39542: EMPTY
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PPUSH
39553: CALL_OW 72
39557: IFFALSE 39665
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39559: LD_ADDR_VAR 0 18
39563: PUSH
39564: LD_VAR 0 6
39568: PPUSH
39569: LD_INT 3
39571: PUSH
39572: LD_INT 60
39574: PUSH
39575: EMPTY
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: LD_INT 55
39587: PUSH
39588: EMPTY
39589: LIST
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PPUSH
39599: CALL_OW 72
39603: PUSH
39604: LD_INT 1
39606: ARRAY
39607: ST_TO_ADDR
// if IsInUnit ( driver ) then
39608: LD_VAR 0 18
39612: PPUSH
39613: CALL_OW 310
39617: IFFALSE 39628
// ComExit ( driver ) ;
39619: LD_VAR 0 18
39623: PPUSH
39624: CALL 64990 0 1
// AddComEnterUnit ( driver , tmp ) ;
39628: LD_VAR 0 18
39632: PPUSH
39633: LD_VAR 0 13
39637: PPUSH
39638: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39642: LD_VAR 0 18
39646: PPUSH
39647: LD_VAR 0 7
39651: PPUSH
39652: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39656: LD_VAR 0 18
39660: PPUSH
39661: CALL_OW 181
// end ; continue ;
39665: GO 39317
// end ; if not cleaners or not tmp in cleaners then
39667: LD_VAR 0 6
39671: NOT
39672: PUSH
39673: LD_VAR 0 13
39677: PUSH
39678: LD_VAR 0 6
39682: IN
39683: NOT
39684: OR
39685: IFFALSE 39992
// begin if dep then
39687: LD_VAR 0 17
39691: IFFALSE 39827
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39693: LD_ADDR_VAR 0 16
39697: PUSH
39698: LD_VAR 0 17
39702: PUSH
39703: LD_INT 1
39705: ARRAY
39706: PPUSH
39707: CALL_OW 250
39711: PPUSH
39712: LD_VAR 0 17
39716: PUSH
39717: LD_INT 1
39719: ARRAY
39720: PPUSH
39721: CALL_OW 254
39725: PPUSH
39726: LD_INT 5
39728: PPUSH
39729: CALL_OW 272
39733: PUSH
39734: LD_VAR 0 17
39738: PUSH
39739: LD_INT 1
39741: ARRAY
39742: PPUSH
39743: CALL_OW 251
39747: PPUSH
39748: LD_VAR 0 17
39752: PUSH
39753: LD_INT 1
39755: ARRAY
39756: PPUSH
39757: CALL_OW 254
39761: PPUSH
39762: LD_INT 5
39764: PPUSH
39765: CALL_OW 273
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39774: LD_VAR 0 16
39778: PUSH
39779: LD_INT 1
39781: ARRAY
39782: PPUSH
39783: LD_VAR 0 16
39787: PUSH
39788: LD_INT 2
39790: ARRAY
39791: PPUSH
39792: CALL_OW 488
39796: IFFALSE 39827
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39798: LD_VAR 0 13
39802: PPUSH
39803: LD_VAR 0 16
39807: PUSH
39808: LD_INT 1
39810: ARRAY
39811: PPUSH
39812: LD_VAR 0 16
39816: PUSH
39817: LD_INT 2
39819: ARRAY
39820: PPUSH
39821: CALL_OW 111
// continue ;
39825: GO 39317
// end ; end ; r := GetDir ( tmp ) ;
39827: LD_ADDR_VAR 0 15
39831: PUSH
39832: LD_VAR 0 13
39836: PPUSH
39837: CALL_OW 254
39841: ST_TO_ADDR
// if r = 5 then
39842: LD_VAR 0 15
39846: PUSH
39847: LD_INT 5
39849: EQUAL
39850: IFFALSE 39860
// r := 0 ;
39852: LD_ADDR_VAR 0 15
39856: PUSH
39857: LD_INT 0
39859: ST_TO_ADDR
// for j = r to 5 do
39860: LD_ADDR_VAR 0 10
39864: PUSH
39865: DOUBLE
39866: LD_VAR 0 15
39870: DEC
39871: ST_TO_ADDR
39872: LD_INT 5
39874: PUSH
39875: FOR_TO
39876: IFFALSE 39990
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39878: LD_ADDR_VAR 0 11
39882: PUSH
39883: LD_VAR 0 13
39887: PPUSH
39888: CALL_OW 250
39892: PPUSH
39893: LD_VAR 0 10
39897: PPUSH
39898: LD_INT 2
39900: PPUSH
39901: CALL_OW 272
39905: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39906: LD_ADDR_VAR 0 12
39910: PUSH
39911: LD_VAR 0 13
39915: PPUSH
39916: CALL_OW 251
39920: PPUSH
39921: LD_VAR 0 10
39925: PPUSH
39926: LD_INT 2
39928: PPUSH
39929: CALL_OW 273
39933: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39934: LD_VAR 0 11
39938: PPUSH
39939: LD_VAR 0 12
39943: PPUSH
39944: CALL_OW 488
39948: PUSH
39949: LD_VAR 0 11
39953: PPUSH
39954: LD_VAR 0 12
39958: PPUSH
39959: CALL_OW 428
39963: NOT
39964: AND
39965: IFFALSE 39988
// begin ComMoveXY ( tmp , _x , _y ) ;
39967: LD_VAR 0 13
39971: PPUSH
39972: LD_VAR 0 11
39976: PPUSH
39977: LD_VAR 0 12
39981: PPUSH
39982: CALL_OW 111
// break ;
39986: GO 39990
// end ; end ;
39988: GO 39875
39990: POP
39991: POP
// end ; end ;
39992: GO 39317
39994: POP
39995: POP
// end ;
39996: LD_VAR 0 8
40000: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40001: LD_INT 0
40003: PPUSH
// result := true ;
40004: LD_ADDR_VAR 0 3
40008: PUSH
40009: LD_INT 1
40011: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40012: LD_VAR 0 2
40016: PUSH
40017: LD_INT 24
40019: DOUBLE
40020: EQUAL
40021: IFTRUE 40031
40023: LD_INT 33
40025: DOUBLE
40026: EQUAL
40027: IFTRUE 40031
40029: GO 40056
40031: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40032: LD_ADDR_VAR 0 3
40036: PUSH
40037: LD_INT 32
40039: PPUSH
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 321
40049: PUSH
40050: LD_INT 2
40052: EQUAL
40053: ST_TO_ADDR
40054: GO 40372
40056: LD_INT 20
40058: DOUBLE
40059: EQUAL
40060: IFTRUE 40064
40062: GO 40089
40064: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40065: LD_ADDR_VAR 0 3
40069: PUSH
40070: LD_INT 6
40072: PPUSH
40073: LD_VAR 0 1
40077: PPUSH
40078: CALL_OW 321
40082: PUSH
40083: LD_INT 2
40085: EQUAL
40086: ST_TO_ADDR
40087: GO 40372
40089: LD_INT 22
40091: DOUBLE
40092: EQUAL
40093: IFTRUE 40103
40095: LD_INT 36
40097: DOUBLE
40098: EQUAL
40099: IFTRUE 40103
40101: GO 40128
40103: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40104: LD_ADDR_VAR 0 3
40108: PUSH
40109: LD_INT 15
40111: PPUSH
40112: LD_VAR 0 1
40116: PPUSH
40117: CALL_OW 321
40121: PUSH
40122: LD_INT 2
40124: EQUAL
40125: ST_TO_ADDR
40126: GO 40372
40128: LD_INT 30
40130: DOUBLE
40131: EQUAL
40132: IFTRUE 40136
40134: GO 40161
40136: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40137: LD_ADDR_VAR 0 3
40141: PUSH
40142: LD_INT 20
40144: PPUSH
40145: LD_VAR 0 1
40149: PPUSH
40150: CALL_OW 321
40154: PUSH
40155: LD_INT 2
40157: EQUAL
40158: ST_TO_ADDR
40159: GO 40372
40161: LD_INT 28
40163: DOUBLE
40164: EQUAL
40165: IFTRUE 40175
40167: LD_INT 21
40169: DOUBLE
40170: EQUAL
40171: IFTRUE 40175
40173: GO 40200
40175: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40176: LD_ADDR_VAR 0 3
40180: PUSH
40181: LD_INT 21
40183: PPUSH
40184: LD_VAR 0 1
40188: PPUSH
40189: CALL_OW 321
40193: PUSH
40194: LD_INT 2
40196: EQUAL
40197: ST_TO_ADDR
40198: GO 40372
40200: LD_INT 16
40202: DOUBLE
40203: EQUAL
40204: IFTRUE 40208
40206: GO 40233
40208: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40209: LD_ADDR_VAR 0 3
40213: PUSH
40214: LD_INT 84
40216: PPUSH
40217: LD_VAR 0 1
40221: PPUSH
40222: CALL_OW 321
40226: PUSH
40227: LD_INT 2
40229: EQUAL
40230: ST_TO_ADDR
40231: GO 40372
40233: LD_INT 19
40235: DOUBLE
40236: EQUAL
40237: IFTRUE 40247
40239: LD_INT 23
40241: DOUBLE
40242: EQUAL
40243: IFTRUE 40247
40245: GO 40272
40247: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40248: LD_ADDR_VAR 0 3
40252: PUSH
40253: LD_INT 83
40255: PPUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 321
40265: PUSH
40266: LD_INT 2
40268: EQUAL
40269: ST_TO_ADDR
40270: GO 40372
40272: LD_INT 17
40274: DOUBLE
40275: EQUAL
40276: IFTRUE 40280
40278: GO 40305
40280: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40281: LD_ADDR_VAR 0 3
40285: PUSH
40286: LD_INT 39
40288: PPUSH
40289: LD_VAR 0 1
40293: PPUSH
40294: CALL_OW 321
40298: PUSH
40299: LD_INT 2
40301: EQUAL
40302: ST_TO_ADDR
40303: GO 40372
40305: LD_INT 18
40307: DOUBLE
40308: EQUAL
40309: IFTRUE 40313
40311: GO 40338
40313: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40314: LD_ADDR_VAR 0 3
40318: PUSH
40319: LD_INT 40
40321: PPUSH
40322: LD_VAR 0 1
40326: PPUSH
40327: CALL_OW 321
40331: PUSH
40332: LD_INT 2
40334: EQUAL
40335: ST_TO_ADDR
40336: GO 40372
40338: LD_INT 27
40340: DOUBLE
40341: EQUAL
40342: IFTRUE 40346
40344: GO 40371
40346: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_INT 35
40354: PPUSH
40355: LD_VAR 0 1
40359: PPUSH
40360: CALL_OW 321
40364: PUSH
40365: LD_INT 2
40367: EQUAL
40368: ST_TO_ADDR
40369: GO 40372
40371: POP
// end ;
40372: LD_VAR 0 3
40376: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40377: LD_INT 0
40379: PPUSH
40380: PPUSH
40381: PPUSH
40382: PPUSH
40383: PPUSH
40384: PPUSH
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
40389: PPUSH
// result := false ;
40390: LD_ADDR_VAR 0 6
40394: PUSH
40395: LD_INT 0
40397: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40398: LD_VAR 0 1
40402: NOT
40403: PUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 266
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: IN
40424: NOT
40425: OR
40426: PUSH
40427: LD_VAR 0 2
40431: NOT
40432: OR
40433: PUSH
40434: LD_VAR 0 5
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: LD_INT 3
40450: PUSH
40451: LD_INT 4
40453: PUSH
40454: LD_INT 5
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: IN
40465: NOT
40466: OR
40467: PUSH
40468: LD_VAR 0 3
40472: PPUSH
40473: LD_VAR 0 4
40477: PPUSH
40478: CALL_OW 488
40482: NOT
40483: OR
40484: IFFALSE 40488
// exit ;
40486: GO 41224
// side := GetSide ( depot ) ;
40488: LD_ADDR_VAR 0 9
40492: PUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 255
40502: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40503: LD_VAR 0 9
40507: PPUSH
40508: LD_VAR 0 2
40512: PPUSH
40513: CALL 40001 0 2
40517: NOT
40518: IFFALSE 40522
// exit ;
40520: GO 41224
// pom := GetBase ( depot ) ;
40522: LD_ADDR_VAR 0 10
40526: PUSH
40527: LD_VAR 0 1
40531: PPUSH
40532: CALL_OW 274
40536: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40537: LD_ADDR_VAR 0 11
40541: PUSH
40542: LD_VAR 0 2
40546: PPUSH
40547: LD_VAR 0 1
40551: PPUSH
40552: CALL_OW 248
40556: PPUSH
40557: CALL_OW 450
40561: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40562: LD_VAR 0 10
40566: PPUSH
40567: LD_INT 1
40569: PPUSH
40570: CALL_OW 275
40574: PUSH
40575: LD_VAR 0 11
40579: PUSH
40580: LD_INT 1
40582: ARRAY
40583: GREATEREQUAL
40584: PUSH
40585: LD_VAR 0 10
40589: PPUSH
40590: LD_INT 2
40592: PPUSH
40593: CALL_OW 275
40597: PUSH
40598: LD_VAR 0 11
40602: PUSH
40603: LD_INT 2
40605: ARRAY
40606: GREATEREQUAL
40607: AND
40608: PUSH
40609: LD_VAR 0 10
40613: PPUSH
40614: LD_INT 3
40616: PPUSH
40617: CALL_OW 275
40621: PUSH
40622: LD_VAR 0 11
40626: PUSH
40627: LD_INT 3
40629: ARRAY
40630: GREATEREQUAL
40631: AND
40632: NOT
40633: IFFALSE 40637
// exit ;
40635: GO 41224
// if GetBType ( depot ) = b_depot then
40637: LD_VAR 0 1
40641: PPUSH
40642: CALL_OW 266
40646: PUSH
40647: LD_INT 0
40649: EQUAL
40650: IFFALSE 40662
// dist := 28 else
40652: LD_ADDR_VAR 0 14
40656: PUSH
40657: LD_INT 28
40659: ST_TO_ADDR
40660: GO 40670
// dist := 36 ;
40662: LD_ADDR_VAR 0 14
40666: PUSH
40667: LD_INT 36
40669: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40670: LD_VAR 0 1
40674: PPUSH
40675: LD_VAR 0 3
40679: PPUSH
40680: LD_VAR 0 4
40684: PPUSH
40685: CALL_OW 297
40689: PUSH
40690: LD_VAR 0 14
40694: GREATER
40695: IFFALSE 40699
// exit ;
40697: GO 41224
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40699: LD_ADDR_VAR 0 12
40703: PUSH
40704: LD_VAR 0 2
40708: PPUSH
40709: LD_VAR 0 3
40713: PPUSH
40714: LD_VAR 0 4
40718: PPUSH
40719: LD_VAR 0 5
40723: PPUSH
40724: LD_VAR 0 1
40728: PPUSH
40729: CALL_OW 248
40733: PPUSH
40734: LD_INT 0
40736: PPUSH
40737: CALL 41229 0 6
40741: ST_TO_ADDR
// if not hexes then
40742: LD_VAR 0 12
40746: NOT
40747: IFFALSE 40751
// exit ;
40749: GO 41224
// hex := GetHexInfo ( x , y ) ;
40751: LD_ADDR_VAR 0 15
40755: PUSH
40756: LD_VAR 0 3
40760: PPUSH
40761: LD_VAR 0 4
40765: PPUSH
40766: CALL_OW 546
40770: ST_TO_ADDR
// if hex [ 1 ] then
40771: LD_VAR 0 15
40775: PUSH
40776: LD_INT 1
40778: ARRAY
40779: IFFALSE 40783
// exit ;
40781: GO 41224
// height := hex [ 2 ] ;
40783: LD_ADDR_VAR 0 13
40787: PUSH
40788: LD_VAR 0 15
40792: PUSH
40793: LD_INT 2
40795: ARRAY
40796: ST_TO_ADDR
// for i = 1 to hexes do
40797: LD_ADDR_VAR 0 7
40801: PUSH
40802: DOUBLE
40803: LD_INT 1
40805: DEC
40806: ST_TO_ADDR
40807: LD_VAR 0 12
40811: PUSH
40812: FOR_TO
40813: IFFALSE 41143
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40815: LD_VAR 0 12
40819: PUSH
40820: LD_VAR 0 7
40824: ARRAY
40825: PUSH
40826: LD_INT 1
40828: ARRAY
40829: PPUSH
40830: LD_VAR 0 12
40834: PUSH
40835: LD_VAR 0 7
40839: ARRAY
40840: PUSH
40841: LD_INT 2
40843: ARRAY
40844: PPUSH
40845: CALL_OW 488
40849: NOT
40850: PUSH
40851: LD_VAR 0 12
40855: PUSH
40856: LD_VAR 0 7
40860: ARRAY
40861: PUSH
40862: LD_INT 1
40864: ARRAY
40865: PPUSH
40866: LD_VAR 0 12
40870: PUSH
40871: LD_VAR 0 7
40875: ARRAY
40876: PUSH
40877: LD_INT 2
40879: ARRAY
40880: PPUSH
40881: CALL_OW 428
40885: PUSH
40886: LD_INT 0
40888: GREATER
40889: OR
40890: PUSH
40891: LD_VAR 0 12
40895: PUSH
40896: LD_VAR 0 7
40900: ARRAY
40901: PUSH
40902: LD_INT 1
40904: ARRAY
40905: PPUSH
40906: LD_VAR 0 12
40910: PUSH
40911: LD_VAR 0 7
40915: ARRAY
40916: PUSH
40917: LD_INT 2
40919: ARRAY
40920: PPUSH
40921: CALL_OW 351
40925: OR
40926: IFFALSE 40932
// exit ;
40928: POP
40929: POP
40930: GO 41224
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40932: LD_ADDR_VAR 0 8
40936: PUSH
40937: LD_VAR 0 12
40941: PUSH
40942: LD_VAR 0 7
40946: ARRAY
40947: PUSH
40948: LD_INT 1
40950: ARRAY
40951: PPUSH
40952: LD_VAR 0 12
40956: PUSH
40957: LD_VAR 0 7
40961: ARRAY
40962: PUSH
40963: LD_INT 2
40965: ARRAY
40966: PPUSH
40967: CALL_OW 546
40971: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40972: LD_VAR 0 8
40976: PUSH
40977: LD_INT 1
40979: ARRAY
40980: PUSH
40981: LD_VAR 0 8
40985: PUSH
40986: LD_INT 2
40988: ARRAY
40989: PUSH
40990: LD_VAR 0 13
40994: PUSH
40995: LD_INT 2
40997: PLUS
40998: GREATER
40999: OR
41000: PUSH
41001: LD_VAR 0 8
41005: PUSH
41006: LD_INT 2
41008: ARRAY
41009: PUSH
41010: LD_VAR 0 13
41014: PUSH
41015: LD_INT 2
41017: MINUS
41018: LESS
41019: OR
41020: PUSH
41021: LD_VAR 0 8
41025: PUSH
41026: LD_INT 3
41028: ARRAY
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 8
41035: PUSH
41036: LD_INT 9
41038: PUSH
41039: LD_INT 10
41041: PUSH
41042: LD_INT 11
41044: PUSH
41045: LD_INT 12
41047: PUSH
41048: LD_INT 13
41050: PUSH
41051: LD_INT 16
41053: PUSH
41054: LD_INT 17
41056: PUSH
41057: LD_INT 18
41059: PUSH
41060: LD_INT 19
41062: PUSH
41063: LD_INT 20
41065: PUSH
41066: LD_INT 21
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: IN
41084: NOT
41085: OR
41086: PUSH
41087: LD_VAR 0 8
41091: PUSH
41092: LD_INT 5
41094: ARRAY
41095: NOT
41096: OR
41097: PUSH
41098: LD_VAR 0 8
41102: PUSH
41103: LD_INT 6
41105: ARRAY
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 7
41115: PUSH
41116: LD_INT 9
41118: PUSH
41119: LD_INT 10
41121: PUSH
41122: LD_INT 11
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: IN
41133: NOT
41134: OR
41135: IFFALSE 41141
// exit ;
41137: POP
41138: POP
41139: GO 41224
// end ;
41141: GO 40812
41143: POP
41144: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41145: LD_VAR 0 9
41149: PPUSH
41150: LD_VAR 0 3
41154: PPUSH
41155: LD_VAR 0 4
41159: PPUSH
41160: LD_INT 20
41162: PPUSH
41163: CALL 33176 0 4
41167: PUSH
41168: LD_INT 4
41170: ARRAY
41171: IFFALSE 41175
// exit ;
41173: GO 41224
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41175: LD_VAR 0 2
41179: PUSH
41180: LD_INT 29
41182: PUSH
41183: LD_INT 30
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: IN
41190: PUSH
41191: LD_VAR 0 3
41195: PPUSH
41196: LD_VAR 0 4
41200: PPUSH
41201: LD_VAR 0 9
41205: PPUSH
41206: CALL_OW 440
41210: NOT
41211: AND
41212: IFFALSE 41216
// exit ;
41214: GO 41224
// result := true ;
41216: LD_ADDR_VAR 0 6
41220: PUSH
41221: LD_INT 1
41223: ST_TO_ADDR
// end ;
41224: LD_VAR 0 6
41228: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41229: LD_INT 0
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
41241: PPUSH
41242: PPUSH
41243: PPUSH
41244: PPUSH
41245: PPUSH
41246: PPUSH
41247: PPUSH
41248: PPUSH
41249: PPUSH
41250: PPUSH
41251: PPUSH
41252: PPUSH
41253: PPUSH
41254: PPUSH
41255: PPUSH
41256: PPUSH
41257: PPUSH
41258: PPUSH
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
// result = [ ] ;
41289: LD_ADDR_VAR 0 7
41293: PUSH
41294: EMPTY
41295: ST_TO_ADDR
// temp_list = [ ] ;
41296: LD_ADDR_VAR 0 9
41300: PUSH
41301: EMPTY
41302: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41303: LD_VAR 0 4
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: LD_INT 3
41319: PUSH
41320: LD_INT 4
41322: PUSH
41323: LD_INT 5
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: IN
41334: NOT
41335: PUSH
41336: LD_VAR 0 1
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: IN
41351: PUSH
41352: LD_VAR 0 5
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: LD_INT 3
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: LIST
41370: IN
41371: NOT
41372: AND
41373: OR
41374: IFFALSE 41378
// exit ;
41376: GO 59769
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41378: LD_VAR 0 1
41382: PUSH
41383: LD_INT 6
41385: PUSH
41386: LD_INT 7
41388: PUSH
41389: LD_INT 8
41391: PUSH
41392: LD_INT 13
41394: PUSH
41395: LD_INT 12
41397: PUSH
41398: LD_INT 15
41400: PUSH
41401: LD_INT 11
41403: PUSH
41404: LD_INT 14
41406: PUSH
41407: LD_INT 10
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: IN
41421: IFFALSE 41431
// btype = b_lab ;
41423: LD_ADDR_VAR 0 1
41427: PUSH
41428: LD_INT 6
41430: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41431: LD_VAR 0 6
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: LIST
41449: IN
41450: NOT
41451: PUSH
41452: LD_VAR 0 1
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 3
41468: PUSH
41469: LD_INT 6
41471: PUSH
41472: LD_INT 36
41474: PUSH
41475: LD_INT 4
41477: PUSH
41478: LD_INT 5
41480: PUSH
41481: LD_INT 31
41483: PUSH
41484: LD_INT 32
41486: PUSH
41487: LD_INT 33
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: IN
41503: NOT
41504: PUSH
41505: LD_VAR 0 6
41509: PUSH
41510: LD_INT 1
41512: EQUAL
41513: AND
41514: OR
41515: PUSH
41516: LD_VAR 0 1
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: LD_INT 3
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: IN
41531: NOT
41532: PUSH
41533: LD_VAR 0 6
41537: PUSH
41538: LD_INT 2
41540: EQUAL
41541: AND
41542: OR
41543: IFFALSE 41553
// mode = 0 ;
41545: LD_ADDR_VAR 0 6
41549: PUSH
41550: LD_INT 0
41552: ST_TO_ADDR
// case mode of 0 :
41553: LD_VAR 0 6
41557: PUSH
41558: LD_INT 0
41560: DOUBLE
41561: EQUAL
41562: IFTRUE 41566
41564: GO 53019
41566: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41567: LD_ADDR_VAR 0 11
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: LD_INT 3
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 3
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41760: LD_ADDR_VAR 0 12
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 3
41917: NEG
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 3
41928: NEG
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41956: LD_ADDR_VAR 0 13
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 2
42079: NEG
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: NEG
42092: PUSH
42093: LD_INT 2
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 2
42103: NEG
42104: PUSH
42105: LD_INT 3
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 3
42115: NEG
42116: PUSH
42117: LD_INT 2
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 3
42127: NEG
42128: PUSH
42129: LD_INT 3
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42155: LD_ADDR_VAR 0 14
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: LD_INT 2
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 3
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 3
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42351: LD_ADDR_VAR 0 15
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42544: LD_ADDR_VAR 0 16
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 2
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: NEG
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: LD_INT 3
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: LD_INT 3
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42737: LD_ADDR_VAR 0 17
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42967: LD_ADDR_VAR 0 18
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: LD_INT 2
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43197: LD_ADDR_VAR 0 19
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43427: LD_ADDR_VAR 0 20
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43657: LD_ADDR_VAR 0 21
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43887: LD_ADDR_VAR 0 22
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 2
44074: NEG
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44117: LD_ADDR_VAR 0 23
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: NEG
44329: PUSH
44330: LD_INT 3
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 3
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44397: LD_ADDR_VAR 0 24
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44673: LD_ADDR_VAR 0 25
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 3
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 3
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44947: LD_ADDR_VAR 0 26
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 3
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 3
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45223: LD_ADDR_VAR 0 27
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 2
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 3
45468: NEG
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45503: LD_ADDR_VAR 0 28
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 3
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 3
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 3
45738: NEG
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 3
45750: NEG
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45785: LD_ADDR_VAR 0 29
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: LD_INT 3
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 3
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 3
46029: NEG
46030: PUSH
46031: LD_INT 2
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46064: LD_ADDR_VAR 0 30
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 3
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 3
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 3
46307: NEG
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46342: LD_ADDR_VAR 0 31
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: LD_INT 3
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 3
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 3
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 3
46585: NEG
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46620: LD_ADDR_VAR 0 32
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 3
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 3
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 3
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46898: LD_ADDR_VAR 0 33
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 3
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 3
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 3
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 3
47142: NEG
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47177: LD_ADDR_VAR 0 34
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: LD_INT 3
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47457: LD_ADDR_VAR 0 35
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47569: LD_ADDR_VAR 0 36
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47681: LD_ADDR_VAR 0 37
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47793: LD_ADDR_VAR 0 38
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47905: LD_ADDR_VAR 0 39
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48017: LD_ADDR_VAR 0 40
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48129: LD_ADDR_VAR 0 41
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 3
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 3
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 3
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 3
48372: PUSH
48373: LD_INT 3
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 3
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 3
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 3
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: NEG
48439: PUSH
48440: LD_INT 3
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48479: LD_ADDR_VAR 0 42
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: LD_INT 3
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: LD_INT 3
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 3
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: LD_INT 3
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 3
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 3
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 3
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 3
48776: NEG
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 3
48788: NEG
48789: PUSH
48790: LD_INT 3
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48829: LD_ADDR_VAR 0 43
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 2
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 3
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 3
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 3
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49177: LD_ADDR_VAR 0 44
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 3
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 3
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 3
49420: PUSH
49421: LD_INT 3
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 3
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: NEG
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 3
49474: NEG
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49527: LD_ADDR_VAR 0 45
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: NEG
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: LD_INT 3
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 3
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 3
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: LD_INT 3
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 3
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 3
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 3
49824: NEG
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 3
49836: NEG
49837: PUSH
49838: LD_INT 3
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49877: LD_ADDR_VAR 0 46
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 3
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 3
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 3
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 3
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 3
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 3
50173: NEG
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 3
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50225: LD_ADDR_VAR 0 47
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50376: LD_ADDR_VAR 0 48
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50523: LD_ADDR_VAR 0 49
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50667: LD_ADDR_VAR 0 50
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50811: LD_ADDR_VAR 0 51
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50958: LD_ADDR_VAR 0 52
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51109: LD_ADDR_VAR 0 53
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51339: LD_ADDR_VAR 0 54
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51569: LD_ADDR_VAR 0 55
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51799: LD_ADDR_VAR 0 56
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52029: LD_ADDR_VAR 0 57
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52259: LD_ADDR_VAR 0 58
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52489: LD_ADDR_VAR 0 59
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52577: LD_ADDR_VAR 0 60
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52665: LD_ADDR_VAR 0 61
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52753: LD_ADDR_VAR 0 62
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52841: LD_ADDR_VAR 0 63
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52929: LD_ADDR_VAR 0 64
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// end ; 1 :
53017: GO 58914
53019: LD_INT 1
53021: DOUBLE
53022: EQUAL
53023: IFTRUE 53027
53025: GO 55650
53027: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53028: LD_ADDR_VAR 0 11
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 3
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53072: LD_ADDR_VAR 0 12
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 3
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 3
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53113: LD_ADDR_VAR 0 13
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53153: LD_ADDR_VAR 0 14
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 3
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: LIST
53193: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53194: LD_ADDR_VAR 0 15
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: LIST
53237: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53238: LD_ADDR_VAR 0 16
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: LD_INT 3
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 3
53257: NEG
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: NEG
53270: PUSH
53271: LD_INT 3
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: LIST
53283: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53284: LD_ADDR_VAR 0 17
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 3
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: LIST
53327: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53328: LD_ADDR_VAR 0 18
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 3
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53369: LD_ADDR_VAR 0 19
53373: PUSH
53374: LD_INT 3
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 3
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53409: LD_ADDR_VAR 0 20
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53450: LD_ADDR_VAR 0 21
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 3
53479: NEG
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: LIST
53493: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53494: LD_ADDR_VAR 0 22
53498: PUSH
53499: LD_INT 2
53501: NEG
53502: PUSH
53503: LD_INT 3
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: LD_INT 2
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 3
53525: NEG
53526: PUSH
53527: LD_INT 3
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53540: LD_ADDR_VAR 0 23
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 3
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 4
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53584: LD_ADDR_VAR 0 24
53588: PUSH
53589: LD_INT 3
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 3
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 4
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: LIST
53624: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53625: LD_ADDR_VAR 0 25
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 4
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: LD_INT 4
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53665: LD_ADDR_VAR 0 26
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 4
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: LIST
53705: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53706: LD_ADDR_VAR 0 27
53710: PUSH
53711: LD_INT 3
53713: NEG
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 3
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 4
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: LIST
53749: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53750: LD_ADDR_VAR 0 28
53754: PUSH
53755: LD_INT 3
53757: NEG
53758: PUSH
53759: LD_INT 3
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 3
53769: NEG
53770: PUSH
53771: LD_INT 4
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 4
53781: NEG
53782: PUSH
53783: LD_INT 3
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53796: LD_ADDR_VAR 0 29
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 4
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 4
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 5
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 5
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 4
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 6
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 6
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 5
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53951: LD_ADDR_VAR 0 30
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 3
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 4
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 4
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 4
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 5
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 5
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 5
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 6
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 6
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54094: LD_ADDR_VAR 0 31
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 3
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: LD_INT 3
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 4
54131: PUSH
54132: LD_INT 3
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 4
54141: PUSH
54142: LD_INT 4
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 3
54151: PUSH
54152: LD_INT 4
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 5
54161: PUSH
54162: LD_INT 4
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 5
54171: PUSH
54172: LD_INT 5
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 4
54181: PUSH
54182: LD_INT 5
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 6
54191: PUSH
54192: LD_INT 5
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 6
54201: PUSH
54202: LD_INT 6
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 5
54211: PUSH
54212: LD_INT 6
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54233: LD_ADDR_VAR 0 32
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 4
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 4
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 3
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 5
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 5
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 4
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 6
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 6
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 5
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54376: LD_ADDR_VAR 0 33
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: NEG
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 4
54428: NEG
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 4
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 4
54451: NEG
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 5
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 5
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 5
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 6
54496: NEG
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 6
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54531: LD_ADDR_VAR 0 34
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: LD_INT 3
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 3
54574: NEG
54575: PUSH
54576: LD_INT 4
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 4
54586: NEG
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 4
54598: NEG
54599: PUSH
54600: LD_INT 4
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 4
54610: NEG
54611: PUSH
54612: LD_INT 5
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 5
54622: NEG
54623: PUSH
54624: LD_INT 4
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 5
54634: NEG
54635: PUSH
54636: LD_INT 5
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 5
54646: NEG
54647: PUSH
54648: LD_INT 6
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 6
54658: NEG
54659: PUSH
54660: LD_INT 5
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 6
54670: NEG
54671: PUSH
54672: LD_INT 6
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54694: LD_ADDR_VAR 0 41
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 3
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54738: LD_ADDR_VAR 0 42
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54779: LD_ADDR_VAR 0 43
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 3
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: LIST
54818: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54819: LD_ADDR_VAR 0 44
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 3
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54860: LD_ADDR_VAR 0 45
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: LIST
54903: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54904: LD_ADDR_VAR 0 46
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: LD_INT 2
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: LIST
54949: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54950: LD_ADDR_VAR 0 47
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 3
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54983: LD_ADDR_VAR 0 48
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55014: LD_ADDR_VAR 0 49
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 3
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55043: LD_ADDR_VAR 0 50
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55072: LD_ADDR_VAR 0 51
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55103: LD_ADDR_VAR 0 52
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 3
55122: NEG
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55136: LD_ADDR_VAR 0 53
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 3
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55180: LD_ADDR_VAR 0 54
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 3
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55221: LD_ADDR_VAR 0 55
55225: PUSH
55226: LD_INT 3
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 3
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55261: LD_ADDR_VAR 0 56
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: LIST
55301: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55302: LD_ADDR_VAR 0 57
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 3
55331: NEG
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55346: LD_ADDR_VAR 0 58
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 3
55365: NEG
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 3
55377: NEG
55378: PUSH
55379: LD_INT 3
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: LIST
55391: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55392: LD_ADDR_VAR 0 59
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: LIST
55435: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55436: LD_ADDR_VAR 0 60
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55477: LD_ADDR_VAR 0 61
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55517: LD_ADDR_VAR 0 62
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55558: LD_ADDR_VAR 0 63
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55602: LD_ADDR_VAR 0 64
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: LIST
55647: ST_TO_ADDR
// end ; 2 :
55648: GO 58914
55650: LD_INT 2
55652: DOUBLE
55653: EQUAL
55654: IFTRUE 55658
55656: GO 58913
55658: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55659: LD_ADDR_VAR 0 29
55663: PUSH
55664: LD_INT 4
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 4
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 5
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 5
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 4
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 3
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 3
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 5
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: PUSH
55760: LD_INT 3
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 3
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 4
55779: PUSH
55780: LD_INT 3
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 4
55789: PUSH
55790: LD_INT 4
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: LD_INT 4
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 4
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 4
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 4
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 5
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 5
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 4
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: LD_INT 3
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 5
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: NEG
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 3
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 4
55998: NEG
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 4
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 4
56021: NEG
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 4
56044: NEG
56045: PUSH
56046: LD_INT 4
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 4
56056: NEG
56057: PUSH
56058: LD_INT 5
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: LD_INT 4
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 4
56092: NEG
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 5
56104: NEG
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 5
56116: NEG
56117: PUSH
56118: LD_INT 5
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: LD_INT 5
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 5
56140: NEG
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56197: LD_ADDR_VAR 0 30
56201: PUSH
56202: LD_INT 4
56204: PUSH
56205: LD_INT 4
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 4
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 5
56224: PUSH
56225: LD_INT 4
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 5
56234: PUSH
56235: LD_INT 5
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 4
56244: PUSH
56245: LD_INT 5
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: LD_INT 4
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 5
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 3
56284: PUSH
56285: LD_INT 5
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 4
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 4
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: LD_INT 4
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: NEG
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 4
56387: NEG
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 4
56398: NEG
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: NEG
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 4
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 5
56443: NEG
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 5
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 5
56466: NEG
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: LD_INT 3
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: LD_INT 4
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: LD_INT 3
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 4
56549: NEG
56550: PUSH
56551: LD_INT 3
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 4
56561: NEG
56562: PUSH
56563: LD_INT 4
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: LD_INT 4
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 4
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 5
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 4
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 3
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 3
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 4
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 5
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: LD_INT 5
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56744: LD_ADDR_VAR 0 31
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 4
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 4
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 5
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 5
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 4
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: LD_INT 5
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: LD_INT 3
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 3
56844: NEG
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 3
56855: NEG
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: NEG
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 4
56900: NEG
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 4
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 4
56923: NEG
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 4
56946: NEG
56947: PUSH
56948: LD_INT 4
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 4
56958: NEG
56959: PUSH
56960: LD_INT 5
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: NEG
56971: PUSH
56972: LD_INT 4
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: LD_INT 3
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 4
56994: NEG
56995: PUSH
56996: LD_INT 3
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 5
57006: NEG
57007: PUSH
57008: LD_INT 4
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 5
57018: NEG
57019: PUSH
57020: LD_INT 5
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: NEG
57031: PUSH
57032: LD_INT 5
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 5
57042: NEG
57043: PUSH
57044: LD_INT 3
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 3
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 2
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 3
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 4
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: LD_INT 4
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 4
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 4
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 5
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 5
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 4
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 3
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 3
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 5
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57294: LD_ADDR_VAR 0 32
57298: PUSH
57299: LD_INT 4
57301: NEG
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 4
57312: NEG
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 3
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 4
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 5
57357: NEG
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 5
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 5
57380: NEG
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 3
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: LD_INT 4
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 4
57463: NEG
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 4
57475: NEG
57476: PUSH
57477: LD_INT 4
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 4
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 4
57499: NEG
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 4
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 5
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 4
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 3
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 4
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 5
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 5
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 3
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 4
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 4
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 4
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 4
57706: PUSH
57707: LD_INT 4
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 4
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 5
57726: PUSH
57727: LD_INT 4
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 5
57736: PUSH
57737: LD_INT 5
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 4
57746: PUSH
57747: LD_INT 5
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: LD_INT 4
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 5
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: LD_INT 5
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57841: LD_ADDR_VAR 0 33
57845: PUSH
57846: LD_INT 4
57848: NEG
57849: PUSH
57850: LD_INT 4
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 4
57860: NEG
57861: PUSH
57862: LD_INT 5
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 3
57872: NEG
57873: PUSH
57874: LD_INT 4
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: LD_INT 3
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 4
57896: NEG
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 5
57908: NEG
57909: PUSH
57910: LD_INT 4
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 5
57920: NEG
57921: PUSH
57922: LD_INT 5
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: LD_INT 5
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 5
57944: NEG
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 3
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: LD_INT 4
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 3
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: LD_INT 4
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: LD_INT 4
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 4
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 4
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 5
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 5
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 4
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 3
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 5
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 4
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 4
58181: PUSH
58182: LD_INT 4
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: LD_INT 4
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 4
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 2
58231: PUSH
58232: LD_INT 4
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 4
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 3
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 4
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 5
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 5
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 4
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: LD_INT 5
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: NEG
58324: PUSH
58325: LD_INT 3
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58379: LD_ADDR_VAR 0 34
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 4
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: LD_INT 5
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: LD_INT 4
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 3
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 4
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 5
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: LD_INT 5
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 4
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 4
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 4
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 4
58581: PUSH
58582: LD_INT 4
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 4
58591: PUSH
58592: LD_INT 3
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 5
58601: PUSH
58602: LD_INT 4
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 5
58611: PUSH
58612: LD_INT 5
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 4
58621: PUSH
58622: LD_INT 5
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 3
58631: PUSH
58632: LD_INT 4
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: LD_INT 3
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 5
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: LD_INT 5
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: LD_INT 3
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 4
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 4
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 2
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: LD_INT 4
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 4
58764: NEG
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 4
58775: NEG
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 4
58809: NEG
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 5
58820: NEG
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 5
58831: NEG
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 5
58843: NEG
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: ST_TO_ADDR
// end ; end ;
58911: GO 58914
58913: POP
// case btype of b_depot , b_warehouse :
58914: LD_VAR 0 1
58918: PUSH
58919: LD_INT 0
58921: DOUBLE
58922: EQUAL
58923: IFTRUE 58933
58925: LD_INT 1
58927: DOUBLE
58928: EQUAL
58929: IFTRUE 58933
58931: GO 59134
58933: POP
// case nation of nation_american :
58934: LD_VAR 0 5
58938: PUSH
58939: LD_INT 1
58941: DOUBLE
58942: EQUAL
58943: IFTRUE 58947
58945: GO 59003
58947: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58948: LD_ADDR_VAR 0 9
58952: PUSH
58953: LD_VAR 0 11
58957: PUSH
58958: LD_VAR 0 12
58962: PUSH
58963: LD_VAR 0 13
58967: PUSH
58968: LD_VAR 0 14
58972: PUSH
58973: LD_VAR 0 15
58977: PUSH
58978: LD_VAR 0 16
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: PUSH
58991: LD_VAR 0 4
58995: PUSH
58996: LD_INT 1
58998: PLUS
58999: ARRAY
59000: ST_TO_ADDR
59001: GO 59132
59003: LD_INT 2
59005: DOUBLE
59006: EQUAL
59007: IFTRUE 59011
59009: GO 59067
59011: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59012: LD_ADDR_VAR 0 9
59016: PUSH
59017: LD_VAR 0 17
59021: PUSH
59022: LD_VAR 0 18
59026: PUSH
59027: LD_VAR 0 19
59031: PUSH
59032: LD_VAR 0 20
59036: PUSH
59037: LD_VAR 0 21
59041: PUSH
59042: LD_VAR 0 22
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: PUSH
59055: LD_VAR 0 4
59059: PUSH
59060: LD_INT 1
59062: PLUS
59063: ARRAY
59064: ST_TO_ADDR
59065: GO 59132
59067: LD_INT 3
59069: DOUBLE
59070: EQUAL
59071: IFTRUE 59075
59073: GO 59131
59075: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59076: LD_ADDR_VAR 0 9
59080: PUSH
59081: LD_VAR 0 23
59085: PUSH
59086: LD_VAR 0 24
59090: PUSH
59091: LD_VAR 0 25
59095: PUSH
59096: LD_VAR 0 26
59100: PUSH
59101: LD_VAR 0 27
59105: PUSH
59106: LD_VAR 0 28
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: PUSH
59119: LD_VAR 0 4
59123: PUSH
59124: LD_INT 1
59126: PLUS
59127: ARRAY
59128: ST_TO_ADDR
59129: GO 59132
59131: POP
59132: GO 59687
59134: LD_INT 2
59136: DOUBLE
59137: EQUAL
59138: IFTRUE 59148
59140: LD_INT 3
59142: DOUBLE
59143: EQUAL
59144: IFTRUE 59148
59146: GO 59204
59148: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59149: LD_ADDR_VAR 0 9
59153: PUSH
59154: LD_VAR 0 29
59158: PUSH
59159: LD_VAR 0 30
59163: PUSH
59164: LD_VAR 0 31
59168: PUSH
59169: LD_VAR 0 32
59173: PUSH
59174: LD_VAR 0 33
59178: PUSH
59179: LD_VAR 0 34
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: PUSH
59192: LD_VAR 0 4
59196: PUSH
59197: LD_INT 1
59199: PLUS
59200: ARRAY
59201: ST_TO_ADDR
59202: GO 59687
59204: LD_INT 16
59206: DOUBLE
59207: EQUAL
59208: IFTRUE 59266
59210: LD_INT 17
59212: DOUBLE
59213: EQUAL
59214: IFTRUE 59266
59216: LD_INT 18
59218: DOUBLE
59219: EQUAL
59220: IFTRUE 59266
59222: LD_INT 19
59224: DOUBLE
59225: EQUAL
59226: IFTRUE 59266
59228: LD_INT 22
59230: DOUBLE
59231: EQUAL
59232: IFTRUE 59266
59234: LD_INT 20
59236: DOUBLE
59237: EQUAL
59238: IFTRUE 59266
59240: LD_INT 21
59242: DOUBLE
59243: EQUAL
59244: IFTRUE 59266
59246: LD_INT 23
59248: DOUBLE
59249: EQUAL
59250: IFTRUE 59266
59252: LD_INT 24
59254: DOUBLE
59255: EQUAL
59256: IFTRUE 59266
59258: LD_INT 25
59260: DOUBLE
59261: EQUAL
59262: IFTRUE 59266
59264: GO 59322
59266: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59267: LD_ADDR_VAR 0 9
59271: PUSH
59272: LD_VAR 0 35
59276: PUSH
59277: LD_VAR 0 36
59281: PUSH
59282: LD_VAR 0 37
59286: PUSH
59287: LD_VAR 0 38
59291: PUSH
59292: LD_VAR 0 39
59296: PUSH
59297: LD_VAR 0 40
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: PUSH
59310: LD_VAR 0 4
59314: PUSH
59315: LD_INT 1
59317: PLUS
59318: ARRAY
59319: ST_TO_ADDR
59320: GO 59687
59322: LD_INT 6
59324: DOUBLE
59325: EQUAL
59326: IFTRUE 59378
59328: LD_INT 7
59330: DOUBLE
59331: EQUAL
59332: IFTRUE 59378
59334: LD_INT 8
59336: DOUBLE
59337: EQUAL
59338: IFTRUE 59378
59340: LD_INT 13
59342: DOUBLE
59343: EQUAL
59344: IFTRUE 59378
59346: LD_INT 12
59348: DOUBLE
59349: EQUAL
59350: IFTRUE 59378
59352: LD_INT 15
59354: DOUBLE
59355: EQUAL
59356: IFTRUE 59378
59358: LD_INT 11
59360: DOUBLE
59361: EQUAL
59362: IFTRUE 59378
59364: LD_INT 14
59366: DOUBLE
59367: EQUAL
59368: IFTRUE 59378
59370: LD_INT 10
59372: DOUBLE
59373: EQUAL
59374: IFTRUE 59378
59376: GO 59434
59378: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59379: LD_ADDR_VAR 0 9
59383: PUSH
59384: LD_VAR 0 41
59388: PUSH
59389: LD_VAR 0 42
59393: PUSH
59394: LD_VAR 0 43
59398: PUSH
59399: LD_VAR 0 44
59403: PUSH
59404: LD_VAR 0 45
59408: PUSH
59409: LD_VAR 0 46
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: PUSH
59422: LD_VAR 0 4
59426: PUSH
59427: LD_INT 1
59429: PLUS
59430: ARRAY
59431: ST_TO_ADDR
59432: GO 59687
59434: LD_INT 36
59436: DOUBLE
59437: EQUAL
59438: IFTRUE 59442
59440: GO 59498
59442: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59443: LD_ADDR_VAR 0 9
59447: PUSH
59448: LD_VAR 0 47
59452: PUSH
59453: LD_VAR 0 48
59457: PUSH
59458: LD_VAR 0 49
59462: PUSH
59463: LD_VAR 0 50
59467: PUSH
59468: LD_VAR 0 51
59472: PUSH
59473: LD_VAR 0 52
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: PUSH
59486: LD_VAR 0 4
59490: PUSH
59491: LD_INT 1
59493: PLUS
59494: ARRAY
59495: ST_TO_ADDR
59496: GO 59687
59498: LD_INT 4
59500: DOUBLE
59501: EQUAL
59502: IFTRUE 59524
59504: LD_INT 5
59506: DOUBLE
59507: EQUAL
59508: IFTRUE 59524
59510: LD_INT 34
59512: DOUBLE
59513: EQUAL
59514: IFTRUE 59524
59516: LD_INT 37
59518: DOUBLE
59519: EQUAL
59520: IFTRUE 59524
59522: GO 59580
59524: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59525: LD_ADDR_VAR 0 9
59529: PUSH
59530: LD_VAR 0 53
59534: PUSH
59535: LD_VAR 0 54
59539: PUSH
59540: LD_VAR 0 55
59544: PUSH
59545: LD_VAR 0 56
59549: PUSH
59550: LD_VAR 0 57
59554: PUSH
59555: LD_VAR 0 58
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: PUSH
59568: LD_VAR 0 4
59572: PUSH
59573: LD_INT 1
59575: PLUS
59576: ARRAY
59577: ST_TO_ADDR
59578: GO 59687
59580: LD_INT 31
59582: DOUBLE
59583: EQUAL
59584: IFTRUE 59630
59586: LD_INT 32
59588: DOUBLE
59589: EQUAL
59590: IFTRUE 59630
59592: LD_INT 33
59594: DOUBLE
59595: EQUAL
59596: IFTRUE 59630
59598: LD_INT 27
59600: DOUBLE
59601: EQUAL
59602: IFTRUE 59630
59604: LD_INT 26
59606: DOUBLE
59607: EQUAL
59608: IFTRUE 59630
59610: LD_INT 28
59612: DOUBLE
59613: EQUAL
59614: IFTRUE 59630
59616: LD_INT 29
59618: DOUBLE
59619: EQUAL
59620: IFTRUE 59630
59622: LD_INT 30
59624: DOUBLE
59625: EQUAL
59626: IFTRUE 59630
59628: GO 59686
59630: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59631: LD_ADDR_VAR 0 9
59635: PUSH
59636: LD_VAR 0 59
59640: PUSH
59641: LD_VAR 0 60
59645: PUSH
59646: LD_VAR 0 61
59650: PUSH
59651: LD_VAR 0 62
59655: PUSH
59656: LD_VAR 0 63
59660: PUSH
59661: LD_VAR 0 64
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: PUSH
59674: LD_VAR 0 4
59678: PUSH
59679: LD_INT 1
59681: PLUS
59682: ARRAY
59683: ST_TO_ADDR
59684: GO 59687
59686: POP
// temp_list2 = [ ] ;
59687: LD_ADDR_VAR 0 10
59691: PUSH
59692: EMPTY
59693: ST_TO_ADDR
// for i in temp_list do
59694: LD_ADDR_VAR 0 8
59698: PUSH
59699: LD_VAR 0 9
59703: PUSH
59704: FOR_IN
59705: IFFALSE 59757
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59707: LD_ADDR_VAR 0 10
59711: PUSH
59712: LD_VAR 0 10
59716: PUSH
59717: LD_VAR 0 8
59721: PUSH
59722: LD_INT 1
59724: ARRAY
59725: PUSH
59726: LD_VAR 0 2
59730: PLUS
59731: PUSH
59732: LD_VAR 0 8
59736: PUSH
59737: LD_INT 2
59739: ARRAY
59740: PUSH
59741: LD_VAR 0 3
59745: PLUS
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: EMPTY
59752: LIST
59753: ADD
59754: ST_TO_ADDR
59755: GO 59704
59757: POP
59758: POP
// result = temp_list2 ;
59759: LD_ADDR_VAR 0 7
59763: PUSH
59764: LD_VAR 0 10
59768: ST_TO_ADDR
// end ;
59769: LD_VAR 0 7
59773: RET
// export function EnemyInRange ( unit , dist ) ; begin
59774: LD_INT 0
59776: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59777: LD_ADDR_VAR 0 3
59781: PUSH
59782: LD_VAR 0 1
59786: PPUSH
59787: CALL_OW 255
59791: PPUSH
59792: LD_VAR 0 1
59796: PPUSH
59797: CALL_OW 250
59801: PPUSH
59802: LD_VAR 0 1
59806: PPUSH
59807: CALL_OW 251
59811: PPUSH
59812: LD_VAR 0 2
59816: PPUSH
59817: CALL 33176 0 4
59821: PUSH
59822: LD_INT 4
59824: ARRAY
59825: ST_TO_ADDR
// end ;
59826: LD_VAR 0 3
59830: RET
// export function PlayerSeeMe ( unit ) ; begin
59831: LD_INT 0
59833: PPUSH
// result := See ( your_side , unit ) ;
59834: LD_ADDR_VAR 0 2
59838: PUSH
59839: LD_OWVAR 2
59843: PPUSH
59844: LD_VAR 0 1
59848: PPUSH
59849: CALL_OW 292
59853: ST_TO_ADDR
// end ;
59854: LD_VAR 0 2
59858: RET
// export function ReverseDir ( unit ) ; begin
59859: LD_INT 0
59861: PPUSH
// if not unit then
59862: LD_VAR 0 1
59866: NOT
59867: IFFALSE 59871
// exit ;
59869: GO 59894
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59871: LD_ADDR_VAR 0 2
59875: PUSH
59876: LD_VAR 0 1
59880: PPUSH
59881: CALL_OW 254
59885: PUSH
59886: LD_INT 3
59888: PLUS
59889: PUSH
59890: LD_INT 6
59892: MOD
59893: ST_TO_ADDR
// end ;
59894: LD_VAR 0 2
59898: RET
// export function ReverseArray ( array ) ; var i ; begin
59899: LD_INT 0
59901: PPUSH
59902: PPUSH
// if not array then
59903: LD_VAR 0 1
59907: NOT
59908: IFFALSE 59912
// exit ;
59910: GO 59967
// result := [ ] ;
59912: LD_ADDR_VAR 0 2
59916: PUSH
59917: EMPTY
59918: ST_TO_ADDR
// for i := array downto 1 do
59919: LD_ADDR_VAR 0 3
59923: PUSH
59924: DOUBLE
59925: LD_VAR 0 1
59929: INC
59930: ST_TO_ADDR
59931: LD_INT 1
59933: PUSH
59934: FOR_DOWNTO
59935: IFFALSE 59965
// result := Join ( result , array [ i ] ) ;
59937: LD_ADDR_VAR 0 2
59941: PUSH
59942: LD_VAR 0 2
59946: PPUSH
59947: LD_VAR 0 1
59951: PUSH
59952: LD_VAR 0 3
59956: ARRAY
59957: PPUSH
59958: CALL 64592 0 2
59962: ST_TO_ADDR
59963: GO 59934
59965: POP
59966: POP
// end ;
59967: LD_VAR 0 2
59971: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59972: LD_INT 0
59974: PPUSH
59975: PPUSH
59976: PPUSH
59977: PPUSH
59978: PPUSH
59979: PPUSH
// if not unit or not hexes then
59980: LD_VAR 0 1
59984: NOT
59985: PUSH
59986: LD_VAR 0 2
59990: NOT
59991: OR
59992: IFFALSE 59996
// exit ;
59994: GO 60119
// dist := 9999 ;
59996: LD_ADDR_VAR 0 5
60000: PUSH
60001: LD_INT 9999
60003: ST_TO_ADDR
// for i = 1 to hexes do
60004: LD_ADDR_VAR 0 4
60008: PUSH
60009: DOUBLE
60010: LD_INT 1
60012: DEC
60013: ST_TO_ADDR
60014: LD_VAR 0 2
60018: PUSH
60019: FOR_TO
60020: IFFALSE 60107
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60022: LD_ADDR_VAR 0 6
60026: PUSH
60027: LD_VAR 0 1
60031: PPUSH
60032: LD_VAR 0 2
60036: PUSH
60037: LD_VAR 0 4
60041: ARRAY
60042: PUSH
60043: LD_INT 1
60045: ARRAY
60046: PPUSH
60047: LD_VAR 0 2
60051: PUSH
60052: LD_VAR 0 4
60056: ARRAY
60057: PUSH
60058: LD_INT 2
60060: ARRAY
60061: PPUSH
60062: CALL_OW 297
60066: ST_TO_ADDR
// if tdist < dist then
60067: LD_VAR 0 6
60071: PUSH
60072: LD_VAR 0 5
60076: LESS
60077: IFFALSE 60105
// begin hex := hexes [ i ] ;
60079: LD_ADDR_VAR 0 8
60083: PUSH
60084: LD_VAR 0 2
60088: PUSH
60089: LD_VAR 0 4
60093: ARRAY
60094: ST_TO_ADDR
// dist := tdist ;
60095: LD_ADDR_VAR 0 5
60099: PUSH
60100: LD_VAR 0 6
60104: ST_TO_ADDR
// end ; end ;
60105: GO 60019
60107: POP
60108: POP
// result := hex ;
60109: LD_ADDR_VAR 0 3
60113: PUSH
60114: LD_VAR 0 8
60118: ST_TO_ADDR
// end ;
60119: LD_VAR 0 3
60123: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60124: LD_INT 0
60126: PPUSH
60127: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60128: LD_VAR 0 1
60132: NOT
60133: PUSH
60134: LD_VAR 0 1
60138: PUSH
60139: LD_INT 21
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 23
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PPUSH
60163: CALL_OW 69
60167: IN
60168: NOT
60169: OR
60170: IFFALSE 60174
// exit ;
60172: GO 60221
// for i = 1 to 3 do
60174: LD_ADDR_VAR 0 3
60178: PUSH
60179: DOUBLE
60180: LD_INT 1
60182: DEC
60183: ST_TO_ADDR
60184: LD_INT 3
60186: PUSH
60187: FOR_TO
60188: IFFALSE 60219
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60190: LD_VAR 0 1
60194: PPUSH
60195: CALL_OW 250
60199: PPUSH
60200: LD_VAR 0 1
60204: PPUSH
60205: CALL_OW 251
60209: PPUSH
60210: LD_INT 1
60212: PPUSH
60213: CALL_OW 453
60217: GO 60187
60219: POP
60220: POP
// end ;
60221: LD_VAR 0 2
60225: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60226: LD_INT 0
60228: PPUSH
60229: PPUSH
60230: PPUSH
60231: PPUSH
60232: PPUSH
60233: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60234: LD_VAR 0 1
60238: NOT
60239: PUSH
60240: LD_VAR 0 2
60244: NOT
60245: OR
60246: PUSH
60247: LD_VAR 0 1
60251: PPUSH
60252: CALL_OW 314
60256: OR
60257: IFFALSE 60261
// exit ;
60259: GO 60702
// x := GetX ( enemy_unit ) ;
60261: LD_ADDR_VAR 0 7
60265: PUSH
60266: LD_VAR 0 2
60270: PPUSH
60271: CALL_OW 250
60275: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60276: LD_ADDR_VAR 0 8
60280: PUSH
60281: LD_VAR 0 2
60285: PPUSH
60286: CALL_OW 251
60290: ST_TO_ADDR
// if not x or not y then
60291: LD_VAR 0 7
60295: NOT
60296: PUSH
60297: LD_VAR 0 8
60301: NOT
60302: OR
60303: IFFALSE 60307
// exit ;
60305: GO 60702
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60307: LD_ADDR_VAR 0 6
60311: PUSH
60312: LD_VAR 0 7
60316: PPUSH
60317: LD_INT 0
60319: PPUSH
60320: LD_INT 4
60322: PPUSH
60323: CALL_OW 272
60327: PUSH
60328: LD_VAR 0 8
60332: PPUSH
60333: LD_INT 0
60335: PPUSH
60336: LD_INT 4
60338: PPUSH
60339: CALL_OW 273
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_VAR 0 7
60352: PPUSH
60353: LD_INT 1
60355: PPUSH
60356: LD_INT 4
60358: PPUSH
60359: CALL_OW 272
60363: PUSH
60364: LD_VAR 0 8
60368: PPUSH
60369: LD_INT 1
60371: PPUSH
60372: LD_INT 4
60374: PPUSH
60375: CALL_OW 273
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_VAR 0 7
60388: PPUSH
60389: LD_INT 2
60391: PPUSH
60392: LD_INT 4
60394: PPUSH
60395: CALL_OW 272
60399: PUSH
60400: LD_VAR 0 8
60404: PPUSH
60405: LD_INT 2
60407: PPUSH
60408: LD_INT 4
60410: PPUSH
60411: CALL_OW 273
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_VAR 0 7
60424: PPUSH
60425: LD_INT 3
60427: PPUSH
60428: LD_INT 4
60430: PPUSH
60431: CALL_OW 272
60435: PUSH
60436: LD_VAR 0 8
60440: PPUSH
60441: LD_INT 3
60443: PPUSH
60444: LD_INT 4
60446: PPUSH
60447: CALL_OW 273
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_VAR 0 7
60460: PPUSH
60461: LD_INT 4
60463: PPUSH
60464: LD_INT 4
60466: PPUSH
60467: CALL_OW 272
60471: PUSH
60472: LD_VAR 0 8
60476: PPUSH
60477: LD_INT 4
60479: PPUSH
60480: LD_INT 4
60482: PPUSH
60483: CALL_OW 273
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_VAR 0 7
60496: PPUSH
60497: LD_INT 5
60499: PPUSH
60500: LD_INT 4
60502: PPUSH
60503: CALL_OW 272
60507: PUSH
60508: LD_VAR 0 8
60512: PPUSH
60513: LD_INT 5
60515: PPUSH
60516: LD_INT 4
60518: PPUSH
60519: CALL_OW 273
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: ST_TO_ADDR
// for i = tmp downto 1 do
60536: LD_ADDR_VAR 0 4
60540: PUSH
60541: DOUBLE
60542: LD_VAR 0 6
60546: INC
60547: ST_TO_ADDR
60548: LD_INT 1
60550: PUSH
60551: FOR_DOWNTO
60552: IFFALSE 60653
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60554: LD_VAR 0 6
60558: PUSH
60559: LD_VAR 0 4
60563: ARRAY
60564: PUSH
60565: LD_INT 1
60567: ARRAY
60568: PPUSH
60569: LD_VAR 0 6
60573: PUSH
60574: LD_VAR 0 4
60578: ARRAY
60579: PUSH
60580: LD_INT 2
60582: ARRAY
60583: PPUSH
60584: CALL_OW 488
60588: NOT
60589: PUSH
60590: LD_VAR 0 6
60594: PUSH
60595: LD_VAR 0 4
60599: ARRAY
60600: PUSH
60601: LD_INT 1
60603: ARRAY
60604: PPUSH
60605: LD_VAR 0 6
60609: PUSH
60610: LD_VAR 0 4
60614: ARRAY
60615: PUSH
60616: LD_INT 2
60618: ARRAY
60619: PPUSH
60620: CALL_OW 428
60624: PUSH
60625: LD_INT 0
60627: NONEQUAL
60628: OR
60629: IFFALSE 60651
// tmp := Delete ( tmp , i ) ;
60631: LD_ADDR_VAR 0 6
60635: PUSH
60636: LD_VAR 0 6
60640: PPUSH
60641: LD_VAR 0 4
60645: PPUSH
60646: CALL_OW 3
60650: ST_TO_ADDR
60651: GO 60551
60653: POP
60654: POP
// j := GetClosestHex ( unit , tmp ) ;
60655: LD_ADDR_VAR 0 5
60659: PUSH
60660: LD_VAR 0 1
60664: PPUSH
60665: LD_VAR 0 6
60669: PPUSH
60670: CALL 59972 0 2
60674: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60675: LD_VAR 0 1
60679: PPUSH
60680: LD_VAR 0 5
60684: PUSH
60685: LD_INT 1
60687: ARRAY
60688: PPUSH
60689: LD_VAR 0 5
60693: PUSH
60694: LD_INT 2
60696: ARRAY
60697: PPUSH
60698: CALL_OW 111
// end ;
60702: LD_VAR 0 3
60706: RET
// export function PrepareApemanSoldier ( ) ; begin
60707: LD_INT 0
60709: PPUSH
// uc_nation := 0 ;
60710: LD_ADDR_OWVAR 21
60714: PUSH
60715: LD_INT 0
60717: ST_TO_ADDR
// hc_sex := sex_male ;
60718: LD_ADDR_OWVAR 27
60722: PUSH
60723: LD_INT 1
60725: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60726: LD_ADDR_OWVAR 28
60730: PUSH
60731: LD_INT 15
60733: ST_TO_ADDR
// hc_gallery :=  ;
60734: LD_ADDR_OWVAR 33
60738: PUSH
60739: LD_STRING 
60741: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60742: LD_ADDR_OWVAR 31
60746: PUSH
60747: LD_INT 0
60749: PPUSH
60750: LD_INT 3
60752: PPUSH
60753: CALL_OW 12
60757: PUSH
60758: LD_INT 0
60760: PPUSH
60761: LD_INT 3
60763: PPUSH
60764: CALL_OW 12
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: ST_TO_ADDR
// end ;
60781: LD_VAR 0 1
60785: RET
// export function PrepareApemanEngineer ( ) ; begin
60786: LD_INT 0
60788: PPUSH
// uc_nation := 0 ;
60789: LD_ADDR_OWVAR 21
60793: PUSH
60794: LD_INT 0
60796: ST_TO_ADDR
// hc_sex := sex_male ;
60797: LD_ADDR_OWVAR 27
60801: PUSH
60802: LD_INT 1
60804: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60805: LD_ADDR_OWVAR 28
60809: PUSH
60810: LD_INT 16
60812: ST_TO_ADDR
// hc_gallery :=  ;
60813: LD_ADDR_OWVAR 33
60817: PUSH
60818: LD_STRING 
60820: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60821: LD_ADDR_OWVAR 31
60825: PUSH
60826: LD_INT 0
60828: PPUSH
60829: LD_INT 3
60831: PPUSH
60832: CALL_OW 12
60836: PUSH
60837: LD_INT 0
60839: PPUSH
60840: LD_INT 3
60842: PPUSH
60843: CALL_OW 12
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: ST_TO_ADDR
// end ;
60860: LD_VAR 0 1
60864: RET
// export function PrepareApeman ( agressivity ) ; begin
60865: LD_INT 0
60867: PPUSH
// uc_side := 0 ;
60868: LD_ADDR_OWVAR 20
60872: PUSH
60873: LD_INT 0
60875: ST_TO_ADDR
// uc_nation := 0 ;
60876: LD_ADDR_OWVAR 21
60880: PUSH
60881: LD_INT 0
60883: ST_TO_ADDR
// hc_sex := sex_male ;
60884: LD_ADDR_OWVAR 27
60888: PUSH
60889: LD_INT 1
60891: ST_TO_ADDR
// hc_class := class_apeman ;
60892: LD_ADDR_OWVAR 28
60896: PUSH
60897: LD_INT 12
60899: ST_TO_ADDR
// hc_gallery :=  ;
60900: LD_ADDR_OWVAR 33
60904: PUSH
60905: LD_STRING 
60907: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60908: LD_ADDR_OWVAR 35
60912: PUSH
60913: LD_VAR 0 1
60917: NEG
60918: PPUSH
60919: LD_VAR 0 1
60923: PPUSH
60924: CALL_OW 12
60928: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60929: LD_ADDR_OWVAR 31
60933: PUSH
60934: LD_INT 0
60936: PPUSH
60937: LD_INT 3
60939: PPUSH
60940: CALL_OW 12
60944: PUSH
60945: LD_INT 0
60947: PPUSH
60948: LD_INT 3
60950: PPUSH
60951: CALL_OW 12
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: ST_TO_ADDR
// end ;
60968: LD_VAR 0 2
60972: RET
// export function PrepareTiger ( agressivity ) ; begin
60973: LD_INT 0
60975: PPUSH
// uc_side := 0 ;
60976: LD_ADDR_OWVAR 20
60980: PUSH
60981: LD_INT 0
60983: ST_TO_ADDR
// uc_nation := 0 ;
60984: LD_ADDR_OWVAR 21
60988: PUSH
60989: LD_INT 0
60991: ST_TO_ADDR
// hc_class := class_tiger ;
60992: LD_ADDR_OWVAR 28
60996: PUSH
60997: LD_INT 14
60999: ST_TO_ADDR
// hc_gallery :=  ;
61000: LD_ADDR_OWVAR 33
61004: PUSH
61005: LD_STRING 
61007: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61008: LD_ADDR_OWVAR 35
61012: PUSH
61013: LD_VAR 0 1
61017: NEG
61018: PPUSH
61019: LD_VAR 0 1
61023: PPUSH
61024: CALL_OW 12
61028: ST_TO_ADDR
// end ;
61029: LD_VAR 0 2
61033: RET
// export function PrepareEnchidna ( ) ; begin
61034: LD_INT 0
61036: PPUSH
// uc_side := 0 ;
61037: LD_ADDR_OWVAR 20
61041: PUSH
61042: LD_INT 0
61044: ST_TO_ADDR
// uc_nation := 0 ;
61045: LD_ADDR_OWVAR 21
61049: PUSH
61050: LD_INT 0
61052: ST_TO_ADDR
// hc_class := class_baggie ;
61053: LD_ADDR_OWVAR 28
61057: PUSH
61058: LD_INT 13
61060: ST_TO_ADDR
// hc_gallery :=  ;
61061: LD_ADDR_OWVAR 33
61065: PUSH
61066: LD_STRING 
61068: ST_TO_ADDR
// end ;
61069: LD_VAR 0 1
61073: RET
// export function PrepareFrog ( ) ; begin
61074: LD_INT 0
61076: PPUSH
// uc_side := 0 ;
61077: LD_ADDR_OWVAR 20
61081: PUSH
61082: LD_INT 0
61084: ST_TO_ADDR
// uc_nation := 0 ;
61085: LD_ADDR_OWVAR 21
61089: PUSH
61090: LD_INT 0
61092: ST_TO_ADDR
// hc_class := class_frog ;
61093: LD_ADDR_OWVAR 28
61097: PUSH
61098: LD_INT 19
61100: ST_TO_ADDR
// hc_gallery :=  ;
61101: LD_ADDR_OWVAR 33
61105: PUSH
61106: LD_STRING 
61108: ST_TO_ADDR
// end ;
61109: LD_VAR 0 1
61113: RET
// export function PrepareFish ( ) ; begin
61114: LD_INT 0
61116: PPUSH
// uc_side := 0 ;
61117: LD_ADDR_OWVAR 20
61121: PUSH
61122: LD_INT 0
61124: ST_TO_ADDR
// uc_nation := 0 ;
61125: LD_ADDR_OWVAR 21
61129: PUSH
61130: LD_INT 0
61132: ST_TO_ADDR
// hc_class := class_fish ;
61133: LD_ADDR_OWVAR 28
61137: PUSH
61138: LD_INT 20
61140: ST_TO_ADDR
// hc_gallery :=  ;
61141: LD_ADDR_OWVAR 33
61145: PUSH
61146: LD_STRING 
61148: ST_TO_ADDR
// end ;
61149: LD_VAR 0 1
61153: RET
// export function PrepareBird ( ) ; begin
61154: LD_INT 0
61156: PPUSH
// uc_side := 0 ;
61157: LD_ADDR_OWVAR 20
61161: PUSH
61162: LD_INT 0
61164: ST_TO_ADDR
// uc_nation := 0 ;
61165: LD_ADDR_OWVAR 21
61169: PUSH
61170: LD_INT 0
61172: ST_TO_ADDR
// hc_class := class_phororhacos ;
61173: LD_ADDR_OWVAR 28
61177: PUSH
61178: LD_INT 18
61180: ST_TO_ADDR
// hc_gallery :=  ;
61181: LD_ADDR_OWVAR 33
61185: PUSH
61186: LD_STRING 
61188: ST_TO_ADDR
// end ;
61189: LD_VAR 0 1
61193: RET
// export function PrepareHorse ( ) ; begin
61194: LD_INT 0
61196: PPUSH
// uc_side := 0 ;
61197: LD_ADDR_OWVAR 20
61201: PUSH
61202: LD_INT 0
61204: ST_TO_ADDR
// uc_nation := 0 ;
61205: LD_ADDR_OWVAR 21
61209: PUSH
61210: LD_INT 0
61212: ST_TO_ADDR
// hc_class := class_horse ;
61213: LD_ADDR_OWVAR 28
61217: PUSH
61218: LD_INT 21
61220: ST_TO_ADDR
// hc_gallery :=  ;
61221: LD_ADDR_OWVAR 33
61225: PUSH
61226: LD_STRING 
61228: ST_TO_ADDR
// end ;
61229: LD_VAR 0 1
61233: RET
// export function PrepareMastodont ( ) ; begin
61234: LD_INT 0
61236: PPUSH
// uc_side := 0 ;
61237: LD_ADDR_OWVAR 20
61241: PUSH
61242: LD_INT 0
61244: ST_TO_ADDR
// uc_nation := 0 ;
61245: LD_ADDR_OWVAR 21
61249: PUSH
61250: LD_INT 0
61252: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61253: LD_ADDR_OWVAR 37
61257: PUSH
61258: LD_INT 31
61260: ST_TO_ADDR
// vc_control := control_rider ;
61261: LD_ADDR_OWVAR 38
61265: PUSH
61266: LD_INT 4
61268: ST_TO_ADDR
// end ;
61269: LD_VAR 0 1
61273: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61274: LD_INT 0
61276: PPUSH
61277: PPUSH
61278: PPUSH
// uc_side = 0 ;
61279: LD_ADDR_OWVAR 20
61283: PUSH
61284: LD_INT 0
61286: ST_TO_ADDR
// uc_nation = 0 ;
61287: LD_ADDR_OWVAR 21
61291: PUSH
61292: LD_INT 0
61294: ST_TO_ADDR
// InitHc_All ( ) ;
61295: CALL_OW 584
// InitVc ;
61299: CALL_OW 20
// if mastodonts then
61303: LD_VAR 0 6
61307: IFFALSE 61374
// for i = 1 to mastodonts do
61309: LD_ADDR_VAR 0 11
61313: PUSH
61314: DOUBLE
61315: LD_INT 1
61317: DEC
61318: ST_TO_ADDR
61319: LD_VAR 0 6
61323: PUSH
61324: FOR_TO
61325: IFFALSE 61372
// begin vc_chassis := 31 ;
61327: LD_ADDR_OWVAR 37
61331: PUSH
61332: LD_INT 31
61334: ST_TO_ADDR
// vc_control := control_rider ;
61335: LD_ADDR_OWVAR 38
61339: PUSH
61340: LD_INT 4
61342: ST_TO_ADDR
// animal := CreateVehicle ;
61343: LD_ADDR_VAR 0 12
61347: PUSH
61348: CALL_OW 45
61352: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61353: LD_VAR 0 12
61357: PPUSH
61358: LD_VAR 0 8
61362: PPUSH
61363: LD_INT 0
61365: PPUSH
61366: CALL 63509 0 3
// end ;
61370: GO 61324
61372: POP
61373: POP
// if horses then
61374: LD_VAR 0 5
61378: IFFALSE 61445
// for i = 1 to horses do
61380: LD_ADDR_VAR 0 11
61384: PUSH
61385: DOUBLE
61386: LD_INT 1
61388: DEC
61389: ST_TO_ADDR
61390: LD_VAR 0 5
61394: PUSH
61395: FOR_TO
61396: IFFALSE 61443
// begin hc_class := 21 ;
61398: LD_ADDR_OWVAR 28
61402: PUSH
61403: LD_INT 21
61405: ST_TO_ADDR
// hc_gallery :=  ;
61406: LD_ADDR_OWVAR 33
61410: PUSH
61411: LD_STRING 
61413: ST_TO_ADDR
// animal := CreateHuman ;
61414: LD_ADDR_VAR 0 12
61418: PUSH
61419: CALL_OW 44
61423: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61424: LD_VAR 0 12
61428: PPUSH
61429: LD_VAR 0 8
61433: PPUSH
61434: LD_INT 0
61436: PPUSH
61437: CALL 63509 0 3
// end ;
61441: GO 61395
61443: POP
61444: POP
// if birds then
61445: LD_VAR 0 1
61449: IFFALSE 61516
// for i = 1 to birds do
61451: LD_ADDR_VAR 0 11
61455: PUSH
61456: DOUBLE
61457: LD_INT 1
61459: DEC
61460: ST_TO_ADDR
61461: LD_VAR 0 1
61465: PUSH
61466: FOR_TO
61467: IFFALSE 61514
// begin hc_class = 18 ;
61469: LD_ADDR_OWVAR 28
61473: PUSH
61474: LD_INT 18
61476: ST_TO_ADDR
// hc_gallery =  ;
61477: LD_ADDR_OWVAR 33
61481: PUSH
61482: LD_STRING 
61484: ST_TO_ADDR
// animal := CreateHuman ;
61485: LD_ADDR_VAR 0 12
61489: PUSH
61490: CALL_OW 44
61494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61495: LD_VAR 0 12
61499: PPUSH
61500: LD_VAR 0 8
61504: PPUSH
61505: LD_INT 0
61507: PPUSH
61508: CALL 63509 0 3
// end ;
61512: GO 61466
61514: POP
61515: POP
// if tigers then
61516: LD_VAR 0 2
61520: IFFALSE 61604
// for i = 1 to tigers do
61522: LD_ADDR_VAR 0 11
61526: PUSH
61527: DOUBLE
61528: LD_INT 1
61530: DEC
61531: ST_TO_ADDR
61532: LD_VAR 0 2
61536: PUSH
61537: FOR_TO
61538: IFFALSE 61602
// begin hc_class = class_tiger ;
61540: LD_ADDR_OWVAR 28
61544: PUSH
61545: LD_INT 14
61547: ST_TO_ADDR
// hc_gallery =  ;
61548: LD_ADDR_OWVAR 33
61552: PUSH
61553: LD_STRING 
61555: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61556: LD_ADDR_OWVAR 35
61560: PUSH
61561: LD_INT 7
61563: NEG
61564: PPUSH
61565: LD_INT 7
61567: PPUSH
61568: CALL_OW 12
61572: ST_TO_ADDR
// animal := CreateHuman ;
61573: LD_ADDR_VAR 0 12
61577: PUSH
61578: CALL_OW 44
61582: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61583: LD_VAR 0 12
61587: PPUSH
61588: LD_VAR 0 8
61592: PPUSH
61593: LD_INT 0
61595: PPUSH
61596: CALL 63509 0 3
// end ;
61600: GO 61537
61602: POP
61603: POP
// if apemans then
61604: LD_VAR 0 3
61608: IFFALSE 61731
// for i = 1 to apemans do
61610: LD_ADDR_VAR 0 11
61614: PUSH
61615: DOUBLE
61616: LD_INT 1
61618: DEC
61619: ST_TO_ADDR
61620: LD_VAR 0 3
61624: PUSH
61625: FOR_TO
61626: IFFALSE 61729
// begin hc_class = class_apeman ;
61628: LD_ADDR_OWVAR 28
61632: PUSH
61633: LD_INT 12
61635: ST_TO_ADDR
// hc_gallery =  ;
61636: LD_ADDR_OWVAR 33
61640: PUSH
61641: LD_STRING 
61643: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61644: LD_ADDR_OWVAR 35
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PPUSH
61653: LD_INT 2
61655: PPUSH
61656: CALL_OW 12
61660: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61661: LD_ADDR_OWVAR 31
61665: PUSH
61666: LD_INT 1
61668: PPUSH
61669: LD_INT 3
61671: PPUSH
61672: CALL_OW 12
61676: PUSH
61677: LD_INT 1
61679: PPUSH
61680: LD_INT 3
61682: PPUSH
61683: CALL_OW 12
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: ST_TO_ADDR
// animal := CreateHuman ;
61700: LD_ADDR_VAR 0 12
61704: PUSH
61705: CALL_OW 44
61709: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61710: LD_VAR 0 12
61714: PPUSH
61715: LD_VAR 0 8
61719: PPUSH
61720: LD_INT 0
61722: PPUSH
61723: CALL 63509 0 3
// end ;
61727: GO 61625
61729: POP
61730: POP
// if enchidnas then
61731: LD_VAR 0 4
61735: IFFALSE 61802
// for i = 1 to enchidnas do
61737: LD_ADDR_VAR 0 11
61741: PUSH
61742: DOUBLE
61743: LD_INT 1
61745: DEC
61746: ST_TO_ADDR
61747: LD_VAR 0 4
61751: PUSH
61752: FOR_TO
61753: IFFALSE 61800
// begin hc_class = 13 ;
61755: LD_ADDR_OWVAR 28
61759: PUSH
61760: LD_INT 13
61762: ST_TO_ADDR
// hc_gallery =  ;
61763: LD_ADDR_OWVAR 33
61767: PUSH
61768: LD_STRING 
61770: ST_TO_ADDR
// animal := CreateHuman ;
61771: LD_ADDR_VAR 0 12
61775: PUSH
61776: CALL_OW 44
61780: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61781: LD_VAR 0 12
61785: PPUSH
61786: LD_VAR 0 8
61790: PPUSH
61791: LD_INT 0
61793: PPUSH
61794: CALL 63509 0 3
// end ;
61798: GO 61752
61800: POP
61801: POP
// if fishes then
61802: LD_VAR 0 7
61806: IFFALSE 61873
// for i = 1 to fishes do
61808: LD_ADDR_VAR 0 11
61812: PUSH
61813: DOUBLE
61814: LD_INT 1
61816: DEC
61817: ST_TO_ADDR
61818: LD_VAR 0 7
61822: PUSH
61823: FOR_TO
61824: IFFALSE 61871
// begin hc_class = 20 ;
61826: LD_ADDR_OWVAR 28
61830: PUSH
61831: LD_INT 20
61833: ST_TO_ADDR
// hc_gallery =  ;
61834: LD_ADDR_OWVAR 33
61838: PUSH
61839: LD_STRING 
61841: ST_TO_ADDR
// animal := CreateHuman ;
61842: LD_ADDR_VAR 0 12
61846: PUSH
61847: CALL_OW 44
61851: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61852: LD_VAR 0 12
61856: PPUSH
61857: LD_VAR 0 9
61861: PPUSH
61862: LD_INT 0
61864: PPUSH
61865: CALL 63509 0 3
// end ;
61869: GO 61823
61871: POP
61872: POP
// end ;
61873: LD_VAR 0 10
61877: RET
// export function WantHeal ( sci , unit ) ; begin
61878: LD_INT 0
61880: PPUSH
// if GetTaskList ( sci ) > 0 then
61881: LD_VAR 0 1
61885: PPUSH
61886: CALL_OW 437
61890: PUSH
61891: LD_INT 0
61893: GREATER
61894: IFFALSE 61964
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61896: LD_VAR 0 1
61900: PPUSH
61901: CALL_OW 437
61905: PUSH
61906: LD_INT 1
61908: ARRAY
61909: PUSH
61910: LD_INT 1
61912: ARRAY
61913: PUSH
61914: LD_STRING l
61916: EQUAL
61917: PUSH
61918: LD_VAR 0 1
61922: PPUSH
61923: CALL_OW 437
61927: PUSH
61928: LD_INT 1
61930: ARRAY
61931: PUSH
61932: LD_INT 4
61934: ARRAY
61935: PUSH
61936: LD_VAR 0 2
61940: EQUAL
61941: AND
61942: IFFALSE 61954
// result := true else
61944: LD_ADDR_VAR 0 3
61948: PUSH
61949: LD_INT 1
61951: ST_TO_ADDR
61952: GO 61962
// result := false ;
61954: LD_ADDR_VAR 0 3
61958: PUSH
61959: LD_INT 0
61961: ST_TO_ADDR
// end else
61962: GO 61972
// result := false ;
61964: LD_ADDR_VAR 0 3
61968: PUSH
61969: LD_INT 0
61971: ST_TO_ADDR
// end ;
61972: LD_VAR 0 3
61976: RET
// export function HealTarget ( sci ) ; begin
61977: LD_INT 0
61979: PPUSH
// if not sci then
61980: LD_VAR 0 1
61984: NOT
61985: IFFALSE 61989
// exit ;
61987: GO 62054
// result := 0 ;
61989: LD_ADDR_VAR 0 2
61993: PUSH
61994: LD_INT 0
61996: ST_TO_ADDR
// if GetTaskList ( sci ) then
61997: LD_VAR 0 1
62001: PPUSH
62002: CALL_OW 437
62006: IFFALSE 62054
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62008: LD_VAR 0 1
62012: PPUSH
62013: CALL_OW 437
62017: PUSH
62018: LD_INT 1
62020: ARRAY
62021: PUSH
62022: LD_INT 1
62024: ARRAY
62025: PUSH
62026: LD_STRING l
62028: EQUAL
62029: IFFALSE 62054
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62031: LD_ADDR_VAR 0 2
62035: PUSH
62036: LD_VAR 0 1
62040: PPUSH
62041: CALL_OW 437
62045: PUSH
62046: LD_INT 1
62048: ARRAY
62049: PUSH
62050: LD_INT 4
62052: ARRAY
62053: ST_TO_ADDR
// end ;
62054: LD_VAR 0 2
62058: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62059: LD_INT 0
62061: PPUSH
62062: PPUSH
62063: PPUSH
62064: PPUSH
// if not base_units then
62065: LD_VAR 0 1
62069: NOT
62070: IFFALSE 62074
// exit ;
62072: GO 62161
// result := false ;
62074: LD_ADDR_VAR 0 2
62078: PUSH
62079: LD_INT 0
62081: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62082: LD_ADDR_VAR 0 5
62086: PUSH
62087: LD_VAR 0 1
62091: PPUSH
62092: LD_INT 21
62094: PUSH
62095: LD_INT 3
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PPUSH
62102: CALL_OW 72
62106: ST_TO_ADDR
// if not tmp then
62107: LD_VAR 0 5
62111: NOT
62112: IFFALSE 62116
// exit ;
62114: GO 62161
// for i in tmp do
62116: LD_ADDR_VAR 0 3
62120: PUSH
62121: LD_VAR 0 5
62125: PUSH
62126: FOR_IN
62127: IFFALSE 62159
// begin result := EnemyInRange ( i , 22 ) ;
62129: LD_ADDR_VAR 0 2
62133: PUSH
62134: LD_VAR 0 3
62138: PPUSH
62139: LD_INT 22
62141: PPUSH
62142: CALL 59774 0 2
62146: ST_TO_ADDR
// if result then
62147: LD_VAR 0 2
62151: IFFALSE 62157
// exit ;
62153: POP
62154: POP
62155: GO 62161
// end ;
62157: GO 62126
62159: POP
62160: POP
// end ;
62161: LD_VAR 0 2
62165: RET
// export function FilterByTag ( units , tag ) ; begin
62166: LD_INT 0
62168: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62169: LD_ADDR_VAR 0 3
62173: PUSH
62174: LD_VAR 0 1
62178: PPUSH
62179: LD_INT 120
62181: PUSH
62182: LD_VAR 0 2
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PPUSH
62191: CALL_OW 72
62195: ST_TO_ADDR
// end ;
62196: LD_VAR 0 3
62200: RET
// export function IsDriver ( un ) ; begin
62201: LD_INT 0
62203: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62204: LD_ADDR_VAR 0 2
62208: PUSH
62209: LD_VAR 0 1
62213: PUSH
62214: LD_INT 55
62216: PUSH
62217: EMPTY
62218: LIST
62219: PPUSH
62220: CALL_OW 69
62224: IN
62225: ST_TO_ADDR
// end ;
62226: LD_VAR 0 2
62230: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62231: LD_INT 0
62233: PPUSH
62234: PPUSH
// list := [ ] ;
62235: LD_ADDR_VAR 0 5
62239: PUSH
62240: EMPTY
62241: ST_TO_ADDR
// case d of 0 :
62242: LD_VAR 0 3
62246: PUSH
62247: LD_INT 0
62249: DOUBLE
62250: EQUAL
62251: IFTRUE 62255
62253: GO 62388
62255: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62256: LD_ADDR_VAR 0 5
62260: PUSH
62261: LD_VAR 0 1
62265: PUSH
62266: LD_INT 4
62268: MINUS
62269: PUSH
62270: LD_VAR 0 2
62274: PUSH
62275: LD_INT 4
62277: MINUS
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: PUSH
62287: LD_VAR 0 1
62291: PUSH
62292: LD_INT 3
62294: MINUS
62295: PUSH
62296: LD_VAR 0 2
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: PUSH
62309: LD_VAR 0 1
62313: PUSH
62314: LD_INT 4
62316: PLUS
62317: PUSH
62318: LD_VAR 0 2
62322: PUSH
62323: LD_INT 4
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: PUSH
62331: LD_VAR 0 1
62335: PUSH
62336: LD_INT 3
62338: PLUS
62339: PUSH
62340: LD_VAR 0 2
62344: PUSH
62345: LD_INT 3
62347: PLUS
62348: PUSH
62349: LD_INT 5
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: LIST
62356: PUSH
62357: LD_VAR 0 1
62361: PUSH
62362: LD_VAR 0 2
62366: PUSH
62367: LD_INT 4
62369: PLUS
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: LIST
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: ST_TO_ADDR
// end ; 1 :
62386: GO 63086
62388: LD_INT 1
62390: DOUBLE
62391: EQUAL
62392: IFTRUE 62396
62394: GO 62529
62396: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62397: LD_ADDR_VAR 0 5
62401: PUSH
62402: LD_VAR 0 1
62406: PUSH
62407: LD_VAR 0 2
62411: PUSH
62412: LD_INT 4
62414: MINUS
62415: PUSH
62416: LD_INT 3
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: LIST
62423: PUSH
62424: LD_VAR 0 1
62428: PUSH
62429: LD_INT 3
62431: MINUS
62432: PUSH
62433: LD_VAR 0 2
62437: PUSH
62438: LD_INT 3
62440: MINUS
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: LIST
62449: PUSH
62450: LD_VAR 0 1
62454: PUSH
62455: LD_INT 4
62457: MINUS
62458: PUSH
62459: LD_VAR 0 2
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: PUSH
62472: LD_VAR 0 1
62476: PUSH
62477: LD_VAR 0 2
62481: PUSH
62482: LD_INT 3
62484: PLUS
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: PUSH
62494: LD_VAR 0 1
62498: PUSH
62499: LD_INT 4
62501: PLUS
62502: PUSH
62503: LD_VAR 0 2
62507: PUSH
62508: LD_INT 4
62510: PLUS
62511: PUSH
62512: LD_INT 5
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: ST_TO_ADDR
// end ; 2 :
62527: GO 63086
62529: LD_INT 2
62531: DOUBLE
62532: EQUAL
62533: IFTRUE 62537
62535: GO 62666
62537: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62538: LD_ADDR_VAR 0 5
62542: PUSH
62543: LD_VAR 0 1
62547: PUSH
62548: LD_VAR 0 2
62552: PUSH
62553: LD_INT 3
62555: MINUS
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: LIST
62564: PUSH
62565: LD_VAR 0 1
62569: PUSH
62570: LD_INT 4
62572: PLUS
62573: PUSH
62574: LD_VAR 0 2
62578: PUSH
62579: LD_INT 4
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: LIST
62586: PUSH
62587: LD_VAR 0 1
62591: PUSH
62592: LD_VAR 0 2
62596: PUSH
62597: LD_INT 4
62599: PLUS
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: PUSH
62609: LD_VAR 0 1
62613: PUSH
62614: LD_INT 3
62616: MINUS
62617: PUSH
62618: LD_VAR 0 2
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: LIST
62630: PUSH
62631: LD_VAR 0 1
62635: PUSH
62636: LD_INT 4
62638: MINUS
62639: PUSH
62640: LD_VAR 0 2
62644: PUSH
62645: LD_INT 4
62647: MINUS
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: LIST
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: ST_TO_ADDR
// end ; 3 :
62664: GO 63086
62666: LD_INT 3
62668: DOUBLE
62669: EQUAL
62670: IFTRUE 62674
62672: GO 62807
62674: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62675: LD_ADDR_VAR 0 5
62679: PUSH
62680: LD_VAR 0 1
62684: PUSH
62685: LD_INT 3
62687: PLUS
62688: PUSH
62689: LD_VAR 0 2
62693: PUSH
62694: LD_INT 4
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: LIST
62701: PUSH
62702: LD_VAR 0 1
62706: PUSH
62707: LD_INT 4
62709: PLUS
62710: PUSH
62711: LD_VAR 0 2
62715: PUSH
62716: LD_INT 4
62718: PLUS
62719: PUSH
62720: LD_INT 5
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: LIST
62727: PUSH
62728: LD_VAR 0 1
62732: PUSH
62733: LD_INT 4
62735: MINUS
62736: PUSH
62737: LD_VAR 0 2
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: LIST
62749: PUSH
62750: LD_VAR 0 1
62754: PUSH
62755: LD_VAR 0 2
62759: PUSH
62760: LD_INT 4
62762: MINUS
62763: PUSH
62764: LD_INT 3
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: PUSH
62772: LD_VAR 0 1
62776: PUSH
62777: LD_INT 3
62779: MINUS
62780: PUSH
62781: LD_VAR 0 2
62785: PUSH
62786: LD_INT 3
62788: MINUS
62789: PUSH
62790: LD_INT 2
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: ST_TO_ADDR
// end ; 4 :
62805: GO 63086
62807: LD_INT 4
62809: DOUBLE
62810: EQUAL
62811: IFTRUE 62815
62813: GO 62948
62815: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62816: LD_ADDR_VAR 0 5
62820: PUSH
62821: LD_VAR 0 1
62825: PUSH
62826: LD_VAR 0 2
62830: PUSH
62831: LD_INT 4
62833: PLUS
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: LIST
62842: PUSH
62843: LD_VAR 0 1
62847: PUSH
62848: LD_INT 3
62850: PLUS
62851: PUSH
62852: LD_VAR 0 2
62856: PUSH
62857: LD_INT 3
62859: PLUS
62860: PUSH
62861: LD_INT 5
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: LIST
62868: PUSH
62869: LD_VAR 0 1
62873: PUSH
62874: LD_INT 4
62876: PLUS
62877: PUSH
62878: LD_VAR 0 2
62882: PUSH
62883: LD_INT 4
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: LIST
62890: PUSH
62891: LD_VAR 0 1
62895: PUSH
62896: LD_VAR 0 2
62900: PUSH
62901: LD_INT 3
62903: MINUS
62904: PUSH
62905: LD_INT 3
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: PUSH
62913: LD_VAR 0 1
62917: PUSH
62918: LD_INT 4
62920: MINUS
62921: PUSH
62922: LD_VAR 0 2
62926: PUSH
62927: LD_INT 4
62929: MINUS
62930: PUSH
62931: LD_INT 2
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: LIST
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: ST_TO_ADDR
// end ; 5 :
62946: GO 63086
62948: LD_INT 5
62950: DOUBLE
62951: EQUAL
62952: IFTRUE 62956
62954: GO 63085
62956: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62957: LD_ADDR_VAR 0 5
62961: PUSH
62962: LD_VAR 0 1
62966: PUSH
62967: LD_INT 4
62969: MINUS
62970: PUSH
62971: LD_VAR 0 2
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: LIST
62983: PUSH
62984: LD_VAR 0 1
62988: PUSH
62989: LD_VAR 0 2
62993: PUSH
62994: LD_INT 4
62996: MINUS
62997: PUSH
62998: LD_INT 3
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: LIST
63005: PUSH
63006: LD_VAR 0 1
63010: PUSH
63011: LD_INT 4
63013: PLUS
63014: PUSH
63015: LD_VAR 0 2
63019: PUSH
63020: LD_INT 4
63022: PLUS
63023: PUSH
63024: LD_INT 5
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: LIST
63031: PUSH
63032: LD_VAR 0 1
63036: PUSH
63037: LD_INT 3
63039: PLUS
63040: PUSH
63041: LD_VAR 0 2
63045: PUSH
63046: LD_INT 4
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: PUSH
63054: LD_VAR 0 1
63058: PUSH
63059: LD_VAR 0 2
63063: PUSH
63064: LD_INT 3
63066: PLUS
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: LIST
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: ST_TO_ADDR
// end ; end ;
63083: GO 63086
63085: POP
// result := list ;
63086: LD_ADDR_VAR 0 4
63090: PUSH
63091: LD_VAR 0 5
63095: ST_TO_ADDR
// end ;
63096: LD_VAR 0 4
63100: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63101: LD_INT 0
63103: PPUSH
63104: PPUSH
63105: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63106: LD_VAR 0 1
63110: NOT
63111: PUSH
63112: LD_VAR 0 2
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 3
63125: PUSH
63126: LD_INT 4
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: IN
63135: NOT
63136: OR
63137: IFFALSE 63141
// exit ;
63139: GO 63233
// tmp := [ ] ;
63141: LD_ADDR_VAR 0 5
63145: PUSH
63146: EMPTY
63147: ST_TO_ADDR
// for i in units do
63148: LD_ADDR_VAR 0 4
63152: PUSH
63153: LD_VAR 0 1
63157: PUSH
63158: FOR_IN
63159: IFFALSE 63202
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63161: LD_ADDR_VAR 0 5
63165: PUSH
63166: LD_VAR 0 5
63170: PPUSH
63171: LD_VAR 0 5
63175: PUSH
63176: LD_INT 1
63178: PLUS
63179: PPUSH
63180: LD_VAR 0 4
63184: PPUSH
63185: LD_VAR 0 2
63189: PPUSH
63190: CALL_OW 259
63194: PPUSH
63195: CALL_OW 2
63199: ST_TO_ADDR
63200: GO 63158
63202: POP
63203: POP
// if not tmp then
63204: LD_VAR 0 5
63208: NOT
63209: IFFALSE 63213
// exit ;
63211: GO 63233
// result := SortListByListDesc ( units , tmp ) ;
63213: LD_ADDR_VAR 0 3
63217: PUSH
63218: LD_VAR 0 1
63222: PPUSH
63223: LD_VAR 0 5
63227: PPUSH
63228: CALL_OW 77
63232: ST_TO_ADDR
// end ;
63233: LD_VAR 0 3
63237: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63238: LD_INT 0
63240: PPUSH
63241: PPUSH
63242: PPUSH
// result := false ;
63243: LD_ADDR_VAR 0 3
63247: PUSH
63248: LD_INT 0
63250: ST_TO_ADDR
// x := GetX ( building ) ;
63251: LD_ADDR_VAR 0 4
63255: PUSH
63256: LD_VAR 0 2
63260: PPUSH
63261: CALL_OW 250
63265: ST_TO_ADDR
// y := GetY ( building ) ;
63266: LD_ADDR_VAR 0 5
63270: PUSH
63271: LD_VAR 0 2
63275: PPUSH
63276: CALL_OW 251
63280: ST_TO_ADDR
// if not building or not x or not y then
63281: LD_VAR 0 2
63285: NOT
63286: PUSH
63287: LD_VAR 0 4
63291: NOT
63292: OR
63293: PUSH
63294: LD_VAR 0 5
63298: NOT
63299: OR
63300: IFFALSE 63304
// exit ;
63302: GO 63396
// if GetTaskList ( unit ) then
63304: LD_VAR 0 1
63308: PPUSH
63309: CALL_OW 437
63313: IFFALSE 63396
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63315: LD_STRING e
63317: PUSH
63318: LD_VAR 0 1
63322: PPUSH
63323: CALL_OW 437
63327: PUSH
63328: LD_INT 1
63330: ARRAY
63331: PUSH
63332: LD_INT 1
63334: ARRAY
63335: EQUAL
63336: PUSH
63337: LD_VAR 0 4
63341: PUSH
63342: LD_VAR 0 1
63346: PPUSH
63347: CALL_OW 437
63351: PUSH
63352: LD_INT 1
63354: ARRAY
63355: PUSH
63356: LD_INT 2
63358: ARRAY
63359: EQUAL
63360: AND
63361: PUSH
63362: LD_VAR 0 5
63366: PUSH
63367: LD_VAR 0 1
63371: PPUSH
63372: CALL_OW 437
63376: PUSH
63377: LD_INT 1
63379: ARRAY
63380: PUSH
63381: LD_INT 3
63383: ARRAY
63384: EQUAL
63385: AND
63386: IFFALSE 63396
// result := true end ;
63388: LD_ADDR_VAR 0 3
63392: PUSH
63393: LD_INT 1
63395: ST_TO_ADDR
// end ;
63396: LD_VAR 0 3
63400: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63401: LD_INT 0
63403: PPUSH
// result := false ;
63404: LD_ADDR_VAR 0 4
63408: PUSH
63409: LD_INT 0
63411: ST_TO_ADDR
// if GetTaskList ( unit ) then
63412: LD_VAR 0 1
63416: PPUSH
63417: CALL_OW 437
63421: IFFALSE 63504
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63423: LD_STRING M
63425: PUSH
63426: LD_VAR 0 1
63430: PPUSH
63431: CALL_OW 437
63435: PUSH
63436: LD_INT 1
63438: ARRAY
63439: PUSH
63440: LD_INT 1
63442: ARRAY
63443: EQUAL
63444: PUSH
63445: LD_VAR 0 2
63449: PUSH
63450: LD_VAR 0 1
63454: PPUSH
63455: CALL_OW 437
63459: PUSH
63460: LD_INT 1
63462: ARRAY
63463: PUSH
63464: LD_INT 2
63466: ARRAY
63467: EQUAL
63468: AND
63469: PUSH
63470: LD_VAR 0 3
63474: PUSH
63475: LD_VAR 0 1
63479: PPUSH
63480: CALL_OW 437
63484: PUSH
63485: LD_INT 1
63487: ARRAY
63488: PUSH
63489: LD_INT 3
63491: ARRAY
63492: EQUAL
63493: AND
63494: IFFALSE 63504
// result := true ;
63496: LD_ADDR_VAR 0 4
63500: PUSH
63501: LD_INT 1
63503: ST_TO_ADDR
// end ; end ;
63504: LD_VAR 0 4
63508: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63509: LD_INT 0
63511: PPUSH
63512: PPUSH
63513: PPUSH
63514: PPUSH
// if not unit or not area then
63515: LD_VAR 0 1
63519: NOT
63520: PUSH
63521: LD_VAR 0 2
63525: NOT
63526: OR
63527: IFFALSE 63531
// exit ;
63529: GO 63695
// tmp := AreaToList ( area , i ) ;
63531: LD_ADDR_VAR 0 6
63535: PUSH
63536: LD_VAR 0 2
63540: PPUSH
63541: LD_VAR 0 5
63545: PPUSH
63546: CALL_OW 517
63550: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63551: LD_ADDR_VAR 0 5
63555: PUSH
63556: DOUBLE
63557: LD_INT 1
63559: DEC
63560: ST_TO_ADDR
63561: LD_VAR 0 6
63565: PUSH
63566: LD_INT 1
63568: ARRAY
63569: PUSH
63570: FOR_TO
63571: IFFALSE 63693
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63573: LD_ADDR_VAR 0 7
63577: PUSH
63578: LD_VAR 0 6
63582: PUSH
63583: LD_INT 1
63585: ARRAY
63586: PUSH
63587: LD_VAR 0 5
63591: ARRAY
63592: PUSH
63593: LD_VAR 0 6
63597: PUSH
63598: LD_INT 2
63600: ARRAY
63601: PUSH
63602: LD_VAR 0 5
63606: ARRAY
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63612: LD_VAR 0 7
63616: PUSH
63617: LD_INT 1
63619: ARRAY
63620: PPUSH
63621: LD_VAR 0 7
63625: PUSH
63626: LD_INT 2
63628: ARRAY
63629: PPUSH
63630: CALL_OW 428
63634: PUSH
63635: LD_INT 0
63637: EQUAL
63638: IFFALSE 63691
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63640: LD_VAR 0 1
63644: PPUSH
63645: LD_VAR 0 7
63649: PUSH
63650: LD_INT 1
63652: ARRAY
63653: PPUSH
63654: LD_VAR 0 7
63658: PUSH
63659: LD_INT 2
63661: ARRAY
63662: PPUSH
63663: LD_VAR 0 3
63667: PPUSH
63668: CALL_OW 48
// result := IsPlaced ( unit ) ;
63672: LD_ADDR_VAR 0 4
63676: PUSH
63677: LD_VAR 0 1
63681: PPUSH
63682: CALL_OW 305
63686: ST_TO_ADDR
// exit ;
63687: POP
63688: POP
63689: GO 63695
// end ; end ;
63691: GO 63570
63693: POP
63694: POP
// end ;
63695: LD_VAR 0 4
63699: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63700: LD_INT 0
63702: PPUSH
63703: PPUSH
63704: PPUSH
// if not side or side > 8 then
63705: LD_VAR 0 1
63709: NOT
63710: PUSH
63711: LD_VAR 0 1
63715: PUSH
63716: LD_INT 8
63718: GREATER
63719: OR
63720: IFFALSE 63724
// exit ;
63722: GO 63911
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63724: LD_ADDR_VAR 0 4
63728: PUSH
63729: LD_INT 22
63731: PUSH
63732: LD_VAR 0 1
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 21
63743: PUSH
63744: LD_INT 3
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PPUSH
63755: CALL_OW 69
63759: ST_TO_ADDR
// if not tmp then
63760: LD_VAR 0 4
63764: NOT
63765: IFFALSE 63769
// exit ;
63767: GO 63911
// enable_addtolog := true ;
63769: LD_ADDR_OWVAR 81
63773: PUSH
63774: LD_INT 1
63776: ST_TO_ADDR
// AddToLog ( [ ) ;
63777: LD_STRING [
63779: PPUSH
63780: CALL_OW 561
// for i in tmp do
63784: LD_ADDR_VAR 0 3
63788: PUSH
63789: LD_VAR 0 4
63793: PUSH
63794: FOR_IN
63795: IFFALSE 63902
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63797: LD_STRING [
63799: PUSH
63800: LD_VAR 0 3
63804: PPUSH
63805: CALL_OW 266
63809: STR
63810: PUSH
63811: LD_STRING , 
63813: STR
63814: PUSH
63815: LD_VAR 0 3
63819: PPUSH
63820: CALL_OW 250
63824: STR
63825: PUSH
63826: LD_STRING , 
63828: STR
63829: PUSH
63830: LD_VAR 0 3
63834: PPUSH
63835: CALL_OW 251
63839: STR
63840: PUSH
63841: LD_STRING , 
63843: STR
63844: PUSH
63845: LD_VAR 0 3
63849: PPUSH
63850: CALL_OW 254
63854: STR
63855: PUSH
63856: LD_STRING , 
63858: STR
63859: PUSH
63860: LD_VAR 0 3
63864: PPUSH
63865: LD_INT 1
63867: PPUSH
63868: CALL_OW 268
63872: STR
63873: PUSH
63874: LD_STRING , 
63876: STR
63877: PUSH
63878: LD_VAR 0 3
63882: PPUSH
63883: LD_INT 2
63885: PPUSH
63886: CALL_OW 268
63890: STR
63891: PUSH
63892: LD_STRING ],
63894: STR
63895: PPUSH
63896: CALL_OW 561
// end ;
63900: GO 63794
63902: POP
63903: POP
// AddToLog ( ]; ) ;
63904: LD_STRING ];
63906: PPUSH
63907: CALL_OW 561
// end ;
63911: LD_VAR 0 2
63915: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63916: LD_INT 0
63918: PPUSH
63919: PPUSH
63920: PPUSH
63921: PPUSH
63922: PPUSH
// if not area or not rate or not max then
63923: LD_VAR 0 1
63927: NOT
63928: PUSH
63929: LD_VAR 0 2
63933: NOT
63934: OR
63935: PUSH
63936: LD_VAR 0 4
63940: NOT
63941: OR
63942: IFFALSE 63946
// exit ;
63944: GO 64135
// while 1 do
63946: LD_INT 1
63948: IFFALSE 64135
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63950: LD_ADDR_VAR 0 9
63954: PUSH
63955: LD_VAR 0 1
63959: PPUSH
63960: LD_INT 1
63962: PPUSH
63963: CALL_OW 287
63967: PUSH
63968: LD_INT 10
63970: MUL
63971: ST_TO_ADDR
// r := rate / 10 ;
63972: LD_ADDR_VAR 0 7
63976: PUSH
63977: LD_VAR 0 2
63981: PUSH
63982: LD_INT 10
63984: DIVREAL
63985: ST_TO_ADDR
// time := 1 1$00 ;
63986: LD_ADDR_VAR 0 8
63990: PUSH
63991: LD_INT 2100
63993: ST_TO_ADDR
// if amount < min then
63994: LD_VAR 0 9
63998: PUSH
63999: LD_VAR 0 3
64003: LESS
64004: IFFALSE 64022
// r := r * 2 else
64006: LD_ADDR_VAR 0 7
64010: PUSH
64011: LD_VAR 0 7
64015: PUSH
64016: LD_INT 2
64018: MUL
64019: ST_TO_ADDR
64020: GO 64048
// if amount > max then
64022: LD_VAR 0 9
64026: PUSH
64027: LD_VAR 0 4
64031: GREATER
64032: IFFALSE 64048
// r := r / 2 ;
64034: LD_ADDR_VAR 0 7
64038: PUSH
64039: LD_VAR 0 7
64043: PUSH
64044: LD_INT 2
64046: DIVREAL
64047: ST_TO_ADDR
// time := time / r ;
64048: LD_ADDR_VAR 0 8
64052: PUSH
64053: LD_VAR 0 8
64057: PUSH
64058: LD_VAR 0 7
64062: DIVREAL
64063: ST_TO_ADDR
// if time < 0 then
64064: LD_VAR 0 8
64068: PUSH
64069: LD_INT 0
64071: LESS
64072: IFFALSE 64089
// time := time * - 1 ;
64074: LD_ADDR_VAR 0 8
64078: PUSH
64079: LD_VAR 0 8
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: MUL
64088: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64089: LD_VAR 0 8
64093: PUSH
64094: LD_INT 35
64096: PPUSH
64097: LD_INT 875
64099: PPUSH
64100: CALL_OW 12
64104: PLUS
64105: PPUSH
64106: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64110: LD_INT 1
64112: PPUSH
64113: LD_INT 5
64115: PPUSH
64116: CALL_OW 12
64120: PPUSH
64121: LD_VAR 0 1
64125: PPUSH
64126: LD_INT 1
64128: PPUSH
64129: CALL_OW 55
// end ;
64133: GO 63946
// end ;
64135: LD_VAR 0 5
64139: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64140: LD_INT 0
64142: PPUSH
64143: PPUSH
64144: PPUSH
64145: PPUSH
64146: PPUSH
64147: PPUSH
64148: PPUSH
64149: PPUSH
// if not turrets or not factories then
64150: LD_VAR 0 1
64154: NOT
64155: PUSH
64156: LD_VAR 0 2
64160: NOT
64161: OR
64162: IFFALSE 64166
// exit ;
64164: GO 64473
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64166: LD_ADDR_VAR 0 10
64170: PUSH
64171: LD_INT 5
64173: PUSH
64174: LD_INT 6
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 2
64183: PUSH
64184: LD_INT 4
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 3
64193: PUSH
64194: LD_INT 5
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 24
64208: PUSH
64209: LD_INT 25
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 23
64218: PUSH
64219: LD_INT 27
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 42
64232: PUSH
64233: LD_INT 43
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 44
64242: PUSH
64243: LD_INT 46
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 45
64252: PUSH
64253: LD_INT 47
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: ST_TO_ADDR
// result := [ ] ;
64270: LD_ADDR_VAR 0 3
64274: PUSH
64275: EMPTY
64276: ST_TO_ADDR
// for i in turrets do
64277: LD_ADDR_VAR 0 4
64281: PUSH
64282: LD_VAR 0 1
64286: PUSH
64287: FOR_IN
64288: IFFALSE 64471
// begin nat := GetNation ( i ) ;
64290: LD_ADDR_VAR 0 7
64294: PUSH
64295: LD_VAR 0 4
64299: PPUSH
64300: CALL_OW 248
64304: ST_TO_ADDR
// weapon := 0 ;
64305: LD_ADDR_VAR 0 8
64309: PUSH
64310: LD_INT 0
64312: ST_TO_ADDR
// if not nat then
64313: LD_VAR 0 7
64317: NOT
64318: IFFALSE 64322
// continue ;
64320: GO 64287
// for j in list [ nat ] do
64322: LD_ADDR_VAR 0 5
64326: PUSH
64327: LD_VAR 0 10
64331: PUSH
64332: LD_VAR 0 7
64336: ARRAY
64337: PUSH
64338: FOR_IN
64339: IFFALSE 64380
// if GetBWeapon ( i ) = j [ 1 ] then
64341: LD_VAR 0 4
64345: PPUSH
64346: CALL_OW 269
64350: PUSH
64351: LD_VAR 0 5
64355: PUSH
64356: LD_INT 1
64358: ARRAY
64359: EQUAL
64360: IFFALSE 64378
// begin weapon := j [ 2 ] ;
64362: LD_ADDR_VAR 0 8
64366: PUSH
64367: LD_VAR 0 5
64371: PUSH
64372: LD_INT 2
64374: ARRAY
64375: ST_TO_ADDR
// break ;
64376: GO 64380
// end ;
64378: GO 64338
64380: POP
64381: POP
// if not weapon then
64382: LD_VAR 0 8
64386: NOT
64387: IFFALSE 64391
// continue ;
64389: GO 64287
// for k in factories do
64391: LD_ADDR_VAR 0 6
64395: PUSH
64396: LD_VAR 0 2
64400: PUSH
64401: FOR_IN
64402: IFFALSE 64467
// begin weapons := AvailableWeaponList ( k ) ;
64404: LD_ADDR_VAR 0 9
64408: PUSH
64409: LD_VAR 0 6
64413: PPUSH
64414: CALL_OW 478
64418: ST_TO_ADDR
// if not weapons then
64419: LD_VAR 0 9
64423: NOT
64424: IFFALSE 64428
// continue ;
64426: GO 64401
// if weapon in weapons then
64428: LD_VAR 0 8
64432: PUSH
64433: LD_VAR 0 9
64437: IN
64438: IFFALSE 64465
// begin result := [ i , weapon ] ;
64440: LD_ADDR_VAR 0 3
64444: PUSH
64445: LD_VAR 0 4
64449: PUSH
64450: LD_VAR 0 8
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: ST_TO_ADDR
// exit ;
64459: POP
64460: POP
64461: POP
64462: POP
64463: GO 64473
// end ; end ;
64465: GO 64401
64467: POP
64468: POP
// end ;
64469: GO 64287
64471: POP
64472: POP
// end ;
64473: LD_VAR 0 3
64477: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64478: LD_INT 0
64480: PPUSH
// if not side or side > 8 then
64481: LD_VAR 0 3
64485: NOT
64486: PUSH
64487: LD_VAR 0 3
64491: PUSH
64492: LD_INT 8
64494: GREATER
64495: OR
64496: IFFALSE 64500
// exit ;
64498: GO 64559
// if not range then
64500: LD_VAR 0 4
64504: NOT
64505: IFFALSE 64516
// range := - 12 ;
64507: LD_ADDR_VAR 0 4
64511: PUSH
64512: LD_INT 12
64514: NEG
64515: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64516: LD_VAR 0 1
64520: PPUSH
64521: LD_VAR 0 2
64525: PPUSH
64526: LD_VAR 0 3
64530: PPUSH
64531: LD_VAR 0 4
64535: PPUSH
64536: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64540: LD_VAR 0 1
64544: PPUSH
64545: LD_VAR 0 2
64549: PPUSH
64550: LD_VAR 0 3
64554: PPUSH
64555: CALL_OW 331
// end ;
64559: LD_VAR 0 5
64563: RET
// export function Video ( mode ) ; begin
64564: LD_INT 0
64566: PPUSH
// ingame_video = mode ;
64567: LD_ADDR_OWVAR 52
64571: PUSH
64572: LD_VAR 0 1
64576: ST_TO_ADDR
// interface_hidden = mode ;
64577: LD_ADDR_OWVAR 54
64581: PUSH
64582: LD_VAR 0 1
64586: ST_TO_ADDR
// end ;
64587: LD_VAR 0 2
64591: RET
// export function Join ( array , element ) ; begin
64592: LD_INT 0
64594: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64595: LD_ADDR_VAR 0 3
64599: PUSH
64600: LD_VAR 0 1
64604: PPUSH
64605: LD_VAR 0 1
64609: PUSH
64610: LD_INT 1
64612: PLUS
64613: PPUSH
64614: LD_VAR 0 2
64618: PPUSH
64619: CALL_OW 1
64623: ST_TO_ADDR
// end ;
64624: LD_VAR 0 3
64628: RET
// export function JoinUnion ( array , element ) ; begin
64629: LD_INT 0
64631: PPUSH
// result := array union element ;
64632: LD_ADDR_VAR 0 3
64636: PUSH
64637: LD_VAR 0 1
64641: PUSH
64642: LD_VAR 0 2
64646: UNION
64647: ST_TO_ADDR
// end ;
64648: LD_VAR 0 3
64652: RET
// export function GetBehemoths ( side ) ; begin
64653: LD_INT 0
64655: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64656: LD_ADDR_VAR 0 2
64660: PUSH
64661: LD_INT 22
64663: PUSH
64664: LD_VAR 0 1
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 31
64675: PUSH
64676: LD_INT 25
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PPUSH
64687: CALL_OW 69
64691: ST_TO_ADDR
// end ;
64692: LD_VAR 0 2
64696: RET
// export function Shuffle ( array ) ; var i , index ; begin
64697: LD_INT 0
64699: PPUSH
64700: PPUSH
64701: PPUSH
// result := [ ] ;
64702: LD_ADDR_VAR 0 2
64706: PUSH
64707: EMPTY
64708: ST_TO_ADDR
// if not array then
64709: LD_VAR 0 1
64713: NOT
64714: IFFALSE 64718
// exit ;
64716: GO 64817
// Randomize ;
64718: CALL_OW 10
// for i = array downto 1 do
64722: LD_ADDR_VAR 0 3
64726: PUSH
64727: DOUBLE
64728: LD_VAR 0 1
64732: INC
64733: ST_TO_ADDR
64734: LD_INT 1
64736: PUSH
64737: FOR_DOWNTO
64738: IFFALSE 64815
// begin index := rand ( 1 , array ) ;
64740: LD_ADDR_VAR 0 4
64744: PUSH
64745: LD_INT 1
64747: PPUSH
64748: LD_VAR 0 1
64752: PPUSH
64753: CALL_OW 12
64757: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64758: LD_ADDR_VAR 0 2
64762: PUSH
64763: LD_VAR 0 2
64767: PPUSH
64768: LD_VAR 0 2
64772: PUSH
64773: LD_INT 1
64775: PLUS
64776: PPUSH
64777: LD_VAR 0 1
64781: PUSH
64782: LD_VAR 0 4
64786: ARRAY
64787: PPUSH
64788: CALL_OW 2
64792: ST_TO_ADDR
// array := Delete ( array , index ) ;
64793: LD_ADDR_VAR 0 1
64797: PUSH
64798: LD_VAR 0 1
64802: PPUSH
64803: LD_VAR 0 4
64807: PPUSH
64808: CALL_OW 3
64812: ST_TO_ADDR
// end ;
64813: GO 64737
64815: POP
64816: POP
// end ;
64817: LD_VAR 0 2
64821: RET
// export function GetBaseMaterials ( base ) ; begin
64822: LD_INT 0
64824: PPUSH
// result := [ 0 , 0 , 0 ] ;
64825: LD_ADDR_VAR 0 2
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: LIST
64843: ST_TO_ADDR
// if not base then
64844: LD_VAR 0 1
64848: NOT
64849: IFFALSE 64853
// exit ;
64851: GO 64902
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64853: LD_ADDR_VAR 0 2
64857: PUSH
64858: LD_VAR 0 1
64862: PPUSH
64863: LD_INT 1
64865: PPUSH
64866: CALL_OW 275
64870: PUSH
64871: LD_VAR 0 1
64875: PPUSH
64876: LD_INT 2
64878: PPUSH
64879: CALL_OW 275
64883: PUSH
64884: LD_VAR 0 1
64888: PPUSH
64889: LD_INT 3
64891: PPUSH
64892: CALL_OW 275
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: ST_TO_ADDR
// end ;
64902: LD_VAR 0 2
64906: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64907: LD_INT 0
64909: PPUSH
64910: PPUSH
// result := array ;
64911: LD_ADDR_VAR 0 3
64915: PUSH
64916: LD_VAR 0 1
64920: ST_TO_ADDR
// if size >= result then
64921: LD_VAR 0 2
64925: PUSH
64926: LD_VAR 0 3
64930: GREATEREQUAL
64931: IFFALSE 64935
// exit ;
64933: GO 64985
// if size then
64935: LD_VAR 0 2
64939: IFFALSE 64985
// for i := array downto size do
64941: LD_ADDR_VAR 0 4
64945: PUSH
64946: DOUBLE
64947: LD_VAR 0 1
64951: INC
64952: ST_TO_ADDR
64953: LD_VAR 0 2
64957: PUSH
64958: FOR_DOWNTO
64959: IFFALSE 64983
// result := Delete ( result , result ) ;
64961: LD_ADDR_VAR 0 3
64965: PUSH
64966: LD_VAR 0 3
64970: PPUSH
64971: LD_VAR 0 3
64975: PPUSH
64976: CALL_OW 3
64980: ST_TO_ADDR
64981: GO 64958
64983: POP
64984: POP
// end ;
64985: LD_VAR 0 3
64989: RET
// export function ComExit ( unit ) ; var tmp ; begin
64990: LD_INT 0
64992: PPUSH
64993: PPUSH
// if not IsInUnit ( unit ) then
64994: LD_VAR 0 1
64998: PPUSH
64999: CALL_OW 310
65003: NOT
65004: IFFALSE 65008
// exit ;
65006: GO 65068
// tmp := IsInUnit ( unit ) ;
65008: LD_ADDR_VAR 0 3
65012: PUSH
65013: LD_VAR 0 1
65017: PPUSH
65018: CALL_OW 310
65022: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65023: LD_VAR 0 3
65027: PPUSH
65028: CALL_OW 247
65032: PUSH
65033: LD_INT 2
65035: EQUAL
65036: IFFALSE 65049
// ComExitVehicle ( unit ) else
65038: LD_VAR 0 1
65042: PPUSH
65043: CALL_OW 121
65047: GO 65058
// ComExitBuilding ( unit ) ;
65049: LD_VAR 0 1
65053: PPUSH
65054: CALL_OW 122
// result := tmp ;
65058: LD_ADDR_VAR 0 2
65062: PUSH
65063: LD_VAR 0 3
65067: ST_TO_ADDR
// end ;
65068: LD_VAR 0 2
65072: RET
// export function ComExitAll ( units ) ; var i ; begin
65073: LD_INT 0
65075: PPUSH
65076: PPUSH
// if not units then
65077: LD_VAR 0 1
65081: NOT
65082: IFFALSE 65086
// exit ;
65084: GO 65112
// for i in units do
65086: LD_ADDR_VAR 0 3
65090: PUSH
65091: LD_VAR 0 1
65095: PUSH
65096: FOR_IN
65097: IFFALSE 65110
// ComExit ( i ) ;
65099: LD_VAR 0 3
65103: PPUSH
65104: CALL 64990 0 1
65108: GO 65096
65110: POP
65111: POP
// end ;
65112: LD_VAR 0 2
65116: RET
// export function ResetHc ; begin
65117: LD_INT 0
65119: PPUSH
// InitHc ;
65120: CALL_OW 19
// hc_importance := 0 ;
65124: LD_ADDR_OWVAR 32
65128: PUSH
65129: LD_INT 0
65131: ST_TO_ADDR
// end ;
65132: LD_VAR 0 1
65136: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65137: LD_INT 0
65139: PPUSH
65140: PPUSH
65141: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65142: LD_ADDR_VAR 0 6
65146: PUSH
65147: LD_VAR 0 1
65151: PUSH
65152: LD_VAR 0 3
65156: PLUS
65157: PUSH
65158: LD_INT 2
65160: DIV
65161: ST_TO_ADDR
// if _x < 0 then
65162: LD_VAR 0 6
65166: PUSH
65167: LD_INT 0
65169: LESS
65170: IFFALSE 65187
// _x := _x * - 1 ;
65172: LD_ADDR_VAR 0 6
65176: PUSH
65177: LD_VAR 0 6
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: MUL
65186: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65187: LD_ADDR_VAR 0 7
65191: PUSH
65192: LD_VAR 0 2
65196: PUSH
65197: LD_VAR 0 4
65201: PLUS
65202: PUSH
65203: LD_INT 2
65205: DIV
65206: ST_TO_ADDR
// if _y < 0 then
65207: LD_VAR 0 7
65211: PUSH
65212: LD_INT 0
65214: LESS
65215: IFFALSE 65232
// _y := _y * - 1 ;
65217: LD_ADDR_VAR 0 7
65221: PUSH
65222: LD_VAR 0 7
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: MUL
65231: ST_TO_ADDR
// result := [ _x , _y ] ;
65232: LD_ADDR_VAR 0 5
65236: PUSH
65237: LD_VAR 0 6
65241: PUSH
65242: LD_VAR 0 7
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: ST_TO_ADDR
// end ;
65251: LD_VAR 0 5
65255: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65256: LD_INT 0
65258: PPUSH
65259: PPUSH
65260: PPUSH
65261: PPUSH
// task := GetTaskList ( unit ) ;
65262: LD_ADDR_VAR 0 7
65266: PUSH
65267: LD_VAR 0 1
65271: PPUSH
65272: CALL_OW 437
65276: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65277: LD_VAR 0 7
65281: NOT
65282: PUSH
65283: LD_VAR 0 1
65287: PPUSH
65288: LD_VAR 0 2
65292: PPUSH
65293: CALL_OW 308
65297: NOT
65298: AND
65299: IFFALSE 65303
// exit ;
65301: GO 65421
// if IsInArea ( unit , area ) then
65303: LD_VAR 0 1
65307: PPUSH
65308: LD_VAR 0 2
65312: PPUSH
65313: CALL_OW 308
65317: IFFALSE 65335
// begin ComMoveToArea ( unit , goAway ) ;
65319: LD_VAR 0 1
65323: PPUSH
65324: LD_VAR 0 3
65328: PPUSH
65329: CALL_OW 113
// exit ;
65333: GO 65421
// end ; if task [ 1 ] [ 1 ] <> M then
65335: LD_VAR 0 7
65339: PUSH
65340: LD_INT 1
65342: ARRAY
65343: PUSH
65344: LD_INT 1
65346: ARRAY
65347: PUSH
65348: LD_STRING M
65350: NONEQUAL
65351: IFFALSE 65355
// exit ;
65353: GO 65421
// x := task [ 1 ] [ 2 ] ;
65355: LD_ADDR_VAR 0 5
65359: PUSH
65360: LD_VAR 0 7
65364: PUSH
65365: LD_INT 1
65367: ARRAY
65368: PUSH
65369: LD_INT 2
65371: ARRAY
65372: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65373: LD_ADDR_VAR 0 6
65377: PUSH
65378: LD_VAR 0 7
65382: PUSH
65383: LD_INT 1
65385: ARRAY
65386: PUSH
65387: LD_INT 3
65389: ARRAY
65390: ST_TO_ADDR
// if InArea ( x , y , area ) then
65391: LD_VAR 0 5
65395: PPUSH
65396: LD_VAR 0 6
65400: PPUSH
65401: LD_VAR 0 2
65405: PPUSH
65406: CALL_OW 309
65410: IFFALSE 65421
// ComStop ( unit ) ;
65412: LD_VAR 0 1
65416: PPUSH
65417: CALL_OW 141
// end ;
65421: LD_VAR 0 4
65425: RET
// export function Abs ( value ) ; begin
65426: LD_INT 0
65428: PPUSH
// result := value ;
65429: LD_ADDR_VAR 0 2
65433: PUSH
65434: LD_VAR 0 1
65438: ST_TO_ADDR
// if value < 0 then
65439: LD_VAR 0 1
65443: PUSH
65444: LD_INT 0
65446: LESS
65447: IFFALSE 65464
// result := value * - 1 ;
65449: LD_ADDR_VAR 0 2
65453: PUSH
65454: LD_VAR 0 1
65458: PUSH
65459: LD_INT 1
65461: NEG
65462: MUL
65463: ST_TO_ADDR
// end ;
65464: LD_VAR 0 2
65468: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65469: LD_INT 0
65471: PPUSH
65472: PPUSH
65473: PPUSH
65474: PPUSH
65475: PPUSH
65476: PPUSH
65477: PPUSH
65478: PPUSH
// if not unit or not building then
65479: LD_VAR 0 1
65483: NOT
65484: PUSH
65485: LD_VAR 0 2
65489: NOT
65490: OR
65491: IFFALSE 65495
// exit ;
65493: GO 65721
// x := GetX ( building ) ;
65495: LD_ADDR_VAR 0 4
65499: PUSH
65500: LD_VAR 0 2
65504: PPUSH
65505: CALL_OW 250
65509: ST_TO_ADDR
// y := GetY ( building ) ;
65510: LD_ADDR_VAR 0 6
65514: PUSH
65515: LD_VAR 0 2
65519: PPUSH
65520: CALL_OW 251
65524: ST_TO_ADDR
// d := GetDir ( building ) ;
65525: LD_ADDR_VAR 0 8
65529: PUSH
65530: LD_VAR 0 2
65534: PPUSH
65535: CALL_OW 254
65539: ST_TO_ADDR
// r := 4 ;
65540: LD_ADDR_VAR 0 9
65544: PUSH
65545: LD_INT 4
65547: ST_TO_ADDR
// for i := 1 to 5 do
65548: LD_ADDR_VAR 0 10
65552: PUSH
65553: DOUBLE
65554: LD_INT 1
65556: DEC
65557: ST_TO_ADDR
65558: LD_INT 5
65560: PUSH
65561: FOR_TO
65562: IFFALSE 65719
// begin _x := ShiftX ( x , d , r + i ) ;
65564: LD_ADDR_VAR 0 5
65568: PUSH
65569: LD_VAR 0 4
65573: PPUSH
65574: LD_VAR 0 8
65578: PPUSH
65579: LD_VAR 0 9
65583: PUSH
65584: LD_VAR 0 10
65588: PLUS
65589: PPUSH
65590: CALL_OW 272
65594: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65595: LD_ADDR_VAR 0 7
65599: PUSH
65600: LD_VAR 0 6
65604: PPUSH
65605: LD_VAR 0 8
65609: PPUSH
65610: LD_VAR 0 9
65614: PUSH
65615: LD_VAR 0 10
65619: PLUS
65620: PPUSH
65621: CALL_OW 273
65625: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65626: LD_VAR 0 5
65630: PPUSH
65631: LD_VAR 0 7
65635: PPUSH
65636: CALL_OW 488
65640: PUSH
65641: LD_VAR 0 5
65645: PPUSH
65646: LD_VAR 0 7
65650: PPUSH
65651: CALL_OW 428
65655: PPUSH
65656: CALL_OW 247
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: LD_INT 2
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: IN
65671: NOT
65672: AND
65673: IFFALSE 65717
// begin ComMoveXY ( unit , _x , _y ) ;
65675: LD_VAR 0 1
65679: PPUSH
65680: LD_VAR 0 5
65684: PPUSH
65685: LD_VAR 0 7
65689: PPUSH
65690: CALL_OW 111
// result := [ _x , _y ] ;
65694: LD_ADDR_VAR 0 3
65698: PUSH
65699: LD_VAR 0 5
65703: PUSH
65704: LD_VAR 0 7
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: ST_TO_ADDR
// exit ;
65713: POP
65714: POP
65715: GO 65721
// end ; end ;
65717: GO 65561
65719: POP
65720: POP
// end ;
65721: LD_VAR 0 3
65725: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65726: LD_INT 0
65728: PPUSH
65729: PPUSH
65730: PPUSH
// result := 0 ;
65731: LD_ADDR_VAR 0 3
65735: PUSH
65736: LD_INT 0
65738: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65739: LD_VAR 0 1
65743: PUSH
65744: LD_INT 0
65746: LESS
65747: PUSH
65748: LD_VAR 0 1
65752: PUSH
65753: LD_INT 8
65755: GREATER
65756: OR
65757: PUSH
65758: LD_VAR 0 2
65762: PUSH
65763: LD_INT 0
65765: LESS
65766: OR
65767: PUSH
65768: LD_VAR 0 2
65772: PUSH
65773: LD_INT 8
65775: GREATER
65776: OR
65777: IFFALSE 65781
// exit ;
65779: GO 65856
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65781: LD_ADDR_VAR 0 4
65785: PUSH
65786: LD_INT 22
65788: PUSH
65789: LD_VAR 0 2
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PPUSH
65798: CALL_OW 69
65802: PUSH
65803: FOR_IN
65804: IFFALSE 65854
// begin un := UnitShoot ( i ) ;
65806: LD_ADDR_VAR 0 5
65810: PUSH
65811: LD_VAR 0 4
65815: PPUSH
65816: CALL_OW 504
65820: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65821: LD_VAR 0 5
65825: PPUSH
65826: CALL_OW 255
65830: PUSH
65831: LD_VAR 0 1
65835: EQUAL
65836: IFFALSE 65852
// begin result := un ;
65838: LD_ADDR_VAR 0 3
65842: PUSH
65843: LD_VAR 0 5
65847: ST_TO_ADDR
// exit ;
65848: POP
65849: POP
65850: GO 65856
// end ; end ;
65852: GO 65803
65854: POP
65855: POP
// end ;
65856: LD_VAR 0 3
65860: RET
// export function GetCargoBay ( units ) ; begin
65861: LD_INT 0
65863: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65864: LD_ADDR_VAR 0 2
65868: PUSH
65869: LD_VAR 0 1
65873: PPUSH
65874: LD_INT 2
65876: PUSH
65877: LD_INT 34
65879: PUSH
65880: LD_INT 12
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 34
65889: PUSH
65890: LD_INT 51
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 34
65899: PUSH
65900: LD_INT 32
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 34
65909: PUSH
65910: LD_INT 89
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: PPUSH
65924: CALL_OW 72
65928: ST_TO_ADDR
// end ;
65929: LD_VAR 0 2
65933: RET
// export function Negate ( value ) ; begin
65934: LD_INT 0
65936: PPUSH
// result := not value ;
65937: LD_ADDR_VAR 0 2
65941: PUSH
65942: LD_VAR 0 1
65946: NOT
65947: ST_TO_ADDR
// end ;
65948: LD_VAR 0 2
65952: RET
// export function Inc ( value ) ; begin
65953: LD_INT 0
65955: PPUSH
// result := value + 1 ;
65956: LD_ADDR_VAR 0 2
65960: PUSH
65961: LD_VAR 0 1
65965: PUSH
65966: LD_INT 1
65968: PLUS
65969: ST_TO_ADDR
// end ;
65970: LD_VAR 0 2
65974: RET
// export function Dec ( value ) ; begin
65975: LD_INT 0
65977: PPUSH
// result := value - 1 ;
65978: LD_ADDR_VAR 0 2
65982: PUSH
65983: LD_VAR 0 1
65987: PUSH
65988: LD_INT 1
65990: MINUS
65991: ST_TO_ADDR
// end ;
65992: LD_VAR 0 2
65996: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65997: LD_INT 0
65999: PPUSH
66000: PPUSH
66001: PPUSH
66002: PPUSH
66003: PPUSH
66004: PPUSH
66005: PPUSH
66006: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66007: LD_VAR 0 1
66011: PPUSH
66012: LD_VAR 0 2
66016: PPUSH
66017: CALL_OW 488
66021: NOT
66022: PUSH
66023: LD_VAR 0 3
66027: PPUSH
66028: LD_VAR 0 4
66032: PPUSH
66033: CALL_OW 488
66037: NOT
66038: OR
66039: IFFALSE 66052
// begin result := - 1 ;
66041: LD_ADDR_VAR 0 5
66045: PUSH
66046: LD_INT 1
66048: NEG
66049: ST_TO_ADDR
// exit ;
66050: GO 66287
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66052: LD_ADDR_VAR 0 12
66056: PUSH
66057: LD_VAR 0 1
66061: PPUSH
66062: LD_VAR 0 2
66066: PPUSH
66067: LD_VAR 0 3
66071: PPUSH
66072: LD_VAR 0 4
66076: PPUSH
66077: CALL 65137 0 4
66081: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66082: LD_ADDR_VAR 0 11
66086: PUSH
66087: LD_VAR 0 1
66091: PPUSH
66092: LD_VAR 0 2
66096: PPUSH
66097: LD_VAR 0 12
66101: PUSH
66102: LD_INT 1
66104: ARRAY
66105: PPUSH
66106: LD_VAR 0 12
66110: PUSH
66111: LD_INT 2
66113: ARRAY
66114: PPUSH
66115: CALL_OW 298
66119: ST_TO_ADDR
// distance := 9999 ;
66120: LD_ADDR_VAR 0 10
66124: PUSH
66125: LD_INT 9999
66127: ST_TO_ADDR
// for i := 0 to 5 do
66128: LD_ADDR_VAR 0 6
66132: PUSH
66133: DOUBLE
66134: LD_INT 0
66136: DEC
66137: ST_TO_ADDR
66138: LD_INT 5
66140: PUSH
66141: FOR_TO
66142: IFFALSE 66285
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66144: LD_ADDR_VAR 0 7
66148: PUSH
66149: LD_VAR 0 1
66153: PPUSH
66154: LD_VAR 0 6
66158: PPUSH
66159: LD_VAR 0 11
66163: PPUSH
66164: CALL_OW 272
66168: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66169: LD_ADDR_VAR 0 8
66173: PUSH
66174: LD_VAR 0 2
66178: PPUSH
66179: LD_VAR 0 6
66183: PPUSH
66184: LD_VAR 0 11
66188: PPUSH
66189: CALL_OW 273
66193: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66194: LD_VAR 0 7
66198: PPUSH
66199: LD_VAR 0 8
66203: PPUSH
66204: CALL_OW 488
66208: NOT
66209: IFFALSE 66213
// continue ;
66211: GO 66141
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66213: LD_ADDR_VAR 0 9
66217: PUSH
66218: LD_VAR 0 12
66222: PUSH
66223: LD_INT 1
66225: ARRAY
66226: PPUSH
66227: LD_VAR 0 12
66231: PUSH
66232: LD_INT 2
66234: ARRAY
66235: PPUSH
66236: LD_VAR 0 7
66240: PPUSH
66241: LD_VAR 0 8
66245: PPUSH
66246: CALL_OW 298
66250: ST_TO_ADDR
// if tmp < distance then
66251: LD_VAR 0 9
66255: PUSH
66256: LD_VAR 0 10
66260: LESS
66261: IFFALSE 66283
// begin result := i ;
66263: LD_ADDR_VAR 0 5
66267: PUSH
66268: LD_VAR 0 6
66272: ST_TO_ADDR
// distance := tmp ;
66273: LD_ADDR_VAR 0 10
66277: PUSH
66278: LD_VAR 0 9
66282: ST_TO_ADDR
// end ; end ;
66283: GO 66141
66285: POP
66286: POP
// end ;
66287: LD_VAR 0 5
66291: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66292: LD_INT 0
66294: PPUSH
66295: PPUSH
// if not driver or not IsInUnit ( driver ) then
66296: LD_VAR 0 1
66300: NOT
66301: PUSH
66302: LD_VAR 0 1
66306: PPUSH
66307: CALL_OW 310
66311: NOT
66312: OR
66313: IFFALSE 66317
// exit ;
66315: GO 66407
// vehicle := IsInUnit ( driver ) ;
66317: LD_ADDR_VAR 0 3
66321: PUSH
66322: LD_VAR 0 1
66326: PPUSH
66327: CALL_OW 310
66331: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66332: LD_VAR 0 1
66336: PPUSH
66337: LD_STRING \
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: PUSH
66367: LD_STRING E
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: LD_INT 0
66375: PUSH
66376: LD_VAR 0 3
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PPUSH
66403: CALL_OW 446
// end ;
66407: LD_VAR 0 2
66411: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66412: LD_INT 0
66414: PPUSH
66415: PPUSH
// if not driver or not IsInUnit ( driver ) then
66416: LD_VAR 0 1
66420: NOT
66421: PUSH
66422: LD_VAR 0 1
66426: PPUSH
66427: CALL_OW 310
66431: NOT
66432: OR
66433: IFFALSE 66437
// exit ;
66435: GO 66527
// vehicle := IsInUnit ( driver ) ;
66437: LD_ADDR_VAR 0 3
66441: PUSH
66442: LD_VAR 0 1
66446: PPUSH
66447: CALL_OW 310
66451: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66452: LD_VAR 0 1
66456: PPUSH
66457: LD_STRING \
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: PUSH
66487: LD_STRING E
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: LD_VAR 0 3
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PPUSH
66523: CALL_OW 447
// end ;
66527: LD_VAR 0 2
66531: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66532: LD_INT 0
66534: PPUSH
66535: PPUSH
66536: PPUSH
// tmp := [ ] ;
66537: LD_ADDR_VAR 0 5
66541: PUSH
66542: EMPTY
66543: ST_TO_ADDR
// for i in units do
66544: LD_ADDR_VAR 0 4
66548: PUSH
66549: LD_VAR 0 1
66553: PUSH
66554: FOR_IN
66555: IFFALSE 66593
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66557: LD_ADDR_VAR 0 5
66561: PUSH
66562: LD_VAR 0 5
66566: PPUSH
66567: LD_VAR 0 5
66571: PUSH
66572: LD_INT 1
66574: PLUS
66575: PPUSH
66576: LD_VAR 0 4
66580: PPUSH
66581: CALL_OW 256
66585: PPUSH
66586: CALL_OW 2
66590: ST_TO_ADDR
66591: GO 66554
66593: POP
66594: POP
// if not tmp then
66595: LD_VAR 0 5
66599: NOT
66600: IFFALSE 66604
// exit ;
66602: GO 66652
// if asc then
66604: LD_VAR 0 2
66608: IFFALSE 66632
// result := SortListByListAsc ( units , tmp ) else
66610: LD_ADDR_VAR 0 3
66614: PUSH
66615: LD_VAR 0 1
66619: PPUSH
66620: LD_VAR 0 5
66624: PPUSH
66625: CALL_OW 76
66629: ST_TO_ADDR
66630: GO 66652
// result := SortListByListDesc ( units , tmp ) ;
66632: LD_ADDR_VAR 0 3
66636: PUSH
66637: LD_VAR 0 1
66641: PPUSH
66642: LD_VAR 0 5
66646: PPUSH
66647: CALL_OW 77
66651: ST_TO_ADDR
// end ;
66652: LD_VAR 0 3
66656: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66657: LD_INT 0
66659: PPUSH
66660: PPUSH
// task := GetTaskList ( mech ) ;
66661: LD_ADDR_VAR 0 4
66665: PUSH
66666: LD_VAR 0 1
66670: PPUSH
66671: CALL_OW 437
66675: ST_TO_ADDR
// if not task then
66676: LD_VAR 0 4
66680: NOT
66681: IFFALSE 66685
// exit ;
66683: GO 66727
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66685: LD_ADDR_VAR 0 3
66689: PUSH
66690: LD_VAR 0 4
66694: PUSH
66695: LD_INT 1
66697: ARRAY
66698: PUSH
66699: LD_INT 1
66701: ARRAY
66702: PUSH
66703: LD_STRING r
66705: EQUAL
66706: PUSH
66707: LD_VAR 0 4
66711: PUSH
66712: LD_INT 1
66714: ARRAY
66715: PUSH
66716: LD_INT 4
66718: ARRAY
66719: PUSH
66720: LD_VAR 0 2
66724: EQUAL
66725: AND
66726: ST_TO_ADDR
// end ;
66727: LD_VAR 0 3
66731: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66732: LD_INT 0
66734: PPUSH
// SetDir ( unit , d ) ;
66735: LD_VAR 0 1
66739: PPUSH
66740: LD_VAR 0 4
66744: PPUSH
66745: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66749: LD_VAR 0 1
66753: PPUSH
66754: LD_VAR 0 2
66758: PPUSH
66759: LD_VAR 0 3
66763: PPUSH
66764: LD_VAR 0 5
66768: PPUSH
66769: CALL_OW 48
// end ;
66773: LD_VAR 0 6
66777: RET
// export function ToNaturalNumber ( number ) ; begin
66778: LD_INT 0
66780: PPUSH
// result := number div 1 ;
66781: LD_ADDR_VAR 0 2
66785: PUSH
66786: LD_VAR 0 1
66790: PUSH
66791: LD_INT 1
66793: DIV
66794: ST_TO_ADDR
// if number < 0 then
66795: LD_VAR 0 1
66799: PUSH
66800: LD_INT 0
66802: LESS
66803: IFFALSE 66813
// result := 0 ;
66805: LD_ADDR_VAR 0 2
66809: PUSH
66810: LD_INT 0
66812: ST_TO_ADDR
// end ;
66813: LD_VAR 0 2
66817: RET
// export function SortByClass ( units , class ) ; var un ; begin
66818: LD_INT 0
66820: PPUSH
66821: PPUSH
// if not units or not class then
66822: LD_VAR 0 1
66826: NOT
66827: PUSH
66828: LD_VAR 0 2
66832: NOT
66833: OR
66834: IFFALSE 66838
// exit ;
66836: GO 66933
// result := [ ] ;
66838: LD_ADDR_VAR 0 3
66842: PUSH
66843: EMPTY
66844: ST_TO_ADDR
// for un in units do
66845: LD_ADDR_VAR 0 4
66849: PUSH
66850: LD_VAR 0 1
66854: PUSH
66855: FOR_IN
66856: IFFALSE 66931
// if GetClass ( un ) = class then
66858: LD_VAR 0 4
66862: PPUSH
66863: CALL_OW 257
66867: PUSH
66868: LD_VAR 0 2
66872: EQUAL
66873: IFFALSE 66900
// result := Insert ( result , 1 , un ) else
66875: LD_ADDR_VAR 0 3
66879: PUSH
66880: LD_VAR 0 3
66884: PPUSH
66885: LD_INT 1
66887: PPUSH
66888: LD_VAR 0 4
66892: PPUSH
66893: CALL_OW 2
66897: ST_TO_ADDR
66898: GO 66929
// result := Replace ( result , result + 1 , un ) ;
66900: LD_ADDR_VAR 0 3
66904: PUSH
66905: LD_VAR 0 3
66909: PPUSH
66910: LD_VAR 0 3
66914: PUSH
66915: LD_INT 1
66917: PLUS
66918: PPUSH
66919: LD_VAR 0 4
66923: PPUSH
66924: CALL_OW 1
66928: ST_TO_ADDR
66929: GO 66855
66931: POP
66932: POP
// end ;
66933: LD_VAR 0 3
66937: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66938: LD_INT 0
66940: PPUSH
66941: PPUSH
66942: PPUSH
66943: PPUSH
66944: PPUSH
66945: PPUSH
66946: PPUSH
// result := [ ] ;
66947: LD_ADDR_VAR 0 4
66951: PUSH
66952: EMPTY
66953: ST_TO_ADDR
// if x - r < 0 then
66954: LD_VAR 0 1
66958: PUSH
66959: LD_VAR 0 3
66963: MINUS
66964: PUSH
66965: LD_INT 0
66967: LESS
66968: IFFALSE 66980
// min_x := 0 else
66970: LD_ADDR_VAR 0 8
66974: PUSH
66975: LD_INT 0
66977: ST_TO_ADDR
66978: GO 66996
// min_x := x - r ;
66980: LD_ADDR_VAR 0 8
66984: PUSH
66985: LD_VAR 0 1
66989: PUSH
66990: LD_VAR 0 3
66994: MINUS
66995: ST_TO_ADDR
// if y - r < 0 then
66996: LD_VAR 0 2
67000: PUSH
67001: LD_VAR 0 3
67005: MINUS
67006: PUSH
67007: LD_INT 0
67009: LESS
67010: IFFALSE 67022
// min_y := 0 else
67012: LD_ADDR_VAR 0 7
67016: PUSH
67017: LD_INT 0
67019: ST_TO_ADDR
67020: GO 67038
// min_y := y - r ;
67022: LD_ADDR_VAR 0 7
67026: PUSH
67027: LD_VAR 0 2
67031: PUSH
67032: LD_VAR 0 3
67036: MINUS
67037: ST_TO_ADDR
// max_x := x + r ;
67038: LD_ADDR_VAR 0 9
67042: PUSH
67043: LD_VAR 0 1
67047: PUSH
67048: LD_VAR 0 3
67052: PLUS
67053: ST_TO_ADDR
// max_y := y + r ;
67054: LD_ADDR_VAR 0 10
67058: PUSH
67059: LD_VAR 0 2
67063: PUSH
67064: LD_VAR 0 3
67068: PLUS
67069: ST_TO_ADDR
// for _x = min_x to max_x do
67070: LD_ADDR_VAR 0 5
67074: PUSH
67075: DOUBLE
67076: LD_VAR 0 8
67080: DEC
67081: ST_TO_ADDR
67082: LD_VAR 0 9
67086: PUSH
67087: FOR_TO
67088: IFFALSE 67189
// for _y = min_y to max_y do
67090: LD_ADDR_VAR 0 6
67094: PUSH
67095: DOUBLE
67096: LD_VAR 0 7
67100: DEC
67101: ST_TO_ADDR
67102: LD_VAR 0 10
67106: PUSH
67107: FOR_TO
67108: IFFALSE 67185
// begin if not ValidHex ( _x , _y ) then
67110: LD_VAR 0 5
67114: PPUSH
67115: LD_VAR 0 6
67119: PPUSH
67120: CALL_OW 488
67124: NOT
67125: IFFALSE 67129
// continue ;
67127: GO 67107
// if GetResourceTypeXY ( _x , _y ) then
67129: LD_VAR 0 5
67133: PPUSH
67134: LD_VAR 0 6
67138: PPUSH
67139: CALL_OW 283
67143: IFFALSE 67183
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67145: LD_ADDR_VAR 0 4
67149: PUSH
67150: LD_VAR 0 4
67154: PPUSH
67155: LD_VAR 0 4
67159: PUSH
67160: LD_INT 1
67162: PLUS
67163: PPUSH
67164: LD_VAR 0 5
67168: PUSH
67169: LD_VAR 0 6
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PPUSH
67178: CALL_OW 1
67182: ST_TO_ADDR
// end ;
67183: GO 67107
67185: POP
67186: POP
67187: GO 67087
67189: POP
67190: POP
// end ;
67191: LD_VAR 0 4
67195: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67196: LD_INT 0
67198: PPUSH
67199: PPUSH
67200: PPUSH
67201: PPUSH
67202: PPUSH
67203: PPUSH
67204: PPUSH
67205: PPUSH
// if not units then
67206: LD_VAR 0 1
67210: NOT
67211: IFFALSE 67215
// exit ;
67213: GO 67739
// result := UnitFilter ( units , [ f_ok ] ) ;
67215: LD_ADDR_VAR 0 3
67219: PUSH
67220: LD_VAR 0 1
67224: PPUSH
67225: LD_INT 50
67227: PUSH
67228: EMPTY
67229: LIST
67230: PPUSH
67231: CALL_OW 72
67235: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67236: LD_ADDR_VAR 0 8
67240: PUSH
67241: LD_VAR 0 1
67245: PUSH
67246: LD_INT 1
67248: ARRAY
67249: PPUSH
67250: CALL_OW 255
67254: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67255: LD_ADDR_VAR 0 10
67259: PUSH
67260: LD_INT 29
67262: PUSH
67263: LD_INT 91
67265: PUSH
67266: LD_INT 49
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: LIST
67273: ST_TO_ADDR
// if not result then
67274: LD_VAR 0 3
67278: NOT
67279: IFFALSE 67283
// exit ;
67281: GO 67739
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67283: LD_ADDR_VAR 0 5
67287: PUSH
67288: LD_INT 81
67290: PUSH
67291: LD_VAR 0 8
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PPUSH
67300: CALL_OW 69
67304: ST_TO_ADDR
// for i in result do
67305: LD_ADDR_VAR 0 4
67309: PUSH
67310: LD_VAR 0 3
67314: PUSH
67315: FOR_IN
67316: IFFALSE 67737
// begin tag := GetTag ( i ) + 1 ;
67318: LD_ADDR_VAR 0 9
67322: PUSH
67323: LD_VAR 0 4
67327: PPUSH
67328: CALL_OW 110
67332: PUSH
67333: LD_INT 1
67335: PLUS
67336: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67337: LD_ADDR_VAR 0 7
67341: PUSH
67342: LD_VAR 0 4
67346: PPUSH
67347: CALL_OW 250
67351: PPUSH
67352: LD_VAR 0 4
67356: PPUSH
67357: CALL_OW 251
67361: PPUSH
67362: LD_INT 6
67364: PPUSH
67365: CALL 66938 0 3
67369: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67370: LD_VAR 0 4
67374: PPUSH
67375: CALL_OW 247
67379: PUSH
67380: LD_INT 2
67382: EQUAL
67383: PUSH
67384: LD_VAR 0 7
67388: AND
67389: PUSH
67390: LD_VAR 0 4
67394: PPUSH
67395: CALL_OW 264
67399: PUSH
67400: LD_VAR 0 10
67404: IN
67405: NOT
67406: AND
67407: IFFALSE 67446
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67409: LD_VAR 0 4
67413: PPUSH
67414: LD_VAR 0 7
67418: PUSH
67419: LD_INT 1
67421: ARRAY
67422: PUSH
67423: LD_INT 1
67425: ARRAY
67426: PPUSH
67427: LD_VAR 0 7
67431: PUSH
67432: LD_INT 1
67434: ARRAY
67435: PUSH
67436: LD_INT 2
67438: ARRAY
67439: PPUSH
67440: CALL_OW 116
67444: GO 67735
// if path > tag then
67446: LD_VAR 0 2
67450: PUSH
67451: LD_VAR 0 9
67455: GREATER
67456: IFFALSE 67664
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67458: LD_ADDR_VAR 0 6
67462: PUSH
67463: LD_VAR 0 5
67467: PPUSH
67468: LD_INT 91
67470: PUSH
67471: LD_VAR 0 4
67475: PUSH
67476: LD_INT 8
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: PPUSH
67484: CALL_OW 72
67488: ST_TO_ADDR
// if nearEnemy then
67489: LD_VAR 0 6
67493: IFFALSE 67562
// begin if GetWeapon ( i ) = ru_time_lapser then
67495: LD_VAR 0 4
67499: PPUSH
67500: CALL_OW 264
67504: PUSH
67505: LD_INT 49
67507: EQUAL
67508: IFFALSE 67536
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67510: LD_VAR 0 4
67514: PPUSH
67515: LD_VAR 0 6
67519: PPUSH
67520: LD_VAR 0 4
67524: PPUSH
67525: CALL_OW 74
67529: PPUSH
67530: CALL_OW 112
67534: GO 67560
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67536: LD_VAR 0 4
67540: PPUSH
67541: LD_VAR 0 6
67545: PPUSH
67546: LD_VAR 0 4
67550: PPUSH
67551: CALL_OW 74
67555: PPUSH
67556: CALL_OW 115
// end else
67560: GO 67662
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67562: LD_VAR 0 4
67566: PPUSH
67567: LD_VAR 0 2
67571: PUSH
67572: LD_VAR 0 9
67576: ARRAY
67577: PUSH
67578: LD_INT 1
67580: ARRAY
67581: PPUSH
67582: LD_VAR 0 2
67586: PUSH
67587: LD_VAR 0 9
67591: ARRAY
67592: PUSH
67593: LD_INT 2
67595: ARRAY
67596: PPUSH
67597: CALL_OW 297
67601: PUSH
67602: LD_INT 6
67604: GREATER
67605: IFFALSE 67648
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67607: LD_VAR 0 4
67611: PPUSH
67612: LD_VAR 0 2
67616: PUSH
67617: LD_VAR 0 9
67621: ARRAY
67622: PUSH
67623: LD_INT 1
67625: ARRAY
67626: PPUSH
67627: LD_VAR 0 2
67631: PUSH
67632: LD_VAR 0 9
67636: ARRAY
67637: PUSH
67638: LD_INT 2
67640: ARRAY
67641: PPUSH
67642: CALL_OW 114
67646: GO 67662
// SetTag ( i , tag ) ;
67648: LD_VAR 0 4
67652: PPUSH
67653: LD_VAR 0 9
67657: PPUSH
67658: CALL_OW 109
// end else
67662: GO 67735
// if enemy then
67664: LD_VAR 0 5
67668: IFFALSE 67735
// begin if GetWeapon ( i ) = ru_time_lapser then
67670: LD_VAR 0 4
67674: PPUSH
67675: CALL_OW 264
67679: PUSH
67680: LD_INT 49
67682: EQUAL
67683: IFFALSE 67711
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67685: LD_VAR 0 4
67689: PPUSH
67690: LD_VAR 0 5
67694: PPUSH
67695: LD_VAR 0 4
67699: PPUSH
67700: CALL_OW 74
67704: PPUSH
67705: CALL_OW 112
67709: GO 67735
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67711: LD_VAR 0 4
67715: PPUSH
67716: LD_VAR 0 5
67720: PPUSH
67721: LD_VAR 0 4
67725: PPUSH
67726: CALL_OW 74
67730: PPUSH
67731: CALL_OW 115
// end ; end ;
67735: GO 67315
67737: POP
67738: POP
// end ;
67739: LD_VAR 0 3
67743: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67744: LD_INT 0
67746: PPUSH
67747: PPUSH
67748: PPUSH
// if not unit or IsInUnit ( unit ) then
67749: LD_VAR 0 1
67753: NOT
67754: PUSH
67755: LD_VAR 0 1
67759: PPUSH
67760: CALL_OW 310
67764: OR
67765: IFFALSE 67769
// exit ;
67767: GO 67860
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67769: LD_ADDR_VAR 0 4
67773: PUSH
67774: LD_VAR 0 1
67778: PPUSH
67779: CALL_OW 250
67783: PPUSH
67784: LD_VAR 0 2
67788: PPUSH
67789: LD_INT 1
67791: PPUSH
67792: CALL_OW 272
67796: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67797: LD_ADDR_VAR 0 5
67801: PUSH
67802: LD_VAR 0 1
67806: PPUSH
67807: CALL_OW 251
67811: PPUSH
67812: LD_VAR 0 2
67816: PPUSH
67817: LD_INT 1
67819: PPUSH
67820: CALL_OW 273
67824: ST_TO_ADDR
// if ValidHex ( x , y ) then
67825: LD_VAR 0 4
67829: PPUSH
67830: LD_VAR 0 5
67834: PPUSH
67835: CALL_OW 488
67839: IFFALSE 67860
// ComTurnXY ( unit , x , y ) ;
67841: LD_VAR 0 1
67845: PPUSH
67846: LD_VAR 0 4
67850: PPUSH
67851: LD_VAR 0 5
67855: PPUSH
67856: CALL_OW 118
// end ;
67860: LD_VAR 0 3
67864: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67865: LD_INT 0
67867: PPUSH
67868: PPUSH
// result := false ;
67869: LD_ADDR_VAR 0 3
67873: PUSH
67874: LD_INT 0
67876: ST_TO_ADDR
// if not units then
67877: LD_VAR 0 2
67881: NOT
67882: IFFALSE 67886
// exit ;
67884: GO 67931
// for i in units do
67886: LD_ADDR_VAR 0 4
67890: PUSH
67891: LD_VAR 0 2
67895: PUSH
67896: FOR_IN
67897: IFFALSE 67929
// if See ( side , i ) then
67899: LD_VAR 0 1
67903: PPUSH
67904: LD_VAR 0 4
67908: PPUSH
67909: CALL_OW 292
67913: IFFALSE 67927
// begin result := true ;
67915: LD_ADDR_VAR 0 3
67919: PUSH
67920: LD_INT 1
67922: ST_TO_ADDR
// exit ;
67923: POP
67924: POP
67925: GO 67931
// end ;
67927: GO 67896
67929: POP
67930: POP
// end ;
67931: LD_VAR 0 3
67935: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67936: LD_INT 0
67938: PPUSH
67939: PPUSH
67940: PPUSH
67941: PPUSH
// if not unit or not points then
67942: LD_VAR 0 1
67946: NOT
67947: PUSH
67948: LD_VAR 0 2
67952: NOT
67953: OR
67954: IFFALSE 67958
// exit ;
67956: GO 68048
// dist := 99999 ;
67958: LD_ADDR_VAR 0 5
67962: PUSH
67963: LD_INT 99999
67965: ST_TO_ADDR
// for i in points do
67966: LD_ADDR_VAR 0 4
67970: PUSH
67971: LD_VAR 0 2
67975: PUSH
67976: FOR_IN
67977: IFFALSE 68046
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67979: LD_ADDR_VAR 0 6
67983: PUSH
67984: LD_VAR 0 1
67988: PPUSH
67989: LD_VAR 0 4
67993: PUSH
67994: LD_INT 1
67996: ARRAY
67997: PPUSH
67998: LD_VAR 0 4
68002: PUSH
68003: LD_INT 2
68005: ARRAY
68006: PPUSH
68007: CALL_OW 297
68011: ST_TO_ADDR
// if tmpDist < dist then
68012: LD_VAR 0 6
68016: PUSH
68017: LD_VAR 0 5
68021: LESS
68022: IFFALSE 68044
// begin result := i ;
68024: LD_ADDR_VAR 0 3
68028: PUSH
68029: LD_VAR 0 4
68033: ST_TO_ADDR
// dist := tmpDist ;
68034: LD_ADDR_VAR 0 5
68038: PUSH
68039: LD_VAR 0 6
68043: ST_TO_ADDR
// end ; end ;
68044: GO 67976
68046: POP
68047: POP
// end ;
68048: LD_VAR 0 3
68052: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68053: LD_INT 0
68055: PPUSH
// uc_side := side ;
68056: LD_ADDR_OWVAR 20
68060: PUSH
68061: LD_VAR 0 1
68065: ST_TO_ADDR
// uc_nation := 3 ;
68066: LD_ADDR_OWVAR 21
68070: PUSH
68071: LD_INT 3
68073: ST_TO_ADDR
// vc_chassis := 25 ;
68074: LD_ADDR_OWVAR 37
68078: PUSH
68079: LD_INT 25
68081: ST_TO_ADDR
// vc_engine := engine_siberite ;
68082: LD_ADDR_OWVAR 39
68086: PUSH
68087: LD_INT 3
68089: ST_TO_ADDR
// vc_control := control_computer ;
68090: LD_ADDR_OWVAR 38
68094: PUSH
68095: LD_INT 3
68097: ST_TO_ADDR
// vc_weapon := 59 ;
68098: LD_ADDR_OWVAR 40
68102: PUSH
68103: LD_INT 59
68105: ST_TO_ADDR
// result := CreateVehicle ;
68106: LD_ADDR_VAR 0 5
68110: PUSH
68111: CALL_OW 45
68115: ST_TO_ADDR
// SetDir ( result , d ) ;
68116: LD_VAR 0 5
68120: PPUSH
68121: LD_VAR 0 4
68125: PPUSH
68126: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68130: LD_VAR 0 5
68134: PPUSH
68135: LD_VAR 0 2
68139: PPUSH
68140: LD_VAR 0 3
68144: PPUSH
68145: LD_INT 0
68147: PPUSH
68148: CALL_OW 48
// end ;
68152: LD_VAR 0 5
68156: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68157: LD_INT 0
68159: PPUSH
68160: PPUSH
68161: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68162: LD_ADDR_VAR 0 2
68166: PUSH
68167: LD_INT 0
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: LD_INT 0
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68185: LD_VAR 0 1
68189: NOT
68190: PUSH
68191: LD_VAR 0 1
68195: PPUSH
68196: CALL_OW 264
68200: PUSH
68201: LD_INT 12
68203: PUSH
68204: LD_INT 51
68206: PUSH
68207: LD_INT 32
68209: PUSH
68210: LD_INT 89
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: IN
68219: NOT
68220: OR
68221: IFFALSE 68225
// exit ;
68223: GO 68323
// for i := 1 to 3 do
68225: LD_ADDR_VAR 0 3
68229: PUSH
68230: DOUBLE
68231: LD_INT 1
68233: DEC
68234: ST_TO_ADDR
68235: LD_INT 3
68237: PUSH
68238: FOR_TO
68239: IFFALSE 68321
// begin tmp := GetCargo ( cargo , i ) ;
68241: LD_ADDR_VAR 0 4
68245: PUSH
68246: LD_VAR 0 1
68250: PPUSH
68251: LD_VAR 0 3
68255: PPUSH
68256: CALL_OW 289
68260: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68261: LD_ADDR_VAR 0 2
68265: PUSH
68266: LD_VAR 0 2
68270: PPUSH
68271: LD_VAR 0 3
68275: PPUSH
68276: LD_VAR 0 4
68280: PPUSH
68281: CALL_OW 1
68285: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68286: LD_ADDR_VAR 0 2
68290: PUSH
68291: LD_VAR 0 2
68295: PPUSH
68296: LD_INT 4
68298: PPUSH
68299: LD_VAR 0 2
68303: PUSH
68304: LD_INT 4
68306: ARRAY
68307: PUSH
68308: LD_VAR 0 4
68312: PLUS
68313: PPUSH
68314: CALL_OW 1
68318: ST_TO_ADDR
// end ;
68319: GO 68238
68321: POP
68322: POP
// end ;
68323: LD_VAR 0 2
68327: RET
// export function Length ( array ) ; begin
68328: LD_INT 0
68330: PPUSH
// result := array + 0 ;
68331: LD_ADDR_VAR 0 2
68335: PUSH
68336: LD_VAR 0 1
68340: PUSH
68341: LD_INT 0
68343: PLUS
68344: ST_TO_ADDR
// end ;
68345: LD_VAR 0 2
68349: RET
// export function PrepareArray ( array ) ; begin
68350: LD_INT 0
68352: PPUSH
// result := array diff 0 ;
68353: LD_ADDR_VAR 0 2
68357: PUSH
68358: LD_VAR 0 1
68362: PUSH
68363: LD_INT 0
68365: DIFF
68366: ST_TO_ADDR
// if not result [ 1 ] then
68367: LD_VAR 0 2
68371: PUSH
68372: LD_INT 1
68374: ARRAY
68375: NOT
68376: IFFALSE 68396
// result := Delete ( result , 1 ) ;
68378: LD_ADDR_VAR 0 2
68382: PUSH
68383: LD_VAR 0 2
68387: PPUSH
68388: LD_INT 1
68390: PPUSH
68391: CALL_OW 3
68395: ST_TO_ADDR
// end ;
68396: LD_VAR 0 2
68400: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68401: LD_INT 0
68403: PPUSH
68404: PPUSH
68405: PPUSH
68406: PPUSH
// sibRocketRange := 25 ;
68407: LD_ADDR_VAR 0 6
68411: PUSH
68412: LD_INT 25
68414: ST_TO_ADDR
// result := false ;
68415: LD_ADDR_VAR 0 4
68419: PUSH
68420: LD_INT 0
68422: ST_TO_ADDR
// for i := 0 to 5 do
68423: LD_ADDR_VAR 0 5
68427: PUSH
68428: DOUBLE
68429: LD_INT 0
68431: DEC
68432: ST_TO_ADDR
68433: LD_INT 5
68435: PUSH
68436: FOR_TO
68437: IFFALSE 68504
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68439: LD_VAR 0 1
68443: PPUSH
68444: LD_VAR 0 5
68448: PPUSH
68449: LD_VAR 0 6
68453: PPUSH
68454: CALL_OW 272
68458: PPUSH
68459: LD_VAR 0 2
68463: PPUSH
68464: LD_VAR 0 5
68468: PPUSH
68469: LD_VAR 0 6
68473: PPUSH
68474: CALL_OW 273
68478: PPUSH
68479: LD_VAR 0 3
68483: PPUSH
68484: CALL_OW 309
68488: IFFALSE 68502
// begin result := true ;
68490: LD_ADDR_VAR 0 4
68494: PUSH
68495: LD_INT 1
68497: ST_TO_ADDR
// exit ;
68498: POP
68499: POP
68500: GO 68506
// end ;
68502: GO 68436
68504: POP
68505: POP
// end ;
68506: LD_VAR 0 4
68510: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68511: LD_INT 0
68513: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68514: LD_VAR 0 1
68518: PPUSH
68519: LD_VAR 0 2
68523: PPUSH
68524: LD_INT 0
68526: PPUSH
68527: LD_INT 0
68529: PPUSH
68530: LD_INT 1
68532: PPUSH
68533: LD_INT 0
68535: PPUSH
68536: CALL_OW 587
// end ; end_of_file end_of_file
68540: LD_VAR 0 3
68544: RET
// every 0 0$1 do
68545: GO 68547
68547: DISABLE
// begin enable ;
68548: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
68549: LD_STRING updateTimer(
68551: PUSH
68552: LD_OWVAR 1
68556: STR
68557: PUSH
68558: LD_STRING );
68560: STR
68561: PPUSH
68562: CALL_OW 559
// end ;
68566: END
// export function SOS_MapStart ( ) ; begin
68567: LD_INT 0
68569: PPUSH
// if streamModeActive then
68570: LD_EXP 61
68574: IFFALSE 68583
// DefineStreamItems ( true ) ;
68576: LD_INT 1
68578: PPUSH
68579: CALL 70237 0 1
// UpdateFactoryWaypoints ( ) ;
68583: CALL 83098 0 0
// UpdateWarehouseGatheringPoints ( ) ;
68587: CALL 83355 0 0
// end ;
68591: LD_VAR 0 1
68595: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
68596: LD_INT 0
68598: PPUSH
// if p2 = hack_mode then
68599: LD_VAR 0 2
68603: PUSH
68604: LD_INT 100
68606: EQUAL
68607: IFFALSE 69610
// begin if not StreamModeActive then
68609: LD_EXP 61
68613: NOT
68614: IFFALSE 68624
// StreamModeActive := true ;
68616: LD_ADDR_EXP 61
68620: PUSH
68621: LD_INT 1
68623: ST_TO_ADDR
// if p3 = 0 then
68624: LD_VAR 0 3
68628: PUSH
68629: LD_INT 0
68631: EQUAL
68632: IFFALSE 68638
// InitStreamMode ;
68634: CALL 69773 0 0
// if p3 = 1 then
68638: LD_VAR 0 3
68642: PUSH
68643: LD_INT 1
68645: EQUAL
68646: IFFALSE 68656
// sRocket := true ;
68648: LD_ADDR_EXP 66
68652: PUSH
68653: LD_INT 1
68655: ST_TO_ADDR
// if p3 = 2 then
68656: LD_VAR 0 3
68660: PUSH
68661: LD_INT 2
68663: EQUAL
68664: IFFALSE 68674
// sSpeed := true ;
68666: LD_ADDR_EXP 65
68670: PUSH
68671: LD_INT 1
68673: ST_TO_ADDR
// if p3 = 3 then
68674: LD_VAR 0 3
68678: PUSH
68679: LD_INT 3
68681: EQUAL
68682: IFFALSE 68692
// sEngine := true ;
68684: LD_ADDR_EXP 67
68688: PUSH
68689: LD_INT 1
68691: ST_TO_ADDR
// if p3 = 4 then
68692: LD_VAR 0 3
68696: PUSH
68697: LD_INT 4
68699: EQUAL
68700: IFFALSE 68710
// sSpec := true ;
68702: LD_ADDR_EXP 64
68706: PUSH
68707: LD_INT 1
68709: ST_TO_ADDR
// if p3 = 5 then
68710: LD_VAR 0 3
68714: PUSH
68715: LD_INT 5
68717: EQUAL
68718: IFFALSE 68728
// sLevel := true ;
68720: LD_ADDR_EXP 68
68724: PUSH
68725: LD_INT 1
68727: ST_TO_ADDR
// if p3 = 6 then
68728: LD_VAR 0 3
68732: PUSH
68733: LD_INT 6
68735: EQUAL
68736: IFFALSE 68746
// sArmoury := true ;
68738: LD_ADDR_EXP 69
68742: PUSH
68743: LD_INT 1
68745: ST_TO_ADDR
// if p3 = 7 then
68746: LD_VAR 0 3
68750: PUSH
68751: LD_INT 7
68753: EQUAL
68754: IFFALSE 68764
// sRadar := true ;
68756: LD_ADDR_EXP 70
68760: PUSH
68761: LD_INT 1
68763: ST_TO_ADDR
// if p3 = 8 then
68764: LD_VAR 0 3
68768: PUSH
68769: LD_INT 8
68771: EQUAL
68772: IFFALSE 68782
// sBunker := true ;
68774: LD_ADDR_EXP 71
68778: PUSH
68779: LD_INT 1
68781: ST_TO_ADDR
// if p3 = 9 then
68782: LD_VAR 0 3
68786: PUSH
68787: LD_INT 9
68789: EQUAL
68790: IFFALSE 68800
// sHack := true ;
68792: LD_ADDR_EXP 72
68796: PUSH
68797: LD_INT 1
68799: ST_TO_ADDR
// if p3 = 10 then
68800: LD_VAR 0 3
68804: PUSH
68805: LD_INT 10
68807: EQUAL
68808: IFFALSE 68818
// sFire := true ;
68810: LD_ADDR_EXP 73
68814: PUSH
68815: LD_INT 1
68817: ST_TO_ADDR
// if p3 = 11 then
68818: LD_VAR 0 3
68822: PUSH
68823: LD_INT 11
68825: EQUAL
68826: IFFALSE 68836
// sRefresh := true ;
68828: LD_ADDR_EXP 74
68832: PUSH
68833: LD_INT 1
68835: ST_TO_ADDR
// if p3 = 12 then
68836: LD_VAR 0 3
68840: PUSH
68841: LD_INT 12
68843: EQUAL
68844: IFFALSE 68854
// sExp := true ;
68846: LD_ADDR_EXP 75
68850: PUSH
68851: LD_INT 1
68853: ST_TO_ADDR
// if p3 = 13 then
68854: LD_VAR 0 3
68858: PUSH
68859: LD_INT 13
68861: EQUAL
68862: IFFALSE 68872
// sDepot := true ;
68864: LD_ADDR_EXP 76
68868: PUSH
68869: LD_INT 1
68871: ST_TO_ADDR
// if p3 = 14 then
68872: LD_VAR 0 3
68876: PUSH
68877: LD_INT 14
68879: EQUAL
68880: IFFALSE 68890
// sFlag := true ;
68882: LD_ADDR_EXP 77
68886: PUSH
68887: LD_INT 1
68889: ST_TO_ADDR
// if p3 = 15 then
68890: LD_VAR 0 3
68894: PUSH
68895: LD_INT 15
68897: EQUAL
68898: IFFALSE 68908
// sKamikadze := true ;
68900: LD_ADDR_EXP 85
68904: PUSH
68905: LD_INT 1
68907: ST_TO_ADDR
// if p3 = 16 then
68908: LD_VAR 0 3
68912: PUSH
68913: LD_INT 16
68915: EQUAL
68916: IFFALSE 68926
// sTroll := true ;
68918: LD_ADDR_EXP 86
68922: PUSH
68923: LD_INT 1
68925: ST_TO_ADDR
// if p3 = 17 then
68926: LD_VAR 0 3
68930: PUSH
68931: LD_INT 17
68933: EQUAL
68934: IFFALSE 68944
// sSlow := true ;
68936: LD_ADDR_EXP 87
68940: PUSH
68941: LD_INT 1
68943: ST_TO_ADDR
// if p3 = 18 then
68944: LD_VAR 0 3
68948: PUSH
68949: LD_INT 18
68951: EQUAL
68952: IFFALSE 68962
// sLack := true ;
68954: LD_ADDR_EXP 88
68958: PUSH
68959: LD_INT 1
68961: ST_TO_ADDR
// if p3 = 19 then
68962: LD_VAR 0 3
68966: PUSH
68967: LD_INT 19
68969: EQUAL
68970: IFFALSE 68980
// sTank := true ;
68972: LD_ADDR_EXP 90
68976: PUSH
68977: LD_INT 1
68979: ST_TO_ADDR
// if p3 = 20 then
68980: LD_VAR 0 3
68984: PUSH
68985: LD_INT 20
68987: EQUAL
68988: IFFALSE 68998
// sRemote := true ;
68990: LD_ADDR_EXP 91
68994: PUSH
68995: LD_INT 1
68997: ST_TO_ADDR
// if p3 = 21 then
68998: LD_VAR 0 3
69002: PUSH
69003: LD_INT 21
69005: EQUAL
69006: IFFALSE 69016
// sPowell := true ;
69008: LD_ADDR_EXP 92
69012: PUSH
69013: LD_INT 1
69015: ST_TO_ADDR
// if p3 = 22 then
69016: LD_VAR 0 3
69020: PUSH
69021: LD_INT 22
69023: EQUAL
69024: IFFALSE 69034
// sTeleport := true ;
69026: LD_ADDR_EXP 95
69030: PUSH
69031: LD_INT 1
69033: ST_TO_ADDR
// if p3 = 23 then
69034: LD_VAR 0 3
69038: PUSH
69039: LD_INT 23
69041: EQUAL
69042: IFFALSE 69052
// sOilTower := true ;
69044: LD_ADDR_EXP 97
69048: PUSH
69049: LD_INT 1
69051: ST_TO_ADDR
// if p3 = 24 then
69052: LD_VAR 0 3
69056: PUSH
69057: LD_INT 24
69059: EQUAL
69060: IFFALSE 69070
// sShovel := true ;
69062: LD_ADDR_EXP 98
69066: PUSH
69067: LD_INT 1
69069: ST_TO_ADDR
// if p3 = 25 then
69070: LD_VAR 0 3
69074: PUSH
69075: LD_INT 25
69077: EQUAL
69078: IFFALSE 69088
// sSheik := true ;
69080: LD_ADDR_EXP 99
69084: PUSH
69085: LD_INT 1
69087: ST_TO_ADDR
// if p3 = 26 then
69088: LD_VAR 0 3
69092: PUSH
69093: LD_INT 26
69095: EQUAL
69096: IFFALSE 69106
// sEarthquake := true ;
69098: LD_ADDR_EXP 101
69102: PUSH
69103: LD_INT 1
69105: ST_TO_ADDR
// if p3 = 27 then
69106: LD_VAR 0 3
69110: PUSH
69111: LD_INT 27
69113: EQUAL
69114: IFFALSE 69124
// sAI := true ;
69116: LD_ADDR_EXP 102
69120: PUSH
69121: LD_INT 1
69123: ST_TO_ADDR
// if p3 = 28 then
69124: LD_VAR 0 3
69128: PUSH
69129: LD_INT 28
69131: EQUAL
69132: IFFALSE 69142
// sCargo := true ;
69134: LD_ADDR_EXP 105
69138: PUSH
69139: LD_INT 1
69141: ST_TO_ADDR
// if p3 = 29 then
69142: LD_VAR 0 3
69146: PUSH
69147: LD_INT 29
69149: EQUAL
69150: IFFALSE 69160
// sDLaser := true ;
69152: LD_ADDR_EXP 106
69156: PUSH
69157: LD_INT 1
69159: ST_TO_ADDR
// if p3 = 30 then
69160: LD_VAR 0 3
69164: PUSH
69165: LD_INT 30
69167: EQUAL
69168: IFFALSE 69178
// sExchange := true ;
69170: LD_ADDR_EXP 107
69174: PUSH
69175: LD_INT 1
69177: ST_TO_ADDR
// if p3 = 31 then
69178: LD_VAR 0 3
69182: PUSH
69183: LD_INT 31
69185: EQUAL
69186: IFFALSE 69196
// sFac := true ;
69188: LD_ADDR_EXP 108
69192: PUSH
69193: LD_INT 1
69195: ST_TO_ADDR
// if p3 = 32 then
69196: LD_VAR 0 3
69200: PUSH
69201: LD_INT 32
69203: EQUAL
69204: IFFALSE 69214
// sPower := true ;
69206: LD_ADDR_EXP 109
69210: PUSH
69211: LD_INT 1
69213: ST_TO_ADDR
// if p3 = 33 then
69214: LD_VAR 0 3
69218: PUSH
69219: LD_INT 33
69221: EQUAL
69222: IFFALSE 69232
// sRandom := true ;
69224: LD_ADDR_EXP 110
69228: PUSH
69229: LD_INT 1
69231: ST_TO_ADDR
// if p3 = 34 then
69232: LD_VAR 0 3
69236: PUSH
69237: LD_INT 34
69239: EQUAL
69240: IFFALSE 69250
// sShield := true ;
69242: LD_ADDR_EXP 111
69246: PUSH
69247: LD_INT 1
69249: ST_TO_ADDR
// if p3 = 35 then
69250: LD_VAR 0 3
69254: PUSH
69255: LD_INT 35
69257: EQUAL
69258: IFFALSE 69268
// sTime := true ;
69260: LD_ADDR_EXP 112
69264: PUSH
69265: LD_INT 1
69267: ST_TO_ADDR
// if p3 = 36 then
69268: LD_VAR 0 3
69272: PUSH
69273: LD_INT 36
69275: EQUAL
69276: IFFALSE 69286
// sTools := true ;
69278: LD_ADDR_EXP 113
69282: PUSH
69283: LD_INT 1
69285: ST_TO_ADDR
// if p3 = 101 then
69286: LD_VAR 0 3
69290: PUSH
69291: LD_INT 101
69293: EQUAL
69294: IFFALSE 69304
// sSold := true ;
69296: LD_ADDR_EXP 78
69300: PUSH
69301: LD_INT 1
69303: ST_TO_ADDR
// if p3 = 102 then
69304: LD_VAR 0 3
69308: PUSH
69309: LD_INT 102
69311: EQUAL
69312: IFFALSE 69322
// sDiff := true ;
69314: LD_ADDR_EXP 79
69318: PUSH
69319: LD_INT 1
69321: ST_TO_ADDR
// if p3 = 103 then
69322: LD_VAR 0 3
69326: PUSH
69327: LD_INT 103
69329: EQUAL
69330: IFFALSE 69340
// sFog := true ;
69332: LD_ADDR_EXP 82
69336: PUSH
69337: LD_INT 1
69339: ST_TO_ADDR
// if p3 = 104 then
69340: LD_VAR 0 3
69344: PUSH
69345: LD_INT 104
69347: EQUAL
69348: IFFALSE 69358
// sReset := true ;
69350: LD_ADDR_EXP 83
69354: PUSH
69355: LD_INT 1
69357: ST_TO_ADDR
// if p3 = 105 then
69358: LD_VAR 0 3
69362: PUSH
69363: LD_INT 105
69365: EQUAL
69366: IFFALSE 69376
// sSun := true ;
69368: LD_ADDR_EXP 84
69372: PUSH
69373: LD_INT 1
69375: ST_TO_ADDR
// if p3 = 106 then
69376: LD_VAR 0 3
69380: PUSH
69381: LD_INT 106
69383: EQUAL
69384: IFFALSE 69394
// sTiger := true ;
69386: LD_ADDR_EXP 80
69390: PUSH
69391: LD_INT 1
69393: ST_TO_ADDR
// if p3 = 107 then
69394: LD_VAR 0 3
69398: PUSH
69399: LD_INT 107
69401: EQUAL
69402: IFFALSE 69412
// sBomb := true ;
69404: LD_ADDR_EXP 81
69408: PUSH
69409: LD_INT 1
69411: ST_TO_ADDR
// if p3 = 108 then
69412: LD_VAR 0 3
69416: PUSH
69417: LD_INT 108
69419: EQUAL
69420: IFFALSE 69430
// sWound := true ;
69422: LD_ADDR_EXP 89
69426: PUSH
69427: LD_INT 1
69429: ST_TO_ADDR
// if p3 = 109 then
69430: LD_VAR 0 3
69434: PUSH
69435: LD_INT 109
69437: EQUAL
69438: IFFALSE 69448
// sBetray := true ;
69440: LD_ADDR_EXP 93
69444: PUSH
69445: LD_INT 1
69447: ST_TO_ADDR
// if p3 = 110 then
69448: LD_VAR 0 3
69452: PUSH
69453: LD_INT 110
69455: EQUAL
69456: IFFALSE 69466
// sContamin := true ;
69458: LD_ADDR_EXP 94
69462: PUSH
69463: LD_INT 1
69465: ST_TO_ADDR
// if p3 = 111 then
69466: LD_VAR 0 3
69470: PUSH
69471: LD_INT 111
69473: EQUAL
69474: IFFALSE 69484
// sOil := true ;
69476: LD_ADDR_EXP 96
69480: PUSH
69481: LD_INT 1
69483: ST_TO_ADDR
// if p3 = 112 then
69484: LD_VAR 0 3
69488: PUSH
69489: LD_INT 112
69491: EQUAL
69492: IFFALSE 69502
// sStu := true ;
69494: LD_ADDR_EXP 100
69498: PUSH
69499: LD_INT 1
69501: ST_TO_ADDR
// if p3 = 113 then
69502: LD_VAR 0 3
69506: PUSH
69507: LD_INT 113
69509: EQUAL
69510: IFFALSE 69520
// sBazooka := true ;
69512: LD_ADDR_EXP 103
69516: PUSH
69517: LD_INT 1
69519: ST_TO_ADDR
// if p3 = 114 then
69520: LD_VAR 0 3
69524: PUSH
69525: LD_INT 114
69527: EQUAL
69528: IFFALSE 69538
// sMortar := true ;
69530: LD_ADDR_EXP 104
69534: PUSH
69535: LD_INT 1
69537: ST_TO_ADDR
// if p3 = 115 then
69538: LD_VAR 0 3
69542: PUSH
69543: LD_INT 115
69545: EQUAL
69546: IFFALSE 69556
// sRanger := true ;
69548: LD_ADDR_EXP 114
69552: PUSH
69553: LD_INT 1
69555: ST_TO_ADDR
// if p3 = 116 then
69556: LD_VAR 0 3
69560: PUSH
69561: LD_INT 116
69563: EQUAL
69564: IFFALSE 69574
// sComputer := true ;
69566: LD_ADDR_EXP 115
69570: PUSH
69571: LD_INT 1
69573: ST_TO_ADDR
// if p3 = 117 then
69574: LD_VAR 0 3
69578: PUSH
69579: LD_INT 117
69581: EQUAL
69582: IFFALSE 69592
// s30 := true ;
69584: LD_ADDR_EXP 116
69588: PUSH
69589: LD_INT 1
69591: ST_TO_ADDR
// if p3 = 118 then
69592: LD_VAR 0 3
69596: PUSH
69597: LD_INT 118
69599: EQUAL
69600: IFFALSE 69610
// s60 := true ;
69602: LD_ADDR_EXP 117
69606: PUSH
69607: LD_INT 1
69609: ST_TO_ADDR
// end ; if p2 = stream_mode then
69610: LD_VAR 0 2
69614: PUSH
69615: LD_INT 101
69617: EQUAL
69618: IFFALSE 69746
// begin case p3 of 1 :
69620: LD_VAR 0 3
69624: PUSH
69625: LD_INT 1
69627: DOUBLE
69628: EQUAL
69629: IFTRUE 69633
69631: GO 69640
69633: POP
// hHackUnlimitedResources ; 2 :
69634: CALL 81844 0 0
69638: GO 69746
69640: LD_INT 2
69642: DOUBLE
69643: EQUAL
69644: IFTRUE 69648
69646: GO 69655
69648: POP
// hHackSetLevel10 ; 3 :
69649: CALL 81977 0 0
69653: GO 69746
69655: LD_INT 3
69657: DOUBLE
69658: EQUAL
69659: IFTRUE 69663
69661: GO 69670
69663: POP
// hHackSetLevel10YourUnits ; 4 :
69664: CALL 82062 0 0
69668: GO 69746
69670: LD_INT 4
69672: DOUBLE
69673: EQUAL
69674: IFTRUE 69678
69676: GO 69685
69678: POP
// hHackInvincible ; 5 :
69679: CALL 82510 0 0
69683: GO 69746
69685: LD_INT 5
69687: DOUBLE
69688: EQUAL
69689: IFTRUE 69693
69691: GO 69700
69693: POP
// hHackInvisible ; 6 :
69694: CALL 82621 0 0
69698: GO 69746
69700: LD_INT 6
69702: DOUBLE
69703: EQUAL
69704: IFTRUE 69708
69706: GO 69715
69708: POP
// hHackChangeYourSide ; 7 :
69709: CALL 82678 0 0
69713: GO 69746
69715: LD_INT 7
69717: DOUBLE
69718: EQUAL
69719: IFTRUE 69723
69721: GO 69730
69723: POP
// hHackChangeUnitSide ; 8 :
69724: CALL 82720 0 0
69728: GO 69746
69730: LD_INT 8
69732: DOUBLE
69733: EQUAL
69734: IFTRUE 69738
69736: GO 69745
69738: POP
// hHackFog ; end ;
69739: CALL 82821 0 0
69743: GO 69746
69745: POP
// end ; end ;
69746: LD_VAR 0 7
69750: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
69751: GO 69753
69753: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69754: LD_STRING initStreamRollete();
69756: PPUSH
69757: CALL_OW 559
// InitStreamMode ;
69761: CALL 69773 0 0
// DefineStreamItems ( false ) ;
69765: LD_INT 0
69767: PPUSH
69768: CALL 70237 0 1
// end ;
69772: END
// function InitStreamMode ; begin
69773: LD_INT 0
69775: PPUSH
// streamModeActive := false ;
69776: LD_ADDR_EXP 61
69780: PUSH
69781: LD_INT 0
69783: ST_TO_ADDR
// normalCounter := 36 ;
69784: LD_ADDR_EXP 62
69788: PUSH
69789: LD_INT 36
69791: ST_TO_ADDR
// hardcoreCounter := 18 ;
69792: LD_ADDR_EXP 63
69796: PUSH
69797: LD_INT 18
69799: ST_TO_ADDR
// sRocket := false ;
69800: LD_ADDR_EXP 66
69804: PUSH
69805: LD_INT 0
69807: ST_TO_ADDR
// sSpeed := false ;
69808: LD_ADDR_EXP 65
69812: PUSH
69813: LD_INT 0
69815: ST_TO_ADDR
// sEngine := false ;
69816: LD_ADDR_EXP 67
69820: PUSH
69821: LD_INT 0
69823: ST_TO_ADDR
// sSpec := false ;
69824: LD_ADDR_EXP 64
69828: PUSH
69829: LD_INT 0
69831: ST_TO_ADDR
// sLevel := false ;
69832: LD_ADDR_EXP 68
69836: PUSH
69837: LD_INT 0
69839: ST_TO_ADDR
// sArmoury := false ;
69840: LD_ADDR_EXP 69
69844: PUSH
69845: LD_INT 0
69847: ST_TO_ADDR
// sRadar := false ;
69848: LD_ADDR_EXP 70
69852: PUSH
69853: LD_INT 0
69855: ST_TO_ADDR
// sBunker := false ;
69856: LD_ADDR_EXP 71
69860: PUSH
69861: LD_INT 0
69863: ST_TO_ADDR
// sHack := false ;
69864: LD_ADDR_EXP 72
69868: PUSH
69869: LD_INT 0
69871: ST_TO_ADDR
// sFire := false ;
69872: LD_ADDR_EXP 73
69876: PUSH
69877: LD_INT 0
69879: ST_TO_ADDR
// sRefresh := false ;
69880: LD_ADDR_EXP 74
69884: PUSH
69885: LD_INT 0
69887: ST_TO_ADDR
// sExp := false ;
69888: LD_ADDR_EXP 75
69892: PUSH
69893: LD_INT 0
69895: ST_TO_ADDR
// sDepot := false ;
69896: LD_ADDR_EXP 76
69900: PUSH
69901: LD_INT 0
69903: ST_TO_ADDR
// sFlag := false ;
69904: LD_ADDR_EXP 77
69908: PUSH
69909: LD_INT 0
69911: ST_TO_ADDR
// sKamikadze := false ;
69912: LD_ADDR_EXP 85
69916: PUSH
69917: LD_INT 0
69919: ST_TO_ADDR
// sTroll := false ;
69920: LD_ADDR_EXP 86
69924: PUSH
69925: LD_INT 0
69927: ST_TO_ADDR
// sSlow := false ;
69928: LD_ADDR_EXP 87
69932: PUSH
69933: LD_INT 0
69935: ST_TO_ADDR
// sLack := false ;
69936: LD_ADDR_EXP 88
69940: PUSH
69941: LD_INT 0
69943: ST_TO_ADDR
// sTank := false ;
69944: LD_ADDR_EXP 90
69948: PUSH
69949: LD_INT 0
69951: ST_TO_ADDR
// sRemote := false ;
69952: LD_ADDR_EXP 91
69956: PUSH
69957: LD_INT 0
69959: ST_TO_ADDR
// sPowell := false ;
69960: LD_ADDR_EXP 92
69964: PUSH
69965: LD_INT 0
69967: ST_TO_ADDR
// sTeleport := false ;
69968: LD_ADDR_EXP 95
69972: PUSH
69973: LD_INT 0
69975: ST_TO_ADDR
// sOilTower := false ;
69976: LD_ADDR_EXP 97
69980: PUSH
69981: LD_INT 0
69983: ST_TO_ADDR
// sShovel := false ;
69984: LD_ADDR_EXP 98
69988: PUSH
69989: LD_INT 0
69991: ST_TO_ADDR
// sSheik := false ;
69992: LD_ADDR_EXP 99
69996: PUSH
69997: LD_INT 0
69999: ST_TO_ADDR
// sEarthquake := false ;
70000: LD_ADDR_EXP 101
70004: PUSH
70005: LD_INT 0
70007: ST_TO_ADDR
// sAI := false ;
70008: LD_ADDR_EXP 102
70012: PUSH
70013: LD_INT 0
70015: ST_TO_ADDR
// sCargo := false ;
70016: LD_ADDR_EXP 105
70020: PUSH
70021: LD_INT 0
70023: ST_TO_ADDR
// sDLaser := false ;
70024: LD_ADDR_EXP 106
70028: PUSH
70029: LD_INT 0
70031: ST_TO_ADDR
// sExchange := false ;
70032: LD_ADDR_EXP 107
70036: PUSH
70037: LD_INT 0
70039: ST_TO_ADDR
// sFac := false ;
70040: LD_ADDR_EXP 108
70044: PUSH
70045: LD_INT 0
70047: ST_TO_ADDR
// sPower := false ;
70048: LD_ADDR_EXP 109
70052: PUSH
70053: LD_INT 0
70055: ST_TO_ADDR
// sRandom := false ;
70056: LD_ADDR_EXP 110
70060: PUSH
70061: LD_INT 0
70063: ST_TO_ADDR
// sShield := false ;
70064: LD_ADDR_EXP 111
70068: PUSH
70069: LD_INT 0
70071: ST_TO_ADDR
// sTime := false ;
70072: LD_ADDR_EXP 112
70076: PUSH
70077: LD_INT 0
70079: ST_TO_ADDR
// sTools := false ;
70080: LD_ADDR_EXP 113
70084: PUSH
70085: LD_INT 0
70087: ST_TO_ADDR
// sSold := false ;
70088: LD_ADDR_EXP 78
70092: PUSH
70093: LD_INT 0
70095: ST_TO_ADDR
// sDiff := false ;
70096: LD_ADDR_EXP 79
70100: PUSH
70101: LD_INT 0
70103: ST_TO_ADDR
// sFog := false ;
70104: LD_ADDR_EXP 82
70108: PUSH
70109: LD_INT 0
70111: ST_TO_ADDR
// sReset := false ;
70112: LD_ADDR_EXP 83
70116: PUSH
70117: LD_INT 0
70119: ST_TO_ADDR
// sSun := false ;
70120: LD_ADDR_EXP 84
70124: PUSH
70125: LD_INT 0
70127: ST_TO_ADDR
// sTiger := false ;
70128: LD_ADDR_EXP 80
70132: PUSH
70133: LD_INT 0
70135: ST_TO_ADDR
// sBomb := false ;
70136: LD_ADDR_EXP 81
70140: PUSH
70141: LD_INT 0
70143: ST_TO_ADDR
// sWound := false ;
70144: LD_ADDR_EXP 89
70148: PUSH
70149: LD_INT 0
70151: ST_TO_ADDR
// sBetray := false ;
70152: LD_ADDR_EXP 93
70156: PUSH
70157: LD_INT 0
70159: ST_TO_ADDR
// sContamin := false ;
70160: LD_ADDR_EXP 94
70164: PUSH
70165: LD_INT 0
70167: ST_TO_ADDR
// sOil := false ;
70168: LD_ADDR_EXP 96
70172: PUSH
70173: LD_INT 0
70175: ST_TO_ADDR
// sStu := false ;
70176: LD_ADDR_EXP 100
70180: PUSH
70181: LD_INT 0
70183: ST_TO_ADDR
// sBazooka := false ;
70184: LD_ADDR_EXP 103
70188: PUSH
70189: LD_INT 0
70191: ST_TO_ADDR
// sMortar := false ;
70192: LD_ADDR_EXP 104
70196: PUSH
70197: LD_INT 0
70199: ST_TO_ADDR
// sRanger := false ;
70200: LD_ADDR_EXP 114
70204: PUSH
70205: LD_INT 0
70207: ST_TO_ADDR
// sComputer := false ;
70208: LD_ADDR_EXP 115
70212: PUSH
70213: LD_INT 0
70215: ST_TO_ADDR
// s30 := false ;
70216: LD_ADDR_EXP 116
70220: PUSH
70221: LD_INT 0
70223: ST_TO_ADDR
// s60 := false ;
70224: LD_ADDR_EXP 117
70228: PUSH
70229: LD_INT 0
70231: ST_TO_ADDR
// end ;
70232: LD_VAR 0 1
70236: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
70237: LD_INT 0
70239: PPUSH
70240: PPUSH
70241: PPUSH
70242: PPUSH
70243: PPUSH
70244: PPUSH
70245: PPUSH
// result := [ ] ;
70246: LD_ADDR_VAR 0 2
70250: PUSH
70251: EMPTY
70252: ST_TO_ADDR
// if campaign_id = 1 then
70253: LD_OWVAR 69
70257: PUSH
70258: LD_INT 1
70260: EQUAL
70261: IFFALSE 73427
// begin case mission_number of 1 :
70263: LD_OWVAR 70
70267: PUSH
70268: LD_INT 1
70270: DOUBLE
70271: EQUAL
70272: IFTRUE 70276
70274: GO 70352
70276: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
70277: LD_ADDR_VAR 0 2
70281: PUSH
70282: LD_INT 2
70284: PUSH
70285: LD_INT 4
70287: PUSH
70288: LD_INT 11
70290: PUSH
70291: LD_INT 12
70293: PUSH
70294: LD_INT 15
70296: PUSH
70297: LD_INT 16
70299: PUSH
70300: LD_INT 22
70302: PUSH
70303: LD_INT 23
70305: PUSH
70306: LD_INT 26
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 101
70322: PUSH
70323: LD_INT 102
70325: PUSH
70326: LD_INT 106
70328: PUSH
70329: LD_INT 116
70331: PUSH
70332: LD_INT 117
70334: PUSH
70335: LD_INT 118
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: ST_TO_ADDR
70350: GO 73425
70352: LD_INT 2
70354: DOUBLE
70355: EQUAL
70356: IFTRUE 70360
70358: GO 70444
70360: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
70361: LD_ADDR_VAR 0 2
70365: PUSH
70366: LD_INT 2
70368: PUSH
70369: LD_INT 4
70371: PUSH
70372: LD_INT 11
70374: PUSH
70375: LD_INT 12
70377: PUSH
70378: LD_INT 15
70380: PUSH
70381: LD_INT 16
70383: PUSH
70384: LD_INT 22
70386: PUSH
70387: LD_INT 23
70389: PUSH
70390: LD_INT 26
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 101
70406: PUSH
70407: LD_INT 102
70409: PUSH
70410: LD_INT 105
70412: PUSH
70413: LD_INT 106
70415: PUSH
70416: LD_INT 108
70418: PUSH
70419: LD_INT 116
70421: PUSH
70422: LD_INT 117
70424: PUSH
70425: LD_INT 118
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: ST_TO_ADDR
70442: GO 73425
70444: LD_INT 3
70446: DOUBLE
70447: EQUAL
70448: IFTRUE 70452
70450: GO 70540
70452: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
70453: LD_ADDR_VAR 0 2
70457: PUSH
70458: LD_INT 2
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: LD_INT 5
70466: PUSH
70467: LD_INT 11
70469: PUSH
70470: LD_INT 12
70472: PUSH
70473: LD_INT 15
70475: PUSH
70476: LD_INT 16
70478: PUSH
70479: LD_INT 22
70481: PUSH
70482: LD_INT 26
70484: PUSH
70485: LD_INT 36
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 101
70502: PUSH
70503: LD_INT 102
70505: PUSH
70506: LD_INT 105
70508: PUSH
70509: LD_INT 106
70511: PUSH
70512: LD_INT 108
70514: PUSH
70515: LD_INT 116
70517: PUSH
70518: LD_INT 117
70520: PUSH
70521: LD_INT 118
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: ST_TO_ADDR
70538: GO 73425
70540: LD_INT 4
70542: DOUBLE
70543: EQUAL
70544: IFTRUE 70548
70546: GO 70644
70548: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
70549: LD_ADDR_VAR 0 2
70553: PUSH
70554: LD_INT 2
70556: PUSH
70557: LD_INT 4
70559: PUSH
70560: LD_INT 5
70562: PUSH
70563: LD_INT 8
70565: PUSH
70566: LD_INT 11
70568: PUSH
70569: LD_INT 12
70571: PUSH
70572: LD_INT 15
70574: PUSH
70575: LD_INT 16
70577: PUSH
70578: LD_INT 22
70580: PUSH
70581: LD_INT 23
70583: PUSH
70584: LD_INT 26
70586: PUSH
70587: LD_INT 36
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 101
70606: PUSH
70607: LD_INT 102
70609: PUSH
70610: LD_INT 105
70612: PUSH
70613: LD_INT 106
70615: PUSH
70616: LD_INT 108
70618: PUSH
70619: LD_INT 116
70621: PUSH
70622: LD_INT 117
70624: PUSH
70625: LD_INT 118
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: ST_TO_ADDR
70642: GO 73425
70644: LD_INT 5
70646: DOUBLE
70647: EQUAL
70648: IFTRUE 70652
70650: GO 70764
70652: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
70653: LD_ADDR_VAR 0 2
70657: PUSH
70658: LD_INT 2
70660: PUSH
70661: LD_INT 4
70663: PUSH
70664: LD_INT 5
70666: PUSH
70667: LD_INT 6
70669: PUSH
70670: LD_INT 8
70672: PUSH
70673: LD_INT 11
70675: PUSH
70676: LD_INT 12
70678: PUSH
70679: LD_INT 15
70681: PUSH
70682: LD_INT 16
70684: PUSH
70685: LD_INT 22
70687: PUSH
70688: LD_INT 23
70690: PUSH
70691: LD_INT 25
70693: PUSH
70694: LD_INT 26
70696: PUSH
70697: LD_INT 36
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 101
70718: PUSH
70719: LD_INT 102
70721: PUSH
70722: LD_INT 105
70724: PUSH
70725: LD_INT 106
70727: PUSH
70728: LD_INT 108
70730: PUSH
70731: LD_INT 109
70733: PUSH
70734: LD_INT 112
70736: PUSH
70737: LD_INT 116
70739: PUSH
70740: LD_INT 117
70742: PUSH
70743: LD_INT 118
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: ST_TO_ADDR
70762: GO 73425
70764: LD_INT 6
70766: DOUBLE
70767: EQUAL
70768: IFTRUE 70772
70770: GO 70904
70772: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
70773: LD_ADDR_VAR 0 2
70777: PUSH
70778: LD_INT 2
70780: PUSH
70781: LD_INT 4
70783: PUSH
70784: LD_INT 5
70786: PUSH
70787: LD_INT 6
70789: PUSH
70790: LD_INT 8
70792: PUSH
70793: LD_INT 11
70795: PUSH
70796: LD_INT 12
70798: PUSH
70799: LD_INT 15
70801: PUSH
70802: LD_INT 16
70804: PUSH
70805: LD_INT 20
70807: PUSH
70808: LD_INT 21
70810: PUSH
70811: LD_INT 22
70813: PUSH
70814: LD_INT 23
70816: PUSH
70817: LD_INT 25
70819: PUSH
70820: LD_INT 26
70822: PUSH
70823: LD_INT 30
70825: PUSH
70826: LD_INT 31
70828: PUSH
70829: LD_INT 32
70831: PUSH
70832: LD_INT 36
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 101
70858: PUSH
70859: LD_INT 102
70861: PUSH
70862: LD_INT 105
70864: PUSH
70865: LD_INT 106
70867: PUSH
70868: LD_INT 108
70870: PUSH
70871: LD_INT 109
70873: PUSH
70874: LD_INT 112
70876: PUSH
70877: LD_INT 116
70879: PUSH
70880: LD_INT 117
70882: PUSH
70883: LD_INT 118
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: ST_TO_ADDR
70902: GO 73425
70904: LD_INT 7
70906: DOUBLE
70907: EQUAL
70908: IFTRUE 70912
70910: GO 71024
70912: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
70913: LD_ADDR_VAR 0 2
70917: PUSH
70918: LD_INT 2
70920: PUSH
70921: LD_INT 4
70923: PUSH
70924: LD_INT 5
70926: PUSH
70927: LD_INT 7
70929: PUSH
70930: LD_INT 11
70932: PUSH
70933: LD_INT 12
70935: PUSH
70936: LD_INT 15
70938: PUSH
70939: LD_INT 16
70941: PUSH
70942: LD_INT 20
70944: PUSH
70945: LD_INT 21
70947: PUSH
70948: LD_INT 22
70950: PUSH
70951: LD_INT 23
70953: PUSH
70954: LD_INT 25
70956: PUSH
70957: LD_INT 26
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 101
70978: PUSH
70979: LD_INT 102
70981: PUSH
70982: LD_INT 103
70984: PUSH
70985: LD_INT 105
70987: PUSH
70988: LD_INT 106
70990: PUSH
70991: LD_INT 108
70993: PUSH
70994: LD_INT 112
70996: PUSH
70997: LD_INT 116
70999: PUSH
71000: LD_INT 117
71002: PUSH
71003: LD_INT 118
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: ST_TO_ADDR
71022: GO 73425
71024: LD_INT 8
71026: DOUBLE
71027: EQUAL
71028: IFTRUE 71032
71030: GO 71172
71032: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
71033: LD_ADDR_VAR 0 2
71037: PUSH
71038: LD_INT 2
71040: PUSH
71041: LD_INT 4
71043: PUSH
71044: LD_INT 5
71046: PUSH
71047: LD_INT 6
71049: PUSH
71050: LD_INT 7
71052: PUSH
71053: LD_INT 8
71055: PUSH
71056: LD_INT 11
71058: PUSH
71059: LD_INT 12
71061: PUSH
71062: LD_INT 15
71064: PUSH
71065: LD_INT 16
71067: PUSH
71068: LD_INT 20
71070: PUSH
71071: LD_INT 21
71073: PUSH
71074: LD_INT 22
71076: PUSH
71077: LD_INT 23
71079: PUSH
71080: LD_INT 25
71082: PUSH
71083: LD_INT 26
71085: PUSH
71086: LD_INT 30
71088: PUSH
71089: LD_INT 31
71091: PUSH
71092: LD_INT 32
71094: PUSH
71095: LD_INT 36
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 101
71122: PUSH
71123: LD_INT 102
71125: PUSH
71126: LD_INT 103
71128: PUSH
71129: LD_INT 105
71131: PUSH
71132: LD_INT 106
71134: PUSH
71135: LD_INT 108
71137: PUSH
71138: LD_INT 109
71140: PUSH
71141: LD_INT 112
71143: PUSH
71144: LD_INT 116
71146: PUSH
71147: LD_INT 117
71149: PUSH
71150: LD_INT 118
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: ST_TO_ADDR
71170: GO 73425
71172: LD_INT 9
71174: DOUBLE
71175: EQUAL
71176: IFTRUE 71180
71178: GO 71328
71180: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
71181: LD_ADDR_VAR 0 2
71185: PUSH
71186: LD_INT 2
71188: PUSH
71189: LD_INT 4
71191: PUSH
71192: LD_INT 5
71194: PUSH
71195: LD_INT 6
71197: PUSH
71198: LD_INT 7
71200: PUSH
71201: LD_INT 8
71203: PUSH
71204: LD_INT 11
71206: PUSH
71207: LD_INT 12
71209: PUSH
71210: LD_INT 15
71212: PUSH
71213: LD_INT 16
71215: PUSH
71216: LD_INT 20
71218: PUSH
71219: LD_INT 21
71221: PUSH
71222: LD_INT 22
71224: PUSH
71225: LD_INT 23
71227: PUSH
71228: LD_INT 25
71230: PUSH
71231: LD_INT 26
71233: PUSH
71234: LD_INT 28
71236: PUSH
71237: LD_INT 30
71239: PUSH
71240: LD_INT 31
71242: PUSH
71243: LD_INT 32
71245: PUSH
71246: LD_INT 36
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 101
71274: PUSH
71275: LD_INT 102
71277: PUSH
71278: LD_INT 103
71280: PUSH
71281: LD_INT 105
71283: PUSH
71284: LD_INT 106
71286: PUSH
71287: LD_INT 108
71289: PUSH
71290: LD_INT 109
71292: PUSH
71293: LD_INT 112
71295: PUSH
71296: LD_INT 114
71298: PUSH
71299: LD_INT 116
71301: PUSH
71302: LD_INT 117
71304: PUSH
71305: LD_INT 118
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: ST_TO_ADDR
71326: GO 73425
71328: LD_INT 10
71330: DOUBLE
71331: EQUAL
71332: IFTRUE 71336
71334: GO 71532
71336: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
71337: LD_ADDR_VAR 0 2
71341: PUSH
71342: LD_INT 2
71344: PUSH
71345: LD_INT 4
71347: PUSH
71348: LD_INT 5
71350: PUSH
71351: LD_INT 6
71353: PUSH
71354: LD_INT 7
71356: PUSH
71357: LD_INT 8
71359: PUSH
71360: LD_INT 9
71362: PUSH
71363: LD_INT 10
71365: PUSH
71366: LD_INT 11
71368: PUSH
71369: LD_INT 12
71371: PUSH
71372: LD_INT 13
71374: PUSH
71375: LD_INT 14
71377: PUSH
71378: LD_INT 15
71380: PUSH
71381: LD_INT 16
71383: PUSH
71384: LD_INT 17
71386: PUSH
71387: LD_INT 18
71389: PUSH
71390: LD_INT 19
71392: PUSH
71393: LD_INT 20
71395: PUSH
71396: LD_INT 21
71398: PUSH
71399: LD_INT 22
71401: PUSH
71402: LD_INT 23
71404: PUSH
71405: LD_INT 24
71407: PUSH
71408: LD_INT 25
71410: PUSH
71411: LD_INT 26
71413: PUSH
71414: LD_INT 28
71416: PUSH
71417: LD_INT 30
71419: PUSH
71420: LD_INT 31
71422: PUSH
71423: LD_INT 32
71425: PUSH
71426: LD_INT 36
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 101
71462: PUSH
71463: LD_INT 102
71465: PUSH
71466: LD_INT 103
71468: PUSH
71469: LD_INT 104
71471: PUSH
71472: LD_INT 105
71474: PUSH
71475: LD_INT 106
71477: PUSH
71478: LD_INT 107
71480: PUSH
71481: LD_INT 108
71483: PUSH
71484: LD_INT 109
71486: PUSH
71487: LD_INT 110
71489: PUSH
71490: LD_INT 111
71492: PUSH
71493: LD_INT 112
71495: PUSH
71496: LD_INT 114
71498: PUSH
71499: LD_INT 116
71501: PUSH
71502: LD_INT 117
71504: PUSH
71505: LD_INT 118
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: ST_TO_ADDR
71530: GO 73425
71532: LD_INT 11
71534: DOUBLE
71535: EQUAL
71536: IFTRUE 71540
71538: GO 71744
71540: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
71541: LD_ADDR_VAR 0 2
71545: PUSH
71546: LD_INT 2
71548: PUSH
71549: LD_INT 3
71551: PUSH
71552: LD_INT 4
71554: PUSH
71555: LD_INT 5
71557: PUSH
71558: LD_INT 6
71560: PUSH
71561: LD_INT 7
71563: PUSH
71564: LD_INT 8
71566: PUSH
71567: LD_INT 9
71569: PUSH
71570: LD_INT 10
71572: PUSH
71573: LD_INT 11
71575: PUSH
71576: LD_INT 12
71578: PUSH
71579: LD_INT 13
71581: PUSH
71582: LD_INT 14
71584: PUSH
71585: LD_INT 15
71587: PUSH
71588: LD_INT 16
71590: PUSH
71591: LD_INT 17
71593: PUSH
71594: LD_INT 18
71596: PUSH
71597: LD_INT 19
71599: PUSH
71600: LD_INT 20
71602: PUSH
71603: LD_INT 21
71605: PUSH
71606: LD_INT 22
71608: PUSH
71609: LD_INT 23
71611: PUSH
71612: LD_INT 24
71614: PUSH
71615: LD_INT 25
71617: PUSH
71618: LD_INT 26
71620: PUSH
71621: LD_INT 28
71623: PUSH
71624: LD_INT 30
71626: PUSH
71627: LD_INT 31
71629: PUSH
71630: LD_INT 32
71632: PUSH
71633: LD_INT 34
71635: PUSH
71636: LD_INT 36
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 101
71674: PUSH
71675: LD_INT 102
71677: PUSH
71678: LD_INT 103
71680: PUSH
71681: LD_INT 104
71683: PUSH
71684: LD_INT 105
71686: PUSH
71687: LD_INT 106
71689: PUSH
71690: LD_INT 107
71692: PUSH
71693: LD_INT 108
71695: PUSH
71696: LD_INT 109
71698: PUSH
71699: LD_INT 110
71701: PUSH
71702: LD_INT 111
71704: PUSH
71705: LD_INT 112
71707: PUSH
71708: LD_INT 114
71710: PUSH
71711: LD_INT 116
71713: PUSH
71714: LD_INT 117
71716: PUSH
71717: LD_INT 118
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: ST_TO_ADDR
71742: GO 73425
71744: LD_INT 12
71746: DOUBLE
71747: EQUAL
71748: IFTRUE 71752
71750: GO 71972
71752: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
71753: LD_ADDR_VAR 0 2
71757: PUSH
71758: LD_INT 1
71760: PUSH
71761: LD_INT 2
71763: PUSH
71764: LD_INT 3
71766: PUSH
71767: LD_INT 4
71769: PUSH
71770: LD_INT 5
71772: PUSH
71773: LD_INT 6
71775: PUSH
71776: LD_INT 7
71778: PUSH
71779: LD_INT 8
71781: PUSH
71782: LD_INT 9
71784: PUSH
71785: LD_INT 10
71787: PUSH
71788: LD_INT 11
71790: PUSH
71791: LD_INT 12
71793: PUSH
71794: LD_INT 13
71796: PUSH
71797: LD_INT 14
71799: PUSH
71800: LD_INT 15
71802: PUSH
71803: LD_INT 16
71805: PUSH
71806: LD_INT 17
71808: PUSH
71809: LD_INT 18
71811: PUSH
71812: LD_INT 19
71814: PUSH
71815: LD_INT 20
71817: PUSH
71818: LD_INT 21
71820: PUSH
71821: LD_INT 22
71823: PUSH
71824: LD_INT 23
71826: PUSH
71827: LD_INT 24
71829: PUSH
71830: LD_INT 25
71832: PUSH
71833: LD_INT 26
71835: PUSH
71836: LD_INT 27
71838: PUSH
71839: LD_INT 28
71841: PUSH
71842: LD_INT 30
71844: PUSH
71845: LD_INT 31
71847: PUSH
71848: LD_INT 32
71850: PUSH
71851: LD_INT 33
71853: PUSH
71854: LD_INT 34
71856: PUSH
71857: LD_INT 36
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 101
71898: PUSH
71899: LD_INT 102
71901: PUSH
71902: LD_INT 103
71904: PUSH
71905: LD_INT 104
71907: PUSH
71908: LD_INT 105
71910: PUSH
71911: LD_INT 106
71913: PUSH
71914: LD_INT 107
71916: PUSH
71917: LD_INT 108
71919: PUSH
71920: LD_INT 109
71922: PUSH
71923: LD_INT 110
71925: PUSH
71926: LD_INT 111
71928: PUSH
71929: LD_INT 112
71931: PUSH
71932: LD_INT 113
71934: PUSH
71935: LD_INT 114
71937: PUSH
71938: LD_INT 116
71940: PUSH
71941: LD_INT 117
71943: PUSH
71944: LD_INT 118
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: ST_TO_ADDR
71970: GO 73425
71972: LD_INT 13
71974: DOUBLE
71975: EQUAL
71976: IFTRUE 71980
71978: GO 72188
71980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
71981: LD_ADDR_VAR 0 2
71985: PUSH
71986: LD_INT 1
71988: PUSH
71989: LD_INT 2
71991: PUSH
71992: LD_INT 3
71994: PUSH
71995: LD_INT 4
71997: PUSH
71998: LD_INT 5
72000: PUSH
72001: LD_INT 8
72003: PUSH
72004: LD_INT 9
72006: PUSH
72007: LD_INT 10
72009: PUSH
72010: LD_INT 11
72012: PUSH
72013: LD_INT 12
72015: PUSH
72016: LD_INT 14
72018: PUSH
72019: LD_INT 15
72021: PUSH
72022: LD_INT 16
72024: PUSH
72025: LD_INT 17
72027: PUSH
72028: LD_INT 18
72030: PUSH
72031: LD_INT 19
72033: PUSH
72034: LD_INT 20
72036: PUSH
72037: LD_INT 21
72039: PUSH
72040: LD_INT 22
72042: PUSH
72043: LD_INT 23
72045: PUSH
72046: LD_INT 24
72048: PUSH
72049: LD_INT 25
72051: PUSH
72052: LD_INT 26
72054: PUSH
72055: LD_INT 27
72057: PUSH
72058: LD_INT 28
72060: PUSH
72061: LD_INT 30
72063: PUSH
72064: LD_INT 31
72066: PUSH
72067: LD_INT 32
72069: PUSH
72070: LD_INT 33
72072: PUSH
72073: LD_INT 34
72075: PUSH
72076: LD_INT 36
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 101
72114: PUSH
72115: LD_INT 102
72117: PUSH
72118: LD_INT 103
72120: PUSH
72121: LD_INT 104
72123: PUSH
72124: LD_INT 105
72126: PUSH
72127: LD_INT 106
72129: PUSH
72130: LD_INT 107
72132: PUSH
72133: LD_INT 108
72135: PUSH
72136: LD_INT 109
72138: PUSH
72139: LD_INT 110
72141: PUSH
72142: LD_INT 111
72144: PUSH
72145: LD_INT 112
72147: PUSH
72148: LD_INT 113
72150: PUSH
72151: LD_INT 114
72153: PUSH
72154: LD_INT 116
72156: PUSH
72157: LD_INT 117
72159: PUSH
72160: LD_INT 118
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: ST_TO_ADDR
72186: GO 73425
72188: LD_INT 14
72190: DOUBLE
72191: EQUAL
72192: IFTRUE 72196
72194: GO 72420
72196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
72197: LD_ADDR_VAR 0 2
72201: PUSH
72202: LD_INT 1
72204: PUSH
72205: LD_INT 2
72207: PUSH
72208: LD_INT 3
72210: PUSH
72211: LD_INT 4
72213: PUSH
72214: LD_INT 5
72216: PUSH
72217: LD_INT 6
72219: PUSH
72220: LD_INT 7
72222: PUSH
72223: LD_INT 8
72225: PUSH
72226: LD_INT 9
72228: PUSH
72229: LD_INT 10
72231: PUSH
72232: LD_INT 11
72234: PUSH
72235: LD_INT 12
72237: PUSH
72238: LD_INT 13
72240: PUSH
72241: LD_INT 14
72243: PUSH
72244: LD_INT 15
72246: PUSH
72247: LD_INT 16
72249: PUSH
72250: LD_INT 17
72252: PUSH
72253: LD_INT 18
72255: PUSH
72256: LD_INT 19
72258: PUSH
72259: LD_INT 20
72261: PUSH
72262: LD_INT 21
72264: PUSH
72265: LD_INT 22
72267: PUSH
72268: LD_INT 23
72270: PUSH
72271: LD_INT 24
72273: PUSH
72274: LD_INT 25
72276: PUSH
72277: LD_INT 26
72279: PUSH
72280: LD_INT 27
72282: PUSH
72283: LD_INT 28
72285: PUSH
72286: LD_INT 29
72288: PUSH
72289: LD_INT 30
72291: PUSH
72292: LD_INT 31
72294: PUSH
72295: LD_INT 32
72297: PUSH
72298: LD_INT 33
72300: PUSH
72301: LD_INT 34
72303: PUSH
72304: LD_INT 36
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 101
72346: PUSH
72347: LD_INT 102
72349: PUSH
72350: LD_INT 103
72352: PUSH
72353: LD_INT 104
72355: PUSH
72356: LD_INT 105
72358: PUSH
72359: LD_INT 106
72361: PUSH
72362: LD_INT 107
72364: PUSH
72365: LD_INT 108
72367: PUSH
72368: LD_INT 109
72370: PUSH
72371: LD_INT 110
72373: PUSH
72374: LD_INT 111
72376: PUSH
72377: LD_INT 112
72379: PUSH
72380: LD_INT 113
72382: PUSH
72383: LD_INT 114
72385: PUSH
72386: LD_INT 116
72388: PUSH
72389: LD_INT 117
72391: PUSH
72392: LD_INT 118
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: ST_TO_ADDR
72418: GO 73425
72420: LD_INT 15
72422: DOUBLE
72423: EQUAL
72424: IFTRUE 72428
72426: GO 72652
72428: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
72429: LD_ADDR_VAR 0 2
72433: PUSH
72434: LD_INT 1
72436: PUSH
72437: LD_INT 2
72439: PUSH
72440: LD_INT 3
72442: PUSH
72443: LD_INT 4
72445: PUSH
72446: LD_INT 5
72448: PUSH
72449: LD_INT 6
72451: PUSH
72452: LD_INT 7
72454: PUSH
72455: LD_INT 8
72457: PUSH
72458: LD_INT 9
72460: PUSH
72461: LD_INT 10
72463: PUSH
72464: LD_INT 11
72466: PUSH
72467: LD_INT 12
72469: PUSH
72470: LD_INT 13
72472: PUSH
72473: LD_INT 14
72475: PUSH
72476: LD_INT 15
72478: PUSH
72479: LD_INT 16
72481: PUSH
72482: LD_INT 17
72484: PUSH
72485: LD_INT 18
72487: PUSH
72488: LD_INT 19
72490: PUSH
72491: LD_INT 20
72493: PUSH
72494: LD_INT 21
72496: PUSH
72497: LD_INT 22
72499: PUSH
72500: LD_INT 23
72502: PUSH
72503: LD_INT 24
72505: PUSH
72506: LD_INT 25
72508: PUSH
72509: LD_INT 26
72511: PUSH
72512: LD_INT 27
72514: PUSH
72515: LD_INT 28
72517: PUSH
72518: LD_INT 29
72520: PUSH
72521: LD_INT 30
72523: PUSH
72524: LD_INT 31
72526: PUSH
72527: LD_INT 32
72529: PUSH
72530: LD_INT 33
72532: PUSH
72533: LD_INT 34
72535: PUSH
72536: LD_INT 36
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: LIST
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 101
72578: PUSH
72579: LD_INT 102
72581: PUSH
72582: LD_INT 103
72584: PUSH
72585: LD_INT 104
72587: PUSH
72588: LD_INT 105
72590: PUSH
72591: LD_INT 106
72593: PUSH
72594: LD_INT 107
72596: PUSH
72597: LD_INT 108
72599: PUSH
72600: LD_INT 109
72602: PUSH
72603: LD_INT 110
72605: PUSH
72606: LD_INT 111
72608: PUSH
72609: LD_INT 112
72611: PUSH
72612: LD_INT 113
72614: PUSH
72615: LD_INT 114
72617: PUSH
72618: LD_INT 116
72620: PUSH
72621: LD_INT 117
72623: PUSH
72624: LD_INT 118
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: ST_TO_ADDR
72650: GO 73425
72652: LD_INT 16
72654: DOUBLE
72655: EQUAL
72656: IFTRUE 72660
72658: GO 72796
72660: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
72661: LD_ADDR_VAR 0 2
72665: PUSH
72666: LD_INT 2
72668: PUSH
72669: LD_INT 4
72671: PUSH
72672: LD_INT 5
72674: PUSH
72675: LD_INT 7
72677: PUSH
72678: LD_INT 11
72680: PUSH
72681: LD_INT 12
72683: PUSH
72684: LD_INT 15
72686: PUSH
72687: LD_INT 16
72689: PUSH
72690: LD_INT 20
72692: PUSH
72693: LD_INT 21
72695: PUSH
72696: LD_INT 22
72698: PUSH
72699: LD_INT 23
72701: PUSH
72702: LD_INT 25
72704: PUSH
72705: LD_INT 26
72707: PUSH
72708: LD_INT 30
72710: PUSH
72711: LD_INT 31
72713: PUSH
72714: LD_INT 32
72716: PUSH
72717: LD_INT 33
72719: PUSH
72720: LD_INT 34
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 101
72746: PUSH
72747: LD_INT 102
72749: PUSH
72750: LD_INT 103
72752: PUSH
72753: LD_INT 106
72755: PUSH
72756: LD_INT 108
72758: PUSH
72759: LD_INT 112
72761: PUSH
72762: LD_INT 113
72764: PUSH
72765: LD_INT 114
72767: PUSH
72768: LD_INT 116
72770: PUSH
72771: LD_INT 117
72773: PUSH
72774: LD_INT 118
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: ST_TO_ADDR
72794: GO 73425
72796: LD_INT 17
72798: DOUBLE
72799: EQUAL
72800: IFTRUE 72804
72802: GO 73028
72804: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
72805: LD_ADDR_VAR 0 2
72809: PUSH
72810: LD_INT 1
72812: PUSH
72813: LD_INT 2
72815: PUSH
72816: LD_INT 3
72818: PUSH
72819: LD_INT 4
72821: PUSH
72822: LD_INT 5
72824: PUSH
72825: LD_INT 6
72827: PUSH
72828: LD_INT 7
72830: PUSH
72831: LD_INT 8
72833: PUSH
72834: LD_INT 9
72836: PUSH
72837: LD_INT 10
72839: PUSH
72840: LD_INT 11
72842: PUSH
72843: LD_INT 12
72845: PUSH
72846: LD_INT 13
72848: PUSH
72849: LD_INT 14
72851: PUSH
72852: LD_INT 15
72854: PUSH
72855: LD_INT 16
72857: PUSH
72858: LD_INT 17
72860: PUSH
72861: LD_INT 18
72863: PUSH
72864: LD_INT 19
72866: PUSH
72867: LD_INT 20
72869: PUSH
72870: LD_INT 21
72872: PUSH
72873: LD_INT 22
72875: PUSH
72876: LD_INT 23
72878: PUSH
72879: LD_INT 24
72881: PUSH
72882: LD_INT 25
72884: PUSH
72885: LD_INT 26
72887: PUSH
72888: LD_INT 27
72890: PUSH
72891: LD_INT 28
72893: PUSH
72894: LD_INT 29
72896: PUSH
72897: LD_INT 30
72899: PUSH
72900: LD_INT 31
72902: PUSH
72903: LD_INT 32
72905: PUSH
72906: LD_INT 33
72908: PUSH
72909: LD_INT 34
72911: PUSH
72912: LD_INT 36
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: LIST
72926: LIST
72927: LIST
72928: LIST
72929: LIST
72930: LIST
72931: LIST
72932: LIST
72933: LIST
72934: LIST
72935: LIST
72936: LIST
72937: LIST
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: PUSH
72952: LD_INT 101
72954: PUSH
72955: LD_INT 102
72957: PUSH
72958: LD_INT 103
72960: PUSH
72961: LD_INT 104
72963: PUSH
72964: LD_INT 105
72966: PUSH
72967: LD_INT 106
72969: PUSH
72970: LD_INT 107
72972: PUSH
72973: LD_INT 108
72975: PUSH
72976: LD_INT 109
72978: PUSH
72979: LD_INT 110
72981: PUSH
72982: LD_INT 111
72984: PUSH
72985: LD_INT 112
72987: PUSH
72988: LD_INT 113
72990: PUSH
72991: LD_INT 114
72993: PUSH
72994: LD_INT 116
72996: PUSH
72997: LD_INT 117
72999: PUSH
73000: LD_INT 118
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: ST_TO_ADDR
73026: GO 73425
73028: LD_INT 18
73030: DOUBLE
73031: EQUAL
73032: IFTRUE 73036
73034: GO 73184
73036: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
73037: LD_ADDR_VAR 0 2
73041: PUSH
73042: LD_INT 2
73044: PUSH
73045: LD_INT 4
73047: PUSH
73048: LD_INT 5
73050: PUSH
73051: LD_INT 7
73053: PUSH
73054: LD_INT 11
73056: PUSH
73057: LD_INT 12
73059: PUSH
73060: LD_INT 15
73062: PUSH
73063: LD_INT 16
73065: PUSH
73066: LD_INT 20
73068: PUSH
73069: LD_INT 21
73071: PUSH
73072: LD_INT 22
73074: PUSH
73075: LD_INT 23
73077: PUSH
73078: LD_INT 25
73080: PUSH
73081: LD_INT 26
73083: PUSH
73084: LD_INT 30
73086: PUSH
73087: LD_INT 31
73089: PUSH
73090: LD_INT 32
73092: PUSH
73093: LD_INT 33
73095: PUSH
73096: LD_INT 34
73098: PUSH
73099: LD_INT 35
73101: PUSH
73102: LD_INT 36
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 101
73130: PUSH
73131: LD_INT 102
73133: PUSH
73134: LD_INT 103
73136: PUSH
73137: LD_INT 106
73139: PUSH
73140: LD_INT 108
73142: PUSH
73143: LD_INT 112
73145: PUSH
73146: LD_INT 113
73148: PUSH
73149: LD_INT 114
73151: PUSH
73152: LD_INT 115
73154: PUSH
73155: LD_INT 116
73157: PUSH
73158: LD_INT 117
73160: PUSH
73161: LD_INT 118
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: ST_TO_ADDR
73182: GO 73425
73184: LD_INT 19
73186: DOUBLE
73187: EQUAL
73188: IFTRUE 73192
73190: GO 73424
73192: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
73193: LD_ADDR_VAR 0 2
73197: PUSH
73198: LD_INT 1
73200: PUSH
73201: LD_INT 2
73203: PUSH
73204: LD_INT 3
73206: PUSH
73207: LD_INT 4
73209: PUSH
73210: LD_INT 5
73212: PUSH
73213: LD_INT 6
73215: PUSH
73216: LD_INT 7
73218: PUSH
73219: LD_INT 8
73221: PUSH
73222: LD_INT 9
73224: PUSH
73225: LD_INT 10
73227: PUSH
73228: LD_INT 11
73230: PUSH
73231: LD_INT 12
73233: PUSH
73234: LD_INT 13
73236: PUSH
73237: LD_INT 14
73239: PUSH
73240: LD_INT 15
73242: PUSH
73243: LD_INT 16
73245: PUSH
73246: LD_INT 17
73248: PUSH
73249: LD_INT 18
73251: PUSH
73252: LD_INT 19
73254: PUSH
73255: LD_INT 20
73257: PUSH
73258: LD_INT 21
73260: PUSH
73261: LD_INT 22
73263: PUSH
73264: LD_INT 23
73266: PUSH
73267: LD_INT 24
73269: PUSH
73270: LD_INT 25
73272: PUSH
73273: LD_INT 26
73275: PUSH
73276: LD_INT 27
73278: PUSH
73279: LD_INT 28
73281: PUSH
73282: LD_INT 29
73284: PUSH
73285: LD_INT 30
73287: PUSH
73288: LD_INT 31
73290: PUSH
73291: LD_INT 32
73293: PUSH
73294: LD_INT 33
73296: PUSH
73297: LD_INT 34
73299: PUSH
73300: LD_INT 35
73302: PUSH
73303: LD_INT 36
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 101
73346: PUSH
73347: LD_INT 102
73349: PUSH
73350: LD_INT 103
73352: PUSH
73353: LD_INT 104
73355: PUSH
73356: LD_INT 105
73358: PUSH
73359: LD_INT 106
73361: PUSH
73362: LD_INT 107
73364: PUSH
73365: LD_INT 108
73367: PUSH
73368: LD_INT 109
73370: PUSH
73371: LD_INT 110
73373: PUSH
73374: LD_INT 111
73376: PUSH
73377: LD_INT 112
73379: PUSH
73380: LD_INT 113
73382: PUSH
73383: LD_INT 114
73385: PUSH
73386: LD_INT 115
73388: PUSH
73389: LD_INT 116
73391: PUSH
73392: LD_INT 117
73394: PUSH
73395: LD_INT 118
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: LIST
73402: LIST
73403: LIST
73404: LIST
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: ST_TO_ADDR
73422: GO 73425
73424: POP
// end else
73425: GO 73656
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
73427: LD_ADDR_VAR 0 2
73431: PUSH
73432: LD_INT 1
73434: PUSH
73435: LD_INT 2
73437: PUSH
73438: LD_INT 3
73440: PUSH
73441: LD_INT 4
73443: PUSH
73444: LD_INT 5
73446: PUSH
73447: LD_INT 6
73449: PUSH
73450: LD_INT 7
73452: PUSH
73453: LD_INT 8
73455: PUSH
73456: LD_INT 9
73458: PUSH
73459: LD_INT 10
73461: PUSH
73462: LD_INT 11
73464: PUSH
73465: LD_INT 12
73467: PUSH
73468: LD_INT 13
73470: PUSH
73471: LD_INT 14
73473: PUSH
73474: LD_INT 15
73476: PUSH
73477: LD_INT 16
73479: PUSH
73480: LD_INT 17
73482: PUSH
73483: LD_INT 18
73485: PUSH
73486: LD_INT 19
73488: PUSH
73489: LD_INT 20
73491: PUSH
73492: LD_INT 21
73494: PUSH
73495: LD_INT 22
73497: PUSH
73498: LD_INT 23
73500: PUSH
73501: LD_INT 24
73503: PUSH
73504: LD_INT 25
73506: PUSH
73507: LD_INT 26
73509: PUSH
73510: LD_INT 27
73512: PUSH
73513: LD_INT 28
73515: PUSH
73516: LD_INT 29
73518: PUSH
73519: LD_INT 30
73521: PUSH
73522: LD_INT 31
73524: PUSH
73525: LD_INT 32
73527: PUSH
73528: LD_INT 33
73530: PUSH
73531: LD_INT 34
73533: PUSH
73534: LD_INT 35
73536: PUSH
73537: LD_INT 36
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 101
73580: PUSH
73581: LD_INT 102
73583: PUSH
73584: LD_INT 103
73586: PUSH
73587: LD_INT 104
73589: PUSH
73590: LD_INT 105
73592: PUSH
73593: LD_INT 106
73595: PUSH
73596: LD_INT 107
73598: PUSH
73599: LD_INT 108
73601: PUSH
73602: LD_INT 109
73604: PUSH
73605: LD_INT 110
73607: PUSH
73608: LD_INT 111
73610: PUSH
73611: LD_INT 112
73613: PUSH
73614: LD_INT 113
73616: PUSH
73617: LD_INT 114
73619: PUSH
73620: LD_INT 115
73622: PUSH
73623: LD_INT 116
73625: PUSH
73626: LD_INT 117
73628: PUSH
73629: LD_INT 118
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: ST_TO_ADDR
// if result then
73656: LD_VAR 0 2
73660: IFFALSE 74446
// begin normal :=  ;
73662: LD_ADDR_VAR 0 5
73666: PUSH
73667: LD_STRING 
73669: ST_TO_ADDR
// hardcore :=  ;
73670: LD_ADDR_VAR 0 6
73674: PUSH
73675: LD_STRING 
73677: ST_TO_ADDR
// active :=  ;
73678: LD_ADDR_VAR 0 7
73682: PUSH
73683: LD_STRING 
73685: ST_TO_ADDR
// for i = 1 to normalCounter do
73686: LD_ADDR_VAR 0 8
73690: PUSH
73691: DOUBLE
73692: LD_INT 1
73694: DEC
73695: ST_TO_ADDR
73696: LD_EXP 62
73700: PUSH
73701: FOR_TO
73702: IFFALSE 73803
// begin tmp := 0 ;
73704: LD_ADDR_VAR 0 3
73708: PUSH
73709: LD_STRING 0
73711: ST_TO_ADDR
// if result [ 1 ] then
73712: LD_VAR 0 2
73716: PUSH
73717: LD_INT 1
73719: ARRAY
73720: IFFALSE 73785
// if result [ 1 ] [ 1 ] = i then
73722: LD_VAR 0 2
73726: PUSH
73727: LD_INT 1
73729: ARRAY
73730: PUSH
73731: LD_INT 1
73733: ARRAY
73734: PUSH
73735: LD_VAR 0 8
73739: EQUAL
73740: IFFALSE 73785
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
73742: LD_ADDR_VAR 0 2
73746: PUSH
73747: LD_VAR 0 2
73751: PPUSH
73752: LD_INT 1
73754: PPUSH
73755: LD_VAR 0 2
73759: PUSH
73760: LD_INT 1
73762: ARRAY
73763: PPUSH
73764: LD_INT 1
73766: PPUSH
73767: CALL_OW 3
73771: PPUSH
73772: CALL_OW 1
73776: ST_TO_ADDR
// tmp := 1 ;
73777: LD_ADDR_VAR 0 3
73781: PUSH
73782: LD_STRING 1
73784: ST_TO_ADDR
// end ; normal := normal & tmp ;
73785: LD_ADDR_VAR 0 5
73789: PUSH
73790: LD_VAR 0 5
73794: PUSH
73795: LD_VAR 0 3
73799: STR
73800: ST_TO_ADDR
// end ;
73801: GO 73701
73803: POP
73804: POP
// for i = 1 to hardcoreCounter do
73805: LD_ADDR_VAR 0 8
73809: PUSH
73810: DOUBLE
73811: LD_INT 1
73813: DEC
73814: ST_TO_ADDR
73815: LD_EXP 63
73819: PUSH
73820: FOR_TO
73821: IFFALSE 73926
// begin tmp := 0 ;
73823: LD_ADDR_VAR 0 3
73827: PUSH
73828: LD_STRING 0
73830: ST_TO_ADDR
// if result [ 2 ] then
73831: LD_VAR 0 2
73835: PUSH
73836: LD_INT 2
73838: ARRAY
73839: IFFALSE 73908
// if result [ 2 ] [ 1 ] = 100 + i then
73841: LD_VAR 0 2
73845: PUSH
73846: LD_INT 2
73848: ARRAY
73849: PUSH
73850: LD_INT 1
73852: ARRAY
73853: PUSH
73854: LD_INT 100
73856: PUSH
73857: LD_VAR 0 8
73861: PLUS
73862: EQUAL
73863: IFFALSE 73908
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
73865: LD_ADDR_VAR 0 2
73869: PUSH
73870: LD_VAR 0 2
73874: PPUSH
73875: LD_INT 2
73877: PPUSH
73878: LD_VAR 0 2
73882: PUSH
73883: LD_INT 2
73885: ARRAY
73886: PPUSH
73887: LD_INT 1
73889: PPUSH
73890: CALL_OW 3
73894: PPUSH
73895: CALL_OW 1
73899: ST_TO_ADDR
// tmp := 1 ;
73900: LD_ADDR_VAR 0 3
73904: PUSH
73905: LD_STRING 1
73907: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
73908: LD_ADDR_VAR 0 6
73912: PUSH
73913: LD_VAR 0 6
73917: PUSH
73918: LD_VAR 0 3
73922: STR
73923: ST_TO_ADDR
// end ;
73924: GO 73820
73926: POP
73927: POP
// if isGameLoad then
73928: LD_VAR 0 1
73932: IFFALSE 74407
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
73934: LD_ADDR_VAR 0 4
73938: PUSH
73939: LD_EXP 66
73943: PUSH
73944: LD_EXP 65
73948: PUSH
73949: LD_EXP 67
73953: PUSH
73954: LD_EXP 64
73958: PUSH
73959: LD_EXP 68
73963: PUSH
73964: LD_EXP 69
73968: PUSH
73969: LD_EXP 70
73973: PUSH
73974: LD_EXP 71
73978: PUSH
73979: LD_EXP 72
73983: PUSH
73984: LD_EXP 73
73988: PUSH
73989: LD_EXP 74
73993: PUSH
73994: LD_EXP 75
73998: PUSH
73999: LD_EXP 76
74003: PUSH
74004: LD_EXP 77
74008: PUSH
74009: LD_EXP 85
74013: PUSH
74014: LD_EXP 86
74018: PUSH
74019: LD_EXP 87
74023: PUSH
74024: LD_EXP 88
74028: PUSH
74029: LD_EXP 90
74033: PUSH
74034: LD_EXP 91
74038: PUSH
74039: LD_EXP 92
74043: PUSH
74044: LD_EXP 95
74048: PUSH
74049: LD_EXP 97
74053: PUSH
74054: LD_EXP 98
74058: PUSH
74059: LD_EXP 99
74063: PUSH
74064: LD_EXP 101
74068: PUSH
74069: LD_EXP 102
74073: PUSH
74074: LD_EXP 105
74078: PUSH
74079: LD_EXP 106
74083: PUSH
74084: LD_EXP 107
74088: PUSH
74089: LD_EXP 108
74093: PUSH
74094: LD_EXP 109
74098: PUSH
74099: LD_EXP 110
74103: PUSH
74104: LD_EXP 111
74108: PUSH
74109: LD_EXP 112
74113: PUSH
74114: LD_EXP 113
74118: PUSH
74119: LD_EXP 78
74123: PUSH
74124: LD_EXP 79
74128: PUSH
74129: LD_EXP 82
74133: PUSH
74134: LD_EXP 83
74138: PUSH
74139: LD_EXP 84
74143: PUSH
74144: LD_EXP 80
74148: PUSH
74149: LD_EXP 81
74153: PUSH
74154: LD_EXP 89
74158: PUSH
74159: LD_EXP 93
74163: PUSH
74164: LD_EXP 94
74168: PUSH
74169: LD_EXP 96
74173: PUSH
74174: LD_EXP 100
74178: PUSH
74179: LD_EXP 103
74183: PUSH
74184: LD_EXP 104
74188: PUSH
74189: LD_EXP 114
74193: PUSH
74194: LD_EXP 115
74198: PUSH
74199: LD_EXP 116
74203: PUSH
74204: LD_EXP 117
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: ST_TO_ADDR
// tmp :=  ;
74265: LD_ADDR_VAR 0 3
74269: PUSH
74270: LD_STRING 
74272: ST_TO_ADDR
// for i = 1 to normalCounter do
74273: LD_ADDR_VAR 0 8
74277: PUSH
74278: DOUBLE
74279: LD_INT 1
74281: DEC
74282: ST_TO_ADDR
74283: LD_EXP 62
74287: PUSH
74288: FOR_TO
74289: IFFALSE 74325
// begin if flags [ i ] then
74291: LD_VAR 0 4
74295: PUSH
74296: LD_VAR 0 8
74300: ARRAY
74301: IFFALSE 74323
// tmp := tmp & i & ; ;
74303: LD_ADDR_VAR 0 3
74307: PUSH
74308: LD_VAR 0 3
74312: PUSH
74313: LD_VAR 0 8
74317: STR
74318: PUSH
74319: LD_STRING ;
74321: STR
74322: ST_TO_ADDR
// end ;
74323: GO 74288
74325: POP
74326: POP
// for i = 1 to hardcoreCounter do
74327: LD_ADDR_VAR 0 8
74331: PUSH
74332: DOUBLE
74333: LD_INT 1
74335: DEC
74336: ST_TO_ADDR
74337: LD_EXP 63
74341: PUSH
74342: FOR_TO
74343: IFFALSE 74389
// begin if flags [ normalCounter + i ] then
74345: LD_VAR 0 4
74349: PUSH
74350: LD_EXP 62
74354: PUSH
74355: LD_VAR 0 8
74359: PLUS
74360: ARRAY
74361: IFFALSE 74387
// tmp := tmp & ( 100 + i ) & ; ;
74363: LD_ADDR_VAR 0 3
74367: PUSH
74368: LD_VAR 0 3
74372: PUSH
74373: LD_INT 100
74375: PUSH
74376: LD_VAR 0 8
74380: PLUS
74381: STR
74382: PUSH
74383: LD_STRING ;
74385: STR
74386: ST_TO_ADDR
// end ;
74387: GO 74342
74389: POP
74390: POP
// if tmp then
74391: LD_VAR 0 3
74395: IFFALSE 74407
// active := tmp ;
74397: LD_ADDR_VAR 0 7
74401: PUSH
74402: LD_VAR 0 3
74406: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
74407: LD_STRING getStreamItemsFromMission("
74409: PUSH
74410: LD_VAR 0 5
74414: STR
74415: PUSH
74416: LD_STRING ","
74418: STR
74419: PUSH
74420: LD_VAR 0 6
74424: STR
74425: PUSH
74426: LD_STRING ","
74428: STR
74429: PUSH
74430: LD_VAR 0 7
74434: STR
74435: PUSH
74436: LD_STRING ")
74438: STR
74439: PPUSH
74440: CALL_OW 559
// end else
74444: GO 74453
// ToLua ( getStreamItemsFromMission("","","") ) ;
74446: LD_STRING getStreamItemsFromMission("","","")
74448: PPUSH
74449: CALL_OW 559
// end ;
74453: LD_VAR 0 2
74457: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
74458: LD_EXP 61
74462: PUSH
74463: LD_EXP 66
74467: AND
74468: IFFALSE 74592
74470: GO 74472
74472: DISABLE
74473: LD_INT 0
74475: PPUSH
74476: PPUSH
// begin enable ;
74477: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
74478: LD_ADDR_VAR 0 2
74482: PUSH
74483: LD_INT 22
74485: PUSH
74486: LD_OWVAR 2
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: LD_INT 2
74497: PUSH
74498: LD_INT 34
74500: PUSH
74501: LD_INT 7
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: PUSH
74508: LD_INT 34
74510: PUSH
74511: LD_INT 45
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PUSH
74518: LD_INT 34
74520: PUSH
74521: LD_INT 28
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PUSH
74528: LD_INT 34
74530: PUSH
74531: LD_INT 47
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PPUSH
74549: CALL_OW 69
74553: ST_TO_ADDR
// if not tmp then
74554: LD_VAR 0 2
74558: NOT
74559: IFFALSE 74563
// exit ;
74561: GO 74592
// for i in tmp do
74563: LD_ADDR_VAR 0 1
74567: PUSH
74568: LD_VAR 0 2
74572: PUSH
74573: FOR_IN
74574: IFFALSE 74590
// begin SetLives ( i , 0 ) ;
74576: LD_VAR 0 1
74580: PPUSH
74581: LD_INT 0
74583: PPUSH
74584: CALL_OW 234
// end ;
74588: GO 74573
74590: POP
74591: POP
// end ;
74592: PPOPN 2
74594: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
74595: LD_EXP 61
74599: PUSH
74600: LD_EXP 67
74604: AND
74605: IFFALSE 74689
74607: GO 74609
74609: DISABLE
74610: LD_INT 0
74612: PPUSH
74613: PPUSH
// begin enable ;
74614: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
74615: LD_ADDR_VAR 0 2
74619: PUSH
74620: LD_INT 22
74622: PUSH
74623: LD_OWVAR 2
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: PUSH
74632: LD_INT 32
74634: PUSH
74635: LD_INT 3
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: PUSH
74642: EMPTY
74643: LIST
74644: LIST
74645: PPUSH
74646: CALL_OW 69
74650: ST_TO_ADDR
// if not tmp then
74651: LD_VAR 0 2
74655: NOT
74656: IFFALSE 74660
// exit ;
74658: GO 74689
// for i in tmp do
74660: LD_ADDR_VAR 0 1
74664: PUSH
74665: LD_VAR 0 2
74669: PUSH
74670: FOR_IN
74671: IFFALSE 74687
// begin SetLives ( i , 0 ) ;
74673: LD_VAR 0 1
74677: PPUSH
74678: LD_INT 0
74680: PPUSH
74681: CALL_OW 234
// end ;
74685: GO 74670
74687: POP
74688: POP
// end ;
74689: PPOPN 2
74691: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
74692: LD_EXP 61
74696: PUSH
74697: LD_EXP 64
74701: AND
74702: IFFALSE 74795
74704: GO 74706
74706: DISABLE
74707: LD_INT 0
74709: PPUSH
// begin enable ;
74710: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
74711: LD_ADDR_VAR 0 1
74715: PUSH
74716: LD_INT 22
74718: PUSH
74719: LD_OWVAR 2
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PUSH
74728: LD_INT 2
74730: PUSH
74731: LD_INT 25
74733: PUSH
74734: LD_INT 5
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: PUSH
74741: LD_INT 25
74743: PUSH
74744: LD_INT 9
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PUSH
74751: LD_INT 25
74753: PUSH
74754: LD_INT 8
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PPUSH
74771: CALL_OW 69
74775: PUSH
74776: FOR_IN
74777: IFFALSE 74793
// begin SetClass ( i , 1 ) ;
74779: LD_VAR 0 1
74783: PPUSH
74784: LD_INT 1
74786: PPUSH
74787: CALL_OW 336
// end ;
74791: GO 74776
74793: POP
74794: POP
// end ;
74795: PPOPN 1
74797: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
74798: LD_EXP 61
74802: PUSH
74803: LD_EXP 65
74807: AND
74808: PUSH
74809: LD_OWVAR 65
74813: PUSH
74814: LD_INT 7
74816: LESS
74817: AND
74818: IFFALSE 74832
74820: GO 74822
74822: DISABLE
// begin enable ;
74823: ENABLE
// game_speed := 7 ;
74824: LD_ADDR_OWVAR 65
74828: PUSH
74829: LD_INT 7
74831: ST_TO_ADDR
// end ;
74832: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
74833: LD_EXP 61
74837: PUSH
74838: LD_EXP 68
74842: AND
74843: IFFALSE 75045
74845: GO 74847
74847: DISABLE
74848: LD_INT 0
74850: PPUSH
74851: PPUSH
74852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74853: LD_ADDR_VAR 0 3
74857: PUSH
74858: LD_INT 81
74860: PUSH
74861: LD_OWVAR 2
74865: PUSH
74866: EMPTY
74867: LIST
74868: LIST
74869: PUSH
74870: LD_INT 21
74872: PUSH
74873: LD_INT 1
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: PPUSH
74884: CALL_OW 69
74888: ST_TO_ADDR
// if not tmp then
74889: LD_VAR 0 3
74893: NOT
74894: IFFALSE 74898
// exit ;
74896: GO 75045
// if tmp > 5 then
74898: LD_VAR 0 3
74902: PUSH
74903: LD_INT 5
74905: GREATER
74906: IFFALSE 74918
// k := 5 else
74908: LD_ADDR_VAR 0 2
74912: PUSH
74913: LD_INT 5
74915: ST_TO_ADDR
74916: GO 74928
// k := tmp ;
74918: LD_ADDR_VAR 0 2
74922: PUSH
74923: LD_VAR 0 3
74927: ST_TO_ADDR
// for i := 1 to k do
74928: LD_ADDR_VAR 0 1
74932: PUSH
74933: DOUBLE
74934: LD_INT 1
74936: DEC
74937: ST_TO_ADDR
74938: LD_VAR 0 2
74942: PUSH
74943: FOR_TO
74944: IFFALSE 75043
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
74946: LD_VAR 0 3
74950: PUSH
74951: LD_VAR 0 1
74955: ARRAY
74956: PPUSH
74957: LD_VAR 0 1
74961: PUSH
74962: LD_INT 4
74964: MOD
74965: PUSH
74966: LD_INT 1
74968: PLUS
74969: PPUSH
74970: CALL_OW 259
74974: PUSH
74975: LD_INT 10
74977: LESS
74978: IFFALSE 75041
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
74980: LD_VAR 0 3
74984: PUSH
74985: LD_VAR 0 1
74989: ARRAY
74990: PPUSH
74991: LD_VAR 0 1
74995: PUSH
74996: LD_INT 4
74998: MOD
74999: PUSH
75000: LD_INT 1
75002: PLUS
75003: PPUSH
75004: LD_VAR 0 3
75008: PUSH
75009: LD_VAR 0 1
75013: ARRAY
75014: PPUSH
75015: LD_VAR 0 1
75019: PUSH
75020: LD_INT 4
75022: MOD
75023: PUSH
75024: LD_INT 1
75026: PLUS
75027: PPUSH
75028: CALL_OW 259
75032: PUSH
75033: LD_INT 1
75035: PLUS
75036: PPUSH
75037: CALL_OW 237
75041: GO 74943
75043: POP
75044: POP
// end ;
75045: PPOPN 3
75047: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
75048: LD_EXP 61
75052: PUSH
75053: LD_EXP 69
75057: AND
75058: IFFALSE 75078
75060: GO 75062
75062: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
75063: LD_INT 4
75065: PPUSH
75066: LD_OWVAR 2
75070: PPUSH
75071: LD_INT 0
75073: PPUSH
75074: CALL_OW 324
75078: END
// every 0 0$1 trigger StreamModeActive and sShovel do
75079: LD_EXP 61
75083: PUSH
75084: LD_EXP 98
75088: AND
75089: IFFALSE 75109
75091: GO 75093
75093: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
75094: LD_INT 19
75096: PPUSH
75097: LD_OWVAR 2
75101: PPUSH
75102: LD_INT 0
75104: PPUSH
75105: CALL_OW 324
75109: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
75110: LD_EXP 61
75114: PUSH
75115: LD_EXP 70
75119: AND
75120: IFFALSE 75222
75122: GO 75124
75124: DISABLE
75125: LD_INT 0
75127: PPUSH
75128: PPUSH
// begin enable ;
75129: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
75130: LD_ADDR_VAR 0 2
75134: PUSH
75135: LD_INT 22
75137: PUSH
75138: LD_OWVAR 2
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: LD_INT 2
75149: PUSH
75150: LD_INT 34
75152: PUSH
75153: LD_INT 11
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 34
75162: PUSH
75163: LD_INT 30
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: LIST
75174: PUSH
75175: EMPTY
75176: LIST
75177: LIST
75178: PPUSH
75179: CALL_OW 69
75183: ST_TO_ADDR
// if not tmp then
75184: LD_VAR 0 2
75188: NOT
75189: IFFALSE 75193
// exit ;
75191: GO 75222
// for i in tmp do
75193: LD_ADDR_VAR 0 1
75197: PUSH
75198: LD_VAR 0 2
75202: PUSH
75203: FOR_IN
75204: IFFALSE 75220
// begin SetLives ( i , 0 ) ;
75206: LD_VAR 0 1
75210: PPUSH
75211: LD_INT 0
75213: PPUSH
75214: CALL_OW 234
// end ;
75218: GO 75203
75220: POP
75221: POP
// end ;
75222: PPOPN 2
75224: END
// every 0 0$1 trigger StreamModeActive and sBunker do
75225: LD_EXP 61
75229: PUSH
75230: LD_EXP 71
75234: AND
75235: IFFALSE 75255
75237: GO 75239
75239: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
75240: LD_INT 32
75242: PPUSH
75243: LD_OWVAR 2
75247: PPUSH
75248: LD_INT 0
75250: PPUSH
75251: CALL_OW 324
75255: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
75256: LD_EXP 61
75260: PUSH
75261: LD_EXP 72
75265: AND
75266: IFFALSE 75447
75268: GO 75270
75270: DISABLE
75271: LD_INT 0
75273: PPUSH
75274: PPUSH
75275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
75276: LD_ADDR_VAR 0 2
75280: PUSH
75281: LD_INT 22
75283: PUSH
75284: LD_OWVAR 2
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: PUSH
75293: LD_INT 33
75295: PUSH
75296: LD_INT 3
75298: PUSH
75299: EMPTY
75300: LIST
75301: LIST
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PPUSH
75307: CALL_OW 69
75311: ST_TO_ADDR
// if not tmp then
75312: LD_VAR 0 2
75316: NOT
75317: IFFALSE 75321
// exit ;
75319: GO 75447
// side := 0 ;
75321: LD_ADDR_VAR 0 3
75325: PUSH
75326: LD_INT 0
75328: ST_TO_ADDR
// for i := 1 to 8 do
75329: LD_ADDR_VAR 0 1
75333: PUSH
75334: DOUBLE
75335: LD_INT 1
75337: DEC
75338: ST_TO_ADDR
75339: LD_INT 8
75341: PUSH
75342: FOR_TO
75343: IFFALSE 75391
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
75345: LD_OWVAR 2
75349: PUSH
75350: LD_VAR 0 1
75354: NONEQUAL
75355: PUSH
75356: LD_OWVAR 2
75360: PPUSH
75361: LD_VAR 0 1
75365: PPUSH
75366: CALL_OW 81
75370: PUSH
75371: LD_INT 2
75373: EQUAL
75374: AND
75375: IFFALSE 75389
// begin side := i ;
75377: LD_ADDR_VAR 0 3
75381: PUSH
75382: LD_VAR 0 1
75386: ST_TO_ADDR
// break ;
75387: GO 75391
// end ;
75389: GO 75342
75391: POP
75392: POP
// if not side then
75393: LD_VAR 0 3
75397: NOT
75398: IFFALSE 75402
// exit ;
75400: GO 75447
// for i := 1 to tmp do
75402: LD_ADDR_VAR 0 1
75406: PUSH
75407: DOUBLE
75408: LD_INT 1
75410: DEC
75411: ST_TO_ADDR
75412: LD_VAR 0 2
75416: PUSH
75417: FOR_TO
75418: IFFALSE 75445
// if Prob ( 60 ) then
75420: LD_INT 60
75422: PPUSH
75423: CALL_OW 13
75427: IFFALSE 75443
// SetSide ( i , side ) ;
75429: LD_VAR 0 1
75433: PPUSH
75434: LD_VAR 0 3
75438: PPUSH
75439: CALL_OW 235
75443: GO 75417
75445: POP
75446: POP
// end ;
75447: PPOPN 3
75449: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
75450: LD_EXP 61
75454: PUSH
75455: LD_EXP 74
75459: AND
75460: IFFALSE 75579
75462: GO 75464
75464: DISABLE
75465: LD_INT 0
75467: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
75468: LD_ADDR_VAR 0 1
75472: PUSH
75473: LD_INT 22
75475: PUSH
75476: LD_OWVAR 2
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: LD_INT 21
75487: PUSH
75488: LD_INT 1
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 3
75497: PUSH
75498: LD_INT 23
75500: PUSH
75501: LD_INT 0
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: PUSH
75508: EMPTY
75509: LIST
75510: LIST
75511: PUSH
75512: EMPTY
75513: LIST
75514: LIST
75515: LIST
75516: PPUSH
75517: CALL_OW 69
75521: PUSH
75522: FOR_IN
75523: IFFALSE 75577
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
75525: LD_VAR 0 1
75529: PPUSH
75530: CALL_OW 257
75534: PUSH
75535: LD_INT 1
75537: PUSH
75538: LD_INT 2
75540: PUSH
75541: LD_INT 3
75543: PUSH
75544: LD_INT 4
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: IN
75553: IFFALSE 75575
// SetClass ( un , rand ( 1 , 4 ) ) ;
75555: LD_VAR 0 1
75559: PPUSH
75560: LD_INT 1
75562: PPUSH
75563: LD_INT 4
75565: PPUSH
75566: CALL_OW 12
75570: PPUSH
75571: CALL_OW 336
75575: GO 75522
75577: POP
75578: POP
// end ;
75579: PPOPN 1
75581: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
75582: LD_EXP 61
75586: PUSH
75587: LD_EXP 73
75591: AND
75592: IFFALSE 75671
75594: GO 75596
75596: DISABLE
75597: LD_INT 0
75599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75600: LD_ADDR_VAR 0 1
75604: PUSH
75605: LD_INT 22
75607: PUSH
75608: LD_OWVAR 2
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: PUSH
75617: LD_INT 21
75619: PUSH
75620: LD_INT 3
75622: PUSH
75623: EMPTY
75624: LIST
75625: LIST
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: PPUSH
75631: CALL_OW 69
75635: ST_TO_ADDR
// if not tmp then
75636: LD_VAR 0 1
75640: NOT
75641: IFFALSE 75645
// exit ;
75643: GO 75671
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
75645: LD_VAR 0 1
75649: PUSH
75650: LD_INT 1
75652: PPUSH
75653: LD_VAR 0 1
75657: PPUSH
75658: CALL_OW 12
75662: ARRAY
75663: PPUSH
75664: LD_INT 100
75666: PPUSH
75667: CALL_OW 234
// end ;
75671: PPOPN 1
75673: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
75674: LD_EXP 61
75678: PUSH
75679: LD_EXP 75
75683: AND
75684: IFFALSE 75782
75686: GO 75688
75688: DISABLE
75689: LD_INT 0
75691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75692: LD_ADDR_VAR 0 1
75696: PUSH
75697: LD_INT 22
75699: PUSH
75700: LD_OWVAR 2
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: PUSH
75709: LD_INT 21
75711: PUSH
75712: LD_INT 1
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: PPUSH
75723: CALL_OW 69
75727: ST_TO_ADDR
// if not tmp then
75728: LD_VAR 0 1
75732: NOT
75733: IFFALSE 75737
// exit ;
75735: GO 75782
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
75737: LD_VAR 0 1
75741: PUSH
75742: LD_INT 1
75744: PPUSH
75745: LD_VAR 0 1
75749: PPUSH
75750: CALL_OW 12
75754: ARRAY
75755: PPUSH
75756: LD_INT 1
75758: PPUSH
75759: LD_INT 4
75761: PPUSH
75762: CALL_OW 12
75766: PPUSH
75767: LD_INT 3000
75769: PPUSH
75770: LD_INT 9000
75772: PPUSH
75773: CALL_OW 12
75777: PPUSH
75778: CALL_OW 492
// end ;
75782: PPOPN 1
75784: END
// every 0 0$1 trigger StreamModeActive and sDepot do
75785: LD_EXP 61
75789: PUSH
75790: LD_EXP 76
75794: AND
75795: IFFALSE 75815
75797: GO 75799
75799: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
75800: LD_INT 1
75802: PPUSH
75803: LD_OWVAR 2
75807: PPUSH
75808: LD_INT 0
75810: PPUSH
75811: CALL_OW 324
75815: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
75816: LD_EXP 61
75820: PUSH
75821: LD_EXP 77
75825: AND
75826: IFFALSE 75909
75828: GO 75830
75830: DISABLE
75831: LD_INT 0
75833: PPUSH
75834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75835: LD_ADDR_VAR 0 2
75839: PUSH
75840: LD_INT 22
75842: PUSH
75843: LD_OWVAR 2
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: PUSH
75852: LD_INT 21
75854: PUSH
75855: LD_INT 3
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: PPUSH
75866: CALL_OW 69
75870: ST_TO_ADDR
// if not tmp then
75871: LD_VAR 0 2
75875: NOT
75876: IFFALSE 75880
// exit ;
75878: GO 75909
// for i in tmp do
75880: LD_ADDR_VAR 0 1
75884: PUSH
75885: LD_VAR 0 2
75889: PUSH
75890: FOR_IN
75891: IFFALSE 75907
// SetBLevel ( i , 10 ) ;
75893: LD_VAR 0 1
75897: PPUSH
75898: LD_INT 10
75900: PPUSH
75901: CALL_OW 241
75905: GO 75890
75907: POP
75908: POP
// end ;
75909: PPOPN 2
75911: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
75912: LD_EXP 61
75916: PUSH
75917: LD_EXP 78
75921: AND
75922: IFFALSE 76033
75924: GO 75926
75926: DISABLE
75927: LD_INT 0
75929: PPUSH
75930: PPUSH
75931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75932: LD_ADDR_VAR 0 3
75936: PUSH
75937: LD_INT 22
75939: PUSH
75940: LD_OWVAR 2
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PUSH
75949: LD_INT 25
75951: PUSH
75952: LD_INT 1
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PPUSH
75963: CALL_OW 69
75967: ST_TO_ADDR
// if not tmp then
75968: LD_VAR 0 3
75972: NOT
75973: IFFALSE 75977
// exit ;
75975: GO 76033
// un := tmp [ rand ( 1 , tmp ) ] ;
75977: LD_ADDR_VAR 0 2
75981: PUSH
75982: LD_VAR 0 3
75986: PUSH
75987: LD_INT 1
75989: PPUSH
75990: LD_VAR 0 3
75994: PPUSH
75995: CALL_OW 12
75999: ARRAY
76000: ST_TO_ADDR
// if Crawls ( un ) then
76001: LD_VAR 0 2
76005: PPUSH
76006: CALL_OW 318
76010: IFFALSE 76021
// ComWalk ( un ) ;
76012: LD_VAR 0 2
76016: PPUSH
76017: CALL_OW 138
// SetClass ( un , class_sniper ) ;
76021: LD_VAR 0 2
76025: PPUSH
76026: LD_INT 5
76028: PPUSH
76029: CALL_OW 336
// end ;
76033: PPOPN 3
76035: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
76036: LD_EXP 61
76040: PUSH
76041: LD_EXP 79
76045: AND
76046: PUSH
76047: LD_OWVAR 67
76051: PUSH
76052: LD_INT 4
76054: LESS
76055: AND
76056: IFFALSE 76075
76058: GO 76060
76060: DISABLE
// begin Difficulty := Difficulty + 1 ;
76061: LD_ADDR_OWVAR 67
76065: PUSH
76066: LD_OWVAR 67
76070: PUSH
76071: LD_INT 1
76073: PLUS
76074: ST_TO_ADDR
// end ;
76075: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
76076: LD_EXP 61
76080: PUSH
76081: LD_EXP 80
76085: AND
76086: IFFALSE 76189
76088: GO 76090
76090: DISABLE
76091: LD_INT 0
76093: PPUSH
// begin for i := 1 to 5 do
76094: LD_ADDR_VAR 0 1
76098: PUSH
76099: DOUBLE
76100: LD_INT 1
76102: DEC
76103: ST_TO_ADDR
76104: LD_INT 5
76106: PUSH
76107: FOR_TO
76108: IFFALSE 76187
// begin uc_nation := nation_nature ;
76110: LD_ADDR_OWVAR 21
76114: PUSH
76115: LD_INT 0
76117: ST_TO_ADDR
// uc_side := 0 ;
76118: LD_ADDR_OWVAR 20
76122: PUSH
76123: LD_INT 0
76125: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76126: LD_ADDR_OWVAR 29
76130: PUSH
76131: LD_INT 12
76133: PUSH
76134: LD_INT 12
76136: PUSH
76137: EMPTY
76138: LIST
76139: LIST
76140: ST_TO_ADDR
// hc_agressivity := 20 ;
76141: LD_ADDR_OWVAR 35
76145: PUSH
76146: LD_INT 20
76148: ST_TO_ADDR
// hc_class := class_tiger ;
76149: LD_ADDR_OWVAR 28
76153: PUSH
76154: LD_INT 14
76156: ST_TO_ADDR
// hc_gallery :=  ;
76157: LD_ADDR_OWVAR 33
76161: PUSH
76162: LD_STRING 
76164: ST_TO_ADDR
// hc_name :=  ;
76165: LD_ADDR_OWVAR 26
76169: PUSH
76170: LD_STRING 
76172: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
76173: CALL_OW 44
76177: PPUSH
76178: LD_INT 0
76180: PPUSH
76181: CALL_OW 51
// end ;
76185: GO 76107
76187: POP
76188: POP
// end ;
76189: PPOPN 1
76191: END
// every 0 0$1 trigger StreamModeActive and sBomb do
76192: LD_EXP 61
76196: PUSH
76197: LD_EXP 81
76201: AND
76202: IFFALSE 76211
76204: GO 76206
76206: DISABLE
// StreamSibBomb ;
76207: CALL 76212 0 0
76211: END
// export function StreamSibBomb ; var i , x , y ; begin
76212: LD_INT 0
76214: PPUSH
76215: PPUSH
76216: PPUSH
76217: PPUSH
// result := false ;
76218: LD_ADDR_VAR 0 1
76222: PUSH
76223: LD_INT 0
76225: ST_TO_ADDR
// for i := 1 to 16 do
76226: LD_ADDR_VAR 0 2
76230: PUSH
76231: DOUBLE
76232: LD_INT 1
76234: DEC
76235: ST_TO_ADDR
76236: LD_INT 16
76238: PUSH
76239: FOR_TO
76240: IFFALSE 76439
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76242: LD_ADDR_VAR 0 3
76246: PUSH
76247: LD_INT 10
76249: PUSH
76250: LD_INT 20
76252: PUSH
76253: LD_INT 30
76255: PUSH
76256: LD_INT 40
76258: PUSH
76259: LD_INT 50
76261: PUSH
76262: LD_INT 60
76264: PUSH
76265: LD_INT 70
76267: PUSH
76268: LD_INT 80
76270: PUSH
76271: LD_INT 90
76273: PUSH
76274: LD_INT 100
76276: PUSH
76277: LD_INT 110
76279: PUSH
76280: LD_INT 120
76282: PUSH
76283: LD_INT 130
76285: PUSH
76286: LD_INT 140
76288: PUSH
76289: LD_INT 150
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: LIST
76296: LIST
76297: LIST
76298: LIST
76299: LIST
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: LIST
76305: LIST
76306: LIST
76307: LIST
76308: PUSH
76309: LD_INT 1
76311: PPUSH
76312: LD_INT 15
76314: PPUSH
76315: CALL_OW 12
76319: ARRAY
76320: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76321: LD_ADDR_VAR 0 4
76325: PUSH
76326: LD_INT 10
76328: PUSH
76329: LD_INT 20
76331: PUSH
76332: LD_INT 30
76334: PUSH
76335: LD_INT 40
76337: PUSH
76338: LD_INT 50
76340: PUSH
76341: LD_INT 60
76343: PUSH
76344: LD_INT 70
76346: PUSH
76347: LD_INT 80
76349: PUSH
76350: LD_INT 90
76352: PUSH
76353: LD_INT 100
76355: PUSH
76356: LD_INT 110
76358: PUSH
76359: LD_INT 120
76361: PUSH
76362: LD_INT 130
76364: PUSH
76365: LD_INT 140
76367: PUSH
76368: LD_INT 150
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: LIST
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: PUSH
76388: LD_INT 1
76390: PPUSH
76391: LD_INT 15
76393: PPUSH
76394: CALL_OW 12
76398: ARRAY
76399: ST_TO_ADDR
// if ValidHex ( x , y ) then
76400: LD_VAR 0 3
76404: PPUSH
76405: LD_VAR 0 4
76409: PPUSH
76410: CALL_OW 488
76414: IFFALSE 76437
// begin result := [ x , y ] ;
76416: LD_ADDR_VAR 0 1
76420: PUSH
76421: LD_VAR 0 3
76425: PUSH
76426: LD_VAR 0 4
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: ST_TO_ADDR
// break ;
76435: GO 76439
// end ; end ;
76437: GO 76239
76439: POP
76440: POP
// if result then
76441: LD_VAR 0 1
76445: IFFALSE 76505
// begin ToLua ( playSibBomb() ) ;
76447: LD_STRING playSibBomb()
76449: PPUSH
76450: CALL_OW 559
// wait ( 0 0$14 ) ;
76454: LD_INT 490
76456: PPUSH
76457: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
76461: LD_VAR 0 1
76465: PUSH
76466: LD_INT 1
76468: ARRAY
76469: PPUSH
76470: LD_VAR 0 1
76474: PUSH
76475: LD_INT 2
76477: ARRAY
76478: PPUSH
76479: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
76483: LD_VAR 0 1
76487: PUSH
76488: LD_INT 1
76490: ARRAY
76491: PPUSH
76492: LD_VAR 0 1
76496: PUSH
76497: LD_INT 2
76499: ARRAY
76500: PPUSH
76501: CALL_OW 429
// end ; end ;
76505: LD_VAR 0 1
76509: RET
// every 0 0$1 trigger StreamModeActive and sReset do
76510: LD_EXP 61
76514: PUSH
76515: LD_EXP 83
76519: AND
76520: IFFALSE 76532
76522: GO 76524
76524: DISABLE
// YouLost (  ) ;
76525: LD_STRING 
76527: PPUSH
76528: CALL_OW 104
76532: END
// every 0 0$1 trigger StreamModeActive and sFog do
76533: LD_EXP 61
76537: PUSH
76538: LD_EXP 82
76542: AND
76543: IFFALSE 76557
76545: GO 76547
76547: DISABLE
// FogOff ( your_side ) ;
76548: LD_OWVAR 2
76552: PPUSH
76553: CALL_OW 344
76557: END
// every 0 0$1 trigger StreamModeActive and sSun do
76558: LD_EXP 61
76562: PUSH
76563: LD_EXP 84
76567: AND
76568: IFFALSE 76596
76570: GO 76572
76572: DISABLE
// begin solar_recharge_percent := 0 ;
76573: LD_ADDR_OWVAR 79
76577: PUSH
76578: LD_INT 0
76580: ST_TO_ADDR
// wait ( 5 5$00 ) ;
76581: LD_INT 10500
76583: PPUSH
76584: CALL_OW 67
// solar_recharge_percent := 100 ;
76588: LD_ADDR_OWVAR 79
76592: PUSH
76593: LD_INT 100
76595: ST_TO_ADDR
// end ;
76596: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
76597: LD_EXP 61
76601: PUSH
76602: LD_EXP 85
76606: AND
76607: IFFALSE 76846
76609: GO 76611
76611: DISABLE
76612: LD_INT 0
76614: PPUSH
76615: PPUSH
76616: PPUSH
// begin tmp := [ ] ;
76617: LD_ADDR_VAR 0 3
76621: PUSH
76622: EMPTY
76623: ST_TO_ADDR
// for i := 1 to 6 do
76624: LD_ADDR_VAR 0 1
76628: PUSH
76629: DOUBLE
76630: LD_INT 1
76632: DEC
76633: ST_TO_ADDR
76634: LD_INT 6
76636: PUSH
76637: FOR_TO
76638: IFFALSE 76743
// begin uc_nation := nation_nature ;
76640: LD_ADDR_OWVAR 21
76644: PUSH
76645: LD_INT 0
76647: ST_TO_ADDR
// uc_side := 0 ;
76648: LD_ADDR_OWVAR 20
76652: PUSH
76653: LD_INT 0
76655: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76656: LD_ADDR_OWVAR 29
76660: PUSH
76661: LD_INT 12
76663: PUSH
76664: LD_INT 12
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: ST_TO_ADDR
// hc_agressivity := 20 ;
76671: LD_ADDR_OWVAR 35
76675: PUSH
76676: LD_INT 20
76678: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
76679: LD_ADDR_OWVAR 28
76683: PUSH
76684: LD_INT 17
76686: ST_TO_ADDR
// hc_gallery :=  ;
76687: LD_ADDR_OWVAR 33
76691: PUSH
76692: LD_STRING 
76694: ST_TO_ADDR
// hc_name :=  ;
76695: LD_ADDR_OWVAR 26
76699: PUSH
76700: LD_STRING 
76702: ST_TO_ADDR
// un := CreateHuman ;
76703: LD_ADDR_VAR 0 2
76707: PUSH
76708: CALL_OW 44
76712: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
76713: LD_VAR 0 2
76717: PPUSH
76718: LD_INT 1
76720: PPUSH
76721: CALL_OW 51
// tmp := tmp ^ un ;
76725: LD_ADDR_VAR 0 3
76729: PUSH
76730: LD_VAR 0 3
76734: PUSH
76735: LD_VAR 0 2
76739: ADD
76740: ST_TO_ADDR
// end ;
76741: GO 76637
76743: POP
76744: POP
// repeat wait ( 0 0$1 ) ;
76745: LD_INT 35
76747: PPUSH
76748: CALL_OW 67
// for un in tmp do
76752: LD_ADDR_VAR 0 2
76756: PUSH
76757: LD_VAR 0 3
76761: PUSH
76762: FOR_IN
76763: IFFALSE 76837
// begin if IsDead ( un ) then
76765: LD_VAR 0 2
76769: PPUSH
76770: CALL_OW 301
76774: IFFALSE 76794
// begin tmp := tmp diff un ;
76776: LD_ADDR_VAR 0 3
76780: PUSH
76781: LD_VAR 0 3
76785: PUSH
76786: LD_VAR 0 2
76790: DIFF
76791: ST_TO_ADDR
// continue ;
76792: GO 76762
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
76794: LD_VAR 0 2
76798: PPUSH
76799: LD_INT 3
76801: PUSH
76802: LD_INT 22
76804: PUSH
76805: LD_INT 0
76807: PUSH
76808: EMPTY
76809: LIST
76810: LIST
76811: PUSH
76812: EMPTY
76813: LIST
76814: LIST
76815: PPUSH
76816: CALL_OW 69
76820: PPUSH
76821: LD_VAR 0 2
76825: PPUSH
76826: CALL_OW 74
76830: PPUSH
76831: CALL_OW 115
// end ;
76835: GO 76762
76837: POP
76838: POP
// until not tmp ;
76839: LD_VAR 0 3
76843: NOT
76844: IFFALSE 76745
// end ;
76846: PPOPN 3
76848: END
// every 0 0$1 trigger StreamModeActive and sTroll do
76849: LD_EXP 61
76853: PUSH
76854: LD_EXP 86
76858: AND
76859: IFFALSE 76913
76861: GO 76863
76863: DISABLE
// begin ToLua ( displayTroll(); ) ;
76864: LD_STRING displayTroll();
76866: PPUSH
76867: CALL_OW 559
// wait ( 3 3$00 ) ;
76871: LD_INT 6300
76873: PPUSH
76874: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76878: LD_STRING hideTroll();
76880: PPUSH
76881: CALL_OW 559
// wait ( 1 1$00 ) ;
76885: LD_INT 2100
76887: PPUSH
76888: CALL_OW 67
// ToLua ( displayTroll(); ) ;
76892: LD_STRING displayTroll();
76894: PPUSH
76895: CALL_OW 559
// wait ( 1 1$00 ) ;
76899: LD_INT 2100
76901: PPUSH
76902: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76906: LD_STRING hideTroll();
76908: PPUSH
76909: CALL_OW 559
// end ;
76913: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
76914: LD_EXP 61
76918: PUSH
76919: LD_EXP 87
76923: AND
76924: IFFALSE 76987
76926: GO 76928
76928: DISABLE
76929: LD_INT 0
76931: PPUSH
// begin p := 0 ;
76932: LD_ADDR_VAR 0 1
76936: PUSH
76937: LD_INT 0
76939: ST_TO_ADDR
// repeat game_speed := 1 ;
76940: LD_ADDR_OWVAR 65
76944: PUSH
76945: LD_INT 1
76947: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76948: LD_INT 35
76950: PPUSH
76951: CALL_OW 67
// p := p + 1 ;
76955: LD_ADDR_VAR 0 1
76959: PUSH
76960: LD_VAR 0 1
76964: PUSH
76965: LD_INT 1
76967: PLUS
76968: ST_TO_ADDR
// until p >= 60 ;
76969: LD_VAR 0 1
76973: PUSH
76974: LD_INT 60
76976: GREATEREQUAL
76977: IFFALSE 76940
// game_speed := 4 ;
76979: LD_ADDR_OWVAR 65
76983: PUSH
76984: LD_INT 4
76986: ST_TO_ADDR
// end ;
76987: PPOPN 1
76989: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
76990: LD_EXP 61
76994: PUSH
76995: LD_EXP 88
76999: AND
77000: IFFALSE 77146
77002: GO 77004
77004: DISABLE
77005: LD_INT 0
77007: PPUSH
77008: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77009: LD_ADDR_VAR 0 1
77013: PUSH
77014: LD_INT 22
77016: PUSH
77017: LD_OWVAR 2
77021: PUSH
77022: EMPTY
77023: LIST
77024: LIST
77025: PUSH
77026: LD_INT 2
77028: PUSH
77029: LD_INT 30
77031: PUSH
77032: LD_INT 0
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: PUSH
77039: LD_INT 30
77041: PUSH
77042: LD_INT 1
77044: PUSH
77045: EMPTY
77046: LIST
77047: LIST
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: LIST
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PPUSH
77058: CALL_OW 69
77062: ST_TO_ADDR
// if not depot then
77063: LD_VAR 0 1
77067: NOT
77068: IFFALSE 77072
// exit ;
77070: GO 77146
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
77072: LD_ADDR_VAR 0 2
77076: PUSH
77077: LD_VAR 0 1
77081: PUSH
77082: LD_INT 1
77084: PPUSH
77085: LD_VAR 0 1
77089: PPUSH
77090: CALL_OW 12
77094: ARRAY
77095: PPUSH
77096: CALL_OW 274
77100: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
77101: LD_VAR 0 2
77105: PPUSH
77106: LD_INT 1
77108: PPUSH
77109: LD_INT 0
77111: PPUSH
77112: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
77116: LD_VAR 0 2
77120: PPUSH
77121: LD_INT 2
77123: PPUSH
77124: LD_INT 0
77126: PPUSH
77127: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
77131: LD_VAR 0 2
77135: PPUSH
77136: LD_INT 3
77138: PPUSH
77139: LD_INT 0
77141: PPUSH
77142: CALL_OW 277
// end ;
77146: PPOPN 2
77148: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
77149: LD_EXP 61
77153: PUSH
77154: LD_EXP 89
77158: AND
77159: IFFALSE 77256
77161: GO 77163
77163: DISABLE
77164: LD_INT 0
77166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77167: LD_ADDR_VAR 0 1
77171: PUSH
77172: LD_INT 22
77174: PUSH
77175: LD_OWVAR 2
77179: PUSH
77180: EMPTY
77181: LIST
77182: LIST
77183: PUSH
77184: LD_INT 21
77186: PUSH
77187: LD_INT 1
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: PUSH
77194: LD_INT 3
77196: PUSH
77197: LD_INT 23
77199: PUSH
77200: LD_INT 0
77202: PUSH
77203: EMPTY
77204: LIST
77205: LIST
77206: PUSH
77207: EMPTY
77208: LIST
77209: LIST
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: LIST
77215: PPUSH
77216: CALL_OW 69
77220: ST_TO_ADDR
// if not tmp then
77221: LD_VAR 0 1
77225: NOT
77226: IFFALSE 77230
// exit ;
77228: GO 77256
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
77230: LD_VAR 0 1
77234: PUSH
77235: LD_INT 1
77237: PPUSH
77238: LD_VAR 0 1
77242: PPUSH
77243: CALL_OW 12
77247: ARRAY
77248: PPUSH
77249: LD_INT 200
77251: PPUSH
77252: CALL_OW 234
// end ;
77256: PPOPN 1
77258: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
77259: LD_EXP 61
77263: PUSH
77264: LD_EXP 90
77268: AND
77269: IFFALSE 77348
77271: GO 77273
77273: DISABLE
77274: LD_INT 0
77276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
77277: LD_ADDR_VAR 0 1
77281: PUSH
77282: LD_INT 22
77284: PUSH
77285: LD_OWVAR 2
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: PUSH
77294: LD_INT 21
77296: PUSH
77297: LD_INT 2
77299: PUSH
77300: EMPTY
77301: LIST
77302: LIST
77303: PUSH
77304: EMPTY
77305: LIST
77306: LIST
77307: PPUSH
77308: CALL_OW 69
77312: ST_TO_ADDR
// if not tmp then
77313: LD_VAR 0 1
77317: NOT
77318: IFFALSE 77322
// exit ;
77320: GO 77348
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
77322: LD_VAR 0 1
77326: PUSH
77327: LD_INT 1
77329: PPUSH
77330: LD_VAR 0 1
77334: PPUSH
77335: CALL_OW 12
77339: ARRAY
77340: PPUSH
77341: LD_INT 60
77343: PPUSH
77344: CALL_OW 234
// end ;
77348: PPOPN 1
77350: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
77351: LD_EXP 61
77355: PUSH
77356: LD_EXP 91
77360: AND
77361: IFFALSE 77460
77363: GO 77365
77365: DISABLE
77366: LD_INT 0
77368: PPUSH
77369: PPUSH
// begin enable ;
77370: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
77371: LD_ADDR_VAR 0 1
77375: PUSH
77376: LD_INT 22
77378: PUSH
77379: LD_OWVAR 2
77383: PUSH
77384: EMPTY
77385: LIST
77386: LIST
77387: PUSH
77388: LD_INT 61
77390: PUSH
77391: EMPTY
77392: LIST
77393: PUSH
77394: LD_INT 33
77396: PUSH
77397: LD_INT 2
77399: PUSH
77400: EMPTY
77401: LIST
77402: LIST
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: LIST
77408: PPUSH
77409: CALL_OW 69
77413: ST_TO_ADDR
// if not tmp then
77414: LD_VAR 0 1
77418: NOT
77419: IFFALSE 77423
// exit ;
77421: GO 77460
// for i in tmp do
77423: LD_ADDR_VAR 0 2
77427: PUSH
77428: LD_VAR 0 1
77432: PUSH
77433: FOR_IN
77434: IFFALSE 77458
// if IsControledBy ( i ) then
77436: LD_VAR 0 2
77440: PPUSH
77441: CALL_OW 312
77445: IFFALSE 77456
// ComUnlink ( i ) ;
77447: LD_VAR 0 2
77451: PPUSH
77452: CALL_OW 136
77456: GO 77433
77458: POP
77459: POP
// end ;
77460: PPOPN 2
77462: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
77463: LD_EXP 61
77467: PUSH
77468: LD_EXP 92
77472: AND
77473: IFFALSE 77613
77475: GO 77477
77477: DISABLE
77478: LD_INT 0
77480: PPUSH
77481: PPUSH
// begin ToLua ( displayPowell(); ) ;
77482: LD_STRING displayPowell();
77484: PPUSH
77485: CALL_OW 559
// uc_side := 0 ;
77489: LD_ADDR_OWVAR 20
77493: PUSH
77494: LD_INT 0
77496: ST_TO_ADDR
// uc_nation := 2 ;
77497: LD_ADDR_OWVAR 21
77501: PUSH
77502: LD_INT 2
77504: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
77505: LD_ADDR_OWVAR 37
77509: PUSH
77510: LD_INT 14
77512: ST_TO_ADDR
// vc_engine := engine_siberite ;
77513: LD_ADDR_OWVAR 39
77517: PUSH
77518: LD_INT 3
77520: ST_TO_ADDR
// vc_control := control_apeman ;
77521: LD_ADDR_OWVAR 38
77525: PUSH
77526: LD_INT 5
77528: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
77529: LD_ADDR_OWVAR 40
77533: PUSH
77534: LD_INT 29
77536: ST_TO_ADDR
// un := CreateVehicle ;
77537: LD_ADDR_VAR 0 2
77541: PUSH
77542: CALL_OW 45
77546: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77547: LD_VAR 0 2
77551: PPUSH
77552: LD_INT 1
77554: PPUSH
77555: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77559: LD_INT 35
77561: PPUSH
77562: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77566: LD_VAR 0 2
77570: PPUSH
77571: LD_INT 22
77573: PUSH
77574: LD_OWVAR 2
77578: PUSH
77579: EMPTY
77580: LIST
77581: LIST
77582: PPUSH
77583: CALL_OW 69
77587: PPUSH
77588: LD_VAR 0 2
77592: PPUSH
77593: CALL_OW 74
77597: PPUSH
77598: CALL_OW 115
// until IsDead ( un ) ;
77602: LD_VAR 0 2
77606: PPUSH
77607: CALL_OW 301
77611: IFFALSE 77559
// end ;
77613: PPOPN 2
77615: END
// every 0 0$1 trigger StreamModeActive and sStu do
77616: LD_EXP 61
77620: PUSH
77621: LD_EXP 100
77625: AND
77626: IFFALSE 77642
77628: GO 77630
77630: DISABLE
// begin ToLua ( displayStucuk(); ) ;
77631: LD_STRING displayStucuk();
77633: PPUSH
77634: CALL_OW 559
// ResetFog ;
77638: CALL_OW 335
// end ;
77642: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
77643: LD_EXP 61
77647: PUSH
77648: LD_EXP 93
77652: AND
77653: IFFALSE 77794
77655: GO 77657
77657: DISABLE
77658: LD_INT 0
77660: PPUSH
77661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77662: LD_ADDR_VAR 0 2
77666: PUSH
77667: LD_INT 22
77669: PUSH
77670: LD_OWVAR 2
77674: PUSH
77675: EMPTY
77676: LIST
77677: LIST
77678: PUSH
77679: LD_INT 21
77681: PUSH
77682: LD_INT 1
77684: PUSH
77685: EMPTY
77686: LIST
77687: LIST
77688: PUSH
77689: EMPTY
77690: LIST
77691: LIST
77692: PPUSH
77693: CALL_OW 69
77697: ST_TO_ADDR
// if not tmp then
77698: LD_VAR 0 2
77702: NOT
77703: IFFALSE 77707
// exit ;
77705: GO 77794
// un := tmp [ rand ( 1 , tmp ) ] ;
77707: LD_ADDR_VAR 0 1
77711: PUSH
77712: LD_VAR 0 2
77716: PUSH
77717: LD_INT 1
77719: PPUSH
77720: LD_VAR 0 2
77724: PPUSH
77725: CALL_OW 12
77729: ARRAY
77730: ST_TO_ADDR
// SetSide ( un , 0 ) ;
77731: LD_VAR 0 1
77735: PPUSH
77736: LD_INT 0
77738: PPUSH
77739: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
77743: LD_VAR 0 1
77747: PPUSH
77748: LD_OWVAR 3
77752: PUSH
77753: LD_VAR 0 1
77757: DIFF
77758: PPUSH
77759: LD_VAR 0 1
77763: PPUSH
77764: CALL_OW 74
77768: PPUSH
77769: CALL_OW 115
// wait ( 0 0$20 ) ;
77773: LD_INT 700
77775: PPUSH
77776: CALL_OW 67
// SetSide ( un , your_side ) ;
77780: LD_VAR 0 1
77784: PPUSH
77785: LD_OWVAR 2
77789: PPUSH
77790: CALL_OW 235
// end ;
77794: PPOPN 2
77796: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
77797: LD_EXP 61
77801: PUSH
77802: LD_EXP 94
77806: AND
77807: IFFALSE 77913
77809: GO 77811
77811: DISABLE
77812: LD_INT 0
77814: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77815: LD_ADDR_VAR 0 1
77819: PUSH
77820: LD_INT 22
77822: PUSH
77823: LD_OWVAR 2
77827: PUSH
77828: EMPTY
77829: LIST
77830: LIST
77831: PUSH
77832: LD_INT 2
77834: PUSH
77835: LD_INT 30
77837: PUSH
77838: LD_INT 0
77840: PUSH
77841: EMPTY
77842: LIST
77843: LIST
77844: PUSH
77845: LD_INT 30
77847: PUSH
77848: LD_INT 1
77850: PUSH
77851: EMPTY
77852: LIST
77853: LIST
77854: PUSH
77855: EMPTY
77856: LIST
77857: LIST
77858: LIST
77859: PUSH
77860: EMPTY
77861: LIST
77862: LIST
77863: PPUSH
77864: CALL_OW 69
77868: ST_TO_ADDR
// if not depot then
77869: LD_VAR 0 1
77873: NOT
77874: IFFALSE 77878
// exit ;
77876: GO 77913
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
77878: LD_VAR 0 1
77882: PUSH
77883: LD_INT 1
77885: ARRAY
77886: PPUSH
77887: CALL_OW 250
77891: PPUSH
77892: LD_VAR 0 1
77896: PUSH
77897: LD_INT 1
77899: ARRAY
77900: PPUSH
77901: CALL_OW 251
77905: PPUSH
77906: LD_INT 70
77908: PPUSH
77909: CALL_OW 495
// end ;
77913: PPOPN 1
77915: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
77916: LD_EXP 61
77920: PUSH
77921: LD_EXP 95
77925: AND
77926: IFFALSE 78137
77928: GO 77930
77930: DISABLE
77931: LD_INT 0
77933: PPUSH
77934: PPUSH
77935: PPUSH
77936: PPUSH
77937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77938: LD_ADDR_VAR 0 5
77942: PUSH
77943: LD_INT 22
77945: PUSH
77946: LD_OWVAR 2
77950: PUSH
77951: EMPTY
77952: LIST
77953: LIST
77954: PUSH
77955: LD_INT 21
77957: PUSH
77958: LD_INT 1
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: PPUSH
77969: CALL_OW 69
77973: ST_TO_ADDR
// if not tmp then
77974: LD_VAR 0 5
77978: NOT
77979: IFFALSE 77983
// exit ;
77981: GO 78137
// for i in tmp do
77983: LD_ADDR_VAR 0 1
77987: PUSH
77988: LD_VAR 0 5
77992: PUSH
77993: FOR_IN
77994: IFFALSE 78135
// begin d := rand ( 0 , 5 ) ;
77996: LD_ADDR_VAR 0 4
78000: PUSH
78001: LD_INT 0
78003: PPUSH
78004: LD_INT 5
78006: PPUSH
78007: CALL_OW 12
78011: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
78012: LD_ADDR_VAR 0 2
78016: PUSH
78017: LD_VAR 0 1
78021: PPUSH
78022: CALL_OW 250
78026: PPUSH
78027: LD_VAR 0 4
78031: PPUSH
78032: LD_INT 3
78034: PPUSH
78035: LD_INT 12
78037: PPUSH
78038: CALL_OW 12
78042: PPUSH
78043: CALL_OW 272
78047: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
78048: LD_ADDR_VAR 0 3
78052: PUSH
78053: LD_VAR 0 1
78057: PPUSH
78058: CALL_OW 251
78062: PPUSH
78063: LD_VAR 0 4
78067: PPUSH
78068: LD_INT 3
78070: PPUSH
78071: LD_INT 12
78073: PPUSH
78074: CALL_OW 12
78078: PPUSH
78079: CALL_OW 273
78083: ST_TO_ADDR
// if ValidHex ( x , y ) then
78084: LD_VAR 0 2
78088: PPUSH
78089: LD_VAR 0 3
78093: PPUSH
78094: CALL_OW 488
78098: IFFALSE 78133
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
78100: LD_VAR 0 1
78104: PPUSH
78105: LD_VAR 0 2
78109: PPUSH
78110: LD_VAR 0 3
78114: PPUSH
78115: LD_INT 3
78117: PPUSH
78118: LD_INT 6
78120: PPUSH
78121: CALL_OW 12
78125: PPUSH
78126: LD_INT 1
78128: PPUSH
78129: CALL_OW 483
// end ;
78133: GO 77993
78135: POP
78136: POP
// end ;
78137: PPOPN 5
78139: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
78140: LD_EXP 61
78144: PUSH
78145: LD_EXP 96
78149: AND
78150: IFFALSE 78244
78152: GO 78154
78154: DISABLE
78155: LD_INT 0
78157: PPUSH
78158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
78159: LD_ADDR_VAR 0 2
78163: PUSH
78164: LD_INT 22
78166: PUSH
78167: LD_OWVAR 2
78171: PUSH
78172: EMPTY
78173: LIST
78174: LIST
78175: PUSH
78176: LD_INT 32
78178: PUSH
78179: LD_INT 1
78181: PUSH
78182: EMPTY
78183: LIST
78184: LIST
78185: PUSH
78186: LD_INT 21
78188: PUSH
78189: LD_INT 2
78191: PUSH
78192: EMPTY
78193: LIST
78194: LIST
78195: PUSH
78196: EMPTY
78197: LIST
78198: LIST
78199: LIST
78200: PPUSH
78201: CALL_OW 69
78205: ST_TO_ADDR
// if not tmp then
78206: LD_VAR 0 2
78210: NOT
78211: IFFALSE 78215
// exit ;
78213: GO 78244
// for i in tmp do
78215: LD_ADDR_VAR 0 1
78219: PUSH
78220: LD_VAR 0 2
78224: PUSH
78225: FOR_IN
78226: IFFALSE 78242
// SetFuel ( i , 0 ) ;
78228: LD_VAR 0 1
78232: PPUSH
78233: LD_INT 0
78235: PPUSH
78236: CALL_OW 240
78240: GO 78225
78242: POP
78243: POP
// end ;
78244: PPOPN 2
78246: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
78247: LD_EXP 61
78251: PUSH
78252: LD_EXP 97
78256: AND
78257: IFFALSE 78323
78259: GO 78261
78261: DISABLE
78262: LD_INT 0
78264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78265: LD_ADDR_VAR 0 1
78269: PUSH
78270: LD_INT 22
78272: PUSH
78273: LD_OWVAR 2
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: LD_INT 30
78284: PUSH
78285: LD_INT 29
78287: PUSH
78288: EMPTY
78289: LIST
78290: LIST
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: PPUSH
78296: CALL_OW 69
78300: ST_TO_ADDR
// if not tmp then
78301: LD_VAR 0 1
78305: NOT
78306: IFFALSE 78310
// exit ;
78308: GO 78323
// DestroyUnit ( tmp [ 1 ] ) ;
78310: LD_VAR 0 1
78314: PUSH
78315: LD_INT 1
78317: ARRAY
78318: PPUSH
78319: CALL_OW 65
// end ;
78323: PPOPN 1
78325: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
78326: LD_EXP 61
78330: PUSH
78331: LD_EXP 99
78335: AND
78336: IFFALSE 78465
78338: GO 78340
78340: DISABLE
78341: LD_INT 0
78343: PPUSH
// begin uc_side := 0 ;
78344: LD_ADDR_OWVAR 20
78348: PUSH
78349: LD_INT 0
78351: ST_TO_ADDR
// uc_nation := nation_arabian ;
78352: LD_ADDR_OWVAR 21
78356: PUSH
78357: LD_INT 2
78359: ST_TO_ADDR
// hc_gallery :=  ;
78360: LD_ADDR_OWVAR 33
78364: PUSH
78365: LD_STRING 
78367: ST_TO_ADDR
// hc_name :=  ;
78368: LD_ADDR_OWVAR 26
78372: PUSH
78373: LD_STRING 
78375: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
78376: LD_INT 1
78378: PPUSH
78379: LD_INT 11
78381: PPUSH
78382: LD_INT 10
78384: PPUSH
78385: CALL_OW 380
// un := CreateHuman ;
78389: LD_ADDR_VAR 0 1
78393: PUSH
78394: CALL_OW 44
78398: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78399: LD_VAR 0 1
78403: PPUSH
78404: LD_INT 1
78406: PPUSH
78407: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78411: LD_INT 35
78413: PPUSH
78414: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78418: LD_VAR 0 1
78422: PPUSH
78423: LD_INT 22
78425: PUSH
78426: LD_OWVAR 2
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: PPUSH
78435: CALL_OW 69
78439: PPUSH
78440: LD_VAR 0 1
78444: PPUSH
78445: CALL_OW 74
78449: PPUSH
78450: CALL_OW 115
// until IsDead ( un ) ;
78454: LD_VAR 0 1
78458: PPUSH
78459: CALL_OW 301
78463: IFFALSE 78411
// end ;
78465: PPOPN 1
78467: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
78468: LD_EXP 61
78472: PUSH
78473: LD_EXP 101
78477: AND
78478: IFFALSE 78490
78480: GO 78482
78482: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
78483: LD_STRING earthquake(getX(game), 0, 32)
78485: PPUSH
78486: CALL_OW 559
78490: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
78491: LD_EXP 61
78495: PUSH
78496: LD_EXP 102
78500: AND
78501: IFFALSE 78592
78503: GO 78505
78505: DISABLE
78506: LD_INT 0
78508: PPUSH
// begin enable ;
78509: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
78510: LD_ADDR_VAR 0 1
78514: PUSH
78515: LD_INT 22
78517: PUSH
78518: LD_OWVAR 2
78522: PUSH
78523: EMPTY
78524: LIST
78525: LIST
78526: PUSH
78527: LD_INT 21
78529: PUSH
78530: LD_INT 2
78532: PUSH
78533: EMPTY
78534: LIST
78535: LIST
78536: PUSH
78537: LD_INT 33
78539: PUSH
78540: LD_INT 3
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: PUSH
78547: EMPTY
78548: LIST
78549: LIST
78550: LIST
78551: PPUSH
78552: CALL_OW 69
78556: ST_TO_ADDR
// if not tmp then
78557: LD_VAR 0 1
78561: NOT
78562: IFFALSE 78566
// exit ;
78564: GO 78592
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78566: LD_VAR 0 1
78570: PUSH
78571: LD_INT 1
78573: PPUSH
78574: LD_VAR 0 1
78578: PPUSH
78579: CALL_OW 12
78583: ARRAY
78584: PPUSH
78585: LD_INT 1
78587: PPUSH
78588: CALL_OW 234
// end ;
78592: PPOPN 1
78594: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
78595: LD_EXP 61
78599: PUSH
78600: LD_EXP 103
78604: AND
78605: IFFALSE 78746
78607: GO 78609
78609: DISABLE
78610: LD_INT 0
78612: PPUSH
78613: PPUSH
78614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78615: LD_ADDR_VAR 0 3
78619: PUSH
78620: LD_INT 22
78622: PUSH
78623: LD_OWVAR 2
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 25
78634: PUSH
78635: LD_INT 1
78637: PUSH
78638: EMPTY
78639: LIST
78640: LIST
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: PPUSH
78646: CALL_OW 69
78650: ST_TO_ADDR
// if not tmp then
78651: LD_VAR 0 3
78655: NOT
78656: IFFALSE 78660
// exit ;
78658: GO 78746
// un := tmp [ rand ( 1 , tmp ) ] ;
78660: LD_ADDR_VAR 0 2
78664: PUSH
78665: LD_VAR 0 3
78669: PUSH
78670: LD_INT 1
78672: PPUSH
78673: LD_VAR 0 3
78677: PPUSH
78678: CALL_OW 12
78682: ARRAY
78683: ST_TO_ADDR
// if Crawls ( un ) then
78684: LD_VAR 0 2
78688: PPUSH
78689: CALL_OW 318
78693: IFFALSE 78704
// ComWalk ( un ) ;
78695: LD_VAR 0 2
78699: PPUSH
78700: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
78704: LD_VAR 0 2
78708: PPUSH
78709: LD_INT 9
78711: PPUSH
78712: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
78716: LD_INT 28
78718: PPUSH
78719: LD_OWVAR 2
78723: PPUSH
78724: LD_INT 2
78726: PPUSH
78727: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
78731: LD_INT 29
78733: PPUSH
78734: LD_OWVAR 2
78738: PPUSH
78739: LD_INT 2
78741: PPUSH
78742: CALL_OW 322
// end ;
78746: PPOPN 3
78748: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
78749: LD_EXP 61
78753: PUSH
78754: LD_EXP 104
78758: AND
78759: IFFALSE 78870
78761: GO 78763
78763: DISABLE
78764: LD_INT 0
78766: PPUSH
78767: PPUSH
78768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78769: LD_ADDR_VAR 0 3
78773: PUSH
78774: LD_INT 22
78776: PUSH
78777: LD_OWVAR 2
78781: PUSH
78782: EMPTY
78783: LIST
78784: LIST
78785: PUSH
78786: LD_INT 25
78788: PUSH
78789: LD_INT 1
78791: PUSH
78792: EMPTY
78793: LIST
78794: LIST
78795: PUSH
78796: EMPTY
78797: LIST
78798: LIST
78799: PPUSH
78800: CALL_OW 69
78804: ST_TO_ADDR
// if not tmp then
78805: LD_VAR 0 3
78809: NOT
78810: IFFALSE 78814
// exit ;
78812: GO 78870
// un := tmp [ rand ( 1 , tmp ) ] ;
78814: LD_ADDR_VAR 0 2
78818: PUSH
78819: LD_VAR 0 3
78823: PUSH
78824: LD_INT 1
78826: PPUSH
78827: LD_VAR 0 3
78831: PPUSH
78832: CALL_OW 12
78836: ARRAY
78837: ST_TO_ADDR
// if Crawls ( un ) then
78838: LD_VAR 0 2
78842: PPUSH
78843: CALL_OW 318
78847: IFFALSE 78858
// ComWalk ( un ) ;
78849: LD_VAR 0 2
78853: PPUSH
78854: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78858: LD_VAR 0 2
78862: PPUSH
78863: LD_INT 8
78865: PPUSH
78866: CALL_OW 336
// end ;
78870: PPOPN 3
78872: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
78873: LD_EXP 61
78877: PUSH
78878: LD_EXP 105
78882: AND
78883: IFFALSE 79027
78885: GO 78887
78887: DISABLE
78888: LD_INT 0
78890: PPUSH
78891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
78892: LD_ADDR_VAR 0 2
78896: PUSH
78897: LD_INT 22
78899: PUSH
78900: LD_OWVAR 2
78904: PUSH
78905: EMPTY
78906: LIST
78907: LIST
78908: PUSH
78909: LD_INT 21
78911: PUSH
78912: LD_INT 2
78914: PUSH
78915: EMPTY
78916: LIST
78917: LIST
78918: PUSH
78919: LD_INT 2
78921: PUSH
78922: LD_INT 34
78924: PUSH
78925: LD_INT 12
78927: PUSH
78928: EMPTY
78929: LIST
78930: LIST
78931: PUSH
78932: LD_INT 34
78934: PUSH
78935: LD_INT 51
78937: PUSH
78938: EMPTY
78939: LIST
78940: LIST
78941: PUSH
78942: LD_INT 34
78944: PUSH
78945: LD_INT 32
78947: PUSH
78948: EMPTY
78949: LIST
78950: LIST
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: LIST
78962: PPUSH
78963: CALL_OW 69
78967: ST_TO_ADDR
// if not tmp then
78968: LD_VAR 0 2
78972: NOT
78973: IFFALSE 78977
// exit ;
78975: GO 79027
// for i in tmp do
78977: LD_ADDR_VAR 0 1
78981: PUSH
78982: LD_VAR 0 2
78986: PUSH
78987: FOR_IN
78988: IFFALSE 79025
// if GetCargo ( i , mat_artifact ) = 0 then
78990: LD_VAR 0 1
78994: PPUSH
78995: LD_INT 4
78997: PPUSH
78998: CALL_OW 289
79002: PUSH
79003: LD_INT 0
79005: EQUAL
79006: IFFALSE 79023
// SetCargo ( i , mat_siberit , 100 ) ;
79008: LD_VAR 0 1
79012: PPUSH
79013: LD_INT 3
79015: PPUSH
79016: LD_INT 100
79018: PPUSH
79019: CALL_OW 290
79023: GO 78987
79025: POP
79026: POP
// end ;
79027: PPOPN 2
79029: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
79030: LD_EXP 61
79034: PUSH
79035: LD_EXP 106
79039: AND
79040: IFFALSE 79223
79042: GO 79044
79044: DISABLE
79045: LD_INT 0
79047: PPUSH
79048: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79049: LD_ADDR_VAR 0 2
79053: PUSH
79054: LD_INT 22
79056: PUSH
79057: LD_OWVAR 2
79061: PUSH
79062: EMPTY
79063: LIST
79064: LIST
79065: PPUSH
79066: CALL_OW 69
79070: ST_TO_ADDR
// if not tmp then
79071: LD_VAR 0 2
79075: NOT
79076: IFFALSE 79080
// exit ;
79078: GO 79223
// for i := 1 to 2 do
79080: LD_ADDR_VAR 0 1
79084: PUSH
79085: DOUBLE
79086: LD_INT 1
79088: DEC
79089: ST_TO_ADDR
79090: LD_INT 2
79092: PUSH
79093: FOR_TO
79094: IFFALSE 79221
// begin uc_side := your_side ;
79096: LD_ADDR_OWVAR 20
79100: PUSH
79101: LD_OWVAR 2
79105: ST_TO_ADDR
// uc_nation := nation_american ;
79106: LD_ADDR_OWVAR 21
79110: PUSH
79111: LD_INT 1
79113: ST_TO_ADDR
// vc_chassis := us_morphling ;
79114: LD_ADDR_OWVAR 37
79118: PUSH
79119: LD_INT 5
79121: ST_TO_ADDR
// vc_engine := engine_siberite ;
79122: LD_ADDR_OWVAR 39
79126: PUSH
79127: LD_INT 3
79129: ST_TO_ADDR
// vc_control := control_computer ;
79130: LD_ADDR_OWVAR 38
79134: PUSH
79135: LD_INT 3
79137: ST_TO_ADDR
// vc_weapon := us_double_laser ;
79138: LD_ADDR_OWVAR 40
79142: PUSH
79143: LD_INT 10
79145: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
79146: LD_VAR 0 2
79150: PUSH
79151: LD_INT 1
79153: ARRAY
79154: PPUSH
79155: CALL_OW 310
79159: NOT
79160: IFFALSE 79207
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
79162: CALL_OW 45
79166: PPUSH
79167: LD_VAR 0 2
79171: PUSH
79172: LD_INT 1
79174: ARRAY
79175: PPUSH
79176: CALL_OW 250
79180: PPUSH
79181: LD_VAR 0 2
79185: PUSH
79186: LD_INT 1
79188: ARRAY
79189: PPUSH
79190: CALL_OW 251
79194: PPUSH
79195: LD_INT 12
79197: PPUSH
79198: LD_INT 1
79200: PPUSH
79201: CALL_OW 50
79205: GO 79219
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
79207: CALL_OW 45
79211: PPUSH
79212: LD_INT 1
79214: PPUSH
79215: CALL_OW 51
// end ;
79219: GO 79093
79221: POP
79222: POP
// end ;
79223: PPOPN 2
79225: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
79226: LD_EXP 61
79230: PUSH
79231: LD_EXP 107
79235: AND
79236: IFFALSE 79458
79238: GO 79240
79240: DISABLE
79241: LD_INT 0
79243: PPUSH
79244: PPUSH
79245: PPUSH
79246: PPUSH
79247: PPUSH
79248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79249: LD_ADDR_VAR 0 6
79253: PUSH
79254: LD_INT 22
79256: PUSH
79257: LD_OWVAR 2
79261: PUSH
79262: EMPTY
79263: LIST
79264: LIST
79265: PUSH
79266: LD_INT 21
79268: PUSH
79269: LD_INT 1
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: PUSH
79276: LD_INT 3
79278: PUSH
79279: LD_INT 23
79281: PUSH
79282: LD_INT 0
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: PUSH
79293: EMPTY
79294: LIST
79295: LIST
79296: LIST
79297: PPUSH
79298: CALL_OW 69
79302: ST_TO_ADDR
// if not tmp then
79303: LD_VAR 0 6
79307: NOT
79308: IFFALSE 79312
// exit ;
79310: GO 79458
// s1 := rand ( 1 , 4 ) ;
79312: LD_ADDR_VAR 0 2
79316: PUSH
79317: LD_INT 1
79319: PPUSH
79320: LD_INT 4
79322: PPUSH
79323: CALL_OW 12
79327: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
79328: LD_ADDR_VAR 0 4
79332: PUSH
79333: LD_VAR 0 6
79337: PUSH
79338: LD_INT 1
79340: ARRAY
79341: PPUSH
79342: LD_VAR 0 2
79346: PPUSH
79347: CALL_OW 259
79351: ST_TO_ADDR
// if s1 = 1 then
79352: LD_VAR 0 2
79356: PUSH
79357: LD_INT 1
79359: EQUAL
79360: IFFALSE 79380
// s2 := rand ( 2 , 4 ) else
79362: LD_ADDR_VAR 0 3
79366: PUSH
79367: LD_INT 2
79369: PPUSH
79370: LD_INT 4
79372: PPUSH
79373: CALL_OW 12
79377: ST_TO_ADDR
79378: GO 79388
// s2 := 1 ;
79380: LD_ADDR_VAR 0 3
79384: PUSH
79385: LD_INT 1
79387: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
79388: LD_ADDR_VAR 0 5
79392: PUSH
79393: LD_VAR 0 6
79397: PUSH
79398: LD_INT 1
79400: ARRAY
79401: PPUSH
79402: LD_VAR 0 3
79406: PPUSH
79407: CALL_OW 259
79411: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
79412: LD_VAR 0 6
79416: PUSH
79417: LD_INT 1
79419: ARRAY
79420: PPUSH
79421: LD_VAR 0 2
79425: PPUSH
79426: LD_VAR 0 5
79430: PPUSH
79431: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
79435: LD_VAR 0 6
79439: PUSH
79440: LD_INT 1
79442: ARRAY
79443: PPUSH
79444: LD_VAR 0 3
79448: PPUSH
79449: LD_VAR 0 4
79453: PPUSH
79454: CALL_OW 237
// end ;
79458: PPOPN 6
79460: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
79461: LD_EXP 61
79465: PUSH
79466: LD_EXP 108
79470: AND
79471: IFFALSE 79550
79473: GO 79475
79475: DISABLE
79476: LD_INT 0
79478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
79479: LD_ADDR_VAR 0 1
79483: PUSH
79484: LD_INT 22
79486: PUSH
79487: LD_OWVAR 2
79491: PUSH
79492: EMPTY
79493: LIST
79494: LIST
79495: PUSH
79496: LD_INT 30
79498: PUSH
79499: LD_INT 3
79501: PUSH
79502: EMPTY
79503: LIST
79504: LIST
79505: PUSH
79506: EMPTY
79507: LIST
79508: LIST
79509: PPUSH
79510: CALL_OW 69
79514: ST_TO_ADDR
// if not tmp then
79515: LD_VAR 0 1
79519: NOT
79520: IFFALSE 79524
// exit ;
79522: GO 79550
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79524: LD_VAR 0 1
79528: PUSH
79529: LD_INT 1
79531: PPUSH
79532: LD_VAR 0 1
79536: PPUSH
79537: CALL_OW 12
79541: ARRAY
79542: PPUSH
79543: LD_INT 1
79545: PPUSH
79546: CALL_OW 234
// end ;
79550: PPOPN 1
79552: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
79553: LD_EXP 61
79557: PUSH
79558: LD_EXP 109
79562: AND
79563: IFFALSE 79675
79565: GO 79567
79567: DISABLE
79568: LD_INT 0
79570: PPUSH
79571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
79572: LD_ADDR_VAR 0 2
79576: PUSH
79577: LD_INT 22
79579: PUSH
79580: LD_OWVAR 2
79584: PUSH
79585: EMPTY
79586: LIST
79587: LIST
79588: PUSH
79589: LD_INT 2
79591: PUSH
79592: LD_INT 30
79594: PUSH
79595: LD_INT 27
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PUSH
79602: LD_INT 30
79604: PUSH
79605: LD_INT 26
79607: PUSH
79608: EMPTY
79609: LIST
79610: LIST
79611: PUSH
79612: LD_INT 30
79614: PUSH
79615: LD_INT 28
79617: PUSH
79618: EMPTY
79619: LIST
79620: LIST
79621: PUSH
79622: EMPTY
79623: LIST
79624: LIST
79625: LIST
79626: LIST
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: PPUSH
79632: CALL_OW 69
79636: ST_TO_ADDR
// if not tmp then
79637: LD_VAR 0 2
79641: NOT
79642: IFFALSE 79646
// exit ;
79644: GO 79675
// for i in tmp do
79646: LD_ADDR_VAR 0 1
79650: PUSH
79651: LD_VAR 0 2
79655: PUSH
79656: FOR_IN
79657: IFFALSE 79673
// SetLives ( i , 1 ) ;
79659: LD_VAR 0 1
79663: PPUSH
79664: LD_INT 1
79666: PPUSH
79667: CALL_OW 234
79671: GO 79656
79673: POP
79674: POP
// end ;
79675: PPOPN 2
79677: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
79678: LD_EXP 61
79682: PUSH
79683: LD_EXP 110
79687: AND
79688: IFFALSE 79975
79690: GO 79692
79692: DISABLE
79693: LD_INT 0
79695: PPUSH
79696: PPUSH
79697: PPUSH
// begin i := rand ( 1 , 7 ) ;
79698: LD_ADDR_VAR 0 1
79702: PUSH
79703: LD_INT 1
79705: PPUSH
79706: LD_INT 7
79708: PPUSH
79709: CALL_OW 12
79713: ST_TO_ADDR
// case i of 1 :
79714: LD_VAR 0 1
79718: PUSH
79719: LD_INT 1
79721: DOUBLE
79722: EQUAL
79723: IFTRUE 79727
79725: GO 79737
79727: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
79728: LD_STRING earthquake(getX(game), 0, 32)
79730: PPUSH
79731: CALL_OW 559
79735: GO 79975
79737: LD_INT 2
79739: DOUBLE
79740: EQUAL
79741: IFTRUE 79745
79743: GO 79759
79745: POP
// begin ToLua ( displayStucuk(); ) ;
79746: LD_STRING displayStucuk();
79748: PPUSH
79749: CALL_OW 559
// ResetFog ;
79753: CALL_OW 335
// end ; 3 :
79757: GO 79975
79759: LD_INT 3
79761: DOUBLE
79762: EQUAL
79763: IFTRUE 79767
79765: GO 79871
79767: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79768: LD_ADDR_VAR 0 2
79772: PUSH
79773: LD_INT 22
79775: PUSH
79776: LD_OWVAR 2
79780: PUSH
79781: EMPTY
79782: LIST
79783: LIST
79784: PUSH
79785: LD_INT 25
79787: PUSH
79788: LD_INT 1
79790: PUSH
79791: EMPTY
79792: LIST
79793: LIST
79794: PUSH
79795: EMPTY
79796: LIST
79797: LIST
79798: PPUSH
79799: CALL_OW 69
79803: ST_TO_ADDR
// if not tmp then
79804: LD_VAR 0 2
79808: NOT
79809: IFFALSE 79813
// exit ;
79811: GO 79975
// un := tmp [ rand ( 1 , tmp ) ] ;
79813: LD_ADDR_VAR 0 3
79817: PUSH
79818: LD_VAR 0 2
79822: PUSH
79823: LD_INT 1
79825: PPUSH
79826: LD_VAR 0 2
79830: PPUSH
79831: CALL_OW 12
79835: ARRAY
79836: ST_TO_ADDR
// if Crawls ( un ) then
79837: LD_VAR 0 3
79841: PPUSH
79842: CALL_OW 318
79846: IFFALSE 79857
// ComWalk ( un ) ;
79848: LD_VAR 0 3
79852: PPUSH
79853: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79857: LD_VAR 0 3
79861: PPUSH
79862: LD_INT 8
79864: PPUSH
79865: CALL_OW 336
// end ; 4 :
79869: GO 79975
79871: LD_INT 4
79873: DOUBLE
79874: EQUAL
79875: IFTRUE 79879
79877: GO 79953
79879: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79880: LD_ADDR_VAR 0 2
79884: PUSH
79885: LD_INT 22
79887: PUSH
79888: LD_OWVAR 2
79892: PUSH
79893: EMPTY
79894: LIST
79895: LIST
79896: PUSH
79897: LD_INT 30
79899: PUSH
79900: LD_INT 29
79902: PUSH
79903: EMPTY
79904: LIST
79905: LIST
79906: PUSH
79907: EMPTY
79908: LIST
79909: LIST
79910: PPUSH
79911: CALL_OW 69
79915: ST_TO_ADDR
// if not tmp then
79916: LD_VAR 0 2
79920: NOT
79921: IFFALSE 79925
// exit ;
79923: GO 79975
// CenterNowOnUnits ( tmp [ 1 ] ) ;
79925: LD_VAR 0 2
79929: PUSH
79930: LD_INT 1
79932: ARRAY
79933: PPUSH
79934: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
79938: LD_VAR 0 2
79942: PUSH
79943: LD_INT 1
79945: ARRAY
79946: PPUSH
79947: CALL_OW 65
// end ; 5 .. 7 :
79951: GO 79975
79953: LD_INT 5
79955: DOUBLE
79956: GREATEREQUAL
79957: IFFALSE 79965
79959: LD_INT 7
79961: DOUBLE
79962: LESSEQUAL
79963: IFTRUE 79967
79965: GO 79974
79967: POP
// StreamSibBomb ; end ;
79968: CALL 76212 0 0
79972: GO 79975
79974: POP
// end ;
79975: PPOPN 3
79977: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
79978: LD_EXP 61
79982: PUSH
79983: LD_EXP 111
79987: AND
79988: IFFALSE 80144
79990: GO 79992
79992: DISABLE
79993: LD_INT 0
79995: PPUSH
79996: PPUSH
79997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
79998: LD_ADDR_VAR 0 2
80002: PUSH
80003: LD_INT 81
80005: PUSH
80006: LD_OWVAR 2
80010: PUSH
80011: EMPTY
80012: LIST
80013: LIST
80014: PUSH
80015: LD_INT 2
80017: PUSH
80018: LD_INT 21
80020: PUSH
80021: LD_INT 1
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: PUSH
80028: LD_INT 21
80030: PUSH
80031: LD_INT 2
80033: PUSH
80034: EMPTY
80035: LIST
80036: LIST
80037: PUSH
80038: EMPTY
80039: LIST
80040: LIST
80041: LIST
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: PPUSH
80047: CALL_OW 69
80051: ST_TO_ADDR
// if not tmp then
80052: LD_VAR 0 2
80056: NOT
80057: IFFALSE 80061
// exit ;
80059: GO 80144
// p := 0 ;
80061: LD_ADDR_VAR 0 3
80065: PUSH
80066: LD_INT 0
80068: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80069: LD_INT 35
80071: PPUSH
80072: CALL_OW 67
// p := p + 1 ;
80076: LD_ADDR_VAR 0 3
80080: PUSH
80081: LD_VAR 0 3
80085: PUSH
80086: LD_INT 1
80088: PLUS
80089: ST_TO_ADDR
// for i in tmp do
80090: LD_ADDR_VAR 0 1
80094: PUSH
80095: LD_VAR 0 2
80099: PUSH
80100: FOR_IN
80101: IFFALSE 80132
// if GetLives ( i ) < 1000 then
80103: LD_VAR 0 1
80107: PPUSH
80108: CALL_OW 256
80112: PUSH
80113: LD_INT 1000
80115: LESS
80116: IFFALSE 80130
// SetLives ( i , 1000 ) ;
80118: LD_VAR 0 1
80122: PPUSH
80123: LD_INT 1000
80125: PPUSH
80126: CALL_OW 234
80130: GO 80100
80132: POP
80133: POP
// until p > 20 ;
80134: LD_VAR 0 3
80138: PUSH
80139: LD_INT 20
80141: GREATER
80142: IFFALSE 80069
// end ;
80144: PPOPN 3
80146: END
// every 0 0$1 trigger StreamModeActive and sTime do
80147: LD_EXP 61
80151: PUSH
80152: LD_EXP 112
80156: AND
80157: IFFALSE 80192
80159: GO 80161
80161: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
80162: LD_INT 28
80164: PPUSH
80165: LD_OWVAR 2
80169: PPUSH
80170: LD_INT 2
80172: PPUSH
80173: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
80177: LD_INT 30
80179: PPUSH
80180: LD_OWVAR 2
80184: PPUSH
80185: LD_INT 2
80187: PPUSH
80188: CALL_OW 322
// end ;
80192: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
80193: LD_EXP 61
80197: PUSH
80198: LD_EXP 113
80202: AND
80203: IFFALSE 80324
80205: GO 80207
80207: DISABLE
80208: LD_INT 0
80210: PPUSH
80211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80212: LD_ADDR_VAR 0 2
80216: PUSH
80217: LD_INT 22
80219: PUSH
80220: LD_OWVAR 2
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: PUSH
80229: LD_INT 21
80231: PUSH
80232: LD_INT 1
80234: PUSH
80235: EMPTY
80236: LIST
80237: LIST
80238: PUSH
80239: LD_INT 3
80241: PUSH
80242: LD_INT 23
80244: PUSH
80245: LD_INT 0
80247: PUSH
80248: EMPTY
80249: LIST
80250: LIST
80251: PUSH
80252: EMPTY
80253: LIST
80254: LIST
80255: PUSH
80256: EMPTY
80257: LIST
80258: LIST
80259: LIST
80260: PPUSH
80261: CALL_OW 69
80265: ST_TO_ADDR
// if not tmp then
80266: LD_VAR 0 2
80270: NOT
80271: IFFALSE 80275
// exit ;
80273: GO 80324
// for i in tmp do
80275: LD_ADDR_VAR 0 1
80279: PUSH
80280: LD_VAR 0 2
80284: PUSH
80285: FOR_IN
80286: IFFALSE 80322
// begin if Crawls ( i ) then
80288: LD_VAR 0 1
80292: PPUSH
80293: CALL_OW 318
80297: IFFALSE 80308
// ComWalk ( i ) ;
80299: LD_VAR 0 1
80303: PPUSH
80304: CALL_OW 138
// SetClass ( i , 2 ) ;
80308: LD_VAR 0 1
80312: PPUSH
80313: LD_INT 2
80315: PPUSH
80316: CALL_OW 336
// end ;
80320: GO 80285
80322: POP
80323: POP
// end ;
80324: PPOPN 2
80326: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
80327: LD_EXP 61
80331: PUSH
80332: LD_EXP 114
80336: AND
80337: IFFALSE 80625
80339: GO 80341
80341: DISABLE
80342: LD_INT 0
80344: PPUSH
80345: PPUSH
80346: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
80347: LD_OWVAR 2
80351: PPUSH
80352: LD_INT 9
80354: PPUSH
80355: LD_INT 1
80357: PPUSH
80358: LD_INT 1
80360: PPUSH
80361: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
80365: LD_INT 9
80367: PPUSH
80368: LD_OWVAR 2
80372: PPUSH
80373: CALL_OW 343
// uc_side := 9 ;
80377: LD_ADDR_OWVAR 20
80381: PUSH
80382: LD_INT 9
80384: ST_TO_ADDR
// uc_nation := 2 ;
80385: LD_ADDR_OWVAR 21
80389: PUSH
80390: LD_INT 2
80392: ST_TO_ADDR
// hc_name := Dark Warrior ;
80393: LD_ADDR_OWVAR 26
80397: PUSH
80398: LD_STRING Dark Warrior
80400: ST_TO_ADDR
// hc_gallery :=  ;
80401: LD_ADDR_OWVAR 33
80405: PUSH
80406: LD_STRING 
80408: ST_TO_ADDR
// hc_noskilllimit := true ;
80409: LD_ADDR_OWVAR 76
80413: PUSH
80414: LD_INT 1
80416: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
80417: LD_ADDR_OWVAR 31
80421: PUSH
80422: LD_INT 30
80424: PUSH
80425: LD_INT 30
80427: PUSH
80428: LD_INT 30
80430: PUSH
80431: LD_INT 30
80433: PUSH
80434: EMPTY
80435: LIST
80436: LIST
80437: LIST
80438: LIST
80439: ST_TO_ADDR
// un := CreateHuman ;
80440: LD_ADDR_VAR 0 3
80444: PUSH
80445: CALL_OW 44
80449: ST_TO_ADDR
// hc_noskilllimit := false ;
80450: LD_ADDR_OWVAR 76
80454: PUSH
80455: LD_INT 0
80457: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80458: LD_VAR 0 3
80462: PPUSH
80463: LD_INT 1
80465: PPUSH
80466: CALL_OW 51
// ToLua ( playRanger() ) ;
80470: LD_STRING playRanger()
80472: PPUSH
80473: CALL_OW 559
// p := 0 ;
80477: LD_ADDR_VAR 0 2
80481: PUSH
80482: LD_INT 0
80484: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80485: LD_INT 35
80487: PPUSH
80488: CALL_OW 67
// p := p + 1 ;
80492: LD_ADDR_VAR 0 2
80496: PUSH
80497: LD_VAR 0 2
80501: PUSH
80502: LD_INT 1
80504: PLUS
80505: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
80506: LD_VAR 0 3
80510: PPUSH
80511: CALL_OW 256
80515: PUSH
80516: LD_INT 1000
80518: LESS
80519: IFFALSE 80533
// SetLives ( un , 1000 ) ;
80521: LD_VAR 0 3
80525: PPUSH
80526: LD_INT 1000
80528: PPUSH
80529: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
80533: LD_VAR 0 3
80537: PPUSH
80538: LD_INT 81
80540: PUSH
80541: LD_OWVAR 2
80545: PUSH
80546: EMPTY
80547: LIST
80548: LIST
80549: PUSH
80550: LD_INT 91
80552: PUSH
80553: LD_VAR 0 3
80557: PUSH
80558: LD_INT 30
80560: PUSH
80561: EMPTY
80562: LIST
80563: LIST
80564: LIST
80565: PUSH
80566: EMPTY
80567: LIST
80568: LIST
80569: PPUSH
80570: CALL_OW 69
80574: PPUSH
80575: LD_VAR 0 3
80579: PPUSH
80580: CALL_OW 74
80584: PPUSH
80585: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
80589: LD_VAR 0 2
80593: PUSH
80594: LD_INT 80
80596: GREATER
80597: PUSH
80598: LD_VAR 0 3
80602: PPUSH
80603: CALL_OW 301
80607: OR
80608: IFFALSE 80485
// if un then
80610: LD_VAR 0 3
80614: IFFALSE 80625
// RemoveUnit ( un ) ;
80616: LD_VAR 0 3
80620: PPUSH
80621: CALL_OW 64
// end ;
80625: PPOPN 3
80627: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
80628: LD_EXP 115
80632: IFFALSE 80748
80634: GO 80636
80636: DISABLE
80637: LD_INT 0
80639: PPUSH
80640: PPUSH
80641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80642: LD_ADDR_VAR 0 2
80646: PUSH
80647: LD_INT 81
80649: PUSH
80650: LD_OWVAR 2
80654: PUSH
80655: EMPTY
80656: LIST
80657: LIST
80658: PUSH
80659: LD_INT 21
80661: PUSH
80662: LD_INT 1
80664: PUSH
80665: EMPTY
80666: LIST
80667: LIST
80668: PUSH
80669: EMPTY
80670: LIST
80671: LIST
80672: PPUSH
80673: CALL_OW 69
80677: ST_TO_ADDR
// ToLua ( playComputer() ) ;
80678: LD_STRING playComputer()
80680: PPUSH
80681: CALL_OW 559
// if not tmp then
80685: LD_VAR 0 2
80689: NOT
80690: IFFALSE 80694
// exit ;
80692: GO 80748
// for i in tmp do
80694: LD_ADDR_VAR 0 1
80698: PUSH
80699: LD_VAR 0 2
80703: PUSH
80704: FOR_IN
80705: IFFALSE 80746
// for j := 1 to 4 do
80707: LD_ADDR_VAR 0 3
80711: PUSH
80712: DOUBLE
80713: LD_INT 1
80715: DEC
80716: ST_TO_ADDR
80717: LD_INT 4
80719: PUSH
80720: FOR_TO
80721: IFFALSE 80742
// SetSkill ( i , j , 10 ) ;
80723: LD_VAR 0 1
80727: PPUSH
80728: LD_VAR 0 3
80732: PPUSH
80733: LD_INT 10
80735: PPUSH
80736: CALL_OW 237
80740: GO 80720
80742: POP
80743: POP
80744: GO 80704
80746: POP
80747: POP
// end ;
80748: PPOPN 3
80750: END
// every 0 0$1 trigger s30 do var i , tmp ;
80751: LD_EXP 116
80755: IFFALSE 80824
80757: GO 80759
80759: DISABLE
80760: LD_INT 0
80762: PPUSH
80763: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80764: LD_ADDR_VAR 0 2
80768: PUSH
80769: LD_INT 22
80771: PUSH
80772: LD_OWVAR 2
80776: PUSH
80777: EMPTY
80778: LIST
80779: LIST
80780: PPUSH
80781: CALL_OW 69
80785: ST_TO_ADDR
// if not tmp then
80786: LD_VAR 0 2
80790: NOT
80791: IFFALSE 80795
// exit ;
80793: GO 80824
// for i in tmp do
80795: LD_ADDR_VAR 0 1
80799: PUSH
80800: LD_VAR 0 2
80804: PUSH
80805: FOR_IN
80806: IFFALSE 80822
// SetLives ( i , 300 ) ;
80808: LD_VAR 0 1
80812: PPUSH
80813: LD_INT 300
80815: PPUSH
80816: CALL_OW 234
80820: GO 80805
80822: POP
80823: POP
// end ;
80824: PPOPN 2
80826: END
// every 0 0$1 trigger s60 do var i , tmp ;
80827: LD_EXP 117
80831: IFFALSE 80900
80833: GO 80835
80835: DISABLE
80836: LD_INT 0
80838: PPUSH
80839: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80840: LD_ADDR_VAR 0 2
80844: PUSH
80845: LD_INT 22
80847: PUSH
80848: LD_OWVAR 2
80852: PUSH
80853: EMPTY
80854: LIST
80855: LIST
80856: PPUSH
80857: CALL_OW 69
80861: ST_TO_ADDR
// if not tmp then
80862: LD_VAR 0 2
80866: NOT
80867: IFFALSE 80871
// exit ;
80869: GO 80900
// for i in tmp do
80871: LD_ADDR_VAR 0 1
80875: PUSH
80876: LD_VAR 0 2
80880: PUSH
80881: FOR_IN
80882: IFFALSE 80898
// SetLives ( i , 600 ) ;
80884: LD_VAR 0 1
80888: PPUSH
80889: LD_INT 600
80891: PPUSH
80892: CALL_OW 234
80896: GO 80881
80898: POP
80899: POP
// end ;
80900: PPOPN 2
80902: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
80903: LD_INT 0
80905: PPUSH
// case cmd of 301 :
80906: LD_VAR 0 1
80910: PUSH
80911: LD_INT 301
80913: DOUBLE
80914: EQUAL
80915: IFTRUE 80919
80917: GO 80951
80919: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
80920: LD_VAR 0 6
80924: PPUSH
80925: LD_VAR 0 7
80929: PPUSH
80930: LD_VAR 0 8
80934: PPUSH
80935: LD_VAR 0 4
80939: PPUSH
80940: LD_VAR 0 5
80944: PPUSH
80945: CALL 82152 0 5
80949: GO 81072
80951: LD_INT 302
80953: DOUBLE
80954: EQUAL
80955: IFTRUE 80959
80957: GO 80996
80959: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
80960: LD_VAR 0 6
80964: PPUSH
80965: LD_VAR 0 7
80969: PPUSH
80970: LD_VAR 0 8
80974: PPUSH
80975: LD_VAR 0 9
80979: PPUSH
80980: LD_VAR 0 4
80984: PPUSH
80985: LD_VAR 0 5
80989: PPUSH
80990: CALL 82243 0 6
80994: GO 81072
80996: LD_INT 303
80998: DOUBLE
80999: EQUAL
81000: IFTRUE 81004
81002: GO 81041
81004: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
81005: LD_VAR 0 6
81009: PPUSH
81010: LD_VAR 0 7
81014: PPUSH
81015: LD_VAR 0 8
81019: PPUSH
81020: LD_VAR 0 9
81024: PPUSH
81025: LD_VAR 0 4
81029: PPUSH
81030: LD_VAR 0 5
81034: PPUSH
81035: CALL 81077 0 6
81039: GO 81072
81041: LD_INT 304
81043: DOUBLE
81044: EQUAL
81045: IFTRUE 81049
81047: GO 81071
81049: POP
// hHackTeleport ( unit , x , y ) ; end ;
81050: LD_VAR 0 2
81054: PPUSH
81055: LD_VAR 0 4
81059: PPUSH
81060: LD_VAR 0 5
81064: PPUSH
81065: CALL 82836 0 3
81069: GO 81072
81071: POP
// end ;
81072: LD_VAR 0 12
81076: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
81077: LD_INT 0
81079: PPUSH
81080: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
81081: LD_VAR 0 1
81085: PUSH
81086: LD_INT 1
81088: LESS
81089: PUSH
81090: LD_VAR 0 1
81094: PUSH
81095: LD_INT 3
81097: GREATER
81098: OR
81099: PUSH
81100: LD_VAR 0 5
81104: PPUSH
81105: LD_VAR 0 6
81109: PPUSH
81110: CALL_OW 428
81114: OR
81115: IFFALSE 81119
// exit ;
81117: GO 81839
// uc_side := your_side ;
81119: LD_ADDR_OWVAR 20
81123: PUSH
81124: LD_OWVAR 2
81128: ST_TO_ADDR
// uc_nation := nation ;
81129: LD_ADDR_OWVAR 21
81133: PUSH
81134: LD_VAR 0 1
81138: ST_TO_ADDR
// bc_level = 1 ;
81139: LD_ADDR_OWVAR 43
81143: PUSH
81144: LD_INT 1
81146: ST_TO_ADDR
// case btype of 1 :
81147: LD_VAR 0 2
81151: PUSH
81152: LD_INT 1
81154: DOUBLE
81155: EQUAL
81156: IFTRUE 81160
81158: GO 81171
81160: POP
// bc_type := b_depot ; 2 :
81161: LD_ADDR_OWVAR 42
81165: PUSH
81166: LD_INT 0
81168: ST_TO_ADDR
81169: GO 81783
81171: LD_INT 2
81173: DOUBLE
81174: EQUAL
81175: IFTRUE 81179
81177: GO 81190
81179: POP
// bc_type := b_warehouse ; 3 :
81180: LD_ADDR_OWVAR 42
81184: PUSH
81185: LD_INT 1
81187: ST_TO_ADDR
81188: GO 81783
81190: LD_INT 3
81192: DOUBLE
81193: EQUAL
81194: IFTRUE 81198
81196: GO 81209
81198: POP
// bc_type := b_lab ; 4 .. 9 :
81199: LD_ADDR_OWVAR 42
81203: PUSH
81204: LD_INT 6
81206: ST_TO_ADDR
81207: GO 81783
81209: LD_INT 4
81211: DOUBLE
81212: GREATEREQUAL
81213: IFFALSE 81221
81215: LD_INT 9
81217: DOUBLE
81218: LESSEQUAL
81219: IFTRUE 81223
81221: GO 81275
81223: POP
// begin bc_type := b_lab_half ;
81224: LD_ADDR_OWVAR 42
81228: PUSH
81229: LD_INT 7
81231: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
81232: LD_ADDR_OWVAR 44
81236: PUSH
81237: LD_INT 10
81239: PUSH
81240: LD_INT 11
81242: PUSH
81243: LD_INT 12
81245: PUSH
81246: LD_INT 15
81248: PUSH
81249: LD_INT 14
81251: PUSH
81252: LD_INT 13
81254: PUSH
81255: EMPTY
81256: LIST
81257: LIST
81258: LIST
81259: LIST
81260: LIST
81261: LIST
81262: PUSH
81263: LD_VAR 0 2
81267: PUSH
81268: LD_INT 3
81270: MINUS
81271: ARRAY
81272: ST_TO_ADDR
// end ; 10 .. 13 :
81273: GO 81783
81275: LD_INT 10
81277: DOUBLE
81278: GREATEREQUAL
81279: IFFALSE 81287
81281: LD_INT 13
81283: DOUBLE
81284: LESSEQUAL
81285: IFTRUE 81289
81287: GO 81366
81289: POP
// begin bc_type := b_lab_full ;
81290: LD_ADDR_OWVAR 42
81294: PUSH
81295: LD_INT 8
81297: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
81298: LD_ADDR_OWVAR 44
81302: PUSH
81303: LD_INT 10
81305: PUSH
81306: LD_INT 12
81308: PUSH
81309: LD_INT 14
81311: PUSH
81312: LD_INT 13
81314: PUSH
81315: EMPTY
81316: LIST
81317: LIST
81318: LIST
81319: LIST
81320: PUSH
81321: LD_VAR 0 2
81325: PUSH
81326: LD_INT 9
81328: MINUS
81329: ARRAY
81330: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
81331: LD_ADDR_OWVAR 45
81335: PUSH
81336: LD_INT 11
81338: PUSH
81339: LD_INT 15
81341: PUSH
81342: LD_INT 12
81344: PUSH
81345: LD_INT 15
81347: PUSH
81348: EMPTY
81349: LIST
81350: LIST
81351: LIST
81352: LIST
81353: PUSH
81354: LD_VAR 0 2
81358: PUSH
81359: LD_INT 9
81361: MINUS
81362: ARRAY
81363: ST_TO_ADDR
// end ; 14 :
81364: GO 81783
81366: LD_INT 14
81368: DOUBLE
81369: EQUAL
81370: IFTRUE 81374
81372: GO 81385
81374: POP
// bc_type := b_workshop ; 15 :
81375: LD_ADDR_OWVAR 42
81379: PUSH
81380: LD_INT 2
81382: ST_TO_ADDR
81383: GO 81783
81385: LD_INT 15
81387: DOUBLE
81388: EQUAL
81389: IFTRUE 81393
81391: GO 81404
81393: POP
// bc_type := b_factory ; 16 :
81394: LD_ADDR_OWVAR 42
81398: PUSH
81399: LD_INT 3
81401: ST_TO_ADDR
81402: GO 81783
81404: LD_INT 16
81406: DOUBLE
81407: EQUAL
81408: IFTRUE 81412
81410: GO 81423
81412: POP
// bc_type := b_ext_gun ; 17 :
81413: LD_ADDR_OWVAR 42
81417: PUSH
81418: LD_INT 17
81420: ST_TO_ADDR
81421: GO 81783
81423: LD_INT 17
81425: DOUBLE
81426: EQUAL
81427: IFTRUE 81431
81429: GO 81459
81431: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
81432: LD_ADDR_OWVAR 42
81436: PUSH
81437: LD_INT 19
81439: PUSH
81440: LD_INT 23
81442: PUSH
81443: LD_INT 19
81445: PUSH
81446: EMPTY
81447: LIST
81448: LIST
81449: LIST
81450: PUSH
81451: LD_VAR 0 1
81455: ARRAY
81456: ST_TO_ADDR
81457: GO 81783
81459: LD_INT 18
81461: DOUBLE
81462: EQUAL
81463: IFTRUE 81467
81465: GO 81478
81467: POP
// bc_type := b_ext_radar ; 19 :
81468: LD_ADDR_OWVAR 42
81472: PUSH
81473: LD_INT 20
81475: ST_TO_ADDR
81476: GO 81783
81478: LD_INT 19
81480: DOUBLE
81481: EQUAL
81482: IFTRUE 81486
81484: GO 81497
81486: POP
// bc_type := b_ext_radio ; 20 :
81487: LD_ADDR_OWVAR 42
81491: PUSH
81492: LD_INT 22
81494: ST_TO_ADDR
81495: GO 81783
81497: LD_INT 20
81499: DOUBLE
81500: EQUAL
81501: IFTRUE 81505
81503: GO 81516
81505: POP
// bc_type := b_ext_siberium ; 21 :
81506: LD_ADDR_OWVAR 42
81510: PUSH
81511: LD_INT 21
81513: ST_TO_ADDR
81514: GO 81783
81516: LD_INT 21
81518: DOUBLE
81519: EQUAL
81520: IFTRUE 81524
81522: GO 81535
81524: POP
// bc_type := b_ext_computer ; 22 :
81525: LD_ADDR_OWVAR 42
81529: PUSH
81530: LD_INT 24
81532: ST_TO_ADDR
81533: GO 81783
81535: LD_INT 22
81537: DOUBLE
81538: EQUAL
81539: IFTRUE 81543
81541: GO 81554
81543: POP
// bc_type := b_ext_track ; 23 :
81544: LD_ADDR_OWVAR 42
81548: PUSH
81549: LD_INT 16
81551: ST_TO_ADDR
81552: GO 81783
81554: LD_INT 23
81556: DOUBLE
81557: EQUAL
81558: IFTRUE 81562
81560: GO 81573
81562: POP
// bc_type := b_ext_laser ; 24 :
81563: LD_ADDR_OWVAR 42
81567: PUSH
81568: LD_INT 25
81570: ST_TO_ADDR
81571: GO 81783
81573: LD_INT 24
81575: DOUBLE
81576: EQUAL
81577: IFTRUE 81581
81579: GO 81592
81581: POP
// bc_type := b_control_tower ; 25 :
81582: LD_ADDR_OWVAR 42
81586: PUSH
81587: LD_INT 36
81589: ST_TO_ADDR
81590: GO 81783
81592: LD_INT 25
81594: DOUBLE
81595: EQUAL
81596: IFTRUE 81600
81598: GO 81611
81600: POP
// bc_type := b_breastwork ; 26 :
81601: LD_ADDR_OWVAR 42
81605: PUSH
81606: LD_INT 31
81608: ST_TO_ADDR
81609: GO 81783
81611: LD_INT 26
81613: DOUBLE
81614: EQUAL
81615: IFTRUE 81619
81617: GO 81630
81619: POP
// bc_type := b_bunker ; 27 :
81620: LD_ADDR_OWVAR 42
81624: PUSH
81625: LD_INT 32
81627: ST_TO_ADDR
81628: GO 81783
81630: LD_INT 27
81632: DOUBLE
81633: EQUAL
81634: IFTRUE 81638
81636: GO 81649
81638: POP
// bc_type := b_turret ; 28 :
81639: LD_ADDR_OWVAR 42
81643: PUSH
81644: LD_INT 33
81646: ST_TO_ADDR
81647: GO 81783
81649: LD_INT 28
81651: DOUBLE
81652: EQUAL
81653: IFTRUE 81657
81655: GO 81668
81657: POP
// bc_type := b_armoury ; 29 :
81658: LD_ADDR_OWVAR 42
81662: PUSH
81663: LD_INT 4
81665: ST_TO_ADDR
81666: GO 81783
81668: LD_INT 29
81670: DOUBLE
81671: EQUAL
81672: IFTRUE 81676
81674: GO 81687
81676: POP
// bc_type := b_barracks ; 30 :
81677: LD_ADDR_OWVAR 42
81681: PUSH
81682: LD_INT 5
81684: ST_TO_ADDR
81685: GO 81783
81687: LD_INT 30
81689: DOUBLE
81690: EQUAL
81691: IFTRUE 81695
81693: GO 81706
81695: POP
// bc_type := b_solar_power ; 31 :
81696: LD_ADDR_OWVAR 42
81700: PUSH
81701: LD_INT 27
81703: ST_TO_ADDR
81704: GO 81783
81706: LD_INT 31
81708: DOUBLE
81709: EQUAL
81710: IFTRUE 81714
81712: GO 81725
81714: POP
// bc_type := b_oil_power ; 32 :
81715: LD_ADDR_OWVAR 42
81719: PUSH
81720: LD_INT 26
81722: ST_TO_ADDR
81723: GO 81783
81725: LD_INT 32
81727: DOUBLE
81728: EQUAL
81729: IFTRUE 81733
81731: GO 81744
81733: POP
// bc_type := b_siberite_power ; 33 :
81734: LD_ADDR_OWVAR 42
81738: PUSH
81739: LD_INT 28
81741: ST_TO_ADDR
81742: GO 81783
81744: LD_INT 33
81746: DOUBLE
81747: EQUAL
81748: IFTRUE 81752
81750: GO 81763
81752: POP
// bc_type := b_oil_mine ; 34 :
81753: LD_ADDR_OWVAR 42
81757: PUSH
81758: LD_INT 29
81760: ST_TO_ADDR
81761: GO 81783
81763: LD_INT 34
81765: DOUBLE
81766: EQUAL
81767: IFTRUE 81771
81769: GO 81782
81771: POP
// bc_type := b_siberite_mine ; end ;
81772: LD_ADDR_OWVAR 42
81776: PUSH
81777: LD_INT 30
81779: ST_TO_ADDR
81780: GO 81783
81782: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
81783: LD_ADDR_VAR 0 8
81787: PUSH
81788: LD_VAR 0 5
81792: PPUSH
81793: LD_VAR 0 6
81797: PPUSH
81798: LD_VAR 0 3
81802: PPUSH
81803: CALL_OW 47
81807: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
81808: LD_OWVAR 42
81812: PUSH
81813: LD_INT 32
81815: PUSH
81816: LD_INT 33
81818: PUSH
81819: EMPTY
81820: LIST
81821: LIST
81822: IN
81823: IFFALSE 81839
// PlaceWeaponTurret ( b , weapon ) ;
81825: LD_VAR 0 8
81829: PPUSH
81830: LD_VAR 0 4
81834: PPUSH
81835: CALL_OW 431
// end ;
81839: LD_VAR 0 7
81843: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
81844: LD_INT 0
81846: PPUSH
81847: PPUSH
81848: PPUSH
81849: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81850: LD_ADDR_VAR 0 4
81854: PUSH
81855: LD_INT 22
81857: PUSH
81858: LD_OWVAR 2
81862: PUSH
81863: EMPTY
81864: LIST
81865: LIST
81866: PUSH
81867: LD_INT 2
81869: PUSH
81870: LD_INT 30
81872: PUSH
81873: LD_INT 0
81875: PUSH
81876: EMPTY
81877: LIST
81878: LIST
81879: PUSH
81880: LD_INT 30
81882: PUSH
81883: LD_INT 1
81885: PUSH
81886: EMPTY
81887: LIST
81888: LIST
81889: PUSH
81890: EMPTY
81891: LIST
81892: LIST
81893: LIST
81894: PUSH
81895: EMPTY
81896: LIST
81897: LIST
81898: PPUSH
81899: CALL_OW 69
81903: ST_TO_ADDR
// if not tmp then
81904: LD_VAR 0 4
81908: NOT
81909: IFFALSE 81913
// exit ;
81911: GO 81972
// for i in tmp do
81913: LD_ADDR_VAR 0 2
81917: PUSH
81918: LD_VAR 0 4
81922: PUSH
81923: FOR_IN
81924: IFFALSE 81970
// for j = 1 to 3 do
81926: LD_ADDR_VAR 0 3
81930: PUSH
81931: DOUBLE
81932: LD_INT 1
81934: DEC
81935: ST_TO_ADDR
81936: LD_INT 3
81938: PUSH
81939: FOR_TO
81940: IFFALSE 81966
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
81942: LD_VAR 0 2
81946: PPUSH
81947: CALL_OW 274
81951: PPUSH
81952: LD_VAR 0 3
81956: PPUSH
81957: LD_INT 99999
81959: PPUSH
81960: CALL_OW 277
81964: GO 81939
81966: POP
81967: POP
81968: GO 81923
81970: POP
81971: POP
// end ;
81972: LD_VAR 0 1
81976: RET
// export function hHackSetLevel10 ; var i , j ; begin
81977: LD_INT 0
81979: PPUSH
81980: PPUSH
81981: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81982: LD_ADDR_VAR 0 2
81986: PUSH
81987: LD_INT 21
81989: PUSH
81990: LD_INT 1
81992: PUSH
81993: EMPTY
81994: LIST
81995: LIST
81996: PPUSH
81997: CALL_OW 69
82001: PUSH
82002: FOR_IN
82003: IFFALSE 82055
// if IsSelected ( i ) then
82005: LD_VAR 0 2
82009: PPUSH
82010: CALL_OW 306
82014: IFFALSE 82053
// begin for j := 1 to 4 do
82016: LD_ADDR_VAR 0 3
82020: PUSH
82021: DOUBLE
82022: LD_INT 1
82024: DEC
82025: ST_TO_ADDR
82026: LD_INT 4
82028: PUSH
82029: FOR_TO
82030: IFFALSE 82051
// SetSkill ( i , j , 10 ) ;
82032: LD_VAR 0 2
82036: PPUSH
82037: LD_VAR 0 3
82041: PPUSH
82042: LD_INT 10
82044: PPUSH
82045: CALL_OW 237
82049: GO 82029
82051: POP
82052: POP
// end ;
82053: GO 82002
82055: POP
82056: POP
// end ;
82057: LD_VAR 0 1
82061: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
82062: LD_INT 0
82064: PPUSH
82065: PPUSH
82066: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
82067: LD_ADDR_VAR 0 2
82071: PUSH
82072: LD_INT 22
82074: PUSH
82075: LD_OWVAR 2
82079: PUSH
82080: EMPTY
82081: LIST
82082: LIST
82083: PUSH
82084: LD_INT 21
82086: PUSH
82087: LD_INT 1
82089: PUSH
82090: EMPTY
82091: LIST
82092: LIST
82093: PUSH
82094: EMPTY
82095: LIST
82096: LIST
82097: PPUSH
82098: CALL_OW 69
82102: PUSH
82103: FOR_IN
82104: IFFALSE 82145
// begin for j := 1 to 4 do
82106: LD_ADDR_VAR 0 3
82110: PUSH
82111: DOUBLE
82112: LD_INT 1
82114: DEC
82115: ST_TO_ADDR
82116: LD_INT 4
82118: PUSH
82119: FOR_TO
82120: IFFALSE 82141
// SetSkill ( i , j , 10 ) ;
82122: LD_VAR 0 2
82126: PPUSH
82127: LD_VAR 0 3
82131: PPUSH
82132: LD_INT 10
82134: PPUSH
82135: CALL_OW 237
82139: GO 82119
82141: POP
82142: POP
// end ;
82143: GO 82103
82145: POP
82146: POP
// end ;
82147: LD_VAR 0 1
82151: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
82152: LD_INT 0
82154: PPUSH
// uc_side := your_side ;
82155: LD_ADDR_OWVAR 20
82159: PUSH
82160: LD_OWVAR 2
82164: ST_TO_ADDR
// uc_nation := nation ;
82165: LD_ADDR_OWVAR 21
82169: PUSH
82170: LD_VAR 0 1
82174: ST_TO_ADDR
// InitHc ;
82175: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
82179: LD_INT 0
82181: PPUSH
82182: LD_VAR 0 2
82186: PPUSH
82187: LD_VAR 0 3
82191: PPUSH
82192: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
82196: LD_VAR 0 4
82200: PPUSH
82201: LD_VAR 0 5
82205: PPUSH
82206: CALL_OW 428
82210: PUSH
82211: LD_INT 0
82213: EQUAL
82214: IFFALSE 82238
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
82216: CALL_OW 44
82220: PPUSH
82221: LD_VAR 0 4
82225: PPUSH
82226: LD_VAR 0 5
82230: PPUSH
82231: LD_INT 1
82233: PPUSH
82234: CALL_OW 48
// end ;
82238: LD_VAR 0 6
82242: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
82243: LD_INT 0
82245: PPUSH
82246: PPUSH
// uc_side := your_side ;
82247: LD_ADDR_OWVAR 20
82251: PUSH
82252: LD_OWVAR 2
82256: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
82257: LD_VAR 0 1
82261: PUSH
82262: LD_INT 1
82264: PUSH
82265: LD_INT 2
82267: PUSH
82268: LD_INT 3
82270: PUSH
82271: LD_INT 4
82273: PUSH
82274: LD_INT 5
82276: PUSH
82277: EMPTY
82278: LIST
82279: LIST
82280: LIST
82281: LIST
82282: LIST
82283: IN
82284: IFFALSE 82296
// uc_nation := nation_american else
82286: LD_ADDR_OWVAR 21
82290: PUSH
82291: LD_INT 1
82293: ST_TO_ADDR
82294: GO 82339
// if chassis in [ 11 , 12 , 13 , 14 ] then
82296: LD_VAR 0 1
82300: PUSH
82301: LD_INT 11
82303: PUSH
82304: LD_INT 12
82306: PUSH
82307: LD_INT 13
82309: PUSH
82310: LD_INT 14
82312: PUSH
82313: EMPTY
82314: LIST
82315: LIST
82316: LIST
82317: LIST
82318: IN
82319: IFFALSE 82331
// uc_nation := nation_arabian else
82321: LD_ADDR_OWVAR 21
82325: PUSH
82326: LD_INT 2
82328: ST_TO_ADDR
82329: GO 82339
// uc_nation := nation_russian ;
82331: LD_ADDR_OWVAR 21
82335: PUSH
82336: LD_INT 3
82338: ST_TO_ADDR
// vc_chassis := chassis ;
82339: LD_ADDR_OWVAR 37
82343: PUSH
82344: LD_VAR 0 1
82348: ST_TO_ADDR
// vc_engine := engine ;
82349: LD_ADDR_OWVAR 39
82353: PUSH
82354: LD_VAR 0 2
82358: ST_TO_ADDR
// vc_control := control ;
82359: LD_ADDR_OWVAR 38
82363: PUSH
82364: LD_VAR 0 3
82368: ST_TO_ADDR
// vc_weapon := weapon ;
82369: LD_ADDR_OWVAR 40
82373: PUSH
82374: LD_VAR 0 4
82378: ST_TO_ADDR
// un := CreateVehicle ;
82379: LD_ADDR_VAR 0 8
82383: PUSH
82384: CALL_OW 45
82388: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
82389: LD_VAR 0 8
82393: PPUSH
82394: LD_INT 0
82396: PPUSH
82397: LD_INT 5
82399: PPUSH
82400: CALL_OW 12
82404: PPUSH
82405: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
82409: LD_VAR 0 8
82413: PPUSH
82414: LD_VAR 0 5
82418: PPUSH
82419: LD_VAR 0 6
82423: PPUSH
82424: LD_INT 1
82426: PPUSH
82427: CALL_OW 48
// end ;
82431: LD_VAR 0 7
82435: RET
// export hInvincible ; every 1 do
82436: GO 82438
82438: DISABLE
// hInvincible := [ ] ;
82439: LD_ADDR_EXP 118
82443: PUSH
82444: EMPTY
82445: ST_TO_ADDR
82446: END
// every 10 do var i ;
82447: GO 82449
82449: DISABLE
82450: LD_INT 0
82452: PPUSH
// begin enable ;
82453: ENABLE
// if not hInvincible then
82454: LD_EXP 118
82458: NOT
82459: IFFALSE 82463
// exit ;
82461: GO 82507
// for i in hInvincible do
82463: LD_ADDR_VAR 0 1
82467: PUSH
82468: LD_EXP 118
82472: PUSH
82473: FOR_IN
82474: IFFALSE 82505
// if GetLives ( i ) < 1000 then
82476: LD_VAR 0 1
82480: PPUSH
82481: CALL_OW 256
82485: PUSH
82486: LD_INT 1000
82488: LESS
82489: IFFALSE 82503
// SetLives ( i , 1000 ) ;
82491: LD_VAR 0 1
82495: PPUSH
82496: LD_INT 1000
82498: PPUSH
82499: CALL_OW 234
82503: GO 82473
82505: POP
82506: POP
// end ;
82507: PPOPN 1
82509: END
// export function hHackInvincible ; var i ; begin
82510: LD_INT 0
82512: PPUSH
82513: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
82514: LD_ADDR_VAR 0 2
82518: PUSH
82519: LD_INT 2
82521: PUSH
82522: LD_INT 21
82524: PUSH
82525: LD_INT 1
82527: PUSH
82528: EMPTY
82529: LIST
82530: LIST
82531: PUSH
82532: LD_INT 21
82534: PUSH
82535: LD_INT 2
82537: PUSH
82538: EMPTY
82539: LIST
82540: LIST
82541: PUSH
82542: EMPTY
82543: LIST
82544: LIST
82545: LIST
82546: PPUSH
82547: CALL_OW 69
82551: PUSH
82552: FOR_IN
82553: IFFALSE 82614
// if IsSelected ( i ) then
82555: LD_VAR 0 2
82559: PPUSH
82560: CALL_OW 306
82564: IFFALSE 82612
// begin if i in hInvincible then
82566: LD_VAR 0 2
82570: PUSH
82571: LD_EXP 118
82575: IN
82576: IFFALSE 82596
// hInvincible := hInvincible diff i else
82578: LD_ADDR_EXP 118
82582: PUSH
82583: LD_EXP 118
82587: PUSH
82588: LD_VAR 0 2
82592: DIFF
82593: ST_TO_ADDR
82594: GO 82612
// hInvincible := hInvincible union i ;
82596: LD_ADDR_EXP 118
82600: PUSH
82601: LD_EXP 118
82605: PUSH
82606: LD_VAR 0 2
82610: UNION
82611: ST_TO_ADDR
// end ;
82612: GO 82552
82614: POP
82615: POP
// end ;
82616: LD_VAR 0 1
82620: RET
// export function hHackInvisible ; var i , j ; begin
82621: LD_INT 0
82623: PPUSH
82624: PPUSH
82625: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82626: LD_ADDR_VAR 0 2
82630: PUSH
82631: LD_INT 21
82633: PUSH
82634: LD_INT 1
82636: PUSH
82637: EMPTY
82638: LIST
82639: LIST
82640: PPUSH
82641: CALL_OW 69
82645: PUSH
82646: FOR_IN
82647: IFFALSE 82671
// if IsSelected ( i ) then
82649: LD_VAR 0 2
82653: PPUSH
82654: CALL_OW 306
82658: IFFALSE 82669
// ComForceInvisible ( i ) ;
82660: LD_VAR 0 2
82664: PPUSH
82665: CALL_OW 496
82669: GO 82646
82671: POP
82672: POP
// end ;
82673: LD_VAR 0 1
82677: RET
// export function hHackChangeYourSide ; begin
82678: LD_INT 0
82680: PPUSH
// if your_side = 8 then
82681: LD_OWVAR 2
82685: PUSH
82686: LD_INT 8
82688: EQUAL
82689: IFFALSE 82701
// your_side := 0 else
82691: LD_ADDR_OWVAR 2
82695: PUSH
82696: LD_INT 0
82698: ST_TO_ADDR
82699: GO 82715
// your_side := your_side + 1 ;
82701: LD_ADDR_OWVAR 2
82705: PUSH
82706: LD_OWVAR 2
82710: PUSH
82711: LD_INT 1
82713: PLUS
82714: ST_TO_ADDR
// end ;
82715: LD_VAR 0 1
82719: RET
// export function hHackChangeUnitSide ; var i , j ; begin
82720: LD_INT 0
82722: PPUSH
82723: PPUSH
82724: PPUSH
// for i in all_units do
82725: LD_ADDR_VAR 0 2
82729: PUSH
82730: LD_OWVAR 3
82734: PUSH
82735: FOR_IN
82736: IFFALSE 82814
// if IsSelected ( i ) then
82738: LD_VAR 0 2
82742: PPUSH
82743: CALL_OW 306
82747: IFFALSE 82812
// begin j := GetSide ( i ) ;
82749: LD_ADDR_VAR 0 3
82753: PUSH
82754: LD_VAR 0 2
82758: PPUSH
82759: CALL_OW 255
82763: ST_TO_ADDR
// if j = 8 then
82764: LD_VAR 0 3
82768: PUSH
82769: LD_INT 8
82771: EQUAL
82772: IFFALSE 82784
// j := 0 else
82774: LD_ADDR_VAR 0 3
82778: PUSH
82779: LD_INT 0
82781: ST_TO_ADDR
82782: GO 82798
// j := j + 1 ;
82784: LD_ADDR_VAR 0 3
82788: PUSH
82789: LD_VAR 0 3
82793: PUSH
82794: LD_INT 1
82796: PLUS
82797: ST_TO_ADDR
// SetSide ( i , j ) ;
82798: LD_VAR 0 2
82802: PPUSH
82803: LD_VAR 0 3
82807: PPUSH
82808: CALL_OW 235
// end ;
82812: GO 82735
82814: POP
82815: POP
// end ;
82816: LD_VAR 0 1
82820: RET
// export function hHackFog ; begin
82821: LD_INT 0
82823: PPUSH
// FogOff ( true ) ;
82824: LD_INT 1
82826: PPUSH
82827: CALL_OW 344
// end ;
82831: LD_VAR 0 1
82835: RET
// export function hHackTeleport ( unit , x , y ) ; begin
82836: LD_INT 0
82838: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
82839: LD_VAR 0 1
82843: PPUSH
82844: LD_VAR 0 2
82848: PPUSH
82849: LD_VAR 0 3
82853: PPUSH
82854: LD_INT 1
82856: PPUSH
82857: LD_INT 1
82859: PPUSH
82860: CALL_OW 483
// CenterOnXY ( x , y ) ;
82864: LD_VAR 0 2
82868: PPUSH
82869: LD_VAR 0 3
82873: PPUSH
82874: CALL_OW 84
// end ;
82878: LD_VAR 0 4
82882: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
82883: LD_INT 0
82885: PPUSH
82886: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
82887: LD_VAR 0 1
82891: NOT
82892: PUSH
82893: LD_VAR 0 2
82897: PPUSH
82898: LD_VAR 0 3
82902: PPUSH
82903: CALL_OW 488
82907: NOT
82908: OR
82909: PUSH
82910: LD_VAR 0 1
82914: PPUSH
82915: CALL_OW 266
82919: PUSH
82920: LD_INT 3
82922: NONEQUAL
82923: PUSH
82924: LD_VAR 0 1
82928: PPUSH
82929: CALL_OW 247
82933: PUSH
82934: LD_INT 1
82936: EQUAL
82937: NOT
82938: AND
82939: OR
82940: IFFALSE 82944
// exit ;
82942: GO 83093
// if GetType ( factory ) = unit_human then
82944: LD_VAR 0 1
82948: PPUSH
82949: CALL_OW 247
82953: PUSH
82954: LD_INT 1
82956: EQUAL
82957: IFFALSE 82974
// factory := IsInUnit ( factory ) ;
82959: LD_ADDR_VAR 0 1
82963: PUSH
82964: LD_VAR 0 1
82968: PPUSH
82969: CALL_OW 310
82973: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
82974: LD_VAR 0 1
82978: PPUSH
82979: CALL_OW 266
82983: PUSH
82984: LD_INT 3
82986: NONEQUAL
82987: IFFALSE 82991
// exit ;
82989: GO 83093
// if HexInfo ( x , y ) = factory then
82991: LD_VAR 0 2
82995: PPUSH
82996: LD_VAR 0 3
83000: PPUSH
83001: CALL_OW 428
83005: PUSH
83006: LD_VAR 0 1
83010: EQUAL
83011: IFFALSE 83038
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
83013: LD_ADDR_EXP 119
83017: PUSH
83018: LD_EXP 119
83022: PPUSH
83023: LD_VAR 0 1
83027: PPUSH
83028: LD_INT 0
83030: PPUSH
83031: CALL_OW 1
83035: ST_TO_ADDR
83036: GO 83089
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
83038: LD_ADDR_EXP 119
83042: PUSH
83043: LD_EXP 119
83047: PPUSH
83048: LD_VAR 0 1
83052: PPUSH
83053: LD_VAR 0 1
83057: PPUSH
83058: CALL_OW 255
83062: PUSH
83063: LD_VAR 0 1
83067: PUSH
83068: LD_VAR 0 2
83072: PUSH
83073: LD_VAR 0 3
83077: PUSH
83078: EMPTY
83079: LIST
83080: LIST
83081: LIST
83082: LIST
83083: PPUSH
83084: CALL_OW 1
83088: ST_TO_ADDR
// UpdateFactoryWaypoints ;
83089: CALL 83098 0 0
// end ;
83093: LD_VAR 0 4
83097: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
83098: LD_INT 0
83100: PPUSH
83101: PPUSH
83102: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
83103: LD_STRING resetFactoryWaypoint();
83105: PPUSH
83106: CALL_OW 559
// if factoryWaypoints then
83110: LD_EXP 119
83114: IFFALSE 83240
// begin list := PrepareArray ( factoryWaypoints ) ;
83116: LD_ADDR_VAR 0 3
83120: PUSH
83121: LD_EXP 119
83125: PPUSH
83126: CALL 68350 0 1
83130: ST_TO_ADDR
// for i := 1 to list do
83131: LD_ADDR_VAR 0 2
83135: PUSH
83136: DOUBLE
83137: LD_INT 1
83139: DEC
83140: ST_TO_ADDR
83141: LD_VAR 0 3
83145: PUSH
83146: FOR_TO
83147: IFFALSE 83238
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
83149: LD_STRING setFactoryWaypointXY(
83151: PUSH
83152: LD_VAR 0 3
83156: PUSH
83157: LD_VAR 0 2
83161: ARRAY
83162: PUSH
83163: LD_INT 1
83165: ARRAY
83166: STR
83167: PUSH
83168: LD_STRING ,
83170: STR
83171: PUSH
83172: LD_VAR 0 3
83176: PUSH
83177: LD_VAR 0 2
83181: ARRAY
83182: PUSH
83183: LD_INT 2
83185: ARRAY
83186: STR
83187: PUSH
83188: LD_STRING ,
83190: STR
83191: PUSH
83192: LD_VAR 0 3
83196: PUSH
83197: LD_VAR 0 2
83201: ARRAY
83202: PUSH
83203: LD_INT 3
83205: ARRAY
83206: STR
83207: PUSH
83208: LD_STRING ,
83210: STR
83211: PUSH
83212: LD_VAR 0 3
83216: PUSH
83217: LD_VAR 0 2
83221: ARRAY
83222: PUSH
83223: LD_INT 4
83225: ARRAY
83226: STR
83227: PUSH
83228: LD_STRING )
83230: STR
83231: PPUSH
83232: CALL_OW 559
83236: GO 83146
83238: POP
83239: POP
// end ; end ;
83240: LD_VAR 0 1
83244: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
83245: LD_INT 0
83247: PPUSH
// if HexInfo ( x , y ) = warehouse then
83248: LD_VAR 0 2
83252: PPUSH
83253: LD_VAR 0 3
83257: PPUSH
83258: CALL_OW 428
83262: PUSH
83263: LD_VAR 0 1
83267: EQUAL
83268: IFFALSE 83295
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
83270: LD_ADDR_EXP 120
83274: PUSH
83275: LD_EXP 120
83279: PPUSH
83280: LD_VAR 0 1
83284: PPUSH
83285: LD_INT 0
83287: PPUSH
83288: CALL_OW 1
83292: ST_TO_ADDR
83293: GO 83346
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
83295: LD_ADDR_EXP 120
83299: PUSH
83300: LD_EXP 120
83304: PPUSH
83305: LD_VAR 0 1
83309: PPUSH
83310: LD_VAR 0 1
83314: PPUSH
83315: CALL_OW 255
83319: PUSH
83320: LD_VAR 0 1
83324: PUSH
83325: LD_VAR 0 2
83329: PUSH
83330: LD_VAR 0 3
83334: PUSH
83335: EMPTY
83336: LIST
83337: LIST
83338: LIST
83339: LIST
83340: PPUSH
83341: CALL_OW 1
83345: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
83346: CALL 83355 0 0
// end ;
83350: LD_VAR 0 4
83354: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
83355: LD_INT 0
83357: PPUSH
83358: PPUSH
83359: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
83360: LD_STRING resetWarehouseGatheringPoints();
83362: PPUSH
83363: CALL_OW 559
// if warehouseGatheringPoints then
83367: LD_EXP 120
83371: IFFALSE 83497
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
83373: LD_ADDR_VAR 0 3
83377: PUSH
83378: LD_EXP 120
83382: PPUSH
83383: CALL 68350 0 1
83387: ST_TO_ADDR
// for i := 1 to list do
83388: LD_ADDR_VAR 0 2
83392: PUSH
83393: DOUBLE
83394: LD_INT 1
83396: DEC
83397: ST_TO_ADDR
83398: LD_VAR 0 3
83402: PUSH
83403: FOR_TO
83404: IFFALSE 83495
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
83406: LD_STRING setWarehouseGatheringPointXY(
83408: PUSH
83409: LD_VAR 0 3
83413: PUSH
83414: LD_VAR 0 2
83418: ARRAY
83419: PUSH
83420: LD_INT 1
83422: ARRAY
83423: STR
83424: PUSH
83425: LD_STRING ,
83427: STR
83428: PUSH
83429: LD_VAR 0 3
83433: PUSH
83434: LD_VAR 0 2
83438: ARRAY
83439: PUSH
83440: LD_INT 2
83442: ARRAY
83443: STR
83444: PUSH
83445: LD_STRING ,
83447: STR
83448: PUSH
83449: LD_VAR 0 3
83453: PUSH
83454: LD_VAR 0 2
83458: ARRAY
83459: PUSH
83460: LD_INT 3
83462: ARRAY
83463: STR
83464: PUSH
83465: LD_STRING ,
83467: STR
83468: PUSH
83469: LD_VAR 0 3
83473: PUSH
83474: LD_VAR 0 2
83478: ARRAY
83479: PUSH
83480: LD_INT 4
83482: ARRAY
83483: STR
83484: PUSH
83485: LD_STRING )
83487: STR
83488: PPUSH
83489: CALL_OW 559
83493: GO 83403
83495: POP
83496: POP
// end ; end ;
83497: LD_VAR 0 1
83501: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
83502: LD_EXP 120
83506: IFFALSE 84191
83508: GO 83510
83510: DISABLE
83511: LD_INT 0
83513: PPUSH
83514: PPUSH
83515: PPUSH
83516: PPUSH
83517: PPUSH
83518: PPUSH
83519: PPUSH
83520: PPUSH
83521: PPUSH
// begin enable ;
83522: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
83523: LD_ADDR_VAR 0 3
83527: PUSH
83528: LD_EXP 120
83532: PPUSH
83533: CALL 68350 0 1
83537: ST_TO_ADDR
// if not list then
83538: LD_VAR 0 3
83542: NOT
83543: IFFALSE 83547
// exit ;
83545: GO 84191
// for i := 1 to list do
83547: LD_ADDR_VAR 0 1
83551: PUSH
83552: DOUBLE
83553: LD_INT 1
83555: DEC
83556: ST_TO_ADDR
83557: LD_VAR 0 3
83561: PUSH
83562: FOR_TO
83563: IFFALSE 84189
// begin depot := list [ i ] [ 2 ] ;
83565: LD_ADDR_VAR 0 8
83569: PUSH
83570: LD_VAR 0 3
83574: PUSH
83575: LD_VAR 0 1
83579: ARRAY
83580: PUSH
83581: LD_INT 2
83583: ARRAY
83584: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
83585: LD_ADDR_VAR 0 5
83589: PUSH
83590: LD_VAR 0 3
83594: PUSH
83595: LD_VAR 0 1
83599: ARRAY
83600: PUSH
83601: LD_INT 1
83603: ARRAY
83604: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
83605: LD_VAR 0 8
83609: PPUSH
83610: CALL_OW 301
83614: PUSH
83615: LD_VAR 0 5
83619: PUSH
83620: LD_VAR 0 8
83624: PPUSH
83625: CALL_OW 255
83629: NONEQUAL
83630: OR
83631: IFFALSE 83660
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
83633: LD_ADDR_EXP 120
83637: PUSH
83638: LD_EXP 120
83642: PPUSH
83643: LD_VAR 0 8
83647: PPUSH
83648: LD_INT 0
83650: PPUSH
83651: CALL_OW 1
83655: ST_TO_ADDR
// exit ;
83656: POP
83657: POP
83658: GO 84191
// end ; x := list [ i ] [ 3 ] ;
83660: LD_ADDR_VAR 0 6
83664: PUSH
83665: LD_VAR 0 3
83669: PUSH
83670: LD_VAR 0 1
83674: ARRAY
83675: PUSH
83676: LD_INT 3
83678: ARRAY
83679: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
83680: LD_ADDR_VAR 0 7
83684: PUSH
83685: LD_VAR 0 3
83689: PUSH
83690: LD_VAR 0 1
83694: ARRAY
83695: PUSH
83696: LD_INT 4
83698: ARRAY
83699: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
83700: LD_ADDR_VAR 0 9
83704: PUSH
83705: LD_VAR 0 6
83709: PPUSH
83710: LD_VAR 0 7
83714: PPUSH
83715: LD_INT 16
83717: PPUSH
83718: CALL 66938 0 3
83722: ST_TO_ADDR
// if not cratesNearbyPoint then
83723: LD_VAR 0 9
83727: NOT
83728: IFFALSE 83734
// exit ;
83730: POP
83731: POP
83732: GO 84191
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
83734: LD_ADDR_VAR 0 4
83738: PUSH
83739: LD_INT 22
83741: PUSH
83742: LD_VAR 0 5
83746: PUSH
83747: EMPTY
83748: LIST
83749: LIST
83750: PUSH
83751: LD_INT 3
83753: PUSH
83754: LD_INT 60
83756: PUSH
83757: EMPTY
83758: LIST
83759: PUSH
83760: EMPTY
83761: LIST
83762: LIST
83763: PUSH
83764: LD_INT 91
83766: PUSH
83767: LD_VAR 0 8
83771: PUSH
83772: LD_INT 6
83774: PUSH
83775: EMPTY
83776: LIST
83777: LIST
83778: LIST
83779: PUSH
83780: LD_INT 2
83782: PUSH
83783: LD_INT 25
83785: PUSH
83786: LD_INT 2
83788: PUSH
83789: EMPTY
83790: LIST
83791: LIST
83792: PUSH
83793: LD_INT 25
83795: PUSH
83796: LD_INT 16
83798: PUSH
83799: EMPTY
83800: LIST
83801: LIST
83802: PUSH
83803: EMPTY
83804: LIST
83805: LIST
83806: LIST
83807: PUSH
83808: EMPTY
83809: LIST
83810: LIST
83811: LIST
83812: LIST
83813: PPUSH
83814: CALL_OW 69
83818: PUSH
83819: LD_VAR 0 8
83823: PPUSH
83824: CALL_OW 313
83828: PPUSH
83829: LD_INT 3
83831: PUSH
83832: LD_INT 60
83834: PUSH
83835: EMPTY
83836: LIST
83837: PUSH
83838: EMPTY
83839: LIST
83840: LIST
83841: PUSH
83842: LD_INT 2
83844: PUSH
83845: LD_INT 25
83847: PUSH
83848: LD_INT 2
83850: PUSH
83851: EMPTY
83852: LIST
83853: LIST
83854: PUSH
83855: LD_INT 25
83857: PUSH
83858: LD_INT 16
83860: PUSH
83861: EMPTY
83862: LIST
83863: LIST
83864: PUSH
83865: EMPTY
83866: LIST
83867: LIST
83868: LIST
83869: PUSH
83870: EMPTY
83871: LIST
83872: LIST
83873: PPUSH
83874: CALL_OW 72
83878: UNION
83879: ST_TO_ADDR
// if tmp then
83880: LD_VAR 0 4
83884: IFFALSE 83964
// begin tmp := ShrinkArray ( tmp , 3 ) ;
83886: LD_ADDR_VAR 0 4
83890: PUSH
83891: LD_VAR 0 4
83895: PPUSH
83896: LD_INT 3
83898: PPUSH
83899: CALL 64907 0 2
83903: ST_TO_ADDR
// for j in tmp do
83904: LD_ADDR_VAR 0 2
83908: PUSH
83909: LD_VAR 0 4
83913: PUSH
83914: FOR_IN
83915: IFFALSE 83958
// begin if IsInUnit ( j ) then
83917: LD_VAR 0 2
83921: PPUSH
83922: CALL_OW 310
83926: IFFALSE 83937
// ComExit ( j ) ;
83928: LD_VAR 0 2
83932: PPUSH
83933: CALL 64990 0 1
// AddComCollect ( j , x , y ) ;
83937: LD_VAR 0 2
83941: PPUSH
83942: LD_VAR 0 6
83946: PPUSH
83947: LD_VAR 0 7
83951: PPUSH
83952: CALL_OW 177
// end ;
83956: GO 83914
83958: POP
83959: POP
// exit ;
83960: POP
83961: POP
83962: GO 84191
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
83964: LD_ADDR_VAR 0 4
83968: PUSH
83969: LD_INT 22
83971: PUSH
83972: LD_VAR 0 5
83976: PUSH
83977: EMPTY
83978: LIST
83979: LIST
83980: PUSH
83981: LD_INT 91
83983: PUSH
83984: LD_VAR 0 8
83988: PUSH
83989: LD_INT 8
83991: PUSH
83992: EMPTY
83993: LIST
83994: LIST
83995: LIST
83996: PUSH
83997: LD_INT 2
83999: PUSH
84000: LD_INT 34
84002: PUSH
84003: LD_INT 12
84005: PUSH
84006: EMPTY
84007: LIST
84008: LIST
84009: PUSH
84010: LD_INT 34
84012: PUSH
84013: LD_INT 51
84015: PUSH
84016: EMPTY
84017: LIST
84018: LIST
84019: PUSH
84020: LD_INT 34
84022: PUSH
84023: LD_INT 32
84025: PUSH
84026: EMPTY
84027: LIST
84028: LIST
84029: PUSH
84030: LD_INT 34
84032: PUSH
84033: LD_INT 89
84035: PUSH
84036: EMPTY
84037: LIST
84038: LIST
84039: PUSH
84040: EMPTY
84041: LIST
84042: LIST
84043: LIST
84044: LIST
84045: LIST
84046: PUSH
84047: EMPTY
84048: LIST
84049: LIST
84050: LIST
84051: PPUSH
84052: CALL_OW 69
84056: ST_TO_ADDR
// if tmp then
84057: LD_VAR 0 4
84061: IFFALSE 84187
// begin for j in tmp do
84063: LD_ADDR_VAR 0 2
84067: PUSH
84068: LD_VAR 0 4
84072: PUSH
84073: FOR_IN
84074: IFFALSE 84185
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
84076: LD_VAR 0 2
84080: PPUSH
84081: CALL_OW 262
84085: PUSH
84086: LD_INT 3
84088: EQUAL
84089: PUSH
84090: LD_VAR 0 2
84094: PPUSH
84095: CALL_OW 261
84099: PUSH
84100: LD_INT 20
84102: GREATER
84103: OR
84104: PUSH
84105: LD_VAR 0 2
84109: PPUSH
84110: CALL_OW 314
84114: NOT
84115: AND
84116: PUSH
84117: LD_VAR 0 2
84121: PPUSH
84122: CALL_OW 263
84126: PUSH
84127: LD_INT 1
84129: NONEQUAL
84130: PUSH
84131: LD_VAR 0 2
84135: PPUSH
84136: CALL_OW 311
84140: OR
84141: AND
84142: IFFALSE 84183
// begin ComCollect ( j , x , y ) ;
84144: LD_VAR 0 2
84148: PPUSH
84149: LD_VAR 0 6
84153: PPUSH
84154: LD_VAR 0 7
84158: PPUSH
84159: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
84163: LD_VAR 0 2
84167: PPUSH
84168: LD_VAR 0 8
84172: PPUSH
84173: CALL_OW 172
// exit ;
84177: POP
84178: POP
84179: POP
84180: POP
84181: GO 84191
// end ;
84183: GO 84073
84185: POP
84186: POP
// end ; end ;
84187: GO 83562
84189: POP
84190: POP
// end ; end_of_file
84191: PPOPN 9
84193: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84194: LD_VAR 0 1
84198: PUSH
84199: LD_INT 200
84201: DOUBLE
84202: GREATEREQUAL
84203: IFFALSE 84211
84205: LD_INT 299
84207: DOUBLE
84208: LESSEQUAL
84209: IFTRUE 84213
84211: GO 84245
84213: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84214: LD_VAR 0 1
84218: PPUSH
84219: LD_VAR 0 2
84223: PPUSH
84224: LD_VAR 0 3
84228: PPUSH
84229: LD_VAR 0 4
84233: PPUSH
84234: LD_VAR 0 5
84238: PPUSH
84239: CALL 84733 0 5
84243: GO 84322
84245: LD_INT 300
84247: DOUBLE
84248: GREATEREQUAL
84249: IFFALSE 84257
84251: LD_INT 399
84253: DOUBLE
84254: LESSEQUAL
84255: IFTRUE 84259
84257: GO 84321
84259: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84260: LD_VAR 0 1
84264: PPUSH
84265: LD_VAR 0 2
84269: PPUSH
84270: LD_VAR 0 3
84274: PPUSH
84275: LD_VAR 0 4
84279: PPUSH
84280: LD_VAR 0 5
84284: PPUSH
84285: LD_VAR 0 6
84289: PPUSH
84290: LD_VAR 0 7
84294: PPUSH
84295: LD_VAR 0 8
84299: PPUSH
84300: LD_VAR 0 9
84304: PPUSH
84305: LD_VAR 0 10
84309: PPUSH
84310: LD_VAR 0 11
84314: PPUSH
84315: CALL 80903 0 11
84319: GO 84322
84321: POP
// end ;
84322: PPOPN 11
84324: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84325: LD_VAR 0 1
84329: PPUSH
84330: LD_VAR 0 2
84334: PPUSH
84335: LD_VAR 0 3
84339: PPUSH
84340: LD_VAR 0 4
84344: PPUSH
84345: LD_VAR 0 5
84349: PPUSH
84350: CALL 84469 0 5
// end ; end_of_file
84354: PPOPN 5
84356: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
84357: LD_INT 0
84359: PPUSH
84360: PPUSH
84361: PPUSH
84362: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
84363: LD_VAR 0 1
84367: PPUSH
84368: CALL_OW 264
84372: PUSH
84373: LD_INT 91
84375: EQUAL
84376: IFFALSE 84448
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
84378: LD_INT 68
84380: PPUSH
84381: LD_VAR 0 1
84385: PPUSH
84386: CALL_OW 255
84390: PPUSH
84391: CALL_OW 321
84395: PUSH
84396: LD_INT 2
84398: EQUAL
84399: IFFALSE 84411
// eff := 70 else
84401: LD_ADDR_VAR 0 4
84405: PUSH
84406: LD_INT 70
84408: ST_TO_ADDR
84409: GO 84419
// eff := 30 ;
84411: LD_ADDR_VAR 0 4
84415: PUSH
84416: LD_INT 30
84418: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
84419: LD_VAR 0 1
84423: PPUSH
84424: CALL_OW 250
84428: PPUSH
84429: LD_VAR 0 1
84433: PPUSH
84434: CALL_OW 251
84438: PPUSH
84439: LD_VAR 0 4
84443: PPUSH
84444: CALL_OW 495
// end ; end ;
84448: LD_VAR 0 2
84452: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
84453: LD_INT 0
84455: PPUSH
// end ;
84456: LD_VAR 0 4
84460: RET
// export function SOS_Command ( cmd ) ; begin
84461: LD_INT 0
84463: PPUSH
// end ;
84464: LD_VAR 0 2
84468: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
84469: LD_INT 0
84471: PPUSH
// end ;
84472: LD_VAR 0 6
84476: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
84477: LD_INT 0
84479: PPUSH
84480: PPUSH
// if not vehicle or not factory then
84481: LD_VAR 0 1
84485: NOT
84486: PUSH
84487: LD_VAR 0 2
84491: NOT
84492: OR
84493: IFFALSE 84497
// exit ;
84495: GO 84728
// if factoryWaypoints >= factory then
84497: LD_EXP 119
84501: PUSH
84502: LD_VAR 0 2
84506: GREATEREQUAL
84507: IFFALSE 84728
// if factoryWaypoints [ factory ] then
84509: LD_EXP 119
84513: PUSH
84514: LD_VAR 0 2
84518: ARRAY
84519: IFFALSE 84728
// begin if GetControl ( vehicle ) = control_manual then
84521: LD_VAR 0 1
84525: PPUSH
84526: CALL_OW 263
84530: PUSH
84531: LD_INT 1
84533: EQUAL
84534: IFFALSE 84615
// begin driver := IsDrivenBy ( vehicle ) ;
84536: LD_ADDR_VAR 0 4
84540: PUSH
84541: LD_VAR 0 1
84545: PPUSH
84546: CALL_OW 311
84550: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84551: LD_VAR 0 4
84555: PPUSH
84556: LD_EXP 119
84560: PUSH
84561: LD_VAR 0 2
84565: ARRAY
84566: PUSH
84567: LD_INT 3
84569: ARRAY
84570: PPUSH
84571: LD_EXP 119
84575: PUSH
84576: LD_VAR 0 2
84580: ARRAY
84581: PUSH
84582: LD_INT 4
84584: ARRAY
84585: PPUSH
84586: CALL_OW 171
// AddComExitVehicle ( driver ) ;
84590: LD_VAR 0 4
84594: PPUSH
84595: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
84599: LD_VAR 0 4
84603: PPUSH
84604: LD_VAR 0 2
84608: PPUSH
84609: CALL_OW 180
// end else
84613: GO 84728
// if GetControl ( vehicle ) = control_remote then
84615: LD_VAR 0 1
84619: PPUSH
84620: CALL_OW 263
84624: PUSH
84625: LD_INT 2
84627: EQUAL
84628: IFFALSE 84689
// begin wait ( 0 0$2 ) ;
84630: LD_INT 70
84632: PPUSH
84633: CALL_OW 67
// if Connect ( vehicle ) then
84637: LD_VAR 0 1
84641: PPUSH
84642: CALL 35249 0 1
84646: IFFALSE 84687
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84648: LD_VAR 0 1
84652: PPUSH
84653: LD_EXP 119
84657: PUSH
84658: LD_VAR 0 2
84662: ARRAY
84663: PUSH
84664: LD_INT 3
84666: ARRAY
84667: PPUSH
84668: LD_EXP 119
84672: PUSH
84673: LD_VAR 0 2
84677: ARRAY
84678: PUSH
84679: LD_INT 4
84681: ARRAY
84682: PPUSH
84683: CALL_OW 171
// end else
84687: GO 84728
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84689: LD_VAR 0 1
84693: PPUSH
84694: LD_EXP 119
84698: PUSH
84699: LD_VAR 0 2
84703: ARRAY
84704: PUSH
84705: LD_INT 3
84707: ARRAY
84708: PPUSH
84709: LD_EXP 119
84713: PUSH
84714: LD_VAR 0 2
84718: ARRAY
84719: PUSH
84720: LD_INT 4
84722: ARRAY
84723: PPUSH
84724: CALL_OW 171
// end ; end ;
84728: LD_VAR 0 3
84732: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
84733: LD_INT 0
84735: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
84736: LD_VAR 0 1
84740: PUSH
84741: LD_INT 250
84743: EQUAL
84744: PUSH
84745: LD_VAR 0 2
84749: PPUSH
84750: CALL_OW 264
84754: PUSH
84755: LD_INT 81
84757: EQUAL
84758: AND
84759: IFFALSE 84780
// MinerPlaceMine ( unit , x , y ) ;
84761: LD_VAR 0 2
84765: PPUSH
84766: LD_VAR 0 4
84770: PPUSH
84771: LD_VAR 0 5
84775: PPUSH
84776: CALL 87165 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
84780: LD_VAR 0 1
84784: PUSH
84785: LD_INT 251
84787: EQUAL
84788: PUSH
84789: LD_VAR 0 2
84793: PPUSH
84794: CALL_OW 264
84798: PUSH
84799: LD_INT 81
84801: EQUAL
84802: AND
84803: IFFALSE 84824
// MinerDetonateMine ( unit , x , y ) ;
84805: LD_VAR 0 2
84809: PPUSH
84810: LD_VAR 0 4
84814: PPUSH
84815: LD_VAR 0 5
84819: PPUSH
84820: CALL 87440 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
84824: LD_VAR 0 1
84828: PUSH
84829: LD_INT 252
84831: EQUAL
84832: PUSH
84833: LD_VAR 0 2
84837: PPUSH
84838: CALL_OW 264
84842: PUSH
84843: LD_INT 81
84845: EQUAL
84846: AND
84847: IFFALSE 84868
// MinerCreateMinefield ( unit , x , y ) ;
84849: LD_VAR 0 2
84853: PPUSH
84854: LD_VAR 0 4
84858: PPUSH
84859: LD_VAR 0 5
84863: PPUSH
84864: CALL 87857 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
84868: LD_VAR 0 1
84872: PUSH
84873: LD_INT 253
84875: EQUAL
84876: PUSH
84877: LD_VAR 0 2
84881: PPUSH
84882: CALL_OW 257
84886: PUSH
84887: LD_INT 5
84889: EQUAL
84890: AND
84891: IFFALSE 84912
// ComBinocular ( unit , x , y ) ;
84893: LD_VAR 0 2
84897: PPUSH
84898: LD_VAR 0 4
84902: PPUSH
84903: LD_VAR 0 5
84907: PPUSH
84908: CALL 88226 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
84912: LD_VAR 0 1
84916: PUSH
84917: LD_INT 254
84919: EQUAL
84920: PUSH
84921: LD_VAR 0 2
84925: PPUSH
84926: CALL_OW 264
84930: PUSH
84931: LD_INT 99
84933: EQUAL
84934: AND
84935: PUSH
84936: LD_VAR 0 3
84940: PPUSH
84941: CALL_OW 263
84945: PUSH
84946: LD_INT 3
84948: EQUAL
84949: AND
84950: IFFALSE 84966
// HackDestroyVehicle ( unit , selectedUnit ) ;
84952: LD_VAR 0 2
84956: PPUSH
84957: LD_VAR 0 3
84961: PPUSH
84962: CALL 86529 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
84966: LD_VAR 0 1
84970: PUSH
84971: LD_INT 255
84973: EQUAL
84974: PUSH
84975: LD_VAR 0 2
84979: PPUSH
84980: CALL_OW 264
84984: PUSH
84985: LD_INT 14
84987: PUSH
84988: LD_INT 53
84990: PUSH
84991: EMPTY
84992: LIST
84993: LIST
84994: IN
84995: AND
84996: PUSH
84997: LD_VAR 0 4
85001: PPUSH
85002: LD_VAR 0 5
85006: PPUSH
85007: CALL_OW 488
85011: AND
85012: IFFALSE 85036
// CutTreeXYR ( unit , x , y , 12 ) ;
85014: LD_VAR 0 2
85018: PPUSH
85019: LD_VAR 0 4
85023: PPUSH
85024: LD_VAR 0 5
85028: PPUSH
85029: LD_INT 12
85031: PPUSH
85032: CALL 85099 0 4
// if cmd = 256 then
85036: LD_VAR 0 1
85040: PUSH
85041: LD_INT 256
85043: EQUAL
85044: IFFALSE 85065
// SetFactoryWaypoint ( unit , x , y ) ;
85046: LD_VAR 0 2
85050: PPUSH
85051: LD_VAR 0 4
85055: PPUSH
85056: LD_VAR 0 5
85060: PPUSH
85061: CALL 82883 0 3
// if cmd = 257 then
85065: LD_VAR 0 1
85069: PUSH
85070: LD_INT 257
85072: EQUAL
85073: IFFALSE 85094
// SetWarehouseGatheringPoint ( unit , x , y ) ;
85075: LD_VAR 0 2
85079: PPUSH
85080: LD_VAR 0 4
85084: PPUSH
85085: LD_VAR 0 5
85089: PPUSH
85090: CALL 83245 0 3
// end ;
85094: LD_VAR 0 6
85098: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
85099: LD_INT 0
85101: PPUSH
85102: PPUSH
85103: PPUSH
85104: PPUSH
85105: PPUSH
85106: PPUSH
85107: PPUSH
85108: PPUSH
85109: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
85110: LD_VAR 0 1
85114: NOT
85115: PUSH
85116: LD_VAR 0 2
85120: PPUSH
85121: LD_VAR 0 3
85125: PPUSH
85126: CALL_OW 488
85130: NOT
85131: OR
85132: PUSH
85133: LD_VAR 0 4
85137: NOT
85138: OR
85139: IFFALSE 85143
// exit ;
85141: GO 85483
// list := [ ] ;
85143: LD_ADDR_VAR 0 13
85147: PUSH
85148: EMPTY
85149: ST_TO_ADDR
// if x - r < 0 then
85150: LD_VAR 0 2
85154: PUSH
85155: LD_VAR 0 4
85159: MINUS
85160: PUSH
85161: LD_INT 0
85163: LESS
85164: IFFALSE 85176
// min_x := 0 else
85166: LD_ADDR_VAR 0 7
85170: PUSH
85171: LD_INT 0
85173: ST_TO_ADDR
85174: GO 85192
// min_x := x - r ;
85176: LD_ADDR_VAR 0 7
85180: PUSH
85181: LD_VAR 0 2
85185: PUSH
85186: LD_VAR 0 4
85190: MINUS
85191: ST_TO_ADDR
// if y - r < 0 then
85192: LD_VAR 0 3
85196: PUSH
85197: LD_VAR 0 4
85201: MINUS
85202: PUSH
85203: LD_INT 0
85205: LESS
85206: IFFALSE 85218
// min_y := 0 else
85208: LD_ADDR_VAR 0 8
85212: PUSH
85213: LD_INT 0
85215: ST_TO_ADDR
85216: GO 85234
// min_y := y - r ;
85218: LD_ADDR_VAR 0 8
85222: PUSH
85223: LD_VAR 0 3
85227: PUSH
85228: LD_VAR 0 4
85232: MINUS
85233: ST_TO_ADDR
// max_x := x + r ;
85234: LD_ADDR_VAR 0 9
85238: PUSH
85239: LD_VAR 0 2
85243: PUSH
85244: LD_VAR 0 4
85248: PLUS
85249: ST_TO_ADDR
// max_y := y + r ;
85250: LD_ADDR_VAR 0 10
85254: PUSH
85255: LD_VAR 0 3
85259: PUSH
85260: LD_VAR 0 4
85264: PLUS
85265: ST_TO_ADDR
// for _x = min_x to max_x do
85266: LD_ADDR_VAR 0 11
85270: PUSH
85271: DOUBLE
85272: LD_VAR 0 7
85276: DEC
85277: ST_TO_ADDR
85278: LD_VAR 0 9
85282: PUSH
85283: FOR_TO
85284: IFFALSE 85401
// for _y = min_y to max_y do
85286: LD_ADDR_VAR 0 12
85290: PUSH
85291: DOUBLE
85292: LD_VAR 0 8
85296: DEC
85297: ST_TO_ADDR
85298: LD_VAR 0 10
85302: PUSH
85303: FOR_TO
85304: IFFALSE 85397
// begin if not ValidHex ( _x , _y ) then
85306: LD_VAR 0 11
85310: PPUSH
85311: LD_VAR 0 12
85315: PPUSH
85316: CALL_OW 488
85320: NOT
85321: IFFALSE 85325
// continue ;
85323: GO 85303
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
85325: LD_VAR 0 11
85329: PPUSH
85330: LD_VAR 0 12
85334: PPUSH
85335: CALL_OW 351
85339: PUSH
85340: LD_VAR 0 11
85344: PPUSH
85345: LD_VAR 0 12
85349: PPUSH
85350: CALL_OW 554
85354: AND
85355: IFFALSE 85395
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
85357: LD_ADDR_VAR 0 13
85361: PUSH
85362: LD_VAR 0 13
85366: PPUSH
85367: LD_VAR 0 13
85371: PUSH
85372: LD_INT 1
85374: PLUS
85375: PPUSH
85376: LD_VAR 0 11
85380: PUSH
85381: LD_VAR 0 12
85385: PUSH
85386: EMPTY
85387: LIST
85388: LIST
85389: PPUSH
85390: CALL_OW 2
85394: ST_TO_ADDR
// end ;
85395: GO 85303
85397: POP
85398: POP
85399: GO 85283
85401: POP
85402: POP
// if not list then
85403: LD_VAR 0 13
85407: NOT
85408: IFFALSE 85412
// exit ;
85410: GO 85483
// for i in list do
85412: LD_ADDR_VAR 0 6
85416: PUSH
85417: LD_VAR 0 13
85421: PUSH
85422: FOR_IN
85423: IFFALSE 85481
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
85425: LD_VAR 0 1
85429: PPUSH
85430: LD_STRING M
85432: PUSH
85433: LD_VAR 0 6
85437: PUSH
85438: LD_INT 1
85440: ARRAY
85441: PUSH
85442: LD_VAR 0 6
85446: PUSH
85447: LD_INT 2
85449: ARRAY
85450: PUSH
85451: LD_INT 0
85453: PUSH
85454: LD_INT 0
85456: PUSH
85457: LD_INT 0
85459: PUSH
85460: LD_INT 0
85462: PUSH
85463: EMPTY
85464: LIST
85465: LIST
85466: LIST
85467: LIST
85468: LIST
85469: LIST
85470: LIST
85471: PUSH
85472: EMPTY
85473: LIST
85474: PPUSH
85475: CALL_OW 447
85479: GO 85422
85481: POP
85482: POP
// end ;
85483: LD_VAR 0 5
85487: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
85488: LD_EXP 122
85492: NOT
85493: IFFALSE 85543
85495: GO 85497
85497: DISABLE
// begin initHack := true ;
85498: LD_ADDR_EXP 122
85502: PUSH
85503: LD_INT 1
85505: ST_TO_ADDR
// hackTanks := [ ] ;
85506: LD_ADDR_EXP 123
85510: PUSH
85511: EMPTY
85512: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
85513: LD_ADDR_EXP 124
85517: PUSH
85518: EMPTY
85519: ST_TO_ADDR
// hackLimit := 3 ;
85520: LD_ADDR_EXP 125
85524: PUSH
85525: LD_INT 3
85527: ST_TO_ADDR
// hackDist := 12 ;
85528: LD_ADDR_EXP 126
85532: PUSH
85533: LD_INT 12
85535: ST_TO_ADDR
// hackCounter := [ ] ;
85536: LD_ADDR_EXP 127
85540: PUSH
85541: EMPTY
85542: ST_TO_ADDR
// end ;
85543: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
85544: LD_EXP 122
85548: PUSH
85549: LD_INT 34
85551: PUSH
85552: LD_INT 99
85554: PUSH
85555: EMPTY
85556: LIST
85557: LIST
85558: PPUSH
85559: CALL_OW 69
85563: AND
85564: IFFALSE 85817
85566: GO 85568
85568: DISABLE
85569: LD_INT 0
85571: PPUSH
85572: PPUSH
// begin enable ;
85573: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
85574: LD_ADDR_VAR 0 1
85578: PUSH
85579: LD_INT 34
85581: PUSH
85582: LD_INT 99
85584: PUSH
85585: EMPTY
85586: LIST
85587: LIST
85588: PPUSH
85589: CALL_OW 69
85593: PUSH
85594: FOR_IN
85595: IFFALSE 85815
// begin if not i in hackTanks then
85597: LD_VAR 0 1
85601: PUSH
85602: LD_EXP 123
85606: IN
85607: NOT
85608: IFFALSE 85691
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
85610: LD_ADDR_EXP 123
85614: PUSH
85615: LD_EXP 123
85619: PPUSH
85620: LD_EXP 123
85624: PUSH
85625: LD_INT 1
85627: PLUS
85628: PPUSH
85629: LD_VAR 0 1
85633: PPUSH
85634: CALL_OW 1
85638: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
85639: LD_ADDR_EXP 124
85643: PUSH
85644: LD_EXP 124
85648: PPUSH
85649: LD_EXP 124
85653: PUSH
85654: LD_INT 1
85656: PLUS
85657: PPUSH
85658: EMPTY
85659: PPUSH
85660: CALL_OW 1
85664: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
85665: LD_ADDR_EXP 127
85669: PUSH
85670: LD_EXP 127
85674: PPUSH
85675: LD_EXP 127
85679: PUSH
85680: LD_INT 1
85682: PLUS
85683: PPUSH
85684: EMPTY
85685: PPUSH
85686: CALL_OW 1
85690: ST_TO_ADDR
// end ; if not IsOk ( i ) then
85691: LD_VAR 0 1
85695: PPUSH
85696: CALL_OW 302
85700: NOT
85701: IFFALSE 85714
// begin HackUnlinkAll ( i ) ;
85703: LD_VAR 0 1
85707: PPUSH
85708: CALL 85820 0 1
// continue ;
85712: GO 85594
// end ; HackCheckCapturedStatus ( i ) ;
85714: LD_VAR 0 1
85718: PPUSH
85719: CALL 86263 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
85723: LD_ADDR_VAR 0 2
85727: PUSH
85728: LD_INT 81
85730: PUSH
85731: LD_VAR 0 1
85735: PPUSH
85736: CALL_OW 255
85740: PUSH
85741: EMPTY
85742: LIST
85743: LIST
85744: PUSH
85745: LD_INT 33
85747: PUSH
85748: LD_INT 3
85750: PUSH
85751: EMPTY
85752: LIST
85753: LIST
85754: PUSH
85755: LD_INT 91
85757: PUSH
85758: LD_VAR 0 1
85762: PUSH
85763: LD_EXP 126
85767: PUSH
85768: EMPTY
85769: LIST
85770: LIST
85771: LIST
85772: PUSH
85773: LD_INT 50
85775: PUSH
85776: EMPTY
85777: LIST
85778: PUSH
85779: EMPTY
85780: LIST
85781: LIST
85782: LIST
85783: LIST
85784: PPUSH
85785: CALL_OW 69
85789: ST_TO_ADDR
// if not tmp then
85790: LD_VAR 0 2
85794: NOT
85795: IFFALSE 85799
// continue ;
85797: GO 85594
// HackLink ( i , tmp ) ;
85799: LD_VAR 0 1
85803: PPUSH
85804: LD_VAR 0 2
85808: PPUSH
85809: CALL 85956 0 2
// end ;
85813: GO 85594
85815: POP
85816: POP
// end ;
85817: PPOPN 2
85819: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
85820: LD_INT 0
85822: PPUSH
85823: PPUSH
85824: PPUSH
// if not hack in hackTanks then
85825: LD_VAR 0 1
85829: PUSH
85830: LD_EXP 123
85834: IN
85835: NOT
85836: IFFALSE 85840
// exit ;
85838: GO 85951
// index := GetElementIndex ( hackTanks , hack ) ;
85840: LD_ADDR_VAR 0 4
85844: PUSH
85845: LD_EXP 123
85849: PPUSH
85850: LD_VAR 0 1
85854: PPUSH
85855: CALL 32065 0 2
85859: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
85860: LD_EXP 124
85864: PUSH
85865: LD_VAR 0 4
85869: ARRAY
85870: IFFALSE 85951
// begin for i in hackTanksCaptured [ index ] do
85872: LD_ADDR_VAR 0 3
85876: PUSH
85877: LD_EXP 124
85881: PUSH
85882: LD_VAR 0 4
85886: ARRAY
85887: PUSH
85888: FOR_IN
85889: IFFALSE 85915
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
85891: LD_VAR 0 3
85895: PUSH
85896: LD_INT 1
85898: ARRAY
85899: PPUSH
85900: LD_VAR 0 3
85904: PUSH
85905: LD_INT 2
85907: ARRAY
85908: PPUSH
85909: CALL_OW 235
85913: GO 85888
85915: POP
85916: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
85917: LD_ADDR_EXP 124
85921: PUSH
85922: LD_EXP 124
85926: PPUSH
85927: LD_VAR 0 4
85931: PPUSH
85932: EMPTY
85933: PPUSH
85934: CALL_OW 1
85938: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
85939: LD_VAR 0 1
85943: PPUSH
85944: LD_INT 0
85946: PPUSH
85947: CALL_OW 505
// end ; end ;
85951: LD_VAR 0 2
85955: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
85956: LD_INT 0
85958: PPUSH
85959: PPUSH
85960: PPUSH
// if not hack in hackTanks or not vehicles then
85961: LD_VAR 0 1
85965: PUSH
85966: LD_EXP 123
85970: IN
85971: NOT
85972: PUSH
85973: LD_VAR 0 2
85977: NOT
85978: OR
85979: IFFALSE 85983
// exit ;
85981: GO 86258
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
85983: LD_ADDR_VAR 0 2
85987: PUSH
85988: LD_VAR 0 1
85992: PPUSH
85993: LD_VAR 0 2
85997: PPUSH
85998: LD_INT 1
86000: PPUSH
86001: LD_INT 1
86003: PPUSH
86004: CALL 32715 0 4
86008: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
86009: LD_ADDR_VAR 0 5
86013: PUSH
86014: LD_EXP 123
86018: PPUSH
86019: LD_VAR 0 1
86023: PPUSH
86024: CALL 32065 0 2
86028: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
86029: LD_EXP 124
86033: PUSH
86034: LD_VAR 0 5
86038: ARRAY
86039: PUSH
86040: LD_EXP 125
86044: LESS
86045: IFFALSE 86234
// begin for i := 1 to vehicles do
86047: LD_ADDR_VAR 0 4
86051: PUSH
86052: DOUBLE
86053: LD_INT 1
86055: DEC
86056: ST_TO_ADDR
86057: LD_VAR 0 2
86061: PUSH
86062: FOR_TO
86063: IFFALSE 86232
// begin if hackTanksCaptured [ index ] = hackLimit then
86065: LD_EXP 124
86069: PUSH
86070: LD_VAR 0 5
86074: ARRAY
86075: PUSH
86076: LD_EXP 125
86080: EQUAL
86081: IFFALSE 86085
// break ;
86083: GO 86232
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
86085: LD_ADDR_EXP 127
86089: PUSH
86090: LD_EXP 127
86094: PPUSH
86095: LD_VAR 0 5
86099: PPUSH
86100: LD_EXP 127
86104: PUSH
86105: LD_VAR 0 5
86109: ARRAY
86110: PUSH
86111: LD_INT 1
86113: PLUS
86114: PPUSH
86115: CALL_OW 1
86119: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
86120: LD_ADDR_EXP 124
86124: PUSH
86125: LD_EXP 124
86129: PPUSH
86130: LD_VAR 0 5
86134: PUSH
86135: LD_EXP 124
86139: PUSH
86140: LD_VAR 0 5
86144: ARRAY
86145: PUSH
86146: LD_INT 1
86148: PLUS
86149: PUSH
86150: EMPTY
86151: LIST
86152: LIST
86153: PPUSH
86154: LD_VAR 0 2
86158: PUSH
86159: LD_VAR 0 4
86163: ARRAY
86164: PUSH
86165: LD_VAR 0 2
86169: PUSH
86170: LD_VAR 0 4
86174: ARRAY
86175: PPUSH
86176: CALL_OW 255
86180: PUSH
86181: EMPTY
86182: LIST
86183: LIST
86184: PPUSH
86185: CALL 32280 0 3
86189: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
86190: LD_VAR 0 2
86194: PUSH
86195: LD_VAR 0 4
86199: ARRAY
86200: PPUSH
86201: LD_VAR 0 1
86205: PPUSH
86206: CALL_OW 255
86210: PPUSH
86211: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
86215: LD_VAR 0 2
86219: PUSH
86220: LD_VAR 0 4
86224: ARRAY
86225: PPUSH
86226: CALL_OW 141
// end ;
86230: GO 86062
86232: POP
86233: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86234: LD_VAR 0 1
86238: PPUSH
86239: LD_EXP 124
86243: PUSH
86244: LD_VAR 0 5
86248: ARRAY
86249: PUSH
86250: LD_INT 0
86252: PLUS
86253: PPUSH
86254: CALL_OW 505
// end ;
86258: LD_VAR 0 3
86262: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
86263: LD_INT 0
86265: PPUSH
86266: PPUSH
86267: PPUSH
86268: PPUSH
// if not hack in hackTanks then
86269: LD_VAR 0 1
86273: PUSH
86274: LD_EXP 123
86278: IN
86279: NOT
86280: IFFALSE 86284
// exit ;
86282: GO 86524
// index := GetElementIndex ( hackTanks , hack ) ;
86284: LD_ADDR_VAR 0 4
86288: PUSH
86289: LD_EXP 123
86293: PPUSH
86294: LD_VAR 0 1
86298: PPUSH
86299: CALL 32065 0 2
86303: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
86304: LD_ADDR_VAR 0 3
86308: PUSH
86309: DOUBLE
86310: LD_EXP 124
86314: PUSH
86315: LD_VAR 0 4
86319: ARRAY
86320: INC
86321: ST_TO_ADDR
86322: LD_INT 1
86324: PUSH
86325: FOR_DOWNTO
86326: IFFALSE 86498
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
86328: LD_ADDR_VAR 0 5
86332: PUSH
86333: LD_EXP 124
86337: PUSH
86338: LD_VAR 0 4
86342: ARRAY
86343: PUSH
86344: LD_VAR 0 3
86348: ARRAY
86349: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
86350: LD_VAR 0 5
86354: PUSH
86355: LD_INT 1
86357: ARRAY
86358: PPUSH
86359: CALL_OW 302
86363: NOT
86364: PUSH
86365: LD_VAR 0 5
86369: PUSH
86370: LD_INT 1
86372: ARRAY
86373: PPUSH
86374: CALL_OW 255
86378: PUSH
86379: LD_VAR 0 1
86383: PPUSH
86384: CALL_OW 255
86388: NONEQUAL
86389: OR
86390: IFFALSE 86496
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
86392: LD_VAR 0 5
86396: PUSH
86397: LD_INT 1
86399: ARRAY
86400: PPUSH
86401: CALL_OW 305
86405: PUSH
86406: LD_VAR 0 5
86410: PUSH
86411: LD_INT 1
86413: ARRAY
86414: PPUSH
86415: CALL_OW 255
86419: PUSH
86420: LD_VAR 0 1
86424: PPUSH
86425: CALL_OW 255
86429: EQUAL
86430: AND
86431: IFFALSE 86455
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
86433: LD_VAR 0 5
86437: PUSH
86438: LD_INT 1
86440: ARRAY
86441: PPUSH
86442: LD_VAR 0 5
86446: PUSH
86447: LD_INT 2
86449: ARRAY
86450: PPUSH
86451: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
86455: LD_ADDR_EXP 124
86459: PUSH
86460: LD_EXP 124
86464: PPUSH
86465: LD_VAR 0 4
86469: PPUSH
86470: LD_EXP 124
86474: PUSH
86475: LD_VAR 0 4
86479: ARRAY
86480: PPUSH
86481: LD_VAR 0 3
86485: PPUSH
86486: CALL_OW 3
86490: PPUSH
86491: CALL_OW 1
86495: ST_TO_ADDR
// end ; end ;
86496: GO 86325
86498: POP
86499: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86500: LD_VAR 0 1
86504: PPUSH
86505: LD_EXP 124
86509: PUSH
86510: LD_VAR 0 4
86514: ARRAY
86515: PUSH
86516: LD_INT 0
86518: PLUS
86519: PPUSH
86520: CALL_OW 505
// end ;
86524: LD_VAR 0 2
86528: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
86529: LD_INT 0
86531: PPUSH
86532: PPUSH
86533: PPUSH
86534: PPUSH
// if not hack in hackTanks then
86535: LD_VAR 0 1
86539: PUSH
86540: LD_EXP 123
86544: IN
86545: NOT
86546: IFFALSE 86550
// exit ;
86548: GO 86635
// index := GetElementIndex ( hackTanks , hack ) ;
86550: LD_ADDR_VAR 0 5
86554: PUSH
86555: LD_EXP 123
86559: PPUSH
86560: LD_VAR 0 1
86564: PPUSH
86565: CALL 32065 0 2
86569: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
86570: LD_ADDR_VAR 0 4
86574: PUSH
86575: DOUBLE
86576: LD_INT 1
86578: DEC
86579: ST_TO_ADDR
86580: LD_EXP 124
86584: PUSH
86585: LD_VAR 0 5
86589: ARRAY
86590: PUSH
86591: FOR_TO
86592: IFFALSE 86633
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
86594: LD_EXP 124
86598: PUSH
86599: LD_VAR 0 5
86603: ARRAY
86604: PUSH
86605: LD_VAR 0 4
86609: ARRAY
86610: PUSH
86611: LD_INT 1
86613: ARRAY
86614: PUSH
86615: LD_VAR 0 2
86619: EQUAL
86620: IFFALSE 86631
// KillUnit ( vehicle ) ;
86622: LD_VAR 0 2
86626: PPUSH
86627: CALL_OW 66
86631: GO 86591
86633: POP
86634: POP
// end ;
86635: LD_VAR 0 3
86639: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
86640: LD_EXP 128
86644: NOT
86645: IFFALSE 86680
86647: GO 86649
86649: DISABLE
// begin initMiner := true ;
86650: LD_ADDR_EXP 128
86654: PUSH
86655: LD_INT 1
86657: ST_TO_ADDR
// minersList := [ ] ;
86658: LD_ADDR_EXP 129
86662: PUSH
86663: EMPTY
86664: ST_TO_ADDR
// minerMinesList := [ ] ;
86665: LD_ADDR_EXP 130
86669: PUSH
86670: EMPTY
86671: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
86672: LD_ADDR_EXP 131
86676: PUSH
86677: LD_INT 5
86679: ST_TO_ADDR
// end ;
86680: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
86681: LD_EXP 128
86685: PUSH
86686: LD_INT 34
86688: PUSH
86689: LD_INT 81
86691: PUSH
86692: EMPTY
86693: LIST
86694: LIST
86695: PPUSH
86696: CALL_OW 69
86700: AND
86701: IFFALSE 87162
86703: GO 86705
86705: DISABLE
86706: LD_INT 0
86708: PPUSH
86709: PPUSH
86710: PPUSH
86711: PPUSH
// begin enable ;
86712: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
86713: LD_ADDR_VAR 0 1
86717: PUSH
86718: LD_INT 34
86720: PUSH
86721: LD_INT 81
86723: PUSH
86724: EMPTY
86725: LIST
86726: LIST
86727: PPUSH
86728: CALL_OW 69
86732: PUSH
86733: FOR_IN
86734: IFFALSE 86806
// begin if not i in minersList then
86736: LD_VAR 0 1
86740: PUSH
86741: LD_EXP 129
86745: IN
86746: NOT
86747: IFFALSE 86804
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
86749: LD_ADDR_EXP 129
86753: PUSH
86754: LD_EXP 129
86758: PPUSH
86759: LD_EXP 129
86763: PUSH
86764: LD_INT 1
86766: PLUS
86767: PPUSH
86768: LD_VAR 0 1
86772: PPUSH
86773: CALL_OW 1
86777: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
86778: LD_ADDR_EXP 130
86782: PUSH
86783: LD_EXP 130
86787: PPUSH
86788: LD_EXP 130
86792: PUSH
86793: LD_INT 1
86795: PLUS
86796: PPUSH
86797: EMPTY
86798: PPUSH
86799: CALL_OW 1
86803: ST_TO_ADDR
// end end ;
86804: GO 86733
86806: POP
86807: POP
// for i := minerMinesList downto 1 do
86808: LD_ADDR_VAR 0 1
86812: PUSH
86813: DOUBLE
86814: LD_EXP 130
86818: INC
86819: ST_TO_ADDR
86820: LD_INT 1
86822: PUSH
86823: FOR_DOWNTO
86824: IFFALSE 87160
// begin if IsLive ( minersList [ i ] ) then
86826: LD_EXP 129
86830: PUSH
86831: LD_VAR 0 1
86835: ARRAY
86836: PPUSH
86837: CALL_OW 300
86841: IFFALSE 86869
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
86843: LD_EXP 129
86847: PUSH
86848: LD_VAR 0 1
86852: ARRAY
86853: PPUSH
86854: LD_EXP 130
86858: PUSH
86859: LD_VAR 0 1
86863: ARRAY
86864: PPUSH
86865: CALL_OW 505
// if not minerMinesList [ i ] then
86869: LD_EXP 130
86873: PUSH
86874: LD_VAR 0 1
86878: ARRAY
86879: NOT
86880: IFFALSE 86884
// continue ;
86882: GO 86823
// for j := minerMinesList [ i ] downto 1 do
86884: LD_ADDR_VAR 0 2
86888: PUSH
86889: DOUBLE
86890: LD_EXP 130
86894: PUSH
86895: LD_VAR 0 1
86899: ARRAY
86900: INC
86901: ST_TO_ADDR
86902: LD_INT 1
86904: PUSH
86905: FOR_DOWNTO
86906: IFFALSE 87156
// begin side := GetSide ( minersList [ i ] ) ;
86908: LD_ADDR_VAR 0 3
86912: PUSH
86913: LD_EXP 129
86917: PUSH
86918: LD_VAR 0 1
86922: ARRAY
86923: PPUSH
86924: CALL_OW 255
86928: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
86929: LD_ADDR_VAR 0 4
86933: PUSH
86934: LD_EXP 130
86938: PUSH
86939: LD_VAR 0 1
86943: ARRAY
86944: PUSH
86945: LD_VAR 0 2
86949: ARRAY
86950: PUSH
86951: LD_INT 1
86953: ARRAY
86954: PPUSH
86955: LD_EXP 130
86959: PUSH
86960: LD_VAR 0 1
86964: ARRAY
86965: PUSH
86966: LD_VAR 0 2
86970: ARRAY
86971: PUSH
86972: LD_INT 2
86974: ARRAY
86975: PPUSH
86976: CALL_OW 428
86980: ST_TO_ADDR
// if not tmp then
86981: LD_VAR 0 4
86985: NOT
86986: IFFALSE 86990
// continue ;
86988: GO 86905
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
86990: LD_VAR 0 4
86994: PUSH
86995: LD_INT 81
86997: PUSH
86998: LD_VAR 0 3
87002: PUSH
87003: EMPTY
87004: LIST
87005: LIST
87006: PPUSH
87007: CALL_OW 69
87011: IN
87012: PUSH
87013: LD_EXP 130
87017: PUSH
87018: LD_VAR 0 1
87022: ARRAY
87023: PUSH
87024: LD_VAR 0 2
87028: ARRAY
87029: PUSH
87030: LD_INT 1
87032: ARRAY
87033: PPUSH
87034: LD_EXP 130
87038: PUSH
87039: LD_VAR 0 1
87043: ARRAY
87044: PUSH
87045: LD_VAR 0 2
87049: ARRAY
87050: PUSH
87051: LD_INT 2
87053: ARRAY
87054: PPUSH
87055: CALL_OW 458
87059: AND
87060: IFFALSE 87154
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
87062: LD_EXP 130
87066: PUSH
87067: LD_VAR 0 1
87071: ARRAY
87072: PUSH
87073: LD_VAR 0 2
87077: ARRAY
87078: PUSH
87079: LD_INT 1
87081: ARRAY
87082: PPUSH
87083: LD_EXP 130
87087: PUSH
87088: LD_VAR 0 1
87092: ARRAY
87093: PUSH
87094: LD_VAR 0 2
87098: ARRAY
87099: PUSH
87100: LD_INT 2
87102: ARRAY
87103: PPUSH
87104: LD_VAR 0 3
87108: PPUSH
87109: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
87113: LD_ADDR_EXP 130
87117: PUSH
87118: LD_EXP 130
87122: PPUSH
87123: LD_VAR 0 1
87127: PPUSH
87128: LD_EXP 130
87132: PUSH
87133: LD_VAR 0 1
87137: ARRAY
87138: PPUSH
87139: LD_VAR 0 2
87143: PPUSH
87144: CALL_OW 3
87148: PPUSH
87149: CALL_OW 1
87153: ST_TO_ADDR
// end ; end ;
87154: GO 86905
87156: POP
87157: POP
// end ;
87158: GO 86823
87160: POP
87161: POP
// end ;
87162: PPOPN 4
87164: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
87165: LD_INT 0
87167: PPUSH
87168: PPUSH
// result := false ;
87169: LD_ADDR_VAR 0 4
87173: PUSH
87174: LD_INT 0
87176: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
87177: LD_VAR 0 1
87181: PPUSH
87182: CALL_OW 264
87186: PUSH
87187: LD_INT 81
87189: EQUAL
87190: NOT
87191: IFFALSE 87195
// exit ;
87193: GO 87435
// index := GetElementIndex ( minersList , unit ) ;
87195: LD_ADDR_VAR 0 5
87199: PUSH
87200: LD_EXP 129
87204: PPUSH
87205: LD_VAR 0 1
87209: PPUSH
87210: CALL 32065 0 2
87214: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
87215: LD_EXP 130
87219: PUSH
87220: LD_VAR 0 5
87224: ARRAY
87225: PUSH
87226: LD_EXP 131
87230: GREATEREQUAL
87231: IFFALSE 87235
// exit ;
87233: GO 87435
// ComMoveXY ( unit , x , y ) ;
87235: LD_VAR 0 1
87239: PPUSH
87240: LD_VAR 0 2
87244: PPUSH
87245: LD_VAR 0 3
87249: PPUSH
87250: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87254: LD_INT 35
87256: PPUSH
87257: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
87261: LD_VAR 0 1
87265: PPUSH
87266: LD_VAR 0 2
87270: PPUSH
87271: LD_VAR 0 3
87275: PPUSH
87276: CALL 63401 0 3
87280: NOT
87281: PUSH
87282: LD_VAR 0 1
87286: PPUSH
87287: CALL_OW 314
87291: AND
87292: IFFALSE 87296
// exit ;
87294: GO 87435
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
87296: LD_VAR 0 2
87300: PPUSH
87301: LD_VAR 0 3
87305: PPUSH
87306: CALL_OW 428
87310: PUSH
87311: LD_VAR 0 1
87315: EQUAL
87316: PUSH
87317: LD_VAR 0 1
87321: PPUSH
87322: CALL_OW 314
87326: NOT
87327: AND
87328: IFFALSE 87254
// PlaySoundXY ( x , y , PlantMine ) ;
87330: LD_VAR 0 2
87334: PPUSH
87335: LD_VAR 0 3
87339: PPUSH
87340: LD_STRING PlantMine
87342: PPUSH
87343: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
87347: LD_VAR 0 2
87351: PPUSH
87352: LD_VAR 0 3
87356: PPUSH
87357: LD_VAR 0 1
87361: PPUSH
87362: CALL_OW 255
87366: PPUSH
87367: LD_INT 0
87369: PPUSH
87370: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
87374: LD_ADDR_EXP 130
87378: PUSH
87379: LD_EXP 130
87383: PPUSH
87384: LD_VAR 0 5
87388: PUSH
87389: LD_EXP 130
87393: PUSH
87394: LD_VAR 0 5
87398: ARRAY
87399: PUSH
87400: LD_INT 1
87402: PLUS
87403: PUSH
87404: EMPTY
87405: LIST
87406: LIST
87407: PPUSH
87408: LD_VAR 0 2
87412: PUSH
87413: LD_VAR 0 3
87417: PUSH
87418: EMPTY
87419: LIST
87420: LIST
87421: PPUSH
87422: CALL 32280 0 3
87426: ST_TO_ADDR
// result := true ;
87427: LD_ADDR_VAR 0 4
87431: PUSH
87432: LD_INT 1
87434: ST_TO_ADDR
// end ;
87435: LD_VAR 0 4
87439: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
87440: LD_INT 0
87442: PPUSH
87443: PPUSH
87444: PPUSH
// if not unit in minersList then
87445: LD_VAR 0 1
87449: PUSH
87450: LD_EXP 129
87454: IN
87455: NOT
87456: IFFALSE 87460
// exit ;
87458: GO 87852
// index := GetElementIndex ( minersList , unit ) ;
87460: LD_ADDR_VAR 0 6
87464: PUSH
87465: LD_EXP 129
87469: PPUSH
87470: LD_VAR 0 1
87474: PPUSH
87475: CALL 32065 0 2
87479: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
87480: LD_ADDR_VAR 0 5
87484: PUSH
87485: DOUBLE
87486: LD_EXP 130
87490: PUSH
87491: LD_VAR 0 6
87495: ARRAY
87496: INC
87497: ST_TO_ADDR
87498: LD_INT 1
87500: PUSH
87501: FOR_DOWNTO
87502: IFFALSE 87663
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
87504: LD_EXP 130
87508: PUSH
87509: LD_VAR 0 6
87513: ARRAY
87514: PUSH
87515: LD_VAR 0 5
87519: ARRAY
87520: PUSH
87521: LD_INT 1
87523: ARRAY
87524: PUSH
87525: LD_VAR 0 2
87529: EQUAL
87530: PUSH
87531: LD_EXP 130
87535: PUSH
87536: LD_VAR 0 6
87540: ARRAY
87541: PUSH
87542: LD_VAR 0 5
87546: ARRAY
87547: PUSH
87548: LD_INT 2
87550: ARRAY
87551: PUSH
87552: LD_VAR 0 3
87556: EQUAL
87557: AND
87558: IFFALSE 87661
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87560: LD_EXP 130
87564: PUSH
87565: LD_VAR 0 6
87569: ARRAY
87570: PUSH
87571: LD_VAR 0 5
87575: ARRAY
87576: PUSH
87577: LD_INT 1
87579: ARRAY
87580: PPUSH
87581: LD_EXP 130
87585: PUSH
87586: LD_VAR 0 6
87590: ARRAY
87591: PUSH
87592: LD_VAR 0 5
87596: ARRAY
87597: PUSH
87598: LD_INT 2
87600: ARRAY
87601: PPUSH
87602: LD_VAR 0 1
87606: PPUSH
87607: CALL_OW 255
87611: PPUSH
87612: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87616: LD_ADDR_EXP 130
87620: PUSH
87621: LD_EXP 130
87625: PPUSH
87626: LD_VAR 0 6
87630: PPUSH
87631: LD_EXP 130
87635: PUSH
87636: LD_VAR 0 6
87640: ARRAY
87641: PPUSH
87642: LD_VAR 0 5
87646: PPUSH
87647: CALL_OW 3
87651: PPUSH
87652: CALL_OW 1
87656: ST_TO_ADDR
// exit ;
87657: POP
87658: POP
87659: GO 87852
// end ; end ;
87661: GO 87501
87663: POP
87664: POP
// for i := minerMinesList [ index ] downto 1 do
87665: LD_ADDR_VAR 0 5
87669: PUSH
87670: DOUBLE
87671: LD_EXP 130
87675: PUSH
87676: LD_VAR 0 6
87680: ARRAY
87681: INC
87682: ST_TO_ADDR
87683: LD_INT 1
87685: PUSH
87686: FOR_DOWNTO
87687: IFFALSE 87850
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
87689: LD_EXP 130
87693: PUSH
87694: LD_VAR 0 6
87698: ARRAY
87699: PUSH
87700: LD_VAR 0 5
87704: ARRAY
87705: PUSH
87706: LD_INT 1
87708: ARRAY
87709: PPUSH
87710: LD_EXP 130
87714: PUSH
87715: LD_VAR 0 6
87719: ARRAY
87720: PUSH
87721: LD_VAR 0 5
87725: ARRAY
87726: PUSH
87727: LD_INT 2
87729: ARRAY
87730: PPUSH
87731: LD_VAR 0 2
87735: PPUSH
87736: LD_VAR 0 3
87740: PPUSH
87741: CALL_OW 298
87745: PUSH
87746: LD_INT 6
87748: LESS
87749: IFFALSE 87848
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87751: LD_EXP 130
87755: PUSH
87756: LD_VAR 0 6
87760: ARRAY
87761: PUSH
87762: LD_VAR 0 5
87766: ARRAY
87767: PUSH
87768: LD_INT 1
87770: ARRAY
87771: PPUSH
87772: LD_EXP 130
87776: PUSH
87777: LD_VAR 0 6
87781: ARRAY
87782: PUSH
87783: LD_VAR 0 5
87787: ARRAY
87788: PUSH
87789: LD_INT 2
87791: ARRAY
87792: PPUSH
87793: LD_VAR 0 1
87797: PPUSH
87798: CALL_OW 255
87802: PPUSH
87803: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87807: LD_ADDR_EXP 130
87811: PUSH
87812: LD_EXP 130
87816: PPUSH
87817: LD_VAR 0 6
87821: PPUSH
87822: LD_EXP 130
87826: PUSH
87827: LD_VAR 0 6
87831: ARRAY
87832: PPUSH
87833: LD_VAR 0 5
87837: PPUSH
87838: CALL_OW 3
87842: PPUSH
87843: CALL_OW 1
87847: ST_TO_ADDR
// end ; end ;
87848: GO 87686
87850: POP
87851: POP
// end ;
87852: LD_VAR 0 4
87856: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
87857: LD_INT 0
87859: PPUSH
87860: PPUSH
87861: PPUSH
87862: PPUSH
87863: PPUSH
87864: PPUSH
87865: PPUSH
87866: PPUSH
87867: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
87868: LD_VAR 0 1
87872: PPUSH
87873: CALL_OW 264
87877: PUSH
87878: LD_INT 81
87880: EQUAL
87881: NOT
87882: PUSH
87883: LD_VAR 0 1
87887: PUSH
87888: LD_EXP 129
87892: IN
87893: NOT
87894: OR
87895: IFFALSE 87899
// exit ;
87897: GO 88221
// index := GetElementIndex ( minersList , unit ) ;
87899: LD_ADDR_VAR 0 6
87903: PUSH
87904: LD_EXP 129
87908: PPUSH
87909: LD_VAR 0 1
87913: PPUSH
87914: CALL 32065 0 2
87918: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
87919: LD_ADDR_VAR 0 8
87923: PUSH
87924: LD_EXP 131
87928: PUSH
87929: LD_EXP 130
87933: PUSH
87934: LD_VAR 0 6
87938: ARRAY
87939: MINUS
87940: ST_TO_ADDR
// if not minesFreeAmount then
87941: LD_VAR 0 8
87945: NOT
87946: IFFALSE 87950
// exit ;
87948: GO 88221
// tmp := [ ] ;
87950: LD_ADDR_VAR 0 7
87954: PUSH
87955: EMPTY
87956: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
87957: LD_ADDR_VAR 0 5
87961: PUSH
87962: DOUBLE
87963: LD_INT 1
87965: DEC
87966: ST_TO_ADDR
87967: LD_VAR 0 8
87971: PUSH
87972: FOR_TO
87973: IFFALSE 88168
// begin _d := rand ( 0 , 5 ) ;
87975: LD_ADDR_VAR 0 11
87979: PUSH
87980: LD_INT 0
87982: PPUSH
87983: LD_INT 5
87985: PPUSH
87986: CALL_OW 12
87990: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
87991: LD_ADDR_VAR 0 12
87995: PUSH
87996: LD_INT 2
87998: PPUSH
87999: LD_INT 6
88001: PPUSH
88002: CALL_OW 12
88006: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
88007: LD_ADDR_VAR 0 9
88011: PUSH
88012: LD_VAR 0 2
88016: PPUSH
88017: LD_VAR 0 11
88021: PPUSH
88022: LD_VAR 0 12
88026: PPUSH
88027: CALL_OW 272
88031: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
88032: LD_ADDR_VAR 0 10
88036: PUSH
88037: LD_VAR 0 3
88041: PPUSH
88042: LD_VAR 0 11
88046: PPUSH
88047: LD_VAR 0 12
88051: PPUSH
88052: CALL_OW 273
88056: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
88057: LD_VAR 0 9
88061: PPUSH
88062: LD_VAR 0 10
88066: PPUSH
88067: CALL_OW 488
88071: PUSH
88072: LD_VAR 0 9
88076: PUSH
88077: LD_VAR 0 10
88081: PUSH
88082: EMPTY
88083: LIST
88084: LIST
88085: PUSH
88086: LD_VAR 0 7
88090: IN
88091: NOT
88092: AND
88093: PUSH
88094: LD_VAR 0 9
88098: PPUSH
88099: LD_VAR 0 10
88103: PPUSH
88104: CALL_OW 458
88108: NOT
88109: AND
88110: IFFALSE 88152
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
88112: LD_ADDR_VAR 0 7
88116: PUSH
88117: LD_VAR 0 7
88121: PPUSH
88122: LD_VAR 0 7
88126: PUSH
88127: LD_INT 1
88129: PLUS
88130: PPUSH
88131: LD_VAR 0 9
88135: PUSH
88136: LD_VAR 0 10
88140: PUSH
88141: EMPTY
88142: LIST
88143: LIST
88144: PPUSH
88145: CALL_OW 1
88149: ST_TO_ADDR
88150: GO 88166
// i := i - 1 ;
88152: LD_ADDR_VAR 0 5
88156: PUSH
88157: LD_VAR 0 5
88161: PUSH
88162: LD_INT 1
88164: MINUS
88165: ST_TO_ADDR
// end ;
88166: GO 87972
88168: POP
88169: POP
// for i in tmp do
88170: LD_ADDR_VAR 0 5
88174: PUSH
88175: LD_VAR 0 7
88179: PUSH
88180: FOR_IN
88181: IFFALSE 88219
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
88183: LD_VAR 0 1
88187: PPUSH
88188: LD_VAR 0 5
88192: PUSH
88193: LD_INT 1
88195: ARRAY
88196: PPUSH
88197: LD_VAR 0 5
88201: PUSH
88202: LD_INT 2
88204: ARRAY
88205: PPUSH
88206: CALL 87165 0 3
88210: NOT
88211: IFFALSE 88217
// exit ;
88213: POP
88214: POP
88215: GO 88221
88217: GO 88180
88219: POP
88220: POP
// end ;
88221: LD_VAR 0 4
88225: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
88226: LD_INT 0
88228: PPUSH
88229: PPUSH
88230: PPUSH
88231: PPUSH
88232: PPUSH
88233: PPUSH
88234: PPUSH
// if not GetClass ( unit ) = class_sniper then
88235: LD_VAR 0 1
88239: PPUSH
88240: CALL_OW 257
88244: PUSH
88245: LD_INT 5
88247: EQUAL
88248: NOT
88249: IFFALSE 88253
// exit ;
88251: GO 88641
// dist := 8 ;
88253: LD_ADDR_VAR 0 5
88257: PUSH
88258: LD_INT 8
88260: ST_TO_ADDR
// viewRange := 12 ;
88261: LD_ADDR_VAR 0 7
88265: PUSH
88266: LD_INT 12
88268: ST_TO_ADDR
// side := GetSide ( unit ) ;
88269: LD_ADDR_VAR 0 6
88273: PUSH
88274: LD_VAR 0 1
88278: PPUSH
88279: CALL_OW 255
88283: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
88284: LD_INT 61
88286: PPUSH
88287: LD_VAR 0 6
88291: PPUSH
88292: CALL_OW 321
88296: PUSH
88297: LD_INT 2
88299: EQUAL
88300: IFFALSE 88310
// viewRange := 16 ;
88302: LD_ADDR_VAR 0 7
88306: PUSH
88307: LD_INT 16
88309: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
88310: LD_VAR 0 1
88314: PPUSH
88315: LD_VAR 0 2
88319: PPUSH
88320: LD_VAR 0 3
88324: PPUSH
88325: CALL_OW 297
88329: PUSH
88330: LD_VAR 0 5
88334: GREATER
88335: IFFALSE 88414
// begin ComMoveXY ( unit , x , y ) ;
88337: LD_VAR 0 1
88341: PPUSH
88342: LD_VAR 0 2
88346: PPUSH
88347: LD_VAR 0 3
88351: PPUSH
88352: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
88356: LD_INT 35
88358: PPUSH
88359: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
88363: LD_VAR 0 1
88367: PPUSH
88368: LD_VAR 0 2
88372: PPUSH
88373: LD_VAR 0 3
88377: PPUSH
88378: CALL 63401 0 3
88382: NOT
88383: IFFALSE 88387
// exit ;
88385: GO 88641
// until GetDistUnitXY ( unit , x , y ) < dist ;
88387: LD_VAR 0 1
88391: PPUSH
88392: LD_VAR 0 2
88396: PPUSH
88397: LD_VAR 0 3
88401: PPUSH
88402: CALL_OW 297
88406: PUSH
88407: LD_VAR 0 5
88411: LESS
88412: IFFALSE 88356
// end ; ComTurnXY ( unit , x , y ) ;
88414: LD_VAR 0 1
88418: PPUSH
88419: LD_VAR 0 2
88423: PPUSH
88424: LD_VAR 0 3
88428: PPUSH
88429: CALL_OW 118
// wait ( 5 ) ;
88433: LD_INT 5
88435: PPUSH
88436: CALL_OW 67
// _d := GetDir ( unit ) ;
88440: LD_ADDR_VAR 0 10
88444: PUSH
88445: LD_VAR 0 1
88449: PPUSH
88450: CALL_OW 254
88454: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
88455: LD_ADDR_VAR 0 8
88459: PUSH
88460: LD_VAR 0 1
88464: PPUSH
88465: CALL_OW 250
88469: PPUSH
88470: LD_VAR 0 10
88474: PPUSH
88475: LD_VAR 0 5
88479: PPUSH
88480: CALL_OW 272
88484: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
88485: LD_ADDR_VAR 0 9
88489: PUSH
88490: LD_VAR 0 1
88494: PPUSH
88495: CALL_OW 251
88499: PPUSH
88500: LD_VAR 0 10
88504: PPUSH
88505: LD_VAR 0 5
88509: PPUSH
88510: CALL_OW 273
88514: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
88515: LD_VAR 0 8
88519: PPUSH
88520: LD_VAR 0 9
88524: PPUSH
88525: CALL_OW 488
88529: NOT
88530: IFFALSE 88534
// exit ;
88532: GO 88641
// ComAnimCustom ( unit , 1 ) ;
88534: LD_VAR 0 1
88538: PPUSH
88539: LD_INT 1
88541: PPUSH
88542: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
88546: LD_VAR 0 8
88550: PPUSH
88551: LD_VAR 0 9
88555: PPUSH
88556: LD_VAR 0 6
88560: PPUSH
88561: LD_VAR 0 7
88565: PPUSH
88566: CALL_OW 330
// repeat wait ( 1 ) ;
88570: LD_INT 1
88572: PPUSH
88573: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
88577: LD_VAR 0 1
88581: PPUSH
88582: CALL_OW 316
88586: PUSH
88587: LD_VAR 0 1
88591: PPUSH
88592: CALL_OW 314
88596: OR
88597: PUSH
88598: LD_VAR 0 1
88602: PPUSH
88603: CALL_OW 302
88607: NOT
88608: OR
88609: PUSH
88610: LD_VAR 0 1
88614: PPUSH
88615: CALL_OW 301
88619: OR
88620: IFFALSE 88570
// RemoveSeeing ( _x , _y , side ) ;
88622: LD_VAR 0 8
88626: PPUSH
88627: LD_VAR 0 9
88631: PPUSH
88632: LD_VAR 0 6
88636: PPUSH
88637: CALL_OW 331
// end ; end_of_file
88641: LD_VAR 0 4
88645: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
88646: LD_VAR 0 1
88650: PPUSH
88651: LD_VAR 0 2
88655: PPUSH
88656: LD_VAR 0 3
88660: PPUSH
88661: LD_VAR 0 4
88665: PPUSH
88666: LD_VAR 0 5
88670: PPUSH
88671: LD_VAR 0 6
88675: PPUSH
88676: CALL 68596 0 6
// end ;
88680: PPOPN 6
88682: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
88683: LD_INT 0
88685: PPUSH
// begin if not units then
88686: LD_VAR 0 1
88690: NOT
88691: IFFALSE 88695
// exit ;
88693: GO 88695
// end ;
88695: PPOPN 7
88697: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
88698: CALL 68567 0 0
// end ;
88702: PPOPN 1
88704: END
