// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10266 0 2
// PrepareArabian ;
  32: CALL 501 0 0
// PrepareRussian ;
  36: CALL 11057 0 0
// Action ;
  40: CALL 19248 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: PUSH
 430: LD_EXP 47
 434: PPUSH
 435: CALL_OW 302
 439: AND
 440: PUSH
 441: LD_EXP 6
 445: NOT
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 452: LD_STRING ACH_ROLF
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$2 trigger collectedOil >= 300 do
 460: LD_EXP 33
 464: PUSH
 465: LD_INT 300
 467: GREATEREQUAL
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_OIL ) ;
 473: LD_STRING ACH_OIL
 475: PPUSH
 476: CALL_OW 543
 480: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 481: LD_INT 52
 483: PPUSH
 484: CALL_OW 301
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 493: LD_STRING ACH_LENIN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
 506: PPUSH
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
// uc_nation := 2 ;
 517: LD_ADDR_OWVAR 21
 521: PUSH
 522: LD_INT 2
 524: ST_TO_ADDR
// uc_side := 5 ;
 525: LD_ADDR_OWVAR 20
 529: PUSH
 530: LD_INT 5
 532: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 533: LD_ADDR_EXP 42
 537: PUSH
 538: LD_STRING Abdul
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: LD_STRING 
 546: PPUSH
 547: CALL 29461 0 3
 551: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 552: LD_ADDR_EXP 44
 556: PUSH
 557: LD_STRING Omar
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 29461 0 3
 570: ST_TO_ADDR
// uc_side := 2 ;
 571: LD_ADDR_OWVAR 20
 575: PUSH
 576: LD_INT 2
 578: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 579: LD_ADDR_EXP 34
 583: PUSH
 584: LD_STRING Heike
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_EXP 2
 597: PPUSH
 598: CALL 29461 0 3
 602: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 603: LD_ADDR_EXP 37
 607: PUSH
 608: LD_STRING Ibrahim
 610: PPUSH
 611: LD_EXP 1
 615: NOT
 616: PPUSH
 617: LD_EXP 2
 621: PPUSH
 622: CALL 29461 0 3
 626: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 627: LD_ADDR_EXP 35
 631: PUSH
 632: LD_STRING Givi
 634: PPUSH
 635: LD_EXP 1
 639: NOT
 640: PPUSH
 641: LD_EXP 2
 645: PPUSH
 646: CALL 29461 0 3
 650: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 651: LD_ADDR_EXP 38
 655: PUSH
 656: LD_STRING Kamil
 658: PPUSH
 659: LD_EXP 1
 663: NOT
 664: PPUSH
 665: LD_EXP 2
 669: PPUSH
 670: CALL 29461 0 3
 674: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 675: LD_ADDR_EXP 39
 679: PUSH
 680: LD_STRING Kaia
 682: PPUSH
 683: LD_EXP 1
 687: NOT
 688: PPUSH
 689: LD_EXP 2
 693: PPUSH
 694: CALL 29461 0 3
 698: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 699: LD_ADDR_EXP 40
 703: PUSH
 704: LD_STRING Sophia
 706: PPUSH
 707: LD_EXP 1
 711: NOT
 712: PPUSH
 713: LD_EXP 2
 717: PPUSH
 718: CALL 29461 0 3
 722: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 723: LD_ADDR_EXP 41
 727: PUSH
 728: LD_STRING Markov
 730: PPUSH
 731: LD_EXP 1
 735: NOT
 736: PPUSH
 737: LD_EXP 2
 741: PPUSH
 742: CALL 29461 0 3
 746: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 747: LD_ADDR_EXP 46
 751: PUSH
 752: LD_STRING Aviradze
 754: PPUSH
 755: LD_EXP 1
 759: NOT
 760: PPUSH
 761: LD_EXP 2
 765: PPUSH
 766: CALL 29461 0 3
 770: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 771: LD_ADDR_EXP 45
 775: PUSH
 776: LD_STRING Kurt
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL 29461 0 3
 794: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 795: LD_ADDR_EXP 36
 799: PUSH
 800: LD_STRING Mike
 802: PPUSH
 803: LD_EXP 1
 807: NOT
 808: PPUSH
 809: LD_EXP 2
 813: PPUSH
 814: CALL 29461 0 3
 818: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 819: LD_ADDR_EXP 43
 823: PUSH
 824: LD_STRING Olaf
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_STRING 
 832: PPUSH
 833: CALL 29461 0 3
 837: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING 05_others
 845: PPUSH
 846: CALL_OW 31
 850: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 851: LD_ADDR_EXP 50
 855: PUSH
 856: LD_STRING 05_apes
 858: PPUSH
 859: CALL_OW 31
 863: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_STRING 05_Radar
 871: PPUSH
 872: LD_EXP 1
 876: PPUSH
 877: CALL_OW 30
 881: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 882: LD_ADDR_VAR 0 6
 886: PUSH
 887: LD_STRING 05_RemoteControl
 889: PPUSH
 890: LD_EXP 1
 894: PPUSH
 895: CALL_OW 30
 899: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 900: LD_ADDR_VAR 0 7
 904: PUSH
 905: LD_STRING 05_DrugsTested
 907: PPUSH
 908: LD_EXP 1
 912: PPUSH
 913: CALL_OW 30
 917: ST_TO_ADDR
// if hasDrugs then
 918: LD_VAR 0 7
 922: IFFALSE 937
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 924: LD_INT 5
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 322
// if hasRadar then
 937: LD_VAR 0 5
 941: IFFALSE 956
// SetTech ( tech_radar , 2 , state_researched ) ;
 943: LD_INT 6
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: LD_INT 2
 951: PPUSH
 952: CALL_OW 322
// if hasRemote then
 956: LD_VAR 0 6
 960: IFFALSE 975
// SetTech ( tech_remCont , 2 , state_researched ) ;
 962: LD_INT 15
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: LD_INT 2
 970: PPUSH
 971: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 975: LD_ADDR_VAR 0 13
 979: PUSH
 980: LD_INT 5
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 517
 990: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 13
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PUSH
1010: FOR_TO
1011: IFFALSE 1088
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1013: LD_VAR 0 13
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: PUSH
1022: LD_VAR 0 2
1026: ARRAY
1027: PPUSH
1028: LD_VAR 0 13
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: CALL_OW 351
1047: IFFALSE 1086
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1049: LD_VAR 0 13
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PUSH
1058: LD_VAR 0 2
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 13
1068: PUSH
1069: LD_INT 2
1071: ARRAY
1072: PUSH
1073: LD_VAR 0 2
1077: ARRAY
1078: PPUSH
1079: LD_INT 2
1081: PPUSH
1082: CALL_OW 244
1086: GO 1010
1088: POP
1089: POP
// base := [ ] ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: EMPTY
1096: ST_TO_ADDR
// if debug then
1097: LD_EXP 1
1101: IFFALSE 1151
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1103: LD_ADDR_VAR 0 4
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 51
1113: PUSH
1114: LD_INT 77
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 3
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: ST_TO_ADDR
// end else
1149: GO 1167
// if buildingsFromPrev then
1151: LD_EXP 30
1155: IFFALSE 1167
// base := buildingsFromPrev ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_EXP 30
1166: ST_TO_ADDR
// if base then
1167: LD_VAR 0 4
1171: IFFALSE 1369
// for i := 1 to base do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_VAR 0 4
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1367
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1191: LD_ADDR_VAR 0 4
1195: PUSH
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_VAR 0 2
1205: PPUSH
1206: LD_VAR 0 4
1210: PUSH
1211: LD_VAR 0 2
1215: ARRAY
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_VAR 0 2
1230: ARRAY
1231: PUSH
1232: LD_INT 2
1234: ARRAY
1235: PUSH
1236: LD_INT 155
1238: PLUS
1239: PUSH
1240: LD_VAR 0 4
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 3
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: PLUS
1258: PUSH
1259: LD_VAR 0 4
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: PUSH
1270: LD_INT 4
1272: ARRAY
1273: PUSH
1274: LD_VAR 0 4
1278: PUSH
1279: LD_VAR 0 2
1283: ARRAY
1284: PUSH
1285: LD_INT 5
1287: ARRAY
1288: PUSH
1289: LD_VAR 0 4
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 6
1302: ARRAY
1303: PUSH
1304: LD_VAR 0 4
1308: PUSH
1309: LD_VAR 0 2
1313: ARRAY
1314: PUSH
1315: LD_INT 7
1317: ARRAY
1318: PUSH
1319: LD_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: ARRAY
1329: PUSH
1330: LD_INT 8
1332: ARRAY
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: LD_VAR 0 2
1343: ARRAY
1344: PUSH
1345: LD_INT 9
1347: ARRAY
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 1
1364: ST_TO_ADDR
1365: GO 1188
1367: POP
1368: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1369: LD_ADDR_VAR 0 4
1373: PUSH
1374: LD_VAR 0 4
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: LD_INT 206
1384: PUSH
1385: LD_INT 80
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 2
1393: PUSH
1394: LD_INT 3
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 32
1419: PUSH
1420: LD_INT 221
1422: PUSH
1423: LD_INT 95
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 2
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 0
1440: PUSH
1441: LD_INT 23
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 32
1457: PUSH
1458: LD_INT 223
1460: PUSH
1461: LD_INT 88
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 2
1469: PUSH
1470: LD_INT 3
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 24
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 32
1495: PUSH
1496: LD_INT 202
1498: PUSH
1499: LD_INT 64
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 0
1516: PUSH
1517: LD_INT 25
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: LD_INT 203
1536: PUSH
1537: LD_INT 91
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 3
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 8
1571: PUSH
1572: LD_INT 217
1574: PUSH
1575: LD_INT 78
1577: PUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 3
1586: PUSH
1587: LD_INT 10
1589: PUSH
1590: LD_INT 0
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 27
1609: PUSH
1610: LD_INT 220
1612: PUSH
1613: LD_INT 99
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 220
1650: PUSH
1651: LD_INT 103
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: LD_INT 0
1668: PUSH
1669: LD_INT 0
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 27
1685: PUSH
1686: LD_INT 216
1688: PUSH
1689: LD_INT 102
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: LD_INT 0
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 0
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 17
1723: PUSH
1724: LD_INT 203
1726: PUSH
1727: LD_INT 94
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 23
1761: PUSH
1762: LD_INT 200
1764: PUSH
1765: LD_INT 88
1767: PUSH
1768: LD_INT 2
1770: PUSH
1771: LD_INT 2
1773: PUSH
1774: LD_INT 3
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 16
1799: PUSH
1800: LD_INT 199
1802: PUSH
1803: LD_INT 91
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 2
1811: PUSH
1812: LD_INT 3
1814: PUSH
1815: LD_INT 0
1817: PUSH
1818: LD_INT 0
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 26
1837: PUSH
1838: LD_INT 197
1840: PUSH
1841: LD_INT 81
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 26
1875: PUSH
1876: LD_INT 197
1878: PUSH
1879: LD_INT 78
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 3
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ADD
1927: ST_TO_ADDR
// if hasRadar then
1928: LD_VAR 0 5
1932: IFFALSE 1996
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1934: LD_ADDR_VAR 0 4
1938: PUSH
1939: LD_VAR 0 4
1943: PPUSH
1944: LD_VAR 0 4
1948: PUSH
1949: LD_INT 1
1951: PLUS
1952: PPUSH
1953: LD_INT 20
1955: PUSH
1956: LD_INT 203
1958: PUSH
1959: LD_INT 87
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 3
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 1
1995: ST_TO_ADDR
// if hasRemote then
1996: LD_VAR 0 6
2000: IFFALSE 2064
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2002: LD_ADDR_VAR 0 4
2006: PUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_VAR 0 4
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 207
2026: PUSH
2027: LD_INT 95
2029: PUSH
2030: LD_INT 5
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: LD_INT 0
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 1
2063: ST_TO_ADDR
// for i in base do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_VAR 0 4
2073: PUSH
2074: FOR_IN
2075: IFFALSE 2429
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2077: LD_VAR 0 2
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 2
2090: PUSH
2091: LD_INT 3
2093: ARRAY
2094: PPUSH
2095: CALL_OW 428
2099: IFFALSE 2103
// continue ;
2101: GO 2074
// uc_nation := i [ 5 ] ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: ARRAY
2116: ST_TO_ADDR
// InitBc ;
2117: CALL_OW 21
// bc_type := i [ 1 ] ;
2121: LD_ADDR_OWVAR 42
2125: PUSH
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2135: LD_ADDR_OWVAR 43
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 6
2147: ARRAY
2148: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2149: LD_ADDR_OWVAR 44
2153: PUSH
2154: LD_INT 9
2156: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2157: LD_ADDR_OWVAR 45
2161: PUSH
2162: LD_INT 9
2164: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2165: LD_VAR 0 2
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PUSH
2174: LD_INT 8
2176: EQUAL
2177: PUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_INT 5
2185: ARRAY
2186: PUSH
2187: LD_INT 2
2189: EQUAL
2190: AND
2191: PUSH
2192: LD_VAR 0 2
2196: PUSH
2197: LD_INT 8
2199: ARRAY
2200: NOT
2201: AND
2202: IFFALSE 2236
// begin bc_kind1 := b_lab_weapon ;
2204: LD_ADDR_OWVAR 44
2208: PUSH
2209: LD_INT 10
2211: ST_TO_ADDR
// if hasRadar then
2212: LD_VAR 0 5
2216: IFFALSE 2228
// bc_kind2 := b_lab_opto else
2218: LD_ADDR_OWVAR 45
2222: PUSH
2223: LD_INT 15
2225: ST_TO_ADDR
2226: GO 2236
// bc_kind2 := b_lab_basic ;
2228: LD_ADDR_OWVAR 45
2232: PUSH
2233: LD_INT 9
2235: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2236: LD_VAR 0 2
2240: PUSH
2241: LD_INT 1
2243: ARRAY
2244: PUSH
2245: LD_INT 7
2247: PUSH
2248: LD_INT 8
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: IN
2255: PUSH
2256: LD_VAR 0 2
2260: PUSH
2261: LD_INT 7
2263: ARRAY
2264: AND
2265: IFFALSE 2281
// bc_kind1 := i [ 7 ] ;
2267: LD_ADDR_OWVAR 44
2271: PUSH
2272: LD_VAR 0 2
2276: PUSH
2277: LD_INT 7
2279: ARRAY
2280: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2281: LD_VAR 0 2
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: PUSH
2290: LD_INT 8
2292: EQUAL
2293: PUSH
2294: LD_VAR 0 2
2298: PUSH
2299: LD_INT 8
2301: ARRAY
2302: AND
2303: IFFALSE 2319
// bc_kind1 := i [ 8 ] ;
2305: LD_ADDR_OWVAR 44
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_INT 8
2317: ARRAY
2318: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2319: LD_ADDR_VAR 0 3
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: LD_INT 2
2331: ARRAY
2332: PPUSH
2333: LD_VAR 0 2
2337: PUSH
2338: LD_INT 3
2340: ARRAY
2341: PPUSH
2342: LD_VAR 0 2
2346: PUSH
2347: LD_INT 4
2349: ARRAY
2350: PPUSH
2351: CALL_OW 47
2355: ST_TO_ADDR
// if i [ 9 ] then
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 9
2363: ARRAY
2364: IFFALSE 2384
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2366: LD_VAR 0 3
2370: PPUSH
2371: LD_VAR 0 2
2375: PUSH
2376: LD_INT 9
2378: ARRAY
2379: PPUSH
2380: CALL_OW 431
// if i [ 1 ] = b_bunker then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PUSH
2393: LD_INT 32
2395: EQUAL
2396: IFFALSE 2427
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2398: LD_ADDR_VAR 0 11
2402: PUSH
2403: LD_VAR 0 11
2407: PPUSH
2408: LD_VAR 0 11
2412: PUSH
2413: LD_INT 1
2415: PLUS
2416: PPUSH
2417: LD_VAR 0 3
2421: PPUSH
2422: CALL_OW 1
2426: ST_TO_ADDR
// end ;
2427: GO 2074
2429: POP
2430: POP
// depot := HexInfo ( 206 , 80 ) ;
2431: LD_ADDR_VAR 0 9
2435: PUSH
2436: LD_INT 206
2438: PPUSH
2439: LD_INT 80
2441: PPUSH
2442: CALL_OW 428
2446: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2447: LD_ADDR_VAR 0 8
2451: PUSH
2452: LD_INT 22
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 30
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PPUSH
2476: CALL_OW 69
2480: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_INT 22
2488: PUSH
2489: LD_INT 2
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 30
2501: PUSH
2502: LD_INT 6
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 30
2511: PUSH
2512: LD_INT 7
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 30
2521: PUSH
2522: LD_INT 8
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PPUSH
2539: CALL_OW 69
2543: ST_TO_ADDR
// arDepot := depot ;
2544: LD_ADDR_EXP 48
2548: PUSH
2549: LD_VAR 0 9
2553: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2554: LD_VAR 0 9
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 360
2569: PUSH
2570: LD_INT 260
2572: PUSH
2573: LD_INT 190
2575: PUSH
2576: LD_INT 150
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: CALL_OW 274
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: LD_INT 200
2610: PUSH
2611: LD_INT 170
2613: PUSH
2614: LD_INT 150
2616: PUSH
2617: LD_INT 120
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PPUSH
2632: CALL_OW 277
// uc_nation := 2 ;
2636: LD_ADDR_OWVAR 21
2640: PUSH
2641: LD_INT 2
2643: ST_TO_ADDR
// uc_side := 2 ;
2644: LD_ADDR_OWVAR 20
2648: PUSH
2649: LD_INT 2
2651: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2652: LD_INT 13
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 27
2663: PPUSH
2664: LD_INT 33
2666: PPUSH
2667: CALL 34322 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2671: CALL_OW 45
2675: PPUSH
2676: LD_INT 190
2678: PPUSH
2679: LD_INT 64
2681: PPUSH
2682: LD_INT 5
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: CALL 69333 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2692: LD_INT 13
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 1
2700: PPUSH
2701: LD_INT 25
2703: PPUSH
2704: LD_INT 22
2706: PPUSH
2707: CALL 34322 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2711: CALL_OW 45
2715: PPUSH
2716: LD_INT 188
2718: PPUSH
2719: LD_INT 67
2721: PPUSH
2722: LD_INT 5
2724: PPUSH
2725: LD_INT 0
2727: PPUSH
2728: CALL 69333 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2732: LD_EXP 34
2736: PPUSH
2737: LD_INT 213
2739: PPUSH
2740: LD_INT 87
2742: PPUSH
2743: LD_INT 0
2745: PPUSH
2746: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2750: LD_EXP 34
2754: PPUSH
2755: LD_INT 214
2757: PPUSH
2758: LD_INT 87
2760: PPUSH
2761: CALL_OW 118
// if Kaia then
2765: LD_EXP 39
2769: IFFALSE 2804
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2771: LD_EXP 39
2775: PPUSH
2776: LD_INT 213
2778: PPUSH
2779: LD_INT 85
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2789: LD_EXP 39
2793: PPUSH
2794: LD_INT 215
2796: PPUSH
2797: LD_INT 87
2799: PPUSH
2800: CALL_OW 118
// end ; if Olaf and Kaia then
2804: LD_EXP 43
2808: PUSH
2809: LD_EXP 39
2813: AND
2814: IFFALSE 2851
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2816: LD_EXP 43
2820: PPUSH
2821: LD_INT 215
2823: PPUSH
2824: LD_INT 87
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2834: LD_EXP 43
2838: PPUSH
2839: LD_INT 213
2841: PPUSH
2842: LD_INT 85
2844: PPUSH
2845: CALL_OW 118
// end else
2849: GO 2871
// if Olaf then
2851: LD_EXP 43
2855: IFFALSE 2871
// PlaceHumanInUnit ( Olaf , factory ) ;
2857: LD_EXP 43
2861: PPUSH
2862: LD_VAR 0 8
2866: PPUSH
2867: CALL_OW 52
// if Givi then
2871: LD_EXP 35
2875: IFFALSE 2956
// begin if Kaia and Olaf then
2877: LD_EXP 39
2881: PUSH
2882: LD_EXP 43
2886: AND
2887: IFFALSE 2924
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2889: LD_EXP 35
2893: PPUSH
2894: LD_INT 247
2896: PPUSH
2897: LD_INT 117
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2907: LD_EXP 35
2911: PPUSH
2912: LD_INT 248
2914: PPUSH
2915: LD_INT 118
2917: PPUSH
2918: CALL_OW 118
// end else
2922: GO 2956
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2924: LD_EXP 35
2928: PPUSH
2929: LD_INT 216
2931: PPUSH
2932: LD_INT 88
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2942: LD_EXP 35
2946: PPUSH
2947: LD_EXP 34
2951: PPUSH
2952: CALL_OW 119
// end ; end ; if Kurt then
2956: LD_EXP 45
2960: IFFALSE 2980
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2962: LD_EXP 45
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Mike then
2980: LD_EXP 36
2984: IFFALSE 3004
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2986: LD_EXP 36
2990: PPUSH
2991: LD_VAR 0 11
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 52
// if Kamil then
3004: LD_EXP 38
3008: IFFALSE 3070
// begin if Kaia and Olaf then
3010: LD_EXP 39
3014: PUSH
3015: LD_EXP 43
3019: AND
3020: IFFALSE 3038
// PlaceHumanInUnit ( Kamil , depot ) else
3022: LD_EXP 38
3026: PPUSH
3027: LD_VAR 0 9
3031: PPUSH
3032: CALL_OW 52
3036: GO 3070
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3038: LD_EXP 38
3042: PPUSH
3043: LD_INT 213
3045: PPUSH
3046: LD_INT 87
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3056: LD_EXP 38
3060: PPUSH
3061: LD_EXP 34
3065: PPUSH
3066: CALL_OW 119
// end ; end ; if Sophia then
3070: LD_EXP 40
3074: IFFALSE 3090
// PlaceHumanInUnit ( Sophia , depot ) ;
3076: LD_EXP 40
3080: PPUSH
3081: LD_VAR 0 9
3085: PPUSH
3086: CALL_OW 52
// if Aviradze then
3090: LD_EXP 46
3094: IFFALSE 3143
// if lab then
3096: LD_VAR 0 10
3100: IFFALSE 3122
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3102: LD_EXP 46
3106: PPUSH
3107: LD_VAR 0 10
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: CALL_OW 52
3120: GO 3143
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3122: LD_EXP 46
3126: PPUSH
3127: LD_INT 210
3129: PPUSH
3130: LD_INT 87
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL_OW 50
// if Ibrahim then
3143: LD_EXP 37
3147: IFFALSE 3196
// if lab then
3149: LD_VAR 0 10
3153: IFFALSE 3175
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3155: LD_EXP 37
3159: PPUSH
3160: LD_VAR 0 10
3164: PUSH
3165: LD_INT 1
3167: ARRAY
3168: PPUSH
3169: CALL_OW 52
3173: GO 3196
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3175: LD_EXP 37
3179: PPUSH
3180: LD_INT 210
3182: PPUSH
3183: LD_INT 87
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 0
3191: PPUSH
3192: CALL_OW 50
// if Markov then
3196: LD_EXP 41
3200: IFFALSE 3249
// if factory then
3202: LD_VAR 0 8
3206: IFFALSE 3228
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3208: LD_EXP 41
3212: PPUSH
3213: LD_VAR 0 8
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: CALL_OW 52
3226: GO 3249
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3228: LD_EXP 41
3232: PPUSH
3233: LD_INT 210
3235: PPUSH
3236: LD_INT 87
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 0
3244: PPUSH
3245: CALL_OW 50
// if heikeSecondSquad then
3249: LD_EXP 49
3253: IFFALSE 3293
// for i in heikeSecondSquad do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_EXP 49
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3291
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3268: LD_VAR 0 2
3272: PPUSH
3273: LD_INT 190
3275: PPUSH
3276: LD_INT 65
3278: PPUSH
3279: LD_INT 5
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 50
3289: GO 3265
3291: POP
3292: POP
// if heikeApes then
3293: LD_EXP 50
3297: IFFALSE 3337
// for i in heikeApes do
3299: LD_ADDR_VAR 0 2
3303: PUSH
3304: LD_EXP 50
3308: PUSH
3309: FOR_IN
3310: IFFALSE 3335
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_INT 190
3319: PPUSH
3320: LD_INT 70
3322: PPUSH
3323: LD_INT 5
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 50
3333: GO 3309
3335: POP
3336: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3337: LD_ADDR_VAR 0 13
3341: PUSH
3342: LD_STRING 05_Vehicles
3344: PPUSH
3345: EMPTY
3346: PPUSH
3347: CALL_OW 30
3351: ST_TO_ADDR
// if tmp then
3352: LD_VAR 0 13
3356: IFFALSE 3526
// begin limiter := 10 ;
3358: LD_ADDR_VAR 0 14
3362: PUSH
3363: LD_INT 10
3365: ST_TO_ADDR
// for i in tmp do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: LD_VAR 0 13
3375: PUSH
3376: FOR_IN
3377: IFFALSE 3524
// begin limiter := Dec ( limiter ) ;
3379: LD_ADDR_VAR 0 14
3383: PUSH
3384: LD_VAR 0 14
3388: PPUSH
3389: CALL 68576 0 1
3393: ST_TO_ADDR
// if limiter = 0 then
3394: LD_VAR 0 14
3398: PUSH
3399: LD_INT 0
3401: EQUAL
3402: IFFALSE 3406
// break ;
3404: GO 3524
// uc_side := 2 ;
3406: LD_ADDR_OWVAR 20
3410: PUSH
3411: LD_INT 2
3413: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3414: LD_ADDR_OWVAR 21
3418: PUSH
3419: LD_VAR 0 2
3423: PUSH
3424: LD_INT 5
3426: ARRAY
3427: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3428: LD_VAR 0 2
3432: PUSH
3433: LD_INT 1
3435: ARRAY
3436: PPUSH
3437: LD_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: ARRAY
3445: PPUSH
3446: LD_VAR 0 2
3450: PUSH
3451: LD_INT 3
3453: ARRAY
3454: PPUSH
3455: LD_VAR 0 2
3459: PUSH
3460: LD_INT 4
3462: ARRAY
3463: PPUSH
3464: LD_INT 20
3466: PPUSH
3467: CALL 34322 0 5
// veh := CreateVehicle ;
3471: LD_ADDR_VAR 0 12
3475: PUSH
3476: CALL_OW 45
3480: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3481: LD_VAR 0 12
3485: PPUSH
3486: LD_INT 0
3488: PPUSH
3489: LD_INT 5
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3501: LD_VAR 0 12
3505: PPUSH
3506: LD_INT 252
3508: PPUSH
3509: LD_INT 111
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 50
// end ;
3522: GO 3376
3524: POP
3525: POP
// end ; end ;
3526: LD_VAR 0 1
3530: RET
// export function PrepareRolfSquad ; var i , j ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
3535: PPUSH
// uc_side := 8 ;
3536: LD_ADDR_OWVAR 20
3540: PUSH
3541: LD_INT 8
3543: ST_TO_ADDR
// uc_nation := 2 ;
3544: LD_ADDR_OWVAR 21
3548: PUSH
3549: LD_INT 2
3551: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3552: LD_ADDR_EXP 47
3556: PUSH
3557: LD_STRING Bergkamp
3559: PPUSH
3560: CALL_OW 25
3564: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3565: LD_ADDR_EXP 51
3569: PUSH
3570: LD_EXP 47
3574: PUSH
3575: EMPTY
3576: LIST
3577: ST_TO_ADDR
// for i := 1 to 4 do
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: DOUBLE
3584: LD_INT 1
3586: DEC
3587: ST_TO_ADDR
3588: LD_INT 4
3590: PUSH
3591: FOR_TO
3592: IFFALSE 3672
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_INT 5
3606: PUSH
3607: LD_INT 2
3609: PUSH
3610: LD_INT 3
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: FOR_TO
3629: IFFALSE 3668
// begin PrepareHuman ( false , i , 5 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3646: LD_ADDR_EXP 51
3650: PUSH
3651: LD_EXP 51
3655: PPUSH
3656: CALL_OW 44
3660: PPUSH
3661: CALL 67193 0 2
3665: ST_TO_ADDR
// end ;
3666: GO 3628
3668: POP
3669: POP
// end ;
3670: GO 3591
3672: POP
3673: POP
// if HexInfo ( 5 , 3 ) then
3674: LD_INT 5
3676: PPUSH
3677: LD_INT 3
3679: PPUSH
3680: CALL_OW 428
3684: IFFALSE 3701
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3686: LD_INT 5
3688: PPUSH
3689: LD_INT 3
3691: PPUSH
3692: CALL_OW 428
3696: PPUSH
3697: CALL_OW 64
// for i in rolfSquad do
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: LD_EXP 51
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3848
// begin uc_direction := 2 ;
3714: LD_ADDR_OWVAR 24
3718: PUSH
3719: LD_INT 2
3721: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3722: LD_VAR 0 2
3726: PPUSH
3727: CALL_OW 257
3731: PUSH
3732: LD_INT 3
3734: EQUAL
3735: IFFALSE 3809
// begin uc_side := 8 ;
3737: LD_ADDR_OWVAR 20
3741: PUSH
3742: LD_INT 8
3744: ST_TO_ADDR
// uc_nation := 2 ;
3745: LD_ADDR_OWVAR 21
3749: PUSH
3750: LD_INT 2
3752: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3753: LD_INT 13
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 27
3764: PPUSH
3765: LD_INT 88
3767: PPUSH
3768: CALL 34322 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3772: CALL_OW 45
3776: PPUSH
3777: LD_INT 11
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_INT 5
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: CALL_OW 428
3802: PPUSH
3803: CALL_OW 52
// end else
3807: GO 3824
// PlaceUnitArea ( i , northSpawn , false ) ;
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_INT 11
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3824: LD_VAR 0 2
3828: PPUSH
3829: LD_INT 29
3831: PPUSH
3832: LD_INT 10
3834: PPUSH
3835: CALL_OW 111
// wait ( 0 0$2 ) ;
3839: LD_INT 70
3841: PPUSH
3842: CALL_OW 67
// end ;
3846: GO 3711
3848: POP
3849: POP
// wait ( 0 0$5 ) ;
3850: LD_INT 175
3852: PPUSH
3853: CALL_OW 67
// end ;
3857: LD_VAR 0 1
3861: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3862: LD_INT 0
3864: PPUSH
3865: PPUSH
3866: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3867: LD_EXP 47
3871: PPUSH
3872: LD_INT 94
3874: PPUSH
3875: LD_INT 63
3877: PPUSH
3878: CALL_OW 428
3882: PPUSH
3883: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_INT 4
3894: PUSH
3895: LD_INT 82
3897: PUSH
3898: LD_INT 64
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 31
3912: PUSH
3913: LD_INT 73
3915: PUSH
3916: LD_INT 58
3918: PUSH
3919: LD_INT 0
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: ST_TO_ADDR
// for i in tmp do
3932: LD_ADDR_VAR 0 2
3936: PUSH
3937: LD_VAR 0 3
3941: PUSH
3942: FOR_IN
3943: IFFALSE 4007
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3945: LD_EXP 51
3949: PPUSH
3950: LD_INT 25
3952: PUSH
3953: LD_INT 2
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PPUSH
3960: CALL_OW 72
3964: PPUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 2
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 3
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 2
3996: PUSH
3997: LD_INT 4
3999: ARRAY
4000: PPUSH
4001: CALL_OW 205
4005: GO 3942
4007: POP
4008: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
4009: LD_EXP 51
4013: PUSH
4014: LD_INT 2
4016: ARRAY
4017: PPUSH
4018: LD_INT 63
4020: PPUSH
4021: LD_INT 42
4023: PPUSH
4024: CALL_OW 428
4028: PPUSH
4029: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4033: LD_EXP 51
4037: PUSH
4038: LD_INT 3
4040: ARRAY
4041: PPUSH
4042: LD_INT 94
4044: PPUSH
4045: LD_INT 63
4047: PPUSH
4048: CALL_OW 428
4052: PPUSH
4053: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4057: LD_INT 35
4059: PPUSH
4060: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4064: LD_EXP 51
4068: PPUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: LD_INT 60
4084: PUSH
4085: EMPTY
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 72
4100: IFFALSE 4057
// rolfScriptBase := true ;
4102: LD_ADDR_EXP 9
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// end ;
4110: LD_VAR 0 1
4114: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4115: LD_EXP 9
4119: PUSH
4120: LD_EXP 47
4124: PPUSH
4125: CALL_OW 255
4129: PUSH
4130: LD_INT 8
4132: EQUAL
4133: AND
4134: IFFALSE 5141
4136: GO 4138
4138: DISABLE
4139: LD_INT 0
4141: PPUSH
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
4146: PPUSH
4147: PPUSH
4148: PPUSH
4149: PPUSH
4150: PPUSH
// begin enable ;
4151: ENABLE
// if not rolfSquad then
4152: LD_EXP 51
4156: NOT
4157: IFFALSE 4161
// exit ;
4159: GO 5141
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4161: LD_ADDR_VAR 0 9
4165: PUSH
4166: LD_INT 12
4168: PPUSH
4169: LD_INT 81
4171: PUSH
4172: LD_INT 8
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4184: LD_ADDR_VAR 0 5
4188: PUSH
4189: LD_EXP 51
4193: PPUSH
4194: LD_INT 25
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 72
4208: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4209: LD_ADDR_VAR 0 6
4213: PUSH
4214: LD_EXP 51
4218: PPUSH
4219: LD_INT 25
4221: PUSH
4222: LD_INT 2
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 72
4233: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4234: LD_ADDR_VAR 0 8
4238: PUSH
4239: LD_EXP 51
4243: PPUSH
4244: LD_INT 25
4246: PUSH
4247: LD_INT 3
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 72
4258: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4259: LD_ADDR_VAR 0 7
4263: PUSH
4264: LD_EXP 51
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: ST_TO_ADDR
// if sol then
4284: LD_VAR 0 5
4288: IFFALSE 4586
// for i in sol union Rolf do
4290: LD_ADDR_VAR 0 1
4294: PUSH
4295: LD_VAR 0 5
4299: PUSH
4300: LD_EXP 47
4304: UNION
4305: PUSH
4306: FOR_IN
4307: IFFALSE 4584
// if not IsInUnit ( i ) and not HasTask ( i ) then
4309: LD_VAR 0 1
4313: PPUSH
4314: CALL_OW 310
4318: NOT
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: CALL_OW 314
4329: NOT
4330: AND
4331: IFFALSE 4582
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4333: LD_VAR 0 1
4337: PPUSH
4338: CALL_OW 256
4342: PUSH
4343: LD_INT 500
4345: LESS
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: LD_INT 80
4354: PPUSH
4355: LD_INT 49
4357: PPUSH
4358: CALL_OW 297
4362: PUSH
4363: LD_INT 6
4365: GREATER
4366: AND
4367: IFFALSE 4386
// begin ComMoveXY ( i , 80 , 49 ) ;
4369: LD_VAR 0 1
4373: PPUSH
4374: LD_INT 80
4376: PPUSH
4377: LD_INT 49
4379: PPUSH
4380: CALL_OW 111
// continue ;
4384: GO 4306
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4386: LD_ADDR_VAR 0 4
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 8
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 50
4403: PUSH
4404: EMPTY
4405: LIST
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: LD_INT 30
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 30
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 30
4432: PUSH
4433: LD_INT 32
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 30
4442: PUSH
4443: LD_INT 31
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: ST_TO_ADDR
// if tmp then
4467: LD_VAR 0 4
4471: IFFALSE 4582
// begin for b in tmp do
4473: LD_ADDR_VAR 0 2
4477: PUSH
4478: LD_VAR 0 4
4482: PUSH
4483: FOR_IN
4484: IFFALSE 4580
// begin case GetBType ( b ) of b_armoury , b_barracks :
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 266
4495: PUSH
4496: LD_INT 4
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4510
4502: LD_INT 5
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4521
4510: POP
// p := 6 ; b_breastwork , b_bunker :
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 6
4518: ST_TO_ADDR
4519: GO 4547
4521: LD_INT 31
4523: DOUBLE
4524: EQUAL
4525: IFTRUE 4535
4527: LD_INT 32
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4546
4535: POP
// p := 1 ; end ;
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
4544: GO 4547
4546: POP
// if UnitsInside ( b ) < p then
4547: LD_VAR 0 2
4551: PPUSH
4552: CALL_OW 313
4556: PUSH
4557: LD_VAR 0 3
4561: LESS
4562: IFFALSE 4578
// ComEnterUnit ( i , b ) ;
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_VAR 0 2
4573: PPUSH
4574: CALL_OW 120
// end ;
4578: GO 4483
4580: POP
4581: POP
// end ; end ;
4582: GO 4306
4584: POP
4585: POP
// if sci then
4586: LD_VAR 0 7
4590: IFFALSE 4645
// for i in sci do
4592: LD_ADDR_VAR 0 1
4596: PUSH
4597: LD_VAR 0 7
4601: PUSH
4602: FOR_IN
4603: IFFALSE 4643
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4605: LD_VAR 0 1
4609: PPUSH
4610: LD_INT 80
4612: PPUSH
4613: LD_INT 49
4615: PPUSH
4616: CALL_OW 297
4620: PUSH
4621: LD_INT 9
4623: GREATER
4624: IFFALSE 4641
// ComMoveXY ( i , 80 , 49 ) ;
4626: LD_VAR 0 1
4630: PPUSH
4631: LD_INT 80
4633: PPUSH
4634: LD_INT 49
4636: PPUSH
4637: CALL_OW 111
// end ;
4641: GO 4602
4643: POP
4644: POP
// if mech then
4645: LD_VAR 0 8
4649: IFFALSE 4863
// for i in mech do
4651: LD_ADDR_VAR 0 1
4655: PUSH
4656: LD_VAR 0 8
4660: PUSH
4661: FOR_IN
4662: IFFALSE 4861
// begin hasVehicle := IsInUnit ( i ) ;
4664: LD_ADDR_VAR 0 10
4668: PUSH
4669: LD_VAR 0 1
4673: PPUSH
4674: CALL_OW 310
4678: ST_TO_ADDR
// if enemyInBase then
4679: LD_VAR 0 9
4683: IFFALSE 4779
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4685: LD_VAR 0 10
4689: PUSH
4690: LD_VAR 0 10
4694: PPUSH
4695: CALL_OW 256
4699: PUSH
4700: LD_INT 500
4702: GREATER
4703: AND
4704: IFFALSE 4732
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4706: LD_VAR 0 10
4710: PPUSH
4711: LD_VAR 0 9
4715: PPUSH
4716: LD_VAR 0 10
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 115
4730: GO 4777
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4732: LD_VAR 0 10
4736: PPUSH
4737: LD_INT 86
4739: PPUSH
4740: LD_INT 49
4742: PPUSH
4743: CALL_OW 297
4747: PUSH
4748: LD_INT 8
4750: GREATER
4751: IFFALSE 4777
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4753: LD_VAR 0 10
4757: PPUSH
4758: LD_INT 86
4760: PPUSH
4761: LD_INT 49
4763: PPUSH
4764: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL 69013 0 1
// end end else
4777: GO 4859
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4779: LD_VAR 0 1
4783: PPUSH
4784: LD_INT 86
4786: PPUSH
4787: LD_INT 49
4789: PPUSH
4790: CALL_OW 297
4794: PUSH
4795: LD_INT 8
4797: GREATER
4798: IFFALSE 4817
// ComMoveXY ( i , 86 , 49 ) else
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 86
4807: PPUSH
4808: LD_INT 49
4810: PPUSH
4811: CALL_OW 111
4815: GO 4859
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4817: LD_VAR 0 10
4821: PUSH
4822: LD_VAR 0 10
4826: PPUSH
4827: CALL_OW 256
4831: PUSH
4832: LD_INT 1000
4834: LESS
4835: AND
4836: IFFALSE 4859
// begin SetFuel ( hasVehicle , 100 ) ;
4838: LD_VAR 0 10
4842: PPUSH
4843: LD_INT 100
4845: PPUSH
4846: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4850: LD_VAR 0 1
4854: PPUSH
4855: CALL 68893 0 1
// end ; end ; end ;
4859: GO 4661
4861: POP
4862: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4863: LD_ADDR_VAR 0 4
4867: PUSH
4868: LD_INT 12
4870: PPUSH
4871: LD_INT 3
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: LD_INT 1000
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 21
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 70
4906: ST_TO_ADDR
// if tmp and eng then
4907: LD_VAR 0 4
4911: PUSH
4912: LD_VAR 0 6
4916: AND
4917: IFFALSE 5023
// begin for i in eng do
4919: LD_ADDR_VAR 0 1
4923: PUSH
4924: LD_VAR 0 6
4928: PUSH
4929: FOR_IN
4930: IFFALSE 5021
// if IsInUnit ( i ) then
4932: LD_VAR 0 1
4936: PPUSH
4937: CALL_OW 310
4941: IFFALSE 4954
// ComExitBuilding ( i ) else
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 122
4952: GO 5019
// if GetLives ( i ) = 1000 then
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 256
4963: PUSH
4964: LD_INT 1000
4966: EQUAL
4967: IFFALSE 4989
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_VAR 0 4
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 130
4987: GO 5019
// if GetLives ( i ) < 700 then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 256
4998: PUSH
4999: LD_INT 700
5001: LESS
5002: IFFALSE 5019
// ComMoveXY ( i , 80 , 49 ) ;
5004: LD_VAR 0 1
5008: PPUSH
5009: LD_INT 80
5011: PPUSH
5012: LD_INT 49
5014: PPUSH
5015: CALL_OW 111
5019: GO 4929
5021: POP
5022: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5023: LD_VAR 0 4
5027: NOT
5028: PUSH
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 3
5036: PUSH
5037: LD_INT 54
5039: PUSH
5040: EMPTY
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 72
5051: AND
5052: IFFALSE 5141
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5054: LD_ADDR_VAR 0 1
5058: PUSH
5059: LD_VAR 0 6
5063: PPUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 54
5069: PUSH
5070: EMPTY
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PPUSH
5077: CALL_OW 72
5081: PUSH
5082: FOR_IN
5083: IFFALSE 5139
// if GetLives ( i ) < 1000 then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 256
5094: PUSH
5095: LD_INT 1000
5097: LESS
5098: IFFALSE 5117
// ComMoveXY ( i , 80 , 49 ) else
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 80
5107: PPUSH
5108: LD_INT 49
5110: PPUSH
5111: CALL_OW 111
5115: GO 5137
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5117: LD_VAR 0 1
5121: PPUSH
5122: LD_INT 86
5124: PPUSH
5125: LD_INT 54
5127: PPUSH
5128: CALL_OW 428
5132: PPUSH
5133: CALL_OW 120
5137: GO 5082
5139: POP
5140: POP
// end ;
5141: PPOPN 10
5143: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
5149: PPUSH
// uc_side := 5 ;
5150: LD_ADDR_OWVAR 20
5154: PUSH
5155: LD_INT 5
5157: ST_TO_ADDR
// uc_nation := 2 ;
5158: LD_ADDR_OWVAR 21
5162: PUSH
5163: LD_INT 2
5165: ST_TO_ADDR
// omarSquad := [ ] ;
5166: LD_ADDR_EXP 52
5170: PUSH
5171: EMPTY
5172: ST_TO_ADDR
// for i := 1 to 4 do
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: DOUBLE
5179: LD_INT 1
5181: DEC
5182: ST_TO_ADDR
5183: LD_INT 4
5185: PUSH
5186: FOR_TO
5187: IFFALSE 5310
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: DOUBLE
5195: LD_INT 1
5197: DEC
5198: ST_TO_ADDR
5199: LD_INT 6
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_EXP 21
5212: PLUS
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: PUSH
5229: FOR_TO
5230: IFFALSE 5306
// begin PrepareHuman ( false , i , 5 ) ;
5232: LD_INT 0
5234: PPUSH
5235: LD_VAR 0 2
5239: PPUSH
5240: LD_INT 5
5242: PPUSH
5243: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5247: LD_ADDR_EXP 52
5251: PUSH
5252: LD_EXP 52
5256: PPUSH
5257: CALL_OW 44
5261: PPUSH
5262: CALL 67193 0 2
5266: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 1
5274: EQUAL
5275: PUSH
5276: LD_INT 50
5278: PPUSH
5279: CALL_OW 13
5283: AND
5284: IFFALSE 5304
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5286: LD_EXP 52
5290: PUSH
5291: LD_EXP 52
5295: ARRAY
5296: PPUSH
5297: LD_INT 8
5299: PPUSH
5300: CALL_OW 336
// end ;
5304: GO 5229
5306: POP
5307: POP
// end ;
5308: GO 5186
5310: POP
5311: POP
// if HexInfo ( 340 , 205 ) then
5312: LD_INT 340
5314: PPUSH
5315: LD_INT 205
5317: PPUSH
5318: CALL_OW 428
5322: IFFALSE 5339
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5324: LD_INT 340
5326: PPUSH
5327: LD_INT 205
5329: PPUSH
5330: CALL_OW 428
5334: PPUSH
5335: CALL_OW 64
// p := 0 ;
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: LD_INT 0
5346: ST_TO_ADDR
// for i in omarSquad do
5347: LD_ADDR_VAR 0 2
5351: PUSH
5352: LD_EXP 52
5356: PUSH
5357: FOR_IN
5358: IFFALSE 5559
// begin uc_direction := 4 ;
5360: LD_ADDR_OWVAR 24
5364: PUSH
5365: LD_INT 4
5367: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5368: LD_VAR 0 2
5372: PPUSH
5373: CALL_OW 257
5377: PUSH
5378: LD_INT 3
5380: EQUAL
5381: PUSH
5382: LD_VAR 0 4
5386: PUSH
5387: LD_INT 2
5389: LESS
5390: AND
5391: IFFALSE 5520
// begin p := p + 1 ;
5393: LD_ADDR_VAR 0 4
5397: PUSH
5398: LD_VAR 0 4
5402: PUSH
5403: LD_INT 1
5405: PLUS
5406: ST_TO_ADDR
// uc_side := 5 ;
5407: LD_ADDR_OWVAR 20
5411: PUSH
5412: LD_INT 5
5414: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5415: LD_INT 0
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 12
5425: IFFALSE 5456
// begin uc_nation := 2 ;
5427: LD_ADDR_OWVAR 21
5431: PUSH
5432: LD_INT 2
5434: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5435: LD_INT 13
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: LD_INT 27
5446: PPUSH
5447: LD_INT 88
5449: PPUSH
5450: CALL 34322 0 5
// end else
5454: GO 5483
// begin uc_nation := 3 ;
5456: LD_ADDR_OWVAR 21
5460: PUSH
5461: LD_INT 3
5463: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5464: LD_INT 22
5466: PPUSH
5467: LD_INT 1
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 45
5475: PPUSH
5476: LD_INT 88
5478: PPUSH
5479: CALL 34322 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5483: CALL_OW 45
5487: PPUSH
5488: LD_INT 13
5490: PPUSH
5491: LD_INT 0
5493: PPUSH
5494: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5498: LD_VAR 0 2
5502: PPUSH
5503: LD_INT 340
5505: PPUSH
5506: LD_INT 205
5508: PPUSH
5509: CALL_OW 428
5513: PPUSH
5514: CALL_OW 52
// end else
5518: GO 5535
// PlaceUnitArea ( i , southSpawn , false ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 13
5527: PPUSH
5528: LD_INT 0
5530: PPUSH
5531: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5535: LD_VAR 0 2
5539: PPUSH
5540: LD_INT 333
5542: PPUSH
5543: LD_INT 210
5545: PPUSH
5546: CALL_OW 111
// wait ( 0 0$2 ) ;
5550: LD_INT 70
5552: PPUSH
5553: CALL_OW 67
// end ;
5557: GO 5357
5559: POP
5560: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_INT 340
5568: PPUSH
5569: LD_INT 205
5571: PPUSH
5572: LD_INT 0
5574: PPUSH
5575: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5579: LD_EXP 44
5583: PPUSH
5584: LD_INT 333
5586: PPUSH
5587: LD_INT 206
5589: PPUSH
5590: CALL_OW 111
// wait ( 0 0$2 ) ;
5594: LD_INT 70
5596: PPUSH
5597: CALL_OW 67
// ComHold ( omarSquad ) ;
5601: LD_EXP 52
5605: PPUSH
5606: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5610: LD_EXP 44
5614: PUSH
5615: LD_EXP 52
5619: PPUSH
5620: LD_INT 2
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: PPUSH
5648: CALL_OW 72
5652: UNION
5653: PUSH
5654: LD_INT 22
5656: PUSH
5657: LD_INT 5
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 21
5666: PUSH
5667: LD_INT 2
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 69
5682: UNION
5683: PPUSH
5684: LD_INT 315
5686: PPUSH
5687: LD_INT 214
5689: PPUSH
5690: CALL_OW 114
// wait ( 0 0$22 ) ;
5694: LD_INT 770
5696: PPUSH
5697: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5701: LD_EXP 52
5705: PUSH
5706: LD_EXP 44
5710: UNION
5711: PPUSH
5712: LD_INT 329
5714: PPUSH
5715: LD_INT 231
5717: PPUSH
5718: CALL_OW 114
// end ;
5722: LD_VAR 0 1
5726: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5727: LD_EXP 10
5731: IFFALSE 6814
5733: GO 5735
5735: DISABLE
5736: LD_INT 0
5738: PPUSH
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
// begin enable ;
5749: ENABLE
// if not omarSquad then
5750: LD_EXP 52
5754: NOT
5755: IFFALSE 5759
// exit ;
5757: GO 6814
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5759: LD_ADDR_VAR 0 10
5763: PUSH
5764: LD_INT 14
5766: PPUSH
5767: LD_INT 81
5769: PUSH
5770: LD_INT 5
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 70
5781: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5782: LD_ADDR_VAR 0 6
5786: PUSH
5787: LD_EXP 52
5791: PPUSH
5792: LD_INT 2
5794: PUSH
5795: LD_INT 25
5797: PUSH
5798: LD_INT 1
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 8
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 72
5824: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5825: LD_ADDR_VAR 0 7
5829: PUSH
5830: LD_EXP 52
5834: PPUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 72
5849: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5850: LD_ADDR_VAR 0 9
5854: PUSH
5855: LD_EXP 52
5859: PPUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 3
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_EXP 52
5884: PPUSH
5885: LD_INT 25
5887: PUSH
5888: LD_INT 4
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 72
5899: ST_TO_ADDR
// if sol then
5900: LD_VAR 0 6
5904: IFFALSE 6268
// for i in sol do
5906: LD_ADDR_VAR 0 1
5910: PUSH
5911: LD_VAR 0 6
5915: PUSH
5916: FOR_IN
5917: IFFALSE 6266
// if not HasTask ( i ) then
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 314
5928: NOT
5929: IFFALSE 6264
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5931: LD_VAR 0 1
5935: PPUSH
5936: CALL_OW 310
5940: NOT
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 256
5951: PUSH
5952: LD_INT 500
5954: LESS
5955: AND
5956: PUSH
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_INT 333
5964: PPUSH
5965: LD_INT 234
5967: PPUSH
5968: CALL_OW 297
5972: PUSH
5973: LD_INT 6
5975: GREATER
5976: AND
5977: IFFALSE 5996
// begin ComMoveXY ( i , 333 , 234 ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: LD_INT 333
5986: PPUSH
5987: LD_INT 234
5989: PPUSH
5990: CALL_OW 111
// continue ;
5994: GO 5916
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 5
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 58
6013: PUSH
6014: EMPTY
6015: LIST
6016: PUSH
6017: LD_INT 50
6019: PUSH
6020: EMPTY
6021: LIST
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 30
6028: PUSH
6029: LD_INT 32
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 30
6038: PUSH
6039: LD_INT 31
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 69
6061: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6062: LD_VAR 0 5
6066: PUSH
6067: LD_VAR 0 1
6071: PPUSH
6072: CALL_OW 310
6076: PPUSH
6077: CALL_OW 266
6081: PUSH
6082: LD_INT 31
6084: NONEQUAL
6085: AND
6086: IFFALSE 6168
// begin for j in tmp do
6088: LD_ADDR_VAR 0 2
6092: PUSH
6093: LD_VAR 0 5
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6164
// if GetTag ( j ) <> 1 then
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 110
6110: PUSH
6111: LD_INT 1
6113: NONEQUAL
6114: IFFALSE 6162
// begin SetTag ( j , 1 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 109
// if IsInUnit ( i ) then
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 310
6137: IFFALSE 6148
// ComExit ( i ) ;
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL 67591 0 1
// AddComEnterUnit ( i , j ) ;
6148: LD_VAR 0 1
6152: PPUSH
6153: LD_VAR 0 2
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 6098
6164: POP
6165: POP
// end else
6166: GO 6264
// if not IsInUnit ( i ) then
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 310
6177: NOT
6178: IFFALSE 6264
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6180: LD_ADDR_VAR 0 5
6184: PUSH
6185: LD_INT 22
6187: PUSH
6188: LD_INT 5
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 50
6197: PUSH
6198: EMPTY
6199: LIST
6200: PUSH
6201: LD_INT 30
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: ST_TO_ADDR
// if tmp then
6221: LD_VAR 0 5
6225: IFFALSE 6264
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6227: LD_VAR 0 5
6231: PUSH
6232: LD_INT 1
6234: ARRAY
6235: PPUSH
6236: CALL_OW 313
6240: PUSH
6241: LD_INT 6
6243: LESS
6244: IFFALSE 6264
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_VAR 0 5
6255: PUSH
6256: LD_INT 1
6258: ARRAY
6259: PPUSH
6260: CALL_OW 120
// end ; end ;
6264: GO 5916
6266: POP
6267: POP
// if sci then
6268: LD_VAR 0 8
6272: IFFALSE 6327
// for i in sci do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 8
6283: PUSH
6284: FOR_IN
6285: IFFALSE 6325
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 333
6294: PPUSH
6295: LD_INT 234
6297: PPUSH
6298: CALL_OW 297
6302: PUSH
6303: LD_INT 9
6305: GREATER
6306: IFFALSE 6323
// ComMoveXY ( i , 333 , 234 ) ;
6308: LD_VAR 0 1
6312: PPUSH
6313: LD_INT 333
6315: PPUSH
6316: LD_INT 234
6318: PPUSH
6319: CALL_OW 111
// end ;
6323: GO 6284
6325: POP
6326: POP
// if mech then
6327: LD_VAR 0 9
6331: IFFALSE 6536
// for i in mech do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 9
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6534
// begin hasVehicle := IsInUnit ( i ) ;
6346: LD_ADDR_VAR 0 11
6350: PUSH
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 310
6360: ST_TO_ADDR
// if enemyInBase then
6361: LD_VAR 0 10
6365: IFFALSE 6452
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6367: LD_VAR 0 11
6371: PUSH
6372: LD_VAR 0 11
6376: PPUSH
6377: CALL_OW 256
6381: PUSH
6382: LD_INT 500
6384: GREATER
6385: AND
6386: IFFALSE 6414
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6388: LD_VAR 0 11
6392: PPUSH
6393: LD_VAR 0 10
6397: PPUSH
6398: LD_VAR 0 11
6402: PPUSH
6403: CALL_OW 74
6407: PPUSH
6408: CALL_OW 115
6412: GO 6450
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6414: LD_VAR 0 11
6418: PPUSH
6419: LD_INT 333
6421: PPUSH
6422: LD_INT 234
6424: PPUSH
6425: CALL_OW 297
6429: PUSH
6430: LD_INT 6
6432: GREATER
6433: IFFALSE 6450
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6435: LD_VAR 0 11
6439: PPUSH
6440: LD_INT 333
6442: PPUSH
6443: LD_INT 234
6445: PPUSH
6446: CALL_OW 111
// end else
6450: GO 6532
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_INT 333
6459: PPUSH
6460: LD_INT 234
6462: PPUSH
6463: CALL_OW 297
6467: PUSH
6468: LD_INT 6
6470: GREATER
6471: IFFALSE 6490
// ComMoveXY ( i , 333 , 234 ) else
6473: LD_VAR 0 1
6477: PPUSH
6478: LD_INT 333
6480: PPUSH
6481: LD_INT 234
6483: PPUSH
6484: CALL_OW 111
6488: GO 6532
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6490: LD_VAR 0 11
6494: PUSH
6495: LD_VAR 0 11
6499: PPUSH
6500: CALL_OW 256
6504: PUSH
6505: LD_INT 1000
6507: LESS
6508: AND
6509: IFFALSE 6532
// begin SetFuel ( hasVehicle , 100 ) ;
6511: LD_VAR 0 11
6515: PPUSH
6516: LD_INT 100
6518: PPUSH
6519: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL 68893 0 1
// end ; end ; end ;
6532: GO 6343
6534: POP
6535: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_INT 14
6543: PPUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 24
6549: PUSH
6550: LD_INT 1000
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 21
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PPUSH
6575: CALL_OW 70
6579: ST_TO_ADDR
// if tmp and eng then
6580: LD_VAR 0 5
6584: PUSH
6585: LD_VAR 0 7
6589: AND
6590: IFFALSE 6696
// begin for i in eng do
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_VAR 0 7
6601: PUSH
6602: FOR_IN
6603: IFFALSE 6694
// if IsInUnit ( i ) then
6605: LD_VAR 0 1
6609: PPUSH
6610: CALL_OW 310
6614: IFFALSE 6627
// ComExitBuilding ( i ) else
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 122
6625: GO 6692
// if GetLives ( i ) = 1000 then
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 256
6636: PUSH
6637: LD_INT 1000
6639: EQUAL
6640: IFFALSE 6662
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6642: LD_VAR 0 1
6646: PPUSH
6647: LD_VAR 0 5
6651: PUSH
6652: LD_INT 1
6654: ARRAY
6655: PPUSH
6656: CALL_OW 130
6660: GO 6692
// if GetLives ( i ) < 700 then
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 256
6671: PUSH
6672: LD_INT 700
6674: LESS
6675: IFFALSE 6692
// ComMoveXY ( i , 333 , 234 ) ;
6677: LD_VAR 0 1
6681: PPUSH
6682: LD_INT 333
6684: PPUSH
6685: LD_INT 234
6687: PPUSH
6688: CALL_OW 111
6692: GO 6602
6694: POP
6695: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6696: LD_VAR 0 5
6700: NOT
6701: PUSH
6702: LD_VAR 0 7
6706: PPUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 54
6712: PUSH
6713: EMPTY
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 72
6724: AND
6725: IFFALSE 6814
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6727: LD_ADDR_VAR 0 1
6731: PUSH
6732: LD_VAR 0 7
6736: PPUSH
6737: LD_INT 3
6739: PUSH
6740: LD_INT 54
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PPUSH
6750: CALL_OW 72
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6812
// if GetLives ( i ) < 1000 then
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 256
6767: PUSH
6768: LD_INT 1000
6770: LESS
6771: IFFALSE 6790
// ComMoveXY ( i , 333 , 234 ) else
6773: LD_VAR 0 1
6777: PPUSH
6778: LD_INT 333
6780: PPUSH
6781: LD_INT 234
6783: PPUSH
6784: CALL_OW 111
6788: GO 6810
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6790: LD_VAR 0 1
6794: PPUSH
6795: LD_INT 341
6797: PPUSH
6798: LD_INT 232
6800: PPUSH
6801: CALL_OW 428
6805: PPUSH
6806: CALL_OW 120
6810: GO 6755
6812: POP
6813: POP
// end ;
6814: PPOPN 11
6816: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6817: LD_EXP 44
6821: PPUSH
6822: CALL_OW 256
6826: PUSH
6827: LD_INT 1000
6829: LESS
6830: IFFALSE 6848
6832: GO 6834
6834: DISABLE
// begin enable ;
6835: ENABLE
// SetLives ( Omar , 1000 ) ;
6836: LD_EXP 44
6840: PPUSH
6841: LD_INT 1000
6843: PPUSH
6844: CALL_OW 234
// end ;
6848: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6849: LD_EXP 47
6853: PPUSH
6854: CALL_OW 256
6858: PUSH
6859: LD_INT 1000
6861: LESS
6862: PUSH
6863: LD_EXP 32
6867: AND
6868: IFFALSE 6886
6870: GO 6872
6872: DISABLE
// begin enable ;
6873: ENABLE
// SetLives ( Rolf , 1000 ) ;
6874: LD_EXP 47
6878: PPUSH
6879: LD_INT 1000
6881: PPUSH
6882: CALL_OW 234
// end ;
6886: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6887: LD_EXP 32
6891: IFFALSE 7571
6893: GO 6895
6895: DISABLE
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6904: LD_ADDR_VAR 0 4
6908: PUSH
6909: LD_INT 215
6911: PUSH
6912: LD_INT 162
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 195
6921: PUSH
6922: LD_INT 163
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 174
6931: PUSH
6932: LD_INT 162
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 145
6941: PUSH
6942: LD_INT 163
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 127
6951: PUSH
6952: LD_INT 163
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6966: LD_ADDR_VAR 0 6
6970: PUSH
6971: LD_INT 221
6973: PUSH
6974: LD_INT 161
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_EXP 47
6990: PUSH
6991: LD_EXP 51
6995: UNION
6996: ST_TO_ADDR
// if not tmp then
6997: LD_VAR 0 2
7001: NOT
7002: IFFALSE 7006
// exit ;
7004: GO 7571
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_VAR 0 6
7015: PUSH
7016: LD_INT 1
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 6
7024: PUSH
7025: LD_INT 2
7027: ARRAY
7028: PPUSH
7029: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7040: LD_ADDR_VAR 0 2
7044: PUSH
7045: LD_EXP 51
7049: PPUSH
7050: LD_INT 3
7052: PUSH
7053: LD_INT 55
7055: PUSH
7056: EMPTY
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 25
7078: PUSH
7079: LD_INT 8
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 72
7099: ST_TO_ADDR
// if tmp then
7100: LD_VAR 0 2
7104: IFFALSE 7257
// begin for i in tmp do
7106: LD_ADDR_VAR 0 1
7110: PUSH
7111: LD_VAR 0 2
7115: PUSH
7116: FOR_IN
7117: IFFALSE 7255
// begin tag := GetTag ( i ) ;
7119: LD_ADDR_VAR 0 5
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 110
7133: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 256
7143: PUSH
7144: LD_INT 800
7146: LESS
7147: PUSH
7148: LD_VAR 0 5
7152: PUSH
7153: LD_INT 101
7155: LESS
7156: AND
7157: IFFALSE 7200
// begin SetTag ( i , 101 ) ;
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 101
7166: PPUSH
7167: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_VAR 0 6
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_VAR 0 6
7189: PUSH
7190: LD_INT 2
7192: ARRAY
7193: PPUSH
7194: CALL_OW 111
// end else
7198: GO 7253
// if tag = 101 then
7200: LD_VAR 0 5
7204: PUSH
7205: LD_INT 101
7207: EQUAL
7208: IFFALSE 7239
// begin if GetLives ( i ) = 1000 then
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 256
7219: PUSH
7220: LD_INT 1000
7222: EQUAL
7223: IFFALSE 7237
// SetTag ( i , 0 ) ;
7225: LD_VAR 0 1
7229: PPUSH
7230: LD_INT 0
7232: PPUSH
7233: CALL_OW 109
// end else
7237: GO 7253
// AgressiveMove ( i , path ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_VAR 0 4
7248: PPUSH
7249: CALL 69803 0 2
// end ;
7253: GO 7116
7255: POP
7256: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_INT 8
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 34
7287: PUSH
7288: LD_INT 32
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PPUSH
7304: CALL_OW 69
7308: ST_TO_ADDR
// if not tmp then
7309: LD_VAR 0 2
7313: NOT
7314: IFFALSE 7318
// continue ;
7316: GO 7033
// for i in tmp do
7318: LD_ADDR_VAR 0 1
7322: PUSH
7323: LD_VAR 0 2
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7562
// begin mech := IsDrivenBy ( i ) ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 311
7345: ST_TO_ADDR
// if not mech then
7346: LD_VAR 0 3
7350: NOT
7351: IFFALSE 7355
// continue ;
7353: GO 7328
// tag := GetTag ( i ) ;
7355: LD_ADDR_VAR 0 5
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 110
7369: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7370: LD_VAR 0 1
7374: PPUSH
7375: CALL_OW 256
7379: PUSH
7380: LD_INT 600
7382: GREATEREQUAL
7383: PUSH
7384: LD_VAR 0 5
7388: PUSH
7389: LD_INT 101
7391: LESS
7392: AND
7393: IFFALSE 7409
// AgressiveMove ( i , path ) ;
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_VAR 0 4
7404: PPUSH
7405: CALL 69803 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 256
7418: PUSH
7419: LD_INT 600
7421: LESS
7422: PUSH
7423: LD_VAR 0 5
7427: PUSH
7428: LD_INT 101
7430: LESS
7431: AND
7432: IFFALSE 7473
// begin SetTag ( i , 101 ) ;
7434: LD_VAR 0 1
7438: PPUSH
7439: LD_INT 101
7441: PPUSH
7442: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 6
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: PPUSH
7460: LD_VAR 0 6
7464: PUSH
7465: LD_INT 2
7467: ARRAY
7468: PPUSH
7469: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7473: LD_VAR 0 5
7477: PUSH
7478: LD_INT 101
7480: EQUAL
7481: PUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_VAR 0 6
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PPUSH
7505: CALL_OW 297
7509: PUSH
7510: LD_INT 9
7512: LESS
7513: AND
7514: PUSH
7515: LD_VAR 0 3
7519: AND
7520: IFFALSE 7560
// begin if GetLives ( i ) < 1000 then
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 256
7531: PUSH
7532: LD_INT 1000
7534: LESS
7535: IFFALSE 7548
// AddComRepairVehicleAndReturn ( mech ) else
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL 69013 0 1
7546: GO 7560
// SetTag ( i , 0 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 0
7555: PPUSH
7556: CALL_OW 109
// end ; end ;
7560: GO 7328
7562: POP
7563: POP
// until not tmp ;
7564: LD_VAR 0 2
7568: NOT
7569: IFFALSE 7033
// end ;
7571: PPOPN 6
7573: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7574: LD_EXP 23
7578: IFFALSE 8883
7580: GO 7582
7582: DISABLE
7583: LD_INT 0
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7593: LD_ADDR_VAR 0 7
7597: PUSH
7598: LD_INT 209
7600: PUSH
7601: LD_INT 221
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 190
7610: PUSH
7611: LD_INT 220
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 177
7620: PUSH
7621: LD_INT 220
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 168
7630: PUSH
7631: LD_INT 223
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 150
7640: PUSH
7641: LD_INT 206
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7655: LD_ADDR_VAR 0 8
7659: PUSH
7660: LD_INT 219
7662: PUSH
7663: LD_INT 225
7665: PUSH
7666: LD_INT 0
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// for i := 1 to 2 do
7674: LD_ADDR_VAR 0 1
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_INT 2
7686: PUSH
7687: FOR_TO
7688: IFFALSE 7837
// begin uc_side := 5 ;
7690: LD_ADDR_OWVAR 20
7694: PUSH
7695: LD_INT 5
7697: ST_TO_ADDR
// uc_nation := 2 ;
7698: LD_ADDR_OWVAR 21
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7706: LD_INT 14
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: LD_INT 1
7714: PPUSH
7715: LD_INT 32
7717: PPUSH
7718: LD_INT 80
7720: PPUSH
7721: CALL 34322 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7725: LD_ADDR_VAR 0 2
7729: PUSH
7730: LD_VAR 0 2
7734: PPUSH
7735: CALL_OW 45
7739: PPUSH
7740: CALL 67193 0 2
7744: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7745: LD_VAR 0 2
7749: PUSH
7750: LD_VAR 0 1
7754: ARRAY
7755: PPUSH
7756: LD_INT 4
7758: PPUSH
7759: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7763: LD_VAR 0 2
7767: PUSH
7768: LD_VAR 0 1
7772: ARRAY
7773: PPUSH
7774: LD_INT 16
7776: PPUSH
7777: LD_INT 0
7779: PPUSH
7780: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7784: LD_INT 0
7786: PPUSH
7787: LD_INT 4
7789: PPUSH
7790: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7794: CALL_OW 44
7798: PPUSH
7799: LD_VAR 0 2
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PPUSH
7810: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7814: LD_VAR 0 2
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PPUSH
7825: LD_INT 337
7827: PPUSH
7828: LD_INT 232
7830: PPUSH
7831: CALL_OW 111
// end ;
7835: GO 7687
7837: POP
7838: POP
// wait ( 0 0$25 ) ;
7839: LD_INT 875
7841: PPUSH
7842: CALL_OW 67
// for i := 1 to 2 do
7846: LD_ADDR_VAR 0 1
7850: PUSH
7851: DOUBLE
7852: LD_INT 1
7854: DEC
7855: ST_TO_ADDR
7856: LD_INT 2
7858: PUSH
7859: FOR_TO
7860: IFFALSE 7885
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7862: LD_VAR 0 2
7866: PUSH
7867: LD_VAR 0 1
7871: ARRAY
7872: PPUSH
7873: LD_INT 2
7875: PPUSH
7876: LD_INT 100
7878: PPUSH
7879: CALL_OW 290
7883: GO 7859
7885: POP
7886: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7887: LD_EXP 52
7891: PPUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 8
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL_OW 72
7924: PPUSH
7925: CALL_OW 122
// wait ( 0 0$3 ) ;
7929: LD_INT 105
7931: PPUSH
7932: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7936: LD_EXP 52
7940: PUSH
7941: LD_EXP 44
7945: UNION
7946: PPUSH
7947: LD_VAR 0 8
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 8
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 174
// wait ( 0 0$3 ) ;
7969: LD_INT 105
7971: PPUSH
7972: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_INT 218
7983: PPUSH
7984: LD_INT 217
7986: PPUSH
7987: CALL_OW 171
// wait ( 1 1$00 ) ;
7991: LD_INT 2100
7993: PPUSH
7994: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7998: LD_INT 35
8000: PPUSH
8001: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
8005: LD_VAR 0 8
8009: PUSH
8010: LD_INT 3
8012: ARRAY
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: IFFALSE 8122
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8019: LD_INT 22
8021: PUSH
8022: LD_INT 3
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 92
8031: PUSH
8032: LD_INT 168
8034: PUSH
8035: LD_INT 229
8037: PUSH
8038: LD_INT 12
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PPUSH
8051: CALL_OW 69
8055: PUSH
8056: LD_INT 0
8058: EQUAL
8059: IFFALSE 8122
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8061: LD_ADDR_VAR 0 8
8065: PUSH
8066: LD_INT 167
8068: PUSH
8069: LD_INT 222
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8080: LD_EXP 44
8084: PUSH
8085: LD_VAR 0 2
8089: ADD
8090: PUSH
8091: LD_EXP 52
8095: PPUSH
8096: LD_INT 25
8098: PUSH
8099: LD_INT 4
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 72
8110: ADD
8111: PPUSH
8112: LD_INT 167
8114: PPUSH
8115: LD_INT 222
8117: PPUSH
8118: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8122: LD_ADDR_VAR 0 3
8126: PUSH
8127: LD_EXP 52
8131: PPUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 55
8137: PUSH
8138: EMPTY
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 25
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 72
8181: ST_TO_ADDR
// if tmp then
8182: LD_VAR 0 3
8186: IFFALSE 8399
// begin for i in tmp do
8188: LD_ADDR_VAR 0 1
8192: PUSH
8193: LD_VAR 0 3
8197: PUSH
8198: FOR_IN
8199: IFFALSE 8397
// begin tag := GetTag ( i ) ;
8201: LD_ADDR_VAR 0 4
8205: PUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 110
8215: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 256
8225: PUSH
8226: LD_INT 800
8228: LESS
8229: PUSH
8230: LD_VAR 0 4
8234: PUSH
8235: LD_INT 101
8237: LESS
8238: AND
8239: IFFALSE 8282
// begin SetTag ( i , 101 ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 101
8248: PPUSH
8249: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_VAR 0 8
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 8
8271: PUSH
8272: LD_INT 2
8274: ARRAY
8275: PPUSH
8276: CALL_OW 111
// end else
8280: GO 8395
// if tag = 101 then
8282: LD_VAR 0 4
8286: PUSH
8287: LD_INT 101
8289: EQUAL
8290: IFFALSE 8381
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8292: LD_VAR 0 1
8296: PPUSH
8297: LD_VAR 0 8
8301: PUSH
8302: LD_INT 1
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 8
8310: PUSH
8311: LD_INT 2
8313: ARRAY
8314: PPUSH
8315: CALL_OW 297
8319: PUSH
8320: LD_INT 10
8322: GREATER
8323: IFFALSE 8352
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 8
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: LD_VAR 0 8
8343: PUSH
8344: LD_INT 2
8346: ARRAY
8347: PPUSH
8348: CALL_OW 111
// if GetLives ( i ) = 1000 then
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 256
8361: PUSH
8362: LD_INT 1000
8364: EQUAL
8365: IFFALSE 8379
// SetTag ( i , 0 ) ;
8367: LD_VAR 0 1
8371: PPUSH
8372: LD_INT 0
8374: PPUSH
8375: CALL_OW 109
// end else
8379: GO 8395
// AgressiveMove ( i , path ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_VAR 0 7
8390: PPUSH
8391: CALL 69803 0 2
// end ;
8395: GO 8198
8397: POP
8398: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8399: LD_ADDR_VAR 0 3
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 21
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 3
8426: PUSH
8427: LD_INT 34
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: ST_TO_ADDR
// if not tmp then
8451: LD_VAR 0 3
8455: NOT
8456: IFFALSE 8460
// continue ;
8458: GO 7998
// for i in tmp do
8460: LD_ADDR_VAR 0 1
8464: PUSH
8465: LD_VAR 0 3
8469: PUSH
8470: FOR_IN
8471: IFFALSE 8874
// begin mech := IsDrivenBy ( i ) ;
8473: LD_ADDR_VAR 0 5
8477: PUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: CALL_OW 311
8487: ST_TO_ADDR
// if not mech then
8488: LD_VAR 0 5
8492: NOT
8493: IFFALSE 8497
// continue ;
8495: GO 8470
// tag := GetTag ( i ) ;
8497: LD_ADDR_VAR 0 4
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 110
8511: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 261
8521: PUSH
8522: LD_INT 90
8524: GREATER
8525: PUSH
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 102
8533: EQUAL
8534: AND
8535: IFFALSE 8551
// SetTag ( i , 0 ) else
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_INT 0
8544: PPUSH
8545: CALL_OW 109
8549: GO 8647
// if GetTag ( i ) = 102 then
8551: LD_VAR 0 1
8555: PPUSH
8556: CALL_OW 110
8560: PUSH
8561: LD_INT 102
8563: EQUAL
8564: IFFALSE 8647
// begin x := rand ( 1 , 2 ) ;
8566: LD_ADDR_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 2
8576: PPUSH
8577: CALL_OW 12
8581: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8582: LD_VAR 0 1
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_VAR 0 6
8596: ARRAY
8597: PPUSH
8598: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8602: LD_VAR 0 2
8606: PUSH
8607: LD_VAR 0 6
8611: ARRAY
8612: PPUSH
8613: LD_INT 2
8615: PPUSH
8616: CALL_OW 289
8620: PUSH
8621: LD_INT 20
8623: LESS
8624: IFFALSE 8647
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8626: LD_VAR 0 2
8630: PUSH
8631: LD_VAR 0 6
8635: ARRAY
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: LD_INT 100
8642: PPUSH
8643: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 256
8656: PUSH
8657: LD_INT 600
8659: GREATEREQUAL
8660: PUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_INT 101
8668: LESS
8669: AND
8670: IFFALSE 8686
// AgressiveMove ( i , path ) ;
8672: LD_VAR 0 1
8676: PPUSH
8677: LD_VAR 0 7
8681: PPUSH
8682: CALL 69803 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 256
8695: PUSH
8696: LD_INT 600
8698: LESS
8699: PUSH
8700: LD_VAR 0 4
8704: PUSH
8705: LD_INT 101
8707: LESS
8708: AND
8709: IFFALSE 8750
// begin SetTag ( i , 101 ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 101
8718: PPUSH
8719: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_VAR 0 8
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PPUSH
8737: LD_VAR 0 8
8741: PUSH
8742: LD_INT 2
8744: ARRAY
8745: PPUSH
8746: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8750: LD_VAR 0 4
8754: PUSH
8755: LD_INT 101
8757: EQUAL
8758: PUSH
8759: LD_VAR 0 1
8763: PPUSH
8764: LD_VAR 0 8
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_VAR 0 8
8777: PUSH
8778: LD_INT 2
8780: ARRAY
8781: PPUSH
8782: CALL_OW 297
8786: PUSH
8787: LD_INT 9
8789: LESS
8790: AND
8791: PUSH
8792: LD_VAR 0 5
8796: AND
8797: IFFALSE 8872
// begin if GetLives ( i ) < 1000 then
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 256
8808: PUSH
8809: LD_INT 1000
8811: LESS
8812: IFFALSE 8825
// AddComRepairVehicleAndReturn ( mech ) else
8814: LD_VAR 0 5
8818: PPUSH
8819: CALL 69013 0 1
8823: GO 8872
// if GetFuel ( i ) <= 50 and cargo then
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 261
8834: PUSH
8835: LD_INT 50
8837: LESSEQUAL
8838: PUSH
8839: LD_VAR 0 2
8843: AND
8844: IFFALSE 8860
// SetTag ( i , 102 ) else
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_INT 102
8853: PPUSH
8854: CALL_OW 109
8858: GO 8872
// SetTag ( i , 0 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 0
8867: PPUSH
8868: CALL_OW 109
// end ; end ;
8872: GO 8470
8874: POP
8875: POP
// until not tmp ;
8876: LD_VAR 0 3
8880: NOT
8881: IFFALSE 7998
// end ;
8883: PPOPN 8
8885: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8886: LD_INT 0
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8897: LD_INT 20
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8907: LD_INT 175
8909: PPUSH
8910: CALL_OW 67
// heikeInConvoy := false ;
8914: LD_ADDR_VAR 0 8
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// needOil := false ;
8922: LD_ADDR_VAR 0 7
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_INT 20
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 3
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_INT 34
8956: PUSH
8957: LD_INT 88
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 34
8966: PUSH
8967: LD_INT 31
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 33
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: ST_TO_ADDR
// for i in tmp do
9003: LD_ADDR_VAR 0 2
9007: PUSH
9008: LD_VAR 0 3
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9099
// begin if IsDrivenBy ( i ) = Heike then
9016: LD_VAR 0 2
9020: PPUSH
9021: CALL_OW 311
9025: PUSH
9026: LD_EXP 34
9030: EQUAL
9031: IFFALSE 9050
// begin heikeInConvoy := true ;
9033: LD_ADDR_VAR 0 8
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9041: LD_STRING QHeikeConvoy
9043: PPUSH
9044: CALL_OW 97
// break ;
9048: GO 9099
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL_OW 262
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: PUSH
9064: LD_VAR 0 2
9068: PPUSH
9069: CALL_OW 261
9073: PUSH
9074: LD_INT 10
9076: LESS
9077: AND
9078: IFFALSE 9097
// begin needOil := true ;
9080: LD_ADDR_VAR 0 7
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// Query ( QNeedOil ) ;
9088: LD_STRING QNeedOil
9090: PPUSH
9091: CALL_OW 97
// break ;
9095: GO 9099
// end ; end ;
9097: GO 9013
9099: POP
9100: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9101: LD_VAR 0 7
9105: NOT
9106: PUSH
9107: LD_VAR 0 8
9111: NOT
9112: AND
9113: PUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 34
9124: PUSH
9125: LD_INT 32
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 34
9134: PUSH
9135: LD_INT 51
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 72
9151: AND
9152: IFFALSE 9169
// if Query ( QConvoy ) = 1 then
9154: LD_STRING QConvoy
9156: PPUSH
9157: CALL_OW 97
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9169
// break ;
9167: GO 9173
// until false ;
9169: LD_INT 0
9171: IFFALSE 8907
// SetAreaMapShow ( oilArea , 0 ) ;
9173: LD_INT 20
9175: PPUSH
9176: LD_INT 0
9178: PPUSH
9179: CALL_OW 424
// data := [ ] ;
9183: LD_ADDR_VAR 0 4
9187: PUSH
9188: EMPTY
9189: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9190: LD_ADDR_VAR 0 5
9194: PUSH
9195: LD_INT 60
9197: PUSH
9198: LD_INT 50
9200: PUSH
9201: LD_INT 40
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: PUSH
9213: LD_OWVAR 67
9217: ARRAY
9218: ST_TO_ADDR
// for i in tmp do
9219: LD_ADDR_VAR 0 2
9223: PUSH
9224: LD_VAR 0 3
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9327
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_VAR 0 4
9241: PPUSH
9242: LD_VAR 0 2
9246: PUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: CALL_OW 311
9256: PUSH
9257: LD_VAR 0 2
9261: PPUSH
9262: CALL_OW 256
9266: PUSH
9267: LD_VAR 0 2
9271: PPUSH
9272: CALL_OW 261
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PPUSH
9283: CALL 67193 0 2
9287: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9288: LD_VAR 0 2
9292: PPUSH
9293: CALL_OW 311
9297: PPUSH
9298: CALL_OW 64
// RemoveUnit ( i ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: CALL_OW 64
// chance := chance + 20 ;
9311: LD_ADDR_VAR 0 5
9315: PUSH
9316: LD_VAR 0 5
9320: PUSH
9321: LD_INT 20
9323: PLUS
9324: ST_TO_ADDR
// end ;
9325: GO 9229
9327: POP
9328: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9329: LD_INT 1575
9331: PPUSH
9332: LD_INT 5250
9334: PPUSH
9335: CALL_OW 12
9339: PPUSH
9340: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9344: LD_INT 35
9346: PPUSH
9347: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9351: LD_INT 22
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 92
9363: PUSH
9364: LD_INT 261
9366: PUSH
9367: LD_INT 71
9369: PUSH
9370: LD_INT 12
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: NOT
9388: PUSH
9389: LD_INT 277
9391: PPUSH
9392: LD_INT 80
9394: PPUSH
9395: CALL_OW 428
9399: NOT
9400: AND
9401: IFFALSE 9344
// for i in data do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: LD_VAR 0 4
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9833
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9416: LD_ADDR_OWVAR 21
9420: PUSH
9421: LD_VAR 0 2
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 248
9434: ST_TO_ADDR
// uc_side := 2 ;
9435: LD_ADDR_OWVAR 20
9439: PUSH
9440: LD_INT 2
9442: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9443: LD_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PPUSH
9452: CALL_OW 265
9456: PPUSH
9457: LD_VAR 0 2
9461: PUSH
9462: LD_INT 1
9464: ARRAY
9465: PPUSH
9466: CALL_OW 262
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: CALL_OW 263
9484: PPUSH
9485: LD_VAR 0 2
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PPUSH
9494: CALL_OW 264
9498: PPUSH
9499: LD_INT 66
9501: PPUSH
9502: CALL 34322 0 5
// vehicle := CreateVehicle ;
9506: LD_ADDR_VAR 0 6
9510: PUSH
9511: CALL_OW 45
9515: ST_TO_ADDR
// SetDir ( vehicle , 4 ) ;
9516: LD_VAR 0 6
9520: PPUSH
9521: LD_INT 4
9523: PPUSH
9524: CALL_OW 233
// repeat wait ( 10 ) ;
9528: LD_INT 10
9530: PPUSH
9531: CALL_OW 67
// until PlaceUnitXY ( vehicle , 277 , 80 , false ) ;
9535: LD_VAR 0 6
9539: PPUSH
9540: LD_INT 277
9542: PPUSH
9543: LD_INT 80
9545: PPUSH
9546: LD_INT 0
9548: PPUSH
9549: CALL_OW 48
9553: IFFALSE 9528
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9555: LD_VAR 0 2
9559: PUSH
9560: LD_INT 2
9562: ARRAY
9563: PPUSH
9564: LD_VAR 0 6
9568: PPUSH
9569: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9573: LD_VAR 0 6
9577: PPUSH
9578: LD_VAR 0 2
9582: PUSH
9583: LD_INT 3
9585: ARRAY
9586: PPUSH
9587: CALL_OW 234
// success := Prob ( chance ) ;
9591: LD_ADDR_VAR 0 9
9595: PUSH
9596: LD_VAR 0 5
9600: PPUSH
9601: CALL_OW 13
9605: ST_TO_ADDR
// if success then
9606: LD_VAR 0 9
9610: IFFALSE 9692
// begin if GetEngine ( vehicle ) = engine_combustion then
9612: LD_VAR 0 6
9616: PPUSH
9617: CALL_OW 262
9621: PUSH
9622: LD_INT 1
9624: EQUAL
9625: IFFALSE 9639
// SetFuel ( vehicle , 90 ) ;
9627: LD_VAR 0 6
9631: PPUSH
9632: LD_INT 90
9634: PPUSH
9635: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9639: LD_VAR 0 6
9643: PPUSH
9644: CALL_OW 264
9648: PUSH
9649: LD_INT 32
9651: PUSH
9652: LD_INT 51
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: IN
9659: IFFALSE 9690
// begin collectedOil := collectedOil + 100 ;
9661: LD_ADDR_EXP 33
9665: PUSH
9666: LD_EXP 33
9670: PUSH
9671: LD_INT 100
9673: PLUS
9674: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9675: LD_VAR 0 6
9679: PPUSH
9680: LD_INT 2
9682: PPUSH
9683: LD_INT 100
9685: PPUSH
9686: CALL_OW 290
// end ; end else
9690: GO 9764
// begin if i [ 3 ] > 333 then
9692: LD_VAR 0 2
9696: PUSH
9697: LD_INT 3
9699: ARRAY
9700: PUSH
9701: LD_INT 333
9703: GREATER
9704: IFFALSE 9718
// SetLives ( vehicle , 333 ) ;
9706: LD_VAR 0 6
9710: PPUSH
9711: LD_INT 333
9713: PPUSH
9714: CALL_OW 234
// if i [ 4 ] > 20 then
9718: LD_VAR 0 2
9722: PUSH
9723: LD_INT 4
9725: ARRAY
9726: PUSH
9727: LD_INT 20
9729: GREATER
9730: IFFALSE 9746
// SetFuel ( vehicle , 20 ) else
9732: LD_VAR 0 6
9736: PPUSH
9737: LD_INT 20
9739: PPUSH
9740: CALL_OW 240
9744: GO 9764
// SetFuel ( vehicle , i [ 4 ] ) ;
9746: LD_VAR 0 6
9750: PPUSH
9751: LD_VAR 0 2
9755: PUSH
9756: LD_INT 4
9758: ARRAY
9759: PPUSH
9760: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9764: LD_VAR 0 6
9768: PPUSH
9769: LD_INT 250
9771: PPUSH
9772: LD_INT 119
9774: PPUSH
9775: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9779: LD_VAR 0 6
9783: PPUSH
9784: LD_INT 211
9786: PPUSH
9787: LD_INT 80
9789: PPUSH
9790: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9794: LD_INT 175
9796: PPUSH
9797: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9801: LD_INT 20
9803: PPUSH
9804: LD_INT 22
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: LD_INT 52
9816: PUSH
9817: EMPTY
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PPUSH
9824: CALL_OW 70
9828: NOT
9829: IFFALSE 9794
// end ;
9831: GO 9413
9833: POP
9834: POP
// wait ( 0 0$10 ) ;
9835: LD_INT 350
9837: PPUSH
9838: CALL_OW 67
// GoForOil ;
9842: CALL 8886 0 0
// end ;
9846: LD_VAR 0 1
9850: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9851: LD_INT 22
9853: PPUSH
9854: LD_INT 21
9856: PUSH
9857: LD_INT 2
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 22
9866: PUSH
9867: LD_INT 5
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 58
9876: PUSH
9877: EMPTY
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 70
9889: IFFALSE 9958
9891: GO 9893
9893: DISABLE
9894: LD_INT 0
9896: PPUSH
// begin enable ;
9897: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9898: LD_ADDR_VAR 0 1
9902: PUSH
9903: LD_INT 22
9905: PPUSH
9906: LD_INT 21
9908: PUSH
9909: LD_INT 2
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 22
9918: PUSH
9919: LD_INT 5
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 58
9928: PUSH
9929: EMPTY
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 70
9941: PUSH
9942: FOR_IN
9943: IFFALSE 9956
// KillUnit ( i ) ;
9945: LD_VAR 0 1
9949: PPUSH
9950: CALL_OW 66
9954: GO 9942
9956: POP
9957: POP
// end ; end_of_file
9958: PPOPN 1
9960: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9961: LD_INT 0
9963: PPUSH
// uc_side := side ;
9964: LD_ADDR_OWVAR 20
9968: PUSH
9969: LD_VAR 0 1
9973: ST_TO_ADDR
// uc_nation := nation ;
9974: LD_ADDR_OWVAR 21
9978: PUSH
9979: LD_VAR 0 2
9983: ST_TO_ADDR
// vc_chassis := chassis ;
9984: LD_ADDR_OWVAR 37
9988: PUSH
9989: LD_VAR 0 3
9993: ST_TO_ADDR
// vc_engine := engine ;
9994: LD_ADDR_OWVAR 39
9998: PUSH
9999: LD_VAR 0 4
10003: ST_TO_ADDR
// vc_control := control ;
10004: LD_ADDR_OWVAR 38
10008: PUSH
10009: LD_VAR 0 5
10013: ST_TO_ADDR
// vc_weapon := weapon ;
10014: LD_ADDR_OWVAR 40
10018: PUSH
10019: LD_VAR 0 6
10023: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10024: LD_ADDR_OWVAR 41
10028: PUSH
10029: LD_VAR 0 7
10033: ST_TO_ADDR
// result := CreateVehicle ;
10034: LD_ADDR_VAR 0 8
10038: PUSH
10039: CALL_OW 45
10043: ST_TO_ADDR
// end ;
10044: LD_VAR 0 8
10048: RET
// export function SayX ( units , ident ) ; var i ; begin
10049: LD_INT 0
10051: PPUSH
10052: PPUSH
// result := false ;
10053: LD_ADDR_VAR 0 3
10057: PUSH
10058: LD_INT 0
10060: ST_TO_ADDR
// if not units then
10061: LD_VAR 0 1
10065: NOT
10066: IFFALSE 10070
// exit ;
10068: GO 10124
// for i in units do
10070: LD_ADDR_VAR 0 4
10074: PUSH
10075: LD_VAR 0 1
10079: PUSH
10080: FOR_IN
10081: IFFALSE 10122
// if IsOk ( i ) then
10083: LD_VAR 0 4
10087: PPUSH
10088: CALL_OW 302
10092: IFFALSE 10120
// begin Say ( i , ident ) ;
10094: LD_VAR 0 4
10098: PPUSH
10099: LD_VAR 0 2
10103: PPUSH
10104: CALL_OW 88
// result := i ;
10108: LD_ADDR_VAR 0 3
10112: PUSH
10113: LD_VAR 0 4
10117: ST_TO_ADDR
// break ;
10118: GO 10122
// end ;
10120: GO 10080
10122: POP
10123: POP
// end ;
10124: LD_VAR 0 3
10128: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10129: LD_INT 0
10131: PPUSH
10132: PPUSH
// InitUc ;
10133: CALL_OW 18
// InitHc ;
10137: CALL_OW 19
// uc_side := 0 ;
10141: LD_ADDR_OWVAR 20
10145: PUSH
10146: LD_INT 0
10148: ST_TO_ADDR
// uc_nation := 0 ;
10149: LD_ADDR_OWVAR 21
10153: PUSH
10154: LD_INT 0
10156: ST_TO_ADDR
// for i = 1 to amount do
10157: LD_ADDR_VAR 0 4
10161: PUSH
10162: DOUBLE
10163: LD_INT 1
10165: DEC
10166: ST_TO_ADDR
10167: LD_VAR 0 2
10171: PUSH
10172: FOR_TO
10173: IFFALSE 10255
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10175: LD_ADDR_OWVAR 29
10179: PUSH
10180: LD_INT 9
10182: PPUSH
10183: LD_INT 12
10185: PPUSH
10186: CALL_OW 12
10190: PUSH
10191: LD_INT 9
10193: PPUSH
10194: LD_INT 12
10196: PPUSH
10197: CALL_OW 12
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10206: LD_ADDR_OWVAR 35
10210: PUSH
10211: LD_INT 1
10213: NEG
10214: PPUSH
10215: LD_INT 1
10217: PPUSH
10218: CALL_OW 12
10222: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10223: LD_INT 0
10225: PPUSH
10226: LD_INT 12
10228: PPUSH
10229: LD_INT 1
10231: PPUSH
10232: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10236: CALL_OW 44
10240: PPUSH
10241: LD_VAR 0 1
10245: PPUSH
10246: LD_INT 0
10248: PPUSH
10249: CALL_OW 49
// end ;
10253: GO 10172
10255: POP
10256: POP
// InitHc ;
10257: CALL_OW 19
// end ;
10261: LD_VAR 0 3
10265: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10266: LD_INT 0
10268: PPUSH
10269: PPUSH
// uc_side := 0 ;
10270: LD_ADDR_OWVAR 20
10274: PUSH
10275: LD_INT 0
10277: ST_TO_ADDR
// uc_nation := 0 ;
10278: LD_ADDR_OWVAR 21
10282: PUSH
10283: LD_INT 0
10285: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10286: LD_INT 7
10288: PPUSH
10289: LD_INT 6
10291: PUSH
10292: LD_INT 5
10294: PUSH
10295: LD_INT 4
10297: PUSH
10298: LD_INT 3
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: PUSH
10307: LD_OWVAR 67
10311: ARRAY
10312: PPUSH
10313: CALL 10129 0 2
// for i = 1 to 2 do
10317: LD_ADDR_VAR 0 4
10321: PUSH
10322: DOUBLE
10323: LD_INT 1
10325: DEC
10326: ST_TO_ADDR
10327: LD_INT 2
10329: PUSH
10330: FOR_TO
10331: IFFALSE 10368
// begin vc_chassis := class_mastodont ;
10333: LD_ADDR_OWVAR 37
10337: PUSH
10338: LD_INT 31
10340: ST_TO_ADDR
// vc_control := control_rider ;
10341: LD_ADDR_OWVAR 38
10345: PUSH
10346: LD_INT 4
10348: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10349: CALL_OW 45
10353: PPUSH
10354: LD_VAR 0 1
10358: PPUSH
10359: LD_INT 0
10361: PPUSH
10362: CALL 66098 0 3
// end ;
10366: GO 10330
10368: POP
10369: POP
// InitHc ;
10370: CALL_OW 19
// for i := 1 to 3 do
10374: LD_ADDR_VAR 0 4
10378: PUSH
10379: DOUBLE
10380: LD_INT 1
10382: DEC
10383: ST_TO_ADDR
10384: LD_INT 3
10386: PUSH
10387: FOR_TO
10388: IFFALSE 10425
// begin hc_class := class_horse ;
10390: LD_ADDR_OWVAR 28
10394: PUSH
10395: LD_INT 21
10397: ST_TO_ADDR
// hc_gallery :=  ;
10398: LD_ADDR_OWVAR 33
10402: PUSH
10403: LD_STRING 
10405: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10406: CALL_OW 44
10410: PPUSH
10411: LD_VAR 0 1
10415: PPUSH
10416: LD_INT 0
10418: PPUSH
10419: CALL_OW 49
// end ;
10423: GO 10387
10425: POP
10426: POP
// InitHc ;
10427: CALL_OW 19
// for i = 1 to 3 do
10431: LD_ADDR_VAR 0 4
10435: PUSH
10436: DOUBLE
10437: LD_INT 1
10439: DEC
10440: ST_TO_ADDR
10441: LD_INT 3
10443: PUSH
10444: FOR_TO
10445: IFFALSE 10499
// begin hc_class = class_tiger ;
10447: LD_ADDR_OWVAR 28
10451: PUSH
10452: LD_INT 14
10454: ST_TO_ADDR
// hc_gallery =  ;
10455: LD_ADDR_OWVAR 33
10459: PUSH
10460: LD_STRING 
10462: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10463: LD_ADDR_OWVAR 35
10467: PUSH
10468: LD_INT 7
10470: NEG
10471: PPUSH
10472: LD_INT 7
10474: PPUSH
10475: CALL_OW 12
10479: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10480: CALL_OW 44
10484: PPUSH
10485: LD_VAR 0 1
10489: PPUSH
10490: LD_INT 0
10492: PPUSH
10493: CALL 66098 0 3
// end ;
10497: GO 10444
10499: POP
10500: POP
// InitHc ;
10501: CALL_OW 19
// for i := 1 to 4 do
10505: LD_ADDR_VAR 0 4
10509: PUSH
10510: DOUBLE
10511: LD_INT 1
10513: DEC
10514: ST_TO_ADDR
10515: LD_INT 4
10517: PUSH
10518: FOR_TO
10519: IFFALSE 10556
// begin hc_class := class_phororhacos ;
10521: LD_ADDR_OWVAR 28
10525: PUSH
10526: LD_INT 18
10528: ST_TO_ADDR
// hc_gallery :=  ;
10529: LD_ADDR_OWVAR 33
10533: PUSH
10534: LD_STRING 
10536: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10537: CALL_OW 44
10541: PPUSH
10542: LD_VAR 0 1
10546: PPUSH
10547: LD_INT 0
10549: PPUSH
10550: CALL_OW 49
// end ;
10554: GO 10518
10556: POP
10557: POP
// InitHc ;
10558: CALL_OW 19
// for i := 1 to 4 do
10562: LD_ADDR_VAR 0 4
10566: PUSH
10567: DOUBLE
10568: LD_INT 1
10570: DEC
10571: ST_TO_ADDR
10572: LD_INT 4
10574: PUSH
10575: FOR_TO
10576: IFFALSE 10613
// begin hc_class := class_baggie ;
10578: LD_ADDR_OWVAR 28
10582: PUSH
10583: LD_INT 13
10585: ST_TO_ADDR
// hc_gallery :=  ;
10586: LD_ADDR_OWVAR 33
10590: PUSH
10591: LD_STRING 
10593: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10594: CALL_OW 44
10598: PPUSH
10599: LD_VAR 0 1
10603: PPUSH
10604: LD_INT 0
10606: PPUSH
10607: CALL_OW 49
// end ;
10611: GO 10575
10613: POP
10614: POP
// InitHc ;
10615: CALL_OW 19
// for i := 1 to 7 do
10619: LD_ADDR_VAR 0 4
10623: PUSH
10624: DOUBLE
10625: LD_INT 1
10627: DEC
10628: ST_TO_ADDR
10629: LD_INT 7
10631: PUSH
10632: FOR_TO
10633: IFFALSE 10670
// begin hc_class := class_frog ;
10635: LD_ADDR_OWVAR 28
10639: PUSH
10640: LD_INT 19
10642: ST_TO_ADDR
// hc_gallery :=  ;
10643: LD_ADDR_OWVAR 33
10647: PUSH
10648: LD_STRING 
10650: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10651: CALL_OW 44
10655: PPUSH
10656: LD_VAR 0 2
10660: PPUSH
10661: LD_INT 0
10663: PPUSH
10664: CALL_OW 49
// end ;
10668: GO 10632
10670: POP
10671: POP
// end ;
10672: LD_VAR 0 3
10676: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10677: LD_INT 0
10679: PPUSH
10680: PPUSH
10681: PPUSH
// if not observer or not unit then
10682: LD_VAR 0 1
10686: NOT
10687: PUSH
10688: LD_VAR 0 2
10692: NOT
10693: OR
10694: IFFALSE 10698
// exit ;
10696: GO 10746
// if not See ( GetSide ( observer ) , unit ) then
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL_OW 255
10707: PPUSH
10708: LD_VAR 0 2
10712: PPUSH
10713: CALL_OW 292
10717: NOT
10718: IFFALSE 10722
// exit ;
10720: GO 10746
// result := GetDistUnits ( observer , unit ) < 12 ;
10722: LD_ADDR_VAR 0 3
10726: PUSH
10727: LD_VAR 0 1
10731: PPUSH
10732: LD_VAR 0 2
10736: PPUSH
10737: CALL_OW 296
10741: PUSH
10742: LD_INT 12
10744: LESS
10745: ST_TO_ADDR
// end ;
10746: LD_VAR 0 3
10750: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10751: LD_INT 0
10753: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10754: LD_VAR 0 2
10758: PUSH
10759: LD_INT 1
10761: ARRAY
10762: PPUSH
10763: LD_VAR 0 2
10767: PUSH
10768: LD_INT 2
10770: ARRAY
10771: PPUSH
10772: CALL_OW 488
10776: PUSH
10777: LD_VAR 0 2
10781: PUSH
10782: LD_INT 1
10784: ARRAY
10785: PPUSH
10786: LD_VAR 0 2
10790: PUSH
10791: LD_INT 2
10793: ARRAY
10794: PPUSH
10795: CALL_OW 428
10799: PUSH
10800: LD_INT 0
10802: EQUAL
10803: AND
10804: IFFALSE 10838
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10806: LD_VAR 0 1
10810: PPUSH
10811: LD_VAR 0 2
10815: PUSH
10816: LD_INT 1
10818: ARRAY
10819: PPUSH
10820: LD_VAR 0 2
10824: PUSH
10825: LD_INT 2
10827: ARRAY
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: CALL_OW 48
// end ;
10838: LD_VAR 0 4
10842: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10843: LD_INT 0
10845: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10846: LD_VAR 0 1
10850: PPUSH
10851: LD_VAR 0 2
10855: PPUSH
10856: LD_VAR 0 3
10860: PPUSH
10861: LD_VAR 0 4
10865: PPUSH
10866: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10870: LD_VAR 0 1
10874: PPUSH
10875: LD_VAR 0 2
10879: PPUSH
10880: LD_VAR 0 3
10884: PPUSH
10885: CALL_OW 331
// end ;
10889: LD_VAR 0 5
10893: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10894: LD_INT 0
10896: PPUSH
// if not units then
10897: LD_VAR 0 1
10901: NOT
10902: IFFALSE 10906
// exit ;
10904: GO 10989
// result := true ;
10906: LD_ADDR_VAR 0 4
10910: PUSH
10911: LD_INT 1
10913: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10914: LD_VAR 0 1
10918: PPUSH
10919: LD_INT 26
10921: PUSH
10922: LD_INT 1
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 72
10933: PUSH
10934: LD_INT 1
10936: ARRAY
10937: PPUSH
10938: LD_VAR 0 2
10942: PPUSH
10943: CALL_OW 88
10947: NOT
10948: IFFALSE 10989
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10950: LD_ADDR_VAR 0 4
10954: PUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: LD_INT 26
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PPUSH
10970: CALL_OW 72
10974: PUSH
10975: LD_INT 1
10977: ARRAY
10978: PPUSH
10979: LD_VAR 0 3
10983: PPUSH
10984: CALL_OW 88
10988: ST_TO_ADDR
// end ;
10989: LD_VAR 0 4
10993: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10994: LD_INT 0
10996: PPUSH
10997: PPUSH
// if not group then
10998: LD_VAR 0 2
11002: NOT
11003: IFFALSE 11007
// exit ;
11005: GO 11052
// for i in group do
11007: LD_ADDR_VAR 0 4
11011: PUSH
11012: LD_VAR 0 2
11016: PUSH
11017: FOR_IN
11018: IFFALSE 11050
// if See ( side , i ) then
11020: LD_VAR 0 1
11024: PPUSH
11025: LD_VAR 0 4
11029: PPUSH
11030: CALL_OW 292
11034: IFFALSE 11048
// begin result := true ;
11036: LD_ADDR_VAR 0 3
11040: PUSH
11041: LD_INT 1
11043: ST_TO_ADDR
// exit ;
11044: POP
11045: POP
11046: GO 11052
// end ;
11048: GO 11017
11050: POP
11051: POP
// end ; end_of_file
11052: LD_VAR 0 3
11056: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11057: LD_INT 0
11059: PPUSH
11060: PPUSH
11061: PPUSH
11062: PPUSH
11063: PPUSH
11064: PPUSH
11065: PPUSH
// uc_side := 3 ;
11066: LD_ADDR_OWVAR 20
11070: PUSH
11071: LD_INT 3
11073: ST_TO_ADDR
// uc_nation := 3 ;
11074: LD_ADDR_OWVAR 21
11078: PUSH
11079: LD_INT 3
11081: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11082: LD_ADDR_EXP 53
11086: PUSH
11087: LD_STRING Morozov
11089: PPUSH
11090: CALL_OW 25
11094: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11095: LD_EXP 53
11099: PPUSH
11100: LD_INT 52
11102: PPUSH
11103: CALL_OW 52
// if not gaidarKilled then
11107: LD_EXP 7
11111: NOT
11112: IFFALSE 11145
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11114: LD_ADDR_EXP 54
11118: PUSH
11119: LD_STRING Gaydar
11121: PPUSH
11122: LD_INT 0
11124: PPUSH
11125: LD_STRING 
11127: PPUSH
11128: CALL 29461 0 3
11132: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11133: LD_EXP 54
11137: PPUSH
11138: LD_INT 52
11140: PPUSH
11141: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11145: LD_INT 52
11147: PPUSH
11148: LD_STRING lenin
11150: PPUSH
11151: CALL_OW 500
// ruOutsiders := [ ] ;
11155: LD_ADDR_EXP 56
11159: PUSH
11160: EMPTY
11161: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11162: LD_ADDR_EXP 58
11166: PUSH
11167: EMPTY
11168: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11169: LD_ADDR_EXP 59
11173: PUSH
11174: EMPTY
11175: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11176: LD_ADDR_EXP 60
11180: PUSH
11181: EMPTY
11182: ST_TO_ADDR
// ruAttackers := [ ] ;
11183: LD_ADDR_EXP 61
11187: PUSH
11188: EMPTY
11189: ST_TO_ADDR
// waveStrength := 0 ;
11190: LD_ADDR_EXP 62
11194: PUSH
11195: LD_INT 0
11197: ST_TO_ADDR
// if not gaidarKilled then
11198: LD_EXP 7
11202: NOT
11203: IFFALSE 11213
// waveStrength := 2 ;
11205: LD_ADDR_EXP 62
11209: PUSH
11210: LD_INT 2
11212: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11213: LD_ADDR_VAR 0 7
11217: PUSH
11218: LD_INT 22
11220: PUSH
11221: LD_INT 3
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 21
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PPUSH
11242: CALL_OW 69
11246: ST_TO_ADDR
// for i in tmp do
11247: LD_ADDR_VAR 0 2
11251: PUSH
11252: LD_VAR 0 7
11256: PUSH
11257: FOR_IN
11258: IFFALSE 11295
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11260: LD_VAR 0 2
11264: PPUSH
11265: LD_INT 5
11267: PUSH
11268: LD_INT 6
11270: PUSH
11271: LD_INT 7
11273: PUSH
11274: LD_INT 8
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: PUSH
11283: LD_OWVAR 67
11287: ARRAY
11288: PPUSH
11289: CALL_OW 241
11293: GO 11257
11295: POP
11296: POP
// for i := 1 to 3 do
11297: LD_ADDR_VAR 0 2
11301: PUSH
11302: DOUBLE
11303: LD_INT 1
11305: DEC
11306: ST_TO_ADDR
11307: LD_INT 3
11309: PUSH
11310: FOR_TO
11311: IFFALSE 11349
// begin PrepareHuman ( false , 1 , 0 ) ;
11313: LD_INT 0
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: LD_INT 0
11321: PPUSH
11322: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11326: CALL_OW 44
11330: PPUSH
11331: LD_INT 75
11333: PPUSH
11334: LD_INT 49
11336: PPUSH
11337: LD_INT 3
11339: PPUSH
11340: LD_INT 0
11342: PPUSH
11343: CALL_OW 50
// end ;
11347: GO 11310
11349: POP
11350: POP
// for i := 1 to 4 do
11351: LD_ADDR_VAR 0 2
11355: PUSH
11356: DOUBLE
11357: LD_INT 1
11359: DEC
11360: ST_TO_ADDR
11361: LD_INT 4
11363: PUSH
11364: FOR_TO
11365: IFFALSE 11411
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11367: LD_INT 0
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 2
11375: PPUSH
11376: CALL_OW 12
11380: PPUSH
11381: LD_INT 0
11383: PPUSH
11384: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11388: CALL_OW 44
11392: PPUSH
11393: LD_INT 330
11395: PPUSH
11396: LD_INT 231
11398: PPUSH
11399: LD_INT 5
11401: PPUSH
11402: LD_INT 0
11404: PPUSH
11405: CALL_OW 50
// end ;
11409: GO 11364
11411: POP
11412: POP
// hc_class := 1 ;
11413: LD_ADDR_OWVAR 28
11417: PUSH
11418: LD_INT 1
11420: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11421: CALL_OW 44
11425: PPUSH
11426: LD_INT 324
11428: PPUSH
11429: LD_INT 219
11431: PPUSH
11432: CALL_OW 428
11436: PPUSH
11437: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11441: CALL_OW 44
11445: PPUSH
11446: LD_INT 316
11448: PPUSH
11449: LD_INT 223
11451: PPUSH
11452: CALL_OW 428
11456: PPUSH
11457: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11461: LD_ADDR_VAR 0 7
11465: PUSH
11466: LD_INT 172
11468: PPUSH
11469: LD_INT 198
11471: PPUSH
11472: CALL_OW 428
11476: PPUSH
11477: CALL_OW 274
11481: PUSH
11482: LD_INT 189
11484: PPUSH
11485: LD_INT 156
11487: PPUSH
11488: CALL_OW 428
11492: PPUSH
11493: CALL_OW 274
11497: PUSH
11498: LD_INT 341
11500: PPUSH
11501: LD_INT 232
11503: PPUSH
11504: CALL_OW 428
11508: PPUSH
11509: CALL_OW 274
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: ST_TO_ADDR
// for i in tmp do
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: LD_VAR 0 7
11528: PUSH
11529: FOR_IN
11530: IFFALSE 11564
// begin SetResourceType ( i , mat_cans , 200 ) ;
11532: LD_VAR 0 2
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: LD_INT 200
11542: PPUSH
11543: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11547: LD_VAR 0 2
11551: PPUSH
11552: LD_INT 2
11554: PPUSH
11555: LD_INT 300
11557: PPUSH
11558: CALL_OW 277
// end ;
11562: GO 11529
11564: POP
11565: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11566: LD_ADDR_VAR 0 7
11570: PUSH
11571: LD_INT 177
11573: PUSH
11574: LD_INT 114
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 138
11583: PUSH
11584: LD_INT 96
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: ST_TO_ADDR
// for i := 1 to tmp do
11595: LD_ADDR_VAR 0 2
11599: PUSH
11600: DOUBLE
11601: LD_INT 1
11603: DEC
11604: ST_TO_ADDR
11605: LD_VAR 0 7
11609: PUSH
11610: FOR_TO
11611: IFFALSE 11694
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11613: LD_INT 0
11615: PPUSH
11616: LD_INT 9
11618: PPUSH
11619: LD_INT 6
11621: PPUSH
11622: CALL_OW 380
// un := CreateHuman ;
11626: LD_ADDR_VAR 0 5
11630: PUSH
11631: CALL_OW 44
11635: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11636: LD_VAR 0 5
11640: PPUSH
11641: LD_INT 2
11643: PPUSH
11644: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11648: LD_VAR 0 5
11652: PPUSH
11653: LD_VAR 0 7
11657: PUSH
11658: LD_VAR 0 2
11662: ARRAY
11663: PUSH
11664: LD_INT 1
11666: ARRAY
11667: PPUSH
11668: LD_VAR 0 7
11672: PUSH
11673: LD_VAR 0 2
11677: ARRAY
11678: PUSH
11679: LD_INT 2
11681: ARRAY
11682: PPUSH
11683: CALL_OW 428
11687: PPUSH
11688: CALL_OW 52
// end ;
11692: GO 11610
11694: POP
11695: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11696: LD_ADDR_VAR 0 7
11700: PUSH
11701: LD_INT 198
11703: PUSH
11704: LD_INT 158
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 203
11713: PUSH
11714: LD_INT 166
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 181
11723: PUSH
11724: LD_INT 209
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 178
11733: PUSH
11734: LD_INT 196
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 181
11743: PUSH
11744: LD_INT 212
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: ST_TO_ADDR
// for i := 1 to tmp do
11758: LD_ADDR_VAR 0 2
11762: PUSH
11763: DOUBLE
11764: LD_INT 1
11766: DEC
11767: ST_TO_ADDR
11768: LD_VAR 0 7
11772: PUSH
11773: FOR_TO
11774: IFFALSE 11895
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11776: LD_INT 0
11778: PPUSH
11779: LD_INT 1
11781: PPUSH
11782: LD_INT 4
11784: PUSH
11785: LD_INT 5
11787: PUSH
11788: LD_INT 6
11790: PUSH
11791: LD_INT 7
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: LD_OWVAR 67
11804: ARRAY
11805: PPUSH
11806: CALL_OW 380
// un := CreateHuman ;
11810: LD_ADDR_VAR 0 5
11814: PUSH
11815: CALL_OW 44
11819: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11820: LD_ADDR_VAR 0 4
11824: PUSH
11825: LD_VAR 0 7
11829: PUSH
11830: LD_VAR 0 2
11834: ARRAY
11835: PUSH
11836: LD_INT 1
11838: ARRAY
11839: PPUSH
11840: LD_VAR 0 7
11844: PUSH
11845: LD_VAR 0 2
11849: ARRAY
11850: PUSH
11851: LD_INT 2
11853: ARRAY
11854: PPUSH
11855: CALL_OW 428
11859: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11860: LD_VAR 0 5
11864: PPUSH
11865: LD_VAR 0 4
11869: PPUSH
11870: CALL 62420 0 1
11874: PPUSH
11875: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11879: LD_VAR 0 5
11883: PPUSH
11884: LD_VAR 0 4
11888: PPUSH
11889: CALL_OW 52
// end ;
11893: GO 11773
11895: POP
11896: POP
// for i := 1 to 3 do
11897: LD_ADDR_VAR 0 2
11901: PUSH
11902: DOUBLE
11903: LD_INT 1
11905: DEC
11906: ST_TO_ADDR
11907: LD_INT 3
11909: PUSH
11910: FOR_TO
11911: IFFALSE 11966
// begin InitHc ;
11913: CALL_OW 19
// uc_nation := 0 ;
11917: LD_ADDR_OWVAR 21
11921: PUSH
11922: LD_INT 0
11924: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11925: LD_ADDR_OWVAR 28
11929: PUSH
11930: LD_INT 16
11932: ST_TO_ADDR
// un := CreateHuman ;
11933: LD_ADDR_VAR 0 5
11937: PUSH
11938: CALL_OW 44
11942: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11943: LD_VAR 0 5
11947: PPUSH
11948: LD_INT 194
11950: PPUSH
11951: LD_INT 164
11953: PPUSH
11954: LD_INT 6
11956: PPUSH
11957: LD_INT 0
11959: PPUSH
11960: CALL_OW 50
// end ;
11964: GO 11910
11966: POP
11967: POP
// uc_nation := 3 ;
11968: LD_ADDR_OWVAR 21
11972: PUSH
11973: LD_INT 3
11975: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11976: LD_INT 24
11978: PPUSH
11979: LD_INT 1
11981: PPUSH
11982: LD_INT 1
11984: PPUSH
11985: LD_INT 44
11987: PPUSH
11988: LD_INT 10
11990: PPUSH
11991: CALL 34322 0 5
// un := CreateVehicle ;
11995: LD_ADDR_VAR 0 5
11999: PUSH
12000: CALL_OW 45
12004: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
12005: LD_VAR 0 5
12009: PPUSH
12010: LD_INT 199
12012: PPUSH
12013: LD_INT 166
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: LD_INT 0
12021: PPUSH
12022: CALL 69333 0 5
// ComHold ( un ) ;
12026: LD_VAR 0 5
12030: PPUSH
12031: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12035: LD_INT 0
12037: PPUSH
12038: LD_INT 3
12040: PPUSH
12041: LD_INT 4
12043: PPUSH
12044: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12048: CALL_OW 44
12052: PPUSH
12053: LD_VAR 0 5
12057: PPUSH
12058: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12062: LD_INT 24
12064: PPUSH
12065: LD_INT 1
12067: PPUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_INT 45
12073: PPUSH
12074: LD_INT 10
12076: PPUSH
12077: CALL 34322 0 5
// un := CreateVehicle ;
12081: LD_ADDR_VAR 0 5
12085: PUSH
12086: CALL_OW 45
12090: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12091: LD_VAR 0 5
12095: PPUSH
12096: LD_INT 129
12098: PPUSH
12099: LD_INT 93
12101: PPUSH
12102: LD_INT 1
12104: PPUSH
12105: LD_INT 0
12107: PPUSH
12108: CALL 69333 0 5
// ComHold ( un ) ;
12112: LD_VAR 0 5
12116: PPUSH
12117: CALL_OW 140
// if Difficulty > 1 then
12121: LD_OWVAR 67
12125: PUSH
12126: LD_INT 1
12128: GREATER
12129: IFFALSE 12217
// begin PrepareHuman ( false , 3 , 4 ) ;
12131: LD_INT 0
12133: PPUSH
12134: LD_INT 3
12136: PPUSH
12137: LD_INT 4
12139: PPUSH
12140: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12144: CALL_OW 44
12148: PPUSH
12149: LD_VAR 0 5
12153: PPUSH
12154: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12158: LD_INT 24
12160: PPUSH
12161: LD_INT 1
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: LD_INT 45
12169: PPUSH
12170: LD_INT 10
12172: PPUSH
12173: CALL 34322 0 5
// un := CreateVehicle ;
12177: LD_ADDR_VAR 0 5
12181: PUSH
12182: CALL_OW 45
12186: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12187: LD_VAR 0 5
12191: PPUSH
12192: LD_INT 200
12194: PPUSH
12195: LD_INT 173
12197: PPUSH
12198: LD_INT 1
12200: PPUSH
12201: LD_INT 0
12203: PPUSH
12204: CALL 69333 0 5
// ComHold ( un ) ;
12208: LD_VAR 0 5
12212: PPUSH
12213: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12217: LD_INT 0
12219: PPUSH
12220: LD_INT 3
12222: PPUSH
12223: LD_INT 4
12225: PPUSH
12226: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12230: CALL_OW 44
12234: PPUSH
12235: LD_VAR 0 5
12239: PPUSH
12240: CALL_OW 52
// bc_type := b_armoury ;
12244: LD_ADDR_OWVAR 42
12248: PUSH
12249: LD_INT 4
12251: ST_TO_ADDR
// if Difficulty > 1 then
12252: LD_OWVAR 67
12256: PUSH
12257: LD_INT 1
12259: GREATER
12260: IFFALSE 12270
// bc_type := b_barracks ;
12262: LD_ADDR_OWVAR 42
12266: PUSH
12267: LD_INT 5
12269: ST_TO_ADDR
// bc_level := 6 ;
12270: LD_ADDR_OWVAR 43
12274: PUSH
12275: LD_INT 6
12277: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12278: LD_INT 120
12280: PPUSH
12281: LD_INT 100
12283: PPUSH
12284: LD_INT 5
12286: PPUSH
12287: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12291: LD_ADDR_VAR 0 2
12295: PUSH
12296: DOUBLE
12297: LD_INT 1
12299: DEC
12300: ST_TO_ADDR
12301: LD_INT 3
12303: PUSH
12304: LD_INT 3
12306: PUSH
12307: LD_INT 4
12309: PUSH
12310: LD_INT 4
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: LD_OWVAR 67
12323: ARRAY
12324: PUSH
12325: FOR_TO
12326: IFFALSE 12384
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12328: LD_INT 0
12330: PPUSH
12331: LD_INT 1
12333: PUSH
12334: LD_INT 1
12336: PUSH
12337: LD_INT 9
12339: PUSH
12340: LD_INT 9
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: LD_OWVAR 67
12353: ARRAY
12354: PPUSH
12355: LD_INT 5
12357: PPUSH
12358: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12362: CALL_OW 44
12366: PPUSH
12367: LD_INT 120
12369: PPUSH
12370: LD_INT 100
12372: PPUSH
12373: CALL_OW 428
12377: PPUSH
12378: CALL_OW 52
// end ;
12382: GO 12325
12384: POP
12385: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12386: LD_ADDR_VAR 0 7
12390: PUSH
12391: LD_INT 135
12393: PUSH
12394: LD_INT 100
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 137
12403: PUSH
12404: LD_INT 92
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: ST_TO_ADDR
// for i := 1 to tmp do
12415: LD_ADDR_VAR 0 2
12419: PUSH
12420: DOUBLE
12421: LD_INT 1
12423: DEC
12424: ST_TO_ADDR
12425: LD_VAR 0 7
12429: PUSH
12430: FOR_TO
12431: IFFALSE 12601
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12433: LD_INT 22
12435: PUSH
12436: LD_INT 22
12438: PUSH
12439: LD_INT 24
12441: PUSH
12442: LD_INT 24
12444: PUSH
12445: LD_INT 24
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: PUSH
12455: LD_OWVAR 67
12459: PUSH
12460: LD_INT 0
12462: PPUSH
12463: LD_INT 1
12465: PPUSH
12466: CALL_OW 12
12470: PLUS
12471: ARRAY
12472: PPUSH
12473: LD_INT 1
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: LD_INT 44
12481: PPUSH
12482: LD_INT 25
12484: PPUSH
12485: CALL 34322 0 5
// veh := CreateVehicle ;
12489: LD_ADDR_VAR 0 6
12493: PUSH
12494: CALL_OW 45
12498: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12499: LD_VAR 0 6
12503: PPUSH
12504: LD_INT 2
12506: PPUSH
12507: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12511: LD_VAR 0 6
12515: PPUSH
12516: LD_VAR 0 7
12520: PUSH
12521: LD_VAR 0 2
12525: ARRAY
12526: PUSH
12527: LD_INT 1
12529: ARRAY
12530: PPUSH
12531: LD_VAR 0 7
12535: PUSH
12536: LD_VAR 0 2
12540: ARRAY
12541: PUSH
12542: LD_INT 2
12544: ARRAY
12545: PPUSH
12546: LD_INT 0
12548: PPUSH
12549: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12553: LD_INT 0
12555: PPUSH
12556: LD_INT 3
12558: PPUSH
12559: LD_INT 6
12561: PPUSH
12562: CALL_OW 380
// un := CreateHuman ;
12566: LD_ADDR_VAR 0 5
12570: PUSH
12571: CALL_OW 44
12575: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12576: LD_VAR 0 5
12580: PPUSH
12581: LD_VAR 0 6
12585: PPUSH
12586: CALL_OW 52
// ComHold ( veh ) ;
12590: LD_VAR 0 6
12594: PPUSH
12595: CALL_OW 140
// end ;
12599: GO 12430
12601: POP
12602: POP
// tmp := [ 191 , 122 ] ;
12603: LD_ADDR_VAR 0 7
12607: PUSH
12608: LD_INT 191
12610: PUSH
12611: LD_INT 122
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12618: LD_INT 24
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_INT 44
12629: PPUSH
12630: LD_INT 30
12632: PPUSH
12633: CALL 34322 0 5
// ruBlockadeTank := CreateVehicle ;
12637: LD_ADDR_EXP 55
12641: PUSH
12642: CALL_OW 45
12646: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12647: LD_EXP 55
12651: PPUSH
12652: LD_INT 2
12654: PPUSH
12655: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12659: LD_EXP 55
12663: PPUSH
12664: LD_INT 191
12666: PPUSH
12667: LD_INT 122
12669: PPUSH
12670: LD_INT 0
12672: PPUSH
12673: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12677: LD_INT 1
12679: PPUSH
12680: LD_INT 5
12682: PUSH
12683: LD_INT 6
12685: PUSH
12686: LD_INT 7
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: LD_OWVAR 67
12698: PUSH
12699: LD_INT 1
12701: MINUS
12702: ARRAY
12703: PPUSH
12704: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12708: CALL_OW 44
12712: PPUSH
12713: LD_EXP 55
12717: PPUSH
12718: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12722: LD_EXP 55
12726: PPUSH
12727: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12731: LD_ADDR_EXP 57
12735: PUSH
12736: EMPTY
12737: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12738: LD_ADDR_VAR 0 2
12742: PUSH
12743: DOUBLE
12744: LD_INT 1
12746: DEC
12747: ST_TO_ADDR
12748: LD_INT 2
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: LD_INT 3
12756: PUSH
12757: LD_INT 3
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: LD_OWVAR 67
12770: ARRAY
12771: PUSH
12772: FOR_TO
12773: IFFALSE 12889
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12775: LD_INT 0
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: LD_INT 4
12783: PUSH
12784: LD_INT 5
12786: PUSH
12787: LD_INT 6
12789: PUSH
12790: LD_INT 7
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: PUSH
12799: LD_OWVAR 67
12803: ARRAY
12804: PPUSH
12805: CALL_OW 380
// un := CreateHuman ;
12809: LD_ADDR_VAR 0 5
12813: PUSH
12814: CALL_OW 44
12818: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12819: LD_VAR 0 5
12823: PPUSH
12824: LD_INT 9
12826: PPUSH
12827: LD_INT 0
12829: PPUSH
12830: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12834: LD_VAR 0 5
12838: PPUSH
12839: LD_INT 198
12841: PPUSH
12842: LD_INT 129
12844: PPUSH
12845: CALL_OW 118
// AddComCrawl ( un ) ;
12849: LD_VAR 0 5
12853: PPUSH
12854: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12858: LD_ADDR_EXP 57
12862: PUSH
12863: LD_EXP 57
12867: PPUSH
12868: LD_EXP 57
12872: PUSH
12873: LD_INT 1
12875: PLUS
12876: PPUSH
12877: LD_VAR 0 5
12881: PPUSH
12882: CALL_OW 1
12886: ST_TO_ADDR
// end ;
12887: GO 12772
12889: POP
12890: POP
// PrepareHuman ( false , 4 , 5 ) ;
12891: LD_INT 0
12893: PPUSH
12894: LD_INT 4
12896: PPUSH
12897: LD_INT 5
12899: PPUSH
12900: CALL_OW 380
// un := CreateHuman ;
12904: LD_ADDR_VAR 0 5
12908: PUSH
12909: CALL_OW 44
12913: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12914: LD_VAR 0 5
12918: PPUSH
12919: LD_INT 179
12921: PPUSH
12922: LD_INT 113
12924: PPUSH
12925: LD_INT 0
12927: PPUSH
12928: CALL_OW 48
// ComHold ( un ) ;
12932: LD_VAR 0 5
12936: PPUSH
12937: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12941: LD_ADDR_EXP 57
12945: PUSH
12946: LD_EXP 57
12950: PPUSH
12951: LD_EXP 57
12955: PUSH
12956: LD_INT 1
12958: PLUS
12959: PPUSH
12960: LD_VAR 0 5
12964: PPUSH
12965: CALL_OW 1
12969: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12970: LD_ADDR_VAR 0 7
12974: PUSH
12975: LD_INT 167
12977: PPUSH
12978: LD_INT 243
12980: PPUSH
12981: CALL_OW 428
12985: PPUSH
12986: CALL_OW 274
12990: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12991: LD_VAR 0 7
12995: PPUSH
12996: LD_INT 1
12998: PPUSH
12999: LD_INT 1000
13001: PPUSH
13002: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
13006: LD_VAR 0 7
13010: PPUSH
13011: LD_INT 2
13013: PPUSH
13014: LD_INT 400
13016: PPUSH
13017: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
13021: LD_ADDR_VAR 0 7
13025: PUSH
13026: LD_INT 169
13028: PPUSH
13029: LD_INT 229
13031: PPUSH
13032: CALL_OW 428
13036: ST_TO_ADDR
// for i := 1 to 3 do
13037: LD_ADDR_VAR 0 2
13041: PUSH
13042: DOUBLE
13043: LD_INT 1
13045: DEC
13046: ST_TO_ADDR
13047: LD_INT 3
13049: PUSH
13050: FOR_TO
13051: IFFALSE 13142
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13053: LD_INT 0
13055: PPUSH
13056: LD_INT 1
13058: PPUSH
13059: LD_INT 4
13061: PUSH
13062: LD_INT 5
13064: PUSH
13065: LD_INT 5
13067: PUSH
13068: LD_INT 6
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: PUSH
13077: LD_OWVAR 67
13081: ARRAY
13082: PPUSH
13083: CALL_OW 380
// un := CreateHuman ;
13087: LD_ADDR_VAR 0 5
13091: PUSH
13092: CALL_OW 44
13096: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13097: LD_VAR 0 5
13101: PPUSH
13102: LD_VAR 0 7
13106: PPUSH
13107: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13111: LD_ADDR_EXP 58
13115: PUSH
13116: LD_EXP 58
13120: PPUSH
13121: LD_EXP 58
13125: PUSH
13126: LD_INT 1
13128: PLUS
13129: PPUSH
13130: LD_VAR 0 5
13134: PPUSH
13135: CALL_OW 1
13139: ST_TO_ADDR
// end ;
13140: GO 13050
13142: POP
13143: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13144: LD_ADDR_VAR 0 7
13148: PUSH
13149: LD_INT 165
13151: PUSH
13152: LD_INT 227
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 173
13161: PUSH
13162: LD_INT 231
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: ST_TO_ADDR
// for i := 1 to tmp do
13173: LD_ADDR_VAR 0 2
13177: PUSH
13178: DOUBLE
13179: LD_INT 1
13181: DEC
13182: ST_TO_ADDR
13183: LD_VAR 0 7
13187: PUSH
13188: FOR_TO
13189: IFFALSE 13310
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13191: LD_INT 0
13193: PPUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 4
13199: PUSH
13200: LD_INT 5
13202: PUSH
13203: LD_INT 5
13205: PUSH
13206: LD_INT 6
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: PUSH
13215: LD_OWVAR 67
13219: ARRAY
13220: PPUSH
13221: CALL_OW 380
// un := CreateHuman ;
13225: LD_ADDR_VAR 0 5
13229: PUSH
13230: CALL_OW 44
13234: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13235: LD_VAR 0 5
13239: PPUSH
13240: LD_VAR 0 7
13244: PUSH
13245: LD_VAR 0 2
13249: ARRAY
13250: PUSH
13251: LD_INT 1
13253: ARRAY
13254: PPUSH
13255: LD_VAR 0 7
13259: PUSH
13260: LD_VAR 0 2
13264: ARRAY
13265: PUSH
13266: LD_INT 2
13268: ARRAY
13269: PPUSH
13270: CALL_OW 428
13274: PPUSH
13275: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13279: LD_ADDR_EXP 58
13283: PUSH
13284: LD_EXP 58
13288: PPUSH
13289: LD_EXP 58
13293: PUSH
13294: LD_INT 1
13296: PLUS
13297: PPUSH
13298: LD_VAR 0 5
13302: PPUSH
13303: CALL_OW 1
13307: ST_TO_ADDR
// end ;
13308: GO 13188
13310: POP
13311: POP
// for i := 1 to 2 do
13312: LD_ADDR_VAR 0 2
13316: PUSH
13317: DOUBLE
13318: LD_INT 1
13320: DEC
13321: ST_TO_ADDR
13322: LD_INT 2
13324: PUSH
13325: FOR_TO
13326: IFFALSE 13381
// begin InitHc ;
13328: CALL_OW 19
// uc_nation := 0 ;
13332: LD_ADDR_OWVAR 21
13336: PUSH
13337: LD_INT 0
13339: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13340: LD_ADDR_OWVAR 28
13344: PUSH
13345: LD_INT 16
13347: ST_TO_ADDR
// un := CreateHuman ;
13348: LD_ADDR_VAR 0 5
13352: PUSH
13353: CALL_OW 44
13357: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13358: LD_VAR 0 5
13362: PPUSH
13363: LD_INT 166
13365: PPUSH
13366: LD_INT 233
13368: PPUSH
13369: LD_INT 2
13371: PPUSH
13372: LD_INT 0
13374: PPUSH
13375: CALL_OW 50
// end ;
13379: GO 13325
13381: POP
13382: POP
// uc_nation := 3 ;
13383: LD_ADDR_OWVAR 21
13387: PUSH
13388: LD_INT 3
13390: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13391: LD_ADDR_VAR 0 7
13395: PUSH
13396: LD_INT 71
13398: PUSH
13399: LD_INT 52
13401: PUSH
13402: LD_INT 11
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: ST_TO_ADDR
// for i in tmp do
13410: LD_ADDR_VAR 0 2
13414: PUSH
13415: LD_VAR 0 7
13419: PUSH
13420: FOR_IN
13421: IFFALSE 13465
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13423: LD_VAR 0 2
13427: PPUSH
13428: CALL_OW 274
13432: PPUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 3000
13438: PPUSH
13439: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13443: LD_VAR 0 2
13447: PPUSH
13448: CALL_OW 274
13452: PPUSH
13453: LD_INT 2
13455: PPUSH
13456: LD_INT 600
13458: PPUSH
13459: CALL_OW 277
// end ;
13463: GO 13420
13465: POP
13466: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13467: LD_ADDR_VAR 0 7
13471: PUSH
13472: LD_INT 41
13474: PUSH
13475: LD_INT 57
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 38
13484: PUSH
13485: LD_INT 55
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: LD_INT 50
13494: PUSH
13495: LD_INT 73
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 51
13504: PUSH
13505: LD_INT 65
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 82
13514: PUSH
13515: LD_INT 93
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: LD_INT 87
13524: PUSH
13525: LD_INT 100
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 91
13534: PUSH
13535: LD_INT 109
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 84
13544: PUSH
13545: LD_INT 120
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 113
13554: PUSH
13555: LD_INT 153
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 123
13564: PUSH
13565: LD_INT 171
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 125
13574: PUSH
13575: LD_INT 178
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 125
13584: PUSH
13585: LD_INT 188
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 125
13594: PUSH
13595: LD_INT 201
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 33
13604: PUSH
13605: LD_INT 60
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 76
13614: PUSH
13615: LD_INT 95
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 84
13624: PUSH
13625: LD_INT 111
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 112
13634: PUSH
13635: LD_INT 165
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: ST_TO_ADDR
// for i := 1 to tmp do
13661: LD_ADDR_VAR 0 2
13665: PUSH
13666: DOUBLE
13667: LD_INT 1
13669: DEC
13670: ST_TO_ADDR
13671: LD_VAR 0 7
13675: PUSH
13676: FOR_TO
13677: IFFALSE 13924
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13679: LD_ADDR_VAR 0 4
13683: PUSH
13684: LD_VAR 0 7
13688: PUSH
13689: LD_VAR 0 2
13693: ARRAY
13694: PUSH
13695: LD_INT 1
13697: ARRAY
13698: PPUSH
13699: LD_VAR 0 7
13703: PUSH
13704: LD_VAR 0 2
13708: ARRAY
13709: PUSH
13710: LD_INT 2
13712: ARRAY
13713: PPUSH
13714: CALL_OW 428
13718: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13719: LD_VAR 0 4
13723: PPUSH
13724: CALL_OW 266
13728: PUSH
13729: LD_INT 4
13731: PUSH
13732: LD_INT 5
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: IN
13739: IFFALSE 13835
// begin for j := 1 to Difficulty do
13741: LD_ADDR_VAR 0 3
13745: PUSH
13746: DOUBLE
13747: LD_INT 1
13749: DEC
13750: ST_TO_ADDR
13751: LD_OWVAR 67
13755: PUSH
13756: FOR_TO
13757: IFFALSE 13831
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13759: LD_INT 0
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: LD_INT 4
13767: PUSH
13768: LD_INT 5
13770: PUSH
13771: LD_INT 5
13773: PUSH
13774: LD_INT 6
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: PUSH
13783: LD_OWVAR 67
13787: ARRAY
13788: PPUSH
13789: CALL_OW 380
// un := CreateHuman ;
13793: LD_ADDR_VAR 0 5
13797: PUSH
13798: CALL_OW 44
13802: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13803: LD_VAR 0 5
13807: PPUSH
13808: LD_VAR 0 4
13812: PPUSH
13813: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13817: LD_VAR 0 5
13821: PPUSH
13822: LD_INT 9
13824: PPUSH
13825: CALL_OW 336
// end ;
13829: GO 13756
13831: POP
13832: POP
// end else
13833: GO 13893
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13835: LD_INT 0
13837: PPUSH
13838: LD_INT 1
13840: PPUSH
13841: LD_INT 4
13843: PUSH
13844: LD_INT 5
13846: PUSH
13847: LD_INT 5
13849: PUSH
13850: LD_INT 6
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_OWVAR 67
13863: ARRAY
13864: PPUSH
13865: CALL_OW 380
// un := CreateHuman ;
13869: LD_ADDR_VAR 0 5
13873: PUSH
13874: CALL_OW 44
13878: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13879: LD_VAR 0 5
13883: PPUSH
13884: LD_VAR 0 4
13888: PPUSH
13889: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13893: LD_ADDR_EXP 59
13897: PUSH
13898: LD_EXP 59
13902: PPUSH
13903: LD_EXP 59
13907: PUSH
13908: LD_INT 1
13910: PLUS
13911: PPUSH
13912: LD_VAR 0 5
13916: PPUSH
13917: CALL_OW 1
13921: ST_TO_ADDR
// end ;
13922: GO 13676
13924: POP
13925: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13926: LD_ADDR_VAR 0 4
13930: PUSH
13931: LD_INT 10
13933: PPUSH
13934: LD_INT 22
13936: PUSH
13937: LD_INT 3
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 30
13946: PUSH
13947: LD_INT 32
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 58
13956: PUSH
13957: EMPTY
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: LIST
13964: PPUSH
13965: CALL_OW 70
13969: PUSH
13970: FOR_IN
13971: IFFALSE 14105
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13973: LD_INT 40
13975: PUSH
13976: LD_INT 50
13978: PUSH
13979: LD_INT 75
13981: PUSH
13982: LD_INT 80
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: PUSH
13991: LD_OWVAR 67
13995: ARRAY
13996: PUSH
13997: LD_EXP 7
14001: PUSH
14002: LD_INT 10
14004: MUL
14005: MINUS
14006: PPUSH
14007: CALL_OW 13
14011: NOT
14012: IFFALSE 14016
// continue ;
14014: GO 13970
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14016: LD_INT 0
14018: PPUSH
14019: LD_INT 1
14021: PPUSH
14022: LD_INT 4
14024: PUSH
14025: LD_INT 5
14027: PUSH
14028: LD_INT 5
14030: PUSH
14031: LD_INT 6
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: PUSH
14040: LD_OWVAR 67
14044: ARRAY
14045: PPUSH
14046: CALL_OW 380
// un := CreateHuman ;
14050: LD_ADDR_VAR 0 5
14054: PUSH
14055: CALL_OW 44
14059: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14060: LD_VAR 0 5
14064: PPUSH
14065: LD_VAR 0 4
14069: PPUSH
14070: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14074: LD_ADDR_EXP 59
14078: PUSH
14079: LD_EXP 59
14083: PPUSH
14084: LD_EXP 59
14088: PUSH
14089: LD_INT 1
14091: PLUS
14092: PPUSH
14093: LD_VAR 0 5
14097: PPUSH
14098: CALL_OW 1
14102: ST_TO_ADDR
// end ;
14103: GO 13970
14105: POP
14106: POP
// for i := 1 to 5 do
14107: LD_ADDR_VAR 0 2
14111: PUSH
14112: DOUBLE
14113: LD_INT 1
14115: DEC
14116: ST_TO_ADDR
14117: LD_INT 5
14119: PUSH
14120: FOR_TO
14121: IFFALSE 14219
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14123: LD_INT 0
14125: PPUSH
14126: LD_INT 2
14128: PPUSH
14129: LD_INT 4
14131: PUSH
14132: LD_INT 5
14134: PUSH
14135: LD_INT 5
14137: PUSH
14138: LD_INT 6
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: LD_OWVAR 67
14151: ARRAY
14152: PPUSH
14153: CALL_OW 380
// un := CreateHuman ;
14157: LD_ADDR_VAR 0 5
14161: PUSH
14162: CALL_OW 44
14166: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14167: LD_VAR 0 5
14171: PPUSH
14172: LD_INT 66
14174: PPUSH
14175: LD_INT 101
14177: PPUSH
14178: LD_INT 3
14180: PPUSH
14181: LD_INT 0
14183: PPUSH
14184: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14188: LD_ADDR_EXP 59
14192: PUSH
14193: LD_EXP 59
14197: PPUSH
14198: LD_EXP 59
14202: PUSH
14203: LD_INT 1
14205: PLUS
14206: PPUSH
14207: LD_VAR 0 5
14211: PPUSH
14212: CALL_OW 1
14216: ST_TO_ADDR
// end ;
14217: GO 14120
14219: POP
14220: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14221: LD_ADDR_VAR 0 7
14225: PUSH
14226: LD_INT 72
14228: PUSH
14229: LD_INT 12
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: ST_TO_ADDR
// for i := 1 to tmp do
14236: LD_ADDR_VAR 0 2
14240: PUSH
14241: DOUBLE
14242: LD_INT 1
14244: DEC
14245: ST_TO_ADDR
14246: LD_VAR 0 7
14250: PUSH
14251: FOR_TO
14252: IFFALSE 14369
// for j := 1 to 6 do
14254: LD_ADDR_VAR 0 3
14258: PUSH
14259: DOUBLE
14260: LD_INT 1
14262: DEC
14263: ST_TO_ADDR
14264: LD_INT 6
14266: PUSH
14267: FOR_TO
14268: IFFALSE 14365
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14270: LD_INT 0
14272: PPUSH
14273: LD_INT 3
14275: PPUSH
14276: LD_INT 4
14278: PUSH
14279: LD_INT 5
14281: PUSH
14282: LD_INT 5
14284: PUSH
14285: LD_INT 6
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: PUSH
14294: LD_OWVAR 67
14298: ARRAY
14299: PPUSH
14300: CALL_OW 380
// un := CreateHuman ;
14304: LD_ADDR_VAR 0 5
14308: PUSH
14309: CALL_OW 44
14313: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14314: LD_VAR 0 5
14318: PPUSH
14319: LD_VAR 0 7
14323: PUSH
14324: LD_VAR 0 2
14328: ARRAY
14329: PPUSH
14330: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14334: LD_ADDR_EXP 59
14338: PUSH
14339: LD_EXP 59
14343: PPUSH
14344: LD_EXP 59
14348: PUSH
14349: LD_INT 1
14351: PLUS
14352: PPUSH
14353: LD_VAR 0 5
14357: PPUSH
14358: CALL_OW 1
14362: ST_TO_ADDR
// end ;
14363: GO 14267
14365: POP
14366: POP
14367: GO 14251
14369: POP
14370: POP
// for i := 1 to 3 do
14371: LD_ADDR_VAR 0 2
14375: PUSH
14376: DOUBLE
14377: LD_INT 1
14379: DEC
14380: ST_TO_ADDR
14381: LD_INT 3
14383: PUSH
14384: FOR_TO
14385: IFFALSE 14474
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14387: LD_INT 0
14389: PPUSH
14390: LD_INT 4
14392: PPUSH
14393: LD_INT 4
14395: PUSH
14396: LD_INT 5
14398: PUSH
14399: LD_INT 5
14401: PUSH
14402: LD_INT 6
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: PUSH
14411: LD_OWVAR 67
14415: ARRAY
14416: PPUSH
14417: CALL_OW 380
// un := CreateHuman ;
14421: LD_ADDR_VAR 0 5
14425: PUSH
14426: CALL_OW 44
14430: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14431: LD_VAR 0 5
14435: PPUSH
14436: LD_INT 17
14438: PPUSH
14439: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14443: LD_ADDR_EXP 59
14447: PUSH
14448: LD_EXP 59
14452: PPUSH
14453: LD_EXP 59
14457: PUSH
14458: LD_INT 1
14460: PLUS
14461: PPUSH
14462: LD_VAR 0 5
14466: PPUSH
14467: CALL_OW 1
14471: ST_TO_ADDR
// end ;
14472: GO 14384
14474: POP
14475: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14476: LD_ADDR_VAR 0 2
14480: PUSH
14481: DOUBLE
14482: LD_INT 1
14484: DEC
14485: ST_TO_ADDR
14486: LD_INT 2
14488: PUSH
14489: LD_INT 3
14491: PUSH
14492: LD_INT 3
14494: PUSH
14495: LD_INT 3
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: PUSH
14504: LD_OWVAR 67
14508: ARRAY
14509: PUSH
14510: FOR_TO
14511: IFFALSE 14631
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14513: LD_INT 22
14515: PPUSH
14516: LD_INT 1
14518: PPUSH
14519: LD_INT 1
14521: PPUSH
14522: LD_INT 52
14524: PPUSH
14525: LD_INT 100
14527: PPUSH
14528: CALL 34322 0 5
// veh := CreateVehicle ;
14532: LD_ADDR_VAR 0 6
14536: PUSH
14537: CALL_OW 45
14541: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14542: LD_INT 0
14544: PPUSH
14545: LD_INT 3
14547: PPUSH
14548: LD_INT 4
14550: PPUSH
14551: CALL_OW 380
// un := CreateHuman ;
14555: LD_ADDR_VAR 0 5
14559: PUSH
14560: CALL_OW 44
14564: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14565: LD_VAR 0 6
14569: PPUSH
14570: LD_INT 107
14572: PPUSH
14573: LD_INT 182
14575: PPUSH
14576: LD_INT 4
14578: PPUSH
14579: LD_INT 0
14581: PPUSH
14582: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14586: LD_VAR 0 5
14590: PPUSH
14591: LD_VAR 0 6
14595: PPUSH
14596: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14600: LD_ADDR_EXP 59
14604: PUSH
14605: LD_EXP 59
14609: PPUSH
14610: LD_EXP 59
14614: PUSH
14615: LD_INT 1
14617: PLUS
14618: PPUSH
14619: LD_VAR 0 5
14623: PPUSH
14624: CALL_OW 1
14628: ST_TO_ADDR
// end ;
14629: GO 14510
14631: POP
14632: POP
// InitHc ;
14633: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14637: LD_ADDR_VAR 0 2
14641: PUSH
14642: DOUBLE
14643: LD_INT 1
14645: DEC
14646: ST_TO_ADDR
14647: LD_INT 3
14649: PUSH
14650: LD_INT 5
14652: PUSH
14653: LD_INT 6
14655: PUSH
14656: LD_INT 8
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: PUSH
14665: LD_OWVAR 67
14669: ARRAY
14670: PUSH
14671: FOR_TO
14672: IFFALSE 14767
// begin uc_nation := 0 ;
14674: LD_ADDR_OWVAR 21
14678: PUSH
14679: LD_INT 0
14681: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14682: LD_ADDR_OWVAR 28
14686: PUSH
14687: LD_INT 15
14689: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14690: LD_ADDR_OWVAR 31
14694: PUSH
14695: LD_INT 3
14697: PUSH
14698: LD_INT 0
14700: PUSH
14701: LD_INT 0
14703: PUSH
14704: LD_INT 0
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: ST_TO_ADDR
// un := CreateHuman ;
14713: LD_ADDR_VAR 0 5
14717: PUSH
14718: CALL_OW 44
14722: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14723: LD_VAR 0 5
14727: PPUSH
14728: LD_INT 269
14730: PUSH
14731: LD_INT 300
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_VAR 0 2
14742: PUSH
14743: LD_INT 2
14745: MOD
14746: PUSH
14747: LD_INT 1
14749: PLUS
14750: ARRAY
14751: PPUSH
14752: LD_INT 182
14754: PPUSH
14755: LD_INT 4
14757: PPUSH
14758: LD_INT 0
14760: PPUSH
14761: CALL_OW 50
// end ;
14765: GO 14671
14767: POP
14768: POP
// uc_nation := 3 ;
14769: LD_ADDR_OWVAR 21
14773: PUSH
14774: LD_INT 3
14776: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14777: LD_EXP 8
14781: PUSH
14782: LD_INT 10
14784: PUSH
14785: LD_INT 8
14787: PUSH
14788: LD_INT 6
14790: PUSH
14791: LD_INT 5
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: PUSH
14800: LD_OWVAR 67
14804: ARRAY
14805: LESS
14806: IFFALSE 14885
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14808: LD_INT 21
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: LD_INT 1
14816: PPUSH
14817: LD_INT 51
14819: PPUSH
14820: LD_INT 12
14822: PPUSH
14823: CALL 34322 0 5
// veh := CreateVehicle ;
14827: LD_ADDR_VAR 0 6
14831: PUSH
14832: CALL_OW 45
14836: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14837: LD_VAR 0 6
14841: PPUSH
14842: LD_INT 269
14844: PPUSH
14845: LD_INT 66
14847: PPUSH
14848: LD_INT 4
14850: PPUSH
14851: LD_INT 0
14853: PPUSH
14854: CALL 69333 0 5
// SetLives ( veh , 333 ) ;
14858: LD_VAR 0 6
14862: PPUSH
14863: LD_INT 333
14865: PPUSH
14866: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14870: LD_VAR 0 6
14874: PPUSH
14875: LD_INT 2
14877: PPUSH
14878: LD_INT 100
14880: PPUSH
14881: CALL_OW 290
// end ; end ;
14885: LD_VAR 0 1
14889: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14890: LD_EXP 55
14894: PUSH
14895: LD_EXP 55
14899: PPUSH
14900: CALL_OW 255
14904: PUSH
14905: LD_INT 3
14907: EQUAL
14908: AND
14909: IFFALSE 15072
14911: GO 14913
14913: DISABLE
14914: LD_INT 0
14916: PPUSH
// begin enable ;
14917: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14918: LD_INT 81
14920: PUSH
14921: LD_INT 3
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 91
14930: PUSH
14931: LD_EXP 55
14935: PUSH
14936: LD_INT 15
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PPUSH
14948: CALL_OW 69
14952: IFFALSE 15032
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14954: LD_EXP 55
14958: PPUSH
14959: CALL_OW 311
14963: NOT
14964: IFFALSE 15030
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14966: LD_ADDR_VAR 0 1
14970: PUSH
14971: LD_INT 22
14973: PUSH
14974: LD_INT 3
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 21
14983: PUSH
14984: LD_INT 1
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PPUSH
14995: CALL_OW 69
14999: PPUSH
15000: LD_EXP 55
15004: PPUSH
15005: CALL_OW 74
15009: ST_TO_ADDR
// if driver then
15010: LD_VAR 0 1
15014: IFFALSE 15030
// ComEnterUnit ( driver , ruBlockadeTank ) ;
15016: LD_VAR 0 1
15020: PPUSH
15021: LD_EXP 55
15025: PPUSH
15026: CALL_OW 120
// end ; exit ;
15030: GO 15072
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
15032: LD_EXP 55
15036: PPUSH
15037: CALL_OW 256
15041: PUSH
15042: LD_INT 1000
15044: LESS
15045: PUSH
15046: LD_EXP 55
15050: PPUSH
15051: CALL_OW 311
15055: AND
15056: IFFALSE 15072
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15058: LD_EXP 55
15062: PPUSH
15063: CALL_OW 311
15067: PPUSH
15068: CALL 68893 0 1
// end ;
15072: PPOPN 1
15074: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15075: LD_EXP 57
15079: PPUSH
15080: LD_INT 3
15082: PUSH
15083: LD_INT 24
15085: PUSH
15086: LD_INT 1000
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 72
15101: PUSH
15102: LD_EXP 57
15106: PPUSH
15107: LD_INT 25
15109: PUSH
15110: LD_INT 4
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: LD_INT 50
15119: PUSH
15120: EMPTY
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 72
15131: AND
15132: IFFALSE 15320
15134: GO 15136
15136: DISABLE
15137: LD_INT 0
15139: PPUSH
15140: PPUSH
15141: PPUSH
// begin enable ;
15142: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15143: LD_ADDR_VAR 0 3
15147: PUSH
15148: LD_EXP 57
15152: PPUSH
15153: LD_INT 3
15155: PUSH
15156: LD_INT 24
15158: PUSH
15159: LD_INT 1000
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PPUSH
15170: CALL_OW 72
15174: PPUSH
15175: LD_INT 1
15177: PPUSH
15178: CALL 69133 0 2
15182: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15183: LD_ADDR_VAR 0 2
15187: PUSH
15188: LD_EXP 57
15192: PPUSH
15193: LD_INT 25
15195: PUSH
15196: LD_INT 4
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 50
15205: PUSH
15206: EMPTY
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PPUSH
15213: CALL_OW 72
15217: PUSH
15218: LD_INT 1
15220: ARRAY
15221: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15222: LD_VAR 0 2
15226: PPUSH
15227: LD_VAR 0 3
15231: PUSH
15232: LD_INT 1
15234: ARRAY
15235: PPUSH
15236: CALL 64474 0 2
15240: NOT
15241: IFFALSE 15320
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15243: LD_VAR 0 3
15247: PUSH
15248: LD_INT 1
15250: ARRAY
15251: PPUSH
15252: LD_INT 9
15254: PPUSH
15255: CALL_OW 308
15259: NOT
15260: IFFALSE 15278
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15262: LD_VAR 0 3
15266: PUSH
15267: LD_INT 1
15269: ARRAY
15270: PPUSH
15271: LD_INT 9
15273: PPUSH
15274: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15278: LD_VAR 0 2
15282: PPUSH
15283: LD_VAR 0 3
15287: PUSH
15288: LD_INT 1
15290: ARRAY
15291: PPUSH
15292: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15296: LD_VAR 0 2
15300: PPUSH
15301: LD_INT 179
15303: PPUSH
15304: LD_INT 113
15306: PPUSH
15307: CALL_OW 171
// AddComHold ( sci ) ;
15311: LD_VAR 0 2
15315: PPUSH
15316: CALL_OW 200
// end ; end ;
15320: PPOPN 3
15322: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
15323: LD_INT 2
15325: PPUSH
15326: LD_INT 52
15328: PPUSH
15329: CALL_OW 292
15333: IFFALSE 15438
15335: GO 15337
15337: DISABLE
15338: LD_INT 0
15340: PPUSH
15341: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15342: LD_ADDR_VAR 0 2
15346: PUSH
15347: LD_EXP 59
15351: PPUSH
15352: LD_INT 25
15354: PUSH
15355: LD_INT 1
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 50
15364: PUSH
15365: EMPTY
15366: LIST
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 72
15376: ST_TO_ADDR
// if not tmp then
15377: LD_VAR 0 2
15381: NOT
15382: IFFALSE 15386
// exit ;
15384: GO 15438
// for i in tmp do
15386: LD_ADDR_VAR 0 1
15390: PUSH
15391: LD_VAR 0 2
15395: PUSH
15396: FOR_IN
15397: IFFALSE 15436
// begin if IsInUnit ( i ) then
15399: LD_VAR 0 1
15403: PPUSH
15404: CALL_OW 310
15408: IFFALSE 15419
// ComExitBuilding ( i ) ;
15410: LD_VAR 0 1
15414: PPUSH
15415: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15419: LD_VAR 0 1
15423: PPUSH
15424: LD_INT 84
15426: PPUSH
15427: LD_INT 133
15429: PPUSH
15430: CALL_OW 174
// end ;
15434: GO 15396
15436: POP
15437: POP
// end ;
15438: PPOPN 2
15440: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15441: LD_EXP 14
15445: IFFALSE 15626
15447: GO 15449
15449: DISABLE
15450: LD_INT 0
15452: PPUSH
15453: PPUSH
15454: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15455: LD_ADDR_VAR 0 2
15459: PUSH
15460: LD_INT 72
15462: PUSH
15463: LD_INT 12
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15470: LD_ADDR_VAR 0 3
15474: PUSH
15475: LD_INT 44
15477: PUSH
15478: LD_INT 43
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 45
15487: PUSH
15488: LD_INT 44
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 45
15497: PUSH
15498: LD_INT 46
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 45
15507: PUSH
15508: LD_INT 46
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: PUSH
15521: LD_OWVAR 67
15525: ARRAY
15526: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15527: LD_ADDR_VAR 0 1
15531: PUSH
15532: DOUBLE
15533: LD_INT 1
15535: DEC
15536: ST_TO_ADDR
15537: LD_INT 1
15539: PUSH
15540: LD_INT 2
15542: PUSH
15543: LD_INT 2
15545: PUSH
15546: LD_INT 3
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: PUSH
15555: LD_OWVAR 67
15559: ARRAY
15560: PUSH
15561: FOR_TO
15562: IFFALSE 15624
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15564: LD_VAR 0 2
15568: PPUSH
15569: LD_INT 22
15571: PUSH
15572: LD_INT 23
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_VAR 0 1
15583: PUSH
15584: LD_INT 2
15586: MOD
15587: PUSH
15588: LD_INT 1
15590: PLUS
15591: ARRAY
15592: PPUSH
15593: LD_INT 1
15595: PPUSH
15596: LD_INT 1
15598: PPUSH
15599: LD_VAR 0 3
15603: PUSH
15604: LD_VAR 0 1
15608: PUSH
15609: LD_INT 2
15611: MOD
15612: PUSH
15613: LD_INT 1
15615: PLUS
15616: ARRAY
15617: PPUSH
15618: CALL_OW 185
15622: GO 15561
15624: POP
15625: POP
// end ;
15626: PPOPN 3
15628: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15629: LD_EXP 11
15633: IFFALSE 16782
15635: GO 15637
15637: DISABLE
15638: LD_INT 0
15640: PPUSH
15641: PPUSH
15642: PPUSH
15643: PPUSH
15644: PPUSH
15645: PPUSH
// begin enable ;
15646: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15647: LD_ADDR_VAR 0 6
15651: PUSH
15652: LD_INT 10
15654: PPUSH
15655: LD_INT 81
15657: PUSH
15658: LD_INT 3
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 70
15669: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15670: LD_EXP 60
15674: IFFALSE 15940
// begin for i in ruSpecialVehicleGroup do
15676: LD_ADDR_VAR 0 1
15680: PUSH
15681: LD_EXP 60
15685: PUSH
15686: FOR_IN
15687: IFFALSE 15938
// begin if enemyInBase then
15689: LD_VAR 0 6
15693: IFFALSE 15936
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15695: LD_VAR 0 1
15699: PPUSH
15700: CALL_OW 256
15704: PUSH
15705: LD_INT 500
15707: GREATER
15708: PUSH
15709: LD_VAR 0 1
15713: PPUSH
15714: CALL_OW 110
15718: PUSH
15719: LD_INT 0
15721: EQUAL
15722: AND
15723: IFFALSE 15749
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15725: LD_VAR 0 1
15729: PPUSH
15730: LD_VAR 0 6
15734: PPUSH
15735: LD_VAR 0 1
15739: PPUSH
15740: CALL_OW 74
15744: PPUSH
15745: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15749: LD_VAR 0 1
15753: PPUSH
15754: CALL_OW 256
15758: PUSH
15759: LD_INT 500
15761: LESSEQUAL
15762: PUSH
15763: LD_VAR 0 1
15767: PPUSH
15768: CALL_OW 110
15772: PUSH
15773: LD_INT 0
15775: EQUAL
15776: AND
15777: IFFALSE 15806
// begin SetTag ( i , 1 ) ;
15779: LD_VAR 0 1
15783: PPUSH
15784: LD_INT 1
15786: PPUSH
15787: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15791: LD_VAR 0 1
15795: PPUSH
15796: LD_INT 83
15798: PPUSH
15799: LD_INT 134
15801: PPUSH
15802: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15806: LD_VAR 0 1
15810: PPUSH
15811: CALL_OW 256
15815: PUSH
15816: LD_INT 1000
15818: LESS
15819: PUSH
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 110
15829: PUSH
15830: LD_INT 1
15832: EQUAL
15833: AND
15834: PUSH
15835: LD_VAR 0 1
15839: PPUSH
15840: LD_INT 83
15842: PPUSH
15843: LD_INT 134
15845: PPUSH
15846: CALL_OW 297
15850: PUSH
15851: LD_INT 6
15853: LESS
15854: AND
15855: IFFALSE 15883
// begin SetFuel ( i , 100 ) ;
15857: LD_VAR 0 1
15861: PPUSH
15862: LD_INT 100
15864: PPUSH
15865: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 310
15878: PPUSH
15879: CALL 69013 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15883: LD_VAR 0 1
15887: PPUSH
15888: CALL_OW 256
15892: PUSH
15893: LD_INT 1000
15895: EQUAL
15896: PUSH
15897: LD_VAR 0 1
15901: PPUSH
15902: CALL_OW 110
15906: PUSH
15907: LD_INT 1
15909: EQUAL
15910: AND
15911: PUSH
15912: LD_VAR 0 1
15916: PPUSH
15917: CALL_OW 311
15921: AND
15922: IFFALSE 15936
// SetTag ( i , 0 ) ;
15924: LD_VAR 0 1
15928: PPUSH
15929: LD_INT 0
15931: PPUSH
15932: CALL_OW 109
// end ; end ;
15936: GO 15686
15938: POP
15939: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15940: LD_ADDR_VAR 0 5
15944: PUSH
15945: LD_EXP 59
15949: PPUSH
15950: LD_INT 25
15952: PUSH
15953: LD_INT 4
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PPUSH
15960: CALL_OW 72
15964: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15965: LD_ADDR_VAR 0 4
15969: PUSH
15970: LD_EXP 59
15974: PPUSH
15975: LD_INT 92
15977: PUSH
15978: LD_INT 92
15980: PUSH
15981: LD_INT 155
15983: PUSH
15984: LD_INT 12
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 3
15995: PUSH
15996: LD_INT 24
15998: PUSH
15999: LD_INT 1000
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PPUSH
16014: CALL_OW 72
16018: ST_TO_ADDR
// if sci then
16019: LD_VAR 0 5
16023: IFFALSE 16156
// begin if hurt then
16025: LD_VAR 0 4
16029: IFFALSE 16102
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16031: LD_VAR 0 5
16035: PPUSH
16036: LD_INT 3
16038: PUSH
16039: LD_INT 54
16041: PUSH
16042: EMPTY
16043: LIST
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PPUSH
16049: CALL_OW 72
16053: IFFALSE 16082
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16055: LD_VAR 0 5
16059: PPUSH
16060: LD_INT 3
16062: PUSH
16063: LD_INT 54
16065: PUSH
16066: EMPTY
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PPUSH
16073: CALL_OW 72
16077: PPUSH
16078: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16082: LD_VAR 0 5
16086: PPUSH
16087: LD_VAR 0 4
16091: PUSH
16092: LD_INT 1
16094: ARRAY
16095: PPUSH
16096: CALL_OW 188
// end else
16100: GO 16156
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16102: LD_VAR 0 5
16106: PPUSH
16107: LD_INT 3
16109: PUSH
16110: LD_INT 54
16112: PUSH
16113: EMPTY
16114: LIST
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PPUSH
16120: CALL_OW 72
16124: IFFALSE 16156
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16126: LD_VAR 0 5
16130: PPUSH
16131: LD_INT 3
16133: PUSH
16134: LD_INT 54
16136: PUSH
16137: EMPTY
16138: LIST
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PPUSH
16144: CALL_OW 72
16148: PPUSH
16149: LD_INT 17
16151: PPUSH
16152: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: LD_INT 10
16163: PPUSH
16164: LD_INT 21
16166: PUSH
16167: LD_INT 3
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 3
16176: PUSH
16177: LD_INT 24
16179: PUSH
16180: LD_INT 1000
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PPUSH
16195: CALL_OW 70
16199: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16200: LD_ADDR_VAR 0 2
16204: PUSH
16205: LD_EXP 59
16209: PPUSH
16210: LD_INT 25
16212: PUSH
16213: LD_INT 2
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PPUSH
16220: CALL_OW 72
16224: PUSH
16225: LD_INT 22
16227: PUSH
16228: LD_INT 3
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 34
16237: PUSH
16238: LD_INT 52
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PPUSH
16249: CALL_OW 69
16253: UNION
16254: ST_TO_ADDR
// if not tmp then
16255: LD_VAR 0 2
16259: NOT
16260: IFFALSE 16264
// exit ;
16262: GO 16782
// for i in tmp do
16264: LD_ADDR_VAR 0 1
16268: PUSH
16269: LD_VAR 0 2
16273: PUSH
16274: FOR_IN
16275: IFFALSE 16780
// begin if GetClass ( i ) = 2 then
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL_OW 257
16286: PUSH
16287: LD_INT 2
16289: EQUAL
16290: IFFALSE 16513
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 256
16301: PUSH
16302: LD_INT 1000
16304: EQUAL
16305: PUSH
16306: LD_VAR 0 1
16310: PPUSH
16311: CALL_OW 110
16315: PUSH
16316: LD_INT 1
16318: EQUAL
16319: AND
16320: IFFALSE 16334
// SetTag ( i , 0 ) ;
16322: LD_VAR 0 1
16326: PPUSH
16327: LD_INT 0
16329: PPUSH
16330: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16334: LD_VAR 0 1
16338: PPUSH
16339: CALL_OW 256
16343: PUSH
16344: LD_INT 500
16346: LESSEQUAL
16347: PUSH
16348: LD_VAR 0 1
16352: PPUSH
16353: CALL_OW 110
16357: PUSH
16358: LD_INT 0
16360: EQUAL
16361: AND
16362: IFFALSE 16391
// begin SetTag ( i , 1 ) ;
16364: LD_VAR 0 1
16368: PPUSH
16369: LD_INT 1
16371: PPUSH
16372: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16376: LD_VAR 0 1
16380: PPUSH
16381: LD_INT 92
16383: PPUSH
16384: LD_INT 155
16386: PPUSH
16387: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16391: LD_VAR 0 3
16395: PUSH
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 256
16405: PUSH
16406: LD_INT 500
16408: GREATER
16409: AND
16410: PUSH
16411: LD_VAR 0 1
16415: PPUSH
16416: CALL_OW 110
16420: PUSH
16421: LD_INT 0
16423: EQUAL
16424: AND
16425: PUSH
16426: LD_VAR 0 1
16430: PPUSH
16431: CALL_OW 314
16435: NOT
16436: AND
16437: IFFALSE 16511
// begin if b then
16439: LD_VAR 0 3
16443: IFFALSE 16475
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16445: LD_VAR 0 1
16449: PPUSH
16450: LD_VAR 0 3
16454: PUSH
16455: LD_INT 1
16457: PPUSH
16458: LD_VAR 0 3
16462: PPUSH
16463: CALL_OW 12
16467: ARRAY
16468: PPUSH
16469: CALL_OW 130
16473: GO 16511
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16475: LD_VAR 0 1
16479: PPUSH
16480: LD_INT 94
16482: PPUSH
16483: LD_INT 165
16485: PPUSH
16486: CALL_OW 297
16490: PUSH
16491: LD_INT 8
16493: GREATER
16494: IFFALSE 16511
// ComMoveXY ( i , 94 , 165 ) ;
16496: LD_VAR 0 1
16500: PPUSH
16501: LD_INT 94
16503: PPUSH
16504: LD_INT 165
16506: PPUSH
16507: CALL_OW 111
// end ; end else
16511: GO 16778
// if GetWeapon ( i ) = ru_crane then
16513: LD_VAR 0 1
16517: PPUSH
16518: CALL_OW 264
16522: PUSH
16523: LD_INT 52
16525: EQUAL
16526: IFFALSE 16778
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16528: LD_VAR 0 1
16532: PPUSH
16533: CALL_OW 256
16537: PUSH
16538: LD_INT 1000
16540: EQUAL
16541: PUSH
16542: LD_VAR 0 1
16546: PPUSH
16547: CALL_OW 110
16551: PUSH
16552: LD_INT 1
16554: EQUAL
16555: AND
16556: IFFALSE 16582
// begin SetTag ( i , 0 ) ;
16558: LD_VAR 0 1
16562: PPUSH
16563: LD_INT 0
16565: PPUSH
16566: CALL_OW 109
// SetFuel ( i , 100 ) ;
16570: LD_VAR 0 1
16574: PPUSH
16575: LD_INT 100
16577: PPUSH
16578: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16582: LD_VAR 0 1
16586: PPUSH
16587: CALL_OW 256
16591: PUSH
16592: LD_INT 500
16594: LESSEQUAL
16595: PUSH
16596: LD_VAR 0 1
16600: PPUSH
16601: CALL_OW 110
16605: PUSH
16606: LD_INT 0
16608: EQUAL
16609: AND
16610: IFFALSE 16653
// begin SetTag ( i , 1 ) ;
16612: LD_VAR 0 1
16616: PPUSH
16617: LD_INT 1
16619: PPUSH
16620: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16624: LD_VAR 0 1
16628: PPUSH
16629: LD_INT 83
16631: PPUSH
16632: LD_INT 135
16634: PPUSH
16635: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16639: LD_VAR 0 1
16643: PPUSH
16644: CALL_OW 310
16648: PPUSH
16649: CALL 69013 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16653: LD_VAR 0 1
16657: PPUSH
16658: CALL_OW 256
16662: PUSH
16663: LD_INT 500
16665: GREATER
16666: PUSH
16667: LD_VAR 0 1
16671: PPUSH
16672: CALL_OW 110
16676: PUSH
16677: LD_INT 0
16679: EQUAL
16680: AND
16681: PUSH
16682: LD_VAR 0 1
16686: PPUSH
16687: CALL_OW 311
16691: AND
16692: PUSH
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 314
16702: NOT
16703: AND
16704: IFFALSE 16778
// begin if b then
16706: LD_VAR 0 3
16710: IFFALSE 16742
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_VAR 0 3
16721: PUSH
16722: LD_INT 1
16724: PPUSH
16725: LD_VAR 0 3
16729: PPUSH
16730: CALL_OW 12
16734: ARRAY
16735: PPUSH
16736: CALL_OW 130
16740: GO 16778
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16742: LD_VAR 0 1
16746: PPUSH
16747: LD_INT 94
16749: PPUSH
16750: LD_INT 165
16752: PPUSH
16753: CALL_OW 297
16757: PUSH
16758: LD_INT 8
16760: GREATER
16761: IFFALSE 16778
// ComMoveXY ( i , 94 , 165 ) ;
16763: LD_VAR 0 1
16767: PPUSH
16768: LD_INT 94
16770: PPUSH
16771: LD_INT 165
16773: PPUSH
16774: CALL_OW 111
// end ; end ; end ;
16778: GO 16274
16780: POP
16781: POP
// end ;
16782: PPOPN 6
16784: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16785: LD_EXP 23
16789: NOT
16790: PUSH
16791: LD_EXP 27
16795: NOT
16796: AND
16797: IFFALSE 17712
16799: GO 16801
16801: DISABLE
16802: LD_INT 0
16804: PPUSH
16805: PPUSH
16806: PPUSH
16807: PPUSH
16808: PPUSH
// begin enable ;
16809: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16810: LD_INT 35
16812: PUSH
16813: LD_INT 45
16815: PUSH
16816: LD_INT 55
16818: PUSH
16819: LD_INT 60
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: PUSH
16828: LD_OWVAR 67
16832: ARRAY
16833: PPUSH
16834: CALL_OW 13
16838: IFFALSE 16854
// waveStrength := waveStrength + 1 ;
16840: LD_ADDR_EXP 62
16844: PUSH
16845: LD_EXP 62
16849: PUSH
16850: LD_INT 1
16852: PLUS
16853: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16854: LD_EXP 62
16858: PUSH
16859: LD_INT 2
16861: PUSH
16862: LD_INT 3
16864: PUSH
16865: LD_INT 4
16867: PUSH
16868: LD_INT 4
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: PUSH
16877: LD_OWVAR 67
16881: ARRAY
16882: GREATER
16883: IFFALSE 16915
// begin waveStrength := waveStrength + 2 ;
16885: LD_ADDR_EXP 62
16889: PUSH
16890: LD_EXP 62
16894: PUSH
16895: LD_INT 2
16897: PLUS
16898: ST_TO_ADDR
// disableAttackOnHeike := true ;
16899: LD_ADDR_EXP 27
16903: PUSH
16904: LD_INT 1
16906: ST_TO_ADDR
// disable ;
16907: DISABLE
// wait ( 3 3$00 ) ;
16908: LD_INT 6300
16910: PPUSH
16911: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16915: LD_ADDR_VAR 0 1
16919: PUSH
16920: DOUBLE
16921: LD_INT 1
16923: DEC
16924: ST_TO_ADDR
16925: LD_INT 2
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: LD_INT 4
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: PUSH
16943: LD_OWVAR 67
16947: ARRAY
16948: PUSH
16949: FOR_TO
16950: IFFALSE 17111
// begin InitHc ;
16952: CALL_OW 19
// InitVc ;
16956: CALL_OW 20
// uc_side := 3 ;
16960: LD_ADDR_OWVAR 20
16964: PUSH
16965: LD_INT 3
16967: ST_TO_ADDR
// uc_nation := 3 ;
16968: LD_ADDR_OWVAR 21
16972: PUSH
16973: LD_INT 3
16975: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16976: LD_INT 0
16978: PPUSH
16979: LD_INT 1
16981: PPUSH
16982: LD_OWVAR 67
16986: PUSH
16987: LD_INT 2
16989: PLUS
16990: PPUSH
16991: CALL_OW 380
// un := CreateHuman ;
16995: LD_ADDR_VAR 0 2
16999: PUSH
17000: CALL_OW 44
17004: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
17005: LD_VAR 0 2
17009: PPUSH
17010: LD_INT 160
17012: PPUSH
17013: LD_INT 3
17015: PPUSH
17016: LD_INT 2
17018: PPUSH
17019: LD_INT 0
17021: PPUSH
17022: CALL 69333 0 5
// SetClass ( un , class_bazooker ) ;
17026: LD_VAR 0 2
17030: PPUSH
17031: LD_INT 9
17033: PPUSH
17034: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17038: LD_ADDR_EXP 61
17042: PUSH
17043: LD_EXP 61
17047: PPUSH
17048: LD_EXP 61
17052: PUSH
17053: LD_INT 1
17055: PLUS
17056: PPUSH
17057: LD_VAR 0 2
17061: PPUSH
17062: CALL_OW 1
17066: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17067: LD_VAR 0 2
17071: PPUSH
17072: LD_INT 177
17074: PPUSH
17075: LD_INT 17
17077: PPUSH
17078: CALL_OW 111
// wait ( 0 0$2 ) ;
17082: LD_INT 70
17084: PPUSH
17085: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17089: LD_ADDR_VAR 0 5
17093: PUSH
17094: LD_VAR 0 5
17098: PPUSH
17099: LD_VAR 0 2
17103: PPUSH
17104: CALL 67193 0 2
17108: ST_TO_ADDR
// end ;
17109: GO 16949
17111: POP
17112: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17113: LD_VAR 0 5
17117: PPUSH
17118: LD_INT 196
17120: PPUSH
17121: LD_INT 53
17123: PPUSH
17124: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17128: LD_VAR 0 5
17132: PPUSH
17133: LD_INT 199
17135: PPUSH
17136: LD_INT 62
17138: PPUSH
17139: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17143: LD_VAR 0 5
17147: PPUSH
17148: LD_INT 205
17150: PPUSH
17151: LD_INT 75
17153: PPUSH
17154: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17158: LD_ADDR_VAR 0 1
17162: PUSH
17163: DOUBLE
17164: LD_INT 1
17166: DEC
17167: ST_TO_ADDR
17168: LD_INT 2
17170: PUSH
17171: LD_INT 3
17173: PUSH
17174: LD_INT 3
17176: PUSH
17177: LD_INT 4
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: PUSH
17186: LD_OWVAR 67
17190: ARRAY
17191: PUSH
17192: LD_EXP 62
17196: PLUS
17197: PUSH
17198: FOR_TO
17199: IFFALSE 17508
// begin InitHc ;
17201: CALL_OW 19
// InitVc ;
17205: CALL_OW 20
// uc_side := 3 ;
17209: LD_ADDR_OWVAR 20
17213: PUSH
17214: LD_INT 3
17216: ST_TO_ADDR
// uc_nation := 3 ;
17217: LD_ADDR_OWVAR 21
17221: PUSH
17222: LD_INT 3
17224: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17225: LD_INT 22
17227: PUSH
17228: LD_INT 23
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 1
17237: PPUSH
17238: LD_INT 2
17240: PPUSH
17241: CALL_OW 12
17245: ARRAY
17246: PPUSH
17247: LD_INT 1
17249: PPUSH
17250: LD_INT 1
17252: PPUSH
17253: LD_INT 44
17255: PUSH
17256: LD_INT 45
17258: PUSH
17259: LD_INT 43
17261: PUSH
17262: LD_INT 42
17264: PUSH
17265: LD_INT 44
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 1
17277: PPUSH
17278: LD_INT 5
17280: PPUSH
17281: CALL_OW 12
17285: ARRAY
17286: PPUSH
17287: LD_INT 99
17289: PPUSH
17290: CALL 34322 0 5
// veh := CreateVehicle ;
17294: LD_ADDR_VAR 0 3
17298: PUSH
17299: CALL_OW 45
17303: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17304: LD_VAR 0 3
17308: PPUSH
17309: LD_INT 160
17311: PPUSH
17312: LD_INT 3
17314: PPUSH
17315: LD_INT 2
17317: PPUSH
17318: LD_INT 0
17320: PPUSH
17321: CALL 69333 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17325: LD_ADDR_EXP 61
17329: PUSH
17330: LD_EXP 61
17334: PPUSH
17335: LD_EXP 61
17339: PUSH
17340: LD_INT 1
17342: PLUS
17343: PPUSH
17344: LD_VAR 0 3
17348: PPUSH
17349: CALL_OW 1
17353: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17354: LD_INT 0
17356: PPUSH
17357: LD_INT 3
17359: PPUSH
17360: LD_OWVAR 67
17364: PUSH
17365: LD_INT 2
17367: PLUS
17368: PPUSH
17369: CALL_OW 380
// un := CreateHuman ;
17373: LD_ADDR_VAR 0 2
17377: PUSH
17378: CALL_OW 44
17382: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17383: LD_VAR 0 2
17387: PPUSH
17388: LD_VAR 0 3
17392: PPUSH
17393: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17397: LD_ADDR_EXP 61
17401: PUSH
17402: LD_EXP 61
17406: PPUSH
17407: LD_EXP 61
17411: PUSH
17412: LD_INT 1
17414: PLUS
17415: PPUSH
17416: LD_VAR 0 2
17420: PPUSH
17421: CALL_OW 1
17425: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17426: LD_VAR 0 2
17430: PPUSH
17431: LD_INT 177
17433: PPUSH
17434: LD_INT 17
17436: PPUSH
17437: CALL_OW 111
// wait ( 0 0$2 ) ;
17441: LD_INT 70
17443: PPUSH
17444: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17448: LD_ADDR_VAR 0 4
17452: PUSH
17453: LD_VAR 0 4
17457: PPUSH
17458: LD_VAR 0 4
17462: PUSH
17463: LD_INT 1
17465: PLUS
17466: PPUSH
17467: LD_VAR 0 3
17471: PPUSH
17472: CALL_OW 1
17476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17477: LD_ADDR_VAR 0 4
17481: PUSH
17482: LD_VAR 0 4
17486: PPUSH
17487: LD_VAR 0 4
17491: PUSH
17492: LD_INT 1
17494: PLUS
17495: PPUSH
17496: LD_VAR 0 2
17500: PPUSH
17501: CALL_OW 1
17505: ST_TO_ADDR
// end ;
17506: GO 17198
17508: POP
17509: POP
// for i in tmp do
17510: LD_ADDR_VAR 0 1
17514: PUSH
17515: LD_VAR 0 4
17519: PUSH
17520: FOR_IN
17521: IFFALSE 17602
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17523: LD_VAR 0 1
17527: PPUSH
17528: LD_INT 206
17530: PUSH
17531: LD_INT 37
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 239
17540: PUSH
17541: LD_INT 53
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 260
17550: PUSH
17551: LD_INT 67
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 263
17560: PUSH
17561: LD_INT 79
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 257
17570: PUSH
17571: LD_INT 105
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 227
17580: PUSH
17581: LD_INT 97
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL 69803 0 2
17600: GO 17520
17602: POP
17603: POP
// repeat wait ( 0 0$2 ) ;
17604: LD_INT 70
17606: PPUSH
17607: CALL_OW 67
// for i in tmp do
17611: LD_ADDR_VAR 0 1
17615: PUSH
17616: LD_VAR 0 4
17620: PUSH
17621: FOR_IN
17622: IFFALSE 17689
// if IsDead ( i ) then
17624: LD_VAR 0 1
17628: PPUSH
17629: CALL_OW 301
17633: IFFALSE 17653
// tmp := tmp diff i else
17635: LD_ADDR_VAR 0 4
17639: PUSH
17640: LD_VAR 0 4
17644: PUSH
17645: LD_VAR 0 1
17649: DIFF
17650: ST_TO_ADDR
17651: GO 17687
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17653: LD_VAR 0 1
17657: PPUSH
17658: LD_INT 81
17660: PUSH
17661: LD_INT 3
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PPUSH
17668: CALL_OW 69
17672: PPUSH
17673: LD_VAR 0 1
17677: PPUSH
17678: CALL_OW 74
17682: PPUSH
17683: CALL_OW 115
17687: GO 17621
17689: POP
17690: POP
// until not tmp ;
17691: LD_VAR 0 4
17695: NOT
17696: IFFALSE 17604
// if firstAttack then
17698: LD_EXP 28
17702: IFFALSE 17712
// firstAttack := false ;
17704: LD_ADDR_EXP 28
17708: PUSH
17709: LD_INT 0
17711: ST_TO_ADDR
// end ;
17712: PPOPN 5
17714: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17715: LD_EXP 23
17719: NOT
17720: PUSH
17721: LD_EXP 32
17725: NOT
17726: AND
17727: PUSH
17728: LD_EXP 3
17732: AND
17733: PUSH
17734: LD_EXP 27
17738: NOT
17739: AND
17740: IFFALSE 18657
17742: GO 17744
17744: DISABLE
17745: LD_INT 0
17747: PPUSH
17748: PPUSH
17749: PPUSH
17750: PPUSH
// begin enable ;
17751: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17752: LD_ADDR_VAR 0 1
17756: PUSH
17757: DOUBLE
17758: LD_INT 1
17760: DEC
17761: ST_TO_ADDR
17762: LD_INT 1
17764: PUSH
17765: LD_INT 2
17767: PUSH
17768: LD_INT 2
17770: PUSH
17771: LD_INT 3
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: PUSH
17780: LD_OWVAR 67
17784: ARRAY
17785: PUSH
17786: FOR_TO
17787: IFFALSE 18088
// begin InitHc ;
17789: CALL_OW 19
// InitVc ;
17793: CALL_OW 20
// uc_side := 3 ;
17797: LD_ADDR_OWVAR 20
17801: PUSH
17802: LD_INT 3
17804: ST_TO_ADDR
// uc_nation := 3 ;
17805: LD_ADDR_OWVAR 21
17809: PUSH
17810: LD_INT 3
17812: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17813: LD_INT 22
17815: PUSH
17816: LD_INT 23
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 1
17825: PPUSH
17826: LD_INT 2
17828: PPUSH
17829: CALL_OW 12
17833: ARRAY
17834: PPUSH
17835: LD_INT 1
17837: PPUSH
17838: LD_INT 1
17840: PPUSH
17841: LD_INT 44
17843: PUSH
17844: LD_INT 43
17846: PUSH
17847: LD_INT 42
17849: PUSH
17850: LD_INT 44
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 1
17861: PPUSH
17862: LD_INT 4
17864: PPUSH
17865: CALL_OW 12
17869: ARRAY
17870: PPUSH
17871: LD_INT 99
17873: PPUSH
17874: CALL 34322 0 5
// veh := CreateVehicle ;
17878: LD_ADDR_VAR 0 3
17882: PUSH
17883: CALL_OW 45
17887: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17888: LD_VAR 0 3
17892: PPUSH
17893: LD_INT 5
17895: PPUSH
17896: LD_INT 3
17898: PPUSH
17899: LD_INT 2
17901: PPUSH
17902: LD_INT 0
17904: PPUSH
17905: CALL 69333 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17909: LD_ADDR_EXP 61
17913: PUSH
17914: LD_EXP 61
17918: PPUSH
17919: LD_EXP 61
17923: PUSH
17924: LD_INT 1
17926: PLUS
17927: PPUSH
17928: LD_VAR 0 3
17932: PPUSH
17933: CALL_OW 1
17937: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17938: LD_INT 0
17940: PPUSH
17941: LD_INT 3
17943: PPUSH
17944: LD_OWVAR 67
17948: PPUSH
17949: CALL_OW 380
// un := CreateHuman ;
17953: LD_ADDR_VAR 0 2
17957: PUSH
17958: CALL_OW 44
17962: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17963: LD_VAR 0 2
17967: PPUSH
17968: LD_VAR 0 3
17972: PPUSH
17973: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17977: LD_ADDR_EXP 61
17981: PUSH
17982: LD_EXP 61
17986: PPUSH
17987: LD_EXP 61
17991: PUSH
17992: LD_INT 1
17994: PLUS
17995: PPUSH
17996: LD_VAR 0 2
18000: PPUSH
18001: CALL_OW 1
18005: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
18006: LD_VAR 0 2
18010: PPUSH
18011: LD_INT 23
18013: PPUSH
18014: LD_INT 7
18016: PPUSH
18017: CALL_OW 111
// wait ( 0 0$2 ) ;
18021: LD_INT 70
18023: PPUSH
18024: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18028: LD_ADDR_VAR 0 4
18032: PUSH
18033: LD_VAR 0 4
18037: PPUSH
18038: LD_VAR 0 4
18042: PUSH
18043: LD_INT 1
18045: PLUS
18046: PPUSH
18047: LD_VAR 0 3
18051: PPUSH
18052: CALL_OW 1
18056: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18057: LD_ADDR_VAR 0 4
18061: PUSH
18062: LD_VAR 0 4
18066: PPUSH
18067: LD_VAR 0 4
18071: PUSH
18072: LD_INT 1
18074: PLUS
18075: PPUSH
18076: LD_VAR 0 2
18080: PPUSH
18081: CALL_OW 1
18085: ST_TO_ADDR
// end ;
18086: GO 17786
18088: POP
18089: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18090: LD_ADDR_VAR 0 1
18094: PUSH
18095: DOUBLE
18096: LD_INT 1
18098: DEC
18099: ST_TO_ADDR
18100: LD_INT 2
18102: PUSH
18103: LD_INT 3
18105: PUSH
18106: LD_INT 3
18108: PUSH
18109: LD_INT 4
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: PUSH
18118: LD_OWVAR 67
18122: ARRAY
18123: PUSH
18124: FOR_TO
18125: IFFALSE 18434
// begin InitHc ;
18127: CALL_OW 19
// InitVc ;
18131: CALL_OW 20
// uc_side := 3 ;
18135: LD_ADDR_OWVAR 20
18139: PUSH
18140: LD_INT 3
18142: ST_TO_ADDR
// uc_nation := 3 ;
18143: LD_ADDR_OWVAR 21
18147: PUSH
18148: LD_INT 3
18150: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18151: LD_INT 22
18153: PUSH
18154: LD_INT 23
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 1
18163: PPUSH
18164: LD_INT 2
18166: PPUSH
18167: CALL_OW 12
18171: ARRAY
18172: PPUSH
18173: LD_INT 1
18175: PPUSH
18176: LD_INT 1
18178: PPUSH
18179: LD_INT 44
18181: PUSH
18182: LD_INT 45
18184: PUSH
18185: LD_INT 43
18187: PUSH
18188: LD_INT 42
18190: PUSH
18191: LD_INT 44
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: PPUSH
18204: LD_INT 5
18206: PPUSH
18207: CALL_OW 12
18211: ARRAY
18212: PPUSH
18213: LD_INT 99
18215: PPUSH
18216: CALL 34322 0 5
// veh := CreateVehicle ;
18220: LD_ADDR_VAR 0 3
18224: PUSH
18225: CALL_OW 45
18229: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18230: LD_VAR 0 3
18234: PPUSH
18235: LD_INT 127
18237: PPUSH
18238: LD_INT 243
18240: PPUSH
18241: LD_INT 0
18243: PPUSH
18244: LD_INT 0
18246: PPUSH
18247: CALL 69333 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18251: LD_ADDR_EXP 61
18255: PUSH
18256: LD_EXP 61
18260: PPUSH
18261: LD_EXP 61
18265: PUSH
18266: LD_INT 1
18268: PLUS
18269: PPUSH
18270: LD_VAR 0 3
18274: PPUSH
18275: CALL_OW 1
18279: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18280: LD_INT 0
18282: PPUSH
18283: LD_INT 3
18285: PPUSH
18286: LD_OWVAR 67
18290: PUSH
18291: LD_INT 2
18293: PLUS
18294: PPUSH
18295: CALL_OW 380
// un := CreateHuman ;
18299: LD_ADDR_VAR 0 2
18303: PUSH
18304: CALL_OW 44
18308: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18309: LD_VAR 0 2
18313: PPUSH
18314: LD_VAR 0 3
18318: PPUSH
18319: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18323: LD_ADDR_EXP 61
18327: PUSH
18328: LD_EXP 61
18332: PPUSH
18333: LD_EXP 61
18337: PUSH
18338: LD_INT 1
18340: PLUS
18341: PPUSH
18342: LD_VAR 0 2
18346: PPUSH
18347: CALL_OW 1
18351: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18352: LD_VAR 0 2
18356: PPUSH
18357: LD_INT 130
18359: PPUSH
18360: LD_INT 233
18362: PPUSH
18363: CALL_OW 111
// wait ( 0 0$2 ) ;
18367: LD_INT 70
18369: PPUSH
18370: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18374: LD_ADDR_VAR 0 4
18378: PUSH
18379: LD_VAR 0 4
18383: PPUSH
18384: LD_VAR 0 4
18388: PUSH
18389: LD_INT 1
18391: PLUS
18392: PPUSH
18393: LD_VAR 0 3
18397: PPUSH
18398: CALL_OW 1
18402: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18403: LD_ADDR_VAR 0 4
18407: PUSH
18408: LD_VAR 0 4
18412: PPUSH
18413: LD_VAR 0 4
18417: PUSH
18418: LD_INT 1
18420: PLUS
18421: PPUSH
18422: LD_VAR 0 2
18426: PPUSH
18427: CALL_OW 1
18431: ST_TO_ADDR
// end ;
18432: GO 18124
18434: POP
18435: POP
// for i in tmp do
18436: LD_ADDR_VAR 0 1
18440: PUSH
18441: LD_VAR 0 4
18445: PUSH
18446: FOR_IN
18447: IFFALSE 18561
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18449: LD_VAR 0 1
18453: PPUSH
18454: LD_INT 130
18456: PUSH
18457: LD_INT 229
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 137
18466: PUSH
18467: LD_INT 216
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 142
18476: PUSH
18477: LD_INT 194
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 140
18486: PUSH
18487: LD_INT 169
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 146
18496: PUSH
18497: LD_INT 162
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 174
18506: PUSH
18507: LD_INT 161
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 158
18516: PUSH
18517: LD_INT 134
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 136
18526: PUSH
18527: LD_INT 107
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 115
18536: PUSH
18537: LD_INT 89
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: PPUSH
18555: CALL 69803 0 2
18559: GO 18446
18561: POP
18562: POP
// repeat wait ( 0 0$2 ) ;
18563: LD_INT 70
18565: PPUSH
18566: CALL_OW 67
// for i in tmp do
18570: LD_ADDR_VAR 0 1
18574: PUSH
18575: LD_VAR 0 4
18579: PUSH
18580: FOR_IN
18581: IFFALSE 18648
// if IsDead ( i ) then
18583: LD_VAR 0 1
18587: PPUSH
18588: CALL_OW 301
18592: IFFALSE 18612
// tmp := tmp diff i else
18594: LD_ADDR_VAR 0 4
18598: PUSH
18599: LD_VAR 0 4
18603: PUSH
18604: LD_VAR 0 1
18608: DIFF
18609: ST_TO_ADDR
18610: GO 18646
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18612: LD_VAR 0 1
18616: PPUSH
18617: LD_INT 81
18619: PUSH
18620: LD_INT 3
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PPUSH
18627: CALL_OW 69
18631: PPUSH
18632: LD_VAR 0 1
18636: PPUSH
18637: CALL_OW 74
18641: PPUSH
18642: CALL_OW 115
18646: GO 18580
18648: POP
18649: POP
// until not tmp ;
18650: LD_VAR 0 4
18654: NOT
18655: IFFALSE 18563
// end ;
18657: PPOPN 4
18659: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18660: LD_EXP 6
18664: IFFALSE 19123
18666: GO 18668
18668: DISABLE
18669: LD_INT 0
18671: PPUSH
18672: PPUSH
18673: PPUSH
18674: PPUSH
// begin wait ( 3 3$00 ) ;
18675: LD_INT 6300
18677: PPUSH
18678: CALL_OW 67
// for i := 1 to 3 do
18682: LD_ADDR_VAR 0 1
18686: PUSH
18687: DOUBLE
18688: LD_INT 1
18690: DEC
18691: ST_TO_ADDR
18692: LD_INT 3
18694: PUSH
18695: FOR_TO
18696: IFFALSE 18995
// begin InitHc ;
18698: CALL_OW 19
// InitVc ;
18702: CALL_OW 20
// uc_side := 3 ;
18706: LD_ADDR_OWVAR 20
18710: PUSH
18711: LD_INT 3
18713: ST_TO_ADDR
// uc_nation := 3 ;
18714: LD_ADDR_OWVAR 21
18718: PUSH
18719: LD_INT 3
18721: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18722: LD_INT 22
18724: PUSH
18725: LD_INT 23
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: PPUSH
18735: LD_INT 2
18737: PPUSH
18738: CALL_OW 12
18742: ARRAY
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: LD_INT 1
18749: PPUSH
18750: LD_INT 44
18752: PUSH
18753: LD_INT 43
18755: PUSH
18756: LD_INT 42
18758: PUSH
18759: LD_INT 44
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 1
18770: PPUSH
18771: LD_INT 4
18773: PPUSH
18774: CALL_OW 12
18778: ARRAY
18779: PPUSH
18780: LD_INT 99
18782: PPUSH
18783: CALL 34322 0 5
// veh := CreateVehicle ;
18787: LD_ADDR_VAR 0 3
18791: PUSH
18792: CALL_OW 45
18796: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18797: LD_VAR 0 3
18801: PPUSH
18802: LD_INT 293
18804: PPUSH
18805: LD_INT 246
18807: PPUSH
18808: LD_INT 5
18810: PPUSH
18811: LD_INT 0
18813: PPUSH
18814: CALL 69333 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18818: LD_ADDR_EXP 61
18822: PUSH
18823: LD_EXP 61
18827: PPUSH
18828: LD_EXP 61
18832: PUSH
18833: LD_INT 1
18835: PLUS
18836: PPUSH
18837: LD_VAR 0 3
18841: PPUSH
18842: CALL_OW 1
18846: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18847: LD_INT 0
18849: PPUSH
18850: LD_INT 3
18852: PPUSH
18853: LD_INT 3
18855: PPUSH
18856: CALL_OW 380
// un := CreateHuman ;
18860: LD_ADDR_VAR 0 2
18864: PUSH
18865: CALL_OW 44
18869: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18870: LD_VAR 0 2
18874: PPUSH
18875: LD_VAR 0 3
18879: PPUSH
18880: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18884: LD_ADDR_EXP 61
18888: PUSH
18889: LD_EXP 61
18893: PPUSH
18894: LD_EXP 61
18898: PUSH
18899: LD_INT 1
18901: PLUS
18902: PPUSH
18903: LD_VAR 0 2
18907: PPUSH
18908: CALL_OW 1
18912: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18913: LD_VAR 0 2
18917: PPUSH
18918: LD_INT 273
18920: PPUSH
18921: LD_INT 227
18923: PPUSH
18924: CALL_OW 111
// wait ( 0 0$2 ) ;
18928: LD_INT 70
18930: PPUSH
18931: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18935: LD_ADDR_VAR 0 4
18939: PUSH
18940: LD_VAR 0 4
18944: PPUSH
18945: LD_VAR 0 4
18949: PUSH
18950: LD_INT 1
18952: PLUS
18953: PPUSH
18954: LD_VAR 0 3
18958: PPUSH
18959: CALL_OW 1
18963: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18964: LD_ADDR_VAR 0 4
18968: PUSH
18969: LD_VAR 0 4
18973: PPUSH
18974: LD_VAR 0 4
18978: PUSH
18979: LD_INT 1
18981: PLUS
18982: PPUSH
18983: LD_VAR 0 2
18987: PPUSH
18988: CALL_OW 1
18992: ST_TO_ADDR
// end ;
18993: GO 18695
18995: POP
18996: POP
// for i in tmp do
18997: LD_ADDR_VAR 0 1
19001: PUSH
19002: LD_VAR 0 4
19006: PUSH
19007: FOR_IN
19008: IFFALSE 19027
// ComAgressiveMove ( i , 330 , 231 ) ;
19010: LD_VAR 0 1
19014: PPUSH
19015: LD_INT 330
19017: PPUSH
19018: LD_INT 231
19020: PPUSH
19021: CALL_OW 114
19025: GO 19007
19027: POP
19028: POP
// repeat wait ( 0 0$2 ) ;
19029: LD_INT 70
19031: PPUSH
19032: CALL_OW 67
// for i in tmp do
19036: LD_ADDR_VAR 0 1
19040: PUSH
19041: LD_VAR 0 4
19045: PUSH
19046: FOR_IN
19047: IFFALSE 19114
// if IsDead ( i ) then
19049: LD_VAR 0 1
19053: PPUSH
19054: CALL_OW 301
19058: IFFALSE 19078
// tmp := tmp diff i else
19060: LD_ADDR_VAR 0 4
19064: PUSH
19065: LD_VAR 0 4
19069: PUSH
19070: LD_VAR 0 1
19074: DIFF
19075: ST_TO_ADDR
19076: GO 19112
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19078: LD_VAR 0 1
19082: PPUSH
19083: LD_INT 81
19085: PUSH
19086: LD_INT 3
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PPUSH
19093: CALL_OW 69
19097: PPUSH
19098: LD_VAR 0 1
19102: PPUSH
19103: CALL_OW 74
19107: PPUSH
19108: CALL_OW 115
19112: GO 19046
19114: POP
19115: POP
// until not tmp ;
19116: LD_VAR 0 4
19120: NOT
19121: IFFALSE 19029
// end ;
19123: PPOPN 4
19125: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19126: LD_INT 3
19128: PUSH
19129: LD_INT 22
19131: PUSH
19132: LD_INT 2
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 32
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: IFFALSE 19245
19163: GO 19165
19165: DISABLE
19166: LD_INT 0
19168: PPUSH
// begin enable ;
19169: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19170: LD_ADDR_VAR 0 1
19174: PUSH
19175: LD_INT 3
19177: PUSH
19178: LD_INT 22
19180: PUSH
19181: LD_INT 2
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 32
19194: PUSH
19195: LD_INT 1
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PPUSH
19206: CALL_OW 69
19210: PUSH
19211: FOR_IN
19212: IFFALSE 19243
// if GetFuel ( i ) < 3 then
19214: LD_VAR 0 1
19218: PPUSH
19219: CALL_OW 261
19223: PUSH
19224: LD_INT 3
19226: LESS
19227: IFFALSE 19241
// SetFuel ( i , 3 ) ;
19229: LD_VAR 0 1
19233: PPUSH
19234: LD_INT 3
19236: PPUSH
19237: CALL_OW 240
19241: GO 19211
19243: POP
19244: POP
// end ; end_of_file
19245: PPOPN 1
19247: END
// export function Action ; begin
19248: LD_INT 0
19250: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19251: LD_INT 2
19253: PPUSH
19254: LD_INT 4
19256: PPUSH
19257: CALL_OW 332
// Video ( true ) ;
19261: LD_INT 1
19263: PPUSH
19264: CALL 67165 0 1
// music_nat := 3 ;
19268: LD_ADDR_OWVAR 71
19272: PUSH
19273: LD_INT 3
19275: ST_TO_ADDR
// music_class := music_recon ;
19276: LD_ADDR_OWVAR 72
19280: PUSH
19281: LD_INT 3
19283: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19284: LD_INT 213
19286: PPUSH
19287: LD_INT 89
19289: PPUSH
19290: CALL_OW 86
// if Kaia and Olaf then
19294: LD_EXP 39
19298: PUSH
19299: LD_EXP 43
19303: AND
19304: IFFALSE 19310
// SceneKaiaWithOlaf ;
19306: CALL 19388 0 0
// if Givi and Kamil then
19310: LD_EXP 35
19314: PUSH
19315: LD_EXP 38
19319: AND
19320: IFFALSE 19326
// SceneWithGiviAndKamil ;
19322: CALL 19959 0 0
// tick := 0 ;
19326: LD_ADDR_OWVAR 1
19330: PUSH
19331: LD_INT 0
19333: ST_TO_ADDR
// wait ( 3 ) ;
19334: LD_INT 3
19336: PPUSH
19337: CALL_OW 67
// Video ( false ) ;
19341: LD_INT 0
19343: PPUSH
19344: CALL 67165 0 1
// ChangeMissionObjectives ( M1 ) ;
19348: LD_STRING M1
19350: PPUSH
19351: CALL_OW 337
// music_nat := music_auto ;
19355: LD_ADDR_OWVAR 71
19359: PUSH
19360: LD_INT 0
19362: ST_TO_ADDR
// music_class := music_auto ;
19363: LD_ADDR_OWVAR 72
19367: PUSH
19368: LD_INT 0
19370: ST_TO_ADDR
// SaveForQuickRestart ;
19371: CALL_OW 22
// gameActive := true ;
19375: LD_ADDR_EXP 31
19379: PUSH
19380: LD_INT 1
19382: ST_TO_ADDR
// end ;
19383: LD_VAR 0 1
19387: RET
// export function SceneKaiaWithOlaf ; begin
19388: LD_INT 0
19390: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19391: LD_INT 22
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 30
19403: PUSH
19404: LD_INT 3
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PPUSH
19415: CALL_OW 69
19419: PPUSH
19420: LD_INT 14
19422: PPUSH
19423: LD_INT 1
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: LD_INT 26
19431: PPUSH
19432: CALL_OW 125
// wait ( 0 0$1 ) ;
19436: LD_INT 35
19438: PPUSH
19439: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19443: LD_EXP 39
19447: PPUSH
19448: LD_STRING DK-Mem-1
19450: PPUSH
19451: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19455: LD_EXP 39
19459: PPUSH
19460: LD_STRING DK-Mem-2
19462: PPUSH
19463: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19467: LD_EXP 43
19471: PPUSH
19472: LD_STRING DO-Mem-3
19474: PPUSH
19475: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19479: LD_EXP 39
19483: PPUSH
19484: LD_STRING DK-Mem-4
19486: PPUSH
19487: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19491: LD_EXP 43
19495: PPUSH
19496: LD_STRING DO-Mem-5
19498: PPUSH
19499: CALL_OW 88
// wait ( 0 0$2 ) ;
19503: LD_INT 70
19505: PPUSH
19506: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19510: LD_INT 22
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 30
19522: PUSH
19523: LD_INT 3
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PPUSH
19534: CALL_OW 69
19538: PPUSH
19539: LD_INT 90
19541: PPUSH
19542: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19546: LD_EXP 43
19550: PPUSH
19551: LD_STRING DO-Mem-6
19553: PPUSH
19554: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19558: LD_EXP 39
19562: PPUSH
19563: LD_STRING DK-Mem-7
19565: PPUSH
19566: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19570: LD_EXP 34
19574: PPUSH
19575: LD_EXP 39
19579: PPUSH
19580: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19584: LD_EXP 34
19588: PPUSH
19589: LD_STRING DH-Mem-8
19591: PPUSH
19592: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19596: LD_EXP 39
19600: PUSH
19601: LD_EXP 43
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PPUSH
19610: LD_EXP 34
19614: PPUSH
19615: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19619: LD_EXP 43
19623: PPUSH
19624: LD_STRING DO-Mem-9
19626: PPUSH
19627: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19631: LD_EXP 43
19635: PPUSH
19636: LD_STRING DO-Mem-10
19638: PPUSH
19639: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19643: LD_EXP 43
19647: PPUSH
19648: LD_STRING DO-Mem-11
19650: PPUSH
19651: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19655: LD_EXP 43
19659: PPUSH
19660: LD_STRING DO-Mem-12
19662: PPUSH
19663: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19667: LD_EXP 39
19671: PPUSH
19672: LD_STRING DK-Mem-13
19674: PPUSH
19675: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19679: LD_EXP 39
19683: PPUSH
19684: LD_STRING DK-Mem-14
19686: PPUSH
19687: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19691: LD_EXP 39
19695: PPUSH
19696: LD_STRING DK-Mem-15
19698: PPUSH
19699: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19703: LD_EXP 39
19707: PPUSH
19708: LD_STRING DK-Mem-16
19710: PPUSH
19711: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19715: LD_EXP 39
19719: PPUSH
19720: LD_STRING DK-Mem-17
19722: PPUSH
19723: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19727: LD_EXP 43
19731: PPUSH
19732: LD_EXP 39
19736: PPUSH
19737: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19741: LD_EXP 43
19745: PPUSH
19746: LD_STRING DO-Mem-18
19748: PPUSH
19749: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19753: LD_EXP 39
19757: PPUSH
19758: LD_EXP 43
19762: PPUSH
19763: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19767: LD_EXP 39
19771: PPUSH
19772: LD_STRING DK-Mem-19
19774: PPUSH
19775: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19779: LD_EXP 43
19783: PPUSH
19784: LD_INT 214
19786: PPUSH
19787: LD_INT 86
19789: PPUSH
19790: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19794: LD_EXP 43
19798: PPUSH
19799: LD_EXP 39
19803: PPUSH
19804: CALL_OW 179
// if Givi then
19808: LD_EXP 35
19812: IFFALSE 19843
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19814: LD_EXP 35
19818: PPUSH
19819: LD_INT 217
19821: PPUSH
19822: LD_INT 86
19824: PPUSH
19825: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19829: LD_EXP 35
19833: PPUSH
19834: LD_EXP 34
19838: PPUSH
19839: CALL_OW 179
// end ; if Kamil then
19843: LD_EXP 38
19847: IFFALSE 19887
// begin ComExit ( Kamil ) ;
19849: LD_EXP 38
19853: PPUSH
19854: CALL 67591 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19858: LD_EXP 38
19862: PPUSH
19863: LD_INT 212
19865: PPUSH
19866: LD_INT 86
19868: PPUSH
19869: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19873: LD_EXP 38
19877: PPUSH
19878: LD_EXP 34
19882: PPUSH
19883: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19887: LD_INT 70
19889: PPUSH
19890: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19894: LD_EXP 34
19898: PPUSH
19899: LD_STRING DH-Mem-20
19901: PPUSH
19902: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19906: LD_EXP 43
19910: PPUSH
19911: LD_INT 215
19913: PPUSH
19914: LD_INT 87
19916: PPUSH
19917: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19921: LD_EXP 43
19925: PPUSH
19926: LD_EXP 39
19930: PPUSH
19931: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19935: LD_EXP 39
19939: PPUSH
19940: LD_STRING DK-Mem-21
19942: PPUSH
19943: CALL_OW 88
// wait ( 0 0$2 ) ;
19947: LD_INT 70
19949: PPUSH
19950: CALL_OW 67
// end ;
19954: LD_VAR 0 1
19958: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19959: LD_INT 0
19961: PPUSH
19962: PPUSH
// if Markov then
19963: LD_EXP 41
19967: IFFALSE 20085
// begin p := 0 ;
19969: LD_ADDR_VAR 0 2
19973: PUSH
19974: LD_INT 0
19976: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19977: LD_EXP 41
19981: PPUSH
19982: CALL_OW 310
19986: IFFALSE 19997
// ComExit ( Markov ) ;
19988: LD_EXP 41
19992: PPUSH
19993: CALL 67591 0 1
// wait ( 0 0$1 ) ;
19997: LD_INT 35
19999: PPUSH
20000: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
20004: LD_EXP 41
20008: PPUSH
20009: LD_INT 212
20011: PPUSH
20012: LD_INT 88
20014: PPUSH
20015: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20019: LD_INT 35
20021: PPUSH
20022: CALL_OW 67
// p := Inc ( p ) ;
20026: LD_ADDR_VAR 0 2
20030: PUSH
20031: LD_VAR 0 2
20035: PPUSH
20036: CALL 68554 0 1
20040: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20041: LD_EXP 41
20045: PPUSH
20046: LD_EXP 34
20050: PPUSH
20051: CALL_OW 296
20055: PUSH
20056: LD_INT 6
20058: LESS
20059: PUSH
20060: LD_VAR 0 2
20064: PUSH
20065: LD_INT 12
20067: GREATER
20068: OR
20069: IFFALSE 20019
// AddComTurnUnit ( Markov , Heike ) ;
20071: LD_EXP 41
20075: PPUSH
20076: LD_EXP 34
20080: PPUSH
20081: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20085: LD_EXP 35
20089: PPUSH
20090: LD_STRING DG-Obj-1
20092: PPUSH
20093: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20097: LD_EXP 38
20101: PPUSH
20102: LD_STRING DKam-Obj-2
20104: PPUSH
20105: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20109: LD_EXP 34
20113: PPUSH
20114: LD_EXP 38
20118: PPUSH
20119: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20123: LD_EXP 38
20127: PPUSH
20128: LD_STRING DKam-Obj-3
20130: PPUSH
20131: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20135: LD_EXP 41
20139: PPUSH
20140: LD_STRING DMar-Obj-4
20142: PPUSH
20143: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20147: LD_EXP 38
20151: PPUSH
20152: LD_STRING DKam-Obj-6
20154: PPUSH
20155: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20159: LD_EXP 38
20163: PPUSH
20164: LD_STRING DKam-Obj-7
20166: PPUSH
20167: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20171: LD_EXP 38
20175: PPUSH
20176: LD_STRING DKam-Obj-8
20178: PPUSH
20179: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20183: LD_EXP 34
20187: PPUSH
20188: LD_STRING DH-Obj-9
20190: PPUSH
20191: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20195: LD_EXP 38
20199: PPUSH
20200: LD_STRING DKam-Obj-10
20202: PPUSH
20203: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20207: LD_EXP 38
20211: PPUSH
20212: LD_STRING DKam-Obj-11
20214: PPUSH
20215: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20219: LD_EXP 41
20223: PPUSH
20224: LD_STRING DMar-Obj-12
20226: PPUSH
20227: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20231: LD_EXP 41
20235: PPUSH
20236: LD_STRING DMar-Obj-13
20238: PPUSH
20239: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20243: LD_EXP 41
20247: PPUSH
20248: LD_STRING DMar-Obj-14
20250: PPUSH
20251: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20255: LD_EXP 43
20259: PPUSH
20260: LD_STRING DO-Obj-15
20262: PPUSH
20263: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20267: LD_EXP 43
20271: PPUSH
20272: LD_STRING DO-Obj-16
20274: PPUSH
20275: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20279: LD_EXP 34
20283: PPUSH
20284: LD_STRING DH-Obj-17
20286: PPUSH
20287: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20291: LD_EXP 43
20295: PPUSH
20296: LD_STRING DO-Obj-18
20298: PPUSH
20299: CALL_OW 88
// end ;
20303: LD_VAR 0 1
20307: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20308: LD_INT 34
20310: PUSH
20311: LD_INT 92
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PPUSH
20318: CALL_OW 69
20322: IFFALSE 20517
20324: GO 20326
20326: DISABLE
20327: LD_INT 0
20329: PPUSH
// begin wait ( 0 0$2 ) ;
20330: LD_INT 70
20332: PPUSH
20333: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20337: LD_INT 34
20339: PUSH
20340: LD_INT 92
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PPUSH
20347: CALL_OW 69
20351: PPUSH
20352: CALL_OW 87
// DialogueOn ;
20356: CALL_OW 6
// if Markov then
20360: LD_EXP 41
20364: IFFALSE 20392
// begin Say ( Markov , DMar-Grn-1 ) ;
20366: LD_EXP 41
20370: PPUSH
20371: LD_STRING DMar-Grn-1
20373: PPUSH
20374: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20378: LD_EXP 34
20382: PPUSH
20383: LD_STRING DH-Grn-2
20385: PPUSH
20386: CALL_OW 88
// end else
20390: GO 20491
// if heikeSecondSquad then
20392: LD_EXP 49
20396: IFFALSE 20491
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20398: LD_ADDR_VAR 0 1
20402: PUSH
20403: LD_EXP 49
20407: PUSH
20408: LD_INT 1
20410: PPUSH
20411: LD_EXP 49
20415: PPUSH
20416: CALL_OW 12
20420: ARRAY
20421: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20422: LD_VAR 0 1
20426: PPUSH
20427: CALL_OW 258
20431: PUSH
20432: LD_INT 1
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20455
20440: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20441: LD_VAR 0 1
20445: PPUSH
20446: LD_STRING DArm-Grn-1
20448: PPUSH
20449: CALL_OW 88
20453: GO 20479
20455: LD_INT 2
20457: DOUBLE
20458: EQUAL
20459: IFTRUE 20463
20461: GO 20478
20463: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20464: LD_VAR 0 1
20468: PPUSH
20469: LD_STRING DArf-Grn-1
20471: PPUSH
20472: CALL_OW 88
20476: GO 20479
20478: POP
// Say ( Heike , DH-Grn-2 ) ;
20479: LD_EXP 34
20483: PPUSH
20484: LD_STRING DH-Grn-2
20486: PPUSH
20487: CALL_OW 88
// end ; DialogueOff ;
20491: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20495: LD_STRING MortarConstructed
20497: PPUSH
20498: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20502: LD_STRING SelfPropelledMortar
20504: PPUSH
20505: CALL_OW 339
// mortarConstructed := true ;
20509: LD_ADDR_EXP 15
20513: PUSH
20514: LD_INT 1
20516: ST_TO_ADDR
// end ;
20517: PPOPN 1
20519: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20520: LD_INT 2
20522: PPUSH
20523: LD_INT 8
20525: PPUSH
20526: CALL_OW 294
20530: IFFALSE 20673
20532: GO 20534
20534: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20535: LD_INT 200
20537: PPUSH
20538: LD_INT 162
20540: PPUSH
20541: LD_INT 2
20543: PPUSH
20544: LD_INT 6
20546: NEG
20547: PPUSH
20548: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20552: LD_INT 200
20554: PPUSH
20555: LD_INT 162
20557: PPUSH
20558: LD_INT 2
20560: PPUSH
20561: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20565: LD_INT 200
20567: PPUSH
20568: LD_INT 162
20570: PPUSH
20571: CALL_OW 84
// if not IsOk ( Kurt ) then
20575: LD_EXP 45
20579: PPUSH
20580: CALL_OW 302
20584: NOT
20585: IFFALSE 20589
// exit ;
20587: GO 20673
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20589: LD_EXP 45
20593: PPUSH
20594: LD_STRING DKs-Otpst-2-1
20596: PPUSH
20597: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20601: LD_EXP 39
20605: PPUSH
20606: LD_STRING DK-Otpst-2-2
20608: PPUSH
20609: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20613: LD_EXP 45
20617: PPUSH
20618: LD_STRING DKs-Otpst-2-3
20620: PPUSH
20621: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20625: LD_EXP 45
20629: PPUSH
20630: LD_STRING DKs-Otpst-2-4
20632: PPUSH
20633: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20637: LD_EXP 45
20641: PPUSH
20642: LD_STRING DKs-Otpst-2-5
20644: PPUSH
20645: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20649: LD_EXP 38
20653: PPUSH
20654: LD_STRING DKam-Otpst-2-6
20656: PPUSH
20657: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20661: LD_EXP 45
20665: PPUSH
20666: LD_STRING DKs-Otpst-2-7
20668: PPUSH
20669: CALL_OW 88
// end ;
20673: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20674: LD_INT 8
20676: PPUSH
20677: LD_INT 22
20679: PUSH
20680: LD_INT 3
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 21
20689: PUSH
20690: LD_INT 3
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PPUSH
20701: CALL_OW 70
20705: NOT
20706: PUSH
20707: LD_EXP 3
20711: NOT
20712: AND
20713: IFFALSE 20961
20715: GO 20717
20717: DISABLE
20718: LD_INT 0
20720: PPUSH
// begin outpostDestroyed := true ;
20721: LD_ADDR_EXP 4
20725: PUSH
20726: LD_INT 1
20728: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20729: LD_INT 22
20731: PUSH
20732: LD_INT 2
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 34
20741: PUSH
20742: LD_INT 92
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 92
20751: PUSH
20752: LD_INT 195
20754: PUSH
20755: LD_INT 164
20757: PUSH
20758: LD_INT 12
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: LIST
20771: PPUSH
20772: CALL_OW 69
20776: NOT
20777: IFFALSE 20781
// exit ;
20779: GO 20961
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20781: LD_EXP 35
20785: PPUSH
20786: CALL_OW 302
20790: NOT
20791: PUSH
20792: LD_EXP 39
20796: PPUSH
20797: CALL_OW 302
20801: NOT
20802: OR
20803: IFFALSE 20807
// exit ;
20805: GO 20961
// Say ( Givi , DG-Otpst-1-1 ) ;
20807: LD_EXP 35
20811: PPUSH
20812: LD_STRING DG-Otpst-1-1
20814: PPUSH
20815: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20819: LD_EXP 39
20823: PPUSH
20824: LD_STRING DK-Otpst-1-2
20826: PPUSH
20827: CALL_OW 88
// if IsOk ( Markov ) then
20831: LD_EXP 41
20835: PPUSH
20836: CALL_OW 302
20840: IFFALSE 20868
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20842: LD_EXP 41
20846: PPUSH
20847: LD_STRING DMar-Otpst-1-3
20849: PPUSH
20850: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20854: LD_EXP 41
20858: PPUSH
20859: LD_STRING DMar-Otpst-1-4
20861: PPUSH
20862: CALL_OW 88
// end else
20866: GO 20949
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20868: LD_ADDR_VAR 0 1
20872: PUSH
20873: LD_EXP 49
20877: PUSH
20878: LD_INT 1
20880: PPUSH
20881: LD_EXP 49
20885: PPUSH
20886: CALL_OW 12
20890: ARRAY
20891: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20892: LD_VAR 0 1
20896: PPUSH
20897: CALL_OW 258
20901: PUSH
20902: LD_INT 1
20904: DOUBLE
20905: EQUAL
20906: IFTRUE 20910
20908: GO 20925
20910: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20911: LD_VAR 0 1
20915: PPUSH
20916: LD_STRING DArm-Otpst-1-a-3
20918: PPUSH
20919: CALL_OW 88
20923: GO 20949
20925: LD_INT 2
20927: DOUBLE
20928: EQUAL
20929: IFTRUE 20933
20931: GO 20948
20933: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20934: LD_VAR 0 1
20938: PPUSH
20939: LD_STRING DArf-Otpst-1-a-3
20941: PPUSH
20942: CALL_OW 88
20946: GO 20949
20948: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20949: LD_EXP 35
20953: PPUSH
20954: LD_STRING DG-Otpst-1-5
20956: PPUSH
20957: CALL_OW 88
// end ;
20961: PPOPN 1
20963: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20964: LD_EXP 39
20968: PPUSH
20969: CALL_OW 256
20973: PUSH
20974: LD_INT 10
20976: LESS
20977: IFFALSE 21091
20979: GO 20981
20981: DISABLE
// begin DialogueOn ;
20982: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20986: LD_EXP 39
20990: PPUSH
20991: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20995: LD_EXP 39
20999: PPUSH
21000: LD_STRING DK-Dead-1
21002: PPUSH
21003: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
21007: LD_EXP 34
21011: PPUSH
21012: LD_STRING DH-Dead-2
21014: PPUSH
21015: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
21019: LD_EXP 39
21023: PPUSH
21024: LD_STRING DK-Dead-3
21026: PPUSH
21027: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
21031: LD_EXP 34
21035: PPUSH
21036: LD_STRING DH-Dead-4
21038: PPUSH
21039: CALL_OW 88
// if IsOk ( Mike ) then
21043: LD_EXP 36
21047: PPUSH
21048: CALL_OW 302
21052: IFFALSE 21078
// begin Say ( Mike , DM-Dead-5 ) ;
21054: LD_EXP 36
21058: PPUSH
21059: LD_STRING DM-Dead-5
21061: PPUSH
21062: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21066: LD_EXP 34
21070: PPUSH
21071: LD_STRING DH-Dead-6
21073: PPUSH
21074: CALL_OW 88
// end ; DialogueOff ;
21078: CALL_OW 7
// KillUnit ( Kaia ) ;
21082: LD_EXP 39
21086: PPUSH
21087: CALL_OW 66
// end ;
21091: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21092: LD_OWVAR 1
21096: PUSH
21097: LD_INT 31500
21099: GREATEREQUAL
21100: PUSH
21101: LD_EXP 5
21105: PUSH
21106: LD_INT 5
21108: GREATER
21109: OR
21110: PUSH
21111: LD_INT 22
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 92
21123: PUSH
21124: LD_INT 103
21126: PUSH
21127: LD_INT 81
21129: PUSH
21130: LD_INT 20
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PPUSH
21143: CALL_OW 69
21147: OR
21148: IFFALSE 21588
21150: GO 21152
21152: DISABLE
21153: LD_INT 0
21155: PPUSH
21156: PPUSH
21157: PPUSH
// begin PrepareRolfSquad ;
21158: CALL 3531 0 0
// dep := HexInfo ( 86 , 54 ) ;
21162: LD_ADDR_VAR 0 3
21166: PUSH
21167: LD_INT 86
21169: PPUSH
21170: LD_INT 54
21172: PPUSH
21173: CALL_OW 428
21177: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21178: LD_VAR 0 3
21182: PPUSH
21183: CALL_OW 274
21187: PPUSH
21188: LD_INT 1
21190: PPUSH
21191: LD_INT 300
21193: PPUSH
21194: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21198: LD_VAR 0 3
21202: PPUSH
21203: CALL_OW 274
21207: PPUSH
21208: LD_INT 2
21210: PPUSH
21211: LD_INT 300
21213: PPUSH
21214: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21218: LD_EXP 51
21222: PPUSH
21223: LD_INT 79
21225: PPUSH
21226: LD_INT 52
21228: PPUSH
21229: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21233: LD_INT 35
21235: PPUSH
21236: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21240: LD_EXP 51
21244: PPUSH
21245: LD_INT 3
21247: PUSH
21248: LD_INT 60
21250: PUSH
21251: EMPTY
21252: LIST
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PPUSH
21258: CALL_OW 72
21262: PPUSH
21263: LD_INT 79
21265: PPUSH
21266: LD_INT 52
21268: PPUSH
21269: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21273: LD_INT 12
21275: PPUSH
21276: LD_INT 22
21278: PUSH
21279: LD_INT 3
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 21
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PPUSH
21300: CALL_OW 70
21304: NOT
21305: IFFALSE 21233
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21307: LD_ADDR_VAR 0 2
21311: PUSH
21312: LD_INT 12
21314: PPUSH
21315: LD_INT 21
21317: PUSH
21318: LD_INT 3
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PPUSH
21325: CALL_OW 70
21329: ST_TO_ADDR
// for i in tmp do
21330: LD_ADDR_VAR 0 1
21334: PUSH
21335: LD_VAR 0 2
21339: PUSH
21340: FOR_IN
21341: IFFALSE 21357
// SetSide ( i , 8 ) ;
21343: LD_VAR 0 1
21347: PPUSH
21348: LD_INT 8
21350: PPUSH
21351: CALL_OW 235
21355: GO 21340
21357: POP
21358: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21359: LD_INT 63
21361: PPUSH
21362: LD_INT 42
21364: PPUSH
21365: CALL_OW 428
21369: PPUSH
21370: LD_INT 320
21372: PPUSH
21373: CALL_OW 234
// wait ( 0 0$10 ) ;
21377: LD_INT 350
21379: PPUSH
21380: CALL_OW 67
// DialogueOn ;
21384: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21388: LD_INT 8
21390: PPUSH
21391: LD_INT 2
21393: PPUSH
21394: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21398: LD_INT 86
21400: PPUSH
21401: LD_INT 54
21403: PPUSH
21404: CALL_OW 428
21408: PPUSH
21409: LD_STRING antwerp
21411: PPUSH
21412: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21416: LD_EXP 47
21420: PPUSH
21421: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21425: LD_EXP 47
21429: PPUSH
21430: LD_STRING DRf-rast-1
21432: PPUSH
21433: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21437: LD_EXP 34
21441: PPUSH
21442: LD_STRING DH-rast-2
21444: PPUSH
21445: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21449: LD_EXP 47
21453: PPUSH
21454: LD_STRING DRf-rast-3
21456: PPUSH
21457: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21461: LD_EXP 47
21465: PPUSH
21466: LD_STRING DRf-rast-4
21468: PPUSH
21469: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21473: LD_EXP 47
21477: PPUSH
21478: LD_STRING DRf-rast-5
21480: PPUSH
21481: CALL_OW 94
// if IsOk ( Aviradze ) then
21485: LD_EXP 46
21489: PPUSH
21490: CALL_OW 302
21494: IFFALSE 21553
// begin CenterNowOnUnits ( Aviradze ) ;
21496: LD_EXP 46
21500: PPUSH
21501: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21505: LD_EXP 46
21509: PPUSH
21510: LD_STRING DA-rast-6
21512: PPUSH
21513: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21517: LD_EXP 34
21521: PPUSH
21522: LD_STRING DH-rast-7
21524: PPUSH
21525: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21529: LD_EXP 35
21533: PPUSH
21534: LD_STRING DG-rast-8
21536: PPUSH
21537: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21541: LD_EXP 35
21545: PPUSH
21546: LD_STRING DG-rast-9
21548: PPUSH
21549: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21553: LD_EXP 34
21557: PPUSH
21558: LD_STRING DH-rast-10
21560: PPUSH
21561: CALL_OW 88
// DialogueOff ;
21565: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21569: LD_STRING M2
21571: PPUSH
21572: CALL_OW 337
// bergkampfArrived := true ;
21576: LD_ADDR_EXP 3
21580: PUSH
21581: LD_INT 1
21583: ST_TO_ADDR
// PrepareRolfBase ;
21584: CALL 3862 0 0
// end ;
21588: PPOPN 3
21590: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21591: LD_INT 12
21593: PPUSH
21594: LD_INT 22
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PPUSH
21604: CALL_OW 70
21608: PUSH
21609: LD_EXP 47
21613: PPUSH
21614: CALL_OW 302
21618: AND
21619: PUSH
21620: LD_EXP 29
21624: AND
21625: IFFALSE 22185
21627: GO 21629
21629: DISABLE
21630: LD_INT 0
21632: PPUSH
// begin rolfScriptBase := false ;
21633: LD_ADDR_EXP 9
21637: PUSH
21638: LD_INT 0
21640: ST_TO_ADDR
// DialogueOn ;
21641: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21645: LD_EXP 47
21649: PPUSH
21650: CALL_OW 87
// if rolfSquad >= 10 then
21654: LD_EXP 51
21658: PUSH
21659: LD_INT 10
21661: GREATEREQUAL
21662: IFFALSE 21841
// begin linkedWithRolf := 2 ;
21664: LD_ADDR_EXP 12
21668: PUSH
21669: LD_INT 2
21671: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21672: LD_EXP 47
21676: PPUSH
21677: LD_STRING DRf-rast-11
21679: PPUSH
21680: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21684: LD_EXP 34
21688: PPUSH
21689: LD_STRING DH-rast-12
21691: PPUSH
21692: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21696: LD_EXP 47
21700: PPUSH
21701: LD_STRING DRf-rast-13
21703: PPUSH
21704: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21708: LD_EXP 34
21712: PPUSH
21713: LD_STRING DH-rast-14
21715: PPUSH
21716: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21720: LD_EXP 47
21724: PPUSH
21725: LD_STRING DRf-rast-15
21727: PPUSH
21728: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21732: LD_EXP 34
21736: PPUSH
21737: LD_STRING DH-rast-16
21739: PPUSH
21740: CALL_OW 88
// if IsOk ( Mike ) then
21744: LD_EXP 36
21748: PPUSH
21749: CALL_OW 302
21753: IFFALSE 21827
// begin Say ( Mike , DM-rast-17 ) ;
21755: LD_EXP 36
21759: PPUSH
21760: LD_STRING DM-rast-17
21762: PPUSH
21763: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21767: LD_EXP 34
21771: PPUSH
21772: LD_STRING DH-rast-18
21774: PPUSH
21775: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21779: LD_EXP 36
21783: PPUSH
21784: LD_STRING DM-rast-19
21786: PPUSH
21787: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21791: LD_EXP 34
21795: PPUSH
21796: LD_STRING DH-rast-20
21798: PPUSH
21799: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21803: LD_EXP 36
21807: PPUSH
21808: LD_STRING DM-rast-21
21810: PPUSH
21811: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21815: LD_EXP 34
21819: PPUSH
21820: LD_STRING DH-rast-22
21822: PPUSH
21823: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21827: LD_EXP 34
21831: PPUSH
21832: LD_STRING DH-rast-23
21834: PPUSH
21835: CALL_OW 88
// end else
21839: GO 21991
// begin linkedWithRolf := 1 ;
21841: LD_ADDR_EXP 12
21845: PUSH
21846: LD_INT 1
21848: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21849: LD_EXP 47
21853: PPUSH
21854: LD_STRING DRf-rast-a-11
21856: PPUSH
21857: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21861: LD_EXP 34
21865: PPUSH
21866: LD_STRING DH-rast-a-12
21868: PPUSH
21869: CALL_OW 88
// if IsOk ( Kurt ) then
21873: LD_EXP 45
21877: PPUSH
21878: CALL_OW 302
21882: IFFALSE 21979
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21884: LD_EXP 45
21888: PPUSH
21889: LD_STRING DKs-rast-a-13
21891: PPUSH
21892: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21896: LD_EXP 47
21900: PPUSH
21901: LD_STRING DRf-rast-a-14
21903: PPUSH
21904: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21908: LD_EXP 47
21912: PPUSH
21913: LD_STRING DRf-rast-a-15
21915: PPUSH
21916: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21920: LD_EXP 45
21924: PPUSH
21925: LD_STRING DKs-rast-a-16
21927: PPUSH
21928: CALL_OW 88
// if IsOk ( Givi ) then
21932: LD_EXP 35
21936: PPUSH
21937: CALL_OW 302
21941: IFFALSE 21979
// begin Say ( Givi , DG-rast-a-17 ) ;
21943: LD_EXP 35
21947: PPUSH
21948: LD_STRING DG-rast-a-17
21950: PPUSH
21951: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21955: LD_EXP 35
21959: PPUSH
21960: LD_STRING DG-rast-a-18
21962: PPUSH
21963: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21967: LD_EXP 45
21971: PPUSH
21972: LD_STRING DKs-rast-a-19
21974: PPUSH
21975: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21979: LD_EXP 34
21983: PPUSH
21984: LD_STRING DH-rast-a-20
21986: PPUSH
21987: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21991: LD_EXP 47
21995: PPUSH
21996: LD_STRING DRf-rast-24
21998: PPUSH
21999: CALL_OW 88
// if IsOk ( Aviradze ) then
22003: LD_EXP 46
22007: PPUSH
22008: CALL_OW 302
22012: IFFALSE 22112
// begin Say ( Aviradze , DA-rast-25 ) ;
22014: LD_EXP 46
22018: PPUSH
22019: LD_STRING DA-rast-25
22021: PPUSH
22022: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
22026: LD_EXP 34
22030: PPUSH
22031: LD_STRING DH-rast-26
22033: PPUSH
22034: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22038: LD_EXP 46
22042: PPUSH
22043: LD_STRING DA-rast-27
22045: PPUSH
22046: CALL_OW 88
// if IsOk ( Markov ) then
22050: LD_EXP 41
22054: PPUSH
22055: CALL_OW 302
22059: IFFALSE 22087
// begin Say ( Markov , DMar-rast-28 ) ;
22061: LD_EXP 41
22065: PPUSH
22066: LD_STRING DMar-rast-28
22068: PPUSH
22069: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22073: LD_EXP 41
22077: PPUSH
22078: LD_STRING DMar-rast-29
22080: PPUSH
22081: CALL_OW 88
// end else
22085: GO 22110
// if IsOk ( Sophia ) then
22087: LD_EXP 40
22091: PPUSH
22092: CALL_OW 302
22096: IFFALSE 22110
// begin Say ( Sophia , DS-rast-28 ) ;
22098: LD_EXP 40
22102: PPUSH
22103: LD_STRING DS-rast-28
22105: PPUSH
22106: CALL_OW 88
// end ; end else
22110: GO 22135
// if IsOk ( Sophia ) then
22112: LD_EXP 40
22116: PPUSH
22117: CALL_OW 302
22121: IFFALSE 22135
// Say ( Sophia , DS-rast-29 ) ;
22123: LD_EXP 40
22127: PPUSH
22128: LD_STRING DS-rast-29
22130: PPUSH
22131: CALL_OW 88
// DialogueOff ;
22135: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22139: LD_STRING M3
22141: PPUSH
22142: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22146: LD_ADDR_VAR 0 1
22150: PUSH
22151: LD_INT 22
22153: PUSH
22154: LD_INT 8
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PPUSH
22161: CALL_OW 69
22165: PUSH
22166: FOR_IN
22167: IFFALSE 22183
// SetSide ( i , 2 ) ;
22169: LD_VAR 0 1
22173: PPUSH
22174: LD_INT 2
22176: PPUSH
22177: CALL_OW 235
22181: GO 22166
22183: POP
22184: POP
// end ;
22185: PPOPN 1
22187: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22188: LD_EXP 23
22192: PUSH
22193: LD_EXP 12
22197: NOT
22198: AND
22199: PUSH
22200: LD_EXP 29
22204: AND
22205: IFFALSE 22296
22207: GO 22209
22209: DISABLE
22210: LD_INT 0
22212: PPUSH
// begin canRolfJoin := false ;
22213: LD_ADDR_EXP 29
22217: PUSH
22218: LD_INT 0
22220: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22221: LD_STRING M3
22223: PPUSH
22224: CALL_OW 337
// for i in rolfSquad do
22228: LD_ADDR_VAR 0 1
22232: PUSH
22233: LD_EXP 51
22237: PUSH
22238: FOR_IN
22239: IFFALSE 22294
// begin ComExit ( i ) ;
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL 67591 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22250: LD_VAR 0 1
22254: PPUSH
22255: LD_INT 147
22257: PPUSH
22258: LD_INT 162
22260: PPUSH
22261: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22265: LD_VAR 0 1
22269: PPUSH
22270: LD_INT 1050
22272: PPUSH
22273: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22277: LD_VAR 0 1
22281: PPUSH
22282: LD_INT 103
22284: PPUSH
22285: LD_INT 162
22287: PPUSH
22288: CALL_OW 174
// end ;
22292: GO 22238
22294: POP
22295: POP
// end ;
22296: PPOPN 1
22298: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22299: LD_EXP 3
22303: PUSH
22304: LD_EXP 47
22308: PPUSH
22309: CALL_OW 256
22313: PUSH
22314: LD_INT 400
22316: LESS
22317: AND
22318: PUSH
22319: LD_EXP 12
22323: NOT
22324: AND
22325: PUSH
22326: LD_EXP 29
22330: AND
22331: IFFALSE 22605
22333: GO 22335
22335: DISABLE
22336: LD_INT 0
22338: PPUSH
// begin DialogueOn ;
22339: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22343: LD_EXP 47
22347: PPUSH
22348: LD_STRING DRf-rast-f-11
22350: PPUSH
22351: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22355: LD_EXP 47
22359: PPUSH
22360: LD_STRING DRf-rast-f-12
22362: PPUSH
22363: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22367: LD_EXP 47
22371: PPUSH
22372: LD_STRING DRf-rast-f-13
22374: PPUSH
22375: CALL_OW 94
// DialogueOff ;
22379: CALL_OW 7
// KillUnit ( Rolf ) ;
22383: LD_EXP 47
22387: PPUSH
22388: CALL_OW 66
// wait ( 0 0$1 ) ;
22392: LD_INT 35
22394: PPUSH
22395: CALL_OW 67
// if not IsOk ( Givi ) then
22399: LD_EXP 35
22403: PPUSH
22404: CALL_OW 302
22408: NOT
22409: IFFALSE 22413
// exit ;
22411: GO 22605
// DialogueOn ;
22413: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22417: LD_EXP 35
22421: PPUSH
22422: LD_STRING DG-rast-f-14
22424: PPUSH
22425: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22429: LD_EXP 35
22433: PPUSH
22434: LD_STRING DG-rast-f-15
22436: PPUSH
22437: CALL_OW 88
// if IsOk ( Kaia ) then
22441: LD_EXP 39
22445: PPUSH
22446: CALL_OW 302
22450: IFFALSE 22466
// Say ( Kaia , DK-rast-f-16 ) else
22452: LD_EXP 39
22456: PPUSH
22457: LD_STRING DK-rast-f-16
22459: PPUSH
22460: CALL_OW 88
22464: GO 22553
// if heikeSecondSquad then
22466: LD_EXP 49
22470: IFFALSE 22553
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22472: LD_ADDR_VAR 0 1
22476: PUSH
22477: LD_EXP 49
22481: PUSH
22482: LD_INT 1
22484: PPUSH
22485: LD_EXP 49
22489: PPUSH
22490: CALL_OW 12
22494: ARRAY
22495: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22496: LD_VAR 0 1
22500: PPUSH
22501: CALL_OW 258
22505: PUSH
22506: LD_INT 1
22508: DOUBLE
22509: EQUAL
22510: IFTRUE 22514
22512: GO 22529
22514: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22515: LD_VAR 0 1
22519: PPUSH
22520: LD_STRING DArm-rast-f-a-16
22522: PPUSH
22523: CALL_OW 88
22527: GO 22553
22529: LD_INT 2
22531: DOUBLE
22532: EQUAL
22533: IFTRUE 22537
22535: GO 22552
22537: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22538: LD_VAR 0 1
22542: PPUSH
22543: LD_STRING DArf-rast-f-a-16
22545: PPUSH
22546: CALL_OW 88
22550: GO 22553
22552: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22553: LD_EXP 35
22557: PPUSH
22558: LD_STRING DG-rast-f-17
22560: PPUSH
22561: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22565: LD_EXP 35
22569: PPUSH
22570: LD_STRING DG-rast-f-18
22572: PPUSH
22573: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22577: LD_EXP 35
22581: PPUSH
22582: LD_STRING DG-rast-f-19
22584: PPUSH
22585: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22589: LD_EXP 35
22593: PPUSH
22594: LD_STRING DG-rast-f-20
22596: PPUSH
22597: CALL_OW 88
// DialogueOff ;
22601: CALL_OW 7
// end ;
22605: PPOPN 1
22607: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22608: LD_EXP 31
22612: PUSH
22613: LD_INT 2
22615: PPUSH
22616: LD_INT 10
22618: PPUSH
22619: CALL_OW 294
22623: AND
22624: IFFALSE 22697
22626: GO 22628
22628: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22629: LD_EXP 35
22633: PPUSH
22634: LD_STRING DG-Len-1
22636: PPUSH
22637: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22641: LD_EXP 45
22645: PPUSH
22646: LD_STRING DKs-Len-2
22648: PPUSH
22649: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22653: LD_EXP 45
22657: PPUSH
22658: LD_STRING DKs-Len-3
22660: PPUSH
22661: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22665: LD_EXP 34
22669: PPUSH
22670: LD_STRING DH-Len-4
22672: PPUSH
22673: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22677: LD_EXP 39
22681: PPUSH
22682: LD_STRING DK-Len-5
22684: PPUSH
22685: CALL_OW 88
// leninSpotted := true ;
22689: LD_ADDR_EXP 14
22693: PUSH
22694: LD_INT 1
22696: ST_TO_ADDR
// end ;
22697: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22698: LD_EXP 1
22702: PUSH
22703: LD_EXP 3
22707: PUSH
22708: LD_OWVAR 1
22712: PUSH
22713: LD_INT 67200
22715: PUSH
22716: LD_INT 63000
22718: PUSH
22719: LD_INT 58800
22721: PUSH
22722: LD_INT 54600
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: PUSH
22731: LD_OWVAR 67
22735: ARRAY
22736: GREATER
22737: AND
22738: OR
22739: IFFALSE 23476
22741: GO 22743
22743: DISABLE
22744: LD_INT 0
22746: PPUSH
22747: PPUSH
22748: PPUSH
22749: PPUSH
// begin PrepareOmarSquad ;
22750: CALL 5144 0 0
// repeat wait ( 0 0$1 ) ;
22754: LD_INT 35
22756: PPUSH
22757: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22761: LD_INT 14
22763: PPUSH
22764: LD_INT 22
22766: PUSH
22767: LD_INT 3
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 2
22776: PUSH
22777: LD_INT 21
22779: PUSH
22780: LD_INT 1
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 59
22789: PUSH
22790: EMPTY
22791: LIST
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PPUSH
22802: CALL_OW 70
22806: NOT
22807: IFFALSE 22754
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22809: LD_ADDR_VAR 0 2
22813: PUSH
22814: LD_INT 14
22816: PPUSH
22817: LD_INT 22
22819: PUSH
22820: LD_INT 2
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PPUSH
22827: CALL_OW 70
22831: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22832: LD_ADDR_VAR 0 3
22836: PUSH
22837: LD_VAR 0 2
22841: PUSH
22842: LD_INT 0
22844: GREATER
22845: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22846: LD_ADDR_VAR 0 4
22850: PUSH
22851: LD_EXP 34
22855: PPUSH
22856: LD_INT 14
22858: PPUSH
22859: CALL_OW 308
22863: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22864: LD_VAR 0 2
22868: PPUSH
22869: LD_INT 21
22871: PUSH
22872: LD_INT 3
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PPUSH
22879: CALL_OW 72
22883: IFFALSE 22988
// begin if heikeNearbyOmar then
22885: LD_VAR 0 4
22889: IFFALSE 22905
// Say ( Omar , DOm-Base-1b ) else
22891: LD_EXP 44
22895: PPUSH
22896: LD_STRING DOm-Base-1b
22898: PPUSH
22899: CALL_OW 88
22903: GO 22917
// SayRadio ( Omar , DOm-Base-1br ) ;
22905: LD_EXP 44
22909: PPUSH
22910: LD_STRING DOm-Base-1br
22912: PPUSH
22913: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22917: LD_ADDR_VAR 0 1
22921: PUSH
22922: LD_VAR 0 2
22926: PPUSH
22927: LD_INT 21
22929: PUSH
22930: LD_INT 3
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PPUSH
22937: CALL_OW 72
22941: PUSH
22942: FOR_IN
22943: IFFALSE 22984
// begin if UnitsInside ( i ) then
22945: LD_VAR 0 1
22949: PPUSH
22950: CALL_OW 313
22954: IFFALSE 22970
// ComExitBuilding ( UnitsInside ( i ) ) ;
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 313
22965: PPUSH
22966: CALL_OW 122
// SetSide ( i , 5 ) ;
22970: LD_VAR 0 1
22974: PPUSH
22975: LD_INT 5
22977: PPUSH
22978: CALL_OW 235
// end ;
22982: GO 22942
22984: POP
22985: POP
// end else
22986: GO 23081
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22988: LD_VAR 0 2
22992: PPUSH
22993: LD_INT 21
22995: PUSH
22996: LD_INT 2
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PPUSH
23003: CALL_OW 72
23007: IFFALSE 23043
// begin if heikeNearbyOmar then
23009: LD_VAR 0 4
23013: IFFALSE 23029
// Say ( Omar , DOm-Base-1v ) else
23015: LD_EXP 44
23019: PPUSH
23020: LD_STRING DOm-Base-1v
23022: PPUSH
23023: CALL_OW 88
23027: GO 23041
// SayRadio ( Omar , DOm-Base-1vr ) end else
23029: LD_EXP 44
23033: PPUSH
23034: LD_STRING DOm-Base-1vr
23036: PPUSH
23037: CALL_OW 94
23041: GO 23081
// if inOmarBase then
23043: LD_VAR 0 3
23047: IFFALSE 23081
// begin if heikeNearbyOmar then
23049: LD_VAR 0 4
23053: IFFALSE 23069
// Say ( Omar , DOm-Base-1h ) else
23055: LD_EXP 44
23059: PPUSH
23060: LD_STRING DOm-Base-1h
23062: PPUSH
23063: CALL_OW 88
23067: GO 23081
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23069: LD_EXP 44
23073: PPUSH
23074: LD_STRING DOm-Base-1hr
23076: PPUSH
23077: CALL_OW 94
// for i in omarSquad do
23081: LD_ADDR_VAR 0 1
23085: PUSH
23086: LD_EXP 52
23090: PUSH
23091: FOR_IN
23092: IFFALSE 23123
// if GetLives ( i ) < 750 then
23094: LD_VAR 0 1
23098: PPUSH
23099: CALL_OW 256
23103: PUSH
23104: LD_INT 750
23106: LESS
23107: IFFALSE 23121
// SetLives ( i , 1000 ) ;
23109: LD_VAR 0 1
23113: PPUSH
23114: LD_INT 1000
23116: PPUSH
23117: CALL_OW 234
23121: GO 23091
23123: POP
23124: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23125: LD_ADDR_VAR 0 1
23129: PUSH
23130: LD_INT 14
23132: PPUSH
23133: LD_INT 21
23135: PUSH
23136: LD_INT 3
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PPUSH
23143: CALL_OW 70
23147: PUSH
23148: FOR_IN
23149: IFFALSE 23165
// SetSide ( i , 5 ) ;
23151: LD_VAR 0 1
23155: PPUSH
23156: LD_INT 5
23158: PPUSH
23159: CALL_OW 235
23163: GO 23148
23165: POP
23166: POP
// wait ( 0 0$3 ) ;
23167: LD_INT 105
23169: PPUSH
23170: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23174: LD_INT 5
23176: PPUSH
23177: LD_INT 2
23179: PPUSH
23180: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23184: LD_EXP 44
23188: PPUSH
23189: CALL_OW 87
// DialogueOn ;
23193: CALL_OW 6
// if heikeNearbyOmar then
23197: LD_VAR 0 4
23201: IFFALSE 23259
// begin Say ( Omar , DOm-Veh-1a ) ;
23203: LD_EXP 44
23207: PPUSH
23208: LD_STRING DOm-Veh-1a
23210: PPUSH
23211: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23215: LD_EXP 44
23219: PPUSH
23220: LD_STRING DOm-Veh-2a
23222: PPUSH
23223: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23227: LD_EXP 44
23231: PPUSH
23232: LD_STRING DOm-Veh-3a
23234: PPUSH
23235: CALL_OW 88
// if mortarConstructed then
23239: LD_EXP 15
23243: IFFALSE 23257
// Say ( Omar , DOm-Veh-4a ) ;
23245: LD_EXP 44
23249: PPUSH
23250: LD_STRING DOm-Veh-4a
23252: PPUSH
23253: CALL_OW 88
// end else
23257: GO 23313
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23259: LD_EXP 44
23263: PPUSH
23264: LD_STRING DOm-Veh-1
23266: PPUSH
23267: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23271: LD_EXP 44
23275: PPUSH
23276: LD_STRING DOm-Veh-2
23278: PPUSH
23279: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23283: LD_EXP 44
23287: PPUSH
23288: LD_STRING DOm-Veh-3
23290: PPUSH
23291: CALL_OW 94
// if mortarConstructed then
23295: LD_EXP 15
23299: IFFALSE 23313
// SayRadio ( Omar , DOm-Veh-4 ) ;
23301: LD_EXP 44
23305: PPUSH
23306: LD_STRING DOm-Veh-4
23308: PPUSH
23309: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23313: LD_EXP 34
23317: PPUSH
23318: LD_STRING DH-Veh-5
23320: PPUSH
23321: CALL_OW 88
// if IsOk ( Kurt ) then
23325: LD_EXP 45
23329: PPUSH
23330: CALL_OW 302
23334: IFFALSE 23384
// begin Say ( Kurt , DKs-Veh-6 ) ;
23336: LD_EXP 45
23340: PPUSH
23341: LD_STRING DKs-Veh-6
23343: PPUSH
23344: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23348: LD_EXP 45
23352: PPUSH
23353: LD_STRING DKs-Veh-7
23355: PPUSH
23356: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23360: LD_EXP 35
23364: PPUSH
23365: LD_STRING DG-Veh-8
23367: PPUSH
23368: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23372: LD_EXP 36
23376: PPUSH
23377: LD_STRING DM-Veh-9
23379: PPUSH
23380: CALL_OW 88
// end ; DialogueOff ;
23384: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23388: LD_STRING M4
23390: PPUSH
23391: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23395: LD_EXP 44
23399: PPUSH
23400: LD_INT 341
23402: PPUSH
23403: LD_INT 232
23405: PPUSH
23406: CALL_OW 428
23410: PPUSH
23411: CALL_OW 120
// omarArrived := true ;
23415: LD_ADDR_EXP 6
23419: PUSH
23420: LD_INT 1
23422: ST_TO_ADDR
// omarScriptBase := true ;
23423: LD_ADDR_EXP 10
23427: PUSH
23428: LD_INT 1
23430: ST_TO_ADDR
// omarWantVehicles := true ;
23431: LD_ADDR_EXP 18
23435: PUSH
23436: LD_INT 1
23438: ST_TO_ADDR
// if debug then
23439: LD_EXP 1
23443: IFFALSE 23476
// begin wait ( 0 0$25 ) ;
23445: LD_INT 875
23447: PPUSH
23448: CALL_OW 67
// omarScriptBase := false ;
23452: LD_ADDR_EXP 10
23456: PUSH
23457: LD_INT 0
23459: ST_TO_ADDR
// omarWantVehicles := false ;
23460: LD_ADDR_EXP 18
23464: PUSH
23465: LD_INT 0
23467: ST_TO_ADDR
// omarAttack := true ;
23468: LD_ADDR_EXP 23
23472: PUSH
23473: LD_INT 1
23475: ST_TO_ADDR
// end ; end ;
23476: PPOPN 4
23478: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23479: LD_INT 10
23481: PPUSH
23482: LD_INT 22
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PPUSH
23492: CALL_OW 70
23496: PUSH
23497: LD_EXP 6
23501: AND
23502: PUSH
23503: LD_EXP 44
23507: PPUSH
23508: CALL_OW 302
23512: AND
23513: PUSH
23514: LD_EXP 23
23518: NOT
23519: AND
23520: IFFALSE 23537
23522: GO 23524
23524: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23525: LD_EXP 44
23529: PPUSH
23530: LD_STRING DOm-Lenin
23532: PPUSH
23533: CALL_OW 94
23537: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23538: LD_EXP 47
23542: PPUSH
23543: CALL_OW 302
23547: PUSH
23548: LD_EXP 12
23552: AND
23553: PUSH
23554: LD_EXP 6
23558: AND
23559: IFFALSE 23663
23561: GO 23563
23563: DISABLE
// begin wait ( 1 1$00 ) ;
23564: LD_INT 2100
23566: PPUSH
23567: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23571: LD_EXP 47
23575: PPUSH
23576: CALL_OW 87
// DialogueOn ;
23580: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23584: LD_EXP 47
23588: PPUSH
23589: LD_STRING DRf-Veh-10
23591: PPUSH
23592: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23596: LD_EXP 47
23600: PPUSH
23601: LD_STRING DRf-Veh-11
23603: PPUSH
23604: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23608: LD_EXP 34
23612: PPUSH
23613: LD_STRING DH-Veh-12
23615: PPUSH
23616: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23620: LD_EXP 34
23624: PPUSH
23625: LD_STRING DH-Veh-13
23627: PPUSH
23628: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23632: LD_EXP 47
23636: PPUSH
23637: LD_STRING DRf-Veh-14
23639: PPUSH
23640: CALL_OW 88
// DialogueOff ;
23644: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23648: LD_STRING M5
23650: PPUSH
23651: CALL_OW 337
// rolfWantVehicles := true ;
23655: LD_ADDR_EXP 17
23659: PUSH
23660: LD_INT 1
23662: ST_TO_ADDR
// end ;
23663: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23664: LD_EXP 18
23668: IFFALSE 24431
23670: GO 23672
23672: DISABLE
23673: LD_INT 0
23675: PPUSH
23676: PPUSH
23677: PPUSH
23678: PPUSH
23679: PPUSH
23680: PPUSH
// begin wait ( 0 0$3 ) ;
23681: LD_INT 105
23683: PPUSH
23684: CALL_OW 67
// Hint ( OmarVehicles ) ;
23688: LD_STRING OmarVehicles
23690: PPUSH
23691: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23695: LD_INT 16
23697: PPUSH
23698: LD_INT 1
23700: PPUSH
23701: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23705: LD_INT 35
23707: PPUSH
23708: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23712: LD_ADDR_EXP 20
23716: PUSH
23717: LD_EXP 20
23721: PUSH
23722: LD_INT 35
23724: MINUS
23725: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23726: LD_EXP 20
23730: PUSH
23731: LD_INT 0
23733: LESSEQUAL
23734: IFFALSE 23834
// begin display_strings := [ ] ;
23736: LD_ADDR_OWVAR 47
23740: PUSH
23741: EMPTY
23742: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23743: LD_STRING M4a
23745: PPUSH
23746: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23750: LD_INT 16
23752: PPUSH
23753: LD_INT 0
23755: PPUSH
23756: CALL_OW 424
// DialogueOn ;
23760: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23764: LD_EXP 44
23768: PPUSH
23769: LD_STRING DOm-Veh-b-15
23771: PPUSH
23772: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23776: LD_EXP 34
23780: PPUSH
23781: LD_STRING DH-Veh-b-16
23783: PPUSH
23784: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23788: LD_EXP 44
23792: PPUSH
23793: LD_STRING DOm-Veh-b-17
23795: PPUSH
23796: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23800: LD_EXP 39
23804: PPUSH
23805: LD_STRING DK-Veh-b-18
23807: PPUSH
23808: CALL_OW 88
// DialogueOff ;
23812: CALL_OW 7
// omarAttack := true ;
23816: LD_ADDR_EXP 23
23820: PUSH
23821: LD_INT 1
23823: ST_TO_ADDR
// omarScriptBase := false ;
23824: LD_ADDR_EXP 10
23828: PUSH
23829: LD_INT 0
23831: ST_TO_ADDR
// exit ;
23832: GO 24431
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23834: LD_EXP 21
23838: PUSH
23839: LD_INT 16
23841: PPUSH
23842: LD_INT 22
23844: PUSH
23845: LD_INT 2
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 21
23854: PUSH
23855: LD_INT 2
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 3
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: LD_INT 34
23870: PUSH
23871: LD_INT 32
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 34
23880: PUSH
23881: LD_INT 88
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 34
23890: PUSH
23891: LD_INT 31
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 33
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 58
23920: PUSH
23921: EMPTY
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: PPUSH
23931: CALL_OW 70
23935: LESSEQUAL
23936: IFFALSE 23705
// omarWaitingForVehiclesTimer := 0 0$00 ;
23938: LD_ADDR_EXP 20
23942: PUSH
23943: LD_INT 0
23945: ST_TO_ADDR
// display_strings := [ ] ;
23946: LD_ADDR_OWVAR 47
23950: PUSH
23951: EMPTY
23952: ST_TO_ADDR
// DialogueOn ;
23953: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23957: LD_EXP 44
23961: PPUSH
23962: LD_STRING DOm-Veh-a-15
23964: PPUSH
23965: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23969: LD_EXP 39
23973: PPUSH
23974: LD_STRING DK-Veh-a-16
23976: PPUSH
23977: CALL_OW 88
// DialogueOff ;
23981: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23985: LD_STRING M4a
23987: PPUSH
23988: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23992: LD_INT 16
23994: PPUSH
23995: LD_INT 0
23997: PPUSH
23998: CALL_OW 424
// omarHasVehicles := true ;
24002: LD_ADDR_EXP 22
24006: PUSH
24007: LD_INT 1
24009: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24010: LD_INT 35
24012: PPUSH
24013: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
24017: LD_EXP 19
24021: PUSH
24022: LD_INT 0
24024: EQUAL
24025: IFFALSE 24010
// wait ( 1 1$00 ) ;
24027: LD_INT 2100
24029: PPUSH
24030: CALL_OW 67
// omarAttack := true ;
24034: LD_ADDR_EXP 23
24038: PUSH
24039: LD_INT 1
24041: ST_TO_ADDR
// omarScriptBase := false ;
24042: LD_ADDR_EXP 10
24046: PUSH
24047: LD_INT 0
24049: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24050: LD_ADDR_VAR 0 2
24054: PUSH
24055: LD_INT 16
24057: PPUSH
24058: LD_INT 22
24060: PUSH
24061: LD_INT 2
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 21
24070: PUSH
24071: LD_INT 2
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 33
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 58
24090: PUSH
24091: EMPTY
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: PPUSH
24100: CALL_OW 70
24104: ST_TO_ADDR
// for i in tmp do
24105: LD_ADDR_VAR 0 1
24109: PUSH
24110: LD_VAR 0 2
24114: PUSH
24115: FOR_IN
24116: IFFALSE 24144
// begin SetFuel ( i , 100 ) ;
24118: LD_VAR 0 1
24122: PPUSH
24123: LD_INT 100
24125: PPUSH
24126: CALL_OW 240
// SetSide ( i , 5 ) ;
24130: LD_VAR 0 1
24134: PPUSH
24135: LD_INT 5
24137: PPUSH
24138: CALL_OW 235
// end ;
24142: GO 24115
24144: POP
24145: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24146: LD_ADDR_VAR 0 3
24150: PUSH
24151: LD_EXP 52
24155: PPUSH
24156: LD_INT 25
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PPUSH
24166: CALL_OW 72
24170: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24171: LD_ADDR_VAR 0 4
24175: PUSH
24176: LD_EXP 52
24180: PPUSH
24181: LD_INT 3
24183: PUSH
24184: LD_INT 55
24186: PUSH
24187: EMPTY
24188: LIST
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 25
24196: PUSH
24197: LD_INT 3
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PPUSH
24208: CALL_OW 72
24212: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24213: LD_ADDR_VAR 0 5
24217: PUSH
24218: LD_INT 324
24220: PPUSH
24221: LD_INT 234
24223: PPUSH
24224: CALL_OW 428
24228: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24229: LD_ADDR_VAR 0 6
24233: PUSH
24234: LD_INT 334
24236: PPUSH
24237: LD_INT 241
24239: PPUSH
24240: CALL_OW 428
24244: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24245: LD_VAR 0 6
24249: PPUSH
24250: CALL_OW 313
24254: PPUSH
24255: CALL_OW 122
// if eng then
24259: LD_VAR 0 3
24263: IFFALSE 24371
// begin if eng + mech <= tmp then
24265: LD_VAR 0 3
24269: PUSH
24270: LD_VAR 0 4
24274: PLUS
24275: PUSH
24276: LD_VAR 0 2
24280: LESSEQUAL
24281: IFFALSE 24336
// begin ComEnterUnit ( eng , workshop ) ;
24283: LD_VAR 0 3
24287: PPUSH
24288: LD_VAR 0 5
24292: PPUSH
24293: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24297: LD_VAR 0 3
24301: PPUSH
24302: LD_INT 3
24304: PPUSH
24305: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24309: LD_VAR 0 3
24313: PPUSH
24314: CALL_OW 182
// mech := mech union eng ;
24318: LD_ADDR_VAR 0 4
24322: PUSH
24323: LD_VAR 0 4
24327: PUSH
24328: LD_VAR 0 3
24332: UNION
24333: ST_TO_ADDR
// end else
24334: GO 24371
// begin ComEnterUnit ( eng , armoury ) ;
24336: LD_VAR 0 3
24340: PPUSH
24341: LD_VAR 0 6
24345: PPUSH
24346: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24350: LD_VAR 0 3
24354: PPUSH
24355: LD_INT 1
24357: PPUSH
24358: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24362: LD_VAR 0 3
24366: PPUSH
24367: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24371: LD_ADDR_VAR 0 1
24375: PUSH
24376: DOUBLE
24377: LD_INT 1
24379: DEC
24380: ST_TO_ADDR
24381: LD_VAR 0 2
24385: PUSH
24386: FOR_TO
24387: IFFALSE 24429
// if i <= mech then
24389: LD_VAR 0 1
24393: PUSH
24394: LD_VAR 0 4
24398: LESSEQUAL
24399: IFFALSE 24427
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24401: LD_VAR 0 4
24405: PUSH
24406: LD_VAR 0 1
24410: ARRAY
24411: PPUSH
24412: LD_VAR 0 2
24416: PUSH
24417: LD_VAR 0 1
24421: ARRAY
24422: PPUSH
24423: CALL_OW 180
24427: GO 24386
24429: POP
24430: POP
// end ;
24431: PPOPN 6
24433: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24434: LD_EXP 47
24438: PPUSH
24439: CALL_OW 302
24443: PUSH
24444: LD_EXP 17
24448: AND
24449: IFFALSE 25073
24451: GO 24453
24453: DISABLE
24454: LD_INT 0
24456: PPUSH
24457: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24458: LD_INT 35
24460: PPUSH
24461: CALL_OW 67
// hasBadWeapons := false ;
24465: LD_ADDR_VAR 0 2
24469: PUSH
24470: LD_INT 0
24472: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24473: LD_ADDR_EXP 19
24477: PUSH
24478: LD_EXP 19
24482: PUSH
24483: LD_INT 35
24485: MINUS
24486: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24487: LD_EXP 19
24491: PUSH
24492: LD_INT 0
24494: LESSEQUAL
24495: IFFALSE 24757
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24497: LD_ADDR_EXP 19
24501: PUSH
24502: LD_INT 0
24504: ST_TO_ADDR
// display_strings := [ ] ;
24505: LD_ADDR_OWVAR 47
24509: PUSH
24510: EMPTY
24511: ST_TO_ADDR
// DialogueOn ;
24512: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24516: LD_EXP 47
24520: PPUSH
24521: LD_STRING DRf-Veh-b-19
24523: PPUSH
24524: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24528: LD_EXP 47
24532: PPUSH
24533: LD_STRING DRf-Veh-b-20
24535: PPUSH
24536: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24540: LD_EXP 34
24544: PPUSH
24545: LD_STRING DH-Veh-b-21
24547: PPUSH
24548: CALL_OW 88
// if IsOk ( Givi ) then
24552: LD_EXP 35
24556: PPUSH
24557: CALL_OW 302
24561: IFFALSE 24599
// begin Say ( Givi , DG-Veh-b-22 ) ;
24563: LD_EXP 35
24567: PPUSH
24568: LD_STRING DG-Veh-b-22
24570: PPUSH
24571: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24575: LD_EXP 34
24579: PPUSH
24580: LD_STRING DH-Veh-b-23
24582: PPUSH
24583: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24587: LD_EXP 35
24591: PPUSH
24592: LD_STRING DG-Veh-b-24
24594: PPUSH
24595: CALL_OW 88
// end ; DialogueOff ;
24599: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24603: LD_STRING M5a
24605: PPUSH
24606: CALL_OW 337
// for i in rolfSquad do
24610: LD_ADDR_VAR 0 1
24614: PUSH
24615: LD_EXP 51
24619: PUSH
24620: FOR_IN
24621: IFFALSE 24738
// begin SetSide ( i , 8 ) ;
24623: LD_VAR 0 1
24627: PPUSH
24628: LD_INT 8
24630: PPUSH
24631: CALL_OW 235
// if IsDriver ( i ) then
24635: LD_VAR 0 1
24639: PPUSH
24640: CALL 64797 0 1
24644: IFFALSE 24716
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24646: LD_VAR 0 1
24650: PPUSH
24651: CALL_OW 310
24655: PPUSH
24656: CALL_OW 264
24660: PUSH
24661: LD_INT 51
24663: PUSH
24664: LD_INT 52
24666: PUSH
24667: LD_INT 32
24669: PUSH
24670: LD_INT 88
24672: PUSH
24673: LD_INT 31
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: IN
24683: NOT
24684: IFFALSE 24705
// SetSide ( IsInUnit ( i ) , 8 ) else
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 310
24695: PPUSH
24696: LD_INT 8
24698: PPUSH
24699: CALL_OW 235
24703: GO 24714
// ComExitVehicle ( i ) ;
24705: LD_VAR 0 1
24709: PPUSH
24710: CALL_OW 121
// end else
24714: GO 24736
// if IsInUnit ( i ) then
24716: LD_VAR 0 1
24720: PPUSH
24721: CALL_OW 310
24725: IFFALSE 24736
// ComExitBuilding ( i ) ;
24727: LD_VAR 0 1
24731: PPUSH
24732: CALL_OW 122
// end ;
24736: GO 24620
24738: POP
24739: POP
// wait ( 0 0$10 ) ;
24740: LD_INT 350
24742: PPUSH
24743: CALL_OW 67
// rolfAttack := true ;
24747: LD_ADDR_EXP 32
24751: PUSH
24752: LD_INT 1
24754: ST_TO_ADDR
// exit ;
24755: GO 25073
// end ; if IsDead ( Rolf ) then
24757: LD_EXP 47
24761: PPUSH
24762: CALL_OW 301
24766: IFFALSE 24777
// begin ChangeMissionObjectives ( M5a ) ;
24768: LD_STRING M5a
24770: PPUSH
24771: CALL_OW 337
// exit ;
24775: GO 25073
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24777: LD_EXP 51
24781: PPUSH
24782: LD_INT 55
24784: PUSH
24785: EMPTY
24786: LIST
24787: PPUSH
24788: CALL_OW 72
24792: PPUSH
24793: CALL 31584 0 1
24797: PUSH
24798: LD_EXP 51
24802: PPUSH
24803: CALL 31584 0 1
24807: EQUAL
24808: IFFALSE 24925
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24810: LD_ADDR_VAR 0 1
24814: PUSH
24815: LD_EXP 51
24819: PPUSH
24820: LD_INT 55
24822: PUSH
24823: EMPTY
24824: LIST
24825: PPUSH
24826: CALL_OW 72
24830: PUSH
24831: FOR_IN
24832: IFFALSE 24892
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24834: LD_VAR 0 1
24838: PPUSH
24839: CALL_OW 310
24843: PPUSH
24844: CALL_OW 264
24848: PUSH
24849: LD_INT 51
24851: PUSH
24852: LD_INT 52
24854: PUSH
24855: LD_INT 32
24857: PUSH
24858: LD_INT 88
24860: PUSH
24861: LD_INT 31
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: IN
24871: IFFALSE 24890
// begin hasBadWeapons := true ;
24873: LD_ADDR_VAR 0 2
24877: PUSH
24878: LD_INT 1
24880: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24881: LD_STRING QBadWeapon
24883: PPUSH
24884: CALL_OW 97
// break ;
24888: GO 24892
// end ;
24890: GO 24831
24892: POP
24893: POP
// if not hasBadWeapons then
24894: LD_VAR 0 2
24898: NOT
24899: IFFALSE 24925
// if Query ( QRolf ) = 1 then
24901: LD_STRING QRolf
24903: PPUSH
24904: CALL_OW 97
24908: PUSH
24909: LD_INT 1
24911: EQUAL
24912: IFFALSE 24918
// break else
24914: GO 24929
24916: GO 24925
// wait ( 0 0$15 ) ;
24918: LD_INT 525
24920: PPUSH
24921: CALL_OW 67
// end ; until false ;
24925: LD_INT 0
24927: IFFALSE 24458
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24929: LD_ADDR_EXP 19
24933: PUSH
24934: LD_INT 0
24936: ST_TO_ADDR
// display_strings := [ ] ;
24937: LD_ADDR_OWVAR 47
24941: PUSH
24942: EMPTY
24943: ST_TO_ADDR
// DialogueOn ;
24944: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24948: LD_EXP 47
24952: PPUSH
24953: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24957: LD_EXP 47
24961: PPUSH
24962: LD_STRING DRf-Veh-a-17
24964: PPUSH
24965: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24969: LD_EXP 34
24973: PPUSH
24974: LD_STRING DH-08-Veh-a-18
24976: PPUSH
24977: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24981: LD_EXP 47
24985: PPUSH
24986: LD_STRING DRf-Veh-a-19
24988: PPUSH
24989: CALL_OW 88
// DialogueOff ;
24993: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24997: LD_STRING M5a
24999: PPUSH
25000: CALL_OW 337
// rolfHasVehicles := true ;
25004: LD_ADDR_EXP 16
25008: PUSH
25009: LD_INT 1
25011: ST_TO_ADDR
// for i in rolfSquad do
25012: LD_ADDR_VAR 0 1
25016: PUSH
25017: LD_EXP 51
25021: PUSH
25022: FOR_IN
25023: IFFALSE 25056
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
25025: LD_VAR 0 1
25029: PPUSH
25030: CALL_OW 310
25034: PPUSH
25035: LD_INT 8
25037: PPUSH
25038: CALL_OW 235
// SetSide ( i , 8 ) ;
25042: LD_VAR 0 1
25046: PPUSH
25047: LD_INT 8
25049: PPUSH
25050: CALL_OW 235
// end ;
25054: GO 25022
25056: POP
25057: POP
// wait ( 0 0$10 ) ;
25058: LD_INT 350
25060: PPUSH
25061: CALL_OW 67
// rolfAttack := true ;
25065: LD_ADDR_EXP 32
25069: PUSH
25070: LD_INT 1
25072: ST_TO_ADDR
// end ;
25073: PPOPN 2
25075: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25076: LD_EXP 32
25080: PUSH
25081: LD_EXP 23
25085: AND
25086: IFFALSE 25098
25088: GO 25090
25090: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25091: LD_STRING M6a
25093: PPUSH
25094: CALL_OW 337
25098: END
// every 0 0$1 trigger leninSpotted do
25099: LD_EXP 14
25103: IFFALSE 25191
25105: GO 25107
25107: DISABLE
// begin wait ( 0 0$10 ) ;
25108: LD_INT 350
25110: PPUSH
25111: CALL_OW 67
// DialogueOn ;
25115: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25119: LD_EXP 46
25123: PPUSH
25124: LD_STRING DA-Transmission-1
25126: PPUSH
25127: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25131: LD_EXP 53
25135: PPUSH
25136: LD_STRING DMzw-Transmission-2
25138: PPUSH
25139: CALL_OW 94
// if gaidarKilled then
25143: LD_EXP 7
25147: IFFALSE 25163
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25149: LD_EXP 53
25153: PPUSH
25154: LD_STRING DMzw-Transmission-3
25156: PPUSH
25157: CALL_OW 94
25161: GO 25175
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25163: LD_EXP 53
25167: PPUSH
25168: LD_STRING DMzw-Transmission-a-3
25170: PPUSH
25171: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25175: LD_EXP 34
25179: PPUSH
25180: LD_STRING DH-Transmission-4
25182: PPUSH
25183: CALL_OW 88
// DialogueOff ;
25187: CALL_OW 7
// end ;
25191: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25192: LD_INT 22
25194: PUSH
25195: LD_INT 3
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 25
25204: PUSH
25205: LD_INT 9
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 101
25214: PUSH
25215: LD_INT 2
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: LIST
25226: PPUSH
25227: CALL_OW 69
25231: PUSH
25232: LD_EXP 34
25236: PPUSH
25237: CALL_OW 302
25241: AND
25242: IFFALSE 25322
25244: GO 25246
25246: DISABLE
// begin wait ( 0 0$3 ) ;
25247: LD_INT 105
25249: PPUSH
25250: CALL_OW 67
// DialogueOn ;
25254: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25258: LD_INT 22
25260: PUSH
25261: LD_INT 3
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 25
25270: PUSH
25271: LD_INT 9
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 101
25280: PUSH
25281: LD_INT 2
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: LIST
25292: PPUSH
25293: CALL_OW 69
25297: PUSH
25298: LD_INT 1
25300: ARRAY
25301: PPUSH
25302: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25306: LD_EXP 34
25310: PPUSH
25311: LD_STRING DH-Rubazooka-1
25313: PPUSH
25314: CALL_OW 88
// DialogueOff ;
25318: CALL_OW 7
// end ;
25322: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25323: LD_INT 19
25325: PPUSH
25326: LD_INT 22
25328: PUSH
25329: LD_INT 3
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PPUSH
25336: CALL_OW 70
25340: PUSH
25341: LD_EXP 28
25345: AND
25346: IFFALSE 25405
25348: GO 25350
25350: DISABLE
// begin DialogueOn ;
25351: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25355: LD_INT 19
25357: PPUSH
25358: LD_INT 22
25360: PUSH
25361: LD_INT 3
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PPUSH
25368: CALL_OW 70
25372: PPUSH
25373: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25377: LD_EXP 34
25381: PPUSH
25382: LD_STRING DH-Ruattfirst-1
25384: PPUSH
25385: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25389: LD_EXP 34
25393: PPUSH
25394: LD_STRING DH-Ruattfirst-2
25396: PPUSH
25397: CALL_OW 88
// DialogueOff ;
25401: CALL_OW 7
// end ;
25405: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25406: LD_INT 19
25408: PPUSH
25409: LD_INT 22
25411: PUSH
25412: LD_INT 3
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PPUSH
25419: CALL_OW 70
25423: PUSH
25424: LD_EXP 28
25428: NOT
25429: AND
25430: IFFALSE 25477
25432: GO 25434
25434: DISABLE
// begin DialogueOn ;
25435: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25439: LD_INT 19
25441: PPUSH
25442: LD_INT 22
25444: PUSH
25445: LD_INT 3
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PPUSH
25452: CALL_OW 70
25456: PPUSH
25457: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25461: LD_EXP 34
25465: PPUSH
25466: LD_STRING DH-Ruattnext-1
25468: PPUSH
25469: CALL_OW 88
// DialogueOff ;
25473: CALL_OW 7
// end ;
25477: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25478: LD_EXP 53
25482: PPUSH
25483: CALL_OW 301
25487: PUSH
25488: LD_EXP 44
25492: PPUSH
25493: CALL_OW 302
25497: AND
25498: IFFALSE 25515
25500: GO 25502
25502: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25503: LD_EXP 44
25507: PPUSH
25508: LD_STRING DOm-Morozov
25510: PPUSH
25511: CALL_OW 94
25515: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25516: LD_EXP 31
25520: PUSH
25521: LD_EXP 48
25525: PPUSH
25526: CALL_OW 274
25530: PPUSH
25531: LD_INT 2
25533: PPUSH
25534: CALL_OW 275
25538: PUSH
25539: LD_INT 30
25541: LESSEQUAL
25542: AND
25543: IFFALSE 25633
25545: GO 25547
25547: DISABLE
// begin wait ( 0 0$10 ) ;
25548: LD_INT 350
25550: PPUSH
25551: CALL_OW 67
// DialogueOn ;
25555: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25559: LD_EXP 34
25563: PPUSH
25564: LD_STRING DH-Fuel-1
25566: PPUSH
25567: CALL_OW 88
// if IsOk ( Givi ) then
25571: LD_EXP 35
25575: PPUSH
25576: CALL_OW 302
25580: IFFALSE 25618
// begin Say ( Givi , DG-Fuel-2 ) ;
25582: LD_EXP 35
25586: PPUSH
25587: LD_STRING DG-Fuel-2
25589: PPUSH
25590: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25594: LD_EXP 35
25598: PPUSH
25599: LD_STRING DG-Fuel-3
25601: PPUSH
25602: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25606: LD_EXP 35
25610: PPUSH
25611: LD_STRING DG-Fuel-4
25613: PPUSH
25614: CALL_OW 88
// end ; DialogueOff ;
25618: CALL_OW 7
// Query ( QOil ) ;
25622: LD_STRING QOil
25624: PPUSH
25625: CALL_OW 97
// GoForOil ( ) ;
25629: CALL 8886 0 0
// end ;
25633: END
// every 0 0$1 trigger leninSpotted and omarAttack and rolfAttack do
25634: LD_EXP 14
25638: PUSH
25639: LD_EXP 23
25643: AND
25644: PUSH
25645: LD_EXP 32
25649: AND
25650: IFFALSE 25991
25652: GO 25654
25654: DISABLE
// begin if IsDead ( Morozov ) then
25655: LD_EXP 53
25659: PPUSH
25660: CALL_OW 301
25664: IFFALSE 25675
// wait ( 1 1$45 ) else
25666: LD_INT 3675
25668: PPUSH
25669: CALL_OW 67
25673: GO 25703
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25675: LD_INT 19950
25677: PUSH
25678: LD_INT 16800
25680: PUSH
25681: LD_INT 16100
25683: PUSH
25684: LD_INT 13650
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: PUSH
25693: LD_OWVAR 67
25697: ARRAY
25698: PPUSH
25699: CALL_OW 67
// DialogueOn ;
25703: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25707: LD_EXP 42
25711: PPUSH
25712: LD_STRING DShar-End-1
25714: PPUSH
25715: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25719: LD_EXP 34
25723: PPUSH
25724: LD_STRING DH-End-2
25726: PPUSH
25727: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25731: LD_EXP 42
25735: PPUSH
25736: LD_STRING DShar-End-3
25738: PPUSH
25739: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25743: LD_EXP 34
25747: PPUSH
25748: LD_STRING DH-End-4
25750: PPUSH
25751: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25755: LD_EXP 42
25759: PPUSH
25760: LD_STRING DShar-End-5
25762: PPUSH
25763: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25767: LD_EXP 42
25771: PPUSH
25772: LD_STRING DShar-End-6
25774: PPUSH
25775: CALL_OW 94
// dwait ( 0 0$2 ) ;
25779: LD_INT 70
25781: PPUSH
25782: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25786: LD_EXP 34
25790: PPUSH
25791: LD_STRING DH-End-7
25793: PPUSH
25794: CALL_OW 88
// DialogueOff ;
25798: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25802: LD_STRING M6
25804: PPUSH
25805: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25809: LD_INT 17
25811: PPUSH
25812: LD_INT 1
25814: PPUSH
25815: CALL_OW 424
// escapeAllowed := true ;
25819: LD_ADDR_EXP 24
25823: PUSH
25824: LD_INT 1
25826: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25827: LD_INT 70
25829: PPUSH
25830: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25834: LD_EXP 45
25838: PPUSH
25839: LD_STRING DKs-End-8
25841: PPUSH
25842: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25846: LD_EXP 39
25850: PPUSH
25851: LD_STRING DK-End-10
25853: PPUSH
25854: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25858: LD_EXP 45
25862: PPUSH
25863: LD_STRING DKs-End-9
25865: PPUSH
25866: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25870: LD_EXP 41
25874: PPUSH
25875: LD_STRING DMar-End-11
25877: PPUSH
25878: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25882: LD_STRING 05_DrugsTested
25884: PPUSH
25885: LD_EXP 1
25889: PPUSH
25890: CALL_OW 30
25894: IFFALSE 25908
// Say ( Mike , DM-End-12 ) ;
25896: LD_EXP 36
25900: PPUSH
25901: LD_STRING DM-End-12
25903: PPUSH
25904: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25908: LD_EXP 43
25912: PPUSH
25913: LD_STRING DO-End-13
25915: PPUSH
25916: CALL_OW 88
// if IsOk ( Sophia ) then
25920: LD_EXP 40
25924: PPUSH
25925: CALL_OW 302
25929: IFFALSE 25955
// begin Say ( Sophia , DS-End-15 ) ;
25931: LD_EXP 40
25935: PPUSH
25936: LD_STRING DS-End-15
25938: PPUSH
25939: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25943: LD_EXP 39
25947: PPUSH
25948: LD_STRING DK-End-16
25950: PPUSH
25951: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25955: LD_EXP 35
25959: PPUSH
25960: LD_STRING DG-End-17
25962: PPUSH
25963: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25967: LD_EXP 35
25971: PPUSH
25972: LD_STRING DG-End-18
25974: PPUSH
25975: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25979: LD_EXP 35
25983: PPUSH
25984: LD_STRING DG-End-19
25986: PPUSH
25987: CALL_OW 88
// end ;
25991: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25992: LD_EXP 24
25996: IFFALSE 26135
25998: GO 26000
26000: DISABLE
26001: LD_INT 0
26003: PPUSH
26004: PPUSH
// begin repeat wait ( 0 0$1 ) ;
26005: LD_INT 35
26007: PPUSH
26008: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
26012: LD_ADDR_OWVAR 47
26016: PUSH
26017: LD_STRING #X106-2
26019: PUSH
26020: LD_EXP 25
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26029: LD_ADDR_EXP 25
26033: PUSH
26034: LD_EXP 25
26038: PUSH
26039: LD_INT 35
26041: MINUS
26042: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26043: LD_ADDR_VAR 0 2
26047: PUSH
26048: LD_INT 17
26050: PPUSH
26051: LD_INT 22
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 21
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 23
26073: PUSH
26074: LD_INT 2
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: PPUSH
26086: CALL_OW 71
26090: ST_TO_ADDR
// if not outsiders then
26091: LD_VAR 0 2
26095: NOT
26096: IFFALSE 26112
// begin escapeAllowed := false ;
26098: LD_ADDR_EXP 24
26102: PUSH
26103: LD_INT 0
26105: ST_TO_ADDR
// MissionWin ;
26106: CALL 26138 0 0
// exit ;
26110: GO 26135
// end ; if escapeTimer <= 0 0$00 then
26112: LD_EXP 25
26116: PUSH
26117: LD_INT 0
26119: LESSEQUAL
26120: IFFALSE 26131
// begin YouLost ( TimeOut ) ;
26122: LD_STRING TimeOut
26124: PPUSH
26125: CALL_OW 104
// exit ;
26129: GO 26135
// end ; until false ;
26131: LD_INT 0
26133: IFFALSE 26005
// end ;
26135: PPOPN 2
26137: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
26138: LD_INT 0
26140: PPUSH
26141: PPUSH
26142: PPUSH
26143: PPUSH
26144: PPUSH
// if tick <= 55 55$00 then
26145: LD_OWVAR 1
26149: PUSH
26150: LD_INT 115500
26152: LESSEQUAL
26153: IFFALSE 26162
// SetAchievement ( ACH_HSPEED_6 ) ;
26155: LD_STRING ACH_HSPEED_6
26157: PPUSH
26158: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26162: LD_EXP 34
26166: PPUSH
26167: LD_STRING DH-End-20
26169: PPUSH
26170: CALL_OW 88
// if rolfDied then
26174: LD_EXP 13
26178: IFFALSE 26193
// AddMedal ( med1 , - 1 ) else
26180: LD_STRING med1
26182: PPUSH
26183: LD_INT 1
26185: NEG
26186: PPUSH
26187: CALL_OW 101
26191: GO 26223
// if not canRolfJoin then
26193: LD_EXP 29
26197: NOT
26198: IFFALSE 26213
// AddMedal ( med1 , - 2 ) else
26200: LD_STRING med1
26202: PPUSH
26203: LD_INT 2
26205: NEG
26206: PPUSH
26207: CALL_OW 101
26211: GO 26223
// AddMedal ( med1 , 1 ) ;
26213: LD_STRING med1
26215: PPUSH
26216: LD_INT 1
26218: PPUSH
26219: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26223: LD_EXP 22
26227: PUSH
26228: LD_EXP 16
26232: AND
26233: IFFALSE 26247
// AddMedal ( med2 , 1 ) else
26235: LD_STRING med2
26237: PPUSH
26238: LD_INT 1
26240: PPUSH
26241: CALL_OW 101
26245: GO 26296
// if omarHasVehicles then
26247: LD_EXP 22
26251: IFFALSE 26266
// AddMedal ( med2 , - 1 ) else
26253: LD_STRING med2
26255: PPUSH
26256: LD_INT 1
26258: NEG
26259: PPUSH
26260: CALL_OW 101
26264: GO 26296
// if rolfHasVehicles then
26266: LD_EXP 16
26270: IFFALSE 26285
// AddMedal ( med2 , - 2 ) else
26272: LD_STRING med2
26274: PPUSH
26275: LD_INT 2
26277: NEG
26278: PPUSH
26279: CALL_OW 101
26283: GO 26296
// AddMedal ( med2 , - 3 ) ;
26285: LD_STRING med2
26287: PPUSH
26288: LD_INT 3
26290: NEG
26291: PPUSH
26292: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26296: LD_EXP 5
26300: PUSH
26301: LD_INT 20
26303: PUSH
26304: LD_INT 30
26306: PUSH
26307: LD_INT 40
26309: PUSH
26310: LD_INT 50
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: PUSH
26319: LD_OWVAR 67
26323: ARRAY
26324: GREATEREQUAL
26325: PUSH
26326: LD_EXP 26
26330: PUSH
26331: LD_INT 0
26333: EQUAL
26334: AND
26335: IFFALSE 26349
// AddMedal ( med3 , 1 ) else
26337: LD_STRING med3
26339: PPUSH
26340: LD_INT 1
26342: PPUSH
26343: CALL_OW 101
26347: GO 26379
// if heikeLoseCounter then
26349: LD_EXP 26
26353: IFFALSE 26368
// AddMedal ( med3 , - 2 ) else
26355: LD_STRING med3
26357: PPUSH
26358: LD_INT 2
26360: NEG
26361: PPUSH
26362: CALL_OW 101
26366: GO 26379
// AddMedal ( med3 , - 1 ) ;
26368: LD_STRING med3
26370: PPUSH
26371: LD_INT 1
26373: NEG
26374: PPUSH
26375: CALL_OW 101
// GiveMedals ( MAIN ) ;
26379: LD_STRING MAIN
26381: PPUSH
26382: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26386: LD_INT 22
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 23
26398: PUSH
26399: LD_INT 2
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 21
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: LIST
26420: PPUSH
26421: CALL_OW 69
26425: PPUSH
26426: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26430: LD_EXP 34
26434: PPUSH
26435: LD_STRING 06_Heike
26437: PPUSH
26438: CALL_OW 38
// if Aviradze then
26442: LD_EXP 46
26446: IFFALSE 26460
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26448: LD_EXP 46
26452: PPUSH
26453: LD_STRING 06_Aviradze
26455: PPUSH
26456: CALL_OW 38
// if Ibrahim then
26460: LD_EXP 37
26464: IFFALSE 26478
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26466: LD_EXP 37
26470: PPUSH
26471: LD_STRING 06_Ibrahim
26473: PPUSH
26474: CALL_OW 38
// if Kamil then
26478: LD_EXP 38
26482: IFFALSE 26496
// SaveCharacters ( Kamil , 06_Kamil ) ;
26484: LD_EXP 38
26488: PPUSH
26489: LD_STRING 06_Kamil
26491: PPUSH
26492: CALL_OW 38
// if Sophia then
26496: LD_EXP 40
26500: IFFALSE 26514
// SaveCharacters ( Sophia , 06_Sophia ) ;
26502: LD_EXP 40
26506: PPUSH
26507: LD_STRING 06_Sophia
26509: PPUSH
26510: CALL_OW 38
// if Kaia then
26514: LD_EXP 39
26518: IFFALSE 26532
// SaveCharacters ( Kaia , 06_Kaia ) ;
26520: LD_EXP 39
26524: PPUSH
26525: LD_STRING 06_Kaia
26527: PPUSH
26528: CALL_OW 38
// if Givi then
26532: LD_EXP 35
26536: IFFALSE 26550
// SaveCharacters ( Givi , 06_Givi ) ;
26538: LD_EXP 35
26542: PPUSH
26543: LD_STRING 06_Givi
26545: PPUSH
26546: CALL_OW 38
// if Olaf then
26550: LD_EXP 43
26554: IFFALSE 26568
// SaveCharacters ( Olaf , 06_Olaf ) ;
26556: LD_EXP 43
26560: PPUSH
26561: LD_STRING 06_Olaf
26563: PPUSH
26564: CALL_OW 38
// if Mike then
26568: LD_EXP 36
26572: IFFALSE 26586
// SaveCharacters ( Mike , 06_Mike ) ;
26574: LD_EXP 36
26578: PPUSH
26579: LD_STRING 06_Mike
26581: PPUSH
26582: CALL_OW 38
// if Markov then
26586: LD_EXP 41
26590: IFFALSE 26604
// SaveCharacters ( Markov , 06_Markov ) ;
26592: LD_EXP 41
26596: PPUSH
26597: LD_STRING 06_Markov
26599: PPUSH
26600: CALL_OW 38
// if Kurt then
26604: LD_EXP 45
26608: IFFALSE 26622
// SaveCharacters ( Kurt , 06_Kurt ) ;
26610: LD_EXP 45
26614: PPUSH
26615: LD_STRING 06_Kurt
26617: PPUSH
26618: CALL_OW 38
// if heikeSecondSquad then
26622: LD_EXP 49
26626: IFFALSE 26640
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26628: LD_EXP 49
26632: PPUSH
26633: LD_STRING 06_others
26635: PPUSH
26636: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26640: LD_ADDR_VAR 0 3
26644: PUSH
26645: LD_INT 22
26647: PUSH
26648: LD_INT 2
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 23
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PPUSH
26669: CALL_OW 69
26673: ST_TO_ADDR
// if tmp then
26674: LD_VAR 0 3
26678: IFFALSE 26692
// SaveCharacters ( tmp , 06_apes ) ;
26680: LD_VAR 0 3
26684: PPUSH
26685: LD_STRING 06_apes
26687: PPUSH
26688: CALL_OW 38
// if Rolf then
26692: LD_EXP 47
26696: IFFALSE 26747
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26698: LD_EXP 47
26702: PPUSH
26703: LD_STRING 06_Rolf
26705: PPUSH
26706: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26710: LD_STRING enableBioCharacter(BIO_ROLF)
26712: PPUSH
26713: CALL_OW 559
// if rolfSquad diff Rolf then
26717: LD_EXP 51
26721: PUSH
26722: LD_EXP 47
26726: DIFF
26727: IFFALSE 26747
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26729: LD_EXP 51
26733: PUSH
26734: LD_EXP 47
26738: DIFF
26739: PPUSH
26740: LD_STRING 06_RolfSquad
26742: PPUSH
26743: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26747: LD_ADDR_VAR 0 3
26751: PUSH
26752: LD_INT 17
26754: PPUSH
26755: LD_INT 21
26757: PUSH
26758: LD_INT 2
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PPUSH
26765: CALL_OW 70
26769: ST_TO_ADDR
// if tmp then
26770: LD_VAR 0 3
26774: IFFALSE 27068
// begin tmp2 := [ ] ;
26776: LD_ADDR_VAR 0 4
26780: PUSH
26781: EMPTY
26782: ST_TO_ADDR
// for i in tmp do
26783: LD_ADDR_VAR 0 2
26787: PUSH
26788: LD_VAR 0 3
26792: PUSH
26793: FOR_IN
26794: IFFALSE 27054
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26796: LD_VAR 0 2
26800: PPUSH
26801: CALL_OW 264
26805: PUSH
26806: LD_INT 32
26808: PUSH
26809: LD_INT 12
26811: PUSH
26812: LD_INT 51
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: LIST
26819: IN
26820: IFFALSE 26957
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26822: LD_ADDR_VAR 0 5
26826: PUSH
26827: LD_VAR 0 2
26831: PPUSH
26832: LD_INT 1
26834: PPUSH
26835: CALL_OW 289
26839: PUSH
26840: LD_VAR 0 2
26844: PPUSH
26845: LD_INT 2
26847: PPUSH
26848: CALL_OW 289
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26857: LD_ADDR_VAR 0 4
26861: PUSH
26862: LD_VAR 0 4
26866: PPUSH
26867: LD_VAR 0 4
26871: PUSH
26872: LD_INT 1
26874: PLUS
26875: PPUSH
26876: LD_VAR 0 2
26880: PPUSH
26881: CALL_OW 265
26885: PUSH
26886: LD_VAR 0 2
26890: PPUSH
26891: CALL_OW 262
26895: PUSH
26896: LD_VAR 0 2
26900: PPUSH
26901: CALL_OW 263
26905: PUSH
26906: LD_VAR 0 2
26910: PPUSH
26911: CALL_OW 264
26915: PUSH
26916: LD_VAR 0 2
26920: PPUSH
26921: CALL_OW 248
26925: PUSH
26926: LD_VAR 0 2
26930: PPUSH
26931: CALL_OW 256
26935: PUSH
26936: LD_VAR 0 5
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: PPUSH
26950: CALL_OW 1
26954: ST_TO_ADDR
// end else
26955: GO 27052
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26957: LD_ADDR_VAR 0 4
26961: PUSH
26962: LD_VAR 0 4
26966: PPUSH
26967: LD_VAR 0 4
26971: PUSH
26972: LD_INT 1
26974: PLUS
26975: PPUSH
26976: LD_VAR 0 2
26980: PPUSH
26981: CALL_OW 265
26985: PUSH
26986: LD_VAR 0 2
26990: PPUSH
26991: CALL_OW 262
26995: PUSH
26996: LD_VAR 0 2
27000: PPUSH
27001: CALL_OW 263
27005: PUSH
27006: LD_VAR 0 2
27010: PPUSH
27011: CALL_OW 264
27015: PUSH
27016: LD_VAR 0 2
27020: PPUSH
27021: CALL_OW 248
27025: PUSH
27026: LD_VAR 0 2
27030: PPUSH
27031: CALL_OW 256
27035: PUSH
27036: EMPTY
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: PPUSH
27047: CALL_OW 1
27051: ST_TO_ADDR
27052: GO 26793
27054: POP
27055: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27056: LD_VAR 0 4
27060: PPUSH
27061: LD_STRING 06_Vehicles
27063: PPUSH
27064: CALL_OW 39
// end ; YouWin ;
27068: CALL_OW 103
// end ; end_of_file
27072: LD_VAR 0 1
27076: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27077: LD_INT 0
27079: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27080: LD_VAR 0 1
27084: PPUSH
27085: LD_VAR 0 2
27089: PPUSH
27090: CALL 88451 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27094: LD_VAR 0 1
27098: PPUSH
27099: CALL_OW 255
27103: PUSH
27104: LD_INT 2
27106: EQUAL
27107: PUSH
27108: LD_OWVAR 52
27112: AND
27113: PUSH
27114: LD_VAR 0 1
27118: PPUSH
27119: CALL_OW 263
27123: PUSH
27124: LD_INT 1
27126: EQUAL
27127: AND
27128: IFFALSE 27183
// begin driver := IsDrivenBy ( vehicle ) ;
27130: LD_ADDR_VAR 0 3
27134: PUSH
27135: LD_VAR 0 1
27139: PPUSH
27140: CALL_OW 311
27144: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27145: LD_VAR 0 1
27149: PPUSH
27150: LD_INT 211
27152: PPUSH
27153: LD_INT 101
27155: PPUSH
27156: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27160: LD_VAR 0 3
27164: PPUSH
27165: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27169: LD_VAR 0 3
27173: PPUSH
27174: LD_VAR 0 2
27178: PPUSH
27179: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27183: LD_VAR 0 1
27187: PPUSH
27188: CALL_OW 255
27192: PUSH
27193: LD_INT 3
27195: EQUAL
27196: IFFALSE 27227
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27198: LD_ADDR_EXP 60
27202: PUSH
27203: LD_EXP 60
27207: PPUSH
27208: LD_EXP 60
27212: PUSH
27213: LD_INT 1
27215: PLUS
27216: PPUSH
27217: LD_VAR 0 1
27221: PPUSH
27222: CALL_OW 1
27226: ST_TO_ADDR
// end ;
27227: PPOPN 3
27229: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27230: LD_VAR 0 1
27234: PPUSH
27235: CALL_OW 255
27239: PUSH
27240: LD_INT 8
27242: EQUAL
27243: PUSH
27244: LD_VAR 0 1
27248: PPUSH
27249: CALL_OW 266
27253: PUSH
27254: LD_INT 4
27256: EQUAL
27257: AND
27258: IFFALSE 27269
// ComUpgrade ( b ) ;
27260: LD_VAR 0 1
27264: PPUSH
27265: CALL_OW 146
// end ;
27269: PPOPN 1
27271: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27272: LD_VAR 0 1
27276: PPUSH
27277: CALL 88393 0 1
// if un = Heike then
27281: LD_VAR 0 1
27285: PUSH
27286: LD_EXP 34
27290: EQUAL
27291: IFFALSE 27300
// YouLost ( Heike ) ;
27293: LD_STRING Heike
27295: PPUSH
27296: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
27300: LD_VAR 0 1
27304: PUSH
27305: LD_INT 22
27307: PUSH
27308: LD_INT 2
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 21
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 23
27327: PUSH
27328: LD_INT 2
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: PPUSH
27340: CALL_OW 69
27344: IN
27345: IFFALSE 27361
// heikeLoseCounter := heikeLoseCounter + 1 ;
27347: LD_ADDR_EXP 26
27351: PUSH
27352: LD_EXP 26
27356: PUSH
27357: LD_INT 1
27359: PLUS
27360: ST_TO_ADDR
// if un = arDepot then
27361: LD_VAR 0 1
27365: PUSH
27366: LD_EXP 48
27370: EQUAL
27371: IFFALSE 27380
// YouLost ( Base ) ;
27373: LD_STRING Base
27375: PPUSH
27376: CALL_OW 104
// if un = Rolf then
27380: LD_VAR 0 1
27384: PUSH
27385: LD_EXP 47
27389: EQUAL
27390: IFFALSE 27400
// rolfDied := true ;
27392: LD_ADDR_EXP 13
27396: PUSH
27397: LD_INT 1
27399: ST_TO_ADDR
// if un in rolfSquad then
27400: LD_VAR 0 1
27404: PUSH
27405: LD_EXP 51
27409: IN
27410: IFFALSE 27428
// rolfSquad := rolfSquad diff un ;
27412: LD_ADDR_EXP 51
27416: PUSH
27417: LD_EXP 51
27421: PUSH
27422: LD_VAR 0 1
27426: DIFF
27427: ST_TO_ADDR
// if un in omarSquad then
27428: LD_VAR 0 1
27432: PUSH
27433: LD_EXP 52
27437: IN
27438: IFFALSE 27456
// omarSquad := omarSquad diff un ;
27440: LD_ADDR_EXP 52
27444: PUSH
27445: LD_EXP 52
27449: PUSH
27450: LD_VAR 0 1
27454: DIFF
27455: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27456: LD_VAR 0 1
27460: PPUSH
27461: CALL_OW 255
27465: PUSH
27466: LD_INT 3
27468: EQUAL
27469: IFFALSE 27485
// ruLoseCounter := ruLoseCounter + 1 ;
27471: LD_ADDR_EXP 5
27475: PUSH
27476: LD_EXP 5
27480: PUSH
27481: LD_INT 1
27483: PLUS
27484: ST_TO_ADDR
// if un in ruAttackers then
27485: LD_VAR 0 1
27489: PUSH
27490: LD_EXP 61
27494: IN
27495: IFFALSE 27513
// ruAttackers := ruAttackers diff un ;
27497: LD_ADDR_EXP 61
27501: PUSH
27502: LD_EXP 61
27506: PUSH
27507: LD_VAR 0 1
27511: DIFF
27512: ST_TO_ADDR
// end ;
27513: PPOPN 1
27515: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
27516: LD_VAR 0 2
27520: PPUSH
27521: CALL_OW 255
27525: PUSH
27526: LD_INT 5
27528: PUSH
27529: LD_INT 8
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: IN
27536: PUSH
27537: LD_VAR 0 2
27541: PPUSH
27542: CALL_OW 256
27546: PUSH
27547: LD_INT 1000
27549: LESS
27550: AND
27551: IFFALSE 27565
// SetLives ( unit , 1000 ) ;
27553: LD_VAR 0 2
27557: PPUSH
27558: LD_INT 1000
27560: PPUSH
27561: CALL_OW 234
// end ;
27565: PPOPN 2
27567: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27568: LD_INT 0
27570: PPUSH
27571: PPUSH
27572: PPUSH
27573: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27574: LD_VAR 0 2
27578: PPUSH
27579: CALL_OW 255
27583: PUSH
27584: LD_INT 8
27586: EQUAL
27587: PUSH
27588: LD_EXP 32
27592: AND
27593: IFFALSE 27610
// ComMoveXY ( un , 221 , 161 ) ;
27595: LD_VAR 0 1
27599: PPUSH
27600: LD_INT 221
27602: PPUSH
27603: LD_INT 161
27605: PPUSH
27606: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27610: LD_VAR 0 2
27614: PPUSH
27615: CALL_OW 255
27619: PUSH
27620: LD_INT 5
27622: EQUAL
27623: PUSH
27624: LD_EXP 23
27628: AND
27629: IFFALSE 27738
// begin ComMoveXY ( un , 333 , 233 ) ;
27631: LD_VAR 0 1
27635: PPUSH
27636: LD_INT 333
27638: PPUSH
27639: LD_INT 233
27641: PPUSH
27642: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27646: LD_INT 334
27648: PPUSH
27649: LD_INT 241
27651: PPUSH
27652: CALL_OW 428
27656: NOT
27657: PUSH
27658: LD_INT 334
27660: PPUSH
27661: LD_INT 241
27663: PPUSH
27664: CALL_OW 428
27668: PPUSH
27669: CALL_OW 266
27673: PUSH
27674: LD_INT 4
27676: EQUAL
27677: NOT
27678: OR
27679: IFFALSE 27683
// exit ;
27681: GO 28263
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27683: LD_VAR 0 1
27687: PPUSH
27688: LD_INT 334
27690: PPUSH
27691: LD_INT 241
27693: PPUSH
27694: CALL_OW 428
27698: PPUSH
27699: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27703: LD_VAR 0 1
27707: PPUSH
27708: LD_INT 1
27710: PPUSH
27711: CALL_OW 183
// AddComExitBuilding ( un ) ;
27715: LD_VAR 0 1
27719: PPUSH
27720: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27724: LD_VAR 0 1
27728: PPUSH
27729: LD_EXP 44
27733: PPUSH
27734: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27738: LD_VAR 0 1
27742: PPUSH
27743: CALL_OW 255
27747: PUSH
27748: LD_INT 3
27750: EQUAL
27751: PUSH
27752: LD_VAR 0 1
27756: PUSH
27757: LD_EXP 61
27761: IN
27762: NOT
27763: AND
27764: IFFALSE 28263
// begin if not IsInArea ( un , ruMainBase ) then
27766: LD_VAR 0 1
27770: PPUSH
27771: LD_INT 10
27773: PPUSH
27774: CALL_OW 308
27778: NOT
27779: IFFALSE 27796
// ComMoveXY ( un , 62 , 98 ) ;
27781: LD_VAR 0 1
27785: PPUSH
27786: LD_INT 62
27788: PPUSH
27789: LD_INT 98
27791: PPUSH
27792: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27796: LD_INT 35
27798: PPUSH
27799: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27803: LD_VAR 0 1
27807: PPUSH
27808: CALL_OW 302
27812: NOT
27813: PUSH
27814: LD_VAR 0 1
27818: PPUSH
27819: LD_INT 10
27821: PPUSH
27822: CALL_OW 308
27826: OR
27827: IFFALSE 27796
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27829: LD_ADDR_EXP 59
27833: PUSH
27834: LD_EXP 59
27838: PPUSH
27839: LD_EXP 59
27843: PUSH
27844: LD_INT 1
27846: PLUS
27847: PPUSH
27848: LD_VAR 0 1
27852: PPUSH
27853: CALL_OW 1
27857: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27858: LD_ADDR_VAR 0 8
27862: PUSH
27863: LD_INT 72
27865: PUSH
27866: LD_INT 12
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: ST_TO_ADDR
// if tmp then
27873: LD_VAR 0 8
27877: IFFALSE 27992
// for i in tmp do
27879: LD_ADDR_VAR 0 5
27883: PUSH
27884: LD_VAR 0 8
27888: PUSH
27889: FOR_IN
27890: IFFALSE 27990
// if UnitsInside ( i ) < 6 then
27892: LD_VAR 0 5
27896: PPUSH
27897: CALL_OW 313
27901: PUSH
27902: LD_INT 6
27904: LESS
27905: IFFALSE 27988
// begin AddComEnterUnit ( un , i ) ;
27907: LD_VAR 0 1
27911: PPUSH
27912: LD_VAR 0 5
27916: PPUSH
27917: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27921: LD_VAR 0 8
27925: PPUSH
27926: LD_INT 22
27928: PUSH
27929: LD_INT 23
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: PPUSH
27939: LD_INT 2
27941: PPUSH
27942: CALL_OW 12
27946: ARRAY
27947: PPUSH
27948: LD_INT 1
27950: PPUSH
27951: LD_INT 1
27953: PPUSH
27954: LD_INT 44
27956: PUSH
27957: LD_INT 46
27959: PUSH
27960: LD_INT 47
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: PPUSH
27971: LD_INT 3
27973: PPUSH
27974: CALL_OW 12
27978: ARRAY
27979: PPUSH
27980: CALL_OW 185
// exit ;
27984: POP
27985: POP
27986: GO 28263
// end ;
27988: GO 27889
27990: POP
27991: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27992: LD_ADDR_VAR 0 8
27996: PUSH
27997: LD_INT 10
27999: PPUSH
28000: LD_INT 22
28002: PUSH
28003: LD_INT 3
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 50
28012: PUSH
28013: EMPTY
28014: LIST
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: LD_INT 30
28021: PUSH
28022: LD_INT 4
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 30
28031: PUSH
28032: LD_INT 5
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 30
28041: PUSH
28042: LD_INT 32
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 30
28051: PUSH
28052: LD_INT 31
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: LIST
28070: PPUSH
28071: CALL_OW 70
28075: ST_TO_ADDR
// if not tmp then
28076: LD_VAR 0 8
28080: NOT
28081: IFFALSE 28100
// begin ComMoveXY ( un , 83 , 133 ) ;
28083: LD_VAR 0 1
28087: PPUSH
28088: LD_INT 83
28090: PPUSH
28091: LD_INT 133
28093: PPUSH
28094: CALL_OW 111
// exit ;
28098: GO 28263
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28100: LD_ADDR_VAR 0 6
28104: PUSH
28105: LD_VAR 0 1
28109: PPUSH
28110: LD_VAR 0 8
28114: PPUSH
28115: LD_INT 1
28117: PPUSH
28118: LD_INT 1
28120: PPUSH
28121: CALL 34879 0 4
28125: PUSH
28126: FOR_IN
28127: IFFALSE 28261
// begin case GetBType ( b ) of b_armoury , b_barracks :
28129: LD_VAR 0 6
28133: PPUSH
28134: CALL_OW 266
28138: PUSH
28139: LD_INT 4
28141: DOUBLE
28142: EQUAL
28143: IFTRUE 28153
28145: LD_INT 5
28147: DOUBLE
28148: EQUAL
28149: IFTRUE 28153
28151: GO 28164
28153: POP
// p := 6 ; b_breastwork , b_bunker :
28154: LD_ADDR_VAR 0 7
28158: PUSH
28159: LD_INT 6
28161: ST_TO_ADDR
28162: GO 28190
28164: LD_INT 31
28166: DOUBLE
28167: EQUAL
28168: IFTRUE 28178
28170: LD_INT 32
28172: DOUBLE
28173: EQUAL
28174: IFTRUE 28178
28176: GO 28189
28178: POP
// p := 1 ; end ;
28179: LD_ADDR_VAR 0 7
28183: PUSH
28184: LD_INT 1
28186: ST_TO_ADDR
28187: GO 28190
28189: POP
// if UnitsInside ( b ) < p then
28190: LD_VAR 0 6
28194: PPUSH
28195: CALL_OW 313
28199: PUSH
28200: LD_VAR 0 7
28204: LESS
28205: IFFALSE 28259
// begin ComEnterUnit ( un , b ) ;
28207: LD_VAR 0 1
28211: PPUSH
28212: LD_VAR 0 6
28216: PPUSH
28217: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28221: LD_VAR 0 6
28225: PPUSH
28226: CALL_OW 266
28230: PUSH
28231: LD_INT 4
28233: PUSH
28234: LD_INT 5
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: IN
28241: IFFALSE 28255
// AddComChangeProfession ( un , class_soldier ) ;
28243: LD_VAR 0 1
28247: PPUSH
28248: LD_INT 1
28250: PPUSH
28251: CALL_OW 183
// exit ;
28255: POP
28256: POP
28257: GO 28263
// end ; end ;
28259: GO 28126
28261: POP
28262: POP
// end ; end ;
28263: PPOPN 8
28265: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28266: LD_INT 0
28268: PPUSH
28269: PPUSH
28270: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28271: LD_VAR 0 2
28275: PPUSH
28276: CALL_OW 255
28280: PUSH
28281: LD_INT 3
28283: EQUAL
28284: PUSH
28285: LD_VAR 0 2
28289: PPUSH
28290: CALL_OW 257
28294: PUSH
28295: LD_INT 1
28297: EQUAL
28298: AND
28299: PUSH
28300: LD_VAR 0 2
28304: PUSH
28305: LD_EXP 59
28309: IN
28310: NOT
28311: AND
28312: IFFALSE 28625
// begin ComMoveToArea ( un , ruMainBase ) ;
28314: LD_VAR 0 2
28318: PPUSH
28319: LD_INT 10
28321: PPUSH
28322: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28326: LD_INT 35
28328: PPUSH
28329: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28333: LD_VAR 0 2
28337: PPUSH
28338: CALL_OW 302
28342: NOT
28343: PUSH
28344: LD_VAR 0 2
28348: PPUSH
28349: LD_INT 10
28351: PPUSH
28352: CALL_OW 308
28356: OR
28357: IFFALSE 28326
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28359: LD_ADDR_EXP 59
28363: PUSH
28364: LD_EXP 59
28368: PPUSH
28369: LD_EXP 59
28373: PUSH
28374: LD_INT 1
28376: PLUS
28377: PPUSH
28378: LD_VAR 0 2
28382: PPUSH
28383: CALL_OW 1
28387: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28388: LD_ADDR_VAR 0 4
28392: PUSH
28393: LD_INT 10
28395: PPUSH
28396: LD_INT 22
28398: PUSH
28399: LD_INT 3
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 50
28408: PUSH
28409: EMPTY
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: PUSH
28415: LD_INT 30
28417: PUSH
28418: LD_INT 4
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 30
28427: PUSH
28428: LD_INT 5
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 30
28437: PUSH
28438: LD_INT 32
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 30
28447: PUSH
28448: LD_INT 31
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: LIST
28466: PPUSH
28467: CALL_OW 70
28471: ST_TO_ADDR
// if not tmp then
28472: LD_VAR 0 4
28476: NOT
28477: IFFALSE 28496
// begin ComMoveXY ( un , 83 , 133 ) ;
28479: LD_VAR 0 2
28483: PPUSH
28484: LD_INT 83
28486: PPUSH
28487: LD_INT 133
28489: PPUSH
28490: CALL_OW 111
// exit ;
28494: GO 28874
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28496: LD_ADDR_VAR 0 5
28500: PUSH
28501: LD_VAR 0 2
28505: PPUSH
28506: LD_VAR 0 4
28510: PPUSH
28511: LD_INT 1
28513: PPUSH
28514: LD_INT 1
28516: PPUSH
28517: CALL 34879 0 4
28521: PUSH
28522: FOR_IN
28523: IFFALSE 28623
// begin case GetBType ( b ) of b_armoury , b_barracks :
28525: LD_VAR 0 5
28529: PPUSH
28530: CALL_OW 266
28534: PUSH
28535: LD_INT 4
28537: DOUBLE
28538: EQUAL
28539: IFTRUE 28549
28541: LD_INT 5
28543: DOUBLE
28544: EQUAL
28545: IFTRUE 28549
28547: GO 28560
28549: POP
// p := 6 ; b_breastwork , b_bunker :
28550: LD_ADDR_VAR 0 3
28554: PUSH
28555: LD_INT 6
28557: ST_TO_ADDR
28558: GO 28586
28560: LD_INT 31
28562: DOUBLE
28563: EQUAL
28564: IFTRUE 28574
28566: LD_INT 32
28568: DOUBLE
28569: EQUAL
28570: IFTRUE 28574
28572: GO 28585
28574: POP
// p := 1 ; end ;
28575: LD_ADDR_VAR 0 3
28579: PUSH
28580: LD_INT 1
28582: ST_TO_ADDR
28583: GO 28586
28585: POP
// if UnitsInside ( b ) < p then
28586: LD_VAR 0 5
28590: PPUSH
28591: CALL_OW 313
28595: PUSH
28596: LD_VAR 0 3
28600: LESS
28601: IFFALSE 28621
// begin ComEnterUnit ( un , b ) ;
28603: LD_VAR 0 2
28607: PPUSH
28608: LD_VAR 0 5
28612: PPUSH
28613: CALL_OW 120
// exit ;
28617: POP
28618: POP
28619: GO 28874
// end ; end ;
28621: GO 28522
28623: POP
28624: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28625: LD_VAR 0 2
28629: PUSH
28630: LD_EXP 59
28634: IN
28635: PUSH
28636: LD_VAR 0 2
28640: PPUSH
28641: CALL_OW 257
28645: PUSH
28646: LD_INT 1
28648: EQUAL
28649: AND
28650: IFFALSE 28874
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28652: LD_ADDR_VAR 0 4
28656: PUSH
28657: LD_INT 10
28659: PPUSH
28660: LD_INT 22
28662: PUSH
28663: LD_INT 3
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 50
28672: PUSH
28673: EMPTY
28674: LIST
28675: PUSH
28676: LD_INT 2
28678: PUSH
28679: LD_INT 30
28681: PUSH
28682: LD_INT 4
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 30
28691: PUSH
28692: LD_INT 5
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 30
28701: PUSH
28702: LD_INT 32
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 30
28711: PUSH
28712: LD_INT 31
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: LIST
28730: PPUSH
28731: CALL_OW 70
28735: ST_TO_ADDR
// if not tmp then
28736: LD_VAR 0 4
28740: NOT
28741: IFFALSE 28745
// exit ;
28743: GO 28874
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28745: LD_ADDR_VAR 0 5
28749: PUSH
28750: LD_VAR 0 2
28754: PPUSH
28755: LD_VAR 0 4
28759: PPUSH
28760: LD_INT 1
28762: PPUSH
28763: LD_INT 1
28765: PPUSH
28766: CALL 34879 0 4
28770: PUSH
28771: FOR_IN
28772: IFFALSE 28872
// begin case GetBType ( b ) of b_armoury , b_barracks :
28774: LD_VAR 0 5
28778: PPUSH
28779: CALL_OW 266
28783: PUSH
28784: LD_INT 4
28786: DOUBLE
28787: EQUAL
28788: IFTRUE 28798
28790: LD_INT 5
28792: DOUBLE
28793: EQUAL
28794: IFTRUE 28798
28796: GO 28809
28798: POP
// p := 6 ; b_breastwork , b_bunker :
28799: LD_ADDR_VAR 0 3
28803: PUSH
28804: LD_INT 6
28806: ST_TO_ADDR
28807: GO 28835
28809: LD_INT 31
28811: DOUBLE
28812: EQUAL
28813: IFTRUE 28823
28815: LD_INT 32
28817: DOUBLE
28818: EQUAL
28819: IFTRUE 28823
28821: GO 28834
28823: POP
// p := 1 ; end ;
28824: LD_ADDR_VAR 0 3
28828: PUSH
28829: LD_INT 1
28831: ST_TO_ADDR
28832: GO 28835
28834: POP
// if UnitsInside ( b ) < p then
28835: LD_VAR 0 5
28839: PPUSH
28840: CALL_OW 313
28844: PUSH
28845: LD_VAR 0 3
28849: LESS
28850: IFFALSE 28870
// begin ComEnterUnit ( un , b ) ;
28852: LD_VAR 0 2
28856: PPUSH
28857: LD_VAR 0 5
28861: PPUSH
28862: CALL_OW 120
// exit ;
28866: POP
28867: POP
28868: GO 28874
// end ; end ;
28870: GO 28771
28872: POP
28873: POP
// end ; end ;
28874: PPOPN 5
28876: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28877: LD_VAR 0 1
28881: PUSH
28882: LD_INT 2
28884: EQUAL
28885: PUSH
28886: LD_VAR 0 2
28890: PUSH
28891: LD_INT 5
28893: PUSH
28894: LD_INT 8
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: IN
28901: AND
28902: IFFALSE 28911
// YouLost ( FriendlyFire ) ;
28904: LD_STRING FriendlyFire
28906: PPUSH
28907: CALL_OW 104
// end ;
28911: PPOPN 2
28913: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28914: LD_VAR 0 1
28918: PPUSH
28919: CALL_OW 255
28923: PUSH
28924: LD_INT 8
28926: EQUAL
28927: PUSH
28928: LD_VAR 0 1
28932: PPUSH
28933: CALL_OW 266
28937: PUSH
28938: LD_INT 5
28940: EQUAL
28941: AND
28942: IFFALSE 28956
// SetClass ( unit , class_mortar ) ;
28944: LD_VAR 0 2
28948: PPUSH
28949: LD_INT 8
28951: PPUSH
28952: CALL_OW 336
// end ; end_of_file
28956: PPOPN 2
28958: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
28959: LD_INT 6
28961: PPUSH
28962: LD_INT 1
28964: PPUSH
28965: CALL_OW 287
28969: PUSH
28970: LD_INT 20
28972: PUSH
28973: LD_INT 18
28975: PUSH
28976: LD_INT 16
28978: PUSH
28979: LD_INT 12
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: PUSH
28988: LD_OWVAR 67
28992: ARRAY
28993: LESS
28994: IFFALSE 29021
28996: GO 28998
28998: DISABLE
// begin enable ;
28999: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
29000: LD_INT 1
29002: PPUSH
29003: LD_INT 5
29005: PPUSH
29006: CALL_OW 12
29010: PPUSH
29011: LD_INT 6
29013: PPUSH
29014: LD_INT 1
29016: PPUSH
29017: CALL_OW 55
// end ;
29021: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
29022: LD_INT 50
29024: PPUSH
29025: CALL_OW 13
29029: PUSH
29030: LD_OWVAR 1
29034: PUSH
29035: LD_INT 58800
29037: PUSH
29038: LD_INT 56700
29040: PUSH
29041: LD_INT 54600
29043: PUSH
29044: LD_INT 52500
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: PUSH
29053: LD_OWVAR 67
29057: ARRAY
29058: LESS
29059: AND
29060: PUSH
29061: LD_INT 21
29063: PPUSH
29064: LD_INT 1
29066: PPUSH
29067: CALL_OW 287
29071: PUSH
29072: LD_INT 10
29074: LESS
29075: AND
29076: IFFALSE 29118
29078: GO 29080
29080: DISABLE
// begin enable ;
29081: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29082: LD_INT 35
29084: PPUSH
29085: LD_INT 350
29087: PPUSH
29088: CALL_OW 12
29092: PPUSH
29093: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29097: LD_INT 1
29099: PPUSH
29100: LD_INT 5
29102: PPUSH
29103: CALL_OW 12
29107: PPUSH
29108: LD_INT 21
29110: PPUSH
29111: LD_INT 1
29113: PPUSH
29114: CALL_OW 55
// end ; end_of_file
29118: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29119: LD_EXP 18
29123: PUSH
29124: LD_EXP 20
29128: AND
29129: PUSH
29130: LD_EXP 17
29134: PUSH
29135: LD_EXP 19
29139: AND
29140: OR
29141: IFFALSE 29460
29143: GO 29145
29145: DISABLE
// begin enable ;
29146: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29147: LD_EXP 18
29151: PUSH
29152: LD_EXP 20
29156: AND
29157: PUSH
29158: LD_EXP 17
29162: PUSH
29163: LD_EXP 19
29167: AND
29168: AND
29169: IFFALSE 29306
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29171: LD_ADDR_OWVAR 47
29175: PUSH
29176: LD_STRING #X106-1a
29178: PUSH
29179: LD_EXP 21
29183: PUSH
29184: LD_INT 16
29186: PPUSH
29187: LD_INT 22
29189: PUSH
29190: LD_INT 2
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 21
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 33
29209: PUSH
29210: LD_INT 1
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 58
29219: PUSH
29220: EMPTY
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: PPUSH
29229: CALL_OW 70
29233: MINUS
29234: PPUSH
29235: CALL 69385 0 1
29239: PUSH
29240: LD_STRING #X106-3a
29242: PUSH
29243: LD_EXP 20
29247: PUSH
29248: LD_STRING #X106-1
29250: PUSH
29251: LD_EXP 51
29255: PUSH
29256: LD_INT 0
29258: PLUS
29259: PUSH
29260: LD_EXP 51
29264: PPUSH
29265: LD_INT 55
29267: PUSH
29268: EMPTY
29269: LIST
29270: PPUSH
29271: CALL_OW 72
29275: PUSH
29276: LD_INT 0
29278: PLUS
29279: MINUS
29280: PPUSH
29281: CALL 69385 0 1
29285: PUSH
29286: LD_STRING #X106-3
29288: PUSH
29289: LD_EXP 19
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
// end else
29304: GO 29460
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29306: LD_EXP 18
29310: PUSH
29311: LD_EXP 20
29315: AND
29316: IFFALSE 29403
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29318: LD_ADDR_OWVAR 47
29322: PUSH
29323: LD_STRING #X106-1a
29325: PUSH
29326: LD_EXP 21
29330: PUSH
29331: LD_INT 16
29333: PPUSH
29334: LD_INT 22
29336: PUSH
29337: LD_INT 2
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 21
29346: PUSH
29347: LD_INT 2
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 33
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 58
29366: PUSH
29367: EMPTY
29368: LIST
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: PPUSH
29376: CALL_OW 70
29380: MINUS
29381: PPUSH
29382: CALL 69385 0 1
29386: PUSH
29387: LD_STRING #X106-3a
29389: PUSH
29390: LD_EXP 20
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// end else
29401: GO 29460
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29403: LD_ADDR_OWVAR 47
29407: PUSH
29408: LD_STRING #X106-1
29410: PUSH
29411: LD_EXP 51
29415: PUSH
29416: LD_INT 0
29418: PLUS
29419: PUSH
29420: LD_EXP 51
29424: PPUSH
29425: LD_INT 55
29427: PUSH
29428: EMPTY
29429: LIST
29430: PPUSH
29431: CALL_OW 72
29435: PUSH
29436: LD_INT 0
29438: PLUS
29439: MINUS
29440: PPUSH
29441: CALL 69385 0 1
29445: PUSH
29446: LD_STRING #X106-3
29448: PUSH
29449: LD_EXP 19
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: ST_TO_ADDR
// end ; end ; end_of_file
29460: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29461: LD_INT 0
29463: PPUSH
29464: PPUSH
// if exist_mode then
29465: LD_VAR 0 2
29469: IFFALSE 29515
// begin unit := CreateCharacter ( prefix & ident ) ;
29471: LD_ADDR_VAR 0 5
29475: PUSH
29476: LD_VAR 0 3
29480: PUSH
29481: LD_VAR 0 1
29485: STR
29486: PPUSH
29487: CALL_OW 34
29491: ST_TO_ADDR
// if unit then
29492: LD_VAR 0 5
29496: IFFALSE 29513
// DeleteCharacters ( prefix & ident ) ;
29498: LD_VAR 0 3
29502: PUSH
29503: LD_VAR 0 1
29507: STR
29508: PPUSH
29509: CALL_OW 40
// end else
29513: GO 29530
// unit := NewCharacter ( ident ) ;
29515: LD_ADDR_VAR 0 5
29519: PUSH
29520: LD_VAR 0 1
29524: PPUSH
29525: CALL_OW 25
29529: ST_TO_ADDR
// result := unit ;
29530: LD_ADDR_VAR 0 4
29534: PUSH
29535: LD_VAR 0 5
29539: ST_TO_ADDR
// end ;
29540: LD_VAR 0 4
29544: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29545: LD_INT 0
29547: PPUSH
29548: PPUSH
// if not side or not nation then
29549: LD_VAR 0 1
29553: NOT
29554: PUSH
29555: LD_VAR 0 2
29559: NOT
29560: OR
29561: IFFALSE 29565
// exit ;
29563: GO 30333
// case nation of nation_american :
29565: LD_VAR 0 2
29569: PUSH
29570: LD_INT 1
29572: DOUBLE
29573: EQUAL
29574: IFTRUE 29578
29576: GO 29792
29578: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29579: LD_ADDR_VAR 0 4
29583: PUSH
29584: LD_INT 35
29586: PUSH
29587: LD_INT 45
29589: PUSH
29590: LD_INT 46
29592: PUSH
29593: LD_INT 47
29595: PUSH
29596: LD_INT 82
29598: PUSH
29599: LD_INT 83
29601: PUSH
29602: LD_INT 84
29604: PUSH
29605: LD_INT 85
29607: PUSH
29608: LD_INT 86
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: LD_INT 6
29619: PUSH
29620: LD_INT 15
29622: PUSH
29623: LD_INT 16
29625: PUSH
29626: LD_INT 7
29628: PUSH
29629: LD_INT 12
29631: PUSH
29632: LD_INT 13
29634: PUSH
29635: LD_INT 10
29637: PUSH
29638: LD_INT 14
29640: PUSH
29641: LD_INT 20
29643: PUSH
29644: LD_INT 21
29646: PUSH
29647: LD_INT 22
29649: PUSH
29650: LD_INT 25
29652: PUSH
29653: LD_INT 32
29655: PUSH
29656: LD_INT 27
29658: PUSH
29659: LD_INT 36
29661: PUSH
29662: LD_INT 69
29664: PUSH
29665: LD_INT 39
29667: PUSH
29668: LD_INT 34
29670: PUSH
29671: LD_INT 40
29673: PUSH
29674: LD_INT 48
29676: PUSH
29677: LD_INT 49
29679: PUSH
29680: LD_INT 50
29682: PUSH
29683: LD_INT 51
29685: PUSH
29686: LD_INT 52
29688: PUSH
29689: LD_INT 53
29691: PUSH
29692: LD_INT 54
29694: PUSH
29695: LD_INT 55
29697: PUSH
29698: LD_INT 56
29700: PUSH
29701: LD_INT 57
29703: PUSH
29704: LD_INT 58
29706: PUSH
29707: LD_INT 59
29709: PUSH
29710: LD_INT 60
29712: PUSH
29713: LD_INT 61
29715: PUSH
29716: LD_INT 62
29718: PUSH
29719: LD_INT 80
29721: PUSH
29722: LD_INT 82
29724: PUSH
29725: LD_INT 83
29727: PUSH
29728: LD_INT 84
29730: PUSH
29731: LD_INT 85
29733: PUSH
29734: LD_INT 86
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: ST_TO_ADDR
29790: GO 30257
29792: LD_INT 2
29794: DOUBLE
29795: EQUAL
29796: IFTRUE 29800
29798: GO 30026
29800: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29801: LD_ADDR_VAR 0 4
29805: PUSH
29806: LD_INT 35
29808: PUSH
29809: LD_INT 45
29811: PUSH
29812: LD_INT 46
29814: PUSH
29815: LD_INT 47
29817: PUSH
29818: LD_INT 82
29820: PUSH
29821: LD_INT 83
29823: PUSH
29824: LD_INT 84
29826: PUSH
29827: LD_INT 85
29829: PUSH
29830: LD_INT 87
29832: PUSH
29833: LD_INT 70
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: LD_INT 11
29841: PUSH
29842: LD_INT 3
29844: PUSH
29845: LD_INT 4
29847: PUSH
29848: LD_INT 5
29850: PUSH
29851: LD_INT 6
29853: PUSH
29854: LD_INT 15
29856: PUSH
29857: LD_INT 18
29859: PUSH
29860: LD_INT 7
29862: PUSH
29863: LD_INT 17
29865: PUSH
29866: LD_INT 8
29868: PUSH
29869: LD_INT 20
29871: PUSH
29872: LD_INT 21
29874: PUSH
29875: LD_INT 22
29877: PUSH
29878: LD_INT 72
29880: PUSH
29881: LD_INT 26
29883: PUSH
29884: LD_INT 69
29886: PUSH
29887: LD_INT 39
29889: PUSH
29890: LD_INT 40
29892: PUSH
29893: LD_INT 41
29895: PUSH
29896: LD_INT 42
29898: PUSH
29899: LD_INT 43
29901: PUSH
29902: LD_INT 48
29904: PUSH
29905: LD_INT 49
29907: PUSH
29908: LD_INT 50
29910: PUSH
29911: LD_INT 51
29913: PUSH
29914: LD_INT 52
29916: PUSH
29917: LD_INT 53
29919: PUSH
29920: LD_INT 54
29922: PUSH
29923: LD_INT 55
29925: PUSH
29926: LD_INT 56
29928: PUSH
29929: LD_INT 60
29931: PUSH
29932: LD_INT 61
29934: PUSH
29935: LD_INT 62
29937: PUSH
29938: LD_INT 66
29940: PUSH
29941: LD_INT 67
29943: PUSH
29944: LD_INT 68
29946: PUSH
29947: LD_INT 81
29949: PUSH
29950: LD_INT 82
29952: PUSH
29953: LD_INT 83
29955: PUSH
29956: LD_INT 84
29958: PUSH
29959: LD_INT 85
29961: PUSH
29962: LD_INT 87
29964: PUSH
29965: LD_INT 88
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: ST_TO_ADDR
30024: GO 30257
30026: LD_INT 3
30028: DOUBLE
30029: EQUAL
30030: IFTRUE 30034
30032: GO 30256
30034: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30035: LD_ADDR_VAR 0 4
30039: PUSH
30040: LD_INT 46
30042: PUSH
30043: LD_INT 47
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: LD_INT 2
30051: PUSH
30052: LD_INT 82
30054: PUSH
30055: LD_INT 83
30057: PUSH
30058: LD_INT 84
30060: PUSH
30061: LD_INT 85
30063: PUSH
30064: LD_INT 86
30066: PUSH
30067: LD_INT 11
30069: PUSH
30070: LD_INT 9
30072: PUSH
30073: LD_INT 20
30075: PUSH
30076: LD_INT 19
30078: PUSH
30079: LD_INT 21
30081: PUSH
30082: LD_INT 24
30084: PUSH
30085: LD_INT 22
30087: PUSH
30088: LD_INT 25
30090: PUSH
30091: LD_INT 28
30093: PUSH
30094: LD_INT 29
30096: PUSH
30097: LD_INT 30
30099: PUSH
30100: LD_INT 31
30102: PUSH
30103: LD_INT 37
30105: PUSH
30106: LD_INT 38
30108: PUSH
30109: LD_INT 32
30111: PUSH
30112: LD_INT 27
30114: PUSH
30115: LD_INT 33
30117: PUSH
30118: LD_INT 69
30120: PUSH
30121: LD_INT 39
30123: PUSH
30124: LD_INT 34
30126: PUSH
30127: LD_INT 40
30129: PUSH
30130: LD_INT 71
30132: PUSH
30133: LD_INT 23
30135: PUSH
30136: LD_INT 44
30138: PUSH
30139: LD_INT 48
30141: PUSH
30142: LD_INT 49
30144: PUSH
30145: LD_INT 50
30147: PUSH
30148: LD_INT 51
30150: PUSH
30151: LD_INT 52
30153: PUSH
30154: LD_INT 53
30156: PUSH
30157: LD_INT 54
30159: PUSH
30160: LD_INT 55
30162: PUSH
30163: LD_INT 56
30165: PUSH
30166: LD_INT 57
30168: PUSH
30169: LD_INT 58
30171: PUSH
30172: LD_INT 59
30174: PUSH
30175: LD_INT 63
30177: PUSH
30178: LD_INT 64
30180: PUSH
30181: LD_INT 65
30183: PUSH
30184: LD_INT 82
30186: PUSH
30187: LD_INT 83
30189: PUSH
30190: LD_INT 84
30192: PUSH
30193: LD_INT 85
30195: PUSH
30196: LD_INT 86
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: ST_TO_ADDR
30254: GO 30257
30256: POP
// if state > - 1 and state < 3 then
30257: LD_VAR 0 3
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: GREATER
30266: PUSH
30267: LD_VAR 0 3
30271: PUSH
30272: LD_INT 3
30274: LESS
30275: AND
30276: IFFALSE 30333
// for i in result do
30278: LD_ADDR_VAR 0 5
30282: PUSH
30283: LD_VAR 0 4
30287: PUSH
30288: FOR_IN
30289: IFFALSE 30331
// if GetTech ( i , side ) <> state then
30291: LD_VAR 0 5
30295: PPUSH
30296: LD_VAR 0 1
30300: PPUSH
30301: CALL_OW 321
30305: PUSH
30306: LD_VAR 0 3
30310: NONEQUAL
30311: IFFALSE 30329
// result := result diff i ;
30313: LD_ADDR_VAR 0 4
30317: PUSH
30318: LD_VAR 0 4
30322: PUSH
30323: LD_VAR 0 5
30327: DIFF
30328: ST_TO_ADDR
30329: GO 30288
30331: POP
30332: POP
// end ;
30333: LD_VAR 0 4
30337: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30338: LD_INT 0
30340: PPUSH
30341: PPUSH
30342: PPUSH
// result := true ;
30343: LD_ADDR_VAR 0 3
30347: PUSH
30348: LD_INT 1
30350: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30351: LD_ADDR_VAR 0 5
30355: PUSH
30356: LD_VAR 0 2
30360: PPUSH
30361: CALL_OW 480
30365: ST_TO_ADDR
// if not tmp then
30366: LD_VAR 0 5
30370: NOT
30371: IFFALSE 30375
// exit ;
30373: GO 30424
// for i in tmp do
30375: LD_ADDR_VAR 0 4
30379: PUSH
30380: LD_VAR 0 5
30384: PUSH
30385: FOR_IN
30386: IFFALSE 30422
// if GetTech ( i , side ) <> state_researched then
30388: LD_VAR 0 4
30392: PPUSH
30393: LD_VAR 0 1
30397: PPUSH
30398: CALL_OW 321
30402: PUSH
30403: LD_INT 2
30405: NONEQUAL
30406: IFFALSE 30420
// begin result := false ;
30408: LD_ADDR_VAR 0 3
30412: PUSH
30413: LD_INT 0
30415: ST_TO_ADDR
// exit ;
30416: POP
30417: POP
30418: GO 30424
// end ;
30420: GO 30385
30422: POP
30423: POP
// end ;
30424: LD_VAR 0 3
30428: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30429: LD_INT 0
30431: PPUSH
30432: PPUSH
30433: PPUSH
30434: PPUSH
30435: PPUSH
30436: PPUSH
30437: PPUSH
30438: PPUSH
30439: PPUSH
30440: PPUSH
30441: PPUSH
30442: PPUSH
30443: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30444: LD_VAR 0 1
30448: NOT
30449: PUSH
30450: LD_VAR 0 1
30454: PPUSH
30455: CALL_OW 257
30459: PUSH
30460: LD_INT 9
30462: NONEQUAL
30463: OR
30464: IFFALSE 30468
// exit ;
30466: GO 31041
// side := GetSide ( unit ) ;
30468: LD_ADDR_VAR 0 9
30472: PUSH
30473: LD_VAR 0 1
30477: PPUSH
30478: CALL_OW 255
30482: ST_TO_ADDR
// tech_space := tech_spacanom ;
30483: LD_ADDR_VAR 0 12
30487: PUSH
30488: LD_INT 29
30490: ST_TO_ADDR
// tech_time := tech_taurad ;
30491: LD_ADDR_VAR 0 13
30495: PUSH
30496: LD_INT 28
30498: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30499: LD_ADDR_VAR 0 11
30503: PUSH
30504: LD_VAR 0 1
30508: PPUSH
30509: CALL_OW 310
30513: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30514: LD_VAR 0 11
30518: PPUSH
30519: CALL_OW 247
30523: PUSH
30524: LD_INT 2
30526: EQUAL
30527: IFFALSE 30531
// exit ;
30529: GO 31041
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30531: LD_ADDR_VAR 0 8
30535: PUSH
30536: LD_INT 81
30538: PUSH
30539: LD_VAR 0 9
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 3
30550: PUSH
30551: LD_INT 21
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PPUSH
30569: CALL_OW 69
30573: ST_TO_ADDR
// if not tmp then
30574: LD_VAR 0 8
30578: NOT
30579: IFFALSE 30583
// exit ;
30581: GO 31041
// if in_unit then
30583: LD_VAR 0 11
30587: IFFALSE 30611
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30589: LD_ADDR_VAR 0 10
30593: PUSH
30594: LD_VAR 0 8
30598: PPUSH
30599: LD_VAR 0 11
30603: PPUSH
30604: CALL_OW 74
30608: ST_TO_ADDR
30609: GO 30631
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30611: LD_ADDR_VAR 0 10
30615: PUSH
30616: LD_VAR 0 8
30620: PPUSH
30621: LD_VAR 0 1
30625: PPUSH
30626: CALL_OW 74
30630: ST_TO_ADDR
// if not enemy then
30631: LD_VAR 0 10
30635: NOT
30636: IFFALSE 30640
// exit ;
30638: GO 31041
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30640: LD_VAR 0 11
30644: PUSH
30645: LD_VAR 0 11
30649: PPUSH
30650: LD_VAR 0 10
30654: PPUSH
30655: CALL_OW 296
30659: PUSH
30660: LD_INT 13
30662: GREATER
30663: AND
30664: PUSH
30665: LD_VAR 0 1
30669: PPUSH
30670: LD_VAR 0 10
30674: PPUSH
30675: CALL_OW 296
30679: PUSH
30680: LD_INT 12
30682: GREATER
30683: OR
30684: IFFALSE 30688
// exit ;
30686: GO 31041
// missile := [ 1 ] ;
30688: LD_ADDR_VAR 0 14
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: EMPTY
30697: LIST
30698: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30699: LD_VAR 0 9
30703: PPUSH
30704: LD_VAR 0 12
30708: PPUSH
30709: CALL_OW 325
30713: IFFALSE 30742
// missile := Replace ( missile , missile + 1 , 2 ) ;
30715: LD_ADDR_VAR 0 14
30719: PUSH
30720: LD_VAR 0 14
30724: PPUSH
30725: LD_VAR 0 14
30729: PUSH
30730: LD_INT 1
30732: PLUS
30733: PPUSH
30734: LD_INT 2
30736: PPUSH
30737: CALL_OW 1
30741: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30742: LD_VAR 0 9
30746: PPUSH
30747: LD_VAR 0 13
30751: PPUSH
30752: CALL_OW 325
30756: PUSH
30757: LD_VAR 0 10
30761: PPUSH
30762: CALL_OW 255
30766: PPUSH
30767: LD_VAR 0 13
30771: PPUSH
30772: CALL_OW 325
30776: NOT
30777: AND
30778: IFFALSE 30807
// missile := Replace ( missile , missile + 1 , 3 ) ;
30780: LD_ADDR_VAR 0 14
30784: PUSH
30785: LD_VAR 0 14
30789: PPUSH
30790: LD_VAR 0 14
30794: PUSH
30795: LD_INT 1
30797: PLUS
30798: PPUSH
30799: LD_INT 3
30801: PPUSH
30802: CALL_OW 1
30806: ST_TO_ADDR
// if missile < 2 then
30807: LD_VAR 0 14
30811: PUSH
30812: LD_INT 2
30814: LESS
30815: IFFALSE 30819
// exit ;
30817: GO 31041
// x := GetX ( enemy ) ;
30819: LD_ADDR_VAR 0 4
30823: PUSH
30824: LD_VAR 0 10
30828: PPUSH
30829: CALL_OW 250
30833: ST_TO_ADDR
// y := GetY ( enemy ) ;
30834: LD_ADDR_VAR 0 5
30838: PUSH
30839: LD_VAR 0 10
30843: PPUSH
30844: CALL_OW 251
30848: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30849: LD_ADDR_VAR 0 6
30853: PUSH
30854: LD_VAR 0 4
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PPUSH
30863: LD_INT 1
30865: PPUSH
30866: CALL_OW 12
30870: PLUS
30871: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30872: LD_ADDR_VAR 0 7
30876: PUSH
30877: LD_VAR 0 5
30881: PUSH
30882: LD_INT 1
30884: NEG
30885: PPUSH
30886: LD_INT 1
30888: PPUSH
30889: CALL_OW 12
30893: PLUS
30894: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30895: LD_VAR 0 6
30899: PPUSH
30900: LD_VAR 0 7
30904: PPUSH
30905: CALL_OW 488
30909: NOT
30910: IFFALSE 30932
// begin _x := x ;
30912: LD_ADDR_VAR 0 6
30916: PUSH
30917: LD_VAR 0 4
30921: ST_TO_ADDR
// _y := y ;
30922: LD_ADDR_VAR 0 7
30926: PUSH
30927: LD_VAR 0 5
30931: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30932: LD_ADDR_VAR 0 3
30936: PUSH
30937: LD_INT 1
30939: PPUSH
30940: LD_VAR 0 14
30944: PPUSH
30945: CALL_OW 12
30949: ST_TO_ADDR
// case i of 1 :
30950: LD_VAR 0 3
30954: PUSH
30955: LD_INT 1
30957: DOUBLE
30958: EQUAL
30959: IFTRUE 30963
30961: GO 30980
30963: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30964: LD_VAR 0 1
30968: PPUSH
30969: LD_VAR 0 10
30973: PPUSH
30974: CALL_OW 115
30978: GO 31041
30980: LD_INT 2
30982: DOUBLE
30983: EQUAL
30984: IFTRUE 30988
30986: GO 31010
30988: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30989: LD_VAR 0 1
30993: PPUSH
30994: LD_VAR 0 6
30998: PPUSH
30999: LD_VAR 0 7
31003: PPUSH
31004: CALL_OW 153
31008: GO 31041
31010: LD_INT 3
31012: DOUBLE
31013: EQUAL
31014: IFTRUE 31018
31016: GO 31040
31018: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31019: LD_VAR 0 1
31023: PPUSH
31024: LD_VAR 0 6
31028: PPUSH
31029: LD_VAR 0 7
31033: PPUSH
31034: CALL_OW 154
31038: GO 31041
31040: POP
// end ;
31041: LD_VAR 0 2
31045: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31046: LD_INT 0
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
// if not unit or not building then
31054: LD_VAR 0 1
31058: NOT
31059: PUSH
31060: LD_VAR 0 2
31064: NOT
31065: OR
31066: IFFALSE 31070
// exit ;
31068: GO 31228
// x := GetX ( building ) ;
31070: LD_ADDR_VAR 0 5
31074: PUSH
31075: LD_VAR 0 2
31079: PPUSH
31080: CALL_OW 250
31084: ST_TO_ADDR
// y := GetY ( building ) ;
31085: LD_ADDR_VAR 0 6
31089: PUSH
31090: LD_VAR 0 2
31094: PPUSH
31095: CALL_OW 251
31099: ST_TO_ADDR
// for i = 0 to 5 do
31100: LD_ADDR_VAR 0 4
31104: PUSH
31105: DOUBLE
31106: LD_INT 0
31108: DEC
31109: ST_TO_ADDR
31110: LD_INT 5
31112: PUSH
31113: FOR_TO
31114: IFFALSE 31226
// begin _x := ShiftX ( x , i , 3 ) ;
31116: LD_ADDR_VAR 0 7
31120: PUSH
31121: LD_VAR 0 5
31125: PPUSH
31126: LD_VAR 0 4
31130: PPUSH
31131: LD_INT 3
31133: PPUSH
31134: CALL_OW 272
31138: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31139: LD_ADDR_VAR 0 8
31143: PUSH
31144: LD_VAR 0 6
31148: PPUSH
31149: LD_VAR 0 4
31153: PPUSH
31154: LD_INT 3
31156: PPUSH
31157: CALL_OW 273
31161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31162: LD_VAR 0 7
31166: PPUSH
31167: LD_VAR 0 8
31171: PPUSH
31172: CALL_OW 488
31176: NOT
31177: IFFALSE 31181
// continue ;
31179: GO 31113
// if HexInfo ( _x , _y ) = 0 then
31181: LD_VAR 0 7
31185: PPUSH
31186: LD_VAR 0 8
31190: PPUSH
31191: CALL_OW 428
31195: PUSH
31196: LD_INT 0
31198: EQUAL
31199: IFFALSE 31224
// begin ComMoveXY ( unit , _x , _y ) ;
31201: LD_VAR 0 1
31205: PPUSH
31206: LD_VAR 0 7
31210: PPUSH
31211: LD_VAR 0 8
31215: PPUSH
31216: CALL_OW 111
// exit ;
31220: POP
31221: POP
31222: GO 31228
// end ; end ;
31224: GO 31113
31226: POP
31227: POP
// end ;
31228: LD_VAR 0 3
31232: RET
// export function ScanBase ( side , base_area ) ; begin
31233: LD_INT 0
31235: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31236: LD_ADDR_VAR 0 3
31240: PUSH
31241: LD_VAR 0 2
31245: PPUSH
31246: LD_INT 81
31248: PUSH
31249: LD_VAR 0 1
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PPUSH
31258: CALL_OW 70
31262: ST_TO_ADDR
// end ;
31263: LD_VAR 0 3
31267: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31268: LD_INT 0
31270: PPUSH
31271: PPUSH
31272: PPUSH
31273: PPUSH
// result := false ;
31274: LD_ADDR_VAR 0 2
31278: PUSH
31279: LD_INT 0
31281: ST_TO_ADDR
// side := GetSide ( unit ) ;
31282: LD_ADDR_VAR 0 3
31286: PUSH
31287: LD_VAR 0 1
31291: PPUSH
31292: CALL_OW 255
31296: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31297: LD_ADDR_VAR 0 4
31301: PUSH
31302: LD_VAR 0 1
31306: PPUSH
31307: CALL_OW 248
31311: ST_TO_ADDR
// case nat of 1 :
31312: LD_VAR 0 4
31316: PUSH
31317: LD_INT 1
31319: DOUBLE
31320: EQUAL
31321: IFTRUE 31325
31323: GO 31336
31325: POP
// tech := tech_lassight ; 2 :
31326: LD_ADDR_VAR 0 5
31330: PUSH
31331: LD_INT 12
31333: ST_TO_ADDR
31334: GO 31375
31336: LD_INT 2
31338: DOUBLE
31339: EQUAL
31340: IFTRUE 31344
31342: GO 31355
31344: POP
// tech := tech_mortar ; 3 :
31345: LD_ADDR_VAR 0 5
31349: PUSH
31350: LD_INT 41
31352: ST_TO_ADDR
31353: GO 31375
31355: LD_INT 3
31357: DOUBLE
31358: EQUAL
31359: IFTRUE 31363
31361: GO 31374
31363: POP
// tech := tech_bazooka ; end ;
31364: LD_ADDR_VAR 0 5
31368: PUSH
31369: LD_INT 44
31371: ST_TO_ADDR
31372: GO 31375
31374: POP
// if Researched ( side , tech ) then
31375: LD_VAR 0 3
31379: PPUSH
31380: LD_VAR 0 5
31384: PPUSH
31385: CALL_OW 325
31389: IFFALSE 31416
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31391: LD_ADDR_VAR 0 2
31395: PUSH
31396: LD_INT 5
31398: PUSH
31399: LD_INT 8
31401: PUSH
31402: LD_INT 9
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: PUSH
31410: LD_VAR 0 4
31414: ARRAY
31415: ST_TO_ADDR
// end ;
31416: LD_VAR 0 2
31420: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31421: LD_INT 0
31423: PPUSH
31424: PPUSH
31425: PPUSH
// if not mines then
31426: LD_VAR 0 2
31430: NOT
31431: IFFALSE 31435
// exit ;
31433: GO 31579
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31435: LD_ADDR_VAR 0 5
31439: PUSH
31440: LD_INT 81
31442: PUSH
31443: LD_VAR 0 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: LD_INT 21
31457: PUSH
31458: LD_INT 3
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PPUSH
31473: CALL_OW 69
31477: ST_TO_ADDR
// for i in mines do
31478: LD_ADDR_VAR 0 4
31482: PUSH
31483: LD_VAR 0 2
31487: PUSH
31488: FOR_IN
31489: IFFALSE 31577
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31491: LD_VAR 0 4
31495: PUSH
31496: LD_INT 1
31498: ARRAY
31499: PPUSH
31500: LD_VAR 0 4
31504: PUSH
31505: LD_INT 2
31507: ARRAY
31508: PPUSH
31509: CALL_OW 458
31513: NOT
31514: IFFALSE 31518
// continue ;
31516: GO 31488
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31518: LD_VAR 0 4
31522: PUSH
31523: LD_INT 1
31525: ARRAY
31526: PPUSH
31527: LD_VAR 0 4
31531: PUSH
31532: LD_INT 2
31534: ARRAY
31535: PPUSH
31536: CALL_OW 428
31540: PUSH
31541: LD_VAR 0 5
31545: IN
31546: IFFALSE 31575
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31548: LD_VAR 0 4
31552: PUSH
31553: LD_INT 1
31555: ARRAY
31556: PPUSH
31557: LD_VAR 0 4
31561: PUSH
31562: LD_INT 2
31564: ARRAY
31565: PPUSH
31566: LD_VAR 0 1
31570: PPUSH
31571: CALL_OW 456
// end ;
31575: GO 31488
31577: POP
31578: POP
// end ;
31579: LD_VAR 0 3
31583: RET
// export function Count ( array ) ; begin
31584: LD_INT 0
31586: PPUSH
// result := array + 0 ;
31587: LD_ADDR_VAR 0 2
31591: PUSH
31592: LD_VAR 0 1
31596: PUSH
31597: LD_INT 0
31599: PLUS
31600: ST_TO_ADDR
// end ;
31601: LD_VAR 0 2
31605: RET
// export function IsEmpty ( building ) ; begin
31606: LD_INT 0
31608: PPUSH
// if not building then
31609: LD_VAR 0 1
31613: NOT
31614: IFFALSE 31618
// exit ;
31616: GO 31661
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31618: LD_ADDR_VAR 0 2
31622: PUSH
31623: LD_VAR 0 1
31627: PUSH
31628: LD_INT 22
31630: PUSH
31631: LD_VAR 0 1
31635: PPUSH
31636: CALL_OW 255
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 58
31647: PUSH
31648: EMPTY
31649: LIST
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PPUSH
31655: CALL_OW 69
31659: IN
31660: ST_TO_ADDR
// end ;
31661: LD_VAR 0 2
31665: RET
// export function IsNotFull ( building ) ; var places ; begin
31666: LD_INT 0
31668: PPUSH
31669: PPUSH
// if not building then
31670: LD_VAR 0 1
31674: NOT
31675: IFFALSE 31679
// exit ;
31677: GO 31707
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31679: LD_ADDR_VAR 0 2
31683: PUSH
31684: LD_VAR 0 1
31688: PPUSH
31689: LD_INT 3
31691: PUSH
31692: LD_INT 62
31694: PUSH
31695: EMPTY
31696: LIST
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PPUSH
31702: CALL_OW 72
31706: ST_TO_ADDR
// end ;
31707: LD_VAR 0 2
31711: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31712: LD_INT 0
31714: PPUSH
31715: PPUSH
31716: PPUSH
31717: PPUSH
// tmp := [ ] ;
31718: LD_ADDR_VAR 0 3
31722: PUSH
31723: EMPTY
31724: ST_TO_ADDR
// list := [ ] ;
31725: LD_ADDR_VAR 0 5
31729: PUSH
31730: EMPTY
31731: ST_TO_ADDR
// for i = 16 to 25 do
31732: LD_ADDR_VAR 0 4
31736: PUSH
31737: DOUBLE
31738: LD_INT 16
31740: DEC
31741: ST_TO_ADDR
31742: LD_INT 25
31744: PUSH
31745: FOR_TO
31746: IFFALSE 31819
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31748: LD_ADDR_VAR 0 3
31752: PUSH
31753: LD_VAR 0 3
31757: PUSH
31758: LD_INT 22
31760: PUSH
31761: LD_VAR 0 1
31765: PPUSH
31766: CALL_OW 255
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 91
31777: PUSH
31778: LD_VAR 0 1
31782: PUSH
31783: LD_INT 6
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 30
31793: PUSH
31794: LD_VAR 0 4
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: PUSH
31808: EMPTY
31809: LIST
31810: PPUSH
31811: CALL_OW 69
31815: ADD
31816: ST_TO_ADDR
31817: GO 31745
31819: POP
31820: POP
// for i = 1 to tmp do
31821: LD_ADDR_VAR 0 4
31825: PUSH
31826: DOUBLE
31827: LD_INT 1
31829: DEC
31830: ST_TO_ADDR
31831: LD_VAR 0 3
31835: PUSH
31836: FOR_TO
31837: IFFALSE 31925
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31839: LD_ADDR_VAR 0 5
31843: PUSH
31844: LD_VAR 0 5
31848: PUSH
31849: LD_VAR 0 3
31853: PUSH
31854: LD_VAR 0 4
31858: ARRAY
31859: PPUSH
31860: CALL_OW 266
31864: PUSH
31865: LD_VAR 0 3
31869: PUSH
31870: LD_VAR 0 4
31874: ARRAY
31875: PPUSH
31876: CALL_OW 250
31880: PUSH
31881: LD_VAR 0 3
31885: PUSH
31886: LD_VAR 0 4
31890: ARRAY
31891: PPUSH
31892: CALL_OW 251
31896: PUSH
31897: LD_VAR 0 3
31901: PUSH
31902: LD_VAR 0 4
31906: ARRAY
31907: PPUSH
31908: CALL_OW 254
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: PUSH
31919: EMPTY
31920: LIST
31921: ADD
31922: ST_TO_ADDR
31923: GO 31836
31925: POP
31926: POP
// result := list ;
31927: LD_ADDR_VAR 0 2
31931: PUSH
31932: LD_VAR 0 5
31936: ST_TO_ADDR
// end ;
31937: LD_VAR 0 2
31941: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31942: LD_INT 0
31944: PPUSH
31945: PPUSH
31946: PPUSH
31947: PPUSH
31948: PPUSH
31949: PPUSH
31950: PPUSH
// if not factory then
31951: LD_VAR 0 1
31955: NOT
31956: IFFALSE 31960
// exit ;
31958: GO 32553
// if control = control_apeman then
31960: LD_VAR 0 4
31964: PUSH
31965: LD_INT 5
31967: EQUAL
31968: IFFALSE 32077
// begin tmp := UnitsInside ( factory ) ;
31970: LD_ADDR_VAR 0 8
31974: PUSH
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL_OW 313
31984: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31985: LD_VAR 0 8
31989: PPUSH
31990: LD_INT 25
31992: PUSH
31993: LD_INT 12
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PPUSH
32000: CALL_OW 72
32004: NOT
32005: IFFALSE 32015
// control := control_manual ;
32007: LD_ADDR_VAR 0 4
32011: PUSH
32012: LD_INT 1
32014: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32015: LD_ADDR_VAR 0 8
32019: PUSH
32020: LD_VAR 0 1
32024: PPUSH
32025: CALL 31712 0 1
32029: ST_TO_ADDR
// if tmp then
32030: LD_VAR 0 8
32034: IFFALSE 32077
// begin for i in tmp do
32036: LD_ADDR_VAR 0 7
32040: PUSH
32041: LD_VAR 0 8
32045: PUSH
32046: FOR_IN
32047: IFFALSE 32075
// if i [ 1 ] = b_ext_radio then
32049: LD_VAR 0 7
32053: PUSH
32054: LD_INT 1
32056: ARRAY
32057: PUSH
32058: LD_INT 22
32060: EQUAL
32061: IFFALSE 32073
// begin control := control_remote ;
32063: LD_ADDR_VAR 0 4
32067: PUSH
32068: LD_INT 2
32070: ST_TO_ADDR
// break ;
32071: GO 32075
// end ;
32073: GO 32046
32075: POP
32076: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32077: LD_VAR 0 1
32081: PPUSH
32082: LD_VAR 0 2
32086: PPUSH
32087: LD_VAR 0 3
32091: PPUSH
32092: LD_VAR 0 4
32096: PPUSH
32097: LD_VAR 0 5
32101: PPUSH
32102: CALL_OW 448
32106: IFFALSE 32141
// begin result := [ chassis , engine , control , weapon ] ;
32108: LD_ADDR_VAR 0 6
32112: PUSH
32113: LD_VAR 0 2
32117: PUSH
32118: LD_VAR 0 3
32122: PUSH
32123: LD_VAR 0 4
32127: PUSH
32128: LD_VAR 0 5
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: ST_TO_ADDR
// exit ;
32139: GO 32553
// end ; _chassis := AvailableChassisList ( factory ) ;
32141: LD_ADDR_VAR 0 9
32145: PUSH
32146: LD_VAR 0 1
32150: PPUSH
32151: CALL_OW 475
32155: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32156: LD_ADDR_VAR 0 11
32160: PUSH
32161: LD_VAR 0 1
32165: PPUSH
32166: CALL_OW 476
32170: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32171: LD_ADDR_VAR 0 12
32175: PUSH
32176: LD_VAR 0 1
32180: PPUSH
32181: CALL_OW 477
32185: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32186: LD_ADDR_VAR 0 10
32190: PUSH
32191: LD_VAR 0 1
32195: PPUSH
32196: CALL_OW 478
32200: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32201: LD_VAR 0 9
32205: NOT
32206: PUSH
32207: LD_VAR 0 11
32211: NOT
32212: OR
32213: PUSH
32214: LD_VAR 0 12
32218: NOT
32219: OR
32220: PUSH
32221: LD_VAR 0 10
32225: NOT
32226: OR
32227: IFFALSE 32262
// begin result := [ chassis , engine , control , weapon ] ;
32229: LD_ADDR_VAR 0 6
32233: PUSH
32234: LD_VAR 0 2
32238: PUSH
32239: LD_VAR 0 3
32243: PUSH
32244: LD_VAR 0 4
32248: PUSH
32249: LD_VAR 0 5
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: ST_TO_ADDR
// exit ;
32260: GO 32553
// end ; if not chassis in _chassis then
32262: LD_VAR 0 2
32266: PUSH
32267: LD_VAR 0 9
32271: IN
32272: NOT
32273: IFFALSE 32299
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32275: LD_ADDR_VAR 0 2
32279: PUSH
32280: LD_VAR 0 9
32284: PUSH
32285: LD_INT 1
32287: PPUSH
32288: LD_VAR 0 9
32292: PPUSH
32293: CALL_OW 12
32297: ARRAY
32298: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32299: LD_VAR 0 2
32303: PPUSH
32304: LD_VAR 0 3
32308: PPUSH
32309: CALL 32558 0 2
32313: NOT
32314: IFFALSE 32373
// repeat engine := _engine [ 1 ] ;
32316: LD_ADDR_VAR 0 3
32320: PUSH
32321: LD_VAR 0 11
32325: PUSH
32326: LD_INT 1
32328: ARRAY
32329: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32330: LD_ADDR_VAR 0 11
32334: PUSH
32335: LD_VAR 0 11
32339: PPUSH
32340: LD_INT 1
32342: PPUSH
32343: CALL_OW 3
32347: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32348: LD_VAR 0 2
32352: PPUSH
32353: LD_VAR 0 3
32357: PPUSH
32358: CALL 32558 0 2
32362: PUSH
32363: LD_VAR 0 11
32367: PUSH
32368: EMPTY
32369: EQUAL
32370: OR
32371: IFFALSE 32316
// if not control in _control then
32373: LD_VAR 0 4
32377: PUSH
32378: LD_VAR 0 12
32382: IN
32383: NOT
32384: IFFALSE 32410
// control := _control [ rand ( 1 , _control ) ] ;
32386: LD_ADDR_VAR 0 4
32390: PUSH
32391: LD_VAR 0 12
32395: PUSH
32396: LD_INT 1
32398: PPUSH
32399: LD_VAR 0 12
32403: PPUSH
32404: CALL_OW 12
32408: ARRAY
32409: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32410: LD_VAR 0 2
32414: PPUSH
32415: LD_VAR 0 5
32419: PPUSH
32420: CALL 32778 0 2
32424: NOT
32425: IFFALSE 32484
// repeat weapon := _weapon [ 1 ] ;
32427: LD_ADDR_VAR 0 5
32431: PUSH
32432: LD_VAR 0 10
32436: PUSH
32437: LD_INT 1
32439: ARRAY
32440: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32441: LD_ADDR_VAR 0 10
32445: PUSH
32446: LD_VAR 0 10
32450: PPUSH
32451: LD_INT 1
32453: PPUSH
32454: CALL_OW 3
32458: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32459: LD_VAR 0 2
32463: PPUSH
32464: LD_VAR 0 5
32468: PPUSH
32469: CALL 32778 0 2
32473: PUSH
32474: LD_VAR 0 10
32478: PUSH
32479: EMPTY
32480: EQUAL
32481: OR
32482: IFFALSE 32427
// result := [ ] ;
32484: LD_ADDR_VAR 0 6
32488: PUSH
32489: EMPTY
32490: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32491: LD_VAR 0 1
32495: PPUSH
32496: LD_VAR 0 2
32500: PPUSH
32501: LD_VAR 0 3
32505: PPUSH
32506: LD_VAR 0 4
32510: PPUSH
32511: LD_VAR 0 5
32515: PPUSH
32516: CALL_OW 448
32520: IFFALSE 32553
// result := [ chassis , engine , control , weapon ] ;
32522: LD_ADDR_VAR 0 6
32526: PUSH
32527: LD_VAR 0 2
32531: PUSH
32532: LD_VAR 0 3
32536: PUSH
32537: LD_VAR 0 4
32541: PUSH
32542: LD_VAR 0 5
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: ST_TO_ADDR
// end ;
32553: LD_VAR 0 6
32557: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32558: LD_INT 0
32560: PPUSH
// if not chassis or not engine then
32561: LD_VAR 0 1
32565: NOT
32566: PUSH
32567: LD_VAR 0 2
32571: NOT
32572: OR
32573: IFFALSE 32577
// exit ;
32575: GO 32773
// case engine of engine_solar :
32577: LD_VAR 0 2
32581: PUSH
32582: LD_INT 2
32584: DOUBLE
32585: EQUAL
32586: IFTRUE 32590
32588: GO 32628
32590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32591: LD_ADDR_VAR 0 3
32595: PUSH
32596: LD_INT 11
32598: PUSH
32599: LD_INT 12
32601: PUSH
32602: LD_INT 13
32604: PUSH
32605: LD_INT 14
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: LD_INT 3
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: ST_TO_ADDR
32626: GO 32757
32628: LD_INT 1
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32698
32636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32637: LD_ADDR_VAR 0 3
32641: PUSH
32642: LD_INT 11
32644: PUSH
32645: LD_INT 12
32647: PUSH
32648: LD_INT 13
32650: PUSH
32651: LD_INT 14
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: LD_INT 2
32659: PUSH
32660: LD_INT 3
32662: PUSH
32663: LD_INT 4
32665: PUSH
32666: LD_INT 5
32668: PUSH
32669: LD_INT 21
32671: PUSH
32672: LD_INT 23
32674: PUSH
32675: LD_INT 22
32677: PUSH
32678: LD_INT 24
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: ST_TO_ADDR
32696: GO 32757
32698: LD_INT 3
32700: DOUBLE
32701: EQUAL
32702: IFTRUE 32706
32704: GO 32756
32706: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32707: LD_ADDR_VAR 0 3
32711: PUSH
32712: LD_INT 13
32714: PUSH
32715: LD_INT 14
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: LD_INT 3
32723: PUSH
32724: LD_INT 4
32726: PUSH
32727: LD_INT 5
32729: PUSH
32730: LD_INT 21
32732: PUSH
32733: LD_INT 22
32735: PUSH
32736: LD_INT 23
32738: PUSH
32739: LD_INT 24
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: ST_TO_ADDR
32754: GO 32757
32756: POP
// result := ( chassis in result ) ;
32757: LD_ADDR_VAR 0 3
32761: PUSH
32762: LD_VAR 0 1
32766: PUSH
32767: LD_VAR 0 3
32771: IN
32772: ST_TO_ADDR
// end ;
32773: LD_VAR 0 3
32777: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32778: LD_INT 0
32780: PPUSH
// if not chassis or not weapon then
32781: LD_VAR 0 1
32785: NOT
32786: PUSH
32787: LD_VAR 0 2
32791: NOT
32792: OR
32793: IFFALSE 32797
// exit ;
32795: GO 33857
// case weapon of us_machine_gun :
32797: LD_VAR 0 2
32801: PUSH
32802: LD_INT 2
32804: DOUBLE
32805: EQUAL
32806: IFTRUE 32810
32808: GO 32840
32810: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32811: LD_ADDR_VAR 0 3
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 3
32824: PUSH
32825: LD_INT 4
32827: PUSH
32828: LD_INT 5
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: ST_TO_ADDR
32838: GO 33841
32840: LD_INT 3
32842: DOUBLE
32843: EQUAL
32844: IFTRUE 32848
32846: GO 32878
32848: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32849: LD_ADDR_VAR 0 3
32853: PUSH
32854: LD_INT 1
32856: PUSH
32857: LD_INT 2
32859: PUSH
32860: LD_INT 3
32862: PUSH
32863: LD_INT 4
32865: PUSH
32866: LD_INT 5
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: ST_TO_ADDR
32876: GO 33841
32878: LD_INT 11
32880: DOUBLE
32881: EQUAL
32882: IFTRUE 32886
32884: GO 32916
32886: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32887: LD_ADDR_VAR 0 3
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: LD_INT 3
32900: PUSH
32901: LD_INT 4
32903: PUSH
32904: LD_INT 5
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: ST_TO_ADDR
32914: GO 33841
32916: LD_INT 4
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32950
32924: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32925: LD_ADDR_VAR 0 3
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: LD_INT 4
32938: PUSH
32939: LD_INT 5
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: ST_TO_ADDR
32948: GO 33841
32950: LD_INT 5
32952: DOUBLE
32953: EQUAL
32954: IFTRUE 32958
32956: GO 32984
32958: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32959: LD_ADDR_VAR 0 3
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: LD_INT 4
32972: PUSH
32973: LD_INT 5
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
32982: GO 33841
32984: LD_INT 9
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33018
32992: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32993: LD_ADDR_VAR 0 3
32997: PUSH
32998: LD_INT 2
33000: PUSH
33001: LD_INT 3
33003: PUSH
33004: LD_INT 4
33006: PUSH
33007: LD_INT 5
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: ST_TO_ADDR
33016: GO 33841
33018: LD_INT 7
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33052
33026: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33027: LD_ADDR_VAR 0 3
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: LD_INT 4
33040: PUSH
33041: LD_INT 5
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
33050: GO 33841
33052: LD_INT 12
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33060
33058: GO 33086
33060: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33061: LD_ADDR_VAR 0 3
33065: PUSH
33066: LD_INT 2
33068: PUSH
33069: LD_INT 3
33071: PUSH
33072: LD_INT 4
33074: PUSH
33075: LD_INT 5
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: ST_TO_ADDR
33084: GO 33841
33086: LD_INT 13
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33120
33094: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33095: LD_ADDR_VAR 0 3
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: LD_INT 4
33108: PUSH
33109: LD_INT 5
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: ST_TO_ADDR
33118: GO 33841
33120: LD_INT 14
33122: DOUBLE
33123: EQUAL
33124: IFTRUE 33128
33126: GO 33146
33128: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33129: LD_ADDR_VAR 0 3
33133: PUSH
33134: LD_INT 4
33136: PUSH
33137: LD_INT 5
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: ST_TO_ADDR
33144: GO 33841
33146: LD_INT 6
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33172
33154: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33155: LD_ADDR_VAR 0 3
33159: PUSH
33160: LD_INT 4
33162: PUSH
33163: LD_INT 5
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: ST_TO_ADDR
33170: GO 33841
33172: LD_INT 10
33174: DOUBLE
33175: EQUAL
33176: IFTRUE 33180
33178: GO 33198
33180: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33181: LD_ADDR_VAR 0 3
33185: PUSH
33186: LD_INT 4
33188: PUSH
33189: LD_INT 5
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: ST_TO_ADDR
33196: GO 33841
33198: LD_INT 22
33200: DOUBLE
33201: EQUAL
33202: IFTRUE 33206
33204: GO 33232
33206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33207: LD_ADDR_VAR 0 3
33211: PUSH
33212: LD_INT 11
33214: PUSH
33215: LD_INT 12
33217: PUSH
33218: LD_INT 13
33220: PUSH
33221: LD_INT 14
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: ST_TO_ADDR
33230: GO 33841
33232: LD_INT 23
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33240
33238: GO 33266
33240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33241: LD_ADDR_VAR 0 3
33245: PUSH
33246: LD_INT 11
33248: PUSH
33249: LD_INT 12
33251: PUSH
33252: LD_INT 13
33254: PUSH
33255: LD_INT 14
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: ST_TO_ADDR
33264: GO 33841
33266: LD_INT 24
33268: DOUBLE
33269: EQUAL
33270: IFTRUE 33274
33272: GO 33300
33274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33275: LD_ADDR_VAR 0 3
33279: PUSH
33280: LD_INT 11
33282: PUSH
33283: LD_INT 12
33285: PUSH
33286: LD_INT 13
33288: PUSH
33289: LD_INT 14
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: ST_TO_ADDR
33298: GO 33841
33300: LD_INT 30
33302: DOUBLE
33303: EQUAL
33304: IFTRUE 33308
33306: GO 33334
33308: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33309: LD_ADDR_VAR 0 3
33313: PUSH
33314: LD_INT 11
33316: PUSH
33317: LD_INT 12
33319: PUSH
33320: LD_INT 13
33322: PUSH
33323: LD_INT 14
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: ST_TO_ADDR
33332: GO 33841
33334: LD_INT 25
33336: DOUBLE
33337: EQUAL
33338: IFTRUE 33342
33340: GO 33360
33342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33343: LD_ADDR_VAR 0 3
33347: PUSH
33348: LD_INT 13
33350: PUSH
33351: LD_INT 14
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: ST_TO_ADDR
33358: GO 33841
33360: LD_INT 27
33362: DOUBLE
33363: EQUAL
33364: IFTRUE 33368
33366: GO 33386
33368: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33369: LD_ADDR_VAR 0 3
33373: PUSH
33374: LD_INT 13
33376: PUSH
33377: LD_INT 14
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: ST_TO_ADDR
33384: GO 33841
33386: LD_INT 92
33388: DOUBLE
33389: EQUAL
33390: IFTRUE 33394
33392: GO 33420
33394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33395: LD_ADDR_VAR 0 3
33399: PUSH
33400: LD_INT 11
33402: PUSH
33403: LD_INT 12
33405: PUSH
33406: LD_INT 13
33408: PUSH
33409: LD_INT 14
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: ST_TO_ADDR
33418: GO 33841
33420: LD_INT 28
33422: DOUBLE
33423: EQUAL
33424: IFTRUE 33428
33426: GO 33446
33428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33429: LD_ADDR_VAR 0 3
33433: PUSH
33434: LD_INT 13
33436: PUSH
33437: LD_INT 14
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: ST_TO_ADDR
33444: GO 33841
33446: LD_INT 29
33448: DOUBLE
33449: EQUAL
33450: IFTRUE 33454
33452: GO 33472
33454: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33455: LD_ADDR_VAR 0 3
33459: PUSH
33460: LD_INT 13
33462: PUSH
33463: LD_INT 14
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: ST_TO_ADDR
33470: GO 33841
33472: LD_INT 31
33474: DOUBLE
33475: EQUAL
33476: IFTRUE 33480
33478: GO 33498
33480: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33481: LD_ADDR_VAR 0 3
33485: PUSH
33486: LD_INT 13
33488: PUSH
33489: LD_INT 14
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: ST_TO_ADDR
33496: GO 33841
33498: LD_INT 26
33500: DOUBLE
33501: EQUAL
33502: IFTRUE 33506
33504: GO 33524
33506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33507: LD_ADDR_VAR 0 3
33511: PUSH
33512: LD_INT 13
33514: PUSH
33515: LD_INT 14
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: ST_TO_ADDR
33522: GO 33841
33524: LD_INT 42
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33558
33532: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_INT 21
33540: PUSH
33541: LD_INT 22
33543: PUSH
33544: LD_INT 23
33546: PUSH
33547: LD_INT 24
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: ST_TO_ADDR
33556: GO 33841
33558: LD_INT 43
33560: DOUBLE
33561: EQUAL
33562: IFTRUE 33566
33564: GO 33592
33566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33567: LD_ADDR_VAR 0 3
33571: PUSH
33572: LD_INT 21
33574: PUSH
33575: LD_INT 22
33577: PUSH
33578: LD_INT 23
33580: PUSH
33581: LD_INT 24
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: ST_TO_ADDR
33590: GO 33841
33592: LD_INT 44
33594: DOUBLE
33595: EQUAL
33596: IFTRUE 33600
33598: GO 33626
33600: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33601: LD_ADDR_VAR 0 3
33605: PUSH
33606: LD_INT 21
33608: PUSH
33609: LD_INT 22
33611: PUSH
33612: LD_INT 23
33614: PUSH
33615: LD_INT 24
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: ST_TO_ADDR
33624: GO 33841
33626: LD_INT 45
33628: DOUBLE
33629: EQUAL
33630: IFTRUE 33634
33632: GO 33660
33634: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33635: LD_ADDR_VAR 0 3
33639: PUSH
33640: LD_INT 21
33642: PUSH
33643: LD_INT 22
33645: PUSH
33646: LD_INT 23
33648: PUSH
33649: LD_INT 24
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: ST_TO_ADDR
33658: GO 33841
33660: LD_INT 49
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33668
33666: GO 33694
33668: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33669: LD_ADDR_VAR 0 3
33673: PUSH
33674: LD_INT 21
33676: PUSH
33677: LD_INT 22
33679: PUSH
33680: LD_INT 23
33682: PUSH
33683: LD_INT 24
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
33692: GO 33841
33694: LD_INT 51
33696: DOUBLE
33697: EQUAL
33698: IFTRUE 33702
33700: GO 33728
33702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33703: LD_ADDR_VAR 0 3
33707: PUSH
33708: LD_INT 21
33710: PUSH
33711: LD_INT 22
33713: PUSH
33714: LD_INT 23
33716: PUSH
33717: LD_INT 24
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: ST_TO_ADDR
33726: GO 33841
33728: LD_INT 52
33730: DOUBLE
33731: EQUAL
33732: IFTRUE 33736
33734: GO 33762
33736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: LD_INT 21
33744: PUSH
33745: LD_INT 22
33747: PUSH
33748: LD_INT 23
33750: PUSH
33751: LD_INT 24
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: ST_TO_ADDR
33760: GO 33841
33762: LD_INT 53
33764: DOUBLE
33765: EQUAL
33766: IFTRUE 33770
33768: GO 33788
33770: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33771: LD_ADDR_VAR 0 3
33775: PUSH
33776: LD_INT 23
33778: PUSH
33779: LD_INT 24
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: ST_TO_ADDR
33786: GO 33841
33788: LD_INT 46
33790: DOUBLE
33791: EQUAL
33792: IFTRUE 33796
33794: GO 33814
33796: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33797: LD_ADDR_VAR 0 3
33801: PUSH
33802: LD_INT 23
33804: PUSH
33805: LD_INT 24
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: ST_TO_ADDR
33812: GO 33841
33814: LD_INT 47
33816: DOUBLE
33817: EQUAL
33818: IFTRUE 33822
33820: GO 33840
33822: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33823: LD_ADDR_VAR 0 3
33827: PUSH
33828: LD_INT 23
33830: PUSH
33831: LD_INT 24
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: ST_TO_ADDR
33838: GO 33841
33840: POP
// result := ( chassis in result ) ;
33841: LD_ADDR_VAR 0 3
33845: PUSH
33846: LD_VAR 0 1
33850: PUSH
33851: LD_VAR 0 3
33855: IN
33856: ST_TO_ADDR
// end ;
33857: LD_VAR 0 3
33861: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33862: LD_INT 0
33864: PPUSH
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
// result := array ;
33871: LD_ADDR_VAR 0 5
33875: PUSH
33876: LD_VAR 0 1
33880: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33881: LD_VAR 0 1
33885: NOT
33886: PUSH
33887: LD_VAR 0 2
33891: NOT
33892: OR
33893: PUSH
33894: LD_VAR 0 3
33898: NOT
33899: OR
33900: PUSH
33901: LD_VAR 0 2
33905: PUSH
33906: LD_VAR 0 1
33910: GREATER
33911: OR
33912: PUSH
33913: LD_VAR 0 3
33917: PUSH
33918: LD_VAR 0 1
33922: GREATER
33923: OR
33924: IFFALSE 33928
// exit ;
33926: GO 34224
// if direction then
33928: LD_VAR 0 4
33932: IFFALSE 33996
// begin d := 1 ;
33934: LD_ADDR_VAR 0 9
33938: PUSH
33939: LD_INT 1
33941: ST_TO_ADDR
// if i_from > i_to then
33942: LD_VAR 0 2
33946: PUSH
33947: LD_VAR 0 3
33951: GREATER
33952: IFFALSE 33978
// length := ( array - i_from ) + i_to else
33954: LD_ADDR_VAR 0 11
33958: PUSH
33959: LD_VAR 0 1
33963: PUSH
33964: LD_VAR 0 2
33968: MINUS
33969: PUSH
33970: LD_VAR 0 3
33974: PLUS
33975: ST_TO_ADDR
33976: GO 33994
// length := i_to - i_from ;
33978: LD_ADDR_VAR 0 11
33982: PUSH
33983: LD_VAR 0 3
33987: PUSH
33988: LD_VAR 0 2
33992: MINUS
33993: ST_TO_ADDR
// end else
33994: GO 34057
// begin d := - 1 ;
33996: LD_ADDR_VAR 0 9
34000: PUSH
34001: LD_INT 1
34003: NEG
34004: ST_TO_ADDR
// if i_from > i_to then
34005: LD_VAR 0 2
34009: PUSH
34010: LD_VAR 0 3
34014: GREATER
34015: IFFALSE 34035
// length := i_from - i_to else
34017: LD_ADDR_VAR 0 11
34021: PUSH
34022: LD_VAR 0 2
34026: PUSH
34027: LD_VAR 0 3
34031: MINUS
34032: ST_TO_ADDR
34033: GO 34057
// length := ( array - i_to ) + i_from ;
34035: LD_ADDR_VAR 0 11
34039: PUSH
34040: LD_VAR 0 1
34044: PUSH
34045: LD_VAR 0 3
34049: MINUS
34050: PUSH
34051: LD_VAR 0 2
34055: PLUS
34056: ST_TO_ADDR
// end ; if not length then
34057: LD_VAR 0 11
34061: NOT
34062: IFFALSE 34066
// exit ;
34064: GO 34224
// tmp := array ;
34066: LD_ADDR_VAR 0 10
34070: PUSH
34071: LD_VAR 0 1
34075: ST_TO_ADDR
// for i = 1 to length do
34076: LD_ADDR_VAR 0 6
34080: PUSH
34081: DOUBLE
34082: LD_INT 1
34084: DEC
34085: ST_TO_ADDR
34086: LD_VAR 0 11
34090: PUSH
34091: FOR_TO
34092: IFFALSE 34212
// begin for j = 1 to array do
34094: LD_ADDR_VAR 0 7
34098: PUSH
34099: DOUBLE
34100: LD_INT 1
34102: DEC
34103: ST_TO_ADDR
34104: LD_VAR 0 1
34108: PUSH
34109: FOR_TO
34110: IFFALSE 34198
// begin k := j + d ;
34112: LD_ADDR_VAR 0 8
34116: PUSH
34117: LD_VAR 0 7
34121: PUSH
34122: LD_VAR 0 9
34126: PLUS
34127: ST_TO_ADDR
// if k > array then
34128: LD_VAR 0 8
34132: PUSH
34133: LD_VAR 0 1
34137: GREATER
34138: IFFALSE 34148
// k := 1 ;
34140: LD_ADDR_VAR 0 8
34144: PUSH
34145: LD_INT 1
34147: ST_TO_ADDR
// if not k then
34148: LD_VAR 0 8
34152: NOT
34153: IFFALSE 34165
// k := array ;
34155: LD_ADDR_VAR 0 8
34159: PUSH
34160: LD_VAR 0 1
34164: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34165: LD_ADDR_VAR 0 10
34169: PUSH
34170: LD_VAR 0 10
34174: PPUSH
34175: LD_VAR 0 8
34179: PPUSH
34180: LD_VAR 0 1
34184: PUSH
34185: LD_VAR 0 7
34189: ARRAY
34190: PPUSH
34191: CALL_OW 1
34195: ST_TO_ADDR
// end ;
34196: GO 34109
34198: POP
34199: POP
// array := tmp ;
34200: LD_ADDR_VAR 0 1
34204: PUSH
34205: LD_VAR 0 10
34209: ST_TO_ADDR
// end ;
34210: GO 34091
34212: POP
34213: POP
// result := array ;
34214: LD_ADDR_VAR 0 5
34218: PUSH
34219: LD_VAR 0 1
34223: ST_TO_ADDR
// end ;
34224: LD_VAR 0 5
34228: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34229: LD_INT 0
34231: PPUSH
34232: PPUSH
// result := 0 ;
34233: LD_ADDR_VAR 0 3
34237: PUSH
34238: LD_INT 0
34240: ST_TO_ADDR
// if not array or not value in array then
34241: LD_VAR 0 1
34245: NOT
34246: PUSH
34247: LD_VAR 0 2
34251: PUSH
34252: LD_VAR 0 1
34256: IN
34257: NOT
34258: OR
34259: IFFALSE 34263
// exit ;
34261: GO 34317
// for i = 1 to array do
34263: LD_ADDR_VAR 0 4
34267: PUSH
34268: DOUBLE
34269: LD_INT 1
34271: DEC
34272: ST_TO_ADDR
34273: LD_VAR 0 1
34277: PUSH
34278: FOR_TO
34279: IFFALSE 34315
// if value = array [ i ] then
34281: LD_VAR 0 2
34285: PUSH
34286: LD_VAR 0 1
34290: PUSH
34291: LD_VAR 0 4
34295: ARRAY
34296: EQUAL
34297: IFFALSE 34313
// begin result := i ;
34299: LD_ADDR_VAR 0 3
34303: PUSH
34304: LD_VAR 0 4
34308: ST_TO_ADDR
// exit ;
34309: POP
34310: POP
34311: GO 34317
// end ;
34313: GO 34278
34315: POP
34316: POP
// end ;
34317: LD_VAR 0 3
34321: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34322: LD_INT 0
34324: PPUSH
// vc_chassis := chassis ;
34325: LD_ADDR_OWVAR 37
34329: PUSH
34330: LD_VAR 0 1
34334: ST_TO_ADDR
// vc_engine := engine ;
34335: LD_ADDR_OWVAR 39
34339: PUSH
34340: LD_VAR 0 2
34344: ST_TO_ADDR
// vc_control := control ;
34345: LD_ADDR_OWVAR 38
34349: PUSH
34350: LD_VAR 0 3
34354: ST_TO_ADDR
// vc_weapon := weapon ;
34355: LD_ADDR_OWVAR 40
34359: PUSH
34360: LD_VAR 0 4
34364: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34365: LD_ADDR_OWVAR 41
34369: PUSH
34370: LD_VAR 0 5
34374: ST_TO_ADDR
// end ;
34375: LD_VAR 0 6
34379: RET
// export function WantPlant ( unit ) ; var task ; begin
34380: LD_INT 0
34382: PPUSH
34383: PPUSH
// result := false ;
34384: LD_ADDR_VAR 0 2
34388: PUSH
34389: LD_INT 0
34391: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34392: LD_ADDR_VAR 0 3
34396: PUSH
34397: LD_VAR 0 1
34401: PPUSH
34402: CALL_OW 437
34406: ST_TO_ADDR
// if task then
34407: LD_VAR 0 3
34411: IFFALSE 34439
// if task [ 1 ] [ 1 ] = p then
34413: LD_VAR 0 3
34417: PUSH
34418: LD_INT 1
34420: ARRAY
34421: PUSH
34422: LD_INT 1
34424: ARRAY
34425: PUSH
34426: LD_STRING p
34428: EQUAL
34429: IFFALSE 34439
// result := true ;
34431: LD_ADDR_VAR 0 2
34435: PUSH
34436: LD_INT 1
34438: ST_TO_ADDR
// end ;
34439: LD_VAR 0 2
34443: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34444: LD_INT 0
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
// if pos < 1 then
34450: LD_VAR 0 2
34454: PUSH
34455: LD_INT 1
34457: LESS
34458: IFFALSE 34462
// exit ;
34460: GO 34765
// if pos = 1 then
34462: LD_VAR 0 2
34466: PUSH
34467: LD_INT 1
34469: EQUAL
34470: IFFALSE 34503
// result := Replace ( arr , pos [ 1 ] , value ) else
34472: LD_ADDR_VAR 0 4
34476: PUSH
34477: LD_VAR 0 1
34481: PPUSH
34482: LD_VAR 0 2
34486: PUSH
34487: LD_INT 1
34489: ARRAY
34490: PPUSH
34491: LD_VAR 0 3
34495: PPUSH
34496: CALL_OW 1
34500: ST_TO_ADDR
34501: GO 34765
// begin tmp := arr ;
34503: LD_ADDR_VAR 0 6
34507: PUSH
34508: LD_VAR 0 1
34512: ST_TO_ADDR
// s_arr := [ tmp ] ;
34513: LD_ADDR_VAR 0 7
34517: PUSH
34518: LD_VAR 0 6
34522: PUSH
34523: EMPTY
34524: LIST
34525: ST_TO_ADDR
// for i = 1 to pos - 1 do
34526: LD_ADDR_VAR 0 5
34530: PUSH
34531: DOUBLE
34532: LD_INT 1
34534: DEC
34535: ST_TO_ADDR
34536: LD_VAR 0 2
34540: PUSH
34541: LD_INT 1
34543: MINUS
34544: PUSH
34545: FOR_TO
34546: IFFALSE 34591
// begin tmp := tmp [ pos [ i ] ] ;
34548: LD_ADDR_VAR 0 6
34552: PUSH
34553: LD_VAR 0 6
34557: PUSH
34558: LD_VAR 0 2
34562: PUSH
34563: LD_VAR 0 5
34567: ARRAY
34568: ARRAY
34569: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34570: LD_ADDR_VAR 0 7
34574: PUSH
34575: LD_VAR 0 7
34579: PUSH
34580: LD_VAR 0 6
34584: PUSH
34585: EMPTY
34586: LIST
34587: ADD
34588: ST_TO_ADDR
// end ;
34589: GO 34545
34591: POP
34592: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34593: LD_ADDR_VAR 0 6
34597: PUSH
34598: LD_VAR 0 6
34602: PPUSH
34603: LD_VAR 0 2
34607: PUSH
34608: LD_VAR 0 2
34612: ARRAY
34613: PPUSH
34614: LD_VAR 0 3
34618: PPUSH
34619: CALL_OW 1
34623: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34624: LD_ADDR_VAR 0 7
34628: PUSH
34629: LD_VAR 0 7
34633: PPUSH
34634: LD_VAR 0 7
34638: PPUSH
34639: LD_VAR 0 6
34643: PPUSH
34644: CALL_OW 1
34648: ST_TO_ADDR
// for i = s_arr downto 2 do
34649: LD_ADDR_VAR 0 5
34653: PUSH
34654: DOUBLE
34655: LD_VAR 0 7
34659: INC
34660: ST_TO_ADDR
34661: LD_INT 2
34663: PUSH
34664: FOR_DOWNTO
34665: IFFALSE 34749
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34667: LD_ADDR_VAR 0 6
34671: PUSH
34672: LD_VAR 0 7
34676: PUSH
34677: LD_VAR 0 5
34681: PUSH
34682: LD_INT 1
34684: MINUS
34685: ARRAY
34686: PPUSH
34687: LD_VAR 0 2
34691: PUSH
34692: LD_VAR 0 5
34696: PUSH
34697: LD_INT 1
34699: MINUS
34700: ARRAY
34701: PPUSH
34702: LD_VAR 0 7
34706: PUSH
34707: LD_VAR 0 5
34711: ARRAY
34712: PPUSH
34713: CALL_OW 1
34717: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34718: LD_ADDR_VAR 0 7
34722: PUSH
34723: LD_VAR 0 7
34727: PPUSH
34728: LD_VAR 0 5
34732: PUSH
34733: LD_INT 1
34735: MINUS
34736: PPUSH
34737: LD_VAR 0 6
34741: PPUSH
34742: CALL_OW 1
34746: ST_TO_ADDR
// end ;
34747: GO 34664
34749: POP
34750: POP
// result := s_arr [ 1 ] ;
34751: LD_ADDR_VAR 0 4
34755: PUSH
34756: LD_VAR 0 7
34760: PUSH
34761: LD_INT 1
34763: ARRAY
34764: ST_TO_ADDR
// end ; end ;
34765: LD_VAR 0 4
34769: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34770: LD_INT 0
34772: PPUSH
34773: PPUSH
// if not list then
34774: LD_VAR 0 1
34778: NOT
34779: IFFALSE 34783
// exit ;
34781: GO 34874
// i := list [ pos1 ] ;
34783: LD_ADDR_VAR 0 5
34787: PUSH
34788: LD_VAR 0 1
34792: PUSH
34793: LD_VAR 0 2
34797: ARRAY
34798: ST_TO_ADDR
// if not i then
34799: LD_VAR 0 5
34803: NOT
34804: IFFALSE 34808
// exit ;
34806: GO 34874
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34808: LD_ADDR_VAR 0 1
34812: PUSH
34813: LD_VAR 0 1
34817: PPUSH
34818: LD_VAR 0 2
34822: PPUSH
34823: LD_VAR 0 1
34827: PUSH
34828: LD_VAR 0 3
34832: ARRAY
34833: PPUSH
34834: CALL_OW 1
34838: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34839: LD_ADDR_VAR 0 1
34843: PUSH
34844: LD_VAR 0 1
34848: PPUSH
34849: LD_VAR 0 3
34853: PPUSH
34854: LD_VAR 0 5
34858: PPUSH
34859: CALL_OW 1
34863: ST_TO_ADDR
// result := list ;
34864: LD_ADDR_VAR 0 4
34868: PUSH
34869: LD_VAR 0 1
34873: ST_TO_ADDR
// end ;
34874: LD_VAR 0 4
34878: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34879: LD_INT 0
34881: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34882: LD_ADDR_VAR 0 5
34886: PUSH
34887: LD_VAR 0 1
34891: PPUSH
34892: CALL_OW 250
34896: PPUSH
34897: LD_VAR 0 1
34901: PPUSH
34902: CALL_OW 251
34906: PPUSH
34907: LD_VAR 0 2
34911: PPUSH
34912: LD_VAR 0 3
34916: PPUSH
34917: LD_VAR 0 4
34921: PPUSH
34922: CALL 35300 0 5
34926: ST_TO_ADDR
// end ;
34927: LD_VAR 0 5
34931: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34932: LD_INT 0
34934: PPUSH
34935: PPUSH
34936: PPUSH
34937: PPUSH
// if not list or not unit then
34938: LD_VAR 0 2
34942: NOT
34943: PUSH
34944: LD_VAR 0 1
34948: NOT
34949: OR
34950: IFFALSE 34954
// exit ;
34952: GO 35295
// result := [ ] ;
34954: LD_ADDR_VAR 0 5
34958: PUSH
34959: EMPTY
34960: ST_TO_ADDR
// for i in list do
34961: LD_ADDR_VAR 0 6
34965: PUSH
34966: LD_VAR 0 2
34970: PUSH
34971: FOR_IN
34972: IFFALSE 35190
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34974: LD_ADDR_VAR 0 8
34978: PUSH
34979: LD_VAR 0 1
34983: PPUSH
34984: LD_VAR 0 6
34988: PUSH
34989: LD_INT 1
34991: ARRAY
34992: PPUSH
34993: LD_VAR 0 6
34997: PUSH
34998: LD_INT 2
35000: ARRAY
35001: PPUSH
35002: CALL_OW 297
35006: ST_TO_ADDR
// if not Count ( result ) then
35007: LD_VAR 0 5
35011: PPUSH
35012: CALL 31584 0 1
35016: NOT
35017: IFFALSE 35050
// begin result := Join ( result , [ i , tmp ] ) ;
35019: LD_ADDR_VAR 0 5
35023: PUSH
35024: LD_VAR 0 5
35028: PPUSH
35029: LD_VAR 0 6
35033: PUSH
35034: LD_VAR 0 8
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PPUSH
35043: CALL 67193 0 2
35047: ST_TO_ADDR
// continue ;
35048: GO 34971
// end ; if result [ result ] [ 2 ] <= tmp then
35050: LD_VAR 0 5
35054: PUSH
35055: LD_VAR 0 5
35059: ARRAY
35060: PUSH
35061: LD_INT 2
35063: ARRAY
35064: PUSH
35065: LD_VAR 0 8
35069: LESSEQUAL
35070: IFFALSE 35103
// result := Join ( result , [ i , tmp ] ) else
35072: LD_ADDR_VAR 0 5
35076: PUSH
35077: LD_VAR 0 5
35081: PPUSH
35082: LD_VAR 0 6
35086: PUSH
35087: LD_VAR 0 8
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PPUSH
35096: CALL 67193 0 2
35100: ST_TO_ADDR
35101: GO 35188
// begin for j := 1 to Count ( result ) do
35103: LD_ADDR_VAR 0 7
35107: PUSH
35108: DOUBLE
35109: LD_INT 1
35111: DEC
35112: ST_TO_ADDR
35113: LD_VAR 0 5
35117: PPUSH
35118: CALL 31584 0 1
35122: PUSH
35123: FOR_TO
35124: IFFALSE 35186
// begin if tmp < result [ j ] [ 2 ] then
35126: LD_VAR 0 8
35130: PUSH
35131: LD_VAR 0 5
35135: PUSH
35136: LD_VAR 0 7
35140: ARRAY
35141: PUSH
35142: LD_INT 2
35144: ARRAY
35145: LESS
35146: IFFALSE 35184
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35148: LD_ADDR_VAR 0 5
35152: PUSH
35153: LD_VAR 0 5
35157: PPUSH
35158: LD_VAR 0 7
35162: PPUSH
35163: LD_VAR 0 6
35167: PUSH
35168: LD_VAR 0 8
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PPUSH
35177: CALL_OW 2
35181: ST_TO_ADDR
// break ;
35182: GO 35186
// end ; end ;
35184: GO 35123
35186: POP
35187: POP
// end ; end ;
35188: GO 34971
35190: POP
35191: POP
// if result and not asc then
35192: LD_VAR 0 5
35196: PUSH
35197: LD_VAR 0 3
35201: NOT
35202: AND
35203: IFFALSE 35220
// result := ReverseArray ( result ) ;
35205: LD_ADDR_VAR 0 5
35209: PUSH
35210: LD_VAR 0 5
35214: PPUSH
35215: CALL 62460 0 1
35219: ST_TO_ADDR
// tmp := [ ] ;
35220: LD_ADDR_VAR 0 8
35224: PUSH
35225: EMPTY
35226: ST_TO_ADDR
// if mode then
35227: LD_VAR 0 4
35231: IFFALSE 35295
// begin for i := 1 to result do
35233: LD_ADDR_VAR 0 6
35237: PUSH
35238: DOUBLE
35239: LD_INT 1
35241: DEC
35242: ST_TO_ADDR
35243: LD_VAR 0 5
35247: PUSH
35248: FOR_TO
35249: IFFALSE 35283
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35251: LD_ADDR_VAR 0 8
35255: PUSH
35256: LD_VAR 0 8
35260: PPUSH
35261: LD_VAR 0 5
35265: PUSH
35266: LD_VAR 0 6
35270: ARRAY
35271: PUSH
35272: LD_INT 1
35274: ARRAY
35275: PPUSH
35276: CALL 67193 0 2
35280: ST_TO_ADDR
35281: GO 35248
35283: POP
35284: POP
// result := tmp ;
35285: LD_ADDR_VAR 0 5
35289: PUSH
35290: LD_VAR 0 8
35294: ST_TO_ADDR
// end ; end ;
35295: LD_VAR 0 5
35299: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35300: LD_INT 0
35302: PPUSH
35303: PPUSH
35304: PPUSH
35305: PPUSH
// if not list then
35306: LD_VAR 0 3
35310: NOT
35311: IFFALSE 35315
// exit ;
35313: GO 35703
// result := [ ] ;
35315: LD_ADDR_VAR 0 6
35319: PUSH
35320: EMPTY
35321: ST_TO_ADDR
// for i in list do
35322: LD_ADDR_VAR 0 7
35326: PUSH
35327: LD_VAR 0 3
35331: PUSH
35332: FOR_IN
35333: IFFALSE 35535
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35335: LD_ADDR_VAR 0 9
35339: PUSH
35340: LD_VAR 0 7
35344: PPUSH
35345: LD_VAR 0 1
35349: PPUSH
35350: LD_VAR 0 2
35354: PPUSH
35355: CALL_OW 297
35359: ST_TO_ADDR
// if not result then
35360: LD_VAR 0 6
35364: NOT
35365: IFFALSE 35391
// result := [ [ i , tmp ] ] else
35367: LD_ADDR_VAR 0 6
35371: PUSH
35372: LD_VAR 0 7
35376: PUSH
35377: LD_VAR 0 9
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: EMPTY
35387: LIST
35388: ST_TO_ADDR
35389: GO 35533
// begin if result [ result ] [ 2 ] <= tmp then
35391: LD_VAR 0 6
35395: PUSH
35396: LD_VAR 0 6
35400: ARRAY
35401: PUSH
35402: LD_INT 2
35404: ARRAY
35405: PUSH
35406: LD_VAR 0 9
35410: LESSEQUAL
35411: IFFALSE 35453
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35413: LD_ADDR_VAR 0 6
35417: PUSH
35418: LD_VAR 0 6
35422: PPUSH
35423: LD_VAR 0 6
35427: PUSH
35428: LD_INT 1
35430: PLUS
35431: PPUSH
35432: LD_VAR 0 7
35436: PUSH
35437: LD_VAR 0 9
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PPUSH
35446: CALL_OW 2
35450: ST_TO_ADDR
35451: GO 35533
// for j := 1 to result do
35453: LD_ADDR_VAR 0 8
35457: PUSH
35458: DOUBLE
35459: LD_INT 1
35461: DEC
35462: ST_TO_ADDR
35463: LD_VAR 0 6
35467: PUSH
35468: FOR_TO
35469: IFFALSE 35531
// begin if tmp < result [ j ] [ 2 ] then
35471: LD_VAR 0 9
35475: PUSH
35476: LD_VAR 0 6
35480: PUSH
35481: LD_VAR 0 8
35485: ARRAY
35486: PUSH
35487: LD_INT 2
35489: ARRAY
35490: LESS
35491: IFFALSE 35529
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35493: LD_ADDR_VAR 0 6
35497: PUSH
35498: LD_VAR 0 6
35502: PPUSH
35503: LD_VAR 0 8
35507: PPUSH
35508: LD_VAR 0 7
35512: PUSH
35513: LD_VAR 0 9
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PPUSH
35522: CALL_OW 2
35526: ST_TO_ADDR
// break ;
35527: GO 35531
// end ; end ;
35529: GO 35468
35531: POP
35532: POP
// end ; end ;
35533: GO 35332
35535: POP
35536: POP
// if result and not asc then
35537: LD_VAR 0 6
35541: PUSH
35542: LD_VAR 0 4
35546: NOT
35547: AND
35548: IFFALSE 35623
// begin tmp := result ;
35550: LD_ADDR_VAR 0 9
35554: PUSH
35555: LD_VAR 0 6
35559: ST_TO_ADDR
// for i = tmp downto 1 do
35560: LD_ADDR_VAR 0 7
35564: PUSH
35565: DOUBLE
35566: LD_VAR 0 9
35570: INC
35571: ST_TO_ADDR
35572: LD_INT 1
35574: PUSH
35575: FOR_DOWNTO
35576: IFFALSE 35621
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35578: LD_ADDR_VAR 0 6
35582: PUSH
35583: LD_VAR 0 6
35587: PPUSH
35588: LD_VAR 0 9
35592: PUSH
35593: LD_VAR 0 7
35597: MINUS
35598: PUSH
35599: LD_INT 1
35601: PLUS
35602: PPUSH
35603: LD_VAR 0 9
35607: PUSH
35608: LD_VAR 0 7
35612: ARRAY
35613: PPUSH
35614: CALL_OW 1
35618: ST_TO_ADDR
35619: GO 35575
35621: POP
35622: POP
// end ; tmp := [ ] ;
35623: LD_ADDR_VAR 0 9
35627: PUSH
35628: EMPTY
35629: ST_TO_ADDR
// if mode then
35630: LD_VAR 0 5
35634: IFFALSE 35703
// begin for i = 1 to result do
35636: LD_ADDR_VAR 0 7
35640: PUSH
35641: DOUBLE
35642: LD_INT 1
35644: DEC
35645: ST_TO_ADDR
35646: LD_VAR 0 6
35650: PUSH
35651: FOR_TO
35652: IFFALSE 35691
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35654: LD_ADDR_VAR 0 9
35658: PUSH
35659: LD_VAR 0 9
35663: PPUSH
35664: LD_VAR 0 7
35668: PPUSH
35669: LD_VAR 0 6
35673: PUSH
35674: LD_VAR 0 7
35678: ARRAY
35679: PUSH
35680: LD_INT 1
35682: ARRAY
35683: PPUSH
35684: CALL_OW 1
35688: ST_TO_ADDR
35689: GO 35651
35691: POP
35692: POP
// result := tmp ;
35693: LD_ADDR_VAR 0 6
35697: PUSH
35698: LD_VAR 0 9
35702: ST_TO_ADDR
// end ; end ;
35703: LD_VAR 0 6
35707: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35708: LD_INT 0
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
35715: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35716: LD_ADDR_VAR 0 5
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: EMPTY
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: ST_TO_ADDR
// if not x or not y then
35738: LD_VAR 0 2
35742: NOT
35743: PUSH
35744: LD_VAR 0 3
35748: NOT
35749: OR
35750: IFFALSE 35754
// exit ;
35752: GO 37404
// if not range then
35754: LD_VAR 0 4
35758: NOT
35759: IFFALSE 35769
// range := 10 ;
35761: LD_ADDR_VAR 0 4
35765: PUSH
35766: LD_INT 10
35768: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35769: LD_ADDR_VAR 0 8
35773: PUSH
35774: LD_INT 81
35776: PUSH
35777: LD_VAR 0 1
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 92
35788: PUSH
35789: LD_VAR 0 2
35793: PUSH
35794: LD_VAR 0 3
35798: PUSH
35799: LD_VAR 0 4
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 3
35812: PUSH
35813: LD_INT 21
35815: PUSH
35816: LD_INT 3
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: LIST
35831: PPUSH
35832: CALL_OW 69
35836: ST_TO_ADDR
// if not tmp then
35837: LD_VAR 0 8
35841: NOT
35842: IFFALSE 35846
// exit ;
35844: GO 37404
// for i in tmp do
35846: LD_ADDR_VAR 0 6
35850: PUSH
35851: LD_VAR 0 8
35855: PUSH
35856: FOR_IN
35857: IFFALSE 37379
// begin points := [ 0 , 0 , 0 ] ;
35859: LD_ADDR_VAR 0 9
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: LIST
35877: ST_TO_ADDR
// bpoints := 1 ;
35878: LD_ADDR_VAR 0 10
35882: PUSH
35883: LD_INT 1
35885: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35886: LD_VAR 0 6
35890: PPUSH
35891: CALL_OW 247
35895: PUSH
35896: LD_INT 1
35898: DOUBLE
35899: EQUAL
35900: IFTRUE 35904
35902: GO 36482
35904: POP
// begin if GetClass ( i ) = 1 then
35905: LD_VAR 0 6
35909: PPUSH
35910: CALL_OW 257
35914: PUSH
35915: LD_INT 1
35917: EQUAL
35918: IFFALSE 35939
// points := [ 10 , 5 , 3 ] ;
35920: LD_ADDR_VAR 0 9
35924: PUSH
35925: LD_INT 10
35927: PUSH
35928: LD_INT 5
35930: PUSH
35931: LD_INT 3
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35939: LD_VAR 0 6
35943: PPUSH
35944: CALL_OW 257
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: LD_INT 3
35954: PUSH
35955: LD_INT 4
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: IN
35963: IFFALSE 35984
// points := [ 3 , 2 , 1 ] ;
35965: LD_ADDR_VAR 0 9
35969: PUSH
35970: LD_INT 3
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35984: LD_VAR 0 6
35988: PPUSH
35989: CALL_OW 257
35993: PUSH
35994: LD_INT 5
35996: EQUAL
35997: IFFALSE 36018
// points := [ 130 , 5 , 2 ] ;
35999: LD_ADDR_VAR 0 9
36003: PUSH
36004: LD_INT 130
36006: PUSH
36007: LD_INT 5
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36018: LD_VAR 0 6
36022: PPUSH
36023: CALL_OW 257
36027: PUSH
36028: LD_INT 8
36030: EQUAL
36031: IFFALSE 36052
// points := [ 35 , 35 , 30 ] ;
36033: LD_ADDR_VAR 0 9
36037: PUSH
36038: LD_INT 35
36040: PUSH
36041: LD_INT 35
36043: PUSH
36044: LD_INT 30
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36052: LD_VAR 0 6
36056: PPUSH
36057: CALL_OW 257
36061: PUSH
36062: LD_INT 9
36064: EQUAL
36065: IFFALSE 36086
// points := [ 20 , 55 , 40 ] ;
36067: LD_ADDR_VAR 0 9
36071: PUSH
36072: LD_INT 20
36074: PUSH
36075: LD_INT 55
36077: PUSH
36078: LD_INT 40
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: LIST
36085: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36086: LD_VAR 0 6
36090: PPUSH
36091: CALL_OW 257
36095: PUSH
36096: LD_INT 12
36098: PUSH
36099: LD_INT 16
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: IN
36106: IFFALSE 36127
// points := [ 5 , 3 , 2 ] ;
36108: LD_ADDR_VAR 0 9
36112: PUSH
36113: LD_INT 5
36115: PUSH
36116: LD_INT 3
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36127: LD_VAR 0 6
36131: PPUSH
36132: CALL_OW 257
36136: PUSH
36137: LD_INT 17
36139: EQUAL
36140: IFFALSE 36161
// points := [ 100 , 50 , 75 ] ;
36142: LD_ADDR_VAR 0 9
36146: PUSH
36147: LD_INT 100
36149: PUSH
36150: LD_INT 50
36152: PUSH
36153: LD_INT 75
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36161: LD_VAR 0 6
36165: PPUSH
36166: CALL_OW 257
36170: PUSH
36171: LD_INT 15
36173: EQUAL
36174: IFFALSE 36195
// points := [ 10 , 5 , 3 ] ;
36176: LD_ADDR_VAR 0 9
36180: PUSH
36181: LD_INT 10
36183: PUSH
36184: LD_INT 5
36186: PUSH
36187: LD_INT 3
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36195: LD_VAR 0 6
36199: PPUSH
36200: CALL_OW 257
36204: PUSH
36205: LD_INT 14
36207: EQUAL
36208: IFFALSE 36229
// points := [ 10 , 0 , 0 ] ;
36210: LD_ADDR_VAR 0 9
36214: PUSH
36215: LD_INT 10
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36229: LD_VAR 0 6
36233: PPUSH
36234: CALL_OW 257
36238: PUSH
36239: LD_INT 11
36241: EQUAL
36242: IFFALSE 36263
// points := [ 30 , 10 , 5 ] ;
36244: LD_ADDR_VAR 0 9
36248: PUSH
36249: LD_INT 30
36251: PUSH
36252: LD_INT 10
36254: PUSH
36255: LD_INT 5
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36263: LD_VAR 0 1
36267: PPUSH
36268: LD_INT 5
36270: PPUSH
36271: CALL_OW 321
36275: PUSH
36276: LD_INT 2
36278: EQUAL
36279: IFFALSE 36296
// bpoints := bpoints * 1.8 ;
36281: LD_ADDR_VAR 0 10
36285: PUSH
36286: LD_VAR 0 10
36290: PUSH
36291: LD_REAL  1.80000000000000E+0000
36294: MUL
36295: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36296: LD_VAR 0 6
36300: PPUSH
36301: CALL_OW 257
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: LD_INT 3
36314: PUSH
36315: LD_INT 4
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: IN
36324: PUSH
36325: LD_VAR 0 1
36329: PPUSH
36330: LD_INT 51
36332: PPUSH
36333: CALL_OW 321
36337: PUSH
36338: LD_INT 2
36340: EQUAL
36341: AND
36342: IFFALSE 36359
// bpoints := bpoints * 1.2 ;
36344: LD_ADDR_VAR 0 10
36348: PUSH
36349: LD_VAR 0 10
36353: PUSH
36354: LD_REAL  1.20000000000000E+0000
36357: MUL
36358: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36359: LD_VAR 0 6
36363: PPUSH
36364: CALL_OW 257
36368: PUSH
36369: LD_INT 5
36371: PUSH
36372: LD_INT 7
36374: PUSH
36375: LD_INT 9
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: LIST
36382: IN
36383: PUSH
36384: LD_VAR 0 1
36388: PPUSH
36389: LD_INT 52
36391: PPUSH
36392: CALL_OW 321
36396: PUSH
36397: LD_INT 2
36399: EQUAL
36400: AND
36401: IFFALSE 36418
// bpoints := bpoints * 1.5 ;
36403: LD_ADDR_VAR 0 10
36407: PUSH
36408: LD_VAR 0 10
36412: PUSH
36413: LD_REAL  1.50000000000000E+0000
36416: MUL
36417: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36418: LD_VAR 0 1
36422: PPUSH
36423: LD_INT 66
36425: PPUSH
36426: CALL_OW 321
36430: PUSH
36431: LD_INT 2
36433: EQUAL
36434: IFFALSE 36451
// bpoints := bpoints * 1.1 ;
36436: LD_ADDR_VAR 0 10
36440: PUSH
36441: LD_VAR 0 10
36445: PUSH
36446: LD_REAL  1.10000000000000E+0000
36449: MUL
36450: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36451: LD_ADDR_VAR 0 10
36455: PUSH
36456: LD_VAR 0 10
36460: PUSH
36461: LD_VAR 0 6
36465: PPUSH
36466: LD_INT 1
36468: PPUSH
36469: CALL_OW 259
36473: PUSH
36474: LD_REAL  1.15000000000000E+0000
36477: MUL
36478: MUL
36479: ST_TO_ADDR
// end ; unit_vehicle :
36480: GO 37308
36482: LD_INT 2
36484: DOUBLE
36485: EQUAL
36486: IFTRUE 36490
36488: GO 37296
36490: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36491: LD_VAR 0 6
36495: PPUSH
36496: CALL_OW 264
36500: PUSH
36501: LD_INT 2
36503: PUSH
36504: LD_INT 42
36506: PUSH
36507: LD_INT 24
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: IN
36515: IFFALSE 36536
// points := [ 25 , 5 , 3 ] ;
36517: LD_ADDR_VAR 0 9
36521: PUSH
36522: LD_INT 25
36524: PUSH
36525: LD_INT 5
36527: PUSH
36528: LD_INT 3
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36536: LD_VAR 0 6
36540: PPUSH
36541: CALL_OW 264
36545: PUSH
36546: LD_INT 4
36548: PUSH
36549: LD_INT 43
36551: PUSH
36552: LD_INT 25
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: LIST
36559: IN
36560: IFFALSE 36581
// points := [ 40 , 15 , 5 ] ;
36562: LD_ADDR_VAR 0 9
36566: PUSH
36567: LD_INT 40
36569: PUSH
36570: LD_INT 15
36572: PUSH
36573: LD_INT 5
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36581: LD_VAR 0 6
36585: PPUSH
36586: CALL_OW 264
36590: PUSH
36591: LD_INT 3
36593: PUSH
36594: LD_INT 23
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: IN
36601: IFFALSE 36622
// points := [ 7 , 25 , 8 ] ;
36603: LD_ADDR_VAR 0 9
36607: PUSH
36608: LD_INT 7
36610: PUSH
36611: LD_INT 25
36613: PUSH
36614: LD_INT 8
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36622: LD_VAR 0 6
36626: PPUSH
36627: CALL_OW 264
36631: PUSH
36632: LD_INT 5
36634: PUSH
36635: LD_INT 27
36637: PUSH
36638: LD_INT 44
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: IN
36646: IFFALSE 36667
// points := [ 14 , 50 , 16 ] ;
36648: LD_ADDR_VAR 0 9
36652: PUSH
36653: LD_INT 14
36655: PUSH
36656: LD_INT 50
36658: PUSH
36659: LD_INT 16
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36667: LD_VAR 0 6
36671: PPUSH
36672: CALL_OW 264
36676: PUSH
36677: LD_INT 6
36679: PUSH
36680: LD_INT 46
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: IN
36687: IFFALSE 36708
// points := [ 32 , 120 , 70 ] ;
36689: LD_ADDR_VAR 0 9
36693: PUSH
36694: LD_INT 32
36696: PUSH
36697: LD_INT 120
36699: PUSH
36700: LD_INT 70
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: LIST
36707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36708: LD_VAR 0 6
36712: PPUSH
36713: CALL_OW 264
36717: PUSH
36718: LD_INT 7
36720: PUSH
36721: LD_INT 28
36723: PUSH
36724: LD_INT 45
36726: PUSH
36727: LD_INT 92
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: IN
36736: IFFALSE 36757
// points := [ 35 , 20 , 45 ] ;
36738: LD_ADDR_VAR 0 9
36742: PUSH
36743: LD_INT 35
36745: PUSH
36746: LD_INT 20
36748: PUSH
36749: LD_INT 45
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36757: LD_VAR 0 6
36761: PPUSH
36762: CALL_OW 264
36766: PUSH
36767: LD_INT 47
36769: PUSH
36770: EMPTY
36771: LIST
36772: IN
36773: IFFALSE 36794
// points := [ 67 , 45 , 75 ] ;
36775: LD_ADDR_VAR 0 9
36779: PUSH
36780: LD_INT 67
36782: PUSH
36783: LD_INT 45
36785: PUSH
36786: LD_INT 75
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: LIST
36793: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36794: LD_VAR 0 6
36798: PPUSH
36799: CALL_OW 264
36803: PUSH
36804: LD_INT 26
36806: PUSH
36807: EMPTY
36808: LIST
36809: IN
36810: IFFALSE 36831
// points := [ 120 , 30 , 80 ] ;
36812: LD_ADDR_VAR 0 9
36816: PUSH
36817: LD_INT 120
36819: PUSH
36820: LD_INT 30
36822: PUSH
36823: LD_INT 80
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36831: LD_VAR 0 6
36835: PPUSH
36836: CALL_OW 264
36840: PUSH
36841: LD_INT 22
36843: PUSH
36844: EMPTY
36845: LIST
36846: IN
36847: IFFALSE 36868
// points := [ 40 , 1 , 1 ] ;
36849: LD_ADDR_VAR 0 9
36853: PUSH
36854: LD_INT 40
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36868: LD_VAR 0 6
36872: PPUSH
36873: CALL_OW 264
36877: PUSH
36878: LD_INT 29
36880: PUSH
36881: EMPTY
36882: LIST
36883: IN
36884: IFFALSE 36905
// points := [ 70 , 200 , 400 ] ;
36886: LD_ADDR_VAR 0 9
36890: PUSH
36891: LD_INT 70
36893: PUSH
36894: LD_INT 200
36896: PUSH
36897: LD_INT 400
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36905: LD_VAR 0 6
36909: PPUSH
36910: CALL_OW 264
36914: PUSH
36915: LD_INT 14
36917: PUSH
36918: LD_INT 53
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: IN
36925: IFFALSE 36946
// points := [ 40 , 10 , 20 ] ;
36927: LD_ADDR_VAR 0 9
36931: PUSH
36932: LD_INT 40
36934: PUSH
36935: LD_INT 10
36937: PUSH
36938: LD_INT 20
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36946: LD_VAR 0 6
36950: PPUSH
36951: CALL_OW 264
36955: PUSH
36956: LD_INT 9
36958: PUSH
36959: EMPTY
36960: LIST
36961: IN
36962: IFFALSE 36983
// points := [ 5 , 70 , 20 ] ;
36964: LD_ADDR_VAR 0 9
36968: PUSH
36969: LD_INT 5
36971: PUSH
36972: LD_INT 70
36974: PUSH
36975: LD_INT 20
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: LIST
36982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36983: LD_VAR 0 6
36987: PPUSH
36988: CALL_OW 264
36992: PUSH
36993: LD_INT 10
36995: PUSH
36996: EMPTY
36997: LIST
36998: IN
36999: IFFALSE 37020
// points := [ 35 , 110 , 70 ] ;
37001: LD_ADDR_VAR 0 9
37005: PUSH
37006: LD_INT 35
37008: PUSH
37009: LD_INT 110
37011: PUSH
37012: LD_INT 70
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37020: LD_VAR 0 6
37024: PPUSH
37025: CALL_OW 265
37029: PUSH
37030: LD_INT 25
37032: EQUAL
37033: IFFALSE 37054
// points := [ 80 , 65 , 100 ] ;
37035: LD_ADDR_VAR 0 9
37039: PUSH
37040: LD_INT 80
37042: PUSH
37043: LD_INT 65
37045: PUSH
37046: LD_INT 100
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37054: LD_VAR 0 6
37058: PPUSH
37059: CALL_OW 263
37063: PUSH
37064: LD_INT 1
37066: EQUAL
37067: IFFALSE 37102
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37069: LD_ADDR_VAR 0 10
37073: PUSH
37074: LD_VAR 0 10
37078: PUSH
37079: LD_VAR 0 6
37083: PPUSH
37084: CALL_OW 311
37088: PPUSH
37089: LD_INT 3
37091: PPUSH
37092: CALL_OW 259
37096: PUSH
37097: LD_INT 4
37099: MUL
37100: MUL
37101: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37102: LD_VAR 0 6
37106: PPUSH
37107: CALL_OW 263
37111: PUSH
37112: LD_INT 2
37114: EQUAL
37115: IFFALSE 37166
// begin j := IsControledBy ( i ) ;
37117: LD_ADDR_VAR 0 7
37121: PUSH
37122: LD_VAR 0 6
37126: PPUSH
37127: CALL_OW 312
37131: ST_TO_ADDR
// if j then
37132: LD_VAR 0 7
37136: IFFALSE 37166
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37138: LD_ADDR_VAR 0 10
37142: PUSH
37143: LD_VAR 0 10
37147: PUSH
37148: LD_VAR 0 7
37152: PPUSH
37153: LD_INT 3
37155: PPUSH
37156: CALL_OW 259
37160: PUSH
37161: LD_INT 3
37163: MUL
37164: MUL
37165: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37166: LD_VAR 0 6
37170: PPUSH
37171: CALL_OW 264
37175: PUSH
37176: LD_INT 5
37178: PUSH
37179: LD_INT 6
37181: PUSH
37182: LD_INT 46
37184: PUSH
37185: LD_INT 44
37187: PUSH
37188: LD_INT 47
37190: PUSH
37191: LD_INT 45
37193: PUSH
37194: LD_INT 28
37196: PUSH
37197: LD_INT 7
37199: PUSH
37200: LD_INT 27
37202: PUSH
37203: LD_INT 29
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: IN
37218: PUSH
37219: LD_VAR 0 1
37223: PPUSH
37224: LD_INT 52
37226: PPUSH
37227: CALL_OW 321
37231: PUSH
37232: LD_INT 2
37234: EQUAL
37235: AND
37236: IFFALSE 37253
// bpoints := bpoints * 1.2 ;
37238: LD_ADDR_VAR 0 10
37242: PUSH
37243: LD_VAR 0 10
37247: PUSH
37248: LD_REAL  1.20000000000000E+0000
37251: MUL
37252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37253: LD_VAR 0 6
37257: PPUSH
37258: CALL_OW 264
37262: PUSH
37263: LD_INT 6
37265: PUSH
37266: LD_INT 46
37268: PUSH
37269: LD_INT 47
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: IN
37277: IFFALSE 37294
// bpoints := bpoints * 1.2 ;
37279: LD_ADDR_VAR 0 10
37283: PUSH
37284: LD_VAR 0 10
37288: PUSH
37289: LD_REAL  1.20000000000000E+0000
37292: MUL
37293: ST_TO_ADDR
// end ; unit_building :
37294: GO 37308
37296: LD_INT 3
37298: DOUBLE
37299: EQUAL
37300: IFTRUE 37304
37302: GO 37307
37304: POP
// ; end ;
37305: GO 37308
37307: POP
// for j = 1 to 3 do
37308: LD_ADDR_VAR 0 7
37312: PUSH
37313: DOUBLE
37314: LD_INT 1
37316: DEC
37317: ST_TO_ADDR
37318: LD_INT 3
37320: PUSH
37321: FOR_TO
37322: IFFALSE 37375
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37324: LD_ADDR_VAR 0 5
37328: PUSH
37329: LD_VAR 0 5
37333: PPUSH
37334: LD_VAR 0 7
37338: PPUSH
37339: LD_VAR 0 5
37343: PUSH
37344: LD_VAR 0 7
37348: ARRAY
37349: PUSH
37350: LD_VAR 0 9
37354: PUSH
37355: LD_VAR 0 7
37359: ARRAY
37360: PUSH
37361: LD_VAR 0 10
37365: MUL
37366: PLUS
37367: PPUSH
37368: CALL_OW 1
37372: ST_TO_ADDR
37373: GO 37321
37375: POP
37376: POP
// end ;
37377: GO 35856
37379: POP
37380: POP
// result := Replace ( result , 4 , tmp ) ;
37381: LD_ADDR_VAR 0 5
37385: PUSH
37386: LD_VAR 0 5
37390: PPUSH
37391: LD_INT 4
37393: PPUSH
37394: LD_VAR 0 8
37398: PPUSH
37399: CALL_OW 1
37403: ST_TO_ADDR
// end ;
37404: LD_VAR 0 5
37408: RET
// export function DangerAtRange ( unit , range ) ; begin
37409: LD_INT 0
37411: PPUSH
// if not unit then
37412: LD_VAR 0 1
37416: NOT
37417: IFFALSE 37421
// exit ;
37419: GO 37466
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: LD_VAR 0 1
37430: PPUSH
37431: CALL_OW 255
37435: PPUSH
37436: LD_VAR 0 1
37440: PPUSH
37441: CALL_OW 250
37445: PPUSH
37446: LD_VAR 0 1
37450: PPUSH
37451: CALL_OW 251
37455: PPUSH
37456: LD_VAR 0 2
37460: PPUSH
37461: CALL 35708 0 4
37465: ST_TO_ADDR
// end ;
37466: LD_VAR 0 3
37470: RET
// export function DangerInArea ( side , area ) ; begin
37471: LD_INT 0
37473: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37474: LD_ADDR_VAR 0 3
37478: PUSH
37479: LD_VAR 0 2
37483: PPUSH
37484: LD_INT 81
37486: PUSH
37487: LD_VAR 0 1
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PPUSH
37496: CALL_OW 70
37500: ST_TO_ADDR
// end ;
37501: LD_VAR 0 3
37505: RET
// export function IsExtension ( b ) ; begin
37506: LD_INT 0
37508: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37509: LD_ADDR_VAR 0 2
37513: PUSH
37514: LD_VAR 0 1
37518: PUSH
37519: LD_INT 23
37521: PUSH
37522: LD_INT 20
37524: PUSH
37525: LD_INT 22
37527: PUSH
37528: LD_INT 17
37530: PUSH
37531: LD_INT 24
37533: PUSH
37534: LD_INT 21
37536: PUSH
37537: LD_INT 19
37539: PUSH
37540: LD_INT 16
37542: PUSH
37543: LD_INT 25
37545: PUSH
37546: LD_INT 18
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: IN
37561: ST_TO_ADDR
// end ;
37562: LD_VAR 0 2
37566: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37567: LD_INT 0
37569: PPUSH
37570: PPUSH
37571: PPUSH
// result := [ ] ;
37572: LD_ADDR_VAR 0 4
37576: PUSH
37577: EMPTY
37578: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37579: LD_ADDR_VAR 0 5
37583: PUSH
37584: LD_VAR 0 2
37588: PPUSH
37589: LD_INT 21
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PPUSH
37599: CALL_OW 70
37603: ST_TO_ADDR
// if not tmp then
37604: LD_VAR 0 5
37608: NOT
37609: IFFALSE 37613
// exit ;
37611: GO 37677
// if checkLink then
37613: LD_VAR 0 3
37617: IFFALSE 37667
// begin for i in tmp do
37619: LD_ADDR_VAR 0 6
37623: PUSH
37624: LD_VAR 0 5
37628: PUSH
37629: FOR_IN
37630: IFFALSE 37665
// if GetBase ( i ) <> base then
37632: LD_VAR 0 6
37636: PPUSH
37637: CALL_OW 274
37641: PUSH
37642: LD_VAR 0 1
37646: NONEQUAL
37647: IFFALSE 37663
// ComLinkToBase ( base , i ) ;
37649: LD_VAR 0 1
37653: PPUSH
37654: LD_VAR 0 6
37658: PPUSH
37659: CALL_OW 169
37663: GO 37629
37665: POP
37666: POP
// end ; result := tmp ;
37667: LD_ADDR_VAR 0 4
37671: PUSH
37672: LD_VAR 0 5
37676: ST_TO_ADDR
// end ;
37677: LD_VAR 0 4
37681: RET
// export function ComComplete ( units , b ) ; var i ; begin
37682: LD_INT 0
37684: PPUSH
37685: PPUSH
// if not units then
37686: LD_VAR 0 1
37690: NOT
37691: IFFALSE 37695
// exit ;
37693: GO 37785
// for i in units do
37695: LD_ADDR_VAR 0 4
37699: PUSH
37700: LD_VAR 0 1
37704: PUSH
37705: FOR_IN
37706: IFFALSE 37783
// if BuildingStatus ( b ) = bs_build then
37708: LD_VAR 0 2
37712: PPUSH
37713: CALL_OW 461
37717: PUSH
37718: LD_INT 1
37720: EQUAL
37721: IFFALSE 37781
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37723: LD_VAR 0 4
37727: PPUSH
37728: LD_STRING h
37730: PUSH
37731: LD_VAR 0 2
37735: PPUSH
37736: CALL_OW 250
37740: PUSH
37741: LD_VAR 0 2
37745: PPUSH
37746: CALL_OW 251
37750: PUSH
37751: LD_VAR 0 2
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: PUSH
37774: EMPTY
37775: LIST
37776: PPUSH
37777: CALL_OW 446
37781: GO 37705
37783: POP
37784: POP
// end ;
37785: LD_VAR 0 3
37789: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37790: LD_INT 0
37792: PPUSH
37793: PPUSH
37794: PPUSH
37795: PPUSH
37796: PPUSH
37797: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37798: LD_VAR 0 1
37802: NOT
37803: PUSH
37804: LD_VAR 0 1
37808: PPUSH
37809: CALL_OW 263
37813: PUSH
37814: LD_INT 2
37816: NONEQUAL
37817: OR
37818: IFFALSE 37822
// exit ;
37820: GO 38138
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37822: LD_ADDR_VAR 0 6
37826: PUSH
37827: LD_INT 22
37829: PUSH
37830: LD_VAR 0 1
37834: PPUSH
37835: CALL_OW 255
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: LD_INT 30
37849: PUSH
37850: LD_INT 36
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 34
37859: PUSH
37860: LD_INT 31
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PPUSH
37876: CALL_OW 69
37880: ST_TO_ADDR
// if not tmp then
37881: LD_VAR 0 6
37885: NOT
37886: IFFALSE 37890
// exit ;
37888: GO 38138
// result := [ ] ;
37890: LD_ADDR_VAR 0 2
37894: PUSH
37895: EMPTY
37896: ST_TO_ADDR
// for i in tmp do
37897: LD_ADDR_VAR 0 3
37901: PUSH
37902: LD_VAR 0 6
37906: PUSH
37907: FOR_IN
37908: IFFALSE 37979
// begin t := UnitsInside ( i ) ;
37910: LD_ADDR_VAR 0 4
37914: PUSH
37915: LD_VAR 0 3
37919: PPUSH
37920: CALL_OW 313
37924: ST_TO_ADDR
// if t then
37925: LD_VAR 0 4
37929: IFFALSE 37977
// for j in t do
37931: LD_ADDR_VAR 0 7
37935: PUSH
37936: LD_VAR 0 4
37940: PUSH
37941: FOR_IN
37942: IFFALSE 37975
// result := Replace ( result , result + 1 , j ) ;
37944: LD_ADDR_VAR 0 2
37948: PUSH
37949: LD_VAR 0 2
37953: PPUSH
37954: LD_VAR 0 2
37958: PUSH
37959: LD_INT 1
37961: PLUS
37962: PPUSH
37963: LD_VAR 0 7
37967: PPUSH
37968: CALL_OW 1
37972: ST_TO_ADDR
37973: GO 37941
37975: POP
37976: POP
// end ;
37977: GO 37907
37979: POP
37980: POP
// if not result then
37981: LD_VAR 0 2
37985: NOT
37986: IFFALSE 37990
// exit ;
37988: GO 38138
// mech := result [ 1 ] ;
37990: LD_ADDR_VAR 0 5
37994: PUSH
37995: LD_VAR 0 2
37999: PUSH
38000: LD_INT 1
38002: ARRAY
38003: ST_TO_ADDR
// if result > 1 then
38004: LD_VAR 0 2
38008: PUSH
38009: LD_INT 1
38011: GREATER
38012: IFFALSE 38124
// begin for i = 2 to result do
38014: LD_ADDR_VAR 0 3
38018: PUSH
38019: DOUBLE
38020: LD_INT 2
38022: DEC
38023: ST_TO_ADDR
38024: LD_VAR 0 2
38028: PUSH
38029: FOR_TO
38030: IFFALSE 38122
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38032: LD_ADDR_VAR 0 4
38036: PUSH
38037: LD_VAR 0 2
38041: PUSH
38042: LD_VAR 0 3
38046: ARRAY
38047: PPUSH
38048: LD_INT 3
38050: PPUSH
38051: CALL_OW 259
38055: PUSH
38056: LD_VAR 0 2
38060: PUSH
38061: LD_VAR 0 3
38065: ARRAY
38066: PPUSH
38067: CALL_OW 432
38071: MINUS
38072: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38073: LD_VAR 0 4
38077: PUSH
38078: LD_VAR 0 5
38082: PPUSH
38083: LD_INT 3
38085: PPUSH
38086: CALL_OW 259
38090: PUSH
38091: LD_VAR 0 5
38095: PPUSH
38096: CALL_OW 432
38100: MINUS
38101: GREATEREQUAL
38102: IFFALSE 38120
// mech := result [ i ] ;
38104: LD_ADDR_VAR 0 5
38108: PUSH
38109: LD_VAR 0 2
38113: PUSH
38114: LD_VAR 0 3
38118: ARRAY
38119: ST_TO_ADDR
// end ;
38120: GO 38029
38122: POP
38123: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38124: LD_VAR 0 1
38128: PPUSH
38129: LD_VAR 0 5
38133: PPUSH
38134: CALL_OW 135
// end ;
38138: LD_VAR 0 2
38142: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38143: LD_INT 0
38145: PPUSH
38146: PPUSH
38147: PPUSH
38148: PPUSH
38149: PPUSH
38150: PPUSH
38151: PPUSH
38152: PPUSH
38153: PPUSH
38154: PPUSH
38155: PPUSH
38156: PPUSH
38157: PPUSH
// result := [ ] ;
38158: LD_ADDR_VAR 0 7
38162: PUSH
38163: EMPTY
38164: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38165: LD_VAR 0 1
38169: PPUSH
38170: CALL_OW 266
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: IN
38185: NOT
38186: IFFALSE 38190
// exit ;
38188: GO 39824
// if name then
38190: LD_VAR 0 3
38194: IFFALSE 38210
// SetBName ( base_dep , name ) ;
38196: LD_VAR 0 1
38200: PPUSH
38201: LD_VAR 0 3
38205: PPUSH
38206: CALL_OW 500
// base := GetBase ( base_dep ) ;
38210: LD_ADDR_VAR 0 15
38214: PUSH
38215: LD_VAR 0 1
38219: PPUSH
38220: CALL_OW 274
38224: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38225: LD_ADDR_VAR 0 16
38229: PUSH
38230: LD_VAR 0 1
38234: PPUSH
38235: CALL_OW 255
38239: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38240: LD_ADDR_VAR 0 17
38244: PUSH
38245: LD_VAR 0 1
38249: PPUSH
38250: CALL_OW 248
38254: ST_TO_ADDR
// if sources then
38255: LD_VAR 0 5
38259: IFFALSE 38306
// for i = 1 to 3 do
38261: LD_ADDR_VAR 0 8
38265: PUSH
38266: DOUBLE
38267: LD_INT 1
38269: DEC
38270: ST_TO_ADDR
38271: LD_INT 3
38273: PUSH
38274: FOR_TO
38275: IFFALSE 38304
// AddResourceType ( base , i , sources [ i ] ) ;
38277: LD_VAR 0 15
38281: PPUSH
38282: LD_VAR 0 8
38286: PPUSH
38287: LD_VAR 0 5
38291: PUSH
38292: LD_VAR 0 8
38296: ARRAY
38297: PPUSH
38298: CALL_OW 276
38302: GO 38274
38304: POP
38305: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38306: LD_ADDR_VAR 0 18
38310: PUSH
38311: LD_VAR 0 15
38315: PPUSH
38316: LD_VAR 0 2
38320: PPUSH
38321: LD_INT 1
38323: PPUSH
38324: CALL 37567 0 3
38328: ST_TO_ADDR
// InitHc ;
38329: CALL_OW 19
// InitUc ;
38333: CALL_OW 18
// uc_side := side ;
38337: LD_ADDR_OWVAR 20
38341: PUSH
38342: LD_VAR 0 16
38346: ST_TO_ADDR
// uc_nation := nation ;
38347: LD_ADDR_OWVAR 21
38351: PUSH
38352: LD_VAR 0 17
38356: ST_TO_ADDR
// if buildings then
38357: LD_VAR 0 18
38361: IFFALSE 39683
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38363: LD_ADDR_VAR 0 19
38367: PUSH
38368: LD_VAR 0 18
38372: PPUSH
38373: LD_INT 2
38375: PUSH
38376: LD_INT 30
38378: PUSH
38379: LD_INT 29
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 30
38388: PUSH
38389: LD_INT 30
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: PPUSH
38401: CALL_OW 72
38405: ST_TO_ADDR
// if tmp then
38406: LD_VAR 0 19
38410: IFFALSE 38458
// for i in tmp do
38412: LD_ADDR_VAR 0 8
38416: PUSH
38417: LD_VAR 0 19
38421: PUSH
38422: FOR_IN
38423: IFFALSE 38456
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38425: LD_VAR 0 8
38429: PPUSH
38430: CALL_OW 250
38434: PPUSH
38435: LD_VAR 0 8
38439: PPUSH
38440: CALL_OW 251
38444: PPUSH
38445: LD_VAR 0 16
38449: PPUSH
38450: CALL_OW 441
38454: GO 38422
38456: POP
38457: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38458: LD_VAR 0 18
38462: PPUSH
38463: LD_INT 2
38465: PUSH
38466: LD_INT 30
38468: PUSH
38469: LD_INT 32
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 30
38478: PUSH
38479: LD_INT 33
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: PPUSH
38491: CALL_OW 72
38495: IFFALSE 38583
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38497: LD_ADDR_VAR 0 8
38501: PUSH
38502: LD_VAR 0 18
38506: PPUSH
38507: LD_INT 2
38509: PUSH
38510: LD_INT 30
38512: PUSH
38513: LD_INT 32
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 30
38522: PUSH
38523: LD_INT 33
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: PPUSH
38535: CALL_OW 72
38539: PUSH
38540: FOR_IN
38541: IFFALSE 38581
// begin if not GetBWeapon ( i ) then
38543: LD_VAR 0 8
38547: PPUSH
38548: CALL_OW 269
38552: NOT
38553: IFFALSE 38579
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38555: LD_VAR 0 8
38559: PPUSH
38560: LD_VAR 0 8
38564: PPUSH
38565: LD_VAR 0 2
38569: PPUSH
38570: CALL 39829 0 2
38574: PPUSH
38575: CALL_OW 431
// end ;
38579: GO 38540
38581: POP
38582: POP
// end ; for i = 1 to personel do
38583: LD_ADDR_VAR 0 8
38587: PUSH
38588: DOUBLE
38589: LD_INT 1
38591: DEC
38592: ST_TO_ADDR
38593: LD_VAR 0 6
38597: PUSH
38598: FOR_TO
38599: IFFALSE 39663
// begin if i > 4 then
38601: LD_VAR 0 8
38605: PUSH
38606: LD_INT 4
38608: GREATER
38609: IFFALSE 38613
// break ;
38611: GO 39663
// case i of 1 :
38613: LD_VAR 0 8
38617: PUSH
38618: LD_INT 1
38620: DOUBLE
38621: EQUAL
38622: IFTRUE 38626
38624: GO 38706
38626: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38627: LD_ADDR_VAR 0 12
38631: PUSH
38632: LD_VAR 0 18
38636: PPUSH
38637: LD_INT 22
38639: PUSH
38640: LD_VAR 0 16
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 58
38651: PUSH
38652: EMPTY
38653: LIST
38654: PUSH
38655: LD_INT 2
38657: PUSH
38658: LD_INT 30
38660: PUSH
38661: LD_INT 32
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 30
38670: PUSH
38671: LD_INT 4
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 30
38680: PUSH
38681: LD_INT 5
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: PPUSH
38699: CALL_OW 72
38703: ST_TO_ADDR
38704: GO 38928
38706: LD_INT 2
38708: DOUBLE
38709: EQUAL
38710: IFTRUE 38714
38712: GO 38776
38714: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38715: LD_ADDR_VAR 0 12
38719: PUSH
38720: LD_VAR 0 18
38724: PPUSH
38725: LD_INT 22
38727: PUSH
38728: LD_VAR 0 16
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 2
38739: PUSH
38740: LD_INT 30
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 30
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PPUSH
38769: CALL_OW 72
38773: ST_TO_ADDR
38774: GO 38928
38776: LD_INT 3
38778: DOUBLE
38779: EQUAL
38780: IFTRUE 38784
38782: GO 38846
38784: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38785: LD_ADDR_VAR 0 12
38789: PUSH
38790: LD_VAR 0 18
38794: PPUSH
38795: LD_INT 22
38797: PUSH
38798: LD_VAR 0 16
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: LD_INT 30
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 30
38822: PUSH
38823: LD_INT 3
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: LIST
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PPUSH
38839: CALL_OW 72
38843: ST_TO_ADDR
38844: GO 38928
38846: LD_INT 4
38848: DOUBLE
38849: EQUAL
38850: IFTRUE 38854
38852: GO 38927
38854: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38855: LD_ADDR_VAR 0 12
38859: PUSH
38860: LD_VAR 0 18
38864: PPUSH
38865: LD_INT 22
38867: PUSH
38868: LD_VAR 0 16
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 30
38882: PUSH
38883: LD_INT 6
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 30
38892: PUSH
38893: LD_INT 7
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 30
38902: PUSH
38903: LD_INT 8
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PPUSH
38920: CALL_OW 72
38924: ST_TO_ADDR
38925: GO 38928
38927: POP
// if i = 1 then
38928: LD_VAR 0 8
38932: PUSH
38933: LD_INT 1
38935: EQUAL
38936: IFFALSE 39047
// begin tmp := [ ] ;
38938: LD_ADDR_VAR 0 19
38942: PUSH
38943: EMPTY
38944: ST_TO_ADDR
// for j in f do
38945: LD_ADDR_VAR 0 9
38949: PUSH
38950: LD_VAR 0 12
38954: PUSH
38955: FOR_IN
38956: IFFALSE 39029
// if GetBType ( j ) = b_bunker then
38958: LD_VAR 0 9
38962: PPUSH
38963: CALL_OW 266
38967: PUSH
38968: LD_INT 32
38970: EQUAL
38971: IFFALSE 38998
// tmp := Insert ( tmp , 1 , j ) else
38973: LD_ADDR_VAR 0 19
38977: PUSH
38978: LD_VAR 0 19
38982: PPUSH
38983: LD_INT 1
38985: PPUSH
38986: LD_VAR 0 9
38990: PPUSH
38991: CALL_OW 2
38995: ST_TO_ADDR
38996: GO 39027
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38998: LD_ADDR_VAR 0 19
39002: PUSH
39003: LD_VAR 0 19
39007: PPUSH
39008: LD_VAR 0 19
39012: PUSH
39013: LD_INT 1
39015: PLUS
39016: PPUSH
39017: LD_VAR 0 9
39021: PPUSH
39022: CALL_OW 2
39026: ST_TO_ADDR
39027: GO 38955
39029: POP
39030: POP
// if tmp then
39031: LD_VAR 0 19
39035: IFFALSE 39047
// f := tmp ;
39037: LD_ADDR_VAR 0 12
39041: PUSH
39042: LD_VAR 0 19
39046: ST_TO_ADDR
// end ; x := personel [ i ] ;
39047: LD_ADDR_VAR 0 13
39051: PUSH
39052: LD_VAR 0 6
39056: PUSH
39057: LD_VAR 0 8
39061: ARRAY
39062: ST_TO_ADDR
// if x = - 1 then
39063: LD_VAR 0 13
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: EQUAL
39072: IFFALSE 39281
// begin for j in f do
39074: LD_ADDR_VAR 0 9
39078: PUSH
39079: LD_VAR 0 12
39083: PUSH
39084: FOR_IN
39085: IFFALSE 39277
// repeat InitHc ;
39087: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39091: LD_VAR 0 9
39095: PPUSH
39096: CALL_OW 266
39100: PUSH
39101: LD_INT 5
39103: EQUAL
39104: IFFALSE 39174
// begin if UnitsInside ( j ) < 3 then
39106: LD_VAR 0 9
39110: PPUSH
39111: CALL_OW 313
39115: PUSH
39116: LD_INT 3
39118: LESS
39119: IFFALSE 39155
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39121: LD_INT 0
39123: PPUSH
39124: LD_INT 5
39126: PUSH
39127: LD_INT 8
39129: PUSH
39130: LD_INT 9
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: PUSH
39138: LD_VAR 0 17
39142: ARRAY
39143: PPUSH
39144: LD_VAR 0 4
39148: PPUSH
39149: CALL_OW 380
39153: GO 39172
// PrepareHuman ( false , i , skill ) ;
39155: LD_INT 0
39157: PPUSH
39158: LD_VAR 0 8
39162: PPUSH
39163: LD_VAR 0 4
39167: PPUSH
39168: CALL_OW 380
// end else
39172: GO 39191
// PrepareHuman ( false , i , skill ) ;
39174: LD_INT 0
39176: PPUSH
39177: LD_VAR 0 8
39181: PPUSH
39182: LD_VAR 0 4
39186: PPUSH
39187: CALL_OW 380
// un := CreateHuman ;
39191: LD_ADDR_VAR 0 14
39195: PUSH
39196: CALL_OW 44
39200: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39201: LD_ADDR_VAR 0 7
39205: PUSH
39206: LD_VAR 0 7
39210: PPUSH
39211: LD_INT 1
39213: PPUSH
39214: LD_VAR 0 14
39218: PPUSH
39219: CALL_OW 2
39223: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39224: LD_VAR 0 14
39228: PPUSH
39229: LD_VAR 0 9
39233: PPUSH
39234: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39238: LD_VAR 0 9
39242: PPUSH
39243: CALL_OW 313
39247: PUSH
39248: LD_INT 6
39250: EQUAL
39251: PUSH
39252: LD_VAR 0 9
39256: PPUSH
39257: CALL_OW 266
39261: PUSH
39262: LD_INT 32
39264: PUSH
39265: LD_INT 31
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: IN
39272: OR
39273: IFFALSE 39087
39275: GO 39084
39277: POP
39278: POP
// end else
39279: GO 39661
// for j = 1 to x do
39281: LD_ADDR_VAR 0 9
39285: PUSH
39286: DOUBLE
39287: LD_INT 1
39289: DEC
39290: ST_TO_ADDR
39291: LD_VAR 0 13
39295: PUSH
39296: FOR_TO
39297: IFFALSE 39659
// begin InitHc ;
39299: CALL_OW 19
// if not f then
39303: LD_VAR 0 12
39307: NOT
39308: IFFALSE 39397
// begin PrepareHuman ( false , i , skill ) ;
39310: LD_INT 0
39312: PPUSH
39313: LD_VAR 0 8
39317: PPUSH
39318: LD_VAR 0 4
39322: PPUSH
39323: CALL_OW 380
// un := CreateHuman ;
39327: LD_ADDR_VAR 0 14
39331: PUSH
39332: CALL_OW 44
39336: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39337: LD_ADDR_VAR 0 7
39341: PUSH
39342: LD_VAR 0 7
39346: PPUSH
39347: LD_INT 1
39349: PPUSH
39350: LD_VAR 0 14
39354: PPUSH
39355: CALL_OW 2
39359: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39360: LD_VAR 0 14
39364: PPUSH
39365: LD_VAR 0 1
39369: PPUSH
39370: CALL_OW 250
39374: PPUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 251
39384: PPUSH
39385: LD_INT 10
39387: PPUSH
39388: LD_INT 0
39390: PPUSH
39391: CALL_OW 50
// continue ;
39395: GO 39296
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39397: LD_VAR 0 12
39401: PUSH
39402: LD_INT 1
39404: ARRAY
39405: PPUSH
39406: CALL_OW 313
39410: PUSH
39411: LD_VAR 0 12
39415: PUSH
39416: LD_INT 1
39418: ARRAY
39419: PPUSH
39420: CALL_OW 266
39424: PUSH
39425: LD_INT 32
39427: PUSH
39428: LD_INT 31
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: IN
39435: AND
39436: PUSH
39437: LD_VAR 0 12
39441: PUSH
39442: LD_INT 1
39444: ARRAY
39445: PPUSH
39446: CALL_OW 313
39450: PUSH
39451: LD_INT 6
39453: EQUAL
39454: OR
39455: IFFALSE 39475
// f := Delete ( f , 1 ) ;
39457: LD_ADDR_VAR 0 12
39461: PUSH
39462: LD_VAR 0 12
39466: PPUSH
39467: LD_INT 1
39469: PPUSH
39470: CALL_OW 3
39474: ST_TO_ADDR
// if not f then
39475: LD_VAR 0 12
39479: NOT
39480: IFFALSE 39498
// begin x := x + 2 ;
39482: LD_ADDR_VAR 0 13
39486: PUSH
39487: LD_VAR 0 13
39491: PUSH
39492: LD_INT 2
39494: PLUS
39495: ST_TO_ADDR
// continue ;
39496: GO 39296
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39498: LD_VAR 0 12
39502: PUSH
39503: LD_INT 1
39505: ARRAY
39506: PPUSH
39507: CALL_OW 266
39511: PUSH
39512: LD_INT 5
39514: EQUAL
39515: IFFALSE 39589
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39517: LD_VAR 0 12
39521: PUSH
39522: LD_INT 1
39524: ARRAY
39525: PPUSH
39526: CALL_OW 313
39530: PUSH
39531: LD_INT 3
39533: LESS
39534: IFFALSE 39570
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39536: LD_INT 0
39538: PPUSH
39539: LD_INT 5
39541: PUSH
39542: LD_INT 8
39544: PUSH
39545: LD_INT 9
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: LIST
39552: PUSH
39553: LD_VAR 0 17
39557: ARRAY
39558: PPUSH
39559: LD_VAR 0 4
39563: PPUSH
39564: CALL_OW 380
39568: GO 39587
// PrepareHuman ( false , i , skill ) ;
39570: LD_INT 0
39572: PPUSH
39573: LD_VAR 0 8
39577: PPUSH
39578: LD_VAR 0 4
39582: PPUSH
39583: CALL_OW 380
// end else
39587: GO 39606
// PrepareHuman ( false , i , skill ) ;
39589: LD_INT 0
39591: PPUSH
39592: LD_VAR 0 8
39596: PPUSH
39597: LD_VAR 0 4
39601: PPUSH
39602: CALL_OW 380
// un := CreateHuman ;
39606: LD_ADDR_VAR 0 14
39610: PUSH
39611: CALL_OW 44
39615: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39616: LD_ADDR_VAR 0 7
39620: PUSH
39621: LD_VAR 0 7
39625: PPUSH
39626: LD_INT 1
39628: PPUSH
39629: LD_VAR 0 14
39633: PPUSH
39634: CALL_OW 2
39638: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39639: LD_VAR 0 14
39643: PPUSH
39644: LD_VAR 0 12
39648: PUSH
39649: LD_INT 1
39651: ARRAY
39652: PPUSH
39653: CALL_OW 52
// end ;
39657: GO 39296
39659: POP
39660: POP
// end ;
39661: GO 38598
39663: POP
39664: POP
// result := result ^ buildings ;
39665: LD_ADDR_VAR 0 7
39669: PUSH
39670: LD_VAR 0 7
39674: PUSH
39675: LD_VAR 0 18
39679: ADD
39680: ST_TO_ADDR
// end else
39681: GO 39824
// begin for i = 1 to personel do
39683: LD_ADDR_VAR 0 8
39687: PUSH
39688: DOUBLE
39689: LD_INT 1
39691: DEC
39692: ST_TO_ADDR
39693: LD_VAR 0 6
39697: PUSH
39698: FOR_TO
39699: IFFALSE 39822
// begin if i > 4 then
39701: LD_VAR 0 8
39705: PUSH
39706: LD_INT 4
39708: GREATER
39709: IFFALSE 39713
// break ;
39711: GO 39822
// x := personel [ i ] ;
39713: LD_ADDR_VAR 0 13
39717: PUSH
39718: LD_VAR 0 6
39722: PUSH
39723: LD_VAR 0 8
39727: ARRAY
39728: ST_TO_ADDR
// if x = - 1 then
39729: LD_VAR 0 13
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: EQUAL
39738: IFFALSE 39742
// continue ;
39740: GO 39698
// PrepareHuman ( false , i , skill ) ;
39742: LD_INT 0
39744: PPUSH
39745: LD_VAR 0 8
39749: PPUSH
39750: LD_VAR 0 4
39754: PPUSH
39755: CALL_OW 380
// un := CreateHuman ;
39759: LD_ADDR_VAR 0 14
39763: PUSH
39764: CALL_OW 44
39768: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39769: LD_VAR 0 14
39773: PPUSH
39774: LD_VAR 0 1
39778: PPUSH
39779: CALL_OW 250
39783: PPUSH
39784: LD_VAR 0 1
39788: PPUSH
39789: CALL_OW 251
39793: PPUSH
39794: LD_INT 10
39796: PPUSH
39797: LD_INT 0
39799: PPUSH
39800: CALL_OW 50
// result := result ^ un ;
39804: LD_ADDR_VAR 0 7
39808: PUSH
39809: LD_VAR 0 7
39813: PUSH
39814: LD_VAR 0 14
39818: ADD
39819: ST_TO_ADDR
// end ;
39820: GO 39698
39822: POP
39823: POP
// end ; end ;
39824: LD_VAR 0 7
39828: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39829: LD_INT 0
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
// result := false ;
39847: LD_ADDR_VAR 0 3
39851: PUSH
39852: LD_INT 0
39854: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39855: LD_VAR 0 1
39859: NOT
39860: PUSH
39861: LD_VAR 0 1
39865: PPUSH
39866: CALL_OW 266
39870: PUSH
39871: LD_INT 32
39873: PUSH
39874: LD_INT 33
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: IN
39881: NOT
39882: OR
39883: IFFALSE 39887
// exit ;
39885: GO 40996
// nat := GetNation ( tower ) ;
39887: LD_ADDR_VAR 0 12
39891: PUSH
39892: LD_VAR 0 1
39896: PPUSH
39897: CALL_OW 248
39901: ST_TO_ADDR
// side := GetSide ( tower ) ;
39902: LD_ADDR_VAR 0 16
39906: PUSH
39907: LD_VAR 0 1
39911: PPUSH
39912: CALL_OW 255
39916: ST_TO_ADDR
// x := GetX ( tower ) ;
39917: LD_ADDR_VAR 0 10
39921: PUSH
39922: LD_VAR 0 1
39926: PPUSH
39927: CALL_OW 250
39931: ST_TO_ADDR
// y := GetY ( tower ) ;
39932: LD_ADDR_VAR 0 11
39936: PUSH
39937: LD_VAR 0 1
39941: PPUSH
39942: CALL_OW 251
39946: ST_TO_ADDR
// if not x or not y then
39947: LD_VAR 0 10
39951: NOT
39952: PUSH
39953: LD_VAR 0 11
39957: NOT
39958: OR
39959: IFFALSE 39963
// exit ;
39961: GO 40996
// weapon := 0 ;
39963: LD_ADDR_VAR 0 18
39967: PUSH
39968: LD_INT 0
39970: ST_TO_ADDR
// fac_list := [ ] ;
39971: LD_ADDR_VAR 0 17
39975: PUSH
39976: EMPTY
39977: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39978: LD_ADDR_VAR 0 6
39982: PUSH
39983: LD_VAR 0 1
39987: PPUSH
39988: CALL_OW 274
39992: PPUSH
39993: LD_VAR 0 2
39997: PPUSH
39998: LD_INT 0
40000: PPUSH
40001: CALL 37567 0 3
40005: PPUSH
40006: LD_INT 30
40008: PUSH
40009: LD_INT 3
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PPUSH
40016: CALL_OW 72
40020: ST_TO_ADDR
// if not factories then
40021: LD_VAR 0 6
40025: NOT
40026: IFFALSE 40030
// exit ;
40028: GO 40996
// for i in factories do
40030: LD_ADDR_VAR 0 8
40034: PUSH
40035: LD_VAR 0 6
40039: PUSH
40040: FOR_IN
40041: IFFALSE 40066
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40043: LD_ADDR_VAR 0 17
40047: PUSH
40048: LD_VAR 0 17
40052: PUSH
40053: LD_VAR 0 8
40057: PPUSH
40058: CALL_OW 478
40062: UNION
40063: ST_TO_ADDR
40064: GO 40040
40066: POP
40067: POP
// if not fac_list then
40068: LD_VAR 0 17
40072: NOT
40073: IFFALSE 40077
// exit ;
40075: GO 40996
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40077: LD_ADDR_VAR 0 5
40081: PUSH
40082: LD_INT 4
40084: PUSH
40085: LD_INT 5
40087: PUSH
40088: LD_INT 9
40090: PUSH
40091: LD_INT 10
40093: PUSH
40094: LD_INT 6
40096: PUSH
40097: LD_INT 7
40099: PUSH
40100: LD_INT 11
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 27
40114: PUSH
40115: LD_INT 28
40117: PUSH
40118: LD_INT 26
40120: PUSH
40121: LD_INT 30
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 43
40132: PUSH
40133: LD_INT 44
40135: PUSH
40136: LD_INT 46
40138: PUSH
40139: LD_INT 45
40141: PUSH
40142: LD_INT 47
40144: PUSH
40145: LD_INT 49
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: PUSH
40161: LD_VAR 0 12
40165: ARRAY
40166: ST_TO_ADDR
// list := list isect fac_list ;
40167: LD_ADDR_VAR 0 5
40171: PUSH
40172: LD_VAR 0 5
40176: PUSH
40177: LD_VAR 0 17
40181: ISECT
40182: ST_TO_ADDR
// if not list then
40183: LD_VAR 0 5
40187: NOT
40188: IFFALSE 40192
// exit ;
40190: GO 40996
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40192: LD_VAR 0 12
40196: PUSH
40197: LD_INT 3
40199: EQUAL
40200: PUSH
40201: LD_INT 49
40203: PUSH
40204: LD_VAR 0 5
40208: IN
40209: AND
40210: PUSH
40211: LD_INT 31
40213: PPUSH
40214: LD_VAR 0 16
40218: PPUSH
40219: CALL_OW 321
40223: PUSH
40224: LD_INT 2
40226: EQUAL
40227: AND
40228: IFFALSE 40288
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40230: LD_INT 22
40232: PUSH
40233: LD_VAR 0 16
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 35
40244: PUSH
40245: LD_INT 49
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 91
40254: PUSH
40255: LD_VAR 0 1
40259: PUSH
40260: LD_INT 10
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: LIST
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: LIST
40272: PPUSH
40273: CALL_OW 69
40277: NOT
40278: IFFALSE 40288
// weapon := ru_time_lapser ;
40280: LD_ADDR_VAR 0 18
40284: PUSH
40285: LD_INT 49
40287: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40288: LD_VAR 0 12
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: IN
40303: PUSH
40304: LD_INT 11
40306: PUSH
40307: LD_VAR 0 5
40311: IN
40312: PUSH
40313: LD_INT 30
40315: PUSH
40316: LD_VAR 0 5
40320: IN
40321: OR
40322: AND
40323: PUSH
40324: LD_INT 6
40326: PPUSH
40327: LD_VAR 0 16
40331: PPUSH
40332: CALL_OW 321
40336: PUSH
40337: LD_INT 2
40339: EQUAL
40340: AND
40341: IFFALSE 40506
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40343: LD_INT 22
40345: PUSH
40346: LD_VAR 0 16
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 35
40360: PUSH
40361: LD_INT 11
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 35
40370: PUSH
40371: LD_INT 30
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 91
40385: PUSH
40386: LD_VAR 0 1
40390: PUSH
40391: LD_INT 18
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: LIST
40403: PPUSH
40404: CALL_OW 69
40408: NOT
40409: PUSH
40410: LD_INT 22
40412: PUSH
40413: LD_VAR 0 16
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: LD_INT 30
40427: PUSH
40428: LD_INT 32
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 30
40437: PUSH
40438: LD_INT 33
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 91
40452: PUSH
40453: LD_VAR 0 1
40457: PUSH
40458: LD_INT 12
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: LIST
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: PUSH
40471: EMPTY
40472: LIST
40473: PPUSH
40474: CALL_OW 69
40478: PUSH
40479: LD_INT 2
40481: GREATER
40482: AND
40483: IFFALSE 40506
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40485: LD_ADDR_VAR 0 18
40489: PUSH
40490: LD_INT 11
40492: PUSH
40493: LD_INT 30
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_VAR 0 12
40504: ARRAY
40505: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40506: LD_VAR 0 18
40510: NOT
40511: PUSH
40512: LD_INT 40
40514: PPUSH
40515: LD_VAR 0 16
40519: PPUSH
40520: CALL_OW 321
40524: PUSH
40525: LD_INT 2
40527: EQUAL
40528: AND
40529: PUSH
40530: LD_INT 7
40532: PUSH
40533: LD_VAR 0 5
40537: IN
40538: PUSH
40539: LD_INT 28
40541: PUSH
40542: LD_VAR 0 5
40546: IN
40547: OR
40548: PUSH
40549: LD_INT 45
40551: PUSH
40552: LD_VAR 0 5
40556: IN
40557: OR
40558: AND
40559: IFFALSE 40813
// begin hex := GetHexInfo ( x , y ) ;
40561: LD_ADDR_VAR 0 4
40565: PUSH
40566: LD_VAR 0 10
40570: PPUSH
40571: LD_VAR 0 11
40575: PPUSH
40576: CALL_OW 546
40580: ST_TO_ADDR
// if hex [ 1 ] then
40581: LD_VAR 0 4
40585: PUSH
40586: LD_INT 1
40588: ARRAY
40589: IFFALSE 40593
// exit ;
40591: GO 40996
// height := hex [ 2 ] ;
40593: LD_ADDR_VAR 0 15
40597: PUSH
40598: LD_VAR 0 4
40602: PUSH
40603: LD_INT 2
40605: ARRAY
40606: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40607: LD_ADDR_VAR 0 14
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: LD_INT 3
40620: PUSH
40621: LD_INT 5
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: ST_TO_ADDR
// for i in tmp do
40630: LD_ADDR_VAR 0 8
40634: PUSH
40635: LD_VAR 0 14
40639: PUSH
40640: FOR_IN
40641: IFFALSE 40811
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40643: LD_ADDR_VAR 0 9
40647: PUSH
40648: LD_VAR 0 10
40652: PPUSH
40653: LD_VAR 0 8
40657: PPUSH
40658: LD_INT 5
40660: PPUSH
40661: CALL_OW 272
40665: PUSH
40666: LD_VAR 0 11
40670: PPUSH
40671: LD_VAR 0 8
40675: PPUSH
40676: LD_INT 5
40678: PPUSH
40679: CALL_OW 273
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40688: LD_VAR 0 9
40692: PUSH
40693: LD_INT 1
40695: ARRAY
40696: PPUSH
40697: LD_VAR 0 9
40701: PUSH
40702: LD_INT 2
40704: ARRAY
40705: PPUSH
40706: CALL_OW 488
40710: IFFALSE 40809
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40712: LD_ADDR_VAR 0 4
40716: PUSH
40717: LD_VAR 0 9
40721: PUSH
40722: LD_INT 1
40724: ARRAY
40725: PPUSH
40726: LD_VAR 0 9
40730: PUSH
40731: LD_INT 2
40733: ARRAY
40734: PPUSH
40735: CALL_OW 546
40739: ST_TO_ADDR
// if hex [ 1 ] then
40740: LD_VAR 0 4
40744: PUSH
40745: LD_INT 1
40747: ARRAY
40748: IFFALSE 40752
// continue ;
40750: GO 40640
// h := hex [ 2 ] ;
40752: LD_ADDR_VAR 0 13
40756: PUSH
40757: LD_VAR 0 4
40761: PUSH
40762: LD_INT 2
40764: ARRAY
40765: ST_TO_ADDR
// if h + 7 < height then
40766: LD_VAR 0 13
40770: PUSH
40771: LD_INT 7
40773: PLUS
40774: PUSH
40775: LD_VAR 0 15
40779: LESS
40780: IFFALSE 40809
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40782: LD_ADDR_VAR 0 18
40786: PUSH
40787: LD_INT 7
40789: PUSH
40790: LD_INT 28
40792: PUSH
40793: LD_INT 45
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: LIST
40800: PUSH
40801: LD_VAR 0 12
40805: ARRAY
40806: ST_TO_ADDR
// break ;
40807: GO 40811
// end ; end ; end ;
40809: GO 40640
40811: POP
40812: POP
// end ; if not weapon then
40813: LD_VAR 0 18
40817: NOT
40818: IFFALSE 40878
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40820: LD_ADDR_VAR 0 5
40824: PUSH
40825: LD_VAR 0 5
40829: PUSH
40830: LD_INT 11
40832: PUSH
40833: LD_INT 30
40835: PUSH
40836: LD_INT 49
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: LIST
40843: DIFF
40844: ST_TO_ADDR
// if not list then
40845: LD_VAR 0 5
40849: NOT
40850: IFFALSE 40854
// exit ;
40852: GO 40996
// weapon := list [ rand ( 1 , list ) ] ;
40854: LD_ADDR_VAR 0 18
40858: PUSH
40859: LD_VAR 0 5
40863: PUSH
40864: LD_INT 1
40866: PPUSH
40867: LD_VAR 0 5
40871: PPUSH
40872: CALL_OW 12
40876: ARRAY
40877: ST_TO_ADDR
// end ; if weapon then
40878: LD_VAR 0 18
40882: IFFALSE 40996
// begin tmp := CostOfWeapon ( weapon ) ;
40884: LD_ADDR_VAR 0 14
40888: PUSH
40889: LD_VAR 0 18
40893: PPUSH
40894: CALL_OW 451
40898: ST_TO_ADDR
// j := GetBase ( tower ) ;
40899: LD_ADDR_VAR 0 9
40903: PUSH
40904: LD_VAR 0 1
40908: PPUSH
40909: CALL_OW 274
40913: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40914: LD_VAR 0 9
40918: PPUSH
40919: LD_INT 1
40921: PPUSH
40922: CALL_OW 275
40926: PUSH
40927: LD_VAR 0 14
40931: PUSH
40932: LD_INT 1
40934: ARRAY
40935: GREATEREQUAL
40936: PUSH
40937: LD_VAR 0 9
40941: PPUSH
40942: LD_INT 2
40944: PPUSH
40945: CALL_OW 275
40949: PUSH
40950: LD_VAR 0 14
40954: PUSH
40955: LD_INT 2
40957: ARRAY
40958: GREATEREQUAL
40959: AND
40960: PUSH
40961: LD_VAR 0 9
40965: PPUSH
40966: LD_INT 3
40968: PPUSH
40969: CALL_OW 275
40973: PUSH
40974: LD_VAR 0 14
40978: PUSH
40979: LD_INT 3
40981: ARRAY
40982: GREATEREQUAL
40983: AND
40984: IFFALSE 40996
// result := weapon ;
40986: LD_ADDR_VAR 0 3
40990: PUSH
40991: LD_VAR 0 18
40995: ST_TO_ADDR
// end ; end ;
40996: LD_VAR 0 3
41000: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41001: LD_INT 0
41003: PPUSH
41004: PPUSH
// result := true ;
41005: LD_ADDR_VAR 0 3
41009: PUSH
41010: LD_INT 1
41012: ST_TO_ADDR
// if array1 = array2 then
41013: LD_VAR 0 1
41017: PUSH
41018: LD_VAR 0 2
41022: EQUAL
41023: IFFALSE 41083
// begin for i = 1 to array1 do
41025: LD_ADDR_VAR 0 4
41029: PUSH
41030: DOUBLE
41031: LD_INT 1
41033: DEC
41034: ST_TO_ADDR
41035: LD_VAR 0 1
41039: PUSH
41040: FOR_TO
41041: IFFALSE 41079
// if array1 [ i ] <> array2 [ i ] then
41043: LD_VAR 0 1
41047: PUSH
41048: LD_VAR 0 4
41052: ARRAY
41053: PUSH
41054: LD_VAR 0 2
41058: PUSH
41059: LD_VAR 0 4
41063: ARRAY
41064: NONEQUAL
41065: IFFALSE 41077
// begin result := false ;
41067: LD_ADDR_VAR 0 3
41071: PUSH
41072: LD_INT 0
41074: ST_TO_ADDR
// break ;
41075: GO 41079
// end ;
41077: GO 41040
41079: POP
41080: POP
// end else
41081: GO 41091
// result := false ;
41083: LD_ADDR_VAR 0 3
41087: PUSH
41088: LD_INT 0
41090: ST_TO_ADDR
// end ;
41091: LD_VAR 0 3
41095: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41096: LD_INT 0
41098: PPUSH
41099: PPUSH
// if not array1 or not array2 then
41100: LD_VAR 0 1
41104: NOT
41105: PUSH
41106: LD_VAR 0 2
41110: NOT
41111: OR
41112: IFFALSE 41116
// exit ;
41114: GO 41180
// result := true ;
41116: LD_ADDR_VAR 0 3
41120: PUSH
41121: LD_INT 1
41123: ST_TO_ADDR
// for i = 1 to array1 do
41124: LD_ADDR_VAR 0 4
41128: PUSH
41129: DOUBLE
41130: LD_INT 1
41132: DEC
41133: ST_TO_ADDR
41134: LD_VAR 0 1
41138: PUSH
41139: FOR_TO
41140: IFFALSE 41178
// if array1 [ i ] <> array2 [ i ] then
41142: LD_VAR 0 1
41146: PUSH
41147: LD_VAR 0 4
41151: ARRAY
41152: PUSH
41153: LD_VAR 0 2
41157: PUSH
41158: LD_VAR 0 4
41162: ARRAY
41163: NONEQUAL
41164: IFFALSE 41176
// begin result := false ;
41166: LD_ADDR_VAR 0 3
41170: PUSH
41171: LD_INT 0
41173: ST_TO_ADDR
// break ;
41174: GO 41178
// end ;
41176: GO 41139
41178: POP
41179: POP
// end ;
41180: LD_VAR 0 3
41184: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41185: LD_INT 0
41187: PPUSH
41188: PPUSH
41189: PPUSH
// pom := GetBase ( fac ) ;
41190: LD_ADDR_VAR 0 5
41194: PUSH
41195: LD_VAR 0 1
41199: PPUSH
41200: CALL_OW 274
41204: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41205: LD_ADDR_VAR 0 4
41209: PUSH
41210: LD_VAR 0 2
41214: PUSH
41215: LD_INT 1
41217: ARRAY
41218: PPUSH
41219: LD_VAR 0 2
41223: PUSH
41224: LD_INT 2
41226: ARRAY
41227: PPUSH
41228: LD_VAR 0 2
41232: PUSH
41233: LD_INT 3
41235: ARRAY
41236: PPUSH
41237: LD_VAR 0 2
41241: PUSH
41242: LD_INT 4
41244: ARRAY
41245: PPUSH
41246: CALL_OW 449
41250: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41251: LD_ADDR_VAR 0 3
41255: PUSH
41256: LD_VAR 0 5
41260: PPUSH
41261: LD_INT 1
41263: PPUSH
41264: CALL_OW 275
41268: PUSH
41269: LD_VAR 0 4
41273: PUSH
41274: LD_INT 1
41276: ARRAY
41277: GREATEREQUAL
41278: PUSH
41279: LD_VAR 0 5
41283: PPUSH
41284: LD_INT 2
41286: PPUSH
41287: CALL_OW 275
41291: PUSH
41292: LD_VAR 0 4
41296: PUSH
41297: LD_INT 2
41299: ARRAY
41300: GREATEREQUAL
41301: AND
41302: PUSH
41303: LD_VAR 0 5
41307: PPUSH
41308: LD_INT 3
41310: PPUSH
41311: CALL_OW 275
41315: PUSH
41316: LD_VAR 0 4
41320: PUSH
41321: LD_INT 3
41323: ARRAY
41324: GREATEREQUAL
41325: AND
41326: ST_TO_ADDR
// end ;
41327: LD_VAR 0 3
41331: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41332: LD_INT 0
41334: PPUSH
41335: PPUSH
41336: PPUSH
41337: PPUSH
// pom := GetBase ( building ) ;
41338: LD_ADDR_VAR 0 3
41342: PUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: CALL_OW 274
41352: ST_TO_ADDR
// if not pom then
41353: LD_VAR 0 3
41357: NOT
41358: IFFALSE 41362
// exit ;
41360: GO 41532
// btype := GetBType ( building ) ;
41362: LD_ADDR_VAR 0 5
41366: PUSH
41367: LD_VAR 0 1
41371: PPUSH
41372: CALL_OW 266
41376: ST_TO_ADDR
// if btype = b_armoury then
41377: LD_VAR 0 5
41381: PUSH
41382: LD_INT 4
41384: EQUAL
41385: IFFALSE 41395
// btype := b_barracks ;
41387: LD_ADDR_VAR 0 5
41391: PUSH
41392: LD_INT 5
41394: ST_TO_ADDR
// if btype = b_depot then
41395: LD_VAR 0 5
41399: PUSH
41400: LD_INT 0
41402: EQUAL
41403: IFFALSE 41413
// btype := b_warehouse ;
41405: LD_ADDR_VAR 0 5
41409: PUSH
41410: LD_INT 1
41412: ST_TO_ADDR
// if btype = b_workshop then
41413: LD_VAR 0 5
41417: PUSH
41418: LD_INT 2
41420: EQUAL
41421: IFFALSE 41431
// btype := b_factory ;
41423: LD_ADDR_VAR 0 5
41427: PUSH
41428: LD_INT 3
41430: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41431: LD_ADDR_VAR 0 4
41435: PUSH
41436: LD_VAR 0 5
41440: PPUSH
41441: LD_VAR 0 1
41445: PPUSH
41446: CALL_OW 248
41450: PPUSH
41451: CALL_OW 450
41455: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41456: LD_ADDR_VAR 0 2
41460: PUSH
41461: LD_VAR 0 3
41465: PPUSH
41466: LD_INT 1
41468: PPUSH
41469: CALL_OW 275
41473: PUSH
41474: LD_VAR 0 4
41478: PUSH
41479: LD_INT 1
41481: ARRAY
41482: GREATEREQUAL
41483: PUSH
41484: LD_VAR 0 3
41488: PPUSH
41489: LD_INT 2
41491: PPUSH
41492: CALL_OW 275
41496: PUSH
41497: LD_VAR 0 4
41501: PUSH
41502: LD_INT 2
41504: ARRAY
41505: GREATEREQUAL
41506: AND
41507: PUSH
41508: LD_VAR 0 3
41512: PPUSH
41513: LD_INT 3
41515: PPUSH
41516: CALL_OW 275
41520: PUSH
41521: LD_VAR 0 4
41525: PUSH
41526: LD_INT 3
41528: ARRAY
41529: GREATEREQUAL
41530: AND
41531: ST_TO_ADDR
// end ;
41532: LD_VAR 0 2
41536: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41537: LD_INT 0
41539: PPUSH
41540: PPUSH
41541: PPUSH
// pom := GetBase ( building ) ;
41542: LD_ADDR_VAR 0 4
41546: PUSH
41547: LD_VAR 0 1
41551: PPUSH
41552: CALL_OW 274
41556: ST_TO_ADDR
// if not pom then
41557: LD_VAR 0 4
41561: NOT
41562: IFFALSE 41566
// exit ;
41564: GO 41667
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41566: LD_ADDR_VAR 0 5
41570: PUSH
41571: LD_VAR 0 2
41575: PPUSH
41576: LD_VAR 0 1
41580: PPUSH
41581: CALL_OW 248
41585: PPUSH
41586: CALL_OW 450
41590: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41591: LD_ADDR_VAR 0 3
41595: PUSH
41596: LD_VAR 0 4
41600: PPUSH
41601: LD_INT 1
41603: PPUSH
41604: CALL_OW 275
41608: PUSH
41609: LD_VAR 0 5
41613: PUSH
41614: LD_INT 1
41616: ARRAY
41617: GREATEREQUAL
41618: PUSH
41619: LD_VAR 0 4
41623: PPUSH
41624: LD_INT 2
41626: PPUSH
41627: CALL_OW 275
41631: PUSH
41632: LD_VAR 0 5
41636: PUSH
41637: LD_INT 2
41639: ARRAY
41640: GREATEREQUAL
41641: AND
41642: PUSH
41643: LD_VAR 0 4
41647: PPUSH
41648: LD_INT 3
41650: PPUSH
41651: CALL_OW 275
41655: PUSH
41656: LD_VAR 0 5
41660: PUSH
41661: LD_INT 3
41663: ARRAY
41664: GREATEREQUAL
41665: AND
41666: ST_TO_ADDR
// end ;
41667: LD_VAR 0 3
41671: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41672: LD_INT 0
41674: PPUSH
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
// result := false ;
41685: LD_ADDR_VAR 0 8
41689: PUSH
41690: LD_INT 0
41692: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41693: LD_VAR 0 5
41697: NOT
41698: PUSH
41699: LD_VAR 0 1
41703: NOT
41704: OR
41705: PUSH
41706: LD_VAR 0 2
41710: NOT
41711: OR
41712: PUSH
41713: LD_VAR 0 3
41717: NOT
41718: OR
41719: IFFALSE 41723
// exit ;
41721: GO 42537
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41723: LD_ADDR_VAR 0 14
41727: PUSH
41728: LD_VAR 0 1
41732: PPUSH
41733: LD_VAR 0 2
41737: PPUSH
41738: LD_VAR 0 3
41742: PPUSH
41743: LD_VAR 0 4
41747: PPUSH
41748: LD_VAR 0 5
41752: PUSH
41753: LD_INT 1
41755: ARRAY
41756: PPUSH
41757: CALL_OW 248
41761: PPUSH
41762: LD_INT 0
41764: PPUSH
41765: CALL 43790 0 6
41769: ST_TO_ADDR
// if not hexes then
41770: LD_VAR 0 14
41774: NOT
41775: IFFALSE 41779
// exit ;
41777: GO 42537
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41779: LD_ADDR_VAR 0 17
41783: PUSH
41784: LD_VAR 0 5
41788: PPUSH
41789: LD_INT 22
41791: PUSH
41792: LD_VAR 0 13
41796: PPUSH
41797: CALL_OW 255
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: LD_INT 30
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 30
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: LIST
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PPUSH
41838: CALL_OW 72
41842: ST_TO_ADDR
// for i = 1 to hexes do
41843: LD_ADDR_VAR 0 9
41847: PUSH
41848: DOUBLE
41849: LD_INT 1
41851: DEC
41852: ST_TO_ADDR
41853: LD_VAR 0 14
41857: PUSH
41858: FOR_TO
41859: IFFALSE 42535
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41861: LD_ADDR_VAR 0 13
41865: PUSH
41866: LD_VAR 0 14
41870: PUSH
41871: LD_VAR 0 9
41875: ARRAY
41876: PUSH
41877: LD_INT 1
41879: ARRAY
41880: PPUSH
41881: LD_VAR 0 14
41885: PUSH
41886: LD_VAR 0 9
41890: ARRAY
41891: PUSH
41892: LD_INT 2
41894: ARRAY
41895: PPUSH
41896: CALL_OW 428
41900: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41901: LD_VAR 0 14
41905: PUSH
41906: LD_VAR 0 9
41910: ARRAY
41911: PUSH
41912: LD_INT 1
41914: ARRAY
41915: PPUSH
41916: LD_VAR 0 14
41920: PUSH
41921: LD_VAR 0 9
41925: ARRAY
41926: PUSH
41927: LD_INT 2
41929: ARRAY
41930: PPUSH
41931: CALL_OW 351
41935: PUSH
41936: LD_VAR 0 14
41940: PUSH
41941: LD_VAR 0 9
41945: ARRAY
41946: PUSH
41947: LD_INT 1
41949: ARRAY
41950: PPUSH
41951: LD_VAR 0 14
41955: PUSH
41956: LD_VAR 0 9
41960: ARRAY
41961: PUSH
41962: LD_INT 2
41964: ARRAY
41965: PPUSH
41966: CALL_OW 488
41970: NOT
41971: OR
41972: PUSH
41973: LD_VAR 0 13
41977: PPUSH
41978: CALL_OW 247
41982: PUSH
41983: LD_INT 3
41985: EQUAL
41986: OR
41987: IFFALSE 41993
// exit ;
41989: POP
41990: POP
41991: GO 42537
// if not tmp then
41993: LD_VAR 0 13
41997: NOT
41998: IFFALSE 42002
// continue ;
42000: GO 41858
// result := true ;
42002: LD_ADDR_VAR 0 8
42006: PUSH
42007: LD_INT 1
42009: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42010: LD_VAR 0 6
42014: PUSH
42015: LD_VAR 0 13
42019: PPUSH
42020: CALL_OW 247
42024: PUSH
42025: LD_INT 2
42027: EQUAL
42028: AND
42029: PUSH
42030: LD_VAR 0 13
42034: PPUSH
42035: CALL_OW 263
42039: PUSH
42040: LD_INT 1
42042: EQUAL
42043: AND
42044: IFFALSE 42208
// begin if IsDrivenBy ( tmp ) then
42046: LD_VAR 0 13
42050: PPUSH
42051: CALL_OW 311
42055: IFFALSE 42059
// continue ;
42057: GO 41858
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42059: LD_VAR 0 6
42063: PPUSH
42064: LD_INT 3
42066: PUSH
42067: LD_INT 60
42069: PUSH
42070: EMPTY
42071: LIST
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 3
42079: PUSH
42080: LD_INT 55
42082: PUSH
42083: EMPTY
42084: LIST
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PPUSH
42094: CALL_OW 72
42098: IFFALSE 42206
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42100: LD_ADDR_VAR 0 18
42104: PUSH
42105: LD_VAR 0 6
42109: PPUSH
42110: LD_INT 3
42112: PUSH
42113: LD_INT 60
42115: PUSH
42116: EMPTY
42117: LIST
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: LD_INT 55
42128: PUSH
42129: EMPTY
42130: LIST
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PPUSH
42140: CALL_OW 72
42144: PUSH
42145: LD_INT 1
42147: ARRAY
42148: ST_TO_ADDR
// if IsInUnit ( driver ) then
42149: LD_VAR 0 18
42153: PPUSH
42154: CALL_OW 310
42158: IFFALSE 42169
// ComExit ( driver ) ;
42160: LD_VAR 0 18
42164: PPUSH
42165: CALL 67591 0 1
// AddComEnterUnit ( driver , tmp ) ;
42169: LD_VAR 0 18
42173: PPUSH
42174: LD_VAR 0 13
42178: PPUSH
42179: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42183: LD_VAR 0 18
42187: PPUSH
42188: LD_VAR 0 7
42192: PPUSH
42193: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42197: LD_VAR 0 18
42201: PPUSH
42202: CALL_OW 181
// end ; continue ;
42206: GO 41858
// end ; if not cleaners or not tmp in cleaners then
42208: LD_VAR 0 6
42212: NOT
42213: PUSH
42214: LD_VAR 0 13
42218: PUSH
42219: LD_VAR 0 6
42223: IN
42224: NOT
42225: OR
42226: IFFALSE 42533
// begin if dep then
42228: LD_VAR 0 17
42232: IFFALSE 42368
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42234: LD_ADDR_VAR 0 16
42238: PUSH
42239: LD_VAR 0 17
42243: PUSH
42244: LD_INT 1
42246: ARRAY
42247: PPUSH
42248: CALL_OW 250
42252: PPUSH
42253: LD_VAR 0 17
42257: PUSH
42258: LD_INT 1
42260: ARRAY
42261: PPUSH
42262: CALL_OW 254
42266: PPUSH
42267: LD_INT 5
42269: PPUSH
42270: CALL_OW 272
42274: PUSH
42275: LD_VAR 0 17
42279: PUSH
42280: LD_INT 1
42282: ARRAY
42283: PPUSH
42284: CALL_OW 251
42288: PPUSH
42289: LD_VAR 0 17
42293: PUSH
42294: LD_INT 1
42296: ARRAY
42297: PPUSH
42298: CALL_OW 254
42302: PPUSH
42303: LD_INT 5
42305: PPUSH
42306: CALL_OW 273
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42315: LD_VAR 0 16
42319: PUSH
42320: LD_INT 1
42322: ARRAY
42323: PPUSH
42324: LD_VAR 0 16
42328: PUSH
42329: LD_INT 2
42331: ARRAY
42332: PPUSH
42333: CALL_OW 488
42337: IFFALSE 42368
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42339: LD_VAR 0 13
42343: PPUSH
42344: LD_VAR 0 16
42348: PUSH
42349: LD_INT 1
42351: ARRAY
42352: PPUSH
42353: LD_VAR 0 16
42357: PUSH
42358: LD_INT 2
42360: ARRAY
42361: PPUSH
42362: CALL_OW 111
// continue ;
42366: GO 41858
// end ; end ; r := GetDir ( tmp ) ;
42368: LD_ADDR_VAR 0 15
42372: PUSH
42373: LD_VAR 0 13
42377: PPUSH
42378: CALL_OW 254
42382: ST_TO_ADDR
// if r = 5 then
42383: LD_VAR 0 15
42387: PUSH
42388: LD_INT 5
42390: EQUAL
42391: IFFALSE 42401
// r := 0 ;
42393: LD_ADDR_VAR 0 15
42397: PUSH
42398: LD_INT 0
42400: ST_TO_ADDR
// for j = r to 5 do
42401: LD_ADDR_VAR 0 10
42405: PUSH
42406: DOUBLE
42407: LD_VAR 0 15
42411: DEC
42412: ST_TO_ADDR
42413: LD_INT 5
42415: PUSH
42416: FOR_TO
42417: IFFALSE 42531
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42419: LD_ADDR_VAR 0 11
42423: PUSH
42424: LD_VAR 0 13
42428: PPUSH
42429: CALL_OW 250
42433: PPUSH
42434: LD_VAR 0 10
42438: PPUSH
42439: LD_INT 2
42441: PPUSH
42442: CALL_OW 272
42446: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42447: LD_ADDR_VAR 0 12
42451: PUSH
42452: LD_VAR 0 13
42456: PPUSH
42457: CALL_OW 251
42461: PPUSH
42462: LD_VAR 0 10
42466: PPUSH
42467: LD_INT 2
42469: PPUSH
42470: CALL_OW 273
42474: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42475: LD_VAR 0 11
42479: PPUSH
42480: LD_VAR 0 12
42484: PPUSH
42485: CALL_OW 488
42489: PUSH
42490: LD_VAR 0 11
42494: PPUSH
42495: LD_VAR 0 12
42499: PPUSH
42500: CALL_OW 428
42504: NOT
42505: AND
42506: IFFALSE 42529
// begin ComMoveXY ( tmp , _x , _y ) ;
42508: LD_VAR 0 13
42512: PPUSH
42513: LD_VAR 0 11
42517: PPUSH
42518: LD_VAR 0 12
42522: PPUSH
42523: CALL_OW 111
// break ;
42527: GO 42531
// end ; end ;
42529: GO 42416
42531: POP
42532: POP
// end ; end ;
42533: GO 41858
42535: POP
42536: POP
// end ;
42537: LD_VAR 0 8
42541: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42542: LD_INT 0
42544: PPUSH
// result := true ;
42545: LD_ADDR_VAR 0 3
42549: PUSH
42550: LD_INT 1
42552: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42553: LD_VAR 0 2
42557: PUSH
42558: LD_INT 24
42560: DOUBLE
42561: EQUAL
42562: IFTRUE 42572
42564: LD_INT 33
42566: DOUBLE
42567: EQUAL
42568: IFTRUE 42572
42570: GO 42597
42572: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42573: LD_ADDR_VAR 0 3
42577: PUSH
42578: LD_INT 32
42580: PPUSH
42581: LD_VAR 0 1
42585: PPUSH
42586: CALL_OW 321
42590: PUSH
42591: LD_INT 2
42593: EQUAL
42594: ST_TO_ADDR
42595: GO 42913
42597: LD_INT 20
42599: DOUBLE
42600: EQUAL
42601: IFTRUE 42605
42603: GO 42630
42605: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42606: LD_ADDR_VAR 0 3
42610: PUSH
42611: LD_INT 6
42613: PPUSH
42614: LD_VAR 0 1
42618: PPUSH
42619: CALL_OW 321
42623: PUSH
42624: LD_INT 2
42626: EQUAL
42627: ST_TO_ADDR
42628: GO 42913
42630: LD_INT 22
42632: DOUBLE
42633: EQUAL
42634: IFTRUE 42644
42636: LD_INT 36
42638: DOUBLE
42639: EQUAL
42640: IFTRUE 42644
42642: GO 42669
42644: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42645: LD_ADDR_VAR 0 3
42649: PUSH
42650: LD_INT 15
42652: PPUSH
42653: LD_VAR 0 1
42657: PPUSH
42658: CALL_OW 321
42662: PUSH
42663: LD_INT 2
42665: EQUAL
42666: ST_TO_ADDR
42667: GO 42913
42669: LD_INT 30
42671: DOUBLE
42672: EQUAL
42673: IFTRUE 42677
42675: GO 42702
42677: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42678: LD_ADDR_VAR 0 3
42682: PUSH
42683: LD_INT 20
42685: PPUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 321
42695: PUSH
42696: LD_INT 2
42698: EQUAL
42699: ST_TO_ADDR
42700: GO 42913
42702: LD_INT 28
42704: DOUBLE
42705: EQUAL
42706: IFTRUE 42716
42708: LD_INT 21
42710: DOUBLE
42711: EQUAL
42712: IFTRUE 42716
42714: GO 42741
42716: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42717: LD_ADDR_VAR 0 3
42721: PUSH
42722: LD_INT 21
42724: PPUSH
42725: LD_VAR 0 1
42729: PPUSH
42730: CALL_OW 321
42734: PUSH
42735: LD_INT 2
42737: EQUAL
42738: ST_TO_ADDR
42739: GO 42913
42741: LD_INT 16
42743: DOUBLE
42744: EQUAL
42745: IFTRUE 42749
42747: GO 42774
42749: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42750: LD_ADDR_VAR 0 3
42754: PUSH
42755: LD_INT 84
42757: PPUSH
42758: LD_VAR 0 1
42762: PPUSH
42763: CALL_OW 321
42767: PUSH
42768: LD_INT 2
42770: EQUAL
42771: ST_TO_ADDR
42772: GO 42913
42774: LD_INT 19
42776: DOUBLE
42777: EQUAL
42778: IFTRUE 42788
42780: LD_INT 23
42782: DOUBLE
42783: EQUAL
42784: IFTRUE 42788
42786: GO 42813
42788: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42789: LD_ADDR_VAR 0 3
42793: PUSH
42794: LD_INT 83
42796: PPUSH
42797: LD_VAR 0 1
42801: PPUSH
42802: CALL_OW 321
42806: PUSH
42807: LD_INT 2
42809: EQUAL
42810: ST_TO_ADDR
42811: GO 42913
42813: LD_INT 17
42815: DOUBLE
42816: EQUAL
42817: IFTRUE 42821
42819: GO 42846
42821: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_INT 39
42829: PPUSH
42830: LD_VAR 0 1
42834: PPUSH
42835: CALL_OW 321
42839: PUSH
42840: LD_INT 2
42842: EQUAL
42843: ST_TO_ADDR
42844: GO 42913
42846: LD_INT 18
42848: DOUBLE
42849: EQUAL
42850: IFTRUE 42854
42852: GO 42879
42854: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: LD_INT 40
42862: PPUSH
42863: LD_VAR 0 1
42867: PPUSH
42868: CALL_OW 321
42872: PUSH
42873: LD_INT 2
42875: EQUAL
42876: ST_TO_ADDR
42877: GO 42913
42879: LD_INT 27
42881: DOUBLE
42882: EQUAL
42883: IFTRUE 42887
42885: GO 42912
42887: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42888: LD_ADDR_VAR 0 3
42892: PUSH
42893: LD_INT 35
42895: PPUSH
42896: LD_VAR 0 1
42900: PPUSH
42901: CALL_OW 321
42905: PUSH
42906: LD_INT 2
42908: EQUAL
42909: ST_TO_ADDR
42910: GO 42913
42912: POP
// end ;
42913: LD_VAR 0 3
42917: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42918: LD_INT 0
42920: PPUSH
42921: PPUSH
42922: PPUSH
42923: PPUSH
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
// result := false ;
42931: LD_ADDR_VAR 0 6
42935: PUSH
42936: LD_INT 0
42938: ST_TO_ADDR
// if btype = b_depot then
42939: LD_VAR 0 2
42943: PUSH
42944: LD_INT 0
42946: EQUAL
42947: IFFALSE 42959
// begin result := true ;
42949: LD_ADDR_VAR 0 6
42953: PUSH
42954: LD_INT 1
42956: ST_TO_ADDR
// exit ;
42957: GO 43785
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42959: LD_VAR 0 1
42963: NOT
42964: PUSH
42965: LD_VAR 0 1
42969: PPUSH
42970: CALL_OW 266
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: IN
42985: NOT
42986: OR
42987: PUSH
42988: LD_VAR 0 2
42992: NOT
42993: OR
42994: PUSH
42995: LD_VAR 0 5
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: LD_INT 3
43011: PUSH
43012: LD_INT 4
43014: PUSH
43015: LD_INT 5
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: IN
43026: NOT
43027: OR
43028: PUSH
43029: LD_VAR 0 3
43033: PPUSH
43034: LD_VAR 0 4
43038: PPUSH
43039: CALL_OW 488
43043: NOT
43044: OR
43045: IFFALSE 43049
// exit ;
43047: GO 43785
// side := GetSide ( depot ) ;
43049: LD_ADDR_VAR 0 9
43053: PUSH
43054: LD_VAR 0 1
43058: PPUSH
43059: CALL_OW 255
43063: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43064: LD_VAR 0 9
43068: PPUSH
43069: LD_VAR 0 2
43073: PPUSH
43074: CALL 42542 0 2
43078: NOT
43079: IFFALSE 43083
// exit ;
43081: GO 43785
// pom := GetBase ( depot ) ;
43083: LD_ADDR_VAR 0 10
43087: PUSH
43088: LD_VAR 0 1
43092: PPUSH
43093: CALL_OW 274
43097: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43098: LD_ADDR_VAR 0 11
43102: PUSH
43103: LD_VAR 0 2
43107: PPUSH
43108: LD_VAR 0 1
43112: PPUSH
43113: CALL_OW 248
43117: PPUSH
43118: CALL_OW 450
43122: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43123: LD_VAR 0 10
43127: PPUSH
43128: LD_INT 1
43130: PPUSH
43131: CALL_OW 275
43135: PUSH
43136: LD_VAR 0 11
43140: PUSH
43141: LD_INT 1
43143: ARRAY
43144: GREATEREQUAL
43145: PUSH
43146: LD_VAR 0 10
43150: PPUSH
43151: LD_INT 2
43153: PPUSH
43154: CALL_OW 275
43158: PUSH
43159: LD_VAR 0 11
43163: PUSH
43164: LD_INT 2
43166: ARRAY
43167: GREATEREQUAL
43168: AND
43169: PUSH
43170: LD_VAR 0 10
43174: PPUSH
43175: LD_INT 3
43177: PPUSH
43178: CALL_OW 275
43182: PUSH
43183: LD_VAR 0 11
43187: PUSH
43188: LD_INT 3
43190: ARRAY
43191: GREATEREQUAL
43192: AND
43193: NOT
43194: IFFALSE 43198
// exit ;
43196: GO 43785
// if GetBType ( depot ) = b_depot then
43198: LD_VAR 0 1
43202: PPUSH
43203: CALL_OW 266
43207: PUSH
43208: LD_INT 0
43210: EQUAL
43211: IFFALSE 43223
// dist := 28 else
43213: LD_ADDR_VAR 0 14
43217: PUSH
43218: LD_INT 28
43220: ST_TO_ADDR
43221: GO 43231
// dist := 36 ;
43223: LD_ADDR_VAR 0 14
43227: PUSH
43228: LD_INT 36
43230: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43231: LD_VAR 0 1
43235: PPUSH
43236: LD_VAR 0 3
43240: PPUSH
43241: LD_VAR 0 4
43245: PPUSH
43246: CALL_OW 297
43250: PUSH
43251: LD_VAR 0 14
43255: GREATER
43256: IFFALSE 43260
// exit ;
43258: GO 43785
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43260: LD_ADDR_VAR 0 12
43264: PUSH
43265: LD_VAR 0 2
43269: PPUSH
43270: LD_VAR 0 3
43274: PPUSH
43275: LD_VAR 0 4
43279: PPUSH
43280: LD_VAR 0 5
43284: PPUSH
43285: LD_VAR 0 1
43289: PPUSH
43290: CALL_OW 248
43294: PPUSH
43295: LD_INT 0
43297: PPUSH
43298: CALL 43790 0 6
43302: ST_TO_ADDR
// if not hexes then
43303: LD_VAR 0 12
43307: NOT
43308: IFFALSE 43312
// exit ;
43310: GO 43785
// hex := GetHexInfo ( x , y ) ;
43312: LD_ADDR_VAR 0 15
43316: PUSH
43317: LD_VAR 0 3
43321: PPUSH
43322: LD_VAR 0 4
43326: PPUSH
43327: CALL_OW 546
43331: ST_TO_ADDR
// if hex [ 1 ] then
43332: LD_VAR 0 15
43336: PUSH
43337: LD_INT 1
43339: ARRAY
43340: IFFALSE 43344
// exit ;
43342: GO 43785
// height := hex [ 2 ] ;
43344: LD_ADDR_VAR 0 13
43348: PUSH
43349: LD_VAR 0 15
43353: PUSH
43354: LD_INT 2
43356: ARRAY
43357: ST_TO_ADDR
// for i = 1 to hexes do
43358: LD_ADDR_VAR 0 7
43362: PUSH
43363: DOUBLE
43364: LD_INT 1
43366: DEC
43367: ST_TO_ADDR
43368: LD_VAR 0 12
43372: PUSH
43373: FOR_TO
43374: IFFALSE 43704
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43376: LD_VAR 0 12
43380: PUSH
43381: LD_VAR 0 7
43385: ARRAY
43386: PUSH
43387: LD_INT 1
43389: ARRAY
43390: PPUSH
43391: LD_VAR 0 12
43395: PUSH
43396: LD_VAR 0 7
43400: ARRAY
43401: PUSH
43402: LD_INT 2
43404: ARRAY
43405: PPUSH
43406: CALL_OW 488
43410: NOT
43411: PUSH
43412: LD_VAR 0 12
43416: PUSH
43417: LD_VAR 0 7
43421: ARRAY
43422: PUSH
43423: LD_INT 1
43425: ARRAY
43426: PPUSH
43427: LD_VAR 0 12
43431: PUSH
43432: LD_VAR 0 7
43436: ARRAY
43437: PUSH
43438: LD_INT 2
43440: ARRAY
43441: PPUSH
43442: CALL_OW 428
43446: PUSH
43447: LD_INT 0
43449: GREATER
43450: OR
43451: PUSH
43452: LD_VAR 0 12
43456: PUSH
43457: LD_VAR 0 7
43461: ARRAY
43462: PUSH
43463: LD_INT 1
43465: ARRAY
43466: PPUSH
43467: LD_VAR 0 12
43471: PUSH
43472: LD_VAR 0 7
43476: ARRAY
43477: PUSH
43478: LD_INT 2
43480: ARRAY
43481: PPUSH
43482: CALL_OW 351
43486: OR
43487: IFFALSE 43493
// exit ;
43489: POP
43490: POP
43491: GO 43785
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43493: LD_ADDR_VAR 0 8
43497: PUSH
43498: LD_VAR 0 12
43502: PUSH
43503: LD_VAR 0 7
43507: ARRAY
43508: PUSH
43509: LD_INT 1
43511: ARRAY
43512: PPUSH
43513: LD_VAR 0 12
43517: PUSH
43518: LD_VAR 0 7
43522: ARRAY
43523: PUSH
43524: LD_INT 2
43526: ARRAY
43527: PPUSH
43528: CALL_OW 546
43532: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43533: LD_VAR 0 8
43537: PUSH
43538: LD_INT 1
43540: ARRAY
43541: PUSH
43542: LD_VAR 0 8
43546: PUSH
43547: LD_INT 2
43549: ARRAY
43550: PUSH
43551: LD_VAR 0 13
43555: PUSH
43556: LD_INT 2
43558: PLUS
43559: GREATER
43560: OR
43561: PUSH
43562: LD_VAR 0 8
43566: PUSH
43567: LD_INT 2
43569: ARRAY
43570: PUSH
43571: LD_VAR 0 13
43575: PUSH
43576: LD_INT 2
43578: MINUS
43579: LESS
43580: OR
43581: PUSH
43582: LD_VAR 0 8
43586: PUSH
43587: LD_INT 3
43589: ARRAY
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: LD_INT 8
43596: PUSH
43597: LD_INT 9
43599: PUSH
43600: LD_INT 10
43602: PUSH
43603: LD_INT 11
43605: PUSH
43606: LD_INT 12
43608: PUSH
43609: LD_INT 13
43611: PUSH
43612: LD_INT 16
43614: PUSH
43615: LD_INT 17
43617: PUSH
43618: LD_INT 18
43620: PUSH
43621: LD_INT 19
43623: PUSH
43624: LD_INT 20
43626: PUSH
43627: LD_INT 21
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: IN
43645: NOT
43646: OR
43647: PUSH
43648: LD_VAR 0 8
43652: PUSH
43653: LD_INT 5
43655: ARRAY
43656: NOT
43657: OR
43658: PUSH
43659: LD_VAR 0 8
43663: PUSH
43664: LD_INT 6
43666: ARRAY
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: LD_INT 7
43676: PUSH
43677: LD_INT 9
43679: PUSH
43680: LD_INT 10
43682: PUSH
43683: LD_INT 11
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: IN
43694: NOT
43695: OR
43696: IFFALSE 43702
// exit ;
43698: POP
43699: POP
43700: GO 43785
// end ;
43702: GO 43373
43704: POP
43705: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43706: LD_VAR 0 9
43710: PPUSH
43711: LD_VAR 0 3
43715: PPUSH
43716: LD_VAR 0 4
43720: PPUSH
43721: LD_INT 20
43723: PPUSH
43724: CALL 35708 0 4
43728: PUSH
43729: LD_INT 4
43731: ARRAY
43732: IFFALSE 43736
// exit ;
43734: GO 43785
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43736: LD_VAR 0 2
43740: PUSH
43741: LD_INT 29
43743: PUSH
43744: LD_INT 30
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: IN
43751: PUSH
43752: LD_VAR 0 3
43756: PPUSH
43757: LD_VAR 0 4
43761: PPUSH
43762: LD_VAR 0 9
43766: PPUSH
43767: CALL_OW 440
43771: NOT
43772: AND
43773: IFFALSE 43777
// exit ;
43775: GO 43785
// result := true ;
43777: LD_ADDR_VAR 0 6
43781: PUSH
43782: LD_INT 1
43784: ST_TO_ADDR
// end ;
43785: LD_VAR 0 6
43789: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43790: LD_INT 0
43792: PPUSH
43793: PPUSH
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
43811: PPUSH
43812: PPUSH
43813: PPUSH
43814: PPUSH
43815: PPUSH
43816: PPUSH
43817: PPUSH
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
43825: PPUSH
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
43838: PPUSH
43839: PPUSH
43840: PPUSH
43841: PPUSH
43842: PPUSH
43843: PPUSH
43844: PPUSH
43845: PPUSH
43846: PPUSH
43847: PPUSH
43848: PPUSH
43849: PPUSH
// result = [ ] ;
43850: LD_ADDR_VAR 0 7
43854: PUSH
43855: EMPTY
43856: ST_TO_ADDR
// temp_list = [ ] ;
43857: LD_ADDR_VAR 0 9
43861: PUSH
43862: EMPTY
43863: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43864: LD_VAR 0 4
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: LD_INT 4
43883: PUSH
43884: LD_INT 5
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: IN
43895: NOT
43896: PUSH
43897: LD_VAR 0 1
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: IN
43912: PUSH
43913: LD_VAR 0 5
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: LD_INT 3
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: LIST
43931: IN
43932: NOT
43933: AND
43934: OR
43935: IFFALSE 43939
// exit ;
43937: GO 62330
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43939: LD_VAR 0 1
43943: PUSH
43944: LD_INT 6
43946: PUSH
43947: LD_INT 7
43949: PUSH
43950: LD_INT 8
43952: PUSH
43953: LD_INT 13
43955: PUSH
43956: LD_INT 12
43958: PUSH
43959: LD_INT 15
43961: PUSH
43962: LD_INT 11
43964: PUSH
43965: LD_INT 14
43967: PUSH
43968: LD_INT 10
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: IN
43982: IFFALSE 43992
// btype = b_lab ;
43984: LD_ADDR_VAR 0 1
43988: PUSH
43989: LD_INT 6
43991: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43992: LD_VAR 0 6
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: IN
44011: NOT
44012: PUSH
44013: LD_VAR 0 1
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: LD_INT 3
44029: PUSH
44030: LD_INT 6
44032: PUSH
44033: LD_INT 36
44035: PUSH
44036: LD_INT 4
44038: PUSH
44039: LD_INT 5
44041: PUSH
44042: LD_INT 31
44044: PUSH
44045: LD_INT 32
44047: PUSH
44048: LD_INT 33
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: IN
44064: NOT
44065: PUSH
44066: LD_VAR 0 6
44070: PUSH
44071: LD_INT 1
44073: EQUAL
44074: AND
44075: OR
44076: PUSH
44077: LD_VAR 0 1
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: IN
44092: NOT
44093: PUSH
44094: LD_VAR 0 6
44098: PUSH
44099: LD_INT 2
44101: EQUAL
44102: AND
44103: OR
44104: IFFALSE 44114
// mode = 0 ;
44106: LD_ADDR_VAR 0 6
44110: PUSH
44111: LD_INT 0
44113: ST_TO_ADDR
// case mode of 0 :
44114: LD_VAR 0 6
44118: PUSH
44119: LD_INT 0
44121: DOUBLE
44122: EQUAL
44123: IFTRUE 44127
44125: GO 55580
44127: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44128: LD_ADDR_VAR 0 11
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 3
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: LD_INT 3
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44321: LD_ADDR_VAR 0 12
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 3
44478: NEG
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 3
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44517: LD_ADDR_VAR 0 13
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 2
44652: NEG
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: LD_INT 3
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 3
44676: NEG
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 3
44688: NEG
44689: PUSH
44690: LD_INT 3
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44716: LD_ADDR_VAR 0 14
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 3
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 3
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44912: LD_ADDR_VAR 0 15
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 3
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 3
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45105: LD_ADDR_VAR 0 16
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 3
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: LD_INT 3
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: LD_INT 3
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45298: LD_ADDR_VAR 0 17
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45528: LD_ADDR_VAR 0 18
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45758: LD_ADDR_VAR 0 19
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45988: LD_ADDR_VAR 0 20
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 2
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46218: LD_ADDR_VAR 0 21
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46448: LD_ADDR_VAR 0 22
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46678: LD_ADDR_VAR 0 23
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: LD_INT 3
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46958: LD_ADDR_VAR 0 24
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 3
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47234: LD_ADDR_VAR 0 25
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: LD_INT 2
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 3
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 3
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: LD_INT 3
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: LD_INT 3
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47508: LD_ADDR_VAR 0 26
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 3
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47784: LD_ADDR_VAR 0 27
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 3
48017: NEG
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 3
48029: NEG
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48064: LD_ADDR_VAR 0 28
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: NEG
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: LD_INT 3
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: LD_INT 3
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 3
48299: NEG
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 3
48311: NEG
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48346: LD_ADDR_VAR 0 29
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: LD_INT 3
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: LD_INT 3
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 3
48590: NEG
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48625: LD_ADDR_VAR 0 30
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 3
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 3
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 3
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48903: LD_ADDR_VAR 0 31
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 2
49068: NEG
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: NEG
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: LD_INT 3
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 3
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 3
49146: NEG
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49181: LD_ADDR_VAR 0 32
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 2
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 3
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 3
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: LD_INT 3
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49459: LD_ADDR_VAR 0 33
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: LD_INT 3
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 3
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 3
49703: NEG
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49738: LD_ADDR_VAR 0 34
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: PUSH
49963: LD_INT 3
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50018: LD_ADDR_VAR 0 35
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50130: LD_ADDR_VAR 0 36
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50242: LD_ADDR_VAR 0 37
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50354: LD_ADDR_VAR 0 38
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50466: LD_ADDR_VAR 0 39
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50578: LD_ADDR_VAR 0 40
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50690: LD_ADDR_VAR 0 41
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: LD_INT 3
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 3
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 3
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 3
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 3
50933: PUSH
50934: LD_INT 3
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: LD_INT 3
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 3
50964: NEG
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 3
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 3
50987: NEG
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 3
50999: NEG
51000: PUSH
51001: LD_INT 3
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51040: LD_ADDR_VAR 0 42
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: NEG
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: NEG
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 3
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 3
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 3
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 3
51349: NEG
51350: PUSH
51351: LD_INT 3
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51390: LD_ADDR_VAR 0 43
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 3
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 3
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 3
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 3
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 3
51697: NEG
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51738: LD_ADDR_VAR 0 44
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 3
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 3
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 3
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 3
52012: NEG
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 3
52023: NEG
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: NEG
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 3
52047: NEG
52048: PUSH
52049: LD_INT 3
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52088: LD_ADDR_VAR 0 45
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: LD_INT 3
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 3
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: LD_INT 3
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 3
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 3
52385: NEG
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: LD_INT 3
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52438: LD_ADDR_VAR 0 46
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 3
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 3
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 3
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 3
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: NEG
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 3
52745: NEG
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52786: LD_ADDR_VAR 0 47
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52937: LD_ADDR_VAR 0 48
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53084: LD_ADDR_VAR 0 49
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 2
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53228: LD_ADDR_VAR 0 50
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53372: LD_ADDR_VAR 0 51
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53519: LD_ADDR_VAR 0 52
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53670: LD_ADDR_VAR 0 53
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: NEG
53870: PUSH
53871: LD_INT 2
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53900: LD_ADDR_VAR 0 54
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54130: LD_ADDR_VAR 0 55
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54360: LD_ADDR_VAR 0 56
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54590: LD_ADDR_VAR 0 57
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54820: LD_ADDR_VAR 0 58
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: LD_INT 2
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55050: LD_ADDR_VAR 0 59
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55138: LD_ADDR_VAR 0 60
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55226: LD_ADDR_VAR 0 61
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55314: LD_ADDR_VAR 0 62
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55402: LD_ADDR_VAR 0 63
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55490: LD_ADDR_VAR 0 64
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: ST_TO_ADDR
// end ; 1 :
55578: GO 61475
55580: LD_INT 1
55582: DOUBLE
55583: EQUAL
55584: IFTRUE 55588
55586: GO 58211
55588: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55589: LD_ADDR_VAR 0 11
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 3
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 3
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55633: LD_ADDR_VAR 0 12
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: LIST
55673: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55674: LD_ADDR_VAR 0 13
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 3
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: LD_INT 3
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55714: LD_ADDR_VAR 0 14
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55755: LD_ADDR_VAR 0 15
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: LIST
55798: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55799: LD_ADDR_VAR 0 16
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: LD_INT 3
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: NEG
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 3
55830: NEG
55831: PUSH
55832: LD_INT 3
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: LIST
55844: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55845: LD_ADDR_VAR 0 17
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 3
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 2
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55889: LD_ADDR_VAR 0 18
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 3
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55930: LD_ADDR_VAR 0 19
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 3
55947: PUSH
55948: LD_INT 3
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55970: LD_ADDR_VAR 0 20
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 3
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 3
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: LIST
56010: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56011: LD_ADDR_VAR 0 21
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: LIST
56054: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56055: LD_ADDR_VAR 0 22
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 3
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 3
56086: NEG
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56101: LD_ADDR_VAR 0 23
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: NEG
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: LIST
56144: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56145: LD_ADDR_VAR 0 24
56149: PUSH
56150: LD_INT 3
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 4
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56186: LD_ADDR_VAR 0 25
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 4
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56226: LD_ADDR_VAR 0 26
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 3
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: LD_INT 4
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: LIST
56266: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56267: LD_ADDR_VAR 0 27
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 3
56285: NEG
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 4
56296: NEG
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: LIST
56310: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56311: LD_ADDR_VAR 0 28
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: LD_INT 3
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: LD_INT 4
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 4
56342: NEG
56343: PUSH
56344: LD_INT 3
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56357: LD_ADDR_VAR 0 29
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 3
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 4
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 4
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 5
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 5
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 4
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 6
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 6
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: LD_INT 5
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56512: LD_ADDR_VAR 0 30
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 3
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 3
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 4
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 4
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 4
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 5
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 5
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 5
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 6
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 6
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56655: LD_ADDR_VAR 0 31
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 4
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 4
56702: PUSH
56703: LD_INT 4
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: PUSH
56713: LD_INT 4
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 5
56722: PUSH
56723: LD_INT 4
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 5
56732: PUSH
56733: LD_INT 5
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 4
56742: PUSH
56743: LD_INT 5
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 6
56752: PUSH
56753: LD_INT 5
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 6
56762: PUSH
56763: LD_INT 6
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 5
56772: PUSH
56773: LD_INT 6
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56794: LD_ADDR_VAR 0 32
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 3
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 3
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 4
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 4
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 5
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 5
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 4
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 6
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 6
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 5
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56937: LD_ADDR_VAR 0 33
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: NEG
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 4
56989: NEG
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 4
57000: NEG
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 4
57012: NEG
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 5
57023: NEG
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 5
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 5
57046: NEG
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 6
57057: NEG
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 6
57068: NEG
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57092: LD_ADDR_VAR 0 34
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: LD_INT 3
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 3
57111: NEG
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 3
57123: NEG
57124: PUSH
57125: LD_INT 3
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: NEG
57136: PUSH
57137: LD_INT 4
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 4
57147: NEG
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 4
57159: NEG
57160: PUSH
57161: LD_INT 4
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 4
57171: NEG
57172: PUSH
57173: LD_INT 5
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 5
57183: NEG
57184: PUSH
57185: LD_INT 4
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 5
57195: NEG
57196: PUSH
57197: LD_INT 5
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 5
57207: NEG
57208: PUSH
57209: LD_INT 6
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 6
57219: NEG
57220: PUSH
57221: LD_INT 5
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 6
57231: NEG
57232: PUSH
57233: LD_INT 6
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57255: LD_ADDR_VAR 0 41
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: LIST
57298: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57299: LD_ADDR_VAR 0 42
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: LIST
57339: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57340: LD_ADDR_VAR 0 43
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: LIST
57379: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57380: LD_ADDR_VAR 0 44
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: LIST
57420: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57421: LD_ADDR_VAR 0 45
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: LIST
57464: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57465: LD_ADDR_VAR 0 46
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: LD_INT 3
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 3
57496: NEG
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57511: LD_ADDR_VAR 0 47
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: LD_INT 3
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 3
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57544: LD_ADDR_VAR 0 48
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57575: LD_ADDR_VAR 0 49
57579: PUSH
57580: LD_INT 3
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 3
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57604: LD_ADDR_VAR 0 50
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: LD_INT 3
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: LD_INT 3
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57633: LD_ADDR_VAR 0 51
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57664: LD_ADDR_VAR 0 52
57668: PUSH
57669: LD_INT 3
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57697: LD_ADDR_VAR 0 53
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: LD_INT 3
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57741: LD_ADDR_VAR 0 54
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: LIST
57781: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57782: LD_ADDR_VAR 0 55
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: LIST
57821: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57822: LD_ADDR_VAR 0 56
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: LIST
57862: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57863: LD_ADDR_VAR 0 57
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 3
57881: NEG
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: NEG
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: LIST
57906: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57907: LD_ADDR_VAR 0 58
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 3
57938: NEG
57939: PUSH
57940: LD_INT 3
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57953: LD_ADDR_VAR 0 59
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 2
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57997: LD_ADDR_VAR 0 60
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: LIST
58037: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58038: LD_ADDR_VAR 0 61
58042: PUSH
58043: LD_INT 2
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 2
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58078: LD_ADDR_VAR 0 62
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: LIST
58118: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58119: LD_ADDR_VAR 0 63
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58163: LD_ADDR_VAR 0 64
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: ST_TO_ADDR
// end ; 2 :
58209: GO 61475
58211: LD_INT 2
58213: DOUBLE
58214: EQUAL
58215: IFTRUE 58219
58217: GO 61474
58219: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58220: LD_ADDR_VAR 0 29
58224: PUSH
58225: LD_INT 4
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 4
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 5
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 5
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 4
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 5
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 3
58320: PUSH
58321: LD_INT 3
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 3
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 4
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 4
58350: PUSH
58351: LD_INT 4
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: LD_INT 4
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 4
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: LD_INT 4
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 4
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 3
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: LD_INT 4
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: LD_INT 5
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_INT 5
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: LD_INT 4
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: PUSH
58483: LD_INT 5
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: NEG
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: NEG
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 4
58559: NEG
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 4
58570: NEG
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 4
58582: NEG
58583: PUSH
58584: LD_INT 2
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 4
58605: NEG
58606: PUSH
58607: LD_INT 4
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 4
58617: NEG
58618: PUSH
58619: LD_INT 5
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: LD_INT 4
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: NEG
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 4
58653: NEG
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 5
58665: NEG
58666: PUSH
58667: LD_INT 4
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 5
58677: NEG
58678: PUSH
58679: LD_INT 5
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 3
58689: NEG
58690: PUSH
58691: LD_INT 5
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 5
58701: NEG
58702: PUSH
58703: LD_INT 3
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58758: LD_ADDR_VAR 0 30
58762: PUSH
58763: LD_INT 4
58765: PUSH
58766: LD_INT 4
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 4
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 5
58785: PUSH
58786: LD_INT 4
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 5
58795: PUSH
58796: LD_INT 5
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 4
58805: PUSH
58806: LD_INT 5
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: LD_INT 4
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: PUSH
58826: LD_INT 3
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 5
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 3
58845: PUSH
58846: LD_INT 5
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 3
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: LD_INT 3
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 4
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: LD_INT 4
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 3
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: LD_INT 4
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 4
58948: NEG
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 4
58959: NEG
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 3
58982: NEG
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 4
58993: NEG
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 5
59004: NEG
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 5
59015: NEG
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 5
59027: NEG
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 3
59039: NEG
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 3
59050: NEG
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 3
59062: NEG
59063: PUSH
59064: LD_INT 4
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: LD_INT 3
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 3
59098: NEG
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 4
59110: NEG
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 4
59122: NEG
59123: PUSH
59124: LD_INT 4
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: LD_INT 4
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 4
59146: NEG
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 4
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 5
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 4
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: LD_INT 4
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 5
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: LD_INT 3
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: LD_INT 5
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59305: LD_ADDR_VAR 0 31
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 4
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: LD_INT 3
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: LD_INT 4
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 5
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 5
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 4
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 3
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: PUSH
59385: LD_INT 5
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: LD_INT 3
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 3
59405: NEG
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 3
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 2
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 4
59461: NEG
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 4
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 4
59484: NEG
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 2
59496: NEG
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 4
59507: NEG
59508: PUSH
59509: LD_INT 4
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 4
59519: NEG
59520: PUSH
59521: LD_INT 5
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 3
59531: NEG
59532: PUSH
59533: LD_INT 4
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 3
59543: NEG
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 4
59555: NEG
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 5
59567: NEG
59568: PUSH
59569: LD_INT 4
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 5
59579: NEG
59580: PUSH
59581: LD_INT 5
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 3
59591: NEG
59592: PUSH
59593: LD_INT 5
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 5
59603: NEG
59604: PUSH
59605: LD_INT 3
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 3
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 4
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: LD_INT 3
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 3
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 4
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 4
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 4
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 5
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 5
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 4
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 3
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 3
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 5
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59855: LD_ADDR_VAR 0 32
59859: PUSH
59860: LD_INT 4
59862: NEG
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 4
59873: NEG
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 3
59885: NEG
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 3
59896: NEG
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 4
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 5
59918: NEG
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 5
59929: NEG
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 5
59941: NEG
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 3
59964: NEG
59965: PUSH
59966: LD_INT 3
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 3
59976: NEG
59977: PUSH
59978: LD_INT 4
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: LD_INT 3
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: NEG
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 3
60012: NEG
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 4
60024: NEG
60025: PUSH
60026: LD_INT 3
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 4
60036: NEG
60037: PUSH
60038: LD_INT 4
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: LD_INT 4
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 4
60060: NEG
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 4
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 5
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: LD_INT 4
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: LD_INT 3
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 4
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: LD_INT 5
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: LD_INT 3
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: LD_INT 5
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 4
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 4
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 3
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 4
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 4
60267: PUSH
60268: LD_INT 4
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 4
60277: PUSH
60278: LD_INT 3
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 5
60287: PUSH
60288: LD_INT 4
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 5
60297: PUSH
60298: LD_INT 5
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 4
60307: PUSH
60308: LD_INT 5
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: LD_INT 4
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: LD_INT 3
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 5
60337: PUSH
60338: LD_INT 3
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: PUSH
60348: LD_INT 5
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60402: LD_ADDR_VAR 0 33
60406: PUSH
60407: LD_INT 4
60409: NEG
60410: PUSH
60411: LD_INT 4
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 4
60421: NEG
60422: PUSH
60423: LD_INT 5
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: LD_INT 4
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 3
60445: NEG
60446: PUSH
60447: LD_INT 3
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 4
60457: NEG
60458: PUSH
60459: LD_INT 3
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 5
60469: NEG
60470: PUSH
60471: LD_INT 4
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 5
60481: NEG
60482: PUSH
60483: LD_INT 5
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 3
60493: NEG
60494: PUSH
60495: LD_INT 5
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 5
60505: NEG
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 4
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 3
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 2
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 2
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 3
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: LD_INT 4
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 2
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 2
60607: NEG
60608: PUSH
60609: LD_INT 4
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 4
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 4
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 5
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 5
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 4
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 3
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: LD_INT 1
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 3
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 5
60702: PUSH
60703: LD_INT 2
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: LD_INT 3
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: LD_INT 2
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 4
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 4
60742: PUSH
60743: LD_INT 4
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: LD_INT 4
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 2
60762: PUSH
60763: LD_INT 3
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 4
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: LD_INT 4
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: LD_INT 4
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: LD_INT 3
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: LD_INT 4
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: LD_INT 5
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: LD_INT 5
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: LD_INT 4
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 2
60874: PUSH
60875: LD_INT 5
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: LD_INT 3
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60940: LD_ADDR_VAR 0 34
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 4
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 5
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 4
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 3
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 3
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: LD_INT 4
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 5
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: LD_INT 3
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: LD_INT 5
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 3
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 4
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 4
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 3
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 4
61132: PUSH
61133: LD_INT 2
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 4
61142: PUSH
61143: LD_INT 4
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 4
61152: PUSH
61153: LD_INT 3
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 5
61162: PUSH
61163: LD_INT 4
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 5
61172: PUSH
61173: LD_INT 5
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 4
61182: PUSH
61183: LD_INT 5
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: LD_INT 4
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 3
61202: PUSH
61203: LD_INT 3
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 5
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: LD_INT 5
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: LD_INT 3
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 4
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: LD_INT 4
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: LD_INT 2
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 2
61304: PUSH
61305: LD_INT 4
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: NEG
61315: PUSH
61316: LD_INT 2
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 4
61325: NEG
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 4
61336: NEG
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 3
61348: NEG
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 3
61359: NEG
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 4
61370: NEG
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 5
61381: NEG
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 5
61392: NEG
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 5
61404: NEG
61405: PUSH
61406: LD_INT 2
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: LD_INT 2
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: ST_TO_ADDR
// end ; end ;
61472: GO 61475
61474: POP
// case btype of b_depot , b_warehouse :
61475: LD_VAR 0 1
61479: PUSH
61480: LD_INT 0
61482: DOUBLE
61483: EQUAL
61484: IFTRUE 61494
61486: LD_INT 1
61488: DOUBLE
61489: EQUAL
61490: IFTRUE 61494
61492: GO 61695
61494: POP
// case nation of nation_american :
61495: LD_VAR 0 5
61499: PUSH
61500: LD_INT 1
61502: DOUBLE
61503: EQUAL
61504: IFTRUE 61508
61506: GO 61564
61508: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61509: LD_ADDR_VAR 0 9
61513: PUSH
61514: LD_VAR 0 11
61518: PUSH
61519: LD_VAR 0 12
61523: PUSH
61524: LD_VAR 0 13
61528: PUSH
61529: LD_VAR 0 14
61533: PUSH
61534: LD_VAR 0 15
61538: PUSH
61539: LD_VAR 0 16
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: PUSH
61552: LD_VAR 0 4
61556: PUSH
61557: LD_INT 1
61559: PLUS
61560: ARRAY
61561: ST_TO_ADDR
61562: GO 61693
61564: LD_INT 2
61566: DOUBLE
61567: EQUAL
61568: IFTRUE 61572
61570: GO 61628
61572: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61573: LD_ADDR_VAR 0 9
61577: PUSH
61578: LD_VAR 0 17
61582: PUSH
61583: LD_VAR 0 18
61587: PUSH
61588: LD_VAR 0 19
61592: PUSH
61593: LD_VAR 0 20
61597: PUSH
61598: LD_VAR 0 21
61602: PUSH
61603: LD_VAR 0 22
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: PUSH
61616: LD_VAR 0 4
61620: PUSH
61621: LD_INT 1
61623: PLUS
61624: ARRAY
61625: ST_TO_ADDR
61626: GO 61693
61628: LD_INT 3
61630: DOUBLE
61631: EQUAL
61632: IFTRUE 61636
61634: GO 61692
61636: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61637: LD_ADDR_VAR 0 9
61641: PUSH
61642: LD_VAR 0 23
61646: PUSH
61647: LD_VAR 0 24
61651: PUSH
61652: LD_VAR 0 25
61656: PUSH
61657: LD_VAR 0 26
61661: PUSH
61662: LD_VAR 0 27
61666: PUSH
61667: LD_VAR 0 28
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: PUSH
61680: LD_VAR 0 4
61684: PUSH
61685: LD_INT 1
61687: PLUS
61688: ARRAY
61689: ST_TO_ADDR
61690: GO 61693
61692: POP
61693: GO 62248
61695: LD_INT 2
61697: DOUBLE
61698: EQUAL
61699: IFTRUE 61709
61701: LD_INT 3
61703: DOUBLE
61704: EQUAL
61705: IFTRUE 61709
61707: GO 61765
61709: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61710: LD_ADDR_VAR 0 9
61714: PUSH
61715: LD_VAR 0 29
61719: PUSH
61720: LD_VAR 0 30
61724: PUSH
61725: LD_VAR 0 31
61729: PUSH
61730: LD_VAR 0 32
61734: PUSH
61735: LD_VAR 0 33
61739: PUSH
61740: LD_VAR 0 34
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: PUSH
61753: LD_VAR 0 4
61757: PUSH
61758: LD_INT 1
61760: PLUS
61761: ARRAY
61762: ST_TO_ADDR
61763: GO 62248
61765: LD_INT 16
61767: DOUBLE
61768: EQUAL
61769: IFTRUE 61827
61771: LD_INT 17
61773: DOUBLE
61774: EQUAL
61775: IFTRUE 61827
61777: LD_INT 18
61779: DOUBLE
61780: EQUAL
61781: IFTRUE 61827
61783: LD_INT 19
61785: DOUBLE
61786: EQUAL
61787: IFTRUE 61827
61789: LD_INT 22
61791: DOUBLE
61792: EQUAL
61793: IFTRUE 61827
61795: LD_INT 20
61797: DOUBLE
61798: EQUAL
61799: IFTRUE 61827
61801: LD_INT 21
61803: DOUBLE
61804: EQUAL
61805: IFTRUE 61827
61807: LD_INT 23
61809: DOUBLE
61810: EQUAL
61811: IFTRUE 61827
61813: LD_INT 24
61815: DOUBLE
61816: EQUAL
61817: IFTRUE 61827
61819: LD_INT 25
61821: DOUBLE
61822: EQUAL
61823: IFTRUE 61827
61825: GO 61883
61827: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61828: LD_ADDR_VAR 0 9
61832: PUSH
61833: LD_VAR 0 35
61837: PUSH
61838: LD_VAR 0 36
61842: PUSH
61843: LD_VAR 0 37
61847: PUSH
61848: LD_VAR 0 38
61852: PUSH
61853: LD_VAR 0 39
61857: PUSH
61858: LD_VAR 0 40
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: PUSH
61871: LD_VAR 0 4
61875: PUSH
61876: LD_INT 1
61878: PLUS
61879: ARRAY
61880: ST_TO_ADDR
61881: GO 62248
61883: LD_INT 6
61885: DOUBLE
61886: EQUAL
61887: IFTRUE 61939
61889: LD_INT 7
61891: DOUBLE
61892: EQUAL
61893: IFTRUE 61939
61895: LD_INT 8
61897: DOUBLE
61898: EQUAL
61899: IFTRUE 61939
61901: LD_INT 13
61903: DOUBLE
61904: EQUAL
61905: IFTRUE 61939
61907: LD_INT 12
61909: DOUBLE
61910: EQUAL
61911: IFTRUE 61939
61913: LD_INT 15
61915: DOUBLE
61916: EQUAL
61917: IFTRUE 61939
61919: LD_INT 11
61921: DOUBLE
61922: EQUAL
61923: IFTRUE 61939
61925: LD_INT 14
61927: DOUBLE
61928: EQUAL
61929: IFTRUE 61939
61931: LD_INT 10
61933: DOUBLE
61934: EQUAL
61935: IFTRUE 61939
61937: GO 61995
61939: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61940: LD_ADDR_VAR 0 9
61944: PUSH
61945: LD_VAR 0 41
61949: PUSH
61950: LD_VAR 0 42
61954: PUSH
61955: LD_VAR 0 43
61959: PUSH
61960: LD_VAR 0 44
61964: PUSH
61965: LD_VAR 0 45
61969: PUSH
61970: LD_VAR 0 46
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: PUSH
61983: LD_VAR 0 4
61987: PUSH
61988: LD_INT 1
61990: PLUS
61991: ARRAY
61992: ST_TO_ADDR
61993: GO 62248
61995: LD_INT 36
61997: DOUBLE
61998: EQUAL
61999: IFTRUE 62003
62001: GO 62059
62003: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62004: LD_ADDR_VAR 0 9
62008: PUSH
62009: LD_VAR 0 47
62013: PUSH
62014: LD_VAR 0 48
62018: PUSH
62019: LD_VAR 0 49
62023: PUSH
62024: LD_VAR 0 50
62028: PUSH
62029: LD_VAR 0 51
62033: PUSH
62034: LD_VAR 0 52
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: PUSH
62047: LD_VAR 0 4
62051: PUSH
62052: LD_INT 1
62054: PLUS
62055: ARRAY
62056: ST_TO_ADDR
62057: GO 62248
62059: LD_INT 4
62061: DOUBLE
62062: EQUAL
62063: IFTRUE 62085
62065: LD_INT 5
62067: DOUBLE
62068: EQUAL
62069: IFTRUE 62085
62071: LD_INT 34
62073: DOUBLE
62074: EQUAL
62075: IFTRUE 62085
62077: LD_INT 37
62079: DOUBLE
62080: EQUAL
62081: IFTRUE 62085
62083: GO 62141
62085: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62086: LD_ADDR_VAR 0 9
62090: PUSH
62091: LD_VAR 0 53
62095: PUSH
62096: LD_VAR 0 54
62100: PUSH
62101: LD_VAR 0 55
62105: PUSH
62106: LD_VAR 0 56
62110: PUSH
62111: LD_VAR 0 57
62115: PUSH
62116: LD_VAR 0 58
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: PUSH
62129: LD_VAR 0 4
62133: PUSH
62134: LD_INT 1
62136: PLUS
62137: ARRAY
62138: ST_TO_ADDR
62139: GO 62248
62141: LD_INT 31
62143: DOUBLE
62144: EQUAL
62145: IFTRUE 62191
62147: LD_INT 32
62149: DOUBLE
62150: EQUAL
62151: IFTRUE 62191
62153: LD_INT 33
62155: DOUBLE
62156: EQUAL
62157: IFTRUE 62191
62159: LD_INT 27
62161: DOUBLE
62162: EQUAL
62163: IFTRUE 62191
62165: LD_INT 26
62167: DOUBLE
62168: EQUAL
62169: IFTRUE 62191
62171: LD_INT 28
62173: DOUBLE
62174: EQUAL
62175: IFTRUE 62191
62177: LD_INT 29
62179: DOUBLE
62180: EQUAL
62181: IFTRUE 62191
62183: LD_INT 30
62185: DOUBLE
62186: EQUAL
62187: IFTRUE 62191
62189: GO 62247
62191: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62192: LD_ADDR_VAR 0 9
62196: PUSH
62197: LD_VAR 0 59
62201: PUSH
62202: LD_VAR 0 60
62206: PUSH
62207: LD_VAR 0 61
62211: PUSH
62212: LD_VAR 0 62
62216: PUSH
62217: LD_VAR 0 63
62221: PUSH
62222: LD_VAR 0 64
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: PUSH
62235: LD_VAR 0 4
62239: PUSH
62240: LD_INT 1
62242: PLUS
62243: ARRAY
62244: ST_TO_ADDR
62245: GO 62248
62247: POP
// temp_list2 = [ ] ;
62248: LD_ADDR_VAR 0 10
62252: PUSH
62253: EMPTY
62254: ST_TO_ADDR
// for i in temp_list do
62255: LD_ADDR_VAR 0 8
62259: PUSH
62260: LD_VAR 0 9
62264: PUSH
62265: FOR_IN
62266: IFFALSE 62318
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62268: LD_ADDR_VAR 0 10
62272: PUSH
62273: LD_VAR 0 10
62277: PUSH
62278: LD_VAR 0 8
62282: PUSH
62283: LD_INT 1
62285: ARRAY
62286: PUSH
62287: LD_VAR 0 2
62291: PLUS
62292: PUSH
62293: LD_VAR 0 8
62297: PUSH
62298: LD_INT 2
62300: ARRAY
62301: PUSH
62302: LD_VAR 0 3
62306: PLUS
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: EMPTY
62313: LIST
62314: ADD
62315: ST_TO_ADDR
62316: GO 62265
62318: POP
62319: POP
// result = temp_list2 ;
62320: LD_ADDR_VAR 0 7
62324: PUSH
62325: LD_VAR 0 10
62329: ST_TO_ADDR
// end ;
62330: LD_VAR 0 7
62334: RET
// export function EnemyInRange ( unit , dist ) ; begin
62335: LD_INT 0
62337: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62338: LD_ADDR_VAR 0 3
62342: PUSH
62343: LD_VAR 0 1
62347: PPUSH
62348: CALL_OW 255
62352: PPUSH
62353: LD_VAR 0 1
62357: PPUSH
62358: CALL_OW 250
62362: PPUSH
62363: LD_VAR 0 1
62367: PPUSH
62368: CALL_OW 251
62372: PPUSH
62373: LD_VAR 0 2
62377: PPUSH
62378: CALL 35708 0 4
62382: PUSH
62383: LD_INT 4
62385: ARRAY
62386: ST_TO_ADDR
// end ;
62387: LD_VAR 0 3
62391: RET
// export function PlayerSeeMe ( unit ) ; begin
62392: LD_INT 0
62394: PPUSH
// result := See ( your_side , unit ) ;
62395: LD_ADDR_VAR 0 2
62399: PUSH
62400: LD_OWVAR 2
62404: PPUSH
62405: LD_VAR 0 1
62409: PPUSH
62410: CALL_OW 292
62414: ST_TO_ADDR
// end ;
62415: LD_VAR 0 2
62419: RET
// export function ReverseDir ( unit ) ; begin
62420: LD_INT 0
62422: PPUSH
// if not unit then
62423: LD_VAR 0 1
62427: NOT
62428: IFFALSE 62432
// exit ;
62430: GO 62455
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62432: LD_ADDR_VAR 0 2
62436: PUSH
62437: LD_VAR 0 1
62441: PPUSH
62442: CALL_OW 254
62446: PUSH
62447: LD_INT 3
62449: PLUS
62450: PUSH
62451: LD_INT 6
62453: MOD
62454: ST_TO_ADDR
// end ;
62455: LD_VAR 0 2
62459: RET
// export function ReverseArray ( array ) ; var i ; begin
62460: LD_INT 0
62462: PPUSH
62463: PPUSH
// if not array then
62464: LD_VAR 0 1
62468: NOT
62469: IFFALSE 62473
// exit ;
62471: GO 62528
// result := [ ] ;
62473: LD_ADDR_VAR 0 2
62477: PUSH
62478: EMPTY
62479: ST_TO_ADDR
// for i := array downto 1 do
62480: LD_ADDR_VAR 0 3
62484: PUSH
62485: DOUBLE
62486: LD_VAR 0 1
62490: INC
62491: ST_TO_ADDR
62492: LD_INT 1
62494: PUSH
62495: FOR_DOWNTO
62496: IFFALSE 62526
// result := Join ( result , array [ i ] ) ;
62498: LD_ADDR_VAR 0 2
62502: PUSH
62503: LD_VAR 0 2
62507: PPUSH
62508: LD_VAR 0 1
62512: PUSH
62513: LD_VAR 0 3
62517: ARRAY
62518: PPUSH
62519: CALL 67193 0 2
62523: ST_TO_ADDR
62524: GO 62495
62526: POP
62527: POP
// end ;
62528: LD_VAR 0 2
62532: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62533: LD_INT 0
62535: PPUSH
62536: PPUSH
62537: PPUSH
62538: PPUSH
62539: PPUSH
62540: PPUSH
// if not unit or not hexes then
62541: LD_VAR 0 1
62545: NOT
62546: PUSH
62547: LD_VAR 0 2
62551: NOT
62552: OR
62553: IFFALSE 62557
// exit ;
62555: GO 62680
// dist := 9999 ;
62557: LD_ADDR_VAR 0 5
62561: PUSH
62562: LD_INT 9999
62564: ST_TO_ADDR
// for i = 1 to hexes do
62565: LD_ADDR_VAR 0 4
62569: PUSH
62570: DOUBLE
62571: LD_INT 1
62573: DEC
62574: ST_TO_ADDR
62575: LD_VAR 0 2
62579: PUSH
62580: FOR_TO
62581: IFFALSE 62668
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62583: LD_ADDR_VAR 0 6
62587: PUSH
62588: LD_VAR 0 1
62592: PPUSH
62593: LD_VAR 0 2
62597: PUSH
62598: LD_VAR 0 4
62602: ARRAY
62603: PUSH
62604: LD_INT 1
62606: ARRAY
62607: PPUSH
62608: LD_VAR 0 2
62612: PUSH
62613: LD_VAR 0 4
62617: ARRAY
62618: PUSH
62619: LD_INT 2
62621: ARRAY
62622: PPUSH
62623: CALL_OW 297
62627: ST_TO_ADDR
// if tdist < dist then
62628: LD_VAR 0 6
62632: PUSH
62633: LD_VAR 0 5
62637: LESS
62638: IFFALSE 62666
// begin hex := hexes [ i ] ;
62640: LD_ADDR_VAR 0 8
62644: PUSH
62645: LD_VAR 0 2
62649: PUSH
62650: LD_VAR 0 4
62654: ARRAY
62655: ST_TO_ADDR
// dist := tdist ;
62656: LD_ADDR_VAR 0 5
62660: PUSH
62661: LD_VAR 0 6
62665: ST_TO_ADDR
// end ; end ;
62666: GO 62580
62668: POP
62669: POP
// result := hex ;
62670: LD_ADDR_VAR 0 3
62674: PUSH
62675: LD_VAR 0 8
62679: ST_TO_ADDR
// end ;
62680: LD_VAR 0 3
62684: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62685: LD_INT 0
62687: PPUSH
62688: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62689: LD_VAR 0 1
62693: NOT
62694: PUSH
62695: LD_VAR 0 1
62699: PUSH
62700: LD_INT 21
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 23
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PPUSH
62724: CALL_OW 69
62728: IN
62729: NOT
62730: OR
62731: IFFALSE 62735
// exit ;
62733: GO 62782
// for i = 1 to 3 do
62735: LD_ADDR_VAR 0 3
62739: PUSH
62740: DOUBLE
62741: LD_INT 1
62743: DEC
62744: ST_TO_ADDR
62745: LD_INT 3
62747: PUSH
62748: FOR_TO
62749: IFFALSE 62780
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62751: LD_VAR 0 1
62755: PPUSH
62756: CALL_OW 250
62760: PPUSH
62761: LD_VAR 0 1
62765: PPUSH
62766: CALL_OW 251
62770: PPUSH
62771: LD_INT 1
62773: PPUSH
62774: CALL_OW 453
62778: GO 62748
62780: POP
62781: POP
// end ;
62782: LD_VAR 0 2
62786: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62787: LD_INT 0
62789: PPUSH
62790: PPUSH
62791: PPUSH
62792: PPUSH
62793: PPUSH
62794: PPUSH
// if not unit or not enemy_unit then
62795: LD_VAR 0 1
62799: NOT
62800: PUSH
62801: LD_VAR 0 2
62805: NOT
62806: OR
62807: IFFALSE 62811
// exit ;
62809: GO 63278
// if GetLives ( i ) < 250 then
62811: LD_VAR 0 4
62815: PPUSH
62816: CALL_OW 256
62820: PUSH
62821: LD_INT 250
62823: LESS
62824: IFFALSE 62837
// begin ComAutodestruct ( i ) ;
62826: LD_VAR 0 4
62830: PPUSH
62831: CALL 62685 0 1
// exit ;
62835: GO 63278
// end ; x := GetX ( enemy_unit ) ;
62837: LD_ADDR_VAR 0 7
62841: PUSH
62842: LD_VAR 0 2
62846: PPUSH
62847: CALL_OW 250
62851: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62852: LD_ADDR_VAR 0 8
62856: PUSH
62857: LD_VAR 0 2
62861: PPUSH
62862: CALL_OW 251
62866: ST_TO_ADDR
// if not x or not y then
62867: LD_VAR 0 7
62871: NOT
62872: PUSH
62873: LD_VAR 0 8
62877: NOT
62878: OR
62879: IFFALSE 62883
// exit ;
62881: GO 63278
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62883: LD_ADDR_VAR 0 6
62887: PUSH
62888: LD_VAR 0 7
62892: PPUSH
62893: LD_INT 0
62895: PPUSH
62896: LD_INT 4
62898: PPUSH
62899: CALL_OW 272
62903: PUSH
62904: LD_VAR 0 8
62908: PPUSH
62909: LD_INT 0
62911: PPUSH
62912: LD_INT 4
62914: PPUSH
62915: CALL_OW 273
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_VAR 0 7
62928: PPUSH
62929: LD_INT 1
62931: PPUSH
62932: LD_INT 4
62934: PPUSH
62935: CALL_OW 272
62939: PUSH
62940: LD_VAR 0 8
62944: PPUSH
62945: LD_INT 1
62947: PPUSH
62948: LD_INT 4
62950: PPUSH
62951: CALL_OW 273
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_VAR 0 7
62964: PPUSH
62965: LD_INT 2
62967: PPUSH
62968: LD_INT 4
62970: PPUSH
62971: CALL_OW 272
62975: PUSH
62976: LD_VAR 0 8
62980: PPUSH
62981: LD_INT 2
62983: PPUSH
62984: LD_INT 4
62986: PPUSH
62987: CALL_OW 273
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_VAR 0 7
63000: PPUSH
63001: LD_INT 3
63003: PPUSH
63004: LD_INT 4
63006: PPUSH
63007: CALL_OW 272
63011: PUSH
63012: LD_VAR 0 8
63016: PPUSH
63017: LD_INT 3
63019: PPUSH
63020: LD_INT 4
63022: PPUSH
63023: CALL_OW 273
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_VAR 0 7
63036: PPUSH
63037: LD_INT 4
63039: PPUSH
63040: LD_INT 4
63042: PPUSH
63043: CALL_OW 272
63047: PUSH
63048: LD_VAR 0 8
63052: PPUSH
63053: LD_INT 4
63055: PPUSH
63056: LD_INT 4
63058: PPUSH
63059: CALL_OW 273
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_VAR 0 7
63072: PPUSH
63073: LD_INT 5
63075: PPUSH
63076: LD_INT 4
63078: PPUSH
63079: CALL_OW 272
63083: PUSH
63084: LD_VAR 0 8
63088: PPUSH
63089: LD_INT 5
63091: PPUSH
63092: LD_INT 4
63094: PPUSH
63095: CALL_OW 273
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: ST_TO_ADDR
// for i = tmp downto 1 do
63112: LD_ADDR_VAR 0 4
63116: PUSH
63117: DOUBLE
63118: LD_VAR 0 6
63122: INC
63123: ST_TO_ADDR
63124: LD_INT 1
63126: PUSH
63127: FOR_DOWNTO
63128: IFFALSE 63229
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63130: LD_VAR 0 6
63134: PUSH
63135: LD_VAR 0 4
63139: ARRAY
63140: PUSH
63141: LD_INT 1
63143: ARRAY
63144: PPUSH
63145: LD_VAR 0 6
63149: PUSH
63150: LD_VAR 0 4
63154: ARRAY
63155: PUSH
63156: LD_INT 2
63158: ARRAY
63159: PPUSH
63160: CALL_OW 488
63164: NOT
63165: PUSH
63166: LD_VAR 0 6
63170: PUSH
63171: LD_VAR 0 4
63175: ARRAY
63176: PUSH
63177: LD_INT 1
63179: ARRAY
63180: PPUSH
63181: LD_VAR 0 6
63185: PUSH
63186: LD_VAR 0 4
63190: ARRAY
63191: PUSH
63192: LD_INT 2
63194: ARRAY
63195: PPUSH
63196: CALL_OW 428
63200: PUSH
63201: LD_INT 0
63203: NONEQUAL
63204: OR
63205: IFFALSE 63227
// tmp := Delete ( tmp , i ) ;
63207: LD_ADDR_VAR 0 6
63211: PUSH
63212: LD_VAR 0 6
63216: PPUSH
63217: LD_VAR 0 4
63221: PPUSH
63222: CALL_OW 3
63226: ST_TO_ADDR
63227: GO 63127
63229: POP
63230: POP
// j := GetClosestHex ( unit , tmp ) ;
63231: LD_ADDR_VAR 0 5
63235: PUSH
63236: LD_VAR 0 1
63240: PPUSH
63241: LD_VAR 0 6
63245: PPUSH
63246: CALL 62533 0 2
63250: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63251: LD_VAR 0 1
63255: PPUSH
63256: LD_VAR 0 5
63260: PUSH
63261: LD_INT 1
63263: ARRAY
63264: PPUSH
63265: LD_VAR 0 5
63269: PUSH
63270: LD_INT 2
63272: ARRAY
63273: PPUSH
63274: CALL_OW 111
// end ;
63278: LD_VAR 0 3
63282: RET
// export function PrepareApemanSoldier ( ) ; begin
63283: LD_INT 0
63285: PPUSH
// uc_nation := 0 ;
63286: LD_ADDR_OWVAR 21
63290: PUSH
63291: LD_INT 0
63293: ST_TO_ADDR
// hc_sex := sex_male ;
63294: LD_ADDR_OWVAR 27
63298: PUSH
63299: LD_INT 1
63301: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63302: LD_ADDR_OWVAR 28
63306: PUSH
63307: LD_INT 15
63309: ST_TO_ADDR
// hc_gallery :=  ;
63310: LD_ADDR_OWVAR 33
63314: PUSH
63315: LD_STRING 
63317: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63318: LD_ADDR_OWVAR 31
63322: PUSH
63323: LD_INT 0
63325: PPUSH
63326: LD_INT 3
63328: PPUSH
63329: CALL_OW 12
63333: PUSH
63334: LD_INT 0
63336: PPUSH
63337: LD_INT 3
63339: PPUSH
63340: CALL_OW 12
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: ST_TO_ADDR
// end ;
63357: LD_VAR 0 1
63361: RET
// export function PrepareApemanEngineer ( ) ; begin
63362: LD_INT 0
63364: PPUSH
// uc_nation := 0 ;
63365: LD_ADDR_OWVAR 21
63369: PUSH
63370: LD_INT 0
63372: ST_TO_ADDR
// hc_sex := sex_male ;
63373: LD_ADDR_OWVAR 27
63377: PUSH
63378: LD_INT 1
63380: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63381: LD_ADDR_OWVAR 28
63385: PUSH
63386: LD_INT 16
63388: ST_TO_ADDR
// hc_gallery :=  ;
63389: LD_ADDR_OWVAR 33
63393: PUSH
63394: LD_STRING 
63396: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63397: LD_ADDR_OWVAR 31
63401: PUSH
63402: LD_INT 0
63404: PPUSH
63405: LD_INT 3
63407: PPUSH
63408: CALL_OW 12
63412: PUSH
63413: LD_INT 0
63415: PPUSH
63416: LD_INT 3
63418: PPUSH
63419: CALL_OW 12
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: ST_TO_ADDR
// end ;
63436: LD_VAR 0 1
63440: RET
// export function PrepareApeman ( agressivity ) ; begin
63441: LD_INT 0
63443: PPUSH
// uc_side := 0 ;
63444: LD_ADDR_OWVAR 20
63448: PUSH
63449: LD_INT 0
63451: ST_TO_ADDR
// uc_nation := 0 ;
63452: LD_ADDR_OWVAR 21
63456: PUSH
63457: LD_INT 0
63459: ST_TO_ADDR
// hc_sex := sex_male ;
63460: LD_ADDR_OWVAR 27
63464: PUSH
63465: LD_INT 1
63467: ST_TO_ADDR
// hc_class := class_apeman ;
63468: LD_ADDR_OWVAR 28
63472: PUSH
63473: LD_INT 12
63475: ST_TO_ADDR
// hc_gallery :=  ;
63476: LD_ADDR_OWVAR 33
63480: PUSH
63481: LD_STRING 
63483: ST_TO_ADDR
// if agressivity = 0 then
63484: LD_VAR 0 1
63488: PUSH
63489: LD_INT 0
63491: EQUAL
63492: IFFALSE 63504
// hc_agressivity := 0 else
63494: LD_ADDR_OWVAR 35
63498: PUSH
63499: LD_INT 0
63501: ST_TO_ADDR
63502: GO 63525
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63504: LD_ADDR_OWVAR 35
63508: PUSH
63509: LD_VAR 0 1
63513: NEG
63514: PPUSH
63515: LD_VAR 0 1
63519: PPUSH
63520: CALL_OW 12
63524: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63525: LD_ADDR_OWVAR 31
63529: PUSH
63530: LD_INT 0
63532: PPUSH
63533: LD_INT 3
63535: PPUSH
63536: CALL_OW 12
63540: PUSH
63541: LD_INT 0
63543: PPUSH
63544: LD_INT 3
63546: PPUSH
63547: CALL_OW 12
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: ST_TO_ADDR
// end ;
63564: LD_VAR 0 2
63568: RET
// export function PrepareTiger ( agressivity ) ; begin
63569: LD_INT 0
63571: PPUSH
// uc_side := 0 ;
63572: LD_ADDR_OWVAR 20
63576: PUSH
63577: LD_INT 0
63579: ST_TO_ADDR
// uc_nation := 0 ;
63580: LD_ADDR_OWVAR 21
63584: PUSH
63585: LD_INT 0
63587: ST_TO_ADDR
// hc_class := class_tiger ;
63588: LD_ADDR_OWVAR 28
63592: PUSH
63593: LD_INT 14
63595: ST_TO_ADDR
// hc_gallery :=  ;
63596: LD_ADDR_OWVAR 33
63600: PUSH
63601: LD_STRING 
63603: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63604: LD_ADDR_OWVAR 35
63608: PUSH
63609: LD_VAR 0 1
63613: NEG
63614: PPUSH
63615: LD_VAR 0 1
63619: PPUSH
63620: CALL_OW 12
63624: ST_TO_ADDR
// end ;
63625: LD_VAR 0 2
63629: RET
// export function PrepareEnchidna ( ) ; begin
63630: LD_INT 0
63632: PPUSH
// uc_side := 0 ;
63633: LD_ADDR_OWVAR 20
63637: PUSH
63638: LD_INT 0
63640: ST_TO_ADDR
// uc_nation := 0 ;
63641: LD_ADDR_OWVAR 21
63645: PUSH
63646: LD_INT 0
63648: ST_TO_ADDR
// hc_class := class_baggie ;
63649: LD_ADDR_OWVAR 28
63653: PUSH
63654: LD_INT 13
63656: ST_TO_ADDR
// hc_gallery :=  ;
63657: LD_ADDR_OWVAR 33
63661: PUSH
63662: LD_STRING 
63664: ST_TO_ADDR
// end ;
63665: LD_VAR 0 1
63669: RET
// export function PrepareFrog ( ) ; begin
63670: LD_INT 0
63672: PPUSH
// uc_side := 0 ;
63673: LD_ADDR_OWVAR 20
63677: PUSH
63678: LD_INT 0
63680: ST_TO_ADDR
// uc_nation := 0 ;
63681: LD_ADDR_OWVAR 21
63685: PUSH
63686: LD_INT 0
63688: ST_TO_ADDR
// hc_class := class_frog ;
63689: LD_ADDR_OWVAR 28
63693: PUSH
63694: LD_INT 19
63696: ST_TO_ADDR
// hc_gallery :=  ;
63697: LD_ADDR_OWVAR 33
63701: PUSH
63702: LD_STRING 
63704: ST_TO_ADDR
// end ;
63705: LD_VAR 0 1
63709: RET
// export function PrepareFish ( ) ; begin
63710: LD_INT 0
63712: PPUSH
// uc_side := 0 ;
63713: LD_ADDR_OWVAR 20
63717: PUSH
63718: LD_INT 0
63720: ST_TO_ADDR
// uc_nation := 0 ;
63721: LD_ADDR_OWVAR 21
63725: PUSH
63726: LD_INT 0
63728: ST_TO_ADDR
// hc_class := class_fish ;
63729: LD_ADDR_OWVAR 28
63733: PUSH
63734: LD_INT 20
63736: ST_TO_ADDR
// hc_gallery :=  ;
63737: LD_ADDR_OWVAR 33
63741: PUSH
63742: LD_STRING 
63744: ST_TO_ADDR
// end ;
63745: LD_VAR 0 1
63749: RET
// export function PrepareBird ( ) ; begin
63750: LD_INT 0
63752: PPUSH
// uc_side := 0 ;
63753: LD_ADDR_OWVAR 20
63757: PUSH
63758: LD_INT 0
63760: ST_TO_ADDR
// uc_nation := 0 ;
63761: LD_ADDR_OWVAR 21
63765: PUSH
63766: LD_INT 0
63768: ST_TO_ADDR
// hc_class := class_phororhacos ;
63769: LD_ADDR_OWVAR 28
63773: PUSH
63774: LD_INT 18
63776: ST_TO_ADDR
// hc_gallery :=  ;
63777: LD_ADDR_OWVAR 33
63781: PUSH
63782: LD_STRING 
63784: ST_TO_ADDR
// end ;
63785: LD_VAR 0 1
63789: RET
// export function PrepareHorse ( ) ; begin
63790: LD_INT 0
63792: PPUSH
// uc_side := 0 ;
63793: LD_ADDR_OWVAR 20
63797: PUSH
63798: LD_INT 0
63800: ST_TO_ADDR
// uc_nation := 0 ;
63801: LD_ADDR_OWVAR 21
63805: PUSH
63806: LD_INT 0
63808: ST_TO_ADDR
// hc_class := class_horse ;
63809: LD_ADDR_OWVAR 28
63813: PUSH
63814: LD_INT 21
63816: ST_TO_ADDR
// hc_gallery :=  ;
63817: LD_ADDR_OWVAR 33
63821: PUSH
63822: LD_STRING 
63824: ST_TO_ADDR
// end ;
63825: LD_VAR 0 1
63829: RET
// export function PrepareMastodont ( ) ; begin
63830: LD_INT 0
63832: PPUSH
// uc_side := 0 ;
63833: LD_ADDR_OWVAR 20
63837: PUSH
63838: LD_INT 0
63840: ST_TO_ADDR
// uc_nation := 0 ;
63841: LD_ADDR_OWVAR 21
63845: PUSH
63846: LD_INT 0
63848: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63849: LD_ADDR_OWVAR 37
63853: PUSH
63854: LD_INT 31
63856: ST_TO_ADDR
// vc_control := control_rider ;
63857: LD_ADDR_OWVAR 38
63861: PUSH
63862: LD_INT 4
63864: ST_TO_ADDR
// end ;
63865: LD_VAR 0 1
63869: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63870: LD_INT 0
63872: PPUSH
63873: PPUSH
63874: PPUSH
// uc_side = 0 ;
63875: LD_ADDR_OWVAR 20
63879: PUSH
63880: LD_INT 0
63882: ST_TO_ADDR
// uc_nation = 0 ;
63883: LD_ADDR_OWVAR 21
63887: PUSH
63888: LD_INT 0
63890: ST_TO_ADDR
// InitHc_All ( ) ;
63891: CALL_OW 584
// InitVc ;
63895: CALL_OW 20
// if mastodonts then
63899: LD_VAR 0 6
63903: IFFALSE 63970
// for i = 1 to mastodonts do
63905: LD_ADDR_VAR 0 11
63909: PUSH
63910: DOUBLE
63911: LD_INT 1
63913: DEC
63914: ST_TO_ADDR
63915: LD_VAR 0 6
63919: PUSH
63920: FOR_TO
63921: IFFALSE 63968
// begin vc_chassis := 31 ;
63923: LD_ADDR_OWVAR 37
63927: PUSH
63928: LD_INT 31
63930: ST_TO_ADDR
// vc_control := control_rider ;
63931: LD_ADDR_OWVAR 38
63935: PUSH
63936: LD_INT 4
63938: ST_TO_ADDR
// animal := CreateVehicle ;
63939: LD_ADDR_VAR 0 12
63943: PUSH
63944: CALL_OW 45
63948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63949: LD_VAR 0 12
63953: PPUSH
63954: LD_VAR 0 8
63958: PPUSH
63959: LD_INT 0
63961: PPUSH
63962: CALL 66098 0 3
// end ;
63966: GO 63920
63968: POP
63969: POP
// if horses then
63970: LD_VAR 0 5
63974: IFFALSE 64041
// for i = 1 to horses do
63976: LD_ADDR_VAR 0 11
63980: PUSH
63981: DOUBLE
63982: LD_INT 1
63984: DEC
63985: ST_TO_ADDR
63986: LD_VAR 0 5
63990: PUSH
63991: FOR_TO
63992: IFFALSE 64039
// begin hc_class := 21 ;
63994: LD_ADDR_OWVAR 28
63998: PUSH
63999: LD_INT 21
64001: ST_TO_ADDR
// hc_gallery :=  ;
64002: LD_ADDR_OWVAR 33
64006: PUSH
64007: LD_STRING 
64009: ST_TO_ADDR
// animal := CreateHuman ;
64010: LD_ADDR_VAR 0 12
64014: PUSH
64015: CALL_OW 44
64019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64020: LD_VAR 0 12
64024: PPUSH
64025: LD_VAR 0 8
64029: PPUSH
64030: LD_INT 0
64032: PPUSH
64033: CALL 66098 0 3
// end ;
64037: GO 63991
64039: POP
64040: POP
// if birds then
64041: LD_VAR 0 1
64045: IFFALSE 64112
// for i = 1 to birds do
64047: LD_ADDR_VAR 0 11
64051: PUSH
64052: DOUBLE
64053: LD_INT 1
64055: DEC
64056: ST_TO_ADDR
64057: LD_VAR 0 1
64061: PUSH
64062: FOR_TO
64063: IFFALSE 64110
// begin hc_class := 18 ;
64065: LD_ADDR_OWVAR 28
64069: PUSH
64070: LD_INT 18
64072: ST_TO_ADDR
// hc_gallery =  ;
64073: LD_ADDR_OWVAR 33
64077: PUSH
64078: LD_STRING 
64080: ST_TO_ADDR
// animal := CreateHuman ;
64081: LD_ADDR_VAR 0 12
64085: PUSH
64086: CALL_OW 44
64090: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64091: LD_VAR 0 12
64095: PPUSH
64096: LD_VAR 0 8
64100: PPUSH
64101: LD_INT 0
64103: PPUSH
64104: CALL 66098 0 3
// end ;
64108: GO 64062
64110: POP
64111: POP
// if tigers then
64112: LD_VAR 0 2
64116: IFFALSE 64200
// for i = 1 to tigers do
64118: LD_ADDR_VAR 0 11
64122: PUSH
64123: DOUBLE
64124: LD_INT 1
64126: DEC
64127: ST_TO_ADDR
64128: LD_VAR 0 2
64132: PUSH
64133: FOR_TO
64134: IFFALSE 64198
// begin hc_class = class_tiger ;
64136: LD_ADDR_OWVAR 28
64140: PUSH
64141: LD_INT 14
64143: ST_TO_ADDR
// hc_gallery =  ;
64144: LD_ADDR_OWVAR 33
64148: PUSH
64149: LD_STRING 
64151: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64152: LD_ADDR_OWVAR 35
64156: PUSH
64157: LD_INT 7
64159: NEG
64160: PPUSH
64161: LD_INT 7
64163: PPUSH
64164: CALL_OW 12
64168: ST_TO_ADDR
// animal := CreateHuman ;
64169: LD_ADDR_VAR 0 12
64173: PUSH
64174: CALL_OW 44
64178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64179: LD_VAR 0 12
64183: PPUSH
64184: LD_VAR 0 8
64188: PPUSH
64189: LD_INT 0
64191: PPUSH
64192: CALL 66098 0 3
// end ;
64196: GO 64133
64198: POP
64199: POP
// if apemans then
64200: LD_VAR 0 3
64204: IFFALSE 64327
// for i = 1 to apemans do
64206: LD_ADDR_VAR 0 11
64210: PUSH
64211: DOUBLE
64212: LD_INT 1
64214: DEC
64215: ST_TO_ADDR
64216: LD_VAR 0 3
64220: PUSH
64221: FOR_TO
64222: IFFALSE 64325
// begin hc_class = class_apeman ;
64224: LD_ADDR_OWVAR 28
64228: PUSH
64229: LD_INT 12
64231: ST_TO_ADDR
// hc_gallery =  ;
64232: LD_ADDR_OWVAR 33
64236: PUSH
64237: LD_STRING 
64239: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64240: LD_ADDR_OWVAR 35
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PPUSH
64249: LD_INT 2
64251: PPUSH
64252: CALL_OW 12
64256: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64257: LD_ADDR_OWVAR 31
64261: PUSH
64262: LD_INT 1
64264: PPUSH
64265: LD_INT 3
64267: PPUSH
64268: CALL_OW 12
64272: PUSH
64273: LD_INT 1
64275: PPUSH
64276: LD_INT 3
64278: PPUSH
64279: CALL_OW 12
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: ST_TO_ADDR
// animal := CreateHuman ;
64296: LD_ADDR_VAR 0 12
64300: PUSH
64301: CALL_OW 44
64305: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64306: LD_VAR 0 12
64310: PPUSH
64311: LD_VAR 0 8
64315: PPUSH
64316: LD_INT 0
64318: PPUSH
64319: CALL 66098 0 3
// end ;
64323: GO 64221
64325: POP
64326: POP
// if enchidnas then
64327: LD_VAR 0 4
64331: IFFALSE 64398
// for i = 1 to enchidnas do
64333: LD_ADDR_VAR 0 11
64337: PUSH
64338: DOUBLE
64339: LD_INT 1
64341: DEC
64342: ST_TO_ADDR
64343: LD_VAR 0 4
64347: PUSH
64348: FOR_TO
64349: IFFALSE 64396
// begin hc_class = 13 ;
64351: LD_ADDR_OWVAR 28
64355: PUSH
64356: LD_INT 13
64358: ST_TO_ADDR
// hc_gallery =  ;
64359: LD_ADDR_OWVAR 33
64363: PUSH
64364: LD_STRING 
64366: ST_TO_ADDR
// animal := CreateHuman ;
64367: LD_ADDR_VAR 0 12
64371: PUSH
64372: CALL_OW 44
64376: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64377: LD_VAR 0 12
64381: PPUSH
64382: LD_VAR 0 8
64386: PPUSH
64387: LD_INT 0
64389: PPUSH
64390: CALL 66098 0 3
// end ;
64394: GO 64348
64396: POP
64397: POP
// if fishes then
64398: LD_VAR 0 7
64402: IFFALSE 64469
// for i = 1 to fishes do
64404: LD_ADDR_VAR 0 11
64408: PUSH
64409: DOUBLE
64410: LD_INT 1
64412: DEC
64413: ST_TO_ADDR
64414: LD_VAR 0 7
64418: PUSH
64419: FOR_TO
64420: IFFALSE 64467
// begin hc_class = 20 ;
64422: LD_ADDR_OWVAR 28
64426: PUSH
64427: LD_INT 20
64429: ST_TO_ADDR
// hc_gallery =  ;
64430: LD_ADDR_OWVAR 33
64434: PUSH
64435: LD_STRING 
64437: ST_TO_ADDR
// animal := CreateHuman ;
64438: LD_ADDR_VAR 0 12
64442: PUSH
64443: CALL_OW 44
64447: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64448: LD_VAR 0 12
64452: PPUSH
64453: LD_VAR 0 9
64457: PPUSH
64458: LD_INT 0
64460: PPUSH
64461: CALL 66098 0 3
// end ;
64465: GO 64419
64467: POP
64468: POP
// end ;
64469: LD_VAR 0 10
64473: RET
// export function WantHeal ( sci , unit ) ; begin
64474: LD_INT 0
64476: PPUSH
// if GetTaskList ( sci ) > 0 then
64477: LD_VAR 0 1
64481: PPUSH
64482: CALL_OW 437
64486: PUSH
64487: LD_INT 0
64489: GREATER
64490: IFFALSE 64560
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64492: LD_VAR 0 1
64496: PPUSH
64497: CALL_OW 437
64501: PUSH
64502: LD_INT 1
64504: ARRAY
64505: PUSH
64506: LD_INT 1
64508: ARRAY
64509: PUSH
64510: LD_STRING l
64512: EQUAL
64513: PUSH
64514: LD_VAR 0 1
64518: PPUSH
64519: CALL_OW 437
64523: PUSH
64524: LD_INT 1
64526: ARRAY
64527: PUSH
64528: LD_INT 4
64530: ARRAY
64531: PUSH
64532: LD_VAR 0 2
64536: EQUAL
64537: AND
64538: IFFALSE 64550
// result := true else
64540: LD_ADDR_VAR 0 3
64544: PUSH
64545: LD_INT 1
64547: ST_TO_ADDR
64548: GO 64558
// result := false ;
64550: LD_ADDR_VAR 0 3
64554: PUSH
64555: LD_INT 0
64557: ST_TO_ADDR
// end else
64558: GO 64568
// result := false ;
64560: LD_ADDR_VAR 0 3
64564: PUSH
64565: LD_INT 0
64567: ST_TO_ADDR
// end ;
64568: LD_VAR 0 3
64572: RET
// export function HealTarget ( sci ) ; begin
64573: LD_INT 0
64575: PPUSH
// if not sci then
64576: LD_VAR 0 1
64580: NOT
64581: IFFALSE 64585
// exit ;
64583: GO 64650
// result := 0 ;
64585: LD_ADDR_VAR 0 2
64589: PUSH
64590: LD_INT 0
64592: ST_TO_ADDR
// if GetTaskList ( sci ) then
64593: LD_VAR 0 1
64597: PPUSH
64598: CALL_OW 437
64602: IFFALSE 64650
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64604: LD_VAR 0 1
64608: PPUSH
64609: CALL_OW 437
64613: PUSH
64614: LD_INT 1
64616: ARRAY
64617: PUSH
64618: LD_INT 1
64620: ARRAY
64621: PUSH
64622: LD_STRING l
64624: EQUAL
64625: IFFALSE 64650
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64627: LD_ADDR_VAR 0 2
64631: PUSH
64632: LD_VAR 0 1
64636: PPUSH
64637: CALL_OW 437
64641: PUSH
64642: LD_INT 1
64644: ARRAY
64645: PUSH
64646: LD_INT 4
64648: ARRAY
64649: ST_TO_ADDR
// end ;
64650: LD_VAR 0 2
64654: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64655: LD_INT 0
64657: PPUSH
64658: PPUSH
64659: PPUSH
64660: PPUSH
// if not base_units then
64661: LD_VAR 0 1
64665: NOT
64666: IFFALSE 64670
// exit ;
64668: GO 64757
// result := false ;
64670: LD_ADDR_VAR 0 2
64674: PUSH
64675: LD_INT 0
64677: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64678: LD_ADDR_VAR 0 5
64682: PUSH
64683: LD_VAR 0 1
64687: PPUSH
64688: LD_INT 21
64690: PUSH
64691: LD_INT 3
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PPUSH
64698: CALL_OW 72
64702: ST_TO_ADDR
// if not tmp then
64703: LD_VAR 0 5
64707: NOT
64708: IFFALSE 64712
// exit ;
64710: GO 64757
// for i in tmp do
64712: LD_ADDR_VAR 0 3
64716: PUSH
64717: LD_VAR 0 5
64721: PUSH
64722: FOR_IN
64723: IFFALSE 64755
// begin result := EnemyInRange ( i , 22 ) ;
64725: LD_ADDR_VAR 0 2
64729: PUSH
64730: LD_VAR 0 3
64734: PPUSH
64735: LD_INT 22
64737: PPUSH
64738: CALL 62335 0 2
64742: ST_TO_ADDR
// if result then
64743: LD_VAR 0 2
64747: IFFALSE 64753
// exit ;
64749: POP
64750: POP
64751: GO 64757
// end ;
64753: GO 64722
64755: POP
64756: POP
// end ;
64757: LD_VAR 0 2
64761: RET
// export function FilterByTag ( units , tag ) ; begin
64762: LD_INT 0
64764: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64765: LD_ADDR_VAR 0 3
64769: PUSH
64770: LD_VAR 0 1
64774: PPUSH
64775: LD_INT 120
64777: PUSH
64778: LD_VAR 0 2
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PPUSH
64787: CALL_OW 72
64791: ST_TO_ADDR
// end ;
64792: LD_VAR 0 3
64796: RET
// export function IsDriver ( un ) ; begin
64797: LD_INT 0
64799: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64800: LD_ADDR_VAR 0 2
64804: PUSH
64805: LD_VAR 0 1
64809: PUSH
64810: LD_INT 55
64812: PUSH
64813: EMPTY
64814: LIST
64815: PPUSH
64816: CALL_OW 69
64820: IN
64821: ST_TO_ADDR
// end ;
64822: LD_VAR 0 2
64826: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64827: LD_INT 0
64829: PPUSH
64830: PPUSH
// list := [ ] ;
64831: LD_ADDR_VAR 0 5
64835: PUSH
64836: EMPTY
64837: ST_TO_ADDR
// case d of 0 :
64838: LD_VAR 0 3
64842: PUSH
64843: LD_INT 0
64845: DOUBLE
64846: EQUAL
64847: IFTRUE 64851
64849: GO 64984
64851: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64852: LD_ADDR_VAR 0 5
64856: PUSH
64857: LD_VAR 0 1
64861: PUSH
64862: LD_INT 4
64864: MINUS
64865: PUSH
64866: LD_VAR 0 2
64870: PUSH
64871: LD_INT 4
64873: MINUS
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: LIST
64882: PUSH
64883: LD_VAR 0 1
64887: PUSH
64888: LD_INT 3
64890: MINUS
64891: PUSH
64892: LD_VAR 0 2
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: LIST
64904: PUSH
64905: LD_VAR 0 1
64909: PUSH
64910: LD_INT 4
64912: PLUS
64913: PUSH
64914: LD_VAR 0 2
64918: PUSH
64919: LD_INT 4
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: LIST
64926: PUSH
64927: LD_VAR 0 1
64931: PUSH
64932: LD_INT 3
64934: PLUS
64935: PUSH
64936: LD_VAR 0 2
64940: PUSH
64941: LD_INT 3
64943: PLUS
64944: PUSH
64945: LD_INT 5
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: LIST
64952: PUSH
64953: LD_VAR 0 1
64957: PUSH
64958: LD_VAR 0 2
64962: PUSH
64963: LD_INT 4
64965: PLUS
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: LIST
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: ST_TO_ADDR
// end ; 1 :
64982: GO 65682
64984: LD_INT 1
64986: DOUBLE
64987: EQUAL
64988: IFTRUE 64992
64990: GO 65125
64992: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64993: LD_ADDR_VAR 0 5
64997: PUSH
64998: LD_VAR 0 1
65002: PUSH
65003: LD_VAR 0 2
65007: PUSH
65008: LD_INT 4
65010: MINUS
65011: PUSH
65012: LD_INT 3
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: LIST
65019: PUSH
65020: LD_VAR 0 1
65024: PUSH
65025: LD_INT 3
65027: MINUS
65028: PUSH
65029: LD_VAR 0 2
65033: PUSH
65034: LD_INT 3
65036: MINUS
65037: PUSH
65038: LD_INT 2
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: LIST
65045: PUSH
65046: LD_VAR 0 1
65050: PUSH
65051: LD_INT 4
65053: MINUS
65054: PUSH
65055: LD_VAR 0 2
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: LIST
65067: PUSH
65068: LD_VAR 0 1
65072: PUSH
65073: LD_VAR 0 2
65077: PUSH
65078: LD_INT 3
65080: PLUS
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: LIST
65089: PUSH
65090: LD_VAR 0 1
65094: PUSH
65095: LD_INT 4
65097: PLUS
65098: PUSH
65099: LD_VAR 0 2
65103: PUSH
65104: LD_INT 4
65106: PLUS
65107: PUSH
65108: LD_INT 5
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: LIST
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: ST_TO_ADDR
// end ; 2 :
65123: GO 65682
65125: LD_INT 2
65127: DOUBLE
65128: EQUAL
65129: IFTRUE 65133
65131: GO 65262
65133: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65134: LD_ADDR_VAR 0 5
65138: PUSH
65139: LD_VAR 0 1
65143: PUSH
65144: LD_VAR 0 2
65148: PUSH
65149: LD_INT 3
65151: MINUS
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: LIST
65160: PUSH
65161: LD_VAR 0 1
65165: PUSH
65166: LD_INT 4
65168: PLUS
65169: PUSH
65170: LD_VAR 0 2
65174: PUSH
65175: LD_INT 4
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: LIST
65182: PUSH
65183: LD_VAR 0 1
65187: PUSH
65188: LD_VAR 0 2
65192: PUSH
65193: LD_INT 4
65195: PLUS
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: PUSH
65205: LD_VAR 0 1
65209: PUSH
65210: LD_INT 3
65212: MINUS
65213: PUSH
65214: LD_VAR 0 2
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: LIST
65226: PUSH
65227: LD_VAR 0 1
65231: PUSH
65232: LD_INT 4
65234: MINUS
65235: PUSH
65236: LD_VAR 0 2
65240: PUSH
65241: LD_INT 4
65243: MINUS
65244: PUSH
65245: LD_INT 2
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: LIST
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: ST_TO_ADDR
// end ; 3 :
65260: GO 65682
65262: LD_INT 3
65264: DOUBLE
65265: EQUAL
65266: IFTRUE 65270
65268: GO 65403
65270: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65271: LD_ADDR_VAR 0 5
65275: PUSH
65276: LD_VAR 0 1
65280: PUSH
65281: LD_INT 3
65283: PLUS
65284: PUSH
65285: LD_VAR 0 2
65289: PUSH
65290: LD_INT 4
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: PUSH
65298: LD_VAR 0 1
65302: PUSH
65303: LD_INT 4
65305: PLUS
65306: PUSH
65307: LD_VAR 0 2
65311: PUSH
65312: LD_INT 4
65314: PLUS
65315: PUSH
65316: LD_INT 5
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: LIST
65323: PUSH
65324: LD_VAR 0 1
65328: PUSH
65329: LD_INT 4
65331: MINUS
65332: PUSH
65333: LD_VAR 0 2
65337: PUSH
65338: LD_INT 1
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: LIST
65345: PUSH
65346: LD_VAR 0 1
65350: PUSH
65351: LD_VAR 0 2
65355: PUSH
65356: LD_INT 4
65358: MINUS
65359: PUSH
65360: LD_INT 3
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: LIST
65367: PUSH
65368: LD_VAR 0 1
65372: PUSH
65373: LD_INT 3
65375: MINUS
65376: PUSH
65377: LD_VAR 0 2
65381: PUSH
65382: LD_INT 3
65384: MINUS
65385: PUSH
65386: LD_INT 2
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: ST_TO_ADDR
// end ; 4 :
65401: GO 65682
65403: LD_INT 4
65405: DOUBLE
65406: EQUAL
65407: IFTRUE 65411
65409: GO 65544
65411: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65412: LD_ADDR_VAR 0 5
65416: PUSH
65417: LD_VAR 0 1
65421: PUSH
65422: LD_VAR 0 2
65426: PUSH
65427: LD_INT 4
65429: PLUS
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: PUSH
65439: LD_VAR 0 1
65443: PUSH
65444: LD_INT 3
65446: PLUS
65447: PUSH
65448: LD_VAR 0 2
65452: PUSH
65453: LD_INT 3
65455: PLUS
65456: PUSH
65457: LD_INT 5
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: LIST
65464: PUSH
65465: LD_VAR 0 1
65469: PUSH
65470: LD_INT 4
65472: PLUS
65473: PUSH
65474: LD_VAR 0 2
65478: PUSH
65479: LD_INT 4
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: LIST
65486: PUSH
65487: LD_VAR 0 1
65491: PUSH
65492: LD_VAR 0 2
65496: PUSH
65497: LD_INT 3
65499: MINUS
65500: PUSH
65501: LD_INT 3
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: LIST
65508: PUSH
65509: LD_VAR 0 1
65513: PUSH
65514: LD_INT 4
65516: MINUS
65517: PUSH
65518: LD_VAR 0 2
65522: PUSH
65523: LD_INT 4
65525: MINUS
65526: PUSH
65527: LD_INT 2
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: LIST
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: ST_TO_ADDR
// end ; 5 :
65542: GO 65682
65544: LD_INT 5
65546: DOUBLE
65547: EQUAL
65548: IFTRUE 65552
65550: GO 65681
65552: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65553: LD_ADDR_VAR 0 5
65557: PUSH
65558: LD_VAR 0 1
65562: PUSH
65563: LD_INT 4
65565: MINUS
65566: PUSH
65567: LD_VAR 0 2
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: LIST
65579: PUSH
65580: LD_VAR 0 1
65584: PUSH
65585: LD_VAR 0 2
65589: PUSH
65590: LD_INT 4
65592: MINUS
65593: PUSH
65594: LD_INT 3
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: LIST
65601: PUSH
65602: LD_VAR 0 1
65606: PUSH
65607: LD_INT 4
65609: PLUS
65610: PUSH
65611: LD_VAR 0 2
65615: PUSH
65616: LD_INT 4
65618: PLUS
65619: PUSH
65620: LD_INT 5
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: LIST
65627: PUSH
65628: LD_VAR 0 1
65632: PUSH
65633: LD_INT 3
65635: PLUS
65636: PUSH
65637: LD_VAR 0 2
65641: PUSH
65642: LD_INT 4
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: LIST
65649: PUSH
65650: LD_VAR 0 1
65654: PUSH
65655: LD_VAR 0 2
65659: PUSH
65660: LD_INT 3
65662: PLUS
65663: PUSH
65664: LD_INT 0
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: LIST
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: ST_TO_ADDR
// end ; end ;
65679: GO 65682
65681: POP
// result := list ;
65682: LD_ADDR_VAR 0 4
65686: PUSH
65687: LD_VAR 0 5
65691: ST_TO_ADDR
// end ;
65692: LD_VAR 0 4
65696: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65697: LD_INT 0
65699: PPUSH
65700: PPUSH
65701: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65702: LD_VAR 0 1
65706: NOT
65707: PUSH
65708: LD_VAR 0 2
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 2
65718: PUSH
65719: LD_INT 3
65721: PUSH
65722: LD_INT 4
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: IN
65731: NOT
65732: OR
65733: IFFALSE 65737
// exit ;
65735: GO 65820
// tmp := [ ] ;
65737: LD_ADDR_VAR 0 5
65741: PUSH
65742: EMPTY
65743: ST_TO_ADDR
// for i in units do
65744: LD_ADDR_VAR 0 4
65748: PUSH
65749: LD_VAR 0 1
65753: PUSH
65754: FOR_IN
65755: IFFALSE 65789
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65757: LD_ADDR_VAR 0 5
65761: PUSH
65762: LD_VAR 0 5
65766: PPUSH
65767: LD_VAR 0 4
65771: PPUSH
65772: LD_VAR 0 2
65776: PPUSH
65777: CALL_OW 259
65781: PPUSH
65782: CALL 67193 0 2
65786: ST_TO_ADDR
65787: GO 65754
65789: POP
65790: POP
// if not tmp then
65791: LD_VAR 0 5
65795: NOT
65796: IFFALSE 65800
// exit ;
65798: GO 65820
// result := SortListByListDesc ( units , tmp ) ;
65800: LD_ADDR_VAR 0 3
65804: PUSH
65805: LD_VAR 0 1
65809: PPUSH
65810: LD_VAR 0 5
65814: PPUSH
65815: CALL_OW 77
65819: ST_TO_ADDR
// end ;
65820: LD_VAR 0 3
65824: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65825: LD_INT 0
65827: PPUSH
65828: PPUSH
65829: PPUSH
// result := false ;
65830: LD_ADDR_VAR 0 3
65834: PUSH
65835: LD_INT 0
65837: ST_TO_ADDR
// if not building then
65838: LD_VAR 0 2
65842: NOT
65843: IFFALSE 65847
// exit ;
65845: GO 65985
// x := GetX ( building ) ;
65847: LD_ADDR_VAR 0 4
65851: PUSH
65852: LD_VAR 0 2
65856: PPUSH
65857: CALL_OW 250
65861: ST_TO_ADDR
// y := GetY ( building ) ;
65862: LD_ADDR_VAR 0 5
65866: PUSH
65867: LD_VAR 0 2
65871: PPUSH
65872: CALL_OW 251
65876: ST_TO_ADDR
// if not x or not y then
65877: LD_VAR 0 4
65881: NOT
65882: PUSH
65883: LD_VAR 0 5
65887: NOT
65888: OR
65889: IFFALSE 65893
// exit ;
65891: GO 65985
// if GetTaskList ( unit ) then
65893: LD_VAR 0 1
65897: PPUSH
65898: CALL_OW 437
65902: IFFALSE 65985
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65904: LD_STRING e
65906: PUSH
65907: LD_VAR 0 1
65911: PPUSH
65912: CALL_OW 437
65916: PUSH
65917: LD_INT 1
65919: ARRAY
65920: PUSH
65921: LD_INT 1
65923: ARRAY
65924: EQUAL
65925: PUSH
65926: LD_VAR 0 4
65930: PUSH
65931: LD_VAR 0 1
65935: PPUSH
65936: CALL_OW 437
65940: PUSH
65941: LD_INT 1
65943: ARRAY
65944: PUSH
65945: LD_INT 2
65947: ARRAY
65948: EQUAL
65949: AND
65950: PUSH
65951: LD_VAR 0 5
65955: PUSH
65956: LD_VAR 0 1
65960: PPUSH
65961: CALL_OW 437
65965: PUSH
65966: LD_INT 1
65968: ARRAY
65969: PUSH
65970: LD_INT 3
65972: ARRAY
65973: EQUAL
65974: AND
65975: IFFALSE 65985
// result := true end ;
65977: LD_ADDR_VAR 0 3
65981: PUSH
65982: LD_INT 1
65984: ST_TO_ADDR
// end ;
65985: LD_VAR 0 3
65989: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65990: LD_INT 0
65992: PPUSH
// result := false ;
65993: LD_ADDR_VAR 0 4
65997: PUSH
65998: LD_INT 0
66000: ST_TO_ADDR
// if GetTaskList ( unit ) then
66001: LD_VAR 0 1
66005: PPUSH
66006: CALL_OW 437
66010: IFFALSE 66093
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66012: LD_STRING M
66014: PUSH
66015: LD_VAR 0 1
66019: PPUSH
66020: CALL_OW 437
66024: PUSH
66025: LD_INT 1
66027: ARRAY
66028: PUSH
66029: LD_INT 1
66031: ARRAY
66032: EQUAL
66033: PUSH
66034: LD_VAR 0 2
66038: PUSH
66039: LD_VAR 0 1
66043: PPUSH
66044: CALL_OW 437
66048: PUSH
66049: LD_INT 1
66051: ARRAY
66052: PUSH
66053: LD_INT 2
66055: ARRAY
66056: EQUAL
66057: AND
66058: PUSH
66059: LD_VAR 0 3
66063: PUSH
66064: LD_VAR 0 1
66068: PPUSH
66069: CALL_OW 437
66073: PUSH
66074: LD_INT 1
66076: ARRAY
66077: PUSH
66078: LD_INT 3
66080: ARRAY
66081: EQUAL
66082: AND
66083: IFFALSE 66093
// result := true ;
66085: LD_ADDR_VAR 0 4
66089: PUSH
66090: LD_INT 1
66092: ST_TO_ADDR
// end ; end ;
66093: LD_VAR 0 4
66097: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66098: LD_INT 0
66100: PPUSH
66101: PPUSH
66102: PPUSH
66103: PPUSH
// if not unit or not area then
66104: LD_VAR 0 1
66108: NOT
66109: PUSH
66110: LD_VAR 0 2
66114: NOT
66115: OR
66116: IFFALSE 66120
// exit ;
66118: GO 66296
// tmp := AreaToList ( area , i ) ;
66120: LD_ADDR_VAR 0 6
66124: PUSH
66125: LD_VAR 0 2
66129: PPUSH
66130: LD_VAR 0 5
66134: PPUSH
66135: CALL_OW 517
66139: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66140: LD_ADDR_VAR 0 5
66144: PUSH
66145: DOUBLE
66146: LD_INT 1
66148: DEC
66149: ST_TO_ADDR
66150: LD_VAR 0 6
66154: PUSH
66155: LD_INT 1
66157: ARRAY
66158: PUSH
66159: FOR_TO
66160: IFFALSE 66294
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66162: LD_ADDR_VAR 0 7
66166: PUSH
66167: LD_VAR 0 6
66171: PUSH
66172: LD_INT 1
66174: ARRAY
66175: PUSH
66176: LD_VAR 0 5
66180: ARRAY
66181: PUSH
66182: LD_VAR 0 6
66186: PUSH
66187: LD_INT 2
66189: ARRAY
66190: PUSH
66191: LD_VAR 0 5
66195: ARRAY
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66201: LD_INT 92
66203: PUSH
66204: LD_VAR 0 7
66208: PUSH
66209: LD_INT 1
66211: ARRAY
66212: PUSH
66213: LD_VAR 0 7
66217: PUSH
66218: LD_INT 2
66220: ARRAY
66221: PUSH
66222: LD_INT 2
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: PPUSH
66231: CALL_OW 69
66235: PUSH
66236: LD_INT 0
66238: EQUAL
66239: IFFALSE 66292
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66241: LD_VAR 0 1
66245: PPUSH
66246: LD_VAR 0 7
66250: PUSH
66251: LD_INT 1
66253: ARRAY
66254: PPUSH
66255: LD_VAR 0 7
66259: PUSH
66260: LD_INT 2
66262: ARRAY
66263: PPUSH
66264: LD_VAR 0 3
66268: PPUSH
66269: CALL_OW 48
// result := IsPlaced ( unit ) ;
66273: LD_ADDR_VAR 0 4
66277: PUSH
66278: LD_VAR 0 1
66282: PPUSH
66283: CALL_OW 305
66287: ST_TO_ADDR
// exit ;
66288: POP
66289: POP
66290: GO 66296
// end ; end ;
66292: GO 66159
66294: POP
66295: POP
// end ;
66296: LD_VAR 0 4
66300: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66301: LD_INT 0
66303: PPUSH
66304: PPUSH
66305: PPUSH
// if not side or side > 8 then
66306: LD_VAR 0 1
66310: NOT
66311: PUSH
66312: LD_VAR 0 1
66316: PUSH
66317: LD_INT 8
66319: GREATER
66320: OR
66321: IFFALSE 66325
// exit ;
66323: GO 66512
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66325: LD_ADDR_VAR 0 4
66329: PUSH
66330: LD_INT 22
66332: PUSH
66333: LD_VAR 0 1
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 21
66344: PUSH
66345: LD_INT 3
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PPUSH
66356: CALL_OW 69
66360: ST_TO_ADDR
// if not tmp then
66361: LD_VAR 0 4
66365: NOT
66366: IFFALSE 66370
// exit ;
66368: GO 66512
// enable_addtolog := true ;
66370: LD_ADDR_OWVAR 81
66374: PUSH
66375: LD_INT 1
66377: ST_TO_ADDR
// AddToLog ( [ ) ;
66378: LD_STRING [
66380: PPUSH
66381: CALL_OW 561
// for i in tmp do
66385: LD_ADDR_VAR 0 3
66389: PUSH
66390: LD_VAR 0 4
66394: PUSH
66395: FOR_IN
66396: IFFALSE 66503
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66398: LD_STRING [
66400: PUSH
66401: LD_VAR 0 3
66405: PPUSH
66406: CALL_OW 266
66410: STR
66411: PUSH
66412: LD_STRING , 
66414: STR
66415: PUSH
66416: LD_VAR 0 3
66420: PPUSH
66421: CALL_OW 250
66425: STR
66426: PUSH
66427: LD_STRING , 
66429: STR
66430: PUSH
66431: LD_VAR 0 3
66435: PPUSH
66436: CALL_OW 251
66440: STR
66441: PUSH
66442: LD_STRING , 
66444: STR
66445: PUSH
66446: LD_VAR 0 3
66450: PPUSH
66451: CALL_OW 254
66455: STR
66456: PUSH
66457: LD_STRING , 
66459: STR
66460: PUSH
66461: LD_VAR 0 3
66465: PPUSH
66466: LD_INT 1
66468: PPUSH
66469: CALL_OW 268
66473: STR
66474: PUSH
66475: LD_STRING , 
66477: STR
66478: PUSH
66479: LD_VAR 0 3
66483: PPUSH
66484: LD_INT 2
66486: PPUSH
66487: CALL_OW 268
66491: STR
66492: PUSH
66493: LD_STRING ],
66495: STR
66496: PPUSH
66497: CALL_OW 561
// end ;
66501: GO 66395
66503: POP
66504: POP
// AddToLog ( ]; ) ;
66505: LD_STRING ];
66507: PPUSH
66508: CALL_OW 561
// end ;
66512: LD_VAR 0 2
66516: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66517: LD_INT 0
66519: PPUSH
66520: PPUSH
66521: PPUSH
66522: PPUSH
66523: PPUSH
// if not area or not rate or not max then
66524: LD_VAR 0 1
66528: NOT
66529: PUSH
66530: LD_VAR 0 2
66534: NOT
66535: OR
66536: PUSH
66537: LD_VAR 0 4
66541: NOT
66542: OR
66543: IFFALSE 66547
// exit ;
66545: GO 66736
// while 1 do
66547: LD_INT 1
66549: IFFALSE 66736
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66551: LD_ADDR_VAR 0 9
66555: PUSH
66556: LD_VAR 0 1
66560: PPUSH
66561: LD_INT 1
66563: PPUSH
66564: CALL_OW 287
66568: PUSH
66569: LD_INT 10
66571: MUL
66572: ST_TO_ADDR
// r := rate / 10 ;
66573: LD_ADDR_VAR 0 7
66577: PUSH
66578: LD_VAR 0 2
66582: PUSH
66583: LD_INT 10
66585: DIVREAL
66586: ST_TO_ADDR
// time := 1 1$00 ;
66587: LD_ADDR_VAR 0 8
66591: PUSH
66592: LD_INT 2100
66594: ST_TO_ADDR
// if amount < min then
66595: LD_VAR 0 9
66599: PUSH
66600: LD_VAR 0 3
66604: LESS
66605: IFFALSE 66623
// r := r * 2 else
66607: LD_ADDR_VAR 0 7
66611: PUSH
66612: LD_VAR 0 7
66616: PUSH
66617: LD_INT 2
66619: MUL
66620: ST_TO_ADDR
66621: GO 66649
// if amount > max then
66623: LD_VAR 0 9
66627: PUSH
66628: LD_VAR 0 4
66632: GREATER
66633: IFFALSE 66649
// r := r / 2 ;
66635: LD_ADDR_VAR 0 7
66639: PUSH
66640: LD_VAR 0 7
66644: PUSH
66645: LD_INT 2
66647: DIVREAL
66648: ST_TO_ADDR
// time := time / r ;
66649: LD_ADDR_VAR 0 8
66653: PUSH
66654: LD_VAR 0 8
66658: PUSH
66659: LD_VAR 0 7
66663: DIVREAL
66664: ST_TO_ADDR
// if time < 0 then
66665: LD_VAR 0 8
66669: PUSH
66670: LD_INT 0
66672: LESS
66673: IFFALSE 66690
// time := time * - 1 ;
66675: LD_ADDR_VAR 0 8
66679: PUSH
66680: LD_VAR 0 8
66684: PUSH
66685: LD_INT 1
66687: NEG
66688: MUL
66689: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66690: LD_VAR 0 8
66694: PUSH
66695: LD_INT 35
66697: PPUSH
66698: LD_INT 875
66700: PPUSH
66701: CALL_OW 12
66705: PLUS
66706: PPUSH
66707: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66711: LD_INT 1
66713: PPUSH
66714: LD_INT 5
66716: PPUSH
66717: CALL_OW 12
66721: PPUSH
66722: LD_VAR 0 1
66726: PPUSH
66727: LD_INT 1
66729: PPUSH
66730: CALL_OW 55
// end ;
66734: GO 66547
// end ;
66736: LD_VAR 0 5
66740: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66741: LD_INT 0
66743: PPUSH
66744: PPUSH
66745: PPUSH
66746: PPUSH
66747: PPUSH
66748: PPUSH
66749: PPUSH
66750: PPUSH
// if not turrets or not factories then
66751: LD_VAR 0 1
66755: NOT
66756: PUSH
66757: LD_VAR 0 2
66761: NOT
66762: OR
66763: IFFALSE 66767
// exit ;
66765: GO 67074
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66767: LD_ADDR_VAR 0 10
66771: PUSH
66772: LD_INT 5
66774: PUSH
66775: LD_INT 6
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 2
66784: PUSH
66785: LD_INT 4
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 3
66794: PUSH
66795: LD_INT 5
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 24
66809: PUSH
66810: LD_INT 25
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 23
66819: PUSH
66820: LD_INT 27
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 42
66833: PUSH
66834: LD_INT 43
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 44
66843: PUSH
66844: LD_INT 46
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 45
66853: PUSH
66854: LD_INT 47
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: LIST
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: LIST
66870: ST_TO_ADDR
// result := [ ] ;
66871: LD_ADDR_VAR 0 3
66875: PUSH
66876: EMPTY
66877: ST_TO_ADDR
// for i in turrets do
66878: LD_ADDR_VAR 0 4
66882: PUSH
66883: LD_VAR 0 1
66887: PUSH
66888: FOR_IN
66889: IFFALSE 67072
// begin nat := GetNation ( i ) ;
66891: LD_ADDR_VAR 0 7
66895: PUSH
66896: LD_VAR 0 4
66900: PPUSH
66901: CALL_OW 248
66905: ST_TO_ADDR
// weapon := 0 ;
66906: LD_ADDR_VAR 0 8
66910: PUSH
66911: LD_INT 0
66913: ST_TO_ADDR
// if not nat then
66914: LD_VAR 0 7
66918: NOT
66919: IFFALSE 66923
// continue ;
66921: GO 66888
// for j in list [ nat ] do
66923: LD_ADDR_VAR 0 5
66927: PUSH
66928: LD_VAR 0 10
66932: PUSH
66933: LD_VAR 0 7
66937: ARRAY
66938: PUSH
66939: FOR_IN
66940: IFFALSE 66981
// if GetBWeapon ( i ) = j [ 1 ] then
66942: LD_VAR 0 4
66946: PPUSH
66947: CALL_OW 269
66951: PUSH
66952: LD_VAR 0 5
66956: PUSH
66957: LD_INT 1
66959: ARRAY
66960: EQUAL
66961: IFFALSE 66979
// begin weapon := j [ 2 ] ;
66963: LD_ADDR_VAR 0 8
66967: PUSH
66968: LD_VAR 0 5
66972: PUSH
66973: LD_INT 2
66975: ARRAY
66976: ST_TO_ADDR
// break ;
66977: GO 66981
// end ;
66979: GO 66939
66981: POP
66982: POP
// if not weapon then
66983: LD_VAR 0 8
66987: NOT
66988: IFFALSE 66992
// continue ;
66990: GO 66888
// for k in factories do
66992: LD_ADDR_VAR 0 6
66996: PUSH
66997: LD_VAR 0 2
67001: PUSH
67002: FOR_IN
67003: IFFALSE 67068
// begin weapons := AvailableWeaponList ( k ) ;
67005: LD_ADDR_VAR 0 9
67009: PUSH
67010: LD_VAR 0 6
67014: PPUSH
67015: CALL_OW 478
67019: ST_TO_ADDR
// if not weapons then
67020: LD_VAR 0 9
67024: NOT
67025: IFFALSE 67029
// continue ;
67027: GO 67002
// if weapon in weapons then
67029: LD_VAR 0 8
67033: PUSH
67034: LD_VAR 0 9
67038: IN
67039: IFFALSE 67066
// begin result := [ i , weapon ] ;
67041: LD_ADDR_VAR 0 3
67045: PUSH
67046: LD_VAR 0 4
67050: PUSH
67051: LD_VAR 0 8
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: ST_TO_ADDR
// exit ;
67060: POP
67061: POP
67062: POP
67063: POP
67064: GO 67074
// end ; end ;
67066: GO 67002
67068: POP
67069: POP
// end ;
67070: GO 66888
67072: POP
67073: POP
// end ;
67074: LD_VAR 0 3
67078: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67079: LD_INT 0
67081: PPUSH
// if not side or side > 8 then
67082: LD_VAR 0 3
67086: NOT
67087: PUSH
67088: LD_VAR 0 3
67092: PUSH
67093: LD_INT 8
67095: GREATER
67096: OR
67097: IFFALSE 67101
// exit ;
67099: GO 67160
// if not range then
67101: LD_VAR 0 4
67105: NOT
67106: IFFALSE 67117
// range := - 12 ;
67108: LD_ADDR_VAR 0 4
67112: PUSH
67113: LD_INT 12
67115: NEG
67116: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67117: LD_VAR 0 1
67121: PPUSH
67122: LD_VAR 0 2
67126: PPUSH
67127: LD_VAR 0 3
67131: PPUSH
67132: LD_VAR 0 4
67136: PPUSH
67137: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67141: LD_VAR 0 1
67145: PPUSH
67146: LD_VAR 0 2
67150: PPUSH
67151: LD_VAR 0 3
67155: PPUSH
67156: CALL_OW 331
// end ;
67160: LD_VAR 0 5
67164: RET
// export function Video ( mode ) ; begin
67165: LD_INT 0
67167: PPUSH
// ingame_video = mode ;
67168: LD_ADDR_OWVAR 52
67172: PUSH
67173: LD_VAR 0 1
67177: ST_TO_ADDR
// interface_hidden = mode ;
67178: LD_ADDR_OWVAR 54
67182: PUSH
67183: LD_VAR 0 1
67187: ST_TO_ADDR
// end ;
67188: LD_VAR 0 2
67192: RET
// export function Join ( array , element ) ; begin
67193: LD_INT 0
67195: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67196: LD_ADDR_VAR 0 3
67200: PUSH
67201: LD_VAR 0 1
67205: PPUSH
67206: LD_VAR 0 1
67210: PUSH
67211: LD_INT 1
67213: PLUS
67214: PPUSH
67215: LD_VAR 0 2
67219: PPUSH
67220: CALL_OW 1
67224: ST_TO_ADDR
// end ;
67225: LD_VAR 0 3
67229: RET
// export function JoinUnion ( array , element ) ; begin
67230: LD_INT 0
67232: PPUSH
// result := array union element ;
67233: LD_ADDR_VAR 0 3
67237: PUSH
67238: LD_VAR 0 1
67242: PUSH
67243: LD_VAR 0 2
67247: UNION
67248: ST_TO_ADDR
// end ;
67249: LD_VAR 0 3
67253: RET
// export function GetBehemoths ( side ) ; begin
67254: LD_INT 0
67256: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67257: LD_ADDR_VAR 0 2
67261: PUSH
67262: LD_INT 22
67264: PUSH
67265: LD_VAR 0 1
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 31
67276: PUSH
67277: LD_INT 25
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PPUSH
67288: CALL_OW 69
67292: ST_TO_ADDR
// end ;
67293: LD_VAR 0 2
67297: RET
// export function Shuffle ( array ) ; var i , index ; begin
67298: LD_INT 0
67300: PPUSH
67301: PPUSH
67302: PPUSH
// result := [ ] ;
67303: LD_ADDR_VAR 0 2
67307: PUSH
67308: EMPTY
67309: ST_TO_ADDR
// if not array then
67310: LD_VAR 0 1
67314: NOT
67315: IFFALSE 67319
// exit ;
67317: GO 67418
// Randomize ;
67319: CALL_OW 10
// for i = array downto 1 do
67323: LD_ADDR_VAR 0 3
67327: PUSH
67328: DOUBLE
67329: LD_VAR 0 1
67333: INC
67334: ST_TO_ADDR
67335: LD_INT 1
67337: PUSH
67338: FOR_DOWNTO
67339: IFFALSE 67416
// begin index := rand ( 1 , array ) ;
67341: LD_ADDR_VAR 0 4
67345: PUSH
67346: LD_INT 1
67348: PPUSH
67349: LD_VAR 0 1
67353: PPUSH
67354: CALL_OW 12
67358: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67359: LD_ADDR_VAR 0 2
67363: PUSH
67364: LD_VAR 0 2
67368: PPUSH
67369: LD_VAR 0 2
67373: PUSH
67374: LD_INT 1
67376: PLUS
67377: PPUSH
67378: LD_VAR 0 1
67382: PUSH
67383: LD_VAR 0 4
67387: ARRAY
67388: PPUSH
67389: CALL_OW 2
67393: ST_TO_ADDR
// array := Delete ( array , index ) ;
67394: LD_ADDR_VAR 0 1
67398: PUSH
67399: LD_VAR 0 1
67403: PPUSH
67404: LD_VAR 0 4
67408: PPUSH
67409: CALL_OW 3
67413: ST_TO_ADDR
// end ;
67414: GO 67338
67416: POP
67417: POP
// end ;
67418: LD_VAR 0 2
67422: RET
// export function GetBaseMaterials ( base ) ; begin
67423: LD_INT 0
67425: PPUSH
// result := [ 0 , 0 , 0 ] ;
67426: LD_ADDR_VAR 0 2
67430: PUSH
67431: LD_INT 0
67433: PUSH
67434: LD_INT 0
67436: PUSH
67437: LD_INT 0
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: LIST
67444: ST_TO_ADDR
// if not base then
67445: LD_VAR 0 1
67449: NOT
67450: IFFALSE 67454
// exit ;
67452: GO 67503
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67454: LD_ADDR_VAR 0 2
67458: PUSH
67459: LD_VAR 0 1
67463: PPUSH
67464: LD_INT 1
67466: PPUSH
67467: CALL_OW 275
67471: PUSH
67472: LD_VAR 0 1
67476: PPUSH
67477: LD_INT 2
67479: PPUSH
67480: CALL_OW 275
67484: PUSH
67485: LD_VAR 0 1
67489: PPUSH
67490: LD_INT 3
67492: PPUSH
67493: CALL_OW 275
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: LIST
67502: ST_TO_ADDR
// end ;
67503: LD_VAR 0 2
67507: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67508: LD_INT 0
67510: PPUSH
67511: PPUSH
// result := array ;
67512: LD_ADDR_VAR 0 3
67516: PUSH
67517: LD_VAR 0 1
67521: ST_TO_ADDR
// if size >= result then
67522: LD_VAR 0 2
67526: PUSH
67527: LD_VAR 0 3
67531: GREATEREQUAL
67532: IFFALSE 67536
// exit ;
67534: GO 67586
// if size then
67536: LD_VAR 0 2
67540: IFFALSE 67586
// for i := array downto size do
67542: LD_ADDR_VAR 0 4
67546: PUSH
67547: DOUBLE
67548: LD_VAR 0 1
67552: INC
67553: ST_TO_ADDR
67554: LD_VAR 0 2
67558: PUSH
67559: FOR_DOWNTO
67560: IFFALSE 67584
// result := Delete ( result , result ) ;
67562: LD_ADDR_VAR 0 3
67566: PUSH
67567: LD_VAR 0 3
67571: PPUSH
67572: LD_VAR 0 3
67576: PPUSH
67577: CALL_OW 3
67581: ST_TO_ADDR
67582: GO 67559
67584: POP
67585: POP
// end ;
67586: LD_VAR 0 3
67590: RET
// export function ComExit ( unit ) ; var tmp ; begin
67591: LD_INT 0
67593: PPUSH
67594: PPUSH
// if not IsInUnit ( unit ) then
67595: LD_VAR 0 1
67599: PPUSH
67600: CALL_OW 310
67604: NOT
67605: IFFALSE 67609
// exit ;
67607: GO 67669
// tmp := IsInUnit ( unit ) ;
67609: LD_ADDR_VAR 0 3
67613: PUSH
67614: LD_VAR 0 1
67618: PPUSH
67619: CALL_OW 310
67623: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67624: LD_VAR 0 3
67628: PPUSH
67629: CALL_OW 247
67633: PUSH
67634: LD_INT 2
67636: EQUAL
67637: IFFALSE 67650
// ComExitVehicle ( unit ) else
67639: LD_VAR 0 1
67643: PPUSH
67644: CALL_OW 121
67648: GO 67659
// ComExitBuilding ( unit ) ;
67650: LD_VAR 0 1
67654: PPUSH
67655: CALL_OW 122
// result := tmp ;
67659: LD_ADDR_VAR 0 2
67663: PUSH
67664: LD_VAR 0 3
67668: ST_TO_ADDR
// end ;
67669: LD_VAR 0 2
67673: RET
// export function ComExitAll ( units ) ; var i ; begin
67674: LD_INT 0
67676: PPUSH
67677: PPUSH
// if not units then
67678: LD_VAR 0 1
67682: NOT
67683: IFFALSE 67687
// exit ;
67685: GO 67713
// for i in units do
67687: LD_ADDR_VAR 0 3
67691: PUSH
67692: LD_VAR 0 1
67696: PUSH
67697: FOR_IN
67698: IFFALSE 67711
// ComExit ( i ) ;
67700: LD_VAR 0 3
67704: PPUSH
67705: CALL 67591 0 1
67709: GO 67697
67711: POP
67712: POP
// end ;
67713: LD_VAR 0 2
67717: RET
// export function ResetHc ; begin
67718: LD_INT 0
67720: PPUSH
// InitHc ;
67721: CALL_OW 19
// hc_importance := 0 ;
67725: LD_ADDR_OWVAR 32
67729: PUSH
67730: LD_INT 0
67732: ST_TO_ADDR
// end ;
67733: LD_VAR 0 1
67737: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67738: LD_INT 0
67740: PPUSH
67741: PPUSH
67742: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67743: LD_ADDR_VAR 0 6
67747: PUSH
67748: LD_VAR 0 1
67752: PUSH
67753: LD_VAR 0 3
67757: PLUS
67758: PUSH
67759: LD_INT 2
67761: DIV
67762: ST_TO_ADDR
// if _x < 0 then
67763: LD_VAR 0 6
67767: PUSH
67768: LD_INT 0
67770: LESS
67771: IFFALSE 67788
// _x := _x * - 1 ;
67773: LD_ADDR_VAR 0 6
67777: PUSH
67778: LD_VAR 0 6
67782: PUSH
67783: LD_INT 1
67785: NEG
67786: MUL
67787: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67788: LD_ADDR_VAR 0 7
67792: PUSH
67793: LD_VAR 0 2
67797: PUSH
67798: LD_VAR 0 4
67802: PLUS
67803: PUSH
67804: LD_INT 2
67806: DIV
67807: ST_TO_ADDR
// if _y < 0 then
67808: LD_VAR 0 7
67812: PUSH
67813: LD_INT 0
67815: LESS
67816: IFFALSE 67833
// _y := _y * - 1 ;
67818: LD_ADDR_VAR 0 7
67822: PUSH
67823: LD_VAR 0 7
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: MUL
67832: ST_TO_ADDR
// result := [ _x , _y ] ;
67833: LD_ADDR_VAR 0 5
67837: PUSH
67838: LD_VAR 0 6
67842: PUSH
67843: LD_VAR 0 7
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: ST_TO_ADDR
// end ;
67852: LD_VAR 0 5
67856: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67857: LD_INT 0
67859: PPUSH
67860: PPUSH
67861: PPUSH
67862: PPUSH
// task := GetTaskList ( unit ) ;
67863: LD_ADDR_VAR 0 7
67867: PUSH
67868: LD_VAR 0 1
67872: PPUSH
67873: CALL_OW 437
67877: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67878: LD_VAR 0 7
67882: NOT
67883: PUSH
67884: LD_VAR 0 1
67888: PPUSH
67889: LD_VAR 0 2
67893: PPUSH
67894: CALL_OW 308
67898: NOT
67899: AND
67900: IFFALSE 67904
// exit ;
67902: GO 68022
// if IsInArea ( unit , area ) then
67904: LD_VAR 0 1
67908: PPUSH
67909: LD_VAR 0 2
67913: PPUSH
67914: CALL_OW 308
67918: IFFALSE 67936
// begin ComMoveToArea ( unit , goAway ) ;
67920: LD_VAR 0 1
67924: PPUSH
67925: LD_VAR 0 3
67929: PPUSH
67930: CALL_OW 113
// exit ;
67934: GO 68022
// end ; if task [ 1 ] [ 1 ] <> M then
67936: LD_VAR 0 7
67940: PUSH
67941: LD_INT 1
67943: ARRAY
67944: PUSH
67945: LD_INT 1
67947: ARRAY
67948: PUSH
67949: LD_STRING M
67951: NONEQUAL
67952: IFFALSE 67956
// exit ;
67954: GO 68022
// x := task [ 1 ] [ 2 ] ;
67956: LD_ADDR_VAR 0 5
67960: PUSH
67961: LD_VAR 0 7
67965: PUSH
67966: LD_INT 1
67968: ARRAY
67969: PUSH
67970: LD_INT 2
67972: ARRAY
67973: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67974: LD_ADDR_VAR 0 6
67978: PUSH
67979: LD_VAR 0 7
67983: PUSH
67984: LD_INT 1
67986: ARRAY
67987: PUSH
67988: LD_INT 3
67990: ARRAY
67991: ST_TO_ADDR
// if InArea ( x , y , area ) then
67992: LD_VAR 0 5
67996: PPUSH
67997: LD_VAR 0 6
68001: PPUSH
68002: LD_VAR 0 2
68006: PPUSH
68007: CALL_OW 309
68011: IFFALSE 68022
// ComStop ( unit ) ;
68013: LD_VAR 0 1
68017: PPUSH
68018: CALL_OW 141
// end ;
68022: LD_VAR 0 4
68026: RET
// export function Abs ( value ) ; begin
68027: LD_INT 0
68029: PPUSH
// result := value ;
68030: LD_ADDR_VAR 0 2
68034: PUSH
68035: LD_VAR 0 1
68039: ST_TO_ADDR
// if value < 0 then
68040: LD_VAR 0 1
68044: PUSH
68045: LD_INT 0
68047: LESS
68048: IFFALSE 68065
// result := value * - 1 ;
68050: LD_ADDR_VAR 0 2
68054: PUSH
68055: LD_VAR 0 1
68059: PUSH
68060: LD_INT 1
68062: NEG
68063: MUL
68064: ST_TO_ADDR
// end ;
68065: LD_VAR 0 2
68069: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68070: LD_INT 0
68072: PPUSH
68073: PPUSH
68074: PPUSH
68075: PPUSH
68076: PPUSH
68077: PPUSH
68078: PPUSH
68079: PPUSH
// if not unit or not building then
68080: LD_VAR 0 1
68084: NOT
68085: PUSH
68086: LD_VAR 0 2
68090: NOT
68091: OR
68092: IFFALSE 68096
// exit ;
68094: GO 68322
// x := GetX ( building ) ;
68096: LD_ADDR_VAR 0 4
68100: PUSH
68101: LD_VAR 0 2
68105: PPUSH
68106: CALL_OW 250
68110: ST_TO_ADDR
// y := GetY ( building ) ;
68111: LD_ADDR_VAR 0 6
68115: PUSH
68116: LD_VAR 0 2
68120: PPUSH
68121: CALL_OW 251
68125: ST_TO_ADDR
// d := GetDir ( building ) ;
68126: LD_ADDR_VAR 0 8
68130: PUSH
68131: LD_VAR 0 2
68135: PPUSH
68136: CALL_OW 254
68140: ST_TO_ADDR
// r := 4 ;
68141: LD_ADDR_VAR 0 9
68145: PUSH
68146: LD_INT 4
68148: ST_TO_ADDR
// for i := 1 to 5 do
68149: LD_ADDR_VAR 0 10
68153: PUSH
68154: DOUBLE
68155: LD_INT 1
68157: DEC
68158: ST_TO_ADDR
68159: LD_INT 5
68161: PUSH
68162: FOR_TO
68163: IFFALSE 68320
// begin _x := ShiftX ( x , d , r + i ) ;
68165: LD_ADDR_VAR 0 5
68169: PUSH
68170: LD_VAR 0 4
68174: PPUSH
68175: LD_VAR 0 8
68179: PPUSH
68180: LD_VAR 0 9
68184: PUSH
68185: LD_VAR 0 10
68189: PLUS
68190: PPUSH
68191: CALL_OW 272
68195: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68196: LD_ADDR_VAR 0 7
68200: PUSH
68201: LD_VAR 0 6
68205: PPUSH
68206: LD_VAR 0 8
68210: PPUSH
68211: LD_VAR 0 9
68215: PUSH
68216: LD_VAR 0 10
68220: PLUS
68221: PPUSH
68222: CALL_OW 273
68226: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68227: LD_VAR 0 5
68231: PPUSH
68232: LD_VAR 0 7
68236: PPUSH
68237: CALL_OW 488
68241: PUSH
68242: LD_VAR 0 5
68246: PPUSH
68247: LD_VAR 0 7
68251: PPUSH
68252: CALL_OW 428
68256: PPUSH
68257: CALL_OW 247
68261: PUSH
68262: LD_INT 3
68264: PUSH
68265: LD_INT 2
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: IN
68272: NOT
68273: AND
68274: IFFALSE 68318
// begin ComMoveXY ( unit , _x , _y ) ;
68276: LD_VAR 0 1
68280: PPUSH
68281: LD_VAR 0 5
68285: PPUSH
68286: LD_VAR 0 7
68290: PPUSH
68291: CALL_OW 111
// result := [ _x , _y ] ;
68295: LD_ADDR_VAR 0 3
68299: PUSH
68300: LD_VAR 0 5
68304: PUSH
68305: LD_VAR 0 7
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: ST_TO_ADDR
// exit ;
68314: POP
68315: POP
68316: GO 68322
// end ; end ;
68318: GO 68162
68320: POP
68321: POP
// end ;
68322: LD_VAR 0 3
68326: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68327: LD_INT 0
68329: PPUSH
68330: PPUSH
68331: PPUSH
// result := 0 ;
68332: LD_ADDR_VAR 0 3
68336: PUSH
68337: LD_INT 0
68339: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68340: LD_VAR 0 1
68344: PUSH
68345: LD_INT 0
68347: LESS
68348: PUSH
68349: LD_VAR 0 1
68353: PUSH
68354: LD_INT 8
68356: GREATER
68357: OR
68358: PUSH
68359: LD_VAR 0 2
68363: PUSH
68364: LD_INT 0
68366: LESS
68367: OR
68368: PUSH
68369: LD_VAR 0 2
68373: PUSH
68374: LD_INT 8
68376: GREATER
68377: OR
68378: IFFALSE 68382
// exit ;
68380: GO 68457
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68382: LD_ADDR_VAR 0 4
68386: PUSH
68387: LD_INT 22
68389: PUSH
68390: LD_VAR 0 2
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PPUSH
68399: CALL_OW 69
68403: PUSH
68404: FOR_IN
68405: IFFALSE 68455
// begin un := UnitShoot ( i ) ;
68407: LD_ADDR_VAR 0 5
68411: PUSH
68412: LD_VAR 0 4
68416: PPUSH
68417: CALL_OW 504
68421: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68422: LD_VAR 0 5
68426: PPUSH
68427: CALL_OW 255
68431: PUSH
68432: LD_VAR 0 1
68436: EQUAL
68437: IFFALSE 68453
// begin result := un ;
68439: LD_ADDR_VAR 0 3
68443: PUSH
68444: LD_VAR 0 5
68448: ST_TO_ADDR
// exit ;
68449: POP
68450: POP
68451: GO 68457
// end ; end ;
68453: GO 68404
68455: POP
68456: POP
// end ;
68457: LD_VAR 0 3
68461: RET
// export function GetCargoBay ( units ) ; begin
68462: LD_INT 0
68464: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68465: LD_ADDR_VAR 0 2
68469: PUSH
68470: LD_VAR 0 1
68474: PPUSH
68475: LD_INT 2
68477: PUSH
68478: LD_INT 34
68480: PUSH
68481: LD_INT 12
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 34
68490: PUSH
68491: LD_INT 51
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 34
68500: PUSH
68501: LD_INT 32
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 34
68510: PUSH
68511: LD_INT 89
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: PPUSH
68525: CALL_OW 72
68529: ST_TO_ADDR
// end ;
68530: LD_VAR 0 2
68534: RET
// export function Negate ( value ) ; begin
68535: LD_INT 0
68537: PPUSH
// result := not value ;
68538: LD_ADDR_VAR 0 2
68542: PUSH
68543: LD_VAR 0 1
68547: NOT
68548: ST_TO_ADDR
// end ;
68549: LD_VAR 0 2
68553: RET
// export function Inc ( value ) ; begin
68554: LD_INT 0
68556: PPUSH
// result := value + 1 ;
68557: LD_ADDR_VAR 0 2
68561: PUSH
68562: LD_VAR 0 1
68566: PUSH
68567: LD_INT 1
68569: PLUS
68570: ST_TO_ADDR
// end ;
68571: LD_VAR 0 2
68575: RET
// export function Dec ( value ) ; begin
68576: LD_INT 0
68578: PPUSH
// result := value - 1 ;
68579: LD_ADDR_VAR 0 2
68583: PUSH
68584: LD_VAR 0 1
68588: PUSH
68589: LD_INT 1
68591: MINUS
68592: ST_TO_ADDR
// end ;
68593: LD_VAR 0 2
68597: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68598: LD_INT 0
68600: PPUSH
68601: PPUSH
68602: PPUSH
68603: PPUSH
68604: PPUSH
68605: PPUSH
68606: PPUSH
68607: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68608: LD_VAR 0 1
68612: PPUSH
68613: LD_VAR 0 2
68617: PPUSH
68618: CALL_OW 488
68622: NOT
68623: PUSH
68624: LD_VAR 0 3
68628: PPUSH
68629: LD_VAR 0 4
68633: PPUSH
68634: CALL_OW 488
68638: NOT
68639: OR
68640: IFFALSE 68653
// begin result := - 1 ;
68642: LD_ADDR_VAR 0 5
68646: PUSH
68647: LD_INT 1
68649: NEG
68650: ST_TO_ADDR
// exit ;
68651: GO 68888
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68653: LD_ADDR_VAR 0 12
68657: PUSH
68658: LD_VAR 0 1
68662: PPUSH
68663: LD_VAR 0 2
68667: PPUSH
68668: LD_VAR 0 3
68672: PPUSH
68673: LD_VAR 0 4
68677: PPUSH
68678: CALL 67738 0 4
68682: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68683: LD_ADDR_VAR 0 11
68687: PUSH
68688: LD_VAR 0 1
68692: PPUSH
68693: LD_VAR 0 2
68697: PPUSH
68698: LD_VAR 0 12
68702: PUSH
68703: LD_INT 1
68705: ARRAY
68706: PPUSH
68707: LD_VAR 0 12
68711: PUSH
68712: LD_INT 2
68714: ARRAY
68715: PPUSH
68716: CALL_OW 298
68720: ST_TO_ADDR
// distance := 9999 ;
68721: LD_ADDR_VAR 0 10
68725: PUSH
68726: LD_INT 9999
68728: ST_TO_ADDR
// for i := 0 to 5 do
68729: LD_ADDR_VAR 0 6
68733: PUSH
68734: DOUBLE
68735: LD_INT 0
68737: DEC
68738: ST_TO_ADDR
68739: LD_INT 5
68741: PUSH
68742: FOR_TO
68743: IFFALSE 68886
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68745: LD_ADDR_VAR 0 7
68749: PUSH
68750: LD_VAR 0 1
68754: PPUSH
68755: LD_VAR 0 6
68759: PPUSH
68760: LD_VAR 0 11
68764: PPUSH
68765: CALL_OW 272
68769: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68770: LD_ADDR_VAR 0 8
68774: PUSH
68775: LD_VAR 0 2
68779: PPUSH
68780: LD_VAR 0 6
68784: PPUSH
68785: LD_VAR 0 11
68789: PPUSH
68790: CALL_OW 273
68794: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68795: LD_VAR 0 7
68799: PPUSH
68800: LD_VAR 0 8
68804: PPUSH
68805: CALL_OW 488
68809: NOT
68810: IFFALSE 68814
// continue ;
68812: GO 68742
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68814: LD_ADDR_VAR 0 9
68818: PUSH
68819: LD_VAR 0 12
68823: PUSH
68824: LD_INT 1
68826: ARRAY
68827: PPUSH
68828: LD_VAR 0 12
68832: PUSH
68833: LD_INT 2
68835: ARRAY
68836: PPUSH
68837: LD_VAR 0 7
68841: PPUSH
68842: LD_VAR 0 8
68846: PPUSH
68847: CALL_OW 298
68851: ST_TO_ADDR
// if tmp < distance then
68852: LD_VAR 0 9
68856: PUSH
68857: LD_VAR 0 10
68861: LESS
68862: IFFALSE 68884
// begin result := i ;
68864: LD_ADDR_VAR 0 5
68868: PUSH
68869: LD_VAR 0 6
68873: ST_TO_ADDR
// distance := tmp ;
68874: LD_ADDR_VAR 0 10
68878: PUSH
68879: LD_VAR 0 9
68883: ST_TO_ADDR
// end ; end ;
68884: GO 68742
68886: POP
68887: POP
// end ;
68888: LD_VAR 0 5
68892: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68893: LD_INT 0
68895: PPUSH
68896: PPUSH
// if not driver or not IsInUnit ( driver ) then
68897: LD_VAR 0 1
68901: NOT
68902: PUSH
68903: LD_VAR 0 1
68907: PPUSH
68908: CALL_OW 310
68912: NOT
68913: OR
68914: IFFALSE 68918
// exit ;
68916: GO 69008
// vehicle := IsInUnit ( driver ) ;
68918: LD_ADDR_VAR 0 3
68922: PUSH
68923: LD_VAR 0 1
68927: PPUSH
68928: CALL_OW 310
68932: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68933: LD_VAR 0 1
68937: PPUSH
68938: LD_STRING \
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: LD_INT 0
68949: PUSH
68950: LD_INT 0
68952: PUSH
68953: LD_INT 0
68955: PUSH
68956: LD_INT 0
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: PUSH
68968: LD_STRING E
68970: PUSH
68971: LD_INT 0
68973: PUSH
68974: LD_INT 0
68976: PUSH
68977: LD_VAR 0 3
68981: PUSH
68982: LD_INT 0
68984: PUSH
68985: LD_INT 0
68987: PUSH
68988: LD_INT 0
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PPUSH
69004: CALL_OW 446
// end ;
69008: LD_VAR 0 2
69012: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69013: LD_INT 0
69015: PPUSH
69016: PPUSH
// if not driver or not IsInUnit ( driver ) then
69017: LD_VAR 0 1
69021: NOT
69022: PUSH
69023: LD_VAR 0 1
69027: PPUSH
69028: CALL_OW 310
69032: NOT
69033: OR
69034: IFFALSE 69038
// exit ;
69036: GO 69128
// vehicle := IsInUnit ( driver ) ;
69038: LD_ADDR_VAR 0 3
69042: PUSH
69043: LD_VAR 0 1
69047: PPUSH
69048: CALL_OW 310
69052: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69053: LD_VAR 0 1
69057: PPUSH
69058: LD_STRING \
69060: PUSH
69061: LD_INT 0
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: LD_INT 0
69069: PUSH
69070: LD_INT 0
69072: PUSH
69073: LD_INT 0
69075: PUSH
69076: LD_INT 0
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: PUSH
69088: LD_STRING E
69090: PUSH
69091: LD_INT 0
69093: PUSH
69094: LD_INT 0
69096: PUSH
69097: LD_VAR 0 3
69101: PUSH
69102: LD_INT 0
69104: PUSH
69105: LD_INT 0
69107: PUSH
69108: LD_INT 0
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PPUSH
69124: CALL_OW 447
// end ;
69128: LD_VAR 0 2
69132: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69133: LD_INT 0
69135: PPUSH
69136: PPUSH
69137: PPUSH
// tmp := [ ] ;
69138: LD_ADDR_VAR 0 5
69142: PUSH
69143: EMPTY
69144: ST_TO_ADDR
// for i in units do
69145: LD_ADDR_VAR 0 4
69149: PUSH
69150: LD_VAR 0 1
69154: PUSH
69155: FOR_IN
69156: IFFALSE 69194
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69158: LD_ADDR_VAR 0 5
69162: PUSH
69163: LD_VAR 0 5
69167: PPUSH
69168: LD_VAR 0 5
69172: PUSH
69173: LD_INT 1
69175: PLUS
69176: PPUSH
69177: LD_VAR 0 4
69181: PPUSH
69182: CALL_OW 256
69186: PPUSH
69187: CALL_OW 2
69191: ST_TO_ADDR
69192: GO 69155
69194: POP
69195: POP
// if not tmp then
69196: LD_VAR 0 5
69200: NOT
69201: IFFALSE 69205
// exit ;
69203: GO 69253
// if asc then
69205: LD_VAR 0 2
69209: IFFALSE 69233
// result := SortListByListAsc ( units , tmp ) else
69211: LD_ADDR_VAR 0 3
69215: PUSH
69216: LD_VAR 0 1
69220: PPUSH
69221: LD_VAR 0 5
69225: PPUSH
69226: CALL_OW 76
69230: ST_TO_ADDR
69231: GO 69253
// result := SortListByListDesc ( units , tmp ) ;
69233: LD_ADDR_VAR 0 3
69237: PUSH
69238: LD_VAR 0 1
69242: PPUSH
69243: LD_VAR 0 5
69247: PPUSH
69248: CALL_OW 77
69252: ST_TO_ADDR
// end ;
69253: LD_VAR 0 3
69257: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69258: LD_INT 0
69260: PPUSH
69261: PPUSH
// task := GetTaskList ( mech ) ;
69262: LD_ADDR_VAR 0 4
69266: PUSH
69267: LD_VAR 0 1
69271: PPUSH
69272: CALL_OW 437
69276: ST_TO_ADDR
// if not task then
69277: LD_VAR 0 4
69281: NOT
69282: IFFALSE 69286
// exit ;
69284: GO 69328
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69286: LD_ADDR_VAR 0 3
69290: PUSH
69291: LD_VAR 0 4
69295: PUSH
69296: LD_INT 1
69298: ARRAY
69299: PUSH
69300: LD_INT 1
69302: ARRAY
69303: PUSH
69304: LD_STRING r
69306: EQUAL
69307: PUSH
69308: LD_VAR 0 4
69312: PUSH
69313: LD_INT 1
69315: ARRAY
69316: PUSH
69317: LD_INT 4
69319: ARRAY
69320: PUSH
69321: LD_VAR 0 2
69325: EQUAL
69326: AND
69327: ST_TO_ADDR
// end ;
69328: LD_VAR 0 3
69332: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69333: LD_INT 0
69335: PPUSH
// SetDir ( unit , d ) ;
69336: LD_VAR 0 1
69340: PPUSH
69341: LD_VAR 0 4
69345: PPUSH
69346: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
69350: LD_ADDR_VAR 0 6
69354: PUSH
69355: LD_VAR 0 1
69359: PPUSH
69360: LD_VAR 0 2
69364: PPUSH
69365: LD_VAR 0 3
69369: PPUSH
69370: LD_VAR 0 5
69374: PPUSH
69375: CALL_OW 48
69379: ST_TO_ADDR
// end ;
69380: LD_VAR 0 6
69384: RET
// export function ToNaturalNumber ( number ) ; begin
69385: LD_INT 0
69387: PPUSH
// result := number div 1 ;
69388: LD_ADDR_VAR 0 2
69392: PUSH
69393: LD_VAR 0 1
69397: PUSH
69398: LD_INT 1
69400: DIV
69401: ST_TO_ADDR
// if number < 0 then
69402: LD_VAR 0 1
69406: PUSH
69407: LD_INT 0
69409: LESS
69410: IFFALSE 69420
// result := 0 ;
69412: LD_ADDR_VAR 0 2
69416: PUSH
69417: LD_INT 0
69419: ST_TO_ADDR
// end ;
69420: LD_VAR 0 2
69424: RET
// export function SortByClass ( units , class ) ; var un ; begin
69425: LD_INT 0
69427: PPUSH
69428: PPUSH
// if not units or not class then
69429: LD_VAR 0 1
69433: NOT
69434: PUSH
69435: LD_VAR 0 2
69439: NOT
69440: OR
69441: IFFALSE 69445
// exit ;
69443: GO 69540
// result := [ ] ;
69445: LD_ADDR_VAR 0 3
69449: PUSH
69450: EMPTY
69451: ST_TO_ADDR
// for un in units do
69452: LD_ADDR_VAR 0 4
69456: PUSH
69457: LD_VAR 0 1
69461: PUSH
69462: FOR_IN
69463: IFFALSE 69538
// if GetClass ( un ) = class then
69465: LD_VAR 0 4
69469: PPUSH
69470: CALL_OW 257
69474: PUSH
69475: LD_VAR 0 2
69479: EQUAL
69480: IFFALSE 69507
// result := Insert ( result , 1 , un ) else
69482: LD_ADDR_VAR 0 3
69486: PUSH
69487: LD_VAR 0 3
69491: PPUSH
69492: LD_INT 1
69494: PPUSH
69495: LD_VAR 0 4
69499: PPUSH
69500: CALL_OW 2
69504: ST_TO_ADDR
69505: GO 69536
// result := Replace ( result , result + 1 , un ) ;
69507: LD_ADDR_VAR 0 3
69511: PUSH
69512: LD_VAR 0 3
69516: PPUSH
69517: LD_VAR 0 3
69521: PUSH
69522: LD_INT 1
69524: PLUS
69525: PPUSH
69526: LD_VAR 0 4
69530: PPUSH
69531: CALL_OW 1
69535: ST_TO_ADDR
69536: GO 69462
69538: POP
69539: POP
// end ;
69540: LD_VAR 0 3
69544: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69545: LD_INT 0
69547: PPUSH
69548: PPUSH
69549: PPUSH
69550: PPUSH
69551: PPUSH
69552: PPUSH
69553: PPUSH
// result := [ ] ;
69554: LD_ADDR_VAR 0 4
69558: PUSH
69559: EMPTY
69560: ST_TO_ADDR
// if x - r < 0 then
69561: LD_VAR 0 1
69565: PUSH
69566: LD_VAR 0 3
69570: MINUS
69571: PUSH
69572: LD_INT 0
69574: LESS
69575: IFFALSE 69587
// min_x := 0 else
69577: LD_ADDR_VAR 0 8
69581: PUSH
69582: LD_INT 0
69584: ST_TO_ADDR
69585: GO 69603
// min_x := x - r ;
69587: LD_ADDR_VAR 0 8
69591: PUSH
69592: LD_VAR 0 1
69596: PUSH
69597: LD_VAR 0 3
69601: MINUS
69602: ST_TO_ADDR
// if y - r < 0 then
69603: LD_VAR 0 2
69607: PUSH
69608: LD_VAR 0 3
69612: MINUS
69613: PUSH
69614: LD_INT 0
69616: LESS
69617: IFFALSE 69629
// min_y := 0 else
69619: LD_ADDR_VAR 0 7
69623: PUSH
69624: LD_INT 0
69626: ST_TO_ADDR
69627: GO 69645
// min_y := y - r ;
69629: LD_ADDR_VAR 0 7
69633: PUSH
69634: LD_VAR 0 2
69638: PUSH
69639: LD_VAR 0 3
69643: MINUS
69644: ST_TO_ADDR
// max_x := x + r ;
69645: LD_ADDR_VAR 0 9
69649: PUSH
69650: LD_VAR 0 1
69654: PUSH
69655: LD_VAR 0 3
69659: PLUS
69660: ST_TO_ADDR
// max_y := y + r ;
69661: LD_ADDR_VAR 0 10
69665: PUSH
69666: LD_VAR 0 2
69670: PUSH
69671: LD_VAR 0 3
69675: PLUS
69676: ST_TO_ADDR
// for _x = min_x to max_x do
69677: LD_ADDR_VAR 0 5
69681: PUSH
69682: DOUBLE
69683: LD_VAR 0 8
69687: DEC
69688: ST_TO_ADDR
69689: LD_VAR 0 9
69693: PUSH
69694: FOR_TO
69695: IFFALSE 69796
// for _y = min_y to max_y do
69697: LD_ADDR_VAR 0 6
69701: PUSH
69702: DOUBLE
69703: LD_VAR 0 7
69707: DEC
69708: ST_TO_ADDR
69709: LD_VAR 0 10
69713: PUSH
69714: FOR_TO
69715: IFFALSE 69792
// begin if not ValidHex ( _x , _y ) then
69717: LD_VAR 0 5
69721: PPUSH
69722: LD_VAR 0 6
69726: PPUSH
69727: CALL_OW 488
69731: NOT
69732: IFFALSE 69736
// continue ;
69734: GO 69714
// if GetResourceTypeXY ( _x , _y ) then
69736: LD_VAR 0 5
69740: PPUSH
69741: LD_VAR 0 6
69745: PPUSH
69746: CALL_OW 283
69750: IFFALSE 69790
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69752: LD_ADDR_VAR 0 4
69756: PUSH
69757: LD_VAR 0 4
69761: PPUSH
69762: LD_VAR 0 4
69766: PUSH
69767: LD_INT 1
69769: PLUS
69770: PPUSH
69771: LD_VAR 0 5
69775: PUSH
69776: LD_VAR 0 6
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PPUSH
69785: CALL_OW 1
69789: ST_TO_ADDR
// end ;
69790: GO 69714
69792: POP
69793: POP
69794: GO 69694
69796: POP
69797: POP
// end ;
69798: LD_VAR 0 4
69802: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69803: LD_INT 0
69805: PPUSH
69806: PPUSH
69807: PPUSH
69808: PPUSH
69809: PPUSH
69810: PPUSH
69811: PPUSH
69812: PPUSH
// if not units then
69813: LD_VAR 0 1
69817: NOT
69818: IFFALSE 69822
// exit ;
69820: GO 70350
// result := UnitFilter ( units , [ f_ok ] ) ;
69822: LD_ADDR_VAR 0 3
69826: PUSH
69827: LD_VAR 0 1
69831: PPUSH
69832: LD_INT 50
69834: PUSH
69835: EMPTY
69836: LIST
69837: PPUSH
69838: CALL_OW 72
69842: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69843: LD_ADDR_VAR 0 8
69847: PUSH
69848: LD_VAR 0 1
69852: PUSH
69853: LD_INT 1
69855: ARRAY
69856: PPUSH
69857: CALL_OW 255
69861: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69862: LD_ADDR_VAR 0 10
69866: PUSH
69867: LD_INT 29
69869: PUSH
69870: LD_INT 91
69872: PUSH
69873: LD_INT 49
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: LIST
69880: ST_TO_ADDR
// if not result then
69881: LD_VAR 0 3
69885: NOT
69886: IFFALSE 69890
// exit ;
69888: GO 70350
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69890: LD_ADDR_VAR 0 5
69894: PUSH
69895: LD_INT 81
69897: PUSH
69898: LD_VAR 0 8
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PPUSH
69907: CALL_OW 69
69911: ST_TO_ADDR
// for i in result do
69912: LD_ADDR_VAR 0 4
69916: PUSH
69917: LD_VAR 0 3
69921: PUSH
69922: FOR_IN
69923: IFFALSE 70348
// begin tag := GetTag ( i ) + 1 ;
69925: LD_ADDR_VAR 0 9
69929: PUSH
69930: LD_VAR 0 4
69934: PPUSH
69935: CALL_OW 110
69939: PUSH
69940: LD_INT 1
69942: PLUS
69943: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69944: LD_ADDR_VAR 0 7
69948: PUSH
69949: LD_VAR 0 4
69953: PPUSH
69954: CALL_OW 250
69958: PPUSH
69959: LD_VAR 0 4
69963: PPUSH
69964: CALL_OW 251
69968: PPUSH
69969: LD_INT 4
69971: PPUSH
69972: CALL 69545 0 3
69976: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69977: LD_VAR 0 4
69981: PPUSH
69982: CALL_OW 247
69986: PUSH
69987: LD_INT 2
69989: EQUAL
69990: PUSH
69991: LD_VAR 0 7
69995: PUSH
69996: LD_INT 2
69998: GREATER
69999: AND
70000: PUSH
70001: LD_VAR 0 4
70005: PPUSH
70006: CALL_OW 264
70010: PUSH
70011: LD_VAR 0 10
70015: IN
70016: NOT
70017: AND
70018: IFFALSE 70057
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70020: LD_VAR 0 4
70024: PPUSH
70025: LD_VAR 0 7
70029: PUSH
70030: LD_INT 1
70032: ARRAY
70033: PUSH
70034: LD_INT 1
70036: ARRAY
70037: PPUSH
70038: LD_VAR 0 7
70042: PUSH
70043: LD_INT 1
70045: ARRAY
70046: PUSH
70047: LD_INT 2
70049: ARRAY
70050: PPUSH
70051: CALL_OW 116
70055: GO 70346
// if path > tag then
70057: LD_VAR 0 2
70061: PUSH
70062: LD_VAR 0 9
70066: GREATER
70067: IFFALSE 70275
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70069: LD_ADDR_VAR 0 6
70073: PUSH
70074: LD_VAR 0 5
70078: PPUSH
70079: LD_INT 91
70081: PUSH
70082: LD_VAR 0 4
70086: PUSH
70087: LD_INT 8
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: LIST
70094: PPUSH
70095: CALL_OW 72
70099: ST_TO_ADDR
// if nearEnemy then
70100: LD_VAR 0 6
70104: IFFALSE 70173
// begin if GetWeapon ( i ) = ru_time_lapser then
70106: LD_VAR 0 4
70110: PPUSH
70111: CALL_OW 264
70115: PUSH
70116: LD_INT 49
70118: EQUAL
70119: IFFALSE 70147
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70121: LD_VAR 0 4
70125: PPUSH
70126: LD_VAR 0 6
70130: PPUSH
70131: LD_VAR 0 4
70135: PPUSH
70136: CALL_OW 74
70140: PPUSH
70141: CALL_OW 112
70145: GO 70171
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70147: LD_VAR 0 4
70151: PPUSH
70152: LD_VAR 0 6
70156: PPUSH
70157: LD_VAR 0 4
70161: PPUSH
70162: CALL_OW 74
70166: PPUSH
70167: CALL 71421 0 2
// end else
70171: GO 70273
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70173: LD_VAR 0 4
70177: PPUSH
70178: LD_VAR 0 2
70182: PUSH
70183: LD_VAR 0 9
70187: ARRAY
70188: PUSH
70189: LD_INT 1
70191: ARRAY
70192: PPUSH
70193: LD_VAR 0 2
70197: PUSH
70198: LD_VAR 0 9
70202: ARRAY
70203: PUSH
70204: LD_INT 2
70206: ARRAY
70207: PPUSH
70208: CALL_OW 297
70212: PUSH
70213: LD_INT 6
70215: GREATER
70216: IFFALSE 70259
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70218: LD_VAR 0 4
70222: PPUSH
70223: LD_VAR 0 2
70227: PUSH
70228: LD_VAR 0 9
70232: ARRAY
70233: PUSH
70234: LD_INT 1
70236: ARRAY
70237: PPUSH
70238: LD_VAR 0 2
70242: PUSH
70243: LD_VAR 0 9
70247: ARRAY
70248: PUSH
70249: LD_INT 2
70251: ARRAY
70252: PPUSH
70253: CALL_OW 114
70257: GO 70273
// SetTag ( i , tag ) ;
70259: LD_VAR 0 4
70263: PPUSH
70264: LD_VAR 0 9
70268: PPUSH
70269: CALL_OW 109
// end else
70273: GO 70346
// if enemy then
70275: LD_VAR 0 5
70279: IFFALSE 70346
// begin if GetWeapon ( i ) = ru_time_lapser then
70281: LD_VAR 0 4
70285: PPUSH
70286: CALL_OW 264
70290: PUSH
70291: LD_INT 49
70293: EQUAL
70294: IFFALSE 70322
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70296: LD_VAR 0 4
70300: PPUSH
70301: LD_VAR 0 5
70305: PPUSH
70306: LD_VAR 0 4
70310: PPUSH
70311: CALL_OW 74
70315: PPUSH
70316: CALL_OW 112
70320: GO 70346
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70322: LD_VAR 0 4
70326: PPUSH
70327: LD_VAR 0 5
70331: PPUSH
70332: LD_VAR 0 4
70336: PPUSH
70337: CALL_OW 74
70341: PPUSH
70342: CALL 71421 0 2
// end ; end ;
70346: GO 69922
70348: POP
70349: POP
// end ;
70350: LD_VAR 0 3
70354: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70355: LD_INT 0
70357: PPUSH
70358: PPUSH
70359: PPUSH
// if not unit or IsInUnit ( unit ) then
70360: LD_VAR 0 1
70364: NOT
70365: PUSH
70366: LD_VAR 0 1
70370: PPUSH
70371: CALL_OW 310
70375: OR
70376: IFFALSE 70380
// exit ;
70378: GO 70471
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70380: LD_ADDR_VAR 0 4
70384: PUSH
70385: LD_VAR 0 1
70389: PPUSH
70390: CALL_OW 250
70394: PPUSH
70395: LD_VAR 0 2
70399: PPUSH
70400: LD_INT 1
70402: PPUSH
70403: CALL_OW 272
70407: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70408: LD_ADDR_VAR 0 5
70412: PUSH
70413: LD_VAR 0 1
70417: PPUSH
70418: CALL_OW 251
70422: PPUSH
70423: LD_VAR 0 2
70427: PPUSH
70428: LD_INT 1
70430: PPUSH
70431: CALL_OW 273
70435: ST_TO_ADDR
// if ValidHex ( x , y ) then
70436: LD_VAR 0 4
70440: PPUSH
70441: LD_VAR 0 5
70445: PPUSH
70446: CALL_OW 488
70450: IFFALSE 70471
// ComTurnXY ( unit , x , y ) ;
70452: LD_VAR 0 1
70456: PPUSH
70457: LD_VAR 0 4
70461: PPUSH
70462: LD_VAR 0 5
70466: PPUSH
70467: CALL_OW 118
// end ;
70471: LD_VAR 0 3
70475: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70476: LD_INT 0
70478: PPUSH
70479: PPUSH
// result := false ;
70480: LD_ADDR_VAR 0 3
70484: PUSH
70485: LD_INT 0
70487: ST_TO_ADDR
// if not units then
70488: LD_VAR 0 2
70492: NOT
70493: IFFALSE 70497
// exit ;
70495: GO 70542
// for i in units do
70497: LD_ADDR_VAR 0 4
70501: PUSH
70502: LD_VAR 0 2
70506: PUSH
70507: FOR_IN
70508: IFFALSE 70540
// if See ( side , i ) then
70510: LD_VAR 0 1
70514: PPUSH
70515: LD_VAR 0 4
70519: PPUSH
70520: CALL_OW 292
70524: IFFALSE 70538
// begin result := true ;
70526: LD_ADDR_VAR 0 3
70530: PUSH
70531: LD_INT 1
70533: ST_TO_ADDR
// exit ;
70534: POP
70535: POP
70536: GO 70542
// end ;
70538: GO 70507
70540: POP
70541: POP
// end ;
70542: LD_VAR 0 3
70546: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70547: LD_INT 0
70549: PPUSH
70550: PPUSH
70551: PPUSH
70552: PPUSH
// if not unit or not points then
70553: LD_VAR 0 1
70557: NOT
70558: PUSH
70559: LD_VAR 0 2
70563: NOT
70564: OR
70565: IFFALSE 70569
// exit ;
70567: GO 70659
// dist := 99999 ;
70569: LD_ADDR_VAR 0 5
70573: PUSH
70574: LD_INT 99999
70576: ST_TO_ADDR
// for i in points do
70577: LD_ADDR_VAR 0 4
70581: PUSH
70582: LD_VAR 0 2
70586: PUSH
70587: FOR_IN
70588: IFFALSE 70657
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70590: LD_ADDR_VAR 0 6
70594: PUSH
70595: LD_VAR 0 1
70599: PPUSH
70600: LD_VAR 0 4
70604: PUSH
70605: LD_INT 1
70607: ARRAY
70608: PPUSH
70609: LD_VAR 0 4
70613: PUSH
70614: LD_INT 2
70616: ARRAY
70617: PPUSH
70618: CALL_OW 297
70622: ST_TO_ADDR
// if tmpDist < dist then
70623: LD_VAR 0 6
70627: PUSH
70628: LD_VAR 0 5
70632: LESS
70633: IFFALSE 70655
// begin result := i ;
70635: LD_ADDR_VAR 0 3
70639: PUSH
70640: LD_VAR 0 4
70644: ST_TO_ADDR
// dist := tmpDist ;
70645: LD_ADDR_VAR 0 5
70649: PUSH
70650: LD_VAR 0 6
70654: ST_TO_ADDR
// end ; end ;
70655: GO 70587
70657: POP
70658: POP
// end ;
70659: LD_VAR 0 3
70663: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70664: LD_INT 0
70666: PPUSH
// uc_side := side ;
70667: LD_ADDR_OWVAR 20
70671: PUSH
70672: LD_VAR 0 1
70676: ST_TO_ADDR
// uc_nation := 3 ;
70677: LD_ADDR_OWVAR 21
70681: PUSH
70682: LD_INT 3
70684: ST_TO_ADDR
// vc_chassis := 25 ;
70685: LD_ADDR_OWVAR 37
70689: PUSH
70690: LD_INT 25
70692: ST_TO_ADDR
// vc_engine := engine_siberite ;
70693: LD_ADDR_OWVAR 39
70697: PUSH
70698: LD_INT 3
70700: ST_TO_ADDR
// vc_control := control_computer ;
70701: LD_ADDR_OWVAR 38
70705: PUSH
70706: LD_INT 3
70708: ST_TO_ADDR
// vc_weapon := 59 ;
70709: LD_ADDR_OWVAR 40
70713: PUSH
70714: LD_INT 59
70716: ST_TO_ADDR
// result := CreateVehicle ;
70717: LD_ADDR_VAR 0 5
70721: PUSH
70722: CALL_OW 45
70726: ST_TO_ADDR
// SetDir ( result , d ) ;
70727: LD_VAR 0 5
70731: PPUSH
70732: LD_VAR 0 4
70736: PPUSH
70737: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70741: LD_VAR 0 5
70745: PPUSH
70746: LD_VAR 0 2
70750: PPUSH
70751: LD_VAR 0 3
70755: PPUSH
70756: LD_INT 0
70758: PPUSH
70759: CALL_OW 48
// end ;
70763: LD_VAR 0 5
70767: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70768: LD_INT 0
70770: PPUSH
70771: PPUSH
70772: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70773: LD_ADDR_VAR 0 2
70777: PUSH
70778: LD_INT 0
70780: PUSH
70781: LD_INT 0
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: LD_INT 0
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70796: LD_VAR 0 1
70800: NOT
70801: PUSH
70802: LD_VAR 0 1
70806: PPUSH
70807: CALL_OW 264
70811: PUSH
70812: LD_INT 12
70814: PUSH
70815: LD_INT 51
70817: PUSH
70818: LD_INT 32
70820: PUSH
70821: LD_INT 89
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: IN
70830: NOT
70831: OR
70832: IFFALSE 70836
// exit ;
70834: GO 70934
// for i := 1 to 3 do
70836: LD_ADDR_VAR 0 3
70840: PUSH
70841: DOUBLE
70842: LD_INT 1
70844: DEC
70845: ST_TO_ADDR
70846: LD_INT 3
70848: PUSH
70849: FOR_TO
70850: IFFALSE 70932
// begin tmp := GetCargo ( cargo , i ) ;
70852: LD_ADDR_VAR 0 4
70856: PUSH
70857: LD_VAR 0 1
70861: PPUSH
70862: LD_VAR 0 3
70866: PPUSH
70867: CALL_OW 289
70871: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70872: LD_ADDR_VAR 0 2
70876: PUSH
70877: LD_VAR 0 2
70881: PPUSH
70882: LD_VAR 0 3
70886: PPUSH
70887: LD_VAR 0 4
70891: PPUSH
70892: CALL_OW 1
70896: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70897: LD_ADDR_VAR 0 2
70901: PUSH
70902: LD_VAR 0 2
70906: PPUSH
70907: LD_INT 4
70909: PPUSH
70910: LD_VAR 0 2
70914: PUSH
70915: LD_INT 4
70917: ARRAY
70918: PUSH
70919: LD_VAR 0 4
70923: PLUS
70924: PPUSH
70925: CALL_OW 1
70929: ST_TO_ADDR
// end ;
70930: GO 70849
70932: POP
70933: POP
// end ;
70934: LD_VAR 0 2
70938: RET
// export function Length ( array ) ; begin
70939: LD_INT 0
70941: PPUSH
// result := array + 0 ;
70942: LD_ADDR_VAR 0 2
70946: PUSH
70947: LD_VAR 0 1
70951: PUSH
70952: LD_INT 0
70954: PLUS
70955: ST_TO_ADDR
// end ;
70956: LD_VAR 0 2
70960: RET
// export function PrepareArray ( array ) ; begin
70961: LD_INT 0
70963: PPUSH
// result := array diff 0 ;
70964: LD_ADDR_VAR 0 2
70968: PUSH
70969: LD_VAR 0 1
70973: PUSH
70974: LD_INT 0
70976: DIFF
70977: ST_TO_ADDR
// if not result [ 1 ] then
70978: LD_VAR 0 2
70982: PUSH
70983: LD_INT 1
70985: ARRAY
70986: NOT
70987: IFFALSE 71007
// result := Delete ( result , 1 ) ;
70989: LD_ADDR_VAR 0 2
70993: PUSH
70994: LD_VAR 0 2
70998: PPUSH
70999: LD_INT 1
71001: PPUSH
71002: CALL_OW 3
71006: ST_TO_ADDR
// end ;
71007: LD_VAR 0 2
71011: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71012: LD_INT 0
71014: PPUSH
71015: PPUSH
71016: PPUSH
71017: PPUSH
// sibRocketRange := 25 ;
71018: LD_ADDR_VAR 0 6
71022: PUSH
71023: LD_INT 25
71025: ST_TO_ADDR
// result := false ;
71026: LD_ADDR_VAR 0 4
71030: PUSH
71031: LD_INT 0
71033: ST_TO_ADDR
// for i := 0 to 5 do
71034: LD_ADDR_VAR 0 5
71038: PUSH
71039: DOUBLE
71040: LD_INT 0
71042: DEC
71043: ST_TO_ADDR
71044: LD_INT 5
71046: PUSH
71047: FOR_TO
71048: IFFALSE 71115
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71050: LD_VAR 0 1
71054: PPUSH
71055: LD_VAR 0 5
71059: PPUSH
71060: LD_VAR 0 6
71064: PPUSH
71065: CALL_OW 272
71069: PPUSH
71070: LD_VAR 0 2
71074: PPUSH
71075: LD_VAR 0 5
71079: PPUSH
71080: LD_VAR 0 6
71084: PPUSH
71085: CALL_OW 273
71089: PPUSH
71090: LD_VAR 0 3
71094: PPUSH
71095: CALL_OW 309
71099: IFFALSE 71113
// begin result := true ;
71101: LD_ADDR_VAR 0 4
71105: PUSH
71106: LD_INT 1
71108: ST_TO_ADDR
// exit ;
71109: POP
71110: POP
71111: GO 71117
// end ;
71113: GO 71047
71115: POP
71116: POP
// end ;
71117: LD_VAR 0 4
71121: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71122: LD_INT 0
71124: PPUSH
71125: PPUSH
71126: PPUSH
// if btype = b_depot then
71127: LD_VAR 0 2
71131: PUSH
71132: LD_INT 0
71134: EQUAL
71135: IFFALSE 71147
// begin result := true ;
71137: LD_ADDR_VAR 0 3
71141: PUSH
71142: LD_INT 1
71144: ST_TO_ADDR
// exit ;
71145: GO 71263
// end ; pom := GetBase ( depot ) ;
71147: LD_ADDR_VAR 0 4
71151: PUSH
71152: LD_VAR 0 1
71156: PPUSH
71157: CALL_OW 274
71161: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71162: LD_ADDR_VAR 0 5
71166: PUSH
71167: LD_VAR 0 2
71171: PPUSH
71172: LD_VAR 0 1
71176: PPUSH
71177: CALL_OW 248
71181: PPUSH
71182: CALL_OW 450
71186: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71187: LD_ADDR_VAR 0 3
71191: PUSH
71192: LD_VAR 0 4
71196: PPUSH
71197: LD_INT 1
71199: PPUSH
71200: CALL_OW 275
71204: PUSH
71205: LD_VAR 0 5
71209: PUSH
71210: LD_INT 1
71212: ARRAY
71213: GREATEREQUAL
71214: PUSH
71215: LD_VAR 0 4
71219: PPUSH
71220: LD_INT 2
71222: PPUSH
71223: CALL_OW 275
71227: PUSH
71228: LD_VAR 0 5
71232: PUSH
71233: LD_INT 2
71235: ARRAY
71236: GREATEREQUAL
71237: AND
71238: PUSH
71239: LD_VAR 0 4
71243: PPUSH
71244: LD_INT 3
71246: PPUSH
71247: CALL_OW 275
71251: PUSH
71252: LD_VAR 0 5
71256: PUSH
71257: LD_INT 3
71259: ARRAY
71260: GREATEREQUAL
71261: AND
71262: ST_TO_ADDR
// end ;
71263: LD_VAR 0 3
71267: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71268: LD_INT 0
71270: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71271: LD_VAR 0 1
71275: PPUSH
71276: LD_VAR 0 2
71280: PPUSH
71281: LD_INT 0
71283: PPUSH
71284: LD_INT 0
71286: PPUSH
71287: LD_INT 1
71289: PPUSH
71290: LD_INT 0
71292: PPUSH
71293: CALL_OW 587
// end ;
71297: LD_VAR 0 3
71301: RET
// export function CenterOnNow ( unit ) ; begin
71302: LD_INT 0
71304: PPUSH
// result := IsInUnit ( unit ) ;
71305: LD_ADDR_VAR 0 2
71309: PUSH
71310: LD_VAR 0 1
71314: PPUSH
71315: CALL_OW 310
71319: ST_TO_ADDR
// if not result then
71320: LD_VAR 0 2
71324: NOT
71325: IFFALSE 71337
// result := unit ;
71327: LD_ADDR_VAR 0 2
71331: PUSH
71332: LD_VAR 0 1
71336: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71337: LD_VAR 0 1
71341: PPUSH
71342: CALL_OW 87
// end ;
71346: LD_VAR 0 2
71350: RET
// export function ComMoveHex ( unit , hex ) ; begin
71351: LD_INT 0
71353: PPUSH
// if not hex then
71354: LD_VAR 0 2
71358: NOT
71359: IFFALSE 71363
// exit ;
71361: GO 71416
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71363: LD_VAR 0 2
71367: PUSH
71368: LD_INT 1
71370: ARRAY
71371: PPUSH
71372: LD_VAR 0 2
71376: PUSH
71377: LD_INT 2
71379: ARRAY
71380: PPUSH
71381: CALL_OW 428
71385: IFFALSE 71389
// exit ;
71387: GO 71416
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71389: LD_VAR 0 1
71393: PPUSH
71394: LD_VAR 0 2
71398: PUSH
71399: LD_INT 1
71401: ARRAY
71402: PPUSH
71403: LD_VAR 0 2
71407: PUSH
71408: LD_INT 2
71410: ARRAY
71411: PPUSH
71412: CALL_OW 111
// end ;
71416: LD_VAR 0 3
71420: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71421: LD_INT 0
71423: PPUSH
71424: PPUSH
71425: PPUSH
// if not unit or not enemy then
71426: LD_VAR 0 1
71430: NOT
71431: PUSH
71432: LD_VAR 0 2
71436: NOT
71437: OR
71438: IFFALSE 71442
// exit ;
71440: GO 71566
// x := GetX ( enemy ) ;
71442: LD_ADDR_VAR 0 4
71446: PUSH
71447: LD_VAR 0 2
71451: PPUSH
71452: CALL_OW 250
71456: ST_TO_ADDR
// y := GetY ( enemy ) ;
71457: LD_ADDR_VAR 0 5
71461: PUSH
71462: LD_VAR 0 2
71466: PPUSH
71467: CALL_OW 251
71471: ST_TO_ADDR
// if ValidHex ( x , y ) then
71472: LD_VAR 0 4
71476: PPUSH
71477: LD_VAR 0 5
71481: PPUSH
71482: CALL_OW 488
71486: IFFALSE 71566
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71488: LD_VAR 0 2
71492: PPUSH
71493: CALL_OW 247
71497: PUSH
71498: LD_INT 3
71500: PUSH
71501: LD_INT 2
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: IN
71508: PUSH
71509: LD_VAR 0 1
71513: PPUSH
71514: CALL_OW 255
71518: PPUSH
71519: LD_VAR 0 2
71523: PPUSH
71524: CALL_OW 292
71528: OR
71529: IFFALSE 71547
// ComAttackUnit ( unit , enemy ) else
71531: LD_VAR 0 1
71535: PPUSH
71536: LD_VAR 0 2
71540: PPUSH
71541: CALL_OW 115
71545: GO 71566
// ComAgressiveMove ( unit , x , y ) ;
71547: LD_VAR 0 1
71551: PPUSH
71552: LD_VAR 0 4
71556: PPUSH
71557: LD_VAR 0 5
71561: PPUSH
71562: CALL_OW 114
// end ;
71566: LD_VAR 0 3
71570: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71571: LD_INT 0
71573: PPUSH
71574: PPUSH
71575: PPUSH
// list := AreaToList ( area , 0 ) ;
71576: LD_ADDR_VAR 0 5
71580: PUSH
71581: LD_VAR 0 1
71585: PPUSH
71586: LD_INT 0
71588: PPUSH
71589: CALL_OW 517
71593: ST_TO_ADDR
// if not list then
71594: LD_VAR 0 5
71598: NOT
71599: IFFALSE 71603
// exit ;
71601: GO 71733
// if all then
71603: LD_VAR 0 2
71607: IFFALSE 71695
// begin for i := 1 to list [ 1 ] do
71609: LD_ADDR_VAR 0 4
71613: PUSH
71614: DOUBLE
71615: LD_INT 1
71617: DEC
71618: ST_TO_ADDR
71619: LD_VAR 0 5
71623: PUSH
71624: LD_INT 1
71626: ARRAY
71627: PUSH
71628: FOR_TO
71629: IFFALSE 71691
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71631: LD_ADDR_VAR 0 3
71635: PUSH
71636: LD_VAR 0 3
71640: PPUSH
71641: LD_VAR 0 3
71645: PUSH
71646: LD_INT 1
71648: PLUS
71649: PPUSH
71650: LD_VAR 0 5
71654: PUSH
71655: LD_INT 1
71657: ARRAY
71658: PUSH
71659: LD_VAR 0 4
71663: ARRAY
71664: PUSH
71665: LD_VAR 0 5
71669: PUSH
71670: LD_INT 2
71672: ARRAY
71673: PUSH
71674: LD_VAR 0 4
71678: ARRAY
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PPUSH
71684: CALL_OW 1
71688: ST_TO_ADDR
71689: GO 71628
71691: POP
71692: POP
// exit ;
71693: GO 71733
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71695: LD_ADDR_VAR 0 3
71699: PUSH
71700: LD_VAR 0 5
71704: PUSH
71705: LD_INT 1
71707: ARRAY
71708: PUSH
71709: LD_INT 1
71711: ARRAY
71712: PUSH
71713: LD_VAR 0 5
71717: PUSH
71718: LD_INT 2
71720: ARRAY
71721: PUSH
71722: LD_INT 1
71724: ARRAY
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: EMPTY
71731: LIST
71732: ST_TO_ADDR
// end ;
71733: LD_VAR 0 3
71737: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71738: LD_INT 0
71740: PPUSH
71741: PPUSH
// list := AreaToList ( area , 0 ) ;
71742: LD_ADDR_VAR 0 4
71746: PUSH
71747: LD_VAR 0 1
71751: PPUSH
71752: LD_INT 0
71754: PPUSH
71755: CALL_OW 517
71759: ST_TO_ADDR
// if not list then
71760: LD_VAR 0 4
71764: NOT
71765: IFFALSE 71769
// exit ;
71767: GO 71810
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71769: LD_ADDR_VAR 0 3
71773: PUSH
71774: LD_VAR 0 4
71778: PUSH
71779: LD_INT 1
71781: ARRAY
71782: PUSH
71783: LD_INT 1
71785: ARRAY
71786: PUSH
71787: LD_VAR 0 4
71791: PUSH
71792: LD_INT 2
71794: ARRAY
71795: PUSH
71796: LD_INT 1
71798: ARRAY
71799: PUSH
71800: LD_VAR 0 2
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: LIST
71809: ST_TO_ADDR
// end ;
71810: LD_VAR 0 3
71814: RET
// export function First ( array ) ; begin
71815: LD_INT 0
71817: PPUSH
// if not array then
71818: LD_VAR 0 1
71822: NOT
71823: IFFALSE 71827
// exit ;
71825: GO 71841
// result := array [ 1 ] ;
71827: LD_ADDR_VAR 0 2
71831: PUSH
71832: LD_VAR 0 1
71836: PUSH
71837: LD_INT 1
71839: ARRAY
71840: ST_TO_ADDR
// end ;
71841: LD_VAR 0 2
71845: RET
// export function Last ( array ) ; begin
71846: LD_INT 0
71848: PPUSH
// if not array then
71849: LD_VAR 0 1
71853: NOT
71854: IFFALSE 71858
// exit ;
71856: GO 71874
// result := array [ array ] ;
71858: LD_ADDR_VAR 0 2
71862: PUSH
71863: LD_VAR 0 1
71867: PUSH
71868: LD_VAR 0 1
71872: ARRAY
71873: ST_TO_ADDR
// end ;
71874: LD_VAR 0 2
71878: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71879: LD_INT 0
71881: PPUSH
71882: PPUSH
// result := [ ] ;
71883: LD_ADDR_VAR 0 5
71887: PUSH
71888: EMPTY
71889: ST_TO_ADDR
// if not array then
71890: LD_VAR 0 1
71894: NOT
71895: IFFALSE 71899
// exit ;
71897: GO 72011
// for i := 1 to array do
71899: LD_ADDR_VAR 0 6
71903: PUSH
71904: DOUBLE
71905: LD_INT 1
71907: DEC
71908: ST_TO_ADDR
71909: LD_VAR 0 1
71913: PUSH
71914: FOR_TO
71915: IFFALSE 72009
// if array [ i ] [ index ] = value then
71917: LD_VAR 0 1
71921: PUSH
71922: LD_VAR 0 6
71926: ARRAY
71927: PUSH
71928: LD_VAR 0 2
71932: ARRAY
71933: PUSH
71934: LD_VAR 0 3
71938: EQUAL
71939: IFFALSE 72007
// begin if indexColumn then
71941: LD_VAR 0 4
71945: IFFALSE 71981
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71947: LD_ADDR_VAR 0 5
71951: PUSH
71952: LD_VAR 0 5
71956: PPUSH
71957: LD_VAR 0 1
71961: PUSH
71962: LD_VAR 0 6
71966: ARRAY
71967: PUSH
71968: LD_VAR 0 4
71972: ARRAY
71973: PPUSH
71974: CALL 67193 0 2
71978: ST_TO_ADDR
71979: GO 72007
// result := Join ( result , array [ i ] ) ;
71981: LD_ADDR_VAR 0 5
71985: PUSH
71986: LD_VAR 0 5
71990: PPUSH
71991: LD_VAR 0 1
71995: PUSH
71996: LD_VAR 0 6
72000: ARRAY
72001: PPUSH
72002: CALL 67193 0 2
72006: ST_TO_ADDR
// end ;
72007: GO 71914
72009: POP
72010: POP
// end ;
72011: LD_VAR 0 5
72015: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72016: LD_INT 0
72018: PPUSH
// if not vehicles or not parkingPoint then
72019: LD_VAR 0 1
72023: NOT
72024: PUSH
72025: LD_VAR 0 2
72029: NOT
72030: OR
72031: IFFALSE 72035
// exit ;
72033: GO 72133
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72035: LD_ADDR_VAR 0 1
72039: PUSH
72040: LD_VAR 0 1
72044: PPUSH
72045: LD_INT 50
72047: PUSH
72048: EMPTY
72049: LIST
72050: PUSH
72051: LD_INT 3
72053: PUSH
72054: LD_INT 92
72056: PUSH
72057: LD_VAR 0 2
72061: PUSH
72062: LD_INT 1
72064: ARRAY
72065: PUSH
72066: LD_VAR 0 2
72070: PUSH
72071: LD_INT 2
72073: ARRAY
72074: PUSH
72075: LD_INT 8
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PPUSH
72092: CALL_OW 72
72096: ST_TO_ADDR
// if not vehicles then
72097: LD_VAR 0 1
72101: NOT
72102: IFFALSE 72106
// exit ;
72104: GO 72133
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72106: LD_VAR 0 1
72110: PPUSH
72111: LD_VAR 0 2
72115: PUSH
72116: LD_INT 1
72118: ARRAY
72119: PPUSH
72120: LD_VAR 0 2
72124: PUSH
72125: LD_INT 2
72127: ARRAY
72128: PPUSH
72129: CALL_OW 111
// end ;
72133: LD_VAR 0 3
72137: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72138: LD_INT 0
72140: PPUSH
72141: PPUSH
72142: PPUSH
// if not side or not area then
72143: LD_VAR 0 1
72147: NOT
72148: PUSH
72149: LD_VAR 0 2
72153: NOT
72154: OR
72155: IFFALSE 72159
// exit ;
72157: GO 72278
// tmp := AreaToList ( area , 0 ) ;
72159: LD_ADDR_VAR 0 5
72163: PUSH
72164: LD_VAR 0 2
72168: PPUSH
72169: LD_INT 0
72171: PPUSH
72172: CALL_OW 517
72176: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72177: LD_ADDR_VAR 0 4
72181: PUSH
72182: DOUBLE
72183: LD_INT 1
72185: DEC
72186: ST_TO_ADDR
72187: LD_VAR 0 5
72191: PUSH
72192: LD_INT 1
72194: ARRAY
72195: PUSH
72196: FOR_TO
72197: IFFALSE 72276
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72199: LD_VAR 0 5
72203: PUSH
72204: LD_INT 1
72206: ARRAY
72207: PUSH
72208: LD_VAR 0 4
72212: ARRAY
72213: PPUSH
72214: LD_VAR 0 5
72218: PUSH
72219: LD_INT 2
72221: ARRAY
72222: PUSH
72223: LD_VAR 0 4
72227: ARRAY
72228: PPUSH
72229: CALL_OW 351
72233: IFFALSE 72274
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72235: LD_VAR 0 5
72239: PUSH
72240: LD_INT 1
72242: ARRAY
72243: PUSH
72244: LD_VAR 0 4
72248: ARRAY
72249: PPUSH
72250: LD_VAR 0 5
72254: PUSH
72255: LD_INT 2
72257: ARRAY
72258: PUSH
72259: LD_VAR 0 4
72263: ARRAY
72264: PPUSH
72265: LD_VAR 0 1
72269: PPUSH
72270: CALL_OW 244
// end ;
72274: GO 72196
72276: POP
72277: POP
// end ; end_of_file end_of_file
72278: LD_VAR 0 3
72282: RET
// export globalGameSaveCounter ; every 0 0$1 do
72283: GO 72285
72285: DISABLE
// begin enable ;
72286: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
72287: LD_STRING updateTimer(
72289: PUSH
72290: LD_OWVAR 1
72294: STR
72295: PUSH
72296: LD_STRING );
72298: STR
72299: PPUSH
72300: CALL_OW 559
// end ;
72304: END
// every 0 0$1 do
72305: GO 72307
72307: DISABLE
// begin globalGameSaveCounter := 0 ;
72308: LD_ADDR_EXP 63
72312: PUSH
72313: LD_INT 0
72315: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
72316: LD_STRING setGameSaveCounter(0)
72318: PPUSH
72319: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
72323: LD_STRING initStreamRollete();
72325: PPUSH
72326: CALL_OW 559
// InitStreamMode ;
72330: CALL 73673 0 0
// DefineStreamItems ( false ) ;
72334: LD_INT 0
72336: PPUSH
72337: CALL 74137 0 1
// end ;
72341: END
// export function SOS_MapStart ( ) ; begin
72342: LD_INT 0
72344: PPUSH
// if streamModeActive then
72345: LD_EXP 64
72349: IFFALSE 72358
// DefineStreamItems ( true ) ;
72351: LD_INT 1
72353: PPUSH
72354: CALL 74137 0 1
// UpdateLuaVariables ( ) ;
72358: CALL 72375 0 0
// UpdateFactoryWaypoints ( ) ;
72362: CALL 87139 0 0
// UpdateWarehouseGatheringPoints ( ) ;
72366: CALL 87391 0 0
// end ;
72370: LD_VAR 0 1
72374: RET
// function UpdateLuaVariables ( ) ; begin
72375: LD_INT 0
72377: PPUSH
// if globalGameSaveCounter then
72378: LD_EXP 63
72382: IFFALSE 72416
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
72384: LD_ADDR_EXP 63
72388: PUSH
72389: LD_EXP 63
72393: PPUSH
72394: CALL 68554 0 1
72398: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72399: LD_STRING setGameSaveCounter(
72401: PUSH
72402: LD_EXP 63
72406: STR
72407: PUSH
72408: LD_STRING )
72410: STR
72411: PPUSH
72412: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
72416: LD_STRING setGameDifficulty(
72418: PUSH
72419: LD_OWVAR 67
72423: STR
72424: PUSH
72425: LD_STRING )
72427: STR
72428: PPUSH
72429: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
72433: LD_STRING displayDifficulty(
72435: PUSH
72436: LD_OWVAR 67
72440: STR
72441: PUSH
72442: LD_STRING )
72444: STR
72445: PPUSH
72446: CALL_OW 559
// end ;
72450: LD_VAR 0 1
72454: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72455: LD_INT 0
72457: PPUSH
// if p2 = stream_mode then
72458: LD_VAR 0 2
72462: PUSH
72463: LD_INT 100
72465: EQUAL
72466: IFFALSE 73469
// begin if not StreamModeActive then
72468: LD_EXP 64
72472: NOT
72473: IFFALSE 72483
// StreamModeActive := true ;
72475: LD_ADDR_EXP 64
72479: PUSH
72480: LD_INT 1
72482: ST_TO_ADDR
// if p3 = 0 then
72483: LD_VAR 0 3
72487: PUSH
72488: LD_INT 0
72490: EQUAL
72491: IFFALSE 72497
// InitStreamMode ;
72493: CALL 73673 0 0
// if p3 = 1 then
72497: LD_VAR 0 3
72501: PUSH
72502: LD_INT 1
72504: EQUAL
72505: IFFALSE 72515
// sRocket := true ;
72507: LD_ADDR_EXP 69
72511: PUSH
72512: LD_INT 1
72514: ST_TO_ADDR
// if p3 = 2 then
72515: LD_VAR 0 3
72519: PUSH
72520: LD_INT 2
72522: EQUAL
72523: IFFALSE 72533
// sSpeed := true ;
72525: LD_ADDR_EXP 68
72529: PUSH
72530: LD_INT 1
72532: ST_TO_ADDR
// if p3 = 3 then
72533: LD_VAR 0 3
72537: PUSH
72538: LD_INT 3
72540: EQUAL
72541: IFFALSE 72551
// sEngine := true ;
72543: LD_ADDR_EXP 70
72547: PUSH
72548: LD_INT 1
72550: ST_TO_ADDR
// if p3 = 4 then
72551: LD_VAR 0 3
72555: PUSH
72556: LD_INT 4
72558: EQUAL
72559: IFFALSE 72569
// sSpec := true ;
72561: LD_ADDR_EXP 67
72565: PUSH
72566: LD_INT 1
72568: ST_TO_ADDR
// if p3 = 5 then
72569: LD_VAR 0 3
72573: PUSH
72574: LD_INT 5
72576: EQUAL
72577: IFFALSE 72587
// sLevel := true ;
72579: LD_ADDR_EXP 71
72583: PUSH
72584: LD_INT 1
72586: ST_TO_ADDR
// if p3 = 6 then
72587: LD_VAR 0 3
72591: PUSH
72592: LD_INT 6
72594: EQUAL
72595: IFFALSE 72605
// sArmoury := true ;
72597: LD_ADDR_EXP 72
72601: PUSH
72602: LD_INT 1
72604: ST_TO_ADDR
// if p3 = 7 then
72605: LD_VAR 0 3
72609: PUSH
72610: LD_INT 7
72612: EQUAL
72613: IFFALSE 72623
// sRadar := true ;
72615: LD_ADDR_EXP 73
72619: PUSH
72620: LD_INT 1
72622: ST_TO_ADDR
// if p3 = 8 then
72623: LD_VAR 0 3
72627: PUSH
72628: LD_INT 8
72630: EQUAL
72631: IFFALSE 72641
// sBunker := true ;
72633: LD_ADDR_EXP 74
72637: PUSH
72638: LD_INT 1
72640: ST_TO_ADDR
// if p3 = 9 then
72641: LD_VAR 0 3
72645: PUSH
72646: LD_INT 9
72648: EQUAL
72649: IFFALSE 72659
// sHack := true ;
72651: LD_ADDR_EXP 75
72655: PUSH
72656: LD_INT 1
72658: ST_TO_ADDR
// if p3 = 10 then
72659: LD_VAR 0 3
72663: PUSH
72664: LD_INT 10
72666: EQUAL
72667: IFFALSE 72677
// sFire := true ;
72669: LD_ADDR_EXP 76
72673: PUSH
72674: LD_INT 1
72676: ST_TO_ADDR
// if p3 = 11 then
72677: LD_VAR 0 3
72681: PUSH
72682: LD_INT 11
72684: EQUAL
72685: IFFALSE 72695
// sRefresh := true ;
72687: LD_ADDR_EXP 77
72691: PUSH
72692: LD_INT 1
72694: ST_TO_ADDR
// if p3 = 12 then
72695: LD_VAR 0 3
72699: PUSH
72700: LD_INT 12
72702: EQUAL
72703: IFFALSE 72713
// sExp := true ;
72705: LD_ADDR_EXP 78
72709: PUSH
72710: LD_INT 1
72712: ST_TO_ADDR
// if p3 = 13 then
72713: LD_VAR 0 3
72717: PUSH
72718: LD_INT 13
72720: EQUAL
72721: IFFALSE 72731
// sDepot := true ;
72723: LD_ADDR_EXP 79
72727: PUSH
72728: LD_INT 1
72730: ST_TO_ADDR
// if p3 = 14 then
72731: LD_VAR 0 3
72735: PUSH
72736: LD_INT 14
72738: EQUAL
72739: IFFALSE 72749
// sFlag := true ;
72741: LD_ADDR_EXP 80
72745: PUSH
72746: LD_INT 1
72748: ST_TO_ADDR
// if p3 = 15 then
72749: LD_VAR 0 3
72753: PUSH
72754: LD_INT 15
72756: EQUAL
72757: IFFALSE 72767
// sKamikadze := true ;
72759: LD_ADDR_EXP 88
72763: PUSH
72764: LD_INT 1
72766: ST_TO_ADDR
// if p3 = 16 then
72767: LD_VAR 0 3
72771: PUSH
72772: LD_INT 16
72774: EQUAL
72775: IFFALSE 72785
// sTroll := true ;
72777: LD_ADDR_EXP 89
72781: PUSH
72782: LD_INT 1
72784: ST_TO_ADDR
// if p3 = 17 then
72785: LD_VAR 0 3
72789: PUSH
72790: LD_INT 17
72792: EQUAL
72793: IFFALSE 72803
// sSlow := true ;
72795: LD_ADDR_EXP 90
72799: PUSH
72800: LD_INT 1
72802: ST_TO_ADDR
// if p3 = 18 then
72803: LD_VAR 0 3
72807: PUSH
72808: LD_INT 18
72810: EQUAL
72811: IFFALSE 72821
// sLack := true ;
72813: LD_ADDR_EXP 91
72817: PUSH
72818: LD_INT 1
72820: ST_TO_ADDR
// if p3 = 19 then
72821: LD_VAR 0 3
72825: PUSH
72826: LD_INT 19
72828: EQUAL
72829: IFFALSE 72839
// sTank := true ;
72831: LD_ADDR_EXP 93
72835: PUSH
72836: LD_INT 1
72838: ST_TO_ADDR
// if p3 = 20 then
72839: LD_VAR 0 3
72843: PUSH
72844: LD_INT 20
72846: EQUAL
72847: IFFALSE 72857
// sRemote := true ;
72849: LD_ADDR_EXP 94
72853: PUSH
72854: LD_INT 1
72856: ST_TO_ADDR
// if p3 = 21 then
72857: LD_VAR 0 3
72861: PUSH
72862: LD_INT 21
72864: EQUAL
72865: IFFALSE 72875
// sPowell := true ;
72867: LD_ADDR_EXP 95
72871: PUSH
72872: LD_INT 1
72874: ST_TO_ADDR
// if p3 = 22 then
72875: LD_VAR 0 3
72879: PUSH
72880: LD_INT 22
72882: EQUAL
72883: IFFALSE 72893
// sTeleport := true ;
72885: LD_ADDR_EXP 98
72889: PUSH
72890: LD_INT 1
72892: ST_TO_ADDR
// if p3 = 23 then
72893: LD_VAR 0 3
72897: PUSH
72898: LD_INT 23
72900: EQUAL
72901: IFFALSE 72911
// sOilTower := true ;
72903: LD_ADDR_EXP 100
72907: PUSH
72908: LD_INT 1
72910: ST_TO_ADDR
// if p3 = 24 then
72911: LD_VAR 0 3
72915: PUSH
72916: LD_INT 24
72918: EQUAL
72919: IFFALSE 72929
// sShovel := true ;
72921: LD_ADDR_EXP 101
72925: PUSH
72926: LD_INT 1
72928: ST_TO_ADDR
// if p3 = 25 then
72929: LD_VAR 0 3
72933: PUSH
72934: LD_INT 25
72936: EQUAL
72937: IFFALSE 72947
// sSheik := true ;
72939: LD_ADDR_EXP 102
72943: PUSH
72944: LD_INT 1
72946: ST_TO_ADDR
// if p3 = 26 then
72947: LD_VAR 0 3
72951: PUSH
72952: LD_INT 26
72954: EQUAL
72955: IFFALSE 72965
// sEarthquake := true ;
72957: LD_ADDR_EXP 104
72961: PUSH
72962: LD_INT 1
72964: ST_TO_ADDR
// if p3 = 27 then
72965: LD_VAR 0 3
72969: PUSH
72970: LD_INT 27
72972: EQUAL
72973: IFFALSE 72983
// sAI := true ;
72975: LD_ADDR_EXP 105
72979: PUSH
72980: LD_INT 1
72982: ST_TO_ADDR
// if p3 = 28 then
72983: LD_VAR 0 3
72987: PUSH
72988: LD_INT 28
72990: EQUAL
72991: IFFALSE 73001
// sCargo := true ;
72993: LD_ADDR_EXP 108
72997: PUSH
72998: LD_INT 1
73000: ST_TO_ADDR
// if p3 = 29 then
73001: LD_VAR 0 3
73005: PUSH
73006: LD_INT 29
73008: EQUAL
73009: IFFALSE 73019
// sDLaser := true ;
73011: LD_ADDR_EXP 109
73015: PUSH
73016: LD_INT 1
73018: ST_TO_ADDR
// if p3 = 30 then
73019: LD_VAR 0 3
73023: PUSH
73024: LD_INT 30
73026: EQUAL
73027: IFFALSE 73037
// sExchange := true ;
73029: LD_ADDR_EXP 110
73033: PUSH
73034: LD_INT 1
73036: ST_TO_ADDR
// if p3 = 31 then
73037: LD_VAR 0 3
73041: PUSH
73042: LD_INT 31
73044: EQUAL
73045: IFFALSE 73055
// sFac := true ;
73047: LD_ADDR_EXP 111
73051: PUSH
73052: LD_INT 1
73054: ST_TO_ADDR
// if p3 = 32 then
73055: LD_VAR 0 3
73059: PUSH
73060: LD_INT 32
73062: EQUAL
73063: IFFALSE 73073
// sPower := true ;
73065: LD_ADDR_EXP 112
73069: PUSH
73070: LD_INT 1
73072: ST_TO_ADDR
// if p3 = 33 then
73073: LD_VAR 0 3
73077: PUSH
73078: LD_INT 33
73080: EQUAL
73081: IFFALSE 73091
// sRandom := true ;
73083: LD_ADDR_EXP 113
73087: PUSH
73088: LD_INT 1
73090: ST_TO_ADDR
// if p3 = 34 then
73091: LD_VAR 0 3
73095: PUSH
73096: LD_INT 34
73098: EQUAL
73099: IFFALSE 73109
// sShield := true ;
73101: LD_ADDR_EXP 114
73105: PUSH
73106: LD_INT 1
73108: ST_TO_ADDR
// if p3 = 35 then
73109: LD_VAR 0 3
73113: PUSH
73114: LD_INT 35
73116: EQUAL
73117: IFFALSE 73127
// sTime := true ;
73119: LD_ADDR_EXP 115
73123: PUSH
73124: LD_INT 1
73126: ST_TO_ADDR
// if p3 = 36 then
73127: LD_VAR 0 3
73131: PUSH
73132: LD_INT 36
73134: EQUAL
73135: IFFALSE 73145
// sTools := true ;
73137: LD_ADDR_EXP 116
73141: PUSH
73142: LD_INT 1
73144: ST_TO_ADDR
// if p3 = 101 then
73145: LD_VAR 0 3
73149: PUSH
73150: LD_INT 101
73152: EQUAL
73153: IFFALSE 73163
// sSold := true ;
73155: LD_ADDR_EXP 81
73159: PUSH
73160: LD_INT 1
73162: ST_TO_ADDR
// if p3 = 102 then
73163: LD_VAR 0 3
73167: PUSH
73168: LD_INT 102
73170: EQUAL
73171: IFFALSE 73181
// sDiff := true ;
73173: LD_ADDR_EXP 82
73177: PUSH
73178: LD_INT 1
73180: ST_TO_ADDR
// if p3 = 103 then
73181: LD_VAR 0 3
73185: PUSH
73186: LD_INT 103
73188: EQUAL
73189: IFFALSE 73199
// sFog := true ;
73191: LD_ADDR_EXP 85
73195: PUSH
73196: LD_INT 1
73198: ST_TO_ADDR
// if p3 = 104 then
73199: LD_VAR 0 3
73203: PUSH
73204: LD_INT 104
73206: EQUAL
73207: IFFALSE 73217
// sReset := true ;
73209: LD_ADDR_EXP 86
73213: PUSH
73214: LD_INT 1
73216: ST_TO_ADDR
// if p3 = 105 then
73217: LD_VAR 0 3
73221: PUSH
73222: LD_INT 105
73224: EQUAL
73225: IFFALSE 73235
// sSun := true ;
73227: LD_ADDR_EXP 87
73231: PUSH
73232: LD_INT 1
73234: ST_TO_ADDR
// if p3 = 106 then
73235: LD_VAR 0 3
73239: PUSH
73240: LD_INT 106
73242: EQUAL
73243: IFFALSE 73253
// sTiger := true ;
73245: LD_ADDR_EXP 83
73249: PUSH
73250: LD_INT 1
73252: ST_TO_ADDR
// if p3 = 107 then
73253: LD_VAR 0 3
73257: PUSH
73258: LD_INT 107
73260: EQUAL
73261: IFFALSE 73271
// sBomb := true ;
73263: LD_ADDR_EXP 84
73267: PUSH
73268: LD_INT 1
73270: ST_TO_ADDR
// if p3 = 108 then
73271: LD_VAR 0 3
73275: PUSH
73276: LD_INT 108
73278: EQUAL
73279: IFFALSE 73289
// sWound := true ;
73281: LD_ADDR_EXP 92
73285: PUSH
73286: LD_INT 1
73288: ST_TO_ADDR
// if p3 = 109 then
73289: LD_VAR 0 3
73293: PUSH
73294: LD_INT 109
73296: EQUAL
73297: IFFALSE 73307
// sBetray := true ;
73299: LD_ADDR_EXP 96
73303: PUSH
73304: LD_INT 1
73306: ST_TO_ADDR
// if p3 = 110 then
73307: LD_VAR 0 3
73311: PUSH
73312: LD_INT 110
73314: EQUAL
73315: IFFALSE 73325
// sContamin := true ;
73317: LD_ADDR_EXP 97
73321: PUSH
73322: LD_INT 1
73324: ST_TO_ADDR
// if p3 = 111 then
73325: LD_VAR 0 3
73329: PUSH
73330: LD_INT 111
73332: EQUAL
73333: IFFALSE 73343
// sOil := true ;
73335: LD_ADDR_EXP 99
73339: PUSH
73340: LD_INT 1
73342: ST_TO_ADDR
// if p3 = 112 then
73343: LD_VAR 0 3
73347: PUSH
73348: LD_INT 112
73350: EQUAL
73351: IFFALSE 73361
// sStu := true ;
73353: LD_ADDR_EXP 103
73357: PUSH
73358: LD_INT 1
73360: ST_TO_ADDR
// if p3 = 113 then
73361: LD_VAR 0 3
73365: PUSH
73366: LD_INT 113
73368: EQUAL
73369: IFFALSE 73379
// sBazooka := true ;
73371: LD_ADDR_EXP 106
73375: PUSH
73376: LD_INT 1
73378: ST_TO_ADDR
// if p3 = 114 then
73379: LD_VAR 0 3
73383: PUSH
73384: LD_INT 114
73386: EQUAL
73387: IFFALSE 73397
// sMortar := true ;
73389: LD_ADDR_EXP 107
73393: PUSH
73394: LD_INT 1
73396: ST_TO_ADDR
// if p3 = 115 then
73397: LD_VAR 0 3
73401: PUSH
73402: LD_INT 115
73404: EQUAL
73405: IFFALSE 73415
// sRanger := true ;
73407: LD_ADDR_EXP 117
73411: PUSH
73412: LD_INT 1
73414: ST_TO_ADDR
// if p3 = 116 then
73415: LD_VAR 0 3
73419: PUSH
73420: LD_INT 116
73422: EQUAL
73423: IFFALSE 73433
// sComputer := true ;
73425: LD_ADDR_EXP 118
73429: PUSH
73430: LD_INT 1
73432: ST_TO_ADDR
// if p3 = 117 then
73433: LD_VAR 0 3
73437: PUSH
73438: LD_INT 117
73440: EQUAL
73441: IFFALSE 73451
// s30 := true ;
73443: LD_ADDR_EXP 119
73447: PUSH
73448: LD_INT 1
73450: ST_TO_ADDR
// if p3 = 118 then
73451: LD_VAR 0 3
73455: PUSH
73456: LD_INT 118
73458: EQUAL
73459: IFFALSE 73469
// s60 := true ;
73461: LD_ADDR_EXP 120
73465: PUSH
73466: LD_INT 1
73468: ST_TO_ADDR
// end ; if p2 = hack_mode then
73469: LD_VAR 0 2
73473: PUSH
73474: LD_INT 101
73476: EQUAL
73477: IFFALSE 73605
// begin case p3 of 1 :
73479: LD_VAR 0 3
73483: PUSH
73484: LD_INT 1
73486: DOUBLE
73487: EQUAL
73488: IFTRUE 73492
73490: GO 73499
73492: POP
// hHackUnlimitedResources ; 2 :
73493: CALL 85752 0 0
73497: GO 73605
73499: LD_INT 2
73501: DOUBLE
73502: EQUAL
73503: IFTRUE 73507
73505: GO 73514
73507: POP
// hHackSetLevel10 ; 3 :
73508: CALL 85885 0 0
73512: GO 73605
73514: LD_INT 3
73516: DOUBLE
73517: EQUAL
73518: IFTRUE 73522
73520: GO 73529
73522: POP
// hHackSetLevel10YourUnits ; 4 :
73523: CALL 85970 0 0
73527: GO 73605
73529: LD_INT 4
73531: DOUBLE
73532: EQUAL
73533: IFTRUE 73537
73535: GO 73544
73537: POP
// hHackInvincible ; 5 :
73538: CALL 86418 0 0
73542: GO 73605
73544: LD_INT 5
73546: DOUBLE
73547: EQUAL
73548: IFTRUE 73552
73550: GO 73559
73552: POP
// hHackInvisible ; 6 :
73553: CALL 86529 0 0
73557: GO 73605
73559: LD_INT 6
73561: DOUBLE
73562: EQUAL
73563: IFTRUE 73567
73565: GO 73574
73567: POP
// hHackChangeYourSide ; 7 :
73568: CALL 86586 0 0
73572: GO 73605
73574: LD_INT 7
73576: DOUBLE
73577: EQUAL
73578: IFTRUE 73582
73580: GO 73589
73582: POP
// hHackChangeUnitSide ; 8 :
73583: CALL 86628 0 0
73587: GO 73605
73589: LD_INT 8
73591: DOUBLE
73592: EQUAL
73593: IFTRUE 73597
73595: GO 73604
73597: POP
// hHackFog ; end ;
73598: CALL 86729 0 0
73602: GO 73605
73604: POP
// end ; if p2 = game_save_mode then
73605: LD_VAR 0 2
73609: PUSH
73610: LD_INT 102
73612: EQUAL
73613: IFFALSE 73668
// begin if p3 = 1 then
73615: LD_VAR 0 3
73619: PUSH
73620: LD_INT 1
73622: EQUAL
73623: IFFALSE 73635
// globalGameSaveCounter := p4 ;
73625: LD_ADDR_EXP 63
73629: PUSH
73630: LD_VAR 0 4
73634: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
73635: LD_VAR 0 3
73639: PUSH
73640: LD_INT 2
73642: EQUAL
73643: PUSH
73644: LD_EXP 63
73648: AND
73649: IFFALSE 73668
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73651: LD_STRING setGameSaveCounter(
73653: PUSH
73654: LD_EXP 63
73658: STR
73659: PUSH
73660: LD_STRING )
73662: STR
73663: PPUSH
73664: CALL_OW 559
// end ; end ;
73668: LD_VAR 0 7
73672: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
73673: LD_INT 0
73675: PPUSH
// streamModeActive := false ;
73676: LD_ADDR_EXP 64
73680: PUSH
73681: LD_INT 0
73683: ST_TO_ADDR
// normalCounter := 36 ;
73684: LD_ADDR_EXP 65
73688: PUSH
73689: LD_INT 36
73691: ST_TO_ADDR
// hardcoreCounter := 18 ;
73692: LD_ADDR_EXP 66
73696: PUSH
73697: LD_INT 18
73699: ST_TO_ADDR
// sRocket := false ;
73700: LD_ADDR_EXP 69
73704: PUSH
73705: LD_INT 0
73707: ST_TO_ADDR
// sSpeed := false ;
73708: LD_ADDR_EXP 68
73712: PUSH
73713: LD_INT 0
73715: ST_TO_ADDR
// sEngine := false ;
73716: LD_ADDR_EXP 70
73720: PUSH
73721: LD_INT 0
73723: ST_TO_ADDR
// sSpec := false ;
73724: LD_ADDR_EXP 67
73728: PUSH
73729: LD_INT 0
73731: ST_TO_ADDR
// sLevel := false ;
73732: LD_ADDR_EXP 71
73736: PUSH
73737: LD_INT 0
73739: ST_TO_ADDR
// sArmoury := false ;
73740: LD_ADDR_EXP 72
73744: PUSH
73745: LD_INT 0
73747: ST_TO_ADDR
// sRadar := false ;
73748: LD_ADDR_EXP 73
73752: PUSH
73753: LD_INT 0
73755: ST_TO_ADDR
// sBunker := false ;
73756: LD_ADDR_EXP 74
73760: PUSH
73761: LD_INT 0
73763: ST_TO_ADDR
// sHack := false ;
73764: LD_ADDR_EXP 75
73768: PUSH
73769: LD_INT 0
73771: ST_TO_ADDR
// sFire := false ;
73772: LD_ADDR_EXP 76
73776: PUSH
73777: LD_INT 0
73779: ST_TO_ADDR
// sRefresh := false ;
73780: LD_ADDR_EXP 77
73784: PUSH
73785: LD_INT 0
73787: ST_TO_ADDR
// sExp := false ;
73788: LD_ADDR_EXP 78
73792: PUSH
73793: LD_INT 0
73795: ST_TO_ADDR
// sDepot := false ;
73796: LD_ADDR_EXP 79
73800: PUSH
73801: LD_INT 0
73803: ST_TO_ADDR
// sFlag := false ;
73804: LD_ADDR_EXP 80
73808: PUSH
73809: LD_INT 0
73811: ST_TO_ADDR
// sKamikadze := false ;
73812: LD_ADDR_EXP 88
73816: PUSH
73817: LD_INT 0
73819: ST_TO_ADDR
// sTroll := false ;
73820: LD_ADDR_EXP 89
73824: PUSH
73825: LD_INT 0
73827: ST_TO_ADDR
// sSlow := false ;
73828: LD_ADDR_EXP 90
73832: PUSH
73833: LD_INT 0
73835: ST_TO_ADDR
// sLack := false ;
73836: LD_ADDR_EXP 91
73840: PUSH
73841: LD_INT 0
73843: ST_TO_ADDR
// sTank := false ;
73844: LD_ADDR_EXP 93
73848: PUSH
73849: LD_INT 0
73851: ST_TO_ADDR
// sRemote := false ;
73852: LD_ADDR_EXP 94
73856: PUSH
73857: LD_INT 0
73859: ST_TO_ADDR
// sPowell := false ;
73860: LD_ADDR_EXP 95
73864: PUSH
73865: LD_INT 0
73867: ST_TO_ADDR
// sTeleport := false ;
73868: LD_ADDR_EXP 98
73872: PUSH
73873: LD_INT 0
73875: ST_TO_ADDR
// sOilTower := false ;
73876: LD_ADDR_EXP 100
73880: PUSH
73881: LD_INT 0
73883: ST_TO_ADDR
// sShovel := false ;
73884: LD_ADDR_EXP 101
73888: PUSH
73889: LD_INT 0
73891: ST_TO_ADDR
// sSheik := false ;
73892: LD_ADDR_EXP 102
73896: PUSH
73897: LD_INT 0
73899: ST_TO_ADDR
// sEarthquake := false ;
73900: LD_ADDR_EXP 104
73904: PUSH
73905: LD_INT 0
73907: ST_TO_ADDR
// sAI := false ;
73908: LD_ADDR_EXP 105
73912: PUSH
73913: LD_INT 0
73915: ST_TO_ADDR
// sCargo := false ;
73916: LD_ADDR_EXP 108
73920: PUSH
73921: LD_INT 0
73923: ST_TO_ADDR
// sDLaser := false ;
73924: LD_ADDR_EXP 109
73928: PUSH
73929: LD_INT 0
73931: ST_TO_ADDR
// sExchange := false ;
73932: LD_ADDR_EXP 110
73936: PUSH
73937: LD_INT 0
73939: ST_TO_ADDR
// sFac := false ;
73940: LD_ADDR_EXP 111
73944: PUSH
73945: LD_INT 0
73947: ST_TO_ADDR
// sPower := false ;
73948: LD_ADDR_EXP 112
73952: PUSH
73953: LD_INT 0
73955: ST_TO_ADDR
// sRandom := false ;
73956: LD_ADDR_EXP 113
73960: PUSH
73961: LD_INT 0
73963: ST_TO_ADDR
// sShield := false ;
73964: LD_ADDR_EXP 114
73968: PUSH
73969: LD_INT 0
73971: ST_TO_ADDR
// sTime := false ;
73972: LD_ADDR_EXP 115
73976: PUSH
73977: LD_INT 0
73979: ST_TO_ADDR
// sTools := false ;
73980: LD_ADDR_EXP 116
73984: PUSH
73985: LD_INT 0
73987: ST_TO_ADDR
// sSold := false ;
73988: LD_ADDR_EXP 81
73992: PUSH
73993: LD_INT 0
73995: ST_TO_ADDR
// sDiff := false ;
73996: LD_ADDR_EXP 82
74000: PUSH
74001: LD_INT 0
74003: ST_TO_ADDR
// sFog := false ;
74004: LD_ADDR_EXP 85
74008: PUSH
74009: LD_INT 0
74011: ST_TO_ADDR
// sReset := false ;
74012: LD_ADDR_EXP 86
74016: PUSH
74017: LD_INT 0
74019: ST_TO_ADDR
// sSun := false ;
74020: LD_ADDR_EXP 87
74024: PUSH
74025: LD_INT 0
74027: ST_TO_ADDR
// sTiger := false ;
74028: LD_ADDR_EXP 83
74032: PUSH
74033: LD_INT 0
74035: ST_TO_ADDR
// sBomb := false ;
74036: LD_ADDR_EXP 84
74040: PUSH
74041: LD_INT 0
74043: ST_TO_ADDR
// sWound := false ;
74044: LD_ADDR_EXP 92
74048: PUSH
74049: LD_INT 0
74051: ST_TO_ADDR
// sBetray := false ;
74052: LD_ADDR_EXP 96
74056: PUSH
74057: LD_INT 0
74059: ST_TO_ADDR
// sContamin := false ;
74060: LD_ADDR_EXP 97
74064: PUSH
74065: LD_INT 0
74067: ST_TO_ADDR
// sOil := false ;
74068: LD_ADDR_EXP 99
74072: PUSH
74073: LD_INT 0
74075: ST_TO_ADDR
// sStu := false ;
74076: LD_ADDR_EXP 103
74080: PUSH
74081: LD_INT 0
74083: ST_TO_ADDR
// sBazooka := false ;
74084: LD_ADDR_EXP 106
74088: PUSH
74089: LD_INT 0
74091: ST_TO_ADDR
// sMortar := false ;
74092: LD_ADDR_EXP 107
74096: PUSH
74097: LD_INT 0
74099: ST_TO_ADDR
// sRanger := false ;
74100: LD_ADDR_EXP 117
74104: PUSH
74105: LD_INT 0
74107: ST_TO_ADDR
// sComputer := false ;
74108: LD_ADDR_EXP 118
74112: PUSH
74113: LD_INT 0
74115: ST_TO_ADDR
// s30 := false ;
74116: LD_ADDR_EXP 119
74120: PUSH
74121: LD_INT 0
74123: ST_TO_ADDR
// s60 := false ;
74124: LD_ADDR_EXP 120
74128: PUSH
74129: LD_INT 0
74131: ST_TO_ADDR
// end ;
74132: LD_VAR 0 1
74136: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
74137: LD_INT 0
74139: PPUSH
74140: PPUSH
74141: PPUSH
74142: PPUSH
74143: PPUSH
74144: PPUSH
74145: PPUSH
// result := [ ] ;
74146: LD_ADDR_VAR 0 2
74150: PUSH
74151: EMPTY
74152: ST_TO_ADDR
// if campaign_id = 1 then
74153: LD_OWVAR 69
74157: PUSH
74158: LD_INT 1
74160: EQUAL
74161: IFFALSE 77327
// begin case mission_number of 1 :
74163: LD_OWVAR 70
74167: PUSH
74168: LD_INT 1
74170: DOUBLE
74171: EQUAL
74172: IFTRUE 74176
74174: GO 74252
74176: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
74177: LD_ADDR_VAR 0 2
74181: PUSH
74182: LD_INT 2
74184: PUSH
74185: LD_INT 4
74187: PUSH
74188: LD_INT 11
74190: PUSH
74191: LD_INT 12
74193: PUSH
74194: LD_INT 15
74196: PUSH
74197: LD_INT 16
74199: PUSH
74200: LD_INT 22
74202: PUSH
74203: LD_INT 23
74205: PUSH
74206: LD_INT 26
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: PUSH
74220: LD_INT 101
74222: PUSH
74223: LD_INT 102
74225: PUSH
74226: LD_INT 106
74228: PUSH
74229: LD_INT 116
74231: PUSH
74232: LD_INT 117
74234: PUSH
74235: LD_INT 118
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: PUSH
74246: EMPTY
74247: LIST
74248: LIST
74249: ST_TO_ADDR
74250: GO 77325
74252: LD_INT 2
74254: DOUBLE
74255: EQUAL
74256: IFTRUE 74260
74258: GO 74344
74260: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
74261: LD_ADDR_VAR 0 2
74265: PUSH
74266: LD_INT 2
74268: PUSH
74269: LD_INT 4
74271: PUSH
74272: LD_INT 11
74274: PUSH
74275: LD_INT 12
74277: PUSH
74278: LD_INT 15
74280: PUSH
74281: LD_INT 16
74283: PUSH
74284: LD_INT 22
74286: PUSH
74287: LD_INT 23
74289: PUSH
74290: LD_INT 26
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: PUSH
74304: LD_INT 101
74306: PUSH
74307: LD_INT 102
74309: PUSH
74310: LD_INT 105
74312: PUSH
74313: LD_INT 106
74315: PUSH
74316: LD_INT 108
74318: PUSH
74319: LD_INT 116
74321: PUSH
74322: LD_INT 117
74324: PUSH
74325: LD_INT 118
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: ST_TO_ADDR
74342: GO 77325
74344: LD_INT 3
74346: DOUBLE
74347: EQUAL
74348: IFTRUE 74352
74350: GO 74440
74352: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
74353: LD_ADDR_VAR 0 2
74357: PUSH
74358: LD_INT 2
74360: PUSH
74361: LD_INT 4
74363: PUSH
74364: LD_INT 5
74366: PUSH
74367: LD_INT 11
74369: PUSH
74370: LD_INT 12
74372: PUSH
74373: LD_INT 15
74375: PUSH
74376: LD_INT 16
74378: PUSH
74379: LD_INT 22
74381: PUSH
74382: LD_INT 26
74384: PUSH
74385: LD_INT 36
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: PUSH
74400: LD_INT 101
74402: PUSH
74403: LD_INT 102
74405: PUSH
74406: LD_INT 105
74408: PUSH
74409: LD_INT 106
74411: PUSH
74412: LD_INT 108
74414: PUSH
74415: LD_INT 116
74417: PUSH
74418: LD_INT 117
74420: PUSH
74421: LD_INT 118
74423: PUSH
74424: EMPTY
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: ST_TO_ADDR
74438: GO 77325
74440: LD_INT 4
74442: DOUBLE
74443: EQUAL
74444: IFTRUE 74448
74446: GO 74544
74448: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
74449: LD_ADDR_VAR 0 2
74453: PUSH
74454: LD_INT 2
74456: PUSH
74457: LD_INT 4
74459: PUSH
74460: LD_INT 5
74462: PUSH
74463: LD_INT 8
74465: PUSH
74466: LD_INT 11
74468: PUSH
74469: LD_INT 12
74471: PUSH
74472: LD_INT 15
74474: PUSH
74475: LD_INT 16
74477: PUSH
74478: LD_INT 22
74480: PUSH
74481: LD_INT 23
74483: PUSH
74484: LD_INT 26
74486: PUSH
74487: LD_INT 36
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 101
74506: PUSH
74507: LD_INT 102
74509: PUSH
74510: LD_INT 105
74512: PUSH
74513: LD_INT 106
74515: PUSH
74516: LD_INT 108
74518: PUSH
74519: LD_INT 116
74521: PUSH
74522: LD_INT 117
74524: PUSH
74525: LD_INT 118
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: ST_TO_ADDR
74542: GO 77325
74544: LD_INT 5
74546: DOUBLE
74547: EQUAL
74548: IFTRUE 74552
74550: GO 74664
74552: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
74553: LD_ADDR_VAR 0 2
74557: PUSH
74558: LD_INT 2
74560: PUSH
74561: LD_INT 4
74563: PUSH
74564: LD_INT 5
74566: PUSH
74567: LD_INT 6
74569: PUSH
74570: LD_INT 8
74572: PUSH
74573: LD_INT 11
74575: PUSH
74576: LD_INT 12
74578: PUSH
74579: LD_INT 15
74581: PUSH
74582: LD_INT 16
74584: PUSH
74585: LD_INT 22
74587: PUSH
74588: LD_INT 23
74590: PUSH
74591: LD_INT 25
74593: PUSH
74594: LD_INT 26
74596: PUSH
74597: LD_INT 36
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: LIST
74608: LIST
74609: LIST
74610: LIST
74611: LIST
74612: LIST
74613: LIST
74614: LIST
74615: PUSH
74616: LD_INT 101
74618: PUSH
74619: LD_INT 102
74621: PUSH
74622: LD_INT 105
74624: PUSH
74625: LD_INT 106
74627: PUSH
74628: LD_INT 108
74630: PUSH
74631: LD_INT 109
74633: PUSH
74634: LD_INT 112
74636: PUSH
74637: LD_INT 116
74639: PUSH
74640: LD_INT 117
74642: PUSH
74643: LD_INT 118
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: ST_TO_ADDR
74662: GO 77325
74664: LD_INT 6
74666: DOUBLE
74667: EQUAL
74668: IFTRUE 74672
74670: GO 74804
74672: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
74673: LD_ADDR_VAR 0 2
74677: PUSH
74678: LD_INT 2
74680: PUSH
74681: LD_INT 4
74683: PUSH
74684: LD_INT 5
74686: PUSH
74687: LD_INT 6
74689: PUSH
74690: LD_INT 8
74692: PUSH
74693: LD_INT 11
74695: PUSH
74696: LD_INT 12
74698: PUSH
74699: LD_INT 15
74701: PUSH
74702: LD_INT 16
74704: PUSH
74705: LD_INT 20
74707: PUSH
74708: LD_INT 21
74710: PUSH
74711: LD_INT 22
74713: PUSH
74714: LD_INT 23
74716: PUSH
74717: LD_INT 25
74719: PUSH
74720: LD_INT 26
74722: PUSH
74723: LD_INT 30
74725: PUSH
74726: LD_INT 31
74728: PUSH
74729: LD_INT 32
74731: PUSH
74732: LD_INT 36
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: LIST
74739: LIST
74740: LIST
74741: LIST
74742: LIST
74743: LIST
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: PUSH
74756: LD_INT 101
74758: PUSH
74759: LD_INT 102
74761: PUSH
74762: LD_INT 105
74764: PUSH
74765: LD_INT 106
74767: PUSH
74768: LD_INT 108
74770: PUSH
74771: LD_INT 109
74773: PUSH
74774: LD_INT 112
74776: PUSH
74777: LD_INT 116
74779: PUSH
74780: LD_INT 117
74782: PUSH
74783: LD_INT 118
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: ST_TO_ADDR
74802: GO 77325
74804: LD_INT 7
74806: DOUBLE
74807: EQUAL
74808: IFTRUE 74812
74810: GO 74924
74812: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
74813: LD_ADDR_VAR 0 2
74817: PUSH
74818: LD_INT 2
74820: PUSH
74821: LD_INT 4
74823: PUSH
74824: LD_INT 5
74826: PUSH
74827: LD_INT 7
74829: PUSH
74830: LD_INT 11
74832: PUSH
74833: LD_INT 12
74835: PUSH
74836: LD_INT 15
74838: PUSH
74839: LD_INT 16
74841: PUSH
74842: LD_INT 20
74844: PUSH
74845: LD_INT 21
74847: PUSH
74848: LD_INT 22
74850: PUSH
74851: LD_INT 23
74853: PUSH
74854: LD_INT 25
74856: PUSH
74857: LD_INT 26
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: PUSH
74876: LD_INT 101
74878: PUSH
74879: LD_INT 102
74881: PUSH
74882: LD_INT 103
74884: PUSH
74885: LD_INT 105
74887: PUSH
74888: LD_INT 106
74890: PUSH
74891: LD_INT 108
74893: PUSH
74894: LD_INT 112
74896: PUSH
74897: LD_INT 116
74899: PUSH
74900: LD_INT 117
74902: PUSH
74903: LD_INT 118
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: ST_TO_ADDR
74922: GO 77325
74924: LD_INT 8
74926: DOUBLE
74927: EQUAL
74928: IFTRUE 74932
74930: GO 75072
74932: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
74933: LD_ADDR_VAR 0 2
74937: PUSH
74938: LD_INT 2
74940: PUSH
74941: LD_INT 4
74943: PUSH
74944: LD_INT 5
74946: PUSH
74947: LD_INT 6
74949: PUSH
74950: LD_INT 7
74952: PUSH
74953: LD_INT 8
74955: PUSH
74956: LD_INT 11
74958: PUSH
74959: LD_INT 12
74961: PUSH
74962: LD_INT 15
74964: PUSH
74965: LD_INT 16
74967: PUSH
74968: LD_INT 20
74970: PUSH
74971: LD_INT 21
74973: PUSH
74974: LD_INT 22
74976: PUSH
74977: LD_INT 23
74979: PUSH
74980: LD_INT 25
74982: PUSH
74983: LD_INT 26
74985: PUSH
74986: LD_INT 30
74988: PUSH
74989: LD_INT 31
74991: PUSH
74992: LD_INT 32
74994: PUSH
74995: LD_INT 36
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: PUSH
75020: LD_INT 101
75022: PUSH
75023: LD_INT 102
75025: PUSH
75026: LD_INT 103
75028: PUSH
75029: LD_INT 105
75031: PUSH
75032: LD_INT 106
75034: PUSH
75035: LD_INT 108
75037: PUSH
75038: LD_INT 109
75040: PUSH
75041: LD_INT 112
75043: PUSH
75044: LD_INT 116
75046: PUSH
75047: LD_INT 117
75049: PUSH
75050: LD_INT 118
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: PUSH
75066: EMPTY
75067: LIST
75068: LIST
75069: ST_TO_ADDR
75070: GO 77325
75072: LD_INT 9
75074: DOUBLE
75075: EQUAL
75076: IFTRUE 75080
75078: GO 75228
75080: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
75081: LD_ADDR_VAR 0 2
75085: PUSH
75086: LD_INT 2
75088: PUSH
75089: LD_INT 4
75091: PUSH
75092: LD_INT 5
75094: PUSH
75095: LD_INT 6
75097: PUSH
75098: LD_INT 7
75100: PUSH
75101: LD_INT 8
75103: PUSH
75104: LD_INT 11
75106: PUSH
75107: LD_INT 12
75109: PUSH
75110: LD_INT 15
75112: PUSH
75113: LD_INT 16
75115: PUSH
75116: LD_INT 20
75118: PUSH
75119: LD_INT 21
75121: PUSH
75122: LD_INT 22
75124: PUSH
75125: LD_INT 23
75127: PUSH
75128: LD_INT 25
75130: PUSH
75131: LD_INT 26
75133: PUSH
75134: LD_INT 28
75136: PUSH
75137: LD_INT 30
75139: PUSH
75140: LD_INT 31
75142: PUSH
75143: LD_INT 32
75145: PUSH
75146: LD_INT 36
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: LIST
75157: LIST
75158: LIST
75159: LIST
75160: LIST
75161: LIST
75162: LIST
75163: LIST
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: PUSH
75172: LD_INT 101
75174: PUSH
75175: LD_INT 102
75177: PUSH
75178: LD_INT 103
75180: PUSH
75181: LD_INT 105
75183: PUSH
75184: LD_INT 106
75186: PUSH
75187: LD_INT 108
75189: PUSH
75190: LD_INT 109
75192: PUSH
75193: LD_INT 112
75195: PUSH
75196: LD_INT 114
75198: PUSH
75199: LD_INT 116
75201: PUSH
75202: LD_INT 117
75204: PUSH
75205: LD_INT 118
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: ST_TO_ADDR
75226: GO 77325
75228: LD_INT 10
75230: DOUBLE
75231: EQUAL
75232: IFTRUE 75236
75234: GO 75432
75236: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
75237: LD_ADDR_VAR 0 2
75241: PUSH
75242: LD_INT 2
75244: PUSH
75245: LD_INT 4
75247: PUSH
75248: LD_INT 5
75250: PUSH
75251: LD_INT 6
75253: PUSH
75254: LD_INT 7
75256: PUSH
75257: LD_INT 8
75259: PUSH
75260: LD_INT 9
75262: PUSH
75263: LD_INT 10
75265: PUSH
75266: LD_INT 11
75268: PUSH
75269: LD_INT 12
75271: PUSH
75272: LD_INT 13
75274: PUSH
75275: LD_INT 14
75277: PUSH
75278: LD_INT 15
75280: PUSH
75281: LD_INT 16
75283: PUSH
75284: LD_INT 17
75286: PUSH
75287: LD_INT 18
75289: PUSH
75290: LD_INT 19
75292: PUSH
75293: LD_INT 20
75295: PUSH
75296: LD_INT 21
75298: PUSH
75299: LD_INT 22
75301: PUSH
75302: LD_INT 23
75304: PUSH
75305: LD_INT 24
75307: PUSH
75308: LD_INT 25
75310: PUSH
75311: LD_INT 26
75313: PUSH
75314: LD_INT 28
75316: PUSH
75317: LD_INT 30
75319: PUSH
75320: LD_INT 31
75322: PUSH
75323: LD_INT 32
75325: PUSH
75326: LD_INT 36
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: PUSH
75360: LD_INT 101
75362: PUSH
75363: LD_INT 102
75365: PUSH
75366: LD_INT 103
75368: PUSH
75369: LD_INT 104
75371: PUSH
75372: LD_INT 105
75374: PUSH
75375: LD_INT 106
75377: PUSH
75378: LD_INT 107
75380: PUSH
75381: LD_INT 108
75383: PUSH
75384: LD_INT 109
75386: PUSH
75387: LD_INT 110
75389: PUSH
75390: LD_INT 111
75392: PUSH
75393: LD_INT 112
75395: PUSH
75396: LD_INT 114
75398: PUSH
75399: LD_INT 116
75401: PUSH
75402: LD_INT 117
75404: PUSH
75405: LD_INT 118
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: ST_TO_ADDR
75430: GO 77325
75432: LD_INT 11
75434: DOUBLE
75435: EQUAL
75436: IFTRUE 75440
75438: GO 75644
75440: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
75441: LD_ADDR_VAR 0 2
75445: PUSH
75446: LD_INT 2
75448: PUSH
75449: LD_INT 3
75451: PUSH
75452: LD_INT 4
75454: PUSH
75455: LD_INT 5
75457: PUSH
75458: LD_INT 6
75460: PUSH
75461: LD_INT 7
75463: PUSH
75464: LD_INT 8
75466: PUSH
75467: LD_INT 9
75469: PUSH
75470: LD_INT 10
75472: PUSH
75473: LD_INT 11
75475: PUSH
75476: LD_INT 12
75478: PUSH
75479: LD_INT 13
75481: PUSH
75482: LD_INT 14
75484: PUSH
75485: LD_INT 15
75487: PUSH
75488: LD_INT 16
75490: PUSH
75491: LD_INT 17
75493: PUSH
75494: LD_INT 18
75496: PUSH
75497: LD_INT 19
75499: PUSH
75500: LD_INT 20
75502: PUSH
75503: LD_INT 21
75505: PUSH
75506: LD_INT 22
75508: PUSH
75509: LD_INT 23
75511: PUSH
75512: LD_INT 24
75514: PUSH
75515: LD_INT 25
75517: PUSH
75518: LD_INT 26
75520: PUSH
75521: LD_INT 28
75523: PUSH
75524: LD_INT 30
75526: PUSH
75527: LD_INT 31
75529: PUSH
75530: LD_INT 32
75532: PUSH
75533: LD_INT 34
75535: PUSH
75536: LD_INT 36
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: LIST
75554: LIST
75555: LIST
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: LIST
75571: PUSH
75572: LD_INT 101
75574: PUSH
75575: LD_INT 102
75577: PUSH
75578: LD_INT 103
75580: PUSH
75581: LD_INT 104
75583: PUSH
75584: LD_INT 105
75586: PUSH
75587: LD_INT 106
75589: PUSH
75590: LD_INT 107
75592: PUSH
75593: LD_INT 108
75595: PUSH
75596: LD_INT 109
75598: PUSH
75599: LD_INT 110
75601: PUSH
75602: LD_INT 111
75604: PUSH
75605: LD_INT 112
75607: PUSH
75608: LD_INT 114
75610: PUSH
75611: LD_INT 116
75613: PUSH
75614: LD_INT 117
75616: PUSH
75617: LD_INT 118
75619: PUSH
75620: EMPTY
75621: LIST
75622: LIST
75623: LIST
75624: LIST
75625: LIST
75626: LIST
75627: LIST
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: ST_TO_ADDR
75642: GO 77325
75644: LD_INT 12
75646: DOUBLE
75647: EQUAL
75648: IFTRUE 75652
75650: GO 75872
75652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
75653: LD_ADDR_VAR 0 2
75657: PUSH
75658: LD_INT 1
75660: PUSH
75661: LD_INT 2
75663: PUSH
75664: LD_INT 3
75666: PUSH
75667: LD_INT 4
75669: PUSH
75670: LD_INT 5
75672: PUSH
75673: LD_INT 6
75675: PUSH
75676: LD_INT 7
75678: PUSH
75679: LD_INT 8
75681: PUSH
75682: LD_INT 9
75684: PUSH
75685: LD_INT 10
75687: PUSH
75688: LD_INT 11
75690: PUSH
75691: LD_INT 12
75693: PUSH
75694: LD_INT 13
75696: PUSH
75697: LD_INT 14
75699: PUSH
75700: LD_INT 15
75702: PUSH
75703: LD_INT 16
75705: PUSH
75706: LD_INT 17
75708: PUSH
75709: LD_INT 18
75711: PUSH
75712: LD_INT 19
75714: PUSH
75715: LD_INT 20
75717: PUSH
75718: LD_INT 21
75720: PUSH
75721: LD_INT 22
75723: PUSH
75724: LD_INT 23
75726: PUSH
75727: LD_INT 24
75729: PUSH
75730: LD_INT 25
75732: PUSH
75733: LD_INT 26
75735: PUSH
75736: LD_INT 27
75738: PUSH
75739: LD_INT 28
75741: PUSH
75742: LD_INT 30
75744: PUSH
75745: LD_INT 31
75747: PUSH
75748: LD_INT 32
75750: PUSH
75751: LD_INT 33
75753: PUSH
75754: LD_INT 34
75756: PUSH
75757: LD_INT 36
75759: PUSH
75760: EMPTY
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: LIST
75770: LIST
75771: LIST
75772: LIST
75773: LIST
75774: LIST
75775: LIST
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: LIST
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: LIST
75788: LIST
75789: LIST
75790: LIST
75791: LIST
75792: LIST
75793: LIST
75794: LIST
75795: PUSH
75796: LD_INT 101
75798: PUSH
75799: LD_INT 102
75801: PUSH
75802: LD_INT 103
75804: PUSH
75805: LD_INT 104
75807: PUSH
75808: LD_INT 105
75810: PUSH
75811: LD_INT 106
75813: PUSH
75814: LD_INT 107
75816: PUSH
75817: LD_INT 108
75819: PUSH
75820: LD_INT 109
75822: PUSH
75823: LD_INT 110
75825: PUSH
75826: LD_INT 111
75828: PUSH
75829: LD_INT 112
75831: PUSH
75832: LD_INT 113
75834: PUSH
75835: LD_INT 114
75837: PUSH
75838: LD_INT 116
75840: PUSH
75841: LD_INT 117
75843: PUSH
75844: LD_INT 118
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: ST_TO_ADDR
75870: GO 77325
75872: LD_INT 13
75874: DOUBLE
75875: EQUAL
75876: IFTRUE 75880
75878: GO 76088
75880: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
75881: LD_ADDR_VAR 0 2
75885: PUSH
75886: LD_INT 1
75888: PUSH
75889: LD_INT 2
75891: PUSH
75892: LD_INT 3
75894: PUSH
75895: LD_INT 4
75897: PUSH
75898: LD_INT 5
75900: PUSH
75901: LD_INT 8
75903: PUSH
75904: LD_INT 9
75906: PUSH
75907: LD_INT 10
75909: PUSH
75910: LD_INT 11
75912: PUSH
75913: LD_INT 12
75915: PUSH
75916: LD_INT 14
75918: PUSH
75919: LD_INT 15
75921: PUSH
75922: LD_INT 16
75924: PUSH
75925: LD_INT 17
75927: PUSH
75928: LD_INT 18
75930: PUSH
75931: LD_INT 19
75933: PUSH
75934: LD_INT 20
75936: PUSH
75937: LD_INT 21
75939: PUSH
75940: LD_INT 22
75942: PUSH
75943: LD_INT 23
75945: PUSH
75946: LD_INT 24
75948: PUSH
75949: LD_INT 25
75951: PUSH
75952: LD_INT 26
75954: PUSH
75955: LD_INT 27
75957: PUSH
75958: LD_INT 28
75960: PUSH
75961: LD_INT 30
75963: PUSH
75964: LD_INT 31
75966: PUSH
75967: LD_INT 32
75969: PUSH
75970: LD_INT 33
75972: PUSH
75973: LD_INT 34
75975: PUSH
75976: LD_INT 36
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: LIST
75996: LIST
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: PUSH
76012: LD_INT 101
76014: PUSH
76015: LD_INT 102
76017: PUSH
76018: LD_INT 103
76020: PUSH
76021: LD_INT 104
76023: PUSH
76024: LD_INT 105
76026: PUSH
76027: LD_INT 106
76029: PUSH
76030: LD_INT 107
76032: PUSH
76033: LD_INT 108
76035: PUSH
76036: LD_INT 109
76038: PUSH
76039: LD_INT 110
76041: PUSH
76042: LD_INT 111
76044: PUSH
76045: LD_INT 112
76047: PUSH
76048: LD_INT 113
76050: PUSH
76051: LD_INT 114
76053: PUSH
76054: LD_INT 116
76056: PUSH
76057: LD_INT 117
76059: PUSH
76060: LD_INT 118
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: LIST
76075: LIST
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: PUSH
76082: EMPTY
76083: LIST
76084: LIST
76085: ST_TO_ADDR
76086: GO 77325
76088: LD_INT 14
76090: DOUBLE
76091: EQUAL
76092: IFTRUE 76096
76094: GO 76320
76096: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
76097: LD_ADDR_VAR 0 2
76101: PUSH
76102: LD_INT 1
76104: PUSH
76105: LD_INT 2
76107: PUSH
76108: LD_INT 3
76110: PUSH
76111: LD_INT 4
76113: PUSH
76114: LD_INT 5
76116: PUSH
76117: LD_INT 6
76119: PUSH
76120: LD_INT 7
76122: PUSH
76123: LD_INT 8
76125: PUSH
76126: LD_INT 9
76128: PUSH
76129: LD_INT 10
76131: PUSH
76132: LD_INT 11
76134: PUSH
76135: LD_INT 12
76137: PUSH
76138: LD_INT 13
76140: PUSH
76141: LD_INT 14
76143: PUSH
76144: LD_INT 15
76146: PUSH
76147: LD_INT 16
76149: PUSH
76150: LD_INT 17
76152: PUSH
76153: LD_INT 18
76155: PUSH
76156: LD_INT 19
76158: PUSH
76159: LD_INT 20
76161: PUSH
76162: LD_INT 21
76164: PUSH
76165: LD_INT 22
76167: PUSH
76168: LD_INT 23
76170: PUSH
76171: LD_INT 24
76173: PUSH
76174: LD_INT 25
76176: PUSH
76177: LD_INT 26
76179: PUSH
76180: LD_INT 27
76182: PUSH
76183: LD_INT 28
76185: PUSH
76186: LD_INT 29
76188: PUSH
76189: LD_INT 30
76191: PUSH
76192: LD_INT 31
76194: PUSH
76195: LD_INT 32
76197: PUSH
76198: LD_INT 33
76200: PUSH
76201: LD_INT 34
76203: PUSH
76204: LD_INT 36
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: LIST
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: LIST
76242: LIST
76243: PUSH
76244: LD_INT 101
76246: PUSH
76247: LD_INT 102
76249: PUSH
76250: LD_INT 103
76252: PUSH
76253: LD_INT 104
76255: PUSH
76256: LD_INT 105
76258: PUSH
76259: LD_INT 106
76261: PUSH
76262: LD_INT 107
76264: PUSH
76265: LD_INT 108
76267: PUSH
76268: LD_INT 109
76270: PUSH
76271: LD_INT 110
76273: PUSH
76274: LD_INT 111
76276: PUSH
76277: LD_INT 112
76279: PUSH
76280: LD_INT 113
76282: PUSH
76283: LD_INT 114
76285: PUSH
76286: LD_INT 116
76288: PUSH
76289: LD_INT 117
76291: PUSH
76292: LD_INT 118
76294: PUSH
76295: EMPTY
76296: LIST
76297: LIST
76298: LIST
76299: LIST
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: LIST
76305: LIST
76306: LIST
76307: LIST
76308: LIST
76309: LIST
76310: LIST
76311: LIST
76312: LIST
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: ST_TO_ADDR
76318: GO 77325
76320: LD_INT 15
76322: DOUBLE
76323: EQUAL
76324: IFTRUE 76328
76326: GO 76552
76328: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
76329: LD_ADDR_VAR 0 2
76333: PUSH
76334: LD_INT 1
76336: PUSH
76337: LD_INT 2
76339: PUSH
76340: LD_INT 3
76342: PUSH
76343: LD_INT 4
76345: PUSH
76346: LD_INT 5
76348: PUSH
76349: LD_INT 6
76351: PUSH
76352: LD_INT 7
76354: PUSH
76355: LD_INT 8
76357: PUSH
76358: LD_INT 9
76360: PUSH
76361: LD_INT 10
76363: PUSH
76364: LD_INT 11
76366: PUSH
76367: LD_INT 12
76369: PUSH
76370: LD_INT 13
76372: PUSH
76373: LD_INT 14
76375: PUSH
76376: LD_INT 15
76378: PUSH
76379: LD_INT 16
76381: PUSH
76382: LD_INT 17
76384: PUSH
76385: LD_INT 18
76387: PUSH
76388: LD_INT 19
76390: PUSH
76391: LD_INT 20
76393: PUSH
76394: LD_INT 21
76396: PUSH
76397: LD_INT 22
76399: PUSH
76400: LD_INT 23
76402: PUSH
76403: LD_INT 24
76405: PUSH
76406: LD_INT 25
76408: PUSH
76409: LD_INT 26
76411: PUSH
76412: LD_INT 27
76414: PUSH
76415: LD_INT 28
76417: PUSH
76418: LD_INT 29
76420: PUSH
76421: LD_INT 30
76423: PUSH
76424: LD_INT 31
76426: PUSH
76427: LD_INT 32
76429: PUSH
76430: LD_INT 33
76432: PUSH
76433: LD_INT 34
76435: PUSH
76436: LD_INT 36
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: LIST
76445: LIST
76446: LIST
76447: LIST
76448: LIST
76449: LIST
76450: LIST
76451: LIST
76452: LIST
76453: LIST
76454: LIST
76455: LIST
76456: LIST
76457: LIST
76458: LIST
76459: LIST
76460: LIST
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: PUSH
76476: LD_INT 101
76478: PUSH
76479: LD_INT 102
76481: PUSH
76482: LD_INT 103
76484: PUSH
76485: LD_INT 104
76487: PUSH
76488: LD_INT 105
76490: PUSH
76491: LD_INT 106
76493: PUSH
76494: LD_INT 107
76496: PUSH
76497: LD_INT 108
76499: PUSH
76500: LD_INT 109
76502: PUSH
76503: LD_INT 110
76505: PUSH
76506: LD_INT 111
76508: PUSH
76509: LD_INT 112
76511: PUSH
76512: LD_INT 113
76514: PUSH
76515: LD_INT 114
76517: PUSH
76518: LD_INT 116
76520: PUSH
76521: LD_INT 117
76523: PUSH
76524: LD_INT 118
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: LIST
76538: LIST
76539: LIST
76540: LIST
76541: LIST
76542: LIST
76543: LIST
76544: LIST
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: ST_TO_ADDR
76550: GO 77325
76552: LD_INT 16
76554: DOUBLE
76555: EQUAL
76556: IFTRUE 76560
76558: GO 76696
76560: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
76561: LD_ADDR_VAR 0 2
76565: PUSH
76566: LD_INT 2
76568: PUSH
76569: LD_INT 4
76571: PUSH
76572: LD_INT 5
76574: PUSH
76575: LD_INT 7
76577: PUSH
76578: LD_INT 11
76580: PUSH
76581: LD_INT 12
76583: PUSH
76584: LD_INT 15
76586: PUSH
76587: LD_INT 16
76589: PUSH
76590: LD_INT 20
76592: PUSH
76593: LD_INT 21
76595: PUSH
76596: LD_INT 22
76598: PUSH
76599: LD_INT 23
76601: PUSH
76602: LD_INT 25
76604: PUSH
76605: LD_INT 26
76607: PUSH
76608: LD_INT 30
76610: PUSH
76611: LD_INT 31
76613: PUSH
76614: LD_INT 32
76616: PUSH
76617: LD_INT 33
76619: PUSH
76620: LD_INT 34
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: LIST
76627: LIST
76628: LIST
76629: LIST
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: LIST
76635: LIST
76636: LIST
76637: LIST
76638: LIST
76639: LIST
76640: LIST
76641: LIST
76642: LIST
76643: PUSH
76644: LD_INT 101
76646: PUSH
76647: LD_INT 102
76649: PUSH
76650: LD_INT 103
76652: PUSH
76653: LD_INT 106
76655: PUSH
76656: LD_INT 108
76658: PUSH
76659: LD_INT 112
76661: PUSH
76662: LD_INT 113
76664: PUSH
76665: LD_INT 114
76667: PUSH
76668: LD_INT 116
76670: PUSH
76671: LD_INT 117
76673: PUSH
76674: LD_INT 118
76676: PUSH
76677: EMPTY
76678: LIST
76679: LIST
76680: LIST
76681: LIST
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: ST_TO_ADDR
76694: GO 77325
76696: LD_INT 17
76698: DOUBLE
76699: EQUAL
76700: IFTRUE 76704
76702: GO 76928
76704: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
76705: LD_ADDR_VAR 0 2
76709: PUSH
76710: LD_INT 1
76712: PUSH
76713: LD_INT 2
76715: PUSH
76716: LD_INT 3
76718: PUSH
76719: LD_INT 4
76721: PUSH
76722: LD_INT 5
76724: PUSH
76725: LD_INT 6
76727: PUSH
76728: LD_INT 7
76730: PUSH
76731: LD_INT 8
76733: PUSH
76734: LD_INT 9
76736: PUSH
76737: LD_INT 10
76739: PUSH
76740: LD_INT 11
76742: PUSH
76743: LD_INT 12
76745: PUSH
76746: LD_INT 13
76748: PUSH
76749: LD_INT 14
76751: PUSH
76752: LD_INT 15
76754: PUSH
76755: LD_INT 16
76757: PUSH
76758: LD_INT 17
76760: PUSH
76761: LD_INT 18
76763: PUSH
76764: LD_INT 19
76766: PUSH
76767: LD_INT 20
76769: PUSH
76770: LD_INT 21
76772: PUSH
76773: LD_INT 22
76775: PUSH
76776: LD_INT 23
76778: PUSH
76779: LD_INT 24
76781: PUSH
76782: LD_INT 25
76784: PUSH
76785: LD_INT 26
76787: PUSH
76788: LD_INT 27
76790: PUSH
76791: LD_INT 28
76793: PUSH
76794: LD_INT 29
76796: PUSH
76797: LD_INT 30
76799: PUSH
76800: LD_INT 31
76802: PUSH
76803: LD_INT 32
76805: PUSH
76806: LD_INT 33
76808: PUSH
76809: LD_INT 34
76811: PUSH
76812: LD_INT 36
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: LIST
76819: LIST
76820: LIST
76821: LIST
76822: LIST
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: LIST
76828: LIST
76829: LIST
76830: LIST
76831: LIST
76832: LIST
76833: LIST
76834: LIST
76835: LIST
76836: LIST
76837: LIST
76838: LIST
76839: LIST
76840: LIST
76841: LIST
76842: LIST
76843: LIST
76844: LIST
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: LIST
76851: PUSH
76852: LD_INT 101
76854: PUSH
76855: LD_INT 102
76857: PUSH
76858: LD_INT 103
76860: PUSH
76861: LD_INT 104
76863: PUSH
76864: LD_INT 105
76866: PUSH
76867: LD_INT 106
76869: PUSH
76870: LD_INT 107
76872: PUSH
76873: LD_INT 108
76875: PUSH
76876: LD_INT 109
76878: PUSH
76879: LD_INT 110
76881: PUSH
76882: LD_INT 111
76884: PUSH
76885: LD_INT 112
76887: PUSH
76888: LD_INT 113
76890: PUSH
76891: LD_INT 114
76893: PUSH
76894: LD_INT 116
76896: PUSH
76897: LD_INT 117
76899: PUSH
76900: LD_INT 118
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: LIST
76907: LIST
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: LIST
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: ST_TO_ADDR
76926: GO 77325
76928: LD_INT 18
76930: DOUBLE
76931: EQUAL
76932: IFTRUE 76936
76934: GO 77084
76936: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
76937: LD_ADDR_VAR 0 2
76941: PUSH
76942: LD_INT 2
76944: PUSH
76945: LD_INT 4
76947: PUSH
76948: LD_INT 5
76950: PUSH
76951: LD_INT 7
76953: PUSH
76954: LD_INT 11
76956: PUSH
76957: LD_INT 12
76959: PUSH
76960: LD_INT 15
76962: PUSH
76963: LD_INT 16
76965: PUSH
76966: LD_INT 20
76968: PUSH
76969: LD_INT 21
76971: PUSH
76972: LD_INT 22
76974: PUSH
76975: LD_INT 23
76977: PUSH
76978: LD_INT 25
76980: PUSH
76981: LD_INT 26
76983: PUSH
76984: LD_INT 30
76986: PUSH
76987: LD_INT 31
76989: PUSH
76990: LD_INT 32
76992: PUSH
76993: LD_INT 33
76995: PUSH
76996: LD_INT 34
76998: PUSH
76999: LD_INT 35
77001: PUSH
77002: LD_INT 36
77004: PUSH
77005: EMPTY
77006: LIST
77007: LIST
77008: LIST
77009: LIST
77010: LIST
77011: LIST
77012: LIST
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: LIST
77023: LIST
77024: LIST
77025: LIST
77026: LIST
77027: PUSH
77028: LD_INT 101
77030: PUSH
77031: LD_INT 102
77033: PUSH
77034: LD_INT 103
77036: PUSH
77037: LD_INT 106
77039: PUSH
77040: LD_INT 108
77042: PUSH
77043: LD_INT 112
77045: PUSH
77046: LD_INT 113
77048: PUSH
77049: LD_INT 114
77051: PUSH
77052: LD_INT 115
77054: PUSH
77055: LD_INT 116
77057: PUSH
77058: LD_INT 117
77060: PUSH
77061: LD_INT 118
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: LIST
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: LIST
77076: LIST
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: ST_TO_ADDR
77082: GO 77325
77084: LD_INT 19
77086: DOUBLE
77087: EQUAL
77088: IFTRUE 77092
77090: GO 77324
77092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
77093: LD_ADDR_VAR 0 2
77097: PUSH
77098: LD_INT 1
77100: PUSH
77101: LD_INT 2
77103: PUSH
77104: LD_INT 3
77106: PUSH
77107: LD_INT 4
77109: PUSH
77110: LD_INT 5
77112: PUSH
77113: LD_INT 6
77115: PUSH
77116: LD_INT 7
77118: PUSH
77119: LD_INT 8
77121: PUSH
77122: LD_INT 9
77124: PUSH
77125: LD_INT 10
77127: PUSH
77128: LD_INT 11
77130: PUSH
77131: LD_INT 12
77133: PUSH
77134: LD_INT 13
77136: PUSH
77137: LD_INT 14
77139: PUSH
77140: LD_INT 15
77142: PUSH
77143: LD_INT 16
77145: PUSH
77146: LD_INT 17
77148: PUSH
77149: LD_INT 18
77151: PUSH
77152: LD_INT 19
77154: PUSH
77155: LD_INT 20
77157: PUSH
77158: LD_INT 21
77160: PUSH
77161: LD_INT 22
77163: PUSH
77164: LD_INT 23
77166: PUSH
77167: LD_INT 24
77169: PUSH
77170: LD_INT 25
77172: PUSH
77173: LD_INT 26
77175: PUSH
77176: LD_INT 27
77178: PUSH
77179: LD_INT 28
77181: PUSH
77182: LD_INT 29
77184: PUSH
77185: LD_INT 30
77187: PUSH
77188: LD_INT 31
77190: PUSH
77191: LD_INT 32
77193: PUSH
77194: LD_INT 33
77196: PUSH
77197: LD_INT 34
77199: PUSH
77200: LD_INT 35
77202: PUSH
77203: LD_INT 36
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: LIST
77223: LIST
77224: LIST
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: LIST
77231: LIST
77232: LIST
77233: LIST
77234: LIST
77235: LIST
77236: LIST
77237: LIST
77238: LIST
77239: LIST
77240: LIST
77241: LIST
77242: LIST
77243: PUSH
77244: LD_INT 101
77246: PUSH
77247: LD_INT 102
77249: PUSH
77250: LD_INT 103
77252: PUSH
77253: LD_INT 104
77255: PUSH
77256: LD_INT 105
77258: PUSH
77259: LD_INT 106
77261: PUSH
77262: LD_INT 107
77264: PUSH
77265: LD_INT 108
77267: PUSH
77268: LD_INT 109
77270: PUSH
77271: LD_INT 110
77273: PUSH
77274: LD_INT 111
77276: PUSH
77277: LD_INT 112
77279: PUSH
77280: LD_INT 113
77282: PUSH
77283: LD_INT 114
77285: PUSH
77286: LD_INT 115
77288: PUSH
77289: LD_INT 116
77291: PUSH
77292: LD_INT 117
77294: PUSH
77295: LD_INT 118
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: ST_TO_ADDR
77322: GO 77325
77324: POP
// end else
77325: GO 77556
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
77327: LD_ADDR_VAR 0 2
77331: PUSH
77332: LD_INT 1
77334: PUSH
77335: LD_INT 2
77337: PUSH
77338: LD_INT 3
77340: PUSH
77341: LD_INT 4
77343: PUSH
77344: LD_INT 5
77346: PUSH
77347: LD_INT 6
77349: PUSH
77350: LD_INT 7
77352: PUSH
77353: LD_INT 8
77355: PUSH
77356: LD_INT 9
77358: PUSH
77359: LD_INT 10
77361: PUSH
77362: LD_INT 11
77364: PUSH
77365: LD_INT 12
77367: PUSH
77368: LD_INT 13
77370: PUSH
77371: LD_INT 14
77373: PUSH
77374: LD_INT 15
77376: PUSH
77377: LD_INT 16
77379: PUSH
77380: LD_INT 17
77382: PUSH
77383: LD_INT 18
77385: PUSH
77386: LD_INT 19
77388: PUSH
77389: LD_INT 20
77391: PUSH
77392: LD_INT 21
77394: PUSH
77395: LD_INT 22
77397: PUSH
77398: LD_INT 23
77400: PUSH
77401: LD_INT 24
77403: PUSH
77404: LD_INT 25
77406: PUSH
77407: LD_INT 26
77409: PUSH
77410: LD_INT 27
77412: PUSH
77413: LD_INT 28
77415: PUSH
77416: LD_INT 29
77418: PUSH
77419: LD_INT 30
77421: PUSH
77422: LD_INT 31
77424: PUSH
77425: LD_INT 32
77427: PUSH
77428: LD_INT 33
77430: PUSH
77431: LD_INT 34
77433: PUSH
77434: LD_INT 35
77436: PUSH
77437: LD_INT 36
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: LIST
77444: LIST
77445: LIST
77446: LIST
77447: LIST
77448: LIST
77449: LIST
77450: LIST
77451: LIST
77452: LIST
77453: LIST
77454: LIST
77455: LIST
77456: LIST
77457: LIST
77458: LIST
77459: LIST
77460: LIST
77461: LIST
77462: LIST
77463: LIST
77464: LIST
77465: LIST
77466: LIST
77467: LIST
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: LIST
77473: LIST
77474: LIST
77475: LIST
77476: LIST
77477: PUSH
77478: LD_INT 101
77480: PUSH
77481: LD_INT 102
77483: PUSH
77484: LD_INT 103
77486: PUSH
77487: LD_INT 104
77489: PUSH
77490: LD_INT 105
77492: PUSH
77493: LD_INT 106
77495: PUSH
77496: LD_INT 107
77498: PUSH
77499: LD_INT 108
77501: PUSH
77502: LD_INT 109
77504: PUSH
77505: LD_INT 110
77507: PUSH
77508: LD_INT 111
77510: PUSH
77511: LD_INT 112
77513: PUSH
77514: LD_INT 113
77516: PUSH
77517: LD_INT 114
77519: PUSH
77520: LD_INT 115
77522: PUSH
77523: LD_INT 116
77525: PUSH
77526: LD_INT 117
77528: PUSH
77529: LD_INT 118
77531: PUSH
77532: EMPTY
77533: LIST
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: LIST
77539: LIST
77540: LIST
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: ST_TO_ADDR
// if result then
77556: LD_VAR 0 2
77560: IFFALSE 78346
// begin normal :=  ;
77562: LD_ADDR_VAR 0 5
77566: PUSH
77567: LD_STRING 
77569: ST_TO_ADDR
// hardcore :=  ;
77570: LD_ADDR_VAR 0 6
77574: PUSH
77575: LD_STRING 
77577: ST_TO_ADDR
// active :=  ;
77578: LD_ADDR_VAR 0 7
77582: PUSH
77583: LD_STRING 
77585: ST_TO_ADDR
// for i = 1 to normalCounter do
77586: LD_ADDR_VAR 0 8
77590: PUSH
77591: DOUBLE
77592: LD_INT 1
77594: DEC
77595: ST_TO_ADDR
77596: LD_EXP 65
77600: PUSH
77601: FOR_TO
77602: IFFALSE 77703
// begin tmp := 0 ;
77604: LD_ADDR_VAR 0 3
77608: PUSH
77609: LD_STRING 0
77611: ST_TO_ADDR
// if result [ 1 ] then
77612: LD_VAR 0 2
77616: PUSH
77617: LD_INT 1
77619: ARRAY
77620: IFFALSE 77685
// if result [ 1 ] [ 1 ] = i then
77622: LD_VAR 0 2
77626: PUSH
77627: LD_INT 1
77629: ARRAY
77630: PUSH
77631: LD_INT 1
77633: ARRAY
77634: PUSH
77635: LD_VAR 0 8
77639: EQUAL
77640: IFFALSE 77685
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
77642: LD_ADDR_VAR 0 2
77646: PUSH
77647: LD_VAR 0 2
77651: PPUSH
77652: LD_INT 1
77654: PPUSH
77655: LD_VAR 0 2
77659: PUSH
77660: LD_INT 1
77662: ARRAY
77663: PPUSH
77664: LD_INT 1
77666: PPUSH
77667: CALL_OW 3
77671: PPUSH
77672: CALL_OW 1
77676: ST_TO_ADDR
// tmp := 1 ;
77677: LD_ADDR_VAR 0 3
77681: PUSH
77682: LD_STRING 1
77684: ST_TO_ADDR
// end ; normal := normal & tmp ;
77685: LD_ADDR_VAR 0 5
77689: PUSH
77690: LD_VAR 0 5
77694: PUSH
77695: LD_VAR 0 3
77699: STR
77700: ST_TO_ADDR
// end ;
77701: GO 77601
77703: POP
77704: POP
// for i = 1 to hardcoreCounter do
77705: LD_ADDR_VAR 0 8
77709: PUSH
77710: DOUBLE
77711: LD_INT 1
77713: DEC
77714: ST_TO_ADDR
77715: LD_EXP 66
77719: PUSH
77720: FOR_TO
77721: IFFALSE 77826
// begin tmp := 0 ;
77723: LD_ADDR_VAR 0 3
77727: PUSH
77728: LD_STRING 0
77730: ST_TO_ADDR
// if result [ 2 ] then
77731: LD_VAR 0 2
77735: PUSH
77736: LD_INT 2
77738: ARRAY
77739: IFFALSE 77808
// if result [ 2 ] [ 1 ] = 100 + i then
77741: LD_VAR 0 2
77745: PUSH
77746: LD_INT 2
77748: ARRAY
77749: PUSH
77750: LD_INT 1
77752: ARRAY
77753: PUSH
77754: LD_INT 100
77756: PUSH
77757: LD_VAR 0 8
77761: PLUS
77762: EQUAL
77763: IFFALSE 77808
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
77765: LD_ADDR_VAR 0 2
77769: PUSH
77770: LD_VAR 0 2
77774: PPUSH
77775: LD_INT 2
77777: PPUSH
77778: LD_VAR 0 2
77782: PUSH
77783: LD_INT 2
77785: ARRAY
77786: PPUSH
77787: LD_INT 1
77789: PPUSH
77790: CALL_OW 3
77794: PPUSH
77795: CALL_OW 1
77799: ST_TO_ADDR
// tmp := 1 ;
77800: LD_ADDR_VAR 0 3
77804: PUSH
77805: LD_STRING 1
77807: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
77808: LD_ADDR_VAR 0 6
77812: PUSH
77813: LD_VAR 0 6
77817: PUSH
77818: LD_VAR 0 3
77822: STR
77823: ST_TO_ADDR
// end ;
77824: GO 77720
77826: POP
77827: POP
// if isGameLoad then
77828: LD_VAR 0 1
77832: IFFALSE 78307
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
77834: LD_ADDR_VAR 0 4
77838: PUSH
77839: LD_EXP 69
77843: PUSH
77844: LD_EXP 68
77848: PUSH
77849: LD_EXP 70
77853: PUSH
77854: LD_EXP 67
77858: PUSH
77859: LD_EXP 71
77863: PUSH
77864: LD_EXP 72
77868: PUSH
77869: LD_EXP 73
77873: PUSH
77874: LD_EXP 74
77878: PUSH
77879: LD_EXP 75
77883: PUSH
77884: LD_EXP 76
77888: PUSH
77889: LD_EXP 77
77893: PUSH
77894: LD_EXP 78
77898: PUSH
77899: LD_EXP 79
77903: PUSH
77904: LD_EXP 80
77908: PUSH
77909: LD_EXP 88
77913: PUSH
77914: LD_EXP 89
77918: PUSH
77919: LD_EXP 90
77923: PUSH
77924: LD_EXP 91
77928: PUSH
77929: LD_EXP 93
77933: PUSH
77934: LD_EXP 94
77938: PUSH
77939: LD_EXP 95
77943: PUSH
77944: LD_EXP 98
77948: PUSH
77949: LD_EXP 100
77953: PUSH
77954: LD_EXP 101
77958: PUSH
77959: LD_EXP 102
77963: PUSH
77964: LD_EXP 104
77968: PUSH
77969: LD_EXP 105
77973: PUSH
77974: LD_EXP 108
77978: PUSH
77979: LD_EXP 109
77983: PUSH
77984: LD_EXP 110
77988: PUSH
77989: LD_EXP 111
77993: PUSH
77994: LD_EXP 112
77998: PUSH
77999: LD_EXP 113
78003: PUSH
78004: LD_EXP 114
78008: PUSH
78009: LD_EXP 115
78013: PUSH
78014: LD_EXP 116
78018: PUSH
78019: LD_EXP 81
78023: PUSH
78024: LD_EXP 82
78028: PUSH
78029: LD_EXP 85
78033: PUSH
78034: LD_EXP 86
78038: PUSH
78039: LD_EXP 87
78043: PUSH
78044: LD_EXP 83
78048: PUSH
78049: LD_EXP 84
78053: PUSH
78054: LD_EXP 92
78058: PUSH
78059: LD_EXP 96
78063: PUSH
78064: LD_EXP 97
78068: PUSH
78069: LD_EXP 99
78073: PUSH
78074: LD_EXP 103
78078: PUSH
78079: LD_EXP 106
78083: PUSH
78084: LD_EXP 107
78088: PUSH
78089: LD_EXP 117
78093: PUSH
78094: LD_EXP 118
78098: PUSH
78099: LD_EXP 119
78103: PUSH
78104: LD_EXP 120
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: LIST
78113: LIST
78114: LIST
78115: LIST
78116: LIST
78117: LIST
78118: LIST
78119: LIST
78120: LIST
78121: LIST
78122: LIST
78123: LIST
78124: LIST
78125: LIST
78126: LIST
78127: LIST
78128: LIST
78129: LIST
78130: LIST
78131: LIST
78132: LIST
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: LIST
78140: LIST
78141: LIST
78142: LIST
78143: LIST
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: ST_TO_ADDR
// tmp :=  ;
78165: LD_ADDR_VAR 0 3
78169: PUSH
78170: LD_STRING 
78172: ST_TO_ADDR
// for i = 1 to normalCounter do
78173: LD_ADDR_VAR 0 8
78177: PUSH
78178: DOUBLE
78179: LD_INT 1
78181: DEC
78182: ST_TO_ADDR
78183: LD_EXP 65
78187: PUSH
78188: FOR_TO
78189: IFFALSE 78225
// begin if flags [ i ] then
78191: LD_VAR 0 4
78195: PUSH
78196: LD_VAR 0 8
78200: ARRAY
78201: IFFALSE 78223
// tmp := tmp & i & ; ;
78203: LD_ADDR_VAR 0 3
78207: PUSH
78208: LD_VAR 0 3
78212: PUSH
78213: LD_VAR 0 8
78217: STR
78218: PUSH
78219: LD_STRING ;
78221: STR
78222: ST_TO_ADDR
// end ;
78223: GO 78188
78225: POP
78226: POP
// for i = 1 to hardcoreCounter do
78227: LD_ADDR_VAR 0 8
78231: PUSH
78232: DOUBLE
78233: LD_INT 1
78235: DEC
78236: ST_TO_ADDR
78237: LD_EXP 66
78241: PUSH
78242: FOR_TO
78243: IFFALSE 78289
// begin if flags [ normalCounter + i ] then
78245: LD_VAR 0 4
78249: PUSH
78250: LD_EXP 65
78254: PUSH
78255: LD_VAR 0 8
78259: PLUS
78260: ARRAY
78261: IFFALSE 78287
// tmp := tmp & ( 100 + i ) & ; ;
78263: LD_ADDR_VAR 0 3
78267: PUSH
78268: LD_VAR 0 3
78272: PUSH
78273: LD_INT 100
78275: PUSH
78276: LD_VAR 0 8
78280: PLUS
78281: STR
78282: PUSH
78283: LD_STRING ;
78285: STR
78286: ST_TO_ADDR
// end ;
78287: GO 78242
78289: POP
78290: POP
// if tmp then
78291: LD_VAR 0 3
78295: IFFALSE 78307
// active := tmp ;
78297: LD_ADDR_VAR 0 7
78301: PUSH
78302: LD_VAR 0 3
78306: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
78307: LD_STRING getStreamItemsFromMission("
78309: PUSH
78310: LD_VAR 0 5
78314: STR
78315: PUSH
78316: LD_STRING ","
78318: STR
78319: PUSH
78320: LD_VAR 0 6
78324: STR
78325: PUSH
78326: LD_STRING ","
78328: STR
78329: PUSH
78330: LD_VAR 0 7
78334: STR
78335: PUSH
78336: LD_STRING ")
78338: STR
78339: PPUSH
78340: CALL_OW 559
// end else
78344: GO 78353
// ToLua ( getStreamItemsFromMission("","","") ) ;
78346: LD_STRING getStreamItemsFromMission("","","")
78348: PPUSH
78349: CALL_OW 559
// end ;
78353: LD_VAR 0 2
78357: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
78358: LD_EXP 64
78362: PUSH
78363: LD_EXP 69
78367: AND
78368: IFFALSE 78492
78370: GO 78372
78372: DISABLE
78373: LD_INT 0
78375: PPUSH
78376: PPUSH
// begin enable ;
78377: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
78378: LD_ADDR_VAR 0 2
78382: PUSH
78383: LD_INT 22
78385: PUSH
78386: LD_OWVAR 2
78390: PUSH
78391: EMPTY
78392: LIST
78393: LIST
78394: PUSH
78395: LD_INT 2
78397: PUSH
78398: LD_INT 34
78400: PUSH
78401: LD_INT 7
78403: PUSH
78404: EMPTY
78405: LIST
78406: LIST
78407: PUSH
78408: LD_INT 34
78410: PUSH
78411: LD_INT 45
78413: PUSH
78414: EMPTY
78415: LIST
78416: LIST
78417: PUSH
78418: LD_INT 34
78420: PUSH
78421: LD_INT 28
78423: PUSH
78424: EMPTY
78425: LIST
78426: LIST
78427: PUSH
78428: LD_INT 34
78430: PUSH
78431: LD_INT 47
78433: PUSH
78434: EMPTY
78435: LIST
78436: LIST
78437: PUSH
78438: EMPTY
78439: LIST
78440: LIST
78441: LIST
78442: LIST
78443: LIST
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: PPUSH
78449: CALL_OW 69
78453: ST_TO_ADDR
// if not tmp then
78454: LD_VAR 0 2
78458: NOT
78459: IFFALSE 78463
// exit ;
78461: GO 78492
// for i in tmp do
78463: LD_ADDR_VAR 0 1
78467: PUSH
78468: LD_VAR 0 2
78472: PUSH
78473: FOR_IN
78474: IFFALSE 78490
// begin SetLives ( i , 0 ) ;
78476: LD_VAR 0 1
78480: PPUSH
78481: LD_INT 0
78483: PPUSH
78484: CALL_OW 234
// end ;
78488: GO 78473
78490: POP
78491: POP
// end ;
78492: PPOPN 2
78494: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
78495: LD_EXP 64
78499: PUSH
78500: LD_EXP 70
78504: AND
78505: IFFALSE 78589
78507: GO 78509
78509: DISABLE
78510: LD_INT 0
78512: PPUSH
78513: PPUSH
// begin enable ;
78514: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
78515: LD_ADDR_VAR 0 2
78519: PUSH
78520: LD_INT 22
78522: PUSH
78523: LD_OWVAR 2
78527: PUSH
78528: EMPTY
78529: LIST
78530: LIST
78531: PUSH
78532: LD_INT 32
78534: PUSH
78535: LD_INT 3
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: PPUSH
78546: CALL_OW 69
78550: ST_TO_ADDR
// if not tmp then
78551: LD_VAR 0 2
78555: NOT
78556: IFFALSE 78560
// exit ;
78558: GO 78589
// for i in tmp do
78560: LD_ADDR_VAR 0 1
78564: PUSH
78565: LD_VAR 0 2
78569: PUSH
78570: FOR_IN
78571: IFFALSE 78587
// begin SetLives ( i , 0 ) ;
78573: LD_VAR 0 1
78577: PPUSH
78578: LD_INT 0
78580: PPUSH
78581: CALL_OW 234
// end ;
78585: GO 78570
78587: POP
78588: POP
// end ;
78589: PPOPN 2
78591: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
78592: LD_EXP 64
78596: PUSH
78597: LD_EXP 67
78601: AND
78602: IFFALSE 78695
78604: GO 78606
78606: DISABLE
78607: LD_INT 0
78609: PPUSH
// begin enable ;
78610: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
78611: LD_ADDR_VAR 0 1
78615: PUSH
78616: LD_INT 22
78618: PUSH
78619: LD_OWVAR 2
78623: PUSH
78624: EMPTY
78625: LIST
78626: LIST
78627: PUSH
78628: LD_INT 2
78630: PUSH
78631: LD_INT 25
78633: PUSH
78634: LD_INT 5
78636: PUSH
78637: EMPTY
78638: LIST
78639: LIST
78640: PUSH
78641: LD_INT 25
78643: PUSH
78644: LD_INT 9
78646: PUSH
78647: EMPTY
78648: LIST
78649: LIST
78650: PUSH
78651: LD_INT 25
78653: PUSH
78654: LD_INT 8
78656: PUSH
78657: EMPTY
78658: LIST
78659: LIST
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: LIST
78665: LIST
78666: PUSH
78667: EMPTY
78668: LIST
78669: LIST
78670: PPUSH
78671: CALL_OW 69
78675: PUSH
78676: FOR_IN
78677: IFFALSE 78693
// begin SetClass ( i , 1 ) ;
78679: LD_VAR 0 1
78683: PPUSH
78684: LD_INT 1
78686: PPUSH
78687: CALL_OW 336
// end ;
78691: GO 78676
78693: POP
78694: POP
// end ;
78695: PPOPN 1
78697: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
78698: LD_EXP 64
78702: PUSH
78703: LD_EXP 68
78707: AND
78708: PUSH
78709: LD_OWVAR 65
78713: PUSH
78714: LD_INT 7
78716: LESS
78717: AND
78718: IFFALSE 78732
78720: GO 78722
78722: DISABLE
// begin enable ;
78723: ENABLE
// game_speed := 7 ;
78724: LD_ADDR_OWVAR 65
78728: PUSH
78729: LD_INT 7
78731: ST_TO_ADDR
// end ;
78732: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
78733: LD_EXP 64
78737: PUSH
78738: LD_EXP 71
78742: AND
78743: IFFALSE 78945
78745: GO 78747
78747: DISABLE
78748: LD_INT 0
78750: PPUSH
78751: PPUSH
78752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78753: LD_ADDR_VAR 0 3
78757: PUSH
78758: LD_INT 81
78760: PUSH
78761: LD_OWVAR 2
78765: PUSH
78766: EMPTY
78767: LIST
78768: LIST
78769: PUSH
78770: LD_INT 21
78772: PUSH
78773: LD_INT 1
78775: PUSH
78776: EMPTY
78777: LIST
78778: LIST
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: PPUSH
78784: CALL_OW 69
78788: ST_TO_ADDR
// if not tmp then
78789: LD_VAR 0 3
78793: NOT
78794: IFFALSE 78798
// exit ;
78796: GO 78945
// if tmp > 5 then
78798: LD_VAR 0 3
78802: PUSH
78803: LD_INT 5
78805: GREATER
78806: IFFALSE 78818
// k := 5 else
78808: LD_ADDR_VAR 0 2
78812: PUSH
78813: LD_INT 5
78815: ST_TO_ADDR
78816: GO 78828
// k := tmp ;
78818: LD_ADDR_VAR 0 2
78822: PUSH
78823: LD_VAR 0 3
78827: ST_TO_ADDR
// for i := 1 to k do
78828: LD_ADDR_VAR 0 1
78832: PUSH
78833: DOUBLE
78834: LD_INT 1
78836: DEC
78837: ST_TO_ADDR
78838: LD_VAR 0 2
78842: PUSH
78843: FOR_TO
78844: IFFALSE 78943
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
78846: LD_VAR 0 3
78850: PUSH
78851: LD_VAR 0 1
78855: ARRAY
78856: PPUSH
78857: LD_VAR 0 1
78861: PUSH
78862: LD_INT 4
78864: MOD
78865: PUSH
78866: LD_INT 1
78868: PLUS
78869: PPUSH
78870: CALL_OW 259
78874: PUSH
78875: LD_INT 10
78877: LESS
78878: IFFALSE 78941
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
78880: LD_VAR 0 3
78884: PUSH
78885: LD_VAR 0 1
78889: ARRAY
78890: PPUSH
78891: LD_VAR 0 1
78895: PUSH
78896: LD_INT 4
78898: MOD
78899: PUSH
78900: LD_INT 1
78902: PLUS
78903: PPUSH
78904: LD_VAR 0 3
78908: PUSH
78909: LD_VAR 0 1
78913: ARRAY
78914: PPUSH
78915: LD_VAR 0 1
78919: PUSH
78920: LD_INT 4
78922: MOD
78923: PUSH
78924: LD_INT 1
78926: PLUS
78927: PPUSH
78928: CALL_OW 259
78932: PUSH
78933: LD_INT 1
78935: PLUS
78936: PPUSH
78937: CALL_OW 237
78941: GO 78843
78943: POP
78944: POP
// end ;
78945: PPOPN 3
78947: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
78948: LD_EXP 64
78952: PUSH
78953: LD_EXP 72
78957: AND
78958: IFFALSE 78978
78960: GO 78962
78962: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
78963: LD_INT 4
78965: PPUSH
78966: LD_OWVAR 2
78970: PPUSH
78971: LD_INT 0
78973: PPUSH
78974: CALL_OW 324
78978: END
// every 0 0$1 trigger StreamModeActive and sShovel do
78979: LD_EXP 64
78983: PUSH
78984: LD_EXP 101
78988: AND
78989: IFFALSE 79009
78991: GO 78993
78993: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
78994: LD_INT 19
78996: PPUSH
78997: LD_OWVAR 2
79001: PPUSH
79002: LD_INT 0
79004: PPUSH
79005: CALL_OW 324
79009: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
79010: LD_EXP 64
79014: PUSH
79015: LD_EXP 73
79019: AND
79020: IFFALSE 79122
79022: GO 79024
79024: DISABLE
79025: LD_INT 0
79027: PPUSH
79028: PPUSH
// begin enable ;
79029: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
79030: LD_ADDR_VAR 0 2
79034: PUSH
79035: LD_INT 22
79037: PUSH
79038: LD_OWVAR 2
79042: PUSH
79043: EMPTY
79044: LIST
79045: LIST
79046: PUSH
79047: LD_INT 2
79049: PUSH
79050: LD_INT 34
79052: PUSH
79053: LD_INT 11
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: PUSH
79060: LD_INT 34
79062: PUSH
79063: LD_INT 30
79065: PUSH
79066: EMPTY
79067: LIST
79068: LIST
79069: PUSH
79070: EMPTY
79071: LIST
79072: LIST
79073: LIST
79074: PUSH
79075: EMPTY
79076: LIST
79077: LIST
79078: PPUSH
79079: CALL_OW 69
79083: ST_TO_ADDR
// if not tmp then
79084: LD_VAR 0 2
79088: NOT
79089: IFFALSE 79093
// exit ;
79091: GO 79122
// for i in tmp do
79093: LD_ADDR_VAR 0 1
79097: PUSH
79098: LD_VAR 0 2
79102: PUSH
79103: FOR_IN
79104: IFFALSE 79120
// begin SetLives ( i , 0 ) ;
79106: LD_VAR 0 1
79110: PPUSH
79111: LD_INT 0
79113: PPUSH
79114: CALL_OW 234
// end ;
79118: GO 79103
79120: POP
79121: POP
// end ;
79122: PPOPN 2
79124: END
// every 0 0$1 trigger StreamModeActive and sBunker do
79125: LD_EXP 64
79129: PUSH
79130: LD_EXP 74
79134: AND
79135: IFFALSE 79155
79137: GO 79139
79139: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
79140: LD_INT 32
79142: PPUSH
79143: LD_OWVAR 2
79147: PPUSH
79148: LD_INT 0
79150: PPUSH
79151: CALL_OW 324
79155: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
79156: LD_EXP 64
79160: PUSH
79161: LD_EXP 75
79165: AND
79166: IFFALSE 79347
79168: GO 79170
79170: DISABLE
79171: LD_INT 0
79173: PPUSH
79174: PPUSH
79175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
79176: LD_ADDR_VAR 0 2
79180: PUSH
79181: LD_INT 22
79183: PUSH
79184: LD_OWVAR 2
79188: PUSH
79189: EMPTY
79190: LIST
79191: LIST
79192: PUSH
79193: LD_INT 33
79195: PUSH
79196: LD_INT 3
79198: PUSH
79199: EMPTY
79200: LIST
79201: LIST
79202: PUSH
79203: EMPTY
79204: LIST
79205: LIST
79206: PPUSH
79207: CALL_OW 69
79211: ST_TO_ADDR
// if not tmp then
79212: LD_VAR 0 2
79216: NOT
79217: IFFALSE 79221
// exit ;
79219: GO 79347
// side := 0 ;
79221: LD_ADDR_VAR 0 3
79225: PUSH
79226: LD_INT 0
79228: ST_TO_ADDR
// for i := 1 to 8 do
79229: LD_ADDR_VAR 0 1
79233: PUSH
79234: DOUBLE
79235: LD_INT 1
79237: DEC
79238: ST_TO_ADDR
79239: LD_INT 8
79241: PUSH
79242: FOR_TO
79243: IFFALSE 79291
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
79245: LD_OWVAR 2
79249: PUSH
79250: LD_VAR 0 1
79254: NONEQUAL
79255: PUSH
79256: LD_OWVAR 2
79260: PPUSH
79261: LD_VAR 0 1
79265: PPUSH
79266: CALL_OW 81
79270: PUSH
79271: LD_INT 2
79273: EQUAL
79274: AND
79275: IFFALSE 79289
// begin side := i ;
79277: LD_ADDR_VAR 0 3
79281: PUSH
79282: LD_VAR 0 1
79286: ST_TO_ADDR
// break ;
79287: GO 79291
// end ;
79289: GO 79242
79291: POP
79292: POP
// if not side then
79293: LD_VAR 0 3
79297: NOT
79298: IFFALSE 79302
// exit ;
79300: GO 79347
// for i := 1 to tmp do
79302: LD_ADDR_VAR 0 1
79306: PUSH
79307: DOUBLE
79308: LD_INT 1
79310: DEC
79311: ST_TO_ADDR
79312: LD_VAR 0 2
79316: PUSH
79317: FOR_TO
79318: IFFALSE 79345
// if Prob ( 60 ) then
79320: LD_INT 60
79322: PPUSH
79323: CALL_OW 13
79327: IFFALSE 79343
// SetSide ( i , side ) ;
79329: LD_VAR 0 1
79333: PPUSH
79334: LD_VAR 0 3
79338: PPUSH
79339: CALL_OW 235
79343: GO 79317
79345: POP
79346: POP
// end ;
79347: PPOPN 3
79349: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
79350: LD_EXP 64
79354: PUSH
79355: LD_EXP 77
79359: AND
79360: IFFALSE 79479
79362: GO 79364
79364: DISABLE
79365: LD_INT 0
79367: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
79368: LD_ADDR_VAR 0 1
79372: PUSH
79373: LD_INT 22
79375: PUSH
79376: LD_OWVAR 2
79380: PUSH
79381: EMPTY
79382: LIST
79383: LIST
79384: PUSH
79385: LD_INT 21
79387: PUSH
79388: LD_INT 1
79390: PUSH
79391: EMPTY
79392: LIST
79393: LIST
79394: PUSH
79395: LD_INT 3
79397: PUSH
79398: LD_INT 23
79400: PUSH
79401: LD_INT 0
79403: PUSH
79404: EMPTY
79405: LIST
79406: LIST
79407: PUSH
79408: EMPTY
79409: LIST
79410: LIST
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: LIST
79416: PPUSH
79417: CALL_OW 69
79421: PUSH
79422: FOR_IN
79423: IFFALSE 79477
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
79425: LD_VAR 0 1
79429: PPUSH
79430: CALL_OW 257
79434: PUSH
79435: LD_INT 1
79437: PUSH
79438: LD_INT 2
79440: PUSH
79441: LD_INT 3
79443: PUSH
79444: LD_INT 4
79446: PUSH
79447: EMPTY
79448: LIST
79449: LIST
79450: LIST
79451: LIST
79452: IN
79453: IFFALSE 79475
// SetClass ( un , rand ( 1 , 4 ) ) ;
79455: LD_VAR 0 1
79459: PPUSH
79460: LD_INT 1
79462: PPUSH
79463: LD_INT 4
79465: PPUSH
79466: CALL_OW 12
79470: PPUSH
79471: CALL_OW 336
79475: GO 79422
79477: POP
79478: POP
// end ;
79479: PPOPN 1
79481: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
79482: LD_EXP 64
79486: PUSH
79487: LD_EXP 76
79491: AND
79492: IFFALSE 79571
79494: GO 79496
79496: DISABLE
79497: LD_INT 0
79499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79500: LD_ADDR_VAR 0 1
79504: PUSH
79505: LD_INT 22
79507: PUSH
79508: LD_OWVAR 2
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PUSH
79517: LD_INT 21
79519: PUSH
79520: LD_INT 3
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: PPUSH
79531: CALL_OW 69
79535: ST_TO_ADDR
// if not tmp then
79536: LD_VAR 0 1
79540: NOT
79541: IFFALSE 79545
// exit ;
79543: GO 79571
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
79545: LD_VAR 0 1
79549: PUSH
79550: LD_INT 1
79552: PPUSH
79553: LD_VAR 0 1
79557: PPUSH
79558: CALL_OW 12
79562: ARRAY
79563: PPUSH
79564: LD_INT 100
79566: PPUSH
79567: CALL_OW 234
// end ;
79571: PPOPN 1
79573: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
79574: LD_EXP 64
79578: PUSH
79579: LD_EXP 78
79583: AND
79584: IFFALSE 79682
79586: GO 79588
79588: DISABLE
79589: LD_INT 0
79591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79592: LD_ADDR_VAR 0 1
79596: PUSH
79597: LD_INT 22
79599: PUSH
79600: LD_OWVAR 2
79604: PUSH
79605: EMPTY
79606: LIST
79607: LIST
79608: PUSH
79609: LD_INT 21
79611: PUSH
79612: LD_INT 1
79614: PUSH
79615: EMPTY
79616: LIST
79617: LIST
79618: PUSH
79619: EMPTY
79620: LIST
79621: LIST
79622: PPUSH
79623: CALL_OW 69
79627: ST_TO_ADDR
// if not tmp then
79628: LD_VAR 0 1
79632: NOT
79633: IFFALSE 79637
// exit ;
79635: GO 79682
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
79637: LD_VAR 0 1
79641: PUSH
79642: LD_INT 1
79644: PPUSH
79645: LD_VAR 0 1
79649: PPUSH
79650: CALL_OW 12
79654: ARRAY
79655: PPUSH
79656: LD_INT 1
79658: PPUSH
79659: LD_INT 4
79661: PPUSH
79662: CALL_OW 12
79666: PPUSH
79667: LD_INT 3000
79669: PPUSH
79670: LD_INT 9000
79672: PPUSH
79673: CALL_OW 12
79677: PPUSH
79678: CALL_OW 492
// end ;
79682: PPOPN 1
79684: END
// every 0 0$1 trigger StreamModeActive and sDepot do
79685: LD_EXP 64
79689: PUSH
79690: LD_EXP 79
79694: AND
79695: IFFALSE 79715
79697: GO 79699
79699: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
79700: LD_INT 1
79702: PPUSH
79703: LD_OWVAR 2
79707: PPUSH
79708: LD_INT 0
79710: PPUSH
79711: CALL_OW 324
79715: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
79716: LD_EXP 64
79720: PUSH
79721: LD_EXP 80
79725: AND
79726: IFFALSE 79809
79728: GO 79730
79730: DISABLE
79731: LD_INT 0
79733: PPUSH
79734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79735: LD_ADDR_VAR 0 2
79739: PUSH
79740: LD_INT 22
79742: PUSH
79743: LD_OWVAR 2
79747: PUSH
79748: EMPTY
79749: LIST
79750: LIST
79751: PUSH
79752: LD_INT 21
79754: PUSH
79755: LD_INT 3
79757: PUSH
79758: EMPTY
79759: LIST
79760: LIST
79761: PUSH
79762: EMPTY
79763: LIST
79764: LIST
79765: PPUSH
79766: CALL_OW 69
79770: ST_TO_ADDR
// if not tmp then
79771: LD_VAR 0 2
79775: NOT
79776: IFFALSE 79780
// exit ;
79778: GO 79809
// for i in tmp do
79780: LD_ADDR_VAR 0 1
79784: PUSH
79785: LD_VAR 0 2
79789: PUSH
79790: FOR_IN
79791: IFFALSE 79807
// SetBLevel ( i , 10 ) ;
79793: LD_VAR 0 1
79797: PPUSH
79798: LD_INT 10
79800: PPUSH
79801: CALL_OW 241
79805: GO 79790
79807: POP
79808: POP
// end ;
79809: PPOPN 2
79811: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
79812: LD_EXP 64
79816: PUSH
79817: LD_EXP 81
79821: AND
79822: IFFALSE 79933
79824: GO 79826
79826: DISABLE
79827: LD_INT 0
79829: PPUSH
79830: PPUSH
79831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79832: LD_ADDR_VAR 0 3
79836: PUSH
79837: LD_INT 22
79839: PUSH
79840: LD_OWVAR 2
79844: PUSH
79845: EMPTY
79846: LIST
79847: LIST
79848: PUSH
79849: LD_INT 25
79851: PUSH
79852: LD_INT 1
79854: PUSH
79855: EMPTY
79856: LIST
79857: LIST
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: PPUSH
79863: CALL_OW 69
79867: ST_TO_ADDR
// if not tmp then
79868: LD_VAR 0 3
79872: NOT
79873: IFFALSE 79877
// exit ;
79875: GO 79933
// un := tmp [ rand ( 1 , tmp ) ] ;
79877: LD_ADDR_VAR 0 2
79881: PUSH
79882: LD_VAR 0 3
79886: PUSH
79887: LD_INT 1
79889: PPUSH
79890: LD_VAR 0 3
79894: PPUSH
79895: CALL_OW 12
79899: ARRAY
79900: ST_TO_ADDR
// if Crawls ( un ) then
79901: LD_VAR 0 2
79905: PPUSH
79906: CALL_OW 318
79910: IFFALSE 79921
// ComWalk ( un ) ;
79912: LD_VAR 0 2
79916: PPUSH
79917: CALL_OW 138
// SetClass ( un , class_sniper ) ;
79921: LD_VAR 0 2
79925: PPUSH
79926: LD_INT 5
79928: PPUSH
79929: CALL_OW 336
// end ;
79933: PPOPN 3
79935: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
79936: LD_EXP 64
79940: PUSH
79941: LD_EXP 82
79945: AND
79946: PUSH
79947: LD_OWVAR 67
79951: PUSH
79952: LD_INT 4
79954: LESS
79955: AND
79956: IFFALSE 79975
79958: GO 79960
79960: DISABLE
// begin Difficulty := Difficulty + 1 ;
79961: LD_ADDR_OWVAR 67
79965: PUSH
79966: LD_OWVAR 67
79970: PUSH
79971: LD_INT 1
79973: PLUS
79974: ST_TO_ADDR
// end ;
79975: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
79976: LD_EXP 64
79980: PUSH
79981: LD_EXP 83
79985: AND
79986: IFFALSE 80089
79988: GO 79990
79990: DISABLE
79991: LD_INT 0
79993: PPUSH
// begin for i := 1 to 5 do
79994: LD_ADDR_VAR 0 1
79998: PUSH
79999: DOUBLE
80000: LD_INT 1
80002: DEC
80003: ST_TO_ADDR
80004: LD_INT 5
80006: PUSH
80007: FOR_TO
80008: IFFALSE 80087
// begin uc_nation := nation_nature ;
80010: LD_ADDR_OWVAR 21
80014: PUSH
80015: LD_INT 0
80017: ST_TO_ADDR
// uc_side := 0 ;
80018: LD_ADDR_OWVAR 20
80022: PUSH
80023: LD_INT 0
80025: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80026: LD_ADDR_OWVAR 29
80030: PUSH
80031: LD_INT 12
80033: PUSH
80034: LD_INT 12
80036: PUSH
80037: EMPTY
80038: LIST
80039: LIST
80040: ST_TO_ADDR
// hc_agressivity := 20 ;
80041: LD_ADDR_OWVAR 35
80045: PUSH
80046: LD_INT 20
80048: ST_TO_ADDR
// hc_class := class_tiger ;
80049: LD_ADDR_OWVAR 28
80053: PUSH
80054: LD_INT 14
80056: ST_TO_ADDR
// hc_gallery :=  ;
80057: LD_ADDR_OWVAR 33
80061: PUSH
80062: LD_STRING 
80064: ST_TO_ADDR
// hc_name :=  ;
80065: LD_ADDR_OWVAR 26
80069: PUSH
80070: LD_STRING 
80072: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
80073: CALL_OW 44
80077: PPUSH
80078: LD_INT 0
80080: PPUSH
80081: CALL_OW 51
// end ;
80085: GO 80007
80087: POP
80088: POP
// end ;
80089: PPOPN 1
80091: END
// every 0 0$1 trigger StreamModeActive and sBomb do
80092: LD_EXP 64
80096: PUSH
80097: LD_EXP 84
80101: AND
80102: IFFALSE 80111
80104: GO 80106
80106: DISABLE
// StreamSibBomb ;
80107: CALL 80112 0 0
80111: END
// export function StreamSibBomb ; var i , x , y ; begin
80112: LD_INT 0
80114: PPUSH
80115: PPUSH
80116: PPUSH
80117: PPUSH
// result := false ;
80118: LD_ADDR_VAR 0 1
80122: PUSH
80123: LD_INT 0
80125: ST_TO_ADDR
// for i := 1 to 16 do
80126: LD_ADDR_VAR 0 2
80130: PUSH
80131: DOUBLE
80132: LD_INT 1
80134: DEC
80135: ST_TO_ADDR
80136: LD_INT 16
80138: PUSH
80139: FOR_TO
80140: IFFALSE 80339
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80142: LD_ADDR_VAR 0 3
80146: PUSH
80147: LD_INT 10
80149: PUSH
80150: LD_INT 20
80152: PUSH
80153: LD_INT 30
80155: PUSH
80156: LD_INT 40
80158: PUSH
80159: LD_INT 50
80161: PUSH
80162: LD_INT 60
80164: PUSH
80165: LD_INT 70
80167: PUSH
80168: LD_INT 80
80170: PUSH
80171: LD_INT 90
80173: PUSH
80174: LD_INT 100
80176: PUSH
80177: LD_INT 110
80179: PUSH
80180: LD_INT 120
80182: PUSH
80183: LD_INT 130
80185: PUSH
80186: LD_INT 140
80188: PUSH
80189: LD_INT 150
80191: PUSH
80192: EMPTY
80193: LIST
80194: LIST
80195: LIST
80196: LIST
80197: LIST
80198: LIST
80199: LIST
80200: LIST
80201: LIST
80202: LIST
80203: LIST
80204: LIST
80205: LIST
80206: LIST
80207: LIST
80208: PUSH
80209: LD_INT 1
80211: PPUSH
80212: LD_INT 15
80214: PPUSH
80215: CALL_OW 12
80219: ARRAY
80220: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80221: LD_ADDR_VAR 0 4
80225: PUSH
80226: LD_INT 10
80228: PUSH
80229: LD_INT 20
80231: PUSH
80232: LD_INT 30
80234: PUSH
80235: LD_INT 40
80237: PUSH
80238: LD_INT 50
80240: PUSH
80241: LD_INT 60
80243: PUSH
80244: LD_INT 70
80246: PUSH
80247: LD_INT 80
80249: PUSH
80250: LD_INT 90
80252: PUSH
80253: LD_INT 100
80255: PUSH
80256: LD_INT 110
80258: PUSH
80259: LD_INT 120
80261: PUSH
80262: LD_INT 130
80264: PUSH
80265: LD_INT 140
80267: PUSH
80268: LD_INT 150
80270: PUSH
80271: EMPTY
80272: LIST
80273: LIST
80274: LIST
80275: LIST
80276: LIST
80277: LIST
80278: LIST
80279: LIST
80280: LIST
80281: LIST
80282: LIST
80283: LIST
80284: LIST
80285: LIST
80286: LIST
80287: PUSH
80288: LD_INT 1
80290: PPUSH
80291: LD_INT 15
80293: PPUSH
80294: CALL_OW 12
80298: ARRAY
80299: ST_TO_ADDR
// if ValidHex ( x , y ) then
80300: LD_VAR 0 3
80304: PPUSH
80305: LD_VAR 0 4
80309: PPUSH
80310: CALL_OW 488
80314: IFFALSE 80337
// begin result := [ x , y ] ;
80316: LD_ADDR_VAR 0 1
80320: PUSH
80321: LD_VAR 0 3
80325: PUSH
80326: LD_VAR 0 4
80330: PUSH
80331: EMPTY
80332: LIST
80333: LIST
80334: ST_TO_ADDR
// break ;
80335: GO 80339
// end ; end ;
80337: GO 80139
80339: POP
80340: POP
// if result then
80341: LD_VAR 0 1
80345: IFFALSE 80405
// begin ToLua ( playSibBomb() ) ;
80347: LD_STRING playSibBomb()
80349: PPUSH
80350: CALL_OW 559
// wait ( 0 0$14 ) ;
80354: LD_INT 490
80356: PPUSH
80357: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
80361: LD_VAR 0 1
80365: PUSH
80366: LD_INT 1
80368: ARRAY
80369: PPUSH
80370: LD_VAR 0 1
80374: PUSH
80375: LD_INT 2
80377: ARRAY
80378: PPUSH
80379: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
80383: LD_VAR 0 1
80387: PUSH
80388: LD_INT 1
80390: ARRAY
80391: PPUSH
80392: LD_VAR 0 1
80396: PUSH
80397: LD_INT 2
80399: ARRAY
80400: PPUSH
80401: CALL_OW 429
// end ; end ;
80405: LD_VAR 0 1
80409: RET
// every 0 0$1 trigger StreamModeActive and sReset do
80410: LD_EXP 64
80414: PUSH
80415: LD_EXP 86
80419: AND
80420: IFFALSE 80432
80422: GO 80424
80424: DISABLE
// YouLost (  ) ;
80425: LD_STRING 
80427: PPUSH
80428: CALL_OW 104
80432: END
// every 0 0$1 trigger StreamModeActive and sFog do
80433: LD_EXP 64
80437: PUSH
80438: LD_EXP 85
80442: AND
80443: IFFALSE 80457
80445: GO 80447
80447: DISABLE
// FogOff ( your_side ) ;
80448: LD_OWVAR 2
80452: PPUSH
80453: CALL_OW 344
80457: END
// every 0 0$1 trigger StreamModeActive and sSun do
80458: LD_EXP 64
80462: PUSH
80463: LD_EXP 87
80467: AND
80468: IFFALSE 80496
80470: GO 80472
80472: DISABLE
// begin solar_recharge_percent := 0 ;
80473: LD_ADDR_OWVAR 79
80477: PUSH
80478: LD_INT 0
80480: ST_TO_ADDR
// wait ( 5 5$00 ) ;
80481: LD_INT 10500
80483: PPUSH
80484: CALL_OW 67
// solar_recharge_percent := 100 ;
80488: LD_ADDR_OWVAR 79
80492: PUSH
80493: LD_INT 100
80495: ST_TO_ADDR
// end ;
80496: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
80497: LD_EXP 64
80501: PUSH
80502: LD_EXP 88
80506: AND
80507: IFFALSE 80746
80509: GO 80511
80511: DISABLE
80512: LD_INT 0
80514: PPUSH
80515: PPUSH
80516: PPUSH
// begin tmp := [ ] ;
80517: LD_ADDR_VAR 0 3
80521: PUSH
80522: EMPTY
80523: ST_TO_ADDR
// for i := 1 to 6 do
80524: LD_ADDR_VAR 0 1
80528: PUSH
80529: DOUBLE
80530: LD_INT 1
80532: DEC
80533: ST_TO_ADDR
80534: LD_INT 6
80536: PUSH
80537: FOR_TO
80538: IFFALSE 80643
// begin uc_nation := nation_nature ;
80540: LD_ADDR_OWVAR 21
80544: PUSH
80545: LD_INT 0
80547: ST_TO_ADDR
// uc_side := 0 ;
80548: LD_ADDR_OWVAR 20
80552: PUSH
80553: LD_INT 0
80555: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80556: LD_ADDR_OWVAR 29
80560: PUSH
80561: LD_INT 12
80563: PUSH
80564: LD_INT 12
80566: PUSH
80567: EMPTY
80568: LIST
80569: LIST
80570: ST_TO_ADDR
// hc_agressivity := 20 ;
80571: LD_ADDR_OWVAR 35
80575: PUSH
80576: LD_INT 20
80578: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
80579: LD_ADDR_OWVAR 28
80583: PUSH
80584: LD_INT 17
80586: ST_TO_ADDR
// hc_gallery :=  ;
80587: LD_ADDR_OWVAR 33
80591: PUSH
80592: LD_STRING 
80594: ST_TO_ADDR
// hc_name :=  ;
80595: LD_ADDR_OWVAR 26
80599: PUSH
80600: LD_STRING 
80602: ST_TO_ADDR
// un := CreateHuman ;
80603: LD_ADDR_VAR 0 2
80607: PUSH
80608: CALL_OW 44
80612: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
80613: LD_VAR 0 2
80617: PPUSH
80618: LD_INT 1
80620: PPUSH
80621: CALL_OW 51
// tmp := tmp ^ un ;
80625: LD_ADDR_VAR 0 3
80629: PUSH
80630: LD_VAR 0 3
80634: PUSH
80635: LD_VAR 0 2
80639: ADD
80640: ST_TO_ADDR
// end ;
80641: GO 80537
80643: POP
80644: POP
// repeat wait ( 0 0$1 ) ;
80645: LD_INT 35
80647: PPUSH
80648: CALL_OW 67
// for un in tmp do
80652: LD_ADDR_VAR 0 2
80656: PUSH
80657: LD_VAR 0 3
80661: PUSH
80662: FOR_IN
80663: IFFALSE 80737
// begin if IsDead ( un ) then
80665: LD_VAR 0 2
80669: PPUSH
80670: CALL_OW 301
80674: IFFALSE 80694
// begin tmp := tmp diff un ;
80676: LD_ADDR_VAR 0 3
80680: PUSH
80681: LD_VAR 0 3
80685: PUSH
80686: LD_VAR 0 2
80690: DIFF
80691: ST_TO_ADDR
// continue ;
80692: GO 80662
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
80694: LD_VAR 0 2
80698: PPUSH
80699: LD_INT 3
80701: PUSH
80702: LD_INT 22
80704: PUSH
80705: LD_INT 0
80707: PUSH
80708: EMPTY
80709: LIST
80710: LIST
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: PPUSH
80716: CALL_OW 69
80720: PPUSH
80721: LD_VAR 0 2
80725: PPUSH
80726: CALL_OW 74
80730: PPUSH
80731: CALL_OW 115
// end ;
80735: GO 80662
80737: POP
80738: POP
// until not tmp ;
80739: LD_VAR 0 3
80743: NOT
80744: IFFALSE 80645
// end ;
80746: PPOPN 3
80748: END
// every 0 0$1 trigger StreamModeActive and sTroll do
80749: LD_EXP 64
80753: PUSH
80754: LD_EXP 89
80758: AND
80759: IFFALSE 80813
80761: GO 80763
80763: DISABLE
// begin ToLua ( displayTroll(); ) ;
80764: LD_STRING displayTroll();
80766: PPUSH
80767: CALL_OW 559
// wait ( 3 3$00 ) ;
80771: LD_INT 6300
80773: PPUSH
80774: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80778: LD_STRING hideTroll();
80780: PPUSH
80781: CALL_OW 559
// wait ( 1 1$00 ) ;
80785: LD_INT 2100
80787: PPUSH
80788: CALL_OW 67
// ToLua ( displayTroll(); ) ;
80792: LD_STRING displayTroll();
80794: PPUSH
80795: CALL_OW 559
// wait ( 1 1$00 ) ;
80799: LD_INT 2100
80801: PPUSH
80802: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80806: LD_STRING hideTroll();
80808: PPUSH
80809: CALL_OW 559
// end ;
80813: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
80814: LD_EXP 64
80818: PUSH
80819: LD_EXP 90
80823: AND
80824: IFFALSE 80887
80826: GO 80828
80828: DISABLE
80829: LD_INT 0
80831: PPUSH
// begin p := 0 ;
80832: LD_ADDR_VAR 0 1
80836: PUSH
80837: LD_INT 0
80839: ST_TO_ADDR
// repeat game_speed := 1 ;
80840: LD_ADDR_OWVAR 65
80844: PUSH
80845: LD_INT 1
80847: ST_TO_ADDR
// wait ( 0 0$1 ) ;
80848: LD_INT 35
80850: PPUSH
80851: CALL_OW 67
// p := p + 1 ;
80855: LD_ADDR_VAR 0 1
80859: PUSH
80860: LD_VAR 0 1
80864: PUSH
80865: LD_INT 1
80867: PLUS
80868: ST_TO_ADDR
// until p >= 60 ;
80869: LD_VAR 0 1
80873: PUSH
80874: LD_INT 60
80876: GREATEREQUAL
80877: IFFALSE 80840
// game_speed := 4 ;
80879: LD_ADDR_OWVAR 65
80883: PUSH
80884: LD_INT 4
80886: ST_TO_ADDR
// end ;
80887: PPOPN 1
80889: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
80890: LD_EXP 64
80894: PUSH
80895: LD_EXP 91
80899: AND
80900: IFFALSE 81046
80902: GO 80904
80904: DISABLE
80905: LD_INT 0
80907: PPUSH
80908: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80909: LD_ADDR_VAR 0 1
80913: PUSH
80914: LD_INT 22
80916: PUSH
80917: LD_OWVAR 2
80921: PUSH
80922: EMPTY
80923: LIST
80924: LIST
80925: PUSH
80926: LD_INT 2
80928: PUSH
80929: LD_INT 30
80931: PUSH
80932: LD_INT 0
80934: PUSH
80935: EMPTY
80936: LIST
80937: LIST
80938: PUSH
80939: LD_INT 30
80941: PUSH
80942: LD_INT 1
80944: PUSH
80945: EMPTY
80946: LIST
80947: LIST
80948: PUSH
80949: EMPTY
80950: LIST
80951: LIST
80952: LIST
80953: PUSH
80954: EMPTY
80955: LIST
80956: LIST
80957: PPUSH
80958: CALL_OW 69
80962: ST_TO_ADDR
// if not depot then
80963: LD_VAR 0 1
80967: NOT
80968: IFFALSE 80972
// exit ;
80970: GO 81046
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
80972: LD_ADDR_VAR 0 2
80976: PUSH
80977: LD_VAR 0 1
80981: PUSH
80982: LD_INT 1
80984: PPUSH
80985: LD_VAR 0 1
80989: PPUSH
80990: CALL_OW 12
80994: ARRAY
80995: PPUSH
80996: CALL_OW 274
81000: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
81001: LD_VAR 0 2
81005: PPUSH
81006: LD_INT 1
81008: PPUSH
81009: LD_INT 0
81011: PPUSH
81012: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
81016: LD_VAR 0 2
81020: PPUSH
81021: LD_INT 2
81023: PPUSH
81024: LD_INT 0
81026: PPUSH
81027: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
81031: LD_VAR 0 2
81035: PPUSH
81036: LD_INT 3
81038: PPUSH
81039: LD_INT 0
81041: PPUSH
81042: CALL_OW 277
// end ;
81046: PPOPN 2
81048: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
81049: LD_EXP 64
81053: PUSH
81054: LD_EXP 92
81058: AND
81059: IFFALSE 81156
81061: GO 81063
81063: DISABLE
81064: LD_INT 0
81066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81067: LD_ADDR_VAR 0 1
81071: PUSH
81072: LD_INT 22
81074: PUSH
81075: LD_OWVAR 2
81079: PUSH
81080: EMPTY
81081: LIST
81082: LIST
81083: PUSH
81084: LD_INT 21
81086: PUSH
81087: LD_INT 1
81089: PUSH
81090: EMPTY
81091: LIST
81092: LIST
81093: PUSH
81094: LD_INT 3
81096: PUSH
81097: LD_INT 23
81099: PUSH
81100: LD_INT 0
81102: PUSH
81103: EMPTY
81104: LIST
81105: LIST
81106: PUSH
81107: EMPTY
81108: LIST
81109: LIST
81110: PUSH
81111: EMPTY
81112: LIST
81113: LIST
81114: LIST
81115: PPUSH
81116: CALL_OW 69
81120: ST_TO_ADDR
// if not tmp then
81121: LD_VAR 0 1
81125: NOT
81126: IFFALSE 81130
// exit ;
81128: GO 81156
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
81130: LD_VAR 0 1
81134: PUSH
81135: LD_INT 1
81137: PPUSH
81138: LD_VAR 0 1
81142: PPUSH
81143: CALL_OW 12
81147: ARRAY
81148: PPUSH
81149: LD_INT 200
81151: PPUSH
81152: CALL_OW 234
// end ;
81156: PPOPN 1
81158: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
81159: LD_EXP 64
81163: PUSH
81164: LD_EXP 93
81168: AND
81169: IFFALSE 81248
81171: GO 81173
81173: DISABLE
81174: LD_INT 0
81176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
81177: LD_ADDR_VAR 0 1
81181: PUSH
81182: LD_INT 22
81184: PUSH
81185: LD_OWVAR 2
81189: PUSH
81190: EMPTY
81191: LIST
81192: LIST
81193: PUSH
81194: LD_INT 21
81196: PUSH
81197: LD_INT 2
81199: PUSH
81200: EMPTY
81201: LIST
81202: LIST
81203: PUSH
81204: EMPTY
81205: LIST
81206: LIST
81207: PPUSH
81208: CALL_OW 69
81212: ST_TO_ADDR
// if not tmp then
81213: LD_VAR 0 1
81217: NOT
81218: IFFALSE 81222
// exit ;
81220: GO 81248
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
81222: LD_VAR 0 1
81226: PUSH
81227: LD_INT 1
81229: PPUSH
81230: LD_VAR 0 1
81234: PPUSH
81235: CALL_OW 12
81239: ARRAY
81240: PPUSH
81241: LD_INT 60
81243: PPUSH
81244: CALL_OW 234
// end ;
81248: PPOPN 1
81250: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
81251: LD_EXP 64
81255: PUSH
81256: LD_EXP 94
81260: AND
81261: IFFALSE 81360
81263: GO 81265
81265: DISABLE
81266: LD_INT 0
81268: PPUSH
81269: PPUSH
// begin enable ;
81270: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
81271: LD_ADDR_VAR 0 1
81275: PUSH
81276: LD_INT 22
81278: PUSH
81279: LD_OWVAR 2
81283: PUSH
81284: EMPTY
81285: LIST
81286: LIST
81287: PUSH
81288: LD_INT 61
81290: PUSH
81291: EMPTY
81292: LIST
81293: PUSH
81294: LD_INT 33
81296: PUSH
81297: LD_INT 2
81299: PUSH
81300: EMPTY
81301: LIST
81302: LIST
81303: PUSH
81304: EMPTY
81305: LIST
81306: LIST
81307: LIST
81308: PPUSH
81309: CALL_OW 69
81313: ST_TO_ADDR
// if not tmp then
81314: LD_VAR 0 1
81318: NOT
81319: IFFALSE 81323
// exit ;
81321: GO 81360
// for i in tmp do
81323: LD_ADDR_VAR 0 2
81327: PUSH
81328: LD_VAR 0 1
81332: PUSH
81333: FOR_IN
81334: IFFALSE 81358
// if IsControledBy ( i ) then
81336: LD_VAR 0 2
81340: PPUSH
81341: CALL_OW 312
81345: IFFALSE 81356
// ComUnlink ( i ) ;
81347: LD_VAR 0 2
81351: PPUSH
81352: CALL_OW 136
81356: GO 81333
81358: POP
81359: POP
// end ;
81360: PPOPN 2
81362: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
81363: LD_EXP 64
81367: PUSH
81368: LD_EXP 95
81372: AND
81373: IFFALSE 81513
81375: GO 81377
81377: DISABLE
81378: LD_INT 0
81380: PPUSH
81381: PPUSH
// begin ToLua ( displayPowell(); ) ;
81382: LD_STRING displayPowell();
81384: PPUSH
81385: CALL_OW 559
// uc_side := 0 ;
81389: LD_ADDR_OWVAR 20
81393: PUSH
81394: LD_INT 0
81396: ST_TO_ADDR
// uc_nation := 2 ;
81397: LD_ADDR_OWVAR 21
81401: PUSH
81402: LD_INT 2
81404: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
81405: LD_ADDR_OWVAR 37
81409: PUSH
81410: LD_INT 14
81412: ST_TO_ADDR
// vc_engine := engine_siberite ;
81413: LD_ADDR_OWVAR 39
81417: PUSH
81418: LD_INT 3
81420: ST_TO_ADDR
// vc_control := control_apeman ;
81421: LD_ADDR_OWVAR 38
81425: PUSH
81426: LD_INT 5
81428: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
81429: LD_ADDR_OWVAR 40
81433: PUSH
81434: LD_INT 29
81436: ST_TO_ADDR
// un := CreateVehicle ;
81437: LD_ADDR_VAR 0 2
81441: PUSH
81442: CALL_OW 45
81446: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81447: LD_VAR 0 2
81451: PPUSH
81452: LD_INT 1
81454: PPUSH
81455: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81459: LD_INT 35
81461: PPUSH
81462: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81466: LD_VAR 0 2
81470: PPUSH
81471: LD_INT 22
81473: PUSH
81474: LD_OWVAR 2
81478: PUSH
81479: EMPTY
81480: LIST
81481: LIST
81482: PPUSH
81483: CALL_OW 69
81487: PPUSH
81488: LD_VAR 0 2
81492: PPUSH
81493: CALL_OW 74
81497: PPUSH
81498: CALL_OW 115
// until IsDead ( un ) ;
81502: LD_VAR 0 2
81506: PPUSH
81507: CALL_OW 301
81511: IFFALSE 81459
// end ;
81513: PPOPN 2
81515: END
// every 0 0$1 trigger StreamModeActive and sStu do
81516: LD_EXP 64
81520: PUSH
81521: LD_EXP 103
81525: AND
81526: IFFALSE 81542
81528: GO 81530
81530: DISABLE
// begin ToLua ( displayStucuk(); ) ;
81531: LD_STRING displayStucuk();
81533: PPUSH
81534: CALL_OW 559
// ResetFog ;
81538: CALL_OW 335
// end ;
81542: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
81543: LD_EXP 64
81547: PUSH
81548: LD_EXP 96
81552: AND
81553: IFFALSE 81694
81555: GO 81557
81557: DISABLE
81558: LD_INT 0
81560: PPUSH
81561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81562: LD_ADDR_VAR 0 2
81566: PUSH
81567: LD_INT 22
81569: PUSH
81570: LD_OWVAR 2
81574: PUSH
81575: EMPTY
81576: LIST
81577: LIST
81578: PUSH
81579: LD_INT 21
81581: PUSH
81582: LD_INT 1
81584: PUSH
81585: EMPTY
81586: LIST
81587: LIST
81588: PUSH
81589: EMPTY
81590: LIST
81591: LIST
81592: PPUSH
81593: CALL_OW 69
81597: ST_TO_ADDR
// if not tmp then
81598: LD_VAR 0 2
81602: NOT
81603: IFFALSE 81607
// exit ;
81605: GO 81694
// un := tmp [ rand ( 1 , tmp ) ] ;
81607: LD_ADDR_VAR 0 1
81611: PUSH
81612: LD_VAR 0 2
81616: PUSH
81617: LD_INT 1
81619: PPUSH
81620: LD_VAR 0 2
81624: PPUSH
81625: CALL_OW 12
81629: ARRAY
81630: ST_TO_ADDR
// SetSide ( un , 0 ) ;
81631: LD_VAR 0 1
81635: PPUSH
81636: LD_INT 0
81638: PPUSH
81639: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
81643: LD_VAR 0 1
81647: PPUSH
81648: LD_OWVAR 3
81652: PUSH
81653: LD_VAR 0 1
81657: DIFF
81658: PPUSH
81659: LD_VAR 0 1
81663: PPUSH
81664: CALL_OW 74
81668: PPUSH
81669: CALL_OW 115
// wait ( 0 0$20 ) ;
81673: LD_INT 700
81675: PPUSH
81676: CALL_OW 67
// SetSide ( un , your_side ) ;
81680: LD_VAR 0 1
81684: PPUSH
81685: LD_OWVAR 2
81689: PPUSH
81690: CALL_OW 235
// end ;
81694: PPOPN 2
81696: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
81697: LD_EXP 64
81701: PUSH
81702: LD_EXP 97
81706: AND
81707: IFFALSE 81813
81709: GO 81711
81711: DISABLE
81712: LD_INT 0
81714: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81715: LD_ADDR_VAR 0 1
81719: PUSH
81720: LD_INT 22
81722: PUSH
81723: LD_OWVAR 2
81727: PUSH
81728: EMPTY
81729: LIST
81730: LIST
81731: PUSH
81732: LD_INT 2
81734: PUSH
81735: LD_INT 30
81737: PUSH
81738: LD_INT 0
81740: PUSH
81741: EMPTY
81742: LIST
81743: LIST
81744: PUSH
81745: LD_INT 30
81747: PUSH
81748: LD_INT 1
81750: PUSH
81751: EMPTY
81752: LIST
81753: LIST
81754: PUSH
81755: EMPTY
81756: LIST
81757: LIST
81758: LIST
81759: PUSH
81760: EMPTY
81761: LIST
81762: LIST
81763: PPUSH
81764: CALL_OW 69
81768: ST_TO_ADDR
// if not depot then
81769: LD_VAR 0 1
81773: NOT
81774: IFFALSE 81778
// exit ;
81776: GO 81813
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
81778: LD_VAR 0 1
81782: PUSH
81783: LD_INT 1
81785: ARRAY
81786: PPUSH
81787: CALL_OW 250
81791: PPUSH
81792: LD_VAR 0 1
81796: PUSH
81797: LD_INT 1
81799: ARRAY
81800: PPUSH
81801: CALL_OW 251
81805: PPUSH
81806: LD_INT 70
81808: PPUSH
81809: CALL_OW 495
// end ;
81813: PPOPN 1
81815: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
81816: LD_EXP 64
81820: PUSH
81821: LD_EXP 98
81825: AND
81826: IFFALSE 82037
81828: GO 81830
81830: DISABLE
81831: LD_INT 0
81833: PPUSH
81834: PPUSH
81835: PPUSH
81836: PPUSH
81837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81838: LD_ADDR_VAR 0 5
81842: PUSH
81843: LD_INT 22
81845: PUSH
81846: LD_OWVAR 2
81850: PUSH
81851: EMPTY
81852: LIST
81853: LIST
81854: PUSH
81855: LD_INT 21
81857: PUSH
81858: LD_INT 1
81860: PUSH
81861: EMPTY
81862: LIST
81863: LIST
81864: PUSH
81865: EMPTY
81866: LIST
81867: LIST
81868: PPUSH
81869: CALL_OW 69
81873: ST_TO_ADDR
// if not tmp then
81874: LD_VAR 0 5
81878: NOT
81879: IFFALSE 81883
// exit ;
81881: GO 82037
// for i in tmp do
81883: LD_ADDR_VAR 0 1
81887: PUSH
81888: LD_VAR 0 5
81892: PUSH
81893: FOR_IN
81894: IFFALSE 82035
// begin d := rand ( 0 , 5 ) ;
81896: LD_ADDR_VAR 0 4
81900: PUSH
81901: LD_INT 0
81903: PPUSH
81904: LD_INT 5
81906: PPUSH
81907: CALL_OW 12
81911: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
81912: LD_ADDR_VAR 0 2
81916: PUSH
81917: LD_VAR 0 1
81921: PPUSH
81922: CALL_OW 250
81926: PPUSH
81927: LD_VAR 0 4
81931: PPUSH
81932: LD_INT 3
81934: PPUSH
81935: LD_INT 12
81937: PPUSH
81938: CALL_OW 12
81942: PPUSH
81943: CALL_OW 272
81947: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
81948: LD_ADDR_VAR 0 3
81952: PUSH
81953: LD_VAR 0 1
81957: PPUSH
81958: CALL_OW 251
81962: PPUSH
81963: LD_VAR 0 4
81967: PPUSH
81968: LD_INT 3
81970: PPUSH
81971: LD_INT 12
81973: PPUSH
81974: CALL_OW 12
81978: PPUSH
81979: CALL_OW 273
81983: ST_TO_ADDR
// if ValidHex ( x , y ) then
81984: LD_VAR 0 2
81988: PPUSH
81989: LD_VAR 0 3
81993: PPUSH
81994: CALL_OW 488
81998: IFFALSE 82033
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
82000: LD_VAR 0 1
82004: PPUSH
82005: LD_VAR 0 2
82009: PPUSH
82010: LD_VAR 0 3
82014: PPUSH
82015: LD_INT 3
82017: PPUSH
82018: LD_INT 6
82020: PPUSH
82021: CALL_OW 12
82025: PPUSH
82026: LD_INT 1
82028: PPUSH
82029: CALL_OW 483
// end ;
82033: GO 81893
82035: POP
82036: POP
// end ;
82037: PPOPN 5
82039: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
82040: LD_EXP 64
82044: PUSH
82045: LD_EXP 99
82049: AND
82050: IFFALSE 82144
82052: GO 82054
82054: DISABLE
82055: LD_INT 0
82057: PPUSH
82058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
82059: LD_ADDR_VAR 0 2
82063: PUSH
82064: LD_INT 22
82066: PUSH
82067: LD_OWVAR 2
82071: PUSH
82072: EMPTY
82073: LIST
82074: LIST
82075: PUSH
82076: LD_INT 32
82078: PUSH
82079: LD_INT 1
82081: PUSH
82082: EMPTY
82083: LIST
82084: LIST
82085: PUSH
82086: LD_INT 21
82088: PUSH
82089: LD_INT 2
82091: PUSH
82092: EMPTY
82093: LIST
82094: LIST
82095: PUSH
82096: EMPTY
82097: LIST
82098: LIST
82099: LIST
82100: PPUSH
82101: CALL_OW 69
82105: ST_TO_ADDR
// if not tmp then
82106: LD_VAR 0 2
82110: NOT
82111: IFFALSE 82115
// exit ;
82113: GO 82144
// for i in tmp do
82115: LD_ADDR_VAR 0 1
82119: PUSH
82120: LD_VAR 0 2
82124: PUSH
82125: FOR_IN
82126: IFFALSE 82142
// SetFuel ( i , 0 ) ;
82128: LD_VAR 0 1
82132: PPUSH
82133: LD_INT 0
82135: PPUSH
82136: CALL_OW 240
82140: GO 82125
82142: POP
82143: POP
// end ;
82144: PPOPN 2
82146: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
82147: LD_EXP 64
82151: PUSH
82152: LD_EXP 100
82156: AND
82157: IFFALSE 82223
82159: GO 82161
82161: DISABLE
82162: LD_INT 0
82164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82165: LD_ADDR_VAR 0 1
82169: PUSH
82170: LD_INT 22
82172: PUSH
82173: LD_OWVAR 2
82177: PUSH
82178: EMPTY
82179: LIST
82180: LIST
82181: PUSH
82182: LD_INT 30
82184: PUSH
82185: LD_INT 29
82187: PUSH
82188: EMPTY
82189: LIST
82190: LIST
82191: PUSH
82192: EMPTY
82193: LIST
82194: LIST
82195: PPUSH
82196: CALL_OW 69
82200: ST_TO_ADDR
// if not tmp then
82201: LD_VAR 0 1
82205: NOT
82206: IFFALSE 82210
// exit ;
82208: GO 82223
// DestroyUnit ( tmp [ 1 ] ) ;
82210: LD_VAR 0 1
82214: PUSH
82215: LD_INT 1
82217: ARRAY
82218: PPUSH
82219: CALL_OW 65
// end ;
82223: PPOPN 1
82225: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
82226: LD_EXP 64
82230: PUSH
82231: LD_EXP 102
82235: AND
82236: IFFALSE 82365
82238: GO 82240
82240: DISABLE
82241: LD_INT 0
82243: PPUSH
// begin uc_side := 0 ;
82244: LD_ADDR_OWVAR 20
82248: PUSH
82249: LD_INT 0
82251: ST_TO_ADDR
// uc_nation := nation_arabian ;
82252: LD_ADDR_OWVAR 21
82256: PUSH
82257: LD_INT 2
82259: ST_TO_ADDR
// hc_gallery :=  ;
82260: LD_ADDR_OWVAR 33
82264: PUSH
82265: LD_STRING 
82267: ST_TO_ADDR
// hc_name :=  ;
82268: LD_ADDR_OWVAR 26
82272: PUSH
82273: LD_STRING 
82275: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
82276: LD_INT 1
82278: PPUSH
82279: LD_INT 11
82281: PPUSH
82282: LD_INT 10
82284: PPUSH
82285: CALL_OW 380
// un := CreateHuman ;
82289: LD_ADDR_VAR 0 1
82293: PUSH
82294: CALL_OW 44
82298: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82299: LD_VAR 0 1
82303: PPUSH
82304: LD_INT 1
82306: PPUSH
82307: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82311: LD_INT 35
82313: PPUSH
82314: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82318: LD_VAR 0 1
82322: PPUSH
82323: LD_INT 22
82325: PUSH
82326: LD_OWVAR 2
82330: PUSH
82331: EMPTY
82332: LIST
82333: LIST
82334: PPUSH
82335: CALL_OW 69
82339: PPUSH
82340: LD_VAR 0 1
82344: PPUSH
82345: CALL_OW 74
82349: PPUSH
82350: CALL_OW 115
// until IsDead ( un ) ;
82354: LD_VAR 0 1
82358: PPUSH
82359: CALL_OW 301
82363: IFFALSE 82311
// end ;
82365: PPOPN 1
82367: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
82368: LD_EXP 64
82372: PUSH
82373: LD_EXP 104
82377: AND
82378: IFFALSE 82390
82380: GO 82382
82382: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
82383: LD_STRING earthquake(getX(game), 0, 32)
82385: PPUSH
82386: CALL_OW 559
82390: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
82391: LD_EXP 64
82395: PUSH
82396: LD_EXP 105
82400: AND
82401: IFFALSE 82492
82403: GO 82405
82405: DISABLE
82406: LD_INT 0
82408: PPUSH
// begin enable ;
82409: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
82410: LD_ADDR_VAR 0 1
82414: PUSH
82415: LD_INT 22
82417: PUSH
82418: LD_OWVAR 2
82422: PUSH
82423: EMPTY
82424: LIST
82425: LIST
82426: PUSH
82427: LD_INT 21
82429: PUSH
82430: LD_INT 2
82432: PUSH
82433: EMPTY
82434: LIST
82435: LIST
82436: PUSH
82437: LD_INT 33
82439: PUSH
82440: LD_INT 3
82442: PUSH
82443: EMPTY
82444: LIST
82445: LIST
82446: PUSH
82447: EMPTY
82448: LIST
82449: LIST
82450: LIST
82451: PPUSH
82452: CALL_OW 69
82456: ST_TO_ADDR
// if not tmp then
82457: LD_VAR 0 1
82461: NOT
82462: IFFALSE 82466
// exit ;
82464: GO 82492
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82466: LD_VAR 0 1
82470: PUSH
82471: LD_INT 1
82473: PPUSH
82474: LD_VAR 0 1
82478: PPUSH
82479: CALL_OW 12
82483: ARRAY
82484: PPUSH
82485: LD_INT 1
82487: PPUSH
82488: CALL_OW 234
// end ;
82492: PPOPN 1
82494: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
82495: LD_EXP 64
82499: PUSH
82500: LD_EXP 106
82504: AND
82505: IFFALSE 82646
82507: GO 82509
82509: DISABLE
82510: LD_INT 0
82512: PPUSH
82513: PPUSH
82514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82515: LD_ADDR_VAR 0 3
82519: PUSH
82520: LD_INT 22
82522: PUSH
82523: LD_OWVAR 2
82527: PUSH
82528: EMPTY
82529: LIST
82530: LIST
82531: PUSH
82532: LD_INT 25
82534: PUSH
82535: LD_INT 1
82537: PUSH
82538: EMPTY
82539: LIST
82540: LIST
82541: PUSH
82542: EMPTY
82543: LIST
82544: LIST
82545: PPUSH
82546: CALL_OW 69
82550: ST_TO_ADDR
// if not tmp then
82551: LD_VAR 0 3
82555: NOT
82556: IFFALSE 82560
// exit ;
82558: GO 82646
// un := tmp [ rand ( 1 , tmp ) ] ;
82560: LD_ADDR_VAR 0 2
82564: PUSH
82565: LD_VAR 0 3
82569: PUSH
82570: LD_INT 1
82572: PPUSH
82573: LD_VAR 0 3
82577: PPUSH
82578: CALL_OW 12
82582: ARRAY
82583: ST_TO_ADDR
// if Crawls ( un ) then
82584: LD_VAR 0 2
82588: PPUSH
82589: CALL_OW 318
82593: IFFALSE 82604
// ComWalk ( un ) ;
82595: LD_VAR 0 2
82599: PPUSH
82600: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
82604: LD_VAR 0 2
82608: PPUSH
82609: LD_INT 9
82611: PPUSH
82612: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
82616: LD_INT 28
82618: PPUSH
82619: LD_OWVAR 2
82623: PPUSH
82624: LD_INT 2
82626: PPUSH
82627: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
82631: LD_INT 29
82633: PPUSH
82634: LD_OWVAR 2
82638: PPUSH
82639: LD_INT 2
82641: PPUSH
82642: CALL_OW 322
// end ;
82646: PPOPN 3
82648: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
82649: LD_EXP 64
82653: PUSH
82654: LD_EXP 107
82658: AND
82659: IFFALSE 82770
82661: GO 82663
82663: DISABLE
82664: LD_INT 0
82666: PPUSH
82667: PPUSH
82668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82669: LD_ADDR_VAR 0 3
82673: PUSH
82674: LD_INT 22
82676: PUSH
82677: LD_OWVAR 2
82681: PUSH
82682: EMPTY
82683: LIST
82684: LIST
82685: PUSH
82686: LD_INT 25
82688: PUSH
82689: LD_INT 1
82691: PUSH
82692: EMPTY
82693: LIST
82694: LIST
82695: PUSH
82696: EMPTY
82697: LIST
82698: LIST
82699: PPUSH
82700: CALL_OW 69
82704: ST_TO_ADDR
// if not tmp then
82705: LD_VAR 0 3
82709: NOT
82710: IFFALSE 82714
// exit ;
82712: GO 82770
// un := tmp [ rand ( 1 , tmp ) ] ;
82714: LD_ADDR_VAR 0 2
82718: PUSH
82719: LD_VAR 0 3
82723: PUSH
82724: LD_INT 1
82726: PPUSH
82727: LD_VAR 0 3
82731: PPUSH
82732: CALL_OW 12
82736: ARRAY
82737: ST_TO_ADDR
// if Crawls ( un ) then
82738: LD_VAR 0 2
82742: PPUSH
82743: CALL_OW 318
82747: IFFALSE 82758
// ComWalk ( un ) ;
82749: LD_VAR 0 2
82753: PPUSH
82754: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82758: LD_VAR 0 2
82762: PPUSH
82763: LD_INT 8
82765: PPUSH
82766: CALL_OW 336
// end ;
82770: PPOPN 3
82772: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
82773: LD_EXP 64
82777: PUSH
82778: LD_EXP 108
82782: AND
82783: IFFALSE 82927
82785: GO 82787
82787: DISABLE
82788: LD_INT 0
82790: PPUSH
82791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
82792: LD_ADDR_VAR 0 2
82796: PUSH
82797: LD_INT 22
82799: PUSH
82800: LD_OWVAR 2
82804: PUSH
82805: EMPTY
82806: LIST
82807: LIST
82808: PUSH
82809: LD_INT 21
82811: PUSH
82812: LD_INT 2
82814: PUSH
82815: EMPTY
82816: LIST
82817: LIST
82818: PUSH
82819: LD_INT 2
82821: PUSH
82822: LD_INT 34
82824: PUSH
82825: LD_INT 12
82827: PUSH
82828: EMPTY
82829: LIST
82830: LIST
82831: PUSH
82832: LD_INT 34
82834: PUSH
82835: LD_INT 51
82837: PUSH
82838: EMPTY
82839: LIST
82840: LIST
82841: PUSH
82842: LD_INT 34
82844: PUSH
82845: LD_INT 32
82847: PUSH
82848: EMPTY
82849: LIST
82850: LIST
82851: PUSH
82852: EMPTY
82853: LIST
82854: LIST
82855: LIST
82856: LIST
82857: PUSH
82858: EMPTY
82859: LIST
82860: LIST
82861: LIST
82862: PPUSH
82863: CALL_OW 69
82867: ST_TO_ADDR
// if not tmp then
82868: LD_VAR 0 2
82872: NOT
82873: IFFALSE 82877
// exit ;
82875: GO 82927
// for i in tmp do
82877: LD_ADDR_VAR 0 1
82881: PUSH
82882: LD_VAR 0 2
82886: PUSH
82887: FOR_IN
82888: IFFALSE 82925
// if GetCargo ( i , mat_artifact ) = 0 then
82890: LD_VAR 0 1
82894: PPUSH
82895: LD_INT 4
82897: PPUSH
82898: CALL_OW 289
82902: PUSH
82903: LD_INT 0
82905: EQUAL
82906: IFFALSE 82923
// SetCargo ( i , mat_siberit , 100 ) ;
82908: LD_VAR 0 1
82912: PPUSH
82913: LD_INT 3
82915: PPUSH
82916: LD_INT 100
82918: PPUSH
82919: CALL_OW 290
82923: GO 82887
82925: POP
82926: POP
// end ;
82927: PPOPN 2
82929: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
82930: LD_EXP 64
82934: PUSH
82935: LD_EXP 109
82939: AND
82940: IFFALSE 83123
82942: GO 82944
82944: DISABLE
82945: LD_INT 0
82947: PPUSH
82948: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82949: LD_ADDR_VAR 0 2
82953: PUSH
82954: LD_INT 22
82956: PUSH
82957: LD_OWVAR 2
82961: PUSH
82962: EMPTY
82963: LIST
82964: LIST
82965: PPUSH
82966: CALL_OW 69
82970: ST_TO_ADDR
// if not tmp then
82971: LD_VAR 0 2
82975: NOT
82976: IFFALSE 82980
// exit ;
82978: GO 83123
// for i := 1 to 2 do
82980: LD_ADDR_VAR 0 1
82984: PUSH
82985: DOUBLE
82986: LD_INT 1
82988: DEC
82989: ST_TO_ADDR
82990: LD_INT 2
82992: PUSH
82993: FOR_TO
82994: IFFALSE 83121
// begin uc_side := your_side ;
82996: LD_ADDR_OWVAR 20
83000: PUSH
83001: LD_OWVAR 2
83005: ST_TO_ADDR
// uc_nation := nation_american ;
83006: LD_ADDR_OWVAR 21
83010: PUSH
83011: LD_INT 1
83013: ST_TO_ADDR
// vc_chassis := us_morphling ;
83014: LD_ADDR_OWVAR 37
83018: PUSH
83019: LD_INT 5
83021: ST_TO_ADDR
// vc_engine := engine_siberite ;
83022: LD_ADDR_OWVAR 39
83026: PUSH
83027: LD_INT 3
83029: ST_TO_ADDR
// vc_control := control_computer ;
83030: LD_ADDR_OWVAR 38
83034: PUSH
83035: LD_INT 3
83037: ST_TO_ADDR
// vc_weapon := us_double_laser ;
83038: LD_ADDR_OWVAR 40
83042: PUSH
83043: LD_INT 10
83045: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
83046: LD_VAR 0 2
83050: PUSH
83051: LD_INT 1
83053: ARRAY
83054: PPUSH
83055: CALL_OW 310
83059: NOT
83060: IFFALSE 83107
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
83062: CALL_OW 45
83066: PPUSH
83067: LD_VAR 0 2
83071: PUSH
83072: LD_INT 1
83074: ARRAY
83075: PPUSH
83076: CALL_OW 250
83080: PPUSH
83081: LD_VAR 0 2
83085: PUSH
83086: LD_INT 1
83088: ARRAY
83089: PPUSH
83090: CALL_OW 251
83094: PPUSH
83095: LD_INT 12
83097: PPUSH
83098: LD_INT 1
83100: PPUSH
83101: CALL_OW 50
83105: GO 83119
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
83107: CALL_OW 45
83111: PPUSH
83112: LD_INT 1
83114: PPUSH
83115: CALL_OW 51
// end ;
83119: GO 82993
83121: POP
83122: POP
// end ;
83123: PPOPN 2
83125: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
83126: LD_EXP 64
83130: PUSH
83131: LD_EXP 110
83135: AND
83136: IFFALSE 83358
83138: GO 83140
83140: DISABLE
83141: LD_INT 0
83143: PPUSH
83144: PPUSH
83145: PPUSH
83146: PPUSH
83147: PPUSH
83148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83149: LD_ADDR_VAR 0 6
83153: PUSH
83154: LD_INT 22
83156: PUSH
83157: LD_OWVAR 2
83161: PUSH
83162: EMPTY
83163: LIST
83164: LIST
83165: PUSH
83166: LD_INT 21
83168: PUSH
83169: LD_INT 1
83171: PUSH
83172: EMPTY
83173: LIST
83174: LIST
83175: PUSH
83176: LD_INT 3
83178: PUSH
83179: LD_INT 23
83181: PUSH
83182: LD_INT 0
83184: PUSH
83185: EMPTY
83186: LIST
83187: LIST
83188: PUSH
83189: EMPTY
83190: LIST
83191: LIST
83192: PUSH
83193: EMPTY
83194: LIST
83195: LIST
83196: LIST
83197: PPUSH
83198: CALL_OW 69
83202: ST_TO_ADDR
// if not tmp then
83203: LD_VAR 0 6
83207: NOT
83208: IFFALSE 83212
// exit ;
83210: GO 83358
// s1 := rand ( 1 , 4 ) ;
83212: LD_ADDR_VAR 0 2
83216: PUSH
83217: LD_INT 1
83219: PPUSH
83220: LD_INT 4
83222: PPUSH
83223: CALL_OW 12
83227: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
83228: LD_ADDR_VAR 0 4
83232: PUSH
83233: LD_VAR 0 6
83237: PUSH
83238: LD_INT 1
83240: ARRAY
83241: PPUSH
83242: LD_VAR 0 2
83246: PPUSH
83247: CALL_OW 259
83251: ST_TO_ADDR
// if s1 = 1 then
83252: LD_VAR 0 2
83256: PUSH
83257: LD_INT 1
83259: EQUAL
83260: IFFALSE 83280
// s2 := rand ( 2 , 4 ) else
83262: LD_ADDR_VAR 0 3
83266: PUSH
83267: LD_INT 2
83269: PPUSH
83270: LD_INT 4
83272: PPUSH
83273: CALL_OW 12
83277: ST_TO_ADDR
83278: GO 83288
// s2 := 1 ;
83280: LD_ADDR_VAR 0 3
83284: PUSH
83285: LD_INT 1
83287: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
83288: LD_ADDR_VAR 0 5
83292: PUSH
83293: LD_VAR 0 6
83297: PUSH
83298: LD_INT 1
83300: ARRAY
83301: PPUSH
83302: LD_VAR 0 3
83306: PPUSH
83307: CALL_OW 259
83311: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
83312: LD_VAR 0 6
83316: PUSH
83317: LD_INT 1
83319: ARRAY
83320: PPUSH
83321: LD_VAR 0 2
83325: PPUSH
83326: LD_VAR 0 5
83330: PPUSH
83331: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
83335: LD_VAR 0 6
83339: PUSH
83340: LD_INT 1
83342: ARRAY
83343: PPUSH
83344: LD_VAR 0 3
83348: PPUSH
83349: LD_VAR 0 4
83353: PPUSH
83354: CALL_OW 237
// end ;
83358: PPOPN 6
83360: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
83361: LD_EXP 64
83365: PUSH
83366: LD_EXP 111
83370: AND
83371: IFFALSE 83450
83373: GO 83375
83375: DISABLE
83376: LD_INT 0
83378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
83379: LD_ADDR_VAR 0 1
83383: PUSH
83384: LD_INT 22
83386: PUSH
83387: LD_OWVAR 2
83391: PUSH
83392: EMPTY
83393: LIST
83394: LIST
83395: PUSH
83396: LD_INT 30
83398: PUSH
83399: LD_INT 3
83401: PUSH
83402: EMPTY
83403: LIST
83404: LIST
83405: PUSH
83406: EMPTY
83407: LIST
83408: LIST
83409: PPUSH
83410: CALL_OW 69
83414: ST_TO_ADDR
// if not tmp then
83415: LD_VAR 0 1
83419: NOT
83420: IFFALSE 83424
// exit ;
83422: GO 83450
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83424: LD_VAR 0 1
83428: PUSH
83429: LD_INT 1
83431: PPUSH
83432: LD_VAR 0 1
83436: PPUSH
83437: CALL_OW 12
83441: ARRAY
83442: PPUSH
83443: LD_INT 1
83445: PPUSH
83446: CALL_OW 234
// end ;
83450: PPOPN 1
83452: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
83453: LD_EXP 64
83457: PUSH
83458: LD_EXP 112
83462: AND
83463: IFFALSE 83575
83465: GO 83467
83467: DISABLE
83468: LD_INT 0
83470: PPUSH
83471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
83472: LD_ADDR_VAR 0 2
83476: PUSH
83477: LD_INT 22
83479: PUSH
83480: LD_OWVAR 2
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: PUSH
83489: LD_INT 2
83491: PUSH
83492: LD_INT 30
83494: PUSH
83495: LD_INT 27
83497: PUSH
83498: EMPTY
83499: LIST
83500: LIST
83501: PUSH
83502: LD_INT 30
83504: PUSH
83505: LD_INT 26
83507: PUSH
83508: EMPTY
83509: LIST
83510: LIST
83511: PUSH
83512: LD_INT 30
83514: PUSH
83515: LD_INT 28
83517: PUSH
83518: EMPTY
83519: LIST
83520: LIST
83521: PUSH
83522: EMPTY
83523: LIST
83524: LIST
83525: LIST
83526: LIST
83527: PUSH
83528: EMPTY
83529: LIST
83530: LIST
83531: PPUSH
83532: CALL_OW 69
83536: ST_TO_ADDR
// if not tmp then
83537: LD_VAR 0 2
83541: NOT
83542: IFFALSE 83546
// exit ;
83544: GO 83575
// for i in tmp do
83546: LD_ADDR_VAR 0 1
83550: PUSH
83551: LD_VAR 0 2
83555: PUSH
83556: FOR_IN
83557: IFFALSE 83573
// SetLives ( i , 1 ) ;
83559: LD_VAR 0 1
83563: PPUSH
83564: LD_INT 1
83566: PPUSH
83567: CALL_OW 234
83571: GO 83556
83573: POP
83574: POP
// end ;
83575: PPOPN 2
83577: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
83578: LD_EXP 64
83582: PUSH
83583: LD_EXP 113
83587: AND
83588: IFFALSE 83875
83590: GO 83592
83592: DISABLE
83593: LD_INT 0
83595: PPUSH
83596: PPUSH
83597: PPUSH
// begin i := rand ( 1 , 7 ) ;
83598: LD_ADDR_VAR 0 1
83602: PUSH
83603: LD_INT 1
83605: PPUSH
83606: LD_INT 7
83608: PPUSH
83609: CALL_OW 12
83613: ST_TO_ADDR
// case i of 1 :
83614: LD_VAR 0 1
83618: PUSH
83619: LD_INT 1
83621: DOUBLE
83622: EQUAL
83623: IFTRUE 83627
83625: GO 83637
83627: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
83628: LD_STRING earthquake(getX(game), 0, 32)
83630: PPUSH
83631: CALL_OW 559
83635: GO 83875
83637: LD_INT 2
83639: DOUBLE
83640: EQUAL
83641: IFTRUE 83645
83643: GO 83659
83645: POP
// begin ToLua ( displayStucuk(); ) ;
83646: LD_STRING displayStucuk();
83648: PPUSH
83649: CALL_OW 559
// ResetFog ;
83653: CALL_OW 335
// end ; 3 :
83657: GO 83875
83659: LD_INT 3
83661: DOUBLE
83662: EQUAL
83663: IFTRUE 83667
83665: GO 83771
83667: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83668: LD_ADDR_VAR 0 2
83672: PUSH
83673: LD_INT 22
83675: PUSH
83676: LD_OWVAR 2
83680: PUSH
83681: EMPTY
83682: LIST
83683: LIST
83684: PUSH
83685: LD_INT 25
83687: PUSH
83688: LD_INT 1
83690: PUSH
83691: EMPTY
83692: LIST
83693: LIST
83694: PUSH
83695: EMPTY
83696: LIST
83697: LIST
83698: PPUSH
83699: CALL_OW 69
83703: ST_TO_ADDR
// if not tmp then
83704: LD_VAR 0 2
83708: NOT
83709: IFFALSE 83713
// exit ;
83711: GO 83875
// un := tmp [ rand ( 1 , tmp ) ] ;
83713: LD_ADDR_VAR 0 3
83717: PUSH
83718: LD_VAR 0 2
83722: PUSH
83723: LD_INT 1
83725: PPUSH
83726: LD_VAR 0 2
83730: PPUSH
83731: CALL_OW 12
83735: ARRAY
83736: ST_TO_ADDR
// if Crawls ( un ) then
83737: LD_VAR 0 3
83741: PPUSH
83742: CALL_OW 318
83746: IFFALSE 83757
// ComWalk ( un ) ;
83748: LD_VAR 0 3
83752: PPUSH
83753: CALL_OW 138
// SetClass ( un , class_mortar ) ;
83757: LD_VAR 0 3
83761: PPUSH
83762: LD_INT 8
83764: PPUSH
83765: CALL_OW 336
// end ; 4 :
83769: GO 83875
83771: LD_INT 4
83773: DOUBLE
83774: EQUAL
83775: IFTRUE 83779
83777: GO 83853
83779: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83780: LD_ADDR_VAR 0 2
83784: PUSH
83785: LD_INT 22
83787: PUSH
83788: LD_OWVAR 2
83792: PUSH
83793: EMPTY
83794: LIST
83795: LIST
83796: PUSH
83797: LD_INT 30
83799: PUSH
83800: LD_INT 29
83802: PUSH
83803: EMPTY
83804: LIST
83805: LIST
83806: PUSH
83807: EMPTY
83808: LIST
83809: LIST
83810: PPUSH
83811: CALL_OW 69
83815: ST_TO_ADDR
// if not tmp then
83816: LD_VAR 0 2
83820: NOT
83821: IFFALSE 83825
// exit ;
83823: GO 83875
// CenterNowOnUnits ( tmp [ 1 ] ) ;
83825: LD_VAR 0 2
83829: PUSH
83830: LD_INT 1
83832: ARRAY
83833: PPUSH
83834: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
83838: LD_VAR 0 2
83842: PUSH
83843: LD_INT 1
83845: ARRAY
83846: PPUSH
83847: CALL_OW 65
// end ; 5 .. 7 :
83851: GO 83875
83853: LD_INT 5
83855: DOUBLE
83856: GREATEREQUAL
83857: IFFALSE 83865
83859: LD_INT 7
83861: DOUBLE
83862: LESSEQUAL
83863: IFTRUE 83867
83865: GO 83874
83867: POP
// StreamSibBomb ; end ;
83868: CALL 80112 0 0
83872: GO 83875
83874: POP
// end ;
83875: PPOPN 3
83877: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
83878: LD_EXP 64
83882: PUSH
83883: LD_EXP 114
83887: AND
83888: IFFALSE 84044
83890: GO 83892
83892: DISABLE
83893: LD_INT 0
83895: PPUSH
83896: PPUSH
83897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
83898: LD_ADDR_VAR 0 2
83902: PUSH
83903: LD_INT 81
83905: PUSH
83906: LD_OWVAR 2
83910: PUSH
83911: EMPTY
83912: LIST
83913: LIST
83914: PUSH
83915: LD_INT 2
83917: PUSH
83918: LD_INT 21
83920: PUSH
83921: LD_INT 1
83923: PUSH
83924: EMPTY
83925: LIST
83926: LIST
83927: PUSH
83928: LD_INT 21
83930: PUSH
83931: LD_INT 2
83933: PUSH
83934: EMPTY
83935: LIST
83936: LIST
83937: PUSH
83938: EMPTY
83939: LIST
83940: LIST
83941: LIST
83942: PUSH
83943: EMPTY
83944: LIST
83945: LIST
83946: PPUSH
83947: CALL_OW 69
83951: ST_TO_ADDR
// if not tmp then
83952: LD_VAR 0 2
83956: NOT
83957: IFFALSE 83961
// exit ;
83959: GO 84044
// p := 0 ;
83961: LD_ADDR_VAR 0 3
83965: PUSH
83966: LD_INT 0
83968: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83969: LD_INT 35
83971: PPUSH
83972: CALL_OW 67
// p := p + 1 ;
83976: LD_ADDR_VAR 0 3
83980: PUSH
83981: LD_VAR 0 3
83985: PUSH
83986: LD_INT 1
83988: PLUS
83989: ST_TO_ADDR
// for i in tmp do
83990: LD_ADDR_VAR 0 1
83994: PUSH
83995: LD_VAR 0 2
83999: PUSH
84000: FOR_IN
84001: IFFALSE 84032
// if GetLives ( i ) < 1000 then
84003: LD_VAR 0 1
84007: PPUSH
84008: CALL_OW 256
84012: PUSH
84013: LD_INT 1000
84015: LESS
84016: IFFALSE 84030
// SetLives ( i , 1000 ) ;
84018: LD_VAR 0 1
84022: PPUSH
84023: LD_INT 1000
84025: PPUSH
84026: CALL_OW 234
84030: GO 84000
84032: POP
84033: POP
// until p > 20 ;
84034: LD_VAR 0 3
84038: PUSH
84039: LD_INT 20
84041: GREATER
84042: IFFALSE 83969
// end ;
84044: PPOPN 3
84046: END
// every 0 0$1 trigger StreamModeActive and sTime do
84047: LD_EXP 64
84051: PUSH
84052: LD_EXP 115
84056: AND
84057: IFFALSE 84092
84059: GO 84061
84061: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
84062: LD_INT 28
84064: PPUSH
84065: LD_OWVAR 2
84069: PPUSH
84070: LD_INT 2
84072: PPUSH
84073: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
84077: LD_INT 30
84079: PPUSH
84080: LD_OWVAR 2
84084: PPUSH
84085: LD_INT 2
84087: PPUSH
84088: CALL_OW 322
// end ;
84092: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
84093: LD_EXP 64
84097: PUSH
84098: LD_EXP 116
84102: AND
84103: IFFALSE 84224
84105: GO 84107
84107: DISABLE
84108: LD_INT 0
84110: PPUSH
84111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84112: LD_ADDR_VAR 0 2
84116: PUSH
84117: LD_INT 22
84119: PUSH
84120: LD_OWVAR 2
84124: PUSH
84125: EMPTY
84126: LIST
84127: LIST
84128: PUSH
84129: LD_INT 21
84131: PUSH
84132: LD_INT 1
84134: PUSH
84135: EMPTY
84136: LIST
84137: LIST
84138: PUSH
84139: LD_INT 3
84141: PUSH
84142: LD_INT 23
84144: PUSH
84145: LD_INT 0
84147: PUSH
84148: EMPTY
84149: LIST
84150: LIST
84151: PUSH
84152: EMPTY
84153: LIST
84154: LIST
84155: PUSH
84156: EMPTY
84157: LIST
84158: LIST
84159: LIST
84160: PPUSH
84161: CALL_OW 69
84165: ST_TO_ADDR
// if not tmp then
84166: LD_VAR 0 2
84170: NOT
84171: IFFALSE 84175
// exit ;
84173: GO 84224
// for i in tmp do
84175: LD_ADDR_VAR 0 1
84179: PUSH
84180: LD_VAR 0 2
84184: PUSH
84185: FOR_IN
84186: IFFALSE 84222
// begin if Crawls ( i ) then
84188: LD_VAR 0 1
84192: PPUSH
84193: CALL_OW 318
84197: IFFALSE 84208
// ComWalk ( i ) ;
84199: LD_VAR 0 1
84203: PPUSH
84204: CALL_OW 138
// SetClass ( i , 2 ) ;
84208: LD_VAR 0 1
84212: PPUSH
84213: LD_INT 2
84215: PPUSH
84216: CALL_OW 336
// end ;
84220: GO 84185
84222: POP
84223: POP
// end ;
84224: PPOPN 2
84226: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
84227: LD_EXP 64
84231: PUSH
84232: LD_EXP 117
84236: AND
84237: IFFALSE 84525
84239: GO 84241
84241: DISABLE
84242: LD_INT 0
84244: PPUSH
84245: PPUSH
84246: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
84247: LD_OWVAR 2
84251: PPUSH
84252: LD_INT 9
84254: PPUSH
84255: LD_INT 1
84257: PPUSH
84258: LD_INT 1
84260: PPUSH
84261: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
84265: LD_INT 9
84267: PPUSH
84268: LD_OWVAR 2
84272: PPUSH
84273: CALL_OW 343
// uc_side := 9 ;
84277: LD_ADDR_OWVAR 20
84281: PUSH
84282: LD_INT 9
84284: ST_TO_ADDR
// uc_nation := 2 ;
84285: LD_ADDR_OWVAR 21
84289: PUSH
84290: LD_INT 2
84292: ST_TO_ADDR
// hc_name := Dark Warrior ;
84293: LD_ADDR_OWVAR 26
84297: PUSH
84298: LD_STRING Dark Warrior
84300: ST_TO_ADDR
// hc_gallery :=  ;
84301: LD_ADDR_OWVAR 33
84305: PUSH
84306: LD_STRING 
84308: ST_TO_ADDR
// hc_noskilllimit := true ;
84309: LD_ADDR_OWVAR 76
84313: PUSH
84314: LD_INT 1
84316: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
84317: LD_ADDR_OWVAR 31
84321: PUSH
84322: LD_INT 30
84324: PUSH
84325: LD_INT 30
84327: PUSH
84328: LD_INT 30
84330: PUSH
84331: LD_INT 30
84333: PUSH
84334: EMPTY
84335: LIST
84336: LIST
84337: LIST
84338: LIST
84339: ST_TO_ADDR
// un := CreateHuman ;
84340: LD_ADDR_VAR 0 3
84344: PUSH
84345: CALL_OW 44
84349: ST_TO_ADDR
// hc_noskilllimit := false ;
84350: LD_ADDR_OWVAR 76
84354: PUSH
84355: LD_INT 0
84357: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
84358: LD_VAR 0 3
84362: PPUSH
84363: LD_INT 1
84365: PPUSH
84366: CALL_OW 51
// ToLua ( playRanger() ) ;
84370: LD_STRING playRanger()
84372: PPUSH
84373: CALL_OW 559
// p := 0 ;
84377: LD_ADDR_VAR 0 2
84381: PUSH
84382: LD_INT 0
84384: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
84385: LD_INT 35
84387: PPUSH
84388: CALL_OW 67
// p := p + 1 ;
84392: LD_ADDR_VAR 0 2
84396: PUSH
84397: LD_VAR 0 2
84401: PUSH
84402: LD_INT 1
84404: PLUS
84405: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
84406: LD_VAR 0 3
84410: PPUSH
84411: CALL_OW 256
84415: PUSH
84416: LD_INT 1000
84418: LESS
84419: IFFALSE 84433
// SetLives ( un , 1000 ) ;
84421: LD_VAR 0 3
84425: PPUSH
84426: LD_INT 1000
84428: PPUSH
84429: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
84433: LD_VAR 0 3
84437: PPUSH
84438: LD_INT 81
84440: PUSH
84441: LD_OWVAR 2
84445: PUSH
84446: EMPTY
84447: LIST
84448: LIST
84449: PUSH
84450: LD_INT 91
84452: PUSH
84453: LD_VAR 0 3
84457: PUSH
84458: LD_INT 30
84460: PUSH
84461: EMPTY
84462: LIST
84463: LIST
84464: LIST
84465: PUSH
84466: EMPTY
84467: LIST
84468: LIST
84469: PPUSH
84470: CALL_OW 69
84474: PPUSH
84475: LD_VAR 0 3
84479: PPUSH
84480: CALL_OW 74
84484: PPUSH
84485: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
84489: LD_VAR 0 2
84493: PUSH
84494: LD_INT 80
84496: GREATER
84497: PUSH
84498: LD_VAR 0 3
84502: PPUSH
84503: CALL_OW 301
84507: OR
84508: IFFALSE 84385
// if un then
84510: LD_VAR 0 3
84514: IFFALSE 84525
// RemoveUnit ( un ) ;
84516: LD_VAR 0 3
84520: PPUSH
84521: CALL_OW 64
// end ;
84525: PPOPN 3
84527: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
84528: LD_EXP 118
84532: IFFALSE 84648
84534: GO 84536
84536: DISABLE
84537: LD_INT 0
84539: PPUSH
84540: PPUSH
84541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
84542: LD_ADDR_VAR 0 2
84546: PUSH
84547: LD_INT 81
84549: PUSH
84550: LD_OWVAR 2
84554: PUSH
84555: EMPTY
84556: LIST
84557: LIST
84558: PUSH
84559: LD_INT 21
84561: PUSH
84562: LD_INT 1
84564: PUSH
84565: EMPTY
84566: LIST
84567: LIST
84568: PUSH
84569: EMPTY
84570: LIST
84571: LIST
84572: PPUSH
84573: CALL_OW 69
84577: ST_TO_ADDR
// ToLua ( playComputer() ) ;
84578: LD_STRING playComputer()
84580: PPUSH
84581: CALL_OW 559
// if not tmp then
84585: LD_VAR 0 2
84589: NOT
84590: IFFALSE 84594
// exit ;
84592: GO 84648
// for i in tmp do
84594: LD_ADDR_VAR 0 1
84598: PUSH
84599: LD_VAR 0 2
84603: PUSH
84604: FOR_IN
84605: IFFALSE 84646
// for j := 1 to 4 do
84607: LD_ADDR_VAR 0 3
84611: PUSH
84612: DOUBLE
84613: LD_INT 1
84615: DEC
84616: ST_TO_ADDR
84617: LD_INT 4
84619: PUSH
84620: FOR_TO
84621: IFFALSE 84642
// SetSkill ( i , j , 10 ) ;
84623: LD_VAR 0 1
84627: PPUSH
84628: LD_VAR 0 3
84632: PPUSH
84633: LD_INT 10
84635: PPUSH
84636: CALL_OW 237
84640: GO 84620
84642: POP
84643: POP
84644: GO 84604
84646: POP
84647: POP
// end ;
84648: PPOPN 3
84650: END
// every 0 0$1 trigger s30 do var i , tmp ;
84651: LD_EXP 119
84655: IFFALSE 84724
84657: GO 84659
84659: DISABLE
84660: LD_INT 0
84662: PPUSH
84663: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84664: LD_ADDR_VAR 0 2
84668: PUSH
84669: LD_INT 22
84671: PUSH
84672: LD_OWVAR 2
84676: PUSH
84677: EMPTY
84678: LIST
84679: LIST
84680: PPUSH
84681: CALL_OW 69
84685: ST_TO_ADDR
// if not tmp then
84686: LD_VAR 0 2
84690: NOT
84691: IFFALSE 84695
// exit ;
84693: GO 84724
// for i in tmp do
84695: LD_ADDR_VAR 0 1
84699: PUSH
84700: LD_VAR 0 2
84704: PUSH
84705: FOR_IN
84706: IFFALSE 84722
// SetLives ( i , 300 ) ;
84708: LD_VAR 0 1
84712: PPUSH
84713: LD_INT 300
84715: PPUSH
84716: CALL_OW 234
84720: GO 84705
84722: POP
84723: POP
// end ;
84724: PPOPN 2
84726: END
// every 0 0$1 trigger s60 do var i , tmp ;
84727: LD_EXP 120
84731: IFFALSE 84800
84733: GO 84735
84735: DISABLE
84736: LD_INT 0
84738: PPUSH
84739: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84740: LD_ADDR_VAR 0 2
84744: PUSH
84745: LD_INT 22
84747: PUSH
84748: LD_OWVAR 2
84752: PUSH
84753: EMPTY
84754: LIST
84755: LIST
84756: PPUSH
84757: CALL_OW 69
84761: ST_TO_ADDR
// if not tmp then
84762: LD_VAR 0 2
84766: NOT
84767: IFFALSE 84771
// exit ;
84769: GO 84800
// for i in tmp do
84771: LD_ADDR_VAR 0 1
84775: PUSH
84776: LD_VAR 0 2
84780: PUSH
84781: FOR_IN
84782: IFFALSE 84798
// SetLives ( i , 600 ) ;
84784: LD_VAR 0 1
84788: PPUSH
84789: LD_INT 600
84791: PPUSH
84792: CALL_OW 234
84796: GO 84781
84798: POP
84799: POP
// end ;
84800: PPOPN 2
84802: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
84803: LD_INT 0
84805: PPUSH
// case cmd of 301 :
84806: LD_VAR 0 1
84810: PUSH
84811: LD_INT 301
84813: DOUBLE
84814: EQUAL
84815: IFTRUE 84819
84817: GO 84851
84819: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
84820: LD_VAR 0 6
84824: PPUSH
84825: LD_VAR 0 7
84829: PPUSH
84830: LD_VAR 0 8
84834: PPUSH
84835: LD_VAR 0 4
84839: PPUSH
84840: LD_VAR 0 5
84844: PPUSH
84845: CALL 86060 0 5
84849: GO 84972
84851: LD_INT 302
84853: DOUBLE
84854: EQUAL
84855: IFTRUE 84859
84857: GO 84896
84859: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
84860: LD_VAR 0 6
84864: PPUSH
84865: LD_VAR 0 7
84869: PPUSH
84870: LD_VAR 0 8
84874: PPUSH
84875: LD_VAR 0 9
84879: PPUSH
84880: LD_VAR 0 4
84884: PPUSH
84885: LD_VAR 0 5
84889: PPUSH
84890: CALL 86151 0 6
84894: GO 84972
84896: LD_INT 303
84898: DOUBLE
84899: EQUAL
84900: IFTRUE 84904
84902: GO 84941
84904: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
84905: LD_VAR 0 6
84909: PPUSH
84910: LD_VAR 0 7
84914: PPUSH
84915: LD_VAR 0 8
84919: PPUSH
84920: LD_VAR 0 9
84924: PPUSH
84925: LD_VAR 0 4
84929: PPUSH
84930: LD_VAR 0 5
84934: PPUSH
84935: CALL 84977 0 6
84939: GO 84972
84941: LD_INT 304
84943: DOUBLE
84944: EQUAL
84945: IFTRUE 84949
84947: GO 84971
84949: POP
// hHackTeleport ( unit , x , y ) ; end ;
84950: LD_VAR 0 2
84954: PPUSH
84955: LD_VAR 0 4
84959: PPUSH
84960: LD_VAR 0 5
84964: PPUSH
84965: CALL 86744 0 3
84969: GO 84972
84971: POP
// end ;
84972: LD_VAR 0 12
84976: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
84977: LD_INT 0
84979: PPUSH
84980: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
84981: LD_VAR 0 1
84985: PUSH
84986: LD_INT 1
84988: LESS
84989: PUSH
84990: LD_VAR 0 1
84994: PUSH
84995: LD_INT 3
84997: GREATER
84998: OR
84999: PUSH
85000: LD_VAR 0 5
85004: PPUSH
85005: LD_VAR 0 6
85009: PPUSH
85010: CALL_OW 428
85014: OR
85015: IFFALSE 85019
// exit ;
85017: GO 85747
// uc_side := your_side ;
85019: LD_ADDR_OWVAR 20
85023: PUSH
85024: LD_OWVAR 2
85028: ST_TO_ADDR
// uc_nation := nation ;
85029: LD_ADDR_OWVAR 21
85033: PUSH
85034: LD_VAR 0 1
85038: ST_TO_ADDR
// bc_level = 1 ;
85039: LD_ADDR_OWVAR 43
85043: PUSH
85044: LD_INT 1
85046: ST_TO_ADDR
// case btype of 1 :
85047: LD_VAR 0 2
85051: PUSH
85052: LD_INT 1
85054: DOUBLE
85055: EQUAL
85056: IFTRUE 85060
85058: GO 85071
85060: POP
// bc_type := b_depot ; 2 :
85061: LD_ADDR_OWVAR 42
85065: PUSH
85066: LD_INT 0
85068: ST_TO_ADDR
85069: GO 85691
85071: LD_INT 2
85073: DOUBLE
85074: EQUAL
85075: IFTRUE 85079
85077: GO 85090
85079: POP
// bc_type := b_warehouse ; 3 :
85080: LD_ADDR_OWVAR 42
85084: PUSH
85085: LD_INT 1
85087: ST_TO_ADDR
85088: GO 85691
85090: LD_INT 3
85092: DOUBLE
85093: EQUAL
85094: IFTRUE 85098
85096: GO 85109
85098: POP
// bc_type := b_lab ; 4 .. 9 :
85099: LD_ADDR_OWVAR 42
85103: PUSH
85104: LD_INT 6
85106: ST_TO_ADDR
85107: GO 85691
85109: LD_INT 4
85111: DOUBLE
85112: GREATEREQUAL
85113: IFFALSE 85121
85115: LD_INT 9
85117: DOUBLE
85118: LESSEQUAL
85119: IFTRUE 85123
85121: GO 85183
85123: POP
// begin bc_type := b_lab_half ;
85124: LD_ADDR_OWVAR 42
85128: PUSH
85129: LD_INT 7
85131: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
85132: LD_ADDR_OWVAR 44
85136: PUSH
85137: LD_INT 10
85139: PUSH
85140: LD_INT 11
85142: PUSH
85143: LD_INT 12
85145: PUSH
85146: LD_INT 15
85148: PUSH
85149: LD_INT 14
85151: PUSH
85152: LD_INT 13
85154: PUSH
85155: EMPTY
85156: LIST
85157: LIST
85158: LIST
85159: LIST
85160: LIST
85161: LIST
85162: PUSH
85163: LD_VAR 0 2
85167: PUSH
85168: LD_INT 3
85170: MINUS
85171: ARRAY
85172: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
85173: LD_ADDR_OWVAR 45
85177: PUSH
85178: LD_INT 9
85180: ST_TO_ADDR
// end ; 10 .. 13 :
85181: GO 85691
85183: LD_INT 10
85185: DOUBLE
85186: GREATEREQUAL
85187: IFFALSE 85195
85189: LD_INT 13
85191: DOUBLE
85192: LESSEQUAL
85193: IFTRUE 85197
85195: GO 85274
85197: POP
// begin bc_type := b_lab_full ;
85198: LD_ADDR_OWVAR 42
85202: PUSH
85203: LD_INT 8
85205: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
85206: LD_ADDR_OWVAR 44
85210: PUSH
85211: LD_INT 10
85213: PUSH
85214: LD_INT 12
85216: PUSH
85217: LD_INT 14
85219: PUSH
85220: LD_INT 13
85222: PUSH
85223: EMPTY
85224: LIST
85225: LIST
85226: LIST
85227: LIST
85228: PUSH
85229: LD_VAR 0 2
85233: PUSH
85234: LD_INT 9
85236: MINUS
85237: ARRAY
85238: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
85239: LD_ADDR_OWVAR 45
85243: PUSH
85244: LD_INT 11
85246: PUSH
85247: LD_INT 15
85249: PUSH
85250: LD_INT 12
85252: PUSH
85253: LD_INT 15
85255: PUSH
85256: EMPTY
85257: LIST
85258: LIST
85259: LIST
85260: LIST
85261: PUSH
85262: LD_VAR 0 2
85266: PUSH
85267: LD_INT 9
85269: MINUS
85270: ARRAY
85271: ST_TO_ADDR
// end ; 14 :
85272: GO 85691
85274: LD_INT 14
85276: DOUBLE
85277: EQUAL
85278: IFTRUE 85282
85280: GO 85293
85282: POP
// bc_type := b_workshop ; 15 :
85283: LD_ADDR_OWVAR 42
85287: PUSH
85288: LD_INT 2
85290: ST_TO_ADDR
85291: GO 85691
85293: LD_INT 15
85295: DOUBLE
85296: EQUAL
85297: IFTRUE 85301
85299: GO 85312
85301: POP
// bc_type := b_factory ; 16 :
85302: LD_ADDR_OWVAR 42
85306: PUSH
85307: LD_INT 3
85309: ST_TO_ADDR
85310: GO 85691
85312: LD_INT 16
85314: DOUBLE
85315: EQUAL
85316: IFTRUE 85320
85318: GO 85331
85320: POP
// bc_type := b_ext_gun ; 17 :
85321: LD_ADDR_OWVAR 42
85325: PUSH
85326: LD_INT 17
85328: ST_TO_ADDR
85329: GO 85691
85331: LD_INT 17
85333: DOUBLE
85334: EQUAL
85335: IFTRUE 85339
85337: GO 85367
85339: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
85340: LD_ADDR_OWVAR 42
85344: PUSH
85345: LD_INT 19
85347: PUSH
85348: LD_INT 23
85350: PUSH
85351: LD_INT 19
85353: PUSH
85354: EMPTY
85355: LIST
85356: LIST
85357: LIST
85358: PUSH
85359: LD_VAR 0 1
85363: ARRAY
85364: ST_TO_ADDR
85365: GO 85691
85367: LD_INT 18
85369: DOUBLE
85370: EQUAL
85371: IFTRUE 85375
85373: GO 85386
85375: POP
// bc_type := b_ext_radar ; 19 :
85376: LD_ADDR_OWVAR 42
85380: PUSH
85381: LD_INT 20
85383: ST_TO_ADDR
85384: GO 85691
85386: LD_INT 19
85388: DOUBLE
85389: EQUAL
85390: IFTRUE 85394
85392: GO 85405
85394: POP
// bc_type := b_ext_radio ; 20 :
85395: LD_ADDR_OWVAR 42
85399: PUSH
85400: LD_INT 22
85402: ST_TO_ADDR
85403: GO 85691
85405: LD_INT 20
85407: DOUBLE
85408: EQUAL
85409: IFTRUE 85413
85411: GO 85424
85413: POP
// bc_type := b_ext_siberium ; 21 :
85414: LD_ADDR_OWVAR 42
85418: PUSH
85419: LD_INT 21
85421: ST_TO_ADDR
85422: GO 85691
85424: LD_INT 21
85426: DOUBLE
85427: EQUAL
85428: IFTRUE 85432
85430: GO 85443
85432: POP
// bc_type := b_ext_computer ; 22 :
85433: LD_ADDR_OWVAR 42
85437: PUSH
85438: LD_INT 24
85440: ST_TO_ADDR
85441: GO 85691
85443: LD_INT 22
85445: DOUBLE
85446: EQUAL
85447: IFTRUE 85451
85449: GO 85462
85451: POP
// bc_type := b_ext_track ; 23 :
85452: LD_ADDR_OWVAR 42
85456: PUSH
85457: LD_INT 16
85459: ST_TO_ADDR
85460: GO 85691
85462: LD_INT 23
85464: DOUBLE
85465: EQUAL
85466: IFTRUE 85470
85468: GO 85481
85470: POP
// bc_type := b_ext_laser ; 24 :
85471: LD_ADDR_OWVAR 42
85475: PUSH
85476: LD_INT 25
85478: ST_TO_ADDR
85479: GO 85691
85481: LD_INT 24
85483: DOUBLE
85484: EQUAL
85485: IFTRUE 85489
85487: GO 85500
85489: POP
// bc_type := b_control_tower ; 25 :
85490: LD_ADDR_OWVAR 42
85494: PUSH
85495: LD_INT 36
85497: ST_TO_ADDR
85498: GO 85691
85500: LD_INT 25
85502: DOUBLE
85503: EQUAL
85504: IFTRUE 85508
85506: GO 85519
85508: POP
// bc_type := b_breastwork ; 26 :
85509: LD_ADDR_OWVAR 42
85513: PUSH
85514: LD_INT 31
85516: ST_TO_ADDR
85517: GO 85691
85519: LD_INT 26
85521: DOUBLE
85522: EQUAL
85523: IFTRUE 85527
85525: GO 85538
85527: POP
// bc_type := b_bunker ; 27 :
85528: LD_ADDR_OWVAR 42
85532: PUSH
85533: LD_INT 32
85535: ST_TO_ADDR
85536: GO 85691
85538: LD_INT 27
85540: DOUBLE
85541: EQUAL
85542: IFTRUE 85546
85544: GO 85557
85546: POP
// bc_type := b_turret ; 28 :
85547: LD_ADDR_OWVAR 42
85551: PUSH
85552: LD_INT 33
85554: ST_TO_ADDR
85555: GO 85691
85557: LD_INT 28
85559: DOUBLE
85560: EQUAL
85561: IFTRUE 85565
85563: GO 85576
85565: POP
// bc_type := b_armoury ; 29 :
85566: LD_ADDR_OWVAR 42
85570: PUSH
85571: LD_INT 4
85573: ST_TO_ADDR
85574: GO 85691
85576: LD_INT 29
85578: DOUBLE
85579: EQUAL
85580: IFTRUE 85584
85582: GO 85595
85584: POP
// bc_type := b_barracks ; 30 :
85585: LD_ADDR_OWVAR 42
85589: PUSH
85590: LD_INT 5
85592: ST_TO_ADDR
85593: GO 85691
85595: LD_INT 30
85597: DOUBLE
85598: EQUAL
85599: IFTRUE 85603
85601: GO 85614
85603: POP
// bc_type := b_solar_power ; 31 :
85604: LD_ADDR_OWVAR 42
85608: PUSH
85609: LD_INT 27
85611: ST_TO_ADDR
85612: GO 85691
85614: LD_INT 31
85616: DOUBLE
85617: EQUAL
85618: IFTRUE 85622
85620: GO 85633
85622: POP
// bc_type := b_oil_power ; 32 :
85623: LD_ADDR_OWVAR 42
85627: PUSH
85628: LD_INT 26
85630: ST_TO_ADDR
85631: GO 85691
85633: LD_INT 32
85635: DOUBLE
85636: EQUAL
85637: IFTRUE 85641
85639: GO 85652
85641: POP
// bc_type := b_siberite_power ; 33 :
85642: LD_ADDR_OWVAR 42
85646: PUSH
85647: LD_INT 28
85649: ST_TO_ADDR
85650: GO 85691
85652: LD_INT 33
85654: DOUBLE
85655: EQUAL
85656: IFTRUE 85660
85658: GO 85671
85660: POP
// bc_type := b_oil_mine ; 34 :
85661: LD_ADDR_OWVAR 42
85665: PUSH
85666: LD_INT 29
85668: ST_TO_ADDR
85669: GO 85691
85671: LD_INT 34
85673: DOUBLE
85674: EQUAL
85675: IFTRUE 85679
85677: GO 85690
85679: POP
// bc_type := b_siberite_mine ; end ;
85680: LD_ADDR_OWVAR 42
85684: PUSH
85685: LD_INT 30
85687: ST_TO_ADDR
85688: GO 85691
85690: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
85691: LD_ADDR_VAR 0 8
85695: PUSH
85696: LD_VAR 0 5
85700: PPUSH
85701: LD_VAR 0 6
85705: PPUSH
85706: LD_VAR 0 3
85710: PPUSH
85711: CALL_OW 47
85715: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
85716: LD_OWVAR 42
85720: PUSH
85721: LD_INT 32
85723: PUSH
85724: LD_INT 33
85726: PUSH
85727: EMPTY
85728: LIST
85729: LIST
85730: IN
85731: IFFALSE 85747
// PlaceWeaponTurret ( b , weapon ) ;
85733: LD_VAR 0 8
85737: PPUSH
85738: LD_VAR 0 4
85742: PPUSH
85743: CALL_OW 431
// end ;
85747: LD_VAR 0 7
85751: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
85752: LD_INT 0
85754: PPUSH
85755: PPUSH
85756: PPUSH
85757: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85758: LD_ADDR_VAR 0 4
85762: PUSH
85763: LD_INT 22
85765: PUSH
85766: LD_OWVAR 2
85770: PUSH
85771: EMPTY
85772: LIST
85773: LIST
85774: PUSH
85775: LD_INT 2
85777: PUSH
85778: LD_INT 30
85780: PUSH
85781: LD_INT 0
85783: PUSH
85784: EMPTY
85785: LIST
85786: LIST
85787: PUSH
85788: LD_INT 30
85790: PUSH
85791: LD_INT 1
85793: PUSH
85794: EMPTY
85795: LIST
85796: LIST
85797: PUSH
85798: EMPTY
85799: LIST
85800: LIST
85801: LIST
85802: PUSH
85803: EMPTY
85804: LIST
85805: LIST
85806: PPUSH
85807: CALL_OW 69
85811: ST_TO_ADDR
// if not tmp then
85812: LD_VAR 0 4
85816: NOT
85817: IFFALSE 85821
// exit ;
85819: GO 85880
// for i in tmp do
85821: LD_ADDR_VAR 0 2
85825: PUSH
85826: LD_VAR 0 4
85830: PUSH
85831: FOR_IN
85832: IFFALSE 85878
// for j = 1 to 3 do
85834: LD_ADDR_VAR 0 3
85838: PUSH
85839: DOUBLE
85840: LD_INT 1
85842: DEC
85843: ST_TO_ADDR
85844: LD_INT 3
85846: PUSH
85847: FOR_TO
85848: IFFALSE 85874
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
85850: LD_VAR 0 2
85854: PPUSH
85855: CALL_OW 274
85859: PPUSH
85860: LD_VAR 0 3
85864: PPUSH
85865: LD_INT 99999
85867: PPUSH
85868: CALL_OW 277
85872: GO 85847
85874: POP
85875: POP
85876: GO 85831
85878: POP
85879: POP
// end ;
85880: LD_VAR 0 1
85884: RET
// export function hHackSetLevel10 ; var i , j ; begin
85885: LD_INT 0
85887: PPUSH
85888: PPUSH
85889: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85890: LD_ADDR_VAR 0 2
85894: PUSH
85895: LD_INT 21
85897: PUSH
85898: LD_INT 1
85900: PUSH
85901: EMPTY
85902: LIST
85903: LIST
85904: PPUSH
85905: CALL_OW 69
85909: PUSH
85910: FOR_IN
85911: IFFALSE 85963
// if IsSelected ( i ) then
85913: LD_VAR 0 2
85917: PPUSH
85918: CALL_OW 306
85922: IFFALSE 85961
// begin for j := 1 to 4 do
85924: LD_ADDR_VAR 0 3
85928: PUSH
85929: DOUBLE
85930: LD_INT 1
85932: DEC
85933: ST_TO_ADDR
85934: LD_INT 4
85936: PUSH
85937: FOR_TO
85938: IFFALSE 85959
// SetSkill ( i , j , 10 ) ;
85940: LD_VAR 0 2
85944: PPUSH
85945: LD_VAR 0 3
85949: PPUSH
85950: LD_INT 10
85952: PPUSH
85953: CALL_OW 237
85957: GO 85937
85959: POP
85960: POP
// end ;
85961: GO 85910
85963: POP
85964: POP
// end ;
85965: LD_VAR 0 1
85969: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
85970: LD_INT 0
85972: PPUSH
85973: PPUSH
85974: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
85975: LD_ADDR_VAR 0 2
85979: PUSH
85980: LD_INT 22
85982: PUSH
85983: LD_OWVAR 2
85987: PUSH
85988: EMPTY
85989: LIST
85990: LIST
85991: PUSH
85992: LD_INT 21
85994: PUSH
85995: LD_INT 1
85997: PUSH
85998: EMPTY
85999: LIST
86000: LIST
86001: PUSH
86002: EMPTY
86003: LIST
86004: LIST
86005: PPUSH
86006: CALL_OW 69
86010: PUSH
86011: FOR_IN
86012: IFFALSE 86053
// begin for j := 1 to 4 do
86014: LD_ADDR_VAR 0 3
86018: PUSH
86019: DOUBLE
86020: LD_INT 1
86022: DEC
86023: ST_TO_ADDR
86024: LD_INT 4
86026: PUSH
86027: FOR_TO
86028: IFFALSE 86049
// SetSkill ( i , j , 10 ) ;
86030: LD_VAR 0 2
86034: PPUSH
86035: LD_VAR 0 3
86039: PPUSH
86040: LD_INT 10
86042: PPUSH
86043: CALL_OW 237
86047: GO 86027
86049: POP
86050: POP
// end ;
86051: GO 86011
86053: POP
86054: POP
// end ;
86055: LD_VAR 0 1
86059: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
86060: LD_INT 0
86062: PPUSH
// uc_side := your_side ;
86063: LD_ADDR_OWVAR 20
86067: PUSH
86068: LD_OWVAR 2
86072: ST_TO_ADDR
// uc_nation := nation ;
86073: LD_ADDR_OWVAR 21
86077: PUSH
86078: LD_VAR 0 1
86082: ST_TO_ADDR
// InitHc ;
86083: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
86087: LD_INT 0
86089: PPUSH
86090: LD_VAR 0 2
86094: PPUSH
86095: LD_VAR 0 3
86099: PPUSH
86100: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
86104: LD_VAR 0 4
86108: PPUSH
86109: LD_VAR 0 5
86113: PPUSH
86114: CALL_OW 428
86118: PUSH
86119: LD_INT 0
86121: EQUAL
86122: IFFALSE 86146
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
86124: CALL_OW 44
86128: PPUSH
86129: LD_VAR 0 4
86133: PPUSH
86134: LD_VAR 0 5
86138: PPUSH
86139: LD_INT 1
86141: PPUSH
86142: CALL_OW 48
// end ;
86146: LD_VAR 0 6
86150: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
86151: LD_INT 0
86153: PPUSH
86154: PPUSH
// uc_side := your_side ;
86155: LD_ADDR_OWVAR 20
86159: PUSH
86160: LD_OWVAR 2
86164: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
86165: LD_VAR 0 1
86169: PUSH
86170: LD_INT 1
86172: PUSH
86173: LD_INT 2
86175: PUSH
86176: LD_INT 3
86178: PUSH
86179: LD_INT 4
86181: PUSH
86182: LD_INT 5
86184: PUSH
86185: EMPTY
86186: LIST
86187: LIST
86188: LIST
86189: LIST
86190: LIST
86191: IN
86192: IFFALSE 86204
// uc_nation := nation_american else
86194: LD_ADDR_OWVAR 21
86198: PUSH
86199: LD_INT 1
86201: ST_TO_ADDR
86202: GO 86247
// if chassis in [ 11 , 12 , 13 , 14 ] then
86204: LD_VAR 0 1
86208: PUSH
86209: LD_INT 11
86211: PUSH
86212: LD_INT 12
86214: PUSH
86215: LD_INT 13
86217: PUSH
86218: LD_INT 14
86220: PUSH
86221: EMPTY
86222: LIST
86223: LIST
86224: LIST
86225: LIST
86226: IN
86227: IFFALSE 86239
// uc_nation := nation_arabian else
86229: LD_ADDR_OWVAR 21
86233: PUSH
86234: LD_INT 2
86236: ST_TO_ADDR
86237: GO 86247
// uc_nation := nation_russian ;
86239: LD_ADDR_OWVAR 21
86243: PUSH
86244: LD_INT 3
86246: ST_TO_ADDR
// vc_chassis := chassis ;
86247: LD_ADDR_OWVAR 37
86251: PUSH
86252: LD_VAR 0 1
86256: ST_TO_ADDR
// vc_engine := engine ;
86257: LD_ADDR_OWVAR 39
86261: PUSH
86262: LD_VAR 0 2
86266: ST_TO_ADDR
// vc_control := control ;
86267: LD_ADDR_OWVAR 38
86271: PUSH
86272: LD_VAR 0 3
86276: ST_TO_ADDR
// vc_weapon := weapon ;
86277: LD_ADDR_OWVAR 40
86281: PUSH
86282: LD_VAR 0 4
86286: ST_TO_ADDR
// un := CreateVehicle ;
86287: LD_ADDR_VAR 0 8
86291: PUSH
86292: CALL_OW 45
86296: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
86297: LD_VAR 0 8
86301: PPUSH
86302: LD_INT 0
86304: PPUSH
86305: LD_INT 5
86307: PPUSH
86308: CALL_OW 12
86312: PPUSH
86313: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
86317: LD_VAR 0 8
86321: PPUSH
86322: LD_VAR 0 5
86326: PPUSH
86327: LD_VAR 0 6
86331: PPUSH
86332: LD_INT 1
86334: PPUSH
86335: CALL_OW 48
// end ;
86339: LD_VAR 0 7
86343: RET
// export hInvincible ; every 1 do
86344: GO 86346
86346: DISABLE
// hInvincible := [ ] ;
86347: LD_ADDR_EXP 121
86351: PUSH
86352: EMPTY
86353: ST_TO_ADDR
86354: END
// every 10 do var i ;
86355: GO 86357
86357: DISABLE
86358: LD_INT 0
86360: PPUSH
// begin enable ;
86361: ENABLE
// if not hInvincible then
86362: LD_EXP 121
86366: NOT
86367: IFFALSE 86371
// exit ;
86369: GO 86415
// for i in hInvincible do
86371: LD_ADDR_VAR 0 1
86375: PUSH
86376: LD_EXP 121
86380: PUSH
86381: FOR_IN
86382: IFFALSE 86413
// if GetLives ( i ) < 1000 then
86384: LD_VAR 0 1
86388: PPUSH
86389: CALL_OW 256
86393: PUSH
86394: LD_INT 1000
86396: LESS
86397: IFFALSE 86411
// SetLives ( i , 1000 ) ;
86399: LD_VAR 0 1
86403: PPUSH
86404: LD_INT 1000
86406: PPUSH
86407: CALL_OW 234
86411: GO 86381
86413: POP
86414: POP
// end ;
86415: PPOPN 1
86417: END
// export function hHackInvincible ; var i ; begin
86418: LD_INT 0
86420: PPUSH
86421: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
86422: LD_ADDR_VAR 0 2
86426: PUSH
86427: LD_INT 2
86429: PUSH
86430: LD_INT 21
86432: PUSH
86433: LD_INT 1
86435: PUSH
86436: EMPTY
86437: LIST
86438: LIST
86439: PUSH
86440: LD_INT 21
86442: PUSH
86443: LD_INT 2
86445: PUSH
86446: EMPTY
86447: LIST
86448: LIST
86449: PUSH
86450: EMPTY
86451: LIST
86452: LIST
86453: LIST
86454: PPUSH
86455: CALL_OW 69
86459: PUSH
86460: FOR_IN
86461: IFFALSE 86522
// if IsSelected ( i ) then
86463: LD_VAR 0 2
86467: PPUSH
86468: CALL_OW 306
86472: IFFALSE 86520
// begin if i in hInvincible then
86474: LD_VAR 0 2
86478: PUSH
86479: LD_EXP 121
86483: IN
86484: IFFALSE 86504
// hInvincible := hInvincible diff i else
86486: LD_ADDR_EXP 121
86490: PUSH
86491: LD_EXP 121
86495: PUSH
86496: LD_VAR 0 2
86500: DIFF
86501: ST_TO_ADDR
86502: GO 86520
// hInvincible := hInvincible union i ;
86504: LD_ADDR_EXP 121
86508: PUSH
86509: LD_EXP 121
86513: PUSH
86514: LD_VAR 0 2
86518: UNION
86519: ST_TO_ADDR
// end ;
86520: GO 86460
86522: POP
86523: POP
// end ;
86524: LD_VAR 0 1
86528: RET
// export function hHackInvisible ; var i , j ; begin
86529: LD_INT 0
86531: PPUSH
86532: PPUSH
86533: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
86534: LD_ADDR_VAR 0 2
86538: PUSH
86539: LD_INT 21
86541: PUSH
86542: LD_INT 1
86544: PUSH
86545: EMPTY
86546: LIST
86547: LIST
86548: PPUSH
86549: CALL_OW 69
86553: PUSH
86554: FOR_IN
86555: IFFALSE 86579
// if IsSelected ( i ) then
86557: LD_VAR 0 2
86561: PPUSH
86562: CALL_OW 306
86566: IFFALSE 86577
// ComForceInvisible ( i ) ;
86568: LD_VAR 0 2
86572: PPUSH
86573: CALL_OW 496
86577: GO 86554
86579: POP
86580: POP
// end ;
86581: LD_VAR 0 1
86585: RET
// export function hHackChangeYourSide ; begin
86586: LD_INT 0
86588: PPUSH
// if your_side = 8 then
86589: LD_OWVAR 2
86593: PUSH
86594: LD_INT 8
86596: EQUAL
86597: IFFALSE 86609
// your_side := 0 else
86599: LD_ADDR_OWVAR 2
86603: PUSH
86604: LD_INT 0
86606: ST_TO_ADDR
86607: GO 86623
// your_side := your_side + 1 ;
86609: LD_ADDR_OWVAR 2
86613: PUSH
86614: LD_OWVAR 2
86618: PUSH
86619: LD_INT 1
86621: PLUS
86622: ST_TO_ADDR
// end ;
86623: LD_VAR 0 1
86627: RET
// export function hHackChangeUnitSide ; var i , j ; begin
86628: LD_INT 0
86630: PPUSH
86631: PPUSH
86632: PPUSH
// for i in all_units do
86633: LD_ADDR_VAR 0 2
86637: PUSH
86638: LD_OWVAR 3
86642: PUSH
86643: FOR_IN
86644: IFFALSE 86722
// if IsSelected ( i ) then
86646: LD_VAR 0 2
86650: PPUSH
86651: CALL_OW 306
86655: IFFALSE 86720
// begin j := GetSide ( i ) ;
86657: LD_ADDR_VAR 0 3
86661: PUSH
86662: LD_VAR 0 2
86666: PPUSH
86667: CALL_OW 255
86671: ST_TO_ADDR
// if j = 8 then
86672: LD_VAR 0 3
86676: PUSH
86677: LD_INT 8
86679: EQUAL
86680: IFFALSE 86692
// j := 0 else
86682: LD_ADDR_VAR 0 3
86686: PUSH
86687: LD_INT 0
86689: ST_TO_ADDR
86690: GO 86706
// j := j + 1 ;
86692: LD_ADDR_VAR 0 3
86696: PUSH
86697: LD_VAR 0 3
86701: PUSH
86702: LD_INT 1
86704: PLUS
86705: ST_TO_ADDR
// SetSide ( i , j ) ;
86706: LD_VAR 0 2
86710: PPUSH
86711: LD_VAR 0 3
86715: PPUSH
86716: CALL_OW 235
// end ;
86720: GO 86643
86722: POP
86723: POP
// end ;
86724: LD_VAR 0 1
86728: RET
// export function hHackFog ; begin
86729: LD_INT 0
86731: PPUSH
// FogOff ( true ) ;
86732: LD_INT 1
86734: PPUSH
86735: CALL_OW 344
// end ;
86739: LD_VAR 0 1
86743: RET
// export function hHackTeleport ( unit , x , y ) ; begin
86744: LD_INT 0
86746: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
86747: LD_VAR 0 1
86751: PPUSH
86752: LD_VAR 0 2
86756: PPUSH
86757: LD_VAR 0 3
86761: PPUSH
86762: LD_INT 1
86764: PPUSH
86765: LD_INT 1
86767: PPUSH
86768: CALL_OW 483
// CenterOnXY ( x , y ) ;
86772: LD_VAR 0 2
86776: PPUSH
86777: LD_VAR 0 3
86781: PPUSH
86782: CALL_OW 84
// end ;
86786: LD_VAR 0 4
86790: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
86791: LD_INT 0
86793: PPUSH
86794: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
86795: LD_VAR 0 1
86799: NOT
86800: PUSH
86801: LD_VAR 0 2
86805: PPUSH
86806: LD_VAR 0 3
86810: PPUSH
86811: CALL_OW 488
86815: NOT
86816: OR
86817: PUSH
86818: LD_VAR 0 1
86822: PPUSH
86823: CALL_OW 266
86827: PUSH
86828: LD_INT 3
86830: NONEQUAL
86831: PUSH
86832: LD_VAR 0 1
86836: PPUSH
86837: CALL_OW 247
86841: PUSH
86842: LD_INT 1
86844: EQUAL
86845: NOT
86846: AND
86847: OR
86848: IFFALSE 86852
// exit ;
86850: GO 87134
// if GetType ( factory ) = unit_human then
86852: LD_VAR 0 1
86856: PPUSH
86857: CALL_OW 247
86861: PUSH
86862: LD_INT 1
86864: EQUAL
86865: IFFALSE 86882
// factory := IsInUnit ( factory ) ;
86867: LD_ADDR_VAR 0 1
86871: PUSH
86872: LD_VAR 0 1
86876: PPUSH
86877: CALL_OW 310
86881: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
86882: LD_VAR 0 1
86886: PPUSH
86887: CALL_OW 266
86891: PUSH
86892: LD_INT 3
86894: NONEQUAL
86895: IFFALSE 86899
// exit ;
86897: GO 87134
// for i := 1 to Count ( factoryWaypoints ) do
86899: LD_ADDR_VAR 0 5
86903: PUSH
86904: DOUBLE
86905: LD_INT 1
86907: DEC
86908: ST_TO_ADDR
86909: LD_EXP 122
86913: PPUSH
86914: CALL 31584 0 1
86918: PUSH
86919: FOR_TO
86920: IFFALSE 87082
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
86922: LD_VAR 0 2
86926: PPUSH
86927: LD_VAR 0 3
86931: PPUSH
86932: CALL_OW 428
86936: PUSH
86937: LD_EXP 122
86941: PUSH
86942: LD_VAR 0 5
86946: ARRAY
86947: PUSH
86948: LD_INT 2
86950: ARRAY
86951: EQUAL
86952: IFFALSE 86984
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
86954: LD_ADDR_EXP 122
86958: PUSH
86959: LD_EXP 122
86963: PPUSH
86964: LD_VAR 0 5
86968: PPUSH
86969: CALL_OW 3
86973: ST_TO_ADDR
// UpdateFactoryWaypoints ;
86974: CALL 87139 0 0
// exit ;
86978: POP
86979: POP
86980: GO 87134
// end else
86982: GO 87080
// if factory = factoryWaypoints [ i ] [ 2 ] then
86984: LD_VAR 0 1
86988: PUSH
86989: LD_EXP 122
86993: PUSH
86994: LD_VAR 0 5
86998: ARRAY
86999: PUSH
87000: LD_INT 2
87002: ARRAY
87003: EQUAL
87004: IFFALSE 87080
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
87006: LD_ADDR_EXP 122
87010: PUSH
87011: LD_EXP 122
87015: PPUSH
87016: LD_VAR 0 5
87020: PPUSH
87021: CALL_OW 3
87025: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
87026: LD_ADDR_EXP 122
87030: PUSH
87031: LD_EXP 122
87035: PPUSH
87036: LD_VAR 0 1
87040: PPUSH
87041: CALL_OW 255
87045: PUSH
87046: LD_VAR 0 1
87050: PUSH
87051: LD_VAR 0 2
87055: PUSH
87056: LD_VAR 0 3
87060: PUSH
87061: EMPTY
87062: LIST
87063: LIST
87064: LIST
87065: LIST
87066: PPUSH
87067: CALL 67193 0 2
87071: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87072: CALL 87139 0 0
// exit ;
87076: POP
87077: POP
87078: GO 87134
// end ; end ;
87080: GO 86919
87082: POP
87083: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
87084: LD_ADDR_EXP 122
87088: PUSH
87089: LD_EXP 122
87093: PPUSH
87094: LD_VAR 0 1
87098: PPUSH
87099: CALL_OW 255
87103: PUSH
87104: LD_VAR 0 1
87108: PUSH
87109: LD_VAR 0 2
87113: PUSH
87114: LD_VAR 0 3
87118: PUSH
87119: EMPTY
87120: LIST
87121: LIST
87122: LIST
87123: LIST
87124: PPUSH
87125: CALL 67193 0 2
87129: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87130: CALL 87139 0 0
// end ;
87134: LD_VAR 0 4
87138: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
87139: LD_INT 0
87141: PPUSH
87142: PPUSH
87143: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
87144: LD_STRING resetFactoryWaypoint();
87146: PPUSH
87147: CALL_OW 559
// if factoryWaypoints then
87151: LD_EXP 122
87155: IFFALSE 87276
// begin list := factoryWaypoints ;
87157: LD_ADDR_VAR 0 3
87161: PUSH
87162: LD_EXP 122
87166: ST_TO_ADDR
// for i := 1 to list do
87167: LD_ADDR_VAR 0 2
87171: PUSH
87172: DOUBLE
87173: LD_INT 1
87175: DEC
87176: ST_TO_ADDR
87177: LD_VAR 0 3
87181: PUSH
87182: FOR_TO
87183: IFFALSE 87274
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87185: LD_STRING setFactoryWaypointXY(
87187: PUSH
87188: LD_VAR 0 3
87192: PUSH
87193: LD_VAR 0 2
87197: ARRAY
87198: PUSH
87199: LD_INT 1
87201: ARRAY
87202: STR
87203: PUSH
87204: LD_STRING ,
87206: STR
87207: PUSH
87208: LD_VAR 0 3
87212: PUSH
87213: LD_VAR 0 2
87217: ARRAY
87218: PUSH
87219: LD_INT 2
87221: ARRAY
87222: STR
87223: PUSH
87224: LD_STRING ,
87226: STR
87227: PUSH
87228: LD_VAR 0 3
87232: PUSH
87233: LD_VAR 0 2
87237: ARRAY
87238: PUSH
87239: LD_INT 3
87241: ARRAY
87242: STR
87243: PUSH
87244: LD_STRING ,
87246: STR
87247: PUSH
87248: LD_VAR 0 3
87252: PUSH
87253: LD_VAR 0 2
87257: ARRAY
87258: PUSH
87259: LD_INT 4
87261: ARRAY
87262: STR
87263: PUSH
87264: LD_STRING )
87266: STR
87267: PPUSH
87268: CALL_OW 559
87272: GO 87182
87274: POP
87275: POP
// end ; end ;
87276: LD_VAR 0 1
87280: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
87281: LD_INT 0
87283: PPUSH
// if HexInfo ( x , y ) = warehouse then
87284: LD_VAR 0 2
87288: PPUSH
87289: LD_VAR 0 3
87293: PPUSH
87294: CALL_OW 428
87298: PUSH
87299: LD_VAR 0 1
87303: EQUAL
87304: IFFALSE 87331
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
87306: LD_ADDR_EXP 123
87310: PUSH
87311: LD_EXP 123
87315: PPUSH
87316: LD_VAR 0 1
87320: PPUSH
87321: LD_INT 0
87323: PPUSH
87324: CALL_OW 1
87328: ST_TO_ADDR
87329: GO 87382
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
87331: LD_ADDR_EXP 123
87335: PUSH
87336: LD_EXP 123
87340: PPUSH
87341: LD_VAR 0 1
87345: PPUSH
87346: LD_VAR 0 1
87350: PPUSH
87351: CALL_OW 255
87355: PUSH
87356: LD_VAR 0 1
87360: PUSH
87361: LD_VAR 0 2
87365: PUSH
87366: LD_VAR 0 3
87370: PUSH
87371: EMPTY
87372: LIST
87373: LIST
87374: LIST
87375: LIST
87376: PPUSH
87377: CALL_OW 1
87381: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
87382: CALL 87391 0 0
// end ;
87386: LD_VAR 0 4
87390: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
87391: LD_INT 0
87393: PPUSH
87394: PPUSH
87395: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
87396: LD_STRING resetWarehouseGatheringPoints();
87398: PPUSH
87399: CALL_OW 559
// if warehouseGatheringPoints then
87403: LD_EXP 123
87407: IFFALSE 87533
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
87409: LD_ADDR_VAR 0 3
87413: PUSH
87414: LD_EXP 123
87418: PPUSH
87419: CALL 70961 0 1
87423: ST_TO_ADDR
// for i := 1 to list do
87424: LD_ADDR_VAR 0 2
87428: PUSH
87429: DOUBLE
87430: LD_INT 1
87432: DEC
87433: ST_TO_ADDR
87434: LD_VAR 0 3
87438: PUSH
87439: FOR_TO
87440: IFFALSE 87531
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87442: LD_STRING setWarehouseGatheringPointXY(
87444: PUSH
87445: LD_VAR 0 3
87449: PUSH
87450: LD_VAR 0 2
87454: ARRAY
87455: PUSH
87456: LD_INT 1
87458: ARRAY
87459: STR
87460: PUSH
87461: LD_STRING ,
87463: STR
87464: PUSH
87465: LD_VAR 0 3
87469: PUSH
87470: LD_VAR 0 2
87474: ARRAY
87475: PUSH
87476: LD_INT 2
87478: ARRAY
87479: STR
87480: PUSH
87481: LD_STRING ,
87483: STR
87484: PUSH
87485: LD_VAR 0 3
87489: PUSH
87490: LD_VAR 0 2
87494: ARRAY
87495: PUSH
87496: LD_INT 3
87498: ARRAY
87499: STR
87500: PUSH
87501: LD_STRING ,
87503: STR
87504: PUSH
87505: LD_VAR 0 3
87509: PUSH
87510: LD_VAR 0 2
87514: ARRAY
87515: PUSH
87516: LD_INT 4
87518: ARRAY
87519: STR
87520: PUSH
87521: LD_STRING )
87523: STR
87524: PPUSH
87525: CALL_OW 559
87529: GO 87439
87531: POP
87532: POP
// end ; end ;
87533: LD_VAR 0 1
87537: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
87538: LD_EXP 123
87542: IFFALSE 88227
87544: GO 87546
87546: DISABLE
87547: LD_INT 0
87549: PPUSH
87550: PPUSH
87551: PPUSH
87552: PPUSH
87553: PPUSH
87554: PPUSH
87555: PPUSH
87556: PPUSH
87557: PPUSH
// begin enable ;
87558: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
87559: LD_ADDR_VAR 0 3
87563: PUSH
87564: LD_EXP 123
87568: PPUSH
87569: CALL 70961 0 1
87573: ST_TO_ADDR
// if not list then
87574: LD_VAR 0 3
87578: NOT
87579: IFFALSE 87583
// exit ;
87581: GO 88227
// for i := 1 to list do
87583: LD_ADDR_VAR 0 1
87587: PUSH
87588: DOUBLE
87589: LD_INT 1
87591: DEC
87592: ST_TO_ADDR
87593: LD_VAR 0 3
87597: PUSH
87598: FOR_TO
87599: IFFALSE 88225
// begin depot := list [ i ] [ 2 ] ;
87601: LD_ADDR_VAR 0 8
87605: PUSH
87606: LD_VAR 0 3
87610: PUSH
87611: LD_VAR 0 1
87615: ARRAY
87616: PUSH
87617: LD_INT 2
87619: ARRAY
87620: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
87621: LD_ADDR_VAR 0 5
87625: PUSH
87626: LD_VAR 0 3
87630: PUSH
87631: LD_VAR 0 1
87635: ARRAY
87636: PUSH
87637: LD_INT 1
87639: ARRAY
87640: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
87641: LD_VAR 0 8
87645: PPUSH
87646: CALL_OW 301
87650: PUSH
87651: LD_VAR 0 5
87655: PUSH
87656: LD_VAR 0 8
87660: PPUSH
87661: CALL_OW 255
87665: NONEQUAL
87666: OR
87667: IFFALSE 87696
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
87669: LD_ADDR_EXP 123
87673: PUSH
87674: LD_EXP 123
87678: PPUSH
87679: LD_VAR 0 8
87683: PPUSH
87684: LD_INT 0
87686: PPUSH
87687: CALL_OW 1
87691: ST_TO_ADDR
// exit ;
87692: POP
87693: POP
87694: GO 88227
// end ; x := list [ i ] [ 3 ] ;
87696: LD_ADDR_VAR 0 6
87700: PUSH
87701: LD_VAR 0 3
87705: PUSH
87706: LD_VAR 0 1
87710: ARRAY
87711: PUSH
87712: LD_INT 3
87714: ARRAY
87715: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
87716: LD_ADDR_VAR 0 7
87720: PUSH
87721: LD_VAR 0 3
87725: PUSH
87726: LD_VAR 0 1
87730: ARRAY
87731: PUSH
87732: LD_INT 4
87734: ARRAY
87735: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
87736: LD_ADDR_VAR 0 9
87740: PUSH
87741: LD_VAR 0 6
87745: PPUSH
87746: LD_VAR 0 7
87750: PPUSH
87751: LD_INT 16
87753: PPUSH
87754: CALL 69545 0 3
87758: ST_TO_ADDR
// if not cratesNearbyPoint then
87759: LD_VAR 0 9
87763: NOT
87764: IFFALSE 87770
// exit ;
87766: POP
87767: POP
87768: GO 88227
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
87770: LD_ADDR_VAR 0 4
87774: PUSH
87775: LD_INT 22
87777: PUSH
87778: LD_VAR 0 5
87782: PUSH
87783: EMPTY
87784: LIST
87785: LIST
87786: PUSH
87787: LD_INT 3
87789: PUSH
87790: LD_INT 60
87792: PUSH
87793: EMPTY
87794: LIST
87795: PUSH
87796: EMPTY
87797: LIST
87798: LIST
87799: PUSH
87800: LD_INT 91
87802: PUSH
87803: LD_VAR 0 8
87807: PUSH
87808: LD_INT 6
87810: PUSH
87811: EMPTY
87812: LIST
87813: LIST
87814: LIST
87815: PUSH
87816: LD_INT 2
87818: PUSH
87819: LD_INT 25
87821: PUSH
87822: LD_INT 2
87824: PUSH
87825: EMPTY
87826: LIST
87827: LIST
87828: PUSH
87829: LD_INT 25
87831: PUSH
87832: LD_INT 16
87834: PUSH
87835: EMPTY
87836: LIST
87837: LIST
87838: PUSH
87839: EMPTY
87840: LIST
87841: LIST
87842: LIST
87843: PUSH
87844: EMPTY
87845: LIST
87846: LIST
87847: LIST
87848: LIST
87849: PPUSH
87850: CALL_OW 69
87854: PUSH
87855: LD_VAR 0 8
87859: PPUSH
87860: CALL_OW 313
87864: PPUSH
87865: LD_INT 3
87867: PUSH
87868: LD_INT 60
87870: PUSH
87871: EMPTY
87872: LIST
87873: PUSH
87874: EMPTY
87875: LIST
87876: LIST
87877: PUSH
87878: LD_INT 2
87880: PUSH
87881: LD_INT 25
87883: PUSH
87884: LD_INT 2
87886: PUSH
87887: EMPTY
87888: LIST
87889: LIST
87890: PUSH
87891: LD_INT 25
87893: PUSH
87894: LD_INT 16
87896: PUSH
87897: EMPTY
87898: LIST
87899: LIST
87900: PUSH
87901: EMPTY
87902: LIST
87903: LIST
87904: LIST
87905: PUSH
87906: EMPTY
87907: LIST
87908: LIST
87909: PPUSH
87910: CALL_OW 72
87914: UNION
87915: ST_TO_ADDR
// if tmp then
87916: LD_VAR 0 4
87920: IFFALSE 88000
// begin tmp := ShrinkArray ( tmp , 3 ) ;
87922: LD_ADDR_VAR 0 4
87926: PUSH
87927: LD_VAR 0 4
87931: PPUSH
87932: LD_INT 3
87934: PPUSH
87935: CALL 67508 0 2
87939: ST_TO_ADDR
// for j in tmp do
87940: LD_ADDR_VAR 0 2
87944: PUSH
87945: LD_VAR 0 4
87949: PUSH
87950: FOR_IN
87951: IFFALSE 87994
// begin if IsInUnit ( j ) then
87953: LD_VAR 0 2
87957: PPUSH
87958: CALL_OW 310
87962: IFFALSE 87973
// ComExit ( j ) ;
87964: LD_VAR 0 2
87968: PPUSH
87969: CALL 67591 0 1
// AddComCollect ( j , x , y ) ;
87973: LD_VAR 0 2
87977: PPUSH
87978: LD_VAR 0 6
87982: PPUSH
87983: LD_VAR 0 7
87987: PPUSH
87988: CALL_OW 177
// end ;
87992: GO 87950
87994: POP
87995: POP
// exit ;
87996: POP
87997: POP
87998: GO 88227
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
88000: LD_ADDR_VAR 0 4
88004: PUSH
88005: LD_INT 22
88007: PUSH
88008: LD_VAR 0 5
88012: PUSH
88013: EMPTY
88014: LIST
88015: LIST
88016: PUSH
88017: LD_INT 91
88019: PUSH
88020: LD_VAR 0 8
88024: PUSH
88025: LD_INT 8
88027: PUSH
88028: EMPTY
88029: LIST
88030: LIST
88031: LIST
88032: PUSH
88033: LD_INT 2
88035: PUSH
88036: LD_INT 34
88038: PUSH
88039: LD_INT 12
88041: PUSH
88042: EMPTY
88043: LIST
88044: LIST
88045: PUSH
88046: LD_INT 34
88048: PUSH
88049: LD_INT 51
88051: PUSH
88052: EMPTY
88053: LIST
88054: LIST
88055: PUSH
88056: LD_INT 34
88058: PUSH
88059: LD_INT 32
88061: PUSH
88062: EMPTY
88063: LIST
88064: LIST
88065: PUSH
88066: LD_INT 34
88068: PUSH
88069: LD_INT 89
88071: PUSH
88072: EMPTY
88073: LIST
88074: LIST
88075: PUSH
88076: EMPTY
88077: LIST
88078: LIST
88079: LIST
88080: LIST
88081: LIST
88082: PUSH
88083: EMPTY
88084: LIST
88085: LIST
88086: LIST
88087: PPUSH
88088: CALL_OW 69
88092: ST_TO_ADDR
// if tmp then
88093: LD_VAR 0 4
88097: IFFALSE 88223
// begin for j in tmp do
88099: LD_ADDR_VAR 0 2
88103: PUSH
88104: LD_VAR 0 4
88108: PUSH
88109: FOR_IN
88110: IFFALSE 88221
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
88112: LD_VAR 0 2
88116: PPUSH
88117: CALL_OW 262
88121: PUSH
88122: LD_INT 3
88124: EQUAL
88125: PUSH
88126: LD_VAR 0 2
88130: PPUSH
88131: CALL_OW 261
88135: PUSH
88136: LD_INT 20
88138: GREATER
88139: OR
88140: PUSH
88141: LD_VAR 0 2
88145: PPUSH
88146: CALL_OW 314
88150: NOT
88151: AND
88152: PUSH
88153: LD_VAR 0 2
88157: PPUSH
88158: CALL_OW 263
88162: PUSH
88163: LD_INT 1
88165: NONEQUAL
88166: PUSH
88167: LD_VAR 0 2
88171: PPUSH
88172: CALL_OW 311
88176: OR
88177: AND
88178: IFFALSE 88219
// begin ComCollect ( j , x , y ) ;
88180: LD_VAR 0 2
88184: PPUSH
88185: LD_VAR 0 6
88189: PPUSH
88190: LD_VAR 0 7
88194: PPUSH
88195: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
88199: LD_VAR 0 2
88203: PPUSH
88204: LD_VAR 0 8
88208: PPUSH
88209: CALL_OW 172
// exit ;
88213: POP
88214: POP
88215: POP
88216: POP
88217: GO 88227
// end ;
88219: GO 88109
88221: POP
88222: POP
// end ; end ;
88223: GO 87598
88225: POP
88226: POP
// end ; end_of_file
88227: PPOPN 9
88229: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
88230: LD_VAR 0 1
88234: PUSH
88235: LD_INT 200
88237: DOUBLE
88238: GREATEREQUAL
88239: IFFALSE 88247
88241: LD_INT 299
88243: DOUBLE
88244: LESSEQUAL
88245: IFTRUE 88249
88247: GO 88281
88249: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
88250: LD_VAR 0 1
88254: PPUSH
88255: LD_VAR 0 2
88259: PPUSH
88260: LD_VAR 0 3
88264: PPUSH
88265: LD_VAR 0 4
88269: PPUSH
88270: LD_VAR 0 5
88274: PPUSH
88275: CALL 88978 0 5
88279: GO 88358
88281: LD_INT 300
88283: DOUBLE
88284: GREATEREQUAL
88285: IFFALSE 88293
88287: LD_INT 399
88289: DOUBLE
88290: LESSEQUAL
88291: IFTRUE 88295
88293: GO 88357
88295: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
88296: LD_VAR 0 1
88300: PPUSH
88301: LD_VAR 0 2
88305: PPUSH
88306: LD_VAR 0 3
88310: PPUSH
88311: LD_VAR 0 4
88315: PPUSH
88316: LD_VAR 0 5
88320: PPUSH
88321: LD_VAR 0 6
88325: PPUSH
88326: LD_VAR 0 7
88330: PPUSH
88331: LD_VAR 0 8
88335: PPUSH
88336: LD_VAR 0 9
88340: PPUSH
88341: LD_VAR 0 10
88345: PPUSH
88346: LD_VAR 0 11
88350: PPUSH
88351: CALL 84803 0 11
88355: GO 88358
88357: POP
// end ;
88358: PPOPN 11
88360: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
88361: LD_VAR 0 1
88365: PPUSH
88366: LD_VAR 0 2
88370: PPUSH
88371: LD_VAR 0 3
88375: PPUSH
88376: LD_VAR 0 4
88380: PPUSH
88381: LD_VAR 0 5
88385: PPUSH
88386: CALL 88443 0 5
// end ; end_of_file
88390: PPOPN 5
88392: END
// export function SOS_UnitDestroyed ( un ) ; begin
88393: LD_INT 0
88395: PPUSH
// ComRadiation ( un ) ;
88396: LD_VAR 0 1
88400: PPUSH
88401: CALL 89382 0 1
// end ;
88405: LD_VAR 0 2
88409: RET
// export function SOS_UnitKamikazed ( un ) ; begin
88410: LD_INT 0
88412: PPUSH
// ComRadiation ( un ) ;
88413: LD_VAR 0 1
88417: PPUSH
88418: CALL 89382 0 1
// end ;
88422: LD_VAR 0 2
88426: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
88427: LD_INT 0
88429: PPUSH
// end ;
88430: LD_VAR 0 4
88434: RET
// export function SOS_Command ( cmd ) ; begin
88435: LD_INT 0
88437: PPUSH
// end ;
88438: LD_VAR 0 2
88442: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
88443: LD_INT 0
88445: PPUSH
// end ;
88446: LD_VAR 0 6
88450: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
88451: LD_INT 0
88453: PPUSH
88454: PPUSH
88455: PPUSH
88456: PPUSH
88457: PPUSH
// if not vehicle or not factory then
88458: LD_VAR 0 1
88462: NOT
88463: PUSH
88464: LD_VAR 0 2
88468: NOT
88469: OR
88470: IFFALSE 88474
// exit ;
88472: GO 88973
// if not factoryWaypoints then
88474: LD_EXP 122
88478: NOT
88479: IFFALSE 88483
// exit ;
88481: GO 88973
// for i := 1 to Count ( factoryWaypoints ) do
88483: LD_ADDR_VAR 0 4
88487: PUSH
88488: DOUBLE
88489: LD_INT 1
88491: DEC
88492: ST_TO_ADDR
88493: LD_EXP 122
88497: PPUSH
88498: CALL 31584 0 1
88502: PUSH
88503: FOR_TO
88504: IFFALSE 88971
// if factoryWaypoints [ i ] [ 2 ] = factory then
88506: LD_EXP 122
88510: PUSH
88511: LD_VAR 0 4
88515: ARRAY
88516: PUSH
88517: LD_INT 2
88519: ARRAY
88520: PUSH
88521: LD_VAR 0 2
88525: EQUAL
88526: IFFALSE 88969
// begin if GetControl ( vehicle ) = control_manual then
88528: LD_VAR 0 1
88532: PPUSH
88533: CALL_OW 263
88537: PUSH
88538: LD_INT 1
88540: EQUAL
88541: IFFALSE 88852
// begin driver := IsDrivenBy ( vehicle ) ;
88543: LD_ADDR_VAR 0 6
88547: PUSH
88548: LD_VAR 0 1
88552: PPUSH
88553: CALL_OW 311
88557: ST_TO_ADDR
// tag := GetTag ( driver ) ;
88558: LD_ADDR_VAR 0 5
88562: PUSH
88563: LD_VAR 0 6
88567: PPUSH
88568: CALL_OW 110
88572: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
88573: LD_VAR 0 5
88577: PUSH
88578: LD_INT 501
88580: EQUAL
88581: PUSH
88582: LD_VAR 0 1
88586: PPUSH
88587: CALL_OW 110
88591: PUSH
88592: LD_INT 501
88594: EQUAL
88595: OR
88596: IFFALSE 88602
// exit ;
88598: POP
88599: POP
88600: GO 88973
// if not HasTask ( driver ) then
88602: LD_VAR 0 6
88606: PPUSH
88607: CALL_OW 314
88611: NOT
88612: IFFALSE 88850
// begin SetTag ( driver , tDriver ) ;
88614: LD_VAR 0 6
88618: PPUSH
88619: LD_INT 501
88621: PPUSH
88622: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
88626: LD_VAR 0 1
88630: PPUSH
88631: LD_INT 501
88633: PPUSH
88634: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88638: LD_ADDR_VAR 0 7
88642: PUSH
88643: LD_EXP 122
88647: PUSH
88648: LD_VAR 0 4
88652: ARRAY
88653: PUSH
88654: LD_INT 3
88656: ARRAY
88657: PPUSH
88658: LD_EXP 122
88662: PUSH
88663: LD_VAR 0 4
88667: ARRAY
88668: PUSH
88669: LD_INT 4
88671: ARRAY
88672: PPUSH
88673: CALL_OW 428
88677: ST_TO_ADDR
// if hex then
88678: LD_VAR 0 7
88682: IFFALSE 88700
// ComMoveUnit ( driver , hex ) else
88684: LD_VAR 0 6
88688: PPUSH
88689: LD_VAR 0 7
88693: PPUSH
88694: CALL_OW 112
88698: GO 88739
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88700: LD_VAR 0 6
88704: PPUSH
88705: LD_EXP 122
88709: PUSH
88710: LD_VAR 0 4
88714: ARRAY
88715: PUSH
88716: LD_INT 3
88718: ARRAY
88719: PPUSH
88720: LD_EXP 122
88724: PUSH
88725: LD_VAR 0 4
88729: ARRAY
88730: PUSH
88731: LD_INT 4
88733: ARRAY
88734: PPUSH
88735: CALL_OW 111
// AddComExitVehicle ( driver ) ;
88739: LD_VAR 0 6
88743: PPUSH
88744: CALL_OW 181
// if Multiplayer then
88748: LD_OWVAR 4
88752: IFFALSE 88801
// begin repeat wait ( 10 ) ;
88754: LD_INT 10
88756: PPUSH
88757: CALL_OW 67
// until not IsInUnit ( driver ) ;
88761: LD_VAR 0 6
88765: PPUSH
88766: CALL_OW 310
88770: NOT
88771: IFFALSE 88754
// if not HasTask ( driver ) then
88773: LD_VAR 0 6
88777: PPUSH
88778: CALL_OW 314
88782: NOT
88783: IFFALSE 88799
// ComEnterUnit ( driver , factory ) ;
88785: LD_VAR 0 6
88789: PPUSH
88790: LD_VAR 0 2
88794: PPUSH
88795: CALL_OW 120
// end else
88799: GO 88815
// AddComEnterUnit ( driver , factory ) ;
88801: LD_VAR 0 6
88805: PPUSH
88806: LD_VAR 0 2
88810: PPUSH
88811: CALL_OW 180
// wait ( 0 0$1 ) ;
88815: LD_INT 35
88817: PPUSH
88818: CALL_OW 67
// SetTag ( driver , tag ) ;
88822: LD_VAR 0 6
88826: PPUSH
88827: LD_VAR 0 5
88831: PPUSH
88832: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
88836: LD_VAR 0 1
88840: PPUSH
88841: LD_INT 0
88843: PPUSH
88844: CALL_OW 109
// break ;
88848: GO 88971
// end ; end else
88850: GO 88969
// if GetControl ( vehicle ) = control_remote then
88852: LD_VAR 0 1
88856: PPUSH
88857: CALL_OW 263
88861: PUSH
88862: LD_INT 2
88864: EQUAL
88865: IFFALSE 88928
// begin wait ( 0 0$2 ) ;
88867: LD_INT 70
88869: PPUSH
88870: CALL_OW 67
// if Connect ( vehicle ) then
88874: LD_VAR 0 1
88878: PPUSH
88879: CALL 37790 0 1
88883: IFFALSE 88924
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88885: LD_VAR 0 1
88889: PPUSH
88890: LD_EXP 122
88894: PUSH
88895: LD_VAR 0 4
88899: ARRAY
88900: PUSH
88901: LD_INT 3
88903: ARRAY
88904: PPUSH
88905: LD_EXP 122
88909: PUSH
88910: LD_VAR 0 4
88914: ARRAY
88915: PUSH
88916: LD_INT 4
88918: ARRAY
88919: PPUSH
88920: CALL_OW 171
// break ;
88924: GO 88971
// end else
88926: GO 88969
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88928: LD_VAR 0 1
88932: PPUSH
88933: LD_EXP 122
88937: PUSH
88938: LD_VAR 0 4
88942: ARRAY
88943: PUSH
88944: LD_INT 3
88946: ARRAY
88947: PPUSH
88948: LD_EXP 122
88952: PUSH
88953: LD_VAR 0 4
88957: ARRAY
88958: PUSH
88959: LD_INT 4
88961: ARRAY
88962: PPUSH
88963: CALL_OW 171
// break ;
88967: GO 88971
// end ; end ;
88969: GO 88503
88971: POP
88972: POP
// end ;
88973: LD_VAR 0 3
88977: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
88978: LD_INT 0
88980: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
88981: LD_VAR 0 1
88985: PUSH
88986: LD_INT 250
88988: EQUAL
88989: PUSH
88990: LD_VAR 0 2
88994: PPUSH
88995: CALL_OW 264
88999: PUSH
89000: LD_INT 81
89002: EQUAL
89003: AND
89004: IFFALSE 89025
// MinerPlaceMine ( unit , x , y ) ;
89006: LD_VAR 0 2
89010: PPUSH
89011: LD_VAR 0 4
89015: PPUSH
89016: LD_VAR 0 5
89020: PPUSH
89021: CALL 92117 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
89025: LD_VAR 0 1
89029: PUSH
89030: LD_INT 251
89032: EQUAL
89033: PUSH
89034: LD_VAR 0 2
89038: PPUSH
89039: CALL_OW 264
89043: PUSH
89044: LD_INT 81
89046: EQUAL
89047: AND
89048: IFFALSE 89069
// MinerDetonateMine ( unit , x , y ) ;
89050: LD_VAR 0 2
89054: PPUSH
89055: LD_VAR 0 4
89059: PPUSH
89060: LD_VAR 0 5
89064: PPUSH
89065: CALL 92392 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
89069: LD_VAR 0 1
89073: PUSH
89074: LD_INT 252
89076: EQUAL
89077: PUSH
89078: LD_VAR 0 2
89082: PPUSH
89083: CALL_OW 264
89087: PUSH
89088: LD_INT 81
89090: EQUAL
89091: AND
89092: IFFALSE 89113
// MinerCreateMinefield ( unit , x , y ) ;
89094: LD_VAR 0 2
89098: PPUSH
89099: LD_VAR 0 4
89103: PPUSH
89104: LD_VAR 0 5
89108: PPUSH
89109: CALL 92809 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
89113: LD_VAR 0 1
89117: PUSH
89118: LD_INT 253
89120: EQUAL
89121: PUSH
89122: LD_VAR 0 2
89126: PPUSH
89127: CALL_OW 257
89131: PUSH
89132: LD_INT 5
89134: EQUAL
89135: AND
89136: IFFALSE 89157
// ComBinocular ( unit , x , y ) ;
89138: LD_VAR 0 2
89142: PPUSH
89143: LD_VAR 0 4
89147: PPUSH
89148: LD_VAR 0 5
89152: PPUSH
89153: CALL 93178 0 3
// if selectedUnit then
89157: LD_VAR 0 3
89161: IFFALSE 89217
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
89163: LD_VAR 0 1
89167: PUSH
89168: LD_INT 254
89170: EQUAL
89171: PUSH
89172: LD_VAR 0 2
89176: PPUSH
89177: CALL_OW 264
89181: PUSH
89182: LD_INT 99
89184: EQUAL
89185: AND
89186: PUSH
89187: LD_VAR 0 3
89191: PPUSH
89192: CALL_OW 263
89196: PUSH
89197: LD_INT 3
89199: EQUAL
89200: AND
89201: IFFALSE 89217
// HackDestroyVehicle ( unit , selectedUnit ) ;
89203: LD_VAR 0 2
89207: PPUSH
89208: LD_VAR 0 3
89212: PPUSH
89213: CALL 91481 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
89217: LD_VAR 0 1
89221: PUSH
89222: LD_INT 255
89224: EQUAL
89225: PUSH
89226: LD_VAR 0 2
89230: PPUSH
89231: CALL_OW 264
89235: PUSH
89236: LD_INT 14
89238: PUSH
89239: LD_INT 53
89241: PUSH
89242: EMPTY
89243: LIST
89244: LIST
89245: IN
89246: AND
89247: PUSH
89248: LD_VAR 0 4
89252: PPUSH
89253: LD_VAR 0 5
89257: PPUSH
89258: CALL_OW 488
89262: AND
89263: IFFALSE 89287
// CutTreeXYR ( unit , x , y , 12 ) ;
89265: LD_VAR 0 2
89269: PPUSH
89270: LD_VAR 0 4
89274: PPUSH
89275: LD_VAR 0 5
89279: PPUSH
89280: LD_INT 12
89282: PPUSH
89283: CALL 89478 0 4
// if cmd = 256 then
89287: LD_VAR 0 1
89291: PUSH
89292: LD_INT 256
89294: EQUAL
89295: IFFALSE 89316
// SetFactoryWaypoint ( unit , x , y ) ;
89297: LD_VAR 0 2
89301: PPUSH
89302: LD_VAR 0 4
89306: PPUSH
89307: LD_VAR 0 5
89311: PPUSH
89312: CALL 86791 0 3
// if cmd = 257 then
89316: LD_VAR 0 1
89320: PUSH
89321: LD_INT 257
89323: EQUAL
89324: IFFALSE 89345
// SetWarehouseGatheringPoint ( unit , x , y ) ;
89326: LD_VAR 0 2
89330: PPUSH
89331: LD_VAR 0 4
89335: PPUSH
89336: LD_VAR 0 5
89340: PPUSH
89341: CALL 87281 0 3
// if cmd = 258 then
89345: LD_VAR 0 1
89349: PUSH
89350: LD_INT 258
89352: EQUAL
89353: IFFALSE 89377
// BurnTreeXYR ( unit , x , y , 8 ) ;
89355: LD_VAR 0 2
89359: PPUSH
89360: LD_VAR 0 4
89364: PPUSH
89365: LD_VAR 0 5
89369: PPUSH
89370: LD_INT 8
89372: PPUSH
89373: CALL 89872 0 4
// end ;
89377: LD_VAR 0 6
89381: RET
// export function ComRadiation ( un ) ; var eff ; begin
89382: LD_INT 0
89384: PPUSH
89385: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
89386: LD_VAR 0 1
89390: PPUSH
89391: CALL_OW 264
89395: PUSH
89396: LD_INT 91
89398: NONEQUAL
89399: IFFALSE 89403
// exit ;
89401: GO 89473
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
89403: LD_INT 68
89405: PPUSH
89406: LD_VAR 0 1
89410: PPUSH
89411: CALL_OW 255
89415: PPUSH
89416: CALL_OW 321
89420: PUSH
89421: LD_INT 2
89423: EQUAL
89424: IFFALSE 89436
// eff := 70 else
89426: LD_ADDR_VAR 0 3
89430: PUSH
89431: LD_INT 70
89433: ST_TO_ADDR
89434: GO 89444
// eff := 30 ;
89436: LD_ADDR_VAR 0 3
89440: PUSH
89441: LD_INT 30
89443: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
89444: LD_VAR 0 1
89448: PPUSH
89449: CALL_OW 250
89453: PPUSH
89454: LD_VAR 0 1
89458: PPUSH
89459: CALL_OW 251
89463: PPUSH
89464: LD_VAR 0 3
89468: PPUSH
89469: CALL_OW 495
// end ;
89473: LD_VAR 0 2
89477: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
89478: LD_INT 0
89480: PPUSH
89481: PPUSH
89482: PPUSH
89483: PPUSH
89484: PPUSH
89485: PPUSH
89486: PPUSH
89487: PPUSH
89488: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
89489: LD_VAR 0 1
89493: PPUSH
89494: CALL_OW 302
89498: NOT
89499: PUSH
89500: LD_VAR 0 2
89504: PPUSH
89505: LD_VAR 0 3
89509: PPUSH
89510: CALL_OW 488
89514: NOT
89515: OR
89516: PUSH
89517: LD_VAR 0 4
89521: NOT
89522: OR
89523: IFFALSE 89527
// exit ;
89525: GO 89867
// list := [ ] ;
89527: LD_ADDR_VAR 0 13
89531: PUSH
89532: EMPTY
89533: ST_TO_ADDR
// if x - r < 0 then
89534: LD_VAR 0 2
89538: PUSH
89539: LD_VAR 0 4
89543: MINUS
89544: PUSH
89545: LD_INT 0
89547: LESS
89548: IFFALSE 89560
// min_x := 0 else
89550: LD_ADDR_VAR 0 7
89554: PUSH
89555: LD_INT 0
89557: ST_TO_ADDR
89558: GO 89576
// min_x := x - r ;
89560: LD_ADDR_VAR 0 7
89564: PUSH
89565: LD_VAR 0 2
89569: PUSH
89570: LD_VAR 0 4
89574: MINUS
89575: ST_TO_ADDR
// if y - r < 0 then
89576: LD_VAR 0 3
89580: PUSH
89581: LD_VAR 0 4
89585: MINUS
89586: PUSH
89587: LD_INT 0
89589: LESS
89590: IFFALSE 89602
// min_y := 0 else
89592: LD_ADDR_VAR 0 8
89596: PUSH
89597: LD_INT 0
89599: ST_TO_ADDR
89600: GO 89618
// min_y := y - r ;
89602: LD_ADDR_VAR 0 8
89606: PUSH
89607: LD_VAR 0 3
89611: PUSH
89612: LD_VAR 0 4
89616: MINUS
89617: ST_TO_ADDR
// max_x := x + r ;
89618: LD_ADDR_VAR 0 9
89622: PUSH
89623: LD_VAR 0 2
89627: PUSH
89628: LD_VAR 0 4
89632: PLUS
89633: ST_TO_ADDR
// max_y := y + r ;
89634: LD_ADDR_VAR 0 10
89638: PUSH
89639: LD_VAR 0 3
89643: PUSH
89644: LD_VAR 0 4
89648: PLUS
89649: ST_TO_ADDR
// for _x = min_x to max_x do
89650: LD_ADDR_VAR 0 11
89654: PUSH
89655: DOUBLE
89656: LD_VAR 0 7
89660: DEC
89661: ST_TO_ADDR
89662: LD_VAR 0 9
89666: PUSH
89667: FOR_TO
89668: IFFALSE 89785
// for _y = min_y to max_y do
89670: LD_ADDR_VAR 0 12
89674: PUSH
89675: DOUBLE
89676: LD_VAR 0 8
89680: DEC
89681: ST_TO_ADDR
89682: LD_VAR 0 10
89686: PUSH
89687: FOR_TO
89688: IFFALSE 89781
// begin if not ValidHex ( _x , _y ) then
89690: LD_VAR 0 11
89694: PPUSH
89695: LD_VAR 0 12
89699: PPUSH
89700: CALL_OW 488
89704: NOT
89705: IFFALSE 89709
// continue ;
89707: GO 89687
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89709: LD_VAR 0 11
89713: PPUSH
89714: LD_VAR 0 12
89718: PPUSH
89719: CALL_OW 351
89723: PUSH
89724: LD_VAR 0 11
89728: PPUSH
89729: LD_VAR 0 12
89733: PPUSH
89734: CALL_OW 554
89738: AND
89739: IFFALSE 89779
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89741: LD_ADDR_VAR 0 13
89745: PUSH
89746: LD_VAR 0 13
89750: PPUSH
89751: LD_VAR 0 13
89755: PUSH
89756: LD_INT 1
89758: PLUS
89759: PPUSH
89760: LD_VAR 0 11
89764: PUSH
89765: LD_VAR 0 12
89769: PUSH
89770: EMPTY
89771: LIST
89772: LIST
89773: PPUSH
89774: CALL_OW 2
89778: ST_TO_ADDR
// end ;
89779: GO 89687
89781: POP
89782: POP
89783: GO 89667
89785: POP
89786: POP
// if not list then
89787: LD_VAR 0 13
89791: NOT
89792: IFFALSE 89796
// exit ;
89794: GO 89867
// for i in list do
89796: LD_ADDR_VAR 0 6
89800: PUSH
89801: LD_VAR 0 13
89805: PUSH
89806: FOR_IN
89807: IFFALSE 89865
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89809: LD_VAR 0 1
89813: PPUSH
89814: LD_STRING M
89816: PUSH
89817: LD_VAR 0 6
89821: PUSH
89822: LD_INT 1
89824: ARRAY
89825: PUSH
89826: LD_VAR 0 6
89830: PUSH
89831: LD_INT 2
89833: ARRAY
89834: PUSH
89835: LD_INT 0
89837: PUSH
89838: LD_INT 0
89840: PUSH
89841: LD_INT 0
89843: PUSH
89844: LD_INT 0
89846: PUSH
89847: EMPTY
89848: LIST
89849: LIST
89850: LIST
89851: LIST
89852: LIST
89853: LIST
89854: LIST
89855: PUSH
89856: EMPTY
89857: LIST
89858: PPUSH
89859: CALL_OW 447
89863: GO 89806
89865: POP
89866: POP
// end ;
89867: LD_VAR 0 5
89871: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
89872: LD_INT 0
89874: PPUSH
89875: PPUSH
89876: PPUSH
89877: PPUSH
89878: PPUSH
89879: PPUSH
89880: PPUSH
89881: PPUSH
89882: PPUSH
89883: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
89884: LD_VAR 0 1
89888: PPUSH
89889: CALL_OW 302
89893: NOT
89894: PUSH
89895: LD_VAR 0 2
89899: PPUSH
89900: LD_VAR 0 3
89904: PPUSH
89905: CALL_OW 488
89909: NOT
89910: OR
89911: PUSH
89912: LD_VAR 0 4
89916: NOT
89917: OR
89918: IFFALSE 89922
// exit ;
89920: GO 90435
// list := [ ] ;
89922: LD_ADDR_VAR 0 13
89926: PUSH
89927: EMPTY
89928: ST_TO_ADDR
// if x - r < 0 then
89929: LD_VAR 0 2
89933: PUSH
89934: LD_VAR 0 4
89938: MINUS
89939: PUSH
89940: LD_INT 0
89942: LESS
89943: IFFALSE 89955
// min_x := 0 else
89945: LD_ADDR_VAR 0 7
89949: PUSH
89950: LD_INT 0
89952: ST_TO_ADDR
89953: GO 89971
// min_x := x - r ;
89955: LD_ADDR_VAR 0 7
89959: PUSH
89960: LD_VAR 0 2
89964: PUSH
89965: LD_VAR 0 4
89969: MINUS
89970: ST_TO_ADDR
// if y - r < 0 then
89971: LD_VAR 0 3
89975: PUSH
89976: LD_VAR 0 4
89980: MINUS
89981: PUSH
89982: LD_INT 0
89984: LESS
89985: IFFALSE 89997
// min_y := 0 else
89987: LD_ADDR_VAR 0 8
89991: PUSH
89992: LD_INT 0
89994: ST_TO_ADDR
89995: GO 90013
// min_y := y - r ;
89997: LD_ADDR_VAR 0 8
90001: PUSH
90002: LD_VAR 0 3
90006: PUSH
90007: LD_VAR 0 4
90011: MINUS
90012: ST_TO_ADDR
// max_x := x + r ;
90013: LD_ADDR_VAR 0 9
90017: PUSH
90018: LD_VAR 0 2
90022: PUSH
90023: LD_VAR 0 4
90027: PLUS
90028: ST_TO_ADDR
// max_y := y + r ;
90029: LD_ADDR_VAR 0 10
90033: PUSH
90034: LD_VAR 0 3
90038: PUSH
90039: LD_VAR 0 4
90043: PLUS
90044: ST_TO_ADDR
// for _x = min_x to max_x do
90045: LD_ADDR_VAR 0 11
90049: PUSH
90050: DOUBLE
90051: LD_VAR 0 7
90055: DEC
90056: ST_TO_ADDR
90057: LD_VAR 0 9
90061: PUSH
90062: FOR_TO
90063: IFFALSE 90180
// for _y = min_y to max_y do
90065: LD_ADDR_VAR 0 12
90069: PUSH
90070: DOUBLE
90071: LD_VAR 0 8
90075: DEC
90076: ST_TO_ADDR
90077: LD_VAR 0 10
90081: PUSH
90082: FOR_TO
90083: IFFALSE 90176
// begin if not ValidHex ( _x , _y ) then
90085: LD_VAR 0 11
90089: PPUSH
90090: LD_VAR 0 12
90094: PPUSH
90095: CALL_OW 488
90099: NOT
90100: IFFALSE 90104
// continue ;
90102: GO 90082
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90104: LD_VAR 0 11
90108: PPUSH
90109: LD_VAR 0 12
90113: PPUSH
90114: CALL_OW 351
90118: PUSH
90119: LD_VAR 0 11
90123: PPUSH
90124: LD_VAR 0 12
90128: PPUSH
90129: CALL_OW 554
90133: AND
90134: IFFALSE 90174
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90136: LD_ADDR_VAR 0 13
90140: PUSH
90141: LD_VAR 0 13
90145: PPUSH
90146: LD_VAR 0 13
90150: PUSH
90151: LD_INT 1
90153: PLUS
90154: PPUSH
90155: LD_VAR 0 11
90159: PUSH
90160: LD_VAR 0 12
90164: PUSH
90165: EMPTY
90166: LIST
90167: LIST
90168: PPUSH
90169: CALL_OW 2
90173: ST_TO_ADDR
// end ;
90174: GO 90082
90176: POP
90177: POP
90178: GO 90062
90180: POP
90181: POP
// if not list then
90182: LD_VAR 0 13
90186: NOT
90187: IFFALSE 90191
// exit ;
90189: GO 90435
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
90191: LD_ADDR_VAR 0 13
90195: PUSH
90196: LD_VAR 0 1
90200: PPUSH
90201: LD_VAR 0 13
90205: PPUSH
90206: LD_INT 1
90208: PPUSH
90209: LD_INT 1
90211: PPUSH
90212: CALL 34932 0 4
90216: ST_TO_ADDR
// ComStop ( flame ) ;
90217: LD_VAR 0 1
90221: PPUSH
90222: CALL_OW 141
// for i in list do
90226: LD_ADDR_VAR 0 6
90230: PUSH
90231: LD_VAR 0 13
90235: PUSH
90236: FOR_IN
90237: IFFALSE 90268
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
90239: LD_VAR 0 1
90243: PPUSH
90244: LD_VAR 0 6
90248: PUSH
90249: LD_INT 1
90251: ARRAY
90252: PPUSH
90253: LD_VAR 0 6
90257: PUSH
90258: LD_INT 2
90260: ARRAY
90261: PPUSH
90262: CALL_OW 176
90266: GO 90236
90268: POP
90269: POP
// repeat wait ( 0 0$1 ) ;
90270: LD_INT 35
90272: PPUSH
90273: CALL_OW 67
// task := GetTaskList ( flame ) ;
90277: LD_ADDR_VAR 0 14
90281: PUSH
90282: LD_VAR 0 1
90286: PPUSH
90287: CALL_OW 437
90291: ST_TO_ADDR
// if not task then
90292: LD_VAR 0 14
90296: NOT
90297: IFFALSE 90301
// exit ;
90299: GO 90435
// if task [ 1 ] [ 1 ] <> | then
90301: LD_VAR 0 14
90305: PUSH
90306: LD_INT 1
90308: ARRAY
90309: PUSH
90310: LD_INT 1
90312: ARRAY
90313: PUSH
90314: LD_STRING |
90316: NONEQUAL
90317: IFFALSE 90321
// exit ;
90319: GO 90435
// _x := task [ 1 ] [ 2 ] ;
90321: LD_ADDR_VAR 0 11
90325: PUSH
90326: LD_VAR 0 14
90330: PUSH
90331: LD_INT 1
90333: ARRAY
90334: PUSH
90335: LD_INT 2
90337: ARRAY
90338: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
90339: LD_ADDR_VAR 0 12
90343: PUSH
90344: LD_VAR 0 14
90348: PUSH
90349: LD_INT 1
90351: ARRAY
90352: PUSH
90353: LD_INT 3
90355: ARRAY
90356: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
90357: LD_VAR 0 11
90361: PPUSH
90362: LD_VAR 0 12
90366: PPUSH
90367: CALL_OW 351
90371: NOT
90372: PUSH
90373: LD_VAR 0 11
90377: PPUSH
90378: LD_VAR 0 12
90382: PPUSH
90383: CALL_OW 554
90387: NOT
90388: OR
90389: IFFALSE 90423
// begin task := Delete ( task , 1 ) ;
90391: LD_ADDR_VAR 0 14
90395: PUSH
90396: LD_VAR 0 14
90400: PPUSH
90401: LD_INT 1
90403: PPUSH
90404: CALL_OW 3
90408: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
90409: LD_VAR 0 1
90413: PPUSH
90414: LD_VAR 0 14
90418: PPUSH
90419: CALL_OW 446
// end ; until not HasTask ( flame ) ;
90423: LD_VAR 0 1
90427: PPUSH
90428: CALL_OW 314
90432: NOT
90433: IFFALSE 90270
// end ;
90435: LD_VAR 0 5
90439: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
90440: LD_EXP 125
90444: NOT
90445: IFFALSE 90495
90447: GO 90449
90449: DISABLE
// begin initHack := true ;
90450: LD_ADDR_EXP 125
90454: PUSH
90455: LD_INT 1
90457: ST_TO_ADDR
// hackTanks := [ ] ;
90458: LD_ADDR_EXP 126
90462: PUSH
90463: EMPTY
90464: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
90465: LD_ADDR_EXP 127
90469: PUSH
90470: EMPTY
90471: ST_TO_ADDR
// hackLimit := 3 ;
90472: LD_ADDR_EXP 128
90476: PUSH
90477: LD_INT 3
90479: ST_TO_ADDR
// hackDist := 12 ;
90480: LD_ADDR_EXP 129
90484: PUSH
90485: LD_INT 12
90487: ST_TO_ADDR
// hackCounter := [ ] ;
90488: LD_ADDR_EXP 130
90492: PUSH
90493: EMPTY
90494: ST_TO_ADDR
// end ;
90495: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
90496: LD_EXP 125
90500: PUSH
90501: LD_INT 34
90503: PUSH
90504: LD_INT 99
90506: PUSH
90507: EMPTY
90508: LIST
90509: LIST
90510: PPUSH
90511: CALL_OW 69
90515: AND
90516: IFFALSE 90769
90518: GO 90520
90520: DISABLE
90521: LD_INT 0
90523: PPUSH
90524: PPUSH
// begin enable ;
90525: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
90526: LD_ADDR_VAR 0 1
90530: PUSH
90531: LD_INT 34
90533: PUSH
90534: LD_INT 99
90536: PUSH
90537: EMPTY
90538: LIST
90539: LIST
90540: PPUSH
90541: CALL_OW 69
90545: PUSH
90546: FOR_IN
90547: IFFALSE 90767
// begin if not i in hackTanks then
90549: LD_VAR 0 1
90553: PUSH
90554: LD_EXP 126
90558: IN
90559: NOT
90560: IFFALSE 90643
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
90562: LD_ADDR_EXP 126
90566: PUSH
90567: LD_EXP 126
90571: PPUSH
90572: LD_EXP 126
90576: PUSH
90577: LD_INT 1
90579: PLUS
90580: PPUSH
90581: LD_VAR 0 1
90585: PPUSH
90586: CALL_OW 1
90590: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
90591: LD_ADDR_EXP 127
90595: PUSH
90596: LD_EXP 127
90600: PPUSH
90601: LD_EXP 127
90605: PUSH
90606: LD_INT 1
90608: PLUS
90609: PPUSH
90610: EMPTY
90611: PPUSH
90612: CALL_OW 1
90616: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
90617: LD_ADDR_EXP 130
90621: PUSH
90622: LD_EXP 130
90626: PPUSH
90627: LD_EXP 130
90631: PUSH
90632: LD_INT 1
90634: PLUS
90635: PPUSH
90636: EMPTY
90637: PPUSH
90638: CALL_OW 1
90642: ST_TO_ADDR
// end ; if not IsOk ( i ) then
90643: LD_VAR 0 1
90647: PPUSH
90648: CALL_OW 302
90652: NOT
90653: IFFALSE 90666
// begin HackUnlinkAll ( i ) ;
90655: LD_VAR 0 1
90659: PPUSH
90660: CALL 90772 0 1
// continue ;
90664: GO 90546
// end ; HackCheckCapturedStatus ( i ) ;
90666: LD_VAR 0 1
90670: PPUSH
90671: CALL 91215 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
90675: LD_ADDR_VAR 0 2
90679: PUSH
90680: LD_INT 81
90682: PUSH
90683: LD_VAR 0 1
90687: PPUSH
90688: CALL_OW 255
90692: PUSH
90693: EMPTY
90694: LIST
90695: LIST
90696: PUSH
90697: LD_INT 33
90699: PUSH
90700: LD_INT 3
90702: PUSH
90703: EMPTY
90704: LIST
90705: LIST
90706: PUSH
90707: LD_INT 91
90709: PUSH
90710: LD_VAR 0 1
90714: PUSH
90715: LD_EXP 129
90719: PUSH
90720: EMPTY
90721: LIST
90722: LIST
90723: LIST
90724: PUSH
90725: LD_INT 50
90727: PUSH
90728: EMPTY
90729: LIST
90730: PUSH
90731: EMPTY
90732: LIST
90733: LIST
90734: LIST
90735: LIST
90736: PPUSH
90737: CALL_OW 69
90741: ST_TO_ADDR
// if not tmp then
90742: LD_VAR 0 2
90746: NOT
90747: IFFALSE 90751
// continue ;
90749: GO 90546
// HackLink ( i , tmp ) ;
90751: LD_VAR 0 1
90755: PPUSH
90756: LD_VAR 0 2
90760: PPUSH
90761: CALL 90908 0 2
// end ;
90765: GO 90546
90767: POP
90768: POP
// end ;
90769: PPOPN 2
90771: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
90772: LD_INT 0
90774: PPUSH
90775: PPUSH
90776: PPUSH
// if not hack in hackTanks then
90777: LD_VAR 0 1
90781: PUSH
90782: LD_EXP 126
90786: IN
90787: NOT
90788: IFFALSE 90792
// exit ;
90790: GO 90903
// index := GetElementIndex ( hackTanks , hack ) ;
90792: LD_ADDR_VAR 0 4
90796: PUSH
90797: LD_EXP 126
90801: PPUSH
90802: LD_VAR 0 1
90806: PPUSH
90807: CALL 34229 0 2
90811: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
90812: LD_EXP 127
90816: PUSH
90817: LD_VAR 0 4
90821: ARRAY
90822: IFFALSE 90903
// begin for i in hackTanksCaptured [ index ] do
90824: LD_ADDR_VAR 0 3
90828: PUSH
90829: LD_EXP 127
90833: PUSH
90834: LD_VAR 0 4
90838: ARRAY
90839: PUSH
90840: FOR_IN
90841: IFFALSE 90867
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
90843: LD_VAR 0 3
90847: PUSH
90848: LD_INT 1
90850: ARRAY
90851: PPUSH
90852: LD_VAR 0 3
90856: PUSH
90857: LD_INT 2
90859: ARRAY
90860: PPUSH
90861: CALL_OW 235
90865: GO 90840
90867: POP
90868: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
90869: LD_ADDR_EXP 127
90873: PUSH
90874: LD_EXP 127
90878: PPUSH
90879: LD_VAR 0 4
90883: PPUSH
90884: EMPTY
90885: PPUSH
90886: CALL_OW 1
90890: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
90891: LD_VAR 0 1
90895: PPUSH
90896: LD_INT 0
90898: PPUSH
90899: CALL_OW 505
// end ; end ;
90903: LD_VAR 0 2
90907: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
90908: LD_INT 0
90910: PPUSH
90911: PPUSH
90912: PPUSH
// if not hack in hackTanks or not vehicles then
90913: LD_VAR 0 1
90917: PUSH
90918: LD_EXP 126
90922: IN
90923: NOT
90924: PUSH
90925: LD_VAR 0 2
90929: NOT
90930: OR
90931: IFFALSE 90935
// exit ;
90933: GO 91210
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
90935: LD_ADDR_VAR 0 2
90939: PUSH
90940: LD_VAR 0 1
90944: PPUSH
90945: LD_VAR 0 2
90949: PPUSH
90950: LD_INT 1
90952: PPUSH
90953: LD_INT 1
90955: PPUSH
90956: CALL 34879 0 4
90960: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
90961: LD_ADDR_VAR 0 5
90965: PUSH
90966: LD_EXP 126
90970: PPUSH
90971: LD_VAR 0 1
90975: PPUSH
90976: CALL 34229 0 2
90980: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
90981: LD_EXP 127
90985: PUSH
90986: LD_VAR 0 5
90990: ARRAY
90991: PUSH
90992: LD_EXP 128
90996: LESS
90997: IFFALSE 91186
// begin for i := 1 to vehicles do
90999: LD_ADDR_VAR 0 4
91003: PUSH
91004: DOUBLE
91005: LD_INT 1
91007: DEC
91008: ST_TO_ADDR
91009: LD_VAR 0 2
91013: PUSH
91014: FOR_TO
91015: IFFALSE 91184
// begin if hackTanksCaptured [ index ] = hackLimit then
91017: LD_EXP 127
91021: PUSH
91022: LD_VAR 0 5
91026: ARRAY
91027: PUSH
91028: LD_EXP 128
91032: EQUAL
91033: IFFALSE 91037
// break ;
91035: GO 91184
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
91037: LD_ADDR_EXP 130
91041: PUSH
91042: LD_EXP 130
91046: PPUSH
91047: LD_VAR 0 5
91051: PPUSH
91052: LD_EXP 130
91056: PUSH
91057: LD_VAR 0 5
91061: ARRAY
91062: PUSH
91063: LD_INT 1
91065: PLUS
91066: PPUSH
91067: CALL_OW 1
91071: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
91072: LD_ADDR_EXP 127
91076: PUSH
91077: LD_EXP 127
91081: PPUSH
91082: LD_VAR 0 5
91086: PUSH
91087: LD_EXP 127
91091: PUSH
91092: LD_VAR 0 5
91096: ARRAY
91097: PUSH
91098: LD_INT 1
91100: PLUS
91101: PUSH
91102: EMPTY
91103: LIST
91104: LIST
91105: PPUSH
91106: LD_VAR 0 2
91110: PUSH
91111: LD_VAR 0 4
91115: ARRAY
91116: PUSH
91117: LD_VAR 0 2
91121: PUSH
91122: LD_VAR 0 4
91126: ARRAY
91127: PPUSH
91128: CALL_OW 255
91132: PUSH
91133: EMPTY
91134: LIST
91135: LIST
91136: PPUSH
91137: CALL 34444 0 3
91141: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
91142: LD_VAR 0 2
91146: PUSH
91147: LD_VAR 0 4
91151: ARRAY
91152: PPUSH
91153: LD_VAR 0 1
91157: PPUSH
91158: CALL_OW 255
91162: PPUSH
91163: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
91167: LD_VAR 0 2
91171: PUSH
91172: LD_VAR 0 4
91176: ARRAY
91177: PPUSH
91178: CALL_OW 141
// end ;
91182: GO 91014
91184: POP
91185: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
91186: LD_VAR 0 1
91190: PPUSH
91191: LD_EXP 127
91195: PUSH
91196: LD_VAR 0 5
91200: ARRAY
91201: PUSH
91202: LD_INT 0
91204: PLUS
91205: PPUSH
91206: CALL_OW 505
// end ;
91210: LD_VAR 0 3
91214: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
91215: LD_INT 0
91217: PPUSH
91218: PPUSH
91219: PPUSH
91220: PPUSH
// if not hack in hackTanks then
91221: LD_VAR 0 1
91225: PUSH
91226: LD_EXP 126
91230: IN
91231: NOT
91232: IFFALSE 91236
// exit ;
91234: GO 91476
// index := GetElementIndex ( hackTanks , hack ) ;
91236: LD_ADDR_VAR 0 4
91240: PUSH
91241: LD_EXP 126
91245: PPUSH
91246: LD_VAR 0 1
91250: PPUSH
91251: CALL 34229 0 2
91255: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
91256: LD_ADDR_VAR 0 3
91260: PUSH
91261: DOUBLE
91262: LD_EXP 127
91266: PUSH
91267: LD_VAR 0 4
91271: ARRAY
91272: INC
91273: ST_TO_ADDR
91274: LD_INT 1
91276: PUSH
91277: FOR_DOWNTO
91278: IFFALSE 91450
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
91280: LD_ADDR_VAR 0 5
91284: PUSH
91285: LD_EXP 127
91289: PUSH
91290: LD_VAR 0 4
91294: ARRAY
91295: PUSH
91296: LD_VAR 0 3
91300: ARRAY
91301: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
91302: LD_VAR 0 5
91306: PUSH
91307: LD_INT 1
91309: ARRAY
91310: PPUSH
91311: CALL_OW 302
91315: NOT
91316: PUSH
91317: LD_VAR 0 5
91321: PUSH
91322: LD_INT 1
91324: ARRAY
91325: PPUSH
91326: CALL_OW 255
91330: PUSH
91331: LD_VAR 0 1
91335: PPUSH
91336: CALL_OW 255
91340: NONEQUAL
91341: OR
91342: IFFALSE 91448
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
91344: LD_VAR 0 5
91348: PUSH
91349: LD_INT 1
91351: ARRAY
91352: PPUSH
91353: CALL_OW 305
91357: PUSH
91358: LD_VAR 0 5
91362: PUSH
91363: LD_INT 1
91365: ARRAY
91366: PPUSH
91367: CALL_OW 255
91371: PUSH
91372: LD_VAR 0 1
91376: PPUSH
91377: CALL_OW 255
91381: EQUAL
91382: AND
91383: IFFALSE 91407
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
91385: LD_VAR 0 5
91389: PUSH
91390: LD_INT 1
91392: ARRAY
91393: PPUSH
91394: LD_VAR 0 5
91398: PUSH
91399: LD_INT 2
91401: ARRAY
91402: PPUSH
91403: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
91407: LD_ADDR_EXP 127
91411: PUSH
91412: LD_EXP 127
91416: PPUSH
91417: LD_VAR 0 4
91421: PPUSH
91422: LD_EXP 127
91426: PUSH
91427: LD_VAR 0 4
91431: ARRAY
91432: PPUSH
91433: LD_VAR 0 3
91437: PPUSH
91438: CALL_OW 3
91442: PPUSH
91443: CALL_OW 1
91447: ST_TO_ADDR
// end ; end ;
91448: GO 91277
91450: POP
91451: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
91452: LD_VAR 0 1
91456: PPUSH
91457: LD_EXP 127
91461: PUSH
91462: LD_VAR 0 4
91466: ARRAY
91467: PUSH
91468: LD_INT 0
91470: PLUS
91471: PPUSH
91472: CALL_OW 505
// end ;
91476: LD_VAR 0 2
91480: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
91481: LD_INT 0
91483: PPUSH
91484: PPUSH
91485: PPUSH
91486: PPUSH
// if not hack in hackTanks then
91487: LD_VAR 0 1
91491: PUSH
91492: LD_EXP 126
91496: IN
91497: NOT
91498: IFFALSE 91502
// exit ;
91500: GO 91587
// index := GetElementIndex ( hackTanks , hack ) ;
91502: LD_ADDR_VAR 0 5
91506: PUSH
91507: LD_EXP 126
91511: PPUSH
91512: LD_VAR 0 1
91516: PPUSH
91517: CALL 34229 0 2
91521: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
91522: LD_ADDR_VAR 0 4
91526: PUSH
91527: DOUBLE
91528: LD_INT 1
91530: DEC
91531: ST_TO_ADDR
91532: LD_EXP 127
91536: PUSH
91537: LD_VAR 0 5
91541: ARRAY
91542: PUSH
91543: FOR_TO
91544: IFFALSE 91585
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
91546: LD_EXP 127
91550: PUSH
91551: LD_VAR 0 5
91555: ARRAY
91556: PUSH
91557: LD_VAR 0 4
91561: ARRAY
91562: PUSH
91563: LD_INT 1
91565: ARRAY
91566: PUSH
91567: LD_VAR 0 2
91571: EQUAL
91572: IFFALSE 91583
// KillUnit ( vehicle ) ;
91574: LD_VAR 0 2
91578: PPUSH
91579: CALL_OW 66
91583: GO 91543
91585: POP
91586: POP
// end ;
91587: LD_VAR 0 3
91591: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
91592: LD_EXP 131
91596: NOT
91597: IFFALSE 91632
91599: GO 91601
91601: DISABLE
// begin initMiner := true ;
91602: LD_ADDR_EXP 131
91606: PUSH
91607: LD_INT 1
91609: ST_TO_ADDR
// minersList := [ ] ;
91610: LD_ADDR_EXP 132
91614: PUSH
91615: EMPTY
91616: ST_TO_ADDR
// minerMinesList := [ ] ;
91617: LD_ADDR_EXP 133
91621: PUSH
91622: EMPTY
91623: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
91624: LD_ADDR_EXP 134
91628: PUSH
91629: LD_INT 5
91631: ST_TO_ADDR
// end ;
91632: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
91633: LD_EXP 131
91637: PUSH
91638: LD_INT 34
91640: PUSH
91641: LD_INT 81
91643: PUSH
91644: EMPTY
91645: LIST
91646: LIST
91647: PPUSH
91648: CALL_OW 69
91652: AND
91653: IFFALSE 92114
91655: GO 91657
91657: DISABLE
91658: LD_INT 0
91660: PPUSH
91661: PPUSH
91662: PPUSH
91663: PPUSH
// begin enable ;
91664: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
91665: LD_ADDR_VAR 0 1
91669: PUSH
91670: LD_INT 34
91672: PUSH
91673: LD_INT 81
91675: PUSH
91676: EMPTY
91677: LIST
91678: LIST
91679: PPUSH
91680: CALL_OW 69
91684: PUSH
91685: FOR_IN
91686: IFFALSE 91758
// begin if not i in minersList then
91688: LD_VAR 0 1
91692: PUSH
91693: LD_EXP 132
91697: IN
91698: NOT
91699: IFFALSE 91756
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
91701: LD_ADDR_EXP 132
91705: PUSH
91706: LD_EXP 132
91710: PPUSH
91711: LD_EXP 132
91715: PUSH
91716: LD_INT 1
91718: PLUS
91719: PPUSH
91720: LD_VAR 0 1
91724: PPUSH
91725: CALL_OW 1
91729: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
91730: LD_ADDR_EXP 133
91734: PUSH
91735: LD_EXP 133
91739: PPUSH
91740: LD_EXP 133
91744: PUSH
91745: LD_INT 1
91747: PLUS
91748: PPUSH
91749: EMPTY
91750: PPUSH
91751: CALL_OW 1
91755: ST_TO_ADDR
// end end ;
91756: GO 91685
91758: POP
91759: POP
// for i := minerMinesList downto 1 do
91760: LD_ADDR_VAR 0 1
91764: PUSH
91765: DOUBLE
91766: LD_EXP 133
91770: INC
91771: ST_TO_ADDR
91772: LD_INT 1
91774: PUSH
91775: FOR_DOWNTO
91776: IFFALSE 92112
// begin if IsLive ( minersList [ i ] ) then
91778: LD_EXP 132
91782: PUSH
91783: LD_VAR 0 1
91787: ARRAY
91788: PPUSH
91789: CALL_OW 300
91793: IFFALSE 91821
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
91795: LD_EXP 132
91799: PUSH
91800: LD_VAR 0 1
91804: ARRAY
91805: PPUSH
91806: LD_EXP 133
91810: PUSH
91811: LD_VAR 0 1
91815: ARRAY
91816: PPUSH
91817: CALL_OW 505
// if not minerMinesList [ i ] then
91821: LD_EXP 133
91825: PUSH
91826: LD_VAR 0 1
91830: ARRAY
91831: NOT
91832: IFFALSE 91836
// continue ;
91834: GO 91775
// for j := minerMinesList [ i ] downto 1 do
91836: LD_ADDR_VAR 0 2
91840: PUSH
91841: DOUBLE
91842: LD_EXP 133
91846: PUSH
91847: LD_VAR 0 1
91851: ARRAY
91852: INC
91853: ST_TO_ADDR
91854: LD_INT 1
91856: PUSH
91857: FOR_DOWNTO
91858: IFFALSE 92108
// begin side := GetSide ( minersList [ i ] ) ;
91860: LD_ADDR_VAR 0 3
91864: PUSH
91865: LD_EXP 132
91869: PUSH
91870: LD_VAR 0 1
91874: ARRAY
91875: PPUSH
91876: CALL_OW 255
91880: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
91881: LD_ADDR_VAR 0 4
91885: PUSH
91886: LD_EXP 133
91890: PUSH
91891: LD_VAR 0 1
91895: ARRAY
91896: PUSH
91897: LD_VAR 0 2
91901: ARRAY
91902: PUSH
91903: LD_INT 1
91905: ARRAY
91906: PPUSH
91907: LD_EXP 133
91911: PUSH
91912: LD_VAR 0 1
91916: ARRAY
91917: PUSH
91918: LD_VAR 0 2
91922: ARRAY
91923: PUSH
91924: LD_INT 2
91926: ARRAY
91927: PPUSH
91928: CALL_OW 428
91932: ST_TO_ADDR
// if not tmp then
91933: LD_VAR 0 4
91937: NOT
91938: IFFALSE 91942
// continue ;
91940: GO 91857
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
91942: LD_VAR 0 4
91946: PUSH
91947: LD_INT 81
91949: PUSH
91950: LD_VAR 0 3
91954: PUSH
91955: EMPTY
91956: LIST
91957: LIST
91958: PPUSH
91959: CALL_OW 69
91963: IN
91964: PUSH
91965: LD_EXP 133
91969: PUSH
91970: LD_VAR 0 1
91974: ARRAY
91975: PUSH
91976: LD_VAR 0 2
91980: ARRAY
91981: PUSH
91982: LD_INT 1
91984: ARRAY
91985: PPUSH
91986: LD_EXP 133
91990: PUSH
91991: LD_VAR 0 1
91995: ARRAY
91996: PUSH
91997: LD_VAR 0 2
92001: ARRAY
92002: PUSH
92003: LD_INT 2
92005: ARRAY
92006: PPUSH
92007: CALL_OW 458
92011: AND
92012: IFFALSE 92106
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
92014: LD_EXP 133
92018: PUSH
92019: LD_VAR 0 1
92023: ARRAY
92024: PUSH
92025: LD_VAR 0 2
92029: ARRAY
92030: PUSH
92031: LD_INT 1
92033: ARRAY
92034: PPUSH
92035: LD_EXP 133
92039: PUSH
92040: LD_VAR 0 1
92044: ARRAY
92045: PUSH
92046: LD_VAR 0 2
92050: ARRAY
92051: PUSH
92052: LD_INT 2
92054: ARRAY
92055: PPUSH
92056: LD_VAR 0 3
92060: PPUSH
92061: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
92065: LD_ADDR_EXP 133
92069: PUSH
92070: LD_EXP 133
92074: PPUSH
92075: LD_VAR 0 1
92079: PPUSH
92080: LD_EXP 133
92084: PUSH
92085: LD_VAR 0 1
92089: ARRAY
92090: PPUSH
92091: LD_VAR 0 2
92095: PPUSH
92096: CALL_OW 3
92100: PPUSH
92101: CALL_OW 1
92105: ST_TO_ADDR
// end ; end ;
92106: GO 91857
92108: POP
92109: POP
// end ;
92110: GO 91775
92112: POP
92113: POP
// end ;
92114: PPOPN 4
92116: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
92117: LD_INT 0
92119: PPUSH
92120: PPUSH
// result := false ;
92121: LD_ADDR_VAR 0 4
92125: PUSH
92126: LD_INT 0
92128: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
92129: LD_VAR 0 1
92133: PPUSH
92134: CALL_OW 264
92138: PUSH
92139: LD_INT 81
92141: EQUAL
92142: NOT
92143: IFFALSE 92147
// exit ;
92145: GO 92387
// index := GetElementIndex ( minersList , unit ) ;
92147: LD_ADDR_VAR 0 5
92151: PUSH
92152: LD_EXP 132
92156: PPUSH
92157: LD_VAR 0 1
92161: PPUSH
92162: CALL 34229 0 2
92166: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
92167: LD_EXP 133
92171: PUSH
92172: LD_VAR 0 5
92176: ARRAY
92177: PUSH
92178: LD_EXP 134
92182: GREATEREQUAL
92183: IFFALSE 92187
// exit ;
92185: GO 92387
// ComMoveXY ( unit , x , y ) ;
92187: LD_VAR 0 1
92191: PPUSH
92192: LD_VAR 0 2
92196: PPUSH
92197: LD_VAR 0 3
92201: PPUSH
92202: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
92206: LD_INT 35
92208: PPUSH
92209: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
92213: LD_VAR 0 1
92217: PPUSH
92218: LD_VAR 0 2
92222: PPUSH
92223: LD_VAR 0 3
92227: PPUSH
92228: CALL 65990 0 3
92232: NOT
92233: PUSH
92234: LD_VAR 0 1
92238: PPUSH
92239: CALL_OW 314
92243: AND
92244: IFFALSE 92248
// exit ;
92246: GO 92387
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
92248: LD_VAR 0 2
92252: PPUSH
92253: LD_VAR 0 3
92257: PPUSH
92258: CALL_OW 428
92262: PUSH
92263: LD_VAR 0 1
92267: EQUAL
92268: PUSH
92269: LD_VAR 0 1
92273: PPUSH
92274: CALL_OW 314
92278: NOT
92279: AND
92280: IFFALSE 92206
// PlaySoundXY ( x , y , PlantMine ) ;
92282: LD_VAR 0 2
92286: PPUSH
92287: LD_VAR 0 3
92291: PPUSH
92292: LD_STRING PlantMine
92294: PPUSH
92295: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
92299: LD_VAR 0 2
92303: PPUSH
92304: LD_VAR 0 3
92308: PPUSH
92309: LD_VAR 0 1
92313: PPUSH
92314: CALL_OW 255
92318: PPUSH
92319: LD_INT 0
92321: PPUSH
92322: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
92326: LD_ADDR_EXP 133
92330: PUSH
92331: LD_EXP 133
92335: PPUSH
92336: LD_VAR 0 5
92340: PUSH
92341: LD_EXP 133
92345: PUSH
92346: LD_VAR 0 5
92350: ARRAY
92351: PUSH
92352: LD_INT 1
92354: PLUS
92355: PUSH
92356: EMPTY
92357: LIST
92358: LIST
92359: PPUSH
92360: LD_VAR 0 2
92364: PUSH
92365: LD_VAR 0 3
92369: PUSH
92370: EMPTY
92371: LIST
92372: LIST
92373: PPUSH
92374: CALL 34444 0 3
92378: ST_TO_ADDR
// result := true ;
92379: LD_ADDR_VAR 0 4
92383: PUSH
92384: LD_INT 1
92386: ST_TO_ADDR
// end ;
92387: LD_VAR 0 4
92391: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
92392: LD_INT 0
92394: PPUSH
92395: PPUSH
92396: PPUSH
// if not unit in minersList then
92397: LD_VAR 0 1
92401: PUSH
92402: LD_EXP 132
92406: IN
92407: NOT
92408: IFFALSE 92412
// exit ;
92410: GO 92804
// index := GetElementIndex ( minersList , unit ) ;
92412: LD_ADDR_VAR 0 6
92416: PUSH
92417: LD_EXP 132
92421: PPUSH
92422: LD_VAR 0 1
92426: PPUSH
92427: CALL 34229 0 2
92431: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
92432: LD_ADDR_VAR 0 5
92436: PUSH
92437: DOUBLE
92438: LD_EXP 133
92442: PUSH
92443: LD_VAR 0 6
92447: ARRAY
92448: INC
92449: ST_TO_ADDR
92450: LD_INT 1
92452: PUSH
92453: FOR_DOWNTO
92454: IFFALSE 92615
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
92456: LD_EXP 133
92460: PUSH
92461: LD_VAR 0 6
92465: ARRAY
92466: PUSH
92467: LD_VAR 0 5
92471: ARRAY
92472: PUSH
92473: LD_INT 1
92475: ARRAY
92476: PUSH
92477: LD_VAR 0 2
92481: EQUAL
92482: PUSH
92483: LD_EXP 133
92487: PUSH
92488: LD_VAR 0 6
92492: ARRAY
92493: PUSH
92494: LD_VAR 0 5
92498: ARRAY
92499: PUSH
92500: LD_INT 2
92502: ARRAY
92503: PUSH
92504: LD_VAR 0 3
92508: EQUAL
92509: AND
92510: IFFALSE 92613
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92512: LD_EXP 133
92516: PUSH
92517: LD_VAR 0 6
92521: ARRAY
92522: PUSH
92523: LD_VAR 0 5
92527: ARRAY
92528: PUSH
92529: LD_INT 1
92531: ARRAY
92532: PPUSH
92533: LD_EXP 133
92537: PUSH
92538: LD_VAR 0 6
92542: ARRAY
92543: PUSH
92544: LD_VAR 0 5
92548: ARRAY
92549: PUSH
92550: LD_INT 2
92552: ARRAY
92553: PPUSH
92554: LD_VAR 0 1
92558: PPUSH
92559: CALL_OW 255
92563: PPUSH
92564: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92568: LD_ADDR_EXP 133
92572: PUSH
92573: LD_EXP 133
92577: PPUSH
92578: LD_VAR 0 6
92582: PPUSH
92583: LD_EXP 133
92587: PUSH
92588: LD_VAR 0 6
92592: ARRAY
92593: PPUSH
92594: LD_VAR 0 5
92598: PPUSH
92599: CALL_OW 3
92603: PPUSH
92604: CALL_OW 1
92608: ST_TO_ADDR
// exit ;
92609: POP
92610: POP
92611: GO 92804
// end ; end ;
92613: GO 92453
92615: POP
92616: POP
// for i := minerMinesList [ index ] downto 1 do
92617: LD_ADDR_VAR 0 5
92621: PUSH
92622: DOUBLE
92623: LD_EXP 133
92627: PUSH
92628: LD_VAR 0 6
92632: ARRAY
92633: INC
92634: ST_TO_ADDR
92635: LD_INT 1
92637: PUSH
92638: FOR_DOWNTO
92639: IFFALSE 92802
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
92641: LD_EXP 133
92645: PUSH
92646: LD_VAR 0 6
92650: ARRAY
92651: PUSH
92652: LD_VAR 0 5
92656: ARRAY
92657: PUSH
92658: LD_INT 1
92660: ARRAY
92661: PPUSH
92662: LD_EXP 133
92666: PUSH
92667: LD_VAR 0 6
92671: ARRAY
92672: PUSH
92673: LD_VAR 0 5
92677: ARRAY
92678: PUSH
92679: LD_INT 2
92681: ARRAY
92682: PPUSH
92683: LD_VAR 0 2
92687: PPUSH
92688: LD_VAR 0 3
92692: PPUSH
92693: CALL_OW 298
92697: PUSH
92698: LD_INT 6
92700: LESS
92701: IFFALSE 92800
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92703: LD_EXP 133
92707: PUSH
92708: LD_VAR 0 6
92712: ARRAY
92713: PUSH
92714: LD_VAR 0 5
92718: ARRAY
92719: PUSH
92720: LD_INT 1
92722: ARRAY
92723: PPUSH
92724: LD_EXP 133
92728: PUSH
92729: LD_VAR 0 6
92733: ARRAY
92734: PUSH
92735: LD_VAR 0 5
92739: ARRAY
92740: PUSH
92741: LD_INT 2
92743: ARRAY
92744: PPUSH
92745: LD_VAR 0 1
92749: PPUSH
92750: CALL_OW 255
92754: PPUSH
92755: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92759: LD_ADDR_EXP 133
92763: PUSH
92764: LD_EXP 133
92768: PPUSH
92769: LD_VAR 0 6
92773: PPUSH
92774: LD_EXP 133
92778: PUSH
92779: LD_VAR 0 6
92783: ARRAY
92784: PPUSH
92785: LD_VAR 0 5
92789: PPUSH
92790: CALL_OW 3
92794: PPUSH
92795: CALL_OW 1
92799: ST_TO_ADDR
// end ; end ;
92800: GO 92638
92802: POP
92803: POP
// end ;
92804: LD_VAR 0 4
92808: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
92809: LD_INT 0
92811: PPUSH
92812: PPUSH
92813: PPUSH
92814: PPUSH
92815: PPUSH
92816: PPUSH
92817: PPUSH
92818: PPUSH
92819: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
92820: LD_VAR 0 1
92824: PPUSH
92825: CALL_OW 264
92829: PUSH
92830: LD_INT 81
92832: EQUAL
92833: NOT
92834: PUSH
92835: LD_VAR 0 1
92839: PUSH
92840: LD_EXP 132
92844: IN
92845: NOT
92846: OR
92847: IFFALSE 92851
// exit ;
92849: GO 93173
// index := GetElementIndex ( minersList , unit ) ;
92851: LD_ADDR_VAR 0 6
92855: PUSH
92856: LD_EXP 132
92860: PPUSH
92861: LD_VAR 0 1
92865: PPUSH
92866: CALL 34229 0 2
92870: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
92871: LD_ADDR_VAR 0 8
92875: PUSH
92876: LD_EXP 134
92880: PUSH
92881: LD_EXP 133
92885: PUSH
92886: LD_VAR 0 6
92890: ARRAY
92891: MINUS
92892: ST_TO_ADDR
// if not minesFreeAmount then
92893: LD_VAR 0 8
92897: NOT
92898: IFFALSE 92902
// exit ;
92900: GO 93173
// tmp := [ ] ;
92902: LD_ADDR_VAR 0 7
92906: PUSH
92907: EMPTY
92908: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
92909: LD_ADDR_VAR 0 5
92913: PUSH
92914: DOUBLE
92915: LD_INT 1
92917: DEC
92918: ST_TO_ADDR
92919: LD_VAR 0 8
92923: PUSH
92924: FOR_TO
92925: IFFALSE 93120
// begin _d := rand ( 0 , 5 ) ;
92927: LD_ADDR_VAR 0 11
92931: PUSH
92932: LD_INT 0
92934: PPUSH
92935: LD_INT 5
92937: PPUSH
92938: CALL_OW 12
92942: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
92943: LD_ADDR_VAR 0 12
92947: PUSH
92948: LD_INT 2
92950: PPUSH
92951: LD_INT 6
92953: PPUSH
92954: CALL_OW 12
92958: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
92959: LD_ADDR_VAR 0 9
92963: PUSH
92964: LD_VAR 0 2
92968: PPUSH
92969: LD_VAR 0 11
92973: PPUSH
92974: LD_VAR 0 12
92978: PPUSH
92979: CALL_OW 272
92983: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
92984: LD_ADDR_VAR 0 10
92988: PUSH
92989: LD_VAR 0 3
92993: PPUSH
92994: LD_VAR 0 11
92998: PPUSH
92999: LD_VAR 0 12
93003: PPUSH
93004: CALL_OW 273
93008: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
93009: LD_VAR 0 9
93013: PPUSH
93014: LD_VAR 0 10
93018: PPUSH
93019: CALL_OW 488
93023: PUSH
93024: LD_VAR 0 9
93028: PUSH
93029: LD_VAR 0 10
93033: PUSH
93034: EMPTY
93035: LIST
93036: LIST
93037: PUSH
93038: LD_VAR 0 7
93042: IN
93043: NOT
93044: AND
93045: PUSH
93046: LD_VAR 0 9
93050: PPUSH
93051: LD_VAR 0 10
93055: PPUSH
93056: CALL_OW 458
93060: NOT
93061: AND
93062: IFFALSE 93104
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
93064: LD_ADDR_VAR 0 7
93068: PUSH
93069: LD_VAR 0 7
93073: PPUSH
93074: LD_VAR 0 7
93078: PUSH
93079: LD_INT 1
93081: PLUS
93082: PPUSH
93083: LD_VAR 0 9
93087: PUSH
93088: LD_VAR 0 10
93092: PUSH
93093: EMPTY
93094: LIST
93095: LIST
93096: PPUSH
93097: CALL_OW 1
93101: ST_TO_ADDR
93102: GO 93118
// i := i - 1 ;
93104: LD_ADDR_VAR 0 5
93108: PUSH
93109: LD_VAR 0 5
93113: PUSH
93114: LD_INT 1
93116: MINUS
93117: ST_TO_ADDR
// end ;
93118: GO 92924
93120: POP
93121: POP
// for i in tmp do
93122: LD_ADDR_VAR 0 5
93126: PUSH
93127: LD_VAR 0 7
93131: PUSH
93132: FOR_IN
93133: IFFALSE 93171
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
93135: LD_VAR 0 1
93139: PPUSH
93140: LD_VAR 0 5
93144: PUSH
93145: LD_INT 1
93147: ARRAY
93148: PPUSH
93149: LD_VAR 0 5
93153: PUSH
93154: LD_INT 2
93156: ARRAY
93157: PPUSH
93158: CALL 92117 0 3
93162: NOT
93163: IFFALSE 93169
// exit ;
93165: POP
93166: POP
93167: GO 93173
93169: GO 93132
93171: POP
93172: POP
// end ;
93173: LD_VAR 0 4
93177: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
93178: LD_INT 0
93180: PPUSH
93181: PPUSH
93182: PPUSH
93183: PPUSH
93184: PPUSH
93185: PPUSH
93186: PPUSH
93187: PPUSH
93188: PPUSH
// if GetClass ( unit ) <> class_sniper then
93189: LD_VAR 0 1
93193: PPUSH
93194: CALL_OW 257
93198: PUSH
93199: LD_INT 5
93201: NONEQUAL
93202: IFFALSE 93206
// exit ;
93204: GO 93672
// dist := 8 ;
93206: LD_ADDR_VAR 0 5
93210: PUSH
93211: LD_INT 8
93213: ST_TO_ADDR
// viewRange := 12 ;
93214: LD_ADDR_VAR 0 8
93218: PUSH
93219: LD_INT 12
93221: ST_TO_ADDR
// side := GetSide ( unit ) ;
93222: LD_ADDR_VAR 0 6
93226: PUSH
93227: LD_VAR 0 1
93231: PPUSH
93232: CALL_OW 255
93236: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
93237: LD_INT 61
93239: PPUSH
93240: LD_VAR 0 6
93244: PPUSH
93245: CALL_OW 321
93249: PUSH
93250: LD_INT 2
93252: EQUAL
93253: IFFALSE 93263
// viewRange := 16 ;
93255: LD_ADDR_VAR 0 8
93259: PUSH
93260: LD_INT 16
93262: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
93263: LD_VAR 0 1
93267: PPUSH
93268: LD_VAR 0 2
93272: PPUSH
93273: LD_VAR 0 3
93277: PPUSH
93278: CALL_OW 297
93282: PUSH
93283: LD_VAR 0 5
93287: GREATER
93288: IFFALSE 93367
// begin ComMoveXY ( unit , x , y ) ;
93290: LD_VAR 0 1
93294: PPUSH
93295: LD_VAR 0 2
93299: PPUSH
93300: LD_VAR 0 3
93304: PPUSH
93305: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
93309: LD_INT 35
93311: PPUSH
93312: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
93316: LD_VAR 0 1
93320: PPUSH
93321: LD_VAR 0 2
93325: PPUSH
93326: LD_VAR 0 3
93330: PPUSH
93331: CALL 65990 0 3
93335: NOT
93336: IFFALSE 93340
// exit ;
93338: GO 93672
// until GetDistUnitXY ( unit , x , y ) < dist ;
93340: LD_VAR 0 1
93344: PPUSH
93345: LD_VAR 0 2
93349: PPUSH
93350: LD_VAR 0 3
93354: PPUSH
93355: CALL_OW 297
93359: PUSH
93360: LD_VAR 0 5
93364: LESS
93365: IFFALSE 93309
// end ; ComTurnXY ( unit , x , y ) ;
93367: LD_VAR 0 1
93371: PPUSH
93372: LD_VAR 0 2
93376: PPUSH
93377: LD_VAR 0 3
93381: PPUSH
93382: CALL_OW 118
// repeat if Multiplayer then
93386: LD_OWVAR 4
93390: IFFALSE 93401
// wait ( 35 ) else
93392: LD_INT 35
93394: PPUSH
93395: CALL_OW 67
93399: GO 93408
// wait ( 5 ) ;
93401: LD_INT 5
93403: PPUSH
93404: CALL_OW 67
// _d := GetDir ( unit ) ;
93408: LD_ADDR_VAR 0 11
93412: PUSH
93413: LD_VAR 0 1
93417: PPUSH
93418: CALL_OW 254
93422: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
93423: LD_ADDR_VAR 0 7
93427: PUSH
93428: LD_VAR 0 1
93432: PPUSH
93433: CALL_OW 250
93437: PPUSH
93438: LD_VAR 0 1
93442: PPUSH
93443: CALL_OW 251
93447: PPUSH
93448: LD_VAR 0 2
93452: PPUSH
93453: LD_VAR 0 3
93457: PPUSH
93458: CALL 68598 0 4
93462: ST_TO_ADDR
// until dir = _d ;
93463: LD_VAR 0 7
93467: PUSH
93468: LD_VAR 0 11
93472: EQUAL
93473: IFFALSE 93386
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
93475: LD_ADDR_VAR 0 9
93479: PUSH
93480: LD_VAR 0 1
93484: PPUSH
93485: CALL_OW 250
93489: PPUSH
93490: LD_VAR 0 7
93494: PPUSH
93495: LD_VAR 0 5
93499: PPUSH
93500: CALL_OW 272
93504: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
93505: LD_ADDR_VAR 0 10
93509: PUSH
93510: LD_VAR 0 1
93514: PPUSH
93515: CALL_OW 251
93519: PPUSH
93520: LD_VAR 0 7
93524: PPUSH
93525: LD_VAR 0 5
93529: PPUSH
93530: CALL_OW 273
93534: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93535: LD_VAR 0 9
93539: PPUSH
93540: LD_VAR 0 10
93544: PPUSH
93545: CALL_OW 488
93549: NOT
93550: IFFALSE 93554
// exit ;
93552: GO 93672
// ComAnimCustom ( unit , 1 ) ;
93554: LD_VAR 0 1
93558: PPUSH
93559: LD_INT 1
93561: PPUSH
93562: CALL_OW 592
// p := 0 ;
93566: LD_ADDR_VAR 0 12
93570: PUSH
93571: LD_INT 0
93573: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
93574: LD_VAR 0 9
93578: PPUSH
93579: LD_VAR 0 10
93583: PPUSH
93584: LD_VAR 0 6
93588: PPUSH
93589: LD_VAR 0 8
93593: PPUSH
93594: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
93598: LD_INT 35
93600: PPUSH
93601: CALL_OW 67
// p := Inc ( p ) ;
93605: LD_ADDR_VAR 0 12
93609: PUSH
93610: LD_VAR 0 12
93614: PPUSH
93615: CALL 68554 0 1
93619: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
93620: LD_VAR 0 12
93624: PUSH
93625: LD_INT 3
93627: EQUAL
93628: PUSH
93629: LD_VAR 0 1
93633: PPUSH
93634: CALL_OW 302
93638: NOT
93639: OR
93640: PUSH
93641: LD_VAR 0 1
93645: PPUSH
93646: CALL_OW 301
93650: OR
93651: IFFALSE 93598
// RemoveSeeing ( _x , _y , side ) ;
93653: LD_VAR 0 9
93657: PPUSH
93658: LD_VAR 0 10
93662: PPUSH
93663: LD_VAR 0 6
93667: PPUSH
93668: CALL_OW 331
// end ; end_of_file
93672: LD_VAR 0 4
93676: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
93677: LD_VAR 0 1
93681: PPUSH
93682: LD_VAR 0 2
93686: PPUSH
93687: LD_VAR 0 3
93691: PPUSH
93692: LD_VAR 0 4
93696: PPUSH
93697: LD_VAR 0 5
93701: PPUSH
93702: LD_VAR 0 6
93706: PPUSH
93707: CALL 72455 0 6
// end ;
93711: PPOPN 6
93713: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
93714: LD_INT 0
93716: PPUSH
// begin if not units then
93717: LD_VAR 0 1
93721: NOT
93722: IFFALSE 93726
// exit ;
93724: GO 93726
// end ;
93726: PPOPN 7
93728: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
93729: CALL 72342 0 0
// end ;
93733: PPOPN 1
93735: END
