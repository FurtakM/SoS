// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10021 0 2
// PrepareArabian ;
  32: CALL 408 0 0
// PrepareRussian ;
  36: CALL 10812 0 0
// Action ;
  40: CALL 19003 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// end ; end_of_file
 403: LD_VAR 0 1
 407: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 408: LD_INT 0
 410: PPUSH
 411: PPUSH
 412: PPUSH
 413: PPUSH
 414: PPUSH
 415: PPUSH
 416: PPUSH
 417: PPUSH
 418: PPUSH
 419: PPUSH
 420: PPUSH
 421: PPUSH
// uc_nation := 2 ;
 422: LD_ADDR_OWVAR 21
 426: PUSH
 427: LD_INT 2
 429: ST_TO_ADDR
// uc_side := 5 ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_INT 5
 437: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 438: LD_ADDR_EXP 41
 442: PUSH
 443: LD_STRING Abdul
 445: PPUSH
 446: LD_INT 0
 448: PPUSH
 449: LD_STRING 
 451: PPUSH
 452: CALL 29102 0 3
 456: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 457: LD_ADDR_EXP 43
 461: PUSH
 462: LD_STRING Omar
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: LD_STRING 
 470: PPUSH
 471: CALL 29102 0 3
 475: ST_TO_ADDR
// uc_side := 2 ;
 476: LD_ADDR_OWVAR 20
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 484: LD_ADDR_EXP 33
 488: PUSH
 489: LD_STRING Heike
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 2
 502: PPUSH
 503: CALL 29102 0 3
 507: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 508: LD_ADDR_EXP 36
 512: PUSH
 513: LD_STRING Ibrahim
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 2
 526: PPUSH
 527: CALL 29102 0 3
 531: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 532: LD_ADDR_EXP 34
 536: PUSH
 537: LD_STRING Givi
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 2
 550: PPUSH
 551: CALL 29102 0 3
 555: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 556: LD_ADDR_EXP 37
 560: PUSH
 561: LD_STRING Kamil
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 2
 574: PPUSH
 575: CALL 29102 0 3
 579: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 580: LD_ADDR_EXP 38
 584: PUSH
 585: LD_STRING Kaia
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 2
 598: PPUSH
 599: CALL 29102 0 3
 603: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 604: LD_ADDR_EXP 39
 608: PUSH
 609: LD_STRING Sophia
 611: PPUSH
 612: LD_EXP 1
 616: NOT
 617: PPUSH
 618: LD_EXP 2
 622: PPUSH
 623: CALL 29102 0 3
 627: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 628: LD_ADDR_EXP 40
 632: PUSH
 633: LD_STRING Markov
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_EXP 2
 646: PPUSH
 647: CALL 29102 0 3
 651: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 652: LD_ADDR_EXP 45
 656: PUSH
 657: LD_STRING Aviradze
 659: PPUSH
 660: LD_EXP 1
 664: NOT
 665: PPUSH
 666: LD_EXP 2
 670: PPUSH
 671: CALL 29102 0 3
 675: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 676: LD_ADDR_EXP 44
 680: PUSH
 681: LD_STRING Kurt
 683: PPUSH
 684: LD_EXP 1
 688: NOT
 689: PPUSH
 690: LD_EXP 2
 694: PPUSH
 695: CALL 29102 0 3
 699: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 700: LD_ADDR_EXP 35
 704: PUSH
 705: LD_STRING Mike
 707: PPUSH
 708: LD_EXP 1
 712: NOT
 713: PPUSH
 714: LD_EXP 2
 718: PPUSH
 719: CALL 29102 0 3
 723: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 724: LD_ADDR_EXP 42
 728: PUSH
 729: LD_STRING Olaf
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: LD_STRING 
 737: PPUSH
 738: CALL 29102 0 3
 742: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 743: LD_ADDR_EXP 48
 747: PUSH
 748: LD_STRING 05_others
 750: PPUSH
 751: CALL_OW 31
 755: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 756: LD_ADDR_EXP 49
 760: PUSH
 761: LD_STRING 05_apes
 763: PPUSH
 764: CALL_OW 31
 768: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 769: LD_ADDR_VAR 0 5
 773: PUSH
 774: LD_STRING 05_Radar
 776: PPUSH
 777: LD_EXP 1
 781: PPUSH
 782: CALL_OW 30
 786: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 787: LD_ADDR_VAR 0 6
 791: PUSH
 792: LD_STRING 05_RemoteControl
 794: PPUSH
 795: LD_EXP 1
 799: PPUSH
 800: CALL_OW 30
 804: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 805: LD_ADDR_VAR 0 7
 809: PUSH
 810: LD_STRING 05_DrugsTested
 812: PPUSH
 813: LD_EXP 1
 817: PPUSH
 818: CALL_OW 30
 822: ST_TO_ADDR
// if hasDrugs then
 823: LD_VAR 0 7
 827: IFFALSE 842
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 829: LD_INT 5
 831: PPUSH
 832: LD_INT 2
 834: PPUSH
 835: LD_INT 2
 837: PPUSH
 838: CALL_OW 322
// if hasRadar then
 842: LD_VAR 0 5
 846: IFFALSE 861
// SetTech ( tech_radar , 2 , state_researched ) ;
 848: LD_INT 6
 850: PPUSH
 851: LD_INT 2
 853: PPUSH
 854: LD_INT 2
 856: PPUSH
 857: CALL_OW 322
// if hasRemote then
 861: LD_VAR 0 6
 865: IFFALSE 880
// SetTech ( tech_remCont , 2 , state_researched ) ;
 867: LD_INT 15
 869: PPUSH
 870: LD_INT 2
 872: PPUSH
 873: LD_INT 2
 875: PPUSH
 876: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 880: LD_ADDR_VAR 0 12
 884: PUSH
 885: LD_INT 5
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 517
 895: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 896: LD_ADDR_VAR 0 2
 900: PUSH
 901: DOUBLE
 902: LD_INT 1
 904: DEC
 905: ST_TO_ADDR
 906: LD_VAR 0 12
 910: PUSH
 911: LD_INT 1
 913: ARRAY
 914: PUSH
 915: FOR_TO
 916: IFFALSE 993
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 918: LD_VAR 0 12
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: PUSH
 927: LD_VAR 0 2
 931: ARRAY
 932: PPUSH
 933: LD_VAR 0 12
 937: PUSH
 938: LD_INT 2
 940: ARRAY
 941: PUSH
 942: LD_VAR 0 2
 946: ARRAY
 947: PPUSH
 948: CALL_OW 351
 952: IFFALSE 991
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 954: LD_VAR 0 12
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PUSH
 963: LD_VAR 0 2
 967: ARRAY
 968: PPUSH
 969: LD_VAR 0 12
 973: PUSH
 974: LD_INT 2
 976: ARRAY
 977: PUSH
 978: LD_VAR 0 2
 982: ARRAY
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: CALL_OW 244
 991: GO 915
 993: POP
 994: POP
// base := [ ] ;
 995: LD_ADDR_VAR 0 4
 999: PUSH
1000: EMPTY
1001: ST_TO_ADDR
// if debug then
1002: LD_EXP 1
1006: IFFALSE 1056
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1008: LD_ADDR_VAR 0 4
1012: PUSH
1013: LD_INT 1
1015: PUSH
1016: LD_INT 51
1018: PUSH
1019: LD_INT 77
1021: PUSH
1022: LD_INT 1
1024: PUSH
1025: LD_INT 3
1027: PUSH
1028: LD_INT 3
1030: PUSH
1031: LD_INT 0
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: LD_INT 0
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: PUSH
1051: EMPTY
1052: LIST
1053: ST_TO_ADDR
// end else
1054: GO 1072
// if buildingsFromPrev then
1056: LD_EXP 30
1060: IFFALSE 1072
// base := buildingsFromPrev ;
1062: LD_ADDR_VAR 0 4
1066: PUSH
1067: LD_EXP 30
1071: ST_TO_ADDR
// if base then
1072: LD_VAR 0 4
1076: IFFALSE 1274
// for i := 1 to base do
1078: LD_ADDR_VAR 0 2
1082: PUSH
1083: DOUBLE
1084: LD_INT 1
1086: DEC
1087: ST_TO_ADDR
1088: LD_VAR 0 4
1092: PUSH
1093: FOR_TO
1094: IFFALSE 1272
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1096: LD_ADDR_VAR 0 4
1100: PUSH
1101: LD_VAR 0 4
1105: PPUSH
1106: LD_VAR 0 2
1110: PPUSH
1111: LD_VAR 0 4
1115: PUSH
1116: LD_VAR 0 2
1120: ARRAY
1121: PUSH
1122: LD_INT 1
1124: ARRAY
1125: PUSH
1126: LD_VAR 0 4
1130: PUSH
1131: LD_VAR 0 2
1135: ARRAY
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PUSH
1141: LD_INT 155
1143: PLUS
1144: PUSH
1145: LD_VAR 0 4
1149: PUSH
1150: LD_VAR 0 2
1154: ARRAY
1155: PUSH
1156: LD_INT 3
1158: ARRAY
1159: PUSH
1160: LD_INT 3
1162: PLUS
1163: PUSH
1164: LD_VAR 0 4
1168: PUSH
1169: LD_VAR 0 2
1173: ARRAY
1174: PUSH
1175: LD_INT 4
1177: ARRAY
1178: PUSH
1179: LD_VAR 0 4
1183: PUSH
1184: LD_VAR 0 2
1188: ARRAY
1189: PUSH
1190: LD_INT 5
1192: ARRAY
1193: PUSH
1194: LD_VAR 0 4
1198: PUSH
1199: LD_VAR 0 2
1203: ARRAY
1204: PUSH
1205: LD_INT 6
1207: ARRAY
1208: PUSH
1209: LD_VAR 0 4
1213: PUSH
1214: LD_VAR 0 2
1218: ARRAY
1219: PUSH
1220: LD_INT 7
1222: ARRAY
1223: PUSH
1224: LD_VAR 0 4
1228: PUSH
1229: LD_VAR 0 2
1233: ARRAY
1234: PUSH
1235: LD_INT 8
1237: ARRAY
1238: PUSH
1239: LD_VAR 0 4
1243: PUSH
1244: LD_VAR 0 2
1248: ARRAY
1249: PUSH
1250: LD_INT 9
1252: ARRAY
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: PPUSH
1265: CALL_OW 1
1269: ST_TO_ADDR
1270: GO 1093
1272: POP
1273: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1274: LD_ADDR_VAR 0 4
1278: PUSH
1279: LD_VAR 0 4
1283: PUSH
1284: LD_INT 0
1286: PUSH
1287: LD_INT 206
1289: PUSH
1290: LD_INT 80
1292: PUSH
1293: LD_INT 1
1295: PUSH
1296: LD_INT 2
1298: PUSH
1299: LD_INT 3
1301: PUSH
1302: LD_INT 0
1304: PUSH
1305: LD_INT 0
1307: PUSH
1308: LD_INT 0
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_INT 32
1324: PUSH
1325: LD_INT 221
1327: PUSH
1328: LD_INT 95
1330: PUSH
1331: LD_INT 5
1333: PUSH
1334: LD_INT 2
1336: PUSH
1337: LD_INT 3
1339: PUSH
1340: LD_INT 0
1342: PUSH
1343: LD_INT 0
1345: PUSH
1346: LD_INT 23
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PUSH
1360: LD_INT 32
1362: PUSH
1363: LD_INT 223
1365: PUSH
1366: LD_INT 88
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 2
1374: PUSH
1375: LD_INT 3
1377: PUSH
1378: LD_INT 0
1380: PUSH
1381: LD_INT 0
1383: PUSH
1384: LD_INT 24
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: PUSH
1398: LD_INT 32
1400: PUSH
1401: LD_INT 202
1403: PUSH
1404: LD_INT 64
1406: PUSH
1407: LD_INT 2
1409: PUSH
1410: LD_INT 2
1412: PUSH
1413: LD_INT 3
1415: PUSH
1416: LD_INT 0
1418: PUSH
1419: LD_INT 0
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 203
1441: PUSH
1442: LD_INT 91
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 2
1450: PUSH
1451: LD_INT 3
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 0
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 8
1476: PUSH
1477: LD_INT 217
1479: PUSH
1480: LD_INT 78
1482: PUSH
1483: LD_INT 4
1485: PUSH
1486: LD_INT 2
1488: PUSH
1489: LD_INT 3
1491: PUSH
1492: LD_INT 10
1494: PUSH
1495: LD_INT 0
1497: PUSH
1498: LD_INT 0
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 27
1514: PUSH
1515: LD_INT 220
1517: PUSH
1518: LD_INT 99
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 3
1529: PUSH
1530: LD_INT 0
1532: PUSH
1533: LD_INT 0
1535: PUSH
1536: LD_INT 0
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: PUSH
1550: LD_INT 27
1552: PUSH
1553: LD_INT 220
1555: PUSH
1556: LD_INT 103
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 2
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: LD_INT 0
1573: PUSH
1574: LD_INT 0
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 27
1590: PUSH
1591: LD_INT 216
1593: PUSH
1594: LD_INT 102
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 2
1602: PUSH
1603: LD_INT 3
1605: PUSH
1606: LD_INT 0
1608: PUSH
1609: LD_INT 0
1611: PUSH
1612: LD_INT 0
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 17
1628: PUSH
1629: LD_INT 203
1631: PUSH
1632: LD_INT 94
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: LD_INT 2
1640: PUSH
1641: LD_INT 3
1643: PUSH
1644: LD_INT 0
1646: PUSH
1647: LD_INT 0
1649: PUSH
1650: LD_INT 0
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 23
1666: PUSH
1667: LD_INT 200
1669: PUSH
1670: LD_INT 88
1672: PUSH
1673: LD_INT 2
1675: PUSH
1676: LD_INT 2
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 0
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 16
1704: PUSH
1705: LD_INT 199
1707: PUSH
1708: LD_INT 91
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: LD_INT 0
1722: PUSH
1723: LD_INT 0
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 26
1742: PUSH
1743: LD_INT 197
1745: PUSH
1746: LD_INT 81
1748: PUSH
1749: LD_INT 1
1751: PUSH
1752: LD_INT 2
1754: PUSH
1755: LD_INT 3
1757: PUSH
1758: LD_INT 0
1760: PUSH
1761: LD_INT 0
1763: PUSH
1764: LD_INT 0
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 26
1780: PUSH
1781: LD_INT 197
1783: PUSH
1784: LD_INT 78
1786: PUSH
1787: LD_INT 3
1789: PUSH
1790: LD_INT 2
1792: PUSH
1793: LD_INT 3
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: LD_INT 0
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: ADD
1832: ST_TO_ADDR
// if hasRadar then
1833: LD_VAR 0 5
1837: IFFALSE 1901
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1839: LD_ADDR_VAR 0 4
1843: PUSH
1844: LD_VAR 0 4
1848: PPUSH
1849: LD_VAR 0 4
1853: PUSH
1854: LD_INT 1
1856: PLUS
1857: PPUSH
1858: LD_INT 20
1860: PUSH
1861: LD_INT 203
1863: PUSH
1864: LD_INT 87
1866: PUSH
1867: LD_INT 3
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: LD_INT 3
1875: PUSH
1876: LD_INT 0
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PPUSH
1896: CALL_OW 1
1900: ST_TO_ADDR
// if hasRemote then
1901: LD_VAR 0 6
1905: IFFALSE 1969
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1907: LD_ADDR_VAR 0 4
1911: PUSH
1912: LD_VAR 0 4
1916: PPUSH
1917: LD_VAR 0 4
1921: PUSH
1922: LD_INT 1
1924: PLUS
1925: PPUSH
1926: LD_INT 22
1928: PUSH
1929: LD_INT 207
1931: PUSH
1932: LD_INT 95
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: LD_INT 2
1940: PUSH
1941: LD_INT 3
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: LD_INT 0
1949: PUSH
1950: LD_INT 0
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 1
1968: ST_TO_ADDR
// for i in base do
1969: LD_ADDR_VAR 0 2
1973: PUSH
1974: LD_VAR 0 4
1978: PUSH
1979: FOR_IN
1980: IFFALSE 2319
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
1982: LD_VAR 0 2
1986: PUSH
1987: LD_INT 2
1989: ARRAY
1990: PPUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_INT 3
1998: ARRAY
1999: PPUSH
2000: CALL_OW 428
2004: IFFALSE 2008
// continue ;
2006: GO 1979
// uc_nation := i [ 5 ] ;
2008: LD_ADDR_OWVAR 21
2012: PUSH
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 5
2020: ARRAY
2021: ST_TO_ADDR
// InitBc ;
2022: CALL_OW 21
// bc_type := i [ 1 ] ;
2026: LD_ADDR_OWVAR 42
2030: PUSH
2031: LD_VAR 0 2
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2040: LD_ADDR_OWVAR 43
2044: PUSH
2045: LD_VAR 0 2
2049: PUSH
2050: LD_INT 6
2052: ARRAY
2053: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2054: LD_VAR 0 2
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PUSH
2063: LD_INT 8
2065: EQUAL
2066: PUSH
2067: LD_VAR 0 2
2071: PUSH
2072: LD_INT 5
2074: ARRAY
2075: PUSH
2076: LD_INT 2
2078: EQUAL
2079: AND
2080: PUSH
2081: LD_VAR 0 2
2085: PUSH
2086: LD_INT 8
2088: ARRAY
2089: NOT
2090: AND
2091: IFFALSE 2126
// begin bc_kind1 := b_lab_weapon ;
2093: LD_ADDR_OWVAR 44
2097: PUSH
2098: LD_INT 10
2100: ST_TO_ADDR
// if hasRadar then
2101: LD_VAR 0 5
2105: IFFALSE 2117
// bc_kind2 := b_lab_opto else
2107: LD_ADDR_OWVAR 45
2111: PUSH
2112: LD_INT 15
2114: ST_TO_ADDR
2115: GO 2126
// bc_kind2 := - 1 ;
2117: LD_ADDR_OWVAR 45
2121: PUSH
2122: LD_INT 1
2124: NEG
2125: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: PUSH
2135: LD_INT 7
2137: PUSH
2138: LD_INT 8
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: IN
2145: PUSH
2146: LD_VAR 0 2
2150: PUSH
2151: LD_INT 7
2153: ARRAY
2154: AND
2155: IFFALSE 2171
// bc_kind1 := i [ 7 ] ;
2157: LD_ADDR_OWVAR 44
2161: PUSH
2162: LD_VAR 0 2
2166: PUSH
2167: LD_INT 7
2169: ARRAY
2170: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 1
2178: ARRAY
2179: PUSH
2180: LD_INT 8
2182: EQUAL
2183: PUSH
2184: LD_VAR 0 2
2188: PUSH
2189: LD_INT 8
2191: ARRAY
2192: AND
2193: IFFALSE 2209
// bc_kind1 := i [ 8 ] ;
2195: LD_ADDR_OWVAR 44
2199: PUSH
2200: LD_VAR 0 2
2204: PUSH
2205: LD_INT 8
2207: ARRAY
2208: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2209: LD_ADDR_VAR 0 3
2213: PUSH
2214: LD_VAR 0 2
2218: PUSH
2219: LD_INT 2
2221: ARRAY
2222: PPUSH
2223: LD_VAR 0 2
2227: PUSH
2228: LD_INT 3
2230: ARRAY
2231: PPUSH
2232: LD_VAR 0 2
2236: PUSH
2237: LD_INT 4
2239: ARRAY
2240: PPUSH
2241: CALL_OW 47
2245: ST_TO_ADDR
// if i [ 9 ] then
2246: LD_VAR 0 2
2250: PUSH
2251: LD_INT 9
2253: ARRAY
2254: IFFALSE 2274
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2256: LD_VAR 0 3
2260: PPUSH
2261: LD_VAR 0 2
2265: PUSH
2266: LD_INT 9
2268: ARRAY
2269: PPUSH
2270: CALL_OW 431
// if i [ 1 ] = b_bunker then
2274: LD_VAR 0 2
2278: PUSH
2279: LD_INT 1
2281: ARRAY
2282: PUSH
2283: LD_INT 32
2285: EQUAL
2286: IFFALSE 2317
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2288: LD_ADDR_VAR 0 11
2292: PUSH
2293: LD_VAR 0 11
2297: PPUSH
2298: LD_VAR 0 11
2302: PUSH
2303: LD_INT 1
2305: PLUS
2306: PPUSH
2307: LD_VAR 0 3
2311: PPUSH
2312: CALL_OW 1
2316: ST_TO_ADDR
// end ;
2317: GO 1979
2319: POP
2320: POP
// depot := HexInfo ( 206 , 80 ) ;
2321: LD_ADDR_VAR 0 9
2325: PUSH
2326: LD_INT 206
2328: PPUSH
2329: LD_INT 80
2331: PPUSH
2332: CALL_OW 428
2336: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2337: LD_ADDR_VAR 0 8
2341: PUSH
2342: LD_INT 22
2344: PUSH
2345: LD_INT 2
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: LD_INT 30
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PPUSH
2366: CALL_OW 69
2370: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2371: LD_ADDR_VAR 0 10
2375: PUSH
2376: LD_INT 22
2378: PUSH
2379: LD_INT 2
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 30
2391: PUSH
2392: LD_INT 6
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: LD_INT 30
2401: PUSH
2402: LD_INT 7
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 30
2411: PUSH
2412: LD_INT 8
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PPUSH
2429: CALL_OW 69
2433: ST_TO_ADDR
// arDepot := depot ;
2434: LD_ADDR_EXP 47
2438: PUSH
2439: LD_VAR 0 9
2443: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2444: LD_VAR 0 9
2448: PPUSH
2449: CALL_OW 274
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: LD_INT 360
2459: PUSH
2460: LD_INT 260
2462: PUSH
2463: LD_INT 190
2465: PUSH
2466: LD_INT 150
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_OWVAR 67
2479: ARRAY
2480: PPUSH
2481: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2485: LD_VAR 0 9
2489: PPUSH
2490: CALL_OW 274
2494: PPUSH
2495: LD_INT 2
2497: PPUSH
2498: LD_INT 200
2500: PUSH
2501: LD_INT 170
2503: PUSH
2504: LD_INT 150
2506: PUSH
2507: LD_INT 120
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: PUSH
2516: LD_OWVAR 67
2520: ARRAY
2521: PPUSH
2522: CALL_OW 277
// uc_nation := 2 ;
2526: LD_ADDR_OWVAR 21
2530: PUSH
2531: LD_INT 2
2533: ST_TO_ADDR
// uc_side := 2 ;
2534: LD_ADDR_OWVAR 20
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2542: LD_INT 13
2544: PPUSH
2545: LD_INT 1
2547: PPUSH
2548: LD_INT 1
2550: PPUSH
2551: LD_INT 27
2553: PPUSH
2554: LD_INT 33
2556: PPUSH
2557: CALL 34117 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2561: CALL_OW 45
2565: PPUSH
2566: LD_INT 190
2568: PPUSH
2569: LD_INT 64
2571: PPUSH
2572: LD_INT 5
2574: PPUSH
2575: LD_INT 0
2577: PPUSH
2578: CALL 68710 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2582: LD_INT 13
2584: PPUSH
2585: LD_INT 1
2587: PPUSH
2588: LD_INT 1
2590: PPUSH
2591: LD_INT 25
2593: PPUSH
2594: LD_INT 22
2596: PPUSH
2597: CALL 34117 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2601: CALL_OW 45
2605: PPUSH
2606: LD_INT 188
2608: PPUSH
2609: LD_INT 67
2611: PPUSH
2612: LD_INT 5
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL 68710 0 5
// if hasRemote then
2622: LD_VAR 0 6
2626: IFFALSE 2708
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
2628: LD_INT 13
2630: PPUSH
2631: LD_INT 1
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 31
2639: PPUSH
2640: LD_INT 35
2642: PPUSH
2643: CALL 34117 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
2647: CALL_OW 45
2651: PPUSH
2652: LD_INT 191
2654: PPUSH
2655: LD_INT 71
2657: PPUSH
2658: LD_INT 5
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL 68710 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
2668: LD_INT 14
2670: PPUSH
2671: LD_INT 1
2673: PPUSH
2674: LD_INT 2
2676: PPUSH
2677: LD_INT 27
2679: PPUSH
2680: LD_INT 55
2682: PPUSH
2683: CALL 34117 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
2687: CALL_OW 45
2691: PPUSH
2692: LD_INT 199
2694: PPUSH
2695: LD_INT 67
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: LD_INT 0
2703: PPUSH
2704: CALL 68710 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2708: LD_EXP 33
2712: PPUSH
2713: LD_INT 213
2715: PPUSH
2716: LD_INT 87
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2726: LD_EXP 33
2730: PPUSH
2731: LD_INT 214
2733: PPUSH
2734: LD_INT 87
2736: PPUSH
2737: CALL_OW 118
// if Kaia then
2741: LD_EXP 38
2745: IFFALSE 2780
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2747: LD_EXP 38
2751: PPUSH
2752: LD_INT 213
2754: PPUSH
2755: LD_INT 85
2757: PPUSH
2758: LD_INT 0
2760: PPUSH
2761: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2765: LD_EXP 38
2769: PPUSH
2770: LD_INT 215
2772: PPUSH
2773: LD_INT 87
2775: PPUSH
2776: CALL_OW 118
// end ; if Olaf and Kaia then
2780: LD_EXP 42
2784: PUSH
2785: LD_EXP 38
2789: AND
2790: IFFALSE 2827
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2792: LD_EXP 42
2796: PPUSH
2797: LD_INT 215
2799: PPUSH
2800: LD_INT 87
2802: PPUSH
2803: LD_INT 0
2805: PPUSH
2806: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2810: LD_EXP 42
2814: PPUSH
2815: LD_INT 213
2817: PPUSH
2818: LD_INT 85
2820: PPUSH
2821: CALL_OW 118
// end else
2825: GO 2847
// if Olaf then
2827: LD_EXP 42
2831: IFFALSE 2847
// PlaceHumanInUnit ( Olaf , factory ) ;
2833: LD_EXP 42
2837: PPUSH
2838: LD_VAR 0 8
2842: PPUSH
2843: CALL_OW 52
// if Givi then
2847: LD_EXP 34
2851: IFFALSE 2932
// begin if Kaia and Olaf then
2853: LD_EXP 38
2857: PUSH
2858: LD_EXP 42
2862: AND
2863: IFFALSE 2900
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2865: LD_EXP 34
2869: PPUSH
2870: LD_INT 247
2872: PPUSH
2873: LD_INT 117
2875: PPUSH
2876: LD_INT 0
2878: PPUSH
2879: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2883: LD_EXP 34
2887: PPUSH
2888: LD_INT 248
2890: PPUSH
2891: LD_INT 118
2893: PPUSH
2894: CALL_OW 118
// end else
2898: GO 2932
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2900: LD_EXP 34
2904: PPUSH
2905: LD_INT 216
2907: PPUSH
2908: LD_INT 88
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2918: LD_EXP 34
2922: PPUSH
2923: LD_EXP 33
2927: PPUSH
2928: CALL_OW 119
// end ; end ; if Kurt then
2932: LD_EXP 44
2936: IFFALSE 2956
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2938: LD_EXP 44
2942: PPUSH
2943: LD_VAR 0 11
2947: PUSH
2948: LD_INT 2
2950: ARRAY
2951: PPUSH
2952: CALL_OW 52
// if Mike then
2956: LD_EXP 35
2960: IFFALSE 2980
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2962: LD_EXP 35
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 3
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Kamil then
2980: LD_EXP 37
2984: IFFALSE 3046
// begin if Kaia and Olaf then
2986: LD_EXP 38
2990: PUSH
2991: LD_EXP 42
2995: AND
2996: IFFALSE 3014
// PlaceHumanInUnit ( Kamil , depot ) else
2998: LD_EXP 37
3002: PPUSH
3003: LD_VAR 0 9
3007: PPUSH
3008: CALL_OW 52
3012: GO 3046
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3014: LD_EXP 37
3018: PPUSH
3019: LD_INT 213
3021: PPUSH
3022: LD_INT 87
3024: PPUSH
3025: LD_INT 0
3027: PPUSH
3028: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3032: LD_EXP 37
3036: PPUSH
3037: LD_EXP 33
3041: PPUSH
3042: CALL_OW 119
// end ; end ; if Sophia then
3046: LD_EXP 39
3050: IFFALSE 3066
// PlaceHumanInUnit ( Sophia , depot ) ;
3052: LD_EXP 39
3056: PPUSH
3057: LD_VAR 0 9
3061: PPUSH
3062: CALL_OW 52
// if Aviradze then
3066: LD_EXP 45
3070: IFFALSE 3119
// if lab then
3072: LD_VAR 0 10
3076: IFFALSE 3098
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3078: LD_EXP 45
3082: PPUSH
3083: LD_VAR 0 10
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: PPUSH
3092: CALL_OW 52
3096: GO 3119
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3098: LD_EXP 45
3102: PPUSH
3103: LD_INT 210
3105: PPUSH
3106: LD_INT 87
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// if Ibrahim then
3119: LD_EXP 36
3123: IFFALSE 3172
// if lab then
3125: LD_VAR 0 10
3129: IFFALSE 3151
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3131: LD_EXP 36
3135: PPUSH
3136: LD_VAR 0 10
3140: PUSH
3141: LD_INT 1
3143: ARRAY
3144: PPUSH
3145: CALL_OW 52
3149: GO 3172
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3151: LD_EXP 36
3155: PPUSH
3156: LD_INT 210
3158: PPUSH
3159: LD_INT 87
3161: PPUSH
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 50
// if Markov then
3172: LD_EXP 40
3176: IFFALSE 3225
// if factory then
3178: LD_VAR 0 8
3182: IFFALSE 3204
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3184: LD_EXP 40
3188: PPUSH
3189: LD_VAR 0 8
3193: PUSH
3194: LD_INT 1
3196: ARRAY
3197: PPUSH
3198: CALL_OW 52
3202: GO 3225
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3204: LD_EXP 40
3208: PPUSH
3209: LD_INT 210
3211: PPUSH
3212: LD_INT 87
3214: PPUSH
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 0
3220: PPUSH
3221: CALL_OW 50
// if heikeSecondSquad then
3225: LD_EXP 48
3229: IFFALSE 3269
// for i in heikeSecondSquad do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_EXP 48
3240: PUSH
3241: FOR_IN
3242: IFFALSE 3267
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3244: LD_VAR 0 2
3248: PPUSH
3249: LD_INT 190
3251: PPUSH
3252: LD_INT 65
3254: PPUSH
3255: LD_INT 5
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: CALL_OW 50
3265: GO 3241
3267: POP
3268: POP
// if heikeApes then
3269: LD_EXP 49
3273: IFFALSE 3313
// for i in heikeApes do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: LD_EXP 49
3284: PUSH
3285: FOR_IN
3286: IFFALSE 3311
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3288: LD_VAR 0 2
3292: PPUSH
3293: LD_INT 190
3295: PPUSH
3296: LD_INT 70
3298: PPUSH
3299: LD_INT 5
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 50
3309: GO 3285
3311: POP
3312: POP
// end ;
3313: LD_VAR 0 1
3317: RET
// export function PrepareRolfSquad ; var i , j ; begin
3318: LD_INT 0
3320: PPUSH
3321: PPUSH
3322: PPUSH
// uc_side := 8 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 8
3330: ST_TO_ADDR
// uc_nation := 2 ;
3331: LD_ADDR_OWVAR 21
3335: PUSH
3336: LD_INT 2
3338: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3339: LD_ADDR_EXP 46
3343: PUSH
3344: LD_STRING Bergkamp
3346: PPUSH
3347: CALL_OW 25
3351: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3352: LD_ADDR_EXP 50
3356: PUSH
3357: LD_EXP 46
3361: PUSH
3362: EMPTY
3363: LIST
3364: ST_TO_ADDR
// for i := 1 to 4 do
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: DOUBLE
3371: LD_INT 1
3373: DEC
3374: ST_TO_ADDR
3375: LD_INT 4
3377: PUSH
3378: FOR_TO
3379: IFFALSE 3459
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3381: LD_ADDR_VAR 0 3
3385: PUSH
3386: DOUBLE
3387: LD_INT 1
3389: DEC
3390: ST_TO_ADDR
3391: LD_INT 5
3393: PUSH
3394: LD_INT 2
3396: PUSH
3397: LD_INT 3
3399: PUSH
3400: LD_INT 1
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: PUSH
3409: LD_VAR 0 2
3413: ARRAY
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3455
// begin PrepareHuman ( false , i , 5 ) ;
3418: LD_INT 0
3420: PPUSH
3421: LD_VAR 0 2
3425: PPUSH
3426: LD_INT 5
3428: PPUSH
3429: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3433: LD_ADDR_EXP 50
3437: PUSH
3438: LD_EXP 50
3442: PPUSH
3443: CALL_OW 44
3447: PPUSH
3448: CALL 66570 0 2
3452: ST_TO_ADDR
// end ;
3453: GO 3415
3455: POP
3456: POP
// end ;
3457: GO 3378
3459: POP
3460: POP
// if HexInfo ( 5 , 3 ) then
3461: LD_INT 5
3463: PPUSH
3464: LD_INT 3
3466: PPUSH
3467: CALL_OW 428
3471: IFFALSE 3488
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3473: LD_INT 5
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: CALL_OW 428
3483: PPUSH
3484: CALL_OW 64
// for i in rolfSquad do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: LD_EXP 50
3497: PUSH
3498: FOR_IN
3499: IFFALSE 3635
// begin uc_direction := 2 ;
3501: LD_ADDR_OWVAR 24
3505: PUSH
3506: LD_INT 2
3508: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3509: LD_VAR 0 2
3513: PPUSH
3514: CALL_OW 257
3518: PUSH
3519: LD_INT 3
3521: EQUAL
3522: IFFALSE 3596
// begin uc_side := 8 ;
3524: LD_ADDR_OWVAR 20
3528: PUSH
3529: LD_INT 8
3531: ST_TO_ADDR
// uc_nation := 2 ;
3532: LD_ADDR_OWVAR 21
3536: PUSH
3537: LD_INT 2
3539: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3540: LD_INT 13
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: LD_INT 1
3548: PPUSH
3549: LD_INT 27
3551: PPUSH
3552: LD_INT 88
3554: PPUSH
3555: CALL 34117 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3559: CALL_OW 45
3563: PPUSH
3564: LD_INT 11
3566: PPUSH
3567: LD_INT 0
3569: PPUSH
3570: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3574: LD_VAR 0 2
3578: PPUSH
3579: LD_INT 5
3581: PPUSH
3582: LD_INT 3
3584: PPUSH
3585: CALL_OW 428
3589: PPUSH
3590: CALL_OW 52
// end else
3594: GO 3611
// PlaceUnitArea ( i , northSpawn , false ) ;
3596: LD_VAR 0 2
3600: PPUSH
3601: LD_INT 11
3603: PPUSH
3604: LD_INT 0
3606: PPUSH
3607: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3611: LD_VAR 0 2
3615: PPUSH
3616: LD_INT 29
3618: PPUSH
3619: LD_INT 10
3621: PPUSH
3622: CALL_OW 111
// wait ( 0 0$2 ) ;
3626: LD_INT 70
3628: PPUSH
3629: CALL_OW 67
// end ;
3633: GO 3498
3635: POP
3636: POP
// wait ( 0 0$5 ) ;
3637: LD_INT 175
3639: PPUSH
3640: CALL_OW 67
// end ;
3644: LD_VAR 0 1
3648: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3649: LD_INT 0
3651: PPUSH
3652: PPUSH
3653: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3654: LD_EXP 46
3658: PPUSH
3659: LD_INT 94
3661: PPUSH
3662: LD_INT 63
3664: PPUSH
3665: CALL_OW 428
3669: PPUSH
3670: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_INT 4
3681: PUSH
3682: LD_INT 82
3684: PUSH
3685: LD_INT 64
3687: PUSH
3688: LD_INT 1
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 31
3699: PUSH
3700: LD_INT 73
3702: PUSH
3703: LD_INT 58
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: ST_TO_ADDR
// for i in tmp do
3719: LD_ADDR_VAR 0 2
3723: PUSH
3724: LD_VAR 0 3
3728: PUSH
3729: FOR_IN
3730: IFFALSE 3794
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3732: LD_EXP 50
3736: PPUSH
3737: LD_INT 25
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PPUSH
3747: CALL_OW 72
3751: PPUSH
3752: LD_VAR 0 2
3756: PUSH
3757: LD_INT 1
3759: ARRAY
3760: PPUSH
3761: LD_VAR 0 2
3765: PUSH
3766: LD_INT 2
3768: ARRAY
3769: PPUSH
3770: LD_VAR 0 2
3774: PUSH
3775: LD_INT 3
3777: ARRAY
3778: PPUSH
3779: LD_VAR 0 2
3783: PUSH
3784: LD_INT 4
3786: ARRAY
3787: PPUSH
3788: CALL_OW 205
3792: GO 3729
3794: POP
3795: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
3796: LD_EXP 50
3800: PUSH
3801: LD_INT 2
3803: ARRAY
3804: PPUSH
3805: LD_INT 63
3807: PPUSH
3808: LD_INT 42
3810: PPUSH
3811: CALL_OW 428
3815: PPUSH
3816: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
3820: LD_EXP 50
3824: PUSH
3825: LD_INT 3
3827: ARRAY
3828: PPUSH
3829: LD_INT 94
3831: PPUSH
3832: LD_INT 63
3834: PPUSH
3835: CALL_OW 428
3839: PPUSH
3840: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3844: LD_INT 35
3846: PPUSH
3847: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
3851: LD_EXP 50
3855: PPUSH
3856: LD_INT 25
3858: PUSH
3859: LD_INT 2
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 3
3868: PUSH
3869: LD_INT 60
3871: PUSH
3872: EMPTY
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PPUSH
3883: CALL_OW 72
3887: IFFALSE 3844
// rolfScriptBase := true ;
3889: LD_ADDR_EXP 9
3893: PUSH
3894: LD_INT 1
3896: ST_TO_ADDR
// end ;
3897: LD_VAR 0 1
3901: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
3902: LD_EXP 9
3906: PUSH
3907: LD_EXP 46
3911: PPUSH
3912: CALL_OW 255
3916: PUSH
3917: LD_INT 8
3919: EQUAL
3920: AND
3921: IFFALSE 4928
3923: GO 3925
3925: DISABLE
3926: LD_INT 0
3928: PPUSH
3929: PPUSH
3930: PPUSH
3931: PPUSH
3932: PPUSH
3933: PPUSH
3934: PPUSH
3935: PPUSH
3936: PPUSH
3937: PPUSH
// begin enable ;
3938: ENABLE
// if not rolfSquad then
3939: LD_EXP 50
3943: NOT
3944: IFFALSE 3948
// exit ;
3946: GO 4928
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3948: LD_ADDR_VAR 0 9
3952: PUSH
3953: LD_INT 12
3955: PPUSH
3956: LD_INT 81
3958: PUSH
3959: LD_INT 8
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PPUSH
3966: CALL_OW 70
3970: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3971: LD_ADDR_VAR 0 5
3975: PUSH
3976: LD_EXP 50
3980: PPUSH
3981: LD_INT 25
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 72
3995: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3996: LD_ADDR_VAR 0 6
4000: PUSH
4001: LD_EXP 50
4005: PPUSH
4006: LD_INT 25
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PPUSH
4016: CALL_OW 72
4020: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4021: LD_ADDR_VAR 0 8
4025: PUSH
4026: LD_EXP 50
4030: PPUSH
4031: LD_INT 25
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PPUSH
4041: CALL_OW 72
4045: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4046: LD_ADDR_VAR 0 7
4050: PUSH
4051: LD_EXP 50
4055: PPUSH
4056: LD_INT 25
4058: PUSH
4059: LD_INT 4
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PPUSH
4066: CALL_OW 72
4070: ST_TO_ADDR
// if sol then
4071: LD_VAR 0 5
4075: IFFALSE 4373
// for i in sol union Rolf do
4077: LD_ADDR_VAR 0 1
4081: PUSH
4082: LD_VAR 0 5
4086: PUSH
4087: LD_EXP 46
4091: UNION
4092: PUSH
4093: FOR_IN
4094: IFFALSE 4371
// if not IsInUnit ( i ) and not HasTask ( i ) then
4096: LD_VAR 0 1
4100: PPUSH
4101: CALL_OW 310
4105: NOT
4106: PUSH
4107: LD_VAR 0 1
4111: PPUSH
4112: CALL_OW 314
4116: NOT
4117: AND
4118: IFFALSE 4369
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 256
4129: PUSH
4130: LD_INT 500
4132: LESS
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 80
4141: PPUSH
4142: LD_INT 49
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 6
4152: GREATER
4153: AND
4154: IFFALSE 4173
// begin ComMoveXY ( i , 80 , 49 ) ;
4156: LD_VAR 0 1
4160: PPUSH
4161: LD_INT 80
4163: PPUSH
4164: LD_INT 49
4166: PPUSH
4167: CALL_OW 111
// continue ;
4171: GO 4093
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4173: LD_ADDR_VAR 0 4
4177: PUSH
4178: LD_INT 22
4180: PUSH
4181: LD_INT 8
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 50
4190: PUSH
4191: EMPTY
4192: LIST
4193: PUSH
4194: LD_INT 2
4196: PUSH
4197: LD_INT 30
4199: PUSH
4200: LD_INT 4
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 30
4209: PUSH
4210: LD_INT 5
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 30
4219: PUSH
4220: LD_INT 32
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 30
4229: PUSH
4230: LD_INT 31
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: PPUSH
4249: CALL_OW 69
4253: ST_TO_ADDR
// if tmp then
4254: LD_VAR 0 4
4258: IFFALSE 4369
// begin for b in tmp do
4260: LD_ADDR_VAR 0 2
4264: PUSH
4265: LD_VAR 0 4
4269: PUSH
4270: FOR_IN
4271: IFFALSE 4367
// begin case GetBType ( b ) of b_armoury , b_barracks :
4273: LD_VAR 0 2
4277: PPUSH
4278: CALL_OW 266
4282: PUSH
4283: LD_INT 4
4285: DOUBLE
4286: EQUAL
4287: IFTRUE 4297
4289: LD_INT 5
4291: DOUBLE
4292: EQUAL
4293: IFTRUE 4297
4295: GO 4308
4297: POP
// p := 6 ; b_breastwork , b_bunker :
4298: LD_ADDR_VAR 0 3
4302: PUSH
4303: LD_INT 6
4305: ST_TO_ADDR
4306: GO 4334
4308: LD_INT 31
4310: DOUBLE
4311: EQUAL
4312: IFTRUE 4322
4314: LD_INT 32
4316: DOUBLE
4317: EQUAL
4318: IFTRUE 4322
4320: GO 4333
4322: POP
// p := 1 ; end ;
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
4331: GO 4334
4333: POP
// if UnitsInside ( b ) < p then
4334: LD_VAR 0 2
4338: PPUSH
4339: CALL_OW 313
4343: PUSH
4344: LD_VAR 0 3
4348: LESS
4349: IFFALSE 4365
// ComEnterUnit ( i , b ) ;
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_VAR 0 2
4360: PPUSH
4361: CALL_OW 120
// end ;
4365: GO 4270
4367: POP
4368: POP
// end ; end ;
4369: GO 4093
4371: POP
4372: POP
// if sci then
4373: LD_VAR 0 7
4377: IFFALSE 4432
// for i in sci do
4379: LD_ADDR_VAR 0 1
4383: PUSH
4384: LD_VAR 0 7
4388: PUSH
4389: FOR_IN
4390: IFFALSE 4430
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4392: LD_VAR 0 1
4396: PPUSH
4397: LD_INT 80
4399: PPUSH
4400: LD_INT 49
4402: PPUSH
4403: CALL_OW 297
4407: PUSH
4408: LD_INT 9
4410: GREATER
4411: IFFALSE 4428
// ComMoveXY ( i , 80 , 49 ) ;
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 80
4420: PPUSH
4421: LD_INT 49
4423: PPUSH
4424: CALL_OW 111
// end ;
4428: GO 4389
4430: POP
4431: POP
// if mech then
4432: LD_VAR 0 8
4436: IFFALSE 4650
// for i in mech do
4438: LD_ADDR_VAR 0 1
4442: PUSH
4443: LD_VAR 0 8
4447: PUSH
4448: FOR_IN
4449: IFFALSE 4648
// begin hasVehicle := IsInUnit ( i ) ;
4451: LD_ADDR_VAR 0 10
4455: PUSH
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 310
4465: ST_TO_ADDR
// if enemyInBase then
4466: LD_VAR 0 9
4470: IFFALSE 4566
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4472: LD_VAR 0 10
4476: PUSH
4477: LD_VAR 0 10
4481: PPUSH
4482: CALL_OW 256
4486: PUSH
4487: LD_INT 500
4489: GREATER
4490: AND
4491: IFFALSE 4519
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4493: LD_VAR 0 10
4497: PPUSH
4498: LD_VAR 0 9
4502: PPUSH
4503: LD_VAR 0 10
4507: PPUSH
4508: CALL_OW 74
4512: PPUSH
4513: CALL_OW 115
4517: GO 4564
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4519: LD_VAR 0 10
4523: PPUSH
4524: LD_INT 86
4526: PPUSH
4527: LD_INT 49
4529: PPUSH
4530: CALL_OW 297
4534: PUSH
4535: LD_INT 8
4537: GREATER
4538: IFFALSE 4564
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4540: LD_VAR 0 10
4544: PPUSH
4545: LD_INT 86
4547: PPUSH
4548: LD_INT 49
4550: PPUSH
4551: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4555: LD_VAR 0 1
4559: PPUSH
4560: CALL 68390 0 1
// end end else
4564: GO 4646
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 86
4573: PPUSH
4574: LD_INT 49
4576: PPUSH
4577: CALL_OW 297
4581: PUSH
4582: LD_INT 8
4584: GREATER
4585: IFFALSE 4604
// ComMoveXY ( i , 86 , 49 ) else
4587: LD_VAR 0 1
4591: PPUSH
4592: LD_INT 86
4594: PPUSH
4595: LD_INT 49
4597: PPUSH
4598: CALL_OW 111
4602: GO 4646
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4604: LD_VAR 0 10
4608: PUSH
4609: LD_VAR 0 10
4613: PPUSH
4614: CALL_OW 256
4618: PUSH
4619: LD_INT 1000
4621: LESS
4622: AND
4623: IFFALSE 4646
// begin SetFuel ( hasVehicle , 100 ) ;
4625: LD_VAR 0 10
4629: PPUSH
4630: LD_INT 100
4632: PPUSH
4633: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4637: LD_VAR 0 1
4641: PPUSH
4642: CALL 68270 0 1
// end ; end ; end ;
4646: GO 4448
4648: POP
4649: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4650: LD_ADDR_VAR 0 4
4654: PUSH
4655: LD_INT 12
4657: PPUSH
4658: LD_INT 3
4660: PUSH
4661: LD_INT 24
4663: PUSH
4664: LD_INT 1000
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 3
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 70
4693: ST_TO_ADDR
// if tmp and eng then
4694: LD_VAR 0 4
4698: PUSH
4699: LD_VAR 0 6
4703: AND
4704: IFFALSE 4810
// begin for i in eng do
4706: LD_ADDR_VAR 0 1
4710: PUSH
4711: LD_VAR 0 6
4715: PUSH
4716: FOR_IN
4717: IFFALSE 4808
// if IsInUnit ( i ) then
4719: LD_VAR 0 1
4723: PPUSH
4724: CALL_OW 310
4728: IFFALSE 4741
// ComExitBuilding ( i ) else
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL_OW 122
4739: GO 4806
// if GetLives ( i ) = 1000 then
4741: LD_VAR 0 1
4745: PPUSH
4746: CALL_OW 256
4750: PUSH
4751: LD_INT 1000
4753: EQUAL
4754: IFFALSE 4776
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4756: LD_VAR 0 1
4760: PPUSH
4761: LD_VAR 0 4
4765: PUSH
4766: LD_INT 1
4768: ARRAY
4769: PPUSH
4770: CALL_OW 130
4774: GO 4806
// if GetLives ( i ) < 700 then
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 256
4785: PUSH
4786: LD_INT 700
4788: LESS
4789: IFFALSE 4806
// ComMoveXY ( i , 80 , 49 ) ;
4791: LD_VAR 0 1
4795: PPUSH
4796: LD_INT 80
4798: PPUSH
4799: LD_INT 49
4801: PPUSH
4802: CALL_OW 111
4806: GO 4716
4808: POP
4809: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
4810: LD_VAR 0 4
4814: NOT
4815: PUSH
4816: LD_VAR 0 6
4820: PPUSH
4821: LD_INT 3
4823: PUSH
4824: LD_INT 54
4826: PUSH
4827: EMPTY
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PPUSH
4834: CALL_OW 72
4838: AND
4839: IFFALSE 4928
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
4841: LD_ADDR_VAR 0 1
4845: PUSH
4846: LD_VAR 0 6
4850: PPUSH
4851: LD_INT 3
4853: PUSH
4854: LD_INT 54
4856: PUSH
4857: EMPTY
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PPUSH
4864: CALL_OW 72
4868: PUSH
4869: FOR_IN
4870: IFFALSE 4926
// if GetLives ( i ) < 1000 then
4872: LD_VAR 0 1
4876: PPUSH
4877: CALL_OW 256
4881: PUSH
4882: LD_INT 1000
4884: LESS
4885: IFFALSE 4904
// ComMoveXY ( i , 80 , 49 ) else
4887: LD_VAR 0 1
4891: PPUSH
4892: LD_INT 80
4894: PPUSH
4895: LD_INT 49
4897: PPUSH
4898: CALL_OW 111
4902: GO 4924
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
4904: LD_VAR 0 1
4908: PPUSH
4909: LD_INT 86
4911: PPUSH
4912: LD_INT 54
4914: PPUSH
4915: CALL_OW 428
4919: PPUSH
4920: CALL_OW 120
4924: GO 4869
4926: POP
4927: POP
// end ;
4928: PPOPN 10
4930: END
// export function PrepareOmarSquad ; var i , j , p ; begin
4931: LD_INT 0
4933: PPUSH
4934: PPUSH
4935: PPUSH
4936: PPUSH
// uc_side := 5 ;
4937: LD_ADDR_OWVAR 20
4941: PUSH
4942: LD_INT 5
4944: ST_TO_ADDR
// uc_nation := 2 ;
4945: LD_ADDR_OWVAR 21
4949: PUSH
4950: LD_INT 2
4952: ST_TO_ADDR
// omarSquad := [ ] ;
4953: LD_ADDR_EXP 51
4957: PUSH
4958: EMPTY
4959: ST_TO_ADDR
// for i := 1 to 4 do
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: DOUBLE
4966: LD_INT 1
4968: DEC
4969: ST_TO_ADDR
4970: LD_INT 4
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5097
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: DOUBLE
4982: LD_INT 1
4984: DEC
4985: ST_TO_ADDR
4986: LD_INT 6
4988: PUSH
4989: LD_INT 2
4991: PUSH
4992: LD_INT 2
4994: PUSH
4995: LD_EXP 21
4999: PLUS
5000: PUSH
5001: LD_INT 2
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: PUSH
5010: LD_VAR 0 2
5014: ARRAY
5015: PUSH
5016: FOR_TO
5017: IFFALSE 5093
// begin PrepareHuman ( false , i , 5 ) ;
5019: LD_INT 0
5021: PPUSH
5022: LD_VAR 0 2
5026: PPUSH
5027: LD_INT 5
5029: PPUSH
5030: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5034: LD_ADDR_EXP 51
5038: PUSH
5039: LD_EXP 51
5043: PPUSH
5044: CALL_OW 44
5048: PPUSH
5049: CALL 66570 0 2
5053: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 1
5061: EQUAL
5062: PUSH
5063: LD_INT 50
5065: PPUSH
5066: CALL_OW 13
5070: AND
5071: IFFALSE 5091
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5073: LD_EXP 51
5077: PUSH
5078: LD_EXP 51
5082: ARRAY
5083: PPUSH
5084: LD_INT 8
5086: PPUSH
5087: CALL_OW 336
// end ;
5091: GO 5016
5093: POP
5094: POP
// end ;
5095: GO 4973
5097: POP
5098: POP
// if HexInfo ( 340 , 205 ) then
5099: LD_INT 340
5101: PPUSH
5102: LD_INT 205
5104: PPUSH
5105: CALL_OW 428
5109: IFFALSE 5126
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5111: LD_INT 340
5113: PPUSH
5114: LD_INT 205
5116: PPUSH
5117: CALL_OW 428
5121: PPUSH
5122: CALL_OW 64
// p := 0 ;
5126: LD_ADDR_VAR 0 4
5130: PUSH
5131: LD_INT 0
5133: ST_TO_ADDR
// for i in omarSquad do
5134: LD_ADDR_VAR 0 2
5138: PUSH
5139: LD_EXP 51
5143: PUSH
5144: FOR_IN
5145: IFFALSE 5346
// begin uc_direction := 4 ;
5147: LD_ADDR_OWVAR 24
5151: PUSH
5152: LD_INT 4
5154: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5155: LD_VAR 0 2
5159: PPUSH
5160: CALL_OW 257
5164: PUSH
5165: LD_INT 3
5167: EQUAL
5168: PUSH
5169: LD_VAR 0 4
5173: PUSH
5174: LD_INT 2
5176: LESS
5177: AND
5178: IFFALSE 5307
// begin p := p + 1 ;
5180: LD_ADDR_VAR 0 4
5184: PUSH
5185: LD_VAR 0 4
5189: PUSH
5190: LD_INT 1
5192: PLUS
5193: ST_TO_ADDR
// uc_side := 5 ;
5194: LD_ADDR_OWVAR 20
5198: PUSH
5199: LD_INT 5
5201: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5202: LD_INT 0
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: CALL_OW 12
5212: IFFALSE 5243
// begin uc_nation := 2 ;
5214: LD_ADDR_OWVAR 21
5218: PUSH
5219: LD_INT 2
5221: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5222: LD_INT 13
5224: PPUSH
5225: LD_INT 1
5227: PPUSH
5228: LD_INT 1
5230: PPUSH
5231: LD_INT 27
5233: PPUSH
5234: LD_INT 88
5236: PPUSH
5237: CALL 34117 0 5
// end else
5241: GO 5270
// begin uc_nation := 3 ;
5243: LD_ADDR_OWVAR 21
5247: PUSH
5248: LD_INT 3
5250: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5251: LD_INT 22
5253: PPUSH
5254: LD_INT 1
5256: PPUSH
5257: LD_INT 1
5259: PPUSH
5260: LD_INT 45
5262: PPUSH
5263: LD_INT 88
5265: PPUSH
5266: CALL 34117 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5270: CALL_OW 45
5274: PPUSH
5275: LD_INT 13
5277: PPUSH
5278: LD_INT 0
5280: PPUSH
5281: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_INT 340
5292: PPUSH
5293: LD_INT 205
5295: PPUSH
5296: CALL_OW 428
5300: PPUSH
5301: CALL_OW 52
// end else
5305: GO 5322
// PlaceUnitArea ( i , southSpawn , false ) ;
5307: LD_VAR 0 2
5311: PPUSH
5312: LD_INT 13
5314: PPUSH
5315: LD_INT 0
5317: PPUSH
5318: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5322: LD_VAR 0 2
5326: PPUSH
5327: LD_INT 333
5329: PPUSH
5330: LD_INT 210
5332: PPUSH
5333: CALL_OW 111
// wait ( 0 0$2 ) ;
5337: LD_INT 70
5339: PPUSH
5340: CALL_OW 67
// end ;
5344: GO 5144
5346: POP
5347: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5348: LD_EXP 43
5352: PPUSH
5353: LD_INT 340
5355: PPUSH
5356: LD_INT 205
5358: PPUSH
5359: LD_INT 0
5361: PPUSH
5362: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5366: LD_EXP 43
5370: PPUSH
5371: LD_INT 333
5373: PPUSH
5374: LD_INT 206
5376: PPUSH
5377: CALL_OW 111
// wait ( 0 0$2 ) ;
5381: LD_INT 70
5383: PPUSH
5384: CALL_OW 67
// ComHold ( omarSquad ) ;
5388: LD_EXP 51
5392: PPUSH
5393: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5397: LD_EXP 43
5401: PUSH
5402: LD_EXP 51
5406: PPUSH
5407: LD_INT 2
5409: PUSH
5410: LD_INT 25
5412: PUSH
5413: LD_INT 1
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: PUSH
5420: LD_INT 25
5422: PUSH
5423: LD_INT 8
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: PPUSH
5435: CALL_OW 72
5439: UNION
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_INT 5
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 21
5453: PUSH
5454: LD_INT 2
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 69
5469: UNION
5470: PPUSH
5471: LD_INT 315
5473: PPUSH
5474: LD_INT 214
5476: PPUSH
5477: CALL_OW 114
// wait ( 0 0$22 ) ;
5481: LD_INT 770
5483: PPUSH
5484: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5488: LD_EXP 51
5492: PUSH
5493: LD_EXP 43
5497: UNION
5498: PPUSH
5499: LD_INT 329
5501: PPUSH
5502: LD_INT 231
5504: PPUSH
5505: CALL_OW 114
// end ;
5509: LD_VAR 0 1
5513: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5514: LD_EXP 10
5518: IFFALSE 6601
5520: GO 5522
5522: DISABLE
5523: LD_INT 0
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
// begin enable ;
5536: ENABLE
// if not omarSquad then
5537: LD_EXP 51
5541: NOT
5542: IFFALSE 5546
// exit ;
5544: GO 6601
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5546: LD_ADDR_VAR 0 10
5550: PUSH
5551: LD_INT 14
5553: PPUSH
5554: LD_INT 81
5556: PUSH
5557: LD_INT 5
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PPUSH
5564: CALL_OW 70
5568: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5569: LD_ADDR_VAR 0 6
5573: PUSH
5574: LD_EXP 51
5578: PPUSH
5579: LD_INT 2
5581: PUSH
5582: LD_INT 25
5584: PUSH
5585: LD_INT 1
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: PUSH
5592: LD_INT 25
5594: PUSH
5595: LD_INT 8
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 72
5611: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5612: LD_ADDR_VAR 0 7
5616: PUSH
5617: LD_EXP 51
5621: PPUSH
5622: LD_INT 25
5624: PUSH
5625: LD_INT 2
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PPUSH
5632: CALL_OW 72
5636: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5637: LD_ADDR_VAR 0 9
5641: PUSH
5642: LD_EXP 51
5646: PPUSH
5647: LD_INT 25
5649: PUSH
5650: LD_INT 3
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 72
5661: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5662: LD_ADDR_VAR 0 8
5666: PUSH
5667: LD_EXP 51
5671: PPUSH
5672: LD_INT 25
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PPUSH
5682: CALL_OW 72
5686: ST_TO_ADDR
// if sol then
5687: LD_VAR 0 6
5691: IFFALSE 6055
// for i in sol do
5693: LD_ADDR_VAR 0 1
5697: PUSH
5698: LD_VAR 0 6
5702: PUSH
5703: FOR_IN
5704: IFFALSE 6053
// if not HasTask ( i ) then
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 314
5715: NOT
5716: IFFALSE 6051
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 310
5727: NOT
5728: PUSH
5729: LD_VAR 0 1
5733: PPUSH
5734: CALL_OW 256
5738: PUSH
5739: LD_INT 500
5741: LESS
5742: AND
5743: PUSH
5744: LD_VAR 0 1
5748: PPUSH
5749: LD_INT 333
5751: PPUSH
5752: LD_INT 234
5754: PPUSH
5755: CALL_OW 297
5759: PUSH
5760: LD_INT 6
5762: GREATER
5763: AND
5764: IFFALSE 5783
// begin ComMoveXY ( i , 333 , 234 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 333
5773: PPUSH
5774: LD_INT 234
5776: PPUSH
5777: CALL_OW 111
// continue ;
5781: GO 5703
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5783: LD_ADDR_VAR 0 5
5787: PUSH
5788: LD_INT 22
5790: PUSH
5791: LD_INT 5
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 58
5800: PUSH
5801: EMPTY
5802: LIST
5803: PUSH
5804: LD_INT 50
5806: PUSH
5807: EMPTY
5808: LIST
5809: PUSH
5810: LD_INT 2
5812: PUSH
5813: LD_INT 30
5815: PUSH
5816: LD_INT 32
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: LD_INT 30
5825: PUSH
5826: LD_INT 31
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL_OW 69
5848: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
5849: LD_VAR 0 5
5853: PUSH
5854: LD_VAR 0 1
5858: PPUSH
5859: CALL_OW 310
5863: PPUSH
5864: CALL_OW 266
5868: PUSH
5869: LD_INT 31
5871: NONEQUAL
5872: AND
5873: IFFALSE 5955
// begin for j in tmp do
5875: LD_ADDR_VAR 0 2
5879: PUSH
5880: LD_VAR 0 5
5884: PUSH
5885: FOR_IN
5886: IFFALSE 5951
// if GetTag ( j ) <> 1 then
5888: LD_VAR 0 2
5892: PPUSH
5893: CALL_OW 110
5897: PUSH
5898: LD_INT 1
5900: NONEQUAL
5901: IFFALSE 5949
// begin SetTag ( j , 1 ) ;
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: CALL_OW 109
// if IsInUnit ( i ) then
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 310
5924: IFFALSE 5935
// ComExit ( i ) ;
5926: LD_VAR 0 1
5930: PPUSH
5931: CALL 66968 0 1
// AddComEnterUnit ( i , j ) ;
5935: LD_VAR 0 1
5939: PPUSH
5940: LD_VAR 0 2
5944: PPUSH
5945: CALL_OW 180
// end ;
5949: GO 5885
5951: POP
5952: POP
// end else
5953: GO 6051
// if not IsInUnit ( i ) then
5955: LD_VAR 0 1
5959: PPUSH
5960: CALL_OW 310
5964: NOT
5965: IFFALSE 6051
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5967: LD_ADDR_VAR 0 5
5971: PUSH
5972: LD_INT 22
5974: PUSH
5975: LD_INT 5
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PUSH
5982: LD_INT 50
5984: PUSH
5985: EMPTY
5986: LIST
5987: PUSH
5988: LD_INT 30
5990: PUSH
5991: LD_INT 4
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: LIST
6002: PPUSH
6003: CALL_OW 69
6007: ST_TO_ADDR
// if tmp then
6008: LD_VAR 0 5
6012: IFFALSE 6051
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6014: LD_VAR 0 5
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: CALL_OW 313
6027: PUSH
6028: LD_INT 6
6030: LESS
6031: IFFALSE 6051
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_VAR 0 5
6042: PUSH
6043: LD_INT 1
6045: ARRAY
6046: PPUSH
6047: CALL_OW 120
// end ; end ;
6051: GO 5703
6053: POP
6054: POP
// if sci then
6055: LD_VAR 0 8
6059: IFFALSE 6114
// for i in sci do
6061: LD_ADDR_VAR 0 1
6065: PUSH
6066: LD_VAR 0 8
6070: PUSH
6071: FOR_IN
6072: IFFALSE 6112
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6074: LD_VAR 0 1
6078: PPUSH
6079: LD_INT 333
6081: PPUSH
6082: LD_INT 234
6084: PPUSH
6085: CALL_OW 297
6089: PUSH
6090: LD_INT 9
6092: GREATER
6093: IFFALSE 6110
// ComMoveXY ( i , 333 , 234 ) ;
6095: LD_VAR 0 1
6099: PPUSH
6100: LD_INT 333
6102: PPUSH
6103: LD_INT 234
6105: PPUSH
6106: CALL_OW 111
// end ;
6110: GO 6071
6112: POP
6113: POP
// if mech then
6114: LD_VAR 0 9
6118: IFFALSE 6323
// for i in mech do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: LD_VAR 0 9
6129: PUSH
6130: FOR_IN
6131: IFFALSE 6321
// begin hasVehicle := IsInUnit ( i ) ;
6133: LD_ADDR_VAR 0 11
6137: PUSH
6138: LD_VAR 0 1
6142: PPUSH
6143: CALL_OW 310
6147: ST_TO_ADDR
// if enemyInBase then
6148: LD_VAR 0 10
6152: IFFALSE 6239
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6154: LD_VAR 0 11
6158: PUSH
6159: LD_VAR 0 11
6163: PPUSH
6164: CALL_OW 256
6168: PUSH
6169: LD_INT 500
6171: GREATER
6172: AND
6173: IFFALSE 6201
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6175: LD_VAR 0 11
6179: PPUSH
6180: LD_VAR 0 10
6184: PPUSH
6185: LD_VAR 0 11
6189: PPUSH
6190: CALL_OW 74
6194: PPUSH
6195: CALL_OW 115
6199: GO 6237
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6201: LD_VAR 0 11
6205: PPUSH
6206: LD_INT 333
6208: PPUSH
6209: LD_INT 234
6211: PPUSH
6212: CALL_OW 297
6216: PUSH
6217: LD_INT 6
6219: GREATER
6220: IFFALSE 6237
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6222: LD_VAR 0 11
6226: PPUSH
6227: LD_INT 333
6229: PPUSH
6230: LD_INT 234
6232: PPUSH
6233: CALL_OW 111
// end else
6237: GO 6319
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6239: LD_VAR 0 1
6243: PPUSH
6244: LD_INT 333
6246: PPUSH
6247: LD_INT 234
6249: PPUSH
6250: CALL_OW 297
6254: PUSH
6255: LD_INT 6
6257: GREATER
6258: IFFALSE 6277
// ComMoveXY ( i , 333 , 234 ) else
6260: LD_VAR 0 1
6264: PPUSH
6265: LD_INT 333
6267: PPUSH
6268: LD_INT 234
6270: PPUSH
6271: CALL_OW 111
6275: GO 6319
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6277: LD_VAR 0 11
6281: PUSH
6282: LD_VAR 0 11
6286: PPUSH
6287: CALL_OW 256
6291: PUSH
6292: LD_INT 1000
6294: LESS
6295: AND
6296: IFFALSE 6319
// begin SetFuel ( hasVehicle , 100 ) ;
6298: LD_VAR 0 11
6302: PPUSH
6303: LD_INT 100
6305: PPUSH
6306: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL 68270 0 1
// end ; end ; end ;
6319: GO 6130
6321: POP
6322: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6323: LD_ADDR_VAR 0 5
6327: PUSH
6328: LD_INT 14
6330: PPUSH
6331: LD_INT 3
6333: PUSH
6334: LD_INT 24
6336: PUSH
6337: LD_INT 1000
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 21
6350: PUSH
6351: LD_INT 3
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PPUSH
6362: CALL_OW 70
6366: ST_TO_ADDR
// if tmp and eng then
6367: LD_VAR 0 5
6371: PUSH
6372: LD_VAR 0 7
6376: AND
6377: IFFALSE 6483
// begin for i in eng do
6379: LD_ADDR_VAR 0 1
6383: PUSH
6384: LD_VAR 0 7
6388: PUSH
6389: FOR_IN
6390: IFFALSE 6481
// if IsInUnit ( i ) then
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 310
6401: IFFALSE 6414
// ComExitBuilding ( i ) else
6403: LD_VAR 0 1
6407: PPUSH
6408: CALL_OW 122
6412: GO 6479
// if GetLives ( i ) = 1000 then
6414: LD_VAR 0 1
6418: PPUSH
6419: CALL_OW 256
6423: PUSH
6424: LD_INT 1000
6426: EQUAL
6427: IFFALSE 6449
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6429: LD_VAR 0 1
6433: PPUSH
6434: LD_VAR 0 5
6438: PUSH
6439: LD_INT 1
6441: ARRAY
6442: PPUSH
6443: CALL_OW 130
6447: GO 6479
// if GetLives ( i ) < 700 then
6449: LD_VAR 0 1
6453: PPUSH
6454: CALL_OW 256
6458: PUSH
6459: LD_INT 700
6461: LESS
6462: IFFALSE 6479
// ComMoveXY ( i , 333 , 234 ) ;
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 333
6471: PPUSH
6472: LD_INT 234
6474: PPUSH
6475: CALL_OW 111
6479: GO 6389
6481: POP
6482: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6483: LD_VAR 0 5
6487: NOT
6488: PUSH
6489: LD_VAR 0 7
6493: PPUSH
6494: LD_INT 3
6496: PUSH
6497: LD_INT 54
6499: PUSH
6500: EMPTY
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 72
6511: AND
6512: IFFALSE 6601
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6514: LD_ADDR_VAR 0 1
6518: PUSH
6519: LD_VAR 0 7
6523: PPUSH
6524: LD_INT 3
6526: PUSH
6527: LD_INT 54
6529: PUSH
6530: EMPTY
6531: LIST
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PPUSH
6537: CALL_OW 72
6541: PUSH
6542: FOR_IN
6543: IFFALSE 6599
// if GetLives ( i ) < 1000 then
6545: LD_VAR 0 1
6549: PPUSH
6550: CALL_OW 256
6554: PUSH
6555: LD_INT 1000
6557: LESS
6558: IFFALSE 6577
// ComMoveXY ( i , 333 , 234 ) else
6560: LD_VAR 0 1
6564: PPUSH
6565: LD_INT 333
6567: PPUSH
6568: LD_INT 234
6570: PPUSH
6571: CALL_OW 111
6575: GO 6597
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6577: LD_VAR 0 1
6581: PPUSH
6582: LD_INT 341
6584: PPUSH
6585: LD_INT 232
6587: PPUSH
6588: CALL_OW 428
6592: PPUSH
6593: CALL_OW 120
6597: GO 6542
6599: POP
6600: POP
// end ;
6601: PPOPN 11
6603: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6604: LD_EXP 43
6608: PPUSH
6609: CALL_OW 256
6613: PUSH
6614: LD_INT 1000
6616: LESS
6617: IFFALSE 6635
6619: GO 6621
6621: DISABLE
// begin enable ;
6622: ENABLE
// SetLives ( Omar , 1000 ) ;
6623: LD_EXP 43
6627: PPUSH
6628: LD_INT 1000
6630: PPUSH
6631: CALL_OW 234
// end ;
6635: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6636: LD_EXP 46
6640: PPUSH
6641: CALL_OW 256
6645: PUSH
6646: LD_INT 1000
6648: LESS
6649: PUSH
6650: LD_EXP 32
6654: AND
6655: IFFALSE 6673
6657: GO 6659
6659: DISABLE
// begin enable ;
6660: ENABLE
// SetLives ( Rolf , 1000 ) ;
6661: LD_EXP 46
6665: PPUSH
6666: LD_INT 1000
6668: PPUSH
6669: CALL_OW 234
// end ;
6673: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6674: LD_EXP 32
6678: IFFALSE 7358
6680: GO 6682
6682: DISABLE
6683: LD_INT 0
6685: PPUSH
6686: PPUSH
6687: PPUSH
6688: PPUSH
6689: PPUSH
6690: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6691: LD_ADDR_VAR 0 4
6695: PUSH
6696: LD_INT 215
6698: PUSH
6699: LD_INT 162
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 195
6708: PUSH
6709: LD_INT 163
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 174
6718: PUSH
6719: LD_INT 162
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 145
6728: PUSH
6729: LD_INT 163
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 127
6738: PUSH
6739: LD_INT 163
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6753: LD_ADDR_VAR 0 6
6757: PUSH
6758: LD_INT 221
6760: PUSH
6761: LD_INT 161
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6768: LD_ADDR_VAR 0 2
6772: PUSH
6773: LD_EXP 46
6777: PUSH
6778: LD_EXP 50
6782: UNION
6783: ST_TO_ADDR
// if not tmp then
6784: LD_VAR 0 2
6788: NOT
6789: IFFALSE 6793
// exit ;
6791: GO 7358
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
6793: LD_VAR 0 2
6797: PPUSH
6798: LD_VAR 0 6
6802: PUSH
6803: LD_INT 1
6805: ARRAY
6806: PPUSH
6807: LD_VAR 0 6
6811: PUSH
6812: LD_INT 2
6814: ARRAY
6815: PPUSH
6816: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6820: LD_INT 35
6822: PPUSH
6823: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
6827: LD_ADDR_VAR 0 2
6831: PUSH
6832: LD_EXP 50
6836: PPUSH
6837: LD_INT 3
6839: PUSH
6840: LD_INT 55
6842: PUSH
6843: EMPTY
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 2
6852: PUSH
6853: LD_INT 25
6855: PUSH
6856: LD_INT 1
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: LD_INT 25
6865: PUSH
6866: LD_INT 8
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PPUSH
6882: CALL_OW 72
6886: ST_TO_ADDR
// if tmp then
6887: LD_VAR 0 2
6891: IFFALSE 7044
// begin for i in tmp do
6893: LD_ADDR_VAR 0 1
6897: PUSH
6898: LD_VAR 0 2
6902: PUSH
6903: FOR_IN
6904: IFFALSE 7042
// begin tag := GetTag ( i ) ;
6906: LD_ADDR_VAR 0 5
6910: PUSH
6911: LD_VAR 0 1
6915: PPUSH
6916: CALL_OW 110
6920: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
6921: LD_VAR 0 1
6925: PPUSH
6926: CALL_OW 256
6930: PUSH
6931: LD_INT 800
6933: LESS
6934: PUSH
6935: LD_VAR 0 5
6939: PUSH
6940: LD_INT 101
6942: LESS
6943: AND
6944: IFFALSE 6987
// begin SetTag ( i , 101 ) ;
6946: LD_VAR 0 1
6950: PPUSH
6951: LD_INT 101
6953: PPUSH
6954: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
6958: LD_VAR 0 1
6962: PPUSH
6963: LD_VAR 0 6
6967: PUSH
6968: LD_INT 1
6970: ARRAY
6971: PPUSH
6972: LD_VAR 0 6
6976: PUSH
6977: LD_INT 2
6979: ARRAY
6980: PPUSH
6981: CALL_OW 111
// end else
6985: GO 7040
// if tag = 101 then
6987: LD_VAR 0 5
6991: PUSH
6992: LD_INT 101
6994: EQUAL
6995: IFFALSE 7026
// begin if GetLives ( i ) = 1000 then
6997: LD_VAR 0 1
7001: PPUSH
7002: CALL_OW 256
7006: PUSH
7007: LD_INT 1000
7009: EQUAL
7010: IFFALSE 7024
// SetTag ( i , 0 ) ;
7012: LD_VAR 0 1
7016: PPUSH
7017: LD_INT 0
7019: PPUSH
7020: CALL_OW 109
// end else
7024: GO 7040
// AgressiveMove ( i , path ) ;
7026: LD_VAR 0 1
7030: PPUSH
7031: LD_VAR 0 4
7035: PPUSH
7036: CALL 69174 0 2
// end ;
7040: GO 6903
7042: POP
7043: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7044: LD_ADDR_VAR 0 2
7048: PUSH
7049: LD_INT 22
7051: PUSH
7052: LD_INT 8
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 21
7061: PUSH
7062: LD_INT 2
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: LD_INT 34
7074: PUSH
7075: LD_INT 32
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 69
7095: ST_TO_ADDR
// if not tmp then
7096: LD_VAR 0 2
7100: NOT
7101: IFFALSE 7105
// continue ;
7103: GO 6820
// for i in tmp do
7105: LD_ADDR_VAR 0 1
7109: PUSH
7110: LD_VAR 0 2
7114: PUSH
7115: FOR_IN
7116: IFFALSE 7349
// begin mech := IsDrivenBy ( i ) ;
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_VAR 0 1
7127: PPUSH
7128: CALL_OW 311
7132: ST_TO_ADDR
// if not mech then
7133: LD_VAR 0 3
7137: NOT
7138: IFFALSE 7142
// continue ;
7140: GO 7115
// tag := GetTag ( i ) ;
7142: LD_ADDR_VAR 0 5
7146: PUSH
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 110
7156: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7157: LD_VAR 0 1
7161: PPUSH
7162: CALL_OW 256
7166: PUSH
7167: LD_INT 600
7169: GREATEREQUAL
7170: PUSH
7171: LD_VAR 0 5
7175: PUSH
7176: LD_INT 101
7178: LESS
7179: AND
7180: IFFALSE 7196
// AgressiveMove ( i , path ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_VAR 0 4
7191: PPUSH
7192: CALL 69174 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7196: LD_VAR 0 1
7200: PPUSH
7201: CALL_OW 256
7205: PUSH
7206: LD_INT 600
7208: LESS
7209: PUSH
7210: LD_VAR 0 5
7214: PUSH
7215: LD_INT 101
7217: LESS
7218: AND
7219: IFFALSE 7260
// begin SetTag ( i , 101 ) ;
7221: LD_VAR 0 1
7225: PPUSH
7226: LD_INT 101
7228: PPUSH
7229: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7233: LD_VAR 0 1
7237: PPUSH
7238: LD_VAR 0 6
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: LD_VAR 0 6
7251: PUSH
7252: LD_INT 2
7254: ARRAY
7255: PPUSH
7256: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7260: LD_VAR 0 5
7264: PUSH
7265: LD_INT 101
7267: EQUAL
7268: PUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: LD_VAR 0 6
7278: PUSH
7279: LD_INT 1
7281: ARRAY
7282: PPUSH
7283: LD_VAR 0 6
7287: PUSH
7288: LD_INT 2
7290: ARRAY
7291: PPUSH
7292: CALL_OW 297
7296: PUSH
7297: LD_INT 9
7299: LESS
7300: AND
7301: PUSH
7302: LD_VAR 0 3
7306: AND
7307: IFFALSE 7347
// begin if GetLives ( i ) < 1000 then
7309: LD_VAR 0 1
7313: PPUSH
7314: CALL_OW 256
7318: PUSH
7319: LD_INT 1000
7321: LESS
7322: IFFALSE 7335
// AddComRepairVehicleAndReturn ( mech ) else
7324: LD_VAR 0 3
7328: PPUSH
7329: CALL 68390 0 1
7333: GO 7347
// SetTag ( i , 0 ) ;
7335: LD_VAR 0 1
7339: PPUSH
7340: LD_INT 0
7342: PPUSH
7343: CALL_OW 109
// end ; end ;
7347: GO 7115
7349: POP
7350: POP
// until not tmp ;
7351: LD_VAR 0 2
7355: NOT
7356: IFFALSE 6820
// end ;
7358: PPOPN 6
7360: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7361: LD_EXP 23
7365: IFFALSE 8670
7367: GO 7369
7369: DISABLE
7370: LD_INT 0
7372: PPUSH
7373: PPUSH
7374: PPUSH
7375: PPUSH
7376: PPUSH
7377: PPUSH
7378: PPUSH
7379: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7380: LD_ADDR_VAR 0 7
7384: PUSH
7385: LD_INT 209
7387: PUSH
7388: LD_INT 221
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 190
7397: PUSH
7398: LD_INT 220
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 177
7407: PUSH
7408: LD_INT 220
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 168
7417: PUSH
7418: LD_INT 223
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 150
7427: PUSH
7428: LD_INT 206
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7442: LD_ADDR_VAR 0 8
7446: PUSH
7447: LD_INT 219
7449: PUSH
7450: LD_INT 225
7452: PUSH
7453: LD_INT 0
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: LIST
7460: ST_TO_ADDR
// for i := 1 to 2 do
7461: LD_ADDR_VAR 0 1
7465: PUSH
7466: DOUBLE
7467: LD_INT 1
7469: DEC
7470: ST_TO_ADDR
7471: LD_INT 2
7473: PUSH
7474: FOR_TO
7475: IFFALSE 7624
// begin uc_side := 5 ;
7477: LD_ADDR_OWVAR 20
7481: PUSH
7482: LD_INT 5
7484: ST_TO_ADDR
// uc_nation := 2 ;
7485: LD_ADDR_OWVAR 21
7489: PUSH
7490: LD_INT 2
7492: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7493: LD_INT 14
7495: PPUSH
7496: LD_INT 1
7498: PPUSH
7499: LD_INT 1
7501: PPUSH
7502: LD_INT 32
7504: PPUSH
7505: LD_INT 80
7507: PPUSH
7508: CALL 34117 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7512: LD_ADDR_VAR 0 2
7516: PUSH
7517: LD_VAR 0 2
7521: PPUSH
7522: CALL_OW 45
7526: PPUSH
7527: CALL 66570 0 2
7531: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7532: LD_VAR 0 2
7536: PUSH
7537: LD_VAR 0 1
7541: ARRAY
7542: PPUSH
7543: LD_INT 4
7545: PPUSH
7546: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7550: LD_VAR 0 2
7554: PUSH
7555: LD_VAR 0 1
7559: ARRAY
7560: PPUSH
7561: LD_INT 16
7563: PPUSH
7564: LD_INT 0
7566: PPUSH
7567: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7571: LD_INT 0
7573: PPUSH
7574: LD_INT 4
7576: PPUSH
7577: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7581: CALL_OW 44
7585: PPUSH
7586: LD_VAR 0 2
7590: PUSH
7591: LD_VAR 0 1
7595: ARRAY
7596: PPUSH
7597: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7601: LD_VAR 0 2
7605: PUSH
7606: LD_VAR 0 1
7610: ARRAY
7611: PPUSH
7612: LD_INT 337
7614: PPUSH
7615: LD_INT 232
7617: PPUSH
7618: CALL_OW 111
// end ;
7622: GO 7474
7624: POP
7625: POP
// wait ( 0 0$25 ) ;
7626: LD_INT 875
7628: PPUSH
7629: CALL_OW 67
// for i := 1 to 2 do
7633: LD_ADDR_VAR 0 1
7637: PUSH
7638: DOUBLE
7639: LD_INT 1
7641: DEC
7642: ST_TO_ADDR
7643: LD_INT 2
7645: PUSH
7646: FOR_TO
7647: IFFALSE 7672
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7649: LD_VAR 0 2
7653: PUSH
7654: LD_VAR 0 1
7658: ARRAY
7659: PPUSH
7660: LD_INT 2
7662: PPUSH
7663: LD_INT 100
7665: PPUSH
7666: CALL_OW 290
7670: GO 7646
7672: POP
7673: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7674: LD_EXP 51
7678: PPUSH
7679: LD_INT 2
7681: PUSH
7682: LD_INT 25
7684: PUSH
7685: LD_INT 1
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 25
7694: PUSH
7695: LD_INT 8
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: PPUSH
7707: CALL_OW 72
7711: PPUSH
7712: CALL_OW 122
// wait ( 0 0$3 ) ;
7716: LD_INT 105
7718: PPUSH
7719: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7723: LD_EXP 51
7727: PUSH
7728: LD_EXP 43
7732: UNION
7733: PPUSH
7734: LD_VAR 0 8
7738: PUSH
7739: LD_INT 1
7741: ARRAY
7742: PPUSH
7743: LD_VAR 0 8
7747: PUSH
7748: LD_INT 2
7750: ARRAY
7751: PPUSH
7752: CALL_OW 174
// wait ( 0 0$3 ) ;
7756: LD_INT 105
7758: PPUSH
7759: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7763: LD_VAR 0 2
7767: PPUSH
7768: LD_INT 218
7770: PPUSH
7771: LD_INT 217
7773: PPUSH
7774: CALL_OW 171
// wait ( 1 1$00 ) ;
7778: LD_INT 2100
7780: PPUSH
7781: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7785: LD_INT 35
7787: PPUSH
7788: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
7792: LD_VAR 0 8
7796: PUSH
7797: LD_INT 3
7799: ARRAY
7800: PUSH
7801: LD_INT 0
7803: EQUAL
7804: IFFALSE 7909
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
7806: LD_INT 22
7808: PUSH
7809: LD_INT 3
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 92
7818: PUSH
7819: LD_INT 168
7821: PUSH
7822: LD_INT 229
7824: PUSH
7825: LD_INT 12
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 69
7842: PUSH
7843: LD_INT 0
7845: EQUAL
7846: IFFALSE 7909
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
7848: LD_ADDR_VAR 0 8
7852: PUSH
7853: LD_INT 167
7855: PUSH
7856: LD_INT 222
7858: PUSH
7859: LD_INT 1
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
7867: LD_EXP 43
7871: PUSH
7872: LD_VAR 0 2
7876: ADD
7877: PUSH
7878: LD_EXP 51
7882: PPUSH
7883: LD_INT 25
7885: PUSH
7886: LD_INT 4
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PPUSH
7893: CALL_OW 72
7897: ADD
7898: PPUSH
7899: LD_INT 167
7901: PPUSH
7902: LD_INT 222
7904: PPUSH
7905: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7909: LD_ADDR_VAR 0 3
7913: PUSH
7914: LD_EXP 51
7918: PPUSH
7919: LD_INT 3
7921: PUSH
7922: LD_INT 55
7924: PUSH
7925: EMPTY
7926: LIST
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 2
7934: PUSH
7935: LD_INT 25
7937: PUSH
7938: LD_INT 1
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 25
7947: PUSH
7948: LD_INT 8
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 72
7968: ST_TO_ADDR
// if tmp then
7969: LD_VAR 0 3
7973: IFFALSE 8186
// begin for i in tmp do
7975: LD_ADDR_VAR 0 1
7979: PUSH
7980: LD_VAR 0 3
7984: PUSH
7985: FOR_IN
7986: IFFALSE 8184
// begin tag := GetTag ( i ) ;
7988: LD_ADDR_VAR 0 4
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 110
8002: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 256
8012: PUSH
8013: LD_INT 800
8015: LESS
8016: PUSH
8017: LD_VAR 0 4
8021: PUSH
8022: LD_INT 101
8024: LESS
8025: AND
8026: IFFALSE 8069
// begin SetTag ( i , 101 ) ;
8028: LD_VAR 0 1
8032: PPUSH
8033: LD_INT 101
8035: PPUSH
8036: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8040: LD_VAR 0 1
8044: PPUSH
8045: LD_VAR 0 8
8049: PUSH
8050: LD_INT 1
8052: ARRAY
8053: PPUSH
8054: LD_VAR 0 8
8058: PUSH
8059: LD_INT 2
8061: ARRAY
8062: PPUSH
8063: CALL_OW 111
// end else
8067: GO 8182
// if tag = 101 then
8069: LD_VAR 0 4
8073: PUSH
8074: LD_INT 101
8076: EQUAL
8077: IFFALSE 8168
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8079: LD_VAR 0 1
8083: PPUSH
8084: LD_VAR 0 8
8088: PUSH
8089: LD_INT 1
8091: ARRAY
8092: PPUSH
8093: LD_VAR 0 8
8097: PUSH
8098: LD_INT 2
8100: ARRAY
8101: PPUSH
8102: CALL_OW 297
8106: PUSH
8107: LD_INT 10
8109: GREATER
8110: IFFALSE 8139
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_VAR 0 8
8121: PUSH
8122: LD_INT 1
8124: ARRAY
8125: PPUSH
8126: LD_VAR 0 8
8130: PUSH
8131: LD_INT 2
8133: ARRAY
8134: PPUSH
8135: CALL_OW 111
// if GetLives ( i ) = 1000 then
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 256
8148: PUSH
8149: LD_INT 1000
8151: EQUAL
8152: IFFALSE 8166
// SetTag ( i , 0 ) ;
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_INT 0
8161: PPUSH
8162: CALL_OW 109
// end else
8166: GO 8182
// AgressiveMove ( i , path ) ;
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_VAR 0 7
8177: PPUSH
8178: CALL 69174 0 2
// end ;
8182: GO 7985
8184: POP
8185: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8186: LD_ADDR_VAR 0 3
8190: PUSH
8191: LD_INT 22
8193: PUSH
8194: LD_INT 5
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 21
8203: PUSH
8204: LD_INT 2
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: LD_INT 3
8213: PUSH
8214: LD_INT 34
8216: PUSH
8217: LD_INT 32
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: PPUSH
8233: CALL_OW 69
8237: ST_TO_ADDR
// if not tmp then
8238: LD_VAR 0 3
8242: NOT
8243: IFFALSE 8247
// continue ;
8245: GO 7785
// for i in tmp do
8247: LD_ADDR_VAR 0 1
8251: PUSH
8252: LD_VAR 0 3
8256: PUSH
8257: FOR_IN
8258: IFFALSE 8661
// begin mech := IsDrivenBy ( i ) ;
8260: LD_ADDR_VAR 0 5
8264: PUSH
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 311
8274: ST_TO_ADDR
// if not mech then
8275: LD_VAR 0 5
8279: NOT
8280: IFFALSE 8284
// continue ;
8282: GO 8257
// tag := GetTag ( i ) ;
8284: LD_ADDR_VAR 0 4
8288: PUSH
8289: LD_VAR 0 1
8293: PPUSH
8294: CALL_OW 110
8298: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL_OW 261
8308: PUSH
8309: LD_INT 90
8311: GREATER
8312: PUSH
8313: LD_VAR 0 4
8317: PUSH
8318: LD_INT 102
8320: EQUAL
8321: AND
8322: IFFALSE 8338
// SetTag ( i , 0 ) else
8324: LD_VAR 0 1
8328: PPUSH
8329: LD_INT 0
8331: PPUSH
8332: CALL_OW 109
8336: GO 8434
// if GetTag ( i ) = 102 then
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 110
8347: PUSH
8348: LD_INT 102
8350: EQUAL
8351: IFFALSE 8434
// begin x := rand ( 1 , 2 ) ;
8353: LD_ADDR_VAR 0 6
8357: PUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_INT 2
8363: PPUSH
8364: CALL_OW 12
8368: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8369: LD_VAR 0 1
8373: PPUSH
8374: LD_VAR 0 2
8378: PUSH
8379: LD_VAR 0 6
8383: ARRAY
8384: PPUSH
8385: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8389: LD_VAR 0 2
8393: PUSH
8394: LD_VAR 0 6
8398: ARRAY
8399: PPUSH
8400: LD_INT 2
8402: PPUSH
8403: CALL_OW 289
8407: PUSH
8408: LD_INT 20
8410: LESS
8411: IFFALSE 8434
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8413: LD_VAR 0 2
8417: PUSH
8418: LD_VAR 0 6
8422: ARRAY
8423: PPUSH
8424: LD_INT 2
8426: PPUSH
8427: LD_INT 100
8429: PPUSH
8430: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8434: LD_VAR 0 1
8438: PPUSH
8439: CALL_OW 256
8443: PUSH
8444: LD_INT 600
8446: GREATEREQUAL
8447: PUSH
8448: LD_VAR 0 4
8452: PUSH
8453: LD_INT 101
8455: LESS
8456: AND
8457: IFFALSE 8473
// AgressiveMove ( i , path ) ;
8459: LD_VAR 0 1
8463: PPUSH
8464: LD_VAR 0 7
8468: PPUSH
8469: CALL 69174 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8473: LD_VAR 0 1
8477: PPUSH
8478: CALL_OW 256
8482: PUSH
8483: LD_INT 600
8485: LESS
8486: PUSH
8487: LD_VAR 0 4
8491: PUSH
8492: LD_INT 101
8494: LESS
8495: AND
8496: IFFALSE 8537
// begin SetTag ( i , 101 ) ;
8498: LD_VAR 0 1
8502: PPUSH
8503: LD_INT 101
8505: PPUSH
8506: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8510: LD_VAR 0 1
8514: PPUSH
8515: LD_VAR 0 8
8519: PUSH
8520: LD_INT 1
8522: ARRAY
8523: PPUSH
8524: LD_VAR 0 8
8528: PUSH
8529: LD_INT 2
8531: ARRAY
8532: PPUSH
8533: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8537: LD_VAR 0 4
8541: PUSH
8542: LD_INT 101
8544: EQUAL
8545: PUSH
8546: LD_VAR 0 1
8550: PPUSH
8551: LD_VAR 0 8
8555: PUSH
8556: LD_INT 1
8558: ARRAY
8559: PPUSH
8560: LD_VAR 0 8
8564: PUSH
8565: LD_INT 2
8567: ARRAY
8568: PPUSH
8569: CALL_OW 297
8573: PUSH
8574: LD_INT 9
8576: LESS
8577: AND
8578: PUSH
8579: LD_VAR 0 5
8583: AND
8584: IFFALSE 8659
// begin if GetLives ( i ) < 1000 then
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 256
8595: PUSH
8596: LD_INT 1000
8598: LESS
8599: IFFALSE 8612
// AddComRepairVehicleAndReturn ( mech ) else
8601: LD_VAR 0 5
8605: PPUSH
8606: CALL 68390 0 1
8610: GO 8659
// if GetFuel ( i ) <= 50 and cargo then
8612: LD_VAR 0 1
8616: PPUSH
8617: CALL_OW 261
8621: PUSH
8622: LD_INT 50
8624: LESSEQUAL
8625: PUSH
8626: LD_VAR 0 2
8630: AND
8631: IFFALSE 8647
// SetTag ( i , 102 ) else
8633: LD_VAR 0 1
8637: PPUSH
8638: LD_INT 102
8640: PPUSH
8641: CALL_OW 109
8645: GO 8659
// SetTag ( i , 0 ) ;
8647: LD_VAR 0 1
8651: PPUSH
8652: LD_INT 0
8654: PPUSH
8655: CALL_OW 109
// end ; end ;
8659: GO 8257
8661: POP
8662: POP
// until not tmp ;
8663: LD_VAR 0 3
8667: NOT
8668: IFFALSE 7785
// end ;
8670: PPOPN 8
8672: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8673: LD_INT 0
8675: PPUSH
8676: PPUSH
8677: PPUSH
8678: PPUSH
8679: PPUSH
8680: PPUSH
8681: PPUSH
8682: PPUSH
8683: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8684: LD_INT 20
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8694: LD_INT 175
8696: PPUSH
8697: CALL_OW 67
// heikeInConvoy := false ;
8701: LD_ADDR_VAR 0 8
8705: PUSH
8706: LD_INT 0
8708: ST_TO_ADDR
// needOil := false ;
8709: LD_ADDR_VAR 0 7
8713: PUSH
8714: LD_INT 0
8716: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8717: LD_ADDR_VAR 0 3
8721: PUSH
8722: LD_INT 20
8724: PPUSH
8725: LD_INT 22
8727: PUSH
8728: LD_INT 2
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PUSH
8735: LD_INT 3
8737: PUSH
8738: LD_INT 2
8740: PUSH
8741: LD_INT 34
8743: PUSH
8744: LD_INT 88
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: LD_INT 34
8753: PUSH
8754: LD_INT 31
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PUSH
8770: LD_INT 33
8772: PUSH
8773: LD_INT 1
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 70
8789: ST_TO_ADDR
// for i in tmp do
8790: LD_ADDR_VAR 0 2
8794: PUSH
8795: LD_VAR 0 3
8799: PUSH
8800: FOR_IN
8801: IFFALSE 8886
// begin if IsDrivenBy ( i ) = Heike then
8803: LD_VAR 0 2
8807: PPUSH
8808: CALL_OW 311
8812: PUSH
8813: LD_EXP 33
8817: EQUAL
8818: IFFALSE 8837
// begin heikeInConvoy := true ;
8820: LD_ADDR_VAR 0 8
8824: PUSH
8825: LD_INT 1
8827: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
8828: LD_STRING QHeikeConvoy
8830: PPUSH
8831: CALL_OW 97
// break ;
8835: GO 8886
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
8837: LD_VAR 0 2
8841: PPUSH
8842: CALL_OW 262
8846: PUSH
8847: LD_INT 1
8849: EQUAL
8850: PUSH
8851: LD_VAR 0 2
8855: PPUSH
8856: CALL_OW 261
8860: PUSH
8861: LD_INT 10
8863: LESS
8864: AND
8865: IFFALSE 8884
// begin needOil := true ;
8867: LD_ADDR_VAR 0 7
8871: PUSH
8872: LD_INT 1
8874: ST_TO_ADDR
// Query ( QNeedOil ) ;
8875: LD_STRING QNeedOil
8877: PPUSH
8878: CALL_OW 97
// break ;
8882: GO 8886
// end ; end ;
8884: GO 8800
8886: POP
8887: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
8888: LD_VAR 0 7
8892: NOT
8893: PUSH
8894: LD_VAR 0 8
8898: NOT
8899: AND
8900: PUSH
8901: LD_VAR 0 3
8905: PPUSH
8906: LD_INT 2
8908: PUSH
8909: LD_INT 34
8911: PUSH
8912: LD_INT 32
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: LD_INT 34
8921: PUSH
8922: LD_INT 51
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: PPUSH
8934: CALL_OW 72
8938: AND
8939: IFFALSE 8956
// if Query ( QConvoy ) = 1 then
8941: LD_STRING QConvoy
8943: PPUSH
8944: CALL_OW 97
8948: PUSH
8949: LD_INT 1
8951: EQUAL
8952: IFFALSE 8956
// break ;
8954: GO 8960
// until false ;
8956: LD_INT 0
8958: IFFALSE 8694
// SetAreaMapShow ( oilArea , 0 ) ;
8960: LD_INT 20
8962: PPUSH
8963: LD_INT 0
8965: PPUSH
8966: CALL_OW 424
// data := [ ] ;
8970: LD_ADDR_VAR 0 4
8974: PUSH
8975: EMPTY
8976: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
8977: LD_ADDR_VAR 0 5
8981: PUSH
8982: LD_INT 60
8984: PUSH
8985: LD_INT 50
8987: PUSH
8988: LD_INT 40
8990: PUSH
8991: LD_INT 30
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: LD_OWVAR 67
9004: ARRAY
9005: ST_TO_ADDR
// for i in tmp do
9006: LD_ADDR_VAR 0 2
9010: PUSH
9011: LD_VAR 0 3
9015: PUSH
9016: FOR_IN
9017: IFFALSE 9114
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9019: LD_ADDR_VAR 0 4
9023: PUSH
9024: LD_VAR 0 4
9028: PPUSH
9029: LD_VAR 0 2
9033: PUSH
9034: LD_VAR 0 2
9038: PPUSH
9039: CALL_OW 311
9043: PUSH
9044: LD_VAR 0 2
9048: PPUSH
9049: CALL_OW 256
9053: PUSH
9054: LD_VAR 0 2
9058: PPUSH
9059: CALL_OW 261
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL 66570 0 2
9074: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9075: LD_VAR 0 2
9079: PPUSH
9080: CALL_OW 311
9084: PPUSH
9085: CALL_OW 64
// RemoveUnit ( i ) ;
9089: LD_VAR 0 2
9093: PPUSH
9094: CALL_OW 64
// chance := chance + 20 ;
9098: LD_ADDR_VAR 0 5
9102: PUSH
9103: LD_VAR 0 5
9107: PUSH
9108: LD_INT 20
9110: PLUS
9111: ST_TO_ADDR
// end ;
9112: GO 9016
9114: POP
9115: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9116: LD_INT 1575
9118: PPUSH
9119: LD_INT 5250
9121: PPUSH
9122: CALL_OW 12
9126: PPUSH
9127: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9131: LD_INT 35
9133: PPUSH
9134: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9138: LD_INT 22
9140: PUSH
9141: LD_INT 3
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 92
9150: PUSH
9151: LD_INT 261
9153: PUSH
9154: LD_INT 71
9156: PUSH
9157: LD_INT 12
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PPUSH
9170: CALL_OW 69
9174: NOT
9175: PUSH
9176: LD_INT 277
9178: PPUSH
9179: LD_INT 80
9181: PPUSH
9182: CALL_OW 428
9186: NOT
9187: AND
9188: IFFALSE 9131
// for i in data do
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_VAR 0 4
9199: PUSH
9200: FOR_IN
9201: IFFALSE 9588
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9203: LD_ADDR_OWVAR 21
9207: PUSH
9208: LD_VAR 0 2
9212: PUSH
9213: LD_INT 1
9215: ARRAY
9216: PPUSH
9217: CALL_OW 248
9221: ST_TO_ADDR
// uc_side := 2 ;
9222: LD_ADDR_OWVAR 20
9226: PUSH
9227: LD_INT 2
9229: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9230: LD_VAR 0 2
9234: PUSH
9235: LD_INT 1
9237: ARRAY
9238: PPUSH
9239: CALL_OW 265
9243: PPUSH
9244: LD_VAR 0 2
9248: PUSH
9249: LD_INT 1
9251: ARRAY
9252: PPUSH
9253: CALL_OW 262
9257: PPUSH
9258: LD_VAR 0 2
9262: PUSH
9263: LD_INT 1
9265: ARRAY
9266: PPUSH
9267: CALL_OW 263
9271: PPUSH
9272: LD_VAR 0 2
9276: PUSH
9277: LD_INT 1
9279: ARRAY
9280: PPUSH
9281: CALL_OW 264
9285: PPUSH
9286: LD_INT 66
9288: PPUSH
9289: CALL 34117 0 5
// vehicle := CreateVehicle ;
9293: LD_ADDR_VAR 0 6
9297: PUSH
9298: CALL_OW 45
9302: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
9303: LD_VAR 0 6
9307: PPUSH
9308: LD_INT 277
9310: PPUSH
9311: LD_INT 80
9313: PPUSH
9314: LD_INT 4
9316: PPUSH
9317: LD_INT 0
9319: PPUSH
9320: CALL 68710 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9324: LD_VAR 0 2
9328: PUSH
9329: LD_INT 2
9331: ARRAY
9332: PPUSH
9333: LD_VAR 0 6
9337: PPUSH
9338: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9342: LD_VAR 0 6
9346: PPUSH
9347: LD_VAR 0 2
9351: PUSH
9352: LD_INT 3
9354: ARRAY
9355: PPUSH
9356: CALL_OW 234
// success := Prob ( chance ) ;
9360: LD_ADDR_VAR 0 9
9364: PUSH
9365: LD_VAR 0 5
9369: PPUSH
9370: CALL_OW 13
9374: ST_TO_ADDR
// if success then
9375: LD_VAR 0 9
9379: IFFALSE 9447
// begin if GetEngine ( vehicle ) = engine_combustion then
9381: LD_VAR 0 6
9385: PPUSH
9386: CALL_OW 262
9390: PUSH
9391: LD_INT 1
9393: EQUAL
9394: IFFALSE 9408
// SetFuel ( vehicle , 90 ) ;
9396: LD_VAR 0 6
9400: PPUSH
9401: LD_INT 90
9403: PPUSH
9404: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9408: LD_VAR 0 6
9412: PPUSH
9413: CALL_OW 264
9417: PUSH
9418: LD_INT 32
9420: PUSH
9421: LD_INT 51
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: IN
9428: IFFALSE 9445
// SetCargo ( vehicle , mat_oil , 100 ) ;
9430: LD_VAR 0 6
9434: PPUSH
9435: LD_INT 2
9437: PPUSH
9438: LD_INT 100
9440: PPUSH
9441: CALL_OW 290
// end else
9445: GO 9519
// begin if i [ 3 ] > 333 then
9447: LD_VAR 0 2
9451: PUSH
9452: LD_INT 3
9454: ARRAY
9455: PUSH
9456: LD_INT 333
9458: GREATER
9459: IFFALSE 9473
// SetLives ( vehicle , 333 ) ;
9461: LD_VAR 0 6
9465: PPUSH
9466: LD_INT 333
9468: PPUSH
9469: CALL_OW 234
// if i [ 4 ] > 20 then
9473: LD_VAR 0 2
9477: PUSH
9478: LD_INT 4
9480: ARRAY
9481: PUSH
9482: LD_INT 20
9484: GREATER
9485: IFFALSE 9501
// SetFuel ( vehicle , 20 ) else
9487: LD_VAR 0 6
9491: PPUSH
9492: LD_INT 20
9494: PPUSH
9495: CALL_OW 240
9499: GO 9519
// SetFuel ( vehicle , i [ 4 ] ) ;
9501: LD_VAR 0 6
9505: PPUSH
9506: LD_VAR 0 2
9510: PUSH
9511: LD_INT 4
9513: ARRAY
9514: PPUSH
9515: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9519: LD_VAR 0 6
9523: PPUSH
9524: LD_INT 250
9526: PPUSH
9527: LD_INT 119
9529: PPUSH
9530: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9534: LD_VAR 0 6
9538: PPUSH
9539: LD_INT 211
9541: PPUSH
9542: LD_INT 80
9544: PPUSH
9545: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9549: LD_INT 175
9551: PPUSH
9552: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9556: LD_INT 20
9558: PPUSH
9559: LD_INT 22
9561: PUSH
9562: LD_INT 2
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 52
9571: PUSH
9572: EMPTY
9573: LIST
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PPUSH
9579: CALL_OW 70
9583: NOT
9584: IFFALSE 9549
// end ;
9586: GO 9200
9588: POP
9589: POP
// wait ( 0 0$10 ) ;
9590: LD_INT 350
9592: PPUSH
9593: CALL_OW 67
// GoForOil ;
9597: CALL 8673 0 0
// end ;
9601: LD_VAR 0 1
9605: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9606: LD_INT 22
9608: PPUSH
9609: LD_INT 21
9611: PUSH
9612: LD_INT 2
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 22
9621: PUSH
9622: LD_INT 5
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 58
9631: PUSH
9632: EMPTY
9633: LIST
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: PPUSH
9640: CALL_OW 70
9644: IFFALSE 9713
9646: GO 9648
9648: DISABLE
9649: LD_INT 0
9651: PPUSH
// begin enable ;
9652: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9653: LD_ADDR_VAR 0 1
9657: PUSH
9658: LD_INT 22
9660: PPUSH
9661: LD_INT 21
9663: PUSH
9664: LD_INT 2
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 22
9673: PUSH
9674: LD_INT 5
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 58
9683: PUSH
9684: EMPTY
9685: LIST
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 70
9696: PUSH
9697: FOR_IN
9698: IFFALSE 9711
// KillUnit ( i ) ;
9700: LD_VAR 0 1
9704: PPUSH
9705: CALL_OW 66
9709: GO 9697
9711: POP
9712: POP
// end ; end_of_file
9713: PPOPN 1
9715: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9716: LD_INT 0
9718: PPUSH
// uc_side := side ;
9719: LD_ADDR_OWVAR 20
9723: PUSH
9724: LD_VAR 0 1
9728: ST_TO_ADDR
// uc_nation := nation ;
9729: LD_ADDR_OWVAR 21
9733: PUSH
9734: LD_VAR 0 2
9738: ST_TO_ADDR
// vc_chassis := chassis ;
9739: LD_ADDR_OWVAR 37
9743: PUSH
9744: LD_VAR 0 3
9748: ST_TO_ADDR
// vc_engine := engine ;
9749: LD_ADDR_OWVAR 39
9753: PUSH
9754: LD_VAR 0 4
9758: ST_TO_ADDR
// vc_control := control ;
9759: LD_ADDR_OWVAR 38
9763: PUSH
9764: LD_VAR 0 5
9768: ST_TO_ADDR
// vc_weapon := weapon ;
9769: LD_ADDR_OWVAR 40
9773: PUSH
9774: LD_VAR 0 6
9778: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9779: LD_ADDR_OWVAR 41
9783: PUSH
9784: LD_VAR 0 7
9788: ST_TO_ADDR
// result := CreateVehicle ;
9789: LD_ADDR_VAR 0 8
9793: PUSH
9794: CALL_OW 45
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 8
9803: RET
// export function SayX ( units , ident ) ; var i ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
// result := false ;
9808: LD_ADDR_VAR 0 3
9812: PUSH
9813: LD_INT 0
9815: ST_TO_ADDR
// if not units then
9816: LD_VAR 0 1
9820: NOT
9821: IFFALSE 9825
// exit ;
9823: GO 9879
// for i in units do
9825: LD_ADDR_VAR 0 4
9829: PUSH
9830: LD_VAR 0 1
9834: PUSH
9835: FOR_IN
9836: IFFALSE 9877
// if IsOk ( i ) then
9838: LD_VAR 0 4
9842: PPUSH
9843: CALL_OW 302
9847: IFFALSE 9875
// begin Say ( i , ident ) ;
9849: LD_VAR 0 4
9853: PPUSH
9854: LD_VAR 0 2
9858: PPUSH
9859: CALL_OW 88
// result := i ;
9863: LD_ADDR_VAR 0 3
9867: PUSH
9868: LD_VAR 0 4
9872: ST_TO_ADDR
// break ;
9873: GO 9877
// end ;
9875: GO 9835
9877: POP
9878: POP
// end ;
9879: LD_VAR 0 3
9883: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
9884: LD_INT 0
9886: PPUSH
9887: PPUSH
// InitUc ;
9888: CALL_OW 18
// InitHc ;
9892: CALL_OW 19
// uc_side := 0 ;
9896: LD_ADDR_OWVAR 20
9900: PUSH
9901: LD_INT 0
9903: ST_TO_ADDR
// uc_nation := 0 ;
9904: LD_ADDR_OWVAR 21
9908: PUSH
9909: LD_INT 0
9911: ST_TO_ADDR
// for i = 1 to amount do
9912: LD_ADDR_VAR 0 4
9916: PUSH
9917: DOUBLE
9918: LD_INT 1
9920: DEC
9921: ST_TO_ADDR
9922: LD_VAR 0 2
9926: PUSH
9927: FOR_TO
9928: IFFALSE 10010
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
9930: LD_ADDR_OWVAR 29
9934: PUSH
9935: LD_INT 9
9937: PPUSH
9938: LD_INT 12
9940: PPUSH
9941: CALL_OW 12
9945: PUSH
9946: LD_INT 9
9948: PPUSH
9949: LD_INT 12
9951: PPUSH
9952: CALL_OW 12
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
9961: LD_ADDR_OWVAR 35
9965: PUSH
9966: LD_INT 1
9968: NEG
9969: PPUSH
9970: LD_INT 1
9972: PPUSH
9973: CALL_OW 12
9977: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9978: LD_INT 0
9980: PPUSH
9981: LD_INT 12
9983: PPUSH
9984: LD_INT 1
9986: PPUSH
9987: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
9991: CALL_OW 44
9995: PPUSH
9996: LD_VAR 0 1
10000: PPUSH
10001: LD_INT 0
10003: PPUSH
10004: CALL_OW 49
// end ;
10008: GO 9927
10010: POP
10011: POP
// InitHc ;
10012: CALL_OW 19
// end ;
10016: LD_VAR 0 3
10020: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10021: LD_INT 0
10023: PPUSH
10024: PPUSH
// uc_side := 0 ;
10025: LD_ADDR_OWVAR 20
10029: PUSH
10030: LD_INT 0
10032: ST_TO_ADDR
// uc_nation := 0 ;
10033: LD_ADDR_OWVAR 21
10037: PUSH
10038: LD_INT 0
10040: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10041: LD_INT 7
10043: PPUSH
10044: LD_INT 6
10046: PUSH
10047: LD_INT 5
10049: PUSH
10050: LD_INT 4
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: PUSH
10062: LD_OWVAR 67
10066: ARRAY
10067: PPUSH
10068: CALL 9884 0 2
// for i = 1 to 2 do
10072: LD_ADDR_VAR 0 4
10076: PUSH
10077: DOUBLE
10078: LD_INT 1
10080: DEC
10081: ST_TO_ADDR
10082: LD_INT 2
10084: PUSH
10085: FOR_TO
10086: IFFALSE 10123
// begin vc_chassis := class_mastodont ;
10088: LD_ADDR_OWVAR 37
10092: PUSH
10093: LD_INT 31
10095: ST_TO_ADDR
// vc_control := control_rider ;
10096: LD_ADDR_OWVAR 38
10100: PUSH
10101: LD_INT 4
10103: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10104: CALL_OW 45
10108: PPUSH
10109: LD_VAR 0 1
10113: PPUSH
10114: LD_INT 0
10116: PPUSH
10117: CALL 65487 0 3
// end ;
10121: GO 10085
10123: POP
10124: POP
// InitHc ;
10125: CALL_OW 19
// for i := 1 to 3 do
10129: LD_ADDR_VAR 0 4
10133: PUSH
10134: DOUBLE
10135: LD_INT 1
10137: DEC
10138: ST_TO_ADDR
10139: LD_INT 3
10141: PUSH
10142: FOR_TO
10143: IFFALSE 10180
// begin hc_class := class_horse ;
10145: LD_ADDR_OWVAR 28
10149: PUSH
10150: LD_INT 21
10152: ST_TO_ADDR
// hc_gallery :=  ;
10153: LD_ADDR_OWVAR 33
10157: PUSH
10158: LD_STRING 
10160: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10161: CALL_OW 44
10165: PPUSH
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_INT 0
10173: PPUSH
10174: CALL_OW 49
// end ;
10178: GO 10142
10180: POP
10181: POP
// InitHc ;
10182: CALL_OW 19
// for i = 1 to 3 do
10186: LD_ADDR_VAR 0 4
10190: PUSH
10191: DOUBLE
10192: LD_INT 1
10194: DEC
10195: ST_TO_ADDR
10196: LD_INT 3
10198: PUSH
10199: FOR_TO
10200: IFFALSE 10254
// begin hc_class = class_tiger ;
10202: LD_ADDR_OWVAR 28
10206: PUSH
10207: LD_INT 14
10209: ST_TO_ADDR
// hc_gallery =  ;
10210: LD_ADDR_OWVAR 33
10214: PUSH
10215: LD_STRING 
10217: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10218: LD_ADDR_OWVAR 35
10222: PUSH
10223: LD_INT 7
10225: NEG
10226: PPUSH
10227: LD_INT 7
10229: PPUSH
10230: CALL_OW 12
10234: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10235: CALL_OW 44
10239: PPUSH
10240: LD_VAR 0 1
10244: PPUSH
10245: LD_INT 0
10247: PPUSH
10248: CALL 65487 0 3
// end ;
10252: GO 10199
10254: POP
10255: POP
// InitHc ;
10256: CALL_OW 19
// for i := 1 to 4 do
10260: LD_ADDR_VAR 0 4
10264: PUSH
10265: DOUBLE
10266: LD_INT 1
10268: DEC
10269: ST_TO_ADDR
10270: LD_INT 4
10272: PUSH
10273: FOR_TO
10274: IFFALSE 10311
// begin hc_class := class_phororhacos ;
10276: LD_ADDR_OWVAR 28
10280: PUSH
10281: LD_INT 18
10283: ST_TO_ADDR
// hc_gallery :=  ;
10284: LD_ADDR_OWVAR 33
10288: PUSH
10289: LD_STRING 
10291: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10292: CALL_OW 44
10296: PPUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: LD_INT 0
10304: PPUSH
10305: CALL_OW 49
// end ;
10309: GO 10273
10311: POP
10312: POP
// InitHc ;
10313: CALL_OW 19
// for i := 1 to 4 do
10317: LD_ADDR_VAR 0 4
10321: PUSH
10322: DOUBLE
10323: LD_INT 1
10325: DEC
10326: ST_TO_ADDR
10327: LD_INT 4
10329: PUSH
10330: FOR_TO
10331: IFFALSE 10368
// begin hc_class := class_baggie ;
10333: LD_ADDR_OWVAR 28
10337: PUSH
10338: LD_INT 13
10340: ST_TO_ADDR
// hc_gallery :=  ;
10341: LD_ADDR_OWVAR 33
10345: PUSH
10346: LD_STRING 
10348: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10349: CALL_OW 44
10353: PPUSH
10354: LD_VAR 0 1
10358: PPUSH
10359: LD_INT 0
10361: PPUSH
10362: CALL_OW 49
// end ;
10366: GO 10330
10368: POP
10369: POP
// InitHc ;
10370: CALL_OW 19
// for i := 1 to 7 do
10374: LD_ADDR_VAR 0 4
10378: PUSH
10379: DOUBLE
10380: LD_INT 1
10382: DEC
10383: ST_TO_ADDR
10384: LD_INT 7
10386: PUSH
10387: FOR_TO
10388: IFFALSE 10425
// begin hc_class := class_frog ;
10390: LD_ADDR_OWVAR 28
10394: PUSH
10395: LD_INT 19
10397: ST_TO_ADDR
// hc_gallery :=  ;
10398: LD_ADDR_OWVAR 33
10402: PUSH
10403: LD_STRING 
10405: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10406: CALL_OW 44
10410: PPUSH
10411: LD_VAR 0 2
10415: PPUSH
10416: LD_INT 0
10418: PPUSH
10419: CALL_OW 49
// end ;
10423: GO 10387
10425: POP
10426: POP
// end ;
10427: LD_VAR 0 3
10431: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10432: LD_INT 0
10434: PPUSH
10435: PPUSH
10436: PPUSH
// if not observer or not unit then
10437: LD_VAR 0 1
10441: NOT
10442: PUSH
10443: LD_VAR 0 2
10447: NOT
10448: OR
10449: IFFALSE 10453
// exit ;
10451: GO 10501
// if not See ( GetSide ( observer ) , unit ) then
10453: LD_VAR 0 1
10457: PPUSH
10458: CALL_OW 255
10462: PPUSH
10463: LD_VAR 0 2
10467: PPUSH
10468: CALL_OW 292
10472: NOT
10473: IFFALSE 10477
// exit ;
10475: GO 10501
// result := GetDistUnits ( observer , unit ) < 12 ;
10477: LD_ADDR_VAR 0 3
10481: PUSH
10482: LD_VAR 0 1
10486: PPUSH
10487: LD_VAR 0 2
10491: PPUSH
10492: CALL_OW 296
10496: PUSH
10497: LD_INT 12
10499: LESS
10500: ST_TO_ADDR
// end ;
10501: LD_VAR 0 3
10505: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10506: LD_INT 0
10508: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10509: LD_VAR 0 2
10513: PUSH
10514: LD_INT 1
10516: ARRAY
10517: PPUSH
10518: LD_VAR 0 2
10522: PUSH
10523: LD_INT 2
10525: ARRAY
10526: PPUSH
10527: CALL_OW 488
10531: PUSH
10532: LD_VAR 0 2
10536: PUSH
10537: LD_INT 1
10539: ARRAY
10540: PPUSH
10541: LD_VAR 0 2
10545: PUSH
10546: LD_INT 2
10548: ARRAY
10549: PPUSH
10550: CALL_OW 428
10554: PUSH
10555: LD_INT 0
10557: EQUAL
10558: AND
10559: IFFALSE 10593
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10561: LD_VAR 0 1
10565: PPUSH
10566: LD_VAR 0 2
10570: PUSH
10571: LD_INT 1
10573: ARRAY
10574: PPUSH
10575: LD_VAR 0 2
10579: PUSH
10580: LD_INT 2
10582: ARRAY
10583: PPUSH
10584: LD_VAR 0 3
10588: PPUSH
10589: CALL_OW 48
// end ;
10593: LD_VAR 0 4
10597: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10598: LD_INT 0
10600: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10601: LD_VAR 0 1
10605: PPUSH
10606: LD_VAR 0 2
10610: PPUSH
10611: LD_VAR 0 3
10615: PPUSH
10616: LD_VAR 0 4
10620: PPUSH
10621: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10625: LD_VAR 0 1
10629: PPUSH
10630: LD_VAR 0 2
10634: PPUSH
10635: LD_VAR 0 3
10639: PPUSH
10640: CALL_OW 331
// end ;
10644: LD_VAR 0 5
10648: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10649: LD_INT 0
10651: PPUSH
// if not units then
10652: LD_VAR 0 1
10656: NOT
10657: IFFALSE 10661
// exit ;
10659: GO 10744
// result := true ;
10661: LD_ADDR_VAR 0 4
10665: PUSH
10666: LD_INT 1
10668: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10669: LD_VAR 0 1
10673: PPUSH
10674: LD_INT 26
10676: PUSH
10677: LD_INT 1
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL_OW 72
10688: PUSH
10689: LD_INT 1
10691: ARRAY
10692: PPUSH
10693: LD_VAR 0 2
10697: PPUSH
10698: CALL_OW 88
10702: NOT
10703: IFFALSE 10744
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10705: LD_ADDR_VAR 0 4
10709: PUSH
10710: LD_VAR 0 1
10714: PPUSH
10715: LD_INT 26
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PPUSH
10725: CALL_OW 72
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PPUSH
10734: LD_VAR 0 3
10738: PPUSH
10739: CALL_OW 88
10743: ST_TO_ADDR
// end ;
10744: LD_VAR 0 4
10748: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10749: LD_INT 0
10751: PPUSH
10752: PPUSH
// if not group then
10753: LD_VAR 0 2
10757: NOT
10758: IFFALSE 10762
// exit ;
10760: GO 10807
// for i in group do
10762: LD_ADDR_VAR 0 4
10766: PUSH
10767: LD_VAR 0 2
10771: PUSH
10772: FOR_IN
10773: IFFALSE 10805
// if See ( side , i ) then
10775: LD_VAR 0 1
10779: PPUSH
10780: LD_VAR 0 4
10784: PPUSH
10785: CALL_OW 292
10789: IFFALSE 10803
// begin result := true ;
10791: LD_ADDR_VAR 0 3
10795: PUSH
10796: LD_INT 1
10798: ST_TO_ADDR
// exit ;
10799: POP
10800: POP
10801: GO 10807
// end ;
10803: GO 10772
10805: POP
10806: POP
// end ; end_of_file
10807: LD_VAR 0 3
10811: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
10812: LD_INT 0
10814: PPUSH
10815: PPUSH
10816: PPUSH
10817: PPUSH
10818: PPUSH
10819: PPUSH
10820: PPUSH
// uc_side := 3 ;
10821: LD_ADDR_OWVAR 20
10825: PUSH
10826: LD_INT 3
10828: ST_TO_ADDR
// uc_nation := 3 ;
10829: LD_ADDR_OWVAR 21
10833: PUSH
10834: LD_INT 3
10836: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
10837: LD_ADDR_EXP 52
10841: PUSH
10842: LD_STRING Morozov
10844: PPUSH
10845: CALL_OW 25
10849: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
10850: LD_EXP 52
10854: PPUSH
10855: LD_INT 52
10857: PPUSH
10858: CALL_OW 52
// if not gaidarKilled then
10862: LD_EXP 7
10866: NOT
10867: IFFALSE 10900
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
10869: LD_ADDR_EXP 53
10873: PUSH
10874: LD_STRING Gaydar
10876: PPUSH
10877: LD_INT 0
10879: PPUSH
10880: LD_STRING 
10882: PPUSH
10883: CALL 29102 0 3
10887: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
10888: LD_EXP 53
10892: PPUSH
10893: LD_INT 52
10895: PPUSH
10896: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
10900: LD_INT 52
10902: PPUSH
10903: LD_STRING lenin
10905: PPUSH
10906: CALL_OW 500
// ruOutsiders := [ ] ;
10910: LD_ADDR_EXP 55
10914: PUSH
10915: EMPTY
10916: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
10917: LD_ADDR_EXP 57
10921: PUSH
10922: EMPTY
10923: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
10924: LD_ADDR_EXP 58
10928: PUSH
10929: EMPTY
10930: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
10931: LD_ADDR_EXP 59
10935: PUSH
10936: EMPTY
10937: ST_TO_ADDR
// ruAttackers := [ ] ;
10938: LD_ADDR_EXP 60
10942: PUSH
10943: EMPTY
10944: ST_TO_ADDR
// waveStrength := 0 ;
10945: LD_ADDR_EXP 61
10949: PUSH
10950: LD_INT 0
10952: ST_TO_ADDR
// if not gaidarKilled then
10953: LD_EXP 7
10957: NOT
10958: IFFALSE 10968
// waveStrength := 2 ;
10960: LD_ADDR_EXP 61
10964: PUSH
10965: LD_INT 2
10967: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
10968: LD_ADDR_VAR 0 7
10972: PUSH
10973: LD_INT 22
10975: PUSH
10976: LD_INT 3
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: LD_INT 21
10985: PUSH
10986: LD_INT 3
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PPUSH
10997: CALL_OW 69
11001: ST_TO_ADDR
// for i in tmp do
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: LD_VAR 0 7
11011: PUSH
11012: FOR_IN
11013: IFFALSE 11050
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11015: LD_VAR 0 2
11019: PPUSH
11020: LD_INT 5
11022: PUSH
11023: LD_INT 6
11025: PUSH
11026: LD_INT 7
11028: PUSH
11029: LD_INT 8
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: PUSH
11038: LD_OWVAR 67
11042: ARRAY
11043: PPUSH
11044: CALL_OW 241
11048: GO 11012
11050: POP
11051: POP
// for i := 1 to 3 do
11052: LD_ADDR_VAR 0 2
11056: PUSH
11057: DOUBLE
11058: LD_INT 1
11060: DEC
11061: ST_TO_ADDR
11062: LD_INT 3
11064: PUSH
11065: FOR_TO
11066: IFFALSE 11104
// begin PrepareHuman ( false , 1 , 0 ) ;
11068: LD_INT 0
11070: PPUSH
11071: LD_INT 1
11073: PPUSH
11074: LD_INT 0
11076: PPUSH
11077: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11081: CALL_OW 44
11085: PPUSH
11086: LD_INT 75
11088: PPUSH
11089: LD_INT 49
11091: PPUSH
11092: LD_INT 3
11094: PPUSH
11095: LD_INT 0
11097: PPUSH
11098: CALL_OW 50
// end ;
11102: GO 11065
11104: POP
11105: POP
// for i := 1 to 4 do
11106: LD_ADDR_VAR 0 2
11110: PUSH
11111: DOUBLE
11112: LD_INT 1
11114: DEC
11115: ST_TO_ADDR
11116: LD_INT 4
11118: PUSH
11119: FOR_TO
11120: IFFALSE 11166
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11122: LD_INT 0
11124: PPUSH
11125: LD_INT 1
11127: PPUSH
11128: LD_INT 2
11130: PPUSH
11131: CALL_OW 12
11135: PPUSH
11136: LD_INT 0
11138: PPUSH
11139: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11143: CALL_OW 44
11147: PPUSH
11148: LD_INT 330
11150: PPUSH
11151: LD_INT 231
11153: PPUSH
11154: LD_INT 5
11156: PPUSH
11157: LD_INT 0
11159: PPUSH
11160: CALL_OW 50
// end ;
11164: GO 11119
11166: POP
11167: POP
// hc_class := 1 ;
11168: LD_ADDR_OWVAR 28
11172: PUSH
11173: LD_INT 1
11175: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11176: CALL_OW 44
11180: PPUSH
11181: LD_INT 324
11183: PPUSH
11184: LD_INT 219
11186: PPUSH
11187: CALL_OW 428
11191: PPUSH
11192: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11196: CALL_OW 44
11200: PPUSH
11201: LD_INT 316
11203: PPUSH
11204: LD_INT 223
11206: PPUSH
11207: CALL_OW 428
11211: PPUSH
11212: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11216: LD_ADDR_VAR 0 7
11220: PUSH
11221: LD_INT 172
11223: PPUSH
11224: LD_INT 198
11226: PPUSH
11227: CALL_OW 428
11231: PPUSH
11232: CALL_OW 274
11236: PUSH
11237: LD_INT 189
11239: PPUSH
11240: LD_INT 156
11242: PPUSH
11243: CALL_OW 428
11247: PPUSH
11248: CALL_OW 274
11252: PUSH
11253: LD_INT 341
11255: PPUSH
11256: LD_INT 232
11258: PPUSH
11259: CALL_OW 428
11263: PPUSH
11264: CALL_OW 274
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: LIST
11273: ST_TO_ADDR
// for i in tmp do
11274: LD_ADDR_VAR 0 2
11278: PUSH
11279: LD_VAR 0 7
11283: PUSH
11284: FOR_IN
11285: IFFALSE 11319
// begin SetResourceType ( i , mat_cans , 200 ) ;
11287: LD_VAR 0 2
11291: PPUSH
11292: LD_INT 1
11294: PPUSH
11295: LD_INT 200
11297: PPUSH
11298: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11302: LD_VAR 0 2
11306: PPUSH
11307: LD_INT 2
11309: PPUSH
11310: LD_INT 300
11312: PPUSH
11313: CALL_OW 277
// end ;
11317: GO 11284
11319: POP
11320: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11321: LD_ADDR_VAR 0 7
11325: PUSH
11326: LD_INT 177
11328: PUSH
11329: LD_INT 114
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 138
11338: PUSH
11339: LD_INT 96
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: ST_TO_ADDR
// for i := 1 to tmp do
11350: LD_ADDR_VAR 0 2
11354: PUSH
11355: DOUBLE
11356: LD_INT 1
11358: DEC
11359: ST_TO_ADDR
11360: LD_VAR 0 7
11364: PUSH
11365: FOR_TO
11366: IFFALSE 11449
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11368: LD_INT 0
11370: PPUSH
11371: LD_INT 9
11373: PPUSH
11374: LD_INT 6
11376: PPUSH
11377: CALL_OW 380
// un := CreateHuman ;
11381: LD_ADDR_VAR 0 5
11385: PUSH
11386: CALL_OW 44
11390: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11391: LD_VAR 0 5
11395: PPUSH
11396: LD_INT 2
11398: PPUSH
11399: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11403: LD_VAR 0 5
11407: PPUSH
11408: LD_VAR 0 7
11412: PUSH
11413: LD_VAR 0 2
11417: ARRAY
11418: PUSH
11419: LD_INT 1
11421: ARRAY
11422: PPUSH
11423: LD_VAR 0 7
11427: PUSH
11428: LD_VAR 0 2
11432: ARRAY
11433: PUSH
11434: LD_INT 2
11436: ARRAY
11437: PPUSH
11438: CALL_OW 428
11442: PPUSH
11443: CALL_OW 52
// end ;
11447: GO 11365
11449: POP
11450: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11451: LD_ADDR_VAR 0 7
11455: PUSH
11456: LD_INT 198
11458: PUSH
11459: LD_INT 158
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 203
11468: PUSH
11469: LD_INT 166
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 181
11478: PUSH
11479: LD_INT 209
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 178
11488: PUSH
11489: LD_INT 196
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 181
11498: PUSH
11499: LD_INT 212
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: ST_TO_ADDR
// for i := 1 to tmp do
11513: LD_ADDR_VAR 0 2
11517: PUSH
11518: DOUBLE
11519: LD_INT 1
11521: DEC
11522: ST_TO_ADDR
11523: LD_VAR 0 7
11527: PUSH
11528: FOR_TO
11529: IFFALSE 11650
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11531: LD_INT 0
11533: PPUSH
11534: LD_INT 1
11536: PPUSH
11537: LD_INT 4
11539: PUSH
11540: LD_INT 5
11542: PUSH
11543: LD_INT 6
11545: PUSH
11546: LD_INT 7
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: PUSH
11555: LD_OWVAR 67
11559: ARRAY
11560: PPUSH
11561: CALL_OW 380
// un := CreateHuman ;
11565: LD_ADDR_VAR 0 5
11569: PUSH
11570: CALL_OW 44
11574: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11575: LD_ADDR_VAR 0 4
11579: PUSH
11580: LD_VAR 0 7
11584: PUSH
11585: LD_VAR 0 2
11589: ARRAY
11590: PUSH
11591: LD_INT 1
11593: ARRAY
11594: PPUSH
11595: LD_VAR 0 7
11599: PUSH
11600: LD_VAR 0 2
11604: ARRAY
11605: PUSH
11606: LD_INT 2
11608: ARRAY
11609: PPUSH
11610: CALL_OW 428
11614: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11615: LD_VAR 0 5
11619: PPUSH
11620: LD_VAR 0 4
11624: PPUSH
11625: CALL 61818 0 1
11629: PPUSH
11630: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11634: LD_VAR 0 5
11638: PPUSH
11639: LD_VAR 0 4
11643: PPUSH
11644: CALL_OW 52
// end ;
11648: GO 11528
11650: POP
11651: POP
// for i := 1 to 3 do
11652: LD_ADDR_VAR 0 2
11656: PUSH
11657: DOUBLE
11658: LD_INT 1
11660: DEC
11661: ST_TO_ADDR
11662: LD_INT 3
11664: PUSH
11665: FOR_TO
11666: IFFALSE 11721
// begin InitHc ;
11668: CALL_OW 19
// uc_nation := 0 ;
11672: LD_ADDR_OWVAR 21
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11680: LD_ADDR_OWVAR 28
11684: PUSH
11685: LD_INT 16
11687: ST_TO_ADDR
// un := CreateHuman ;
11688: LD_ADDR_VAR 0 5
11692: PUSH
11693: CALL_OW 44
11697: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11698: LD_VAR 0 5
11702: PPUSH
11703: LD_INT 194
11705: PPUSH
11706: LD_INT 164
11708: PPUSH
11709: LD_INT 6
11711: PPUSH
11712: LD_INT 0
11714: PPUSH
11715: CALL_OW 50
// end ;
11719: GO 11665
11721: POP
11722: POP
// uc_nation := 3 ;
11723: LD_ADDR_OWVAR 21
11727: PUSH
11728: LD_INT 3
11730: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11731: LD_INT 24
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: LD_INT 44
11742: PPUSH
11743: LD_INT 10
11745: PPUSH
11746: CALL 34117 0 5
// un := CreateVehicle ;
11750: LD_ADDR_VAR 0 5
11754: PUSH
11755: CALL_OW 45
11759: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
11760: LD_VAR 0 5
11764: PPUSH
11765: LD_INT 199
11767: PPUSH
11768: LD_INT 166
11770: PPUSH
11771: LD_INT 1
11773: PPUSH
11774: LD_INT 0
11776: PPUSH
11777: CALL 68710 0 5
// ComHold ( un ) ;
11781: LD_VAR 0 5
11785: PPUSH
11786: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
11790: LD_INT 0
11792: PPUSH
11793: LD_INT 3
11795: PPUSH
11796: LD_INT 4
11798: PPUSH
11799: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11803: CALL_OW 44
11807: PPUSH
11808: LD_VAR 0 5
11812: PPUSH
11813: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
11817: LD_INT 24
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: LD_INT 45
11828: PPUSH
11829: LD_INT 10
11831: PPUSH
11832: CALL 34117 0 5
// un := CreateVehicle ;
11836: LD_ADDR_VAR 0 5
11840: PUSH
11841: CALL_OW 45
11845: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
11846: LD_VAR 0 5
11850: PPUSH
11851: LD_INT 129
11853: PPUSH
11854: LD_INT 93
11856: PPUSH
11857: LD_INT 1
11859: PPUSH
11860: LD_INT 0
11862: PPUSH
11863: CALL 68710 0 5
// ComHold ( un ) ;
11867: LD_VAR 0 5
11871: PPUSH
11872: CALL_OW 140
// if Difficulty > 1 then
11876: LD_OWVAR 67
11880: PUSH
11881: LD_INT 1
11883: GREATER
11884: IFFALSE 11972
// begin PrepareHuman ( false , 3 , 4 ) ;
11886: LD_INT 0
11888: PPUSH
11889: LD_INT 3
11891: PPUSH
11892: LD_INT 4
11894: PPUSH
11895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11899: CALL_OW 44
11903: PPUSH
11904: LD_VAR 0 5
11908: PPUSH
11909: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
11913: LD_INT 24
11915: PPUSH
11916: LD_INT 1
11918: PPUSH
11919: LD_INT 1
11921: PPUSH
11922: LD_INT 45
11924: PPUSH
11925: LD_INT 10
11927: PPUSH
11928: CALL 34117 0 5
// un := CreateVehicle ;
11932: LD_ADDR_VAR 0 5
11936: PUSH
11937: CALL_OW 45
11941: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
11942: LD_VAR 0 5
11946: PPUSH
11947: LD_INT 200
11949: PPUSH
11950: LD_INT 173
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: LD_INT 0
11958: PPUSH
11959: CALL 68710 0 5
// ComHold ( un ) ;
11963: LD_VAR 0 5
11967: PPUSH
11968: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
11972: LD_INT 0
11974: PPUSH
11975: LD_INT 3
11977: PPUSH
11978: LD_INT 4
11980: PPUSH
11981: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
11985: CALL_OW 44
11989: PPUSH
11990: LD_VAR 0 5
11994: PPUSH
11995: CALL_OW 52
// bc_type := b_armoury ;
11999: LD_ADDR_OWVAR 42
12003: PUSH
12004: LD_INT 4
12006: ST_TO_ADDR
// if Difficulty > 1 then
12007: LD_OWVAR 67
12011: PUSH
12012: LD_INT 1
12014: GREATER
12015: IFFALSE 12025
// bc_type := b_barracks ;
12017: LD_ADDR_OWVAR 42
12021: PUSH
12022: LD_INT 5
12024: ST_TO_ADDR
// bc_level := 6 ;
12025: LD_ADDR_OWVAR 43
12029: PUSH
12030: LD_INT 6
12032: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12033: LD_INT 120
12035: PPUSH
12036: LD_INT 100
12038: PPUSH
12039: LD_INT 5
12041: PPUSH
12042: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12046: LD_ADDR_VAR 0 2
12050: PUSH
12051: DOUBLE
12052: LD_INT 1
12054: DEC
12055: ST_TO_ADDR
12056: LD_INT 3
12058: PUSH
12059: LD_INT 3
12061: PUSH
12062: LD_INT 4
12064: PUSH
12065: LD_INT 4
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: PUSH
12074: LD_OWVAR 67
12078: ARRAY
12079: PUSH
12080: FOR_TO
12081: IFFALSE 12139
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12083: LD_INT 0
12085: PPUSH
12086: LD_INT 1
12088: PUSH
12089: LD_INT 1
12091: PUSH
12092: LD_INT 9
12094: PUSH
12095: LD_INT 9
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: PUSH
12104: LD_OWVAR 67
12108: ARRAY
12109: PPUSH
12110: LD_INT 5
12112: PPUSH
12113: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12117: CALL_OW 44
12121: PPUSH
12122: LD_INT 120
12124: PPUSH
12125: LD_INT 100
12127: PPUSH
12128: CALL_OW 428
12132: PPUSH
12133: CALL_OW 52
// end ;
12137: GO 12080
12139: POP
12140: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12141: LD_ADDR_VAR 0 7
12145: PUSH
12146: LD_INT 135
12148: PUSH
12149: LD_INT 100
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 137
12158: PUSH
12159: LD_INT 92
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: ST_TO_ADDR
// for i := 1 to tmp do
12170: LD_ADDR_VAR 0 2
12174: PUSH
12175: DOUBLE
12176: LD_INT 1
12178: DEC
12179: ST_TO_ADDR
12180: LD_VAR 0 7
12184: PUSH
12185: FOR_TO
12186: IFFALSE 12356
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12188: LD_INT 22
12190: PUSH
12191: LD_INT 22
12193: PUSH
12194: LD_INT 24
12196: PUSH
12197: LD_INT 24
12199: PUSH
12200: LD_INT 24
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: PUSH
12210: LD_OWVAR 67
12214: PUSH
12215: LD_INT 0
12217: PPUSH
12218: LD_INT 1
12220: PPUSH
12221: CALL_OW 12
12225: PLUS
12226: ARRAY
12227: PPUSH
12228: LD_INT 1
12230: PPUSH
12231: LD_INT 1
12233: PPUSH
12234: LD_INT 44
12236: PPUSH
12237: LD_INT 25
12239: PPUSH
12240: CALL 34117 0 5
// veh := CreateVehicle ;
12244: LD_ADDR_VAR 0 6
12248: PUSH
12249: CALL_OW 45
12253: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12254: LD_VAR 0 6
12258: PPUSH
12259: LD_INT 2
12261: PPUSH
12262: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12266: LD_VAR 0 6
12270: PPUSH
12271: LD_VAR 0 7
12275: PUSH
12276: LD_VAR 0 2
12280: ARRAY
12281: PUSH
12282: LD_INT 1
12284: ARRAY
12285: PPUSH
12286: LD_VAR 0 7
12290: PUSH
12291: LD_VAR 0 2
12295: ARRAY
12296: PUSH
12297: LD_INT 2
12299: ARRAY
12300: PPUSH
12301: LD_INT 0
12303: PPUSH
12304: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12308: LD_INT 0
12310: PPUSH
12311: LD_INT 3
12313: PPUSH
12314: LD_INT 6
12316: PPUSH
12317: CALL_OW 380
// un := CreateHuman ;
12321: LD_ADDR_VAR 0 5
12325: PUSH
12326: CALL_OW 44
12330: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12331: LD_VAR 0 5
12335: PPUSH
12336: LD_VAR 0 6
12340: PPUSH
12341: CALL_OW 52
// ComHold ( veh ) ;
12345: LD_VAR 0 6
12349: PPUSH
12350: CALL_OW 140
// end ;
12354: GO 12185
12356: POP
12357: POP
// tmp := [ 191 , 122 ] ;
12358: LD_ADDR_VAR 0 7
12362: PUSH
12363: LD_INT 191
12365: PUSH
12366: LD_INT 122
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12373: LD_INT 24
12375: PPUSH
12376: LD_INT 1
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_INT 44
12384: PPUSH
12385: LD_INT 30
12387: PPUSH
12388: CALL 34117 0 5
// ruBlockadeTank := CreateVehicle ;
12392: LD_ADDR_EXP 54
12396: PUSH
12397: CALL_OW 45
12401: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12402: LD_EXP 54
12406: PPUSH
12407: LD_INT 2
12409: PPUSH
12410: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12414: LD_EXP 54
12418: PPUSH
12419: LD_INT 191
12421: PPUSH
12422: LD_INT 122
12424: PPUSH
12425: LD_INT 0
12427: PPUSH
12428: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12432: LD_INT 1
12434: PPUSH
12435: LD_INT 5
12437: PUSH
12438: LD_INT 6
12440: PUSH
12441: LD_INT 7
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: LIST
12448: PUSH
12449: LD_OWVAR 67
12453: PUSH
12454: LD_INT 1
12456: MINUS
12457: ARRAY
12458: PPUSH
12459: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12463: CALL_OW 44
12467: PPUSH
12468: LD_EXP 54
12472: PPUSH
12473: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12477: LD_EXP 54
12481: PPUSH
12482: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12486: LD_ADDR_EXP 56
12490: PUSH
12491: EMPTY
12492: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12493: LD_ADDR_VAR 0 2
12497: PUSH
12498: DOUBLE
12499: LD_INT 1
12501: DEC
12502: ST_TO_ADDR
12503: LD_INT 2
12505: PUSH
12506: LD_INT 2
12508: PUSH
12509: LD_INT 3
12511: PUSH
12512: LD_INT 3
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: PUSH
12521: LD_OWVAR 67
12525: ARRAY
12526: PUSH
12527: FOR_TO
12528: IFFALSE 12644
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12530: LD_INT 0
12532: PPUSH
12533: LD_INT 1
12535: PPUSH
12536: LD_INT 4
12538: PUSH
12539: LD_INT 5
12541: PUSH
12542: LD_INT 6
12544: PUSH
12545: LD_INT 7
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: PUSH
12554: LD_OWVAR 67
12558: ARRAY
12559: PPUSH
12560: CALL_OW 380
// un := CreateHuman ;
12564: LD_ADDR_VAR 0 5
12568: PUSH
12569: CALL_OW 44
12573: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12574: LD_VAR 0 5
12578: PPUSH
12579: LD_INT 9
12581: PPUSH
12582: LD_INT 0
12584: PPUSH
12585: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12589: LD_VAR 0 5
12593: PPUSH
12594: LD_INT 198
12596: PPUSH
12597: LD_INT 129
12599: PPUSH
12600: CALL_OW 118
// AddComCrawl ( un ) ;
12604: LD_VAR 0 5
12608: PPUSH
12609: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12613: LD_ADDR_EXP 56
12617: PUSH
12618: LD_EXP 56
12622: PPUSH
12623: LD_EXP 56
12627: PUSH
12628: LD_INT 1
12630: PLUS
12631: PPUSH
12632: LD_VAR 0 5
12636: PPUSH
12637: CALL_OW 1
12641: ST_TO_ADDR
// end ;
12642: GO 12527
12644: POP
12645: POP
// PrepareHuman ( false , 4 , 5 ) ;
12646: LD_INT 0
12648: PPUSH
12649: LD_INT 4
12651: PPUSH
12652: LD_INT 5
12654: PPUSH
12655: CALL_OW 380
// un := CreateHuman ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: CALL_OW 44
12668: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12669: LD_VAR 0 5
12673: PPUSH
12674: LD_INT 179
12676: PPUSH
12677: LD_INT 113
12679: PPUSH
12680: LD_INT 0
12682: PPUSH
12683: CALL_OW 48
// ComHold ( un ) ;
12687: LD_VAR 0 5
12691: PPUSH
12692: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12696: LD_ADDR_EXP 56
12700: PUSH
12701: LD_EXP 56
12705: PPUSH
12706: LD_EXP 56
12710: PUSH
12711: LD_INT 1
12713: PLUS
12714: PPUSH
12715: LD_VAR 0 5
12719: PPUSH
12720: CALL_OW 1
12724: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12725: LD_ADDR_VAR 0 7
12729: PUSH
12730: LD_INT 167
12732: PPUSH
12733: LD_INT 243
12735: PPUSH
12736: CALL_OW 428
12740: PPUSH
12741: CALL_OW 274
12745: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12746: LD_VAR 0 7
12750: PPUSH
12751: LD_INT 1
12753: PPUSH
12754: LD_INT 1000
12756: PPUSH
12757: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12761: LD_VAR 0 7
12765: PPUSH
12766: LD_INT 2
12768: PPUSH
12769: LD_INT 400
12771: PPUSH
12772: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
12776: LD_ADDR_VAR 0 7
12780: PUSH
12781: LD_INT 169
12783: PPUSH
12784: LD_INT 229
12786: PPUSH
12787: CALL_OW 428
12791: ST_TO_ADDR
// for i := 1 to 3 do
12792: LD_ADDR_VAR 0 2
12796: PUSH
12797: DOUBLE
12798: LD_INT 1
12800: DEC
12801: ST_TO_ADDR
12802: LD_INT 3
12804: PUSH
12805: FOR_TO
12806: IFFALSE 12897
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12808: LD_INT 0
12810: PPUSH
12811: LD_INT 1
12813: PPUSH
12814: LD_INT 4
12816: PUSH
12817: LD_INT 5
12819: PUSH
12820: LD_INT 5
12822: PUSH
12823: LD_INT 6
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: PUSH
12832: LD_OWVAR 67
12836: ARRAY
12837: PPUSH
12838: CALL_OW 380
// un := CreateHuman ;
12842: LD_ADDR_VAR 0 5
12846: PUSH
12847: CALL_OW 44
12851: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
12852: LD_VAR 0 5
12856: PPUSH
12857: LD_VAR 0 7
12861: PPUSH
12862: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
12866: LD_ADDR_EXP 57
12870: PUSH
12871: LD_EXP 57
12875: PPUSH
12876: LD_EXP 57
12880: PUSH
12881: LD_INT 1
12883: PLUS
12884: PPUSH
12885: LD_VAR 0 5
12889: PPUSH
12890: CALL_OW 1
12894: ST_TO_ADDR
// end ;
12895: GO 12805
12897: POP
12898: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
12899: LD_ADDR_VAR 0 7
12903: PUSH
12904: LD_INT 165
12906: PUSH
12907: LD_INT 227
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 173
12916: PUSH
12917: LD_INT 231
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: ST_TO_ADDR
// for i := 1 to tmp do
12928: LD_ADDR_VAR 0 2
12932: PUSH
12933: DOUBLE
12934: LD_INT 1
12936: DEC
12937: ST_TO_ADDR
12938: LD_VAR 0 7
12942: PUSH
12943: FOR_TO
12944: IFFALSE 13065
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
12946: LD_INT 0
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: LD_INT 4
12954: PUSH
12955: LD_INT 5
12957: PUSH
12958: LD_INT 5
12960: PUSH
12961: LD_INT 6
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: LD_OWVAR 67
12974: ARRAY
12975: PPUSH
12976: CALL_OW 380
// un := CreateHuman ;
12980: LD_ADDR_VAR 0 5
12984: PUSH
12985: CALL_OW 44
12989: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
12990: LD_VAR 0 5
12994: PPUSH
12995: LD_VAR 0 7
12999: PUSH
13000: LD_VAR 0 2
13004: ARRAY
13005: PUSH
13006: LD_INT 1
13008: ARRAY
13009: PPUSH
13010: LD_VAR 0 7
13014: PUSH
13015: LD_VAR 0 2
13019: ARRAY
13020: PUSH
13021: LD_INT 2
13023: ARRAY
13024: PPUSH
13025: CALL_OW 428
13029: PPUSH
13030: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13034: LD_ADDR_EXP 57
13038: PUSH
13039: LD_EXP 57
13043: PPUSH
13044: LD_EXP 57
13048: PUSH
13049: LD_INT 1
13051: PLUS
13052: PPUSH
13053: LD_VAR 0 5
13057: PPUSH
13058: CALL_OW 1
13062: ST_TO_ADDR
// end ;
13063: GO 12943
13065: POP
13066: POP
// for i := 1 to 2 do
13067: LD_ADDR_VAR 0 2
13071: PUSH
13072: DOUBLE
13073: LD_INT 1
13075: DEC
13076: ST_TO_ADDR
13077: LD_INT 2
13079: PUSH
13080: FOR_TO
13081: IFFALSE 13136
// begin InitHc ;
13083: CALL_OW 19
// uc_nation := 0 ;
13087: LD_ADDR_OWVAR 21
13091: PUSH
13092: LD_INT 0
13094: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13095: LD_ADDR_OWVAR 28
13099: PUSH
13100: LD_INT 16
13102: ST_TO_ADDR
// un := CreateHuman ;
13103: LD_ADDR_VAR 0 5
13107: PUSH
13108: CALL_OW 44
13112: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13113: LD_VAR 0 5
13117: PPUSH
13118: LD_INT 166
13120: PPUSH
13121: LD_INT 233
13123: PPUSH
13124: LD_INT 2
13126: PPUSH
13127: LD_INT 0
13129: PPUSH
13130: CALL_OW 50
// end ;
13134: GO 13080
13136: POP
13137: POP
// uc_nation := 3 ;
13138: LD_ADDR_OWVAR 21
13142: PUSH
13143: LD_INT 3
13145: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13146: LD_ADDR_VAR 0 7
13150: PUSH
13151: LD_INT 71
13153: PUSH
13154: LD_INT 52
13156: PUSH
13157: LD_INT 11
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: LIST
13164: ST_TO_ADDR
// for i in tmp do
13165: LD_ADDR_VAR 0 2
13169: PUSH
13170: LD_VAR 0 7
13174: PUSH
13175: FOR_IN
13176: IFFALSE 13220
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13178: LD_VAR 0 2
13182: PPUSH
13183: CALL_OW 274
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: LD_INT 3000
13193: PPUSH
13194: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13198: LD_VAR 0 2
13202: PPUSH
13203: CALL_OW 274
13207: PPUSH
13208: LD_INT 2
13210: PPUSH
13211: LD_INT 600
13213: PPUSH
13214: CALL_OW 277
// end ;
13218: GO 13175
13220: POP
13221: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13222: LD_ADDR_VAR 0 7
13226: PUSH
13227: LD_INT 41
13229: PUSH
13230: LD_INT 57
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 38
13239: PUSH
13240: LD_INT 55
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 50
13249: PUSH
13250: LD_INT 73
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 51
13259: PUSH
13260: LD_INT 65
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 82
13269: PUSH
13270: LD_INT 93
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 87
13279: PUSH
13280: LD_INT 100
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 91
13289: PUSH
13290: LD_INT 109
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 84
13299: PUSH
13300: LD_INT 120
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 113
13309: PUSH
13310: LD_INT 153
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 123
13319: PUSH
13320: LD_INT 171
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: LD_INT 125
13329: PUSH
13330: LD_INT 178
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 125
13339: PUSH
13340: LD_INT 188
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 125
13349: PUSH
13350: LD_INT 201
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 33
13359: PUSH
13360: LD_INT 60
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 76
13369: PUSH
13370: LD_INT 95
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 84
13379: PUSH
13380: LD_INT 111
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 112
13389: PUSH
13390: LD_INT 165
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: ST_TO_ADDR
// for i := 1 to tmp do
13416: LD_ADDR_VAR 0 2
13420: PUSH
13421: DOUBLE
13422: LD_INT 1
13424: DEC
13425: ST_TO_ADDR
13426: LD_VAR 0 7
13430: PUSH
13431: FOR_TO
13432: IFFALSE 13679
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13434: LD_ADDR_VAR 0 4
13438: PUSH
13439: LD_VAR 0 7
13443: PUSH
13444: LD_VAR 0 2
13448: ARRAY
13449: PUSH
13450: LD_INT 1
13452: ARRAY
13453: PPUSH
13454: LD_VAR 0 7
13458: PUSH
13459: LD_VAR 0 2
13463: ARRAY
13464: PUSH
13465: LD_INT 2
13467: ARRAY
13468: PPUSH
13469: CALL_OW 428
13473: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13474: LD_VAR 0 4
13478: PPUSH
13479: CALL_OW 266
13483: PUSH
13484: LD_INT 4
13486: PUSH
13487: LD_INT 5
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: IN
13494: IFFALSE 13590
// begin for j := 1 to Difficulty do
13496: LD_ADDR_VAR 0 3
13500: PUSH
13501: DOUBLE
13502: LD_INT 1
13504: DEC
13505: ST_TO_ADDR
13506: LD_OWVAR 67
13510: PUSH
13511: FOR_TO
13512: IFFALSE 13586
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13514: LD_INT 0
13516: PPUSH
13517: LD_INT 1
13519: PPUSH
13520: LD_INT 4
13522: PUSH
13523: LD_INT 5
13525: PUSH
13526: LD_INT 5
13528: PUSH
13529: LD_INT 6
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_OWVAR 67
13542: ARRAY
13543: PPUSH
13544: CALL_OW 380
// un := CreateHuman ;
13548: LD_ADDR_VAR 0 5
13552: PUSH
13553: CALL_OW 44
13557: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13558: LD_VAR 0 5
13562: PPUSH
13563: LD_VAR 0 4
13567: PPUSH
13568: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13572: LD_VAR 0 5
13576: PPUSH
13577: LD_INT 9
13579: PPUSH
13580: CALL_OW 336
// end ;
13584: GO 13511
13586: POP
13587: POP
// end else
13588: GO 13648
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13590: LD_INT 0
13592: PPUSH
13593: LD_INT 1
13595: PPUSH
13596: LD_INT 4
13598: PUSH
13599: LD_INT 5
13601: PUSH
13602: LD_INT 5
13604: PUSH
13605: LD_INT 6
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: PUSH
13614: LD_OWVAR 67
13618: ARRAY
13619: PPUSH
13620: CALL_OW 380
// un := CreateHuman ;
13624: LD_ADDR_VAR 0 5
13628: PUSH
13629: CALL_OW 44
13633: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13634: LD_VAR 0 5
13638: PPUSH
13639: LD_VAR 0 4
13643: PPUSH
13644: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13648: LD_ADDR_EXP 58
13652: PUSH
13653: LD_EXP 58
13657: PPUSH
13658: LD_EXP 58
13662: PUSH
13663: LD_INT 1
13665: PLUS
13666: PPUSH
13667: LD_VAR 0 5
13671: PPUSH
13672: CALL_OW 1
13676: ST_TO_ADDR
// end ;
13677: GO 13431
13679: POP
13680: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13681: LD_ADDR_VAR 0 4
13685: PUSH
13686: LD_INT 10
13688: PPUSH
13689: LD_INT 22
13691: PUSH
13692: LD_INT 3
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 30
13701: PUSH
13702: LD_INT 32
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 58
13711: PUSH
13712: EMPTY
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: LIST
13719: PPUSH
13720: CALL_OW 70
13724: PUSH
13725: FOR_IN
13726: IFFALSE 13860
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13728: LD_INT 40
13730: PUSH
13731: LD_INT 50
13733: PUSH
13734: LD_INT 75
13736: PUSH
13737: LD_INT 80
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: PUSH
13746: LD_OWVAR 67
13750: ARRAY
13751: PUSH
13752: LD_EXP 7
13756: PUSH
13757: LD_INT 10
13759: MUL
13760: MINUS
13761: PPUSH
13762: CALL_OW 13
13766: NOT
13767: IFFALSE 13771
// continue ;
13769: GO 13725
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13771: LD_INT 0
13773: PPUSH
13774: LD_INT 1
13776: PPUSH
13777: LD_INT 4
13779: PUSH
13780: LD_INT 5
13782: PUSH
13783: LD_INT 5
13785: PUSH
13786: LD_INT 6
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: PUSH
13795: LD_OWVAR 67
13799: ARRAY
13800: PPUSH
13801: CALL_OW 380
// un := CreateHuman ;
13805: LD_ADDR_VAR 0 5
13809: PUSH
13810: CALL_OW 44
13814: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13815: LD_VAR 0 5
13819: PPUSH
13820: LD_VAR 0 4
13824: PPUSH
13825: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13829: LD_ADDR_EXP 58
13833: PUSH
13834: LD_EXP 58
13838: PPUSH
13839: LD_EXP 58
13843: PUSH
13844: LD_INT 1
13846: PLUS
13847: PPUSH
13848: LD_VAR 0 5
13852: PPUSH
13853: CALL_OW 1
13857: ST_TO_ADDR
// end ;
13858: GO 13725
13860: POP
13861: POP
// for i := 1 to 5 do
13862: LD_ADDR_VAR 0 2
13866: PUSH
13867: DOUBLE
13868: LD_INT 1
13870: DEC
13871: ST_TO_ADDR
13872: LD_INT 5
13874: PUSH
13875: FOR_TO
13876: IFFALSE 13974
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13878: LD_INT 0
13880: PPUSH
13881: LD_INT 2
13883: PPUSH
13884: LD_INT 4
13886: PUSH
13887: LD_INT 5
13889: PUSH
13890: LD_INT 5
13892: PUSH
13893: LD_INT 6
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: LD_OWVAR 67
13906: ARRAY
13907: PPUSH
13908: CALL_OW 380
// un := CreateHuman ;
13912: LD_ADDR_VAR 0 5
13916: PUSH
13917: CALL_OW 44
13921: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
13922: LD_VAR 0 5
13926: PPUSH
13927: LD_INT 66
13929: PPUSH
13930: LD_INT 101
13932: PPUSH
13933: LD_INT 3
13935: PPUSH
13936: LD_INT 0
13938: PPUSH
13939: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13943: LD_ADDR_EXP 58
13947: PUSH
13948: LD_EXP 58
13952: PPUSH
13953: LD_EXP 58
13957: PUSH
13958: LD_INT 1
13960: PLUS
13961: PPUSH
13962: LD_VAR 0 5
13966: PPUSH
13967: CALL_OW 1
13971: ST_TO_ADDR
// end ;
13972: GO 13875
13974: POP
13975: POP
// tmp := [ ruFac1 , ruFac2 ] ;
13976: LD_ADDR_VAR 0 7
13980: PUSH
13981: LD_INT 72
13983: PUSH
13984: LD_INT 12
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: ST_TO_ADDR
// for i := 1 to tmp do
13991: LD_ADDR_VAR 0 2
13995: PUSH
13996: DOUBLE
13997: LD_INT 1
13999: DEC
14000: ST_TO_ADDR
14001: LD_VAR 0 7
14005: PUSH
14006: FOR_TO
14007: IFFALSE 14124
// for j := 1 to 6 do
14009: LD_ADDR_VAR 0 3
14013: PUSH
14014: DOUBLE
14015: LD_INT 1
14017: DEC
14018: ST_TO_ADDR
14019: LD_INT 6
14021: PUSH
14022: FOR_TO
14023: IFFALSE 14120
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14025: LD_INT 0
14027: PPUSH
14028: LD_INT 3
14030: PPUSH
14031: LD_INT 4
14033: PUSH
14034: LD_INT 5
14036: PUSH
14037: LD_INT 5
14039: PUSH
14040: LD_INT 6
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: PUSH
14049: LD_OWVAR 67
14053: ARRAY
14054: PPUSH
14055: CALL_OW 380
// un := CreateHuman ;
14059: LD_ADDR_VAR 0 5
14063: PUSH
14064: CALL_OW 44
14068: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14069: LD_VAR 0 5
14073: PPUSH
14074: LD_VAR 0 7
14078: PUSH
14079: LD_VAR 0 2
14083: ARRAY
14084: PPUSH
14085: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14089: LD_ADDR_EXP 58
14093: PUSH
14094: LD_EXP 58
14098: PPUSH
14099: LD_EXP 58
14103: PUSH
14104: LD_INT 1
14106: PLUS
14107: PPUSH
14108: LD_VAR 0 5
14112: PPUSH
14113: CALL_OW 1
14117: ST_TO_ADDR
// end ;
14118: GO 14022
14120: POP
14121: POP
14122: GO 14006
14124: POP
14125: POP
// for i := 1 to 3 do
14126: LD_ADDR_VAR 0 2
14130: PUSH
14131: DOUBLE
14132: LD_INT 1
14134: DEC
14135: ST_TO_ADDR
14136: LD_INT 3
14138: PUSH
14139: FOR_TO
14140: IFFALSE 14229
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14142: LD_INT 0
14144: PPUSH
14145: LD_INT 4
14147: PPUSH
14148: LD_INT 4
14150: PUSH
14151: LD_INT 5
14153: PUSH
14154: LD_INT 5
14156: PUSH
14157: LD_INT 6
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: PUSH
14166: LD_OWVAR 67
14170: ARRAY
14171: PPUSH
14172: CALL_OW 380
// un := CreateHuman ;
14176: LD_ADDR_VAR 0 5
14180: PUSH
14181: CALL_OW 44
14185: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14186: LD_VAR 0 5
14190: PPUSH
14191: LD_INT 17
14193: PPUSH
14194: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14198: LD_ADDR_EXP 58
14202: PUSH
14203: LD_EXP 58
14207: PPUSH
14208: LD_EXP 58
14212: PUSH
14213: LD_INT 1
14215: PLUS
14216: PPUSH
14217: LD_VAR 0 5
14221: PPUSH
14222: CALL_OW 1
14226: ST_TO_ADDR
// end ;
14227: GO 14139
14229: POP
14230: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14231: LD_ADDR_VAR 0 2
14235: PUSH
14236: DOUBLE
14237: LD_INT 1
14239: DEC
14240: ST_TO_ADDR
14241: LD_INT 2
14243: PUSH
14244: LD_INT 3
14246: PUSH
14247: LD_INT 3
14249: PUSH
14250: LD_INT 3
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: LD_OWVAR 67
14263: ARRAY
14264: PUSH
14265: FOR_TO
14266: IFFALSE 14386
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14268: LD_INT 22
14270: PPUSH
14271: LD_INT 1
14273: PPUSH
14274: LD_INT 1
14276: PPUSH
14277: LD_INT 52
14279: PPUSH
14280: LD_INT 100
14282: PPUSH
14283: CALL 34117 0 5
// veh := CreateVehicle ;
14287: LD_ADDR_VAR 0 6
14291: PUSH
14292: CALL_OW 45
14296: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14297: LD_INT 0
14299: PPUSH
14300: LD_INT 3
14302: PPUSH
14303: LD_INT 4
14305: PPUSH
14306: CALL_OW 380
// un := CreateHuman ;
14310: LD_ADDR_VAR 0 5
14314: PUSH
14315: CALL_OW 44
14319: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14320: LD_VAR 0 6
14324: PPUSH
14325: LD_INT 107
14327: PPUSH
14328: LD_INT 182
14330: PPUSH
14331: LD_INT 4
14333: PPUSH
14334: LD_INT 0
14336: PPUSH
14337: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14341: LD_VAR 0 5
14345: PPUSH
14346: LD_VAR 0 6
14350: PPUSH
14351: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14355: LD_ADDR_EXP 58
14359: PUSH
14360: LD_EXP 58
14364: PPUSH
14365: LD_EXP 58
14369: PUSH
14370: LD_INT 1
14372: PLUS
14373: PPUSH
14374: LD_VAR 0 5
14378: PPUSH
14379: CALL_OW 1
14383: ST_TO_ADDR
// end ;
14384: GO 14265
14386: POP
14387: POP
// InitHc ;
14388: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14392: LD_ADDR_VAR 0 2
14396: PUSH
14397: DOUBLE
14398: LD_INT 1
14400: DEC
14401: ST_TO_ADDR
14402: LD_INT 3
14404: PUSH
14405: LD_INT 5
14407: PUSH
14408: LD_INT 6
14410: PUSH
14411: LD_INT 8
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: PUSH
14420: LD_OWVAR 67
14424: ARRAY
14425: PUSH
14426: FOR_TO
14427: IFFALSE 14522
// begin uc_nation := 0 ;
14429: LD_ADDR_OWVAR 21
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14437: LD_ADDR_OWVAR 28
14441: PUSH
14442: LD_INT 15
14444: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14445: LD_ADDR_OWVAR 31
14449: PUSH
14450: LD_INT 3
14452: PUSH
14453: LD_INT 0
14455: PUSH
14456: LD_INT 0
14458: PUSH
14459: LD_INT 0
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: ST_TO_ADDR
// un := CreateHuman ;
14468: LD_ADDR_VAR 0 5
14472: PUSH
14473: CALL_OW 44
14477: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14478: LD_VAR 0 5
14482: PPUSH
14483: LD_INT 269
14485: PUSH
14486: LD_INT 300
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_VAR 0 2
14497: PUSH
14498: LD_INT 2
14500: MOD
14501: PUSH
14502: LD_INT 1
14504: PLUS
14505: ARRAY
14506: PPUSH
14507: LD_INT 182
14509: PPUSH
14510: LD_INT 4
14512: PPUSH
14513: LD_INT 0
14515: PPUSH
14516: CALL_OW 50
// end ;
14520: GO 14426
14522: POP
14523: POP
// uc_nation := 3 ;
14524: LD_ADDR_OWVAR 21
14528: PUSH
14529: LD_INT 3
14531: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14532: LD_EXP 8
14536: PUSH
14537: LD_INT 10
14539: PUSH
14540: LD_INT 8
14542: PUSH
14543: LD_INT 6
14545: PUSH
14546: LD_INT 5
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: PUSH
14555: LD_OWVAR 67
14559: ARRAY
14560: LESS
14561: IFFALSE 14640
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14563: LD_INT 21
14565: PPUSH
14566: LD_INT 1
14568: PPUSH
14569: LD_INT 1
14571: PPUSH
14572: LD_INT 51
14574: PPUSH
14575: LD_INT 12
14577: PPUSH
14578: CALL 34117 0 5
// veh := CreateVehicle ;
14582: LD_ADDR_VAR 0 6
14586: PUSH
14587: CALL_OW 45
14591: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14592: LD_VAR 0 6
14596: PPUSH
14597: LD_INT 269
14599: PPUSH
14600: LD_INT 66
14602: PPUSH
14603: LD_INT 4
14605: PPUSH
14606: LD_INT 0
14608: PPUSH
14609: CALL 68710 0 5
// SetLives ( veh , 333 ) ;
14613: LD_VAR 0 6
14617: PPUSH
14618: LD_INT 333
14620: PPUSH
14621: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14625: LD_VAR 0 6
14629: PPUSH
14630: LD_INT 2
14632: PPUSH
14633: LD_INT 100
14635: PPUSH
14636: CALL_OW 290
// end ; end ;
14640: LD_VAR 0 1
14644: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14645: LD_EXP 54
14649: PUSH
14650: LD_EXP 54
14654: PPUSH
14655: CALL_OW 255
14659: PUSH
14660: LD_INT 3
14662: EQUAL
14663: AND
14664: IFFALSE 14827
14666: GO 14668
14668: DISABLE
14669: LD_INT 0
14671: PPUSH
// begin enable ;
14672: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14673: LD_INT 81
14675: PUSH
14676: LD_INT 3
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 91
14685: PUSH
14686: LD_EXP 54
14690: PUSH
14691: LD_INT 15
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PPUSH
14703: CALL_OW 69
14707: IFFALSE 14787
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14709: LD_EXP 54
14713: PPUSH
14714: CALL_OW 311
14718: NOT
14719: IFFALSE 14785
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14721: LD_ADDR_VAR 0 1
14725: PUSH
14726: LD_INT 22
14728: PUSH
14729: LD_INT 3
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 21
14738: PUSH
14739: LD_INT 1
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PPUSH
14750: CALL_OW 69
14754: PPUSH
14755: LD_EXP 54
14759: PPUSH
14760: CALL_OW 74
14764: ST_TO_ADDR
// if driver then
14765: LD_VAR 0 1
14769: IFFALSE 14785
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14771: LD_VAR 0 1
14775: PPUSH
14776: LD_EXP 54
14780: PPUSH
14781: CALL_OW 120
// end ; exit ;
14785: GO 14827
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
14787: LD_EXP 54
14791: PPUSH
14792: CALL_OW 256
14796: PUSH
14797: LD_INT 1000
14799: LESS
14800: PUSH
14801: LD_EXP 54
14805: PPUSH
14806: CALL_OW 311
14810: AND
14811: IFFALSE 14827
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
14813: LD_EXP 54
14817: PPUSH
14818: CALL_OW 311
14822: PPUSH
14823: CALL 68270 0 1
// end ;
14827: PPOPN 1
14829: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
14830: LD_EXP 56
14834: PPUSH
14835: LD_INT 3
14837: PUSH
14838: LD_INT 24
14840: PUSH
14841: LD_INT 1000
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PPUSH
14852: CALL_OW 72
14856: PUSH
14857: LD_EXP 56
14861: PPUSH
14862: LD_INT 25
14864: PUSH
14865: LD_INT 4
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 50
14874: PUSH
14875: EMPTY
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PPUSH
14882: CALL_OW 72
14886: AND
14887: IFFALSE 15075
14889: GO 14891
14891: DISABLE
14892: LD_INT 0
14894: PPUSH
14895: PPUSH
14896: PPUSH
// begin enable ;
14897: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
14898: LD_ADDR_VAR 0 3
14902: PUSH
14903: LD_EXP 56
14907: PPUSH
14908: LD_INT 3
14910: PUSH
14911: LD_INT 24
14913: PUSH
14914: LD_INT 1000
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PPUSH
14925: CALL_OW 72
14929: PPUSH
14930: LD_INT 1
14932: PPUSH
14933: CALL 68510 0 2
14937: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
14938: LD_ADDR_VAR 0 2
14942: PUSH
14943: LD_EXP 56
14947: PPUSH
14948: LD_INT 25
14950: PUSH
14951: LD_INT 4
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 50
14960: PUSH
14961: EMPTY
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PPUSH
14968: CALL_OW 72
14972: PUSH
14973: LD_INT 1
14975: ARRAY
14976: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
14977: LD_VAR 0 2
14981: PPUSH
14982: LD_VAR 0 3
14986: PUSH
14987: LD_INT 1
14989: ARRAY
14990: PPUSH
14991: CALL 63863 0 2
14995: NOT
14996: IFFALSE 15075
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
14998: LD_VAR 0 3
15002: PUSH
15003: LD_INT 1
15005: ARRAY
15006: PPUSH
15007: LD_INT 9
15009: PPUSH
15010: CALL_OW 308
15014: NOT
15015: IFFALSE 15033
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15017: LD_VAR 0 3
15021: PUSH
15022: LD_INT 1
15024: ARRAY
15025: PPUSH
15026: LD_INT 9
15028: PPUSH
15029: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15033: LD_VAR 0 2
15037: PPUSH
15038: LD_VAR 0 3
15042: PUSH
15043: LD_INT 1
15045: ARRAY
15046: PPUSH
15047: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15051: LD_VAR 0 2
15055: PPUSH
15056: LD_INT 179
15058: PPUSH
15059: LD_INT 113
15061: PPUSH
15062: CALL_OW 171
// AddComHold ( sci ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: CALL_OW 200
// end ; end ;
15075: PPOPN 3
15077: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
15078: LD_INT 2
15080: PPUSH
15081: LD_INT 52
15083: PPUSH
15084: CALL_OW 292
15088: IFFALSE 15193
15090: GO 15092
15092: DISABLE
15093: LD_INT 0
15095: PPUSH
15096: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15097: LD_ADDR_VAR 0 2
15101: PUSH
15102: LD_EXP 58
15106: PPUSH
15107: LD_INT 25
15109: PUSH
15110: LD_INT 1
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: LD_INT 50
15119: PUSH
15120: EMPTY
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 72
15131: ST_TO_ADDR
// if not tmp then
15132: LD_VAR 0 2
15136: NOT
15137: IFFALSE 15141
// exit ;
15139: GO 15193
// for i in tmp do
15141: LD_ADDR_VAR 0 1
15145: PUSH
15146: LD_VAR 0 2
15150: PUSH
15151: FOR_IN
15152: IFFALSE 15191
// begin if IsInUnit ( i ) then
15154: LD_VAR 0 1
15158: PPUSH
15159: CALL_OW 310
15163: IFFALSE 15174
// ComExitBuilding ( i ) ;
15165: LD_VAR 0 1
15169: PPUSH
15170: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15174: LD_VAR 0 1
15178: PPUSH
15179: LD_INT 84
15181: PPUSH
15182: LD_INT 133
15184: PPUSH
15185: CALL_OW 174
// end ;
15189: GO 15151
15191: POP
15192: POP
// end ;
15193: PPOPN 2
15195: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15196: LD_EXP 14
15200: IFFALSE 15381
15202: GO 15204
15204: DISABLE
15205: LD_INT 0
15207: PPUSH
15208: PPUSH
15209: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15210: LD_ADDR_VAR 0 2
15214: PUSH
15215: LD_INT 72
15217: PUSH
15218: LD_INT 12
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15225: LD_ADDR_VAR 0 3
15229: PUSH
15230: LD_INT 44
15232: PUSH
15233: LD_INT 43
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 45
15242: PUSH
15243: LD_INT 44
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 45
15252: PUSH
15253: LD_INT 46
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 45
15262: PUSH
15263: LD_INT 46
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: PUSH
15276: LD_OWVAR 67
15280: ARRAY
15281: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15282: LD_ADDR_VAR 0 1
15286: PUSH
15287: DOUBLE
15288: LD_INT 1
15290: DEC
15291: ST_TO_ADDR
15292: LD_INT 1
15294: PUSH
15295: LD_INT 2
15297: PUSH
15298: LD_INT 2
15300: PUSH
15301: LD_INT 3
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: PUSH
15310: LD_OWVAR 67
15314: ARRAY
15315: PUSH
15316: FOR_TO
15317: IFFALSE 15379
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15319: LD_VAR 0 2
15323: PPUSH
15324: LD_INT 22
15326: PUSH
15327: LD_INT 23
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_VAR 0 1
15338: PUSH
15339: LD_INT 2
15341: MOD
15342: PUSH
15343: LD_INT 1
15345: PLUS
15346: ARRAY
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: LD_INT 1
15353: PPUSH
15354: LD_VAR 0 3
15358: PUSH
15359: LD_VAR 0 1
15363: PUSH
15364: LD_INT 2
15366: MOD
15367: PUSH
15368: LD_INT 1
15370: PLUS
15371: ARRAY
15372: PPUSH
15373: CALL_OW 185
15377: GO 15316
15379: POP
15380: POP
// end ;
15381: PPOPN 3
15383: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15384: LD_EXP 11
15388: IFFALSE 16537
15390: GO 15392
15392: DISABLE
15393: LD_INT 0
15395: PPUSH
15396: PPUSH
15397: PPUSH
15398: PPUSH
15399: PPUSH
15400: PPUSH
// begin enable ;
15401: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15402: LD_ADDR_VAR 0 6
15406: PUSH
15407: LD_INT 10
15409: PPUSH
15410: LD_INT 81
15412: PUSH
15413: LD_INT 3
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PPUSH
15420: CALL_OW 70
15424: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15425: LD_EXP 59
15429: IFFALSE 15695
// begin for i in ruSpecialVehicleGroup do
15431: LD_ADDR_VAR 0 1
15435: PUSH
15436: LD_EXP 59
15440: PUSH
15441: FOR_IN
15442: IFFALSE 15693
// begin if enemyInBase then
15444: LD_VAR 0 6
15448: IFFALSE 15691
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15450: LD_VAR 0 1
15454: PPUSH
15455: CALL_OW 256
15459: PUSH
15460: LD_INT 500
15462: GREATER
15463: PUSH
15464: LD_VAR 0 1
15468: PPUSH
15469: CALL_OW 110
15473: PUSH
15474: LD_INT 0
15476: EQUAL
15477: AND
15478: IFFALSE 15504
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15480: LD_VAR 0 1
15484: PPUSH
15485: LD_VAR 0 6
15489: PPUSH
15490: LD_VAR 0 1
15494: PPUSH
15495: CALL_OW 74
15499: PPUSH
15500: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15504: LD_VAR 0 1
15508: PPUSH
15509: CALL_OW 256
15513: PUSH
15514: LD_INT 500
15516: LESSEQUAL
15517: PUSH
15518: LD_VAR 0 1
15522: PPUSH
15523: CALL_OW 110
15527: PUSH
15528: LD_INT 0
15530: EQUAL
15531: AND
15532: IFFALSE 15561
// begin SetTag ( i , 1 ) ;
15534: LD_VAR 0 1
15538: PPUSH
15539: LD_INT 1
15541: PPUSH
15542: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15546: LD_VAR 0 1
15550: PPUSH
15551: LD_INT 83
15553: PPUSH
15554: LD_INT 134
15556: PPUSH
15557: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15561: LD_VAR 0 1
15565: PPUSH
15566: CALL_OW 256
15570: PUSH
15571: LD_INT 1000
15573: LESS
15574: PUSH
15575: LD_VAR 0 1
15579: PPUSH
15580: CALL_OW 110
15584: PUSH
15585: LD_INT 1
15587: EQUAL
15588: AND
15589: PUSH
15590: LD_VAR 0 1
15594: PPUSH
15595: LD_INT 83
15597: PPUSH
15598: LD_INT 134
15600: PPUSH
15601: CALL_OW 297
15605: PUSH
15606: LD_INT 6
15608: LESS
15609: AND
15610: IFFALSE 15638
// begin SetFuel ( i , 100 ) ;
15612: LD_VAR 0 1
15616: PPUSH
15617: LD_INT 100
15619: PPUSH
15620: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15624: LD_VAR 0 1
15628: PPUSH
15629: CALL_OW 310
15633: PPUSH
15634: CALL 68390 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15638: LD_VAR 0 1
15642: PPUSH
15643: CALL_OW 256
15647: PUSH
15648: LD_INT 1000
15650: EQUAL
15651: PUSH
15652: LD_VAR 0 1
15656: PPUSH
15657: CALL_OW 110
15661: PUSH
15662: LD_INT 1
15664: EQUAL
15665: AND
15666: PUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 311
15676: AND
15677: IFFALSE 15691
// SetTag ( i , 0 ) ;
15679: LD_VAR 0 1
15683: PPUSH
15684: LD_INT 0
15686: PPUSH
15687: CALL_OW 109
// end ; end ;
15691: GO 15441
15693: POP
15694: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15695: LD_ADDR_VAR 0 5
15699: PUSH
15700: LD_EXP 58
15704: PPUSH
15705: LD_INT 25
15707: PUSH
15708: LD_INT 4
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PPUSH
15715: CALL_OW 72
15719: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15720: LD_ADDR_VAR 0 4
15724: PUSH
15725: LD_EXP 58
15729: PPUSH
15730: LD_INT 92
15732: PUSH
15733: LD_INT 92
15735: PUSH
15736: LD_INT 155
15738: PUSH
15739: LD_INT 12
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 3
15750: PUSH
15751: LD_INT 24
15753: PUSH
15754: LD_INT 1000
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PPUSH
15769: CALL_OW 72
15773: ST_TO_ADDR
// if sci then
15774: LD_VAR 0 5
15778: IFFALSE 15911
// begin if hurt then
15780: LD_VAR 0 4
15784: IFFALSE 15857
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
15786: LD_VAR 0 5
15790: PPUSH
15791: LD_INT 3
15793: PUSH
15794: LD_INT 54
15796: PUSH
15797: EMPTY
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PPUSH
15804: CALL_OW 72
15808: IFFALSE 15837
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
15810: LD_VAR 0 5
15814: PPUSH
15815: LD_INT 3
15817: PUSH
15818: LD_INT 54
15820: PUSH
15821: EMPTY
15822: LIST
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PPUSH
15828: CALL_OW 72
15832: PPUSH
15833: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
15837: LD_VAR 0 5
15841: PPUSH
15842: LD_VAR 0 4
15846: PUSH
15847: LD_INT 1
15849: ARRAY
15850: PPUSH
15851: CALL_OW 188
// end else
15855: GO 15911
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
15857: LD_VAR 0 5
15861: PPUSH
15862: LD_INT 3
15864: PUSH
15865: LD_INT 54
15867: PUSH
15868: EMPTY
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL_OW 72
15879: IFFALSE 15911
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
15881: LD_VAR 0 5
15885: PPUSH
15886: LD_INT 3
15888: PUSH
15889: LD_INT 54
15891: PUSH
15892: EMPTY
15893: LIST
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PPUSH
15899: CALL_OW 72
15903: PPUSH
15904: LD_INT 17
15906: PPUSH
15907: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15911: LD_ADDR_VAR 0 3
15915: PUSH
15916: LD_INT 10
15918: PPUSH
15919: LD_INT 21
15921: PUSH
15922: LD_INT 3
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 3
15931: PUSH
15932: LD_INT 24
15934: PUSH
15935: LD_INT 1000
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PPUSH
15950: CALL_OW 70
15954: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
15955: LD_ADDR_VAR 0 2
15959: PUSH
15960: LD_EXP 58
15964: PPUSH
15965: LD_INT 25
15967: PUSH
15968: LD_INT 2
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PPUSH
15975: CALL_OW 72
15979: PUSH
15980: LD_INT 22
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 34
15992: PUSH
15993: LD_INT 52
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PPUSH
16004: CALL_OW 69
16008: UNION
16009: ST_TO_ADDR
// if not tmp then
16010: LD_VAR 0 2
16014: NOT
16015: IFFALSE 16019
// exit ;
16017: GO 16537
// for i in tmp do
16019: LD_ADDR_VAR 0 1
16023: PUSH
16024: LD_VAR 0 2
16028: PUSH
16029: FOR_IN
16030: IFFALSE 16535
// begin if GetClass ( i ) = 2 then
16032: LD_VAR 0 1
16036: PPUSH
16037: CALL_OW 257
16041: PUSH
16042: LD_INT 2
16044: EQUAL
16045: IFFALSE 16268
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 256
16056: PUSH
16057: LD_INT 1000
16059: EQUAL
16060: PUSH
16061: LD_VAR 0 1
16065: PPUSH
16066: CALL_OW 110
16070: PUSH
16071: LD_INT 1
16073: EQUAL
16074: AND
16075: IFFALSE 16089
// SetTag ( i , 0 ) ;
16077: LD_VAR 0 1
16081: PPUSH
16082: LD_INT 0
16084: PPUSH
16085: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16089: LD_VAR 0 1
16093: PPUSH
16094: CALL_OW 256
16098: PUSH
16099: LD_INT 500
16101: LESSEQUAL
16102: PUSH
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 110
16112: PUSH
16113: LD_INT 0
16115: EQUAL
16116: AND
16117: IFFALSE 16146
// begin SetTag ( i , 1 ) ;
16119: LD_VAR 0 1
16123: PPUSH
16124: LD_INT 1
16126: PPUSH
16127: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16131: LD_VAR 0 1
16135: PPUSH
16136: LD_INT 92
16138: PPUSH
16139: LD_INT 155
16141: PPUSH
16142: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16146: LD_VAR 0 3
16150: PUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 256
16160: PUSH
16161: LD_INT 500
16163: GREATER
16164: AND
16165: PUSH
16166: LD_VAR 0 1
16170: PPUSH
16171: CALL_OW 110
16175: PUSH
16176: LD_INT 0
16178: EQUAL
16179: AND
16180: PUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL_OW 314
16190: NOT
16191: AND
16192: IFFALSE 16266
// begin if b then
16194: LD_VAR 0 3
16198: IFFALSE 16230
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16200: LD_VAR 0 1
16204: PPUSH
16205: LD_VAR 0 3
16209: PUSH
16210: LD_INT 1
16212: PPUSH
16213: LD_VAR 0 3
16217: PPUSH
16218: CALL_OW 12
16222: ARRAY
16223: PPUSH
16224: CALL_OW 130
16228: GO 16266
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16230: LD_VAR 0 1
16234: PPUSH
16235: LD_INT 94
16237: PPUSH
16238: LD_INT 165
16240: PPUSH
16241: CALL_OW 297
16245: PUSH
16246: LD_INT 8
16248: GREATER
16249: IFFALSE 16266
// ComMoveXY ( i , 94 , 165 ) ;
16251: LD_VAR 0 1
16255: PPUSH
16256: LD_INT 94
16258: PPUSH
16259: LD_INT 165
16261: PPUSH
16262: CALL_OW 111
// end ; end else
16266: GO 16533
// if GetWeapon ( i ) = ru_crane then
16268: LD_VAR 0 1
16272: PPUSH
16273: CALL_OW 264
16277: PUSH
16278: LD_INT 52
16280: EQUAL
16281: IFFALSE 16533
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16283: LD_VAR 0 1
16287: PPUSH
16288: CALL_OW 256
16292: PUSH
16293: LD_INT 1000
16295: EQUAL
16296: PUSH
16297: LD_VAR 0 1
16301: PPUSH
16302: CALL_OW 110
16306: PUSH
16307: LD_INT 1
16309: EQUAL
16310: AND
16311: IFFALSE 16337
// begin SetTag ( i , 0 ) ;
16313: LD_VAR 0 1
16317: PPUSH
16318: LD_INT 0
16320: PPUSH
16321: CALL_OW 109
// SetFuel ( i , 100 ) ;
16325: LD_VAR 0 1
16329: PPUSH
16330: LD_INT 100
16332: PPUSH
16333: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16337: LD_VAR 0 1
16341: PPUSH
16342: CALL_OW 256
16346: PUSH
16347: LD_INT 500
16349: LESSEQUAL
16350: PUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 110
16360: PUSH
16361: LD_INT 0
16363: EQUAL
16364: AND
16365: IFFALSE 16408
// begin SetTag ( i , 1 ) ;
16367: LD_VAR 0 1
16371: PPUSH
16372: LD_INT 1
16374: PPUSH
16375: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16379: LD_VAR 0 1
16383: PPUSH
16384: LD_INT 83
16386: PPUSH
16387: LD_INT 135
16389: PPUSH
16390: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 310
16403: PPUSH
16404: CALL 68390 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 256
16417: PUSH
16418: LD_INT 500
16420: GREATER
16421: PUSH
16422: LD_VAR 0 1
16426: PPUSH
16427: CALL_OW 110
16431: PUSH
16432: LD_INT 0
16434: EQUAL
16435: AND
16436: PUSH
16437: LD_VAR 0 1
16441: PPUSH
16442: CALL_OW 311
16446: AND
16447: PUSH
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 314
16457: NOT
16458: AND
16459: IFFALSE 16533
// begin if b then
16461: LD_VAR 0 3
16465: IFFALSE 16497
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16467: LD_VAR 0 1
16471: PPUSH
16472: LD_VAR 0 3
16476: PUSH
16477: LD_INT 1
16479: PPUSH
16480: LD_VAR 0 3
16484: PPUSH
16485: CALL_OW 12
16489: ARRAY
16490: PPUSH
16491: CALL_OW 130
16495: GO 16533
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16497: LD_VAR 0 1
16501: PPUSH
16502: LD_INT 94
16504: PPUSH
16505: LD_INT 165
16507: PPUSH
16508: CALL_OW 297
16512: PUSH
16513: LD_INT 8
16515: GREATER
16516: IFFALSE 16533
// ComMoveXY ( i , 94 , 165 ) ;
16518: LD_VAR 0 1
16522: PPUSH
16523: LD_INT 94
16525: PPUSH
16526: LD_INT 165
16528: PPUSH
16529: CALL_OW 111
// end ; end ; end ;
16533: GO 16029
16535: POP
16536: POP
// end ;
16537: PPOPN 6
16539: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16540: LD_EXP 23
16544: NOT
16545: PUSH
16546: LD_EXP 27
16550: NOT
16551: AND
16552: IFFALSE 17467
16554: GO 16556
16556: DISABLE
16557: LD_INT 0
16559: PPUSH
16560: PPUSH
16561: PPUSH
16562: PPUSH
16563: PPUSH
// begin enable ;
16564: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16565: LD_INT 35
16567: PUSH
16568: LD_INT 45
16570: PUSH
16571: LD_INT 55
16573: PUSH
16574: LD_INT 60
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 13
16593: IFFALSE 16609
// waveStrength := waveStrength + 1 ;
16595: LD_ADDR_EXP 61
16599: PUSH
16600: LD_EXP 61
16604: PUSH
16605: LD_INT 1
16607: PLUS
16608: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16609: LD_EXP 61
16613: PUSH
16614: LD_INT 2
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: LD_INT 4
16622: PUSH
16623: LD_INT 4
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: PUSH
16632: LD_OWVAR 67
16636: ARRAY
16637: GREATER
16638: IFFALSE 16670
// begin waveStrength := waveStrength + 2 ;
16640: LD_ADDR_EXP 61
16644: PUSH
16645: LD_EXP 61
16649: PUSH
16650: LD_INT 2
16652: PLUS
16653: ST_TO_ADDR
// disableAttackOnHeike := true ;
16654: LD_ADDR_EXP 27
16658: PUSH
16659: LD_INT 1
16661: ST_TO_ADDR
// disable ;
16662: DISABLE
// wait ( 3 3$00 ) ;
16663: LD_INT 6300
16665: PPUSH
16666: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16670: LD_ADDR_VAR 0 1
16674: PUSH
16675: DOUBLE
16676: LD_INT 1
16678: DEC
16679: ST_TO_ADDR
16680: LD_INT 2
16682: PUSH
16683: LD_INT 2
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: LD_INT 4
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: PUSH
16698: LD_OWVAR 67
16702: ARRAY
16703: PUSH
16704: FOR_TO
16705: IFFALSE 16866
// begin InitHc ;
16707: CALL_OW 19
// InitVc ;
16711: CALL_OW 20
// uc_side := 3 ;
16715: LD_ADDR_OWVAR 20
16719: PUSH
16720: LD_INT 3
16722: ST_TO_ADDR
// uc_nation := 3 ;
16723: LD_ADDR_OWVAR 21
16727: PUSH
16728: LD_INT 3
16730: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16731: LD_INT 0
16733: PPUSH
16734: LD_INT 1
16736: PPUSH
16737: LD_OWVAR 67
16741: PUSH
16742: LD_INT 2
16744: PLUS
16745: PPUSH
16746: CALL_OW 380
// un := CreateHuman ;
16750: LD_ADDR_VAR 0 2
16754: PUSH
16755: CALL_OW 44
16759: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_INT 160
16767: PPUSH
16768: LD_INT 3
16770: PPUSH
16771: LD_INT 2
16773: PPUSH
16774: LD_INT 0
16776: PPUSH
16777: CALL 68710 0 5
// SetClass ( un , class_bazooker ) ;
16781: LD_VAR 0 2
16785: PPUSH
16786: LD_INT 9
16788: PPUSH
16789: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16793: LD_ADDR_EXP 60
16797: PUSH
16798: LD_EXP 60
16802: PPUSH
16803: LD_EXP 60
16807: PUSH
16808: LD_INT 1
16810: PLUS
16811: PPUSH
16812: LD_VAR 0 2
16816: PPUSH
16817: CALL_OW 1
16821: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
16822: LD_VAR 0 2
16826: PPUSH
16827: LD_INT 177
16829: PPUSH
16830: LD_INT 17
16832: PPUSH
16833: CALL_OW 111
// wait ( 0 0$2 ) ;
16837: LD_INT 70
16839: PPUSH
16840: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
16844: LD_ADDR_VAR 0 5
16848: PUSH
16849: LD_VAR 0 5
16853: PPUSH
16854: LD_VAR 0 2
16858: PPUSH
16859: CALL 66570 0 2
16863: ST_TO_ADDR
// end ;
16864: GO 16704
16866: POP
16867: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
16868: LD_VAR 0 5
16872: PPUSH
16873: LD_INT 196
16875: PPUSH
16876: LD_INT 53
16878: PPUSH
16879: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
16883: LD_VAR 0 5
16887: PPUSH
16888: LD_INT 199
16890: PPUSH
16891: LD_INT 62
16893: PPUSH
16894: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
16898: LD_VAR 0 5
16902: PPUSH
16903: LD_INT 205
16905: PPUSH
16906: LD_INT 75
16908: PPUSH
16909: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
16913: LD_ADDR_VAR 0 1
16917: PUSH
16918: DOUBLE
16919: LD_INT 1
16921: DEC
16922: ST_TO_ADDR
16923: LD_INT 2
16925: PUSH
16926: LD_INT 3
16928: PUSH
16929: LD_INT 3
16931: PUSH
16932: LD_INT 4
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: LD_OWVAR 67
16945: ARRAY
16946: PUSH
16947: LD_EXP 61
16951: PLUS
16952: PUSH
16953: FOR_TO
16954: IFFALSE 17263
// begin InitHc ;
16956: CALL_OW 19
// InitVc ;
16960: CALL_OW 20
// uc_side := 3 ;
16964: LD_ADDR_OWVAR 20
16968: PUSH
16969: LD_INT 3
16971: ST_TO_ADDR
// uc_nation := 3 ;
16972: LD_ADDR_OWVAR 21
16976: PUSH
16977: LD_INT 3
16979: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
16980: LD_INT 22
16982: PUSH
16983: LD_INT 23
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 1
16992: PPUSH
16993: LD_INT 2
16995: PPUSH
16996: CALL_OW 12
17000: ARRAY
17001: PPUSH
17002: LD_INT 1
17004: PPUSH
17005: LD_INT 1
17007: PPUSH
17008: LD_INT 44
17010: PUSH
17011: LD_INT 45
17013: PUSH
17014: LD_INT 43
17016: PUSH
17017: LD_INT 42
17019: PUSH
17020: LD_INT 44
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 1
17032: PPUSH
17033: LD_INT 5
17035: PPUSH
17036: CALL_OW 12
17040: ARRAY
17041: PPUSH
17042: LD_INT 99
17044: PPUSH
17045: CALL 34117 0 5
// veh := CreateVehicle ;
17049: LD_ADDR_VAR 0 3
17053: PUSH
17054: CALL_OW 45
17058: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17059: LD_VAR 0 3
17063: PPUSH
17064: LD_INT 160
17066: PPUSH
17067: LD_INT 3
17069: PPUSH
17070: LD_INT 2
17072: PPUSH
17073: LD_INT 0
17075: PPUSH
17076: CALL 68710 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17080: LD_ADDR_EXP 60
17084: PUSH
17085: LD_EXP 60
17089: PPUSH
17090: LD_EXP 60
17094: PUSH
17095: LD_INT 1
17097: PLUS
17098: PPUSH
17099: LD_VAR 0 3
17103: PPUSH
17104: CALL_OW 1
17108: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17109: LD_INT 0
17111: PPUSH
17112: LD_INT 3
17114: PPUSH
17115: LD_OWVAR 67
17119: PUSH
17120: LD_INT 2
17122: PLUS
17123: PPUSH
17124: CALL_OW 380
// un := CreateHuman ;
17128: LD_ADDR_VAR 0 2
17132: PUSH
17133: CALL_OW 44
17137: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17138: LD_VAR 0 2
17142: PPUSH
17143: LD_VAR 0 3
17147: PPUSH
17148: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17152: LD_ADDR_EXP 60
17156: PUSH
17157: LD_EXP 60
17161: PPUSH
17162: LD_EXP 60
17166: PUSH
17167: LD_INT 1
17169: PLUS
17170: PPUSH
17171: LD_VAR 0 2
17175: PPUSH
17176: CALL_OW 1
17180: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17181: LD_VAR 0 2
17185: PPUSH
17186: LD_INT 177
17188: PPUSH
17189: LD_INT 17
17191: PPUSH
17192: CALL_OW 111
// wait ( 0 0$2 ) ;
17196: LD_INT 70
17198: PPUSH
17199: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17203: LD_ADDR_VAR 0 4
17207: PUSH
17208: LD_VAR 0 4
17212: PPUSH
17213: LD_VAR 0 4
17217: PUSH
17218: LD_INT 1
17220: PLUS
17221: PPUSH
17222: LD_VAR 0 3
17226: PPUSH
17227: CALL_OW 1
17231: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17232: LD_ADDR_VAR 0 4
17236: PUSH
17237: LD_VAR 0 4
17241: PPUSH
17242: LD_VAR 0 4
17246: PUSH
17247: LD_INT 1
17249: PLUS
17250: PPUSH
17251: LD_VAR 0 2
17255: PPUSH
17256: CALL_OW 1
17260: ST_TO_ADDR
// end ;
17261: GO 16953
17263: POP
17264: POP
// for i in tmp do
17265: LD_ADDR_VAR 0 1
17269: PUSH
17270: LD_VAR 0 4
17274: PUSH
17275: FOR_IN
17276: IFFALSE 17357
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17278: LD_VAR 0 1
17282: PPUSH
17283: LD_INT 206
17285: PUSH
17286: LD_INT 37
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 239
17295: PUSH
17296: LD_INT 53
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 260
17305: PUSH
17306: LD_INT 67
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 263
17315: PUSH
17316: LD_INT 79
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 257
17325: PUSH
17326: LD_INT 105
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 227
17335: PUSH
17336: LD_INT 97
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: PPUSH
17351: CALL 69174 0 2
17355: GO 17275
17357: POP
17358: POP
// repeat wait ( 0 0$2 ) ;
17359: LD_INT 70
17361: PPUSH
17362: CALL_OW 67
// for i in tmp do
17366: LD_ADDR_VAR 0 1
17370: PUSH
17371: LD_VAR 0 4
17375: PUSH
17376: FOR_IN
17377: IFFALSE 17444
// if IsDead ( i ) then
17379: LD_VAR 0 1
17383: PPUSH
17384: CALL_OW 301
17388: IFFALSE 17408
// tmp := tmp diff i else
17390: LD_ADDR_VAR 0 4
17394: PUSH
17395: LD_VAR 0 4
17399: PUSH
17400: LD_VAR 0 1
17404: DIFF
17405: ST_TO_ADDR
17406: GO 17442
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17408: LD_VAR 0 1
17412: PPUSH
17413: LD_INT 81
17415: PUSH
17416: LD_INT 3
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 69
17427: PPUSH
17428: LD_VAR 0 1
17432: PPUSH
17433: CALL_OW 74
17437: PPUSH
17438: CALL_OW 115
17442: GO 17376
17444: POP
17445: POP
// until not tmp ;
17446: LD_VAR 0 4
17450: NOT
17451: IFFALSE 17359
// if firstAttack then
17453: LD_EXP 28
17457: IFFALSE 17467
// firstAttack := false ;
17459: LD_ADDR_EXP 28
17463: PUSH
17464: LD_INT 0
17466: ST_TO_ADDR
// end ;
17467: PPOPN 5
17469: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17470: LD_EXP 23
17474: NOT
17475: PUSH
17476: LD_EXP 32
17480: NOT
17481: AND
17482: PUSH
17483: LD_EXP 3
17487: AND
17488: PUSH
17489: LD_EXP 27
17493: NOT
17494: AND
17495: IFFALSE 18412
17497: GO 17499
17499: DISABLE
17500: LD_INT 0
17502: PPUSH
17503: PPUSH
17504: PPUSH
17505: PPUSH
// begin enable ;
17506: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17507: LD_ADDR_VAR 0 1
17511: PUSH
17512: DOUBLE
17513: LD_INT 1
17515: DEC
17516: ST_TO_ADDR
17517: LD_INT 1
17519: PUSH
17520: LD_INT 2
17522: PUSH
17523: LD_INT 2
17525: PUSH
17526: LD_INT 3
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: PUSH
17535: LD_OWVAR 67
17539: ARRAY
17540: PUSH
17541: FOR_TO
17542: IFFALSE 17843
// begin InitHc ;
17544: CALL_OW 19
// InitVc ;
17548: CALL_OW 20
// uc_side := 3 ;
17552: LD_ADDR_OWVAR 20
17556: PUSH
17557: LD_INT 3
17559: ST_TO_ADDR
// uc_nation := 3 ;
17560: LD_ADDR_OWVAR 21
17564: PUSH
17565: LD_INT 3
17567: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17568: LD_INT 22
17570: PUSH
17571: LD_INT 23
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 1
17580: PPUSH
17581: LD_INT 2
17583: PPUSH
17584: CALL_OW 12
17588: ARRAY
17589: PPUSH
17590: LD_INT 1
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: LD_INT 44
17598: PUSH
17599: LD_INT 43
17601: PUSH
17602: LD_INT 42
17604: PUSH
17605: LD_INT 44
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 1
17616: PPUSH
17617: LD_INT 4
17619: PPUSH
17620: CALL_OW 12
17624: ARRAY
17625: PPUSH
17626: LD_INT 99
17628: PPUSH
17629: CALL 34117 0 5
// veh := CreateVehicle ;
17633: LD_ADDR_VAR 0 3
17637: PUSH
17638: CALL_OW 45
17642: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17643: LD_VAR 0 3
17647: PPUSH
17648: LD_INT 5
17650: PPUSH
17651: LD_INT 3
17653: PPUSH
17654: LD_INT 2
17656: PPUSH
17657: LD_INT 0
17659: PPUSH
17660: CALL 68710 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17664: LD_ADDR_EXP 60
17668: PUSH
17669: LD_EXP 60
17673: PPUSH
17674: LD_EXP 60
17678: PUSH
17679: LD_INT 1
17681: PLUS
17682: PPUSH
17683: LD_VAR 0 3
17687: PPUSH
17688: CALL_OW 1
17692: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17693: LD_INT 0
17695: PPUSH
17696: LD_INT 3
17698: PPUSH
17699: LD_OWVAR 67
17703: PPUSH
17704: CALL_OW 380
// un := CreateHuman ;
17708: LD_ADDR_VAR 0 2
17712: PUSH
17713: CALL_OW 44
17717: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17718: LD_VAR 0 2
17722: PPUSH
17723: LD_VAR 0 3
17727: PPUSH
17728: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17732: LD_ADDR_EXP 60
17736: PUSH
17737: LD_EXP 60
17741: PPUSH
17742: LD_EXP 60
17746: PUSH
17747: LD_INT 1
17749: PLUS
17750: PPUSH
17751: LD_VAR 0 2
17755: PPUSH
17756: CALL_OW 1
17760: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17761: LD_VAR 0 2
17765: PPUSH
17766: LD_INT 23
17768: PPUSH
17769: LD_INT 7
17771: PPUSH
17772: CALL_OW 111
// wait ( 0 0$2 ) ;
17776: LD_INT 70
17778: PPUSH
17779: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17783: LD_ADDR_VAR 0 4
17787: PUSH
17788: LD_VAR 0 4
17792: PPUSH
17793: LD_VAR 0 4
17797: PUSH
17798: LD_INT 1
17800: PLUS
17801: PPUSH
17802: LD_VAR 0 3
17806: PPUSH
17807: CALL_OW 1
17811: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17812: LD_ADDR_VAR 0 4
17816: PUSH
17817: LD_VAR 0 4
17821: PPUSH
17822: LD_VAR 0 4
17826: PUSH
17827: LD_INT 1
17829: PLUS
17830: PPUSH
17831: LD_VAR 0 2
17835: PPUSH
17836: CALL_OW 1
17840: ST_TO_ADDR
// end ;
17841: GO 17541
17843: POP
17844: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
17845: LD_ADDR_VAR 0 1
17849: PUSH
17850: DOUBLE
17851: LD_INT 1
17853: DEC
17854: ST_TO_ADDR
17855: LD_INT 2
17857: PUSH
17858: LD_INT 3
17860: PUSH
17861: LD_INT 3
17863: PUSH
17864: LD_INT 4
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: PUSH
17873: LD_OWVAR 67
17877: ARRAY
17878: PUSH
17879: FOR_TO
17880: IFFALSE 18189
// begin InitHc ;
17882: CALL_OW 19
// InitVc ;
17886: CALL_OW 20
// uc_side := 3 ;
17890: LD_ADDR_OWVAR 20
17894: PUSH
17895: LD_INT 3
17897: ST_TO_ADDR
// uc_nation := 3 ;
17898: LD_ADDR_OWVAR 21
17902: PUSH
17903: LD_INT 3
17905: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17906: LD_INT 22
17908: PUSH
17909: LD_INT 23
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 1
17918: PPUSH
17919: LD_INT 2
17921: PPUSH
17922: CALL_OW 12
17926: ARRAY
17927: PPUSH
17928: LD_INT 1
17930: PPUSH
17931: LD_INT 1
17933: PPUSH
17934: LD_INT 44
17936: PUSH
17937: LD_INT 45
17939: PUSH
17940: LD_INT 43
17942: PUSH
17943: LD_INT 42
17945: PUSH
17946: LD_INT 44
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 1
17958: PPUSH
17959: LD_INT 5
17961: PPUSH
17962: CALL_OW 12
17966: ARRAY
17967: PPUSH
17968: LD_INT 99
17970: PPUSH
17971: CALL 34117 0 5
// veh := CreateVehicle ;
17975: LD_ADDR_VAR 0 3
17979: PUSH
17980: CALL_OW 45
17984: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
17985: LD_VAR 0 3
17989: PPUSH
17990: LD_INT 127
17992: PPUSH
17993: LD_INT 243
17995: PPUSH
17996: LD_INT 0
17998: PPUSH
17999: LD_INT 0
18001: PPUSH
18002: CALL 68710 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18006: LD_ADDR_EXP 60
18010: PUSH
18011: LD_EXP 60
18015: PPUSH
18016: LD_EXP 60
18020: PUSH
18021: LD_INT 1
18023: PLUS
18024: PPUSH
18025: LD_VAR 0 3
18029: PPUSH
18030: CALL_OW 1
18034: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18035: LD_INT 0
18037: PPUSH
18038: LD_INT 3
18040: PPUSH
18041: LD_OWVAR 67
18045: PUSH
18046: LD_INT 2
18048: PLUS
18049: PPUSH
18050: CALL_OW 380
// un := CreateHuman ;
18054: LD_ADDR_VAR 0 2
18058: PUSH
18059: CALL_OW 44
18063: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18064: LD_VAR 0 2
18068: PPUSH
18069: LD_VAR 0 3
18073: PPUSH
18074: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18078: LD_ADDR_EXP 60
18082: PUSH
18083: LD_EXP 60
18087: PPUSH
18088: LD_EXP 60
18092: PUSH
18093: LD_INT 1
18095: PLUS
18096: PPUSH
18097: LD_VAR 0 2
18101: PPUSH
18102: CALL_OW 1
18106: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18107: LD_VAR 0 2
18111: PPUSH
18112: LD_INT 130
18114: PPUSH
18115: LD_INT 233
18117: PPUSH
18118: CALL_OW 111
// wait ( 0 0$2 ) ;
18122: LD_INT 70
18124: PPUSH
18125: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18129: LD_ADDR_VAR 0 4
18133: PUSH
18134: LD_VAR 0 4
18138: PPUSH
18139: LD_VAR 0 4
18143: PUSH
18144: LD_INT 1
18146: PLUS
18147: PPUSH
18148: LD_VAR 0 3
18152: PPUSH
18153: CALL_OW 1
18157: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18158: LD_ADDR_VAR 0 4
18162: PUSH
18163: LD_VAR 0 4
18167: PPUSH
18168: LD_VAR 0 4
18172: PUSH
18173: LD_INT 1
18175: PLUS
18176: PPUSH
18177: LD_VAR 0 2
18181: PPUSH
18182: CALL_OW 1
18186: ST_TO_ADDR
// end ;
18187: GO 17879
18189: POP
18190: POP
// for i in tmp do
18191: LD_ADDR_VAR 0 1
18195: PUSH
18196: LD_VAR 0 4
18200: PUSH
18201: FOR_IN
18202: IFFALSE 18316
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18204: LD_VAR 0 1
18208: PPUSH
18209: LD_INT 130
18211: PUSH
18212: LD_INT 229
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 137
18221: PUSH
18222: LD_INT 216
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 142
18231: PUSH
18232: LD_INT 194
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 140
18241: PUSH
18242: LD_INT 169
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 146
18251: PUSH
18252: LD_INT 162
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 174
18261: PUSH
18262: LD_INT 161
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 158
18271: PUSH
18272: LD_INT 134
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 136
18281: PUSH
18282: LD_INT 107
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 115
18291: PUSH
18292: LD_INT 89
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: PPUSH
18310: CALL 69174 0 2
18314: GO 18201
18316: POP
18317: POP
// repeat wait ( 0 0$2 ) ;
18318: LD_INT 70
18320: PPUSH
18321: CALL_OW 67
// for i in tmp do
18325: LD_ADDR_VAR 0 1
18329: PUSH
18330: LD_VAR 0 4
18334: PUSH
18335: FOR_IN
18336: IFFALSE 18403
// if IsDead ( i ) then
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 301
18347: IFFALSE 18367
// tmp := tmp diff i else
18349: LD_ADDR_VAR 0 4
18353: PUSH
18354: LD_VAR 0 4
18358: PUSH
18359: LD_VAR 0 1
18363: DIFF
18364: ST_TO_ADDR
18365: GO 18401
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18367: LD_VAR 0 1
18371: PPUSH
18372: LD_INT 81
18374: PUSH
18375: LD_INT 3
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PPUSH
18382: CALL_OW 69
18386: PPUSH
18387: LD_VAR 0 1
18391: PPUSH
18392: CALL_OW 74
18396: PPUSH
18397: CALL_OW 115
18401: GO 18335
18403: POP
18404: POP
// until not tmp ;
18405: LD_VAR 0 4
18409: NOT
18410: IFFALSE 18318
// end ;
18412: PPOPN 4
18414: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18415: LD_EXP 6
18419: IFFALSE 18878
18421: GO 18423
18423: DISABLE
18424: LD_INT 0
18426: PPUSH
18427: PPUSH
18428: PPUSH
18429: PPUSH
// begin wait ( 3 3$00 ) ;
18430: LD_INT 6300
18432: PPUSH
18433: CALL_OW 67
// for i := 1 to 3 do
18437: LD_ADDR_VAR 0 1
18441: PUSH
18442: DOUBLE
18443: LD_INT 1
18445: DEC
18446: ST_TO_ADDR
18447: LD_INT 3
18449: PUSH
18450: FOR_TO
18451: IFFALSE 18750
// begin InitHc ;
18453: CALL_OW 19
// InitVc ;
18457: CALL_OW 20
// uc_side := 3 ;
18461: LD_ADDR_OWVAR 20
18465: PUSH
18466: LD_INT 3
18468: ST_TO_ADDR
// uc_nation := 3 ;
18469: LD_ADDR_OWVAR 21
18473: PUSH
18474: LD_INT 3
18476: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18477: LD_INT 22
18479: PUSH
18480: LD_INT 23
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: PPUSH
18490: LD_INT 2
18492: PPUSH
18493: CALL_OW 12
18497: ARRAY
18498: PPUSH
18499: LD_INT 1
18501: PPUSH
18502: LD_INT 1
18504: PPUSH
18505: LD_INT 44
18507: PUSH
18508: LD_INT 43
18510: PUSH
18511: LD_INT 42
18513: PUSH
18514: LD_INT 44
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 1
18525: PPUSH
18526: LD_INT 4
18528: PPUSH
18529: CALL_OW 12
18533: ARRAY
18534: PPUSH
18535: LD_INT 99
18537: PPUSH
18538: CALL 34117 0 5
// veh := CreateVehicle ;
18542: LD_ADDR_VAR 0 3
18546: PUSH
18547: CALL_OW 45
18551: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18552: LD_VAR 0 3
18556: PPUSH
18557: LD_INT 293
18559: PPUSH
18560: LD_INT 246
18562: PPUSH
18563: LD_INT 5
18565: PPUSH
18566: LD_INT 0
18568: PPUSH
18569: CALL 68710 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18573: LD_ADDR_EXP 60
18577: PUSH
18578: LD_EXP 60
18582: PPUSH
18583: LD_EXP 60
18587: PUSH
18588: LD_INT 1
18590: PLUS
18591: PPUSH
18592: LD_VAR 0 3
18596: PPUSH
18597: CALL_OW 1
18601: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18602: LD_INT 0
18604: PPUSH
18605: LD_INT 3
18607: PPUSH
18608: LD_INT 3
18610: PPUSH
18611: CALL_OW 380
// un := CreateHuman ;
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: CALL_OW 44
18624: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18625: LD_VAR 0 2
18629: PPUSH
18630: LD_VAR 0 3
18634: PPUSH
18635: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18639: LD_ADDR_EXP 60
18643: PUSH
18644: LD_EXP 60
18648: PPUSH
18649: LD_EXP 60
18653: PUSH
18654: LD_INT 1
18656: PLUS
18657: PPUSH
18658: LD_VAR 0 2
18662: PPUSH
18663: CALL_OW 1
18667: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18668: LD_VAR 0 2
18672: PPUSH
18673: LD_INT 273
18675: PPUSH
18676: LD_INT 227
18678: PPUSH
18679: CALL_OW 111
// wait ( 0 0$2 ) ;
18683: LD_INT 70
18685: PPUSH
18686: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18690: LD_ADDR_VAR 0 4
18694: PUSH
18695: LD_VAR 0 4
18699: PPUSH
18700: LD_VAR 0 4
18704: PUSH
18705: LD_INT 1
18707: PLUS
18708: PPUSH
18709: LD_VAR 0 3
18713: PPUSH
18714: CALL_OW 1
18718: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18719: LD_ADDR_VAR 0 4
18723: PUSH
18724: LD_VAR 0 4
18728: PPUSH
18729: LD_VAR 0 4
18733: PUSH
18734: LD_INT 1
18736: PLUS
18737: PPUSH
18738: LD_VAR 0 2
18742: PPUSH
18743: CALL_OW 1
18747: ST_TO_ADDR
// end ;
18748: GO 18450
18750: POP
18751: POP
// for i in tmp do
18752: LD_ADDR_VAR 0 1
18756: PUSH
18757: LD_VAR 0 4
18761: PUSH
18762: FOR_IN
18763: IFFALSE 18782
// ComAgressiveMove ( i , 330 , 231 ) ;
18765: LD_VAR 0 1
18769: PPUSH
18770: LD_INT 330
18772: PPUSH
18773: LD_INT 231
18775: PPUSH
18776: CALL_OW 114
18780: GO 18762
18782: POP
18783: POP
// repeat wait ( 0 0$2 ) ;
18784: LD_INT 70
18786: PPUSH
18787: CALL_OW 67
// for i in tmp do
18791: LD_ADDR_VAR 0 1
18795: PUSH
18796: LD_VAR 0 4
18800: PUSH
18801: FOR_IN
18802: IFFALSE 18869
// if IsDead ( i ) then
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 301
18813: IFFALSE 18833
// tmp := tmp diff i else
18815: LD_ADDR_VAR 0 4
18819: PUSH
18820: LD_VAR 0 4
18824: PUSH
18825: LD_VAR 0 1
18829: DIFF
18830: ST_TO_ADDR
18831: GO 18867
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18833: LD_VAR 0 1
18837: PPUSH
18838: LD_INT 81
18840: PUSH
18841: LD_INT 3
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PPUSH
18848: CALL_OW 69
18852: PPUSH
18853: LD_VAR 0 1
18857: PPUSH
18858: CALL_OW 74
18862: PPUSH
18863: CALL_OW 115
18867: GO 18801
18869: POP
18870: POP
// until not tmp ;
18871: LD_VAR 0 4
18875: NOT
18876: IFFALSE 18784
// end ;
18878: PPOPN 4
18880: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
18881: LD_INT 3
18883: PUSH
18884: LD_INT 22
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 32
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PPUSH
18912: CALL_OW 69
18916: IFFALSE 19000
18918: GO 18920
18920: DISABLE
18921: LD_INT 0
18923: PPUSH
// begin enable ;
18924: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
18925: LD_ADDR_VAR 0 1
18929: PUSH
18930: LD_INT 3
18932: PUSH
18933: LD_INT 22
18935: PUSH
18936: LD_INT 2
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 32
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 69
18965: PUSH
18966: FOR_IN
18967: IFFALSE 18998
// if GetFuel ( i ) < 3 then
18969: LD_VAR 0 1
18973: PPUSH
18974: CALL_OW 261
18978: PUSH
18979: LD_INT 3
18981: LESS
18982: IFFALSE 18996
// SetFuel ( i , 3 ) ;
18984: LD_VAR 0 1
18988: PPUSH
18989: LD_INT 3
18991: PPUSH
18992: CALL_OW 240
18996: GO 18966
18998: POP
18999: POP
// end ; end_of_file
19000: PPOPN 1
19002: END
// export function Action ; begin
19003: LD_INT 0
19005: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19006: LD_INT 2
19008: PPUSH
19009: LD_INT 4
19011: PPUSH
19012: CALL_OW 332
// Video ( true ) ;
19016: LD_INT 1
19018: PPUSH
19019: CALL 66542 0 1
// music_nat := 3 ;
19023: LD_ADDR_OWVAR 71
19027: PUSH
19028: LD_INT 3
19030: ST_TO_ADDR
// music_class := music_recon ;
19031: LD_ADDR_OWVAR 72
19035: PUSH
19036: LD_INT 3
19038: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19039: LD_INT 213
19041: PPUSH
19042: LD_INT 89
19044: PPUSH
19045: CALL_OW 86
// if Kaia and Olaf then
19049: LD_EXP 38
19053: PUSH
19054: LD_EXP 42
19058: AND
19059: IFFALSE 19065
// SceneKaiaWithOlaf ;
19061: CALL 19143 0 0
// if Givi and Kamil then
19065: LD_EXP 34
19069: PUSH
19070: LD_EXP 37
19074: AND
19075: IFFALSE 19081
// SceneWithGiviAndKamil ;
19077: CALL 19714 0 0
// tick := 0 ;
19081: LD_ADDR_OWVAR 1
19085: PUSH
19086: LD_INT 0
19088: ST_TO_ADDR
// wait ( 3 ) ;
19089: LD_INT 3
19091: PPUSH
19092: CALL_OW 67
// Video ( false ) ;
19096: LD_INT 0
19098: PPUSH
19099: CALL 66542 0 1
// ChangeMissionObjectives ( M1 ) ;
19103: LD_STRING M1
19105: PPUSH
19106: CALL_OW 337
// music_nat := music_auto ;
19110: LD_ADDR_OWVAR 71
19114: PUSH
19115: LD_INT 0
19117: ST_TO_ADDR
// music_class := music_auto ;
19118: LD_ADDR_OWVAR 72
19122: PUSH
19123: LD_INT 0
19125: ST_TO_ADDR
// SaveForQuickRestart ;
19126: CALL_OW 22
// gameActive := true ;
19130: LD_ADDR_EXP 31
19134: PUSH
19135: LD_INT 1
19137: ST_TO_ADDR
// end ;
19138: LD_VAR 0 1
19142: RET
// export function SceneKaiaWithOlaf ; begin
19143: LD_INT 0
19145: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19146: LD_INT 22
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 30
19158: PUSH
19159: LD_INT 3
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 69
19174: PPUSH
19175: LD_INT 14
19177: PPUSH
19178: LD_INT 1
19180: PPUSH
19181: LD_INT 1
19183: PPUSH
19184: LD_INT 26
19186: PPUSH
19187: CALL_OW 125
// wait ( 0 0$1 ) ;
19191: LD_INT 35
19193: PPUSH
19194: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19198: LD_EXP 38
19202: PPUSH
19203: LD_STRING DK-Mem-1
19205: PPUSH
19206: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19210: LD_EXP 38
19214: PPUSH
19215: LD_STRING DK-Mem-2
19217: PPUSH
19218: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19222: LD_EXP 42
19226: PPUSH
19227: LD_STRING DO-Mem-3
19229: PPUSH
19230: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19234: LD_EXP 38
19238: PPUSH
19239: LD_STRING DK-Mem-4
19241: PPUSH
19242: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19246: LD_EXP 42
19250: PPUSH
19251: LD_STRING DO-Mem-5
19253: PPUSH
19254: CALL_OW 88
// wait ( 0 0$2 ) ;
19258: LD_INT 70
19260: PPUSH
19261: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19265: LD_INT 22
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 30
19277: PUSH
19278: LD_INT 3
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: PPUSH
19294: LD_INT 90
19296: PPUSH
19297: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19301: LD_EXP 42
19305: PPUSH
19306: LD_STRING DO-Mem-6
19308: PPUSH
19309: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19313: LD_EXP 38
19317: PPUSH
19318: LD_STRING DK-Mem-7
19320: PPUSH
19321: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19325: LD_EXP 33
19329: PPUSH
19330: LD_EXP 38
19334: PPUSH
19335: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19339: LD_EXP 33
19343: PPUSH
19344: LD_STRING DH-Mem-8
19346: PPUSH
19347: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19351: LD_EXP 38
19355: PUSH
19356: LD_EXP 42
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PPUSH
19365: LD_EXP 33
19369: PPUSH
19370: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19374: LD_EXP 42
19378: PPUSH
19379: LD_STRING DO-Mem-9
19381: PPUSH
19382: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19386: LD_EXP 42
19390: PPUSH
19391: LD_STRING DO-Mem-10
19393: PPUSH
19394: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19398: LD_EXP 42
19402: PPUSH
19403: LD_STRING DO-Mem-11
19405: PPUSH
19406: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19410: LD_EXP 42
19414: PPUSH
19415: LD_STRING DO-Mem-12
19417: PPUSH
19418: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19422: LD_EXP 38
19426: PPUSH
19427: LD_STRING DK-Mem-13
19429: PPUSH
19430: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19434: LD_EXP 38
19438: PPUSH
19439: LD_STRING DK-Mem-14
19441: PPUSH
19442: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19446: LD_EXP 38
19450: PPUSH
19451: LD_STRING DK-Mem-15
19453: PPUSH
19454: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19458: LD_EXP 38
19462: PPUSH
19463: LD_STRING DK-Mem-16
19465: PPUSH
19466: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19470: LD_EXP 38
19474: PPUSH
19475: LD_STRING DK-Mem-17
19477: PPUSH
19478: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19482: LD_EXP 42
19486: PPUSH
19487: LD_EXP 38
19491: PPUSH
19492: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19496: LD_EXP 42
19500: PPUSH
19501: LD_STRING DO-Mem-18
19503: PPUSH
19504: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19508: LD_EXP 38
19512: PPUSH
19513: LD_EXP 42
19517: PPUSH
19518: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19522: LD_EXP 38
19526: PPUSH
19527: LD_STRING DK-Mem-19
19529: PPUSH
19530: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19534: LD_EXP 42
19538: PPUSH
19539: LD_INT 214
19541: PPUSH
19542: LD_INT 86
19544: PPUSH
19545: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19549: LD_EXP 42
19553: PPUSH
19554: LD_EXP 38
19558: PPUSH
19559: CALL_OW 179
// if Givi then
19563: LD_EXP 34
19567: IFFALSE 19598
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19569: LD_EXP 34
19573: PPUSH
19574: LD_INT 217
19576: PPUSH
19577: LD_INT 86
19579: PPUSH
19580: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19584: LD_EXP 34
19588: PPUSH
19589: LD_EXP 33
19593: PPUSH
19594: CALL_OW 179
// end ; if Kamil then
19598: LD_EXP 37
19602: IFFALSE 19642
// begin ComExit ( Kamil ) ;
19604: LD_EXP 37
19608: PPUSH
19609: CALL 66968 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19613: LD_EXP 37
19617: PPUSH
19618: LD_INT 212
19620: PPUSH
19621: LD_INT 86
19623: PPUSH
19624: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19628: LD_EXP 37
19632: PPUSH
19633: LD_EXP 33
19637: PPUSH
19638: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19642: LD_INT 70
19644: PPUSH
19645: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19649: LD_EXP 33
19653: PPUSH
19654: LD_STRING DH-Mem-20
19656: PPUSH
19657: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19661: LD_EXP 42
19665: PPUSH
19666: LD_INT 215
19668: PPUSH
19669: LD_INT 87
19671: PPUSH
19672: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19676: LD_EXP 42
19680: PPUSH
19681: LD_EXP 38
19685: PPUSH
19686: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19690: LD_EXP 38
19694: PPUSH
19695: LD_STRING DK-Mem-21
19697: PPUSH
19698: CALL_OW 88
// wait ( 0 0$2 ) ;
19702: LD_INT 70
19704: PPUSH
19705: CALL_OW 67
// end ;
19709: LD_VAR 0 1
19713: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19714: LD_INT 0
19716: PPUSH
19717: PPUSH
// if Markov then
19718: LD_EXP 40
19722: IFFALSE 19840
// begin p := 0 ;
19724: LD_ADDR_VAR 0 2
19728: PUSH
19729: LD_INT 0
19731: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19732: LD_EXP 40
19736: PPUSH
19737: CALL_OW 310
19741: IFFALSE 19752
// ComExit ( Markov ) ;
19743: LD_EXP 40
19747: PPUSH
19748: CALL 66968 0 1
// wait ( 0 0$1 ) ;
19752: LD_INT 35
19754: PPUSH
19755: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
19759: LD_EXP 40
19763: PPUSH
19764: LD_INT 212
19766: PPUSH
19767: LD_INT 88
19769: PPUSH
19770: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19774: LD_INT 35
19776: PPUSH
19777: CALL_OW 67
// p := Inc ( p ) ;
19781: LD_ADDR_VAR 0 2
19785: PUSH
19786: LD_VAR 0 2
19790: PPUSH
19791: CALL 67931 0 1
19795: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
19796: LD_EXP 40
19800: PPUSH
19801: LD_EXP 33
19805: PPUSH
19806: CALL_OW 296
19810: PUSH
19811: LD_INT 6
19813: LESS
19814: PUSH
19815: LD_VAR 0 2
19819: PUSH
19820: LD_INT 12
19822: GREATER
19823: OR
19824: IFFALSE 19774
// AddComTurnUnit ( Markov , Heike ) ;
19826: LD_EXP 40
19830: PPUSH
19831: LD_EXP 33
19835: PPUSH
19836: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
19840: LD_EXP 34
19844: PPUSH
19845: LD_STRING DG-Obj-1
19847: PPUSH
19848: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
19852: LD_EXP 37
19856: PPUSH
19857: LD_STRING DKam-Obj-2
19859: PPUSH
19860: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
19864: LD_EXP 33
19868: PPUSH
19869: LD_EXP 37
19873: PPUSH
19874: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
19878: LD_EXP 37
19882: PPUSH
19883: LD_STRING DKam-Obj-3
19885: PPUSH
19886: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
19890: LD_EXP 40
19894: PPUSH
19895: LD_STRING DMar-Obj-4
19897: PPUSH
19898: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
19902: LD_EXP 37
19906: PPUSH
19907: LD_STRING DKam-Obj-6
19909: PPUSH
19910: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
19914: LD_EXP 37
19918: PPUSH
19919: LD_STRING DKam-Obj-7
19921: PPUSH
19922: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
19926: LD_EXP 37
19930: PPUSH
19931: LD_STRING DKam-Obj-8
19933: PPUSH
19934: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
19938: LD_EXP 33
19942: PPUSH
19943: LD_STRING DH-Obj-9
19945: PPUSH
19946: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
19950: LD_EXP 37
19954: PPUSH
19955: LD_STRING DKam-Obj-10
19957: PPUSH
19958: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
19962: LD_EXP 37
19966: PPUSH
19967: LD_STRING DKam-Obj-11
19969: PPUSH
19970: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
19974: LD_EXP 40
19978: PPUSH
19979: LD_STRING DMar-Obj-12
19981: PPUSH
19982: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
19986: LD_EXP 40
19990: PPUSH
19991: LD_STRING DMar-Obj-13
19993: PPUSH
19994: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
19998: LD_EXP 40
20002: PPUSH
20003: LD_STRING DMar-Obj-14
20005: PPUSH
20006: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20010: LD_EXP 42
20014: PPUSH
20015: LD_STRING DO-Obj-15
20017: PPUSH
20018: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20022: LD_EXP 42
20026: PPUSH
20027: LD_STRING DO-Obj-16
20029: PPUSH
20030: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20034: LD_EXP 33
20038: PPUSH
20039: LD_STRING DH-Obj-17
20041: PPUSH
20042: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20046: LD_EXP 42
20050: PPUSH
20051: LD_STRING DO-Obj-18
20053: PPUSH
20054: CALL_OW 88
// end ;
20058: LD_VAR 0 1
20062: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20063: LD_INT 34
20065: PUSH
20066: LD_INT 92
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PPUSH
20073: CALL_OW 69
20077: IFFALSE 20272
20079: GO 20081
20081: DISABLE
20082: LD_INT 0
20084: PPUSH
// begin wait ( 0 0$2 ) ;
20085: LD_INT 70
20087: PPUSH
20088: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20092: LD_INT 34
20094: PUSH
20095: LD_INT 92
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PPUSH
20102: CALL_OW 69
20106: PPUSH
20107: CALL_OW 87
// DialogueOn ;
20111: CALL_OW 6
// if Markov then
20115: LD_EXP 40
20119: IFFALSE 20147
// begin Say ( Markov , DMar-Grn-1 ) ;
20121: LD_EXP 40
20125: PPUSH
20126: LD_STRING DMar-Grn-1
20128: PPUSH
20129: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20133: LD_EXP 33
20137: PPUSH
20138: LD_STRING DH-Grn-2
20140: PPUSH
20141: CALL_OW 88
// end else
20145: GO 20246
// if heikeSecondSquad then
20147: LD_EXP 48
20151: IFFALSE 20246
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20153: LD_ADDR_VAR 0 1
20157: PUSH
20158: LD_EXP 48
20162: PUSH
20163: LD_INT 1
20165: PPUSH
20166: LD_EXP 48
20170: PPUSH
20171: CALL_OW 12
20175: ARRAY
20176: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20177: LD_VAR 0 1
20181: PPUSH
20182: CALL_OW 258
20186: PUSH
20187: LD_INT 1
20189: DOUBLE
20190: EQUAL
20191: IFTRUE 20195
20193: GO 20210
20195: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20196: LD_VAR 0 1
20200: PPUSH
20201: LD_STRING DArm-Grn-1
20203: PPUSH
20204: CALL_OW 88
20208: GO 20234
20210: LD_INT 2
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20233
20218: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20219: LD_VAR 0 1
20223: PPUSH
20224: LD_STRING DArf-Grn-1
20226: PPUSH
20227: CALL_OW 88
20231: GO 20234
20233: POP
// Say ( Heike , DH-Grn-2 ) ;
20234: LD_EXP 33
20238: PPUSH
20239: LD_STRING DH-Grn-2
20241: PPUSH
20242: CALL_OW 88
// end ; DialogueOff ;
20246: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20250: LD_STRING MortarConstructed
20252: PPUSH
20253: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20257: LD_STRING SelfPropelledMortar
20259: PPUSH
20260: CALL_OW 339
// mortarConstructed := true ;
20264: LD_ADDR_EXP 15
20268: PUSH
20269: LD_INT 1
20271: ST_TO_ADDR
// end ;
20272: PPOPN 1
20274: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20275: LD_INT 2
20277: PPUSH
20278: LD_INT 8
20280: PPUSH
20281: CALL_OW 294
20285: IFFALSE 20428
20287: GO 20289
20289: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20290: LD_INT 200
20292: PPUSH
20293: LD_INT 162
20295: PPUSH
20296: LD_INT 2
20298: PPUSH
20299: LD_INT 6
20301: NEG
20302: PPUSH
20303: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20307: LD_INT 200
20309: PPUSH
20310: LD_INT 162
20312: PPUSH
20313: LD_INT 2
20315: PPUSH
20316: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20320: LD_INT 200
20322: PPUSH
20323: LD_INT 162
20325: PPUSH
20326: CALL_OW 84
// if not IsOk ( Kurt ) then
20330: LD_EXP 44
20334: PPUSH
20335: CALL_OW 302
20339: NOT
20340: IFFALSE 20344
// exit ;
20342: GO 20428
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20344: LD_EXP 44
20348: PPUSH
20349: LD_STRING DKs-Otpst-2-1
20351: PPUSH
20352: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20356: LD_EXP 38
20360: PPUSH
20361: LD_STRING DK-Otpst-2-2
20363: PPUSH
20364: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20368: LD_EXP 44
20372: PPUSH
20373: LD_STRING DKs-Otpst-2-3
20375: PPUSH
20376: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20380: LD_EXP 44
20384: PPUSH
20385: LD_STRING DKs-Otpst-2-4
20387: PPUSH
20388: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20392: LD_EXP 44
20396: PPUSH
20397: LD_STRING DKs-Otpst-2-5
20399: PPUSH
20400: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20404: LD_EXP 37
20408: PPUSH
20409: LD_STRING DKam-Otpst-2-6
20411: PPUSH
20412: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20416: LD_EXP 44
20420: PPUSH
20421: LD_STRING DKs-Otpst-2-7
20423: PPUSH
20424: CALL_OW 88
// end ;
20428: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20429: LD_INT 8
20431: PPUSH
20432: LD_INT 22
20434: PUSH
20435: LD_INT 3
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 21
20444: PUSH
20445: LD_INT 3
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 70
20460: NOT
20461: PUSH
20462: LD_EXP 3
20466: NOT
20467: AND
20468: IFFALSE 20716
20470: GO 20472
20472: DISABLE
20473: LD_INT 0
20475: PPUSH
// begin outpostDestroyed := true ;
20476: LD_ADDR_EXP 4
20480: PUSH
20481: LD_INT 1
20483: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20484: LD_INT 22
20486: PUSH
20487: LD_INT 2
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 34
20496: PUSH
20497: LD_INT 92
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 92
20506: PUSH
20507: LD_INT 195
20509: PUSH
20510: LD_INT 164
20512: PUSH
20513: LD_INT 12
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: LIST
20526: PPUSH
20527: CALL_OW 69
20531: NOT
20532: IFFALSE 20536
// exit ;
20534: GO 20716
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20536: LD_EXP 34
20540: PPUSH
20541: CALL_OW 302
20545: NOT
20546: PUSH
20547: LD_EXP 38
20551: PPUSH
20552: CALL_OW 302
20556: NOT
20557: OR
20558: IFFALSE 20562
// exit ;
20560: GO 20716
// Say ( Givi , DG-Otpst-1-1 ) ;
20562: LD_EXP 34
20566: PPUSH
20567: LD_STRING DG-Otpst-1-1
20569: PPUSH
20570: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20574: LD_EXP 38
20578: PPUSH
20579: LD_STRING DK-Otpst-1-2
20581: PPUSH
20582: CALL_OW 88
// if IsOk ( Markov ) then
20586: LD_EXP 40
20590: PPUSH
20591: CALL_OW 302
20595: IFFALSE 20623
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20597: LD_EXP 40
20601: PPUSH
20602: LD_STRING DMar-Otpst-1-3
20604: PPUSH
20605: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20609: LD_EXP 40
20613: PPUSH
20614: LD_STRING DMar-Otpst-1-4
20616: PPUSH
20617: CALL_OW 88
// end else
20621: GO 20704
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20623: LD_ADDR_VAR 0 1
20627: PUSH
20628: LD_EXP 48
20632: PUSH
20633: LD_INT 1
20635: PPUSH
20636: LD_EXP 48
20640: PPUSH
20641: CALL_OW 12
20645: ARRAY
20646: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20647: LD_VAR 0 1
20651: PPUSH
20652: CALL_OW 258
20656: PUSH
20657: LD_INT 1
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20680
20665: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20666: LD_VAR 0 1
20670: PPUSH
20671: LD_STRING DArm-Otpst-1-a-3
20673: PPUSH
20674: CALL_OW 88
20678: GO 20704
20680: LD_INT 2
20682: DOUBLE
20683: EQUAL
20684: IFTRUE 20688
20686: GO 20703
20688: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20689: LD_VAR 0 1
20693: PPUSH
20694: LD_STRING DArf-Otpst-1-a-3
20696: PPUSH
20697: CALL_OW 88
20701: GO 20704
20703: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20704: LD_EXP 34
20708: PPUSH
20709: LD_STRING DG-Otpst-1-5
20711: PPUSH
20712: CALL_OW 88
// end ;
20716: PPOPN 1
20718: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20719: LD_EXP 38
20723: PPUSH
20724: CALL_OW 256
20728: PUSH
20729: LD_INT 10
20731: LESS
20732: IFFALSE 20846
20734: GO 20736
20736: DISABLE
// begin DialogueOn ;
20737: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20741: LD_EXP 38
20745: PPUSH
20746: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20750: LD_EXP 38
20754: PPUSH
20755: LD_STRING DK-Dead-1
20757: PPUSH
20758: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
20762: LD_EXP 33
20766: PPUSH
20767: LD_STRING DH-Dead-2
20769: PPUSH
20770: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
20774: LD_EXP 38
20778: PPUSH
20779: LD_STRING DK-Dead-3
20781: PPUSH
20782: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
20786: LD_EXP 33
20790: PPUSH
20791: LD_STRING DH-Dead-4
20793: PPUSH
20794: CALL_OW 88
// if IsOk ( Mike ) then
20798: LD_EXP 35
20802: PPUSH
20803: CALL_OW 302
20807: IFFALSE 20833
// begin Say ( Mike , DM-Dead-5 ) ;
20809: LD_EXP 35
20813: PPUSH
20814: LD_STRING DM-Dead-5
20816: PPUSH
20817: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
20821: LD_EXP 33
20825: PPUSH
20826: LD_STRING DH-Dead-6
20828: PPUSH
20829: CALL_OW 88
// end ; DialogueOff ;
20833: CALL_OW 7
// KillUnit ( Kaia ) ;
20837: LD_EXP 38
20841: PPUSH
20842: CALL_OW 66
// end ;
20846: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
20847: LD_OWVAR 1
20851: PUSH
20852: LD_INT 31500
20854: GREATEREQUAL
20855: PUSH
20856: LD_EXP 5
20860: PUSH
20861: LD_INT 5
20863: GREATER
20864: OR
20865: PUSH
20866: LD_INT 22
20868: PUSH
20869: LD_INT 2
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 92
20878: PUSH
20879: LD_INT 103
20881: PUSH
20882: LD_INT 81
20884: PUSH
20885: LD_INT 20
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PPUSH
20898: CALL_OW 69
20902: OR
20903: IFFALSE 21343
20905: GO 20907
20907: DISABLE
20908: LD_INT 0
20910: PPUSH
20911: PPUSH
20912: PPUSH
// begin PrepareRolfSquad ;
20913: CALL 3318 0 0
// dep := HexInfo ( 86 , 54 ) ;
20917: LD_ADDR_VAR 0 3
20921: PUSH
20922: LD_INT 86
20924: PPUSH
20925: LD_INT 54
20927: PPUSH
20928: CALL_OW 428
20932: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
20933: LD_VAR 0 3
20937: PPUSH
20938: CALL_OW 274
20942: PPUSH
20943: LD_INT 1
20945: PPUSH
20946: LD_INT 300
20948: PPUSH
20949: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
20953: LD_VAR 0 3
20957: PPUSH
20958: CALL_OW 274
20962: PPUSH
20963: LD_INT 2
20965: PPUSH
20966: LD_INT 300
20968: PPUSH
20969: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
20973: LD_EXP 50
20977: PPUSH
20978: LD_INT 79
20980: PPUSH
20981: LD_INT 52
20983: PPUSH
20984: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
20988: LD_INT 35
20990: PPUSH
20991: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
20995: LD_EXP 50
20999: PPUSH
21000: LD_INT 3
21002: PUSH
21003: LD_INT 60
21005: PUSH
21006: EMPTY
21007: LIST
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PPUSH
21013: CALL_OW 72
21017: PPUSH
21018: LD_INT 79
21020: PPUSH
21021: LD_INT 52
21023: PPUSH
21024: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21028: LD_INT 12
21030: PPUSH
21031: LD_INT 22
21033: PUSH
21034: LD_INT 3
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 21
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PPUSH
21055: CALL_OW 70
21059: NOT
21060: IFFALSE 20988
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21062: LD_ADDR_VAR 0 2
21066: PUSH
21067: LD_INT 12
21069: PPUSH
21070: LD_INT 21
21072: PUSH
21073: LD_INT 3
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PPUSH
21080: CALL_OW 70
21084: ST_TO_ADDR
// for i in tmp do
21085: LD_ADDR_VAR 0 1
21089: PUSH
21090: LD_VAR 0 2
21094: PUSH
21095: FOR_IN
21096: IFFALSE 21112
// SetSide ( i , 8 ) ;
21098: LD_VAR 0 1
21102: PPUSH
21103: LD_INT 8
21105: PPUSH
21106: CALL_OW 235
21110: GO 21095
21112: POP
21113: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21114: LD_INT 63
21116: PPUSH
21117: LD_INT 42
21119: PPUSH
21120: CALL_OW 428
21124: PPUSH
21125: LD_INT 320
21127: PPUSH
21128: CALL_OW 234
// wait ( 0 0$10 ) ;
21132: LD_INT 350
21134: PPUSH
21135: CALL_OW 67
// DialogueOn ;
21139: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21143: LD_INT 8
21145: PPUSH
21146: LD_INT 2
21148: PPUSH
21149: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21153: LD_INT 86
21155: PPUSH
21156: LD_INT 54
21158: PPUSH
21159: CALL_OW 428
21163: PPUSH
21164: LD_STRING antwerp
21166: PPUSH
21167: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21171: LD_EXP 46
21175: PPUSH
21176: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21180: LD_EXP 46
21184: PPUSH
21185: LD_STRING DRf-rast-1
21187: PPUSH
21188: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21192: LD_EXP 33
21196: PPUSH
21197: LD_STRING DH-rast-2
21199: PPUSH
21200: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21204: LD_EXP 46
21208: PPUSH
21209: LD_STRING DRf-rast-3
21211: PPUSH
21212: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21216: LD_EXP 46
21220: PPUSH
21221: LD_STRING DRf-rast-4
21223: PPUSH
21224: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21228: LD_EXP 46
21232: PPUSH
21233: LD_STRING DRf-rast-5
21235: PPUSH
21236: CALL_OW 94
// if IsOk ( Aviradze ) then
21240: LD_EXP 45
21244: PPUSH
21245: CALL_OW 302
21249: IFFALSE 21308
// begin CenterNowOnUnits ( Aviradze ) ;
21251: LD_EXP 45
21255: PPUSH
21256: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21260: LD_EXP 45
21264: PPUSH
21265: LD_STRING DA-rast-6
21267: PPUSH
21268: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21272: LD_EXP 33
21276: PPUSH
21277: LD_STRING DH-rast-7
21279: PPUSH
21280: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21284: LD_EXP 34
21288: PPUSH
21289: LD_STRING DG-rast-8
21291: PPUSH
21292: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21296: LD_EXP 34
21300: PPUSH
21301: LD_STRING DG-rast-9
21303: PPUSH
21304: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21308: LD_EXP 33
21312: PPUSH
21313: LD_STRING DH-rast-10
21315: PPUSH
21316: CALL_OW 88
// DialogueOff ;
21320: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21324: LD_STRING M2
21326: PPUSH
21327: CALL_OW 337
// bergkampfArrived := true ;
21331: LD_ADDR_EXP 3
21335: PUSH
21336: LD_INT 1
21338: ST_TO_ADDR
// PrepareRolfBase ;
21339: CALL 3649 0 0
// end ;
21343: PPOPN 3
21345: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21346: LD_INT 12
21348: PPUSH
21349: LD_INT 22
21351: PUSH
21352: LD_INT 2
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PPUSH
21359: CALL_OW 70
21363: PUSH
21364: LD_EXP 46
21368: PPUSH
21369: CALL_OW 302
21373: AND
21374: PUSH
21375: LD_EXP 29
21379: AND
21380: IFFALSE 21940
21382: GO 21384
21384: DISABLE
21385: LD_INT 0
21387: PPUSH
// begin rolfScriptBase := false ;
21388: LD_ADDR_EXP 9
21392: PUSH
21393: LD_INT 0
21395: ST_TO_ADDR
// DialogueOn ;
21396: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21400: LD_EXP 46
21404: PPUSH
21405: CALL_OW 87
// if rolfSquad >= 10 then
21409: LD_EXP 50
21413: PUSH
21414: LD_INT 10
21416: GREATEREQUAL
21417: IFFALSE 21596
// begin linkedWithRolf := 2 ;
21419: LD_ADDR_EXP 12
21423: PUSH
21424: LD_INT 2
21426: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21427: LD_EXP 46
21431: PPUSH
21432: LD_STRING DRf-rast-11
21434: PPUSH
21435: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21439: LD_EXP 33
21443: PPUSH
21444: LD_STRING DH-rast-12
21446: PPUSH
21447: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21451: LD_EXP 46
21455: PPUSH
21456: LD_STRING DRf-rast-13
21458: PPUSH
21459: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21463: LD_EXP 33
21467: PPUSH
21468: LD_STRING DH-rast-14
21470: PPUSH
21471: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21475: LD_EXP 46
21479: PPUSH
21480: LD_STRING DRf-rast-15
21482: PPUSH
21483: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21487: LD_EXP 33
21491: PPUSH
21492: LD_STRING DH-rast-16
21494: PPUSH
21495: CALL_OW 88
// if IsOk ( Mike ) then
21499: LD_EXP 35
21503: PPUSH
21504: CALL_OW 302
21508: IFFALSE 21582
// begin Say ( Mike , DM-rast-17 ) ;
21510: LD_EXP 35
21514: PPUSH
21515: LD_STRING DM-rast-17
21517: PPUSH
21518: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21522: LD_EXP 33
21526: PPUSH
21527: LD_STRING DH-rast-18
21529: PPUSH
21530: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21534: LD_EXP 35
21538: PPUSH
21539: LD_STRING DM-rast-19
21541: PPUSH
21542: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21546: LD_EXP 33
21550: PPUSH
21551: LD_STRING DH-rast-20
21553: PPUSH
21554: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21558: LD_EXP 35
21562: PPUSH
21563: LD_STRING DM-rast-21
21565: PPUSH
21566: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21570: LD_EXP 33
21574: PPUSH
21575: LD_STRING DH-rast-22
21577: PPUSH
21578: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21582: LD_EXP 33
21586: PPUSH
21587: LD_STRING DH-rast-23
21589: PPUSH
21590: CALL_OW 88
// end else
21594: GO 21746
// begin linkedWithRolf := 1 ;
21596: LD_ADDR_EXP 12
21600: PUSH
21601: LD_INT 1
21603: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21604: LD_EXP 46
21608: PPUSH
21609: LD_STRING DRf-rast-a-11
21611: PPUSH
21612: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21616: LD_EXP 33
21620: PPUSH
21621: LD_STRING DH-rast-a-12
21623: PPUSH
21624: CALL_OW 88
// if IsOk ( Kurt ) then
21628: LD_EXP 44
21632: PPUSH
21633: CALL_OW 302
21637: IFFALSE 21734
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21639: LD_EXP 44
21643: PPUSH
21644: LD_STRING DKs-rast-a-13
21646: PPUSH
21647: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21651: LD_EXP 46
21655: PPUSH
21656: LD_STRING DRf-rast-a-14
21658: PPUSH
21659: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21663: LD_EXP 46
21667: PPUSH
21668: LD_STRING DRf-rast-a-15
21670: PPUSH
21671: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21675: LD_EXP 44
21679: PPUSH
21680: LD_STRING DKs-rast-a-16
21682: PPUSH
21683: CALL_OW 88
// if IsOk ( Givi ) then
21687: LD_EXP 34
21691: PPUSH
21692: CALL_OW 302
21696: IFFALSE 21734
// begin Say ( Givi , DG-rast-a-17 ) ;
21698: LD_EXP 34
21702: PPUSH
21703: LD_STRING DG-rast-a-17
21705: PPUSH
21706: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21710: LD_EXP 34
21714: PPUSH
21715: LD_STRING DG-rast-a-18
21717: PPUSH
21718: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21722: LD_EXP 44
21726: PPUSH
21727: LD_STRING DKs-rast-a-19
21729: PPUSH
21730: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21734: LD_EXP 33
21738: PPUSH
21739: LD_STRING DH-rast-a-20
21741: PPUSH
21742: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21746: LD_EXP 46
21750: PPUSH
21751: LD_STRING DRf-rast-24
21753: PPUSH
21754: CALL_OW 88
// if IsOk ( Aviradze ) then
21758: LD_EXP 45
21762: PPUSH
21763: CALL_OW 302
21767: IFFALSE 21867
// begin Say ( Aviradze , DA-rast-25 ) ;
21769: LD_EXP 45
21773: PPUSH
21774: LD_STRING DA-rast-25
21776: PPUSH
21777: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
21781: LD_EXP 33
21785: PPUSH
21786: LD_STRING DH-rast-26
21788: PPUSH
21789: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
21793: LD_EXP 45
21797: PPUSH
21798: LD_STRING DA-rast-27
21800: PPUSH
21801: CALL_OW 88
// if IsOk ( Markov ) then
21805: LD_EXP 40
21809: PPUSH
21810: CALL_OW 302
21814: IFFALSE 21842
// begin Say ( Markov , DMar-rast-28 ) ;
21816: LD_EXP 40
21820: PPUSH
21821: LD_STRING DMar-rast-28
21823: PPUSH
21824: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
21828: LD_EXP 40
21832: PPUSH
21833: LD_STRING DMar-rast-29
21835: PPUSH
21836: CALL_OW 88
// end else
21840: GO 21865
// if IsOk ( Sophia ) then
21842: LD_EXP 39
21846: PPUSH
21847: CALL_OW 302
21851: IFFALSE 21865
// begin Say ( Sophia , DS-rast-28 ) ;
21853: LD_EXP 39
21857: PPUSH
21858: LD_STRING DS-rast-28
21860: PPUSH
21861: CALL_OW 88
// end ; end else
21865: GO 21890
// if IsOk ( Sophia ) then
21867: LD_EXP 39
21871: PPUSH
21872: CALL_OW 302
21876: IFFALSE 21890
// Say ( Sophia , DS-rast-29 ) ;
21878: LD_EXP 39
21882: PPUSH
21883: LD_STRING DS-rast-29
21885: PPUSH
21886: CALL_OW 88
// DialogueOff ;
21890: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
21894: LD_STRING M3
21896: PPUSH
21897: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
21901: LD_ADDR_VAR 0 1
21905: PUSH
21906: LD_INT 22
21908: PUSH
21909: LD_INT 8
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PPUSH
21916: CALL_OW 69
21920: PUSH
21921: FOR_IN
21922: IFFALSE 21938
// SetSide ( i , 2 ) ;
21924: LD_VAR 0 1
21928: PPUSH
21929: LD_INT 2
21931: PPUSH
21932: CALL_OW 235
21936: GO 21921
21938: POP
21939: POP
// end ;
21940: PPOPN 1
21942: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
21943: LD_EXP 23
21947: PUSH
21948: LD_EXP 12
21952: NOT
21953: AND
21954: PUSH
21955: LD_EXP 29
21959: AND
21960: IFFALSE 22051
21962: GO 21964
21964: DISABLE
21965: LD_INT 0
21967: PPUSH
// begin canRolfJoin := false ;
21968: LD_ADDR_EXP 29
21972: PUSH
21973: LD_INT 0
21975: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
21976: LD_STRING M3
21978: PPUSH
21979: CALL_OW 337
// for i in rolfSquad do
21983: LD_ADDR_VAR 0 1
21987: PUSH
21988: LD_EXP 50
21992: PUSH
21993: FOR_IN
21994: IFFALSE 22049
// begin ComExit ( i ) ;
21996: LD_VAR 0 1
22000: PPUSH
22001: CALL 66968 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22005: LD_VAR 0 1
22009: PPUSH
22010: LD_INT 147
22012: PPUSH
22013: LD_INT 162
22015: PPUSH
22016: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22020: LD_VAR 0 1
22024: PPUSH
22025: LD_INT 1050
22027: PPUSH
22028: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22032: LD_VAR 0 1
22036: PPUSH
22037: LD_INT 103
22039: PPUSH
22040: LD_INT 162
22042: PPUSH
22043: CALL_OW 174
// end ;
22047: GO 21993
22049: POP
22050: POP
// end ;
22051: PPOPN 1
22053: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22054: LD_EXP 3
22058: PUSH
22059: LD_EXP 46
22063: PPUSH
22064: CALL_OW 256
22068: PUSH
22069: LD_INT 400
22071: LESS
22072: AND
22073: PUSH
22074: LD_EXP 12
22078: NOT
22079: AND
22080: PUSH
22081: LD_EXP 29
22085: AND
22086: IFFALSE 22360
22088: GO 22090
22090: DISABLE
22091: LD_INT 0
22093: PPUSH
// begin DialogueOn ;
22094: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22098: LD_EXP 46
22102: PPUSH
22103: LD_STRING DRf-rast-f-11
22105: PPUSH
22106: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22110: LD_EXP 46
22114: PPUSH
22115: LD_STRING DRf-rast-f-12
22117: PPUSH
22118: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22122: LD_EXP 46
22126: PPUSH
22127: LD_STRING DRf-rast-f-13
22129: PPUSH
22130: CALL_OW 94
// DialogueOff ;
22134: CALL_OW 7
// KillUnit ( Rolf ) ;
22138: LD_EXP 46
22142: PPUSH
22143: CALL_OW 66
// wait ( 0 0$1 ) ;
22147: LD_INT 35
22149: PPUSH
22150: CALL_OW 67
// if not IsOk ( Givi ) then
22154: LD_EXP 34
22158: PPUSH
22159: CALL_OW 302
22163: NOT
22164: IFFALSE 22168
// exit ;
22166: GO 22360
// DialogueOn ;
22168: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22172: LD_EXP 34
22176: PPUSH
22177: LD_STRING DG-rast-f-14
22179: PPUSH
22180: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22184: LD_EXP 34
22188: PPUSH
22189: LD_STRING DG-rast-f-15
22191: PPUSH
22192: CALL_OW 88
// if IsOk ( Kaia ) then
22196: LD_EXP 38
22200: PPUSH
22201: CALL_OW 302
22205: IFFALSE 22221
// Say ( Kaia , DK-rast-f-16 ) else
22207: LD_EXP 38
22211: PPUSH
22212: LD_STRING DK-rast-f-16
22214: PPUSH
22215: CALL_OW 88
22219: GO 22308
// if heikeSecondSquad then
22221: LD_EXP 48
22225: IFFALSE 22308
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22227: LD_ADDR_VAR 0 1
22231: PUSH
22232: LD_EXP 48
22236: PUSH
22237: LD_INT 1
22239: PPUSH
22240: LD_EXP 48
22244: PPUSH
22245: CALL_OW 12
22249: ARRAY
22250: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22251: LD_VAR 0 1
22255: PPUSH
22256: CALL_OW 258
22260: PUSH
22261: LD_INT 1
22263: DOUBLE
22264: EQUAL
22265: IFTRUE 22269
22267: GO 22284
22269: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22270: LD_VAR 0 1
22274: PPUSH
22275: LD_STRING DArm-rast-f-a-16
22277: PPUSH
22278: CALL_OW 88
22282: GO 22308
22284: LD_INT 2
22286: DOUBLE
22287: EQUAL
22288: IFTRUE 22292
22290: GO 22307
22292: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22293: LD_VAR 0 1
22297: PPUSH
22298: LD_STRING DArf-rast-f-a-16
22300: PPUSH
22301: CALL_OW 88
22305: GO 22308
22307: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22308: LD_EXP 34
22312: PPUSH
22313: LD_STRING DG-rast-f-17
22315: PPUSH
22316: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22320: LD_EXP 34
22324: PPUSH
22325: LD_STRING DG-rast-f-18
22327: PPUSH
22328: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22332: LD_EXP 34
22336: PPUSH
22337: LD_STRING DG-rast-f-19
22339: PPUSH
22340: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22344: LD_EXP 34
22348: PPUSH
22349: LD_STRING DG-rast-f-20
22351: PPUSH
22352: CALL_OW 88
// DialogueOff ;
22356: CALL_OW 7
// end ;
22360: PPOPN 1
22362: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22363: LD_EXP 31
22367: PUSH
22368: LD_INT 2
22370: PPUSH
22371: LD_INT 10
22373: PPUSH
22374: CALL_OW 294
22378: AND
22379: IFFALSE 22452
22381: GO 22383
22383: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22384: LD_EXP 34
22388: PPUSH
22389: LD_STRING DG-Len-1
22391: PPUSH
22392: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22396: LD_EXP 44
22400: PPUSH
22401: LD_STRING DKs-Len-2
22403: PPUSH
22404: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22408: LD_EXP 44
22412: PPUSH
22413: LD_STRING DKs-Len-3
22415: PPUSH
22416: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22420: LD_EXP 33
22424: PPUSH
22425: LD_STRING DH-Len-4
22427: PPUSH
22428: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22432: LD_EXP 38
22436: PPUSH
22437: LD_STRING DK-Len-5
22439: PPUSH
22440: CALL_OW 88
// leninSpotted := true ;
22444: LD_ADDR_EXP 14
22448: PUSH
22449: LD_INT 1
22451: ST_TO_ADDR
// end ;
22452: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22453: LD_EXP 1
22457: PUSH
22458: LD_EXP 3
22462: PUSH
22463: LD_OWVAR 1
22467: PUSH
22468: LD_INT 67200
22470: PUSH
22471: LD_INT 63000
22473: PUSH
22474: LD_INT 58800
22476: PUSH
22477: LD_INT 54600
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: PUSH
22486: LD_OWVAR 67
22490: ARRAY
22491: GREATER
22492: AND
22493: OR
22494: IFFALSE 23231
22496: GO 22498
22498: DISABLE
22499: LD_INT 0
22501: PPUSH
22502: PPUSH
22503: PPUSH
22504: PPUSH
// begin PrepareOmarSquad ;
22505: CALL 4931 0 0
// repeat wait ( 0 0$1 ) ;
22509: LD_INT 35
22511: PPUSH
22512: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22516: LD_INT 14
22518: PPUSH
22519: LD_INT 22
22521: PUSH
22522: LD_INT 3
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 21
22534: PUSH
22535: LD_INT 1
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 59
22544: PUSH
22545: EMPTY
22546: LIST
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PPUSH
22557: CALL_OW 70
22561: NOT
22562: IFFALSE 22509
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22564: LD_ADDR_VAR 0 2
22568: PUSH
22569: LD_INT 14
22571: PPUSH
22572: LD_INT 22
22574: PUSH
22575: LD_INT 2
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PPUSH
22582: CALL_OW 70
22586: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22587: LD_ADDR_VAR 0 3
22591: PUSH
22592: LD_VAR 0 2
22596: PUSH
22597: LD_INT 0
22599: GREATER
22600: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22601: LD_ADDR_VAR 0 4
22605: PUSH
22606: LD_EXP 33
22610: PPUSH
22611: LD_INT 14
22613: PPUSH
22614: CALL_OW 308
22618: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22619: LD_VAR 0 2
22623: PPUSH
22624: LD_INT 21
22626: PUSH
22627: LD_INT 3
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PPUSH
22634: CALL_OW 72
22638: IFFALSE 22743
// begin if heikeNearbyOmar then
22640: LD_VAR 0 4
22644: IFFALSE 22660
// Say ( Omar , DOm-Base-1b ) else
22646: LD_EXP 43
22650: PPUSH
22651: LD_STRING DOm-Base-1b
22653: PPUSH
22654: CALL_OW 88
22658: GO 22672
// SayRadio ( Omar , DOm-Base-1br ) ;
22660: LD_EXP 43
22664: PPUSH
22665: LD_STRING DOm-Base-1br
22667: PPUSH
22668: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22672: LD_ADDR_VAR 0 1
22676: PUSH
22677: LD_VAR 0 2
22681: PPUSH
22682: LD_INT 21
22684: PUSH
22685: LD_INT 3
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PPUSH
22692: CALL_OW 72
22696: PUSH
22697: FOR_IN
22698: IFFALSE 22739
// begin if UnitsInside ( i ) then
22700: LD_VAR 0 1
22704: PPUSH
22705: CALL_OW 313
22709: IFFALSE 22725
// ComExitBuilding ( UnitsInside ( i ) ) ;
22711: LD_VAR 0 1
22715: PPUSH
22716: CALL_OW 313
22720: PPUSH
22721: CALL_OW 122
// SetSide ( i , 5 ) ;
22725: LD_VAR 0 1
22729: PPUSH
22730: LD_INT 5
22732: PPUSH
22733: CALL_OW 235
// end ;
22737: GO 22697
22739: POP
22740: POP
// end else
22741: GO 22836
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22743: LD_VAR 0 2
22747: PPUSH
22748: LD_INT 21
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PPUSH
22758: CALL_OW 72
22762: IFFALSE 22798
// begin if heikeNearbyOmar then
22764: LD_VAR 0 4
22768: IFFALSE 22784
// Say ( Omar , DOm-Base-1v ) else
22770: LD_EXP 43
22774: PPUSH
22775: LD_STRING DOm-Base-1v
22777: PPUSH
22778: CALL_OW 88
22782: GO 22796
// SayRadio ( Omar , DOm-Base-1vr ) end else
22784: LD_EXP 43
22788: PPUSH
22789: LD_STRING DOm-Base-1vr
22791: PPUSH
22792: CALL_OW 94
22796: GO 22836
// if inOmarBase then
22798: LD_VAR 0 3
22802: IFFALSE 22836
// begin if heikeNearbyOmar then
22804: LD_VAR 0 4
22808: IFFALSE 22824
// Say ( Omar , DOm-Base-1h ) else
22810: LD_EXP 43
22814: PPUSH
22815: LD_STRING DOm-Base-1h
22817: PPUSH
22818: CALL_OW 88
22822: GO 22836
// SayRadio ( Omar , DOm-Base-1hr ) end ;
22824: LD_EXP 43
22828: PPUSH
22829: LD_STRING DOm-Base-1hr
22831: PPUSH
22832: CALL_OW 94
// for i in omarSquad do
22836: LD_ADDR_VAR 0 1
22840: PUSH
22841: LD_EXP 51
22845: PUSH
22846: FOR_IN
22847: IFFALSE 22878
// if GetLives ( i ) < 750 then
22849: LD_VAR 0 1
22853: PPUSH
22854: CALL_OW 256
22858: PUSH
22859: LD_INT 750
22861: LESS
22862: IFFALSE 22876
// SetLives ( i , 1000 ) ;
22864: LD_VAR 0 1
22868: PPUSH
22869: LD_INT 1000
22871: PPUSH
22872: CALL_OW 234
22876: GO 22846
22878: POP
22879: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
22880: LD_ADDR_VAR 0 1
22884: PUSH
22885: LD_INT 14
22887: PPUSH
22888: LD_INT 21
22890: PUSH
22891: LD_INT 3
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PPUSH
22898: CALL_OW 70
22902: PUSH
22903: FOR_IN
22904: IFFALSE 22920
// SetSide ( i , 5 ) ;
22906: LD_VAR 0 1
22910: PPUSH
22911: LD_INT 5
22913: PPUSH
22914: CALL_OW 235
22918: GO 22903
22920: POP
22921: POP
// wait ( 0 0$3 ) ;
22922: LD_INT 105
22924: PPUSH
22925: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
22929: LD_INT 5
22931: PPUSH
22932: LD_INT 2
22934: PPUSH
22935: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
22939: LD_EXP 43
22943: PPUSH
22944: CALL_OW 87
// DialogueOn ;
22948: CALL_OW 6
// if heikeNearbyOmar then
22952: LD_VAR 0 4
22956: IFFALSE 23014
// begin Say ( Omar , DOm-Veh-1a ) ;
22958: LD_EXP 43
22962: PPUSH
22963: LD_STRING DOm-Veh-1a
22965: PPUSH
22966: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
22970: LD_EXP 43
22974: PPUSH
22975: LD_STRING DOm-Veh-2a
22977: PPUSH
22978: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
22982: LD_EXP 43
22986: PPUSH
22987: LD_STRING DOm-Veh-3a
22989: PPUSH
22990: CALL_OW 88
// if mortarConstructed then
22994: LD_EXP 15
22998: IFFALSE 23012
// Say ( Omar , DOm-Veh-4a ) ;
23000: LD_EXP 43
23004: PPUSH
23005: LD_STRING DOm-Veh-4a
23007: PPUSH
23008: CALL_OW 88
// end else
23012: GO 23068
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23014: LD_EXP 43
23018: PPUSH
23019: LD_STRING DOm-Veh-1
23021: PPUSH
23022: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23026: LD_EXP 43
23030: PPUSH
23031: LD_STRING DOm-Veh-2
23033: PPUSH
23034: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23038: LD_EXP 43
23042: PPUSH
23043: LD_STRING DOm-Veh-3
23045: PPUSH
23046: CALL_OW 94
// if mortarConstructed then
23050: LD_EXP 15
23054: IFFALSE 23068
// SayRadio ( Omar , DOm-Veh-4 ) ;
23056: LD_EXP 43
23060: PPUSH
23061: LD_STRING DOm-Veh-4
23063: PPUSH
23064: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23068: LD_EXP 33
23072: PPUSH
23073: LD_STRING DH-Veh-5
23075: PPUSH
23076: CALL_OW 88
// if IsOk ( Kurt ) then
23080: LD_EXP 44
23084: PPUSH
23085: CALL_OW 302
23089: IFFALSE 23139
// begin Say ( Kurt , DKs-Veh-6 ) ;
23091: LD_EXP 44
23095: PPUSH
23096: LD_STRING DKs-Veh-6
23098: PPUSH
23099: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23103: LD_EXP 44
23107: PPUSH
23108: LD_STRING DKs-Veh-7
23110: PPUSH
23111: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23115: LD_EXP 34
23119: PPUSH
23120: LD_STRING DG-Veh-8
23122: PPUSH
23123: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23127: LD_EXP 35
23131: PPUSH
23132: LD_STRING DM-Veh-9
23134: PPUSH
23135: CALL_OW 88
// end ; DialogueOff ;
23139: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23143: LD_STRING M4
23145: PPUSH
23146: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23150: LD_EXP 43
23154: PPUSH
23155: LD_INT 341
23157: PPUSH
23158: LD_INT 232
23160: PPUSH
23161: CALL_OW 428
23165: PPUSH
23166: CALL_OW 120
// omarArrived := true ;
23170: LD_ADDR_EXP 6
23174: PUSH
23175: LD_INT 1
23177: ST_TO_ADDR
// omarScriptBase := true ;
23178: LD_ADDR_EXP 10
23182: PUSH
23183: LD_INT 1
23185: ST_TO_ADDR
// omarWantVehicles := true ;
23186: LD_ADDR_EXP 18
23190: PUSH
23191: LD_INT 1
23193: ST_TO_ADDR
// if debug then
23194: LD_EXP 1
23198: IFFALSE 23231
// begin wait ( 0 0$25 ) ;
23200: LD_INT 875
23202: PPUSH
23203: CALL_OW 67
// omarScriptBase := false ;
23207: LD_ADDR_EXP 10
23211: PUSH
23212: LD_INT 0
23214: ST_TO_ADDR
// omarWantVehicles := false ;
23215: LD_ADDR_EXP 18
23219: PUSH
23220: LD_INT 0
23222: ST_TO_ADDR
// omarAttack := true ;
23223: LD_ADDR_EXP 23
23227: PUSH
23228: LD_INT 1
23230: ST_TO_ADDR
// end ; end ;
23231: PPOPN 4
23233: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23234: LD_INT 10
23236: PPUSH
23237: LD_INT 22
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PPUSH
23247: CALL_OW 70
23251: PUSH
23252: LD_EXP 6
23256: AND
23257: PUSH
23258: LD_EXP 43
23262: PPUSH
23263: CALL_OW 302
23267: AND
23268: PUSH
23269: LD_EXP 23
23273: NOT
23274: AND
23275: IFFALSE 23292
23277: GO 23279
23279: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23280: LD_EXP 43
23284: PPUSH
23285: LD_STRING DOm-Lenin
23287: PPUSH
23288: CALL_OW 94
23292: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23293: LD_EXP 46
23297: PPUSH
23298: CALL_OW 302
23302: PUSH
23303: LD_EXP 12
23307: AND
23308: PUSH
23309: LD_EXP 6
23313: AND
23314: IFFALSE 23418
23316: GO 23318
23318: DISABLE
// begin wait ( 1 1$00 ) ;
23319: LD_INT 2100
23321: PPUSH
23322: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23326: LD_EXP 46
23330: PPUSH
23331: CALL_OW 87
// DialogueOn ;
23335: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23339: LD_EXP 46
23343: PPUSH
23344: LD_STRING DRf-Veh-10
23346: PPUSH
23347: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23351: LD_EXP 46
23355: PPUSH
23356: LD_STRING DRf-Veh-11
23358: PPUSH
23359: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23363: LD_EXP 33
23367: PPUSH
23368: LD_STRING DH-Veh-12
23370: PPUSH
23371: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23375: LD_EXP 33
23379: PPUSH
23380: LD_STRING DH-Veh-13
23382: PPUSH
23383: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23387: LD_EXP 46
23391: PPUSH
23392: LD_STRING DRf-Veh-14
23394: PPUSH
23395: CALL_OW 88
// DialogueOff ;
23399: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23403: LD_STRING M5
23405: PPUSH
23406: CALL_OW 337
// rolfWantVehicles := true ;
23410: LD_ADDR_EXP 17
23414: PUSH
23415: LD_INT 1
23417: ST_TO_ADDR
// end ;
23418: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23419: LD_EXP 18
23423: IFFALSE 24186
23425: GO 23427
23427: DISABLE
23428: LD_INT 0
23430: PPUSH
23431: PPUSH
23432: PPUSH
23433: PPUSH
23434: PPUSH
23435: PPUSH
// begin wait ( 0 0$3 ) ;
23436: LD_INT 105
23438: PPUSH
23439: CALL_OW 67
// Hint ( OmarVehicles ) ;
23443: LD_STRING OmarVehicles
23445: PPUSH
23446: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23450: LD_INT 16
23452: PPUSH
23453: LD_INT 1
23455: PPUSH
23456: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23460: LD_INT 35
23462: PPUSH
23463: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23467: LD_ADDR_EXP 20
23471: PUSH
23472: LD_EXP 20
23476: PUSH
23477: LD_INT 35
23479: MINUS
23480: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23481: LD_EXP 20
23485: PUSH
23486: LD_INT 0
23488: LESSEQUAL
23489: IFFALSE 23589
// begin display_strings := [ ] ;
23491: LD_ADDR_OWVAR 47
23495: PUSH
23496: EMPTY
23497: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23498: LD_STRING M4a
23500: PPUSH
23501: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23505: LD_INT 16
23507: PPUSH
23508: LD_INT 0
23510: PPUSH
23511: CALL_OW 424
// DialogueOn ;
23515: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23519: LD_EXP 43
23523: PPUSH
23524: LD_STRING DOm-Veh-b-15
23526: PPUSH
23527: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23531: LD_EXP 33
23535: PPUSH
23536: LD_STRING DH-Veh-b-16
23538: PPUSH
23539: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23543: LD_EXP 43
23547: PPUSH
23548: LD_STRING DOm-Veh-b-17
23550: PPUSH
23551: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23555: LD_EXP 38
23559: PPUSH
23560: LD_STRING DK-Veh-b-18
23562: PPUSH
23563: CALL_OW 88
// DialogueOff ;
23567: CALL_OW 7
// omarAttack := true ;
23571: LD_ADDR_EXP 23
23575: PUSH
23576: LD_INT 1
23578: ST_TO_ADDR
// omarScriptBase := false ;
23579: LD_ADDR_EXP 10
23583: PUSH
23584: LD_INT 0
23586: ST_TO_ADDR
// exit ;
23587: GO 24186
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23589: LD_EXP 21
23593: PUSH
23594: LD_INT 16
23596: PPUSH
23597: LD_INT 22
23599: PUSH
23600: LD_INT 2
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 21
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 3
23619: PUSH
23620: LD_INT 2
23622: PUSH
23623: LD_INT 34
23625: PUSH
23626: LD_INT 32
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 34
23635: PUSH
23636: LD_INT 88
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 34
23645: PUSH
23646: LD_INT 31
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 33
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 58
23675: PUSH
23676: EMPTY
23677: LIST
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: PPUSH
23686: CALL_OW 70
23690: LESSEQUAL
23691: IFFALSE 23460
// omarWaitingForVehiclesTimer := 0 0$00 ;
23693: LD_ADDR_EXP 20
23697: PUSH
23698: LD_INT 0
23700: ST_TO_ADDR
// display_strings := [ ] ;
23701: LD_ADDR_OWVAR 47
23705: PUSH
23706: EMPTY
23707: ST_TO_ADDR
// DialogueOn ;
23708: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23712: LD_EXP 43
23716: PPUSH
23717: LD_STRING DOm-Veh-a-15
23719: PPUSH
23720: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23724: LD_EXP 38
23728: PPUSH
23729: LD_STRING DK-Veh-a-16
23731: PPUSH
23732: CALL_OW 88
// DialogueOff ;
23736: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23740: LD_STRING M4a
23742: PPUSH
23743: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23747: LD_INT 16
23749: PPUSH
23750: LD_INT 0
23752: PPUSH
23753: CALL_OW 424
// omarHasVehicles := true ;
23757: LD_ADDR_EXP 22
23761: PUSH
23762: LD_INT 1
23764: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23765: LD_INT 35
23767: PPUSH
23768: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
23772: LD_EXP 19
23776: PUSH
23777: LD_INT 0
23779: EQUAL
23780: IFFALSE 23765
// wait ( 1 1$00 ) ;
23782: LD_INT 2100
23784: PPUSH
23785: CALL_OW 67
// omarAttack := true ;
23789: LD_ADDR_EXP 23
23793: PUSH
23794: LD_INT 1
23796: ST_TO_ADDR
// omarScriptBase := false ;
23797: LD_ADDR_EXP 10
23801: PUSH
23802: LD_INT 0
23804: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_INT 16
23812: PPUSH
23813: LD_INT 22
23815: PUSH
23816: LD_INT 2
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 21
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 33
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 58
23845: PUSH
23846: EMPTY
23847: LIST
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: PPUSH
23855: CALL_OW 70
23859: ST_TO_ADDR
// for i in tmp do
23860: LD_ADDR_VAR 0 1
23864: PUSH
23865: LD_VAR 0 2
23869: PUSH
23870: FOR_IN
23871: IFFALSE 23899
// begin SetFuel ( i , 100 ) ;
23873: LD_VAR 0 1
23877: PPUSH
23878: LD_INT 100
23880: PPUSH
23881: CALL_OW 240
// SetSide ( i , 5 ) ;
23885: LD_VAR 0 1
23889: PPUSH
23890: LD_INT 5
23892: PPUSH
23893: CALL_OW 235
// end ;
23897: GO 23870
23899: POP
23900: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
23901: LD_ADDR_VAR 0 3
23905: PUSH
23906: LD_EXP 51
23910: PPUSH
23911: LD_INT 25
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PPUSH
23921: CALL_OW 72
23925: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
23926: LD_ADDR_VAR 0 4
23930: PUSH
23931: LD_EXP 51
23935: PPUSH
23936: LD_INT 3
23938: PUSH
23939: LD_INT 55
23941: PUSH
23942: EMPTY
23943: LIST
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 25
23951: PUSH
23952: LD_INT 3
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PPUSH
23963: CALL_OW 72
23967: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
23968: LD_ADDR_VAR 0 5
23972: PUSH
23973: LD_INT 324
23975: PPUSH
23976: LD_INT 234
23978: PPUSH
23979: CALL_OW 428
23983: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
23984: LD_ADDR_VAR 0 6
23988: PUSH
23989: LD_INT 334
23991: PPUSH
23992: LD_INT 241
23994: PPUSH
23995: CALL_OW 428
23999: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24000: LD_VAR 0 6
24004: PPUSH
24005: CALL_OW 313
24009: PPUSH
24010: CALL_OW 122
// if eng then
24014: LD_VAR 0 3
24018: IFFALSE 24126
// begin if eng + mech <= tmp then
24020: LD_VAR 0 3
24024: PUSH
24025: LD_VAR 0 4
24029: PLUS
24030: PUSH
24031: LD_VAR 0 2
24035: LESSEQUAL
24036: IFFALSE 24091
// begin ComEnterUnit ( eng , workshop ) ;
24038: LD_VAR 0 3
24042: PPUSH
24043: LD_VAR 0 5
24047: PPUSH
24048: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24052: LD_VAR 0 3
24056: PPUSH
24057: LD_INT 3
24059: PPUSH
24060: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24064: LD_VAR 0 3
24068: PPUSH
24069: CALL_OW 182
// mech := mech union eng ;
24073: LD_ADDR_VAR 0 4
24077: PUSH
24078: LD_VAR 0 4
24082: PUSH
24083: LD_VAR 0 3
24087: UNION
24088: ST_TO_ADDR
// end else
24089: GO 24126
// begin ComEnterUnit ( eng , armoury ) ;
24091: LD_VAR 0 3
24095: PPUSH
24096: LD_VAR 0 6
24100: PPUSH
24101: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24105: LD_VAR 0 3
24109: PPUSH
24110: LD_INT 1
24112: PPUSH
24113: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24117: LD_VAR 0 3
24121: PPUSH
24122: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24126: LD_ADDR_VAR 0 1
24130: PUSH
24131: DOUBLE
24132: LD_INT 1
24134: DEC
24135: ST_TO_ADDR
24136: LD_VAR 0 2
24140: PUSH
24141: FOR_TO
24142: IFFALSE 24184
// if i <= mech then
24144: LD_VAR 0 1
24148: PUSH
24149: LD_VAR 0 4
24153: LESSEQUAL
24154: IFFALSE 24182
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24156: LD_VAR 0 4
24160: PUSH
24161: LD_VAR 0 1
24165: ARRAY
24166: PPUSH
24167: LD_VAR 0 2
24171: PUSH
24172: LD_VAR 0 1
24176: ARRAY
24177: PPUSH
24178: CALL_OW 180
24182: GO 24141
24184: POP
24185: POP
// end ;
24186: PPOPN 6
24188: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24189: LD_EXP 46
24193: PPUSH
24194: CALL_OW 302
24198: PUSH
24199: LD_EXP 17
24203: AND
24204: IFFALSE 24828
24206: GO 24208
24208: DISABLE
24209: LD_INT 0
24211: PPUSH
24212: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24213: LD_INT 35
24215: PPUSH
24216: CALL_OW 67
// hasBadWeapons := false ;
24220: LD_ADDR_VAR 0 2
24224: PUSH
24225: LD_INT 0
24227: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24228: LD_ADDR_EXP 19
24232: PUSH
24233: LD_EXP 19
24237: PUSH
24238: LD_INT 35
24240: MINUS
24241: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24242: LD_EXP 19
24246: PUSH
24247: LD_INT 0
24249: LESSEQUAL
24250: IFFALSE 24512
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24252: LD_ADDR_EXP 19
24256: PUSH
24257: LD_INT 0
24259: ST_TO_ADDR
// display_strings := [ ] ;
24260: LD_ADDR_OWVAR 47
24264: PUSH
24265: EMPTY
24266: ST_TO_ADDR
// DialogueOn ;
24267: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24271: LD_EXP 46
24275: PPUSH
24276: LD_STRING DRf-Veh-b-19
24278: PPUSH
24279: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24283: LD_EXP 46
24287: PPUSH
24288: LD_STRING DRf-Veh-b-20
24290: PPUSH
24291: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24295: LD_EXP 33
24299: PPUSH
24300: LD_STRING DH-Veh-b-21
24302: PPUSH
24303: CALL_OW 88
// if IsOk ( Givi ) then
24307: LD_EXP 34
24311: PPUSH
24312: CALL_OW 302
24316: IFFALSE 24354
// begin Say ( Givi , DG-Veh-b-22 ) ;
24318: LD_EXP 34
24322: PPUSH
24323: LD_STRING DG-Veh-b-22
24325: PPUSH
24326: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24330: LD_EXP 33
24334: PPUSH
24335: LD_STRING DH-Veh-b-23
24337: PPUSH
24338: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24342: LD_EXP 34
24346: PPUSH
24347: LD_STRING DG-Veh-b-24
24349: PPUSH
24350: CALL_OW 88
// end ; DialogueOff ;
24354: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24358: LD_STRING M5a
24360: PPUSH
24361: CALL_OW 337
// for i in rolfSquad do
24365: LD_ADDR_VAR 0 1
24369: PUSH
24370: LD_EXP 50
24374: PUSH
24375: FOR_IN
24376: IFFALSE 24493
// begin SetSide ( i , 8 ) ;
24378: LD_VAR 0 1
24382: PPUSH
24383: LD_INT 8
24385: PPUSH
24386: CALL_OW 235
// if IsDriver ( i ) then
24390: LD_VAR 0 1
24394: PPUSH
24395: CALL 64186 0 1
24399: IFFALSE 24471
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24401: LD_VAR 0 1
24405: PPUSH
24406: CALL_OW 310
24410: PPUSH
24411: CALL_OW 264
24415: PUSH
24416: LD_INT 51
24418: PUSH
24419: LD_INT 52
24421: PUSH
24422: LD_INT 32
24424: PUSH
24425: LD_INT 88
24427: PUSH
24428: LD_INT 31
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: IN
24438: NOT
24439: IFFALSE 24460
// SetSide ( IsInUnit ( i ) , 8 ) else
24441: LD_VAR 0 1
24445: PPUSH
24446: CALL_OW 310
24450: PPUSH
24451: LD_INT 8
24453: PPUSH
24454: CALL_OW 235
24458: GO 24469
// ComExitVehicle ( i ) ;
24460: LD_VAR 0 1
24464: PPUSH
24465: CALL_OW 121
// end else
24469: GO 24491
// if IsInUnit ( i ) then
24471: LD_VAR 0 1
24475: PPUSH
24476: CALL_OW 310
24480: IFFALSE 24491
// ComExitBuilding ( i ) ;
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 122
// end ;
24491: GO 24375
24493: POP
24494: POP
// wait ( 0 0$10 ) ;
24495: LD_INT 350
24497: PPUSH
24498: CALL_OW 67
// rolfAttack := true ;
24502: LD_ADDR_EXP 32
24506: PUSH
24507: LD_INT 1
24509: ST_TO_ADDR
// exit ;
24510: GO 24828
// end ; if IsDead ( Rolf ) then
24512: LD_EXP 46
24516: PPUSH
24517: CALL_OW 301
24521: IFFALSE 24532
// begin ChangeMissionObjectives ( M5a ) ;
24523: LD_STRING M5a
24525: PPUSH
24526: CALL_OW 337
// exit ;
24530: GO 24828
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24532: LD_EXP 50
24536: PPUSH
24537: LD_INT 55
24539: PUSH
24540: EMPTY
24541: LIST
24542: PPUSH
24543: CALL_OW 72
24547: PPUSH
24548: CALL 31204 0 1
24552: PUSH
24553: LD_EXP 50
24557: PPUSH
24558: CALL 31204 0 1
24562: EQUAL
24563: IFFALSE 24680
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24565: LD_ADDR_VAR 0 1
24569: PUSH
24570: LD_EXP 50
24574: PPUSH
24575: LD_INT 55
24577: PUSH
24578: EMPTY
24579: LIST
24580: PPUSH
24581: CALL_OW 72
24585: PUSH
24586: FOR_IN
24587: IFFALSE 24647
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24589: LD_VAR 0 1
24593: PPUSH
24594: CALL_OW 310
24598: PPUSH
24599: CALL_OW 264
24603: PUSH
24604: LD_INT 51
24606: PUSH
24607: LD_INT 52
24609: PUSH
24610: LD_INT 32
24612: PUSH
24613: LD_INT 88
24615: PUSH
24616: LD_INT 31
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: IN
24626: IFFALSE 24645
// begin hasBadWeapons := true ;
24628: LD_ADDR_VAR 0 2
24632: PUSH
24633: LD_INT 1
24635: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24636: LD_STRING QBadWeapon
24638: PPUSH
24639: CALL_OW 97
// break ;
24643: GO 24647
// end ;
24645: GO 24586
24647: POP
24648: POP
// if not hasBadWeapons then
24649: LD_VAR 0 2
24653: NOT
24654: IFFALSE 24680
// if Query ( QRolf ) = 1 then
24656: LD_STRING QRolf
24658: PPUSH
24659: CALL_OW 97
24663: PUSH
24664: LD_INT 1
24666: EQUAL
24667: IFFALSE 24673
// break else
24669: GO 24684
24671: GO 24680
// wait ( 0 0$15 ) ;
24673: LD_INT 525
24675: PPUSH
24676: CALL_OW 67
// end ; until false ;
24680: LD_INT 0
24682: IFFALSE 24213
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24684: LD_ADDR_EXP 19
24688: PUSH
24689: LD_INT 0
24691: ST_TO_ADDR
// display_strings := [ ] ;
24692: LD_ADDR_OWVAR 47
24696: PUSH
24697: EMPTY
24698: ST_TO_ADDR
// DialogueOn ;
24699: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24703: LD_EXP 46
24707: PPUSH
24708: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24712: LD_EXP 46
24716: PPUSH
24717: LD_STRING DRf-Veh-a-17
24719: PPUSH
24720: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24724: LD_EXP 33
24728: PPUSH
24729: LD_STRING DH-08-Veh-a-18
24731: PPUSH
24732: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24736: LD_EXP 46
24740: PPUSH
24741: LD_STRING DRf-Veh-a-19
24743: PPUSH
24744: CALL_OW 88
// DialogueOff ;
24748: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24752: LD_STRING M5a
24754: PPUSH
24755: CALL_OW 337
// rolfHasVehicles := true ;
24759: LD_ADDR_EXP 16
24763: PUSH
24764: LD_INT 1
24766: ST_TO_ADDR
// for i in rolfSquad do
24767: LD_ADDR_VAR 0 1
24771: PUSH
24772: LD_EXP 50
24776: PUSH
24777: FOR_IN
24778: IFFALSE 24811
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
24780: LD_VAR 0 1
24784: PPUSH
24785: CALL_OW 310
24789: PPUSH
24790: LD_INT 8
24792: PPUSH
24793: CALL_OW 235
// SetSide ( i , 8 ) ;
24797: LD_VAR 0 1
24801: PPUSH
24802: LD_INT 8
24804: PPUSH
24805: CALL_OW 235
// end ;
24809: GO 24777
24811: POP
24812: POP
// wait ( 0 0$10 ) ;
24813: LD_INT 350
24815: PPUSH
24816: CALL_OW 67
// rolfAttack := true ;
24820: LD_ADDR_EXP 32
24824: PUSH
24825: LD_INT 1
24827: ST_TO_ADDR
// end ;
24828: PPOPN 2
24830: END
// every 0 0$1 trigger leninSpotted do
24831: LD_EXP 14
24835: IFFALSE 24923
24837: GO 24839
24839: DISABLE
// begin wait ( 0 0$10 ) ;
24840: LD_INT 350
24842: PPUSH
24843: CALL_OW 67
// DialogueOn ;
24847: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
24851: LD_EXP 45
24855: PPUSH
24856: LD_STRING DA-Transmission-1
24858: PPUSH
24859: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
24863: LD_EXP 52
24867: PPUSH
24868: LD_STRING DMzw-Transmission-2
24870: PPUSH
24871: CALL_OW 94
// if gaidarKilled then
24875: LD_EXP 7
24879: IFFALSE 24895
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
24881: LD_EXP 52
24885: PPUSH
24886: LD_STRING DMzw-Transmission-3
24888: PPUSH
24889: CALL_OW 94
24893: GO 24907
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
24895: LD_EXP 52
24899: PPUSH
24900: LD_STRING DMzw-Transmission-a-3
24902: PPUSH
24903: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
24907: LD_EXP 33
24911: PPUSH
24912: LD_STRING DH-Transmission-4
24914: PPUSH
24915: CALL_OW 88
// DialogueOff ;
24919: CALL_OW 7
// end ;
24923: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
24924: LD_INT 22
24926: PUSH
24927: LD_INT 3
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 25
24936: PUSH
24937: LD_INT 9
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 101
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: LIST
24958: PPUSH
24959: CALL_OW 69
24963: PUSH
24964: LD_EXP 33
24968: PPUSH
24969: CALL_OW 302
24973: AND
24974: IFFALSE 25054
24976: GO 24978
24978: DISABLE
// begin wait ( 0 0$3 ) ;
24979: LD_INT 105
24981: PPUSH
24982: CALL_OW 67
// DialogueOn ;
24986: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
24990: LD_INT 22
24992: PUSH
24993: LD_INT 3
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 25
25002: PUSH
25003: LD_INT 9
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 101
25012: PUSH
25013: LD_INT 2
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: LIST
25024: PPUSH
25025: CALL_OW 69
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: PPUSH
25034: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25038: LD_EXP 33
25042: PPUSH
25043: LD_STRING DH-Rubazooka-1
25045: PPUSH
25046: CALL_OW 88
// DialogueOff ;
25050: CALL_OW 7
// end ;
25054: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25055: LD_INT 19
25057: PPUSH
25058: LD_INT 22
25060: PUSH
25061: LD_INT 3
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PPUSH
25068: CALL_OW 70
25072: PUSH
25073: LD_EXP 28
25077: AND
25078: IFFALSE 25137
25080: GO 25082
25082: DISABLE
// begin DialogueOn ;
25083: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25087: LD_INT 19
25089: PPUSH
25090: LD_INT 22
25092: PUSH
25093: LD_INT 3
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PPUSH
25100: CALL_OW 70
25104: PPUSH
25105: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25109: LD_EXP 33
25113: PPUSH
25114: LD_STRING DH-Ruattfirst-1
25116: PPUSH
25117: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25121: LD_EXP 33
25125: PPUSH
25126: LD_STRING DH-Ruattfirst-2
25128: PPUSH
25129: CALL_OW 88
// DialogueOff ;
25133: CALL_OW 7
// end ;
25137: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25138: LD_INT 19
25140: PPUSH
25141: LD_INT 22
25143: PUSH
25144: LD_INT 3
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PPUSH
25151: CALL_OW 70
25155: PUSH
25156: LD_EXP 28
25160: NOT
25161: AND
25162: IFFALSE 25209
25164: GO 25166
25166: DISABLE
// begin DialogueOn ;
25167: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25171: LD_INT 19
25173: PPUSH
25174: LD_INT 22
25176: PUSH
25177: LD_INT 3
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PPUSH
25184: CALL_OW 70
25188: PPUSH
25189: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25193: LD_EXP 33
25197: PPUSH
25198: LD_STRING DH-Ruattnext-1
25200: PPUSH
25201: CALL_OW 88
// DialogueOff ;
25205: CALL_OW 7
// end ;
25209: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25210: LD_EXP 52
25214: PPUSH
25215: CALL_OW 301
25219: PUSH
25220: LD_EXP 43
25224: PPUSH
25225: CALL_OW 302
25229: AND
25230: IFFALSE 25247
25232: GO 25234
25234: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25235: LD_EXP 43
25239: PPUSH
25240: LD_STRING DOm-Morozov
25242: PPUSH
25243: CALL_OW 94
25247: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25248: LD_EXP 31
25252: PUSH
25253: LD_EXP 47
25257: PPUSH
25258: CALL_OW 274
25262: PPUSH
25263: LD_INT 2
25265: PPUSH
25266: CALL_OW 275
25270: PUSH
25271: LD_INT 30
25273: LESSEQUAL
25274: AND
25275: IFFALSE 25365
25277: GO 25279
25279: DISABLE
// begin wait ( 0 0$10 ) ;
25280: LD_INT 350
25282: PPUSH
25283: CALL_OW 67
// DialogueOn ;
25287: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25291: LD_EXP 33
25295: PPUSH
25296: LD_STRING DH-Fuel-1
25298: PPUSH
25299: CALL_OW 88
// if IsOk ( Givi ) then
25303: LD_EXP 34
25307: PPUSH
25308: CALL_OW 302
25312: IFFALSE 25350
// begin Say ( Givi , DG-Fuel-2 ) ;
25314: LD_EXP 34
25318: PPUSH
25319: LD_STRING DG-Fuel-2
25321: PPUSH
25322: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25326: LD_EXP 34
25330: PPUSH
25331: LD_STRING DG-Fuel-3
25333: PPUSH
25334: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25338: LD_EXP 34
25342: PPUSH
25343: LD_STRING DG-Fuel-4
25345: PPUSH
25346: CALL_OW 88
// end ; DialogueOff ;
25350: CALL_OW 7
// Query ( QOil ) ;
25354: LD_STRING QOil
25356: PPUSH
25357: CALL_OW 97
// GoForOil ( ) ;
25361: CALL 8673 0 0
// end ;
25365: END
// every 0 0$1 trigger ( leninSpotted and omarAttack ) or IsDead ( Morozov ) do
25366: LD_EXP 14
25370: PUSH
25371: LD_EXP 23
25375: AND
25376: PUSH
25377: LD_EXP 52
25381: PPUSH
25382: CALL_OW 301
25386: OR
25387: IFFALSE 25728
25389: GO 25391
25391: DISABLE
// begin if IsDead ( Morozov ) then
25392: LD_EXP 52
25396: PPUSH
25397: CALL_OW 301
25401: IFFALSE 25412
// wait ( 1 1$45 ) else
25403: LD_INT 3675
25405: PPUSH
25406: CALL_OW 67
25410: GO 25440
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25412: LD_INT 19950
25414: PUSH
25415: LD_INT 16800
25417: PUSH
25418: LD_INT 16100
25420: PUSH
25421: LD_INT 13650
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: PUSH
25430: LD_OWVAR 67
25434: ARRAY
25435: PPUSH
25436: CALL_OW 67
// DialogueOn ;
25440: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25444: LD_EXP 41
25448: PPUSH
25449: LD_STRING DShar-End-1
25451: PPUSH
25452: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25456: LD_EXP 33
25460: PPUSH
25461: LD_STRING DH-End-2
25463: PPUSH
25464: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25468: LD_EXP 41
25472: PPUSH
25473: LD_STRING DShar-End-3
25475: PPUSH
25476: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25480: LD_EXP 33
25484: PPUSH
25485: LD_STRING DH-End-4
25487: PPUSH
25488: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25492: LD_EXP 41
25496: PPUSH
25497: LD_STRING DShar-End-5
25499: PPUSH
25500: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25504: LD_EXP 41
25508: PPUSH
25509: LD_STRING DShar-End-6
25511: PPUSH
25512: CALL_OW 94
// dwait ( 0 0$2 ) ;
25516: LD_INT 70
25518: PPUSH
25519: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25523: LD_EXP 33
25527: PPUSH
25528: LD_STRING DH-End-7
25530: PPUSH
25531: CALL_OW 88
// DialogueOff ;
25535: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25539: LD_STRING M6
25541: PPUSH
25542: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25546: LD_INT 17
25548: PPUSH
25549: LD_INT 1
25551: PPUSH
25552: CALL_OW 424
// escapeAllowed := true ;
25556: LD_ADDR_EXP 24
25560: PUSH
25561: LD_INT 1
25563: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25564: LD_INT 70
25566: PPUSH
25567: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25571: LD_EXP 44
25575: PPUSH
25576: LD_STRING DKs-End-8
25578: PPUSH
25579: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25583: LD_EXP 38
25587: PPUSH
25588: LD_STRING DK-End-10
25590: PPUSH
25591: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25595: LD_EXP 44
25599: PPUSH
25600: LD_STRING DKs-End-9
25602: PPUSH
25603: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25607: LD_EXP 40
25611: PPUSH
25612: LD_STRING DMar-End-11
25614: PPUSH
25615: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25619: LD_STRING 05_DrugsTested
25621: PPUSH
25622: LD_EXP 1
25626: PPUSH
25627: CALL_OW 30
25631: IFFALSE 25645
// Say ( Mike , DM-End-12 ) ;
25633: LD_EXP 35
25637: PPUSH
25638: LD_STRING DM-End-12
25640: PPUSH
25641: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25645: LD_EXP 42
25649: PPUSH
25650: LD_STRING DO-End-13
25652: PPUSH
25653: CALL_OW 88
// if IsOk ( Sophia ) then
25657: LD_EXP 39
25661: PPUSH
25662: CALL_OW 302
25666: IFFALSE 25692
// begin Say ( Sophia , DS-End-15 ) ;
25668: LD_EXP 39
25672: PPUSH
25673: LD_STRING DS-End-15
25675: PPUSH
25676: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25680: LD_EXP 38
25684: PPUSH
25685: LD_STRING DK-End-16
25687: PPUSH
25688: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25692: LD_EXP 34
25696: PPUSH
25697: LD_STRING DG-End-17
25699: PPUSH
25700: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25704: LD_EXP 34
25708: PPUSH
25709: LD_STRING DG-End-18
25711: PPUSH
25712: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25716: LD_EXP 34
25720: PPUSH
25721: LD_STRING DG-End-19
25723: PPUSH
25724: CALL_OW 88
// end ;
25728: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25729: LD_EXP 24
25733: IFFALSE 25872
25735: GO 25737
25737: DISABLE
25738: LD_INT 0
25740: PPUSH
25741: PPUSH
// begin repeat wait ( 0 0$1 ) ;
25742: LD_INT 35
25744: PPUSH
25745: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
25749: LD_ADDR_OWVAR 47
25753: PUSH
25754: LD_STRING #X106-2
25756: PUSH
25757: LD_EXP 25
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
25766: LD_ADDR_EXP 25
25770: PUSH
25771: LD_EXP 25
25775: PUSH
25776: LD_INT 35
25778: MINUS
25779: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
25780: LD_ADDR_VAR 0 2
25784: PUSH
25785: LD_INT 17
25787: PPUSH
25788: LD_INT 22
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 21
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 23
25810: PUSH
25811: LD_INT 2
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: LIST
25822: PPUSH
25823: CALL_OW 71
25827: ST_TO_ADDR
// if not outsiders then
25828: LD_VAR 0 2
25832: NOT
25833: IFFALSE 25849
// begin escapeAllowed := false ;
25835: LD_ADDR_EXP 24
25839: PUSH
25840: LD_INT 0
25842: ST_TO_ADDR
// MissionWin ;
25843: CALL 25875 0 0
// exit ;
25847: GO 25872
// end ; if escapeTimer <= 0 0$00 then
25849: LD_EXP 25
25853: PUSH
25854: LD_INT 0
25856: LESSEQUAL
25857: IFFALSE 25868
// begin YouLost ( TimeOut ) ;
25859: LD_STRING TimeOut
25861: PPUSH
25862: CALL_OW 104
// exit ;
25866: GO 25872
// end ; until false ;
25868: LD_INT 0
25870: IFFALSE 25742
// end ;
25872: PPOPN 2
25874: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
25875: LD_INT 0
25877: PPUSH
25878: PPUSH
25879: PPUSH
25880: PPUSH
25881: PPUSH
// Say ( Heike , DH-End-20 ) ;
25882: LD_EXP 33
25886: PPUSH
25887: LD_STRING DH-End-20
25889: PPUSH
25890: CALL_OW 88
// if rolfDied then
25894: LD_EXP 13
25898: IFFALSE 25913
// AddMedal ( med1 , - 1 ) else
25900: LD_STRING med1
25902: PPUSH
25903: LD_INT 1
25905: NEG
25906: PPUSH
25907: CALL_OW 101
25911: GO 25943
// if not canRolfJoin then
25913: LD_EXP 29
25917: NOT
25918: IFFALSE 25933
// AddMedal ( med1 , - 2 ) else
25920: LD_STRING med1
25922: PPUSH
25923: LD_INT 2
25925: NEG
25926: PPUSH
25927: CALL_OW 101
25931: GO 25943
// AddMedal ( med1 , 1 ) ;
25933: LD_STRING med1
25935: PPUSH
25936: LD_INT 1
25938: PPUSH
25939: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
25943: LD_EXP 22
25947: PUSH
25948: LD_EXP 16
25952: AND
25953: IFFALSE 25967
// AddMedal ( med2 , 1 ) else
25955: LD_STRING med2
25957: PPUSH
25958: LD_INT 1
25960: PPUSH
25961: CALL_OW 101
25965: GO 26016
// if omarHasVehicles then
25967: LD_EXP 22
25971: IFFALSE 25986
// AddMedal ( med2 , - 1 ) else
25973: LD_STRING med2
25975: PPUSH
25976: LD_INT 1
25978: NEG
25979: PPUSH
25980: CALL_OW 101
25984: GO 26016
// if rolfHasVehicles then
25986: LD_EXP 16
25990: IFFALSE 26005
// AddMedal ( med2 , - 2 ) else
25992: LD_STRING med2
25994: PPUSH
25995: LD_INT 2
25997: NEG
25998: PPUSH
25999: CALL_OW 101
26003: GO 26016
// AddMedal ( med2 , - 3 ) ;
26005: LD_STRING med2
26007: PPUSH
26008: LD_INT 3
26010: NEG
26011: PPUSH
26012: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 60 ] [ Difficulty ] and heikeLoseCounter = 0 then
26016: LD_EXP 5
26020: PUSH
26021: LD_INT 30
26023: PUSH
26024: LD_INT 45
26026: PUSH
26027: LD_INT 50
26029: PUSH
26030: LD_INT 60
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: PUSH
26039: LD_OWVAR 67
26043: ARRAY
26044: GREATEREQUAL
26045: PUSH
26046: LD_EXP 26
26050: PUSH
26051: LD_INT 0
26053: EQUAL
26054: AND
26055: IFFALSE 26069
// AddMedal ( med3 , 1 ) else
26057: LD_STRING med3
26059: PPUSH
26060: LD_INT 1
26062: PPUSH
26063: CALL_OW 101
26067: GO 26099
// if heikeLoseCounter then
26069: LD_EXP 26
26073: IFFALSE 26088
// AddMedal ( med3 , - 2 ) else
26075: LD_STRING med3
26077: PPUSH
26078: LD_INT 2
26080: NEG
26081: PPUSH
26082: CALL_OW 101
26086: GO 26099
// AddMedal ( med3 , - 1 ) ;
26088: LD_STRING med3
26090: PPUSH
26091: LD_INT 1
26093: NEG
26094: PPUSH
26095: CALL_OW 101
// GiveMedals ( MAIN ) ;
26099: LD_STRING MAIN
26101: PPUSH
26102: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26106: LD_INT 22
26108: PUSH
26109: LD_INT 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 23
26118: PUSH
26119: LD_INT 2
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 21
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: LIST
26140: PPUSH
26141: CALL_OW 69
26145: PPUSH
26146: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26150: LD_EXP 33
26154: PPUSH
26155: LD_STRING 06_Heike
26157: PPUSH
26158: CALL_OW 38
// if Aviradze then
26162: LD_EXP 45
26166: IFFALSE 26180
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26168: LD_EXP 45
26172: PPUSH
26173: LD_STRING 06_Aviradze
26175: PPUSH
26176: CALL_OW 38
// if Ibrahim then
26180: LD_EXP 36
26184: IFFALSE 26198
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26186: LD_EXP 36
26190: PPUSH
26191: LD_STRING 06_Ibrahim
26193: PPUSH
26194: CALL_OW 38
// if Kamil then
26198: LD_EXP 37
26202: IFFALSE 26216
// SaveCharacters ( Kamil , 06_Kamil ) ;
26204: LD_EXP 37
26208: PPUSH
26209: LD_STRING 06_Kamil
26211: PPUSH
26212: CALL_OW 38
// if Sophia then
26216: LD_EXP 39
26220: IFFALSE 26234
// SaveCharacters ( Sophia , 06_Sophia ) ;
26222: LD_EXP 39
26226: PPUSH
26227: LD_STRING 06_Sophia
26229: PPUSH
26230: CALL_OW 38
// if Kaia then
26234: LD_EXP 38
26238: IFFALSE 26252
// SaveCharacters ( Kaia , 06_Kaia ) ;
26240: LD_EXP 38
26244: PPUSH
26245: LD_STRING 06_Kaia
26247: PPUSH
26248: CALL_OW 38
// if Givi then
26252: LD_EXP 34
26256: IFFALSE 26270
// SaveCharacters ( Givi , 06_Givi ) ;
26258: LD_EXP 34
26262: PPUSH
26263: LD_STRING 06_Givi
26265: PPUSH
26266: CALL_OW 38
// if Olaf then
26270: LD_EXP 42
26274: IFFALSE 26288
// SaveCharacters ( Olaf , 06_Olaf ) ;
26276: LD_EXP 42
26280: PPUSH
26281: LD_STRING 06_Olaf
26283: PPUSH
26284: CALL_OW 38
// if Mike then
26288: LD_EXP 35
26292: IFFALSE 26306
// SaveCharacters ( Mike , 06_Mike ) ;
26294: LD_EXP 35
26298: PPUSH
26299: LD_STRING 06_Mike
26301: PPUSH
26302: CALL_OW 38
// if Markov then
26306: LD_EXP 40
26310: IFFALSE 26324
// SaveCharacters ( Markov , 06_Markov ) ;
26312: LD_EXP 40
26316: PPUSH
26317: LD_STRING 06_Markov
26319: PPUSH
26320: CALL_OW 38
// if Kurt then
26324: LD_EXP 44
26328: IFFALSE 26342
// SaveCharacters ( Kurt , 06_Kurt ) ;
26330: LD_EXP 44
26334: PPUSH
26335: LD_STRING 06_Kurt
26337: PPUSH
26338: CALL_OW 38
// if heikeSecondSquad then
26342: LD_EXP 48
26346: IFFALSE 26360
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26348: LD_EXP 48
26352: PPUSH
26353: LD_STRING 06_others
26355: PPUSH
26356: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26360: LD_ADDR_VAR 0 3
26364: PUSH
26365: LD_INT 22
26367: PUSH
26368: LD_INT 2
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 23
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PPUSH
26389: CALL_OW 69
26393: ST_TO_ADDR
// if tmp then
26394: LD_VAR 0 3
26398: IFFALSE 26412
// SaveCharacters ( tmp , 06_apes ) ;
26400: LD_VAR 0 3
26404: PPUSH
26405: LD_STRING 06_apes
26407: PPUSH
26408: CALL_OW 38
// if Rolf then
26412: LD_EXP 46
26416: IFFALSE 26467
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26418: LD_EXP 46
26422: PPUSH
26423: LD_STRING 06_Rolf
26425: PPUSH
26426: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26430: LD_STRING enableBioCharacter(BIO_ROLF)
26432: PPUSH
26433: CALL_OW 559
// if rolfSquad diff Rolf then
26437: LD_EXP 50
26441: PUSH
26442: LD_EXP 46
26446: DIFF
26447: IFFALSE 26467
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26449: LD_EXP 50
26453: PUSH
26454: LD_EXP 46
26458: DIFF
26459: PPUSH
26460: LD_STRING 06_RolfSquad
26462: PPUSH
26463: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26467: LD_ADDR_VAR 0 3
26471: PUSH
26472: LD_INT 17
26474: PPUSH
26475: LD_INT 21
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PPUSH
26485: CALL_OW 70
26489: ST_TO_ADDR
// if tmp then
26490: LD_VAR 0 3
26494: IFFALSE 26788
// begin tmp2 := [ ] ;
26496: LD_ADDR_VAR 0 4
26500: PUSH
26501: EMPTY
26502: ST_TO_ADDR
// for i in tmp do
26503: LD_ADDR_VAR 0 2
26507: PUSH
26508: LD_VAR 0 3
26512: PUSH
26513: FOR_IN
26514: IFFALSE 26774
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26516: LD_VAR 0 2
26520: PPUSH
26521: CALL_OW 264
26525: PUSH
26526: LD_INT 32
26528: PUSH
26529: LD_INT 12
26531: PUSH
26532: LD_INT 51
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: IN
26540: IFFALSE 26677
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26542: LD_ADDR_VAR 0 5
26546: PUSH
26547: LD_VAR 0 2
26551: PPUSH
26552: LD_INT 1
26554: PPUSH
26555: CALL_OW 289
26559: PUSH
26560: LD_VAR 0 2
26564: PPUSH
26565: LD_INT 2
26567: PPUSH
26568: CALL_OW 289
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26577: LD_ADDR_VAR 0 4
26581: PUSH
26582: LD_VAR 0 4
26586: PPUSH
26587: LD_VAR 0 4
26591: PUSH
26592: LD_INT 1
26594: PLUS
26595: PPUSH
26596: LD_VAR 0 2
26600: PPUSH
26601: CALL_OW 265
26605: PUSH
26606: LD_VAR 0 2
26610: PPUSH
26611: CALL_OW 262
26615: PUSH
26616: LD_VAR 0 2
26620: PPUSH
26621: CALL_OW 263
26625: PUSH
26626: LD_VAR 0 2
26630: PPUSH
26631: CALL_OW 264
26635: PUSH
26636: LD_VAR 0 2
26640: PPUSH
26641: CALL_OW 248
26645: PUSH
26646: LD_VAR 0 2
26650: PPUSH
26651: CALL_OW 256
26655: PUSH
26656: LD_VAR 0 5
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: PPUSH
26670: CALL_OW 1
26674: ST_TO_ADDR
// end else
26675: GO 26772
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26677: LD_ADDR_VAR 0 4
26681: PUSH
26682: LD_VAR 0 4
26686: PPUSH
26687: LD_VAR 0 4
26691: PUSH
26692: LD_INT 1
26694: PLUS
26695: PPUSH
26696: LD_VAR 0 2
26700: PPUSH
26701: CALL_OW 265
26705: PUSH
26706: LD_VAR 0 2
26710: PPUSH
26711: CALL_OW 262
26715: PUSH
26716: LD_VAR 0 2
26720: PPUSH
26721: CALL_OW 263
26725: PUSH
26726: LD_VAR 0 2
26730: PPUSH
26731: CALL_OW 264
26735: PUSH
26736: LD_VAR 0 2
26740: PPUSH
26741: CALL_OW 248
26745: PUSH
26746: LD_VAR 0 2
26750: PPUSH
26751: CALL_OW 256
26755: PUSH
26756: EMPTY
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: PPUSH
26767: CALL_OW 1
26771: ST_TO_ADDR
26772: GO 26513
26774: POP
26775: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
26776: LD_VAR 0 4
26780: PPUSH
26781: LD_STRING 06_Vehicles
26783: PPUSH
26784: CALL_OW 39
// end ; YouWin ;
26788: CALL_OW 103
// end ; end_of_file
26792: LD_VAR 0 1
26796: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
26797: LD_INT 0
26799: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
26800: LD_VAR 0 1
26804: PPUSH
26805: LD_VAR 0 2
26809: PPUSH
26810: CALL 86600 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
26814: LD_VAR 0 1
26818: PPUSH
26819: CALL_OW 255
26823: PUSH
26824: LD_INT 2
26826: EQUAL
26827: PUSH
26828: LD_OWVAR 52
26832: AND
26833: PUSH
26834: LD_VAR 0 1
26838: PPUSH
26839: CALL_OW 263
26843: PUSH
26844: LD_INT 1
26846: EQUAL
26847: AND
26848: IFFALSE 26903
// begin driver := IsDrivenBy ( vehicle ) ;
26850: LD_ADDR_VAR 0 3
26854: PUSH
26855: LD_VAR 0 1
26859: PPUSH
26860: CALL_OW 311
26864: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
26865: LD_VAR 0 1
26869: PPUSH
26870: LD_INT 211
26872: PPUSH
26873: LD_INT 101
26875: PPUSH
26876: CALL_OW 111
// AddComExitVehicle ( driver ) ;
26880: LD_VAR 0 3
26884: PPUSH
26885: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26889: LD_VAR 0 3
26893: PPUSH
26894: LD_VAR 0 2
26898: PPUSH
26899: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
26903: LD_VAR 0 1
26907: PPUSH
26908: CALL_OW 255
26912: PUSH
26913: LD_INT 3
26915: EQUAL
26916: IFFALSE 26947
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
26918: LD_ADDR_EXP 59
26922: PUSH
26923: LD_EXP 59
26927: PPUSH
26928: LD_EXP 59
26932: PUSH
26933: LD_INT 1
26935: PLUS
26936: PPUSH
26937: LD_VAR 0 1
26941: PPUSH
26942: CALL_OW 1
26946: ST_TO_ADDR
// end ;
26947: PPOPN 3
26949: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
26950: LD_VAR 0 1
26954: PPUSH
26955: CALL_OW 255
26959: PUSH
26960: LD_INT 8
26962: EQUAL
26963: PUSH
26964: LD_VAR 0 1
26968: PPUSH
26969: CALL_OW 266
26973: PUSH
26974: LD_INT 4
26976: EQUAL
26977: AND
26978: IFFALSE 26989
// ComUpgrade ( b ) ;
26980: LD_VAR 0 1
26984: PPUSH
26985: CALL_OW 146
// end ;
26989: PPOPN 1
26991: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
26992: LD_VAR 0 1
26996: PPUSH
26997: CALL 86480 0 1
// if un = Heike then
27001: LD_VAR 0 1
27005: PUSH
27006: LD_EXP 33
27010: EQUAL
27011: IFFALSE 27020
// YouLost ( Heike ) ;
27013: LD_STRING Heike
27015: PPUSH
27016: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
27020: LD_VAR 0 1
27024: PUSH
27025: LD_INT 22
27027: PUSH
27028: LD_INT 2
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 23
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 69
27053: IN
27054: IFFALSE 27070
// heikeLoseCounter := heikeLoseCounter + 1 ;
27056: LD_ADDR_EXP 26
27060: PUSH
27061: LD_EXP 26
27065: PUSH
27066: LD_INT 1
27068: PLUS
27069: ST_TO_ADDR
// if un = arDepot then
27070: LD_VAR 0 1
27074: PUSH
27075: LD_EXP 47
27079: EQUAL
27080: IFFALSE 27089
// YouLost ( Base ) ;
27082: LD_STRING Base
27084: PPUSH
27085: CALL_OW 104
// if un = Rolf then
27089: LD_VAR 0 1
27093: PUSH
27094: LD_EXP 46
27098: EQUAL
27099: IFFALSE 27109
// rolfDied := true ;
27101: LD_ADDR_EXP 13
27105: PUSH
27106: LD_INT 1
27108: ST_TO_ADDR
// if un in rolfSquad then
27109: LD_VAR 0 1
27113: PUSH
27114: LD_EXP 50
27118: IN
27119: IFFALSE 27137
// rolfSquad := rolfSquad diff un ;
27121: LD_ADDR_EXP 50
27125: PUSH
27126: LD_EXP 50
27130: PUSH
27131: LD_VAR 0 1
27135: DIFF
27136: ST_TO_ADDR
// if un in omarSquad then
27137: LD_VAR 0 1
27141: PUSH
27142: LD_EXP 51
27146: IN
27147: IFFALSE 27165
// omarSquad := omarSquad diff un ;
27149: LD_ADDR_EXP 51
27153: PUSH
27154: LD_EXP 51
27158: PUSH
27159: LD_VAR 0 1
27163: DIFF
27164: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27165: LD_VAR 0 1
27169: PPUSH
27170: CALL_OW 255
27174: PUSH
27175: LD_INT 3
27177: EQUAL
27178: IFFALSE 27194
// ruLoseCounter := ruLoseCounter + 1 ;
27180: LD_ADDR_EXP 5
27184: PUSH
27185: LD_EXP 5
27189: PUSH
27190: LD_INT 1
27192: PLUS
27193: ST_TO_ADDR
// if un in ruAttackers then
27194: LD_VAR 0 1
27198: PUSH
27199: LD_EXP 60
27203: IN
27204: IFFALSE 27222
// ruAttackers := ruAttackers diff un ;
27206: LD_ADDR_EXP 60
27210: PUSH
27211: LD_EXP 60
27215: PUSH
27216: LD_VAR 0 1
27220: DIFF
27221: ST_TO_ADDR
// end ;
27222: PPOPN 1
27224: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27225: LD_INT 0
27227: PPUSH
27228: PPUSH
27229: PPUSH
27230: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27231: LD_VAR 0 2
27235: PPUSH
27236: CALL_OW 255
27240: PUSH
27241: LD_INT 8
27243: EQUAL
27244: PUSH
27245: LD_EXP 32
27249: AND
27250: IFFALSE 27267
// ComMoveXY ( un , 221 , 161 ) ;
27252: LD_VAR 0 1
27256: PPUSH
27257: LD_INT 221
27259: PPUSH
27260: LD_INT 161
27262: PPUSH
27263: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27267: LD_VAR 0 2
27271: PPUSH
27272: CALL_OW 255
27276: PUSH
27277: LD_INT 5
27279: EQUAL
27280: PUSH
27281: LD_EXP 23
27285: AND
27286: IFFALSE 27395
// begin ComMoveXY ( un , 333 , 233 ) ;
27288: LD_VAR 0 1
27292: PPUSH
27293: LD_INT 333
27295: PPUSH
27296: LD_INT 233
27298: PPUSH
27299: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27303: LD_INT 334
27305: PPUSH
27306: LD_INT 241
27308: PPUSH
27309: CALL_OW 428
27313: NOT
27314: PUSH
27315: LD_INT 334
27317: PPUSH
27318: LD_INT 241
27320: PPUSH
27321: CALL_OW 428
27325: PPUSH
27326: CALL_OW 266
27330: PUSH
27331: LD_INT 4
27333: EQUAL
27334: NOT
27335: OR
27336: IFFALSE 27340
// exit ;
27338: GO 27920
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27340: LD_VAR 0 1
27344: PPUSH
27345: LD_INT 334
27347: PPUSH
27348: LD_INT 241
27350: PPUSH
27351: CALL_OW 428
27355: PPUSH
27356: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27360: LD_VAR 0 1
27364: PPUSH
27365: LD_INT 1
27367: PPUSH
27368: CALL_OW 183
// AddComExitBuilding ( un ) ;
27372: LD_VAR 0 1
27376: PPUSH
27377: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27381: LD_VAR 0 1
27385: PPUSH
27386: LD_EXP 43
27390: PPUSH
27391: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27395: LD_VAR 0 1
27399: PPUSH
27400: CALL_OW 255
27404: PUSH
27405: LD_INT 3
27407: EQUAL
27408: PUSH
27409: LD_VAR 0 1
27413: PUSH
27414: LD_EXP 60
27418: IN
27419: NOT
27420: AND
27421: IFFALSE 27920
// begin if not IsInArea ( un , ruMainBase ) then
27423: LD_VAR 0 1
27427: PPUSH
27428: LD_INT 10
27430: PPUSH
27431: CALL_OW 308
27435: NOT
27436: IFFALSE 27453
// ComMoveXY ( un , 62 , 98 ) ;
27438: LD_VAR 0 1
27442: PPUSH
27443: LD_INT 62
27445: PPUSH
27446: LD_INT 98
27448: PPUSH
27449: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27453: LD_INT 35
27455: PPUSH
27456: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27460: LD_VAR 0 1
27464: PPUSH
27465: CALL_OW 302
27469: NOT
27470: PUSH
27471: LD_VAR 0 1
27475: PPUSH
27476: LD_INT 10
27478: PPUSH
27479: CALL_OW 308
27483: OR
27484: IFFALSE 27453
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27486: LD_ADDR_EXP 58
27490: PUSH
27491: LD_EXP 58
27495: PPUSH
27496: LD_EXP 58
27500: PUSH
27501: LD_INT 1
27503: PLUS
27504: PPUSH
27505: LD_VAR 0 1
27509: PPUSH
27510: CALL_OW 1
27514: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27515: LD_ADDR_VAR 0 8
27519: PUSH
27520: LD_INT 72
27522: PUSH
27523: LD_INT 12
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: ST_TO_ADDR
// if tmp then
27530: LD_VAR 0 8
27534: IFFALSE 27649
// for i in tmp do
27536: LD_ADDR_VAR 0 5
27540: PUSH
27541: LD_VAR 0 8
27545: PUSH
27546: FOR_IN
27547: IFFALSE 27647
// if UnitsInside ( i ) < 6 then
27549: LD_VAR 0 5
27553: PPUSH
27554: CALL_OW 313
27558: PUSH
27559: LD_INT 6
27561: LESS
27562: IFFALSE 27645
// begin AddComEnterUnit ( un , i ) ;
27564: LD_VAR 0 1
27568: PPUSH
27569: LD_VAR 0 5
27573: PPUSH
27574: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27578: LD_VAR 0 8
27582: PPUSH
27583: LD_INT 22
27585: PUSH
27586: LD_INT 23
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: PPUSH
27596: LD_INT 2
27598: PPUSH
27599: CALL_OW 12
27603: ARRAY
27604: PPUSH
27605: LD_INT 1
27607: PPUSH
27608: LD_INT 1
27610: PPUSH
27611: LD_INT 44
27613: PUSH
27614: LD_INT 46
27616: PUSH
27617: LD_INT 47
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: PPUSH
27628: LD_INT 3
27630: PPUSH
27631: CALL_OW 12
27635: ARRAY
27636: PPUSH
27637: CALL_OW 185
// exit ;
27641: POP
27642: POP
27643: GO 27920
// end ;
27645: GO 27546
27647: POP
27648: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27649: LD_ADDR_VAR 0 8
27653: PUSH
27654: LD_INT 10
27656: PPUSH
27657: LD_INT 22
27659: PUSH
27660: LD_INT 3
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 50
27669: PUSH
27670: EMPTY
27671: LIST
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: LD_INT 30
27678: PUSH
27679: LD_INT 4
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 30
27688: PUSH
27689: LD_INT 5
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 30
27698: PUSH
27699: LD_INT 32
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 30
27708: PUSH
27709: LD_INT 31
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: PPUSH
27728: CALL_OW 70
27732: ST_TO_ADDR
// if not tmp then
27733: LD_VAR 0 8
27737: NOT
27738: IFFALSE 27757
// begin ComMoveXY ( un , 83 , 133 ) ;
27740: LD_VAR 0 1
27744: PPUSH
27745: LD_INT 83
27747: PPUSH
27748: LD_INT 133
27750: PPUSH
27751: CALL_OW 111
// exit ;
27755: GO 27920
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
27757: LD_ADDR_VAR 0 6
27761: PUSH
27762: LD_VAR 0 1
27766: PPUSH
27767: LD_VAR 0 8
27771: PPUSH
27772: LD_INT 1
27774: PPUSH
27775: LD_INT 1
27777: PPUSH
27778: CALL 34674 0 4
27782: PUSH
27783: FOR_IN
27784: IFFALSE 27918
// begin case GetBType ( b ) of b_armoury , b_barracks :
27786: LD_VAR 0 6
27790: PPUSH
27791: CALL_OW 266
27795: PUSH
27796: LD_INT 4
27798: DOUBLE
27799: EQUAL
27800: IFTRUE 27810
27802: LD_INT 5
27804: DOUBLE
27805: EQUAL
27806: IFTRUE 27810
27808: GO 27821
27810: POP
// p := 6 ; b_breastwork , b_bunker :
27811: LD_ADDR_VAR 0 7
27815: PUSH
27816: LD_INT 6
27818: ST_TO_ADDR
27819: GO 27847
27821: LD_INT 31
27823: DOUBLE
27824: EQUAL
27825: IFTRUE 27835
27827: LD_INT 32
27829: DOUBLE
27830: EQUAL
27831: IFTRUE 27835
27833: GO 27846
27835: POP
// p := 1 ; end ;
27836: LD_ADDR_VAR 0 7
27840: PUSH
27841: LD_INT 1
27843: ST_TO_ADDR
27844: GO 27847
27846: POP
// if UnitsInside ( b ) < p then
27847: LD_VAR 0 6
27851: PPUSH
27852: CALL_OW 313
27856: PUSH
27857: LD_VAR 0 7
27861: LESS
27862: IFFALSE 27916
// begin ComEnterUnit ( un , b ) ;
27864: LD_VAR 0 1
27868: PPUSH
27869: LD_VAR 0 6
27873: PPUSH
27874: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
27878: LD_VAR 0 6
27882: PPUSH
27883: CALL_OW 266
27887: PUSH
27888: LD_INT 4
27890: PUSH
27891: LD_INT 5
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: IN
27898: IFFALSE 27912
// AddComChangeProfession ( un , class_soldier ) ;
27900: LD_VAR 0 1
27904: PPUSH
27905: LD_INT 1
27907: PPUSH
27908: CALL_OW 183
// exit ;
27912: POP
27913: POP
27914: GO 27920
// end ; end ;
27916: GO 27783
27918: POP
27919: POP
// end ; end ;
27920: PPOPN 8
27922: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
27923: LD_INT 0
27925: PPUSH
27926: PPUSH
27927: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
27928: LD_VAR 0 2
27932: PPUSH
27933: CALL_OW 255
27937: PUSH
27938: LD_INT 3
27940: EQUAL
27941: PUSH
27942: LD_VAR 0 2
27946: PPUSH
27947: CALL_OW 257
27951: PUSH
27952: LD_INT 1
27954: EQUAL
27955: AND
27956: PUSH
27957: LD_VAR 0 2
27961: PUSH
27962: LD_EXP 58
27966: IN
27967: NOT
27968: AND
27969: IFFALSE 28282
// begin ComMoveToArea ( un , ruMainBase ) ;
27971: LD_VAR 0 2
27975: PPUSH
27976: LD_INT 10
27978: PPUSH
27979: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
27983: LD_INT 35
27985: PPUSH
27986: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27990: LD_VAR 0 2
27994: PPUSH
27995: CALL_OW 302
27999: NOT
28000: PUSH
28001: LD_VAR 0 2
28005: PPUSH
28006: LD_INT 10
28008: PPUSH
28009: CALL_OW 308
28013: OR
28014: IFFALSE 27983
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28016: LD_ADDR_EXP 58
28020: PUSH
28021: LD_EXP 58
28025: PPUSH
28026: LD_EXP 58
28030: PUSH
28031: LD_INT 1
28033: PLUS
28034: PPUSH
28035: LD_VAR 0 2
28039: PPUSH
28040: CALL_OW 1
28044: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28045: LD_ADDR_VAR 0 4
28049: PUSH
28050: LD_INT 10
28052: PPUSH
28053: LD_INT 22
28055: PUSH
28056: LD_INT 3
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 50
28065: PUSH
28066: EMPTY
28067: LIST
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: LD_INT 30
28074: PUSH
28075: LD_INT 4
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 30
28084: PUSH
28085: LD_INT 5
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 30
28094: PUSH
28095: LD_INT 32
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 30
28104: PUSH
28105: LD_INT 31
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: PPUSH
28124: CALL_OW 70
28128: ST_TO_ADDR
// if not tmp then
28129: LD_VAR 0 4
28133: NOT
28134: IFFALSE 28153
// begin ComMoveXY ( un , 83 , 133 ) ;
28136: LD_VAR 0 2
28140: PPUSH
28141: LD_INT 83
28143: PPUSH
28144: LD_INT 133
28146: PPUSH
28147: CALL_OW 111
// exit ;
28151: GO 28531
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28153: LD_ADDR_VAR 0 5
28157: PUSH
28158: LD_VAR 0 2
28162: PPUSH
28163: LD_VAR 0 4
28167: PPUSH
28168: LD_INT 1
28170: PPUSH
28171: LD_INT 1
28173: PPUSH
28174: CALL 34674 0 4
28178: PUSH
28179: FOR_IN
28180: IFFALSE 28280
// begin case GetBType ( b ) of b_armoury , b_barracks :
28182: LD_VAR 0 5
28186: PPUSH
28187: CALL_OW 266
28191: PUSH
28192: LD_INT 4
28194: DOUBLE
28195: EQUAL
28196: IFTRUE 28206
28198: LD_INT 5
28200: DOUBLE
28201: EQUAL
28202: IFTRUE 28206
28204: GO 28217
28206: POP
// p := 6 ; b_breastwork , b_bunker :
28207: LD_ADDR_VAR 0 3
28211: PUSH
28212: LD_INT 6
28214: ST_TO_ADDR
28215: GO 28243
28217: LD_INT 31
28219: DOUBLE
28220: EQUAL
28221: IFTRUE 28231
28223: LD_INT 32
28225: DOUBLE
28226: EQUAL
28227: IFTRUE 28231
28229: GO 28242
28231: POP
// p := 1 ; end ;
28232: LD_ADDR_VAR 0 3
28236: PUSH
28237: LD_INT 1
28239: ST_TO_ADDR
28240: GO 28243
28242: POP
// if UnitsInside ( b ) < p then
28243: LD_VAR 0 5
28247: PPUSH
28248: CALL_OW 313
28252: PUSH
28253: LD_VAR 0 3
28257: LESS
28258: IFFALSE 28278
// begin ComEnterUnit ( un , b ) ;
28260: LD_VAR 0 2
28264: PPUSH
28265: LD_VAR 0 5
28269: PPUSH
28270: CALL_OW 120
// exit ;
28274: POP
28275: POP
28276: GO 28531
// end ; end ;
28278: GO 28179
28280: POP
28281: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28282: LD_VAR 0 2
28286: PUSH
28287: LD_EXP 58
28291: IN
28292: PUSH
28293: LD_VAR 0 2
28297: PPUSH
28298: CALL_OW 257
28302: PUSH
28303: LD_INT 1
28305: EQUAL
28306: AND
28307: IFFALSE 28531
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28309: LD_ADDR_VAR 0 4
28313: PUSH
28314: LD_INT 10
28316: PPUSH
28317: LD_INT 22
28319: PUSH
28320: LD_INT 3
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 50
28329: PUSH
28330: EMPTY
28331: LIST
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: LD_INT 30
28338: PUSH
28339: LD_INT 4
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 30
28348: PUSH
28349: LD_INT 5
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 30
28358: PUSH
28359: LD_INT 32
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 30
28368: PUSH
28369: LD_INT 31
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: PPUSH
28388: CALL_OW 70
28392: ST_TO_ADDR
// if not tmp then
28393: LD_VAR 0 4
28397: NOT
28398: IFFALSE 28402
// exit ;
28400: GO 28531
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28402: LD_ADDR_VAR 0 5
28406: PUSH
28407: LD_VAR 0 2
28411: PPUSH
28412: LD_VAR 0 4
28416: PPUSH
28417: LD_INT 1
28419: PPUSH
28420: LD_INT 1
28422: PPUSH
28423: CALL 34674 0 4
28427: PUSH
28428: FOR_IN
28429: IFFALSE 28529
// begin case GetBType ( b ) of b_armoury , b_barracks :
28431: LD_VAR 0 5
28435: PPUSH
28436: CALL_OW 266
28440: PUSH
28441: LD_INT 4
28443: DOUBLE
28444: EQUAL
28445: IFTRUE 28455
28447: LD_INT 5
28449: DOUBLE
28450: EQUAL
28451: IFTRUE 28455
28453: GO 28466
28455: POP
// p := 6 ; b_breastwork , b_bunker :
28456: LD_ADDR_VAR 0 3
28460: PUSH
28461: LD_INT 6
28463: ST_TO_ADDR
28464: GO 28492
28466: LD_INT 31
28468: DOUBLE
28469: EQUAL
28470: IFTRUE 28480
28472: LD_INT 32
28474: DOUBLE
28475: EQUAL
28476: IFTRUE 28480
28478: GO 28491
28480: POP
// p := 1 ; end ;
28481: LD_ADDR_VAR 0 3
28485: PUSH
28486: LD_INT 1
28488: ST_TO_ADDR
28489: GO 28492
28491: POP
// if UnitsInside ( b ) < p then
28492: LD_VAR 0 5
28496: PPUSH
28497: CALL_OW 313
28501: PUSH
28502: LD_VAR 0 3
28506: LESS
28507: IFFALSE 28527
// begin ComEnterUnit ( un , b ) ;
28509: LD_VAR 0 2
28513: PPUSH
28514: LD_VAR 0 5
28518: PPUSH
28519: CALL_OW 120
// exit ;
28523: POP
28524: POP
28525: GO 28531
// end ; end ;
28527: GO 28428
28529: POP
28530: POP
// end ; end ;
28531: PPOPN 5
28533: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28534: LD_VAR 0 1
28538: PUSH
28539: LD_INT 2
28541: EQUAL
28542: PUSH
28543: LD_VAR 0 2
28547: PUSH
28548: LD_INT 5
28550: PUSH
28551: LD_INT 8
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: IN
28558: AND
28559: IFFALSE 28568
// YouLost ( FriendlyFire ) ;
28561: LD_STRING FriendlyFire
28563: PPUSH
28564: CALL_OW 104
// end ;
28568: PPOPN 2
28570: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28571: LD_VAR 0 1
28575: PPUSH
28576: CALL_OW 255
28580: PUSH
28581: LD_INT 8
28583: EQUAL
28584: PUSH
28585: LD_VAR 0 1
28589: PPUSH
28590: CALL_OW 266
28594: PUSH
28595: LD_INT 5
28597: EQUAL
28598: AND
28599: IFFALSE 28613
// SetClass ( unit , class_mortar ) ;
28601: LD_VAR 0 2
28605: PPUSH
28606: LD_INT 8
28608: PPUSH
28609: CALL_OW 336
// end ; end_of_file
28613: PPOPN 2
28615: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 400 , 320 , 280 , 250 ] [ Difficulty ] do
28616: LD_INT 6
28618: PPUSH
28619: LD_INT 1
28621: PPUSH
28622: CALL_OW 287
28626: PUSH
28627: LD_INT 400
28629: PUSH
28630: LD_INT 320
28632: PUSH
28633: LD_INT 280
28635: PUSH
28636: LD_INT 250
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: PUSH
28645: LD_OWVAR 67
28649: ARRAY
28650: LESS
28651: IFFALSE 28678
28653: GO 28655
28655: DISABLE
// begin enable ;
28656: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
28657: LD_INT 1
28659: PPUSH
28660: LD_INT 5
28662: PPUSH
28663: CALL_OW 12
28667: PPUSH
28668: LD_INT 6
28670: PPUSH
28671: LD_INT 1
28673: PPUSH
28674: CALL_OW 55
// end ;
28678: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] do
28679: LD_INT 50
28681: PPUSH
28682: CALL_OW 13
28686: PUSH
28687: LD_OWVAR 1
28691: PUSH
28692: LD_INT 58800
28694: PUSH
28695: LD_INT 56700
28697: PUSH
28698: LD_INT 54600
28700: PUSH
28701: LD_INT 52500
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: PUSH
28710: LD_OWVAR 67
28714: ARRAY
28715: LESS
28716: AND
28717: IFFALSE 28759
28719: GO 28721
28721: DISABLE
// begin enable ;
28722: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
28723: LD_INT 35
28725: PPUSH
28726: LD_INT 350
28728: PPUSH
28729: CALL_OW 12
28733: PPUSH
28734: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
28738: LD_INT 1
28740: PPUSH
28741: LD_INT 5
28743: PPUSH
28744: CALL_OW 12
28748: PPUSH
28749: LD_INT 21
28751: PPUSH
28752: LD_INT 1
28754: PPUSH
28755: CALL_OW 55
// end ; end_of_file
28759: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
28760: LD_EXP 18
28764: PUSH
28765: LD_EXP 20
28769: AND
28770: PUSH
28771: LD_EXP 17
28775: PUSH
28776: LD_EXP 19
28780: AND
28781: OR
28782: IFFALSE 29101
28784: GO 28786
28786: DISABLE
// begin enable ;
28787: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
28788: LD_EXP 18
28792: PUSH
28793: LD_EXP 20
28797: AND
28798: PUSH
28799: LD_EXP 17
28803: PUSH
28804: LD_EXP 19
28808: AND
28809: AND
28810: IFFALSE 28947
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
28812: LD_ADDR_OWVAR 47
28816: PUSH
28817: LD_STRING #X106-1a
28819: PUSH
28820: LD_EXP 21
28824: PUSH
28825: LD_INT 16
28827: PPUSH
28828: LD_INT 22
28830: PUSH
28831: LD_INT 2
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 21
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 33
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 58
28860: PUSH
28861: EMPTY
28862: LIST
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: PPUSH
28870: CALL_OW 70
28874: MINUS
28875: PPUSH
28876: CALL 68756 0 1
28880: PUSH
28881: LD_STRING #X106-3a
28883: PUSH
28884: LD_EXP 20
28888: PUSH
28889: LD_STRING #X106-1
28891: PUSH
28892: LD_EXP 50
28896: PUSH
28897: LD_INT 0
28899: PLUS
28900: PUSH
28901: LD_EXP 50
28905: PPUSH
28906: LD_INT 55
28908: PUSH
28909: EMPTY
28910: LIST
28911: PPUSH
28912: CALL_OW 72
28916: PUSH
28917: LD_INT 0
28919: PLUS
28920: MINUS
28921: PPUSH
28922: CALL 68756 0 1
28926: PUSH
28927: LD_STRING #X106-3
28929: PUSH
28930: LD_EXP 19
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: ST_TO_ADDR
// end else
28945: GO 29101
// if omarWantVehicles and omarWaitingForVehiclesTimer then
28947: LD_EXP 18
28951: PUSH
28952: LD_EXP 20
28956: AND
28957: IFFALSE 29044
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
28959: LD_ADDR_OWVAR 47
28963: PUSH
28964: LD_STRING #X106-1a
28966: PUSH
28967: LD_EXP 21
28971: PUSH
28972: LD_INT 16
28974: PPUSH
28975: LD_INT 22
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 21
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 33
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 58
29007: PUSH
29008: EMPTY
29009: LIST
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: PPUSH
29017: CALL_OW 70
29021: MINUS
29022: PPUSH
29023: CALL 68756 0 1
29027: PUSH
29028: LD_STRING #X106-3a
29030: PUSH
29031: LD_EXP 20
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: ST_TO_ADDR
// end else
29042: GO 29101
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29044: LD_ADDR_OWVAR 47
29048: PUSH
29049: LD_STRING #X106-1
29051: PUSH
29052: LD_EXP 50
29056: PUSH
29057: LD_INT 0
29059: PLUS
29060: PUSH
29061: LD_EXP 50
29065: PPUSH
29066: LD_INT 55
29068: PUSH
29069: EMPTY
29070: LIST
29071: PPUSH
29072: CALL_OW 72
29076: PUSH
29077: LD_INT 0
29079: PLUS
29080: MINUS
29081: PPUSH
29082: CALL 68756 0 1
29086: PUSH
29087: LD_STRING #X106-3
29089: PUSH
29090: LD_EXP 19
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: ST_TO_ADDR
// end ; end ; end_of_file
29101: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29102: LD_INT 0
29104: PPUSH
29105: PPUSH
// if exist_mode then
29106: LD_VAR 0 2
29110: IFFALSE 29135
// unit := CreateCharacter ( prefix & ident ) else
29112: LD_ADDR_VAR 0 5
29116: PUSH
29117: LD_VAR 0 3
29121: PUSH
29122: LD_VAR 0 1
29126: STR
29127: PPUSH
29128: CALL_OW 34
29132: ST_TO_ADDR
29133: GO 29150
// unit := NewCharacter ( ident ) ;
29135: LD_ADDR_VAR 0 5
29139: PUSH
29140: LD_VAR 0 1
29144: PPUSH
29145: CALL_OW 25
29149: ST_TO_ADDR
// result := unit ;
29150: LD_ADDR_VAR 0 4
29154: PUSH
29155: LD_VAR 0 5
29159: ST_TO_ADDR
// end ;
29160: LD_VAR 0 4
29164: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29165: LD_INT 0
29167: PPUSH
29168: PPUSH
// if not side or not nation then
29169: LD_VAR 0 1
29173: NOT
29174: PUSH
29175: LD_VAR 0 2
29179: NOT
29180: OR
29181: IFFALSE 29185
// exit ;
29183: GO 29953
// case nation of nation_american :
29185: LD_VAR 0 2
29189: PUSH
29190: LD_INT 1
29192: DOUBLE
29193: EQUAL
29194: IFTRUE 29198
29196: GO 29412
29198: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29199: LD_ADDR_VAR 0 4
29203: PUSH
29204: LD_INT 35
29206: PUSH
29207: LD_INT 45
29209: PUSH
29210: LD_INT 46
29212: PUSH
29213: LD_INT 47
29215: PUSH
29216: LD_INT 82
29218: PUSH
29219: LD_INT 83
29221: PUSH
29222: LD_INT 84
29224: PUSH
29225: LD_INT 85
29227: PUSH
29228: LD_INT 86
29230: PUSH
29231: LD_INT 1
29233: PUSH
29234: LD_INT 2
29236: PUSH
29237: LD_INT 6
29239: PUSH
29240: LD_INT 15
29242: PUSH
29243: LD_INT 16
29245: PUSH
29246: LD_INT 7
29248: PUSH
29249: LD_INT 12
29251: PUSH
29252: LD_INT 13
29254: PUSH
29255: LD_INT 10
29257: PUSH
29258: LD_INT 14
29260: PUSH
29261: LD_INT 20
29263: PUSH
29264: LD_INT 21
29266: PUSH
29267: LD_INT 22
29269: PUSH
29270: LD_INT 25
29272: PUSH
29273: LD_INT 32
29275: PUSH
29276: LD_INT 27
29278: PUSH
29279: LD_INT 36
29281: PUSH
29282: LD_INT 69
29284: PUSH
29285: LD_INT 39
29287: PUSH
29288: LD_INT 34
29290: PUSH
29291: LD_INT 40
29293: PUSH
29294: LD_INT 48
29296: PUSH
29297: LD_INT 49
29299: PUSH
29300: LD_INT 50
29302: PUSH
29303: LD_INT 51
29305: PUSH
29306: LD_INT 52
29308: PUSH
29309: LD_INT 53
29311: PUSH
29312: LD_INT 54
29314: PUSH
29315: LD_INT 55
29317: PUSH
29318: LD_INT 56
29320: PUSH
29321: LD_INT 57
29323: PUSH
29324: LD_INT 58
29326: PUSH
29327: LD_INT 59
29329: PUSH
29330: LD_INT 60
29332: PUSH
29333: LD_INT 61
29335: PUSH
29336: LD_INT 62
29338: PUSH
29339: LD_INT 80
29341: PUSH
29342: LD_INT 82
29344: PUSH
29345: LD_INT 83
29347: PUSH
29348: LD_INT 84
29350: PUSH
29351: LD_INT 85
29353: PUSH
29354: LD_INT 86
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: ST_TO_ADDR
29410: GO 29877
29412: LD_INT 2
29414: DOUBLE
29415: EQUAL
29416: IFTRUE 29420
29418: GO 29646
29420: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29421: LD_ADDR_VAR 0 4
29425: PUSH
29426: LD_INT 35
29428: PUSH
29429: LD_INT 45
29431: PUSH
29432: LD_INT 46
29434: PUSH
29435: LD_INT 47
29437: PUSH
29438: LD_INT 82
29440: PUSH
29441: LD_INT 83
29443: PUSH
29444: LD_INT 84
29446: PUSH
29447: LD_INT 85
29449: PUSH
29450: LD_INT 87
29452: PUSH
29453: LD_INT 70
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: LD_INT 11
29461: PUSH
29462: LD_INT 3
29464: PUSH
29465: LD_INT 4
29467: PUSH
29468: LD_INT 5
29470: PUSH
29471: LD_INT 6
29473: PUSH
29474: LD_INT 15
29476: PUSH
29477: LD_INT 18
29479: PUSH
29480: LD_INT 7
29482: PUSH
29483: LD_INT 17
29485: PUSH
29486: LD_INT 8
29488: PUSH
29489: LD_INT 20
29491: PUSH
29492: LD_INT 21
29494: PUSH
29495: LD_INT 22
29497: PUSH
29498: LD_INT 72
29500: PUSH
29501: LD_INT 26
29503: PUSH
29504: LD_INT 69
29506: PUSH
29507: LD_INT 39
29509: PUSH
29510: LD_INT 40
29512: PUSH
29513: LD_INT 41
29515: PUSH
29516: LD_INT 42
29518: PUSH
29519: LD_INT 43
29521: PUSH
29522: LD_INT 48
29524: PUSH
29525: LD_INT 49
29527: PUSH
29528: LD_INT 50
29530: PUSH
29531: LD_INT 51
29533: PUSH
29534: LD_INT 52
29536: PUSH
29537: LD_INT 53
29539: PUSH
29540: LD_INT 54
29542: PUSH
29543: LD_INT 55
29545: PUSH
29546: LD_INT 56
29548: PUSH
29549: LD_INT 60
29551: PUSH
29552: LD_INT 61
29554: PUSH
29555: LD_INT 62
29557: PUSH
29558: LD_INT 66
29560: PUSH
29561: LD_INT 67
29563: PUSH
29564: LD_INT 68
29566: PUSH
29567: LD_INT 81
29569: PUSH
29570: LD_INT 82
29572: PUSH
29573: LD_INT 83
29575: PUSH
29576: LD_INT 84
29578: PUSH
29579: LD_INT 85
29581: PUSH
29582: LD_INT 87
29584: PUSH
29585: LD_INT 88
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: ST_TO_ADDR
29644: GO 29877
29646: LD_INT 3
29648: DOUBLE
29649: EQUAL
29650: IFTRUE 29654
29652: GO 29876
29654: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29655: LD_ADDR_VAR 0 4
29659: PUSH
29660: LD_INT 46
29662: PUSH
29663: LD_INT 47
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: LD_INT 2
29671: PUSH
29672: LD_INT 82
29674: PUSH
29675: LD_INT 83
29677: PUSH
29678: LD_INT 84
29680: PUSH
29681: LD_INT 85
29683: PUSH
29684: LD_INT 86
29686: PUSH
29687: LD_INT 11
29689: PUSH
29690: LD_INT 9
29692: PUSH
29693: LD_INT 20
29695: PUSH
29696: LD_INT 19
29698: PUSH
29699: LD_INT 21
29701: PUSH
29702: LD_INT 24
29704: PUSH
29705: LD_INT 22
29707: PUSH
29708: LD_INT 25
29710: PUSH
29711: LD_INT 28
29713: PUSH
29714: LD_INT 29
29716: PUSH
29717: LD_INT 30
29719: PUSH
29720: LD_INT 31
29722: PUSH
29723: LD_INT 37
29725: PUSH
29726: LD_INT 38
29728: PUSH
29729: LD_INT 32
29731: PUSH
29732: LD_INT 27
29734: PUSH
29735: LD_INT 33
29737: PUSH
29738: LD_INT 69
29740: PUSH
29741: LD_INT 39
29743: PUSH
29744: LD_INT 34
29746: PUSH
29747: LD_INT 40
29749: PUSH
29750: LD_INT 71
29752: PUSH
29753: LD_INT 23
29755: PUSH
29756: LD_INT 44
29758: PUSH
29759: LD_INT 48
29761: PUSH
29762: LD_INT 49
29764: PUSH
29765: LD_INT 50
29767: PUSH
29768: LD_INT 51
29770: PUSH
29771: LD_INT 52
29773: PUSH
29774: LD_INT 53
29776: PUSH
29777: LD_INT 54
29779: PUSH
29780: LD_INT 55
29782: PUSH
29783: LD_INT 56
29785: PUSH
29786: LD_INT 57
29788: PUSH
29789: LD_INT 58
29791: PUSH
29792: LD_INT 59
29794: PUSH
29795: LD_INT 63
29797: PUSH
29798: LD_INT 64
29800: PUSH
29801: LD_INT 65
29803: PUSH
29804: LD_INT 82
29806: PUSH
29807: LD_INT 83
29809: PUSH
29810: LD_INT 84
29812: PUSH
29813: LD_INT 85
29815: PUSH
29816: LD_INT 86
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
29874: GO 29877
29876: POP
// if state > - 1 and state < 3 then
29877: LD_VAR 0 3
29881: PUSH
29882: LD_INT 1
29884: NEG
29885: GREATER
29886: PUSH
29887: LD_VAR 0 3
29891: PUSH
29892: LD_INT 3
29894: LESS
29895: AND
29896: IFFALSE 29953
// for i in result do
29898: LD_ADDR_VAR 0 5
29902: PUSH
29903: LD_VAR 0 4
29907: PUSH
29908: FOR_IN
29909: IFFALSE 29951
// if GetTech ( i , side ) <> state then
29911: LD_VAR 0 5
29915: PPUSH
29916: LD_VAR 0 1
29920: PPUSH
29921: CALL_OW 321
29925: PUSH
29926: LD_VAR 0 3
29930: NONEQUAL
29931: IFFALSE 29949
// result := result diff i ;
29933: LD_ADDR_VAR 0 4
29937: PUSH
29938: LD_VAR 0 4
29942: PUSH
29943: LD_VAR 0 5
29947: DIFF
29948: ST_TO_ADDR
29949: GO 29908
29951: POP
29952: POP
// end ;
29953: LD_VAR 0 4
29957: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29958: LD_INT 0
29960: PPUSH
29961: PPUSH
29962: PPUSH
// result := true ;
29963: LD_ADDR_VAR 0 3
29967: PUSH
29968: LD_INT 1
29970: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29971: LD_ADDR_VAR 0 5
29975: PUSH
29976: LD_VAR 0 2
29980: PPUSH
29981: CALL_OW 480
29985: ST_TO_ADDR
// if not tmp then
29986: LD_VAR 0 5
29990: NOT
29991: IFFALSE 29995
// exit ;
29993: GO 30044
// for i in tmp do
29995: LD_ADDR_VAR 0 4
29999: PUSH
30000: LD_VAR 0 5
30004: PUSH
30005: FOR_IN
30006: IFFALSE 30042
// if GetTech ( i , side ) <> state_researched then
30008: LD_VAR 0 4
30012: PPUSH
30013: LD_VAR 0 1
30017: PPUSH
30018: CALL_OW 321
30022: PUSH
30023: LD_INT 2
30025: NONEQUAL
30026: IFFALSE 30040
// begin result := false ;
30028: LD_ADDR_VAR 0 3
30032: PUSH
30033: LD_INT 0
30035: ST_TO_ADDR
// exit ;
30036: POP
30037: POP
30038: GO 30044
// end ;
30040: GO 30005
30042: POP
30043: POP
// end ;
30044: LD_VAR 0 3
30048: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30049: LD_INT 0
30051: PPUSH
30052: PPUSH
30053: PPUSH
30054: PPUSH
30055: PPUSH
30056: PPUSH
30057: PPUSH
30058: PPUSH
30059: PPUSH
30060: PPUSH
30061: PPUSH
30062: PPUSH
30063: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30064: LD_VAR 0 1
30068: NOT
30069: PUSH
30070: LD_VAR 0 1
30074: PPUSH
30075: CALL_OW 257
30079: PUSH
30080: LD_INT 9
30082: NONEQUAL
30083: OR
30084: IFFALSE 30088
// exit ;
30086: GO 30661
// side := GetSide ( unit ) ;
30088: LD_ADDR_VAR 0 9
30092: PUSH
30093: LD_VAR 0 1
30097: PPUSH
30098: CALL_OW 255
30102: ST_TO_ADDR
// tech_space := tech_spacanom ;
30103: LD_ADDR_VAR 0 12
30107: PUSH
30108: LD_INT 29
30110: ST_TO_ADDR
// tech_time := tech_taurad ;
30111: LD_ADDR_VAR 0 13
30115: PUSH
30116: LD_INT 28
30118: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30119: LD_ADDR_VAR 0 11
30123: PUSH
30124: LD_VAR 0 1
30128: PPUSH
30129: CALL_OW 310
30133: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30134: LD_VAR 0 11
30138: PPUSH
30139: CALL_OW 247
30143: PUSH
30144: LD_INT 2
30146: EQUAL
30147: IFFALSE 30151
// exit ;
30149: GO 30661
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30151: LD_ADDR_VAR 0 8
30155: PUSH
30156: LD_INT 81
30158: PUSH
30159: LD_VAR 0 9
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 3
30170: PUSH
30171: LD_INT 21
30173: PUSH
30174: LD_INT 3
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PPUSH
30189: CALL_OW 69
30193: ST_TO_ADDR
// if not tmp then
30194: LD_VAR 0 8
30198: NOT
30199: IFFALSE 30203
// exit ;
30201: GO 30661
// if in_unit then
30203: LD_VAR 0 11
30207: IFFALSE 30231
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30209: LD_ADDR_VAR 0 10
30213: PUSH
30214: LD_VAR 0 8
30218: PPUSH
30219: LD_VAR 0 11
30223: PPUSH
30224: CALL_OW 74
30228: ST_TO_ADDR
30229: GO 30251
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30231: LD_ADDR_VAR 0 10
30235: PUSH
30236: LD_VAR 0 8
30240: PPUSH
30241: LD_VAR 0 1
30245: PPUSH
30246: CALL_OW 74
30250: ST_TO_ADDR
// if not enemy then
30251: LD_VAR 0 10
30255: NOT
30256: IFFALSE 30260
// exit ;
30258: GO 30661
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30260: LD_VAR 0 11
30264: PUSH
30265: LD_VAR 0 11
30269: PPUSH
30270: LD_VAR 0 10
30274: PPUSH
30275: CALL_OW 296
30279: PUSH
30280: LD_INT 13
30282: GREATER
30283: AND
30284: PUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: LD_VAR 0 10
30294: PPUSH
30295: CALL_OW 296
30299: PUSH
30300: LD_INT 12
30302: GREATER
30303: OR
30304: IFFALSE 30308
// exit ;
30306: GO 30661
// missile := [ 1 ] ;
30308: LD_ADDR_VAR 0 14
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: EMPTY
30317: LIST
30318: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30319: LD_VAR 0 9
30323: PPUSH
30324: LD_VAR 0 12
30328: PPUSH
30329: CALL_OW 325
30333: IFFALSE 30362
// missile := Replace ( missile , missile + 1 , 2 ) ;
30335: LD_ADDR_VAR 0 14
30339: PUSH
30340: LD_VAR 0 14
30344: PPUSH
30345: LD_VAR 0 14
30349: PUSH
30350: LD_INT 1
30352: PLUS
30353: PPUSH
30354: LD_INT 2
30356: PPUSH
30357: CALL_OW 1
30361: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30362: LD_VAR 0 9
30366: PPUSH
30367: LD_VAR 0 13
30371: PPUSH
30372: CALL_OW 325
30376: PUSH
30377: LD_VAR 0 10
30381: PPUSH
30382: CALL_OW 255
30386: PPUSH
30387: LD_VAR 0 13
30391: PPUSH
30392: CALL_OW 325
30396: NOT
30397: AND
30398: IFFALSE 30427
// missile := Replace ( missile , missile + 1 , 3 ) ;
30400: LD_ADDR_VAR 0 14
30404: PUSH
30405: LD_VAR 0 14
30409: PPUSH
30410: LD_VAR 0 14
30414: PUSH
30415: LD_INT 1
30417: PLUS
30418: PPUSH
30419: LD_INT 3
30421: PPUSH
30422: CALL_OW 1
30426: ST_TO_ADDR
// if missile < 2 then
30427: LD_VAR 0 14
30431: PUSH
30432: LD_INT 2
30434: LESS
30435: IFFALSE 30439
// exit ;
30437: GO 30661
// x := GetX ( enemy ) ;
30439: LD_ADDR_VAR 0 4
30443: PUSH
30444: LD_VAR 0 10
30448: PPUSH
30449: CALL_OW 250
30453: ST_TO_ADDR
// y := GetY ( enemy ) ;
30454: LD_ADDR_VAR 0 5
30458: PUSH
30459: LD_VAR 0 10
30463: PPUSH
30464: CALL_OW 251
30468: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30469: LD_ADDR_VAR 0 6
30473: PUSH
30474: LD_VAR 0 4
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PPUSH
30483: LD_INT 1
30485: PPUSH
30486: CALL_OW 12
30490: PLUS
30491: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30492: LD_ADDR_VAR 0 7
30496: PUSH
30497: LD_VAR 0 5
30501: PUSH
30502: LD_INT 1
30504: NEG
30505: PPUSH
30506: LD_INT 1
30508: PPUSH
30509: CALL_OW 12
30513: PLUS
30514: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30515: LD_VAR 0 6
30519: PPUSH
30520: LD_VAR 0 7
30524: PPUSH
30525: CALL_OW 488
30529: NOT
30530: IFFALSE 30552
// begin _x := x ;
30532: LD_ADDR_VAR 0 6
30536: PUSH
30537: LD_VAR 0 4
30541: ST_TO_ADDR
// _y := y ;
30542: LD_ADDR_VAR 0 7
30546: PUSH
30547: LD_VAR 0 5
30551: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30552: LD_ADDR_VAR 0 3
30556: PUSH
30557: LD_INT 1
30559: PPUSH
30560: LD_VAR 0 14
30564: PPUSH
30565: CALL_OW 12
30569: ST_TO_ADDR
// case i of 1 :
30570: LD_VAR 0 3
30574: PUSH
30575: LD_INT 1
30577: DOUBLE
30578: EQUAL
30579: IFTRUE 30583
30581: GO 30600
30583: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30584: LD_VAR 0 1
30588: PPUSH
30589: LD_VAR 0 10
30593: PPUSH
30594: CALL_OW 115
30598: GO 30661
30600: LD_INT 2
30602: DOUBLE
30603: EQUAL
30604: IFTRUE 30608
30606: GO 30630
30608: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30609: LD_VAR 0 1
30613: PPUSH
30614: LD_VAR 0 6
30618: PPUSH
30619: LD_VAR 0 7
30623: PPUSH
30624: CALL_OW 153
30628: GO 30661
30630: LD_INT 3
30632: DOUBLE
30633: EQUAL
30634: IFTRUE 30638
30636: GO 30660
30638: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30639: LD_VAR 0 1
30643: PPUSH
30644: LD_VAR 0 6
30648: PPUSH
30649: LD_VAR 0 7
30653: PPUSH
30654: CALL_OW 154
30658: GO 30661
30660: POP
// end ;
30661: LD_VAR 0 2
30665: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30666: LD_INT 0
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
30673: PPUSH
// if not unit or not building then
30674: LD_VAR 0 1
30678: NOT
30679: PUSH
30680: LD_VAR 0 2
30684: NOT
30685: OR
30686: IFFALSE 30690
// exit ;
30688: GO 30848
// x := GetX ( building ) ;
30690: LD_ADDR_VAR 0 5
30694: PUSH
30695: LD_VAR 0 2
30699: PPUSH
30700: CALL_OW 250
30704: ST_TO_ADDR
// y := GetY ( building ) ;
30705: LD_ADDR_VAR 0 6
30709: PUSH
30710: LD_VAR 0 2
30714: PPUSH
30715: CALL_OW 251
30719: ST_TO_ADDR
// for i = 0 to 5 do
30720: LD_ADDR_VAR 0 4
30724: PUSH
30725: DOUBLE
30726: LD_INT 0
30728: DEC
30729: ST_TO_ADDR
30730: LD_INT 5
30732: PUSH
30733: FOR_TO
30734: IFFALSE 30846
// begin _x := ShiftX ( x , i , 3 ) ;
30736: LD_ADDR_VAR 0 7
30740: PUSH
30741: LD_VAR 0 5
30745: PPUSH
30746: LD_VAR 0 4
30750: PPUSH
30751: LD_INT 3
30753: PPUSH
30754: CALL_OW 272
30758: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30759: LD_ADDR_VAR 0 8
30763: PUSH
30764: LD_VAR 0 6
30768: PPUSH
30769: LD_VAR 0 4
30773: PPUSH
30774: LD_INT 3
30776: PPUSH
30777: CALL_OW 273
30781: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30782: LD_VAR 0 7
30786: PPUSH
30787: LD_VAR 0 8
30791: PPUSH
30792: CALL_OW 488
30796: NOT
30797: IFFALSE 30801
// continue ;
30799: GO 30733
// if HexInfo ( _x , _y ) = 0 then
30801: LD_VAR 0 7
30805: PPUSH
30806: LD_VAR 0 8
30810: PPUSH
30811: CALL_OW 428
30815: PUSH
30816: LD_INT 0
30818: EQUAL
30819: IFFALSE 30844
// begin ComMoveXY ( unit , _x , _y ) ;
30821: LD_VAR 0 1
30825: PPUSH
30826: LD_VAR 0 7
30830: PPUSH
30831: LD_VAR 0 8
30835: PPUSH
30836: CALL_OW 111
// exit ;
30840: POP
30841: POP
30842: GO 30848
// end ; end ;
30844: GO 30733
30846: POP
30847: POP
// end ;
30848: LD_VAR 0 3
30852: RET
// export function ScanBase ( side , base_area ) ; begin
30853: LD_INT 0
30855: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30856: LD_ADDR_VAR 0 3
30860: PUSH
30861: LD_VAR 0 2
30865: PPUSH
30866: LD_INT 81
30868: PUSH
30869: LD_VAR 0 1
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PPUSH
30878: CALL_OW 70
30882: ST_TO_ADDR
// end ;
30883: LD_VAR 0 3
30887: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30888: LD_INT 0
30890: PPUSH
30891: PPUSH
30892: PPUSH
30893: PPUSH
// result := false ;
30894: LD_ADDR_VAR 0 2
30898: PUSH
30899: LD_INT 0
30901: ST_TO_ADDR
// side := GetSide ( unit ) ;
30902: LD_ADDR_VAR 0 3
30906: PUSH
30907: LD_VAR 0 1
30911: PPUSH
30912: CALL_OW 255
30916: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30917: LD_ADDR_VAR 0 4
30921: PUSH
30922: LD_VAR 0 1
30926: PPUSH
30927: CALL_OW 248
30931: ST_TO_ADDR
// case nat of 1 :
30932: LD_VAR 0 4
30936: PUSH
30937: LD_INT 1
30939: DOUBLE
30940: EQUAL
30941: IFTRUE 30945
30943: GO 30956
30945: POP
// tech := tech_lassight ; 2 :
30946: LD_ADDR_VAR 0 5
30950: PUSH
30951: LD_INT 12
30953: ST_TO_ADDR
30954: GO 30995
30956: LD_INT 2
30958: DOUBLE
30959: EQUAL
30960: IFTRUE 30964
30962: GO 30975
30964: POP
// tech := tech_mortar ; 3 :
30965: LD_ADDR_VAR 0 5
30969: PUSH
30970: LD_INT 41
30972: ST_TO_ADDR
30973: GO 30995
30975: LD_INT 3
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 30994
30983: POP
// tech := tech_bazooka ; end ;
30984: LD_ADDR_VAR 0 5
30988: PUSH
30989: LD_INT 44
30991: ST_TO_ADDR
30992: GO 30995
30994: POP
// if Researched ( side , tech ) then
30995: LD_VAR 0 3
30999: PPUSH
31000: LD_VAR 0 5
31004: PPUSH
31005: CALL_OW 325
31009: IFFALSE 31036
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31011: LD_ADDR_VAR 0 2
31015: PUSH
31016: LD_INT 5
31018: PUSH
31019: LD_INT 8
31021: PUSH
31022: LD_INT 9
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: LIST
31029: PUSH
31030: LD_VAR 0 4
31034: ARRAY
31035: ST_TO_ADDR
// end ;
31036: LD_VAR 0 2
31040: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31041: LD_INT 0
31043: PPUSH
31044: PPUSH
31045: PPUSH
// if not mines then
31046: LD_VAR 0 2
31050: NOT
31051: IFFALSE 31055
// exit ;
31053: GO 31199
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31055: LD_ADDR_VAR 0 5
31059: PUSH
31060: LD_INT 81
31062: PUSH
31063: LD_VAR 0 1
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 3
31074: PUSH
31075: LD_INT 21
31077: PUSH
31078: LD_INT 3
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PPUSH
31093: CALL_OW 69
31097: ST_TO_ADDR
// for i in mines do
31098: LD_ADDR_VAR 0 4
31102: PUSH
31103: LD_VAR 0 2
31107: PUSH
31108: FOR_IN
31109: IFFALSE 31197
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31111: LD_VAR 0 4
31115: PUSH
31116: LD_INT 1
31118: ARRAY
31119: PPUSH
31120: LD_VAR 0 4
31124: PUSH
31125: LD_INT 2
31127: ARRAY
31128: PPUSH
31129: CALL_OW 458
31133: NOT
31134: IFFALSE 31138
// continue ;
31136: GO 31108
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31138: LD_VAR 0 4
31142: PUSH
31143: LD_INT 1
31145: ARRAY
31146: PPUSH
31147: LD_VAR 0 4
31151: PUSH
31152: LD_INT 2
31154: ARRAY
31155: PPUSH
31156: CALL_OW 428
31160: PUSH
31161: LD_VAR 0 5
31165: IN
31166: IFFALSE 31195
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31168: LD_VAR 0 4
31172: PUSH
31173: LD_INT 1
31175: ARRAY
31176: PPUSH
31177: LD_VAR 0 4
31181: PUSH
31182: LD_INT 2
31184: ARRAY
31185: PPUSH
31186: LD_VAR 0 1
31190: PPUSH
31191: CALL_OW 456
// end ;
31195: GO 31108
31197: POP
31198: POP
// end ;
31199: LD_VAR 0 3
31203: RET
// export function Count ( array ) ; var i ; begin
31204: LD_INT 0
31206: PPUSH
31207: PPUSH
// result := 0 ;
31208: LD_ADDR_VAR 0 2
31212: PUSH
31213: LD_INT 0
31215: ST_TO_ADDR
// for i in array do
31216: LD_ADDR_VAR 0 3
31220: PUSH
31221: LD_VAR 0 1
31225: PUSH
31226: FOR_IN
31227: IFFALSE 31251
// if i then
31229: LD_VAR 0 3
31233: IFFALSE 31249
// result := result + 1 ;
31235: LD_ADDR_VAR 0 2
31239: PUSH
31240: LD_VAR 0 2
31244: PUSH
31245: LD_INT 1
31247: PLUS
31248: ST_TO_ADDR
31249: GO 31226
31251: POP
31252: POP
// end ;
31253: LD_VAR 0 2
31257: RET
// export function IsEmpty ( building ) ; begin
31258: LD_INT 0
31260: PPUSH
// if not building then
31261: LD_VAR 0 1
31265: NOT
31266: IFFALSE 31270
// exit ;
31268: GO 31313
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31270: LD_ADDR_VAR 0 2
31274: PUSH
31275: LD_VAR 0 1
31279: PUSH
31280: LD_INT 22
31282: PUSH
31283: LD_VAR 0 1
31287: PPUSH
31288: CALL_OW 255
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 58
31299: PUSH
31300: EMPTY
31301: LIST
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PPUSH
31307: CALL_OW 69
31311: IN
31312: ST_TO_ADDR
// end ;
31313: LD_VAR 0 2
31317: RET
// export function IsNotFull ( building ) ; var places ; begin
31318: LD_INT 0
31320: PPUSH
31321: PPUSH
// if not building then
31322: LD_VAR 0 1
31326: NOT
31327: IFFALSE 31331
// exit ;
31329: GO 31502
// result := false ;
31331: LD_ADDR_VAR 0 2
31335: PUSH
31336: LD_INT 0
31338: ST_TO_ADDR
// places := 0 ;
31339: LD_ADDR_VAR 0 3
31343: PUSH
31344: LD_INT 0
31346: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
31347: LD_VAR 0 1
31351: PPUSH
31352: CALL_OW 266
31356: PUSH
31357: LD_INT 0
31359: DOUBLE
31360: EQUAL
31361: IFTRUE 31419
31363: LD_INT 1
31365: DOUBLE
31366: EQUAL
31367: IFTRUE 31419
31369: LD_INT 6
31371: DOUBLE
31372: EQUAL
31373: IFTRUE 31419
31375: LD_INT 7
31377: DOUBLE
31378: EQUAL
31379: IFTRUE 31419
31381: LD_INT 8
31383: DOUBLE
31384: EQUAL
31385: IFTRUE 31419
31387: LD_INT 4
31389: DOUBLE
31390: EQUAL
31391: IFTRUE 31419
31393: LD_INT 5
31395: DOUBLE
31396: EQUAL
31397: IFTRUE 31419
31399: LD_INT 2
31401: DOUBLE
31402: EQUAL
31403: IFTRUE 31419
31405: LD_INT 3
31407: DOUBLE
31408: EQUAL
31409: IFTRUE 31419
31411: LD_INT 35
31413: DOUBLE
31414: EQUAL
31415: IFTRUE 31419
31417: GO 31430
31419: POP
// places := 6 ; b_bunker , b_breastwork :
31420: LD_ADDR_VAR 0 3
31424: PUSH
31425: LD_INT 6
31427: ST_TO_ADDR
31428: GO 31475
31430: LD_INT 32
31432: DOUBLE
31433: EQUAL
31434: IFTRUE 31444
31436: LD_INT 31
31438: DOUBLE
31439: EQUAL
31440: IFTRUE 31444
31442: GO 31455
31444: POP
// places := 1 ; b_control_tower :
31445: LD_ADDR_VAR 0 3
31449: PUSH
31450: LD_INT 1
31452: ST_TO_ADDR
31453: GO 31475
31455: LD_INT 36
31457: DOUBLE
31458: EQUAL
31459: IFTRUE 31463
31461: GO 31474
31463: POP
// places := 3 ; end ;
31464: LD_ADDR_VAR 0 3
31468: PUSH
31469: LD_INT 3
31471: ST_TO_ADDR
31472: GO 31475
31474: POP
// if places then
31475: LD_VAR 0 3
31479: IFFALSE 31502
// result := UnitsInside ( building ) < places ;
31481: LD_ADDR_VAR 0 2
31485: PUSH
31486: LD_VAR 0 1
31490: PPUSH
31491: CALL_OW 313
31495: PUSH
31496: LD_VAR 0 3
31500: LESS
31501: ST_TO_ADDR
// end ;
31502: LD_VAR 0 2
31506: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31507: LD_INT 0
31509: PPUSH
31510: PPUSH
31511: PPUSH
31512: PPUSH
// tmp := [ ] ;
31513: LD_ADDR_VAR 0 3
31517: PUSH
31518: EMPTY
31519: ST_TO_ADDR
// list := [ ] ;
31520: LD_ADDR_VAR 0 5
31524: PUSH
31525: EMPTY
31526: ST_TO_ADDR
// for i = 16 to 25 do
31527: LD_ADDR_VAR 0 4
31531: PUSH
31532: DOUBLE
31533: LD_INT 16
31535: DEC
31536: ST_TO_ADDR
31537: LD_INT 25
31539: PUSH
31540: FOR_TO
31541: IFFALSE 31614
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31543: LD_ADDR_VAR 0 3
31547: PUSH
31548: LD_VAR 0 3
31552: PUSH
31553: LD_INT 22
31555: PUSH
31556: LD_VAR 0 1
31560: PPUSH
31561: CALL_OW 255
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 91
31572: PUSH
31573: LD_VAR 0 1
31577: PUSH
31578: LD_INT 6
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 30
31588: PUSH
31589: LD_VAR 0 4
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: PUSH
31603: EMPTY
31604: LIST
31605: PPUSH
31606: CALL_OW 69
31610: ADD
31611: ST_TO_ADDR
31612: GO 31540
31614: POP
31615: POP
// for i = 1 to tmp do
31616: LD_ADDR_VAR 0 4
31620: PUSH
31621: DOUBLE
31622: LD_INT 1
31624: DEC
31625: ST_TO_ADDR
31626: LD_VAR 0 3
31630: PUSH
31631: FOR_TO
31632: IFFALSE 31720
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31634: LD_ADDR_VAR 0 5
31638: PUSH
31639: LD_VAR 0 5
31643: PUSH
31644: LD_VAR 0 3
31648: PUSH
31649: LD_VAR 0 4
31653: ARRAY
31654: PPUSH
31655: CALL_OW 266
31659: PUSH
31660: LD_VAR 0 3
31664: PUSH
31665: LD_VAR 0 4
31669: ARRAY
31670: PPUSH
31671: CALL_OW 250
31675: PUSH
31676: LD_VAR 0 3
31680: PUSH
31681: LD_VAR 0 4
31685: ARRAY
31686: PPUSH
31687: CALL_OW 251
31691: PUSH
31692: LD_VAR 0 3
31696: PUSH
31697: LD_VAR 0 4
31701: ARRAY
31702: PPUSH
31703: CALL_OW 254
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: PUSH
31714: EMPTY
31715: LIST
31716: ADD
31717: ST_TO_ADDR
31718: GO 31631
31720: POP
31721: POP
// result := list ;
31722: LD_ADDR_VAR 0 2
31726: PUSH
31727: LD_VAR 0 5
31731: ST_TO_ADDR
// end ;
31732: LD_VAR 0 2
31736: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31737: LD_INT 0
31739: PPUSH
31740: PPUSH
31741: PPUSH
31742: PPUSH
31743: PPUSH
31744: PPUSH
31745: PPUSH
// if not factory then
31746: LD_VAR 0 1
31750: NOT
31751: IFFALSE 31755
// exit ;
31753: GO 32348
// if control = control_apeman then
31755: LD_VAR 0 4
31759: PUSH
31760: LD_INT 5
31762: EQUAL
31763: IFFALSE 31872
// begin tmp := UnitsInside ( factory ) ;
31765: LD_ADDR_VAR 0 8
31769: PUSH
31770: LD_VAR 0 1
31774: PPUSH
31775: CALL_OW 313
31779: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31780: LD_VAR 0 8
31784: PPUSH
31785: LD_INT 25
31787: PUSH
31788: LD_INT 12
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PPUSH
31795: CALL_OW 72
31799: NOT
31800: IFFALSE 31810
// control := control_manual ;
31802: LD_ADDR_VAR 0 4
31806: PUSH
31807: LD_INT 1
31809: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31810: LD_ADDR_VAR 0 8
31814: PUSH
31815: LD_VAR 0 1
31819: PPUSH
31820: CALL 31507 0 1
31824: ST_TO_ADDR
// if tmp then
31825: LD_VAR 0 8
31829: IFFALSE 31872
// begin for i in tmp do
31831: LD_ADDR_VAR 0 7
31835: PUSH
31836: LD_VAR 0 8
31840: PUSH
31841: FOR_IN
31842: IFFALSE 31870
// if i [ 1 ] = b_ext_radio then
31844: LD_VAR 0 7
31848: PUSH
31849: LD_INT 1
31851: ARRAY
31852: PUSH
31853: LD_INT 22
31855: EQUAL
31856: IFFALSE 31868
// begin control := control_remote ;
31858: LD_ADDR_VAR 0 4
31862: PUSH
31863: LD_INT 2
31865: ST_TO_ADDR
// break ;
31866: GO 31870
// end ;
31868: GO 31841
31870: POP
31871: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31872: LD_VAR 0 1
31876: PPUSH
31877: LD_VAR 0 2
31881: PPUSH
31882: LD_VAR 0 3
31886: PPUSH
31887: LD_VAR 0 4
31891: PPUSH
31892: LD_VAR 0 5
31896: PPUSH
31897: CALL_OW 448
31901: IFFALSE 31936
// begin result := [ chassis , engine , control , weapon ] ;
31903: LD_ADDR_VAR 0 6
31907: PUSH
31908: LD_VAR 0 2
31912: PUSH
31913: LD_VAR 0 3
31917: PUSH
31918: LD_VAR 0 4
31922: PUSH
31923: LD_VAR 0 5
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: ST_TO_ADDR
// exit ;
31934: GO 32348
// end ; _chassis := AvailableChassisList ( factory ) ;
31936: LD_ADDR_VAR 0 9
31940: PUSH
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 475
31950: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31951: LD_ADDR_VAR 0 11
31955: PUSH
31956: LD_VAR 0 1
31960: PPUSH
31961: CALL_OW 476
31965: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31966: LD_ADDR_VAR 0 12
31970: PUSH
31971: LD_VAR 0 1
31975: PPUSH
31976: CALL_OW 477
31980: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31981: LD_ADDR_VAR 0 10
31985: PUSH
31986: LD_VAR 0 1
31990: PPUSH
31991: CALL_OW 478
31995: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31996: LD_VAR 0 9
32000: NOT
32001: PUSH
32002: LD_VAR 0 11
32006: NOT
32007: OR
32008: PUSH
32009: LD_VAR 0 12
32013: NOT
32014: OR
32015: PUSH
32016: LD_VAR 0 10
32020: NOT
32021: OR
32022: IFFALSE 32057
// begin result := [ chassis , engine , control , weapon ] ;
32024: LD_ADDR_VAR 0 6
32028: PUSH
32029: LD_VAR 0 2
32033: PUSH
32034: LD_VAR 0 3
32038: PUSH
32039: LD_VAR 0 4
32043: PUSH
32044: LD_VAR 0 5
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: ST_TO_ADDR
// exit ;
32055: GO 32348
// end ; if not chassis in _chassis then
32057: LD_VAR 0 2
32061: PUSH
32062: LD_VAR 0 9
32066: IN
32067: NOT
32068: IFFALSE 32094
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32070: LD_ADDR_VAR 0 2
32074: PUSH
32075: LD_VAR 0 9
32079: PUSH
32080: LD_INT 1
32082: PPUSH
32083: LD_VAR 0 9
32087: PPUSH
32088: CALL_OW 12
32092: ARRAY
32093: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32094: LD_VAR 0 2
32098: PPUSH
32099: LD_VAR 0 3
32103: PPUSH
32104: CALL 32353 0 2
32108: NOT
32109: IFFALSE 32168
// repeat engine := _engine [ 1 ] ;
32111: LD_ADDR_VAR 0 3
32115: PUSH
32116: LD_VAR 0 11
32120: PUSH
32121: LD_INT 1
32123: ARRAY
32124: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32125: LD_ADDR_VAR 0 11
32129: PUSH
32130: LD_VAR 0 11
32134: PPUSH
32135: LD_INT 1
32137: PPUSH
32138: CALL_OW 3
32142: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32143: LD_VAR 0 2
32147: PPUSH
32148: LD_VAR 0 3
32152: PPUSH
32153: CALL 32353 0 2
32157: PUSH
32158: LD_VAR 0 11
32162: PUSH
32163: EMPTY
32164: EQUAL
32165: OR
32166: IFFALSE 32111
// if not control in _control then
32168: LD_VAR 0 4
32172: PUSH
32173: LD_VAR 0 12
32177: IN
32178: NOT
32179: IFFALSE 32205
// control := _control [ rand ( 1 , _control ) ] ;
32181: LD_ADDR_VAR 0 4
32185: PUSH
32186: LD_VAR 0 12
32190: PUSH
32191: LD_INT 1
32193: PPUSH
32194: LD_VAR 0 12
32198: PPUSH
32199: CALL_OW 12
32203: ARRAY
32204: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32205: LD_VAR 0 2
32209: PPUSH
32210: LD_VAR 0 5
32214: PPUSH
32215: CALL 32573 0 2
32219: NOT
32220: IFFALSE 32279
// repeat weapon := _weapon [ 1 ] ;
32222: LD_ADDR_VAR 0 5
32226: PUSH
32227: LD_VAR 0 10
32231: PUSH
32232: LD_INT 1
32234: ARRAY
32235: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32236: LD_ADDR_VAR 0 10
32240: PUSH
32241: LD_VAR 0 10
32245: PPUSH
32246: LD_INT 1
32248: PPUSH
32249: CALL_OW 3
32253: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32254: LD_VAR 0 2
32258: PPUSH
32259: LD_VAR 0 5
32263: PPUSH
32264: CALL 32573 0 2
32268: PUSH
32269: LD_VAR 0 10
32273: PUSH
32274: EMPTY
32275: EQUAL
32276: OR
32277: IFFALSE 32222
// result := [ ] ;
32279: LD_ADDR_VAR 0 6
32283: PUSH
32284: EMPTY
32285: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32286: LD_VAR 0 1
32290: PPUSH
32291: LD_VAR 0 2
32295: PPUSH
32296: LD_VAR 0 3
32300: PPUSH
32301: LD_VAR 0 4
32305: PPUSH
32306: LD_VAR 0 5
32310: PPUSH
32311: CALL_OW 448
32315: IFFALSE 32348
// result := [ chassis , engine , control , weapon ] ;
32317: LD_ADDR_VAR 0 6
32321: PUSH
32322: LD_VAR 0 2
32326: PUSH
32327: LD_VAR 0 3
32331: PUSH
32332: LD_VAR 0 4
32336: PUSH
32337: LD_VAR 0 5
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: ST_TO_ADDR
// end ;
32348: LD_VAR 0 6
32352: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32353: LD_INT 0
32355: PPUSH
// if not chassis or not engine then
32356: LD_VAR 0 1
32360: NOT
32361: PUSH
32362: LD_VAR 0 2
32366: NOT
32367: OR
32368: IFFALSE 32372
// exit ;
32370: GO 32568
// case engine of engine_solar :
32372: LD_VAR 0 2
32376: PUSH
32377: LD_INT 2
32379: DOUBLE
32380: EQUAL
32381: IFTRUE 32385
32383: GO 32423
32385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32386: LD_ADDR_VAR 0 3
32390: PUSH
32391: LD_INT 11
32393: PUSH
32394: LD_INT 12
32396: PUSH
32397: LD_INT 13
32399: PUSH
32400: LD_INT 14
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 2
32408: PUSH
32409: LD_INT 3
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: ST_TO_ADDR
32421: GO 32552
32423: LD_INT 1
32425: DOUBLE
32426: EQUAL
32427: IFTRUE 32431
32429: GO 32493
32431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32432: LD_ADDR_VAR 0 3
32436: PUSH
32437: LD_INT 11
32439: PUSH
32440: LD_INT 12
32442: PUSH
32443: LD_INT 13
32445: PUSH
32446: LD_INT 14
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: LD_INT 3
32457: PUSH
32458: LD_INT 4
32460: PUSH
32461: LD_INT 5
32463: PUSH
32464: LD_INT 21
32466: PUSH
32467: LD_INT 23
32469: PUSH
32470: LD_INT 22
32472: PUSH
32473: LD_INT 24
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: ST_TO_ADDR
32491: GO 32552
32493: LD_INT 3
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 32551
32501: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32502: LD_ADDR_VAR 0 3
32506: PUSH
32507: LD_INT 13
32509: PUSH
32510: LD_INT 14
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: LD_INT 3
32518: PUSH
32519: LD_INT 4
32521: PUSH
32522: LD_INT 5
32524: PUSH
32525: LD_INT 21
32527: PUSH
32528: LD_INT 22
32530: PUSH
32531: LD_INT 23
32533: PUSH
32534: LD_INT 24
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: ST_TO_ADDR
32549: GO 32552
32551: POP
// result := ( chassis in result ) ;
32552: LD_ADDR_VAR 0 3
32556: PUSH
32557: LD_VAR 0 1
32561: PUSH
32562: LD_VAR 0 3
32566: IN
32567: ST_TO_ADDR
// end ;
32568: LD_VAR 0 3
32572: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32573: LD_INT 0
32575: PPUSH
// if not chassis or not weapon then
32576: LD_VAR 0 1
32580: NOT
32581: PUSH
32582: LD_VAR 0 2
32586: NOT
32587: OR
32588: IFFALSE 32592
// exit ;
32590: GO 33652
// case weapon of us_machine_gun :
32592: LD_VAR 0 2
32596: PUSH
32597: LD_INT 2
32599: DOUBLE
32600: EQUAL
32601: IFTRUE 32605
32603: GO 32635
32605: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32606: LD_ADDR_VAR 0 3
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: LD_INT 2
32616: PUSH
32617: LD_INT 3
32619: PUSH
32620: LD_INT 4
32622: PUSH
32623: LD_INT 5
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: ST_TO_ADDR
32633: GO 33636
32635: LD_INT 3
32637: DOUBLE
32638: EQUAL
32639: IFTRUE 32643
32641: GO 32673
32643: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32644: LD_ADDR_VAR 0 3
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: LD_INT 3
32657: PUSH
32658: LD_INT 4
32660: PUSH
32661: LD_INT 5
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: ST_TO_ADDR
32671: GO 33636
32673: LD_INT 11
32675: DOUBLE
32676: EQUAL
32677: IFTRUE 32681
32679: GO 32711
32681: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32682: LD_ADDR_VAR 0 3
32686: PUSH
32687: LD_INT 1
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: LD_INT 3
32695: PUSH
32696: LD_INT 4
32698: PUSH
32699: LD_INT 5
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: ST_TO_ADDR
32709: GO 33636
32711: LD_INT 4
32713: DOUBLE
32714: EQUAL
32715: IFTRUE 32719
32717: GO 32745
32719: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32720: LD_ADDR_VAR 0 3
32724: PUSH
32725: LD_INT 2
32727: PUSH
32728: LD_INT 3
32730: PUSH
32731: LD_INT 4
32733: PUSH
32734: LD_INT 5
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: ST_TO_ADDR
32743: GO 33636
32745: LD_INT 5
32747: DOUBLE
32748: EQUAL
32749: IFTRUE 32753
32751: GO 32779
32753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32754: LD_ADDR_VAR 0 3
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 3
32764: PUSH
32765: LD_INT 4
32767: PUSH
32768: LD_INT 5
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: ST_TO_ADDR
32777: GO 33636
32779: LD_INT 9
32781: DOUBLE
32782: EQUAL
32783: IFTRUE 32787
32785: GO 32813
32787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32788: LD_ADDR_VAR 0 3
32792: PUSH
32793: LD_INT 2
32795: PUSH
32796: LD_INT 3
32798: PUSH
32799: LD_INT 4
32801: PUSH
32802: LD_INT 5
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: ST_TO_ADDR
32811: GO 33636
32813: LD_INT 7
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32847
32821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32822: LD_ADDR_VAR 0 3
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: LD_INT 3
32832: PUSH
32833: LD_INT 4
32835: PUSH
32836: LD_INT 5
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: ST_TO_ADDR
32845: GO 33636
32847: LD_INT 12
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32881
32855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32856: LD_ADDR_VAR 0 3
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: LD_INT 3
32866: PUSH
32867: LD_INT 4
32869: PUSH
32870: LD_INT 5
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: ST_TO_ADDR
32879: GO 33636
32881: LD_INT 13
32883: DOUBLE
32884: EQUAL
32885: IFTRUE 32889
32887: GO 32915
32889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32890: LD_ADDR_VAR 0 3
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: LD_INT 3
32900: PUSH
32901: LD_INT 4
32903: PUSH
32904: LD_INT 5
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: ST_TO_ADDR
32913: GO 33636
32915: LD_INT 14
32917: DOUBLE
32918: EQUAL
32919: IFTRUE 32923
32921: GO 32941
32923: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32924: LD_ADDR_VAR 0 3
32928: PUSH
32929: LD_INT 4
32931: PUSH
32932: LD_INT 5
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: ST_TO_ADDR
32939: GO 33636
32941: LD_INT 6
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32949
32947: GO 32967
32949: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32950: LD_ADDR_VAR 0 3
32954: PUSH
32955: LD_INT 4
32957: PUSH
32958: LD_INT 5
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: ST_TO_ADDR
32965: GO 33636
32967: LD_INT 10
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32975
32973: GO 32993
32975: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: LD_INT 4
32983: PUSH
32984: LD_INT 5
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: ST_TO_ADDR
32991: GO 33636
32993: LD_INT 22
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33027
33001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33002: LD_ADDR_VAR 0 3
33006: PUSH
33007: LD_INT 11
33009: PUSH
33010: LD_INT 12
33012: PUSH
33013: LD_INT 13
33015: PUSH
33016: LD_INT 14
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: ST_TO_ADDR
33025: GO 33636
33027: LD_INT 23
33029: DOUBLE
33030: EQUAL
33031: IFTRUE 33035
33033: GO 33061
33035: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33036: LD_ADDR_VAR 0 3
33040: PUSH
33041: LD_INT 11
33043: PUSH
33044: LD_INT 12
33046: PUSH
33047: LD_INT 13
33049: PUSH
33050: LD_INT 14
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: ST_TO_ADDR
33059: GO 33636
33061: LD_INT 24
33063: DOUBLE
33064: EQUAL
33065: IFTRUE 33069
33067: GO 33095
33069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33070: LD_ADDR_VAR 0 3
33074: PUSH
33075: LD_INT 11
33077: PUSH
33078: LD_INT 12
33080: PUSH
33081: LD_INT 13
33083: PUSH
33084: LD_INT 14
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: ST_TO_ADDR
33093: GO 33636
33095: LD_INT 30
33097: DOUBLE
33098: EQUAL
33099: IFTRUE 33103
33101: GO 33129
33103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33104: LD_ADDR_VAR 0 3
33108: PUSH
33109: LD_INT 11
33111: PUSH
33112: LD_INT 12
33114: PUSH
33115: LD_INT 13
33117: PUSH
33118: LD_INT 14
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: ST_TO_ADDR
33127: GO 33636
33129: LD_INT 25
33131: DOUBLE
33132: EQUAL
33133: IFTRUE 33137
33135: GO 33155
33137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33138: LD_ADDR_VAR 0 3
33142: PUSH
33143: LD_INT 13
33145: PUSH
33146: LD_INT 14
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: ST_TO_ADDR
33153: GO 33636
33155: LD_INT 27
33157: DOUBLE
33158: EQUAL
33159: IFTRUE 33163
33161: GO 33181
33163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33164: LD_ADDR_VAR 0 3
33168: PUSH
33169: LD_INT 13
33171: PUSH
33172: LD_INT 14
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: ST_TO_ADDR
33179: GO 33636
33181: LD_INT 92
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33215
33189: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33190: LD_ADDR_VAR 0 3
33194: PUSH
33195: LD_INT 11
33197: PUSH
33198: LD_INT 12
33200: PUSH
33201: LD_INT 13
33203: PUSH
33204: LD_INT 14
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: ST_TO_ADDR
33213: GO 33636
33215: LD_INT 28
33217: DOUBLE
33218: EQUAL
33219: IFTRUE 33223
33221: GO 33241
33223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_INT 13
33231: PUSH
33232: LD_INT 14
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: ST_TO_ADDR
33239: GO 33636
33241: LD_INT 29
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 33267
33249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33250: LD_ADDR_VAR 0 3
33254: PUSH
33255: LD_INT 13
33257: PUSH
33258: LD_INT 14
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: ST_TO_ADDR
33265: GO 33636
33267: LD_INT 31
33269: DOUBLE
33270: EQUAL
33271: IFTRUE 33275
33273: GO 33293
33275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33276: LD_ADDR_VAR 0 3
33280: PUSH
33281: LD_INT 13
33283: PUSH
33284: LD_INT 14
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: ST_TO_ADDR
33291: GO 33636
33293: LD_INT 26
33295: DOUBLE
33296: EQUAL
33297: IFTRUE 33301
33299: GO 33319
33301: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33302: LD_ADDR_VAR 0 3
33306: PUSH
33307: LD_INT 13
33309: PUSH
33310: LD_INT 14
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: ST_TO_ADDR
33317: GO 33636
33319: LD_INT 42
33321: DOUBLE
33322: EQUAL
33323: IFTRUE 33327
33325: GO 33353
33327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33328: LD_ADDR_VAR 0 3
33332: PUSH
33333: LD_INT 21
33335: PUSH
33336: LD_INT 22
33338: PUSH
33339: LD_INT 23
33341: PUSH
33342: LD_INT 24
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: ST_TO_ADDR
33351: GO 33636
33353: LD_INT 43
33355: DOUBLE
33356: EQUAL
33357: IFTRUE 33361
33359: GO 33387
33361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33362: LD_ADDR_VAR 0 3
33366: PUSH
33367: LD_INT 21
33369: PUSH
33370: LD_INT 22
33372: PUSH
33373: LD_INT 23
33375: PUSH
33376: LD_INT 24
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: ST_TO_ADDR
33385: GO 33636
33387: LD_INT 44
33389: DOUBLE
33390: EQUAL
33391: IFTRUE 33395
33393: GO 33421
33395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33396: LD_ADDR_VAR 0 3
33400: PUSH
33401: LD_INT 21
33403: PUSH
33404: LD_INT 22
33406: PUSH
33407: LD_INT 23
33409: PUSH
33410: LD_INT 24
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: ST_TO_ADDR
33419: GO 33636
33421: LD_INT 45
33423: DOUBLE
33424: EQUAL
33425: IFTRUE 33429
33427: GO 33455
33429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33430: LD_ADDR_VAR 0 3
33434: PUSH
33435: LD_INT 21
33437: PUSH
33438: LD_INT 22
33440: PUSH
33441: LD_INT 23
33443: PUSH
33444: LD_INT 24
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: ST_TO_ADDR
33453: GO 33636
33455: LD_INT 49
33457: DOUBLE
33458: EQUAL
33459: IFTRUE 33463
33461: GO 33489
33463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33464: LD_ADDR_VAR 0 3
33468: PUSH
33469: LD_INT 21
33471: PUSH
33472: LD_INT 22
33474: PUSH
33475: LD_INT 23
33477: PUSH
33478: LD_INT 24
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: ST_TO_ADDR
33487: GO 33636
33489: LD_INT 51
33491: DOUBLE
33492: EQUAL
33493: IFTRUE 33497
33495: GO 33523
33497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33498: LD_ADDR_VAR 0 3
33502: PUSH
33503: LD_INT 21
33505: PUSH
33506: LD_INT 22
33508: PUSH
33509: LD_INT 23
33511: PUSH
33512: LD_INT 24
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: ST_TO_ADDR
33521: GO 33636
33523: LD_INT 52
33525: DOUBLE
33526: EQUAL
33527: IFTRUE 33531
33529: GO 33557
33531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33532: LD_ADDR_VAR 0 3
33536: PUSH
33537: LD_INT 21
33539: PUSH
33540: LD_INT 22
33542: PUSH
33543: LD_INT 23
33545: PUSH
33546: LD_INT 24
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: ST_TO_ADDR
33555: GO 33636
33557: LD_INT 53
33559: DOUBLE
33560: EQUAL
33561: IFTRUE 33565
33563: GO 33583
33565: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33566: LD_ADDR_VAR 0 3
33570: PUSH
33571: LD_INT 23
33573: PUSH
33574: LD_INT 24
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: ST_TO_ADDR
33581: GO 33636
33583: LD_INT 46
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33591
33589: GO 33609
33591: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33592: LD_ADDR_VAR 0 3
33596: PUSH
33597: LD_INT 23
33599: PUSH
33600: LD_INT 24
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: ST_TO_ADDR
33607: GO 33636
33609: LD_INT 47
33611: DOUBLE
33612: EQUAL
33613: IFTRUE 33617
33615: GO 33635
33617: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33618: LD_ADDR_VAR 0 3
33622: PUSH
33623: LD_INT 23
33625: PUSH
33626: LD_INT 24
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: ST_TO_ADDR
33633: GO 33636
33635: POP
// result := ( chassis in result ) ;
33636: LD_ADDR_VAR 0 3
33640: PUSH
33641: LD_VAR 0 1
33645: PUSH
33646: LD_VAR 0 3
33650: IN
33651: ST_TO_ADDR
// end ;
33652: LD_VAR 0 3
33656: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33657: LD_INT 0
33659: PPUSH
33660: PPUSH
33661: PPUSH
33662: PPUSH
33663: PPUSH
33664: PPUSH
33665: PPUSH
// result := array ;
33666: LD_ADDR_VAR 0 5
33670: PUSH
33671: LD_VAR 0 1
33675: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33676: LD_VAR 0 1
33680: NOT
33681: PUSH
33682: LD_VAR 0 2
33686: NOT
33687: OR
33688: PUSH
33689: LD_VAR 0 3
33693: NOT
33694: OR
33695: PUSH
33696: LD_VAR 0 2
33700: PUSH
33701: LD_VAR 0 1
33705: GREATER
33706: OR
33707: PUSH
33708: LD_VAR 0 3
33712: PUSH
33713: LD_VAR 0 1
33717: GREATER
33718: OR
33719: IFFALSE 33723
// exit ;
33721: GO 34019
// if direction then
33723: LD_VAR 0 4
33727: IFFALSE 33791
// begin d := 1 ;
33729: LD_ADDR_VAR 0 9
33733: PUSH
33734: LD_INT 1
33736: ST_TO_ADDR
// if i_from > i_to then
33737: LD_VAR 0 2
33741: PUSH
33742: LD_VAR 0 3
33746: GREATER
33747: IFFALSE 33773
// length := ( array - i_from ) + i_to else
33749: LD_ADDR_VAR 0 11
33753: PUSH
33754: LD_VAR 0 1
33758: PUSH
33759: LD_VAR 0 2
33763: MINUS
33764: PUSH
33765: LD_VAR 0 3
33769: PLUS
33770: ST_TO_ADDR
33771: GO 33789
// length := i_to - i_from ;
33773: LD_ADDR_VAR 0 11
33777: PUSH
33778: LD_VAR 0 3
33782: PUSH
33783: LD_VAR 0 2
33787: MINUS
33788: ST_TO_ADDR
// end else
33789: GO 33852
// begin d := - 1 ;
33791: LD_ADDR_VAR 0 9
33795: PUSH
33796: LD_INT 1
33798: NEG
33799: ST_TO_ADDR
// if i_from > i_to then
33800: LD_VAR 0 2
33804: PUSH
33805: LD_VAR 0 3
33809: GREATER
33810: IFFALSE 33830
// length := i_from - i_to else
33812: LD_ADDR_VAR 0 11
33816: PUSH
33817: LD_VAR 0 2
33821: PUSH
33822: LD_VAR 0 3
33826: MINUS
33827: ST_TO_ADDR
33828: GO 33852
// length := ( array - i_to ) + i_from ;
33830: LD_ADDR_VAR 0 11
33834: PUSH
33835: LD_VAR 0 1
33839: PUSH
33840: LD_VAR 0 3
33844: MINUS
33845: PUSH
33846: LD_VAR 0 2
33850: PLUS
33851: ST_TO_ADDR
// end ; if not length then
33852: LD_VAR 0 11
33856: NOT
33857: IFFALSE 33861
// exit ;
33859: GO 34019
// tmp := array ;
33861: LD_ADDR_VAR 0 10
33865: PUSH
33866: LD_VAR 0 1
33870: ST_TO_ADDR
// for i = 1 to length do
33871: LD_ADDR_VAR 0 6
33875: PUSH
33876: DOUBLE
33877: LD_INT 1
33879: DEC
33880: ST_TO_ADDR
33881: LD_VAR 0 11
33885: PUSH
33886: FOR_TO
33887: IFFALSE 34007
// begin for j = 1 to array do
33889: LD_ADDR_VAR 0 7
33893: PUSH
33894: DOUBLE
33895: LD_INT 1
33897: DEC
33898: ST_TO_ADDR
33899: LD_VAR 0 1
33903: PUSH
33904: FOR_TO
33905: IFFALSE 33993
// begin k := j + d ;
33907: LD_ADDR_VAR 0 8
33911: PUSH
33912: LD_VAR 0 7
33916: PUSH
33917: LD_VAR 0 9
33921: PLUS
33922: ST_TO_ADDR
// if k > array then
33923: LD_VAR 0 8
33927: PUSH
33928: LD_VAR 0 1
33932: GREATER
33933: IFFALSE 33943
// k := 1 ;
33935: LD_ADDR_VAR 0 8
33939: PUSH
33940: LD_INT 1
33942: ST_TO_ADDR
// if not k then
33943: LD_VAR 0 8
33947: NOT
33948: IFFALSE 33960
// k := array ;
33950: LD_ADDR_VAR 0 8
33954: PUSH
33955: LD_VAR 0 1
33959: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33960: LD_ADDR_VAR 0 10
33964: PUSH
33965: LD_VAR 0 10
33969: PPUSH
33970: LD_VAR 0 8
33974: PPUSH
33975: LD_VAR 0 1
33979: PUSH
33980: LD_VAR 0 7
33984: ARRAY
33985: PPUSH
33986: CALL_OW 1
33990: ST_TO_ADDR
// end ;
33991: GO 33904
33993: POP
33994: POP
// array := tmp ;
33995: LD_ADDR_VAR 0 1
33999: PUSH
34000: LD_VAR 0 10
34004: ST_TO_ADDR
// end ;
34005: GO 33886
34007: POP
34008: POP
// result := array ;
34009: LD_ADDR_VAR 0 5
34013: PUSH
34014: LD_VAR 0 1
34018: ST_TO_ADDR
// end ;
34019: LD_VAR 0 5
34023: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34024: LD_INT 0
34026: PPUSH
34027: PPUSH
// result := 0 ;
34028: LD_ADDR_VAR 0 3
34032: PUSH
34033: LD_INT 0
34035: ST_TO_ADDR
// if not array or not value in array then
34036: LD_VAR 0 1
34040: NOT
34041: PUSH
34042: LD_VAR 0 2
34046: PUSH
34047: LD_VAR 0 1
34051: IN
34052: NOT
34053: OR
34054: IFFALSE 34058
// exit ;
34056: GO 34112
// for i = 1 to array do
34058: LD_ADDR_VAR 0 4
34062: PUSH
34063: DOUBLE
34064: LD_INT 1
34066: DEC
34067: ST_TO_ADDR
34068: LD_VAR 0 1
34072: PUSH
34073: FOR_TO
34074: IFFALSE 34110
// if value = array [ i ] then
34076: LD_VAR 0 2
34080: PUSH
34081: LD_VAR 0 1
34085: PUSH
34086: LD_VAR 0 4
34090: ARRAY
34091: EQUAL
34092: IFFALSE 34108
// begin result := i ;
34094: LD_ADDR_VAR 0 3
34098: PUSH
34099: LD_VAR 0 4
34103: ST_TO_ADDR
// exit ;
34104: POP
34105: POP
34106: GO 34112
// end ;
34108: GO 34073
34110: POP
34111: POP
// end ;
34112: LD_VAR 0 3
34116: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34117: LD_INT 0
34119: PPUSH
// vc_chassis := chassis ;
34120: LD_ADDR_OWVAR 37
34124: PUSH
34125: LD_VAR 0 1
34129: ST_TO_ADDR
// vc_engine := engine ;
34130: LD_ADDR_OWVAR 39
34134: PUSH
34135: LD_VAR 0 2
34139: ST_TO_ADDR
// vc_control := control ;
34140: LD_ADDR_OWVAR 38
34144: PUSH
34145: LD_VAR 0 3
34149: ST_TO_ADDR
// vc_weapon := weapon ;
34150: LD_ADDR_OWVAR 40
34154: PUSH
34155: LD_VAR 0 4
34159: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34160: LD_ADDR_OWVAR 41
34164: PUSH
34165: LD_VAR 0 5
34169: ST_TO_ADDR
// end ;
34170: LD_VAR 0 6
34174: RET
// export function WantPlant ( unit ) ; var task ; begin
34175: LD_INT 0
34177: PPUSH
34178: PPUSH
// result := false ;
34179: LD_ADDR_VAR 0 2
34183: PUSH
34184: LD_INT 0
34186: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34187: LD_ADDR_VAR 0 3
34191: PUSH
34192: LD_VAR 0 1
34196: PPUSH
34197: CALL_OW 437
34201: ST_TO_ADDR
// if task then
34202: LD_VAR 0 3
34206: IFFALSE 34234
// if task [ 1 ] [ 1 ] = p then
34208: LD_VAR 0 3
34212: PUSH
34213: LD_INT 1
34215: ARRAY
34216: PUSH
34217: LD_INT 1
34219: ARRAY
34220: PUSH
34221: LD_STRING p
34223: EQUAL
34224: IFFALSE 34234
// result := true ;
34226: LD_ADDR_VAR 0 2
34230: PUSH
34231: LD_INT 1
34233: ST_TO_ADDR
// end ;
34234: LD_VAR 0 2
34238: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34239: LD_INT 0
34241: PPUSH
34242: PPUSH
34243: PPUSH
34244: PPUSH
// if pos < 1 then
34245: LD_VAR 0 2
34249: PUSH
34250: LD_INT 1
34252: LESS
34253: IFFALSE 34257
// exit ;
34255: GO 34560
// if pos = 1 then
34257: LD_VAR 0 2
34261: PUSH
34262: LD_INT 1
34264: EQUAL
34265: IFFALSE 34298
// result := Replace ( arr , pos [ 1 ] , value ) else
34267: LD_ADDR_VAR 0 4
34271: PUSH
34272: LD_VAR 0 1
34276: PPUSH
34277: LD_VAR 0 2
34281: PUSH
34282: LD_INT 1
34284: ARRAY
34285: PPUSH
34286: LD_VAR 0 3
34290: PPUSH
34291: CALL_OW 1
34295: ST_TO_ADDR
34296: GO 34560
// begin tmp := arr ;
34298: LD_ADDR_VAR 0 6
34302: PUSH
34303: LD_VAR 0 1
34307: ST_TO_ADDR
// s_arr := [ tmp ] ;
34308: LD_ADDR_VAR 0 7
34312: PUSH
34313: LD_VAR 0 6
34317: PUSH
34318: EMPTY
34319: LIST
34320: ST_TO_ADDR
// for i = 1 to pos - 1 do
34321: LD_ADDR_VAR 0 5
34325: PUSH
34326: DOUBLE
34327: LD_INT 1
34329: DEC
34330: ST_TO_ADDR
34331: LD_VAR 0 2
34335: PUSH
34336: LD_INT 1
34338: MINUS
34339: PUSH
34340: FOR_TO
34341: IFFALSE 34386
// begin tmp := tmp [ pos [ i ] ] ;
34343: LD_ADDR_VAR 0 6
34347: PUSH
34348: LD_VAR 0 6
34352: PUSH
34353: LD_VAR 0 2
34357: PUSH
34358: LD_VAR 0 5
34362: ARRAY
34363: ARRAY
34364: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34365: LD_ADDR_VAR 0 7
34369: PUSH
34370: LD_VAR 0 7
34374: PUSH
34375: LD_VAR 0 6
34379: PUSH
34380: EMPTY
34381: LIST
34382: ADD
34383: ST_TO_ADDR
// end ;
34384: GO 34340
34386: POP
34387: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34388: LD_ADDR_VAR 0 6
34392: PUSH
34393: LD_VAR 0 6
34397: PPUSH
34398: LD_VAR 0 2
34402: PUSH
34403: LD_VAR 0 2
34407: ARRAY
34408: PPUSH
34409: LD_VAR 0 3
34413: PPUSH
34414: CALL_OW 1
34418: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34419: LD_ADDR_VAR 0 7
34423: PUSH
34424: LD_VAR 0 7
34428: PPUSH
34429: LD_VAR 0 7
34433: PPUSH
34434: LD_VAR 0 6
34438: PPUSH
34439: CALL_OW 1
34443: ST_TO_ADDR
// for i = s_arr downto 2 do
34444: LD_ADDR_VAR 0 5
34448: PUSH
34449: DOUBLE
34450: LD_VAR 0 7
34454: INC
34455: ST_TO_ADDR
34456: LD_INT 2
34458: PUSH
34459: FOR_DOWNTO
34460: IFFALSE 34544
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34462: LD_ADDR_VAR 0 6
34466: PUSH
34467: LD_VAR 0 7
34471: PUSH
34472: LD_VAR 0 5
34476: PUSH
34477: LD_INT 1
34479: MINUS
34480: ARRAY
34481: PPUSH
34482: LD_VAR 0 2
34486: PUSH
34487: LD_VAR 0 5
34491: PUSH
34492: LD_INT 1
34494: MINUS
34495: ARRAY
34496: PPUSH
34497: LD_VAR 0 7
34501: PUSH
34502: LD_VAR 0 5
34506: ARRAY
34507: PPUSH
34508: CALL_OW 1
34512: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34513: LD_ADDR_VAR 0 7
34517: PUSH
34518: LD_VAR 0 7
34522: PPUSH
34523: LD_VAR 0 5
34527: PUSH
34528: LD_INT 1
34530: MINUS
34531: PPUSH
34532: LD_VAR 0 6
34536: PPUSH
34537: CALL_OW 1
34541: ST_TO_ADDR
// end ;
34542: GO 34459
34544: POP
34545: POP
// result := s_arr [ 1 ] ;
34546: LD_ADDR_VAR 0 4
34550: PUSH
34551: LD_VAR 0 7
34555: PUSH
34556: LD_INT 1
34558: ARRAY
34559: ST_TO_ADDR
// end ; end ;
34560: LD_VAR 0 4
34564: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34565: LD_INT 0
34567: PPUSH
34568: PPUSH
// if not list then
34569: LD_VAR 0 1
34573: NOT
34574: IFFALSE 34578
// exit ;
34576: GO 34669
// i := list [ pos1 ] ;
34578: LD_ADDR_VAR 0 5
34582: PUSH
34583: LD_VAR 0 1
34587: PUSH
34588: LD_VAR 0 2
34592: ARRAY
34593: ST_TO_ADDR
// if not i then
34594: LD_VAR 0 5
34598: NOT
34599: IFFALSE 34603
// exit ;
34601: GO 34669
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34603: LD_ADDR_VAR 0 1
34607: PUSH
34608: LD_VAR 0 1
34612: PPUSH
34613: LD_VAR 0 2
34617: PPUSH
34618: LD_VAR 0 1
34622: PUSH
34623: LD_VAR 0 3
34627: ARRAY
34628: PPUSH
34629: CALL_OW 1
34633: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34634: LD_ADDR_VAR 0 1
34638: PUSH
34639: LD_VAR 0 1
34643: PPUSH
34644: LD_VAR 0 3
34648: PPUSH
34649: LD_VAR 0 5
34653: PPUSH
34654: CALL_OW 1
34658: ST_TO_ADDR
// result := list ;
34659: LD_ADDR_VAR 0 4
34663: PUSH
34664: LD_VAR 0 1
34668: ST_TO_ADDR
// end ;
34669: LD_VAR 0 4
34673: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34674: LD_INT 0
34676: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34677: LD_ADDR_VAR 0 5
34681: PUSH
34682: LD_VAR 0 1
34686: PPUSH
34687: CALL_OW 250
34691: PPUSH
34692: LD_VAR 0 1
34696: PPUSH
34697: CALL_OW 251
34701: PPUSH
34702: LD_VAR 0 2
34706: PPUSH
34707: LD_VAR 0 3
34711: PPUSH
34712: LD_VAR 0 4
34716: PPUSH
34717: CALL 34727 0 5
34721: ST_TO_ADDR
// end ;
34722: LD_VAR 0 5
34726: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34727: LD_INT 0
34729: PPUSH
34730: PPUSH
34731: PPUSH
34732: PPUSH
// if not list then
34733: LD_VAR 0 3
34737: NOT
34738: IFFALSE 34742
// exit ;
34740: GO 35130
// result := [ ] ;
34742: LD_ADDR_VAR 0 6
34746: PUSH
34747: EMPTY
34748: ST_TO_ADDR
// for i in list do
34749: LD_ADDR_VAR 0 7
34753: PUSH
34754: LD_VAR 0 3
34758: PUSH
34759: FOR_IN
34760: IFFALSE 34962
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34762: LD_ADDR_VAR 0 9
34766: PUSH
34767: LD_VAR 0 7
34771: PPUSH
34772: LD_VAR 0 1
34776: PPUSH
34777: LD_VAR 0 2
34781: PPUSH
34782: CALL_OW 297
34786: ST_TO_ADDR
// if not result then
34787: LD_VAR 0 6
34791: NOT
34792: IFFALSE 34818
// result := [ [ i , tmp ] ] else
34794: LD_ADDR_VAR 0 6
34798: PUSH
34799: LD_VAR 0 7
34803: PUSH
34804: LD_VAR 0 9
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: EMPTY
34814: LIST
34815: ST_TO_ADDR
34816: GO 34960
// begin if result [ result ] [ 2 ] < tmp then
34818: LD_VAR 0 6
34822: PUSH
34823: LD_VAR 0 6
34827: ARRAY
34828: PUSH
34829: LD_INT 2
34831: ARRAY
34832: PUSH
34833: LD_VAR 0 9
34837: LESS
34838: IFFALSE 34880
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34840: LD_ADDR_VAR 0 6
34844: PUSH
34845: LD_VAR 0 6
34849: PPUSH
34850: LD_VAR 0 6
34854: PUSH
34855: LD_INT 1
34857: PLUS
34858: PPUSH
34859: LD_VAR 0 7
34863: PUSH
34864: LD_VAR 0 9
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PPUSH
34873: CALL_OW 2
34877: ST_TO_ADDR
34878: GO 34960
// for j = 1 to result do
34880: LD_ADDR_VAR 0 8
34884: PUSH
34885: DOUBLE
34886: LD_INT 1
34888: DEC
34889: ST_TO_ADDR
34890: LD_VAR 0 6
34894: PUSH
34895: FOR_TO
34896: IFFALSE 34958
// begin if tmp < result [ j ] [ 2 ] then
34898: LD_VAR 0 9
34902: PUSH
34903: LD_VAR 0 6
34907: PUSH
34908: LD_VAR 0 8
34912: ARRAY
34913: PUSH
34914: LD_INT 2
34916: ARRAY
34917: LESS
34918: IFFALSE 34956
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34920: LD_ADDR_VAR 0 6
34924: PUSH
34925: LD_VAR 0 6
34929: PPUSH
34930: LD_VAR 0 8
34934: PPUSH
34935: LD_VAR 0 7
34939: PUSH
34940: LD_VAR 0 9
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PPUSH
34949: CALL_OW 2
34953: ST_TO_ADDR
// break ;
34954: GO 34958
// end ; end ;
34956: GO 34895
34958: POP
34959: POP
// end ; end ;
34960: GO 34759
34962: POP
34963: POP
// if result and not asc then
34964: LD_VAR 0 6
34968: PUSH
34969: LD_VAR 0 4
34973: NOT
34974: AND
34975: IFFALSE 35050
// begin tmp := result ;
34977: LD_ADDR_VAR 0 9
34981: PUSH
34982: LD_VAR 0 6
34986: ST_TO_ADDR
// for i = tmp downto 1 do
34987: LD_ADDR_VAR 0 7
34991: PUSH
34992: DOUBLE
34993: LD_VAR 0 9
34997: INC
34998: ST_TO_ADDR
34999: LD_INT 1
35001: PUSH
35002: FOR_DOWNTO
35003: IFFALSE 35048
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35005: LD_ADDR_VAR 0 6
35009: PUSH
35010: LD_VAR 0 6
35014: PPUSH
35015: LD_VAR 0 9
35019: PUSH
35020: LD_VAR 0 7
35024: MINUS
35025: PUSH
35026: LD_INT 1
35028: PLUS
35029: PPUSH
35030: LD_VAR 0 9
35034: PUSH
35035: LD_VAR 0 7
35039: ARRAY
35040: PPUSH
35041: CALL_OW 1
35045: ST_TO_ADDR
35046: GO 35002
35048: POP
35049: POP
// end ; tmp := [ ] ;
35050: LD_ADDR_VAR 0 9
35054: PUSH
35055: EMPTY
35056: ST_TO_ADDR
// if mode then
35057: LD_VAR 0 5
35061: IFFALSE 35130
// begin for i = 1 to result do
35063: LD_ADDR_VAR 0 7
35067: PUSH
35068: DOUBLE
35069: LD_INT 1
35071: DEC
35072: ST_TO_ADDR
35073: LD_VAR 0 6
35077: PUSH
35078: FOR_TO
35079: IFFALSE 35118
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35081: LD_ADDR_VAR 0 9
35085: PUSH
35086: LD_VAR 0 9
35090: PPUSH
35091: LD_VAR 0 7
35095: PPUSH
35096: LD_VAR 0 6
35100: PUSH
35101: LD_VAR 0 7
35105: ARRAY
35106: PUSH
35107: LD_INT 1
35109: ARRAY
35110: PPUSH
35111: CALL_OW 1
35115: ST_TO_ADDR
35116: GO 35078
35118: POP
35119: POP
// result := tmp ;
35120: LD_ADDR_VAR 0 6
35124: PUSH
35125: LD_VAR 0 9
35129: ST_TO_ADDR
// end ; end ;
35130: LD_VAR 0 6
35134: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35135: LD_INT 0
35137: PPUSH
35138: PPUSH
35139: PPUSH
35140: PPUSH
35141: PPUSH
35142: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35143: LD_ADDR_VAR 0 5
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: ST_TO_ADDR
// if not x or not y then
35165: LD_VAR 0 2
35169: NOT
35170: PUSH
35171: LD_VAR 0 3
35175: NOT
35176: OR
35177: IFFALSE 35181
// exit ;
35179: GO 36831
// if not range then
35181: LD_VAR 0 4
35185: NOT
35186: IFFALSE 35196
// range := 10 ;
35188: LD_ADDR_VAR 0 4
35192: PUSH
35193: LD_INT 10
35195: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35196: LD_ADDR_VAR 0 8
35200: PUSH
35201: LD_INT 81
35203: PUSH
35204: LD_VAR 0 1
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 92
35215: PUSH
35216: LD_VAR 0 2
35220: PUSH
35221: LD_VAR 0 3
35225: PUSH
35226: LD_VAR 0 4
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 3
35239: PUSH
35240: LD_INT 21
35242: PUSH
35243: LD_INT 3
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: PPUSH
35259: CALL_OW 69
35263: ST_TO_ADDR
// if not tmp then
35264: LD_VAR 0 8
35268: NOT
35269: IFFALSE 35273
// exit ;
35271: GO 36831
// for i in tmp do
35273: LD_ADDR_VAR 0 6
35277: PUSH
35278: LD_VAR 0 8
35282: PUSH
35283: FOR_IN
35284: IFFALSE 36806
// begin points := [ 0 , 0 , 0 ] ;
35286: LD_ADDR_VAR 0 9
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: ST_TO_ADDR
// bpoints := 1 ;
35305: LD_ADDR_VAR 0 10
35309: PUSH
35310: LD_INT 1
35312: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35313: LD_VAR 0 6
35317: PPUSH
35318: CALL_OW 247
35322: PUSH
35323: LD_INT 1
35325: DOUBLE
35326: EQUAL
35327: IFTRUE 35331
35329: GO 35909
35331: POP
// begin if GetClass ( i ) = 1 then
35332: LD_VAR 0 6
35336: PPUSH
35337: CALL_OW 257
35341: PUSH
35342: LD_INT 1
35344: EQUAL
35345: IFFALSE 35366
// points := [ 10 , 5 , 3 ] ;
35347: LD_ADDR_VAR 0 9
35351: PUSH
35352: LD_INT 10
35354: PUSH
35355: LD_INT 5
35357: PUSH
35358: LD_INT 3
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35366: LD_VAR 0 6
35370: PPUSH
35371: CALL_OW 257
35375: PUSH
35376: LD_INT 2
35378: PUSH
35379: LD_INT 3
35381: PUSH
35382: LD_INT 4
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: IN
35390: IFFALSE 35411
// points := [ 3 , 2 , 1 ] ;
35392: LD_ADDR_VAR 0 9
35396: PUSH
35397: LD_INT 3
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35411: LD_VAR 0 6
35415: PPUSH
35416: CALL_OW 257
35420: PUSH
35421: LD_INT 5
35423: EQUAL
35424: IFFALSE 35445
// points := [ 130 , 5 , 2 ] ;
35426: LD_ADDR_VAR 0 9
35430: PUSH
35431: LD_INT 130
35433: PUSH
35434: LD_INT 5
35436: PUSH
35437: LD_INT 2
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35445: LD_VAR 0 6
35449: PPUSH
35450: CALL_OW 257
35454: PUSH
35455: LD_INT 8
35457: EQUAL
35458: IFFALSE 35479
// points := [ 35 , 35 , 30 ] ;
35460: LD_ADDR_VAR 0 9
35464: PUSH
35465: LD_INT 35
35467: PUSH
35468: LD_INT 35
35470: PUSH
35471: LD_INT 30
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: LIST
35478: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35479: LD_VAR 0 6
35483: PPUSH
35484: CALL_OW 257
35488: PUSH
35489: LD_INT 9
35491: EQUAL
35492: IFFALSE 35513
// points := [ 20 , 55 , 40 ] ;
35494: LD_ADDR_VAR 0 9
35498: PUSH
35499: LD_INT 20
35501: PUSH
35502: LD_INT 55
35504: PUSH
35505: LD_INT 40
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: LIST
35512: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35513: LD_VAR 0 6
35517: PPUSH
35518: CALL_OW 257
35522: PUSH
35523: LD_INT 12
35525: PUSH
35526: LD_INT 16
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: IN
35533: IFFALSE 35554
// points := [ 5 , 3 , 2 ] ;
35535: LD_ADDR_VAR 0 9
35539: PUSH
35540: LD_INT 5
35542: PUSH
35543: LD_INT 3
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35554: LD_VAR 0 6
35558: PPUSH
35559: CALL_OW 257
35563: PUSH
35564: LD_INT 17
35566: EQUAL
35567: IFFALSE 35588
// points := [ 100 , 50 , 75 ] ;
35569: LD_ADDR_VAR 0 9
35573: PUSH
35574: LD_INT 100
35576: PUSH
35577: LD_INT 50
35579: PUSH
35580: LD_INT 75
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35588: LD_VAR 0 6
35592: PPUSH
35593: CALL_OW 257
35597: PUSH
35598: LD_INT 15
35600: EQUAL
35601: IFFALSE 35622
// points := [ 10 , 5 , 3 ] ;
35603: LD_ADDR_VAR 0 9
35607: PUSH
35608: LD_INT 10
35610: PUSH
35611: LD_INT 5
35613: PUSH
35614: LD_INT 3
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35622: LD_VAR 0 6
35626: PPUSH
35627: CALL_OW 257
35631: PUSH
35632: LD_INT 14
35634: EQUAL
35635: IFFALSE 35656
// points := [ 10 , 0 , 0 ] ;
35637: LD_ADDR_VAR 0 9
35641: PUSH
35642: LD_INT 10
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35656: LD_VAR 0 6
35660: PPUSH
35661: CALL_OW 257
35665: PUSH
35666: LD_INT 11
35668: EQUAL
35669: IFFALSE 35690
// points := [ 30 , 10 , 5 ] ;
35671: LD_ADDR_VAR 0 9
35675: PUSH
35676: LD_INT 30
35678: PUSH
35679: LD_INT 10
35681: PUSH
35682: LD_INT 5
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35690: LD_VAR 0 1
35694: PPUSH
35695: LD_INT 5
35697: PPUSH
35698: CALL_OW 321
35702: PUSH
35703: LD_INT 2
35705: EQUAL
35706: IFFALSE 35723
// bpoints := bpoints * 1.8 ;
35708: LD_ADDR_VAR 0 10
35712: PUSH
35713: LD_VAR 0 10
35717: PUSH
35718: LD_REAL  1.80000000000000E+0000
35721: MUL
35722: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35723: LD_VAR 0 6
35727: PPUSH
35728: CALL_OW 257
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: LD_INT 2
35738: PUSH
35739: LD_INT 3
35741: PUSH
35742: LD_INT 4
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: IN
35751: PUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: LD_INT 51
35759: PPUSH
35760: CALL_OW 321
35764: PUSH
35765: LD_INT 2
35767: EQUAL
35768: AND
35769: IFFALSE 35786
// bpoints := bpoints * 1.2 ;
35771: LD_ADDR_VAR 0 10
35775: PUSH
35776: LD_VAR 0 10
35780: PUSH
35781: LD_REAL  1.20000000000000E+0000
35784: MUL
35785: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35786: LD_VAR 0 6
35790: PPUSH
35791: CALL_OW 257
35795: PUSH
35796: LD_INT 5
35798: PUSH
35799: LD_INT 7
35801: PUSH
35802: LD_INT 9
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: IN
35810: PUSH
35811: LD_VAR 0 1
35815: PPUSH
35816: LD_INT 52
35818: PPUSH
35819: CALL_OW 321
35823: PUSH
35824: LD_INT 2
35826: EQUAL
35827: AND
35828: IFFALSE 35845
// bpoints := bpoints * 1.5 ;
35830: LD_ADDR_VAR 0 10
35834: PUSH
35835: LD_VAR 0 10
35839: PUSH
35840: LD_REAL  1.50000000000000E+0000
35843: MUL
35844: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35845: LD_VAR 0 1
35849: PPUSH
35850: LD_INT 66
35852: PPUSH
35853: CALL_OW 321
35857: PUSH
35858: LD_INT 2
35860: EQUAL
35861: IFFALSE 35878
// bpoints := bpoints * 1.1 ;
35863: LD_ADDR_VAR 0 10
35867: PUSH
35868: LD_VAR 0 10
35872: PUSH
35873: LD_REAL  1.10000000000000E+0000
35876: MUL
35877: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35878: LD_ADDR_VAR 0 10
35882: PUSH
35883: LD_VAR 0 10
35887: PUSH
35888: LD_VAR 0 6
35892: PPUSH
35893: LD_INT 1
35895: PPUSH
35896: CALL_OW 259
35900: PUSH
35901: LD_REAL  1.15000000000000E+0000
35904: MUL
35905: MUL
35906: ST_TO_ADDR
// end ; unit_vehicle :
35907: GO 36735
35909: LD_INT 2
35911: DOUBLE
35912: EQUAL
35913: IFTRUE 35917
35915: GO 36723
35917: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35918: LD_VAR 0 6
35922: PPUSH
35923: CALL_OW 264
35927: PUSH
35928: LD_INT 2
35930: PUSH
35931: LD_INT 42
35933: PUSH
35934: LD_INT 24
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: IN
35942: IFFALSE 35963
// points := [ 25 , 5 , 3 ] ;
35944: LD_ADDR_VAR 0 9
35948: PUSH
35949: LD_INT 25
35951: PUSH
35952: LD_INT 5
35954: PUSH
35955: LD_INT 3
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35963: LD_VAR 0 6
35967: PPUSH
35968: CALL_OW 264
35972: PUSH
35973: LD_INT 4
35975: PUSH
35976: LD_INT 43
35978: PUSH
35979: LD_INT 25
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: IN
35987: IFFALSE 36008
// points := [ 40 , 15 , 5 ] ;
35989: LD_ADDR_VAR 0 9
35993: PUSH
35994: LD_INT 40
35996: PUSH
35997: LD_INT 15
35999: PUSH
36000: LD_INT 5
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36008: LD_VAR 0 6
36012: PPUSH
36013: CALL_OW 264
36017: PUSH
36018: LD_INT 3
36020: PUSH
36021: LD_INT 23
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: IN
36028: IFFALSE 36049
// points := [ 7 , 25 , 8 ] ;
36030: LD_ADDR_VAR 0 9
36034: PUSH
36035: LD_INT 7
36037: PUSH
36038: LD_INT 25
36040: PUSH
36041: LD_INT 8
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36049: LD_VAR 0 6
36053: PPUSH
36054: CALL_OW 264
36058: PUSH
36059: LD_INT 5
36061: PUSH
36062: LD_INT 27
36064: PUSH
36065: LD_INT 44
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: IN
36073: IFFALSE 36094
// points := [ 14 , 50 , 16 ] ;
36075: LD_ADDR_VAR 0 9
36079: PUSH
36080: LD_INT 14
36082: PUSH
36083: LD_INT 50
36085: PUSH
36086: LD_INT 16
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36094: LD_VAR 0 6
36098: PPUSH
36099: CALL_OW 264
36103: PUSH
36104: LD_INT 6
36106: PUSH
36107: LD_INT 46
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: IN
36114: IFFALSE 36135
// points := [ 32 , 120 , 70 ] ;
36116: LD_ADDR_VAR 0 9
36120: PUSH
36121: LD_INT 32
36123: PUSH
36124: LD_INT 120
36126: PUSH
36127: LD_INT 70
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: LIST
36134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36135: LD_VAR 0 6
36139: PPUSH
36140: CALL_OW 264
36144: PUSH
36145: LD_INT 7
36147: PUSH
36148: LD_INT 28
36150: PUSH
36151: LD_INT 45
36153: PUSH
36154: LD_INT 92
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: IN
36163: IFFALSE 36184
// points := [ 35 , 20 , 45 ] ;
36165: LD_ADDR_VAR 0 9
36169: PUSH
36170: LD_INT 35
36172: PUSH
36173: LD_INT 20
36175: PUSH
36176: LD_INT 45
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36184: LD_VAR 0 6
36188: PPUSH
36189: CALL_OW 264
36193: PUSH
36194: LD_INT 47
36196: PUSH
36197: EMPTY
36198: LIST
36199: IN
36200: IFFALSE 36221
// points := [ 67 , 45 , 75 ] ;
36202: LD_ADDR_VAR 0 9
36206: PUSH
36207: LD_INT 67
36209: PUSH
36210: LD_INT 45
36212: PUSH
36213: LD_INT 75
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: LIST
36220: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36221: LD_VAR 0 6
36225: PPUSH
36226: CALL_OW 264
36230: PUSH
36231: LD_INT 26
36233: PUSH
36234: EMPTY
36235: LIST
36236: IN
36237: IFFALSE 36258
// points := [ 120 , 30 , 80 ] ;
36239: LD_ADDR_VAR 0 9
36243: PUSH
36244: LD_INT 120
36246: PUSH
36247: LD_INT 30
36249: PUSH
36250: LD_INT 80
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36258: LD_VAR 0 6
36262: PPUSH
36263: CALL_OW 264
36267: PUSH
36268: LD_INT 22
36270: PUSH
36271: EMPTY
36272: LIST
36273: IN
36274: IFFALSE 36295
// points := [ 40 , 1 , 1 ] ;
36276: LD_ADDR_VAR 0 9
36280: PUSH
36281: LD_INT 40
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: LIST
36294: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36295: LD_VAR 0 6
36299: PPUSH
36300: CALL_OW 264
36304: PUSH
36305: LD_INT 29
36307: PUSH
36308: EMPTY
36309: LIST
36310: IN
36311: IFFALSE 36332
// points := [ 70 , 200 , 400 ] ;
36313: LD_ADDR_VAR 0 9
36317: PUSH
36318: LD_INT 70
36320: PUSH
36321: LD_INT 200
36323: PUSH
36324: LD_INT 400
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36332: LD_VAR 0 6
36336: PPUSH
36337: CALL_OW 264
36341: PUSH
36342: LD_INT 14
36344: PUSH
36345: LD_INT 53
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: IN
36352: IFFALSE 36373
// points := [ 40 , 10 , 20 ] ;
36354: LD_ADDR_VAR 0 9
36358: PUSH
36359: LD_INT 40
36361: PUSH
36362: LD_INT 10
36364: PUSH
36365: LD_INT 20
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36373: LD_VAR 0 6
36377: PPUSH
36378: CALL_OW 264
36382: PUSH
36383: LD_INT 9
36385: PUSH
36386: EMPTY
36387: LIST
36388: IN
36389: IFFALSE 36410
// points := [ 5 , 70 , 20 ] ;
36391: LD_ADDR_VAR 0 9
36395: PUSH
36396: LD_INT 5
36398: PUSH
36399: LD_INT 70
36401: PUSH
36402: LD_INT 20
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36410: LD_VAR 0 6
36414: PPUSH
36415: CALL_OW 264
36419: PUSH
36420: LD_INT 10
36422: PUSH
36423: EMPTY
36424: LIST
36425: IN
36426: IFFALSE 36447
// points := [ 35 , 110 , 70 ] ;
36428: LD_ADDR_VAR 0 9
36432: PUSH
36433: LD_INT 35
36435: PUSH
36436: LD_INT 110
36438: PUSH
36439: LD_INT 70
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36447: LD_VAR 0 6
36451: PPUSH
36452: CALL_OW 265
36456: PUSH
36457: LD_INT 25
36459: EQUAL
36460: IFFALSE 36481
// points := [ 80 , 65 , 100 ] ;
36462: LD_ADDR_VAR 0 9
36466: PUSH
36467: LD_INT 80
36469: PUSH
36470: LD_INT 65
36472: PUSH
36473: LD_INT 100
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: LIST
36480: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36481: LD_VAR 0 6
36485: PPUSH
36486: CALL_OW 263
36490: PUSH
36491: LD_INT 1
36493: EQUAL
36494: IFFALSE 36529
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36496: LD_ADDR_VAR 0 10
36500: PUSH
36501: LD_VAR 0 10
36505: PUSH
36506: LD_VAR 0 6
36510: PPUSH
36511: CALL_OW 311
36515: PPUSH
36516: LD_INT 3
36518: PPUSH
36519: CALL_OW 259
36523: PUSH
36524: LD_INT 4
36526: MUL
36527: MUL
36528: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36529: LD_VAR 0 6
36533: PPUSH
36534: CALL_OW 263
36538: PUSH
36539: LD_INT 2
36541: EQUAL
36542: IFFALSE 36593
// begin j := IsControledBy ( i ) ;
36544: LD_ADDR_VAR 0 7
36548: PUSH
36549: LD_VAR 0 6
36553: PPUSH
36554: CALL_OW 312
36558: ST_TO_ADDR
// if j then
36559: LD_VAR 0 7
36563: IFFALSE 36593
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36565: LD_ADDR_VAR 0 10
36569: PUSH
36570: LD_VAR 0 10
36574: PUSH
36575: LD_VAR 0 7
36579: PPUSH
36580: LD_INT 3
36582: PPUSH
36583: CALL_OW 259
36587: PUSH
36588: LD_INT 3
36590: MUL
36591: MUL
36592: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36593: LD_VAR 0 6
36597: PPUSH
36598: CALL_OW 264
36602: PUSH
36603: LD_INT 5
36605: PUSH
36606: LD_INT 6
36608: PUSH
36609: LD_INT 46
36611: PUSH
36612: LD_INT 44
36614: PUSH
36615: LD_INT 47
36617: PUSH
36618: LD_INT 45
36620: PUSH
36621: LD_INT 28
36623: PUSH
36624: LD_INT 7
36626: PUSH
36627: LD_INT 27
36629: PUSH
36630: LD_INT 29
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: IN
36645: PUSH
36646: LD_VAR 0 1
36650: PPUSH
36651: LD_INT 52
36653: PPUSH
36654: CALL_OW 321
36658: PUSH
36659: LD_INT 2
36661: EQUAL
36662: AND
36663: IFFALSE 36680
// bpoints := bpoints * 1.2 ;
36665: LD_ADDR_VAR 0 10
36669: PUSH
36670: LD_VAR 0 10
36674: PUSH
36675: LD_REAL  1.20000000000000E+0000
36678: MUL
36679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36680: LD_VAR 0 6
36684: PPUSH
36685: CALL_OW 264
36689: PUSH
36690: LD_INT 6
36692: PUSH
36693: LD_INT 46
36695: PUSH
36696: LD_INT 47
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: LIST
36703: IN
36704: IFFALSE 36721
// bpoints := bpoints * 1.2 ;
36706: LD_ADDR_VAR 0 10
36710: PUSH
36711: LD_VAR 0 10
36715: PUSH
36716: LD_REAL  1.20000000000000E+0000
36719: MUL
36720: ST_TO_ADDR
// end ; unit_building :
36721: GO 36735
36723: LD_INT 3
36725: DOUBLE
36726: EQUAL
36727: IFTRUE 36731
36729: GO 36734
36731: POP
// ; end ;
36732: GO 36735
36734: POP
// for j = 1 to 3 do
36735: LD_ADDR_VAR 0 7
36739: PUSH
36740: DOUBLE
36741: LD_INT 1
36743: DEC
36744: ST_TO_ADDR
36745: LD_INT 3
36747: PUSH
36748: FOR_TO
36749: IFFALSE 36802
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36751: LD_ADDR_VAR 0 5
36755: PUSH
36756: LD_VAR 0 5
36760: PPUSH
36761: LD_VAR 0 7
36765: PPUSH
36766: LD_VAR 0 5
36770: PUSH
36771: LD_VAR 0 7
36775: ARRAY
36776: PUSH
36777: LD_VAR 0 9
36781: PUSH
36782: LD_VAR 0 7
36786: ARRAY
36787: PUSH
36788: LD_VAR 0 10
36792: MUL
36793: PLUS
36794: PPUSH
36795: CALL_OW 1
36799: ST_TO_ADDR
36800: GO 36748
36802: POP
36803: POP
// end ;
36804: GO 35283
36806: POP
36807: POP
// result := Replace ( result , 4 , tmp ) ;
36808: LD_ADDR_VAR 0 5
36812: PUSH
36813: LD_VAR 0 5
36817: PPUSH
36818: LD_INT 4
36820: PPUSH
36821: LD_VAR 0 8
36825: PPUSH
36826: CALL_OW 1
36830: ST_TO_ADDR
// end ;
36831: LD_VAR 0 5
36835: RET
// export function DangerAtRange ( unit , range ) ; begin
36836: LD_INT 0
36838: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36839: LD_ADDR_VAR 0 3
36843: PUSH
36844: LD_VAR 0 1
36848: PPUSH
36849: CALL_OW 255
36853: PPUSH
36854: LD_VAR 0 1
36858: PPUSH
36859: CALL_OW 250
36863: PPUSH
36864: LD_VAR 0 1
36868: PPUSH
36869: CALL_OW 251
36873: PPUSH
36874: LD_VAR 0 2
36878: PPUSH
36879: CALL 35135 0 4
36883: ST_TO_ADDR
// end ;
36884: LD_VAR 0 3
36888: RET
// export function DangerInArea ( side , area ) ; begin
36889: LD_INT 0
36891: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36892: LD_ADDR_VAR 0 3
36896: PUSH
36897: LD_VAR 0 2
36901: PPUSH
36902: LD_INT 81
36904: PUSH
36905: LD_VAR 0 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PPUSH
36914: CALL_OW 70
36918: ST_TO_ADDR
// end ;
36919: LD_VAR 0 3
36923: RET
// export function IsExtension ( b ) ; begin
36924: LD_INT 0
36926: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36927: LD_ADDR_VAR 0 2
36931: PUSH
36932: LD_VAR 0 1
36936: PUSH
36937: LD_INT 23
36939: PUSH
36940: LD_INT 20
36942: PUSH
36943: LD_INT 22
36945: PUSH
36946: LD_INT 17
36948: PUSH
36949: LD_INT 24
36951: PUSH
36952: LD_INT 21
36954: PUSH
36955: LD_INT 19
36957: PUSH
36958: LD_INT 16
36960: PUSH
36961: LD_INT 25
36963: PUSH
36964: LD_INT 18
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: IN
36979: ST_TO_ADDR
// end ;
36980: LD_VAR 0 2
36984: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36985: LD_INT 0
36987: PPUSH
36988: PPUSH
36989: PPUSH
// result := [ ] ;
36990: LD_ADDR_VAR 0 4
36994: PUSH
36995: EMPTY
36996: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36997: LD_ADDR_VAR 0 5
37001: PUSH
37002: LD_VAR 0 2
37006: PPUSH
37007: LD_INT 21
37009: PUSH
37010: LD_INT 3
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PPUSH
37017: CALL_OW 70
37021: ST_TO_ADDR
// if not tmp then
37022: LD_VAR 0 5
37026: NOT
37027: IFFALSE 37031
// exit ;
37029: GO 37095
// if checkLink then
37031: LD_VAR 0 3
37035: IFFALSE 37085
// begin for i in tmp do
37037: LD_ADDR_VAR 0 6
37041: PUSH
37042: LD_VAR 0 5
37046: PUSH
37047: FOR_IN
37048: IFFALSE 37083
// if GetBase ( i ) <> base then
37050: LD_VAR 0 6
37054: PPUSH
37055: CALL_OW 274
37059: PUSH
37060: LD_VAR 0 1
37064: NONEQUAL
37065: IFFALSE 37081
// ComLinkToBase ( base , i ) ;
37067: LD_VAR 0 1
37071: PPUSH
37072: LD_VAR 0 6
37076: PPUSH
37077: CALL_OW 169
37081: GO 37047
37083: POP
37084: POP
// end ; result := tmp ;
37085: LD_ADDR_VAR 0 4
37089: PUSH
37090: LD_VAR 0 5
37094: ST_TO_ADDR
// end ;
37095: LD_VAR 0 4
37099: RET
// export function ComComplete ( units , b ) ; var i ; begin
37100: LD_INT 0
37102: PPUSH
37103: PPUSH
// if not units then
37104: LD_VAR 0 1
37108: NOT
37109: IFFALSE 37113
// exit ;
37111: GO 37203
// for i in units do
37113: LD_ADDR_VAR 0 4
37117: PUSH
37118: LD_VAR 0 1
37122: PUSH
37123: FOR_IN
37124: IFFALSE 37201
// if BuildingStatus ( b ) = bs_build then
37126: LD_VAR 0 2
37130: PPUSH
37131: CALL_OW 461
37135: PUSH
37136: LD_INT 1
37138: EQUAL
37139: IFFALSE 37199
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37141: LD_VAR 0 4
37145: PPUSH
37146: LD_STRING h
37148: PUSH
37149: LD_VAR 0 2
37153: PPUSH
37154: CALL_OW 250
37158: PUSH
37159: LD_VAR 0 2
37163: PPUSH
37164: CALL_OW 251
37168: PUSH
37169: LD_VAR 0 2
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: PUSH
37192: EMPTY
37193: LIST
37194: PPUSH
37195: CALL_OW 446
37199: GO 37123
37201: POP
37202: POP
// end ;
37203: LD_VAR 0 3
37207: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37208: LD_INT 0
37210: PPUSH
37211: PPUSH
37212: PPUSH
37213: PPUSH
37214: PPUSH
37215: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37216: LD_VAR 0 1
37220: NOT
37221: PUSH
37222: LD_VAR 0 1
37226: PPUSH
37227: CALL_OW 263
37231: PUSH
37232: LD_INT 2
37234: NONEQUAL
37235: OR
37236: IFFALSE 37240
// exit ;
37238: GO 37556
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37240: LD_ADDR_VAR 0 6
37244: PUSH
37245: LD_INT 22
37247: PUSH
37248: LD_VAR 0 1
37252: PPUSH
37253: CALL_OW 255
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 2
37264: PUSH
37265: LD_INT 30
37267: PUSH
37268: LD_INT 36
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 34
37277: PUSH
37278: LD_INT 31
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: LIST
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PPUSH
37294: CALL_OW 69
37298: ST_TO_ADDR
// if not tmp then
37299: LD_VAR 0 6
37303: NOT
37304: IFFALSE 37308
// exit ;
37306: GO 37556
// result := [ ] ;
37308: LD_ADDR_VAR 0 2
37312: PUSH
37313: EMPTY
37314: ST_TO_ADDR
// for i in tmp do
37315: LD_ADDR_VAR 0 3
37319: PUSH
37320: LD_VAR 0 6
37324: PUSH
37325: FOR_IN
37326: IFFALSE 37397
// begin t := UnitsInside ( i ) ;
37328: LD_ADDR_VAR 0 4
37332: PUSH
37333: LD_VAR 0 3
37337: PPUSH
37338: CALL_OW 313
37342: ST_TO_ADDR
// if t then
37343: LD_VAR 0 4
37347: IFFALSE 37395
// for j in t do
37349: LD_ADDR_VAR 0 7
37353: PUSH
37354: LD_VAR 0 4
37358: PUSH
37359: FOR_IN
37360: IFFALSE 37393
// result := Replace ( result , result + 1 , j ) ;
37362: LD_ADDR_VAR 0 2
37366: PUSH
37367: LD_VAR 0 2
37371: PPUSH
37372: LD_VAR 0 2
37376: PUSH
37377: LD_INT 1
37379: PLUS
37380: PPUSH
37381: LD_VAR 0 7
37385: PPUSH
37386: CALL_OW 1
37390: ST_TO_ADDR
37391: GO 37359
37393: POP
37394: POP
// end ;
37395: GO 37325
37397: POP
37398: POP
// if not result then
37399: LD_VAR 0 2
37403: NOT
37404: IFFALSE 37408
// exit ;
37406: GO 37556
// mech := result [ 1 ] ;
37408: LD_ADDR_VAR 0 5
37412: PUSH
37413: LD_VAR 0 2
37417: PUSH
37418: LD_INT 1
37420: ARRAY
37421: ST_TO_ADDR
// if result > 1 then
37422: LD_VAR 0 2
37426: PUSH
37427: LD_INT 1
37429: GREATER
37430: IFFALSE 37542
// begin for i = 2 to result do
37432: LD_ADDR_VAR 0 3
37436: PUSH
37437: DOUBLE
37438: LD_INT 2
37440: DEC
37441: ST_TO_ADDR
37442: LD_VAR 0 2
37446: PUSH
37447: FOR_TO
37448: IFFALSE 37540
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37450: LD_ADDR_VAR 0 4
37454: PUSH
37455: LD_VAR 0 2
37459: PUSH
37460: LD_VAR 0 3
37464: ARRAY
37465: PPUSH
37466: LD_INT 3
37468: PPUSH
37469: CALL_OW 259
37473: PUSH
37474: LD_VAR 0 2
37478: PUSH
37479: LD_VAR 0 3
37483: ARRAY
37484: PPUSH
37485: CALL_OW 432
37489: MINUS
37490: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37491: LD_VAR 0 4
37495: PUSH
37496: LD_VAR 0 5
37500: PPUSH
37501: LD_INT 3
37503: PPUSH
37504: CALL_OW 259
37508: PUSH
37509: LD_VAR 0 5
37513: PPUSH
37514: CALL_OW 432
37518: MINUS
37519: GREATEREQUAL
37520: IFFALSE 37538
// mech := result [ i ] ;
37522: LD_ADDR_VAR 0 5
37526: PUSH
37527: LD_VAR 0 2
37531: PUSH
37532: LD_VAR 0 3
37536: ARRAY
37537: ST_TO_ADDR
// end ;
37538: GO 37447
37540: POP
37541: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37542: LD_VAR 0 1
37546: PPUSH
37547: LD_VAR 0 5
37551: PPUSH
37552: CALL_OW 135
// end ;
37556: LD_VAR 0 2
37560: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37561: LD_INT 0
37563: PPUSH
37564: PPUSH
37565: PPUSH
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
37574: PPUSH
37575: PPUSH
// result := [ ] ;
37576: LD_ADDR_VAR 0 7
37580: PUSH
37581: EMPTY
37582: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37583: LD_VAR 0 1
37587: PPUSH
37588: CALL_OW 266
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: IN
37603: NOT
37604: IFFALSE 37608
// exit ;
37606: GO 39242
// if name then
37608: LD_VAR 0 3
37612: IFFALSE 37628
// SetBName ( base_dep , name ) ;
37614: LD_VAR 0 1
37618: PPUSH
37619: LD_VAR 0 3
37623: PPUSH
37624: CALL_OW 500
// base := GetBase ( base_dep ) ;
37628: LD_ADDR_VAR 0 15
37632: PUSH
37633: LD_VAR 0 1
37637: PPUSH
37638: CALL_OW 274
37642: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37643: LD_ADDR_VAR 0 16
37647: PUSH
37648: LD_VAR 0 1
37652: PPUSH
37653: CALL_OW 255
37657: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37658: LD_ADDR_VAR 0 17
37662: PUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 248
37672: ST_TO_ADDR
// if sources then
37673: LD_VAR 0 5
37677: IFFALSE 37724
// for i = 1 to 3 do
37679: LD_ADDR_VAR 0 8
37683: PUSH
37684: DOUBLE
37685: LD_INT 1
37687: DEC
37688: ST_TO_ADDR
37689: LD_INT 3
37691: PUSH
37692: FOR_TO
37693: IFFALSE 37722
// AddResourceType ( base , i , sources [ i ] ) ;
37695: LD_VAR 0 15
37699: PPUSH
37700: LD_VAR 0 8
37704: PPUSH
37705: LD_VAR 0 5
37709: PUSH
37710: LD_VAR 0 8
37714: ARRAY
37715: PPUSH
37716: CALL_OW 276
37720: GO 37692
37722: POP
37723: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37724: LD_ADDR_VAR 0 18
37728: PUSH
37729: LD_VAR 0 15
37733: PPUSH
37734: LD_VAR 0 2
37738: PPUSH
37739: LD_INT 1
37741: PPUSH
37742: CALL 36985 0 3
37746: ST_TO_ADDR
// InitHc ;
37747: CALL_OW 19
// InitUc ;
37751: CALL_OW 18
// uc_side := side ;
37755: LD_ADDR_OWVAR 20
37759: PUSH
37760: LD_VAR 0 16
37764: ST_TO_ADDR
// uc_nation := nation ;
37765: LD_ADDR_OWVAR 21
37769: PUSH
37770: LD_VAR 0 17
37774: ST_TO_ADDR
// if buildings then
37775: LD_VAR 0 18
37779: IFFALSE 39101
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37781: LD_ADDR_VAR 0 19
37785: PUSH
37786: LD_VAR 0 18
37790: PPUSH
37791: LD_INT 2
37793: PUSH
37794: LD_INT 30
37796: PUSH
37797: LD_INT 29
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 30
37806: PUSH
37807: LD_INT 30
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: LIST
37818: PPUSH
37819: CALL_OW 72
37823: ST_TO_ADDR
// if tmp then
37824: LD_VAR 0 19
37828: IFFALSE 37876
// for i in tmp do
37830: LD_ADDR_VAR 0 8
37834: PUSH
37835: LD_VAR 0 19
37839: PUSH
37840: FOR_IN
37841: IFFALSE 37874
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37843: LD_VAR 0 8
37847: PPUSH
37848: CALL_OW 250
37852: PPUSH
37853: LD_VAR 0 8
37857: PPUSH
37858: CALL_OW 251
37862: PPUSH
37863: LD_VAR 0 16
37867: PPUSH
37868: CALL_OW 441
37872: GO 37840
37874: POP
37875: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37876: LD_VAR 0 18
37880: PPUSH
37881: LD_INT 2
37883: PUSH
37884: LD_INT 30
37886: PUSH
37887: LD_INT 32
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 30
37896: PUSH
37897: LD_INT 33
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: PPUSH
37909: CALL_OW 72
37913: IFFALSE 38001
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37915: LD_ADDR_VAR 0 8
37919: PUSH
37920: LD_VAR 0 18
37924: PPUSH
37925: LD_INT 2
37927: PUSH
37928: LD_INT 30
37930: PUSH
37931: LD_INT 32
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 30
37940: PUSH
37941: LD_INT 33
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: PPUSH
37953: CALL_OW 72
37957: PUSH
37958: FOR_IN
37959: IFFALSE 37999
// begin if not GetBWeapon ( i ) then
37961: LD_VAR 0 8
37965: PPUSH
37966: CALL_OW 269
37970: NOT
37971: IFFALSE 37997
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37973: LD_VAR 0 8
37977: PPUSH
37978: LD_VAR 0 8
37982: PPUSH
37983: LD_VAR 0 2
37987: PPUSH
37988: CALL 39247 0 2
37992: PPUSH
37993: CALL_OW 431
// end ;
37997: GO 37958
37999: POP
38000: POP
// end ; for i = 1 to personel do
38001: LD_ADDR_VAR 0 8
38005: PUSH
38006: DOUBLE
38007: LD_INT 1
38009: DEC
38010: ST_TO_ADDR
38011: LD_VAR 0 6
38015: PUSH
38016: FOR_TO
38017: IFFALSE 39081
// begin if i > 4 then
38019: LD_VAR 0 8
38023: PUSH
38024: LD_INT 4
38026: GREATER
38027: IFFALSE 38031
// break ;
38029: GO 39081
// case i of 1 :
38031: LD_VAR 0 8
38035: PUSH
38036: LD_INT 1
38038: DOUBLE
38039: EQUAL
38040: IFTRUE 38044
38042: GO 38124
38044: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38045: LD_ADDR_VAR 0 12
38049: PUSH
38050: LD_VAR 0 18
38054: PPUSH
38055: LD_INT 22
38057: PUSH
38058: LD_VAR 0 16
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 58
38069: PUSH
38070: EMPTY
38071: LIST
38072: PUSH
38073: LD_INT 2
38075: PUSH
38076: LD_INT 30
38078: PUSH
38079: LD_INT 32
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 30
38088: PUSH
38089: LD_INT 4
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 30
38098: PUSH
38099: LD_INT 5
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: LIST
38116: PPUSH
38117: CALL_OW 72
38121: ST_TO_ADDR
38122: GO 38346
38124: LD_INT 2
38126: DOUBLE
38127: EQUAL
38128: IFTRUE 38132
38130: GO 38194
38132: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38133: LD_ADDR_VAR 0 12
38137: PUSH
38138: LD_VAR 0 18
38142: PPUSH
38143: LD_INT 22
38145: PUSH
38146: LD_VAR 0 16
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 2
38157: PUSH
38158: LD_INT 30
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 30
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PPUSH
38187: CALL_OW 72
38191: ST_TO_ADDR
38192: GO 38346
38194: LD_INT 3
38196: DOUBLE
38197: EQUAL
38198: IFTRUE 38202
38200: GO 38264
38202: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38203: LD_ADDR_VAR 0 12
38207: PUSH
38208: LD_VAR 0 18
38212: PPUSH
38213: LD_INT 22
38215: PUSH
38216: LD_VAR 0 16
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 30
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 30
38240: PUSH
38241: LD_INT 3
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: LIST
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PPUSH
38257: CALL_OW 72
38261: ST_TO_ADDR
38262: GO 38346
38264: LD_INT 4
38266: DOUBLE
38267: EQUAL
38268: IFTRUE 38272
38270: GO 38345
38272: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38273: LD_ADDR_VAR 0 12
38277: PUSH
38278: LD_VAR 0 18
38282: PPUSH
38283: LD_INT 22
38285: PUSH
38286: LD_VAR 0 16
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: LD_INT 30
38300: PUSH
38301: LD_INT 6
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 30
38310: PUSH
38311: LD_INT 7
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 30
38320: PUSH
38321: LD_INT 8
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PPUSH
38338: CALL_OW 72
38342: ST_TO_ADDR
38343: GO 38346
38345: POP
// if i = 1 then
38346: LD_VAR 0 8
38350: PUSH
38351: LD_INT 1
38353: EQUAL
38354: IFFALSE 38465
// begin tmp := [ ] ;
38356: LD_ADDR_VAR 0 19
38360: PUSH
38361: EMPTY
38362: ST_TO_ADDR
// for j in f do
38363: LD_ADDR_VAR 0 9
38367: PUSH
38368: LD_VAR 0 12
38372: PUSH
38373: FOR_IN
38374: IFFALSE 38447
// if GetBType ( j ) = b_bunker then
38376: LD_VAR 0 9
38380: PPUSH
38381: CALL_OW 266
38385: PUSH
38386: LD_INT 32
38388: EQUAL
38389: IFFALSE 38416
// tmp := Insert ( tmp , 1 , j ) else
38391: LD_ADDR_VAR 0 19
38395: PUSH
38396: LD_VAR 0 19
38400: PPUSH
38401: LD_INT 1
38403: PPUSH
38404: LD_VAR 0 9
38408: PPUSH
38409: CALL_OW 2
38413: ST_TO_ADDR
38414: GO 38445
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38416: LD_ADDR_VAR 0 19
38420: PUSH
38421: LD_VAR 0 19
38425: PPUSH
38426: LD_VAR 0 19
38430: PUSH
38431: LD_INT 1
38433: PLUS
38434: PPUSH
38435: LD_VAR 0 9
38439: PPUSH
38440: CALL_OW 2
38444: ST_TO_ADDR
38445: GO 38373
38447: POP
38448: POP
// if tmp then
38449: LD_VAR 0 19
38453: IFFALSE 38465
// f := tmp ;
38455: LD_ADDR_VAR 0 12
38459: PUSH
38460: LD_VAR 0 19
38464: ST_TO_ADDR
// end ; x := personel [ i ] ;
38465: LD_ADDR_VAR 0 13
38469: PUSH
38470: LD_VAR 0 6
38474: PUSH
38475: LD_VAR 0 8
38479: ARRAY
38480: ST_TO_ADDR
// if x = - 1 then
38481: LD_VAR 0 13
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: EQUAL
38490: IFFALSE 38699
// begin for j in f do
38492: LD_ADDR_VAR 0 9
38496: PUSH
38497: LD_VAR 0 12
38501: PUSH
38502: FOR_IN
38503: IFFALSE 38695
// repeat InitHc ;
38505: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38509: LD_VAR 0 9
38513: PPUSH
38514: CALL_OW 266
38518: PUSH
38519: LD_INT 5
38521: EQUAL
38522: IFFALSE 38592
// begin if UnitsInside ( j ) < 3 then
38524: LD_VAR 0 9
38528: PPUSH
38529: CALL_OW 313
38533: PUSH
38534: LD_INT 3
38536: LESS
38537: IFFALSE 38573
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38539: LD_INT 0
38541: PPUSH
38542: LD_INT 5
38544: PUSH
38545: LD_INT 8
38547: PUSH
38548: LD_INT 9
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: PUSH
38556: LD_VAR 0 17
38560: ARRAY
38561: PPUSH
38562: LD_VAR 0 4
38566: PPUSH
38567: CALL_OW 380
38571: GO 38590
// PrepareHuman ( false , i , skill ) ;
38573: LD_INT 0
38575: PPUSH
38576: LD_VAR 0 8
38580: PPUSH
38581: LD_VAR 0 4
38585: PPUSH
38586: CALL_OW 380
// end else
38590: GO 38609
// PrepareHuman ( false , i , skill ) ;
38592: LD_INT 0
38594: PPUSH
38595: LD_VAR 0 8
38599: PPUSH
38600: LD_VAR 0 4
38604: PPUSH
38605: CALL_OW 380
// un := CreateHuman ;
38609: LD_ADDR_VAR 0 14
38613: PUSH
38614: CALL_OW 44
38618: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38619: LD_ADDR_VAR 0 7
38623: PUSH
38624: LD_VAR 0 7
38628: PPUSH
38629: LD_INT 1
38631: PPUSH
38632: LD_VAR 0 14
38636: PPUSH
38637: CALL_OW 2
38641: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38642: LD_VAR 0 14
38646: PPUSH
38647: LD_VAR 0 9
38651: PPUSH
38652: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38656: LD_VAR 0 9
38660: PPUSH
38661: CALL_OW 313
38665: PUSH
38666: LD_INT 6
38668: EQUAL
38669: PUSH
38670: LD_VAR 0 9
38674: PPUSH
38675: CALL_OW 266
38679: PUSH
38680: LD_INT 32
38682: PUSH
38683: LD_INT 31
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: IN
38690: OR
38691: IFFALSE 38505
38693: GO 38502
38695: POP
38696: POP
// end else
38697: GO 39079
// for j = 1 to x do
38699: LD_ADDR_VAR 0 9
38703: PUSH
38704: DOUBLE
38705: LD_INT 1
38707: DEC
38708: ST_TO_ADDR
38709: LD_VAR 0 13
38713: PUSH
38714: FOR_TO
38715: IFFALSE 39077
// begin InitHc ;
38717: CALL_OW 19
// if not f then
38721: LD_VAR 0 12
38725: NOT
38726: IFFALSE 38815
// begin PrepareHuman ( false , i , skill ) ;
38728: LD_INT 0
38730: PPUSH
38731: LD_VAR 0 8
38735: PPUSH
38736: LD_VAR 0 4
38740: PPUSH
38741: CALL_OW 380
// un := CreateHuman ;
38745: LD_ADDR_VAR 0 14
38749: PUSH
38750: CALL_OW 44
38754: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38755: LD_ADDR_VAR 0 7
38759: PUSH
38760: LD_VAR 0 7
38764: PPUSH
38765: LD_INT 1
38767: PPUSH
38768: LD_VAR 0 14
38772: PPUSH
38773: CALL_OW 2
38777: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38778: LD_VAR 0 14
38782: PPUSH
38783: LD_VAR 0 1
38787: PPUSH
38788: CALL_OW 250
38792: PPUSH
38793: LD_VAR 0 1
38797: PPUSH
38798: CALL_OW 251
38802: PPUSH
38803: LD_INT 10
38805: PPUSH
38806: LD_INT 0
38808: PPUSH
38809: CALL_OW 50
// continue ;
38813: GO 38714
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38815: LD_VAR 0 12
38819: PUSH
38820: LD_INT 1
38822: ARRAY
38823: PPUSH
38824: CALL_OW 313
38828: PUSH
38829: LD_VAR 0 12
38833: PUSH
38834: LD_INT 1
38836: ARRAY
38837: PPUSH
38838: CALL_OW 266
38842: PUSH
38843: LD_INT 32
38845: PUSH
38846: LD_INT 31
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: IN
38853: AND
38854: PUSH
38855: LD_VAR 0 12
38859: PUSH
38860: LD_INT 1
38862: ARRAY
38863: PPUSH
38864: CALL_OW 313
38868: PUSH
38869: LD_INT 6
38871: EQUAL
38872: OR
38873: IFFALSE 38893
// f := Delete ( f , 1 ) ;
38875: LD_ADDR_VAR 0 12
38879: PUSH
38880: LD_VAR 0 12
38884: PPUSH
38885: LD_INT 1
38887: PPUSH
38888: CALL_OW 3
38892: ST_TO_ADDR
// if not f then
38893: LD_VAR 0 12
38897: NOT
38898: IFFALSE 38916
// begin x := x + 2 ;
38900: LD_ADDR_VAR 0 13
38904: PUSH
38905: LD_VAR 0 13
38909: PUSH
38910: LD_INT 2
38912: PLUS
38913: ST_TO_ADDR
// continue ;
38914: GO 38714
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38916: LD_VAR 0 12
38920: PUSH
38921: LD_INT 1
38923: ARRAY
38924: PPUSH
38925: CALL_OW 266
38929: PUSH
38930: LD_INT 5
38932: EQUAL
38933: IFFALSE 39007
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38935: LD_VAR 0 12
38939: PUSH
38940: LD_INT 1
38942: ARRAY
38943: PPUSH
38944: CALL_OW 313
38948: PUSH
38949: LD_INT 3
38951: LESS
38952: IFFALSE 38988
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38954: LD_INT 0
38956: PPUSH
38957: LD_INT 5
38959: PUSH
38960: LD_INT 8
38962: PUSH
38963: LD_INT 9
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: PUSH
38971: LD_VAR 0 17
38975: ARRAY
38976: PPUSH
38977: LD_VAR 0 4
38981: PPUSH
38982: CALL_OW 380
38986: GO 39005
// PrepareHuman ( false , i , skill ) ;
38988: LD_INT 0
38990: PPUSH
38991: LD_VAR 0 8
38995: PPUSH
38996: LD_VAR 0 4
39000: PPUSH
39001: CALL_OW 380
// end else
39005: GO 39024
// PrepareHuman ( false , i , skill ) ;
39007: LD_INT 0
39009: PPUSH
39010: LD_VAR 0 8
39014: PPUSH
39015: LD_VAR 0 4
39019: PPUSH
39020: CALL_OW 380
// un := CreateHuman ;
39024: LD_ADDR_VAR 0 14
39028: PUSH
39029: CALL_OW 44
39033: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39034: LD_ADDR_VAR 0 7
39038: PUSH
39039: LD_VAR 0 7
39043: PPUSH
39044: LD_INT 1
39046: PPUSH
39047: LD_VAR 0 14
39051: PPUSH
39052: CALL_OW 2
39056: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39057: LD_VAR 0 14
39061: PPUSH
39062: LD_VAR 0 12
39066: PUSH
39067: LD_INT 1
39069: ARRAY
39070: PPUSH
39071: CALL_OW 52
// end ;
39075: GO 38714
39077: POP
39078: POP
// end ;
39079: GO 38016
39081: POP
39082: POP
// result := result ^ buildings ;
39083: LD_ADDR_VAR 0 7
39087: PUSH
39088: LD_VAR 0 7
39092: PUSH
39093: LD_VAR 0 18
39097: ADD
39098: ST_TO_ADDR
// end else
39099: GO 39242
// begin for i = 1 to personel do
39101: LD_ADDR_VAR 0 8
39105: PUSH
39106: DOUBLE
39107: LD_INT 1
39109: DEC
39110: ST_TO_ADDR
39111: LD_VAR 0 6
39115: PUSH
39116: FOR_TO
39117: IFFALSE 39240
// begin if i > 4 then
39119: LD_VAR 0 8
39123: PUSH
39124: LD_INT 4
39126: GREATER
39127: IFFALSE 39131
// break ;
39129: GO 39240
// x := personel [ i ] ;
39131: LD_ADDR_VAR 0 13
39135: PUSH
39136: LD_VAR 0 6
39140: PUSH
39141: LD_VAR 0 8
39145: ARRAY
39146: ST_TO_ADDR
// if x = - 1 then
39147: LD_VAR 0 13
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: EQUAL
39156: IFFALSE 39160
// continue ;
39158: GO 39116
// PrepareHuman ( false , i , skill ) ;
39160: LD_INT 0
39162: PPUSH
39163: LD_VAR 0 8
39167: PPUSH
39168: LD_VAR 0 4
39172: PPUSH
39173: CALL_OW 380
// un := CreateHuman ;
39177: LD_ADDR_VAR 0 14
39181: PUSH
39182: CALL_OW 44
39186: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39187: LD_VAR 0 14
39191: PPUSH
39192: LD_VAR 0 1
39196: PPUSH
39197: CALL_OW 250
39201: PPUSH
39202: LD_VAR 0 1
39206: PPUSH
39207: CALL_OW 251
39211: PPUSH
39212: LD_INT 10
39214: PPUSH
39215: LD_INT 0
39217: PPUSH
39218: CALL_OW 50
// result := result ^ un ;
39222: LD_ADDR_VAR 0 7
39226: PUSH
39227: LD_VAR 0 7
39231: PUSH
39232: LD_VAR 0 14
39236: ADD
39237: ST_TO_ADDR
// end ;
39238: GO 39116
39240: POP
39241: POP
// end ; end ;
39242: LD_VAR 0 7
39246: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39247: LD_INT 0
39249: PPUSH
39250: PPUSH
39251: PPUSH
39252: PPUSH
39253: PPUSH
39254: PPUSH
39255: PPUSH
39256: PPUSH
39257: PPUSH
39258: PPUSH
39259: PPUSH
39260: PPUSH
39261: PPUSH
39262: PPUSH
39263: PPUSH
39264: PPUSH
// result := false ;
39265: LD_ADDR_VAR 0 3
39269: PUSH
39270: LD_INT 0
39272: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39273: LD_VAR 0 1
39277: NOT
39278: PUSH
39279: LD_VAR 0 1
39283: PPUSH
39284: CALL_OW 266
39288: PUSH
39289: LD_INT 32
39291: PUSH
39292: LD_INT 33
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: IN
39299: NOT
39300: OR
39301: IFFALSE 39305
// exit ;
39303: GO 40414
// nat := GetNation ( tower ) ;
39305: LD_ADDR_VAR 0 12
39309: PUSH
39310: LD_VAR 0 1
39314: PPUSH
39315: CALL_OW 248
39319: ST_TO_ADDR
// side := GetSide ( tower ) ;
39320: LD_ADDR_VAR 0 16
39324: PUSH
39325: LD_VAR 0 1
39329: PPUSH
39330: CALL_OW 255
39334: ST_TO_ADDR
// x := GetX ( tower ) ;
39335: LD_ADDR_VAR 0 10
39339: PUSH
39340: LD_VAR 0 1
39344: PPUSH
39345: CALL_OW 250
39349: ST_TO_ADDR
// y := GetY ( tower ) ;
39350: LD_ADDR_VAR 0 11
39354: PUSH
39355: LD_VAR 0 1
39359: PPUSH
39360: CALL_OW 251
39364: ST_TO_ADDR
// if not x or not y then
39365: LD_VAR 0 10
39369: NOT
39370: PUSH
39371: LD_VAR 0 11
39375: NOT
39376: OR
39377: IFFALSE 39381
// exit ;
39379: GO 40414
// weapon := 0 ;
39381: LD_ADDR_VAR 0 18
39385: PUSH
39386: LD_INT 0
39388: ST_TO_ADDR
// fac_list := [ ] ;
39389: LD_ADDR_VAR 0 17
39393: PUSH
39394: EMPTY
39395: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39396: LD_ADDR_VAR 0 6
39400: PUSH
39401: LD_VAR 0 1
39405: PPUSH
39406: CALL_OW 274
39410: PPUSH
39411: LD_VAR 0 2
39415: PPUSH
39416: LD_INT 0
39418: PPUSH
39419: CALL 36985 0 3
39423: PPUSH
39424: LD_INT 30
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PPUSH
39434: CALL_OW 72
39438: ST_TO_ADDR
// if not factories then
39439: LD_VAR 0 6
39443: NOT
39444: IFFALSE 39448
// exit ;
39446: GO 40414
// for i in factories do
39448: LD_ADDR_VAR 0 8
39452: PUSH
39453: LD_VAR 0 6
39457: PUSH
39458: FOR_IN
39459: IFFALSE 39484
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39461: LD_ADDR_VAR 0 17
39465: PUSH
39466: LD_VAR 0 17
39470: PUSH
39471: LD_VAR 0 8
39475: PPUSH
39476: CALL_OW 478
39480: UNION
39481: ST_TO_ADDR
39482: GO 39458
39484: POP
39485: POP
// if not fac_list then
39486: LD_VAR 0 17
39490: NOT
39491: IFFALSE 39495
// exit ;
39493: GO 40414
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39495: LD_ADDR_VAR 0 5
39499: PUSH
39500: LD_INT 4
39502: PUSH
39503: LD_INT 5
39505: PUSH
39506: LD_INT 9
39508: PUSH
39509: LD_INT 10
39511: PUSH
39512: LD_INT 6
39514: PUSH
39515: LD_INT 7
39517: PUSH
39518: LD_INT 11
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 27
39532: PUSH
39533: LD_INT 28
39535: PUSH
39536: LD_INT 26
39538: PUSH
39539: LD_INT 30
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 43
39550: PUSH
39551: LD_INT 44
39553: PUSH
39554: LD_INT 46
39556: PUSH
39557: LD_INT 45
39559: PUSH
39560: LD_INT 47
39562: PUSH
39563: LD_INT 49
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: PUSH
39579: LD_VAR 0 12
39583: ARRAY
39584: ST_TO_ADDR
// list := list isect fac_list ;
39585: LD_ADDR_VAR 0 5
39589: PUSH
39590: LD_VAR 0 5
39594: PUSH
39595: LD_VAR 0 17
39599: ISECT
39600: ST_TO_ADDR
// if not list then
39601: LD_VAR 0 5
39605: NOT
39606: IFFALSE 39610
// exit ;
39608: GO 40414
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39610: LD_VAR 0 12
39614: PUSH
39615: LD_INT 3
39617: EQUAL
39618: PUSH
39619: LD_INT 49
39621: PUSH
39622: LD_VAR 0 5
39626: IN
39627: AND
39628: PUSH
39629: LD_INT 31
39631: PPUSH
39632: LD_VAR 0 16
39636: PPUSH
39637: CALL_OW 321
39641: PUSH
39642: LD_INT 2
39644: EQUAL
39645: AND
39646: IFFALSE 39706
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39648: LD_INT 22
39650: PUSH
39651: LD_VAR 0 16
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 35
39662: PUSH
39663: LD_INT 49
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 91
39672: PUSH
39673: LD_VAR 0 1
39677: PUSH
39678: LD_INT 10
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: LIST
39690: PPUSH
39691: CALL_OW 69
39695: NOT
39696: IFFALSE 39706
// weapon := ru_time_lapser ;
39698: LD_ADDR_VAR 0 18
39702: PUSH
39703: LD_INT 49
39705: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39706: LD_VAR 0 12
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: IN
39721: PUSH
39722: LD_INT 11
39724: PUSH
39725: LD_VAR 0 5
39729: IN
39730: PUSH
39731: LD_INT 30
39733: PUSH
39734: LD_VAR 0 5
39738: IN
39739: OR
39740: AND
39741: PUSH
39742: LD_INT 6
39744: PPUSH
39745: LD_VAR 0 16
39749: PPUSH
39750: CALL_OW 321
39754: PUSH
39755: LD_INT 2
39757: EQUAL
39758: AND
39759: IFFALSE 39924
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39761: LD_INT 22
39763: PUSH
39764: LD_VAR 0 16
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: LD_INT 35
39778: PUSH
39779: LD_INT 11
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 35
39788: PUSH
39789: LD_INT 30
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 91
39803: PUSH
39804: LD_VAR 0 1
39808: PUSH
39809: LD_INT 18
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: LIST
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: LIST
39821: PPUSH
39822: CALL_OW 69
39826: NOT
39827: PUSH
39828: LD_INT 22
39830: PUSH
39831: LD_VAR 0 16
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: LD_INT 30
39845: PUSH
39846: LD_INT 32
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 30
39855: PUSH
39856: LD_INT 33
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 91
39870: PUSH
39871: LD_VAR 0 1
39875: PUSH
39876: LD_INT 12
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: LIST
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: LIST
39888: PUSH
39889: EMPTY
39890: LIST
39891: PPUSH
39892: CALL_OW 69
39896: PUSH
39897: LD_INT 2
39899: GREATER
39900: AND
39901: IFFALSE 39924
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39903: LD_ADDR_VAR 0 18
39907: PUSH
39908: LD_INT 11
39910: PUSH
39911: LD_INT 30
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_VAR 0 12
39922: ARRAY
39923: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39924: LD_VAR 0 18
39928: NOT
39929: PUSH
39930: LD_INT 40
39932: PPUSH
39933: LD_VAR 0 16
39937: PPUSH
39938: CALL_OW 321
39942: PUSH
39943: LD_INT 2
39945: EQUAL
39946: AND
39947: PUSH
39948: LD_INT 7
39950: PUSH
39951: LD_VAR 0 5
39955: IN
39956: PUSH
39957: LD_INT 28
39959: PUSH
39960: LD_VAR 0 5
39964: IN
39965: OR
39966: PUSH
39967: LD_INT 45
39969: PUSH
39970: LD_VAR 0 5
39974: IN
39975: OR
39976: AND
39977: IFFALSE 40231
// begin hex := GetHexInfo ( x , y ) ;
39979: LD_ADDR_VAR 0 4
39983: PUSH
39984: LD_VAR 0 10
39988: PPUSH
39989: LD_VAR 0 11
39993: PPUSH
39994: CALL_OW 546
39998: ST_TO_ADDR
// if hex [ 1 ] then
39999: LD_VAR 0 4
40003: PUSH
40004: LD_INT 1
40006: ARRAY
40007: IFFALSE 40011
// exit ;
40009: GO 40414
// height := hex [ 2 ] ;
40011: LD_ADDR_VAR 0 15
40015: PUSH
40016: LD_VAR 0 4
40020: PUSH
40021: LD_INT 2
40023: ARRAY
40024: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40025: LD_ADDR_VAR 0 14
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 3
40038: PUSH
40039: LD_INT 5
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: ST_TO_ADDR
// for i in tmp do
40048: LD_ADDR_VAR 0 8
40052: PUSH
40053: LD_VAR 0 14
40057: PUSH
40058: FOR_IN
40059: IFFALSE 40229
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40061: LD_ADDR_VAR 0 9
40065: PUSH
40066: LD_VAR 0 10
40070: PPUSH
40071: LD_VAR 0 8
40075: PPUSH
40076: LD_INT 5
40078: PPUSH
40079: CALL_OW 272
40083: PUSH
40084: LD_VAR 0 11
40088: PPUSH
40089: LD_VAR 0 8
40093: PPUSH
40094: LD_INT 5
40096: PPUSH
40097: CALL_OW 273
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40106: LD_VAR 0 9
40110: PUSH
40111: LD_INT 1
40113: ARRAY
40114: PPUSH
40115: LD_VAR 0 9
40119: PUSH
40120: LD_INT 2
40122: ARRAY
40123: PPUSH
40124: CALL_OW 488
40128: IFFALSE 40227
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40130: LD_ADDR_VAR 0 4
40134: PUSH
40135: LD_VAR 0 9
40139: PUSH
40140: LD_INT 1
40142: ARRAY
40143: PPUSH
40144: LD_VAR 0 9
40148: PUSH
40149: LD_INT 2
40151: ARRAY
40152: PPUSH
40153: CALL_OW 546
40157: ST_TO_ADDR
// if hex [ 1 ] then
40158: LD_VAR 0 4
40162: PUSH
40163: LD_INT 1
40165: ARRAY
40166: IFFALSE 40170
// continue ;
40168: GO 40058
// h := hex [ 2 ] ;
40170: LD_ADDR_VAR 0 13
40174: PUSH
40175: LD_VAR 0 4
40179: PUSH
40180: LD_INT 2
40182: ARRAY
40183: ST_TO_ADDR
// if h + 7 < height then
40184: LD_VAR 0 13
40188: PUSH
40189: LD_INT 7
40191: PLUS
40192: PUSH
40193: LD_VAR 0 15
40197: LESS
40198: IFFALSE 40227
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40200: LD_ADDR_VAR 0 18
40204: PUSH
40205: LD_INT 7
40207: PUSH
40208: LD_INT 28
40210: PUSH
40211: LD_INT 45
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: PUSH
40219: LD_VAR 0 12
40223: ARRAY
40224: ST_TO_ADDR
// break ;
40225: GO 40229
// end ; end ; end ;
40227: GO 40058
40229: POP
40230: POP
// end ; if not weapon then
40231: LD_VAR 0 18
40235: NOT
40236: IFFALSE 40296
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40238: LD_ADDR_VAR 0 5
40242: PUSH
40243: LD_VAR 0 5
40247: PUSH
40248: LD_INT 11
40250: PUSH
40251: LD_INT 30
40253: PUSH
40254: LD_INT 49
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: DIFF
40262: ST_TO_ADDR
// if not list then
40263: LD_VAR 0 5
40267: NOT
40268: IFFALSE 40272
// exit ;
40270: GO 40414
// weapon := list [ rand ( 1 , list ) ] ;
40272: LD_ADDR_VAR 0 18
40276: PUSH
40277: LD_VAR 0 5
40281: PUSH
40282: LD_INT 1
40284: PPUSH
40285: LD_VAR 0 5
40289: PPUSH
40290: CALL_OW 12
40294: ARRAY
40295: ST_TO_ADDR
// end ; if weapon then
40296: LD_VAR 0 18
40300: IFFALSE 40414
// begin tmp := CostOfWeapon ( weapon ) ;
40302: LD_ADDR_VAR 0 14
40306: PUSH
40307: LD_VAR 0 18
40311: PPUSH
40312: CALL_OW 451
40316: ST_TO_ADDR
// j := GetBase ( tower ) ;
40317: LD_ADDR_VAR 0 9
40321: PUSH
40322: LD_VAR 0 1
40326: PPUSH
40327: CALL_OW 274
40331: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40332: LD_VAR 0 9
40336: PPUSH
40337: LD_INT 1
40339: PPUSH
40340: CALL_OW 275
40344: PUSH
40345: LD_VAR 0 14
40349: PUSH
40350: LD_INT 1
40352: ARRAY
40353: GREATEREQUAL
40354: PUSH
40355: LD_VAR 0 9
40359: PPUSH
40360: LD_INT 2
40362: PPUSH
40363: CALL_OW 275
40367: PUSH
40368: LD_VAR 0 14
40372: PUSH
40373: LD_INT 2
40375: ARRAY
40376: GREATEREQUAL
40377: AND
40378: PUSH
40379: LD_VAR 0 9
40383: PPUSH
40384: LD_INT 3
40386: PPUSH
40387: CALL_OW 275
40391: PUSH
40392: LD_VAR 0 14
40396: PUSH
40397: LD_INT 3
40399: ARRAY
40400: GREATEREQUAL
40401: AND
40402: IFFALSE 40414
// result := weapon ;
40404: LD_ADDR_VAR 0 3
40408: PUSH
40409: LD_VAR 0 18
40413: ST_TO_ADDR
// end ; end ;
40414: LD_VAR 0 3
40418: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40419: LD_INT 0
40421: PPUSH
40422: PPUSH
// result := true ;
40423: LD_ADDR_VAR 0 3
40427: PUSH
40428: LD_INT 1
40430: ST_TO_ADDR
// if array1 = array2 then
40431: LD_VAR 0 1
40435: PUSH
40436: LD_VAR 0 2
40440: EQUAL
40441: IFFALSE 40501
// begin for i = 1 to array1 do
40443: LD_ADDR_VAR 0 4
40447: PUSH
40448: DOUBLE
40449: LD_INT 1
40451: DEC
40452: ST_TO_ADDR
40453: LD_VAR 0 1
40457: PUSH
40458: FOR_TO
40459: IFFALSE 40497
// if array1 [ i ] <> array2 [ i ] then
40461: LD_VAR 0 1
40465: PUSH
40466: LD_VAR 0 4
40470: ARRAY
40471: PUSH
40472: LD_VAR 0 2
40476: PUSH
40477: LD_VAR 0 4
40481: ARRAY
40482: NONEQUAL
40483: IFFALSE 40495
// begin result := false ;
40485: LD_ADDR_VAR 0 3
40489: PUSH
40490: LD_INT 0
40492: ST_TO_ADDR
// break ;
40493: GO 40497
// end ;
40495: GO 40458
40497: POP
40498: POP
// end else
40499: GO 40509
// result := false ;
40501: LD_ADDR_VAR 0 3
40505: PUSH
40506: LD_INT 0
40508: ST_TO_ADDR
// end ;
40509: LD_VAR 0 3
40513: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40514: LD_INT 0
40516: PPUSH
40517: PPUSH
// if not array1 or not array2 then
40518: LD_VAR 0 1
40522: NOT
40523: PUSH
40524: LD_VAR 0 2
40528: NOT
40529: OR
40530: IFFALSE 40534
// exit ;
40532: GO 40598
// result := true ;
40534: LD_ADDR_VAR 0 3
40538: PUSH
40539: LD_INT 1
40541: ST_TO_ADDR
// for i = 1 to array1 do
40542: LD_ADDR_VAR 0 4
40546: PUSH
40547: DOUBLE
40548: LD_INT 1
40550: DEC
40551: ST_TO_ADDR
40552: LD_VAR 0 1
40556: PUSH
40557: FOR_TO
40558: IFFALSE 40596
// if array1 [ i ] <> array2 [ i ] then
40560: LD_VAR 0 1
40564: PUSH
40565: LD_VAR 0 4
40569: ARRAY
40570: PUSH
40571: LD_VAR 0 2
40575: PUSH
40576: LD_VAR 0 4
40580: ARRAY
40581: NONEQUAL
40582: IFFALSE 40594
// begin result := false ;
40584: LD_ADDR_VAR 0 3
40588: PUSH
40589: LD_INT 0
40591: ST_TO_ADDR
// break ;
40592: GO 40596
// end ;
40594: GO 40557
40596: POP
40597: POP
// end ;
40598: LD_VAR 0 3
40602: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40603: LD_INT 0
40605: PPUSH
40606: PPUSH
40607: PPUSH
// pom := GetBase ( fac ) ;
40608: LD_ADDR_VAR 0 5
40612: PUSH
40613: LD_VAR 0 1
40617: PPUSH
40618: CALL_OW 274
40622: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40623: LD_ADDR_VAR 0 4
40627: PUSH
40628: LD_VAR 0 2
40632: PUSH
40633: LD_INT 1
40635: ARRAY
40636: PPUSH
40637: LD_VAR 0 2
40641: PUSH
40642: LD_INT 2
40644: ARRAY
40645: PPUSH
40646: LD_VAR 0 2
40650: PUSH
40651: LD_INT 3
40653: ARRAY
40654: PPUSH
40655: LD_VAR 0 2
40659: PUSH
40660: LD_INT 4
40662: ARRAY
40663: PPUSH
40664: CALL_OW 449
40668: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40669: LD_ADDR_VAR 0 3
40673: PUSH
40674: LD_VAR 0 5
40678: PPUSH
40679: LD_INT 1
40681: PPUSH
40682: CALL_OW 275
40686: PUSH
40687: LD_VAR 0 4
40691: PUSH
40692: LD_INT 1
40694: ARRAY
40695: GREATEREQUAL
40696: PUSH
40697: LD_VAR 0 5
40701: PPUSH
40702: LD_INT 2
40704: PPUSH
40705: CALL_OW 275
40709: PUSH
40710: LD_VAR 0 4
40714: PUSH
40715: LD_INT 2
40717: ARRAY
40718: GREATEREQUAL
40719: AND
40720: PUSH
40721: LD_VAR 0 5
40725: PPUSH
40726: LD_INT 3
40728: PPUSH
40729: CALL_OW 275
40733: PUSH
40734: LD_VAR 0 4
40738: PUSH
40739: LD_INT 3
40741: ARRAY
40742: GREATEREQUAL
40743: AND
40744: ST_TO_ADDR
// end ;
40745: LD_VAR 0 3
40749: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40750: LD_INT 0
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
// pom := GetBase ( building ) ;
40756: LD_ADDR_VAR 0 3
40760: PUSH
40761: LD_VAR 0 1
40765: PPUSH
40766: CALL_OW 274
40770: ST_TO_ADDR
// if not pom then
40771: LD_VAR 0 3
40775: NOT
40776: IFFALSE 40780
// exit ;
40778: GO 40950
// btype := GetBType ( building ) ;
40780: LD_ADDR_VAR 0 5
40784: PUSH
40785: LD_VAR 0 1
40789: PPUSH
40790: CALL_OW 266
40794: ST_TO_ADDR
// if btype = b_armoury then
40795: LD_VAR 0 5
40799: PUSH
40800: LD_INT 4
40802: EQUAL
40803: IFFALSE 40813
// btype := b_barracks ;
40805: LD_ADDR_VAR 0 5
40809: PUSH
40810: LD_INT 5
40812: ST_TO_ADDR
// if btype = b_depot then
40813: LD_VAR 0 5
40817: PUSH
40818: LD_INT 0
40820: EQUAL
40821: IFFALSE 40831
// btype := b_warehouse ;
40823: LD_ADDR_VAR 0 5
40827: PUSH
40828: LD_INT 1
40830: ST_TO_ADDR
// if btype = b_workshop then
40831: LD_VAR 0 5
40835: PUSH
40836: LD_INT 2
40838: EQUAL
40839: IFFALSE 40849
// btype := b_factory ;
40841: LD_ADDR_VAR 0 5
40845: PUSH
40846: LD_INT 3
40848: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40849: LD_ADDR_VAR 0 4
40853: PUSH
40854: LD_VAR 0 5
40858: PPUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: CALL_OW 248
40868: PPUSH
40869: CALL_OW 450
40873: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40874: LD_ADDR_VAR 0 2
40878: PUSH
40879: LD_VAR 0 3
40883: PPUSH
40884: LD_INT 1
40886: PPUSH
40887: CALL_OW 275
40891: PUSH
40892: LD_VAR 0 4
40896: PUSH
40897: LD_INT 1
40899: ARRAY
40900: GREATEREQUAL
40901: PUSH
40902: LD_VAR 0 3
40906: PPUSH
40907: LD_INT 2
40909: PPUSH
40910: CALL_OW 275
40914: PUSH
40915: LD_VAR 0 4
40919: PUSH
40920: LD_INT 2
40922: ARRAY
40923: GREATEREQUAL
40924: AND
40925: PUSH
40926: LD_VAR 0 3
40930: PPUSH
40931: LD_INT 3
40933: PPUSH
40934: CALL_OW 275
40938: PUSH
40939: LD_VAR 0 4
40943: PUSH
40944: LD_INT 3
40946: ARRAY
40947: GREATEREQUAL
40948: AND
40949: ST_TO_ADDR
// end ;
40950: LD_VAR 0 2
40954: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40955: LD_INT 0
40957: PPUSH
40958: PPUSH
40959: PPUSH
// pom := GetBase ( building ) ;
40960: LD_ADDR_VAR 0 4
40964: PUSH
40965: LD_VAR 0 1
40969: PPUSH
40970: CALL_OW 274
40974: ST_TO_ADDR
// if not pom then
40975: LD_VAR 0 4
40979: NOT
40980: IFFALSE 40984
// exit ;
40982: GO 41085
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40984: LD_ADDR_VAR 0 5
40988: PUSH
40989: LD_VAR 0 2
40993: PPUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: CALL_OW 248
41003: PPUSH
41004: CALL_OW 450
41008: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41009: LD_ADDR_VAR 0 3
41013: PUSH
41014: LD_VAR 0 4
41018: PPUSH
41019: LD_INT 1
41021: PPUSH
41022: CALL_OW 275
41026: PUSH
41027: LD_VAR 0 5
41031: PUSH
41032: LD_INT 1
41034: ARRAY
41035: GREATEREQUAL
41036: PUSH
41037: LD_VAR 0 4
41041: PPUSH
41042: LD_INT 2
41044: PPUSH
41045: CALL_OW 275
41049: PUSH
41050: LD_VAR 0 5
41054: PUSH
41055: LD_INT 2
41057: ARRAY
41058: GREATEREQUAL
41059: AND
41060: PUSH
41061: LD_VAR 0 4
41065: PPUSH
41066: LD_INT 3
41068: PPUSH
41069: CALL_OW 275
41073: PUSH
41074: LD_VAR 0 5
41078: PUSH
41079: LD_INT 3
41081: ARRAY
41082: GREATEREQUAL
41083: AND
41084: ST_TO_ADDR
// end ;
41085: LD_VAR 0 3
41089: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41090: LD_INT 0
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
41101: PPUSH
41102: PPUSH
// result := false ;
41103: LD_ADDR_VAR 0 8
41107: PUSH
41108: LD_INT 0
41110: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41111: LD_VAR 0 5
41115: NOT
41116: PUSH
41117: LD_VAR 0 1
41121: NOT
41122: OR
41123: PUSH
41124: LD_VAR 0 2
41128: NOT
41129: OR
41130: PUSH
41131: LD_VAR 0 3
41135: NOT
41136: OR
41137: IFFALSE 41141
// exit ;
41139: GO 41955
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41141: LD_ADDR_VAR 0 14
41145: PUSH
41146: LD_VAR 0 1
41150: PPUSH
41151: LD_VAR 0 2
41155: PPUSH
41156: LD_VAR 0 3
41160: PPUSH
41161: LD_VAR 0 4
41165: PPUSH
41166: LD_VAR 0 5
41170: PUSH
41171: LD_INT 1
41173: ARRAY
41174: PPUSH
41175: CALL_OW 248
41179: PPUSH
41180: LD_INT 0
41182: PPUSH
41183: CALL 43188 0 6
41187: ST_TO_ADDR
// if not hexes then
41188: LD_VAR 0 14
41192: NOT
41193: IFFALSE 41197
// exit ;
41195: GO 41955
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41197: LD_ADDR_VAR 0 17
41201: PUSH
41202: LD_VAR 0 5
41206: PPUSH
41207: LD_INT 22
41209: PUSH
41210: LD_VAR 0 13
41214: PPUSH
41215: CALL_OW 255
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: LD_INT 30
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 30
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PPUSH
41256: CALL_OW 72
41260: ST_TO_ADDR
// for i = 1 to hexes do
41261: LD_ADDR_VAR 0 9
41265: PUSH
41266: DOUBLE
41267: LD_INT 1
41269: DEC
41270: ST_TO_ADDR
41271: LD_VAR 0 14
41275: PUSH
41276: FOR_TO
41277: IFFALSE 41953
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41279: LD_ADDR_VAR 0 13
41283: PUSH
41284: LD_VAR 0 14
41288: PUSH
41289: LD_VAR 0 9
41293: ARRAY
41294: PUSH
41295: LD_INT 1
41297: ARRAY
41298: PPUSH
41299: LD_VAR 0 14
41303: PUSH
41304: LD_VAR 0 9
41308: ARRAY
41309: PUSH
41310: LD_INT 2
41312: ARRAY
41313: PPUSH
41314: CALL_OW 428
41318: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41319: LD_VAR 0 14
41323: PUSH
41324: LD_VAR 0 9
41328: ARRAY
41329: PUSH
41330: LD_INT 1
41332: ARRAY
41333: PPUSH
41334: LD_VAR 0 14
41338: PUSH
41339: LD_VAR 0 9
41343: ARRAY
41344: PUSH
41345: LD_INT 2
41347: ARRAY
41348: PPUSH
41349: CALL_OW 351
41353: PUSH
41354: LD_VAR 0 14
41358: PUSH
41359: LD_VAR 0 9
41363: ARRAY
41364: PUSH
41365: LD_INT 1
41367: ARRAY
41368: PPUSH
41369: LD_VAR 0 14
41373: PUSH
41374: LD_VAR 0 9
41378: ARRAY
41379: PUSH
41380: LD_INT 2
41382: ARRAY
41383: PPUSH
41384: CALL_OW 488
41388: NOT
41389: OR
41390: PUSH
41391: LD_VAR 0 13
41395: PPUSH
41396: CALL_OW 247
41400: PUSH
41401: LD_INT 3
41403: EQUAL
41404: OR
41405: IFFALSE 41411
// exit ;
41407: POP
41408: POP
41409: GO 41955
// if not tmp then
41411: LD_VAR 0 13
41415: NOT
41416: IFFALSE 41420
// continue ;
41418: GO 41276
// result := true ;
41420: LD_ADDR_VAR 0 8
41424: PUSH
41425: LD_INT 1
41427: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41428: LD_VAR 0 6
41432: PUSH
41433: LD_VAR 0 13
41437: PPUSH
41438: CALL_OW 247
41442: PUSH
41443: LD_INT 2
41445: EQUAL
41446: AND
41447: PUSH
41448: LD_VAR 0 13
41452: PPUSH
41453: CALL_OW 263
41457: PUSH
41458: LD_INT 1
41460: EQUAL
41461: AND
41462: IFFALSE 41626
// begin if IsDrivenBy ( tmp ) then
41464: LD_VAR 0 13
41468: PPUSH
41469: CALL_OW 311
41473: IFFALSE 41477
// continue ;
41475: GO 41276
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41477: LD_VAR 0 6
41481: PPUSH
41482: LD_INT 3
41484: PUSH
41485: LD_INT 60
41487: PUSH
41488: EMPTY
41489: LIST
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 3
41497: PUSH
41498: LD_INT 55
41500: PUSH
41501: EMPTY
41502: LIST
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PPUSH
41512: CALL_OW 72
41516: IFFALSE 41624
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41518: LD_ADDR_VAR 0 18
41522: PUSH
41523: LD_VAR 0 6
41527: PPUSH
41528: LD_INT 3
41530: PUSH
41531: LD_INT 60
41533: PUSH
41534: EMPTY
41535: LIST
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 3
41543: PUSH
41544: LD_INT 55
41546: PUSH
41547: EMPTY
41548: LIST
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PPUSH
41558: CALL_OW 72
41562: PUSH
41563: LD_INT 1
41565: ARRAY
41566: ST_TO_ADDR
// if IsInUnit ( driver ) then
41567: LD_VAR 0 18
41571: PPUSH
41572: CALL_OW 310
41576: IFFALSE 41587
// ComExit ( driver ) ;
41578: LD_VAR 0 18
41582: PPUSH
41583: CALL 66968 0 1
// AddComEnterUnit ( driver , tmp ) ;
41587: LD_VAR 0 18
41591: PPUSH
41592: LD_VAR 0 13
41596: PPUSH
41597: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41601: LD_VAR 0 18
41605: PPUSH
41606: LD_VAR 0 7
41610: PPUSH
41611: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41615: LD_VAR 0 18
41619: PPUSH
41620: CALL_OW 181
// end ; continue ;
41624: GO 41276
// end ; if not cleaners or not tmp in cleaners then
41626: LD_VAR 0 6
41630: NOT
41631: PUSH
41632: LD_VAR 0 13
41636: PUSH
41637: LD_VAR 0 6
41641: IN
41642: NOT
41643: OR
41644: IFFALSE 41951
// begin if dep then
41646: LD_VAR 0 17
41650: IFFALSE 41786
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41652: LD_ADDR_VAR 0 16
41656: PUSH
41657: LD_VAR 0 17
41661: PUSH
41662: LD_INT 1
41664: ARRAY
41665: PPUSH
41666: CALL_OW 250
41670: PPUSH
41671: LD_VAR 0 17
41675: PUSH
41676: LD_INT 1
41678: ARRAY
41679: PPUSH
41680: CALL_OW 254
41684: PPUSH
41685: LD_INT 5
41687: PPUSH
41688: CALL_OW 272
41692: PUSH
41693: LD_VAR 0 17
41697: PUSH
41698: LD_INT 1
41700: ARRAY
41701: PPUSH
41702: CALL_OW 251
41706: PPUSH
41707: LD_VAR 0 17
41711: PUSH
41712: LD_INT 1
41714: ARRAY
41715: PPUSH
41716: CALL_OW 254
41720: PPUSH
41721: LD_INT 5
41723: PPUSH
41724: CALL_OW 273
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41733: LD_VAR 0 16
41737: PUSH
41738: LD_INT 1
41740: ARRAY
41741: PPUSH
41742: LD_VAR 0 16
41746: PUSH
41747: LD_INT 2
41749: ARRAY
41750: PPUSH
41751: CALL_OW 488
41755: IFFALSE 41786
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41757: LD_VAR 0 13
41761: PPUSH
41762: LD_VAR 0 16
41766: PUSH
41767: LD_INT 1
41769: ARRAY
41770: PPUSH
41771: LD_VAR 0 16
41775: PUSH
41776: LD_INT 2
41778: ARRAY
41779: PPUSH
41780: CALL_OW 111
// continue ;
41784: GO 41276
// end ; end ; r := GetDir ( tmp ) ;
41786: LD_ADDR_VAR 0 15
41790: PUSH
41791: LD_VAR 0 13
41795: PPUSH
41796: CALL_OW 254
41800: ST_TO_ADDR
// if r = 5 then
41801: LD_VAR 0 15
41805: PUSH
41806: LD_INT 5
41808: EQUAL
41809: IFFALSE 41819
// r := 0 ;
41811: LD_ADDR_VAR 0 15
41815: PUSH
41816: LD_INT 0
41818: ST_TO_ADDR
// for j = r to 5 do
41819: LD_ADDR_VAR 0 10
41823: PUSH
41824: DOUBLE
41825: LD_VAR 0 15
41829: DEC
41830: ST_TO_ADDR
41831: LD_INT 5
41833: PUSH
41834: FOR_TO
41835: IFFALSE 41949
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41837: LD_ADDR_VAR 0 11
41841: PUSH
41842: LD_VAR 0 13
41846: PPUSH
41847: CALL_OW 250
41851: PPUSH
41852: LD_VAR 0 10
41856: PPUSH
41857: LD_INT 2
41859: PPUSH
41860: CALL_OW 272
41864: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41865: LD_ADDR_VAR 0 12
41869: PUSH
41870: LD_VAR 0 13
41874: PPUSH
41875: CALL_OW 251
41879: PPUSH
41880: LD_VAR 0 10
41884: PPUSH
41885: LD_INT 2
41887: PPUSH
41888: CALL_OW 273
41892: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41893: LD_VAR 0 11
41897: PPUSH
41898: LD_VAR 0 12
41902: PPUSH
41903: CALL_OW 488
41907: PUSH
41908: LD_VAR 0 11
41912: PPUSH
41913: LD_VAR 0 12
41917: PPUSH
41918: CALL_OW 428
41922: NOT
41923: AND
41924: IFFALSE 41947
// begin ComMoveXY ( tmp , _x , _y ) ;
41926: LD_VAR 0 13
41930: PPUSH
41931: LD_VAR 0 11
41935: PPUSH
41936: LD_VAR 0 12
41940: PPUSH
41941: CALL_OW 111
// break ;
41945: GO 41949
// end ; end ;
41947: GO 41834
41949: POP
41950: POP
// end ; end ;
41951: GO 41276
41953: POP
41954: POP
// end ;
41955: LD_VAR 0 8
41959: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41960: LD_INT 0
41962: PPUSH
// result := true ;
41963: LD_ADDR_VAR 0 3
41967: PUSH
41968: LD_INT 1
41970: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41971: LD_VAR 0 2
41975: PUSH
41976: LD_INT 24
41978: DOUBLE
41979: EQUAL
41980: IFTRUE 41990
41982: LD_INT 33
41984: DOUBLE
41985: EQUAL
41986: IFTRUE 41990
41988: GO 42015
41990: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41991: LD_ADDR_VAR 0 3
41995: PUSH
41996: LD_INT 32
41998: PPUSH
41999: LD_VAR 0 1
42003: PPUSH
42004: CALL_OW 321
42008: PUSH
42009: LD_INT 2
42011: EQUAL
42012: ST_TO_ADDR
42013: GO 42331
42015: LD_INT 20
42017: DOUBLE
42018: EQUAL
42019: IFTRUE 42023
42021: GO 42048
42023: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42024: LD_ADDR_VAR 0 3
42028: PUSH
42029: LD_INT 6
42031: PPUSH
42032: LD_VAR 0 1
42036: PPUSH
42037: CALL_OW 321
42041: PUSH
42042: LD_INT 2
42044: EQUAL
42045: ST_TO_ADDR
42046: GO 42331
42048: LD_INT 22
42050: DOUBLE
42051: EQUAL
42052: IFTRUE 42062
42054: LD_INT 36
42056: DOUBLE
42057: EQUAL
42058: IFTRUE 42062
42060: GO 42087
42062: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42063: LD_ADDR_VAR 0 3
42067: PUSH
42068: LD_INT 15
42070: PPUSH
42071: LD_VAR 0 1
42075: PPUSH
42076: CALL_OW 321
42080: PUSH
42081: LD_INT 2
42083: EQUAL
42084: ST_TO_ADDR
42085: GO 42331
42087: LD_INT 30
42089: DOUBLE
42090: EQUAL
42091: IFTRUE 42095
42093: GO 42120
42095: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42096: LD_ADDR_VAR 0 3
42100: PUSH
42101: LD_INT 20
42103: PPUSH
42104: LD_VAR 0 1
42108: PPUSH
42109: CALL_OW 321
42113: PUSH
42114: LD_INT 2
42116: EQUAL
42117: ST_TO_ADDR
42118: GO 42331
42120: LD_INT 28
42122: DOUBLE
42123: EQUAL
42124: IFTRUE 42134
42126: LD_INT 21
42128: DOUBLE
42129: EQUAL
42130: IFTRUE 42134
42132: GO 42159
42134: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42135: LD_ADDR_VAR 0 3
42139: PUSH
42140: LD_INT 21
42142: PPUSH
42143: LD_VAR 0 1
42147: PPUSH
42148: CALL_OW 321
42152: PUSH
42153: LD_INT 2
42155: EQUAL
42156: ST_TO_ADDR
42157: GO 42331
42159: LD_INT 16
42161: DOUBLE
42162: EQUAL
42163: IFTRUE 42167
42165: GO 42192
42167: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42168: LD_ADDR_VAR 0 3
42172: PUSH
42173: LD_INT 84
42175: PPUSH
42176: LD_VAR 0 1
42180: PPUSH
42181: CALL_OW 321
42185: PUSH
42186: LD_INT 2
42188: EQUAL
42189: ST_TO_ADDR
42190: GO 42331
42192: LD_INT 19
42194: DOUBLE
42195: EQUAL
42196: IFTRUE 42206
42198: LD_INT 23
42200: DOUBLE
42201: EQUAL
42202: IFTRUE 42206
42204: GO 42231
42206: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42207: LD_ADDR_VAR 0 3
42211: PUSH
42212: LD_INT 83
42214: PPUSH
42215: LD_VAR 0 1
42219: PPUSH
42220: CALL_OW 321
42224: PUSH
42225: LD_INT 2
42227: EQUAL
42228: ST_TO_ADDR
42229: GO 42331
42231: LD_INT 17
42233: DOUBLE
42234: EQUAL
42235: IFTRUE 42239
42237: GO 42264
42239: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42240: LD_ADDR_VAR 0 3
42244: PUSH
42245: LD_INT 39
42247: PPUSH
42248: LD_VAR 0 1
42252: PPUSH
42253: CALL_OW 321
42257: PUSH
42258: LD_INT 2
42260: EQUAL
42261: ST_TO_ADDR
42262: GO 42331
42264: LD_INT 18
42266: DOUBLE
42267: EQUAL
42268: IFTRUE 42272
42270: GO 42297
42272: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42273: LD_ADDR_VAR 0 3
42277: PUSH
42278: LD_INT 40
42280: PPUSH
42281: LD_VAR 0 1
42285: PPUSH
42286: CALL_OW 321
42290: PUSH
42291: LD_INT 2
42293: EQUAL
42294: ST_TO_ADDR
42295: GO 42331
42297: LD_INT 27
42299: DOUBLE
42300: EQUAL
42301: IFTRUE 42305
42303: GO 42330
42305: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42306: LD_ADDR_VAR 0 3
42310: PUSH
42311: LD_INT 35
42313: PPUSH
42314: LD_VAR 0 1
42318: PPUSH
42319: CALL_OW 321
42323: PUSH
42324: LD_INT 2
42326: EQUAL
42327: ST_TO_ADDR
42328: GO 42331
42330: POP
// end ;
42331: LD_VAR 0 3
42335: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42336: LD_INT 0
42338: PPUSH
42339: PPUSH
42340: PPUSH
42341: PPUSH
42342: PPUSH
42343: PPUSH
42344: PPUSH
42345: PPUSH
42346: PPUSH
42347: PPUSH
42348: PPUSH
// result := false ;
42349: LD_ADDR_VAR 0 6
42353: PUSH
42354: LD_INT 0
42356: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42357: LD_VAR 0 1
42361: NOT
42362: PUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: CALL_OW 266
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: IN
42383: NOT
42384: OR
42385: PUSH
42386: LD_VAR 0 2
42390: NOT
42391: OR
42392: PUSH
42393: LD_VAR 0 5
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: LD_INT 4
42412: PUSH
42413: LD_INT 5
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: IN
42424: NOT
42425: OR
42426: PUSH
42427: LD_VAR 0 3
42431: PPUSH
42432: LD_VAR 0 4
42436: PPUSH
42437: CALL_OW 488
42441: NOT
42442: OR
42443: IFFALSE 42447
// exit ;
42445: GO 43183
// side := GetSide ( depot ) ;
42447: LD_ADDR_VAR 0 9
42451: PUSH
42452: LD_VAR 0 1
42456: PPUSH
42457: CALL_OW 255
42461: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42462: LD_VAR 0 9
42466: PPUSH
42467: LD_VAR 0 2
42471: PPUSH
42472: CALL 41960 0 2
42476: NOT
42477: IFFALSE 42481
// exit ;
42479: GO 43183
// pom := GetBase ( depot ) ;
42481: LD_ADDR_VAR 0 10
42485: PUSH
42486: LD_VAR 0 1
42490: PPUSH
42491: CALL_OW 274
42495: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42496: LD_ADDR_VAR 0 11
42500: PUSH
42501: LD_VAR 0 2
42505: PPUSH
42506: LD_VAR 0 1
42510: PPUSH
42511: CALL_OW 248
42515: PPUSH
42516: CALL_OW 450
42520: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42521: LD_VAR 0 10
42525: PPUSH
42526: LD_INT 1
42528: PPUSH
42529: CALL_OW 275
42533: PUSH
42534: LD_VAR 0 11
42538: PUSH
42539: LD_INT 1
42541: ARRAY
42542: GREATEREQUAL
42543: PUSH
42544: LD_VAR 0 10
42548: PPUSH
42549: LD_INT 2
42551: PPUSH
42552: CALL_OW 275
42556: PUSH
42557: LD_VAR 0 11
42561: PUSH
42562: LD_INT 2
42564: ARRAY
42565: GREATEREQUAL
42566: AND
42567: PUSH
42568: LD_VAR 0 10
42572: PPUSH
42573: LD_INT 3
42575: PPUSH
42576: CALL_OW 275
42580: PUSH
42581: LD_VAR 0 11
42585: PUSH
42586: LD_INT 3
42588: ARRAY
42589: GREATEREQUAL
42590: AND
42591: NOT
42592: IFFALSE 42596
// exit ;
42594: GO 43183
// if GetBType ( depot ) = b_depot then
42596: LD_VAR 0 1
42600: PPUSH
42601: CALL_OW 266
42605: PUSH
42606: LD_INT 0
42608: EQUAL
42609: IFFALSE 42621
// dist := 28 else
42611: LD_ADDR_VAR 0 14
42615: PUSH
42616: LD_INT 28
42618: ST_TO_ADDR
42619: GO 42629
// dist := 36 ;
42621: LD_ADDR_VAR 0 14
42625: PUSH
42626: LD_INT 36
42628: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42629: LD_VAR 0 1
42633: PPUSH
42634: LD_VAR 0 3
42638: PPUSH
42639: LD_VAR 0 4
42643: PPUSH
42644: CALL_OW 297
42648: PUSH
42649: LD_VAR 0 14
42653: GREATER
42654: IFFALSE 42658
// exit ;
42656: GO 43183
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42658: LD_ADDR_VAR 0 12
42662: PUSH
42663: LD_VAR 0 2
42667: PPUSH
42668: LD_VAR 0 3
42672: PPUSH
42673: LD_VAR 0 4
42677: PPUSH
42678: LD_VAR 0 5
42682: PPUSH
42683: LD_VAR 0 1
42687: PPUSH
42688: CALL_OW 248
42692: PPUSH
42693: LD_INT 0
42695: PPUSH
42696: CALL 43188 0 6
42700: ST_TO_ADDR
// if not hexes then
42701: LD_VAR 0 12
42705: NOT
42706: IFFALSE 42710
// exit ;
42708: GO 43183
// hex := GetHexInfo ( x , y ) ;
42710: LD_ADDR_VAR 0 15
42714: PUSH
42715: LD_VAR 0 3
42719: PPUSH
42720: LD_VAR 0 4
42724: PPUSH
42725: CALL_OW 546
42729: ST_TO_ADDR
// if hex [ 1 ] then
42730: LD_VAR 0 15
42734: PUSH
42735: LD_INT 1
42737: ARRAY
42738: IFFALSE 42742
// exit ;
42740: GO 43183
// height := hex [ 2 ] ;
42742: LD_ADDR_VAR 0 13
42746: PUSH
42747: LD_VAR 0 15
42751: PUSH
42752: LD_INT 2
42754: ARRAY
42755: ST_TO_ADDR
// for i = 1 to hexes do
42756: LD_ADDR_VAR 0 7
42760: PUSH
42761: DOUBLE
42762: LD_INT 1
42764: DEC
42765: ST_TO_ADDR
42766: LD_VAR 0 12
42770: PUSH
42771: FOR_TO
42772: IFFALSE 43102
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42774: LD_VAR 0 12
42778: PUSH
42779: LD_VAR 0 7
42783: ARRAY
42784: PUSH
42785: LD_INT 1
42787: ARRAY
42788: PPUSH
42789: LD_VAR 0 12
42793: PUSH
42794: LD_VAR 0 7
42798: ARRAY
42799: PUSH
42800: LD_INT 2
42802: ARRAY
42803: PPUSH
42804: CALL_OW 488
42808: NOT
42809: PUSH
42810: LD_VAR 0 12
42814: PUSH
42815: LD_VAR 0 7
42819: ARRAY
42820: PUSH
42821: LD_INT 1
42823: ARRAY
42824: PPUSH
42825: LD_VAR 0 12
42829: PUSH
42830: LD_VAR 0 7
42834: ARRAY
42835: PUSH
42836: LD_INT 2
42838: ARRAY
42839: PPUSH
42840: CALL_OW 428
42844: PUSH
42845: LD_INT 0
42847: GREATER
42848: OR
42849: PUSH
42850: LD_VAR 0 12
42854: PUSH
42855: LD_VAR 0 7
42859: ARRAY
42860: PUSH
42861: LD_INT 1
42863: ARRAY
42864: PPUSH
42865: LD_VAR 0 12
42869: PUSH
42870: LD_VAR 0 7
42874: ARRAY
42875: PUSH
42876: LD_INT 2
42878: ARRAY
42879: PPUSH
42880: CALL_OW 351
42884: OR
42885: IFFALSE 42891
// exit ;
42887: POP
42888: POP
42889: GO 43183
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42891: LD_ADDR_VAR 0 8
42895: PUSH
42896: LD_VAR 0 12
42900: PUSH
42901: LD_VAR 0 7
42905: ARRAY
42906: PUSH
42907: LD_INT 1
42909: ARRAY
42910: PPUSH
42911: LD_VAR 0 12
42915: PUSH
42916: LD_VAR 0 7
42920: ARRAY
42921: PUSH
42922: LD_INT 2
42924: ARRAY
42925: PPUSH
42926: CALL_OW 546
42930: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42931: LD_VAR 0 8
42935: PUSH
42936: LD_INT 1
42938: ARRAY
42939: PUSH
42940: LD_VAR 0 8
42944: PUSH
42945: LD_INT 2
42947: ARRAY
42948: PUSH
42949: LD_VAR 0 13
42953: PUSH
42954: LD_INT 2
42956: PLUS
42957: GREATER
42958: OR
42959: PUSH
42960: LD_VAR 0 8
42964: PUSH
42965: LD_INT 2
42967: ARRAY
42968: PUSH
42969: LD_VAR 0 13
42973: PUSH
42974: LD_INT 2
42976: MINUS
42977: LESS
42978: OR
42979: PUSH
42980: LD_VAR 0 8
42984: PUSH
42985: LD_INT 3
42987: ARRAY
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 8
42994: PUSH
42995: LD_INT 9
42997: PUSH
42998: LD_INT 10
43000: PUSH
43001: LD_INT 11
43003: PUSH
43004: LD_INT 12
43006: PUSH
43007: LD_INT 13
43009: PUSH
43010: LD_INT 16
43012: PUSH
43013: LD_INT 17
43015: PUSH
43016: LD_INT 18
43018: PUSH
43019: LD_INT 19
43021: PUSH
43022: LD_INT 20
43024: PUSH
43025: LD_INT 21
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: IN
43043: NOT
43044: OR
43045: PUSH
43046: LD_VAR 0 8
43050: PUSH
43051: LD_INT 5
43053: ARRAY
43054: NOT
43055: OR
43056: PUSH
43057: LD_VAR 0 8
43061: PUSH
43062: LD_INT 6
43064: ARRAY
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 7
43074: PUSH
43075: LD_INT 9
43077: PUSH
43078: LD_INT 10
43080: PUSH
43081: LD_INT 11
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: IN
43092: NOT
43093: OR
43094: IFFALSE 43100
// exit ;
43096: POP
43097: POP
43098: GO 43183
// end ;
43100: GO 42771
43102: POP
43103: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43104: LD_VAR 0 9
43108: PPUSH
43109: LD_VAR 0 3
43113: PPUSH
43114: LD_VAR 0 4
43118: PPUSH
43119: LD_INT 20
43121: PPUSH
43122: CALL 35135 0 4
43126: PUSH
43127: LD_INT 4
43129: ARRAY
43130: IFFALSE 43134
// exit ;
43132: GO 43183
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43134: LD_VAR 0 2
43138: PUSH
43139: LD_INT 29
43141: PUSH
43142: LD_INT 30
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: IN
43149: PUSH
43150: LD_VAR 0 3
43154: PPUSH
43155: LD_VAR 0 4
43159: PPUSH
43160: LD_VAR 0 9
43164: PPUSH
43165: CALL_OW 440
43169: NOT
43170: AND
43171: IFFALSE 43175
// exit ;
43173: GO 43183
// result := true ;
43175: LD_ADDR_VAR 0 6
43179: PUSH
43180: LD_INT 1
43182: ST_TO_ADDR
// end ;
43183: LD_VAR 0 6
43187: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43188: LD_INT 0
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
43194: PPUSH
43195: PPUSH
43196: PPUSH
43197: PPUSH
43198: PPUSH
43199: PPUSH
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
43208: PPUSH
43209: PPUSH
43210: PPUSH
43211: PPUSH
43212: PPUSH
43213: PPUSH
43214: PPUSH
43215: PPUSH
43216: PPUSH
43217: PPUSH
43218: PPUSH
43219: PPUSH
43220: PPUSH
43221: PPUSH
43222: PPUSH
43223: PPUSH
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
43228: PPUSH
43229: PPUSH
43230: PPUSH
43231: PPUSH
43232: PPUSH
43233: PPUSH
43234: PPUSH
43235: PPUSH
43236: PPUSH
43237: PPUSH
43238: PPUSH
43239: PPUSH
43240: PPUSH
43241: PPUSH
43242: PPUSH
43243: PPUSH
43244: PPUSH
43245: PPUSH
43246: PPUSH
43247: PPUSH
// result = [ ] ;
43248: LD_ADDR_VAR 0 7
43252: PUSH
43253: EMPTY
43254: ST_TO_ADDR
// temp_list = [ ] ;
43255: LD_ADDR_VAR 0 9
43259: PUSH
43260: EMPTY
43261: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43262: LD_VAR 0 4
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: LD_INT 3
43278: PUSH
43279: LD_INT 4
43281: PUSH
43282: LD_INT 5
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: IN
43293: NOT
43294: PUSH
43295: LD_VAR 0 1
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: IN
43310: PUSH
43311: LD_VAR 0 5
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: LD_INT 3
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: IN
43330: NOT
43331: AND
43332: OR
43333: IFFALSE 43337
// exit ;
43335: GO 61728
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43337: LD_VAR 0 1
43341: PUSH
43342: LD_INT 6
43344: PUSH
43345: LD_INT 7
43347: PUSH
43348: LD_INT 8
43350: PUSH
43351: LD_INT 13
43353: PUSH
43354: LD_INT 12
43356: PUSH
43357: LD_INT 15
43359: PUSH
43360: LD_INT 11
43362: PUSH
43363: LD_INT 14
43365: PUSH
43366: LD_INT 10
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: IN
43380: IFFALSE 43390
// btype = b_lab ;
43382: LD_ADDR_VAR 0 1
43386: PUSH
43387: LD_INT 6
43389: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43390: LD_VAR 0 6
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: IN
43409: NOT
43410: PUSH
43411: LD_VAR 0 1
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: LD_INT 6
43430: PUSH
43431: LD_INT 36
43433: PUSH
43434: LD_INT 4
43436: PUSH
43437: LD_INT 5
43439: PUSH
43440: LD_INT 31
43442: PUSH
43443: LD_INT 32
43445: PUSH
43446: LD_INT 33
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: IN
43462: NOT
43463: PUSH
43464: LD_VAR 0 6
43468: PUSH
43469: LD_INT 1
43471: EQUAL
43472: AND
43473: OR
43474: PUSH
43475: LD_VAR 0 1
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 3
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: IN
43490: NOT
43491: PUSH
43492: LD_VAR 0 6
43496: PUSH
43497: LD_INT 2
43499: EQUAL
43500: AND
43501: OR
43502: IFFALSE 43512
// mode = 0 ;
43504: LD_ADDR_VAR 0 6
43508: PUSH
43509: LD_INT 0
43511: ST_TO_ADDR
// case mode of 0 :
43512: LD_VAR 0 6
43516: PUSH
43517: LD_INT 0
43519: DOUBLE
43520: EQUAL
43521: IFTRUE 43525
43523: GO 54978
43525: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43526: LD_ADDR_VAR 0 11
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 2
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 3
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 3
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43719: LD_ADDR_VAR 0 12
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 3
43876: NEG
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43915: LD_ADDR_VAR 0 13
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 2
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: NEG
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: LD_INT 3
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 3
44074: NEG
44075: PUSH
44076: LD_INT 2
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 3
44086: NEG
44087: PUSH
44088: LD_INT 3
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44114: LD_ADDR_VAR 0 14
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: LD_INT 3
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 2
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44310: LD_ADDR_VAR 0 15
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 3
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44503: LD_ADDR_VAR 0 16
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 3
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 3
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44696: LD_ADDR_VAR 0 17
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44926: LD_ADDR_VAR 0 18
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45156: LD_ADDR_VAR 0 19
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45386: LD_ADDR_VAR 0 20
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45616: LD_ADDR_VAR 0 21
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45846: LD_ADDR_VAR 0 22
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: NEG
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: NEG
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46076: LD_ADDR_VAR 0 23
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: LD_INT 3
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 3
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46356: LD_ADDR_VAR 0 24
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: NEG
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 3
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46632: LD_ADDR_VAR 0 25
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 2
46808: NEG
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 3
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: LD_INT 3
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 3
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46906: LD_ADDR_VAR 0 26
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: LD_INT 3
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 3
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47182: LD_ADDR_VAR 0 27
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 3
47415: NEG
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47462: LD_ADDR_VAR 0 28
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 2
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 3
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: LD_INT 3
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 3
47697: NEG
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 3
47709: NEG
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47744: LD_ADDR_VAR 0 29
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: LD_INT 3
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 3
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 3
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 3
47988: NEG
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48023: LD_ADDR_VAR 0 30
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: LD_INT 3
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 3
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 3
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48301: LD_ADDR_VAR 0 31
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 3
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 3
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 3
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48579: LD_ADDR_VAR 0 32
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 3
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 3
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 3
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: NEG
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 3
48822: NEG
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48857: LD_ADDR_VAR 0 33
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 3
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 3
49101: NEG
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49136: LD_ADDR_VAR 0 34
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 3
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 3
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 3
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49416: LD_ADDR_VAR 0 35
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 2
49507: NEG
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49528: LD_ADDR_VAR 0 36
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 2
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49640: LD_ADDR_VAR 0 37
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49752: LD_ADDR_VAR 0 38
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49864: LD_ADDR_VAR 0 39
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49976: LD_ADDR_VAR 0 40
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50088: LD_ADDR_VAR 0 41
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: LD_INT 2
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 3
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 3
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 3
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 3
50331: PUSH
50332: LD_INT 3
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 3
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 3
50362: NEG
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 3
50373: NEG
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 3
50385: NEG
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: LD_INT 3
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50438: LD_ADDR_VAR 0 42
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: NEG
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 3
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 3
50684: PUSH
50685: LD_INT 3
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: LD_INT 3
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 3
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: NEG
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: NEG
50748: PUSH
50749: LD_INT 3
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50788: LD_ADDR_VAR 0 43
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: LD_INT 3
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 3
51095: NEG
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51136: LD_ADDR_VAR 0 44
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: NEG
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 3
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 3
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 3
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 3
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 3
51410: NEG
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 3
51445: NEG
51446: PUSH
51447: LD_INT 3
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51486: LD_ADDR_VAR 0 45
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: LD_INT 3
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: LD_INT 2
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: LD_INT 3
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 3
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: NEG
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 3
51795: NEG
51796: PUSH
51797: LD_INT 3
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51836: LD_ADDR_VAR 0 46
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 3
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 3
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 3
52132: NEG
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52184: LD_ADDR_VAR 0 47
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52335: LD_ADDR_VAR 0 48
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52482: LD_ADDR_VAR 0 49
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52626: LD_ADDR_VAR 0 50
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52770: LD_ADDR_VAR 0 51
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52917: LD_ADDR_VAR 0 52
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53068: LD_ADDR_VAR 0 53
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53298: LD_ADDR_VAR 0 54
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: LD_INT 2
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53528: LD_ADDR_VAR 0 55
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53758: LD_ADDR_VAR 0 56
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53988: LD_ADDR_VAR 0 57
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54218: LD_ADDR_VAR 0 58
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54448: LD_ADDR_VAR 0 59
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54536: LD_ADDR_VAR 0 60
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54624: LD_ADDR_VAR 0 61
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54712: LD_ADDR_VAR 0 62
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54800: LD_ADDR_VAR 0 63
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54888: LD_ADDR_VAR 0 64
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: ST_TO_ADDR
// end ; 1 :
54976: GO 60873
54978: LD_INT 1
54980: DOUBLE
54981: EQUAL
54982: IFTRUE 54986
54984: GO 57609
54986: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54987: LD_ADDR_VAR 0 11
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 3
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 3
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55031: LD_ADDR_VAR 0 12
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 3
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: LIST
55071: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55072: LD_ADDR_VAR 0 13
55076: PUSH
55077: LD_INT 3
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: LD_INT 3
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: LIST
55111: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55112: LD_ADDR_VAR 0 14
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 3
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: LIST
55152: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55153: LD_ADDR_VAR 0 15
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 3
55171: NEG
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 3
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55197: LD_ADDR_VAR 0 16
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 3
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: NEG
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: LD_INT 3
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: LIST
55242: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55243: LD_ADDR_VAR 0 17
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 3
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 3
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55287: LD_ADDR_VAR 0 18
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: LIST
55327: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55328: LD_ADDR_VAR 0 19
55332: PUSH
55333: LD_INT 3
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 3
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55368: LD_ADDR_VAR 0 20
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 3
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: LIST
55408: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55409: LD_ADDR_VAR 0 21
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 3
55427: NEG
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 3
55438: NEG
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: LIST
55452: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55453: LD_ADDR_VAR 0 22
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 3
55472: NEG
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 3
55484: NEG
55485: PUSH
55486: LD_INT 3
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: LIST
55498: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55499: LD_ADDR_VAR 0 23
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: LD_INT 4
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 3
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55543: LD_ADDR_VAR 0 24
55547: PUSH
55548: LD_INT 3
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 4
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: LIST
55583: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55584: LD_ADDR_VAR 0 25
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 4
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: LD_INT 4
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: LIST
55623: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55624: LD_ADDR_VAR 0 26
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 4
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: LIST
55664: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55665: LD_ADDR_VAR 0 27
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 3
55683: NEG
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 4
55694: NEG
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55709: LD_ADDR_VAR 0 28
55713: PUSH
55714: LD_INT 3
55716: NEG
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: LD_INT 4
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 4
55740: NEG
55741: PUSH
55742: LD_INT 3
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55755: LD_ADDR_VAR 0 29
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 3
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: LD_INT 4
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 4
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: LD_INT 3
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 5
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 5
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 4
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: LD_INT 6
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 6
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 5
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55910: LD_ADDR_VAR 0 30
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 4
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 4
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 4
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 5
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 5
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 5
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 6
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 6
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56053: LD_ADDR_VAR 0 31
56057: PUSH
56058: LD_INT 3
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: PUSH
56071: LD_INT 3
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 3
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 4
56090: PUSH
56091: LD_INT 3
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 4
56100: PUSH
56101: LD_INT 4
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: LD_INT 4
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 5
56120: PUSH
56121: LD_INT 4
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 5
56130: PUSH
56131: LD_INT 5
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 4
56140: PUSH
56141: LD_INT 5
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 6
56150: PUSH
56151: LD_INT 5
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 6
56160: PUSH
56161: LD_INT 6
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 5
56170: PUSH
56171: LD_INT 6
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56192: LD_ADDR_VAR 0 32
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 4
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 4
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 5
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 5
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: LD_INT 4
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 6
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 6
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: LD_INT 5
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56335: LD_ADDR_VAR 0 33
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 3
56353: NEG
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 3
56364: NEG
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: NEG
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 4
56387: NEG
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 4
56398: NEG
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 4
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 5
56421: NEG
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 5
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 5
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 6
56455: NEG
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 6
56466: NEG
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56490: LD_ADDR_VAR 0 34
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 3
56521: NEG
56522: PUSH
56523: LD_INT 3
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: LD_INT 4
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 4
56545: NEG
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 4
56557: NEG
56558: PUSH
56559: LD_INT 4
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 4
56569: NEG
56570: PUSH
56571: LD_INT 5
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 5
56581: NEG
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 5
56593: NEG
56594: PUSH
56595: LD_INT 5
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 5
56605: NEG
56606: PUSH
56607: LD_INT 6
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 6
56617: NEG
56618: PUSH
56619: LD_INT 5
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 6
56629: NEG
56630: PUSH
56631: LD_INT 6
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56653: LD_ADDR_VAR 0 41
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: LD_INT 3
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56697: LD_ADDR_VAR 0 42
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: LIST
56737: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56738: LD_ADDR_VAR 0 43
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: LD_INT 3
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: LIST
56777: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56778: LD_ADDR_VAR 0 44
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56819: LD_ADDR_VAR 0 45
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: LIST
56862: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56863: LD_ADDR_VAR 0 46
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: LD_INT 3
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 3
56894: NEG
56895: PUSH
56896: LD_INT 2
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56909: LD_ADDR_VAR 0 47
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56942: LD_ADDR_VAR 0 48
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56973: LD_ADDR_VAR 0 49
56977: PUSH
56978: LD_INT 3
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 3
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57002: LD_ADDR_VAR 0 50
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: LD_INT 3
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 3
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57031: LD_ADDR_VAR 0 51
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57062: LD_ADDR_VAR 0 52
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57095: LD_ADDR_VAR 0 53
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57139: LD_ADDR_VAR 0 54
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 3
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: LIST
57179: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57180: LD_ADDR_VAR 0 55
57184: PUSH
57185: LD_INT 3
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 2
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57220: LD_ADDR_VAR 0 56
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: LD_INT 2
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: LIST
57260: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57261: LD_ADDR_VAR 0 57
57265: PUSH
57266: LD_INT 2
57268: NEG
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 3
57279: NEG
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 3
57290: NEG
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57305: LD_ADDR_VAR 0 58
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: LD_INT 2
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: NEG
57337: PUSH
57338: LD_INT 3
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57351: LD_ADDR_VAR 0 59
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57395: LD_ADDR_VAR 0 60
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57436: LD_ADDR_VAR 0 61
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: LIST
57475: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57476: LD_ADDR_VAR 0 62
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 2
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: LIST
57516: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57517: LD_ADDR_VAR 0 63
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: LIST
57560: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57561: LD_ADDR_VAR 0 64
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 2
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: LD_INT 2
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: LIST
57606: ST_TO_ADDR
// end ; 2 :
57607: GO 60873
57609: LD_INT 2
57611: DOUBLE
57612: EQUAL
57613: IFTRUE 57617
57615: GO 60872
57617: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57618: LD_ADDR_VAR 0 29
57622: PUSH
57623: LD_INT 4
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 4
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 5
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 5
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 4
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 3
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 5
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 3
57718: PUSH
57719: LD_INT 3
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 4
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 4
57748: PUSH
57749: LD_INT 4
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: LD_INT 4
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: LD_INT 3
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 4
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: LD_INT 4
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 4
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 4
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 5
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 5
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 4
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: LD_INT 5
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: NEG
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 3
57946: NEG
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 4
57957: NEG
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 4
57968: NEG
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 4
57980: NEG
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 4
58003: NEG
58004: PUSH
58005: LD_INT 4
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 4
58015: NEG
58016: PUSH
58017: LD_INT 5
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 3
58027: NEG
58028: PUSH
58029: LD_INT 4
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 3
58039: NEG
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 4
58051: NEG
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 5
58063: NEG
58064: PUSH
58065: LD_INT 4
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 5
58075: NEG
58076: PUSH
58077: LD_INT 5
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: LD_INT 5
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 5
58099: NEG
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58156: LD_ADDR_VAR 0 30
58160: PUSH
58161: LD_INT 4
58163: PUSH
58164: LD_INT 4
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 4
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 5
58183: PUSH
58184: LD_INT 4
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 5
58193: PUSH
58194: LD_INT 5
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 4
58203: PUSH
58204: LD_INT 5
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: LD_INT 4
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 5
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: LD_INT 5
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 3
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 4
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 4
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 4
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 4
58346: NEG
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 4
58357: NEG
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 3
58369: NEG
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 3
58380: NEG
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 4
58391: NEG
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 5
58402: NEG
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 5
58413: NEG
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 5
58425: NEG
58426: PUSH
58427: LD_INT 2
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 3
58437: NEG
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: LD_INT 3
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: LD_INT 4
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: LD_INT 3
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: NEG
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 3
58496: NEG
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 4
58508: NEG
58509: PUSH
58510: LD_INT 3
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 4
58520: NEG
58521: PUSH
58522: LD_INT 4
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: LD_INT 4
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 4
58544: NEG
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: LD_INT 4
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 5
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 4
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: LD_INT 3
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 3
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 4
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: LD_INT 5
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: LD_INT 3
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: LD_INT 5
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58703: LD_ADDR_VAR 0 31
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 4
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 4
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: LD_INT 5
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 5
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: LD_INT 4
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 3
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: LD_INT 5
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 3
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 3
58803: NEG
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 3
58814: NEG
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 3
58848: NEG
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 4
58859: NEG
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 4
58870: NEG
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 4
58882: NEG
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: LD_INT 2
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 4
58905: NEG
58906: PUSH
58907: LD_INT 4
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 4
58917: NEG
58918: PUSH
58919: LD_INT 5
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 3
58929: NEG
58930: PUSH
58931: LD_INT 4
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 3
58941: NEG
58942: PUSH
58943: LD_INT 3
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 4
58953: NEG
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 5
58965: NEG
58966: PUSH
58967: LD_INT 4
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 5
58977: NEG
58978: PUSH
58979: LD_INT 5
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: LD_INT 5
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 5
59001: NEG
59002: PUSH
59003: LD_INT 3
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 4
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 3
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: LD_INT 3
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: LD_INT 4
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: LD_INT 4
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 4
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 4
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 5
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 5
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 4
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 5
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59253: LD_ADDR_VAR 0 32
59257: PUSH
59258: LD_INT 4
59260: NEG
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 4
59271: NEG
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: NEG
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: NEG
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 4
59305: NEG
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 5
59316: NEG
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 5
59327: NEG
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 5
59339: NEG
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: NEG
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: NEG
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 3
59374: NEG
59375: PUSH
59376: LD_INT 4
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: LD_INT 3
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 3
59410: NEG
59411: PUSH
59412: LD_INT 2
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 4
59422: NEG
59423: PUSH
59424: LD_INT 3
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 4
59434: NEG
59435: PUSH
59436: LD_INT 4
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 2
59446: NEG
59447: PUSH
59448: LD_INT 4
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 4
59458: NEG
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: LD_INT 4
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 3
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: LD_INT 3
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: LD_INT 4
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: LD_INT 5
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: LD_INT 5
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 4
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 4
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 2
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 4
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 4
59665: PUSH
59666: LD_INT 4
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: LD_INT 3
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 5
59685: PUSH
59686: LD_INT 4
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 5
59695: PUSH
59696: LD_INT 5
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 4
59705: PUSH
59706: LD_INT 5
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 3
59715: PUSH
59716: LD_INT 4
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 3
59725: PUSH
59726: LD_INT 3
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 5
59735: PUSH
59736: LD_INT 3
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 3
59745: PUSH
59746: LD_INT 5
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59800: LD_ADDR_VAR 0 33
59804: PUSH
59805: LD_INT 4
59807: NEG
59808: PUSH
59809: LD_INT 4
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 4
59819: NEG
59820: PUSH
59821: LD_INT 5
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 3
59831: NEG
59832: PUSH
59833: LD_INT 4
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 3
59843: NEG
59844: PUSH
59845: LD_INT 3
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 4
59855: NEG
59856: PUSH
59857: LD_INT 3
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 5
59867: NEG
59868: PUSH
59869: LD_INT 4
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 5
59879: NEG
59880: PUSH
59881: LD_INT 5
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: LD_INT 5
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 5
59903: NEG
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 4
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 3
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: LD_INT 4
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: PUSH
59995: LD_INT 2
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: LD_INT 4
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 4
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 5
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 5
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 4
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 3
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 3
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: LD_INT 2
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 5
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: LD_INT 3
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 3
60120: PUSH
60121: LD_INT 2
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 4
60130: PUSH
60131: LD_INT 3
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 4
60140: PUSH
60141: LD_INT 4
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: LD_INT 4
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: LD_INT 2
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 4
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: LD_INT 4
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 4
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: LD_INT 4
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 5
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 5
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: LD_INT 4
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 2
60272: PUSH
60273: LD_INT 5
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: NEG
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60338: LD_ADDR_VAR 0 34
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 4
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 5
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: LD_INT 3
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 4
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 5
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 3
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: LD_INT 5
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 3
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 4
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 4
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 2
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 4
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 4
60540: PUSH
60541: LD_INT 4
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 4
60550: PUSH
60551: LD_INT 3
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 5
60560: PUSH
60561: LD_INT 4
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 5
60570: PUSH
60571: LD_INT 5
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 4
60580: PUSH
60581: LD_INT 5
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 3
60590: PUSH
60591: LD_INT 4
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 3
60600: PUSH
60601: LD_INT 3
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 5
60610: PUSH
60611: LD_INT 3
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: LD_INT 5
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 3
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 3
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: LD_INT 4
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: LD_INT 4
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 3
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: LD_INT 4
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: LD_INT 2
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 4
60723: NEG
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 4
60734: NEG
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 3
60746: NEG
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: NEG
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 4
60768: NEG
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 5
60779: NEG
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 5
60790: NEG
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 5
60802: NEG
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 3
60814: NEG
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: ST_TO_ADDR
// end ; end ;
60870: GO 60873
60872: POP
// case btype of b_depot , b_warehouse :
60873: LD_VAR 0 1
60877: PUSH
60878: LD_INT 0
60880: DOUBLE
60881: EQUAL
60882: IFTRUE 60892
60884: LD_INT 1
60886: DOUBLE
60887: EQUAL
60888: IFTRUE 60892
60890: GO 61093
60892: POP
// case nation of nation_american :
60893: LD_VAR 0 5
60897: PUSH
60898: LD_INT 1
60900: DOUBLE
60901: EQUAL
60902: IFTRUE 60906
60904: GO 60962
60906: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60907: LD_ADDR_VAR 0 9
60911: PUSH
60912: LD_VAR 0 11
60916: PUSH
60917: LD_VAR 0 12
60921: PUSH
60922: LD_VAR 0 13
60926: PUSH
60927: LD_VAR 0 14
60931: PUSH
60932: LD_VAR 0 15
60936: PUSH
60937: LD_VAR 0 16
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: PUSH
60950: LD_VAR 0 4
60954: PUSH
60955: LD_INT 1
60957: PLUS
60958: ARRAY
60959: ST_TO_ADDR
60960: GO 61091
60962: LD_INT 2
60964: DOUBLE
60965: EQUAL
60966: IFTRUE 60970
60968: GO 61026
60970: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60971: LD_ADDR_VAR 0 9
60975: PUSH
60976: LD_VAR 0 17
60980: PUSH
60981: LD_VAR 0 18
60985: PUSH
60986: LD_VAR 0 19
60990: PUSH
60991: LD_VAR 0 20
60995: PUSH
60996: LD_VAR 0 21
61000: PUSH
61001: LD_VAR 0 22
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: PUSH
61014: LD_VAR 0 4
61018: PUSH
61019: LD_INT 1
61021: PLUS
61022: ARRAY
61023: ST_TO_ADDR
61024: GO 61091
61026: LD_INT 3
61028: DOUBLE
61029: EQUAL
61030: IFTRUE 61034
61032: GO 61090
61034: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61035: LD_ADDR_VAR 0 9
61039: PUSH
61040: LD_VAR 0 23
61044: PUSH
61045: LD_VAR 0 24
61049: PUSH
61050: LD_VAR 0 25
61054: PUSH
61055: LD_VAR 0 26
61059: PUSH
61060: LD_VAR 0 27
61064: PUSH
61065: LD_VAR 0 28
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: PUSH
61078: LD_VAR 0 4
61082: PUSH
61083: LD_INT 1
61085: PLUS
61086: ARRAY
61087: ST_TO_ADDR
61088: GO 61091
61090: POP
61091: GO 61646
61093: LD_INT 2
61095: DOUBLE
61096: EQUAL
61097: IFTRUE 61107
61099: LD_INT 3
61101: DOUBLE
61102: EQUAL
61103: IFTRUE 61107
61105: GO 61163
61107: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61108: LD_ADDR_VAR 0 9
61112: PUSH
61113: LD_VAR 0 29
61117: PUSH
61118: LD_VAR 0 30
61122: PUSH
61123: LD_VAR 0 31
61127: PUSH
61128: LD_VAR 0 32
61132: PUSH
61133: LD_VAR 0 33
61137: PUSH
61138: LD_VAR 0 34
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: PUSH
61151: LD_VAR 0 4
61155: PUSH
61156: LD_INT 1
61158: PLUS
61159: ARRAY
61160: ST_TO_ADDR
61161: GO 61646
61163: LD_INT 16
61165: DOUBLE
61166: EQUAL
61167: IFTRUE 61225
61169: LD_INT 17
61171: DOUBLE
61172: EQUAL
61173: IFTRUE 61225
61175: LD_INT 18
61177: DOUBLE
61178: EQUAL
61179: IFTRUE 61225
61181: LD_INT 19
61183: DOUBLE
61184: EQUAL
61185: IFTRUE 61225
61187: LD_INT 22
61189: DOUBLE
61190: EQUAL
61191: IFTRUE 61225
61193: LD_INT 20
61195: DOUBLE
61196: EQUAL
61197: IFTRUE 61225
61199: LD_INT 21
61201: DOUBLE
61202: EQUAL
61203: IFTRUE 61225
61205: LD_INT 23
61207: DOUBLE
61208: EQUAL
61209: IFTRUE 61225
61211: LD_INT 24
61213: DOUBLE
61214: EQUAL
61215: IFTRUE 61225
61217: LD_INT 25
61219: DOUBLE
61220: EQUAL
61221: IFTRUE 61225
61223: GO 61281
61225: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61226: LD_ADDR_VAR 0 9
61230: PUSH
61231: LD_VAR 0 35
61235: PUSH
61236: LD_VAR 0 36
61240: PUSH
61241: LD_VAR 0 37
61245: PUSH
61246: LD_VAR 0 38
61250: PUSH
61251: LD_VAR 0 39
61255: PUSH
61256: LD_VAR 0 40
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: PUSH
61269: LD_VAR 0 4
61273: PUSH
61274: LD_INT 1
61276: PLUS
61277: ARRAY
61278: ST_TO_ADDR
61279: GO 61646
61281: LD_INT 6
61283: DOUBLE
61284: EQUAL
61285: IFTRUE 61337
61287: LD_INT 7
61289: DOUBLE
61290: EQUAL
61291: IFTRUE 61337
61293: LD_INT 8
61295: DOUBLE
61296: EQUAL
61297: IFTRUE 61337
61299: LD_INT 13
61301: DOUBLE
61302: EQUAL
61303: IFTRUE 61337
61305: LD_INT 12
61307: DOUBLE
61308: EQUAL
61309: IFTRUE 61337
61311: LD_INT 15
61313: DOUBLE
61314: EQUAL
61315: IFTRUE 61337
61317: LD_INT 11
61319: DOUBLE
61320: EQUAL
61321: IFTRUE 61337
61323: LD_INT 14
61325: DOUBLE
61326: EQUAL
61327: IFTRUE 61337
61329: LD_INT 10
61331: DOUBLE
61332: EQUAL
61333: IFTRUE 61337
61335: GO 61393
61337: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61338: LD_ADDR_VAR 0 9
61342: PUSH
61343: LD_VAR 0 41
61347: PUSH
61348: LD_VAR 0 42
61352: PUSH
61353: LD_VAR 0 43
61357: PUSH
61358: LD_VAR 0 44
61362: PUSH
61363: LD_VAR 0 45
61367: PUSH
61368: LD_VAR 0 46
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: PUSH
61381: LD_VAR 0 4
61385: PUSH
61386: LD_INT 1
61388: PLUS
61389: ARRAY
61390: ST_TO_ADDR
61391: GO 61646
61393: LD_INT 36
61395: DOUBLE
61396: EQUAL
61397: IFTRUE 61401
61399: GO 61457
61401: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61402: LD_ADDR_VAR 0 9
61406: PUSH
61407: LD_VAR 0 47
61411: PUSH
61412: LD_VAR 0 48
61416: PUSH
61417: LD_VAR 0 49
61421: PUSH
61422: LD_VAR 0 50
61426: PUSH
61427: LD_VAR 0 51
61431: PUSH
61432: LD_VAR 0 52
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: PUSH
61445: LD_VAR 0 4
61449: PUSH
61450: LD_INT 1
61452: PLUS
61453: ARRAY
61454: ST_TO_ADDR
61455: GO 61646
61457: LD_INT 4
61459: DOUBLE
61460: EQUAL
61461: IFTRUE 61483
61463: LD_INT 5
61465: DOUBLE
61466: EQUAL
61467: IFTRUE 61483
61469: LD_INT 34
61471: DOUBLE
61472: EQUAL
61473: IFTRUE 61483
61475: LD_INT 37
61477: DOUBLE
61478: EQUAL
61479: IFTRUE 61483
61481: GO 61539
61483: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61484: LD_ADDR_VAR 0 9
61488: PUSH
61489: LD_VAR 0 53
61493: PUSH
61494: LD_VAR 0 54
61498: PUSH
61499: LD_VAR 0 55
61503: PUSH
61504: LD_VAR 0 56
61508: PUSH
61509: LD_VAR 0 57
61513: PUSH
61514: LD_VAR 0 58
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: PUSH
61527: LD_VAR 0 4
61531: PUSH
61532: LD_INT 1
61534: PLUS
61535: ARRAY
61536: ST_TO_ADDR
61537: GO 61646
61539: LD_INT 31
61541: DOUBLE
61542: EQUAL
61543: IFTRUE 61589
61545: LD_INT 32
61547: DOUBLE
61548: EQUAL
61549: IFTRUE 61589
61551: LD_INT 33
61553: DOUBLE
61554: EQUAL
61555: IFTRUE 61589
61557: LD_INT 27
61559: DOUBLE
61560: EQUAL
61561: IFTRUE 61589
61563: LD_INT 26
61565: DOUBLE
61566: EQUAL
61567: IFTRUE 61589
61569: LD_INT 28
61571: DOUBLE
61572: EQUAL
61573: IFTRUE 61589
61575: LD_INT 29
61577: DOUBLE
61578: EQUAL
61579: IFTRUE 61589
61581: LD_INT 30
61583: DOUBLE
61584: EQUAL
61585: IFTRUE 61589
61587: GO 61645
61589: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61590: LD_ADDR_VAR 0 9
61594: PUSH
61595: LD_VAR 0 59
61599: PUSH
61600: LD_VAR 0 60
61604: PUSH
61605: LD_VAR 0 61
61609: PUSH
61610: LD_VAR 0 62
61614: PUSH
61615: LD_VAR 0 63
61619: PUSH
61620: LD_VAR 0 64
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: PUSH
61633: LD_VAR 0 4
61637: PUSH
61638: LD_INT 1
61640: PLUS
61641: ARRAY
61642: ST_TO_ADDR
61643: GO 61646
61645: POP
// temp_list2 = [ ] ;
61646: LD_ADDR_VAR 0 10
61650: PUSH
61651: EMPTY
61652: ST_TO_ADDR
// for i in temp_list do
61653: LD_ADDR_VAR 0 8
61657: PUSH
61658: LD_VAR 0 9
61662: PUSH
61663: FOR_IN
61664: IFFALSE 61716
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61666: LD_ADDR_VAR 0 10
61670: PUSH
61671: LD_VAR 0 10
61675: PUSH
61676: LD_VAR 0 8
61680: PUSH
61681: LD_INT 1
61683: ARRAY
61684: PUSH
61685: LD_VAR 0 2
61689: PLUS
61690: PUSH
61691: LD_VAR 0 8
61695: PUSH
61696: LD_INT 2
61698: ARRAY
61699: PUSH
61700: LD_VAR 0 3
61704: PLUS
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: EMPTY
61711: LIST
61712: ADD
61713: ST_TO_ADDR
61714: GO 61663
61716: POP
61717: POP
// result = temp_list2 ;
61718: LD_ADDR_VAR 0 7
61722: PUSH
61723: LD_VAR 0 10
61727: ST_TO_ADDR
// end ;
61728: LD_VAR 0 7
61732: RET
// export function EnemyInRange ( unit , dist ) ; begin
61733: LD_INT 0
61735: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61736: LD_ADDR_VAR 0 3
61740: PUSH
61741: LD_VAR 0 1
61745: PPUSH
61746: CALL_OW 255
61750: PPUSH
61751: LD_VAR 0 1
61755: PPUSH
61756: CALL_OW 250
61760: PPUSH
61761: LD_VAR 0 1
61765: PPUSH
61766: CALL_OW 251
61770: PPUSH
61771: LD_VAR 0 2
61775: PPUSH
61776: CALL 35135 0 4
61780: PUSH
61781: LD_INT 4
61783: ARRAY
61784: ST_TO_ADDR
// end ;
61785: LD_VAR 0 3
61789: RET
// export function PlayerSeeMe ( unit ) ; begin
61790: LD_INT 0
61792: PPUSH
// result := See ( your_side , unit ) ;
61793: LD_ADDR_VAR 0 2
61797: PUSH
61798: LD_OWVAR 2
61802: PPUSH
61803: LD_VAR 0 1
61807: PPUSH
61808: CALL_OW 292
61812: ST_TO_ADDR
// end ;
61813: LD_VAR 0 2
61817: RET
// export function ReverseDir ( unit ) ; begin
61818: LD_INT 0
61820: PPUSH
// if not unit then
61821: LD_VAR 0 1
61825: NOT
61826: IFFALSE 61830
// exit ;
61828: GO 61853
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61830: LD_ADDR_VAR 0 2
61834: PUSH
61835: LD_VAR 0 1
61839: PPUSH
61840: CALL_OW 254
61844: PUSH
61845: LD_INT 3
61847: PLUS
61848: PUSH
61849: LD_INT 6
61851: MOD
61852: ST_TO_ADDR
// end ;
61853: LD_VAR 0 2
61857: RET
// export function ReverseArray ( array ) ; var i ; begin
61858: LD_INT 0
61860: PPUSH
61861: PPUSH
// if not array then
61862: LD_VAR 0 1
61866: NOT
61867: IFFALSE 61871
// exit ;
61869: GO 61926
// result := [ ] ;
61871: LD_ADDR_VAR 0 2
61875: PUSH
61876: EMPTY
61877: ST_TO_ADDR
// for i := array downto 1 do
61878: LD_ADDR_VAR 0 3
61882: PUSH
61883: DOUBLE
61884: LD_VAR 0 1
61888: INC
61889: ST_TO_ADDR
61890: LD_INT 1
61892: PUSH
61893: FOR_DOWNTO
61894: IFFALSE 61924
// result := Join ( result , array [ i ] ) ;
61896: LD_ADDR_VAR 0 2
61900: PUSH
61901: LD_VAR 0 2
61905: PPUSH
61906: LD_VAR 0 1
61910: PUSH
61911: LD_VAR 0 3
61915: ARRAY
61916: PPUSH
61917: CALL 66570 0 2
61921: ST_TO_ADDR
61922: GO 61893
61924: POP
61925: POP
// end ;
61926: LD_VAR 0 2
61930: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61931: LD_INT 0
61933: PPUSH
61934: PPUSH
61935: PPUSH
61936: PPUSH
61937: PPUSH
61938: PPUSH
// if not unit or not hexes then
61939: LD_VAR 0 1
61943: NOT
61944: PUSH
61945: LD_VAR 0 2
61949: NOT
61950: OR
61951: IFFALSE 61955
// exit ;
61953: GO 62078
// dist := 9999 ;
61955: LD_ADDR_VAR 0 5
61959: PUSH
61960: LD_INT 9999
61962: ST_TO_ADDR
// for i = 1 to hexes do
61963: LD_ADDR_VAR 0 4
61967: PUSH
61968: DOUBLE
61969: LD_INT 1
61971: DEC
61972: ST_TO_ADDR
61973: LD_VAR 0 2
61977: PUSH
61978: FOR_TO
61979: IFFALSE 62066
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61981: LD_ADDR_VAR 0 6
61985: PUSH
61986: LD_VAR 0 1
61990: PPUSH
61991: LD_VAR 0 2
61995: PUSH
61996: LD_VAR 0 4
62000: ARRAY
62001: PUSH
62002: LD_INT 1
62004: ARRAY
62005: PPUSH
62006: LD_VAR 0 2
62010: PUSH
62011: LD_VAR 0 4
62015: ARRAY
62016: PUSH
62017: LD_INT 2
62019: ARRAY
62020: PPUSH
62021: CALL_OW 297
62025: ST_TO_ADDR
// if tdist < dist then
62026: LD_VAR 0 6
62030: PUSH
62031: LD_VAR 0 5
62035: LESS
62036: IFFALSE 62064
// begin hex := hexes [ i ] ;
62038: LD_ADDR_VAR 0 8
62042: PUSH
62043: LD_VAR 0 2
62047: PUSH
62048: LD_VAR 0 4
62052: ARRAY
62053: ST_TO_ADDR
// dist := tdist ;
62054: LD_ADDR_VAR 0 5
62058: PUSH
62059: LD_VAR 0 6
62063: ST_TO_ADDR
// end ; end ;
62064: GO 61978
62066: POP
62067: POP
// result := hex ;
62068: LD_ADDR_VAR 0 3
62072: PUSH
62073: LD_VAR 0 8
62077: ST_TO_ADDR
// end ;
62078: LD_VAR 0 3
62082: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62083: LD_INT 0
62085: PPUSH
62086: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62087: LD_VAR 0 1
62091: NOT
62092: PUSH
62093: LD_VAR 0 1
62097: PUSH
62098: LD_INT 21
62100: PUSH
62101: LD_INT 2
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 23
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PPUSH
62122: CALL_OW 69
62126: IN
62127: NOT
62128: OR
62129: IFFALSE 62133
// exit ;
62131: GO 62180
// for i = 1 to 3 do
62133: LD_ADDR_VAR 0 3
62137: PUSH
62138: DOUBLE
62139: LD_INT 1
62141: DEC
62142: ST_TO_ADDR
62143: LD_INT 3
62145: PUSH
62146: FOR_TO
62147: IFFALSE 62178
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62149: LD_VAR 0 1
62153: PPUSH
62154: CALL_OW 250
62158: PPUSH
62159: LD_VAR 0 1
62163: PPUSH
62164: CALL_OW 251
62168: PPUSH
62169: LD_INT 1
62171: PPUSH
62172: CALL_OW 453
62176: GO 62146
62178: POP
62179: POP
// end ;
62180: LD_VAR 0 2
62184: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62185: LD_INT 0
62187: PPUSH
62188: PPUSH
62189: PPUSH
62190: PPUSH
62191: PPUSH
62192: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62193: LD_VAR 0 1
62197: NOT
62198: PUSH
62199: LD_VAR 0 2
62203: NOT
62204: OR
62205: PUSH
62206: LD_VAR 0 1
62210: PPUSH
62211: CALL_OW 314
62215: OR
62216: IFFALSE 62220
// exit ;
62218: GO 62687
// if GetLives ( i ) < 250 then
62220: LD_VAR 0 4
62224: PPUSH
62225: CALL_OW 256
62229: PUSH
62230: LD_INT 250
62232: LESS
62233: IFFALSE 62246
// begin ComAutodestruct ( i ) ;
62235: LD_VAR 0 4
62239: PPUSH
62240: CALL 62083 0 1
// exit ;
62244: GO 62687
// end ; x := GetX ( enemy_unit ) ;
62246: LD_ADDR_VAR 0 7
62250: PUSH
62251: LD_VAR 0 2
62255: PPUSH
62256: CALL_OW 250
62260: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62261: LD_ADDR_VAR 0 8
62265: PUSH
62266: LD_VAR 0 2
62270: PPUSH
62271: CALL_OW 251
62275: ST_TO_ADDR
// if not x or not y then
62276: LD_VAR 0 7
62280: NOT
62281: PUSH
62282: LD_VAR 0 8
62286: NOT
62287: OR
62288: IFFALSE 62292
// exit ;
62290: GO 62687
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62292: LD_ADDR_VAR 0 6
62296: PUSH
62297: LD_VAR 0 7
62301: PPUSH
62302: LD_INT 0
62304: PPUSH
62305: LD_INT 4
62307: PPUSH
62308: CALL_OW 272
62312: PUSH
62313: LD_VAR 0 8
62317: PPUSH
62318: LD_INT 0
62320: PPUSH
62321: LD_INT 4
62323: PPUSH
62324: CALL_OW 273
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_VAR 0 7
62337: PPUSH
62338: LD_INT 1
62340: PPUSH
62341: LD_INT 4
62343: PPUSH
62344: CALL_OW 272
62348: PUSH
62349: LD_VAR 0 8
62353: PPUSH
62354: LD_INT 1
62356: PPUSH
62357: LD_INT 4
62359: PPUSH
62360: CALL_OW 273
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_VAR 0 7
62373: PPUSH
62374: LD_INT 2
62376: PPUSH
62377: LD_INT 4
62379: PPUSH
62380: CALL_OW 272
62384: PUSH
62385: LD_VAR 0 8
62389: PPUSH
62390: LD_INT 2
62392: PPUSH
62393: LD_INT 4
62395: PPUSH
62396: CALL_OW 273
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_VAR 0 7
62409: PPUSH
62410: LD_INT 3
62412: PPUSH
62413: LD_INT 4
62415: PPUSH
62416: CALL_OW 272
62420: PUSH
62421: LD_VAR 0 8
62425: PPUSH
62426: LD_INT 3
62428: PPUSH
62429: LD_INT 4
62431: PPUSH
62432: CALL_OW 273
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_VAR 0 7
62445: PPUSH
62446: LD_INT 4
62448: PPUSH
62449: LD_INT 4
62451: PPUSH
62452: CALL_OW 272
62456: PUSH
62457: LD_VAR 0 8
62461: PPUSH
62462: LD_INT 4
62464: PPUSH
62465: LD_INT 4
62467: PPUSH
62468: CALL_OW 273
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_VAR 0 7
62481: PPUSH
62482: LD_INT 5
62484: PPUSH
62485: LD_INT 4
62487: PPUSH
62488: CALL_OW 272
62492: PUSH
62493: LD_VAR 0 8
62497: PPUSH
62498: LD_INT 5
62500: PPUSH
62501: LD_INT 4
62503: PPUSH
62504: CALL_OW 273
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: ST_TO_ADDR
// for i = tmp downto 1 do
62521: LD_ADDR_VAR 0 4
62525: PUSH
62526: DOUBLE
62527: LD_VAR 0 6
62531: INC
62532: ST_TO_ADDR
62533: LD_INT 1
62535: PUSH
62536: FOR_DOWNTO
62537: IFFALSE 62638
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62539: LD_VAR 0 6
62543: PUSH
62544: LD_VAR 0 4
62548: ARRAY
62549: PUSH
62550: LD_INT 1
62552: ARRAY
62553: PPUSH
62554: LD_VAR 0 6
62558: PUSH
62559: LD_VAR 0 4
62563: ARRAY
62564: PUSH
62565: LD_INT 2
62567: ARRAY
62568: PPUSH
62569: CALL_OW 488
62573: NOT
62574: PUSH
62575: LD_VAR 0 6
62579: PUSH
62580: LD_VAR 0 4
62584: ARRAY
62585: PUSH
62586: LD_INT 1
62588: ARRAY
62589: PPUSH
62590: LD_VAR 0 6
62594: PUSH
62595: LD_VAR 0 4
62599: ARRAY
62600: PUSH
62601: LD_INT 2
62603: ARRAY
62604: PPUSH
62605: CALL_OW 428
62609: PUSH
62610: LD_INT 0
62612: NONEQUAL
62613: OR
62614: IFFALSE 62636
// tmp := Delete ( tmp , i ) ;
62616: LD_ADDR_VAR 0 6
62620: PUSH
62621: LD_VAR 0 6
62625: PPUSH
62626: LD_VAR 0 4
62630: PPUSH
62631: CALL_OW 3
62635: ST_TO_ADDR
62636: GO 62536
62638: POP
62639: POP
// j := GetClosestHex ( unit , tmp ) ;
62640: LD_ADDR_VAR 0 5
62644: PUSH
62645: LD_VAR 0 1
62649: PPUSH
62650: LD_VAR 0 6
62654: PPUSH
62655: CALL 61931 0 2
62659: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62660: LD_VAR 0 1
62664: PPUSH
62665: LD_VAR 0 5
62669: PUSH
62670: LD_INT 1
62672: ARRAY
62673: PPUSH
62674: LD_VAR 0 5
62678: PUSH
62679: LD_INT 2
62681: ARRAY
62682: PPUSH
62683: CALL_OW 111
// end ;
62687: LD_VAR 0 3
62691: RET
// export function PrepareApemanSoldier ( ) ; begin
62692: LD_INT 0
62694: PPUSH
// uc_nation := 0 ;
62695: LD_ADDR_OWVAR 21
62699: PUSH
62700: LD_INT 0
62702: ST_TO_ADDR
// hc_sex := sex_male ;
62703: LD_ADDR_OWVAR 27
62707: PUSH
62708: LD_INT 1
62710: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62711: LD_ADDR_OWVAR 28
62715: PUSH
62716: LD_INT 15
62718: ST_TO_ADDR
// hc_gallery :=  ;
62719: LD_ADDR_OWVAR 33
62723: PUSH
62724: LD_STRING 
62726: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62727: LD_ADDR_OWVAR 31
62731: PUSH
62732: LD_INT 0
62734: PPUSH
62735: LD_INT 3
62737: PPUSH
62738: CALL_OW 12
62742: PUSH
62743: LD_INT 0
62745: PPUSH
62746: LD_INT 3
62748: PPUSH
62749: CALL_OW 12
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: ST_TO_ADDR
// end ;
62766: LD_VAR 0 1
62770: RET
// export function PrepareApemanEngineer ( ) ; begin
62771: LD_INT 0
62773: PPUSH
// uc_nation := 0 ;
62774: LD_ADDR_OWVAR 21
62778: PUSH
62779: LD_INT 0
62781: ST_TO_ADDR
// hc_sex := sex_male ;
62782: LD_ADDR_OWVAR 27
62786: PUSH
62787: LD_INT 1
62789: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62790: LD_ADDR_OWVAR 28
62794: PUSH
62795: LD_INT 16
62797: ST_TO_ADDR
// hc_gallery :=  ;
62798: LD_ADDR_OWVAR 33
62802: PUSH
62803: LD_STRING 
62805: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62806: LD_ADDR_OWVAR 31
62810: PUSH
62811: LD_INT 0
62813: PPUSH
62814: LD_INT 3
62816: PPUSH
62817: CALL_OW 12
62821: PUSH
62822: LD_INT 0
62824: PPUSH
62825: LD_INT 3
62827: PPUSH
62828: CALL_OW 12
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: ST_TO_ADDR
// end ;
62845: LD_VAR 0 1
62849: RET
// export function PrepareApeman ( agressivity ) ; begin
62850: LD_INT 0
62852: PPUSH
// uc_side := 0 ;
62853: LD_ADDR_OWVAR 20
62857: PUSH
62858: LD_INT 0
62860: ST_TO_ADDR
// uc_nation := 0 ;
62861: LD_ADDR_OWVAR 21
62865: PUSH
62866: LD_INT 0
62868: ST_TO_ADDR
// hc_sex := sex_male ;
62869: LD_ADDR_OWVAR 27
62873: PUSH
62874: LD_INT 1
62876: ST_TO_ADDR
// hc_class := class_apeman ;
62877: LD_ADDR_OWVAR 28
62881: PUSH
62882: LD_INT 12
62884: ST_TO_ADDR
// hc_gallery :=  ;
62885: LD_ADDR_OWVAR 33
62889: PUSH
62890: LD_STRING 
62892: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62893: LD_ADDR_OWVAR 35
62897: PUSH
62898: LD_VAR 0 1
62902: NEG
62903: PPUSH
62904: LD_VAR 0 1
62908: PPUSH
62909: CALL_OW 12
62913: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62914: LD_ADDR_OWVAR 31
62918: PUSH
62919: LD_INT 0
62921: PPUSH
62922: LD_INT 3
62924: PPUSH
62925: CALL_OW 12
62929: PUSH
62930: LD_INT 0
62932: PPUSH
62933: LD_INT 3
62935: PPUSH
62936: CALL_OW 12
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: ST_TO_ADDR
// end ;
62953: LD_VAR 0 2
62957: RET
// export function PrepareTiger ( agressivity ) ; begin
62958: LD_INT 0
62960: PPUSH
// uc_side := 0 ;
62961: LD_ADDR_OWVAR 20
62965: PUSH
62966: LD_INT 0
62968: ST_TO_ADDR
// uc_nation := 0 ;
62969: LD_ADDR_OWVAR 21
62973: PUSH
62974: LD_INT 0
62976: ST_TO_ADDR
// hc_class := class_tiger ;
62977: LD_ADDR_OWVAR 28
62981: PUSH
62982: LD_INT 14
62984: ST_TO_ADDR
// hc_gallery :=  ;
62985: LD_ADDR_OWVAR 33
62989: PUSH
62990: LD_STRING 
62992: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62993: LD_ADDR_OWVAR 35
62997: PUSH
62998: LD_VAR 0 1
63002: NEG
63003: PPUSH
63004: LD_VAR 0 1
63008: PPUSH
63009: CALL_OW 12
63013: ST_TO_ADDR
// end ;
63014: LD_VAR 0 2
63018: RET
// export function PrepareEnchidna ( ) ; begin
63019: LD_INT 0
63021: PPUSH
// uc_side := 0 ;
63022: LD_ADDR_OWVAR 20
63026: PUSH
63027: LD_INT 0
63029: ST_TO_ADDR
// uc_nation := 0 ;
63030: LD_ADDR_OWVAR 21
63034: PUSH
63035: LD_INT 0
63037: ST_TO_ADDR
// hc_class := class_baggie ;
63038: LD_ADDR_OWVAR 28
63042: PUSH
63043: LD_INT 13
63045: ST_TO_ADDR
// hc_gallery :=  ;
63046: LD_ADDR_OWVAR 33
63050: PUSH
63051: LD_STRING 
63053: ST_TO_ADDR
// end ;
63054: LD_VAR 0 1
63058: RET
// export function PrepareFrog ( ) ; begin
63059: LD_INT 0
63061: PPUSH
// uc_side := 0 ;
63062: LD_ADDR_OWVAR 20
63066: PUSH
63067: LD_INT 0
63069: ST_TO_ADDR
// uc_nation := 0 ;
63070: LD_ADDR_OWVAR 21
63074: PUSH
63075: LD_INT 0
63077: ST_TO_ADDR
// hc_class := class_frog ;
63078: LD_ADDR_OWVAR 28
63082: PUSH
63083: LD_INT 19
63085: ST_TO_ADDR
// hc_gallery :=  ;
63086: LD_ADDR_OWVAR 33
63090: PUSH
63091: LD_STRING 
63093: ST_TO_ADDR
// end ;
63094: LD_VAR 0 1
63098: RET
// export function PrepareFish ( ) ; begin
63099: LD_INT 0
63101: PPUSH
// uc_side := 0 ;
63102: LD_ADDR_OWVAR 20
63106: PUSH
63107: LD_INT 0
63109: ST_TO_ADDR
// uc_nation := 0 ;
63110: LD_ADDR_OWVAR 21
63114: PUSH
63115: LD_INT 0
63117: ST_TO_ADDR
// hc_class := class_fish ;
63118: LD_ADDR_OWVAR 28
63122: PUSH
63123: LD_INT 20
63125: ST_TO_ADDR
// hc_gallery :=  ;
63126: LD_ADDR_OWVAR 33
63130: PUSH
63131: LD_STRING 
63133: ST_TO_ADDR
// end ;
63134: LD_VAR 0 1
63138: RET
// export function PrepareBird ( ) ; begin
63139: LD_INT 0
63141: PPUSH
// uc_side := 0 ;
63142: LD_ADDR_OWVAR 20
63146: PUSH
63147: LD_INT 0
63149: ST_TO_ADDR
// uc_nation := 0 ;
63150: LD_ADDR_OWVAR 21
63154: PUSH
63155: LD_INT 0
63157: ST_TO_ADDR
// hc_class := class_phororhacos ;
63158: LD_ADDR_OWVAR 28
63162: PUSH
63163: LD_INT 18
63165: ST_TO_ADDR
// hc_gallery :=  ;
63166: LD_ADDR_OWVAR 33
63170: PUSH
63171: LD_STRING 
63173: ST_TO_ADDR
// end ;
63174: LD_VAR 0 1
63178: RET
// export function PrepareHorse ( ) ; begin
63179: LD_INT 0
63181: PPUSH
// uc_side := 0 ;
63182: LD_ADDR_OWVAR 20
63186: PUSH
63187: LD_INT 0
63189: ST_TO_ADDR
// uc_nation := 0 ;
63190: LD_ADDR_OWVAR 21
63194: PUSH
63195: LD_INT 0
63197: ST_TO_ADDR
// hc_class := class_horse ;
63198: LD_ADDR_OWVAR 28
63202: PUSH
63203: LD_INT 21
63205: ST_TO_ADDR
// hc_gallery :=  ;
63206: LD_ADDR_OWVAR 33
63210: PUSH
63211: LD_STRING 
63213: ST_TO_ADDR
// end ;
63214: LD_VAR 0 1
63218: RET
// export function PrepareMastodont ( ) ; begin
63219: LD_INT 0
63221: PPUSH
// uc_side := 0 ;
63222: LD_ADDR_OWVAR 20
63226: PUSH
63227: LD_INT 0
63229: ST_TO_ADDR
// uc_nation := 0 ;
63230: LD_ADDR_OWVAR 21
63234: PUSH
63235: LD_INT 0
63237: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63238: LD_ADDR_OWVAR 37
63242: PUSH
63243: LD_INT 31
63245: ST_TO_ADDR
// vc_control := control_rider ;
63246: LD_ADDR_OWVAR 38
63250: PUSH
63251: LD_INT 4
63253: ST_TO_ADDR
// end ;
63254: LD_VAR 0 1
63258: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63259: LD_INT 0
63261: PPUSH
63262: PPUSH
63263: PPUSH
// uc_side = 0 ;
63264: LD_ADDR_OWVAR 20
63268: PUSH
63269: LD_INT 0
63271: ST_TO_ADDR
// uc_nation = 0 ;
63272: LD_ADDR_OWVAR 21
63276: PUSH
63277: LD_INT 0
63279: ST_TO_ADDR
// InitHc_All ( ) ;
63280: CALL_OW 584
// InitVc ;
63284: CALL_OW 20
// if mastodonts then
63288: LD_VAR 0 6
63292: IFFALSE 63359
// for i = 1 to mastodonts do
63294: LD_ADDR_VAR 0 11
63298: PUSH
63299: DOUBLE
63300: LD_INT 1
63302: DEC
63303: ST_TO_ADDR
63304: LD_VAR 0 6
63308: PUSH
63309: FOR_TO
63310: IFFALSE 63357
// begin vc_chassis := 31 ;
63312: LD_ADDR_OWVAR 37
63316: PUSH
63317: LD_INT 31
63319: ST_TO_ADDR
// vc_control := control_rider ;
63320: LD_ADDR_OWVAR 38
63324: PUSH
63325: LD_INT 4
63327: ST_TO_ADDR
// animal := CreateVehicle ;
63328: LD_ADDR_VAR 0 12
63332: PUSH
63333: CALL_OW 45
63337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63338: LD_VAR 0 12
63342: PPUSH
63343: LD_VAR 0 8
63347: PPUSH
63348: LD_INT 0
63350: PPUSH
63351: CALL 65487 0 3
// end ;
63355: GO 63309
63357: POP
63358: POP
// if horses then
63359: LD_VAR 0 5
63363: IFFALSE 63430
// for i = 1 to horses do
63365: LD_ADDR_VAR 0 11
63369: PUSH
63370: DOUBLE
63371: LD_INT 1
63373: DEC
63374: ST_TO_ADDR
63375: LD_VAR 0 5
63379: PUSH
63380: FOR_TO
63381: IFFALSE 63428
// begin hc_class := 21 ;
63383: LD_ADDR_OWVAR 28
63387: PUSH
63388: LD_INT 21
63390: ST_TO_ADDR
// hc_gallery :=  ;
63391: LD_ADDR_OWVAR 33
63395: PUSH
63396: LD_STRING 
63398: ST_TO_ADDR
// animal := CreateHuman ;
63399: LD_ADDR_VAR 0 12
63403: PUSH
63404: CALL_OW 44
63408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63409: LD_VAR 0 12
63413: PPUSH
63414: LD_VAR 0 8
63418: PPUSH
63419: LD_INT 0
63421: PPUSH
63422: CALL 65487 0 3
// end ;
63426: GO 63380
63428: POP
63429: POP
// if birds then
63430: LD_VAR 0 1
63434: IFFALSE 63501
// for i = 1 to birds do
63436: LD_ADDR_VAR 0 11
63440: PUSH
63441: DOUBLE
63442: LD_INT 1
63444: DEC
63445: ST_TO_ADDR
63446: LD_VAR 0 1
63450: PUSH
63451: FOR_TO
63452: IFFALSE 63499
// begin hc_class = 18 ;
63454: LD_ADDR_OWVAR 28
63458: PUSH
63459: LD_INT 18
63461: ST_TO_ADDR
// hc_gallery =  ;
63462: LD_ADDR_OWVAR 33
63466: PUSH
63467: LD_STRING 
63469: ST_TO_ADDR
// animal := CreateHuman ;
63470: LD_ADDR_VAR 0 12
63474: PUSH
63475: CALL_OW 44
63479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63480: LD_VAR 0 12
63484: PPUSH
63485: LD_VAR 0 8
63489: PPUSH
63490: LD_INT 0
63492: PPUSH
63493: CALL 65487 0 3
// end ;
63497: GO 63451
63499: POP
63500: POP
// if tigers then
63501: LD_VAR 0 2
63505: IFFALSE 63589
// for i = 1 to tigers do
63507: LD_ADDR_VAR 0 11
63511: PUSH
63512: DOUBLE
63513: LD_INT 1
63515: DEC
63516: ST_TO_ADDR
63517: LD_VAR 0 2
63521: PUSH
63522: FOR_TO
63523: IFFALSE 63587
// begin hc_class = class_tiger ;
63525: LD_ADDR_OWVAR 28
63529: PUSH
63530: LD_INT 14
63532: ST_TO_ADDR
// hc_gallery =  ;
63533: LD_ADDR_OWVAR 33
63537: PUSH
63538: LD_STRING 
63540: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63541: LD_ADDR_OWVAR 35
63545: PUSH
63546: LD_INT 7
63548: NEG
63549: PPUSH
63550: LD_INT 7
63552: PPUSH
63553: CALL_OW 12
63557: ST_TO_ADDR
// animal := CreateHuman ;
63558: LD_ADDR_VAR 0 12
63562: PUSH
63563: CALL_OW 44
63567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63568: LD_VAR 0 12
63572: PPUSH
63573: LD_VAR 0 8
63577: PPUSH
63578: LD_INT 0
63580: PPUSH
63581: CALL 65487 0 3
// end ;
63585: GO 63522
63587: POP
63588: POP
// if apemans then
63589: LD_VAR 0 3
63593: IFFALSE 63716
// for i = 1 to apemans do
63595: LD_ADDR_VAR 0 11
63599: PUSH
63600: DOUBLE
63601: LD_INT 1
63603: DEC
63604: ST_TO_ADDR
63605: LD_VAR 0 3
63609: PUSH
63610: FOR_TO
63611: IFFALSE 63714
// begin hc_class = class_apeman ;
63613: LD_ADDR_OWVAR 28
63617: PUSH
63618: LD_INT 12
63620: ST_TO_ADDR
// hc_gallery =  ;
63621: LD_ADDR_OWVAR 33
63625: PUSH
63626: LD_STRING 
63628: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63629: LD_ADDR_OWVAR 35
63633: PUSH
63634: LD_INT 2
63636: NEG
63637: PPUSH
63638: LD_INT 2
63640: PPUSH
63641: CALL_OW 12
63645: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63646: LD_ADDR_OWVAR 31
63650: PUSH
63651: LD_INT 1
63653: PPUSH
63654: LD_INT 3
63656: PPUSH
63657: CALL_OW 12
63661: PUSH
63662: LD_INT 1
63664: PPUSH
63665: LD_INT 3
63667: PPUSH
63668: CALL_OW 12
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: ST_TO_ADDR
// animal := CreateHuman ;
63685: LD_ADDR_VAR 0 12
63689: PUSH
63690: CALL_OW 44
63694: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63695: LD_VAR 0 12
63699: PPUSH
63700: LD_VAR 0 8
63704: PPUSH
63705: LD_INT 0
63707: PPUSH
63708: CALL 65487 0 3
// end ;
63712: GO 63610
63714: POP
63715: POP
// if enchidnas then
63716: LD_VAR 0 4
63720: IFFALSE 63787
// for i = 1 to enchidnas do
63722: LD_ADDR_VAR 0 11
63726: PUSH
63727: DOUBLE
63728: LD_INT 1
63730: DEC
63731: ST_TO_ADDR
63732: LD_VAR 0 4
63736: PUSH
63737: FOR_TO
63738: IFFALSE 63785
// begin hc_class = 13 ;
63740: LD_ADDR_OWVAR 28
63744: PUSH
63745: LD_INT 13
63747: ST_TO_ADDR
// hc_gallery =  ;
63748: LD_ADDR_OWVAR 33
63752: PUSH
63753: LD_STRING 
63755: ST_TO_ADDR
// animal := CreateHuman ;
63756: LD_ADDR_VAR 0 12
63760: PUSH
63761: CALL_OW 44
63765: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63766: LD_VAR 0 12
63770: PPUSH
63771: LD_VAR 0 8
63775: PPUSH
63776: LD_INT 0
63778: PPUSH
63779: CALL 65487 0 3
// end ;
63783: GO 63737
63785: POP
63786: POP
// if fishes then
63787: LD_VAR 0 7
63791: IFFALSE 63858
// for i = 1 to fishes do
63793: LD_ADDR_VAR 0 11
63797: PUSH
63798: DOUBLE
63799: LD_INT 1
63801: DEC
63802: ST_TO_ADDR
63803: LD_VAR 0 7
63807: PUSH
63808: FOR_TO
63809: IFFALSE 63856
// begin hc_class = 20 ;
63811: LD_ADDR_OWVAR 28
63815: PUSH
63816: LD_INT 20
63818: ST_TO_ADDR
// hc_gallery =  ;
63819: LD_ADDR_OWVAR 33
63823: PUSH
63824: LD_STRING 
63826: ST_TO_ADDR
// animal := CreateHuman ;
63827: LD_ADDR_VAR 0 12
63831: PUSH
63832: CALL_OW 44
63836: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63837: LD_VAR 0 12
63841: PPUSH
63842: LD_VAR 0 9
63846: PPUSH
63847: LD_INT 0
63849: PPUSH
63850: CALL 65487 0 3
// end ;
63854: GO 63808
63856: POP
63857: POP
// end ;
63858: LD_VAR 0 10
63862: RET
// export function WantHeal ( sci , unit ) ; begin
63863: LD_INT 0
63865: PPUSH
// if GetTaskList ( sci ) > 0 then
63866: LD_VAR 0 1
63870: PPUSH
63871: CALL_OW 437
63875: PUSH
63876: LD_INT 0
63878: GREATER
63879: IFFALSE 63949
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63881: LD_VAR 0 1
63885: PPUSH
63886: CALL_OW 437
63890: PUSH
63891: LD_INT 1
63893: ARRAY
63894: PUSH
63895: LD_INT 1
63897: ARRAY
63898: PUSH
63899: LD_STRING l
63901: EQUAL
63902: PUSH
63903: LD_VAR 0 1
63907: PPUSH
63908: CALL_OW 437
63912: PUSH
63913: LD_INT 1
63915: ARRAY
63916: PUSH
63917: LD_INT 4
63919: ARRAY
63920: PUSH
63921: LD_VAR 0 2
63925: EQUAL
63926: AND
63927: IFFALSE 63939
// result := true else
63929: LD_ADDR_VAR 0 3
63933: PUSH
63934: LD_INT 1
63936: ST_TO_ADDR
63937: GO 63947
// result := false ;
63939: LD_ADDR_VAR 0 3
63943: PUSH
63944: LD_INT 0
63946: ST_TO_ADDR
// end else
63947: GO 63957
// result := false ;
63949: LD_ADDR_VAR 0 3
63953: PUSH
63954: LD_INT 0
63956: ST_TO_ADDR
// end ;
63957: LD_VAR 0 3
63961: RET
// export function HealTarget ( sci ) ; begin
63962: LD_INT 0
63964: PPUSH
// if not sci then
63965: LD_VAR 0 1
63969: NOT
63970: IFFALSE 63974
// exit ;
63972: GO 64039
// result := 0 ;
63974: LD_ADDR_VAR 0 2
63978: PUSH
63979: LD_INT 0
63981: ST_TO_ADDR
// if GetTaskList ( sci ) then
63982: LD_VAR 0 1
63986: PPUSH
63987: CALL_OW 437
63991: IFFALSE 64039
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63993: LD_VAR 0 1
63997: PPUSH
63998: CALL_OW 437
64002: PUSH
64003: LD_INT 1
64005: ARRAY
64006: PUSH
64007: LD_INT 1
64009: ARRAY
64010: PUSH
64011: LD_STRING l
64013: EQUAL
64014: IFFALSE 64039
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64016: LD_ADDR_VAR 0 2
64020: PUSH
64021: LD_VAR 0 1
64025: PPUSH
64026: CALL_OW 437
64030: PUSH
64031: LD_INT 1
64033: ARRAY
64034: PUSH
64035: LD_INT 4
64037: ARRAY
64038: ST_TO_ADDR
// end ;
64039: LD_VAR 0 2
64043: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64044: LD_INT 0
64046: PPUSH
64047: PPUSH
64048: PPUSH
64049: PPUSH
// if not base_units then
64050: LD_VAR 0 1
64054: NOT
64055: IFFALSE 64059
// exit ;
64057: GO 64146
// result := false ;
64059: LD_ADDR_VAR 0 2
64063: PUSH
64064: LD_INT 0
64066: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64067: LD_ADDR_VAR 0 5
64071: PUSH
64072: LD_VAR 0 1
64076: PPUSH
64077: LD_INT 21
64079: PUSH
64080: LD_INT 3
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PPUSH
64087: CALL_OW 72
64091: ST_TO_ADDR
// if not tmp then
64092: LD_VAR 0 5
64096: NOT
64097: IFFALSE 64101
// exit ;
64099: GO 64146
// for i in tmp do
64101: LD_ADDR_VAR 0 3
64105: PUSH
64106: LD_VAR 0 5
64110: PUSH
64111: FOR_IN
64112: IFFALSE 64144
// begin result := EnemyInRange ( i , 22 ) ;
64114: LD_ADDR_VAR 0 2
64118: PUSH
64119: LD_VAR 0 3
64123: PPUSH
64124: LD_INT 22
64126: PPUSH
64127: CALL 61733 0 2
64131: ST_TO_ADDR
// if result then
64132: LD_VAR 0 2
64136: IFFALSE 64142
// exit ;
64138: POP
64139: POP
64140: GO 64146
// end ;
64142: GO 64111
64144: POP
64145: POP
// end ;
64146: LD_VAR 0 2
64150: RET
// export function FilterByTag ( units , tag ) ; begin
64151: LD_INT 0
64153: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64154: LD_ADDR_VAR 0 3
64158: PUSH
64159: LD_VAR 0 1
64163: PPUSH
64164: LD_INT 120
64166: PUSH
64167: LD_VAR 0 2
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PPUSH
64176: CALL_OW 72
64180: ST_TO_ADDR
// end ;
64181: LD_VAR 0 3
64185: RET
// export function IsDriver ( un ) ; begin
64186: LD_INT 0
64188: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64189: LD_ADDR_VAR 0 2
64193: PUSH
64194: LD_VAR 0 1
64198: PUSH
64199: LD_INT 55
64201: PUSH
64202: EMPTY
64203: LIST
64204: PPUSH
64205: CALL_OW 69
64209: IN
64210: ST_TO_ADDR
// end ;
64211: LD_VAR 0 2
64215: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64216: LD_INT 0
64218: PPUSH
64219: PPUSH
// list := [ ] ;
64220: LD_ADDR_VAR 0 5
64224: PUSH
64225: EMPTY
64226: ST_TO_ADDR
// case d of 0 :
64227: LD_VAR 0 3
64231: PUSH
64232: LD_INT 0
64234: DOUBLE
64235: EQUAL
64236: IFTRUE 64240
64238: GO 64373
64240: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64241: LD_ADDR_VAR 0 5
64245: PUSH
64246: LD_VAR 0 1
64250: PUSH
64251: LD_INT 4
64253: MINUS
64254: PUSH
64255: LD_VAR 0 2
64259: PUSH
64260: LD_INT 4
64262: MINUS
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: LIST
64271: PUSH
64272: LD_VAR 0 1
64276: PUSH
64277: LD_INT 3
64279: MINUS
64280: PUSH
64281: LD_VAR 0 2
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: LIST
64293: PUSH
64294: LD_VAR 0 1
64298: PUSH
64299: LD_INT 4
64301: PLUS
64302: PUSH
64303: LD_VAR 0 2
64307: PUSH
64308: LD_INT 4
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: LIST
64315: PUSH
64316: LD_VAR 0 1
64320: PUSH
64321: LD_INT 3
64323: PLUS
64324: PUSH
64325: LD_VAR 0 2
64329: PUSH
64330: LD_INT 3
64332: PLUS
64333: PUSH
64334: LD_INT 5
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: LIST
64341: PUSH
64342: LD_VAR 0 1
64346: PUSH
64347: LD_VAR 0 2
64351: PUSH
64352: LD_INT 4
64354: PLUS
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: LIST
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: ST_TO_ADDR
// end ; 1 :
64371: GO 65071
64373: LD_INT 1
64375: DOUBLE
64376: EQUAL
64377: IFTRUE 64381
64379: GO 64514
64381: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64382: LD_ADDR_VAR 0 5
64386: PUSH
64387: LD_VAR 0 1
64391: PUSH
64392: LD_VAR 0 2
64396: PUSH
64397: LD_INT 4
64399: MINUS
64400: PUSH
64401: LD_INT 3
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: LIST
64408: PUSH
64409: LD_VAR 0 1
64413: PUSH
64414: LD_INT 3
64416: MINUS
64417: PUSH
64418: LD_VAR 0 2
64422: PUSH
64423: LD_INT 3
64425: MINUS
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: PUSH
64435: LD_VAR 0 1
64439: PUSH
64440: LD_INT 4
64442: MINUS
64443: PUSH
64444: LD_VAR 0 2
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: LIST
64456: PUSH
64457: LD_VAR 0 1
64461: PUSH
64462: LD_VAR 0 2
64466: PUSH
64467: LD_INT 3
64469: PLUS
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: LIST
64478: PUSH
64479: LD_VAR 0 1
64483: PUSH
64484: LD_INT 4
64486: PLUS
64487: PUSH
64488: LD_VAR 0 2
64492: PUSH
64493: LD_INT 4
64495: PLUS
64496: PUSH
64497: LD_INT 5
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: LIST
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: ST_TO_ADDR
// end ; 2 :
64512: GO 65071
64514: LD_INT 2
64516: DOUBLE
64517: EQUAL
64518: IFTRUE 64522
64520: GO 64651
64522: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64523: LD_ADDR_VAR 0 5
64527: PUSH
64528: LD_VAR 0 1
64532: PUSH
64533: LD_VAR 0 2
64537: PUSH
64538: LD_INT 3
64540: MINUS
64541: PUSH
64542: LD_INT 3
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: PUSH
64550: LD_VAR 0 1
64554: PUSH
64555: LD_INT 4
64557: PLUS
64558: PUSH
64559: LD_VAR 0 2
64563: PUSH
64564: LD_INT 4
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: LIST
64571: PUSH
64572: LD_VAR 0 1
64576: PUSH
64577: LD_VAR 0 2
64581: PUSH
64582: LD_INT 4
64584: PLUS
64585: PUSH
64586: LD_INT 0
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: LIST
64593: PUSH
64594: LD_VAR 0 1
64598: PUSH
64599: LD_INT 3
64601: MINUS
64602: PUSH
64603: LD_VAR 0 2
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: LIST
64615: PUSH
64616: LD_VAR 0 1
64620: PUSH
64621: LD_INT 4
64623: MINUS
64624: PUSH
64625: LD_VAR 0 2
64629: PUSH
64630: LD_INT 4
64632: MINUS
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: ST_TO_ADDR
// end ; 3 :
64649: GO 65071
64651: LD_INT 3
64653: DOUBLE
64654: EQUAL
64655: IFTRUE 64659
64657: GO 64792
64659: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64660: LD_ADDR_VAR 0 5
64664: PUSH
64665: LD_VAR 0 1
64669: PUSH
64670: LD_INT 3
64672: PLUS
64673: PUSH
64674: LD_VAR 0 2
64678: PUSH
64679: LD_INT 4
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: PUSH
64687: LD_VAR 0 1
64691: PUSH
64692: LD_INT 4
64694: PLUS
64695: PUSH
64696: LD_VAR 0 2
64700: PUSH
64701: LD_INT 4
64703: PLUS
64704: PUSH
64705: LD_INT 5
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: LIST
64712: PUSH
64713: LD_VAR 0 1
64717: PUSH
64718: LD_INT 4
64720: MINUS
64721: PUSH
64722: LD_VAR 0 2
64726: PUSH
64727: LD_INT 1
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: LIST
64734: PUSH
64735: LD_VAR 0 1
64739: PUSH
64740: LD_VAR 0 2
64744: PUSH
64745: LD_INT 4
64747: MINUS
64748: PUSH
64749: LD_INT 3
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: PUSH
64757: LD_VAR 0 1
64761: PUSH
64762: LD_INT 3
64764: MINUS
64765: PUSH
64766: LD_VAR 0 2
64770: PUSH
64771: LD_INT 3
64773: MINUS
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: LIST
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: ST_TO_ADDR
// end ; 4 :
64790: GO 65071
64792: LD_INT 4
64794: DOUBLE
64795: EQUAL
64796: IFTRUE 64800
64798: GO 64933
64800: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64801: LD_ADDR_VAR 0 5
64805: PUSH
64806: LD_VAR 0 1
64810: PUSH
64811: LD_VAR 0 2
64815: PUSH
64816: LD_INT 4
64818: PLUS
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: PUSH
64828: LD_VAR 0 1
64832: PUSH
64833: LD_INT 3
64835: PLUS
64836: PUSH
64837: LD_VAR 0 2
64841: PUSH
64842: LD_INT 3
64844: PLUS
64845: PUSH
64846: LD_INT 5
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: LIST
64853: PUSH
64854: LD_VAR 0 1
64858: PUSH
64859: LD_INT 4
64861: PLUS
64862: PUSH
64863: LD_VAR 0 2
64867: PUSH
64868: LD_INT 4
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: LIST
64875: PUSH
64876: LD_VAR 0 1
64880: PUSH
64881: LD_VAR 0 2
64885: PUSH
64886: LD_INT 3
64888: MINUS
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: LIST
64897: PUSH
64898: LD_VAR 0 1
64902: PUSH
64903: LD_INT 4
64905: MINUS
64906: PUSH
64907: LD_VAR 0 2
64911: PUSH
64912: LD_INT 4
64914: MINUS
64915: PUSH
64916: LD_INT 2
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: LIST
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: ST_TO_ADDR
// end ; 5 :
64931: GO 65071
64933: LD_INT 5
64935: DOUBLE
64936: EQUAL
64937: IFTRUE 64941
64939: GO 65070
64941: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64942: LD_ADDR_VAR 0 5
64946: PUSH
64947: LD_VAR 0 1
64951: PUSH
64952: LD_INT 4
64954: MINUS
64955: PUSH
64956: LD_VAR 0 2
64960: PUSH
64961: LD_INT 1
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: PUSH
64969: LD_VAR 0 1
64973: PUSH
64974: LD_VAR 0 2
64978: PUSH
64979: LD_INT 4
64981: MINUS
64982: PUSH
64983: LD_INT 3
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: PUSH
64991: LD_VAR 0 1
64995: PUSH
64996: LD_INT 4
64998: PLUS
64999: PUSH
65000: LD_VAR 0 2
65004: PUSH
65005: LD_INT 4
65007: PLUS
65008: PUSH
65009: LD_INT 5
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: LIST
65016: PUSH
65017: LD_VAR 0 1
65021: PUSH
65022: LD_INT 3
65024: PLUS
65025: PUSH
65026: LD_VAR 0 2
65030: PUSH
65031: LD_INT 4
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: LIST
65038: PUSH
65039: LD_VAR 0 1
65043: PUSH
65044: LD_VAR 0 2
65048: PUSH
65049: LD_INT 3
65051: PLUS
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: LIST
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: ST_TO_ADDR
// end ; end ;
65068: GO 65071
65070: POP
// result := list ;
65071: LD_ADDR_VAR 0 4
65075: PUSH
65076: LD_VAR 0 5
65080: ST_TO_ADDR
// end ;
65081: LD_VAR 0 4
65085: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65086: LD_INT 0
65088: PPUSH
65089: PPUSH
65090: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65091: LD_VAR 0 1
65095: NOT
65096: PUSH
65097: LD_VAR 0 2
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: LD_INT 3
65110: PUSH
65111: LD_INT 4
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: IN
65120: NOT
65121: OR
65122: IFFALSE 65126
// exit ;
65124: GO 65209
// tmp := [ ] ;
65126: LD_ADDR_VAR 0 5
65130: PUSH
65131: EMPTY
65132: ST_TO_ADDR
// for i in units do
65133: LD_ADDR_VAR 0 4
65137: PUSH
65138: LD_VAR 0 1
65142: PUSH
65143: FOR_IN
65144: IFFALSE 65178
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65146: LD_ADDR_VAR 0 5
65150: PUSH
65151: LD_VAR 0 5
65155: PPUSH
65156: LD_VAR 0 4
65160: PPUSH
65161: LD_VAR 0 2
65165: PPUSH
65166: CALL_OW 259
65170: PPUSH
65171: CALL 66570 0 2
65175: ST_TO_ADDR
65176: GO 65143
65178: POP
65179: POP
// if not tmp then
65180: LD_VAR 0 5
65184: NOT
65185: IFFALSE 65189
// exit ;
65187: GO 65209
// result := SortListByListDesc ( units , tmp ) ;
65189: LD_ADDR_VAR 0 3
65193: PUSH
65194: LD_VAR 0 1
65198: PPUSH
65199: LD_VAR 0 5
65203: PPUSH
65204: CALL_OW 77
65208: ST_TO_ADDR
// end ;
65209: LD_VAR 0 3
65213: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65214: LD_INT 0
65216: PPUSH
65217: PPUSH
65218: PPUSH
// result := false ;
65219: LD_ADDR_VAR 0 3
65223: PUSH
65224: LD_INT 0
65226: ST_TO_ADDR
// if not building then
65227: LD_VAR 0 2
65231: NOT
65232: IFFALSE 65236
// exit ;
65234: GO 65374
// x := GetX ( building ) ;
65236: LD_ADDR_VAR 0 4
65240: PUSH
65241: LD_VAR 0 2
65245: PPUSH
65246: CALL_OW 250
65250: ST_TO_ADDR
// y := GetY ( building ) ;
65251: LD_ADDR_VAR 0 5
65255: PUSH
65256: LD_VAR 0 2
65260: PPUSH
65261: CALL_OW 251
65265: ST_TO_ADDR
// if not x or not y then
65266: LD_VAR 0 4
65270: NOT
65271: PUSH
65272: LD_VAR 0 5
65276: NOT
65277: OR
65278: IFFALSE 65282
// exit ;
65280: GO 65374
// if GetTaskList ( unit ) then
65282: LD_VAR 0 1
65286: PPUSH
65287: CALL_OW 437
65291: IFFALSE 65374
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65293: LD_STRING e
65295: PUSH
65296: LD_VAR 0 1
65300: PPUSH
65301: CALL_OW 437
65305: PUSH
65306: LD_INT 1
65308: ARRAY
65309: PUSH
65310: LD_INT 1
65312: ARRAY
65313: EQUAL
65314: PUSH
65315: LD_VAR 0 4
65319: PUSH
65320: LD_VAR 0 1
65324: PPUSH
65325: CALL_OW 437
65329: PUSH
65330: LD_INT 1
65332: ARRAY
65333: PUSH
65334: LD_INT 2
65336: ARRAY
65337: EQUAL
65338: AND
65339: PUSH
65340: LD_VAR 0 5
65344: PUSH
65345: LD_VAR 0 1
65349: PPUSH
65350: CALL_OW 437
65354: PUSH
65355: LD_INT 1
65357: ARRAY
65358: PUSH
65359: LD_INT 3
65361: ARRAY
65362: EQUAL
65363: AND
65364: IFFALSE 65374
// result := true end ;
65366: LD_ADDR_VAR 0 3
65370: PUSH
65371: LD_INT 1
65373: ST_TO_ADDR
// end ;
65374: LD_VAR 0 3
65378: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65379: LD_INT 0
65381: PPUSH
// result := false ;
65382: LD_ADDR_VAR 0 4
65386: PUSH
65387: LD_INT 0
65389: ST_TO_ADDR
// if GetTaskList ( unit ) then
65390: LD_VAR 0 1
65394: PPUSH
65395: CALL_OW 437
65399: IFFALSE 65482
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65401: LD_STRING M
65403: PUSH
65404: LD_VAR 0 1
65408: PPUSH
65409: CALL_OW 437
65413: PUSH
65414: LD_INT 1
65416: ARRAY
65417: PUSH
65418: LD_INT 1
65420: ARRAY
65421: EQUAL
65422: PUSH
65423: LD_VAR 0 2
65427: PUSH
65428: LD_VAR 0 1
65432: PPUSH
65433: CALL_OW 437
65437: PUSH
65438: LD_INT 1
65440: ARRAY
65441: PUSH
65442: LD_INT 2
65444: ARRAY
65445: EQUAL
65446: AND
65447: PUSH
65448: LD_VAR 0 3
65452: PUSH
65453: LD_VAR 0 1
65457: PPUSH
65458: CALL_OW 437
65462: PUSH
65463: LD_INT 1
65465: ARRAY
65466: PUSH
65467: LD_INT 3
65469: ARRAY
65470: EQUAL
65471: AND
65472: IFFALSE 65482
// result := true ;
65474: LD_ADDR_VAR 0 4
65478: PUSH
65479: LD_INT 1
65481: ST_TO_ADDR
// end ; end ;
65482: LD_VAR 0 4
65486: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65487: LD_INT 0
65489: PPUSH
65490: PPUSH
65491: PPUSH
65492: PPUSH
// if not unit or not area then
65493: LD_VAR 0 1
65497: NOT
65498: PUSH
65499: LD_VAR 0 2
65503: NOT
65504: OR
65505: IFFALSE 65509
// exit ;
65507: GO 65673
// tmp := AreaToList ( area , i ) ;
65509: LD_ADDR_VAR 0 6
65513: PUSH
65514: LD_VAR 0 2
65518: PPUSH
65519: LD_VAR 0 5
65523: PPUSH
65524: CALL_OW 517
65528: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65529: LD_ADDR_VAR 0 5
65533: PUSH
65534: DOUBLE
65535: LD_INT 1
65537: DEC
65538: ST_TO_ADDR
65539: LD_VAR 0 6
65543: PUSH
65544: LD_INT 1
65546: ARRAY
65547: PUSH
65548: FOR_TO
65549: IFFALSE 65671
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65551: LD_ADDR_VAR 0 7
65555: PUSH
65556: LD_VAR 0 6
65560: PUSH
65561: LD_INT 1
65563: ARRAY
65564: PUSH
65565: LD_VAR 0 5
65569: ARRAY
65570: PUSH
65571: LD_VAR 0 6
65575: PUSH
65576: LD_INT 2
65578: ARRAY
65579: PUSH
65580: LD_VAR 0 5
65584: ARRAY
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65590: LD_VAR 0 7
65594: PUSH
65595: LD_INT 1
65597: ARRAY
65598: PPUSH
65599: LD_VAR 0 7
65603: PUSH
65604: LD_INT 2
65606: ARRAY
65607: PPUSH
65608: CALL_OW 428
65612: PUSH
65613: LD_INT 0
65615: EQUAL
65616: IFFALSE 65669
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65618: LD_VAR 0 1
65622: PPUSH
65623: LD_VAR 0 7
65627: PUSH
65628: LD_INT 1
65630: ARRAY
65631: PPUSH
65632: LD_VAR 0 7
65636: PUSH
65637: LD_INT 2
65639: ARRAY
65640: PPUSH
65641: LD_VAR 0 3
65645: PPUSH
65646: CALL_OW 48
// result := IsPlaced ( unit ) ;
65650: LD_ADDR_VAR 0 4
65654: PUSH
65655: LD_VAR 0 1
65659: PPUSH
65660: CALL_OW 305
65664: ST_TO_ADDR
// exit ;
65665: POP
65666: POP
65667: GO 65673
// end ; end ;
65669: GO 65548
65671: POP
65672: POP
// end ;
65673: LD_VAR 0 4
65677: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65678: LD_INT 0
65680: PPUSH
65681: PPUSH
65682: PPUSH
// if not side or side > 8 then
65683: LD_VAR 0 1
65687: NOT
65688: PUSH
65689: LD_VAR 0 1
65693: PUSH
65694: LD_INT 8
65696: GREATER
65697: OR
65698: IFFALSE 65702
// exit ;
65700: GO 65889
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65702: LD_ADDR_VAR 0 4
65706: PUSH
65707: LD_INT 22
65709: PUSH
65710: LD_VAR 0 1
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 21
65721: PUSH
65722: LD_INT 3
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PPUSH
65733: CALL_OW 69
65737: ST_TO_ADDR
// if not tmp then
65738: LD_VAR 0 4
65742: NOT
65743: IFFALSE 65747
// exit ;
65745: GO 65889
// enable_addtolog := true ;
65747: LD_ADDR_OWVAR 81
65751: PUSH
65752: LD_INT 1
65754: ST_TO_ADDR
// AddToLog ( [ ) ;
65755: LD_STRING [
65757: PPUSH
65758: CALL_OW 561
// for i in tmp do
65762: LD_ADDR_VAR 0 3
65766: PUSH
65767: LD_VAR 0 4
65771: PUSH
65772: FOR_IN
65773: IFFALSE 65880
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65775: LD_STRING [
65777: PUSH
65778: LD_VAR 0 3
65782: PPUSH
65783: CALL_OW 266
65787: STR
65788: PUSH
65789: LD_STRING , 
65791: STR
65792: PUSH
65793: LD_VAR 0 3
65797: PPUSH
65798: CALL_OW 250
65802: STR
65803: PUSH
65804: LD_STRING , 
65806: STR
65807: PUSH
65808: LD_VAR 0 3
65812: PPUSH
65813: CALL_OW 251
65817: STR
65818: PUSH
65819: LD_STRING , 
65821: STR
65822: PUSH
65823: LD_VAR 0 3
65827: PPUSH
65828: CALL_OW 254
65832: STR
65833: PUSH
65834: LD_STRING , 
65836: STR
65837: PUSH
65838: LD_VAR 0 3
65842: PPUSH
65843: LD_INT 1
65845: PPUSH
65846: CALL_OW 268
65850: STR
65851: PUSH
65852: LD_STRING , 
65854: STR
65855: PUSH
65856: LD_VAR 0 3
65860: PPUSH
65861: LD_INT 2
65863: PPUSH
65864: CALL_OW 268
65868: STR
65869: PUSH
65870: LD_STRING ],
65872: STR
65873: PPUSH
65874: CALL_OW 561
// end ;
65878: GO 65772
65880: POP
65881: POP
// AddToLog ( ]; ) ;
65882: LD_STRING ];
65884: PPUSH
65885: CALL_OW 561
// end ;
65889: LD_VAR 0 2
65893: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65894: LD_INT 0
65896: PPUSH
65897: PPUSH
65898: PPUSH
65899: PPUSH
65900: PPUSH
// if not area or not rate or not max then
65901: LD_VAR 0 1
65905: NOT
65906: PUSH
65907: LD_VAR 0 2
65911: NOT
65912: OR
65913: PUSH
65914: LD_VAR 0 4
65918: NOT
65919: OR
65920: IFFALSE 65924
// exit ;
65922: GO 66113
// while 1 do
65924: LD_INT 1
65926: IFFALSE 66113
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65928: LD_ADDR_VAR 0 9
65932: PUSH
65933: LD_VAR 0 1
65937: PPUSH
65938: LD_INT 1
65940: PPUSH
65941: CALL_OW 287
65945: PUSH
65946: LD_INT 10
65948: MUL
65949: ST_TO_ADDR
// r := rate / 10 ;
65950: LD_ADDR_VAR 0 7
65954: PUSH
65955: LD_VAR 0 2
65959: PUSH
65960: LD_INT 10
65962: DIVREAL
65963: ST_TO_ADDR
// time := 1 1$00 ;
65964: LD_ADDR_VAR 0 8
65968: PUSH
65969: LD_INT 2100
65971: ST_TO_ADDR
// if amount < min then
65972: LD_VAR 0 9
65976: PUSH
65977: LD_VAR 0 3
65981: LESS
65982: IFFALSE 66000
// r := r * 2 else
65984: LD_ADDR_VAR 0 7
65988: PUSH
65989: LD_VAR 0 7
65993: PUSH
65994: LD_INT 2
65996: MUL
65997: ST_TO_ADDR
65998: GO 66026
// if amount > max then
66000: LD_VAR 0 9
66004: PUSH
66005: LD_VAR 0 4
66009: GREATER
66010: IFFALSE 66026
// r := r / 2 ;
66012: LD_ADDR_VAR 0 7
66016: PUSH
66017: LD_VAR 0 7
66021: PUSH
66022: LD_INT 2
66024: DIVREAL
66025: ST_TO_ADDR
// time := time / r ;
66026: LD_ADDR_VAR 0 8
66030: PUSH
66031: LD_VAR 0 8
66035: PUSH
66036: LD_VAR 0 7
66040: DIVREAL
66041: ST_TO_ADDR
// if time < 0 then
66042: LD_VAR 0 8
66046: PUSH
66047: LD_INT 0
66049: LESS
66050: IFFALSE 66067
// time := time * - 1 ;
66052: LD_ADDR_VAR 0 8
66056: PUSH
66057: LD_VAR 0 8
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: MUL
66066: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66067: LD_VAR 0 8
66071: PUSH
66072: LD_INT 35
66074: PPUSH
66075: LD_INT 875
66077: PPUSH
66078: CALL_OW 12
66082: PLUS
66083: PPUSH
66084: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66088: LD_INT 1
66090: PPUSH
66091: LD_INT 5
66093: PPUSH
66094: CALL_OW 12
66098: PPUSH
66099: LD_VAR 0 1
66103: PPUSH
66104: LD_INT 1
66106: PPUSH
66107: CALL_OW 55
// end ;
66111: GO 65924
// end ;
66113: LD_VAR 0 5
66117: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66118: LD_INT 0
66120: PPUSH
66121: PPUSH
66122: PPUSH
66123: PPUSH
66124: PPUSH
66125: PPUSH
66126: PPUSH
66127: PPUSH
// if not turrets or not factories then
66128: LD_VAR 0 1
66132: NOT
66133: PUSH
66134: LD_VAR 0 2
66138: NOT
66139: OR
66140: IFFALSE 66144
// exit ;
66142: GO 66451
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66144: LD_ADDR_VAR 0 10
66148: PUSH
66149: LD_INT 5
66151: PUSH
66152: LD_INT 6
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 2
66161: PUSH
66162: LD_INT 4
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 3
66171: PUSH
66172: LD_INT 5
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 24
66186: PUSH
66187: LD_INT 25
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 23
66196: PUSH
66197: LD_INT 27
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 42
66210: PUSH
66211: LD_INT 43
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 44
66220: PUSH
66221: LD_INT 46
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 45
66230: PUSH
66231: LD_INT 47
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: ST_TO_ADDR
// result := [ ] ;
66248: LD_ADDR_VAR 0 3
66252: PUSH
66253: EMPTY
66254: ST_TO_ADDR
// for i in turrets do
66255: LD_ADDR_VAR 0 4
66259: PUSH
66260: LD_VAR 0 1
66264: PUSH
66265: FOR_IN
66266: IFFALSE 66449
// begin nat := GetNation ( i ) ;
66268: LD_ADDR_VAR 0 7
66272: PUSH
66273: LD_VAR 0 4
66277: PPUSH
66278: CALL_OW 248
66282: ST_TO_ADDR
// weapon := 0 ;
66283: LD_ADDR_VAR 0 8
66287: PUSH
66288: LD_INT 0
66290: ST_TO_ADDR
// if not nat then
66291: LD_VAR 0 7
66295: NOT
66296: IFFALSE 66300
// continue ;
66298: GO 66265
// for j in list [ nat ] do
66300: LD_ADDR_VAR 0 5
66304: PUSH
66305: LD_VAR 0 10
66309: PUSH
66310: LD_VAR 0 7
66314: ARRAY
66315: PUSH
66316: FOR_IN
66317: IFFALSE 66358
// if GetBWeapon ( i ) = j [ 1 ] then
66319: LD_VAR 0 4
66323: PPUSH
66324: CALL_OW 269
66328: PUSH
66329: LD_VAR 0 5
66333: PUSH
66334: LD_INT 1
66336: ARRAY
66337: EQUAL
66338: IFFALSE 66356
// begin weapon := j [ 2 ] ;
66340: LD_ADDR_VAR 0 8
66344: PUSH
66345: LD_VAR 0 5
66349: PUSH
66350: LD_INT 2
66352: ARRAY
66353: ST_TO_ADDR
// break ;
66354: GO 66358
// end ;
66356: GO 66316
66358: POP
66359: POP
// if not weapon then
66360: LD_VAR 0 8
66364: NOT
66365: IFFALSE 66369
// continue ;
66367: GO 66265
// for k in factories do
66369: LD_ADDR_VAR 0 6
66373: PUSH
66374: LD_VAR 0 2
66378: PUSH
66379: FOR_IN
66380: IFFALSE 66445
// begin weapons := AvailableWeaponList ( k ) ;
66382: LD_ADDR_VAR 0 9
66386: PUSH
66387: LD_VAR 0 6
66391: PPUSH
66392: CALL_OW 478
66396: ST_TO_ADDR
// if not weapons then
66397: LD_VAR 0 9
66401: NOT
66402: IFFALSE 66406
// continue ;
66404: GO 66379
// if weapon in weapons then
66406: LD_VAR 0 8
66410: PUSH
66411: LD_VAR 0 9
66415: IN
66416: IFFALSE 66443
// begin result := [ i , weapon ] ;
66418: LD_ADDR_VAR 0 3
66422: PUSH
66423: LD_VAR 0 4
66427: PUSH
66428: LD_VAR 0 8
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: ST_TO_ADDR
// exit ;
66437: POP
66438: POP
66439: POP
66440: POP
66441: GO 66451
// end ; end ;
66443: GO 66379
66445: POP
66446: POP
// end ;
66447: GO 66265
66449: POP
66450: POP
// end ;
66451: LD_VAR 0 3
66455: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66456: LD_INT 0
66458: PPUSH
// if not side or side > 8 then
66459: LD_VAR 0 3
66463: NOT
66464: PUSH
66465: LD_VAR 0 3
66469: PUSH
66470: LD_INT 8
66472: GREATER
66473: OR
66474: IFFALSE 66478
// exit ;
66476: GO 66537
// if not range then
66478: LD_VAR 0 4
66482: NOT
66483: IFFALSE 66494
// range := - 12 ;
66485: LD_ADDR_VAR 0 4
66489: PUSH
66490: LD_INT 12
66492: NEG
66493: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66494: LD_VAR 0 1
66498: PPUSH
66499: LD_VAR 0 2
66503: PPUSH
66504: LD_VAR 0 3
66508: PPUSH
66509: LD_VAR 0 4
66513: PPUSH
66514: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66518: LD_VAR 0 1
66522: PPUSH
66523: LD_VAR 0 2
66527: PPUSH
66528: LD_VAR 0 3
66532: PPUSH
66533: CALL_OW 331
// end ;
66537: LD_VAR 0 5
66541: RET
// export function Video ( mode ) ; begin
66542: LD_INT 0
66544: PPUSH
// ingame_video = mode ;
66545: LD_ADDR_OWVAR 52
66549: PUSH
66550: LD_VAR 0 1
66554: ST_TO_ADDR
// interface_hidden = mode ;
66555: LD_ADDR_OWVAR 54
66559: PUSH
66560: LD_VAR 0 1
66564: ST_TO_ADDR
// end ;
66565: LD_VAR 0 2
66569: RET
// export function Join ( array , element ) ; begin
66570: LD_INT 0
66572: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66573: LD_ADDR_VAR 0 3
66577: PUSH
66578: LD_VAR 0 1
66582: PPUSH
66583: LD_VAR 0 1
66587: PUSH
66588: LD_INT 1
66590: PLUS
66591: PPUSH
66592: LD_VAR 0 2
66596: PPUSH
66597: CALL_OW 1
66601: ST_TO_ADDR
// end ;
66602: LD_VAR 0 3
66606: RET
// export function JoinUnion ( array , element ) ; begin
66607: LD_INT 0
66609: PPUSH
// result := array union element ;
66610: LD_ADDR_VAR 0 3
66614: PUSH
66615: LD_VAR 0 1
66619: PUSH
66620: LD_VAR 0 2
66624: UNION
66625: ST_TO_ADDR
// end ;
66626: LD_VAR 0 3
66630: RET
// export function GetBehemoths ( side ) ; begin
66631: LD_INT 0
66633: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66634: LD_ADDR_VAR 0 2
66638: PUSH
66639: LD_INT 22
66641: PUSH
66642: LD_VAR 0 1
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 31
66653: PUSH
66654: LD_INT 25
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PPUSH
66665: CALL_OW 69
66669: ST_TO_ADDR
// end ;
66670: LD_VAR 0 2
66674: RET
// export function Shuffle ( array ) ; var i , index ; begin
66675: LD_INT 0
66677: PPUSH
66678: PPUSH
66679: PPUSH
// result := [ ] ;
66680: LD_ADDR_VAR 0 2
66684: PUSH
66685: EMPTY
66686: ST_TO_ADDR
// if not array then
66687: LD_VAR 0 1
66691: NOT
66692: IFFALSE 66696
// exit ;
66694: GO 66795
// Randomize ;
66696: CALL_OW 10
// for i = array downto 1 do
66700: LD_ADDR_VAR 0 3
66704: PUSH
66705: DOUBLE
66706: LD_VAR 0 1
66710: INC
66711: ST_TO_ADDR
66712: LD_INT 1
66714: PUSH
66715: FOR_DOWNTO
66716: IFFALSE 66793
// begin index := rand ( 1 , array ) ;
66718: LD_ADDR_VAR 0 4
66722: PUSH
66723: LD_INT 1
66725: PPUSH
66726: LD_VAR 0 1
66730: PPUSH
66731: CALL_OW 12
66735: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66736: LD_ADDR_VAR 0 2
66740: PUSH
66741: LD_VAR 0 2
66745: PPUSH
66746: LD_VAR 0 2
66750: PUSH
66751: LD_INT 1
66753: PLUS
66754: PPUSH
66755: LD_VAR 0 1
66759: PUSH
66760: LD_VAR 0 4
66764: ARRAY
66765: PPUSH
66766: CALL_OW 2
66770: ST_TO_ADDR
// array := Delete ( array , index ) ;
66771: LD_ADDR_VAR 0 1
66775: PUSH
66776: LD_VAR 0 1
66780: PPUSH
66781: LD_VAR 0 4
66785: PPUSH
66786: CALL_OW 3
66790: ST_TO_ADDR
// end ;
66791: GO 66715
66793: POP
66794: POP
// end ;
66795: LD_VAR 0 2
66799: RET
// export function GetBaseMaterials ( base ) ; begin
66800: LD_INT 0
66802: PPUSH
// result := [ 0 , 0 , 0 ] ;
66803: LD_ADDR_VAR 0 2
66807: PUSH
66808: LD_INT 0
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: LD_INT 0
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: LIST
66821: ST_TO_ADDR
// if not base then
66822: LD_VAR 0 1
66826: NOT
66827: IFFALSE 66831
// exit ;
66829: GO 66880
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66831: LD_ADDR_VAR 0 2
66835: PUSH
66836: LD_VAR 0 1
66840: PPUSH
66841: LD_INT 1
66843: PPUSH
66844: CALL_OW 275
66848: PUSH
66849: LD_VAR 0 1
66853: PPUSH
66854: LD_INT 2
66856: PPUSH
66857: CALL_OW 275
66861: PUSH
66862: LD_VAR 0 1
66866: PPUSH
66867: LD_INT 3
66869: PPUSH
66870: CALL_OW 275
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: LIST
66879: ST_TO_ADDR
// end ;
66880: LD_VAR 0 2
66884: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66885: LD_INT 0
66887: PPUSH
66888: PPUSH
// result := array ;
66889: LD_ADDR_VAR 0 3
66893: PUSH
66894: LD_VAR 0 1
66898: ST_TO_ADDR
// if size >= result then
66899: LD_VAR 0 2
66903: PUSH
66904: LD_VAR 0 3
66908: GREATEREQUAL
66909: IFFALSE 66913
// exit ;
66911: GO 66963
// if size then
66913: LD_VAR 0 2
66917: IFFALSE 66963
// for i := array downto size do
66919: LD_ADDR_VAR 0 4
66923: PUSH
66924: DOUBLE
66925: LD_VAR 0 1
66929: INC
66930: ST_TO_ADDR
66931: LD_VAR 0 2
66935: PUSH
66936: FOR_DOWNTO
66937: IFFALSE 66961
// result := Delete ( result , result ) ;
66939: LD_ADDR_VAR 0 3
66943: PUSH
66944: LD_VAR 0 3
66948: PPUSH
66949: LD_VAR 0 3
66953: PPUSH
66954: CALL_OW 3
66958: ST_TO_ADDR
66959: GO 66936
66961: POP
66962: POP
// end ;
66963: LD_VAR 0 3
66967: RET
// export function ComExit ( unit ) ; var tmp ; begin
66968: LD_INT 0
66970: PPUSH
66971: PPUSH
// if not IsInUnit ( unit ) then
66972: LD_VAR 0 1
66976: PPUSH
66977: CALL_OW 310
66981: NOT
66982: IFFALSE 66986
// exit ;
66984: GO 67046
// tmp := IsInUnit ( unit ) ;
66986: LD_ADDR_VAR 0 3
66990: PUSH
66991: LD_VAR 0 1
66995: PPUSH
66996: CALL_OW 310
67000: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67001: LD_VAR 0 3
67005: PPUSH
67006: CALL_OW 247
67010: PUSH
67011: LD_INT 2
67013: EQUAL
67014: IFFALSE 67027
// ComExitVehicle ( unit ) else
67016: LD_VAR 0 1
67020: PPUSH
67021: CALL_OW 121
67025: GO 67036
// ComExitBuilding ( unit ) ;
67027: LD_VAR 0 1
67031: PPUSH
67032: CALL_OW 122
// result := tmp ;
67036: LD_ADDR_VAR 0 2
67040: PUSH
67041: LD_VAR 0 3
67045: ST_TO_ADDR
// end ;
67046: LD_VAR 0 2
67050: RET
// export function ComExitAll ( units ) ; var i ; begin
67051: LD_INT 0
67053: PPUSH
67054: PPUSH
// if not units then
67055: LD_VAR 0 1
67059: NOT
67060: IFFALSE 67064
// exit ;
67062: GO 67090
// for i in units do
67064: LD_ADDR_VAR 0 3
67068: PUSH
67069: LD_VAR 0 1
67073: PUSH
67074: FOR_IN
67075: IFFALSE 67088
// ComExit ( i ) ;
67077: LD_VAR 0 3
67081: PPUSH
67082: CALL 66968 0 1
67086: GO 67074
67088: POP
67089: POP
// end ;
67090: LD_VAR 0 2
67094: RET
// export function ResetHc ; begin
67095: LD_INT 0
67097: PPUSH
// InitHc ;
67098: CALL_OW 19
// hc_importance := 0 ;
67102: LD_ADDR_OWVAR 32
67106: PUSH
67107: LD_INT 0
67109: ST_TO_ADDR
// end ;
67110: LD_VAR 0 1
67114: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67115: LD_INT 0
67117: PPUSH
67118: PPUSH
67119: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67120: LD_ADDR_VAR 0 6
67124: PUSH
67125: LD_VAR 0 1
67129: PUSH
67130: LD_VAR 0 3
67134: PLUS
67135: PUSH
67136: LD_INT 2
67138: DIV
67139: ST_TO_ADDR
// if _x < 0 then
67140: LD_VAR 0 6
67144: PUSH
67145: LD_INT 0
67147: LESS
67148: IFFALSE 67165
// _x := _x * - 1 ;
67150: LD_ADDR_VAR 0 6
67154: PUSH
67155: LD_VAR 0 6
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: MUL
67164: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67165: LD_ADDR_VAR 0 7
67169: PUSH
67170: LD_VAR 0 2
67174: PUSH
67175: LD_VAR 0 4
67179: PLUS
67180: PUSH
67181: LD_INT 2
67183: DIV
67184: ST_TO_ADDR
// if _y < 0 then
67185: LD_VAR 0 7
67189: PUSH
67190: LD_INT 0
67192: LESS
67193: IFFALSE 67210
// _y := _y * - 1 ;
67195: LD_ADDR_VAR 0 7
67199: PUSH
67200: LD_VAR 0 7
67204: PUSH
67205: LD_INT 1
67207: NEG
67208: MUL
67209: ST_TO_ADDR
// result := [ _x , _y ] ;
67210: LD_ADDR_VAR 0 5
67214: PUSH
67215: LD_VAR 0 6
67219: PUSH
67220: LD_VAR 0 7
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: ST_TO_ADDR
// end ;
67229: LD_VAR 0 5
67233: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67234: LD_INT 0
67236: PPUSH
67237: PPUSH
67238: PPUSH
67239: PPUSH
// task := GetTaskList ( unit ) ;
67240: LD_ADDR_VAR 0 7
67244: PUSH
67245: LD_VAR 0 1
67249: PPUSH
67250: CALL_OW 437
67254: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67255: LD_VAR 0 7
67259: NOT
67260: PUSH
67261: LD_VAR 0 1
67265: PPUSH
67266: LD_VAR 0 2
67270: PPUSH
67271: CALL_OW 308
67275: NOT
67276: AND
67277: IFFALSE 67281
// exit ;
67279: GO 67399
// if IsInArea ( unit , area ) then
67281: LD_VAR 0 1
67285: PPUSH
67286: LD_VAR 0 2
67290: PPUSH
67291: CALL_OW 308
67295: IFFALSE 67313
// begin ComMoveToArea ( unit , goAway ) ;
67297: LD_VAR 0 1
67301: PPUSH
67302: LD_VAR 0 3
67306: PPUSH
67307: CALL_OW 113
// exit ;
67311: GO 67399
// end ; if task [ 1 ] [ 1 ] <> M then
67313: LD_VAR 0 7
67317: PUSH
67318: LD_INT 1
67320: ARRAY
67321: PUSH
67322: LD_INT 1
67324: ARRAY
67325: PUSH
67326: LD_STRING M
67328: NONEQUAL
67329: IFFALSE 67333
// exit ;
67331: GO 67399
// x := task [ 1 ] [ 2 ] ;
67333: LD_ADDR_VAR 0 5
67337: PUSH
67338: LD_VAR 0 7
67342: PUSH
67343: LD_INT 1
67345: ARRAY
67346: PUSH
67347: LD_INT 2
67349: ARRAY
67350: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67351: LD_ADDR_VAR 0 6
67355: PUSH
67356: LD_VAR 0 7
67360: PUSH
67361: LD_INT 1
67363: ARRAY
67364: PUSH
67365: LD_INT 3
67367: ARRAY
67368: ST_TO_ADDR
// if InArea ( x , y , area ) then
67369: LD_VAR 0 5
67373: PPUSH
67374: LD_VAR 0 6
67378: PPUSH
67379: LD_VAR 0 2
67383: PPUSH
67384: CALL_OW 309
67388: IFFALSE 67399
// ComStop ( unit ) ;
67390: LD_VAR 0 1
67394: PPUSH
67395: CALL_OW 141
// end ;
67399: LD_VAR 0 4
67403: RET
// export function Abs ( value ) ; begin
67404: LD_INT 0
67406: PPUSH
// result := value ;
67407: LD_ADDR_VAR 0 2
67411: PUSH
67412: LD_VAR 0 1
67416: ST_TO_ADDR
// if value < 0 then
67417: LD_VAR 0 1
67421: PUSH
67422: LD_INT 0
67424: LESS
67425: IFFALSE 67442
// result := value * - 1 ;
67427: LD_ADDR_VAR 0 2
67431: PUSH
67432: LD_VAR 0 1
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: MUL
67441: ST_TO_ADDR
// end ;
67442: LD_VAR 0 2
67446: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67447: LD_INT 0
67449: PPUSH
67450: PPUSH
67451: PPUSH
67452: PPUSH
67453: PPUSH
67454: PPUSH
67455: PPUSH
67456: PPUSH
// if not unit or not building then
67457: LD_VAR 0 1
67461: NOT
67462: PUSH
67463: LD_VAR 0 2
67467: NOT
67468: OR
67469: IFFALSE 67473
// exit ;
67471: GO 67699
// x := GetX ( building ) ;
67473: LD_ADDR_VAR 0 4
67477: PUSH
67478: LD_VAR 0 2
67482: PPUSH
67483: CALL_OW 250
67487: ST_TO_ADDR
// y := GetY ( building ) ;
67488: LD_ADDR_VAR 0 6
67492: PUSH
67493: LD_VAR 0 2
67497: PPUSH
67498: CALL_OW 251
67502: ST_TO_ADDR
// d := GetDir ( building ) ;
67503: LD_ADDR_VAR 0 8
67507: PUSH
67508: LD_VAR 0 2
67512: PPUSH
67513: CALL_OW 254
67517: ST_TO_ADDR
// r := 4 ;
67518: LD_ADDR_VAR 0 9
67522: PUSH
67523: LD_INT 4
67525: ST_TO_ADDR
// for i := 1 to 5 do
67526: LD_ADDR_VAR 0 10
67530: PUSH
67531: DOUBLE
67532: LD_INT 1
67534: DEC
67535: ST_TO_ADDR
67536: LD_INT 5
67538: PUSH
67539: FOR_TO
67540: IFFALSE 67697
// begin _x := ShiftX ( x , d , r + i ) ;
67542: LD_ADDR_VAR 0 5
67546: PUSH
67547: LD_VAR 0 4
67551: PPUSH
67552: LD_VAR 0 8
67556: PPUSH
67557: LD_VAR 0 9
67561: PUSH
67562: LD_VAR 0 10
67566: PLUS
67567: PPUSH
67568: CALL_OW 272
67572: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67573: LD_ADDR_VAR 0 7
67577: PUSH
67578: LD_VAR 0 6
67582: PPUSH
67583: LD_VAR 0 8
67587: PPUSH
67588: LD_VAR 0 9
67592: PUSH
67593: LD_VAR 0 10
67597: PLUS
67598: PPUSH
67599: CALL_OW 273
67603: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67604: LD_VAR 0 5
67608: PPUSH
67609: LD_VAR 0 7
67613: PPUSH
67614: CALL_OW 488
67618: PUSH
67619: LD_VAR 0 5
67623: PPUSH
67624: LD_VAR 0 7
67628: PPUSH
67629: CALL_OW 428
67633: PPUSH
67634: CALL_OW 247
67638: PUSH
67639: LD_INT 3
67641: PUSH
67642: LD_INT 2
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: IN
67649: NOT
67650: AND
67651: IFFALSE 67695
// begin ComMoveXY ( unit , _x , _y ) ;
67653: LD_VAR 0 1
67657: PPUSH
67658: LD_VAR 0 5
67662: PPUSH
67663: LD_VAR 0 7
67667: PPUSH
67668: CALL_OW 111
// result := [ _x , _y ] ;
67672: LD_ADDR_VAR 0 3
67676: PUSH
67677: LD_VAR 0 5
67681: PUSH
67682: LD_VAR 0 7
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: ST_TO_ADDR
// exit ;
67691: POP
67692: POP
67693: GO 67699
// end ; end ;
67695: GO 67539
67697: POP
67698: POP
// end ;
67699: LD_VAR 0 3
67703: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67704: LD_INT 0
67706: PPUSH
67707: PPUSH
67708: PPUSH
// result := 0 ;
67709: LD_ADDR_VAR 0 3
67713: PUSH
67714: LD_INT 0
67716: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67717: LD_VAR 0 1
67721: PUSH
67722: LD_INT 0
67724: LESS
67725: PUSH
67726: LD_VAR 0 1
67730: PUSH
67731: LD_INT 8
67733: GREATER
67734: OR
67735: PUSH
67736: LD_VAR 0 2
67740: PUSH
67741: LD_INT 0
67743: LESS
67744: OR
67745: PUSH
67746: LD_VAR 0 2
67750: PUSH
67751: LD_INT 8
67753: GREATER
67754: OR
67755: IFFALSE 67759
// exit ;
67757: GO 67834
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67759: LD_ADDR_VAR 0 4
67763: PUSH
67764: LD_INT 22
67766: PUSH
67767: LD_VAR 0 2
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PPUSH
67776: CALL_OW 69
67780: PUSH
67781: FOR_IN
67782: IFFALSE 67832
// begin un := UnitShoot ( i ) ;
67784: LD_ADDR_VAR 0 5
67788: PUSH
67789: LD_VAR 0 4
67793: PPUSH
67794: CALL_OW 504
67798: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67799: LD_VAR 0 5
67803: PPUSH
67804: CALL_OW 255
67808: PUSH
67809: LD_VAR 0 1
67813: EQUAL
67814: IFFALSE 67830
// begin result := un ;
67816: LD_ADDR_VAR 0 3
67820: PUSH
67821: LD_VAR 0 5
67825: ST_TO_ADDR
// exit ;
67826: POP
67827: POP
67828: GO 67834
// end ; end ;
67830: GO 67781
67832: POP
67833: POP
// end ;
67834: LD_VAR 0 3
67838: RET
// export function GetCargoBay ( units ) ; begin
67839: LD_INT 0
67841: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67842: LD_ADDR_VAR 0 2
67846: PUSH
67847: LD_VAR 0 1
67851: PPUSH
67852: LD_INT 2
67854: PUSH
67855: LD_INT 34
67857: PUSH
67858: LD_INT 12
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 34
67867: PUSH
67868: LD_INT 51
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 34
67877: PUSH
67878: LD_INT 32
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 34
67887: PUSH
67888: LD_INT 89
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: PPUSH
67902: CALL_OW 72
67906: ST_TO_ADDR
// end ;
67907: LD_VAR 0 2
67911: RET
// export function Negate ( value ) ; begin
67912: LD_INT 0
67914: PPUSH
// result := not value ;
67915: LD_ADDR_VAR 0 2
67919: PUSH
67920: LD_VAR 0 1
67924: NOT
67925: ST_TO_ADDR
// end ;
67926: LD_VAR 0 2
67930: RET
// export function Inc ( value ) ; begin
67931: LD_INT 0
67933: PPUSH
// result := value + 1 ;
67934: LD_ADDR_VAR 0 2
67938: PUSH
67939: LD_VAR 0 1
67943: PUSH
67944: LD_INT 1
67946: PLUS
67947: ST_TO_ADDR
// end ;
67948: LD_VAR 0 2
67952: RET
// export function Dec ( value ) ; begin
67953: LD_INT 0
67955: PPUSH
// result := value - 1 ;
67956: LD_ADDR_VAR 0 2
67960: PUSH
67961: LD_VAR 0 1
67965: PUSH
67966: LD_INT 1
67968: MINUS
67969: ST_TO_ADDR
// end ;
67970: LD_VAR 0 2
67974: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67975: LD_INT 0
67977: PPUSH
67978: PPUSH
67979: PPUSH
67980: PPUSH
67981: PPUSH
67982: PPUSH
67983: PPUSH
67984: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67985: LD_VAR 0 1
67989: PPUSH
67990: LD_VAR 0 2
67994: PPUSH
67995: CALL_OW 488
67999: NOT
68000: PUSH
68001: LD_VAR 0 3
68005: PPUSH
68006: LD_VAR 0 4
68010: PPUSH
68011: CALL_OW 488
68015: NOT
68016: OR
68017: IFFALSE 68030
// begin result := - 1 ;
68019: LD_ADDR_VAR 0 5
68023: PUSH
68024: LD_INT 1
68026: NEG
68027: ST_TO_ADDR
// exit ;
68028: GO 68265
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68030: LD_ADDR_VAR 0 12
68034: PUSH
68035: LD_VAR 0 1
68039: PPUSH
68040: LD_VAR 0 2
68044: PPUSH
68045: LD_VAR 0 3
68049: PPUSH
68050: LD_VAR 0 4
68054: PPUSH
68055: CALL 67115 0 4
68059: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68060: LD_ADDR_VAR 0 11
68064: PUSH
68065: LD_VAR 0 1
68069: PPUSH
68070: LD_VAR 0 2
68074: PPUSH
68075: LD_VAR 0 12
68079: PUSH
68080: LD_INT 1
68082: ARRAY
68083: PPUSH
68084: LD_VAR 0 12
68088: PUSH
68089: LD_INT 2
68091: ARRAY
68092: PPUSH
68093: CALL_OW 298
68097: ST_TO_ADDR
// distance := 9999 ;
68098: LD_ADDR_VAR 0 10
68102: PUSH
68103: LD_INT 9999
68105: ST_TO_ADDR
// for i := 0 to 5 do
68106: LD_ADDR_VAR 0 6
68110: PUSH
68111: DOUBLE
68112: LD_INT 0
68114: DEC
68115: ST_TO_ADDR
68116: LD_INT 5
68118: PUSH
68119: FOR_TO
68120: IFFALSE 68263
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68122: LD_ADDR_VAR 0 7
68126: PUSH
68127: LD_VAR 0 1
68131: PPUSH
68132: LD_VAR 0 6
68136: PPUSH
68137: LD_VAR 0 11
68141: PPUSH
68142: CALL_OW 272
68146: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68147: LD_ADDR_VAR 0 8
68151: PUSH
68152: LD_VAR 0 2
68156: PPUSH
68157: LD_VAR 0 6
68161: PPUSH
68162: LD_VAR 0 11
68166: PPUSH
68167: CALL_OW 273
68171: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68172: LD_VAR 0 7
68176: PPUSH
68177: LD_VAR 0 8
68181: PPUSH
68182: CALL_OW 488
68186: NOT
68187: IFFALSE 68191
// continue ;
68189: GO 68119
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68191: LD_ADDR_VAR 0 9
68195: PUSH
68196: LD_VAR 0 12
68200: PUSH
68201: LD_INT 1
68203: ARRAY
68204: PPUSH
68205: LD_VAR 0 12
68209: PUSH
68210: LD_INT 2
68212: ARRAY
68213: PPUSH
68214: LD_VAR 0 7
68218: PPUSH
68219: LD_VAR 0 8
68223: PPUSH
68224: CALL_OW 298
68228: ST_TO_ADDR
// if tmp < distance then
68229: LD_VAR 0 9
68233: PUSH
68234: LD_VAR 0 10
68238: LESS
68239: IFFALSE 68261
// begin result := i ;
68241: LD_ADDR_VAR 0 5
68245: PUSH
68246: LD_VAR 0 6
68250: ST_TO_ADDR
// distance := tmp ;
68251: LD_ADDR_VAR 0 10
68255: PUSH
68256: LD_VAR 0 9
68260: ST_TO_ADDR
// end ; end ;
68261: GO 68119
68263: POP
68264: POP
// end ;
68265: LD_VAR 0 5
68269: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68270: LD_INT 0
68272: PPUSH
68273: PPUSH
// if not driver or not IsInUnit ( driver ) then
68274: LD_VAR 0 1
68278: NOT
68279: PUSH
68280: LD_VAR 0 1
68284: PPUSH
68285: CALL_OW 310
68289: NOT
68290: OR
68291: IFFALSE 68295
// exit ;
68293: GO 68385
// vehicle := IsInUnit ( driver ) ;
68295: LD_ADDR_VAR 0 3
68299: PUSH
68300: LD_VAR 0 1
68304: PPUSH
68305: CALL_OW 310
68309: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68310: LD_VAR 0 1
68314: PPUSH
68315: LD_STRING \
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: LD_INT 0
68329: PUSH
68330: LD_INT 0
68332: PUSH
68333: LD_INT 0
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: PUSH
68345: LD_STRING E
68347: PUSH
68348: LD_INT 0
68350: PUSH
68351: LD_INT 0
68353: PUSH
68354: LD_VAR 0 3
68358: PUSH
68359: LD_INT 0
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: LD_INT 0
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PPUSH
68381: CALL_OW 446
// end ;
68385: LD_VAR 0 2
68389: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68390: LD_INT 0
68392: PPUSH
68393: PPUSH
// if not driver or not IsInUnit ( driver ) then
68394: LD_VAR 0 1
68398: NOT
68399: PUSH
68400: LD_VAR 0 1
68404: PPUSH
68405: CALL_OW 310
68409: NOT
68410: OR
68411: IFFALSE 68415
// exit ;
68413: GO 68505
// vehicle := IsInUnit ( driver ) ;
68415: LD_ADDR_VAR 0 3
68419: PUSH
68420: LD_VAR 0 1
68424: PPUSH
68425: CALL_OW 310
68429: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68430: LD_VAR 0 1
68434: PPUSH
68435: LD_STRING \
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: LD_INT 0
68449: PUSH
68450: LD_INT 0
68452: PUSH
68453: LD_INT 0
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: PUSH
68465: LD_STRING E
68467: PUSH
68468: LD_INT 0
68470: PUSH
68471: LD_INT 0
68473: PUSH
68474: LD_VAR 0 3
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: LD_INT 0
68484: PUSH
68485: LD_INT 0
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PPUSH
68501: CALL_OW 447
// end ;
68505: LD_VAR 0 2
68509: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68510: LD_INT 0
68512: PPUSH
68513: PPUSH
68514: PPUSH
// tmp := [ ] ;
68515: LD_ADDR_VAR 0 5
68519: PUSH
68520: EMPTY
68521: ST_TO_ADDR
// for i in units do
68522: LD_ADDR_VAR 0 4
68526: PUSH
68527: LD_VAR 0 1
68531: PUSH
68532: FOR_IN
68533: IFFALSE 68571
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68535: LD_ADDR_VAR 0 5
68539: PUSH
68540: LD_VAR 0 5
68544: PPUSH
68545: LD_VAR 0 5
68549: PUSH
68550: LD_INT 1
68552: PLUS
68553: PPUSH
68554: LD_VAR 0 4
68558: PPUSH
68559: CALL_OW 256
68563: PPUSH
68564: CALL_OW 2
68568: ST_TO_ADDR
68569: GO 68532
68571: POP
68572: POP
// if not tmp then
68573: LD_VAR 0 5
68577: NOT
68578: IFFALSE 68582
// exit ;
68580: GO 68630
// if asc then
68582: LD_VAR 0 2
68586: IFFALSE 68610
// result := SortListByListAsc ( units , tmp ) else
68588: LD_ADDR_VAR 0 3
68592: PUSH
68593: LD_VAR 0 1
68597: PPUSH
68598: LD_VAR 0 5
68602: PPUSH
68603: CALL_OW 76
68607: ST_TO_ADDR
68608: GO 68630
// result := SortListByListDesc ( units , tmp ) ;
68610: LD_ADDR_VAR 0 3
68614: PUSH
68615: LD_VAR 0 1
68619: PPUSH
68620: LD_VAR 0 5
68624: PPUSH
68625: CALL_OW 77
68629: ST_TO_ADDR
// end ;
68630: LD_VAR 0 3
68634: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68635: LD_INT 0
68637: PPUSH
68638: PPUSH
// task := GetTaskList ( mech ) ;
68639: LD_ADDR_VAR 0 4
68643: PUSH
68644: LD_VAR 0 1
68648: PPUSH
68649: CALL_OW 437
68653: ST_TO_ADDR
// if not task then
68654: LD_VAR 0 4
68658: NOT
68659: IFFALSE 68663
// exit ;
68661: GO 68705
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68663: LD_ADDR_VAR 0 3
68667: PUSH
68668: LD_VAR 0 4
68672: PUSH
68673: LD_INT 1
68675: ARRAY
68676: PUSH
68677: LD_INT 1
68679: ARRAY
68680: PUSH
68681: LD_STRING r
68683: EQUAL
68684: PUSH
68685: LD_VAR 0 4
68689: PUSH
68690: LD_INT 1
68692: ARRAY
68693: PUSH
68694: LD_INT 4
68696: ARRAY
68697: PUSH
68698: LD_VAR 0 2
68702: EQUAL
68703: AND
68704: ST_TO_ADDR
// end ;
68705: LD_VAR 0 3
68709: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68710: LD_INT 0
68712: PPUSH
// SetDir ( unit , d ) ;
68713: LD_VAR 0 1
68717: PPUSH
68718: LD_VAR 0 4
68722: PPUSH
68723: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68727: LD_VAR 0 1
68731: PPUSH
68732: LD_VAR 0 2
68736: PPUSH
68737: LD_VAR 0 3
68741: PPUSH
68742: LD_VAR 0 5
68746: PPUSH
68747: CALL_OW 48
// end ;
68751: LD_VAR 0 6
68755: RET
// export function ToNaturalNumber ( number ) ; begin
68756: LD_INT 0
68758: PPUSH
// result := number div 1 ;
68759: LD_ADDR_VAR 0 2
68763: PUSH
68764: LD_VAR 0 1
68768: PUSH
68769: LD_INT 1
68771: DIV
68772: ST_TO_ADDR
// if number < 0 then
68773: LD_VAR 0 1
68777: PUSH
68778: LD_INT 0
68780: LESS
68781: IFFALSE 68791
// result := 0 ;
68783: LD_ADDR_VAR 0 2
68787: PUSH
68788: LD_INT 0
68790: ST_TO_ADDR
// end ;
68791: LD_VAR 0 2
68795: RET
// export function SortByClass ( units , class ) ; var un ; begin
68796: LD_INT 0
68798: PPUSH
68799: PPUSH
// if not units or not class then
68800: LD_VAR 0 1
68804: NOT
68805: PUSH
68806: LD_VAR 0 2
68810: NOT
68811: OR
68812: IFFALSE 68816
// exit ;
68814: GO 68911
// result := [ ] ;
68816: LD_ADDR_VAR 0 3
68820: PUSH
68821: EMPTY
68822: ST_TO_ADDR
// for un in units do
68823: LD_ADDR_VAR 0 4
68827: PUSH
68828: LD_VAR 0 1
68832: PUSH
68833: FOR_IN
68834: IFFALSE 68909
// if GetClass ( un ) = class then
68836: LD_VAR 0 4
68840: PPUSH
68841: CALL_OW 257
68845: PUSH
68846: LD_VAR 0 2
68850: EQUAL
68851: IFFALSE 68878
// result := Insert ( result , 1 , un ) else
68853: LD_ADDR_VAR 0 3
68857: PUSH
68858: LD_VAR 0 3
68862: PPUSH
68863: LD_INT 1
68865: PPUSH
68866: LD_VAR 0 4
68870: PPUSH
68871: CALL_OW 2
68875: ST_TO_ADDR
68876: GO 68907
// result := Replace ( result , result + 1 , un ) ;
68878: LD_ADDR_VAR 0 3
68882: PUSH
68883: LD_VAR 0 3
68887: PPUSH
68888: LD_VAR 0 3
68892: PUSH
68893: LD_INT 1
68895: PLUS
68896: PPUSH
68897: LD_VAR 0 4
68901: PPUSH
68902: CALL_OW 1
68906: ST_TO_ADDR
68907: GO 68833
68909: POP
68910: POP
// end ;
68911: LD_VAR 0 3
68915: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68916: LD_INT 0
68918: PPUSH
68919: PPUSH
68920: PPUSH
68921: PPUSH
68922: PPUSH
68923: PPUSH
68924: PPUSH
// result := [ ] ;
68925: LD_ADDR_VAR 0 4
68929: PUSH
68930: EMPTY
68931: ST_TO_ADDR
// if x - r < 0 then
68932: LD_VAR 0 1
68936: PUSH
68937: LD_VAR 0 3
68941: MINUS
68942: PUSH
68943: LD_INT 0
68945: LESS
68946: IFFALSE 68958
// min_x := 0 else
68948: LD_ADDR_VAR 0 8
68952: PUSH
68953: LD_INT 0
68955: ST_TO_ADDR
68956: GO 68974
// min_x := x - r ;
68958: LD_ADDR_VAR 0 8
68962: PUSH
68963: LD_VAR 0 1
68967: PUSH
68968: LD_VAR 0 3
68972: MINUS
68973: ST_TO_ADDR
// if y - r < 0 then
68974: LD_VAR 0 2
68978: PUSH
68979: LD_VAR 0 3
68983: MINUS
68984: PUSH
68985: LD_INT 0
68987: LESS
68988: IFFALSE 69000
// min_y := 0 else
68990: LD_ADDR_VAR 0 7
68994: PUSH
68995: LD_INT 0
68997: ST_TO_ADDR
68998: GO 69016
// min_y := y - r ;
69000: LD_ADDR_VAR 0 7
69004: PUSH
69005: LD_VAR 0 2
69009: PUSH
69010: LD_VAR 0 3
69014: MINUS
69015: ST_TO_ADDR
// max_x := x + r ;
69016: LD_ADDR_VAR 0 9
69020: PUSH
69021: LD_VAR 0 1
69025: PUSH
69026: LD_VAR 0 3
69030: PLUS
69031: ST_TO_ADDR
// max_y := y + r ;
69032: LD_ADDR_VAR 0 10
69036: PUSH
69037: LD_VAR 0 2
69041: PUSH
69042: LD_VAR 0 3
69046: PLUS
69047: ST_TO_ADDR
// for _x = min_x to max_x do
69048: LD_ADDR_VAR 0 5
69052: PUSH
69053: DOUBLE
69054: LD_VAR 0 8
69058: DEC
69059: ST_TO_ADDR
69060: LD_VAR 0 9
69064: PUSH
69065: FOR_TO
69066: IFFALSE 69167
// for _y = min_y to max_y do
69068: LD_ADDR_VAR 0 6
69072: PUSH
69073: DOUBLE
69074: LD_VAR 0 7
69078: DEC
69079: ST_TO_ADDR
69080: LD_VAR 0 10
69084: PUSH
69085: FOR_TO
69086: IFFALSE 69163
// begin if not ValidHex ( _x , _y ) then
69088: LD_VAR 0 5
69092: PPUSH
69093: LD_VAR 0 6
69097: PPUSH
69098: CALL_OW 488
69102: NOT
69103: IFFALSE 69107
// continue ;
69105: GO 69085
// if GetResourceTypeXY ( _x , _y ) then
69107: LD_VAR 0 5
69111: PPUSH
69112: LD_VAR 0 6
69116: PPUSH
69117: CALL_OW 283
69121: IFFALSE 69161
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69123: LD_ADDR_VAR 0 4
69127: PUSH
69128: LD_VAR 0 4
69132: PPUSH
69133: LD_VAR 0 4
69137: PUSH
69138: LD_INT 1
69140: PLUS
69141: PPUSH
69142: LD_VAR 0 5
69146: PUSH
69147: LD_VAR 0 6
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PPUSH
69156: CALL_OW 1
69160: ST_TO_ADDR
// end ;
69161: GO 69085
69163: POP
69164: POP
69165: GO 69065
69167: POP
69168: POP
// end ;
69169: LD_VAR 0 4
69173: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69174: LD_INT 0
69176: PPUSH
69177: PPUSH
69178: PPUSH
69179: PPUSH
69180: PPUSH
69181: PPUSH
69182: PPUSH
69183: PPUSH
// if not units then
69184: LD_VAR 0 1
69188: NOT
69189: IFFALSE 69193
// exit ;
69191: GO 69717
// result := UnitFilter ( units , [ f_ok ] ) ;
69193: LD_ADDR_VAR 0 3
69197: PUSH
69198: LD_VAR 0 1
69202: PPUSH
69203: LD_INT 50
69205: PUSH
69206: EMPTY
69207: LIST
69208: PPUSH
69209: CALL_OW 72
69213: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69214: LD_ADDR_VAR 0 8
69218: PUSH
69219: LD_VAR 0 1
69223: PUSH
69224: LD_INT 1
69226: ARRAY
69227: PPUSH
69228: CALL_OW 255
69232: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69233: LD_ADDR_VAR 0 10
69237: PUSH
69238: LD_INT 29
69240: PUSH
69241: LD_INT 91
69243: PUSH
69244: LD_INT 49
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: LIST
69251: ST_TO_ADDR
// if not result then
69252: LD_VAR 0 3
69256: NOT
69257: IFFALSE 69261
// exit ;
69259: GO 69717
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69261: LD_ADDR_VAR 0 5
69265: PUSH
69266: LD_INT 81
69268: PUSH
69269: LD_VAR 0 8
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PPUSH
69278: CALL_OW 69
69282: ST_TO_ADDR
// for i in result do
69283: LD_ADDR_VAR 0 4
69287: PUSH
69288: LD_VAR 0 3
69292: PUSH
69293: FOR_IN
69294: IFFALSE 69715
// begin tag := GetTag ( i ) + 1 ;
69296: LD_ADDR_VAR 0 9
69300: PUSH
69301: LD_VAR 0 4
69305: PPUSH
69306: CALL_OW 110
69310: PUSH
69311: LD_INT 1
69313: PLUS
69314: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69315: LD_ADDR_VAR 0 7
69319: PUSH
69320: LD_VAR 0 4
69324: PPUSH
69325: CALL_OW 250
69329: PPUSH
69330: LD_VAR 0 4
69334: PPUSH
69335: CALL_OW 251
69339: PPUSH
69340: LD_INT 6
69342: PPUSH
69343: CALL 68916 0 3
69347: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69348: LD_VAR 0 4
69352: PPUSH
69353: CALL_OW 247
69357: PUSH
69358: LD_INT 2
69360: EQUAL
69361: PUSH
69362: LD_VAR 0 7
69366: AND
69367: PUSH
69368: LD_VAR 0 4
69372: PPUSH
69373: CALL_OW 264
69377: PUSH
69378: LD_VAR 0 10
69382: IN
69383: NOT
69384: AND
69385: IFFALSE 69424
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69387: LD_VAR 0 4
69391: PPUSH
69392: LD_VAR 0 7
69396: PUSH
69397: LD_INT 1
69399: ARRAY
69400: PUSH
69401: LD_INT 1
69403: ARRAY
69404: PPUSH
69405: LD_VAR 0 7
69409: PUSH
69410: LD_INT 1
69412: ARRAY
69413: PUSH
69414: LD_INT 2
69416: ARRAY
69417: PPUSH
69418: CALL_OW 116
69422: GO 69713
// if path > tag then
69424: LD_VAR 0 2
69428: PUSH
69429: LD_VAR 0 9
69433: GREATER
69434: IFFALSE 69642
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69436: LD_ADDR_VAR 0 6
69440: PUSH
69441: LD_VAR 0 5
69445: PPUSH
69446: LD_INT 91
69448: PUSH
69449: LD_VAR 0 4
69453: PUSH
69454: LD_INT 8
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: LIST
69461: PPUSH
69462: CALL_OW 72
69466: ST_TO_ADDR
// if nearEnemy then
69467: LD_VAR 0 6
69471: IFFALSE 69540
// begin if GetWeapon ( i ) = ru_time_lapser then
69473: LD_VAR 0 4
69477: PPUSH
69478: CALL_OW 264
69482: PUSH
69483: LD_INT 49
69485: EQUAL
69486: IFFALSE 69514
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69488: LD_VAR 0 4
69492: PPUSH
69493: LD_VAR 0 6
69497: PPUSH
69498: LD_VAR 0 4
69502: PPUSH
69503: CALL_OW 74
69507: PPUSH
69508: CALL_OW 112
69512: GO 69538
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69514: LD_VAR 0 4
69518: PPUSH
69519: LD_VAR 0 6
69523: PPUSH
69524: LD_VAR 0 4
69528: PPUSH
69529: CALL_OW 74
69533: PPUSH
69534: CALL_OW 115
// end else
69538: GO 69640
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69540: LD_VAR 0 4
69544: PPUSH
69545: LD_VAR 0 2
69549: PUSH
69550: LD_VAR 0 9
69554: ARRAY
69555: PUSH
69556: LD_INT 1
69558: ARRAY
69559: PPUSH
69560: LD_VAR 0 2
69564: PUSH
69565: LD_VAR 0 9
69569: ARRAY
69570: PUSH
69571: LD_INT 2
69573: ARRAY
69574: PPUSH
69575: CALL_OW 297
69579: PUSH
69580: LD_INT 6
69582: GREATER
69583: IFFALSE 69626
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69585: LD_VAR 0 4
69589: PPUSH
69590: LD_VAR 0 2
69594: PUSH
69595: LD_VAR 0 9
69599: ARRAY
69600: PUSH
69601: LD_INT 1
69603: ARRAY
69604: PPUSH
69605: LD_VAR 0 2
69609: PUSH
69610: LD_VAR 0 9
69614: ARRAY
69615: PUSH
69616: LD_INT 2
69618: ARRAY
69619: PPUSH
69620: CALL_OW 114
69624: GO 69640
// SetTag ( i , tag ) ;
69626: LD_VAR 0 4
69630: PPUSH
69631: LD_VAR 0 9
69635: PPUSH
69636: CALL_OW 109
// end else
69640: GO 69713
// if enemy then
69642: LD_VAR 0 5
69646: IFFALSE 69713
// begin if GetWeapon ( i ) = ru_time_lapser then
69648: LD_VAR 0 4
69652: PPUSH
69653: CALL_OW 264
69657: PUSH
69658: LD_INT 49
69660: EQUAL
69661: IFFALSE 69689
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69663: LD_VAR 0 4
69667: PPUSH
69668: LD_VAR 0 5
69672: PPUSH
69673: LD_VAR 0 4
69677: PPUSH
69678: CALL_OW 74
69682: PPUSH
69683: CALL_OW 112
69687: GO 69713
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69689: LD_VAR 0 4
69693: PPUSH
69694: LD_VAR 0 5
69698: PPUSH
69699: LD_VAR 0 4
69703: PPUSH
69704: CALL_OW 74
69708: PPUSH
69709: CALL_OW 115
// end ; end ;
69713: GO 69293
69715: POP
69716: POP
// end ;
69717: LD_VAR 0 3
69721: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69722: LD_INT 0
69724: PPUSH
69725: PPUSH
69726: PPUSH
// if not unit or IsInUnit ( unit ) then
69727: LD_VAR 0 1
69731: NOT
69732: PUSH
69733: LD_VAR 0 1
69737: PPUSH
69738: CALL_OW 310
69742: OR
69743: IFFALSE 69747
// exit ;
69745: GO 69838
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69747: LD_ADDR_VAR 0 4
69751: PUSH
69752: LD_VAR 0 1
69756: PPUSH
69757: CALL_OW 250
69761: PPUSH
69762: LD_VAR 0 2
69766: PPUSH
69767: LD_INT 1
69769: PPUSH
69770: CALL_OW 272
69774: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69775: LD_ADDR_VAR 0 5
69779: PUSH
69780: LD_VAR 0 1
69784: PPUSH
69785: CALL_OW 251
69789: PPUSH
69790: LD_VAR 0 2
69794: PPUSH
69795: LD_INT 1
69797: PPUSH
69798: CALL_OW 273
69802: ST_TO_ADDR
// if ValidHex ( x , y ) then
69803: LD_VAR 0 4
69807: PPUSH
69808: LD_VAR 0 5
69812: PPUSH
69813: CALL_OW 488
69817: IFFALSE 69838
// ComTurnXY ( unit , x , y ) ;
69819: LD_VAR 0 1
69823: PPUSH
69824: LD_VAR 0 4
69828: PPUSH
69829: LD_VAR 0 5
69833: PPUSH
69834: CALL_OW 118
// end ;
69838: LD_VAR 0 3
69842: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69843: LD_INT 0
69845: PPUSH
69846: PPUSH
// result := false ;
69847: LD_ADDR_VAR 0 3
69851: PUSH
69852: LD_INT 0
69854: ST_TO_ADDR
// if not units then
69855: LD_VAR 0 2
69859: NOT
69860: IFFALSE 69864
// exit ;
69862: GO 69909
// for i in units do
69864: LD_ADDR_VAR 0 4
69868: PUSH
69869: LD_VAR 0 2
69873: PUSH
69874: FOR_IN
69875: IFFALSE 69907
// if See ( side , i ) then
69877: LD_VAR 0 1
69881: PPUSH
69882: LD_VAR 0 4
69886: PPUSH
69887: CALL_OW 292
69891: IFFALSE 69905
// begin result := true ;
69893: LD_ADDR_VAR 0 3
69897: PUSH
69898: LD_INT 1
69900: ST_TO_ADDR
// exit ;
69901: POP
69902: POP
69903: GO 69909
// end ;
69905: GO 69874
69907: POP
69908: POP
// end ;
69909: LD_VAR 0 3
69913: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69914: LD_INT 0
69916: PPUSH
69917: PPUSH
69918: PPUSH
69919: PPUSH
// if not unit or not points then
69920: LD_VAR 0 1
69924: NOT
69925: PUSH
69926: LD_VAR 0 2
69930: NOT
69931: OR
69932: IFFALSE 69936
// exit ;
69934: GO 70026
// dist := 99999 ;
69936: LD_ADDR_VAR 0 5
69940: PUSH
69941: LD_INT 99999
69943: ST_TO_ADDR
// for i in points do
69944: LD_ADDR_VAR 0 4
69948: PUSH
69949: LD_VAR 0 2
69953: PUSH
69954: FOR_IN
69955: IFFALSE 70024
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69957: LD_ADDR_VAR 0 6
69961: PUSH
69962: LD_VAR 0 1
69966: PPUSH
69967: LD_VAR 0 4
69971: PUSH
69972: LD_INT 1
69974: ARRAY
69975: PPUSH
69976: LD_VAR 0 4
69980: PUSH
69981: LD_INT 2
69983: ARRAY
69984: PPUSH
69985: CALL_OW 297
69989: ST_TO_ADDR
// if tmpDist < dist then
69990: LD_VAR 0 6
69994: PUSH
69995: LD_VAR 0 5
69999: LESS
70000: IFFALSE 70022
// begin result := i ;
70002: LD_ADDR_VAR 0 3
70006: PUSH
70007: LD_VAR 0 4
70011: ST_TO_ADDR
// dist := tmpDist ;
70012: LD_ADDR_VAR 0 5
70016: PUSH
70017: LD_VAR 0 6
70021: ST_TO_ADDR
// end ; end ;
70022: GO 69954
70024: POP
70025: POP
// end ;
70026: LD_VAR 0 3
70030: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70031: LD_INT 0
70033: PPUSH
// uc_side := side ;
70034: LD_ADDR_OWVAR 20
70038: PUSH
70039: LD_VAR 0 1
70043: ST_TO_ADDR
// uc_nation := 3 ;
70044: LD_ADDR_OWVAR 21
70048: PUSH
70049: LD_INT 3
70051: ST_TO_ADDR
// vc_chassis := 25 ;
70052: LD_ADDR_OWVAR 37
70056: PUSH
70057: LD_INT 25
70059: ST_TO_ADDR
// vc_engine := engine_siberite ;
70060: LD_ADDR_OWVAR 39
70064: PUSH
70065: LD_INT 3
70067: ST_TO_ADDR
// vc_control := control_computer ;
70068: LD_ADDR_OWVAR 38
70072: PUSH
70073: LD_INT 3
70075: ST_TO_ADDR
// vc_weapon := 59 ;
70076: LD_ADDR_OWVAR 40
70080: PUSH
70081: LD_INT 59
70083: ST_TO_ADDR
// result := CreateVehicle ;
70084: LD_ADDR_VAR 0 5
70088: PUSH
70089: CALL_OW 45
70093: ST_TO_ADDR
// SetDir ( result , d ) ;
70094: LD_VAR 0 5
70098: PPUSH
70099: LD_VAR 0 4
70103: PPUSH
70104: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70108: LD_VAR 0 5
70112: PPUSH
70113: LD_VAR 0 2
70117: PPUSH
70118: LD_VAR 0 3
70122: PPUSH
70123: LD_INT 0
70125: PPUSH
70126: CALL_OW 48
// end ;
70130: LD_VAR 0 5
70134: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70135: LD_INT 0
70137: PPUSH
70138: PPUSH
70139: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70140: LD_ADDR_VAR 0 2
70144: PUSH
70145: LD_INT 0
70147: PUSH
70148: LD_INT 0
70150: PUSH
70151: LD_INT 0
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70163: LD_VAR 0 1
70167: NOT
70168: PUSH
70169: LD_VAR 0 1
70173: PPUSH
70174: CALL_OW 264
70178: PUSH
70179: LD_INT 12
70181: PUSH
70182: LD_INT 51
70184: PUSH
70185: LD_INT 32
70187: PUSH
70188: LD_INT 89
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: IN
70197: NOT
70198: OR
70199: IFFALSE 70203
// exit ;
70201: GO 70301
// for i := 1 to 3 do
70203: LD_ADDR_VAR 0 3
70207: PUSH
70208: DOUBLE
70209: LD_INT 1
70211: DEC
70212: ST_TO_ADDR
70213: LD_INT 3
70215: PUSH
70216: FOR_TO
70217: IFFALSE 70299
// begin tmp := GetCargo ( cargo , i ) ;
70219: LD_ADDR_VAR 0 4
70223: PUSH
70224: LD_VAR 0 1
70228: PPUSH
70229: LD_VAR 0 3
70233: PPUSH
70234: CALL_OW 289
70238: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70239: LD_ADDR_VAR 0 2
70243: PUSH
70244: LD_VAR 0 2
70248: PPUSH
70249: LD_VAR 0 3
70253: PPUSH
70254: LD_VAR 0 4
70258: PPUSH
70259: CALL_OW 1
70263: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70264: LD_ADDR_VAR 0 2
70268: PUSH
70269: LD_VAR 0 2
70273: PPUSH
70274: LD_INT 4
70276: PPUSH
70277: LD_VAR 0 2
70281: PUSH
70282: LD_INT 4
70284: ARRAY
70285: PUSH
70286: LD_VAR 0 4
70290: PLUS
70291: PPUSH
70292: CALL_OW 1
70296: ST_TO_ADDR
// end ;
70297: GO 70216
70299: POP
70300: POP
// end ;
70301: LD_VAR 0 2
70305: RET
// export function Length ( array ) ; begin
70306: LD_INT 0
70308: PPUSH
// result := array + 0 ;
70309: LD_ADDR_VAR 0 2
70313: PUSH
70314: LD_VAR 0 1
70318: PUSH
70319: LD_INT 0
70321: PLUS
70322: ST_TO_ADDR
// end ;
70323: LD_VAR 0 2
70327: RET
// export function PrepareArray ( array ) ; begin
70328: LD_INT 0
70330: PPUSH
// result := array diff 0 ;
70331: LD_ADDR_VAR 0 2
70335: PUSH
70336: LD_VAR 0 1
70340: PUSH
70341: LD_INT 0
70343: DIFF
70344: ST_TO_ADDR
// if not result [ 1 ] then
70345: LD_VAR 0 2
70349: PUSH
70350: LD_INT 1
70352: ARRAY
70353: NOT
70354: IFFALSE 70374
// result := Delete ( result , 1 ) ;
70356: LD_ADDR_VAR 0 2
70360: PUSH
70361: LD_VAR 0 2
70365: PPUSH
70366: LD_INT 1
70368: PPUSH
70369: CALL_OW 3
70373: ST_TO_ADDR
// end ;
70374: LD_VAR 0 2
70378: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70379: LD_INT 0
70381: PPUSH
70382: PPUSH
70383: PPUSH
70384: PPUSH
// sibRocketRange := 25 ;
70385: LD_ADDR_VAR 0 6
70389: PUSH
70390: LD_INT 25
70392: ST_TO_ADDR
// result := false ;
70393: LD_ADDR_VAR 0 4
70397: PUSH
70398: LD_INT 0
70400: ST_TO_ADDR
// for i := 0 to 5 do
70401: LD_ADDR_VAR 0 5
70405: PUSH
70406: DOUBLE
70407: LD_INT 0
70409: DEC
70410: ST_TO_ADDR
70411: LD_INT 5
70413: PUSH
70414: FOR_TO
70415: IFFALSE 70482
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70417: LD_VAR 0 1
70421: PPUSH
70422: LD_VAR 0 5
70426: PPUSH
70427: LD_VAR 0 6
70431: PPUSH
70432: CALL_OW 272
70436: PPUSH
70437: LD_VAR 0 2
70441: PPUSH
70442: LD_VAR 0 5
70446: PPUSH
70447: LD_VAR 0 6
70451: PPUSH
70452: CALL_OW 273
70456: PPUSH
70457: LD_VAR 0 3
70461: PPUSH
70462: CALL_OW 309
70466: IFFALSE 70480
// begin result := true ;
70468: LD_ADDR_VAR 0 4
70472: PUSH
70473: LD_INT 1
70475: ST_TO_ADDR
// exit ;
70476: POP
70477: POP
70478: GO 70484
// end ;
70480: GO 70414
70482: POP
70483: POP
// end ;
70484: LD_VAR 0 4
70488: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70489: LD_INT 0
70491: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70492: LD_VAR 0 1
70496: PPUSH
70497: LD_VAR 0 2
70501: PPUSH
70502: LD_INT 0
70504: PPUSH
70505: LD_INT 0
70507: PPUSH
70508: LD_INT 1
70510: PPUSH
70511: LD_INT 0
70513: PPUSH
70514: CALL_OW 587
// end ; end_of_file end_of_file
70518: LD_VAR 0 3
70522: RET
// export globalGameSaveCounter ; every 0 0$1 do
70523: GO 70525
70525: DISABLE
// begin enable ;
70526: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70527: LD_STRING updateTimer(
70529: PUSH
70530: LD_OWVAR 1
70534: STR
70535: PUSH
70536: LD_STRING );
70538: STR
70539: PPUSH
70540: CALL_OW 559
// end ;
70544: END
// every 0 0$1 do
70545: GO 70547
70547: DISABLE
// begin globalGameSaveCounter := 0 ;
70548: LD_ADDR_EXP 62
70552: PUSH
70553: LD_INT 0
70555: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
70556: LD_STRING setGameSaveCounter(0)
70558: PPUSH
70559: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
70563: LD_STRING initStreamRollete();
70565: PPUSH
70566: CALL_OW 559
// InitStreamMode ;
70570: CALL 71896 0 0
// DefineStreamItems ( false ) ;
70574: LD_INT 0
70576: PPUSH
70577: CALL 72360 0 1
// end ;
70581: END
// export function SOS_MapStart ( ) ; begin
70582: LD_INT 0
70584: PPUSH
// if streamModeActive then
70585: LD_EXP 63
70589: IFFALSE 70598
// DefineStreamItems ( true ) ;
70591: LD_INT 1
70593: PPUSH
70594: CALL 72360 0 1
// UpdateLuaVariables ( ) ;
70598: CALL 70615 0 0
// UpdateFactoryWaypoints ( ) ;
70602: CALL 85221 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70606: CALL 85478 0 0
// end ;
70610: LD_VAR 0 1
70614: RET
// function UpdateLuaVariables ( ) ; begin
70615: LD_INT 0
70617: PPUSH
// if globalGameSaveCounter then
70618: LD_EXP 62
70622: IFFALSE 70656
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
70624: LD_ADDR_EXP 62
70628: PUSH
70629: LD_EXP 62
70633: PPUSH
70634: CALL 67931 0 1
70638: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
70639: LD_STRING setGameSaveCounter(
70641: PUSH
70642: LD_EXP 62
70646: STR
70647: PUSH
70648: LD_STRING )
70650: STR
70651: PPUSH
70652: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
70656: LD_STRING setGameDifficulty(
70658: PUSH
70659: LD_OWVAR 67
70663: STR
70664: PUSH
70665: LD_STRING )
70667: STR
70668: PPUSH
70669: CALL_OW 559
// end ;
70673: LD_VAR 0 1
70677: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70678: LD_INT 0
70680: PPUSH
// if p2 = stream_mode then
70681: LD_VAR 0 2
70685: PUSH
70686: LD_INT 100
70688: EQUAL
70689: IFFALSE 71692
// begin if not StreamModeActive then
70691: LD_EXP 63
70695: NOT
70696: IFFALSE 70706
// StreamModeActive := true ;
70698: LD_ADDR_EXP 63
70702: PUSH
70703: LD_INT 1
70705: ST_TO_ADDR
// if p3 = 0 then
70706: LD_VAR 0 3
70710: PUSH
70711: LD_INT 0
70713: EQUAL
70714: IFFALSE 70720
// InitStreamMode ;
70716: CALL 71896 0 0
// if p3 = 1 then
70720: LD_VAR 0 3
70724: PUSH
70725: LD_INT 1
70727: EQUAL
70728: IFFALSE 70738
// sRocket := true ;
70730: LD_ADDR_EXP 68
70734: PUSH
70735: LD_INT 1
70737: ST_TO_ADDR
// if p3 = 2 then
70738: LD_VAR 0 3
70742: PUSH
70743: LD_INT 2
70745: EQUAL
70746: IFFALSE 70756
// sSpeed := true ;
70748: LD_ADDR_EXP 67
70752: PUSH
70753: LD_INT 1
70755: ST_TO_ADDR
// if p3 = 3 then
70756: LD_VAR 0 3
70760: PUSH
70761: LD_INT 3
70763: EQUAL
70764: IFFALSE 70774
// sEngine := true ;
70766: LD_ADDR_EXP 69
70770: PUSH
70771: LD_INT 1
70773: ST_TO_ADDR
// if p3 = 4 then
70774: LD_VAR 0 3
70778: PUSH
70779: LD_INT 4
70781: EQUAL
70782: IFFALSE 70792
// sSpec := true ;
70784: LD_ADDR_EXP 66
70788: PUSH
70789: LD_INT 1
70791: ST_TO_ADDR
// if p3 = 5 then
70792: LD_VAR 0 3
70796: PUSH
70797: LD_INT 5
70799: EQUAL
70800: IFFALSE 70810
// sLevel := true ;
70802: LD_ADDR_EXP 70
70806: PUSH
70807: LD_INT 1
70809: ST_TO_ADDR
// if p3 = 6 then
70810: LD_VAR 0 3
70814: PUSH
70815: LD_INT 6
70817: EQUAL
70818: IFFALSE 70828
// sArmoury := true ;
70820: LD_ADDR_EXP 71
70824: PUSH
70825: LD_INT 1
70827: ST_TO_ADDR
// if p3 = 7 then
70828: LD_VAR 0 3
70832: PUSH
70833: LD_INT 7
70835: EQUAL
70836: IFFALSE 70846
// sRadar := true ;
70838: LD_ADDR_EXP 72
70842: PUSH
70843: LD_INT 1
70845: ST_TO_ADDR
// if p3 = 8 then
70846: LD_VAR 0 3
70850: PUSH
70851: LD_INT 8
70853: EQUAL
70854: IFFALSE 70864
// sBunker := true ;
70856: LD_ADDR_EXP 73
70860: PUSH
70861: LD_INT 1
70863: ST_TO_ADDR
// if p3 = 9 then
70864: LD_VAR 0 3
70868: PUSH
70869: LD_INT 9
70871: EQUAL
70872: IFFALSE 70882
// sHack := true ;
70874: LD_ADDR_EXP 74
70878: PUSH
70879: LD_INT 1
70881: ST_TO_ADDR
// if p3 = 10 then
70882: LD_VAR 0 3
70886: PUSH
70887: LD_INT 10
70889: EQUAL
70890: IFFALSE 70900
// sFire := true ;
70892: LD_ADDR_EXP 75
70896: PUSH
70897: LD_INT 1
70899: ST_TO_ADDR
// if p3 = 11 then
70900: LD_VAR 0 3
70904: PUSH
70905: LD_INT 11
70907: EQUAL
70908: IFFALSE 70918
// sRefresh := true ;
70910: LD_ADDR_EXP 76
70914: PUSH
70915: LD_INT 1
70917: ST_TO_ADDR
// if p3 = 12 then
70918: LD_VAR 0 3
70922: PUSH
70923: LD_INT 12
70925: EQUAL
70926: IFFALSE 70936
// sExp := true ;
70928: LD_ADDR_EXP 77
70932: PUSH
70933: LD_INT 1
70935: ST_TO_ADDR
// if p3 = 13 then
70936: LD_VAR 0 3
70940: PUSH
70941: LD_INT 13
70943: EQUAL
70944: IFFALSE 70954
// sDepot := true ;
70946: LD_ADDR_EXP 78
70950: PUSH
70951: LD_INT 1
70953: ST_TO_ADDR
// if p3 = 14 then
70954: LD_VAR 0 3
70958: PUSH
70959: LD_INT 14
70961: EQUAL
70962: IFFALSE 70972
// sFlag := true ;
70964: LD_ADDR_EXP 79
70968: PUSH
70969: LD_INT 1
70971: ST_TO_ADDR
// if p3 = 15 then
70972: LD_VAR 0 3
70976: PUSH
70977: LD_INT 15
70979: EQUAL
70980: IFFALSE 70990
// sKamikadze := true ;
70982: LD_ADDR_EXP 87
70986: PUSH
70987: LD_INT 1
70989: ST_TO_ADDR
// if p3 = 16 then
70990: LD_VAR 0 3
70994: PUSH
70995: LD_INT 16
70997: EQUAL
70998: IFFALSE 71008
// sTroll := true ;
71000: LD_ADDR_EXP 88
71004: PUSH
71005: LD_INT 1
71007: ST_TO_ADDR
// if p3 = 17 then
71008: LD_VAR 0 3
71012: PUSH
71013: LD_INT 17
71015: EQUAL
71016: IFFALSE 71026
// sSlow := true ;
71018: LD_ADDR_EXP 89
71022: PUSH
71023: LD_INT 1
71025: ST_TO_ADDR
// if p3 = 18 then
71026: LD_VAR 0 3
71030: PUSH
71031: LD_INT 18
71033: EQUAL
71034: IFFALSE 71044
// sLack := true ;
71036: LD_ADDR_EXP 90
71040: PUSH
71041: LD_INT 1
71043: ST_TO_ADDR
// if p3 = 19 then
71044: LD_VAR 0 3
71048: PUSH
71049: LD_INT 19
71051: EQUAL
71052: IFFALSE 71062
// sTank := true ;
71054: LD_ADDR_EXP 92
71058: PUSH
71059: LD_INT 1
71061: ST_TO_ADDR
// if p3 = 20 then
71062: LD_VAR 0 3
71066: PUSH
71067: LD_INT 20
71069: EQUAL
71070: IFFALSE 71080
// sRemote := true ;
71072: LD_ADDR_EXP 93
71076: PUSH
71077: LD_INT 1
71079: ST_TO_ADDR
// if p3 = 21 then
71080: LD_VAR 0 3
71084: PUSH
71085: LD_INT 21
71087: EQUAL
71088: IFFALSE 71098
// sPowell := true ;
71090: LD_ADDR_EXP 94
71094: PUSH
71095: LD_INT 1
71097: ST_TO_ADDR
// if p3 = 22 then
71098: LD_VAR 0 3
71102: PUSH
71103: LD_INT 22
71105: EQUAL
71106: IFFALSE 71116
// sTeleport := true ;
71108: LD_ADDR_EXP 97
71112: PUSH
71113: LD_INT 1
71115: ST_TO_ADDR
// if p3 = 23 then
71116: LD_VAR 0 3
71120: PUSH
71121: LD_INT 23
71123: EQUAL
71124: IFFALSE 71134
// sOilTower := true ;
71126: LD_ADDR_EXP 99
71130: PUSH
71131: LD_INT 1
71133: ST_TO_ADDR
// if p3 = 24 then
71134: LD_VAR 0 3
71138: PUSH
71139: LD_INT 24
71141: EQUAL
71142: IFFALSE 71152
// sShovel := true ;
71144: LD_ADDR_EXP 100
71148: PUSH
71149: LD_INT 1
71151: ST_TO_ADDR
// if p3 = 25 then
71152: LD_VAR 0 3
71156: PUSH
71157: LD_INT 25
71159: EQUAL
71160: IFFALSE 71170
// sSheik := true ;
71162: LD_ADDR_EXP 101
71166: PUSH
71167: LD_INT 1
71169: ST_TO_ADDR
// if p3 = 26 then
71170: LD_VAR 0 3
71174: PUSH
71175: LD_INT 26
71177: EQUAL
71178: IFFALSE 71188
// sEarthquake := true ;
71180: LD_ADDR_EXP 103
71184: PUSH
71185: LD_INT 1
71187: ST_TO_ADDR
// if p3 = 27 then
71188: LD_VAR 0 3
71192: PUSH
71193: LD_INT 27
71195: EQUAL
71196: IFFALSE 71206
// sAI := true ;
71198: LD_ADDR_EXP 104
71202: PUSH
71203: LD_INT 1
71205: ST_TO_ADDR
// if p3 = 28 then
71206: LD_VAR 0 3
71210: PUSH
71211: LD_INT 28
71213: EQUAL
71214: IFFALSE 71224
// sCargo := true ;
71216: LD_ADDR_EXP 107
71220: PUSH
71221: LD_INT 1
71223: ST_TO_ADDR
// if p3 = 29 then
71224: LD_VAR 0 3
71228: PUSH
71229: LD_INT 29
71231: EQUAL
71232: IFFALSE 71242
// sDLaser := true ;
71234: LD_ADDR_EXP 108
71238: PUSH
71239: LD_INT 1
71241: ST_TO_ADDR
// if p3 = 30 then
71242: LD_VAR 0 3
71246: PUSH
71247: LD_INT 30
71249: EQUAL
71250: IFFALSE 71260
// sExchange := true ;
71252: LD_ADDR_EXP 109
71256: PUSH
71257: LD_INT 1
71259: ST_TO_ADDR
// if p3 = 31 then
71260: LD_VAR 0 3
71264: PUSH
71265: LD_INT 31
71267: EQUAL
71268: IFFALSE 71278
// sFac := true ;
71270: LD_ADDR_EXP 110
71274: PUSH
71275: LD_INT 1
71277: ST_TO_ADDR
// if p3 = 32 then
71278: LD_VAR 0 3
71282: PUSH
71283: LD_INT 32
71285: EQUAL
71286: IFFALSE 71296
// sPower := true ;
71288: LD_ADDR_EXP 111
71292: PUSH
71293: LD_INT 1
71295: ST_TO_ADDR
// if p3 = 33 then
71296: LD_VAR 0 3
71300: PUSH
71301: LD_INT 33
71303: EQUAL
71304: IFFALSE 71314
// sRandom := true ;
71306: LD_ADDR_EXP 112
71310: PUSH
71311: LD_INT 1
71313: ST_TO_ADDR
// if p3 = 34 then
71314: LD_VAR 0 3
71318: PUSH
71319: LD_INT 34
71321: EQUAL
71322: IFFALSE 71332
// sShield := true ;
71324: LD_ADDR_EXP 113
71328: PUSH
71329: LD_INT 1
71331: ST_TO_ADDR
// if p3 = 35 then
71332: LD_VAR 0 3
71336: PUSH
71337: LD_INT 35
71339: EQUAL
71340: IFFALSE 71350
// sTime := true ;
71342: LD_ADDR_EXP 114
71346: PUSH
71347: LD_INT 1
71349: ST_TO_ADDR
// if p3 = 36 then
71350: LD_VAR 0 3
71354: PUSH
71355: LD_INT 36
71357: EQUAL
71358: IFFALSE 71368
// sTools := true ;
71360: LD_ADDR_EXP 115
71364: PUSH
71365: LD_INT 1
71367: ST_TO_ADDR
// if p3 = 101 then
71368: LD_VAR 0 3
71372: PUSH
71373: LD_INT 101
71375: EQUAL
71376: IFFALSE 71386
// sSold := true ;
71378: LD_ADDR_EXP 80
71382: PUSH
71383: LD_INT 1
71385: ST_TO_ADDR
// if p3 = 102 then
71386: LD_VAR 0 3
71390: PUSH
71391: LD_INT 102
71393: EQUAL
71394: IFFALSE 71404
// sDiff := true ;
71396: LD_ADDR_EXP 81
71400: PUSH
71401: LD_INT 1
71403: ST_TO_ADDR
// if p3 = 103 then
71404: LD_VAR 0 3
71408: PUSH
71409: LD_INT 103
71411: EQUAL
71412: IFFALSE 71422
// sFog := true ;
71414: LD_ADDR_EXP 84
71418: PUSH
71419: LD_INT 1
71421: ST_TO_ADDR
// if p3 = 104 then
71422: LD_VAR 0 3
71426: PUSH
71427: LD_INT 104
71429: EQUAL
71430: IFFALSE 71440
// sReset := true ;
71432: LD_ADDR_EXP 85
71436: PUSH
71437: LD_INT 1
71439: ST_TO_ADDR
// if p3 = 105 then
71440: LD_VAR 0 3
71444: PUSH
71445: LD_INT 105
71447: EQUAL
71448: IFFALSE 71458
// sSun := true ;
71450: LD_ADDR_EXP 86
71454: PUSH
71455: LD_INT 1
71457: ST_TO_ADDR
// if p3 = 106 then
71458: LD_VAR 0 3
71462: PUSH
71463: LD_INT 106
71465: EQUAL
71466: IFFALSE 71476
// sTiger := true ;
71468: LD_ADDR_EXP 82
71472: PUSH
71473: LD_INT 1
71475: ST_TO_ADDR
// if p3 = 107 then
71476: LD_VAR 0 3
71480: PUSH
71481: LD_INT 107
71483: EQUAL
71484: IFFALSE 71494
// sBomb := true ;
71486: LD_ADDR_EXP 83
71490: PUSH
71491: LD_INT 1
71493: ST_TO_ADDR
// if p3 = 108 then
71494: LD_VAR 0 3
71498: PUSH
71499: LD_INT 108
71501: EQUAL
71502: IFFALSE 71512
// sWound := true ;
71504: LD_ADDR_EXP 91
71508: PUSH
71509: LD_INT 1
71511: ST_TO_ADDR
// if p3 = 109 then
71512: LD_VAR 0 3
71516: PUSH
71517: LD_INT 109
71519: EQUAL
71520: IFFALSE 71530
// sBetray := true ;
71522: LD_ADDR_EXP 95
71526: PUSH
71527: LD_INT 1
71529: ST_TO_ADDR
// if p3 = 110 then
71530: LD_VAR 0 3
71534: PUSH
71535: LD_INT 110
71537: EQUAL
71538: IFFALSE 71548
// sContamin := true ;
71540: LD_ADDR_EXP 96
71544: PUSH
71545: LD_INT 1
71547: ST_TO_ADDR
// if p3 = 111 then
71548: LD_VAR 0 3
71552: PUSH
71553: LD_INT 111
71555: EQUAL
71556: IFFALSE 71566
// sOil := true ;
71558: LD_ADDR_EXP 98
71562: PUSH
71563: LD_INT 1
71565: ST_TO_ADDR
// if p3 = 112 then
71566: LD_VAR 0 3
71570: PUSH
71571: LD_INT 112
71573: EQUAL
71574: IFFALSE 71584
// sStu := true ;
71576: LD_ADDR_EXP 102
71580: PUSH
71581: LD_INT 1
71583: ST_TO_ADDR
// if p3 = 113 then
71584: LD_VAR 0 3
71588: PUSH
71589: LD_INT 113
71591: EQUAL
71592: IFFALSE 71602
// sBazooka := true ;
71594: LD_ADDR_EXP 105
71598: PUSH
71599: LD_INT 1
71601: ST_TO_ADDR
// if p3 = 114 then
71602: LD_VAR 0 3
71606: PUSH
71607: LD_INT 114
71609: EQUAL
71610: IFFALSE 71620
// sMortar := true ;
71612: LD_ADDR_EXP 106
71616: PUSH
71617: LD_INT 1
71619: ST_TO_ADDR
// if p3 = 115 then
71620: LD_VAR 0 3
71624: PUSH
71625: LD_INT 115
71627: EQUAL
71628: IFFALSE 71638
// sRanger := true ;
71630: LD_ADDR_EXP 116
71634: PUSH
71635: LD_INT 1
71637: ST_TO_ADDR
// if p3 = 116 then
71638: LD_VAR 0 3
71642: PUSH
71643: LD_INT 116
71645: EQUAL
71646: IFFALSE 71656
// sComputer := true ;
71648: LD_ADDR_EXP 117
71652: PUSH
71653: LD_INT 1
71655: ST_TO_ADDR
// if p3 = 117 then
71656: LD_VAR 0 3
71660: PUSH
71661: LD_INT 117
71663: EQUAL
71664: IFFALSE 71674
// s30 := true ;
71666: LD_ADDR_EXP 118
71670: PUSH
71671: LD_INT 1
71673: ST_TO_ADDR
// if p3 = 118 then
71674: LD_VAR 0 3
71678: PUSH
71679: LD_INT 118
71681: EQUAL
71682: IFFALSE 71692
// s60 := true ;
71684: LD_ADDR_EXP 119
71688: PUSH
71689: LD_INT 1
71691: ST_TO_ADDR
// end ; if p2 = hack_mode then
71692: LD_VAR 0 2
71696: PUSH
71697: LD_INT 101
71699: EQUAL
71700: IFFALSE 71828
// begin case p3 of 1 :
71702: LD_VAR 0 3
71706: PUSH
71707: LD_INT 1
71709: DOUBLE
71710: EQUAL
71711: IFTRUE 71715
71713: GO 71722
71715: POP
// hHackUnlimitedResources ; 2 :
71716: CALL 83967 0 0
71720: GO 71828
71722: LD_INT 2
71724: DOUBLE
71725: EQUAL
71726: IFTRUE 71730
71728: GO 71737
71730: POP
// hHackSetLevel10 ; 3 :
71731: CALL 84100 0 0
71735: GO 71828
71737: LD_INT 3
71739: DOUBLE
71740: EQUAL
71741: IFTRUE 71745
71743: GO 71752
71745: POP
// hHackSetLevel10YourUnits ; 4 :
71746: CALL 84185 0 0
71750: GO 71828
71752: LD_INT 4
71754: DOUBLE
71755: EQUAL
71756: IFTRUE 71760
71758: GO 71767
71760: POP
// hHackInvincible ; 5 :
71761: CALL 84633 0 0
71765: GO 71828
71767: LD_INT 5
71769: DOUBLE
71770: EQUAL
71771: IFTRUE 71775
71773: GO 71782
71775: POP
// hHackInvisible ; 6 :
71776: CALL 84744 0 0
71780: GO 71828
71782: LD_INT 6
71784: DOUBLE
71785: EQUAL
71786: IFTRUE 71790
71788: GO 71797
71790: POP
// hHackChangeYourSide ; 7 :
71791: CALL 84801 0 0
71795: GO 71828
71797: LD_INT 7
71799: DOUBLE
71800: EQUAL
71801: IFTRUE 71805
71803: GO 71812
71805: POP
// hHackChangeUnitSide ; 8 :
71806: CALL 84843 0 0
71810: GO 71828
71812: LD_INT 8
71814: DOUBLE
71815: EQUAL
71816: IFTRUE 71820
71818: GO 71827
71820: POP
// hHackFog ; end ;
71821: CALL 84944 0 0
71825: GO 71828
71827: POP
// end ; if p2 = game_save_mode then
71828: LD_VAR 0 2
71832: PUSH
71833: LD_INT 102
71835: EQUAL
71836: IFFALSE 71891
// begin if p3 = 1 then
71838: LD_VAR 0 3
71842: PUSH
71843: LD_INT 1
71845: EQUAL
71846: IFFALSE 71858
// globalGameSaveCounter := p4 ;
71848: LD_ADDR_EXP 62
71852: PUSH
71853: LD_VAR 0 4
71857: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
71858: LD_VAR 0 3
71862: PUSH
71863: LD_INT 2
71865: EQUAL
71866: PUSH
71867: LD_EXP 62
71871: AND
71872: IFFALSE 71891
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
71874: LD_STRING setGameSaveCounter(
71876: PUSH
71877: LD_EXP 62
71881: STR
71882: PUSH
71883: LD_STRING )
71885: STR
71886: PPUSH
71887: CALL_OW 559
// end ; end ;
71891: LD_VAR 0 7
71895: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
71896: LD_INT 0
71898: PPUSH
// streamModeActive := false ;
71899: LD_ADDR_EXP 63
71903: PUSH
71904: LD_INT 0
71906: ST_TO_ADDR
// normalCounter := 36 ;
71907: LD_ADDR_EXP 64
71911: PUSH
71912: LD_INT 36
71914: ST_TO_ADDR
// hardcoreCounter := 18 ;
71915: LD_ADDR_EXP 65
71919: PUSH
71920: LD_INT 18
71922: ST_TO_ADDR
// sRocket := false ;
71923: LD_ADDR_EXP 68
71927: PUSH
71928: LD_INT 0
71930: ST_TO_ADDR
// sSpeed := false ;
71931: LD_ADDR_EXP 67
71935: PUSH
71936: LD_INT 0
71938: ST_TO_ADDR
// sEngine := false ;
71939: LD_ADDR_EXP 69
71943: PUSH
71944: LD_INT 0
71946: ST_TO_ADDR
// sSpec := false ;
71947: LD_ADDR_EXP 66
71951: PUSH
71952: LD_INT 0
71954: ST_TO_ADDR
// sLevel := false ;
71955: LD_ADDR_EXP 70
71959: PUSH
71960: LD_INT 0
71962: ST_TO_ADDR
// sArmoury := false ;
71963: LD_ADDR_EXP 71
71967: PUSH
71968: LD_INT 0
71970: ST_TO_ADDR
// sRadar := false ;
71971: LD_ADDR_EXP 72
71975: PUSH
71976: LD_INT 0
71978: ST_TO_ADDR
// sBunker := false ;
71979: LD_ADDR_EXP 73
71983: PUSH
71984: LD_INT 0
71986: ST_TO_ADDR
// sHack := false ;
71987: LD_ADDR_EXP 74
71991: PUSH
71992: LD_INT 0
71994: ST_TO_ADDR
// sFire := false ;
71995: LD_ADDR_EXP 75
71999: PUSH
72000: LD_INT 0
72002: ST_TO_ADDR
// sRefresh := false ;
72003: LD_ADDR_EXP 76
72007: PUSH
72008: LD_INT 0
72010: ST_TO_ADDR
// sExp := false ;
72011: LD_ADDR_EXP 77
72015: PUSH
72016: LD_INT 0
72018: ST_TO_ADDR
// sDepot := false ;
72019: LD_ADDR_EXP 78
72023: PUSH
72024: LD_INT 0
72026: ST_TO_ADDR
// sFlag := false ;
72027: LD_ADDR_EXP 79
72031: PUSH
72032: LD_INT 0
72034: ST_TO_ADDR
// sKamikadze := false ;
72035: LD_ADDR_EXP 87
72039: PUSH
72040: LD_INT 0
72042: ST_TO_ADDR
// sTroll := false ;
72043: LD_ADDR_EXP 88
72047: PUSH
72048: LD_INT 0
72050: ST_TO_ADDR
// sSlow := false ;
72051: LD_ADDR_EXP 89
72055: PUSH
72056: LD_INT 0
72058: ST_TO_ADDR
// sLack := false ;
72059: LD_ADDR_EXP 90
72063: PUSH
72064: LD_INT 0
72066: ST_TO_ADDR
// sTank := false ;
72067: LD_ADDR_EXP 92
72071: PUSH
72072: LD_INT 0
72074: ST_TO_ADDR
// sRemote := false ;
72075: LD_ADDR_EXP 93
72079: PUSH
72080: LD_INT 0
72082: ST_TO_ADDR
// sPowell := false ;
72083: LD_ADDR_EXP 94
72087: PUSH
72088: LD_INT 0
72090: ST_TO_ADDR
// sTeleport := false ;
72091: LD_ADDR_EXP 97
72095: PUSH
72096: LD_INT 0
72098: ST_TO_ADDR
// sOilTower := false ;
72099: LD_ADDR_EXP 99
72103: PUSH
72104: LD_INT 0
72106: ST_TO_ADDR
// sShovel := false ;
72107: LD_ADDR_EXP 100
72111: PUSH
72112: LD_INT 0
72114: ST_TO_ADDR
// sSheik := false ;
72115: LD_ADDR_EXP 101
72119: PUSH
72120: LD_INT 0
72122: ST_TO_ADDR
// sEarthquake := false ;
72123: LD_ADDR_EXP 103
72127: PUSH
72128: LD_INT 0
72130: ST_TO_ADDR
// sAI := false ;
72131: LD_ADDR_EXP 104
72135: PUSH
72136: LD_INT 0
72138: ST_TO_ADDR
// sCargo := false ;
72139: LD_ADDR_EXP 107
72143: PUSH
72144: LD_INT 0
72146: ST_TO_ADDR
// sDLaser := false ;
72147: LD_ADDR_EXP 108
72151: PUSH
72152: LD_INT 0
72154: ST_TO_ADDR
// sExchange := false ;
72155: LD_ADDR_EXP 109
72159: PUSH
72160: LD_INT 0
72162: ST_TO_ADDR
// sFac := false ;
72163: LD_ADDR_EXP 110
72167: PUSH
72168: LD_INT 0
72170: ST_TO_ADDR
// sPower := false ;
72171: LD_ADDR_EXP 111
72175: PUSH
72176: LD_INT 0
72178: ST_TO_ADDR
// sRandom := false ;
72179: LD_ADDR_EXP 112
72183: PUSH
72184: LD_INT 0
72186: ST_TO_ADDR
// sShield := false ;
72187: LD_ADDR_EXP 113
72191: PUSH
72192: LD_INT 0
72194: ST_TO_ADDR
// sTime := false ;
72195: LD_ADDR_EXP 114
72199: PUSH
72200: LD_INT 0
72202: ST_TO_ADDR
// sTools := false ;
72203: LD_ADDR_EXP 115
72207: PUSH
72208: LD_INT 0
72210: ST_TO_ADDR
// sSold := false ;
72211: LD_ADDR_EXP 80
72215: PUSH
72216: LD_INT 0
72218: ST_TO_ADDR
// sDiff := false ;
72219: LD_ADDR_EXP 81
72223: PUSH
72224: LD_INT 0
72226: ST_TO_ADDR
// sFog := false ;
72227: LD_ADDR_EXP 84
72231: PUSH
72232: LD_INT 0
72234: ST_TO_ADDR
// sReset := false ;
72235: LD_ADDR_EXP 85
72239: PUSH
72240: LD_INT 0
72242: ST_TO_ADDR
// sSun := false ;
72243: LD_ADDR_EXP 86
72247: PUSH
72248: LD_INT 0
72250: ST_TO_ADDR
// sTiger := false ;
72251: LD_ADDR_EXP 82
72255: PUSH
72256: LD_INT 0
72258: ST_TO_ADDR
// sBomb := false ;
72259: LD_ADDR_EXP 83
72263: PUSH
72264: LD_INT 0
72266: ST_TO_ADDR
// sWound := false ;
72267: LD_ADDR_EXP 91
72271: PUSH
72272: LD_INT 0
72274: ST_TO_ADDR
// sBetray := false ;
72275: LD_ADDR_EXP 95
72279: PUSH
72280: LD_INT 0
72282: ST_TO_ADDR
// sContamin := false ;
72283: LD_ADDR_EXP 96
72287: PUSH
72288: LD_INT 0
72290: ST_TO_ADDR
// sOil := false ;
72291: LD_ADDR_EXP 98
72295: PUSH
72296: LD_INT 0
72298: ST_TO_ADDR
// sStu := false ;
72299: LD_ADDR_EXP 102
72303: PUSH
72304: LD_INT 0
72306: ST_TO_ADDR
// sBazooka := false ;
72307: LD_ADDR_EXP 105
72311: PUSH
72312: LD_INT 0
72314: ST_TO_ADDR
// sMortar := false ;
72315: LD_ADDR_EXP 106
72319: PUSH
72320: LD_INT 0
72322: ST_TO_ADDR
// sRanger := false ;
72323: LD_ADDR_EXP 116
72327: PUSH
72328: LD_INT 0
72330: ST_TO_ADDR
// sComputer := false ;
72331: LD_ADDR_EXP 117
72335: PUSH
72336: LD_INT 0
72338: ST_TO_ADDR
// s30 := false ;
72339: LD_ADDR_EXP 118
72343: PUSH
72344: LD_INT 0
72346: ST_TO_ADDR
// s60 := false ;
72347: LD_ADDR_EXP 119
72351: PUSH
72352: LD_INT 0
72354: ST_TO_ADDR
// end ;
72355: LD_VAR 0 1
72359: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
72360: LD_INT 0
72362: PPUSH
72363: PPUSH
72364: PPUSH
72365: PPUSH
72366: PPUSH
72367: PPUSH
72368: PPUSH
// result := [ ] ;
72369: LD_ADDR_VAR 0 2
72373: PUSH
72374: EMPTY
72375: ST_TO_ADDR
// if campaign_id = 1 then
72376: LD_OWVAR 69
72380: PUSH
72381: LD_INT 1
72383: EQUAL
72384: IFFALSE 75550
// begin case mission_number of 1 :
72386: LD_OWVAR 70
72390: PUSH
72391: LD_INT 1
72393: DOUBLE
72394: EQUAL
72395: IFTRUE 72399
72397: GO 72475
72399: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
72400: LD_ADDR_VAR 0 2
72404: PUSH
72405: LD_INT 2
72407: PUSH
72408: LD_INT 4
72410: PUSH
72411: LD_INT 11
72413: PUSH
72414: LD_INT 12
72416: PUSH
72417: LD_INT 15
72419: PUSH
72420: LD_INT 16
72422: PUSH
72423: LD_INT 22
72425: PUSH
72426: LD_INT 23
72428: PUSH
72429: LD_INT 26
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: PUSH
72443: LD_INT 101
72445: PUSH
72446: LD_INT 102
72448: PUSH
72449: LD_INT 106
72451: PUSH
72452: LD_INT 116
72454: PUSH
72455: LD_INT 117
72457: PUSH
72458: LD_INT 118
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: ST_TO_ADDR
72473: GO 75548
72475: LD_INT 2
72477: DOUBLE
72478: EQUAL
72479: IFTRUE 72483
72481: GO 72567
72483: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
72484: LD_ADDR_VAR 0 2
72488: PUSH
72489: LD_INT 2
72491: PUSH
72492: LD_INT 4
72494: PUSH
72495: LD_INT 11
72497: PUSH
72498: LD_INT 12
72500: PUSH
72501: LD_INT 15
72503: PUSH
72504: LD_INT 16
72506: PUSH
72507: LD_INT 22
72509: PUSH
72510: LD_INT 23
72512: PUSH
72513: LD_INT 26
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 101
72529: PUSH
72530: LD_INT 102
72532: PUSH
72533: LD_INT 105
72535: PUSH
72536: LD_INT 106
72538: PUSH
72539: LD_INT 108
72541: PUSH
72542: LD_INT 116
72544: PUSH
72545: LD_INT 117
72547: PUSH
72548: LD_INT 118
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: ST_TO_ADDR
72565: GO 75548
72567: LD_INT 3
72569: DOUBLE
72570: EQUAL
72571: IFTRUE 72575
72573: GO 72663
72575: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
72576: LD_ADDR_VAR 0 2
72580: PUSH
72581: LD_INT 2
72583: PUSH
72584: LD_INT 4
72586: PUSH
72587: LD_INT 5
72589: PUSH
72590: LD_INT 11
72592: PUSH
72593: LD_INT 12
72595: PUSH
72596: LD_INT 15
72598: PUSH
72599: LD_INT 16
72601: PUSH
72602: LD_INT 22
72604: PUSH
72605: LD_INT 26
72607: PUSH
72608: LD_INT 36
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 101
72625: PUSH
72626: LD_INT 102
72628: PUSH
72629: LD_INT 105
72631: PUSH
72632: LD_INT 106
72634: PUSH
72635: LD_INT 108
72637: PUSH
72638: LD_INT 116
72640: PUSH
72641: LD_INT 117
72643: PUSH
72644: LD_INT 118
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: ST_TO_ADDR
72661: GO 75548
72663: LD_INT 4
72665: DOUBLE
72666: EQUAL
72667: IFTRUE 72671
72669: GO 72767
72671: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
72672: LD_ADDR_VAR 0 2
72676: PUSH
72677: LD_INT 2
72679: PUSH
72680: LD_INT 4
72682: PUSH
72683: LD_INT 5
72685: PUSH
72686: LD_INT 8
72688: PUSH
72689: LD_INT 11
72691: PUSH
72692: LD_INT 12
72694: PUSH
72695: LD_INT 15
72697: PUSH
72698: LD_INT 16
72700: PUSH
72701: LD_INT 22
72703: PUSH
72704: LD_INT 23
72706: PUSH
72707: LD_INT 26
72709: PUSH
72710: LD_INT 36
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 101
72729: PUSH
72730: LD_INT 102
72732: PUSH
72733: LD_INT 105
72735: PUSH
72736: LD_INT 106
72738: PUSH
72739: LD_INT 108
72741: PUSH
72742: LD_INT 116
72744: PUSH
72745: LD_INT 117
72747: PUSH
72748: LD_INT 118
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: ST_TO_ADDR
72765: GO 75548
72767: LD_INT 5
72769: DOUBLE
72770: EQUAL
72771: IFTRUE 72775
72773: GO 72887
72775: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
72776: LD_ADDR_VAR 0 2
72780: PUSH
72781: LD_INT 2
72783: PUSH
72784: LD_INT 4
72786: PUSH
72787: LD_INT 5
72789: PUSH
72790: LD_INT 6
72792: PUSH
72793: LD_INT 8
72795: PUSH
72796: LD_INT 11
72798: PUSH
72799: LD_INT 12
72801: PUSH
72802: LD_INT 15
72804: PUSH
72805: LD_INT 16
72807: PUSH
72808: LD_INT 22
72810: PUSH
72811: LD_INT 23
72813: PUSH
72814: LD_INT 25
72816: PUSH
72817: LD_INT 26
72819: PUSH
72820: LD_INT 36
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 101
72841: PUSH
72842: LD_INT 102
72844: PUSH
72845: LD_INT 105
72847: PUSH
72848: LD_INT 106
72850: PUSH
72851: LD_INT 108
72853: PUSH
72854: LD_INT 109
72856: PUSH
72857: LD_INT 112
72859: PUSH
72860: LD_INT 116
72862: PUSH
72863: LD_INT 117
72865: PUSH
72866: LD_INT 118
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: ST_TO_ADDR
72885: GO 75548
72887: LD_INT 6
72889: DOUBLE
72890: EQUAL
72891: IFTRUE 72895
72893: GO 73027
72895: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
72896: LD_ADDR_VAR 0 2
72900: PUSH
72901: LD_INT 2
72903: PUSH
72904: LD_INT 4
72906: PUSH
72907: LD_INT 5
72909: PUSH
72910: LD_INT 6
72912: PUSH
72913: LD_INT 8
72915: PUSH
72916: LD_INT 11
72918: PUSH
72919: LD_INT 12
72921: PUSH
72922: LD_INT 15
72924: PUSH
72925: LD_INT 16
72927: PUSH
72928: LD_INT 20
72930: PUSH
72931: LD_INT 21
72933: PUSH
72934: LD_INT 22
72936: PUSH
72937: LD_INT 23
72939: PUSH
72940: LD_INT 25
72942: PUSH
72943: LD_INT 26
72945: PUSH
72946: LD_INT 30
72948: PUSH
72949: LD_INT 31
72951: PUSH
72952: LD_INT 32
72954: PUSH
72955: LD_INT 36
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: PUSH
72979: LD_INT 101
72981: PUSH
72982: LD_INT 102
72984: PUSH
72985: LD_INT 105
72987: PUSH
72988: LD_INT 106
72990: PUSH
72991: LD_INT 108
72993: PUSH
72994: LD_INT 109
72996: PUSH
72997: LD_INT 112
72999: PUSH
73000: LD_INT 116
73002: PUSH
73003: LD_INT 117
73005: PUSH
73006: LD_INT 118
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: ST_TO_ADDR
73025: GO 75548
73027: LD_INT 7
73029: DOUBLE
73030: EQUAL
73031: IFTRUE 73035
73033: GO 73147
73035: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
73036: LD_ADDR_VAR 0 2
73040: PUSH
73041: LD_INT 2
73043: PUSH
73044: LD_INT 4
73046: PUSH
73047: LD_INT 5
73049: PUSH
73050: LD_INT 7
73052: PUSH
73053: LD_INT 11
73055: PUSH
73056: LD_INT 12
73058: PUSH
73059: LD_INT 15
73061: PUSH
73062: LD_INT 16
73064: PUSH
73065: LD_INT 20
73067: PUSH
73068: LD_INT 21
73070: PUSH
73071: LD_INT 22
73073: PUSH
73074: LD_INT 23
73076: PUSH
73077: LD_INT 25
73079: PUSH
73080: LD_INT 26
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 101
73101: PUSH
73102: LD_INT 102
73104: PUSH
73105: LD_INT 103
73107: PUSH
73108: LD_INT 105
73110: PUSH
73111: LD_INT 106
73113: PUSH
73114: LD_INT 108
73116: PUSH
73117: LD_INT 112
73119: PUSH
73120: LD_INT 116
73122: PUSH
73123: LD_INT 117
73125: PUSH
73126: LD_INT 118
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: ST_TO_ADDR
73145: GO 75548
73147: LD_INT 8
73149: DOUBLE
73150: EQUAL
73151: IFTRUE 73155
73153: GO 73295
73155: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
73156: LD_ADDR_VAR 0 2
73160: PUSH
73161: LD_INT 2
73163: PUSH
73164: LD_INT 4
73166: PUSH
73167: LD_INT 5
73169: PUSH
73170: LD_INT 6
73172: PUSH
73173: LD_INT 7
73175: PUSH
73176: LD_INT 8
73178: PUSH
73179: LD_INT 11
73181: PUSH
73182: LD_INT 12
73184: PUSH
73185: LD_INT 15
73187: PUSH
73188: LD_INT 16
73190: PUSH
73191: LD_INT 20
73193: PUSH
73194: LD_INT 21
73196: PUSH
73197: LD_INT 22
73199: PUSH
73200: LD_INT 23
73202: PUSH
73203: LD_INT 25
73205: PUSH
73206: LD_INT 26
73208: PUSH
73209: LD_INT 30
73211: PUSH
73212: LD_INT 31
73214: PUSH
73215: LD_INT 32
73217: PUSH
73218: LD_INT 36
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 101
73245: PUSH
73246: LD_INT 102
73248: PUSH
73249: LD_INT 103
73251: PUSH
73252: LD_INT 105
73254: PUSH
73255: LD_INT 106
73257: PUSH
73258: LD_INT 108
73260: PUSH
73261: LD_INT 109
73263: PUSH
73264: LD_INT 112
73266: PUSH
73267: LD_INT 116
73269: PUSH
73270: LD_INT 117
73272: PUSH
73273: LD_INT 118
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: ST_TO_ADDR
73293: GO 75548
73295: LD_INT 9
73297: DOUBLE
73298: EQUAL
73299: IFTRUE 73303
73301: GO 73451
73303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
73304: LD_ADDR_VAR 0 2
73308: PUSH
73309: LD_INT 2
73311: PUSH
73312: LD_INT 4
73314: PUSH
73315: LD_INT 5
73317: PUSH
73318: LD_INT 6
73320: PUSH
73321: LD_INT 7
73323: PUSH
73324: LD_INT 8
73326: PUSH
73327: LD_INT 11
73329: PUSH
73330: LD_INT 12
73332: PUSH
73333: LD_INT 15
73335: PUSH
73336: LD_INT 16
73338: PUSH
73339: LD_INT 20
73341: PUSH
73342: LD_INT 21
73344: PUSH
73345: LD_INT 22
73347: PUSH
73348: LD_INT 23
73350: PUSH
73351: LD_INT 25
73353: PUSH
73354: LD_INT 26
73356: PUSH
73357: LD_INT 28
73359: PUSH
73360: LD_INT 30
73362: PUSH
73363: LD_INT 31
73365: PUSH
73366: LD_INT 32
73368: PUSH
73369: LD_INT 36
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: LIST
73376: LIST
73377: LIST
73378: LIST
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: LIST
73384: LIST
73385: LIST
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: LIST
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 101
73397: PUSH
73398: LD_INT 102
73400: PUSH
73401: LD_INT 103
73403: PUSH
73404: LD_INT 105
73406: PUSH
73407: LD_INT 106
73409: PUSH
73410: LD_INT 108
73412: PUSH
73413: LD_INT 109
73415: PUSH
73416: LD_INT 112
73418: PUSH
73419: LD_INT 114
73421: PUSH
73422: LD_INT 116
73424: PUSH
73425: LD_INT 117
73427: PUSH
73428: LD_INT 118
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: ST_TO_ADDR
73449: GO 75548
73451: LD_INT 10
73453: DOUBLE
73454: EQUAL
73455: IFTRUE 73459
73457: GO 73655
73459: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
73460: LD_ADDR_VAR 0 2
73464: PUSH
73465: LD_INT 2
73467: PUSH
73468: LD_INT 4
73470: PUSH
73471: LD_INT 5
73473: PUSH
73474: LD_INT 6
73476: PUSH
73477: LD_INT 7
73479: PUSH
73480: LD_INT 8
73482: PUSH
73483: LD_INT 9
73485: PUSH
73486: LD_INT 10
73488: PUSH
73489: LD_INT 11
73491: PUSH
73492: LD_INT 12
73494: PUSH
73495: LD_INT 13
73497: PUSH
73498: LD_INT 14
73500: PUSH
73501: LD_INT 15
73503: PUSH
73504: LD_INT 16
73506: PUSH
73507: LD_INT 17
73509: PUSH
73510: LD_INT 18
73512: PUSH
73513: LD_INT 19
73515: PUSH
73516: LD_INT 20
73518: PUSH
73519: LD_INT 21
73521: PUSH
73522: LD_INT 22
73524: PUSH
73525: LD_INT 23
73527: PUSH
73528: LD_INT 24
73530: PUSH
73531: LD_INT 25
73533: PUSH
73534: LD_INT 26
73536: PUSH
73537: LD_INT 28
73539: PUSH
73540: LD_INT 30
73542: PUSH
73543: LD_INT 31
73545: PUSH
73546: LD_INT 32
73548: PUSH
73549: LD_INT 36
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 101
73585: PUSH
73586: LD_INT 102
73588: PUSH
73589: LD_INT 103
73591: PUSH
73592: LD_INT 104
73594: PUSH
73595: LD_INT 105
73597: PUSH
73598: LD_INT 106
73600: PUSH
73601: LD_INT 107
73603: PUSH
73604: LD_INT 108
73606: PUSH
73607: LD_INT 109
73609: PUSH
73610: LD_INT 110
73612: PUSH
73613: LD_INT 111
73615: PUSH
73616: LD_INT 112
73618: PUSH
73619: LD_INT 114
73621: PUSH
73622: LD_INT 116
73624: PUSH
73625: LD_INT 117
73627: PUSH
73628: LD_INT 118
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: ST_TO_ADDR
73653: GO 75548
73655: LD_INT 11
73657: DOUBLE
73658: EQUAL
73659: IFTRUE 73663
73661: GO 73867
73663: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
73664: LD_ADDR_VAR 0 2
73668: PUSH
73669: LD_INT 2
73671: PUSH
73672: LD_INT 3
73674: PUSH
73675: LD_INT 4
73677: PUSH
73678: LD_INT 5
73680: PUSH
73681: LD_INT 6
73683: PUSH
73684: LD_INT 7
73686: PUSH
73687: LD_INT 8
73689: PUSH
73690: LD_INT 9
73692: PUSH
73693: LD_INT 10
73695: PUSH
73696: LD_INT 11
73698: PUSH
73699: LD_INT 12
73701: PUSH
73702: LD_INT 13
73704: PUSH
73705: LD_INT 14
73707: PUSH
73708: LD_INT 15
73710: PUSH
73711: LD_INT 16
73713: PUSH
73714: LD_INT 17
73716: PUSH
73717: LD_INT 18
73719: PUSH
73720: LD_INT 19
73722: PUSH
73723: LD_INT 20
73725: PUSH
73726: LD_INT 21
73728: PUSH
73729: LD_INT 22
73731: PUSH
73732: LD_INT 23
73734: PUSH
73735: LD_INT 24
73737: PUSH
73738: LD_INT 25
73740: PUSH
73741: LD_INT 26
73743: PUSH
73744: LD_INT 28
73746: PUSH
73747: LD_INT 30
73749: PUSH
73750: LD_INT 31
73752: PUSH
73753: LD_INT 32
73755: PUSH
73756: LD_INT 34
73758: PUSH
73759: LD_INT 36
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 101
73797: PUSH
73798: LD_INT 102
73800: PUSH
73801: LD_INT 103
73803: PUSH
73804: LD_INT 104
73806: PUSH
73807: LD_INT 105
73809: PUSH
73810: LD_INT 106
73812: PUSH
73813: LD_INT 107
73815: PUSH
73816: LD_INT 108
73818: PUSH
73819: LD_INT 109
73821: PUSH
73822: LD_INT 110
73824: PUSH
73825: LD_INT 111
73827: PUSH
73828: LD_INT 112
73830: PUSH
73831: LD_INT 114
73833: PUSH
73834: LD_INT 116
73836: PUSH
73837: LD_INT 117
73839: PUSH
73840: LD_INT 118
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: ST_TO_ADDR
73865: GO 75548
73867: LD_INT 12
73869: DOUBLE
73870: EQUAL
73871: IFTRUE 73875
73873: GO 74095
73875: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
73876: LD_ADDR_VAR 0 2
73880: PUSH
73881: LD_INT 1
73883: PUSH
73884: LD_INT 2
73886: PUSH
73887: LD_INT 3
73889: PUSH
73890: LD_INT 4
73892: PUSH
73893: LD_INT 5
73895: PUSH
73896: LD_INT 6
73898: PUSH
73899: LD_INT 7
73901: PUSH
73902: LD_INT 8
73904: PUSH
73905: LD_INT 9
73907: PUSH
73908: LD_INT 10
73910: PUSH
73911: LD_INT 11
73913: PUSH
73914: LD_INT 12
73916: PUSH
73917: LD_INT 13
73919: PUSH
73920: LD_INT 14
73922: PUSH
73923: LD_INT 15
73925: PUSH
73926: LD_INT 16
73928: PUSH
73929: LD_INT 17
73931: PUSH
73932: LD_INT 18
73934: PUSH
73935: LD_INT 19
73937: PUSH
73938: LD_INT 20
73940: PUSH
73941: LD_INT 21
73943: PUSH
73944: LD_INT 22
73946: PUSH
73947: LD_INT 23
73949: PUSH
73950: LD_INT 24
73952: PUSH
73953: LD_INT 25
73955: PUSH
73956: LD_INT 26
73958: PUSH
73959: LD_INT 27
73961: PUSH
73962: LD_INT 28
73964: PUSH
73965: LD_INT 30
73967: PUSH
73968: LD_INT 31
73970: PUSH
73971: LD_INT 32
73973: PUSH
73974: LD_INT 33
73976: PUSH
73977: LD_INT 34
73979: PUSH
73980: LD_INT 36
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: LIST
74004: LIST
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 101
74021: PUSH
74022: LD_INT 102
74024: PUSH
74025: LD_INT 103
74027: PUSH
74028: LD_INT 104
74030: PUSH
74031: LD_INT 105
74033: PUSH
74034: LD_INT 106
74036: PUSH
74037: LD_INT 107
74039: PUSH
74040: LD_INT 108
74042: PUSH
74043: LD_INT 109
74045: PUSH
74046: LD_INT 110
74048: PUSH
74049: LD_INT 111
74051: PUSH
74052: LD_INT 112
74054: PUSH
74055: LD_INT 113
74057: PUSH
74058: LD_INT 114
74060: PUSH
74061: LD_INT 116
74063: PUSH
74064: LD_INT 117
74066: PUSH
74067: LD_INT 118
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: LIST
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: ST_TO_ADDR
74093: GO 75548
74095: LD_INT 13
74097: DOUBLE
74098: EQUAL
74099: IFTRUE 74103
74101: GO 74311
74103: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
74104: LD_ADDR_VAR 0 2
74108: PUSH
74109: LD_INT 1
74111: PUSH
74112: LD_INT 2
74114: PUSH
74115: LD_INT 3
74117: PUSH
74118: LD_INT 4
74120: PUSH
74121: LD_INT 5
74123: PUSH
74124: LD_INT 8
74126: PUSH
74127: LD_INT 9
74129: PUSH
74130: LD_INT 10
74132: PUSH
74133: LD_INT 11
74135: PUSH
74136: LD_INT 12
74138: PUSH
74139: LD_INT 14
74141: PUSH
74142: LD_INT 15
74144: PUSH
74145: LD_INT 16
74147: PUSH
74148: LD_INT 17
74150: PUSH
74151: LD_INT 18
74153: PUSH
74154: LD_INT 19
74156: PUSH
74157: LD_INT 20
74159: PUSH
74160: LD_INT 21
74162: PUSH
74163: LD_INT 22
74165: PUSH
74166: LD_INT 23
74168: PUSH
74169: LD_INT 24
74171: PUSH
74172: LD_INT 25
74174: PUSH
74175: LD_INT 26
74177: PUSH
74178: LD_INT 27
74180: PUSH
74181: LD_INT 28
74183: PUSH
74184: LD_INT 30
74186: PUSH
74187: LD_INT 31
74189: PUSH
74190: LD_INT 32
74192: PUSH
74193: LD_INT 33
74195: PUSH
74196: LD_INT 34
74198: PUSH
74199: LD_INT 36
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: PUSH
74235: LD_INT 101
74237: PUSH
74238: LD_INT 102
74240: PUSH
74241: LD_INT 103
74243: PUSH
74244: LD_INT 104
74246: PUSH
74247: LD_INT 105
74249: PUSH
74250: LD_INT 106
74252: PUSH
74253: LD_INT 107
74255: PUSH
74256: LD_INT 108
74258: PUSH
74259: LD_INT 109
74261: PUSH
74262: LD_INT 110
74264: PUSH
74265: LD_INT 111
74267: PUSH
74268: LD_INT 112
74270: PUSH
74271: LD_INT 113
74273: PUSH
74274: LD_INT 114
74276: PUSH
74277: LD_INT 116
74279: PUSH
74280: LD_INT 117
74282: PUSH
74283: LD_INT 118
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: ST_TO_ADDR
74309: GO 75548
74311: LD_INT 14
74313: DOUBLE
74314: EQUAL
74315: IFTRUE 74319
74317: GO 74543
74319: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
74320: LD_ADDR_VAR 0 2
74324: PUSH
74325: LD_INT 1
74327: PUSH
74328: LD_INT 2
74330: PUSH
74331: LD_INT 3
74333: PUSH
74334: LD_INT 4
74336: PUSH
74337: LD_INT 5
74339: PUSH
74340: LD_INT 6
74342: PUSH
74343: LD_INT 7
74345: PUSH
74346: LD_INT 8
74348: PUSH
74349: LD_INT 9
74351: PUSH
74352: LD_INT 10
74354: PUSH
74355: LD_INT 11
74357: PUSH
74358: LD_INT 12
74360: PUSH
74361: LD_INT 13
74363: PUSH
74364: LD_INT 14
74366: PUSH
74367: LD_INT 15
74369: PUSH
74370: LD_INT 16
74372: PUSH
74373: LD_INT 17
74375: PUSH
74376: LD_INT 18
74378: PUSH
74379: LD_INT 19
74381: PUSH
74382: LD_INT 20
74384: PUSH
74385: LD_INT 21
74387: PUSH
74388: LD_INT 22
74390: PUSH
74391: LD_INT 23
74393: PUSH
74394: LD_INT 24
74396: PUSH
74397: LD_INT 25
74399: PUSH
74400: LD_INT 26
74402: PUSH
74403: LD_INT 27
74405: PUSH
74406: LD_INT 28
74408: PUSH
74409: LD_INT 29
74411: PUSH
74412: LD_INT 30
74414: PUSH
74415: LD_INT 31
74417: PUSH
74418: LD_INT 32
74420: PUSH
74421: LD_INT 33
74423: PUSH
74424: LD_INT 34
74426: PUSH
74427: LD_INT 36
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: LIST
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: PUSH
74467: LD_INT 101
74469: PUSH
74470: LD_INT 102
74472: PUSH
74473: LD_INT 103
74475: PUSH
74476: LD_INT 104
74478: PUSH
74479: LD_INT 105
74481: PUSH
74482: LD_INT 106
74484: PUSH
74485: LD_INT 107
74487: PUSH
74488: LD_INT 108
74490: PUSH
74491: LD_INT 109
74493: PUSH
74494: LD_INT 110
74496: PUSH
74497: LD_INT 111
74499: PUSH
74500: LD_INT 112
74502: PUSH
74503: LD_INT 113
74505: PUSH
74506: LD_INT 114
74508: PUSH
74509: LD_INT 116
74511: PUSH
74512: LD_INT 117
74514: PUSH
74515: LD_INT 118
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: ST_TO_ADDR
74541: GO 75548
74543: LD_INT 15
74545: DOUBLE
74546: EQUAL
74547: IFTRUE 74551
74549: GO 74775
74551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
74552: LD_ADDR_VAR 0 2
74556: PUSH
74557: LD_INT 1
74559: PUSH
74560: LD_INT 2
74562: PUSH
74563: LD_INT 3
74565: PUSH
74566: LD_INT 4
74568: PUSH
74569: LD_INT 5
74571: PUSH
74572: LD_INT 6
74574: PUSH
74575: LD_INT 7
74577: PUSH
74578: LD_INT 8
74580: PUSH
74581: LD_INT 9
74583: PUSH
74584: LD_INT 10
74586: PUSH
74587: LD_INT 11
74589: PUSH
74590: LD_INT 12
74592: PUSH
74593: LD_INT 13
74595: PUSH
74596: LD_INT 14
74598: PUSH
74599: LD_INT 15
74601: PUSH
74602: LD_INT 16
74604: PUSH
74605: LD_INT 17
74607: PUSH
74608: LD_INT 18
74610: PUSH
74611: LD_INT 19
74613: PUSH
74614: LD_INT 20
74616: PUSH
74617: LD_INT 21
74619: PUSH
74620: LD_INT 22
74622: PUSH
74623: LD_INT 23
74625: PUSH
74626: LD_INT 24
74628: PUSH
74629: LD_INT 25
74631: PUSH
74632: LD_INT 26
74634: PUSH
74635: LD_INT 27
74637: PUSH
74638: LD_INT 28
74640: PUSH
74641: LD_INT 29
74643: PUSH
74644: LD_INT 30
74646: PUSH
74647: LD_INT 31
74649: PUSH
74650: LD_INT 32
74652: PUSH
74653: LD_INT 33
74655: PUSH
74656: LD_INT 34
74658: PUSH
74659: LD_INT 36
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: LIST
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 101
74701: PUSH
74702: LD_INT 102
74704: PUSH
74705: LD_INT 103
74707: PUSH
74708: LD_INT 104
74710: PUSH
74711: LD_INT 105
74713: PUSH
74714: LD_INT 106
74716: PUSH
74717: LD_INT 107
74719: PUSH
74720: LD_INT 108
74722: PUSH
74723: LD_INT 109
74725: PUSH
74726: LD_INT 110
74728: PUSH
74729: LD_INT 111
74731: PUSH
74732: LD_INT 112
74734: PUSH
74735: LD_INT 113
74737: PUSH
74738: LD_INT 114
74740: PUSH
74741: LD_INT 116
74743: PUSH
74744: LD_INT 117
74746: PUSH
74747: LD_INT 118
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: PUSH
74769: EMPTY
74770: LIST
74771: LIST
74772: ST_TO_ADDR
74773: GO 75548
74775: LD_INT 16
74777: DOUBLE
74778: EQUAL
74779: IFTRUE 74783
74781: GO 74919
74783: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
74784: LD_ADDR_VAR 0 2
74788: PUSH
74789: LD_INT 2
74791: PUSH
74792: LD_INT 4
74794: PUSH
74795: LD_INT 5
74797: PUSH
74798: LD_INT 7
74800: PUSH
74801: LD_INT 11
74803: PUSH
74804: LD_INT 12
74806: PUSH
74807: LD_INT 15
74809: PUSH
74810: LD_INT 16
74812: PUSH
74813: LD_INT 20
74815: PUSH
74816: LD_INT 21
74818: PUSH
74819: LD_INT 22
74821: PUSH
74822: LD_INT 23
74824: PUSH
74825: LD_INT 25
74827: PUSH
74828: LD_INT 26
74830: PUSH
74831: LD_INT 30
74833: PUSH
74834: LD_INT 31
74836: PUSH
74837: LD_INT 32
74839: PUSH
74840: LD_INT 33
74842: PUSH
74843: LD_INT 34
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: PUSH
74867: LD_INT 101
74869: PUSH
74870: LD_INT 102
74872: PUSH
74873: LD_INT 103
74875: PUSH
74876: LD_INT 106
74878: PUSH
74879: LD_INT 108
74881: PUSH
74882: LD_INT 112
74884: PUSH
74885: LD_INT 113
74887: PUSH
74888: LD_INT 114
74890: PUSH
74891: LD_INT 116
74893: PUSH
74894: LD_INT 117
74896: PUSH
74897: LD_INT 118
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: ST_TO_ADDR
74917: GO 75548
74919: LD_INT 17
74921: DOUBLE
74922: EQUAL
74923: IFTRUE 74927
74925: GO 75151
74927: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
74928: LD_ADDR_VAR 0 2
74932: PUSH
74933: LD_INT 1
74935: PUSH
74936: LD_INT 2
74938: PUSH
74939: LD_INT 3
74941: PUSH
74942: LD_INT 4
74944: PUSH
74945: LD_INT 5
74947: PUSH
74948: LD_INT 6
74950: PUSH
74951: LD_INT 7
74953: PUSH
74954: LD_INT 8
74956: PUSH
74957: LD_INT 9
74959: PUSH
74960: LD_INT 10
74962: PUSH
74963: LD_INT 11
74965: PUSH
74966: LD_INT 12
74968: PUSH
74969: LD_INT 13
74971: PUSH
74972: LD_INT 14
74974: PUSH
74975: LD_INT 15
74977: PUSH
74978: LD_INT 16
74980: PUSH
74981: LD_INT 17
74983: PUSH
74984: LD_INT 18
74986: PUSH
74987: LD_INT 19
74989: PUSH
74990: LD_INT 20
74992: PUSH
74993: LD_INT 21
74995: PUSH
74996: LD_INT 22
74998: PUSH
74999: LD_INT 23
75001: PUSH
75002: LD_INT 24
75004: PUSH
75005: LD_INT 25
75007: PUSH
75008: LD_INT 26
75010: PUSH
75011: LD_INT 27
75013: PUSH
75014: LD_INT 28
75016: PUSH
75017: LD_INT 29
75019: PUSH
75020: LD_INT 30
75022: PUSH
75023: LD_INT 31
75025: PUSH
75026: LD_INT 32
75028: PUSH
75029: LD_INT 33
75031: PUSH
75032: LD_INT 34
75034: PUSH
75035: LD_INT 36
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: LIST
75069: LIST
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: PUSH
75075: LD_INT 101
75077: PUSH
75078: LD_INT 102
75080: PUSH
75081: LD_INT 103
75083: PUSH
75084: LD_INT 104
75086: PUSH
75087: LD_INT 105
75089: PUSH
75090: LD_INT 106
75092: PUSH
75093: LD_INT 107
75095: PUSH
75096: LD_INT 108
75098: PUSH
75099: LD_INT 109
75101: PUSH
75102: LD_INT 110
75104: PUSH
75105: LD_INT 111
75107: PUSH
75108: LD_INT 112
75110: PUSH
75111: LD_INT 113
75113: PUSH
75114: LD_INT 114
75116: PUSH
75117: LD_INT 116
75119: PUSH
75120: LD_INT 117
75122: PUSH
75123: LD_INT 118
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: ST_TO_ADDR
75149: GO 75548
75151: LD_INT 18
75153: DOUBLE
75154: EQUAL
75155: IFTRUE 75159
75157: GO 75307
75159: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
75160: LD_ADDR_VAR 0 2
75164: PUSH
75165: LD_INT 2
75167: PUSH
75168: LD_INT 4
75170: PUSH
75171: LD_INT 5
75173: PUSH
75174: LD_INT 7
75176: PUSH
75177: LD_INT 11
75179: PUSH
75180: LD_INT 12
75182: PUSH
75183: LD_INT 15
75185: PUSH
75186: LD_INT 16
75188: PUSH
75189: LD_INT 20
75191: PUSH
75192: LD_INT 21
75194: PUSH
75195: LD_INT 22
75197: PUSH
75198: LD_INT 23
75200: PUSH
75201: LD_INT 25
75203: PUSH
75204: LD_INT 26
75206: PUSH
75207: LD_INT 30
75209: PUSH
75210: LD_INT 31
75212: PUSH
75213: LD_INT 32
75215: PUSH
75216: LD_INT 33
75218: PUSH
75219: LD_INT 34
75221: PUSH
75222: LD_INT 35
75224: PUSH
75225: LD_INT 36
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: LIST
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: LIST
75244: LIST
75245: LIST
75246: LIST
75247: LIST
75248: LIST
75249: LIST
75250: PUSH
75251: LD_INT 101
75253: PUSH
75254: LD_INT 102
75256: PUSH
75257: LD_INT 103
75259: PUSH
75260: LD_INT 106
75262: PUSH
75263: LD_INT 108
75265: PUSH
75266: LD_INT 112
75268: PUSH
75269: LD_INT 113
75271: PUSH
75272: LD_INT 114
75274: PUSH
75275: LD_INT 115
75277: PUSH
75278: LD_INT 116
75280: PUSH
75281: LD_INT 117
75283: PUSH
75284: LD_INT 118
75286: PUSH
75287: EMPTY
75288: LIST
75289: LIST
75290: LIST
75291: LIST
75292: LIST
75293: LIST
75294: LIST
75295: LIST
75296: LIST
75297: LIST
75298: LIST
75299: LIST
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: ST_TO_ADDR
75305: GO 75548
75307: LD_INT 19
75309: DOUBLE
75310: EQUAL
75311: IFTRUE 75315
75313: GO 75547
75315: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
75316: LD_ADDR_VAR 0 2
75320: PUSH
75321: LD_INT 1
75323: PUSH
75324: LD_INT 2
75326: PUSH
75327: LD_INT 3
75329: PUSH
75330: LD_INT 4
75332: PUSH
75333: LD_INT 5
75335: PUSH
75336: LD_INT 6
75338: PUSH
75339: LD_INT 7
75341: PUSH
75342: LD_INT 8
75344: PUSH
75345: LD_INT 9
75347: PUSH
75348: LD_INT 10
75350: PUSH
75351: LD_INT 11
75353: PUSH
75354: LD_INT 12
75356: PUSH
75357: LD_INT 13
75359: PUSH
75360: LD_INT 14
75362: PUSH
75363: LD_INT 15
75365: PUSH
75366: LD_INT 16
75368: PUSH
75369: LD_INT 17
75371: PUSH
75372: LD_INT 18
75374: PUSH
75375: LD_INT 19
75377: PUSH
75378: LD_INT 20
75380: PUSH
75381: LD_INT 21
75383: PUSH
75384: LD_INT 22
75386: PUSH
75387: LD_INT 23
75389: PUSH
75390: LD_INT 24
75392: PUSH
75393: LD_INT 25
75395: PUSH
75396: LD_INT 26
75398: PUSH
75399: LD_INT 27
75401: PUSH
75402: LD_INT 28
75404: PUSH
75405: LD_INT 29
75407: PUSH
75408: LD_INT 30
75410: PUSH
75411: LD_INT 31
75413: PUSH
75414: LD_INT 32
75416: PUSH
75417: LD_INT 33
75419: PUSH
75420: LD_INT 34
75422: PUSH
75423: LD_INT 35
75425: PUSH
75426: LD_INT 36
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: PUSH
75467: LD_INT 101
75469: PUSH
75470: LD_INT 102
75472: PUSH
75473: LD_INT 103
75475: PUSH
75476: LD_INT 104
75478: PUSH
75479: LD_INT 105
75481: PUSH
75482: LD_INT 106
75484: PUSH
75485: LD_INT 107
75487: PUSH
75488: LD_INT 108
75490: PUSH
75491: LD_INT 109
75493: PUSH
75494: LD_INT 110
75496: PUSH
75497: LD_INT 111
75499: PUSH
75500: LD_INT 112
75502: PUSH
75503: LD_INT 113
75505: PUSH
75506: LD_INT 114
75508: PUSH
75509: LD_INT 115
75511: PUSH
75512: LD_INT 116
75514: PUSH
75515: LD_INT 117
75517: PUSH
75518: LD_INT 118
75520: PUSH
75521: EMPTY
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: ST_TO_ADDR
75545: GO 75548
75547: POP
// end else
75548: GO 75779
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
75550: LD_ADDR_VAR 0 2
75554: PUSH
75555: LD_INT 1
75557: PUSH
75558: LD_INT 2
75560: PUSH
75561: LD_INT 3
75563: PUSH
75564: LD_INT 4
75566: PUSH
75567: LD_INT 5
75569: PUSH
75570: LD_INT 6
75572: PUSH
75573: LD_INT 7
75575: PUSH
75576: LD_INT 8
75578: PUSH
75579: LD_INT 9
75581: PUSH
75582: LD_INT 10
75584: PUSH
75585: LD_INT 11
75587: PUSH
75588: LD_INT 12
75590: PUSH
75591: LD_INT 13
75593: PUSH
75594: LD_INT 14
75596: PUSH
75597: LD_INT 15
75599: PUSH
75600: LD_INT 16
75602: PUSH
75603: LD_INT 17
75605: PUSH
75606: LD_INT 18
75608: PUSH
75609: LD_INT 19
75611: PUSH
75612: LD_INT 20
75614: PUSH
75615: LD_INT 21
75617: PUSH
75618: LD_INT 22
75620: PUSH
75621: LD_INT 23
75623: PUSH
75624: LD_INT 24
75626: PUSH
75627: LD_INT 25
75629: PUSH
75630: LD_INT 26
75632: PUSH
75633: LD_INT 27
75635: PUSH
75636: LD_INT 28
75638: PUSH
75639: LD_INT 29
75641: PUSH
75642: LD_INT 30
75644: PUSH
75645: LD_INT 31
75647: PUSH
75648: LD_INT 32
75650: PUSH
75651: LD_INT 33
75653: PUSH
75654: LD_INT 34
75656: PUSH
75657: LD_INT 35
75659: PUSH
75660: LD_INT 36
75662: PUSH
75663: EMPTY
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: LIST
75671: LIST
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: LIST
75692: LIST
75693: LIST
75694: LIST
75695: LIST
75696: LIST
75697: LIST
75698: LIST
75699: LIST
75700: PUSH
75701: LD_INT 101
75703: PUSH
75704: LD_INT 102
75706: PUSH
75707: LD_INT 103
75709: PUSH
75710: LD_INT 104
75712: PUSH
75713: LD_INT 105
75715: PUSH
75716: LD_INT 106
75718: PUSH
75719: LD_INT 107
75721: PUSH
75722: LD_INT 108
75724: PUSH
75725: LD_INT 109
75727: PUSH
75728: LD_INT 110
75730: PUSH
75731: LD_INT 111
75733: PUSH
75734: LD_INT 112
75736: PUSH
75737: LD_INT 113
75739: PUSH
75740: LD_INT 114
75742: PUSH
75743: LD_INT 115
75745: PUSH
75746: LD_INT 116
75748: PUSH
75749: LD_INT 117
75751: PUSH
75752: LD_INT 118
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: LIST
75759: LIST
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: LIST
75770: LIST
75771: LIST
75772: LIST
75773: LIST
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: ST_TO_ADDR
// if result then
75779: LD_VAR 0 2
75783: IFFALSE 76569
// begin normal :=  ;
75785: LD_ADDR_VAR 0 5
75789: PUSH
75790: LD_STRING 
75792: ST_TO_ADDR
// hardcore :=  ;
75793: LD_ADDR_VAR 0 6
75797: PUSH
75798: LD_STRING 
75800: ST_TO_ADDR
// active :=  ;
75801: LD_ADDR_VAR 0 7
75805: PUSH
75806: LD_STRING 
75808: ST_TO_ADDR
// for i = 1 to normalCounter do
75809: LD_ADDR_VAR 0 8
75813: PUSH
75814: DOUBLE
75815: LD_INT 1
75817: DEC
75818: ST_TO_ADDR
75819: LD_EXP 64
75823: PUSH
75824: FOR_TO
75825: IFFALSE 75926
// begin tmp := 0 ;
75827: LD_ADDR_VAR 0 3
75831: PUSH
75832: LD_STRING 0
75834: ST_TO_ADDR
// if result [ 1 ] then
75835: LD_VAR 0 2
75839: PUSH
75840: LD_INT 1
75842: ARRAY
75843: IFFALSE 75908
// if result [ 1 ] [ 1 ] = i then
75845: LD_VAR 0 2
75849: PUSH
75850: LD_INT 1
75852: ARRAY
75853: PUSH
75854: LD_INT 1
75856: ARRAY
75857: PUSH
75858: LD_VAR 0 8
75862: EQUAL
75863: IFFALSE 75908
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
75865: LD_ADDR_VAR 0 2
75869: PUSH
75870: LD_VAR 0 2
75874: PPUSH
75875: LD_INT 1
75877: PPUSH
75878: LD_VAR 0 2
75882: PUSH
75883: LD_INT 1
75885: ARRAY
75886: PPUSH
75887: LD_INT 1
75889: PPUSH
75890: CALL_OW 3
75894: PPUSH
75895: CALL_OW 1
75899: ST_TO_ADDR
// tmp := 1 ;
75900: LD_ADDR_VAR 0 3
75904: PUSH
75905: LD_STRING 1
75907: ST_TO_ADDR
// end ; normal := normal & tmp ;
75908: LD_ADDR_VAR 0 5
75912: PUSH
75913: LD_VAR 0 5
75917: PUSH
75918: LD_VAR 0 3
75922: STR
75923: ST_TO_ADDR
// end ;
75924: GO 75824
75926: POP
75927: POP
// for i = 1 to hardcoreCounter do
75928: LD_ADDR_VAR 0 8
75932: PUSH
75933: DOUBLE
75934: LD_INT 1
75936: DEC
75937: ST_TO_ADDR
75938: LD_EXP 65
75942: PUSH
75943: FOR_TO
75944: IFFALSE 76049
// begin tmp := 0 ;
75946: LD_ADDR_VAR 0 3
75950: PUSH
75951: LD_STRING 0
75953: ST_TO_ADDR
// if result [ 2 ] then
75954: LD_VAR 0 2
75958: PUSH
75959: LD_INT 2
75961: ARRAY
75962: IFFALSE 76031
// if result [ 2 ] [ 1 ] = 100 + i then
75964: LD_VAR 0 2
75968: PUSH
75969: LD_INT 2
75971: ARRAY
75972: PUSH
75973: LD_INT 1
75975: ARRAY
75976: PUSH
75977: LD_INT 100
75979: PUSH
75980: LD_VAR 0 8
75984: PLUS
75985: EQUAL
75986: IFFALSE 76031
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
75988: LD_ADDR_VAR 0 2
75992: PUSH
75993: LD_VAR 0 2
75997: PPUSH
75998: LD_INT 2
76000: PPUSH
76001: LD_VAR 0 2
76005: PUSH
76006: LD_INT 2
76008: ARRAY
76009: PPUSH
76010: LD_INT 1
76012: PPUSH
76013: CALL_OW 3
76017: PPUSH
76018: CALL_OW 1
76022: ST_TO_ADDR
// tmp := 1 ;
76023: LD_ADDR_VAR 0 3
76027: PUSH
76028: LD_STRING 1
76030: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
76031: LD_ADDR_VAR 0 6
76035: PUSH
76036: LD_VAR 0 6
76040: PUSH
76041: LD_VAR 0 3
76045: STR
76046: ST_TO_ADDR
// end ;
76047: GO 75943
76049: POP
76050: POP
// if isGameLoad then
76051: LD_VAR 0 1
76055: IFFALSE 76530
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
76057: LD_ADDR_VAR 0 4
76061: PUSH
76062: LD_EXP 68
76066: PUSH
76067: LD_EXP 67
76071: PUSH
76072: LD_EXP 69
76076: PUSH
76077: LD_EXP 66
76081: PUSH
76082: LD_EXP 70
76086: PUSH
76087: LD_EXP 71
76091: PUSH
76092: LD_EXP 72
76096: PUSH
76097: LD_EXP 73
76101: PUSH
76102: LD_EXP 74
76106: PUSH
76107: LD_EXP 75
76111: PUSH
76112: LD_EXP 76
76116: PUSH
76117: LD_EXP 77
76121: PUSH
76122: LD_EXP 78
76126: PUSH
76127: LD_EXP 79
76131: PUSH
76132: LD_EXP 87
76136: PUSH
76137: LD_EXP 88
76141: PUSH
76142: LD_EXP 89
76146: PUSH
76147: LD_EXP 90
76151: PUSH
76152: LD_EXP 92
76156: PUSH
76157: LD_EXP 93
76161: PUSH
76162: LD_EXP 94
76166: PUSH
76167: LD_EXP 97
76171: PUSH
76172: LD_EXP 99
76176: PUSH
76177: LD_EXP 100
76181: PUSH
76182: LD_EXP 101
76186: PUSH
76187: LD_EXP 103
76191: PUSH
76192: LD_EXP 104
76196: PUSH
76197: LD_EXP 107
76201: PUSH
76202: LD_EXP 108
76206: PUSH
76207: LD_EXP 109
76211: PUSH
76212: LD_EXP 110
76216: PUSH
76217: LD_EXP 111
76221: PUSH
76222: LD_EXP 112
76226: PUSH
76227: LD_EXP 113
76231: PUSH
76232: LD_EXP 114
76236: PUSH
76237: LD_EXP 115
76241: PUSH
76242: LD_EXP 80
76246: PUSH
76247: LD_EXP 81
76251: PUSH
76252: LD_EXP 84
76256: PUSH
76257: LD_EXP 85
76261: PUSH
76262: LD_EXP 86
76266: PUSH
76267: LD_EXP 82
76271: PUSH
76272: LD_EXP 83
76276: PUSH
76277: LD_EXP 91
76281: PUSH
76282: LD_EXP 95
76286: PUSH
76287: LD_EXP 96
76291: PUSH
76292: LD_EXP 98
76296: PUSH
76297: LD_EXP 102
76301: PUSH
76302: LD_EXP 105
76306: PUSH
76307: LD_EXP 106
76311: PUSH
76312: LD_EXP 116
76316: PUSH
76317: LD_EXP 117
76321: PUSH
76322: LD_EXP 118
76326: PUSH
76327: LD_EXP 119
76331: PUSH
76332: EMPTY
76333: LIST
76334: LIST
76335: LIST
76336: LIST
76337: LIST
76338: LIST
76339: LIST
76340: LIST
76341: LIST
76342: LIST
76343: LIST
76344: LIST
76345: LIST
76346: LIST
76347: LIST
76348: LIST
76349: LIST
76350: LIST
76351: LIST
76352: LIST
76353: LIST
76354: LIST
76355: LIST
76356: LIST
76357: LIST
76358: LIST
76359: LIST
76360: LIST
76361: LIST
76362: LIST
76363: LIST
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: LIST
76369: LIST
76370: LIST
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: LIST
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: ST_TO_ADDR
// tmp :=  ;
76388: LD_ADDR_VAR 0 3
76392: PUSH
76393: LD_STRING 
76395: ST_TO_ADDR
// for i = 1 to normalCounter do
76396: LD_ADDR_VAR 0 8
76400: PUSH
76401: DOUBLE
76402: LD_INT 1
76404: DEC
76405: ST_TO_ADDR
76406: LD_EXP 64
76410: PUSH
76411: FOR_TO
76412: IFFALSE 76448
// begin if flags [ i ] then
76414: LD_VAR 0 4
76418: PUSH
76419: LD_VAR 0 8
76423: ARRAY
76424: IFFALSE 76446
// tmp := tmp & i & ; ;
76426: LD_ADDR_VAR 0 3
76430: PUSH
76431: LD_VAR 0 3
76435: PUSH
76436: LD_VAR 0 8
76440: STR
76441: PUSH
76442: LD_STRING ;
76444: STR
76445: ST_TO_ADDR
// end ;
76446: GO 76411
76448: POP
76449: POP
// for i = 1 to hardcoreCounter do
76450: LD_ADDR_VAR 0 8
76454: PUSH
76455: DOUBLE
76456: LD_INT 1
76458: DEC
76459: ST_TO_ADDR
76460: LD_EXP 65
76464: PUSH
76465: FOR_TO
76466: IFFALSE 76512
// begin if flags [ normalCounter + i ] then
76468: LD_VAR 0 4
76472: PUSH
76473: LD_EXP 64
76477: PUSH
76478: LD_VAR 0 8
76482: PLUS
76483: ARRAY
76484: IFFALSE 76510
// tmp := tmp & ( 100 + i ) & ; ;
76486: LD_ADDR_VAR 0 3
76490: PUSH
76491: LD_VAR 0 3
76495: PUSH
76496: LD_INT 100
76498: PUSH
76499: LD_VAR 0 8
76503: PLUS
76504: STR
76505: PUSH
76506: LD_STRING ;
76508: STR
76509: ST_TO_ADDR
// end ;
76510: GO 76465
76512: POP
76513: POP
// if tmp then
76514: LD_VAR 0 3
76518: IFFALSE 76530
// active := tmp ;
76520: LD_ADDR_VAR 0 7
76524: PUSH
76525: LD_VAR 0 3
76529: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
76530: LD_STRING getStreamItemsFromMission("
76532: PUSH
76533: LD_VAR 0 5
76537: STR
76538: PUSH
76539: LD_STRING ","
76541: STR
76542: PUSH
76543: LD_VAR 0 6
76547: STR
76548: PUSH
76549: LD_STRING ","
76551: STR
76552: PUSH
76553: LD_VAR 0 7
76557: STR
76558: PUSH
76559: LD_STRING ")
76561: STR
76562: PPUSH
76563: CALL_OW 559
// end else
76567: GO 76576
// ToLua ( getStreamItemsFromMission("","","") ) ;
76569: LD_STRING getStreamItemsFromMission("","","")
76571: PPUSH
76572: CALL_OW 559
// end ;
76576: LD_VAR 0 2
76580: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
76581: LD_EXP 63
76585: PUSH
76586: LD_EXP 68
76590: AND
76591: IFFALSE 76715
76593: GO 76595
76595: DISABLE
76596: LD_INT 0
76598: PPUSH
76599: PPUSH
// begin enable ;
76600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
76601: LD_ADDR_VAR 0 2
76605: PUSH
76606: LD_INT 22
76608: PUSH
76609: LD_OWVAR 2
76613: PUSH
76614: EMPTY
76615: LIST
76616: LIST
76617: PUSH
76618: LD_INT 2
76620: PUSH
76621: LD_INT 34
76623: PUSH
76624: LD_INT 7
76626: PUSH
76627: EMPTY
76628: LIST
76629: LIST
76630: PUSH
76631: LD_INT 34
76633: PUSH
76634: LD_INT 45
76636: PUSH
76637: EMPTY
76638: LIST
76639: LIST
76640: PUSH
76641: LD_INT 34
76643: PUSH
76644: LD_INT 28
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: PUSH
76651: LD_INT 34
76653: PUSH
76654: LD_INT 47
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: PUSH
76668: EMPTY
76669: LIST
76670: LIST
76671: PPUSH
76672: CALL_OW 69
76676: ST_TO_ADDR
// if not tmp then
76677: LD_VAR 0 2
76681: NOT
76682: IFFALSE 76686
// exit ;
76684: GO 76715
// for i in tmp do
76686: LD_ADDR_VAR 0 1
76690: PUSH
76691: LD_VAR 0 2
76695: PUSH
76696: FOR_IN
76697: IFFALSE 76713
// begin SetLives ( i , 0 ) ;
76699: LD_VAR 0 1
76703: PPUSH
76704: LD_INT 0
76706: PPUSH
76707: CALL_OW 234
// end ;
76711: GO 76696
76713: POP
76714: POP
// end ;
76715: PPOPN 2
76717: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
76718: LD_EXP 63
76722: PUSH
76723: LD_EXP 69
76727: AND
76728: IFFALSE 76812
76730: GO 76732
76732: DISABLE
76733: LD_INT 0
76735: PPUSH
76736: PPUSH
// begin enable ;
76737: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
76738: LD_ADDR_VAR 0 2
76742: PUSH
76743: LD_INT 22
76745: PUSH
76746: LD_OWVAR 2
76750: PUSH
76751: EMPTY
76752: LIST
76753: LIST
76754: PUSH
76755: LD_INT 32
76757: PUSH
76758: LD_INT 3
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: EMPTY
76766: LIST
76767: LIST
76768: PPUSH
76769: CALL_OW 69
76773: ST_TO_ADDR
// if not tmp then
76774: LD_VAR 0 2
76778: NOT
76779: IFFALSE 76783
// exit ;
76781: GO 76812
// for i in tmp do
76783: LD_ADDR_VAR 0 1
76787: PUSH
76788: LD_VAR 0 2
76792: PUSH
76793: FOR_IN
76794: IFFALSE 76810
// begin SetLives ( i , 0 ) ;
76796: LD_VAR 0 1
76800: PPUSH
76801: LD_INT 0
76803: PPUSH
76804: CALL_OW 234
// end ;
76808: GO 76793
76810: POP
76811: POP
// end ;
76812: PPOPN 2
76814: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
76815: LD_EXP 63
76819: PUSH
76820: LD_EXP 66
76824: AND
76825: IFFALSE 76918
76827: GO 76829
76829: DISABLE
76830: LD_INT 0
76832: PPUSH
// begin enable ;
76833: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
76834: LD_ADDR_VAR 0 1
76838: PUSH
76839: LD_INT 22
76841: PUSH
76842: LD_OWVAR 2
76846: PUSH
76847: EMPTY
76848: LIST
76849: LIST
76850: PUSH
76851: LD_INT 2
76853: PUSH
76854: LD_INT 25
76856: PUSH
76857: LD_INT 5
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: PUSH
76864: LD_INT 25
76866: PUSH
76867: LD_INT 9
76869: PUSH
76870: EMPTY
76871: LIST
76872: LIST
76873: PUSH
76874: LD_INT 25
76876: PUSH
76877: LD_INT 8
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: LIST
76888: LIST
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PPUSH
76894: CALL_OW 69
76898: PUSH
76899: FOR_IN
76900: IFFALSE 76916
// begin SetClass ( i , 1 ) ;
76902: LD_VAR 0 1
76906: PPUSH
76907: LD_INT 1
76909: PPUSH
76910: CALL_OW 336
// end ;
76914: GO 76899
76916: POP
76917: POP
// end ;
76918: PPOPN 1
76920: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
76921: LD_EXP 63
76925: PUSH
76926: LD_EXP 67
76930: AND
76931: PUSH
76932: LD_OWVAR 65
76936: PUSH
76937: LD_INT 7
76939: LESS
76940: AND
76941: IFFALSE 76955
76943: GO 76945
76945: DISABLE
// begin enable ;
76946: ENABLE
// game_speed := 7 ;
76947: LD_ADDR_OWVAR 65
76951: PUSH
76952: LD_INT 7
76954: ST_TO_ADDR
// end ;
76955: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
76956: LD_EXP 63
76960: PUSH
76961: LD_EXP 70
76965: AND
76966: IFFALSE 77168
76968: GO 76970
76970: DISABLE
76971: LD_INT 0
76973: PPUSH
76974: PPUSH
76975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76976: LD_ADDR_VAR 0 3
76980: PUSH
76981: LD_INT 81
76983: PUSH
76984: LD_OWVAR 2
76988: PUSH
76989: EMPTY
76990: LIST
76991: LIST
76992: PUSH
76993: LD_INT 21
76995: PUSH
76996: LD_INT 1
76998: PUSH
76999: EMPTY
77000: LIST
77001: LIST
77002: PUSH
77003: EMPTY
77004: LIST
77005: LIST
77006: PPUSH
77007: CALL_OW 69
77011: ST_TO_ADDR
// if not tmp then
77012: LD_VAR 0 3
77016: NOT
77017: IFFALSE 77021
// exit ;
77019: GO 77168
// if tmp > 5 then
77021: LD_VAR 0 3
77025: PUSH
77026: LD_INT 5
77028: GREATER
77029: IFFALSE 77041
// k := 5 else
77031: LD_ADDR_VAR 0 2
77035: PUSH
77036: LD_INT 5
77038: ST_TO_ADDR
77039: GO 77051
// k := tmp ;
77041: LD_ADDR_VAR 0 2
77045: PUSH
77046: LD_VAR 0 3
77050: ST_TO_ADDR
// for i := 1 to k do
77051: LD_ADDR_VAR 0 1
77055: PUSH
77056: DOUBLE
77057: LD_INT 1
77059: DEC
77060: ST_TO_ADDR
77061: LD_VAR 0 2
77065: PUSH
77066: FOR_TO
77067: IFFALSE 77166
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
77069: LD_VAR 0 3
77073: PUSH
77074: LD_VAR 0 1
77078: ARRAY
77079: PPUSH
77080: LD_VAR 0 1
77084: PUSH
77085: LD_INT 4
77087: MOD
77088: PUSH
77089: LD_INT 1
77091: PLUS
77092: PPUSH
77093: CALL_OW 259
77097: PUSH
77098: LD_INT 10
77100: LESS
77101: IFFALSE 77164
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
77103: LD_VAR 0 3
77107: PUSH
77108: LD_VAR 0 1
77112: ARRAY
77113: PPUSH
77114: LD_VAR 0 1
77118: PUSH
77119: LD_INT 4
77121: MOD
77122: PUSH
77123: LD_INT 1
77125: PLUS
77126: PPUSH
77127: LD_VAR 0 3
77131: PUSH
77132: LD_VAR 0 1
77136: ARRAY
77137: PPUSH
77138: LD_VAR 0 1
77142: PUSH
77143: LD_INT 4
77145: MOD
77146: PUSH
77147: LD_INT 1
77149: PLUS
77150: PPUSH
77151: CALL_OW 259
77155: PUSH
77156: LD_INT 1
77158: PLUS
77159: PPUSH
77160: CALL_OW 237
77164: GO 77066
77166: POP
77167: POP
// end ;
77168: PPOPN 3
77170: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
77171: LD_EXP 63
77175: PUSH
77176: LD_EXP 71
77180: AND
77181: IFFALSE 77201
77183: GO 77185
77185: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
77186: LD_INT 4
77188: PPUSH
77189: LD_OWVAR 2
77193: PPUSH
77194: LD_INT 0
77196: PPUSH
77197: CALL_OW 324
77201: END
// every 0 0$1 trigger StreamModeActive and sShovel do
77202: LD_EXP 63
77206: PUSH
77207: LD_EXP 100
77211: AND
77212: IFFALSE 77232
77214: GO 77216
77216: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
77217: LD_INT 19
77219: PPUSH
77220: LD_OWVAR 2
77224: PPUSH
77225: LD_INT 0
77227: PPUSH
77228: CALL_OW 324
77232: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
77233: LD_EXP 63
77237: PUSH
77238: LD_EXP 72
77242: AND
77243: IFFALSE 77345
77245: GO 77247
77247: DISABLE
77248: LD_INT 0
77250: PPUSH
77251: PPUSH
// begin enable ;
77252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
77253: LD_ADDR_VAR 0 2
77257: PUSH
77258: LD_INT 22
77260: PUSH
77261: LD_OWVAR 2
77265: PUSH
77266: EMPTY
77267: LIST
77268: LIST
77269: PUSH
77270: LD_INT 2
77272: PUSH
77273: LD_INT 34
77275: PUSH
77276: LD_INT 11
77278: PUSH
77279: EMPTY
77280: LIST
77281: LIST
77282: PUSH
77283: LD_INT 34
77285: PUSH
77286: LD_INT 30
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: LIST
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: PPUSH
77302: CALL_OW 69
77306: ST_TO_ADDR
// if not tmp then
77307: LD_VAR 0 2
77311: NOT
77312: IFFALSE 77316
// exit ;
77314: GO 77345
// for i in tmp do
77316: LD_ADDR_VAR 0 1
77320: PUSH
77321: LD_VAR 0 2
77325: PUSH
77326: FOR_IN
77327: IFFALSE 77343
// begin SetLives ( i , 0 ) ;
77329: LD_VAR 0 1
77333: PPUSH
77334: LD_INT 0
77336: PPUSH
77337: CALL_OW 234
// end ;
77341: GO 77326
77343: POP
77344: POP
// end ;
77345: PPOPN 2
77347: END
// every 0 0$1 trigger StreamModeActive and sBunker do
77348: LD_EXP 63
77352: PUSH
77353: LD_EXP 73
77357: AND
77358: IFFALSE 77378
77360: GO 77362
77362: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
77363: LD_INT 32
77365: PPUSH
77366: LD_OWVAR 2
77370: PPUSH
77371: LD_INT 0
77373: PPUSH
77374: CALL_OW 324
77378: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
77379: LD_EXP 63
77383: PUSH
77384: LD_EXP 74
77388: AND
77389: IFFALSE 77570
77391: GO 77393
77393: DISABLE
77394: LD_INT 0
77396: PPUSH
77397: PPUSH
77398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
77399: LD_ADDR_VAR 0 2
77403: PUSH
77404: LD_INT 22
77406: PUSH
77407: LD_OWVAR 2
77411: PUSH
77412: EMPTY
77413: LIST
77414: LIST
77415: PUSH
77416: LD_INT 33
77418: PUSH
77419: LD_INT 3
77421: PUSH
77422: EMPTY
77423: LIST
77424: LIST
77425: PUSH
77426: EMPTY
77427: LIST
77428: LIST
77429: PPUSH
77430: CALL_OW 69
77434: ST_TO_ADDR
// if not tmp then
77435: LD_VAR 0 2
77439: NOT
77440: IFFALSE 77444
// exit ;
77442: GO 77570
// side := 0 ;
77444: LD_ADDR_VAR 0 3
77448: PUSH
77449: LD_INT 0
77451: ST_TO_ADDR
// for i := 1 to 8 do
77452: LD_ADDR_VAR 0 1
77456: PUSH
77457: DOUBLE
77458: LD_INT 1
77460: DEC
77461: ST_TO_ADDR
77462: LD_INT 8
77464: PUSH
77465: FOR_TO
77466: IFFALSE 77514
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
77468: LD_OWVAR 2
77472: PUSH
77473: LD_VAR 0 1
77477: NONEQUAL
77478: PUSH
77479: LD_OWVAR 2
77483: PPUSH
77484: LD_VAR 0 1
77488: PPUSH
77489: CALL_OW 81
77493: PUSH
77494: LD_INT 2
77496: EQUAL
77497: AND
77498: IFFALSE 77512
// begin side := i ;
77500: LD_ADDR_VAR 0 3
77504: PUSH
77505: LD_VAR 0 1
77509: ST_TO_ADDR
// break ;
77510: GO 77514
// end ;
77512: GO 77465
77514: POP
77515: POP
// if not side then
77516: LD_VAR 0 3
77520: NOT
77521: IFFALSE 77525
// exit ;
77523: GO 77570
// for i := 1 to tmp do
77525: LD_ADDR_VAR 0 1
77529: PUSH
77530: DOUBLE
77531: LD_INT 1
77533: DEC
77534: ST_TO_ADDR
77535: LD_VAR 0 2
77539: PUSH
77540: FOR_TO
77541: IFFALSE 77568
// if Prob ( 60 ) then
77543: LD_INT 60
77545: PPUSH
77546: CALL_OW 13
77550: IFFALSE 77566
// SetSide ( i , side ) ;
77552: LD_VAR 0 1
77556: PPUSH
77557: LD_VAR 0 3
77561: PPUSH
77562: CALL_OW 235
77566: GO 77540
77568: POP
77569: POP
// end ;
77570: PPOPN 3
77572: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
77573: LD_EXP 63
77577: PUSH
77578: LD_EXP 76
77582: AND
77583: IFFALSE 77702
77585: GO 77587
77587: DISABLE
77588: LD_INT 0
77590: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
77591: LD_ADDR_VAR 0 1
77595: PUSH
77596: LD_INT 22
77598: PUSH
77599: LD_OWVAR 2
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: PUSH
77608: LD_INT 21
77610: PUSH
77611: LD_INT 1
77613: PUSH
77614: EMPTY
77615: LIST
77616: LIST
77617: PUSH
77618: LD_INT 3
77620: PUSH
77621: LD_INT 23
77623: PUSH
77624: LD_INT 0
77626: PUSH
77627: EMPTY
77628: LIST
77629: LIST
77630: PUSH
77631: EMPTY
77632: LIST
77633: LIST
77634: PUSH
77635: EMPTY
77636: LIST
77637: LIST
77638: LIST
77639: PPUSH
77640: CALL_OW 69
77644: PUSH
77645: FOR_IN
77646: IFFALSE 77700
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
77648: LD_VAR 0 1
77652: PPUSH
77653: CALL_OW 257
77657: PUSH
77658: LD_INT 1
77660: PUSH
77661: LD_INT 2
77663: PUSH
77664: LD_INT 3
77666: PUSH
77667: LD_INT 4
77669: PUSH
77670: EMPTY
77671: LIST
77672: LIST
77673: LIST
77674: LIST
77675: IN
77676: IFFALSE 77698
// SetClass ( un , rand ( 1 , 4 ) ) ;
77678: LD_VAR 0 1
77682: PPUSH
77683: LD_INT 1
77685: PPUSH
77686: LD_INT 4
77688: PPUSH
77689: CALL_OW 12
77693: PPUSH
77694: CALL_OW 336
77698: GO 77645
77700: POP
77701: POP
// end ;
77702: PPOPN 1
77704: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
77705: LD_EXP 63
77709: PUSH
77710: LD_EXP 75
77714: AND
77715: IFFALSE 77794
77717: GO 77719
77719: DISABLE
77720: LD_INT 0
77722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77723: LD_ADDR_VAR 0 1
77727: PUSH
77728: LD_INT 22
77730: PUSH
77731: LD_OWVAR 2
77735: PUSH
77736: EMPTY
77737: LIST
77738: LIST
77739: PUSH
77740: LD_INT 21
77742: PUSH
77743: LD_INT 3
77745: PUSH
77746: EMPTY
77747: LIST
77748: LIST
77749: PUSH
77750: EMPTY
77751: LIST
77752: LIST
77753: PPUSH
77754: CALL_OW 69
77758: ST_TO_ADDR
// if not tmp then
77759: LD_VAR 0 1
77763: NOT
77764: IFFALSE 77768
// exit ;
77766: GO 77794
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
77768: LD_VAR 0 1
77772: PUSH
77773: LD_INT 1
77775: PPUSH
77776: LD_VAR 0 1
77780: PPUSH
77781: CALL_OW 12
77785: ARRAY
77786: PPUSH
77787: LD_INT 100
77789: PPUSH
77790: CALL_OW 234
// end ;
77794: PPOPN 1
77796: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
77797: LD_EXP 63
77801: PUSH
77802: LD_EXP 77
77806: AND
77807: IFFALSE 77905
77809: GO 77811
77811: DISABLE
77812: LD_INT 0
77814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77815: LD_ADDR_VAR 0 1
77819: PUSH
77820: LD_INT 22
77822: PUSH
77823: LD_OWVAR 2
77827: PUSH
77828: EMPTY
77829: LIST
77830: LIST
77831: PUSH
77832: LD_INT 21
77834: PUSH
77835: LD_INT 1
77837: PUSH
77838: EMPTY
77839: LIST
77840: LIST
77841: PUSH
77842: EMPTY
77843: LIST
77844: LIST
77845: PPUSH
77846: CALL_OW 69
77850: ST_TO_ADDR
// if not tmp then
77851: LD_VAR 0 1
77855: NOT
77856: IFFALSE 77860
// exit ;
77858: GO 77905
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
77860: LD_VAR 0 1
77864: PUSH
77865: LD_INT 1
77867: PPUSH
77868: LD_VAR 0 1
77872: PPUSH
77873: CALL_OW 12
77877: ARRAY
77878: PPUSH
77879: LD_INT 1
77881: PPUSH
77882: LD_INT 4
77884: PPUSH
77885: CALL_OW 12
77889: PPUSH
77890: LD_INT 3000
77892: PPUSH
77893: LD_INT 9000
77895: PPUSH
77896: CALL_OW 12
77900: PPUSH
77901: CALL_OW 492
// end ;
77905: PPOPN 1
77907: END
// every 0 0$1 trigger StreamModeActive and sDepot do
77908: LD_EXP 63
77912: PUSH
77913: LD_EXP 78
77917: AND
77918: IFFALSE 77938
77920: GO 77922
77922: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
77923: LD_INT 1
77925: PPUSH
77926: LD_OWVAR 2
77930: PPUSH
77931: LD_INT 0
77933: PPUSH
77934: CALL_OW 324
77938: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
77939: LD_EXP 63
77943: PUSH
77944: LD_EXP 79
77948: AND
77949: IFFALSE 78032
77951: GO 77953
77953: DISABLE
77954: LD_INT 0
77956: PPUSH
77957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
77958: LD_ADDR_VAR 0 2
77962: PUSH
77963: LD_INT 22
77965: PUSH
77966: LD_OWVAR 2
77970: PUSH
77971: EMPTY
77972: LIST
77973: LIST
77974: PUSH
77975: LD_INT 21
77977: PUSH
77978: LD_INT 3
77980: PUSH
77981: EMPTY
77982: LIST
77983: LIST
77984: PUSH
77985: EMPTY
77986: LIST
77987: LIST
77988: PPUSH
77989: CALL_OW 69
77993: ST_TO_ADDR
// if not tmp then
77994: LD_VAR 0 2
77998: NOT
77999: IFFALSE 78003
// exit ;
78001: GO 78032
// for i in tmp do
78003: LD_ADDR_VAR 0 1
78007: PUSH
78008: LD_VAR 0 2
78012: PUSH
78013: FOR_IN
78014: IFFALSE 78030
// SetBLevel ( i , 10 ) ;
78016: LD_VAR 0 1
78020: PPUSH
78021: LD_INT 10
78023: PPUSH
78024: CALL_OW 241
78028: GO 78013
78030: POP
78031: POP
// end ;
78032: PPOPN 2
78034: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
78035: LD_EXP 63
78039: PUSH
78040: LD_EXP 80
78044: AND
78045: IFFALSE 78156
78047: GO 78049
78049: DISABLE
78050: LD_INT 0
78052: PPUSH
78053: PPUSH
78054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78055: LD_ADDR_VAR 0 3
78059: PUSH
78060: LD_INT 22
78062: PUSH
78063: LD_OWVAR 2
78067: PUSH
78068: EMPTY
78069: LIST
78070: LIST
78071: PUSH
78072: LD_INT 25
78074: PUSH
78075: LD_INT 1
78077: PUSH
78078: EMPTY
78079: LIST
78080: LIST
78081: PUSH
78082: EMPTY
78083: LIST
78084: LIST
78085: PPUSH
78086: CALL_OW 69
78090: ST_TO_ADDR
// if not tmp then
78091: LD_VAR 0 3
78095: NOT
78096: IFFALSE 78100
// exit ;
78098: GO 78156
// un := tmp [ rand ( 1 , tmp ) ] ;
78100: LD_ADDR_VAR 0 2
78104: PUSH
78105: LD_VAR 0 3
78109: PUSH
78110: LD_INT 1
78112: PPUSH
78113: LD_VAR 0 3
78117: PPUSH
78118: CALL_OW 12
78122: ARRAY
78123: ST_TO_ADDR
// if Crawls ( un ) then
78124: LD_VAR 0 2
78128: PPUSH
78129: CALL_OW 318
78133: IFFALSE 78144
// ComWalk ( un ) ;
78135: LD_VAR 0 2
78139: PPUSH
78140: CALL_OW 138
// SetClass ( un , class_sniper ) ;
78144: LD_VAR 0 2
78148: PPUSH
78149: LD_INT 5
78151: PPUSH
78152: CALL_OW 336
// end ;
78156: PPOPN 3
78158: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
78159: LD_EXP 63
78163: PUSH
78164: LD_EXP 81
78168: AND
78169: PUSH
78170: LD_OWVAR 67
78174: PUSH
78175: LD_INT 4
78177: LESS
78178: AND
78179: IFFALSE 78198
78181: GO 78183
78183: DISABLE
// begin Difficulty := Difficulty + 1 ;
78184: LD_ADDR_OWVAR 67
78188: PUSH
78189: LD_OWVAR 67
78193: PUSH
78194: LD_INT 1
78196: PLUS
78197: ST_TO_ADDR
// end ;
78198: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
78199: LD_EXP 63
78203: PUSH
78204: LD_EXP 82
78208: AND
78209: IFFALSE 78312
78211: GO 78213
78213: DISABLE
78214: LD_INT 0
78216: PPUSH
// begin for i := 1 to 5 do
78217: LD_ADDR_VAR 0 1
78221: PUSH
78222: DOUBLE
78223: LD_INT 1
78225: DEC
78226: ST_TO_ADDR
78227: LD_INT 5
78229: PUSH
78230: FOR_TO
78231: IFFALSE 78310
// begin uc_nation := nation_nature ;
78233: LD_ADDR_OWVAR 21
78237: PUSH
78238: LD_INT 0
78240: ST_TO_ADDR
// uc_side := 0 ;
78241: LD_ADDR_OWVAR 20
78245: PUSH
78246: LD_INT 0
78248: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78249: LD_ADDR_OWVAR 29
78253: PUSH
78254: LD_INT 12
78256: PUSH
78257: LD_INT 12
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: ST_TO_ADDR
// hc_agressivity := 20 ;
78264: LD_ADDR_OWVAR 35
78268: PUSH
78269: LD_INT 20
78271: ST_TO_ADDR
// hc_class := class_tiger ;
78272: LD_ADDR_OWVAR 28
78276: PUSH
78277: LD_INT 14
78279: ST_TO_ADDR
// hc_gallery :=  ;
78280: LD_ADDR_OWVAR 33
78284: PUSH
78285: LD_STRING 
78287: ST_TO_ADDR
// hc_name :=  ;
78288: LD_ADDR_OWVAR 26
78292: PUSH
78293: LD_STRING 
78295: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
78296: CALL_OW 44
78300: PPUSH
78301: LD_INT 0
78303: PPUSH
78304: CALL_OW 51
// end ;
78308: GO 78230
78310: POP
78311: POP
// end ;
78312: PPOPN 1
78314: END
// every 0 0$1 trigger StreamModeActive and sBomb do
78315: LD_EXP 63
78319: PUSH
78320: LD_EXP 83
78324: AND
78325: IFFALSE 78334
78327: GO 78329
78329: DISABLE
// StreamSibBomb ;
78330: CALL 78335 0 0
78334: END
// export function StreamSibBomb ; var i , x , y ; begin
78335: LD_INT 0
78337: PPUSH
78338: PPUSH
78339: PPUSH
78340: PPUSH
// result := false ;
78341: LD_ADDR_VAR 0 1
78345: PUSH
78346: LD_INT 0
78348: ST_TO_ADDR
// for i := 1 to 16 do
78349: LD_ADDR_VAR 0 2
78353: PUSH
78354: DOUBLE
78355: LD_INT 1
78357: DEC
78358: ST_TO_ADDR
78359: LD_INT 16
78361: PUSH
78362: FOR_TO
78363: IFFALSE 78562
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78365: LD_ADDR_VAR 0 3
78369: PUSH
78370: LD_INT 10
78372: PUSH
78373: LD_INT 20
78375: PUSH
78376: LD_INT 30
78378: PUSH
78379: LD_INT 40
78381: PUSH
78382: LD_INT 50
78384: PUSH
78385: LD_INT 60
78387: PUSH
78388: LD_INT 70
78390: PUSH
78391: LD_INT 80
78393: PUSH
78394: LD_INT 90
78396: PUSH
78397: LD_INT 100
78399: PUSH
78400: LD_INT 110
78402: PUSH
78403: LD_INT 120
78405: PUSH
78406: LD_INT 130
78408: PUSH
78409: LD_INT 140
78411: PUSH
78412: LD_INT 150
78414: PUSH
78415: EMPTY
78416: LIST
78417: LIST
78418: LIST
78419: LIST
78420: LIST
78421: LIST
78422: LIST
78423: LIST
78424: LIST
78425: LIST
78426: LIST
78427: LIST
78428: LIST
78429: LIST
78430: LIST
78431: PUSH
78432: LD_INT 1
78434: PPUSH
78435: LD_INT 15
78437: PPUSH
78438: CALL_OW 12
78442: ARRAY
78443: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
78444: LD_ADDR_VAR 0 4
78448: PUSH
78449: LD_INT 10
78451: PUSH
78452: LD_INT 20
78454: PUSH
78455: LD_INT 30
78457: PUSH
78458: LD_INT 40
78460: PUSH
78461: LD_INT 50
78463: PUSH
78464: LD_INT 60
78466: PUSH
78467: LD_INT 70
78469: PUSH
78470: LD_INT 80
78472: PUSH
78473: LD_INT 90
78475: PUSH
78476: LD_INT 100
78478: PUSH
78479: LD_INT 110
78481: PUSH
78482: LD_INT 120
78484: PUSH
78485: LD_INT 130
78487: PUSH
78488: LD_INT 140
78490: PUSH
78491: LD_INT 150
78493: PUSH
78494: EMPTY
78495: LIST
78496: LIST
78497: LIST
78498: LIST
78499: LIST
78500: LIST
78501: LIST
78502: LIST
78503: LIST
78504: LIST
78505: LIST
78506: LIST
78507: LIST
78508: LIST
78509: LIST
78510: PUSH
78511: LD_INT 1
78513: PPUSH
78514: LD_INT 15
78516: PPUSH
78517: CALL_OW 12
78521: ARRAY
78522: ST_TO_ADDR
// if ValidHex ( x , y ) then
78523: LD_VAR 0 3
78527: PPUSH
78528: LD_VAR 0 4
78532: PPUSH
78533: CALL_OW 488
78537: IFFALSE 78560
// begin result := [ x , y ] ;
78539: LD_ADDR_VAR 0 1
78543: PUSH
78544: LD_VAR 0 3
78548: PUSH
78549: LD_VAR 0 4
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: ST_TO_ADDR
// break ;
78558: GO 78562
// end ; end ;
78560: GO 78362
78562: POP
78563: POP
// if result then
78564: LD_VAR 0 1
78568: IFFALSE 78628
// begin ToLua ( playSibBomb() ) ;
78570: LD_STRING playSibBomb()
78572: PPUSH
78573: CALL_OW 559
// wait ( 0 0$14 ) ;
78577: LD_INT 490
78579: PPUSH
78580: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
78584: LD_VAR 0 1
78588: PUSH
78589: LD_INT 1
78591: ARRAY
78592: PPUSH
78593: LD_VAR 0 1
78597: PUSH
78598: LD_INT 2
78600: ARRAY
78601: PPUSH
78602: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
78606: LD_VAR 0 1
78610: PUSH
78611: LD_INT 1
78613: ARRAY
78614: PPUSH
78615: LD_VAR 0 1
78619: PUSH
78620: LD_INT 2
78622: ARRAY
78623: PPUSH
78624: CALL_OW 429
// end ; end ;
78628: LD_VAR 0 1
78632: RET
// every 0 0$1 trigger StreamModeActive and sReset do
78633: LD_EXP 63
78637: PUSH
78638: LD_EXP 85
78642: AND
78643: IFFALSE 78655
78645: GO 78647
78647: DISABLE
// YouLost (  ) ;
78648: LD_STRING 
78650: PPUSH
78651: CALL_OW 104
78655: END
// every 0 0$1 trigger StreamModeActive and sFog do
78656: LD_EXP 63
78660: PUSH
78661: LD_EXP 84
78665: AND
78666: IFFALSE 78680
78668: GO 78670
78670: DISABLE
// FogOff ( your_side ) ;
78671: LD_OWVAR 2
78675: PPUSH
78676: CALL_OW 344
78680: END
// every 0 0$1 trigger StreamModeActive and sSun do
78681: LD_EXP 63
78685: PUSH
78686: LD_EXP 86
78690: AND
78691: IFFALSE 78719
78693: GO 78695
78695: DISABLE
// begin solar_recharge_percent := 0 ;
78696: LD_ADDR_OWVAR 79
78700: PUSH
78701: LD_INT 0
78703: ST_TO_ADDR
// wait ( 5 5$00 ) ;
78704: LD_INT 10500
78706: PPUSH
78707: CALL_OW 67
// solar_recharge_percent := 100 ;
78711: LD_ADDR_OWVAR 79
78715: PUSH
78716: LD_INT 100
78718: ST_TO_ADDR
// end ;
78719: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
78720: LD_EXP 63
78724: PUSH
78725: LD_EXP 87
78729: AND
78730: IFFALSE 78969
78732: GO 78734
78734: DISABLE
78735: LD_INT 0
78737: PPUSH
78738: PPUSH
78739: PPUSH
// begin tmp := [ ] ;
78740: LD_ADDR_VAR 0 3
78744: PUSH
78745: EMPTY
78746: ST_TO_ADDR
// for i := 1 to 6 do
78747: LD_ADDR_VAR 0 1
78751: PUSH
78752: DOUBLE
78753: LD_INT 1
78755: DEC
78756: ST_TO_ADDR
78757: LD_INT 6
78759: PUSH
78760: FOR_TO
78761: IFFALSE 78866
// begin uc_nation := nation_nature ;
78763: LD_ADDR_OWVAR 21
78767: PUSH
78768: LD_INT 0
78770: ST_TO_ADDR
// uc_side := 0 ;
78771: LD_ADDR_OWVAR 20
78775: PUSH
78776: LD_INT 0
78778: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78779: LD_ADDR_OWVAR 29
78783: PUSH
78784: LD_INT 12
78786: PUSH
78787: LD_INT 12
78789: PUSH
78790: EMPTY
78791: LIST
78792: LIST
78793: ST_TO_ADDR
// hc_agressivity := 20 ;
78794: LD_ADDR_OWVAR 35
78798: PUSH
78799: LD_INT 20
78801: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
78802: LD_ADDR_OWVAR 28
78806: PUSH
78807: LD_INT 17
78809: ST_TO_ADDR
// hc_gallery :=  ;
78810: LD_ADDR_OWVAR 33
78814: PUSH
78815: LD_STRING 
78817: ST_TO_ADDR
// hc_name :=  ;
78818: LD_ADDR_OWVAR 26
78822: PUSH
78823: LD_STRING 
78825: ST_TO_ADDR
// un := CreateHuman ;
78826: LD_ADDR_VAR 0 2
78830: PUSH
78831: CALL_OW 44
78835: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
78836: LD_VAR 0 2
78840: PPUSH
78841: LD_INT 1
78843: PPUSH
78844: CALL_OW 51
// tmp := tmp ^ un ;
78848: LD_ADDR_VAR 0 3
78852: PUSH
78853: LD_VAR 0 3
78857: PUSH
78858: LD_VAR 0 2
78862: ADD
78863: ST_TO_ADDR
// end ;
78864: GO 78760
78866: POP
78867: POP
// repeat wait ( 0 0$1 ) ;
78868: LD_INT 35
78870: PPUSH
78871: CALL_OW 67
// for un in tmp do
78875: LD_ADDR_VAR 0 2
78879: PUSH
78880: LD_VAR 0 3
78884: PUSH
78885: FOR_IN
78886: IFFALSE 78960
// begin if IsDead ( un ) then
78888: LD_VAR 0 2
78892: PPUSH
78893: CALL_OW 301
78897: IFFALSE 78917
// begin tmp := tmp diff un ;
78899: LD_ADDR_VAR 0 3
78903: PUSH
78904: LD_VAR 0 3
78908: PUSH
78909: LD_VAR 0 2
78913: DIFF
78914: ST_TO_ADDR
// continue ;
78915: GO 78885
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
78917: LD_VAR 0 2
78921: PPUSH
78922: LD_INT 3
78924: PUSH
78925: LD_INT 22
78927: PUSH
78928: LD_INT 0
78930: PUSH
78931: EMPTY
78932: LIST
78933: LIST
78934: PUSH
78935: EMPTY
78936: LIST
78937: LIST
78938: PPUSH
78939: CALL_OW 69
78943: PPUSH
78944: LD_VAR 0 2
78948: PPUSH
78949: CALL_OW 74
78953: PPUSH
78954: CALL_OW 115
// end ;
78958: GO 78885
78960: POP
78961: POP
// until not tmp ;
78962: LD_VAR 0 3
78966: NOT
78967: IFFALSE 78868
// end ;
78969: PPOPN 3
78971: END
// every 0 0$1 trigger StreamModeActive and sTroll do
78972: LD_EXP 63
78976: PUSH
78977: LD_EXP 88
78981: AND
78982: IFFALSE 79036
78984: GO 78986
78986: DISABLE
// begin ToLua ( displayTroll(); ) ;
78987: LD_STRING displayTroll();
78989: PPUSH
78990: CALL_OW 559
// wait ( 3 3$00 ) ;
78994: LD_INT 6300
78996: PPUSH
78997: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79001: LD_STRING hideTroll();
79003: PPUSH
79004: CALL_OW 559
// wait ( 1 1$00 ) ;
79008: LD_INT 2100
79010: PPUSH
79011: CALL_OW 67
// ToLua ( displayTroll(); ) ;
79015: LD_STRING displayTroll();
79017: PPUSH
79018: CALL_OW 559
// wait ( 1 1$00 ) ;
79022: LD_INT 2100
79024: PPUSH
79025: CALL_OW 67
// ToLua ( hideTroll(); ) ;
79029: LD_STRING hideTroll();
79031: PPUSH
79032: CALL_OW 559
// end ;
79036: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
79037: LD_EXP 63
79041: PUSH
79042: LD_EXP 89
79046: AND
79047: IFFALSE 79110
79049: GO 79051
79051: DISABLE
79052: LD_INT 0
79054: PPUSH
// begin p := 0 ;
79055: LD_ADDR_VAR 0 1
79059: PUSH
79060: LD_INT 0
79062: ST_TO_ADDR
// repeat game_speed := 1 ;
79063: LD_ADDR_OWVAR 65
79067: PUSH
79068: LD_INT 1
79070: ST_TO_ADDR
// wait ( 0 0$1 ) ;
79071: LD_INT 35
79073: PPUSH
79074: CALL_OW 67
// p := p + 1 ;
79078: LD_ADDR_VAR 0 1
79082: PUSH
79083: LD_VAR 0 1
79087: PUSH
79088: LD_INT 1
79090: PLUS
79091: ST_TO_ADDR
// until p >= 60 ;
79092: LD_VAR 0 1
79096: PUSH
79097: LD_INT 60
79099: GREATEREQUAL
79100: IFFALSE 79063
// game_speed := 4 ;
79102: LD_ADDR_OWVAR 65
79106: PUSH
79107: LD_INT 4
79109: ST_TO_ADDR
// end ;
79110: PPOPN 1
79112: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
79113: LD_EXP 63
79117: PUSH
79118: LD_EXP 90
79122: AND
79123: IFFALSE 79269
79125: GO 79127
79127: DISABLE
79128: LD_INT 0
79130: PPUSH
79131: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79132: LD_ADDR_VAR 0 1
79136: PUSH
79137: LD_INT 22
79139: PUSH
79140: LD_OWVAR 2
79144: PUSH
79145: EMPTY
79146: LIST
79147: LIST
79148: PUSH
79149: LD_INT 2
79151: PUSH
79152: LD_INT 30
79154: PUSH
79155: LD_INT 0
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PUSH
79162: LD_INT 30
79164: PUSH
79165: LD_INT 1
79167: PUSH
79168: EMPTY
79169: LIST
79170: LIST
79171: PUSH
79172: EMPTY
79173: LIST
79174: LIST
79175: LIST
79176: PUSH
79177: EMPTY
79178: LIST
79179: LIST
79180: PPUSH
79181: CALL_OW 69
79185: ST_TO_ADDR
// if not depot then
79186: LD_VAR 0 1
79190: NOT
79191: IFFALSE 79195
// exit ;
79193: GO 79269
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
79195: LD_ADDR_VAR 0 2
79199: PUSH
79200: LD_VAR 0 1
79204: PUSH
79205: LD_INT 1
79207: PPUSH
79208: LD_VAR 0 1
79212: PPUSH
79213: CALL_OW 12
79217: ARRAY
79218: PPUSH
79219: CALL_OW 274
79223: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
79224: LD_VAR 0 2
79228: PPUSH
79229: LD_INT 1
79231: PPUSH
79232: LD_INT 0
79234: PPUSH
79235: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
79239: LD_VAR 0 2
79243: PPUSH
79244: LD_INT 2
79246: PPUSH
79247: LD_INT 0
79249: PPUSH
79250: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
79254: LD_VAR 0 2
79258: PPUSH
79259: LD_INT 3
79261: PPUSH
79262: LD_INT 0
79264: PPUSH
79265: CALL_OW 277
// end ;
79269: PPOPN 2
79271: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
79272: LD_EXP 63
79276: PUSH
79277: LD_EXP 91
79281: AND
79282: IFFALSE 79379
79284: GO 79286
79286: DISABLE
79287: LD_INT 0
79289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79290: LD_ADDR_VAR 0 1
79294: PUSH
79295: LD_INT 22
79297: PUSH
79298: LD_OWVAR 2
79302: PUSH
79303: EMPTY
79304: LIST
79305: LIST
79306: PUSH
79307: LD_INT 21
79309: PUSH
79310: LD_INT 1
79312: PUSH
79313: EMPTY
79314: LIST
79315: LIST
79316: PUSH
79317: LD_INT 3
79319: PUSH
79320: LD_INT 23
79322: PUSH
79323: LD_INT 0
79325: PUSH
79326: EMPTY
79327: LIST
79328: LIST
79329: PUSH
79330: EMPTY
79331: LIST
79332: LIST
79333: PUSH
79334: EMPTY
79335: LIST
79336: LIST
79337: LIST
79338: PPUSH
79339: CALL_OW 69
79343: ST_TO_ADDR
// if not tmp then
79344: LD_VAR 0 1
79348: NOT
79349: IFFALSE 79353
// exit ;
79351: GO 79379
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
79353: LD_VAR 0 1
79357: PUSH
79358: LD_INT 1
79360: PPUSH
79361: LD_VAR 0 1
79365: PPUSH
79366: CALL_OW 12
79370: ARRAY
79371: PPUSH
79372: LD_INT 200
79374: PPUSH
79375: CALL_OW 234
// end ;
79379: PPOPN 1
79381: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
79382: LD_EXP 63
79386: PUSH
79387: LD_EXP 92
79391: AND
79392: IFFALSE 79471
79394: GO 79396
79396: DISABLE
79397: LD_INT 0
79399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
79400: LD_ADDR_VAR 0 1
79404: PUSH
79405: LD_INT 22
79407: PUSH
79408: LD_OWVAR 2
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: PUSH
79417: LD_INT 21
79419: PUSH
79420: LD_INT 2
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: PUSH
79427: EMPTY
79428: LIST
79429: LIST
79430: PPUSH
79431: CALL_OW 69
79435: ST_TO_ADDR
// if not tmp then
79436: LD_VAR 0 1
79440: NOT
79441: IFFALSE 79445
// exit ;
79443: GO 79471
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
79445: LD_VAR 0 1
79449: PUSH
79450: LD_INT 1
79452: PPUSH
79453: LD_VAR 0 1
79457: PPUSH
79458: CALL_OW 12
79462: ARRAY
79463: PPUSH
79464: LD_INT 60
79466: PPUSH
79467: CALL_OW 234
// end ;
79471: PPOPN 1
79473: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
79474: LD_EXP 63
79478: PUSH
79479: LD_EXP 93
79483: AND
79484: IFFALSE 79583
79486: GO 79488
79488: DISABLE
79489: LD_INT 0
79491: PPUSH
79492: PPUSH
// begin enable ;
79493: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
79494: LD_ADDR_VAR 0 1
79498: PUSH
79499: LD_INT 22
79501: PUSH
79502: LD_OWVAR 2
79506: PUSH
79507: EMPTY
79508: LIST
79509: LIST
79510: PUSH
79511: LD_INT 61
79513: PUSH
79514: EMPTY
79515: LIST
79516: PUSH
79517: LD_INT 33
79519: PUSH
79520: LD_INT 2
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: LIST
79531: PPUSH
79532: CALL_OW 69
79536: ST_TO_ADDR
// if not tmp then
79537: LD_VAR 0 1
79541: NOT
79542: IFFALSE 79546
// exit ;
79544: GO 79583
// for i in tmp do
79546: LD_ADDR_VAR 0 2
79550: PUSH
79551: LD_VAR 0 1
79555: PUSH
79556: FOR_IN
79557: IFFALSE 79581
// if IsControledBy ( i ) then
79559: LD_VAR 0 2
79563: PPUSH
79564: CALL_OW 312
79568: IFFALSE 79579
// ComUnlink ( i ) ;
79570: LD_VAR 0 2
79574: PPUSH
79575: CALL_OW 136
79579: GO 79556
79581: POP
79582: POP
// end ;
79583: PPOPN 2
79585: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
79586: LD_EXP 63
79590: PUSH
79591: LD_EXP 94
79595: AND
79596: IFFALSE 79736
79598: GO 79600
79600: DISABLE
79601: LD_INT 0
79603: PPUSH
79604: PPUSH
// begin ToLua ( displayPowell(); ) ;
79605: LD_STRING displayPowell();
79607: PPUSH
79608: CALL_OW 559
// uc_side := 0 ;
79612: LD_ADDR_OWVAR 20
79616: PUSH
79617: LD_INT 0
79619: ST_TO_ADDR
// uc_nation := 2 ;
79620: LD_ADDR_OWVAR 21
79624: PUSH
79625: LD_INT 2
79627: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
79628: LD_ADDR_OWVAR 37
79632: PUSH
79633: LD_INT 14
79635: ST_TO_ADDR
// vc_engine := engine_siberite ;
79636: LD_ADDR_OWVAR 39
79640: PUSH
79641: LD_INT 3
79643: ST_TO_ADDR
// vc_control := control_apeman ;
79644: LD_ADDR_OWVAR 38
79648: PUSH
79649: LD_INT 5
79651: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
79652: LD_ADDR_OWVAR 40
79656: PUSH
79657: LD_INT 29
79659: ST_TO_ADDR
// un := CreateVehicle ;
79660: LD_ADDR_VAR 0 2
79664: PUSH
79665: CALL_OW 45
79669: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79670: LD_VAR 0 2
79674: PPUSH
79675: LD_INT 1
79677: PPUSH
79678: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
79682: LD_INT 35
79684: PPUSH
79685: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
79689: LD_VAR 0 2
79693: PPUSH
79694: LD_INT 22
79696: PUSH
79697: LD_OWVAR 2
79701: PUSH
79702: EMPTY
79703: LIST
79704: LIST
79705: PPUSH
79706: CALL_OW 69
79710: PPUSH
79711: LD_VAR 0 2
79715: PPUSH
79716: CALL_OW 74
79720: PPUSH
79721: CALL_OW 115
// until IsDead ( un ) ;
79725: LD_VAR 0 2
79729: PPUSH
79730: CALL_OW 301
79734: IFFALSE 79682
// end ;
79736: PPOPN 2
79738: END
// every 0 0$1 trigger StreamModeActive and sStu do
79739: LD_EXP 63
79743: PUSH
79744: LD_EXP 102
79748: AND
79749: IFFALSE 79765
79751: GO 79753
79753: DISABLE
// begin ToLua ( displayStucuk(); ) ;
79754: LD_STRING displayStucuk();
79756: PPUSH
79757: CALL_OW 559
// ResetFog ;
79761: CALL_OW 335
// end ;
79765: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
79766: LD_EXP 63
79770: PUSH
79771: LD_EXP 95
79775: AND
79776: IFFALSE 79917
79778: GO 79780
79780: DISABLE
79781: LD_INT 0
79783: PPUSH
79784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79785: LD_ADDR_VAR 0 2
79789: PUSH
79790: LD_INT 22
79792: PUSH
79793: LD_OWVAR 2
79797: PUSH
79798: EMPTY
79799: LIST
79800: LIST
79801: PUSH
79802: LD_INT 21
79804: PUSH
79805: LD_INT 1
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: PUSH
79812: EMPTY
79813: LIST
79814: LIST
79815: PPUSH
79816: CALL_OW 69
79820: ST_TO_ADDR
// if not tmp then
79821: LD_VAR 0 2
79825: NOT
79826: IFFALSE 79830
// exit ;
79828: GO 79917
// un := tmp [ rand ( 1 , tmp ) ] ;
79830: LD_ADDR_VAR 0 1
79834: PUSH
79835: LD_VAR 0 2
79839: PUSH
79840: LD_INT 1
79842: PPUSH
79843: LD_VAR 0 2
79847: PPUSH
79848: CALL_OW 12
79852: ARRAY
79853: ST_TO_ADDR
// SetSide ( un , 0 ) ;
79854: LD_VAR 0 1
79858: PPUSH
79859: LD_INT 0
79861: PPUSH
79862: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
79866: LD_VAR 0 1
79870: PPUSH
79871: LD_OWVAR 3
79875: PUSH
79876: LD_VAR 0 1
79880: DIFF
79881: PPUSH
79882: LD_VAR 0 1
79886: PPUSH
79887: CALL_OW 74
79891: PPUSH
79892: CALL_OW 115
// wait ( 0 0$20 ) ;
79896: LD_INT 700
79898: PPUSH
79899: CALL_OW 67
// SetSide ( un , your_side ) ;
79903: LD_VAR 0 1
79907: PPUSH
79908: LD_OWVAR 2
79912: PPUSH
79913: CALL_OW 235
// end ;
79917: PPOPN 2
79919: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
79920: LD_EXP 63
79924: PUSH
79925: LD_EXP 96
79929: AND
79930: IFFALSE 80036
79932: GO 79934
79934: DISABLE
79935: LD_INT 0
79937: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79938: LD_ADDR_VAR 0 1
79942: PUSH
79943: LD_INT 22
79945: PUSH
79946: LD_OWVAR 2
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: PUSH
79955: LD_INT 2
79957: PUSH
79958: LD_INT 30
79960: PUSH
79961: LD_INT 0
79963: PUSH
79964: EMPTY
79965: LIST
79966: LIST
79967: PUSH
79968: LD_INT 30
79970: PUSH
79971: LD_INT 1
79973: PUSH
79974: EMPTY
79975: LIST
79976: LIST
79977: PUSH
79978: EMPTY
79979: LIST
79980: LIST
79981: LIST
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PPUSH
79987: CALL_OW 69
79991: ST_TO_ADDR
// if not depot then
79992: LD_VAR 0 1
79996: NOT
79997: IFFALSE 80001
// exit ;
79999: GO 80036
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
80001: LD_VAR 0 1
80005: PUSH
80006: LD_INT 1
80008: ARRAY
80009: PPUSH
80010: CALL_OW 250
80014: PPUSH
80015: LD_VAR 0 1
80019: PUSH
80020: LD_INT 1
80022: ARRAY
80023: PPUSH
80024: CALL_OW 251
80028: PPUSH
80029: LD_INT 70
80031: PPUSH
80032: CALL_OW 495
// end ;
80036: PPOPN 1
80038: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
80039: LD_EXP 63
80043: PUSH
80044: LD_EXP 97
80048: AND
80049: IFFALSE 80260
80051: GO 80053
80053: DISABLE
80054: LD_INT 0
80056: PPUSH
80057: PPUSH
80058: PPUSH
80059: PPUSH
80060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80061: LD_ADDR_VAR 0 5
80065: PUSH
80066: LD_INT 22
80068: PUSH
80069: LD_OWVAR 2
80073: PUSH
80074: EMPTY
80075: LIST
80076: LIST
80077: PUSH
80078: LD_INT 21
80080: PUSH
80081: LD_INT 1
80083: PUSH
80084: EMPTY
80085: LIST
80086: LIST
80087: PUSH
80088: EMPTY
80089: LIST
80090: LIST
80091: PPUSH
80092: CALL_OW 69
80096: ST_TO_ADDR
// if not tmp then
80097: LD_VAR 0 5
80101: NOT
80102: IFFALSE 80106
// exit ;
80104: GO 80260
// for i in tmp do
80106: LD_ADDR_VAR 0 1
80110: PUSH
80111: LD_VAR 0 5
80115: PUSH
80116: FOR_IN
80117: IFFALSE 80258
// begin d := rand ( 0 , 5 ) ;
80119: LD_ADDR_VAR 0 4
80123: PUSH
80124: LD_INT 0
80126: PPUSH
80127: LD_INT 5
80129: PPUSH
80130: CALL_OW 12
80134: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
80135: LD_ADDR_VAR 0 2
80139: PUSH
80140: LD_VAR 0 1
80144: PPUSH
80145: CALL_OW 250
80149: PPUSH
80150: LD_VAR 0 4
80154: PPUSH
80155: LD_INT 3
80157: PPUSH
80158: LD_INT 12
80160: PPUSH
80161: CALL_OW 12
80165: PPUSH
80166: CALL_OW 272
80170: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
80171: LD_ADDR_VAR 0 3
80175: PUSH
80176: LD_VAR 0 1
80180: PPUSH
80181: CALL_OW 251
80185: PPUSH
80186: LD_VAR 0 4
80190: PPUSH
80191: LD_INT 3
80193: PPUSH
80194: LD_INT 12
80196: PPUSH
80197: CALL_OW 12
80201: PPUSH
80202: CALL_OW 273
80206: ST_TO_ADDR
// if ValidHex ( x , y ) then
80207: LD_VAR 0 2
80211: PPUSH
80212: LD_VAR 0 3
80216: PPUSH
80217: CALL_OW 488
80221: IFFALSE 80256
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
80223: LD_VAR 0 1
80227: PPUSH
80228: LD_VAR 0 2
80232: PPUSH
80233: LD_VAR 0 3
80237: PPUSH
80238: LD_INT 3
80240: PPUSH
80241: LD_INT 6
80243: PPUSH
80244: CALL_OW 12
80248: PPUSH
80249: LD_INT 1
80251: PPUSH
80252: CALL_OW 483
// end ;
80256: GO 80116
80258: POP
80259: POP
// end ;
80260: PPOPN 5
80262: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
80263: LD_EXP 63
80267: PUSH
80268: LD_EXP 98
80272: AND
80273: IFFALSE 80367
80275: GO 80277
80277: DISABLE
80278: LD_INT 0
80280: PPUSH
80281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
80282: LD_ADDR_VAR 0 2
80286: PUSH
80287: LD_INT 22
80289: PUSH
80290: LD_OWVAR 2
80294: PUSH
80295: EMPTY
80296: LIST
80297: LIST
80298: PUSH
80299: LD_INT 32
80301: PUSH
80302: LD_INT 1
80304: PUSH
80305: EMPTY
80306: LIST
80307: LIST
80308: PUSH
80309: LD_INT 21
80311: PUSH
80312: LD_INT 2
80314: PUSH
80315: EMPTY
80316: LIST
80317: LIST
80318: PUSH
80319: EMPTY
80320: LIST
80321: LIST
80322: LIST
80323: PPUSH
80324: CALL_OW 69
80328: ST_TO_ADDR
// if not tmp then
80329: LD_VAR 0 2
80333: NOT
80334: IFFALSE 80338
// exit ;
80336: GO 80367
// for i in tmp do
80338: LD_ADDR_VAR 0 1
80342: PUSH
80343: LD_VAR 0 2
80347: PUSH
80348: FOR_IN
80349: IFFALSE 80365
// SetFuel ( i , 0 ) ;
80351: LD_VAR 0 1
80355: PPUSH
80356: LD_INT 0
80358: PPUSH
80359: CALL_OW 240
80363: GO 80348
80365: POP
80366: POP
// end ;
80367: PPOPN 2
80369: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
80370: LD_EXP 63
80374: PUSH
80375: LD_EXP 99
80379: AND
80380: IFFALSE 80446
80382: GO 80384
80384: DISABLE
80385: LD_INT 0
80387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80388: LD_ADDR_VAR 0 1
80392: PUSH
80393: LD_INT 22
80395: PUSH
80396: LD_OWVAR 2
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: PUSH
80405: LD_INT 30
80407: PUSH
80408: LD_INT 29
80410: PUSH
80411: EMPTY
80412: LIST
80413: LIST
80414: PUSH
80415: EMPTY
80416: LIST
80417: LIST
80418: PPUSH
80419: CALL_OW 69
80423: ST_TO_ADDR
// if not tmp then
80424: LD_VAR 0 1
80428: NOT
80429: IFFALSE 80433
// exit ;
80431: GO 80446
// DestroyUnit ( tmp [ 1 ] ) ;
80433: LD_VAR 0 1
80437: PUSH
80438: LD_INT 1
80440: ARRAY
80441: PPUSH
80442: CALL_OW 65
// end ;
80446: PPOPN 1
80448: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
80449: LD_EXP 63
80453: PUSH
80454: LD_EXP 101
80458: AND
80459: IFFALSE 80588
80461: GO 80463
80463: DISABLE
80464: LD_INT 0
80466: PPUSH
// begin uc_side := 0 ;
80467: LD_ADDR_OWVAR 20
80471: PUSH
80472: LD_INT 0
80474: ST_TO_ADDR
// uc_nation := nation_arabian ;
80475: LD_ADDR_OWVAR 21
80479: PUSH
80480: LD_INT 2
80482: ST_TO_ADDR
// hc_gallery :=  ;
80483: LD_ADDR_OWVAR 33
80487: PUSH
80488: LD_STRING 
80490: ST_TO_ADDR
// hc_name :=  ;
80491: LD_ADDR_OWVAR 26
80495: PUSH
80496: LD_STRING 
80498: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
80499: LD_INT 1
80501: PPUSH
80502: LD_INT 11
80504: PPUSH
80505: LD_INT 10
80507: PPUSH
80508: CALL_OW 380
// un := CreateHuman ;
80512: LD_ADDR_VAR 0 1
80516: PUSH
80517: CALL_OW 44
80521: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80522: LD_VAR 0 1
80526: PPUSH
80527: LD_INT 1
80529: PPUSH
80530: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
80534: LD_INT 35
80536: PPUSH
80537: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
80541: LD_VAR 0 1
80545: PPUSH
80546: LD_INT 22
80548: PUSH
80549: LD_OWVAR 2
80553: PUSH
80554: EMPTY
80555: LIST
80556: LIST
80557: PPUSH
80558: CALL_OW 69
80562: PPUSH
80563: LD_VAR 0 1
80567: PPUSH
80568: CALL_OW 74
80572: PPUSH
80573: CALL_OW 115
// until IsDead ( un ) ;
80577: LD_VAR 0 1
80581: PPUSH
80582: CALL_OW 301
80586: IFFALSE 80534
// end ;
80588: PPOPN 1
80590: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
80591: LD_EXP 63
80595: PUSH
80596: LD_EXP 103
80600: AND
80601: IFFALSE 80613
80603: GO 80605
80605: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
80606: LD_STRING earthquake(getX(game), 0, 32)
80608: PPUSH
80609: CALL_OW 559
80613: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
80614: LD_EXP 63
80618: PUSH
80619: LD_EXP 104
80623: AND
80624: IFFALSE 80715
80626: GO 80628
80628: DISABLE
80629: LD_INT 0
80631: PPUSH
// begin enable ;
80632: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
80633: LD_ADDR_VAR 0 1
80637: PUSH
80638: LD_INT 22
80640: PUSH
80641: LD_OWVAR 2
80645: PUSH
80646: EMPTY
80647: LIST
80648: LIST
80649: PUSH
80650: LD_INT 21
80652: PUSH
80653: LD_INT 2
80655: PUSH
80656: EMPTY
80657: LIST
80658: LIST
80659: PUSH
80660: LD_INT 33
80662: PUSH
80663: LD_INT 3
80665: PUSH
80666: EMPTY
80667: LIST
80668: LIST
80669: PUSH
80670: EMPTY
80671: LIST
80672: LIST
80673: LIST
80674: PPUSH
80675: CALL_OW 69
80679: ST_TO_ADDR
// if not tmp then
80680: LD_VAR 0 1
80684: NOT
80685: IFFALSE 80689
// exit ;
80687: GO 80715
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
80689: LD_VAR 0 1
80693: PUSH
80694: LD_INT 1
80696: PPUSH
80697: LD_VAR 0 1
80701: PPUSH
80702: CALL_OW 12
80706: ARRAY
80707: PPUSH
80708: LD_INT 1
80710: PPUSH
80711: CALL_OW 234
// end ;
80715: PPOPN 1
80717: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
80718: LD_EXP 63
80722: PUSH
80723: LD_EXP 105
80727: AND
80728: IFFALSE 80869
80730: GO 80732
80732: DISABLE
80733: LD_INT 0
80735: PPUSH
80736: PPUSH
80737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80738: LD_ADDR_VAR 0 3
80742: PUSH
80743: LD_INT 22
80745: PUSH
80746: LD_OWVAR 2
80750: PUSH
80751: EMPTY
80752: LIST
80753: LIST
80754: PUSH
80755: LD_INT 25
80757: PUSH
80758: LD_INT 1
80760: PUSH
80761: EMPTY
80762: LIST
80763: LIST
80764: PUSH
80765: EMPTY
80766: LIST
80767: LIST
80768: PPUSH
80769: CALL_OW 69
80773: ST_TO_ADDR
// if not tmp then
80774: LD_VAR 0 3
80778: NOT
80779: IFFALSE 80783
// exit ;
80781: GO 80869
// un := tmp [ rand ( 1 , tmp ) ] ;
80783: LD_ADDR_VAR 0 2
80787: PUSH
80788: LD_VAR 0 3
80792: PUSH
80793: LD_INT 1
80795: PPUSH
80796: LD_VAR 0 3
80800: PPUSH
80801: CALL_OW 12
80805: ARRAY
80806: ST_TO_ADDR
// if Crawls ( un ) then
80807: LD_VAR 0 2
80811: PPUSH
80812: CALL_OW 318
80816: IFFALSE 80827
// ComWalk ( un ) ;
80818: LD_VAR 0 2
80822: PPUSH
80823: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
80827: LD_VAR 0 2
80831: PPUSH
80832: LD_INT 9
80834: PPUSH
80835: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
80839: LD_INT 28
80841: PPUSH
80842: LD_OWVAR 2
80846: PPUSH
80847: LD_INT 2
80849: PPUSH
80850: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
80854: LD_INT 29
80856: PPUSH
80857: LD_OWVAR 2
80861: PPUSH
80862: LD_INT 2
80864: PPUSH
80865: CALL_OW 322
// end ;
80869: PPOPN 3
80871: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
80872: LD_EXP 63
80876: PUSH
80877: LD_EXP 106
80881: AND
80882: IFFALSE 80993
80884: GO 80886
80886: DISABLE
80887: LD_INT 0
80889: PPUSH
80890: PPUSH
80891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80892: LD_ADDR_VAR 0 3
80896: PUSH
80897: LD_INT 22
80899: PUSH
80900: LD_OWVAR 2
80904: PUSH
80905: EMPTY
80906: LIST
80907: LIST
80908: PUSH
80909: LD_INT 25
80911: PUSH
80912: LD_INT 1
80914: PUSH
80915: EMPTY
80916: LIST
80917: LIST
80918: PUSH
80919: EMPTY
80920: LIST
80921: LIST
80922: PPUSH
80923: CALL_OW 69
80927: ST_TO_ADDR
// if not tmp then
80928: LD_VAR 0 3
80932: NOT
80933: IFFALSE 80937
// exit ;
80935: GO 80993
// un := tmp [ rand ( 1 , tmp ) ] ;
80937: LD_ADDR_VAR 0 2
80941: PUSH
80942: LD_VAR 0 3
80946: PUSH
80947: LD_INT 1
80949: PPUSH
80950: LD_VAR 0 3
80954: PPUSH
80955: CALL_OW 12
80959: ARRAY
80960: ST_TO_ADDR
// if Crawls ( un ) then
80961: LD_VAR 0 2
80965: PPUSH
80966: CALL_OW 318
80970: IFFALSE 80981
// ComWalk ( un ) ;
80972: LD_VAR 0 2
80976: PPUSH
80977: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80981: LD_VAR 0 2
80985: PPUSH
80986: LD_INT 8
80988: PPUSH
80989: CALL_OW 336
// end ;
80993: PPOPN 3
80995: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
80996: LD_EXP 63
81000: PUSH
81001: LD_EXP 107
81005: AND
81006: IFFALSE 81150
81008: GO 81010
81010: DISABLE
81011: LD_INT 0
81013: PPUSH
81014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
81015: LD_ADDR_VAR 0 2
81019: PUSH
81020: LD_INT 22
81022: PUSH
81023: LD_OWVAR 2
81027: PUSH
81028: EMPTY
81029: LIST
81030: LIST
81031: PUSH
81032: LD_INT 21
81034: PUSH
81035: LD_INT 2
81037: PUSH
81038: EMPTY
81039: LIST
81040: LIST
81041: PUSH
81042: LD_INT 2
81044: PUSH
81045: LD_INT 34
81047: PUSH
81048: LD_INT 12
81050: PUSH
81051: EMPTY
81052: LIST
81053: LIST
81054: PUSH
81055: LD_INT 34
81057: PUSH
81058: LD_INT 51
81060: PUSH
81061: EMPTY
81062: LIST
81063: LIST
81064: PUSH
81065: LD_INT 34
81067: PUSH
81068: LD_INT 32
81070: PUSH
81071: EMPTY
81072: LIST
81073: LIST
81074: PUSH
81075: EMPTY
81076: LIST
81077: LIST
81078: LIST
81079: LIST
81080: PUSH
81081: EMPTY
81082: LIST
81083: LIST
81084: LIST
81085: PPUSH
81086: CALL_OW 69
81090: ST_TO_ADDR
// if not tmp then
81091: LD_VAR 0 2
81095: NOT
81096: IFFALSE 81100
// exit ;
81098: GO 81150
// for i in tmp do
81100: LD_ADDR_VAR 0 1
81104: PUSH
81105: LD_VAR 0 2
81109: PUSH
81110: FOR_IN
81111: IFFALSE 81148
// if GetCargo ( i , mat_artifact ) = 0 then
81113: LD_VAR 0 1
81117: PPUSH
81118: LD_INT 4
81120: PPUSH
81121: CALL_OW 289
81125: PUSH
81126: LD_INT 0
81128: EQUAL
81129: IFFALSE 81146
// SetCargo ( i , mat_siberit , 100 ) ;
81131: LD_VAR 0 1
81135: PPUSH
81136: LD_INT 3
81138: PPUSH
81139: LD_INT 100
81141: PPUSH
81142: CALL_OW 290
81146: GO 81110
81148: POP
81149: POP
// end ;
81150: PPOPN 2
81152: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
81153: LD_EXP 63
81157: PUSH
81158: LD_EXP 108
81162: AND
81163: IFFALSE 81346
81165: GO 81167
81167: DISABLE
81168: LD_INT 0
81170: PPUSH
81171: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81172: LD_ADDR_VAR 0 2
81176: PUSH
81177: LD_INT 22
81179: PUSH
81180: LD_OWVAR 2
81184: PUSH
81185: EMPTY
81186: LIST
81187: LIST
81188: PPUSH
81189: CALL_OW 69
81193: ST_TO_ADDR
// if not tmp then
81194: LD_VAR 0 2
81198: NOT
81199: IFFALSE 81203
// exit ;
81201: GO 81346
// for i := 1 to 2 do
81203: LD_ADDR_VAR 0 1
81207: PUSH
81208: DOUBLE
81209: LD_INT 1
81211: DEC
81212: ST_TO_ADDR
81213: LD_INT 2
81215: PUSH
81216: FOR_TO
81217: IFFALSE 81344
// begin uc_side := your_side ;
81219: LD_ADDR_OWVAR 20
81223: PUSH
81224: LD_OWVAR 2
81228: ST_TO_ADDR
// uc_nation := nation_american ;
81229: LD_ADDR_OWVAR 21
81233: PUSH
81234: LD_INT 1
81236: ST_TO_ADDR
// vc_chassis := us_morphling ;
81237: LD_ADDR_OWVAR 37
81241: PUSH
81242: LD_INT 5
81244: ST_TO_ADDR
// vc_engine := engine_siberite ;
81245: LD_ADDR_OWVAR 39
81249: PUSH
81250: LD_INT 3
81252: ST_TO_ADDR
// vc_control := control_computer ;
81253: LD_ADDR_OWVAR 38
81257: PUSH
81258: LD_INT 3
81260: ST_TO_ADDR
// vc_weapon := us_double_laser ;
81261: LD_ADDR_OWVAR 40
81265: PUSH
81266: LD_INT 10
81268: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
81269: LD_VAR 0 2
81273: PUSH
81274: LD_INT 1
81276: ARRAY
81277: PPUSH
81278: CALL_OW 310
81282: NOT
81283: IFFALSE 81330
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
81285: CALL_OW 45
81289: PPUSH
81290: LD_VAR 0 2
81294: PUSH
81295: LD_INT 1
81297: ARRAY
81298: PPUSH
81299: CALL_OW 250
81303: PPUSH
81304: LD_VAR 0 2
81308: PUSH
81309: LD_INT 1
81311: ARRAY
81312: PPUSH
81313: CALL_OW 251
81317: PPUSH
81318: LD_INT 12
81320: PPUSH
81321: LD_INT 1
81323: PPUSH
81324: CALL_OW 50
81328: GO 81342
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81330: CALL_OW 45
81334: PPUSH
81335: LD_INT 1
81337: PPUSH
81338: CALL_OW 51
// end ;
81342: GO 81216
81344: POP
81345: POP
// end ;
81346: PPOPN 2
81348: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
81349: LD_EXP 63
81353: PUSH
81354: LD_EXP 109
81358: AND
81359: IFFALSE 81581
81361: GO 81363
81363: DISABLE
81364: LD_INT 0
81366: PPUSH
81367: PPUSH
81368: PPUSH
81369: PPUSH
81370: PPUSH
81371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81372: LD_ADDR_VAR 0 6
81376: PUSH
81377: LD_INT 22
81379: PUSH
81380: LD_OWVAR 2
81384: PUSH
81385: EMPTY
81386: LIST
81387: LIST
81388: PUSH
81389: LD_INT 21
81391: PUSH
81392: LD_INT 1
81394: PUSH
81395: EMPTY
81396: LIST
81397: LIST
81398: PUSH
81399: LD_INT 3
81401: PUSH
81402: LD_INT 23
81404: PUSH
81405: LD_INT 0
81407: PUSH
81408: EMPTY
81409: LIST
81410: LIST
81411: PUSH
81412: EMPTY
81413: LIST
81414: LIST
81415: PUSH
81416: EMPTY
81417: LIST
81418: LIST
81419: LIST
81420: PPUSH
81421: CALL_OW 69
81425: ST_TO_ADDR
// if not tmp then
81426: LD_VAR 0 6
81430: NOT
81431: IFFALSE 81435
// exit ;
81433: GO 81581
// s1 := rand ( 1 , 4 ) ;
81435: LD_ADDR_VAR 0 2
81439: PUSH
81440: LD_INT 1
81442: PPUSH
81443: LD_INT 4
81445: PPUSH
81446: CALL_OW 12
81450: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
81451: LD_ADDR_VAR 0 4
81455: PUSH
81456: LD_VAR 0 6
81460: PUSH
81461: LD_INT 1
81463: ARRAY
81464: PPUSH
81465: LD_VAR 0 2
81469: PPUSH
81470: CALL_OW 259
81474: ST_TO_ADDR
// if s1 = 1 then
81475: LD_VAR 0 2
81479: PUSH
81480: LD_INT 1
81482: EQUAL
81483: IFFALSE 81503
// s2 := rand ( 2 , 4 ) else
81485: LD_ADDR_VAR 0 3
81489: PUSH
81490: LD_INT 2
81492: PPUSH
81493: LD_INT 4
81495: PPUSH
81496: CALL_OW 12
81500: ST_TO_ADDR
81501: GO 81511
// s2 := 1 ;
81503: LD_ADDR_VAR 0 3
81507: PUSH
81508: LD_INT 1
81510: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
81511: LD_ADDR_VAR 0 5
81515: PUSH
81516: LD_VAR 0 6
81520: PUSH
81521: LD_INT 1
81523: ARRAY
81524: PPUSH
81525: LD_VAR 0 3
81529: PPUSH
81530: CALL_OW 259
81534: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
81535: LD_VAR 0 6
81539: PUSH
81540: LD_INT 1
81542: ARRAY
81543: PPUSH
81544: LD_VAR 0 2
81548: PPUSH
81549: LD_VAR 0 5
81553: PPUSH
81554: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
81558: LD_VAR 0 6
81562: PUSH
81563: LD_INT 1
81565: ARRAY
81566: PPUSH
81567: LD_VAR 0 3
81571: PPUSH
81572: LD_VAR 0 4
81576: PPUSH
81577: CALL_OW 237
// end ;
81581: PPOPN 6
81583: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
81584: LD_EXP 63
81588: PUSH
81589: LD_EXP 110
81593: AND
81594: IFFALSE 81673
81596: GO 81598
81598: DISABLE
81599: LD_INT 0
81601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
81602: LD_ADDR_VAR 0 1
81606: PUSH
81607: LD_INT 22
81609: PUSH
81610: LD_OWVAR 2
81614: PUSH
81615: EMPTY
81616: LIST
81617: LIST
81618: PUSH
81619: LD_INT 30
81621: PUSH
81622: LD_INT 3
81624: PUSH
81625: EMPTY
81626: LIST
81627: LIST
81628: PUSH
81629: EMPTY
81630: LIST
81631: LIST
81632: PPUSH
81633: CALL_OW 69
81637: ST_TO_ADDR
// if not tmp then
81638: LD_VAR 0 1
81642: NOT
81643: IFFALSE 81647
// exit ;
81645: GO 81673
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
81647: LD_VAR 0 1
81651: PUSH
81652: LD_INT 1
81654: PPUSH
81655: LD_VAR 0 1
81659: PPUSH
81660: CALL_OW 12
81664: ARRAY
81665: PPUSH
81666: LD_INT 1
81668: PPUSH
81669: CALL_OW 234
// end ;
81673: PPOPN 1
81675: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
81676: LD_EXP 63
81680: PUSH
81681: LD_EXP 111
81685: AND
81686: IFFALSE 81798
81688: GO 81690
81690: DISABLE
81691: LD_INT 0
81693: PPUSH
81694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
81695: LD_ADDR_VAR 0 2
81699: PUSH
81700: LD_INT 22
81702: PUSH
81703: LD_OWVAR 2
81707: PUSH
81708: EMPTY
81709: LIST
81710: LIST
81711: PUSH
81712: LD_INT 2
81714: PUSH
81715: LD_INT 30
81717: PUSH
81718: LD_INT 27
81720: PUSH
81721: EMPTY
81722: LIST
81723: LIST
81724: PUSH
81725: LD_INT 30
81727: PUSH
81728: LD_INT 26
81730: PUSH
81731: EMPTY
81732: LIST
81733: LIST
81734: PUSH
81735: LD_INT 30
81737: PUSH
81738: LD_INT 28
81740: PUSH
81741: EMPTY
81742: LIST
81743: LIST
81744: PUSH
81745: EMPTY
81746: LIST
81747: LIST
81748: LIST
81749: LIST
81750: PUSH
81751: EMPTY
81752: LIST
81753: LIST
81754: PPUSH
81755: CALL_OW 69
81759: ST_TO_ADDR
// if not tmp then
81760: LD_VAR 0 2
81764: NOT
81765: IFFALSE 81769
// exit ;
81767: GO 81798
// for i in tmp do
81769: LD_ADDR_VAR 0 1
81773: PUSH
81774: LD_VAR 0 2
81778: PUSH
81779: FOR_IN
81780: IFFALSE 81796
// SetLives ( i , 1 ) ;
81782: LD_VAR 0 1
81786: PPUSH
81787: LD_INT 1
81789: PPUSH
81790: CALL_OW 234
81794: GO 81779
81796: POP
81797: POP
// end ;
81798: PPOPN 2
81800: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
81801: LD_EXP 63
81805: PUSH
81806: LD_EXP 112
81810: AND
81811: IFFALSE 82098
81813: GO 81815
81815: DISABLE
81816: LD_INT 0
81818: PPUSH
81819: PPUSH
81820: PPUSH
// begin i := rand ( 1 , 7 ) ;
81821: LD_ADDR_VAR 0 1
81825: PUSH
81826: LD_INT 1
81828: PPUSH
81829: LD_INT 7
81831: PPUSH
81832: CALL_OW 12
81836: ST_TO_ADDR
// case i of 1 :
81837: LD_VAR 0 1
81841: PUSH
81842: LD_INT 1
81844: DOUBLE
81845: EQUAL
81846: IFTRUE 81850
81848: GO 81860
81850: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
81851: LD_STRING earthquake(getX(game), 0, 32)
81853: PPUSH
81854: CALL_OW 559
81858: GO 82098
81860: LD_INT 2
81862: DOUBLE
81863: EQUAL
81864: IFTRUE 81868
81866: GO 81882
81868: POP
// begin ToLua ( displayStucuk(); ) ;
81869: LD_STRING displayStucuk();
81871: PPUSH
81872: CALL_OW 559
// ResetFog ;
81876: CALL_OW 335
// end ; 3 :
81880: GO 82098
81882: LD_INT 3
81884: DOUBLE
81885: EQUAL
81886: IFTRUE 81890
81888: GO 81994
81890: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81891: LD_ADDR_VAR 0 2
81895: PUSH
81896: LD_INT 22
81898: PUSH
81899: LD_OWVAR 2
81903: PUSH
81904: EMPTY
81905: LIST
81906: LIST
81907: PUSH
81908: LD_INT 25
81910: PUSH
81911: LD_INT 1
81913: PUSH
81914: EMPTY
81915: LIST
81916: LIST
81917: PUSH
81918: EMPTY
81919: LIST
81920: LIST
81921: PPUSH
81922: CALL_OW 69
81926: ST_TO_ADDR
// if not tmp then
81927: LD_VAR 0 2
81931: NOT
81932: IFFALSE 81936
// exit ;
81934: GO 82098
// un := tmp [ rand ( 1 , tmp ) ] ;
81936: LD_ADDR_VAR 0 3
81940: PUSH
81941: LD_VAR 0 2
81945: PUSH
81946: LD_INT 1
81948: PPUSH
81949: LD_VAR 0 2
81953: PPUSH
81954: CALL_OW 12
81958: ARRAY
81959: ST_TO_ADDR
// if Crawls ( un ) then
81960: LD_VAR 0 3
81964: PPUSH
81965: CALL_OW 318
81969: IFFALSE 81980
// ComWalk ( un ) ;
81971: LD_VAR 0 3
81975: PPUSH
81976: CALL_OW 138
// SetClass ( un , class_mortar ) ;
81980: LD_VAR 0 3
81984: PPUSH
81985: LD_INT 8
81987: PPUSH
81988: CALL_OW 336
// end ; 4 :
81992: GO 82098
81994: LD_INT 4
81996: DOUBLE
81997: EQUAL
81998: IFTRUE 82002
82000: GO 82076
82002: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82003: LD_ADDR_VAR 0 2
82007: PUSH
82008: LD_INT 22
82010: PUSH
82011: LD_OWVAR 2
82015: PUSH
82016: EMPTY
82017: LIST
82018: LIST
82019: PUSH
82020: LD_INT 30
82022: PUSH
82023: LD_INT 29
82025: PUSH
82026: EMPTY
82027: LIST
82028: LIST
82029: PUSH
82030: EMPTY
82031: LIST
82032: LIST
82033: PPUSH
82034: CALL_OW 69
82038: ST_TO_ADDR
// if not tmp then
82039: LD_VAR 0 2
82043: NOT
82044: IFFALSE 82048
// exit ;
82046: GO 82098
// CenterNowOnUnits ( tmp [ 1 ] ) ;
82048: LD_VAR 0 2
82052: PUSH
82053: LD_INT 1
82055: ARRAY
82056: PPUSH
82057: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
82061: LD_VAR 0 2
82065: PUSH
82066: LD_INT 1
82068: ARRAY
82069: PPUSH
82070: CALL_OW 65
// end ; 5 .. 7 :
82074: GO 82098
82076: LD_INT 5
82078: DOUBLE
82079: GREATEREQUAL
82080: IFFALSE 82088
82082: LD_INT 7
82084: DOUBLE
82085: LESSEQUAL
82086: IFTRUE 82090
82088: GO 82097
82090: POP
// StreamSibBomb ; end ;
82091: CALL 78335 0 0
82095: GO 82098
82097: POP
// end ;
82098: PPOPN 3
82100: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
82101: LD_EXP 63
82105: PUSH
82106: LD_EXP 113
82110: AND
82111: IFFALSE 82267
82113: GO 82115
82115: DISABLE
82116: LD_INT 0
82118: PPUSH
82119: PPUSH
82120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
82121: LD_ADDR_VAR 0 2
82125: PUSH
82126: LD_INT 81
82128: PUSH
82129: LD_OWVAR 2
82133: PUSH
82134: EMPTY
82135: LIST
82136: LIST
82137: PUSH
82138: LD_INT 2
82140: PUSH
82141: LD_INT 21
82143: PUSH
82144: LD_INT 1
82146: PUSH
82147: EMPTY
82148: LIST
82149: LIST
82150: PUSH
82151: LD_INT 21
82153: PUSH
82154: LD_INT 2
82156: PUSH
82157: EMPTY
82158: LIST
82159: LIST
82160: PUSH
82161: EMPTY
82162: LIST
82163: LIST
82164: LIST
82165: PUSH
82166: EMPTY
82167: LIST
82168: LIST
82169: PPUSH
82170: CALL_OW 69
82174: ST_TO_ADDR
// if not tmp then
82175: LD_VAR 0 2
82179: NOT
82180: IFFALSE 82184
// exit ;
82182: GO 82267
// p := 0 ;
82184: LD_ADDR_VAR 0 3
82188: PUSH
82189: LD_INT 0
82191: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82192: LD_INT 35
82194: PPUSH
82195: CALL_OW 67
// p := p + 1 ;
82199: LD_ADDR_VAR 0 3
82203: PUSH
82204: LD_VAR 0 3
82208: PUSH
82209: LD_INT 1
82211: PLUS
82212: ST_TO_ADDR
// for i in tmp do
82213: LD_ADDR_VAR 0 1
82217: PUSH
82218: LD_VAR 0 2
82222: PUSH
82223: FOR_IN
82224: IFFALSE 82255
// if GetLives ( i ) < 1000 then
82226: LD_VAR 0 1
82230: PPUSH
82231: CALL_OW 256
82235: PUSH
82236: LD_INT 1000
82238: LESS
82239: IFFALSE 82253
// SetLives ( i , 1000 ) ;
82241: LD_VAR 0 1
82245: PPUSH
82246: LD_INT 1000
82248: PPUSH
82249: CALL_OW 234
82253: GO 82223
82255: POP
82256: POP
// until p > 20 ;
82257: LD_VAR 0 3
82261: PUSH
82262: LD_INT 20
82264: GREATER
82265: IFFALSE 82192
// end ;
82267: PPOPN 3
82269: END
// every 0 0$1 trigger StreamModeActive and sTime do
82270: LD_EXP 63
82274: PUSH
82275: LD_EXP 114
82279: AND
82280: IFFALSE 82315
82282: GO 82284
82284: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
82285: LD_INT 28
82287: PPUSH
82288: LD_OWVAR 2
82292: PPUSH
82293: LD_INT 2
82295: PPUSH
82296: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
82300: LD_INT 30
82302: PPUSH
82303: LD_OWVAR 2
82307: PPUSH
82308: LD_INT 2
82310: PPUSH
82311: CALL_OW 322
// end ;
82315: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
82316: LD_EXP 63
82320: PUSH
82321: LD_EXP 115
82325: AND
82326: IFFALSE 82447
82328: GO 82330
82330: DISABLE
82331: LD_INT 0
82333: PPUSH
82334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82335: LD_ADDR_VAR 0 2
82339: PUSH
82340: LD_INT 22
82342: PUSH
82343: LD_OWVAR 2
82347: PUSH
82348: EMPTY
82349: LIST
82350: LIST
82351: PUSH
82352: LD_INT 21
82354: PUSH
82355: LD_INT 1
82357: PUSH
82358: EMPTY
82359: LIST
82360: LIST
82361: PUSH
82362: LD_INT 3
82364: PUSH
82365: LD_INT 23
82367: PUSH
82368: LD_INT 0
82370: PUSH
82371: EMPTY
82372: LIST
82373: LIST
82374: PUSH
82375: EMPTY
82376: LIST
82377: LIST
82378: PUSH
82379: EMPTY
82380: LIST
82381: LIST
82382: LIST
82383: PPUSH
82384: CALL_OW 69
82388: ST_TO_ADDR
// if not tmp then
82389: LD_VAR 0 2
82393: NOT
82394: IFFALSE 82398
// exit ;
82396: GO 82447
// for i in tmp do
82398: LD_ADDR_VAR 0 1
82402: PUSH
82403: LD_VAR 0 2
82407: PUSH
82408: FOR_IN
82409: IFFALSE 82445
// begin if Crawls ( i ) then
82411: LD_VAR 0 1
82415: PPUSH
82416: CALL_OW 318
82420: IFFALSE 82431
// ComWalk ( i ) ;
82422: LD_VAR 0 1
82426: PPUSH
82427: CALL_OW 138
// SetClass ( i , 2 ) ;
82431: LD_VAR 0 1
82435: PPUSH
82436: LD_INT 2
82438: PPUSH
82439: CALL_OW 336
// end ;
82443: GO 82408
82445: POP
82446: POP
// end ;
82447: PPOPN 2
82449: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
82450: LD_EXP 63
82454: PUSH
82455: LD_EXP 116
82459: AND
82460: IFFALSE 82748
82462: GO 82464
82464: DISABLE
82465: LD_INT 0
82467: PPUSH
82468: PPUSH
82469: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
82470: LD_OWVAR 2
82474: PPUSH
82475: LD_INT 9
82477: PPUSH
82478: LD_INT 1
82480: PPUSH
82481: LD_INT 1
82483: PPUSH
82484: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
82488: LD_INT 9
82490: PPUSH
82491: LD_OWVAR 2
82495: PPUSH
82496: CALL_OW 343
// uc_side := 9 ;
82500: LD_ADDR_OWVAR 20
82504: PUSH
82505: LD_INT 9
82507: ST_TO_ADDR
// uc_nation := 2 ;
82508: LD_ADDR_OWVAR 21
82512: PUSH
82513: LD_INT 2
82515: ST_TO_ADDR
// hc_name := Dark Warrior ;
82516: LD_ADDR_OWVAR 26
82520: PUSH
82521: LD_STRING Dark Warrior
82523: ST_TO_ADDR
// hc_gallery :=  ;
82524: LD_ADDR_OWVAR 33
82528: PUSH
82529: LD_STRING 
82531: ST_TO_ADDR
// hc_noskilllimit := true ;
82532: LD_ADDR_OWVAR 76
82536: PUSH
82537: LD_INT 1
82539: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
82540: LD_ADDR_OWVAR 31
82544: PUSH
82545: LD_INT 30
82547: PUSH
82548: LD_INT 30
82550: PUSH
82551: LD_INT 30
82553: PUSH
82554: LD_INT 30
82556: PUSH
82557: EMPTY
82558: LIST
82559: LIST
82560: LIST
82561: LIST
82562: ST_TO_ADDR
// un := CreateHuman ;
82563: LD_ADDR_VAR 0 3
82567: PUSH
82568: CALL_OW 44
82572: ST_TO_ADDR
// hc_noskilllimit := false ;
82573: LD_ADDR_OWVAR 76
82577: PUSH
82578: LD_INT 0
82580: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82581: LD_VAR 0 3
82585: PPUSH
82586: LD_INT 1
82588: PPUSH
82589: CALL_OW 51
// ToLua ( playRanger() ) ;
82593: LD_STRING playRanger()
82595: PPUSH
82596: CALL_OW 559
// p := 0 ;
82600: LD_ADDR_VAR 0 2
82604: PUSH
82605: LD_INT 0
82607: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82608: LD_INT 35
82610: PPUSH
82611: CALL_OW 67
// p := p + 1 ;
82615: LD_ADDR_VAR 0 2
82619: PUSH
82620: LD_VAR 0 2
82624: PUSH
82625: LD_INT 1
82627: PLUS
82628: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
82629: LD_VAR 0 3
82633: PPUSH
82634: CALL_OW 256
82638: PUSH
82639: LD_INT 1000
82641: LESS
82642: IFFALSE 82656
// SetLives ( un , 1000 ) ;
82644: LD_VAR 0 3
82648: PPUSH
82649: LD_INT 1000
82651: PPUSH
82652: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
82656: LD_VAR 0 3
82660: PPUSH
82661: LD_INT 81
82663: PUSH
82664: LD_OWVAR 2
82668: PUSH
82669: EMPTY
82670: LIST
82671: LIST
82672: PUSH
82673: LD_INT 91
82675: PUSH
82676: LD_VAR 0 3
82680: PUSH
82681: LD_INT 30
82683: PUSH
82684: EMPTY
82685: LIST
82686: LIST
82687: LIST
82688: PUSH
82689: EMPTY
82690: LIST
82691: LIST
82692: PPUSH
82693: CALL_OW 69
82697: PPUSH
82698: LD_VAR 0 3
82702: PPUSH
82703: CALL_OW 74
82707: PPUSH
82708: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
82712: LD_VAR 0 2
82716: PUSH
82717: LD_INT 80
82719: GREATER
82720: PUSH
82721: LD_VAR 0 3
82725: PPUSH
82726: CALL_OW 301
82730: OR
82731: IFFALSE 82608
// if un then
82733: LD_VAR 0 3
82737: IFFALSE 82748
// RemoveUnit ( un ) ;
82739: LD_VAR 0 3
82743: PPUSH
82744: CALL_OW 64
// end ;
82748: PPOPN 3
82750: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
82751: LD_EXP 117
82755: IFFALSE 82871
82757: GO 82759
82759: DISABLE
82760: LD_INT 0
82762: PPUSH
82763: PPUSH
82764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
82765: LD_ADDR_VAR 0 2
82769: PUSH
82770: LD_INT 81
82772: PUSH
82773: LD_OWVAR 2
82777: PUSH
82778: EMPTY
82779: LIST
82780: LIST
82781: PUSH
82782: LD_INT 21
82784: PUSH
82785: LD_INT 1
82787: PUSH
82788: EMPTY
82789: LIST
82790: LIST
82791: PUSH
82792: EMPTY
82793: LIST
82794: LIST
82795: PPUSH
82796: CALL_OW 69
82800: ST_TO_ADDR
// ToLua ( playComputer() ) ;
82801: LD_STRING playComputer()
82803: PPUSH
82804: CALL_OW 559
// if not tmp then
82808: LD_VAR 0 2
82812: NOT
82813: IFFALSE 82817
// exit ;
82815: GO 82871
// for i in tmp do
82817: LD_ADDR_VAR 0 1
82821: PUSH
82822: LD_VAR 0 2
82826: PUSH
82827: FOR_IN
82828: IFFALSE 82869
// for j := 1 to 4 do
82830: LD_ADDR_VAR 0 3
82834: PUSH
82835: DOUBLE
82836: LD_INT 1
82838: DEC
82839: ST_TO_ADDR
82840: LD_INT 4
82842: PUSH
82843: FOR_TO
82844: IFFALSE 82865
// SetSkill ( i , j , 10 ) ;
82846: LD_VAR 0 1
82850: PPUSH
82851: LD_VAR 0 3
82855: PPUSH
82856: LD_INT 10
82858: PPUSH
82859: CALL_OW 237
82863: GO 82843
82865: POP
82866: POP
82867: GO 82827
82869: POP
82870: POP
// end ;
82871: PPOPN 3
82873: END
// every 0 0$1 trigger s30 do var i , tmp ;
82874: LD_EXP 118
82878: IFFALSE 82947
82880: GO 82882
82882: DISABLE
82883: LD_INT 0
82885: PPUSH
82886: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82887: LD_ADDR_VAR 0 2
82891: PUSH
82892: LD_INT 22
82894: PUSH
82895: LD_OWVAR 2
82899: PUSH
82900: EMPTY
82901: LIST
82902: LIST
82903: PPUSH
82904: CALL_OW 69
82908: ST_TO_ADDR
// if not tmp then
82909: LD_VAR 0 2
82913: NOT
82914: IFFALSE 82918
// exit ;
82916: GO 82947
// for i in tmp do
82918: LD_ADDR_VAR 0 1
82922: PUSH
82923: LD_VAR 0 2
82927: PUSH
82928: FOR_IN
82929: IFFALSE 82945
// SetLives ( i , 300 ) ;
82931: LD_VAR 0 1
82935: PPUSH
82936: LD_INT 300
82938: PPUSH
82939: CALL_OW 234
82943: GO 82928
82945: POP
82946: POP
// end ;
82947: PPOPN 2
82949: END
// every 0 0$1 trigger s60 do var i , tmp ;
82950: LD_EXP 119
82954: IFFALSE 83023
82956: GO 82958
82958: DISABLE
82959: LD_INT 0
82961: PPUSH
82962: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82963: LD_ADDR_VAR 0 2
82967: PUSH
82968: LD_INT 22
82970: PUSH
82971: LD_OWVAR 2
82975: PUSH
82976: EMPTY
82977: LIST
82978: LIST
82979: PPUSH
82980: CALL_OW 69
82984: ST_TO_ADDR
// if not tmp then
82985: LD_VAR 0 2
82989: NOT
82990: IFFALSE 82994
// exit ;
82992: GO 83023
// for i in tmp do
82994: LD_ADDR_VAR 0 1
82998: PUSH
82999: LD_VAR 0 2
83003: PUSH
83004: FOR_IN
83005: IFFALSE 83021
// SetLives ( i , 600 ) ;
83007: LD_VAR 0 1
83011: PPUSH
83012: LD_INT 600
83014: PPUSH
83015: CALL_OW 234
83019: GO 83004
83021: POP
83022: POP
// end ;
83023: PPOPN 2
83025: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
83026: LD_INT 0
83028: PPUSH
// case cmd of 301 :
83029: LD_VAR 0 1
83033: PUSH
83034: LD_INT 301
83036: DOUBLE
83037: EQUAL
83038: IFTRUE 83042
83040: GO 83074
83042: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
83043: LD_VAR 0 6
83047: PPUSH
83048: LD_VAR 0 7
83052: PPUSH
83053: LD_VAR 0 8
83057: PPUSH
83058: LD_VAR 0 4
83062: PPUSH
83063: LD_VAR 0 5
83067: PPUSH
83068: CALL 84275 0 5
83072: GO 83195
83074: LD_INT 302
83076: DOUBLE
83077: EQUAL
83078: IFTRUE 83082
83080: GO 83119
83082: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
83083: LD_VAR 0 6
83087: PPUSH
83088: LD_VAR 0 7
83092: PPUSH
83093: LD_VAR 0 8
83097: PPUSH
83098: LD_VAR 0 9
83102: PPUSH
83103: LD_VAR 0 4
83107: PPUSH
83108: LD_VAR 0 5
83112: PPUSH
83113: CALL 84366 0 6
83117: GO 83195
83119: LD_INT 303
83121: DOUBLE
83122: EQUAL
83123: IFTRUE 83127
83125: GO 83164
83127: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
83128: LD_VAR 0 6
83132: PPUSH
83133: LD_VAR 0 7
83137: PPUSH
83138: LD_VAR 0 8
83142: PPUSH
83143: LD_VAR 0 9
83147: PPUSH
83148: LD_VAR 0 4
83152: PPUSH
83153: LD_VAR 0 5
83157: PPUSH
83158: CALL 83200 0 6
83162: GO 83195
83164: LD_INT 304
83166: DOUBLE
83167: EQUAL
83168: IFTRUE 83172
83170: GO 83194
83172: POP
// hHackTeleport ( unit , x , y ) ; end ;
83173: LD_VAR 0 2
83177: PPUSH
83178: LD_VAR 0 4
83182: PPUSH
83183: LD_VAR 0 5
83187: PPUSH
83188: CALL 84959 0 3
83192: GO 83195
83194: POP
// end ;
83195: LD_VAR 0 12
83199: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
83200: LD_INT 0
83202: PPUSH
83203: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
83204: LD_VAR 0 1
83208: PUSH
83209: LD_INT 1
83211: LESS
83212: PUSH
83213: LD_VAR 0 1
83217: PUSH
83218: LD_INT 3
83220: GREATER
83221: OR
83222: PUSH
83223: LD_VAR 0 5
83227: PPUSH
83228: LD_VAR 0 6
83232: PPUSH
83233: CALL_OW 428
83237: OR
83238: IFFALSE 83242
// exit ;
83240: GO 83962
// uc_side := your_side ;
83242: LD_ADDR_OWVAR 20
83246: PUSH
83247: LD_OWVAR 2
83251: ST_TO_ADDR
// uc_nation := nation ;
83252: LD_ADDR_OWVAR 21
83256: PUSH
83257: LD_VAR 0 1
83261: ST_TO_ADDR
// bc_level = 1 ;
83262: LD_ADDR_OWVAR 43
83266: PUSH
83267: LD_INT 1
83269: ST_TO_ADDR
// case btype of 1 :
83270: LD_VAR 0 2
83274: PUSH
83275: LD_INT 1
83277: DOUBLE
83278: EQUAL
83279: IFTRUE 83283
83281: GO 83294
83283: POP
// bc_type := b_depot ; 2 :
83284: LD_ADDR_OWVAR 42
83288: PUSH
83289: LD_INT 0
83291: ST_TO_ADDR
83292: GO 83906
83294: LD_INT 2
83296: DOUBLE
83297: EQUAL
83298: IFTRUE 83302
83300: GO 83313
83302: POP
// bc_type := b_warehouse ; 3 :
83303: LD_ADDR_OWVAR 42
83307: PUSH
83308: LD_INT 1
83310: ST_TO_ADDR
83311: GO 83906
83313: LD_INT 3
83315: DOUBLE
83316: EQUAL
83317: IFTRUE 83321
83319: GO 83332
83321: POP
// bc_type := b_lab ; 4 .. 9 :
83322: LD_ADDR_OWVAR 42
83326: PUSH
83327: LD_INT 6
83329: ST_TO_ADDR
83330: GO 83906
83332: LD_INT 4
83334: DOUBLE
83335: GREATEREQUAL
83336: IFFALSE 83344
83338: LD_INT 9
83340: DOUBLE
83341: LESSEQUAL
83342: IFTRUE 83346
83344: GO 83398
83346: POP
// begin bc_type := b_lab_half ;
83347: LD_ADDR_OWVAR 42
83351: PUSH
83352: LD_INT 7
83354: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
83355: LD_ADDR_OWVAR 44
83359: PUSH
83360: LD_INT 10
83362: PUSH
83363: LD_INT 11
83365: PUSH
83366: LD_INT 12
83368: PUSH
83369: LD_INT 15
83371: PUSH
83372: LD_INT 14
83374: PUSH
83375: LD_INT 13
83377: PUSH
83378: EMPTY
83379: LIST
83380: LIST
83381: LIST
83382: LIST
83383: LIST
83384: LIST
83385: PUSH
83386: LD_VAR 0 2
83390: PUSH
83391: LD_INT 3
83393: MINUS
83394: ARRAY
83395: ST_TO_ADDR
// end ; 10 .. 13 :
83396: GO 83906
83398: LD_INT 10
83400: DOUBLE
83401: GREATEREQUAL
83402: IFFALSE 83410
83404: LD_INT 13
83406: DOUBLE
83407: LESSEQUAL
83408: IFTRUE 83412
83410: GO 83489
83412: POP
// begin bc_type := b_lab_full ;
83413: LD_ADDR_OWVAR 42
83417: PUSH
83418: LD_INT 8
83420: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
83421: LD_ADDR_OWVAR 44
83425: PUSH
83426: LD_INT 10
83428: PUSH
83429: LD_INT 12
83431: PUSH
83432: LD_INT 14
83434: PUSH
83435: LD_INT 13
83437: PUSH
83438: EMPTY
83439: LIST
83440: LIST
83441: LIST
83442: LIST
83443: PUSH
83444: LD_VAR 0 2
83448: PUSH
83449: LD_INT 9
83451: MINUS
83452: ARRAY
83453: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
83454: LD_ADDR_OWVAR 45
83458: PUSH
83459: LD_INT 11
83461: PUSH
83462: LD_INT 15
83464: PUSH
83465: LD_INT 12
83467: PUSH
83468: LD_INT 15
83470: PUSH
83471: EMPTY
83472: LIST
83473: LIST
83474: LIST
83475: LIST
83476: PUSH
83477: LD_VAR 0 2
83481: PUSH
83482: LD_INT 9
83484: MINUS
83485: ARRAY
83486: ST_TO_ADDR
// end ; 14 :
83487: GO 83906
83489: LD_INT 14
83491: DOUBLE
83492: EQUAL
83493: IFTRUE 83497
83495: GO 83508
83497: POP
// bc_type := b_workshop ; 15 :
83498: LD_ADDR_OWVAR 42
83502: PUSH
83503: LD_INT 2
83505: ST_TO_ADDR
83506: GO 83906
83508: LD_INT 15
83510: DOUBLE
83511: EQUAL
83512: IFTRUE 83516
83514: GO 83527
83516: POP
// bc_type := b_factory ; 16 :
83517: LD_ADDR_OWVAR 42
83521: PUSH
83522: LD_INT 3
83524: ST_TO_ADDR
83525: GO 83906
83527: LD_INT 16
83529: DOUBLE
83530: EQUAL
83531: IFTRUE 83535
83533: GO 83546
83535: POP
// bc_type := b_ext_gun ; 17 :
83536: LD_ADDR_OWVAR 42
83540: PUSH
83541: LD_INT 17
83543: ST_TO_ADDR
83544: GO 83906
83546: LD_INT 17
83548: DOUBLE
83549: EQUAL
83550: IFTRUE 83554
83552: GO 83582
83554: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
83555: LD_ADDR_OWVAR 42
83559: PUSH
83560: LD_INT 19
83562: PUSH
83563: LD_INT 23
83565: PUSH
83566: LD_INT 19
83568: PUSH
83569: EMPTY
83570: LIST
83571: LIST
83572: LIST
83573: PUSH
83574: LD_VAR 0 1
83578: ARRAY
83579: ST_TO_ADDR
83580: GO 83906
83582: LD_INT 18
83584: DOUBLE
83585: EQUAL
83586: IFTRUE 83590
83588: GO 83601
83590: POP
// bc_type := b_ext_radar ; 19 :
83591: LD_ADDR_OWVAR 42
83595: PUSH
83596: LD_INT 20
83598: ST_TO_ADDR
83599: GO 83906
83601: LD_INT 19
83603: DOUBLE
83604: EQUAL
83605: IFTRUE 83609
83607: GO 83620
83609: POP
// bc_type := b_ext_radio ; 20 :
83610: LD_ADDR_OWVAR 42
83614: PUSH
83615: LD_INT 22
83617: ST_TO_ADDR
83618: GO 83906
83620: LD_INT 20
83622: DOUBLE
83623: EQUAL
83624: IFTRUE 83628
83626: GO 83639
83628: POP
// bc_type := b_ext_siberium ; 21 :
83629: LD_ADDR_OWVAR 42
83633: PUSH
83634: LD_INT 21
83636: ST_TO_ADDR
83637: GO 83906
83639: LD_INT 21
83641: DOUBLE
83642: EQUAL
83643: IFTRUE 83647
83645: GO 83658
83647: POP
// bc_type := b_ext_computer ; 22 :
83648: LD_ADDR_OWVAR 42
83652: PUSH
83653: LD_INT 24
83655: ST_TO_ADDR
83656: GO 83906
83658: LD_INT 22
83660: DOUBLE
83661: EQUAL
83662: IFTRUE 83666
83664: GO 83677
83666: POP
// bc_type := b_ext_track ; 23 :
83667: LD_ADDR_OWVAR 42
83671: PUSH
83672: LD_INT 16
83674: ST_TO_ADDR
83675: GO 83906
83677: LD_INT 23
83679: DOUBLE
83680: EQUAL
83681: IFTRUE 83685
83683: GO 83696
83685: POP
// bc_type := b_ext_laser ; 24 :
83686: LD_ADDR_OWVAR 42
83690: PUSH
83691: LD_INT 25
83693: ST_TO_ADDR
83694: GO 83906
83696: LD_INT 24
83698: DOUBLE
83699: EQUAL
83700: IFTRUE 83704
83702: GO 83715
83704: POP
// bc_type := b_control_tower ; 25 :
83705: LD_ADDR_OWVAR 42
83709: PUSH
83710: LD_INT 36
83712: ST_TO_ADDR
83713: GO 83906
83715: LD_INT 25
83717: DOUBLE
83718: EQUAL
83719: IFTRUE 83723
83721: GO 83734
83723: POP
// bc_type := b_breastwork ; 26 :
83724: LD_ADDR_OWVAR 42
83728: PUSH
83729: LD_INT 31
83731: ST_TO_ADDR
83732: GO 83906
83734: LD_INT 26
83736: DOUBLE
83737: EQUAL
83738: IFTRUE 83742
83740: GO 83753
83742: POP
// bc_type := b_bunker ; 27 :
83743: LD_ADDR_OWVAR 42
83747: PUSH
83748: LD_INT 32
83750: ST_TO_ADDR
83751: GO 83906
83753: LD_INT 27
83755: DOUBLE
83756: EQUAL
83757: IFTRUE 83761
83759: GO 83772
83761: POP
// bc_type := b_turret ; 28 :
83762: LD_ADDR_OWVAR 42
83766: PUSH
83767: LD_INT 33
83769: ST_TO_ADDR
83770: GO 83906
83772: LD_INT 28
83774: DOUBLE
83775: EQUAL
83776: IFTRUE 83780
83778: GO 83791
83780: POP
// bc_type := b_armoury ; 29 :
83781: LD_ADDR_OWVAR 42
83785: PUSH
83786: LD_INT 4
83788: ST_TO_ADDR
83789: GO 83906
83791: LD_INT 29
83793: DOUBLE
83794: EQUAL
83795: IFTRUE 83799
83797: GO 83810
83799: POP
// bc_type := b_barracks ; 30 :
83800: LD_ADDR_OWVAR 42
83804: PUSH
83805: LD_INT 5
83807: ST_TO_ADDR
83808: GO 83906
83810: LD_INT 30
83812: DOUBLE
83813: EQUAL
83814: IFTRUE 83818
83816: GO 83829
83818: POP
// bc_type := b_solar_power ; 31 :
83819: LD_ADDR_OWVAR 42
83823: PUSH
83824: LD_INT 27
83826: ST_TO_ADDR
83827: GO 83906
83829: LD_INT 31
83831: DOUBLE
83832: EQUAL
83833: IFTRUE 83837
83835: GO 83848
83837: POP
// bc_type := b_oil_power ; 32 :
83838: LD_ADDR_OWVAR 42
83842: PUSH
83843: LD_INT 26
83845: ST_TO_ADDR
83846: GO 83906
83848: LD_INT 32
83850: DOUBLE
83851: EQUAL
83852: IFTRUE 83856
83854: GO 83867
83856: POP
// bc_type := b_siberite_power ; 33 :
83857: LD_ADDR_OWVAR 42
83861: PUSH
83862: LD_INT 28
83864: ST_TO_ADDR
83865: GO 83906
83867: LD_INT 33
83869: DOUBLE
83870: EQUAL
83871: IFTRUE 83875
83873: GO 83886
83875: POP
// bc_type := b_oil_mine ; 34 :
83876: LD_ADDR_OWVAR 42
83880: PUSH
83881: LD_INT 29
83883: ST_TO_ADDR
83884: GO 83906
83886: LD_INT 34
83888: DOUBLE
83889: EQUAL
83890: IFTRUE 83894
83892: GO 83905
83894: POP
// bc_type := b_siberite_mine ; end ;
83895: LD_ADDR_OWVAR 42
83899: PUSH
83900: LD_INT 30
83902: ST_TO_ADDR
83903: GO 83906
83905: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
83906: LD_ADDR_VAR 0 8
83910: PUSH
83911: LD_VAR 0 5
83915: PPUSH
83916: LD_VAR 0 6
83920: PPUSH
83921: LD_VAR 0 3
83925: PPUSH
83926: CALL_OW 47
83930: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
83931: LD_OWVAR 42
83935: PUSH
83936: LD_INT 32
83938: PUSH
83939: LD_INT 33
83941: PUSH
83942: EMPTY
83943: LIST
83944: LIST
83945: IN
83946: IFFALSE 83962
// PlaceWeaponTurret ( b , weapon ) ;
83948: LD_VAR 0 8
83952: PPUSH
83953: LD_VAR 0 4
83957: PPUSH
83958: CALL_OW 431
// end ;
83962: LD_VAR 0 7
83966: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
83967: LD_INT 0
83969: PPUSH
83970: PPUSH
83971: PPUSH
83972: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83973: LD_ADDR_VAR 0 4
83977: PUSH
83978: LD_INT 22
83980: PUSH
83981: LD_OWVAR 2
83985: PUSH
83986: EMPTY
83987: LIST
83988: LIST
83989: PUSH
83990: LD_INT 2
83992: PUSH
83993: LD_INT 30
83995: PUSH
83996: LD_INT 0
83998: PUSH
83999: EMPTY
84000: LIST
84001: LIST
84002: PUSH
84003: LD_INT 30
84005: PUSH
84006: LD_INT 1
84008: PUSH
84009: EMPTY
84010: LIST
84011: LIST
84012: PUSH
84013: EMPTY
84014: LIST
84015: LIST
84016: LIST
84017: PUSH
84018: EMPTY
84019: LIST
84020: LIST
84021: PPUSH
84022: CALL_OW 69
84026: ST_TO_ADDR
// if not tmp then
84027: LD_VAR 0 4
84031: NOT
84032: IFFALSE 84036
// exit ;
84034: GO 84095
// for i in tmp do
84036: LD_ADDR_VAR 0 2
84040: PUSH
84041: LD_VAR 0 4
84045: PUSH
84046: FOR_IN
84047: IFFALSE 84093
// for j = 1 to 3 do
84049: LD_ADDR_VAR 0 3
84053: PUSH
84054: DOUBLE
84055: LD_INT 1
84057: DEC
84058: ST_TO_ADDR
84059: LD_INT 3
84061: PUSH
84062: FOR_TO
84063: IFFALSE 84089
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
84065: LD_VAR 0 2
84069: PPUSH
84070: CALL_OW 274
84074: PPUSH
84075: LD_VAR 0 3
84079: PPUSH
84080: LD_INT 99999
84082: PPUSH
84083: CALL_OW 277
84087: GO 84062
84089: POP
84090: POP
84091: GO 84046
84093: POP
84094: POP
// end ;
84095: LD_VAR 0 1
84099: RET
// export function hHackSetLevel10 ; var i , j ; begin
84100: LD_INT 0
84102: PPUSH
84103: PPUSH
84104: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84105: LD_ADDR_VAR 0 2
84109: PUSH
84110: LD_INT 21
84112: PUSH
84113: LD_INT 1
84115: PUSH
84116: EMPTY
84117: LIST
84118: LIST
84119: PPUSH
84120: CALL_OW 69
84124: PUSH
84125: FOR_IN
84126: IFFALSE 84178
// if IsSelected ( i ) then
84128: LD_VAR 0 2
84132: PPUSH
84133: CALL_OW 306
84137: IFFALSE 84176
// begin for j := 1 to 4 do
84139: LD_ADDR_VAR 0 3
84143: PUSH
84144: DOUBLE
84145: LD_INT 1
84147: DEC
84148: ST_TO_ADDR
84149: LD_INT 4
84151: PUSH
84152: FOR_TO
84153: IFFALSE 84174
// SetSkill ( i , j , 10 ) ;
84155: LD_VAR 0 2
84159: PPUSH
84160: LD_VAR 0 3
84164: PPUSH
84165: LD_INT 10
84167: PPUSH
84168: CALL_OW 237
84172: GO 84152
84174: POP
84175: POP
// end ;
84176: GO 84125
84178: POP
84179: POP
// end ;
84180: LD_VAR 0 1
84184: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
84185: LD_INT 0
84187: PPUSH
84188: PPUSH
84189: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
84190: LD_ADDR_VAR 0 2
84194: PUSH
84195: LD_INT 22
84197: PUSH
84198: LD_OWVAR 2
84202: PUSH
84203: EMPTY
84204: LIST
84205: LIST
84206: PUSH
84207: LD_INT 21
84209: PUSH
84210: LD_INT 1
84212: PUSH
84213: EMPTY
84214: LIST
84215: LIST
84216: PUSH
84217: EMPTY
84218: LIST
84219: LIST
84220: PPUSH
84221: CALL_OW 69
84225: PUSH
84226: FOR_IN
84227: IFFALSE 84268
// begin for j := 1 to 4 do
84229: LD_ADDR_VAR 0 3
84233: PUSH
84234: DOUBLE
84235: LD_INT 1
84237: DEC
84238: ST_TO_ADDR
84239: LD_INT 4
84241: PUSH
84242: FOR_TO
84243: IFFALSE 84264
// SetSkill ( i , j , 10 ) ;
84245: LD_VAR 0 2
84249: PPUSH
84250: LD_VAR 0 3
84254: PPUSH
84255: LD_INT 10
84257: PPUSH
84258: CALL_OW 237
84262: GO 84242
84264: POP
84265: POP
// end ;
84266: GO 84226
84268: POP
84269: POP
// end ;
84270: LD_VAR 0 1
84274: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
84275: LD_INT 0
84277: PPUSH
// uc_side := your_side ;
84278: LD_ADDR_OWVAR 20
84282: PUSH
84283: LD_OWVAR 2
84287: ST_TO_ADDR
// uc_nation := nation ;
84288: LD_ADDR_OWVAR 21
84292: PUSH
84293: LD_VAR 0 1
84297: ST_TO_ADDR
// InitHc ;
84298: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
84302: LD_INT 0
84304: PPUSH
84305: LD_VAR 0 2
84309: PPUSH
84310: LD_VAR 0 3
84314: PPUSH
84315: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
84319: LD_VAR 0 4
84323: PPUSH
84324: LD_VAR 0 5
84328: PPUSH
84329: CALL_OW 428
84333: PUSH
84334: LD_INT 0
84336: EQUAL
84337: IFFALSE 84361
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
84339: CALL_OW 44
84343: PPUSH
84344: LD_VAR 0 4
84348: PPUSH
84349: LD_VAR 0 5
84353: PPUSH
84354: LD_INT 1
84356: PPUSH
84357: CALL_OW 48
// end ;
84361: LD_VAR 0 6
84365: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
84366: LD_INT 0
84368: PPUSH
84369: PPUSH
// uc_side := your_side ;
84370: LD_ADDR_OWVAR 20
84374: PUSH
84375: LD_OWVAR 2
84379: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
84380: LD_VAR 0 1
84384: PUSH
84385: LD_INT 1
84387: PUSH
84388: LD_INT 2
84390: PUSH
84391: LD_INT 3
84393: PUSH
84394: LD_INT 4
84396: PUSH
84397: LD_INT 5
84399: PUSH
84400: EMPTY
84401: LIST
84402: LIST
84403: LIST
84404: LIST
84405: LIST
84406: IN
84407: IFFALSE 84419
// uc_nation := nation_american else
84409: LD_ADDR_OWVAR 21
84413: PUSH
84414: LD_INT 1
84416: ST_TO_ADDR
84417: GO 84462
// if chassis in [ 11 , 12 , 13 , 14 ] then
84419: LD_VAR 0 1
84423: PUSH
84424: LD_INT 11
84426: PUSH
84427: LD_INT 12
84429: PUSH
84430: LD_INT 13
84432: PUSH
84433: LD_INT 14
84435: PUSH
84436: EMPTY
84437: LIST
84438: LIST
84439: LIST
84440: LIST
84441: IN
84442: IFFALSE 84454
// uc_nation := nation_arabian else
84444: LD_ADDR_OWVAR 21
84448: PUSH
84449: LD_INT 2
84451: ST_TO_ADDR
84452: GO 84462
// uc_nation := nation_russian ;
84454: LD_ADDR_OWVAR 21
84458: PUSH
84459: LD_INT 3
84461: ST_TO_ADDR
// vc_chassis := chassis ;
84462: LD_ADDR_OWVAR 37
84466: PUSH
84467: LD_VAR 0 1
84471: ST_TO_ADDR
// vc_engine := engine ;
84472: LD_ADDR_OWVAR 39
84476: PUSH
84477: LD_VAR 0 2
84481: ST_TO_ADDR
// vc_control := control ;
84482: LD_ADDR_OWVAR 38
84486: PUSH
84487: LD_VAR 0 3
84491: ST_TO_ADDR
// vc_weapon := weapon ;
84492: LD_ADDR_OWVAR 40
84496: PUSH
84497: LD_VAR 0 4
84501: ST_TO_ADDR
// un := CreateVehicle ;
84502: LD_ADDR_VAR 0 8
84506: PUSH
84507: CALL_OW 45
84511: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
84512: LD_VAR 0 8
84516: PPUSH
84517: LD_INT 0
84519: PPUSH
84520: LD_INT 5
84522: PPUSH
84523: CALL_OW 12
84527: PPUSH
84528: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
84532: LD_VAR 0 8
84536: PPUSH
84537: LD_VAR 0 5
84541: PPUSH
84542: LD_VAR 0 6
84546: PPUSH
84547: LD_INT 1
84549: PPUSH
84550: CALL_OW 48
// end ;
84554: LD_VAR 0 7
84558: RET
// export hInvincible ; every 1 do
84559: GO 84561
84561: DISABLE
// hInvincible := [ ] ;
84562: LD_ADDR_EXP 120
84566: PUSH
84567: EMPTY
84568: ST_TO_ADDR
84569: END
// every 10 do var i ;
84570: GO 84572
84572: DISABLE
84573: LD_INT 0
84575: PPUSH
// begin enable ;
84576: ENABLE
// if not hInvincible then
84577: LD_EXP 120
84581: NOT
84582: IFFALSE 84586
// exit ;
84584: GO 84630
// for i in hInvincible do
84586: LD_ADDR_VAR 0 1
84590: PUSH
84591: LD_EXP 120
84595: PUSH
84596: FOR_IN
84597: IFFALSE 84628
// if GetLives ( i ) < 1000 then
84599: LD_VAR 0 1
84603: PPUSH
84604: CALL_OW 256
84608: PUSH
84609: LD_INT 1000
84611: LESS
84612: IFFALSE 84626
// SetLives ( i , 1000 ) ;
84614: LD_VAR 0 1
84618: PPUSH
84619: LD_INT 1000
84621: PPUSH
84622: CALL_OW 234
84626: GO 84596
84628: POP
84629: POP
// end ;
84630: PPOPN 1
84632: END
// export function hHackInvincible ; var i ; begin
84633: LD_INT 0
84635: PPUSH
84636: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
84637: LD_ADDR_VAR 0 2
84641: PUSH
84642: LD_INT 2
84644: PUSH
84645: LD_INT 21
84647: PUSH
84648: LD_INT 1
84650: PUSH
84651: EMPTY
84652: LIST
84653: LIST
84654: PUSH
84655: LD_INT 21
84657: PUSH
84658: LD_INT 2
84660: PUSH
84661: EMPTY
84662: LIST
84663: LIST
84664: PUSH
84665: EMPTY
84666: LIST
84667: LIST
84668: LIST
84669: PPUSH
84670: CALL_OW 69
84674: PUSH
84675: FOR_IN
84676: IFFALSE 84737
// if IsSelected ( i ) then
84678: LD_VAR 0 2
84682: PPUSH
84683: CALL_OW 306
84687: IFFALSE 84735
// begin if i in hInvincible then
84689: LD_VAR 0 2
84693: PUSH
84694: LD_EXP 120
84698: IN
84699: IFFALSE 84719
// hInvincible := hInvincible diff i else
84701: LD_ADDR_EXP 120
84705: PUSH
84706: LD_EXP 120
84710: PUSH
84711: LD_VAR 0 2
84715: DIFF
84716: ST_TO_ADDR
84717: GO 84735
// hInvincible := hInvincible union i ;
84719: LD_ADDR_EXP 120
84723: PUSH
84724: LD_EXP 120
84728: PUSH
84729: LD_VAR 0 2
84733: UNION
84734: ST_TO_ADDR
// end ;
84735: GO 84675
84737: POP
84738: POP
// end ;
84739: LD_VAR 0 1
84743: RET
// export function hHackInvisible ; var i , j ; begin
84744: LD_INT 0
84746: PPUSH
84747: PPUSH
84748: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
84749: LD_ADDR_VAR 0 2
84753: PUSH
84754: LD_INT 21
84756: PUSH
84757: LD_INT 1
84759: PUSH
84760: EMPTY
84761: LIST
84762: LIST
84763: PPUSH
84764: CALL_OW 69
84768: PUSH
84769: FOR_IN
84770: IFFALSE 84794
// if IsSelected ( i ) then
84772: LD_VAR 0 2
84776: PPUSH
84777: CALL_OW 306
84781: IFFALSE 84792
// ComForceInvisible ( i ) ;
84783: LD_VAR 0 2
84787: PPUSH
84788: CALL_OW 496
84792: GO 84769
84794: POP
84795: POP
// end ;
84796: LD_VAR 0 1
84800: RET
// export function hHackChangeYourSide ; begin
84801: LD_INT 0
84803: PPUSH
// if your_side = 8 then
84804: LD_OWVAR 2
84808: PUSH
84809: LD_INT 8
84811: EQUAL
84812: IFFALSE 84824
// your_side := 0 else
84814: LD_ADDR_OWVAR 2
84818: PUSH
84819: LD_INT 0
84821: ST_TO_ADDR
84822: GO 84838
// your_side := your_side + 1 ;
84824: LD_ADDR_OWVAR 2
84828: PUSH
84829: LD_OWVAR 2
84833: PUSH
84834: LD_INT 1
84836: PLUS
84837: ST_TO_ADDR
// end ;
84838: LD_VAR 0 1
84842: RET
// export function hHackChangeUnitSide ; var i , j ; begin
84843: LD_INT 0
84845: PPUSH
84846: PPUSH
84847: PPUSH
// for i in all_units do
84848: LD_ADDR_VAR 0 2
84852: PUSH
84853: LD_OWVAR 3
84857: PUSH
84858: FOR_IN
84859: IFFALSE 84937
// if IsSelected ( i ) then
84861: LD_VAR 0 2
84865: PPUSH
84866: CALL_OW 306
84870: IFFALSE 84935
// begin j := GetSide ( i ) ;
84872: LD_ADDR_VAR 0 3
84876: PUSH
84877: LD_VAR 0 2
84881: PPUSH
84882: CALL_OW 255
84886: ST_TO_ADDR
// if j = 8 then
84887: LD_VAR 0 3
84891: PUSH
84892: LD_INT 8
84894: EQUAL
84895: IFFALSE 84907
// j := 0 else
84897: LD_ADDR_VAR 0 3
84901: PUSH
84902: LD_INT 0
84904: ST_TO_ADDR
84905: GO 84921
// j := j + 1 ;
84907: LD_ADDR_VAR 0 3
84911: PUSH
84912: LD_VAR 0 3
84916: PUSH
84917: LD_INT 1
84919: PLUS
84920: ST_TO_ADDR
// SetSide ( i , j ) ;
84921: LD_VAR 0 2
84925: PPUSH
84926: LD_VAR 0 3
84930: PPUSH
84931: CALL_OW 235
// end ;
84935: GO 84858
84937: POP
84938: POP
// end ;
84939: LD_VAR 0 1
84943: RET
// export function hHackFog ; begin
84944: LD_INT 0
84946: PPUSH
// FogOff ( true ) ;
84947: LD_INT 1
84949: PPUSH
84950: CALL_OW 344
// end ;
84954: LD_VAR 0 1
84958: RET
// export function hHackTeleport ( unit , x , y ) ; begin
84959: LD_INT 0
84961: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
84962: LD_VAR 0 1
84966: PPUSH
84967: LD_VAR 0 2
84971: PPUSH
84972: LD_VAR 0 3
84976: PPUSH
84977: LD_INT 1
84979: PPUSH
84980: LD_INT 1
84982: PPUSH
84983: CALL_OW 483
// CenterOnXY ( x , y ) ;
84987: LD_VAR 0 2
84991: PPUSH
84992: LD_VAR 0 3
84996: PPUSH
84997: CALL_OW 84
// end ;
85001: LD_VAR 0 4
85005: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
85006: LD_INT 0
85008: PPUSH
85009: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
85010: LD_VAR 0 1
85014: NOT
85015: PUSH
85016: LD_VAR 0 2
85020: PPUSH
85021: LD_VAR 0 3
85025: PPUSH
85026: CALL_OW 488
85030: NOT
85031: OR
85032: PUSH
85033: LD_VAR 0 1
85037: PPUSH
85038: CALL_OW 266
85042: PUSH
85043: LD_INT 3
85045: NONEQUAL
85046: PUSH
85047: LD_VAR 0 1
85051: PPUSH
85052: CALL_OW 247
85056: PUSH
85057: LD_INT 1
85059: EQUAL
85060: NOT
85061: AND
85062: OR
85063: IFFALSE 85067
// exit ;
85065: GO 85216
// if GetType ( factory ) = unit_human then
85067: LD_VAR 0 1
85071: PPUSH
85072: CALL_OW 247
85076: PUSH
85077: LD_INT 1
85079: EQUAL
85080: IFFALSE 85097
// factory := IsInUnit ( factory ) ;
85082: LD_ADDR_VAR 0 1
85086: PUSH
85087: LD_VAR 0 1
85091: PPUSH
85092: CALL_OW 310
85096: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
85097: LD_VAR 0 1
85101: PPUSH
85102: CALL_OW 266
85106: PUSH
85107: LD_INT 3
85109: NONEQUAL
85110: IFFALSE 85114
// exit ;
85112: GO 85216
// if HexInfo ( x , y ) = factory then
85114: LD_VAR 0 2
85118: PPUSH
85119: LD_VAR 0 3
85123: PPUSH
85124: CALL_OW 428
85128: PUSH
85129: LD_VAR 0 1
85133: EQUAL
85134: IFFALSE 85161
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
85136: LD_ADDR_EXP 121
85140: PUSH
85141: LD_EXP 121
85145: PPUSH
85146: LD_VAR 0 1
85150: PPUSH
85151: LD_INT 0
85153: PPUSH
85154: CALL_OW 1
85158: ST_TO_ADDR
85159: GO 85212
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
85161: LD_ADDR_EXP 121
85165: PUSH
85166: LD_EXP 121
85170: PPUSH
85171: LD_VAR 0 1
85175: PPUSH
85176: LD_VAR 0 1
85180: PPUSH
85181: CALL_OW 255
85185: PUSH
85186: LD_VAR 0 1
85190: PUSH
85191: LD_VAR 0 2
85195: PUSH
85196: LD_VAR 0 3
85200: PUSH
85201: EMPTY
85202: LIST
85203: LIST
85204: LIST
85205: LIST
85206: PPUSH
85207: CALL_OW 1
85211: ST_TO_ADDR
// UpdateFactoryWaypoints ;
85212: CALL 85221 0 0
// end ;
85216: LD_VAR 0 4
85220: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
85221: LD_INT 0
85223: PPUSH
85224: PPUSH
85225: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
85226: LD_STRING resetFactoryWaypoint();
85228: PPUSH
85229: CALL_OW 559
// if factoryWaypoints then
85233: LD_EXP 121
85237: IFFALSE 85363
// begin list := PrepareArray ( factoryWaypoints ) ;
85239: LD_ADDR_VAR 0 3
85243: PUSH
85244: LD_EXP 121
85248: PPUSH
85249: CALL 70328 0 1
85253: ST_TO_ADDR
// for i := 1 to list do
85254: LD_ADDR_VAR 0 2
85258: PUSH
85259: DOUBLE
85260: LD_INT 1
85262: DEC
85263: ST_TO_ADDR
85264: LD_VAR 0 3
85268: PUSH
85269: FOR_TO
85270: IFFALSE 85361
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85272: LD_STRING setFactoryWaypointXY(
85274: PUSH
85275: LD_VAR 0 3
85279: PUSH
85280: LD_VAR 0 2
85284: ARRAY
85285: PUSH
85286: LD_INT 1
85288: ARRAY
85289: STR
85290: PUSH
85291: LD_STRING ,
85293: STR
85294: PUSH
85295: LD_VAR 0 3
85299: PUSH
85300: LD_VAR 0 2
85304: ARRAY
85305: PUSH
85306: LD_INT 2
85308: ARRAY
85309: STR
85310: PUSH
85311: LD_STRING ,
85313: STR
85314: PUSH
85315: LD_VAR 0 3
85319: PUSH
85320: LD_VAR 0 2
85324: ARRAY
85325: PUSH
85326: LD_INT 3
85328: ARRAY
85329: STR
85330: PUSH
85331: LD_STRING ,
85333: STR
85334: PUSH
85335: LD_VAR 0 3
85339: PUSH
85340: LD_VAR 0 2
85344: ARRAY
85345: PUSH
85346: LD_INT 4
85348: ARRAY
85349: STR
85350: PUSH
85351: LD_STRING )
85353: STR
85354: PPUSH
85355: CALL_OW 559
85359: GO 85269
85361: POP
85362: POP
// end ; end ;
85363: LD_VAR 0 1
85367: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
85368: LD_INT 0
85370: PPUSH
// if HexInfo ( x , y ) = warehouse then
85371: LD_VAR 0 2
85375: PPUSH
85376: LD_VAR 0 3
85380: PPUSH
85381: CALL_OW 428
85385: PUSH
85386: LD_VAR 0 1
85390: EQUAL
85391: IFFALSE 85418
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
85393: LD_ADDR_EXP 122
85397: PUSH
85398: LD_EXP 122
85402: PPUSH
85403: LD_VAR 0 1
85407: PPUSH
85408: LD_INT 0
85410: PPUSH
85411: CALL_OW 1
85415: ST_TO_ADDR
85416: GO 85469
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
85418: LD_ADDR_EXP 122
85422: PUSH
85423: LD_EXP 122
85427: PPUSH
85428: LD_VAR 0 1
85432: PPUSH
85433: LD_VAR 0 1
85437: PPUSH
85438: CALL_OW 255
85442: PUSH
85443: LD_VAR 0 1
85447: PUSH
85448: LD_VAR 0 2
85452: PUSH
85453: LD_VAR 0 3
85457: PUSH
85458: EMPTY
85459: LIST
85460: LIST
85461: LIST
85462: LIST
85463: PPUSH
85464: CALL_OW 1
85468: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
85469: CALL 85478 0 0
// end ;
85473: LD_VAR 0 4
85477: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
85478: LD_INT 0
85480: PPUSH
85481: PPUSH
85482: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
85483: LD_STRING resetWarehouseGatheringPoints();
85485: PPUSH
85486: CALL_OW 559
// if warehouseGatheringPoints then
85490: LD_EXP 122
85494: IFFALSE 85620
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
85496: LD_ADDR_VAR 0 3
85500: PUSH
85501: LD_EXP 122
85505: PPUSH
85506: CALL 70328 0 1
85510: ST_TO_ADDR
// for i := 1 to list do
85511: LD_ADDR_VAR 0 2
85515: PUSH
85516: DOUBLE
85517: LD_INT 1
85519: DEC
85520: ST_TO_ADDR
85521: LD_VAR 0 3
85525: PUSH
85526: FOR_TO
85527: IFFALSE 85618
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
85529: LD_STRING setWarehouseGatheringPointXY(
85531: PUSH
85532: LD_VAR 0 3
85536: PUSH
85537: LD_VAR 0 2
85541: ARRAY
85542: PUSH
85543: LD_INT 1
85545: ARRAY
85546: STR
85547: PUSH
85548: LD_STRING ,
85550: STR
85551: PUSH
85552: LD_VAR 0 3
85556: PUSH
85557: LD_VAR 0 2
85561: ARRAY
85562: PUSH
85563: LD_INT 2
85565: ARRAY
85566: STR
85567: PUSH
85568: LD_STRING ,
85570: STR
85571: PUSH
85572: LD_VAR 0 3
85576: PUSH
85577: LD_VAR 0 2
85581: ARRAY
85582: PUSH
85583: LD_INT 3
85585: ARRAY
85586: STR
85587: PUSH
85588: LD_STRING ,
85590: STR
85591: PUSH
85592: LD_VAR 0 3
85596: PUSH
85597: LD_VAR 0 2
85601: ARRAY
85602: PUSH
85603: LD_INT 4
85605: ARRAY
85606: STR
85607: PUSH
85608: LD_STRING )
85610: STR
85611: PPUSH
85612: CALL_OW 559
85616: GO 85526
85618: POP
85619: POP
// end ; end ;
85620: LD_VAR 0 1
85624: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
85625: LD_EXP 122
85629: IFFALSE 86314
85631: GO 85633
85633: DISABLE
85634: LD_INT 0
85636: PPUSH
85637: PPUSH
85638: PPUSH
85639: PPUSH
85640: PPUSH
85641: PPUSH
85642: PPUSH
85643: PPUSH
85644: PPUSH
// begin enable ;
85645: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
85646: LD_ADDR_VAR 0 3
85650: PUSH
85651: LD_EXP 122
85655: PPUSH
85656: CALL 70328 0 1
85660: ST_TO_ADDR
// if not list then
85661: LD_VAR 0 3
85665: NOT
85666: IFFALSE 85670
// exit ;
85668: GO 86314
// for i := 1 to list do
85670: LD_ADDR_VAR 0 1
85674: PUSH
85675: DOUBLE
85676: LD_INT 1
85678: DEC
85679: ST_TO_ADDR
85680: LD_VAR 0 3
85684: PUSH
85685: FOR_TO
85686: IFFALSE 86312
// begin depot := list [ i ] [ 2 ] ;
85688: LD_ADDR_VAR 0 8
85692: PUSH
85693: LD_VAR 0 3
85697: PUSH
85698: LD_VAR 0 1
85702: ARRAY
85703: PUSH
85704: LD_INT 2
85706: ARRAY
85707: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
85708: LD_ADDR_VAR 0 5
85712: PUSH
85713: LD_VAR 0 3
85717: PUSH
85718: LD_VAR 0 1
85722: ARRAY
85723: PUSH
85724: LD_INT 1
85726: ARRAY
85727: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
85728: LD_VAR 0 8
85732: PPUSH
85733: CALL_OW 301
85737: PUSH
85738: LD_VAR 0 5
85742: PUSH
85743: LD_VAR 0 8
85747: PPUSH
85748: CALL_OW 255
85752: NONEQUAL
85753: OR
85754: IFFALSE 85783
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
85756: LD_ADDR_EXP 122
85760: PUSH
85761: LD_EXP 122
85765: PPUSH
85766: LD_VAR 0 8
85770: PPUSH
85771: LD_INT 0
85773: PPUSH
85774: CALL_OW 1
85778: ST_TO_ADDR
// exit ;
85779: POP
85780: POP
85781: GO 86314
// end ; x := list [ i ] [ 3 ] ;
85783: LD_ADDR_VAR 0 6
85787: PUSH
85788: LD_VAR 0 3
85792: PUSH
85793: LD_VAR 0 1
85797: ARRAY
85798: PUSH
85799: LD_INT 3
85801: ARRAY
85802: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
85803: LD_ADDR_VAR 0 7
85807: PUSH
85808: LD_VAR 0 3
85812: PUSH
85813: LD_VAR 0 1
85817: ARRAY
85818: PUSH
85819: LD_INT 4
85821: ARRAY
85822: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
85823: LD_ADDR_VAR 0 9
85827: PUSH
85828: LD_VAR 0 6
85832: PPUSH
85833: LD_VAR 0 7
85837: PPUSH
85838: LD_INT 16
85840: PPUSH
85841: CALL 68916 0 3
85845: ST_TO_ADDR
// if not cratesNearbyPoint then
85846: LD_VAR 0 9
85850: NOT
85851: IFFALSE 85857
// exit ;
85853: POP
85854: POP
85855: GO 86314
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
85857: LD_ADDR_VAR 0 4
85861: PUSH
85862: LD_INT 22
85864: PUSH
85865: LD_VAR 0 5
85869: PUSH
85870: EMPTY
85871: LIST
85872: LIST
85873: PUSH
85874: LD_INT 3
85876: PUSH
85877: LD_INT 60
85879: PUSH
85880: EMPTY
85881: LIST
85882: PUSH
85883: EMPTY
85884: LIST
85885: LIST
85886: PUSH
85887: LD_INT 91
85889: PUSH
85890: LD_VAR 0 8
85894: PUSH
85895: LD_INT 6
85897: PUSH
85898: EMPTY
85899: LIST
85900: LIST
85901: LIST
85902: PUSH
85903: LD_INT 2
85905: PUSH
85906: LD_INT 25
85908: PUSH
85909: LD_INT 2
85911: PUSH
85912: EMPTY
85913: LIST
85914: LIST
85915: PUSH
85916: LD_INT 25
85918: PUSH
85919: LD_INT 16
85921: PUSH
85922: EMPTY
85923: LIST
85924: LIST
85925: PUSH
85926: EMPTY
85927: LIST
85928: LIST
85929: LIST
85930: PUSH
85931: EMPTY
85932: LIST
85933: LIST
85934: LIST
85935: LIST
85936: PPUSH
85937: CALL_OW 69
85941: PUSH
85942: LD_VAR 0 8
85946: PPUSH
85947: CALL_OW 313
85951: PPUSH
85952: LD_INT 3
85954: PUSH
85955: LD_INT 60
85957: PUSH
85958: EMPTY
85959: LIST
85960: PUSH
85961: EMPTY
85962: LIST
85963: LIST
85964: PUSH
85965: LD_INT 2
85967: PUSH
85968: LD_INT 25
85970: PUSH
85971: LD_INT 2
85973: PUSH
85974: EMPTY
85975: LIST
85976: LIST
85977: PUSH
85978: LD_INT 25
85980: PUSH
85981: LD_INT 16
85983: PUSH
85984: EMPTY
85985: LIST
85986: LIST
85987: PUSH
85988: EMPTY
85989: LIST
85990: LIST
85991: LIST
85992: PUSH
85993: EMPTY
85994: LIST
85995: LIST
85996: PPUSH
85997: CALL_OW 72
86001: UNION
86002: ST_TO_ADDR
// if tmp then
86003: LD_VAR 0 4
86007: IFFALSE 86087
// begin tmp := ShrinkArray ( tmp , 3 ) ;
86009: LD_ADDR_VAR 0 4
86013: PUSH
86014: LD_VAR 0 4
86018: PPUSH
86019: LD_INT 3
86021: PPUSH
86022: CALL 66885 0 2
86026: ST_TO_ADDR
// for j in tmp do
86027: LD_ADDR_VAR 0 2
86031: PUSH
86032: LD_VAR 0 4
86036: PUSH
86037: FOR_IN
86038: IFFALSE 86081
// begin if IsInUnit ( j ) then
86040: LD_VAR 0 2
86044: PPUSH
86045: CALL_OW 310
86049: IFFALSE 86060
// ComExit ( j ) ;
86051: LD_VAR 0 2
86055: PPUSH
86056: CALL 66968 0 1
// AddComCollect ( j , x , y ) ;
86060: LD_VAR 0 2
86064: PPUSH
86065: LD_VAR 0 6
86069: PPUSH
86070: LD_VAR 0 7
86074: PPUSH
86075: CALL_OW 177
// end ;
86079: GO 86037
86081: POP
86082: POP
// exit ;
86083: POP
86084: POP
86085: GO 86314
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
86087: LD_ADDR_VAR 0 4
86091: PUSH
86092: LD_INT 22
86094: PUSH
86095: LD_VAR 0 5
86099: PUSH
86100: EMPTY
86101: LIST
86102: LIST
86103: PUSH
86104: LD_INT 91
86106: PUSH
86107: LD_VAR 0 8
86111: PUSH
86112: LD_INT 8
86114: PUSH
86115: EMPTY
86116: LIST
86117: LIST
86118: LIST
86119: PUSH
86120: LD_INT 2
86122: PUSH
86123: LD_INT 34
86125: PUSH
86126: LD_INT 12
86128: PUSH
86129: EMPTY
86130: LIST
86131: LIST
86132: PUSH
86133: LD_INT 34
86135: PUSH
86136: LD_INT 51
86138: PUSH
86139: EMPTY
86140: LIST
86141: LIST
86142: PUSH
86143: LD_INT 34
86145: PUSH
86146: LD_INT 32
86148: PUSH
86149: EMPTY
86150: LIST
86151: LIST
86152: PUSH
86153: LD_INT 34
86155: PUSH
86156: LD_INT 89
86158: PUSH
86159: EMPTY
86160: LIST
86161: LIST
86162: PUSH
86163: EMPTY
86164: LIST
86165: LIST
86166: LIST
86167: LIST
86168: LIST
86169: PUSH
86170: EMPTY
86171: LIST
86172: LIST
86173: LIST
86174: PPUSH
86175: CALL_OW 69
86179: ST_TO_ADDR
// if tmp then
86180: LD_VAR 0 4
86184: IFFALSE 86310
// begin for j in tmp do
86186: LD_ADDR_VAR 0 2
86190: PUSH
86191: LD_VAR 0 4
86195: PUSH
86196: FOR_IN
86197: IFFALSE 86308
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
86199: LD_VAR 0 2
86203: PPUSH
86204: CALL_OW 262
86208: PUSH
86209: LD_INT 3
86211: EQUAL
86212: PUSH
86213: LD_VAR 0 2
86217: PPUSH
86218: CALL_OW 261
86222: PUSH
86223: LD_INT 20
86225: GREATER
86226: OR
86227: PUSH
86228: LD_VAR 0 2
86232: PPUSH
86233: CALL_OW 314
86237: NOT
86238: AND
86239: PUSH
86240: LD_VAR 0 2
86244: PPUSH
86245: CALL_OW 263
86249: PUSH
86250: LD_INT 1
86252: NONEQUAL
86253: PUSH
86254: LD_VAR 0 2
86258: PPUSH
86259: CALL_OW 311
86263: OR
86264: AND
86265: IFFALSE 86306
// begin ComCollect ( j , x , y ) ;
86267: LD_VAR 0 2
86271: PPUSH
86272: LD_VAR 0 6
86276: PPUSH
86277: LD_VAR 0 7
86281: PPUSH
86282: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
86286: LD_VAR 0 2
86290: PPUSH
86291: LD_VAR 0 8
86295: PPUSH
86296: CALL_OW 172
// exit ;
86300: POP
86301: POP
86302: POP
86303: POP
86304: GO 86314
// end ;
86306: GO 86196
86308: POP
86309: POP
// end ; end ;
86310: GO 85685
86312: POP
86313: POP
// end ; end_of_file
86314: PPOPN 9
86316: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86317: LD_VAR 0 1
86321: PUSH
86322: LD_INT 200
86324: DOUBLE
86325: GREATEREQUAL
86326: IFFALSE 86334
86328: LD_INT 299
86330: DOUBLE
86331: LESSEQUAL
86332: IFTRUE 86336
86334: GO 86368
86336: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86337: LD_VAR 0 1
86341: PPUSH
86342: LD_VAR 0 2
86346: PPUSH
86347: LD_VAR 0 3
86351: PPUSH
86352: LD_VAR 0 4
86356: PPUSH
86357: LD_VAR 0 5
86361: PPUSH
86362: CALL 86856 0 5
86366: GO 86445
86368: LD_INT 300
86370: DOUBLE
86371: GREATEREQUAL
86372: IFFALSE 86380
86374: LD_INT 399
86376: DOUBLE
86377: LESSEQUAL
86378: IFTRUE 86382
86380: GO 86444
86382: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86383: LD_VAR 0 1
86387: PPUSH
86388: LD_VAR 0 2
86392: PPUSH
86393: LD_VAR 0 3
86397: PPUSH
86398: LD_VAR 0 4
86402: PPUSH
86403: LD_VAR 0 5
86407: PPUSH
86408: LD_VAR 0 6
86412: PPUSH
86413: LD_VAR 0 7
86417: PPUSH
86418: LD_VAR 0 8
86422: PPUSH
86423: LD_VAR 0 9
86427: PPUSH
86428: LD_VAR 0 10
86432: PPUSH
86433: LD_VAR 0 11
86437: PPUSH
86438: CALL 83026 0 11
86442: GO 86445
86444: POP
// end ;
86445: PPOPN 11
86447: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86448: LD_VAR 0 1
86452: PPUSH
86453: LD_VAR 0 2
86457: PPUSH
86458: LD_VAR 0 3
86462: PPUSH
86463: LD_VAR 0 4
86467: PPUSH
86468: LD_VAR 0 5
86472: PPUSH
86473: CALL 86592 0 5
// end ; end_of_file
86477: PPOPN 5
86479: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
86480: LD_INT 0
86482: PPUSH
86483: PPUSH
86484: PPUSH
86485: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
86486: LD_VAR 0 1
86490: PPUSH
86491: CALL_OW 264
86495: PUSH
86496: LD_INT 91
86498: EQUAL
86499: IFFALSE 86571
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
86501: LD_INT 68
86503: PPUSH
86504: LD_VAR 0 1
86508: PPUSH
86509: CALL_OW 255
86513: PPUSH
86514: CALL_OW 321
86518: PUSH
86519: LD_INT 2
86521: EQUAL
86522: IFFALSE 86534
// eff := 70 else
86524: LD_ADDR_VAR 0 4
86528: PUSH
86529: LD_INT 70
86531: ST_TO_ADDR
86532: GO 86542
// eff := 30 ;
86534: LD_ADDR_VAR 0 4
86538: PUSH
86539: LD_INT 30
86541: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
86542: LD_VAR 0 1
86546: PPUSH
86547: CALL_OW 250
86551: PPUSH
86552: LD_VAR 0 1
86556: PPUSH
86557: CALL_OW 251
86561: PPUSH
86562: LD_VAR 0 4
86566: PPUSH
86567: CALL_OW 495
// end ; end ;
86571: LD_VAR 0 2
86575: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
86576: LD_INT 0
86578: PPUSH
// end ;
86579: LD_VAR 0 4
86583: RET
// export function SOS_Command ( cmd ) ; begin
86584: LD_INT 0
86586: PPUSH
// end ;
86587: LD_VAR 0 2
86591: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
86592: LD_INT 0
86594: PPUSH
// end ;
86595: LD_VAR 0 6
86599: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
86600: LD_INT 0
86602: PPUSH
86603: PPUSH
// if not vehicle or not factory then
86604: LD_VAR 0 1
86608: NOT
86609: PUSH
86610: LD_VAR 0 2
86614: NOT
86615: OR
86616: IFFALSE 86620
// exit ;
86618: GO 86851
// if factoryWaypoints >= factory then
86620: LD_EXP 121
86624: PUSH
86625: LD_VAR 0 2
86629: GREATEREQUAL
86630: IFFALSE 86851
// if factoryWaypoints [ factory ] then
86632: LD_EXP 121
86636: PUSH
86637: LD_VAR 0 2
86641: ARRAY
86642: IFFALSE 86851
// begin if GetControl ( vehicle ) = control_manual then
86644: LD_VAR 0 1
86648: PPUSH
86649: CALL_OW 263
86653: PUSH
86654: LD_INT 1
86656: EQUAL
86657: IFFALSE 86738
// begin driver := IsDrivenBy ( vehicle ) ;
86659: LD_ADDR_VAR 0 4
86663: PUSH
86664: LD_VAR 0 1
86668: PPUSH
86669: CALL_OW 311
86673: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86674: LD_VAR 0 4
86678: PPUSH
86679: LD_EXP 121
86683: PUSH
86684: LD_VAR 0 2
86688: ARRAY
86689: PUSH
86690: LD_INT 3
86692: ARRAY
86693: PPUSH
86694: LD_EXP 121
86698: PUSH
86699: LD_VAR 0 2
86703: ARRAY
86704: PUSH
86705: LD_INT 4
86707: ARRAY
86708: PPUSH
86709: CALL_OW 171
// AddComExitVehicle ( driver ) ;
86713: LD_VAR 0 4
86717: PPUSH
86718: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
86722: LD_VAR 0 4
86726: PPUSH
86727: LD_VAR 0 2
86731: PPUSH
86732: CALL_OW 180
// end else
86736: GO 86851
// if GetControl ( vehicle ) = control_remote then
86738: LD_VAR 0 1
86742: PPUSH
86743: CALL_OW 263
86747: PUSH
86748: LD_INT 2
86750: EQUAL
86751: IFFALSE 86812
// begin wait ( 0 0$2 ) ;
86753: LD_INT 70
86755: PPUSH
86756: CALL_OW 67
// if Connect ( vehicle ) then
86760: LD_VAR 0 1
86764: PPUSH
86765: CALL 37208 0 1
86769: IFFALSE 86810
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86771: LD_VAR 0 1
86775: PPUSH
86776: LD_EXP 121
86780: PUSH
86781: LD_VAR 0 2
86785: ARRAY
86786: PUSH
86787: LD_INT 3
86789: ARRAY
86790: PPUSH
86791: LD_EXP 121
86795: PUSH
86796: LD_VAR 0 2
86800: ARRAY
86801: PUSH
86802: LD_INT 4
86804: ARRAY
86805: PPUSH
86806: CALL_OW 171
// end else
86810: GO 86851
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
86812: LD_VAR 0 1
86816: PPUSH
86817: LD_EXP 121
86821: PUSH
86822: LD_VAR 0 2
86826: ARRAY
86827: PUSH
86828: LD_INT 3
86830: ARRAY
86831: PPUSH
86832: LD_EXP 121
86836: PUSH
86837: LD_VAR 0 2
86841: ARRAY
86842: PUSH
86843: LD_INT 4
86845: ARRAY
86846: PPUSH
86847: CALL_OW 171
// end ; end ;
86851: LD_VAR 0 3
86855: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
86856: LD_INT 0
86858: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
86859: LD_VAR 0 1
86863: PUSH
86864: LD_INT 250
86866: EQUAL
86867: PUSH
86868: LD_VAR 0 2
86872: PPUSH
86873: CALL_OW 264
86877: PUSH
86878: LD_INT 81
86880: EQUAL
86881: AND
86882: IFFALSE 86903
// MinerPlaceMine ( unit , x , y ) ;
86884: LD_VAR 0 2
86888: PPUSH
86889: LD_VAR 0 4
86893: PPUSH
86894: LD_VAR 0 5
86898: PPUSH
86899: CALL 89288 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
86903: LD_VAR 0 1
86907: PUSH
86908: LD_INT 251
86910: EQUAL
86911: PUSH
86912: LD_VAR 0 2
86916: PPUSH
86917: CALL_OW 264
86921: PUSH
86922: LD_INT 81
86924: EQUAL
86925: AND
86926: IFFALSE 86947
// MinerDetonateMine ( unit , x , y ) ;
86928: LD_VAR 0 2
86932: PPUSH
86933: LD_VAR 0 4
86937: PPUSH
86938: LD_VAR 0 5
86942: PPUSH
86943: CALL 89563 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
86947: LD_VAR 0 1
86951: PUSH
86952: LD_INT 252
86954: EQUAL
86955: PUSH
86956: LD_VAR 0 2
86960: PPUSH
86961: CALL_OW 264
86965: PUSH
86966: LD_INT 81
86968: EQUAL
86969: AND
86970: IFFALSE 86991
// MinerCreateMinefield ( unit , x , y ) ;
86972: LD_VAR 0 2
86976: PPUSH
86977: LD_VAR 0 4
86981: PPUSH
86982: LD_VAR 0 5
86986: PPUSH
86987: CALL 89980 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
86991: LD_VAR 0 1
86995: PUSH
86996: LD_INT 253
86998: EQUAL
86999: PUSH
87000: LD_VAR 0 2
87004: PPUSH
87005: CALL_OW 257
87009: PUSH
87010: LD_INT 5
87012: EQUAL
87013: AND
87014: IFFALSE 87035
// ComBinocular ( unit , x , y ) ;
87016: LD_VAR 0 2
87020: PPUSH
87021: LD_VAR 0 4
87025: PPUSH
87026: LD_VAR 0 5
87030: PPUSH
87031: CALL 90349 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
87035: LD_VAR 0 1
87039: PUSH
87040: LD_INT 254
87042: EQUAL
87043: PUSH
87044: LD_VAR 0 2
87048: PPUSH
87049: CALL_OW 264
87053: PUSH
87054: LD_INT 99
87056: EQUAL
87057: AND
87058: PUSH
87059: LD_VAR 0 3
87063: PPUSH
87064: CALL_OW 263
87068: PUSH
87069: LD_INT 3
87071: EQUAL
87072: AND
87073: IFFALSE 87089
// HackDestroyVehicle ( unit , selectedUnit ) ;
87075: LD_VAR 0 2
87079: PPUSH
87080: LD_VAR 0 3
87084: PPUSH
87085: CALL 88652 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
87089: LD_VAR 0 1
87093: PUSH
87094: LD_INT 255
87096: EQUAL
87097: PUSH
87098: LD_VAR 0 2
87102: PPUSH
87103: CALL_OW 264
87107: PUSH
87108: LD_INT 14
87110: PUSH
87111: LD_INT 53
87113: PUSH
87114: EMPTY
87115: LIST
87116: LIST
87117: IN
87118: AND
87119: PUSH
87120: LD_VAR 0 4
87124: PPUSH
87125: LD_VAR 0 5
87129: PPUSH
87130: CALL_OW 488
87134: AND
87135: IFFALSE 87159
// CutTreeXYR ( unit , x , y , 12 ) ;
87137: LD_VAR 0 2
87141: PPUSH
87142: LD_VAR 0 4
87146: PPUSH
87147: LD_VAR 0 5
87151: PPUSH
87152: LD_INT 12
87154: PPUSH
87155: CALL 87222 0 4
// if cmd = 256 then
87159: LD_VAR 0 1
87163: PUSH
87164: LD_INT 256
87166: EQUAL
87167: IFFALSE 87188
// SetFactoryWaypoint ( unit , x , y ) ;
87169: LD_VAR 0 2
87173: PPUSH
87174: LD_VAR 0 4
87178: PPUSH
87179: LD_VAR 0 5
87183: PPUSH
87184: CALL 85006 0 3
// if cmd = 257 then
87188: LD_VAR 0 1
87192: PUSH
87193: LD_INT 257
87195: EQUAL
87196: IFFALSE 87217
// SetWarehouseGatheringPoint ( unit , x , y ) ;
87198: LD_VAR 0 2
87202: PPUSH
87203: LD_VAR 0 4
87207: PPUSH
87208: LD_VAR 0 5
87212: PPUSH
87213: CALL 85368 0 3
// end ;
87217: LD_VAR 0 6
87221: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
87222: LD_INT 0
87224: PPUSH
87225: PPUSH
87226: PPUSH
87227: PPUSH
87228: PPUSH
87229: PPUSH
87230: PPUSH
87231: PPUSH
87232: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
87233: LD_VAR 0 1
87237: NOT
87238: PUSH
87239: LD_VAR 0 2
87243: PPUSH
87244: LD_VAR 0 3
87248: PPUSH
87249: CALL_OW 488
87253: NOT
87254: OR
87255: PUSH
87256: LD_VAR 0 4
87260: NOT
87261: OR
87262: IFFALSE 87266
// exit ;
87264: GO 87606
// list := [ ] ;
87266: LD_ADDR_VAR 0 13
87270: PUSH
87271: EMPTY
87272: ST_TO_ADDR
// if x - r < 0 then
87273: LD_VAR 0 2
87277: PUSH
87278: LD_VAR 0 4
87282: MINUS
87283: PUSH
87284: LD_INT 0
87286: LESS
87287: IFFALSE 87299
// min_x := 0 else
87289: LD_ADDR_VAR 0 7
87293: PUSH
87294: LD_INT 0
87296: ST_TO_ADDR
87297: GO 87315
// min_x := x - r ;
87299: LD_ADDR_VAR 0 7
87303: PUSH
87304: LD_VAR 0 2
87308: PUSH
87309: LD_VAR 0 4
87313: MINUS
87314: ST_TO_ADDR
// if y - r < 0 then
87315: LD_VAR 0 3
87319: PUSH
87320: LD_VAR 0 4
87324: MINUS
87325: PUSH
87326: LD_INT 0
87328: LESS
87329: IFFALSE 87341
// min_y := 0 else
87331: LD_ADDR_VAR 0 8
87335: PUSH
87336: LD_INT 0
87338: ST_TO_ADDR
87339: GO 87357
// min_y := y - r ;
87341: LD_ADDR_VAR 0 8
87345: PUSH
87346: LD_VAR 0 3
87350: PUSH
87351: LD_VAR 0 4
87355: MINUS
87356: ST_TO_ADDR
// max_x := x + r ;
87357: LD_ADDR_VAR 0 9
87361: PUSH
87362: LD_VAR 0 2
87366: PUSH
87367: LD_VAR 0 4
87371: PLUS
87372: ST_TO_ADDR
// max_y := y + r ;
87373: LD_ADDR_VAR 0 10
87377: PUSH
87378: LD_VAR 0 3
87382: PUSH
87383: LD_VAR 0 4
87387: PLUS
87388: ST_TO_ADDR
// for _x = min_x to max_x do
87389: LD_ADDR_VAR 0 11
87393: PUSH
87394: DOUBLE
87395: LD_VAR 0 7
87399: DEC
87400: ST_TO_ADDR
87401: LD_VAR 0 9
87405: PUSH
87406: FOR_TO
87407: IFFALSE 87524
// for _y = min_y to max_y do
87409: LD_ADDR_VAR 0 12
87413: PUSH
87414: DOUBLE
87415: LD_VAR 0 8
87419: DEC
87420: ST_TO_ADDR
87421: LD_VAR 0 10
87425: PUSH
87426: FOR_TO
87427: IFFALSE 87520
// begin if not ValidHex ( _x , _y ) then
87429: LD_VAR 0 11
87433: PPUSH
87434: LD_VAR 0 12
87438: PPUSH
87439: CALL_OW 488
87443: NOT
87444: IFFALSE 87448
// continue ;
87446: GO 87426
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
87448: LD_VAR 0 11
87452: PPUSH
87453: LD_VAR 0 12
87457: PPUSH
87458: CALL_OW 351
87462: PUSH
87463: LD_VAR 0 11
87467: PPUSH
87468: LD_VAR 0 12
87472: PPUSH
87473: CALL_OW 554
87477: AND
87478: IFFALSE 87518
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
87480: LD_ADDR_VAR 0 13
87484: PUSH
87485: LD_VAR 0 13
87489: PPUSH
87490: LD_VAR 0 13
87494: PUSH
87495: LD_INT 1
87497: PLUS
87498: PPUSH
87499: LD_VAR 0 11
87503: PUSH
87504: LD_VAR 0 12
87508: PUSH
87509: EMPTY
87510: LIST
87511: LIST
87512: PPUSH
87513: CALL_OW 2
87517: ST_TO_ADDR
// end ;
87518: GO 87426
87520: POP
87521: POP
87522: GO 87406
87524: POP
87525: POP
// if not list then
87526: LD_VAR 0 13
87530: NOT
87531: IFFALSE 87535
// exit ;
87533: GO 87606
// for i in list do
87535: LD_ADDR_VAR 0 6
87539: PUSH
87540: LD_VAR 0 13
87544: PUSH
87545: FOR_IN
87546: IFFALSE 87604
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
87548: LD_VAR 0 1
87552: PPUSH
87553: LD_STRING M
87555: PUSH
87556: LD_VAR 0 6
87560: PUSH
87561: LD_INT 1
87563: ARRAY
87564: PUSH
87565: LD_VAR 0 6
87569: PUSH
87570: LD_INT 2
87572: ARRAY
87573: PUSH
87574: LD_INT 0
87576: PUSH
87577: LD_INT 0
87579: PUSH
87580: LD_INT 0
87582: PUSH
87583: LD_INT 0
87585: PUSH
87586: EMPTY
87587: LIST
87588: LIST
87589: LIST
87590: LIST
87591: LIST
87592: LIST
87593: LIST
87594: PUSH
87595: EMPTY
87596: LIST
87597: PPUSH
87598: CALL_OW 447
87602: GO 87545
87604: POP
87605: POP
// end ;
87606: LD_VAR 0 5
87610: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
87611: LD_EXP 124
87615: NOT
87616: IFFALSE 87666
87618: GO 87620
87620: DISABLE
// begin initHack := true ;
87621: LD_ADDR_EXP 124
87625: PUSH
87626: LD_INT 1
87628: ST_TO_ADDR
// hackTanks := [ ] ;
87629: LD_ADDR_EXP 125
87633: PUSH
87634: EMPTY
87635: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
87636: LD_ADDR_EXP 126
87640: PUSH
87641: EMPTY
87642: ST_TO_ADDR
// hackLimit := 3 ;
87643: LD_ADDR_EXP 127
87647: PUSH
87648: LD_INT 3
87650: ST_TO_ADDR
// hackDist := 12 ;
87651: LD_ADDR_EXP 128
87655: PUSH
87656: LD_INT 12
87658: ST_TO_ADDR
// hackCounter := [ ] ;
87659: LD_ADDR_EXP 129
87663: PUSH
87664: EMPTY
87665: ST_TO_ADDR
// end ;
87666: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
87667: LD_EXP 124
87671: PUSH
87672: LD_INT 34
87674: PUSH
87675: LD_INT 99
87677: PUSH
87678: EMPTY
87679: LIST
87680: LIST
87681: PPUSH
87682: CALL_OW 69
87686: AND
87687: IFFALSE 87940
87689: GO 87691
87691: DISABLE
87692: LD_INT 0
87694: PPUSH
87695: PPUSH
// begin enable ;
87696: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
87697: LD_ADDR_VAR 0 1
87701: PUSH
87702: LD_INT 34
87704: PUSH
87705: LD_INT 99
87707: PUSH
87708: EMPTY
87709: LIST
87710: LIST
87711: PPUSH
87712: CALL_OW 69
87716: PUSH
87717: FOR_IN
87718: IFFALSE 87938
// begin if not i in hackTanks then
87720: LD_VAR 0 1
87724: PUSH
87725: LD_EXP 125
87729: IN
87730: NOT
87731: IFFALSE 87814
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
87733: LD_ADDR_EXP 125
87737: PUSH
87738: LD_EXP 125
87742: PPUSH
87743: LD_EXP 125
87747: PUSH
87748: LD_INT 1
87750: PLUS
87751: PPUSH
87752: LD_VAR 0 1
87756: PPUSH
87757: CALL_OW 1
87761: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
87762: LD_ADDR_EXP 126
87766: PUSH
87767: LD_EXP 126
87771: PPUSH
87772: LD_EXP 126
87776: PUSH
87777: LD_INT 1
87779: PLUS
87780: PPUSH
87781: EMPTY
87782: PPUSH
87783: CALL_OW 1
87787: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
87788: LD_ADDR_EXP 129
87792: PUSH
87793: LD_EXP 129
87797: PPUSH
87798: LD_EXP 129
87802: PUSH
87803: LD_INT 1
87805: PLUS
87806: PPUSH
87807: EMPTY
87808: PPUSH
87809: CALL_OW 1
87813: ST_TO_ADDR
// end ; if not IsOk ( i ) then
87814: LD_VAR 0 1
87818: PPUSH
87819: CALL_OW 302
87823: NOT
87824: IFFALSE 87837
// begin HackUnlinkAll ( i ) ;
87826: LD_VAR 0 1
87830: PPUSH
87831: CALL 87943 0 1
// continue ;
87835: GO 87717
// end ; HackCheckCapturedStatus ( i ) ;
87837: LD_VAR 0 1
87841: PPUSH
87842: CALL 88386 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
87846: LD_ADDR_VAR 0 2
87850: PUSH
87851: LD_INT 81
87853: PUSH
87854: LD_VAR 0 1
87858: PPUSH
87859: CALL_OW 255
87863: PUSH
87864: EMPTY
87865: LIST
87866: LIST
87867: PUSH
87868: LD_INT 33
87870: PUSH
87871: LD_INT 3
87873: PUSH
87874: EMPTY
87875: LIST
87876: LIST
87877: PUSH
87878: LD_INT 91
87880: PUSH
87881: LD_VAR 0 1
87885: PUSH
87886: LD_EXP 128
87890: PUSH
87891: EMPTY
87892: LIST
87893: LIST
87894: LIST
87895: PUSH
87896: LD_INT 50
87898: PUSH
87899: EMPTY
87900: LIST
87901: PUSH
87902: EMPTY
87903: LIST
87904: LIST
87905: LIST
87906: LIST
87907: PPUSH
87908: CALL_OW 69
87912: ST_TO_ADDR
// if not tmp then
87913: LD_VAR 0 2
87917: NOT
87918: IFFALSE 87922
// continue ;
87920: GO 87717
// HackLink ( i , tmp ) ;
87922: LD_VAR 0 1
87926: PPUSH
87927: LD_VAR 0 2
87931: PPUSH
87932: CALL 88079 0 2
// end ;
87936: GO 87717
87938: POP
87939: POP
// end ;
87940: PPOPN 2
87942: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
87943: LD_INT 0
87945: PPUSH
87946: PPUSH
87947: PPUSH
// if not hack in hackTanks then
87948: LD_VAR 0 1
87952: PUSH
87953: LD_EXP 125
87957: IN
87958: NOT
87959: IFFALSE 87963
// exit ;
87961: GO 88074
// index := GetElementIndex ( hackTanks , hack ) ;
87963: LD_ADDR_VAR 0 4
87967: PUSH
87968: LD_EXP 125
87972: PPUSH
87973: LD_VAR 0 1
87977: PPUSH
87978: CALL 34024 0 2
87982: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
87983: LD_EXP 126
87987: PUSH
87988: LD_VAR 0 4
87992: ARRAY
87993: IFFALSE 88074
// begin for i in hackTanksCaptured [ index ] do
87995: LD_ADDR_VAR 0 3
87999: PUSH
88000: LD_EXP 126
88004: PUSH
88005: LD_VAR 0 4
88009: ARRAY
88010: PUSH
88011: FOR_IN
88012: IFFALSE 88038
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
88014: LD_VAR 0 3
88018: PUSH
88019: LD_INT 1
88021: ARRAY
88022: PPUSH
88023: LD_VAR 0 3
88027: PUSH
88028: LD_INT 2
88030: ARRAY
88031: PPUSH
88032: CALL_OW 235
88036: GO 88011
88038: POP
88039: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
88040: LD_ADDR_EXP 126
88044: PUSH
88045: LD_EXP 126
88049: PPUSH
88050: LD_VAR 0 4
88054: PPUSH
88055: EMPTY
88056: PPUSH
88057: CALL_OW 1
88061: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
88062: LD_VAR 0 1
88066: PPUSH
88067: LD_INT 0
88069: PPUSH
88070: CALL_OW 505
// end ; end ;
88074: LD_VAR 0 2
88078: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
88079: LD_INT 0
88081: PPUSH
88082: PPUSH
88083: PPUSH
// if not hack in hackTanks or not vehicles then
88084: LD_VAR 0 1
88088: PUSH
88089: LD_EXP 125
88093: IN
88094: NOT
88095: PUSH
88096: LD_VAR 0 2
88100: NOT
88101: OR
88102: IFFALSE 88106
// exit ;
88104: GO 88381
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
88106: LD_ADDR_VAR 0 2
88110: PUSH
88111: LD_VAR 0 1
88115: PPUSH
88116: LD_VAR 0 2
88120: PPUSH
88121: LD_INT 1
88123: PPUSH
88124: LD_INT 1
88126: PPUSH
88127: CALL 34674 0 4
88131: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
88132: LD_ADDR_VAR 0 5
88136: PUSH
88137: LD_EXP 125
88141: PPUSH
88142: LD_VAR 0 1
88146: PPUSH
88147: CALL 34024 0 2
88151: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
88152: LD_EXP 126
88156: PUSH
88157: LD_VAR 0 5
88161: ARRAY
88162: PUSH
88163: LD_EXP 127
88167: LESS
88168: IFFALSE 88357
// begin for i := 1 to vehicles do
88170: LD_ADDR_VAR 0 4
88174: PUSH
88175: DOUBLE
88176: LD_INT 1
88178: DEC
88179: ST_TO_ADDR
88180: LD_VAR 0 2
88184: PUSH
88185: FOR_TO
88186: IFFALSE 88355
// begin if hackTanksCaptured [ index ] = hackLimit then
88188: LD_EXP 126
88192: PUSH
88193: LD_VAR 0 5
88197: ARRAY
88198: PUSH
88199: LD_EXP 127
88203: EQUAL
88204: IFFALSE 88208
// break ;
88206: GO 88355
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
88208: LD_ADDR_EXP 129
88212: PUSH
88213: LD_EXP 129
88217: PPUSH
88218: LD_VAR 0 5
88222: PPUSH
88223: LD_EXP 129
88227: PUSH
88228: LD_VAR 0 5
88232: ARRAY
88233: PUSH
88234: LD_INT 1
88236: PLUS
88237: PPUSH
88238: CALL_OW 1
88242: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
88243: LD_ADDR_EXP 126
88247: PUSH
88248: LD_EXP 126
88252: PPUSH
88253: LD_VAR 0 5
88257: PUSH
88258: LD_EXP 126
88262: PUSH
88263: LD_VAR 0 5
88267: ARRAY
88268: PUSH
88269: LD_INT 1
88271: PLUS
88272: PUSH
88273: EMPTY
88274: LIST
88275: LIST
88276: PPUSH
88277: LD_VAR 0 2
88281: PUSH
88282: LD_VAR 0 4
88286: ARRAY
88287: PUSH
88288: LD_VAR 0 2
88292: PUSH
88293: LD_VAR 0 4
88297: ARRAY
88298: PPUSH
88299: CALL_OW 255
88303: PUSH
88304: EMPTY
88305: LIST
88306: LIST
88307: PPUSH
88308: CALL 34239 0 3
88312: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
88313: LD_VAR 0 2
88317: PUSH
88318: LD_VAR 0 4
88322: ARRAY
88323: PPUSH
88324: LD_VAR 0 1
88328: PPUSH
88329: CALL_OW 255
88333: PPUSH
88334: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
88338: LD_VAR 0 2
88342: PUSH
88343: LD_VAR 0 4
88347: ARRAY
88348: PPUSH
88349: CALL_OW 141
// end ;
88353: GO 88185
88355: POP
88356: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88357: LD_VAR 0 1
88361: PPUSH
88362: LD_EXP 126
88366: PUSH
88367: LD_VAR 0 5
88371: ARRAY
88372: PUSH
88373: LD_INT 0
88375: PLUS
88376: PPUSH
88377: CALL_OW 505
// end ;
88381: LD_VAR 0 3
88385: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
88386: LD_INT 0
88388: PPUSH
88389: PPUSH
88390: PPUSH
88391: PPUSH
// if not hack in hackTanks then
88392: LD_VAR 0 1
88396: PUSH
88397: LD_EXP 125
88401: IN
88402: NOT
88403: IFFALSE 88407
// exit ;
88405: GO 88647
// index := GetElementIndex ( hackTanks , hack ) ;
88407: LD_ADDR_VAR 0 4
88411: PUSH
88412: LD_EXP 125
88416: PPUSH
88417: LD_VAR 0 1
88421: PPUSH
88422: CALL 34024 0 2
88426: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
88427: LD_ADDR_VAR 0 3
88431: PUSH
88432: DOUBLE
88433: LD_EXP 126
88437: PUSH
88438: LD_VAR 0 4
88442: ARRAY
88443: INC
88444: ST_TO_ADDR
88445: LD_INT 1
88447: PUSH
88448: FOR_DOWNTO
88449: IFFALSE 88621
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
88451: LD_ADDR_VAR 0 5
88455: PUSH
88456: LD_EXP 126
88460: PUSH
88461: LD_VAR 0 4
88465: ARRAY
88466: PUSH
88467: LD_VAR 0 3
88471: ARRAY
88472: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
88473: LD_VAR 0 5
88477: PUSH
88478: LD_INT 1
88480: ARRAY
88481: PPUSH
88482: CALL_OW 302
88486: NOT
88487: PUSH
88488: LD_VAR 0 5
88492: PUSH
88493: LD_INT 1
88495: ARRAY
88496: PPUSH
88497: CALL_OW 255
88501: PUSH
88502: LD_VAR 0 1
88506: PPUSH
88507: CALL_OW 255
88511: NONEQUAL
88512: OR
88513: IFFALSE 88619
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
88515: LD_VAR 0 5
88519: PUSH
88520: LD_INT 1
88522: ARRAY
88523: PPUSH
88524: CALL_OW 305
88528: PUSH
88529: LD_VAR 0 5
88533: PUSH
88534: LD_INT 1
88536: ARRAY
88537: PPUSH
88538: CALL_OW 255
88542: PUSH
88543: LD_VAR 0 1
88547: PPUSH
88548: CALL_OW 255
88552: EQUAL
88553: AND
88554: IFFALSE 88578
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
88556: LD_VAR 0 5
88560: PUSH
88561: LD_INT 1
88563: ARRAY
88564: PPUSH
88565: LD_VAR 0 5
88569: PUSH
88570: LD_INT 2
88572: ARRAY
88573: PPUSH
88574: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
88578: LD_ADDR_EXP 126
88582: PUSH
88583: LD_EXP 126
88587: PPUSH
88588: LD_VAR 0 4
88592: PPUSH
88593: LD_EXP 126
88597: PUSH
88598: LD_VAR 0 4
88602: ARRAY
88603: PPUSH
88604: LD_VAR 0 3
88608: PPUSH
88609: CALL_OW 3
88613: PPUSH
88614: CALL_OW 1
88618: ST_TO_ADDR
// end ; end ;
88619: GO 88448
88621: POP
88622: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
88623: LD_VAR 0 1
88627: PPUSH
88628: LD_EXP 126
88632: PUSH
88633: LD_VAR 0 4
88637: ARRAY
88638: PUSH
88639: LD_INT 0
88641: PLUS
88642: PPUSH
88643: CALL_OW 505
// end ;
88647: LD_VAR 0 2
88651: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
88652: LD_INT 0
88654: PPUSH
88655: PPUSH
88656: PPUSH
88657: PPUSH
// if not hack in hackTanks then
88658: LD_VAR 0 1
88662: PUSH
88663: LD_EXP 125
88667: IN
88668: NOT
88669: IFFALSE 88673
// exit ;
88671: GO 88758
// index := GetElementIndex ( hackTanks , hack ) ;
88673: LD_ADDR_VAR 0 5
88677: PUSH
88678: LD_EXP 125
88682: PPUSH
88683: LD_VAR 0 1
88687: PPUSH
88688: CALL 34024 0 2
88692: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
88693: LD_ADDR_VAR 0 4
88697: PUSH
88698: DOUBLE
88699: LD_INT 1
88701: DEC
88702: ST_TO_ADDR
88703: LD_EXP 126
88707: PUSH
88708: LD_VAR 0 5
88712: ARRAY
88713: PUSH
88714: FOR_TO
88715: IFFALSE 88756
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
88717: LD_EXP 126
88721: PUSH
88722: LD_VAR 0 5
88726: ARRAY
88727: PUSH
88728: LD_VAR 0 4
88732: ARRAY
88733: PUSH
88734: LD_INT 1
88736: ARRAY
88737: PUSH
88738: LD_VAR 0 2
88742: EQUAL
88743: IFFALSE 88754
// KillUnit ( vehicle ) ;
88745: LD_VAR 0 2
88749: PPUSH
88750: CALL_OW 66
88754: GO 88714
88756: POP
88757: POP
// end ;
88758: LD_VAR 0 3
88762: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
88763: LD_EXP 130
88767: NOT
88768: IFFALSE 88803
88770: GO 88772
88772: DISABLE
// begin initMiner := true ;
88773: LD_ADDR_EXP 130
88777: PUSH
88778: LD_INT 1
88780: ST_TO_ADDR
// minersList := [ ] ;
88781: LD_ADDR_EXP 131
88785: PUSH
88786: EMPTY
88787: ST_TO_ADDR
// minerMinesList := [ ] ;
88788: LD_ADDR_EXP 132
88792: PUSH
88793: EMPTY
88794: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
88795: LD_ADDR_EXP 133
88799: PUSH
88800: LD_INT 5
88802: ST_TO_ADDR
// end ;
88803: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
88804: LD_EXP 130
88808: PUSH
88809: LD_INT 34
88811: PUSH
88812: LD_INT 81
88814: PUSH
88815: EMPTY
88816: LIST
88817: LIST
88818: PPUSH
88819: CALL_OW 69
88823: AND
88824: IFFALSE 89285
88826: GO 88828
88828: DISABLE
88829: LD_INT 0
88831: PPUSH
88832: PPUSH
88833: PPUSH
88834: PPUSH
// begin enable ;
88835: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
88836: LD_ADDR_VAR 0 1
88840: PUSH
88841: LD_INT 34
88843: PUSH
88844: LD_INT 81
88846: PUSH
88847: EMPTY
88848: LIST
88849: LIST
88850: PPUSH
88851: CALL_OW 69
88855: PUSH
88856: FOR_IN
88857: IFFALSE 88929
// begin if not i in minersList then
88859: LD_VAR 0 1
88863: PUSH
88864: LD_EXP 131
88868: IN
88869: NOT
88870: IFFALSE 88927
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
88872: LD_ADDR_EXP 131
88876: PUSH
88877: LD_EXP 131
88881: PPUSH
88882: LD_EXP 131
88886: PUSH
88887: LD_INT 1
88889: PLUS
88890: PPUSH
88891: LD_VAR 0 1
88895: PPUSH
88896: CALL_OW 1
88900: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
88901: LD_ADDR_EXP 132
88905: PUSH
88906: LD_EXP 132
88910: PPUSH
88911: LD_EXP 132
88915: PUSH
88916: LD_INT 1
88918: PLUS
88919: PPUSH
88920: EMPTY
88921: PPUSH
88922: CALL_OW 1
88926: ST_TO_ADDR
// end end ;
88927: GO 88856
88929: POP
88930: POP
// for i := minerMinesList downto 1 do
88931: LD_ADDR_VAR 0 1
88935: PUSH
88936: DOUBLE
88937: LD_EXP 132
88941: INC
88942: ST_TO_ADDR
88943: LD_INT 1
88945: PUSH
88946: FOR_DOWNTO
88947: IFFALSE 89283
// begin if IsLive ( minersList [ i ] ) then
88949: LD_EXP 131
88953: PUSH
88954: LD_VAR 0 1
88958: ARRAY
88959: PPUSH
88960: CALL_OW 300
88964: IFFALSE 88992
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
88966: LD_EXP 131
88970: PUSH
88971: LD_VAR 0 1
88975: ARRAY
88976: PPUSH
88977: LD_EXP 132
88981: PUSH
88982: LD_VAR 0 1
88986: ARRAY
88987: PPUSH
88988: CALL_OW 505
// if not minerMinesList [ i ] then
88992: LD_EXP 132
88996: PUSH
88997: LD_VAR 0 1
89001: ARRAY
89002: NOT
89003: IFFALSE 89007
// continue ;
89005: GO 88946
// for j := minerMinesList [ i ] downto 1 do
89007: LD_ADDR_VAR 0 2
89011: PUSH
89012: DOUBLE
89013: LD_EXP 132
89017: PUSH
89018: LD_VAR 0 1
89022: ARRAY
89023: INC
89024: ST_TO_ADDR
89025: LD_INT 1
89027: PUSH
89028: FOR_DOWNTO
89029: IFFALSE 89279
// begin side := GetSide ( minersList [ i ] ) ;
89031: LD_ADDR_VAR 0 3
89035: PUSH
89036: LD_EXP 131
89040: PUSH
89041: LD_VAR 0 1
89045: ARRAY
89046: PPUSH
89047: CALL_OW 255
89051: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
89052: LD_ADDR_VAR 0 4
89056: PUSH
89057: LD_EXP 132
89061: PUSH
89062: LD_VAR 0 1
89066: ARRAY
89067: PUSH
89068: LD_VAR 0 2
89072: ARRAY
89073: PUSH
89074: LD_INT 1
89076: ARRAY
89077: PPUSH
89078: LD_EXP 132
89082: PUSH
89083: LD_VAR 0 1
89087: ARRAY
89088: PUSH
89089: LD_VAR 0 2
89093: ARRAY
89094: PUSH
89095: LD_INT 2
89097: ARRAY
89098: PPUSH
89099: CALL_OW 428
89103: ST_TO_ADDR
// if not tmp then
89104: LD_VAR 0 4
89108: NOT
89109: IFFALSE 89113
// continue ;
89111: GO 89028
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
89113: LD_VAR 0 4
89117: PUSH
89118: LD_INT 81
89120: PUSH
89121: LD_VAR 0 3
89125: PUSH
89126: EMPTY
89127: LIST
89128: LIST
89129: PPUSH
89130: CALL_OW 69
89134: IN
89135: PUSH
89136: LD_EXP 132
89140: PUSH
89141: LD_VAR 0 1
89145: ARRAY
89146: PUSH
89147: LD_VAR 0 2
89151: ARRAY
89152: PUSH
89153: LD_INT 1
89155: ARRAY
89156: PPUSH
89157: LD_EXP 132
89161: PUSH
89162: LD_VAR 0 1
89166: ARRAY
89167: PUSH
89168: LD_VAR 0 2
89172: ARRAY
89173: PUSH
89174: LD_INT 2
89176: ARRAY
89177: PPUSH
89178: CALL_OW 458
89182: AND
89183: IFFALSE 89277
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
89185: LD_EXP 132
89189: PUSH
89190: LD_VAR 0 1
89194: ARRAY
89195: PUSH
89196: LD_VAR 0 2
89200: ARRAY
89201: PUSH
89202: LD_INT 1
89204: ARRAY
89205: PPUSH
89206: LD_EXP 132
89210: PUSH
89211: LD_VAR 0 1
89215: ARRAY
89216: PUSH
89217: LD_VAR 0 2
89221: ARRAY
89222: PUSH
89223: LD_INT 2
89225: ARRAY
89226: PPUSH
89227: LD_VAR 0 3
89231: PPUSH
89232: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
89236: LD_ADDR_EXP 132
89240: PUSH
89241: LD_EXP 132
89245: PPUSH
89246: LD_VAR 0 1
89250: PPUSH
89251: LD_EXP 132
89255: PUSH
89256: LD_VAR 0 1
89260: ARRAY
89261: PPUSH
89262: LD_VAR 0 2
89266: PPUSH
89267: CALL_OW 3
89271: PPUSH
89272: CALL_OW 1
89276: ST_TO_ADDR
// end ; end ;
89277: GO 89028
89279: POP
89280: POP
// end ;
89281: GO 88946
89283: POP
89284: POP
// end ;
89285: PPOPN 4
89287: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
89288: LD_INT 0
89290: PPUSH
89291: PPUSH
// result := false ;
89292: LD_ADDR_VAR 0 4
89296: PUSH
89297: LD_INT 0
89299: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
89300: LD_VAR 0 1
89304: PPUSH
89305: CALL_OW 264
89309: PUSH
89310: LD_INT 81
89312: EQUAL
89313: NOT
89314: IFFALSE 89318
// exit ;
89316: GO 89558
// index := GetElementIndex ( minersList , unit ) ;
89318: LD_ADDR_VAR 0 5
89322: PUSH
89323: LD_EXP 131
89327: PPUSH
89328: LD_VAR 0 1
89332: PPUSH
89333: CALL 34024 0 2
89337: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
89338: LD_EXP 132
89342: PUSH
89343: LD_VAR 0 5
89347: ARRAY
89348: PUSH
89349: LD_EXP 133
89353: GREATEREQUAL
89354: IFFALSE 89358
// exit ;
89356: GO 89558
// ComMoveXY ( unit , x , y ) ;
89358: LD_VAR 0 1
89362: PPUSH
89363: LD_VAR 0 2
89367: PPUSH
89368: LD_VAR 0 3
89372: PPUSH
89373: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
89377: LD_INT 35
89379: PPUSH
89380: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
89384: LD_VAR 0 1
89388: PPUSH
89389: LD_VAR 0 2
89393: PPUSH
89394: LD_VAR 0 3
89398: PPUSH
89399: CALL 65379 0 3
89403: NOT
89404: PUSH
89405: LD_VAR 0 1
89409: PPUSH
89410: CALL_OW 314
89414: AND
89415: IFFALSE 89419
// exit ;
89417: GO 89558
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
89419: LD_VAR 0 2
89423: PPUSH
89424: LD_VAR 0 3
89428: PPUSH
89429: CALL_OW 428
89433: PUSH
89434: LD_VAR 0 1
89438: EQUAL
89439: PUSH
89440: LD_VAR 0 1
89444: PPUSH
89445: CALL_OW 314
89449: NOT
89450: AND
89451: IFFALSE 89377
// PlaySoundXY ( x , y , PlantMine ) ;
89453: LD_VAR 0 2
89457: PPUSH
89458: LD_VAR 0 3
89462: PPUSH
89463: LD_STRING PlantMine
89465: PPUSH
89466: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
89470: LD_VAR 0 2
89474: PPUSH
89475: LD_VAR 0 3
89479: PPUSH
89480: LD_VAR 0 1
89484: PPUSH
89485: CALL_OW 255
89489: PPUSH
89490: LD_INT 0
89492: PPUSH
89493: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
89497: LD_ADDR_EXP 132
89501: PUSH
89502: LD_EXP 132
89506: PPUSH
89507: LD_VAR 0 5
89511: PUSH
89512: LD_EXP 132
89516: PUSH
89517: LD_VAR 0 5
89521: ARRAY
89522: PUSH
89523: LD_INT 1
89525: PLUS
89526: PUSH
89527: EMPTY
89528: LIST
89529: LIST
89530: PPUSH
89531: LD_VAR 0 2
89535: PUSH
89536: LD_VAR 0 3
89540: PUSH
89541: EMPTY
89542: LIST
89543: LIST
89544: PPUSH
89545: CALL 34239 0 3
89549: ST_TO_ADDR
// result := true ;
89550: LD_ADDR_VAR 0 4
89554: PUSH
89555: LD_INT 1
89557: ST_TO_ADDR
// end ;
89558: LD_VAR 0 4
89562: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
89563: LD_INT 0
89565: PPUSH
89566: PPUSH
89567: PPUSH
// if not unit in minersList then
89568: LD_VAR 0 1
89572: PUSH
89573: LD_EXP 131
89577: IN
89578: NOT
89579: IFFALSE 89583
// exit ;
89581: GO 89975
// index := GetElementIndex ( minersList , unit ) ;
89583: LD_ADDR_VAR 0 6
89587: PUSH
89588: LD_EXP 131
89592: PPUSH
89593: LD_VAR 0 1
89597: PPUSH
89598: CALL 34024 0 2
89602: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
89603: LD_ADDR_VAR 0 5
89607: PUSH
89608: DOUBLE
89609: LD_EXP 132
89613: PUSH
89614: LD_VAR 0 6
89618: ARRAY
89619: INC
89620: ST_TO_ADDR
89621: LD_INT 1
89623: PUSH
89624: FOR_DOWNTO
89625: IFFALSE 89786
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
89627: LD_EXP 132
89631: PUSH
89632: LD_VAR 0 6
89636: ARRAY
89637: PUSH
89638: LD_VAR 0 5
89642: ARRAY
89643: PUSH
89644: LD_INT 1
89646: ARRAY
89647: PUSH
89648: LD_VAR 0 2
89652: EQUAL
89653: PUSH
89654: LD_EXP 132
89658: PUSH
89659: LD_VAR 0 6
89663: ARRAY
89664: PUSH
89665: LD_VAR 0 5
89669: ARRAY
89670: PUSH
89671: LD_INT 2
89673: ARRAY
89674: PUSH
89675: LD_VAR 0 3
89679: EQUAL
89680: AND
89681: IFFALSE 89784
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89683: LD_EXP 132
89687: PUSH
89688: LD_VAR 0 6
89692: ARRAY
89693: PUSH
89694: LD_VAR 0 5
89698: ARRAY
89699: PUSH
89700: LD_INT 1
89702: ARRAY
89703: PPUSH
89704: LD_EXP 132
89708: PUSH
89709: LD_VAR 0 6
89713: ARRAY
89714: PUSH
89715: LD_VAR 0 5
89719: ARRAY
89720: PUSH
89721: LD_INT 2
89723: ARRAY
89724: PPUSH
89725: LD_VAR 0 1
89729: PPUSH
89730: CALL_OW 255
89734: PPUSH
89735: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89739: LD_ADDR_EXP 132
89743: PUSH
89744: LD_EXP 132
89748: PPUSH
89749: LD_VAR 0 6
89753: PPUSH
89754: LD_EXP 132
89758: PUSH
89759: LD_VAR 0 6
89763: ARRAY
89764: PPUSH
89765: LD_VAR 0 5
89769: PPUSH
89770: CALL_OW 3
89774: PPUSH
89775: CALL_OW 1
89779: ST_TO_ADDR
// exit ;
89780: POP
89781: POP
89782: GO 89975
// end ; end ;
89784: GO 89624
89786: POP
89787: POP
// for i := minerMinesList [ index ] downto 1 do
89788: LD_ADDR_VAR 0 5
89792: PUSH
89793: DOUBLE
89794: LD_EXP 132
89798: PUSH
89799: LD_VAR 0 6
89803: ARRAY
89804: INC
89805: ST_TO_ADDR
89806: LD_INT 1
89808: PUSH
89809: FOR_DOWNTO
89810: IFFALSE 89973
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
89812: LD_EXP 132
89816: PUSH
89817: LD_VAR 0 6
89821: ARRAY
89822: PUSH
89823: LD_VAR 0 5
89827: ARRAY
89828: PUSH
89829: LD_INT 1
89831: ARRAY
89832: PPUSH
89833: LD_EXP 132
89837: PUSH
89838: LD_VAR 0 6
89842: ARRAY
89843: PUSH
89844: LD_VAR 0 5
89848: ARRAY
89849: PUSH
89850: LD_INT 2
89852: ARRAY
89853: PPUSH
89854: LD_VAR 0 2
89858: PPUSH
89859: LD_VAR 0 3
89863: PPUSH
89864: CALL_OW 298
89868: PUSH
89869: LD_INT 6
89871: LESS
89872: IFFALSE 89971
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
89874: LD_EXP 132
89878: PUSH
89879: LD_VAR 0 6
89883: ARRAY
89884: PUSH
89885: LD_VAR 0 5
89889: ARRAY
89890: PUSH
89891: LD_INT 1
89893: ARRAY
89894: PPUSH
89895: LD_EXP 132
89899: PUSH
89900: LD_VAR 0 6
89904: ARRAY
89905: PUSH
89906: LD_VAR 0 5
89910: ARRAY
89911: PUSH
89912: LD_INT 2
89914: ARRAY
89915: PPUSH
89916: LD_VAR 0 1
89920: PPUSH
89921: CALL_OW 255
89925: PPUSH
89926: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
89930: LD_ADDR_EXP 132
89934: PUSH
89935: LD_EXP 132
89939: PPUSH
89940: LD_VAR 0 6
89944: PPUSH
89945: LD_EXP 132
89949: PUSH
89950: LD_VAR 0 6
89954: ARRAY
89955: PPUSH
89956: LD_VAR 0 5
89960: PPUSH
89961: CALL_OW 3
89965: PPUSH
89966: CALL_OW 1
89970: ST_TO_ADDR
// end ; end ;
89971: GO 89809
89973: POP
89974: POP
// end ;
89975: LD_VAR 0 4
89979: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
89980: LD_INT 0
89982: PPUSH
89983: PPUSH
89984: PPUSH
89985: PPUSH
89986: PPUSH
89987: PPUSH
89988: PPUSH
89989: PPUSH
89990: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
89991: LD_VAR 0 1
89995: PPUSH
89996: CALL_OW 264
90000: PUSH
90001: LD_INT 81
90003: EQUAL
90004: NOT
90005: PUSH
90006: LD_VAR 0 1
90010: PUSH
90011: LD_EXP 131
90015: IN
90016: NOT
90017: OR
90018: IFFALSE 90022
// exit ;
90020: GO 90344
// index := GetElementIndex ( minersList , unit ) ;
90022: LD_ADDR_VAR 0 6
90026: PUSH
90027: LD_EXP 131
90031: PPUSH
90032: LD_VAR 0 1
90036: PPUSH
90037: CALL 34024 0 2
90041: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
90042: LD_ADDR_VAR 0 8
90046: PUSH
90047: LD_EXP 133
90051: PUSH
90052: LD_EXP 132
90056: PUSH
90057: LD_VAR 0 6
90061: ARRAY
90062: MINUS
90063: ST_TO_ADDR
// if not minesFreeAmount then
90064: LD_VAR 0 8
90068: NOT
90069: IFFALSE 90073
// exit ;
90071: GO 90344
// tmp := [ ] ;
90073: LD_ADDR_VAR 0 7
90077: PUSH
90078: EMPTY
90079: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
90080: LD_ADDR_VAR 0 5
90084: PUSH
90085: DOUBLE
90086: LD_INT 1
90088: DEC
90089: ST_TO_ADDR
90090: LD_VAR 0 8
90094: PUSH
90095: FOR_TO
90096: IFFALSE 90291
// begin _d := rand ( 0 , 5 ) ;
90098: LD_ADDR_VAR 0 11
90102: PUSH
90103: LD_INT 0
90105: PPUSH
90106: LD_INT 5
90108: PPUSH
90109: CALL_OW 12
90113: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
90114: LD_ADDR_VAR 0 12
90118: PUSH
90119: LD_INT 2
90121: PPUSH
90122: LD_INT 6
90124: PPUSH
90125: CALL_OW 12
90129: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
90130: LD_ADDR_VAR 0 9
90134: PUSH
90135: LD_VAR 0 2
90139: PPUSH
90140: LD_VAR 0 11
90144: PPUSH
90145: LD_VAR 0 12
90149: PPUSH
90150: CALL_OW 272
90154: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
90155: LD_ADDR_VAR 0 10
90159: PUSH
90160: LD_VAR 0 3
90164: PPUSH
90165: LD_VAR 0 11
90169: PPUSH
90170: LD_VAR 0 12
90174: PPUSH
90175: CALL_OW 273
90179: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
90180: LD_VAR 0 9
90184: PPUSH
90185: LD_VAR 0 10
90189: PPUSH
90190: CALL_OW 488
90194: PUSH
90195: LD_VAR 0 9
90199: PUSH
90200: LD_VAR 0 10
90204: PUSH
90205: EMPTY
90206: LIST
90207: LIST
90208: PUSH
90209: LD_VAR 0 7
90213: IN
90214: NOT
90215: AND
90216: PUSH
90217: LD_VAR 0 9
90221: PPUSH
90222: LD_VAR 0 10
90226: PPUSH
90227: CALL_OW 458
90231: NOT
90232: AND
90233: IFFALSE 90275
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
90235: LD_ADDR_VAR 0 7
90239: PUSH
90240: LD_VAR 0 7
90244: PPUSH
90245: LD_VAR 0 7
90249: PUSH
90250: LD_INT 1
90252: PLUS
90253: PPUSH
90254: LD_VAR 0 9
90258: PUSH
90259: LD_VAR 0 10
90263: PUSH
90264: EMPTY
90265: LIST
90266: LIST
90267: PPUSH
90268: CALL_OW 1
90272: ST_TO_ADDR
90273: GO 90289
// i := i - 1 ;
90275: LD_ADDR_VAR 0 5
90279: PUSH
90280: LD_VAR 0 5
90284: PUSH
90285: LD_INT 1
90287: MINUS
90288: ST_TO_ADDR
// end ;
90289: GO 90095
90291: POP
90292: POP
// for i in tmp do
90293: LD_ADDR_VAR 0 5
90297: PUSH
90298: LD_VAR 0 7
90302: PUSH
90303: FOR_IN
90304: IFFALSE 90342
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
90306: LD_VAR 0 1
90310: PPUSH
90311: LD_VAR 0 5
90315: PUSH
90316: LD_INT 1
90318: ARRAY
90319: PPUSH
90320: LD_VAR 0 5
90324: PUSH
90325: LD_INT 2
90327: ARRAY
90328: PPUSH
90329: CALL 89288 0 3
90333: NOT
90334: IFFALSE 90340
// exit ;
90336: POP
90337: POP
90338: GO 90344
90340: GO 90303
90342: POP
90343: POP
// end ;
90344: LD_VAR 0 4
90348: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
90349: LD_INT 0
90351: PPUSH
90352: PPUSH
90353: PPUSH
90354: PPUSH
90355: PPUSH
90356: PPUSH
90357: PPUSH
// if not GetClass ( unit ) = class_sniper then
90358: LD_VAR 0 1
90362: PPUSH
90363: CALL_OW 257
90367: PUSH
90368: LD_INT 5
90370: EQUAL
90371: NOT
90372: IFFALSE 90376
// exit ;
90374: GO 90764
// dist := 8 ;
90376: LD_ADDR_VAR 0 5
90380: PUSH
90381: LD_INT 8
90383: ST_TO_ADDR
// viewRange := 12 ;
90384: LD_ADDR_VAR 0 7
90388: PUSH
90389: LD_INT 12
90391: ST_TO_ADDR
// side := GetSide ( unit ) ;
90392: LD_ADDR_VAR 0 6
90396: PUSH
90397: LD_VAR 0 1
90401: PPUSH
90402: CALL_OW 255
90406: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
90407: LD_INT 61
90409: PPUSH
90410: LD_VAR 0 6
90414: PPUSH
90415: CALL_OW 321
90419: PUSH
90420: LD_INT 2
90422: EQUAL
90423: IFFALSE 90433
// viewRange := 16 ;
90425: LD_ADDR_VAR 0 7
90429: PUSH
90430: LD_INT 16
90432: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
90433: LD_VAR 0 1
90437: PPUSH
90438: LD_VAR 0 2
90442: PPUSH
90443: LD_VAR 0 3
90447: PPUSH
90448: CALL_OW 297
90452: PUSH
90453: LD_VAR 0 5
90457: GREATER
90458: IFFALSE 90537
// begin ComMoveXY ( unit , x , y ) ;
90460: LD_VAR 0 1
90464: PPUSH
90465: LD_VAR 0 2
90469: PPUSH
90470: LD_VAR 0 3
90474: PPUSH
90475: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
90479: LD_INT 35
90481: PPUSH
90482: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
90486: LD_VAR 0 1
90490: PPUSH
90491: LD_VAR 0 2
90495: PPUSH
90496: LD_VAR 0 3
90500: PPUSH
90501: CALL 65379 0 3
90505: NOT
90506: IFFALSE 90510
// exit ;
90508: GO 90764
// until GetDistUnitXY ( unit , x , y ) < dist ;
90510: LD_VAR 0 1
90514: PPUSH
90515: LD_VAR 0 2
90519: PPUSH
90520: LD_VAR 0 3
90524: PPUSH
90525: CALL_OW 297
90529: PUSH
90530: LD_VAR 0 5
90534: LESS
90535: IFFALSE 90479
// end ; ComTurnXY ( unit , x , y ) ;
90537: LD_VAR 0 1
90541: PPUSH
90542: LD_VAR 0 2
90546: PPUSH
90547: LD_VAR 0 3
90551: PPUSH
90552: CALL_OW 118
// wait ( 5 ) ;
90556: LD_INT 5
90558: PPUSH
90559: CALL_OW 67
// _d := GetDir ( unit ) ;
90563: LD_ADDR_VAR 0 10
90567: PUSH
90568: LD_VAR 0 1
90572: PPUSH
90573: CALL_OW 254
90577: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
90578: LD_ADDR_VAR 0 8
90582: PUSH
90583: LD_VAR 0 1
90587: PPUSH
90588: CALL_OW 250
90592: PPUSH
90593: LD_VAR 0 10
90597: PPUSH
90598: LD_VAR 0 5
90602: PPUSH
90603: CALL_OW 272
90607: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
90608: LD_ADDR_VAR 0 9
90612: PUSH
90613: LD_VAR 0 1
90617: PPUSH
90618: CALL_OW 251
90622: PPUSH
90623: LD_VAR 0 10
90627: PPUSH
90628: LD_VAR 0 5
90632: PPUSH
90633: CALL_OW 273
90637: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
90638: LD_VAR 0 8
90642: PPUSH
90643: LD_VAR 0 9
90647: PPUSH
90648: CALL_OW 488
90652: NOT
90653: IFFALSE 90657
// exit ;
90655: GO 90764
// ComAnimCustom ( unit , 1 ) ;
90657: LD_VAR 0 1
90661: PPUSH
90662: LD_INT 1
90664: PPUSH
90665: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
90669: LD_VAR 0 8
90673: PPUSH
90674: LD_VAR 0 9
90678: PPUSH
90679: LD_VAR 0 6
90683: PPUSH
90684: LD_VAR 0 7
90688: PPUSH
90689: CALL_OW 330
// repeat wait ( 1 ) ;
90693: LD_INT 1
90695: PPUSH
90696: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
90700: LD_VAR 0 1
90704: PPUSH
90705: CALL_OW 316
90709: PUSH
90710: LD_VAR 0 1
90714: PPUSH
90715: CALL_OW 314
90719: OR
90720: PUSH
90721: LD_VAR 0 1
90725: PPUSH
90726: CALL_OW 302
90730: NOT
90731: OR
90732: PUSH
90733: LD_VAR 0 1
90737: PPUSH
90738: CALL_OW 301
90742: OR
90743: IFFALSE 90693
// RemoveSeeing ( _x , _y , side ) ;
90745: LD_VAR 0 8
90749: PPUSH
90750: LD_VAR 0 9
90754: PPUSH
90755: LD_VAR 0 6
90759: PPUSH
90760: CALL_OW 331
// end ; end_of_file
90764: LD_VAR 0 4
90768: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
90769: LD_VAR 0 1
90773: PPUSH
90774: LD_VAR 0 2
90778: PPUSH
90779: LD_VAR 0 3
90783: PPUSH
90784: LD_VAR 0 4
90788: PPUSH
90789: LD_VAR 0 5
90793: PPUSH
90794: LD_VAR 0 6
90798: PPUSH
90799: CALL 70678 0 6
// end ;
90803: PPOPN 6
90805: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
90806: LD_INT 0
90808: PPUSH
// begin if not units then
90809: LD_VAR 0 1
90813: NOT
90814: IFFALSE 90818
// exit ;
90816: GO 90818
// end ;
90818: PPOPN 7
90820: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
90821: CALL 70582 0 0
// end ;
90825: PPOPN 1
90827: END
