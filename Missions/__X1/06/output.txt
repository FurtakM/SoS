// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 6878 0 2
// PrepareArabian ;
  32: CALL 377 0 0
// PrepareRussian ;
  36: CALL 7725 0 0
// Action ;
  40: CALL 15887 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// bergkampfArrived := false ;
 109: LD_ADDR_EXP 3
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omarArrived := false ;
 117: LD_ADDR_EXP 6
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// outpostDestroyed := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// ruLoseCounter := 0 ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// rolfScriptBase := false ;
 141: LD_ADDR_EXP 9
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omarScriptBase := false ;
 149: LD_ADDR_EXP 10
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// linkedWithRolf := 0 ;
 157: LD_ADDR_EXP 12
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 165: LD_ADDR_EXP 26
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// rolfDied := false ;
 173: LD_ADDR_EXP 13
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// leninSpotted := false ;
 181: LD_ADDR_EXP 14
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mortarConstructed := false ;
 189: LD_ADDR_EXP 15
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// rolfHasVehicles := false ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// leninScriptBase := true ;
 205: LD_ADDR_EXP 11
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// rolfWantVehicles := false ;
 213: LD_ADDR_EXP 17
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// omarWantVehicles := false ;
 221: LD_ADDR_EXP 18
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// omarHasVehicles := false ;
 229: LD_ADDR_EXP 22
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// escapeAllowed := false ;
 237: LD_ADDR_EXP 24
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$30 , 5 5$00 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 16800
 252: PUSH
 253: LD_INT 12600
 255: PUSH
 256: LD_INT 11550
 258: PUSH
 259: LD_INT 10500
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ;
 274: LD_ADDR_EXP 20
 278: PUSH
 279: LD_INT 21000
 281: PUSH
 282: LD_INT 18900
 284: PUSH
 285: LD_INT 16800
 287: PUSH
 288: LD_INT 14700
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: LIST
 296: PUSH
 297: LD_OWVAR 67
 301: ARRAY
 302: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 303: LD_ADDR_EXP 21
 307: PUSH
 308: LD_INT 4
 310: PUSH
 311: LD_INT 5
 313: PUSH
 314: LD_INT 6
 316: PUSH
 317: LD_INT 6
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: PUSH
 326: LD_OWVAR 67
 330: ARRAY
 331: ST_TO_ADDR
// omarAttack := false ;
 332: LD_ADDR_EXP 23
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// disableAttackOnHeike := false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 348: LD_ADDR_EXP 25
 352: PUSH
 353: LD_INT 8400
 355: ST_TO_ADDR
// firstAttack := true ;
 356: LD_ADDR_EXP 28
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// canRolfJoin := true ;
 364: LD_ADDR_EXP 29
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// end ; end_of_file
 372: LD_VAR 0 1
 376: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 377: LD_INT 0
 379: PPUSH
 380: PPUSH
 381: PPUSH
 382: PPUSH
 383: PPUSH
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
 389: PPUSH
 390: PPUSH
// uc_nation := 2 ;
 391: LD_ADDR_OWVAR 21
 395: PUSH
 396: LD_INT 2
 398: ST_TO_ADDR
// uc_side := 5 ;
 399: LD_ADDR_OWVAR 20
 403: PUSH
 404: LD_INT 5
 406: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 407: LD_ADDR_EXP 38
 411: PUSH
 412: LD_STRING Abdul
 414: PPUSH
 415: LD_INT 0
 417: PPUSH
 418: LD_STRING 
 420: PPUSH
 421: CALL 25283 0 3
 425: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 426: LD_ADDR_EXP 40
 430: PUSH
 431: LD_STRING Omar
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: LD_STRING 
 439: PPUSH
 440: CALL 25283 0 3
 444: ST_TO_ADDR
// uc_side := 2 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 2
 452: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 453: LD_ADDR_EXP 30
 457: PUSH
 458: LD_STRING Heike
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 25283 0 3
 476: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 477: LD_ADDR_EXP 33
 481: PUSH
 482: LD_STRING Ibrahim
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: LD_EXP 2
 495: PPUSH
 496: CALL 25283 0 3
 500: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 501: LD_ADDR_EXP 31
 505: PUSH
 506: LD_STRING Givi
 508: PPUSH
 509: LD_EXP 1
 513: NOT
 514: PPUSH
 515: LD_EXP 2
 519: PPUSH
 520: CALL 25283 0 3
 524: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 525: LD_ADDR_EXP 34
 529: PUSH
 530: LD_STRING Kamil
 532: PPUSH
 533: LD_EXP 1
 537: NOT
 538: PPUSH
 539: LD_EXP 2
 543: PPUSH
 544: CALL 25283 0 3
 548: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 549: LD_ADDR_EXP 35
 553: PUSH
 554: LD_STRING Kaia
 556: PPUSH
 557: LD_EXP 1
 561: NOT
 562: PPUSH
 563: LD_EXP 2
 567: PPUSH
 568: CALL 25283 0 3
 572: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 573: LD_ADDR_EXP 36
 577: PUSH
 578: LD_STRING Sophia
 580: PPUSH
 581: LD_EXP 1
 585: NOT
 586: PPUSH
 587: LD_EXP 2
 591: PPUSH
 592: CALL 25283 0 3
 596: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 597: LD_ADDR_EXP 37
 601: PUSH
 602: LD_STRING Markov
 604: PPUSH
 605: LD_EXP 1
 609: NOT
 610: PPUSH
 611: LD_EXP 2
 615: PPUSH
 616: CALL 25283 0 3
 620: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 621: LD_ADDR_EXP 42
 625: PUSH
 626: LD_STRING Aviradze
 628: PPUSH
 629: LD_EXP 1
 633: NOT
 634: PPUSH
 635: LD_EXP 2
 639: PPUSH
 640: CALL 25283 0 3
 644: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 645: LD_ADDR_EXP 41
 649: PUSH
 650: LD_STRING Kurt
 652: PPUSH
 653: LD_EXP 1
 657: NOT
 658: PPUSH
 659: LD_EXP 2
 663: PPUSH
 664: CALL 25283 0 3
 668: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 669: LD_ADDR_EXP 32
 673: PUSH
 674: LD_STRING Mike
 676: PPUSH
 677: LD_EXP 1
 681: NOT
 682: PPUSH
 683: LD_EXP 2
 687: PPUSH
 688: CALL 25283 0 3
 692: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 693: LD_ADDR_EXP 39
 697: PUSH
 698: LD_STRING Olaf
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: LD_STRING 
 706: PPUSH
 707: CALL 25283 0 3
 711: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 712: LD_ADDR_EXP 45
 716: PUSH
 717: LD_STRING 05_others
 719: PPUSH
 720: CALL_OW 31
 724: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 725: LD_ADDR_EXP 46
 729: PUSH
 730: LD_STRING 05_apes
 732: PPUSH
 733: CALL_OW 31
 737: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: LD_STRING 05_Radar
 745: PPUSH
 746: LD_EXP 1
 750: PPUSH
 751: CALL_OW 30
 755: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 756: LD_ADDR_VAR 0 6
 760: PUSH
 761: LD_STRING 05_RemoteControl
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 30
 773: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 774: LD_ADDR_VAR 0 7
 778: PUSH
 779: LD_STRING 05_DrugsTested
 781: PPUSH
 782: LD_EXP 1
 786: PPUSH
 787: CALL_OW 30
 791: ST_TO_ADDR
// if hasDrugs then
 792: LD_VAR 0 7
 796: IFFALSE 811
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 798: LD_INT 5
 800: PPUSH
 801: LD_INT 2
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: CALL_OW 322
// if hasRadar then
 811: LD_VAR 0 5
 815: IFFALSE 830
// SetTech ( tech_radar , 2 , state_researched ) ;
 817: LD_INT 6
 819: PPUSH
 820: LD_INT 2
 822: PPUSH
 823: LD_INT 2
 825: PPUSH
 826: CALL_OW 322
// if hasRemote then
 830: LD_VAR 0 6
 834: IFFALSE 849
// SetTech ( tech_remCont , 2 , state_researched ) ;
 836: LD_INT 15
 838: PPUSH
 839: LD_INT 2
 841: PPUSH
 842: LD_INT 2
 844: PPUSH
 845: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 849: LD_ADDR_VAR 0 12
 853: PUSH
 854: LD_INT 5
 856: PPUSH
 857: LD_INT 0
 859: PPUSH
 860: CALL_OW 517
 864: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 865: LD_ADDR_VAR 0 2
 869: PUSH
 870: DOUBLE
 871: LD_INT 1
 873: DEC
 874: ST_TO_ADDR
 875: LD_VAR 0 12
 879: PUSH
 880: LD_INT 1
 882: ARRAY
 883: PUSH
 884: FOR_TO
 885: IFFALSE 962
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 887: LD_VAR 0 12
 891: PUSH
 892: LD_INT 1
 894: ARRAY
 895: PUSH
 896: LD_VAR 0 2
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 12
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PUSH
 911: LD_VAR 0 2
 915: ARRAY
 916: PPUSH
 917: CALL_OW 351
 921: IFFALSE 960
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 923: LD_VAR 0 12
 927: PUSH
 928: LD_INT 1
 930: ARRAY
 931: PUSH
 932: LD_VAR 0 2
 936: ARRAY
 937: PPUSH
 938: LD_VAR 0 12
 942: PUSH
 943: LD_INT 2
 945: ARRAY
 946: PUSH
 947: LD_VAR 0 2
 951: ARRAY
 952: PPUSH
 953: LD_INT 2
 955: PPUSH
 956: CALL_OW 244
 960: GO 884
 962: POP
 963: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 964: LD_ADDR_VAR 0 4
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 206
 974: PUSH
 975: LD_INT 80
 977: PUSH
 978: LD_INT 1
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: LD_INT 32
 989: PUSH
 990: LD_INT 221
 992: PUSH
 993: LD_INT 95
 995: PUSH
 996: LD_INT 5
 998: PUSH
 999: LD_INT 23
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 32
1011: PUSH
1012: LD_INT 223
1014: PUSH
1015: LD_INT 88
1017: PUSH
1018: LD_INT 5
1020: PUSH
1021: LD_INT 24
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 32
1033: PUSH
1034: LD_INT 202
1036: PUSH
1037: LD_INT 64
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 25
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_INT 3
1055: PUSH
1056: LD_INT 203
1058: PUSH
1059: LD_INT 91
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 8
1073: PUSH
1074: LD_INT 217
1076: PUSH
1077: LD_INT 78
1079: PUSH
1080: LD_INT 4
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 27
1091: PUSH
1092: LD_INT 220
1094: PUSH
1095: LD_INT 99
1097: PUSH
1098: LD_INT 1
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 27
1109: PUSH
1110: LD_INT 220
1112: PUSH
1113: LD_INT 103
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_INT 27
1127: PUSH
1128: LD_INT 216
1130: PUSH
1131: LD_INT 102
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 17
1145: PUSH
1146: LD_INT 203
1148: PUSH
1149: LD_INT 94
1151: PUSH
1152: LD_INT 0
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: PUSH
1161: LD_INT 23
1163: PUSH
1164: LD_INT 200
1166: PUSH
1167: LD_INT 88
1169: PUSH
1170: LD_INT 2
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_INT 16
1181: PUSH
1182: LD_INT 199
1184: PUSH
1185: LD_INT 91
1187: PUSH
1188: LD_INT 1
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 26
1199: PUSH
1200: LD_INT 197
1202: PUSH
1203: LD_INT 81
1205: PUSH
1206: LD_INT 1
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 197
1220: PUSH
1221: LD_INT 78
1223: PUSH
1224: LD_INT 3
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: ST_TO_ADDR
// if hasRadar then
1249: LD_VAR 0 5
1253: IFFALSE 1297
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1255: LD_ADDR_VAR 0 4
1259: PUSH
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_VAR 0 4
1269: PUSH
1270: LD_INT 1
1272: PLUS
1273: PPUSH
1274: LD_INT 20
1276: PUSH
1277: LD_INT 203
1279: PUSH
1280: LD_INT 87
1282: PUSH
1283: LD_INT 3
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 1
1296: ST_TO_ADDR
// if hasRemote then
1297: LD_VAR 0 6
1301: IFFALSE 1345
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1303: LD_ADDR_VAR 0 4
1307: PUSH
1308: LD_VAR 0 4
1312: PPUSH
1313: LD_VAR 0 4
1317: PUSH
1318: LD_INT 1
1320: PLUS
1321: PPUSH
1322: LD_INT 22
1324: PUSH
1325: LD_INT 207
1327: PUSH
1328: LD_INT 95
1330: PUSH
1331: LD_INT 5
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 1
1344: ST_TO_ADDR
// for i in base do
1345: LD_ADDR_VAR 0 2
1349: PUSH
1350: LD_VAR 0 4
1354: PUSH
1355: FOR_IN
1356: IFFALSE 1537
// begin bc_type := i [ 1 ] ;
1358: LD_ADDR_OWVAR 42
1362: PUSH
1363: LD_VAR 0 2
1367: PUSH
1368: LD_INT 1
1370: ARRAY
1371: ST_TO_ADDR
// bc_level := 3 ;
1372: LD_ADDR_OWVAR 43
1376: PUSH
1377: LD_INT 3
1379: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1380: LD_VAR 0 2
1384: PUSH
1385: LD_INT 1
1387: ARRAY
1388: PUSH
1389: LD_INT 8
1391: EQUAL
1392: IFFALSE 1427
// begin bc_kind1 := b_lab_weapon ;
1394: LD_ADDR_OWVAR 44
1398: PUSH
1399: LD_INT 10
1401: ST_TO_ADDR
// if hasRadar then
1402: LD_VAR 0 5
1406: IFFALSE 1418
// bc_kind2 := b_lab_opto else
1408: LD_ADDR_OWVAR 45
1412: PUSH
1413: LD_INT 15
1415: ST_TO_ADDR
1416: GO 1427
// bc_kind2 := - 1 ;
1418: LD_ADDR_OWVAR 45
1422: PUSH
1423: LD_INT 1
1425: NEG
1426: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1427: LD_ADDR_VAR 0 3
1431: PUSH
1432: LD_VAR 0 2
1436: PUSH
1437: LD_INT 2
1439: ARRAY
1440: PPUSH
1441: LD_VAR 0 2
1445: PUSH
1446: LD_INT 3
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 2
1454: PUSH
1455: LD_INT 4
1457: ARRAY
1458: PPUSH
1459: CALL_OW 47
1463: ST_TO_ADDR
// if i > 4 then
1464: LD_VAR 0 2
1468: PUSH
1469: LD_INT 4
1471: GREATER
1472: IFFALSE 1492
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1474: LD_VAR 0 3
1478: PPUSH
1479: LD_VAR 0 2
1483: PUSH
1484: LD_INT 5
1486: ARRAY
1487: PPUSH
1488: CALL_OW 431
// if i [ 1 ] = b_bunker then
1492: LD_VAR 0 2
1496: PUSH
1497: LD_INT 1
1499: ARRAY
1500: PUSH
1501: LD_INT 32
1503: EQUAL
1504: IFFALSE 1535
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1506: LD_ADDR_VAR 0 11
1510: PUSH
1511: LD_VAR 0 11
1515: PPUSH
1516: LD_VAR 0 11
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_VAR 0 3
1529: PPUSH
1530: CALL_OW 1
1534: ST_TO_ADDR
// end ;
1535: GO 1355
1537: POP
1538: POP
// depot := HexInfo ( 206 , 80 ) ;
1539: LD_ADDR_VAR 0 9
1543: PUSH
1544: LD_INT 206
1546: PPUSH
1547: LD_INT 80
1549: PPUSH
1550: CALL_OW 428
1554: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1555: LD_ADDR_VAR 0 8
1559: PUSH
1560: LD_INT 203
1562: PPUSH
1563: LD_INT 91
1565: PPUSH
1566: CALL_OW 428
1570: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1571: LD_ADDR_VAR 0 10
1575: PUSH
1576: LD_INT 217
1578: PPUSH
1579: LD_INT 78
1581: PPUSH
1582: CALL_OW 428
1586: ST_TO_ADDR
// arDepot := depot ;
1587: LD_ADDR_EXP 44
1591: PUSH
1592: LD_VAR 0 9
1596: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 , 120 ] [ Difficulty ] ) ;
1597: LD_VAR 0 9
1601: PPUSH
1602: CALL_OW 274
1606: PPUSH
1607: LD_INT 1
1609: PPUSH
1610: LD_INT 360
1612: PUSH
1613: LD_INT 260
1615: PUSH
1616: LD_INT 160
1618: PUSH
1619: LD_INT 120
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_OWVAR 67
1632: ARRAY
1633: PPUSH
1634: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 , 100 ] [ Difficulty ] ) ;
1638: LD_VAR 0 9
1642: PPUSH
1643: CALL_OW 274
1647: PPUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 200
1653: PUSH
1654: LD_INT 170
1656: PUSH
1657: LD_INT 130
1659: PUSH
1660: LD_INT 100
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_OWVAR 67
1673: ARRAY
1674: PPUSH
1675: CALL_OW 277
// uc_nation := 2 ;
1679: LD_ADDR_OWVAR 21
1683: PUSH
1684: LD_INT 2
1686: ST_TO_ADDR
// uc_side := 2 ;
1687: LD_ADDR_OWVAR 20
1691: PUSH
1692: LD_INT 2
1694: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1695: LD_INT 13
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 27
1706: PPUSH
1707: LD_INT 33
1709: PPUSH
1710: CALL 30298 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1714: CALL_OW 45
1718: PPUSH
1719: LD_INT 190
1721: PPUSH
1722: LD_INT 64
1724: PPUSH
1725: LD_INT 5
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL 64799 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1735: LD_INT 13
1737: PPUSH
1738: LD_INT 1
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 25
1746: PPUSH
1747: LD_INT 22
1749: PPUSH
1750: CALL 30298 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1754: CALL_OW 45
1758: PPUSH
1759: LD_INT 188
1761: PPUSH
1762: LD_INT 67
1764: PPUSH
1765: LD_INT 5
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL 64799 0 5
// if hasRemote then
1775: LD_VAR 0 6
1779: IFFALSE 1861
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1781: LD_INT 13
1783: PPUSH
1784: LD_INT 1
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 31
1792: PPUSH
1793: LD_INT 35
1795: PPUSH
1796: CALL 30298 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1800: CALL_OW 45
1804: PPUSH
1805: LD_INT 191
1807: PPUSH
1808: LD_INT 71
1810: PPUSH
1811: LD_INT 5
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL 64799 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1821: LD_INT 14
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: LD_INT 27
1832: PPUSH
1833: LD_INT 55
1835: PPUSH
1836: CALL 30298 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1840: CALL_OW 45
1844: PPUSH
1845: LD_INT 199
1847: PPUSH
1848: LD_INT 67
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL 64799 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1861: LD_EXP 30
1865: PPUSH
1866: LD_INT 213
1868: PPUSH
1869: LD_INT 87
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1879: LD_EXP 30
1883: PPUSH
1884: LD_INT 214
1886: PPUSH
1887: LD_INT 87
1889: PPUSH
1890: CALL_OW 118
// if Kaia then
1894: LD_EXP 35
1898: IFFALSE 1933
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1900: LD_EXP 35
1904: PPUSH
1905: LD_INT 213
1907: PPUSH
1908: LD_INT 85
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1918: LD_EXP 35
1922: PPUSH
1923: LD_INT 215
1925: PPUSH
1926: LD_INT 87
1928: PPUSH
1929: CALL_OW 118
// end ; if Olaf and Kaia then
1933: LD_EXP 39
1937: PUSH
1938: LD_EXP 35
1942: AND
1943: IFFALSE 1980
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1945: LD_EXP 39
1949: PPUSH
1950: LD_INT 215
1952: PPUSH
1953: LD_INT 87
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1963: LD_EXP 39
1967: PPUSH
1968: LD_INT 213
1970: PPUSH
1971: LD_INT 85
1973: PPUSH
1974: CALL_OW 118
// end else
1978: GO 2000
// if Olaf then
1980: LD_EXP 39
1984: IFFALSE 2000
// PlaceHumanInUnit ( Olaf , factory ) ;
1986: LD_EXP 39
1990: PPUSH
1991: LD_VAR 0 8
1995: PPUSH
1996: CALL_OW 52
// if Givi then
2000: LD_EXP 31
2004: IFFALSE 2085
// begin if Kaia and Olaf then
2006: LD_EXP 35
2010: PUSH
2011: LD_EXP 39
2015: AND
2016: IFFALSE 2053
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2018: LD_EXP 31
2022: PPUSH
2023: LD_INT 247
2025: PPUSH
2026: LD_INT 117
2028: PPUSH
2029: LD_INT 0
2031: PPUSH
2032: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2036: LD_EXP 31
2040: PPUSH
2041: LD_INT 248
2043: PPUSH
2044: LD_INT 118
2046: PPUSH
2047: CALL_OW 118
// end else
2051: GO 2085
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2053: LD_EXP 31
2057: PPUSH
2058: LD_INT 216
2060: PPUSH
2061: LD_INT 88
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2071: LD_EXP 31
2075: PPUSH
2076: LD_EXP 30
2080: PPUSH
2081: CALL_OW 119
// end ; end ; if Kurt then
2085: LD_EXP 41
2089: IFFALSE 2109
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2091: LD_EXP 41
2095: PPUSH
2096: LD_VAR 0 11
2100: PUSH
2101: LD_INT 2
2103: ARRAY
2104: PPUSH
2105: CALL_OW 52
// if Mike then
2109: LD_EXP 32
2113: IFFALSE 2133
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2115: LD_EXP 32
2119: PPUSH
2120: LD_VAR 0 11
2124: PUSH
2125: LD_INT 3
2127: ARRAY
2128: PPUSH
2129: CALL_OW 52
// if Kamil then
2133: LD_EXP 34
2137: IFFALSE 2199
// begin if Kaia and Olaf then
2139: LD_EXP 35
2143: PUSH
2144: LD_EXP 39
2148: AND
2149: IFFALSE 2167
// PlaceHumanInUnit ( Kamil , depot ) else
2151: LD_EXP 34
2155: PPUSH
2156: LD_VAR 0 9
2160: PPUSH
2161: CALL_OW 52
2165: GO 2199
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2167: LD_EXP 34
2171: PPUSH
2172: LD_INT 213
2174: PPUSH
2175: LD_INT 87
2177: PPUSH
2178: LD_INT 0
2180: PPUSH
2181: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2185: LD_EXP 34
2189: PPUSH
2190: LD_EXP 30
2194: PPUSH
2195: CALL_OW 119
// end ; end ; if Sophia then
2199: LD_EXP 36
2203: IFFALSE 2219
// PlaceHumanInUnit ( Sophia , depot ) ;
2205: LD_EXP 36
2209: PPUSH
2210: LD_VAR 0 9
2214: PPUSH
2215: CALL_OW 52
// if Aviradze then
2219: LD_EXP 42
2223: IFFALSE 2239
// PlaceHumanInUnit ( Aviradze , lab ) ;
2225: LD_EXP 42
2229: PPUSH
2230: LD_VAR 0 10
2234: PPUSH
2235: CALL_OW 52
// if Ibrahim then
2239: LD_EXP 33
2243: IFFALSE 2259
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2245: LD_EXP 33
2249: PPUSH
2250: LD_VAR 0 10
2254: PPUSH
2255: CALL_OW 52
// if Markov then
2259: LD_EXP 37
2263: IFFALSE 2279
// PlaceHumanInUnit ( Markov , factory ) ;
2265: LD_EXP 37
2269: PPUSH
2270: LD_VAR 0 8
2274: PPUSH
2275: CALL_OW 52
// if heikeSecondSquad then
2279: LD_EXP 45
2283: IFFALSE 2323
// for i in heikeSecondSquad do
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: LD_EXP 45
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2321
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2298: LD_VAR 0 2
2302: PPUSH
2303: LD_INT 190
2305: PPUSH
2306: LD_INT 65
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: LD_INT 0
2314: PPUSH
2315: CALL_OW 50
2319: GO 2295
2321: POP
2322: POP
// if heikeApes then
2323: LD_EXP 46
2327: IFFALSE 2367
// for i in heikeApes do
2329: LD_ADDR_VAR 0 2
2333: PUSH
2334: LD_EXP 46
2338: PUSH
2339: FOR_IN
2340: IFFALSE 2365
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2342: LD_VAR 0 2
2346: PPUSH
2347: LD_INT 190
2349: PPUSH
2350: LD_INT 70
2352: PPUSH
2353: LD_INT 5
2355: PPUSH
2356: LD_INT 0
2358: PPUSH
2359: CALL_OW 50
2363: GO 2339
2365: POP
2366: POP
// end ;
2367: LD_VAR 0 1
2371: RET
// export function PrepareRolfSquad ; var i , j ; begin
2372: LD_INT 0
2374: PPUSH
2375: PPUSH
2376: PPUSH
// uc_side := 8 ;
2377: LD_ADDR_OWVAR 20
2381: PUSH
2382: LD_INT 8
2384: ST_TO_ADDR
// uc_nation := 2 ;
2385: LD_ADDR_OWVAR 21
2389: PUSH
2390: LD_INT 2
2392: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2393: LD_ADDR_EXP 43
2397: PUSH
2398: LD_STRING Bergkamp
2400: PPUSH
2401: CALL_OW 25
2405: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2406: LD_ADDR_EXP 47
2410: PUSH
2411: LD_EXP 43
2415: PUSH
2416: EMPTY
2417: LIST
2418: ST_TO_ADDR
// for i := 1 to 4 do
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: DOUBLE
2425: LD_INT 1
2427: DEC
2428: ST_TO_ADDR
2429: LD_INT 4
2431: PUSH
2432: FOR_TO
2433: IFFALSE 2513
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2435: LD_ADDR_VAR 0 3
2439: PUSH
2440: DOUBLE
2441: LD_INT 1
2443: DEC
2444: ST_TO_ADDR
2445: LD_INT 5
2447: PUSH
2448: LD_INT 2
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 1
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_VAR 0 2
2467: ARRAY
2468: PUSH
2469: FOR_TO
2470: IFFALSE 2509
// begin PrepareHuman ( false , i , 5 ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 5
2482: PPUSH
2483: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2487: LD_ADDR_EXP 47
2491: PUSH
2492: LD_EXP 47
2496: PPUSH
2497: CALL_OW 44
2501: PPUSH
2502: CALL 62659 0 2
2506: ST_TO_ADDR
// end ;
2507: GO 2469
2509: POP
2510: POP
// end ;
2511: GO 2432
2513: POP
2514: POP
// if HexInfo ( 5 , 3 ) then
2515: LD_INT 5
2517: PPUSH
2518: LD_INT 3
2520: PPUSH
2521: CALL_OW 428
2525: IFFALSE 2542
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2527: LD_INT 5
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 428
2537: PPUSH
2538: CALL_OW 64
// for i in rolfSquad do
2542: LD_ADDR_VAR 0 2
2546: PUSH
2547: LD_EXP 47
2551: PUSH
2552: FOR_IN
2553: IFFALSE 2689
// begin uc_direction := 2 ;
2555: LD_ADDR_OWVAR 24
2559: PUSH
2560: LD_INT 2
2562: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2563: LD_VAR 0 2
2567: PPUSH
2568: CALL_OW 257
2572: PUSH
2573: LD_INT 3
2575: EQUAL
2576: IFFALSE 2650
// begin uc_side := 8 ;
2578: LD_ADDR_OWVAR 20
2582: PUSH
2583: LD_INT 8
2585: ST_TO_ADDR
// uc_nation := 2 ;
2586: LD_ADDR_OWVAR 21
2590: PUSH
2591: LD_INT 2
2593: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2594: LD_INT 13
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: LD_INT 1
2602: PPUSH
2603: LD_INT 27
2605: PPUSH
2606: LD_INT 88
2608: PPUSH
2609: CALL 30298 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2613: CALL_OW 45
2617: PPUSH
2618: LD_INT 11
2620: PPUSH
2621: LD_INT 0
2623: PPUSH
2624: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2628: LD_VAR 0 2
2632: PPUSH
2633: LD_INT 5
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: CALL_OW 428
2643: PPUSH
2644: CALL_OW 52
// end else
2648: GO 2665
// PlaceUnitArea ( i , northSpawn , false ) ;
2650: LD_VAR 0 2
2654: PPUSH
2655: LD_INT 11
2657: PPUSH
2658: LD_INT 0
2660: PPUSH
2661: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2665: LD_VAR 0 2
2669: PPUSH
2670: LD_INT 29
2672: PPUSH
2673: LD_INT 10
2675: PPUSH
2676: CALL_OW 111
// wait ( 0 0$2 ) ;
2680: LD_INT 70
2682: PPUSH
2683: CALL_OW 67
// end ;
2687: GO 2552
2689: POP
2690: POP
// wait ( 0 0$5 ) ;
2691: LD_INT 175
2693: PPUSH
2694: CALL_OW 67
// end ;
2698: LD_VAR 0 1
2702: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2703: LD_INT 0
2705: PPUSH
2706: PPUSH
2707: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2708: LD_EXP 43
2712: PPUSH
2713: LD_INT 94
2715: PPUSH
2716: LD_INT 63
2718: PPUSH
2719: CALL_OW 428
2723: PPUSH
2724: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: LD_INT 4
2735: PUSH
2736: LD_INT 82
2738: PUSH
2739: LD_INT 64
2741: PUSH
2742: LD_INT 1
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 31
2753: PUSH
2754: LD_INT 73
2756: PUSH
2757: LD_INT 58
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: ST_TO_ADDR
// for i in tmp do
2773: LD_ADDR_VAR 0 2
2777: PUSH
2778: LD_VAR 0 3
2782: PUSH
2783: FOR_IN
2784: IFFALSE 2848
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2786: LD_EXP 47
2790: PPUSH
2791: LD_INT 25
2793: PUSH
2794: LD_INT 2
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PPUSH
2801: CALL_OW 72
2805: PPUSH
2806: LD_VAR 0 2
2810: PUSH
2811: LD_INT 1
2813: ARRAY
2814: PPUSH
2815: LD_VAR 0 2
2819: PUSH
2820: LD_INT 2
2822: ARRAY
2823: PPUSH
2824: LD_VAR 0 2
2828: PUSH
2829: LD_INT 3
2831: ARRAY
2832: PPUSH
2833: LD_VAR 0 2
2837: PUSH
2838: LD_INT 4
2840: ARRAY
2841: PPUSH
2842: CALL_OW 205
2846: GO 2783
2848: POP
2849: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2850: LD_EXP 47
2854: PUSH
2855: LD_INT 2
2857: ARRAY
2858: PPUSH
2859: LD_INT 63
2861: PPUSH
2862: LD_INT 42
2864: PPUSH
2865: CALL_OW 428
2869: PPUSH
2870: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2874: LD_EXP 47
2878: PUSH
2879: LD_INT 3
2881: ARRAY
2882: PPUSH
2883: LD_INT 94
2885: PPUSH
2886: LD_INT 63
2888: PPUSH
2889: CALL_OW 428
2893: PPUSH
2894: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2898: LD_INT 35
2900: PPUSH
2901: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2905: LD_EXP 47
2909: PPUSH
2910: LD_INT 25
2912: PUSH
2913: LD_INT 2
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: LD_INT 60
2925: PUSH
2926: EMPTY
2927: LIST
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 72
2941: IFFALSE 2898
// rolfScriptBase := true ;
2943: LD_ADDR_EXP 9
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// end ;
2951: LD_VAR 0 1
2955: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2956: LD_EXP 9
2960: PUSH
2961: LD_EXP 43
2965: PPUSH
2966: CALL_OW 255
2970: PUSH
2971: LD_INT 8
2973: EQUAL
2974: AND
2975: IFFALSE 3982
2977: GO 2979
2979: DISABLE
2980: LD_INT 0
2982: PPUSH
2983: PPUSH
2984: PPUSH
2985: PPUSH
2986: PPUSH
2987: PPUSH
2988: PPUSH
2989: PPUSH
2990: PPUSH
2991: PPUSH
// begin enable ;
2992: ENABLE
// if not rolfSquad then
2993: LD_EXP 47
2997: NOT
2998: IFFALSE 3002
// exit ;
3000: GO 3982
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3002: LD_ADDR_VAR 0 9
3006: PUSH
3007: LD_INT 12
3009: PPUSH
3010: LD_INT 81
3012: PUSH
3013: LD_INT 8
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PPUSH
3020: CALL_OW 70
3024: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3025: LD_ADDR_VAR 0 5
3029: PUSH
3030: LD_EXP 47
3034: PPUSH
3035: LD_INT 25
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PPUSH
3045: CALL_OW 72
3049: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3050: LD_ADDR_VAR 0 6
3054: PUSH
3055: LD_EXP 47
3059: PPUSH
3060: LD_INT 25
3062: PUSH
3063: LD_INT 2
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PPUSH
3070: CALL_OW 72
3074: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3075: LD_ADDR_VAR 0 8
3079: PUSH
3080: LD_EXP 47
3084: PPUSH
3085: LD_INT 25
3087: PUSH
3088: LD_INT 3
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PPUSH
3095: CALL_OW 72
3099: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3100: LD_ADDR_VAR 0 7
3104: PUSH
3105: LD_EXP 47
3109: PPUSH
3110: LD_INT 25
3112: PUSH
3113: LD_INT 4
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL_OW 72
3124: ST_TO_ADDR
// if sol then
3125: LD_VAR 0 5
3129: IFFALSE 3427
// for i in sol union Rolf do
3131: LD_ADDR_VAR 0 1
3135: PUSH
3136: LD_VAR 0 5
3140: PUSH
3141: LD_EXP 43
3145: UNION
3146: PUSH
3147: FOR_IN
3148: IFFALSE 3425
// if not IsInUnit ( i ) and not HasTask ( i ) then
3150: LD_VAR 0 1
3154: PPUSH
3155: CALL_OW 310
3159: NOT
3160: PUSH
3161: LD_VAR 0 1
3165: PPUSH
3166: CALL_OW 314
3170: NOT
3171: AND
3172: IFFALSE 3423
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3174: LD_VAR 0 1
3178: PPUSH
3179: CALL_OW 256
3183: PUSH
3184: LD_INT 500
3186: LESS
3187: PUSH
3188: LD_VAR 0 1
3192: PPUSH
3193: LD_INT 80
3195: PPUSH
3196: LD_INT 49
3198: PPUSH
3199: CALL_OW 297
3203: PUSH
3204: LD_INT 6
3206: GREATER
3207: AND
3208: IFFALSE 3227
// begin ComMoveXY ( i , 80 , 49 ) ;
3210: LD_VAR 0 1
3214: PPUSH
3215: LD_INT 80
3217: PPUSH
3218: LD_INT 49
3220: PPUSH
3221: CALL_OW 111
// continue ;
3225: GO 3147
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3227: LD_ADDR_VAR 0 4
3231: PUSH
3232: LD_INT 22
3234: PUSH
3235: LD_INT 8
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 50
3244: PUSH
3245: EMPTY
3246: LIST
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 30
3253: PUSH
3254: LD_INT 4
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 30
3263: PUSH
3264: LD_INT 5
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 30
3273: PUSH
3274: LD_INT 32
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 31
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: PPUSH
3303: CALL_OW 69
3307: ST_TO_ADDR
// if tmp then
3308: LD_VAR 0 4
3312: IFFALSE 3423
// begin for b in tmp do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: LD_VAR 0 4
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3421
// begin case GetBType ( b ) of b_armoury , b_barracks :
3327: LD_VAR 0 2
3331: PPUSH
3332: CALL_OW 266
3336: PUSH
3337: LD_INT 4
3339: DOUBLE
3340: EQUAL
3341: IFTRUE 3351
3343: LD_INT 5
3345: DOUBLE
3346: EQUAL
3347: IFTRUE 3351
3349: GO 3362
3351: POP
// p := 6 ; b_breastwork , b_bunker :
3352: LD_ADDR_VAR 0 3
3356: PUSH
3357: LD_INT 6
3359: ST_TO_ADDR
3360: GO 3388
3362: LD_INT 31
3364: DOUBLE
3365: EQUAL
3366: IFTRUE 3376
3368: LD_INT 32
3370: DOUBLE
3371: EQUAL
3372: IFTRUE 3376
3374: GO 3387
3376: POP
// p := 1 ; end ;
3377: LD_ADDR_VAR 0 3
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
3385: GO 3388
3387: POP
// if UnitsInside ( b ) < p then
3388: LD_VAR 0 2
3392: PPUSH
3393: CALL_OW 313
3397: PUSH
3398: LD_VAR 0 3
3402: LESS
3403: IFFALSE 3419
// ComEnterUnit ( i , b ) ;
3405: LD_VAR 0 1
3409: PPUSH
3410: LD_VAR 0 2
3414: PPUSH
3415: CALL_OW 120
// end ;
3419: GO 3324
3421: POP
3422: POP
// end ; end ;
3423: GO 3147
3425: POP
3426: POP
// if sci then
3427: LD_VAR 0 7
3431: IFFALSE 3486
// for i in sci do
3433: LD_ADDR_VAR 0 1
3437: PUSH
3438: LD_VAR 0 7
3442: PUSH
3443: FOR_IN
3444: IFFALSE 3484
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3446: LD_VAR 0 1
3450: PPUSH
3451: LD_INT 80
3453: PPUSH
3454: LD_INT 49
3456: PPUSH
3457: CALL_OW 297
3461: PUSH
3462: LD_INT 9
3464: GREATER
3465: IFFALSE 3482
// ComMoveXY ( i , 80 , 49 ) ;
3467: LD_VAR 0 1
3471: PPUSH
3472: LD_INT 80
3474: PPUSH
3475: LD_INT 49
3477: PPUSH
3478: CALL_OW 111
// end ;
3482: GO 3443
3484: POP
3485: POP
// if mech then
3486: LD_VAR 0 8
3490: IFFALSE 3704
// for i in mech do
3492: LD_ADDR_VAR 0 1
3496: PUSH
3497: LD_VAR 0 8
3501: PUSH
3502: FOR_IN
3503: IFFALSE 3702
// begin hasVehicle := IsInUnit ( i ) ;
3505: LD_ADDR_VAR 0 10
3509: PUSH
3510: LD_VAR 0 1
3514: PPUSH
3515: CALL_OW 310
3519: ST_TO_ADDR
// if enemyInBase then
3520: LD_VAR 0 9
3524: IFFALSE 3620
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3526: LD_VAR 0 10
3530: PUSH
3531: LD_VAR 0 10
3535: PPUSH
3536: CALL_OW 256
3540: PUSH
3541: LD_INT 500
3543: GREATER
3544: AND
3545: IFFALSE 3573
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3547: LD_VAR 0 10
3551: PPUSH
3552: LD_VAR 0 9
3556: PPUSH
3557: LD_VAR 0 10
3561: PPUSH
3562: CALL_OW 74
3566: PPUSH
3567: CALL_OW 115
3571: GO 3618
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3573: LD_VAR 0 10
3577: PPUSH
3578: LD_INT 86
3580: PPUSH
3581: LD_INT 49
3583: PPUSH
3584: CALL_OW 297
3588: PUSH
3589: LD_INT 8
3591: GREATER
3592: IFFALSE 3618
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3594: LD_VAR 0 10
3598: PPUSH
3599: LD_INT 86
3601: PPUSH
3602: LD_INT 49
3604: PPUSH
3605: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3609: LD_VAR 0 1
3613: PPUSH
3614: CALL 64479 0 1
// end end else
3618: GO 3700
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3620: LD_VAR 0 1
3624: PPUSH
3625: LD_INT 86
3627: PPUSH
3628: LD_INT 49
3630: PPUSH
3631: CALL_OW 297
3635: PUSH
3636: LD_INT 8
3638: GREATER
3639: IFFALSE 3658
// ComMoveXY ( i , 86 , 49 ) else
3641: LD_VAR 0 1
3645: PPUSH
3646: LD_INT 86
3648: PPUSH
3649: LD_INT 49
3651: PPUSH
3652: CALL_OW 111
3656: GO 3700
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3658: LD_VAR 0 10
3662: PUSH
3663: LD_VAR 0 10
3667: PPUSH
3668: CALL_OW 256
3672: PUSH
3673: LD_INT 1000
3675: LESS
3676: AND
3677: IFFALSE 3700
// begin SetFuel ( hasVehicle , 100 ) ;
3679: LD_VAR 0 10
3683: PPUSH
3684: LD_INT 100
3686: PPUSH
3687: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3691: LD_VAR 0 1
3695: PPUSH
3696: CALL 64359 0 1
// end ; end ; end ;
3700: GO 3502
3702: POP
3703: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3704: LD_ADDR_VAR 0 4
3708: PUSH
3709: LD_INT 12
3711: PPUSH
3712: LD_INT 3
3714: PUSH
3715: LD_INT 24
3717: PUSH
3718: LD_INT 1000
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 21
3731: PUSH
3732: LD_INT 3
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 70
3747: ST_TO_ADDR
// if tmp and eng then
3748: LD_VAR 0 4
3752: PUSH
3753: LD_VAR 0 6
3757: AND
3758: IFFALSE 3864
// begin for i in eng do
3760: LD_ADDR_VAR 0 1
3764: PUSH
3765: LD_VAR 0 6
3769: PUSH
3770: FOR_IN
3771: IFFALSE 3862
// if IsInUnit ( i ) then
3773: LD_VAR 0 1
3777: PPUSH
3778: CALL_OW 310
3782: IFFALSE 3795
// ComExitBuilding ( i ) else
3784: LD_VAR 0 1
3788: PPUSH
3789: CALL_OW 122
3793: GO 3860
// if GetLives ( i ) = 1000 then
3795: LD_VAR 0 1
3799: PPUSH
3800: CALL_OW 256
3804: PUSH
3805: LD_INT 1000
3807: EQUAL
3808: IFFALSE 3830
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3810: LD_VAR 0 1
3814: PPUSH
3815: LD_VAR 0 4
3819: PUSH
3820: LD_INT 1
3822: ARRAY
3823: PPUSH
3824: CALL_OW 130
3828: GO 3860
// if GetLives ( i ) < 700 then
3830: LD_VAR 0 1
3834: PPUSH
3835: CALL_OW 256
3839: PUSH
3840: LD_INT 700
3842: LESS
3843: IFFALSE 3860
// ComMoveXY ( i , 80 , 49 ) ;
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_INT 80
3852: PPUSH
3853: LD_INT 49
3855: PPUSH
3856: CALL_OW 111
3860: GO 3770
3862: POP
3863: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3864: LD_VAR 0 4
3868: NOT
3869: PUSH
3870: LD_VAR 0 6
3874: PPUSH
3875: LD_INT 3
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: EMPTY
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 72
3892: AND
3893: IFFALSE 3982
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 6
3904: PPUSH
3905: LD_INT 3
3907: PUSH
3908: LD_INT 54
3910: PUSH
3911: EMPTY
3912: LIST
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 72
3922: PUSH
3923: FOR_IN
3924: IFFALSE 3980
// if GetLives ( i ) < 1000 then
3926: LD_VAR 0 1
3930: PPUSH
3931: CALL_OW 256
3935: PUSH
3936: LD_INT 1000
3938: LESS
3939: IFFALSE 3958
// ComMoveXY ( i , 80 , 49 ) else
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 80
3948: PPUSH
3949: LD_INT 49
3951: PPUSH
3952: CALL_OW 111
3956: GO 3978
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_INT 86
3965: PPUSH
3966: LD_INT 54
3968: PPUSH
3969: CALL_OW 428
3973: PPUSH
3974: CALL_OW 120
3978: GO 3923
3980: POP
3981: POP
// end ;
3982: PPOPN 10
3984: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3985: LD_INT 0
3987: PPUSH
3988: PPUSH
3989: PPUSH
3990: PPUSH
// uc_side := 5 ;
3991: LD_ADDR_OWVAR 20
3995: PUSH
3996: LD_INT 5
3998: ST_TO_ADDR
// uc_nation := 2 ;
3999: LD_ADDR_OWVAR 21
4003: PUSH
4004: LD_INT 2
4006: ST_TO_ADDR
// omarSquad := [ ] ;
4007: LD_ADDR_EXP 48
4011: PUSH
4012: EMPTY
4013: ST_TO_ADDR
// for i := 1 to 4 do
4014: LD_ADDR_VAR 0 2
4018: PUSH
4019: DOUBLE
4020: LD_INT 1
4022: DEC
4023: ST_TO_ADDR
4024: LD_INT 4
4026: PUSH
4027: FOR_TO
4028: IFFALSE 4151
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4030: LD_ADDR_VAR 0 3
4034: PUSH
4035: DOUBLE
4036: LD_INT 1
4038: DEC
4039: ST_TO_ADDR
4040: LD_INT 6
4042: PUSH
4043: LD_INT 2
4045: PUSH
4046: LD_INT 2
4048: PUSH
4049: LD_EXP 21
4053: PLUS
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: PUSH
4064: LD_VAR 0 2
4068: ARRAY
4069: PUSH
4070: FOR_TO
4071: IFFALSE 4147
// begin PrepareHuman ( false , i , 5 ) ;
4073: LD_INT 0
4075: PPUSH
4076: LD_VAR 0 2
4080: PPUSH
4081: LD_INT 5
4083: PPUSH
4084: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4088: LD_ADDR_EXP 48
4092: PUSH
4093: LD_EXP 48
4097: PPUSH
4098: CALL_OW 44
4102: PPUSH
4103: CALL 62659 0 2
4107: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4108: LD_VAR 0 2
4112: PUSH
4113: LD_INT 1
4115: EQUAL
4116: PUSH
4117: LD_INT 50
4119: PPUSH
4120: CALL_OW 13
4124: AND
4125: IFFALSE 4145
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4127: LD_EXP 48
4131: PUSH
4132: LD_EXP 48
4136: ARRAY
4137: PPUSH
4138: LD_INT 8
4140: PPUSH
4141: CALL_OW 336
// end ;
4145: GO 4070
4147: POP
4148: POP
// end ;
4149: GO 4027
4151: POP
4152: POP
// if HexInfo ( 340 , 205 ) then
4153: LD_INT 340
4155: PPUSH
4156: LD_INT 205
4158: PPUSH
4159: CALL_OW 428
4163: IFFALSE 4180
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4165: LD_INT 340
4167: PPUSH
4168: LD_INT 205
4170: PPUSH
4171: CALL_OW 428
4175: PPUSH
4176: CALL_OW 64
// p := 0 ;
4180: LD_ADDR_VAR 0 4
4184: PUSH
4185: LD_INT 0
4187: ST_TO_ADDR
// for i in omarSquad do
4188: LD_ADDR_VAR 0 2
4192: PUSH
4193: LD_EXP 48
4197: PUSH
4198: FOR_IN
4199: IFFALSE 4400
// begin uc_direction := 4 ;
4201: LD_ADDR_OWVAR 24
4205: PUSH
4206: LD_INT 4
4208: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4209: LD_VAR 0 2
4213: PPUSH
4214: CALL_OW 257
4218: PUSH
4219: LD_INT 3
4221: EQUAL
4222: PUSH
4223: LD_VAR 0 4
4227: PUSH
4228: LD_INT 2
4230: LESS
4231: AND
4232: IFFALSE 4361
// begin p := p + 1 ;
4234: LD_ADDR_VAR 0 4
4238: PUSH
4239: LD_VAR 0 4
4243: PUSH
4244: LD_INT 1
4246: PLUS
4247: ST_TO_ADDR
// uc_side := 5 ;
4248: LD_ADDR_OWVAR 20
4252: PUSH
4253: LD_INT 5
4255: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4256: LD_INT 0
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: CALL_OW 12
4266: IFFALSE 4297
// begin uc_nation := 2 ;
4268: LD_ADDR_OWVAR 21
4272: PUSH
4273: LD_INT 2
4275: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4276: LD_INT 13
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_INT 1
4284: PPUSH
4285: LD_INT 27
4287: PPUSH
4288: LD_INT 88
4290: PPUSH
4291: CALL 30298 0 5
// end else
4295: GO 4324
// begin uc_nation := 3 ;
4297: LD_ADDR_OWVAR 21
4301: PUSH
4302: LD_INT 3
4304: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4305: LD_INT 22
4307: PPUSH
4308: LD_INT 1
4310: PPUSH
4311: LD_INT 1
4313: PPUSH
4314: LD_INT 45
4316: PPUSH
4317: LD_INT 88
4319: PPUSH
4320: CALL 30298 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4324: CALL_OW 45
4328: PPUSH
4329: LD_INT 13
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4339: LD_VAR 0 2
4343: PPUSH
4344: LD_INT 340
4346: PPUSH
4347: LD_INT 205
4349: PPUSH
4350: CALL_OW 428
4354: PPUSH
4355: CALL_OW 52
// end else
4359: GO 4376
// PlaceUnitArea ( i , southSpawn , false ) ;
4361: LD_VAR 0 2
4365: PPUSH
4366: LD_INT 13
4368: PPUSH
4369: LD_INT 0
4371: PPUSH
4372: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4376: LD_VAR 0 2
4380: PPUSH
4381: LD_INT 333
4383: PPUSH
4384: LD_INT 210
4386: PPUSH
4387: CALL_OW 111
// wait ( 0 0$2 ) ;
4391: LD_INT 70
4393: PPUSH
4394: CALL_OW 67
// end ;
4398: GO 4198
4400: POP
4401: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4402: LD_EXP 40
4406: PPUSH
4407: LD_INT 340
4409: PPUSH
4410: LD_INT 205
4412: PPUSH
4413: LD_INT 0
4415: PPUSH
4416: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4420: LD_EXP 40
4424: PPUSH
4425: LD_INT 333
4427: PPUSH
4428: LD_INT 206
4430: PPUSH
4431: CALL_OW 111
// wait ( 0 0$2 ) ;
4435: LD_INT 70
4437: PPUSH
4438: CALL_OW 67
// ComHold ( omarSquad ) ;
4442: LD_EXP 48
4446: PPUSH
4447: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4451: LD_EXP 40
4455: PUSH
4456: LD_EXP 48
4460: PPUSH
4461: LD_INT 2
4463: PUSH
4464: LD_INT 25
4466: PUSH
4467: LD_INT 1
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 25
4476: PUSH
4477: LD_INT 8
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: PPUSH
4489: CALL_OW 72
4493: UNION
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 5
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 2
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 69
4523: UNION
4524: PPUSH
4525: LD_INT 315
4527: PPUSH
4528: LD_INT 214
4530: PPUSH
4531: CALL_OW 114
// wait ( 0 0$22 ) ;
4535: LD_INT 770
4537: PPUSH
4538: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4542: LD_EXP 48
4546: PUSH
4547: LD_EXP 40
4551: UNION
4552: PPUSH
4553: LD_INT 329
4555: PPUSH
4556: LD_INT 231
4558: PPUSH
4559: CALL_OW 114
// end ;
4563: LD_VAR 0 1
4567: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4568: LD_EXP 10
4572: IFFALSE 5655
4574: GO 4576
4576: DISABLE
4577: LD_INT 0
4579: PPUSH
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
// begin enable ;
4590: ENABLE
// if not omarSquad then
4591: LD_EXP 48
4595: NOT
4596: IFFALSE 4600
// exit ;
4598: GO 5655
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4600: LD_ADDR_VAR 0 10
4604: PUSH
4605: LD_INT 14
4607: PPUSH
4608: LD_INT 81
4610: PUSH
4611: LD_INT 5
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PPUSH
4618: CALL_OW 70
4622: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4623: LD_ADDR_VAR 0 6
4627: PUSH
4628: LD_EXP 48
4632: PPUSH
4633: LD_INT 2
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 1
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 25
4648: PUSH
4649: LD_INT 8
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: LIST
4660: PPUSH
4661: CALL_OW 72
4665: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4666: LD_ADDR_VAR 0 7
4670: PUSH
4671: LD_EXP 48
4675: PPUSH
4676: LD_INT 25
4678: PUSH
4679: LD_INT 2
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PPUSH
4686: CALL_OW 72
4690: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4691: LD_ADDR_VAR 0 9
4695: PUSH
4696: LD_EXP 48
4700: PPUSH
4701: LD_INT 25
4703: PUSH
4704: LD_INT 3
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 72
4715: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4716: LD_ADDR_VAR 0 8
4720: PUSH
4721: LD_EXP 48
4725: PPUSH
4726: LD_INT 25
4728: PUSH
4729: LD_INT 4
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PPUSH
4736: CALL_OW 72
4740: ST_TO_ADDR
// if sol then
4741: LD_VAR 0 6
4745: IFFALSE 5109
// for i in sol do
4747: LD_ADDR_VAR 0 1
4751: PUSH
4752: LD_VAR 0 6
4756: PUSH
4757: FOR_IN
4758: IFFALSE 5107
// if not HasTask ( i ) then
4760: LD_VAR 0 1
4764: PPUSH
4765: CALL_OW 314
4769: NOT
4770: IFFALSE 5105
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4772: LD_VAR 0 1
4776: PPUSH
4777: CALL_OW 310
4781: NOT
4782: PUSH
4783: LD_VAR 0 1
4787: PPUSH
4788: CALL_OW 256
4792: PUSH
4793: LD_INT 500
4795: LESS
4796: AND
4797: PUSH
4798: LD_VAR 0 1
4802: PPUSH
4803: LD_INT 333
4805: PPUSH
4806: LD_INT 234
4808: PPUSH
4809: CALL_OW 297
4813: PUSH
4814: LD_INT 6
4816: GREATER
4817: AND
4818: IFFALSE 4837
// begin ComMoveXY ( i , 333 , 234 ) ;
4820: LD_VAR 0 1
4824: PPUSH
4825: LD_INT 333
4827: PPUSH
4828: LD_INT 234
4830: PPUSH
4831: CALL_OW 111
// continue ;
4835: GO 4757
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4837: LD_ADDR_VAR 0 5
4841: PUSH
4842: LD_INT 22
4844: PUSH
4845: LD_INT 5
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 58
4854: PUSH
4855: EMPTY
4856: LIST
4857: PUSH
4858: LD_INT 50
4860: PUSH
4861: EMPTY
4862: LIST
4863: PUSH
4864: LD_INT 2
4866: PUSH
4867: LD_INT 30
4869: PUSH
4870: LD_INT 32
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 30
4879: PUSH
4880: LD_INT 31
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PPUSH
4898: CALL_OW 69
4902: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4903: LD_VAR 0 5
4907: PUSH
4908: LD_VAR 0 1
4912: PPUSH
4913: CALL_OW 310
4917: PPUSH
4918: CALL_OW 266
4922: PUSH
4923: LD_INT 31
4925: NONEQUAL
4926: AND
4927: IFFALSE 5009
// begin for j in tmp do
4929: LD_ADDR_VAR 0 2
4933: PUSH
4934: LD_VAR 0 5
4938: PUSH
4939: FOR_IN
4940: IFFALSE 5005
// if GetTag ( j ) <> 1 then
4942: LD_VAR 0 2
4946: PPUSH
4947: CALL_OW 110
4951: PUSH
4952: LD_INT 1
4954: NONEQUAL
4955: IFFALSE 5003
// begin SetTag ( j , 1 ) ;
4957: LD_VAR 0 2
4961: PPUSH
4962: LD_INT 1
4964: PPUSH
4965: CALL_OW 109
// if IsInUnit ( i ) then
4969: LD_VAR 0 1
4973: PPUSH
4974: CALL_OW 310
4978: IFFALSE 4989
// ComExit ( i ) ;
4980: LD_VAR 0 1
4984: PPUSH
4985: CALL 63057 0 1
// AddComEnterUnit ( i , j ) ;
4989: LD_VAR 0 1
4993: PPUSH
4994: LD_VAR 0 2
4998: PPUSH
4999: CALL_OW 180
// end ;
5003: GO 4939
5005: POP
5006: POP
// end else
5007: GO 5105
// if not IsInUnit ( i ) then
5009: LD_VAR 0 1
5013: PPUSH
5014: CALL_OW 310
5018: NOT
5019: IFFALSE 5105
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5021: LD_ADDR_VAR 0 5
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 5
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 50
5038: PUSH
5039: EMPTY
5040: LIST
5041: PUSH
5042: LD_INT 30
5044: PUSH
5045: LD_INT 4
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PPUSH
5057: CALL_OW 69
5061: ST_TO_ADDR
// if tmp then
5062: LD_VAR 0 5
5066: IFFALSE 5105
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5068: LD_VAR 0 5
5072: PUSH
5073: LD_INT 1
5075: ARRAY
5076: PPUSH
5077: CALL_OW 313
5081: PUSH
5082: LD_INT 6
5084: LESS
5085: IFFALSE 5105
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5087: LD_VAR 0 1
5091: PPUSH
5092: LD_VAR 0 5
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PPUSH
5101: CALL_OW 120
// end ; end ;
5105: GO 4757
5107: POP
5108: POP
// if sci then
5109: LD_VAR 0 8
5113: IFFALSE 5168
// for i in sci do
5115: LD_ADDR_VAR 0 1
5119: PUSH
5120: LD_VAR 0 8
5124: PUSH
5125: FOR_IN
5126: IFFALSE 5166
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5128: LD_VAR 0 1
5132: PPUSH
5133: LD_INT 333
5135: PPUSH
5136: LD_INT 234
5138: PPUSH
5139: CALL_OW 297
5143: PUSH
5144: LD_INT 9
5146: GREATER
5147: IFFALSE 5164
// ComMoveXY ( i , 333 , 234 ) ;
5149: LD_VAR 0 1
5153: PPUSH
5154: LD_INT 333
5156: PPUSH
5157: LD_INT 234
5159: PPUSH
5160: CALL_OW 111
// end ;
5164: GO 5125
5166: POP
5167: POP
// if mech then
5168: LD_VAR 0 9
5172: IFFALSE 5377
// for i in mech do
5174: LD_ADDR_VAR 0 1
5178: PUSH
5179: LD_VAR 0 9
5183: PUSH
5184: FOR_IN
5185: IFFALSE 5375
// begin hasVehicle := IsInUnit ( i ) ;
5187: LD_ADDR_VAR 0 11
5191: PUSH
5192: LD_VAR 0 1
5196: PPUSH
5197: CALL_OW 310
5201: ST_TO_ADDR
// if enemyInBase then
5202: LD_VAR 0 10
5206: IFFALSE 5293
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5208: LD_VAR 0 11
5212: PUSH
5213: LD_VAR 0 11
5217: PPUSH
5218: CALL_OW 256
5222: PUSH
5223: LD_INT 500
5225: GREATER
5226: AND
5227: IFFALSE 5255
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5229: LD_VAR 0 11
5233: PPUSH
5234: LD_VAR 0 10
5238: PPUSH
5239: LD_VAR 0 11
5243: PPUSH
5244: CALL_OW 74
5248: PPUSH
5249: CALL_OW 115
5253: GO 5291
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5255: LD_VAR 0 11
5259: PPUSH
5260: LD_INT 333
5262: PPUSH
5263: LD_INT 234
5265: PPUSH
5266: CALL_OW 297
5270: PUSH
5271: LD_INT 6
5273: GREATER
5274: IFFALSE 5291
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5276: LD_VAR 0 11
5280: PPUSH
5281: LD_INT 333
5283: PPUSH
5284: LD_INT 234
5286: PPUSH
5287: CALL_OW 111
// end else
5291: GO 5373
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5293: LD_VAR 0 1
5297: PPUSH
5298: LD_INT 333
5300: PPUSH
5301: LD_INT 234
5303: PPUSH
5304: CALL_OW 297
5308: PUSH
5309: LD_INT 6
5311: GREATER
5312: IFFALSE 5331
// ComMoveXY ( i , 333 , 234 ) else
5314: LD_VAR 0 1
5318: PPUSH
5319: LD_INT 333
5321: PPUSH
5322: LD_INT 234
5324: PPUSH
5325: CALL_OW 111
5329: GO 5373
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5331: LD_VAR 0 11
5335: PUSH
5336: LD_VAR 0 11
5340: PPUSH
5341: CALL_OW 256
5345: PUSH
5346: LD_INT 1000
5348: LESS
5349: AND
5350: IFFALSE 5373
// begin SetFuel ( hasVehicle , 100 ) ;
5352: LD_VAR 0 11
5356: PPUSH
5357: LD_INT 100
5359: PPUSH
5360: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5364: LD_VAR 0 1
5368: PPUSH
5369: CALL 64359 0 1
// end ; end ; end ;
5373: GO 5184
5375: POP
5376: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5377: LD_ADDR_VAR 0 5
5381: PUSH
5382: LD_INT 14
5384: PPUSH
5385: LD_INT 3
5387: PUSH
5388: LD_INT 24
5390: PUSH
5391: LD_INT 1000
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: LD_INT 21
5404: PUSH
5405: LD_INT 3
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PPUSH
5416: CALL_OW 70
5420: ST_TO_ADDR
// if tmp and eng then
5421: LD_VAR 0 5
5425: PUSH
5426: LD_VAR 0 7
5430: AND
5431: IFFALSE 5537
// begin for i in eng do
5433: LD_ADDR_VAR 0 1
5437: PUSH
5438: LD_VAR 0 7
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5535
// if IsInUnit ( i ) then
5446: LD_VAR 0 1
5450: PPUSH
5451: CALL_OW 310
5455: IFFALSE 5468
// ComExitBuilding ( i ) else
5457: LD_VAR 0 1
5461: PPUSH
5462: CALL_OW 122
5466: GO 5533
// if GetLives ( i ) = 1000 then
5468: LD_VAR 0 1
5472: PPUSH
5473: CALL_OW 256
5477: PUSH
5478: LD_INT 1000
5480: EQUAL
5481: IFFALSE 5503
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5483: LD_VAR 0 1
5487: PPUSH
5488: LD_VAR 0 5
5492: PUSH
5493: LD_INT 1
5495: ARRAY
5496: PPUSH
5497: CALL_OW 130
5501: GO 5533
// if GetLives ( i ) < 700 then
5503: LD_VAR 0 1
5507: PPUSH
5508: CALL_OW 256
5512: PUSH
5513: LD_INT 700
5515: LESS
5516: IFFALSE 5533
// ComMoveXY ( i , 333 , 234 ) ;
5518: LD_VAR 0 1
5522: PPUSH
5523: LD_INT 333
5525: PPUSH
5526: LD_INT 234
5528: PPUSH
5529: CALL_OW 111
5533: GO 5443
5535: POP
5536: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5537: LD_VAR 0 5
5541: NOT
5542: PUSH
5543: LD_VAR 0 7
5547: PPUSH
5548: LD_INT 3
5550: PUSH
5551: LD_INT 54
5553: PUSH
5554: EMPTY
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 72
5565: AND
5566: IFFALSE 5655
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5568: LD_ADDR_VAR 0 1
5572: PUSH
5573: LD_VAR 0 7
5577: PPUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 54
5583: PUSH
5584: EMPTY
5585: LIST
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PPUSH
5591: CALL_OW 72
5595: PUSH
5596: FOR_IN
5597: IFFALSE 5653
// if GetLives ( i ) < 1000 then
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 256
5608: PUSH
5609: LD_INT 1000
5611: LESS
5612: IFFALSE 5631
// ComMoveXY ( i , 333 , 234 ) else
5614: LD_VAR 0 1
5618: PPUSH
5619: LD_INT 333
5621: PPUSH
5622: LD_INT 234
5624: PPUSH
5625: CALL_OW 111
5629: GO 5651
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5631: LD_VAR 0 1
5635: PPUSH
5636: LD_INT 341
5638: PPUSH
5639: LD_INT 232
5641: PPUSH
5642: CALL_OW 428
5646: PPUSH
5647: CALL_OW 120
5651: GO 5596
5653: POP
5654: POP
// end ;
5655: PPOPN 11
5657: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5658: LD_EXP 40
5662: PPUSH
5663: CALL_OW 256
5667: PUSH
5668: LD_INT 1000
5670: LESS
5671: IFFALSE 5689
5673: GO 5675
5675: DISABLE
// begin enable ;
5676: ENABLE
// SetLives ( Omar , 1000 ) ;
5677: LD_EXP 40
5681: PPUSH
5682: LD_INT 1000
5684: PPUSH
5685: CALL_OW 234
// end ;
5689: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5690: LD_EXP 23
5694: IFFALSE 6570
5696: GO 5698
5698: DISABLE
5699: LD_INT 0
5701: PPUSH
5702: PPUSH
// begin wait ( 0 0$25 ) ;
5703: LD_INT 875
5705: PPUSH
5706: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5710: LD_EXP 48
5714: PPUSH
5715: LD_INT 2
5717: PUSH
5718: LD_INT 25
5720: PUSH
5721: LD_INT 1
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 25
5730: PUSH
5731: LD_INT 8
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 72
5747: PPUSH
5748: CALL_OW 122
// wait ( 0 0$3 ) ;
5752: LD_INT 105
5754: PPUSH
5755: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5759: LD_EXP 48
5763: PUSH
5764: LD_EXP 40
5768: UNION
5769: PPUSH
5770: LD_INT 225
5772: PPUSH
5773: LD_INT 223
5775: PPUSH
5776: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5780: LD_INT 22
5782: PUSH
5783: LD_INT 5
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: LD_INT 2
5792: PUSH
5793: LD_INT 25
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 25
5805: PUSH
5806: LD_INT 8
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 21
5815: PUSH
5816: LD_INT 2
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PPUSH
5833: CALL_OW 69
5837: PPUSH
5838: LD_INT 167
5840: PPUSH
5841: LD_INT 231
5843: PPUSH
5844: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5848: LD_EXP 48
5852: PPUSH
5853: LD_INT 25
5855: PUSH
5856: LD_INT 4
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PPUSH
5863: CALL_OW 72
5867: PPUSH
5868: LD_INT 222
5870: PPUSH
5871: LD_INT 229
5873: PPUSH
5874: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5878: LD_INT 35
5880: PPUSH
5881: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5885: LD_ADDR_VAR 0 1
5889: PUSH
5890: LD_EXP 48
5894: PUSH
5895: LD_INT 22
5897: PUSH
5898: LD_INT 5
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 21
5907: PUSH
5908: LD_INT 2
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PPUSH
5919: CALL_OW 69
5923: UNION
5924: PUSH
5925: FOR_IN
5926: IFFALSE 6561
// begin if IsDead ( i ) then
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 301
5937: IFFALSE 5957
// begin omarSquad := omarSquad diff i ;
5939: LD_ADDR_EXP 48
5943: PUSH
5944: LD_EXP 48
5948: PUSH
5949: LD_VAR 0 1
5953: DIFF
5954: ST_TO_ADDR
// continue ;
5955: GO 5925
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5957: LD_VAR 0 1
5961: PPUSH
5962: CALL_OW 257
5966: PUSH
5967: LD_INT 1
5969: PUSH
5970: LD_INT 8
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: IN
5977: IFFALSE 6171
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 256
5988: PUSH
5989: LD_INT 700
5991: LESS
5992: PUSH
5993: LD_VAR 0 1
5997: PPUSH
5998: CALL_OW 110
6002: PUSH
6003: LD_INT 0
6005: EQUAL
6006: AND
6007: IFFALSE 6036
// begin SetTag ( i , 1 ) ;
6009: LD_VAR 0 1
6013: PPUSH
6014: LD_INT 1
6016: PPUSH
6017: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
6021: LD_VAR 0 1
6025: PPUSH
6026: LD_INT 222
6028: PPUSH
6029: LD_INT 229
6031: PPUSH
6032: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 256
6045: PUSH
6046: LD_INT 1000
6048: EQUAL
6049: PUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: CALL_OW 110
6059: PUSH
6060: LD_INT 1
6062: EQUAL
6063: AND
6064: IFFALSE 6078
// SetTag ( i , 0 ) ;
6066: LD_VAR 0 1
6070: PPUSH
6071: LD_INT 0
6073: PPUSH
6074: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6078: LD_VAR 0 1
6082: PPUSH
6083: CALL_OW 110
6087: PUSH
6088: LD_INT 0
6090: EQUAL
6091: PUSH
6092: LD_VAR 0 1
6096: PPUSH
6097: CALL_OW 256
6101: PUSH
6102: LD_INT 700
6104: GREATEREQUAL
6105: AND
6106: PUSH
6107: LD_VAR 0 1
6111: PPUSH
6112: CALL_OW 314
6116: NOT
6117: AND
6118: IFFALSE 6171
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6120: LD_INT 18
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 3
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: IFFALSE 6156
// ComAgressiveMove ( i , 167 , 231 ) else
6139: LD_VAR 0 1
6143: PPUSH
6144: LD_INT 167
6146: PPUSH
6147: LD_INT 231
6149: PPUSH
6150: CALL_OW 114
6154: GO 6171
// ComAgressiveMove ( i , 106 , 153 ) ;
6156: LD_VAR 0 1
6160: PPUSH
6161: LD_INT 106
6163: PPUSH
6164: LD_INT 153
6166: PPUSH
6167: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6171: LD_VAR 0 1
6175: PPUSH
6176: CALL_OW 247
6180: PUSH
6181: LD_INT 2
6183: EQUAL
6184: IFFALSE 6559
// begin nearestPoint := [ 219 , 219 ] ;
6186: LD_ADDR_VAR 0 2
6190: PUSH
6191: LD_INT 219
6193: PUSH
6194: LD_INT 219
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6201: LD_VAR 0 1
6205: PPUSH
6206: LD_INT 156
6208: PPUSH
6209: LD_INT 202
6211: PPUSH
6212: CALL_OW 297
6216: PUSH
6217: LD_VAR 0 1
6221: PPUSH
6222: LD_INT 219
6224: PPUSH
6225: LD_INT 219
6227: PPUSH
6228: CALL_OW 297
6232: LESS
6233: IFFALSE 6250
// nearestPoint := [ 156 , 202 ] ;
6235: LD_ADDR_VAR 0 2
6239: PUSH
6240: LD_INT 156
6242: PUSH
6243: LD_INT 202
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6250: LD_VAR 0 1
6254: PPUSH
6255: CALL_OW 256
6259: PUSH
6260: LD_INT 700
6262: LESS
6263: PUSH
6264: LD_VAR 0 1
6268: PPUSH
6269: CALL_OW 110
6273: PUSH
6274: LD_INT 0
6276: EQUAL
6277: AND
6278: IFFALSE 6319
// begin SetTag ( i , 1 ) ;
6280: LD_VAR 0 1
6284: PPUSH
6285: LD_INT 1
6287: PPUSH
6288: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6292: LD_VAR 0 1
6296: PPUSH
6297: LD_VAR 0 2
6301: PUSH
6302: LD_INT 1
6304: ARRAY
6305: PPUSH
6306: LD_VAR 0 2
6310: PUSH
6311: LD_INT 2
6313: ARRAY
6314: PPUSH
6315: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 256
6328: PUSH
6329: LD_INT 700
6331: LESS
6332: PUSH
6333: LD_VAR 0 1
6337: PPUSH
6338: CALL_OW 110
6342: PUSH
6343: LD_INT 1
6345: EQUAL
6346: AND
6347: PUSH
6348: LD_VAR 0 1
6352: PPUSH
6353: CALL_OW 311
6357: AND
6358: PUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: LD_VAR 0 2
6368: PUSH
6369: LD_INT 1
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 2
6377: PUSH
6378: LD_INT 2
6380: ARRAY
6381: PPUSH
6382: CALL_OW 297
6386: PUSH
6387: LD_INT 10
6389: LESS
6390: AND
6391: IFFALSE 6402
// ComRepairVehicleAndReturn ( i ) ;
6393: LD_VAR 0 1
6397: PPUSH
6398: CALL 64359 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6402: LD_VAR 0 1
6406: PPUSH
6407: CALL_OW 256
6411: PUSH
6412: LD_INT 1000
6414: EQUAL
6415: PUSH
6416: LD_VAR 0 1
6420: PPUSH
6421: CALL_OW 110
6425: PUSH
6426: LD_INT 1
6428: EQUAL
6429: AND
6430: PUSH
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 311
6440: AND
6441: IFFALSE 6455
// SetTag ( i , 0 ) ;
6443: LD_VAR 0 1
6447: PPUSH
6448: LD_INT 0
6450: PPUSH
6451: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6455: LD_VAR 0 1
6459: PPUSH
6460: CALL_OW 110
6464: PUSH
6465: LD_INT 0
6467: EQUAL
6468: PUSH
6469: LD_VAR 0 1
6473: PPUSH
6474: CALL_OW 256
6478: PUSH
6479: LD_INT 700
6481: GREATEREQUAL
6482: AND
6483: PUSH
6484: LD_VAR 0 1
6488: PPUSH
6489: CALL_OW 311
6493: AND
6494: PUSH
6495: LD_VAR 0 1
6499: PPUSH
6500: CALL_OW 314
6504: NOT
6505: AND
6506: IFFALSE 6559
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6508: LD_INT 18
6510: PPUSH
6511: LD_INT 22
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PPUSH
6521: CALL_OW 70
6525: IFFALSE 6544
// ComAgressiveMove ( i , 167 , 231 ) else
6527: LD_VAR 0 1
6531: PPUSH
6532: LD_INT 167
6534: PPUSH
6535: LD_INT 231
6537: PPUSH
6538: CALL_OW 114
6542: GO 6559
// ComAgressiveMove ( i , 106 , 153 ) ;
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 106
6551: PPUSH
6552: LD_INT 153
6554: PPUSH
6555: CALL_OW 114
// end ; end ;
6559: GO 5925
6561: POP
6562: POP
// until not omarSquad ;
6563: LD_EXP 48
6567: NOT
6568: IFFALSE 5878
// end ; end_of_file
6570: PPOPN 2
6572: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6573: LD_INT 0
6575: PPUSH
// uc_side := side ;
6576: LD_ADDR_OWVAR 20
6580: PUSH
6581: LD_VAR 0 1
6585: ST_TO_ADDR
// uc_nation := nation ;
6586: LD_ADDR_OWVAR 21
6590: PUSH
6591: LD_VAR 0 2
6595: ST_TO_ADDR
// vc_chassis := chassis ;
6596: LD_ADDR_OWVAR 37
6600: PUSH
6601: LD_VAR 0 3
6605: ST_TO_ADDR
// vc_engine := engine ;
6606: LD_ADDR_OWVAR 39
6610: PUSH
6611: LD_VAR 0 4
6615: ST_TO_ADDR
// vc_control := control ;
6616: LD_ADDR_OWVAR 38
6620: PUSH
6621: LD_VAR 0 5
6625: ST_TO_ADDR
// vc_weapon := weapon ;
6626: LD_ADDR_OWVAR 40
6630: PUSH
6631: LD_VAR 0 6
6635: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6636: LD_ADDR_OWVAR 41
6640: PUSH
6641: LD_VAR 0 7
6645: ST_TO_ADDR
// result := CreateVehicle ;
6646: LD_ADDR_VAR 0 8
6650: PUSH
6651: CALL_OW 45
6655: ST_TO_ADDR
// end ;
6656: LD_VAR 0 8
6660: RET
// export function SayX ( units , ident ) ; var i ; begin
6661: LD_INT 0
6663: PPUSH
6664: PPUSH
// result := false ;
6665: LD_ADDR_VAR 0 3
6669: PUSH
6670: LD_INT 0
6672: ST_TO_ADDR
// if not units then
6673: LD_VAR 0 1
6677: NOT
6678: IFFALSE 6682
// exit ;
6680: GO 6736
// for i in units do
6682: LD_ADDR_VAR 0 4
6686: PUSH
6687: LD_VAR 0 1
6691: PUSH
6692: FOR_IN
6693: IFFALSE 6734
// if IsOk ( i ) then
6695: LD_VAR 0 4
6699: PPUSH
6700: CALL_OW 302
6704: IFFALSE 6732
// begin Say ( i , ident ) ;
6706: LD_VAR 0 4
6710: PPUSH
6711: LD_VAR 0 2
6715: PPUSH
6716: CALL_OW 88
// result := i ;
6720: LD_ADDR_VAR 0 3
6724: PUSH
6725: LD_VAR 0 4
6729: ST_TO_ADDR
// break ;
6730: GO 6734
// end ;
6732: GO 6692
6734: POP
6735: POP
// end ;
6736: LD_VAR 0 3
6740: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6741: LD_INT 0
6743: PPUSH
6744: PPUSH
// InitUc ;
6745: CALL_OW 18
// InitHc ;
6749: CALL_OW 19
// uc_side := 0 ;
6753: LD_ADDR_OWVAR 20
6757: PUSH
6758: LD_INT 0
6760: ST_TO_ADDR
// uc_nation := 0 ;
6761: LD_ADDR_OWVAR 21
6765: PUSH
6766: LD_INT 0
6768: ST_TO_ADDR
// for i = 1 to amount do
6769: LD_ADDR_VAR 0 4
6773: PUSH
6774: DOUBLE
6775: LD_INT 1
6777: DEC
6778: ST_TO_ADDR
6779: LD_VAR 0 2
6783: PUSH
6784: FOR_TO
6785: IFFALSE 6867
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6787: LD_ADDR_OWVAR 29
6791: PUSH
6792: LD_INT 9
6794: PPUSH
6795: LD_INT 12
6797: PPUSH
6798: CALL_OW 12
6802: PUSH
6803: LD_INT 9
6805: PPUSH
6806: LD_INT 12
6808: PPUSH
6809: CALL_OW 12
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6818: LD_ADDR_OWVAR 35
6822: PUSH
6823: LD_INT 1
6825: NEG
6826: PPUSH
6827: LD_INT 1
6829: PPUSH
6830: CALL_OW 12
6834: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6835: LD_INT 0
6837: PPUSH
6838: LD_INT 12
6840: PPUSH
6841: LD_INT 1
6843: PPUSH
6844: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6848: CALL_OW 44
6852: PPUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: LD_INT 0
6860: PPUSH
6861: CALL_OW 49
// end ;
6865: GO 6784
6867: POP
6868: POP
// InitHc ;
6869: CALL_OW 19
// end ;
6873: LD_VAR 0 3
6877: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6878: LD_INT 0
6880: PPUSH
6881: PPUSH
// uc_side := 0 ;
6882: LD_ADDR_OWVAR 20
6886: PUSH
6887: LD_INT 0
6889: ST_TO_ADDR
// uc_nation := 0 ;
6890: LD_ADDR_OWVAR 21
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
6898: LD_INT 7
6900: PPUSH
6901: LD_INT 6
6903: PUSH
6904: LD_INT 5
6906: PUSH
6907: LD_INT 4
6909: PUSH
6910: LD_INT 3
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: PUSH
6919: LD_OWVAR 67
6923: ARRAY
6924: PPUSH
6925: CALL 6741 0 2
// for i = 1 to 2 do
6929: LD_ADDR_VAR 0 4
6933: PUSH
6934: DOUBLE
6935: LD_INT 1
6937: DEC
6938: ST_TO_ADDR
6939: LD_INT 2
6941: PUSH
6942: FOR_TO
6943: IFFALSE 6980
// begin vc_chassis := class_mastodont ;
6945: LD_ADDR_OWVAR 37
6949: PUSH
6950: LD_INT 31
6952: ST_TO_ADDR
// vc_control := control_rider ;
6953: LD_ADDR_OWVAR 38
6957: PUSH
6958: LD_INT 4
6960: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6961: CALL_OW 45
6965: PPUSH
6966: LD_VAR 0 1
6970: PPUSH
6971: LD_INT 0
6973: PPUSH
6974: CALL 61576 0 3
// end ;
6978: GO 6942
6980: POP
6981: POP
// for i := 1 to 4 do
6982: LD_ADDR_VAR 0 4
6986: PUSH
6987: DOUBLE
6988: LD_INT 1
6990: DEC
6991: ST_TO_ADDR
6992: LD_INT 4
6994: PUSH
6995: FOR_TO
6996: IFFALSE 7033
// begin hc_class := class_horse ;
6998: LD_ADDR_OWVAR 28
7002: PUSH
7003: LD_INT 21
7005: ST_TO_ADDR
// hc_gallery :=  ;
7006: LD_ADDR_OWVAR 33
7010: PUSH
7011: LD_STRING 
7013: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7014: CALL_OW 44
7018: PPUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: LD_INT 0
7026: PPUSH
7027: CALL_OW 49
// end ;
7031: GO 6995
7033: POP
7034: POP
// for i = 1 to 5 do
7035: LD_ADDR_VAR 0 4
7039: PUSH
7040: DOUBLE
7041: LD_INT 1
7043: DEC
7044: ST_TO_ADDR
7045: LD_INT 5
7047: PUSH
7048: FOR_TO
7049: IFFALSE 7103
// begin hc_class = class_tiger ;
7051: LD_ADDR_OWVAR 28
7055: PUSH
7056: LD_INT 14
7058: ST_TO_ADDR
// hc_gallery =  ;
7059: LD_ADDR_OWVAR 33
7063: PUSH
7064: LD_STRING 
7066: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7067: LD_ADDR_OWVAR 35
7071: PUSH
7072: LD_INT 7
7074: NEG
7075: PPUSH
7076: LD_INT 7
7078: PPUSH
7079: CALL_OW 12
7083: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7084: CALL_OW 44
7088: PPUSH
7089: LD_VAR 0 1
7093: PPUSH
7094: LD_INT 0
7096: PPUSH
7097: CALL 61576 0 3
// end ;
7101: GO 7048
7103: POP
7104: POP
// for i := 1 to 4 do
7105: LD_ADDR_VAR 0 4
7109: PUSH
7110: DOUBLE
7111: LD_INT 1
7113: DEC
7114: ST_TO_ADDR
7115: LD_INT 4
7117: PUSH
7118: FOR_TO
7119: IFFALSE 7156
// begin hc_class := class_phororhacos ;
7121: LD_ADDR_OWVAR 28
7125: PUSH
7126: LD_INT 18
7128: ST_TO_ADDR
// hc_gallery :=  ;
7129: LD_ADDR_OWVAR 33
7133: PUSH
7134: LD_STRING 
7136: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7137: CALL_OW 44
7141: PPUSH
7142: LD_VAR 0 1
7146: PPUSH
7147: LD_INT 0
7149: PPUSH
7150: CALL_OW 49
// end ;
7154: GO 7118
7156: POP
7157: POP
// for i := 1 to 4 do
7158: LD_ADDR_VAR 0 4
7162: PUSH
7163: DOUBLE
7164: LD_INT 1
7166: DEC
7167: ST_TO_ADDR
7168: LD_INT 4
7170: PUSH
7171: FOR_TO
7172: IFFALSE 7209
// begin hc_class := class_baggie ;
7174: LD_ADDR_OWVAR 28
7178: PUSH
7179: LD_INT 13
7181: ST_TO_ADDR
// hc_gallery :=  ;
7182: LD_ADDR_OWVAR 33
7186: PUSH
7187: LD_STRING 
7189: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7190: CALL_OW 44
7194: PPUSH
7195: LD_VAR 0 1
7199: PPUSH
7200: LD_INT 0
7202: PPUSH
7203: CALL_OW 49
// end ;
7207: GO 7171
7209: POP
7210: POP
// for i := 1 to 7 do
7211: LD_ADDR_VAR 0 4
7215: PUSH
7216: DOUBLE
7217: LD_INT 1
7219: DEC
7220: ST_TO_ADDR
7221: LD_INT 7
7223: PUSH
7224: FOR_TO
7225: IFFALSE 7262
// begin hc_class := class_frog ;
7227: LD_ADDR_OWVAR 28
7231: PUSH
7232: LD_INT 19
7234: ST_TO_ADDR
// hc_gallery :=  ;
7235: LD_ADDR_OWVAR 33
7239: PUSH
7240: LD_STRING 
7242: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7243: CALL_OW 44
7247: PPUSH
7248: LD_VAR 0 2
7252: PPUSH
7253: LD_INT 0
7255: PPUSH
7256: CALL_OW 49
// end ;
7260: GO 7224
7262: POP
7263: POP
// end ;
7264: LD_VAR 0 3
7268: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7269: LD_INT 0
7271: PPUSH
7272: PPUSH
7273: PPUSH
// if not observer or not unit then
7274: LD_VAR 0 1
7278: NOT
7279: PUSH
7280: LD_VAR 0 2
7284: NOT
7285: OR
7286: IFFALSE 7290
// exit ;
7288: GO 7338
// if not See ( GetSide ( observer ) , unit ) then
7290: LD_VAR 0 1
7294: PPUSH
7295: CALL_OW 255
7299: PPUSH
7300: LD_VAR 0 2
7304: PPUSH
7305: CALL_OW 292
7309: NOT
7310: IFFALSE 7314
// exit ;
7312: GO 7338
// result := GetDistUnits ( observer , unit ) < 12 ;
7314: LD_ADDR_VAR 0 3
7318: PUSH
7319: LD_VAR 0 1
7323: PPUSH
7324: LD_VAR 0 2
7328: PPUSH
7329: CALL_OW 296
7333: PUSH
7334: LD_INT 12
7336: LESS
7337: ST_TO_ADDR
// end ;
7338: LD_VAR 0 3
7342: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7343: LD_INT 0
7345: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7346: LD_VAR 0 2
7350: PUSH
7351: LD_INT 1
7353: ARRAY
7354: PPUSH
7355: LD_VAR 0 2
7359: PUSH
7360: LD_INT 2
7362: ARRAY
7363: PPUSH
7364: CALL_OW 488
7368: PUSH
7369: LD_VAR 0 2
7373: PUSH
7374: LD_INT 1
7376: ARRAY
7377: PPUSH
7378: LD_VAR 0 2
7382: PUSH
7383: LD_INT 2
7385: ARRAY
7386: PPUSH
7387: CALL_OW 428
7391: PUSH
7392: LD_INT 0
7394: EQUAL
7395: AND
7396: IFFALSE 7430
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7398: LD_VAR 0 1
7402: PPUSH
7403: LD_VAR 0 2
7407: PUSH
7408: LD_INT 1
7410: ARRAY
7411: PPUSH
7412: LD_VAR 0 2
7416: PUSH
7417: LD_INT 2
7419: ARRAY
7420: PPUSH
7421: LD_VAR 0 3
7425: PPUSH
7426: CALL_OW 48
// end ;
7430: LD_VAR 0 4
7434: RET
// export function ReverseArray ( array ) ; var i ; begin
7435: LD_INT 0
7437: PPUSH
7438: PPUSH
// if not array then
7439: LD_VAR 0 1
7443: NOT
7444: IFFALSE 7448
// exit ;
7446: GO 7506
// result := [ ] ;
7448: LD_ADDR_VAR 0 2
7452: PUSH
7453: EMPTY
7454: ST_TO_ADDR
// for i := 1 to array do
7455: LD_ADDR_VAR 0 3
7459: PUSH
7460: DOUBLE
7461: LD_INT 1
7463: DEC
7464: ST_TO_ADDR
7465: LD_VAR 0 1
7469: PUSH
7470: FOR_TO
7471: IFFALSE 7504
// result := Insert ( result , 1 , array [ i ] ) ;
7473: LD_ADDR_VAR 0 2
7477: PUSH
7478: LD_VAR 0 2
7482: PPUSH
7483: LD_INT 1
7485: PPUSH
7486: LD_VAR 0 1
7490: PUSH
7491: LD_VAR 0 3
7495: ARRAY
7496: PPUSH
7497: CALL_OW 2
7501: ST_TO_ADDR
7502: GO 7470
7504: POP
7505: POP
// end ;
7506: LD_VAR 0 2
7510: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7511: LD_INT 0
7513: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: LD_VAR 0 3
7528: PPUSH
7529: LD_VAR 0 4
7533: PPUSH
7534: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7538: LD_VAR 0 1
7542: PPUSH
7543: LD_VAR 0 2
7547: PPUSH
7548: LD_VAR 0 3
7552: PPUSH
7553: CALL_OW 331
// end ;
7557: LD_VAR 0 5
7561: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7562: LD_INT 0
7564: PPUSH
// if not units then
7565: LD_VAR 0 1
7569: NOT
7570: IFFALSE 7574
// exit ;
7572: GO 7657
// result := true ;
7574: LD_ADDR_VAR 0 4
7578: PUSH
7579: LD_INT 1
7581: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7582: LD_VAR 0 1
7586: PPUSH
7587: LD_INT 26
7589: PUSH
7590: LD_INT 1
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PPUSH
7597: CALL_OW 72
7601: PUSH
7602: LD_INT 1
7604: ARRAY
7605: PPUSH
7606: LD_VAR 0 2
7610: PPUSH
7611: CALL_OW 88
7615: NOT
7616: IFFALSE 7657
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7618: LD_ADDR_VAR 0 4
7622: PUSH
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_INT 26
7630: PUSH
7631: LD_INT 2
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 72
7642: PUSH
7643: LD_INT 1
7645: ARRAY
7646: PPUSH
7647: LD_VAR 0 3
7651: PPUSH
7652: CALL_OW 88
7656: ST_TO_ADDR
// end ;
7657: LD_VAR 0 4
7661: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
// if not group then
7666: LD_VAR 0 2
7670: NOT
7671: IFFALSE 7675
// exit ;
7673: GO 7720
// for i in group do
7675: LD_ADDR_VAR 0 4
7679: PUSH
7680: LD_VAR 0 2
7684: PUSH
7685: FOR_IN
7686: IFFALSE 7718
// if See ( side , i ) then
7688: LD_VAR 0 1
7692: PPUSH
7693: LD_VAR 0 4
7697: PPUSH
7698: CALL_OW 292
7702: IFFALSE 7716
// begin result := true ;
7704: LD_ADDR_VAR 0 3
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// exit ;
7712: POP
7713: POP
7714: GO 7720
// end ;
7716: GO 7685
7718: POP
7719: POP
// end ; end_of_file
7720: LD_VAR 0 3
7724: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7725: LD_INT 0
7727: PPUSH
7728: PPUSH
7729: PPUSH
7730: PPUSH
7731: PPUSH
7732: PPUSH
7733: PPUSH
// uc_side := 3 ;
7734: LD_ADDR_OWVAR 20
7738: PUSH
7739: LD_INT 3
7741: ST_TO_ADDR
// uc_nation := 3 ;
7742: LD_ADDR_OWVAR 21
7746: PUSH
7747: LD_INT 3
7749: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7750: LD_ADDR_EXP 49
7754: PUSH
7755: LD_STRING Morozov
7757: PPUSH
7758: CALL_OW 25
7762: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7763: LD_EXP 49
7767: PPUSH
7768: LD_INT 52
7770: PPUSH
7771: CALL_OW 52
// if not gaidarKilled then
7775: LD_EXP 7
7779: NOT
7780: IFFALSE 7813
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7782: LD_ADDR_EXP 50
7786: PUSH
7787: LD_STRING Gaydar
7789: PPUSH
7790: LD_INT 0
7792: PPUSH
7793: LD_STRING 
7795: PPUSH
7796: CALL 25283 0 3
7800: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7801: LD_EXP 50
7805: PPUSH
7806: LD_INT 52
7808: PPUSH
7809: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7813: LD_INT 52
7815: PPUSH
7816: LD_STRING lenin
7818: PPUSH
7819: CALL_OW 500
// ruOutsiders := [ ] ;
7823: LD_ADDR_EXP 52
7827: PUSH
7828: EMPTY
7829: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7830: LD_ADDR_EXP 54
7834: PUSH
7835: EMPTY
7836: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7837: LD_ADDR_EXP 55
7841: PUSH
7842: EMPTY
7843: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7844: LD_ADDR_EXP 56
7848: PUSH
7849: EMPTY
7850: ST_TO_ADDR
// ruAttackers := [ ] ;
7851: LD_ADDR_EXP 57
7855: PUSH
7856: EMPTY
7857: ST_TO_ADDR
// waveStrength := 0 ;
7858: LD_ADDR_EXP 58
7862: PUSH
7863: LD_INT 0
7865: ST_TO_ADDR
// if not gaidarKilled then
7866: LD_EXP 7
7870: NOT
7871: IFFALSE 7881
// waveStrength := 2 ;
7873: LD_ADDR_EXP 58
7877: PUSH
7878: LD_INT 2
7880: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7881: LD_ADDR_VAR 0 7
7885: PUSH
7886: LD_INT 22
7888: PUSH
7889: LD_INT 3
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PUSH
7896: LD_INT 21
7898: PUSH
7899: LD_INT 3
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PPUSH
7910: CALL_OW 69
7914: ST_TO_ADDR
// for i in tmp do
7915: LD_ADDR_VAR 0 2
7919: PUSH
7920: LD_VAR 0 7
7924: PUSH
7925: FOR_IN
7926: IFFALSE 7963
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
7928: LD_VAR 0 2
7932: PPUSH
7933: LD_INT 5
7935: PUSH
7936: LD_INT 6
7938: PUSH
7939: LD_INT 7
7941: PUSH
7942: LD_INT 8
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: PUSH
7951: LD_OWVAR 67
7955: ARRAY
7956: PPUSH
7957: CALL_OW 241
7961: GO 7925
7963: POP
7964: POP
// for i := 1 to 3 do
7965: LD_ADDR_VAR 0 2
7969: PUSH
7970: DOUBLE
7971: LD_INT 1
7973: DEC
7974: ST_TO_ADDR
7975: LD_INT 3
7977: PUSH
7978: FOR_TO
7979: IFFALSE 8017
// begin PrepareHuman ( false , 1 , 0 ) ;
7981: LD_INT 0
7983: PPUSH
7984: LD_INT 1
7986: PPUSH
7987: LD_INT 0
7989: PPUSH
7990: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
7994: CALL_OW 44
7998: PPUSH
7999: LD_INT 75
8001: PPUSH
8002: LD_INT 49
8004: PPUSH
8005: LD_INT 3
8007: PPUSH
8008: LD_INT 0
8010: PPUSH
8011: CALL_OW 50
// end ;
8015: GO 7978
8017: POP
8018: POP
// for i := 1 to 4 do
8019: LD_ADDR_VAR 0 2
8023: PUSH
8024: DOUBLE
8025: LD_INT 1
8027: DEC
8028: ST_TO_ADDR
8029: LD_INT 4
8031: PUSH
8032: FOR_TO
8033: IFFALSE 8079
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8035: LD_INT 0
8037: PPUSH
8038: LD_INT 1
8040: PPUSH
8041: LD_INT 2
8043: PPUSH
8044: CALL_OW 12
8048: PPUSH
8049: LD_INT 0
8051: PPUSH
8052: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8056: CALL_OW 44
8060: PPUSH
8061: LD_INT 330
8063: PPUSH
8064: LD_INT 231
8066: PPUSH
8067: LD_INT 5
8069: PPUSH
8070: LD_INT 0
8072: PPUSH
8073: CALL_OW 50
// end ;
8077: GO 8032
8079: POP
8080: POP
// hc_class := 1 ;
8081: LD_ADDR_OWVAR 28
8085: PUSH
8086: LD_INT 1
8088: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8089: CALL_OW 44
8093: PPUSH
8094: LD_INT 324
8096: PPUSH
8097: LD_INT 219
8099: PPUSH
8100: CALL_OW 428
8104: PPUSH
8105: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8109: CALL_OW 44
8113: PPUSH
8114: LD_INT 316
8116: PPUSH
8117: LD_INT 223
8119: PPUSH
8120: CALL_OW 428
8124: PPUSH
8125: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8129: LD_ADDR_VAR 0 7
8133: PUSH
8134: LD_INT 172
8136: PPUSH
8137: LD_INT 198
8139: PPUSH
8140: CALL_OW 428
8144: PPUSH
8145: CALL_OW 274
8149: PUSH
8150: LD_INT 189
8152: PPUSH
8153: LD_INT 156
8155: PPUSH
8156: CALL_OW 428
8160: PPUSH
8161: CALL_OW 274
8165: PUSH
8166: LD_INT 341
8168: PPUSH
8169: LD_INT 232
8171: PPUSH
8172: CALL_OW 428
8176: PPUSH
8177: CALL_OW 274
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: LIST
8186: ST_TO_ADDR
// for i in tmp do
8187: LD_ADDR_VAR 0 2
8191: PUSH
8192: LD_VAR 0 7
8196: PUSH
8197: FOR_IN
8198: IFFALSE 8232
// begin SetResourceType ( i , mat_cans , 200 ) ;
8200: LD_VAR 0 2
8204: PPUSH
8205: LD_INT 1
8207: PPUSH
8208: LD_INT 200
8210: PPUSH
8211: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8215: LD_VAR 0 2
8219: PPUSH
8220: LD_INT 2
8222: PPUSH
8223: LD_INT 200
8225: PPUSH
8226: CALL_OW 277
// end ;
8230: GO 8197
8232: POP
8233: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
8234: LD_ADDR_VAR 0 7
8238: PUSH
8239: LD_INT 177
8241: PUSH
8242: LD_INT 114
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 138
8251: PUSH
8252: LD_INT 96
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: ST_TO_ADDR
// for i := 1 to tmp do
8263: LD_ADDR_VAR 0 2
8267: PUSH
8268: DOUBLE
8269: LD_INT 1
8271: DEC
8272: ST_TO_ADDR
8273: LD_VAR 0 7
8277: PUSH
8278: FOR_TO
8279: IFFALSE 8362
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
8281: LD_INT 0
8283: PPUSH
8284: LD_INT 9
8286: PPUSH
8287: LD_INT 6
8289: PPUSH
8290: CALL_OW 380
// un := CreateHuman ;
8294: LD_ADDR_VAR 0 5
8298: PUSH
8299: CALL_OW 44
8303: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8304: LD_VAR 0 5
8308: PPUSH
8309: LD_INT 2
8311: PPUSH
8312: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
8316: LD_VAR 0 5
8320: PPUSH
8321: LD_VAR 0 7
8325: PUSH
8326: LD_VAR 0 2
8330: ARRAY
8331: PUSH
8332: LD_INT 1
8334: ARRAY
8335: PPUSH
8336: LD_VAR 0 7
8340: PUSH
8341: LD_VAR 0 2
8345: ARRAY
8346: PUSH
8347: LD_INT 2
8349: ARRAY
8350: PPUSH
8351: CALL_OW 428
8355: PPUSH
8356: CALL_OW 52
// end ;
8360: GO 8278
8362: POP
8363: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8364: LD_ADDR_VAR 0 7
8368: PUSH
8369: LD_INT 198
8371: PUSH
8372: LD_INT 158
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 203
8381: PUSH
8382: LD_INT 166
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 181
8391: PUSH
8392: LD_INT 209
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: LD_INT 178
8401: PUSH
8402: LD_INT 196
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 181
8411: PUSH
8412: LD_INT 212
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: ST_TO_ADDR
// for i := 1 to tmp do
8426: LD_ADDR_VAR 0 2
8430: PUSH
8431: DOUBLE
8432: LD_INT 1
8434: DEC
8435: ST_TO_ADDR
8436: LD_VAR 0 7
8440: PUSH
8441: FOR_TO
8442: IFFALSE 8563
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
8444: LD_INT 0
8446: PPUSH
8447: LD_INT 1
8449: PPUSH
8450: LD_INT 4
8452: PUSH
8453: LD_INT 5
8455: PUSH
8456: LD_INT 6
8458: PUSH
8459: LD_INT 7
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: PUSH
8468: LD_OWVAR 67
8472: ARRAY
8473: PPUSH
8474: CALL_OW 380
// un := CreateHuman ;
8478: LD_ADDR_VAR 0 5
8482: PUSH
8483: CALL_OW 44
8487: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8488: LD_ADDR_VAR 0 4
8492: PUSH
8493: LD_VAR 0 7
8497: PUSH
8498: LD_VAR 0 2
8502: ARRAY
8503: PUSH
8504: LD_INT 1
8506: ARRAY
8507: PPUSH
8508: LD_VAR 0 7
8512: PUSH
8513: LD_VAR 0 2
8517: ARRAY
8518: PUSH
8519: LD_INT 2
8521: ARRAY
8522: PPUSH
8523: CALL_OW 428
8527: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8528: LD_VAR 0 5
8532: PPUSH
8533: LD_VAR 0 4
8537: PPUSH
8538: CALL 57999 0 1
8542: PPUSH
8543: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8547: LD_VAR 0 5
8551: PPUSH
8552: LD_VAR 0 4
8556: PPUSH
8557: CALL_OW 52
// end ;
8561: GO 8441
8563: POP
8564: POP
// for i := 1 to 3 do
8565: LD_ADDR_VAR 0 2
8569: PUSH
8570: DOUBLE
8571: LD_INT 1
8573: DEC
8574: ST_TO_ADDR
8575: LD_INT 3
8577: PUSH
8578: FOR_TO
8579: IFFALSE 8634
// begin InitHc ;
8581: CALL_OW 19
// uc_nation := 0 ;
8585: LD_ADDR_OWVAR 21
8589: PUSH
8590: LD_INT 0
8592: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8593: LD_ADDR_OWVAR 28
8597: PUSH
8598: LD_INT 16
8600: ST_TO_ADDR
// un := CreateHuman ;
8601: LD_ADDR_VAR 0 5
8605: PUSH
8606: CALL_OW 44
8610: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8611: LD_VAR 0 5
8615: PPUSH
8616: LD_INT 194
8618: PPUSH
8619: LD_INT 164
8621: PPUSH
8622: LD_INT 6
8624: PPUSH
8625: LD_INT 0
8627: PPUSH
8628: CALL_OW 50
// end ;
8632: GO 8578
8634: POP
8635: POP
// uc_nation := 3 ;
8636: LD_ADDR_OWVAR 21
8640: PUSH
8641: LD_INT 3
8643: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8644: LD_INT 24
8646: PPUSH
8647: LD_INT 1
8649: PPUSH
8650: LD_INT 1
8652: PPUSH
8653: LD_INT 44
8655: PPUSH
8656: LD_INT 10
8658: PPUSH
8659: CALL 30298 0 5
// un := CreateVehicle ;
8663: LD_ADDR_VAR 0 5
8667: PUSH
8668: CALL_OW 45
8672: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8673: LD_VAR 0 5
8677: PPUSH
8678: LD_INT 199
8680: PPUSH
8681: LD_INT 162
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: LD_INT 0
8689: PPUSH
8690: CALL 64799 0 5
// ComHold ( un ) ;
8694: LD_VAR 0 5
8698: PPUSH
8699: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8703: LD_INT 0
8705: PPUSH
8706: LD_INT 3
8708: PPUSH
8709: LD_INT 4
8711: PPUSH
8712: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8716: CALL_OW 44
8720: PPUSH
8721: LD_VAR 0 5
8725: PPUSH
8726: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8730: LD_INT 24
8732: PPUSH
8733: LD_INT 1
8735: PPUSH
8736: LD_INT 1
8738: PPUSH
8739: LD_INT 45
8741: PPUSH
8742: LD_INT 10
8744: PPUSH
8745: CALL 30298 0 5
// un := CreateVehicle ;
8749: LD_ADDR_VAR 0 5
8753: PUSH
8754: CALL_OW 45
8758: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8759: LD_VAR 0 5
8763: PPUSH
8764: LD_INT 129
8766: PPUSH
8767: LD_INT 93
8769: PPUSH
8770: LD_INT 1
8772: PPUSH
8773: LD_INT 0
8775: PPUSH
8776: CALL 64799 0 5
// ComHold ( un ) ;
8780: LD_VAR 0 5
8784: PPUSH
8785: CALL_OW 140
// if Difficulty > 1 then
8789: LD_OWVAR 67
8793: PUSH
8794: LD_INT 1
8796: GREATER
8797: IFFALSE 8971
// begin PrepareHuman ( false , 3 , 4 ) ;
8799: LD_INT 0
8801: PPUSH
8802: LD_INT 3
8804: PPUSH
8805: LD_INT 4
8807: PPUSH
8808: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8812: CALL_OW 44
8816: PPUSH
8817: LD_VAR 0 5
8821: PPUSH
8822: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8826: LD_INT 24
8828: PPUSH
8829: LD_INT 1
8831: PPUSH
8832: LD_INT 1
8834: PPUSH
8835: LD_INT 45
8837: PPUSH
8838: LD_INT 10
8840: PPUSH
8841: CALL 30298 0 5
// un := CreateVehicle ;
8845: LD_ADDR_VAR 0 5
8849: PUSH
8850: CALL_OW 45
8854: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 92 , 2 , false ) ;
8855: LD_VAR 0 5
8859: PPUSH
8860: LD_INT 134
8862: PPUSH
8863: LD_INT 92
8865: PPUSH
8866: LD_INT 2
8868: PPUSH
8869: LD_INT 0
8871: PPUSH
8872: CALL 64799 0 5
// ComHold ( un ) ;
8876: LD_VAR 0 5
8880: PPUSH
8881: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8885: LD_INT 0
8887: PPUSH
8888: LD_INT 3
8890: PPUSH
8891: LD_INT 4
8893: PPUSH
8894: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8898: CALL_OW 44
8902: PPUSH
8903: LD_VAR 0 5
8907: PPUSH
8908: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8912: LD_INT 24
8914: PPUSH
8915: LD_INT 1
8917: PPUSH
8918: LD_INT 1
8920: PPUSH
8921: LD_INT 45
8923: PPUSH
8924: LD_INT 10
8926: PPUSH
8927: CALL 30298 0 5
// un := CreateVehicle ;
8931: LD_ADDR_VAR 0 5
8935: PUSH
8936: CALL_OW 45
8940: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
8941: LD_VAR 0 5
8945: PPUSH
8946: LD_INT 200
8948: PPUSH
8949: LD_INT 173
8951: PPUSH
8952: LD_INT 1
8954: PPUSH
8955: LD_INT 0
8957: PPUSH
8958: CALL 64799 0 5
// ComHold ( un ) ;
8962: LD_VAR 0 5
8966: PPUSH
8967: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
8971: LD_INT 0
8973: PPUSH
8974: LD_INT 3
8976: PPUSH
8977: LD_INT 4
8979: PPUSH
8980: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8984: CALL_OW 44
8988: PPUSH
8989: LD_VAR 0 5
8993: PPUSH
8994: CALL_OW 52
// bc_type := b_armoury ;
8998: LD_ADDR_OWVAR 42
9002: PUSH
9003: LD_INT 4
9005: ST_TO_ADDR
// if Difficulty > 1 then
9006: LD_OWVAR 67
9010: PUSH
9011: LD_INT 1
9013: GREATER
9014: IFFALSE 9024
// bc_type := b_barracks ;
9016: LD_ADDR_OWVAR 42
9020: PUSH
9021: LD_INT 5
9023: ST_TO_ADDR
// bc_level := 6 ;
9024: LD_ADDR_OWVAR 43
9028: PUSH
9029: LD_INT 6
9031: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
9032: LD_INT 120
9034: PPUSH
9035: LD_INT 100
9037: PPUSH
9038: LD_INT 5
9040: PPUSH
9041: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
9045: LD_ADDR_VAR 0 2
9049: PUSH
9050: DOUBLE
9051: LD_INT 1
9053: DEC
9054: ST_TO_ADDR
9055: LD_INT 3
9057: PUSH
9058: LD_INT 3
9060: PUSH
9061: LD_INT 4
9063: PUSH
9064: LD_INT 4
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: PUSH
9073: LD_OWVAR 67
9077: ARRAY
9078: PUSH
9079: FOR_TO
9080: IFFALSE 9138
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
9082: LD_INT 0
9084: PPUSH
9085: LD_INT 1
9087: PUSH
9088: LD_INT 1
9090: PUSH
9091: LD_INT 9
9093: PUSH
9094: LD_INT 9
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: PUSH
9103: LD_OWVAR 67
9107: ARRAY
9108: PPUSH
9109: LD_INT 5
9111: PPUSH
9112: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
9116: CALL_OW 44
9120: PPUSH
9121: LD_INT 120
9123: PPUSH
9124: LD_INT 100
9126: PPUSH
9127: CALL_OW 428
9131: PPUSH
9132: CALL_OW 52
// end ;
9136: GO 9079
9138: POP
9139: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
9140: LD_ADDR_VAR 0 7
9144: PUSH
9145: LD_INT 135
9147: PUSH
9148: LD_INT 100
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 137
9157: PUSH
9158: LD_INT 92
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: ST_TO_ADDR
// for i := 1 to tmp do
9169: LD_ADDR_VAR 0 2
9173: PUSH
9174: DOUBLE
9175: LD_INT 1
9177: DEC
9178: ST_TO_ADDR
9179: LD_VAR 0 7
9183: PUSH
9184: FOR_TO
9185: IFFALSE 9355
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
9187: LD_INT 22
9189: PUSH
9190: LD_INT 22
9192: PUSH
9193: LD_INT 24
9195: PUSH
9196: LD_INT 24
9198: PUSH
9199: LD_INT 24
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: PUSH
9209: LD_OWVAR 67
9213: PUSH
9214: LD_INT 0
9216: PPUSH
9217: LD_INT 1
9219: PPUSH
9220: CALL_OW 12
9224: PLUS
9225: ARRAY
9226: PPUSH
9227: LD_INT 1
9229: PPUSH
9230: LD_INT 1
9232: PPUSH
9233: LD_INT 44
9235: PPUSH
9236: LD_INT 25
9238: PPUSH
9239: CALL 30298 0 5
// veh := CreateVehicle ;
9243: LD_ADDR_VAR 0 6
9247: PUSH
9248: CALL_OW 45
9252: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9253: LD_VAR 0 6
9257: PPUSH
9258: LD_INT 2
9260: PPUSH
9261: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
9265: LD_VAR 0 6
9269: PPUSH
9270: LD_VAR 0 7
9274: PUSH
9275: LD_VAR 0 2
9279: ARRAY
9280: PUSH
9281: LD_INT 1
9283: ARRAY
9284: PPUSH
9285: LD_VAR 0 7
9289: PUSH
9290: LD_VAR 0 2
9294: ARRAY
9295: PUSH
9296: LD_INT 2
9298: ARRAY
9299: PPUSH
9300: LD_INT 0
9302: PPUSH
9303: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
9307: LD_INT 0
9309: PPUSH
9310: LD_INT 3
9312: PPUSH
9313: LD_INT 6
9315: PPUSH
9316: CALL_OW 380
// un := CreateHuman ;
9320: LD_ADDR_VAR 0 5
9324: PUSH
9325: CALL_OW 44
9329: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9330: LD_VAR 0 5
9334: PPUSH
9335: LD_VAR 0 6
9339: PPUSH
9340: CALL_OW 52
// ComHold ( veh ) ;
9344: LD_VAR 0 6
9348: PPUSH
9349: CALL_OW 140
// end ;
9353: GO 9184
9355: POP
9356: POP
// tmp := [ 191 , 122 ] ;
9357: LD_ADDR_VAR 0 7
9361: PUSH
9362: LD_INT 191
9364: PUSH
9365: LD_INT 122
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
9372: LD_INT 24
9374: PPUSH
9375: LD_INT 1
9377: PPUSH
9378: LD_INT 1
9380: PPUSH
9381: LD_INT 44
9383: PPUSH
9384: LD_INT 30
9386: PPUSH
9387: CALL 30298 0 5
// ruBlockadeTank := CreateVehicle ;
9391: LD_ADDR_EXP 51
9395: PUSH
9396: CALL_OW 45
9400: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9401: LD_EXP 51
9405: PPUSH
9406: LD_INT 2
9408: PPUSH
9409: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9413: LD_EXP 51
9417: PPUSH
9418: LD_INT 191
9420: PPUSH
9421: LD_INT 122
9423: PPUSH
9424: LD_INT 0
9426: PPUSH
9427: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
9431: LD_INT 1
9433: PPUSH
9434: LD_INT 5
9436: PUSH
9437: LD_INT 6
9439: PUSH
9440: LD_INT 7
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: PUSH
9448: LD_OWVAR 67
9452: PUSH
9453: LD_INT 1
9455: MINUS
9456: ARRAY
9457: PPUSH
9458: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9462: CALL_OW 44
9466: PPUSH
9467: LD_EXP 51
9471: PPUSH
9472: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9476: LD_EXP 51
9480: PPUSH
9481: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9485: LD_ADDR_EXP 53
9489: PUSH
9490: EMPTY
9491: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 , 6 ] [ Difficulty ] do
9492: LD_ADDR_VAR 0 2
9496: PUSH
9497: DOUBLE
9498: LD_INT 1
9500: DEC
9501: ST_TO_ADDR
9502: LD_INT 3
9504: PUSH
9505: LD_INT 4
9507: PUSH
9508: LD_INT 6
9510: PUSH
9511: LD_INT 6
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: PUSH
9520: LD_OWVAR 67
9524: ARRAY
9525: PUSH
9526: FOR_TO
9527: IFFALSE 9643
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
9529: LD_INT 0
9531: PPUSH
9532: LD_INT 1
9534: PPUSH
9535: LD_INT 4
9537: PUSH
9538: LD_INT 5
9540: PUSH
9541: LD_INT 6
9543: PUSH
9544: LD_INT 7
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: PUSH
9553: LD_OWVAR 67
9557: ARRAY
9558: PPUSH
9559: CALL_OW 380
// un := CreateHuman ;
9563: LD_ADDR_VAR 0 5
9567: PUSH
9568: CALL_OW 44
9572: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9573: LD_VAR 0 5
9577: PPUSH
9578: LD_INT 9
9580: PPUSH
9581: LD_INT 0
9583: PPUSH
9584: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9588: LD_VAR 0 5
9592: PPUSH
9593: LD_INT 198
9595: PPUSH
9596: LD_INT 129
9598: PPUSH
9599: CALL_OW 118
// AddComCrawl ( un ) ;
9603: LD_VAR 0 5
9607: PPUSH
9608: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9612: LD_ADDR_EXP 53
9616: PUSH
9617: LD_EXP 53
9621: PPUSH
9622: LD_EXP 53
9626: PUSH
9627: LD_INT 1
9629: PLUS
9630: PPUSH
9631: LD_VAR 0 5
9635: PPUSH
9636: CALL_OW 1
9640: ST_TO_ADDR
// end ;
9641: GO 9526
9643: POP
9644: POP
// PrepareHuman ( false , 4 , 5 ) ;
9645: LD_INT 0
9647: PPUSH
9648: LD_INT 4
9650: PPUSH
9651: LD_INT 5
9653: PPUSH
9654: CALL_OW 380
// un := CreateHuman ;
9658: LD_ADDR_VAR 0 5
9662: PUSH
9663: CALL_OW 44
9667: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9668: LD_VAR 0 5
9672: PPUSH
9673: LD_INT 179
9675: PPUSH
9676: LD_INT 113
9678: PPUSH
9679: LD_INT 0
9681: PPUSH
9682: CALL_OW 48
// ComHold ( un ) ;
9686: LD_VAR 0 5
9690: PPUSH
9691: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9695: LD_ADDR_EXP 53
9699: PUSH
9700: LD_EXP 53
9704: PPUSH
9705: LD_EXP 53
9709: PUSH
9710: LD_INT 1
9712: PLUS
9713: PPUSH
9714: LD_VAR 0 5
9718: PPUSH
9719: CALL_OW 1
9723: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9724: LD_ADDR_VAR 0 7
9728: PUSH
9729: LD_INT 167
9731: PPUSH
9732: LD_INT 243
9734: PPUSH
9735: CALL_OW 428
9739: PPUSH
9740: CALL_OW 274
9744: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9745: LD_VAR 0 7
9749: PPUSH
9750: LD_INT 1
9752: PPUSH
9753: LD_INT 1000
9755: PPUSH
9756: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9760: LD_VAR 0 7
9764: PPUSH
9765: LD_INT 2
9767: PPUSH
9768: LD_INT 400
9770: PPUSH
9771: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9775: LD_ADDR_VAR 0 7
9779: PUSH
9780: LD_INT 169
9782: PPUSH
9783: LD_INT 229
9785: PPUSH
9786: CALL_OW 428
9790: ST_TO_ADDR
// for i := 1 to 3 do
9791: LD_ADDR_VAR 0 2
9795: PUSH
9796: DOUBLE
9797: LD_INT 1
9799: DEC
9800: ST_TO_ADDR
9801: LD_INT 3
9803: PUSH
9804: FOR_TO
9805: IFFALSE 9896
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9807: LD_INT 0
9809: PPUSH
9810: LD_INT 1
9812: PPUSH
9813: LD_INT 4
9815: PUSH
9816: LD_INT 5
9818: PUSH
9819: LD_INT 5
9821: PUSH
9822: LD_INT 6
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: PUSH
9831: LD_OWVAR 67
9835: ARRAY
9836: PPUSH
9837: CALL_OW 380
// un := CreateHuman ;
9841: LD_ADDR_VAR 0 5
9845: PUSH
9846: CALL_OW 44
9850: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9851: LD_VAR 0 5
9855: PPUSH
9856: LD_VAR 0 7
9860: PPUSH
9861: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9865: LD_ADDR_EXP 54
9869: PUSH
9870: LD_EXP 54
9874: PPUSH
9875: LD_EXP 54
9879: PUSH
9880: LD_INT 1
9882: PLUS
9883: PPUSH
9884: LD_VAR 0 5
9888: PPUSH
9889: CALL_OW 1
9893: ST_TO_ADDR
// end ;
9894: GO 9804
9896: POP
9897: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9898: LD_ADDR_VAR 0 7
9902: PUSH
9903: LD_INT 165
9905: PUSH
9906: LD_INT 227
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 173
9915: PUSH
9916: LD_INT 231
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: ST_TO_ADDR
// for i := 1 to tmp do
9927: LD_ADDR_VAR 0 2
9931: PUSH
9932: DOUBLE
9933: LD_INT 1
9935: DEC
9936: ST_TO_ADDR
9937: LD_VAR 0 7
9941: PUSH
9942: FOR_TO
9943: IFFALSE 10064
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9945: LD_INT 0
9947: PPUSH
9948: LD_INT 1
9950: PPUSH
9951: LD_INT 4
9953: PUSH
9954: LD_INT 5
9956: PUSH
9957: LD_INT 5
9959: PUSH
9960: LD_INT 6
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: PUSH
9969: LD_OWVAR 67
9973: ARRAY
9974: PPUSH
9975: CALL_OW 380
// un := CreateHuman ;
9979: LD_ADDR_VAR 0 5
9983: PUSH
9984: CALL_OW 44
9988: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9989: LD_VAR 0 5
9993: PPUSH
9994: LD_VAR 0 7
9998: PUSH
9999: LD_VAR 0 2
10003: ARRAY
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: PPUSH
10009: LD_VAR 0 7
10013: PUSH
10014: LD_VAR 0 2
10018: ARRAY
10019: PUSH
10020: LD_INT 2
10022: ARRAY
10023: PPUSH
10024: CALL_OW 428
10028: PPUSH
10029: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
10033: LD_ADDR_EXP 54
10037: PUSH
10038: LD_EXP 54
10042: PPUSH
10043: LD_EXP 54
10047: PUSH
10048: LD_INT 1
10050: PLUS
10051: PPUSH
10052: LD_VAR 0 5
10056: PPUSH
10057: CALL_OW 1
10061: ST_TO_ADDR
// end ;
10062: GO 9942
10064: POP
10065: POP
// for i := 1 to 2 do
10066: LD_ADDR_VAR 0 2
10070: PUSH
10071: DOUBLE
10072: LD_INT 1
10074: DEC
10075: ST_TO_ADDR
10076: LD_INT 2
10078: PUSH
10079: FOR_TO
10080: IFFALSE 10135
// begin InitHc ;
10082: CALL_OW 19
// uc_nation := 0 ;
10086: LD_ADDR_OWVAR 21
10090: PUSH
10091: LD_INT 0
10093: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
10094: LD_ADDR_OWVAR 28
10098: PUSH
10099: LD_INT 16
10101: ST_TO_ADDR
// un := CreateHuman ;
10102: LD_ADDR_VAR 0 5
10106: PUSH
10107: CALL_OW 44
10111: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
10112: LD_VAR 0 5
10116: PPUSH
10117: LD_INT 166
10119: PPUSH
10120: LD_INT 233
10122: PPUSH
10123: LD_INT 2
10125: PPUSH
10126: LD_INT 0
10128: PPUSH
10129: CALL_OW 50
// end ;
10133: GO 10079
10135: POP
10136: POP
// uc_nation := 3 ;
10137: LD_ADDR_OWVAR 21
10141: PUSH
10142: LD_INT 3
10144: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
10145: LD_ADDR_VAR 0 7
10149: PUSH
10150: LD_INT 71
10152: PUSH
10153: LD_INT 52
10155: PUSH
10156: LD_INT 11
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: LIST
10163: ST_TO_ADDR
// for i in tmp do
10164: LD_ADDR_VAR 0 2
10168: PUSH
10169: LD_VAR 0 7
10173: PUSH
10174: FOR_IN
10175: IFFALSE 10219
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
10177: LD_VAR 0 2
10181: PPUSH
10182: CALL_OW 274
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: LD_INT 3000
10192: PPUSH
10193: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
10197: LD_VAR 0 2
10201: PPUSH
10202: CALL_OW 274
10206: PPUSH
10207: LD_INT 2
10209: PPUSH
10210: LD_INT 600
10212: PPUSH
10213: CALL_OW 277
// end ;
10217: GO 10174
10219: POP
10220: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
10221: LD_ADDR_VAR 0 7
10225: PUSH
10226: LD_INT 41
10228: PUSH
10229: LD_INT 57
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 38
10238: PUSH
10239: LD_INT 55
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 50
10248: PUSH
10249: LD_INT 73
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 51
10258: PUSH
10259: LD_INT 65
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 82
10268: PUSH
10269: LD_INT 93
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 87
10278: PUSH
10279: LD_INT 100
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 91
10288: PUSH
10289: LD_INT 109
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 84
10298: PUSH
10299: LD_INT 120
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 113
10308: PUSH
10309: LD_INT 153
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PUSH
10316: LD_INT 123
10318: PUSH
10319: LD_INT 171
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 125
10328: PUSH
10329: LD_INT 178
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 125
10338: PUSH
10339: LD_INT 188
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 125
10348: PUSH
10349: LD_INT 201
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 33
10358: PUSH
10359: LD_INT 60
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 76
10368: PUSH
10369: LD_INT 95
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 84
10378: PUSH
10379: LD_INT 111
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 112
10388: PUSH
10389: LD_INT 165
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: ST_TO_ADDR
// for i := 1 to tmp do
10415: LD_ADDR_VAR 0 2
10419: PUSH
10420: DOUBLE
10421: LD_INT 1
10423: DEC
10424: ST_TO_ADDR
10425: LD_VAR 0 7
10429: PUSH
10430: FOR_TO
10431: IFFALSE 10678
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10433: LD_ADDR_VAR 0 4
10437: PUSH
10438: LD_VAR 0 7
10442: PUSH
10443: LD_VAR 0 2
10447: ARRAY
10448: PUSH
10449: LD_INT 1
10451: ARRAY
10452: PPUSH
10453: LD_VAR 0 7
10457: PUSH
10458: LD_VAR 0 2
10462: ARRAY
10463: PUSH
10464: LD_INT 2
10466: ARRAY
10467: PPUSH
10468: CALL_OW 428
10472: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10473: LD_VAR 0 4
10477: PPUSH
10478: CALL_OW 266
10482: PUSH
10483: LD_INT 4
10485: PUSH
10486: LD_INT 5
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: IN
10493: IFFALSE 10577
// begin for j := 1 to Difficulty do
10495: LD_ADDR_VAR 0 3
10499: PUSH
10500: DOUBLE
10501: LD_INT 1
10503: DEC
10504: ST_TO_ADDR
10505: LD_OWVAR 67
10509: PUSH
10510: FOR_TO
10511: IFFALSE 10573
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10513: LD_INT 0
10515: PPUSH
10516: LD_INT 1
10518: PPUSH
10519: LD_INT 4
10521: PUSH
10522: LD_INT 5
10524: PUSH
10525: LD_INT 5
10527: PUSH
10528: LD_INT 6
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: PUSH
10537: LD_OWVAR 67
10541: ARRAY
10542: PPUSH
10543: CALL_OW 380
// un := CreateHuman ;
10547: LD_ADDR_VAR 0 5
10551: PUSH
10552: CALL_OW 44
10556: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10557: LD_VAR 0 5
10561: PPUSH
10562: LD_VAR 0 4
10566: PPUSH
10567: CALL_OW 52
// end ;
10571: GO 10510
10573: POP
10574: POP
// end else
10575: GO 10647
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10577: LD_INT 0
10579: PPUSH
10580: LD_INT 1
10582: PPUSH
10583: LD_INT 4
10585: PUSH
10586: LD_INT 5
10588: PUSH
10589: LD_INT 5
10591: PUSH
10592: LD_INT 6
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: PUSH
10601: LD_OWVAR 67
10605: ARRAY
10606: PPUSH
10607: CALL_OW 380
// un := CreateHuman ;
10611: LD_ADDR_VAR 0 5
10615: PUSH
10616: CALL_OW 44
10620: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10621: LD_VAR 0 5
10625: PPUSH
10626: LD_VAR 0 4
10630: PPUSH
10631: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10635: LD_VAR 0 5
10639: PPUSH
10640: LD_INT 9
10642: PPUSH
10643: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10647: LD_ADDR_EXP 55
10651: PUSH
10652: LD_EXP 55
10656: PPUSH
10657: LD_EXP 55
10661: PUSH
10662: LD_INT 1
10664: PLUS
10665: PPUSH
10666: LD_VAR 0 5
10670: PPUSH
10671: CALL_OW 1
10675: ST_TO_ADDR
// end ;
10676: GO 10430
10678: POP
10679: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10680: LD_ADDR_VAR 0 4
10684: PUSH
10685: LD_INT 10
10687: PPUSH
10688: LD_INT 22
10690: PUSH
10691: LD_INT 3
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 30
10700: PUSH
10701: LD_INT 32
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 58
10710: PUSH
10711: EMPTY
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: PPUSH
10719: CALL_OW 70
10723: PUSH
10724: FOR_IN
10725: IFFALSE 10859
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10727: LD_INT 40
10729: PUSH
10730: LD_INT 50
10732: PUSH
10733: LD_INT 75
10735: PUSH
10736: LD_INT 80
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: LD_OWVAR 67
10749: ARRAY
10750: PUSH
10751: LD_EXP 7
10755: PUSH
10756: LD_INT 10
10758: MUL
10759: MINUS
10760: PPUSH
10761: CALL_OW 13
10765: NOT
10766: IFFALSE 10770
// continue ;
10768: GO 10724
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10770: LD_INT 0
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: LD_INT 4
10778: PUSH
10779: LD_INT 5
10781: PUSH
10782: LD_INT 5
10784: PUSH
10785: LD_INT 6
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PUSH
10794: LD_OWVAR 67
10798: ARRAY
10799: PPUSH
10800: CALL_OW 380
// un := CreateHuman ;
10804: LD_ADDR_VAR 0 5
10808: PUSH
10809: CALL_OW 44
10813: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10814: LD_VAR 0 5
10818: PPUSH
10819: LD_VAR 0 4
10823: PPUSH
10824: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10828: LD_ADDR_EXP 55
10832: PUSH
10833: LD_EXP 55
10837: PPUSH
10838: LD_EXP 55
10842: PUSH
10843: LD_INT 1
10845: PLUS
10846: PPUSH
10847: LD_VAR 0 5
10851: PPUSH
10852: CALL_OW 1
10856: ST_TO_ADDR
// end ;
10857: GO 10724
10859: POP
10860: POP
// for i := 1 to 5 do
10861: LD_ADDR_VAR 0 2
10865: PUSH
10866: DOUBLE
10867: LD_INT 1
10869: DEC
10870: ST_TO_ADDR
10871: LD_INT 5
10873: PUSH
10874: FOR_TO
10875: IFFALSE 10973
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10877: LD_INT 0
10879: PPUSH
10880: LD_INT 2
10882: PPUSH
10883: LD_INT 4
10885: PUSH
10886: LD_INT 5
10888: PUSH
10889: LD_INT 5
10891: PUSH
10892: LD_INT 6
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: PUSH
10901: LD_OWVAR 67
10905: ARRAY
10906: PPUSH
10907: CALL_OW 380
// un := CreateHuman ;
10911: LD_ADDR_VAR 0 5
10915: PUSH
10916: CALL_OW 44
10920: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10921: LD_VAR 0 5
10925: PPUSH
10926: LD_INT 66
10928: PPUSH
10929: LD_INT 101
10931: PPUSH
10932: LD_INT 3
10934: PPUSH
10935: LD_INT 0
10937: PPUSH
10938: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10942: LD_ADDR_EXP 55
10946: PUSH
10947: LD_EXP 55
10951: PPUSH
10952: LD_EXP 55
10956: PUSH
10957: LD_INT 1
10959: PLUS
10960: PPUSH
10961: LD_VAR 0 5
10965: PPUSH
10966: CALL_OW 1
10970: ST_TO_ADDR
// end ;
10971: GO 10874
10973: POP
10974: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10975: LD_ADDR_VAR 0 7
10979: PUSH
10980: LD_INT 72
10982: PUSH
10983: LD_INT 12
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: ST_TO_ADDR
// for i := 1 to tmp do
10990: LD_ADDR_VAR 0 2
10994: PUSH
10995: DOUBLE
10996: LD_INT 1
10998: DEC
10999: ST_TO_ADDR
11000: LD_VAR 0 7
11004: PUSH
11005: FOR_TO
11006: IFFALSE 11123
// for j := 1 to 6 do
11008: LD_ADDR_VAR 0 3
11012: PUSH
11013: DOUBLE
11014: LD_INT 1
11016: DEC
11017: ST_TO_ADDR
11018: LD_INT 6
11020: PUSH
11021: FOR_TO
11022: IFFALSE 11119
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11024: LD_INT 0
11026: PPUSH
11027: LD_INT 3
11029: PPUSH
11030: LD_INT 4
11032: PUSH
11033: LD_INT 5
11035: PUSH
11036: LD_INT 5
11038: PUSH
11039: LD_INT 6
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: PUSH
11048: LD_OWVAR 67
11052: ARRAY
11053: PPUSH
11054: CALL_OW 380
// un := CreateHuman ;
11058: LD_ADDR_VAR 0 5
11062: PUSH
11063: CALL_OW 44
11067: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
11068: LD_VAR 0 5
11072: PPUSH
11073: LD_VAR 0 7
11077: PUSH
11078: LD_VAR 0 2
11082: ARRAY
11083: PPUSH
11084: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11088: LD_ADDR_EXP 55
11092: PUSH
11093: LD_EXP 55
11097: PPUSH
11098: LD_EXP 55
11102: PUSH
11103: LD_INT 1
11105: PLUS
11106: PPUSH
11107: LD_VAR 0 5
11111: PPUSH
11112: CALL_OW 1
11116: ST_TO_ADDR
// end ;
11117: GO 11021
11119: POP
11120: POP
11121: GO 11005
11123: POP
11124: POP
// for i := 1 to 3 do
11125: LD_ADDR_VAR 0 2
11129: PUSH
11130: DOUBLE
11131: LD_INT 1
11133: DEC
11134: ST_TO_ADDR
11135: LD_INT 3
11137: PUSH
11138: FOR_TO
11139: IFFALSE 11228
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11141: LD_INT 0
11143: PPUSH
11144: LD_INT 4
11146: PPUSH
11147: LD_INT 4
11149: PUSH
11150: LD_INT 5
11152: PUSH
11153: LD_INT 5
11155: PUSH
11156: LD_INT 6
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: PUSH
11165: LD_OWVAR 67
11169: ARRAY
11170: PPUSH
11171: CALL_OW 380
// un := CreateHuman ;
11175: LD_ADDR_VAR 0 5
11179: PUSH
11180: CALL_OW 44
11184: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
11185: LD_VAR 0 5
11189: PPUSH
11190: LD_INT 17
11192: PPUSH
11193: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11197: LD_ADDR_EXP 55
11201: PUSH
11202: LD_EXP 55
11206: PPUSH
11207: LD_EXP 55
11211: PUSH
11212: LD_INT 1
11214: PLUS
11215: PPUSH
11216: LD_VAR 0 5
11220: PPUSH
11221: CALL_OW 1
11225: ST_TO_ADDR
// end ;
11226: GO 11138
11228: POP
11229: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
11230: LD_ADDR_VAR 0 2
11234: PUSH
11235: DOUBLE
11236: LD_INT 1
11238: DEC
11239: ST_TO_ADDR
11240: LD_INT 2
11242: PUSH
11243: LD_INT 3
11245: PUSH
11246: LD_INT 3
11248: PUSH
11249: LD_INT 3
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: PUSH
11258: LD_OWVAR 67
11262: ARRAY
11263: PUSH
11264: FOR_TO
11265: IFFALSE 11385
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
11267: LD_INT 22
11269: PPUSH
11270: LD_INT 1
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: LD_INT 52
11278: PPUSH
11279: LD_INT 100
11281: PPUSH
11282: CALL 30298 0 5
// veh := CreateVehicle ;
11286: LD_ADDR_VAR 0 6
11290: PUSH
11291: CALL_OW 45
11295: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
11296: LD_INT 0
11298: PPUSH
11299: LD_INT 3
11301: PPUSH
11302: LD_INT 4
11304: PPUSH
11305: CALL_OW 380
// un := CreateHuman ;
11309: LD_ADDR_VAR 0 5
11313: PUSH
11314: CALL_OW 44
11318: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
11319: LD_VAR 0 6
11323: PPUSH
11324: LD_INT 107
11326: PPUSH
11327: LD_INT 182
11329: PPUSH
11330: LD_INT 4
11332: PPUSH
11333: LD_INT 0
11335: PPUSH
11336: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11340: LD_VAR 0 5
11344: PPUSH
11345: LD_VAR 0 6
11349: PPUSH
11350: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11354: LD_ADDR_EXP 55
11358: PUSH
11359: LD_EXP 55
11363: PPUSH
11364: LD_EXP 55
11368: PUSH
11369: LD_INT 1
11371: PLUS
11372: PPUSH
11373: LD_VAR 0 5
11377: PPUSH
11378: CALL_OW 1
11382: ST_TO_ADDR
// end ;
11383: GO 11264
11385: POP
11386: POP
// InitHc ;
11387: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 , 12 ] [ Difficulty ] do
11391: LD_ADDR_VAR 0 2
11395: PUSH
11396: DOUBLE
11397: LD_INT 1
11399: DEC
11400: ST_TO_ADDR
11401: LD_INT 6
11403: PUSH
11404: LD_INT 8
11406: PUSH
11407: LD_INT 10
11409: PUSH
11410: LD_INT 12
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: LD_OWVAR 67
11423: ARRAY
11424: PUSH
11425: FOR_TO
11426: IFFALSE 11498
// begin uc_nation := 0 ;
11428: LD_ADDR_OWVAR 21
11432: PUSH
11433: LD_INT 0
11435: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11436: LD_ADDR_OWVAR 28
11440: PUSH
11441: LD_INT 15
11443: ST_TO_ADDR
// un := CreateHuman ;
11444: LD_ADDR_VAR 0 5
11448: PUSH
11449: CALL_OW 44
11453: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11454: LD_VAR 0 5
11458: PPUSH
11459: LD_INT 269
11461: PUSH
11462: LD_INT 300
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_VAR 0 2
11473: PUSH
11474: LD_INT 2
11476: MOD
11477: PUSH
11478: LD_INT 1
11480: PLUS
11481: ARRAY
11482: PPUSH
11483: LD_INT 182
11485: PPUSH
11486: LD_INT 4
11488: PPUSH
11489: LD_INT 0
11491: PPUSH
11492: CALL_OW 50
// end ;
11496: GO 11425
11498: POP
11499: POP
// uc_nation := 3 ;
11500: LD_ADDR_OWVAR 21
11504: PUSH
11505: LD_INT 3
11507: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
11508: LD_EXP 8
11512: PUSH
11513: LD_INT 10
11515: PUSH
11516: LD_INT 8
11518: PUSH
11519: LD_INT 6
11521: PUSH
11522: LD_INT 5
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: PUSH
11531: LD_OWVAR 67
11535: ARRAY
11536: LESS
11537: IFFALSE 11616
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11539: LD_INT 21
11541: PPUSH
11542: LD_INT 1
11544: PPUSH
11545: LD_INT 1
11547: PPUSH
11548: LD_INT 51
11550: PPUSH
11551: LD_INT 12
11553: PPUSH
11554: CALL 30298 0 5
// veh := CreateVehicle ;
11558: LD_ADDR_VAR 0 6
11562: PUSH
11563: CALL_OW 45
11567: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11568: LD_VAR 0 6
11572: PPUSH
11573: LD_INT 269
11575: PPUSH
11576: LD_INT 66
11578: PPUSH
11579: LD_INT 4
11581: PPUSH
11582: LD_INT 0
11584: PPUSH
11585: CALL 64799 0 5
// SetLives ( veh , 333 ) ;
11589: LD_VAR 0 6
11593: PPUSH
11594: LD_INT 333
11596: PPUSH
11597: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11601: LD_VAR 0 6
11605: PPUSH
11606: LD_INT 2
11608: PPUSH
11609: LD_INT 100
11611: PPUSH
11612: CALL_OW 290
// end ; end ;
11616: LD_VAR 0 1
11620: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11621: LD_EXP 51
11625: PUSH
11626: LD_EXP 51
11630: PPUSH
11631: CALL_OW 255
11635: PUSH
11636: LD_INT 3
11638: EQUAL
11639: AND
11640: IFFALSE 11803
11642: GO 11644
11644: DISABLE
11645: LD_INT 0
11647: PPUSH
// begin enable ;
11648: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11649: LD_INT 81
11651: PUSH
11652: LD_INT 3
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 91
11661: PUSH
11662: LD_EXP 51
11666: PUSH
11667: LD_INT 15
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 69
11683: IFFALSE 11763
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11685: LD_EXP 51
11689: PPUSH
11690: CALL_OW 311
11694: NOT
11695: IFFALSE 11761
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11697: LD_ADDR_VAR 0 1
11701: PUSH
11702: LD_INT 22
11704: PUSH
11705: LD_INT 3
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 21
11714: PUSH
11715: LD_INT 1
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PPUSH
11726: CALL_OW 69
11730: PPUSH
11731: LD_EXP 51
11735: PPUSH
11736: CALL_OW 74
11740: ST_TO_ADDR
// if driver then
11741: LD_VAR 0 1
11745: IFFALSE 11761
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11747: LD_VAR 0 1
11751: PPUSH
11752: LD_EXP 51
11756: PPUSH
11757: CALL_OW 120
// end ; exit ;
11761: GO 11803
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11763: LD_EXP 51
11767: PPUSH
11768: CALL_OW 256
11772: PUSH
11773: LD_INT 1000
11775: LESS
11776: PUSH
11777: LD_EXP 51
11781: PPUSH
11782: CALL_OW 311
11786: AND
11787: IFFALSE 11803
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11789: LD_EXP 51
11793: PPUSH
11794: CALL_OW 311
11798: PPUSH
11799: CALL 64359 0 1
// end ;
11803: PPOPN 1
11805: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11806: LD_EXP 53
11810: PPUSH
11811: LD_INT 3
11813: PUSH
11814: LD_INT 24
11816: PUSH
11817: LD_INT 1000
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PPUSH
11828: CALL_OW 72
11832: PUSH
11833: LD_EXP 53
11837: PPUSH
11838: LD_INT 25
11840: PUSH
11841: LD_INT 4
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 50
11850: PUSH
11851: EMPTY
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 72
11862: AND
11863: IFFALSE 12051
11865: GO 11867
11867: DISABLE
11868: LD_INT 0
11870: PPUSH
11871: PPUSH
11872: PPUSH
// begin enable ;
11873: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11874: LD_ADDR_VAR 0 3
11878: PUSH
11879: LD_EXP 53
11883: PPUSH
11884: LD_INT 3
11886: PUSH
11887: LD_INT 24
11889: PUSH
11890: LD_INT 1000
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 72
11905: PPUSH
11906: LD_INT 1
11908: PPUSH
11909: CALL 64599 0 2
11913: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11914: LD_ADDR_VAR 0 2
11918: PUSH
11919: LD_EXP 53
11923: PPUSH
11924: LD_INT 25
11926: PUSH
11927: LD_INT 4
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PUSH
11934: LD_INT 50
11936: PUSH
11937: EMPTY
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PPUSH
11944: CALL_OW 72
11948: PUSH
11949: LD_INT 1
11951: ARRAY
11952: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11953: LD_VAR 0 2
11957: PPUSH
11958: LD_VAR 0 3
11962: PUSH
11963: LD_INT 1
11965: ARRAY
11966: PPUSH
11967: CALL 59945 0 2
11971: NOT
11972: IFFALSE 12051
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11974: LD_VAR 0 3
11978: PUSH
11979: LD_INT 1
11981: ARRAY
11982: PPUSH
11983: LD_INT 9
11985: PPUSH
11986: CALL_OW 308
11990: NOT
11991: IFFALSE 12009
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
11993: LD_VAR 0 3
11997: PUSH
11998: LD_INT 1
12000: ARRAY
12001: PPUSH
12002: LD_INT 9
12004: PPUSH
12005: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
12009: LD_VAR 0 2
12013: PPUSH
12014: LD_VAR 0 3
12018: PUSH
12019: LD_INT 1
12021: ARRAY
12022: PPUSH
12023: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
12027: LD_VAR 0 2
12031: PPUSH
12032: LD_INT 179
12034: PPUSH
12035: LD_INT 113
12037: PPUSH
12038: CALL_OW 171
// AddComHold ( sci ) ;
12042: LD_VAR 0 2
12046: PPUSH
12047: CALL_OW 200
// end ; end ;
12051: PPOPN 3
12053: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
12054: LD_INT 2
12056: PPUSH
12057: LD_INT 52
12059: PPUSH
12060: CALL_OW 292
12064: IFFALSE 12169
12066: GO 12068
12068: DISABLE
12069: LD_INT 0
12071: PPUSH
12072: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
12073: LD_ADDR_VAR 0 2
12077: PUSH
12078: LD_EXP 55
12082: PPUSH
12083: LD_INT 25
12085: PUSH
12086: LD_INT 1
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 50
12095: PUSH
12096: EMPTY
12097: LIST
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PPUSH
12103: CALL_OW 72
12107: ST_TO_ADDR
// if not tmp then
12108: LD_VAR 0 2
12112: NOT
12113: IFFALSE 12117
// exit ;
12115: GO 12169
// for i in tmp do
12117: LD_ADDR_VAR 0 1
12121: PUSH
12122: LD_VAR 0 2
12126: PUSH
12127: FOR_IN
12128: IFFALSE 12167
// begin if IsInUnit ( i ) then
12130: LD_VAR 0 1
12134: PPUSH
12135: CALL_OW 310
12139: IFFALSE 12150
// ComExitBuilding ( i ) ;
12141: LD_VAR 0 1
12145: PPUSH
12146: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
12150: LD_VAR 0 1
12154: PPUSH
12155: LD_INT 84
12157: PPUSH
12158: LD_INT 133
12160: PPUSH
12161: CALL_OW 174
// end ;
12165: GO 12127
12167: POP
12168: POP
// end ;
12169: PPOPN 2
12171: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
12172: LD_EXP 14
12176: IFFALSE 12336
12178: GO 12180
12180: DISABLE
12181: LD_INT 0
12183: PPUSH
12184: PPUSH
12185: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
12186: LD_ADDR_VAR 0 2
12190: PUSH
12191: LD_INT 72
12193: PUSH
12194: LD_INT 12
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
12201: LD_ADDR_VAR 0 3
12205: PUSH
12206: LD_INT 44
12208: PUSH
12209: LD_INT 43
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 45
12218: PUSH
12219: LD_INT 44
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 45
12228: PUSH
12229: LD_INT 46
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 45
12238: PUSH
12239: LD_INT 46
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: PUSH
12252: LD_OWVAR 67
12256: ARRAY
12257: ST_TO_ADDR
// for i := 1 to 6 do
12258: LD_ADDR_VAR 0 1
12262: PUSH
12263: DOUBLE
12264: LD_INT 1
12266: DEC
12267: ST_TO_ADDR
12268: LD_INT 6
12270: PUSH
12271: FOR_TO
12272: IFFALSE 12334
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
12274: LD_VAR 0 2
12278: PPUSH
12279: LD_INT 22
12281: PUSH
12282: LD_INT 23
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_VAR 0 1
12293: PUSH
12294: LD_INT 2
12296: MOD
12297: PUSH
12298: LD_INT 1
12300: PLUS
12301: ARRAY
12302: PPUSH
12303: LD_INT 1
12305: PPUSH
12306: LD_INT 1
12308: PPUSH
12309: LD_VAR 0 3
12313: PUSH
12314: LD_VAR 0 1
12318: PUSH
12319: LD_INT 2
12321: MOD
12322: PUSH
12323: LD_INT 1
12325: PLUS
12326: ARRAY
12327: PPUSH
12328: CALL_OW 185
12332: GO 12271
12334: POP
12335: POP
// end ;
12336: PPOPN 3
12338: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
12339: LD_EXP 11
12343: IFFALSE 13492
12345: GO 12347
12347: DISABLE
12348: LD_INT 0
12350: PPUSH
12351: PPUSH
12352: PPUSH
12353: PPUSH
12354: PPUSH
12355: PPUSH
// begin enable ;
12356: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
12357: LD_ADDR_VAR 0 6
12361: PUSH
12362: LD_INT 10
12364: PPUSH
12365: LD_INT 81
12367: PUSH
12368: LD_INT 3
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 70
12379: ST_TO_ADDR
// if ruSpecialVehicleGroup then
12380: LD_EXP 56
12384: IFFALSE 12650
// begin for i in ruSpecialVehicleGroup do
12386: LD_ADDR_VAR 0 1
12390: PUSH
12391: LD_EXP 56
12395: PUSH
12396: FOR_IN
12397: IFFALSE 12648
// begin if enemyInBase then
12399: LD_VAR 0 6
12403: IFFALSE 12646
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 256
12414: PUSH
12415: LD_INT 500
12417: GREATER
12418: PUSH
12419: LD_VAR 0 1
12423: PPUSH
12424: CALL_OW 110
12428: PUSH
12429: LD_INT 0
12431: EQUAL
12432: AND
12433: IFFALSE 12459
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
12435: LD_VAR 0 1
12439: PPUSH
12440: LD_VAR 0 6
12444: PPUSH
12445: LD_VAR 0 1
12449: PPUSH
12450: CALL_OW 74
12454: PPUSH
12455: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12459: LD_VAR 0 1
12463: PPUSH
12464: CALL_OW 256
12468: PUSH
12469: LD_INT 500
12471: LESSEQUAL
12472: PUSH
12473: LD_VAR 0 1
12477: PPUSH
12478: CALL_OW 110
12482: PUSH
12483: LD_INT 0
12485: EQUAL
12486: AND
12487: IFFALSE 12516
// begin SetTag ( i , 1 ) ;
12489: LD_VAR 0 1
12493: PPUSH
12494: LD_INT 1
12496: PPUSH
12497: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12501: LD_VAR 0 1
12505: PPUSH
12506: LD_INT 83
12508: PPUSH
12509: LD_INT 134
12511: PPUSH
12512: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12516: LD_VAR 0 1
12520: PPUSH
12521: CALL_OW 256
12525: PUSH
12526: LD_INT 1000
12528: LESS
12529: PUSH
12530: LD_VAR 0 1
12534: PPUSH
12535: CALL_OW 110
12539: PUSH
12540: LD_INT 1
12542: EQUAL
12543: AND
12544: PUSH
12545: LD_VAR 0 1
12549: PPUSH
12550: LD_INT 83
12552: PPUSH
12553: LD_INT 134
12555: PPUSH
12556: CALL_OW 297
12560: PUSH
12561: LD_INT 6
12563: LESS
12564: AND
12565: IFFALSE 12593
// begin SetFuel ( i , 100 ) ;
12567: LD_VAR 0 1
12571: PPUSH
12572: LD_INT 100
12574: PPUSH
12575: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12579: LD_VAR 0 1
12583: PPUSH
12584: CALL_OW 310
12588: PPUSH
12589: CALL 64479 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12593: LD_VAR 0 1
12597: PPUSH
12598: CALL_OW 256
12602: PUSH
12603: LD_INT 1000
12605: EQUAL
12606: PUSH
12607: LD_VAR 0 1
12611: PPUSH
12612: CALL_OW 110
12616: PUSH
12617: LD_INT 1
12619: EQUAL
12620: AND
12621: PUSH
12622: LD_VAR 0 1
12626: PPUSH
12627: CALL_OW 311
12631: AND
12632: IFFALSE 12646
// SetTag ( i , 0 ) ;
12634: LD_VAR 0 1
12638: PPUSH
12639: LD_INT 0
12641: PPUSH
12642: CALL_OW 109
// end ; end ;
12646: GO 12396
12648: POP
12649: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12650: LD_ADDR_VAR 0 5
12654: PUSH
12655: LD_EXP 55
12659: PPUSH
12660: LD_INT 25
12662: PUSH
12663: LD_INT 4
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PPUSH
12670: CALL_OW 72
12674: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12675: LD_ADDR_VAR 0 4
12679: PUSH
12680: LD_EXP 55
12684: PPUSH
12685: LD_INT 92
12687: PUSH
12688: LD_INT 92
12690: PUSH
12691: LD_INT 155
12693: PUSH
12694: LD_INT 12
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: LD_INT 24
12708: PUSH
12709: LD_INT 1000
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PPUSH
12724: CALL_OW 72
12728: ST_TO_ADDR
// if sci then
12729: LD_VAR 0 5
12733: IFFALSE 12866
// begin if hurt then
12735: LD_VAR 0 4
12739: IFFALSE 12812
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12741: LD_VAR 0 5
12745: PPUSH
12746: LD_INT 3
12748: PUSH
12749: LD_INT 54
12751: PUSH
12752: EMPTY
12753: LIST
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PPUSH
12759: CALL_OW 72
12763: IFFALSE 12792
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12765: LD_VAR 0 5
12769: PPUSH
12770: LD_INT 3
12772: PUSH
12773: LD_INT 54
12775: PUSH
12776: EMPTY
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 72
12787: PPUSH
12788: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12792: LD_VAR 0 5
12796: PPUSH
12797: LD_VAR 0 4
12801: PUSH
12802: LD_INT 1
12804: ARRAY
12805: PPUSH
12806: CALL_OW 188
// end else
12810: GO 12866
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12812: LD_VAR 0 5
12816: PPUSH
12817: LD_INT 3
12819: PUSH
12820: LD_INT 54
12822: PUSH
12823: EMPTY
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PPUSH
12830: CALL_OW 72
12834: IFFALSE 12866
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12836: LD_VAR 0 5
12840: PPUSH
12841: LD_INT 3
12843: PUSH
12844: LD_INT 54
12846: PUSH
12847: EMPTY
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PPUSH
12854: CALL_OW 72
12858: PPUSH
12859: LD_INT 17
12861: PPUSH
12862: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12866: LD_ADDR_VAR 0 3
12870: PUSH
12871: LD_INT 10
12873: PPUSH
12874: LD_INT 21
12876: PUSH
12877: LD_INT 3
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 3
12886: PUSH
12887: LD_INT 24
12889: PUSH
12890: LD_INT 1000
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 70
12909: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12910: LD_ADDR_VAR 0 2
12914: PUSH
12915: LD_EXP 55
12919: PPUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PPUSH
12930: CALL_OW 72
12934: PUSH
12935: LD_INT 22
12937: PUSH
12938: LD_INT 3
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 34
12947: PUSH
12948: LD_INT 52
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PPUSH
12959: CALL_OW 69
12963: UNION
12964: ST_TO_ADDR
// if not tmp then
12965: LD_VAR 0 2
12969: NOT
12970: IFFALSE 12974
// exit ;
12972: GO 13492
// for i in tmp do
12974: LD_ADDR_VAR 0 1
12978: PUSH
12979: LD_VAR 0 2
12983: PUSH
12984: FOR_IN
12985: IFFALSE 13490
// begin if GetClass ( i ) = 2 then
12987: LD_VAR 0 1
12991: PPUSH
12992: CALL_OW 257
12996: PUSH
12997: LD_INT 2
12999: EQUAL
13000: IFFALSE 13223
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13002: LD_VAR 0 1
13006: PPUSH
13007: CALL_OW 256
13011: PUSH
13012: LD_INT 1000
13014: EQUAL
13015: PUSH
13016: LD_VAR 0 1
13020: PPUSH
13021: CALL_OW 110
13025: PUSH
13026: LD_INT 1
13028: EQUAL
13029: AND
13030: IFFALSE 13044
// SetTag ( i , 0 ) ;
13032: LD_VAR 0 1
13036: PPUSH
13037: LD_INT 0
13039: PPUSH
13040: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13044: LD_VAR 0 1
13048: PPUSH
13049: CALL_OW 256
13053: PUSH
13054: LD_INT 500
13056: LESSEQUAL
13057: PUSH
13058: LD_VAR 0 1
13062: PPUSH
13063: CALL_OW 110
13067: PUSH
13068: LD_INT 0
13070: EQUAL
13071: AND
13072: IFFALSE 13101
// begin SetTag ( i , 1 ) ;
13074: LD_VAR 0 1
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
13086: LD_VAR 0 1
13090: PPUSH
13091: LD_INT 92
13093: PPUSH
13094: LD_INT 155
13096: PPUSH
13097: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
13101: LD_VAR 0 3
13105: PUSH
13106: LD_VAR 0 1
13110: PPUSH
13111: CALL_OW 256
13115: PUSH
13116: LD_INT 500
13118: GREATER
13119: AND
13120: PUSH
13121: LD_VAR 0 1
13125: PPUSH
13126: CALL_OW 110
13130: PUSH
13131: LD_INT 0
13133: EQUAL
13134: AND
13135: PUSH
13136: LD_VAR 0 1
13140: PPUSH
13141: CALL_OW 314
13145: NOT
13146: AND
13147: IFFALSE 13221
// begin if b then
13149: LD_VAR 0 3
13153: IFFALSE 13185
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13155: LD_VAR 0 1
13159: PPUSH
13160: LD_VAR 0 3
13164: PUSH
13165: LD_INT 1
13167: PPUSH
13168: LD_VAR 0 3
13172: PPUSH
13173: CALL_OW 12
13177: ARRAY
13178: PPUSH
13179: CALL_OW 130
13183: GO 13221
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13185: LD_VAR 0 1
13189: PPUSH
13190: LD_INT 94
13192: PPUSH
13193: LD_INT 165
13195: PPUSH
13196: CALL_OW 297
13200: PUSH
13201: LD_INT 8
13203: GREATER
13204: IFFALSE 13221
// ComMoveXY ( i , 94 , 165 ) ;
13206: LD_VAR 0 1
13210: PPUSH
13211: LD_INT 94
13213: PPUSH
13214: LD_INT 165
13216: PPUSH
13217: CALL_OW 111
// end ; end else
13221: GO 13488
// if GetWeapon ( i ) = ru_crane then
13223: LD_VAR 0 1
13227: PPUSH
13228: CALL_OW 264
13232: PUSH
13233: LD_INT 52
13235: EQUAL
13236: IFFALSE 13488
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13238: LD_VAR 0 1
13242: PPUSH
13243: CALL_OW 256
13247: PUSH
13248: LD_INT 1000
13250: EQUAL
13251: PUSH
13252: LD_VAR 0 1
13256: PPUSH
13257: CALL_OW 110
13261: PUSH
13262: LD_INT 1
13264: EQUAL
13265: AND
13266: IFFALSE 13292
// begin SetTag ( i , 0 ) ;
13268: LD_VAR 0 1
13272: PPUSH
13273: LD_INT 0
13275: PPUSH
13276: CALL_OW 109
// SetFuel ( i , 100 ) ;
13280: LD_VAR 0 1
13284: PPUSH
13285: LD_INT 100
13287: PPUSH
13288: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13292: LD_VAR 0 1
13296: PPUSH
13297: CALL_OW 256
13301: PUSH
13302: LD_INT 500
13304: LESSEQUAL
13305: PUSH
13306: LD_VAR 0 1
13310: PPUSH
13311: CALL_OW 110
13315: PUSH
13316: LD_INT 0
13318: EQUAL
13319: AND
13320: IFFALSE 13363
// begin SetTag ( i , 1 ) ;
13322: LD_VAR 0 1
13326: PPUSH
13327: LD_INT 1
13329: PPUSH
13330: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
13334: LD_VAR 0 1
13338: PPUSH
13339: LD_INT 83
13341: PPUSH
13342: LD_INT 135
13344: PPUSH
13345: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
13349: LD_VAR 0 1
13353: PPUSH
13354: CALL_OW 310
13358: PPUSH
13359: CALL 64479 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
13363: LD_VAR 0 1
13367: PPUSH
13368: CALL_OW 256
13372: PUSH
13373: LD_INT 500
13375: GREATER
13376: PUSH
13377: LD_VAR 0 1
13381: PPUSH
13382: CALL_OW 110
13386: PUSH
13387: LD_INT 0
13389: EQUAL
13390: AND
13391: PUSH
13392: LD_VAR 0 1
13396: PPUSH
13397: CALL_OW 311
13401: AND
13402: PUSH
13403: LD_VAR 0 1
13407: PPUSH
13408: CALL_OW 314
13412: NOT
13413: AND
13414: IFFALSE 13488
// begin if b then
13416: LD_VAR 0 3
13420: IFFALSE 13452
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13422: LD_VAR 0 1
13426: PPUSH
13427: LD_VAR 0 3
13431: PUSH
13432: LD_INT 1
13434: PPUSH
13435: LD_VAR 0 3
13439: PPUSH
13440: CALL_OW 12
13444: ARRAY
13445: PPUSH
13446: CALL_OW 130
13450: GO 13488
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13452: LD_VAR 0 1
13456: PPUSH
13457: LD_INT 94
13459: PPUSH
13460: LD_INT 165
13462: PPUSH
13463: CALL_OW 297
13467: PUSH
13468: LD_INT 8
13470: GREATER
13471: IFFALSE 13488
// ComMoveXY ( i , 94 , 165 ) ;
13473: LD_VAR 0 1
13477: PPUSH
13478: LD_INT 94
13480: PPUSH
13481: LD_INT 165
13483: PPUSH
13484: CALL_OW 111
// end ; end ; end ;
13488: GO 12984
13490: POP
13491: POP
// end ;
13492: PPOPN 6
13494: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13495: LD_EXP 23
13499: NOT
13500: PUSH
13501: LD_EXP 27
13505: NOT
13506: AND
13507: IFFALSE 14423
13509: GO 13511
13511: DISABLE
13512: LD_INT 0
13514: PPUSH
13515: PPUSH
13516: PPUSH
13517: PPUSH
// begin enable ;
13518: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
13519: LD_INT 35
13521: PUSH
13522: LD_INT 45
13524: PUSH
13525: LD_INT 55
13527: PUSH
13528: LD_INT 60
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: PUSH
13537: LD_OWVAR 67
13541: ARRAY
13542: PPUSH
13543: CALL_OW 13
13547: IFFALSE 13563
// waveStrength := waveStrength + 1 ;
13549: LD_ADDR_EXP 58
13553: PUSH
13554: LD_EXP 58
13558: PUSH
13559: LD_INT 1
13561: PLUS
13562: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 , 7 ] [ Difficulty ] then
13563: LD_EXP 58
13567: PUSH
13568: LD_INT 4
13570: PUSH
13571: LD_INT 5
13573: PUSH
13574: LD_INT 6
13576: PUSH
13577: LD_INT 7
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: PUSH
13586: LD_OWVAR 67
13590: ARRAY
13591: GREATER
13592: IFFALSE 13625
// begin waveStrength := waveStrength + Difficulty ;
13594: LD_ADDR_EXP 58
13598: PUSH
13599: LD_EXP 58
13603: PUSH
13604: LD_OWVAR 67
13608: PLUS
13609: ST_TO_ADDR
// disableAttackOnHeike := true ;
13610: LD_ADDR_EXP 27
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13618: LD_INT 6300
13620: PPUSH
13621: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13625: LD_EXP 27
13629: PUSH
13630: LD_OWVAR 67
13634: PUSH
13635: LD_INT 1
13637: GREATER
13638: AND
13639: IFFALSE 13848
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
13641: LD_ADDR_VAR 0 1
13645: PUSH
13646: DOUBLE
13647: LD_INT 1
13649: DEC
13650: ST_TO_ADDR
13651: LD_INT 3
13653: PUSH
13654: LD_INT 3
13656: PUSH
13657: LD_INT 4
13659: PUSH
13660: LD_INT 4
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: PUSH
13669: LD_OWVAR 67
13673: ARRAY
13674: PUSH
13675: FOR_TO
13676: IFFALSE 13846
// begin InitHc ;
13678: CALL_OW 19
// InitVc ;
13682: CALL_OW 20
// uc_side := 3 ;
13686: LD_ADDR_OWVAR 20
13690: PUSH
13691: LD_INT 3
13693: ST_TO_ADDR
// uc_nation := 3 ;
13694: LD_ADDR_OWVAR 21
13698: PUSH
13699: LD_INT 3
13701: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13702: LD_INT 0
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: LD_OWVAR 67
13712: PUSH
13713: LD_INT 2
13715: PLUS
13716: PPUSH
13717: CALL_OW 380
// un := CreateHuman ;
13721: LD_ADDR_VAR 0 2
13725: PUSH
13726: CALL_OW 44
13730: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13731: LD_VAR 0 2
13735: PPUSH
13736: LD_INT 160
13738: PPUSH
13739: LD_INT 3
13741: PPUSH
13742: LD_INT 2
13744: PPUSH
13745: LD_INT 0
13747: PPUSH
13748: CALL 64799 0 5
// SetClass ( un , class_bazooker ) ;
13752: LD_VAR 0 2
13756: PPUSH
13757: LD_INT 9
13759: PPUSH
13760: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13764: LD_ADDR_EXP 57
13768: PUSH
13769: LD_EXP 57
13773: PPUSH
13774: LD_EXP 57
13778: PUSH
13779: LD_INT 1
13781: PLUS
13782: PPUSH
13783: LD_VAR 0 2
13787: PPUSH
13788: CALL_OW 1
13792: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13793: LD_VAR 0 2
13797: PPUSH
13798: LD_INT 177
13800: PPUSH
13801: LD_INT 17
13803: PPUSH
13804: CALL_OW 111
// wait ( 0 0$2 ) ;
13808: LD_INT 70
13810: PPUSH
13811: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13815: LD_ADDR_VAR 0 4
13819: PUSH
13820: LD_VAR 0 4
13824: PPUSH
13825: LD_VAR 0 4
13829: PUSH
13830: LD_INT 1
13832: PLUS
13833: PPUSH
13834: LD_VAR 0 2
13838: PPUSH
13839: CALL_OW 1
13843: ST_TO_ADDR
// end ;
13844: GO 13675
13846: POP
13847: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
13848: LD_ADDR_VAR 0 1
13852: PUSH
13853: DOUBLE
13854: LD_INT 1
13856: DEC
13857: ST_TO_ADDR
13858: LD_INT 2
13860: PUSH
13861: LD_INT 3
13863: PUSH
13864: LD_INT 4
13866: PUSH
13867: LD_INT 5
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: PUSH
13876: LD_OWVAR 67
13880: ARRAY
13881: PUSH
13882: LD_EXP 58
13886: PLUS
13887: PUSH
13888: FOR_TO
13889: IFFALSE 14198
// begin InitHc ;
13891: CALL_OW 19
// InitVc ;
13895: CALL_OW 20
// uc_side := 3 ;
13899: LD_ADDR_OWVAR 20
13903: PUSH
13904: LD_INT 3
13906: ST_TO_ADDR
// uc_nation := 3 ;
13907: LD_ADDR_OWVAR 21
13911: PUSH
13912: LD_INT 3
13914: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13915: LD_INT 22
13917: PUSH
13918: LD_INT 23
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 1
13927: PPUSH
13928: LD_INT 2
13930: PPUSH
13931: CALL_OW 12
13935: ARRAY
13936: PPUSH
13937: LD_INT 1
13939: PPUSH
13940: LD_INT 1
13942: PPUSH
13943: LD_INT 44
13945: PUSH
13946: LD_INT 45
13948: PUSH
13949: LD_INT 43
13951: PUSH
13952: LD_INT 42
13954: PUSH
13955: LD_INT 44
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 1
13967: PPUSH
13968: LD_INT 5
13970: PPUSH
13971: CALL_OW 12
13975: ARRAY
13976: PPUSH
13977: LD_INT 99
13979: PPUSH
13980: CALL 30298 0 5
// veh := CreateVehicle ;
13984: LD_ADDR_VAR 0 3
13988: PUSH
13989: CALL_OW 45
13993: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
13994: LD_VAR 0 3
13998: PPUSH
13999: LD_INT 160
14001: PPUSH
14002: LD_INT 3
14004: PPUSH
14005: LD_INT 2
14007: PPUSH
14008: LD_INT 0
14010: PPUSH
14011: CALL 64799 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14015: LD_ADDR_EXP 57
14019: PUSH
14020: LD_EXP 57
14024: PPUSH
14025: LD_EXP 57
14029: PUSH
14030: LD_INT 1
14032: PLUS
14033: PPUSH
14034: LD_VAR 0 3
14038: PPUSH
14039: CALL_OW 1
14043: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14044: LD_INT 0
14046: PPUSH
14047: LD_INT 3
14049: PPUSH
14050: LD_OWVAR 67
14054: PUSH
14055: LD_INT 2
14057: PLUS
14058: PPUSH
14059: CALL_OW 380
// un := CreateHuman ;
14063: LD_ADDR_VAR 0 2
14067: PUSH
14068: CALL_OW 44
14072: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14073: LD_VAR 0 2
14077: PPUSH
14078: LD_VAR 0 3
14082: PPUSH
14083: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14087: LD_ADDR_EXP 57
14091: PUSH
14092: LD_EXP 57
14096: PPUSH
14097: LD_EXP 57
14101: PUSH
14102: LD_INT 1
14104: PLUS
14105: PPUSH
14106: LD_VAR 0 2
14110: PPUSH
14111: CALL_OW 1
14115: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
14116: LD_VAR 0 2
14120: PPUSH
14121: LD_INT 177
14123: PPUSH
14124: LD_INT 17
14126: PPUSH
14127: CALL_OW 111
// wait ( 0 0$2 ) ;
14131: LD_INT 70
14133: PPUSH
14134: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14138: LD_ADDR_VAR 0 4
14142: PUSH
14143: LD_VAR 0 4
14147: PPUSH
14148: LD_VAR 0 4
14152: PUSH
14153: LD_INT 1
14155: PLUS
14156: PPUSH
14157: LD_VAR 0 3
14161: PPUSH
14162: CALL_OW 1
14166: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14167: LD_ADDR_VAR 0 4
14171: PUSH
14172: LD_VAR 0 4
14176: PPUSH
14177: LD_VAR 0 4
14181: PUSH
14182: LD_INT 1
14184: PLUS
14185: PPUSH
14186: LD_VAR 0 2
14190: PPUSH
14191: CALL_OW 1
14195: ST_TO_ADDR
// end ;
14196: GO 13888
14198: POP
14199: POP
// for i in tmp do
14200: LD_ADDR_VAR 0 1
14204: PUSH
14205: LD_VAR 0 4
14209: PUSH
14210: FOR_IN
14211: IFFALSE 14301
// begin if Prob ( 50 ) then
14213: LD_INT 50
14215: PPUSH
14216: CALL_OW 13
14220: IFFALSE 14239
// ComAgressiveMove ( i , 206 , 73 ) else
14222: LD_VAR 0 1
14226: PPUSH
14227: LD_INT 206
14229: PPUSH
14230: LD_INT 73
14232: PPUSH
14233: CALL_OW 114
14237: GO 14299
// begin ComAgressiveMove ( i , 206 , 73 ) ;
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_INT 206
14246: PPUSH
14247: LD_INT 73
14249: PPUSH
14250: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_INT 257
14261: PPUSH
14262: LD_INT 105
14264: PPUSH
14265: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
14269: LD_VAR 0 1
14273: PPUSH
14274: LD_INT 227
14276: PPUSH
14277: LD_INT 97
14279: PPUSH
14280: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
14284: LD_VAR 0 1
14288: PPUSH
14289: LD_INT 206
14291: PPUSH
14292: LD_INT 73
14294: PPUSH
14295: CALL_OW 174
// end ; end ;
14299: GO 14210
14301: POP
14302: POP
// repeat wait ( 0 0$1 ) ;
14303: LD_INT 35
14305: PPUSH
14306: CALL_OW 67
// for i in tmp do
14310: LD_ADDR_VAR 0 1
14314: PUSH
14315: LD_VAR 0 4
14319: PUSH
14320: FOR_IN
14321: IFFALSE 14400
// if IsDead ( i ) then
14323: LD_VAR 0 1
14327: PPUSH
14328: CALL_OW 301
14332: IFFALSE 14352
// tmp := tmp diff i else
14334: LD_ADDR_VAR 0 4
14338: PUSH
14339: LD_VAR 0 4
14343: PUSH
14344: LD_VAR 0 1
14348: DIFF
14349: ST_TO_ADDR
14350: GO 14398
// if not HasTask ( i ) then
14352: LD_VAR 0 1
14356: PPUSH
14357: CALL_OW 314
14361: NOT
14362: IFFALSE 14398
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14364: LD_VAR 0 1
14368: PPUSH
14369: LD_INT 81
14371: PUSH
14372: LD_INT 3
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 69
14383: PPUSH
14384: LD_VAR 0 1
14388: PPUSH
14389: CALL_OW 74
14393: PPUSH
14394: CALL_OW 115
14398: GO 14320
14400: POP
14401: POP
// until not tmp ;
14402: LD_VAR 0 4
14406: NOT
14407: IFFALSE 14303
// if firstAttack then
14409: LD_EXP 28
14413: IFFALSE 14423
// firstAttack := false ;
14415: LD_ADDR_EXP 28
14419: PUSH
14420: LD_INT 0
14422: ST_TO_ADDR
// end ;
14423: PPOPN 4
14425: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
14426: LD_EXP 23
14430: NOT
14431: PUSH
14432: LD_EXP 3
14436: AND
14437: PUSH
14438: LD_EXP 16
14442: NOT
14443: AND
14444: IFFALSE 15284
14446: GO 14448
14448: DISABLE
14449: LD_INT 0
14451: PPUSH
14452: PPUSH
14453: PPUSH
14454: PPUSH
// begin enable ;
14455: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
14456: LD_ADDR_VAR 0 1
14460: PUSH
14461: DOUBLE
14462: LD_INT 1
14464: DEC
14465: ST_TO_ADDR
14466: LD_INT 1
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: LD_INT 2
14474: PUSH
14475: LD_INT 3
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: PUSH
14484: LD_OWVAR 67
14488: ARRAY
14489: PUSH
14490: FOR_TO
14491: IFFALSE 14792
// begin InitHc ;
14493: CALL_OW 19
// InitVc ;
14497: CALL_OW 20
// uc_side := 3 ;
14501: LD_ADDR_OWVAR 20
14505: PUSH
14506: LD_INT 3
14508: ST_TO_ADDR
// uc_nation := 3 ;
14509: LD_ADDR_OWVAR 21
14513: PUSH
14514: LD_INT 3
14516: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14517: LD_INT 22
14519: PUSH
14520: LD_INT 23
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 1
14529: PPUSH
14530: LD_INT 2
14532: PPUSH
14533: CALL_OW 12
14537: ARRAY
14538: PPUSH
14539: LD_INT 1
14541: PPUSH
14542: LD_INT 1
14544: PPUSH
14545: LD_INT 44
14547: PUSH
14548: LD_INT 43
14550: PUSH
14551: LD_INT 42
14553: PUSH
14554: LD_INT 44
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 1
14565: PPUSH
14566: LD_INT 4
14568: PPUSH
14569: CALL_OW 12
14573: ARRAY
14574: PPUSH
14575: LD_INT 99
14577: PPUSH
14578: CALL 30298 0 5
// veh := CreateVehicle ;
14582: LD_ADDR_VAR 0 3
14586: PUSH
14587: CALL_OW 45
14591: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14592: LD_VAR 0 3
14596: PPUSH
14597: LD_INT 5
14599: PPUSH
14600: LD_INT 3
14602: PPUSH
14603: LD_INT 2
14605: PPUSH
14606: LD_INT 0
14608: PPUSH
14609: CALL 64799 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14613: LD_ADDR_EXP 57
14617: PUSH
14618: LD_EXP 57
14622: PPUSH
14623: LD_EXP 57
14627: PUSH
14628: LD_INT 1
14630: PLUS
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: CALL_OW 1
14641: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14642: LD_INT 0
14644: PPUSH
14645: LD_INT 3
14647: PPUSH
14648: LD_OWVAR 67
14652: PPUSH
14653: CALL_OW 380
// un := CreateHuman ;
14657: LD_ADDR_VAR 0 2
14661: PUSH
14662: CALL_OW 44
14666: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14667: LD_VAR 0 2
14671: PPUSH
14672: LD_VAR 0 3
14676: PPUSH
14677: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14681: LD_ADDR_EXP 57
14685: PUSH
14686: LD_EXP 57
14690: PPUSH
14691: LD_EXP 57
14695: PUSH
14696: LD_INT 1
14698: PLUS
14699: PPUSH
14700: LD_VAR 0 2
14704: PPUSH
14705: CALL_OW 1
14709: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14710: LD_VAR 0 2
14714: PPUSH
14715: LD_INT 23
14717: PPUSH
14718: LD_INT 7
14720: PPUSH
14721: CALL_OW 111
// wait ( 0 0$2 ) ;
14725: LD_INT 70
14727: PPUSH
14728: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14732: LD_ADDR_VAR 0 4
14736: PUSH
14737: LD_VAR 0 4
14741: PPUSH
14742: LD_VAR 0 4
14746: PUSH
14747: LD_INT 1
14749: PLUS
14750: PPUSH
14751: LD_VAR 0 3
14755: PPUSH
14756: CALL_OW 1
14760: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14761: LD_ADDR_VAR 0 4
14765: PUSH
14766: LD_VAR 0 4
14770: PPUSH
14771: LD_VAR 0 4
14775: PUSH
14776: LD_INT 1
14778: PLUS
14779: PPUSH
14780: LD_VAR 0 2
14784: PPUSH
14785: CALL_OW 1
14789: ST_TO_ADDR
// end ;
14790: GO 14490
14792: POP
14793: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
14794: LD_ADDR_VAR 0 1
14798: PUSH
14799: DOUBLE
14800: LD_INT 1
14802: DEC
14803: ST_TO_ADDR
14804: LD_INT 3
14806: PUSH
14807: LD_INT 4
14809: PUSH
14810: LD_INT 4
14812: PUSH
14813: LD_INT 5
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: PUSH
14822: LD_OWVAR 67
14826: ARRAY
14827: PUSH
14828: LD_EXP 58
14832: PLUS
14833: PUSH
14834: FOR_TO
14835: IFFALSE 15144
// begin InitHc ;
14837: CALL_OW 19
// InitVc ;
14841: CALL_OW 20
// uc_side := 3 ;
14845: LD_ADDR_OWVAR 20
14849: PUSH
14850: LD_INT 3
14852: ST_TO_ADDR
// uc_nation := 3 ;
14853: LD_ADDR_OWVAR 21
14857: PUSH
14858: LD_INT 3
14860: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14861: LD_INT 22
14863: PUSH
14864: LD_INT 23
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 1
14873: PPUSH
14874: LD_INT 2
14876: PPUSH
14877: CALL_OW 12
14881: ARRAY
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: LD_INT 44
14891: PUSH
14892: LD_INT 45
14894: PUSH
14895: LD_INT 43
14897: PUSH
14898: LD_INT 42
14900: PUSH
14901: LD_INT 44
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 1
14913: PPUSH
14914: LD_INT 5
14916: PPUSH
14917: CALL_OW 12
14921: ARRAY
14922: PPUSH
14923: LD_INT 99
14925: PPUSH
14926: CALL 30298 0 5
// veh := CreateVehicle ;
14930: LD_ADDR_VAR 0 3
14934: PUSH
14935: CALL_OW 45
14939: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14940: LD_VAR 0 3
14944: PPUSH
14945: LD_INT 127
14947: PPUSH
14948: LD_INT 243
14950: PPUSH
14951: LD_INT 0
14953: PPUSH
14954: LD_INT 0
14956: PPUSH
14957: CALL 64799 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14961: LD_ADDR_EXP 57
14965: PUSH
14966: LD_EXP 57
14970: PPUSH
14971: LD_EXP 57
14975: PUSH
14976: LD_INT 1
14978: PLUS
14979: PPUSH
14980: LD_VAR 0 3
14984: PPUSH
14985: CALL_OW 1
14989: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14990: LD_INT 0
14992: PPUSH
14993: LD_INT 3
14995: PPUSH
14996: LD_OWVAR 67
15000: PUSH
15001: LD_INT 2
15003: PLUS
15004: PPUSH
15005: CALL_OW 380
// un := CreateHuman ;
15009: LD_ADDR_VAR 0 2
15013: PUSH
15014: CALL_OW 44
15018: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15019: LD_VAR 0 2
15023: PPUSH
15024: LD_VAR 0 3
15028: PPUSH
15029: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15033: LD_ADDR_EXP 57
15037: PUSH
15038: LD_EXP 57
15042: PPUSH
15043: LD_EXP 57
15047: PUSH
15048: LD_INT 1
15050: PLUS
15051: PPUSH
15052: LD_VAR 0 2
15056: PPUSH
15057: CALL_OW 1
15061: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
15062: LD_VAR 0 2
15066: PPUSH
15067: LD_INT 130
15069: PPUSH
15070: LD_INT 233
15072: PPUSH
15073: CALL_OW 111
// wait ( 0 0$2 ) ;
15077: LD_INT 70
15079: PPUSH
15080: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15084: LD_ADDR_VAR 0 4
15088: PUSH
15089: LD_VAR 0 4
15093: PPUSH
15094: LD_VAR 0 4
15098: PUSH
15099: LD_INT 1
15101: PLUS
15102: PPUSH
15103: LD_VAR 0 3
15107: PPUSH
15108: CALL_OW 1
15112: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15113: LD_ADDR_VAR 0 4
15117: PUSH
15118: LD_VAR 0 4
15122: PPUSH
15123: LD_VAR 0 4
15127: PUSH
15128: LD_INT 1
15130: PLUS
15131: PPUSH
15132: LD_VAR 0 2
15136: PPUSH
15137: CALL_OW 1
15141: ST_TO_ADDR
// end ;
15142: GO 14834
15144: POP
15145: POP
// for i in tmp do
15146: LD_ADDR_VAR 0 1
15150: PUSH
15151: LD_VAR 0 4
15155: PUSH
15156: FOR_IN
15157: IFFALSE 15176
// ComAgressiveMove ( i , 76 , 49 ) ;
15159: LD_VAR 0 1
15163: PPUSH
15164: LD_INT 76
15166: PPUSH
15167: LD_INT 49
15169: PPUSH
15170: CALL_OW 114
15174: GO 15156
15176: POP
15177: POP
// repeat wait ( 0 0$1 ) ;
15178: LD_INT 35
15180: PPUSH
15181: CALL_OW 67
// for i in tmp do
15185: LD_ADDR_VAR 0 1
15189: PUSH
15190: LD_VAR 0 4
15194: PUSH
15195: FOR_IN
15196: IFFALSE 15275
// if IsDead ( i ) then
15198: LD_VAR 0 1
15202: PPUSH
15203: CALL_OW 301
15207: IFFALSE 15227
// tmp := tmp diff i else
15209: LD_ADDR_VAR 0 4
15213: PUSH
15214: LD_VAR 0 4
15218: PUSH
15219: LD_VAR 0 1
15223: DIFF
15224: ST_TO_ADDR
15225: GO 15273
// if not HasTask ( i ) then
15227: LD_VAR 0 1
15231: PPUSH
15232: CALL_OW 314
15236: NOT
15237: IFFALSE 15273
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15239: LD_VAR 0 1
15243: PPUSH
15244: LD_INT 81
15246: PUSH
15247: LD_INT 3
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PPUSH
15254: CALL_OW 69
15258: PPUSH
15259: LD_VAR 0 1
15263: PPUSH
15264: CALL_OW 74
15268: PPUSH
15269: CALL_OW 115
15273: GO 15195
15275: POP
15276: POP
// until not tmp ;
15277: LD_VAR 0 4
15281: NOT
15282: IFFALSE 15178
// end ;
15284: PPOPN 4
15286: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
15287: LD_EXP 6
15291: IFFALSE 15762
15293: GO 15295
15295: DISABLE
15296: LD_INT 0
15298: PPUSH
15299: PPUSH
15300: PPUSH
15301: PPUSH
// begin wait ( 3 3$00 ) ;
15302: LD_INT 6300
15304: PPUSH
15305: CALL_OW 67
// for i := 1 to 3 do
15309: LD_ADDR_VAR 0 1
15313: PUSH
15314: DOUBLE
15315: LD_INT 1
15317: DEC
15318: ST_TO_ADDR
15319: LD_INT 3
15321: PUSH
15322: FOR_TO
15323: IFFALSE 15622
// begin InitHc ;
15325: CALL_OW 19
// InitVc ;
15329: CALL_OW 20
// uc_side := 3 ;
15333: LD_ADDR_OWVAR 20
15337: PUSH
15338: LD_INT 3
15340: ST_TO_ADDR
// uc_nation := 3 ;
15341: LD_ADDR_OWVAR 21
15345: PUSH
15346: LD_INT 3
15348: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
15349: LD_INT 22
15351: PUSH
15352: LD_INT 23
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 1
15361: PPUSH
15362: LD_INT 2
15364: PPUSH
15365: CALL_OW 12
15369: ARRAY
15370: PPUSH
15371: LD_INT 1
15373: PPUSH
15374: LD_INT 1
15376: PPUSH
15377: LD_INT 44
15379: PUSH
15380: LD_INT 43
15382: PUSH
15383: LD_INT 42
15385: PUSH
15386: LD_INT 44
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 1
15397: PPUSH
15398: LD_INT 4
15400: PPUSH
15401: CALL_OW 12
15405: ARRAY
15406: PPUSH
15407: LD_INT 99
15409: PPUSH
15410: CALL 30298 0 5
// veh := CreateVehicle ;
15414: LD_ADDR_VAR 0 3
15418: PUSH
15419: CALL_OW 45
15423: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
15424: LD_VAR 0 3
15428: PPUSH
15429: LD_INT 293
15431: PPUSH
15432: LD_INT 246
15434: PPUSH
15435: LD_INT 5
15437: PPUSH
15438: LD_INT 0
15440: PPUSH
15441: CALL 64799 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
15445: LD_ADDR_EXP 57
15449: PUSH
15450: LD_EXP 57
15454: PPUSH
15455: LD_EXP 57
15459: PUSH
15460: LD_INT 1
15462: PLUS
15463: PPUSH
15464: LD_VAR 0 3
15468: PPUSH
15469: CALL_OW 1
15473: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15474: LD_INT 0
15476: PPUSH
15477: LD_INT 3
15479: PPUSH
15480: LD_INT 3
15482: PPUSH
15483: CALL_OW 380
// un := CreateHuman ;
15487: LD_ADDR_VAR 0 2
15491: PUSH
15492: CALL_OW 44
15496: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15497: LD_VAR 0 2
15501: PPUSH
15502: LD_VAR 0 3
15506: PPUSH
15507: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15511: LD_ADDR_EXP 57
15515: PUSH
15516: LD_EXP 57
15520: PPUSH
15521: LD_EXP 57
15525: PUSH
15526: LD_INT 1
15528: PLUS
15529: PPUSH
15530: LD_VAR 0 2
15534: PPUSH
15535: CALL_OW 1
15539: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15540: LD_VAR 0 2
15544: PPUSH
15545: LD_INT 273
15547: PPUSH
15548: LD_INT 227
15550: PPUSH
15551: CALL_OW 111
// wait ( 0 0$2 ) ;
15555: LD_INT 70
15557: PPUSH
15558: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15562: LD_ADDR_VAR 0 4
15566: PUSH
15567: LD_VAR 0 4
15571: PPUSH
15572: LD_VAR 0 4
15576: PUSH
15577: LD_INT 1
15579: PLUS
15580: PPUSH
15581: LD_VAR 0 3
15585: PPUSH
15586: CALL_OW 1
15590: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15591: LD_ADDR_VAR 0 4
15595: PUSH
15596: LD_VAR 0 4
15600: PPUSH
15601: LD_VAR 0 4
15605: PUSH
15606: LD_INT 1
15608: PLUS
15609: PPUSH
15610: LD_VAR 0 2
15614: PPUSH
15615: CALL_OW 1
15619: ST_TO_ADDR
// end ;
15620: GO 15322
15622: POP
15623: POP
// for i in tmp do
15624: LD_ADDR_VAR 0 1
15628: PUSH
15629: LD_VAR 0 4
15633: PUSH
15634: FOR_IN
15635: IFFALSE 15654
// ComAgressiveMove ( i , 330 , 231 ) ;
15637: LD_VAR 0 1
15641: PPUSH
15642: LD_INT 330
15644: PPUSH
15645: LD_INT 231
15647: PPUSH
15648: CALL_OW 114
15652: GO 15634
15654: POP
15655: POP
// repeat wait ( 0 0$1 ) ;
15656: LD_INT 35
15658: PPUSH
15659: CALL_OW 67
// for i in tmp do
15663: LD_ADDR_VAR 0 1
15667: PUSH
15668: LD_VAR 0 4
15672: PUSH
15673: FOR_IN
15674: IFFALSE 15753
// if IsDead ( i ) then
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL_OW 301
15685: IFFALSE 15705
// tmp := tmp diff i else
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_VAR 0 4
15696: PUSH
15697: LD_VAR 0 1
15701: DIFF
15702: ST_TO_ADDR
15703: GO 15751
// if not HasTask ( i ) then
15705: LD_VAR 0 1
15709: PPUSH
15710: CALL_OW 314
15714: NOT
15715: IFFALSE 15751
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15717: LD_VAR 0 1
15721: PPUSH
15722: LD_INT 81
15724: PUSH
15725: LD_INT 3
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: PPUSH
15737: LD_VAR 0 1
15741: PPUSH
15742: CALL_OW 74
15746: PPUSH
15747: CALL_OW 115
15751: GO 15673
15753: POP
15754: POP
// until not tmp ;
15755: LD_VAR 0 4
15759: NOT
15760: IFFALSE 15656
// end ;
15762: PPOPN 4
15764: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15765: LD_INT 3
15767: PUSH
15768: LD_INT 22
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: LD_INT 32
15784: PUSH
15785: LD_INT 1
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PPUSH
15796: CALL_OW 69
15800: IFFALSE 15884
15802: GO 15804
15804: DISABLE
15805: LD_INT 0
15807: PPUSH
// begin enable ;
15808: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15809: LD_ADDR_VAR 0 1
15813: PUSH
15814: LD_INT 3
15816: PUSH
15817: LD_INT 22
15819: PUSH
15820: LD_INT 2
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 32
15833: PUSH
15834: LD_INT 1
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PPUSH
15845: CALL_OW 69
15849: PUSH
15850: FOR_IN
15851: IFFALSE 15882
// if GetFuel ( i ) < 3 then
15853: LD_VAR 0 1
15857: PPUSH
15858: CALL_OW 261
15862: PUSH
15863: LD_INT 3
15865: LESS
15866: IFFALSE 15880
// SetFuel ( i , 3 ) ;
15868: LD_VAR 0 1
15872: PPUSH
15873: LD_INT 3
15875: PPUSH
15876: CALL_OW 240
15880: GO 15850
15882: POP
15883: POP
// end ; end_of_file
15884: PPOPN 1
15886: END
// export function Action ; begin
15887: LD_INT 0
15889: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15890: LD_INT 2
15892: PPUSH
15893: LD_INT 4
15895: PPUSH
15896: CALL_OW 332
// Video ( true ) ;
15900: LD_INT 1
15902: PPUSH
15903: CALL 62631 0 1
// music_nat := 3 ;
15907: LD_ADDR_OWVAR 71
15911: PUSH
15912: LD_INT 3
15914: ST_TO_ADDR
// music_class := music_recon ;
15915: LD_ADDR_OWVAR 72
15919: PUSH
15920: LD_INT 3
15922: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
15923: LD_INT 213
15925: PPUSH
15926: LD_INT 89
15928: PPUSH
15929: CALL_OW 86
// if not debug then
15933: LD_EXP 1
15937: NOT
15938: IFFALSE 15972
// begin if Kaia and Olaf then
15940: LD_EXP 35
15944: PUSH
15945: LD_EXP 39
15949: AND
15950: IFFALSE 15956
// SceneKaiaWithOlaf ;
15952: CALL 16011 0 0
// if Givi and Kamil then
15956: LD_EXP 31
15960: PUSH
15961: LD_EXP 34
15965: AND
15966: IFFALSE 15972
// SceneWithGiviAndKamil ;
15968: CALL 16582 0 0
// end ; Video ( false ) ;
15972: LD_INT 0
15974: PPUSH
15975: CALL 62631 0 1
// ChangeMissionObjectives ( M1 ) ;
15979: LD_STRING M1
15981: PPUSH
15982: CALL_OW 337
// music_nat := music_auto ;
15986: LD_ADDR_OWVAR 71
15990: PUSH
15991: LD_INT 0
15993: ST_TO_ADDR
// music_class := music_auto ;
15994: LD_ADDR_OWVAR 72
15998: PUSH
15999: LD_INT 0
16001: ST_TO_ADDR
// SaveForQuickRestart ;
16002: CALL_OW 22
// end ;
16006: LD_VAR 0 1
16010: RET
// export function SceneKaiaWithOlaf ; begin
16011: LD_INT 0
16013: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
16014: LD_INT 22
16016: PUSH
16017: LD_INT 2
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 30
16026: PUSH
16027: LD_INT 3
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PPUSH
16038: CALL_OW 69
16042: PPUSH
16043: LD_INT 14
16045: PPUSH
16046: LD_INT 1
16048: PPUSH
16049: LD_INT 1
16051: PPUSH
16052: LD_INT 26
16054: PPUSH
16055: CALL_OW 125
// wait ( 0 0$1 ) ;
16059: LD_INT 35
16061: PPUSH
16062: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
16066: LD_EXP 35
16070: PPUSH
16071: LD_STRING DK-Mem-1
16073: PPUSH
16074: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
16078: LD_EXP 35
16082: PPUSH
16083: LD_STRING DK-Mem-2
16085: PPUSH
16086: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
16090: LD_EXP 39
16094: PPUSH
16095: LD_STRING DO-Mem-3
16097: PPUSH
16098: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
16102: LD_EXP 35
16106: PPUSH
16107: LD_STRING DK-Mem-4
16109: PPUSH
16110: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
16114: LD_EXP 39
16118: PPUSH
16119: LD_STRING DO-Mem-5
16121: PPUSH
16122: CALL_OW 88
// wait ( 0 0$2 ) ;
16126: LD_INT 70
16128: PPUSH
16129: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
16133: LD_INT 22
16135: PUSH
16136: LD_INT 2
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 30
16145: PUSH
16146: LD_INT 3
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PPUSH
16157: CALL_OW 69
16161: PPUSH
16162: LD_INT 90
16164: PPUSH
16165: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
16169: LD_EXP 39
16173: PPUSH
16174: LD_STRING DO-Mem-6
16176: PPUSH
16177: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
16181: LD_EXP 35
16185: PPUSH
16186: LD_STRING DK-Mem-7
16188: PPUSH
16189: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
16193: LD_EXP 30
16197: PPUSH
16198: LD_EXP 35
16202: PPUSH
16203: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
16207: LD_EXP 30
16211: PPUSH
16212: LD_STRING DH-Mem-8
16214: PPUSH
16215: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
16219: LD_EXP 35
16223: PUSH
16224: LD_EXP 39
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PPUSH
16233: LD_EXP 30
16237: PPUSH
16238: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
16242: LD_EXP 39
16246: PPUSH
16247: LD_STRING DO-Mem-9
16249: PPUSH
16250: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
16254: LD_EXP 39
16258: PPUSH
16259: LD_STRING DO-Mem-10
16261: PPUSH
16262: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
16266: LD_EXP 39
16270: PPUSH
16271: LD_STRING DO-Mem-11
16273: PPUSH
16274: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
16278: LD_EXP 39
16282: PPUSH
16283: LD_STRING DO-Mem-12
16285: PPUSH
16286: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
16290: LD_EXP 35
16294: PPUSH
16295: LD_STRING DK-Mem-13
16297: PPUSH
16298: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
16302: LD_EXP 35
16306: PPUSH
16307: LD_STRING DK-Mem-14
16309: PPUSH
16310: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
16314: LD_EXP 35
16318: PPUSH
16319: LD_STRING DK-Mem-15
16321: PPUSH
16322: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
16326: LD_EXP 35
16330: PPUSH
16331: LD_STRING DK-Mem-16
16333: PPUSH
16334: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
16338: LD_EXP 35
16342: PPUSH
16343: LD_STRING DK-Mem-17
16345: PPUSH
16346: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
16350: LD_EXP 39
16354: PPUSH
16355: LD_EXP 35
16359: PPUSH
16360: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
16364: LD_EXP 39
16368: PPUSH
16369: LD_STRING DO-Mem-18
16371: PPUSH
16372: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
16376: LD_EXP 35
16380: PPUSH
16381: LD_EXP 39
16385: PPUSH
16386: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
16390: LD_EXP 35
16394: PPUSH
16395: LD_STRING DK-Mem-19
16397: PPUSH
16398: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
16402: LD_EXP 39
16406: PPUSH
16407: LD_INT 214
16409: PPUSH
16410: LD_INT 86
16412: PPUSH
16413: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16417: LD_EXP 39
16421: PPUSH
16422: LD_EXP 35
16426: PPUSH
16427: CALL_OW 179
// if Givi then
16431: LD_EXP 31
16435: IFFALSE 16466
// begin ComMoveXY ( Givi , 217 , 86 ) ;
16437: LD_EXP 31
16441: PPUSH
16442: LD_INT 217
16444: PPUSH
16445: LD_INT 86
16447: PPUSH
16448: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
16452: LD_EXP 31
16456: PPUSH
16457: LD_EXP 30
16461: PPUSH
16462: CALL_OW 179
// end ; if Kamil then
16466: LD_EXP 34
16470: IFFALSE 16510
// begin ComExit ( Kamil ) ;
16472: LD_EXP 34
16476: PPUSH
16477: CALL 63057 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
16481: LD_EXP 34
16485: PPUSH
16486: LD_INT 212
16488: PPUSH
16489: LD_INT 86
16491: PPUSH
16492: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
16496: LD_EXP 34
16500: PPUSH
16501: LD_EXP 30
16505: PPUSH
16506: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16510: LD_INT 70
16512: PPUSH
16513: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16517: LD_EXP 30
16521: PPUSH
16522: LD_STRING DH-Mem-20
16524: PPUSH
16525: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16529: LD_EXP 39
16533: PPUSH
16534: LD_INT 215
16536: PPUSH
16537: LD_INT 87
16539: PPUSH
16540: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16544: LD_EXP 39
16548: PPUSH
16549: LD_EXP 35
16553: PPUSH
16554: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16558: LD_EXP 35
16562: PPUSH
16563: LD_STRING DK-Mem-21
16565: PPUSH
16566: CALL_OW 88
// wait ( 0 0$2 ) ;
16570: LD_INT 70
16572: PPUSH
16573: CALL_OW 67
// end ;
16577: LD_VAR 0 1
16581: RET
// export function SceneWithGiviAndKamil ; begin
16582: LD_INT 0
16584: PPUSH
// if Markov then
16585: LD_EXP 37
16589: IFFALSE 16640
// begin if IsInUnit ( Markov ) then
16591: LD_EXP 37
16595: PPUSH
16596: CALL_OW 310
16600: IFFALSE 16611
// ComExit ( Markov ) ;
16602: LD_EXP 37
16606: PPUSH
16607: CALL 63057 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16611: LD_EXP 37
16615: PPUSH
16616: LD_INT 212
16618: PPUSH
16619: LD_INT 88
16621: PPUSH
16622: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16626: LD_EXP 37
16630: PPUSH
16631: LD_EXP 30
16635: PPUSH
16636: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16640: LD_EXP 31
16644: PPUSH
16645: LD_STRING DG-Obj-1
16647: PPUSH
16648: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16652: LD_EXP 34
16656: PPUSH
16657: LD_STRING DKam-Obj-2
16659: PPUSH
16660: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16664: LD_EXP 30
16668: PPUSH
16669: LD_EXP 34
16673: PPUSH
16674: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16678: LD_EXP 34
16682: PPUSH
16683: LD_STRING DKam-Obj-3
16685: PPUSH
16686: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16690: LD_EXP 37
16694: PPUSH
16695: LD_STRING DMar-Obj-4
16697: PPUSH
16698: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16702: LD_EXP 34
16706: PPUSH
16707: LD_STRING DKam-Obj-6
16709: PPUSH
16710: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16714: LD_EXP 34
16718: PPUSH
16719: LD_STRING DKam-Obj-7
16721: PPUSH
16722: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16726: LD_EXP 34
16730: PPUSH
16731: LD_STRING DKam-Obj-8
16733: PPUSH
16734: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16738: LD_EXP 30
16742: PPUSH
16743: LD_STRING DH-Obj-9
16745: PPUSH
16746: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16750: LD_EXP 34
16754: PPUSH
16755: LD_STRING DKam-Obj-10
16757: PPUSH
16758: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16762: LD_EXP 34
16766: PPUSH
16767: LD_STRING DKam-Obj-11
16769: PPUSH
16770: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16774: LD_EXP 37
16778: PPUSH
16779: LD_STRING DMar-Obj-12
16781: PPUSH
16782: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16786: LD_EXP 37
16790: PPUSH
16791: LD_STRING DMar-Obj-13
16793: PPUSH
16794: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16798: LD_EXP 37
16802: PPUSH
16803: LD_STRING DMar-Obj-14
16805: PPUSH
16806: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16810: LD_EXP 39
16814: PPUSH
16815: LD_STRING DO-Obj-15
16817: PPUSH
16818: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16822: LD_EXP 39
16826: PPUSH
16827: LD_STRING DO-Obj-16
16829: PPUSH
16830: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16834: LD_EXP 30
16838: PPUSH
16839: LD_STRING DH-Obj-17
16841: PPUSH
16842: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16846: LD_EXP 39
16850: PPUSH
16851: LD_STRING DO-Obj-18
16853: PPUSH
16854: CALL_OW 88
// end ;
16858: LD_VAR 0 1
16862: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16863: LD_INT 34
16865: PUSH
16866: LD_INT 92
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PPUSH
16873: CALL_OW 69
16877: IFFALSE 17072
16879: GO 16881
16881: DISABLE
16882: LD_INT 0
16884: PPUSH
// begin wait ( 0 0$2 ) ;
16885: LD_INT 70
16887: PPUSH
16888: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16892: LD_INT 34
16894: PUSH
16895: LD_INT 92
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL_OW 69
16906: PPUSH
16907: CALL_OW 87
// DialogueOn ;
16911: CALL_OW 6
// if Markov then
16915: LD_EXP 37
16919: IFFALSE 16947
// begin Say ( Markov , DMar-Grn-1 ) ;
16921: LD_EXP 37
16925: PPUSH
16926: LD_STRING DMar-Grn-1
16928: PPUSH
16929: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16933: LD_EXP 30
16937: PPUSH
16938: LD_STRING DH-Grn-2
16940: PPUSH
16941: CALL_OW 88
// end else
16945: GO 17046
// if heikeSecondSquad then
16947: LD_EXP 45
16951: IFFALSE 17046
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16953: LD_ADDR_VAR 0 1
16957: PUSH
16958: LD_EXP 45
16962: PUSH
16963: LD_INT 1
16965: PPUSH
16966: LD_EXP 45
16970: PPUSH
16971: CALL_OW 12
16975: ARRAY
16976: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL_OW 258
16986: PUSH
16987: LD_INT 1
16989: DOUBLE
16990: EQUAL
16991: IFTRUE 16995
16993: GO 17010
16995: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
16996: LD_VAR 0 1
17000: PPUSH
17001: LD_STRING DArm-Grn-1
17003: PPUSH
17004: CALL_OW 88
17008: GO 17034
17010: LD_INT 2
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17033
17018: POP
// Say ( random , DArf-Grn-1 ) ; end ;
17019: LD_VAR 0 1
17023: PPUSH
17024: LD_STRING DArf-Grn-1
17026: PPUSH
17027: CALL_OW 88
17031: GO 17034
17033: POP
// Say ( Heike , DH-Grn-2 ) ;
17034: LD_EXP 30
17038: PPUSH
17039: LD_STRING DH-Grn-2
17041: PPUSH
17042: CALL_OW 88
// end ; DialogueOff ;
17046: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
17050: LD_STRING MortarConstructed
17052: PPUSH
17053: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
17057: LD_STRING SelfPropelledMortar
17059: PPUSH
17060: CALL_OW 339
// mortarConstructed := true ;
17064: LD_ADDR_EXP 15
17068: PUSH
17069: LD_INT 1
17071: ST_TO_ADDR
// end ;
17072: PPOPN 1
17074: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
17075: LD_INT 2
17077: PPUSH
17078: LD_INT 8
17080: PPUSH
17081: CALL_OW 294
17085: IFFALSE 17228
17087: GO 17089
17089: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
17090: LD_INT 200
17092: PPUSH
17093: LD_INT 162
17095: PPUSH
17096: LD_INT 2
17098: PPUSH
17099: LD_INT 6
17101: NEG
17102: PPUSH
17103: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
17107: LD_INT 200
17109: PPUSH
17110: LD_INT 162
17112: PPUSH
17113: LD_INT 2
17115: PPUSH
17116: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
17120: LD_INT 200
17122: PPUSH
17123: LD_INT 162
17125: PPUSH
17126: CALL_OW 84
// if not IsOk ( Kurt ) then
17130: LD_EXP 41
17134: PPUSH
17135: CALL_OW 302
17139: NOT
17140: IFFALSE 17144
// exit ;
17142: GO 17228
// Say ( Kurt , DKs-Otpst-2-1 ) ;
17144: LD_EXP 41
17148: PPUSH
17149: LD_STRING DKs-Otpst-2-1
17151: PPUSH
17152: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
17156: LD_EXP 35
17160: PPUSH
17161: LD_STRING DK-Otpst-2-2
17163: PPUSH
17164: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
17168: LD_EXP 41
17172: PPUSH
17173: LD_STRING DKs-Otpst-2-3
17175: PPUSH
17176: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
17180: LD_EXP 41
17184: PPUSH
17185: LD_STRING DKs-Otpst-2-4
17187: PPUSH
17188: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
17192: LD_EXP 41
17196: PPUSH
17197: LD_STRING DKs-Otpst-2-5
17199: PPUSH
17200: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
17204: LD_EXP 34
17208: PPUSH
17209: LD_STRING DKam-Otpst-2-6
17211: PPUSH
17212: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
17216: LD_EXP 41
17220: PPUSH
17221: LD_STRING DKs-Otpst-2-7
17223: PPUSH
17224: CALL_OW 88
// end ;
17228: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
17229: LD_INT 8
17231: PPUSH
17232: LD_INT 22
17234: PUSH
17235: LD_INT 3
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 21
17244: PUSH
17245: LD_INT 3
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 70
17260: NOT
17261: PUSH
17262: LD_EXP 3
17266: NOT
17267: AND
17268: IFFALSE 17516
17270: GO 17272
17272: DISABLE
17273: LD_INT 0
17275: PPUSH
// begin outpostDestroyed := true ;
17276: LD_ADDR_EXP 4
17280: PUSH
17281: LD_INT 1
17283: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
17284: LD_INT 22
17286: PUSH
17287: LD_INT 2
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 34
17296: PUSH
17297: LD_INT 92
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 92
17306: PUSH
17307: LD_INT 195
17309: PUSH
17310: LD_INT 164
17312: PUSH
17313: LD_INT 12
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: PPUSH
17327: CALL_OW 69
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17516
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
17336: LD_EXP 31
17340: PPUSH
17341: CALL_OW 302
17345: NOT
17346: PUSH
17347: LD_EXP 35
17351: PPUSH
17352: CALL_OW 302
17356: NOT
17357: OR
17358: IFFALSE 17362
// exit ;
17360: GO 17516
// Say ( Givi , DG-Otpst-1-1 ) ;
17362: LD_EXP 31
17366: PPUSH
17367: LD_STRING DG-Otpst-1-1
17369: PPUSH
17370: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
17374: LD_EXP 35
17378: PPUSH
17379: LD_STRING DK-Otpst-1-2
17381: PPUSH
17382: CALL_OW 88
// if IsOk ( Markov ) then
17386: LD_EXP 37
17390: PPUSH
17391: CALL_OW 302
17395: IFFALSE 17423
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
17397: LD_EXP 37
17401: PPUSH
17402: LD_STRING DMar-Otpst-1-3
17404: PPUSH
17405: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
17409: LD_EXP 37
17413: PPUSH
17414: LD_STRING DMar-Otpst-1-4
17416: PPUSH
17417: CALL_OW 88
// end else
17421: GO 17504
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
17423: LD_ADDR_VAR 0 1
17427: PUSH
17428: LD_EXP 45
17432: PUSH
17433: LD_INT 1
17435: PPUSH
17436: LD_EXP 45
17440: PPUSH
17441: CALL_OW 12
17445: ARRAY
17446: ST_TO_ADDR
// case GetSex ( random ) of 1 :
17447: LD_VAR 0 1
17451: PPUSH
17452: CALL_OW 258
17456: PUSH
17457: LD_INT 1
17459: DOUBLE
17460: EQUAL
17461: IFTRUE 17465
17463: GO 17480
17465: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
17466: LD_VAR 0 1
17470: PPUSH
17471: LD_STRING DArm-Otpst-1-a-3
17473: PPUSH
17474: CALL_OW 88
17478: GO 17504
17480: LD_INT 2
17482: DOUBLE
17483: EQUAL
17484: IFTRUE 17488
17486: GO 17503
17488: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
17489: LD_VAR 0 1
17493: PPUSH
17494: LD_STRING DArf-Otpst-1-a-3
17496: PPUSH
17497: CALL_OW 88
17501: GO 17504
17503: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17504: LD_EXP 31
17508: PPUSH
17509: LD_STRING DG-Otpst-1-5
17511: PPUSH
17512: CALL_OW 88
// end ;
17516: PPOPN 1
17518: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17519: LD_EXP 35
17523: PPUSH
17524: CALL_OW 256
17528: PUSH
17529: LD_INT 10
17531: LESS
17532: IFFALSE 17646
17534: GO 17536
17536: DISABLE
// begin DialogueOn ;
17537: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17541: LD_EXP 35
17545: PPUSH
17546: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17550: LD_EXP 35
17554: PPUSH
17555: LD_STRING DK-Dead-1
17557: PPUSH
17558: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17562: LD_EXP 30
17566: PPUSH
17567: LD_STRING DH-Dead-2
17569: PPUSH
17570: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17574: LD_EXP 35
17578: PPUSH
17579: LD_STRING DK-Dead-3
17581: PPUSH
17582: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17586: LD_EXP 30
17590: PPUSH
17591: LD_STRING DH-Dead-4
17593: PPUSH
17594: CALL_OW 88
// if IsOk ( Mike ) then
17598: LD_EXP 32
17602: PPUSH
17603: CALL_OW 302
17607: IFFALSE 17633
// begin Say ( Mike , DM-Dead-5 ) ;
17609: LD_EXP 32
17613: PPUSH
17614: LD_STRING DM-Dead-5
17616: PPUSH
17617: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17621: LD_EXP 30
17625: PPUSH
17626: LD_STRING DH-Dead-6
17628: PPUSH
17629: CALL_OW 88
// end ; DialogueOff ;
17633: CALL_OW 7
// KillUnit ( Kaia ) ;
17637: LD_EXP 35
17641: PPUSH
17642: CALL_OW 66
// end ;
17646: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17647: LD_OWVAR 1
17651: PUSH
17652: LD_INT 21700
17654: GREATEREQUAL
17655: PUSH
17656: LD_EXP 5
17660: PUSH
17661: LD_INT 5
17663: GREATER
17664: OR
17665: PUSH
17666: LD_INT 22
17668: PUSH
17669: LD_INT 2
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 92
17678: PUSH
17679: LD_INT 103
17681: PUSH
17682: LD_INT 81
17684: PUSH
17685: LD_INT 20
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PPUSH
17698: CALL_OW 69
17702: OR
17703: IFFALSE 18110
17705: GO 17707
17707: DISABLE
17708: LD_INT 0
17710: PPUSH
17711: PPUSH
17712: PPUSH
// begin PrepareRolfSquad ;
17713: CALL 2372 0 0
// dep := HexInfo ( 86 , 54 ) ;
17717: LD_ADDR_VAR 0 3
17721: PUSH
17722: LD_INT 86
17724: PPUSH
17725: LD_INT 54
17727: PPUSH
17728: CALL_OW 428
17732: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17733: LD_VAR 0 3
17737: PPUSH
17738: CALL_OW 274
17742: PPUSH
17743: LD_INT 1
17745: PPUSH
17746: LD_INT 300
17748: PPUSH
17749: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17753: LD_VAR 0 3
17757: PPUSH
17758: CALL_OW 274
17762: PPUSH
17763: LD_INT 2
17765: PPUSH
17766: LD_INT 300
17768: PPUSH
17769: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17773: LD_EXP 47
17777: PPUSH
17778: LD_INT 79
17780: PPUSH
17781: LD_INT 52
17783: PPUSH
17784: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17788: LD_INT 35
17790: PPUSH
17791: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17795: LD_INT 12
17797: PPUSH
17798: LD_INT 22
17800: PUSH
17801: LD_INT 3
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 21
17810: PUSH
17811: LD_INT 1
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PPUSH
17822: CALL_OW 70
17826: NOT
17827: IFFALSE 17788
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17829: LD_ADDR_VAR 0 2
17833: PUSH
17834: LD_INT 12
17836: PPUSH
17837: LD_INT 21
17839: PUSH
17840: LD_INT 3
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 70
17851: ST_TO_ADDR
// for i in tmp do
17852: LD_ADDR_VAR 0 1
17856: PUSH
17857: LD_VAR 0 2
17861: PUSH
17862: FOR_IN
17863: IFFALSE 17879
// SetSide ( i , 8 ) ;
17865: LD_VAR 0 1
17869: PPUSH
17870: LD_INT 8
17872: PPUSH
17873: CALL_OW 235
17877: GO 17862
17879: POP
17880: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17881: LD_INT 63
17883: PPUSH
17884: LD_INT 42
17886: PPUSH
17887: CALL_OW 428
17891: PPUSH
17892: LD_INT 320
17894: PPUSH
17895: CALL_OW 234
// wait ( 0 0$10 ) ;
17899: LD_INT 350
17901: PPUSH
17902: CALL_OW 67
// DialogueOn ;
17906: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17910: LD_INT 8
17912: PPUSH
17913: LD_INT 2
17915: PPUSH
17916: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17920: LD_INT 86
17922: PPUSH
17923: LD_INT 54
17925: PPUSH
17926: CALL_OW 428
17930: PPUSH
17931: LD_STRING antwerp
17933: PPUSH
17934: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17938: LD_EXP 43
17942: PPUSH
17943: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17947: LD_EXP 43
17951: PPUSH
17952: LD_STRING DRf-rast-1
17954: PPUSH
17955: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17959: LD_EXP 30
17963: PPUSH
17964: LD_STRING DH-rast-2
17966: PPUSH
17967: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17971: LD_EXP 43
17975: PPUSH
17976: LD_STRING DRf-rast-3
17978: PPUSH
17979: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17983: LD_EXP 43
17987: PPUSH
17988: LD_STRING DRf-rast-4
17990: PPUSH
17991: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
17995: LD_EXP 43
17999: PPUSH
18000: LD_STRING DRf-rast-5
18002: PPUSH
18003: CALL_OW 94
// if IsOk ( Aviradze ) then
18007: LD_EXP 42
18011: PPUSH
18012: CALL_OW 302
18016: IFFALSE 18075
// begin CenterNowOnUnits ( Aviradze ) ;
18018: LD_EXP 42
18022: PPUSH
18023: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
18027: LD_EXP 42
18031: PPUSH
18032: LD_STRING DA-rast-6
18034: PPUSH
18035: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
18039: LD_EXP 30
18043: PPUSH
18044: LD_STRING DH-rast-7
18046: PPUSH
18047: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
18051: LD_EXP 31
18055: PPUSH
18056: LD_STRING DG-rast-8
18058: PPUSH
18059: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
18063: LD_EXP 31
18067: PPUSH
18068: LD_STRING DG-rast-9
18070: PPUSH
18071: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
18075: LD_EXP 30
18079: PPUSH
18080: LD_STRING DH-rast-10
18082: PPUSH
18083: CALL_OW 88
// DialogueOff ;
18087: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18091: LD_STRING M2
18093: PPUSH
18094: CALL_OW 337
// bergkampfArrived := true ;
18098: LD_ADDR_EXP 3
18102: PUSH
18103: LD_INT 1
18105: ST_TO_ADDR
// PrepareRolfBase ;
18106: CALL 2703 0 0
// end ;
18110: PPOPN 3
18112: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
18113: LD_INT 12
18115: PPUSH
18116: LD_INT 22
18118: PUSH
18119: LD_INT 2
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 70
18130: PUSH
18131: LD_EXP 43
18135: PPUSH
18136: CALL_OW 302
18140: AND
18141: PUSH
18142: LD_EXP 29
18146: AND
18147: IFFALSE 18707
18149: GO 18151
18151: DISABLE
18152: LD_INT 0
18154: PPUSH
// begin rolfScriptBase := false ;
18155: LD_ADDR_EXP 9
18159: PUSH
18160: LD_INT 0
18162: ST_TO_ADDR
// DialogueOn ;
18163: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
18167: LD_EXP 43
18171: PPUSH
18172: CALL_OW 87
// if rolfSquad >= 10 then
18176: LD_EXP 47
18180: PUSH
18181: LD_INT 10
18183: GREATEREQUAL
18184: IFFALSE 18363
// begin linkedWithRolf := 2 ;
18186: LD_ADDR_EXP 12
18190: PUSH
18191: LD_INT 2
18193: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
18194: LD_EXP 43
18198: PPUSH
18199: LD_STRING DRf-rast-11
18201: PPUSH
18202: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
18206: LD_EXP 30
18210: PPUSH
18211: LD_STRING DH-rast-12
18213: PPUSH
18214: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
18218: LD_EXP 43
18222: PPUSH
18223: LD_STRING DRf-rast-13
18225: PPUSH
18226: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
18230: LD_EXP 30
18234: PPUSH
18235: LD_STRING DH-rast-14
18237: PPUSH
18238: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
18242: LD_EXP 43
18246: PPUSH
18247: LD_STRING DRf-rast-15
18249: PPUSH
18250: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
18254: LD_EXP 30
18258: PPUSH
18259: LD_STRING DH-rast-16
18261: PPUSH
18262: CALL_OW 88
// if IsOk ( Mike ) then
18266: LD_EXP 32
18270: PPUSH
18271: CALL_OW 302
18275: IFFALSE 18349
// begin Say ( Mike , DM-rast-17 ) ;
18277: LD_EXP 32
18281: PPUSH
18282: LD_STRING DM-rast-17
18284: PPUSH
18285: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
18289: LD_EXP 30
18293: PPUSH
18294: LD_STRING DH-rast-18
18296: PPUSH
18297: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
18301: LD_EXP 32
18305: PPUSH
18306: LD_STRING DM-rast-19
18308: PPUSH
18309: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
18313: LD_EXP 30
18317: PPUSH
18318: LD_STRING DH-rast-20
18320: PPUSH
18321: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
18325: LD_EXP 32
18329: PPUSH
18330: LD_STRING DM-rast-21
18332: PPUSH
18333: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
18337: LD_EXP 30
18341: PPUSH
18342: LD_STRING DH-rast-22
18344: PPUSH
18345: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
18349: LD_EXP 30
18353: PPUSH
18354: LD_STRING DH-rast-23
18356: PPUSH
18357: CALL_OW 88
// end else
18361: GO 18513
// begin linkedWithRolf := 1 ;
18363: LD_ADDR_EXP 12
18367: PUSH
18368: LD_INT 1
18370: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
18371: LD_EXP 43
18375: PPUSH
18376: LD_STRING DRf-rast-a-11
18378: PPUSH
18379: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
18383: LD_EXP 30
18387: PPUSH
18388: LD_STRING DH-rast-a-12
18390: PPUSH
18391: CALL_OW 88
// if IsOk ( Kurt ) then
18395: LD_EXP 41
18399: PPUSH
18400: CALL_OW 302
18404: IFFALSE 18501
// begin Say ( Kurt , DKs-rast-a-13 ) ;
18406: LD_EXP 41
18410: PPUSH
18411: LD_STRING DKs-rast-a-13
18413: PPUSH
18414: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
18418: LD_EXP 43
18422: PPUSH
18423: LD_STRING DRf-rast-a-14
18425: PPUSH
18426: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
18430: LD_EXP 43
18434: PPUSH
18435: LD_STRING DRf-rast-a-15
18437: PPUSH
18438: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
18442: LD_EXP 41
18446: PPUSH
18447: LD_STRING DKs-rast-a-16
18449: PPUSH
18450: CALL_OW 88
// if IsOk ( Givi ) then
18454: LD_EXP 31
18458: PPUSH
18459: CALL_OW 302
18463: IFFALSE 18501
// begin Say ( Givi , DG-rast-a-17 ) ;
18465: LD_EXP 31
18469: PPUSH
18470: LD_STRING DG-rast-a-17
18472: PPUSH
18473: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
18477: LD_EXP 31
18481: PPUSH
18482: LD_STRING DG-rast-a-18
18484: PPUSH
18485: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
18489: LD_EXP 41
18493: PPUSH
18494: LD_STRING DKs-rast-a-19
18496: PPUSH
18497: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
18501: LD_EXP 30
18505: PPUSH
18506: LD_STRING DH-rast-a-20
18508: PPUSH
18509: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18513: LD_EXP 43
18517: PPUSH
18518: LD_STRING DRf-rast-24
18520: PPUSH
18521: CALL_OW 88
// if IsOk ( Aviradze ) then
18525: LD_EXP 42
18529: PPUSH
18530: CALL_OW 302
18534: IFFALSE 18634
// begin Say ( Aviradze , DA-rast-25 ) ;
18536: LD_EXP 42
18540: PPUSH
18541: LD_STRING DA-rast-25
18543: PPUSH
18544: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18548: LD_EXP 30
18552: PPUSH
18553: LD_STRING DH-rast-26
18555: PPUSH
18556: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18560: LD_EXP 42
18564: PPUSH
18565: LD_STRING DA-rast-27
18567: PPUSH
18568: CALL_OW 88
// if IsOk ( Markov ) then
18572: LD_EXP 37
18576: PPUSH
18577: CALL_OW 302
18581: IFFALSE 18609
// begin Say ( Markov , DMar-rast-28 ) ;
18583: LD_EXP 37
18587: PPUSH
18588: LD_STRING DMar-rast-28
18590: PPUSH
18591: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18595: LD_EXP 37
18599: PPUSH
18600: LD_STRING DMar-rast-29
18602: PPUSH
18603: CALL_OW 88
// end else
18607: GO 18632
// if IsOk ( Sophia ) then
18609: LD_EXP 36
18613: PPUSH
18614: CALL_OW 302
18618: IFFALSE 18632
// begin Say ( Sophia , DS-rast-28 ) ;
18620: LD_EXP 36
18624: PPUSH
18625: LD_STRING DS-rast-28
18627: PPUSH
18628: CALL_OW 88
// end ; end else
18632: GO 18657
// if IsOk ( Sophia ) then
18634: LD_EXP 36
18638: PPUSH
18639: CALL_OW 302
18643: IFFALSE 18657
// Say ( Sophia , DS-rast-29 ) ;
18645: LD_EXP 36
18649: PPUSH
18650: LD_STRING DS-rast-29
18652: PPUSH
18653: CALL_OW 88
// DialogueOff ;
18657: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18661: LD_STRING M3
18663: PPUSH
18664: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18668: LD_ADDR_VAR 0 1
18672: PUSH
18673: LD_INT 22
18675: PUSH
18676: LD_INT 8
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PPUSH
18683: CALL_OW 69
18687: PUSH
18688: FOR_IN
18689: IFFALSE 18705
// SetSide ( i , 2 ) ;
18691: LD_VAR 0 1
18695: PPUSH
18696: LD_INT 2
18698: PPUSH
18699: CALL_OW 235
18703: GO 18688
18705: POP
18706: POP
// end ;
18707: PPOPN 1
18709: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
18710: LD_EXP 23
18714: PUSH
18715: LD_EXP 12
18719: NOT
18720: AND
18721: PUSH
18722: LD_EXP 29
18726: AND
18727: IFFALSE 18818
18729: GO 18731
18731: DISABLE
18732: LD_INT 0
18734: PPUSH
// begin canRolfJoin := false ;
18735: LD_ADDR_EXP 29
18739: PUSH
18740: LD_INT 0
18742: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
18743: LD_STRING M3
18745: PPUSH
18746: CALL_OW 337
// for i in rolfSquad do
18750: LD_ADDR_VAR 0 1
18754: PUSH
18755: LD_EXP 47
18759: PUSH
18760: FOR_IN
18761: IFFALSE 18816
// begin ComExit ( i ) ;
18763: LD_VAR 0 1
18767: PPUSH
18768: CALL 63057 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
18772: LD_VAR 0 1
18776: PPUSH
18777: LD_INT 147
18779: PPUSH
18780: LD_INT 162
18782: PPUSH
18783: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
18787: LD_VAR 0 1
18791: PPUSH
18792: LD_INT 1050
18794: PPUSH
18795: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
18799: LD_VAR 0 1
18803: PPUSH
18804: LD_INT 103
18806: PPUSH
18807: LD_INT 162
18809: PPUSH
18810: CALL_OW 174
// end ;
18814: GO 18760
18816: POP
18817: POP
// end ;
18818: PPOPN 1
18820: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
18821: LD_EXP 3
18825: PUSH
18826: LD_EXP 43
18830: PPUSH
18831: CALL_OW 256
18835: PUSH
18836: LD_INT 400
18838: LESS
18839: AND
18840: PUSH
18841: LD_EXP 12
18845: NOT
18846: AND
18847: PUSH
18848: LD_EXP 29
18852: AND
18853: IFFALSE 19127
18855: GO 18857
18857: DISABLE
18858: LD_INT 0
18860: PPUSH
// begin DialogueOn ;
18861: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18865: LD_EXP 43
18869: PPUSH
18870: LD_STRING DRf-rast-f-11
18872: PPUSH
18873: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18877: LD_EXP 43
18881: PPUSH
18882: LD_STRING DRf-rast-f-12
18884: PPUSH
18885: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18889: LD_EXP 43
18893: PPUSH
18894: LD_STRING DRf-rast-f-13
18896: PPUSH
18897: CALL_OW 94
// DialogueOff ;
18901: CALL_OW 7
// KillUnit ( Rolf ) ;
18905: LD_EXP 43
18909: PPUSH
18910: CALL_OW 66
// wait ( 0 0$1 ) ;
18914: LD_INT 35
18916: PPUSH
18917: CALL_OW 67
// if not IsOk ( Givi ) then
18921: LD_EXP 31
18925: PPUSH
18926: CALL_OW 302
18930: NOT
18931: IFFALSE 18935
// exit ;
18933: GO 19127
// DialogueOn ;
18935: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18939: LD_EXP 31
18943: PPUSH
18944: LD_STRING DG-rast-f-14
18946: PPUSH
18947: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18951: LD_EXP 31
18955: PPUSH
18956: LD_STRING DG-rast-f-15
18958: PPUSH
18959: CALL_OW 88
// if IsOk ( Kaia ) then
18963: LD_EXP 35
18967: PPUSH
18968: CALL_OW 302
18972: IFFALSE 18988
// Say ( Kaia , DK-rast-f-16 ) else
18974: LD_EXP 35
18978: PPUSH
18979: LD_STRING DK-rast-f-16
18981: PPUSH
18982: CALL_OW 88
18986: GO 19075
// if heikeSecondSquad then
18988: LD_EXP 45
18992: IFFALSE 19075
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18994: LD_ADDR_VAR 0 1
18998: PUSH
18999: LD_EXP 45
19003: PUSH
19004: LD_INT 1
19006: PPUSH
19007: LD_EXP 45
19011: PPUSH
19012: CALL_OW 12
19016: ARRAY
19017: ST_TO_ADDR
// case GetSex ( random ) of 1 :
19018: LD_VAR 0 1
19022: PPUSH
19023: CALL_OW 258
19027: PUSH
19028: LD_INT 1
19030: DOUBLE
19031: EQUAL
19032: IFTRUE 19036
19034: GO 19051
19036: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
19037: LD_VAR 0 1
19041: PPUSH
19042: LD_STRING DArm-rast-f-a-16
19044: PPUSH
19045: CALL_OW 88
19049: GO 19075
19051: LD_INT 2
19053: DOUBLE
19054: EQUAL
19055: IFTRUE 19059
19057: GO 19074
19059: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_STRING DArf-rast-f-a-16
19067: PPUSH
19068: CALL_OW 88
19072: GO 19075
19074: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
19075: LD_EXP 31
19079: PPUSH
19080: LD_STRING DG-rast-f-17
19082: PPUSH
19083: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
19087: LD_EXP 31
19091: PPUSH
19092: LD_STRING DG-rast-f-18
19094: PPUSH
19095: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
19099: LD_EXP 31
19103: PPUSH
19104: LD_STRING DG-rast-f-19
19106: PPUSH
19107: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
19111: LD_EXP 31
19115: PPUSH
19116: LD_STRING DG-rast-f-20
19118: PPUSH
19119: CALL_OW 88
// DialogueOff ;
19123: CALL_OW 7
// end ;
19127: PPOPN 1
19129: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
19130: LD_INT 2
19132: PPUSH
19133: LD_INT 10
19135: PPUSH
19136: CALL_OW 294
19140: IFFALSE 19213
19142: GO 19144
19144: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
19145: LD_EXP 31
19149: PPUSH
19150: LD_STRING DG-Len-1
19152: PPUSH
19153: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
19157: LD_EXP 41
19161: PPUSH
19162: LD_STRING DKs-Len-2
19164: PPUSH
19165: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
19169: LD_EXP 41
19173: PPUSH
19174: LD_STRING DKs-Len-3
19176: PPUSH
19177: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
19181: LD_EXP 30
19185: PPUSH
19186: LD_STRING DH-Len-4
19188: PPUSH
19189: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
19193: LD_EXP 35
19197: PPUSH
19198: LD_STRING DK-Len-5
19200: PPUSH
19201: CALL_OW 88
// leninSpotted := true ;
19205: LD_ADDR_EXP 14
19209: PUSH
19210: LD_INT 1
19212: ST_TO_ADDR
// end ;
19213: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 17 17$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
19214: LD_EXP 3
19218: PUSH
19219: LD_OWVAR 1
19223: PUSH
19224: LD_INT 35700
19226: GREATER
19227: AND
19228: PUSH
19229: LD_INT 22
19231: PUSH
19232: LD_INT 2
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 92
19241: PUSH
19242: LD_INT 322
19244: PUSH
19245: LD_INT 215
19247: PUSH
19248: LD_INT 20
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PPUSH
19261: CALL_OW 69
19265: OR
19266: IFFALSE 19629
19268: GO 19270
19270: DISABLE
19271: LD_INT 0
19273: PPUSH
// begin PrepareOmarSquad ;
19274: CALL 3985 0 0
// repeat wait ( 0 0$1 ) ;
19278: LD_INT 35
19280: PPUSH
19281: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
19285: LD_INT 14
19287: PPUSH
19288: LD_INT 22
19290: PUSH
19291: LD_INT 3
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 2
19300: PUSH
19301: LD_INT 21
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 59
19313: PUSH
19314: EMPTY
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PPUSH
19326: CALL_OW 70
19330: NOT
19331: IFFALSE 19278
// for i in omarSquad do
19333: LD_ADDR_VAR 0 1
19337: PUSH
19338: LD_EXP 48
19342: PUSH
19343: FOR_IN
19344: IFFALSE 19375
// if GetLives ( i ) < 750 then
19346: LD_VAR 0 1
19350: PPUSH
19351: CALL_OW 256
19355: PUSH
19356: LD_INT 750
19358: LESS
19359: IFFALSE 19373
// SetLives ( i , 1000 ) ;
19361: LD_VAR 0 1
19365: PPUSH
19366: LD_INT 1000
19368: PPUSH
19369: CALL_OW 234
19373: GO 19343
19375: POP
19376: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
19377: LD_ADDR_VAR 0 1
19381: PUSH
19382: LD_INT 14
19384: PPUSH
19385: LD_INT 21
19387: PUSH
19388: LD_INT 3
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PPUSH
19395: CALL_OW 70
19399: PUSH
19400: FOR_IN
19401: IFFALSE 19417
// SetSide ( i , 5 ) ;
19403: LD_VAR 0 1
19407: PPUSH
19408: LD_INT 5
19410: PPUSH
19411: CALL_OW 235
19415: GO 19400
19417: POP
19418: POP
// wait ( 0 0$3 ) ;
19419: LD_INT 105
19421: PPUSH
19422: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
19426: LD_INT 5
19428: PPUSH
19429: LD_INT 2
19431: PPUSH
19432: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
19436: LD_EXP 40
19440: PPUSH
19441: CALL_OW 87
// DialogueOn ;
19445: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
19449: LD_EXP 40
19453: PPUSH
19454: LD_STRING DOm-Veh-1
19456: PPUSH
19457: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
19461: LD_EXP 40
19465: PPUSH
19466: LD_STRING DOm-Veh-2
19468: PPUSH
19469: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
19473: LD_EXP 40
19477: PPUSH
19478: LD_STRING DOm-Veh-3
19480: PPUSH
19481: CALL_OW 94
// if mortarConstructed then
19485: LD_EXP 15
19489: IFFALSE 19503
// SayRadio ( Omar , DOm-Veh-4 ) ;
19491: LD_EXP 40
19495: PPUSH
19496: LD_STRING DOm-Veh-4
19498: PPUSH
19499: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
19503: LD_EXP 30
19507: PPUSH
19508: LD_STRING DH-Veh-5
19510: PPUSH
19511: CALL_OW 88
// if IsOk ( Kurt ) then
19515: LD_EXP 41
19519: PPUSH
19520: CALL_OW 302
19524: IFFALSE 19574
// begin Say ( Kurt , DKs-Veh-6 ) ;
19526: LD_EXP 41
19530: PPUSH
19531: LD_STRING DKs-Veh-6
19533: PPUSH
19534: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
19538: LD_EXP 41
19542: PPUSH
19543: LD_STRING DKs-Veh-7
19545: PPUSH
19546: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
19550: LD_EXP 31
19554: PPUSH
19555: LD_STRING DG-Veh-8
19557: PPUSH
19558: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
19562: LD_EXP 32
19566: PPUSH
19567: LD_STRING DM-Veh-9
19569: PPUSH
19570: CALL_OW 88
// end ; DialogueOff ;
19574: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
19578: LD_STRING M4
19580: PPUSH
19581: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
19585: LD_EXP 40
19589: PPUSH
19590: LD_INT 341
19592: PPUSH
19593: LD_INT 232
19595: PPUSH
19596: CALL_OW 428
19600: PPUSH
19601: CALL_OW 120
// omarArrived := true ;
19605: LD_ADDR_EXP 6
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// omarScriptBase := true ;
19613: LD_ADDR_EXP 10
19617: PUSH
19618: LD_INT 1
19620: ST_TO_ADDR
// omarWantVehicles := true ;
19621: LD_ADDR_EXP 18
19625: PUSH
19626: LD_INT 1
19628: ST_TO_ADDR
// end ;
19629: PPOPN 1
19631: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19632: LD_EXP 43
19636: PPUSH
19637: CALL_OW 302
19641: PUSH
19642: LD_EXP 12
19646: AND
19647: PUSH
19648: LD_EXP 6
19652: AND
19653: IFFALSE 19757
19655: GO 19657
19657: DISABLE
// begin wait ( 0 0$20 ) ;
19658: LD_INT 700
19660: PPUSH
19661: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
19665: LD_EXP 43
19669: PPUSH
19670: CALL_OW 87
// DialogueOn ;
19674: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19678: LD_EXP 43
19682: PPUSH
19683: LD_STRING DRf-Veh-10
19685: PPUSH
19686: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19690: LD_EXP 43
19694: PPUSH
19695: LD_STRING DRf-Veh-11
19697: PPUSH
19698: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19702: LD_EXP 30
19706: PPUSH
19707: LD_STRING DH-Veh-12
19709: PPUSH
19710: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19714: LD_EXP 30
19718: PPUSH
19719: LD_STRING DH-Veh-13
19721: PPUSH
19722: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19726: LD_EXP 43
19730: PPUSH
19731: LD_STRING DRf-Veh-14
19733: PPUSH
19734: CALL_OW 88
// DialogueOff ;
19738: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19742: LD_STRING M5
19744: PPUSH
19745: CALL_OW 337
// rolfWantVehicles := true ;
19749: LD_ADDR_EXP 17
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// end ;
19757: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19758: LD_EXP 18
19762: IFFALSE 20461
19764: GO 19766
19766: DISABLE
19767: LD_INT 0
19769: PPUSH
19770: PPUSH
19771: PPUSH
19772: PPUSH
19773: PPUSH
19774: PPUSH
// begin wait ( 0 0$3 ) ;
19775: LD_INT 105
19777: PPUSH
19778: CALL_OW 67
// Hint ( OmarVehicles ) ;
19782: LD_STRING OmarVehicles
19784: PPUSH
19785: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19789: LD_INT 16
19791: PPUSH
19792: LD_INT 1
19794: PPUSH
19795: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19799: LD_INT 35
19801: PPUSH
19802: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19806: LD_ADDR_EXP 20
19810: PUSH
19811: LD_EXP 20
19815: PUSH
19816: LD_INT 35
19818: MINUS
19819: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19820: LD_EXP 20
19824: PUSH
19825: LD_INT 0
19827: LESSEQUAL
19828: IFFALSE 19928
// begin display_strings := [ ] ;
19830: LD_ADDR_OWVAR 47
19834: PUSH
19835: EMPTY
19836: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19837: LD_STRING M4a
19839: PPUSH
19840: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19844: LD_INT 16
19846: PPUSH
19847: LD_INT 0
19849: PPUSH
19850: CALL_OW 424
// DialogueOn ;
19854: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19858: LD_EXP 40
19862: PPUSH
19863: LD_STRING DOm-Veh-b-15
19865: PPUSH
19866: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19870: LD_EXP 30
19874: PPUSH
19875: LD_STRING DH-Veh-b-16
19877: PPUSH
19878: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19882: LD_EXP 40
19886: PPUSH
19887: LD_STRING DOm-Veh-b-17
19889: PPUSH
19890: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19894: LD_EXP 35
19898: PPUSH
19899: LD_STRING DK-Veh-b-18
19901: PPUSH
19902: CALL_OW 88
// DialogueOff ;
19906: CALL_OW 7
// omarAttack := true ;
19910: LD_ADDR_EXP 23
19914: PUSH
19915: LD_INT 1
19917: ST_TO_ADDR
// omarScriptBase := false ;
19918: LD_ADDR_EXP 10
19922: PUSH
19923: LD_INT 0
19925: ST_TO_ADDR
// exit ;
19926: GO 20461
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19928: LD_EXP 21
19932: PUSH
19933: LD_INT 16
19935: PPUSH
19936: LD_INT 22
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 21
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 33
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 58
19968: PUSH
19969: EMPTY
19970: LIST
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: PPUSH
19978: CALL_OW 70
19982: LESSEQUAL
19983: IFFALSE 19799
// omarWaitingForVehiclesTimer := 0 0$00 ;
19985: LD_ADDR_EXP 20
19989: PUSH
19990: LD_INT 0
19992: ST_TO_ADDR
// display_strings := [ ] ;
19993: LD_ADDR_OWVAR 47
19997: PUSH
19998: EMPTY
19999: ST_TO_ADDR
// DialogueOn ;
20000: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
20004: LD_EXP 40
20008: PPUSH
20009: LD_STRING DOm-Veh-a-15
20011: PPUSH
20012: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
20016: LD_EXP 35
20020: PPUSH
20021: LD_STRING DK-Veh-a-16
20023: PPUSH
20024: CALL_OW 88
// DialogueOff ;
20028: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
20032: LD_STRING M4a
20034: PPUSH
20035: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
20039: LD_INT 16
20041: PPUSH
20042: LD_INT 0
20044: PPUSH
20045: CALL_OW 424
// omarHasVehicles := true ;
20049: LD_ADDR_EXP 22
20053: PUSH
20054: LD_INT 1
20056: ST_TO_ADDR
// wait ( 1 1$00 ) ;
20057: LD_INT 2100
20059: PPUSH
20060: CALL_OW 67
// omarAttack := true ;
20064: LD_ADDR_EXP 23
20068: PUSH
20069: LD_INT 1
20071: ST_TO_ADDR
// omarScriptBase := false ;
20072: LD_ADDR_EXP 10
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
20080: LD_ADDR_VAR 0 2
20084: PUSH
20085: LD_INT 16
20087: PPUSH
20088: LD_INT 22
20090: PUSH
20091: LD_INT 2
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 21
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 33
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 58
20120: PUSH
20121: EMPTY
20122: LIST
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: PPUSH
20130: CALL_OW 70
20134: ST_TO_ADDR
// for i in tmp do
20135: LD_ADDR_VAR 0 1
20139: PUSH
20140: LD_VAR 0 2
20144: PUSH
20145: FOR_IN
20146: IFFALSE 20174
// begin SetFuel ( i , 100 ) ;
20148: LD_VAR 0 1
20152: PPUSH
20153: LD_INT 100
20155: PPUSH
20156: CALL_OW 240
// SetSide ( i , 5 ) ;
20160: LD_VAR 0 1
20164: PPUSH
20165: LD_INT 5
20167: PPUSH
20168: CALL_OW 235
// end ;
20172: GO 20145
20174: POP
20175: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
20176: LD_ADDR_VAR 0 3
20180: PUSH
20181: LD_EXP 48
20185: PPUSH
20186: LD_INT 25
20188: PUSH
20189: LD_INT 2
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PPUSH
20196: CALL_OW 72
20200: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
20201: LD_ADDR_VAR 0 4
20205: PUSH
20206: LD_EXP 48
20210: PPUSH
20211: LD_INT 3
20213: PUSH
20214: LD_INT 55
20216: PUSH
20217: EMPTY
20218: LIST
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 25
20226: PUSH
20227: LD_INT 3
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PPUSH
20238: CALL_OW 72
20242: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
20243: LD_ADDR_VAR 0 5
20247: PUSH
20248: LD_INT 324
20250: PPUSH
20251: LD_INT 234
20253: PPUSH
20254: CALL_OW 428
20258: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
20259: LD_ADDR_VAR 0 6
20263: PUSH
20264: LD_INT 334
20266: PPUSH
20267: LD_INT 241
20269: PPUSH
20270: CALL_OW 428
20274: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
20275: LD_VAR 0 6
20279: PPUSH
20280: CALL_OW 313
20284: PPUSH
20285: CALL_OW 122
// if eng then
20289: LD_VAR 0 3
20293: IFFALSE 20401
// begin if eng + mech <= tmp then
20295: LD_VAR 0 3
20299: PUSH
20300: LD_VAR 0 4
20304: PLUS
20305: PUSH
20306: LD_VAR 0 2
20310: LESSEQUAL
20311: IFFALSE 20366
// begin ComEnterUnit ( eng , workshop ) ;
20313: LD_VAR 0 3
20317: PPUSH
20318: LD_VAR 0 5
20322: PPUSH
20323: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
20327: LD_VAR 0 3
20331: PPUSH
20332: LD_INT 3
20334: PPUSH
20335: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20339: LD_VAR 0 3
20343: PPUSH
20344: CALL_OW 182
// mech := mech union eng ;
20348: LD_ADDR_VAR 0 4
20352: PUSH
20353: LD_VAR 0 4
20357: PUSH
20358: LD_VAR 0 3
20362: UNION
20363: ST_TO_ADDR
// end else
20364: GO 20401
// begin ComEnterUnit ( eng , armoury ) ;
20366: LD_VAR 0 3
20370: PPUSH
20371: LD_VAR 0 6
20375: PPUSH
20376: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
20380: LD_VAR 0 3
20384: PPUSH
20385: LD_INT 1
20387: PPUSH
20388: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20392: LD_VAR 0 3
20396: PPUSH
20397: CALL_OW 182
// end ; end ; for i := 1 to tmp do
20401: LD_ADDR_VAR 0 1
20405: PUSH
20406: DOUBLE
20407: LD_INT 1
20409: DEC
20410: ST_TO_ADDR
20411: LD_VAR 0 2
20415: PUSH
20416: FOR_TO
20417: IFFALSE 20459
// if i <= mech then
20419: LD_VAR 0 1
20423: PUSH
20424: LD_VAR 0 4
20428: LESSEQUAL
20429: IFFALSE 20457
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
20431: LD_VAR 0 4
20435: PUSH
20436: LD_VAR 0 1
20440: ARRAY
20441: PPUSH
20442: LD_VAR 0 2
20446: PUSH
20447: LD_VAR 0 1
20451: ARRAY
20452: PPUSH
20453: CALL_OW 180
20457: GO 20416
20459: POP
20460: POP
// end ;
20461: PPOPN 6
20463: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
20464: LD_EXP 43
20468: PPUSH
20469: CALL_OW 302
20473: PUSH
20474: LD_EXP 17
20478: AND
20479: IFFALSE 20935
20481: GO 20483
20483: DISABLE
20484: LD_INT 0
20486: PPUSH
// begin repeat wait ( 0 0$1 ) ;
20487: LD_INT 35
20489: PPUSH
20490: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
20494: LD_ADDR_EXP 19
20498: PUSH
20499: LD_EXP 19
20503: PUSH
20504: LD_INT 35
20506: MINUS
20507: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
20508: LD_EXP 19
20512: PUSH
20513: LD_INT 0
20515: LESSEQUAL
20516: PUSH
20517: LD_EXP 23
20521: OR
20522: IFFALSE 20740
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
20524: LD_ADDR_EXP 19
20528: PUSH
20529: LD_INT 0
20531: ST_TO_ADDR
// display_strings := [ ] ;
20532: LD_ADDR_OWVAR 47
20536: PUSH
20537: EMPTY
20538: ST_TO_ADDR
// DialogueOn ;
20539: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
20543: LD_EXP 43
20547: PPUSH
20548: LD_STRING DRf-Veh-b-19
20550: PPUSH
20551: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
20555: LD_EXP 43
20559: PPUSH
20560: LD_STRING DRf-Veh-b-20
20562: PPUSH
20563: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
20567: LD_EXP 30
20571: PPUSH
20572: LD_STRING DH-Veh-b-21
20574: PPUSH
20575: CALL_OW 88
// if IsOk ( Givi ) then
20579: LD_EXP 31
20583: PPUSH
20584: CALL_OW 302
20588: IFFALSE 20626
// begin Say ( Givi , DG-Veh-b-22 ) ;
20590: LD_EXP 31
20594: PPUSH
20595: LD_STRING DG-Veh-b-22
20597: PPUSH
20598: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
20602: LD_EXP 30
20606: PPUSH
20607: LD_STRING DH-Veh-b-23
20609: PPUSH
20610: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
20614: LD_EXP 31
20618: PPUSH
20619: LD_STRING DG-Veh-b-24
20621: PPUSH
20622: CALL_OW 88
// end ; DialogueOff ;
20626: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20630: LD_STRING M5a
20632: PPUSH
20633: CALL_OW 337
// for i in rolfSquad do
20637: LD_ADDR_VAR 0 1
20641: PUSH
20642: LD_EXP 47
20646: PUSH
20647: FOR_IN
20648: IFFALSE 20714
// begin SetSide ( i , 8 ) ;
20650: LD_VAR 0 1
20654: PPUSH
20655: LD_INT 8
20657: PPUSH
20658: CALL_OW 235
// if IsDriver ( i ) then
20662: LD_VAR 0 1
20666: PPUSH
20667: CALL 60268 0 1
20671: IFFALSE 20692
// SetSide ( IsInUnit ( i ) , 8 ) else
20673: LD_VAR 0 1
20677: PPUSH
20678: CALL_OW 310
20682: PPUSH
20683: LD_INT 8
20685: PPUSH
20686: CALL_OW 235
20690: GO 20712
// if IsInUnit ( i ) then
20692: LD_VAR 0 1
20696: PPUSH
20697: CALL_OW 310
20701: IFFALSE 20712
// ComExitBuilding ( i ) ;
20703: LD_VAR 0 1
20707: PPUSH
20708: CALL_OW 122
// end ;
20712: GO 20647
20714: POP
20715: POP
// wait ( 0 0$1 ) ;
20716: LD_INT 35
20718: PPUSH
20719: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20723: LD_EXP 47
20727: PPUSH
20728: LD_INT 229
20730: PPUSH
20731: LD_INT 154
20733: PPUSH
20734: CALL_OW 114
// exit ;
20738: GO 20935
// end ; if IsDead ( Rolf ) then
20740: LD_EXP 43
20744: PPUSH
20745: CALL_OW 301
20749: IFFALSE 20760
// begin ChangeMissionObjectives ( M5a ) ;
20751: LD_STRING M5a
20753: PPUSH
20754: CALL_OW 337
// exit ;
20758: GO 20935
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20760: LD_EXP 47
20764: PPUSH
20765: LD_INT 55
20767: PUSH
20768: EMPTY
20769: LIST
20770: PPUSH
20771: CALL_OW 72
20775: PUSH
20776: LD_INT 0
20778: PLUS
20779: PUSH
20780: LD_EXP 47
20784: PUSH
20785: LD_INT 0
20787: PLUS
20788: EQUAL
20789: IFFALSE 20487
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20791: LD_ADDR_EXP 19
20795: PUSH
20796: LD_INT 0
20798: ST_TO_ADDR
// display_strings := [ ] ;
20799: LD_ADDR_OWVAR 47
20803: PUSH
20804: EMPTY
20805: ST_TO_ADDR
// DialogueOn ;
20806: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20810: LD_EXP 43
20814: PPUSH
20815: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20819: LD_EXP 43
20823: PPUSH
20824: LD_STRING DRf-Veh-a-17
20826: PPUSH
20827: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20831: LD_EXP 30
20835: PPUSH
20836: LD_STRING DH-08-Veh-a-18
20838: PPUSH
20839: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20843: LD_EXP 43
20847: PPUSH
20848: LD_STRING DRf-Veh-a-19
20850: PPUSH
20851: CALL_OW 88
// DialogueOff ;
20855: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20859: LD_STRING M5a
20861: PPUSH
20862: CALL_OW 337
// rolfHasVehicles := true ;
20866: LD_ADDR_EXP 16
20870: PUSH
20871: LD_INT 1
20873: ST_TO_ADDR
// for i in rolfSquad do
20874: LD_ADDR_VAR 0 1
20878: PUSH
20879: LD_EXP 47
20883: PUSH
20884: FOR_IN
20885: IFFALSE 20918
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20887: LD_VAR 0 1
20891: PPUSH
20892: CALL_OW 310
20896: PPUSH
20897: LD_INT 8
20899: PPUSH
20900: CALL_OW 235
// SetSide ( i , 8 ) ;
20904: LD_VAR 0 1
20908: PPUSH
20909: LD_INT 8
20911: PPUSH
20912: CALL_OW 235
// end ;
20916: GO 20884
20918: POP
20919: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20920: LD_EXP 47
20924: PPUSH
20925: LD_INT 229
20927: PPUSH
20928: LD_INT 154
20930: PPUSH
20931: CALL_OW 114
// end ;
20935: PPOPN 1
20937: END
// every 0 0$1 trigger leninSpotted do
20938: LD_EXP 14
20942: IFFALSE 21030
20944: GO 20946
20946: DISABLE
// begin wait ( 0 0$10 ) ;
20947: LD_INT 350
20949: PPUSH
20950: CALL_OW 67
// DialogueOn ;
20954: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20958: LD_EXP 42
20962: PPUSH
20963: LD_STRING DA-Transmission-1
20965: PPUSH
20966: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20970: LD_EXP 49
20974: PPUSH
20975: LD_STRING DMzw-Transmission-2
20977: PPUSH
20978: CALL_OW 94
// if gaidarKilled then
20982: LD_EXP 7
20986: IFFALSE 21002
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
20988: LD_EXP 49
20992: PPUSH
20993: LD_STRING DMzw-Transmission-3
20995: PPUSH
20996: CALL_OW 94
21000: GO 21014
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
21002: LD_EXP 49
21006: PPUSH
21007: LD_STRING DMzw-Transmission-a-3
21009: PPUSH
21010: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
21014: LD_EXP 30
21018: PPUSH
21019: LD_STRING DH-Transmission-4
21021: PPUSH
21022: CALL_OW 88
// DialogueOff ;
21026: CALL_OW 7
// end ;
21030: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
21031: LD_INT 22
21033: PUSH
21034: LD_INT 3
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 25
21043: PUSH
21044: LD_INT 9
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 101
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: PPUSH
21066: CALL_OW 69
21070: PUSH
21071: LD_EXP 30
21075: PPUSH
21076: CALL_OW 302
21080: AND
21081: IFFALSE 21146
21083: GO 21085
21085: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
21086: LD_INT 22
21088: PUSH
21089: LD_INT 3
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 25
21098: PUSH
21099: LD_INT 9
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 101
21108: PUSH
21109: LD_INT 2
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: LIST
21120: PPUSH
21121: CALL_OW 69
21125: PUSH
21126: LD_INT 1
21128: ARRAY
21129: PPUSH
21130: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
21134: LD_EXP 30
21138: PPUSH
21139: LD_STRING DH-Rubazooka-1
21141: PPUSH
21142: CALL_OW 88
// end ;
21146: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
21147: LD_INT 19
21149: PPUSH
21150: LD_INT 22
21152: PUSH
21153: LD_INT 3
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PPUSH
21160: CALL_OW 70
21164: PUSH
21165: LD_EXP 28
21169: AND
21170: IFFALSE 21221
21172: GO 21174
21174: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21175: LD_INT 19
21177: PPUSH
21178: LD_INT 22
21180: PUSH
21181: LD_INT 3
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PPUSH
21188: CALL_OW 70
21192: PPUSH
21193: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
21197: LD_EXP 30
21201: PPUSH
21202: LD_STRING DH-Ruattfirst-1
21204: PPUSH
21205: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
21209: LD_EXP 30
21213: PPUSH
21214: LD_STRING DH-Ruattfirst-2
21216: PPUSH
21217: CALL_OW 88
// end ;
21221: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
21222: LD_INT 19
21224: PPUSH
21225: LD_INT 22
21227: PUSH
21228: LD_INT 3
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PPUSH
21235: CALL_OW 70
21239: PUSH
21240: LD_EXP 28
21244: NOT
21245: AND
21246: IFFALSE 21285
21248: GO 21250
21250: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21251: LD_INT 19
21253: PPUSH
21254: LD_INT 22
21256: PUSH
21257: LD_INT 3
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PPUSH
21264: CALL_OW 70
21268: PPUSH
21269: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
21273: LD_EXP 30
21277: PPUSH
21278: LD_STRING DH-Ruattnext-1
21280: PPUSH
21281: CALL_OW 88
// end ;
21285: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
21286: LD_EXP 44
21290: PPUSH
21291: CALL_OW 274
21295: PPUSH
21296: LD_INT 2
21298: PPUSH
21299: CALL_OW 275
21303: PUSH
21304: LD_INT 31
21306: LESS
21307: PUSH
21308: LD_EXP 31
21312: PPUSH
21313: CALL_OW 302
21317: AND
21318: IFFALSE 21873
21320: GO 21322
21322: DISABLE
21323: LD_INT 0
21325: PPUSH
21326: PPUSH
21327: PPUSH
// begin DialogueOn ;
21328: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
21332: LD_EXP 30
21336: PPUSH
21337: LD_STRING DH-Fuel-1
21339: PPUSH
21340: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
21344: LD_EXP 31
21348: PPUSH
21349: LD_STRING DG-Fuel-2
21351: PPUSH
21352: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
21356: LD_EXP 31
21360: PPUSH
21361: LD_STRING DG-Fuel-3
21363: PPUSH
21364: CALL_OW 88
// DialogueOff ;
21368: CALL_OW 7
// Query ( Oil ) ;
21372: LD_STRING Oil
21374: PPUSH
21375: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
21379: LD_INT 20
21381: PPUSH
21382: LD_INT 1
21384: PPUSH
21385: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
21389: LD_INT 35
21391: PPUSH
21392: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
21396: LD_INT 20
21398: PPUSH
21399: LD_INT 22
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 33
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 34
21424: PUSH
21425: LD_INT 32
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 34
21434: PUSH
21435: LD_INT 51
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: LIST
21451: PPUSH
21452: CALL_OW 70
21456: IFFALSE 21389
// SetAreaMapShow ( oilArea , 0 ) ;
21458: LD_INT 20
21460: PPUSH
21461: LD_INT 0
21463: PPUSH
21464: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
21468: LD_ADDR_VAR 0 1
21472: PUSH
21473: LD_INT 20
21475: PPUSH
21476: LD_INT 22
21478: PUSH
21479: LD_INT 2
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 33
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 2
21498: PUSH
21499: LD_INT 34
21501: PUSH
21502: LD_INT 32
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 34
21511: PUSH
21512: LD_INT 51
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: LIST
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: PPUSH
21529: CALL_OW 70
21533: PUSH
21534: LD_INT 1
21536: ARRAY
21537: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
21538: LD_ADDR_VAR 0 2
21542: PUSH
21543: LD_VAR 0 1
21547: PPUSH
21548: CALL_OW 311
21552: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
21553: LD_ADDR_VAR 0 3
21557: PUSH
21558: LD_VAR 0 1
21562: PPUSH
21563: CALL_OW 256
21567: ST_TO_ADDR
// RemoveUnit ( driver ) ;
21568: LD_VAR 0 2
21572: PPUSH
21573: CALL_OW 64
// RemoveUnit ( vehicle ) ;
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 64
// wait ( rand ( 4 4$30 , 5 5$30 ) ) ;
21586: LD_INT 9450
21588: PPUSH
21589: LD_INT 11550
21591: PPUSH
21592: CALL_OW 12
21596: PPUSH
21597: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21601: LD_INT 35
21603: PPUSH
21604: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
21608: LD_INT 22
21610: PUSH
21611: LD_INT 3
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 92
21620: PUSH
21621: LD_INT 261
21623: PUSH
21624: LD_INT 71
21626: PUSH
21627: LD_INT 12
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PPUSH
21640: CALL_OW 69
21644: NOT
21645: PUSH
21646: LD_INT 277
21648: PPUSH
21649: LD_INT 80
21651: PPUSH
21652: CALL_OW 428
21656: NOT
21657: AND
21658: IFFALSE 21601
// uc_nation := GetNation ( vehicle ) ;
21660: LD_ADDR_OWVAR 21
21664: PUSH
21665: LD_VAR 0 1
21669: PPUSH
21670: CALL_OW 248
21674: ST_TO_ADDR
// uc_side := 2 ;
21675: LD_ADDR_OWVAR 20
21679: PUSH
21680: LD_INT 2
21682: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21683: LD_VAR 0 1
21687: PPUSH
21688: CALL_OW 265
21692: PPUSH
21693: LD_VAR 0 1
21697: PPUSH
21698: CALL_OW 262
21702: PPUSH
21703: LD_VAR 0 1
21707: PPUSH
21708: CALL_OW 263
21712: PPUSH
21713: LD_VAR 0 1
21717: PPUSH
21718: CALL_OW 264
21722: PPUSH
21723: LD_INT 66
21725: PPUSH
21726: CALL 30298 0 5
// vehicle := CreateVehicle ;
21730: LD_ADDR_VAR 0 1
21734: PUSH
21735: CALL_OW 45
21739: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21740: LD_VAR 0 1
21744: PPUSH
21745: LD_INT 277
21747: PPUSH
21748: LD_INT 80
21750: PPUSH
21751: LD_INT 4
21753: PPUSH
21754: LD_INT 0
21756: PPUSH
21757: CALL 64799 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21761: LD_VAR 0 2
21765: PPUSH
21766: LD_VAR 0 1
21770: PPUSH
21771: CALL_OW 52
// SetLives ( vehicle , live ) ;
21775: LD_VAR 0 1
21779: PPUSH
21780: LD_VAR 0 3
21784: PPUSH
21785: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 , 40 ] [ Difficulty ] ) then
21789: LD_INT 70
21791: PUSH
21792: LD_INT 60
21794: PUSH
21795: LD_INT 50
21797: PUSH
21798: LD_INT 40
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: PUSH
21807: LD_OWVAR 67
21811: ARRAY
21812: PPUSH
21813: CALL_OW 13
21817: IFFALSE 21836
// SetCargo ( vehicle , mat_oil , 100 ) else
21819: LD_VAR 0 1
21823: PPUSH
21824: LD_INT 2
21826: PPUSH
21827: LD_INT 100
21829: PPUSH
21830: CALL_OW 290
21834: GO 21858
// if live > 333 then
21836: LD_VAR 0 3
21840: PUSH
21841: LD_INT 333
21843: GREATER
21844: IFFALSE 21858
// SetLives ( vehicle , 333 ) ;
21846: LD_VAR 0 1
21850: PPUSH
21851: LD_INT 333
21853: PPUSH
21854: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21858: LD_VAR 0 1
21862: PPUSH
21863: LD_INT 250
21865: PPUSH
21866: LD_INT 119
21868: PPUSH
21869: CALL_OW 111
// end ;
21873: PPOPN 3
21875: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21876: LD_EXP 14
21880: PUSH
21881: LD_EXP 23
21885: AND
21886: IFFALSE 22186
21888: GO 21890
21890: DISABLE
// begin wait ( 0 0$45 ) ;
21891: LD_INT 1575
21893: PPUSH
21894: CALL_OW 67
// DialogueOn ;
21898: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21902: LD_EXP 38
21906: PPUSH
21907: LD_STRING DShar-End-1
21909: PPUSH
21910: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21914: LD_EXP 30
21918: PPUSH
21919: LD_STRING DH-End-2
21921: PPUSH
21922: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21926: LD_EXP 38
21930: PPUSH
21931: LD_STRING DShar-End-3
21933: PPUSH
21934: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21938: LD_EXP 30
21942: PPUSH
21943: LD_STRING DH-End-4
21945: PPUSH
21946: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21950: LD_EXP 38
21954: PPUSH
21955: LD_STRING DShar-End-5
21957: PPUSH
21958: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21962: LD_EXP 38
21966: PPUSH
21967: LD_STRING DShar-End-6
21969: PPUSH
21970: CALL_OW 94
// dwait ( 0 0$2 ) ;
21974: LD_INT 70
21976: PPUSH
21977: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21981: LD_EXP 30
21985: PPUSH
21986: LD_STRING DH-End-7
21988: PPUSH
21989: CALL_OW 88
// DialogueOff ;
21993: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
21997: LD_STRING M6
21999: PPUSH
22000: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
22004: LD_INT 17
22006: PPUSH
22007: LD_INT 1
22009: PPUSH
22010: CALL_OW 424
// escapeAllowed := true ;
22014: LD_ADDR_EXP 24
22018: PUSH
22019: LD_INT 1
22021: ST_TO_ADDR
// wait ( 0 0$2 ) ;
22022: LD_INT 70
22024: PPUSH
22025: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
22029: LD_EXP 41
22033: PPUSH
22034: LD_STRING DKs-End-8
22036: PPUSH
22037: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
22041: LD_EXP 35
22045: PPUSH
22046: LD_STRING DK-End-10
22048: PPUSH
22049: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
22053: LD_EXP 41
22057: PPUSH
22058: LD_STRING DKs-End-9
22060: PPUSH
22061: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
22065: LD_EXP 37
22069: PPUSH
22070: LD_STRING DMar-End-11
22072: PPUSH
22073: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
22077: LD_STRING 05_DrugsTested
22079: PPUSH
22080: LD_EXP 1
22084: PPUSH
22085: CALL_OW 30
22089: IFFALSE 22103
// Say ( Mike , DM-End-12 ) ;
22091: LD_EXP 32
22095: PPUSH
22096: LD_STRING DM-End-12
22098: PPUSH
22099: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
22103: LD_EXP 39
22107: PPUSH
22108: LD_STRING DO-End-13
22110: PPUSH
22111: CALL_OW 88
// if IsOk ( Sophia ) then
22115: LD_EXP 36
22119: PPUSH
22120: CALL_OW 302
22124: IFFALSE 22150
// begin Say ( Sophia , DS-End-15 ) ;
22126: LD_EXP 36
22130: PPUSH
22131: LD_STRING DS-End-15
22133: PPUSH
22134: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
22138: LD_EXP 35
22142: PPUSH
22143: LD_STRING DK-End-16
22145: PPUSH
22146: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
22150: LD_EXP 31
22154: PPUSH
22155: LD_STRING DG-End-17
22157: PPUSH
22158: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
22162: LD_EXP 31
22166: PPUSH
22167: LD_STRING DG-End-18
22169: PPUSH
22170: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
22174: LD_EXP 31
22178: PPUSH
22179: LD_STRING DG-End-19
22181: PPUSH
22182: CALL_OW 88
// end ;
22186: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
22187: LD_EXP 24
22191: IFFALSE 22319
22193: GO 22195
22195: DISABLE
22196: LD_INT 0
22198: PPUSH
22199: PPUSH
// begin enable ;
22200: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
22201: LD_ADDR_OWVAR 47
22205: PUSH
22206: LD_STRING #X106-2
22208: PUSH
22209: LD_EXP 25
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
22218: LD_ADDR_EXP 25
22222: PUSH
22223: LD_EXP 25
22227: PUSH
22228: LD_INT 35
22230: MINUS
22231: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
22232: LD_ADDR_VAR 0 2
22236: PUSH
22237: LD_INT 17
22239: PPUSH
22240: LD_INT 22
22242: PUSH
22243: LD_INT 2
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 21
22252: PUSH
22253: LD_INT 1
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 23
22262: PUSH
22263: LD_INT 2
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: LIST
22274: PPUSH
22275: CALL_OW 71
22279: ST_TO_ADDR
// if not outsiders then
22280: LD_VAR 0 2
22284: NOT
22285: IFFALSE 22302
// begin escapeAllowed := false ;
22287: LD_ADDR_EXP 24
22291: PUSH
22292: LD_INT 0
22294: ST_TO_ADDR
// disable ;
22295: DISABLE
// MissionWin ;
22296: CALL 22322 0 0
// exit ;
22300: GO 22319
// end ; if escapeTimer <= 0 0$00 then
22302: LD_EXP 25
22306: PUSH
22307: LD_INT 0
22309: LESSEQUAL
22310: IFFALSE 22319
// YouLost ( TimeOut ) ;
22312: LD_STRING TimeOut
22314: PPUSH
22315: CALL_OW 104
// end ;
22319: PPOPN 2
22321: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
22322: LD_INT 0
22324: PPUSH
22325: PPUSH
22326: PPUSH
22327: PPUSH
22328: PPUSH
// Say ( Heike , DH-End-20 ) ;
22329: LD_EXP 30
22333: PPUSH
22334: LD_STRING DH-End-20
22336: PPUSH
22337: CALL_OW 88
// if rolfDied then
22341: LD_EXP 13
22345: IFFALSE 22360
// AddMedal ( med1 , - 1 ) else
22347: LD_STRING med1
22349: PPUSH
22350: LD_INT 1
22352: NEG
22353: PPUSH
22354: CALL_OW 101
22358: GO 22390
// if not canRolfJoin then
22360: LD_EXP 29
22364: NOT
22365: IFFALSE 22380
// AddMedal ( med1 , - 2 ) else
22367: LD_STRING med1
22369: PPUSH
22370: LD_INT 2
22372: NEG
22373: PPUSH
22374: CALL_OW 101
22378: GO 22390
// AddMedal ( med1 , 1 ) ;
22380: LD_STRING med1
22382: PPUSH
22383: LD_INT 1
22385: PPUSH
22386: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
22390: LD_EXP 22
22394: PUSH
22395: LD_EXP 16
22399: AND
22400: IFFALSE 22414
// AddMedal ( med2 , 1 ) else
22402: LD_STRING med2
22404: PPUSH
22405: LD_INT 1
22407: PPUSH
22408: CALL_OW 101
22412: GO 22463
// if omarHasVehicles then
22414: LD_EXP 22
22418: IFFALSE 22433
// AddMedal ( med2 , - 1 ) else
22420: LD_STRING med2
22422: PPUSH
22423: LD_INT 1
22425: NEG
22426: PPUSH
22427: CALL_OW 101
22431: GO 22463
// if rolfHasVehicles then
22433: LD_EXP 16
22437: IFFALSE 22452
// AddMedal ( med2 , - 2 ) else
22439: LD_STRING med2
22441: PPUSH
22442: LD_INT 2
22444: NEG
22445: PPUSH
22446: CALL_OW 101
22450: GO 22463
// AddMedal ( med2 , - 3 ) ;
22452: LD_STRING med2
22454: PPUSH
22455: LD_INT 3
22457: NEG
22458: PPUSH
22459: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 62 ] [ Difficulty ] and heikeLoseCounter = 0 then
22463: LD_EXP 5
22467: PUSH
22468: LD_INT 30
22470: PUSH
22471: LD_INT 45
22473: PUSH
22474: LD_INT 50
22476: PUSH
22477: LD_INT 62
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: PUSH
22486: LD_OWVAR 67
22490: ARRAY
22491: GREATEREQUAL
22492: PUSH
22493: LD_EXP 26
22497: PUSH
22498: LD_INT 0
22500: EQUAL
22501: AND
22502: IFFALSE 22516
// AddMedal ( med3 , 1 ) else
22504: LD_STRING med3
22506: PPUSH
22507: LD_INT 1
22509: PPUSH
22510: CALL_OW 101
22514: GO 22546
// if heikeLoseCounter then
22516: LD_EXP 26
22520: IFFALSE 22535
// AddMedal ( med3 , - 2 ) else
22522: LD_STRING med3
22524: PPUSH
22525: LD_INT 2
22527: NEG
22528: PPUSH
22529: CALL_OW 101
22533: GO 22546
// AddMedal ( med3 , - 1 ) ;
22535: LD_STRING med3
22537: PPUSH
22538: LD_INT 1
22540: NEG
22541: PPUSH
22542: CALL_OW 101
// GiveMedals ( MAIN ) ;
22546: LD_STRING MAIN
22548: PPUSH
22549: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
22553: LD_INT 22
22555: PUSH
22556: LD_INT 2
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 23
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 21
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: PPUSH
22588: CALL_OW 69
22592: PPUSH
22593: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
22597: LD_EXP 30
22601: PPUSH
22602: LD_STRING 06_Heike
22604: PPUSH
22605: CALL_OW 38
// if Aviradze then
22609: LD_EXP 42
22613: IFFALSE 22627
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
22615: LD_EXP 42
22619: PPUSH
22620: LD_STRING 06_Aviradze
22622: PPUSH
22623: CALL_OW 38
// if Ibrahim then
22627: LD_EXP 33
22631: IFFALSE 22645
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
22633: LD_EXP 33
22637: PPUSH
22638: LD_STRING 06_Ibrahim
22640: PPUSH
22641: CALL_OW 38
// if Kamil then
22645: LD_EXP 34
22649: IFFALSE 22663
// SaveCharacters ( Kamil , 06_Kamil ) ;
22651: LD_EXP 34
22655: PPUSH
22656: LD_STRING 06_Kamil
22658: PPUSH
22659: CALL_OW 38
// if Sophia then
22663: LD_EXP 36
22667: IFFALSE 22681
// SaveCharacters ( Sophia , 06_Sophia ) ;
22669: LD_EXP 36
22673: PPUSH
22674: LD_STRING 06_Sophia
22676: PPUSH
22677: CALL_OW 38
// if Kaia then
22681: LD_EXP 35
22685: IFFALSE 22699
// SaveCharacters ( Kaia , 06_Kaia ) ;
22687: LD_EXP 35
22691: PPUSH
22692: LD_STRING 06_Kaia
22694: PPUSH
22695: CALL_OW 38
// if Givi then
22699: LD_EXP 31
22703: IFFALSE 22717
// SaveCharacters ( Givi , 06_Givi ) ;
22705: LD_EXP 31
22709: PPUSH
22710: LD_STRING 06_Givi
22712: PPUSH
22713: CALL_OW 38
// if Mike then
22717: LD_EXP 32
22721: IFFALSE 22735
// SaveCharacters ( Mike , 06_Mike ) ;
22723: LD_EXP 32
22727: PPUSH
22728: LD_STRING 06_Mike
22730: PPUSH
22731: CALL_OW 38
// if Markov then
22735: LD_EXP 37
22739: IFFALSE 22753
// SaveCharacters ( Markov , 06_Markov ) ;
22741: LD_EXP 37
22745: PPUSH
22746: LD_STRING 06_Markov
22748: PPUSH
22749: CALL_OW 38
// if Kurt then
22753: LD_EXP 41
22757: IFFALSE 22771
// SaveCharacters ( Kurt , 06_Kurt ) ;
22759: LD_EXP 41
22763: PPUSH
22764: LD_STRING 06_Kurt
22766: PPUSH
22767: CALL_OW 38
// if heikeSecondSquad then
22771: LD_EXP 45
22775: IFFALSE 22789
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22777: LD_EXP 45
22781: PPUSH
22782: LD_STRING 06_others
22784: PPUSH
22785: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22789: LD_ADDR_VAR 0 3
22793: PUSH
22794: LD_INT 22
22796: PUSH
22797: LD_INT 2
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 23
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PPUSH
22818: CALL_OW 69
22822: ST_TO_ADDR
// if tmp then
22823: LD_VAR 0 3
22827: IFFALSE 22841
// SaveCharacters ( tmp , 06_apes ) ;
22829: LD_VAR 0 3
22833: PPUSH
22834: LD_STRING 06_apes
22836: PPUSH
22837: CALL_OW 38
// if Rolf then
22841: LD_EXP 43
22845: IFFALSE 22896
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
22847: LD_EXP 43
22851: PPUSH
22852: LD_STRING 06_Rolf
22854: PPUSH
22855: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
22859: LD_STRING enableBioCharacter(BIO_ROLF)
22861: PPUSH
22862: CALL_OW 559
// if rolfSquad diff Rolf then
22866: LD_EXP 47
22870: PUSH
22871: LD_EXP 43
22875: DIFF
22876: IFFALSE 22896
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
22878: LD_EXP 47
22882: PUSH
22883: LD_EXP 43
22887: DIFF
22888: PPUSH
22889: LD_STRING 06_RolfSquad
22891: PPUSH
22892: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22896: LD_ADDR_VAR 0 3
22900: PUSH
22901: LD_INT 17
22903: PPUSH
22904: LD_INT 21
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PPUSH
22914: CALL_OW 70
22918: ST_TO_ADDR
// if tmp then
22919: LD_VAR 0 3
22923: IFFALSE 23217
// begin tmp2 := [ ] ;
22925: LD_ADDR_VAR 0 4
22929: PUSH
22930: EMPTY
22931: ST_TO_ADDR
// for i in tmp do
22932: LD_ADDR_VAR 0 2
22936: PUSH
22937: LD_VAR 0 3
22941: PUSH
22942: FOR_IN
22943: IFFALSE 23203
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22945: LD_VAR 0 2
22949: PPUSH
22950: CALL_OW 264
22954: PUSH
22955: LD_INT 32
22957: PUSH
22958: LD_INT 12
22960: PUSH
22961: LD_INT 51
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: IN
22969: IFFALSE 23106
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22971: LD_ADDR_VAR 0 5
22975: PUSH
22976: LD_VAR 0 2
22980: PPUSH
22981: LD_INT 1
22983: PPUSH
22984: CALL_OW 289
22988: PUSH
22989: LD_VAR 0 2
22993: PPUSH
22994: LD_INT 2
22996: PPUSH
22997: CALL_OW 289
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
23006: LD_ADDR_VAR 0 4
23010: PUSH
23011: LD_VAR 0 4
23015: PPUSH
23016: LD_VAR 0 4
23020: PUSH
23021: LD_INT 1
23023: PLUS
23024: PPUSH
23025: LD_VAR 0 2
23029: PPUSH
23030: CALL_OW 265
23034: PUSH
23035: LD_VAR 0 2
23039: PPUSH
23040: CALL_OW 262
23044: PUSH
23045: LD_VAR 0 2
23049: PPUSH
23050: CALL_OW 263
23054: PUSH
23055: LD_VAR 0 2
23059: PPUSH
23060: CALL_OW 264
23064: PUSH
23065: LD_VAR 0 2
23069: PPUSH
23070: CALL_OW 248
23074: PUSH
23075: LD_VAR 0 2
23079: PPUSH
23080: CALL_OW 256
23084: PUSH
23085: LD_VAR 0 5
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: PPUSH
23099: CALL_OW 1
23103: ST_TO_ADDR
// end else
23104: GO 23201
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
23106: LD_ADDR_VAR 0 4
23110: PUSH
23111: LD_VAR 0 4
23115: PPUSH
23116: LD_VAR 0 4
23120: PUSH
23121: LD_INT 1
23123: PLUS
23124: PPUSH
23125: LD_VAR 0 2
23129: PPUSH
23130: CALL_OW 265
23134: PUSH
23135: LD_VAR 0 2
23139: PPUSH
23140: CALL_OW 262
23144: PUSH
23145: LD_VAR 0 2
23149: PPUSH
23150: CALL_OW 263
23154: PUSH
23155: LD_VAR 0 2
23159: PPUSH
23160: CALL_OW 264
23164: PUSH
23165: LD_VAR 0 2
23169: PPUSH
23170: CALL_OW 248
23174: PUSH
23175: LD_VAR 0 2
23179: PPUSH
23180: CALL_OW 256
23184: PUSH
23185: EMPTY
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: PPUSH
23196: CALL_OW 1
23200: ST_TO_ADDR
23201: GO 22942
23203: POP
23204: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
23205: LD_VAR 0 4
23209: PPUSH
23210: LD_STRING 06_Vehicles
23212: PPUSH
23213: CALL_OW 39
// end ; YouWin ;
23217: CALL_OW 103
// end ; end_of_file
23221: LD_VAR 0 1
23225: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
23226: LD_INT 0
23228: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
23229: LD_VAR 0 1
23233: PPUSH
23234: LD_VAR 0 2
23238: PPUSH
23239: CALL 82400 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
23243: LD_VAR 0 1
23247: PPUSH
23248: CALL_OW 255
23252: PUSH
23253: LD_INT 2
23255: EQUAL
23256: PUSH
23257: LD_OWVAR 52
23261: AND
23262: PUSH
23263: LD_VAR 0 1
23267: PPUSH
23268: CALL_OW 263
23272: PUSH
23273: LD_INT 1
23275: EQUAL
23276: AND
23277: IFFALSE 23332
// begin driver := IsDrivenBy ( vehicle ) ;
23279: LD_ADDR_VAR 0 3
23283: PUSH
23284: LD_VAR 0 1
23288: PPUSH
23289: CALL_OW 311
23293: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
23294: LD_VAR 0 1
23298: PPUSH
23299: LD_INT 211
23301: PPUSH
23302: LD_INT 101
23304: PPUSH
23305: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23309: LD_VAR 0 3
23313: PPUSH
23314: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23318: LD_VAR 0 3
23322: PPUSH
23323: LD_VAR 0 2
23327: PPUSH
23328: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
23332: LD_VAR 0 1
23336: PPUSH
23337: CALL_OW 255
23341: PUSH
23342: LD_INT 3
23344: EQUAL
23345: IFFALSE 23376
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
23347: LD_ADDR_EXP 56
23351: PUSH
23352: LD_EXP 56
23356: PPUSH
23357: LD_EXP 56
23361: PUSH
23362: LD_INT 1
23364: PLUS
23365: PPUSH
23366: LD_VAR 0 1
23370: PPUSH
23371: CALL_OW 1
23375: ST_TO_ADDR
// end ;
23376: PPOPN 3
23378: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
23379: LD_VAR 0 1
23383: PPUSH
23384: CALL_OW 255
23388: PUSH
23389: LD_INT 8
23391: EQUAL
23392: PUSH
23393: LD_VAR 0 1
23397: PPUSH
23398: CALL_OW 266
23402: PUSH
23403: LD_INT 4
23405: EQUAL
23406: AND
23407: IFFALSE 23418
// ComUpgrade ( b ) ;
23409: LD_VAR 0 1
23413: PPUSH
23414: CALL_OW 146
// end ;
23418: PPOPN 1
23420: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
23421: LD_VAR 0 1
23425: PPUSH
23426: CALL 82280 0 1
// if un = Heike then
23430: LD_VAR 0 1
23434: PUSH
23435: LD_EXP 30
23439: EQUAL
23440: IFFALSE 23449
// YouLost ( Heike ) ;
23442: LD_STRING Heike
23444: PPUSH
23445: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
23449: LD_VAR 0 1
23453: PUSH
23454: LD_INT 22
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 23
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PPUSH
23478: CALL_OW 69
23482: IN
23483: IFFALSE 23499
// heikeLoseCounter := heikeLoseCounter + 1 ;
23485: LD_ADDR_EXP 26
23489: PUSH
23490: LD_EXP 26
23494: PUSH
23495: LD_INT 1
23497: PLUS
23498: ST_TO_ADDR
// if un = arDepot then
23499: LD_VAR 0 1
23503: PUSH
23504: LD_EXP 44
23508: EQUAL
23509: IFFALSE 23518
// YouLost ( Base ) ;
23511: LD_STRING Base
23513: PPUSH
23514: CALL_OW 104
// if un = Rolf then
23518: LD_VAR 0 1
23522: PUSH
23523: LD_EXP 43
23527: EQUAL
23528: IFFALSE 23538
// rolfDied := true ;
23530: LD_ADDR_EXP 13
23534: PUSH
23535: LD_INT 1
23537: ST_TO_ADDR
// if un in rolfSquad then
23538: LD_VAR 0 1
23542: PUSH
23543: LD_EXP 47
23547: IN
23548: IFFALSE 23566
// rolfSquad := rolfSquad diff un ;
23550: LD_ADDR_EXP 47
23554: PUSH
23555: LD_EXP 47
23559: PUSH
23560: LD_VAR 0 1
23564: DIFF
23565: ST_TO_ADDR
// if un in omarSquad then
23566: LD_VAR 0 1
23570: PUSH
23571: LD_EXP 48
23575: IN
23576: IFFALSE 23594
// omarSquad := omarSquad diff un ;
23578: LD_ADDR_EXP 48
23582: PUSH
23583: LD_EXP 48
23587: PUSH
23588: LD_VAR 0 1
23592: DIFF
23593: ST_TO_ADDR
// if GetSide ( un ) = 3 then
23594: LD_VAR 0 1
23598: PPUSH
23599: CALL_OW 255
23603: PUSH
23604: LD_INT 3
23606: EQUAL
23607: IFFALSE 23623
// ruLoseCounter := ruLoseCounter + 1 ;
23609: LD_ADDR_EXP 5
23613: PUSH
23614: LD_EXP 5
23618: PUSH
23619: LD_INT 1
23621: PLUS
23622: ST_TO_ADDR
// if un in ruAttackers then
23623: LD_VAR 0 1
23627: PUSH
23628: LD_EXP 57
23632: IN
23633: IFFALSE 23651
// ruAttackers := ruAttackers diff un ;
23635: LD_ADDR_EXP 57
23639: PUSH
23640: LD_EXP 57
23644: PUSH
23645: LD_VAR 0 1
23649: DIFF
23650: ST_TO_ADDR
// end ;
23651: PPOPN 1
23653: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
23654: LD_INT 0
23656: PPUSH
23657: PPUSH
23658: PPUSH
23659: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 255
23669: PUSH
23670: LD_INT 3
23672: EQUAL
23673: PUSH
23674: LD_VAR 0 1
23678: PUSH
23679: LD_EXP 57
23683: IN
23684: NOT
23685: AND
23686: IFFALSE 24182
// begin if not IsInArea ( un , ruMainBase ) then
23688: LD_VAR 0 1
23692: PPUSH
23693: LD_INT 10
23695: PPUSH
23696: CALL_OW 308
23700: NOT
23701: IFFALSE 23715
// ComMoveToArea ( un , ruMainBase ) ;
23703: LD_VAR 0 1
23707: PPUSH
23708: LD_INT 10
23710: PPUSH
23711: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23715: LD_INT 35
23717: PPUSH
23718: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23722: LD_VAR 0 1
23726: PPUSH
23727: CALL_OW 302
23731: NOT
23732: PUSH
23733: LD_VAR 0 1
23737: PPUSH
23738: LD_INT 10
23740: PPUSH
23741: CALL_OW 308
23745: OR
23746: IFFALSE 23715
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23748: LD_ADDR_EXP 55
23752: PUSH
23753: LD_EXP 55
23757: PPUSH
23758: LD_EXP 55
23762: PUSH
23763: LD_INT 1
23765: PLUS
23766: PPUSH
23767: LD_VAR 0 1
23771: PPUSH
23772: CALL_OW 1
23776: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23777: LD_ADDR_VAR 0 8
23781: PUSH
23782: LD_INT 72
23784: PUSH
23785: LD_INT 12
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: ST_TO_ADDR
// if tmp then
23792: LD_VAR 0 8
23796: IFFALSE 23911
// for i in tmp do
23798: LD_ADDR_VAR 0 5
23802: PUSH
23803: LD_VAR 0 8
23807: PUSH
23808: FOR_IN
23809: IFFALSE 23909
// if UnitsInside ( i ) < 6 then
23811: LD_VAR 0 5
23815: PPUSH
23816: CALL_OW 313
23820: PUSH
23821: LD_INT 6
23823: LESS
23824: IFFALSE 23907
// begin AddComEnterUnit ( un , i ) ;
23826: LD_VAR 0 1
23830: PPUSH
23831: LD_VAR 0 5
23835: PPUSH
23836: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23840: LD_VAR 0 8
23844: PPUSH
23845: LD_INT 22
23847: PUSH
23848: LD_INT 23
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 1
23857: PPUSH
23858: LD_INT 2
23860: PPUSH
23861: CALL_OW 12
23865: ARRAY
23866: PPUSH
23867: LD_INT 1
23869: PPUSH
23870: LD_INT 1
23872: PPUSH
23873: LD_INT 44
23875: PUSH
23876: LD_INT 46
23878: PUSH
23879: LD_INT 47
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 1
23889: PPUSH
23890: LD_INT 3
23892: PPUSH
23893: CALL_OW 12
23897: ARRAY
23898: PPUSH
23899: CALL_OW 185
// exit ;
23903: POP
23904: POP
23905: GO 24182
// end ;
23907: GO 23808
23909: POP
23910: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23911: LD_ADDR_VAR 0 8
23915: PUSH
23916: LD_INT 10
23918: PPUSH
23919: LD_INT 22
23921: PUSH
23922: LD_INT 3
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 50
23931: PUSH
23932: EMPTY
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 30
23940: PUSH
23941: LD_INT 4
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 30
23950: PUSH
23951: LD_INT 5
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 30
23960: PUSH
23961: LD_INT 32
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 31
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: LIST
23989: PPUSH
23990: CALL_OW 70
23994: ST_TO_ADDR
// if not tmp then
23995: LD_VAR 0 8
23999: NOT
24000: IFFALSE 24019
// begin ComMoveXY ( un , 83 , 133 ) ;
24002: LD_VAR 0 1
24006: PPUSH
24007: LD_INT 83
24009: PPUSH
24010: LD_INT 133
24012: PPUSH
24013: CALL_OW 111
// exit ;
24017: GO 24182
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24019: LD_ADDR_VAR 0 6
24023: PUSH
24024: LD_VAR 0 1
24028: PPUSH
24029: LD_VAR 0 8
24033: PPUSH
24034: LD_INT 1
24036: PPUSH
24037: LD_INT 1
24039: PPUSH
24040: CALL 30855 0 4
24044: PUSH
24045: FOR_IN
24046: IFFALSE 24180
// begin case GetBType ( b ) of b_armoury , b_barracks :
24048: LD_VAR 0 6
24052: PPUSH
24053: CALL_OW 266
24057: PUSH
24058: LD_INT 4
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24072
24064: LD_INT 5
24066: DOUBLE
24067: EQUAL
24068: IFTRUE 24072
24070: GO 24083
24072: POP
// p := 6 ; b_breastwork , b_bunker :
24073: LD_ADDR_VAR 0 7
24077: PUSH
24078: LD_INT 6
24080: ST_TO_ADDR
24081: GO 24109
24083: LD_INT 31
24085: DOUBLE
24086: EQUAL
24087: IFTRUE 24097
24089: LD_INT 32
24091: DOUBLE
24092: EQUAL
24093: IFTRUE 24097
24095: GO 24108
24097: POP
// p := 1 ; end ;
24098: LD_ADDR_VAR 0 7
24102: PUSH
24103: LD_INT 1
24105: ST_TO_ADDR
24106: GO 24109
24108: POP
// if UnitsInside ( b ) < p then
24109: LD_VAR 0 6
24113: PPUSH
24114: CALL_OW 313
24118: PUSH
24119: LD_VAR 0 7
24123: LESS
24124: IFFALSE 24178
// begin ComEnterUnit ( un , b ) ;
24126: LD_VAR 0 1
24130: PPUSH
24131: LD_VAR 0 6
24135: PPUSH
24136: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
24140: LD_VAR 0 6
24144: PPUSH
24145: CALL_OW 266
24149: PUSH
24150: LD_INT 4
24152: PUSH
24153: LD_INT 5
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: IN
24160: IFFALSE 24174
// AddComChangeProfession ( un , class_soldier ) ;
24162: LD_VAR 0 1
24166: PPUSH
24167: LD_INT 1
24169: PPUSH
24170: CALL_OW 183
// exit ;
24174: POP
24175: POP
24176: GO 24182
// end ; end ;
24178: GO 24045
24180: POP
24181: POP
// end ; end ;
24182: PPOPN 8
24184: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
24185: LD_INT 0
24187: PPUSH
24188: PPUSH
24189: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
24190: LD_VAR 0 2
24194: PPUSH
24195: CALL_OW 255
24199: PUSH
24200: LD_INT 3
24202: EQUAL
24203: PUSH
24204: LD_VAR 0 2
24208: PPUSH
24209: CALL_OW 257
24213: PUSH
24214: LD_INT 1
24216: EQUAL
24217: AND
24218: PUSH
24219: LD_VAR 0 2
24223: PUSH
24224: LD_EXP 55
24228: IN
24229: NOT
24230: AND
24231: IFFALSE 24544
// begin ComMoveToArea ( un , ruMainBase ) ;
24233: LD_VAR 0 2
24237: PPUSH
24238: LD_INT 10
24240: PPUSH
24241: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
24245: LD_INT 35
24247: PPUSH
24248: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
24252: LD_VAR 0 2
24256: PPUSH
24257: CALL_OW 302
24261: NOT
24262: PUSH
24263: LD_VAR 0 2
24267: PPUSH
24268: LD_INT 10
24270: PPUSH
24271: CALL_OW 308
24275: OR
24276: IFFALSE 24245
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
24278: LD_ADDR_EXP 55
24282: PUSH
24283: LD_EXP 55
24287: PPUSH
24288: LD_EXP 55
24292: PUSH
24293: LD_INT 1
24295: PLUS
24296: PPUSH
24297: LD_VAR 0 2
24301: PPUSH
24302: CALL_OW 1
24306: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24307: LD_ADDR_VAR 0 4
24311: PUSH
24312: LD_INT 10
24314: PPUSH
24315: LD_INT 22
24317: PUSH
24318: LD_INT 3
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 50
24327: PUSH
24328: EMPTY
24329: LIST
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: LD_INT 30
24336: PUSH
24337: LD_INT 4
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 5
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 30
24356: PUSH
24357: LD_INT 32
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 30
24366: PUSH
24367: LD_INT 31
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: LIST
24385: PPUSH
24386: CALL_OW 70
24390: ST_TO_ADDR
// if not tmp then
24391: LD_VAR 0 4
24395: NOT
24396: IFFALSE 24415
// begin ComMoveXY ( un , 83 , 133 ) ;
24398: LD_VAR 0 2
24402: PPUSH
24403: LD_INT 83
24405: PPUSH
24406: LD_INT 133
24408: PPUSH
24409: CALL_OW 111
// exit ;
24413: GO 24793
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24415: LD_ADDR_VAR 0 5
24419: PUSH
24420: LD_VAR 0 2
24424: PPUSH
24425: LD_VAR 0 4
24429: PPUSH
24430: LD_INT 1
24432: PPUSH
24433: LD_INT 1
24435: PPUSH
24436: CALL 30855 0 4
24440: PUSH
24441: FOR_IN
24442: IFFALSE 24542
// begin case GetBType ( b ) of b_armoury , b_barracks :
24444: LD_VAR 0 5
24448: PPUSH
24449: CALL_OW 266
24453: PUSH
24454: LD_INT 4
24456: DOUBLE
24457: EQUAL
24458: IFTRUE 24468
24460: LD_INT 5
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24479
24468: POP
// p := 6 ; b_breastwork , b_bunker :
24469: LD_ADDR_VAR 0 3
24473: PUSH
24474: LD_INT 6
24476: ST_TO_ADDR
24477: GO 24505
24479: LD_INT 31
24481: DOUBLE
24482: EQUAL
24483: IFTRUE 24493
24485: LD_INT 32
24487: DOUBLE
24488: EQUAL
24489: IFTRUE 24493
24491: GO 24504
24493: POP
// p := 1 ; end ;
24494: LD_ADDR_VAR 0 3
24498: PUSH
24499: LD_INT 1
24501: ST_TO_ADDR
24502: GO 24505
24504: POP
// if UnitsInside ( b ) < p then
24505: LD_VAR 0 5
24509: PPUSH
24510: CALL_OW 313
24514: PUSH
24515: LD_VAR 0 3
24519: LESS
24520: IFFALSE 24540
// begin ComEnterUnit ( un , b ) ;
24522: LD_VAR 0 2
24526: PPUSH
24527: LD_VAR 0 5
24531: PPUSH
24532: CALL_OW 120
// exit ;
24536: POP
24537: POP
24538: GO 24793
// end ; end ;
24540: GO 24441
24542: POP
24543: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
24544: LD_VAR 0 2
24548: PUSH
24549: LD_EXP 55
24553: IN
24554: PUSH
24555: LD_VAR 0 2
24559: PPUSH
24560: CALL_OW 257
24564: PUSH
24565: LD_INT 1
24567: EQUAL
24568: AND
24569: IFFALSE 24793
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24571: LD_ADDR_VAR 0 4
24575: PUSH
24576: LD_INT 10
24578: PPUSH
24579: LD_INT 22
24581: PUSH
24582: LD_INT 3
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 50
24591: PUSH
24592: EMPTY
24593: LIST
24594: PUSH
24595: LD_INT 2
24597: PUSH
24598: LD_INT 30
24600: PUSH
24601: LD_INT 4
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 30
24610: PUSH
24611: LD_INT 5
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 30
24620: PUSH
24621: LD_INT 32
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 30
24630: PUSH
24631: LD_INT 31
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: PPUSH
24650: CALL_OW 70
24654: ST_TO_ADDR
// if not tmp then
24655: LD_VAR 0 4
24659: NOT
24660: IFFALSE 24664
// exit ;
24662: GO 24793
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
24664: LD_ADDR_VAR 0 5
24668: PUSH
24669: LD_VAR 0 2
24673: PPUSH
24674: LD_VAR 0 4
24678: PPUSH
24679: LD_INT 1
24681: PPUSH
24682: LD_INT 1
24684: PPUSH
24685: CALL 30855 0 4
24689: PUSH
24690: FOR_IN
24691: IFFALSE 24791
// begin case GetBType ( b ) of b_armoury , b_barracks :
24693: LD_VAR 0 5
24697: PPUSH
24698: CALL_OW 266
24702: PUSH
24703: LD_INT 4
24705: DOUBLE
24706: EQUAL
24707: IFTRUE 24717
24709: LD_INT 5
24711: DOUBLE
24712: EQUAL
24713: IFTRUE 24717
24715: GO 24728
24717: POP
// p := 6 ; b_breastwork , b_bunker :
24718: LD_ADDR_VAR 0 3
24722: PUSH
24723: LD_INT 6
24725: ST_TO_ADDR
24726: GO 24754
24728: LD_INT 31
24730: DOUBLE
24731: EQUAL
24732: IFTRUE 24742
24734: LD_INT 32
24736: DOUBLE
24737: EQUAL
24738: IFTRUE 24742
24740: GO 24753
24742: POP
// p := 1 ; end ;
24743: LD_ADDR_VAR 0 3
24747: PUSH
24748: LD_INT 1
24750: ST_TO_ADDR
24751: GO 24754
24753: POP
// if UnitsInside ( b ) < p then
24754: LD_VAR 0 5
24758: PPUSH
24759: CALL_OW 313
24763: PUSH
24764: LD_VAR 0 3
24768: LESS
24769: IFFALSE 24789
// begin ComEnterUnit ( un , b ) ;
24771: LD_VAR 0 2
24775: PPUSH
24776: LD_VAR 0 5
24780: PPUSH
24781: CALL_OW 120
// exit ;
24785: POP
24786: POP
24787: GO 24793
// end ; end ;
24789: GO 24690
24791: POP
24792: POP
// end ; end ;
24793: PPOPN 5
24795: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24796: LD_VAR 0 1
24800: PUSH
24801: LD_INT 2
24803: EQUAL
24804: PUSH
24805: LD_VAR 0 2
24809: PUSH
24810: LD_INT 5
24812: PUSH
24813: LD_INT 8
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: IN
24820: AND
24821: IFFALSE 24830
// YouLost ( FriendlyFire ) ;
24823: LD_STRING FriendlyFire
24825: PPUSH
24826: CALL_OW 104
// end ;
24830: PPOPN 2
24832: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24833: LD_VAR 0 1
24837: PPUSH
24838: CALL_OW 255
24842: PUSH
24843: LD_INT 8
24845: EQUAL
24846: PUSH
24847: LD_VAR 0 1
24851: PPUSH
24852: CALL_OW 266
24856: PUSH
24857: LD_INT 5
24859: EQUAL
24860: AND
24861: IFFALSE 24875
// SetClass ( unit , class_mortar ) ;
24863: LD_VAR 0 2
24867: PPUSH
24868: LD_INT 8
24870: PPUSH
24871: CALL_OW 336
// end ; end_of_file
24875: PPOPN 2
24877: END
// every 0 0$50 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 , 150 ] [ Difficulty ] do
24878: LD_INT 6
24880: PPUSH
24881: LD_INT 1
24883: PPUSH
24884: CALL_OW 287
24888: PUSH
24889: LD_INT 300
24891: PUSH
24892: LD_INT 250
24894: PUSH
24895: LD_INT 200
24897: PUSH
24898: LD_INT 150
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: PUSH
24907: LD_OWVAR 67
24911: ARRAY
24912: LESS
24913: IFFALSE 24940
24915: GO 24917
24917: DISABLE
// begin enable ;
24918: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24919: LD_INT 1
24921: PPUSH
24922: LD_INT 5
24924: PPUSH
24925: CALL_OW 12
24929: PPUSH
24930: LD_INT 6
24932: PPUSH
24933: LD_INT 1
24935: PPUSH
24936: CALL_OW 55
// end ; end_of_file
24940: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24941: LD_EXP 18
24945: PUSH
24946: LD_EXP 20
24950: AND
24951: PUSH
24952: LD_EXP 17
24956: PUSH
24957: LD_EXP 19
24961: AND
24962: OR
24963: IFFALSE 25282
24965: GO 24967
24967: DISABLE
// begin enable ;
24968: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24969: LD_EXP 18
24973: PUSH
24974: LD_EXP 20
24978: AND
24979: PUSH
24980: LD_EXP 17
24984: PUSH
24985: LD_EXP 19
24989: AND
24990: AND
24991: IFFALSE 25128
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24993: LD_ADDR_OWVAR 47
24997: PUSH
24998: LD_STRING #X106-1a
25000: PUSH
25001: LD_EXP 21
25005: PUSH
25006: LD_INT 16
25008: PPUSH
25009: LD_INT 22
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 21
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 33
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 58
25041: PUSH
25042: EMPTY
25043: LIST
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: PPUSH
25051: CALL_OW 70
25055: MINUS
25056: PPUSH
25057: CALL 64845 0 1
25061: PUSH
25062: LD_STRING #X106-3a
25064: PUSH
25065: LD_EXP 20
25069: PUSH
25070: LD_STRING #X106-1
25072: PUSH
25073: LD_EXP 47
25077: PUSH
25078: LD_INT 0
25080: PLUS
25081: PUSH
25082: LD_EXP 47
25086: PPUSH
25087: LD_INT 55
25089: PUSH
25090: EMPTY
25091: LIST
25092: PPUSH
25093: CALL_OW 72
25097: PUSH
25098: LD_INT 0
25100: PLUS
25101: MINUS
25102: PPUSH
25103: CALL 64845 0 1
25107: PUSH
25108: LD_STRING #X106-3
25110: PUSH
25111: LD_EXP 19
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: ST_TO_ADDR
// end else
25126: GO 25282
// if omarWantVehicles and omarWaitingForVehiclesTimer then
25128: LD_EXP 18
25132: PUSH
25133: LD_EXP 20
25137: AND
25138: IFFALSE 25225
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
25140: LD_ADDR_OWVAR 47
25144: PUSH
25145: LD_STRING #X106-1a
25147: PUSH
25148: LD_EXP 21
25152: PUSH
25153: LD_INT 16
25155: PPUSH
25156: LD_INT 22
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 21
25168: PUSH
25169: LD_INT 2
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 33
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 58
25188: PUSH
25189: EMPTY
25190: LIST
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: PPUSH
25198: CALL_OW 70
25202: MINUS
25203: PPUSH
25204: CALL 64845 0 1
25208: PUSH
25209: LD_STRING #X106-3a
25211: PUSH
25212: LD_EXP 20
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: ST_TO_ADDR
// end else
25223: GO 25282
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25225: LD_ADDR_OWVAR 47
25229: PUSH
25230: LD_STRING #X106-1
25232: PUSH
25233: LD_EXP 47
25237: PUSH
25238: LD_INT 0
25240: PLUS
25241: PUSH
25242: LD_EXP 47
25246: PPUSH
25247: LD_INT 55
25249: PUSH
25250: EMPTY
25251: LIST
25252: PPUSH
25253: CALL_OW 72
25257: PUSH
25258: LD_INT 0
25260: PLUS
25261: MINUS
25262: PPUSH
25263: CALL 64845 0 1
25267: PUSH
25268: LD_STRING #X106-3
25270: PUSH
25271: LD_EXP 19
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: ST_TO_ADDR
// end ; end ; end_of_file
25282: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25283: LD_INT 0
25285: PPUSH
25286: PPUSH
// if exist_mode then
25287: LD_VAR 0 2
25291: IFFALSE 25316
// unit := CreateCharacter ( prefix & ident ) else
25293: LD_ADDR_VAR 0 5
25297: PUSH
25298: LD_VAR 0 3
25302: PUSH
25303: LD_VAR 0 1
25307: STR
25308: PPUSH
25309: CALL_OW 34
25313: ST_TO_ADDR
25314: GO 25331
// unit := NewCharacter ( ident ) ;
25316: LD_ADDR_VAR 0 5
25320: PUSH
25321: LD_VAR 0 1
25325: PPUSH
25326: CALL_OW 25
25330: ST_TO_ADDR
// result := unit ;
25331: LD_ADDR_VAR 0 4
25335: PUSH
25336: LD_VAR 0 5
25340: ST_TO_ADDR
// end ;
25341: LD_VAR 0 4
25345: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25346: LD_INT 0
25348: PPUSH
25349: PPUSH
// if not side or not nation then
25350: LD_VAR 0 1
25354: NOT
25355: PUSH
25356: LD_VAR 0 2
25360: NOT
25361: OR
25362: IFFALSE 25366
// exit ;
25364: GO 26134
// case nation of nation_american :
25366: LD_VAR 0 2
25370: PUSH
25371: LD_INT 1
25373: DOUBLE
25374: EQUAL
25375: IFTRUE 25379
25377: GO 25593
25379: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25380: LD_ADDR_VAR 0 4
25384: PUSH
25385: LD_INT 35
25387: PUSH
25388: LD_INT 45
25390: PUSH
25391: LD_INT 46
25393: PUSH
25394: LD_INT 47
25396: PUSH
25397: LD_INT 82
25399: PUSH
25400: LD_INT 83
25402: PUSH
25403: LD_INT 84
25405: PUSH
25406: LD_INT 85
25408: PUSH
25409: LD_INT 86
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 2
25417: PUSH
25418: LD_INT 6
25420: PUSH
25421: LD_INT 15
25423: PUSH
25424: LD_INT 16
25426: PUSH
25427: LD_INT 7
25429: PUSH
25430: LD_INT 12
25432: PUSH
25433: LD_INT 13
25435: PUSH
25436: LD_INT 10
25438: PUSH
25439: LD_INT 14
25441: PUSH
25442: LD_INT 20
25444: PUSH
25445: LD_INT 21
25447: PUSH
25448: LD_INT 22
25450: PUSH
25451: LD_INT 25
25453: PUSH
25454: LD_INT 32
25456: PUSH
25457: LD_INT 27
25459: PUSH
25460: LD_INT 36
25462: PUSH
25463: LD_INT 69
25465: PUSH
25466: LD_INT 39
25468: PUSH
25469: LD_INT 34
25471: PUSH
25472: LD_INT 40
25474: PUSH
25475: LD_INT 48
25477: PUSH
25478: LD_INT 49
25480: PUSH
25481: LD_INT 50
25483: PUSH
25484: LD_INT 51
25486: PUSH
25487: LD_INT 52
25489: PUSH
25490: LD_INT 53
25492: PUSH
25493: LD_INT 54
25495: PUSH
25496: LD_INT 55
25498: PUSH
25499: LD_INT 56
25501: PUSH
25502: LD_INT 57
25504: PUSH
25505: LD_INT 58
25507: PUSH
25508: LD_INT 59
25510: PUSH
25511: LD_INT 60
25513: PUSH
25514: LD_INT 61
25516: PUSH
25517: LD_INT 62
25519: PUSH
25520: LD_INT 80
25522: PUSH
25523: LD_INT 82
25525: PUSH
25526: LD_INT 83
25528: PUSH
25529: LD_INT 84
25531: PUSH
25532: LD_INT 85
25534: PUSH
25535: LD_INT 86
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: ST_TO_ADDR
25591: GO 26058
25593: LD_INT 2
25595: DOUBLE
25596: EQUAL
25597: IFTRUE 25601
25599: GO 25827
25601: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25602: LD_ADDR_VAR 0 4
25606: PUSH
25607: LD_INT 35
25609: PUSH
25610: LD_INT 45
25612: PUSH
25613: LD_INT 46
25615: PUSH
25616: LD_INT 47
25618: PUSH
25619: LD_INT 82
25621: PUSH
25622: LD_INT 83
25624: PUSH
25625: LD_INT 84
25627: PUSH
25628: LD_INT 85
25630: PUSH
25631: LD_INT 87
25633: PUSH
25634: LD_INT 70
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 11
25642: PUSH
25643: LD_INT 3
25645: PUSH
25646: LD_INT 4
25648: PUSH
25649: LD_INT 5
25651: PUSH
25652: LD_INT 6
25654: PUSH
25655: LD_INT 15
25657: PUSH
25658: LD_INT 18
25660: PUSH
25661: LD_INT 7
25663: PUSH
25664: LD_INT 17
25666: PUSH
25667: LD_INT 8
25669: PUSH
25670: LD_INT 20
25672: PUSH
25673: LD_INT 21
25675: PUSH
25676: LD_INT 22
25678: PUSH
25679: LD_INT 72
25681: PUSH
25682: LD_INT 26
25684: PUSH
25685: LD_INT 69
25687: PUSH
25688: LD_INT 39
25690: PUSH
25691: LD_INT 40
25693: PUSH
25694: LD_INT 41
25696: PUSH
25697: LD_INT 42
25699: PUSH
25700: LD_INT 43
25702: PUSH
25703: LD_INT 48
25705: PUSH
25706: LD_INT 49
25708: PUSH
25709: LD_INT 50
25711: PUSH
25712: LD_INT 51
25714: PUSH
25715: LD_INT 52
25717: PUSH
25718: LD_INT 53
25720: PUSH
25721: LD_INT 54
25723: PUSH
25724: LD_INT 55
25726: PUSH
25727: LD_INT 56
25729: PUSH
25730: LD_INT 60
25732: PUSH
25733: LD_INT 61
25735: PUSH
25736: LD_INT 62
25738: PUSH
25739: LD_INT 66
25741: PUSH
25742: LD_INT 67
25744: PUSH
25745: LD_INT 68
25747: PUSH
25748: LD_INT 81
25750: PUSH
25751: LD_INT 82
25753: PUSH
25754: LD_INT 83
25756: PUSH
25757: LD_INT 84
25759: PUSH
25760: LD_INT 85
25762: PUSH
25763: LD_INT 87
25765: PUSH
25766: LD_INT 88
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
25825: GO 26058
25827: LD_INT 3
25829: DOUBLE
25830: EQUAL
25831: IFTRUE 25835
25833: GO 26057
25835: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25836: LD_ADDR_VAR 0 4
25840: PUSH
25841: LD_INT 46
25843: PUSH
25844: LD_INT 47
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 82
25855: PUSH
25856: LD_INT 83
25858: PUSH
25859: LD_INT 84
25861: PUSH
25862: LD_INT 85
25864: PUSH
25865: LD_INT 86
25867: PUSH
25868: LD_INT 11
25870: PUSH
25871: LD_INT 9
25873: PUSH
25874: LD_INT 20
25876: PUSH
25877: LD_INT 19
25879: PUSH
25880: LD_INT 21
25882: PUSH
25883: LD_INT 24
25885: PUSH
25886: LD_INT 22
25888: PUSH
25889: LD_INT 25
25891: PUSH
25892: LD_INT 28
25894: PUSH
25895: LD_INT 29
25897: PUSH
25898: LD_INT 30
25900: PUSH
25901: LD_INT 31
25903: PUSH
25904: LD_INT 37
25906: PUSH
25907: LD_INT 38
25909: PUSH
25910: LD_INT 32
25912: PUSH
25913: LD_INT 27
25915: PUSH
25916: LD_INT 33
25918: PUSH
25919: LD_INT 69
25921: PUSH
25922: LD_INT 39
25924: PUSH
25925: LD_INT 34
25927: PUSH
25928: LD_INT 40
25930: PUSH
25931: LD_INT 71
25933: PUSH
25934: LD_INT 23
25936: PUSH
25937: LD_INT 44
25939: PUSH
25940: LD_INT 48
25942: PUSH
25943: LD_INT 49
25945: PUSH
25946: LD_INT 50
25948: PUSH
25949: LD_INT 51
25951: PUSH
25952: LD_INT 52
25954: PUSH
25955: LD_INT 53
25957: PUSH
25958: LD_INT 54
25960: PUSH
25961: LD_INT 55
25963: PUSH
25964: LD_INT 56
25966: PUSH
25967: LD_INT 57
25969: PUSH
25970: LD_INT 58
25972: PUSH
25973: LD_INT 59
25975: PUSH
25976: LD_INT 63
25978: PUSH
25979: LD_INT 64
25981: PUSH
25982: LD_INT 65
25984: PUSH
25985: LD_INT 82
25987: PUSH
25988: LD_INT 83
25990: PUSH
25991: LD_INT 84
25993: PUSH
25994: LD_INT 85
25996: PUSH
25997: LD_INT 86
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: ST_TO_ADDR
26055: GO 26058
26057: POP
// if state > - 1 and state < 3 then
26058: LD_VAR 0 3
26062: PUSH
26063: LD_INT 1
26065: NEG
26066: GREATER
26067: PUSH
26068: LD_VAR 0 3
26072: PUSH
26073: LD_INT 3
26075: LESS
26076: AND
26077: IFFALSE 26134
// for i in result do
26079: LD_ADDR_VAR 0 5
26083: PUSH
26084: LD_VAR 0 4
26088: PUSH
26089: FOR_IN
26090: IFFALSE 26132
// if GetTech ( i , side ) <> state then
26092: LD_VAR 0 5
26096: PPUSH
26097: LD_VAR 0 1
26101: PPUSH
26102: CALL_OW 321
26106: PUSH
26107: LD_VAR 0 3
26111: NONEQUAL
26112: IFFALSE 26130
// result := result diff i ;
26114: LD_ADDR_VAR 0 4
26118: PUSH
26119: LD_VAR 0 4
26123: PUSH
26124: LD_VAR 0 5
26128: DIFF
26129: ST_TO_ADDR
26130: GO 26089
26132: POP
26133: POP
// end ;
26134: LD_VAR 0 4
26138: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26139: LD_INT 0
26141: PPUSH
26142: PPUSH
26143: PPUSH
// result := true ;
26144: LD_ADDR_VAR 0 3
26148: PUSH
26149: LD_INT 1
26151: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26152: LD_ADDR_VAR 0 5
26156: PUSH
26157: LD_VAR 0 2
26161: PPUSH
26162: CALL_OW 480
26166: ST_TO_ADDR
// if not tmp then
26167: LD_VAR 0 5
26171: NOT
26172: IFFALSE 26176
// exit ;
26174: GO 26225
// for i in tmp do
26176: LD_ADDR_VAR 0 4
26180: PUSH
26181: LD_VAR 0 5
26185: PUSH
26186: FOR_IN
26187: IFFALSE 26223
// if GetTech ( i , side ) <> state_researched then
26189: LD_VAR 0 4
26193: PPUSH
26194: LD_VAR 0 1
26198: PPUSH
26199: CALL_OW 321
26203: PUSH
26204: LD_INT 2
26206: NONEQUAL
26207: IFFALSE 26221
// begin result := false ;
26209: LD_ADDR_VAR 0 3
26213: PUSH
26214: LD_INT 0
26216: ST_TO_ADDR
// exit ;
26217: POP
26218: POP
26219: GO 26225
// end ;
26221: GO 26186
26223: POP
26224: POP
// end ;
26225: LD_VAR 0 3
26229: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26230: LD_INT 0
26232: PPUSH
26233: PPUSH
26234: PPUSH
26235: PPUSH
26236: PPUSH
26237: PPUSH
26238: PPUSH
26239: PPUSH
26240: PPUSH
26241: PPUSH
26242: PPUSH
26243: PPUSH
26244: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26245: LD_VAR 0 1
26249: NOT
26250: PUSH
26251: LD_VAR 0 1
26255: PPUSH
26256: CALL_OW 257
26260: PUSH
26261: LD_INT 9
26263: NONEQUAL
26264: OR
26265: IFFALSE 26269
// exit ;
26267: GO 26842
// side := GetSide ( unit ) ;
26269: LD_ADDR_VAR 0 9
26273: PUSH
26274: LD_VAR 0 1
26278: PPUSH
26279: CALL_OW 255
26283: ST_TO_ADDR
// tech_space := tech_spacanom ;
26284: LD_ADDR_VAR 0 12
26288: PUSH
26289: LD_INT 29
26291: ST_TO_ADDR
// tech_time := tech_taurad ;
26292: LD_ADDR_VAR 0 13
26296: PUSH
26297: LD_INT 28
26299: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26300: LD_ADDR_VAR 0 11
26304: PUSH
26305: LD_VAR 0 1
26309: PPUSH
26310: CALL_OW 310
26314: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26315: LD_VAR 0 11
26319: PPUSH
26320: CALL_OW 247
26324: PUSH
26325: LD_INT 2
26327: EQUAL
26328: IFFALSE 26332
// exit ;
26330: GO 26842
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26332: LD_ADDR_VAR 0 8
26336: PUSH
26337: LD_INT 81
26339: PUSH
26340: LD_VAR 0 9
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 3
26351: PUSH
26352: LD_INT 21
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PPUSH
26370: CALL_OW 69
26374: ST_TO_ADDR
// if not tmp then
26375: LD_VAR 0 8
26379: NOT
26380: IFFALSE 26384
// exit ;
26382: GO 26842
// if in_unit then
26384: LD_VAR 0 11
26388: IFFALSE 26412
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26390: LD_ADDR_VAR 0 10
26394: PUSH
26395: LD_VAR 0 8
26399: PPUSH
26400: LD_VAR 0 11
26404: PPUSH
26405: CALL_OW 74
26409: ST_TO_ADDR
26410: GO 26432
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26412: LD_ADDR_VAR 0 10
26416: PUSH
26417: LD_VAR 0 8
26421: PPUSH
26422: LD_VAR 0 1
26426: PPUSH
26427: CALL_OW 74
26431: ST_TO_ADDR
// if not enemy then
26432: LD_VAR 0 10
26436: NOT
26437: IFFALSE 26441
// exit ;
26439: GO 26842
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26441: LD_VAR 0 11
26445: PUSH
26446: LD_VAR 0 11
26450: PPUSH
26451: LD_VAR 0 10
26455: PPUSH
26456: CALL_OW 296
26460: PUSH
26461: LD_INT 13
26463: GREATER
26464: AND
26465: PUSH
26466: LD_VAR 0 1
26470: PPUSH
26471: LD_VAR 0 10
26475: PPUSH
26476: CALL_OW 296
26480: PUSH
26481: LD_INT 12
26483: GREATER
26484: OR
26485: IFFALSE 26489
// exit ;
26487: GO 26842
// missile := [ 1 ] ;
26489: LD_ADDR_VAR 0 14
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: EMPTY
26498: LIST
26499: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26500: LD_VAR 0 9
26504: PPUSH
26505: LD_VAR 0 12
26509: PPUSH
26510: CALL_OW 325
26514: IFFALSE 26543
// missile := Replace ( missile , missile + 1 , 2 ) ;
26516: LD_ADDR_VAR 0 14
26520: PUSH
26521: LD_VAR 0 14
26525: PPUSH
26526: LD_VAR 0 14
26530: PUSH
26531: LD_INT 1
26533: PLUS
26534: PPUSH
26535: LD_INT 2
26537: PPUSH
26538: CALL_OW 1
26542: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26543: LD_VAR 0 9
26547: PPUSH
26548: LD_VAR 0 13
26552: PPUSH
26553: CALL_OW 325
26557: PUSH
26558: LD_VAR 0 10
26562: PPUSH
26563: CALL_OW 255
26567: PPUSH
26568: LD_VAR 0 13
26572: PPUSH
26573: CALL_OW 325
26577: NOT
26578: AND
26579: IFFALSE 26608
// missile := Replace ( missile , missile + 1 , 3 ) ;
26581: LD_ADDR_VAR 0 14
26585: PUSH
26586: LD_VAR 0 14
26590: PPUSH
26591: LD_VAR 0 14
26595: PUSH
26596: LD_INT 1
26598: PLUS
26599: PPUSH
26600: LD_INT 3
26602: PPUSH
26603: CALL_OW 1
26607: ST_TO_ADDR
// if missile < 2 then
26608: LD_VAR 0 14
26612: PUSH
26613: LD_INT 2
26615: LESS
26616: IFFALSE 26620
// exit ;
26618: GO 26842
// x := GetX ( enemy ) ;
26620: LD_ADDR_VAR 0 4
26624: PUSH
26625: LD_VAR 0 10
26629: PPUSH
26630: CALL_OW 250
26634: ST_TO_ADDR
// y := GetY ( enemy ) ;
26635: LD_ADDR_VAR 0 5
26639: PUSH
26640: LD_VAR 0 10
26644: PPUSH
26645: CALL_OW 251
26649: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26650: LD_ADDR_VAR 0 6
26654: PUSH
26655: LD_VAR 0 4
26659: PUSH
26660: LD_INT 1
26662: NEG
26663: PPUSH
26664: LD_INT 1
26666: PPUSH
26667: CALL_OW 12
26671: PLUS
26672: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26673: LD_ADDR_VAR 0 7
26677: PUSH
26678: LD_VAR 0 5
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PPUSH
26687: LD_INT 1
26689: PPUSH
26690: CALL_OW 12
26694: PLUS
26695: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26696: LD_VAR 0 6
26700: PPUSH
26701: LD_VAR 0 7
26705: PPUSH
26706: CALL_OW 488
26710: NOT
26711: IFFALSE 26733
// begin _x := x ;
26713: LD_ADDR_VAR 0 6
26717: PUSH
26718: LD_VAR 0 4
26722: ST_TO_ADDR
// _y := y ;
26723: LD_ADDR_VAR 0 7
26727: PUSH
26728: LD_VAR 0 5
26732: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26733: LD_ADDR_VAR 0 3
26737: PUSH
26738: LD_INT 1
26740: PPUSH
26741: LD_VAR 0 14
26745: PPUSH
26746: CALL_OW 12
26750: ST_TO_ADDR
// case i of 1 :
26751: LD_VAR 0 3
26755: PUSH
26756: LD_INT 1
26758: DOUBLE
26759: EQUAL
26760: IFTRUE 26764
26762: GO 26781
26764: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26765: LD_VAR 0 1
26769: PPUSH
26770: LD_VAR 0 10
26774: PPUSH
26775: CALL_OW 115
26779: GO 26842
26781: LD_INT 2
26783: DOUBLE
26784: EQUAL
26785: IFTRUE 26789
26787: GO 26811
26789: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26790: LD_VAR 0 1
26794: PPUSH
26795: LD_VAR 0 6
26799: PPUSH
26800: LD_VAR 0 7
26804: PPUSH
26805: CALL_OW 153
26809: GO 26842
26811: LD_INT 3
26813: DOUBLE
26814: EQUAL
26815: IFTRUE 26819
26817: GO 26841
26819: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26820: LD_VAR 0 1
26824: PPUSH
26825: LD_VAR 0 6
26829: PPUSH
26830: LD_VAR 0 7
26834: PPUSH
26835: CALL_OW 154
26839: GO 26842
26841: POP
// end ;
26842: LD_VAR 0 2
26846: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26847: LD_INT 0
26849: PPUSH
26850: PPUSH
26851: PPUSH
26852: PPUSH
26853: PPUSH
26854: PPUSH
// if not unit or not building then
26855: LD_VAR 0 1
26859: NOT
26860: PUSH
26861: LD_VAR 0 2
26865: NOT
26866: OR
26867: IFFALSE 26871
// exit ;
26869: GO 27029
// x := GetX ( building ) ;
26871: LD_ADDR_VAR 0 5
26875: PUSH
26876: LD_VAR 0 2
26880: PPUSH
26881: CALL_OW 250
26885: ST_TO_ADDR
// y := GetY ( building ) ;
26886: LD_ADDR_VAR 0 6
26890: PUSH
26891: LD_VAR 0 2
26895: PPUSH
26896: CALL_OW 251
26900: ST_TO_ADDR
// for i = 0 to 5 do
26901: LD_ADDR_VAR 0 4
26905: PUSH
26906: DOUBLE
26907: LD_INT 0
26909: DEC
26910: ST_TO_ADDR
26911: LD_INT 5
26913: PUSH
26914: FOR_TO
26915: IFFALSE 27027
// begin _x := ShiftX ( x , i , 3 ) ;
26917: LD_ADDR_VAR 0 7
26921: PUSH
26922: LD_VAR 0 5
26926: PPUSH
26927: LD_VAR 0 4
26931: PPUSH
26932: LD_INT 3
26934: PPUSH
26935: CALL_OW 272
26939: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26940: LD_ADDR_VAR 0 8
26944: PUSH
26945: LD_VAR 0 6
26949: PPUSH
26950: LD_VAR 0 4
26954: PPUSH
26955: LD_INT 3
26957: PPUSH
26958: CALL_OW 273
26962: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26963: LD_VAR 0 7
26967: PPUSH
26968: LD_VAR 0 8
26972: PPUSH
26973: CALL_OW 488
26977: NOT
26978: IFFALSE 26982
// continue ;
26980: GO 26914
// if HexInfo ( _x , _y ) = 0 then
26982: LD_VAR 0 7
26986: PPUSH
26987: LD_VAR 0 8
26991: PPUSH
26992: CALL_OW 428
26996: PUSH
26997: LD_INT 0
26999: EQUAL
27000: IFFALSE 27025
// begin ComMoveXY ( unit , _x , _y ) ;
27002: LD_VAR 0 1
27006: PPUSH
27007: LD_VAR 0 7
27011: PPUSH
27012: LD_VAR 0 8
27016: PPUSH
27017: CALL_OW 111
// exit ;
27021: POP
27022: POP
27023: GO 27029
// end ; end ;
27025: GO 26914
27027: POP
27028: POP
// end ;
27029: LD_VAR 0 3
27033: RET
// export function ScanBase ( side , base_area ) ; begin
27034: LD_INT 0
27036: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27037: LD_ADDR_VAR 0 3
27041: PUSH
27042: LD_VAR 0 2
27046: PPUSH
27047: LD_INT 81
27049: PUSH
27050: LD_VAR 0 1
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PPUSH
27059: CALL_OW 70
27063: ST_TO_ADDR
// end ;
27064: LD_VAR 0 3
27068: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27069: LD_INT 0
27071: PPUSH
27072: PPUSH
27073: PPUSH
27074: PPUSH
// result := false ;
27075: LD_ADDR_VAR 0 2
27079: PUSH
27080: LD_INT 0
27082: ST_TO_ADDR
// side := GetSide ( unit ) ;
27083: LD_ADDR_VAR 0 3
27087: PUSH
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL_OW 255
27097: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27098: LD_ADDR_VAR 0 4
27102: PUSH
27103: LD_VAR 0 1
27107: PPUSH
27108: CALL_OW 248
27112: ST_TO_ADDR
// case nat of 1 :
27113: LD_VAR 0 4
27117: PUSH
27118: LD_INT 1
27120: DOUBLE
27121: EQUAL
27122: IFTRUE 27126
27124: GO 27137
27126: POP
// tech := tech_lassight ; 2 :
27127: LD_ADDR_VAR 0 5
27131: PUSH
27132: LD_INT 12
27134: ST_TO_ADDR
27135: GO 27176
27137: LD_INT 2
27139: DOUBLE
27140: EQUAL
27141: IFTRUE 27145
27143: GO 27156
27145: POP
// tech := tech_mortar ; 3 :
27146: LD_ADDR_VAR 0 5
27150: PUSH
27151: LD_INT 41
27153: ST_TO_ADDR
27154: GO 27176
27156: LD_INT 3
27158: DOUBLE
27159: EQUAL
27160: IFTRUE 27164
27162: GO 27175
27164: POP
// tech := tech_bazooka ; end ;
27165: LD_ADDR_VAR 0 5
27169: PUSH
27170: LD_INT 44
27172: ST_TO_ADDR
27173: GO 27176
27175: POP
// if Researched ( side , tech ) then
27176: LD_VAR 0 3
27180: PPUSH
27181: LD_VAR 0 5
27185: PPUSH
27186: CALL_OW 325
27190: IFFALSE 27217
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27192: LD_ADDR_VAR 0 2
27196: PUSH
27197: LD_INT 5
27199: PUSH
27200: LD_INT 8
27202: PUSH
27203: LD_INT 9
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: PUSH
27211: LD_VAR 0 4
27215: ARRAY
27216: ST_TO_ADDR
// end ;
27217: LD_VAR 0 2
27221: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27222: LD_INT 0
27224: PPUSH
27225: PPUSH
27226: PPUSH
// if not mines then
27227: LD_VAR 0 2
27231: NOT
27232: IFFALSE 27236
// exit ;
27234: GO 27380
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27236: LD_ADDR_VAR 0 5
27240: PUSH
27241: LD_INT 81
27243: PUSH
27244: LD_VAR 0 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 3
27255: PUSH
27256: LD_INT 21
27258: PUSH
27259: LD_INT 3
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PPUSH
27274: CALL_OW 69
27278: ST_TO_ADDR
// for i in mines do
27279: LD_ADDR_VAR 0 4
27283: PUSH
27284: LD_VAR 0 2
27288: PUSH
27289: FOR_IN
27290: IFFALSE 27378
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27292: LD_VAR 0 4
27296: PUSH
27297: LD_INT 1
27299: ARRAY
27300: PPUSH
27301: LD_VAR 0 4
27305: PUSH
27306: LD_INT 2
27308: ARRAY
27309: PPUSH
27310: CALL_OW 458
27314: NOT
27315: IFFALSE 27319
// continue ;
27317: GO 27289
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27319: LD_VAR 0 4
27323: PUSH
27324: LD_INT 1
27326: ARRAY
27327: PPUSH
27328: LD_VAR 0 4
27332: PUSH
27333: LD_INT 2
27335: ARRAY
27336: PPUSH
27337: CALL_OW 428
27341: PUSH
27342: LD_VAR 0 5
27346: IN
27347: IFFALSE 27376
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27349: LD_VAR 0 4
27353: PUSH
27354: LD_INT 1
27356: ARRAY
27357: PPUSH
27358: LD_VAR 0 4
27362: PUSH
27363: LD_INT 2
27365: ARRAY
27366: PPUSH
27367: LD_VAR 0 1
27371: PPUSH
27372: CALL_OW 456
// end ;
27376: GO 27289
27378: POP
27379: POP
// end ;
27380: LD_VAR 0 3
27384: RET
// export function Count ( array ) ; var i ; begin
27385: LD_INT 0
27387: PPUSH
27388: PPUSH
// result := 0 ;
27389: LD_ADDR_VAR 0 2
27393: PUSH
27394: LD_INT 0
27396: ST_TO_ADDR
// for i in array do
27397: LD_ADDR_VAR 0 3
27401: PUSH
27402: LD_VAR 0 1
27406: PUSH
27407: FOR_IN
27408: IFFALSE 27432
// if i then
27410: LD_VAR 0 3
27414: IFFALSE 27430
// result := result + 1 ;
27416: LD_ADDR_VAR 0 2
27420: PUSH
27421: LD_VAR 0 2
27425: PUSH
27426: LD_INT 1
27428: PLUS
27429: ST_TO_ADDR
27430: GO 27407
27432: POP
27433: POP
// end ;
27434: LD_VAR 0 2
27438: RET
// export function IsEmpty ( building ) ; begin
27439: LD_INT 0
27441: PPUSH
// if not building then
27442: LD_VAR 0 1
27446: NOT
27447: IFFALSE 27451
// exit ;
27449: GO 27494
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27451: LD_ADDR_VAR 0 2
27455: PUSH
27456: LD_VAR 0 1
27460: PUSH
27461: LD_INT 22
27463: PUSH
27464: LD_VAR 0 1
27468: PPUSH
27469: CALL_OW 255
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 58
27480: PUSH
27481: EMPTY
27482: LIST
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PPUSH
27488: CALL_OW 69
27492: IN
27493: ST_TO_ADDR
// end ;
27494: LD_VAR 0 2
27498: RET
// export function IsNotFull ( building ) ; var places ; begin
27499: LD_INT 0
27501: PPUSH
27502: PPUSH
// if not building then
27503: LD_VAR 0 1
27507: NOT
27508: IFFALSE 27512
// exit ;
27510: GO 27683
// result := false ;
27512: LD_ADDR_VAR 0 2
27516: PUSH
27517: LD_INT 0
27519: ST_TO_ADDR
// places := 0 ;
27520: LD_ADDR_VAR 0 3
27524: PUSH
27525: LD_INT 0
27527: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27528: LD_VAR 0 1
27532: PPUSH
27533: CALL_OW 266
27537: PUSH
27538: LD_INT 0
27540: DOUBLE
27541: EQUAL
27542: IFTRUE 27600
27544: LD_INT 1
27546: DOUBLE
27547: EQUAL
27548: IFTRUE 27600
27550: LD_INT 6
27552: DOUBLE
27553: EQUAL
27554: IFTRUE 27600
27556: LD_INT 7
27558: DOUBLE
27559: EQUAL
27560: IFTRUE 27600
27562: LD_INT 8
27564: DOUBLE
27565: EQUAL
27566: IFTRUE 27600
27568: LD_INT 4
27570: DOUBLE
27571: EQUAL
27572: IFTRUE 27600
27574: LD_INT 5
27576: DOUBLE
27577: EQUAL
27578: IFTRUE 27600
27580: LD_INT 2
27582: DOUBLE
27583: EQUAL
27584: IFTRUE 27600
27586: LD_INT 3
27588: DOUBLE
27589: EQUAL
27590: IFTRUE 27600
27592: LD_INT 35
27594: DOUBLE
27595: EQUAL
27596: IFTRUE 27600
27598: GO 27611
27600: POP
// places := 6 ; b_bunker , b_breastwork :
27601: LD_ADDR_VAR 0 3
27605: PUSH
27606: LD_INT 6
27608: ST_TO_ADDR
27609: GO 27656
27611: LD_INT 32
27613: DOUBLE
27614: EQUAL
27615: IFTRUE 27625
27617: LD_INT 31
27619: DOUBLE
27620: EQUAL
27621: IFTRUE 27625
27623: GO 27636
27625: POP
// places := 1 ; b_control_tower :
27626: LD_ADDR_VAR 0 3
27630: PUSH
27631: LD_INT 1
27633: ST_TO_ADDR
27634: GO 27656
27636: LD_INT 36
27638: DOUBLE
27639: EQUAL
27640: IFTRUE 27644
27642: GO 27655
27644: POP
// places := 3 ; end ;
27645: LD_ADDR_VAR 0 3
27649: PUSH
27650: LD_INT 3
27652: ST_TO_ADDR
27653: GO 27656
27655: POP
// if places then
27656: LD_VAR 0 3
27660: IFFALSE 27683
// result := UnitsInside ( building ) < places ;
27662: LD_ADDR_VAR 0 2
27666: PUSH
27667: LD_VAR 0 1
27671: PPUSH
27672: CALL_OW 313
27676: PUSH
27677: LD_VAR 0 3
27681: LESS
27682: ST_TO_ADDR
// end ;
27683: LD_VAR 0 2
27687: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27688: LD_INT 0
27690: PPUSH
27691: PPUSH
27692: PPUSH
27693: PPUSH
// tmp := [ ] ;
27694: LD_ADDR_VAR 0 3
27698: PUSH
27699: EMPTY
27700: ST_TO_ADDR
// list := [ ] ;
27701: LD_ADDR_VAR 0 5
27705: PUSH
27706: EMPTY
27707: ST_TO_ADDR
// for i = 16 to 25 do
27708: LD_ADDR_VAR 0 4
27712: PUSH
27713: DOUBLE
27714: LD_INT 16
27716: DEC
27717: ST_TO_ADDR
27718: LD_INT 25
27720: PUSH
27721: FOR_TO
27722: IFFALSE 27795
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27724: LD_ADDR_VAR 0 3
27728: PUSH
27729: LD_VAR 0 3
27733: PUSH
27734: LD_INT 22
27736: PUSH
27737: LD_VAR 0 1
27741: PPUSH
27742: CALL_OW 255
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 91
27753: PUSH
27754: LD_VAR 0 1
27758: PUSH
27759: LD_INT 6
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 30
27769: PUSH
27770: LD_VAR 0 4
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: LIST
27783: PUSH
27784: EMPTY
27785: LIST
27786: PPUSH
27787: CALL_OW 69
27791: ADD
27792: ST_TO_ADDR
27793: GO 27721
27795: POP
27796: POP
// for i = 1 to tmp do
27797: LD_ADDR_VAR 0 4
27801: PUSH
27802: DOUBLE
27803: LD_INT 1
27805: DEC
27806: ST_TO_ADDR
27807: LD_VAR 0 3
27811: PUSH
27812: FOR_TO
27813: IFFALSE 27901
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27815: LD_ADDR_VAR 0 5
27819: PUSH
27820: LD_VAR 0 5
27824: PUSH
27825: LD_VAR 0 3
27829: PUSH
27830: LD_VAR 0 4
27834: ARRAY
27835: PPUSH
27836: CALL_OW 266
27840: PUSH
27841: LD_VAR 0 3
27845: PUSH
27846: LD_VAR 0 4
27850: ARRAY
27851: PPUSH
27852: CALL_OW 250
27856: PUSH
27857: LD_VAR 0 3
27861: PUSH
27862: LD_VAR 0 4
27866: ARRAY
27867: PPUSH
27868: CALL_OW 251
27872: PUSH
27873: LD_VAR 0 3
27877: PUSH
27878: LD_VAR 0 4
27882: ARRAY
27883: PPUSH
27884: CALL_OW 254
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: ADD
27898: ST_TO_ADDR
27899: GO 27812
27901: POP
27902: POP
// result := list ;
27903: LD_ADDR_VAR 0 2
27907: PUSH
27908: LD_VAR 0 5
27912: ST_TO_ADDR
// end ;
27913: LD_VAR 0 2
27917: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27918: LD_INT 0
27920: PPUSH
27921: PPUSH
27922: PPUSH
27923: PPUSH
27924: PPUSH
27925: PPUSH
27926: PPUSH
// if not factory then
27927: LD_VAR 0 1
27931: NOT
27932: IFFALSE 27936
// exit ;
27934: GO 28529
// if control = control_apeman then
27936: LD_VAR 0 4
27940: PUSH
27941: LD_INT 5
27943: EQUAL
27944: IFFALSE 28053
// begin tmp := UnitsInside ( factory ) ;
27946: LD_ADDR_VAR 0 8
27950: PUSH
27951: LD_VAR 0 1
27955: PPUSH
27956: CALL_OW 313
27960: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27961: LD_VAR 0 8
27965: PPUSH
27966: LD_INT 25
27968: PUSH
27969: LD_INT 12
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PPUSH
27976: CALL_OW 72
27980: NOT
27981: IFFALSE 27991
// control := control_manual ;
27983: LD_ADDR_VAR 0 4
27987: PUSH
27988: LD_INT 1
27990: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27991: LD_ADDR_VAR 0 8
27995: PUSH
27996: LD_VAR 0 1
28000: PPUSH
28001: CALL 27688 0 1
28005: ST_TO_ADDR
// if tmp then
28006: LD_VAR 0 8
28010: IFFALSE 28053
// begin for i in tmp do
28012: LD_ADDR_VAR 0 7
28016: PUSH
28017: LD_VAR 0 8
28021: PUSH
28022: FOR_IN
28023: IFFALSE 28051
// if i [ 1 ] = b_ext_radio then
28025: LD_VAR 0 7
28029: PUSH
28030: LD_INT 1
28032: ARRAY
28033: PUSH
28034: LD_INT 22
28036: EQUAL
28037: IFFALSE 28049
// begin control := control_remote ;
28039: LD_ADDR_VAR 0 4
28043: PUSH
28044: LD_INT 2
28046: ST_TO_ADDR
// break ;
28047: GO 28051
// end ;
28049: GO 28022
28051: POP
28052: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28053: LD_VAR 0 1
28057: PPUSH
28058: LD_VAR 0 2
28062: PPUSH
28063: LD_VAR 0 3
28067: PPUSH
28068: LD_VAR 0 4
28072: PPUSH
28073: LD_VAR 0 5
28077: PPUSH
28078: CALL_OW 448
28082: IFFALSE 28117
// begin result := [ chassis , engine , control , weapon ] ;
28084: LD_ADDR_VAR 0 6
28088: PUSH
28089: LD_VAR 0 2
28093: PUSH
28094: LD_VAR 0 3
28098: PUSH
28099: LD_VAR 0 4
28103: PUSH
28104: LD_VAR 0 5
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: ST_TO_ADDR
// exit ;
28115: GO 28529
// end ; _chassis := AvailableChassisList ( factory ) ;
28117: LD_ADDR_VAR 0 9
28121: PUSH
28122: LD_VAR 0 1
28126: PPUSH
28127: CALL_OW 475
28131: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28132: LD_ADDR_VAR 0 11
28136: PUSH
28137: LD_VAR 0 1
28141: PPUSH
28142: CALL_OW 476
28146: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28147: LD_ADDR_VAR 0 12
28151: PUSH
28152: LD_VAR 0 1
28156: PPUSH
28157: CALL_OW 477
28161: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28162: LD_ADDR_VAR 0 10
28166: PUSH
28167: LD_VAR 0 1
28171: PPUSH
28172: CALL_OW 478
28176: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28177: LD_VAR 0 9
28181: NOT
28182: PUSH
28183: LD_VAR 0 11
28187: NOT
28188: OR
28189: PUSH
28190: LD_VAR 0 12
28194: NOT
28195: OR
28196: PUSH
28197: LD_VAR 0 10
28201: NOT
28202: OR
28203: IFFALSE 28238
// begin result := [ chassis , engine , control , weapon ] ;
28205: LD_ADDR_VAR 0 6
28209: PUSH
28210: LD_VAR 0 2
28214: PUSH
28215: LD_VAR 0 3
28219: PUSH
28220: LD_VAR 0 4
28224: PUSH
28225: LD_VAR 0 5
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: ST_TO_ADDR
// exit ;
28236: GO 28529
// end ; if not chassis in _chassis then
28238: LD_VAR 0 2
28242: PUSH
28243: LD_VAR 0 9
28247: IN
28248: NOT
28249: IFFALSE 28275
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28251: LD_ADDR_VAR 0 2
28255: PUSH
28256: LD_VAR 0 9
28260: PUSH
28261: LD_INT 1
28263: PPUSH
28264: LD_VAR 0 9
28268: PPUSH
28269: CALL_OW 12
28273: ARRAY
28274: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28275: LD_VAR 0 2
28279: PPUSH
28280: LD_VAR 0 3
28284: PPUSH
28285: CALL 28534 0 2
28289: NOT
28290: IFFALSE 28349
// repeat engine := _engine [ 1 ] ;
28292: LD_ADDR_VAR 0 3
28296: PUSH
28297: LD_VAR 0 11
28301: PUSH
28302: LD_INT 1
28304: ARRAY
28305: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28306: LD_ADDR_VAR 0 11
28310: PUSH
28311: LD_VAR 0 11
28315: PPUSH
28316: LD_INT 1
28318: PPUSH
28319: CALL_OW 3
28323: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28324: LD_VAR 0 2
28328: PPUSH
28329: LD_VAR 0 3
28333: PPUSH
28334: CALL 28534 0 2
28338: PUSH
28339: LD_VAR 0 11
28343: PUSH
28344: EMPTY
28345: EQUAL
28346: OR
28347: IFFALSE 28292
// if not control in _control then
28349: LD_VAR 0 4
28353: PUSH
28354: LD_VAR 0 12
28358: IN
28359: NOT
28360: IFFALSE 28386
// control := _control [ rand ( 1 , _control ) ] ;
28362: LD_ADDR_VAR 0 4
28366: PUSH
28367: LD_VAR 0 12
28371: PUSH
28372: LD_INT 1
28374: PPUSH
28375: LD_VAR 0 12
28379: PPUSH
28380: CALL_OW 12
28384: ARRAY
28385: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28386: LD_VAR 0 2
28390: PPUSH
28391: LD_VAR 0 5
28395: PPUSH
28396: CALL 28754 0 2
28400: NOT
28401: IFFALSE 28460
// repeat weapon := _weapon [ 1 ] ;
28403: LD_ADDR_VAR 0 5
28407: PUSH
28408: LD_VAR 0 10
28412: PUSH
28413: LD_INT 1
28415: ARRAY
28416: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28417: LD_ADDR_VAR 0 10
28421: PUSH
28422: LD_VAR 0 10
28426: PPUSH
28427: LD_INT 1
28429: PPUSH
28430: CALL_OW 3
28434: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28435: LD_VAR 0 2
28439: PPUSH
28440: LD_VAR 0 5
28444: PPUSH
28445: CALL 28754 0 2
28449: PUSH
28450: LD_VAR 0 10
28454: PUSH
28455: EMPTY
28456: EQUAL
28457: OR
28458: IFFALSE 28403
// result := [ ] ;
28460: LD_ADDR_VAR 0 6
28464: PUSH
28465: EMPTY
28466: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28467: LD_VAR 0 1
28471: PPUSH
28472: LD_VAR 0 2
28476: PPUSH
28477: LD_VAR 0 3
28481: PPUSH
28482: LD_VAR 0 4
28486: PPUSH
28487: LD_VAR 0 5
28491: PPUSH
28492: CALL_OW 448
28496: IFFALSE 28529
// result := [ chassis , engine , control , weapon ] ;
28498: LD_ADDR_VAR 0 6
28502: PUSH
28503: LD_VAR 0 2
28507: PUSH
28508: LD_VAR 0 3
28512: PUSH
28513: LD_VAR 0 4
28517: PUSH
28518: LD_VAR 0 5
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: ST_TO_ADDR
// end ;
28529: LD_VAR 0 6
28533: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28534: LD_INT 0
28536: PPUSH
// if not chassis or not engine then
28537: LD_VAR 0 1
28541: NOT
28542: PUSH
28543: LD_VAR 0 2
28547: NOT
28548: OR
28549: IFFALSE 28553
// exit ;
28551: GO 28749
// case engine of engine_solar :
28553: LD_VAR 0 2
28557: PUSH
28558: LD_INT 2
28560: DOUBLE
28561: EQUAL
28562: IFTRUE 28566
28564: GO 28604
28566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28567: LD_ADDR_VAR 0 3
28571: PUSH
28572: LD_INT 11
28574: PUSH
28575: LD_INT 12
28577: PUSH
28578: LD_INT 13
28580: PUSH
28581: LD_INT 14
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: LD_INT 3
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: ST_TO_ADDR
28602: GO 28733
28604: LD_INT 1
28606: DOUBLE
28607: EQUAL
28608: IFTRUE 28612
28610: GO 28674
28612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28613: LD_ADDR_VAR 0 3
28617: PUSH
28618: LD_INT 11
28620: PUSH
28621: LD_INT 12
28623: PUSH
28624: LD_INT 13
28626: PUSH
28627: LD_INT 14
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: LD_INT 2
28635: PUSH
28636: LD_INT 3
28638: PUSH
28639: LD_INT 4
28641: PUSH
28642: LD_INT 5
28644: PUSH
28645: LD_INT 21
28647: PUSH
28648: LD_INT 23
28650: PUSH
28651: LD_INT 22
28653: PUSH
28654: LD_INT 24
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: ST_TO_ADDR
28672: GO 28733
28674: LD_INT 3
28676: DOUBLE
28677: EQUAL
28678: IFTRUE 28682
28680: GO 28732
28682: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28683: LD_ADDR_VAR 0 3
28687: PUSH
28688: LD_INT 13
28690: PUSH
28691: LD_INT 14
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: LD_INT 3
28699: PUSH
28700: LD_INT 4
28702: PUSH
28703: LD_INT 5
28705: PUSH
28706: LD_INT 21
28708: PUSH
28709: LD_INT 22
28711: PUSH
28712: LD_INT 23
28714: PUSH
28715: LD_INT 24
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: ST_TO_ADDR
28730: GO 28733
28732: POP
// result := ( chassis in result ) ;
28733: LD_ADDR_VAR 0 3
28737: PUSH
28738: LD_VAR 0 1
28742: PUSH
28743: LD_VAR 0 3
28747: IN
28748: ST_TO_ADDR
// end ;
28749: LD_VAR 0 3
28753: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28754: LD_INT 0
28756: PPUSH
// if not chassis or not weapon then
28757: LD_VAR 0 1
28761: NOT
28762: PUSH
28763: LD_VAR 0 2
28767: NOT
28768: OR
28769: IFFALSE 28773
// exit ;
28771: GO 29833
// case weapon of us_machine_gun :
28773: LD_VAR 0 2
28777: PUSH
28778: LD_INT 2
28780: DOUBLE
28781: EQUAL
28782: IFTRUE 28786
28784: GO 28816
28786: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28787: LD_ADDR_VAR 0 3
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: LD_INT 3
28800: PUSH
28801: LD_INT 4
28803: PUSH
28804: LD_INT 5
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: ST_TO_ADDR
28814: GO 29817
28816: LD_INT 3
28818: DOUBLE
28819: EQUAL
28820: IFTRUE 28824
28822: GO 28854
28824: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28825: LD_ADDR_VAR 0 3
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: LD_INT 3
28838: PUSH
28839: LD_INT 4
28841: PUSH
28842: LD_INT 5
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: ST_TO_ADDR
28852: GO 29817
28854: LD_INT 11
28856: DOUBLE
28857: EQUAL
28858: IFTRUE 28862
28860: GO 28892
28862: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28863: LD_ADDR_VAR 0 3
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: LD_INT 3
28876: PUSH
28877: LD_INT 4
28879: PUSH
28880: LD_INT 5
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
28890: GO 29817
28892: LD_INT 4
28894: DOUBLE
28895: EQUAL
28896: IFTRUE 28900
28898: GO 28926
28900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28901: LD_ADDR_VAR 0 3
28905: PUSH
28906: LD_INT 2
28908: PUSH
28909: LD_INT 3
28911: PUSH
28912: LD_INT 4
28914: PUSH
28915: LD_INT 5
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: ST_TO_ADDR
28924: GO 29817
28926: LD_INT 5
28928: DOUBLE
28929: EQUAL
28930: IFTRUE 28934
28932: GO 28960
28934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28935: LD_ADDR_VAR 0 3
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: LD_INT 3
28945: PUSH
28946: LD_INT 4
28948: PUSH
28949: LD_INT 5
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: ST_TO_ADDR
28958: GO 29817
28960: LD_INT 9
28962: DOUBLE
28963: EQUAL
28964: IFTRUE 28968
28966: GO 28994
28968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28969: LD_ADDR_VAR 0 3
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: LD_INT 4
28982: PUSH
28983: LD_INT 5
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: ST_TO_ADDR
28992: GO 29817
28994: LD_INT 7
28996: DOUBLE
28997: EQUAL
28998: IFTRUE 29002
29000: GO 29028
29002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29003: LD_ADDR_VAR 0 3
29007: PUSH
29008: LD_INT 2
29010: PUSH
29011: LD_INT 3
29013: PUSH
29014: LD_INT 4
29016: PUSH
29017: LD_INT 5
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: ST_TO_ADDR
29026: GO 29817
29028: LD_INT 12
29030: DOUBLE
29031: EQUAL
29032: IFTRUE 29036
29034: GO 29062
29036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29037: LD_ADDR_VAR 0 3
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: LD_INT 3
29047: PUSH
29048: LD_INT 4
29050: PUSH
29051: LD_INT 5
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: ST_TO_ADDR
29060: GO 29817
29062: LD_INT 13
29064: DOUBLE
29065: EQUAL
29066: IFTRUE 29070
29068: GO 29096
29070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29071: LD_ADDR_VAR 0 3
29075: PUSH
29076: LD_INT 2
29078: PUSH
29079: LD_INT 3
29081: PUSH
29082: LD_INT 4
29084: PUSH
29085: LD_INT 5
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: ST_TO_ADDR
29094: GO 29817
29096: LD_INT 14
29098: DOUBLE
29099: EQUAL
29100: IFTRUE 29104
29102: GO 29122
29104: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29105: LD_ADDR_VAR 0 3
29109: PUSH
29110: LD_INT 4
29112: PUSH
29113: LD_INT 5
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: ST_TO_ADDR
29120: GO 29817
29122: LD_INT 6
29124: DOUBLE
29125: EQUAL
29126: IFTRUE 29130
29128: GO 29148
29130: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29131: LD_ADDR_VAR 0 3
29135: PUSH
29136: LD_INT 4
29138: PUSH
29139: LD_INT 5
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: ST_TO_ADDR
29146: GO 29817
29148: LD_INT 10
29150: DOUBLE
29151: EQUAL
29152: IFTRUE 29156
29154: GO 29174
29156: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29157: LD_ADDR_VAR 0 3
29161: PUSH
29162: LD_INT 4
29164: PUSH
29165: LD_INT 5
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: ST_TO_ADDR
29172: GO 29817
29174: LD_INT 22
29176: DOUBLE
29177: EQUAL
29178: IFTRUE 29182
29180: GO 29208
29182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29183: LD_ADDR_VAR 0 3
29187: PUSH
29188: LD_INT 11
29190: PUSH
29191: LD_INT 12
29193: PUSH
29194: LD_INT 13
29196: PUSH
29197: LD_INT 14
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: ST_TO_ADDR
29206: GO 29817
29208: LD_INT 23
29210: DOUBLE
29211: EQUAL
29212: IFTRUE 29216
29214: GO 29242
29216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29217: LD_ADDR_VAR 0 3
29221: PUSH
29222: LD_INT 11
29224: PUSH
29225: LD_INT 12
29227: PUSH
29228: LD_INT 13
29230: PUSH
29231: LD_INT 14
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: ST_TO_ADDR
29240: GO 29817
29242: LD_INT 24
29244: DOUBLE
29245: EQUAL
29246: IFTRUE 29250
29248: GO 29276
29250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29251: LD_ADDR_VAR 0 3
29255: PUSH
29256: LD_INT 11
29258: PUSH
29259: LD_INT 12
29261: PUSH
29262: LD_INT 13
29264: PUSH
29265: LD_INT 14
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: ST_TO_ADDR
29274: GO 29817
29276: LD_INT 30
29278: DOUBLE
29279: EQUAL
29280: IFTRUE 29284
29282: GO 29310
29284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29285: LD_ADDR_VAR 0 3
29289: PUSH
29290: LD_INT 11
29292: PUSH
29293: LD_INT 12
29295: PUSH
29296: LD_INT 13
29298: PUSH
29299: LD_INT 14
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: ST_TO_ADDR
29308: GO 29817
29310: LD_INT 25
29312: DOUBLE
29313: EQUAL
29314: IFTRUE 29318
29316: GO 29336
29318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29319: LD_ADDR_VAR 0 3
29323: PUSH
29324: LD_INT 13
29326: PUSH
29327: LD_INT 14
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: ST_TO_ADDR
29334: GO 29817
29336: LD_INT 27
29338: DOUBLE
29339: EQUAL
29340: IFTRUE 29344
29342: GO 29362
29344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: LD_INT 13
29352: PUSH
29353: LD_INT 14
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: ST_TO_ADDR
29360: GO 29817
29362: LD_INT 92
29364: DOUBLE
29365: EQUAL
29366: IFTRUE 29370
29368: GO 29396
29370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29371: LD_ADDR_VAR 0 3
29375: PUSH
29376: LD_INT 11
29378: PUSH
29379: LD_INT 12
29381: PUSH
29382: LD_INT 13
29384: PUSH
29385: LD_INT 14
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
29394: GO 29817
29396: LD_INT 28
29398: DOUBLE
29399: EQUAL
29400: IFTRUE 29404
29402: GO 29422
29404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29405: LD_ADDR_VAR 0 3
29409: PUSH
29410: LD_INT 13
29412: PUSH
29413: LD_INT 14
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: ST_TO_ADDR
29420: GO 29817
29422: LD_INT 29
29424: DOUBLE
29425: EQUAL
29426: IFTRUE 29430
29428: GO 29448
29430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29431: LD_ADDR_VAR 0 3
29435: PUSH
29436: LD_INT 13
29438: PUSH
29439: LD_INT 14
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: ST_TO_ADDR
29446: GO 29817
29448: LD_INT 31
29450: DOUBLE
29451: EQUAL
29452: IFTRUE 29456
29454: GO 29474
29456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29457: LD_ADDR_VAR 0 3
29461: PUSH
29462: LD_INT 13
29464: PUSH
29465: LD_INT 14
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: ST_TO_ADDR
29472: GO 29817
29474: LD_INT 26
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29500
29482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29483: LD_ADDR_VAR 0 3
29487: PUSH
29488: LD_INT 13
29490: PUSH
29491: LD_INT 14
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: ST_TO_ADDR
29498: GO 29817
29500: LD_INT 42
29502: DOUBLE
29503: EQUAL
29504: IFTRUE 29508
29506: GO 29534
29508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29509: LD_ADDR_VAR 0 3
29513: PUSH
29514: LD_INT 21
29516: PUSH
29517: LD_INT 22
29519: PUSH
29520: LD_INT 23
29522: PUSH
29523: LD_INT 24
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: ST_TO_ADDR
29532: GO 29817
29534: LD_INT 43
29536: DOUBLE
29537: EQUAL
29538: IFTRUE 29542
29540: GO 29568
29542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29543: LD_ADDR_VAR 0 3
29547: PUSH
29548: LD_INT 21
29550: PUSH
29551: LD_INT 22
29553: PUSH
29554: LD_INT 23
29556: PUSH
29557: LD_INT 24
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
29566: GO 29817
29568: LD_INT 44
29570: DOUBLE
29571: EQUAL
29572: IFTRUE 29576
29574: GO 29602
29576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29577: LD_ADDR_VAR 0 3
29581: PUSH
29582: LD_INT 21
29584: PUSH
29585: LD_INT 22
29587: PUSH
29588: LD_INT 23
29590: PUSH
29591: LD_INT 24
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: ST_TO_ADDR
29600: GO 29817
29602: LD_INT 45
29604: DOUBLE
29605: EQUAL
29606: IFTRUE 29610
29608: GO 29636
29610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29611: LD_ADDR_VAR 0 3
29615: PUSH
29616: LD_INT 21
29618: PUSH
29619: LD_INT 22
29621: PUSH
29622: LD_INT 23
29624: PUSH
29625: LD_INT 24
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: ST_TO_ADDR
29634: GO 29817
29636: LD_INT 49
29638: DOUBLE
29639: EQUAL
29640: IFTRUE 29644
29642: GO 29670
29644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29645: LD_ADDR_VAR 0 3
29649: PUSH
29650: LD_INT 21
29652: PUSH
29653: LD_INT 22
29655: PUSH
29656: LD_INT 23
29658: PUSH
29659: LD_INT 24
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: ST_TO_ADDR
29668: GO 29817
29670: LD_INT 51
29672: DOUBLE
29673: EQUAL
29674: IFTRUE 29678
29676: GO 29704
29678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29679: LD_ADDR_VAR 0 3
29683: PUSH
29684: LD_INT 21
29686: PUSH
29687: LD_INT 22
29689: PUSH
29690: LD_INT 23
29692: PUSH
29693: LD_INT 24
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: ST_TO_ADDR
29702: GO 29817
29704: LD_INT 52
29706: DOUBLE
29707: EQUAL
29708: IFTRUE 29712
29710: GO 29738
29712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29713: LD_ADDR_VAR 0 3
29717: PUSH
29718: LD_INT 21
29720: PUSH
29721: LD_INT 22
29723: PUSH
29724: LD_INT 23
29726: PUSH
29727: LD_INT 24
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: ST_TO_ADDR
29736: GO 29817
29738: LD_INT 53
29740: DOUBLE
29741: EQUAL
29742: IFTRUE 29746
29744: GO 29764
29746: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29747: LD_ADDR_VAR 0 3
29751: PUSH
29752: LD_INT 23
29754: PUSH
29755: LD_INT 24
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: ST_TO_ADDR
29762: GO 29817
29764: LD_INT 46
29766: DOUBLE
29767: EQUAL
29768: IFTRUE 29772
29770: GO 29790
29772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29773: LD_ADDR_VAR 0 3
29777: PUSH
29778: LD_INT 23
29780: PUSH
29781: LD_INT 24
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: ST_TO_ADDR
29788: GO 29817
29790: LD_INT 47
29792: DOUBLE
29793: EQUAL
29794: IFTRUE 29798
29796: GO 29816
29798: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29799: LD_ADDR_VAR 0 3
29803: PUSH
29804: LD_INT 23
29806: PUSH
29807: LD_INT 24
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: ST_TO_ADDR
29814: GO 29817
29816: POP
// result := ( chassis in result ) ;
29817: LD_ADDR_VAR 0 3
29821: PUSH
29822: LD_VAR 0 1
29826: PUSH
29827: LD_VAR 0 3
29831: IN
29832: ST_TO_ADDR
// end ;
29833: LD_VAR 0 3
29837: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29838: LD_INT 0
29840: PPUSH
29841: PPUSH
29842: PPUSH
29843: PPUSH
29844: PPUSH
29845: PPUSH
29846: PPUSH
// result := array ;
29847: LD_ADDR_VAR 0 5
29851: PUSH
29852: LD_VAR 0 1
29856: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29857: LD_VAR 0 1
29861: NOT
29862: PUSH
29863: LD_VAR 0 2
29867: NOT
29868: OR
29869: PUSH
29870: LD_VAR 0 3
29874: NOT
29875: OR
29876: PUSH
29877: LD_VAR 0 2
29881: PUSH
29882: LD_VAR 0 1
29886: GREATER
29887: OR
29888: PUSH
29889: LD_VAR 0 3
29893: PUSH
29894: LD_VAR 0 1
29898: GREATER
29899: OR
29900: IFFALSE 29904
// exit ;
29902: GO 30200
// if direction then
29904: LD_VAR 0 4
29908: IFFALSE 29972
// begin d := 1 ;
29910: LD_ADDR_VAR 0 9
29914: PUSH
29915: LD_INT 1
29917: ST_TO_ADDR
// if i_from > i_to then
29918: LD_VAR 0 2
29922: PUSH
29923: LD_VAR 0 3
29927: GREATER
29928: IFFALSE 29954
// length := ( array - i_from ) + i_to else
29930: LD_ADDR_VAR 0 11
29934: PUSH
29935: LD_VAR 0 1
29939: PUSH
29940: LD_VAR 0 2
29944: MINUS
29945: PUSH
29946: LD_VAR 0 3
29950: PLUS
29951: ST_TO_ADDR
29952: GO 29970
// length := i_to - i_from ;
29954: LD_ADDR_VAR 0 11
29958: PUSH
29959: LD_VAR 0 3
29963: PUSH
29964: LD_VAR 0 2
29968: MINUS
29969: ST_TO_ADDR
// end else
29970: GO 30033
// begin d := - 1 ;
29972: LD_ADDR_VAR 0 9
29976: PUSH
29977: LD_INT 1
29979: NEG
29980: ST_TO_ADDR
// if i_from > i_to then
29981: LD_VAR 0 2
29985: PUSH
29986: LD_VAR 0 3
29990: GREATER
29991: IFFALSE 30011
// length := i_from - i_to else
29993: LD_ADDR_VAR 0 11
29997: PUSH
29998: LD_VAR 0 2
30002: PUSH
30003: LD_VAR 0 3
30007: MINUS
30008: ST_TO_ADDR
30009: GO 30033
// length := ( array - i_to ) + i_from ;
30011: LD_ADDR_VAR 0 11
30015: PUSH
30016: LD_VAR 0 1
30020: PUSH
30021: LD_VAR 0 3
30025: MINUS
30026: PUSH
30027: LD_VAR 0 2
30031: PLUS
30032: ST_TO_ADDR
// end ; if not length then
30033: LD_VAR 0 11
30037: NOT
30038: IFFALSE 30042
// exit ;
30040: GO 30200
// tmp := array ;
30042: LD_ADDR_VAR 0 10
30046: PUSH
30047: LD_VAR 0 1
30051: ST_TO_ADDR
// for i = 1 to length do
30052: LD_ADDR_VAR 0 6
30056: PUSH
30057: DOUBLE
30058: LD_INT 1
30060: DEC
30061: ST_TO_ADDR
30062: LD_VAR 0 11
30066: PUSH
30067: FOR_TO
30068: IFFALSE 30188
// begin for j = 1 to array do
30070: LD_ADDR_VAR 0 7
30074: PUSH
30075: DOUBLE
30076: LD_INT 1
30078: DEC
30079: ST_TO_ADDR
30080: LD_VAR 0 1
30084: PUSH
30085: FOR_TO
30086: IFFALSE 30174
// begin k := j + d ;
30088: LD_ADDR_VAR 0 8
30092: PUSH
30093: LD_VAR 0 7
30097: PUSH
30098: LD_VAR 0 9
30102: PLUS
30103: ST_TO_ADDR
// if k > array then
30104: LD_VAR 0 8
30108: PUSH
30109: LD_VAR 0 1
30113: GREATER
30114: IFFALSE 30124
// k := 1 ;
30116: LD_ADDR_VAR 0 8
30120: PUSH
30121: LD_INT 1
30123: ST_TO_ADDR
// if not k then
30124: LD_VAR 0 8
30128: NOT
30129: IFFALSE 30141
// k := array ;
30131: LD_ADDR_VAR 0 8
30135: PUSH
30136: LD_VAR 0 1
30140: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30141: LD_ADDR_VAR 0 10
30145: PUSH
30146: LD_VAR 0 10
30150: PPUSH
30151: LD_VAR 0 8
30155: PPUSH
30156: LD_VAR 0 1
30160: PUSH
30161: LD_VAR 0 7
30165: ARRAY
30166: PPUSH
30167: CALL_OW 1
30171: ST_TO_ADDR
// end ;
30172: GO 30085
30174: POP
30175: POP
// array := tmp ;
30176: LD_ADDR_VAR 0 1
30180: PUSH
30181: LD_VAR 0 10
30185: ST_TO_ADDR
// end ;
30186: GO 30067
30188: POP
30189: POP
// result := array ;
30190: LD_ADDR_VAR 0 5
30194: PUSH
30195: LD_VAR 0 1
30199: ST_TO_ADDR
// end ;
30200: LD_VAR 0 5
30204: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30205: LD_INT 0
30207: PPUSH
30208: PPUSH
// result := 0 ;
30209: LD_ADDR_VAR 0 3
30213: PUSH
30214: LD_INT 0
30216: ST_TO_ADDR
// if not array or not value in array then
30217: LD_VAR 0 1
30221: NOT
30222: PUSH
30223: LD_VAR 0 2
30227: PUSH
30228: LD_VAR 0 1
30232: IN
30233: NOT
30234: OR
30235: IFFALSE 30239
// exit ;
30237: GO 30293
// for i = 1 to array do
30239: LD_ADDR_VAR 0 4
30243: PUSH
30244: DOUBLE
30245: LD_INT 1
30247: DEC
30248: ST_TO_ADDR
30249: LD_VAR 0 1
30253: PUSH
30254: FOR_TO
30255: IFFALSE 30291
// if value = array [ i ] then
30257: LD_VAR 0 2
30261: PUSH
30262: LD_VAR 0 1
30266: PUSH
30267: LD_VAR 0 4
30271: ARRAY
30272: EQUAL
30273: IFFALSE 30289
// begin result := i ;
30275: LD_ADDR_VAR 0 3
30279: PUSH
30280: LD_VAR 0 4
30284: ST_TO_ADDR
// exit ;
30285: POP
30286: POP
30287: GO 30293
// end ;
30289: GO 30254
30291: POP
30292: POP
// end ;
30293: LD_VAR 0 3
30297: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30298: LD_INT 0
30300: PPUSH
// vc_chassis := chassis ;
30301: LD_ADDR_OWVAR 37
30305: PUSH
30306: LD_VAR 0 1
30310: ST_TO_ADDR
// vc_engine := engine ;
30311: LD_ADDR_OWVAR 39
30315: PUSH
30316: LD_VAR 0 2
30320: ST_TO_ADDR
// vc_control := control ;
30321: LD_ADDR_OWVAR 38
30325: PUSH
30326: LD_VAR 0 3
30330: ST_TO_ADDR
// vc_weapon := weapon ;
30331: LD_ADDR_OWVAR 40
30335: PUSH
30336: LD_VAR 0 4
30340: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30341: LD_ADDR_OWVAR 41
30345: PUSH
30346: LD_VAR 0 5
30350: ST_TO_ADDR
// end ;
30351: LD_VAR 0 6
30355: RET
// export function WantPlant ( unit ) ; var task ; begin
30356: LD_INT 0
30358: PPUSH
30359: PPUSH
// result := false ;
30360: LD_ADDR_VAR 0 2
30364: PUSH
30365: LD_INT 0
30367: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30368: LD_ADDR_VAR 0 3
30372: PUSH
30373: LD_VAR 0 1
30377: PPUSH
30378: CALL_OW 437
30382: ST_TO_ADDR
// if task then
30383: LD_VAR 0 3
30387: IFFALSE 30415
// if task [ 1 ] [ 1 ] = p then
30389: LD_VAR 0 3
30393: PUSH
30394: LD_INT 1
30396: ARRAY
30397: PUSH
30398: LD_INT 1
30400: ARRAY
30401: PUSH
30402: LD_STRING p
30404: EQUAL
30405: IFFALSE 30415
// result := true ;
30407: LD_ADDR_VAR 0 2
30411: PUSH
30412: LD_INT 1
30414: ST_TO_ADDR
// end ;
30415: LD_VAR 0 2
30419: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30420: LD_INT 0
30422: PPUSH
30423: PPUSH
30424: PPUSH
30425: PPUSH
// if pos < 1 then
30426: LD_VAR 0 2
30430: PUSH
30431: LD_INT 1
30433: LESS
30434: IFFALSE 30438
// exit ;
30436: GO 30741
// if pos = 1 then
30438: LD_VAR 0 2
30442: PUSH
30443: LD_INT 1
30445: EQUAL
30446: IFFALSE 30479
// result := Replace ( arr , pos [ 1 ] , value ) else
30448: LD_ADDR_VAR 0 4
30452: PUSH
30453: LD_VAR 0 1
30457: PPUSH
30458: LD_VAR 0 2
30462: PUSH
30463: LD_INT 1
30465: ARRAY
30466: PPUSH
30467: LD_VAR 0 3
30471: PPUSH
30472: CALL_OW 1
30476: ST_TO_ADDR
30477: GO 30741
// begin tmp := arr ;
30479: LD_ADDR_VAR 0 6
30483: PUSH
30484: LD_VAR 0 1
30488: ST_TO_ADDR
// s_arr := [ tmp ] ;
30489: LD_ADDR_VAR 0 7
30493: PUSH
30494: LD_VAR 0 6
30498: PUSH
30499: EMPTY
30500: LIST
30501: ST_TO_ADDR
// for i = 1 to pos - 1 do
30502: LD_ADDR_VAR 0 5
30506: PUSH
30507: DOUBLE
30508: LD_INT 1
30510: DEC
30511: ST_TO_ADDR
30512: LD_VAR 0 2
30516: PUSH
30517: LD_INT 1
30519: MINUS
30520: PUSH
30521: FOR_TO
30522: IFFALSE 30567
// begin tmp := tmp [ pos [ i ] ] ;
30524: LD_ADDR_VAR 0 6
30528: PUSH
30529: LD_VAR 0 6
30533: PUSH
30534: LD_VAR 0 2
30538: PUSH
30539: LD_VAR 0 5
30543: ARRAY
30544: ARRAY
30545: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30546: LD_ADDR_VAR 0 7
30550: PUSH
30551: LD_VAR 0 7
30555: PUSH
30556: LD_VAR 0 6
30560: PUSH
30561: EMPTY
30562: LIST
30563: ADD
30564: ST_TO_ADDR
// end ;
30565: GO 30521
30567: POP
30568: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30569: LD_ADDR_VAR 0 6
30573: PUSH
30574: LD_VAR 0 6
30578: PPUSH
30579: LD_VAR 0 2
30583: PUSH
30584: LD_VAR 0 2
30588: ARRAY
30589: PPUSH
30590: LD_VAR 0 3
30594: PPUSH
30595: CALL_OW 1
30599: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30600: LD_ADDR_VAR 0 7
30604: PUSH
30605: LD_VAR 0 7
30609: PPUSH
30610: LD_VAR 0 7
30614: PPUSH
30615: LD_VAR 0 6
30619: PPUSH
30620: CALL_OW 1
30624: ST_TO_ADDR
// for i = s_arr downto 2 do
30625: LD_ADDR_VAR 0 5
30629: PUSH
30630: DOUBLE
30631: LD_VAR 0 7
30635: INC
30636: ST_TO_ADDR
30637: LD_INT 2
30639: PUSH
30640: FOR_DOWNTO
30641: IFFALSE 30725
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30643: LD_ADDR_VAR 0 6
30647: PUSH
30648: LD_VAR 0 7
30652: PUSH
30653: LD_VAR 0 5
30657: PUSH
30658: LD_INT 1
30660: MINUS
30661: ARRAY
30662: PPUSH
30663: LD_VAR 0 2
30667: PUSH
30668: LD_VAR 0 5
30672: PUSH
30673: LD_INT 1
30675: MINUS
30676: ARRAY
30677: PPUSH
30678: LD_VAR 0 7
30682: PUSH
30683: LD_VAR 0 5
30687: ARRAY
30688: PPUSH
30689: CALL_OW 1
30693: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30694: LD_ADDR_VAR 0 7
30698: PUSH
30699: LD_VAR 0 7
30703: PPUSH
30704: LD_VAR 0 5
30708: PUSH
30709: LD_INT 1
30711: MINUS
30712: PPUSH
30713: LD_VAR 0 6
30717: PPUSH
30718: CALL_OW 1
30722: ST_TO_ADDR
// end ;
30723: GO 30640
30725: POP
30726: POP
// result := s_arr [ 1 ] ;
30727: LD_ADDR_VAR 0 4
30731: PUSH
30732: LD_VAR 0 7
30736: PUSH
30737: LD_INT 1
30739: ARRAY
30740: ST_TO_ADDR
// end ; end ;
30741: LD_VAR 0 4
30745: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30746: LD_INT 0
30748: PPUSH
30749: PPUSH
// if not list then
30750: LD_VAR 0 1
30754: NOT
30755: IFFALSE 30759
// exit ;
30757: GO 30850
// i := list [ pos1 ] ;
30759: LD_ADDR_VAR 0 5
30763: PUSH
30764: LD_VAR 0 1
30768: PUSH
30769: LD_VAR 0 2
30773: ARRAY
30774: ST_TO_ADDR
// if not i then
30775: LD_VAR 0 5
30779: NOT
30780: IFFALSE 30784
// exit ;
30782: GO 30850
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30784: LD_ADDR_VAR 0 1
30788: PUSH
30789: LD_VAR 0 1
30793: PPUSH
30794: LD_VAR 0 2
30798: PPUSH
30799: LD_VAR 0 1
30803: PUSH
30804: LD_VAR 0 3
30808: ARRAY
30809: PPUSH
30810: CALL_OW 1
30814: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30815: LD_ADDR_VAR 0 1
30819: PUSH
30820: LD_VAR 0 1
30824: PPUSH
30825: LD_VAR 0 3
30829: PPUSH
30830: LD_VAR 0 5
30834: PPUSH
30835: CALL_OW 1
30839: ST_TO_ADDR
// result := list ;
30840: LD_ADDR_VAR 0 4
30844: PUSH
30845: LD_VAR 0 1
30849: ST_TO_ADDR
// end ;
30850: LD_VAR 0 4
30854: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30855: LD_INT 0
30857: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30858: LD_ADDR_VAR 0 5
30862: PUSH
30863: LD_VAR 0 1
30867: PPUSH
30868: CALL_OW 250
30872: PPUSH
30873: LD_VAR 0 1
30877: PPUSH
30878: CALL_OW 251
30882: PPUSH
30883: LD_VAR 0 2
30887: PPUSH
30888: LD_VAR 0 3
30892: PPUSH
30893: LD_VAR 0 4
30897: PPUSH
30898: CALL 30908 0 5
30902: ST_TO_ADDR
// end ;
30903: LD_VAR 0 5
30907: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30908: LD_INT 0
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
// if not list then
30914: LD_VAR 0 3
30918: NOT
30919: IFFALSE 30923
// exit ;
30921: GO 31311
// result := [ ] ;
30923: LD_ADDR_VAR 0 6
30927: PUSH
30928: EMPTY
30929: ST_TO_ADDR
// for i in list do
30930: LD_ADDR_VAR 0 7
30934: PUSH
30935: LD_VAR 0 3
30939: PUSH
30940: FOR_IN
30941: IFFALSE 31143
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30943: LD_ADDR_VAR 0 9
30947: PUSH
30948: LD_VAR 0 7
30952: PPUSH
30953: LD_VAR 0 1
30957: PPUSH
30958: LD_VAR 0 2
30962: PPUSH
30963: CALL_OW 297
30967: ST_TO_ADDR
// if not result then
30968: LD_VAR 0 6
30972: NOT
30973: IFFALSE 30999
// result := [ [ i , tmp ] ] else
30975: LD_ADDR_VAR 0 6
30979: PUSH
30980: LD_VAR 0 7
30984: PUSH
30985: LD_VAR 0 9
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: EMPTY
30995: LIST
30996: ST_TO_ADDR
30997: GO 31141
// begin if result [ result ] [ 2 ] < tmp then
30999: LD_VAR 0 6
31003: PUSH
31004: LD_VAR 0 6
31008: ARRAY
31009: PUSH
31010: LD_INT 2
31012: ARRAY
31013: PUSH
31014: LD_VAR 0 9
31018: LESS
31019: IFFALSE 31061
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31021: LD_ADDR_VAR 0 6
31025: PUSH
31026: LD_VAR 0 6
31030: PPUSH
31031: LD_VAR 0 6
31035: PUSH
31036: LD_INT 1
31038: PLUS
31039: PPUSH
31040: LD_VAR 0 7
31044: PUSH
31045: LD_VAR 0 9
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PPUSH
31054: CALL_OW 2
31058: ST_TO_ADDR
31059: GO 31141
// for j = 1 to result do
31061: LD_ADDR_VAR 0 8
31065: PUSH
31066: DOUBLE
31067: LD_INT 1
31069: DEC
31070: ST_TO_ADDR
31071: LD_VAR 0 6
31075: PUSH
31076: FOR_TO
31077: IFFALSE 31139
// begin if tmp < result [ j ] [ 2 ] then
31079: LD_VAR 0 9
31083: PUSH
31084: LD_VAR 0 6
31088: PUSH
31089: LD_VAR 0 8
31093: ARRAY
31094: PUSH
31095: LD_INT 2
31097: ARRAY
31098: LESS
31099: IFFALSE 31137
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31101: LD_ADDR_VAR 0 6
31105: PUSH
31106: LD_VAR 0 6
31110: PPUSH
31111: LD_VAR 0 8
31115: PPUSH
31116: LD_VAR 0 7
31120: PUSH
31121: LD_VAR 0 9
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PPUSH
31130: CALL_OW 2
31134: ST_TO_ADDR
// break ;
31135: GO 31139
// end ; end ;
31137: GO 31076
31139: POP
31140: POP
// end ; end ;
31141: GO 30940
31143: POP
31144: POP
// if result and not asc then
31145: LD_VAR 0 6
31149: PUSH
31150: LD_VAR 0 4
31154: NOT
31155: AND
31156: IFFALSE 31231
// begin tmp := result ;
31158: LD_ADDR_VAR 0 9
31162: PUSH
31163: LD_VAR 0 6
31167: ST_TO_ADDR
// for i = tmp downto 1 do
31168: LD_ADDR_VAR 0 7
31172: PUSH
31173: DOUBLE
31174: LD_VAR 0 9
31178: INC
31179: ST_TO_ADDR
31180: LD_INT 1
31182: PUSH
31183: FOR_DOWNTO
31184: IFFALSE 31229
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31186: LD_ADDR_VAR 0 6
31190: PUSH
31191: LD_VAR 0 6
31195: PPUSH
31196: LD_VAR 0 9
31200: PUSH
31201: LD_VAR 0 7
31205: MINUS
31206: PUSH
31207: LD_INT 1
31209: PLUS
31210: PPUSH
31211: LD_VAR 0 9
31215: PUSH
31216: LD_VAR 0 7
31220: ARRAY
31221: PPUSH
31222: CALL_OW 1
31226: ST_TO_ADDR
31227: GO 31183
31229: POP
31230: POP
// end ; tmp := [ ] ;
31231: LD_ADDR_VAR 0 9
31235: PUSH
31236: EMPTY
31237: ST_TO_ADDR
// if mode then
31238: LD_VAR 0 5
31242: IFFALSE 31311
// begin for i = 1 to result do
31244: LD_ADDR_VAR 0 7
31248: PUSH
31249: DOUBLE
31250: LD_INT 1
31252: DEC
31253: ST_TO_ADDR
31254: LD_VAR 0 6
31258: PUSH
31259: FOR_TO
31260: IFFALSE 31299
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31262: LD_ADDR_VAR 0 9
31266: PUSH
31267: LD_VAR 0 9
31271: PPUSH
31272: LD_VAR 0 7
31276: PPUSH
31277: LD_VAR 0 6
31281: PUSH
31282: LD_VAR 0 7
31286: ARRAY
31287: PUSH
31288: LD_INT 1
31290: ARRAY
31291: PPUSH
31292: CALL_OW 1
31296: ST_TO_ADDR
31297: GO 31259
31299: POP
31300: POP
// result := tmp ;
31301: LD_ADDR_VAR 0 6
31305: PUSH
31306: LD_VAR 0 9
31310: ST_TO_ADDR
// end ; end ;
31311: LD_VAR 0 6
31315: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31316: LD_INT 0
31318: PPUSH
31319: PPUSH
31320: PPUSH
31321: PPUSH
31322: PPUSH
31323: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31324: LD_ADDR_VAR 0 5
31328: PUSH
31329: LD_INT 0
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: ST_TO_ADDR
// if not x or not y then
31346: LD_VAR 0 2
31350: NOT
31351: PUSH
31352: LD_VAR 0 3
31356: NOT
31357: OR
31358: IFFALSE 31362
// exit ;
31360: GO 33012
// if not range then
31362: LD_VAR 0 4
31366: NOT
31367: IFFALSE 31377
// range := 10 ;
31369: LD_ADDR_VAR 0 4
31373: PUSH
31374: LD_INT 10
31376: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31377: LD_ADDR_VAR 0 8
31381: PUSH
31382: LD_INT 81
31384: PUSH
31385: LD_VAR 0 1
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 92
31396: PUSH
31397: LD_VAR 0 2
31401: PUSH
31402: LD_VAR 0 3
31406: PUSH
31407: LD_VAR 0 4
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: LD_INT 21
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: PPUSH
31440: CALL_OW 69
31444: ST_TO_ADDR
// if not tmp then
31445: LD_VAR 0 8
31449: NOT
31450: IFFALSE 31454
// exit ;
31452: GO 33012
// for i in tmp do
31454: LD_ADDR_VAR 0 6
31458: PUSH
31459: LD_VAR 0 8
31463: PUSH
31464: FOR_IN
31465: IFFALSE 32987
// begin points := [ 0 , 0 , 0 ] ;
31467: LD_ADDR_VAR 0 9
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// bpoints := 1 ;
31486: LD_ADDR_VAR 0 10
31490: PUSH
31491: LD_INT 1
31493: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31494: LD_VAR 0 6
31498: PPUSH
31499: CALL_OW 247
31503: PUSH
31504: LD_INT 1
31506: DOUBLE
31507: EQUAL
31508: IFTRUE 31512
31510: GO 32090
31512: POP
// begin if GetClass ( i ) = 1 then
31513: LD_VAR 0 6
31517: PPUSH
31518: CALL_OW 257
31522: PUSH
31523: LD_INT 1
31525: EQUAL
31526: IFFALSE 31547
// points := [ 10 , 5 , 3 ] ;
31528: LD_ADDR_VAR 0 9
31532: PUSH
31533: LD_INT 10
31535: PUSH
31536: LD_INT 5
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: LIST
31546: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31547: LD_VAR 0 6
31551: PPUSH
31552: CALL_OW 257
31556: PUSH
31557: LD_INT 2
31559: PUSH
31560: LD_INT 3
31562: PUSH
31563: LD_INT 4
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: LIST
31570: IN
31571: IFFALSE 31592
// points := [ 3 , 2 , 1 ] ;
31573: LD_ADDR_VAR 0 9
31577: PUSH
31578: LD_INT 3
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: LIST
31591: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31592: LD_VAR 0 6
31596: PPUSH
31597: CALL_OW 257
31601: PUSH
31602: LD_INT 5
31604: EQUAL
31605: IFFALSE 31626
// points := [ 130 , 5 , 2 ] ;
31607: LD_ADDR_VAR 0 9
31611: PUSH
31612: LD_INT 130
31614: PUSH
31615: LD_INT 5
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31626: LD_VAR 0 6
31630: PPUSH
31631: CALL_OW 257
31635: PUSH
31636: LD_INT 8
31638: EQUAL
31639: IFFALSE 31660
// points := [ 35 , 35 , 30 ] ;
31641: LD_ADDR_VAR 0 9
31645: PUSH
31646: LD_INT 35
31648: PUSH
31649: LD_INT 35
31651: PUSH
31652: LD_INT 30
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: LIST
31659: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31660: LD_VAR 0 6
31664: PPUSH
31665: CALL_OW 257
31669: PUSH
31670: LD_INT 9
31672: EQUAL
31673: IFFALSE 31694
// points := [ 20 , 55 , 40 ] ;
31675: LD_ADDR_VAR 0 9
31679: PUSH
31680: LD_INT 20
31682: PUSH
31683: LD_INT 55
31685: PUSH
31686: LD_INT 40
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: LIST
31693: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31694: LD_VAR 0 6
31698: PPUSH
31699: CALL_OW 257
31703: PUSH
31704: LD_INT 12
31706: PUSH
31707: LD_INT 16
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: IN
31714: IFFALSE 31735
// points := [ 5 , 3 , 2 ] ;
31716: LD_ADDR_VAR 0 9
31720: PUSH
31721: LD_INT 5
31723: PUSH
31724: LD_INT 3
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31735: LD_VAR 0 6
31739: PPUSH
31740: CALL_OW 257
31744: PUSH
31745: LD_INT 17
31747: EQUAL
31748: IFFALSE 31769
// points := [ 100 , 50 , 75 ] ;
31750: LD_ADDR_VAR 0 9
31754: PUSH
31755: LD_INT 100
31757: PUSH
31758: LD_INT 50
31760: PUSH
31761: LD_INT 75
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31769: LD_VAR 0 6
31773: PPUSH
31774: CALL_OW 257
31778: PUSH
31779: LD_INT 15
31781: EQUAL
31782: IFFALSE 31803
// points := [ 10 , 5 , 3 ] ;
31784: LD_ADDR_VAR 0 9
31788: PUSH
31789: LD_INT 10
31791: PUSH
31792: LD_INT 5
31794: PUSH
31795: LD_INT 3
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: LIST
31802: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31803: LD_VAR 0 6
31807: PPUSH
31808: CALL_OW 257
31812: PUSH
31813: LD_INT 14
31815: EQUAL
31816: IFFALSE 31837
// points := [ 10 , 0 , 0 ] ;
31818: LD_ADDR_VAR 0 9
31822: PUSH
31823: LD_INT 10
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31837: LD_VAR 0 6
31841: PPUSH
31842: CALL_OW 257
31846: PUSH
31847: LD_INT 11
31849: EQUAL
31850: IFFALSE 31871
// points := [ 30 , 10 , 5 ] ;
31852: LD_ADDR_VAR 0 9
31856: PUSH
31857: LD_INT 30
31859: PUSH
31860: LD_INT 10
31862: PUSH
31863: LD_INT 5
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31871: LD_VAR 0 1
31875: PPUSH
31876: LD_INT 5
31878: PPUSH
31879: CALL_OW 321
31883: PUSH
31884: LD_INT 2
31886: EQUAL
31887: IFFALSE 31904
// bpoints := bpoints * 1.8 ;
31889: LD_ADDR_VAR 0 10
31893: PUSH
31894: LD_VAR 0 10
31898: PUSH
31899: LD_REAL  1.80000000000000E+0000
31902: MUL
31903: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31904: LD_VAR 0 6
31908: PPUSH
31909: CALL_OW 257
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: LD_INT 4
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: IN
31932: PUSH
31933: LD_VAR 0 1
31937: PPUSH
31938: LD_INT 51
31940: PPUSH
31941: CALL_OW 321
31945: PUSH
31946: LD_INT 2
31948: EQUAL
31949: AND
31950: IFFALSE 31967
// bpoints := bpoints * 1.2 ;
31952: LD_ADDR_VAR 0 10
31956: PUSH
31957: LD_VAR 0 10
31961: PUSH
31962: LD_REAL  1.20000000000000E+0000
31965: MUL
31966: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31967: LD_VAR 0 6
31971: PPUSH
31972: CALL_OW 257
31976: PUSH
31977: LD_INT 5
31979: PUSH
31980: LD_INT 7
31982: PUSH
31983: LD_INT 9
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: IN
31991: PUSH
31992: LD_VAR 0 1
31996: PPUSH
31997: LD_INT 52
31999: PPUSH
32000: CALL_OW 321
32004: PUSH
32005: LD_INT 2
32007: EQUAL
32008: AND
32009: IFFALSE 32026
// bpoints := bpoints * 1.5 ;
32011: LD_ADDR_VAR 0 10
32015: PUSH
32016: LD_VAR 0 10
32020: PUSH
32021: LD_REAL  1.50000000000000E+0000
32024: MUL
32025: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32026: LD_VAR 0 1
32030: PPUSH
32031: LD_INT 66
32033: PPUSH
32034: CALL_OW 321
32038: PUSH
32039: LD_INT 2
32041: EQUAL
32042: IFFALSE 32059
// bpoints := bpoints * 1.1 ;
32044: LD_ADDR_VAR 0 10
32048: PUSH
32049: LD_VAR 0 10
32053: PUSH
32054: LD_REAL  1.10000000000000E+0000
32057: MUL
32058: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32059: LD_ADDR_VAR 0 10
32063: PUSH
32064: LD_VAR 0 10
32068: PUSH
32069: LD_VAR 0 6
32073: PPUSH
32074: LD_INT 1
32076: PPUSH
32077: CALL_OW 259
32081: PUSH
32082: LD_REAL  1.15000000000000E+0000
32085: MUL
32086: MUL
32087: ST_TO_ADDR
// end ; unit_vehicle :
32088: GO 32916
32090: LD_INT 2
32092: DOUBLE
32093: EQUAL
32094: IFTRUE 32098
32096: GO 32904
32098: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32099: LD_VAR 0 6
32103: PPUSH
32104: CALL_OW 264
32108: PUSH
32109: LD_INT 2
32111: PUSH
32112: LD_INT 42
32114: PUSH
32115: LD_INT 24
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: IN
32123: IFFALSE 32144
// points := [ 25 , 5 , 3 ] ;
32125: LD_ADDR_VAR 0 9
32129: PUSH
32130: LD_INT 25
32132: PUSH
32133: LD_INT 5
32135: PUSH
32136: LD_INT 3
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32144: LD_VAR 0 6
32148: PPUSH
32149: CALL_OW 264
32153: PUSH
32154: LD_INT 4
32156: PUSH
32157: LD_INT 43
32159: PUSH
32160: LD_INT 25
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: LIST
32167: IN
32168: IFFALSE 32189
// points := [ 40 , 15 , 5 ] ;
32170: LD_ADDR_VAR 0 9
32174: PUSH
32175: LD_INT 40
32177: PUSH
32178: LD_INT 15
32180: PUSH
32181: LD_INT 5
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: LIST
32188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32189: LD_VAR 0 6
32193: PPUSH
32194: CALL_OW 264
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: LD_INT 23
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: IN
32209: IFFALSE 32230
// points := [ 7 , 25 , 8 ] ;
32211: LD_ADDR_VAR 0 9
32215: PUSH
32216: LD_INT 7
32218: PUSH
32219: LD_INT 25
32221: PUSH
32222: LD_INT 8
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: LIST
32229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32230: LD_VAR 0 6
32234: PPUSH
32235: CALL_OW 264
32239: PUSH
32240: LD_INT 5
32242: PUSH
32243: LD_INT 27
32245: PUSH
32246: LD_INT 44
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: IN
32254: IFFALSE 32275
// points := [ 14 , 50 , 16 ] ;
32256: LD_ADDR_VAR 0 9
32260: PUSH
32261: LD_INT 14
32263: PUSH
32264: LD_INT 50
32266: PUSH
32267: LD_INT 16
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: LIST
32274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32275: LD_VAR 0 6
32279: PPUSH
32280: CALL_OW 264
32284: PUSH
32285: LD_INT 6
32287: PUSH
32288: LD_INT 46
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: IN
32295: IFFALSE 32316
// points := [ 32 , 120 , 70 ] ;
32297: LD_ADDR_VAR 0 9
32301: PUSH
32302: LD_INT 32
32304: PUSH
32305: LD_INT 120
32307: PUSH
32308: LD_INT 70
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32316: LD_VAR 0 6
32320: PPUSH
32321: CALL_OW 264
32325: PUSH
32326: LD_INT 7
32328: PUSH
32329: LD_INT 28
32331: PUSH
32332: LD_INT 45
32334: PUSH
32335: LD_INT 92
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: IN
32344: IFFALSE 32365
// points := [ 35 , 20 , 45 ] ;
32346: LD_ADDR_VAR 0 9
32350: PUSH
32351: LD_INT 35
32353: PUSH
32354: LD_INT 20
32356: PUSH
32357: LD_INT 45
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32365: LD_VAR 0 6
32369: PPUSH
32370: CALL_OW 264
32374: PUSH
32375: LD_INT 47
32377: PUSH
32378: EMPTY
32379: LIST
32380: IN
32381: IFFALSE 32402
// points := [ 67 , 45 , 75 ] ;
32383: LD_ADDR_VAR 0 9
32387: PUSH
32388: LD_INT 67
32390: PUSH
32391: LD_INT 45
32393: PUSH
32394: LD_INT 75
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: LIST
32401: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32402: LD_VAR 0 6
32406: PPUSH
32407: CALL_OW 264
32411: PUSH
32412: LD_INT 26
32414: PUSH
32415: EMPTY
32416: LIST
32417: IN
32418: IFFALSE 32439
// points := [ 120 , 30 , 80 ] ;
32420: LD_ADDR_VAR 0 9
32424: PUSH
32425: LD_INT 120
32427: PUSH
32428: LD_INT 30
32430: PUSH
32431: LD_INT 80
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: LIST
32438: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32439: LD_VAR 0 6
32443: PPUSH
32444: CALL_OW 264
32448: PUSH
32449: LD_INT 22
32451: PUSH
32452: EMPTY
32453: LIST
32454: IN
32455: IFFALSE 32476
// points := [ 40 , 1 , 1 ] ;
32457: LD_ADDR_VAR 0 9
32461: PUSH
32462: LD_INT 40
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32476: LD_VAR 0 6
32480: PPUSH
32481: CALL_OW 264
32485: PUSH
32486: LD_INT 29
32488: PUSH
32489: EMPTY
32490: LIST
32491: IN
32492: IFFALSE 32513
// points := [ 70 , 200 , 400 ] ;
32494: LD_ADDR_VAR 0 9
32498: PUSH
32499: LD_INT 70
32501: PUSH
32502: LD_INT 200
32504: PUSH
32505: LD_INT 400
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: LIST
32512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32513: LD_VAR 0 6
32517: PPUSH
32518: CALL_OW 264
32522: PUSH
32523: LD_INT 14
32525: PUSH
32526: LD_INT 53
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: IN
32533: IFFALSE 32554
// points := [ 40 , 10 , 20 ] ;
32535: LD_ADDR_VAR 0 9
32539: PUSH
32540: LD_INT 40
32542: PUSH
32543: LD_INT 10
32545: PUSH
32546: LD_INT 20
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32554: LD_VAR 0 6
32558: PPUSH
32559: CALL_OW 264
32563: PUSH
32564: LD_INT 9
32566: PUSH
32567: EMPTY
32568: LIST
32569: IN
32570: IFFALSE 32591
// points := [ 5 , 70 , 20 ] ;
32572: LD_ADDR_VAR 0 9
32576: PUSH
32577: LD_INT 5
32579: PUSH
32580: LD_INT 70
32582: PUSH
32583: LD_INT 20
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: LIST
32590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32591: LD_VAR 0 6
32595: PPUSH
32596: CALL_OW 264
32600: PUSH
32601: LD_INT 10
32603: PUSH
32604: EMPTY
32605: LIST
32606: IN
32607: IFFALSE 32628
// points := [ 35 , 110 , 70 ] ;
32609: LD_ADDR_VAR 0 9
32613: PUSH
32614: LD_INT 35
32616: PUSH
32617: LD_INT 110
32619: PUSH
32620: LD_INT 70
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: LIST
32627: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32628: LD_VAR 0 6
32632: PPUSH
32633: CALL_OW 265
32637: PUSH
32638: LD_INT 25
32640: EQUAL
32641: IFFALSE 32662
// points := [ 80 , 65 , 100 ] ;
32643: LD_ADDR_VAR 0 9
32647: PUSH
32648: LD_INT 80
32650: PUSH
32651: LD_INT 65
32653: PUSH
32654: LD_INT 100
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: LIST
32661: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32662: LD_VAR 0 6
32666: PPUSH
32667: CALL_OW 263
32671: PUSH
32672: LD_INT 1
32674: EQUAL
32675: IFFALSE 32710
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32677: LD_ADDR_VAR 0 10
32681: PUSH
32682: LD_VAR 0 10
32686: PUSH
32687: LD_VAR 0 6
32691: PPUSH
32692: CALL_OW 311
32696: PPUSH
32697: LD_INT 3
32699: PPUSH
32700: CALL_OW 259
32704: PUSH
32705: LD_INT 4
32707: MUL
32708: MUL
32709: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32710: LD_VAR 0 6
32714: PPUSH
32715: CALL_OW 263
32719: PUSH
32720: LD_INT 2
32722: EQUAL
32723: IFFALSE 32774
// begin j := IsControledBy ( i ) ;
32725: LD_ADDR_VAR 0 7
32729: PUSH
32730: LD_VAR 0 6
32734: PPUSH
32735: CALL_OW 312
32739: ST_TO_ADDR
// if j then
32740: LD_VAR 0 7
32744: IFFALSE 32774
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32746: LD_ADDR_VAR 0 10
32750: PUSH
32751: LD_VAR 0 10
32755: PUSH
32756: LD_VAR 0 7
32760: PPUSH
32761: LD_INT 3
32763: PPUSH
32764: CALL_OW 259
32768: PUSH
32769: LD_INT 3
32771: MUL
32772: MUL
32773: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32774: LD_VAR 0 6
32778: PPUSH
32779: CALL_OW 264
32783: PUSH
32784: LD_INT 5
32786: PUSH
32787: LD_INT 6
32789: PUSH
32790: LD_INT 46
32792: PUSH
32793: LD_INT 44
32795: PUSH
32796: LD_INT 47
32798: PUSH
32799: LD_INT 45
32801: PUSH
32802: LD_INT 28
32804: PUSH
32805: LD_INT 7
32807: PUSH
32808: LD_INT 27
32810: PUSH
32811: LD_INT 29
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: IN
32826: PUSH
32827: LD_VAR 0 1
32831: PPUSH
32832: LD_INT 52
32834: PPUSH
32835: CALL_OW 321
32839: PUSH
32840: LD_INT 2
32842: EQUAL
32843: AND
32844: IFFALSE 32861
// bpoints := bpoints * 1.2 ;
32846: LD_ADDR_VAR 0 10
32850: PUSH
32851: LD_VAR 0 10
32855: PUSH
32856: LD_REAL  1.20000000000000E+0000
32859: MUL
32860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32861: LD_VAR 0 6
32865: PPUSH
32866: CALL_OW 264
32870: PUSH
32871: LD_INT 6
32873: PUSH
32874: LD_INT 46
32876: PUSH
32877: LD_INT 47
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: IN
32885: IFFALSE 32902
// bpoints := bpoints * 1.2 ;
32887: LD_ADDR_VAR 0 10
32891: PUSH
32892: LD_VAR 0 10
32896: PUSH
32897: LD_REAL  1.20000000000000E+0000
32900: MUL
32901: ST_TO_ADDR
// end ; unit_building :
32902: GO 32916
32904: LD_INT 3
32906: DOUBLE
32907: EQUAL
32908: IFTRUE 32912
32910: GO 32915
32912: POP
// ; end ;
32913: GO 32916
32915: POP
// for j = 1 to 3 do
32916: LD_ADDR_VAR 0 7
32920: PUSH
32921: DOUBLE
32922: LD_INT 1
32924: DEC
32925: ST_TO_ADDR
32926: LD_INT 3
32928: PUSH
32929: FOR_TO
32930: IFFALSE 32983
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32932: LD_ADDR_VAR 0 5
32936: PUSH
32937: LD_VAR 0 5
32941: PPUSH
32942: LD_VAR 0 7
32946: PPUSH
32947: LD_VAR 0 5
32951: PUSH
32952: LD_VAR 0 7
32956: ARRAY
32957: PUSH
32958: LD_VAR 0 9
32962: PUSH
32963: LD_VAR 0 7
32967: ARRAY
32968: PUSH
32969: LD_VAR 0 10
32973: MUL
32974: PLUS
32975: PPUSH
32976: CALL_OW 1
32980: ST_TO_ADDR
32981: GO 32929
32983: POP
32984: POP
// end ;
32985: GO 31464
32987: POP
32988: POP
// result := Replace ( result , 4 , tmp ) ;
32989: LD_ADDR_VAR 0 5
32993: PUSH
32994: LD_VAR 0 5
32998: PPUSH
32999: LD_INT 4
33001: PPUSH
33002: LD_VAR 0 8
33006: PPUSH
33007: CALL_OW 1
33011: ST_TO_ADDR
// end ;
33012: LD_VAR 0 5
33016: RET
// export function DangerAtRange ( unit , range ) ; begin
33017: LD_INT 0
33019: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33020: LD_ADDR_VAR 0 3
33024: PUSH
33025: LD_VAR 0 1
33029: PPUSH
33030: CALL_OW 255
33034: PPUSH
33035: LD_VAR 0 1
33039: PPUSH
33040: CALL_OW 250
33044: PPUSH
33045: LD_VAR 0 1
33049: PPUSH
33050: CALL_OW 251
33054: PPUSH
33055: LD_VAR 0 2
33059: PPUSH
33060: CALL 31316 0 4
33064: ST_TO_ADDR
// end ;
33065: LD_VAR 0 3
33069: RET
// export function DangerInArea ( side , area ) ; begin
33070: LD_INT 0
33072: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33073: LD_ADDR_VAR 0 3
33077: PUSH
33078: LD_VAR 0 2
33082: PPUSH
33083: LD_INT 81
33085: PUSH
33086: LD_VAR 0 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PPUSH
33095: CALL_OW 70
33099: ST_TO_ADDR
// end ;
33100: LD_VAR 0 3
33104: RET
// export function IsExtension ( b ) ; begin
33105: LD_INT 0
33107: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33108: LD_ADDR_VAR 0 2
33112: PUSH
33113: LD_VAR 0 1
33117: PUSH
33118: LD_INT 23
33120: PUSH
33121: LD_INT 20
33123: PUSH
33124: LD_INT 22
33126: PUSH
33127: LD_INT 17
33129: PUSH
33130: LD_INT 24
33132: PUSH
33133: LD_INT 21
33135: PUSH
33136: LD_INT 19
33138: PUSH
33139: LD_INT 16
33141: PUSH
33142: LD_INT 25
33144: PUSH
33145: LD_INT 18
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: IN
33160: ST_TO_ADDR
// end ;
33161: LD_VAR 0 2
33165: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33166: LD_INT 0
33168: PPUSH
33169: PPUSH
33170: PPUSH
// result := [ ] ;
33171: LD_ADDR_VAR 0 4
33175: PUSH
33176: EMPTY
33177: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33178: LD_ADDR_VAR 0 5
33182: PUSH
33183: LD_VAR 0 2
33187: PPUSH
33188: LD_INT 21
33190: PUSH
33191: LD_INT 3
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PPUSH
33198: CALL_OW 70
33202: ST_TO_ADDR
// if not tmp then
33203: LD_VAR 0 5
33207: NOT
33208: IFFALSE 33212
// exit ;
33210: GO 33276
// if checkLink then
33212: LD_VAR 0 3
33216: IFFALSE 33266
// begin for i in tmp do
33218: LD_ADDR_VAR 0 6
33222: PUSH
33223: LD_VAR 0 5
33227: PUSH
33228: FOR_IN
33229: IFFALSE 33264
// if GetBase ( i ) <> base then
33231: LD_VAR 0 6
33235: PPUSH
33236: CALL_OW 274
33240: PUSH
33241: LD_VAR 0 1
33245: NONEQUAL
33246: IFFALSE 33262
// ComLinkToBase ( base , i ) ;
33248: LD_VAR 0 1
33252: PPUSH
33253: LD_VAR 0 6
33257: PPUSH
33258: CALL_OW 169
33262: GO 33228
33264: POP
33265: POP
// end ; result := tmp ;
33266: LD_ADDR_VAR 0 4
33270: PUSH
33271: LD_VAR 0 5
33275: ST_TO_ADDR
// end ;
33276: LD_VAR 0 4
33280: RET
// export function ComComplete ( units , b ) ; var i ; begin
33281: LD_INT 0
33283: PPUSH
33284: PPUSH
// if not units then
33285: LD_VAR 0 1
33289: NOT
33290: IFFALSE 33294
// exit ;
33292: GO 33384
// for i in units do
33294: LD_ADDR_VAR 0 4
33298: PUSH
33299: LD_VAR 0 1
33303: PUSH
33304: FOR_IN
33305: IFFALSE 33382
// if BuildingStatus ( b ) = bs_build then
33307: LD_VAR 0 2
33311: PPUSH
33312: CALL_OW 461
33316: PUSH
33317: LD_INT 1
33319: EQUAL
33320: IFFALSE 33380
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33322: LD_VAR 0 4
33326: PPUSH
33327: LD_STRING h
33329: PUSH
33330: LD_VAR 0 2
33334: PPUSH
33335: CALL_OW 250
33339: PUSH
33340: LD_VAR 0 2
33344: PPUSH
33345: CALL_OW 251
33349: PUSH
33350: LD_VAR 0 2
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: PUSH
33373: EMPTY
33374: LIST
33375: PPUSH
33376: CALL_OW 446
33380: GO 33304
33382: POP
33383: POP
// end ;
33384: LD_VAR 0 3
33388: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33389: LD_INT 0
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33397: LD_VAR 0 1
33401: NOT
33402: PUSH
33403: LD_VAR 0 1
33407: PPUSH
33408: CALL_OW 263
33412: PUSH
33413: LD_INT 2
33415: NONEQUAL
33416: OR
33417: IFFALSE 33421
// exit ;
33419: GO 33737
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33421: LD_ADDR_VAR 0 6
33425: PUSH
33426: LD_INT 22
33428: PUSH
33429: LD_VAR 0 1
33433: PPUSH
33434: CALL_OW 255
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: PUSH
33446: LD_INT 30
33448: PUSH
33449: LD_INT 36
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 34
33458: PUSH
33459: LD_INT 31
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PPUSH
33475: CALL_OW 69
33479: ST_TO_ADDR
// if not tmp then
33480: LD_VAR 0 6
33484: NOT
33485: IFFALSE 33489
// exit ;
33487: GO 33737
// result := [ ] ;
33489: LD_ADDR_VAR 0 2
33493: PUSH
33494: EMPTY
33495: ST_TO_ADDR
// for i in tmp do
33496: LD_ADDR_VAR 0 3
33500: PUSH
33501: LD_VAR 0 6
33505: PUSH
33506: FOR_IN
33507: IFFALSE 33578
// begin t := UnitsInside ( i ) ;
33509: LD_ADDR_VAR 0 4
33513: PUSH
33514: LD_VAR 0 3
33518: PPUSH
33519: CALL_OW 313
33523: ST_TO_ADDR
// if t then
33524: LD_VAR 0 4
33528: IFFALSE 33576
// for j in t do
33530: LD_ADDR_VAR 0 7
33534: PUSH
33535: LD_VAR 0 4
33539: PUSH
33540: FOR_IN
33541: IFFALSE 33574
// result := Replace ( result , result + 1 , j ) ;
33543: LD_ADDR_VAR 0 2
33547: PUSH
33548: LD_VAR 0 2
33552: PPUSH
33553: LD_VAR 0 2
33557: PUSH
33558: LD_INT 1
33560: PLUS
33561: PPUSH
33562: LD_VAR 0 7
33566: PPUSH
33567: CALL_OW 1
33571: ST_TO_ADDR
33572: GO 33540
33574: POP
33575: POP
// end ;
33576: GO 33506
33578: POP
33579: POP
// if not result then
33580: LD_VAR 0 2
33584: NOT
33585: IFFALSE 33589
// exit ;
33587: GO 33737
// mech := result [ 1 ] ;
33589: LD_ADDR_VAR 0 5
33593: PUSH
33594: LD_VAR 0 2
33598: PUSH
33599: LD_INT 1
33601: ARRAY
33602: ST_TO_ADDR
// if result > 1 then
33603: LD_VAR 0 2
33607: PUSH
33608: LD_INT 1
33610: GREATER
33611: IFFALSE 33723
// begin for i = 2 to result do
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: DOUBLE
33619: LD_INT 2
33621: DEC
33622: ST_TO_ADDR
33623: LD_VAR 0 2
33627: PUSH
33628: FOR_TO
33629: IFFALSE 33721
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33631: LD_ADDR_VAR 0 4
33635: PUSH
33636: LD_VAR 0 2
33640: PUSH
33641: LD_VAR 0 3
33645: ARRAY
33646: PPUSH
33647: LD_INT 3
33649: PPUSH
33650: CALL_OW 259
33654: PUSH
33655: LD_VAR 0 2
33659: PUSH
33660: LD_VAR 0 3
33664: ARRAY
33665: PPUSH
33666: CALL_OW 432
33670: MINUS
33671: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33672: LD_VAR 0 4
33676: PUSH
33677: LD_VAR 0 5
33681: PPUSH
33682: LD_INT 3
33684: PPUSH
33685: CALL_OW 259
33689: PUSH
33690: LD_VAR 0 5
33694: PPUSH
33695: CALL_OW 432
33699: MINUS
33700: GREATEREQUAL
33701: IFFALSE 33719
// mech := result [ i ] ;
33703: LD_ADDR_VAR 0 5
33707: PUSH
33708: LD_VAR 0 2
33712: PUSH
33713: LD_VAR 0 3
33717: ARRAY
33718: ST_TO_ADDR
// end ;
33719: GO 33628
33721: POP
33722: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33723: LD_VAR 0 1
33727: PPUSH
33728: LD_VAR 0 5
33732: PPUSH
33733: CALL_OW 135
// end ;
33737: LD_VAR 0 2
33741: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33742: LD_INT 0
33744: PPUSH
33745: PPUSH
33746: PPUSH
33747: PPUSH
33748: PPUSH
33749: PPUSH
33750: PPUSH
33751: PPUSH
33752: PPUSH
33753: PPUSH
33754: PPUSH
33755: PPUSH
33756: PPUSH
// result := [ ] ;
33757: LD_ADDR_VAR 0 7
33761: PUSH
33762: EMPTY
33763: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33764: LD_VAR 0 1
33768: PPUSH
33769: CALL_OW 266
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: IN
33784: NOT
33785: IFFALSE 33789
// exit ;
33787: GO 35423
// if name then
33789: LD_VAR 0 3
33793: IFFALSE 33809
// SetBName ( base_dep , name ) ;
33795: LD_VAR 0 1
33799: PPUSH
33800: LD_VAR 0 3
33804: PPUSH
33805: CALL_OW 500
// base := GetBase ( base_dep ) ;
33809: LD_ADDR_VAR 0 15
33813: PUSH
33814: LD_VAR 0 1
33818: PPUSH
33819: CALL_OW 274
33823: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33824: LD_ADDR_VAR 0 16
33828: PUSH
33829: LD_VAR 0 1
33833: PPUSH
33834: CALL_OW 255
33838: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33839: LD_ADDR_VAR 0 17
33843: PUSH
33844: LD_VAR 0 1
33848: PPUSH
33849: CALL_OW 248
33853: ST_TO_ADDR
// if sources then
33854: LD_VAR 0 5
33858: IFFALSE 33905
// for i = 1 to 3 do
33860: LD_ADDR_VAR 0 8
33864: PUSH
33865: DOUBLE
33866: LD_INT 1
33868: DEC
33869: ST_TO_ADDR
33870: LD_INT 3
33872: PUSH
33873: FOR_TO
33874: IFFALSE 33903
// AddResourceType ( base , i , sources [ i ] ) ;
33876: LD_VAR 0 15
33880: PPUSH
33881: LD_VAR 0 8
33885: PPUSH
33886: LD_VAR 0 5
33890: PUSH
33891: LD_VAR 0 8
33895: ARRAY
33896: PPUSH
33897: CALL_OW 276
33901: GO 33873
33903: POP
33904: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33905: LD_ADDR_VAR 0 18
33909: PUSH
33910: LD_VAR 0 15
33914: PPUSH
33915: LD_VAR 0 2
33919: PPUSH
33920: LD_INT 1
33922: PPUSH
33923: CALL 33166 0 3
33927: ST_TO_ADDR
// InitHc ;
33928: CALL_OW 19
// InitUc ;
33932: CALL_OW 18
// uc_side := side ;
33936: LD_ADDR_OWVAR 20
33940: PUSH
33941: LD_VAR 0 16
33945: ST_TO_ADDR
// uc_nation := nation ;
33946: LD_ADDR_OWVAR 21
33950: PUSH
33951: LD_VAR 0 17
33955: ST_TO_ADDR
// if buildings then
33956: LD_VAR 0 18
33960: IFFALSE 35282
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33962: LD_ADDR_VAR 0 19
33966: PUSH
33967: LD_VAR 0 18
33971: PPUSH
33972: LD_INT 2
33974: PUSH
33975: LD_INT 30
33977: PUSH
33978: LD_INT 29
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 30
33987: PUSH
33988: LD_INT 30
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: PPUSH
34000: CALL_OW 72
34004: ST_TO_ADDR
// if tmp then
34005: LD_VAR 0 19
34009: IFFALSE 34057
// for i in tmp do
34011: LD_ADDR_VAR 0 8
34015: PUSH
34016: LD_VAR 0 19
34020: PUSH
34021: FOR_IN
34022: IFFALSE 34055
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34024: LD_VAR 0 8
34028: PPUSH
34029: CALL_OW 250
34033: PPUSH
34034: LD_VAR 0 8
34038: PPUSH
34039: CALL_OW 251
34043: PPUSH
34044: LD_VAR 0 16
34048: PPUSH
34049: CALL_OW 441
34053: GO 34021
34055: POP
34056: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34057: LD_VAR 0 18
34061: PPUSH
34062: LD_INT 2
34064: PUSH
34065: LD_INT 30
34067: PUSH
34068: LD_INT 32
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 30
34077: PUSH
34078: LD_INT 33
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: PPUSH
34090: CALL_OW 72
34094: IFFALSE 34182
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34096: LD_ADDR_VAR 0 8
34100: PUSH
34101: LD_VAR 0 18
34105: PPUSH
34106: LD_INT 2
34108: PUSH
34109: LD_INT 30
34111: PUSH
34112: LD_INT 32
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 30
34121: PUSH
34122: LD_INT 33
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: LIST
34133: PPUSH
34134: CALL_OW 72
34138: PUSH
34139: FOR_IN
34140: IFFALSE 34180
// begin if not GetBWeapon ( i ) then
34142: LD_VAR 0 8
34146: PPUSH
34147: CALL_OW 269
34151: NOT
34152: IFFALSE 34178
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34154: LD_VAR 0 8
34158: PPUSH
34159: LD_VAR 0 8
34163: PPUSH
34164: LD_VAR 0 2
34168: PPUSH
34169: CALL 35428 0 2
34173: PPUSH
34174: CALL_OW 431
// end ;
34178: GO 34139
34180: POP
34181: POP
// end ; for i = 1 to personel do
34182: LD_ADDR_VAR 0 8
34186: PUSH
34187: DOUBLE
34188: LD_INT 1
34190: DEC
34191: ST_TO_ADDR
34192: LD_VAR 0 6
34196: PUSH
34197: FOR_TO
34198: IFFALSE 35262
// begin if i > 4 then
34200: LD_VAR 0 8
34204: PUSH
34205: LD_INT 4
34207: GREATER
34208: IFFALSE 34212
// break ;
34210: GO 35262
// case i of 1 :
34212: LD_VAR 0 8
34216: PUSH
34217: LD_INT 1
34219: DOUBLE
34220: EQUAL
34221: IFTRUE 34225
34223: GO 34305
34225: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34226: LD_ADDR_VAR 0 12
34230: PUSH
34231: LD_VAR 0 18
34235: PPUSH
34236: LD_INT 22
34238: PUSH
34239: LD_VAR 0 16
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 58
34250: PUSH
34251: EMPTY
34252: LIST
34253: PUSH
34254: LD_INT 2
34256: PUSH
34257: LD_INT 30
34259: PUSH
34260: LD_INT 32
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 30
34269: PUSH
34270: LD_INT 4
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 30
34279: PUSH
34280: LD_INT 5
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: PPUSH
34298: CALL_OW 72
34302: ST_TO_ADDR
34303: GO 34527
34305: LD_INT 2
34307: DOUBLE
34308: EQUAL
34309: IFTRUE 34313
34311: GO 34375
34313: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34314: LD_ADDR_VAR 0 12
34318: PUSH
34319: LD_VAR 0 18
34323: PPUSH
34324: LD_INT 22
34326: PUSH
34327: LD_VAR 0 16
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 2
34338: PUSH
34339: LD_INT 30
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 30
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: LIST
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PPUSH
34368: CALL_OW 72
34372: ST_TO_ADDR
34373: GO 34527
34375: LD_INT 3
34377: DOUBLE
34378: EQUAL
34379: IFTRUE 34383
34381: GO 34445
34383: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34384: LD_ADDR_VAR 0 12
34388: PUSH
34389: LD_VAR 0 18
34393: PPUSH
34394: LD_INT 22
34396: PUSH
34397: LD_VAR 0 16
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 2
34408: PUSH
34409: LD_INT 30
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 30
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: LIST
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PPUSH
34438: CALL_OW 72
34442: ST_TO_ADDR
34443: GO 34527
34445: LD_INT 4
34447: DOUBLE
34448: EQUAL
34449: IFTRUE 34453
34451: GO 34526
34453: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34454: LD_ADDR_VAR 0 12
34458: PUSH
34459: LD_VAR 0 18
34463: PPUSH
34464: LD_INT 22
34466: PUSH
34467: LD_VAR 0 16
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 2
34478: PUSH
34479: LD_INT 30
34481: PUSH
34482: LD_INT 6
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 30
34491: PUSH
34492: LD_INT 7
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 30
34501: PUSH
34502: LD_INT 8
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PPUSH
34519: CALL_OW 72
34523: ST_TO_ADDR
34524: GO 34527
34526: POP
// if i = 1 then
34527: LD_VAR 0 8
34531: PUSH
34532: LD_INT 1
34534: EQUAL
34535: IFFALSE 34646
// begin tmp := [ ] ;
34537: LD_ADDR_VAR 0 19
34541: PUSH
34542: EMPTY
34543: ST_TO_ADDR
// for j in f do
34544: LD_ADDR_VAR 0 9
34548: PUSH
34549: LD_VAR 0 12
34553: PUSH
34554: FOR_IN
34555: IFFALSE 34628
// if GetBType ( j ) = b_bunker then
34557: LD_VAR 0 9
34561: PPUSH
34562: CALL_OW 266
34566: PUSH
34567: LD_INT 32
34569: EQUAL
34570: IFFALSE 34597
// tmp := Insert ( tmp , 1 , j ) else
34572: LD_ADDR_VAR 0 19
34576: PUSH
34577: LD_VAR 0 19
34581: PPUSH
34582: LD_INT 1
34584: PPUSH
34585: LD_VAR 0 9
34589: PPUSH
34590: CALL_OW 2
34594: ST_TO_ADDR
34595: GO 34626
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34597: LD_ADDR_VAR 0 19
34601: PUSH
34602: LD_VAR 0 19
34606: PPUSH
34607: LD_VAR 0 19
34611: PUSH
34612: LD_INT 1
34614: PLUS
34615: PPUSH
34616: LD_VAR 0 9
34620: PPUSH
34621: CALL_OW 2
34625: ST_TO_ADDR
34626: GO 34554
34628: POP
34629: POP
// if tmp then
34630: LD_VAR 0 19
34634: IFFALSE 34646
// f := tmp ;
34636: LD_ADDR_VAR 0 12
34640: PUSH
34641: LD_VAR 0 19
34645: ST_TO_ADDR
// end ; x := personel [ i ] ;
34646: LD_ADDR_VAR 0 13
34650: PUSH
34651: LD_VAR 0 6
34655: PUSH
34656: LD_VAR 0 8
34660: ARRAY
34661: ST_TO_ADDR
// if x = - 1 then
34662: LD_VAR 0 13
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: EQUAL
34671: IFFALSE 34880
// begin for j in f do
34673: LD_ADDR_VAR 0 9
34677: PUSH
34678: LD_VAR 0 12
34682: PUSH
34683: FOR_IN
34684: IFFALSE 34876
// repeat InitHc ;
34686: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34690: LD_VAR 0 9
34694: PPUSH
34695: CALL_OW 266
34699: PUSH
34700: LD_INT 5
34702: EQUAL
34703: IFFALSE 34773
// begin if UnitsInside ( j ) < 3 then
34705: LD_VAR 0 9
34709: PPUSH
34710: CALL_OW 313
34714: PUSH
34715: LD_INT 3
34717: LESS
34718: IFFALSE 34754
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34720: LD_INT 0
34722: PPUSH
34723: LD_INT 5
34725: PUSH
34726: LD_INT 8
34728: PUSH
34729: LD_INT 9
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: PUSH
34737: LD_VAR 0 17
34741: ARRAY
34742: PPUSH
34743: LD_VAR 0 4
34747: PPUSH
34748: CALL_OW 380
34752: GO 34771
// PrepareHuman ( false , i , skill ) ;
34754: LD_INT 0
34756: PPUSH
34757: LD_VAR 0 8
34761: PPUSH
34762: LD_VAR 0 4
34766: PPUSH
34767: CALL_OW 380
// end else
34771: GO 34790
// PrepareHuman ( false , i , skill ) ;
34773: LD_INT 0
34775: PPUSH
34776: LD_VAR 0 8
34780: PPUSH
34781: LD_VAR 0 4
34785: PPUSH
34786: CALL_OW 380
// un := CreateHuman ;
34790: LD_ADDR_VAR 0 14
34794: PUSH
34795: CALL_OW 44
34799: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34800: LD_ADDR_VAR 0 7
34804: PUSH
34805: LD_VAR 0 7
34809: PPUSH
34810: LD_INT 1
34812: PPUSH
34813: LD_VAR 0 14
34817: PPUSH
34818: CALL_OW 2
34822: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34823: LD_VAR 0 14
34827: PPUSH
34828: LD_VAR 0 9
34832: PPUSH
34833: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34837: LD_VAR 0 9
34841: PPUSH
34842: CALL_OW 313
34846: PUSH
34847: LD_INT 6
34849: EQUAL
34850: PUSH
34851: LD_VAR 0 9
34855: PPUSH
34856: CALL_OW 266
34860: PUSH
34861: LD_INT 32
34863: PUSH
34864: LD_INT 31
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: IN
34871: OR
34872: IFFALSE 34686
34874: GO 34683
34876: POP
34877: POP
// end else
34878: GO 35260
// for j = 1 to x do
34880: LD_ADDR_VAR 0 9
34884: PUSH
34885: DOUBLE
34886: LD_INT 1
34888: DEC
34889: ST_TO_ADDR
34890: LD_VAR 0 13
34894: PUSH
34895: FOR_TO
34896: IFFALSE 35258
// begin InitHc ;
34898: CALL_OW 19
// if not f then
34902: LD_VAR 0 12
34906: NOT
34907: IFFALSE 34996
// begin PrepareHuman ( false , i , skill ) ;
34909: LD_INT 0
34911: PPUSH
34912: LD_VAR 0 8
34916: PPUSH
34917: LD_VAR 0 4
34921: PPUSH
34922: CALL_OW 380
// un := CreateHuman ;
34926: LD_ADDR_VAR 0 14
34930: PUSH
34931: CALL_OW 44
34935: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34936: LD_ADDR_VAR 0 7
34940: PUSH
34941: LD_VAR 0 7
34945: PPUSH
34946: LD_INT 1
34948: PPUSH
34949: LD_VAR 0 14
34953: PPUSH
34954: CALL_OW 2
34958: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34959: LD_VAR 0 14
34963: PPUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 250
34973: PPUSH
34974: LD_VAR 0 1
34978: PPUSH
34979: CALL_OW 251
34983: PPUSH
34984: LD_INT 10
34986: PPUSH
34987: LD_INT 0
34989: PPUSH
34990: CALL_OW 50
// continue ;
34994: GO 34895
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34996: LD_VAR 0 12
35000: PUSH
35001: LD_INT 1
35003: ARRAY
35004: PPUSH
35005: CALL_OW 313
35009: PUSH
35010: LD_VAR 0 12
35014: PUSH
35015: LD_INT 1
35017: ARRAY
35018: PPUSH
35019: CALL_OW 266
35023: PUSH
35024: LD_INT 32
35026: PUSH
35027: LD_INT 31
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: IN
35034: AND
35035: PUSH
35036: LD_VAR 0 12
35040: PUSH
35041: LD_INT 1
35043: ARRAY
35044: PPUSH
35045: CALL_OW 313
35049: PUSH
35050: LD_INT 6
35052: EQUAL
35053: OR
35054: IFFALSE 35074
// f := Delete ( f , 1 ) ;
35056: LD_ADDR_VAR 0 12
35060: PUSH
35061: LD_VAR 0 12
35065: PPUSH
35066: LD_INT 1
35068: PPUSH
35069: CALL_OW 3
35073: ST_TO_ADDR
// if not f then
35074: LD_VAR 0 12
35078: NOT
35079: IFFALSE 35097
// begin x := x + 2 ;
35081: LD_ADDR_VAR 0 13
35085: PUSH
35086: LD_VAR 0 13
35090: PUSH
35091: LD_INT 2
35093: PLUS
35094: ST_TO_ADDR
// continue ;
35095: GO 34895
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35097: LD_VAR 0 12
35101: PUSH
35102: LD_INT 1
35104: ARRAY
35105: PPUSH
35106: CALL_OW 266
35110: PUSH
35111: LD_INT 5
35113: EQUAL
35114: IFFALSE 35188
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35116: LD_VAR 0 12
35120: PUSH
35121: LD_INT 1
35123: ARRAY
35124: PPUSH
35125: CALL_OW 313
35129: PUSH
35130: LD_INT 3
35132: LESS
35133: IFFALSE 35169
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35135: LD_INT 0
35137: PPUSH
35138: LD_INT 5
35140: PUSH
35141: LD_INT 8
35143: PUSH
35144: LD_INT 9
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: LIST
35151: PUSH
35152: LD_VAR 0 17
35156: ARRAY
35157: PPUSH
35158: LD_VAR 0 4
35162: PPUSH
35163: CALL_OW 380
35167: GO 35186
// PrepareHuman ( false , i , skill ) ;
35169: LD_INT 0
35171: PPUSH
35172: LD_VAR 0 8
35176: PPUSH
35177: LD_VAR 0 4
35181: PPUSH
35182: CALL_OW 380
// end else
35186: GO 35205
// PrepareHuman ( false , i , skill ) ;
35188: LD_INT 0
35190: PPUSH
35191: LD_VAR 0 8
35195: PPUSH
35196: LD_VAR 0 4
35200: PPUSH
35201: CALL_OW 380
// un := CreateHuman ;
35205: LD_ADDR_VAR 0 14
35209: PUSH
35210: CALL_OW 44
35214: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35215: LD_ADDR_VAR 0 7
35219: PUSH
35220: LD_VAR 0 7
35224: PPUSH
35225: LD_INT 1
35227: PPUSH
35228: LD_VAR 0 14
35232: PPUSH
35233: CALL_OW 2
35237: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35238: LD_VAR 0 14
35242: PPUSH
35243: LD_VAR 0 12
35247: PUSH
35248: LD_INT 1
35250: ARRAY
35251: PPUSH
35252: CALL_OW 52
// end ;
35256: GO 34895
35258: POP
35259: POP
// end ;
35260: GO 34197
35262: POP
35263: POP
// result := result ^ buildings ;
35264: LD_ADDR_VAR 0 7
35268: PUSH
35269: LD_VAR 0 7
35273: PUSH
35274: LD_VAR 0 18
35278: ADD
35279: ST_TO_ADDR
// end else
35280: GO 35423
// begin for i = 1 to personel do
35282: LD_ADDR_VAR 0 8
35286: PUSH
35287: DOUBLE
35288: LD_INT 1
35290: DEC
35291: ST_TO_ADDR
35292: LD_VAR 0 6
35296: PUSH
35297: FOR_TO
35298: IFFALSE 35421
// begin if i > 4 then
35300: LD_VAR 0 8
35304: PUSH
35305: LD_INT 4
35307: GREATER
35308: IFFALSE 35312
// break ;
35310: GO 35421
// x := personel [ i ] ;
35312: LD_ADDR_VAR 0 13
35316: PUSH
35317: LD_VAR 0 6
35321: PUSH
35322: LD_VAR 0 8
35326: ARRAY
35327: ST_TO_ADDR
// if x = - 1 then
35328: LD_VAR 0 13
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: EQUAL
35337: IFFALSE 35341
// continue ;
35339: GO 35297
// PrepareHuman ( false , i , skill ) ;
35341: LD_INT 0
35343: PPUSH
35344: LD_VAR 0 8
35348: PPUSH
35349: LD_VAR 0 4
35353: PPUSH
35354: CALL_OW 380
// un := CreateHuman ;
35358: LD_ADDR_VAR 0 14
35362: PUSH
35363: CALL_OW 44
35367: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35368: LD_VAR 0 14
35372: PPUSH
35373: LD_VAR 0 1
35377: PPUSH
35378: CALL_OW 250
35382: PPUSH
35383: LD_VAR 0 1
35387: PPUSH
35388: CALL_OW 251
35392: PPUSH
35393: LD_INT 10
35395: PPUSH
35396: LD_INT 0
35398: PPUSH
35399: CALL_OW 50
// result := result ^ un ;
35403: LD_ADDR_VAR 0 7
35407: PUSH
35408: LD_VAR 0 7
35412: PUSH
35413: LD_VAR 0 14
35417: ADD
35418: ST_TO_ADDR
// end ;
35419: GO 35297
35421: POP
35422: POP
// end ; end ;
35423: LD_VAR 0 7
35427: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35428: LD_INT 0
35430: PPUSH
35431: PPUSH
35432: PPUSH
35433: PPUSH
35434: PPUSH
35435: PPUSH
35436: PPUSH
35437: PPUSH
35438: PPUSH
35439: PPUSH
35440: PPUSH
35441: PPUSH
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
// result := false ;
35446: LD_ADDR_VAR 0 3
35450: PUSH
35451: LD_INT 0
35453: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35454: LD_VAR 0 1
35458: NOT
35459: PUSH
35460: LD_VAR 0 1
35464: PPUSH
35465: CALL_OW 266
35469: PUSH
35470: LD_INT 32
35472: PUSH
35473: LD_INT 33
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: IN
35480: NOT
35481: OR
35482: IFFALSE 35486
// exit ;
35484: GO 36595
// nat := GetNation ( tower ) ;
35486: LD_ADDR_VAR 0 12
35490: PUSH
35491: LD_VAR 0 1
35495: PPUSH
35496: CALL_OW 248
35500: ST_TO_ADDR
// side := GetSide ( tower ) ;
35501: LD_ADDR_VAR 0 16
35505: PUSH
35506: LD_VAR 0 1
35510: PPUSH
35511: CALL_OW 255
35515: ST_TO_ADDR
// x := GetX ( tower ) ;
35516: LD_ADDR_VAR 0 10
35520: PUSH
35521: LD_VAR 0 1
35525: PPUSH
35526: CALL_OW 250
35530: ST_TO_ADDR
// y := GetY ( tower ) ;
35531: LD_ADDR_VAR 0 11
35535: PUSH
35536: LD_VAR 0 1
35540: PPUSH
35541: CALL_OW 251
35545: ST_TO_ADDR
// if not x or not y then
35546: LD_VAR 0 10
35550: NOT
35551: PUSH
35552: LD_VAR 0 11
35556: NOT
35557: OR
35558: IFFALSE 35562
// exit ;
35560: GO 36595
// weapon := 0 ;
35562: LD_ADDR_VAR 0 18
35566: PUSH
35567: LD_INT 0
35569: ST_TO_ADDR
// fac_list := [ ] ;
35570: LD_ADDR_VAR 0 17
35574: PUSH
35575: EMPTY
35576: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35577: LD_ADDR_VAR 0 6
35581: PUSH
35582: LD_VAR 0 1
35586: PPUSH
35587: CALL_OW 274
35591: PPUSH
35592: LD_VAR 0 2
35596: PPUSH
35597: LD_INT 0
35599: PPUSH
35600: CALL 33166 0 3
35604: PPUSH
35605: LD_INT 30
35607: PUSH
35608: LD_INT 3
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PPUSH
35615: CALL_OW 72
35619: ST_TO_ADDR
// if not factories then
35620: LD_VAR 0 6
35624: NOT
35625: IFFALSE 35629
// exit ;
35627: GO 36595
// for i in factories do
35629: LD_ADDR_VAR 0 8
35633: PUSH
35634: LD_VAR 0 6
35638: PUSH
35639: FOR_IN
35640: IFFALSE 35665
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35642: LD_ADDR_VAR 0 17
35646: PUSH
35647: LD_VAR 0 17
35651: PUSH
35652: LD_VAR 0 8
35656: PPUSH
35657: CALL_OW 478
35661: UNION
35662: ST_TO_ADDR
35663: GO 35639
35665: POP
35666: POP
// if not fac_list then
35667: LD_VAR 0 17
35671: NOT
35672: IFFALSE 35676
// exit ;
35674: GO 36595
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35676: LD_ADDR_VAR 0 5
35680: PUSH
35681: LD_INT 4
35683: PUSH
35684: LD_INT 5
35686: PUSH
35687: LD_INT 9
35689: PUSH
35690: LD_INT 10
35692: PUSH
35693: LD_INT 6
35695: PUSH
35696: LD_INT 7
35698: PUSH
35699: LD_INT 11
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 27
35713: PUSH
35714: LD_INT 28
35716: PUSH
35717: LD_INT 26
35719: PUSH
35720: LD_INT 30
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 43
35731: PUSH
35732: LD_INT 44
35734: PUSH
35735: LD_INT 46
35737: PUSH
35738: LD_INT 45
35740: PUSH
35741: LD_INT 47
35743: PUSH
35744: LD_INT 49
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: PUSH
35760: LD_VAR 0 12
35764: ARRAY
35765: ST_TO_ADDR
// list := list isect fac_list ;
35766: LD_ADDR_VAR 0 5
35770: PUSH
35771: LD_VAR 0 5
35775: PUSH
35776: LD_VAR 0 17
35780: ISECT
35781: ST_TO_ADDR
// if not list then
35782: LD_VAR 0 5
35786: NOT
35787: IFFALSE 35791
// exit ;
35789: GO 36595
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35791: LD_VAR 0 12
35795: PUSH
35796: LD_INT 3
35798: EQUAL
35799: PUSH
35800: LD_INT 49
35802: PUSH
35803: LD_VAR 0 5
35807: IN
35808: AND
35809: PUSH
35810: LD_INT 31
35812: PPUSH
35813: LD_VAR 0 16
35817: PPUSH
35818: CALL_OW 321
35822: PUSH
35823: LD_INT 2
35825: EQUAL
35826: AND
35827: IFFALSE 35887
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35829: LD_INT 22
35831: PUSH
35832: LD_VAR 0 16
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 35
35843: PUSH
35844: LD_INT 49
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 91
35853: PUSH
35854: LD_VAR 0 1
35858: PUSH
35859: LD_INT 10
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: LIST
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: PPUSH
35872: CALL_OW 69
35876: NOT
35877: IFFALSE 35887
// weapon := ru_time_lapser ;
35879: LD_ADDR_VAR 0 18
35883: PUSH
35884: LD_INT 49
35886: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35887: LD_VAR 0 12
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 2
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: IN
35902: PUSH
35903: LD_INT 11
35905: PUSH
35906: LD_VAR 0 5
35910: IN
35911: PUSH
35912: LD_INT 30
35914: PUSH
35915: LD_VAR 0 5
35919: IN
35920: OR
35921: AND
35922: PUSH
35923: LD_INT 6
35925: PPUSH
35926: LD_VAR 0 16
35930: PPUSH
35931: CALL_OW 321
35935: PUSH
35936: LD_INT 2
35938: EQUAL
35939: AND
35940: IFFALSE 36105
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35942: LD_INT 22
35944: PUSH
35945: LD_VAR 0 16
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 2
35956: PUSH
35957: LD_INT 35
35959: PUSH
35960: LD_INT 11
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 35
35969: PUSH
35970: LD_INT 30
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 91
35984: PUSH
35985: LD_VAR 0 1
35989: PUSH
35990: LD_INT 18
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: PPUSH
36003: CALL_OW 69
36007: NOT
36008: PUSH
36009: LD_INT 22
36011: PUSH
36012: LD_VAR 0 16
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 2
36023: PUSH
36024: LD_INT 30
36026: PUSH
36027: LD_INT 32
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 30
36036: PUSH
36037: LD_INT 33
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 91
36051: PUSH
36052: LD_VAR 0 1
36056: PUSH
36057: LD_INT 12
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: LIST
36069: PUSH
36070: EMPTY
36071: LIST
36072: PPUSH
36073: CALL_OW 69
36077: PUSH
36078: LD_INT 2
36080: GREATER
36081: AND
36082: IFFALSE 36105
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36084: LD_ADDR_VAR 0 18
36088: PUSH
36089: LD_INT 11
36091: PUSH
36092: LD_INT 30
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_VAR 0 12
36103: ARRAY
36104: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36105: LD_VAR 0 18
36109: NOT
36110: PUSH
36111: LD_INT 40
36113: PPUSH
36114: LD_VAR 0 16
36118: PPUSH
36119: CALL_OW 321
36123: PUSH
36124: LD_INT 2
36126: EQUAL
36127: AND
36128: PUSH
36129: LD_INT 7
36131: PUSH
36132: LD_VAR 0 5
36136: IN
36137: PUSH
36138: LD_INT 28
36140: PUSH
36141: LD_VAR 0 5
36145: IN
36146: OR
36147: PUSH
36148: LD_INT 45
36150: PUSH
36151: LD_VAR 0 5
36155: IN
36156: OR
36157: AND
36158: IFFALSE 36412
// begin hex := GetHexInfo ( x , y ) ;
36160: LD_ADDR_VAR 0 4
36164: PUSH
36165: LD_VAR 0 10
36169: PPUSH
36170: LD_VAR 0 11
36174: PPUSH
36175: CALL_OW 546
36179: ST_TO_ADDR
// if hex [ 1 ] then
36180: LD_VAR 0 4
36184: PUSH
36185: LD_INT 1
36187: ARRAY
36188: IFFALSE 36192
// exit ;
36190: GO 36595
// height := hex [ 2 ] ;
36192: LD_ADDR_VAR 0 15
36196: PUSH
36197: LD_VAR 0 4
36201: PUSH
36202: LD_INT 2
36204: ARRAY
36205: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36206: LD_ADDR_VAR 0 14
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: LD_INT 3
36219: PUSH
36220: LD_INT 5
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: ST_TO_ADDR
// for i in tmp do
36229: LD_ADDR_VAR 0 8
36233: PUSH
36234: LD_VAR 0 14
36238: PUSH
36239: FOR_IN
36240: IFFALSE 36410
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36242: LD_ADDR_VAR 0 9
36246: PUSH
36247: LD_VAR 0 10
36251: PPUSH
36252: LD_VAR 0 8
36256: PPUSH
36257: LD_INT 5
36259: PPUSH
36260: CALL_OW 272
36264: PUSH
36265: LD_VAR 0 11
36269: PPUSH
36270: LD_VAR 0 8
36274: PPUSH
36275: LD_INT 5
36277: PPUSH
36278: CALL_OW 273
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36287: LD_VAR 0 9
36291: PUSH
36292: LD_INT 1
36294: ARRAY
36295: PPUSH
36296: LD_VAR 0 9
36300: PUSH
36301: LD_INT 2
36303: ARRAY
36304: PPUSH
36305: CALL_OW 488
36309: IFFALSE 36408
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36311: LD_ADDR_VAR 0 4
36315: PUSH
36316: LD_VAR 0 9
36320: PUSH
36321: LD_INT 1
36323: ARRAY
36324: PPUSH
36325: LD_VAR 0 9
36329: PUSH
36330: LD_INT 2
36332: ARRAY
36333: PPUSH
36334: CALL_OW 546
36338: ST_TO_ADDR
// if hex [ 1 ] then
36339: LD_VAR 0 4
36343: PUSH
36344: LD_INT 1
36346: ARRAY
36347: IFFALSE 36351
// continue ;
36349: GO 36239
// h := hex [ 2 ] ;
36351: LD_ADDR_VAR 0 13
36355: PUSH
36356: LD_VAR 0 4
36360: PUSH
36361: LD_INT 2
36363: ARRAY
36364: ST_TO_ADDR
// if h + 7 < height then
36365: LD_VAR 0 13
36369: PUSH
36370: LD_INT 7
36372: PLUS
36373: PUSH
36374: LD_VAR 0 15
36378: LESS
36379: IFFALSE 36408
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36381: LD_ADDR_VAR 0 18
36385: PUSH
36386: LD_INT 7
36388: PUSH
36389: LD_INT 28
36391: PUSH
36392: LD_INT 45
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: PUSH
36400: LD_VAR 0 12
36404: ARRAY
36405: ST_TO_ADDR
// break ;
36406: GO 36410
// end ; end ; end ;
36408: GO 36239
36410: POP
36411: POP
// end ; if not weapon then
36412: LD_VAR 0 18
36416: NOT
36417: IFFALSE 36477
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36419: LD_ADDR_VAR 0 5
36423: PUSH
36424: LD_VAR 0 5
36428: PUSH
36429: LD_INT 11
36431: PUSH
36432: LD_INT 30
36434: PUSH
36435: LD_INT 49
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: LIST
36442: DIFF
36443: ST_TO_ADDR
// if not list then
36444: LD_VAR 0 5
36448: NOT
36449: IFFALSE 36453
// exit ;
36451: GO 36595
// weapon := list [ rand ( 1 , list ) ] ;
36453: LD_ADDR_VAR 0 18
36457: PUSH
36458: LD_VAR 0 5
36462: PUSH
36463: LD_INT 1
36465: PPUSH
36466: LD_VAR 0 5
36470: PPUSH
36471: CALL_OW 12
36475: ARRAY
36476: ST_TO_ADDR
// end ; if weapon then
36477: LD_VAR 0 18
36481: IFFALSE 36595
// begin tmp := CostOfWeapon ( weapon ) ;
36483: LD_ADDR_VAR 0 14
36487: PUSH
36488: LD_VAR 0 18
36492: PPUSH
36493: CALL_OW 451
36497: ST_TO_ADDR
// j := GetBase ( tower ) ;
36498: LD_ADDR_VAR 0 9
36502: PUSH
36503: LD_VAR 0 1
36507: PPUSH
36508: CALL_OW 274
36512: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36513: LD_VAR 0 9
36517: PPUSH
36518: LD_INT 1
36520: PPUSH
36521: CALL_OW 275
36525: PUSH
36526: LD_VAR 0 14
36530: PUSH
36531: LD_INT 1
36533: ARRAY
36534: GREATEREQUAL
36535: PUSH
36536: LD_VAR 0 9
36540: PPUSH
36541: LD_INT 2
36543: PPUSH
36544: CALL_OW 275
36548: PUSH
36549: LD_VAR 0 14
36553: PUSH
36554: LD_INT 2
36556: ARRAY
36557: GREATEREQUAL
36558: AND
36559: PUSH
36560: LD_VAR 0 9
36564: PPUSH
36565: LD_INT 3
36567: PPUSH
36568: CALL_OW 275
36572: PUSH
36573: LD_VAR 0 14
36577: PUSH
36578: LD_INT 3
36580: ARRAY
36581: GREATEREQUAL
36582: AND
36583: IFFALSE 36595
// result := weapon ;
36585: LD_ADDR_VAR 0 3
36589: PUSH
36590: LD_VAR 0 18
36594: ST_TO_ADDR
// end ; end ;
36595: LD_VAR 0 3
36599: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36600: LD_INT 0
36602: PPUSH
36603: PPUSH
// result := true ;
36604: LD_ADDR_VAR 0 3
36608: PUSH
36609: LD_INT 1
36611: ST_TO_ADDR
// if array1 = array2 then
36612: LD_VAR 0 1
36616: PUSH
36617: LD_VAR 0 2
36621: EQUAL
36622: IFFALSE 36682
// begin for i = 1 to array1 do
36624: LD_ADDR_VAR 0 4
36628: PUSH
36629: DOUBLE
36630: LD_INT 1
36632: DEC
36633: ST_TO_ADDR
36634: LD_VAR 0 1
36638: PUSH
36639: FOR_TO
36640: IFFALSE 36678
// if array1 [ i ] <> array2 [ i ] then
36642: LD_VAR 0 1
36646: PUSH
36647: LD_VAR 0 4
36651: ARRAY
36652: PUSH
36653: LD_VAR 0 2
36657: PUSH
36658: LD_VAR 0 4
36662: ARRAY
36663: NONEQUAL
36664: IFFALSE 36676
// begin result := false ;
36666: LD_ADDR_VAR 0 3
36670: PUSH
36671: LD_INT 0
36673: ST_TO_ADDR
// break ;
36674: GO 36678
// end ;
36676: GO 36639
36678: POP
36679: POP
// end else
36680: GO 36690
// result := false ;
36682: LD_ADDR_VAR 0 3
36686: PUSH
36687: LD_INT 0
36689: ST_TO_ADDR
// end ;
36690: LD_VAR 0 3
36694: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36695: LD_INT 0
36697: PPUSH
36698: PPUSH
// if not array1 or not array2 then
36699: LD_VAR 0 1
36703: NOT
36704: PUSH
36705: LD_VAR 0 2
36709: NOT
36710: OR
36711: IFFALSE 36715
// exit ;
36713: GO 36779
// result := true ;
36715: LD_ADDR_VAR 0 3
36719: PUSH
36720: LD_INT 1
36722: ST_TO_ADDR
// for i = 1 to array1 do
36723: LD_ADDR_VAR 0 4
36727: PUSH
36728: DOUBLE
36729: LD_INT 1
36731: DEC
36732: ST_TO_ADDR
36733: LD_VAR 0 1
36737: PUSH
36738: FOR_TO
36739: IFFALSE 36777
// if array1 [ i ] <> array2 [ i ] then
36741: LD_VAR 0 1
36745: PUSH
36746: LD_VAR 0 4
36750: ARRAY
36751: PUSH
36752: LD_VAR 0 2
36756: PUSH
36757: LD_VAR 0 4
36761: ARRAY
36762: NONEQUAL
36763: IFFALSE 36775
// begin result := false ;
36765: LD_ADDR_VAR 0 3
36769: PUSH
36770: LD_INT 0
36772: ST_TO_ADDR
// break ;
36773: GO 36777
// end ;
36775: GO 36738
36777: POP
36778: POP
// end ;
36779: LD_VAR 0 3
36783: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36784: LD_INT 0
36786: PPUSH
36787: PPUSH
36788: PPUSH
// pom := GetBase ( fac ) ;
36789: LD_ADDR_VAR 0 5
36793: PUSH
36794: LD_VAR 0 1
36798: PPUSH
36799: CALL_OW 274
36803: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36804: LD_ADDR_VAR 0 4
36808: PUSH
36809: LD_VAR 0 2
36813: PUSH
36814: LD_INT 1
36816: ARRAY
36817: PPUSH
36818: LD_VAR 0 2
36822: PUSH
36823: LD_INT 2
36825: ARRAY
36826: PPUSH
36827: LD_VAR 0 2
36831: PUSH
36832: LD_INT 3
36834: ARRAY
36835: PPUSH
36836: LD_VAR 0 2
36840: PUSH
36841: LD_INT 4
36843: ARRAY
36844: PPUSH
36845: CALL_OW 449
36849: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36850: LD_ADDR_VAR 0 3
36854: PUSH
36855: LD_VAR 0 5
36859: PPUSH
36860: LD_INT 1
36862: PPUSH
36863: CALL_OW 275
36867: PUSH
36868: LD_VAR 0 4
36872: PUSH
36873: LD_INT 1
36875: ARRAY
36876: GREATEREQUAL
36877: PUSH
36878: LD_VAR 0 5
36882: PPUSH
36883: LD_INT 2
36885: PPUSH
36886: CALL_OW 275
36890: PUSH
36891: LD_VAR 0 4
36895: PUSH
36896: LD_INT 2
36898: ARRAY
36899: GREATEREQUAL
36900: AND
36901: PUSH
36902: LD_VAR 0 5
36906: PPUSH
36907: LD_INT 3
36909: PPUSH
36910: CALL_OW 275
36914: PUSH
36915: LD_VAR 0 4
36919: PUSH
36920: LD_INT 3
36922: ARRAY
36923: GREATEREQUAL
36924: AND
36925: ST_TO_ADDR
// end ;
36926: LD_VAR 0 3
36930: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36931: LD_INT 0
36933: PPUSH
36934: PPUSH
36935: PPUSH
36936: PPUSH
// pom := GetBase ( building ) ;
36937: LD_ADDR_VAR 0 3
36941: PUSH
36942: LD_VAR 0 1
36946: PPUSH
36947: CALL_OW 274
36951: ST_TO_ADDR
// if not pom then
36952: LD_VAR 0 3
36956: NOT
36957: IFFALSE 36961
// exit ;
36959: GO 37131
// btype := GetBType ( building ) ;
36961: LD_ADDR_VAR 0 5
36965: PUSH
36966: LD_VAR 0 1
36970: PPUSH
36971: CALL_OW 266
36975: ST_TO_ADDR
// if btype = b_armoury then
36976: LD_VAR 0 5
36980: PUSH
36981: LD_INT 4
36983: EQUAL
36984: IFFALSE 36994
// btype := b_barracks ;
36986: LD_ADDR_VAR 0 5
36990: PUSH
36991: LD_INT 5
36993: ST_TO_ADDR
// if btype = b_depot then
36994: LD_VAR 0 5
36998: PUSH
36999: LD_INT 0
37001: EQUAL
37002: IFFALSE 37012
// btype := b_warehouse ;
37004: LD_ADDR_VAR 0 5
37008: PUSH
37009: LD_INT 1
37011: ST_TO_ADDR
// if btype = b_workshop then
37012: LD_VAR 0 5
37016: PUSH
37017: LD_INT 2
37019: EQUAL
37020: IFFALSE 37030
// btype := b_factory ;
37022: LD_ADDR_VAR 0 5
37026: PUSH
37027: LD_INT 3
37029: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37030: LD_ADDR_VAR 0 4
37034: PUSH
37035: LD_VAR 0 5
37039: PPUSH
37040: LD_VAR 0 1
37044: PPUSH
37045: CALL_OW 248
37049: PPUSH
37050: CALL_OW 450
37054: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37055: LD_ADDR_VAR 0 2
37059: PUSH
37060: LD_VAR 0 3
37064: PPUSH
37065: LD_INT 1
37067: PPUSH
37068: CALL_OW 275
37072: PUSH
37073: LD_VAR 0 4
37077: PUSH
37078: LD_INT 1
37080: ARRAY
37081: GREATEREQUAL
37082: PUSH
37083: LD_VAR 0 3
37087: PPUSH
37088: LD_INT 2
37090: PPUSH
37091: CALL_OW 275
37095: PUSH
37096: LD_VAR 0 4
37100: PUSH
37101: LD_INT 2
37103: ARRAY
37104: GREATEREQUAL
37105: AND
37106: PUSH
37107: LD_VAR 0 3
37111: PPUSH
37112: LD_INT 3
37114: PPUSH
37115: CALL_OW 275
37119: PUSH
37120: LD_VAR 0 4
37124: PUSH
37125: LD_INT 3
37127: ARRAY
37128: GREATEREQUAL
37129: AND
37130: ST_TO_ADDR
// end ;
37131: LD_VAR 0 2
37135: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37136: LD_INT 0
37138: PPUSH
37139: PPUSH
37140: PPUSH
// pom := GetBase ( building ) ;
37141: LD_ADDR_VAR 0 4
37145: PUSH
37146: LD_VAR 0 1
37150: PPUSH
37151: CALL_OW 274
37155: ST_TO_ADDR
// if not pom then
37156: LD_VAR 0 4
37160: NOT
37161: IFFALSE 37165
// exit ;
37163: GO 37266
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37165: LD_ADDR_VAR 0 5
37169: PUSH
37170: LD_VAR 0 2
37174: PPUSH
37175: LD_VAR 0 1
37179: PPUSH
37180: CALL_OW 248
37184: PPUSH
37185: CALL_OW 450
37189: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37190: LD_ADDR_VAR 0 3
37194: PUSH
37195: LD_VAR 0 4
37199: PPUSH
37200: LD_INT 1
37202: PPUSH
37203: CALL_OW 275
37207: PUSH
37208: LD_VAR 0 5
37212: PUSH
37213: LD_INT 1
37215: ARRAY
37216: GREATEREQUAL
37217: PUSH
37218: LD_VAR 0 4
37222: PPUSH
37223: LD_INT 2
37225: PPUSH
37226: CALL_OW 275
37230: PUSH
37231: LD_VAR 0 5
37235: PUSH
37236: LD_INT 2
37238: ARRAY
37239: GREATEREQUAL
37240: AND
37241: PUSH
37242: LD_VAR 0 4
37246: PPUSH
37247: LD_INT 3
37249: PPUSH
37250: CALL_OW 275
37254: PUSH
37255: LD_VAR 0 5
37259: PUSH
37260: LD_INT 3
37262: ARRAY
37263: GREATEREQUAL
37264: AND
37265: ST_TO_ADDR
// end ;
37266: LD_VAR 0 3
37270: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37271: LD_INT 0
37273: PPUSH
37274: PPUSH
37275: PPUSH
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
37281: PPUSH
37282: PPUSH
37283: PPUSH
// result := false ;
37284: LD_ADDR_VAR 0 8
37288: PUSH
37289: LD_INT 0
37291: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37292: LD_VAR 0 5
37296: NOT
37297: PUSH
37298: LD_VAR 0 1
37302: NOT
37303: OR
37304: PUSH
37305: LD_VAR 0 2
37309: NOT
37310: OR
37311: PUSH
37312: LD_VAR 0 3
37316: NOT
37317: OR
37318: IFFALSE 37322
// exit ;
37320: GO 38136
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37322: LD_ADDR_VAR 0 14
37326: PUSH
37327: LD_VAR 0 1
37331: PPUSH
37332: LD_VAR 0 2
37336: PPUSH
37337: LD_VAR 0 3
37341: PPUSH
37342: LD_VAR 0 4
37346: PPUSH
37347: LD_VAR 0 5
37351: PUSH
37352: LD_INT 1
37354: ARRAY
37355: PPUSH
37356: CALL_OW 248
37360: PPUSH
37361: LD_INT 0
37363: PPUSH
37364: CALL 39369 0 6
37368: ST_TO_ADDR
// if not hexes then
37369: LD_VAR 0 14
37373: NOT
37374: IFFALSE 37378
// exit ;
37376: GO 38136
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37378: LD_ADDR_VAR 0 17
37382: PUSH
37383: LD_VAR 0 5
37387: PPUSH
37388: LD_INT 22
37390: PUSH
37391: LD_VAR 0 13
37395: PPUSH
37396: CALL_OW 255
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: PUSH
37408: LD_INT 30
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 30
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PPUSH
37437: CALL_OW 72
37441: ST_TO_ADDR
// for i = 1 to hexes do
37442: LD_ADDR_VAR 0 9
37446: PUSH
37447: DOUBLE
37448: LD_INT 1
37450: DEC
37451: ST_TO_ADDR
37452: LD_VAR 0 14
37456: PUSH
37457: FOR_TO
37458: IFFALSE 38134
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37460: LD_ADDR_VAR 0 13
37464: PUSH
37465: LD_VAR 0 14
37469: PUSH
37470: LD_VAR 0 9
37474: ARRAY
37475: PUSH
37476: LD_INT 1
37478: ARRAY
37479: PPUSH
37480: LD_VAR 0 14
37484: PUSH
37485: LD_VAR 0 9
37489: ARRAY
37490: PUSH
37491: LD_INT 2
37493: ARRAY
37494: PPUSH
37495: CALL_OW 428
37499: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37500: LD_VAR 0 14
37504: PUSH
37505: LD_VAR 0 9
37509: ARRAY
37510: PUSH
37511: LD_INT 1
37513: ARRAY
37514: PPUSH
37515: LD_VAR 0 14
37519: PUSH
37520: LD_VAR 0 9
37524: ARRAY
37525: PUSH
37526: LD_INT 2
37528: ARRAY
37529: PPUSH
37530: CALL_OW 351
37534: PUSH
37535: LD_VAR 0 14
37539: PUSH
37540: LD_VAR 0 9
37544: ARRAY
37545: PUSH
37546: LD_INT 1
37548: ARRAY
37549: PPUSH
37550: LD_VAR 0 14
37554: PUSH
37555: LD_VAR 0 9
37559: ARRAY
37560: PUSH
37561: LD_INT 2
37563: ARRAY
37564: PPUSH
37565: CALL_OW 488
37569: NOT
37570: OR
37571: PUSH
37572: LD_VAR 0 13
37576: PPUSH
37577: CALL_OW 247
37581: PUSH
37582: LD_INT 3
37584: EQUAL
37585: OR
37586: IFFALSE 37592
// exit ;
37588: POP
37589: POP
37590: GO 38136
// if not tmp then
37592: LD_VAR 0 13
37596: NOT
37597: IFFALSE 37601
// continue ;
37599: GO 37457
// result := true ;
37601: LD_ADDR_VAR 0 8
37605: PUSH
37606: LD_INT 1
37608: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37609: LD_VAR 0 6
37613: PUSH
37614: LD_VAR 0 13
37618: PPUSH
37619: CALL_OW 247
37623: PUSH
37624: LD_INT 2
37626: EQUAL
37627: AND
37628: PUSH
37629: LD_VAR 0 13
37633: PPUSH
37634: CALL_OW 263
37638: PUSH
37639: LD_INT 1
37641: EQUAL
37642: AND
37643: IFFALSE 37807
// begin if IsDrivenBy ( tmp ) then
37645: LD_VAR 0 13
37649: PPUSH
37650: CALL_OW 311
37654: IFFALSE 37658
// continue ;
37656: GO 37457
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37658: LD_VAR 0 6
37662: PPUSH
37663: LD_INT 3
37665: PUSH
37666: LD_INT 60
37668: PUSH
37669: EMPTY
37670: LIST
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 3
37678: PUSH
37679: LD_INT 55
37681: PUSH
37682: EMPTY
37683: LIST
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PPUSH
37693: CALL_OW 72
37697: IFFALSE 37805
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37699: LD_ADDR_VAR 0 18
37703: PUSH
37704: LD_VAR 0 6
37708: PPUSH
37709: LD_INT 3
37711: PUSH
37712: LD_INT 60
37714: PUSH
37715: EMPTY
37716: LIST
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 3
37724: PUSH
37725: LD_INT 55
37727: PUSH
37728: EMPTY
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PPUSH
37739: CALL_OW 72
37743: PUSH
37744: LD_INT 1
37746: ARRAY
37747: ST_TO_ADDR
// if IsInUnit ( driver ) then
37748: LD_VAR 0 18
37752: PPUSH
37753: CALL_OW 310
37757: IFFALSE 37768
// ComExit ( driver ) ;
37759: LD_VAR 0 18
37763: PPUSH
37764: CALL 63057 0 1
// AddComEnterUnit ( driver , tmp ) ;
37768: LD_VAR 0 18
37772: PPUSH
37773: LD_VAR 0 13
37777: PPUSH
37778: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37782: LD_VAR 0 18
37786: PPUSH
37787: LD_VAR 0 7
37791: PPUSH
37792: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37796: LD_VAR 0 18
37800: PPUSH
37801: CALL_OW 181
// end ; continue ;
37805: GO 37457
// end ; if not cleaners or not tmp in cleaners then
37807: LD_VAR 0 6
37811: NOT
37812: PUSH
37813: LD_VAR 0 13
37817: PUSH
37818: LD_VAR 0 6
37822: IN
37823: NOT
37824: OR
37825: IFFALSE 38132
// begin if dep then
37827: LD_VAR 0 17
37831: IFFALSE 37967
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37833: LD_ADDR_VAR 0 16
37837: PUSH
37838: LD_VAR 0 17
37842: PUSH
37843: LD_INT 1
37845: ARRAY
37846: PPUSH
37847: CALL_OW 250
37851: PPUSH
37852: LD_VAR 0 17
37856: PUSH
37857: LD_INT 1
37859: ARRAY
37860: PPUSH
37861: CALL_OW 254
37865: PPUSH
37866: LD_INT 5
37868: PPUSH
37869: CALL_OW 272
37873: PUSH
37874: LD_VAR 0 17
37878: PUSH
37879: LD_INT 1
37881: ARRAY
37882: PPUSH
37883: CALL_OW 251
37887: PPUSH
37888: LD_VAR 0 17
37892: PUSH
37893: LD_INT 1
37895: ARRAY
37896: PPUSH
37897: CALL_OW 254
37901: PPUSH
37902: LD_INT 5
37904: PPUSH
37905: CALL_OW 273
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37914: LD_VAR 0 16
37918: PUSH
37919: LD_INT 1
37921: ARRAY
37922: PPUSH
37923: LD_VAR 0 16
37927: PUSH
37928: LD_INT 2
37930: ARRAY
37931: PPUSH
37932: CALL_OW 488
37936: IFFALSE 37967
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37938: LD_VAR 0 13
37942: PPUSH
37943: LD_VAR 0 16
37947: PUSH
37948: LD_INT 1
37950: ARRAY
37951: PPUSH
37952: LD_VAR 0 16
37956: PUSH
37957: LD_INT 2
37959: ARRAY
37960: PPUSH
37961: CALL_OW 111
// continue ;
37965: GO 37457
// end ; end ; r := GetDir ( tmp ) ;
37967: LD_ADDR_VAR 0 15
37971: PUSH
37972: LD_VAR 0 13
37976: PPUSH
37977: CALL_OW 254
37981: ST_TO_ADDR
// if r = 5 then
37982: LD_VAR 0 15
37986: PUSH
37987: LD_INT 5
37989: EQUAL
37990: IFFALSE 38000
// r := 0 ;
37992: LD_ADDR_VAR 0 15
37996: PUSH
37997: LD_INT 0
37999: ST_TO_ADDR
// for j = r to 5 do
38000: LD_ADDR_VAR 0 10
38004: PUSH
38005: DOUBLE
38006: LD_VAR 0 15
38010: DEC
38011: ST_TO_ADDR
38012: LD_INT 5
38014: PUSH
38015: FOR_TO
38016: IFFALSE 38130
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38018: LD_ADDR_VAR 0 11
38022: PUSH
38023: LD_VAR 0 13
38027: PPUSH
38028: CALL_OW 250
38032: PPUSH
38033: LD_VAR 0 10
38037: PPUSH
38038: LD_INT 2
38040: PPUSH
38041: CALL_OW 272
38045: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38046: LD_ADDR_VAR 0 12
38050: PUSH
38051: LD_VAR 0 13
38055: PPUSH
38056: CALL_OW 251
38060: PPUSH
38061: LD_VAR 0 10
38065: PPUSH
38066: LD_INT 2
38068: PPUSH
38069: CALL_OW 273
38073: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38074: LD_VAR 0 11
38078: PPUSH
38079: LD_VAR 0 12
38083: PPUSH
38084: CALL_OW 488
38088: PUSH
38089: LD_VAR 0 11
38093: PPUSH
38094: LD_VAR 0 12
38098: PPUSH
38099: CALL_OW 428
38103: NOT
38104: AND
38105: IFFALSE 38128
// begin ComMoveXY ( tmp , _x , _y ) ;
38107: LD_VAR 0 13
38111: PPUSH
38112: LD_VAR 0 11
38116: PPUSH
38117: LD_VAR 0 12
38121: PPUSH
38122: CALL_OW 111
// break ;
38126: GO 38130
// end ; end ;
38128: GO 38015
38130: POP
38131: POP
// end ; end ;
38132: GO 37457
38134: POP
38135: POP
// end ;
38136: LD_VAR 0 8
38140: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38141: LD_INT 0
38143: PPUSH
// result := true ;
38144: LD_ADDR_VAR 0 3
38148: PUSH
38149: LD_INT 1
38151: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38152: LD_VAR 0 2
38156: PUSH
38157: LD_INT 24
38159: DOUBLE
38160: EQUAL
38161: IFTRUE 38171
38163: LD_INT 33
38165: DOUBLE
38166: EQUAL
38167: IFTRUE 38171
38169: GO 38196
38171: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38172: LD_ADDR_VAR 0 3
38176: PUSH
38177: LD_INT 32
38179: PPUSH
38180: LD_VAR 0 1
38184: PPUSH
38185: CALL_OW 321
38189: PUSH
38190: LD_INT 2
38192: EQUAL
38193: ST_TO_ADDR
38194: GO 38512
38196: LD_INT 20
38198: DOUBLE
38199: EQUAL
38200: IFTRUE 38204
38202: GO 38229
38204: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38205: LD_ADDR_VAR 0 3
38209: PUSH
38210: LD_INT 6
38212: PPUSH
38213: LD_VAR 0 1
38217: PPUSH
38218: CALL_OW 321
38222: PUSH
38223: LD_INT 2
38225: EQUAL
38226: ST_TO_ADDR
38227: GO 38512
38229: LD_INT 22
38231: DOUBLE
38232: EQUAL
38233: IFTRUE 38243
38235: LD_INT 36
38237: DOUBLE
38238: EQUAL
38239: IFTRUE 38243
38241: GO 38268
38243: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38244: LD_ADDR_VAR 0 3
38248: PUSH
38249: LD_INT 15
38251: PPUSH
38252: LD_VAR 0 1
38256: PPUSH
38257: CALL_OW 321
38261: PUSH
38262: LD_INT 2
38264: EQUAL
38265: ST_TO_ADDR
38266: GO 38512
38268: LD_INT 30
38270: DOUBLE
38271: EQUAL
38272: IFTRUE 38276
38274: GO 38301
38276: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38277: LD_ADDR_VAR 0 3
38281: PUSH
38282: LD_INT 20
38284: PPUSH
38285: LD_VAR 0 1
38289: PPUSH
38290: CALL_OW 321
38294: PUSH
38295: LD_INT 2
38297: EQUAL
38298: ST_TO_ADDR
38299: GO 38512
38301: LD_INT 28
38303: DOUBLE
38304: EQUAL
38305: IFTRUE 38315
38307: LD_INT 21
38309: DOUBLE
38310: EQUAL
38311: IFTRUE 38315
38313: GO 38340
38315: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38316: LD_ADDR_VAR 0 3
38320: PUSH
38321: LD_INT 21
38323: PPUSH
38324: LD_VAR 0 1
38328: PPUSH
38329: CALL_OW 321
38333: PUSH
38334: LD_INT 2
38336: EQUAL
38337: ST_TO_ADDR
38338: GO 38512
38340: LD_INT 16
38342: DOUBLE
38343: EQUAL
38344: IFTRUE 38348
38346: GO 38373
38348: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38349: LD_ADDR_VAR 0 3
38353: PUSH
38354: LD_INT 84
38356: PPUSH
38357: LD_VAR 0 1
38361: PPUSH
38362: CALL_OW 321
38366: PUSH
38367: LD_INT 2
38369: EQUAL
38370: ST_TO_ADDR
38371: GO 38512
38373: LD_INT 19
38375: DOUBLE
38376: EQUAL
38377: IFTRUE 38387
38379: LD_INT 23
38381: DOUBLE
38382: EQUAL
38383: IFTRUE 38387
38385: GO 38412
38387: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38388: LD_ADDR_VAR 0 3
38392: PUSH
38393: LD_INT 83
38395: PPUSH
38396: LD_VAR 0 1
38400: PPUSH
38401: CALL_OW 321
38405: PUSH
38406: LD_INT 2
38408: EQUAL
38409: ST_TO_ADDR
38410: GO 38512
38412: LD_INT 17
38414: DOUBLE
38415: EQUAL
38416: IFTRUE 38420
38418: GO 38445
38420: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38421: LD_ADDR_VAR 0 3
38425: PUSH
38426: LD_INT 39
38428: PPUSH
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL_OW 321
38438: PUSH
38439: LD_INT 2
38441: EQUAL
38442: ST_TO_ADDR
38443: GO 38512
38445: LD_INT 18
38447: DOUBLE
38448: EQUAL
38449: IFTRUE 38453
38451: GO 38478
38453: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38454: LD_ADDR_VAR 0 3
38458: PUSH
38459: LD_INT 40
38461: PPUSH
38462: LD_VAR 0 1
38466: PPUSH
38467: CALL_OW 321
38471: PUSH
38472: LD_INT 2
38474: EQUAL
38475: ST_TO_ADDR
38476: GO 38512
38478: LD_INT 27
38480: DOUBLE
38481: EQUAL
38482: IFTRUE 38486
38484: GO 38511
38486: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38487: LD_ADDR_VAR 0 3
38491: PUSH
38492: LD_INT 35
38494: PPUSH
38495: LD_VAR 0 1
38499: PPUSH
38500: CALL_OW 321
38504: PUSH
38505: LD_INT 2
38507: EQUAL
38508: ST_TO_ADDR
38509: GO 38512
38511: POP
// end ;
38512: LD_VAR 0 3
38516: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38517: LD_INT 0
38519: PPUSH
38520: PPUSH
38521: PPUSH
38522: PPUSH
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
// result := false ;
38530: LD_ADDR_VAR 0 6
38534: PUSH
38535: LD_INT 0
38537: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38538: LD_VAR 0 1
38542: NOT
38543: PUSH
38544: LD_VAR 0 1
38548: PPUSH
38549: CALL_OW 266
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: IN
38564: NOT
38565: OR
38566: PUSH
38567: LD_VAR 0 2
38571: NOT
38572: OR
38573: PUSH
38574: LD_VAR 0 5
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: LD_INT 3
38590: PUSH
38591: LD_INT 4
38593: PUSH
38594: LD_INT 5
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: IN
38605: NOT
38606: OR
38607: PUSH
38608: LD_VAR 0 3
38612: PPUSH
38613: LD_VAR 0 4
38617: PPUSH
38618: CALL_OW 488
38622: NOT
38623: OR
38624: IFFALSE 38628
// exit ;
38626: GO 39364
// side := GetSide ( depot ) ;
38628: LD_ADDR_VAR 0 9
38632: PUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 255
38642: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38643: LD_VAR 0 9
38647: PPUSH
38648: LD_VAR 0 2
38652: PPUSH
38653: CALL 38141 0 2
38657: NOT
38658: IFFALSE 38662
// exit ;
38660: GO 39364
// pom := GetBase ( depot ) ;
38662: LD_ADDR_VAR 0 10
38666: PUSH
38667: LD_VAR 0 1
38671: PPUSH
38672: CALL_OW 274
38676: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38677: LD_ADDR_VAR 0 11
38681: PUSH
38682: LD_VAR 0 2
38686: PPUSH
38687: LD_VAR 0 1
38691: PPUSH
38692: CALL_OW 248
38696: PPUSH
38697: CALL_OW 450
38701: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38702: LD_VAR 0 10
38706: PPUSH
38707: LD_INT 1
38709: PPUSH
38710: CALL_OW 275
38714: PUSH
38715: LD_VAR 0 11
38719: PUSH
38720: LD_INT 1
38722: ARRAY
38723: GREATEREQUAL
38724: PUSH
38725: LD_VAR 0 10
38729: PPUSH
38730: LD_INT 2
38732: PPUSH
38733: CALL_OW 275
38737: PUSH
38738: LD_VAR 0 11
38742: PUSH
38743: LD_INT 2
38745: ARRAY
38746: GREATEREQUAL
38747: AND
38748: PUSH
38749: LD_VAR 0 10
38753: PPUSH
38754: LD_INT 3
38756: PPUSH
38757: CALL_OW 275
38761: PUSH
38762: LD_VAR 0 11
38766: PUSH
38767: LD_INT 3
38769: ARRAY
38770: GREATEREQUAL
38771: AND
38772: NOT
38773: IFFALSE 38777
// exit ;
38775: GO 39364
// if GetBType ( depot ) = b_depot then
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL_OW 266
38786: PUSH
38787: LD_INT 0
38789: EQUAL
38790: IFFALSE 38802
// dist := 28 else
38792: LD_ADDR_VAR 0 14
38796: PUSH
38797: LD_INT 28
38799: ST_TO_ADDR
38800: GO 38810
// dist := 36 ;
38802: LD_ADDR_VAR 0 14
38806: PUSH
38807: LD_INT 36
38809: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38810: LD_VAR 0 1
38814: PPUSH
38815: LD_VAR 0 3
38819: PPUSH
38820: LD_VAR 0 4
38824: PPUSH
38825: CALL_OW 297
38829: PUSH
38830: LD_VAR 0 14
38834: GREATER
38835: IFFALSE 38839
// exit ;
38837: GO 39364
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38839: LD_ADDR_VAR 0 12
38843: PUSH
38844: LD_VAR 0 2
38848: PPUSH
38849: LD_VAR 0 3
38853: PPUSH
38854: LD_VAR 0 4
38858: PPUSH
38859: LD_VAR 0 5
38863: PPUSH
38864: LD_VAR 0 1
38868: PPUSH
38869: CALL_OW 248
38873: PPUSH
38874: LD_INT 0
38876: PPUSH
38877: CALL 39369 0 6
38881: ST_TO_ADDR
// if not hexes then
38882: LD_VAR 0 12
38886: NOT
38887: IFFALSE 38891
// exit ;
38889: GO 39364
// hex := GetHexInfo ( x , y ) ;
38891: LD_ADDR_VAR 0 15
38895: PUSH
38896: LD_VAR 0 3
38900: PPUSH
38901: LD_VAR 0 4
38905: PPUSH
38906: CALL_OW 546
38910: ST_TO_ADDR
// if hex [ 1 ] then
38911: LD_VAR 0 15
38915: PUSH
38916: LD_INT 1
38918: ARRAY
38919: IFFALSE 38923
// exit ;
38921: GO 39364
// height := hex [ 2 ] ;
38923: LD_ADDR_VAR 0 13
38927: PUSH
38928: LD_VAR 0 15
38932: PUSH
38933: LD_INT 2
38935: ARRAY
38936: ST_TO_ADDR
// for i = 1 to hexes do
38937: LD_ADDR_VAR 0 7
38941: PUSH
38942: DOUBLE
38943: LD_INT 1
38945: DEC
38946: ST_TO_ADDR
38947: LD_VAR 0 12
38951: PUSH
38952: FOR_TO
38953: IFFALSE 39283
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38955: LD_VAR 0 12
38959: PUSH
38960: LD_VAR 0 7
38964: ARRAY
38965: PUSH
38966: LD_INT 1
38968: ARRAY
38969: PPUSH
38970: LD_VAR 0 12
38974: PUSH
38975: LD_VAR 0 7
38979: ARRAY
38980: PUSH
38981: LD_INT 2
38983: ARRAY
38984: PPUSH
38985: CALL_OW 488
38989: NOT
38990: PUSH
38991: LD_VAR 0 12
38995: PUSH
38996: LD_VAR 0 7
39000: ARRAY
39001: PUSH
39002: LD_INT 1
39004: ARRAY
39005: PPUSH
39006: LD_VAR 0 12
39010: PUSH
39011: LD_VAR 0 7
39015: ARRAY
39016: PUSH
39017: LD_INT 2
39019: ARRAY
39020: PPUSH
39021: CALL_OW 428
39025: PUSH
39026: LD_INT 0
39028: GREATER
39029: OR
39030: PUSH
39031: LD_VAR 0 12
39035: PUSH
39036: LD_VAR 0 7
39040: ARRAY
39041: PUSH
39042: LD_INT 1
39044: ARRAY
39045: PPUSH
39046: LD_VAR 0 12
39050: PUSH
39051: LD_VAR 0 7
39055: ARRAY
39056: PUSH
39057: LD_INT 2
39059: ARRAY
39060: PPUSH
39061: CALL_OW 351
39065: OR
39066: IFFALSE 39072
// exit ;
39068: POP
39069: POP
39070: GO 39364
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39072: LD_ADDR_VAR 0 8
39076: PUSH
39077: LD_VAR 0 12
39081: PUSH
39082: LD_VAR 0 7
39086: ARRAY
39087: PUSH
39088: LD_INT 1
39090: ARRAY
39091: PPUSH
39092: LD_VAR 0 12
39096: PUSH
39097: LD_VAR 0 7
39101: ARRAY
39102: PUSH
39103: LD_INT 2
39105: ARRAY
39106: PPUSH
39107: CALL_OW 546
39111: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39112: LD_VAR 0 8
39116: PUSH
39117: LD_INT 1
39119: ARRAY
39120: PUSH
39121: LD_VAR 0 8
39125: PUSH
39126: LD_INT 2
39128: ARRAY
39129: PUSH
39130: LD_VAR 0 13
39134: PUSH
39135: LD_INT 2
39137: PLUS
39138: GREATER
39139: OR
39140: PUSH
39141: LD_VAR 0 8
39145: PUSH
39146: LD_INT 2
39148: ARRAY
39149: PUSH
39150: LD_VAR 0 13
39154: PUSH
39155: LD_INT 2
39157: MINUS
39158: LESS
39159: OR
39160: PUSH
39161: LD_VAR 0 8
39165: PUSH
39166: LD_INT 3
39168: ARRAY
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: LD_INT 8
39175: PUSH
39176: LD_INT 9
39178: PUSH
39179: LD_INT 10
39181: PUSH
39182: LD_INT 11
39184: PUSH
39185: LD_INT 12
39187: PUSH
39188: LD_INT 13
39190: PUSH
39191: LD_INT 16
39193: PUSH
39194: LD_INT 17
39196: PUSH
39197: LD_INT 18
39199: PUSH
39200: LD_INT 19
39202: PUSH
39203: LD_INT 20
39205: PUSH
39206: LD_INT 21
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: IN
39224: NOT
39225: OR
39226: PUSH
39227: LD_VAR 0 8
39231: PUSH
39232: LD_INT 5
39234: ARRAY
39235: NOT
39236: OR
39237: PUSH
39238: LD_VAR 0 8
39242: PUSH
39243: LD_INT 6
39245: ARRAY
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: LD_INT 7
39255: PUSH
39256: LD_INT 9
39258: PUSH
39259: LD_INT 10
39261: PUSH
39262: LD_INT 11
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: IN
39273: NOT
39274: OR
39275: IFFALSE 39281
// exit ;
39277: POP
39278: POP
39279: GO 39364
// end ;
39281: GO 38952
39283: POP
39284: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39285: LD_VAR 0 9
39289: PPUSH
39290: LD_VAR 0 3
39294: PPUSH
39295: LD_VAR 0 4
39299: PPUSH
39300: LD_INT 20
39302: PPUSH
39303: CALL 31316 0 4
39307: PUSH
39308: LD_INT 4
39310: ARRAY
39311: IFFALSE 39315
// exit ;
39313: GO 39364
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39315: LD_VAR 0 2
39319: PUSH
39320: LD_INT 29
39322: PUSH
39323: LD_INT 30
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: IN
39330: PUSH
39331: LD_VAR 0 3
39335: PPUSH
39336: LD_VAR 0 4
39340: PPUSH
39341: LD_VAR 0 9
39345: PPUSH
39346: CALL_OW 440
39350: NOT
39351: AND
39352: IFFALSE 39356
// exit ;
39354: GO 39364
// result := true ;
39356: LD_ADDR_VAR 0 6
39360: PUSH
39361: LD_INT 1
39363: ST_TO_ADDR
// end ;
39364: LD_VAR 0 6
39368: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39369: LD_INT 0
39371: PPUSH
39372: PPUSH
39373: PPUSH
39374: PPUSH
39375: PPUSH
39376: PPUSH
39377: PPUSH
39378: PPUSH
39379: PPUSH
39380: PPUSH
39381: PPUSH
39382: PPUSH
39383: PPUSH
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
39395: PPUSH
39396: PPUSH
39397: PPUSH
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
39402: PPUSH
39403: PPUSH
39404: PPUSH
39405: PPUSH
39406: PPUSH
39407: PPUSH
39408: PPUSH
39409: PPUSH
39410: PPUSH
39411: PPUSH
39412: PPUSH
39413: PPUSH
39414: PPUSH
39415: PPUSH
39416: PPUSH
39417: PPUSH
39418: PPUSH
39419: PPUSH
39420: PPUSH
39421: PPUSH
39422: PPUSH
39423: PPUSH
39424: PPUSH
39425: PPUSH
39426: PPUSH
39427: PPUSH
39428: PPUSH
// result = [ ] ;
39429: LD_ADDR_VAR 0 7
39433: PUSH
39434: EMPTY
39435: ST_TO_ADDR
// temp_list = [ ] ;
39436: LD_ADDR_VAR 0 9
39440: PUSH
39441: EMPTY
39442: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39443: LD_VAR 0 4
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: LD_INT 3
39459: PUSH
39460: LD_INT 4
39462: PUSH
39463: LD_INT 5
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: IN
39474: NOT
39475: PUSH
39476: LD_VAR 0 1
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: IN
39491: PUSH
39492: LD_VAR 0 5
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 3
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: IN
39511: NOT
39512: AND
39513: OR
39514: IFFALSE 39518
// exit ;
39516: GO 57909
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39518: LD_VAR 0 1
39522: PUSH
39523: LD_INT 6
39525: PUSH
39526: LD_INT 7
39528: PUSH
39529: LD_INT 8
39531: PUSH
39532: LD_INT 13
39534: PUSH
39535: LD_INT 12
39537: PUSH
39538: LD_INT 15
39540: PUSH
39541: LD_INT 11
39543: PUSH
39544: LD_INT 14
39546: PUSH
39547: LD_INT 10
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: IN
39561: IFFALSE 39571
// btype = b_lab ;
39563: LD_ADDR_VAR 0 1
39567: PUSH
39568: LD_INT 6
39570: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39571: LD_VAR 0 6
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: LD_INT 2
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: LIST
39589: IN
39590: NOT
39591: PUSH
39592: LD_VAR 0 1
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: LD_INT 6
39611: PUSH
39612: LD_INT 36
39614: PUSH
39615: LD_INT 4
39617: PUSH
39618: LD_INT 5
39620: PUSH
39621: LD_INT 31
39623: PUSH
39624: LD_INT 32
39626: PUSH
39627: LD_INT 33
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: IN
39643: NOT
39644: PUSH
39645: LD_VAR 0 6
39649: PUSH
39650: LD_INT 1
39652: EQUAL
39653: AND
39654: OR
39655: PUSH
39656: LD_VAR 0 1
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: LD_INT 3
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: IN
39671: NOT
39672: PUSH
39673: LD_VAR 0 6
39677: PUSH
39678: LD_INT 2
39680: EQUAL
39681: AND
39682: OR
39683: IFFALSE 39693
// mode = 0 ;
39685: LD_ADDR_VAR 0 6
39689: PUSH
39690: LD_INT 0
39692: ST_TO_ADDR
// case mode of 0 :
39693: LD_VAR 0 6
39697: PUSH
39698: LD_INT 0
39700: DOUBLE
39701: EQUAL
39702: IFTRUE 39706
39704: GO 51159
39706: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39707: LD_ADDR_VAR 0 11
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: LD_INT 2
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: NEG
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 3
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: LD_INT 2
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39900: LD_ADDR_VAR 0 12
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 2
40023: NEG
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 3
40057: NEG
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 3
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40096: LD_ADDR_VAR 0 13
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: NEG
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 2
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: NEG
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: NEG
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: LD_INT 3
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 3
40255: NEG
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 3
40267: NEG
40268: PUSH
40269: LD_INT 3
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40295: LD_ADDR_VAR 0 14
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 2
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: LD_INT 3
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 3
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40491: LD_ADDR_VAR 0 15
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 2
40614: NEG
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 2
40625: NEG
40626: PUSH
40627: LD_INT 1
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 3
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 3
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40684: LD_ADDR_VAR 0 16
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 2
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 2
40807: NEG
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 2
40819: NEG
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 3
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 3
40841: PUSH
40842: LD_INT 3
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: LD_INT 3
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40877: LD_ADDR_VAR 0 17
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 2
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: NEG
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41107: LD_ADDR_VAR 0 18
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: LD_INT 2
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41337: LD_ADDR_VAR 0 19
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 2
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41567: LD_ADDR_VAR 0 20
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41797: LD_ADDR_VAR 0 21
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: LD_INT 2
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42027: LD_ADDR_VAR 0 22
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42257: LD_ADDR_VAR 0 23
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: LD_INT 2
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: LD_INT 3
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 3
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 2
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42537: LD_ADDR_VAR 0 24
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: LD_INT 2
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 2
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 3
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 3
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42813: LD_ADDR_VAR 0 25
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 2
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 2
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 2
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: LD_INT 2
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 3
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: LD_INT 3
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 3
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43087: LD_ADDR_VAR 0 26
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 2
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 2
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: LD_INT 2
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: LD_INT 3
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43363: LD_ADDR_VAR 0 27
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 2
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 3
43596: NEG
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 3
43608: NEG
43609: PUSH
43610: LD_INT 2
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43643: LD_ADDR_VAR 0 28
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: NEG
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: LD_INT 3
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 3
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 3
43878: NEG
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 3
43890: NEG
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43925: LD_ADDR_VAR 0 29
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: LD_INT 3
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 3
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 3
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 3
44169: NEG
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44204: LD_ADDR_VAR 0 30
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 3
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 3
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: LD_INT 3
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 2
44436: NEG
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 3
44447: NEG
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44482: LD_ADDR_VAR 0 31
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: LD_INT 3
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 3
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: LD_INT 3
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 3
44725: NEG
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44760: LD_ADDR_VAR 0 32
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 3
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 3
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: LD_INT 3
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 3
45003: NEG
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45038: LD_ADDR_VAR 0 33
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 3
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 3
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 3
45282: NEG
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45317: LD_ADDR_VAR 0 34
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 2
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 3
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 3
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 3
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 3
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45597: LD_ADDR_VAR 0 35
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45709: LD_ADDR_VAR 0 36
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45821: LD_ADDR_VAR 0 37
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45933: LD_ADDR_VAR 0 38
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46045: LD_ADDR_VAR 0 39
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46157: LD_ADDR_VAR 0 40
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46269: LD_ADDR_VAR 0 41
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 2
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: LD_INT 3
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 3
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 3
46512: PUSH
46513: LD_INT 3
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: LD_INT 3
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 3
46543: NEG
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 3
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 3
46566: NEG
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 3
46578: NEG
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46619: LD_ADDR_VAR 0 42
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 3
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 3
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 3
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 3
46865: PUSH
46866: LD_INT 3
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: LD_INT 3
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 3
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 3
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 3
46928: NEG
46929: PUSH
46930: LD_INT 3
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46969: LD_ADDR_VAR 0 43
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 2
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 3
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 3
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 3
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 3
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: NEG
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47317: LD_ADDR_VAR 0 44
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 3
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 3
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 3
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 3
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 3
47560: PUSH
47561: LD_INT 3
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 3
47591: NEG
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 3
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 3
47626: NEG
47627: PUSH
47628: LD_INT 3
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47667: LD_ADDR_VAR 0 45
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: LD_INT 2
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: LD_INT 3
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: LD_INT 3
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 3
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 3
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 3
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 3
47964: NEG
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 3
47976: NEG
47977: PUSH
47978: LD_INT 3
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48017: LD_ADDR_VAR 0 46
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 3
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 3
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 3
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 3
48313: NEG
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48365: LD_ADDR_VAR 0 47
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: LD_INT 2
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: LD_INT 2
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48516: LD_ADDR_VAR 0 48
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: LD_INT 2
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48663: LD_ADDR_VAR 0 49
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48807: LD_ADDR_VAR 0 50
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48951: LD_ADDR_VAR 0 51
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49098: LD_ADDR_VAR 0 52
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49249: LD_ADDR_VAR 0 53
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: LD_INT 2
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49479: LD_ADDR_VAR 0 54
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49709: LD_ADDR_VAR 0 55
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49939: LD_ADDR_VAR 0 56
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50169: LD_ADDR_VAR 0 57
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50399: LD_ADDR_VAR 0 58
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50629: LD_ADDR_VAR 0 59
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50717: LD_ADDR_VAR 0 60
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50805: LD_ADDR_VAR 0 61
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50893: LD_ADDR_VAR 0 62
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50981: LD_ADDR_VAR 0 63
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51069: LD_ADDR_VAR 0 64
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// end ; 1 :
51157: GO 57054
51159: LD_INT 1
51161: DOUBLE
51162: EQUAL
51163: IFTRUE 51167
51165: GO 53790
51167: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51168: LD_ADDR_VAR 0 11
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: LD_INT 3
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 3
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51212: LD_ADDR_VAR 0 12
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51253: LD_ADDR_VAR 0 13
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 3
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: LIST
51292: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51293: LD_ADDR_VAR 0 14
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 3
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 3
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51334: LD_ADDR_VAR 0 15
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 3
51352: NEG
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51378: LD_ADDR_VAR 0 16
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 3
51397: NEG
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 3
51409: NEG
51410: PUSH
51411: LD_INT 3
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: LIST
51423: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51424: LD_ADDR_VAR 0 17
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 3
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51468: LD_ADDR_VAR 0 18
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: LIST
51508: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51509: LD_ADDR_VAR 0 19
51513: PUSH
51514: LD_INT 3
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: LD_INT 3
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51549: LD_ADDR_VAR 0 20
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: LD_INT 3
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 3
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51590: LD_ADDR_VAR 0 21
51594: PUSH
51595: LD_INT 2
51597: NEG
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 3
51608: NEG
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 3
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51634: LD_ADDR_VAR 0 22
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 3
51653: NEG
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: NEG
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: LIST
51679: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51680: LD_ADDR_VAR 0 23
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 3
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 4
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: LIST
51723: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51724: LD_ADDR_VAR 0 24
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 4
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51765: LD_ADDR_VAR 0 25
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: LD_INT 3
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 3
51792: PUSH
51793: LD_INT 4
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: LIST
51804: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51805: LD_ADDR_VAR 0 26
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 4
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: LIST
51845: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51846: LD_ADDR_VAR 0 27
51850: PUSH
51851: LD_INT 3
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 4
51875: NEG
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51890: LD_ADDR_VAR 0 28
51894: PUSH
51895: LD_INT 3
51897: NEG
51898: PUSH
51899: LD_INT 3
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 3
51909: NEG
51910: PUSH
51911: LD_INT 4
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 4
51921: NEG
51922: PUSH
51923: LD_INT 3
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51936: LD_ADDR_VAR 0 29
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 3
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 4
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 4
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 3
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 5
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 5
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 4
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 6
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 6
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 5
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52091: LD_ADDR_VAR 0 30
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 3
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 3
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 4
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 4
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 4
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 5
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 5
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 5
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 6
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 6
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52234: LD_ADDR_VAR 0 31
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 4
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 4
52281: PUSH
52282: LD_INT 4
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: LD_INT 4
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 5
52301: PUSH
52302: LD_INT 4
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 5
52311: PUSH
52312: LD_INT 5
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 4
52321: PUSH
52322: LD_INT 5
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 6
52331: PUSH
52332: LD_INT 5
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 6
52341: PUSH
52342: LD_INT 6
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 5
52351: PUSH
52352: LD_INT 6
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52373: LD_ADDR_VAR 0 32
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 4
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 4
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 3
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 5
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 5
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 4
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: LD_INT 6
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 6
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: LD_INT 5
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52516: LD_ADDR_VAR 0 33
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 3
52534: NEG
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 3
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 3
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 4
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 4
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 4
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 5
52602: NEG
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 5
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 5
52625: NEG
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 6
52636: NEG
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 6
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52671: LD_ADDR_VAR 0 34
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 3
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 3
52690: NEG
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 3
52702: NEG
52703: PUSH
52704: LD_INT 3
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: NEG
52715: PUSH
52716: LD_INT 4
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 4
52726: NEG
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 4
52738: NEG
52739: PUSH
52740: LD_INT 4
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 4
52750: NEG
52751: PUSH
52752: LD_INT 5
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 5
52762: NEG
52763: PUSH
52764: LD_INT 4
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 5
52774: NEG
52775: PUSH
52776: LD_INT 5
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 5
52786: NEG
52787: PUSH
52788: LD_INT 6
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 6
52798: NEG
52799: PUSH
52800: LD_INT 5
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 6
52810: NEG
52811: PUSH
52812: LD_INT 6
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52834: LD_ADDR_VAR 0 41
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: LIST
52877: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52878: LD_ADDR_VAR 0 42
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52919: LD_ADDR_VAR 0 43
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: LIST
52958: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52959: LD_ADDR_VAR 0 44
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 2
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: LIST
52999: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53000: LD_ADDR_VAR 0 45
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 3
53029: NEG
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53044: LD_ADDR_VAR 0 46
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: NEG
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 3
53075: NEG
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53090: LD_ADDR_VAR 0 47
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 3
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 3
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53123: LD_ADDR_VAR 0 48
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53154: LD_ADDR_VAR 0 49
53158: PUSH
53159: LD_INT 3
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53183: LD_ADDR_VAR 0 50
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53212: LD_ADDR_VAR 0 51
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53243: LD_ADDR_VAR 0 52
53247: PUSH
53248: LD_INT 3
53250: NEG
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53276: LD_ADDR_VAR 0 53
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: LD_INT 3
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 3
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: LIST
53319: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53320: LD_ADDR_VAR 0 54
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: LIST
53360: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53361: LD_ADDR_VAR 0 55
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 3
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: LIST
53400: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53401: LD_ADDR_VAR 0 56
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 3
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: LIST
53441: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53442: LD_ADDR_VAR 0 57
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 3
53460: NEG
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 3
53471: NEG
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53486: LD_ADDR_VAR 0 58
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 3
53505: NEG
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 3
53517: NEG
53518: PUSH
53519: LD_INT 3
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: LIST
53531: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53532: LD_ADDR_VAR 0 59
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53576: LD_ADDR_VAR 0 60
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53617: LD_ADDR_VAR 0 61
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53657: LD_ADDR_VAR 0 62
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: LIST
53697: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53698: LD_ADDR_VAR 0 63
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53742: LD_ADDR_VAR 0 64
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: LIST
53787: ST_TO_ADDR
// end ; 2 :
53788: GO 57054
53790: LD_INT 2
53792: DOUBLE
53793: EQUAL
53794: IFTRUE 53798
53796: GO 57053
53798: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53799: LD_ADDR_VAR 0 29
53803: PUSH
53804: LD_INT 4
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 4
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 5
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 5
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 4
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 3
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 3
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 5
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 3
53899: PUSH
53900: LD_INT 3
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 3
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 4
53919: PUSH
53920: LD_INT 3
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 4
53929: PUSH
53930: LD_INT 4
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: PUSH
53940: LD_INT 4
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: LD_INT 3
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 4
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 4
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: LD_INT 4
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: LD_INT 4
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 5
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 5
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 4
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 3
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: LD_INT 5
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 3
54082: NEG
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 3
54127: NEG
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 4
54138: NEG
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 4
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 4
54161: NEG
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 4
54184: NEG
54185: PUSH
54186: LD_INT 4
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 4
54196: NEG
54197: PUSH
54198: LD_INT 5
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 3
54208: NEG
54209: PUSH
54210: LD_INT 4
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: LD_INT 3
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 4
54232: NEG
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 5
54244: NEG
54245: PUSH
54246: LD_INT 4
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 5
54256: NEG
54257: PUSH
54258: LD_INT 5
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 3
54268: NEG
54269: PUSH
54270: LD_INT 5
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 5
54280: NEG
54281: PUSH
54282: LD_INT 3
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54337: LD_ADDR_VAR 0 30
54341: PUSH
54342: LD_INT 4
54344: PUSH
54345: LD_INT 4
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 4
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 5
54364: PUSH
54365: LD_INT 4
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 5
54374: PUSH
54375: LD_INT 5
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 4
54384: PUSH
54385: LD_INT 5
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: LD_INT 4
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 5
54414: PUSH
54415: LD_INT 3
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 3
54424: PUSH
54425: LD_INT 5
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 4
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 4
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: LD_INT 4
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 4
54527: NEG
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 4
54538: NEG
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 4
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 5
54583: NEG
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 5
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 5
54606: NEG
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 3
54629: NEG
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 3
54641: NEG
54642: PUSH
54643: LD_INT 4
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: LD_INT 3
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 3
54677: NEG
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 4
54689: NEG
54690: PUSH
54691: LD_INT 3
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 4
54701: NEG
54702: PUSH
54703: LD_INT 4
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 4
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 4
54725: NEG
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 4
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 5
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 4
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 3
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 3
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 4
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 5
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 3
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: NEG
54828: PUSH
54829: LD_INT 5
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54884: LD_ADDR_VAR 0 31
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 4
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 3
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: LD_INT 4
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 5
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 5
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 4
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: LD_INT 5
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: LD_INT 3
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 3
54984: NEG
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 3
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 3
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 4
55040: NEG
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 4
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 4
55063: NEG
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 4
55086: NEG
55087: PUSH
55088: LD_INT 4
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 4
55098: NEG
55099: PUSH
55100: LD_INT 5
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: LD_INT 4
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 3
55122: NEG
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 5
55146: NEG
55147: PUSH
55148: LD_INT 4
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 5
55158: NEG
55159: PUSH
55160: LD_INT 5
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: NEG
55171: PUSH
55172: LD_INT 5
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 5
55182: NEG
55183: PUSH
55184: LD_INT 3
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 3
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 4
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 3
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 4
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 4
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 4
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 4
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 5
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 5
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 4
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 3
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 5
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55434: LD_ADDR_VAR 0 32
55438: PUSH
55439: LD_INT 4
55441: NEG
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 4
55452: NEG
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 3
55475: NEG
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 4
55486: NEG
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 5
55497: NEG
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 5
55508: NEG
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 5
55520: NEG
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: NEG
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 3
55543: NEG
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: LD_INT 4
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: NEG
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 4
55603: NEG
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 4
55615: NEG
55616: PUSH
55617: LD_INT 4
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: LD_INT 4
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 4
55639: NEG
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 4
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 5
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 4
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 3
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 4
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: LD_INT 5
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 3
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 5
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 3
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 3
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 4
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 4
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 3
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 4
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 4
55846: PUSH
55847: LD_INT 4
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 4
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 5
55866: PUSH
55867: LD_INT 4
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 5
55876: PUSH
55877: LD_INT 5
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 4
55886: PUSH
55887: LD_INT 5
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 3
55896: PUSH
55897: LD_INT 4
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 5
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 3
55926: PUSH
55927: LD_INT 5
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55981: LD_ADDR_VAR 0 33
55985: PUSH
55986: LD_INT 4
55988: NEG
55989: PUSH
55990: LD_INT 4
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 4
56000: NEG
56001: PUSH
56002: LD_INT 5
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 3
56012: NEG
56013: PUSH
56014: LD_INT 4
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 3
56024: NEG
56025: PUSH
56026: LD_INT 3
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 4
56036: NEG
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 5
56048: NEG
56049: PUSH
56050: LD_INT 4
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 5
56060: NEG
56061: PUSH
56062: LD_INT 5
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: LD_INT 5
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 5
56084: NEG
56085: PUSH
56086: LD_INT 3
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 3
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 4
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 3
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 4
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: LD_INT 4
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 4
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 4
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 5
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 5
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 3
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 5
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: LD_INT 3
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 3
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 4
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 4
56321: PUSH
56322: LD_INT 4
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: LD_INT 4
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 4
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: LD_INT 4
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 4
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 3
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 4
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 5
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 5
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 4
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 3
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 5
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: LD_INT 3
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56519: LD_ADDR_VAR 0 34
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 4
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 5
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: LD_INT 4
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: LD_INT 3
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 3
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 5
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 3
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 5
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 4
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 4
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 4
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 4
56721: PUSH
56722: LD_INT 4
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 4
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 5
56741: PUSH
56742: LD_INT 4
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 5
56751: PUSH
56752: LD_INT 5
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 4
56761: PUSH
56762: LD_INT 5
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: PUSH
56772: LD_INT 4
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 3
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 5
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 3
56801: PUSH
56802: LD_INT 5
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 3
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 3
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 4
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 4
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 3
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 4
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 4
56904: NEG
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 4
56915: NEG
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 4
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 5
56960: NEG
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 5
56971: NEG
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 5
56983: NEG
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 3
56995: NEG
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// end ; end ;
57051: GO 57054
57053: POP
// case btype of b_depot , b_warehouse :
57054: LD_VAR 0 1
57058: PUSH
57059: LD_INT 0
57061: DOUBLE
57062: EQUAL
57063: IFTRUE 57073
57065: LD_INT 1
57067: DOUBLE
57068: EQUAL
57069: IFTRUE 57073
57071: GO 57274
57073: POP
// case nation of nation_american :
57074: LD_VAR 0 5
57078: PUSH
57079: LD_INT 1
57081: DOUBLE
57082: EQUAL
57083: IFTRUE 57087
57085: GO 57143
57087: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57088: LD_ADDR_VAR 0 9
57092: PUSH
57093: LD_VAR 0 11
57097: PUSH
57098: LD_VAR 0 12
57102: PUSH
57103: LD_VAR 0 13
57107: PUSH
57108: LD_VAR 0 14
57112: PUSH
57113: LD_VAR 0 15
57117: PUSH
57118: LD_VAR 0 16
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: PUSH
57131: LD_VAR 0 4
57135: PUSH
57136: LD_INT 1
57138: PLUS
57139: ARRAY
57140: ST_TO_ADDR
57141: GO 57272
57143: LD_INT 2
57145: DOUBLE
57146: EQUAL
57147: IFTRUE 57151
57149: GO 57207
57151: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57152: LD_ADDR_VAR 0 9
57156: PUSH
57157: LD_VAR 0 17
57161: PUSH
57162: LD_VAR 0 18
57166: PUSH
57167: LD_VAR 0 19
57171: PUSH
57172: LD_VAR 0 20
57176: PUSH
57177: LD_VAR 0 21
57181: PUSH
57182: LD_VAR 0 22
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: PUSH
57195: LD_VAR 0 4
57199: PUSH
57200: LD_INT 1
57202: PLUS
57203: ARRAY
57204: ST_TO_ADDR
57205: GO 57272
57207: LD_INT 3
57209: DOUBLE
57210: EQUAL
57211: IFTRUE 57215
57213: GO 57271
57215: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57216: LD_ADDR_VAR 0 9
57220: PUSH
57221: LD_VAR 0 23
57225: PUSH
57226: LD_VAR 0 24
57230: PUSH
57231: LD_VAR 0 25
57235: PUSH
57236: LD_VAR 0 26
57240: PUSH
57241: LD_VAR 0 27
57245: PUSH
57246: LD_VAR 0 28
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: PUSH
57259: LD_VAR 0 4
57263: PUSH
57264: LD_INT 1
57266: PLUS
57267: ARRAY
57268: ST_TO_ADDR
57269: GO 57272
57271: POP
57272: GO 57827
57274: LD_INT 2
57276: DOUBLE
57277: EQUAL
57278: IFTRUE 57288
57280: LD_INT 3
57282: DOUBLE
57283: EQUAL
57284: IFTRUE 57288
57286: GO 57344
57288: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57289: LD_ADDR_VAR 0 9
57293: PUSH
57294: LD_VAR 0 29
57298: PUSH
57299: LD_VAR 0 30
57303: PUSH
57304: LD_VAR 0 31
57308: PUSH
57309: LD_VAR 0 32
57313: PUSH
57314: LD_VAR 0 33
57318: PUSH
57319: LD_VAR 0 34
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: PUSH
57332: LD_VAR 0 4
57336: PUSH
57337: LD_INT 1
57339: PLUS
57340: ARRAY
57341: ST_TO_ADDR
57342: GO 57827
57344: LD_INT 16
57346: DOUBLE
57347: EQUAL
57348: IFTRUE 57406
57350: LD_INT 17
57352: DOUBLE
57353: EQUAL
57354: IFTRUE 57406
57356: LD_INT 18
57358: DOUBLE
57359: EQUAL
57360: IFTRUE 57406
57362: LD_INT 19
57364: DOUBLE
57365: EQUAL
57366: IFTRUE 57406
57368: LD_INT 22
57370: DOUBLE
57371: EQUAL
57372: IFTRUE 57406
57374: LD_INT 20
57376: DOUBLE
57377: EQUAL
57378: IFTRUE 57406
57380: LD_INT 21
57382: DOUBLE
57383: EQUAL
57384: IFTRUE 57406
57386: LD_INT 23
57388: DOUBLE
57389: EQUAL
57390: IFTRUE 57406
57392: LD_INT 24
57394: DOUBLE
57395: EQUAL
57396: IFTRUE 57406
57398: LD_INT 25
57400: DOUBLE
57401: EQUAL
57402: IFTRUE 57406
57404: GO 57462
57406: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57407: LD_ADDR_VAR 0 9
57411: PUSH
57412: LD_VAR 0 35
57416: PUSH
57417: LD_VAR 0 36
57421: PUSH
57422: LD_VAR 0 37
57426: PUSH
57427: LD_VAR 0 38
57431: PUSH
57432: LD_VAR 0 39
57436: PUSH
57437: LD_VAR 0 40
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: PUSH
57450: LD_VAR 0 4
57454: PUSH
57455: LD_INT 1
57457: PLUS
57458: ARRAY
57459: ST_TO_ADDR
57460: GO 57827
57462: LD_INT 6
57464: DOUBLE
57465: EQUAL
57466: IFTRUE 57518
57468: LD_INT 7
57470: DOUBLE
57471: EQUAL
57472: IFTRUE 57518
57474: LD_INT 8
57476: DOUBLE
57477: EQUAL
57478: IFTRUE 57518
57480: LD_INT 13
57482: DOUBLE
57483: EQUAL
57484: IFTRUE 57518
57486: LD_INT 12
57488: DOUBLE
57489: EQUAL
57490: IFTRUE 57518
57492: LD_INT 15
57494: DOUBLE
57495: EQUAL
57496: IFTRUE 57518
57498: LD_INT 11
57500: DOUBLE
57501: EQUAL
57502: IFTRUE 57518
57504: LD_INT 14
57506: DOUBLE
57507: EQUAL
57508: IFTRUE 57518
57510: LD_INT 10
57512: DOUBLE
57513: EQUAL
57514: IFTRUE 57518
57516: GO 57574
57518: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57519: LD_ADDR_VAR 0 9
57523: PUSH
57524: LD_VAR 0 41
57528: PUSH
57529: LD_VAR 0 42
57533: PUSH
57534: LD_VAR 0 43
57538: PUSH
57539: LD_VAR 0 44
57543: PUSH
57544: LD_VAR 0 45
57548: PUSH
57549: LD_VAR 0 46
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: PUSH
57562: LD_VAR 0 4
57566: PUSH
57567: LD_INT 1
57569: PLUS
57570: ARRAY
57571: ST_TO_ADDR
57572: GO 57827
57574: LD_INT 36
57576: DOUBLE
57577: EQUAL
57578: IFTRUE 57582
57580: GO 57638
57582: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57583: LD_ADDR_VAR 0 9
57587: PUSH
57588: LD_VAR 0 47
57592: PUSH
57593: LD_VAR 0 48
57597: PUSH
57598: LD_VAR 0 49
57602: PUSH
57603: LD_VAR 0 50
57607: PUSH
57608: LD_VAR 0 51
57612: PUSH
57613: LD_VAR 0 52
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: PUSH
57626: LD_VAR 0 4
57630: PUSH
57631: LD_INT 1
57633: PLUS
57634: ARRAY
57635: ST_TO_ADDR
57636: GO 57827
57638: LD_INT 4
57640: DOUBLE
57641: EQUAL
57642: IFTRUE 57664
57644: LD_INT 5
57646: DOUBLE
57647: EQUAL
57648: IFTRUE 57664
57650: LD_INT 34
57652: DOUBLE
57653: EQUAL
57654: IFTRUE 57664
57656: LD_INT 37
57658: DOUBLE
57659: EQUAL
57660: IFTRUE 57664
57662: GO 57720
57664: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57665: LD_ADDR_VAR 0 9
57669: PUSH
57670: LD_VAR 0 53
57674: PUSH
57675: LD_VAR 0 54
57679: PUSH
57680: LD_VAR 0 55
57684: PUSH
57685: LD_VAR 0 56
57689: PUSH
57690: LD_VAR 0 57
57694: PUSH
57695: LD_VAR 0 58
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: PUSH
57708: LD_VAR 0 4
57712: PUSH
57713: LD_INT 1
57715: PLUS
57716: ARRAY
57717: ST_TO_ADDR
57718: GO 57827
57720: LD_INT 31
57722: DOUBLE
57723: EQUAL
57724: IFTRUE 57770
57726: LD_INT 32
57728: DOUBLE
57729: EQUAL
57730: IFTRUE 57770
57732: LD_INT 33
57734: DOUBLE
57735: EQUAL
57736: IFTRUE 57770
57738: LD_INT 27
57740: DOUBLE
57741: EQUAL
57742: IFTRUE 57770
57744: LD_INT 26
57746: DOUBLE
57747: EQUAL
57748: IFTRUE 57770
57750: LD_INT 28
57752: DOUBLE
57753: EQUAL
57754: IFTRUE 57770
57756: LD_INT 29
57758: DOUBLE
57759: EQUAL
57760: IFTRUE 57770
57762: LD_INT 30
57764: DOUBLE
57765: EQUAL
57766: IFTRUE 57770
57768: GO 57826
57770: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57771: LD_ADDR_VAR 0 9
57775: PUSH
57776: LD_VAR 0 59
57780: PUSH
57781: LD_VAR 0 60
57785: PUSH
57786: LD_VAR 0 61
57790: PUSH
57791: LD_VAR 0 62
57795: PUSH
57796: LD_VAR 0 63
57800: PUSH
57801: LD_VAR 0 64
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: PUSH
57814: LD_VAR 0 4
57818: PUSH
57819: LD_INT 1
57821: PLUS
57822: ARRAY
57823: ST_TO_ADDR
57824: GO 57827
57826: POP
// temp_list2 = [ ] ;
57827: LD_ADDR_VAR 0 10
57831: PUSH
57832: EMPTY
57833: ST_TO_ADDR
// for i in temp_list do
57834: LD_ADDR_VAR 0 8
57838: PUSH
57839: LD_VAR 0 9
57843: PUSH
57844: FOR_IN
57845: IFFALSE 57897
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57847: LD_ADDR_VAR 0 10
57851: PUSH
57852: LD_VAR 0 10
57856: PUSH
57857: LD_VAR 0 8
57861: PUSH
57862: LD_INT 1
57864: ARRAY
57865: PUSH
57866: LD_VAR 0 2
57870: PLUS
57871: PUSH
57872: LD_VAR 0 8
57876: PUSH
57877: LD_INT 2
57879: ARRAY
57880: PUSH
57881: LD_VAR 0 3
57885: PLUS
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: EMPTY
57892: LIST
57893: ADD
57894: ST_TO_ADDR
57895: GO 57844
57897: POP
57898: POP
// result = temp_list2 ;
57899: LD_ADDR_VAR 0 7
57903: PUSH
57904: LD_VAR 0 10
57908: ST_TO_ADDR
// end ;
57909: LD_VAR 0 7
57913: RET
// export function EnemyInRange ( unit , dist ) ; begin
57914: LD_INT 0
57916: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57917: LD_ADDR_VAR 0 3
57921: PUSH
57922: LD_VAR 0 1
57926: PPUSH
57927: CALL_OW 255
57931: PPUSH
57932: LD_VAR 0 1
57936: PPUSH
57937: CALL_OW 250
57941: PPUSH
57942: LD_VAR 0 1
57946: PPUSH
57947: CALL_OW 251
57951: PPUSH
57952: LD_VAR 0 2
57956: PPUSH
57957: CALL 31316 0 4
57961: PUSH
57962: LD_INT 4
57964: ARRAY
57965: ST_TO_ADDR
// end ;
57966: LD_VAR 0 3
57970: RET
// export function PlayerSeeMe ( unit ) ; begin
57971: LD_INT 0
57973: PPUSH
// result := See ( your_side , unit ) ;
57974: LD_ADDR_VAR 0 2
57978: PUSH
57979: LD_OWVAR 2
57983: PPUSH
57984: LD_VAR 0 1
57988: PPUSH
57989: CALL_OW 292
57993: ST_TO_ADDR
// end ;
57994: LD_VAR 0 2
57998: RET
// export function ReverseDir ( unit ) ; begin
57999: LD_INT 0
58001: PPUSH
// if not unit then
58002: LD_VAR 0 1
58006: NOT
58007: IFFALSE 58011
// exit ;
58009: GO 58034
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58011: LD_ADDR_VAR 0 2
58015: PUSH
58016: LD_VAR 0 1
58020: PPUSH
58021: CALL_OW 254
58025: PUSH
58026: LD_INT 3
58028: PLUS
58029: PUSH
58030: LD_INT 6
58032: MOD
58033: ST_TO_ADDR
// end ;
58034: LD_VAR 0 2
58038: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58039: LD_INT 0
58041: PPUSH
58042: PPUSH
58043: PPUSH
58044: PPUSH
58045: PPUSH
58046: PPUSH
// if not unit or not hexes then
58047: LD_VAR 0 1
58051: NOT
58052: PUSH
58053: LD_VAR 0 2
58057: NOT
58058: OR
58059: IFFALSE 58063
// exit ;
58061: GO 58186
// dist := 9999 ;
58063: LD_ADDR_VAR 0 5
58067: PUSH
58068: LD_INT 9999
58070: ST_TO_ADDR
// for i = 1 to hexes do
58071: LD_ADDR_VAR 0 4
58075: PUSH
58076: DOUBLE
58077: LD_INT 1
58079: DEC
58080: ST_TO_ADDR
58081: LD_VAR 0 2
58085: PUSH
58086: FOR_TO
58087: IFFALSE 58174
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58089: LD_ADDR_VAR 0 6
58093: PUSH
58094: LD_VAR 0 1
58098: PPUSH
58099: LD_VAR 0 2
58103: PUSH
58104: LD_VAR 0 4
58108: ARRAY
58109: PUSH
58110: LD_INT 1
58112: ARRAY
58113: PPUSH
58114: LD_VAR 0 2
58118: PUSH
58119: LD_VAR 0 4
58123: ARRAY
58124: PUSH
58125: LD_INT 2
58127: ARRAY
58128: PPUSH
58129: CALL_OW 297
58133: ST_TO_ADDR
// if tdist < dist then
58134: LD_VAR 0 6
58138: PUSH
58139: LD_VAR 0 5
58143: LESS
58144: IFFALSE 58172
// begin hex := hexes [ i ] ;
58146: LD_ADDR_VAR 0 8
58150: PUSH
58151: LD_VAR 0 2
58155: PUSH
58156: LD_VAR 0 4
58160: ARRAY
58161: ST_TO_ADDR
// dist := tdist ;
58162: LD_ADDR_VAR 0 5
58166: PUSH
58167: LD_VAR 0 6
58171: ST_TO_ADDR
// end ; end ;
58172: GO 58086
58174: POP
58175: POP
// result := hex ;
58176: LD_ADDR_VAR 0 3
58180: PUSH
58181: LD_VAR 0 8
58185: ST_TO_ADDR
// end ;
58186: LD_VAR 0 3
58190: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58191: LD_INT 0
58193: PPUSH
58194: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58195: LD_VAR 0 1
58199: NOT
58200: PUSH
58201: LD_VAR 0 1
58205: PUSH
58206: LD_INT 21
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 23
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PPUSH
58230: CALL_OW 69
58234: IN
58235: NOT
58236: OR
58237: IFFALSE 58241
// exit ;
58239: GO 58288
// for i = 1 to 3 do
58241: LD_ADDR_VAR 0 3
58245: PUSH
58246: DOUBLE
58247: LD_INT 1
58249: DEC
58250: ST_TO_ADDR
58251: LD_INT 3
58253: PUSH
58254: FOR_TO
58255: IFFALSE 58286
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58257: LD_VAR 0 1
58261: PPUSH
58262: CALL_OW 250
58266: PPUSH
58267: LD_VAR 0 1
58271: PPUSH
58272: CALL_OW 251
58276: PPUSH
58277: LD_INT 1
58279: PPUSH
58280: CALL_OW 453
58284: GO 58254
58286: POP
58287: POP
// end ;
58288: LD_VAR 0 2
58292: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58293: LD_INT 0
58295: PPUSH
58296: PPUSH
58297: PPUSH
58298: PPUSH
58299: PPUSH
58300: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58301: LD_VAR 0 1
58305: NOT
58306: PUSH
58307: LD_VAR 0 2
58311: NOT
58312: OR
58313: PUSH
58314: LD_VAR 0 1
58318: PPUSH
58319: CALL_OW 314
58323: OR
58324: IFFALSE 58328
// exit ;
58326: GO 58769
// x := GetX ( enemy_unit ) ;
58328: LD_ADDR_VAR 0 7
58332: PUSH
58333: LD_VAR 0 2
58337: PPUSH
58338: CALL_OW 250
58342: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58343: LD_ADDR_VAR 0 8
58347: PUSH
58348: LD_VAR 0 2
58352: PPUSH
58353: CALL_OW 251
58357: ST_TO_ADDR
// if not x or not y then
58358: LD_VAR 0 7
58362: NOT
58363: PUSH
58364: LD_VAR 0 8
58368: NOT
58369: OR
58370: IFFALSE 58374
// exit ;
58372: GO 58769
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58374: LD_ADDR_VAR 0 6
58378: PUSH
58379: LD_VAR 0 7
58383: PPUSH
58384: LD_INT 0
58386: PPUSH
58387: LD_INT 4
58389: PPUSH
58390: CALL_OW 272
58394: PUSH
58395: LD_VAR 0 8
58399: PPUSH
58400: LD_INT 0
58402: PPUSH
58403: LD_INT 4
58405: PPUSH
58406: CALL_OW 273
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_VAR 0 7
58419: PPUSH
58420: LD_INT 1
58422: PPUSH
58423: LD_INT 4
58425: PPUSH
58426: CALL_OW 272
58430: PUSH
58431: LD_VAR 0 8
58435: PPUSH
58436: LD_INT 1
58438: PPUSH
58439: LD_INT 4
58441: PPUSH
58442: CALL_OW 273
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_VAR 0 7
58455: PPUSH
58456: LD_INT 2
58458: PPUSH
58459: LD_INT 4
58461: PPUSH
58462: CALL_OW 272
58466: PUSH
58467: LD_VAR 0 8
58471: PPUSH
58472: LD_INT 2
58474: PPUSH
58475: LD_INT 4
58477: PPUSH
58478: CALL_OW 273
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_VAR 0 7
58491: PPUSH
58492: LD_INT 3
58494: PPUSH
58495: LD_INT 4
58497: PPUSH
58498: CALL_OW 272
58502: PUSH
58503: LD_VAR 0 8
58507: PPUSH
58508: LD_INT 3
58510: PPUSH
58511: LD_INT 4
58513: PPUSH
58514: CALL_OW 273
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_VAR 0 7
58527: PPUSH
58528: LD_INT 4
58530: PPUSH
58531: LD_INT 4
58533: PPUSH
58534: CALL_OW 272
58538: PUSH
58539: LD_VAR 0 8
58543: PPUSH
58544: LD_INT 4
58546: PPUSH
58547: LD_INT 4
58549: PPUSH
58550: CALL_OW 273
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_VAR 0 7
58563: PPUSH
58564: LD_INT 5
58566: PPUSH
58567: LD_INT 4
58569: PPUSH
58570: CALL_OW 272
58574: PUSH
58575: LD_VAR 0 8
58579: PPUSH
58580: LD_INT 5
58582: PPUSH
58583: LD_INT 4
58585: PPUSH
58586: CALL_OW 273
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: ST_TO_ADDR
// for i = tmp downto 1 do
58603: LD_ADDR_VAR 0 4
58607: PUSH
58608: DOUBLE
58609: LD_VAR 0 6
58613: INC
58614: ST_TO_ADDR
58615: LD_INT 1
58617: PUSH
58618: FOR_DOWNTO
58619: IFFALSE 58720
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58621: LD_VAR 0 6
58625: PUSH
58626: LD_VAR 0 4
58630: ARRAY
58631: PUSH
58632: LD_INT 1
58634: ARRAY
58635: PPUSH
58636: LD_VAR 0 6
58640: PUSH
58641: LD_VAR 0 4
58645: ARRAY
58646: PUSH
58647: LD_INT 2
58649: ARRAY
58650: PPUSH
58651: CALL_OW 488
58655: NOT
58656: PUSH
58657: LD_VAR 0 6
58661: PUSH
58662: LD_VAR 0 4
58666: ARRAY
58667: PUSH
58668: LD_INT 1
58670: ARRAY
58671: PPUSH
58672: LD_VAR 0 6
58676: PUSH
58677: LD_VAR 0 4
58681: ARRAY
58682: PUSH
58683: LD_INT 2
58685: ARRAY
58686: PPUSH
58687: CALL_OW 428
58691: PUSH
58692: LD_INT 0
58694: NONEQUAL
58695: OR
58696: IFFALSE 58718
// tmp := Delete ( tmp , i ) ;
58698: LD_ADDR_VAR 0 6
58702: PUSH
58703: LD_VAR 0 6
58707: PPUSH
58708: LD_VAR 0 4
58712: PPUSH
58713: CALL_OW 3
58717: ST_TO_ADDR
58718: GO 58618
58720: POP
58721: POP
// j := GetClosestHex ( unit , tmp ) ;
58722: LD_ADDR_VAR 0 5
58726: PUSH
58727: LD_VAR 0 1
58731: PPUSH
58732: LD_VAR 0 6
58736: PPUSH
58737: CALL 58039 0 2
58741: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58742: LD_VAR 0 1
58746: PPUSH
58747: LD_VAR 0 5
58751: PUSH
58752: LD_INT 1
58754: ARRAY
58755: PPUSH
58756: LD_VAR 0 5
58760: PUSH
58761: LD_INT 2
58763: ARRAY
58764: PPUSH
58765: CALL_OW 111
// end ;
58769: LD_VAR 0 3
58773: RET
// export function PrepareApemanSoldier ( ) ; begin
58774: LD_INT 0
58776: PPUSH
// uc_nation := 0 ;
58777: LD_ADDR_OWVAR 21
58781: PUSH
58782: LD_INT 0
58784: ST_TO_ADDR
// hc_sex := sex_male ;
58785: LD_ADDR_OWVAR 27
58789: PUSH
58790: LD_INT 1
58792: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58793: LD_ADDR_OWVAR 28
58797: PUSH
58798: LD_INT 15
58800: ST_TO_ADDR
// hc_gallery :=  ;
58801: LD_ADDR_OWVAR 33
58805: PUSH
58806: LD_STRING 
58808: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58809: LD_ADDR_OWVAR 31
58813: PUSH
58814: LD_INT 0
58816: PPUSH
58817: LD_INT 3
58819: PPUSH
58820: CALL_OW 12
58824: PUSH
58825: LD_INT 0
58827: PPUSH
58828: LD_INT 3
58830: PPUSH
58831: CALL_OW 12
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: ST_TO_ADDR
// end ;
58848: LD_VAR 0 1
58852: RET
// export function PrepareApemanEngineer ( ) ; begin
58853: LD_INT 0
58855: PPUSH
// uc_nation := 0 ;
58856: LD_ADDR_OWVAR 21
58860: PUSH
58861: LD_INT 0
58863: ST_TO_ADDR
// hc_sex := sex_male ;
58864: LD_ADDR_OWVAR 27
58868: PUSH
58869: LD_INT 1
58871: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58872: LD_ADDR_OWVAR 28
58876: PUSH
58877: LD_INT 16
58879: ST_TO_ADDR
// hc_gallery :=  ;
58880: LD_ADDR_OWVAR 33
58884: PUSH
58885: LD_STRING 
58887: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58888: LD_ADDR_OWVAR 31
58892: PUSH
58893: LD_INT 0
58895: PPUSH
58896: LD_INT 3
58898: PPUSH
58899: CALL_OW 12
58903: PUSH
58904: LD_INT 0
58906: PPUSH
58907: LD_INT 3
58909: PPUSH
58910: CALL_OW 12
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: ST_TO_ADDR
// end ;
58927: LD_VAR 0 1
58931: RET
// export function PrepareApeman ( agressivity ) ; begin
58932: LD_INT 0
58934: PPUSH
// uc_side := 0 ;
58935: LD_ADDR_OWVAR 20
58939: PUSH
58940: LD_INT 0
58942: ST_TO_ADDR
// uc_nation := 0 ;
58943: LD_ADDR_OWVAR 21
58947: PUSH
58948: LD_INT 0
58950: ST_TO_ADDR
// hc_sex := sex_male ;
58951: LD_ADDR_OWVAR 27
58955: PUSH
58956: LD_INT 1
58958: ST_TO_ADDR
// hc_class := class_apeman ;
58959: LD_ADDR_OWVAR 28
58963: PUSH
58964: LD_INT 12
58966: ST_TO_ADDR
// hc_gallery :=  ;
58967: LD_ADDR_OWVAR 33
58971: PUSH
58972: LD_STRING 
58974: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58975: LD_ADDR_OWVAR 35
58979: PUSH
58980: LD_VAR 0 1
58984: NEG
58985: PPUSH
58986: LD_VAR 0 1
58990: PPUSH
58991: CALL_OW 12
58995: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58996: LD_ADDR_OWVAR 31
59000: PUSH
59001: LD_INT 0
59003: PPUSH
59004: LD_INT 3
59006: PPUSH
59007: CALL_OW 12
59011: PUSH
59012: LD_INT 0
59014: PPUSH
59015: LD_INT 3
59017: PPUSH
59018: CALL_OW 12
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: ST_TO_ADDR
// end ;
59035: LD_VAR 0 2
59039: RET
// export function PrepareTiger ( agressivity ) ; begin
59040: LD_INT 0
59042: PPUSH
// uc_side := 0 ;
59043: LD_ADDR_OWVAR 20
59047: PUSH
59048: LD_INT 0
59050: ST_TO_ADDR
// uc_nation := 0 ;
59051: LD_ADDR_OWVAR 21
59055: PUSH
59056: LD_INT 0
59058: ST_TO_ADDR
// hc_class := class_tiger ;
59059: LD_ADDR_OWVAR 28
59063: PUSH
59064: LD_INT 14
59066: ST_TO_ADDR
// hc_gallery :=  ;
59067: LD_ADDR_OWVAR 33
59071: PUSH
59072: LD_STRING 
59074: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59075: LD_ADDR_OWVAR 35
59079: PUSH
59080: LD_VAR 0 1
59084: NEG
59085: PPUSH
59086: LD_VAR 0 1
59090: PPUSH
59091: CALL_OW 12
59095: ST_TO_ADDR
// end ;
59096: LD_VAR 0 2
59100: RET
// export function PrepareEnchidna ( ) ; begin
59101: LD_INT 0
59103: PPUSH
// uc_side := 0 ;
59104: LD_ADDR_OWVAR 20
59108: PUSH
59109: LD_INT 0
59111: ST_TO_ADDR
// uc_nation := 0 ;
59112: LD_ADDR_OWVAR 21
59116: PUSH
59117: LD_INT 0
59119: ST_TO_ADDR
// hc_class := class_baggie ;
59120: LD_ADDR_OWVAR 28
59124: PUSH
59125: LD_INT 13
59127: ST_TO_ADDR
// hc_gallery :=  ;
59128: LD_ADDR_OWVAR 33
59132: PUSH
59133: LD_STRING 
59135: ST_TO_ADDR
// end ;
59136: LD_VAR 0 1
59140: RET
// export function PrepareFrog ( ) ; begin
59141: LD_INT 0
59143: PPUSH
// uc_side := 0 ;
59144: LD_ADDR_OWVAR 20
59148: PUSH
59149: LD_INT 0
59151: ST_TO_ADDR
// uc_nation := 0 ;
59152: LD_ADDR_OWVAR 21
59156: PUSH
59157: LD_INT 0
59159: ST_TO_ADDR
// hc_class := class_frog ;
59160: LD_ADDR_OWVAR 28
59164: PUSH
59165: LD_INT 19
59167: ST_TO_ADDR
// hc_gallery :=  ;
59168: LD_ADDR_OWVAR 33
59172: PUSH
59173: LD_STRING 
59175: ST_TO_ADDR
// end ;
59176: LD_VAR 0 1
59180: RET
// export function PrepareFish ( ) ; begin
59181: LD_INT 0
59183: PPUSH
// uc_side := 0 ;
59184: LD_ADDR_OWVAR 20
59188: PUSH
59189: LD_INT 0
59191: ST_TO_ADDR
// uc_nation := 0 ;
59192: LD_ADDR_OWVAR 21
59196: PUSH
59197: LD_INT 0
59199: ST_TO_ADDR
// hc_class := class_fish ;
59200: LD_ADDR_OWVAR 28
59204: PUSH
59205: LD_INT 20
59207: ST_TO_ADDR
// hc_gallery :=  ;
59208: LD_ADDR_OWVAR 33
59212: PUSH
59213: LD_STRING 
59215: ST_TO_ADDR
// end ;
59216: LD_VAR 0 1
59220: RET
// export function PrepareBird ( ) ; begin
59221: LD_INT 0
59223: PPUSH
// uc_side := 0 ;
59224: LD_ADDR_OWVAR 20
59228: PUSH
59229: LD_INT 0
59231: ST_TO_ADDR
// uc_nation := 0 ;
59232: LD_ADDR_OWVAR 21
59236: PUSH
59237: LD_INT 0
59239: ST_TO_ADDR
// hc_class := class_phororhacos ;
59240: LD_ADDR_OWVAR 28
59244: PUSH
59245: LD_INT 18
59247: ST_TO_ADDR
// hc_gallery :=  ;
59248: LD_ADDR_OWVAR 33
59252: PUSH
59253: LD_STRING 
59255: ST_TO_ADDR
// end ;
59256: LD_VAR 0 1
59260: RET
// export function PrepareHorse ( ) ; begin
59261: LD_INT 0
59263: PPUSH
// uc_side := 0 ;
59264: LD_ADDR_OWVAR 20
59268: PUSH
59269: LD_INT 0
59271: ST_TO_ADDR
// uc_nation := 0 ;
59272: LD_ADDR_OWVAR 21
59276: PUSH
59277: LD_INT 0
59279: ST_TO_ADDR
// hc_class := class_horse ;
59280: LD_ADDR_OWVAR 28
59284: PUSH
59285: LD_INT 21
59287: ST_TO_ADDR
// hc_gallery :=  ;
59288: LD_ADDR_OWVAR 33
59292: PUSH
59293: LD_STRING 
59295: ST_TO_ADDR
// end ;
59296: LD_VAR 0 1
59300: RET
// export function PrepareMastodont ( ) ; begin
59301: LD_INT 0
59303: PPUSH
// uc_side := 0 ;
59304: LD_ADDR_OWVAR 20
59308: PUSH
59309: LD_INT 0
59311: ST_TO_ADDR
// uc_nation := 0 ;
59312: LD_ADDR_OWVAR 21
59316: PUSH
59317: LD_INT 0
59319: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59320: LD_ADDR_OWVAR 37
59324: PUSH
59325: LD_INT 31
59327: ST_TO_ADDR
// vc_control := control_rider ;
59328: LD_ADDR_OWVAR 38
59332: PUSH
59333: LD_INT 4
59335: ST_TO_ADDR
// end ;
59336: LD_VAR 0 1
59340: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59341: LD_INT 0
59343: PPUSH
59344: PPUSH
59345: PPUSH
// uc_side = 0 ;
59346: LD_ADDR_OWVAR 20
59350: PUSH
59351: LD_INT 0
59353: ST_TO_ADDR
// uc_nation = 0 ;
59354: LD_ADDR_OWVAR 21
59358: PUSH
59359: LD_INT 0
59361: ST_TO_ADDR
// InitHc_All ( ) ;
59362: CALL_OW 584
// InitVc ;
59366: CALL_OW 20
// if mastodonts then
59370: LD_VAR 0 6
59374: IFFALSE 59441
// for i = 1 to mastodonts do
59376: LD_ADDR_VAR 0 11
59380: PUSH
59381: DOUBLE
59382: LD_INT 1
59384: DEC
59385: ST_TO_ADDR
59386: LD_VAR 0 6
59390: PUSH
59391: FOR_TO
59392: IFFALSE 59439
// begin vc_chassis := 31 ;
59394: LD_ADDR_OWVAR 37
59398: PUSH
59399: LD_INT 31
59401: ST_TO_ADDR
// vc_control := control_rider ;
59402: LD_ADDR_OWVAR 38
59406: PUSH
59407: LD_INT 4
59409: ST_TO_ADDR
// animal := CreateVehicle ;
59410: LD_ADDR_VAR 0 12
59414: PUSH
59415: CALL_OW 45
59419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59420: LD_VAR 0 12
59424: PPUSH
59425: LD_VAR 0 8
59429: PPUSH
59430: LD_INT 0
59432: PPUSH
59433: CALL 61576 0 3
// end ;
59437: GO 59391
59439: POP
59440: POP
// if horses then
59441: LD_VAR 0 5
59445: IFFALSE 59512
// for i = 1 to horses do
59447: LD_ADDR_VAR 0 11
59451: PUSH
59452: DOUBLE
59453: LD_INT 1
59455: DEC
59456: ST_TO_ADDR
59457: LD_VAR 0 5
59461: PUSH
59462: FOR_TO
59463: IFFALSE 59510
// begin hc_class := 21 ;
59465: LD_ADDR_OWVAR 28
59469: PUSH
59470: LD_INT 21
59472: ST_TO_ADDR
// hc_gallery :=  ;
59473: LD_ADDR_OWVAR 33
59477: PUSH
59478: LD_STRING 
59480: ST_TO_ADDR
// animal := CreateHuman ;
59481: LD_ADDR_VAR 0 12
59485: PUSH
59486: CALL_OW 44
59490: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59491: LD_VAR 0 12
59495: PPUSH
59496: LD_VAR 0 8
59500: PPUSH
59501: LD_INT 0
59503: PPUSH
59504: CALL 61576 0 3
// end ;
59508: GO 59462
59510: POP
59511: POP
// if birds then
59512: LD_VAR 0 1
59516: IFFALSE 59583
// for i = 1 to birds do
59518: LD_ADDR_VAR 0 11
59522: PUSH
59523: DOUBLE
59524: LD_INT 1
59526: DEC
59527: ST_TO_ADDR
59528: LD_VAR 0 1
59532: PUSH
59533: FOR_TO
59534: IFFALSE 59581
// begin hc_class = 18 ;
59536: LD_ADDR_OWVAR 28
59540: PUSH
59541: LD_INT 18
59543: ST_TO_ADDR
// hc_gallery =  ;
59544: LD_ADDR_OWVAR 33
59548: PUSH
59549: LD_STRING 
59551: ST_TO_ADDR
// animal := CreateHuman ;
59552: LD_ADDR_VAR 0 12
59556: PUSH
59557: CALL_OW 44
59561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59562: LD_VAR 0 12
59566: PPUSH
59567: LD_VAR 0 8
59571: PPUSH
59572: LD_INT 0
59574: PPUSH
59575: CALL 61576 0 3
// end ;
59579: GO 59533
59581: POP
59582: POP
// if tigers then
59583: LD_VAR 0 2
59587: IFFALSE 59671
// for i = 1 to tigers do
59589: LD_ADDR_VAR 0 11
59593: PUSH
59594: DOUBLE
59595: LD_INT 1
59597: DEC
59598: ST_TO_ADDR
59599: LD_VAR 0 2
59603: PUSH
59604: FOR_TO
59605: IFFALSE 59669
// begin hc_class = class_tiger ;
59607: LD_ADDR_OWVAR 28
59611: PUSH
59612: LD_INT 14
59614: ST_TO_ADDR
// hc_gallery =  ;
59615: LD_ADDR_OWVAR 33
59619: PUSH
59620: LD_STRING 
59622: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59623: LD_ADDR_OWVAR 35
59627: PUSH
59628: LD_INT 7
59630: NEG
59631: PPUSH
59632: LD_INT 7
59634: PPUSH
59635: CALL_OW 12
59639: ST_TO_ADDR
// animal := CreateHuman ;
59640: LD_ADDR_VAR 0 12
59644: PUSH
59645: CALL_OW 44
59649: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59650: LD_VAR 0 12
59654: PPUSH
59655: LD_VAR 0 8
59659: PPUSH
59660: LD_INT 0
59662: PPUSH
59663: CALL 61576 0 3
// end ;
59667: GO 59604
59669: POP
59670: POP
// if apemans then
59671: LD_VAR 0 3
59675: IFFALSE 59798
// for i = 1 to apemans do
59677: LD_ADDR_VAR 0 11
59681: PUSH
59682: DOUBLE
59683: LD_INT 1
59685: DEC
59686: ST_TO_ADDR
59687: LD_VAR 0 3
59691: PUSH
59692: FOR_TO
59693: IFFALSE 59796
// begin hc_class = class_apeman ;
59695: LD_ADDR_OWVAR 28
59699: PUSH
59700: LD_INT 12
59702: ST_TO_ADDR
// hc_gallery =  ;
59703: LD_ADDR_OWVAR 33
59707: PUSH
59708: LD_STRING 
59710: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59711: LD_ADDR_OWVAR 35
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PPUSH
59720: LD_INT 2
59722: PPUSH
59723: CALL_OW 12
59727: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59728: LD_ADDR_OWVAR 31
59732: PUSH
59733: LD_INT 1
59735: PPUSH
59736: LD_INT 3
59738: PPUSH
59739: CALL_OW 12
59743: PUSH
59744: LD_INT 1
59746: PPUSH
59747: LD_INT 3
59749: PPUSH
59750: CALL_OW 12
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: ST_TO_ADDR
// animal := CreateHuman ;
59767: LD_ADDR_VAR 0 12
59771: PUSH
59772: CALL_OW 44
59776: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59777: LD_VAR 0 12
59781: PPUSH
59782: LD_VAR 0 8
59786: PPUSH
59787: LD_INT 0
59789: PPUSH
59790: CALL 61576 0 3
// end ;
59794: GO 59692
59796: POP
59797: POP
// if enchidnas then
59798: LD_VAR 0 4
59802: IFFALSE 59869
// for i = 1 to enchidnas do
59804: LD_ADDR_VAR 0 11
59808: PUSH
59809: DOUBLE
59810: LD_INT 1
59812: DEC
59813: ST_TO_ADDR
59814: LD_VAR 0 4
59818: PUSH
59819: FOR_TO
59820: IFFALSE 59867
// begin hc_class = 13 ;
59822: LD_ADDR_OWVAR 28
59826: PUSH
59827: LD_INT 13
59829: ST_TO_ADDR
// hc_gallery =  ;
59830: LD_ADDR_OWVAR 33
59834: PUSH
59835: LD_STRING 
59837: ST_TO_ADDR
// animal := CreateHuman ;
59838: LD_ADDR_VAR 0 12
59842: PUSH
59843: CALL_OW 44
59847: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59848: LD_VAR 0 12
59852: PPUSH
59853: LD_VAR 0 8
59857: PPUSH
59858: LD_INT 0
59860: PPUSH
59861: CALL 61576 0 3
// end ;
59865: GO 59819
59867: POP
59868: POP
// if fishes then
59869: LD_VAR 0 7
59873: IFFALSE 59940
// for i = 1 to fishes do
59875: LD_ADDR_VAR 0 11
59879: PUSH
59880: DOUBLE
59881: LD_INT 1
59883: DEC
59884: ST_TO_ADDR
59885: LD_VAR 0 7
59889: PUSH
59890: FOR_TO
59891: IFFALSE 59938
// begin hc_class = 20 ;
59893: LD_ADDR_OWVAR 28
59897: PUSH
59898: LD_INT 20
59900: ST_TO_ADDR
// hc_gallery =  ;
59901: LD_ADDR_OWVAR 33
59905: PUSH
59906: LD_STRING 
59908: ST_TO_ADDR
// animal := CreateHuman ;
59909: LD_ADDR_VAR 0 12
59913: PUSH
59914: CALL_OW 44
59918: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59919: LD_VAR 0 12
59923: PPUSH
59924: LD_VAR 0 9
59928: PPUSH
59929: LD_INT 0
59931: PPUSH
59932: CALL 61576 0 3
// end ;
59936: GO 59890
59938: POP
59939: POP
// end ;
59940: LD_VAR 0 10
59944: RET
// export function WantHeal ( sci , unit ) ; begin
59945: LD_INT 0
59947: PPUSH
// if GetTaskList ( sci ) > 0 then
59948: LD_VAR 0 1
59952: PPUSH
59953: CALL_OW 437
59957: PUSH
59958: LD_INT 0
59960: GREATER
59961: IFFALSE 60031
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59963: LD_VAR 0 1
59967: PPUSH
59968: CALL_OW 437
59972: PUSH
59973: LD_INT 1
59975: ARRAY
59976: PUSH
59977: LD_INT 1
59979: ARRAY
59980: PUSH
59981: LD_STRING l
59983: EQUAL
59984: PUSH
59985: LD_VAR 0 1
59989: PPUSH
59990: CALL_OW 437
59994: PUSH
59995: LD_INT 1
59997: ARRAY
59998: PUSH
59999: LD_INT 4
60001: ARRAY
60002: PUSH
60003: LD_VAR 0 2
60007: EQUAL
60008: AND
60009: IFFALSE 60021
// result := true else
60011: LD_ADDR_VAR 0 3
60015: PUSH
60016: LD_INT 1
60018: ST_TO_ADDR
60019: GO 60029
// result := false ;
60021: LD_ADDR_VAR 0 3
60025: PUSH
60026: LD_INT 0
60028: ST_TO_ADDR
// end else
60029: GO 60039
// result := false ;
60031: LD_ADDR_VAR 0 3
60035: PUSH
60036: LD_INT 0
60038: ST_TO_ADDR
// end ;
60039: LD_VAR 0 3
60043: RET
// export function HealTarget ( sci ) ; begin
60044: LD_INT 0
60046: PPUSH
// if not sci then
60047: LD_VAR 0 1
60051: NOT
60052: IFFALSE 60056
// exit ;
60054: GO 60121
// result := 0 ;
60056: LD_ADDR_VAR 0 2
60060: PUSH
60061: LD_INT 0
60063: ST_TO_ADDR
// if GetTaskList ( sci ) then
60064: LD_VAR 0 1
60068: PPUSH
60069: CALL_OW 437
60073: IFFALSE 60121
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60075: LD_VAR 0 1
60079: PPUSH
60080: CALL_OW 437
60084: PUSH
60085: LD_INT 1
60087: ARRAY
60088: PUSH
60089: LD_INT 1
60091: ARRAY
60092: PUSH
60093: LD_STRING l
60095: EQUAL
60096: IFFALSE 60121
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60098: LD_ADDR_VAR 0 2
60102: PUSH
60103: LD_VAR 0 1
60107: PPUSH
60108: CALL_OW 437
60112: PUSH
60113: LD_INT 1
60115: ARRAY
60116: PUSH
60117: LD_INT 4
60119: ARRAY
60120: ST_TO_ADDR
// end ;
60121: LD_VAR 0 2
60125: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60126: LD_INT 0
60128: PPUSH
60129: PPUSH
60130: PPUSH
60131: PPUSH
// if not base_units then
60132: LD_VAR 0 1
60136: NOT
60137: IFFALSE 60141
// exit ;
60139: GO 60228
// result := false ;
60141: LD_ADDR_VAR 0 2
60145: PUSH
60146: LD_INT 0
60148: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60149: LD_ADDR_VAR 0 5
60153: PUSH
60154: LD_VAR 0 1
60158: PPUSH
60159: LD_INT 21
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PPUSH
60169: CALL_OW 72
60173: ST_TO_ADDR
// if not tmp then
60174: LD_VAR 0 5
60178: NOT
60179: IFFALSE 60183
// exit ;
60181: GO 60228
// for i in tmp do
60183: LD_ADDR_VAR 0 3
60187: PUSH
60188: LD_VAR 0 5
60192: PUSH
60193: FOR_IN
60194: IFFALSE 60226
// begin result := EnemyInRange ( i , 22 ) ;
60196: LD_ADDR_VAR 0 2
60200: PUSH
60201: LD_VAR 0 3
60205: PPUSH
60206: LD_INT 22
60208: PPUSH
60209: CALL 57914 0 2
60213: ST_TO_ADDR
// if result then
60214: LD_VAR 0 2
60218: IFFALSE 60224
// exit ;
60220: POP
60221: POP
60222: GO 60228
// end ;
60224: GO 60193
60226: POP
60227: POP
// end ;
60228: LD_VAR 0 2
60232: RET
// export function FilterByTag ( units , tag ) ; begin
60233: LD_INT 0
60235: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60236: LD_ADDR_VAR 0 3
60240: PUSH
60241: LD_VAR 0 1
60245: PPUSH
60246: LD_INT 120
60248: PUSH
60249: LD_VAR 0 2
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PPUSH
60258: CALL_OW 72
60262: ST_TO_ADDR
// end ;
60263: LD_VAR 0 3
60267: RET
// export function IsDriver ( un ) ; begin
60268: LD_INT 0
60270: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60271: LD_ADDR_VAR 0 2
60275: PUSH
60276: LD_VAR 0 1
60280: PUSH
60281: LD_INT 55
60283: PUSH
60284: EMPTY
60285: LIST
60286: PPUSH
60287: CALL_OW 69
60291: IN
60292: ST_TO_ADDR
// end ;
60293: LD_VAR 0 2
60297: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60298: LD_INT 0
60300: PPUSH
60301: PPUSH
// list := [ ] ;
60302: LD_ADDR_VAR 0 5
60306: PUSH
60307: EMPTY
60308: ST_TO_ADDR
// case d of 0 :
60309: LD_VAR 0 3
60313: PUSH
60314: LD_INT 0
60316: DOUBLE
60317: EQUAL
60318: IFTRUE 60322
60320: GO 60455
60322: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60323: LD_ADDR_VAR 0 5
60327: PUSH
60328: LD_VAR 0 1
60332: PUSH
60333: LD_INT 4
60335: MINUS
60336: PUSH
60337: LD_VAR 0 2
60341: PUSH
60342: LD_INT 4
60344: MINUS
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: LIST
60353: PUSH
60354: LD_VAR 0 1
60358: PUSH
60359: LD_INT 3
60361: MINUS
60362: PUSH
60363: LD_VAR 0 2
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: LIST
60375: PUSH
60376: LD_VAR 0 1
60380: PUSH
60381: LD_INT 4
60383: PLUS
60384: PUSH
60385: LD_VAR 0 2
60389: PUSH
60390: LD_INT 4
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: LIST
60397: PUSH
60398: LD_VAR 0 1
60402: PUSH
60403: LD_INT 3
60405: PLUS
60406: PUSH
60407: LD_VAR 0 2
60411: PUSH
60412: LD_INT 3
60414: PLUS
60415: PUSH
60416: LD_INT 5
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: LIST
60423: PUSH
60424: LD_VAR 0 1
60428: PUSH
60429: LD_VAR 0 2
60433: PUSH
60434: LD_INT 4
60436: PLUS
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: LIST
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: ST_TO_ADDR
// end ; 1 :
60453: GO 61153
60455: LD_INT 1
60457: DOUBLE
60458: EQUAL
60459: IFTRUE 60463
60461: GO 60596
60463: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60464: LD_ADDR_VAR 0 5
60468: PUSH
60469: LD_VAR 0 1
60473: PUSH
60474: LD_VAR 0 2
60478: PUSH
60479: LD_INT 4
60481: MINUS
60482: PUSH
60483: LD_INT 3
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: LIST
60490: PUSH
60491: LD_VAR 0 1
60495: PUSH
60496: LD_INT 3
60498: MINUS
60499: PUSH
60500: LD_VAR 0 2
60504: PUSH
60505: LD_INT 3
60507: MINUS
60508: PUSH
60509: LD_INT 2
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: PUSH
60517: LD_VAR 0 1
60521: PUSH
60522: LD_INT 4
60524: MINUS
60525: PUSH
60526: LD_VAR 0 2
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: LIST
60538: PUSH
60539: LD_VAR 0 1
60543: PUSH
60544: LD_VAR 0 2
60548: PUSH
60549: LD_INT 3
60551: PLUS
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: LIST
60560: PUSH
60561: LD_VAR 0 1
60565: PUSH
60566: LD_INT 4
60568: PLUS
60569: PUSH
60570: LD_VAR 0 2
60574: PUSH
60575: LD_INT 4
60577: PLUS
60578: PUSH
60579: LD_INT 5
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: LIST
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: ST_TO_ADDR
// end ; 2 :
60594: GO 61153
60596: LD_INT 2
60598: DOUBLE
60599: EQUAL
60600: IFTRUE 60604
60602: GO 60733
60604: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60605: LD_ADDR_VAR 0 5
60609: PUSH
60610: LD_VAR 0 1
60614: PUSH
60615: LD_VAR 0 2
60619: PUSH
60620: LD_INT 3
60622: MINUS
60623: PUSH
60624: LD_INT 3
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: LIST
60631: PUSH
60632: LD_VAR 0 1
60636: PUSH
60637: LD_INT 4
60639: PLUS
60640: PUSH
60641: LD_VAR 0 2
60645: PUSH
60646: LD_INT 4
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: LIST
60653: PUSH
60654: LD_VAR 0 1
60658: PUSH
60659: LD_VAR 0 2
60663: PUSH
60664: LD_INT 4
60666: PLUS
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: PUSH
60676: LD_VAR 0 1
60680: PUSH
60681: LD_INT 3
60683: MINUS
60684: PUSH
60685: LD_VAR 0 2
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: LIST
60697: PUSH
60698: LD_VAR 0 1
60702: PUSH
60703: LD_INT 4
60705: MINUS
60706: PUSH
60707: LD_VAR 0 2
60711: PUSH
60712: LD_INT 4
60714: MINUS
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: ST_TO_ADDR
// end ; 3 :
60731: GO 61153
60733: LD_INT 3
60735: DOUBLE
60736: EQUAL
60737: IFTRUE 60741
60739: GO 60874
60741: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60742: LD_ADDR_VAR 0 5
60746: PUSH
60747: LD_VAR 0 1
60751: PUSH
60752: LD_INT 3
60754: PLUS
60755: PUSH
60756: LD_VAR 0 2
60760: PUSH
60761: LD_INT 4
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: LIST
60768: PUSH
60769: LD_VAR 0 1
60773: PUSH
60774: LD_INT 4
60776: PLUS
60777: PUSH
60778: LD_VAR 0 2
60782: PUSH
60783: LD_INT 4
60785: PLUS
60786: PUSH
60787: LD_INT 5
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: LIST
60794: PUSH
60795: LD_VAR 0 1
60799: PUSH
60800: LD_INT 4
60802: MINUS
60803: PUSH
60804: LD_VAR 0 2
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: LIST
60816: PUSH
60817: LD_VAR 0 1
60821: PUSH
60822: LD_VAR 0 2
60826: PUSH
60827: LD_INT 4
60829: MINUS
60830: PUSH
60831: LD_INT 3
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: LIST
60838: PUSH
60839: LD_VAR 0 1
60843: PUSH
60844: LD_INT 3
60846: MINUS
60847: PUSH
60848: LD_VAR 0 2
60852: PUSH
60853: LD_INT 3
60855: MINUS
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: ST_TO_ADDR
// end ; 4 :
60872: GO 61153
60874: LD_INT 4
60876: DOUBLE
60877: EQUAL
60878: IFTRUE 60882
60880: GO 61015
60882: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60883: LD_ADDR_VAR 0 5
60887: PUSH
60888: LD_VAR 0 1
60892: PUSH
60893: LD_VAR 0 2
60897: PUSH
60898: LD_INT 4
60900: PLUS
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: LIST
60909: PUSH
60910: LD_VAR 0 1
60914: PUSH
60915: LD_INT 3
60917: PLUS
60918: PUSH
60919: LD_VAR 0 2
60923: PUSH
60924: LD_INT 3
60926: PLUS
60927: PUSH
60928: LD_INT 5
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: LIST
60935: PUSH
60936: LD_VAR 0 1
60940: PUSH
60941: LD_INT 4
60943: PLUS
60944: PUSH
60945: LD_VAR 0 2
60949: PUSH
60950: LD_INT 4
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: LIST
60957: PUSH
60958: LD_VAR 0 1
60962: PUSH
60963: LD_VAR 0 2
60967: PUSH
60968: LD_INT 3
60970: MINUS
60971: PUSH
60972: LD_INT 3
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: PUSH
60980: LD_VAR 0 1
60984: PUSH
60985: LD_INT 4
60987: MINUS
60988: PUSH
60989: LD_VAR 0 2
60993: PUSH
60994: LD_INT 4
60996: MINUS
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: LIST
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: ST_TO_ADDR
// end ; 5 :
61013: GO 61153
61015: LD_INT 5
61017: DOUBLE
61018: EQUAL
61019: IFTRUE 61023
61021: GO 61152
61023: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61024: LD_ADDR_VAR 0 5
61028: PUSH
61029: LD_VAR 0 1
61033: PUSH
61034: LD_INT 4
61036: MINUS
61037: PUSH
61038: LD_VAR 0 2
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: PUSH
61051: LD_VAR 0 1
61055: PUSH
61056: LD_VAR 0 2
61060: PUSH
61061: LD_INT 4
61063: MINUS
61064: PUSH
61065: LD_INT 3
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: LIST
61072: PUSH
61073: LD_VAR 0 1
61077: PUSH
61078: LD_INT 4
61080: PLUS
61081: PUSH
61082: LD_VAR 0 2
61086: PUSH
61087: LD_INT 4
61089: PLUS
61090: PUSH
61091: LD_INT 5
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: LIST
61098: PUSH
61099: LD_VAR 0 1
61103: PUSH
61104: LD_INT 3
61106: PLUS
61107: PUSH
61108: LD_VAR 0 2
61112: PUSH
61113: LD_INT 4
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: PUSH
61121: LD_VAR 0 1
61125: PUSH
61126: LD_VAR 0 2
61130: PUSH
61131: LD_INT 3
61133: PLUS
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: LIST
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: ST_TO_ADDR
// end ; end ;
61150: GO 61153
61152: POP
// result := list ;
61153: LD_ADDR_VAR 0 4
61157: PUSH
61158: LD_VAR 0 5
61162: ST_TO_ADDR
// end ;
61163: LD_VAR 0 4
61167: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61168: LD_INT 0
61170: PPUSH
61171: PPUSH
61172: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61173: LD_VAR 0 1
61177: NOT
61178: PUSH
61179: LD_VAR 0 2
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: LD_INT 4
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: IN
61202: NOT
61203: OR
61204: IFFALSE 61208
// exit ;
61206: GO 61300
// tmp := [ ] ;
61208: LD_ADDR_VAR 0 5
61212: PUSH
61213: EMPTY
61214: ST_TO_ADDR
// for i in units do
61215: LD_ADDR_VAR 0 4
61219: PUSH
61220: LD_VAR 0 1
61224: PUSH
61225: FOR_IN
61226: IFFALSE 61269
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61228: LD_ADDR_VAR 0 5
61232: PUSH
61233: LD_VAR 0 5
61237: PPUSH
61238: LD_VAR 0 5
61242: PUSH
61243: LD_INT 1
61245: PLUS
61246: PPUSH
61247: LD_VAR 0 4
61251: PPUSH
61252: LD_VAR 0 2
61256: PPUSH
61257: CALL_OW 259
61261: PPUSH
61262: CALL_OW 2
61266: ST_TO_ADDR
61267: GO 61225
61269: POP
61270: POP
// if not tmp then
61271: LD_VAR 0 5
61275: NOT
61276: IFFALSE 61280
// exit ;
61278: GO 61300
// result := SortListByListDesc ( units , tmp ) ;
61280: LD_ADDR_VAR 0 3
61284: PUSH
61285: LD_VAR 0 1
61289: PPUSH
61290: LD_VAR 0 5
61294: PPUSH
61295: CALL_OW 77
61299: ST_TO_ADDR
// end ;
61300: LD_VAR 0 3
61304: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61305: LD_INT 0
61307: PPUSH
61308: PPUSH
61309: PPUSH
// result := false ;
61310: LD_ADDR_VAR 0 3
61314: PUSH
61315: LD_INT 0
61317: ST_TO_ADDR
// x := GetX ( building ) ;
61318: LD_ADDR_VAR 0 4
61322: PUSH
61323: LD_VAR 0 2
61327: PPUSH
61328: CALL_OW 250
61332: ST_TO_ADDR
// y := GetY ( building ) ;
61333: LD_ADDR_VAR 0 5
61337: PUSH
61338: LD_VAR 0 2
61342: PPUSH
61343: CALL_OW 251
61347: ST_TO_ADDR
// if not building or not x or not y then
61348: LD_VAR 0 2
61352: NOT
61353: PUSH
61354: LD_VAR 0 4
61358: NOT
61359: OR
61360: PUSH
61361: LD_VAR 0 5
61365: NOT
61366: OR
61367: IFFALSE 61371
// exit ;
61369: GO 61463
// if GetTaskList ( unit ) then
61371: LD_VAR 0 1
61375: PPUSH
61376: CALL_OW 437
61380: IFFALSE 61463
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61382: LD_STRING e
61384: PUSH
61385: LD_VAR 0 1
61389: PPUSH
61390: CALL_OW 437
61394: PUSH
61395: LD_INT 1
61397: ARRAY
61398: PUSH
61399: LD_INT 1
61401: ARRAY
61402: EQUAL
61403: PUSH
61404: LD_VAR 0 4
61408: PUSH
61409: LD_VAR 0 1
61413: PPUSH
61414: CALL_OW 437
61418: PUSH
61419: LD_INT 1
61421: ARRAY
61422: PUSH
61423: LD_INT 2
61425: ARRAY
61426: EQUAL
61427: AND
61428: PUSH
61429: LD_VAR 0 5
61433: PUSH
61434: LD_VAR 0 1
61438: PPUSH
61439: CALL_OW 437
61443: PUSH
61444: LD_INT 1
61446: ARRAY
61447: PUSH
61448: LD_INT 3
61450: ARRAY
61451: EQUAL
61452: AND
61453: IFFALSE 61463
// result := true end ;
61455: LD_ADDR_VAR 0 3
61459: PUSH
61460: LD_INT 1
61462: ST_TO_ADDR
// end ;
61463: LD_VAR 0 3
61467: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61468: LD_INT 0
61470: PPUSH
// result := false ;
61471: LD_ADDR_VAR 0 4
61475: PUSH
61476: LD_INT 0
61478: ST_TO_ADDR
// if GetTaskList ( unit ) then
61479: LD_VAR 0 1
61483: PPUSH
61484: CALL_OW 437
61488: IFFALSE 61571
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61490: LD_STRING M
61492: PUSH
61493: LD_VAR 0 1
61497: PPUSH
61498: CALL_OW 437
61502: PUSH
61503: LD_INT 1
61505: ARRAY
61506: PUSH
61507: LD_INT 1
61509: ARRAY
61510: EQUAL
61511: PUSH
61512: LD_VAR 0 2
61516: PUSH
61517: LD_VAR 0 1
61521: PPUSH
61522: CALL_OW 437
61526: PUSH
61527: LD_INT 1
61529: ARRAY
61530: PUSH
61531: LD_INT 2
61533: ARRAY
61534: EQUAL
61535: AND
61536: PUSH
61537: LD_VAR 0 3
61541: PUSH
61542: LD_VAR 0 1
61546: PPUSH
61547: CALL_OW 437
61551: PUSH
61552: LD_INT 1
61554: ARRAY
61555: PUSH
61556: LD_INT 3
61558: ARRAY
61559: EQUAL
61560: AND
61561: IFFALSE 61571
// result := true ;
61563: LD_ADDR_VAR 0 4
61567: PUSH
61568: LD_INT 1
61570: ST_TO_ADDR
// end ; end ;
61571: LD_VAR 0 4
61575: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61576: LD_INT 0
61578: PPUSH
61579: PPUSH
61580: PPUSH
61581: PPUSH
// if not unit or not area then
61582: LD_VAR 0 1
61586: NOT
61587: PUSH
61588: LD_VAR 0 2
61592: NOT
61593: OR
61594: IFFALSE 61598
// exit ;
61596: GO 61762
// tmp := AreaToList ( area , i ) ;
61598: LD_ADDR_VAR 0 6
61602: PUSH
61603: LD_VAR 0 2
61607: PPUSH
61608: LD_VAR 0 5
61612: PPUSH
61613: CALL_OW 517
61617: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61618: LD_ADDR_VAR 0 5
61622: PUSH
61623: DOUBLE
61624: LD_INT 1
61626: DEC
61627: ST_TO_ADDR
61628: LD_VAR 0 6
61632: PUSH
61633: LD_INT 1
61635: ARRAY
61636: PUSH
61637: FOR_TO
61638: IFFALSE 61760
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61640: LD_ADDR_VAR 0 7
61644: PUSH
61645: LD_VAR 0 6
61649: PUSH
61650: LD_INT 1
61652: ARRAY
61653: PUSH
61654: LD_VAR 0 5
61658: ARRAY
61659: PUSH
61660: LD_VAR 0 6
61664: PUSH
61665: LD_INT 2
61667: ARRAY
61668: PUSH
61669: LD_VAR 0 5
61673: ARRAY
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61679: LD_VAR 0 7
61683: PUSH
61684: LD_INT 1
61686: ARRAY
61687: PPUSH
61688: LD_VAR 0 7
61692: PUSH
61693: LD_INT 2
61695: ARRAY
61696: PPUSH
61697: CALL_OW 428
61701: PUSH
61702: LD_INT 0
61704: EQUAL
61705: IFFALSE 61758
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61707: LD_VAR 0 1
61711: PPUSH
61712: LD_VAR 0 7
61716: PUSH
61717: LD_INT 1
61719: ARRAY
61720: PPUSH
61721: LD_VAR 0 7
61725: PUSH
61726: LD_INT 2
61728: ARRAY
61729: PPUSH
61730: LD_VAR 0 3
61734: PPUSH
61735: CALL_OW 48
// result := IsPlaced ( unit ) ;
61739: LD_ADDR_VAR 0 4
61743: PUSH
61744: LD_VAR 0 1
61748: PPUSH
61749: CALL_OW 305
61753: ST_TO_ADDR
// exit ;
61754: POP
61755: POP
61756: GO 61762
// end ; end ;
61758: GO 61637
61760: POP
61761: POP
// end ;
61762: LD_VAR 0 4
61766: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61767: LD_INT 0
61769: PPUSH
61770: PPUSH
61771: PPUSH
// if not side or side > 8 then
61772: LD_VAR 0 1
61776: NOT
61777: PUSH
61778: LD_VAR 0 1
61782: PUSH
61783: LD_INT 8
61785: GREATER
61786: OR
61787: IFFALSE 61791
// exit ;
61789: GO 61978
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61791: LD_ADDR_VAR 0 4
61795: PUSH
61796: LD_INT 22
61798: PUSH
61799: LD_VAR 0 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 21
61810: PUSH
61811: LD_INT 3
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PPUSH
61822: CALL_OW 69
61826: ST_TO_ADDR
// if not tmp then
61827: LD_VAR 0 4
61831: NOT
61832: IFFALSE 61836
// exit ;
61834: GO 61978
// enable_addtolog := true ;
61836: LD_ADDR_OWVAR 81
61840: PUSH
61841: LD_INT 1
61843: ST_TO_ADDR
// AddToLog ( [ ) ;
61844: LD_STRING [
61846: PPUSH
61847: CALL_OW 561
// for i in tmp do
61851: LD_ADDR_VAR 0 3
61855: PUSH
61856: LD_VAR 0 4
61860: PUSH
61861: FOR_IN
61862: IFFALSE 61969
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61864: LD_STRING [
61866: PUSH
61867: LD_VAR 0 3
61871: PPUSH
61872: CALL_OW 266
61876: STR
61877: PUSH
61878: LD_STRING , 
61880: STR
61881: PUSH
61882: LD_VAR 0 3
61886: PPUSH
61887: CALL_OW 250
61891: STR
61892: PUSH
61893: LD_STRING , 
61895: STR
61896: PUSH
61897: LD_VAR 0 3
61901: PPUSH
61902: CALL_OW 251
61906: STR
61907: PUSH
61908: LD_STRING , 
61910: STR
61911: PUSH
61912: LD_VAR 0 3
61916: PPUSH
61917: CALL_OW 254
61921: STR
61922: PUSH
61923: LD_STRING , 
61925: STR
61926: PUSH
61927: LD_VAR 0 3
61931: PPUSH
61932: LD_INT 1
61934: PPUSH
61935: CALL_OW 268
61939: STR
61940: PUSH
61941: LD_STRING , 
61943: STR
61944: PUSH
61945: LD_VAR 0 3
61949: PPUSH
61950: LD_INT 2
61952: PPUSH
61953: CALL_OW 268
61957: STR
61958: PUSH
61959: LD_STRING ],
61961: STR
61962: PPUSH
61963: CALL_OW 561
// end ;
61967: GO 61861
61969: POP
61970: POP
// AddToLog ( ]; ) ;
61971: LD_STRING ];
61973: PPUSH
61974: CALL_OW 561
// end ;
61978: LD_VAR 0 2
61982: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61983: LD_INT 0
61985: PPUSH
61986: PPUSH
61987: PPUSH
61988: PPUSH
61989: PPUSH
// if not area or not rate or not max then
61990: LD_VAR 0 1
61994: NOT
61995: PUSH
61996: LD_VAR 0 2
62000: NOT
62001: OR
62002: PUSH
62003: LD_VAR 0 4
62007: NOT
62008: OR
62009: IFFALSE 62013
// exit ;
62011: GO 62202
// while 1 do
62013: LD_INT 1
62015: IFFALSE 62202
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62017: LD_ADDR_VAR 0 9
62021: PUSH
62022: LD_VAR 0 1
62026: PPUSH
62027: LD_INT 1
62029: PPUSH
62030: CALL_OW 287
62034: PUSH
62035: LD_INT 10
62037: MUL
62038: ST_TO_ADDR
// r := rate / 10 ;
62039: LD_ADDR_VAR 0 7
62043: PUSH
62044: LD_VAR 0 2
62048: PUSH
62049: LD_INT 10
62051: DIVREAL
62052: ST_TO_ADDR
// time := 1 1$00 ;
62053: LD_ADDR_VAR 0 8
62057: PUSH
62058: LD_INT 2100
62060: ST_TO_ADDR
// if amount < min then
62061: LD_VAR 0 9
62065: PUSH
62066: LD_VAR 0 3
62070: LESS
62071: IFFALSE 62089
// r := r * 2 else
62073: LD_ADDR_VAR 0 7
62077: PUSH
62078: LD_VAR 0 7
62082: PUSH
62083: LD_INT 2
62085: MUL
62086: ST_TO_ADDR
62087: GO 62115
// if amount > max then
62089: LD_VAR 0 9
62093: PUSH
62094: LD_VAR 0 4
62098: GREATER
62099: IFFALSE 62115
// r := r / 2 ;
62101: LD_ADDR_VAR 0 7
62105: PUSH
62106: LD_VAR 0 7
62110: PUSH
62111: LD_INT 2
62113: DIVREAL
62114: ST_TO_ADDR
// time := time / r ;
62115: LD_ADDR_VAR 0 8
62119: PUSH
62120: LD_VAR 0 8
62124: PUSH
62125: LD_VAR 0 7
62129: DIVREAL
62130: ST_TO_ADDR
// if time < 0 then
62131: LD_VAR 0 8
62135: PUSH
62136: LD_INT 0
62138: LESS
62139: IFFALSE 62156
// time := time * - 1 ;
62141: LD_ADDR_VAR 0 8
62145: PUSH
62146: LD_VAR 0 8
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: MUL
62155: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62156: LD_VAR 0 8
62160: PUSH
62161: LD_INT 35
62163: PPUSH
62164: LD_INT 875
62166: PPUSH
62167: CALL_OW 12
62171: PLUS
62172: PPUSH
62173: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62177: LD_INT 1
62179: PPUSH
62180: LD_INT 5
62182: PPUSH
62183: CALL_OW 12
62187: PPUSH
62188: LD_VAR 0 1
62192: PPUSH
62193: LD_INT 1
62195: PPUSH
62196: CALL_OW 55
// end ;
62200: GO 62013
// end ;
62202: LD_VAR 0 5
62206: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62207: LD_INT 0
62209: PPUSH
62210: PPUSH
62211: PPUSH
62212: PPUSH
62213: PPUSH
62214: PPUSH
62215: PPUSH
62216: PPUSH
// if not turrets or not factories then
62217: LD_VAR 0 1
62221: NOT
62222: PUSH
62223: LD_VAR 0 2
62227: NOT
62228: OR
62229: IFFALSE 62233
// exit ;
62231: GO 62540
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62233: LD_ADDR_VAR 0 10
62237: PUSH
62238: LD_INT 5
62240: PUSH
62241: LD_INT 6
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: LD_INT 4
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 3
62260: PUSH
62261: LD_INT 5
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 24
62275: PUSH
62276: LD_INT 25
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 23
62285: PUSH
62286: LD_INT 27
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 42
62299: PUSH
62300: LD_INT 43
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 44
62309: PUSH
62310: LD_INT 46
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 45
62319: PUSH
62320: LD_INT 47
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: LIST
62336: ST_TO_ADDR
// result := [ ] ;
62337: LD_ADDR_VAR 0 3
62341: PUSH
62342: EMPTY
62343: ST_TO_ADDR
// for i in turrets do
62344: LD_ADDR_VAR 0 4
62348: PUSH
62349: LD_VAR 0 1
62353: PUSH
62354: FOR_IN
62355: IFFALSE 62538
// begin nat := GetNation ( i ) ;
62357: LD_ADDR_VAR 0 7
62361: PUSH
62362: LD_VAR 0 4
62366: PPUSH
62367: CALL_OW 248
62371: ST_TO_ADDR
// weapon := 0 ;
62372: LD_ADDR_VAR 0 8
62376: PUSH
62377: LD_INT 0
62379: ST_TO_ADDR
// if not nat then
62380: LD_VAR 0 7
62384: NOT
62385: IFFALSE 62389
// continue ;
62387: GO 62354
// for j in list [ nat ] do
62389: LD_ADDR_VAR 0 5
62393: PUSH
62394: LD_VAR 0 10
62398: PUSH
62399: LD_VAR 0 7
62403: ARRAY
62404: PUSH
62405: FOR_IN
62406: IFFALSE 62447
// if GetBWeapon ( i ) = j [ 1 ] then
62408: LD_VAR 0 4
62412: PPUSH
62413: CALL_OW 269
62417: PUSH
62418: LD_VAR 0 5
62422: PUSH
62423: LD_INT 1
62425: ARRAY
62426: EQUAL
62427: IFFALSE 62445
// begin weapon := j [ 2 ] ;
62429: LD_ADDR_VAR 0 8
62433: PUSH
62434: LD_VAR 0 5
62438: PUSH
62439: LD_INT 2
62441: ARRAY
62442: ST_TO_ADDR
// break ;
62443: GO 62447
// end ;
62445: GO 62405
62447: POP
62448: POP
// if not weapon then
62449: LD_VAR 0 8
62453: NOT
62454: IFFALSE 62458
// continue ;
62456: GO 62354
// for k in factories do
62458: LD_ADDR_VAR 0 6
62462: PUSH
62463: LD_VAR 0 2
62467: PUSH
62468: FOR_IN
62469: IFFALSE 62534
// begin weapons := AvailableWeaponList ( k ) ;
62471: LD_ADDR_VAR 0 9
62475: PUSH
62476: LD_VAR 0 6
62480: PPUSH
62481: CALL_OW 478
62485: ST_TO_ADDR
// if not weapons then
62486: LD_VAR 0 9
62490: NOT
62491: IFFALSE 62495
// continue ;
62493: GO 62468
// if weapon in weapons then
62495: LD_VAR 0 8
62499: PUSH
62500: LD_VAR 0 9
62504: IN
62505: IFFALSE 62532
// begin result := [ i , weapon ] ;
62507: LD_ADDR_VAR 0 3
62511: PUSH
62512: LD_VAR 0 4
62516: PUSH
62517: LD_VAR 0 8
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// exit ;
62526: POP
62527: POP
62528: POP
62529: POP
62530: GO 62540
// end ; end ;
62532: GO 62468
62534: POP
62535: POP
// end ;
62536: GO 62354
62538: POP
62539: POP
// end ;
62540: LD_VAR 0 3
62544: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62545: LD_INT 0
62547: PPUSH
// if not side or side > 8 then
62548: LD_VAR 0 3
62552: NOT
62553: PUSH
62554: LD_VAR 0 3
62558: PUSH
62559: LD_INT 8
62561: GREATER
62562: OR
62563: IFFALSE 62567
// exit ;
62565: GO 62626
// if not range then
62567: LD_VAR 0 4
62571: NOT
62572: IFFALSE 62583
// range := - 12 ;
62574: LD_ADDR_VAR 0 4
62578: PUSH
62579: LD_INT 12
62581: NEG
62582: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62583: LD_VAR 0 1
62587: PPUSH
62588: LD_VAR 0 2
62592: PPUSH
62593: LD_VAR 0 3
62597: PPUSH
62598: LD_VAR 0 4
62602: PPUSH
62603: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62607: LD_VAR 0 1
62611: PPUSH
62612: LD_VAR 0 2
62616: PPUSH
62617: LD_VAR 0 3
62621: PPUSH
62622: CALL_OW 331
// end ;
62626: LD_VAR 0 5
62630: RET
// export function Video ( mode ) ; begin
62631: LD_INT 0
62633: PPUSH
// ingame_video = mode ;
62634: LD_ADDR_OWVAR 52
62638: PUSH
62639: LD_VAR 0 1
62643: ST_TO_ADDR
// interface_hidden = mode ;
62644: LD_ADDR_OWVAR 54
62648: PUSH
62649: LD_VAR 0 1
62653: ST_TO_ADDR
// end ;
62654: LD_VAR 0 2
62658: RET
// export function Join ( array , element ) ; begin
62659: LD_INT 0
62661: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62662: LD_ADDR_VAR 0 3
62666: PUSH
62667: LD_VAR 0 1
62671: PPUSH
62672: LD_VAR 0 1
62676: PUSH
62677: LD_INT 1
62679: PLUS
62680: PPUSH
62681: LD_VAR 0 2
62685: PPUSH
62686: CALL_OW 1
62690: ST_TO_ADDR
// end ;
62691: LD_VAR 0 3
62695: RET
// export function JoinUnion ( array , element ) ; begin
62696: LD_INT 0
62698: PPUSH
// result := array union element ;
62699: LD_ADDR_VAR 0 3
62703: PUSH
62704: LD_VAR 0 1
62708: PUSH
62709: LD_VAR 0 2
62713: UNION
62714: ST_TO_ADDR
// end ;
62715: LD_VAR 0 3
62719: RET
// export function GetBehemoths ( side ) ; begin
62720: LD_INT 0
62722: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62723: LD_ADDR_VAR 0 2
62727: PUSH
62728: LD_INT 22
62730: PUSH
62731: LD_VAR 0 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 31
62742: PUSH
62743: LD_INT 25
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PPUSH
62754: CALL_OW 69
62758: ST_TO_ADDR
// end ;
62759: LD_VAR 0 2
62763: RET
// export function Shuffle ( array ) ; var i , index ; begin
62764: LD_INT 0
62766: PPUSH
62767: PPUSH
62768: PPUSH
// result := [ ] ;
62769: LD_ADDR_VAR 0 2
62773: PUSH
62774: EMPTY
62775: ST_TO_ADDR
// if not array then
62776: LD_VAR 0 1
62780: NOT
62781: IFFALSE 62785
// exit ;
62783: GO 62884
// Randomize ;
62785: CALL_OW 10
// for i = array downto 1 do
62789: LD_ADDR_VAR 0 3
62793: PUSH
62794: DOUBLE
62795: LD_VAR 0 1
62799: INC
62800: ST_TO_ADDR
62801: LD_INT 1
62803: PUSH
62804: FOR_DOWNTO
62805: IFFALSE 62882
// begin index := rand ( 1 , array ) ;
62807: LD_ADDR_VAR 0 4
62811: PUSH
62812: LD_INT 1
62814: PPUSH
62815: LD_VAR 0 1
62819: PPUSH
62820: CALL_OW 12
62824: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62825: LD_ADDR_VAR 0 2
62829: PUSH
62830: LD_VAR 0 2
62834: PPUSH
62835: LD_VAR 0 2
62839: PUSH
62840: LD_INT 1
62842: PLUS
62843: PPUSH
62844: LD_VAR 0 1
62848: PUSH
62849: LD_VAR 0 4
62853: ARRAY
62854: PPUSH
62855: CALL_OW 2
62859: ST_TO_ADDR
// array := Delete ( array , index ) ;
62860: LD_ADDR_VAR 0 1
62864: PUSH
62865: LD_VAR 0 1
62869: PPUSH
62870: LD_VAR 0 4
62874: PPUSH
62875: CALL_OW 3
62879: ST_TO_ADDR
// end ;
62880: GO 62804
62882: POP
62883: POP
// end ;
62884: LD_VAR 0 2
62888: RET
// export function GetBaseMaterials ( base ) ; begin
62889: LD_INT 0
62891: PPUSH
// result := [ 0 , 0 , 0 ] ;
62892: LD_ADDR_VAR 0 2
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: ST_TO_ADDR
// if not base then
62911: LD_VAR 0 1
62915: NOT
62916: IFFALSE 62920
// exit ;
62918: GO 62969
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62920: LD_ADDR_VAR 0 2
62924: PUSH
62925: LD_VAR 0 1
62929: PPUSH
62930: LD_INT 1
62932: PPUSH
62933: CALL_OW 275
62937: PUSH
62938: LD_VAR 0 1
62942: PPUSH
62943: LD_INT 2
62945: PPUSH
62946: CALL_OW 275
62950: PUSH
62951: LD_VAR 0 1
62955: PPUSH
62956: LD_INT 3
62958: PPUSH
62959: CALL_OW 275
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: LIST
62968: ST_TO_ADDR
// end ;
62969: LD_VAR 0 2
62973: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62974: LD_INT 0
62976: PPUSH
62977: PPUSH
// result := array ;
62978: LD_ADDR_VAR 0 3
62982: PUSH
62983: LD_VAR 0 1
62987: ST_TO_ADDR
// if size >= result then
62988: LD_VAR 0 2
62992: PUSH
62993: LD_VAR 0 3
62997: GREATEREQUAL
62998: IFFALSE 63002
// exit ;
63000: GO 63052
// if size then
63002: LD_VAR 0 2
63006: IFFALSE 63052
// for i := array downto size do
63008: LD_ADDR_VAR 0 4
63012: PUSH
63013: DOUBLE
63014: LD_VAR 0 1
63018: INC
63019: ST_TO_ADDR
63020: LD_VAR 0 2
63024: PUSH
63025: FOR_DOWNTO
63026: IFFALSE 63050
// result := Delete ( result , result ) ;
63028: LD_ADDR_VAR 0 3
63032: PUSH
63033: LD_VAR 0 3
63037: PPUSH
63038: LD_VAR 0 3
63042: PPUSH
63043: CALL_OW 3
63047: ST_TO_ADDR
63048: GO 63025
63050: POP
63051: POP
// end ;
63052: LD_VAR 0 3
63056: RET
// export function ComExit ( unit ) ; var tmp ; begin
63057: LD_INT 0
63059: PPUSH
63060: PPUSH
// if not IsInUnit ( unit ) then
63061: LD_VAR 0 1
63065: PPUSH
63066: CALL_OW 310
63070: NOT
63071: IFFALSE 63075
// exit ;
63073: GO 63135
// tmp := IsInUnit ( unit ) ;
63075: LD_ADDR_VAR 0 3
63079: PUSH
63080: LD_VAR 0 1
63084: PPUSH
63085: CALL_OW 310
63089: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63090: LD_VAR 0 3
63094: PPUSH
63095: CALL_OW 247
63099: PUSH
63100: LD_INT 2
63102: EQUAL
63103: IFFALSE 63116
// ComExitVehicle ( unit ) else
63105: LD_VAR 0 1
63109: PPUSH
63110: CALL_OW 121
63114: GO 63125
// ComExitBuilding ( unit ) ;
63116: LD_VAR 0 1
63120: PPUSH
63121: CALL_OW 122
// result := tmp ;
63125: LD_ADDR_VAR 0 2
63129: PUSH
63130: LD_VAR 0 3
63134: ST_TO_ADDR
// end ;
63135: LD_VAR 0 2
63139: RET
// export function ComExitAll ( units ) ; var i ; begin
63140: LD_INT 0
63142: PPUSH
63143: PPUSH
// if not units then
63144: LD_VAR 0 1
63148: NOT
63149: IFFALSE 63153
// exit ;
63151: GO 63179
// for i in units do
63153: LD_ADDR_VAR 0 3
63157: PUSH
63158: LD_VAR 0 1
63162: PUSH
63163: FOR_IN
63164: IFFALSE 63177
// ComExit ( i ) ;
63166: LD_VAR 0 3
63170: PPUSH
63171: CALL 63057 0 1
63175: GO 63163
63177: POP
63178: POP
// end ;
63179: LD_VAR 0 2
63183: RET
// export function ResetHc ; begin
63184: LD_INT 0
63186: PPUSH
// InitHc ;
63187: CALL_OW 19
// hc_importance := 0 ;
63191: LD_ADDR_OWVAR 32
63195: PUSH
63196: LD_INT 0
63198: ST_TO_ADDR
// end ;
63199: LD_VAR 0 1
63203: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63204: LD_INT 0
63206: PPUSH
63207: PPUSH
63208: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63209: LD_ADDR_VAR 0 6
63213: PUSH
63214: LD_VAR 0 1
63218: PUSH
63219: LD_VAR 0 3
63223: PLUS
63224: PUSH
63225: LD_INT 2
63227: DIV
63228: ST_TO_ADDR
// if _x < 0 then
63229: LD_VAR 0 6
63233: PUSH
63234: LD_INT 0
63236: LESS
63237: IFFALSE 63254
// _x := _x * - 1 ;
63239: LD_ADDR_VAR 0 6
63243: PUSH
63244: LD_VAR 0 6
63248: PUSH
63249: LD_INT 1
63251: NEG
63252: MUL
63253: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63254: LD_ADDR_VAR 0 7
63258: PUSH
63259: LD_VAR 0 2
63263: PUSH
63264: LD_VAR 0 4
63268: PLUS
63269: PUSH
63270: LD_INT 2
63272: DIV
63273: ST_TO_ADDR
// if _y < 0 then
63274: LD_VAR 0 7
63278: PUSH
63279: LD_INT 0
63281: LESS
63282: IFFALSE 63299
// _y := _y * - 1 ;
63284: LD_ADDR_VAR 0 7
63288: PUSH
63289: LD_VAR 0 7
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: MUL
63298: ST_TO_ADDR
// result := [ _x , _y ] ;
63299: LD_ADDR_VAR 0 5
63303: PUSH
63304: LD_VAR 0 6
63308: PUSH
63309: LD_VAR 0 7
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: ST_TO_ADDR
// end ;
63318: LD_VAR 0 5
63322: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63323: LD_INT 0
63325: PPUSH
63326: PPUSH
63327: PPUSH
63328: PPUSH
// task := GetTaskList ( unit ) ;
63329: LD_ADDR_VAR 0 7
63333: PUSH
63334: LD_VAR 0 1
63338: PPUSH
63339: CALL_OW 437
63343: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63344: LD_VAR 0 7
63348: NOT
63349: PUSH
63350: LD_VAR 0 1
63354: PPUSH
63355: LD_VAR 0 2
63359: PPUSH
63360: CALL_OW 308
63364: NOT
63365: AND
63366: IFFALSE 63370
// exit ;
63368: GO 63488
// if IsInArea ( unit , area ) then
63370: LD_VAR 0 1
63374: PPUSH
63375: LD_VAR 0 2
63379: PPUSH
63380: CALL_OW 308
63384: IFFALSE 63402
// begin ComMoveToArea ( unit , goAway ) ;
63386: LD_VAR 0 1
63390: PPUSH
63391: LD_VAR 0 3
63395: PPUSH
63396: CALL_OW 113
// exit ;
63400: GO 63488
// end ; if task [ 1 ] [ 1 ] <> M then
63402: LD_VAR 0 7
63406: PUSH
63407: LD_INT 1
63409: ARRAY
63410: PUSH
63411: LD_INT 1
63413: ARRAY
63414: PUSH
63415: LD_STRING M
63417: NONEQUAL
63418: IFFALSE 63422
// exit ;
63420: GO 63488
// x := task [ 1 ] [ 2 ] ;
63422: LD_ADDR_VAR 0 5
63426: PUSH
63427: LD_VAR 0 7
63431: PUSH
63432: LD_INT 1
63434: ARRAY
63435: PUSH
63436: LD_INT 2
63438: ARRAY
63439: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63440: LD_ADDR_VAR 0 6
63444: PUSH
63445: LD_VAR 0 7
63449: PUSH
63450: LD_INT 1
63452: ARRAY
63453: PUSH
63454: LD_INT 3
63456: ARRAY
63457: ST_TO_ADDR
// if InArea ( x , y , area ) then
63458: LD_VAR 0 5
63462: PPUSH
63463: LD_VAR 0 6
63467: PPUSH
63468: LD_VAR 0 2
63472: PPUSH
63473: CALL_OW 309
63477: IFFALSE 63488
// ComStop ( unit ) ;
63479: LD_VAR 0 1
63483: PPUSH
63484: CALL_OW 141
// end ;
63488: LD_VAR 0 4
63492: RET
// export function Abs ( value ) ; begin
63493: LD_INT 0
63495: PPUSH
// result := value ;
63496: LD_ADDR_VAR 0 2
63500: PUSH
63501: LD_VAR 0 1
63505: ST_TO_ADDR
// if value < 0 then
63506: LD_VAR 0 1
63510: PUSH
63511: LD_INT 0
63513: LESS
63514: IFFALSE 63531
// result := value * - 1 ;
63516: LD_ADDR_VAR 0 2
63520: PUSH
63521: LD_VAR 0 1
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: MUL
63530: ST_TO_ADDR
// end ;
63531: LD_VAR 0 2
63535: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63536: LD_INT 0
63538: PPUSH
63539: PPUSH
63540: PPUSH
63541: PPUSH
63542: PPUSH
63543: PPUSH
63544: PPUSH
63545: PPUSH
// if not unit or not building then
63546: LD_VAR 0 1
63550: NOT
63551: PUSH
63552: LD_VAR 0 2
63556: NOT
63557: OR
63558: IFFALSE 63562
// exit ;
63560: GO 63788
// x := GetX ( building ) ;
63562: LD_ADDR_VAR 0 4
63566: PUSH
63567: LD_VAR 0 2
63571: PPUSH
63572: CALL_OW 250
63576: ST_TO_ADDR
// y := GetY ( building ) ;
63577: LD_ADDR_VAR 0 6
63581: PUSH
63582: LD_VAR 0 2
63586: PPUSH
63587: CALL_OW 251
63591: ST_TO_ADDR
// d := GetDir ( building ) ;
63592: LD_ADDR_VAR 0 8
63596: PUSH
63597: LD_VAR 0 2
63601: PPUSH
63602: CALL_OW 254
63606: ST_TO_ADDR
// r := 4 ;
63607: LD_ADDR_VAR 0 9
63611: PUSH
63612: LD_INT 4
63614: ST_TO_ADDR
// for i := 1 to 5 do
63615: LD_ADDR_VAR 0 10
63619: PUSH
63620: DOUBLE
63621: LD_INT 1
63623: DEC
63624: ST_TO_ADDR
63625: LD_INT 5
63627: PUSH
63628: FOR_TO
63629: IFFALSE 63786
// begin _x := ShiftX ( x , d , r + i ) ;
63631: LD_ADDR_VAR 0 5
63635: PUSH
63636: LD_VAR 0 4
63640: PPUSH
63641: LD_VAR 0 8
63645: PPUSH
63646: LD_VAR 0 9
63650: PUSH
63651: LD_VAR 0 10
63655: PLUS
63656: PPUSH
63657: CALL_OW 272
63661: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63662: LD_ADDR_VAR 0 7
63666: PUSH
63667: LD_VAR 0 6
63671: PPUSH
63672: LD_VAR 0 8
63676: PPUSH
63677: LD_VAR 0 9
63681: PUSH
63682: LD_VAR 0 10
63686: PLUS
63687: PPUSH
63688: CALL_OW 273
63692: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63693: LD_VAR 0 5
63697: PPUSH
63698: LD_VAR 0 7
63702: PPUSH
63703: CALL_OW 488
63707: PUSH
63708: LD_VAR 0 5
63712: PPUSH
63713: LD_VAR 0 7
63717: PPUSH
63718: CALL_OW 428
63722: PPUSH
63723: CALL_OW 247
63727: PUSH
63728: LD_INT 3
63730: PUSH
63731: LD_INT 2
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: IN
63738: NOT
63739: AND
63740: IFFALSE 63784
// begin ComMoveXY ( unit , _x , _y ) ;
63742: LD_VAR 0 1
63746: PPUSH
63747: LD_VAR 0 5
63751: PPUSH
63752: LD_VAR 0 7
63756: PPUSH
63757: CALL_OW 111
// result := [ _x , _y ] ;
63761: LD_ADDR_VAR 0 3
63765: PUSH
63766: LD_VAR 0 5
63770: PUSH
63771: LD_VAR 0 7
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: ST_TO_ADDR
// exit ;
63780: POP
63781: POP
63782: GO 63788
// end ; end ;
63784: GO 63628
63786: POP
63787: POP
// end ;
63788: LD_VAR 0 3
63792: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63793: LD_INT 0
63795: PPUSH
63796: PPUSH
63797: PPUSH
// result := 0 ;
63798: LD_ADDR_VAR 0 3
63802: PUSH
63803: LD_INT 0
63805: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63806: LD_VAR 0 1
63810: PUSH
63811: LD_INT 0
63813: LESS
63814: PUSH
63815: LD_VAR 0 1
63819: PUSH
63820: LD_INT 8
63822: GREATER
63823: OR
63824: PUSH
63825: LD_VAR 0 2
63829: PUSH
63830: LD_INT 0
63832: LESS
63833: OR
63834: PUSH
63835: LD_VAR 0 2
63839: PUSH
63840: LD_INT 8
63842: GREATER
63843: OR
63844: IFFALSE 63848
// exit ;
63846: GO 63923
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63848: LD_ADDR_VAR 0 4
63852: PUSH
63853: LD_INT 22
63855: PUSH
63856: LD_VAR 0 2
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PPUSH
63865: CALL_OW 69
63869: PUSH
63870: FOR_IN
63871: IFFALSE 63921
// begin un := UnitShoot ( i ) ;
63873: LD_ADDR_VAR 0 5
63877: PUSH
63878: LD_VAR 0 4
63882: PPUSH
63883: CALL_OW 504
63887: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63888: LD_VAR 0 5
63892: PPUSH
63893: CALL_OW 255
63897: PUSH
63898: LD_VAR 0 1
63902: EQUAL
63903: IFFALSE 63919
// begin result := un ;
63905: LD_ADDR_VAR 0 3
63909: PUSH
63910: LD_VAR 0 5
63914: ST_TO_ADDR
// exit ;
63915: POP
63916: POP
63917: GO 63923
// end ; end ;
63919: GO 63870
63921: POP
63922: POP
// end ;
63923: LD_VAR 0 3
63927: RET
// export function GetCargoBay ( units ) ; begin
63928: LD_INT 0
63930: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63931: LD_ADDR_VAR 0 2
63935: PUSH
63936: LD_VAR 0 1
63940: PPUSH
63941: LD_INT 2
63943: PUSH
63944: LD_INT 34
63946: PUSH
63947: LD_INT 12
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 34
63956: PUSH
63957: LD_INT 51
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 34
63966: PUSH
63967: LD_INT 32
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 34
63976: PUSH
63977: LD_INT 89
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: PPUSH
63991: CALL_OW 72
63995: ST_TO_ADDR
// end ;
63996: LD_VAR 0 2
64000: RET
// export function Negate ( value ) ; begin
64001: LD_INT 0
64003: PPUSH
// result := not value ;
64004: LD_ADDR_VAR 0 2
64008: PUSH
64009: LD_VAR 0 1
64013: NOT
64014: ST_TO_ADDR
// end ;
64015: LD_VAR 0 2
64019: RET
// export function Inc ( value ) ; begin
64020: LD_INT 0
64022: PPUSH
// result := value + 1 ;
64023: LD_ADDR_VAR 0 2
64027: PUSH
64028: LD_VAR 0 1
64032: PUSH
64033: LD_INT 1
64035: PLUS
64036: ST_TO_ADDR
// end ;
64037: LD_VAR 0 2
64041: RET
// export function Dec ( value ) ; begin
64042: LD_INT 0
64044: PPUSH
// result := value - 1 ;
64045: LD_ADDR_VAR 0 2
64049: PUSH
64050: LD_VAR 0 1
64054: PUSH
64055: LD_INT 1
64057: MINUS
64058: ST_TO_ADDR
// end ;
64059: LD_VAR 0 2
64063: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64064: LD_INT 0
64066: PPUSH
64067: PPUSH
64068: PPUSH
64069: PPUSH
64070: PPUSH
64071: PPUSH
64072: PPUSH
64073: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64074: LD_VAR 0 1
64078: PPUSH
64079: LD_VAR 0 2
64083: PPUSH
64084: CALL_OW 488
64088: NOT
64089: PUSH
64090: LD_VAR 0 3
64094: PPUSH
64095: LD_VAR 0 4
64099: PPUSH
64100: CALL_OW 488
64104: NOT
64105: OR
64106: IFFALSE 64119
// begin result := - 1 ;
64108: LD_ADDR_VAR 0 5
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: ST_TO_ADDR
// exit ;
64117: GO 64354
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64119: LD_ADDR_VAR 0 12
64123: PUSH
64124: LD_VAR 0 1
64128: PPUSH
64129: LD_VAR 0 2
64133: PPUSH
64134: LD_VAR 0 3
64138: PPUSH
64139: LD_VAR 0 4
64143: PPUSH
64144: CALL 63204 0 4
64148: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64149: LD_ADDR_VAR 0 11
64153: PUSH
64154: LD_VAR 0 1
64158: PPUSH
64159: LD_VAR 0 2
64163: PPUSH
64164: LD_VAR 0 12
64168: PUSH
64169: LD_INT 1
64171: ARRAY
64172: PPUSH
64173: LD_VAR 0 12
64177: PUSH
64178: LD_INT 2
64180: ARRAY
64181: PPUSH
64182: CALL_OW 298
64186: ST_TO_ADDR
// distance := 9999 ;
64187: LD_ADDR_VAR 0 10
64191: PUSH
64192: LD_INT 9999
64194: ST_TO_ADDR
// for i := 0 to 5 do
64195: LD_ADDR_VAR 0 6
64199: PUSH
64200: DOUBLE
64201: LD_INT 0
64203: DEC
64204: ST_TO_ADDR
64205: LD_INT 5
64207: PUSH
64208: FOR_TO
64209: IFFALSE 64352
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64211: LD_ADDR_VAR 0 7
64215: PUSH
64216: LD_VAR 0 1
64220: PPUSH
64221: LD_VAR 0 6
64225: PPUSH
64226: LD_VAR 0 11
64230: PPUSH
64231: CALL_OW 272
64235: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64236: LD_ADDR_VAR 0 8
64240: PUSH
64241: LD_VAR 0 2
64245: PPUSH
64246: LD_VAR 0 6
64250: PPUSH
64251: LD_VAR 0 11
64255: PPUSH
64256: CALL_OW 273
64260: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64261: LD_VAR 0 7
64265: PPUSH
64266: LD_VAR 0 8
64270: PPUSH
64271: CALL_OW 488
64275: NOT
64276: IFFALSE 64280
// continue ;
64278: GO 64208
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64280: LD_ADDR_VAR 0 9
64284: PUSH
64285: LD_VAR 0 12
64289: PUSH
64290: LD_INT 1
64292: ARRAY
64293: PPUSH
64294: LD_VAR 0 12
64298: PUSH
64299: LD_INT 2
64301: ARRAY
64302: PPUSH
64303: LD_VAR 0 7
64307: PPUSH
64308: LD_VAR 0 8
64312: PPUSH
64313: CALL_OW 298
64317: ST_TO_ADDR
// if tmp < distance then
64318: LD_VAR 0 9
64322: PUSH
64323: LD_VAR 0 10
64327: LESS
64328: IFFALSE 64350
// begin result := i ;
64330: LD_ADDR_VAR 0 5
64334: PUSH
64335: LD_VAR 0 6
64339: ST_TO_ADDR
// distance := tmp ;
64340: LD_ADDR_VAR 0 10
64344: PUSH
64345: LD_VAR 0 9
64349: ST_TO_ADDR
// end ; end ;
64350: GO 64208
64352: POP
64353: POP
// end ;
64354: LD_VAR 0 5
64358: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64359: LD_INT 0
64361: PPUSH
64362: PPUSH
// if not driver or not IsInUnit ( driver ) then
64363: LD_VAR 0 1
64367: NOT
64368: PUSH
64369: LD_VAR 0 1
64373: PPUSH
64374: CALL_OW 310
64378: NOT
64379: OR
64380: IFFALSE 64384
// exit ;
64382: GO 64474
// vehicle := IsInUnit ( driver ) ;
64384: LD_ADDR_VAR 0 3
64388: PUSH
64389: LD_VAR 0 1
64393: PPUSH
64394: CALL_OW 310
64398: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64399: LD_VAR 0 1
64403: PPUSH
64404: LD_STRING \
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: PUSH
64434: LD_STRING E
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: LD_VAR 0 3
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PPUSH
64470: CALL_OW 446
// end ;
64474: LD_VAR 0 2
64478: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64479: LD_INT 0
64481: PPUSH
64482: PPUSH
// if not driver or not IsInUnit ( driver ) then
64483: LD_VAR 0 1
64487: NOT
64488: PUSH
64489: LD_VAR 0 1
64493: PPUSH
64494: CALL_OW 310
64498: NOT
64499: OR
64500: IFFALSE 64504
// exit ;
64502: GO 64594
// vehicle := IsInUnit ( driver ) ;
64504: LD_ADDR_VAR 0 3
64508: PUSH
64509: LD_VAR 0 1
64513: PPUSH
64514: CALL_OW 310
64518: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64519: LD_VAR 0 1
64523: PPUSH
64524: LD_STRING \
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: PUSH
64554: LD_STRING E
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: LD_VAR 0 3
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PPUSH
64590: CALL_OW 447
// end ;
64594: LD_VAR 0 2
64598: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64599: LD_INT 0
64601: PPUSH
64602: PPUSH
64603: PPUSH
// tmp := [ ] ;
64604: LD_ADDR_VAR 0 5
64608: PUSH
64609: EMPTY
64610: ST_TO_ADDR
// for i in units do
64611: LD_ADDR_VAR 0 4
64615: PUSH
64616: LD_VAR 0 1
64620: PUSH
64621: FOR_IN
64622: IFFALSE 64660
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64624: LD_ADDR_VAR 0 5
64628: PUSH
64629: LD_VAR 0 5
64633: PPUSH
64634: LD_VAR 0 5
64638: PUSH
64639: LD_INT 1
64641: PLUS
64642: PPUSH
64643: LD_VAR 0 4
64647: PPUSH
64648: CALL_OW 256
64652: PPUSH
64653: CALL_OW 2
64657: ST_TO_ADDR
64658: GO 64621
64660: POP
64661: POP
// if not tmp then
64662: LD_VAR 0 5
64666: NOT
64667: IFFALSE 64671
// exit ;
64669: GO 64719
// if asc then
64671: LD_VAR 0 2
64675: IFFALSE 64699
// result := SortListByListAsc ( units , tmp ) else
64677: LD_ADDR_VAR 0 3
64681: PUSH
64682: LD_VAR 0 1
64686: PPUSH
64687: LD_VAR 0 5
64691: PPUSH
64692: CALL_OW 76
64696: ST_TO_ADDR
64697: GO 64719
// result := SortListByListDesc ( units , tmp ) ;
64699: LD_ADDR_VAR 0 3
64703: PUSH
64704: LD_VAR 0 1
64708: PPUSH
64709: LD_VAR 0 5
64713: PPUSH
64714: CALL_OW 77
64718: ST_TO_ADDR
// end ;
64719: LD_VAR 0 3
64723: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64724: LD_INT 0
64726: PPUSH
64727: PPUSH
// task := GetTaskList ( mech ) ;
64728: LD_ADDR_VAR 0 4
64732: PUSH
64733: LD_VAR 0 1
64737: PPUSH
64738: CALL_OW 437
64742: ST_TO_ADDR
// if not task then
64743: LD_VAR 0 4
64747: NOT
64748: IFFALSE 64752
// exit ;
64750: GO 64794
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64752: LD_ADDR_VAR 0 3
64756: PUSH
64757: LD_VAR 0 4
64761: PUSH
64762: LD_INT 1
64764: ARRAY
64765: PUSH
64766: LD_INT 1
64768: ARRAY
64769: PUSH
64770: LD_STRING r
64772: EQUAL
64773: PUSH
64774: LD_VAR 0 4
64778: PUSH
64779: LD_INT 1
64781: ARRAY
64782: PUSH
64783: LD_INT 4
64785: ARRAY
64786: PUSH
64787: LD_VAR 0 2
64791: EQUAL
64792: AND
64793: ST_TO_ADDR
// end ;
64794: LD_VAR 0 3
64798: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64799: LD_INT 0
64801: PPUSH
// SetDir ( unit , d ) ;
64802: LD_VAR 0 1
64806: PPUSH
64807: LD_VAR 0 4
64811: PPUSH
64812: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64816: LD_VAR 0 1
64820: PPUSH
64821: LD_VAR 0 2
64825: PPUSH
64826: LD_VAR 0 3
64830: PPUSH
64831: LD_VAR 0 5
64835: PPUSH
64836: CALL_OW 48
// end ;
64840: LD_VAR 0 6
64844: RET
// export function ToNaturalNumber ( number ) ; begin
64845: LD_INT 0
64847: PPUSH
// result := number div 1 ;
64848: LD_ADDR_VAR 0 2
64852: PUSH
64853: LD_VAR 0 1
64857: PUSH
64858: LD_INT 1
64860: DIV
64861: ST_TO_ADDR
// if number < 0 then
64862: LD_VAR 0 1
64866: PUSH
64867: LD_INT 0
64869: LESS
64870: IFFALSE 64880
// result := 0 ;
64872: LD_ADDR_VAR 0 2
64876: PUSH
64877: LD_INT 0
64879: ST_TO_ADDR
// end ;
64880: LD_VAR 0 2
64884: RET
// export function SortByClass ( units , class ) ; var un ; begin
64885: LD_INT 0
64887: PPUSH
64888: PPUSH
// if not units or not class then
64889: LD_VAR 0 1
64893: NOT
64894: PUSH
64895: LD_VAR 0 2
64899: NOT
64900: OR
64901: IFFALSE 64905
// exit ;
64903: GO 65000
// result := [ ] ;
64905: LD_ADDR_VAR 0 3
64909: PUSH
64910: EMPTY
64911: ST_TO_ADDR
// for un in units do
64912: LD_ADDR_VAR 0 4
64916: PUSH
64917: LD_VAR 0 1
64921: PUSH
64922: FOR_IN
64923: IFFALSE 64998
// if GetClass ( un ) = class then
64925: LD_VAR 0 4
64929: PPUSH
64930: CALL_OW 257
64934: PUSH
64935: LD_VAR 0 2
64939: EQUAL
64940: IFFALSE 64967
// result := Insert ( result , 1 , un ) else
64942: LD_ADDR_VAR 0 3
64946: PUSH
64947: LD_VAR 0 3
64951: PPUSH
64952: LD_INT 1
64954: PPUSH
64955: LD_VAR 0 4
64959: PPUSH
64960: CALL_OW 2
64964: ST_TO_ADDR
64965: GO 64996
// result := Replace ( result , result + 1 , un ) ;
64967: LD_ADDR_VAR 0 3
64971: PUSH
64972: LD_VAR 0 3
64976: PPUSH
64977: LD_VAR 0 3
64981: PUSH
64982: LD_INT 1
64984: PLUS
64985: PPUSH
64986: LD_VAR 0 4
64990: PPUSH
64991: CALL_OW 1
64995: ST_TO_ADDR
64996: GO 64922
64998: POP
64999: POP
// end ;
65000: LD_VAR 0 3
65004: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65005: LD_INT 0
65007: PPUSH
65008: PPUSH
65009: PPUSH
65010: PPUSH
65011: PPUSH
65012: PPUSH
65013: PPUSH
// result := [ ] ;
65014: LD_ADDR_VAR 0 4
65018: PUSH
65019: EMPTY
65020: ST_TO_ADDR
// if x - r < 0 then
65021: LD_VAR 0 1
65025: PUSH
65026: LD_VAR 0 3
65030: MINUS
65031: PUSH
65032: LD_INT 0
65034: LESS
65035: IFFALSE 65047
// min_x := 0 else
65037: LD_ADDR_VAR 0 8
65041: PUSH
65042: LD_INT 0
65044: ST_TO_ADDR
65045: GO 65063
// min_x := x - r ;
65047: LD_ADDR_VAR 0 8
65051: PUSH
65052: LD_VAR 0 1
65056: PUSH
65057: LD_VAR 0 3
65061: MINUS
65062: ST_TO_ADDR
// if y - r < 0 then
65063: LD_VAR 0 2
65067: PUSH
65068: LD_VAR 0 3
65072: MINUS
65073: PUSH
65074: LD_INT 0
65076: LESS
65077: IFFALSE 65089
// min_y := 0 else
65079: LD_ADDR_VAR 0 7
65083: PUSH
65084: LD_INT 0
65086: ST_TO_ADDR
65087: GO 65105
// min_y := y - r ;
65089: LD_ADDR_VAR 0 7
65093: PUSH
65094: LD_VAR 0 2
65098: PUSH
65099: LD_VAR 0 3
65103: MINUS
65104: ST_TO_ADDR
// max_x := x + r ;
65105: LD_ADDR_VAR 0 9
65109: PUSH
65110: LD_VAR 0 1
65114: PUSH
65115: LD_VAR 0 3
65119: PLUS
65120: ST_TO_ADDR
// max_y := y + r ;
65121: LD_ADDR_VAR 0 10
65125: PUSH
65126: LD_VAR 0 2
65130: PUSH
65131: LD_VAR 0 3
65135: PLUS
65136: ST_TO_ADDR
// for _x = min_x to max_x do
65137: LD_ADDR_VAR 0 5
65141: PUSH
65142: DOUBLE
65143: LD_VAR 0 8
65147: DEC
65148: ST_TO_ADDR
65149: LD_VAR 0 9
65153: PUSH
65154: FOR_TO
65155: IFFALSE 65256
// for _y = min_y to max_y do
65157: LD_ADDR_VAR 0 6
65161: PUSH
65162: DOUBLE
65163: LD_VAR 0 7
65167: DEC
65168: ST_TO_ADDR
65169: LD_VAR 0 10
65173: PUSH
65174: FOR_TO
65175: IFFALSE 65252
// begin if not ValidHex ( _x , _y ) then
65177: LD_VAR 0 5
65181: PPUSH
65182: LD_VAR 0 6
65186: PPUSH
65187: CALL_OW 488
65191: NOT
65192: IFFALSE 65196
// continue ;
65194: GO 65174
// if GetResourceTypeXY ( _x , _y ) then
65196: LD_VAR 0 5
65200: PPUSH
65201: LD_VAR 0 6
65205: PPUSH
65206: CALL_OW 283
65210: IFFALSE 65250
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65212: LD_ADDR_VAR 0 4
65216: PUSH
65217: LD_VAR 0 4
65221: PPUSH
65222: LD_VAR 0 4
65226: PUSH
65227: LD_INT 1
65229: PLUS
65230: PPUSH
65231: LD_VAR 0 5
65235: PUSH
65236: LD_VAR 0 6
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PPUSH
65245: CALL_OW 1
65249: ST_TO_ADDR
// end ;
65250: GO 65174
65252: POP
65253: POP
65254: GO 65154
65256: POP
65257: POP
// end ;
65258: LD_VAR 0 4
65262: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65263: LD_INT 0
65265: PPUSH
65266: PPUSH
65267: PPUSH
65268: PPUSH
65269: PPUSH
65270: PPUSH
65271: PPUSH
65272: PPUSH
// if not units then
65273: LD_VAR 0 1
65277: NOT
65278: IFFALSE 65282
// exit ;
65280: GO 65806
// result := UnitFilter ( units , [ f_ok ] ) ;
65282: LD_ADDR_VAR 0 3
65286: PUSH
65287: LD_VAR 0 1
65291: PPUSH
65292: LD_INT 50
65294: PUSH
65295: EMPTY
65296: LIST
65297: PPUSH
65298: CALL_OW 72
65302: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65303: LD_ADDR_VAR 0 8
65307: PUSH
65308: LD_VAR 0 1
65312: PUSH
65313: LD_INT 1
65315: ARRAY
65316: PPUSH
65317: CALL_OW 255
65321: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65322: LD_ADDR_VAR 0 10
65326: PUSH
65327: LD_INT 29
65329: PUSH
65330: LD_INT 91
65332: PUSH
65333: LD_INT 49
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: ST_TO_ADDR
// if not result then
65341: LD_VAR 0 3
65345: NOT
65346: IFFALSE 65350
// exit ;
65348: GO 65806
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65350: LD_ADDR_VAR 0 5
65354: PUSH
65355: LD_INT 81
65357: PUSH
65358: LD_VAR 0 8
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PPUSH
65367: CALL_OW 69
65371: ST_TO_ADDR
// for i in result do
65372: LD_ADDR_VAR 0 4
65376: PUSH
65377: LD_VAR 0 3
65381: PUSH
65382: FOR_IN
65383: IFFALSE 65804
// begin tag := GetTag ( i ) + 1 ;
65385: LD_ADDR_VAR 0 9
65389: PUSH
65390: LD_VAR 0 4
65394: PPUSH
65395: CALL_OW 110
65399: PUSH
65400: LD_INT 1
65402: PLUS
65403: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65404: LD_ADDR_VAR 0 7
65408: PUSH
65409: LD_VAR 0 4
65413: PPUSH
65414: CALL_OW 250
65418: PPUSH
65419: LD_VAR 0 4
65423: PPUSH
65424: CALL_OW 251
65428: PPUSH
65429: LD_INT 6
65431: PPUSH
65432: CALL 65005 0 3
65436: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65437: LD_VAR 0 4
65441: PPUSH
65442: CALL_OW 247
65446: PUSH
65447: LD_INT 2
65449: EQUAL
65450: PUSH
65451: LD_VAR 0 7
65455: AND
65456: PUSH
65457: LD_VAR 0 4
65461: PPUSH
65462: CALL_OW 264
65466: PUSH
65467: LD_VAR 0 10
65471: IN
65472: NOT
65473: AND
65474: IFFALSE 65513
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65476: LD_VAR 0 4
65480: PPUSH
65481: LD_VAR 0 7
65485: PUSH
65486: LD_INT 1
65488: ARRAY
65489: PUSH
65490: LD_INT 1
65492: ARRAY
65493: PPUSH
65494: LD_VAR 0 7
65498: PUSH
65499: LD_INT 1
65501: ARRAY
65502: PUSH
65503: LD_INT 2
65505: ARRAY
65506: PPUSH
65507: CALL_OW 116
65511: GO 65802
// if path > tag then
65513: LD_VAR 0 2
65517: PUSH
65518: LD_VAR 0 9
65522: GREATER
65523: IFFALSE 65731
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65525: LD_ADDR_VAR 0 6
65529: PUSH
65530: LD_VAR 0 5
65534: PPUSH
65535: LD_INT 91
65537: PUSH
65538: LD_VAR 0 4
65542: PUSH
65543: LD_INT 8
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: PPUSH
65551: CALL_OW 72
65555: ST_TO_ADDR
// if nearEnemy then
65556: LD_VAR 0 6
65560: IFFALSE 65629
// begin if GetWeapon ( i ) = ru_time_lapser then
65562: LD_VAR 0 4
65566: PPUSH
65567: CALL_OW 264
65571: PUSH
65572: LD_INT 49
65574: EQUAL
65575: IFFALSE 65603
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65577: LD_VAR 0 4
65581: PPUSH
65582: LD_VAR 0 6
65586: PPUSH
65587: LD_VAR 0 4
65591: PPUSH
65592: CALL_OW 74
65596: PPUSH
65597: CALL_OW 112
65601: GO 65627
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65603: LD_VAR 0 4
65607: PPUSH
65608: LD_VAR 0 6
65612: PPUSH
65613: LD_VAR 0 4
65617: PPUSH
65618: CALL_OW 74
65622: PPUSH
65623: CALL_OW 115
// end else
65627: GO 65729
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65629: LD_VAR 0 4
65633: PPUSH
65634: LD_VAR 0 2
65638: PUSH
65639: LD_VAR 0 9
65643: ARRAY
65644: PUSH
65645: LD_INT 1
65647: ARRAY
65648: PPUSH
65649: LD_VAR 0 2
65653: PUSH
65654: LD_VAR 0 9
65658: ARRAY
65659: PUSH
65660: LD_INT 2
65662: ARRAY
65663: PPUSH
65664: CALL_OW 297
65668: PUSH
65669: LD_INT 6
65671: GREATER
65672: IFFALSE 65715
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65674: LD_VAR 0 4
65678: PPUSH
65679: LD_VAR 0 2
65683: PUSH
65684: LD_VAR 0 9
65688: ARRAY
65689: PUSH
65690: LD_INT 1
65692: ARRAY
65693: PPUSH
65694: LD_VAR 0 2
65698: PUSH
65699: LD_VAR 0 9
65703: ARRAY
65704: PUSH
65705: LD_INT 2
65707: ARRAY
65708: PPUSH
65709: CALL_OW 114
65713: GO 65729
// SetTag ( i , tag ) ;
65715: LD_VAR 0 4
65719: PPUSH
65720: LD_VAR 0 9
65724: PPUSH
65725: CALL_OW 109
// end else
65729: GO 65802
// if enemy then
65731: LD_VAR 0 5
65735: IFFALSE 65802
// begin if GetWeapon ( i ) = ru_time_lapser then
65737: LD_VAR 0 4
65741: PPUSH
65742: CALL_OW 264
65746: PUSH
65747: LD_INT 49
65749: EQUAL
65750: IFFALSE 65778
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65752: LD_VAR 0 4
65756: PPUSH
65757: LD_VAR 0 5
65761: PPUSH
65762: LD_VAR 0 4
65766: PPUSH
65767: CALL_OW 74
65771: PPUSH
65772: CALL_OW 112
65776: GO 65802
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65778: LD_VAR 0 4
65782: PPUSH
65783: LD_VAR 0 5
65787: PPUSH
65788: LD_VAR 0 4
65792: PPUSH
65793: CALL_OW 74
65797: PPUSH
65798: CALL_OW 115
// end ; end ;
65802: GO 65382
65804: POP
65805: POP
// end ;
65806: LD_VAR 0 3
65810: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65811: LD_INT 0
65813: PPUSH
65814: PPUSH
65815: PPUSH
// if not unit or IsInUnit ( unit ) then
65816: LD_VAR 0 1
65820: NOT
65821: PUSH
65822: LD_VAR 0 1
65826: PPUSH
65827: CALL_OW 310
65831: OR
65832: IFFALSE 65836
// exit ;
65834: GO 65927
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65836: LD_ADDR_VAR 0 4
65840: PUSH
65841: LD_VAR 0 1
65845: PPUSH
65846: CALL_OW 250
65850: PPUSH
65851: LD_VAR 0 2
65855: PPUSH
65856: LD_INT 1
65858: PPUSH
65859: CALL_OW 272
65863: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65864: LD_ADDR_VAR 0 5
65868: PUSH
65869: LD_VAR 0 1
65873: PPUSH
65874: CALL_OW 251
65878: PPUSH
65879: LD_VAR 0 2
65883: PPUSH
65884: LD_INT 1
65886: PPUSH
65887: CALL_OW 273
65891: ST_TO_ADDR
// if ValidHex ( x , y ) then
65892: LD_VAR 0 4
65896: PPUSH
65897: LD_VAR 0 5
65901: PPUSH
65902: CALL_OW 488
65906: IFFALSE 65927
// ComTurnXY ( unit , x , y ) ;
65908: LD_VAR 0 1
65912: PPUSH
65913: LD_VAR 0 4
65917: PPUSH
65918: LD_VAR 0 5
65922: PPUSH
65923: CALL_OW 118
// end ;
65927: LD_VAR 0 3
65931: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65932: LD_INT 0
65934: PPUSH
65935: PPUSH
// result := false ;
65936: LD_ADDR_VAR 0 3
65940: PUSH
65941: LD_INT 0
65943: ST_TO_ADDR
// if not units then
65944: LD_VAR 0 2
65948: NOT
65949: IFFALSE 65953
// exit ;
65951: GO 65998
// for i in units do
65953: LD_ADDR_VAR 0 4
65957: PUSH
65958: LD_VAR 0 2
65962: PUSH
65963: FOR_IN
65964: IFFALSE 65996
// if See ( side , i ) then
65966: LD_VAR 0 1
65970: PPUSH
65971: LD_VAR 0 4
65975: PPUSH
65976: CALL_OW 292
65980: IFFALSE 65994
// begin result := true ;
65982: LD_ADDR_VAR 0 3
65986: PUSH
65987: LD_INT 1
65989: ST_TO_ADDR
// exit ;
65990: POP
65991: POP
65992: GO 65998
// end ;
65994: GO 65963
65996: POP
65997: POP
// end ;
65998: LD_VAR 0 3
66002: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66003: LD_INT 0
66005: PPUSH
66006: PPUSH
66007: PPUSH
66008: PPUSH
// if not unit or not points then
66009: LD_VAR 0 1
66013: NOT
66014: PUSH
66015: LD_VAR 0 2
66019: NOT
66020: OR
66021: IFFALSE 66025
// exit ;
66023: GO 66115
// dist := 99999 ;
66025: LD_ADDR_VAR 0 5
66029: PUSH
66030: LD_INT 99999
66032: ST_TO_ADDR
// for i in points do
66033: LD_ADDR_VAR 0 4
66037: PUSH
66038: LD_VAR 0 2
66042: PUSH
66043: FOR_IN
66044: IFFALSE 66113
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66046: LD_ADDR_VAR 0 6
66050: PUSH
66051: LD_VAR 0 1
66055: PPUSH
66056: LD_VAR 0 4
66060: PUSH
66061: LD_INT 1
66063: ARRAY
66064: PPUSH
66065: LD_VAR 0 4
66069: PUSH
66070: LD_INT 2
66072: ARRAY
66073: PPUSH
66074: CALL_OW 297
66078: ST_TO_ADDR
// if tmpDist < dist then
66079: LD_VAR 0 6
66083: PUSH
66084: LD_VAR 0 5
66088: LESS
66089: IFFALSE 66111
// begin result := i ;
66091: LD_ADDR_VAR 0 3
66095: PUSH
66096: LD_VAR 0 4
66100: ST_TO_ADDR
// dist := tmpDist ;
66101: LD_ADDR_VAR 0 5
66105: PUSH
66106: LD_VAR 0 6
66110: ST_TO_ADDR
// end ; end ;
66111: GO 66043
66113: POP
66114: POP
// end ;
66115: LD_VAR 0 3
66119: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66120: LD_INT 0
66122: PPUSH
// uc_side := side ;
66123: LD_ADDR_OWVAR 20
66127: PUSH
66128: LD_VAR 0 1
66132: ST_TO_ADDR
// uc_nation := 3 ;
66133: LD_ADDR_OWVAR 21
66137: PUSH
66138: LD_INT 3
66140: ST_TO_ADDR
// vc_chassis := 25 ;
66141: LD_ADDR_OWVAR 37
66145: PUSH
66146: LD_INT 25
66148: ST_TO_ADDR
// vc_engine := engine_siberite ;
66149: LD_ADDR_OWVAR 39
66153: PUSH
66154: LD_INT 3
66156: ST_TO_ADDR
// vc_control := control_computer ;
66157: LD_ADDR_OWVAR 38
66161: PUSH
66162: LD_INT 3
66164: ST_TO_ADDR
// vc_weapon := 59 ;
66165: LD_ADDR_OWVAR 40
66169: PUSH
66170: LD_INT 59
66172: ST_TO_ADDR
// result := CreateVehicle ;
66173: LD_ADDR_VAR 0 5
66177: PUSH
66178: CALL_OW 45
66182: ST_TO_ADDR
// SetDir ( result , d ) ;
66183: LD_VAR 0 5
66187: PPUSH
66188: LD_VAR 0 4
66192: PPUSH
66193: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66197: LD_VAR 0 5
66201: PPUSH
66202: LD_VAR 0 2
66206: PPUSH
66207: LD_VAR 0 3
66211: PPUSH
66212: LD_INT 0
66214: PPUSH
66215: CALL_OW 48
// end ;
66219: LD_VAR 0 5
66223: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66224: LD_INT 0
66226: PPUSH
66227: PPUSH
66228: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66229: LD_ADDR_VAR 0 2
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: LD_INT 0
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66252: LD_VAR 0 1
66256: NOT
66257: PUSH
66258: LD_VAR 0 1
66262: PPUSH
66263: CALL_OW 264
66267: PUSH
66268: LD_INT 12
66270: PUSH
66271: LD_INT 51
66273: PUSH
66274: LD_INT 32
66276: PUSH
66277: LD_INT 89
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: IN
66286: NOT
66287: OR
66288: IFFALSE 66292
// exit ;
66290: GO 66390
// for i := 1 to 3 do
66292: LD_ADDR_VAR 0 3
66296: PUSH
66297: DOUBLE
66298: LD_INT 1
66300: DEC
66301: ST_TO_ADDR
66302: LD_INT 3
66304: PUSH
66305: FOR_TO
66306: IFFALSE 66388
// begin tmp := GetCargo ( cargo , i ) ;
66308: LD_ADDR_VAR 0 4
66312: PUSH
66313: LD_VAR 0 1
66317: PPUSH
66318: LD_VAR 0 3
66322: PPUSH
66323: CALL_OW 289
66327: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66328: LD_ADDR_VAR 0 2
66332: PUSH
66333: LD_VAR 0 2
66337: PPUSH
66338: LD_VAR 0 3
66342: PPUSH
66343: LD_VAR 0 4
66347: PPUSH
66348: CALL_OW 1
66352: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66353: LD_ADDR_VAR 0 2
66357: PUSH
66358: LD_VAR 0 2
66362: PPUSH
66363: LD_INT 4
66365: PPUSH
66366: LD_VAR 0 2
66370: PUSH
66371: LD_INT 4
66373: ARRAY
66374: PUSH
66375: LD_VAR 0 4
66379: PLUS
66380: PPUSH
66381: CALL_OW 1
66385: ST_TO_ADDR
// end ;
66386: GO 66305
66388: POP
66389: POP
// end ;
66390: LD_VAR 0 2
66394: RET
// export function Length ( array ) ; begin
66395: LD_INT 0
66397: PPUSH
// result := array + 0 ;
66398: LD_ADDR_VAR 0 2
66402: PUSH
66403: LD_VAR 0 1
66407: PUSH
66408: LD_INT 0
66410: PLUS
66411: ST_TO_ADDR
// end ;
66412: LD_VAR 0 2
66416: RET
// export function PrepareArray ( array ) ; begin
66417: LD_INT 0
66419: PPUSH
// result := array diff 0 ;
66420: LD_ADDR_VAR 0 2
66424: PUSH
66425: LD_VAR 0 1
66429: PUSH
66430: LD_INT 0
66432: DIFF
66433: ST_TO_ADDR
// if not result [ 1 ] then
66434: LD_VAR 0 2
66438: PUSH
66439: LD_INT 1
66441: ARRAY
66442: NOT
66443: IFFALSE 66463
// result := Delete ( result , 1 ) ;
66445: LD_ADDR_VAR 0 2
66449: PUSH
66450: LD_VAR 0 2
66454: PPUSH
66455: LD_INT 1
66457: PPUSH
66458: CALL_OW 3
66462: ST_TO_ADDR
// end ; end_of_file end_of_file
66463: LD_VAR 0 2
66467: RET
// every 0 0$1 do
66468: GO 66470
66470: DISABLE
// begin enable ;
66471: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
66472: LD_STRING updateTimer(
66474: PUSH
66475: LD_OWVAR 1
66479: STR
66480: PUSH
66481: LD_STRING );
66483: STR
66484: PPUSH
66485: CALL_OW 559
// end ;
66489: END
// export function SOS_MapStart ( ) ; begin
66490: LD_INT 0
66492: PPUSH
// if streamModeActive then
66493: LD_EXP 59
66497: IFFALSE 66506
// DefineStreamItems ( true ) ;
66499: LD_INT 1
66501: PPUSH
66502: CALL 68160 0 1
// UpdateFactoryWaypoints ( ) ;
66506: CALL 81021 0 0
// UpdateWarehouseGatheringPoints ( ) ;
66510: CALL 81278 0 0
// end ;
66514: LD_VAR 0 1
66518: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66519: LD_INT 0
66521: PPUSH
// if p2 = 100 then
66522: LD_VAR 0 2
66526: PUSH
66527: LD_INT 100
66529: EQUAL
66530: IFFALSE 67533
// begin if not StreamModeActive then
66532: LD_EXP 59
66536: NOT
66537: IFFALSE 66547
// StreamModeActive := true ;
66539: LD_ADDR_EXP 59
66543: PUSH
66544: LD_INT 1
66546: ST_TO_ADDR
// if p3 = 0 then
66547: LD_VAR 0 3
66551: PUSH
66552: LD_INT 0
66554: EQUAL
66555: IFFALSE 66561
// InitStreamMode ;
66557: CALL 67696 0 0
// if p3 = 1 then
66561: LD_VAR 0 3
66565: PUSH
66566: LD_INT 1
66568: EQUAL
66569: IFFALSE 66579
// sRocket := true ;
66571: LD_ADDR_EXP 64
66575: PUSH
66576: LD_INT 1
66578: ST_TO_ADDR
// if p3 = 2 then
66579: LD_VAR 0 3
66583: PUSH
66584: LD_INT 2
66586: EQUAL
66587: IFFALSE 66597
// sSpeed := true ;
66589: LD_ADDR_EXP 63
66593: PUSH
66594: LD_INT 1
66596: ST_TO_ADDR
// if p3 = 3 then
66597: LD_VAR 0 3
66601: PUSH
66602: LD_INT 3
66604: EQUAL
66605: IFFALSE 66615
// sEngine := true ;
66607: LD_ADDR_EXP 65
66611: PUSH
66612: LD_INT 1
66614: ST_TO_ADDR
// if p3 = 4 then
66615: LD_VAR 0 3
66619: PUSH
66620: LD_INT 4
66622: EQUAL
66623: IFFALSE 66633
// sSpec := true ;
66625: LD_ADDR_EXP 62
66629: PUSH
66630: LD_INT 1
66632: ST_TO_ADDR
// if p3 = 5 then
66633: LD_VAR 0 3
66637: PUSH
66638: LD_INT 5
66640: EQUAL
66641: IFFALSE 66651
// sLevel := true ;
66643: LD_ADDR_EXP 66
66647: PUSH
66648: LD_INT 1
66650: ST_TO_ADDR
// if p3 = 6 then
66651: LD_VAR 0 3
66655: PUSH
66656: LD_INT 6
66658: EQUAL
66659: IFFALSE 66669
// sArmoury := true ;
66661: LD_ADDR_EXP 67
66665: PUSH
66666: LD_INT 1
66668: ST_TO_ADDR
// if p3 = 7 then
66669: LD_VAR 0 3
66673: PUSH
66674: LD_INT 7
66676: EQUAL
66677: IFFALSE 66687
// sRadar := true ;
66679: LD_ADDR_EXP 68
66683: PUSH
66684: LD_INT 1
66686: ST_TO_ADDR
// if p3 = 8 then
66687: LD_VAR 0 3
66691: PUSH
66692: LD_INT 8
66694: EQUAL
66695: IFFALSE 66705
// sBunker := true ;
66697: LD_ADDR_EXP 69
66701: PUSH
66702: LD_INT 1
66704: ST_TO_ADDR
// if p3 = 9 then
66705: LD_VAR 0 3
66709: PUSH
66710: LD_INT 9
66712: EQUAL
66713: IFFALSE 66723
// sHack := true ;
66715: LD_ADDR_EXP 70
66719: PUSH
66720: LD_INT 1
66722: ST_TO_ADDR
// if p3 = 10 then
66723: LD_VAR 0 3
66727: PUSH
66728: LD_INT 10
66730: EQUAL
66731: IFFALSE 66741
// sFire := true ;
66733: LD_ADDR_EXP 71
66737: PUSH
66738: LD_INT 1
66740: ST_TO_ADDR
// if p3 = 11 then
66741: LD_VAR 0 3
66745: PUSH
66746: LD_INT 11
66748: EQUAL
66749: IFFALSE 66759
// sRefresh := true ;
66751: LD_ADDR_EXP 72
66755: PUSH
66756: LD_INT 1
66758: ST_TO_ADDR
// if p3 = 12 then
66759: LD_VAR 0 3
66763: PUSH
66764: LD_INT 12
66766: EQUAL
66767: IFFALSE 66777
// sExp := true ;
66769: LD_ADDR_EXP 73
66773: PUSH
66774: LD_INT 1
66776: ST_TO_ADDR
// if p3 = 13 then
66777: LD_VAR 0 3
66781: PUSH
66782: LD_INT 13
66784: EQUAL
66785: IFFALSE 66795
// sDepot := true ;
66787: LD_ADDR_EXP 74
66791: PUSH
66792: LD_INT 1
66794: ST_TO_ADDR
// if p3 = 14 then
66795: LD_VAR 0 3
66799: PUSH
66800: LD_INT 14
66802: EQUAL
66803: IFFALSE 66813
// sFlag := true ;
66805: LD_ADDR_EXP 75
66809: PUSH
66810: LD_INT 1
66812: ST_TO_ADDR
// if p3 = 15 then
66813: LD_VAR 0 3
66817: PUSH
66818: LD_INT 15
66820: EQUAL
66821: IFFALSE 66831
// sKamikadze := true ;
66823: LD_ADDR_EXP 83
66827: PUSH
66828: LD_INT 1
66830: ST_TO_ADDR
// if p3 = 16 then
66831: LD_VAR 0 3
66835: PUSH
66836: LD_INT 16
66838: EQUAL
66839: IFFALSE 66849
// sTroll := true ;
66841: LD_ADDR_EXP 84
66845: PUSH
66846: LD_INT 1
66848: ST_TO_ADDR
// if p3 = 17 then
66849: LD_VAR 0 3
66853: PUSH
66854: LD_INT 17
66856: EQUAL
66857: IFFALSE 66867
// sSlow := true ;
66859: LD_ADDR_EXP 85
66863: PUSH
66864: LD_INT 1
66866: ST_TO_ADDR
// if p3 = 18 then
66867: LD_VAR 0 3
66871: PUSH
66872: LD_INT 18
66874: EQUAL
66875: IFFALSE 66885
// sLack := true ;
66877: LD_ADDR_EXP 86
66881: PUSH
66882: LD_INT 1
66884: ST_TO_ADDR
// if p3 = 19 then
66885: LD_VAR 0 3
66889: PUSH
66890: LD_INT 19
66892: EQUAL
66893: IFFALSE 66903
// sTank := true ;
66895: LD_ADDR_EXP 88
66899: PUSH
66900: LD_INT 1
66902: ST_TO_ADDR
// if p3 = 20 then
66903: LD_VAR 0 3
66907: PUSH
66908: LD_INT 20
66910: EQUAL
66911: IFFALSE 66921
// sRemote := true ;
66913: LD_ADDR_EXP 89
66917: PUSH
66918: LD_INT 1
66920: ST_TO_ADDR
// if p3 = 21 then
66921: LD_VAR 0 3
66925: PUSH
66926: LD_INT 21
66928: EQUAL
66929: IFFALSE 66939
// sPowell := true ;
66931: LD_ADDR_EXP 90
66935: PUSH
66936: LD_INT 1
66938: ST_TO_ADDR
// if p3 = 22 then
66939: LD_VAR 0 3
66943: PUSH
66944: LD_INT 22
66946: EQUAL
66947: IFFALSE 66957
// sTeleport := true ;
66949: LD_ADDR_EXP 93
66953: PUSH
66954: LD_INT 1
66956: ST_TO_ADDR
// if p3 = 23 then
66957: LD_VAR 0 3
66961: PUSH
66962: LD_INT 23
66964: EQUAL
66965: IFFALSE 66975
// sOilTower := true ;
66967: LD_ADDR_EXP 95
66971: PUSH
66972: LD_INT 1
66974: ST_TO_ADDR
// if p3 = 24 then
66975: LD_VAR 0 3
66979: PUSH
66980: LD_INT 24
66982: EQUAL
66983: IFFALSE 66993
// sShovel := true ;
66985: LD_ADDR_EXP 96
66989: PUSH
66990: LD_INT 1
66992: ST_TO_ADDR
// if p3 = 25 then
66993: LD_VAR 0 3
66997: PUSH
66998: LD_INT 25
67000: EQUAL
67001: IFFALSE 67011
// sSheik := true ;
67003: LD_ADDR_EXP 97
67007: PUSH
67008: LD_INT 1
67010: ST_TO_ADDR
// if p3 = 26 then
67011: LD_VAR 0 3
67015: PUSH
67016: LD_INT 26
67018: EQUAL
67019: IFFALSE 67029
// sEarthquake := true ;
67021: LD_ADDR_EXP 99
67025: PUSH
67026: LD_INT 1
67028: ST_TO_ADDR
// if p3 = 27 then
67029: LD_VAR 0 3
67033: PUSH
67034: LD_INT 27
67036: EQUAL
67037: IFFALSE 67047
// sAI := true ;
67039: LD_ADDR_EXP 100
67043: PUSH
67044: LD_INT 1
67046: ST_TO_ADDR
// if p3 = 28 then
67047: LD_VAR 0 3
67051: PUSH
67052: LD_INT 28
67054: EQUAL
67055: IFFALSE 67065
// sCargo := true ;
67057: LD_ADDR_EXP 103
67061: PUSH
67062: LD_INT 1
67064: ST_TO_ADDR
// if p3 = 29 then
67065: LD_VAR 0 3
67069: PUSH
67070: LD_INT 29
67072: EQUAL
67073: IFFALSE 67083
// sDLaser := true ;
67075: LD_ADDR_EXP 104
67079: PUSH
67080: LD_INT 1
67082: ST_TO_ADDR
// if p3 = 30 then
67083: LD_VAR 0 3
67087: PUSH
67088: LD_INT 30
67090: EQUAL
67091: IFFALSE 67101
// sExchange := true ;
67093: LD_ADDR_EXP 105
67097: PUSH
67098: LD_INT 1
67100: ST_TO_ADDR
// if p3 = 31 then
67101: LD_VAR 0 3
67105: PUSH
67106: LD_INT 31
67108: EQUAL
67109: IFFALSE 67119
// sFac := true ;
67111: LD_ADDR_EXP 106
67115: PUSH
67116: LD_INT 1
67118: ST_TO_ADDR
// if p3 = 32 then
67119: LD_VAR 0 3
67123: PUSH
67124: LD_INT 32
67126: EQUAL
67127: IFFALSE 67137
// sPower := true ;
67129: LD_ADDR_EXP 107
67133: PUSH
67134: LD_INT 1
67136: ST_TO_ADDR
// if p3 = 33 then
67137: LD_VAR 0 3
67141: PUSH
67142: LD_INT 33
67144: EQUAL
67145: IFFALSE 67155
// sRandom := true ;
67147: LD_ADDR_EXP 108
67151: PUSH
67152: LD_INT 1
67154: ST_TO_ADDR
// if p3 = 34 then
67155: LD_VAR 0 3
67159: PUSH
67160: LD_INT 34
67162: EQUAL
67163: IFFALSE 67173
// sShield := true ;
67165: LD_ADDR_EXP 109
67169: PUSH
67170: LD_INT 1
67172: ST_TO_ADDR
// if p3 = 35 then
67173: LD_VAR 0 3
67177: PUSH
67178: LD_INT 35
67180: EQUAL
67181: IFFALSE 67191
// sTime := true ;
67183: LD_ADDR_EXP 110
67187: PUSH
67188: LD_INT 1
67190: ST_TO_ADDR
// if p3 = 36 then
67191: LD_VAR 0 3
67195: PUSH
67196: LD_INT 36
67198: EQUAL
67199: IFFALSE 67209
// sTools := true ;
67201: LD_ADDR_EXP 111
67205: PUSH
67206: LD_INT 1
67208: ST_TO_ADDR
// if p3 = 101 then
67209: LD_VAR 0 3
67213: PUSH
67214: LD_INT 101
67216: EQUAL
67217: IFFALSE 67227
// sSold := true ;
67219: LD_ADDR_EXP 76
67223: PUSH
67224: LD_INT 1
67226: ST_TO_ADDR
// if p3 = 102 then
67227: LD_VAR 0 3
67231: PUSH
67232: LD_INT 102
67234: EQUAL
67235: IFFALSE 67245
// sDiff := true ;
67237: LD_ADDR_EXP 77
67241: PUSH
67242: LD_INT 1
67244: ST_TO_ADDR
// if p3 = 103 then
67245: LD_VAR 0 3
67249: PUSH
67250: LD_INT 103
67252: EQUAL
67253: IFFALSE 67263
// sFog := true ;
67255: LD_ADDR_EXP 80
67259: PUSH
67260: LD_INT 1
67262: ST_TO_ADDR
// if p3 = 104 then
67263: LD_VAR 0 3
67267: PUSH
67268: LD_INT 104
67270: EQUAL
67271: IFFALSE 67281
// sReset := true ;
67273: LD_ADDR_EXP 81
67277: PUSH
67278: LD_INT 1
67280: ST_TO_ADDR
// if p3 = 105 then
67281: LD_VAR 0 3
67285: PUSH
67286: LD_INT 105
67288: EQUAL
67289: IFFALSE 67299
// sSun := true ;
67291: LD_ADDR_EXP 82
67295: PUSH
67296: LD_INT 1
67298: ST_TO_ADDR
// if p3 = 106 then
67299: LD_VAR 0 3
67303: PUSH
67304: LD_INT 106
67306: EQUAL
67307: IFFALSE 67317
// sTiger := true ;
67309: LD_ADDR_EXP 78
67313: PUSH
67314: LD_INT 1
67316: ST_TO_ADDR
// if p3 = 107 then
67317: LD_VAR 0 3
67321: PUSH
67322: LD_INT 107
67324: EQUAL
67325: IFFALSE 67335
// sBomb := true ;
67327: LD_ADDR_EXP 79
67331: PUSH
67332: LD_INT 1
67334: ST_TO_ADDR
// if p3 = 108 then
67335: LD_VAR 0 3
67339: PUSH
67340: LD_INT 108
67342: EQUAL
67343: IFFALSE 67353
// sWound := true ;
67345: LD_ADDR_EXP 87
67349: PUSH
67350: LD_INT 1
67352: ST_TO_ADDR
// if p3 = 109 then
67353: LD_VAR 0 3
67357: PUSH
67358: LD_INT 109
67360: EQUAL
67361: IFFALSE 67371
// sBetray := true ;
67363: LD_ADDR_EXP 91
67367: PUSH
67368: LD_INT 1
67370: ST_TO_ADDR
// if p3 = 110 then
67371: LD_VAR 0 3
67375: PUSH
67376: LD_INT 110
67378: EQUAL
67379: IFFALSE 67389
// sContamin := true ;
67381: LD_ADDR_EXP 92
67385: PUSH
67386: LD_INT 1
67388: ST_TO_ADDR
// if p3 = 111 then
67389: LD_VAR 0 3
67393: PUSH
67394: LD_INT 111
67396: EQUAL
67397: IFFALSE 67407
// sOil := true ;
67399: LD_ADDR_EXP 94
67403: PUSH
67404: LD_INT 1
67406: ST_TO_ADDR
// if p3 = 112 then
67407: LD_VAR 0 3
67411: PUSH
67412: LD_INT 112
67414: EQUAL
67415: IFFALSE 67425
// sStu := true ;
67417: LD_ADDR_EXP 98
67421: PUSH
67422: LD_INT 1
67424: ST_TO_ADDR
// if p3 = 113 then
67425: LD_VAR 0 3
67429: PUSH
67430: LD_INT 113
67432: EQUAL
67433: IFFALSE 67443
// sBazooka := true ;
67435: LD_ADDR_EXP 101
67439: PUSH
67440: LD_INT 1
67442: ST_TO_ADDR
// if p3 = 114 then
67443: LD_VAR 0 3
67447: PUSH
67448: LD_INT 114
67450: EQUAL
67451: IFFALSE 67461
// sMortar := true ;
67453: LD_ADDR_EXP 102
67457: PUSH
67458: LD_INT 1
67460: ST_TO_ADDR
// if p3 = 115 then
67461: LD_VAR 0 3
67465: PUSH
67466: LD_INT 115
67468: EQUAL
67469: IFFALSE 67479
// sRanger := true ;
67471: LD_ADDR_EXP 112
67475: PUSH
67476: LD_INT 1
67478: ST_TO_ADDR
// if p3 = 116 then
67479: LD_VAR 0 3
67483: PUSH
67484: LD_INT 116
67486: EQUAL
67487: IFFALSE 67497
// sComputer := true ;
67489: LD_ADDR_EXP 113
67493: PUSH
67494: LD_INT 1
67496: ST_TO_ADDR
// if p3 = 117 then
67497: LD_VAR 0 3
67501: PUSH
67502: LD_INT 117
67504: EQUAL
67505: IFFALSE 67515
// s30 := true ;
67507: LD_ADDR_EXP 114
67511: PUSH
67512: LD_INT 1
67514: ST_TO_ADDR
// if p3 = 118 then
67515: LD_VAR 0 3
67519: PUSH
67520: LD_INT 118
67522: EQUAL
67523: IFFALSE 67533
// s60 := true ;
67525: LD_ADDR_EXP 115
67529: PUSH
67530: LD_INT 1
67532: ST_TO_ADDR
// end ; if p2 = 101 then
67533: LD_VAR 0 2
67537: PUSH
67538: LD_INT 101
67540: EQUAL
67541: IFFALSE 67669
// begin case p3 of 1 :
67543: LD_VAR 0 3
67547: PUSH
67548: LD_INT 1
67550: DOUBLE
67551: EQUAL
67552: IFTRUE 67556
67554: GO 67563
67556: POP
// hHackUnlimitedResources ; 2 :
67557: CALL 79767 0 0
67561: GO 67669
67563: LD_INT 2
67565: DOUBLE
67566: EQUAL
67567: IFTRUE 67571
67569: GO 67578
67571: POP
// hHackSetLevel10 ; 3 :
67572: CALL 79900 0 0
67576: GO 67669
67578: LD_INT 3
67580: DOUBLE
67581: EQUAL
67582: IFTRUE 67586
67584: GO 67593
67586: POP
// hHackSetLevel10YourUnits ; 4 :
67587: CALL 79985 0 0
67591: GO 67669
67593: LD_INT 4
67595: DOUBLE
67596: EQUAL
67597: IFTRUE 67601
67599: GO 67608
67601: POP
// hHackInvincible ; 5 :
67602: CALL 80433 0 0
67606: GO 67669
67608: LD_INT 5
67610: DOUBLE
67611: EQUAL
67612: IFTRUE 67616
67614: GO 67623
67616: POP
// hHackInvisible ; 6 :
67617: CALL 80544 0 0
67621: GO 67669
67623: LD_INT 6
67625: DOUBLE
67626: EQUAL
67627: IFTRUE 67631
67629: GO 67638
67631: POP
// hHackChangeYourSide ; 7 :
67632: CALL 80601 0 0
67636: GO 67669
67638: LD_INT 7
67640: DOUBLE
67641: EQUAL
67642: IFTRUE 67646
67644: GO 67653
67646: POP
// hHackChangeUnitSide ; 8 :
67647: CALL 80643 0 0
67651: GO 67669
67653: LD_INT 8
67655: DOUBLE
67656: EQUAL
67657: IFTRUE 67661
67659: GO 67668
67661: POP
// hHackFog ; end ;
67662: CALL 80744 0 0
67666: GO 67669
67668: POP
// end ; end ;
67669: LD_VAR 0 7
67673: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
67674: GO 67676
67676: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
67677: LD_STRING initStreamRollete();
67679: PPUSH
67680: CALL_OW 559
// InitStreamMode ;
67684: CALL 67696 0 0
// DefineStreamItems ( false ) ;
67688: LD_INT 0
67690: PPUSH
67691: CALL 68160 0 1
// end ;
67695: END
// function InitStreamMode ; begin
67696: LD_INT 0
67698: PPUSH
// streamModeActive := false ;
67699: LD_ADDR_EXP 59
67703: PUSH
67704: LD_INT 0
67706: ST_TO_ADDR
// normalCounter := 36 ;
67707: LD_ADDR_EXP 60
67711: PUSH
67712: LD_INT 36
67714: ST_TO_ADDR
// hardcoreCounter := 18 ;
67715: LD_ADDR_EXP 61
67719: PUSH
67720: LD_INT 18
67722: ST_TO_ADDR
// sRocket := false ;
67723: LD_ADDR_EXP 64
67727: PUSH
67728: LD_INT 0
67730: ST_TO_ADDR
// sSpeed := false ;
67731: LD_ADDR_EXP 63
67735: PUSH
67736: LD_INT 0
67738: ST_TO_ADDR
// sEngine := false ;
67739: LD_ADDR_EXP 65
67743: PUSH
67744: LD_INT 0
67746: ST_TO_ADDR
// sSpec := false ;
67747: LD_ADDR_EXP 62
67751: PUSH
67752: LD_INT 0
67754: ST_TO_ADDR
// sLevel := false ;
67755: LD_ADDR_EXP 66
67759: PUSH
67760: LD_INT 0
67762: ST_TO_ADDR
// sArmoury := false ;
67763: LD_ADDR_EXP 67
67767: PUSH
67768: LD_INT 0
67770: ST_TO_ADDR
// sRadar := false ;
67771: LD_ADDR_EXP 68
67775: PUSH
67776: LD_INT 0
67778: ST_TO_ADDR
// sBunker := false ;
67779: LD_ADDR_EXP 69
67783: PUSH
67784: LD_INT 0
67786: ST_TO_ADDR
// sHack := false ;
67787: LD_ADDR_EXP 70
67791: PUSH
67792: LD_INT 0
67794: ST_TO_ADDR
// sFire := false ;
67795: LD_ADDR_EXP 71
67799: PUSH
67800: LD_INT 0
67802: ST_TO_ADDR
// sRefresh := false ;
67803: LD_ADDR_EXP 72
67807: PUSH
67808: LD_INT 0
67810: ST_TO_ADDR
// sExp := false ;
67811: LD_ADDR_EXP 73
67815: PUSH
67816: LD_INT 0
67818: ST_TO_ADDR
// sDepot := false ;
67819: LD_ADDR_EXP 74
67823: PUSH
67824: LD_INT 0
67826: ST_TO_ADDR
// sFlag := false ;
67827: LD_ADDR_EXP 75
67831: PUSH
67832: LD_INT 0
67834: ST_TO_ADDR
// sKamikadze := false ;
67835: LD_ADDR_EXP 83
67839: PUSH
67840: LD_INT 0
67842: ST_TO_ADDR
// sTroll := false ;
67843: LD_ADDR_EXP 84
67847: PUSH
67848: LD_INT 0
67850: ST_TO_ADDR
// sSlow := false ;
67851: LD_ADDR_EXP 85
67855: PUSH
67856: LD_INT 0
67858: ST_TO_ADDR
// sLack := false ;
67859: LD_ADDR_EXP 86
67863: PUSH
67864: LD_INT 0
67866: ST_TO_ADDR
// sTank := false ;
67867: LD_ADDR_EXP 88
67871: PUSH
67872: LD_INT 0
67874: ST_TO_ADDR
// sRemote := false ;
67875: LD_ADDR_EXP 89
67879: PUSH
67880: LD_INT 0
67882: ST_TO_ADDR
// sPowell := false ;
67883: LD_ADDR_EXP 90
67887: PUSH
67888: LD_INT 0
67890: ST_TO_ADDR
// sTeleport := false ;
67891: LD_ADDR_EXP 93
67895: PUSH
67896: LD_INT 0
67898: ST_TO_ADDR
// sOilTower := false ;
67899: LD_ADDR_EXP 95
67903: PUSH
67904: LD_INT 0
67906: ST_TO_ADDR
// sShovel := false ;
67907: LD_ADDR_EXP 96
67911: PUSH
67912: LD_INT 0
67914: ST_TO_ADDR
// sSheik := false ;
67915: LD_ADDR_EXP 97
67919: PUSH
67920: LD_INT 0
67922: ST_TO_ADDR
// sEarthquake := false ;
67923: LD_ADDR_EXP 99
67927: PUSH
67928: LD_INT 0
67930: ST_TO_ADDR
// sAI := false ;
67931: LD_ADDR_EXP 100
67935: PUSH
67936: LD_INT 0
67938: ST_TO_ADDR
// sCargo := false ;
67939: LD_ADDR_EXP 103
67943: PUSH
67944: LD_INT 0
67946: ST_TO_ADDR
// sDLaser := false ;
67947: LD_ADDR_EXP 104
67951: PUSH
67952: LD_INT 0
67954: ST_TO_ADDR
// sExchange := false ;
67955: LD_ADDR_EXP 105
67959: PUSH
67960: LD_INT 0
67962: ST_TO_ADDR
// sFac := false ;
67963: LD_ADDR_EXP 106
67967: PUSH
67968: LD_INT 0
67970: ST_TO_ADDR
// sPower := false ;
67971: LD_ADDR_EXP 107
67975: PUSH
67976: LD_INT 0
67978: ST_TO_ADDR
// sRandom := false ;
67979: LD_ADDR_EXP 108
67983: PUSH
67984: LD_INT 0
67986: ST_TO_ADDR
// sShield := false ;
67987: LD_ADDR_EXP 109
67991: PUSH
67992: LD_INT 0
67994: ST_TO_ADDR
// sTime := false ;
67995: LD_ADDR_EXP 110
67999: PUSH
68000: LD_INT 0
68002: ST_TO_ADDR
// sTools := false ;
68003: LD_ADDR_EXP 111
68007: PUSH
68008: LD_INT 0
68010: ST_TO_ADDR
// sSold := false ;
68011: LD_ADDR_EXP 76
68015: PUSH
68016: LD_INT 0
68018: ST_TO_ADDR
// sDiff := false ;
68019: LD_ADDR_EXP 77
68023: PUSH
68024: LD_INT 0
68026: ST_TO_ADDR
// sFog := false ;
68027: LD_ADDR_EXP 80
68031: PUSH
68032: LD_INT 0
68034: ST_TO_ADDR
// sReset := false ;
68035: LD_ADDR_EXP 81
68039: PUSH
68040: LD_INT 0
68042: ST_TO_ADDR
// sSun := false ;
68043: LD_ADDR_EXP 82
68047: PUSH
68048: LD_INT 0
68050: ST_TO_ADDR
// sTiger := false ;
68051: LD_ADDR_EXP 78
68055: PUSH
68056: LD_INT 0
68058: ST_TO_ADDR
// sBomb := false ;
68059: LD_ADDR_EXP 79
68063: PUSH
68064: LD_INT 0
68066: ST_TO_ADDR
// sWound := false ;
68067: LD_ADDR_EXP 87
68071: PUSH
68072: LD_INT 0
68074: ST_TO_ADDR
// sBetray := false ;
68075: LD_ADDR_EXP 91
68079: PUSH
68080: LD_INT 0
68082: ST_TO_ADDR
// sContamin := false ;
68083: LD_ADDR_EXP 92
68087: PUSH
68088: LD_INT 0
68090: ST_TO_ADDR
// sOil := false ;
68091: LD_ADDR_EXP 94
68095: PUSH
68096: LD_INT 0
68098: ST_TO_ADDR
// sStu := false ;
68099: LD_ADDR_EXP 98
68103: PUSH
68104: LD_INT 0
68106: ST_TO_ADDR
// sBazooka := false ;
68107: LD_ADDR_EXP 101
68111: PUSH
68112: LD_INT 0
68114: ST_TO_ADDR
// sMortar := false ;
68115: LD_ADDR_EXP 102
68119: PUSH
68120: LD_INT 0
68122: ST_TO_ADDR
// sRanger := false ;
68123: LD_ADDR_EXP 112
68127: PUSH
68128: LD_INT 0
68130: ST_TO_ADDR
// sComputer := false ;
68131: LD_ADDR_EXP 113
68135: PUSH
68136: LD_INT 0
68138: ST_TO_ADDR
// s30 := false ;
68139: LD_ADDR_EXP 114
68143: PUSH
68144: LD_INT 0
68146: ST_TO_ADDR
// s60 := false ;
68147: LD_ADDR_EXP 115
68151: PUSH
68152: LD_INT 0
68154: ST_TO_ADDR
// end ;
68155: LD_VAR 0 1
68159: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
68160: LD_INT 0
68162: PPUSH
68163: PPUSH
68164: PPUSH
68165: PPUSH
68166: PPUSH
68167: PPUSH
68168: PPUSH
// result := [ ] ;
68169: LD_ADDR_VAR 0 2
68173: PUSH
68174: EMPTY
68175: ST_TO_ADDR
// if campaign_id = 1 then
68176: LD_OWVAR 69
68180: PUSH
68181: LD_INT 1
68183: EQUAL
68184: IFFALSE 71350
// begin case mission_number of 1 :
68186: LD_OWVAR 70
68190: PUSH
68191: LD_INT 1
68193: DOUBLE
68194: EQUAL
68195: IFTRUE 68199
68197: GO 68275
68199: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
68200: LD_ADDR_VAR 0 2
68204: PUSH
68205: LD_INT 2
68207: PUSH
68208: LD_INT 4
68210: PUSH
68211: LD_INT 11
68213: PUSH
68214: LD_INT 12
68216: PUSH
68217: LD_INT 15
68219: PUSH
68220: LD_INT 16
68222: PUSH
68223: LD_INT 22
68225: PUSH
68226: LD_INT 23
68228: PUSH
68229: LD_INT 26
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 101
68245: PUSH
68246: LD_INT 102
68248: PUSH
68249: LD_INT 106
68251: PUSH
68252: LD_INT 116
68254: PUSH
68255: LD_INT 117
68257: PUSH
68258: LD_INT 118
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: ST_TO_ADDR
68273: GO 71348
68275: LD_INT 2
68277: DOUBLE
68278: EQUAL
68279: IFTRUE 68283
68281: GO 68367
68283: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
68284: LD_ADDR_VAR 0 2
68288: PUSH
68289: LD_INT 2
68291: PUSH
68292: LD_INT 4
68294: PUSH
68295: LD_INT 11
68297: PUSH
68298: LD_INT 12
68300: PUSH
68301: LD_INT 15
68303: PUSH
68304: LD_INT 16
68306: PUSH
68307: LD_INT 22
68309: PUSH
68310: LD_INT 23
68312: PUSH
68313: LD_INT 26
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 101
68329: PUSH
68330: LD_INT 102
68332: PUSH
68333: LD_INT 105
68335: PUSH
68336: LD_INT 106
68338: PUSH
68339: LD_INT 108
68341: PUSH
68342: LD_INT 116
68344: PUSH
68345: LD_INT 117
68347: PUSH
68348: LD_INT 118
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: ST_TO_ADDR
68365: GO 71348
68367: LD_INT 3
68369: DOUBLE
68370: EQUAL
68371: IFTRUE 68375
68373: GO 68463
68375: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
68376: LD_ADDR_VAR 0 2
68380: PUSH
68381: LD_INT 2
68383: PUSH
68384: LD_INT 4
68386: PUSH
68387: LD_INT 5
68389: PUSH
68390: LD_INT 11
68392: PUSH
68393: LD_INT 12
68395: PUSH
68396: LD_INT 15
68398: PUSH
68399: LD_INT 16
68401: PUSH
68402: LD_INT 22
68404: PUSH
68405: LD_INT 26
68407: PUSH
68408: LD_INT 36
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 101
68425: PUSH
68426: LD_INT 102
68428: PUSH
68429: LD_INT 105
68431: PUSH
68432: LD_INT 106
68434: PUSH
68435: LD_INT 108
68437: PUSH
68438: LD_INT 116
68440: PUSH
68441: LD_INT 117
68443: PUSH
68444: LD_INT 118
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: ST_TO_ADDR
68461: GO 71348
68463: LD_INT 4
68465: DOUBLE
68466: EQUAL
68467: IFTRUE 68471
68469: GO 68567
68471: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
68472: LD_ADDR_VAR 0 2
68476: PUSH
68477: LD_INT 2
68479: PUSH
68480: LD_INT 4
68482: PUSH
68483: LD_INT 5
68485: PUSH
68486: LD_INT 8
68488: PUSH
68489: LD_INT 11
68491: PUSH
68492: LD_INT 12
68494: PUSH
68495: LD_INT 15
68497: PUSH
68498: LD_INT 16
68500: PUSH
68501: LD_INT 22
68503: PUSH
68504: LD_INT 23
68506: PUSH
68507: LD_INT 26
68509: PUSH
68510: LD_INT 36
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 101
68529: PUSH
68530: LD_INT 102
68532: PUSH
68533: LD_INT 105
68535: PUSH
68536: LD_INT 106
68538: PUSH
68539: LD_INT 108
68541: PUSH
68542: LD_INT 116
68544: PUSH
68545: LD_INT 117
68547: PUSH
68548: LD_INT 118
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: ST_TO_ADDR
68565: GO 71348
68567: LD_INT 5
68569: DOUBLE
68570: EQUAL
68571: IFTRUE 68575
68573: GO 68687
68575: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
68576: LD_ADDR_VAR 0 2
68580: PUSH
68581: LD_INT 2
68583: PUSH
68584: LD_INT 4
68586: PUSH
68587: LD_INT 5
68589: PUSH
68590: LD_INT 6
68592: PUSH
68593: LD_INT 8
68595: PUSH
68596: LD_INT 11
68598: PUSH
68599: LD_INT 12
68601: PUSH
68602: LD_INT 15
68604: PUSH
68605: LD_INT 16
68607: PUSH
68608: LD_INT 22
68610: PUSH
68611: LD_INT 23
68613: PUSH
68614: LD_INT 25
68616: PUSH
68617: LD_INT 26
68619: PUSH
68620: LD_INT 36
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 101
68641: PUSH
68642: LD_INT 102
68644: PUSH
68645: LD_INT 105
68647: PUSH
68648: LD_INT 106
68650: PUSH
68651: LD_INT 108
68653: PUSH
68654: LD_INT 109
68656: PUSH
68657: LD_INT 112
68659: PUSH
68660: LD_INT 116
68662: PUSH
68663: LD_INT 117
68665: PUSH
68666: LD_INT 118
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: ST_TO_ADDR
68685: GO 71348
68687: LD_INT 6
68689: DOUBLE
68690: EQUAL
68691: IFTRUE 68695
68693: GO 68827
68695: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
68696: LD_ADDR_VAR 0 2
68700: PUSH
68701: LD_INT 2
68703: PUSH
68704: LD_INT 4
68706: PUSH
68707: LD_INT 5
68709: PUSH
68710: LD_INT 6
68712: PUSH
68713: LD_INT 8
68715: PUSH
68716: LD_INT 11
68718: PUSH
68719: LD_INT 12
68721: PUSH
68722: LD_INT 15
68724: PUSH
68725: LD_INT 16
68727: PUSH
68728: LD_INT 20
68730: PUSH
68731: LD_INT 21
68733: PUSH
68734: LD_INT 22
68736: PUSH
68737: LD_INT 23
68739: PUSH
68740: LD_INT 25
68742: PUSH
68743: LD_INT 26
68745: PUSH
68746: LD_INT 30
68748: PUSH
68749: LD_INT 31
68751: PUSH
68752: LD_INT 32
68754: PUSH
68755: LD_INT 36
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 101
68781: PUSH
68782: LD_INT 102
68784: PUSH
68785: LD_INT 105
68787: PUSH
68788: LD_INT 106
68790: PUSH
68791: LD_INT 108
68793: PUSH
68794: LD_INT 109
68796: PUSH
68797: LD_INT 112
68799: PUSH
68800: LD_INT 116
68802: PUSH
68803: LD_INT 117
68805: PUSH
68806: LD_INT 118
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: ST_TO_ADDR
68825: GO 71348
68827: LD_INT 7
68829: DOUBLE
68830: EQUAL
68831: IFTRUE 68835
68833: GO 68947
68835: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
68836: LD_ADDR_VAR 0 2
68840: PUSH
68841: LD_INT 2
68843: PUSH
68844: LD_INT 4
68846: PUSH
68847: LD_INT 5
68849: PUSH
68850: LD_INT 7
68852: PUSH
68853: LD_INT 11
68855: PUSH
68856: LD_INT 12
68858: PUSH
68859: LD_INT 15
68861: PUSH
68862: LD_INT 16
68864: PUSH
68865: LD_INT 20
68867: PUSH
68868: LD_INT 21
68870: PUSH
68871: LD_INT 22
68873: PUSH
68874: LD_INT 23
68876: PUSH
68877: LD_INT 25
68879: PUSH
68880: LD_INT 26
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 101
68901: PUSH
68902: LD_INT 102
68904: PUSH
68905: LD_INT 103
68907: PUSH
68908: LD_INT 105
68910: PUSH
68911: LD_INT 106
68913: PUSH
68914: LD_INT 108
68916: PUSH
68917: LD_INT 112
68919: PUSH
68920: LD_INT 116
68922: PUSH
68923: LD_INT 117
68925: PUSH
68926: LD_INT 118
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: ST_TO_ADDR
68945: GO 71348
68947: LD_INT 8
68949: DOUBLE
68950: EQUAL
68951: IFTRUE 68955
68953: GO 69095
68955: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
68956: LD_ADDR_VAR 0 2
68960: PUSH
68961: LD_INT 2
68963: PUSH
68964: LD_INT 4
68966: PUSH
68967: LD_INT 5
68969: PUSH
68970: LD_INT 6
68972: PUSH
68973: LD_INT 7
68975: PUSH
68976: LD_INT 8
68978: PUSH
68979: LD_INT 11
68981: PUSH
68982: LD_INT 12
68984: PUSH
68985: LD_INT 15
68987: PUSH
68988: LD_INT 16
68990: PUSH
68991: LD_INT 20
68993: PUSH
68994: LD_INT 21
68996: PUSH
68997: LD_INT 22
68999: PUSH
69000: LD_INT 23
69002: PUSH
69003: LD_INT 25
69005: PUSH
69006: LD_INT 26
69008: PUSH
69009: LD_INT 30
69011: PUSH
69012: LD_INT 31
69014: PUSH
69015: LD_INT 32
69017: PUSH
69018: LD_INT 36
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 101
69045: PUSH
69046: LD_INT 102
69048: PUSH
69049: LD_INT 103
69051: PUSH
69052: LD_INT 105
69054: PUSH
69055: LD_INT 106
69057: PUSH
69058: LD_INT 108
69060: PUSH
69061: LD_INT 109
69063: PUSH
69064: LD_INT 112
69066: PUSH
69067: LD_INT 116
69069: PUSH
69070: LD_INT 117
69072: PUSH
69073: LD_INT 118
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: ST_TO_ADDR
69093: GO 71348
69095: LD_INT 9
69097: DOUBLE
69098: EQUAL
69099: IFTRUE 69103
69101: GO 69251
69103: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
69104: LD_ADDR_VAR 0 2
69108: PUSH
69109: LD_INT 2
69111: PUSH
69112: LD_INT 4
69114: PUSH
69115: LD_INT 5
69117: PUSH
69118: LD_INT 6
69120: PUSH
69121: LD_INT 7
69123: PUSH
69124: LD_INT 8
69126: PUSH
69127: LD_INT 11
69129: PUSH
69130: LD_INT 12
69132: PUSH
69133: LD_INT 15
69135: PUSH
69136: LD_INT 16
69138: PUSH
69139: LD_INT 20
69141: PUSH
69142: LD_INT 21
69144: PUSH
69145: LD_INT 22
69147: PUSH
69148: LD_INT 23
69150: PUSH
69151: LD_INT 25
69153: PUSH
69154: LD_INT 26
69156: PUSH
69157: LD_INT 28
69159: PUSH
69160: LD_INT 30
69162: PUSH
69163: LD_INT 31
69165: PUSH
69166: LD_INT 32
69168: PUSH
69169: LD_INT 36
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 101
69197: PUSH
69198: LD_INT 102
69200: PUSH
69201: LD_INT 103
69203: PUSH
69204: LD_INT 105
69206: PUSH
69207: LD_INT 106
69209: PUSH
69210: LD_INT 108
69212: PUSH
69213: LD_INT 109
69215: PUSH
69216: LD_INT 112
69218: PUSH
69219: LD_INT 114
69221: PUSH
69222: LD_INT 116
69224: PUSH
69225: LD_INT 117
69227: PUSH
69228: LD_INT 118
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: ST_TO_ADDR
69249: GO 71348
69251: LD_INT 10
69253: DOUBLE
69254: EQUAL
69255: IFTRUE 69259
69257: GO 69455
69259: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
69260: LD_ADDR_VAR 0 2
69264: PUSH
69265: LD_INT 2
69267: PUSH
69268: LD_INT 4
69270: PUSH
69271: LD_INT 5
69273: PUSH
69274: LD_INT 6
69276: PUSH
69277: LD_INT 7
69279: PUSH
69280: LD_INT 8
69282: PUSH
69283: LD_INT 9
69285: PUSH
69286: LD_INT 10
69288: PUSH
69289: LD_INT 11
69291: PUSH
69292: LD_INT 12
69294: PUSH
69295: LD_INT 13
69297: PUSH
69298: LD_INT 14
69300: PUSH
69301: LD_INT 15
69303: PUSH
69304: LD_INT 16
69306: PUSH
69307: LD_INT 17
69309: PUSH
69310: LD_INT 18
69312: PUSH
69313: LD_INT 19
69315: PUSH
69316: LD_INT 20
69318: PUSH
69319: LD_INT 21
69321: PUSH
69322: LD_INT 22
69324: PUSH
69325: LD_INT 23
69327: PUSH
69328: LD_INT 24
69330: PUSH
69331: LD_INT 25
69333: PUSH
69334: LD_INT 26
69336: PUSH
69337: LD_INT 28
69339: PUSH
69340: LD_INT 30
69342: PUSH
69343: LD_INT 31
69345: PUSH
69346: LD_INT 32
69348: PUSH
69349: LD_INT 36
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 101
69385: PUSH
69386: LD_INT 102
69388: PUSH
69389: LD_INT 103
69391: PUSH
69392: LD_INT 104
69394: PUSH
69395: LD_INT 105
69397: PUSH
69398: LD_INT 106
69400: PUSH
69401: LD_INT 107
69403: PUSH
69404: LD_INT 108
69406: PUSH
69407: LD_INT 109
69409: PUSH
69410: LD_INT 110
69412: PUSH
69413: LD_INT 111
69415: PUSH
69416: LD_INT 112
69418: PUSH
69419: LD_INT 114
69421: PUSH
69422: LD_INT 116
69424: PUSH
69425: LD_INT 117
69427: PUSH
69428: LD_INT 118
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: ST_TO_ADDR
69453: GO 71348
69455: LD_INT 11
69457: DOUBLE
69458: EQUAL
69459: IFTRUE 69463
69461: GO 69667
69463: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
69464: LD_ADDR_VAR 0 2
69468: PUSH
69469: LD_INT 2
69471: PUSH
69472: LD_INT 3
69474: PUSH
69475: LD_INT 4
69477: PUSH
69478: LD_INT 5
69480: PUSH
69481: LD_INT 6
69483: PUSH
69484: LD_INT 7
69486: PUSH
69487: LD_INT 8
69489: PUSH
69490: LD_INT 9
69492: PUSH
69493: LD_INT 10
69495: PUSH
69496: LD_INT 11
69498: PUSH
69499: LD_INT 12
69501: PUSH
69502: LD_INT 13
69504: PUSH
69505: LD_INT 14
69507: PUSH
69508: LD_INT 15
69510: PUSH
69511: LD_INT 16
69513: PUSH
69514: LD_INT 17
69516: PUSH
69517: LD_INT 18
69519: PUSH
69520: LD_INT 19
69522: PUSH
69523: LD_INT 20
69525: PUSH
69526: LD_INT 21
69528: PUSH
69529: LD_INT 22
69531: PUSH
69532: LD_INT 23
69534: PUSH
69535: LD_INT 24
69537: PUSH
69538: LD_INT 25
69540: PUSH
69541: LD_INT 26
69543: PUSH
69544: LD_INT 28
69546: PUSH
69547: LD_INT 30
69549: PUSH
69550: LD_INT 31
69552: PUSH
69553: LD_INT 32
69555: PUSH
69556: LD_INT 34
69558: PUSH
69559: LD_INT 36
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 101
69597: PUSH
69598: LD_INT 102
69600: PUSH
69601: LD_INT 103
69603: PUSH
69604: LD_INT 104
69606: PUSH
69607: LD_INT 105
69609: PUSH
69610: LD_INT 106
69612: PUSH
69613: LD_INT 107
69615: PUSH
69616: LD_INT 108
69618: PUSH
69619: LD_INT 109
69621: PUSH
69622: LD_INT 110
69624: PUSH
69625: LD_INT 111
69627: PUSH
69628: LD_INT 112
69630: PUSH
69631: LD_INT 114
69633: PUSH
69634: LD_INT 116
69636: PUSH
69637: LD_INT 117
69639: PUSH
69640: LD_INT 118
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: ST_TO_ADDR
69665: GO 71348
69667: LD_INT 12
69669: DOUBLE
69670: EQUAL
69671: IFTRUE 69675
69673: GO 69895
69675: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
69676: LD_ADDR_VAR 0 2
69680: PUSH
69681: LD_INT 1
69683: PUSH
69684: LD_INT 2
69686: PUSH
69687: LD_INT 3
69689: PUSH
69690: LD_INT 4
69692: PUSH
69693: LD_INT 5
69695: PUSH
69696: LD_INT 6
69698: PUSH
69699: LD_INT 7
69701: PUSH
69702: LD_INT 8
69704: PUSH
69705: LD_INT 9
69707: PUSH
69708: LD_INT 10
69710: PUSH
69711: LD_INT 11
69713: PUSH
69714: LD_INT 12
69716: PUSH
69717: LD_INT 13
69719: PUSH
69720: LD_INT 14
69722: PUSH
69723: LD_INT 15
69725: PUSH
69726: LD_INT 16
69728: PUSH
69729: LD_INT 17
69731: PUSH
69732: LD_INT 18
69734: PUSH
69735: LD_INT 19
69737: PUSH
69738: LD_INT 20
69740: PUSH
69741: LD_INT 21
69743: PUSH
69744: LD_INT 22
69746: PUSH
69747: LD_INT 23
69749: PUSH
69750: LD_INT 24
69752: PUSH
69753: LD_INT 25
69755: PUSH
69756: LD_INT 26
69758: PUSH
69759: LD_INT 27
69761: PUSH
69762: LD_INT 28
69764: PUSH
69765: LD_INT 30
69767: PUSH
69768: LD_INT 31
69770: PUSH
69771: LD_INT 32
69773: PUSH
69774: LD_INT 33
69776: PUSH
69777: LD_INT 34
69779: PUSH
69780: LD_INT 36
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 101
69821: PUSH
69822: LD_INT 102
69824: PUSH
69825: LD_INT 103
69827: PUSH
69828: LD_INT 104
69830: PUSH
69831: LD_INT 105
69833: PUSH
69834: LD_INT 106
69836: PUSH
69837: LD_INT 107
69839: PUSH
69840: LD_INT 108
69842: PUSH
69843: LD_INT 109
69845: PUSH
69846: LD_INT 110
69848: PUSH
69849: LD_INT 111
69851: PUSH
69852: LD_INT 112
69854: PUSH
69855: LD_INT 113
69857: PUSH
69858: LD_INT 114
69860: PUSH
69861: LD_INT 116
69863: PUSH
69864: LD_INT 117
69866: PUSH
69867: LD_INT 118
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: ST_TO_ADDR
69893: GO 71348
69895: LD_INT 13
69897: DOUBLE
69898: EQUAL
69899: IFTRUE 69903
69901: GO 70111
69903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
69904: LD_ADDR_VAR 0 2
69908: PUSH
69909: LD_INT 1
69911: PUSH
69912: LD_INT 2
69914: PUSH
69915: LD_INT 3
69917: PUSH
69918: LD_INT 4
69920: PUSH
69921: LD_INT 5
69923: PUSH
69924: LD_INT 8
69926: PUSH
69927: LD_INT 9
69929: PUSH
69930: LD_INT 10
69932: PUSH
69933: LD_INT 11
69935: PUSH
69936: LD_INT 12
69938: PUSH
69939: LD_INT 14
69941: PUSH
69942: LD_INT 15
69944: PUSH
69945: LD_INT 16
69947: PUSH
69948: LD_INT 17
69950: PUSH
69951: LD_INT 18
69953: PUSH
69954: LD_INT 19
69956: PUSH
69957: LD_INT 20
69959: PUSH
69960: LD_INT 21
69962: PUSH
69963: LD_INT 22
69965: PUSH
69966: LD_INT 23
69968: PUSH
69969: LD_INT 24
69971: PUSH
69972: LD_INT 25
69974: PUSH
69975: LD_INT 26
69977: PUSH
69978: LD_INT 27
69980: PUSH
69981: LD_INT 28
69983: PUSH
69984: LD_INT 30
69986: PUSH
69987: LD_INT 31
69989: PUSH
69990: LD_INT 32
69992: PUSH
69993: LD_INT 33
69995: PUSH
69996: LD_INT 34
69998: PUSH
69999: LD_INT 36
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 101
70037: PUSH
70038: LD_INT 102
70040: PUSH
70041: LD_INT 103
70043: PUSH
70044: LD_INT 104
70046: PUSH
70047: LD_INT 105
70049: PUSH
70050: LD_INT 106
70052: PUSH
70053: LD_INT 107
70055: PUSH
70056: LD_INT 108
70058: PUSH
70059: LD_INT 109
70061: PUSH
70062: LD_INT 110
70064: PUSH
70065: LD_INT 111
70067: PUSH
70068: LD_INT 112
70070: PUSH
70071: LD_INT 113
70073: PUSH
70074: LD_INT 114
70076: PUSH
70077: LD_INT 116
70079: PUSH
70080: LD_INT 117
70082: PUSH
70083: LD_INT 118
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: ST_TO_ADDR
70109: GO 71348
70111: LD_INT 14
70113: DOUBLE
70114: EQUAL
70115: IFTRUE 70119
70117: GO 70343
70119: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
70120: LD_ADDR_VAR 0 2
70124: PUSH
70125: LD_INT 1
70127: PUSH
70128: LD_INT 2
70130: PUSH
70131: LD_INT 3
70133: PUSH
70134: LD_INT 4
70136: PUSH
70137: LD_INT 5
70139: PUSH
70140: LD_INT 6
70142: PUSH
70143: LD_INT 7
70145: PUSH
70146: LD_INT 8
70148: PUSH
70149: LD_INT 9
70151: PUSH
70152: LD_INT 10
70154: PUSH
70155: LD_INT 11
70157: PUSH
70158: LD_INT 12
70160: PUSH
70161: LD_INT 13
70163: PUSH
70164: LD_INT 14
70166: PUSH
70167: LD_INT 15
70169: PUSH
70170: LD_INT 16
70172: PUSH
70173: LD_INT 17
70175: PUSH
70176: LD_INT 18
70178: PUSH
70179: LD_INT 19
70181: PUSH
70182: LD_INT 20
70184: PUSH
70185: LD_INT 21
70187: PUSH
70188: LD_INT 22
70190: PUSH
70191: LD_INT 23
70193: PUSH
70194: LD_INT 24
70196: PUSH
70197: LD_INT 25
70199: PUSH
70200: LD_INT 26
70202: PUSH
70203: LD_INT 27
70205: PUSH
70206: LD_INT 28
70208: PUSH
70209: LD_INT 29
70211: PUSH
70212: LD_INT 30
70214: PUSH
70215: LD_INT 31
70217: PUSH
70218: LD_INT 32
70220: PUSH
70221: LD_INT 33
70223: PUSH
70224: LD_INT 34
70226: PUSH
70227: LD_INT 36
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 101
70269: PUSH
70270: LD_INT 102
70272: PUSH
70273: LD_INT 103
70275: PUSH
70276: LD_INT 104
70278: PUSH
70279: LD_INT 105
70281: PUSH
70282: LD_INT 106
70284: PUSH
70285: LD_INT 107
70287: PUSH
70288: LD_INT 108
70290: PUSH
70291: LD_INT 109
70293: PUSH
70294: LD_INT 110
70296: PUSH
70297: LD_INT 111
70299: PUSH
70300: LD_INT 112
70302: PUSH
70303: LD_INT 113
70305: PUSH
70306: LD_INT 114
70308: PUSH
70309: LD_INT 116
70311: PUSH
70312: LD_INT 117
70314: PUSH
70315: LD_INT 118
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: ST_TO_ADDR
70341: GO 71348
70343: LD_INT 15
70345: DOUBLE
70346: EQUAL
70347: IFTRUE 70351
70349: GO 70575
70351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
70352: LD_ADDR_VAR 0 2
70356: PUSH
70357: LD_INT 1
70359: PUSH
70360: LD_INT 2
70362: PUSH
70363: LD_INT 3
70365: PUSH
70366: LD_INT 4
70368: PUSH
70369: LD_INT 5
70371: PUSH
70372: LD_INT 6
70374: PUSH
70375: LD_INT 7
70377: PUSH
70378: LD_INT 8
70380: PUSH
70381: LD_INT 9
70383: PUSH
70384: LD_INT 10
70386: PUSH
70387: LD_INT 11
70389: PUSH
70390: LD_INT 12
70392: PUSH
70393: LD_INT 13
70395: PUSH
70396: LD_INT 14
70398: PUSH
70399: LD_INT 15
70401: PUSH
70402: LD_INT 16
70404: PUSH
70405: LD_INT 17
70407: PUSH
70408: LD_INT 18
70410: PUSH
70411: LD_INT 19
70413: PUSH
70414: LD_INT 20
70416: PUSH
70417: LD_INT 21
70419: PUSH
70420: LD_INT 22
70422: PUSH
70423: LD_INT 23
70425: PUSH
70426: LD_INT 24
70428: PUSH
70429: LD_INT 25
70431: PUSH
70432: LD_INT 26
70434: PUSH
70435: LD_INT 27
70437: PUSH
70438: LD_INT 28
70440: PUSH
70441: LD_INT 29
70443: PUSH
70444: LD_INT 30
70446: PUSH
70447: LD_INT 31
70449: PUSH
70450: LD_INT 32
70452: PUSH
70453: LD_INT 33
70455: PUSH
70456: LD_INT 34
70458: PUSH
70459: LD_INT 36
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 101
70501: PUSH
70502: LD_INT 102
70504: PUSH
70505: LD_INT 103
70507: PUSH
70508: LD_INT 104
70510: PUSH
70511: LD_INT 105
70513: PUSH
70514: LD_INT 106
70516: PUSH
70517: LD_INT 107
70519: PUSH
70520: LD_INT 108
70522: PUSH
70523: LD_INT 109
70525: PUSH
70526: LD_INT 110
70528: PUSH
70529: LD_INT 111
70531: PUSH
70532: LD_INT 112
70534: PUSH
70535: LD_INT 113
70537: PUSH
70538: LD_INT 114
70540: PUSH
70541: LD_INT 116
70543: PUSH
70544: LD_INT 117
70546: PUSH
70547: LD_INT 118
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: ST_TO_ADDR
70573: GO 71348
70575: LD_INT 16
70577: DOUBLE
70578: EQUAL
70579: IFTRUE 70583
70581: GO 70719
70583: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
70584: LD_ADDR_VAR 0 2
70588: PUSH
70589: LD_INT 2
70591: PUSH
70592: LD_INT 4
70594: PUSH
70595: LD_INT 5
70597: PUSH
70598: LD_INT 7
70600: PUSH
70601: LD_INT 11
70603: PUSH
70604: LD_INT 12
70606: PUSH
70607: LD_INT 15
70609: PUSH
70610: LD_INT 16
70612: PUSH
70613: LD_INT 20
70615: PUSH
70616: LD_INT 21
70618: PUSH
70619: LD_INT 22
70621: PUSH
70622: LD_INT 23
70624: PUSH
70625: LD_INT 25
70627: PUSH
70628: LD_INT 26
70630: PUSH
70631: LD_INT 30
70633: PUSH
70634: LD_INT 31
70636: PUSH
70637: LD_INT 32
70639: PUSH
70640: LD_INT 33
70642: PUSH
70643: LD_INT 34
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 101
70669: PUSH
70670: LD_INT 102
70672: PUSH
70673: LD_INT 103
70675: PUSH
70676: LD_INT 106
70678: PUSH
70679: LD_INT 108
70681: PUSH
70682: LD_INT 112
70684: PUSH
70685: LD_INT 113
70687: PUSH
70688: LD_INT 114
70690: PUSH
70691: LD_INT 116
70693: PUSH
70694: LD_INT 117
70696: PUSH
70697: LD_INT 118
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: ST_TO_ADDR
70717: GO 71348
70719: LD_INT 17
70721: DOUBLE
70722: EQUAL
70723: IFTRUE 70727
70725: GO 70951
70727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
70728: LD_ADDR_VAR 0 2
70732: PUSH
70733: LD_INT 1
70735: PUSH
70736: LD_INT 2
70738: PUSH
70739: LD_INT 3
70741: PUSH
70742: LD_INT 4
70744: PUSH
70745: LD_INT 5
70747: PUSH
70748: LD_INT 6
70750: PUSH
70751: LD_INT 7
70753: PUSH
70754: LD_INT 8
70756: PUSH
70757: LD_INT 9
70759: PUSH
70760: LD_INT 10
70762: PUSH
70763: LD_INT 11
70765: PUSH
70766: LD_INT 12
70768: PUSH
70769: LD_INT 13
70771: PUSH
70772: LD_INT 14
70774: PUSH
70775: LD_INT 15
70777: PUSH
70778: LD_INT 16
70780: PUSH
70781: LD_INT 17
70783: PUSH
70784: LD_INT 18
70786: PUSH
70787: LD_INT 19
70789: PUSH
70790: LD_INT 20
70792: PUSH
70793: LD_INT 21
70795: PUSH
70796: LD_INT 22
70798: PUSH
70799: LD_INT 23
70801: PUSH
70802: LD_INT 24
70804: PUSH
70805: LD_INT 25
70807: PUSH
70808: LD_INT 26
70810: PUSH
70811: LD_INT 27
70813: PUSH
70814: LD_INT 28
70816: PUSH
70817: LD_INT 29
70819: PUSH
70820: LD_INT 30
70822: PUSH
70823: LD_INT 31
70825: PUSH
70826: LD_INT 32
70828: PUSH
70829: LD_INT 33
70831: PUSH
70832: LD_INT 34
70834: PUSH
70835: LD_INT 36
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 101
70877: PUSH
70878: LD_INT 102
70880: PUSH
70881: LD_INT 103
70883: PUSH
70884: LD_INT 104
70886: PUSH
70887: LD_INT 105
70889: PUSH
70890: LD_INT 106
70892: PUSH
70893: LD_INT 107
70895: PUSH
70896: LD_INT 108
70898: PUSH
70899: LD_INT 109
70901: PUSH
70902: LD_INT 110
70904: PUSH
70905: LD_INT 111
70907: PUSH
70908: LD_INT 112
70910: PUSH
70911: LD_INT 113
70913: PUSH
70914: LD_INT 114
70916: PUSH
70917: LD_INT 116
70919: PUSH
70920: LD_INT 117
70922: PUSH
70923: LD_INT 118
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: ST_TO_ADDR
70949: GO 71348
70951: LD_INT 18
70953: DOUBLE
70954: EQUAL
70955: IFTRUE 70959
70957: GO 71107
70959: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
70960: LD_ADDR_VAR 0 2
70964: PUSH
70965: LD_INT 2
70967: PUSH
70968: LD_INT 4
70970: PUSH
70971: LD_INT 5
70973: PUSH
70974: LD_INT 7
70976: PUSH
70977: LD_INT 11
70979: PUSH
70980: LD_INT 12
70982: PUSH
70983: LD_INT 15
70985: PUSH
70986: LD_INT 16
70988: PUSH
70989: LD_INT 20
70991: PUSH
70992: LD_INT 21
70994: PUSH
70995: LD_INT 22
70997: PUSH
70998: LD_INT 23
71000: PUSH
71001: LD_INT 25
71003: PUSH
71004: LD_INT 26
71006: PUSH
71007: LD_INT 30
71009: PUSH
71010: LD_INT 31
71012: PUSH
71013: LD_INT 32
71015: PUSH
71016: LD_INT 33
71018: PUSH
71019: LD_INT 34
71021: PUSH
71022: LD_INT 35
71024: PUSH
71025: LD_INT 36
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 101
71053: PUSH
71054: LD_INT 102
71056: PUSH
71057: LD_INT 103
71059: PUSH
71060: LD_INT 106
71062: PUSH
71063: LD_INT 108
71065: PUSH
71066: LD_INT 112
71068: PUSH
71069: LD_INT 113
71071: PUSH
71072: LD_INT 114
71074: PUSH
71075: LD_INT 115
71077: PUSH
71078: LD_INT 116
71080: PUSH
71081: LD_INT 117
71083: PUSH
71084: LD_INT 118
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: ST_TO_ADDR
71105: GO 71348
71107: LD_INT 19
71109: DOUBLE
71110: EQUAL
71111: IFTRUE 71115
71113: GO 71347
71115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
71116: LD_ADDR_VAR 0 2
71120: PUSH
71121: LD_INT 1
71123: PUSH
71124: LD_INT 2
71126: PUSH
71127: LD_INT 3
71129: PUSH
71130: LD_INT 4
71132: PUSH
71133: LD_INT 5
71135: PUSH
71136: LD_INT 6
71138: PUSH
71139: LD_INT 7
71141: PUSH
71142: LD_INT 8
71144: PUSH
71145: LD_INT 9
71147: PUSH
71148: LD_INT 10
71150: PUSH
71151: LD_INT 11
71153: PUSH
71154: LD_INT 12
71156: PUSH
71157: LD_INT 13
71159: PUSH
71160: LD_INT 14
71162: PUSH
71163: LD_INT 15
71165: PUSH
71166: LD_INT 16
71168: PUSH
71169: LD_INT 17
71171: PUSH
71172: LD_INT 18
71174: PUSH
71175: LD_INT 19
71177: PUSH
71178: LD_INT 20
71180: PUSH
71181: LD_INT 21
71183: PUSH
71184: LD_INT 22
71186: PUSH
71187: LD_INT 23
71189: PUSH
71190: LD_INT 24
71192: PUSH
71193: LD_INT 25
71195: PUSH
71196: LD_INT 26
71198: PUSH
71199: LD_INT 27
71201: PUSH
71202: LD_INT 28
71204: PUSH
71205: LD_INT 29
71207: PUSH
71208: LD_INT 30
71210: PUSH
71211: LD_INT 31
71213: PUSH
71214: LD_INT 32
71216: PUSH
71217: LD_INT 33
71219: PUSH
71220: LD_INT 34
71222: PUSH
71223: LD_INT 35
71225: PUSH
71226: LD_INT 36
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 101
71269: PUSH
71270: LD_INT 102
71272: PUSH
71273: LD_INT 103
71275: PUSH
71276: LD_INT 104
71278: PUSH
71279: LD_INT 105
71281: PUSH
71282: LD_INT 106
71284: PUSH
71285: LD_INT 107
71287: PUSH
71288: LD_INT 108
71290: PUSH
71291: LD_INT 109
71293: PUSH
71294: LD_INT 110
71296: PUSH
71297: LD_INT 111
71299: PUSH
71300: LD_INT 112
71302: PUSH
71303: LD_INT 113
71305: PUSH
71306: LD_INT 114
71308: PUSH
71309: LD_INT 115
71311: PUSH
71312: LD_INT 116
71314: PUSH
71315: LD_INT 117
71317: PUSH
71318: LD_INT 118
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: ST_TO_ADDR
71345: GO 71348
71347: POP
// end else
71348: GO 71579
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
71350: LD_ADDR_VAR 0 2
71354: PUSH
71355: LD_INT 1
71357: PUSH
71358: LD_INT 2
71360: PUSH
71361: LD_INT 3
71363: PUSH
71364: LD_INT 4
71366: PUSH
71367: LD_INT 5
71369: PUSH
71370: LD_INT 6
71372: PUSH
71373: LD_INT 7
71375: PUSH
71376: LD_INT 8
71378: PUSH
71379: LD_INT 9
71381: PUSH
71382: LD_INT 10
71384: PUSH
71385: LD_INT 11
71387: PUSH
71388: LD_INT 12
71390: PUSH
71391: LD_INT 13
71393: PUSH
71394: LD_INT 14
71396: PUSH
71397: LD_INT 15
71399: PUSH
71400: LD_INT 16
71402: PUSH
71403: LD_INT 17
71405: PUSH
71406: LD_INT 18
71408: PUSH
71409: LD_INT 19
71411: PUSH
71412: LD_INT 20
71414: PUSH
71415: LD_INT 21
71417: PUSH
71418: LD_INT 22
71420: PUSH
71421: LD_INT 23
71423: PUSH
71424: LD_INT 24
71426: PUSH
71427: LD_INT 25
71429: PUSH
71430: LD_INT 26
71432: PUSH
71433: LD_INT 27
71435: PUSH
71436: LD_INT 28
71438: PUSH
71439: LD_INT 29
71441: PUSH
71442: LD_INT 30
71444: PUSH
71445: LD_INT 31
71447: PUSH
71448: LD_INT 32
71450: PUSH
71451: LD_INT 33
71453: PUSH
71454: LD_INT 34
71456: PUSH
71457: LD_INT 35
71459: PUSH
71460: LD_INT 36
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 101
71503: PUSH
71504: LD_INT 102
71506: PUSH
71507: LD_INT 103
71509: PUSH
71510: LD_INT 104
71512: PUSH
71513: LD_INT 105
71515: PUSH
71516: LD_INT 106
71518: PUSH
71519: LD_INT 107
71521: PUSH
71522: LD_INT 108
71524: PUSH
71525: LD_INT 109
71527: PUSH
71528: LD_INT 110
71530: PUSH
71531: LD_INT 111
71533: PUSH
71534: LD_INT 112
71536: PUSH
71537: LD_INT 113
71539: PUSH
71540: LD_INT 114
71542: PUSH
71543: LD_INT 115
71545: PUSH
71546: LD_INT 116
71548: PUSH
71549: LD_INT 117
71551: PUSH
71552: LD_INT 118
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: ST_TO_ADDR
// if result then
71579: LD_VAR 0 2
71583: IFFALSE 72369
// begin normal :=  ;
71585: LD_ADDR_VAR 0 5
71589: PUSH
71590: LD_STRING 
71592: ST_TO_ADDR
// hardcore :=  ;
71593: LD_ADDR_VAR 0 6
71597: PUSH
71598: LD_STRING 
71600: ST_TO_ADDR
// active :=  ;
71601: LD_ADDR_VAR 0 7
71605: PUSH
71606: LD_STRING 
71608: ST_TO_ADDR
// for i = 1 to normalCounter do
71609: LD_ADDR_VAR 0 8
71613: PUSH
71614: DOUBLE
71615: LD_INT 1
71617: DEC
71618: ST_TO_ADDR
71619: LD_EXP 60
71623: PUSH
71624: FOR_TO
71625: IFFALSE 71726
// begin tmp := 0 ;
71627: LD_ADDR_VAR 0 3
71631: PUSH
71632: LD_STRING 0
71634: ST_TO_ADDR
// if result [ 1 ] then
71635: LD_VAR 0 2
71639: PUSH
71640: LD_INT 1
71642: ARRAY
71643: IFFALSE 71708
// if result [ 1 ] [ 1 ] = i then
71645: LD_VAR 0 2
71649: PUSH
71650: LD_INT 1
71652: ARRAY
71653: PUSH
71654: LD_INT 1
71656: ARRAY
71657: PUSH
71658: LD_VAR 0 8
71662: EQUAL
71663: IFFALSE 71708
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
71665: LD_ADDR_VAR 0 2
71669: PUSH
71670: LD_VAR 0 2
71674: PPUSH
71675: LD_INT 1
71677: PPUSH
71678: LD_VAR 0 2
71682: PUSH
71683: LD_INT 1
71685: ARRAY
71686: PPUSH
71687: LD_INT 1
71689: PPUSH
71690: CALL_OW 3
71694: PPUSH
71695: CALL_OW 1
71699: ST_TO_ADDR
// tmp := 1 ;
71700: LD_ADDR_VAR 0 3
71704: PUSH
71705: LD_STRING 1
71707: ST_TO_ADDR
// end ; normal := normal & tmp ;
71708: LD_ADDR_VAR 0 5
71712: PUSH
71713: LD_VAR 0 5
71717: PUSH
71718: LD_VAR 0 3
71722: STR
71723: ST_TO_ADDR
// end ;
71724: GO 71624
71726: POP
71727: POP
// for i = 1 to hardcoreCounter do
71728: LD_ADDR_VAR 0 8
71732: PUSH
71733: DOUBLE
71734: LD_INT 1
71736: DEC
71737: ST_TO_ADDR
71738: LD_EXP 61
71742: PUSH
71743: FOR_TO
71744: IFFALSE 71849
// begin tmp := 0 ;
71746: LD_ADDR_VAR 0 3
71750: PUSH
71751: LD_STRING 0
71753: ST_TO_ADDR
// if result [ 2 ] then
71754: LD_VAR 0 2
71758: PUSH
71759: LD_INT 2
71761: ARRAY
71762: IFFALSE 71831
// if result [ 2 ] [ 1 ] = 100 + i then
71764: LD_VAR 0 2
71768: PUSH
71769: LD_INT 2
71771: ARRAY
71772: PUSH
71773: LD_INT 1
71775: ARRAY
71776: PUSH
71777: LD_INT 100
71779: PUSH
71780: LD_VAR 0 8
71784: PLUS
71785: EQUAL
71786: IFFALSE 71831
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
71788: LD_ADDR_VAR 0 2
71792: PUSH
71793: LD_VAR 0 2
71797: PPUSH
71798: LD_INT 2
71800: PPUSH
71801: LD_VAR 0 2
71805: PUSH
71806: LD_INT 2
71808: ARRAY
71809: PPUSH
71810: LD_INT 1
71812: PPUSH
71813: CALL_OW 3
71817: PPUSH
71818: CALL_OW 1
71822: ST_TO_ADDR
// tmp := 1 ;
71823: LD_ADDR_VAR 0 3
71827: PUSH
71828: LD_STRING 1
71830: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
71831: LD_ADDR_VAR 0 6
71835: PUSH
71836: LD_VAR 0 6
71840: PUSH
71841: LD_VAR 0 3
71845: STR
71846: ST_TO_ADDR
// end ;
71847: GO 71743
71849: POP
71850: POP
// if isGameLoad then
71851: LD_VAR 0 1
71855: IFFALSE 72330
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
71857: LD_ADDR_VAR 0 4
71861: PUSH
71862: LD_EXP 64
71866: PUSH
71867: LD_EXP 63
71871: PUSH
71872: LD_EXP 65
71876: PUSH
71877: LD_EXP 62
71881: PUSH
71882: LD_EXP 66
71886: PUSH
71887: LD_EXP 67
71891: PUSH
71892: LD_EXP 68
71896: PUSH
71897: LD_EXP 69
71901: PUSH
71902: LD_EXP 70
71906: PUSH
71907: LD_EXP 71
71911: PUSH
71912: LD_EXP 72
71916: PUSH
71917: LD_EXP 73
71921: PUSH
71922: LD_EXP 74
71926: PUSH
71927: LD_EXP 75
71931: PUSH
71932: LD_EXP 83
71936: PUSH
71937: LD_EXP 84
71941: PUSH
71942: LD_EXP 85
71946: PUSH
71947: LD_EXP 86
71951: PUSH
71952: LD_EXP 88
71956: PUSH
71957: LD_EXP 89
71961: PUSH
71962: LD_EXP 90
71966: PUSH
71967: LD_EXP 93
71971: PUSH
71972: LD_EXP 95
71976: PUSH
71977: LD_EXP 96
71981: PUSH
71982: LD_EXP 97
71986: PUSH
71987: LD_EXP 99
71991: PUSH
71992: LD_EXP 100
71996: PUSH
71997: LD_EXP 103
72001: PUSH
72002: LD_EXP 104
72006: PUSH
72007: LD_EXP 105
72011: PUSH
72012: LD_EXP 106
72016: PUSH
72017: LD_EXP 107
72021: PUSH
72022: LD_EXP 108
72026: PUSH
72027: LD_EXP 109
72031: PUSH
72032: LD_EXP 110
72036: PUSH
72037: LD_EXP 111
72041: PUSH
72042: LD_EXP 76
72046: PUSH
72047: LD_EXP 77
72051: PUSH
72052: LD_EXP 80
72056: PUSH
72057: LD_EXP 81
72061: PUSH
72062: LD_EXP 82
72066: PUSH
72067: LD_EXP 78
72071: PUSH
72072: LD_EXP 79
72076: PUSH
72077: LD_EXP 87
72081: PUSH
72082: LD_EXP 91
72086: PUSH
72087: LD_EXP 92
72091: PUSH
72092: LD_EXP 94
72096: PUSH
72097: LD_EXP 98
72101: PUSH
72102: LD_EXP 101
72106: PUSH
72107: LD_EXP 102
72111: PUSH
72112: LD_EXP 112
72116: PUSH
72117: LD_EXP 113
72121: PUSH
72122: LD_EXP 114
72126: PUSH
72127: LD_EXP 115
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: ST_TO_ADDR
// tmp :=  ;
72188: LD_ADDR_VAR 0 3
72192: PUSH
72193: LD_STRING 
72195: ST_TO_ADDR
// for i = 1 to normalCounter do
72196: LD_ADDR_VAR 0 8
72200: PUSH
72201: DOUBLE
72202: LD_INT 1
72204: DEC
72205: ST_TO_ADDR
72206: LD_EXP 60
72210: PUSH
72211: FOR_TO
72212: IFFALSE 72248
// begin if flags [ i ] then
72214: LD_VAR 0 4
72218: PUSH
72219: LD_VAR 0 8
72223: ARRAY
72224: IFFALSE 72246
// tmp := tmp & i & ; ;
72226: LD_ADDR_VAR 0 3
72230: PUSH
72231: LD_VAR 0 3
72235: PUSH
72236: LD_VAR 0 8
72240: STR
72241: PUSH
72242: LD_STRING ;
72244: STR
72245: ST_TO_ADDR
// end ;
72246: GO 72211
72248: POP
72249: POP
// for i = 1 to hardcoreCounter do
72250: LD_ADDR_VAR 0 8
72254: PUSH
72255: DOUBLE
72256: LD_INT 1
72258: DEC
72259: ST_TO_ADDR
72260: LD_EXP 61
72264: PUSH
72265: FOR_TO
72266: IFFALSE 72312
// begin if flags [ normalCounter + i ] then
72268: LD_VAR 0 4
72272: PUSH
72273: LD_EXP 60
72277: PUSH
72278: LD_VAR 0 8
72282: PLUS
72283: ARRAY
72284: IFFALSE 72310
// tmp := tmp & ( 100 + i ) & ; ;
72286: LD_ADDR_VAR 0 3
72290: PUSH
72291: LD_VAR 0 3
72295: PUSH
72296: LD_INT 100
72298: PUSH
72299: LD_VAR 0 8
72303: PLUS
72304: STR
72305: PUSH
72306: LD_STRING ;
72308: STR
72309: ST_TO_ADDR
// end ;
72310: GO 72265
72312: POP
72313: POP
// if tmp then
72314: LD_VAR 0 3
72318: IFFALSE 72330
// active := tmp ;
72320: LD_ADDR_VAR 0 7
72324: PUSH
72325: LD_VAR 0 3
72329: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
72330: LD_STRING getStreamItemsFromMission("
72332: PUSH
72333: LD_VAR 0 5
72337: STR
72338: PUSH
72339: LD_STRING ","
72341: STR
72342: PUSH
72343: LD_VAR 0 6
72347: STR
72348: PUSH
72349: LD_STRING ","
72351: STR
72352: PUSH
72353: LD_VAR 0 7
72357: STR
72358: PUSH
72359: LD_STRING ")
72361: STR
72362: PPUSH
72363: CALL_OW 559
// end else
72367: GO 72376
// ToLua ( getStreamItemsFromMission("","","") ) ;
72369: LD_STRING getStreamItemsFromMission("","","")
72371: PPUSH
72372: CALL_OW 559
// end ;
72376: LD_VAR 0 2
72380: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
72381: LD_EXP 59
72385: PUSH
72386: LD_EXP 64
72390: AND
72391: IFFALSE 72515
72393: GO 72395
72395: DISABLE
72396: LD_INT 0
72398: PPUSH
72399: PPUSH
// begin enable ;
72400: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
72401: LD_ADDR_VAR 0 2
72405: PUSH
72406: LD_INT 22
72408: PUSH
72409: LD_OWVAR 2
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 2
72420: PUSH
72421: LD_INT 34
72423: PUSH
72424: LD_INT 7
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 34
72433: PUSH
72434: LD_INT 45
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 34
72443: PUSH
72444: LD_INT 28
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 34
72453: PUSH
72454: LD_INT 47
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PPUSH
72472: CALL_OW 69
72476: ST_TO_ADDR
// if not tmp then
72477: LD_VAR 0 2
72481: NOT
72482: IFFALSE 72486
// exit ;
72484: GO 72515
// for i in tmp do
72486: LD_ADDR_VAR 0 1
72490: PUSH
72491: LD_VAR 0 2
72495: PUSH
72496: FOR_IN
72497: IFFALSE 72513
// begin SetLives ( i , 0 ) ;
72499: LD_VAR 0 1
72503: PPUSH
72504: LD_INT 0
72506: PPUSH
72507: CALL_OW 234
// end ;
72511: GO 72496
72513: POP
72514: POP
// end ;
72515: PPOPN 2
72517: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
72518: LD_EXP 59
72522: PUSH
72523: LD_EXP 65
72527: AND
72528: IFFALSE 72612
72530: GO 72532
72532: DISABLE
72533: LD_INT 0
72535: PPUSH
72536: PPUSH
// begin enable ;
72537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
72538: LD_ADDR_VAR 0 2
72542: PUSH
72543: LD_INT 22
72545: PUSH
72546: LD_OWVAR 2
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PUSH
72555: LD_INT 32
72557: PUSH
72558: LD_INT 3
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PPUSH
72569: CALL_OW 69
72573: ST_TO_ADDR
// if not tmp then
72574: LD_VAR 0 2
72578: NOT
72579: IFFALSE 72583
// exit ;
72581: GO 72612
// for i in tmp do
72583: LD_ADDR_VAR 0 1
72587: PUSH
72588: LD_VAR 0 2
72592: PUSH
72593: FOR_IN
72594: IFFALSE 72610
// begin SetLives ( i , 0 ) ;
72596: LD_VAR 0 1
72600: PPUSH
72601: LD_INT 0
72603: PPUSH
72604: CALL_OW 234
// end ;
72608: GO 72593
72610: POP
72611: POP
// end ;
72612: PPOPN 2
72614: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
72615: LD_EXP 59
72619: PUSH
72620: LD_EXP 62
72624: AND
72625: IFFALSE 72718
72627: GO 72629
72629: DISABLE
72630: LD_INT 0
72632: PPUSH
// begin enable ;
72633: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
72634: LD_ADDR_VAR 0 1
72638: PUSH
72639: LD_INT 22
72641: PUSH
72642: LD_OWVAR 2
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 2
72653: PUSH
72654: LD_INT 25
72656: PUSH
72657: LD_INT 5
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: PUSH
72664: LD_INT 25
72666: PUSH
72667: LD_INT 9
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: PUSH
72674: LD_INT 25
72676: PUSH
72677: LD_INT 8
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: PUSH
72690: EMPTY
72691: LIST
72692: LIST
72693: PPUSH
72694: CALL_OW 69
72698: PUSH
72699: FOR_IN
72700: IFFALSE 72716
// begin SetClass ( i , 1 ) ;
72702: LD_VAR 0 1
72706: PPUSH
72707: LD_INT 1
72709: PPUSH
72710: CALL_OW 336
// end ;
72714: GO 72699
72716: POP
72717: POP
// end ;
72718: PPOPN 1
72720: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
72721: LD_EXP 59
72725: PUSH
72726: LD_EXP 63
72730: AND
72731: PUSH
72732: LD_OWVAR 65
72736: PUSH
72737: LD_INT 7
72739: LESS
72740: AND
72741: IFFALSE 72755
72743: GO 72745
72745: DISABLE
// begin enable ;
72746: ENABLE
// game_speed := 7 ;
72747: LD_ADDR_OWVAR 65
72751: PUSH
72752: LD_INT 7
72754: ST_TO_ADDR
// end ;
72755: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
72756: LD_EXP 59
72760: PUSH
72761: LD_EXP 66
72765: AND
72766: IFFALSE 72968
72768: GO 72770
72770: DISABLE
72771: LD_INT 0
72773: PPUSH
72774: PPUSH
72775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72776: LD_ADDR_VAR 0 3
72780: PUSH
72781: LD_INT 81
72783: PUSH
72784: LD_OWVAR 2
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 21
72795: PUSH
72796: LD_INT 1
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PPUSH
72807: CALL_OW 69
72811: ST_TO_ADDR
// if not tmp then
72812: LD_VAR 0 3
72816: NOT
72817: IFFALSE 72821
// exit ;
72819: GO 72968
// if tmp > 5 then
72821: LD_VAR 0 3
72825: PUSH
72826: LD_INT 5
72828: GREATER
72829: IFFALSE 72841
// k := 5 else
72831: LD_ADDR_VAR 0 2
72835: PUSH
72836: LD_INT 5
72838: ST_TO_ADDR
72839: GO 72851
// k := tmp ;
72841: LD_ADDR_VAR 0 2
72845: PUSH
72846: LD_VAR 0 3
72850: ST_TO_ADDR
// for i := 1 to k do
72851: LD_ADDR_VAR 0 1
72855: PUSH
72856: DOUBLE
72857: LD_INT 1
72859: DEC
72860: ST_TO_ADDR
72861: LD_VAR 0 2
72865: PUSH
72866: FOR_TO
72867: IFFALSE 72966
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
72869: LD_VAR 0 3
72873: PUSH
72874: LD_VAR 0 1
72878: ARRAY
72879: PPUSH
72880: LD_VAR 0 1
72884: PUSH
72885: LD_INT 4
72887: MOD
72888: PUSH
72889: LD_INT 1
72891: PLUS
72892: PPUSH
72893: CALL_OW 259
72897: PUSH
72898: LD_INT 10
72900: LESS
72901: IFFALSE 72964
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
72903: LD_VAR 0 3
72907: PUSH
72908: LD_VAR 0 1
72912: ARRAY
72913: PPUSH
72914: LD_VAR 0 1
72918: PUSH
72919: LD_INT 4
72921: MOD
72922: PUSH
72923: LD_INT 1
72925: PLUS
72926: PPUSH
72927: LD_VAR 0 3
72931: PUSH
72932: LD_VAR 0 1
72936: ARRAY
72937: PPUSH
72938: LD_VAR 0 1
72942: PUSH
72943: LD_INT 4
72945: MOD
72946: PUSH
72947: LD_INT 1
72949: PLUS
72950: PPUSH
72951: CALL_OW 259
72955: PUSH
72956: LD_INT 1
72958: PLUS
72959: PPUSH
72960: CALL_OW 237
72964: GO 72866
72966: POP
72967: POP
// end ;
72968: PPOPN 3
72970: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
72971: LD_EXP 59
72975: PUSH
72976: LD_EXP 67
72980: AND
72981: IFFALSE 73001
72983: GO 72985
72985: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
72986: LD_INT 4
72988: PPUSH
72989: LD_OWVAR 2
72993: PPUSH
72994: LD_INT 0
72996: PPUSH
72997: CALL_OW 324
73001: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73002: LD_EXP 59
73006: PUSH
73007: LD_EXP 96
73011: AND
73012: IFFALSE 73032
73014: GO 73016
73016: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73017: LD_INT 19
73019: PPUSH
73020: LD_OWVAR 2
73024: PPUSH
73025: LD_INT 0
73027: PPUSH
73028: CALL_OW 324
73032: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73033: LD_EXP 59
73037: PUSH
73038: LD_EXP 68
73042: AND
73043: IFFALSE 73145
73045: GO 73047
73047: DISABLE
73048: LD_INT 0
73050: PPUSH
73051: PPUSH
// begin enable ;
73052: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73053: LD_ADDR_VAR 0 2
73057: PUSH
73058: LD_INT 22
73060: PUSH
73061: LD_OWVAR 2
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 2
73072: PUSH
73073: LD_INT 34
73075: PUSH
73076: LD_INT 11
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 34
73085: PUSH
73086: LD_INT 30
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: LIST
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PPUSH
73102: CALL_OW 69
73106: ST_TO_ADDR
// if not tmp then
73107: LD_VAR 0 2
73111: NOT
73112: IFFALSE 73116
// exit ;
73114: GO 73145
// for i in tmp do
73116: LD_ADDR_VAR 0 1
73120: PUSH
73121: LD_VAR 0 2
73125: PUSH
73126: FOR_IN
73127: IFFALSE 73143
// begin SetLives ( i , 0 ) ;
73129: LD_VAR 0 1
73133: PPUSH
73134: LD_INT 0
73136: PPUSH
73137: CALL_OW 234
// end ;
73141: GO 73126
73143: POP
73144: POP
// end ;
73145: PPOPN 2
73147: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73148: LD_EXP 59
73152: PUSH
73153: LD_EXP 69
73157: AND
73158: IFFALSE 73178
73160: GO 73162
73162: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73163: LD_INT 32
73165: PPUSH
73166: LD_OWVAR 2
73170: PPUSH
73171: LD_INT 0
73173: PPUSH
73174: CALL_OW 324
73178: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73179: LD_EXP 59
73183: PUSH
73184: LD_EXP 70
73188: AND
73189: IFFALSE 73370
73191: GO 73193
73193: DISABLE
73194: LD_INT 0
73196: PPUSH
73197: PPUSH
73198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73199: LD_ADDR_VAR 0 2
73203: PUSH
73204: LD_INT 22
73206: PUSH
73207: LD_OWVAR 2
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: LD_INT 33
73218: PUSH
73219: LD_INT 3
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: PPUSH
73230: CALL_OW 69
73234: ST_TO_ADDR
// if not tmp then
73235: LD_VAR 0 2
73239: NOT
73240: IFFALSE 73244
// exit ;
73242: GO 73370
// side := 0 ;
73244: LD_ADDR_VAR 0 3
73248: PUSH
73249: LD_INT 0
73251: ST_TO_ADDR
// for i := 1 to 8 do
73252: LD_ADDR_VAR 0 1
73256: PUSH
73257: DOUBLE
73258: LD_INT 1
73260: DEC
73261: ST_TO_ADDR
73262: LD_INT 8
73264: PUSH
73265: FOR_TO
73266: IFFALSE 73314
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73268: LD_OWVAR 2
73272: PUSH
73273: LD_VAR 0 1
73277: NONEQUAL
73278: PUSH
73279: LD_OWVAR 2
73283: PPUSH
73284: LD_VAR 0 1
73288: PPUSH
73289: CALL_OW 81
73293: PUSH
73294: LD_INT 2
73296: EQUAL
73297: AND
73298: IFFALSE 73312
// begin side := i ;
73300: LD_ADDR_VAR 0 3
73304: PUSH
73305: LD_VAR 0 1
73309: ST_TO_ADDR
// break ;
73310: GO 73314
// end ;
73312: GO 73265
73314: POP
73315: POP
// if not side then
73316: LD_VAR 0 3
73320: NOT
73321: IFFALSE 73325
// exit ;
73323: GO 73370
// for i := 1 to tmp do
73325: LD_ADDR_VAR 0 1
73329: PUSH
73330: DOUBLE
73331: LD_INT 1
73333: DEC
73334: ST_TO_ADDR
73335: LD_VAR 0 2
73339: PUSH
73340: FOR_TO
73341: IFFALSE 73368
// if Prob ( 60 ) then
73343: LD_INT 60
73345: PPUSH
73346: CALL_OW 13
73350: IFFALSE 73366
// SetSide ( i , side ) ;
73352: LD_VAR 0 1
73356: PPUSH
73357: LD_VAR 0 3
73361: PPUSH
73362: CALL_OW 235
73366: GO 73340
73368: POP
73369: POP
// end ;
73370: PPOPN 3
73372: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
73373: LD_EXP 59
73377: PUSH
73378: LD_EXP 72
73382: AND
73383: IFFALSE 73502
73385: GO 73387
73387: DISABLE
73388: LD_INT 0
73390: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
73391: LD_ADDR_VAR 0 1
73395: PUSH
73396: LD_INT 22
73398: PUSH
73399: LD_OWVAR 2
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: PUSH
73408: LD_INT 21
73410: PUSH
73411: LD_INT 1
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PUSH
73418: LD_INT 3
73420: PUSH
73421: LD_INT 23
73423: PUSH
73424: LD_INT 0
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: LIST
73439: PPUSH
73440: CALL_OW 69
73444: PUSH
73445: FOR_IN
73446: IFFALSE 73500
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
73448: LD_VAR 0 1
73452: PPUSH
73453: CALL_OW 257
73457: PUSH
73458: LD_INT 1
73460: PUSH
73461: LD_INT 2
73463: PUSH
73464: LD_INT 3
73466: PUSH
73467: LD_INT 4
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: IN
73476: IFFALSE 73498
// SetClass ( un , rand ( 1 , 4 ) ) ;
73478: LD_VAR 0 1
73482: PPUSH
73483: LD_INT 1
73485: PPUSH
73486: LD_INT 4
73488: PPUSH
73489: CALL_OW 12
73493: PPUSH
73494: CALL_OW 336
73498: GO 73445
73500: POP
73501: POP
// end ;
73502: PPOPN 1
73504: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
73505: LD_EXP 59
73509: PUSH
73510: LD_EXP 71
73514: AND
73515: IFFALSE 73594
73517: GO 73519
73519: DISABLE
73520: LD_INT 0
73522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73523: LD_ADDR_VAR 0 1
73527: PUSH
73528: LD_INT 22
73530: PUSH
73531: LD_OWVAR 2
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: LD_INT 21
73542: PUSH
73543: LD_INT 3
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PPUSH
73554: CALL_OW 69
73558: ST_TO_ADDR
// if not tmp then
73559: LD_VAR 0 1
73563: NOT
73564: IFFALSE 73568
// exit ;
73566: GO 73594
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
73568: LD_VAR 0 1
73572: PUSH
73573: LD_INT 1
73575: PPUSH
73576: LD_VAR 0 1
73580: PPUSH
73581: CALL_OW 12
73585: ARRAY
73586: PPUSH
73587: LD_INT 100
73589: PPUSH
73590: CALL_OW 234
// end ;
73594: PPOPN 1
73596: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
73597: LD_EXP 59
73601: PUSH
73602: LD_EXP 73
73606: AND
73607: IFFALSE 73705
73609: GO 73611
73611: DISABLE
73612: LD_INT 0
73614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73615: LD_ADDR_VAR 0 1
73619: PUSH
73620: LD_INT 22
73622: PUSH
73623: LD_OWVAR 2
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 21
73634: PUSH
73635: LD_INT 1
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PPUSH
73646: CALL_OW 69
73650: ST_TO_ADDR
// if not tmp then
73651: LD_VAR 0 1
73655: NOT
73656: IFFALSE 73660
// exit ;
73658: GO 73705
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
73660: LD_VAR 0 1
73664: PUSH
73665: LD_INT 1
73667: PPUSH
73668: LD_VAR 0 1
73672: PPUSH
73673: CALL_OW 12
73677: ARRAY
73678: PPUSH
73679: LD_INT 1
73681: PPUSH
73682: LD_INT 4
73684: PPUSH
73685: CALL_OW 12
73689: PPUSH
73690: LD_INT 3000
73692: PPUSH
73693: LD_INT 9000
73695: PPUSH
73696: CALL_OW 12
73700: PPUSH
73701: CALL_OW 492
// end ;
73705: PPOPN 1
73707: END
// every 0 0$1 trigger StreamModeActive and sDepot do
73708: LD_EXP 59
73712: PUSH
73713: LD_EXP 74
73717: AND
73718: IFFALSE 73738
73720: GO 73722
73722: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
73723: LD_INT 1
73725: PPUSH
73726: LD_OWVAR 2
73730: PPUSH
73731: LD_INT 0
73733: PPUSH
73734: CALL_OW 324
73738: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
73739: LD_EXP 59
73743: PUSH
73744: LD_EXP 75
73748: AND
73749: IFFALSE 73832
73751: GO 73753
73753: DISABLE
73754: LD_INT 0
73756: PPUSH
73757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73758: LD_ADDR_VAR 0 2
73762: PUSH
73763: LD_INT 22
73765: PUSH
73766: LD_OWVAR 2
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: LD_INT 21
73777: PUSH
73778: LD_INT 3
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: PPUSH
73789: CALL_OW 69
73793: ST_TO_ADDR
// if not tmp then
73794: LD_VAR 0 2
73798: NOT
73799: IFFALSE 73803
// exit ;
73801: GO 73832
// for i in tmp do
73803: LD_ADDR_VAR 0 1
73807: PUSH
73808: LD_VAR 0 2
73812: PUSH
73813: FOR_IN
73814: IFFALSE 73830
// SetBLevel ( i , 10 ) ;
73816: LD_VAR 0 1
73820: PPUSH
73821: LD_INT 10
73823: PPUSH
73824: CALL_OW 241
73828: GO 73813
73830: POP
73831: POP
// end ;
73832: PPOPN 2
73834: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
73835: LD_EXP 59
73839: PUSH
73840: LD_EXP 76
73844: AND
73845: IFFALSE 73956
73847: GO 73849
73849: DISABLE
73850: LD_INT 0
73852: PPUSH
73853: PPUSH
73854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73855: LD_ADDR_VAR 0 3
73859: PUSH
73860: LD_INT 22
73862: PUSH
73863: LD_OWVAR 2
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 25
73874: PUSH
73875: LD_INT 1
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PPUSH
73886: CALL_OW 69
73890: ST_TO_ADDR
// if not tmp then
73891: LD_VAR 0 3
73895: NOT
73896: IFFALSE 73900
// exit ;
73898: GO 73956
// un := tmp [ rand ( 1 , tmp ) ] ;
73900: LD_ADDR_VAR 0 2
73904: PUSH
73905: LD_VAR 0 3
73909: PUSH
73910: LD_INT 1
73912: PPUSH
73913: LD_VAR 0 3
73917: PPUSH
73918: CALL_OW 12
73922: ARRAY
73923: ST_TO_ADDR
// if Crawls ( un ) then
73924: LD_VAR 0 2
73928: PPUSH
73929: CALL_OW 318
73933: IFFALSE 73944
// ComWalk ( un ) ;
73935: LD_VAR 0 2
73939: PPUSH
73940: CALL_OW 138
// SetClass ( un , class_sniper ) ;
73944: LD_VAR 0 2
73948: PPUSH
73949: LD_INT 5
73951: PPUSH
73952: CALL_OW 336
// end ;
73956: PPOPN 3
73958: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
73959: LD_EXP 59
73963: PUSH
73964: LD_EXP 77
73968: AND
73969: PUSH
73970: LD_OWVAR 67
73974: PUSH
73975: LD_INT 4
73977: LESS
73978: AND
73979: IFFALSE 73998
73981: GO 73983
73983: DISABLE
// begin Difficulty := Difficulty + 1 ;
73984: LD_ADDR_OWVAR 67
73988: PUSH
73989: LD_OWVAR 67
73993: PUSH
73994: LD_INT 1
73996: PLUS
73997: ST_TO_ADDR
// end ;
73998: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
73999: LD_EXP 59
74003: PUSH
74004: LD_EXP 78
74008: AND
74009: IFFALSE 74112
74011: GO 74013
74013: DISABLE
74014: LD_INT 0
74016: PPUSH
// begin for i := 1 to 5 do
74017: LD_ADDR_VAR 0 1
74021: PUSH
74022: DOUBLE
74023: LD_INT 1
74025: DEC
74026: ST_TO_ADDR
74027: LD_INT 5
74029: PUSH
74030: FOR_TO
74031: IFFALSE 74110
// begin uc_nation := nation_nature ;
74033: LD_ADDR_OWVAR 21
74037: PUSH
74038: LD_INT 0
74040: ST_TO_ADDR
// uc_side := 0 ;
74041: LD_ADDR_OWVAR 20
74045: PUSH
74046: LD_INT 0
74048: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74049: LD_ADDR_OWVAR 29
74053: PUSH
74054: LD_INT 12
74056: PUSH
74057: LD_INT 12
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: ST_TO_ADDR
// hc_agressivity := 20 ;
74064: LD_ADDR_OWVAR 35
74068: PUSH
74069: LD_INT 20
74071: ST_TO_ADDR
// hc_class := class_tiger ;
74072: LD_ADDR_OWVAR 28
74076: PUSH
74077: LD_INT 14
74079: ST_TO_ADDR
// hc_gallery :=  ;
74080: LD_ADDR_OWVAR 33
74084: PUSH
74085: LD_STRING 
74087: ST_TO_ADDR
// hc_name :=  ;
74088: LD_ADDR_OWVAR 26
74092: PUSH
74093: LD_STRING 
74095: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74096: CALL_OW 44
74100: PPUSH
74101: LD_INT 0
74103: PPUSH
74104: CALL_OW 51
// end ;
74108: GO 74030
74110: POP
74111: POP
// end ;
74112: PPOPN 1
74114: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74115: LD_EXP 59
74119: PUSH
74120: LD_EXP 79
74124: AND
74125: IFFALSE 74134
74127: GO 74129
74129: DISABLE
// StreamSibBomb ;
74130: CALL 74135 0 0
74134: END
// export function StreamSibBomb ; var i , x , y ; begin
74135: LD_INT 0
74137: PPUSH
74138: PPUSH
74139: PPUSH
74140: PPUSH
// result := false ;
74141: LD_ADDR_VAR 0 1
74145: PUSH
74146: LD_INT 0
74148: ST_TO_ADDR
// for i := 1 to 16 do
74149: LD_ADDR_VAR 0 2
74153: PUSH
74154: DOUBLE
74155: LD_INT 1
74157: DEC
74158: ST_TO_ADDR
74159: LD_INT 16
74161: PUSH
74162: FOR_TO
74163: IFFALSE 74362
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74165: LD_ADDR_VAR 0 3
74169: PUSH
74170: LD_INT 10
74172: PUSH
74173: LD_INT 20
74175: PUSH
74176: LD_INT 30
74178: PUSH
74179: LD_INT 40
74181: PUSH
74182: LD_INT 50
74184: PUSH
74185: LD_INT 60
74187: PUSH
74188: LD_INT 70
74190: PUSH
74191: LD_INT 80
74193: PUSH
74194: LD_INT 90
74196: PUSH
74197: LD_INT 100
74199: PUSH
74200: LD_INT 110
74202: PUSH
74203: LD_INT 120
74205: PUSH
74206: LD_INT 130
74208: PUSH
74209: LD_INT 140
74211: PUSH
74212: LD_INT 150
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 1
74234: PPUSH
74235: LD_INT 15
74237: PPUSH
74238: CALL_OW 12
74242: ARRAY
74243: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74244: LD_ADDR_VAR 0 4
74248: PUSH
74249: LD_INT 10
74251: PUSH
74252: LD_INT 20
74254: PUSH
74255: LD_INT 30
74257: PUSH
74258: LD_INT 40
74260: PUSH
74261: LD_INT 50
74263: PUSH
74264: LD_INT 60
74266: PUSH
74267: LD_INT 70
74269: PUSH
74270: LD_INT 80
74272: PUSH
74273: LD_INT 90
74275: PUSH
74276: LD_INT 100
74278: PUSH
74279: LD_INT 110
74281: PUSH
74282: LD_INT 120
74284: PUSH
74285: LD_INT 130
74287: PUSH
74288: LD_INT 140
74290: PUSH
74291: LD_INT 150
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: PUSH
74311: LD_INT 1
74313: PPUSH
74314: LD_INT 15
74316: PPUSH
74317: CALL_OW 12
74321: ARRAY
74322: ST_TO_ADDR
// if ValidHex ( x , y ) then
74323: LD_VAR 0 3
74327: PPUSH
74328: LD_VAR 0 4
74332: PPUSH
74333: CALL_OW 488
74337: IFFALSE 74360
// begin result := [ x , y ] ;
74339: LD_ADDR_VAR 0 1
74343: PUSH
74344: LD_VAR 0 3
74348: PUSH
74349: LD_VAR 0 4
74353: PUSH
74354: EMPTY
74355: LIST
74356: LIST
74357: ST_TO_ADDR
// break ;
74358: GO 74362
// end ; end ;
74360: GO 74162
74362: POP
74363: POP
// if result then
74364: LD_VAR 0 1
74368: IFFALSE 74428
// begin ToLua ( playSibBomb() ) ;
74370: LD_STRING playSibBomb()
74372: PPUSH
74373: CALL_OW 559
// wait ( 0 0$14 ) ;
74377: LD_INT 490
74379: PPUSH
74380: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
74384: LD_VAR 0 1
74388: PUSH
74389: LD_INT 1
74391: ARRAY
74392: PPUSH
74393: LD_VAR 0 1
74397: PUSH
74398: LD_INT 2
74400: ARRAY
74401: PPUSH
74402: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
74406: LD_VAR 0 1
74410: PUSH
74411: LD_INT 1
74413: ARRAY
74414: PPUSH
74415: LD_VAR 0 1
74419: PUSH
74420: LD_INT 2
74422: ARRAY
74423: PPUSH
74424: CALL_OW 429
// end ; end ;
74428: LD_VAR 0 1
74432: RET
// every 0 0$1 trigger StreamModeActive and sReset do
74433: LD_EXP 59
74437: PUSH
74438: LD_EXP 81
74442: AND
74443: IFFALSE 74455
74445: GO 74447
74447: DISABLE
// YouLost (  ) ;
74448: LD_STRING 
74450: PPUSH
74451: CALL_OW 104
74455: END
// every 0 0$1 trigger StreamModeActive and sFog do
74456: LD_EXP 59
74460: PUSH
74461: LD_EXP 80
74465: AND
74466: IFFALSE 74480
74468: GO 74470
74470: DISABLE
// FogOff ( your_side ) ;
74471: LD_OWVAR 2
74475: PPUSH
74476: CALL_OW 344
74480: END
// every 0 0$1 trigger StreamModeActive and sSun do
74481: LD_EXP 59
74485: PUSH
74486: LD_EXP 82
74490: AND
74491: IFFALSE 74519
74493: GO 74495
74495: DISABLE
// begin solar_recharge_percent := 0 ;
74496: LD_ADDR_OWVAR 79
74500: PUSH
74501: LD_INT 0
74503: ST_TO_ADDR
// wait ( 5 5$00 ) ;
74504: LD_INT 10500
74506: PPUSH
74507: CALL_OW 67
// solar_recharge_percent := 100 ;
74511: LD_ADDR_OWVAR 79
74515: PUSH
74516: LD_INT 100
74518: ST_TO_ADDR
// end ;
74519: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
74520: LD_EXP 59
74524: PUSH
74525: LD_EXP 83
74529: AND
74530: IFFALSE 74769
74532: GO 74534
74534: DISABLE
74535: LD_INT 0
74537: PPUSH
74538: PPUSH
74539: PPUSH
// begin tmp := [ ] ;
74540: LD_ADDR_VAR 0 3
74544: PUSH
74545: EMPTY
74546: ST_TO_ADDR
// for i := 1 to 6 do
74547: LD_ADDR_VAR 0 1
74551: PUSH
74552: DOUBLE
74553: LD_INT 1
74555: DEC
74556: ST_TO_ADDR
74557: LD_INT 6
74559: PUSH
74560: FOR_TO
74561: IFFALSE 74666
// begin uc_nation := nation_nature ;
74563: LD_ADDR_OWVAR 21
74567: PUSH
74568: LD_INT 0
74570: ST_TO_ADDR
// uc_side := 0 ;
74571: LD_ADDR_OWVAR 20
74575: PUSH
74576: LD_INT 0
74578: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74579: LD_ADDR_OWVAR 29
74583: PUSH
74584: LD_INT 12
74586: PUSH
74587: LD_INT 12
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: ST_TO_ADDR
// hc_agressivity := 20 ;
74594: LD_ADDR_OWVAR 35
74598: PUSH
74599: LD_INT 20
74601: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
74602: LD_ADDR_OWVAR 28
74606: PUSH
74607: LD_INT 17
74609: ST_TO_ADDR
// hc_gallery :=  ;
74610: LD_ADDR_OWVAR 33
74614: PUSH
74615: LD_STRING 
74617: ST_TO_ADDR
// hc_name :=  ;
74618: LD_ADDR_OWVAR 26
74622: PUSH
74623: LD_STRING 
74625: ST_TO_ADDR
// un := CreateHuman ;
74626: LD_ADDR_VAR 0 2
74630: PUSH
74631: CALL_OW 44
74635: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
74636: LD_VAR 0 2
74640: PPUSH
74641: LD_INT 1
74643: PPUSH
74644: CALL_OW 51
// tmp := tmp ^ un ;
74648: LD_ADDR_VAR 0 3
74652: PUSH
74653: LD_VAR 0 3
74657: PUSH
74658: LD_VAR 0 2
74662: ADD
74663: ST_TO_ADDR
// end ;
74664: GO 74560
74666: POP
74667: POP
// repeat wait ( 0 0$1 ) ;
74668: LD_INT 35
74670: PPUSH
74671: CALL_OW 67
// for un in tmp do
74675: LD_ADDR_VAR 0 2
74679: PUSH
74680: LD_VAR 0 3
74684: PUSH
74685: FOR_IN
74686: IFFALSE 74760
// begin if IsDead ( un ) then
74688: LD_VAR 0 2
74692: PPUSH
74693: CALL_OW 301
74697: IFFALSE 74717
// begin tmp := tmp diff un ;
74699: LD_ADDR_VAR 0 3
74703: PUSH
74704: LD_VAR 0 3
74708: PUSH
74709: LD_VAR 0 2
74713: DIFF
74714: ST_TO_ADDR
// continue ;
74715: GO 74685
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
74717: LD_VAR 0 2
74721: PPUSH
74722: LD_INT 3
74724: PUSH
74725: LD_INT 22
74727: PUSH
74728: LD_INT 0
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: PPUSH
74739: CALL_OW 69
74743: PPUSH
74744: LD_VAR 0 2
74748: PPUSH
74749: CALL_OW 74
74753: PPUSH
74754: CALL_OW 115
// end ;
74758: GO 74685
74760: POP
74761: POP
// until not tmp ;
74762: LD_VAR 0 3
74766: NOT
74767: IFFALSE 74668
// end ;
74769: PPOPN 3
74771: END
// every 0 0$1 trigger StreamModeActive and sTroll do
74772: LD_EXP 59
74776: PUSH
74777: LD_EXP 84
74781: AND
74782: IFFALSE 74836
74784: GO 74786
74786: DISABLE
// begin ToLua ( displayTroll(); ) ;
74787: LD_STRING displayTroll();
74789: PPUSH
74790: CALL_OW 559
// wait ( 3 3$00 ) ;
74794: LD_INT 6300
74796: PPUSH
74797: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74801: LD_STRING hideTroll();
74803: PPUSH
74804: CALL_OW 559
// wait ( 1 1$00 ) ;
74808: LD_INT 2100
74810: PPUSH
74811: CALL_OW 67
// ToLua ( displayTroll(); ) ;
74815: LD_STRING displayTroll();
74817: PPUSH
74818: CALL_OW 559
// wait ( 1 1$00 ) ;
74822: LD_INT 2100
74824: PPUSH
74825: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74829: LD_STRING hideTroll();
74831: PPUSH
74832: CALL_OW 559
// end ;
74836: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
74837: LD_EXP 59
74841: PUSH
74842: LD_EXP 85
74846: AND
74847: IFFALSE 74910
74849: GO 74851
74851: DISABLE
74852: LD_INT 0
74854: PPUSH
// begin p := 0 ;
74855: LD_ADDR_VAR 0 1
74859: PUSH
74860: LD_INT 0
74862: ST_TO_ADDR
// repeat game_speed := 1 ;
74863: LD_ADDR_OWVAR 65
74867: PUSH
74868: LD_INT 1
74870: ST_TO_ADDR
// wait ( 0 0$1 ) ;
74871: LD_INT 35
74873: PPUSH
74874: CALL_OW 67
// p := p + 1 ;
74878: LD_ADDR_VAR 0 1
74882: PUSH
74883: LD_VAR 0 1
74887: PUSH
74888: LD_INT 1
74890: PLUS
74891: ST_TO_ADDR
// until p >= 60 ;
74892: LD_VAR 0 1
74896: PUSH
74897: LD_INT 60
74899: GREATEREQUAL
74900: IFFALSE 74863
// game_speed := 4 ;
74902: LD_ADDR_OWVAR 65
74906: PUSH
74907: LD_INT 4
74909: ST_TO_ADDR
// end ;
74910: PPOPN 1
74912: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
74913: LD_EXP 59
74917: PUSH
74918: LD_EXP 86
74922: AND
74923: IFFALSE 75069
74925: GO 74927
74927: DISABLE
74928: LD_INT 0
74930: PPUSH
74931: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74932: LD_ADDR_VAR 0 1
74936: PUSH
74937: LD_INT 22
74939: PUSH
74940: LD_OWVAR 2
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: PUSH
74949: LD_INT 2
74951: PUSH
74952: LD_INT 30
74954: PUSH
74955: LD_INT 0
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PUSH
74962: LD_INT 30
74964: PUSH
74965: LD_INT 1
74967: PUSH
74968: EMPTY
74969: LIST
74970: LIST
74971: PUSH
74972: EMPTY
74973: LIST
74974: LIST
74975: LIST
74976: PUSH
74977: EMPTY
74978: LIST
74979: LIST
74980: PPUSH
74981: CALL_OW 69
74985: ST_TO_ADDR
// if not depot then
74986: LD_VAR 0 1
74990: NOT
74991: IFFALSE 74995
// exit ;
74993: GO 75069
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
74995: LD_ADDR_VAR 0 2
74999: PUSH
75000: LD_VAR 0 1
75004: PUSH
75005: LD_INT 1
75007: PPUSH
75008: LD_VAR 0 1
75012: PPUSH
75013: CALL_OW 12
75017: ARRAY
75018: PPUSH
75019: CALL_OW 274
75023: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75024: LD_VAR 0 2
75028: PPUSH
75029: LD_INT 1
75031: PPUSH
75032: LD_INT 0
75034: PPUSH
75035: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75039: LD_VAR 0 2
75043: PPUSH
75044: LD_INT 2
75046: PPUSH
75047: LD_INT 0
75049: PPUSH
75050: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75054: LD_VAR 0 2
75058: PPUSH
75059: LD_INT 3
75061: PPUSH
75062: LD_INT 0
75064: PPUSH
75065: CALL_OW 277
// end ;
75069: PPOPN 2
75071: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75072: LD_EXP 59
75076: PUSH
75077: LD_EXP 87
75081: AND
75082: IFFALSE 75179
75084: GO 75086
75086: DISABLE
75087: LD_INT 0
75089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75090: LD_ADDR_VAR 0 1
75094: PUSH
75095: LD_INT 22
75097: PUSH
75098: LD_OWVAR 2
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: LD_INT 21
75109: PUSH
75110: LD_INT 1
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: LD_INT 3
75119: PUSH
75120: LD_INT 23
75122: PUSH
75123: LD_INT 0
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: LIST
75138: PPUSH
75139: CALL_OW 69
75143: ST_TO_ADDR
// if not tmp then
75144: LD_VAR 0 1
75148: NOT
75149: IFFALSE 75153
// exit ;
75151: GO 75179
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75153: LD_VAR 0 1
75157: PUSH
75158: LD_INT 1
75160: PPUSH
75161: LD_VAR 0 1
75165: PPUSH
75166: CALL_OW 12
75170: ARRAY
75171: PPUSH
75172: LD_INT 200
75174: PPUSH
75175: CALL_OW 234
// end ;
75179: PPOPN 1
75181: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75182: LD_EXP 59
75186: PUSH
75187: LD_EXP 88
75191: AND
75192: IFFALSE 75271
75194: GO 75196
75196: DISABLE
75197: LD_INT 0
75199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75200: LD_ADDR_VAR 0 1
75204: PUSH
75205: LD_INT 22
75207: PUSH
75208: LD_OWVAR 2
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: PUSH
75217: LD_INT 21
75219: PUSH
75220: LD_INT 2
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PPUSH
75231: CALL_OW 69
75235: ST_TO_ADDR
// if not tmp then
75236: LD_VAR 0 1
75240: NOT
75241: IFFALSE 75245
// exit ;
75243: GO 75271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75245: LD_VAR 0 1
75249: PUSH
75250: LD_INT 1
75252: PPUSH
75253: LD_VAR 0 1
75257: PPUSH
75258: CALL_OW 12
75262: ARRAY
75263: PPUSH
75264: LD_INT 60
75266: PPUSH
75267: CALL_OW 234
// end ;
75271: PPOPN 1
75273: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75274: LD_EXP 59
75278: PUSH
75279: LD_EXP 89
75283: AND
75284: IFFALSE 75383
75286: GO 75288
75288: DISABLE
75289: LD_INT 0
75291: PPUSH
75292: PPUSH
// begin enable ;
75293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75294: LD_ADDR_VAR 0 1
75298: PUSH
75299: LD_INT 22
75301: PUSH
75302: LD_OWVAR 2
75306: PUSH
75307: EMPTY
75308: LIST
75309: LIST
75310: PUSH
75311: LD_INT 61
75313: PUSH
75314: EMPTY
75315: LIST
75316: PUSH
75317: LD_INT 33
75319: PUSH
75320: LD_INT 2
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: LIST
75331: PPUSH
75332: CALL_OW 69
75336: ST_TO_ADDR
// if not tmp then
75337: LD_VAR 0 1
75341: NOT
75342: IFFALSE 75346
// exit ;
75344: GO 75383
// for i in tmp do
75346: LD_ADDR_VAR 0 2
75350: PUSH
75351: LD_VAR 0 1
75355: PUSH
75356: FOR_IN
75357: IFFALSE 75381
// if IsControledBy ( i ) then
75359: LD_VAR 0 2
75363: PPUSH
75364: CALL_OW 312
75368: IFFALSE 75379
// ComUnlink ( i ) ;
75370: LD_VAR 0 2
75374: PPUSH
75375: CALL_OW 136
75379: GO 75356
75381: POP
75382: POP
// end ;
75383: PPOPN 2
75385: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
75386: LD_EXP 59
75390: PUSH
75391: LD_EXP 90
75395: AND
75396: IFFALSE 75536
75398: GO 75400
75400: DISABLE
75401: LD_INT 0
75403: PPUSH
75404: PPUSH
// begin ToLua ( displayPowell(); ) ;
75405: LD_STRING displayPowell();
75407: PPUSH
75408: CALL_OW 559
// uc_side := 0 ;
75412: LD_ADDR_OWVAR 20
75416: PUSH
75417: LD_INT 0
75419: ST_TO_ADDR
// uc_nation := 2 ;
75420: LD_ADDR_OWVAR 21
75424: PUSH
75425: LD_INT 2
75427: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
75428: LD_ADDR_OWVAR 37
75432: PUSH
75433: LD_INT 14
75435: ST_TO_ADDR
// vc_engine := engine_siberite ;
75436: LD_ADDR_OWVAR 39
75440: PUSH
75441: LD_INT 3
75443: ST_TO_ADDR
// vc_control := control_apeman ;
75444: LD_ADDR_OWVAR 38
75448: PUSH
75449: LD_INT 5
75451: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
75452: LD_ADDR_OWVAR 40
75456: PUSH
75457: LD_INT 29
75459: ST_TO_ADDR
// un := CreateVehicle ;
75460: LD_ADDR_VAR 0 2
75464: PUSH
75465: CALL_OW 45
75469: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75470: LD_VAR 0 2
75474: PPUSH
75475: LD_INT 1
75477: PPUSH
75478: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75482: LD_INT 35
75484: PPUSH
75485: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75489: LD_VAR 0 2
75493: PPUSH
75494: LD_INT 22
75496: PUSH
75497: LD_OWVAR 2
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: PPUSH
75506: CALL_OW 69
75510: PPUSH
75511: LD_VAR 0 2
75515: PPUSH
75516: CALL_OW 74
75520: PPUSH
75521: CALL_OW 115
// until IsDead ( un ) ;
75525: LD_VAR 0 2
75529: PPUSH
75530: CALL_OW 301
75534: IFFALSE 75482
// end ;
75536: PPOPN 2
75538: END
// every 0 0$1 trigger StreamModeActive and sStu do
75539: LD_EXP 59
75543: PUSH
75544: LD_EXP 98
75548: AND
75549: IFFALSE 75565
75551: GO 75553
75553: DISABLE
// begin ToLua ( displayStucuk(); ) ;
75554: LD_STRING displayStucuk();
75556: PPUSH
75557: CALL_OW 559
// ResetFog ;
75561: CALL_OW 335
// end ;
75565: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
75566: LD_EXP 59
75570: PUSH
75571: LD_EXP 91
75575: AND
75576: IFFALSE 75717
75578: GO 75580
75580: DISABLE
75581: LD_INT 0
75583: PPUSH
75584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75585: LD_ADDR_VAR 0 2
75589: PUSH
75590: LD_INT 22
75592: PUSH
75593: LD_OWVAR 2
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: PUSH
75602: LD_INT 21
75604: PUSH
75605: LD_INT 1
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: PPUSH
75616: CALL_OW 69
75620: ST_TO_ADDR
// if not tmp then
75621: LD_VAR 0 2
75625: NOT
75626: IFFALSE 75630
// exit ;
75628: GO 75717
// un := tmp [ rand ( 1 , tmp ) ] ;
75630: LD_ADDR_VAR 0 1
75634: PUSH
75635: LD_VAR 0 2
75639: PUSH
75640: LD_INT 1
75642: PPUSH
75643: LD_VAR 0 2
75647: PPUSH
75648: CALL_OW 12
75652: ARRAY
75653: ST_TO_ADDR
// SetSide ( un , 0 ) ;
75654: LD_VAR 0 1
75658: PPUSH
75659: LD_INT 0
75661: PPUSH
75662: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
75666: LD_VAR 0 1
75670: PPUSH
75671: LD_OWVAR 3
75675: PUSH
75676: LD_VAR 0 1
75680: DIFF
75681: PPUSH
75682: LD_VAR 0 1
75686: PPUSH
75687: CALL_OW 74
75691: PPUSH
75692: CALL_OW 115
// wait ( 0 0$20 ) ;
75696: LD_INT 700
75698: PPUSH
75699: CALL_OW 67
// SetSide ( un , your_side ) ;
75703: LD_VAR 0 1
75707: PPUSH
75708: LD_OWVAR 2
75712: PPUSH
75713: CALL_OW 235
// end ;
75717: PPOPN 2
75719: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
75720: LD_EXP 59
75724: PUSH
75725: LD_EXP 92
75729: AND
75730: IFFALSE 75836
75732: GO 75734
75734: DISABLE
75735: LD_INT 0
75737: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75738: LD_ADDR_VAR 0 1
75742: PUSH
75743: LD_INT 22
75745: PUSH
75746: LD_OWVAR 2
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: PUSH
75755: LD_INT 2
75757: PUSH
75758: LD_INT 30
75760: PUSH
75761: LD_INT 0
75763: PUSH
75764: EMPTY
75765: LIST
75766: LIST
75767: PUSH
75768: LD_INT 30
75770: PUSH
75771: LD_INT 1
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: PUSH
75778: EMPTY
75779: LIST
75780: LIST
75781: LIST
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: PPUSH
75787: CALL_OW 69
75791: ST_TO_ADDR
// if not depot then
75792: LD_VAR 0 1
75796: NOT
75797: IFFALSE 75801
// exit ;
75799: GO 75836
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
75801: LD_VAR 0 1
75805: PUSH
75806: LD_INT 1
75808: ARRAY
75809: PPUSH
75810: CALL_OW 250
75814: PPUSH
75815: LD_VAR 0 1
75819: PUSH
75820: LD_INT 1
75822: ARRAY
75823: PPUSH
75824: CALL_OW 251
75828: PPUSH
75829: LD_INT 70
75831: PPUSH
75832: CALL_OW 495
// end ;
75836: PPOPN 1
75838: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
75839: LD_EXP 59
75843: PUSH
75844: LD_EXP 93
75848: AND
75849: IFFALSE 76060
75851: GO 75853
75853: DISABLE
75854: LD_INT 0
75856: PPUSH
75857: PPUSH
75858: PPUSH
75859: PPUSH
75860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75861: LD_ADDR_VAR 0 5
75865: PUSH
75866: LD_INT 22
75868: PUSH
75869: LD_OWVAR 2
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: PUSH
75878: LD_INT 21
75880: PUSH
75881: LD_INT 1
75883: PUSH
75884: EMPTY
75885: LIST
75886: LIST
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: PPUSH
75892: CALL_OW 69
75896: ST_TO_ADDR
// if not tmp then
75897: LD_VAR 0 5
75901: NOT
75902: IFFALSE 75906
// exit ;
75904: GO 76060
// for i in tmp do
75906: LD_ADDR_VAR 0 1
75910: PUSH
75911: LD_VAR 0 5
75915: PUSH
75916: FOR_IN
75917: IFFALSE 76058
// begin d := rand ( 0 , 5 ) ;
75919: LD_ADDR_VAR 0 4
75923: PUSH
75924: LD_INT 0
75926: PPUSH
75927: LD_INT 5
75929: PPUSH
75930: CALL_OW 12
75934: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
75935: LD_ADDR_VAR 0 2
75939: PUSH
75940: LD_VAR 0 1
75944: PPUSH
75945: CALL_OW 250
75949: PPUSH
75950: LD_VAR 0 4
75954: PPUSH
75955: LD_INT 3
75957: PPUSH
75958: LD_INT 12
75960: PPUSH
75961: CALL_OW 12
75965: PPUSH
75966: CALL_OW 272
75970: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
75971: LD_ADDR_VAR 0 3
75975: PUSH
75976: LD_VAR 0 1
75980: PPUSH
75981: CALL_OW 251
75985: PPUSH
75986: LD_VAR 0 4
75990: PPUSH
75991: LD_INT 3
75993: PPUSH
75994: LD_INT 12
75996: PPUSH
75997: CALL_OW 12
76001: PPUSH
76002: CALL_OW 273
76006: ST_TO_ADDR
// if ValidHex ( x , y ) then
76007: LD_VAR 0 2
76011: PPUSH
76012: LD_VAR 0 3
76016: PPUSH
76017: CALL_OW 488
76021: IFFALSE 76056
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76023: LD_VAR 0 1
76027: PPUSH
76028: LD_VAR 0 2
76032: PPUSH
76033: LD_VAR 0 3
76037: PPUSH
76038: LD_INT 3
76040: PPUSH
76041: LD_INT 6
76043: PPUSH
76044: CALL_OW 12
76048: PPUSH
76049: LD_INT 1
76051: PPUSH
76052: CALL_OW 483
// end ;
76056: GO 75916
76058: POP
76059: POP
// end ;
76060: PPOPN 5
76062: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76063: LD_EXP 59
76067: PUSH
76068: LD_EXP 94
76072: AND
76073: IFFALSE 76167
76075: GO 76077
76077: DISABLE
76078: LD_INT 0
76080: PPUSH
76081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76082: LD_ADDR_VAR 0 2
76086: PUSH
76087: LD_INT 22
76089: PUSH
76090: LD_OWVAR 2
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: PUSH
76099: LD_INT 32
76101: PUSH
76102: LD_INT 1
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: PUSH
76109: LD_INT 21
76111: PUSH
76112: LD_INT 2
76114: PUSH
76115: EMPTY
76116: LIST
76117: LIST
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: LIST
76123: PPUSH
76124: CALL_OW 69
76128: ST_TO_ADDR
// if not tmp then
76129: LD_VAR 0 2
76133: NOT
76134: IFFALSE 76138
// exit ;
76136: GO 76167
// for i in tmp do
76138: LD_ADDR_VAR 0 1
76142: PUSH
76143: LD_VAR 0 2
76147: PUSH
76148: FOR_IN
76149: IFFALSE 76165
// SetFuel ( i , 0 ) ;
76151: LD_VAR 0 1
76155: PPUSH
76156: LD_INT 0
76158: PPUSH
76159: CALL_OW 240
76163: GO 76148
76165: POP
76166: POP
// end ;
76167: PPOPN 2
76169: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76170: LD_EXP 59
76174: PUSH
76175: LD_EXP 95
76179: AND
76180: IFFALSE 76246
76182: GO 76184
76184: DISABLE
76185: LD_INT 0
76187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76188: LD_ADDR_VAR 0 1
76192: PUSH
76193: LD_INT 22
76195: PUSH
76196: LD_OWVAR 2
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: LD_INT 30
76207: PUSH
76208: LD_INT 29
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PPUSH
76219: CALL_OW 69
76223: ST_TO_ADDR
// if not tmp then
76224: LD_VAR 0 1
76228: NOT
76229: IFFALSE 76233
// exit ;
76231: GO 76246
// DestroyUnit ( tmp [ 1 ] ) ;
76233: LD_VAR 0 1
76237: PUSH
76238: LD_INT 1
76240: ARRAY
76241: PPUSH
76242: CALL_OW 65
// end ;
76246: PPOPN 1
76248: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76249: LD_EXP 59
76253: PUSH
76254: LD_EXP 97
76258: AND
76259: IFFALSE 76388
76261: GO 76263
76263: DISABLE
76264: LD_INT 0
76266: PPUSH
// begin uc_side := 0 ;
76267: LD_ADDR_OWVAR 20
76271: PUSH
76272: LD_INT 0
76274: ST_TO_ADDR
// uc_nation := nation_arabian ;
76275: LD_ADDR_OWVAR 21
76279: PUSH
76280: LD_INT 2
76282: ST_TO_ADDR
// hc_gallery :=  ;
76283: LD_ADDR_OWVAR 33
76287: PUSH
76288: LD_STRING 
76290: ST_TO_ADDR
// hc_name :=  ;
76291: LD_ADDR_OWVAR 26
76295: PUSH
76296: LD_STRING 
76298: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
76299: LD_INT 1
76301: PPUSH
76302: LD_INT 11
76304: PPUSH
76305: LD_INT 10
76307: PPUSH
76308: CALL_OW 380
// un := CreateHuman ;
76312: LD_ADDR_VAR 0 1
76316: PUSH
76317: CALL_OW 44
76321: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76322: LD_VAR 0 1
76326: PPUSH
76327: LD_INT 1
76329: PPUSH
76330: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76334: LD_INT 35
76336: PPUSH
76337: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76341: LD_VAR 0 1
76345: PPUSH
76346: LD_INT 22
76348: PUSH
76349: LD_OWVAR 2
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: PPUSH
76358: CALL_OW 69
76362: PPUSH
76363: LD_VAR 0 1
76367: PPUSH
76368: CALL_OW 74
76372: PPUSH
76373: CALL_OW 115
// until IsDead ( un ) ;
76377: LD_VAR 0 1
76381: PPUSH
76382: CALL_OW 301
76386: IFFALSE 76334
// end ;
76388: PPOPN 1
76390: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
76391: LD_EXP 59
76395: PUSH
76396: LD_EXP 99
76400: AND
76401: IFFALSE 76413
76403: GO 76405
76405: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
76406: LD_STRING earthquake(getX(game), 0, 32)
76408: PPUSH
76409: CALL_OW 559
76413: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
76414: LD_EXP 59
76418: PUSH
76419: LD_EXP 100
76423: AND
76424: IFFALSE 76515
76426: GO 76428
76428: DISABLE
76429: LD_INT 0
76431: PPUSH
// begin enable ;
76432: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
76433: LD_ADDR_VAR 0 1
76437: PUSH
76438: LD_INT 22
76440: PUSH
76441: LD_OWVAR 2
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: PUSH
76450: LD_INT 21
76452: PUSH
76453: LD_INT 2
76455: PUSH
76456: EMPTY
76457: LIST
76458: LIST
76459: PUSH
76460: LD_INT 33
76462: PUSH
76463: LD_INT 3
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: LIST
76474: PPUSH
76475: CALL_OW 69
76479: ST_TO_ADDR
// if not tmp then
76480: LD_VAR 0 1
76484: NOT
76485: IFFALSE 76489
// exit ;
76487: GO 76515
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76489: LD_VAR 0 1
76493: PUSH
76494: LD_INT 1
76496: PPUSH
76497: LD_VAR 0 1
76501: PPUSH
76502: CALL_OW 12
76506: ARRAY
76507: PPUSH
76508: LD_INT 1
76510: PPUSH
76511: CALL_OW 234
// end ;
76515: PPOPN 1
76517: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
76518: LD_EXP 59
76522: PUSH
76523: LD_EXP 101
76527: AND
76528: IFFALSE 76669
76530: GO 76532
76532: DISABLE
76533: LD_INT 0
76535: PPUSH
76536: PPUSH
76537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76538: LD_ADDR_VAR 0 3
76542: PUSH
76543: LD_INT 22
76545: PUSH
76546: LD_OWVAR 2
76550: PUSH
76551: EMPTY
76552: LIST
76553: LIST
76554: PUSH
76555: LD_INT 25
76557: PUSH
76558: LD_INT 1
76560: PUSH
76561: EMPTY
76562: LIST
76563: LIST
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: PPUSH
76569: CALL_OW 69
76573: ST_TO_ADDR
// if not tmp then
76574: LD_VAR 0 3
76578: NOT
76579: IFFALSE 76583
// exit ;
76581: GO 76669
// un := tmp [ rand ( 1 , tmp ) ] ;
76583: LD_ADDR_VAR 0 2
76587: PUSH
76588: LD_VAR 0 3
76592: PUSH
76593: LD_INT 1
76595: PPUSH
76596: LD_VAR 0 3
76600: PPUSH
76601: CALL_OW 12
76605: ARRAY
76606: ST_TO_ADDR
// if Crawls ( un ) then
76607: LD_VAR 0 2
76611: PPUSH
76612: CALL_OW 318
76616: IFFALSE 76627
// ComWalk ( un ) ;
76618: LD_VAR 0 2
76622: PPUSH
76623: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
76627: LD_VAR 0 2
76631: PPUSH
76632: LD_INT 9
76634: PPUSH
76635: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
76639: LD_INT 28
76641: PPUSH
76642: LD_OWVAR 2
76646: PPUSH
76647: LD_INT 2
76649: PPUSH
76650: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
76654: LD_INT 29
76656: PPUSH
76657: LD_OWVAR 2
76661: PPUSH
76662: LD_INT 2
76664: PPUSH
76665: CALL_OW 322
// end ;
76669: PPOPN 3
76671: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
76672: LD_EXP 59
76676: PUSH
76677: LD_EXP 102
76681: AND
76682: IFFALSE 76793
76684: GO 76686
76686: DISABLE
76687: LD_INT 0
76689: PPUSH
76690: PPUSH
76691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76692: LD_ADDR_VAR 0 3
76696: PUSH
76697: LD_INT 22
76699: PUSH
76700: LD_OWVAR 2
76704: PUSH
76705: EMPTY
76706: LIST
76707: LIST
76708: PUSH
76709: LD_INT 25
76711: PUSH
76712: LD_INT 1
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: PUSH
76719: EMPTY
76720: LIST
76721: LIST
76722: PPUSH
76723: CALL_OW 69
76727: ST_TO_ADDR
// if not tmp then
76728: LD_VAR 0 3
76732: NOT
76733: IFFALSE 76737
// exit ;
76735: GO 76793
// un := tmp [ rand ( 1 , tmp ) ] ;
76737: LD_ADDR_VAR 0 2
76741: PUSH
76742: LD_VAR 0 3
76746: PUSH
76747: LD_INT 1
76749: PPUSH
76750: LD_VAR 0 3
76754: PPUSH
76755: CALL_OW 12
76759: ARRAY
76760: ST_TO_ADDR
// if Crawls ( un ) then
76761: LD_VAR 0 2
76765: PPUSH
76766: CALL_OW 318
76770: IFFALSE 76781
// ComWalk ( un ) ;
76772: LD_VAR 0 2
76776: PPUSH
76777: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76781: LD_VAR 0 2
76785: PPUSH
76786: LD_INT 8
76788: PPUSH
76789: CALL_OW 336
// end ;
76793: PPOPN 3
76795: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
76796: LD_EXP 59
76800: PUSH
76801: LD_EXP 103
76805: AND
76806: IFFALSE 76950
76808: GO 76810
76810: DISABLE
76811: LD_INT 0
76813: PPUSH
76814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
76815: LD_ADDR_VAR 0 2
76819: PUSH
76820: LD_INT 22
76822: PUSH
76823: LD_OWVAR 2
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PUSH
76832: LD_INT 21
76834: PUSH
76835: LD_INT 2
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 2
76844: PUSH
76845: LD_INT 34
76847: PUSH
76848: LD_INT 12
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: PUSH
76855: LD_INT 34
76857: PUSH
76858: LD_INT 51
76860: PUSH
76861: EMPTY
76862: LIST
76863: LIST
76864: PUSH
76865: LD_INT 34
76867: PUSH
76868: LD_INT 32
76870: PUSH
76871: EMPTY
76872: LIST
76873: LIST
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: PUSH
76881: EMPTY
76882: LIST
76883: LIST
76884: LIST
76885: PPUSH
76886: CALL_OW 69
76890: ST_TO_ADDR
// if not tmp then
76891: LD_VAR 0 2
76895: NOT
76896: IFFALSE 76900
// exit ;
76898: GO 76950
// for i in tmp do
76900: LD_ADDR_VAR 0 1
76904: PUSH
76905: LD_VAR 0 2
76909: PUSH
76910: FOR_IN
76911: IFFALSE 76948
// if GetCargo ( i , mat_artifact ) = 0 then
76913: LD_VAR 0 1
76917: PPUSH
76918: LD_INT 4
76920: PPUSH
76921: CALL_OW 289
76925: PUSH
76926: LD_INT 0
76928: EQUAL
76929: IFFALSE 76946
// SetCargo ( i , mat_siberit , 100 ) ;
76931: LD_VAR 0 1
76935: PPUSH
76936: LD_INT 3
76938: PPUSH
76939: LD_INT 100
76941: PPUSH
76942: CALL_OW 290
76946: GO 76910
76948: POP
76949: POP
// end ;
76950: PPOPN 2
76952: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
76953: LD_EXP 59
76957: PUSH
76958: LD_EXP 104
76962: AND
76963: IFFALSE 77146
76965: GO 76967
76967: DISABLE
76968: LD_INT 0
76970: PPUSH
76971: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76972: LD_ADDR_VAR 0 2
76976: PUSH
76977: LD_INT 22
76979: PUSH
76980: LD_OWVAR 2
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PPUSH
76989: CALL_OW 69
76993: ST_TO_ADDR
// if not tmp then
76994: LD_VAR 0 2
76998: NOT
76999: IFFALSE 77003
// exit ;
77001: GO 77146
// for i := 1 to 2 do
77003: LD_ADDR_VAR 0 1
77007: PUSH
77008: DOUBLE
77009: LD_INT 1
77011: DEC
77012: ST_TO_ADDR
77013: LD_INT 2
77015: PUSH
77016: FOR_TO
77017: IFFALSE 77144
// begin uc_side := your_side ;
77019: LD_ADDR_OWVAR 20
77023: PUSH
77024: LD_OWVAR 2
77028: ST_TO_ADDR
// uc_nation := nation_american ;
77029: LD_ADDR_OWVAR 21
77033: PUSH
77034: LD_INT 1
77036: ST_TO_ADDR
// vc_chassis := us_morphling ;
77037: LD_ADDR_OWVAR 37
77041: PUSH
77042: LD_INT 5
77044: ST_TO_ADDR
// vc_engine := engine_siberite ;
77045: LD_ADDR_OWVAR 39
77049: PUSH
77050: LD_INT 3
77052: ST_TO_ADDR
// vc_control := control_computer ;
77053: LD_ADDR_OWVAR 38
77057: PUSH
77058: LD_INT 3
77060: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77061: LD_ADDR_OWVAR 40
77065: PUSH
77066: LD_INT 10
77068: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77069: LD_VAR 0 2
77073: PUSH
77074: LD_INT 1
77076: ARRAY
77077: PPUSH
77078: CALL_OW 310
77082: NOT
77083: IFFALSE 77130
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77085: CALL_OW 45
77089: PPUSH
77090: LD_VAR 0 2
77094: PUSH
77095: LD_INT 1
77097: ARRAY
77098: PPUSH
77099: CALL_OW 250
77103: PPUSH
77104: LD_VAR 0 2
77108: PUSH
77109: LD_INT 1
77111: ARRAY
77112: PPUSH
77113: CALL_OW 251
77117: PPUSH
77118: LD_INT 12
77120: PPUSH
77121: LD_INT 1
77123: PPUSH
77124: CALL_OW 50
77128: GO 77142
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77130: CALL_OW 45
77134: PPUSH
77135: LD_INT 1
77137: PPUSH
77138: CALL_OW 51
// end ;
77142: GO 77016
77144: POP
77145: POP
// end ;
77146: PPOPN 2
77148: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77149: LD_EXP 59
77153: PUSH
77154: LD_EXP 105
77158: AND
77159: IFFALSE 77381
77161: GO 77163
77163: DISABLE
77164: LD_INT 0
77166: PPUSH
77167: PPUSH
77168: PPUSH
77169: PPUSH
77170: PPUSH
77171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77172: LD_ADDR_VAR 0 6
77176: PUSH
77177: LD_INT 22
77179: PUSH
77180: LD_OWVAR 2
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: PUSH
77189: LD_INT 21
77191: PUSH
77192: LD_INT 1
77194: PUSH
77195: EMPTY
77196: LIST
77197: LIST
77198: PUSH
77199: LD_INT 3
77201: PUSH
77202: LD_INT 23
77204: PUSH
77205: LD_INT 0
77207: PUSH
77208: EMPTY
77209: LIST
77210: LIST
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: LIST
77220: PPUSH
77221: CALL_OW 69
77225: ST_TO_ADDR
// if not tmp then
77226: LD_VAR 0 6
77230: NOT
77231: IFFALSE 77235
// exit ;
77233: GO 77381
// s1 := rand ( 1 , 4 ) ;
77235: LD_ADDR_VAR 0 2
77239: PUSH
77240: LD_INT 1
77242: PPUSH
77243: LD_INT 4
77245: PPUSH
77246: CALL_OW 12
77250: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77251: LD_ADDR_VAR 0 4
77255: PUSH
77256: LD_VAR 0 6
77260: PUSH
77261: LD_INT 1
77263: ARRAY
77264: PPUSH
77265: LD_VAR 0 2
77269: PPUSH
77270: CALL_OW 259
77274: ST_TO_ADDR
// if s1 = 1 then
77275: LD_VAR 0 2
77279: PUSH
77280: LD_INT 1
77282: EQUAL
77283: IFFALSE 77303
// s2 := rand ( 2 , 4 ) else
77285: LD_ADDR_VAR 0 3
77289: PUSH
77290: LD_INT 2
77292: PPUSH
77293: LD_INT 4
77295: PPUSH
77296: CALL_OW 12
77300: ST_TO_ADDR
77301: GO 77311
// s2 := 1 ;
77303: LD_ADDR_VAR 0 3
77307: PUSH
77308: LD_INT 1
77310: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
77311: LD_ADDR_VAR 0 5
77315: PUSH
77316: LD_VAR 0 6
77320: PUSH
77321: LD_INT 1
77323: ARRAY
77324: PPUSH
77325: LD_VAR 0 3
77329: PPUSH
77330: CALL_OW 259
77334: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
77335: LD_VAR 0 6
77339: PUSH
77340: LD_INT 1
77342: ARRAY
77343: PPUSH
77344: LD_VAR 0 2
77348: PPUSH
77349: LD_VAR 0 5
77353: PPUSH
77354: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
77358: LD_VAR 0 6
77362: PUSH
77363: LD_INT 1
77365: ARRAY
77366: PPUSH
77367: LD_VAR 0 3
77371: PPUSH
77372: LD_VAR 0 4
77376: PPUSH
77377: CALL_OW 237
// end ;
77381: PPOPN 6
77383: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
77384: LD_EXP 59
77388: PUSH
77389: LD_EXP 106
77393: AND
77394: IFFALSE 77473
77396: GO 77398
77398: DISABLE
77399: LD_INT 0
77401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
77402: LD_ADDR_VAR 0 1
77406: PUSH
77407: LD_INT 22
77409: PUSH
77410: LD_OWVAR 2
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PUSH
77419: LD_INT 30
77421: PUSH
77422: LD_INT 3
77424: PUSH
77425: EMPTY
77426: LIST
77427: LIST
77428: PUSH
77429: EMPTY
77430: LIST
77431: LIST
77432: PPUSH
77433: CALL_OW 69
77437: ST_TO_ADDR
// if not tmp then
77438: LD_VAR 0 1
77442: NOT
77443: IFFALSE 77447
// exit ;
77445: GO 77473
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77447: LD_VAR 0 1
77451: PUSH
77452: LD_INT 1
77454: PPUSH
77455: LD_VAR 0 1
77459: PPUSH
77460: CALL_OW 12
77464: ARRAY
77465: PPUSH
77466: LD_INT 1
77468: PPUSH
77469: CALL_OW 234
// end ;
77473: PPOPN 1
77475: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
77476: LD_EXP 59
77480: PUSH
77481: LD_EXP 107
77485: AND
77486: IFFALSE 77598
77488: GO 77490
77490: DISABLE
77491: LD_INT 0
77493: PPUSH
77494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
77495: LD_ADDR_VAR 0 2
77499: PUSH
77500: LD_INT 22
77502: PUSH
77503: LD_OWVAR 2
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PUSH
77512: LD_INT 2
77514: PUSH
77515: LD_INT 30
77517: PUSH
77518: LD_INT 27
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: PUSH
77525: LD_INT 30
77527: PUSH
77528: LD_INT 26
77530: PUSH
77531: EMPTY
77532: LIST
77533: LIST
77534: PUSH
77535: LD_INT 30
77537: PUSH
77538: LD_INT 28
77540: PUSH
77541: EMPTY
77542: LIST
77543: LIST
77544: PUSH
77545: EMPTY
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: PUSH
77551: EMPTY
77552: LIST
77553: LIST
77554: PPUSH
77555: CALL_OW 69
77559: ST_TO_ADDR
// if not tmp then
77560: LD_VAR 0 2
77564: NOT
77565: IFFALSE 77569
// exit ;
77567: GO 77598
// for i in tmp do
77569: LD_ADDR_VAR 0 1
77573: PUSH
77574: LD_VAR 0 2
77578: PUSH
77579: FOR_IN
77580: IFFALSE 77596
// SetLives ( i , 1 ) ;
77582: LD_VAR 0 1
77586: PPUSH
77587: LD_INT 1
77589: PPUSH
77590: CALL_OW 234
77594: GO 77579
77596: POP
77597: POP
// end ;
77598: PPOPN 2
77600: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
77601: LD_EXP 59
77605: PUSH
77606: LD_EXP 108
77610: AND
77611: IFFALSE 77898
77613: GO 77615
77615: DISABLE
77616: LD_INT 0
77618: PPUSH
77619: PPUSH
77620: PPUSH
// begin i := rand ( 1 , 7 ) ;
77621: LD_ADDR_VAR 0 1
77625: PUSH
77626: LD_INT 1
77628: PPUSH
77629: LD_INT 7
77631: PPUSH
77632: CALL_OW 12
77636: ST_TO_ADDR
// case i of 1 :
77637: LD_VAR 0 1
77641: PUSH
77642: LD_INT 1
77644: DOUBLE
77645: EQUAL
77646: IFTRUE 77650
77648: GO 77660
77650: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
77651: LD_STRING earthquake(getX(game), 0, 32)
77653: PPUSH
77654: CALL_OW 559
77658: GO 77898
77660: LD_INT 2
77662: DOUBLE
77663: EQUAL
77664: IFTRUE 77668
77666: GO 77682
77668: POP
// begin ToLua ( displayStucuk(); ) ;
77669: LD_STRING displayStucuk();
77671: PPUSH
77672: CALL_OW 559
// ResetFog ;
77676: CALL_OW 335
// end ; 3 :
77680: GO 77898
77682: LD_INT 3
77684: DOUBLE
77685: EQUAL
77686: IFTRUE 77690
77688: GO 77794
77690: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77691: LD_ADDR_VAR 0 2
77695: PUSH
77696: LD_INT 22
77698: PUSH
77699: LD_OWVAR 2
77703: PUSH
77704: EMPTY
77705: LIST
77706: LIST
77707: PUSH
77708: LD_INT 25
77710: PUSH
77711: LD_INT 1
77713: PUSH
77714: EMPTY
77715: LIST
77716: LIST
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PPUSH
77722: CALL_OW 69
77726: ST_TO_ADDR
// if not tmp then
77727: LD_VAR 0 2
77731: NOT
77732: IFFALSE 77736
// exit ;
77734: GO 77898
// un := tmp [ rand ( 1 , tmp ) ] ;
77736: LD_ADDR_VAR 0 3
77740: PUSH
77741: LD_VAR 0 2
77745: PUSH
77746: LD_INT 1
77748: PPUSH
77749: LD_VAR 0 2
77753: PPUSH
77754: CALL_OW 12
77758: ARRAY
77759: ST_TO_ADDR
// if Crawls ( un ) then
77760: LD_VAR 0 3
77764: PPUSH
77765: CALL_OW 318
77769: IFFALSE 77780
// ComWalk ( un ) ;
77771: LD_VAR 0 3
77775: PPUSH
77776: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77780: LD_VAR 0 3
77784: PPUSH
77785: LD_INT 8
77787: PPUSH
77788: CALL_OW 336
// end ; 4 :
77792: GO 77898
77794: LD_INT 4
77796: DOUBLE
77797: EQUAL
77798: IFTRUE 77802
77800: GO 77876
77802: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77803: LD_ADDR_VAR 0 2
77807: PUSH
77808: LD_INT 22
77810: PUSH
77811: LD_OWVAR 2
77815: PUSH
77816: EMPTY
77817: LIST
77818: LIST
77819: PUSH
77820: LD_INT 30
77822: PUSH
77823: LD_INT 29
77825: PUSH
77826: EMPTY
77827: LIST
77828: LIST
77829: PUSH
77830: EMPTY
77831: LIST
77832: LIST
77833: PPUSH
77834: CALL_OW 69
77838: ST_TO_ADDR
// if not tmp then
77839: LD_VAR 0 2
77843: NOT
77844: IFFALSE 77848
// exit ;
77846: GO 77898
// CenterNowOnUnits ( tmp [ 1 ] ) ;
77848: LD_VAR 0 2
77852: PUSH
77853: LD_INT 1
77855: ARRAY
77856: PPUSH
77857: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
77861: LD_VAR 0 2
77865: PUSH
77866: LD_INT 1
77868: ARRAY
77869: PPUSH
77870: CALL_OW 65
// end ; 5 .. 7 :
77874: GO 77898
77876: LD_INT 5
77878: DOUBLE
77879: GREATEREQUAL
77880: IFFALSE 77888
77882: LD_INT 7
77884: DOUBLE
77885: LESSEQUAL
77886: IFTRUE 77890
77888: GO 77897
77890: POP
// StreamSibBomb ; end ;
77891: CALL 74135 0 0
77895: GO 77898
77897: POP
// end ;
77898: PPOPN 3
77900: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
77901: LD_EXP 59
77905: PUSH
77906: LD_EXP 109
77910: AND
77911: IFFALSE 78067
77913: GO 77915
77915: DISABLE
77916: LD_INT 0
77918: PPUSH
77919: PPUSH
77920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
77921: LD_ADDR_VAR 0 2
77925: PUSH
77926: LD_INT 81
77928: PUSH
77929: LD_OWVAR 2
77933: PUSH
77934: EMPTY
77935: LIST
77936: LIST
77937: PUSH
77938: LD_INT 2
77940: PUSH
77941: LD_INT 21
77943: PUSH
77944: LD_INT 1
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: PUSH
77951: LD_INT 21
77953: PUSH
77954: LD_INT 2
77956: PUSH
77957: EMPTY
77958: LIST
77959: LIST
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: LIST
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: PPUSH
77970: CALL_OW 69
77974: ST_TO_ADDR
// if not tmp then
77975: LD_VAR 0 2
77979: NOT
77980: IFFALSE 77984
// exit ;
77982: GO 78067
// p := 0 ;
77984: LD_ADDR_VAR 0 3
77988: PUSH
77989: LD_INT 0
77991: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
77992: LD_INT 35
77994: PPUSH
77995: CALL_OW 67
// p := p + 1 ;
77999: LD_ADDR_VAR 0 3
78003: PUSH
78004: LD_VAR 0 3
78008: PUSH
78009: LD_INT 1
78011: PLUS
78012: ST_TO_ADDR
// for i in tmp do
78013: LD_ADDR_VAR 0 1
78017: PUSH
78018: LD_VAR 0 2
78022: PUSH
78023: FOR_IN
78024: IFFALSE 78055
// if GetLives ( i ) < 1000 then
78026: LD_VAR 0 1
78030: PPUSH
78031: CALL_OW 256
78035: PUSH
78036: LD_INT 1000
78038: LESS
78039: IFFALSE 78053
// SetLives ( i , 1000 ) ;
78041: LD_VAR 0 1
78045: PPUSH
78046: LD_INT 1000
78048: PPUSH
78049: CALL_OW 234
78053: GO 78023
78055: POP
78056: POP
// until p > 20 ;
78057: LD_VAR 0 3
78061: PUSH
78062: LD_INT 20
78064: GREATER
78065: IFFALSE 77992
// end ;
78067: PPOPN 3
78069: END
// every 0 0$1 trigger StreamModeActive and sTime do
78070: LD_EXP 59
78074: PUSH
78075: LD_EXP 110
78079: AND
78080: IFFALSE 78115
78082: GO 78084
78084: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78085: LD_INT 28
78087: PPUSH
78088: LD_OWVAR 2
78092: PPUSH
78093: LD_INT 2
78095: PPUSH
78096: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78100: LD_INT 30
78102: PPUSH
78103: LD_OWVAR 2
78107: PPUSH
78108: LD_INT 2
78110: PPUSH
78111: CALL_OW 322
// end ;
78115: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78116: LD_EXP 59
78120: PUSH
78121: LD_EXP 111
78125: AND
78126: IFFALSE 78247
78128: GO 78130
78130: DISABLE
78131: LD_INT 0
78133: PPUSH
78134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78135: LD_ADDR_VAR 0 2
78139: PUSH
78140: LD_INT 22
78142: PUSH
78143: LD_OWVAR 2
78147: PUSH
78148: EMPTY
78149: LIST
78150: LIST
78151: PUSH
78152: LD_INT 21
78154: PUSH
78155: LD_INT 1
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: PUSH
78162: LD_INT 3
78164: PUSH
78165: LD_INT 23
78167: PUSH
78168: LD_INT 0
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: PUSH
78175: EMPTY
78176: LIST
78177: LIST
78178: PUSH
78179: EMPTY
78180: LIST
78181: LIST
78182: LIST
78183: PPUSH
78184: CALL_OW 69
78188: ST_TO_ADDR
// if not tmp then
78189: LD_VAR 0 2
78193: NOT
78194: IFFALSE 78198
// exit ;
78196: GO 78247
// for i in tmp do
78198: LD_ADDR_VAR 0 1
78202: PUSH
78203: LD_VAR 0 2
78207: PUSH
78208: FOR_IN
78209: IFFALSE 78245
// begin if Crawls ( i ) then
78211: LD_VAR 0 1
78215: PPUSH
78216: CALL_OW 318
78220: IFFALSE 78231
// ComWalk ( i ) ;
78222: LD_VAR 0 1
78226: PPUSH
78227: CALL_OW 138
// SetClass ( i , 2 ) ;
78231: LD_VAR 0 1
78235: PPUSH
78236: LD_INT 2
78238: PPUSH
78239: CALL_OW 336
// end ;
78243: GO 78208
78245: POP
78246: POP
// end ;
78247: PPOPN 2
78249: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78250: LD_EXP 59
78254: PUSH
78255: LD_EXP 112
78259: AND
78260: IFFALSE 78548
78262: GO 78264
78264: DISABLE
78265: LD_INT 0
78267: PPUSH
78268: PPUSH
78269: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78270: LD_OWVAR 2
78274: PPUSH
78275: LD_INT 9
78277: PPUSH
78278: LD_INT 1
78280: PPUSH
78281: LD_INT 1
78283: PPUSH
78284: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78288: LD_INT 9
78290: PPUSH
78291: LD_OWVAR 2
78295: PPUSH
78296: CALL_OW 343
// uc_side := 9 ;
78300: LD_ADDR_OWVAR 20
78304: PUSH
78305: LD_INT 9
78307: ST_TO_ADDR
// uc_nation := 2 ;
78308: LD_ADDR_OWVAR 21
78312: PUSH
78313: LD_INT 2
78315: ST_TO_ADDR
// hc_name := Dark Warrior ;
78316: LD_ADDR_OWVAR 26
78320: PUSH
78321: LD_STRING Dark Warrior
78323: ST_TO_ADDR
// hc_gallery :=  ;
78324: LD_ADDR_OWVAR 33
78328: PUSH
78329: LD_STRING 
78331: ST_TO_ADDR
// hc_noskilllimit := true ;
78332: LD_ADDR_OWVAR 76
78336: PUSH
78337: LD_INT 1
78339: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
78340: LD_ADDR_OWVAR 31
78344: PUSH
78345: LD_INT 30
78347: PUSH
78348: LD_INT 30
78350: PUSH
78351: LD_INT 30
78353: PUSH
78354: LD_INT 30
78356: PUSH
78357: EMPTY
78358: LIST
78359: LIST
78360: LIST
78361: LIST
78362: ST_TO_ADDR
// un := CreateHuman ;
78363: LD_ADDR_VAR 0 3
78367: PUSH
78368: CALL_OW 44
78372: ST_TO_ADDR
// hc_noskilllimit := false ;
78373: LD_ADDR_OWVAR 76
78377: PUSH
78378: LD_INT 0
78380: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78381: LD_VAR 0 3
78385: PPUSH
78386: LD_INT 1
78388: PPUSH
78389: CALL_OW 51
// ToLua ( playRanger() ) ;
78393: LD_STRING playRanger()
78395: PPUSH
78396: CALL_OW 559
// p := 0 ;
78400: LD_ADDR_VAR 0 2
78404: PUSH
78405: LD_INT 0
78407: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78408: LD_INT 35
78410: PPUSH
78411: CALL_OW 67
// p := p + 1 ;
78415: LD_ADDR_VAR 0 2
78419: PUSH
78420: LD_VAR 0 2
78424: PUSH
78425: LD_INT 1
78427: PLUS
78428: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
78429: LD_VAR 0 3
78433: PPUSH
78434: CALL_OW 256
78438: PUSH
78439: LD_INT 1000
78441: LESS
78442: IFFALSE 78456
// SetLives ( un , 1000 ) ;
78444: LD_VAR 0 3
78448: PPUSH
78449: LD_INT 1000
78451: PPUSH
78452: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
78456: LD_VAR 0 3
78460: PPUSH
78461: LD_INT 81
78463: PUSH
78464: LD_OWVAR 2
78468: PUSH
78469: EMPTY
78470: LIST
78471: LIST
78472: PUSH
78473: LD_INT 91
78475: PUSH
78476: LD_VAR 0 3
78480: PUSH
78481: LD_INT 30
78483: PUSH
78484: EMPTY
78485: LIST
78486: LIST
78487: LIST
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PPUSH
78493: CALL_OW 69
78497: PPUSH
78498: LD_VAR 0 3
78502: PPUSH
78503: CALL_OW 74
78507: PPUSH
78508: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
78512: LD_VAR 0 2
78516: PUSH
78517: LD_INT 80
78519: GREATER
78520: PUSH
78521: LD_VAR 0 3
78525: PPUSH
78526: CALL_OW 301
78530: OR
78531: IFFALSE 78408
// if un then
78533: LD_VAR 0 3
78537: IFFALSE 78548
// RemoveUnit ( un ) ;
78539: LD_VAR 0 3
78543: PPUSH
78544: CALL_OW 64
// end ;
78548: PPOPN 3
78550: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
78551: LD_EXP 113
78555: IFFALSE 78671
78557: GO 78559
78559: DISABLE
78560: LD_INT 0
78562: PPUSH
78563: PPUSH
78564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78565: LD_ADDR_VAR 0 2
78569: PUSH
78570: LD_INT 81
78572: PUSH
78573: LD_OWVAR 2
78577: PUSH
78578: EMPTY
78579: LIST
78580: LIST
78581: PUSH
78582: LD_INT 21
78584: PUSH
78585: LD_INT 1
78587: PUSH
78588: EMPTY
78589: LIST
78590: LIST
78591: PUSH
78592: EMPTY
78593: LIST
78594: LIST
78595: PPUSH
78596: CALL_OW 69
78600: ST_TO_ADDR
// ToLua ( playComputer() ) ;
78601: LD_STRING playComputer()
78603: PPUSH
78604: CALL_OW 559
// if not tmp then
78608: LD_VAR 0 2
78612: NOT
78613: IFFALSE 78617
// exit ;
78615: GO 78671
// for i in tmp do
78617: LD_ADDR_VAR 0 1
78621: PUSH
78622: LD_VAR 0 2
78626: PUSH
78627: FOR_IN
78628: IFFALSE 78669
// for j := 1 to 4 do
78630: LD_ADDR_VAR 0 3
78634: PUSH
78635: DOUBLE
78636: LD_INT 1
78638: DEC
78639: ST_TO_ADDR
78640: LD_INT 4
78642: PUSH
78643: FOR_TO
78644: IFFALSE 78665
// SetSkill ( i , j , 10 ) ;
78646: LD_VAR 0 1
78650: PPUSH
78651: LD_VAR 0 3
78655: PPUSH
78656: LD_INT 10
78658: PPUSH
78659: CALL_OW 237
78663: GO 78643
78665: POP
78666: POP
78667: GO 78627
78669: POP
78670: POP
// end ;
78671: PPOPN 3
78673: END
// every 0 0$1 trigger s30 do var i , tmp ;
78674: LD_EXP 114
78678: IFFALSE 78747
78680: GO 78682
78682: DISABLE
78683: LD_INT 0
78685: PPUSH
78686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78687: LD_ADDR_VAR 0 2
78691: PUSH
78692: LD_INT 22
78694: PUSH
78695: LD_OWVAR 2
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: PPUSH
78704: CALL_OW 69
78708: ST_TO_ADDR
// if not tmp then
78709: LD_VAR 0 2
78713: NOT
78714: IFFALSE 78718
// exit ;
78716: GO 78747
// for i in tmp do
78718: LD_ADDR_VAR 0 1
78722: PUSH
78723: LD_VAR 0 2
78727: PUSH
78728: FOR_IN
78729: IFFALSE 78745
// SetLives ( i , 300 ) ;
78731: LD_VAR 0 1
78735: PPUSH
78736: LD_INT 300
78738: PPUSH
78739: CALL_OW 234
78743: GO 78728
78745: POP
78746: POP
// end ;
78747: PPOPN 2
78749: END
// every 0 0$1 trigger s60 do var i , tmp ;
78750: LD_EXP 115
78754: IFFALSE 78823
78756: GO 78758
78758: DISABLE
78759: LD_INT 0
78761: PPUSH
78762: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78763: LD_ADDR_VAR 0 2
78767: PUSH
78768: LD_INT 22
78770: PUSH
78771: LD_OWVAR 2
78775: PUSH
78776: EMPTY
78777: LIST
78778: LIST
78779: PPUSH
78780: CALL_OW 69
78784: ST_TO_ADDR
// if not tmp then
78785: LD_VAR 0 2
78789: NOT
78790: IFFALSE 78794
// exit ;
78792: GO 78823
// for i in tmp do
78794: LD_ADDR_VAR 0 1
78798: PUSH
78799: LD_VAR 0 2
78803: PUSH
78804: FOR_IN
78805: IFFALSE 78821
// SetLives ( i , 600 ) ;
78807: LD_VAR 0 1
78811: PPUSH
78812: LD_INT 600
78814: PPUSH
78815: CALL_OW 234
78819: GO 78804
78821: POP
78822: POP
// end ;
78823: PPOPN 2
78825: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
78826: LD_INT 0
78828: PPUSH
// case cmd of 301 :
78829: LD_VAR 0 1
78833: PUSH
78834: LD_INT 301
78836: DOUBLE
78837: EQUAL
78838: IFTRUE 78842
78840: GO 78874
78842: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
78843: LD_VAR 0 6
78847: PPUSH
78848: LD_VAR 0 7
78852: PPUSH
78853: LD_VAR 0 8
78857: PPUSH
78858: LD_VAR 0 4
78862: PPUSH
78863: LD_VAR 0 5
78867: PPUSH
78868: CALL 80075 0 5
78872: GO 78995
78874: LD_INT 302
78876: DOUBLE
78877: EQUAL
78878: IFTRUE 78882
78880: GO 78919
78882: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
78883: LD_VAR 0 6
78887: PPUSH
78888: LD_VAR 0 7
78892: PPUSH
78893: LD_VAR 0 8
78897: PPUSH
78898: LD_VAR 0 9
78902: PPUSH
78903: LD_VAR 0 4
78907: PPUSH
78908: LD_VAR 0 5
78912: PPUSH
78913: CALL 80166 0 6
78917: GO 78995
78919: LD_INT 303
78921: DOUBLE
78922: EQUAL
78923: IFTRUE 78927
78925: GO 78964
78927: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
78928: LD_VAR 0 6
78932: PPUSH
78933: LD_VAR 0 7
78937: PPUSH
78938: LD_VAR 0 8
78942: PPUSH
78943: LD_VAR 0 9
78947: PPUSH
78948: LD_VAR 0 4
78952: PPUSH
78953: LD_VAR 0 5
78957: PPUSH
78958: CALL 79000 0 6
78962: GO 78995
78964: LD_INT 304
78966: DOUBLE
78967: EQUAL
78968: IFTRUE 78972
78970: GO 78994
78972: POP
// hHackTeleport ( unit , x , y ) ; end ;
78973: LD_VAR 0 2
78977: PPUSH
78978: LD_VAR 0 4
78982: PPUSH
78983: LD_VAR 0 5
78987: PPUSH
78988: CALL 80759 0 3
78992: GO 78995
78994: POP
// end ;
78995: LD_VAR 0 12
78999: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
79000: LD_INT 0
79002: PPUSH
79003: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
79004: LD_VAR 0 1
79008: PUSH
79009: LD_INT 1
79011: LESS
79012: PUSH
79013: LD_VAR 0 1
79017: PUSH
79018: LD_INT 3
79020: GREATER
79021: OR
79022: PUSH
79023: LD_VAR 0 5
79027: PPUSH
79028: LD_VAR 0 6
79032: PPUSH
79033: CALL_OW 428
79037: OR
79038: IFFALSE 79042
// exit ;
79040: GO 79762
// uc_side := your_side ;
79042: LD_ADDR_OWVAR 20
79046: PUSH
79047: LD_OWVAR 2
79051: ST_TO_ADDR
// uc_nation := nation ;
79052: LD_ADDR_OWVAR 21
79056: PUSH
79057: LD_VAR 0 1
79061: ST_TO_ADDR
// bc_level = 1 ;
79062: LD_ADDR_OWVAR 43
79066: PUSH
79067: LD_INT 1
79069: ST_TO_ADDR
// case btype of 1 :
79070: LD_VAR 0 2
79074: PUSH
79075: LD_INT 1
79077: DOUBLE
79078: EQUAL
79079: IFTRUE 79083
79081: GO 79094
79083: POP
// bc_type := b_depot ; 2 :
79084: LD_ADDR_OWVAR 42
79088: PUSH
79089: LD_INT 0
79091: ST_TO_ADDR
79092: GO 79706
79094: LD_INT 2
79096: DOUBLE
79097: EQUAL
79098: IFTRUE 79102
79100: GO 79113
79102: POP
// bc_type := b_warehouse ; 3 :
79103: LD_ADDR_OWVAR 42
79107: PUSH
79108: LD_INT 1
79110: ST_TO_ADDR
79111: GO 79706
79113: LD_INT 3
79115: DOUBLE
79116: EQUAL
79117: IFTRUE 79121
79119: GO 79132
79121: POP
// bc_type := b_lab ; 4 .. 9 :
79122: LD_ADDR_OWVAR 42
79126: PUSH
79127: LD_INT 6
79129: ST_TO_ADDR
79130: GO 79706
79132: LD_INT 4
79134: DOUBLE
79135: GREATEREQUAL
79136: IFFALSE 79144
79138: LD_INT 9
79140: DOUBLE
79141: LESSEQUAL
79142: IFTRUE 79146
79144: GO 79198
79146: POP
// begin bc_type := b_lab_half ;
79147: LD_ADDR_OWVAR 42
79151: PUSH
79152: LD_INT 7
79154: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
79155: LD_ADDR_OWVAR 44
79159: PUSH
79160: LD_INT 10
79162: PUSH
79163: LD_INT 11
79165: PUSH
79166: LD_INT 12
79168: PUSH
79169: LD_INT 15
79171: PUSH
79172: LD_INT 14
79174: PUSH
79175: LD_INT 13
79177: PUSH
79178: EMPTY
79179: LIST
79180: LIST
79181: LIST
79182: LIST
79183: LIST
79184: LIST
79185: PUSH
79186: LD_VAR 0 2
79190: PUSH
79191: LD_INT 3
79193: MINUS
79194: ARRAY
79195: ST_TO_ADDR
// end ; 10 .. 13 :
79196: GO 79706
79198: LD_INT 10
79200: DOUBLE
79201: GREATEREQUAL
79202: IFFALSE 79210
79204: LD_INT 13
79206: DOUBLE
79207: LESSEQUAL
79208: IFTRUE 79212
79210: GO 79289
79212: POP
// begin bc_type := b_lab_full ;
79213: LD_ADDR_OWVAR 42
79217: PUSH
79218: LD_INT 8
79220: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
79221: LD_ADDR_OWVAR 44
79225: PUSH
79226: LD_INT 10
79228: PUSH
79229: LD_INT 12
79231: PUSH
79232: LD_INT 14
79234: PUSH
79235: LD_INT 13
79237: PUSH
79238: EMPTY
79239: LIST
79240: LIST
79241: LIST
79242: LIST
79243: PUSH
79244: LD_VAR 0 2
79248: PUSH
79249: LD_INT 9
79251: MINUS
79252: ARRAY
79253: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
79254: LD_ADDR_OWVAR 45
79258: PUSH
79259: LD_INT 11
79261: PUSH
79262: LD_INT 15
79264: PUSH
79265: LD_INT 12
79267: PUSH
79268: LD_INT 15
79270: PUSH
79271: EMPTY
79272: LIST
79273: LIST
79274: LIST
79275: LIST
79276: PUSH
79277: LD_VAR 0 2
79281: PUSH
79282: LD_INT 9
79284: MINUS
79285: ARRAY
79286: ST_TO_ADDR
// end ; 14 :
79287: GO 79706
79289: LD_INT 14
79291: DOUBLE
79292: EQUAL
79293: IFTRUE 79297
79295: GO 79308
79297: POP
// bc_type := b_workshop ; 15 :
79298: LD_ADDR_OWVAR 42
79302: PUSH
79303: LD_INT 2
79305: ST_TO_ADDR
79306: GO 79706
79308: LD_INT 15
79310: DOUBLE
79311: EQUAL
79312: IFTRUE 79316
79314: GO 79327
79316: POP
// bc_type := b_factory ; 16 :
79317: LD_ADDR_OWVAR 42
79321: PUSH
79322: LD_INT 3
79324: ST_TO_ADDR
79325: GO 79706
79327: LD_INT 16
79329: DOUBLE
79330: EQUAL
79331: IFTRUE 79335
79333: GO 79346
79335: POP
// bc_type := b_ext_gun ; 17 :
79336: LD_ADDR_OWVAR 42
79340: PUSH
79341: LD_INT 17
79343: ST_TO_ADDR
79344: GO 79706
79346: LD_INT 17
79348: DOUBLE
79349: EQUAL
79350: IFTRUE 79354
79352: GO 79382
79354: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
79355: LD_ADDR_OWVAR 42
79359: PUSH
79360: LD_INT 19
79362: PUSH
79363: LD_INT 23
79365: PUSH
79366: LD_INT 19
79368: PUSH
79369: EMPTY
79370: LIST
79371: LIST
79372: LIST
79373: PUSH
79374: LD_VAR 0 1
79378: ARRAY
79379: ST_TO_ADDR
79380: GO 79706
79382: LD_INT 18
79384: DOUBLE
79385: EQUAL
79386: IFTRUE 79390
79388: GO 79401
79390: POP
// bc_type := b_ext_radar ; 19 :
79391: LD_ADDR_OWVAR 42
79395: PUSH
79396: LD_INT 20
79398: ST_TO_ADDR
79399: GO 79706
79401: LD_INT 19
79403: DOUBLE
79404: EQUAL
79405: IFTRUE 79409
79407: GO 79420
79409: POP
// bc_type := b_ext_radio ; 20 :
79410: LD_ADDR_OWVAR 42
79414: PUSH
79415: LD_INT 22
79417: ST_TO_ADDR
79418: GO 79706
79420: LD_INT 20
79422: DOUBLE
79423: EQUAL
79424: IFTRUE 79428
79426: GO 79439
79428: POP
// bc_type := b_ext_siberium ; 21 :
79429: LD_ADDR_OWVAR 42
79433: PUSH
79434: LD_INT 21
79436: ST_TO_ADDR
79437: GO 79706
79439: LD_INT 21
79441: DOUBLE
79442: EQUAL
79443: IFTRUE 79447
79445: GO 79458
79447: POP
// bc_type := b_ext_computer ; 22 :
79448: LD_ADDR_OWVAR 42
79452: PUSH
79453: LD_INT 24
79455: ST_TO_ADDR
79456: GO 79706
79458: LD_INT 22
79460: DOUBLE
79461: EQUAL
79462: IFTRUE 79466
79464: GO 79477
79466: POP
// bc_type := b_ext_track ; 23 :
79467: LD_ADDR_OWVAR 42
79471: PUSH
79472: LD_INT 16
79474: ST_TO_ADDR
79475: GO 79706
79477: LD_INT 23
79479: DOUBLE
79480: EQUAL
79481: IFTRUE 79485
79483: GO 79496
79485: POP
// bc_type := b_ext_laser ; 24 :
79486: LD_ADDR_OWVAR 42
79490: PUSH
79491: LD_INT 25
79493: ST_TO_ADDR
79494: GO 79706
79496: LD_INT 24
79498: DOUBLE
79499: EQUAL
79500: IFTRUE 79504
79502: GO 79515
79504: POP
// bc_type := b_control_tower ; 25 :
79505: LD_ADDR_OWVAR 42
79509: PUSH
79510: LD_INT 36
79512: ST_TO_ADDR
79513: GO 79706
79515: LD_INT 25
79517: DOUBLE
79518: EQUAL
79519: IFTRUE 79523
79521: GO 79534
79523: POP
// bc_type := b_breastwork ; 26 :
79524: LD_ADDR_OWVAR 42
79528: PUSH
79529: LD_INT 31
79531: ST_TO_ADDR
79532: GO 79706
79534: LD_INT 26
79536: DOUBLE
79537: EQUAL
79538: IFTRUE 79542
79540: GO 79553
79542: POP
// bc_type := b_bunker ; 27 :
79543: LD_ADDR_OWVAR 42
79547: PUSH
79548: LD_INT 32
79550: ST_TO_ADDR
79551: GO 79706
79553: LD_INT 27
79555: DOUBLE
79556: EQUAL
79557: IFTRUE 79561
79559: GO 79572
79561: POP
// bc_type := b_turret ; 28 :
79562: LD_ADDR_OWVAR 42
79566: PUSH
79567: LD_INT 33
79569: ST_TO_ADDR
79570: GO 79706
79572: LD_INT 28
79574: DOUBLE
79575: EQUAL
79576: IFTRUE 79580
79578: GO 79591
79580: POP
// bc_type := b_armoury ; 29 :
79581: LD_ADDR_OWVAR 42
79585: PUSH
79586: LD_INT 4
79588: ST_TO_ADDR
79589: GO 79706
79591: LD_INT 29
79593: DOUBLE
79594: EQUAL
79595: IFTRUE 79599
79597: GO 79610
79599: POP
// bc_type := b_barracks ; 30 :
79600: LD_ADDR_OWVAR 42
79604: PUSH
79605: LD_INT 5
79607: ST_TO_ADDR
79608: GO 79706
79610: LD_INT 30
79612: DOUBLE
79613: EQUAL
79614: IFTRUE 79618
79616: GO 79629
79618: POP
// bc_type := b_solar_power ; 31 :
79619: LD_ADDR_OWVAR 42
79623: PUSH
79624: LD_INT 27
79626: ST_TO_ADDR
79627: GO 79706
79629: LD_INT 31
79631: DOUBLE
79632: EQUAL
79633: IFTRUE 79637
79635: GO 79648
79637: POP
// bc_type := b_oil_power ; 32 :
79638: LD_ADDR_OWVAR 42
79642: PUSH
79643: LD_INT 26
79645: ST_TO_ADDR
79646: GO 79706
79648: LD_INT 32
79650: DOUBLE
79651: EQUAL
79652: IFTRUE 79656
79654: GO 79667
79656: POP
// bc_type := b_siberite_power ; 33 :
79657: LD_ADDR_OWVAR 42
79661: PUSH
79662: LD_INT 28
79664: ST_TO_ADDR
79665: GO 79706
79667: LD_INT 33
79669: DOUBLE
79670: EQUAL
79671: IFTRUE 79675
79673: GO 79686
79675: POP
// bc_type := b_oil_mine ; 34 :
79676: LD_ADDR_OWVAR 42
79680: PUSH
79681: LD_INT 29
79683: ST_TO_ADDR
79684: GO 79706
79686: LD_INT 34
79688: DOUBLE
79689: EQUAL
79690: IFTRUE 79694
79692: GO 79705
79694: POP
// bc_type := b_siberite_mine ; end ;
79695: LD_ADDR_OWVAR 42
79699: PUSH
79700: LD_INT 30
79702: ST_TO_ADDR
79703: GO 79706
79705: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
79706: LD_ADDR_VAR 0 8
79710: PUSH
79711: LD_VAR 0 5
79715: PPUSH
79716: LD_VAR 0 6
79720: PPUSH
79721: LD_VAR 0 3
79725: PPUSH
79726: CALL_OW 47
79730: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
79731: LD_OWVAR 42
79735: PUSH
79736: LD_INT 32
79738: PUSH
79739: LD_INT 33
79741: PUSH
79742: EMPTY
79743: LIST
79744: LIST
79745: IN
79746: IFFALSE 79762
// PlaceWeaponTurret ( b , weapon ) ;
79748: LD_VAR 0 8
79752: PPUSH
79753: LD_VAR 0 4
79757: PPUSH
79758: CALL_OW 431
// end ;
79762: LD_VAR 0 7
79766: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79767: LD_INT 0
79769: PPUSH
79770: PPUSH
79771: PPUSH
79772: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79773: LD_ADDR_VAR 0 4
79777: PUSH
79778: LD_INT 22
79780: PUSH
79781: LD_OWVAR 2
79785: PUSH
79786: EMPTY
79787: LIST
79788: LIST
79789: PUSH
79790: LD_INT 2
79792: PUSH
79793: LD_INT 30
79795: PUSH
79796: LD_INT 0
79798: PUSH
79799: EMPTY
79800: LIST
79801: LIST
79802: PUSH
79803: LD_INT 30
79805: PUSH
79806: LD_INT 1
79808: PUSH
79809: EMPTY
79810: LIST
79811: LIST
79812: PUSH
79813: EMPTY
79814: LIST
79815: LIST
79816: LIST
79817: PUSH
79818: EMPTY
79819: LIST
79820: LIST
79821: PPUSH
79822: CALL_OW 69
79826: ST_TO_ADDR
// if not tmp then
79827: LD_VAR 0 4
79831: NOT
79832: IFFALSE 79836
// exit ;
79834: GO 79895
// for i in tmp do
79836: LD_ADDR_VAR 0 2
79840: PUSH
79841: LD_VAR 0 4
79845: PUSH
79846: FOR_IN
79847: IFFALSE 79893
// for j = 1 to 3 do
79849: LD_ADDR_VAR 0 3
79853: PUSH
79854: DOUBLE
79855: LD_INT 1
79857: DEC
79858: ST_TO_ADDR
79859: LD_INT 3
79861: PUSH
79862: FOR_TO
79863: IFFALSE 79889
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
79865: LD_VAR 0 2
79869: PPUSH
79870: CALL_OW 274
79874: PPUSH
79875: LD_VAR 0 3
79879: PPUSH
79880: LD_INT 99999
79882: PPUSH
79883: CALL_OW 277
79887: GO 79862
79889: POP
79890: POP
79891: GO 79846
79893: POP
79894: POP
// end ;
79895: LD_VAR 0 1
79899: RET
// export function hHackSetLevel10 ; var i , j ; begin
79900: LD_INT 0
79902: PPUSH
79903: PPUSH
79904: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79905: LD_ADDR_VAR 0 2
79909: PUSH
79910: LD_INT 21
79912: PUSH
79913: LD_INT 1
79915: PUSH
79916: EMPTY
79917: LIST
79918: LIST
79919: PPUSH
79920: CALL_OW 69
79924: PUSH
79925: FOR_IN
79926: IFFALSE 79978
// if IsSelected ( i ) then
79928: LD_VAR 0 2
79932: PPUSH
79933: CALL_OW 306
79937: IFFALSE 79976
// begin for j := 1 to 4 do
79939: LD_ADDR_VAR 0 3
79943: PUSH
79944: DOUBLE
79945: LD_INT 1
79947: DEC
79948: ST_TO_ADDR
79949: LD_INT 4
79951: PUSH
79952: FOR_TO
79953: IFFALSE 79974
// SetSkill ( i , j , 10 ) ;
79955: LD_VAR 0 2
79959: PPUSH
79960: LD_VAR 0 3
79964: PPUSH
79965: LD_INT 10
79967: PPUSH
79968: CALL_OW 237
79972: GO 79952
79974: POP
79975: POP
// end ;
79976: GO 79925
79978: POP
79979: POP
// end ;
79980: LD_VAR 0 1
79984: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
79985: LD_INT 0
79987: PPUSH
79988: PPUSH
79989: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
79990: LD_ADDR_VAR 0 2
79994: PUSH
79995: LD_INT 22
79997: PUSH
79998: LD_OWVAR 2
80002: PUSH
80003: EMPTY
80004: LIST
80005: LIST
80006: PUSH
80007: LD_INT 21
80009: PUSH
80010: LD_INT 1
80012: PUSH
80013: EMPTY
80014: LIST
80015: LIST
80016: PUSH
80017: EMPTY
80018: LIST
80019: LIST
80020: PPUSH
80021: CALL_OW 69
80025: PUSH
80026: FOR_IN
80027: IFFALSE 80068
// begin for j := 1 to 4 do
80029: LD_ADDR_VAR 0 3
80033: PUSH
80034: DOUBLE
80035: LD_INT 1
80037: DEC
80038: ST_TO_ADDR
80039: LD_INT 4
80041: PUSH
80042: FOR_TO
80043: IFFALSE 80064
// SetSkill ( i , j , 10 ) ;
80045: LD_VAR 0 2
80049: PPUSH
80050: LD_VAR 0 3
80054: PPUSH
80055: LD_INT 10
80057: PPUSH
80058: CALL_OW 237
80062: GO 80042
80064: POP
80065: POP
// end ;
80066: GO 80026
80068: POP
80069: POP
// end ;
80070: LD_VAR 0 1
80074: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
80075: LD_INT 0
80077: PPUSH
// uc_side := your_side ;
80078: LD_ADDR_OWVAR 20
80082: PUSH
80083: LD_OWVAR 2
80087: ST_TO_ADDR
// uc_nation := nation ;
80088: LD_ADDR_OWVAR 21
80092: PUSH
80093: LD_VAR 0 1
80097: ST_TO_ADDR
// InitHc ;
80098: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
80102: LD_INT 0
80104: PPUSH
80105: LD_VAR 0 2
80109: PPUSH
80110: LD_VAR 0 3
80114: PPUSH
80115: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
80119: LD_VAR 0 4
80123: PPUSH
80124: LD_VAR 0 5
80128: PPUSH
80129: CALL_OW 428
80133: PUSH
80134: LD_INT 0
80136: EQUAL
80137: IFFALSE 80161
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
80139: CALL_OW 44
80143: PPUSH
80144: LD_VAR 0 4
80148: PPUSH
80149: LD_VAR 0 5
80153: PPUSH
80154: LD_INT 1
80156: PPUSH
80157: CALL_OW 48
// end ;
80161: LD_VAR 0 6
80165: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
80166: LD_INT 0
80168: PPUSH
80169: PPUSH
// uc_side := your_side ;
80170: LD_ADDR_OWVAR 20
80174: PUSH
80175: LD_OWVAR 2
80179: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
80180: LD_VAR 0 1
80184: PUSH
80185: LD_INT 1
80187: PUSH
80188: LD_INT 2
80190: PUSH
80191: LD_INT 3
80193: PUSH
80194: LD_INT 4
80196: PUSH
80197: LD_INT 5
80199: PUSH
80200: EMPTY
80201: LIST
80202: LIST
80203: LIST
80204: LIST
80205: LIST
80206: IN
80207: IFFALSE 80219
// uc_nation := nation_american else
80209: LD_ADDR_OWVAR 21
80213: PUSH
80214: LD_INT 1
80216: ST_TO_ADDR
80217: GO 80262
// if chassis in [ 11 , 12 , 13 , 14 ] then
80219: LD_VAR 0 1
80223: PUSH
80224: LD_INT 11
80226: PUSH
80227: LD_INT 12
80229: PUSH
80230: LD_INT 13
80232: PUSH
80233: LD_INT 14
80235: PUSH
80236: EMPTY
80237: LIST
80238: LIST
80239: LIST
80240: LIST
80241: IN
80242: IFFALSE 80254
// uc_nation := nation_arabian else
80244: LD_ADDR_OWVAR 21
80248: PUSH
80249: LD_INT 2
80251: ST_TO_ADDR
80252: GO 80262
// uc_nation := nation_russian ;
80254: LD_ADDR_OWVAR 21
80258: PUSH
80259: LD_INT 3
80261: ST_TO_ADDR
// vc_chassis := chassis ;
80262: LD_ADDR_OWVAR 37
80266: PUSH
80267: LD_VAR 0 1
80271: ST_TO_ADDR
// vc_engine := engine ;
80272: LD_ADDR_OWVAR 39
80276: PUSH
80277: LD_VAR 0 2
80281: ST_TO_ADDR
// vc_control := control ;
80282: LD_ADDR_OWVAR 38
80286: PUSH
80287: LD_VAR 0 3
80291: ST_TO_ADDR
// vc_weapon := weapon ;
80292: LD_ADDR_OWVAR 40
80296: PUSH
80297: LD_VAR 0 4
80301: ST_TO_ADDR
// un := CreateVehicle ;
80302: LD_ADDR_VAR 0 8
80306: PUSH
80307: CALL_OW 45
80311: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
80312: LD_VAR 0 8
80316: PPUSH
80317: LD_INT 0
80319: PPUSH
80320: LD_INT 5
80322: PPUSH
80323: CALL_OW 12
80327: PPUSH
80328: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
80332: LD_VAR 0 8
80336: PPUSH
80337: LD_VAR 0 5
80341: PPUSH
80342: LD_VAR 0 6
80346: PPUSH
80347: LD_INT 1
80349: PPUSH
80350: CALL_OW 48
// end ;
80354: LD_VAR 0 7
80358: RET
// export hInvincible ; every 1 do
80359: GO 80361
80361: DISABLE
// hInvincible := [ ] ;
80362: LD_ADDR_EXP 116
80366: PUSH
80367: EMPTY
80368: ST_TO_ADDR
80369: END
// every 10 do var i ;
80370: GO 80372
80372: DISABLE
80373: LD_INT 0
80375: PPUSH
// begin enable ;
80376: ENABLE
// if not hInvincible then
80377: LD_EXP 116
80381: NOT
80382: IFFALSE 80386
// exit ;
80384: GO 80430
// for i in hInvincible do
80386: LD_ADDR_VAR 0 1
80390: PUSH
80391: LD_EXP 116
80395: PUSH
80396: FOR_IN
80397: IFFALSE 80428
// if GetLives ( i ) < 1000 then
80399: LD_VAR 0 1
80403: PPUSH
80404: CALL_OW 256
80408: PUSH
80409: LD_INT 1000
80411: LESS
80412: IFFALSE 80426
// SetLives ( i , 1000 ) ;
80414: LD_VAR 0 1
80418: PPUSH
80419: LD_INT 1000
80421: PPUSH
80422: CALL_OW 234
80426: GO 80396
80428: POP
80429: POP
// end ;
80430: PPOPN 1
80432: END
// export function hHackInvincible ; var i ; begin
80433: LD_INT 0
80435: PPUSH
80436: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
80437: LD_ADDR_VAR 0 2
80441: PUSH
80442: LD_INT 2
80444: PUSH
80445: LD_INT 21
80447: PUSH
80448: LD_INT 1
80450: PUSH
80451: EMPTY
80452: LIST
80453: LIST
80454: PUSH
80455: LD_INT 21
80457: PUSH
80458: LD_INT 2
80460: PUSH
80461: EMPTY
80462: LIST
80463: LIST
80464: PUSH
80465: EMPTY
80466: LIST
80467: LIST
80468: LIST
80469: PPUSH
80470: CALL_OW 69
80474: PUSH
80475: FOR_IN
80476: IFFALSE 80537
// if IsSelected ( i ) then
80478: LD_VAR 0 2
80482: PPUSH
80483: CALL_OW 306
80487: IFFALSE 80535
// begin if i in hInvincible then
80489: LD_VAR 0 2
80493: PUSH
80494: LD_EXP 116
80498: IN
80499: IFFALSE 80519
// hInvincible := hInvincible diff i else
80501: LD_ADDR_EXP 116
80505: PUSH
80506: LD_EXP 116
80510: PUSH
80511: LD_VAR 0 2
80515: DIFF
80516: ST_TO_ADDR
80517: GO 80535
// hInvincible := hInvincible union i ;
80519: LD_ADDR_EXP 116
80523: PUSH
80524: LD_EXP 116
80528: PUSH
80529: LD_VAR 0 2
80533: UNION
80534: ST_TO_ADDR
// end ;
80535: GO 80475
80537: POP
80538: POP
// end ;
80539: LD_VAR 0 1
80543: RET
// export function hHackInvisible ; var i , j ; begin
80544: LD_INT 0
80546: PPUSH
80547: PPUSH
80548: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80549: LD_ADDR_VAR 0 2
80553: PUSH
80554: LD_INT 21
80556: PUSH
80557: LD_INT 1
80559: PUSH
80560: EMPTY
80561: LIST
80562: LIST
80563: PPUSH
80564: CALL_OW 69
80568: PUSH
80569: FOR_IN
80570: IFFALSE 80594
// if IsSelected ( i ) then
80572: LD_VAR 0 2
80576: PPUSH
80577: CALL_OW 306
80581: IFFALSE 80592
// ComForceInvisible ( i ) ;
80583: LD_VAR 0 2
80587: PPUSH
80588: CALL_OW 496
80592: GO 80569
80594: POP
80595: POP
// end ;
80596: LD_VAR 0 1
80600: RET
// export function hHackChangeYourSide ; begin
80601: LD_INT 0
80603: PPUSH
// if your_side = 8 then
80604: LD_OWVAR 2
80608: PUSH
80609: LD_INT 8
80611: EQUAL
80612: IFFALSE 80624
// your_side := 0 else
80614: LD_ADDR_OWVAR 2
80618: PUSH
80619: LD_INT 0
80621: ST_TO_ADDR
80622: GO 80638
// your_side := your_side + 1 ;
80624: LD_ADDR_OWVAR 2
80628: PUSH
80629: LD_OWVAR 2
80633: PUSH
80634: LD_INT 1
80636: PLUS
80637: ST_TO_ADDR
// end ;
80638: LD_VAR 0 1
80642: RET
// export function hHackChangeUnitSide ; var i , j ; begin
80643: LD_INT 0
80645: PPUSH
80646: PPUSH
80647: PPUSH
// for i in all_units do
80648: LD_ADDR_VAR 0 2
80652: PUSH
80653: LD_OWVAR 3
80657: PUSH
80658: FOR_IN
80659: IFFALSE 80737
// if IsSelected ( i ) then
80661: LD_VAR 0 2
80665: PPUSH
80666: CALL_OW 306
80670: IFFALSE 80735
// begin j := GetSide ( i ) ;
80672: LD_ADDR_VAR 0 3
80676: PUSH
80677: LD_VAR 0 2
80681: PPUSH
80682: CALL_OW 255
80686: ST_TO_ADDR
// if j = 8 then
80687: LD_VAR 0 3
80691: PUSH
80692: LD_INT 8
80694: EQUAL
80695: IFFALSE 80707
// j := 0 else
80697: LD_ADDR_VAR 0 3
80701: PUSH
80702: LD_INT 0
80704: ST_TO_ADDR
80705: GO 80721
// j := j + 1 ;
80707: LD_ADDR_VAR 0 3
80711: PUSH
80712: LD_VAR 0 3
80716: PUSH
80717: LD_INT 1
80719: PLUS
80720: ST_TO_ADDR
// SetSide ( i , j ) ;
80721: LD_VAR 0 2
80725: PPUSH
80726: LD_VAR 0 3
80730: PPUSH
80731: CALL_OW 235
// end ;
80735: GO 80658
80737: POP
80738: POP
// end ;
80739: LD_VAR 0 1
80743: RET
// export function hHackFog ; begin
80744: LD_INT 0
80746: PPUSH
// FogOff ( true ) ;
80747: LD_INT 1
80749: PPUSH
80750: CALL_OW 344
// end ;
80754: LD_VAR 0 1
80758: RET
// export function hHackTeleport ( unit , x , y ) ; begin
80759: LD_INT 0
80761: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
80762: LD_VAR 0 1
80766: PPUSH
80767: LD_VAR 0 2
80771: PPUSH
80772: LD_VAR 0 3
80776: PPUSH
80777: LD_INT 1
80779: PPUSH
80780: LD_INT 1
80782: PPUSH
80783: CALL_OW 483
// CenterOnXY ( x , y ) ;
80787: LD_VAR 0 2
80791: PPUSH
80792: LD_VAR 0 3
80796: PPUSH
80797: CALL_OW 84
// end ;
80801: LD_VAR 0 4
80805: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
80806: LD_INT 0
80808: PPUSH
80809: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
80810: LD_VAR 0 1
80814: NOT
80815: PUSH
80816: LD_VAR 0 2
80820: PPUSH
80821: LD_VAR 0 3
80825: PPUSH
80826: CALL_OW 488
80830: NOT
80831: OR
80832: PUSH
80833: LD_VAR 0 1
80837: PPUSH
80838: CALL_OW 266
80842: PUSH
80843: LD_INT 3
80845: NONEQUAL
80846: PUSH
80847: LD_VAR 0 1
80851: PPUSH
80852: CALL_OW 247
80856: PUSH
80857: LD_INT 1
80859: EQUAL
80860: NOT
80861: AND
80862: OR
80863: IFFALSE 80867
// exit ;
80865: GO 81016
// if GetType ( factory ) = unit_human then
80867: LD_VAR 0 1
80871: PPUSH
80872: CALL_OW 247
80876: PUSH
80877: LD_INT 1
80879: EQUAL
80880: IFFALSE 80897
// factory := IsInUnit ( factory ) ;
80882: LD_ADDR_VAR 0 1
80886: PUSH
80887: LD_VAR 0 1
80891: PPUSH
80892: CALL_OW 310
80896: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
80897: LD_VAR 0 1
80901: PPUSH
80902: CALL_OW 266
80906: PUSH
80907: LD_INT 3
80909: NONEQUAL
80910: IFFALSE 80914
// exit ;
80912: GO 81016
// if HexInfo ( x , y ) = factory then
80914: LD_VAR 0 2
80918: PPUSH
80919: LD_VAR 0 3
80923: PPUSH
80924: CALL_OW 428
80928: PUSH
80929: LD_VAR 0 1
80933: EQUAL
80934: IFFALSE 80961
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
80936: LD_ADDR_EXP 117
80940: PUSH
80941: LD_EXP 117
80945: PPUSH
80946: LD_VAR 0 1
80950: PPUSH
80951: LD_INT 0
80953: PPUSH
80954: CALL_OW 1
80958: ST_TO_ADDR
80959: GO 81012
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
80961: LD_ADDR_EXP 117
80965: PUSH
80966: LD_EXP 117
80970: PPUSH
80971: LD_VAR 0 1
80975: PPUSH
80976: LD_VAR 0 1
80980: PPUSH
80981: CALL_OW 255
80985: PUSH
80986: LD_VAR 0 1
80990: PUSH
80991: LD_VAR 0 2
80995: PUSH
80996: LD_VAR 0 3
81000: PUSH
81001: EMPTY
81002: LIST
81003: LIST
81004: LIST
81005: LIST
81006: PPUSH
81007: CALL_OW 1
81011: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81012: CALL 81021 0 0
// end ;
81016: LD_VAR 0 4
81020: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
81021: LD_INT 0
81023: PPUSH
81024: PPUSH
81025: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
81026: LD_STRING resetFactoryWaypoint();
81028: PPUSH
81029: CALL_OW 559
// if factoryWaypoints then
81033: LD_EXP 117
81037: IFFALSE 81163
// begin list := PrepareArray ( factoryWaypoints ) ;
81039: LD_ADDR_VAR 0 3
81043: PUSH
81044: LD_EXP 117
81048: PPUSH
81049: CALL 66417 0 1
81053: ST_TO_ADDR
// for i := 1 to list do
81054: LD_ADDR_VAR 0 2
81058: PUSH
81059: DOUBLE
81060: LD_INT 1
81062: DEC
81063: ST_TO_ADDR
81064: LD_VAR 0 3
81068: PUSH
81069: FOR_TO
81070: IFFALSE 81161
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81072: LD_STRING setFactoryWaypointXY(
81074: PUSH
81075: LD_VAR 0 3
81079: PUSH
81080: LD_VAR 0 2
81084: ARRAY
81085: PUSH
81086: LD_INT 1
81088: ARRAY
81089: STR
81090: PUSH
81091: LD_STRING ,
81093: STR
81094: PUSH
81095: LD_VAR 0 3
81099: PUSH
81100: LD_VAR 0 2
81104: ARRAY
81105: PUSH
81106: LD_INT 2
81108: ARRAY
81109: STR
81110: PUSH
81111: LD_STRING ,
81113: STR
81114: PUSH
81115: LD_VAR 0 3
81119: PUSH
81120: LD_VAR 0 2
81124: ARRAY
81125: PUSH
81126: LD_INT 3
81128: ARRAY
81129: STR
81130: PUSH
81131: LD_STRING ,
81133: STR
81134: PUSH
81135: LD_VAR 0 3
81139: PUSH
81140: LD_VAR 0 2
81144: ARRAY
81145: PUSH
81146: LD_INT 4
81148: ARRAY
81149: STR
81150: PUSH
81151: LD_STRING )
81153: STR
81154: PPUSH
81155: CALL_OW 559
81159: GO 81069
81161: POP
81162: POP
// end ; end ;
81163: LD_VAR 0 1
81167: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
81168: LD_INT 0
81170: PPUSH
// if HexInfo ( x , y ) = warehouse then
81171: LD_VAR 0 2
81175: PPUSH
81176: LD_VAR 0 3
81180: PPUSH
81181: CALL_OW 428
81185: PUSH
81186: LD_VAR 0 1
81190: EQUAL
81191: IFFALSE 81218
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
81193: LD_ADDR_EXP 118
81197: PUSH
81198: LD_EXP 118
81202: PPUSH
81203: LD_VAR 0 1
81207: PPUSH
81208: LD_INT 0
81210: PPUSH
81211: CALL_OW 1
81215: ST_TO_ADDR
81216: GO 81269
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
81218: LD_ADDR_EXP 118
81222: PUSH
81223: LD_EXP 118
81227: PPUSH
81228: LD_VAR 0 1
81232: PPUSH
81233: LD_VAR 0 1
81237: PPUSH
81238: CALL_OW 255
81242: PUSH
81243: LD_VAR 0 1
81247: PUSH
81248: LD_VAR 0 2
81252: PUSH
81253: LD_VAR 0 3
81257: PUSH
81258: EMPTY
81259: LIST
81260: LIST
81261: LIST
81262: LIST
81263: PPUSH
81264: CALL_OW 1
81268: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
81269: CALL 81278 0 0
// end ;
81273: LD_VAR 0 4
81277: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
81278: LD_INT 0
81280: PPUSH
81281: PPUSH
81282: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
81283: LD_STRING resetWarehouseGatheringPoints();
81285: PPUSH
81286: CALL_OW 559
// if warehouseGatheringPoints then
81290: LD_EXP 118
81294: IFFALSE 81420
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
81296: LD_ADDR_VAR 0 3
81300: PUSH
81301: LD_EXP 118
81305: PPUSH
81306: CALL 66417 0 1
81310: ST_TO_ADDR
// for i := 1 to list do
81311: LD_ADDR_VAR 0 2
81315: PUSH
81316: DOUBLE
81317: LD_INT 1
81319: DEC
81320: ST_TO_ADDR
81321: LD_VAR 0 3
81325: PUSH
81326: FOR_TO
81327: IFFALSE 81418
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81329: LD_STRING setWarehouseGatheringPointXY(
81331: PUSH
81332: LD_VAR 0 3
81336: PUSH
81337: LD_VAR 0 2
81341: ARRAY
81342: PUSH
81343: LD_INT 1
81345: ARRAY
81346: STR
81347: PUSH
81348: LD_STRING ,
81350: STR
81351: PUSH
81352: LD_VAR 0 3
81356: PUSH
81357: LD_VAR 0 2
81361: ARRAY
81362: PUSH
81363: LD_INT 2
81365: ARRAY
81366: STR
81367: PUSH
81368: LD_STRING ,
81370: STR
81371: PUSH
81372: LD_VAR 0 3
81376: PUSH
81377: LD_VAR 0 2
81381: ARRAY
81382: PUSH
81383: LD_INT 3
81385: ARRAY
81386: STR
81387: PUSH
81388: LD_STRING ,
81390: STR
81391: PUSH
81392: LD_VAR 0 3
81396: PUSH
81397: LD_VAR 0 2
81401: ARRAY
81402: PUSH
81403: LD_INT 4
81405: ARRAY
81406: STR
81407: PUSH
81408: LD_STRING )
81410: STR
81411: PPUSH
81412: CALL_OW 559
81416: GO 81326
81418: POP
81419: POP
// end ; end ;
81420: LD_VAR 0 1
81424: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
81425: LD_EXP 118
81429: IFFALSE 82114
81431: GO 81433
81433: DISABLE
81434: LD_INT 0
81436: PPUSH
81437: PPUSH
81438: PPUSH
81439: PPUSH
81440: PPUSH
81441: PPUSH
81442: PPUSH
81443: PPUSH
81444: PPUSH
// begin enable ;
81445: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
81446: LD_ADDR_VAR 0 3
81450: PUSH
81451: LD_EXP 118
81455: PPUSH
81456: CALL 66417 0 1
81460: ST_TO_ADDR
// if not list then
81461: LD_VAR 0 3
81465: NOT
81466: IFFALSE 81470
// exit ;
81468: GO 82114
// for i := 1 to list do
81470: LD_ADDR_VAR 0 1
81474: PUSH
81475: DOUBLE
81476: LD_INT 1
81478: DEC
81479: ST_TO_ADDR
81480: LD_VAR 0 3
81484: PUSH
81485: FOR_TO
81486: IFFALSE 82112
// begin depot := list [ i ] [ 2 ] ;
81488: LD_ADDR_VAR 0 8
81492: PUSH
81493: LD_VAR 0 3
81497: PUSH
81498: LD_VAR 0 1
81502: ARRAY
81503: PUSH
81504: LD_INT 2
81506: ARRAY
81507: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
81508: LD_ADDR_VAR 0 5
81512: PUSH
81513: LD_VAR 0 3
81517: PUSH
81518: LD_VAR 0 1
81522: ARRAY
81523: PUSH
81524: LD_INT 1
81526: ARRAY
81527: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
81528: LD_VAR 0 8
81532: PPUSH
81533: CALL_OW 301
81537: PUSH
81538: LD_VAR 0 5
81542: PUSH
81543: LD_VAR 0 8
81547: PPUSH
81548: CALL_OW 255
81552: NONEQUAL
81553: OR
81554: IFFALSE 81583
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
81556: LD_ADDR_EXP 118
81560: PUSH
81561: LD_EXP 118
81565: PPUSH
81566: LD_VAR 0 8
81570: PPUSH
81571: LD_INT 0
81573: PPUSH
81574: CALL_OW 1
81578: ST_TO_ADDR
// exit ;
81579: POP
81580: POP
81581: GO 82114
// end ; x := list [ i ] [ 3 ] ;
81583: LD_ADDR_VAR 0 6
81587: PUSH
81588: LD_VAR 0 3
81592: PUSH
81593: LD_VAR 0 1
81597: ARRAY
81598: PUSH
81599: LD_INT 3
81601: ARRAY
81602: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
81603: LD_ADDR_VAR 0 7
81607: PUSH
81608: LD_VAR 0 3
81612: PUSH
81613: LD_VAR 0 1
81617: ARRAY
81618: PUSH
81619: LD_INT 4
81621: ARRAY
81622: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
81623: LD_ADDR_VAR 0 9
81627: PUSH
81628: LD_VAR 0 6
81632: PPUSH
81633: LD_VAR 0 7
81637: PPUSH
81638: LD_INT 16
81640: PPUSH
81641: CALL 65005 0 3
81645: ST_TO_ADDR
// if not cratesNearbyPoint then
81646: LD_VAR 0 9
81650: NOT
81651: IFFALSE 81657
// exit ;
81653: POP
81654: POP
81655: GO 82114
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
81657: LD_ADDR_VAR 0 4
81661: PUSH
81662: LD_INT 22
81664: PUSH
81665: LD_VAR 0 5
81669: PUSH
81670: EMPTY
81671: LIST
81672: LIST
81673: PUSH
81674: LD_INT 3
81676: PUSH
81677: LD_INT 60
81679: PUSH
81680: EMPTY
81681: LIST
81682: PUSH
81683: EMPTY
81684: LIST
81685: LIST
81686: PUSH
81687: LD_INT 91
81689: PUSH
81690: LD_VAR 0 8
81694: PUSH
81695: LD_INT 6
81697: PUSH
81698: EMPTY
81699: LIST
81700: LIST
81701: LIST
81702: PUSH
81703: LD_INT 2
81705: PUSH
81706: LD_INT 25
81708: PUSH
81709: LD_INT 2
81711: PUSH
81712: EMPTY
81713: LIST
81714: LIST
81715: PUSH
81716: LD_INT 25
81718: PUSH
81719: LD_INT 16
81721: PUSH
81722: EMPTY
81723: LIST
81724: LIST
81725: PUSH
81726: EMPTY
81727: LIST
81728: LIST
81729: LIST
81730: PUSH
81731: EMPTY
81732: LIST
81733: LIST
81734: LIST
81735: LIST
81736: PPUSH
81737: CALL_OW 69
81741: PUSH
81742: LD_VAR 0 8
81746: PPUSH
81747: CALL_OW 313
81751: PPUSH
81752: LD_INT 3
81754: PUSH
81755: LD_INT 60
81757: PUSH
81758: EMPTY
81759: LIST
81760: PUSH
81761: EMPTY
81762: LIST
81763: LIST
81764: PUSH
81765: LD_INT 2
81767: PUSH
81768: LD_INT 25
81770: PUSH
81771: LD_INT 2
81773: PUSH
81774: EMPTY
81775: LIST
81776: LIST
81777: PUSH
81778: LD_INT 25
81780: PUSH
81781: LD_INT 16
81783: PUSH
81784: EMPTY
81785: LIST
81786: LIST
81787: PUSH
81788: EMPTY
81789: LIST
81790: LIST
81791: LIST
81792: PUSH
81793: EMPTY
81794: LIST
81795: LIST
81796: PPUSH
81797: CALL_OW 72
81801: UNION
81802: ST_TO_ADDR
// if tmp then
81803: LD_VAR 0 4
81807: IFFALSE 81887
// begin tmp := ShrinkArray ( tmp , 3 ) ;
81809: LD_ADDR_VAR 0 4
81813: PUSH
81814: LD_VAR 0 4
81818: PPUSH
81819: LD_INT 3
81821: PPUSH
81822: CALL 62974 0 2
81826: ST_TO_ADDR
// for j in tmp do
81827: LD_ADDR_VAR 0 2
81831: PUSH
81832: LD_VAR 0 4
81836: PUSH
81837: FOR_IN
81838: IFFALSE 81881
// begin if IsInUnit ( j ) then
81840: LD_VAR 0 2
81844: PPUSH
81845: CALL_OW 310
81849: IFFALSE 81860
// ComExit ( j ) ;
81851: LD_VAR 0 2
81855: PPUSH
81856: CALL 63057 0 1
// AddComCollect ( j , x , y ) ;
81860: LD_VAR 0 2
81864: PPUSH
81865: LD_VAR 0 6
81869: PPUSH
81870: LD_VAR 0 7
81874: PPUSH
81875: CALL_OW 177
// end ;
81879: GO 81837
81881: POP
81882: POP
// exit ;
81883: POP
81884: POP
81885: GO 82114
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
81887: LD_ADDR_VAR 0 4
81891: PUSH
81892: LD_INT 22
81894: PUSH
81895: LD_VAR 0 5
81899: PUSH
81900: EMPTY
81901: LIST
81902: LIST
81903: PUSH
81904: LD_INT 91
81906: PUSH
81907: LD_VAR 0 8
81911: PUSH
81912: LD_INT 8
81914: PUSH
81915: EMPTY
81916: LIST
81917: LIST
81918: LIST
81919: PUSH
81920: LD_INT 2
81922: PUSH
81923: LD_INT 34
81925: PUSH
81926: LD_INT 12
81928: PUSH
81929: EMPTY
81930: LIST
81931: LIST
81932: PUSH
81933: LD_INT 34
81935: PUSH
81936: LD_INT 51
81938: PUSH
81939: EMPTY
81940: LIST
81941: LIST
81942: PUSH
81943: LD_INT 34
81945: PUSH
81946: LD_INT 32
81948: PUSH
81949: EMPTY
81950: LIST
81951: LIST
81952: PUSH
81953: LD_INT 34
81955: PUSH
81956: LD_INT 89
81958: PUSH
81959: EMPTY
81960: LIST
81961: LIST
81962: PUSH
81963: EMPTY
81964: LIST
81965: LIST
81966: LIST
81967: LIST
81968: LIST
81969: PUSH
81970: EMPTY
81971: LIST
81972: LIST
81973: LIST
81974: PPUSH
81975: CALL_OW 69
81979: ST_TO_ADDR
// if tmp then
81980: LD_VAR 0 4
81984: IFFALSE 82110
// begin for j in tmp do
81986: LD_ADDR_VAR 0 2
81990: PUSH
81991: LD_VAR 0 4
81995: PUSH
81996: FOR_IN
81997: IFFALSE 82108
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
81999: LD_VAR 0 2
82003: PPUSH
82004: CALL_OW 262
82008: PUSH
82009: LD_INT 3
82011: EQUAL
82012: PUSH
82013: LD_VAR 0 2
82017: PPUSH
82018: CALL_OW 261
82022: PUSH
82023: LD_INT 20
82025: GREATER
82026: OR
82027: PUSH
82028: LD_VAR 0 2
82032: PPUSH
82033: CALL_OW 314
82037: NOT
82038: AND
82039: PUSH
82040: LD_VAR 0 2
82044: PPUSH
82045: CALL_OW 263
82049: PUSH
82050: LD_INT 1
82052: NONEQUAL
82053: PUSH
82054: LD_VAR 0 2
82058: PPUSH
82059: CALL_OW 311
82063: OR
82064: AND
82065: IFFALSE 82106
// begin ComCollect ( j , x , y ) ;
82067: LD_VAR 0 2
82071: PPUSH
82072: LD_VAR 0 6
82076: PPUSH
82077: LD_VAR 0 7
82081: PPUSH
82082: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
82086: LD_VAR 0 2
82090: PPUSH
82091: LD_VAR 0 8
82095: PPUSH
82096: CALL_OW 172
// exit ;
82100: POP
82101: POP
82102: POP
82103: POP
82104: GO 82114
// end ;
82106: GO 81996
82108: POP
82109: POP
// end ; end ;
82110: GO 81485
82112: POP
82113: POP
// end ; end_of_file
82114: PPOPN 9
82116: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82117: LD_VAR 0 1
82121: PUSH
82122: LD_INT 200
82124: DOUBLE
82125: GREATEREQUAL
82126: IFFALSE 82134
82128: LD_INT 299
82130: DOUBLE
82131: LESSEQUAL
82132: IFTRUE 82136
82134: GO 82168
82136: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82137: LD_VAR 0 1
82141: PPUSH
82142: LD_VAR 0 2
82146: PPUSH
82147: LD_VAR 0 3
82151: PPUSH
82152: LD_VAR 0 4
82156: PPUSH
82157: LD_VAR 0 5
82161: PPUSH
82162: CALL 82656 0 5
82166: GO 82245
82168: LD_INT 300
82170: DOUBLE
82171: GREATEREQUAL
82172: IFFALSE 82180
82174: LD_INT 399
82176: DOUBLE
82177: LESSEQUAL
82178: IFTRUE 82182
82180: GO 82244
82182: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82183: LD_VAR 0 1
82187: PPUSH
82188: LD_VAR 0 2
82192: PPUSH
82193: LD_VAR 0 3
82197: PPUSH
82198: LD_VAR 0 4
82202: PPUSH
82203: LD_VAR 0 5
82207: PPUSH
82208: LD_VAR 0 6
82212: PPUSH
82213: LD_VAR 0 7
82217: PPUSH
82218: LD_VAR 0 8
82222: PPUSH
82223: LD_VAR 0 9
82227: PPUSH
82228: LD_VAR 0 10
82232: PPUSH
82233: LD_VAR 0 11
82237: PPUSH
82238: CALL 78826 0 11
82242: GO 82245
82244: POP
// end ;
82245: PPOPN 11
82247: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82248: LD_VAR 0 1
82252: PPUSH
82253: LD_VAR 0 2
82257: PPUSH
82258: LD_VAR 0 3
82262: PPUSH
82263: LD_VAR 0 4
82267: PPUSH
82268: LD_VAR 0 5
82272: PPUSH
82273: CALL 82392 0 5
// end ; end_of_file
82277: PPOPN 5
82279: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
82280: LD_INT 0
82282: PPUSH
82283: PPUSH
82284: PPUSH
82285: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
82286: LD_VAR 0 1
82290: PPUSH
82291: CALL_OW 264
82295: PUSH
82296: LD_INT 91
82298: EQUAL
82299: IFFALSE 82371
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82301: LD_INT 68
82303: PPUSH
82304: LD_VAR 0 1
82308: PPUSH
82309: CALL_OW 255
82313: PPUSH
82314: CALL_OW 321
82318: PUSH
82319: LD_INT 2
82321: EQUAL
82322: IFFALSE 82334
// eff := 70 else
82324: LD_ADDR_VAR 0 4
82328: PUSH
82329: LD_INT 70
82331: ST_TO_ADDR
82332: GO 82342
// eff := 30 ;
82334: LD_ADDR_VAR 0 4
82338: PUSH
82339: LD_INT 30
82341: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
82342: LD_VAR 0 1
82346: PPUSH
82347: CALL_OW 250
82351: PPUSH
82352: LD_VAR 0 1
82356: PPUSH
82357: CALL_OW 251
82361: PPUSH
82362: LD_VAR 0 4
82366: PPUSH
82367: CALL_OW 495
// end ; end ;
82371: LD_VAR 0 2
82375: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
82376: LD_INT 0
82378: PPUSH
// end ;
82379: LD_VAR 0 4
82383: RET
// export function SOS_Command ( cmd ) ; begin
82384: LD_INT 0
82386: PPUSH
// end ;
82387: LD_VAR 0 2
82391: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
82392: LD_INT 0
82394: PPUSH
// end ;
82395: LD_VAR 0 6
82399: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
82400: LD_INT 0
82402: PPUSH
82403: PPUSH
// if not vehicle or not factory then
82404: LD_VAR 0 1
82408: NOT
82409: PUSH
82410: LD_VAR 0 2
82414: NOT
82415: OR
82416: IFFALSE 82420
// exit ;
82418: GO 82651
// if factoryWaypoints >= factory then
82420: LD_EXP 117
82424: PUSH
82425: LD_VAR 0 2
82429: GREATEREQUAL
82430: IFFALSE 82651
// if factoryWaypoints [ factory ] then
82432: LD_EXP 117
82436: PUSH
82437: LD_VAR 0 2
82441: ARRAY
82442: IFFALSE 82651
// begin if GetControl ( vehicle ) = control_manual then
82444: LD_VAR 0 1
82448: PPUSH
82449: CALL_OW 263
82453: PUSH
82454: LD_INT 1
82456: EQUAL
82457: IFFALSE 82538
// begin driver := IsDrivenBy ( vehicle ) ;
82459: LD_ADDR_VAR 0 4
82463: PUSH
82464: LD_VAR 0 1
82468: PPUSH
82469: CALL_OW 311
82473: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
82474: LD_VAR 0 4
82478: PPUSH
82479: LD_EXP 117
82483: PUSH
82484: LD_VAR 0 2
82488: ARRAY
82489: PUSH
82490: LD_INT 3
82492: ARRAY
82493: PPUSH
82494: LD_EXP 117
82498: PUSH
82499: LD_VAR 0 2
82503: ARRAY
82504: PUSH
82505: LD_INT 4
82507: ARRAY
82508: PPUSH
82509: CALL_OW 171
// AddComExitVehicle ( driver ) ;
82513: LD_VAR 0 4
82517: PPUSH
82518: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
82522: LD_VAR 0 4
82526: PPUSH
82527: LD_VAR 0 2
82531: PPUSH
82532: CALL_OW 180
// end else
82536: GO 82651
// if GetControl ( vehicle ) = control_remote then
82538: LD_VAR 0 1
82542: PPUSH
82543: CALL_OW 263
82547: PUSH
82548: LD_INT 2
82550: EQUAL
82551: IFFALSE 82612
// begin wait ( 0 0$2 ) ;
82553: LD_INT 70
82555: PPUSH
82556: CALL_OW 67
// if Connect ( vehicle ) then
82560: LD_VAR 0 1
82564: PPUSH
82565: CALL 33389 0 1
82569: IFFALSE 82610
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
82571: LD_VAR 0 1
82575: PPUSH
82576: LD_EXP 117
82580: PUSH
82581: LD_VAR 0 2
82585: ARRAY
82586: PUSH
82587: LD_INT 3
82589: ARRAY
82590: PPUSH
82591: LD_EXP 117
82595: PUSH
82596: LD_VAR 0 2
82600: ARRAY
82601: PUSH
82602: LD_INT 4
82604: ARRAY
82605: PPUSH
82606: CALL_OW 171
// end else
82610: GO 82651
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
82612: LD_VAR 0 1
82616: PPUSH
82617: LD_EXP 117
82621: PUSH
82622: LD_VAR 0 2
82626: ARRAY
82627: PUSH
82628: LD_INT 3
82630: ARRAY
82631: PPUSH
82632: LD_EXP 117
82636: PUSH
82637: LD_VAR 0 2
82641: ARRAY
82642: PUSH
82643: LD_INT 4
82645: ARRAY
82646: PPUSH
82647: CALL_OW 171
// end ; end ;
82651: LD_VAR 0 3
82655: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
82656: LD_INT 0
82658: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
82659: LD_VAR 0 1
82663: PUSH
82664: LD_INT 250
82666: EQUAL
82667: PUSH
82668: LD_VAR 0 2
82672: PPUSH
82673: CALL_OW 264
82677: PUSH
82678: LD_INT 81
82680: EQUAL
82681: AND
82682: IFFALSE 82703
// MinerPlaceMine ( unit , x , y ) ;
82684: LD_VAR 0 2
82688: PPUSH
82689: LD_VAR 0 4
82693: PPUSH
82694: LD_VAR 0 5
82698: PPUSH
82699: CALL 85088 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
82703: LD_VAR 0 1
82707: PUSH
82708: LD_INT 251
82710: EQUAL
82711: PUSH
82712: LD_VAR 0 2
82716: PPUSH
82717: CALL_OW 264
82721: PUSH
82722: LD_INT 81
82724: EQUAL
82725: AND
82726: IFFALSE 82747
// MinerDetonateMine ( unit , x , y ) ;
82728: LD_VAR 0 2
82732: PPUSH
82733: LD_VAR 0 4
82737: PPUSH
82738: LD_VAR 0 5
82742: PPUSH
82743: CALL 85363 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
82747: LD_VAR 0 1
82751: PUSH
82752: LD_INT 252
82754: EQUAL
82755: PUSH
82756: LD_VAR 0 2
82760: PPUSH
82761: CALL_OW 264
82765: PUSH
82766: LD_INT 81
82768: EQUAL
82769: AND
82770: IFFALSE 82791
// MinerCreateMinefield ( unit , x , y ) ;
82772: LD_VAR 0 2
82776: PPUSH
82777: LD_VAR 0 4
82781: PPUSH
82782: LD_VAR 0 5
82786: PPUSH
82787: CALL 85780 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
82791: LD_VAR 0 1
82795: PUSH
82796: LD_INT 253
82798: EQUAL
82799: PUSH
82800: LD_VAR 0 2
82804: PPUSH
82805: CALL_OW 257
82809: PUSH
82810: LD_INT 5
82812: EQUAL
82813: AND
82814: IFFALSE 82835
// ComBinocular ( unit , x , y ) ;
82816: LD_VAR 0 2
82820: PPUSH
82821: LD_VAR 0 4
82825: PPUSH
82826: LD_VAR 0 5
82830: PPUSH
82831: CALL 86149 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
82835: LD_VAR 0 1
82839: PUSH
82840: LD_INT 254
82842: EQUAL
82843: PUSH
82844: LD_VAR 0 2
82848: PPUSH
82849: CALL_OW 264
82853: PUSH
82854: LD_INT 99
82856: EQUAL
82857: AND
82858: PUSH
82859: LD_VAR 0 3
82863: PPUSH
82864: CALL_OW 263
82868: PUSH
82869: LD_INT 3
82871: EQUAL
82872: AND
82873: IFFALSE 82889
// HackDestroyVehicle ( unit , selectedUnit ) ;
82875: LD_VAR 0 2
82879: PPUSH
82880: LD_VAR 0 3
82884: PPUSH
82885: CALL 84452 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
82889: LD_VAR 0 1
82893: PUSH
82894: LD_INT 255
82896: EQUAL
82897: PUSH
82898: LD_VAR 0 2
82902: PPUSH
82903: CALL_OW 264
82907: PUSH
82908: LD_INT 14
82910: PUSH
82911: LD_INT 53
82913: PUSH
82914: EMPTY
82915: LIST
82916: LIST
82917: IN
82918: AND
82919: PUSH
82920: LD_VAR 0 4
82924: PPUSH
82925: LD_VAR 0 5
82929: PPUSH
82930: CALL_OW 488
82934: AND
82935: IFFALSE 82959
// CutTreeXYR ( unit , x , y , 12 ) ;
82937: LD_VAR 0 2
82941: PPUSH
82942: LD_VAR 0 4
82946: PPUSH
82947: LD_VAR 0 5
82951: PPUSH
82952: LD_INT 12
82954: PPUSH
82955: CALL 83022 0 4
// if cmd = 256 then
82959: LD_VAR 0 1
82963: PUSH
82964: LD_INT 256
82966: EQUAL
82967: IFFALSE 82988
// SetFactoryWaypoint ( unit , x , y ) ;
82969: LD_VAR 0 2
82973: PPUSH
82974: LD_VAR 0 4
82978: PPUSH
82979: LD_VAR 0 5
82983: PPUSH
82984: CALL 80806 0 3
// if cmd = 257 then
82988: LD_VAR 0 1
82992: PUSH
82993: LD_INT 257
82995: EQUAL
82996: IFFALSE 83017
// SetWarehouseGatheringPoint ( unit , x , y ) ;
82998: LD_VAR 0 2
83002: PPUSH
83003: LD_VAR 0 4
83007: PPUSH
83008: LD_VAR 0 5
83012: PPUSH
83013: CALL 81168 0 3
// end ;
83017: LD_VAR 0 6
83021: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
83022: LD_INT 0
83024: PPUSH
83025: PPUSH
83026: PPUSH
83027: PPUSH
83028: PPUSH
83029: PPUSH
83030: PPUSH
83031: PPUSH
83032: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
83033: LD_VAR 0 1
83037: NOT
83038: PUSH
83039: LD_VAR 0 2
83043: PPUSH
83044: LD_VAR 0 3
83048: PPUSH
83049: CALL_OW 488
83053: NOT
83054: OR
83055: PUSH
83056: LD_VAR 0 4
83060: NOT
83061: OR
83062: IFFALSE 83066
// exit ;
83064: GO 83406
// list := [ ] ;
83066: LD_ADDR_VAR 0 13
83070: PUSH
83071: EMPTY
83072: ST_TO_ADDR
// if x - r < 0 then
83073: LD_VAR 0 2
83077: PUSH
83078: LD_VAR 0 4
83082: MINUS
83083: PUSH
83084: LD_INT 0
83086: LESS
83087: IFFALSE 83099
// min_x := 0 else
83089: LD_ADDR_VAR 0 7
83093: PUSH
83094: LD_INT 0
83096: ST_TO_ADDR
83097: GO 83115
// min_x := x - r ;
83099: LD_ADDR_VAR 0 7
83103: PUSH
83104: LD_VAR 0 2
83108: PUSH
83109: LD_VAR 0 4
83113: MINUS
83114: ST_TO_ADDR
// if y - r < 0 then
83115: LD_VAR 0 3
83119: PUSH
83120: LD_VAR 0 4
83124: MINUS
83125: PUSH
83126: LD_INT 0
83128: LESS
83129: IFFALSE 83141
// min_y := 0 else
83131: LD_ADDR_VAR 0 8
83135: PUSH
83136: LD_INT 0
83138: ST_TO_ADDR
83139: GO 83157
// min_y := y - r ;
83141: LD_ADDR_VAR 0 8
83145: PUSH
83146: LD_VAR 0 3
83150: PUSH
83151: LD_VAR 0 4
83155: MINUS
83156: ST_TO_ADDR
// max_x := x + r ;
83157: LD_ADDR_VAR 0 9
83161: PUSH
83162: LD_VAR 0 2
83166: PUSH
83167: LD_VAR 0 4
83171: PLUS
83172: ST_TO_ADDR
// max_y := y + r ;
83173: LD_ADDR_VAR 0 10
83177: PUSH
83178: LD_VAR 0 3
83182: PUSH
83183: LD_VAR 0 4
83187: PLUS
83188: ST_TO_ADDR
// for _x = min_x to max_x do
83189: LD_ADDR_VAR 0 11
83193: PUSH
83194: DOUBLE
83195: LD_VAR 0 7
83199: DEC
83200: ST_TO_ADDR
83201: LD_VAR 0 9
83205: PUSH
83206: FOR_TO
83207: IFFALSE 83324
// for _y = min_y to max_y do
83209: LD_ADDR_VAR 0 12
83213: PUSH
83214: DOUBLE
83215: LD_VAR 0 8
83219: DEC
83220: ST_TO_ADDR
83221: LD_VAR 0 10
83225: PUSH
83226: FOR_TO
83227: IFFALSE 83320
// begin if not ValidHex ( _x , _y ) then
83229: LD_VAR 0 11
83233: PPUSH
83234: LD_VAR 0 12
83238: PPUSH
83239: CALL_OW 488
83243: NOT
83244: IFFALSE 83248
// continue ;
83246: GO 83226
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83248: LD_VAR 0 11
83252: PPUSH
83253: LD_VAR 0 12
83257: PPUSH
83258: CALL_OW 351
83262: PUSH
83263: LD_VAR 0 11
83267: PPUSH
83268: LD_VAR 0 12
83272: PPUSH
83273: CALL_OW 554
83277: AND
83278: IFFALSE 83318
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83280: LD_ADDR_VAR 0 13
83284: PUSH
83285: LD_VAR 0 13
83289: PPUSH
83290: LD_VAR 0 13
83294: PUSH
83295: LD_INT 1
83297: PLUS
83298: PPUSH
83299: LD_VAR 0 11
83303: PUSH
83304: LD_VAR 0 12
83308: PUSH
83309: EMPTY
83310: LIST
83311: LIST
83312: PPUSH
83313: CALL_OW 2
83317: ST_TO_ADDR
// end ;
83318: GO 83226
83320: POP
83321: POP
83322: GO 83206
83324: POP
83325: POP
// if not list then
83326: LD_VAR 0 13
83330: NOT
83331: IFFALSE 83335
// exit ;
83333: GO 83406
// for i in list do
83335: LD_ADDR_VAR 0 6
83339: PUSH
83340: LD_VAR 0 13
83344: PUSH
83345: FOR_IN
83346: IFFALSE 83404
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
83348: LD_VAR 0 1
83352: PPUSH
83353: LD_STRING M
83355: PUSH
83356: LD_VAR 0 6
83360: PUSH
83361: LD_INT 1
83363: ARRAY
83364: PUSH
83365: LD_VAR 0 6
83369: PUSH
83370: LD_INT 2
83372: ARRAY
83373: PUSH
83374: LD_INT 0
83376: PUSH
83377: LD_INT 0
83379: PUSH
83380: LD_INT 0
83382: PUSH
83383: LD_INT 0
83385: PUSH
83386: EMPTY
83387: LIST
83388: LIST
83389: LIST
83390: LIST
83391: LIST
83392: LIST
83393: LIST
83394: PUSH
83395: EMPTY
83396: LIST
83397: PPUSH
83398: CALL_OW 447
83402: GO 83345
83404: POP
83405: POP
// end ;
83406: LD_VAR 0 5
83410: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
83411: LD_EXP 120
83415: NOT
83416: IFFALSE 83466
83418: GO 83420
83420: DISABLE
// begin initHack := true ;
83421: LD_ADDR_EXP 120
83425: PUSH
83426: LD_INT 1
83428: ST_TO_ADDR
// hackTanks := [ ] ;
83429: LD_ADDR_EXP 121
83433: PUSH
83434: EMPTY
83435: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
83436: LD_ADDR_EXP 122
83440: PUSH
83441: EMPTY
83442: ST_TO_ADDR
// hackLimit := 3 ;
83443: LD_ADDR_EXP 123
83447: PUSH
83448: LD_INT 3
83450: ST_TO_ADDR
// hackDist := 12 ;
83451: LD_ADDR_EXP 124
83455: PUSH
83456: LD_INT 12
83458: ST_TO_ADDR
// hackCounter := [ ] ;
83459: LD_ADDR_EXP 125
83463: PUSH
83464: EMPTY
83465: ST_TO_ADDR
// end ;
83466: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
83467: LD_EXP 120
83471: PUSH
83472: LD_INT 34
83474: PUSH
83475: LD_INT 99
83477: PUSH
83478: EMPTY
83479: LIST
83480: LIST
83481: PPUSH
83482: CALL_OW 69
83486: AND
83487: IFFALSE 83740
83489: GO 83491
83491: DISABLE
83492: LD_INT 0
83494: PPUSH
83495: PPUSH
// begin enable ;
83496: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
83497: LD_ADDR_VAR 0 1
83501: PUSH
83502: LD_INT 34
83504: PUSH
83505: LD_INT 99
83507: PUSH
83508: EMPTY
83509: LIST
83510: LIST
83511: PPUSH
83512: CALL_OW 69
83516: PUSH
83517: FOR_IN
83518: IFFALSE 83738
// begin if not i in hackTanks then
83520: LD_VAR 0 1
83524: PUSH
83525: LD_EXP 121
83529: IN
83530: NOT
83531: IFFALSE 83614
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
83533: LD_ADDR_EXP 121
83537: PUSH
83538: LD_EXP 121
83542: PPUSH
83543: LD_EXP 121
83547: PUSH
83548: LD_INT 1
83550: PLUS
83551: PPUSH
83552: LD_VAR 0 1
83556: PPUSH
83557: CALL_OW 1
83561: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
83562: LD_ADDR_EXP 122
83566: PUSH
83567: LD_EXP 122
83571: PPUSH
83572: LD_EXP 122
83576: PUSH
83577: LD_INT 1
83579: PLUS
83580: PPUSH
83581: EMPTY
83582: PPUSH
83583: CALL_OW 1
83587: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
83588: LD_ADDR_EXP 125
83592: PUSH
83593: LD_EXP 125
83597: PPUSH
83598: LD_EXP 125
83602: PUSH
83603: LD_INT 1
83605: PLUS
83606: PPUSH
83607: EMPTY
83608: PPUSH
83609: CALL_OW 1
83613: ST_TO_ADDR
// end ; if not IsOk ( i ) then
83614: LD_VAR 0 1
83618: PPUSH
83619: CALL_OW 302
83623: NOT
83624: IFFALSE 83637
// begin HackUnlinkAll ( i ) ;
83626: LD_VAR 0 1
83630: PPUSH
83631: CALL 83743 0 1
// continue ;
83635: GO 83517
// end ; HackCheckCapturedStatus ( i ) ;
83637: LD_VAR 0 1
83641: PPUSH
83642: CALL 84186 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
83646: LD_ADDR_VAR 0 2
83650: PUSH
83651: LD_INT 81
83653: PUSH
83654: LD_VAR 0 1
83658: PPUSH
83659: CALL_OW 255
83663: PUSH
83664: EMPTY
83665: LIST
83666: LIST
83667: PUSH
83668: LD_INT 33
83670: PUSH
83671: LD_INT 3
83673: PUSH
83674: EMPTY
83675: LIST
83676: LIST
83677: PUSH
83678: LD_INT 91
83680: PUSH
83681: LD_VAR 0 1
83685: PUSH
83686: LD_EXP 124
83690: PUSH
83691: EMPTY
83692: LIST
83693: LIST
83694: LIST
83695: PUSH
83696: LD_INT 50
83698: PUSH
83699: EMPTY
83700: LIST
83701: PUSH
83702: EMPTY
83703: LIST
83704: LIST
83705: LIST
83706: LIST
83707: PPUSH
83708: CALL_OW 69
83712: ST_TO_ADDR
// if not tmp then
83713: LD_VAR 0 2
83717: NOT
83718: IFFALSE 83722
// continue ;
83720: GO 83517
// HackLink ( i , tmp ) ;
83722: LD_VAR 0 1
83726: PPUSH
83727: LD_VAR 0 2
83731: PPUSH
83732: CALL 83879 0 2
// end ;
83736: GO 83517
83738: POP
83739: POP
// end ;
83740: PPOPN 2
83742: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
83743: LD_INT 0
83745: PPUSH
83746: PPUSH
83747: PPUSH
// if not hack in hackTanks then
83748: LD_VAR 0 1
83752: PUSH
83753: LD_EXP 121
83757: IN
83758: NOT
83759: IFFALSE 83763
// exit ;
83761: GO 83874
// index := GetElementIndex ( hackTanks , hack ) ;
83763: LD_ADDR_VAR 0 4
83767: PUSH
83768: LD_EXP 121
83772: PPUSH
83773: LD_VAR 0 1
83777: PPUSH
83778: CALL 30205 0 2
83782: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
83783: LD_EXP 122
83787: PUSH
83788: LD_VAR 0 4
83792: ARRAY
83793: IFFALSE 83874
// begin for i in hackTanksCaptured [ index ] do
83795: LD_ADDR_VAR 0 3
83799: PUSH
83800: LD_EXP 122
83804: PUSH
83805: LD_VAR 0 4
83809: ARRAY
83810: PUSH
83811: FOR_IN
83812: IFFALSE 83838
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
83814: LD_VAR 0 3
83818: PUSH
83819: LD_INT 1
83821: ARRAY
83822: PPUSH
83823: LD_VAR 0 3
83827: PUSH
83828: LD_INT 2
83830: ARRAY
83831: PPUSH
83832: CALL_OW 235
83836: GO 83811
83838: POP
83839: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
83840: LD_ADDR_EXP 122
83844: PUSH
83845: LD_EXP 122
83849: PPUSH
83850: LD_VAR 0 4
83854: PPUSH
83855: EMPTY
83856: PPUSH
83857: CALL_OW 1
83861: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
83862: LD_VAR 0 1
83866: PPUSH
83867: LD_INT 0
83869: PPUSH
83870: CALL_OW 505
// end ; end ;
83874: LD_VAR 0 2
83878: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
83879: LD_INT 0
83881: PPUSH
83882: PPUSH
83883: PPUSH
// if not hack in hackTanks or not vehicles then
83884: LD_VAR 0 1
83888: PUSH
83889: LD_EXP 121
83893: IN
83894: NOT
83895: PUSH
83896: LD_VAR 0 2
83900: NOT
83901: OR
83902: IFFALSE 83906
// exit ;
83904: GO 84181
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
83906: LD_ADDR_VAR 0 2
83910: PUSH
83911: LD_VAR 0 1
83915: PPUSH
83916: LD_VAR 0 2
83920: PPUSH
83921: LD_INT 1
83923: PPUSH
83924: LD_INT 1
83926: PPUSH
83927: CALL 30855 0 4
83931: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
83932: LD_ADDR_VAR 0 5
83936: PUSH
83937: LD_EXP 121
83941: PPUSH
83942: LD_VAR 0 1
83946: PPUSH
83947: CALL 30205 0 2
83951: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
83952: LD_EXP 122
83956: PUSH
83957: LD_VAR 0 5
83961: ARRAY
83962: PUSH
83963: LD_EXP 123
83967: LESS
83968: IFFALSE 84157
// begin for i := 1 to vehicles do
83970: LD_ADDR_VAR 0 4
83974: PUSH
83975: DOUBLE
83976: LD_INT 1
83978: DEC
83979: ST_TO_ADDR
83980: LD_VAR 0 2
83984: PUSH
83985: FOR_TO
83986: IFFALSE 84155
// begin if hackTanksCaptured [ index ] = hackLimit then
83988: LD_EXP 122
83992: PUSH
83993: LD_VAR 0 5
83997: ARRAY
83998: PUSH
83999: LD_EXP 123
84003: EQUAL
84004: IFFALSE 84008
// break ;
84006: GO 84155
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
84008: LD_ADDR_EXP 125
84012: PUSH
84013: LD_EXP 125
84017: PPUSH
84018: LD_VAR 0 5
84022: PPUSH
84023: LD_EXP 125
84027: PUSH
84028: LD_VAR 0 5
84032: ARRAY
84033: PUSH
84034: LD_INT 1
84036: PLUS
84037: PPUSH
84038: CALL_OW 1
84042: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
84043: LD_ADDR_EXP 122
84047: PUSH
84048: LD_EXP 122
84052: PPUSH
84053: LD_VAR 0 5
84057: PUSH
84058: LD_EXP 122
84062: PUSH
84063: LD_VAR 0 5
84067: ARRAY
84068: PUSH
84069: LD_INT 1
84071: PLUS
84072: PUSH
84073: EMPTY
84074: LIST
84075: LIST
84076: PPUSH
84077: LD_VAR 0 2
84081: PUSH
84082: LD_VAR 0 4
84086: ARRAY
84087: PUSH
84088: LD_VAR 0 2
84092: PUSH
84093: LD_VAR 0 4
84097: ARRAY
84098: PPUSH
84099: CALL_OW 255
84103: PUSH
84104: EMPTY
84105: LIST
84106: LIST
84107: PPUSH
84108: CALL 30420 0 3
84112: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
84113: LD_VAR 0 2
84117: PUSH
84118: LD_VAR 0 4
84122: ARRAY
84123: PPUSH
84124: LD_VAR 0 1
84128: PPUSH
84129: CALL_OW 255
84133: PPUSH
84134: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
84138: LD_VAR 0 2
84142: PUSH
84143: LD_VAR 0 4
84147: ARRAY
84148: PPUSH
84149: CALL_OW 141
// end ;
84153: GO 83985
84155: POP
84156: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84157: LD_VAR 0 1
84161: PPUSH
84162: LD_EXP 122
84166: PUSH
84167: LD_VAR 0 5
84171: ARRAY
84172: PUSH
84173: LD_INT 0
84175: PLUS
84176: PPUSH
84177: CALL_OW 505
// end ;
84181: LD_VAR 0 3
84185: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
84186: LD_INT 0
84188: PPUSH
84189: PPUSH
84190: PPUSH
84191: PPUSH
// if not hack in hackTanks then
84192: LD_VAR 0 1
84196: PUSH
84197: LD_EXP 121
84201: IN
84202: NOT
84203: IFFALSE 84207
// exit ;
84205: GO 84447
// index := GetElementIndex ( hackTanks , hack ) ;
84207: LD_ADDR_VAR 0 4
84211: PUSH
84212: LD_EXP 121
84216: PPUSH
84217: LD_VAR 0 1
84221: PPUSH
84222: CALL 30205 0 2
84226: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
84227: LD_ADDR_VAR 0 3
84231: PUSH
84232: DOUBLE
84233: LD_EXP 122
84237: PUSH
84238: LD_VAR 0 4
84242: ARRAY
84243: INC
84244: ST_TO_ADDR
84245: LD_INT 1
84247: PUSH
84248: FOR_DOWNTO
84249: IFFALSE 84421
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
84251: LD_ADDR_VAR 0 5
84255: PUSH
84256: LD_EXP 122
84260: PUSH
84261: LD_VAR 0 4
84265: ARRAY
84266: PUSH
84267: LD_VAR 0 3
84271: ARRAY
84272: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
84273: LD_VAR 0 5
84277: PUSH
84278: LD_INT 1
84280: ARRAY
84281: PPUSH
84282: CALL_OW 302
84286: NOT
84287: PUSH
84288: LD_VAR 0 5
84292: PUSH
84293: LD_INT 1
84295: ARRAY
84296: PPUSH
84297: CALL_OW 255
84301: PUSH
84302: LD_VAR 0 1
84306: PPUSH
84307: CALL_OW 255
84311: NONEQUAL
84312: OR
84313: IFFALSE 84419
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
84315: LD_VAR 0 5
84319: PUSH
84320: LD_INT 1
84322: ARRAY
84323: PPUSH
84324: CALL_OW 305
84328: PUSH
84329: LD_VAR 0 5
84333: PUSH
84334: LD_INT 1
84336: ARRAY
84337: PPUSH
84338: CALL_OW 255
84342: PUSH
84343: LD_VAR 0 1
84347: PPUSH
84348: CALL_OW 255
84352: EQUAL
84353: AND
84354: IFFALSE 84378
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
84356: LD_VAR 0 5
84360: PUSH
84361: LD_INT 1
84363: ARRAY
84364: PPUSH
84365: LD_VAR 0 5
84369: PUSH
84370: LD_INT 2
84372: ARRAY
84373: PPUSH
84374: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
84378: LD_ADDR_EXP 122
84382: PUSH
84383: LD_EXP 122
84387: PPUSH
84388: LD_VAR 0 4
84392: PPUSH
84393: LD_EXP 122
84397: PUSH
84398: LD_VAR 0 4
84402: ARRAY
84403: PPUSH
84404: LD_VAR 0 3
84408: PPUSH
84409: CALL_OW 3
84413: PPUSH
84414: CALL_OW 1
84418: ST_TO_ADDR
// end ; end ;
84419: GO 84248
84421: POP
84422: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84423: LD_VAR 0 1
84427: PPUSH
84428: LD_EXP 122
84432: PUSH
84433: LD_VAR 0 4
84437: ARRAY
84438: PUSH
84439: LD_INT 0
84441: PLUS
84442: PPUSH
84443: CALL_OW 505
// end ;
84447: LD_VAR 0 2
84451: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
84452: LD_INT 0
84454: PPUSH
84455: PPUSH
84456: PPUSH
84457: PPUSH
// if not hack in hackTanks then
84458: LD_VAR 0 1
84462: PUSH
84463: LD_EXP 121
84467: IN
84468: NOT
84469: IFFALSE 84473
// exit ;
84471: GO 84558
// index := GetElementIndex ( hackTanks , hack ) ;
84473: LD_ADDR_VAR 0 5
84477: PUSH
84478: LD_EXP 121
84482: PPUSH
84483: LD_VAR 0 1
84487: PPUSH
84488: CALL 30205 0 2
84492: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
84493: LD_ADDR_VAR 0 4
84497: PUSH
84498: DOUBLE
84499: LD_INT 1
84501: DEC
84502: ST_TO_ADDR
84503: LD_EXP 122
84507: PUSH
84508: LD_VAR 0 5
84512: ARRAY
84513: PUSH
84514: FOR_TO
84515: IFFALSE 84556
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
84517: LD_EXP 122
84521: PUSH
84522: LD_VAR 0 5
84526: ARRAY
84527: PUSH
84528: LD_VAR 0 4
84532: ARRAY
84533: PUSH
84534: LD_INT 1
84536: ARRAY
84537: PUSH
84538: LD_VAR 0 2
84542: EQUAL
84543: IFFALSE 84554
// KillUnit ( vehicle ) ;
84545: LD_VAR 0 2
84549: PPUSH
84550: CALL_OW 66
84554: GO 84514
84556: POP
84557: POP
// end ;
84558: LD_VAR 0 3
84562: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
84563: LD_EXP 126
84567: NOT
84568: IFFALSE 84603
84570: GO 84572
84572: DISABLE
// begin initMiner := true ;
84573: LD_ADDR_EXP 126
84577: PUSH
84578: LD_INT 1
84580: ST_TO_ADDR
// minersList := [ ] ;
84581: LD_ADDR_EXP 127
84585: PUSH
84586: EMPTY
84587: ST_TO_ADDR
// minerMinesList := [ ] ;
84588: LD_ADDR_EXP 128
84592: PUSH
84593: EMPTY
84594: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
84595: LD_ADDR_EXP 129
84599: PUSH
84600: LD_INT 5
84602: ST_TO_ADDR
// end ;
84603: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
84604: LD_EXP 126
84608: PUSH
84609: LD_INT 34
84611: PUSH
84612: LD_INT 81
84614: PUSH
84615: EMPTY
84616: LIST
84617: LIST
84618: PPUSH
84619: CALL_OW 69
84623: AND
84624: IFFALSE 85085
84626: GO 84628
84628: DISABLE
84629: LD_INT 0
84631: PPUSH
84632: PPUSH
84633: PPUSH
84634: PPUSH
// begin enable ;
84635: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
84636: LD_ADDR_VAR 0 1
84640: PUSH
84641: LD_INT 34
84643: PUSH
84644: LD_INT 81
84646: PUSH
84647: EMPTY
84648: LIST
84649: LIST
84650: PPUSH
84651: CALL_OW 69
84655: PUSH
84656: FOR_IN
84657: IFFALSE 84729
// begin if not i in minersList then
84659: LD_VAR 0 1
84663: PUSH
84664: LD_EXP 127
84668: IN
84669: NOT
84670: IFFALSE 84727
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
84672: LD_ADDR_EXP 127
84676: PUSH
84677: LD_EXP 127
84681: PPUSH
84682: LD_EXP 127
84686: PUSH
84687: LD_INT 1
84689: PLUS
84690: PPUSH
84691: LD_VAR 0 1
84695: PPUSH
84696: CALL_OW 1
84700: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
84701: LD_ADDR_EXP 128
84705: PUSH
84706: LD_EXP 128
84710: PPUSH
84711: LD_EXP 128
84715: PUSH
84716: LD_INT 1
84718: PLUS
84719: PPUSH
84720: EMPTY
84721: PPUSH
84722: CALL_OW 1
84726: ST_TO_ADDR
// end end ;
84727: GO 84656
84729: POP
84730: POP
// for i := minerMinesList downto 1 do
84731: LD_ADDR_VAR 0 1
84735: PUSH
84736: DOUBLE
84737: LD_EXP 128
84741: INC
84742: ST_TO_ADDR
84743: LD_INT 1
84745: PUSH
84746: FOR_DOWNTO
84747: IFFALSE 85083
// begin if IsLive ( minersList [ i ] ) then
84749: LD_EXP 127
84753: PUSH
84754: LD_VAR 0 1
84758: ARRAY
84759: PPUSH
84760: CALL_OW 300
84764: IFFALSE 84792
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
84766: LD_EXP 127
84770: PUSH
84771: LD_VAR 0 1
84775: ARRAY
84776: PPUSH
84777: LD_EXP 128
84781: PUSH
84782: LD_VAR 0 1
84786: ARRAY
84787: PPUSH
84788: CALL_OW 505
// if not minerMinesList [ i ] then
84792: LD_EXP 128
84796: PUSH
84797: LD_VAR 0 1
84801: ARRAY
84802: NOT
84803: IFFALSE 84807
// continue ;
84805: GO 84746
// for j := minerMinesList [ i ] downto 1 do
84807: LD_ADDR_VAR 0 2
84811: PUSH
84812: DOUBLE
84813: LD_EXP 128
84817: PUSH
84818: LD_VAR 0 1
84822: ARRAY
84823: INC
84824: ST_TO_ADDR
84825: LD_INT 1
84827: PUSH
84828: FOR_DOWNTO
84829: IFFALSE 85079
// begin side := GetSide ( minersList [ i ] ) ;
84831: LD_ADDR_VAR 0 3
84835: PUSH
84836: LD_EXP 127
84840: PUSH
84841: LD_VAR 0 1
84845: ARRAY
84846: PPUSH
84847: CALL_OW 255
84851: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
84852: LD_ADDR_VAR 0 4
84856: PUSH
84857: LD_EXP 128
84861: PUSH
84862: LD_VAR 0 1
84866: ARRAY
84867: PUSH
84868: LD_VAR 0 2
84872: ARRAY
84873: PUSH
84874: LD_INT 1
84876: ARRAY
84877: PPUSH
84878: LD_EXP 128
84882: PUSH
84883: LD_VAR 0 1
84887: ARRAY
84888: PUSH
84889: LD_VAR 0 2
84893: ARRAY
84894: PUSH
84895: LD_INT 2
84897: ARRAY
84898: PPUSH
84899: CALL_OW 428
84903: ST_TO_ADDR
// if not tmp then
84904: LD_VAR 0 4
84908: NOT
84909: IFFALSE 84913
// continue ;
84911: GO 84828
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
84913: LD_VAR 0 4
84917: PUSH
84918: LD_INT 81
84920: PUSH
84921: LD_VAR 0 3
84925: PUSH
84926: EMPTY
84927: LIST
84928: LIST
84929: PPUSH
84930: CALL_OW 69
84934: IN
84935: PUSH
84936: LD_EXP 128
84940: PUSH
84941: LD_VAR 0 1
84945: ARRAY
84946: PUSH
84947: LD_VAR 0 2
84951: ARRAY
84952: PUSH
84953: LD_INT 1
84955: ARRAY
84956: PPUSH
84957: LD_EXP 128
84961: PUSH
84962: LD_VAR 0 1
84966: ARRAY
84967: PUSH
84968: LD_VAR 0 2
84972: ARRAY
84973: PUSH
84974: LD_INT 2
84976: ARRAY
84977: PPUSH
84978: CALL_OW 458
84982: AND
84983: IFFALSE 85077
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
84985: LD_EXP 128
84989: PUSH
84990: LD_VAR 0 1
84994: ARRAY
84995: PUSH
84996: LD_VAR 0 2
85000: ARRAY
85001: PUSH
85002: LD_INT 1
85004: ARRAY
85005: PPUSH
85006: LD_EXP 128
85010: PUSH
85011: LD_VAR 0 1
85015: ARRAY
85016: PUSH
85017: LD_VAR 0 2
85021: ARRAY
85022: PUSH
85023: LD_INT 2
85025: ARRAY
85026: PPUSH
85027: LD_VAR 0 3
85031: PPUSH
85032: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
85036: LD_ADDR_EXP 128
85040: PUSH
85041: LD_EXP 128
85045: PPUSH
85046: LD_VAR 0 1
85050: PPUSH
85051: LD_EXP 128
85055: PUSH
85056: LD_VAR 0 1
85060: ARRAY
85061: PPUSH
85062: LD_VAR 0 2
85066: PPUSH
85067: CALL_OW 3
85071: PPUSH
85072: CALL_OW 1
85076: ST_TO_ADDR
// end ; end ;
85077: GO 84828
85079: POP
85080: POP
// end ;
85081: GO 84746
85083: POP
85084: POP
// end ;
85085: PPOPN 4
85087: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
85088: LD_INT 0
85090: PPUSH
85091: PPUSH
// result := false ;
85092: LD_ADDR_VAR 0 4
85096: PUSH
85097: LD_INT 0
85099: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
85100: LD_VAR 0 1
85104: PPUSH
85105: CALL_OW 264
85109: PUSH
85110: LD_INT 81
85112: EQUAL
85113: NOT
85114: IFFALSE 85118
// exit ;
85116: GO 85358
// index := GetElementIndex ( minersList , unit ) ;
85118: LD_ADDR_VAR 0 5
85122: PUSH
85123: LD_EXP 127
85127: PPUSH
85128: LD_VAR 0 1
85132: PPUSH
85133: CALL 30205 0 2
85137: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
85138: LD_EXP 128
85142: PUSH
85143: LD_VAR 0 5
85147: ARRAY
85148: PUSH
85149: LD_EXP 129
85153: GREATEREQUAL
85154: IFFALSE 85158
// exit ;
85156: GO 85358
// ComMoveXY ( unit , x , y ) ;
85158: LD_VAR 0 1
85162: PPUSH
85163: LD_VAR 0 2
85167: PPUSH
85168: LD_VAR 0 3
85172: PPUSH
85173: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85177: LD_INT 35
85179: PPUSH
85180: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
85184: LD_VAR 0 1
85188: PPUSH
85189: LD_VAR 0 2
85193: PPUSH
85194: LD_VAR 0 3
85198: PPUSH
85199: CALL 61468 0 3
85203: NOT
85204: PUSH
85205: LD_VAR 0 1
85209: PPUSH
85210: CALL_OW 314
85214: AND
85215: IFFALSE 85219
// exit ;
85217: GO 85358
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
85219: LD_VAR 0 2
85223: PPUSH
85224: LD_VAR 0 3
85228: PPUSH
85229: CALL_OW 428
85233: PUSH
85234: LD_VAR 0 1
85238: EQUAL
85239: PUSH
85240: LD_VAR 0 1
85244: PPUSH
85245: CALL_OW 314
85249: NOT
85250: AND
85251: IFFALSE 85177
// PlaySoundXY ( x , y , PlantMine ) ;
85253: LD_VAR 0 2
85257: PPUSH
85258: LD_VAR 0 3
85262: PPUSH
85263: LD_STRING PlantMine
85265: PPUSH
85266: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
85270: LD_VAR 0 2
85274: PPUSH
85275: LD_VAR 0 3
85279: PPUSH
85280: LD_VAR 0 1
85284: PPUSH
85285: CALL_OW 255
85289: PPUSH
85290: LD_INT 0
85292: PPUSH
85293: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
85297: LD_ADDR_EXP 128
85301: PUSH
85302: LD_EXP 128
85306: PPUSH
85307: LD_VAR 0 5
85311: PUSH
85312: LD_EXP 128
85316: PUSH
85317: LD_VAR 0 5
85321: ARRAY
85322: PUSH
85323: LD_INT 1
85325: PLUS
85326: PUSH
85327: EMPTY
85328: LIST
85329: LIST
85330: PPUSH
85331: LD_VAR 0 2
85335: PUSH
85336: LD_VAR 0 3
85340: PUSH
85341: EMPTY
85342: LIST
85343: LIST
85344: PPUSH
85345: CALL 30420 0 3
85349: ST_TO_ADDR
// result := true ;
85350: LD_ADDR_VAR 0 4
85354: PUSH
85355: LD_INT 1
85357: ST_TO_ADDR
// end ;
85358: LD_VAR 0 4
85362: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
85363: LD_INT 0
85365: PPUSH
85366: PPUSH
85367: PPUSH
// if not unit in minersList then
85368: LD_VAR 0 1
85372: PUSH
85373: LD_EXP 127
85377: IN
85378: NOT
85379: IFFALSE 85383
// exit ;
85381: GO 85775
// index := GetElementIndex ( minersList , unit ) ;
85383: LD_ADDR_VAR 0 6
85387: PUSH
85388: LD_EXP 127
85392: PPUSH
85393: LD_VAR 0 1
85397: PPUSH
85398: CALL 30205 0 2
85402: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
85403: LD_ADDR_VAR 0 5
85407: PUSH
85408: DOUBLE
85409: LD_EXP 128
85413: PUSH
85414: LD_VAR 0 6
85418: ARRAY
85419: INC
85420: ST_TO_ADDR
85421: LD_INT 1
85423: PUSH
85424: FOR_DOWNTO
85425: IFFALSE 85586
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
85427: LD_EXP 128
85431: PUSH
85432: LD_VAR 0 6
85436: ARRAY
85437: PUSH
85438: LD_VAR 0 5
85442: ARRAY
85443: PUSH
85444: LD_INT 1
85446: ARRAY
85447: PUSH
85448: LD_VAR 0 2
85452: EQUAL
85453: PUSH
85454: LD_EXP 128
85458: PUSH
85459: LD_VAR 0 6
85463: ARRAY
85464: PUSH
85465: LD_VAR 0 5
85469: ARRAY
85470: PUSH
85471: LD_INT 2
85473: ARRAY
85474: PUSH
85475: LD_VAR 0 3
85479: EQUAL
85480: AND
85481: IFFALSE 85584
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85483: LD_EXP 128
85487: PUSH
85488: LD_VAR 0 6
85492: ARRAY
85493: PUSH
85494: LD_VAR 0 5
85498: ARRAY
85499: PUSH
85500: LD_INT 1
85502: ARRAY
85503: PPUSH
85504: LD_EXP 128
85508: PUSH
85509: LD_VAR 0 6
85513: ARRAY
85514: PUSH
85515: LD_VAR 0 5
85519: ARRAY
85520: PUSH
85521: LD_INT 2
85523: ARRAY
85524: PPUSH
85525: LD_VAR 0 1
85529: PPUSH
85530: CALL_OW 255
85534: PPUSH
85535: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85539: LD_ADDR_EXP 128
85543: PUSH
85544: LD_EXP 128
85548: PPUSH
85549: LD_VAR 0 6
85553: PPUSH
85554: LD_EXP 128
85558: PUSH
85559: LD_VAR 0 6
85563: ARRAY
85564: PPUSH
85565: LD_VAR 0 5
85569: PPUSH
85570: CALL_OW 3
85574: PPUSH
85575: CALL_OW 1
85579: ST_TO_ADDR
// exit ;
85580: POP
85581: POP
85582: GO 85775
// end ; end ;
85584: GO 85424
85586: POP
85587: POP
// for i := minerMinesList [ index ] downto 1 do
85588: LD_ADDR_VAR 0 5
85592: PUSH
85593: DOUBLE
85594: LD_EXP 128
85598: PUSH
85599: LD_VAR 0 6
85603: ARRAY
85604: INC
85605: ST_TO_ADDR
85606: LD_INT 1
85608: PUSH
85609: FOR_DOWNTO
85610: IFFALSE 85773
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
85612: LD_EXP 128
85616: PUSH
85617: LD_VAR 0 6
85621: ARRAY
85622: PUSH
85623: LD_VAR 0 5
85627: ARRAY
85628: PUSH
85629: LD_INT 1
85631: ARRAY
85632: PPUSH
85633: LD_EXP 128
85637: PUSH
85638: LD_VAR 0 6
85642: ARRAY
85643: PUSH
85644: LD_VAR 0 5
85648: ARRAY
85649: PUSH
85650: LD_INT 2
85652: ARRAY
85653: PPUSH
85654: LD_VAR 0 2
85658: PPUSH
85659: LD_VAR 0 3
85663: PPUSH
85664: CALL_OW 298
85668: PUSH
85669: LD_INT 6
85671: LESS
85672: IFFALSE 85771
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85674: LD_EXP 128
85678: PUSH
85679: LD_VAR 0 6
85683: ARRAY
85684: PUSH
85685: LD_VAR 0 5
85689: ARRAY
85690: PUSH
85691: LD_INT 1
85693: ARRAY
85694: PPUSH
85695: LD_EXP 128
85699: PUSH
85700: LD_VAR 0 6
85704: ARRAY
85705: PUSH
85706: LD_VAR 0 5
85710: ARRAY
85711: PUSH
85712: LD_INT 2
85714: ARRAY
85715: PPUSH
85716: LD_VAR 0 1
85720: PPUSH
85721: CALL_OW 255
85725: PPUSH
85726: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85730: LD_ADDR_EXP 128
85734: PUSH
85735: LD_EXP 128
85739: PPUSH
85740: LD_VAR 0 6
85744: PPUSH
85745: LD_EXP 128
85749: PUSH
85750: LD_VAR 0 6
85754: ARRAY
85755: PPUSH
85756: LD_VAR 0 5
85760: PPUSH
85761: CALL_OW 3
85765: PPUSH
85766: CALL_OW 1
85770: ST_TO_ADDR
// end ; end ;
85771: GO 85609
85773: POP
85774: POP
// end ;
85775: LD_VAR 0 4
85779: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
85780: LD_INT 0
85782: PPUSH
85783: PPUSH
85784: PPUSH
85785: PPUSH
85786: PPUSH
85787: PPUSH
85788: PPUSH
85789: PPUSH
85790: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
85791: LD_VAR 0 1
85795: PPUSH
85796: CALL_OW 264
85800: PUSH
85801: LD_INT 81
85803: EQUAL
85804: NOT
85805: PUSH
85806: LD_VAR 0 1
85810: PUSH
85811: LD_EXP 127
85815: IN
85816: NOT
85817: OR
85818: IFFALSE 85822
// exit ;
85820: GO 86144
// index := GetElementIndex ( minersList , unit ) ;
85822: LD_ADDR_VAR 0 6
85826: PUSH
85827: LD_EXP 127
85831: PPUSH
85832: LD_VAR 0 1
85836: PPUSH
85837: CALL 30205 0 2
85841: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
85842: LD_ADDR_VAR 0 8
85846: PUSH
85847: LD_EXP 129
85851: PUSH
85852: LD_EXP 128
85856: PUSH
85857: LD_VAR 0 6
85861: ARRAY
85862: MINUS
85863: ST_TO_ADDR
// if not minesFreeAmount then
85864: LD_VAR 0 8
85868: NOT
85869: IFFALSE 85873
// exit ;
85871: GO 86144
// tmp := [ ] ;
85873: LD_ADDR_VAR 0 7
85877: PUSH
85878: EMPTY
85879: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
85880: LD_ADDR_VAR 0 5
85884: PUSH
85885: DOUBLE
85886: LD_INT 1
85888: DEC
85889: ST_TO_ADDR
85890: LD_VAR 0 8
85894: PUSH
85895: FOR_TO
85896: IFFALSE 86091
// begin _d := rand ( 0 , 5 ) ;
85898: LD_ADDR_VAR 0 11
85902: PUSH
85903: LD_INT 0
85905: PPUSH
85906: LD_INT 5
85908: PPUSH
85909: CALL_OW 12
85913: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
85914: LD_ADDR_VAR 0 12
85918: PUSH
85919: LD_INT 2
85921: PPUSH
85922: LD_INT 6
85924: PPUSH
85925: CALL_OW 12
85929: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
85930: LD_ADDR_VAR 0 9
85934: PUSH
85935: LD_VAR 0 2
85939: PPUSH
85940: LD_VAR 0 11
85944: PPUSH
85945: LD_VAR 0 12
85949: PPUSH
85950: CALL_OW 272
85954: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
85955: LD_ADDR_VAR 0 10
85959: PUSH
85960: LD_VAR 0 3
85964: PPUSH
85965: LD_VAR 0 11
85969: PPUSH
85970: LD_VAR 0 12
85974: PPUSH
85975: CALL_OW 273
85979: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
85980: LD_VAR 0 9
85984: PPUSH
85985: LD_VAR 0 10
85989: PPUSH
85990: CALL_OW 488
85994: PUSH
85995: LD_VAR 0 9
85999: PUSH
86000: LD_VAR 0 10
86004: PUSH
86005: EMPTY
86006: LIST
86007: LIST
86008: PUSH
86009: LD_VAR 0 7
86013: IN
86014: NOT
86015: AND
86016: PUSH
86017: LD_VAR 0 9
86021: PPUSH
86022: LD_VAR 0 10
86026: PPUSH
86027: CALL_OW 458
86031: NOT
86032: AND
86033: IFFALSE 86075
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
86035: LD_ADDR_VAR 0 7
86039: PUSH
86040: LD_VAR 0 7
86044: PPUSH
86045: LD_VAR 0 7
86049: PUSH
86050: LD_INT 1
86052: PLUS
86053: PPUSH
86054: LD_VAR 0 9
86058: PUSH
86059: LD_VAR 0 10
86063: PUSH
86064: EMPTY
86065: LIST
86066: LIST
86067: PPUSH
86068: CALL_OW 1
86072: ST_TO_ADDR
86073: GO 86089
// i := i - 1 ;
86075: LD_ADDR_VAR 0 5
86079: PUSH
86080: LD_VAR 0 5
86084: PUSH
86085: LD_INT 1
86087: MINUS
86088: ST_TO_ADDR
// end ;
86089: GO 85895
86091: POP
86092: POP
// for i in tmp do
86093: LD_ADDR_VAR 0 5
86097: PUSH
86098: LD_VAR 0 7
86102: PUSH
86103: FOR_IN
86104: IFFALSE 86142
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
86106: LD_VAR 0 1
86110: PPUSH
86111: LD_VAR 0 5
86115: PUSH
86116: LD_INT 1
86118: ARRAY
86119: PPUSH
86120: LD_VAR 0 5
86124: PUSH
86125: LD_INT 2
86127: ARRAY
86128: PPUSH
86129: CALL 85088 0 3
86133: NOT
86134: IFFALSE 86140
// exit ;
86136: POP
86137: POP
86138: GO 86144
86140: GO 86103
86142: POP
86143: POP
// end ;
86144: LD_VAR 0 4
86148: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
86149: LD_INT 0
86151: PPUSH
86152: PPUSH
86153: PPUSH
86154: PPUSH
86155: PPUSH
86156: PPUSH
86157: PPUSH
// if not GetClass ( unit ) = class_sniper then
86158: LD_VAR 0 1
86162: PPUSH
86163: CALL_OW 257
86167: PUSH
86168: LD_INT 5
86170: EQUAL
86171: NOT
86172: IFFALSE 86176
// exit ;
86174: GO 86564
// dist := 8 ;
86176: LD_ADDR_VAR 0 5
86180: PUSH
86181: LD_INT 8
86183: ST_TO_ADDR
// viewRange := 12 ;
86184: LD_ADDR_VAR 0 7
86188: PUSH
86189: LD_INT 12
86191: ST_TO_ADDR
// side := GetSide ( unit ) ;
86192: LD_ADDR_VAR 0 6
86196: PUSH
86197: LD_VAR 0 1
86201: PPUSH
86202: CALL_OW 255
86206: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
86207: LD_INT 61
86209: PPUSH
86210: LD_VAR 0 6
86214: PPUSH
86215: CALL_OW 321
86219: PUSH
86220: LD_INT 2
86222: EQUAL
86223: IFFALSE 86233
// viewRange := 16 ;
86225: LD_ADDR_VAR 0 7
86229: PUSH
86230: LD_INT 16
86232: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
86233: LD_VAR 0 1
86237: PPUSH
86238: LD_VAR 0 2
86242: PPUSH
86243: LD_VAR 0 3
86247: PPUSH
86248: CALL_OW 297
86252: PUSH
86253: LD_VAR 0 5
86257: GREATER
86258: IFFALSE 86337
// begin ComMoveXY ( unit , x , y ) ;
86260: LD_VAR 0 1
86264: PPUSH
86265: LD_VAR 0 2
86269: PPUSH
86270: LD_VAR 0 3
86274: PPUSH
86275: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86279: LD_INT 35
86281: PPUSH
86282: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
86286: LD_VAR 0 1
86290: PPUSH
86291: LD_VAR 0 2
86295: PPUSH
86296: LD_VAR 0 3
86300: PPUSH
86301: CALL 61468 0 3
86305: NOT
86306: IFFALSE 86310
// exit ;
86308: GO 86564
// until GetDistUnitXY ( unit , x , y ) < dist ;
86310: LD_VAR 0 1
86314: PPUSH
86315: LD_VAR 0 2
86319: PPUSH
86320: LD_VAR 0 3
86324: PPUSH
86325: CALL_OW 297
86329: PUSH
86330: LD_VAR 0 5
86334: LESS
86335: IFFALSE 86279
// end ; ComTurnXY ( unit , x , y ) ;
86337: LD_VAR 0 1
86341: PPUSH
86342: LD_VAR 0 2
86346: PPUSH
86347: LD_VAR 0 3
86351: PPUSH
86352: CALL_OW 118
// wait ( 5 ) ;
86356: LD_INT 5
86358: PPUSH
86359: CALL_OW 67
// _d := GetDir ( unit ) ;
86363: LD_ADDR_VAR 0 10
86367: PUSH
86368: LD_VAR 0 1
86372: PPUSH
86373: CALL_OW 254
86377: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
86378: LD_ADDR_VAR 0 8
86382: PUSH
86383: LD_VAR 0 1
86387: PPUSH
86388: CALL_OW 250
86392: PPUSH
86393: LD_VAR 0 10
86397: PPUSH
86398: LD_VAR 0 5
86402: PPUSH
86403: CALL_OW 272
86407: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
86408: LD_ADDR_VAR 0 9
86412: PUSH
86413: LD_VAR 0 1
86417: PPUSH
86418: CALL_OW 251
86422: PPUSH
86423: LD_VAR 0 10
86427: PPUSH
86428: LD_VAR 0 5
86432: PPUSH
86433: CALL_OW 273
86437: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
86438: LD_VAR 0 8
86442: PPUSH
86443: LD_VAR 0 9
86447: PPUSH
86448: CALL_OW 488
86452: NOT
86453: IFFALSE 86457
// exit ;
86455: GO 86564
// ComAnimCustom ( unit , 1 ) ;
86457: LD_VAR 0 1
86461: PPUSH
86462: LD_INT 1
86464: PPUSH
86465: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
86469: LD_VAR 0 8
86473: PPUSH
86474: LD_VAR 0 9
86478: PPUSH
86479: LD_VAR 0 6
86483: PPUSH
86484: LD_VAR 0 7
86488: PPUSH
86489: CALL_OW 330
// repeat wait ( 1 ) ;
86493: LD_INT 1
86495: PPUSH
86496: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
86500: LD_VAR 0 1
86504: PPUSH
86505: CALL_OW 316
86509: PUSH
86510: LD_VAR 0 1
86514: PPUSH
86515: CALL_OW 314
86519: OR
86520: PUSH
86521: LD_VAR 0 1
86525: PPUSH
86526: CALL_OW 302
86530: NOT
86531: OR
86532: PUSH
86533: LD_VAR 0 1
86537: PPUSH
86538: CALL_OW 301
86542: OR
86543: IFFALSE 86493
// RemoveSeeing ( _x , _y , side ) ;
86545: LD_VAR 0 8
86549: PPUSH
86550: LD_VAR 0 9
86554: PPUSH
86555: LD_VAR 0 6
86559: PPUSH
86560: CALL_OW 331
// end ; end_of_file
86564: LD_VAR 0 4
86568: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86569: LD_VAR 0 1
86573: PPUSH
86574: LD_VAR 0 2
86578: PPUSH
86579: LD_VAR 0 3
86583: PPUSH
86584: LD_VAR 0 4
86588: PPUSH
86589: LD_VAR 0 5
86593: PPUSH
86594: LD_VAR 0 6
86598: PPUSH
86599: CALL 66519 0 6
// end ;
86603: PPOPN 6
86605: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86606: LD_INT 0
86608: PPUSH
// begin if not units then
86609: LD_VAR 0 1
86613: NOT
86614: IFFALSE 86618
// exit ;
86616: GO 86618
// end ;
86618: PPOPN 7
86620: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86621: CALL 66490 0 0
// end ;
86625: PPOPN 1
86627: END
