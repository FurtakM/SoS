// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 6878 0 2
// PrepareArabian ;
  32: CALL 377 0 0
// PrepareRussian ;
  36: CALL 7649 0 0
// Action ;
  40: CALL 15811 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// bergkampfArrived := false ;
 109: LD_ADDR_EXP 3
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omarArrived := false ;
 117: LD_ADDR_EXP 6
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// outpostDestroyed := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// ruLoseCounter := 0 ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// rolfScriptBase := false ;
 141: LD_ADDR_EXP 9
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omarScriptBase := false ;
 149: LD_ADDR_EXP 10
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// linkedWithRolf := 0 ;
 157: LD_ADDR_EXP 12
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 165: LD_ADDR_EXP 26
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// rolfDied := false ;
 173: LD_ADDR_EXP 13
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// leninSpotted := false ;
 181: LD_ADDR_EXP 14
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mortarConstructed := false ;
 189: LD_ADDR_EXP 15
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// rolfHasVehicles := false ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// leninScriptBase := true ;
 205: LD_ADDR_EXP 11
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// rolfWantVehicles := false ;
 213: LD_ADDR_EXP 17
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// omarWantVehicles := false ;
 221: LD_ADDR_EXP 18
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// omarHasVehicles := false ;
 229: LD_ADDR_EXP 22
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// escapeAllowed := false ;
 237: LD_ADDR_EXP 24
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$30 , 5 5$00 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 16800
 252: PUSH
 253: LD_INT 12600
 255: PUSH
 256: LD_INT 11550
 258: PUSH
 259: LD_INT 10500
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ;
 274: LD_ADDR_EXP 20
 278: PUSH
 279: LD_INT 21000
 281: PUSH
 282: LD_INT 18900
 284: PUSH
 285: LD_INT 16800
 287: PUSH
 288: LD_INT 14700
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: LIST
 296: PUSH
 297: LD_OWVAR 67
 301: ARRAY
 302: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 303: LD_ADDR_EXP 21
 307: PUSH
 308: LD_INT 4
 310: PUSH
 311: LD_INT 5
 313: PUSH
 314: LD_INT 6
 316: PUSH
 317: LD_INT 6
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: PUSH
 326: LD_OWVAR 67
 330: ARRAY
 331: ST_TO_ADDR
// omarAttack := false ;
 332: LD_ADDR_EXP 23
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// disableAttackOnHeike := false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 348: LD_ADDR_EXP 25
 352: PUSH
 353: LD_INT 8400
 355: ST_TO_ADDR
// firstAttack := true ;
 356: LD_ADDR_EXP 28
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// canRolfJoin := true ;
 364: LD_ADDR_EXP 29
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// end ; end_of_file
 372: LD_VAR 0 1
 376: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 377: LD_INT 0
 379: PPUSH
 380: PPUSH
 381: PPUSH
 382: PPUSH
 383: PPUSH
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
 389: PPUSH
 390: PPUSH
// uc_nation := 2 ;
 391: LD_ADDR_OWVAR 21
 395: PUSH
 396: LD_INT 2
 398: ST_TO_ADDR
// uc_side := 5 ;
 399: LD_ADDR_OWVAR 20
 403: PUSH
 404: LD_INT 5
 406: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 407: LD_ADDR_EXP 38
 411: PUSH
 412: LD_STRING Abdul
 414: PPUSH
 415: LD_INT 0
 417: PPUSH
 418: LD_STRING 
 420: PPUSH
 421: CALL 25207 0 3
 425: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 426: LD_ADDR_EXP 40
 430: PUSH
 431: LD_STRING Omar
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: LD_STRING 
 439: PPUSH
 440: CALL 25207 0 3
 444: ST_TO_ADDR
// uc_side := 2 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 2
 452: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 453: LD_ADDR_EXP 30
 457: PUSH
 458: LD_STRING Heike
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 25207 0 3
 476: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 477: LD_ADDR_EXP 33
 481: PUSH
 482: LD_STRING Ibrahim
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: LD_EXP 2
 495: PPUSH
 496: CALL 25207 0 3
 500: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 501: LD_ADDR_EXP 31
 505: PUSH
 506: LD_STRING Givi
 508: PPUSH
 509: LD_EXP 1
 513: NOT
 514: PPUSH
 515: LD_EXP 2
 519: PPUSH
 520: CALL 25207 0 3
 524: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 525: LD_ADDR_EXP 34
 529: PUSH
 530: LD_STRING Kamil
 532: PPUSH
 533: LD_EXP 1
 537: NOT
 538: PPUSH
 539: LD_EXP 2
 543: PPUSH
 544: CALL 25207 0 3
 548: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 549: LD_ADDR_EXP 35
 553: PUSH
 554: LD_STRING Kaia
 556: PPUSH
 557: LD_EXP 1
 561: NOT
 562: PPUSH
 563: LD_EXP 2
 567: PPUSH
 568: CALL 25207 0 3
 572: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 573: LD_ADDR_EXP 36
 577: PUSH
 578: LD_STRING Sophia
 580: PPUSH
 581: LD_EXP 1
 585: NOT
 586: PPUSH
 587: LD_EXP 2
 591: PPUSH
 592: CALL 25207 0 3
 596: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 597: LD_ADDR_EXP 37
 601: PUSH
 602: LD_STRING Markov
 604: PPUSH
 605: LD_EXP 1
 609: NOT
 610: PPUSH
 611: LD_EXP 2
 615: PPUSH
 616: CALL 25207 0 3
 620: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 621: LD_ADDR_EXP 42
 625: PUSH
 626: LD_STRING Aviradze
 628: PPUSH
 629: LD_EXP 1
 633: NOT
 634: PPUSH
 635: LD_EXP 2
 639: PPUSH
 640: CALL 25207 0 3
 644: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 645: LD_ADDR_EXP 41
 649: PUSH
 650: LD_STRING Kurt
 652: PPUSH
 653: LD_EXP 1
 657: NOT
 658: PPUSH
 659: LD_EXP 2
 663: PPUSH
 664: CALL 25207 0 3
 668: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 669: LD_ADDR_EXP 32
 673: PUSH
 674: LD_STRING Mike
 676: PPUSH
 677: LD_EXP 1
 681: NOT
 682: PPUSH
 683: LD_EXP 2
 687: PPUSH
 688: CALL 25207 0 3
 692: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 693: LD_ADDR_EXP 39
 697: PUSH
 698: LD_STRING Olaf
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: LD_STRING 
 706: PPUSH
 707: CALL 25207 0 3
 711: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 712: LD_ADDR_EXP 45
 716: PUSH
 717: LD_STRING 05_others
 719: PPUSH
 720: CALL_OW 31
 724: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 725: LD_ADDR_EXP 46
 729: PUSH
 730: LD_STRING 05_apes
 732: PPUSH
 733: CALL_OW 31
 737: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: LD_STRING 05_Radar
 745: PPUSH
 746: LD_EXP 1
 750: PPUSH
 751: CALL_OW 30
 755: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 756: LD_ADDR_VAR 0 6
 760: PUSH
 761: LD_STRING 05_RemoteControl
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 30
 773: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 774: LD_ADDR_VAR 0 7
 778: PUSH
 779: LD_STRING 05_DrugsTested
 781: PPUSH
 782: LD_EXP 1
 786: PPUSH
 787: CALL_OW 30
 791: ST_TO_ADDR
// if hasDrugs then
 792: LD_VAR 0 7
 796: IFFALSE 811
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 798: LD_INT 5
 800: PPUSH
 801: LD_INT 2
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: CALL_OW 322
// if hasRadar then
 811: LD_VAR 0 5
 815: IFFALSE 830
// SetTech ( tech_radar , 2 , state_researched ) ;
 817: LD_INT 6
 819: PPUSH
 820: LD_INT 2
 822: PPUSH
 823: LD_INT 2
 825: PPUSH
 826: CALL_OW 322
// if hasRemote then
 830: LD_VAR 0 6
 834: IFFALSE 849
// SetTech ( tech_remCont , 2 , state_researched ) ;
 836: LD_INT 15
 838: PPUSH
 839: LD_INT 2
 841: PPUSH
 842: LD_INT 2
 844: PPUSH
 845: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 849: LD_ADDR_VAR 0 12
 853: PUSH
 854: LD_INT 5
 856: PPUSH
 857: LD_INT 0
 859: PPUSH
 860: CALL_OW 517
 864: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 865: LD_ADDR_VAR 0 2
 869: PUSH
 870: DOUBLE
 871: LD_INT 1
 873: DEC
 874: ST_TO_ADDR
 875: LD_VAR 0 12
 879: PUSH
 880: LD_INT 1
 882: ARRAY
 883: PUSH
 884: FOR_TO
 885: IFFALSE 962
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 887: LD_VAR 0 12
 891: PUSH
 892: LD_INT 1
 894: ARRAY
 895: PUSH
 896: LD_VAR 0 2
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 12
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PUSH
 911: LD_VAR 0 2
 915: ARRAY
 916: PPUSH
 917: CALL_OW 351
 921: IFFALSE 960
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 923: LD_VAR 0 12
 927: PUSH
 928: LD_INT 1
 930: ARRAY
 931: PUSH
 932: LD_VAR 0 2
 936: ARRAY
 937: PPUSH
 938: LD_VAR 0 12
 942: PUSH
 943: LD_INT 2
 945: ARRAY
 946: PUSH
 947: LD_VAR 0 2
 951: ARRAY
 952: PPUSH
 953: LD_INT 2
 955: PPUSH
 956: CALL_OW 244
 960: GO 884
 962: POP
 963: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 964: LD_ADDR_VAR 0 4
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 206
 974: PUSH
 975: LD_INT 80
 977: PUSH
 978: LD_INT 1
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: LD_INT 32
 989: PUSH
 990: LD_INT 221
 992: PUSH
 993: LD_INT 95
 995: PUSH
 996: LD_INT 5
 998: PUSH
 999: LD_INT 23
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 32
1011: PUSH
1012: LD_INT 223
1014: PUSH
1015: LD_INT 88
1017: PUSH
1018: LD_INT 5
1020: PUSH
1021: LD_INT 24
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 32
1033: PUSH
1034: LD_INT 202
1036: PUSH
1037: LD_INT 64
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 25
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_INT 3
1055: PUSH
1056: LD_INT 203
1058: PUSH
1059: LD_INT 91
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 8
1073: PUSH
1074: LD_INT 217
1076: PUSH
1077: LD_INT 78
1079: PUSH
1080: LD_INT 4
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 27
1091: PUSH
1092: LD_INT 220
1094: PUSH
1095: LD_INT 99
1097: PUSH
1098: LD_INT 1
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 27
1109: PUSH
1110: LD_INT 220
1112: PUSH
1113: LD_INT 103
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_INT 27
1127: PUSH
1128: LD_INT 216
1130: PUSH
1131: LD_INT 102
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 17
1145: PUSH
1146: LD_INT 203
1148: PUSH
1149: LD_INT 94
1151: PUSH
1152: LD_INT 0
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: PUSH
1161: LD_INT 23
1163: PUSH
1164: LD_INT 200
1166: PUSH
1167: LD_INT 88
1169: PUSH
1170: LD_INT 2
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_INT 16
1181: PUSH
1182: LD_INT 199
1184: PUSH
1185: LD_INT 91
1187: PUSH
1188: LD_INT 1
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 26
1199: PUSH
1200: LD_INT 197
1202: PUSH
1203: LD_INT 81
1205: PUSH
1206: LD_INT 1
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 197
1220: PUSH
1221: LD_INT 78
1223: PUSH
1224: LD_INT 3
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: ST_TO_ADDR
// if hasRadar then
1249: LD_VAR 0 5
1253: IFFALSE 1297
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1255: LD_ADDR_VAR 0 4
1259: PUSH
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_VAR 0 4
1269: PUSH
1270: LD_INT 1
1272: PLUS
1273: PPUSH
1274: LD_INT 20
1276: PUSH
1277: LD_INT 203
1279: PUSH
1280: LD_INT 87
1282: PUSH
1283: LD_INT 3
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 1
1296: ST_TO_ADDR
// if hasRemote then
1297: LD_VAR 0 6
1301: IFFALSE 1345
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1303: LD_ADDR_VAR 0 4
1307: PUSH
1308: LD_VAR 0 4
1312: PPUSH
1313: LD_VAR 0 4
1317: PUSH
1318: LD_INT 1
1320: PLUS
1321: PPUSH
1322: LD_INT 22
1324: PUSH
1325: LD_INT 207
1327: PUSH
1328: LD_INT 95
1330: PUSH
1331: LD_INT 5
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 1
1344: ST_TO_ADDR
// for i in base do
1345: LD_ADDR_VAR 0 2
1349: PUSH
1350: LD_VAR 0 4
1354: PUSH
1355: FOR_IN
1356: IFFALSE 1537
// begin bc_type := i [ 1 ] ;
1358: LD_ADDR_OWVAR 42
1362: PUSH
1363: LD_VAR 0 2
1367: PUSH
1368: LD_INT 1
1370: ARRAY
1371: ST_TO_ADDR
// bc_level := 3 ;
1372: LD_ADDR_OWVAR 43
1376: PUSH
1377: LD_INT 3
1379: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1380: LD_VAR 0 2
1384: PUSH
1385: LD_INT 1
1387: ARRAY
1388: PUSH
1389: LD_INT 8
1391: EQUAL
1392: IFFALSE 1427
// begin bc_kind1 := b_lab_weapon ;
1394: LD_ADDR_OWVAR 44
1398: PUSH
1399: LD_INT 10
1401: ST_TO_ADDR
// if hasRadar then
1402: LD_VAR 0 5
1406: IFFALSE 1418
// bc_kind2 := b_lab_opto else
1408: LD_ADDR_OWVAR 45
1412: PUSH
1413: LD_INT 15
1415: ST_TO_ADDR
1416: GO 1427
// bc_kind2 := - 1 ;
1418: LD_ADDR_OWVAR 45
1422: PUSH
1423: LD_INT 1
1425: NEG
1426: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1427: LD_ADDR_VAR 0 3
1431: PUSH
1432: LD_VAR 0 2
1436: PUSH
1437: LD_INT 2
1439: ARRAY
1440: PPUSH
1441: LD_VAR 0 2
1445: PUSH
1446: LD_INT 3
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 2
1454: PUSH
1455: LD_INT 4
1457: ARRAY
1458: PPUSH
1459: CALL_OW 47
1463: ST_TO_ADDR
// if i > 4 then
1464: LD_VAR 0 2
1468: PUSH
1469: LD_INT 4
1471: GREATER
1472: IFFALSE 1492
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1474: LD_VAR 0 3
1478: PPUSH
1479: LD_VAR 0 2
1483: PUSH
1484: LD_INT 5
1486: ARRAY
1487: PPUSH
1488: CALL_OW 431
// if i [ 1 ] = b_bunker then
1492: LD_VAR 0 2
1496: PUSH
1497: LD_INT 1
1499: ARRAY
1500: PUSH
1501: LD_INT 32
1503: EQUAL
1504: IFFALSE 1535
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1506: LD_ADDR_VAR 0 11
1510: PUSH
1511: LD_VAR 0 11
1515: PPUSH
1516: LD_VAR 0 11
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_VAR 0 3
1529: PPUSH
1530: CALL_OW 1
1534: ST_TO_ADDR
// end ;
1535: GO 1355
1537: POP
1538: POP
// depot := HexInfo ( 206 , 80 ) ;
1539: LD_ADDR_VAR 0 9
1543: PUSH
1544: LD_INT 206
1546: PPUSH
1547: LD_INT 80
1549: PPUSH
1550: CALL_OW 428
1554: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1555: LD_ADDR_VAR 0 8
1559: PUSH
1560: LD_INT 203
1562: PPUSH
1563: LD_INT 91
1565: PPUSH
1566: CALL_OW 428
1570: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1571: LD_ADDR_VAR 0 10
1575: PUSH
1576: LD_INT 217
1578: PPUSH
1579: LD_INT 78
1581: PPUSH
1582: CALL_OW 428
1586: ST_TO_ADDR
// arDepot := depot ;
1587: LD_ADDR_EXP 44
1591: PUSH
1592: LD_VAR 0 9
1596: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 , 120 ] [ Difficulty ] ) ;
1597: LD_VAR 0 9
1601: PPUSH
1602: CALL_OW 274
1606: PPUSH
1607: LD_INT 1
1609: PPUSH
1610: LD_INT 360
1612: PUSH
1613: LD_INT 260
1615: PUSH
1616: LD_INT 160
1618: PUSH
1619: LD_INT 120
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_OWVAR 67
1632: ARRAY
1633: PPUSH
1634: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 , 100 ] [ Difficulty ] ) ;
1638: LD_VAR 0 9
1642: PPUSH
1643: CALL_OW 274
1647: PPUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 200
1653: PUSH
1654: LD_INT 170
1656: PUSH
1657: LD_INT 130
1659: PUSH
1660: LD_INT 100
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_OWVAR 67
1673: ARRAY
1674: PPUSH
1675: CALL_OW 277
// uc_nation := 2 ;
1679: LD_ADDR_OWVAR 21
1683: PUSH
1684: LD_INT 2
1686: ST_TO_ADDR
// uc_side := 2 ;
1687: LD_ADDR_OWVAR 20
1691: PUSH
1692: LD_INT 2
1694: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1695: LD_INT 13
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 27
1706: PPUSH
1707: LD_INT 33
1709: PPUSH
1710: CALL 30222 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1714: CALL_OW 45
1718: PPUSH
1719: LD_INT 190
1721: PPUSH
1722: LD_INT 64
1724: PPUSH
1725: LD_INT 5
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL 64796 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1735: LD_INT 13
1737: PPUSH
1738: LD_INT 1
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 25
1746: PPUSH
1747: LD_INT 22
1749: PPUSH
1750: CALL 30222 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1754: CALL_OW 45
1758: PPUSH
1759: LD_INT 188
1761: PPUSH
1762: LD_INT 67
1764: PPUSH
1765: LD_INT 5
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL 64796 0 5
// if hasRemote then
1775: LD_VAR 0 6
1779: IFFALSE 1861
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1781: LD_INT 13
1783: PPUSH
1784: LD_INT 1
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 31
1792: PPUSH
1793: LD_INT 35
1795: PPUSH
1796: CALL 30222 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1800: CALL_OW 45
1804: PPUSH
1805: LD_INT 191
1807: PPUSH
1808: LD_INT 71
1810: PPUSH
1811: LD_INT 5
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL 64796 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1821: LD_INT 14
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: LD_INT 27
1832: PPUSH
1833: LD_INT 55
1835: PPUSH
1836: CALL 30222 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1840: CALL_OW 45
1844: PPUSH
1845: LD_INT 199
1847: PPUSH
1848: LD_INT 67
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL 64796 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1861: LD_EXP 30
1865: PPUSH
1866: LD_INT 213
1868: PPUSH
1869: LD_INT 87
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1879: LD_EXP 30
1883: PPUSH
1884: LD_INT 214
1886: PPUSH
1887: LD_INT 87
1889: PPUSH
1890: CALL_OW 118
// if Kaia then
1894: LD_EXP 35
1898: IFFALSE 1933
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1900: LD_EXP 35
1904: PPUSH
1905: LD_INT 213
1907: PPUSH
1908: LD_INT 85
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1918: LD_EXP 35
1922: PPUSH
1923: LD_INT 215
1925: PPUSH
1926: LD_INT 87
1928: PPUSH
1929: CALL_OW 118
// end ; if Olaf and Kaia then
1933: LD_EXP 39
1937: PUSH
1938: LD_EXP 35
1942: AND
1943: IFFALSE 1980
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1945: LD_EXP 39
1949: PPUSH
1950: LD_INT 215
1952: PPUSH
1953: LD_INT 87
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1963: LD_EXP 39
1967: PPUSH
1968: LD_INT 213
1970: PPUSH
1971: LD_INT 85
1973: PPUSH
1974: CALL_OW 118
// end else
1978: GO 2000
// if Olaf then
1980: LD_EXP 39
1984: IFFALSE 2000
// PlaceHumanInUnit ( Olaf , factory ) ;
1986: LD_EXP 39
1990: PPUSH
1991: LD_VAR 0 8
1995: PPUSH
1996: CALL_OW 52
// if Givi then
2000: LD_EXP 31
2004: IFFALSE 2085
// begin if Kaia and Olaf then
2006: LD_EXP 35
2010: PUSH
2011: LD_EXP 39
2015: AND
2016: IFFALSE 2053
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2018: LD_EXP 31
2022: PPUSH
2023: LD_INT 247
2025: PPUSH
2026: LD_INT 117
2028: PPUSH
2029: LD_INT 0
2031: PPUSH
2032: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2036: LD_EXP 31
2040: PPUSH
2041: LD_INT 248
2043: PPUSH
2044: LD_INT 118
2046: PPUSH
2047: CALL_OW 118
// end else
2051: GO 2085
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2053: LD_EXP 31
2057: PPUSH
2058: LD_INT 216
2060: PPUSH
2061: LD_INT 88
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2071: LD_EXP 31
2075: PPUSH
2076: LD_EXP 30
2080: PPUSH
2081: CALL_OW 119
// end ; end ; if Kurt then
2085: LD_EXP 41
2089: IFFALSE 2109
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2091: LD_EXP 41
2095: PPUSH
2096: LD_VAR 0 11
2100: PUSH
2101: LD_INT 2
2103: ARRAY
2104: PPUSH
2105: CALL_OW 52
// if Mike then
2109: LD_EXP 32
2113: IFFALSE 2133
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2115: LD_EXP 32
2119: PPUSH
2120: LD_VAR 0 11
2124: PUSH
2125: LD_INT 3
2127: ARRAY
2128: PPUSH
2129: CALL_OW 52
// if Kamil then
2133: LD_EXP 34
2137: IFFALSE 2199
// begin if Kaia and Olaf then
2139: LD_EXP 35
2143: PUSH
2144: LD_EXP 39
2148: AND
2149: IFFALSE 2167
// PlaceHumanInUnit ( Kamil , depot ) else
2151: LD_EXP 34
2155: PPUSH
2156: LD_VAR 0 9
2160: PPUSH
2161: CALL_OW 52
2165: GO 2199
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2167: LD_EXP 34
2171: PPUSH
2172: LD_INT 213
2174: PPUSH
2175: LD_INT 87
2177: PPUSH
2178: LD_INT 0
2180: PPUSH
2181: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2185: LD_EXP 34
2189: PPUSH
2190: LD_EXP 30
2194: PPUSH
2195: CALL_OW 119
// end ; end ; if Sophia then
2199: LD_EXP 36
2203: IFFALSE 2219
// PlaceHumanInUnit ( Sophia , depot ) ;
2205: LD_EXP 36
2209: PPUSH
2210: LD_VAR 0 9
2214: PPUSH
2215: CALL_OW 52
// if Aviradze then
2219: LD_EXP 42
2223: IFFALSE 2239
// PlaceHumanInUnit ( Aviradze , lab ) ;
2225: LD_EXP 42
2229: PPUSH
2230: LD_VAR 0 10
2234: PPUSH
2235: CALL_OW 52
// if Ibrahim then
2239: LD_EXP 33
2243: IFFALSE 2259
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2245: LD_EXP 33
2249: PPUSH
2250: LD_VAR 0 10
2254: PPUSH
2255: CALL_OW 52
// if Markov then
2259: LD_EXP 37
2263: IFFALSE 2279
// PlaceHumanInUnit ( Markov , factory ) ;
2265: LD_EXP 37
2269: PPUSH
2270: LD_VAR 0 8
2274: PPUSH
2275: CALL_OW 52
// if heikeSecondSquad then
2279: LD_EXP 45
2283: IFFALSE 2323
// for i in heikeSecondSquad do
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: LD_EXP 45
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2321
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2298: LD_VAR 0 2
2302: PPUSH
2303: LD_INT 190
2305: PPUSH
2306: LD_INT 65
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: LD_INT 0
2314: PPUSH
2315: CALL_OW 50
2319: GO 2295
2321: POP
2322: POP
// if heikeApes then
2323: LD_EXP 46
2327: IFFALSE 2367
// for i in heikeApes do
2329: LD_ADDR_VAR 0 2
2333: PUSH
2334: LD_EXP 46
2338: PUSH
2339: FOR_IN
2340: IFFALSE 2365
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2342: LD_VAR 0 2
2346: PPUSH
2347: LD_INT 190
2349: PPUSH
2350: LD_INT 70
2352: PPUSH
2353: LD_INT 5
2355: PPUSH
2356: LD_INT 0
2358: PPUSH
2359: CALL_OW 50
2363: GO 2339
2365: POP
2366: POP
// end ;
2367: LD_VAR 0 1
2371: RET
// export function PrepareRolfSquad ; var i , j ; begin
2372: LD_INT 0
2374: PPUSH
2375: PPUSH
2376: PPUSH
// uc_side := 8 ;
2377: LD_ADDR_OWVAR 20
2381: PUSH
2382: LD_INT 8
2384: ST_TO_ADDR
// uc_nation := 2 ;
2385: LD_ADDR_OWVAR 21
2389: PUSH
2390: LD_INT 2
2392: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2393: LD_ADDR_EXP 43
2397: PUSH
2398: LD_STRING Bergkamp
2400: PPUSH
2401: CALL_OW 25
2405: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2406: LD_ADDR_EXP 47
2410: PUSH
2411: LD_EXP 43
2415: PUSH
2416: EMPTY
2417: LIST
2418: ST_TO_ADDR
// for i := 1 to 4 do
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: DOUBLE
2425: LD_INT 1
2427: DEC
2428: ST_TO_ADDR
2429: LD_INT 4
2431: PUSH
2432: FOR_TO
2433: IFFALSE 2513
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2435: LD_ADDR_VAR 0 3
2439: PUSH
2440: DOUBLE
2441: LD_INT 1
2443: DEC
2444: ST_TO_ADDR
2445: LD_INT 5
2447: PUSH
2448: LD_INT 2
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 1
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_VAR 0 2
2467: ARRAY
2468: PUSH
2469: FOR_TO
2470: IFFALSE 2509
// begin PrepareHuman ( false , i , 5 ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 5
2482: PPUSH
2483: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2487: LD_ADDR_EXP 47
2491: PUSH
2492: LD_EXP 47
2496: PPUSH
2497: CALL_OW 44
2501: PPUSH
2502: CALL 62656 0 2
2506: ST_TO_ADDR
// end ;
2507: GO 2469
2509: POP
2510: POP
// end ;
2511: GO 2432
2513: POP
2514: POP
// if HexInfo ( 5 , 3 ) then
2515: LD_INT 5
2517: PPUSH
2518: LD_INT 3
2520: PPUSH
2521: CALL_OW 428
2525: IFFALSE 2542
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2527: LD_INT 5
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 428
2537: PPUSH
2538: CALL_OW 64
// for i in rolfSquad do
2542: LD_ADDR_VAR 0 2
2546: PUSH
2547: LD_EXP 47
2551: PUSH
2552: FOR_IN
2553: IFFALSE 2689
// begin uc_direction := 2 ;
2555: LD_ADDR_OWVAR 24
2559: PUSH
2560: LD_INT 2
2562: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2563: LD_VAR 0 2
2567: PPUSH
2568: CALL_OW 257
2572: PUSH
2573: LD_INT 3
2575: EQUAL
2576: IFFALSE 2650
// begin uc_side := 8 ;
2578: LD_ADDR_OWVAR 20
2582: PUSH
2583: LD_INT 8
2585: ST_TO_ADDR
// uc_nation := 2 ;
2586: LD_ADDR_OWVAR 21
2590: PUSH
2591: LD_INT 2
2593: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2594: LD_INT 13
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: LD_INT 1
2602: PPUSH
2603: LD_INT 27
2605: PPUSH
2606: LD_INT 88
2608: PPUSH
2609: CALL 30222 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2613: CALL_OW 45
2617: PPUSH
2618: LD_INT 11
2620: PPUSH
2621: LD_INT 0
2623: PPUSH
2624: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2628: LD_VAR 0 2
2632: PPUSH
2633: LD_INT 5
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: CALL_OW 428
2643: PPUSH
2644: CALL_OW 52
// end else
2648: GO 2665
// PlaceUnitArea ( i , northSpawn , false ) ;
2650: LD_VAR 0 2
2654: PPUSH
2655: LD_INT 11
2657: PPUSH
2658: LD_INT 0
2660: PPUSH
2661: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2665: LD_VAR 0 2
2669: PPUSH
2670: LD_INT 29
2672: PPUSH
2673: LD_INT 10
2675: PPUSH
2676: CALL_OW 111
// wait ( 0 0$2 ) ;
2680: LD_INT 70
2682: PPUSH
2683: CALL_OW 67
// end ;
2687: GO 2552
2689: POP
2690: POP
// wait ( 0 0$5 ) ;
2691: LD_INT 175
2693: PPUSH
2694: CALL_OW 67
// end ;
2698: LD_VAR 0 1
2702: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2703: LD_INT 0
2705: PPUSH
2706: PPUSH
2707: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2708: LD_EXP 43
2712: PPUSH
2713: LD_INT 94
2715: PPUSH
2716: LD_INT 63
2718: PPUSH
2719: CALL_OW 428
2723: PPUSH
2724: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: LD_INT 4
2735: PUSH
2736: LD_INT 82
2738: PUSH
2739: LD_INT 64
2741: PUSH
2742: LD_INT 1
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 31
2753: PUSH
2754: LD_INT 73
2756: PUSH
2757: LD_INT 58
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: ST_TO_ADDR
// for i in tmp do
2773: LD_ADDR_VAR 0 2
2777: PUSH
2778: LD_VAR 0 3
2782: PUSH
2783: FOR_IN
2784: IFFALSE 2848
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2786: LD_EXP 47
2790: PPUSH
2791: LD_INT 25
2793: PUSH
2794: LD_INT 2
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PPUSH
2801: CALL_OW 72
2805: PPUSH
2806: LD_VAR 0 2
2810: PUSH
2811: LD_INT 1
2813: ARRAY
2814: PPUSH
2815: LD_VAR 0 2
2819: PUSH
2820: LD_INT 2
2822: ARRAY
2823: PPUSH
2824: LD_VAR 0 2
2828: PUSH
2829: LD_INT 3
2831: ARRAY
2832: PPUSH
2833: LD_VAR 0 2
2837: PUSH
2838: LD_INT 4
2840: ARRAY
2841: PPUSH
2842: CALL_OW 205
2846: GO 2783
2848: POP
2849: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2850: LD_EXP 47
2854: PUSH
2855: LD_INT 2
2857: ARRAY
2858: PPUSH
2859: LD_INT 63
2861: PPUSH
2862: LD_INT 42
2864: PPUSH
2865: CALL_OW 428
2869: PPUSH
2870: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2874: LD_EXP 47
2878: PUSH
2879: LD_INT 3
2881: ARRAY
2882: PPUSH
2883: LD_INT 94
2885: PPUSH
2886: LD_INT 63
2888: PPUSH
2889: CALL_OW 428
2893: PPUSH
2894: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2898: LD_INT 35
2900: PPUSH
2901: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2905: LD_EXP 47
2909: PPUSH
2910: LD_INT 25
2912: PUSH
2913: LD_INT 2
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: LD_INT 60
2925: PUSH
2926: EMPTY
2927: LIST
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 72
2941: IFFALSE 2898
// rolfScriptBase := true ;
2943: LD_ADDR_EXP 9
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// end ;
2951: LD_VAR 0 1
2955: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2956: LD_EXP 9
2960: PUSH
2961: LD_EXP 43
2965: PPUSH
2966: CALL_OW 255
2970: PUSH
2971: LD_INT 8
2973: EQUAL
2974: AND
2975: IFFALSE 3982
2977: GO 2979
2979: DISABLE
2980: LD_INT 0
2982: PPUSH
2983: PPUSH
2984: PPUSH
2985: PPUSH
2986: PPUSH
2987: PPUSH
2988: PPUSH
2989: PPUSH
2990: PPUSH
2991: PPUSH
// begin enable ;
2992: ENABLE
// if not rolfSquad then
2993: LD_EXP 47
2997: NOT
2998: IFFALSE 3002
// exit ;
3000: GO 3982
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3002: LD_ADDR_VAR 0 9
3006: PUSH
3007: LD_INT 12
3009: PPUSH
3010: LD_INT 81
3012: PUSH
3013: LD_INT 8
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PPUSH
3020: CALL_OW 70
3024: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3025: LD_ADDR_VAR 0 5
3029: PUSH
3030: LD_EXP 47
3034: PPUSH
3035: LD_INT 25
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PPUSH
3045: CALL_OW 72
3049: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3050: LD_ADDR_VAR 0 6
3054: PUSH
3055: LD_EXP 47
3059: PPUSH
3060: LD_INT 25
3062: PUSH
3063: LD_INT 2
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PPUSH
3070: CALL_OW 72
3074: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3075: LD_ADDR_VAR 0 8
3079: PUSH
3080: LD_EXP 47
3084: PPUSH
3085: LD_INT 25
3087: PUSH
3088: LD_INT 3
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PPUSH
3095: CALL_OW 72
3099: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3100: LD_ADDR_VAR 0 7
3104: PUSH
3105: LD_EXP 47
3109: PPUSH
3110: LD_INT 25
3112: PUSH
3113: LD_INT 4
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL_OW 72
3124: ST_TO_ADDR
// if sol then
3125: LD_VAR 0 5
3129: IFFALSE 3427
// for i in sol union Rolf do
3131: LD_ADDR_VAR 0 1
3135: PUSH
3136: LD_VAR 0 5
3140: PUSH
3141: LD_EXP 43
3145: UNION
3146: PUSH
3147: FOR_IN
3148: IFFALSE 3425
// if not IsInUnit ( i ) and not HasTask ( i ) then
3150: LD_VAR 0 1
3154: PPUSH
3155: CALL_OW 310
3159: NOT
3160: PUSH
3161: LD_VAR 0 1
3165: PPUSH
3166: CALL_OW 314
3170: NOT
3171: AND
3172: IFFALSE 3423
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3174: LD_VAR 0 1
3178: PPUSH
3179: CALL_OW 256
3183: PUSH
3184: LD_INT 500
3186: LESS
3187: PUSH
3188: LD_VAR 0 1
3192: PPUSH
3193: LD_INT 80
3195: PPUSH
3196: LD_INT 49
3198: PPUSH
3199: CALL_OW 297
3203: PUSH
3204: LD_INT 6
3206: GREATER
3207: AND
3208: IFFALSE 3227
// begin ComMoveXY ( i , 80 , 49 ) ;
3210: LD_VAR 0 1
3214: PPUSH
3215: LD_INT 80
3217: PPUSH
3218: LD_INT 49
3220: PPUSH
3221: CALL_OW 111
// continue ;
3225: GO 3147
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3227: LD_ADDR_VAR 0 4
3231: PUSH
3232: LD_INT 22
3234: PUSH
3235: LD_INT 8
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 50
3244: PUSH
3245: EMPTY
3246: LIST
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 30
3253: PUSH
3254: LD_INT 4
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 30
3263: PUSH
3264: LD_INT 5
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 30
3273: PUSH
3274: LD_INT 32
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 31
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: PPUSH
3303: CALL_OW 69
3307: ST_TO_ADDR
// if tmp then
3308: LD_VAR 0 4
3312: IFFALSE 3423
// begin for b in tmp do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: LD_VAR 0 4
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3421
// begin case GetBType ( b ) of b_armoury , b_barracks :
3327: LD_VAR 0 2
3331: PPUSH
3332: CALL_OW 266
3336: PUSH
3337: LD_INT 4
3339: DOUBLE
3340: EQUAL
3341: IFTRUE 3351
3343: LD_INT 5
3345: DOUBLE
3346: EQUAL
3347: IFTRUE 3351
3349: GO 3362
3351: POP
// p := 6 ; b_breastwork , b_bunker :
3352: LD_ADDR_VAR 0 3
3356: PUSH
3357: LD_INT 6
3359: ST_TO_ADDR
3360: GO 3388
3362: LD_INT 31
3364: DOUBLE
3365: EQUAL
3366: IFTRUE 3376
3368: LD_INT 32
3370: DOUBLE
3371: EQUAL
3372: IFTRUE 3376
3374: GO 3387
3376: POP
// p := 1 ; end ;
3377: LD_ADDR_VAR 0 3
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
3385: GO 3388
3387: POP
// if UnitsInside ( b ) < p then
3388: LD_VAR 0 2
3392: PPUSH
3393: CALL_OW 313
3397: PUSH
3398: LD_VAR 0 3
3402: LESS
3403: IFFALSE 3419
// ComEnterUnit ( i , b ) ;
3405: LD_VAR 0 1
3409: PPUSH
3410: LD_VAR 0 2
3414: PPUSH
3415: CALL_OW 120
// end ;
3419: GO 3324
3421: POP
3422: POP
// end ; end ;
3423: GO 3147
3425: POP
3426: POP
// if sci then
3427: LD_VAR 0 7
3431: IFFALSE 3486
// for i in sci do
3433: LD_ADDR_VAR 0 1
3437: PUSH
3438: LD_VAR 0 7
3442: PUSH
3443: FOR_IN
3444: IFFALSE 3484
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3446: LD_VAR 0 1
3450: PPUSH
3451: LD_INT 80
3453: PPUSH
3454: LD_INT 49
3456: PPUSH
3457: CALL_OW 297
3461: PUSH
3462: LD_INT 9
3464: GREATER
3465: IFFALSE 3482
// ComMoveXY ( i , 80 , 49 ) ;
3467: LD_VAR 0 1
3471: PPUSH
3472: LD_INT 80
3474: PPUSH
3475: LD_INT 49
3477: PPUSH
3478: CALL_OW 111
// end ;
3482: GO 3443
3484: POP
3485: POP
// if mech then
3486: LD_VAR 0 8
3490: IFFALSE 3704
// for i in mech do
3492: LD_ADDR_VAR 0 1
3496: PUSH
3497: LD_VAR 0 8
3501: PUSH
3502: FOR_IN
3503: IFFALSE 3702
// begin hasVehicle := IsInUnit ( i ) ;
3505: LD_ADDR_VAR 0 10
3509: PUSH
3510: LD_VAR 0 1
3514: PPUSH
3515: CALL_OW 310
3519: ST_TO_ADDR
// if enemyInBase then
3520: LD_VAR 0 9
3524: IFFALSE 3620
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3526: LD_VAR 0 10
3530: PUSH
3531: LD_VAR 0 10
3535: PPUSH
3536: CALL_OW 256
3540: PUSH
3541: LD_INT 500
3543: GREATER
3544: AND
3545: IFFALSE 3573
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3547: LD_VAR 0 10
3551: PPUSH
3552: LD_VAR 0 9
3556: PPUSH
3557: LD_VAR 0 10
3561: PPUSH
3562: CALL_OW 74
3566: PPUSH
3567: CALL_OW 115
3571: GO 3618
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3573: LD_VAR 0 10
3577: PPUSH
3578: LD_INT 86
3580: PPUSH
3581: LD_INT 49
3583: PPUSH
3584: CALL_OW 297
3588: PUSH
3589: LD_INT 8
3591: GREATER
3592: IFFALSE 3618
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3594: LD_VAR 0 10
3598: PPUSH
3599: LD_INT 86
3601: PPUSH
3602: LD_INT 49
3604: PPUSH
3605: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3609: LD_VAR 0 1
3613: PPUSH
3614: CALL 64476 0 1
// end end else
3618: GO 3700
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3620: LD_VAR 0 1
3624: PPUSH
3625: LD_INT 86
3627: PPUSH
3628: LD_INT 49
3630: PPUSH
3631: CALL_OW 297
3635: PUSH
3636: LD_INT 8
3638: GREATER
3639: IFFALSE 3658
// ComMoveXY ( i , 86 , 49 ) else
3641: LD_VAR 0 1
3645: PPUSH
3646: LD_INT 86
3648: PPUSH
3649: LD_INT 49
3651: PPUSH
3652: CALL_OW 111
3656: GO 3700
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3658: LD_VAR 0 10
3662: PUSH
3663: LD_VAR 0 10
3667: PPUSH
3668: CALL_OW 256
3672: PUSH
3673: LD_INT 1000
3675: LESS
3676: AND
3677: IFFALSE 3700
// begin SetFuel ( hasVehicle , 100 ) ;
3679: LD_VAR 0 10
3683: PPUSH
3684: LD_INT 100
3686: PPUSH
3687: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3691: LD_VAR 0 1
3695: PPUSH
3696: CALL 64356 0 1
// end ; end ; end ;
3700: GO 3502
3702: POP
3703: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3704: LD_ADDR_VAR 0 4
3708: PUSH
3709: LD_INT 12
3711: PPUSH
3712: LD_INT 3
3714: PUSH
3715: LD_INT 24
3717: PUSH
3718: LD_INT 1000
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 21
3731: PUSH
3732: LD_INT 3
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 70
3747: ST_TO_ADDR
// if tmp and eng then
3748: LD_VAR 0 4
3752: PUSH
3753: LD_VAR 0 6
3757: AND
3758: IFFALSE 3864
// begin for i in eng do
3760: LD_ADDR_VAR 0 1
3764: PUSH
3765: LD_VAR 0 6
3769: PUSH
3770: FOR_IN
3771: IFFALSE 3862
// if IsInUnit ( i ) then
3773: LD_VAR 0 1
3777: PPUSH
3778: CALL_OW 310
3782: IFFALSE 3795
// ComExitBuilding ( i ) else
3784: LD_VAR 0 1
3788: PPUSH
3789: CALL_OW 122
3793: GO 3860
// if GetLives ( i ) = 1000 then
3795: LD_VAR 0 1
3799: PPUSH
3800: CALL_OW 256
3804: PUSH
3805: LD_INT 1000
3807: EQUAL
3808: IFFALSE 3830
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3810: LD_VAR 0 1
3814: PPUSH
3815: LD_VAR 0 4
3819: PUSH
3820: LD_INT 1
3822: ARRAY
3823: PPUSH
3824: CALL_OW 130
3828: GO 3860
// if GetLives ( i ) < 700 then
3830: LD_VAR 0 1
3834: PPUSH
3835: CALL_OW 256
3839: PUSH
3840: LD_INT 700
3842: LESS
3843: IFFALSE 3860
// ComMoveXY ( i , 80 , 49 ) ;
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_INT 80
3852: PPUSH
3853: LD_INT 49
3855: PPUSH
3856: CALL_OW 111
3860: GO 3770
3862: POP
3863: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3864: LD_VAR 0 4
3868: NOT
3869: PUSH
3870: LD_VAR 0 6
3874: PPUSH
3875: LD_INT 3
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: EMPTY
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 72
3892: AND
3893: IFFALSE 3982
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 6
3904: PPUSH
3905: LD_INT 3
3907: PUSH
3908: LD_INT 54
3910: PUSH
3911: EMPTY
3912: LIST
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 72
3922: PUSH
3923: FOR_IN
3924: IFFALSE 3980
// if GetLives ( i ) < 1000 then
3926: LD_VAR 0 1
3930: PPUSH
3931: CALL_OW 256
3935: PUSH
3936: LD_INT 1000
3938: LESS
3939: IFFALSE 3958
// ComMoveXY ( i , 80 , 49 ) else
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 80
3948: PPUSH
3949: LD_INT 49
3951: PPUSH
3952: CALL_OW 111
3956: GO 3978
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_INT 86
3965: PPUSH
3966: LD_INT 54
3968: PPUSH
3969: CALL_OW 428
3973: PPUSH
3974: CALL_OW 120
3978: GO 3923
3980: POP
3981: POP
// end ;
3982: PPOPN 10
3984: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3985: LD_INT 0
3987: PPUSH
3988: PPUSH
3989: PPUSH
3990: PPUSH
// uc_side := 5 ;
3991: LD_ADDR_OWVAR 20
3995: PUSH
3996: LD_INT 5
3998: ST_TO_ADDR
// uc_nation := 2 ;
3999: LD_ADDR_OWVAR 21
4003: PUSH
4004: LD_INT 2
4006: ST_TO_ADDR
// omarSquad := [ ] ;
4007: LD_ADDR_EXP 48
4011: PUSH
4012: EMPTY
4013: ST_TO_ADDR
// for i := 1 to 4 do
4014: LD_ADDR_VAR 0 2
4018: PUSH
4019: DOUBLE
4020: LD_INT 1
4022: DEC
4023: ST_TO_ADDR
4024: LD_INT 4
4026: PUSH
4027: FOR_TO
4028: IFFALSE 4151
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4030: LD_ADDR_VAR 0 3
4034: PUSH
4035: DOUBLE
4036: LD_INT 1
4038: DEC
4039: ST_TO_ADDR
4040: LD_INT 6
4042: PUSH
4043: LD_INT 2
4045: PUSH
4046: LD_INT 2
4048: PUSH
4049: LD_EXP 21
4053: PLUS
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: PUSH
4064: LD_VAR 0 2
4068: ARRAY
4069: PUSH
4070: FOR_TO
4071: IFFALSE 4147
// begin PrepareHuman ( false , i , 5 ) ;
4073: LD_INT 0
4075: PPUSH
4076: LD_VAR 0 2
4080: PPUSH
4081: LD_INT 5
4083: PPUSH
4084: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4088: LD_ADDR_EXP 48
4092: PUSH
4093: LD_EXP 48
4097: PPUSH
4098: CALL_OW 44
4102: PPUSH
4103: CALL 62656 0 2
4107: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4108: LD_VAR 0 2
4112: PUSH
4113: LD_INT 1
4115: EQUAL
4116: PUSH
4117: LD_INT 50
4119: PPUSH
4120: CALL_OW 13
4124: AND
4125: IFFALSE 4145
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4127: LD_EXP 48
4131: PUSH
4132: LD_EXP 48
4136: ARRAY
4137: PPUSH
4138: LD_INT 8
4140: PPUSH
4141: CALL_OW 336
// end ;
4145: GO 4070
4147: POP
4148: POP
// end ;
4149: GO 4027
4151: POP
4152: POP
// if HexInfo ( 340 , 205 ) then
4153: LD_INT 340
4155: PPUSH
4156: LD_INT 205
4158: PPUSH
4159: CALL_OW 428
4163: IFFALSE 4180
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4165: LD_INT 340
4167: PPUSH
4168: LD_INT 205
4170: PPUSH
4171: CALL_OW 428
4175: PPUSH
4176: CALL_OW 64
// p := 0 ;
4180: LD_ADDR_VAR 0 4
4184: PUSH
4185: LD_INT 0
4187: ST_TO_ADDR
// for i in omarSquad do
4188: LD_ADDR_VAR 0 2
4192: PUSH
4193: LD_EXP 48
4197: PUSH
4198: FOR_IN
4199: IFFALSE 4400
// begin uc_direction := 4 ;
4201: LD_ADDR_OWVAR 24
4205: PUSH
4206: LD_INT 4
4208: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4209: LD_VAR 0 2
4213: PPUSH
4214: CALL_OW 257
4218: PUSH
4219: LD_INT 3
4221: EQUAL
4222: PUSH
4223: LD_VAR 0 4
4227: PUSH
4228: LD_INT 2
4230: LESS
4231: AND
4232: IFFALSE 4361
// begin p := p + 1 ;
4234: LD_ADDR_VAR 0 4
4238: PUSH
4239: LD_VAR 0 4
4243: PUSH
4244: LD_INT 1
4246: PLUS
4247: ST_TO_ADDR
// uc_side := 5 ;
4248: LD_ADDR_OWVAR 20
4252: PUSH
4253: LD_INT 5
4255: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4256: LD_INT 0
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: CALL_OW 12
4266: IFFALSE 4297
// begin uc_nation := 2 ;
4268: LD_ADDR_OWVAR 21
4272: PUSH
4273: LD_INT 2
4275: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4276: LD_INT 13
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_INT 1
4284: PPUSH
4285: LD_INT 27
4287: PPUSH
4288: LD_INT 88
4290: PPUSH
4291: CALL 30222 0 5
// end else
4295: GO 4324
// begin uc_nation := 3 ;
4297: LD_ADDR_OWVAR 21
4301: PUSH
4302: LD_INT 3
4304: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4305: LD_INT 22
4307: PPUSH
4308: LD_INT 1
4310: PPUSH
4311: LD_INT 1
4313: PPUSH
4314: LD_INT 45
4316: PPUSH
4317: LD_INT 88
4319: PPUSH
4320: CALL 30222 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4324: CALL_OW 45
4328: PPUSH
4329: LD_INT 13
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4339: LD_VAR 0 2
4343: PPUSH
4344: LD_INT 340
4346: PPUSH
4347: LD_INT 205
4349: PPUSH
4350: CALL_OW 428
4354: PPUSH
4355: CALL_OW 52
// end else
4359: GO 4376
// PlaceUnitArea ( i , southSpawn , false ) ;
4361: LD_VAR 0 2
4365: PPUSH
4366: LD_INT 13
4368: PPUSH
4369: LD_INT 0
4371: PPUSH
4372: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4376: LD_VAR 0 2
4380: PPUSH
4381: LD_INT 333
4383: PPUSH
4384: LD_INT 210
4386: PPUSH
4387: CALL_OW 111
// wait ( 0 0$2 ) ;
4391: LD_INT 70
4393: PPUSH
4394: CALL_OW 67
// end ;
4398: GO 4198
4400: POP
4401: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4402: LD_EXP 40
4406: PPUSH
4407: LD_INT 340
4409: PPUSH
4410: LD_INT 205
4412: PPUSH
4413: LD_INT 0
4415: PPUSH
4416: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4420: LD_EXP 40
4424: PPUSH
4425: LD_INT 333
4427: PPUSH
4428: LD_INT 206
4430: PPUSH
4431: CALL_OW 111
// wait ( 0 0$2 ) ;
4435: LD_INT 70
4437: PPUSH
4438: CALL_OW 67
// ComHold ( omarSquad ) ;
4442: LD_EXP 48
4446: PPUSH
4447: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4451: LD_EXP 40
4455: PUSH
4456: LD_EXP 48
4460: PPUSH
4461: LD_INT 2
4463: PUSH
4464: LD_INT 25
4466: PUSH
4467: LD_INT 1
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 25
4476: PUSH
4477: LD_INT 8
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: PPUSH
4489: CALL_OW 72
4493: UNION
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 5
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 2
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 69
4523: UNION
4524: PPUSH
4525: LD_INT 315
4527: PPUSH
4528: LD_INT 214
4530: PPUSH
4531: CALL_OW 114
// wait ( 0 0$22 ) ;
4535: LD_INT 770
4537: PPUSH
4538: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4542: LD_EXP 48
4546: PUSH
4547: LD_EXP 40
4551: UNION
4552: PPUSH
4553: LD_INT 329
4555: PPUSH
4556: LD_INT 231
4558: PPUSH
4559: CALL_OW 114
// end ;
4563: LD_VAR 0 1
4567: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4568: LD_EXP 10
4572: IFFALSE 5655
4574: GO 4576
4576: DISABLE
4577: LD_INT 0
4579: PPUSH
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
// begin enable ;
4590: ENABLE
// if not omarSquad then
4591: LD_EXP 48
4595: NOT
4596: IFFALSE 4600
// exit ;
4598: GO 5655
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4600: LD_ADDR_VAR 0 10
4604: PUSH
4605: LD_INT 14
4607: PPUSH
4608: LD_INT 81
4610: PUSH
4611: LD_INT 5
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PPUSH
4618: CALL_OW 70
4622: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4623: LD_ADDR_VAR 0 6
4627: PUSH
4628: LD_EXP 48
4632: PPUSH
4633: LD_INT 2
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 1
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 25
4648: PUSH
4649: LD_INT 8
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: LIST
4660: PPUSH
4661: CALL_OW 72
4665: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4666: LD_ADDR_VAR 0 7
4670: PUSH
4671: LD_EXP 48
4675: PPUSH
4676: LD_INT 25
4678: PUSH
4679: LD_INT 2
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PPUSH
4686: CALL_OW 72
4690: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4691: LD_ADDR_VAR 0 9
4695: PUSH
4696: LD_EXP 48
4700: PPUSH
4701: LD_INT 25
4703: PUSH
4704: LD_INT 3
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 72
4715: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4716: LD_ADDR_VAR 0 8
4720: PUSH
4721: LD_EXP 48
4725: PPUSH
4726: LD_INT 25
4728: PUSH
4729: LD_INT 4
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PPUSH
4736: CALL_OW 72
4740: ST_TO_ADDR
// if sol then
4741: LD_VAR 0 6
4745: IFFALSE 5109
// for i in sol do
4747: LD_ADDR_VAR 0 1
4751: PUSH
4752: LD_VAR 0 6
4756: PUSH
4757: FOR_IN
4758: IFFALSE 5107
// if not HasTask ( i ) then
4760: LD_VAR 0 1
4764: PPUSH
4765: CALL_OW 314
4769: NOT
4770: IFFALSE 5105
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4772: LD_VAR 0 1
4776: PPUSH
4777: CALL_OW 310
4781: NOT
4782: PUSH
4783: LD_VAR 0 1
4787: PPUSH
4788: CALL_OW 256
4792: PUSH
4793: LD_INT 500
4795: LESS
4796: AND
4797: PUSH
4798: LD_VAR 0 1
4802: PPUSH
4803: LD_INT 333
4805: PPUSH
4806: LD_INT 234
4808: PPUSH
4809: CALL_OW 297
4813: PUSH
4814: LD_INT 6
4816: GREATER
4817: AND
4818: IFFALSE 4837
// begin ComMoveXY ( i , 333 , 234 ) ;
4820: LD_VAR 0 1
4824: PPUSH
4825: LD_INT 333
4827: PPUSH
4828: LD_INT 234
4830: PPUSH
4831: CALL_OW 111
// continue ;
4835: GO 4757
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4837: LD_ADDR_VAR 0 5
4841: PUSH
4842: LD_INT 22
4844: PUSH
4845: LD_INT 5
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 58
4854: PUSH
4855: EMPTY
4856: LIST
4857: PUSH
4858: LD_INT 50
4860: PUSH
4861: EMPTY
4862: LIST
4863: PUSH
4864: LD_INT 2
4866: PUSH
4867: LD_INT 30
4869: PUSH
4870: LD_INT 32
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 30
4879: PUSH
4880: LD_INT 31
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PPUSH
4898: CALL_OW 69
4902: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4903: LD_VAR 0 5
4907: PUSH
4908: LD_VAR 0 1
4912: PPUSH
4913: CALL_OW 310
4917: PPUSH
4918: CALL_OW 266
4922: PUSH
4923: LD_INT 31
4925: NONEQUAL
4926: AND
4927: IFFALSE 5009
// begin for j in tmp do
4929: LD_ADDR_VAR 0 2
4933: PUSH
4934: LD_VAR 0 5
4938: PUSH
4939: FOR_IN
4940: IFFALSE 5005
// if GetTag ( j ) <> 1 then
4942: LD_VAR 0 2
4946: PPUSH
4947: CALL_OW 110
4951: PUSH
4952: LD_INT 1
4954: NONEQUAL
4955: IFFALSE 5003
// begin SetTag ( j , 1 ) ;
4957: LD_VAR 0 2
4961: PPUSH
4962: LD_INT 1
4964: PPUSH
4965: CALL_OW 109
// if IsInUnit ( i ) then
4969: LD_VAR 0 1
4973: PPUSH
4974: CALL_OW 310
4978: IFFALSE 4989
// ComExit ( i ) ;
4980: LD_VAR 0 1
4984: PPUSH
4985: CALL 63054 0 1
// AddComEnterUnit ( i , j ) ;
4989: LD_VAR 0 1
4993: PPUSH
4994: LD_VAR 0 2
4998: PPUSH
4999: CALL_OW 180
// end ;
5003: GO 4939
5005: POP
5006: POP
// end else
5007: GO 5105
// if not IsInUnit ( i ) then
5009: LD_VAR 0 1
5013: PPUSH
5014: CALL_OW 310
5018: NOT
5019: IFFALSE 5105
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5021: LD_ADDR_VAR 0 5
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 5
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 50
5038: PUSH
5039: EMPTY
5040: LIST
5041: PUSH
5042: LD_INT 30
5044: PUSH
5045: LD_INT 4
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PPUSH
5057: CALL_OW 69
5061: ST_TO_ADDR
// if tmp then
5062: LD_VAR 0 5
5066: IFFALSE 5105
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5068: LD_VAR 0 5
5072: PUSH
5073: LD_INT 1
5075: ARRAY
5076: PPUSH
5077: CALL_OW 313
5081: PUSH
5082: LD_INT 6
5084: LESS
5085: IFFALSE 5105
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5087: LD_VAR 0 1
5091: PPUSH
5092: LD_VAR 0 5
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PPUSH
5101: CALL_OW 120
// end ; end ;
5105: GO 4757
5107: POP
5108: POP
// if sci then
5109: LD_VAR 0 8
5113: IFFALSE 5168
// for i in sci do
5115: LD_ADDR_VAR 0 1
5119: PUSH
5120: LD_VAR 0 8
5124: PUSH
5125: FOR_IN
5126: IFFALSE 5166
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5128: LD_VAR 0 1
5132: PPUSH
5133: LD_INT 333
5135: PPUSH
5136: LD_INT 234
5138: PPUSH
5139: CALL_OW 297
5143: PUSH
5144: LD_INT 9
5146: GREATER
5147: IFFALSE 5164
// ComMoveXY ( i , 333 , 234 ) ;
5149: LD_VAR 0 1
5153: PPUSH
5154: LD_INT 333
5156: PPUSH
5157: LD_INT 234
5159: PPUSH
5160: CALL_OW 111
// end ;
5164: GO 5125
5166: POP
5167: POP
// if mech then
5168: LD_VAR 0 9
5172: IFFALSE 5377
// for i in mech do
5174: LD_ADDR_VAR 0 1
5178: PUSH
5179: LD_VAR 0 9
5183: PUSH
5184: FOR_IN
5185: IFFALSE 5375
// begin hasVehicle := IsInUnit ( i ) ;
5187: LD_ADDR_VAR 0 11
5191: PUSH
5192: LD_VAR 0 1
5196: PPUSH
5197: CALL_OW 310
5201: ST_TO_ADDR
// if enemyInBase then
5202: LD_VAR 0 10
5206: IFFALSE 5293
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5208: LD_VAR 0 11
5212: PUSH
5213: LD_VAR 0 11
5217: PPUSH
5218: CALL_OW 256
5222: PUSH
5223: LD_INT 500
5225: GREATER
5226: AND
5227: IFFALSE 5255
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5229: LD_VAR 0 11
5233: PPUSH
5234: LD_VAR 0 10
5238: PPUSH
5239: LD_VAR 0 11
5243: PPUSH
5244: CALL_OW 74
5248: PPUSH
5249: CALL_OW 115
5253: GO 5291
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5255: LD_VAR 0 11
5259: PPUSH
5260: LD_INT 333
5262: PPUSH
5263: LD_INT 234
5265: PPUSH
5266: CALL_OW 297
5270: PUSH
5271: LD_INT 6
5273: GREATER
5274: IFFALSE 5291
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5276: LD_VAR 0 11
5280: PPUSH
5281: LD_INT 333
5283: PPUSH
5284: LD_INT 234
5286: PPUSH
5287: CALL_OW 111
// end else
5291: GO 5373
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5293: LD_VAR 0 1
5297: PPUSH
5298: LD_INT 333
5300: PPUSH
5301: LD_INT 234
5303: PPUSH
5304: CALL_OW 297
5308: PUSH
5309: LD_INT 6
5311: GREATER
5312: IFFALSE 5331
// ComMoveXY ( i , 333 , 234 ) else
5314: LD_VAR 0 1
5318: PPUSH
5319: LD_INT 333
5321: PPUSH
5322: LD_INT 234
5324: PPUSH
5325: CALL_OW 111
5329: GO 5373
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5331: LD_VAR 0 11
5335: PUSH
5336: LD_VAR 0 11
5340: PPUSH
5341: CALL_OW 256
5345: PUSH
5346: LD_INT 1000
5348: LESS
5349: AND
5350: IFFALSE 5373
// begin SetFuel ( hasVehicle , 100 ) ;
5352: LD_VAR 0 11
5356: PPUSH
5357: LD_INT 100
5359: PPUSH
5360: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5364: LD_VAR 0 1
5368: PPUSH
5369: CALL 64356 0 1
// end ; end ; end ;
5373: GO 5184
5375: POP
5376: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5377: LD_ADDR_VAR 0 5
5381: PUSH
5382: LD_INT 14
5384: PPUSH
5385: LD_INT 3
5387: PUSH
5388: LD_INT 24
5390: PUSH
5391: LD_INT 1000
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: LD_INT 21
5404: PUSH
5405: LD_INT 3
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PPUSH
5416: CALL_OW 70
5420: ST_TO_ADDR
// if tmp and eng then
5421: LD_VAR 0 5
5425: PUSH
5426: LD_VAR 0 7
5430: AND
5431: IFFALSE 5537
// begin for i in eng do
5433: LD_ADDR_VAR 0 1
5437: PUSH
5438: LD_VAR 0 7
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5535
// if IsInUnit ( i ) then
5446: LD_VAR 0 1
5450: PPUSH
5451: CALL_OW 310
5455: IFFALSE 5468
// ComExitBuilding ( i ) else
5457: LD_VAR 0 1
5461: PPUSH
5462: CALL_OW 122
5466: GO 5533
// if GetLives ( i ) = 1000 then
5468: LD_VAR 0 1
5472: PPUSH
5473: CALL_OW 256
5477: PUSH
5478: LD_INT 1000
5480: EQUAL
5481: IFFALSE 5503
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5483: LD_VAR 0 1
5487: PPUSH
5488: LD_VAR 0 5
5492: PUSH
5493: LD_INT 1
5495: ARRAY
5496: PPUSH
5497: CALL_OW 130
5501: GO 5533
// if GetLives ( i ) < 700 then
5503: LD_VAR 0 1
5507: PPUSH
5508: CALL_OW 256
5512: PUSH
5513: LD_INT 700
5515: LESS
5516: IFFALSE 5533
// ComMoveXY ( i , 333 , 234 ) ;
5518: LD_VAR 0 1
5522: PPUSH
5523: LD_INT 333
5525: PPUSH
5526: LD_INT 234
5528: PPUSH
5529: CALL_OW 111
5533: GO 5443
5535: POP
5536: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5537: LD_VAR 0 5
5541: NOT
5542: PUSH
5543: LD_VAR 0 7
5547: PPUSH
5548: LD_INT 3
5550: PUSH
5551: LD_INT 54
5553: PUSH
5554: EMPTY
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 72
5565: AND
5566: IFFALSE 5655
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5568: LD_ADDR_VAR 0 1
5572: PUSH
5573: LD_VAR 0 7
5577: PPUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 54
5583: PUSH
5584: EMPTY
5585: LIST
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PPUSH
5591: CALL_OW 72
5595: PUSH
5596: FOR_IN
5597: IFFALSE 5653
// if GetLives ( i ) < 1000 then
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 256
5608: PUSH
5609: LD_INT 1000
5611: LESS
5612: IFFALSE 5631
// ComMoveXY ( i , 333 , 234 ) else
5614: LD_VAR 0 1
5618: PPUSH
5619: LD_INT 333
5621: PPUSH
5622: LD_INT 234
5624: PPUSH
5625: CALL_OW 111
5629: GO 5651
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5631: LD_VAR 0 1
5635: PPUSH
5636: LD_INT 341
5638: PPUSH
5639: LD_INT 232
5641: PPUSH
5642: CALL_OW 428
5646: PPUSH
5647: CALL_OW 120
5651: GO 5596
5653: POP
5654: POP
// end ;
5655: PPOPN 11
5657: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5658: LD_EXP 40
5662: PPUSH
5663: CALL_OW 256
5667: PUSH
5668: LD_INT 1000
5670: LESS
5671: IFFALSE 5689
5673: GO 5675
5675: DISABLE
// begin enable ;
5676: ENABLE
// SetLives ( Omar , 1000 ) ;
5677: LD_EXP 40
5681: PPUSH
5682: LD_INT 1000
5684: PPUSH
5685: CALL_OW 234
// end ;
5689: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5690: LD_EXP 23
5694: IFFALSE 6570
5696: GO 5698
5698: DISABLE
5699: LD_INT 0
5701: PPUSH
5702: PPUSH
// begin wait ( 0 0$25 ) ;
5703: LD_INT 875
5705: PPUSH
5706: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5710: LD_EXP 48
5714: PPUSH
5715: LD_INT 2
5717: PUSH
5718: LD_INT 25
5720: PUSH
5721: LD_INT 1
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 25
5730: PUSH
5731: LD_INT 8
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 72
5747: PPUSH
5748: CALL_OW 122
// wait ( 0 0$3 ) ;
5752: LD_INT 105
5754: PPUSH
5755: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5759: LD_EXP 48
5763: PUSH
5764: LD_EXP 40
5768: UNION
5769: PPUSH
5770: LD_INT 225
5772: PPUSH
5773: LD_INT 223
5775: PPUSH
5776: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5780: LD_INT 22
5782: PUSH
5783: LD_INT 5
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: LD_INT 2
5792: PUSH
5793: LD_INT 25
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 25
5805: PUSH
5806: LD_INT 8
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 21
5815: PUSH
5816: LD_INT 2
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PPUSH
5833: CALL_OW 69
5837: PPUSH
5838: LD_INT 167
5840: PPUSH
5841: LD_INT 231
5843: PPUSH
5844: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5848: LD_EXP 48
5852: PPUSH
5853: LD_INT 25
5855: PUSH
5856: LD_INT 4
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PPUSH
5863: CALL_OW 72
5867: PPUSH
5868: LD_INT 222
5870: PPUSH
5871: LD_INT 229
5873: PPUSH
5874: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5878: LD_INT 35
5880: PPUSH
5881: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5885: LD_ADDR_VAR 0 1
5889: PUSH
5890: LD_EXP 48
5894: PUSH
5895: LD_INT 22
5897: PUSH
5898: LD_INT 5
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 21
5907: PUSH
5908: LD_INT 2
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PPUSH
5919: CALL_OW 69
5923: UNION
5924: PUSH
5925: FOR_IN
5926: IFFALSE 6561
// begin if IsDead ( i ) then
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 301
5937: IFFALSE 5957
// begin omarSquad := omarSquad diff i ;
5939: LD_ADDR_EXP 48
5943: PUSH
5944: LD_EXP 48
5948: PUSH
5949: LD_VAR 0 1
5953: DIFF
5954: ST_TO_ADDR
// continue ;
5955: GO 5925
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5957: LD_VAR 0 1
5961: PPUSH
5962: CALL_OW 257
5966: PUSH
5967: LD_INT 1
5969: PUSH
5970: LD_INT 8
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: IN
5977: IFFALSE 6171
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 256
5988: PUSH
5989: LD_INT 700
5991: LESS
5992: PUSH
5993: LD_VAR 0 1
5997: PPUSH
5998: CALL_OW 110
6002: PUSH
6003: LD_INT 0
6005: EQUAL
6006: AND
6007: IFFALSE 6036
// begin SetTag ( i , 1 ) ;
6009: LD_VAR 0 1
6013: PPUSH
6014: LD_INT 1
6016: PPUSH
6017: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
6021: LD_VAR 0 1
6025: PPUSH
6026: LD_INT 222
6028: PPUSH
6029: LD_INT 229
6031: PPUSH
6032: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 256
6045: PUSH
6046: LD_INT 1000
6048: EQUAL
6049: PUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: CALL_OW 110
6059: PUSH
6060: LD_INT 1
6062: EQUAL
6063: AND
6064: IFFALSE 6078
// SetTag ( i , 0 ) ;
6066: LD_VAR 0 1
6070: PPUSH
6071: LD_INT 0
6073: PPUSH
6074: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6078: LD_VAR 0 1
6082: PPUSH
6083: CALL_OW 110
6087: PUSH
6088: LD_INT 0
6090: EQUAL
6091: PUSH
6092: LD_VAR 0 1
6096: PPUSH
6097: CALL_OW 256
6101: PUSH
6102: LD_INT 700
6104: GREATEREQUAL
6105: AND
6106: PUSH
6107: LD_VAR 0 1
6111: PPUSH
6112: CALL_OW 314
6116: NOT
6117: AND
6118: IFFALSE 6171
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6120: LD_INT 18
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 3
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: IFFALSE 6156
// ComAgressiveMove ( i , 167 , 231 ) else
6139: LD_VAR 0 1
6143: PPUSH
6144: LD_INT 167
6146: PPUSH
6147: LD_INT 231
6149: PPUSH
6150: CALL_OW 114
6154: GO 6171
// ComAgressiveMove ( i , 106 , 153 ) ;
6156: LD_VAR 0 1
6160: PPUSH
6161: LD_INT 106
6163: PPUSH
6164: LD_INT 153
6166: PPUSH
6167: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6171: LD_VAR 0 1
6175: PPUSH
6176: CALL_OW 247
6180: PUSH
6181: LD_INT 2
6183: EQUAL
6184: IFFALSE 6559
// begin nearestPoint := [ 219 , 219 ] ;
6186: LD_ADDR_VAR 0 2
6190: PUSH
6191: LD_INT 219
6193: PUSH
6194: LD_INT 219
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6201: LD_VAR 0 1
6205: PPUSH
6206: LD_INT 156
6208: PPUSH
6209: LD_INT 202
6211: PPUSH
6212: CALL_OW 297
6216: PUSH
6217: LD_VAR 0 1
6221: PPUSH
6222: LD_INT 219
6224: PPUSH
6225: LD_INT 219
6227: PPUSH
6228: CALL_OW 297
6232: LESS
6233: IFFALSE 6250
// nearestPoint := [ 156 , 202 ] ;
6235: LD_ADDR_VAR 0 2
6239: PUSH
6240: LD_INT 156
6242: PUSH
6243: LD_INT 202
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6250: LD_VAR 0 1
6254: PPUSH
6255: CALL_OW 256
6259: PUSH
6260: LD_INT 700
6262: LESS
6263: PUSH
6264: LD_VAR 0 1
6268: PPUSH
6269: CALL_OW 110
6273: PUSH
6274: LD_INT 0
6276: EQUAL
6277: AND
6278: IFFALSE 6319
// begin SetTag ( i , 1 ) ;
6280: LD_VAR 0 1
6284: PPUSH
6285: LD_INT 1
6287: PPUSH
6288: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6292: LD_VAR 0 1
6296: PPUSH
6297: LD_VAR 0 2
6301: PUSH
6302: LD_INT 1
6304: ARRAY
6305: PPUSH
6306: LD_VAR 0 2
6310: PUSH
6311: LD_INT 2
6313: ARRAY
6314: PPUSH
6315: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 256
6328: PUSH
6329: LD_INT 700
6331: LESS
6332: PUSH
6333: LD_VAR 0 1
6337: PPUSH
6338: CALL_OW 110
6342: PUSH
6343: LD_INT 1
6345: EQUAL
6346: AND
6347: PUSH
6348: LD_VAR 0 1
6352: PPUSH
6353: CALL_OW 311
6357: AND
6358: PUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: LD_VAR 0 2
6368: PUSH
6369: LD_INT 1
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 2
6377: PUSH
6378: LD_INT 2
6380: ARRAY
6381: PPUSH
6382: CALL_OW 297
6386: PUSH
6387: LD_INT 10
6389: LESS
6390: AND
6391: IFFALSE 6402
// ComRepairVehicleAndReturn ( i ) ;
6393: LD_VAR 0 1
6397: PPUSH
6398: CALL 64356 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6402: LD_VAR 0 1
6406: PPUSH
6407: CALL_OW 256
6411: PUSH
6412: LD_INT 1000
6414: EQUAL
6415: PUSH
6416: LD_VAR 0 1
6420: PPUSH
6421: CALL_OW 110
6425: PUSH
6426: LD_INT 1
6428: EQUAL
6429: AND
6430: PUSH
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 311
6440: AND
6441: IFFALSE 6455
// SetTag ( i , 0 ) ;
6443: LD_VAR 0 1
6447: PPUSH
6448: LD_INT 0
6450: PPUSH
6451: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6455: LD_VAR 0 1
6459: PPUSH
6460: CALL_OW 110
6464: PUSH
6465: LD_INT 0
6467: EQUAL
6468: PUSH
6469: LD_VAR 0 1
6473: PPUSH
6474: CALL_OW 256
6478: PUSH
6479: LD_INT 700
6481: GREATEREQUAL
6482: AND
6483: PUSH
6484: LD_VAR 0 1
6488: PPUSH
6489: CALL_OW 311
6493: AND
6494: PUSH
6495: LD_VAR 0 1
6499: PPUSH
6500: CALL_OW 314
6504: NOT
6505: AND
6506: IFFALSE 6559
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6508: LD_INT 18
6510: PPUSH
6511: LD_INT 22
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PPUSH
6521: CALL_OW 70
6525: IFFALSE 6544
// ComAgressiveMove ( i , 167 , 231 ) else
6527: LD_VAR 0 1
6531: PPUSH
6532: LD_INT 167
6534: PPUSH
6535: LD_INT 231
6537: PPUSH
6538: CALL_OW 114
6542: GO 6559
// ComAgressiveMove ( i , 106 , 153 ) ;
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 106
6551: PPUSH
6552: LD_INT 153
6554: PPUSH
6555: CALL_OW 114
// end ; end ;
6559: GO 5925
6561: POP
6562: POP
// until not omarSquad ;
6563: LD_EXP 48
6567: NOT
6568: IFFALSE 5878
// end ; end_of_file
6570: PPOPN 2
6572: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
6573: LD_INT 0
6575: PPUSH
// uc_side := side ;
6576: LD_ADDR_OWVAR 20
6580: PUSH
6581: LD_VAR 0 1
6585: ST_TO_ADDR
// uc_nation := nation ;
6586: LD_ADDR_OWVAR 21
6590: PUSH
6591: LD_VAR 0 2
6595: ST_TO_ADDR
// vc_chassis := chassis ;
6596: LD_ADDR_OWVAR 37
6600: PUSH
6601: LD_VAR 0 3
6605: ST_TO_ADDR
// vc_engine := engine ;
6606: LD_ADDR_OWVAR 39
6610: PUSH
6611: LD_VAR 0 4
6615: ST_TO_ADDR
// vc_control := control ;
6616: LD_ADDR_OWVAR 38
6620: PUSH
6621: LD_VAR 0 5
6625: ST_TO_ADDR
// vc_weapon := weapon ;
6626: LD_ADDR_OWVAR 40
6630: PUSH
6631: LD_VAR 0 6
6635: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6636: LD_ADDR_OWVAR 41
6640: PUSH
6641: LD_VAR 0 7
6645: ST_TO_ADDR
// result := CreateVehicle ;
6646: LD_ADDR_VAR 0 8
6650: PUSH
6651: CALL_OW 45
6655: ST_TO_ADDR
// end ;
6656: LD_VAR 0 8
6660: RET
// export function SayX ( units , ident ) ; var i ; begin
6661: LD_INT 0
6663: PPUSH
6664: PPUSH
// result := false ;
6665: LD_ADDR_VAR 0 3
6669: PUSH
6670: LD_INT 0
6672: ST_TO_ADDR
// if not units then
6673: LD_VAR 0 1
6677: NOT
6678: IFFALSE 6682
// exit ;
6680: GO 6736
// for i in units do
6682: LD_ADDR_VAR 0 4
6686: PUSH
6687: LD_VAR 0 1
6691: PUSH
6692: FOR_IN
6693: IFFALSE 6734
// if IsOk ( i ) then
6695: LD_VAR 0 4
6699: PPUSH
6700: CALL_OW 302
6704: IFFALSE 6732
// begin Say ( i , ident ) ;
6706: LD_VAR 0 4
6710: PPUSH
6711: LD_VAR 0 2
6715: PPUSH
6716: CALL_OW 88
// result := i ;
6720: LD_ADDR_VAR 0 3
6724: PUSH
6725: LD_VAR 0 4
6729: ST_TO_ADDR
// break ;
6730: GO 6734
// end ;
6732: GO 6692
6734: POP
6735: POP
// end ;
6736: LD_VAR 0 3
6740: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6741: LD_INT 0
6743: PPUSH
6744: PPUSH
// InitUc ;
6745: CALL_OW 18
// InitHc ;
6749: CALL_OW 19
// uc_side := 0 ;
6753: LD_ADDR_OWVAR 20
6757: PUSH
6758: LD_INT 0
6760: ST_TO_ADDR
// uc_nation := 0 ;
6761: LD_ADDR_OWVAR 21
6765: PUSH
6766: LD_INT 0
6768: ST_TO_ADDR
// for i = 1 to amount do
6769: LD_ADDR_VAR 0 4
6773: PUSH
6774: DOUBLE
6775: LD_INT 1
6777: DEC
6778: ST_TO_ADDR
6779: LD_VAR 0 2
6783: PUSH
6784: FOR_TO
6785: IFFALSE 6867
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6787: LD_ADDR_OWVAR 29
6791: PUSH
6792: LD_INT 9
6794: PPUSH
6795: LD_INT 12
6797: PPUSH
6798: CALL_OW 12
6802: PUSH
6803: LD_INT 9
6805: PPUSH
6806: LD_INT 12
6808: PPUSH
6809: CALL_OW 12
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6818: LD_ADDR_OWVAR 35
6822: PUSH
6823: LD_INT 1
6825: NEG
6826: PPUSH
6827: LD_INT 1
6829: PPUSH
6830: CALL_OW 12
6834: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6835: LD_INT 0
6837: PPUSH
6838: LD_INT 12
6840: PPUSH
6841: LD_INT 1
6843: PPUSH
6844: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6848: CALL_OW 44
6852: PPUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: LD_INT 0
6860: PPUSH
6861: CALL_OW 49
// end ;
6865: GO 6784
6867: POP
6868: POP
// InitHc ;
6869: CALL_OW 19
// end ;
6873: LD_VAR 0 3
6877: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6878: LD_INT 0
6880: PPUSH
6881: PPUSH
// uc_side := 0 ;
6882: LD_ADDR_OWVAR 20
6886: PUSH
6887: LD_INT 0
6889: ST_TO_ADDR
// uc_nation := 0 ;
6890: LD_ADDR_OWVAR 21
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
6898: LD_INT 7
6900: PPUSH
6901: LD_INT 6
6903: PUSH
6904: LD_INT 5
6906: PUSH
6907: LD_INT 4
6909: PUSH
6910: LD_INT 3
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: PUSH
6919: LD_OWVAR 67
6923: ARRAY
6924: PPUSH
6925: CALL 6741 0 2
// for i = 1 to 2 do
6929: LD_ADDR_VAR 0 4
6933: PUSH
6934: DOUBLE
6935: LD_INT 1
6937: DEC
6938: ST_TO_ADDR
6939: LD_INT 2
6941: PUSH
6942: FOR_TO
6943: IFFALSE 6980
// begin vc_chassis := class_mastodont ;
6945: LD_ADDR_OWVAR 37
6949: PUSH
6950: LD_INT 31
6952: ST_TO_ADDR
// vc_control := control_rider ;
6953: LD_ADDR_OWVAR 38
6957: PUSH
6958: LD_INT 4
6960: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6961: CALL_OW 45
6965: PPUSH
6966: LD_VAR 0 1
6970: PPUSH
6971: LD_INT 0
6973: PPUSH
6974: CALL 61573 0 3
// end ;
6978: GO 6942
6980: POP
6981: POP
// for i := 1 to 4 do
6982: LD_ADDR_VAR 0 4
6986: PUSH
6987: DOUBLE
6988: LD_INT 1
6990: DEC
6991: ST_TO_ADDR
6992: LD_INT 4
6994: PUSH
6995: FOR_TO
6996: IFFALSE 7033
// begin hc_class := class_horse ;
6998: LD_ADDR_OWVAR 28
7002: PUSH
7003: LD_INT 21
7005: ST_TO_ADDR
// hc_gallery :=  ;
7006: LD_ADDR_OWVAR 33
7010: PUSH
7011: LD_STRING 
7013: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7014: CALL_OW 44
7018: PPUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: LD_INT 0
7026: PPUSH
7027: CALL_OW 49
// end ;
7031: GO 6995
7033: POP
7034: POP
// for i = 1 to 5 do
7035: LD_ADDR_VAR 0 4
7039: PUSH
7040: DOUBLE
7041: LD_INT 1
7043: DEC
7044: ST_TO_ADDR
7045: LD_INT 5
7047: PUSH
7048: FOR_TO
7049: IFFALSE 7103
// begin hc_class = class_tiger ;
7051: LD_ADDR_OWVAR 28
7055: PUSH
7056: LD_INT 14
7058: ST_TO_ADDR
// hc_gallery =  ;
7059: LD_ADDR_OWVAR 33
7063: PUSH
7064: LD_STRING 
7066: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7067: LD_ADDR_OWVAR 35
7071: PUSH
7072: LD_INT 7
7074: NEG
7075: PPUSH
7076: LD_INT 7
7078: PPUSH
7079: CALL_OW 12
7083: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7084: CALL_OW 44
7088: PPUSH
7089: LD_VAR 0 1
7093: PPUSH
7094: LD_INT 0
7096: PPUSH
7097: CALL 61573 0 3
// end ;
7101: GO 7048
7103: POP
7104: POP
// for i := 1 to 4 do
7105: LD_ADDR_VAR 0 4
7109: PUSH
7110: DOUBLE
7111: LD_INT 1
7113: DEC
7114: ST_TO_ADDR
7115: LD_INT 4
7117: PUSH
7118: FOR_TO
7119: IFFALSE 7156
// begin hc_class := class_phororhacos ;
7121: LD_ADDR_OWVAR 28
7125: PUSH
7126: LD_INT 18
7128: ST_TO_ADDR
// hc_gallery :=  ;
7129: LD_ADDR_OWVAR 33
7133: PUSH
7134: LD_STRING 
7136: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7137: CALL_OW 44
7141: PPUSH
7142: LD_VAR 0 1
7146: PPUSH
7147: LD_INT 0
7149: PPUSH
7150: CALL_OW 49
// end ;
7154: GO 7118
7156: POP
7157: POP
// for i := 1 to 4 do
7158: LD_ADDR_VAR 0 4
7162: PUSH
7163: DOUBLE
7164: LD_INT 1
7166: DEC
7167: ST_TO_ADDR
7168: LD_INT 4
7170: PUSH
7171: FOR_TO
7172: IFFALSE 7209
// begin hc_class := class_baggie ;
7174: LD_ADDR_OWVAR 28
7178: PUSH
7179: LD_INT 13
7181: ST_TO_ADDR
// hc_gallery :=  ;
7182: LD_ADDR_OWVAR 33
7186: PUSH
7187: LD_STRING 
7189: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7190: CALL_OW 44
7194: PPUSH
7195: LD_VAR 0 1
7199: PPUSH
7200: LD_INT 0
7202: PPUSH
7203: CALL_OW 49
// end ;
7207: GO 7171
7209: POP
7210: POP
// for i := 1 to 7 do
7211: LD_ADDR_VAR 0 4
7215: PUSH
7216: DOUBLE
7217: LD_INT 1
7219: DEC
7220: ST_TO_ADDR
7221: LD_INT 7
7223: PUSH
7224: FOR_TO
7225: IFFALSE 7262
// begin hc_class := class_frog ;
7227: LD_ADDR_OWVAR 28
7231: PUSH
7232: LD_INT 19
7234: ST_TO_ADDR
// hc_gallery :=  ;
7235: LD_ADDR_OWVAR 33
7239: PUSH
7240: LD_STRING 
7242: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7243: CALL_OW 44
7247: PPUSH
7248: LD_VAR 0 2
7252: PPUSH
7253: LD_INT 0
7255: PPUSH
7256: CALL_OW 49
// end ;
7260: GO 7224
7262: POP
7263: POP
// end ;
7264: LD_VAR 0 3
7268: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7269: LD_INT 0
7271: PPUSH
7272: PPUSH
7273: PPUSH
// if not observer or not unit then
7274: LD_VAR 0 1
7278: NOT
7279: PUSH
7280: LD_VAR 0 2
7284: NOT
7285: OR
7286: IFFALSE 7290
// exit ;
7288: GO 7338
// if not See ( GetSide ( observer ) , unit ) then
7290: LD_VAR 0 1
7294: PPUSH
7295: CALL_OW 255
7299: PPUSH
7300: LD_VAR 0 2
7304: PPUSH
7305: CALL_OW 292
7309: NOT
7310: IFFALSE 7314
// exit ;
7312: GO 7338
// result := GetDistUnits ( observer , unit ) < 12 ;
7314: LD_ADDR_VAR 0 3
7318: PUSH
7319: LD_VAR 0 1
7323: PPUSH
7324: LD_VAR 0 2
7328: PPUSH
7329: CALL_OW 296
7333: PUSH
7334: LD_INT 12
7336: LESS
7337: ST_TO_ADDR
// end ;
7338: LD_VAR 0 3
7342: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7343: LD_INT 0
7345: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7346: LD_VAR 0 2
7350: PUSH
7351: LD_INT 1
7353: ARRAY
7354: PPUSH
7355: LD_VAR 0 2
7359: PUSH
7360: LD_INT 2
7362: ARRAY
7363: PPUSH
7364: CALL_OW 488
7368: PUSH
7369: LD_VAR 0 2
7373: PUSH
7374: LD_INT 1
7376: ARRAY
7377: PPUSH
7378: LD_VAR 0 2
7382: PUSH
7383: LD_INT 2
7385: ARRAY
7386: PPUSH
7387: CALL_OW 428
7391: PUSH
7392: LD_INT 0
7394: EQUAL
7395: AND
7396: IFFALSE 7430
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
7398: LD_VAR 0 1
7402: PPUSH
7403: LD_VAR 0 2
7407: PUSH
7408: LD_INT 1
7410: ARRAY
7411: PPUSH
7412: LD_VAR 0 2
7416: PUSH
7417: LD_INT 2
7419: ARRAY
7420: PPUSH
7421: LD_VAR 0 3
7425: PPUSH
7426: CALL_OW 48
// end ;
7430: LD_VAR 0 4
7434: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
7435: LD_INT 0
7437: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
7438: LD_VAR 0 1
7442: PPUSH
7443: LD_VAR 0 2
7447: PPUSH
7448: LD_VAR 0 3
7452: PPUSH
7453: LD_VAR 0 4
7457: PPUSH
7458: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
7462: LD_VAR 0 1
7466: PPUSH
7467: LD_VAR 0 2
7471: PPUSH
7472: LD_VAR 0 3
7476: PPUSH
7477: CALL_OW 331
// end ;
7481: LD_VAR 0 5
7485: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
7486: LD_INT 0
7488: PPUSH
// if not units then
7489: LD_VAR 0 1
7493: NOT
7494: IFFALSE 7498
// exit ;
7496: GO 7581
// result := true ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 1
7505: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_INT 26
7513: PUSH
7514: LD_INT 1
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PPUSH
7521: CALL_OW 72
7525: PUSH
7526: LD_INT 1
7528: ARRAY
7529: PPUSH
7530: LD_VAR 0 2
7534: PPUSH
7535: CALL_OW 88
7539: NOT
7540: IFFALSE 7581
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7542: LD_ADDR_VAR 0 4
7546: PUSH
7547: LD_VAR 0 1
7551: PPUSH
7552: LD_INT 26
7554: PUSH
7555: LD_INT 2
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PPUSH
7562: CALL_OW 72
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: LD_VAR 0 3
7575: PPUSH
7576: CALL_OW 88
7580: ST_TO_ADDR
// end ;
7581: LD_VAR 0 4
7585: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7586: LD_INT 0
7588: PPUSH
7589: PPUSH
// if not group then
7590: LD_VAR 0 2
7594: NOT
7595: IFFALSE 7599
// exit ;
7597: GO 7644
// for i in group do
7599: LD_ADDR_VAR 0 4
7603: PUSH
7604: LD_VAR 0 2
7608: PUSH
7609: FOR_IN
7610: IFFALSE 7642
// if See ( side , i ) then
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_VAR 0 4
7621: PPUSH
7622: CALL_OW 292
7626: IFFALSE 7640
// begin result := true ;
7628: LD_ADDR_VAR 0 3
7632: PUSH
7633: LD_INT 1
7635: ST_TO_ADDR
// exit ;
7636: POP
7637: POP
7638: GO 7644
// end ;
7640: GO 7609
7642: POP
7643: POP
// end ; end_of_file
7644: LD_VAR 0 3
7648: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7649: LD_INT 0
7651: PPUSH
7652: PPUSH
7653: PPUSH
7654: PPUSH
7655: PPUSH
7656: PPUSH
7657: PPUSH
// uc_side := 3 ;
7658: LD_ADDR_OWVAR 20
7662: PUSH
7663: LD_INT 3
7665: ST_TO_ADDR
// uc_nation := 3 ;
7666: LD_ADDR_OWVAR 21
7670: PUSH
7671: LD_INT 3
7673: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7674: LD_ADDR_EXP 49
7678: PUSH
7679: LD_STRING Morozov
7681: PPUSH
7682: CALL_OW 25
7686: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7687: LD_EXP 49
7691: PPUSH
7692: LD_INT 52
7694: PPUSH
7695: CALL_OW 52
// if not gaidarKilled then
7699: LD_EXP 7
7703: NOT
7704: IFFALSE 7737
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
7706: LD_ADDR_EXP 50
7710: PUSH
7711: LD_STRING Gaydar
7713: PPUSH
7714: LD_INT 0
7716: PPUSH
7717: LD_STRING 
7719: PPUSH
7720: CALL 25207 0 3
7724: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
7725: LD_EXP 50
7729: PPUSH
7730: LD_INT 52
7732: PPUSH
7733: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
7737: LD_INT 52
7739: PPUSH
7740: LD_STRING lenin
7742: PPUSH
7743: CALL_OW 500
// ruOutsiders := [ ] ;
7747: LD_ADDR_EXP 52
7751: PUSH
7752: EMPTY
7753: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7754: LD_ADDR_EXP 54
7758: PUSH
7759: EMPTY
7760: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7761: LD_ADDR_EXP 55
7765: PUSH
7766: EMPTY
7767: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7768: LD_ADDR_EXP 56
7772: PUSH
7773: EMPTY
7774: ST_TO_ADDR
// ruAttackers := [ ] ;
7775: LD_ADDR_EXP 57
7779: PUSH
7780: EMPTY
7781: ST_TO_ADDR
// waveStrength := 0 ;
7782: LD_ADDR_EXP 58
7786: PUSH
7787: LD_INT 0
7789: ST_TO_ADDR
// if not gaidarKilled then
7790: LD_EXP 7
7794: NOT
7795: IFFALSE 7805
// waveStrength := 2 ;
7797: LD_ADDR_EXP 58
7801: PUSH
7802: LD_INT 2
7804: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7805: LD_ADDR_VAR 0 7
7809: PUSH
7810: LD_INT 22
7812: PUSH
7813: LD_INT 3
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 21
7822: PUSH
7823: LD_INT 3
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PPUSH
7834: CALL_OW 69
7838: ST_TO_ADDR
// for i in tmp do
7839: LD_ADDR_VAR 0 2
7843: PUSH
7844: LD_VAR 0 7
7848: PUSH
7849: FOR_IN
7850: IFFALSE 7887
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
7852: LD_VAR 0 2
7856: PPUSH
7857: LD_INT 5
7859: PUSH
7860: LD_INT 6
7862: PUSH
7863: LD_INT 7
7865: PUSH
7866: LD_INT 8
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: PUSH
7875: LD_OWVAR 67
7879: ARRAY
7880: PPUSH
7881: CALL_OW 241
7885: GO 7849
7887: POP
7888: POP
// for i := 1 to 3 do
7889: LD_ADDR_VAR 0 2
7893: PUSH
7894: DOUBLE
7895: LD_INT 1
7897: DEC
7898: ST_TO_ADDR
7899: LD_INT 3
7901: PUSH
7902: FOR_TO
7903: IFFALSE 7941
// begin PrepareHuman ( false , 1 , 0 ) ;
7905: LD_INT 0
7907: PPUSH
7908: LD_INT 1
7910: PPUSH
7911: LD_INT 0
7913: PPUSH
7914: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
7918: CALL_OW 44
7922: PPUSH
7923: LD_INT 75
7925: PPUSH
7926: LD_INT 49
7928: PPUSH
7929: LD_INT 3
7931: PPUSH
7932: LD_INT 0
7934: PPUSH
7935: CALL_OW 50
// end ;
7939: GO 7902
7941: POP
7942: POP
// for i := 1 to 4 do
7943: LD_ADDR_VAR 0 2
7947: PUSH
7948: DOUBLE
7949: LD_INT 1
7951: DEC
7952: ST_TO_ADDR
7953: LD_INT 4
7955: PUSH
7956: FOR_TO
7957: IFFALSE 8003
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
7959: LD_INT 0
7961: PPUSH
7962: LD_INT 1
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: CALL_OW 12
7972: PPUSH
7973: LD_INT 0
7975: PPUSH
7976: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
7980: CALL_OW 44
7984: PPUSH
7985: LD_INT 330
7987: PPUSH
7988: LD_INT 231
7990: PPUSH
7991: LD_INT 5
7993: PPUSH
7994: LD_INT 0
7996: PPUSH
7997: CALL_OW 50
// end ;
8001: GO 7956
8003: POP
8004: POP
// hc_class := 1 ;
8005: LD_ADDR_OWVAR 28
8009: PUSH
8010: LD_INT 1
8012: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8013: CALL_OW 44
8017: PPUSH
8018: LD_INT 324
8020: PPUSH
8021: LD_INT 219
8023: PPUSH
8024: CALL_OW 428
8028: PPUSH
8029: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8033: CALL_OW 44
8037: PPUSH
8038: LD_INT 316
8040: PPUSH
8041: LD_INT 223
8043: PPUSH
8044: CALL_OW 428
8048: PPUSH
8049: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8053: LD_ADDR_VAR 0 7
8057: PUSH
8058: LD_INT 172
8060: PPUSH
8061: LD_INT 198
8063: PPUSH
8064: CALL_OW 428
8068: PPUSH
8069: CALL_OW 274
8073: PUSH
8074: LD_INT 189
8076: PPUSH
8077: LD_INT 156
8079: PPUSH
8080: CALL_OW 428
8084: PPUSH
8085: CALL_OW 274
8089: PUSH
8090: LD_INT 341
8092: PPUSH
8093: LD_INT 232
8095: PPUSH
8096: CALL_OW 428
8100: PPUSH
8101: CALL_OW 274
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: ST_TO_ADDR
// for i in tmp do
8111: LD_ADDR_VAR 0 2
8115: PUSH
8116: LD_VAR 0 7
8120: PUSH
8121: FOR_IN
8122: IFFALSE 8156
// begin SetResourceType ( i , mat_cans , 200 ) ;
8124: LD_VAR 0 2
8128: PPUSH
8129: LD_INT 1
8131: PPUSH
8132: LD_INT 200
8134: PPUSH
8135: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8139: LD_VAR 0 2
8143: PPUSH
8144: LD_INT 2
8146: PPUSH
8147: LD_INT 200
8149: PPUSH
8150: CALL_OW 277
// end ;
8154: GO 8121
8156: POP
8157: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
8158: LD_ADDR_VAR 0 7
8162: PUSH
8163: LD_INT 177
8165: PUSH
8166: LD_INT 114
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 138
8175: PUSH
8176: LD_INT 96
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: ST_TO_ADDR
// for i := 1 to tmp do
8187: LD_ADDR_VAR 0 2
8191: PUSH
8192: DOUBLE
8193: LD_INT 1
8195: DEC
8196: ST_TO_ADDR
8197: LD_VAR 0 7
8201: PUSH
8202: FOR_TO
8203: IFFALSE 8286
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
8205: LD_INT 0
8207: PPUSH
8208: LD_INT 9
8210: PPUSH
8211: LD_INT 6
8213: PPUSH
8214: CALL_OW 380
// un := CreateHuman ;
8218: LD_ADDR_VAR 0 5
8222: PUSH
8223: CALL_OW 44
8227: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8228: LD_VAR 0 5
8232: PPUSH
8233: LD_INT 2
8235: PPUSH
8236: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
8240: LD_VAR 0 5
8244: PPUSH
8245: LD_VAR 0 7
8249: PUSH
8250: LD_VAR 0 2
8254: ARRAY
8255: PUSH
8256: LD_INT 1
8258: ARRAY
8259: PPUSH
8260: LD_VAR 0 7
8264: PUSH
8265: LD_VAR 0 2
8269: ARRAY
8270: PUSH
8271: LD_INT 2
8273: ARRAY
8274: PPUSH
8275: CALL_OW 428
8279: PPUSH
8280: CALL_OW 52
// end ;
8284: GO 8202
8286: POP
8287: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8288: LD_ADDR_VAR 0 7
8292: PUSH
8293: LD_INT 198
8295: PUSH
8296: LD_INT 158
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 203
8305: PUSH
8306: LD_INT 166
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 181
8315: PUSH
8316: LD_INT 209
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 178
8325: PUSH
8326: LD_INT 196
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 181
8335: PUSH
8336: LD_INT 212
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: ST_TO_ADDR
// for i := 1 to tmp do
8350: LD_ADDR_VAR 0 2
8354: PUSH
8355: DOUBLE
8356: LD_INT 1
8358: DEC
8359: ST_TO_ADDR
8360: LD_VAR 0 7
8364: PUSH
8365: FOR_TO
8366: IFFALSE 8487
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
8368: LD_INT 0
8370: PPUSH
8371: LD_INT 1
8373: PPUSH
8374: LD_INT 4
8376: PUSH
8377: LD_INT 5
8379: PUSH
8380: LD_INT 6
8382: PUSH
8383: LD_INT 7
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: PUSH
8392: LD_OWVAR 67
8396: ARRAY
8397: PPUSH
8398: CALL_OW 380
// un := CreateHuman ;
8402: LD_ADDR_VAR 0 5
8406: PUSH
8407: CALL_OW 44
8411: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
8412: LD_ADDR_VAR 0 4
8416: PUSH
8417: LD_VAR 0 7
8421: PUSH
8422: LD_VAR 0 2
8426: ARRAY
8427: PUSH
8428: LD_INT 1
8430: ARRAY
8431: PPUSH
8432: LD_VAR 0 7
8436: PUSH
8437: LD_VAR 0 2
8441: ARRAY
8442: PUSH
8443: LD_INT 2
8445: ARRAY
8446: PPUSH
8447: CALL_OW 428
8451: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
8452: LD_VAR 0 5
8456: PPUSH
8457: LD_VAR 0 4
8461: PPUSH
8462: CALL 57923 0 1
8466: PPUSH
8467: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8471: LD_VAR 0 5
8475: PPUSH
8476: LD_VAR 0 4
8480: PPUSH
8481: CALL_OW 52
// end ;
8485: GO 8365
8487: POP
8488: POP
// for i := 1 to 3 do
8489: LD_ADDR_VAR 0 2
8493: PUSH
8494: DOUBLE
8495: LD_INT 1
8497: DEC
8498: ST_TO_ADDR
8499: LD_INT 3
8501: PUSH
8502: FOR_TO
8503: IFFALSE 8558
// begin InitHc ;
8505: CALL_OW 19
// uc_nation := 0 ;
8509: LD_ADDR_OWVAR 21
8513: PUSH
8514: LD_INT 0
8516: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8517: LD_ADDR_OWVAR 28
8521: PUSH
8522: LD_INT 16
8524: ST_TO_ADDR
// un := CreateHuman ;
8525: LD_ADDR_VAR 0 5
8529: PUSH
8530: CALL_OW 44
8534: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
8535: LD_VAR 0 5
8539: PPUSH
8540: LD_INT 194
8542: PPUSH
8543: LD_INT 164
8545: PPUSH
8546: LD_INT 6
8548: PPUSH
8549: LD_INT 0
8551: PPUSH
8552: CALL_OW 50
// end ;
8556: GO 8502
8558: POP
8559: POP
// uc_nation := 3 ;
8560: LD_ADDR_OWVAR 21
8564: PUSH
8565: LD_INT 3
8567: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
8568: LD_INT 24
8570: PPUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 1
8576: PPUSH
8577: LD_INT 44
8579: PPUSH
8580: LD_INT 10
8582: PPUSH
8583: CALL 30222 0 5
// un := CreateVehicle ;
8587: LD_ADDR_VAR 0 5
8591: PUSH
8592: CALL_OW 45
8596: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
8597: LD_VAR 0 5
8601: PPUSH
8602: LD_INT 199
8604: PPUSH
8605: LD_INT 162
8607: PPUSH
8608: LD_INT 1
8610: PPUSH
8611: LD_INT 0
8613: PPUSH
8614: CALL 64796 0 5
// ComHold ( un ) ;
8618: LD_VAR 0 5
8622: PPUSH
8623: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8627: LD_INT 0
8629: PPUSH
8630: LD_INT 3
8632: PPUSH
8633: LD_INT 4
8635: PPUSH
8636: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8640: CALL_OW 44
8644: PPUSH
8645: LD_VAR 0 5
8649: PPUSH
8650: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8654: LD_INT 24
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: LD_INT 1
8662: PPUSH
8663: LD_INT 45
8665: PPUSH
8666: LD_INT 10
8668: PPUSH
8669: CALL 30222 0 5
// un := CreateVehicle ;
8673: LD_ADDR_VAR 0 5
8677: PUSH
8678: CALL_OW 45
8682: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
8683: LD_VAR 0 5
8687: PPUSH
8688: LD_INT 129
8690: PPUSH
8691: LD_INT 93
8693: PPUSH
8694: LD_INT 1
8696: PPUSH
8697: LD_INT 0
8699: PPUSH
8700: CALL 64796 0 5
// ComHold ( un ) ;
8704: LD_VAR 0 5
8708: PPUSH
8709: CALL_OW 140
// if Difficulty > 1 then
8713: LD_OWVAR 67
8717: PUSH
8718: LD_INT 1
8720: GREATER
8721: IFFALSE 8895
// begin PrepareHuman ( false , 3 , 4 ) ;
8723: LD_INT 0
8725: PPUSH
8726: LD_INT 3
8728: PPUSH
8729: LD_INT 4
8731: PPUSH
8732: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8736: CALL_OW 44
8740: PPUSH
8741: LD_VAR 0 5
8745: PPUSH
8746: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8750: LD_INT 24
8752: PPUSH
8753: LD_INT 1
8755: PPUSH
8756: LD_INT 1
8758: PPUSH
8759: LD_INT 45
8761: PPUSH
8762: LD_INT 10
8764: PPUSH
8765: CALL 30222 0 5
// un := CreateVehicle ;
8769: LD_ADDR_VAR 0 5
8773: PUSH
8774: CALL_OW 45
8778: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 92 , 2 , false ) ;
8779: LD_VAR 0 5
8783: PPUSH
8784: LD_INT 134
8786: PPUSH
8787: LD_INT 92
8789: PPUSH
8790: LD_INT 2
8792: PPUSH
8793: LD_INT 0
8795: PPUSH
8796: CALL 64796 0 5
// ComHold ( un ) ;
8800: LD_VAR 0 5
8804: PPUSH
8805: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
8809: LD_INT 0
8811: PPUSH
8812: LD_INT 3
8814: PPUSH
8815: LD_INT 4
8817: PPUSH
8818: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8822: CALL_OW 44
8826: PPUSH
8827: LD_VAR 0 5
8831: PPUSH
8832: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
8836: LD_INT 24
8838: PPUSH
8839: LD_INT 1
8841: PPUSH
8842: LD_INT 1
8844: PPUSH
8845: LD_INT 45
8847: PPUSH
8848: LD_INT 10
8850: PPUSH
8851: CALL 30222 0 5
// un := CreateVehicle ;
8855: LD_ADDR_VAR 0 5
8859: PUSH
8860: CALL_OW 45
8864: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
8865: LD_VAR 0 5
8869: PPUSH
8870: LD_INT 200
8872: PPUSH
8873: LD_INT 173
8875: PPUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_INT 0
8881: PPUSH
8882: CALL 64796 0 5
// ComHold ( un ) ;
8886: LD_VAR 0 5
8890: PPUSH
8891: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
8895: LD_INT 0
8897: PPUSH
8898: LD_INT 3
8900: PPUSH
8901: LD_INT 4
8903: PPUSH
8904: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
8908: CALL_OW 44
8912: PPUSH
8913: LD_VAR 0 5
8917: PPUSH
8918: CALL_OW 52
// bc_type := b_armoury ;
8922: LD_ADDR_OWVAR 42
8926: PUSH
8927: LD_INT 4
8929: ST_TO_ADDR
// if Difficulty > 1 then
8930: LD_OWVAR 67
8934: PUSH
8935: LD_INT 1
8937: GREATER
8938: IFFALSE 8948
// bc_type := b_barracks ;
8940: LD_ADDR_OWVAR 42
8944: PUSH
8945: LD_INT 5
8947: ST_TO_ADDR
// bc_level := 6 ;
8948: LD_ADDR_OWVAR 43
8952: PUSH
8953: LD_INT 6
8955: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
8956: LD_INT 120
8958: PPUSH
8959: LD_INT 100
8961: PPUSH
8962: LD_INT 5
8964: PPUSH
8965: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
8969: LD_ADDR_VAR 0 2
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_INT 3
8981: PUSH
8982: LD_INT 3
8984: PUSH
8985: LD_INT 4
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: PUSH
8997: LD_OWVAR 67
9001: ARRAY
9002: PUSH
9003: FOR_TO
9004: IFFALSE 9062
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
9006: LD_INT 0
9008: PPUSH
9009: LD_INT 1
9011: PUSH
9012: LD_INT 1
9014: PUSH
9015: LD_INT 9
9017: PUSH
9018: LD_INT 9
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: PUSH
9027: LD_OWVAR 67
9031: ARRAY
9032: PPUSH
9033: LD_INT 5
9035: PPUSH
9036: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
9040: CALL_OW 44
9044: PPUSH
9045: LD_INT 120
9047: PPUSH
9048: LD_INT 100
9050: PPUSH
9051: CALL_OW 428
9055: PPUSH
9056: CALL_OW 52
// end ;
9060: GO 9003
9062: POP
9063: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
9064: LD_ADDR_VAR 0 7
9068: PUSH
9069: LD_INT 135
9071: PUSH
9072: LD_INT 100
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 137
9081: PUSH
9082: LD_INT 92
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: ST_TO_ADDR
// for i := 1 to tmp do
9093: LD_ADDR_VAR 0 2
9097: PUSH
9098: DOUBLE
9099: LD_INT 1
9101: DEC
9102: ST_TO_ADDR
9103: LD_VAR 0 7
9107: PUSH
9108: FOR_TO
9109: IFFALSE 9279
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
9111: LD_INT 22
9113: PUSH
9114: LD_INT 22
9116: PUSH
9117: LD_INT 24
9119: PUSH
9120: LD_INT 24
9122: PUSH
9123: LD_INT 24
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: PUSH
9133: LD_OWVAR 67
9137: PUSH
9138: LD_INT 0
9140: PPUSH
9141: LD_INT 1
9143: PPUSH
9144: CALL_OW 12
9148: PLUS
9149: ARRAY
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_INT 1
9156: PPUSH
9157: LD_INT 44
9159: PPUSH
9160: LD_INT 25
9162: PPUSH
9163: CALL 30222 0 5
// veh := CreateVehicle ;
9167: LD_ADDR_VAR 0 6
9171: PUSH
9172: CALL_OW 45
9176: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9177: LD_VAR 0 6
9181: PPUSH
9182: LD_INT 2
9184: PPUSH
9185: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
9189: LD_VAR 0 6
9193: PPUSH
9194: LD_VAR 0 7
9198: PUSH
9199: LD_VAR 0 2
9203: ARRAY
9204: PUSH
9205: LD_INT 1
9207: ARRAY
9208: PPUSH
9209: LD_VAR 0 7
9213: PUSH
9214: LD_VAR 0 2
9218: ARRAY
9219: PUSH
9220: LD_INT 2
9222: ARRAY
9223: PPUSH
9224: LD_INT 0
9226: PPUSH
9227: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
9231: LD_INT 0
9233: PPUSH
9234: LD_INT 3
9236: PPUSH
9237: LD_INT 6
9239: PPUSH
9240: CALL_OW 380
// un := CreateHuman ;
9244: LD_ADDR_VAR 0 5
9248: PUSH
9249: CALL_OW 44
9253: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9254: LD_VAR 0 5
9258: PPUSH
9259: LD_VAR 0 6
9263: PPUSH
9264: CALL_OW 52
// ComHold ( veh ) ;
9268: LD_VAR 0 6
9272: PPUSH
9273: CALL_OW 140
// end ;
9277: GO 9108
9279: POP
9280: POP
// tmp := [ 191 , 122 ] ;
9281: LD_ADDR_VAR 0 7
9285: PUSH
9286: LD_INT 191
9288: PUSH
9289: LD_INT 122
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
9296: LD_INT 24
9298: PPUSH
9299: LD_INT 1
9301: PPUSH
9302: LD_INT 1
9304: PPUSH
9305: LD_INT 44
9307: PPUSH
9308: LD_INT 30
9310: PPUSH
9311: CALL 30222 0 5
// ruBlockadeTank := CreateVehicle ;
9315: LD_ADDR_EXP 51
9319: PUSH
9320: CALL_OW 45
9324: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9325: LD_EXP 51
9329: PPUSH
9330: LD_INT 2
9332: PPUSH
9333: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9337: LD_EXP 51
9341: PPUSH
9342: LD_INT 191
9344: PPUSH
9345: LD_INT 122
9347: PPUSH
9348: LD_INT 0
9350: PPUSH
9351: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
9355: LD_INT 1
9357: PPUSH
9358: LD_INT 5
9360: PUSH
9361: LD_INT 6
9363: PUSH
9364: LD_INT 7
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: LIST
9371: PUSH
9372: LD_OWVAR 67
9376: PUSH
9377: LD_INT 1
9379: MINUS
9380: ARRAY
9381: PPUSH
9382: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
9386: CALL_OW 44
9390: PPUSH
9391: LD_EXP 51
9395: PPUSH
9396: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
9400: LD_EXP 51
9404: PPUSH
9405: CALL_OW 140
// ruBlockadeSquad := [ ] ;
9409: LD_ADDR_EXP 53
9413: PUSH
9414: EMPTY
9415: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 , 6 ] [ Difficulty ] do
9416: LD_ADDR_VAR 0 2
9420: PUSH
9421: DOUBLE
9422: LD_INT 1
9424: DEC
9425: ST_TO_ADDR
9426: LD_INT 3
9428: PUSH
9429: LD_INT 4
9431: PUSH
9432: LD_INT 6
9434: PUSH
9435: LD_INT 6
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: PUSH
9444: LD_OWVAR 67
9448: ARRAY
9449: PUSH
9450: FOR_TO
9451: IFFALSE 9567
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
9453: LD_INT 0
9455: PPUSH
9456: LD_INT 1
9458: PPUSH
9459: LD_INT 4
9461: PUSH
9462: LD_INT 5
9464: PUSH
9465: LD_INT 6
9467: PUSH
9468: LD_INT 7
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: PUSH
9477: LD_OWVAR 67
9481: ARRAY
9482: PPUSH
9483: CALL_OW 380
// un := CreateHuman ;
9487: LD_ADDR_VAR 0 5
9491: PUSH
9492: CALL_OW 44
9496: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
9497: LD_VAR 0 5
9501: PPUSH
9502: LD_INT 9
9504: PPUSH
9505: LD_INT 0
9507: PPUSH
9508: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
9512: LD_VAR 0 5
9516: PPUSH
9517: LD_INT 198
9519: PPUSH
9520: LD_INT 129
9522: PPUSH
9523: CALL_OW 118
// AddComCrawl ( un ) ;
9527: LD_VAR 0 5
9531: PPUSH
9532: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9536: LD_ADDR_EXP 53
9540: PUSH
9541: LD_EXP 53
9545: PPUSH
9546: LD_EXP 53
9550: PUSH
9551: LD_INT 1
9553: PLUS
9554: PPUSH
9555: LD_VAR 0 5
9559: PPUSH
9560: CALL_OW 1
9564: ST_TO_ADDR
// end ;
9565: GO 9450
9567: POP
9568: POP
// PrepareHuman ( false , 4 , 5 ) ;
9569: LD_INT 0
9571: PPUSH
9572: LD_INT 4
9574: PPUSH
9575: LD_INT 5
9577: PPUSH
9578: CALL_OW 380
// un := CreateHuman ;
9582: LD_ADDR_VAR 0 5
9586: PUSH
9587: CALL_OW 44
9591: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
9592: LD_VAR 0 5
9596: PPUSH
9597: LD_INT 179
9599: PPUSH
9600: LD_INT 113
9602: PPUSH
9603: LD_INT 0
9605: PPUSH
9606: CALL_OW 48
// ComHold ( un ) ;
9610: LD_VAR 0 5
9614: PPUSH
9615: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
9619: LD_ADDR_EXP 53
9623: PUSH
9624: LD_EXP 53
9628: PPUSH
9629: LD_EXP 53
9633: PUSH
9634: LD_INT 1
9636: PLUS
9637: PPUSH
9638: LD_VAR 0 5
9642: PPUSH
9643: CALL_OW 1
9647: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
9648: LD_ADDR_VAR 0 7
9652: PUSH
9653: LD_INT 167
9655: PPUSH
9656: LD_INT 243
9658: PPUSH
9659: CALL_OW 428
9663: PPUSH
9664: CALL_OW 274
9668: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
9669: LD_VAR 0 7
9673: PPUSH
9674: LD_INT 1
9676: PPUSH
9677: LD_INT 1000
9679: PPUSH
9680: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
9684: LD_VAR 0 7
9688: PPUSH
9689: LD_INT 2
9691: PPUSH
9692: LD_INT 400
9694: PPUSH
9695: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
9699: LD_ADDR_VAR 0 7
9703: PUSH
9704: LD_INT 169
9706: PPUSH
9707: LD_INT 229
9709: PPUSH
9710: CALL_OW 428
9714: ST_TO_ADDR
// for i := 1 to 3 do
9715: LD_ADDR_VAR 0 2
9719: PUSH
9720: DOUBLE
9721: LD_INT 1
9723: DEC
9724: ST_TO_ADDR
9725: LD_INT 3
9727: PUSH
9728: FOR_TO
9729: IFFALSE 9820
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9731: LD_INT 0
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: LD_INT 4
9739: PUSH
9740: LD_INT 5
9742: PUSH
9743: LD_INT 5
9745: PUSH
9746: LD_INT 6
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: PUSH
9755: LD_OWVAR 67
9759: ARRAY
9760: PPUSH
9761: CALL_OW 380
// un := CreateHuman ;
9765: LD_ADDR_VAR 0 5
9769: PUSH
9770: CALL_OW 44
9774: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
9775: LD_VAR 0 5
9779: PPUSH
9780: LD_VAR 0 7
9784: PPUSH
9785: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9789: LD_ADDR_EXP 54
9793: PUSH
9794: LD_EXP 54
9798: PPUSH
9799: LD_EXP 54
9803: PUSH
9804: LD_INT 1
9806: PLUS
9807: PPUSH
9808: LD_VAR 0 5
9812: PPUSH
9813: CALL_OW 1
9817: ST_TO_ADDR
// end ;
9818: GO 9728
9820: POP
9821: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
9822: LD_ADDR_VAR 0 7
9826: PUSH
9827: LD_INT 165
9829: PUSH
9830: LD_INT 227
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 173
9839: PUSH
9840: LD_INT 231
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: ST_TO_ADDR
// for i := 1 to tmp do
9851: LD_ADDR_VAR 0 2
9855: PUSH
9856: DOUBLE
9857: LD_INT 1
9859: DEC
9860: ST_TO_ADDR
9861: LD_VAR 0 7
9865: PUSH
9866: FOR_TO
9867: IFFALSE 9988
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9869: LD_INT 0
9871: PPUSH
9872: LD_INT 1
9874: PPUSH
9875: LD_INT 4
9877: PUSH
9878: LD_INT 5
9880: PUSH
9881: LD_INT 5
9883: PUSH
9884: LD_INT 6
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: PUSH
9893: LD_OWVAR 67
9897: ARRAY
9898: PPUSH
9899: CALL_OW 380
// un := CreateHuman ;
9903: LD_ADDR_VAR 0 5
9907: PUSH
9908: CALL_OW 44
9912: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
9913: LD_VAR 0 5
9917: PPUSH
9918: LD_VAR 0 7
9922: PUSH
9923: LD_VAR 0 2
9927: ARRAY
9928: PUSH
9929: LD_INT 1
9931: ARRAY
9932: PPUSH
9933: LD_VAR 0 7
9937: PUSH
9938: LD_VAR 0 2
9942: ARRAY
9943: PUSH
9944: LD_INT 2
9946: ARRAY
9947: PPUSH
9948: CALL_OW 428
9952: PPUSH
9953: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
9957: LD_ADDR_EXP 54
9961: PUSH
9962: LD_EXP 54
9966: PPUSH
9967: LD_EXP 54
9971: PUSH
9972: LD_INT 1
9974: PLUS
9975: PPUSH
9976: LD_VAR 0 5
9980: PPUSH
9981: CALL_OW 1
9985: ST_TO_ADDR
// end ;
9986: GO 9866
9988: POP
9989: POP
// for i := 1 to 2 do
9990: LD_ADDR_VAR 0 2
9994: PUSH
9995: DOUBLE
9996: LD_INT 1
9998: DEC
9999: ST_TO_ADDR
10000: LD_INT 2
10002: PUSH
10003: FOR_TO
10004: IFFALSE 10059
// begin InitHc ;
10006: CALL_OW 19
// uc_nation := 0 ;
10010: LD_ADDR_OWVAR 21
10014: PUSH
10015: LD_INT 0
10017: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
10018: LD_ADDR_OWVAR 28
10022: PUSH
10023: LD_INT 16
10025: ST_TO_ADDR
// un := CreateHuman ;
10026: LD_ADDR_VAR 0 5
10030: PUSH
10031: CALL_OW 44
10035: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
10036: LD_VAR 0 5
10040: PPUSH
10041: LD_INT 166
10043: PPUSH
10044: LD_INT 233
10046: PPUSH
10047: LD_INT 2
10049: PPUSH
10050: LD_INT 0
10052: PPUSH
10053: CALL_OW 50
// end ;
10057: GO 10003
10059: POP
10060: POP
// uc_nation := 3 ;
10061: LD_ADDR_OWVAR 21
10065: PUSH
10066: LD_INT 3
10068: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
10069: LD_ADDR_VAR 0 7
10073: PUSH
10074: LD_INT 71
10076: PUSH
10077: LD_INT 52
10079: PUSH
10080: LD_INT 11
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: LIST
10087: ST_TO_ADDR
// for i in tmp do
10088: LD_ADDR_VAR 0 2
10092: PUSH
10093: LD_VAR 0 7
10097: PUSH
10098: FOR_IN
10099: IFFALSE 10143
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
10101: LD_VAR 0 2
10105: PPUSH
10106: CALL_OW 274
10110: PPUSH
10111: LD_INT 1
10113: PPUSH
10114: LD_INT 3000
10116: PPUSH
10117: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
10121: LD_VAR 0 2
10125: PPUSH
10126: CALL_OW 274
10130: PPUSH
10131: LD_INT 2
10133: PPUSH
10134: LD_INT 600
10136: PPUSH
10137: CALL_OW 277
// end ;
10141: GO 10098
10143: POP
10144: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
10145: LD_ADDR_VAR 0 7
10149: PUSH
10150: LD_INT 41
10152: PUSH
10153: LD_INT 57
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PUSH
10160: LD_INT 38
10162: PUSH
10163: LD_INT 55
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: LD_INT 50
10172: PUSH
10173: LD_INT 73
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 51
10182: PUSH
10183: LD_INT 65
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 82
10192: PUSH
10193: LD_INT 93
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 87
10202: PUSH
10203: LD_INT 100
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 91
10212: PUSH
10213: LD_INT 109
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 84
10222: PUSH
10223: LD_INT 120
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 113
10232: PUSH
10233: LD_INT 153
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 123
10242: PUSH
10243: LD_INT 171
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: LD_INT 125
10252: PUSH
10253: LD_INT 178
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 125
10262: PUSH
10263: LD_INT 188
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 125
10272: PUSH
10273: LD_INT 201
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 33
10282: PUSH
10283: LD_INT 60
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 76
10292: PUSH
10293: LD_INT 95
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 84
10302: PUSH
10303: LD_INT 111
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 112
10312: PUSH
10313: LD_INT 165
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: ST_TO_ADDR
// for i := 1 to tmp do
10339: LD_ADDR_VAR 0 2
10343: PUSH
10344: DOUBLE
10345: LD_INT 1
10347: DEC
10348: ST_TO_ADDR
10349: LD_VAR 0 7
10353: PUSH
10354: FOR_TO
10355: IFFALSE 10602
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10357: LD_ADDR_VAR 0 4
10361: PUSH
10362: LD_VAR 0 7
10366: PUSH
10367: LD_VAR 0 2
10371: ARRAY
10372: PUSH
10373: LD_INT 1
10375: ARRAY
10376: PPUSH
10377: LD_VAR 0 7
10381: PUSH
10382: LD_VAR 0 2
10386: ARRAY
10387: PUSH
10388: LD_INT 2
10390: ARRAY
10391: PPUSH
10392: CALL_OW 428
10396: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
10397: LD_VAR 0 4
10401: PPUSH
10402: CALL_OW 266
10406: PUSH
10407: LD_INT 4
10409: PUSH
10410: LD_INT 5
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: IN
10417: IFFALSE 10501
// begin for j := 1 to Difficulty do
10419: LD_ADDR_VAR 0 3
10423: PUSH
10424: DOUBLE
10425: LD_INT 1
10427: DEC
10428: ST_TO_ADDR
10429: LD_OWVAR 67
10433: PUSH
10434: FOR_TO
10435: IFFALSE 10497
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10437: LD_INT 0
10439: PPUSH
10440: LD_INT 1
10442: PPUSH
10443: LD_INT 4
10445: PUSH
10446: LD_INT 5
10448: PUSH
10449: LD_INT 5
10451: PUSH
10452: LD_INT 6
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: PUSH
10461: LD_OWVAR 67
10465: ARRAY
10466: PPUSH
10467: CALL_OW 380
// un := CreateHuman ;
10471: LD_ADDR_VAR 0 5
10475: PUSH
10476: CALL_OW 44
10480: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10481: LD_VAR 0 5
10485: PPUSH
10486: LD_VAR 0 4
10490: PPUSH
10491: CALL_OW 52
// end ;
10495: GO 10434
10497: POP
10498: POP
// end else
10499: GO 10571
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10501: LD_INT 0
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: LD_INT 4
10509: PUSH
10510: LD_INT 5
10512: PUSH
10513: LD_INT 5
10515: PUSH
10516: LD_INT 6
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: PUSH
10525: LD_OWVAR 67
10529: ARRAY
10530: PPUSH
10531: CALL_OW 380
// un := CreateHuman ;
10535: LD_ADDR_VAR 0 5
10539: PUSH
10540: CALL_OW 44
10544: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10545: LD_VAR 0 5
10549: PPUSH
10550: LD_VAR 0 4
10554: PPUSH
10555: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
10559: LD_VAR 0 5
10563: PPUSH
10564: LD_INT 9
10566: PPUSH
10567: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10571: LD_ADDR_EXP 55
10575: PUSH
10576: LD_EXP 55
10580: PPUSH
10581: LD_EXP 55
10585: PUSH
10586: LD_INT 1
10588: PLUS
10589: PPUSH
10590: LD_VAR 0 5
10594: PPUSH
10595: CALL_OW 1
10599: ST_TO_ADDR
// end ;
10600: GO 10354
10602: POP
10603: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
10604: LD_ADDR_VAR 0 4
10608: PUSH
10609: LD_INT 10
10611: PPUSH
10612: LD_INT 22
10614: PUSH
10615: LD_INT 3
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 30
10624: PUSH
10625: LD_INT 32
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 58
10634: PUSH
10635: EMPTY
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 70
10647: PUSH
10648: FOR_IN
10649: IFFALSE 10783
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
10651: LD_INT 40
10653: PUSH
10654: LD_INT 50
10656: PUSH
10657: LD_INT 75
10659: PUSH
10660: LD_INT 80
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: PUSH
10669: LD_OWVAR 67
10673: ARRAY
10674: PUSH
10675: LD_EXP 7
10679: PUSH
10680: LD_INT 10
10682: MUL
10683: MINUS
10684: PPUSH
10685: CALL_OW 13
10689: NOT
10690: IFFALSE 10694
// continue ;
10692: GO 10648
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10694: LD_INT 0
10696: PPUSH
10697: LD_INT 1
10699: PPUSH
10700: LD_INT 4
10702: PUSH
10703: LD_INT 5
10705: PUSH
10706: LD_INT 5
10708: PUSH
10709: LD_INT 6
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: PUSH
10718: LD_OWVAR 67
10722: ARRAY
10723: PPUSH
10724: CALL_OW 380
// un := CreateHuman ;
10728: LD_ADDR_VAR 0 5
10732: PUSH
10733: CALL_OW 44
10737: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
10738: LD_VAR 0 5
10742: PPUSH
10743: LD_VAR 0 4
10747: PPUSH
10748: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10752: LD_ADDR_EXP 55
10756: PUSH
10757: LD_EXP 55
10761: PPUSH
10762: LD_EXP 55
10766: PUSH
10767: LD_INT 1
10769: PLUS
10770: PPUSH
10771: LD_VAR 0 5
10775: PPUSH
10776: CALL_OW 1
10780: ST_TO_ADDR
// end ;
10781: GO 10648
10783: POP
10784: POP
// for i := 1 to 5 do
10785: LD_ADDR_VAR 0 2
10789: PUSH
10790: DOUBLE
10791: LD_INT 1
10793: DEC
10794: ST_TO_ADDR
10795: LD_INT 5
10797: PUSH
10798: FOR_TO
10799: IFFALSE 10897
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10801: LD_INT 0
10803: PPUSH
10804: LD_INT 2
10806: PPUSH
10807: LD_INT 4
10809: PUSH
10810: LD_INT 5
10812: PUSH
10813: LD_INT 5
10815: PUSH
10816: LD_INT 6
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: PUSH
10825: LD_OWVAR 67
10829: ARRAY
10830: PPUSH
10831: CALL_OW 380
// un := CreateHuman ;
10835: LD_ADDR_VAR 0 5
10839: PUSH
10840: CALL_OW 44
10844: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
10845: LD_VAR 0 5
10849: PPUSH
10850: LD_INT 66
10852: PPUSH
10853: LD_INT 101
10855: PPUSH
10856: LD_INT 3
10858: PPUSH
10859: LD_INT 0
10861: PPUSH
10862: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
10866: LD_ADDR_EXP 55
10870: PUSH
10871: LD_EXP 55
10875: PPUSH
10876: LD_EXP 55
10880: PUSH
10881: LD_INT 1
10883: PLUS
10884: PPUSH
10885: LD_VAR 0 5
10889: PPUSH
10890: CALL_OW 1
10894: ST_TO_ADDR
// end ;
10895: GO 10798
10897: POP
10898: POP
// tmp := [ ruFac1 , ruFac2 ] ;
10899: LD_ADDR_VAR 0 7
10903: PUSH
10904: LD_INT 72
10906: PUSH
10907: LD_INT 12
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: ST_TO_ADDR
// for i := 1 to tmp do
10914: LD_ADDR_VAR 0 2
10918: PUSH
10919: DOUBLE
10920: LD_INT 1
10922: DEC
10923: ST_TO_ADDR
10924: LD_VAR 0 7
10928: PUSH
10929: FOR_TO
10930: IFFALSE 11047
// for j := 1 to 6 do
10932: LD_ADDR_VAR 0 3
10936: PUSH
10937: DOUBLE
10938: LD_INT 1
10940: DEC
10941: ST_TO_ADDR
10942: LD_INT 6
10944: PUSH
10945: FOR_TO
10946: IFFALSE 11043
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10948: LD_INT 0
10950: PPUSH
10951: LD_INT 3
10953: PPUSH
10954: LD_INT 4
10956: PUSH
10957: LD_INT 5
10959: PUSH
10960: LD_INT 5
10962: PUSH
10963: LD_INT 6
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: PUSH
10972: LD_OWVAR 67
10976: ARRAY
10977: PPUSH
10978: CALL_OW 380
// un := CreateHuman ;
10982: LD_ADDR_VAR 0 5
10986: PUSH
10987: CALL_OW 44
10991: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
10992: LD_VAR 0 5
10996: PPUSH
10997: LD_VAR 0 7
11001: PUSH
11002: LD_VAR 0 2
11006: ARRAY
11007: PPUSH
11008: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11012: LD_ADDR_EXP 55
11016: PUSH
11017: LD_EXP 55
11021: PPUSH
11022: LD_EXP 55
11026: PUSH
11027: LD_INT 1
11029: PLUS
11030: PPUSH
11031: LD_VAR 0 5
11035: PPUSH
11036: CALL_OW 1
11040: ST_TO_ADDR
// end ;
11041: GO 10945
11043: POP
11044: POP
11045: GO 10929
11047: POP
11048: POP
// for i := 1 to 3 do
11049: LD_ADDR_VAR 0 2
11053: PUSH
11054: DOUBLE
11055: LD_INT 1
11057: DEC
11058: ST_TO_ADDR
11059: LD_INT 3
11061: PUSH
11062: FOR_TO
11063: IFFALSE 11152
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11065: LD_INT 0
11067: PPUSH
11068: LD_INT 4
11070: PPUSH
11071: LD_INT 4
11073: PUSH
11074: LD_INT 5
11076: PUSH
11077: LD_INT 5
11079: PUSH
11080: LD_INT 6
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: PUSH
11089: LD_OWVAR 67
11093: ARRAY
11094: PPUSH
11095: CALL_OW 380
// un := CreateHuman ;
11099: LD_ADDR_VAR 0 5
11103: PUSH
11104: CALL_OW 44
11108: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
11109: LD_VAR 0 5
11113: PPUSH
11114: LD_INT 17
11116: PPUSH
11117: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11121: LD_ADDR_EXP 55
11125: PUSH
11126: LD_EXP 55
11130: PPUSH
11131: LD_EXP 55
11135: PUSH
11136: LD_INT 1
11138: PLUS
11139: PPUSH
11140: LD_VAR 0 5
11144: PPUSH
11145: CALL_OW 1
11149: ST_TO_ADDR
// end ;
11150: GO 11062
11152: POP
11153: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
11154: LD_ADDR_VAR 0 2
11158: PUSH
11159: DOUBLE
11160: LD_INT 1
11162: DEC
11163: ST_TO_ADDR
11164: LD_INT 2
11166: PUSH
11167: LD_INT 3
11169: PUSH
11170: LD_INT 3
11172: PUSH
11173: LD_INT 3
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: PUSH
11182: LD_OWVAR 67
11186: ARRAY
11187: PUSH
11188: FOR_TO
11189: IFFALSE 11309
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
11191: LD_INT 22
11193: PPUSH
11194: LD_INT 1
11196: PPUSH
11197: LD_INT 1
11199: PPUSH
11200: LD_INT 52
11202: PPUSH
11203: LD_INT 100
11205: PPUSH
11206: CALL 30222 0 5
// veh := CreateVehicle ;
11210: LD_ADDR_VAR 0 6
11214: PUSH
11215: CALL_OW 45
11219: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
11220: LD_INT 0
11222: PPUSH
11223: LD_INT 3
11225: PPUSH
11226: LD_INT 4
11228: PPUSH
11229: CALL_OW 380
// un := CreateHuman ;
11233: LD_ADDR_VAR 0 5
11237: PUSH
11238: CALL_OW 44
11242: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
11243: LD_VAR 0 6
11247: PPUSH
11248: LD_INT 107
11250: PPUSH
11251: LD_INT 182
11253: PPUSH
11254: LD_INT 4
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11264: LD_VAR 0 5
11268: PPUSH
11269: LD_VAR 0 6
11273: PPUSH
11274: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11278: LD_ADDR_EXP 55
11282: PUSH
11283: LD_EXP 55
11287: PPUSH
11288: LD_EXP 55
11292: PUSH
11293: LD_INT 1
11295: PLUS
11296: PPUSH
11297: LD_VAR 0 5
11301: PPUSH
11302: CALL_OW 1
11306: ST_TO_ADDR
// end ;
11307: GO 11188
11309: POP
11310: POP
// InitHc ;
11311: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 , 12 ] [ Difficulty ] do
11315: LD_ADDR_VAR 0 2
11319: PUSH
11320: DOUBLE
11321: LD_INT 1
11323: DEC
11324: ST_TO_ADDR
11325: LD_INT 6
11327: PUSH
11328: LD_INT 8
11330: PUSH
11331: LD_INT 10
11333: PUSH
11334: LD_INT 12
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: PUSH
11343: LD_OWVAR 67
11347: ARRAY
11348: PUSH
11349: FOR_TO
11350: IFFALSE 11422
// begin uc_nation := 0 ;
11352: LD_ADDR_OWVAR 21
11356: PUSH
11357: LD_INT 0
11359: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11360: LD_ADDR_OWVAR 28
11364: PUSH
11365: LD_INT 15
11367: ST_TO_ADDR
// un := CreateHuman ;
11368: LD_ADDR_VAR 0 5
11372: PUSH
11373: CALL_OW 44
11377: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
11378: LD_VAR 0 5
11382: PPUSH
11383: LD_INT 269
11385: PUSH
11386: LD_INT 300
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_VAR 0 2
11397: PUSH
11398: LD_INT 2
11400: MOD
11401: PUSH
11402: LD_INT 1
11404: PLUS
11405: ARRAY
11406: PPUSH
11407: LD_INT 182
11409: PPUSH
11410: LD_INT 4
11412: PPUSH
11413: LD_INT 0
11415: PPUSH
11416: CALL_OW 50
// end ;
11420: GO 11349
11422: POP
11423: POP
// uc_nation := 3 ;
11424: LD_ADDR_OWVAR 21
11428: PUSH
11429: LD_INT 3
11431: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
11432: LD_EXP 8
11436: PUSH
11437: LD_INT 10
11439: PUSH
11440: LD_INT 8
11442: PUSH
11443: LD_INT 6
11445: PUSH
11446: LD_INT 5
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: LD_OWVAR 67
11459: ARRAY
11460: LESS
11461: IFFALSE 11540
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
11463: LD_INT 21
11465: PPUSH
11466: LD_INT 1
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: LD_INT 51
11474: PPUSH
11475: LD_INT 12
11477: PPUSH
11478: CALL 30222 0 5
// veh := CreateVehicle ;
11482: LD_ADDR_VAR 0 6
11486: PUSH
11487: CALL_OW 45
11491: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
11492: LD_VAR 0 6
11496: PPUSH
11497: LD_INT 269
11499: PPUSH
11500: LD_INT 66
11502: PPUSH
11503: LD_INT 4
11505: PPUSH
11506: LD_INT 0
11508: PPUSH
11509: CALL 64796 0 5
// SetLives ( veh , 333 ) ;
11513: LD_VAR 0 6
11517: PPUSH
11518: LD_INT 333
11520: PPUSH
11521: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
11525: LD_VAR 0 6
11529: PPUSH
11530: LD_INT 2
11532: PPUSH
11533: LD_INT 100
11535: PPUSH
11536: CALL_OW 290
// end ; end ;
11540: LD_VAR 0 1
11544: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
11545: LD_EXP 51
11549: PUSH
11550: LD_EXP 51
11554: PPUSH
11555: CALL_OW 255
11559: PUSH
11560: LD_INT 3
11562: EQUAL
11563: AND
11564: IFFALSE 11727
11566: GO 11568
11568: DISABLE
11569: LD_INT 0
11571: PPUSH
// begin enable ;
11572: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
11573: LD_INT 81
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 91
11585: PUSH
11586: LD_EXP 51
11590: PUSH
11591: LD_INT 15
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PPUSH
11603: CALL_OW 69
11607: IFFALSE 11687
// begin if not IsDrivenBy ( ruBlockadeTank ) then
11609: LD_EXP 51
11613: PPUSH
11614: CALL_OW 311
11618: NOT
11619: IFFALSE 11685
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
11621: LD_ADDR_VAR 0 1
11625: PUSH
11626: LD_INT 22
11628: PUSH
11629: LD_INT 3
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 21
11638: PUSH
11639: LD_INT 1
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PPUSH
11650: CALL_OW 69
11654: PPUSH
11655: LD_EXP 51
11659: PPUSH
11660: CALL_OW 74
11664: ST_TO_ADDR
// if driver then
11665: LD_VAR 0 1
11669: IFFALSE 11685
// ComEnterUnit ( driver , ruBlockadeTank ) ;
11671: LD_VAR 0 1
11675: PPUSH
11676: LD_EXP 51
11680: PPUSH
11681: CALL_OW 120
// end ; exit ;
11685: GO 11727
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
11687: LD_EXP 51
11691: PPUSH
11692: CALL_OW 256
11696: PUSH
11697: LD_INT 1000
11699: LESS
11700: PUSH
11701: LD_EXP 51
11705: PPUSH
11706: CALL_OW 311
11710: AND
11711: IFFALSE 11727
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
11713: LD_EXP 51
11717: PPUSH
11718: CALL_OW 311
11722: PPUSH
11723: CALL 64356 0 1
// end ;
11727: PPOPN 1
11729: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
11730: LD_EXP 53
11734: PPUSH
11735: LD_INT 3
11737: PUSH
11738: LD_INT 24
11740: PUSH
11741: LD_INT 1000
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PPUSH
11752: CALL_OW 72
11756: PUSH
11757: LD_EXP 53
11761: PPUSH
11762: LD_INT 25
11764: PUSH
11765: LD_INT 4
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 50
11774: PUSH
11775: EMPTY
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PPUSH
11782: CALL_OW 72
11786: AND
11787: IFFALSE 11975
11789: GO 11791
11791: DISABLE
11792: LD_INT 0
11794: PPUSH
11795: PPUSH
11796: PPUSH
// begin enable ;
11797: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
11798: LD_ADDR_VAR 0 3
11802: PUSH
11803: LD_EXP 53
11807: PPUSH
11808: LD_INT 3
11810: PUSH
11811: LD_INT 24
11813: PUSH
11814: LD_INT 1000
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PPUSH
11825: CALL_OW 72
11829: PPUSH
11830: LD_INT 1
11832: PPUSH
11833: CALL 64596 0 2
11837: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
11838: LD_ADDR_VAR 0 2
11842: PUSH
11843: LD_EXP 53
11847: PPUSH
11848: LD_INT 25
11850: PUSH
11851: LD_INT 4
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 50
11860: PUSH
11861: EMPTY
11862: LIST
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PPUSH
11868: CALL_OW 72
11872: PUSH
11873: LD_INT 1
11875: ARRAY
11876: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
11877: LD_VAR 0 2
11881: PPUSH
11882: LD_VAR 0 3
11886: PUSH
11887: LD_INT 1
11889: ARRAY
11890: PPUSH
11891: CALL 59942 0 2
11895: NOT
11896: IFFALSE 11975
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
11898: LD_VAR 0 3
11902: PUSH
11903: LD_INT 1
11905: ARRAY
11906: PPUSH
11907: LD_INT 9
11909: PPUSH
11910: CALL_OW 308
11914: NOT
11915: IFFALSE 11933
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
11917: LD_VAR 0 3
11921: PUSH
11922: LD_INT 1
11924: ARRAY
11925: PPUSH
11926: LD_INT 9
11928: PPUSH
11929: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
11933: LD_VAR 0 2
11937: PPUSH
11938: LD_VAR 0 3
11942: PUSH
11943: LD_INT 1
11945: ARRAY
11946: PPUSH
11947: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
11951: LD_VAR 0 2
11955: PPUSH
11956: LD_INT 179
11958: PPUSH
11959: LD_INT 113
11961: PPUSH
11962: CALL_OW 171
// AddComHold ( sci ) ;
11966: LD_VAR 0 2
11970: PPUSH
11971: CALL_OW 200
// end ; end ;
11975: PPOPN 3
11977: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
11978: LD_INT 2
11980: PPUSH
11981: LD_INT 52
11983: PPUSH
11984: CALL_OW 292
11988: IFFALSE 12093
11990: GO 11992
11992: DISABLE
11993: LD_INT 0
11995: PPUSH
11996: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
11997: LD_ADDR_VAR 0 2
12001: PUSH
12002: LD_EXP 55
12006: PPUSH
12007: LD_INT 25
12009: PUSH
12010: LD_INT 1
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 50
12019: PUSH
12020: EMPTY
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PPUSH
12027: CALL_OW 72
12031: ST_TO_ADDR
// if not tmp then
12032: LD_VAR 0 2
12036: NOT
12037: IFFALSE 12041
// exit ;
12039: GO 12093
// for i in tmp do
12041: LD_ADDR_VAR 0 1
12045: PUSH
12046: LD_VAR 0 2
12050: PUSH
12051: FOR_IN
12052: IFFALSE 12091
// begin if IsInUnit ( i ) then
12054: LD_VAR 0 1
12058: PPUSH
12059: CALL_OW 310
12063: IFFALSE 12074
// ComExitBuilding ( i ) ;
12065: LD_VAR 0 1
12069: PPUSH
12070: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
12074: LD_VAR 0 1
12078: PPUSH
12079: LD_INT 84
12081: PPUSH
12082: LD_INT 133
12084: PPUSH
12085: CALL_OW 174
// end ;
12089: GO 12051
12091: POP
12092: POP
// end ;
12093: PPOPN 2
12095: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
12096: LD_EXP 14
12100: IFFALSE 12260
12102: GO 12104
12104: DISABLE
12105: LD_INT 0
12107: PPUSH
12108: PPUSH
12109: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
12110: LD_ADDR_VAR 0 2
12114: PUSH
12115: LD_INT 72
12117: PUSH
12118: LD_INT 12
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
12125: LD_ADDR_VAR 0 3
12129: PUSH
12130: LD_INT 44
12132: PUSH
12133: LD_INT 43
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 45
12142: PUSH
12143: LD_INT 44
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 45
12152: PUSH
12153: LD_INT 46
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 45
12162: PUSH
12163: LD_INT 46
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: PUSH
12176: LD_OWVAR 67
12180: ARRAY
12181: ST_TO_ADDR
// for i := 1 to 6 do
12182: LD_ADDR_VAR 0 1
12186: PUSH
12187: DOUBLE
12188: LD_INT 1
12190: DEC
12191: ST_TO_ADDR
12192: LD_INT 6
12194: PUSH
12195: FOR_TO
12196: IFFALSE 12258
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
12198: LD_VAR 0 2
12202: PPUSH
12203: LD_INT 22
12205: PUSH
12206: LD_INT 23
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PUSH
12213: LD_VAR 0 1
12217: PUSH
12218: LD_INT 2
12220: MOD
12221: PUSH
12222: LD_INT 1
12224: PLUS
12225: ARRAY
12226: PPUSH
12227: LD_INT 1
12229: PPUSH
12230: LD_INT 1
12232: PPUSH
12233: LD_VAR 0 3
12237: PUSH
12238: LD_VAR 0 1
12242: PUSH
12243: LD_INT 2
12245: MOD
12246: PUSH
12247: LD_INT 1
12249: PLUS
12250: ARRAY
12251: PPUSH
12252: CALL_OW 185
12256: GO 12195
12258: POP
12259: POP
// end ;
12260: PPOPN 3
12262: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
12263: LD_EXP 11
12267: IFFALSE 13416
12269: GO 12271
12271: DISABLE
12272: LD_INT 0
12274: PPUSH
12275: PPUSH
12276: PPUSH
12277: PPUSH
12278: PPUSH
12279: PPUSH
// begin enable ;
12280: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
12281: LD_ADDR_VAR 0 6
12285: PUSH
12286: LD_INT 10
12288: PPUSH
12289: LD_INT 81
12291: PUSH
12292: LD_INT 3
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PPUSH
12299: CALL_OW 70
12303: ST_TO_ADDR
// if ruSpecialVehicleGroup then
12304: LD_EXP 56
12308: IFFALSE 12574
// begin for i in ruSpecialVehicleGroup do
12310: LD_ADDR_VAR 0 1
12314: PUSH
12315: LD_EXP 56
12319: PUSH
12320: FOR_IN
12321: IFFALSE 12572
// begin if enemyInBase then
12323: LD_VAR 0 6
12327: IFFALSE 12570
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
12329: LD_VAR 0 1
12333: PPUSH
12334: CALL_OW 256
12338: PUSH
12339: LD_INT 500
12341: GREATER
12342: PUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: CALL_OW 110
12352: PUSH
12353: LD_INT 0
12355: EQUAL
12356: AND
12357: IFFALSE 12383
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
12359: LD_VAR 0 1
12363: PPUSH
12364: LD_VAR 0 6
12368: PPUSH
12369: LD_VAR 0 1
12373: PPUSH
12374: CALL_OW 74
12378: PPUSH
12379: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12383: LD_VAR 0 1
12387: PPUSH
12388: CALL_OW 256
12392: PUSH
12393: LD_INT 500
12395: LESSEQUAL
12396: PUSH
12397: LD_VAR 0 1
12401: PPUSH
12402: CALL_OW 110
12406: PUSH
12407: LD_INT 0
12409: EQUAL
12410: AND
12411: IFFALSE 12440
// begin SetTag ( i , 1 ) ;
12413: LD_VAR 0 1
12417: PPUSH
12418: LD_INT 1
12420: PPUSH
12421: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
12425: LD_VAR 0 1
12429: PPUSH
12430: LD_INT 83
12432: PPUSH
12433: LD_INT 134
12435: PPUSH
12436: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
12440: LD_VAR 0 1
12444: PPUSH
12445: CALL_OW 256
12449: PUSH
12450: LD_INT 1000
12452: LESS
12453: PUSH
12454: LD_VAR 0 1
12458: PPUSH
12459: CALL_OW 110
12463: PUSH
12464: LD_INT 1
12466: EQUAL
12467: AND
12468: PUSH
12469: LD_VAR 0 1
12473: PPUSH
12474: LD_INT 83
12476: PPUSH
12477: LD_INT 134
12479: PPUSH
12480: CALL_OW 297
12484: PUSH
12485: LD_INT 6
12487: LESS
12488: AND
12489: IFFALSE 12517
// begin SetFuel ( i , 100 ) ;
12491: LD_VAR 0 1
12495: PPUSH
12496: LD_INT 100
12498: PPUSH
12499: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
12503: LD_VAR 0 1
12507: PPUSH
12508: CALL_OW 310
12512: PPUSH
12513: CALL 64476 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
12517: LD_VAR 0 1
12521: PPUSH
12522: CALL_OW 256
12526: PUSH
12527: LD_INT 1000
12529: EQUAL
12530: PUSH
12531: LD_VAR 0 1
12535: PPUSH
12536: CALL_OW 110
12540: PUSH
12541: LD_INT 1
12543: EQUAL
12544: AND
12545: PUSH
12546: LD_VAR 0 1
12550: PPUSH
12551: CALL_OW 311
12555: AND
12556: IFFALSE 12570
// SetTag ( i , 0 ) ;
12558: LD_VAR 0 1
12562: PPUSH
12563: LD_INT 0
12565: PPUSH
12566: CALL_OW 109
// end ; end ;
12570: GO 12320
12572: POP
12573: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
12574: LD_ADDR_VAR 0 5
12578: PUSH
12579: LD_EXP 55
12583: PPUSH
12584: LD_INT 25
12586: PUSH
12587: LD_INT 4
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 72
12598: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12599: LD_ADDR_VAR 0 4
12603: PUSH
12604: LD_EXP 55
12608: PPUSH
12609: LD_INT 92
12611: PUSH
12612: LD_INT 92
12614: PUSH
12615: LD_INT 155
12617: PUSH
12618: LD_INT 12
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: PUSH
12627: LD_INT 3
12629: PUSH
12630: LD_INT 24
12632: PUSH
12633: LD_INT 1000
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PPUSH
12648: CALL_OW 72
12652: ST_TO_ADDR
// if sci then
12653: LD_VAR 0 5
12657: IFFALSE 12790
// begin if hurt then
12659: LD_VAR 0 4
12663: IFFALSE 12736
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12665: LD_VAR 0 5
12669: PPUSH
12670: LD_INT 3
12672: PUSH
12673: LD_INT 54
12675: PUSH
12676: EMPTY
12677: LIST
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PPUSH
12683: CALL_OW 72
12687: IFFALSE 12716
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
12689: LD_VAR 0 5
12693: PPUSH
12694: LD_INT 3
12696: PUSH
12697: LD_INT 54
12699: PUSH
12700: EMPTY
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PPUSH
12707: CALL_OW 72
12711: PPUSH
12712: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
12716: LD_VAR 0 5
12720: PPUSH
12721: LD_VAR 0 4
12725: PUSH
12726: LD_INT 1
12728: ARRAY
12729: PPUSH
12730: CALL_OW 188
// end else
12734: GO 12790
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
12736: LD_VAR 0 5
12740: PPUSH
12741: LD_INT 3
12743: PUSH
12744: LD_INT 54
12746: PUSH
12747: EMPTY
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: CALL_OW 72
12758: IFFALSE 12790
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
12760: LD_VAR 0 5
12764: PPUSH
12765: LD_INT 3
12767: PUSH
12768: LD_INT 54
12770: PUSH
12771: EMPTY
12772: LIST
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PPUSH
12778: CALL_OW 72
12782: PPUSH
12783: LD_INT 17
12785: PPUSH
12786: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12790: LD_ADDR_VAR 0 3
12794: PUSH
12795: LD_INT 10
12797: PPUSH
12798: LD_INT 21
12800: PUSH
12801: LD_INT 3
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 3
12810: PUSH
12811: LD_INT 24
12813: PUSH
12814: LD_INT 1000
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 70
12833: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
12834: LD_ADDR_VAR 0 2
12838: PUSH
12839: LD_EXP 55
12843: PPUSH
12844: LD_INT 25
12846: PUSH
12847: LD_INT 2
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PPUSH
12854: CALL_OW 72
12858: PUSH
12859: LD_INT 22
12861: PUSH
12862: LD_INT 3
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 34
12871: PUSH
12872: LD_INT 52
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PPUSH
12883: CALL_OW 69
12887: UNION
12888: ST_TO_ADDR
// if not tmp then
12889: LD_VAR 0 2
12893: NOT
12894: IFFALSE 12898
// exit ;
12896: GO 13416
// for i in tmp do
12898: LD_ADDR_VAR 0 1
12902: PUSH
12903: LD_VAR 0 2
12907: PUSH
12908: FOR_IN
12909: IFFALSE 13414
// begin if GetClass ( i ) = 2 then
12911: LD_VAR 0 1
12915: PPUSH
12916: CALL_OW 257
12920: PUSH
12921: LD_INT 2
12923: EQUAL
12924: IFFALSE 13147
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
12926: LD_VAR 0 1
12930: PPUSH
12931: CALL_OW 256
12935: PUSH
12936: LD_INT 1000
12938: EQUAL
12939: PUSH
12940: LD_VAR 0 1
12944: PPUSH
12945: CALL_OW 110
12949: PUSH
12950: LD_INT 1
12952: EQUAL
12953: AND
12954: IFFALSE 12968
// SetTag ( i , 0 ) ;
12956: LD_VAR 0 1
12960: PPUSH
12961: LD_INT 0
12963: PPUSH
12964: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
12968: LD_VAR 0 1
12972: PPUSH
12973: CALL_OW 256
12977: PUSH
12978: LD_INT 500
12980: LESSEQUAL
12981: PUSH
12982: LD_VAR 0 1
12986: PPUSH
12987: CALL_OW 110
12991: PUSH
12992: LD_INT 0
12994: EQUAL
12995: AND
12996: IFFALSE 13025
// begin SetTag ( i , 1 ) ;
12998: LD_VAR 0 1
13002: PPUSH
13003: LD_INT 1
13005: PPUSH
13006: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
13010: LD_VAR 0 1
13014: PPUSH
13015: LD_INT 92
13017: PPUSH
13018: LD_INT 155
13020: PPUSH
13021: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
13025: LD_VAR 0 3
13029: PUSH
13030: LD_VAR 0 1
13034: PPUSH
13035: CALL_OW 256
13039: PUSH
13040: LD_INT 500
13042: GREATER
13043: AND
13044: PUSH
13045: LD_VAR 0 1
13049: PPUSH
13050: CALL_OW 110
13054: PUSH
13055: LD_INT 0
13057: EQUAL
13058: AND
13059: PUSH
13060: LD_VAR 0 1
13064: PPUSH
13065: CALL_OW 314
13069: NOT
13070: AND
13071: IFFALSE 13145
// begin if b then
13073: LD_VAR 0 3
13077: IFFALSE 13109
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13079: LD_VAR 0 1
13083: PPUSH
13084: LD_VAR 0 3
13088: PUSH
13089: LD_INT 1
13091: PPUSH
13092: LD_VAR 0 3
13096: PPUSH
13097: CALL_OW 12
13101: ARRAY
13102: PPUSH
13103: CALL_OW 130
13107: GO 13145
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13109: LD_VAR 0 1
13113: PPUSH
13114: LD_INT 94
13116: PPUSH
13117: LD_INT 165
13119: PPUSH
13120: CALL_OW 297
13124: PUSH
13125: LD_INT 8
13127: GREATER
13128: IFFALSE 13145
// ComMoveXY ( i , 94 , 165 ) ;
13130: LD_VAR 0 1
13134: PPUSH
13135: LD_INT 94
13137: PPUSH
13138: LD_INT 165
13140: PPUSH
13141: CALL_OW 111
// end ; end else
13145: GO 13412
// if GetWeapon ( i ) = ru_crane then
13147: LD_VAR 0 1
13151: PPUSH
13152: CALL_OW 264
13156: PUSH
13157: LD_INT 52
13159: EQUAL
13160: IFFALSE 13412
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13162: LD_VAR 0 1
13166: PPUSH
13167: CALL_OW 256
13171: PUSH
13172: LD_INT 1000
13174: EQUAL
13175: PUSH
13176: LD_VAR 0 1
13180: PPUSH
13181: CALL_OW 110
13185: PUSH
13186: LD_INT 1
13188: EQUAL
13189: AND
13190: IFFALSE 13216
// begin SetTag ( i , 0 ) ;
13192: LD_VAR 0 1
13196: PPUSH
13197: LD_INT 0
13199: PPUSH
13200: CALL_OW 109
// SetFuel ( i , 100 ) ;
13204: LD_VAR 0 1
13208: PPUSH
13209: LD_INT 100
13211: PPUSH
13212: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13216: LD_VAR 0 1
13220: PPUSH
13221: CALL_OW 256
13225: PUSH
13226: LD_INT 500
13228: LESSEQUAL
13229: PUSH
13230: LD_VAR 0 1
13234: PPUSH
13235: CALL_OW 110
13239: PUSH
13240: LD_INT 0
13242: EQUAL
13243: AND
13244: IFFALSE 13287
// begin SetTag ( i , 1 ) ;
13246: LD_VAR 0 1
13250: PPUSH
13251: LD_INT 1
13253: PPUSH
13254: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
13258: LD_VAR 0 1
13262: PPUSH
13263: LD_INT 83
13265: PPUSH
13266: LD_INT 135
13268: PPUSH
13269: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
13273: LD_VAR 0 1
13277: PPUSH
13278: CALL_OW 310
13282: PPUSH
13283: CALL 64476 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
13287: LD_VAR 0 1
13291: PPUSH
13292: CALL_OW 256
13296: PUSH
13297: LD_INT 500
13299: GREATER
13300: PUSH
13301: LD_VAR 0 1
13305: PPUSH
13306: CALL_OW 110
13310: PUSH
13311: LD_INT 0
13313: EQUAL
13314: AND
13315: PUSH
13316: LD_VAR 0 1
13320: PPUSH
13321: CALL_OW 311
13325: AND
13326: PUSH
13327: LD_VAR 0 1
13331: PPUSH
13332: CALL_OW 314
13336: NOT
13337: AND
13338: IFFALSE 13412
// begin if b then
13340: LD_VAR 0 3
13344: IFFALSE 13376
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13346: LD_VAR 0 1
13350: PPUSH
13351: LD_VAR 0 3
13355: PUSH
13356: LD_INT 1
13358: PPUSH
13359: LD_VAR 0 3
13363: PPUSH
13364: CALL_OW 12
13368: ARRAY
13369: PPUSH
13370: CALL_OW 130
13374: GO 13412
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13376: LD_VAR 0 1
13380: PPUSH
13381: LD_INT 94
13383: PPUSH
13384: LD_INT 165
13386: PPUSH
13387: CALL_OW 297
13391: PUSH
13392: LD_INT 8
13394: GREATER
13395: IFFALSE 13412
// ComMoveXY ( i , 94 , 165 ) ;
13397: LD_VAR 0 1
13401: PPUSH
13402: LD_INT 94
13404: PPUSH
13405: LD_INT 165
13407: PPUSH
13408: CALL_OW 111
// end ; end ; end ;
13412: GO 12908
13414: POP
13415: POP
// end ;
13416: PPOPN 6
13418: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
13419: LD_EXP 23
13423: NOT
13424: PUSH
13425: LD_EXP 27
13429: NOT
13430: AND
13431: IFFALSE 14347
13433: GO 13435
13435: DISABLE
13436: LD_INT 0
13438: PPUSH
13439: PPUSH
13440: PPUSH
13441: PPUSH
// begin enable ;
13442: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
13443: LD_INT 35
13445: PUSH
13446: LD_INT 45
13448: PUSH
13449: LD_INT 55
13451: PUSH
13452: LD_INT 60
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: PUSH
13461: LD_OWVAR 67
13465: ARRAY
13466: PPUSH
13467: CALL_OW 13
13471: IFFALSE 13487
// waveStrength := waveStrength + 1 ;
13473: LD_ADDR_EXP 58
13477: PUSH
13478: LD_EXP 58
13482: PUSH
13483: LD_INT 1
13485: PLUS
13486: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 , 7 ] [ Difficulty ] then
13487: LD_EXP 58
13491: PUSH
13492: LD_INT 4
13494: PUSH
13495: LD_INT 5
13497: PUSH
13498: LD_INT 6
13500: PUSH
13501: LD_INT 7
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: PUSH
13510: LD_OWVAR 67
13514: ARRAY
13515: GREATER
13516: IFFALSE 13549
// begin waveStrength := waveStrength + Difficulty ;
13518: LD_ADDR_EXP 58
13522: PUSH
13523: LD_EXP 58
13527: PUSH
13528: LD_OWVAR 67
13532: PLUS
13533: ST_TO_ADDR
// disableAttackOnHeike := true ;
13534: LD_ADDR_EXP 27
13538: PUSH
13539: LD_INT 1
13541: ST_TO_ADDR
// wait ( 3 3$00 ) ;
13542: LD_INT 6300
13544: PPUSH
13545: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
13549: LD_EXP 27
13553: PUSH
13554: LD_OWVAR 67
13558: PUSH
13559: LD_INT 1
13561: GREATER
13562: AND
13563: IFFALSE 13772
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
13565: LD_ADDR_VAR 0 1
13569: PUSH
13570: DOUBLE
13571: LD_INT 1
13573: DEC
13574: ST_TO_ADDR
13575: LD_INT 3
13577: PUSH
13578: LD_INT 3
13580: PUSH
13581: LD_INT 4
13583: PUSH
13584: LD_INT 4
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: PUSH
13593: LD_OWVAR 67
13597: ARRAY
13598: PUSH
13599: FOR_TO
13600: IFFALSE 13770
// begin InitHc ;
13602: CALL_OW 19
// InitVc ;
13606: CALL_OW 20
// uc_side := 3 ;
13610: LD_ADDR_OWVAR 20
13614: PUSH
13615: LD_INT 3
13617: ST_TO_ADDR
// uc_nation := 3 ;
13618: LD_ADDR_OWVAR 21
13622: PUSH
13623: LD_INT 3
13625: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
13626: LD_INT 0
13628: PPUSH
13629: LD_INT 1
13631: PPUSH
13632: LD_OWVAR 67
13636: PUSH
13637: LD_INT 2
13639: PLUS
13640: PPUSH
13641: CALL_OW 380
// un := CreateHuman ;
13645: LD_ADDR_VAR 0 2
13649: PUSH
13650: CALL_OW 44
13654: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
13655: LD_VAR 0 2
13659: PPUSH
13660: LD_INT 160
13662: PPUSH
13663: LD_INT 3
13665: PPUSH
13666: LD_INT 2
13668: PPUSH
13669: LD_INT 0
13671: PPUSH
13672: CALL 64796 0 5
// SetClass ( un , class_bazooker ) ;
13676: LD_VAR 0 2
13680: PPUSH
13681: LD_INT 9
13683: PPUSH
13684: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13688: LD_ADDR_EXP 57
13692: PUSH
13693: LD_EXP 57
13697: PPUSH
13698: LD_EXP 57
13702: PUSH
13703: LD_INT 1
13705: PLUS
13706: PPUSH
13707: LD_VAR 0 2
13711: PPUSH
13712: CALL_OW 1
13716: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
13717: LD_VAR 0 2
13721: PPUSH
13722: LD_INT 177
13724: PPUSH
13725: LD_INT 17
13727: PPUSH
13728: CALL_OW 111
// wait ( 0 0$2 ) ;
13732: LD_INT 70
13734: PPUSH
13735: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13739: LD_ADDR_VAR 0 4
13743: PUSH
13744: LD_VAR 0 4
13748: PPUSH
13749: LD_VAR 0 4
13753: PUSH
13754: LD_INT 1
13756: PLUS
13757: PPUSH
13758: LD_VAR 0 2
13762: PPUSH
13763: CALL_OW 1
13767: ST_TO_ADDR
// end ;
13768: GO 13599
13770: POP
13771: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
13772: LD_ADDR_VAR 0 1
13776: PUSH
13777: DOUBLE
13778: LD_INT 1
13780: DEC
13781: ST_TO_ADDR
13782: LD_INT 2
13784: PUSH
13785: LD_INT 3
13787: PUSH
13788: LD_INT 4
13790: PUSH
13791: LD_INT 5
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: PUSH
13800: LD_OWVAR 67
13804: ARRAY
13805: PUSH
13806: LD_EXP 58
13810: PLUS
13811: PUSH
13812: FOR_TO
13813: IFFALSE 14122
// begin InitHc ;
13815: CALL_OW 19
// InitVc ;
13819: CALL_OW 20
// uc_side := 3 ;
13823: LD_ADDR_OWVAR 20
13827: PUSH
13828: LD_INT 3
13830: ST_TO_ADDR
// uc_nation := 3 ;
13831: LD_ADDR_OWVAR 21
13835: PUSH
13836: LD_INT 3
13838: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13839: LD_INT 22
13841: PUSH
13842: LD_INT 23
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 1
13851: PPUSH
13852: LD_INT 2
13854: PPUSH
13855: CALL_OW 12
13859: ARRAY
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: LD_INT 1
13866: PPUSH
13867: LD_INT 44
13869: PUSH
13870: LD_INT 45
13872: PUSH
13873: LD_INT 43
13875: PUSH
13876: LD_INT 42
13878: PUSH
13879: LD_INT 44
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: LD_INT 1
13891: PPUSH
13892: LD_INT 5
13894: PPUSH
13895: CALL_OW 12
13899: ARRAY
13900: PPUSH
13901: LD_INT 99
13903: PPUSH
13904: CALL 30222 0 5
// veh := CreateVehicle ;
13908: LD_ADDR_VAR 0 3
13912: PUSH
13913: CALL_OW 45
13917: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
13918: LD_VAR 0 3
13922: PPUSH
13923: LD_INT 160
13925: PPUSH
13926: LD_INT 3
13928: PPUSH
13929: LD_INT 2
13931: PPUSH
13932: LD_INT 0
13934: PPUSH
13935: CALL 64796 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
13939: LD_ADDR_EXP 57
13943: PUSH
13944: LD_EXP 57
13948: PPUSH
13949: LD_EXP 57
13953: PUSH
13954: LD_INT 1
13956: PLUS
13957: PPUSH
13958: LD_VAR 0 3
13962: PPUSH
13963: CALL_OW 1
13967: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
13968: LD_INT 0
13970: PPUSH
13971: LD_INT 3
13973: PPUSH
13974: LD_OWVAR 67
13978: PUSH
13979: LD_INT 2
13981: PLUS
13982: PPUSH
13983: CALL_OW 380
// un := CreateHuman ;
13987: LD_ADDR_VAR 0 2
13991: PUSH
13992: CALL_OW 44
13996: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13997: LD_VAR 0 2
14001: PPUSH
14002: LD_VAR 0 3
14006: PPUSH
14007: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14011: LD_ADDR_EXP 57
14015: PUSH
14016: LD_EXP 57
14020: PPUSH
14021: LD_EXP 57
14025: PUSH
14026: LD_INT 1
14028: PLUS
14029: PPUSH
14030: LD_VAR 0 2
14034: PPUSH
14035: CALL_OW 1
14039: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
14040: LD_VAR 0 2
14044: PPUSH
14045: LD_INT 177
14047: PPUSH
14048: LD_INT 17
14050: PPUSH
14051: CALL_OW 111
// wait ( 0 0$2 ) ;
14055: LD_INT 70
14057: PPUSH
14058: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14062: LD_ADDR_VAR 0 4
14066: PUSH
14067: LD_VAR 0 4
14071: PPUSH
14072: LD_VAR 0 4
14076: PUSH
14077: LD_INT 1
14079: PLUS
14080: PPUSH
14081: LD_VAR 0 3
14085: PPUSH
14086: CALL_OW 1
14090: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14091: LD_ADDR_VAR 0 4
14095: PUSH
14096: LD_VAR 0 4
14100: PPUSH
14101: LD_VAR 0 4
14105: PUSH
14106: LD_INT 1
14108: PLUS
14109: PPUSH
14110: LD_VAR 0 2
14114: PPUSH
14115: CALL_OW 1
14119: ST_TO_ADDR
// end ;
14120: GO 13812
14122: POP
14123: POP
// for i in tmp do
14124: LD_ADDR_VAR 0 1
14128: PUSH
14129: LD_VAR 0 4
14133: PUSH
14134: FOR_IN
14135: IFFALSE 14225
// begin if Prob ( 50 ) then
14137: LD_INT 50
14139: PPUSH
14140: CALL_OW 13
14144: IFFALSE 14163
// ComAgressiveMove ( i , 206 , 73 ) else
14146: LD_VAR 0 1
14150: PPUSH
14151: LD_INT 206
14153: PPUSH
14154: LD_INT 73
14156: PPUSH
14157: CALL_OW 114
14161: GO 14223
// begin ComAgressiveMove ( i , 206 , 73 ) ;
14163: LD_VAR 0 1
14167: PPUSH
14168: LD_INT 206
14170: PPUSH
14171: LD_INT 73
14173: PPUSH
14174: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
14178: LD_VAR 0 1
14182: PPUSH
14183: LD_INT 257
14185: PPUSH
14186: LD_INT 105
14188: PPUSH
14189: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
14193: LD_VAR 0 1
14197: PPUSH
14198: LD_INT 227
14200: PPUSH
14201: LD_INT 97
14203: PPUSH
14204: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
14208: LD_VAR 0 1
14212: PPUSH
14213: LD_INT 206
14215: PPUSH
14216: LD_INT 73
14218: PPUSH
14219: CALL_OW 174
// end ; end ;
14223: GO 14134
14225: POP
14226: POP
// repeat wait ( 0 0$1 ) ;
14227: LD_INT 35
14229: PPUSH
14230: CALL_OW 67
// for i in tmp do
14234: LD_ADDR_VAR 0 1
14238: PUSH
14239: LD_VAR 0 4
14243: PUSH
14244: FOR_IN
14245: IFFALSE 14324
// if IsDead ( i ) then
14247: LD_VAR 0 1
14251: PPUSH
14252: CALL_OW 301
14256: IFFALSE 14276
// tmp := tmp diff i else
14258: LD_ADDR_VAR 0 4
14262: PUSH
14263: LD_VAR 0 4
14267: PUSH
14268: LD_VAR 0 1
14272: DIFF
14273: ST_TO_ADDR
14274: GO 14322
// if not HasTask ( i ) then
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 314
14285: NOT
14286: IFFALSE 14322
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14288: LD_VAR 0 1
14292: PPUSH
14293: LD_INT 81
14295: PUSH
14296: LD_INT 3
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PPUSH
14303: CALL_OW 69
14307: PPUSH
14308: LD_VAR 0 1
14312: PPUSH
14313: CALL_OW 74
14317: PPUSH
14318: CALL_OW 115
14322: GO 14244
14324: POP
14325: POP
// until not tmp ;
14326: LD_VAR 0 4
14330: NOT
14331: IFFALSE 14227
// if firstAttack then
14333: LD_EXP 28
14337: IFFALSE 14347
// firstAttack := false ;
14339: LD_ADDR_EXP 28
14343: PUSH
14344: LD_INT 0
14346: ST_TO_ADDR
// end ;
14347: PPOPN 4
14349: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
14350: LD_EXP 23
14354: NOT
14355: PUSH
14356: LD_EXP 3
14360: AND
14361: PUSH
14362: LD_EXP 16
14366: NOT
14367: AND
14368: IFFALSE 15208
14370: GO 14372
14372: DISABLE
14373: LD_INT 0
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
// begin enable ;
14379: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
14380: LD_ADDR_VAR 0 1
14384: PUSH
14385: DOUBLE
14386: LD_INT 1
14388: DEC
14389: ST_TO_ADDR
14390: LD_INT 1
14392: PUSH
14393: LD_INT 2
14395: PUSH
14396: LD_INT 2
14398: PUSH
14399: LD_INT 3
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: PUSH
14408: LD_OWVAR 67
14412: ARRAY
14413: PUSH
14414: FOR_TO
14415: IFFALSE 14716
// begin InitHc ;
14417: CALL_OW 19
// InitVc ;
14421: CALL_OW 20
// uc_side := 3 ;
14425: LD_ADDR_OWVAR 20
14429: PUSH
14430: LD_INT 3
14432: ST_TO_ADDR
// uc_nation := 3 ;
14433: LD_ADDR_OWVAR 21
14437: PUSH
14438: LD_INT 3
14440: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
14441: LD_INT 22
14443: PUSH
14444: LD_INT 23
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 1
14453: PPUSH
14454: LD_INT 2
14456: PPUSH
14457: CALL_OW 12
14461: ARRAY
14462: PPUSH
14463: LD_INT 1
14465: PPUSH
14466: LD_INT 1
14468: PPUSH
14469: LD_INT 44
14471: PUSH
14472: LD_INT 43
14474: PUSH
14475: LD_INT 42
14477: PUSH
14478: LD_INT 44
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 1
14489: PPUSH
14490: LD_INT 4
14492: PPUSH
14493: CALL_OW 12
14497: ARRAY
14498: PPUSH
14499: LD_INT 99
14501: PPUSH
14502: CALL 30222 0 5
// veh := CreateVehicle ;
14506: LD_ADDR_VAR 0 3
14510: PUSH
14511: CALL_OW 45
14515: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
14516: LD_VAR 0 3
14520: PPUSH
14521: LD_INT 5
14523: PPUSH
14524: LD_INT 3
14526: PPUSH
14527: LD_INT 2
14529: PPUSH
14530: LD_INT 0
14532: PPUSH
14533: CALL 64796 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14537: LD_ADDR_EXP 57
14541: PUSH
14542: LD_EXP 57
14546: PPUSH
14547: LD_EXP 57
14551: PUSH
14552: LD_INT 1
14554: PLUS
14555: PPUSH
14556: LD_VAR 0 3
14560: PPUSH
14561: CALL_OW 1
14565: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
14566: LD_INT 0
14568: PPUSH
14569: LD_INT 3
14571: PPUSH
14572: LD_OWVAR 67
14576: PPUSH
14577: CALL_OW 380
// un := CreateHuman ;
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: CALL_OW 44
14590: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14591: LD_VAR 0 2
14595: PPUSH
14596: LD_VAR 0 3
14600: PPUSH
14601: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14605: LD_ADDR_EXP 57
14609: PUSH
14610: LD_EXP 57
14614: PPUSH
14615: LD_EXP 57
14619: PUSH
14620: LD_INT 1
14622: PLUS
14623: PPUSH
14624: LD_VAR 0 2
14628: PPUSH
14629: CALL_OW 1
14633: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
14634: LD_VAR 0 2
14638: PPUSH
14639: LD_INT 23
14641: PPUSH
14642: LD_INT 7
14644: PPUSH
14645: CALL_OW 111
// wait ( 0 0$2 ) ;
14649: LD_INT 70
14651: PPUSH
14652: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14656: LD_ADDR_VAR 0 4
14660: PUSH
14661: LD_VAR 0 4
14665: PPUSH
14666: LD_VAR 0 4
14670: PUSH
14671: LD_INT 1
14673: PLUS
14674: PPUSH
14675: LD_VAR 0 3
14679: PPUSH
14680: CALL_OW 1
14684: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14685: LD_ADDR_VAR 0 4
14689: PUSH
14690: LD_VAR 0 4
14694: PPUSH
14695: LD_VAR 0 4
14699: PUSH
14700: LD_INT 1
14702: PLUS
14703: PPUSH
14704: LD_VAR 0 2
14708: PPUSH
14709: CALL_OW 1
14713: ST_TO_ADDR
// end ;
14714: GO 14414
14716: POP
14717: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
14718: LD_ADDR_VAR 0 1
14722: PUSH
14723: DOUBLE
14724: LD_INT 1
14726: DEC
14727: ST_TO_ADDR
14728: LD_INT 3
14730: PUSH
14731: LD_INT 4
14733: PUSH
14734: LD_INT 4
14736: PUSH
14737: LD_INT 5
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: PUSH
14746: LD_OWVAR 67
14750: ARRAY
14751: PUSH
14752: LD_EXP 58
14756: PLUS
14757: PUSH
14758: FOR_TO
14759: IFFALSE 15068
// begin InitHc ;
14761: CALL_OW 19
// InitVc ;
14765: CALL_OW 20
// uc_side := 3 ;
14769: LD_ADDR_OWVAR 20
14773: PUSH
14774: LD_INT 3
14776: ST_TO_ADDR
// uc_nation := 3 ;
14777: LD_ADDR_OWVAR 21
14781: PUSH
14782: LD_INT 3
14784: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14785: LD_INT 22
14787: PUSH
14788: LD_INT 23
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 1
14797: PPUSH
14798: LD_INT 2
14800: PPUSH
14801: CALL_OW 12
14805: ARRAY
14806: PPUSH
14807: LD_INT 1
14809: PPUSH
14810: LD_INT 1
14812: PPUSH
14813: LD_INT 44
14815: PUSH
14816: LD_INT 45
14818: PUSH
14819: LD_INT 43
14821: PUSH
14822: LD_INT 42
14824: PUSH
14825: LD_INT 44
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 1
14837: PPUSH
14838: LD_INT 5
14840: PPUSH
14841: CALL_OW 12
14845: ARRAY
14846: PPUSH
14847: LD_INT 99
14849: PPUSH
14850: CALL 30222 0 5
// veh := CreateVehicle ;
14854: LD_ADDR_VAR 0 3
14858: PUSH
14859: CALL_OW 45
14863: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
14864: LD_VAR 0 3
14868: PPUSH
14869: LD_INT 127
14871: PPUSH
14872: LD_INT 243
14874: PPUSH
14875: LD_INT 0
14877: PPUSH
14878: LD_INT 0
14880: PPUSH
14881: CALL 64796 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14885: LD_ADDR_EXP 57
14889: PUSH
14890: LD_EXP 57
14894: PPUSH
14895: LD_EXP 57
14899: PUSH
14900: LD_INT 1
14902: PLUS
14903: PPUSH
14904: LD_VAR 0 3
14908: PPUSH
14909: CALL_OW 1
14913: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14914: LD_INT 0
14916: PPUSH
14917: LD_INT 3
14919: PPUSH
14920: LD_OWVAR 67
14924: PUSH
14925: LD_INT 2
14927: PLUS
14928: PPUSH
14929: CALL_OW 380
// un := CreateHuman ;
14933: LD_ADDR_VAR 0 2
14937: PUSH
14938: CALL_OW 44
14942: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14943: LD_VAR 0 2
14947: PPUSH
14948: LD_VAR 0 3
14952: PPUSH
14953: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14957: LD_ADDR_EXP 57
14961: PUSH
14962: LD_EXP 57
14966: PPUSH
14967: LD_EXP 57
14971: PUSH
14972: LD_INT 1
14974: PLUS
14975: PPUSH
14976: LD_VAR 0 2
14980: PPUSH
14981: CALL_OW 1
14985: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
14986: LD_VAR 0 2
14990: PPUSH
14991: LD_INT 130
14993: PPUSH
14994: LD_INT 233
14996: PPUSH
14997: CALL_OW 111
// wait ( 0 0$2 ) ;
15001: LD_INT 70
15003: PPUSH
15004: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15008: LD_ADDR_VAR 0 4
15012: PUSH
15013: LD_VAR 0 4
15017: PPUSH
15018: LD_VAR 0 4
15022: PUSH
15023: LD_INT 1
15025: PLUS
15026: PPUSH
15027: LD_VAR 0 3
15031: PPUSH
15032: CALL_OW 1
15036: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15037: LD_ADDR_VAR 0 4
15041: PUSH
15042: LD_VAR 0 4
15046: PPUSH
15047: LD_VAR 0 4
15051: PUSH
15052: LD_INT 1
15054: PLUS
15055: PPUSH
15056: LD_VAR 0 2
15060: PPUSH
15061: CALL_OW 1
15065: ST_TO_ADDR
// end ;
15066: GO 14758
15068: POP
15069: POP
// for i in tmp do
15070: LD_ADDR_VAR 0 1
15074: PUSH
15075: LD_VAR 0 4
15079: PUSH
15080: FOR_IN
15081: IFFALSE 15100
// ComAgressiveMove ( i , 76 , 49 ) ;
15083: LD_VAR 0 1
15087: PPUSH
15088: LD_INT 76
15090: PPUSH
15091: LD_INT 49
15093: PPUSH
15094: CALL_OW 114
15098: GO 15080
15100: POP
15101: POP
// repeat wait ( 0 0$1 ) ;
15102: LD_INT 35
15104: PPUSH
15105: CALL_OW 67
// for i in tmp do
15109: LD_ADDR_VAR 0 1
15113: PUSH
15114: LD_VAR 0 4
15118: PUSH
15119: FOR_IN
15120: IFFALSE 15199
// if IsDead ( i ) then
15122: LD_VAR 0 1
15126: PPUSH
15127: CALL_OW 301
15131: IFFALSE 15151
// tmp := tmp diff i else
15133: LD_ADDR_VAR 0 4
15137: PUSH
15138: LD_VAR 0 4
15142: PUSH
15143: LD_VAR 0 1
15147: DIFF
15148: ST_TO_ADDR
15149: GO 15197
// if not HasTask ( i ) then
15151: LD_VAR 0 1
15155: PPUSH
15156: CALL_OW 314
15160: NOT
15161: IFFALSE 15197
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_INT 81
15170: PUSH
15171: LD_INT 3
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PPUSH
15178: CALL_OW 69
15182: PPUSH
15183: LD_VAR 0 1
15187: PPUSH
15188: CALL_OW 74
15192: PPUSH
15193: CALL_OW 115
15197: GO 15119
15199: POP
15200: POP
// until not tmp ;
15201: LD_VAR 0 4
15205: NOT
15206: IFFALSE 15102
// end ;
15208: PPOPN 4
15210: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
15211: LD_EXP 6
15215: IFFALSE 15686
15217: GO 15219
15219: DISABLE
15220: LD_INT 0
15222: PPUSH
15223: PPUSH
15224: PPUSH
15225: PPUSH
// begin wait ( 3 3$00 ) ;
15226: LD_INT 6300
15228: PPUSH
15229: CALL_OW 67
// for i := 1 to 3 do
15233: LD_ADDR_VAR 0 1
15237: PUSH
15238: DOUBLE
15239: LD_INT 1
15241: DEC
15242: ST_TO_ADDR
15243: LD_INT 3
15245: PUSH
15246: FOR_TO
15247: IFFALSE 15546
// begin InitHc ;
15249: CALL_OW 19
// InitVc ;
15253: CALL_OW 20
// uc_side := 3 ;
15257: LD_ADDR_OWVAR 20
15261: PUSH
15262: LD_INT 3
15264: ST_TO_ADDR
// uc_nation := 3 ;
15265: LD_ADDR_OWVAR 21
15269: PUSH
15270: LD_INT 3
15272: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
15273: LD_INT 22
15275: PUSH
15276: LD_INT 23
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 1
15285: PPUSH
15286: LD_INT 2
15288: PPUSH
15289: CALL_OW 12
15293: ARRAY
15294: PPUSH
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 1
15300: PPUSH
15301: LD_INT 44
15303: PUSH
15304: LD_INT 43
15306: PUSH
15307: LD_INT 42
15309: PUSH
15310: LD_INT 44
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 1
15321: PPUSH
15322: LD_INT 4
15324: PPUSH
15325: CALL_OW 12
15329: ARRAY
15330: PPUSH
15331: LD_INT 99
15333: PPUSH
15334: CALL 30222 0 5
// veh := CreateVehicle ;
15338: LD_ADDR_VAR 0 3
15342: PUSH
15343: CALL_OW 45
15347: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
15348: LD_VAR 0 3
15352: PPUSH
15353: LD_INT 293
15355: PPUSH
15356: LD_INT 246
15358: PPUSH
15359: LD_INT 5
15361: PPUSH
15362: LD_INT 0
15364: PPUSH
15365: CALL 64796 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
15369: LD_ADDR_EXP 57
15373: PUSH
15374: LD_EXP 57
15378: PPUSH
15379: LD_EXP 57
15383: PUSH
15384: LD_INT 1
15386: PLUS
15387: PPUSH
15388: LD_VAR 0 3
15392: PPUSH
15393: CALL_OW 1
15397: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
15398: LD_INT 0
15400: PPUSH
15401: LD_INT 3
15403: PPUSH
15404: LD_INT 3
15406: PPUSH
15407: CALL_OW 380
// un := CreateHuman ;
15411: LD_ADDR_VAR 0 2
15415: PUSH
15416: CALL_OW 44
15420: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15421: LD_VAR 0 2
15425: PPUSH
15426: LD_VAR 0 3
15430: PPUSH
15431: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15435: LD_ADDR_EXP 57
15439: PUSH
15440: LD_EXP 57
15444: PPUSH
15445: LD_EXP 57
15449: PUSH
15450: LD_INT 1
15452: PLUS
15453: PPUSH
15454: LD_VAR 0 2
15458: PPUSH
15459: CALL_OW 1
15463: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
15464: LD_VAR 0 2
15468: PPUSH
15469: LD_INT 273
15471: PPUSH
15472: LD_INT 227
15474: PPUSH
15475: CALL_OW 111
// wait ( 0 0$2 ) ;
15479: LD_INT 70
15481: PPUSH
15482: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15486: LD_ADDR_VAR 0 4
15490: PUSH
15491: LD_VAR 0 4
15495: PPUSH
15496: LD_VAR 0 4
15500: PUSH
15501: LD_INT 1
15503: PLUS
15504: PPUSH
15505: LD_VAR 0 3
15509: PPUSH
15510: CALL_OW 1
15514: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15515: LD_ADDR_VAR 0 4
15519: PUSH
15520: LD_VAR 0 4
15524: PPUSH
15525: LD_VAR 0 4
15529: PUSH
15530: LD_INT 1
15532: PLUS
15533: PPUSH
15534: LD_VAR 0 2
15538: PPUSH
15539: CALL_OW 1
15543: ST_TO_ADDR
// end ;
15544: GO 15246
15546: POP
15547: POP
// for i in tmp do
15548: LD_ADDR_VAR 0 1
15552: PUSH
15553: LD_VAR 0 4
15557: PUSH
15558: FOR_IN
15559: IFFALSE 15578
// ComAgressiveMove ( i , 330 , 231 ) ;
15561: LD_VAR 0 1
15565: PPUSH
15566: LD_INT 330
15568: PPUSH
15569: LD_INT 231
15571: PPUSH
15572: CALL_OW 114
15576: GO 15558
15578: POP
15579: POP
// repeat wait ( 0 0$1 ) ;
15580: LD_INT 35
15582: PPUSH
15583: CALL_OW 67
// for i in tmp do
15587: LD_ADDR_VAR 0 1
15591: PUSH
15592: LD_VAR 0 4
15596: PUSH
15597: FOR_IN
15598: IFFALSE 15677
// if IsDead ( i ) then
15600: LD_VAR 0 1
15604: PPUSH
15605: CALL_OW 301
15609: IFFALSE 15629
// tmp := tmp diff i else
15611: LD_ADDR_VAR 0 4
15615: PUSH
15616: LD_VAR 0 4
15620: PUSH
15621: LD_VAR 0 1
15625: DIFF
15626: ST_TO_ADDR
15627: GO 15675
// if not HasTask ( i ) then
15629: LD_VAR 0 1
15633: PPUSH
15634: CALL_OW 314
15638: NOT
15639: IFFALSE 15675
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_INT 81
15648: PUSH
15649: LD_INT 3
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PPUSH
15656: CALL_OW 69
15660: PPUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL_OW 74
15670: PPUSH
15671: CALL_OW 115
15675: GO 15597
15677: POP
15678: POP
// until not tmp ;
15679: LD_VAR 0 4
15683: NOT
15684: IFFALSE 15580
// end ;
15686: PPOPN 4
15688: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
15689: LD_INT 3
15691: PUSH
15692: LD_INT 22
15694: PUSH
15695: LD_INT 2
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 32
15708: PUSH
15709: LD_INT 1
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PPUSH
15720: CALL_OW 69
15724: IFFALSE 15808
15726: GO 15728
15728: DISABLE
15729: LD_INT 0
15731: PPUSH
// begin enable ;
15732: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
15733: LD_ADDR_VAR 0 1
15737: PUSH
15738: LD_INT 3
15740: PUSH
15741: LD_INT 22
15743: PUSH
15744: LD_INT 2
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 32
15757: PUSH
15758: LD_INT 1
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PPUSH
15769: CALL_OW 69
15773: PUSH
15774: FOR_IN
15775: IFFALSE 15806
// if GetFuel ( i ) < 3 then
15777: LD_VAR 0 1
15781: PPUSH
15782: CALL_OW 261
15786: PUSH
15787: LD_INT 3
15789: LESS
15790: IFFALSE 15804
// SetFuel ( i , 3 ) ;
15792: LD_VAR 0 1
15796: PPUSH
15797: LD_INT 3
15799: PPUSH
15800: CALL_OW 240
15804: GO 15774
15806: POP
15807: POP
// end ; end_of_file
15808: PPOPN 1
15810: END
// export function Action ; begin
15811: LD_INT 0
15813: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
15814: LD_INT 2
15816: PPUSH
15817: LD_INT 4
15819: PPUSH
15820: CALL_OW 332
// Video ( true ) ;
15824: LD_INT 1
15826: PPUSH
15827: CALL 62628 0 1
// music_nat := 3 ;
15831: LD_ADDR_OWVAR 71
15835: PUSH
15836: LD_INT 3
15838: ST_TO_ADDR
// music_class := music_recon ;
15839: LD_ADDR_OWVAR 72
15843: PUSH
15844: LD_INT 3
15846: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
15847: LD_INT 213
15849: PPUSH
15850: LD_INT 89
15852: PPUSH
15853: CALL_OW 86
// if not debug then
15857: LD_EXP 1
15861: NOT
15862: IFFALSE 15896
// begin if Kaia and Olaf then
15864: LD_EXP 35
15868: PUSH
15869: LD_EXP 39
15873: AND
15874: IFFALSE 15880
// SceneKaiaWithOlaf ;
15876: CALL 15935 0 0
// if Givi and Kamil then
15880: LD_EXP 31
15884: PUSH
15885: LD_EXP 34
15889: AND
15890: IFFALSE 15896
// SceneWithGiviAndKamil ;
15892: CALL 16506 0 0
// end ; Video ( false ) ;
15896: LD_INT 0
15898: PPUSH
15899: CALL 62628 0 1
// ChangeMissionObjectives ( M1 ) ;
15903: LD_STRING M1
15905: PPUSH
15906: CALL_OW 337
// music_nat := music_auto ;
15910: LD_ADDR_OWVAR 71
15914: PUSH
15915: LD_INT 0
15917: ST_TO_ADDR
// music_class := music_auto ;
15918: LD_ADDR_OWVAR 72
15922: PUSH
15923: LD_INT 0
15925: ST_TO_ADDR
// SaveForQuickRestart ;
15926: CALL_OW 22
// end ;
15930: LD_VAR 0 1
15934: RET
// export function SceneKaiaWithOlaf ; begin
15935: LD_INT 0
15937: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
15938: LD_INT 22
15940: PUSH
15941: LD_INT 2
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 30
15950: PUSH
15951: LD_INT 3
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PPUSH
15962: CALL_OW 69
15966: PPUSH
15967: LD_INT 14
15969: PPUSH
15970: LD_INT 1
15972: PPUSH
15973: LD_INT 1
15975: PPUSH
15976: LD_INT 26
15978: PPUSH
15979: CALL_OW 125
// wait ( 0 0$1 ) ;
15983: LD_INT 35
15985: PPUSH
15986: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
15990: LD_EXP 35
15994: PPUSH
15995: LD_STRING DK-Mem-1
15997: PPUSH
15998: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
16002: LD_EXP 35
16006: PPUSH
16007: LD_STRING DK-Mem-2
16009: PPUSH
16010: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
16014: LD_EXP 39
16018: PPUSH
16019: LD_STRING DO-Mem-3
16021: PPUSH
16022: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
16026: LD_EXP 35
16030: PPUSH
16031: LD_STRING DK-Mem-4
16033: PPUSH
16034: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
16038: LD_EXP 39
16042: PPUSH
16043: LD_STRING DO-Mem-5
16045: PPUSH
16046: CALL_OW 88
// wait ( 0 0$2 ) ;
16050: LD_INT 70
16052: PPUSH
16053: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
16057: LD_INT 22
16059: PUSH
16060: LD_INT 2
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 30
16069: PUSH
16070: LD_INT 3
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PPUSH
16081: CALL_OW 69
16085: PPUSH
16086: LD_INT 90
16088: PPUSH
16089: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
16093: LD_EXP 39
16097: PPUSH
16098: LD_STRING DO-Mem-6
16100: PPUSH
16101: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
16105: LD_EXP 35
16109: PPUSH
16110: LD_STRING DK-Mem-7
16112: PPUSH
16113: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
16117: LD_EXP 30
16121: PPUSH
16122: LD_EXP 35
16126: PPUSH
16127: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
16131: LD_EXP 30
16135: PPUSH
16136: LD_STRING DH-Mem-8
16138: PPUSH
16139: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
16143: LD_EXP 35
16147: PUSH
16148: LD_EXP 39
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PPUSH
16157: LD_EXP 30
16161: PPUSH
16162: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
16166: LD_EXP 39
16170: PPUSH
16171: LD_STRING DO-Mem-9
16173: PPUSH
16174: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
16178: LD_EXP 39
16182: PPUSH
16183: LD_STRING DO-Mem-10
16185: PPUSH
16186: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
16190: LD_EXP 39
16194: PPUSH
16195: LD_STRING DO-Mem-11
16197: PPUSH
16198: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
16202: LD_EXP 39
16206: PPUSH
16207: LD_STRING DO-Mem-12
16209: PPUSH
16210: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
16214: LD_EXP 35
16218: PPUSH
16219: LD_STRING DK-Mem-13
16221: PPUSH
16222: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
16226: LD_EXP 35
16230: PPUSH
16231: LD_STRING DK-Mem-14
16233: PPUSH
16234: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
16238: LD_EXP 35
16242: PPUSH
16243: LD_STRING DK-Mem-15
16245: PPUSH
16246: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
16250: LD_EXP 35
16254: PPUSH
16255: LD_STRING DK-Mem-16
16257: PPUSH
16258: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
16262: LD_EXP 35
16266: PPUSH
16267: LD_STRING DK-Mem-17
16269: PPUSH
16270: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
16274: LD_EXP 39
16278: PPUSH
16279: LD_EXP 35
16283: PPUSH
16284: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
16288: LD_EXP 39
16292: PPUSH
16293: LD_STRING DO-Mem-18
16295: PPUSH
16296: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
16300: LD_EXP 35
16304: PPUSH
16305: LD_EXP 39
16309: PPUSH
16310: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
16314: LD_EXP 35
16318: PPUSH
16319: LD_STRING DK-Mem-19
16321: PPUSH
16322: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
16326: LD_EXP 39
16330: PPUSH
16331: LD_INT 214
16333: PPUSH
16334: LD_INT 86
16336: PPUSH
16337: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16341: LD_EXP 39
16345: PPUSH
16346: LD_EXP 35
16350: PPUSH
16351: CALL_OW 179
// if Givi then
16355: LD_EXP 31
16359: IFFALSE 16390
// begin ComMoveXY ( Givi , 217 , 86 ) ;
16361: LD_EXP 31
16365: PPUSH
16366: LD_INT 217
16368: PPUSH
16369: LD_INT 86
16371: PPUSH
16372: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
16376: LD_EXP 31
16380: PPUSH
16381: LD_EXP 30
16385: PPUSH
16386: CALL_OW 179
// end ; if Kamil then
16390: LD_EXP 34
16394: IFFALSE 16434
// begin ComExit ( Kamil ) ;
16396: LD_EXP 34
16400: PPUSH
16401: CALL 63054 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
16405: LD_EXP 34
16409: PPUSH
16410: LD_INT 212
16412: PPUSH
16413: LD_INT 86
16415: PPUSH
16416: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
16420: LD_EXP 34
16424: PPUSH
16425: LD_EXP 30
16429: PPUSH
16430: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
16434: LD_INT 70
16436: PPUSH
16437: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
16441: LD_EXP 30
16445: PPUSH
16446: LD_STRING DH-Mem-20
16448: PPUSH
16449: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
16453: LD_EXP 39
16457: PPUSH
16458: LD_INT 215
16460: PPUSH
16461: LD_INT 87
16463: PPUSH
16464: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16468: LD_EXP 39
16472: PPUSH
16473: LD_EXP 35
16477: PPUSH
16478: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
16482: LD_EXP 35
16486: PPUSH
16487: LD_STRING DK-Mem-21
16489: PPUSH
16490: CALL_OW 88
// wait ( 0 0$2 ) ;
16494: LD_INT 70
16496: PPUSH
16497: CALL_OW 67
// end ;
16501: LD_VAR 0 1
16505: RET
// export function SceneWithGiviAndKamil ; begin
16506: LD_INT 0
16508: PPUSH
// if Markov then
16509: LD_EXP 37
16513: IFFALSE 16564
// begin if IsInUnit ( Markov ) then
16515: LD_EXP 37
16519: PPUSH
16520: CALL_OW 310
16524: IFFALSE 16535
// ComExit ( Markov ) ;
16526: LD_EXP 37
16530: PPUSH
16531: CALL 63054 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
16535: LD_EXP 37
16539: PPUSH
16540: LD_INT 212
16542: PPUSH
16543: LD_INT 88
16545: PPUSH
16546: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
16550: LD_EXP 37
16554: PPUSH
16555: LD_EXP 30
16559: PPUSH
16560: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
16564: LD_EXP 31
16568: PPUSH
16569: LD_STRING DG-Obj-1
16571: PPUSH
16572: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
16576: LD_EXP 34
16580: PPUSH
16581: LD_STRING DKam-Obj-2
16583: PPUSH
16584: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
16588: LD_EXP 30
16592: PPUSH
16593: LD_EXP 34
16597: PPUSH
16598: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
16602: LD_EXP 34
16606: PPUSH
16607: LD_STRING DKam-Obj-3
16609: PPUSH
16610: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
16614: LD_EXP 37
16618: PPUSH
16619: LD_STRING DMar-Obj-4
16621: PPUSH
16622: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
16626: LD_EXP 34
16630: PPUSH
16631: LD_STRING DKam-Obj-6
16633: PPUSH
16634: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
16638: LD_EXP 34
16642: PPUSH
16643: LD_STRING DKam-Obj-7
16645: PPUSH
16646: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
16650: LD_EXP 34
16654: PPUSH
16655: LD_STRING DKam-Obj-8
16657: PPUSH
16658: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
16662: LD_EXP 30
16666: PPUSH
16667: LD_STRING DH-Obj-9
16669: PPUSH
16670: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
16674: LD_EXP 34
16678: PPUSH
16679: LD_STRING DKam-Obj-10
16681: PPUSH
16682: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
16686: LD_EXP 34
16690: PPUSH
16691: LD_STRING DKam-Obj-11
16693: PPUSH
16694: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
16698: LD_EXP 37
16702: PPUSH
16703: LD_STRING DMar-Obj-12
16705: PPUSH
16706: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
16710: LD_EXP 37
16714: PPUSH
16715: LD_STRING DMar-Obj-13
16717: PPUSH
16718: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
16722: LD_EXP 37
16726: PPUSH
16727: LD_STRING DMar-Obj-14
16729: PPUSH
16730: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
16734: LD_EXP 39
16738: PPUSH
16739: LD_STRING DO-Obj-15
16741: PPUSH
16742: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
16746: LD_EXP 39
16750: PPUSH
16751: LD_STRING DO-Obj-16
16753: PPUSH
16754: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
16758: LD_EXP 30
16762: PPUSH
16763: LD_STRING DH-Obj-17
16765: PPUSH
16766: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
16770: LD_EXP 39
16774: PPUSH
16775: LD_STRING DO-Obj-18
16777: PPUSH
16778: CALL_OW 88
// end ;
16782: LD_VAR 0 1
16786: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
16787: LD_INT 34
16789: PUSH
16790: LD_INT 92
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PPUSH
16797: CALL_OW 69
16801: IFFALSE 16996
16803: GO 16805
16805: DISABLE
16806: LD_INT 0
16808: PPUSH
// begin wait ( 0 0$2 ) ;
16809: LD_INT 70
16811: PPUSH
16812: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
16816: LD_INT 34
16818: PUSH
16819: LD_INT 92
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PPUSH
16826: CALL_OW 69
16830: PPUSH
16831: CALL_OW 87
// DialogueOn ;
16835: CALL_OW 6
// if Markov then
16839: LD_EXP 37
16843: IFFALSE 16871
// begin Say ( Markov , DMar-Grn-1 ) ;
16845: LD_EXP 37
16849: PPUSH
16850: LD_STRING DMar-Grn-1
16852: PPUSH
16853: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
16857: LD_EXP 30
16861: PPUSH
16862: LD_STRING DH-Grn-2
16864: PPUSH
16865: CALL_OW 88
// end else
16869: GO 16970
// if heikeSecondSquad then
16871: LD_EXP 45
16875: IFFALSE 16970
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
16877: LD_ADDR_VAR 0 1
16881: PUSH
16882: LD_EXP 45
16886: PUSH
16887: LD_INT 1
16889: PPUSH
16890: LD_EXP 45
16894: PPUSH
16895: CALL_OW 12
16899: ARRAY
16900: ST_TO_ADDR
// case GetSex ( random ) of 1 :
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL_OW 258
16910: PUSH
16911: LD_INT 1
16913: DOUBLE
16914: EQUAL
16915: IFTRUE 16919
16917: GO 16934
16919: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
16920: LD_VAR 0 1
16924: PPUSH
16925: LD_STRING DArm-Grn-1
16927: PPUSH
16928: CALL_OW 88
16932: GO 16958
16934: LD_INT 2
16936: DOUBLE
16937: EQUAL
16938: IFTRUE 16942
16940: GO 16957
16942: POP
// Say ( random , DArf-Grn-1 ) ; end ;
16943: LD_VAR 0 1
16947: PPUSH
16948: LD_STRING DArf-Grn-1
16950: PPUSH
16951: CALL_OW 88
16955: GO 16958
16957: POP
// Say ( Heike , DH-Grn-2 ) ;
16958: LD_EXP 30
16962: PPUSH
16963: LD_STRING DH-Grn-2
16965: PPUSH
16966: CALL_OW 88
// end ; DialogueOff ;
16970: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
16974: LD_STRING MortarConstructed
16976: PPUSH
16977: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
16981: LD_STRING SelfPropelledMortar
16983: PPUSH
16984: CALL_OW 339
// mortarConstructed := true ;
16988: LD_ADDR_EXP 15
16992: PUSH
16993: LD_INT 1
16995: ST_TO_ADDR
// end ;
16996: PPOPN 1
16998: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
16999: LD_INT 2
17001: PPUSH
17002: LD_INT 8
17004: PPUSH
17005: CALL_OW 294
17009: IFFALSE 17152
17011: GO 17013
17013: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
17014: LD_INT 200
17016: PPUSH
17017: LD_INT 162
17019: PPUSH
17020: LD_INT 2
17022: PPUSH
17023: LD_INT 6
17025: NEG
17026: PPUSH
17027: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
17031: LD_INT 200
17033: PPUSH
17034: LD_INT 162
17036: PPUSH
17037: LD_INT 2
17039: PPUSH
17040: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
17044: LD_INT 200
17046: PPUSH
17047: LD_INT 162
17049: PPUSH
17050: CALL_OW 84
// if not IsOk ( Kurt ) then
17054: LD_EXP 41
17058: PPUSH
17059: CALL_OW 302
17063: NOT
17064: IFFALSE 17068
// exit ;
17066: GO 17152
// Say ( Kurt , DKs-Otpst-2-1 ) ;
17068: LD_EXP 41
17072: PPUSH
17073: LD_STRING DKs-Otpst-2-1
17075: PPUSH
17076: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
17080: LD_EXP 35
17084: PPUSH
17085: LD_STRING DK-Otpst-2-2
17087: PPUSH
17088: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
17092: LD_EXP 41
17096: PPUSH
17097: LD_STRING DKs-Otpst-2-3
17099: PPUSH
17100: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
17104: LD_EXP 41
17108: PPUSH
17109: LD_STRING DKs-Otpst-2-4
17111: PPUSH
17112: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
17116: LD_EXP 41
17120: PPUSH
17121: LD_STRING DKs-Otpst-2-5
17123: PPUSH
17124: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
17128: LD_EXP 34
17132: PPUSH
17133: LD_STRING DKam-Otpst-2-6
17135: PPUSH
17136: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
17140: LD_EXP 41
17144: PPUSH
17145: LD_STRING DKs-Otpst-2-7
17147: PPUSH
17148: CALL_OW 88
// end ;
17152: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
17153: LD_INT 8
17155: PPUSH
17156: LD_INT 22
17158: PUSH
17159: LD_INT 3
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 21
17168: PUSH
17169: LD_INT 3
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PPUSH
17180: CALL_OW 70
17184: NOT
17185: PUSH
17186: LD_EXP 3
17190: NOT
17191: AND
17192: IFFALSE 17440
17194: GO 17196
17196: DISABLE
17197: LD_INT 0
17199: PPUSH
// begin outpostDestroyed := true ;
17200: LD_ADDR_EXP 4
17204: PUSH
17205: LD_INT 1
17207: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
17208: LD_INT 22
17210: PUSH
17211: LD_INT 2
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 34
17220: PUSH
17221: LD_INT 92
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 92
17230: PUSH
17231: LD_INT 195
17233: PUSH
17234: LD_INT 164
17236: PUSH
17237: LD_INT 12
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: LIST
17250: PPUSH
17251: CALL_OW 69
17255: NOT
17256: IFFALSE 17260
// exit ;
17258: GO 17440
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
17260: LD_EXP 31
17264: PPUSH
17265: CALL_OW 302
17269: NOT
17270: PUSH
17271: LD_EXP 35
17275: PPUSH
17276: CALL_OW 302
17280: NOT
17281: OR
17282: IFFALSE 17286
// exit ;
17284: GO 17440
// Say ( Givi , DG-Otpst-1-1 ) ;
17286: LD_EXP 31
17290: PPUSH
17291: LD_STRING DG-Otpst-1-1
17293: PPUSH
17294: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
17298: LD_EXP 35
17302: PPUSH
17303: LD_STRING DK-Otpst-1-2
17305: PPUSH
17306: CALL_OW 88
// if IsOk ( Markov ) then
17310: LD_EXP 37
17314: PPUSH
17315: CALL_OW 302
17319: IFFALSE 17347
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
17321: LD_EXP 37
17325: PPUSH
17326: LD_STRING DMar-Otpst-1-3
17328: PPUSH
17329: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
17333: LD_EXP 37
17337: PPUSH
17338: LD_STRING DMar-Otpst-1-4
17340: PPUSH
17341: CALL_OW 88
// end else
17345: GO 17428
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
17347: LD_ADDR_VAR 0 1
17351: PUSH
17352: LD_EXP 45
17356: PUSH
17357: LD_INT 1
17359: PPUSH
17360: LD_EXP 45
17364: PPUSH
17365: CALL_OW 12
17369: ARRAY
17370: ST_TO_ADDR
// case GetSex ( random ) of 1 :
17371: LD_VAR 0 1
17375: PPUSH
17376: CALL_OW 258
17380: PUSH
17381: LD_INT 1
17383: DOUBLE
17384: EQUAL
17385: IFTRUE 17389
17387: GO 17404
17389: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
17390: LD_VAR 0 1
17394: PPUSH
17395: LD_STRING DArm-Otpst-1-a-3
17397: PPUSH
17398: CALL_OW 88
17402: GO 17428
17404: LD_INT 2
17406: DOUBLE
17407: EQUAL
17408: IFTRUE 17412
17410: GO 17427
17412: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
17413: LD_VAR 0 1
17417: PPUSH
17418: LD_STRING DArf-Otpst-1-a-3
17420: PPUSH
17421: CALL_OW 88
17425: GO 17428
17427: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
17428: LD_EXP 31
17432: PPUSH
17433: LD_STRING DG-Otpst-1-5
17435: PPUSH
17436: CALL_OW 88
// end ;
17440: PPOPN 1
17442: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
17443: LD_EXP 35
17447: PPUSH
17448: CALL_OW 256
17452: PUSH
17453: LD_INT 10
17455: LESS
17456: IFFALSE 17570
17458: GO 17460
17460: DISABLE
// begin DialogueOn ;
17461: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17465: LD_EXP 35
17469: PPUSH
17470: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
17474: LD_EXP 35
17478: PPUSH
17479: LD_STRING DK-Dead-1
17481: PPUSH
17482: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
17486: LD_EXP 30
17490: PPUSH
17491: LD_STRING DH-Dead-2
17493: PPUSH
17494: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
17498: LD_EXP 35
17502: PPUSH
17503: LD_STRING DK-Dead-3
17505: PPUSH
17506: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
17510: LD_EXP 30
17514: PPUSH
17515: LD_STRING DH-Dead-4
17517: PPUSH
17518: CALL_OW 88
// if IsOk ( Mike ) then
17522: LD_EXP 32
17526: PPUSH
17527: CALL_OW 302
17531: IFFALSE 17557
// begin Say ( Mike , DM-Dead-5 ) ;
17533: LD_EXP 32
17537: PPUSH
17538: LD_STRING DM-Dead-5
17540: PPUSH
17541: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
17545: LD_EXP 30
17549: PPUSH
17550: LD_STRING DH-Dead-6
17552: PPUSH
17553: CALL_OW 88
// end ; DialogueOff ;
17557: CALL_OW 7
// KillUnit ( Kaia ) ;
17561: LD_EXP 35
17565: PPUSH
17566: CALL_OW 66
// end ;
17570: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
17571: LD_OWVAR 1
17575: PUSH
17576: LD_INT 21700
17578: GREATEREQUAL
17579: PUSH
17580: LD_EXP 5
17584: PUSH
17585: LD_INT 5
17587: GREATER
17588: OR
17589: PUSH
17590: LD_INT 22
17592: PUSH
17593: LD_INT 2
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 92
17602: PUSH
17603: LD_INT 103
17605: PUSH
17606: LD_INT 81
17608: PUSH
17609: LD_INT 20
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PPUSH
17622: CALL_OW 69
17626: OR
17627: IFFALSE 18034
17629: GO 17631
17631: DISABLE
17632: LD_INT 0
17634: PPUSH
17635: PPUSH
17636: PPUSH
// begin PrepareRolfSquad ;
17637: CALL 2372 0 0
// dep := HexInfo ( 86 , 54 ) ;
17641: LD_ADDR_VAR 0 3
17645: PUSH
17646: LD_INT 86
17648: PPUSH
17649: LD_INT 54
17651: PPUSH
17652: CALL_OW 428
17656: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
17657: LD_VAR 0 3
17661: PPUSH
17662: CALL_OW 274
17666: PPUSH
17667: LD_INT 1
17669: PPUSH
17670: LD_INT 300
17672: PPUSH
17673: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
17677: LD_VAR 0 3
17681: PPUSH
17682: CALL_OW 274
17686: PPUSH
17687: LD_INT 2
17689: PPUSH
17690: LD_INT 300
17692: PPUSH
17693: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
17697: LD_EXP 47
17701: PPUSH
17702: LD_INT 79
17704: PPUSH
17705: LD_INT 52
17707: PPUSH
17708: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
17712: LD_INT 35
17714: PPUSH
17715: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
17719: LD_INT 12
17721: PPUSH
17722: LD_INT 22
17724: PUSH
17725: LD_INT 3
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 21
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PPUSH
17746: CALL_OW 70
17750: NOT
17751: IFFALSE 17712
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: LD_INT 12
17760: PPUSH
17761: LD_INT 21
17763: PUSH
17764: LD_INT 3
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PPUSH
17771: CALL_OW 70
17775: ST_TO_ADDR
// for i in tmp do
17776: LD_ADDR_VAR 0 1
17780: PUSH
17781: LD_VAR 0 2
17785: PUSH
17786: FOR_IN
17787: IFFALSE 17803
// SetSide ( i , 8 ) ;
17789: LD_VAR 0 1
17793: PPUSH
17794: LD_INT 8
17796: PPUSH
17797: CALL_OW 235
17801: GO 17786
17803: POP
17804: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
17805: LD_INT 63
17807: PPUSH
17808: LD_INT 42
17810: PPUSH
17811: CALL_OW 428
17815: PPUSH
17816: LD_INT 320
17818: PPUSH
17819: CALL_OW 234
// wait ( 0 0$10 ) ;
17823: LD_INT 350
17825: PPUSH
17826: CALL_OW 67
// DialogueOn ;
17830: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
17834: LD_INT 8
17836: PPUSH
17837: LD_INT 2
17839: PPUSH
17840: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
17844: LD_INT 86
17846: PPUSH
17847: LD_INT 54
17849: PPUSH
17850: CALL_OW 428
17854: PPUSH
17855: LD_STRING antwerp
17857: PPUSH
17858: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
17862: LD_EXP 43
17866: PPUSH
17867: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
17871: LD_EXP 43
17875: PPUSH
17876: LD_STRING DRf-rast-1
17878: PPUSH
17879: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
17883: LD_EXP 30
17887: PPUSH
17888: LD_STRING DH-rast-2
17890: PPUSH
17891: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
17895: LD_EXP 43
17899: PPUSH
17900: LD_STRING DRf-rast-3
17902: PPUSH
17903: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
17907: LD_EXP 43
17911: PPUSH
17912: LD_STRING DRf-rast-4
17914: PPUSH
17915: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
17919: LD_EXP 43
17923: PPUSH
17924: LD_STRING DRf-rast-5
17926: PPUSH
17927: CALL_OW 94
// if IsOk ( Aviradze ) then
17931: LD_EXP 42
17935: PPUSH
17936: CALL_OW 302
17940: IFFALSE 17999
// begin CenterNowOnUnits ( Aviradze ) ;
17942: LD_EXP 42
17946: PPUSH
17947: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
17951: LD_EXP 42
17955: PPUSH
17956: LD_STRING DA-rast-6
17958: PPUSH
17959: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
17963: LD_EXP 30
17967: PPUSH
17968: LD_STRING DH-rast-7
17970: PPUSH
17971: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
17975: LD_EXP 31
17979: PPUSH
17980: LD_STRING DG-rast-8
17982: PPUSH
17983: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
17987: LD_EXP 31
17991: PPUSH
17992: LD_STRING DG-rast-9
17994: PPUSH
17995: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
17999: LD_EXP 30
18003: PPUSH
18004: LD_STRING DH-rast-10
18006: PPUSH
18007: CALL_OW 88
// DialogueOff ;
18011: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18015: LD_STRING M2
18017: PPUSH
18018: CALL_OW 337
// bergkampfArrived := true ;
18022: LD_ADDR_EXP 3
18026: PUSH
18027: LD_INT 1
18029: ST_TO_ADDR
// PrepareRolfBase ;
18030: CALL 2703 0 0
// end ;
18034: PPOPN 3
18036: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
18037: LD_INT 12
18039: PPUSH
18040: LD_INT 22
18042: PUSH
18043: LD_INT 2
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PPUSH
18050: CALL_OW 70
18054: PUSH
18055: LD_EXP 43
18059: PPUSH
18060: CALL_OW 302
18064: AND
18065: PUSH
18066: LD_EXP 29
18070: AND
18071: IFFALSE 18631
18073: GO 18075
18075: DISABLE
18076: LD_INT 0
18078: PPUSH
// begin rolfScriptBase := false ;
18079: LD_ADDR_EXP 9
18083: PUSH
18084: LD_INT 0
18086: ST_TO_ADDR
// DialogueOn ;
18087: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
18091: LD_EXP 43
18095: PPUSH
18096: CALL_OW 87
// if rolfSquad >= 10 then
18100: LD_EXP 47
18104: PUSH
18105: LD_INT 10
18107: GREATEREQUAL
18108: IFFALSE 18287
// begin linkedWithRolf := 2 ;
18110: LD_ADDR_EXP 12
18114: PUSH
18115: LD_INT 2
18117: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
18118: LD_EXP 43
18122: PPUSH
18123: LD_STRING DRf-rast-11
18125: PPUSH
18126: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
18130: LD_EXP 30
18134: PPUSH
18135: LD_STRING DH-rast-12
18137: PPUSH
18138: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
18142: LD_EXP 43
18146: PPUSH
18147: LD_STRING DRf-rast-13
18149: PPUSH
18150: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
18154: LD_EXP 30
18158: PPUSH
18159: LD_STRING DH-rast-14
18161: PPUSH
18162: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
18166: LD_EXP 43
18170: PPUSH
18171: LD_STRING DRf-rast-15
18173: PPUSH
18174: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
18178: LD_EXP 30
18182: PPUSH
18183: LD_STRING DH-rast-16
18185: PPUSH
18186: CALL_OW 88
// if IsOk ( Mike ) then
18190: LD_EXP 32
18194: PPUSH
18195: CALL_OW 302
18199: IFFALSE 18273
// begin Say ( Mike , DM-rast-17 ) ;
18201: LD_EXP 32
18205: PPUSH
18206: LD_STRING DM-rast-17
18208: PPUSH
18209: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
18213: LD_EXP 30
18217: PPUSH
18218: LD_STRING DH-rast-18
18220: PPUSH
18221: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
18225: LD_EXP 32
18229: PPUSH
18230: LD_STRING DM-rast-19
18232: PPUSH
18233: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
18237: LD_EXP 30
18241: PPUSH
18242: LD_STRING DH-rast-20
18244: PPUSH
18245: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
18249: LD_EXP 32
18253: PPUSH
18254: LD_STRING DM-rast-21
18256: PPUSH
18257: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
18261: LD_EXP 30
18265: PPUSH
18266: LD_STRING DH-rast-22
18268: PPUSH
18269: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
18273: LD_EXP 30
18277: PPUSH
18278: LD_STRING DH-rast-23
18280: PPUSH
18281: CALL_OW 88
// end else
18285: GO 18437
// begin linkedWithRolf := 1 ;
18287: LD_ADDR_EXP 12
18291: PUSH
18292: LD_INT 1
18294: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
18295: LD_EXP 43
18299: PPUSH
18300: LD_STRING DRf-rast-a-11
18302: PPUSH
18303: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
18307: LD_EXP 30
18311: PPUSH
18312: LD_STRING DH-rast-a-12
18314: PPUSH
18315: CALL_OW 88
// if IsOk ( Kurt ) then
18319: LD_EXP 41
18323: PPUSH
18324: CALL_OW 302
18328: IFFALSE 18425
// begin Say ( Kurt , DKs-rast-a-13 ) ;
18330: LD_EXP 41
18334: PPUSH
18335: LD_STRING DKs-rast-a-13
18337: PPUSH
18338: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
18342: LD_EXP 43
18346: PPUSH
18347: LD_STRING DRf-rast-a-14
18349: PPUSH
18350: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
18354: LD_EXP 43
18358: PPUSH
18359: LD_STRING DRf-rast-a-15
18361: PPUSH
18362: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
18366: LD_EXP 41
18370: PPUSH
18371: LD_STRING DKs-rast-a-16
18373: PPUSH
18374: CALL_OW 88
// if IsOk ( Givi ) then
18378: LD_EXP 31
18382: PPUSH
18383: CALL_OW 302
18387: IFFALSE 18425
// begin Say ( Givi , DG-rast-a-17 ) ;
18389: LD_EXP 31
18393: PPUSH
18394: LD_STRING DG-rast-a-17
18396: PPUSH
18397: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
18401: LD_EXP 31
18405: PPUSH
18406: LD_STRING DG-rast-a-18
18408: PPUSH
18409: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
18413: LD_EXP 41
18417: PPUSH
18418: LD_STRING DKs-rast-a-19
18420: PPUSH
18421: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
18425: LD_EXP 30
18429: PPUSH
18430: LD_STRING DH-rast-a-20
18432: PPUSH
18433: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
18437: LD_EXP 43
18441: PPUSH
18442: LD_STRING DRf-rast-24
18444: PPUSH
18445: CALL_OW 88
// if IsOk ( Aviradze ) then
18449: LD_EXP 42
18453: PPUSH
18454: CALL_OW 302
18458: IFFALSE 18558
// begin Say ( Aviradze , DA-rast-25 ) ;
18460: LD_EXP 42
18464: PPUSH
18465: LD_STRING DA-rast-25
18467: PPUSH
18468: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
18472: LD_EXP 30
18476: PPUSH
18477: LD_STRING DH-rast-26
18479: PPUSH
18480: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
18484: LD_EXP 42
18488: PPUSH
18489: LD_STRING DA-rast-27
18491: PPUSH
18492: CALL_OW 88
// if IsOk ( Markov ) then
18496: LD_EXP 37
18500: PPUSH
18501: CALL_OW 302
18505: IFFALSE 18533
// begin Say ( Markov , DMar-rast-28 ) ;
18507: LD_EXP 37
18511: PPUSH
18512: LD_STRING DMar-rast-28
18514: PPUSH
18515: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
18519: LD_EXP 37
18523: PPUSH
18524: LD_STRING DMar-rast-29
18526: PPUSH
18527: CALL_OW 88
// end else
18531: GO 18556
// if IsOk ( Sophia ) then
18533: LD_EXP 36
18537: PPUSH
18538: CALL_OW 302
18542: IFFALSE 18556
// begin Say ( Sophia , DS-rast-28 ) ;
18544: LD_EXP 36
18548: PPUSH
18549: LD_STRING DS-rast-28
18551: PPUSH
18552: CALL_OW 88
// end ; end else
18556: GO 18581
// if IsOk ( Sophia ) then
18558: LD_EXP 36
18562: PPUSH
18563: CALL_OW 302
18567: IFFALSE 18581
// Say ( Sophia , DS-rast-29 ) ;
18569: LD_EXP 36
18573: PPUSH
18574: LD_STRING DS-rast-29
18576: PPUSH
18577: CALL_OW 88
// DialogueOff ;
18581: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
18585: LD_STRING M3
18587: PPUSH
18588: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
18592: LD_ADDR_VAR 0 1
18596: PUSH
18597: LD_INT 22
18599: PUSH
18600: LD_INT 8
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PPUSH
18607: CALL_OW 69
18611: PUSH
18612: FOR_IN
18613: IFFALSE 18629
// SetSide ( i , 2 ) ;
18615: LD_VAR 0 1
18619: PPUSH
18620: LD_INT 2
18622: PPUSH
18623: CALL_OW 235
18627: GO 18612
18629: POP
18630: POP
// end ;
18631: PPOPN 1
18633: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
18634: LD_EXP 23
18638: PUSH
18639: LD_EXP 12
18643: NOT
18644: AND
18645: PUSH
18646: LD_EXP 29
18650: AND
18651: IFFALSE 18742
18653: GO 18655
18655: DISABLE
18656: LD_INT 0
18658: PPUSH
// begin canRolfJoin := false ;
18659: LD_ADDR_EXP 29
18663: PUSH
18664: LD_INT 0
18666: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
18667: LD_STRING M3
18669: PPUSH
18670: CALL_OW 337
// for i in rolfSquad do
18674: LD_ADDR_VAR 0 1
18678: PUSH
18679: LD_EXP 47
18683: PUSH
18684: FOR_IN
18685: IFFALSE 18740
// begin ComExit ( i ) ;
18687: LD_VAR 0 1
18691: PPUSH
18692: CALL 63054 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
18696: LD_VAR 0 1
18700: PPUSH
18701: LD_INT 147
18703: PPUSH
18704: LD_INT 162
18706: PPUSH
18707: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
18711: LD_VAR 0 1
18715: PPUSH
18716: LD_INT 1050
18718: PPUSH
18719: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
18723: LD_VAR 0 1
18727: PPUSH
18728: LD_INT 103
18730: PPUSH
18731: LD_INT 162
18733: PPUSH
18734: CALL_OW 174
// end ;
18738: GO 18684
18740: POP
18741: POP
// end ;
18742: PPOPN 1
18744: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
18745: LD_EXP 3
18749: PUSH
18750: LD_EXP 43
18754: PPUSH
18755: CALL_OW 256
18759: PUSH
18760: LD_INT 400
18762: LESS
18763: AND
18764: PUSH
18765: LD_EXP 12
18769: NOT
18770: AND
18771: PUSH
18772: LD_EXP 29
18776: AND
18777: IFFALSE 19051
18779: GO 18781
18781: DISABLE
18782: LD_INT 0
18784: PPUSH
// begin DialogueOn ;
18785: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
18789: LD_EXP 43
18793: PPUSH
18794: LD_STRING DRf-rast-f-11
18796: PPUSH
18797: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
18801: LD_EXP 43
18805: PPUSH
18806: LD_STRING DRf-rast-f-12
18808: PPUSH
18809: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
18813: LD_EXP 43
18817: PPUSH
18818: LD_STRING DRf-rast-f-13
18820: PPUSH
18821: CALL_OW 94
// DialogueOff ;
18825: CALL_OW 7
// KillUnit ( Rolf ) ;
18829: LD_EXP 43
18833: PPUSH
18834: CALL_OW 66
// wait ( 0 0$1 ) ;
18838: LD_INT 35
18840: PPUSH
18841: CALL_OW 67
// if not IsOk ( Givi ) then
18845: LD_EXP 31
18849: PPUSH
18850: CALL_OW 302
18854: NOT
18855: IFFALSE 18859
// exit ;
18857: GO 19051
// DialogueOn ;
18859: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
18863: LD_EXP 31
18867: PPUSH
18868: LD_STRING DG-rast-f-14
18870: PPUSH
18871: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
18875: LD_EXP 31
18879: PPUSH
18880: LD_STRING DG-rast-f-15
18882: PPUSH
18883: CALL_OW 88
// if IsOk ( Kaia ) then
18887: LD_EXP 35
18891: PPUSH
18892: CALL_OW 302
18896: IFFALSE 18912
// Say ( Kaia , DK-rast-f-16 ) else
18898: LD_EXP 35
18902: PPUSH
18903: LD_STRING DK-rast-f-16
18905: PPUSH
18906: CALL_OW 88
18910: GO 18999
// if heikeSecondSquad then
18912: LD_EXP 45
18916: IFFALSE 18999
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18918: LD_ADDR_VAR 0 1
18922: PUSH
18923: LD_EXP 45
18927: PUSH
18928: LD_INT 1
18930: PPUSH
18931: LD_EXP 45
18935: PPUSH
18936: CALL_OW 12
18940: ARRAY
18941: ST_TO_ADDR
// case GetSex ( random ) of 1 :
18942: LD_VAR 0 1
18946: PPUSH
18947: CALL_OW 258
18951: PUSH
18952: LD_INT 1
18954: DOUBLE
18955: EQUAL
18956: IFTRUE 18960
18958: GO 18975
18960: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
18961: LD_VAR 0 1
18965: PPUSH
18966: LD_STRING DArm-rast-f-a-16
18968: PPUSH
18969: CALL_OW 88
18973: GO 18999
18975: LD_INT 2
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 18998
18983: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
18984: LD_VAR 0 1
18988: PPUSH
18989: LD_STRING DArf-rast-f-a-16
18991: PPUSH
18992: CALL_OW 88
18996: GO 18999
18998: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
18999: LD_EXP 31
19003: PPUSH
19004: LD_STRING DG-rast-f-17
19006: PPUSH
19007: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
19011: LD_EXP 31
19015: PPUSH
19016: LD_STRING DG-rast-f-18
19018: PPUSH
19019: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
19023: LD_EXP 31
19027: PPUSH
19028: LD_STRING DG-rast-f-19
19030: PPUSH
19031: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
19035: LD_EXP 31
19039: PPUSH
19040: LD_STRING DG-rast-f-20
19042: PPUSH
19043: CALL_OW 88
// DialogueOff ;
19047: CALL_OW 7
// end ;
19051: PPOPN 1
19053: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
19054: LD_INT 2
19056: PPUSH
19057: LD_INT 10
19059: PPUSH
19060: CALL_OW 294
19064: IFFALSE 19137
19066: GO 19068
19068: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
19069: LD_EXP 31
19073: PPUSH
19074: LD_STRING DG-Len-1
19076: PPUSH
19077: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
19081: LD_EXP 41
19085: PPUSH
19086: LD_STRING DKs-Len-2
19088: PPUSH
19089: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
19093: LD_EXP 41
19097: PPUSH
19098: LD_STRING DKs-Len-3
19100: PPUSH
19101: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
19105: LD_EXP 30
19109: PPUSH
19110: LD_STRING DH-Len-4
19112: PPUSH
19113: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
19117: LD_EXP 35
19121: PPUSH
19122: LD_STRING DK-Len-5
19124: PPUSH
19125: CALL_OW 88
// leninSpotted := true ;
19129: LD_ADDR_EXP 14
19133: PUSH
19134: LD_INT 1
19136: ST_TO_ADDR
// end ;
19137: END
// every 0 0$1 trigger ( bergkampfArrived and tick > 17 17$00 ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 322 , 215 , 20 ] ] ) do var i ;
19138: LD_EXP 3
19142: PUSH
19143: LD_OWVAR 1
19147: PUSH
19148: LD_INT 35700
19150: GREATER
19151: AND
19152: PUSH
19153: LD_INT 22
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 92
19165: PUSH
19166: LD_INT 322
19168: PUSH
19169: LD_INT 215
19171: PUSH
19172: LD_INT 20
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PPUSH
19185: CALL_OW 69
19189: OR
19190: IFFALSE 19553
19192: GO 19194
19194: DISABLE
19195: LD_INT 0
19197: PPUSH
// begin PrepareOmarSquad ;
19198: CALL 3985 0 0
// repeat wait ( 0 0$1 ) ;
19202: LD_INT 35
19204: PPUSH
19205: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
19209: LD_INT 14
19211: PPUSH
19212: LD_INT 22
19214: PUSH
19215: LD_INT 3
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 2
19224: PUSH
19225: LD_INT 21
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 59
19237: PUSH
19238: EMPTY
19239: LIST
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 70
19254: NOT
19255: IFFALSE 19202
// for i in omarSquad do
19257: LD_ADDR_VAR 0 1
19261: PUSH
19262: LD_EXP 48
19266: PUSH
19267: FOR_IN
19268: IFFALSE 19299
// if GetLives ( i ) < 750 then
19270: LD_VAR 0 1
19274: PPUSH
19275: CALL_OW 256
19279: PUSH
19280: LD_INT 750
19282: LESS
19283: IFFALSE 19297
// SetLives ( i , 1000 ) ;
19285: LD_VAR 0 1
19289: PPUSH
19290: LD_INT 1000
19292: PPUSH
19293: CALL_OW 234
19297: GO 19267
19299: POP
19300: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
19301: LD_ADDR_VAR 0 1
19305: PUSH
19306: LD_INT 14
19308: PPUSH
19309: LD_INT 21
19311: PUSH
19312: LD_INT 3
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PPUSH
19319: CALL_OW 70
19323: PUSH
19324: FOR_IN
19325: IFFALSE 19341
// SetSide ( i , 5 ) ;
19327: LD_VAR 0 1
19331: PPUSH
19332: LD_INT 5
19334: PPUSH
19335: CALL_OW 235
19339: GO 19324
19341: POP
19342: POP
// wait ( 0 0$3 ) ;
19343: LD_INT 105
19345: PPUSH
19346: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
19350: LD_INT 5
19352: PPUSH
19353: LD_INT 2
19355: PPUSH
19356: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
19360: LD_EXP 40
19364: PPUSH
19365: CALL_OW 87
// DialogueOn ;
19369: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-1 ) ;
19373: LD_EXP 40
19377: PPUSH
19378: LD_STRING DOm-Veh-1
19380: PPUSH
19381: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
19385: LD_EXP 40
19389: PPUSH
19390: LD_STRING DOm-Veh-2
19392: PPUSH
19393: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
19397: LD_EXP 40
19401: PPUSH
19402: LD_STRING DOm-Veh-3
19404: PPUSH
19405: CALL_OW 94
// if mortarConstructed then
19409: LD_EXP 15
19413: IFFALSE 19427
// SayRadio ( Omar , DOm-Veh-4 ) ;
19415: LD_EXP 40
19419: PPUSH
19420: LD_STRING DOm-Veh-4
19422: PPUSH
19423: CALL_OW 94
// Say ( Heike , DH-Veh-5 ) ;
19427: LD_EXP 30
19431: PPUSH
19432: LD_STRING DH-Veh-5
19434: PPUSH
19435: CALL_OW 88
// if IsOk ( Kurt ) then
19439: LD_EXP 41
19443: PPUSH
19444: CALL_OW 302
19448: IFFALSE 19498
// begin Say ( Kurt , DKs-Veh-6 ) ;
19450: LD_EXP 41
19454: PPUSH
19455: LD_STRING DKs-Veh-6
19457: PPUSH
19458: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
19462: LD_EXP 41
19466: PPUSH
19467: LD_STRING DKs-Veh-7
19469: PPUSH
19470: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
19474: LD_EXP 31
19478: PPUSH
19479: LD_STRING DG-Veh-8
19481: PPUSH
19482: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
19486: LD_EXP 32
19490: PPUSH
19491: LD_STRING DM-Veh-9
19493: PPUSH
19494: CALL_OW 88
// end ; DialogueOff ;
19498: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
19502: LD_STRING M4
19504: PPUSH
19505: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
19509: LD_EXP 40
19513: PPUSH
19514: LD_INT 341
19516: PPUSH
19517: LD_INT 232
19519: PPUSH
19520: CALL_OW 428
19524: PPUSH
19525: CALL_OW 120
// omarArrived := true ;
19529: LD_ADDR_EXP 6
19533: PUSH
19534: LD_INT 1
19536: ST_TO_ADDR
// omarScriptBase := true ;
19537: LD_ADDR_EXP 10
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// omarWantVehicles := true ;
19545: LD_ADDR_EXP 18
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// end ;
19553: PPOPN 1
19555: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
19556: LD_EXP 43
19560: PPUSH
19561: CALL_OW 302
19565: PUSH
19566: LD_EXP 12
19570: AND
19571: PUSH
19572: LD_EXP 6
19576: AND
19577: IFFALSE 19681
19579: GO 19581
19581: DISABLE
// begin wait ( 0 0$20 ) ;
19582: LD_INT 700
19584: PPUSH
19585: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
19589: LD_EXP 43
19593: PPUSH
19594: CALL_OW 87
// DialogueOn ;
19598: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
19602: LD_EXP 43
19606: PPUSH
19607: LD_STRING DRf-Veh-10
19609: PPUSH
19610: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
19614: LD_EXP 43
19618: PPUSH
19619: LD_STRING DRf-Veh-11
19621: PPUSH
19622: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
19626: LD_EXP 30
19630: PPUSH
19631: LD_STRING DH-Veh-12
19633: PPUSH
19634: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
19638: LD_EXP 30
19642: PPUSH
19643: LD_STRING DH-Veh-13
19645: PPUSH
19646: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
19650: LD_EXP 43
19654: PPUSH
19655: LD_STRING DRf-Veh-14
19657: PPUSH
19658: CALL_OW 88
// DialogueOff ;
19662: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
19666: LD_STRING M5
19668: PPUSH
19669: CALL_OW 337
// rolfWantVehicles := true ;
19673: LD_ADDR_EXP 17
19677: PUSH
19678: LD_INT 1
19680: ST_TO_ADDR
// end ;
19681: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
19682: LD_EXP 18
19686: IFFALSE 20385
19688: GO 19690
19690: DISABLE
19691: LD_INT 0
19693: PPUSH
19694: PPUSH
19695: PPUSH
19696: PPUSH
19697: PPUSH
19698: PPUSH
// begin wait ( 0 0$3 ) ;
19699: LD_INT 105
19701: PPUSH
19702: CALL_OW 67
// Hint ( OmarVehicles ) ;
19706: LD_STRING OmarVehicles
19708: PPUSH
19709: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
19713: LD_INT 16
19715: PPUSH
19716: LD_INT 1
19718: PPUSH
19719: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
19723: LD_INT 35
19725: PPUSH
19726: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
19730: LD_ADDR_EXP 20
19734: PUSH
19735: LD_EXP 20
19739: PUSH
19740: LD_INT 35
19742: MINUS
19743: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
19744: LD_EXP 20
19748: PUSH
19749: LD_INT 0
19751: LESSEQUAL
19752: IFFALSE 19852
// begin display_strings := [ ] ;
19754: LD_ADDR_OWVAR 47
19758: PUSH
19759: EMPTY
19760: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
19761: LD_STRING M4a
19763: PPUSH
19764: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19768: LD_INT 16
19770: PPUSH
19771: LD_INT 0
19773: PPUSH
19774: CALL_OW 424
// DialogueOn ;
19778: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
19782: LD_EXP 40
19786: PPUSH
19787: LD_STRING DOm-Veh-b-15
19789: PPUSH
19790: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
19794: LD_EXP 30
19798: PPUSH
19799: LD_STRING DH-Veh-b-16
19801: PPUSH
19802: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
19806: LD_EXP 40
19810: PPUSH
19811: LD_STRING DOm-Veh-b-17
19813: PPUSH
19814: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
19818: LD_EXP 35
19822: PPUSH
19823: LD_STRING DK-Veh-b-18
19825: PPUSH
19826: CALL_OW 88
// DialogueOff ;
19830: CALL_OW 7
// omarAttack := true ;
19834: LD_ADDR_EXP 23
19838: PUSH
19839: LD_INT 1
19841: ST_TO_ADDR
// omarScriptBase := false ;
19842: LD_ADDR_EXP 10
19846: PUSH
19847: LD_INT 0
19849: ST_TO_ADDR
// exit ;
19850: GO 20385
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
19852: LD_EXP 21
19856: PUSH
19857: LD_INT 16
19859: PPUSH
19860: LD_INT 22
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 21
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 33
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 58
19892: PUSH
19893: EMPTY
19894: LIST
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: PPUSH
19902: CALL_OW 70
19906: LESSEQUAL
19907: IFFALSE 19723
// omarWaitingForVehiclesTimer := 0 0$00 ;
19909: LD_ADDR_EXP 20
19913: PUSH
19914: LD_INT 0
19916: ST_TO_ADDR
// display_strings := [ ] ;
19917: LD_ADDR_OWVAR 47
19921: PUSH
19922: EMPTY
19923: ST_TO_ADDR
// DialogueOn ;
19924: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
19928: LD_EXP 40
19932: PPUSH
19933: LD_STRING DOm-Veh-a-15
19935: PPUSH
19936: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
19940: LD_EXP 35
19944: PPUSH
19945: LD_STRING DK-Veh-a-16
19947: PPUSH
19948: CALL_OW 88
// DialogueOff ;
19952: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
19956: LD_STRING M4a
19958: PPUSH
19959: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
19963: LD_INT 16
19965: PPUSH
19966: LD_INT 0
19968: PPUSH
19969: CALL_OW 424
// omarHasVehicles := true ;
19973: LD_ADDR_EXP 22
19977: PUSH
19978: LD_INT 1
19980: ST_TO_ADDR
// wait ( 1 1$00 ) ;
19981: LD_INT 2100
19983: PPUSH
19984: CALL_OW 67
// omarAttack := true ;
19988: LD_ADDR_EXP 23
19992: PUSH
19993: LD_INT 1
19995: ST_TO_ADDR
// omarScriptBase := false ;
19996: LD_ADDR_EXP 10
20000: PUSH
20001: LD_INT 0
20003: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
20004: LD_ADDR_VAR 0 2
20008: PUSH
20009: LD_INT 16
20011: PPUSH
20012: LD_INT 22
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 21
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 33
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 58
20044: PUSH
20045: EMPTY
20046: LIST
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: PPUSH
20054: CALL_OW 70
20058: ST_TO_ADDR
// for i in tmp do
20059: LD_ADDR_VAR 0 1
20063: PUSH
20064: LD_VAR 0 2
20068: PUSH
20069: FOR_IN
20070: IFFALSE 20098
// begin SetFuel ( i , 100 ) ;
20072: LD_VAR 0 1
20076: PPUSH
20077: LD_INT 100
20079: PPUSH
20080: CALL_OW 240
// SetSide ( i , 5 ) ;
20084: LD_VAR 0 1
20088: PPUSH
20089: LD_INT 5
20091: PPUSH
20092: CALL_OW 235
// end ;
20096: GO 20069
20098: POP
20099: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
20100: LD_ADDR_VAR 0 3
20104: PUSH
20105: LD_EXP 48
20109: PPUSH
20110: LD_INT 25
20112: PUSH
20113: LD_INT 2
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PPUSH
20120: CALL_OW 72
20124: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
20125: LD_ADDR_VAR 0 4
20129: PUSH
20130: LD_EXP 48
20134: PPUSH
20135: LD_INT 3
20137: PUSH
20138: LD_INT 55
20140: PUSH
20141: EMPTY
20142: LIST
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 25
20150: PUSH
20151: LD_INT 3
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PPUSH
20162: CALL_OW 72
20166: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
20167: LD_ADDR_VAR 0 5
20171: PUSH
20172: LD_INT 324
20174: PPUSH
20175: LD_INT 234
20177: PPUSH
20178: CALL_OW 428
20182: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
20183: LD_ADDR_VAR 0 6
20187: PUSH
20188: LD_INT 334
20190: PPUSH
20191: LD_INT 241
20193: PPUSH
20194: CALL_OW 428
20198: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
20199: LD_VAR 0 6
20203: PPUSH
20204: CALL_OW 313
20208: PPUSH
20209: CALL_OW 122
// if eng then
20213: LD_VAR 0 3
20217: IFFALSE 20325
// begin if eng + mech <= tmp then
20219: LD_VAR 0 3
20223: PUSH
20224: LD_VAR 0 4
20228: PLUS
20229: PUSH
20230: LD_VAR 0 2
20234: LESSEQUAL
20235: IFFALSE 20290
// begin ComEnterUnit ( eng , workshop ) ;
20237: LD_VAR 0 3
20241: PPUSH
20242: LD_VAR 0 5
20246: PPUSH
20247: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
20251: LD_VAR 0 3
20255: PPUSH
20256: LD_INT 3
20258: PPUSH
20259: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20263: LD_VAR 0 3
20267: PPUSH
20268: CALL_OW 182
// mech := mech union eng ;
20272: LD_ADDR_VAR 0 4
20276: PUSH
20277: LD_VAR 0 4
20281: PUSH
20282: LD_VAR 0 3
20286: UNION
20287: ST_TO_ADDR
// end else
20288: GO 20325
// begin ComEnterUnit ( eng , armoury ) ;
20290: LD_VAR 0 3
20294: PPUSH
20295: LD_VAR 0 6
20299: PPUSH
20300: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
20304: LD_VAR 0 3
20308: PPUSH
20309: LD_INT 1
20311: PPUSH
20312: CALL_OW 183
// AddComExitBuilding ( eng ) ;
20316: LD_VAR 0 3
20320: PPUSH
20321: CALL_OW 182
// end ; end ; for i := 1 to tmp do
20325: LD_ADDR_VAR 0 1
20329: PUSH
20330: DOUBLE
20331: LD_INT 1
20333: DEC
20334: ST_TO_ADDR
20335: LD_VAR 0 2
20339: PUSH
20340: FOR_TO
20341: IFFALSE 20383
// if i <= mech then
20343: LD_VAR 0 1
20347: PUSH
20348: LD_VAR 0 4
20352: LESSEQUAL
20353: IFFALSE 20381
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
20355: LD_VAR 0 4
20359: PUSH
20360: LD_VAR 0 1
20364: ARRAY
20365: PPUSH
20366: LD_VAR 0 2
20370: PUSH
20371: LD_VAR 0 1
20375: ARRAY
20376: PPUSH
20377: CALL_OW 180
20381: GO 20340
20383: POP
20384: POP
// end ;
20385: PPOPN 6
20387: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
20388: LD_EXP 43
20392: PPUSH
20393: CALL_OW 302
20397: PUSH
20398: LD_EXP 17
20402: AND
20403: IFFALSE 20859
20405: GO 20407
20407: DISABLE
20408: LD_INT 0
20410: PPUSH
// begin repeat wait ( 0 0$1 ) ;
20411: LD_INT 35
20413: PPUSH
20414: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
20418: LD_ADDR_EXP 19
20422: PUSH
20423: LD_EXP 19
20427: PUSH
20428: LD_INT 35
20430: MINUS
20431: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
20432: LD_EXP 19
20436: PUSH
20437: LD_INT 0
20439: LESSEQUAL
20440: PUSH
20441: LD_EXP 23
20445: OR
20446: IFFALSE 20664
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
20448: LD_ADDR_EXP 19
20452: PUSH
20453: LD_INT 0
20455: ST_TO_ADDR
// display_strings := [ ] ;
20456: LD_ADDR_OWVAR 47
20460: PUSH
20461: EMPTY
20462: ST_TO_ADDR
// DialogueOn ;
20463: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
20467: LD_EXP 43
20471: PPUSH
20472: LD_STRING DRf-Veh-b-19
20474: PPUSH
20475: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
20479: LD_EXP 43
20483: PPUSH
20484: LD_STRING DRf-Veh-b-20
20486: PPUSH
20487: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
20491: LD_EXP 30
20495: PPUSH
20496: LD_STRING DH-Veh-b-21
20498: PPUSH
20499: CALL_OW 88
// if IsOk ( Givi ) then
20503: LD_EXP 31
20507: PPUSH
20508: CALL_OW 302
20512: IFFALSE 20550
// begin Say ( Givi , DG-Veh-b-22 ) ;
20514: LD_EXP 31
20518: PPUSH
20519: LD_STRING DG-Veh-b-22
20521: PPUSH
20522: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
20526: LD_EXP 30
20530: PPUSH
20531: LD_STRING DH-Veh-b-23
20533: PPUSH
20534: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
20538: LD_EXP 31
20542: PPUSH
20543: LD_STRING DG-Veh-b-24
20545: PPUSH
20546: CALL_OW 88
// end ; DialogueOff ;
20550: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20554: LD_STRING M5a
20556: PPUSH
20557: CALL_OW 337
// for i in rolfSquad do
20561: LD_ADDR_VAR 0 1
20565: PUSH
20566: LD_EXP 47
20570: PUSH
20571: FOR_IN
20572: IFFALSE 20638
// begin SetSide ( i , 8 ) ;
20574: LD_VAR 0 1
20578: PPUSH
20579: LD_INT 8
20581: PPUSH
20582: CALL_OW 235
// if IsDriver ( i ) then
20586: LD_VAR 0 1
20590: PPUSH
20591: CALL 60265 0 1
20595: IFFALSE 20616
// SetSide ( IsInUnit ( i ) , 8 ) else
20597: LD_VAR 0 1
20601: PPUSH
20602: CALL_OW 310
20606: PPUSH
20607: LD_INT 8
20609: PPUSH
20610: CALL_OW 235
20614: GO 20636
// if IsInUnit ( i ) then
20616: LD_VAR 0 1
20620: PPUSH
20621: CALL_OW 310
20625: IFFALSE 20636
// ComExitBuilding ( i ) ;
20627: LD_VAR 0 1
20631: PPUSH
20632: CALL_OW 122
// end ;
20636: GO 20571
20638: POP
20639: POP
// wait ( 0 0$1 ) ;
20640: LD_INT 35
20642: PPUSH
20643: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20647: LD_EXP 47
20651: PPUSH
20652: LD_INT 229
20654: PPUSH
20655: LD_INT 154
20657: PPUSH
20658: CALL_OW 114
// exit ;
20662: GO 20859
// end ; if IsDead ( Rolf ) then
20664: LD_EXP 43
20668: PPUSH
20669: CALL_OW 301
20673: IFFALSE 20684
// begin ChangeMissionObjectives ( M5a ) ;
20675: LD_STRING M5a
20677: PPUSH
20678: CALL_OW 337
// exit ;
20682: GO 20859
// end ; until UnitFilter ( rolfSquad , [ f_driving ] ) + 0 = rolfSquad + 0 ;
20684: LD_EXP 47
20688: PPUSH
20689: LD_INT 55
20691: PUSH
20692: EMPTY
20693: LIST
20694: PPUSH
20695: CALL_OW 72
20699: PUSH
20700: LD_INT 0
20702: PLUS
20703: PUSH
20704: LD_EXP 47
20708: PUSH
20709: LD_INT 0
20711: PLUS
20712: EQUAL
20713: IFFALSE 20411
// rolfWaitingForVehiclesTimer := 0 0$00 ;
20715: LD_ADDR_EXP 19
20719: PUSH
20720: LD_INT 0
20722: ST_TO_ADDR
// display_strings := [ ] ;
20723: LD_ADDR_OWVAR 47
20727: PUSH
20728: EMPTY
20729: ST_TO_ADDR
// DialogueOn ;
20730: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
20734: LD_EXP 43
20738: PPUSH
20739: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
20743: LD_EXP 43
20747: PPUSH
20748: LD_STRING DRf-Veh-a-17
20750: PPUSH
20751: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
20755: LD_EXP 30
20759: PPUSH
20760: LD_STRING DH-08-Veh-a-18
20762: PPUSH
20763: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
20767: LD_EXP 43
20771: PPUSH
20772: LD_STRING DRf-Veh-a-19
20774: PPUSH
20775: CALL_OW 88
// DialogueOff ;
20779: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
20783: LD_STRING M5a
20785: PPUSH
20786: CALL_OW 337
// rolfHasVehicles := true ;
20790: LD_ADDR_EXP 16
20794: PUSH
20795: LD_INT 1
20797: ST_TO_ADDR
// for i in rolfSquad do
20798: LD_ADDR_VAR 0 1
20802: PUSH
20803: LD_EXP 47
20807: PUSH
20808: FOR_IN
20809: IFFALSE 20842
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
20811: LD_VAR 0 1
20815: PPUSH
20816: CALL_OW 310
20820: PPUSH
20821: LD_INT 8
20823: PPUSH
20824: CALL_OW 235
// SetSide ( i , 8 ) ;
20828: LD_VAR 0 1
20832: PPUSH
20833: LD_INT 8
20835: PPUSH
20836: CALL_OW 235
// end ;
20840: GO 20808
20842: POP
20843: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
20844: LD_EXP 47
20848: PPUSH
20849: LD_INT 229
20851: PPUSH
20852: LD_INT 154
20854: PPUSH
20855: CALL_OW 114
// end ;
20859: PPOPN 1
20861: END
// every 0 0$1 trigger leninSpotted do
20862: LD_EXP 14
20866: IFFALSE 20954
20868: GO 20870
20870: DISABLE
// begin wait ( 0 0$10 ) ;
20871: LD_INT 350
20873: PPUSH
20874: CALL_OW 67
// DialogueOn ;
20878: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
20882: LD_EXP 42
20886: PPUSH
20887: LD_STRING DA-Transmission-1
20889: PPUSH
20890: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
20894: LD_EXP 49
20898: PPUSH
20899: LD_STRING DMzw-Transmission-2
20901: PPUSH
20902: CALL_OW 94
// if gaidarKilled then
20906: LD_EXP 7
20910: IFFALSE 20926
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
20912: LD_EXP 49
20916: PPUSH
20917: LD_STRING DMzw-Transmission-3
20919: PPUSH
20920: CALL_OW 94
20924: GO 20938
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
20926: LD_EXP 49
20930: PPUSH
20931: LD_STRING DMzw-Transmission-a-3
20933: PPUSH
20934: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
20938: LD_EXP 30
20942: PPUSH
20943: LD_STRING DH-Transmission-4
20945: PPUSH
20946: CALL_OW 88
// DialogueOff ;
20950: CALL_OW 7
// end ;
20954: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
20955: LD_INT 22
20957: PUSH
20958: LD_INT 3
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 25
20967: PUSH
20968: LD_INT 9
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 101
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: LIST
20989: PPUSH
20990: CALL_OW 69
20994: PUSH
20995: LD_EXP 30
20999: PPUSH
21000: CALL_OW 302
21004: AND
21005: IFFALSE 21070
21007: GO 21009
21009: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
21010: LD_INT 22
21012: PUSH
21013: LD_INT 3
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 25
21022: PUSH
21023: LD_INT 9
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 101
21032: PUSH
21033: LD_INT 2
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: LIST
21044: PPUSH
21045: CALL_OW 69
21049: PUSH
21050: LD_INT 1
21052: ARRAY
21053: PPUSH
21054: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
21058: LD_EXP 30
21062: PPUSH
21063: LD_STRING DH-Rubazooka-1
21065: PPUSH
21066: CALL_OW 88
// end ;
21070: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
21071: LD_INT 19
21073: PPUSH
21074: LD_INT 22
21076: PUSH
21077: LD_INT 3
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PPUSH
21084: CALL_OW 70
21088: PUSH
21089: LD_EXP 28
21093: AND
21094: IFFALSE 21145
21096: GO 21098
21098: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21099: LD_INT 19
21101: PPUSH
21102: LD_INT 22
21104: PUSH
21105: LD_INT 3
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PPUSH
21112: CALL_OW 70
21116: PPUSH
21117: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
21121: LD_EXP 30
21125: PPUSH
21126: LD_STRING DH-Ruattfirst-1
21128: PPUSH
21129: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
21133: LD_EXP 30
21137: PPUSH
21138: LD_STRING DH-Ruattfirst-2
21140: PPUSH
21141: CALL_OW 88
// end ;
21145: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
21146: LD_INT 19
21148: PPUSH
21149: LD_INT 22
21151: PUSH
21152: LD_INT 3
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PPUSH
21159: CALL_OW 70
21163: PUSH
21164: LD_EXP 28
21168: NOT
21169: AND
21170: IFFALSE 21209
21172: GO 21174
21174: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
21175: LD_INT 19
21177: PPUSH
21178: LD_INT 22
21180: PUSH
21181: LD_INT 3
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PPUSH
21188: CALL_OW 70
21192: PPUSH
21193: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
21197: LD_EXP 30
21201: PPUSH
21202: LD_STRING DH-Ruattnext-1
21204: PPUSH
21205: CALL_OW 88
// end ;
21209: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do var vehicle , driver , live ;
21210: LD_EXP 44
21214: PPUSH
21215: CALL_OW 274
21219: PPUSH
21220: LD_INT 2
21222: PPUSH
21223: CALL_OW 275
21227: PUSH
21228: LD_INT 31
21230: LESS
21231: PUSH
21232: LD_EXP 31
21236: PPUSH
21237: CALL_OW 302
21241: AND
21242: IFFALSE 21797
21244: GO 21246
21246: DISABLE
21247: LD_INT 0
21249: PPUSH
21250: PPUSH
21251: PPUSH
// begin DialogueOn ;
21252: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
21256: LD_EXP 30
21260: PPUSH
21261: LD_STRING DH-Fuel-1
21263: PPUSH
21264: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
21268: LD_EXP 31
21272: PPUSH
21273: LD_STRING DG-Fuel-2
21275: PPUSH
21276: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
21280: LD_EXP 31
21284: PPUSH
21285: LD_STRING DG-Fuel-3
21287: PPUSH
21288: CALL_OW 88
// DialogueOff ;
21292: CALL_OW 7
// Query ( Oil ) ;
21296: LD_STRING Oil
21298: PPUSH
21299: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
21303: LD_INT 20
21305: PPUSH
21306: LD_INT 1
21308: PPUSH
21309: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
21313: LD_INT 35
21315: PPUSH
21316: CALL_OW 67
// until FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
21320: LD_INT 20
21322: PPUSH
21323: LD_INT 22
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 33
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 2
21345: PUSH
21346: LD_INT 34
21348: PUSH
21349: LD_INT 32
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 34
21358: PUSH
21359: LD_INT 51
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: LIST
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: PPUSH
21376: CALL_OW 70
21380: IFFALSE 21313
// SetAreaMapShow ( oilArea , 0 ) ;
21382: LD_INT 20
21384: PPUSH
21385: LD_INT 0
21387: PPUSH
21388: CALL_OW 424
// vehicle := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) [ 1 ] ;
21392: LD_ADDR_VAR 0 1
21396: PUSH
21397: LD_INT 20
21399: PPUSH
21400: LD_INT 22
21402: PUSH
21403: LD_INT 2
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 33
21412: PUSH
21413: LD_INT 1
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: LD_INT 34
21425: PUSH
21426: LD_INT 32
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 34
21435: PUSH
21436: LD_INT 51
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: PPUSH
21453: CALL_OW 70
21457: PUSH
21458: LD_INT 1
21460: ARRAY
21461: ST_TO_ADDR
// driver := IsDrivenBy ( vehicle ) ;
21462: LD_ADDR_VAR 0 2
21466: PUSH
21467: LD_VAR 0 1
21471: PPUSH
21472: CALL_OW 311
21476: ST_TO_ADDR
// live := GetLives ( vehicle ) ;
21477: LD_ADDR_VAR 0 3
21481: PUSH
21482: LD_VAR 0 1
21486: PPUSH
21487: CALL_OW 256
21491: ST_TO_ADDR
// RemoveUnit ( driver ) ;
21492: LD_VAR 0 2
21496: PPUSH
21497: CALL_OW 64
// RemoveUnit ( vehicle ) ;
21501: LD_VAR 0 1
21505: PPUSH
21506: CALL_OW 64
// wait ( rand ( 4 4$30 , 5 5$30 ) ) ;
21510: LD_INT 9450
21512: PPUSH
21513: LD_INT 11550
21515: PPUSH
21516: CALL_OW 12
21520: PPUSH
21521: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21525: LD_INT 35
21527: PPUSH
21528: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
21532: LD_INT 22
21534: PUSH
21535: LD_INT 3
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 92
21544: PUSH
21545: LD_INT 261
21547: PUSH
21548: LD_INT 71
21550: PUSH
21551: LD_INT 12
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PPUSH
21564: CALL_OW 69
21568: NOT
21569: PUSH
21570: LD_INT 277
21572: PPUSH
21573: LD_INT 80
21575: PPUSH
21576: CALL_OW 428
21580: NOT
21581: AND
21582: IFFALSE 21525
// uc_nation := GetNation ( vehicle ) ;
21584: LD_ADDR_OWVAR 21
21588: PUSH
21589: LD_VAR 0 1
21593: PPUSH
21594: CALL_OW 248
21598: ST_TO_ADDR
// uc_side := 2 ;
21599: LD_ADDR_OWVAR 20
21603: PUSH
21604: LD_INT 2
21606: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( vehicle ) , GetEngine ( vehicle ) , GetControl ( vehicle ) , GetWeapon ( vehicle ) , 66 ) ;
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 265
21616: PPUSH
21617: LD_VAR 0 1
21621: PPUSH
21622: CALL_OW 262
21626: PPUSH
21627: LD_VAR 0 1
21631: PPUSH
21632: CALL_OW 263
21636: PPUSH
21637: LD_VAR 0 1
21641: PPUSH
21642: CALL_OW 264
21646: PPUSH
21647: LD_INT 66
21649: PPUSH
21650: CALL 30222 0 5
// vehicle := CreateVehicle ;
21654: LD_ADDR_VAR 0 1
21658: PUSH
21659: CALL_OW 45
21663: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
21664: LD_VAR 0 1
21668: PPUSH
21669: LD_INT 277
21671: PPUSH
21672: LD_INT 80
21674: PPUSH
21675: LD_INT 4
21677: PPUSH
21678: LD_INT 0
21680: PPUSH
21681: CALL 64796 0 5
// PlaceHumanInUnit ( driver , vehicle ) ;
21685: LD_VAR 0 2
21689: PPUSH
21690: LD_VAR 0 1
21694: PPUSH
21695: CALL_OW 52
// SetLives ( vehicle , live ) ;
21699: LD_VAR 0 1
21703: PPUSH
21704: LD_VAR 0 3
21708: PPUSH
21709: CALL_OW 234
// if Prob ( [ 70 , 60 , 50 , 40 ] [ Difficulty ] ) then
21713: LD_INT 70
21715: PUSH
21716: LD_INT 60
21718: PUSH
21719: LD_INT 50
21721: PUSH
21722: LD_INT 40
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: PUSH
21731: LD_OWVAR 67
21735: ARRAY
21736: PPUSH
21737: CALL_OW 13
21741: IFFALSE 21760
// SetCargo ( vehicle , mat_oil , 100 ) else
21743: LD_VAR 0 1
21747: PPUSH
21748: LD_INT 2
21750: PPUSH
21751: LD_INT 100
21753: PPUSH
21754: CALL_OW 290
21758: GO 21782
// if live > 333 then
21760: LD_VAR 0 3
21764: PUSH
21765: LD_INT 333
21767: GREATER
21768: IFFALSE 21782
// SetLives ( vehicle , 333 ) ;
21770: LD_VAR 0 1
21774: PPUSH
21775: LD_INT 333
21777: PPUSH
21778: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
21782: LD_VAR 0 1
21786: PPUSH
21787: LD_INT 250
21789: PPUSH
21790: LD_INT 119
21792: PPUSH
21793: CALL_OW 111
// end ;
21797: PPOPN 3
21799: END
// every 0 0$1 trigger leninSpotted and omarAttack do
21800: LD_EXP 14
21804: PUSH
21805: LD_EXP 23
21809: AND
21810: IFFALSE 22110
21812: GO 21814
21814: DISABLE
// begin wait ( 0 0$45 ) ;
21815: LD_INT 1575
21817: PPUSH
21818: CALL_OW 67
// DialogueOn ;
21822: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
21826: LD_EXP 38
21830: PPUSH
21831: LD_STRING DShar-End-1
21833: PPUSH
21834: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
21838: LD_EXP 30
21842: PPUSH
21843: LD_STRING DH-End-2
21845: PPUSH
21846: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
21850: LD_EXP 38
21854: PPUSH
21855: LD_STRING DShar-End-3
21857: PPUSH
21858: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
21862: LD_EXP 30
21866: PPUSH
21867: LD_STRING DH-End-4
21869: PPUSH
21870: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
21874: LD_EXP 38
21878: PPUSH
21879: LD_STRING DShar-End-5
21881: PPUSH
21882: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
21886: LD_EXP 38
21890: PPUSH
21891: LD_STRING DShar-End-6
21893: PPUSH
21894: CALL_OW 94
// dwait ( 0 0$2 ) ;
21898: LD_INT 70
21900: PPUSH
21901: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
21905: LD_EXP 30
21909: PPUSH
21910: LD_STRING DH-End-7
21912: PPUSH
21913: CALL_OW 88
// DialogueOff ;
21917: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
21921: LD_STRING M6
21923: PPUSH
21924: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
21928: LD_INT 17
21930: PPUSH
21931: LD_INT 1
21933: PPUSH
21934: CALL_OW 424
// escapeAllowed := true ;
21938: LD_ADDR_EXP 24
21942: PUSH
21943: LD_INT 1
21945: ST_TO_ADDR
// wait ( 0 0$2 ) ;
21946: LD_INT 70
21948: PPUSH
21949: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
21953: LD_EXP 41
21957: PPUSH
21958: LD_STRING DKs-End-8
21960: PPUSH
21961: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
21965: LD_EXP 35
21969: PPUSH
21970: LD_STRING DK-End-10
21972: PPUSH
21973: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
21977: LD_EXP 41
21981: PPUSH
21982: LD_STRING DKs-End-9
21984: PPUSH
21985: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
21989: LD_EXP 37
21993: PPUSH
21994: LD_STRING DMar-End-11
21996: PPUSH
21997: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
22001: LD_STRING 05_DrugsTested
22003: PPUSH
22004: LD_EXP 1
22008: PPUSH
22009: CALL_OW 30
22013: IFFALSE 22027
// Say ( Mike , DM-End-12 ) ;
22015: LD_EXP 32
22019: PPUSH
22020: LD_STRING DM-End-12
22022: PPUSH
22023: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
22027: LD_EXP 39
22031: PPUSH
22032: LD_STRING DO-End-13
22034: PPUSH
22035: CALL_OW 88
// if IsOk ( Sophia ) then
22039: LD_EXP 36
22043: PPUSH
22044: CALL_OW 302
22048: IFFALSE 22074
// begin Say ( Sophia , DS-End-15 ) ;
22050: LD_EXP 36
22054: PPUSH
22055: LD_STRING DS-End-15
22057: PPUSH
22058: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
22062: LD_EXP 35
22066: PPUSH
22067: LD_STRING DK-End-16
22069: PPUSH
22070: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
22074: LD_EXP 31
22078: PPUSH
22079: LD_STRING DG-End-17
22081: PPUSH
22082: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
22086: LD_EXP 31
22090: PPUSH
22091: LD_STRING DG-End-18
22093: PPUSH
22094: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
22098: LD_EXP 31
22102: PPUSH
22103: LD_STRING DG-End-19
22105: PPUSH
22106: CALL_OW 88
// end ;
22110: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
22111: LD_EXP 24
22115: IFFALSE 22243
22117: GO 22119
22119: DISABLE
22120: LD_INT 0
22122: PPUSH
22123: PPUSH
// begin enable ;
22124: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
22125: LD_ADDR_OWVAR 47
22129: PUSH
22130: LD_STRING #X106-2
22132: PUSH
22133: LD_EXP 25
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
22142: LD_ADDR_EXP 25
22146: PUSH
22147: LD_EXP 25
22151: PUSH
22152: LD_INT 35
22154: MINUS
22155: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
22156: LD_ADDR_VAR 0 2
22160: PUSH
22161: LD_INT 17
22163: PPUSH
22164: LD_INT 22
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 21
22176: PUSH
22177: LD_INT 1
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 23
22186: PUSH
22187: LD_INT 2
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: LIST
22198: PPUSH
22199: CALL_OW 71
22203: ST_TO_ADDR
// if not outsiders then
22204: LD_VAR 0 2
22208: NOT
22209: IFFALSE 22226
// begin escapeAllowed := false ;
22211: LD_ADDR_EXP 24
22215: PUSH
22216: LD_INT 0
22218: ST_TO_ADDR
// disable ;
22219: DISABLE
// MissionWin ;
22220: CALL 22246 0 0
// exit ;
22224: GO 22243
// end ; if escapeTimer <= 0 0$00 then
22226: LD_EXP 25
22230: PUSH
22231: LD_INT 0
22233: LESSEQUAL
22234: IFFALSE 22243
// YouLost ( TimeOut ) ;
22236: LD_STRING TimeOut
22238: PPUSH
22239: CALL_OW 104
// end ;
22243: PPOPN 2
22245: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
22246: LD_INT 0
22248: PPUSH
22249: PPUSH
22250: PPUSH
22251: PPUSH
22252: PPUSH
// Say ( Heike , DH-End-20 ) ;
22253: LD_EXP 30
22257: PPUSH
22258: LD_STRING DH-End-20
22260: PPUSH
22261: CALL_OW 88
// if rolfDied then
22265: LD_EXP 13
22269: IFFALSE 22284
// AddMedal ( med1 , - 1 ) else
22271: LD_STRING med1
22273: PPUSH
22274: LD_INT 1
22276: NEG
22277: PPUSH
22278: CALL_OW 101
22282: GO 22314
// if not canRolfJoin then
22284: LD_EXP 29
22288: NOT
22289: IFFALSE 22304
// AddMedal ( med1 , - 2 ) else
22291: LD_STRING med1
22293: PPUSH
22294: LD_INT 2
22296: NEG
22297: PPUSH
22298: CALL_OW 101
22302: GO 22314
// AddMedal ( med1 , 1 ) ;
22304: LD_STRING med1
22306: PPUSH
22307: LD_INT 1
22309: PPUSH
22310: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
22314: LD_EXP 22
22318: PUSH
22319: LD_EXP 16
22323: AND
22324: IFFALSE 22338
// AddMedal ( med2 , 1 ) else
22326: LD_STRING med2
22328: PPUSH
22329: LD_INT 1
22331: PPUSH
22332: CALL_OW 101
22336: GO 22387
// if omarHasVehicles then
22338: LD_EXP 22
22342: IFFALSE 22357
// AddMedal ( med2 , - 1 ) else
22344: LD_STRING med2
22346: PPUSH
22347: LD_INT 1
22349: NEG
22350: PPUSH
22351: CALL_OW 101
22355: GO 22387
// if rolfHasVehicles then
22357: LD_EXP 16
22361: IFFALSE 22376
// AddMedal ( med2 , - 2 ) else
22363: LD_STRING med2
22365: PPUSH
22366: LD_INT 2
22368: NEG
22369: PPUSH
22370: CALL_OW 101
22374: GO 22387
// AddMedal ( med2 , - 3 ) ;
22376: LD_STRING med2
22378: PPUSH
22379: LD_INT 3
22381: NEG
22382: PPUSH
22383: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 62 ] [ Difficulty ] and heikeLoseCounter = 0 then
22387: LD_EXP 5
22391: PUSH
22392: LD_INT 30
22394: PUSH
22395: LD_INT 45
22397: PUSH
22398: LD_INT 50
22400: PUSH
22401: LD_INT 62
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: PUSH
22410: LD_OWVAR 67
22414: ARRAY
22415: GREATEREQUAL
22416: PUSH
22417: LD_EXP 26
22421: PUSH
22422: LD_INT 0
22424: EQUAL
22425: AND
22426: IFFALSE 22440
// AddMedal ( med3 , 1 ) else
22428: LD_STRING med3
22430: PPUSH
22431: LD_INT 1
22433: PPUSH
22434: CALL_OW 101
22438: GO 22470
// if heikeLoseCounter then
22440: LD_EXP 26
22444: IFFALSE 22459
// AddMedal ( med3 , - 2 ) else
22446: LD_STRING med3
22448: PPUSH
22449: LD_INT 2
22451: NEG
22452: PPUSH
22453: CALL_OW 101
22457: GO 22470
// AddMedal ( med3 , - 1 ) ;
22459: LD_STRING med3
22461: PPUSH
22462: LD_INT 1
22464: NEG
22465: PPUSH
22466: CALL_OW 101
// GiveMedals ( MAIN ) ;
22470: LD_STRING MAIN
22472: PPUSH
22473: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
22477: LD_INT 22
22479: PUSH
22480: LD_INT 2
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 23
22489: PUSH
22490: LD_INT 2
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 21
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: PPUSH
22512: CALL_OW 69
22516: PPUSH
22517: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
22521: LD_EXP 30
22525: PPUSH
22526: LD_STRING 06_Heike
22528: PPUSH
22529: CALL_OW 38
// if Aviradze then
22533: LD_EXP 42
22537: IFFALSE 22551
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
22539: LD_EXP 42
22543: PPUSH
22544: LD_STRING 06_Aviradze
22546: PPUSH
22547: CALL_OW 38
// if Ibrahim then
22551: LD_EXP 33
22555: IFFALSE 22569
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
22557: LD_EXP 33
22561: PPUSH
22562: LD_STRING 06_Ibrahim
22564: PPUSH
22565: CALL_OW 38
// if Kamil then
22569: LD_EXP 34
22573: IFFALSE 22587
// SaveCharacters ( Kamil , 06_Kamil ) ;
22575: LD_EXP 34
22579: PPUSH
22580: LD_STRING 06_Kamil
22582: PPUSH
22583: CALL_OW 38
// if Sophia then
22587: LD_EXP 36
22591: IFFALSE 22605
// SaveCharacters ( Sophia , 06_Sophia ) ;
22593: LD_EXP 36
22597: PPUSH
22598: LD_STRING 06_Sophia
22600: PPUSH
22601: CALL_OW 38
// if Kaia then
22605: LD_EXP 35
22609: IFFALSE 22623
// SaveCharacters ( Kaia , 06_Kaia ) ;
22611: LD_EXP 35
22615: PPUSH
22616: LD_STRING 06_Kaia
22618: PPUSH
22619: CALL_OW 38
// if Givi then
22623: LD_EXP 31
22627: IFFALSE 22641
// SaveCharacters ( Givi , 06_Givi ) ;
22629: LD_EXP 31
22633: PPUSH
22634: LD_STRING 06_Givi
22636: PPUSH
22637: CALL_OW 38
// if Mike then
22641: LD_EXP 32
22645: IFFALSE 22659
// SaveCharacters ( Mike , 06_Mike ) ;
22647: LD_EXP 32
22651: PPUSH
22652: LD_STRING 06_Mike
22654: PPUSH
22655: CALL_OW 38
// if Markov then
22659: LD_EXP 37
22663: IFFALSE 22677
// SaveCharacters ( Markov , 06_Markov ) ;
22665: LD_EXP 37
22669: PPUSH
22670: LD_STRING 06_Markov
22672: PPUSH
22673: CALL_OW 38
// if Kurt then
22677: LD_EXP 41
22681: IFFALSE 22695
// SaveCharacters ( Kurt , 06_Kurt ) ;
22683: LD_EXP 41
22687: PPUSH
22688: LD_STRING 06_Kurt
22690: PPUSH
22691: CALL_OW 38
// if heikeSecondSquad then
22695: LD_EXP 45
22699: IFFALSE 22713
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
22701: LD_EXP 45
22705: PPUSH
22706: LD_STRING 06_others
22708: PPUSH
22709: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
22713: LD_ADDR_VAR 0 3
22717: PUSH
22718: LD_INT 22
22720: PUSH
22721: LD_INT 2
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 23
22730: PUSH
22731: LD_INT 0
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PPUSH
22742: CALL_OW 69
22746: ST_TO_ADDR
// if tmp then
22747: LD_VAR 0 3
22751: IFFALSE 22765
// SaveCharacters ( tmp , 06_apes ) ;
22753: LD_VAR 0 3
22757: PPUSH
22758: LD_STRING 06_apes
22760: PPUSH
22761: CALL_OW 38
// if Rolf then
22765: LD_EXP 43
22769: IFFALSE 22820
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
22771: LD_EXP 43
22775: PPUSH
22776: LD_STRING 06_Rolf
22778: PPUSH
22779: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
22783: LD_STRING enableBioCharacter(BIO_ROLF)
22785: PPUSH
22786: CALL_OW 559
// if rolfSquad diff Rolf then
22790: LD_EXP 47
22794: PUSH
22795: LD_EXP 43
22799: DIFF
22800: IFFALSE 22820
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
22802: LD_EXP 47
22806: PUSH
22807: LD_EXP 43
22811: DIFF
22812: PPUSH
22813: LD_STRING 06_RolfSquad
22815: PPUSH
22816: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
22820: LD_ADDR_VAR 0 3
22824: PUSH
22825: LD_INT 17
22827: PPUSH
22828: LD_INT 21
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PPUSH
22838: CALL_OW 70
22842: ST_TO_ADDR
// if tmp then
22843: LD_VAR 0 3
22847: IFFALSE 23141
// begin tmp2 := [ ] ;
22849: LD_ADDR_VAR 0 4
22853: PUSH
22854: EMPTY
22855: ST_TO_ADDR
// for i in tmp do
22856: LD_ADDR_VAR 0 2
22860: PUSH
22861: LD_VAR 0 3
22865: PUSH
22866: FOR_IN
22867: IFFALSE 23127
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
22869: LD_VAR 0 2
22873: PPUSH
22874: CALL_OW 264
22878: PUSH
22879: LD_INT 32
22881: PUSH
22882: LD_INT 12
22884: PUSH
22885: LD_INT 51
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: LIST
22892: IN
22893: IFFALSE 23030
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
22895: LD_ADDR_VAR 0 5
22899: PUSH
22900: LD_VAR 0 2
22904: PPUSH
22905: LD_INT 1
22907: PPUSH
22908: CALL_OW 289
22912: PUSH
22913: LD_VAR 0 2
22917: PPUSH
22918: LD_INT 2
22920: PPUSH
22921: CALL_OW 289
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
22930: LD_ADDR_VAR 0 4
22934: PUSH
22935: LD_VAR 0 4
22939: PPUSH
22940: LD_VAR 0 4
22944: PUSH
22945: LD_INT 1
22947: PLUS
22948: PPUSH
22949: LD_VAR 0 2
22953: PPUSH
22954: CALL_OW 265
22958: PUSH
22959: LD_VAR 0 2
22963: PPUSH
22964: CALL_OW 262
22968: PUSH
22969: LD_VAR 0 2
22973: PPUSH
22974: CALL_OW 263
22978: PUSH
22979: LD_VAR 0 2
22983: PPUSH
22984: CALL_OW 264
22988: PUSH
22989: LD_VAR 0 2
22993: PPUSH
22994: CALL_OW 248
22998: PUSH
22999: LD_VAR 0 2
23003: PPUSH
23004: CALL_OW 256
23008: PUSH
23009: LD_VAR 0 5
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: PPUSH
23023: CALL_OW 1
23027: ST_TO_ADDR
// end else
23028: GO 23125
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
23030: LD_ADDR_VAR 0 4
23034: PUSH
23035: LD_VAR 0 4
23039: PPUSH
23040: LD_VAR 0 4
23044: PUSH
23045: LD_INT 1
23047: PLUS
23048: PPUSH
23049: LD_VAR 0 2
23053: PPUSH
23054: CALL_OW 265
23058: PUSH
23059: LD_VAR 0 2
23063: PPUSH
23064: CALL_OW 262
23068: PUSH
23069: LD_VAR 0 2
23073: PPUSH
23074: CALL_OW 263
23078: PUSH
23079: LD_VAR 0 2
23083: PPUSH
23084: CALL_OW 264
23088: PUSH
23089: LD_VAR 0 2
23093: PPUSH
23094: CALL_OW 248
23098: PUSH
23099: LD_VAR 0 2
23103: PPUSH
23104: CALL_OW 256
23108: PUSH
23109: EMPTY
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: PPUSH
23120: CALL_OW 1
23124: ST_TO_ADDR
23125: GO 22866
23127: POP
23128: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
23129: LD_VAR 0 4
23133: PPUSH
23134: LD_STRING 06_Vehicles
23136: PPUSH
23137: CALL_OW 39
// end ; YouWin ;
23141: CALL_OW 103
// end ; end_of_file
23145: LD_VAR 0 1
23149: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
23150: LD_INT 0
23152: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
23153: LD_VAR 0 1
23157: PPUSH
23158: LD_VAR 0 2
23162: PPUSH
23163: CALL 82507 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
23167: LD_VAR 0 1
23171: PPUSH
23172: CALL_OW 255
23176: PUSH
23177: LD_INT 2
23179: EQUAL
23180: PUSH
23181: LD_OWVAR 52
23185: AND
23186: PUSH
23187: LD_VAR 0 1
23191: PPUSH
23192: CALL_OW 263
23196: PUSH
23197: LD_INT 1
23199: EQUAL
23200: AND
23201: IFFALSE 23256
// begin driver := IsDrivenBy ( vehicle ) ;
23203: LD_ADDR_VAR 0 3
23207: PUSH
23208: LD_VAR 0 1
23212: PPUSH
23213: CALL_OW 311
23217: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
23218: LD_VAR 0 1
23222: PPUSH
23223: LD_INT 211
23225: PPUSH
23226: LD_INT 101
23228: PPUSH
23229: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23233: LD_VAR 0 3
23237: PPUSH
23238: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23242: LD_VAR 0 3
23246: PPUSH
23247: LD_VAR 0 2
23251: PPUSH
23252: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
23256: LD_VAR 0 1
23260: PPUSH
23261: CALL_OW 255
23265: PUSH
23266: LD_INT 3
23268: EQUAL
23269: IFFALSE 23300
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
23271: LD_ADDR_EXP 56
23275: PUSH
23276: LD_EXP 56
23280: PPUSH
23281: LD_EXP 56
23285: PUSH
23286: LD_INT 1
23288: PLUS
23289: PPUSH
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 1
23299: ST_TO_ADDR
// end ;
23300: PPOPN 3
23302: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
23303: LD_VAR 0 1
23307: PPUSH
23308: CALL_OW 255
23312: PUSH
23313: LD_INT 8
23315: EQUAL
23316: PUSH
23317: LD_VAR 0 1
23321: PPUSH
23322: CALL_OW 266
23326: PUSH
23327: LD_INT 4
23329: EQUAL
23330: AND
23331: IFFALSE 23342
// ComUpgrade ( b ) ;
23333: LD_VAR 0 1
23337: PPUSH
23338: CALL_OW 146
// end ;
23342: PPOPN 1
23344: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL 82387 0 1
// if un = Heike then
23354: LD_VAR 0 1
23358: PUSH
23359: LD_EXP 30
23363: EQUAL
23364: IFFALSE 23373
// YouLost ( Heike ) ;
23366: LD_STRING Heike
23368: PPUSH
23369: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
23373: LD_VAR 0 1
23377: PUSH
23378: LD_INT 22
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 23
23390: PUSH
23391: LD_INT 2
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PPUSH
23402: CALL_OW 69
23406: IN
23407: IFFALSE 23423
// heikeLoseCounter := heikeLoseCounter + 1 ;
23409: LD_ADDR_EXP 26
23413: PUSH
23414: LD_EXP 26
23418: PUSH
23419: LD_INT 1
23421: PLUS
23422: ST_TO_ADDR
// if un = arDepot then
23423: LD_VAR 0 1
23427: PUSH
23428: LD_EXP 44
23432: EQUAL
23433: IFFALSE 23442
// YouLost ( Base ) ;
23435: LD_STRING Base
23437: PPUSH
23438: CALL_OW 104
// if un = Rolf then
23442: LD_VAR 0 1
23446: PUSH
23447: LD_EXP 43
23451: EQUAL
23452: IFFALSE 23462
// rolfDied := true ;
23454: LD_ADDR_EXP 13
23458: PUSH
23459: LD_INT 1
23461: ST_TO_ADDR
// if un in rolfSquad then
23462: LD_VAR 0 1
23466: PUSH
23467: LD_EXP 47
23471: IN
23472: IFFALSE 23490
// rolfSquad := rolfSquad diff un ;
23474: LD_ADDR_EXP 47
23478: PUSH
23479: LD_EXP 47
23483: PUSH
23484: LD_VAR 0 1
23488: DIFF
23489: ST_TO_ADDR
// if un in omarSquad then
23490: LD_VAR 0 1
23494: PUSH
23495: LD_EXP 48
23499: IN
23500: IFFALSE 23518
// omarSquad := omarSquad diff un ;
23502: LD_ADDR_EXP 48
23506: PUSH
23507: LD_EXP 48
23511: PUSH
23512: LD_VAR 0 1
23516: DIFF
23517: ST_TO_ADDR
// if GetSide ( un ) = 3 then
23518: LD_VAR 0 1
23522: PPUSH
23523: CALL_OW 255
23527: PUSH
23528: LD_INT 3
23530: EQUAL
23531: IFFALSE 23547
// ruLoseCounter := ruLoseCounter + 1 ;
23533: LD_ADDR_EXP 5
23537: PUSH
23538: LD_EXP 5
23542: PUSH
23543: LD_INT 1
23545: PLUS
23546: ST_TO_ADDR
// if un in ruAttackers then
23547: LD_VAR 0 1
23551: PUSH
23552: LD_EXP 57
23556: IN
23557: IFFALSE 23575
// ruAttackers := ruAttackers diff un ;
23559: LD_ADDR_EXP 57
23563: PUSH
23564: LD_EXP 57
23568: PUSH
23569: LD_VAR 0 1
23573: DIFF
23574: ST_TO_ADDR
// end ;
23575: PPOPN 1
23577: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
23578: LD_INT 0
23580: PPUSH
23581: PPUSH
23582: PPUSH
23583: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
23584: LD_VAR 0 1
23588: PPUSH
23589: CALL_OW 255
23593: PUSH
23594: LD_INT 3
23596: EQUAL
23597: PUSH
23598: LD_VAR 0 1
23602: PUSH
23603: LD_EXP 57
23607: IN
23608: NOT
23609: AND
23610: IFFALSE 24106
// begin if not IsInArea ( un , ruMainBase ) then
23612: LD_VAR 0 1
23616: PPUSH
23617: LD_INT 10
23619: PPUSH
23620: CALL_OW 308
23624: NOT
23625: IFFALSE 23639
// ComMoveToArea ( un , ruMainBase ) ;
23627: LD_VAR 0 1
23631: PPUSH
23632: LD_INT 10
23634: PPUSH
23635: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
23639: LD_INT 35
23641: PPUSH
23642: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
23646: LD_VAR 0 1
23650: PPUSH
23651: CALL_OW 302
23655: NOT
23656: PUSH
23657: LD_VAR 0 1
23661: PPUSH
23662: LD_INT 10
23664: PPUSH
23665: CALL_OW 308
23669: OR
23670: IFFALSE 23639
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
23672: LD_ADDR_EXP 55
23676: PUSH
23677: LD_EXP 55
23681: PPUSH
23682: LD_EXP 55
23686: PUSH
23687: LD_INT 1
23689: PLUS
23690: PPUSH
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL_OW 1
23700: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
23701: LD_ADDR_VAR 0 8
23705: PUSH
23706: LD_INT 72
23708: PUSH
23709: LD_INT 12
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: ST_TO_ADDR
// if tmp then
23716: LD_VAR 0 8
23720: IFFALSE 23835
// for i in tmp do
23722: LD_ADDR_VAR 0 5
23726: PUSH
23727: LD_VAR 0 8
23731: PUSH
23732: FOR_IN
23733: IFFALSE 23833
// if UnitsInside ( i ) < 6 then
23735: LD_VAR 0 5
23739: PPUSH
23740: CALL_OW 313
23744: PUSH
23745: LD_INT 6
23747: LESS
23748: IFFALSE 23831
// begin AddComEnterUnit ( un , i ) ;
23750: LD_VAR 0 1
23754: PPUSH
23755: LD_VAR 0 5
23759: PPUSH
23760: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
23764: LD_VAR 0 8
23768: PPUSH
23769: LD_INT 22
23771: PUSH
23772: LD_INT 23
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: PPUSH
23782: LD_INT 2
23784: PPUSH
23785: CALL_OW 12
23789: ARRAY
23790: PPUSH
23791: LD_INT 1
23793: PPUSH
23794: LD_INT 1
23796: PPUSH
23797: LD_INT 44
23799: PUSH
23800: LD_INT 46
23802: PUSH
23803: LD_INT 47
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 1
23813: PPUSH
23814: LD_INT 3
23816: PPUSH
23817: CALL_OW 12
23821: ARRAY
23822: PPUSH
23823: CALL_OW 185
// exit ;
23827: POP
23828: POP
23829: GO 24106
// end ;
23831: GO 23732
23833: POP
23834: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
23835: LD_ADDR_VAR 0 8
23839: PUSH
23840: LD_INT 10
23842: PPUSH
23843: LD_INT 22
23845: PUSH
23846: LD_INT 3
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 50
23855: PUSH
23856: EMPTY
23857: LIST
23858: PUSH
23859: LD_INT 2
23861: PUSH
23862: LD_INT 30
23864: PUSH
23865: LD_INT 4
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 30
23874: PUSH
23875: LD_INT 5
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 30
23884: PUSH
23885: LD_INT 32
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 30
23894: PUSH
23895: LD_INT 31
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: LIST
23913: PPUSH
23914: CALL_OW 70
23918: ST_TO_ADDR
// if not tmp then
23919: LD_VAR 0 8
23923: NOT
23924: IFFALSE 23943
// begin ComMoveXY ( un , 83 , 133 ) ;
23926: LD_VAR 0 1
23930: PPUSH
23931: LD_INT 83
23933: PPUSH
23934: LD_INT 133
23936: PPUSH
23937: CALL_OW 111
// exit ;
23941: GO 24106
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
23943: LD_ADDR_VAR 0 6
23947: PUSH
23948: LD_VAR 0 1
23952: PPUSH
23953: LD_VAR 0 8
23957: PPUSH
23958: LD_INT 1
23960: PPUSH
23961: LD_INT 1
23963: PPUSH
23964: CALL 30779 0 4
23968: PUSH
23969: FOR_IN
23970: IFFALSE 24104
// begin case GetBType ( b ) of b_armoury , b_barracks :
23972: LD_VAR 0 6
23976: PPUSH
23977: CALL_OW 266
23981: PUSH
23982: LD_INT 4
23984: DOUBLE
23985: EQUAL
23986: IFTRUE 23996
23988: LD_INT 5
23990: DOUBLE
23991: EQUAL
23992: IFTRUE 23996
23994: GO 24007
23996: POP
// p := 6 ; b_breastwork , b_bunker :
23997: LD_ADDR_VAR 0 7
24001: PUSH
24002: LD_INT 6
24004: ST_TO_ADDR
24005: GO 24033
24007: LD_INT 31
24009: DOUBLE
24010: EQUAL
24011: IFTRUE 24021
24013: LD_INT 32
24015: DOUBLE
24016: EQUAL
24017: IFTRUE 24021
24019: GO 24032
24021: POP
// p := 1 ; end ;
24022: LD_ADDR_VAR 0 7
24026: PUSH
24027: LD_INT 1
24029: ST_TO_ADDR
24030: GO 24033
24032: POP
// if UnitsInside ( b ) < p then
24033: LD_VAR 0 6
24037: PPUSH
24038: CALL_OW 313
24042: PUSH
24043: LD_VAR 0 7
24047: LESS
24048: IFFALSE 24102
// begin ComEnterUnit ( un , b ) ;
24050: LD_VAR 0 1
24054: PPUSH
24055: LD_VAR 0 6
24059: PPUSH
24060: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
24064: LD_VAR 0 6
24068: PPUSH
24069: CALL_OW 266
24073: PUSH
24074: LD_INT 4
24076: PUSH
24077: LD_INT 5
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: IN
24084: IFFALSE 24098
// AddComChangeProfession ( un , class_soldier ) ;
24086: LD_VAR 0 1
24090: PPUSH
24091: LD_INT 1
24093: PPUSH
24094: CALL_OW 183
// exit ;
24098: POP
24099: POP
24100: GO 24106
// end ; end ;
24102: GO 23969
24104: POP
24105: POP
// end ; end ;
24106: PPOPN 8
24108: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
24109: LD_INT 0
24111: PPUSH
24112: PPUSH
24113: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
24114: LD_VAR 0 2
24118: PPUSH
24119: CALL_OW 255
24123: PUSH
24124: LD_INT 3
24126: EQUAL
24127: PUSH
24128: LD_VAR 0 2
24132: PPUSH
24133: CALL_OW 257
24137: PUSH
24138: LD_INT 1
24140: EQUAL
24141: AND
24142: PUSH
24143: LD_VAR 0 2
24147: PUSH
24148: LD_EXP 55
24152: IN
24153: NOT
24154: AND
24155: IFFALSE 24468
// begin ComMoveToArea ( un , ruMainBase ) ;
24157: LD_VAR 0 2
24161: PPUSH
24162: LD_INT 10
24164: PPUSH
24165: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
24169: LD_INT 35
24171: PPUSH
24172: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
24176: LD_VAR 0 2
24180: PPUSH
24181: CALL_OW 302
24185: NOT
24186: PUSH
24187: LD_VAR 0 2
24191: PPUSH
24192: LD_INT 10
24194: PPUSH
24195: CALL_OW 308
24199: OR
24200: IFFALSE 24169
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
24202: LD_ADDR_EXP 55
24206: PUSH
24207: LD_EXP 55
24211: PPUSH
24212: LD_EXP 55
24216: PUSH
24217: LD_INT 1
24219: PLUS
24220: PPUSH
24221: LD_VAR 0 2
24225: PPUSH
24226: CALL_OW 1
24230: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24231: LD_ADDR_VAR 0 4
24235: PUSH
24236: LD_INT 10
24238: PPUSH
24239: LD_INT 22
24241: PUSH
24242: LD_INT 3
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 50
24251: PUSH
24252: EMPTY
24253: LIST
24254: PUSH
24255: LD_INT 2
24257: PUSH
24258: LD_INT 30
24260: PUSH
24261: LD_INT 4
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 30
24270: PUSH
24271: LD_INT 5
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 30
24280: PUSH
24281: LD_INT 32
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 30
24290: PUSH
24291: LD_INT 31
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: PPUSH
24310: CALL_OW 70
24314: ST_TO_ADDR
// if not tmp then
24315: LD_VAR 0 4
24319: NOT
24320: IFFALSE 24339
// begin ComMoveXY ( un , 83 , 133 ) ;
24322: LD_VAR 0 2
24326: PPUSH
24327: LD_INT 83
24329: PPUSH
24330: LD_INT 133
24332: PPUSH
24333: CALL_OW 111
// exit ;
24337: GO 24717
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24339: LD_ADDR_VAR 0 5
24343: PUSH
24344: LD_VAR 0 2
24348: PPUSH
24349: LD_VAR 0 4
24353: PPUSH
24354: LD_INT 1
24356: PPUSH
24357: LD_INT 1
24359: PPUSH
24360: CALL 30779 0 4
24364: PUSH
24365: FOR_IN
24366: IFFALSE 24466
// begin case GetBType ( b ) of b_armoury , b_barracks :
24368: LD_VAR 0 5
24372: PPUSH
24373: CALL_OW 266
24377: PUSH
24378: LD_INT 4
24380: DOUBLE
24381: EQUAL
24382: IFTRUE 24392
24384: LD_INT 5
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24403
24392: POP
// p := 6 ; b_breastwork , b_bunker :
24393: LD_ADDR_VAR 0 3
24397: PUSH
24398: LD_INT 6
24400: ST_TO_ADDR
24401: GO 24429
24403: LD_INT 31
24405: DOUBLE
24406: EQUAL
24407: IFTRUE 24417
24409: LD_INT 32
24411: DOUBLE
24412: EQUAL
24413: IFTRUE 24417
24415: GO 24428
24417: POP
// p := 1 ; end ;
24418: LD_ADDR_VAR 0 3
24422: PUSH
24423: LD_INT 1
24425: ST_TO_ADDR
24426: GO 24429
24428: POP
// if UnitsInside ( b ) < p then
24429: LD_VAR 0 5
24433: PPUSH
24434: CALL_OW 313
24438: PUSH
24439: LD_VAR 0 3
24443: LESS
24444: IFFALSE 24464
// begin ComEnterUnit ( un , b ) ;
24446: LD_VAR 0 2
24450: PPUSH
24451: LD_VAR 0 5
24455: PPUSH
24456: CALL_OW 120
// exit ;
24460: POP
24461: POP
24462: GO 24717
// end ; end ;
24464: GO 24365
24466: POP
24467: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
24468: LD_VAR 0 2
24472: PUSH
24473: LD_EXP 55
24477: IN
24478: PUSH
24479: LD_VAR 0 2
24483: PPUSH
24484: CALL_OW 257
24488: PUSH
24489: LD_INT 1
24491: EQUAL
24492: AND
24493: IFFALSE 24717
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24495: LD_ADDR_VAR 0 4
24499: PUSH
24500: LD_INT 10
24502: PPUSH
24503: LD_INT 22
24505: PUSH
24506: LD_INT 3
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 50
24515: PUSH
24516: EMPTY
24517: LIST
24518: PUSH
24519: LD_INT 2
24521: PUSH
24522: LD_INT 30
24524: PUSH
24525: LD_INT 4
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 30
24534: PUSH
24535: LD_INT 5
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 30
24544: PUSH
24545: LD_INT 32
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 30
24554: PUSH
24555: LD_INT 31
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: PPUSH
24574: CALL_OW 70
24578: ST_TO_ADDR
// if not tmp then
24579: LD_VAR 0 4
24583: NOT
24584: IFFALSE 24588
// exit ;
24586: GO 24717
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
24588: LD_ADDR_VAR 0 5
24592: PUSH
24593: LD_VAR 0 2
24597: PPUSH
24598: LD_VAR 0 4
24602: PPUSH
24603: LD_INT 1
24605: PPUSH
24606: LD_INT 1
24608: PPUSH
24609: CALL 30779 0 4
24613: PUSH
24614: FOR_IN
24615: IFFALSE 24715
// begin case GetBType ( b ) of b_armoury , b_barracks :
24617: LD_VAR 0 5
24621: PPUSH
24622: CALL_OW 266
24626: PUSH
24627: LD_INT 4
24629: DOUBLE
24630: EQUAL
24631: IFTRUE 24641
24633: LD_INT 5
24635: DOUBLE
24636: EQUAL
24637: IFTRUE 24641
24639: GO 24652
24641: POP
// p := 6 ; b_breastwork , b_bunker :
24642: LD_ADDR_VAR 0 3
24646: PUSH
24647: LD_INT 6
24649: ST_TO_ADDR
24650: GO 24678
24652: LD_INT 31
24654: DOUBLE
24655: EQUAL
24656: IFTRUE 24666
24658: LD_INT 32
24660: DOUBLE
24661: EQUAL
24662: IFTRUE 24666
24664: GO 24677
24666: POP
// p := 1 ; end ;
24667: LD_ADDR_VAR 0 3
24671: PUSH
24672: LD_INT 1
24674: ST_TO_ADDR
24675: GO 24678
24677: POP
// if UnitsInside ( b ) < p then
24678: LD_VAR 0 5
24682: PPUSH
24683: CALL_OW 313
24687: PUSH
24688: LD_VAR 0 3
24692: LESS
24693: IFFALSE 24713
// begin ComEnterUnit ( un , b ) ;
24695: LD_VAR 0 2
24699: PPUSH
24700: LD_VAR 0 5
24704: PPUSH
24705: CALL_OW 120
// exit ;
24709: POP
24710: POP
24711: GO 24717
// end ; end ;
24713: GO 24614
24715: POP
24716: POP
// end ; end ;
24717: PPOPN 5
24719: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
24720: LD_VAR 0 1
24724: PUSH
24725: LD_INT 2
24727: EQUAL
24728: PUSH
24729: LD_VAR 0 2
24733: PUSH
24734: LD_INT 5
24736: PUSH
24737: LD_INT 8
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: IN
24744: AND
24745: IFFALSE 24754
// YouLost ( FriendlyFire ) ;
24747: LD_STRING FriendlyFire
24749: PPUSH
24750: CALL_OW 104
// end ;
24754: PPOPN 2
24756: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
24757: LD_VAR 0 1
24761: PPUSH
24762: CALL_OW 255
24766: PUSH
24767: LD_INT 8
24769: EQUAL
24770: PUSH
24771: LD_VAR 0 1
24775: PPUSH
24776: CALL_OW 266
24780: PUSH
24781: LD_INT 5
24783: EQUAL
24784: AND
24785: IFFALSE 24799
// SetClass ( unit , class_mortar ) ;
24787: LD_VAR 0 2
24791: PPUSH
24792: LD_INT 8
24794: PPUSH
24795: CALL_OW 336
// end ; end_of_file
24799: PPOPN 2
24801: END
// every 0 0$50 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 , 150 ] [ Difficulty ] do
24802: LD_INT 6
24804: PPUSH
24805: LD_INT 1
24807: PPUSH
24808: CALL_OW 287
24812: PUSH
24813: LD_INT 300
24815: PUSH
24816: LD_INT 250
24818: PUSH
24819: LD_INT 200
24821: PUSH
24822: LD_INT 150
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: PUSH
24831: LD_OWVAR 67
24835: ARRAY
24836: LESS
24837: IFFALSE 24864
24839: GO 24841
24841: DISABLE
// begin enable ;
24842: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
24843: LD_INT 1
24845: PPUSH
24846: LD_INT 5
24848: PPUSH
24849: CALL_OW 12
24853: PPUSH
24854: LD_INT 6
24856: PPUSH
24857: LD_INT 1
24859: PPUSH
24860: CALL_OW 55
// end ; end_of_file
24864: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
24865: LD_EXP 18
24869: PUSH
24870: LD_EXP 20
24874: AND
24875: PUSH
24876: LD_EXP 17
24880: PUSH
24881: LD_EXP 19
24885: AND
24886: OR
24887: IFFALSE 25206
24889: GO 24891
24891: DISABLE
// begin enable ;
24892: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
24893: LD_EXP 18
24897: PUSH
24898: LD_EXP 20
24902: AND
24903: PUSH
24904: LD_EXP 17
24908: PUSH
24909: LD_EXP 19
24913: AND
24914: AND
24915: IFFALSE 25052
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
24917: LD_ADDR_OWVAR 47
24921: PUSH
24922: LD_STRING #X106-1a
24924: PUSH
24925: LD_EXP 21
24929: PUSH
24930: LD_INT 16
24932: PPUSH
24933: LD_INT 22
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 21
24945: PUSH
24946: LD_INT 2
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 33
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 58
24965: PUSH
24966: EMPTY
24967: LIST
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: PPUSH
24975: CALL_OW 70
24979: MINUS
24980: PPUSH
24981: CALL 64842 0 1
24985: PUSH
24986: LD_STRING #X106-3a
24988: PUSH
24989: LD_EXP 20
24993: PUSH
24994: LD_STRING #X106-1
24996: PUSH
24997: LD_EXP 47
25001: PUSH
25002: LD_INT 0
25004: PLUS
25005: PUSH
25006: LD_EXP 47
25010: PPUSH
25011: LD_INT 55
25013: PUSH
25014: EMPTY
25015: LIST
25016: PPUSH
25017: CALL_OW 72
25021: PUSH
25022: LD_INT 0
25024: PLUS
25025: MINUS
25026: PPUSH
25027: CALL 64842 0 1
25031: PUSH
25032: LD_STRING #X106-3
25034: PUSH
25035: LD_EXP 19
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: ST_TO_ADDR
// end else
25050: GO 25206
// if omarWantVehicles and omarWaitingForVehiclesTimer then
25052: LD_EXP 18
25056: PUSH
25057: LD_EXP 20
25061: AND
25062: IFFALSE 25149
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
25064: LD_ADDR_OWVAR 47
25068: PUSH
25069: LD_STRING #X106-1a
25071: PUSH
25072: LD_EXP 21
25076: PUSH
25077: LD_INT 16
25079: PPUSH
25080: LD_INT 22
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 21
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 33
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 58
25112: PUSH
25113: EMPTY
25114: LIST
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: PPUSH
25122: CALL_OW 70
25126: MINUS
25127: PPUSH
25128: CALL 64842 0 1
25132: PUSH
25133: LD_STRING #X106-3a
25135: PUSH
25136: LD_EXP 20
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: ST_TO_ADDR
// end else
25147: GO 25206
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25149: LD_ADDR_OWVAR 47
25153: PUSH
25154: LD_STRING #X106-1
25156: PUSH
25157: LD_EXP 47
25161: PUSH
25162: LD_INT 0
25164: PLUS
25165: PUSH
25166: LD_EXP 47
25170: PPUSH
25171: LD_INT 55
25173: PUSH
25174: EMPTY
25175: LIST
25176: PPUSH
25177: CALL_OW 72
25181: PUSH
25182: LD_INT 0
25184: PLUS
25185: MINUS
25186: PPUSH
25187: CALL 64842 0 1
25191: PUSH
25192: LD_STRING #X106-3
25194: PUSH
25195: LD_EXP 19
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: ST_TO_ADDR
// end ; end ; end_of_file
25206: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25207: LD_INT 0
25209: PPUSH
25210: PPUSH
// if exist_mode then
25211: LD_VAR 0 2
25215: IFFALSE 25240
// unit := CreateCharacter ( prefix & ident ) else
25217: LD_ADDR_VAR 0 5
25221: PUSH
25222: LD_VAR 0 3
25226: PUSH
25227: LD_VAR 0 1
25231: STR
25232: PPUSH
25233: CALL_OW 34
25237: ST_TO_ADDR
25238: GO 25255
// unit := NewCharacter ( ident ) ;
25240: LD_ADDR_VAR 0 5
25244: PUSH
25245: LD_VAR 0 1
25249: PPUSH
25250: CALL_OW 25
25254: ST_TO_ADDR
// result := unit ;
25255: LD_ADDR_VAR 0 4
25259: PUSH
25260: LD_VAR 0 5
25264: ST_TO_ADDR
// end ;
25265: LD_VAR 0 4
25269: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25270: LD_INT 0
25272: PPUSH
25273: PPUSH
// if not side or not nation then
25274: LD_VAR 0 1
25278: NOT
25279: PUSH
25280: LD_VAR 0 2
25284: NOT
25285: OR
25286: IFFALSE 25290
// exit ;
25288: GO 26058
// case nation of nation_american :
25290: LD_VAR 0 2
25294: PUSH
25295: LD_INT 1
25297: DOUBLE
25298: EQUAL
25299: IFTRUE 25303
25301: GO 25517
25303: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25304: LD_ADDR_VAR 0 4
25308: PUSH
25309: LD_INT 35
25311: PUSH
25312: LD_INT 45
25314: PUSH
25315: LD_INT 46
25317: PUSH
25318: LD_INT 47
25320: PUSH
25321: LD_INT 82
25323: PUSH
25324: LD_INT 83
25326: PUSH
25327: LD_INT 84
25329: PUSH
25330: LD_INT 85
25332: PUSH
25333: LD_INT 86
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: LD_INT 2
25341: PUSH
25342: LD_INT 6
25344: PUSH
25345: LD_INT 15
25347: PUSH
25348: LD_INT 16
25350: PUSH
25351: LD_INT 7
25353: PUSH
25354: LD_INT 12
25356: PUSH
25357: LD_INT 13
25359: PUSH
25360: LD_INT 10
25362: PUSH
25363: LD_INT 14
25365: PUSH
25366: LD_INT 20
25368: PUSH
25369: LD_INT 21
25371: PUSH
25372: LD_INT 22
25374: PUSH
25375: LD_INT 25
25377: PUSH
25378: LD_INT 32
25380: PUSH
25381: LD_INT 27
25383: PUSH
25384: LD_INT 36
25386: PUSH
25387: LD_INT 69
25389: PUSH
25390: LD_INT 39
25392: PUSH
25393: LD_INT 34
25395: PUSH
25396: LD_INT 40
25398: PUSH
25399: LD_INT 48
25401: PUSH
25402: LD_INT 49
25404: PUSH
25405: LD_INT 50
25407: PUSH
25408: LD_INT 51
25410: PUSH
25411: LD_INT 52
25413: PUSH
25414: LD_INT 53
25416: PUSH
25417: LD_INT 54
25419: PUSH
25420: LD_INT 55
25422: PUSH
25423: LD_INT 56
25425: PUSH
25426: LD_INT 57
25428: PUSH
25429: LD_INT 58
25431: PUSH
25432: LD_INT 59
25434: PUSH
25435: LD_INT 60
25437: PUSH
25438: LD_INT 61
25440: PUSH
25441: LD_INT 62
25443: PUSH
25444: LD_INT 80
25446: PUSH
25447: LD_INT 82
25449: PUSH
25450: LD_INT 83
25452: PUSH
25453: LD_INT 84
25455: PUSH
25456: LD_INT 85
25458: PUSH
25459: LD_INT 86
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: ST_TO_ADDR
25515: GO 25982
25517: LD_INT 2
25519: DOUBLE
25520: EQUAL
25521: IFTRUE 25525
25523: GO 25751
25525: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25526: LD_ADDR_VAR 0 4
25530: PUSH
25531: LD_INT 35
25533: PUSH
25534: LD_INT 45
25536: PUSH
25537: LD_INT 46
25539: PUSH
25540: LD_INT 47
25542: PUSH
25543: LD_INT 82
25545: PUSH
25546: LD_INT 83
25548: PUSH
25549: LD_INT 84
25551: PUSH
25552: LD_INT 85
25554: PUSH
25555: LD_INT 87
25557: PUSH
25558: LD_INT 70
25560: PUSH
25561: LD_INT 1
25563: PUSH
25564: LD_INT 11
25566: PUSH
25567: LD_INT 3
25569: PUSH
25570: LD_INT 4
25572: PUSH
25573: LD_INT 5
25575: PUSH
25576: LD_INT 6
25578: PUSH
25579: LD_INT 15
25581: PUSH
25582: LD_INT 18
25584: PUSH
25585: LD_INT 7
25587: PUSH
25588: LD_INT 17
25590: PUSH
25591: LD_INT 8
25593: PUSH
25594: LD_INT 20
25596: PUSH
25597: LD_INT 21
25599: PUSH
25600: LD_INT 22
25602: PUSH
25603: LD_INT 72
25605: PUSH
25606: LD_INT 26
25608: PUSH
25609: LD_INT 69
25611: PUSH
25612: LD_INT 39
25614: PUSH
25615: LD_INT 40
25617: PUSH
25618: LD_INT 41
25620: PUSH
25621: LD_INT 42
25623: PUSH
25624: LD_INT 43
25626: PUSH
25627: LD_INT 48
25629: PUSH
25630: LD_INT 49
25632: PUSH
25633: LD_INT 50
25635: PUSH
25636: LD_INT 51
25638: PUSH
25639: LD_INT 52
25641: PUSH
25642: LD_INT 53
25644: PUSH
25645: LD_INT 54
25647: PUSH
25648: LD_INT 55
25650: PUSH
25651: LD_INT 56
25653: PUSH
25654: LD_INT 60
25656: PUSH
25657: LD_INT 61
25659: PUSH
25660: LD_INT 62
25662: PUSH
25663: LD_INT 66
25665: PUSH
25666: LD_INT 67
25668: PUSH
25669: LD_INT 68
25671: PUSH
25672: LD_INT 81
25674: PUSH
25675: LD_INT 82
25677: PUSH
25678: LD_INT 83
25680: PUSH
25681: LD_INT 84
25683: PUSH
25684: LD_INT 85
25686: PUSH
25687: LD_INT 87
25689: PUSH
25690: LD_INT 88
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: ST_TO_ADDR
25749: GO 25982
25751: LD_INT 3
25753: DOUBLE
25754: EQUAL
25755: IFTRUE 25759
25757: GO 25981
25759: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25760: LD_ADDR_VAR 0 4
25764: PUSH
25765: LD_INT 46
25767: PUSH
25768: LD_INT 47
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: LD_INT 2
25776: PUSH
25777: LD_INT 82
25779: PUSH
25780: LD_INT 83
25782: PUSH
25783: LD_INT 84
25785: PUSH
25786: LD_INT 85
25788: PUSH
25789: LD_INT 86
25791: PUSH
25792: LD_INT 11
25794: PUSH
25795: LD_INT 9
25797: PUSH
25798: LD_INT 20
25800: PUSH
25801: LD_INT 19
25803: PUSH
25804: LD_INT 21
25806: PUSH
25807: LD_INT 24
25809: PUSH
25810: LD_INT 22
25812: PUSH
25813: LD_INT 25
25815: PUSH
25816: LD_INT 28
25818: PUSH
25819: LD_INT 29
25821: PUSH
25822: LD_INT 30
25824: PUSH
25825: LD_INT 31
25827: PUSH
25828: LD_INT 37
25830: PUSH
25831: LD_INT 38
25833: PUSH
25834: LD_INT 32
25836: PUSH
25837: LD_INT 27
25839: PUSH
25840: LD_INT 33
25842: PUSH
25843: LD_INT 69
25845: PUSH
25846: LD_INT 39
25848: PUSH
25849: LD_INT 34
25851: PUSH
25852: LD_INT 40
25854: PUSH
25855: LD_INT 71
25857: PUSH
25858: LD_INT 23
25860: PUSH
25861: LD_INT 44
25863: PUSH
25864: LD_INT 48
25866: PUSH
25867: LD_INT 49
25869: PUSH
25870: LD_INT 50
25872: PUSH
25873: LD_INT 51
25875: PUSH
25876: LD_INT 52
25878: PUSH
25879: LD_INT 53
25881: PUSH
25882: LD_INT 54
25884: PUSH
25885: LD_INT 55
25887: PUSH
25888: LD_INT 56
25890: PUSH
25891: LD_INT 57
25893: PUSH
25894: LD_INT 58
25896: PUSH
25897: LD_INT 59
25899: PUSH
25900: LD_INT 63
25902: PUSH
25903: LD_INT 64
25905: PUSH
25906: LD_INT 65
25908: PUSH
25909: LD_INT 82
25911: PUSH
25912: LD_INT 83
25914: PUSH
25915: LD_INT 84
25917: PUSH
25918: LD_INT 85
25920: PUSH
25921: LD_INT 86
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: ST_TO_ADDR
25979: GO 25982
25981: POP
// if state > - 1 and state < 3 then
25982: LD_VAR 0 3
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: GREATER
25991: PUSH
25992: LD_VAR 0 3
25996: PUSH
25997: LD_INT 3
25999: LESS
26000: AND
26001: IFFALSE 26058
// for i in result do
26003: LD_ADDR_VAR 0 5
26007: PUSH
26008: LD_VAR 0 4
26012: PUSH
26013: FOR_IN
26014: IFFALSE 26056
// if GetTech ( i , side ) <> state then
26016: LD_VAR 0 5
26020: PPUSH
26021: LD_VAR 0 1
26025: PPUSH
26026: CALL_OW 321
26030: PUSH
26031: LD_VAR 0 3
26035: NONEQUAL
26036: IFFALSE 26054
// result := result diff i ;
26038: LD_ADDR_VAR 0 4
26042: PUSH
26043: LD_VAR 0 4
26047: PUSH
26048: LD_VAR 0 5
26052: DIFF
26053: ST_TO_ADDR
26054: GO 26013
26056: POP
26057: POP
// end ;
26058: LD_VAR 0 4
26062: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26063: LD_INT 0
26065: PPUSH
26066: PPUSH
26067: PPUSH
// result := true ;
26068: LD_ADDR_VAR 0 3
26072: PUSH
26073: LD_INT 1
26075: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26076: LD_ADDR_VAR 0 5
26080: PUSH
26081: LD_VAR 0 2
26085: PPUSH
26086: CALL_OW 480
26090: ST_TO_ADDR
// if not tmp then
26091: LD_VAR 0 5
26095: NOT
26096: IFFALSE 26100
// exit ;
26098: GO 26149
// for i in tmp do
26100: LD_ADDR_VAR 0 4
26104: PUSH
26105: LD_VAR 0 5
26109: PUSH
26110: FOR_IN
26111: IFFALSE 26147
// if GetTech ( i , side ) <> state_researched then
26113: LD_VAR 0 4
26117: PPUSH
26118: LD_VAR 0 1
26122: PPUSH
26123: CALL_OW 321
26127: PUSH
26128: LD_INT 2
26130: NONEQUAL
26131: IFFALSE 26145
// begin result := false ;
26133: LD_ADDR_VAR 0 3
26137: PUSH
26138: LD_INT 0
26140: ST_TO_ADDR
// exit ;
26141: POP
26142: POP
26143: GO 26149
// end ;
26145: GO 26110
26147: POP
26148: POP
// end ;
26149: LD_VAR 0 3
26153: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26154: LD_INT 0
26156: PPUSH
26157: PPUSH
26158: PPUSH
26159: PPUSH
26160: PPUSH
26161: PPUSH
26162: PPUSH
26163: PPUSH
26164: PPUSH
26165: PPUSH
26166: PPUSH
26167: PPUSH
26168: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26169: LD_VAR 0 1
26173: NOT
26174: PUSH
26175: LD_VAR 0 1
26179: PPUSH
26180: CALL_OW 257
26184: PUSH
26185: LD_INT 9
26187: NONEQUAL
26188: OR
26189: IFFALSE 26193
// exit ;
26191: GO 26766
// side := GetSide ( unit ) ;
26193: LD_ADDR_VAR 0 9
26197: PUSH
26198: LD_VAR 0 1
26202: PPUSH
26203: CALL_OW 255
26207: ST_TO_ADDR
// tech_space := tech_spacanom ;
26208: LD_ADDR_VAR 0 12
26212: PUSH
26213: LD_INT 29
26215: ST_TO_ADDR
// tech_time := tech_taurad ;
26216: LD_ADDR_VAR 0 13
26220: PUSH
26221: LD_INT 28
26223: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26224: LD_ADDR_VAR 0 11
26228: PUSH
26229: LD_VAR 0 1
26233: PPUSH
26234: CALL_OW 310
26238: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26239: LD_VAR 0 11
26243: PPUSH
26244: CALL_OW 247
26248: PUSH
26249: LD_INT 2
26251: EQUAL
26252: IFFALSE 26256
// exit ;
26254: GO 26766
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26256: LD_ADDR_VAR 0 8
26260: PUSH
26261: LD_INT 81
26263: PUSH
26264: LD_VAR 0 9
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 3
26275: PUSH
26276: LD_INT 21
26278: PUSH
26279: LD_INT 3
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PPUSH
26294: CALL_OW 69
26298: ST_TO_ADDR
// if not tmp then
26299: LD_VAR 0 8
26303: NOT
26304: IFFALSE 26308
// exit ;
26306: GO 26766
// if in_unit then
26308: LD_VAR 0 11
26312: IFFALSE 26336
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26314: LD_ADDR_VAR 0 10
26318: PUSH
26319: LD_VAR 0 8
26323: PPUSH
26324: LD_VAR 0 11
26328: PPUSH
26329: CALL_OW 74
26333: ST_TO_ADDR
26334: GO 26356
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26336: LD_ADDR_VAR 0 10
26340: PUSH
26341: LD_VAR 0 8
26345: PPUSH
26346: LD_VAR 0 1
26350: PPUSH
26351: CALL_OW 74
26355: ST_TO_ADDR
// if not enemy then
26356: LD_VAR 0 10
26360: NOT
26361: IFFALSE 26365
// exit ;
26363: GO 26766
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26365: LD_VAR 0 11
26369: PUSH
26370: LD_VAR 0 11
26374: PPUSH
26375: LD_VAR 0 10
26379: PPUSH
26380: CALL_OW 296
26384: PUSH
26385: LD_INT 13
26387: GREATER
26388: AND
26389: PUSH
26390: LD_VAR 0 1
26394: PPUSH
26395: LD_VAR 0 10
26399: PPUSH
26400: CALL_OW 296
26404: PUSH
26405: LD_INT 12
26407: GREATER
26408: OR
26409: IFFALSE 26413
// exit ;
26411: GO 26766
// missile := [ 1 ] ;
26413: LD_ADDR_VAR 0 14
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26424: LD_VAR 0 9
26428: PPUSH
26429: LD_VAR 0 12
26433: PPUSH
26434: CALL_OW 325
26438: IFFALSE 26467
// missile := Replace ( missile , missile + 1 , 2 ) ;
26440: LD_ADDR_VAR 0 14
26444: PUSH
26445: LD_VAR 0 14
26449: PPUSH
26450: LD_VAR 0 14
26454: PUSH
26455: LD_INT 1
26457: PLUS
26458: PPUSH
26459: LD_INT 2
26461: PPUSH
26462: CALL_OW 1
26466: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26467: LD_VAR 0 9
26471: PPUSH
26472: LD_VAR 0 13
26476: PPUSH
26477: CALL_OW 325
26481: PUSH
26482: LD_VAR 0 10
26486: PPUSH
26487: CALL_OW 255
26491: PPUSH
26492: LD_VAR 0 13
26496: PPUSH
26497: CALL_OW 325
26501: NOT
26502: AND
26503: IFFALSE 26532
// missile := Replace ( missile , missile + 1 , 3 ) ;
26505: LD_ADDR_VAR 0 14
26509: PUSH
26510: LD_VAR 0 14
26514: PPUSH
26515: LD_VAR 0 14
26519: PUSH
26520: LD_INT 1
26522: PLUS
26523: PPUSH
26524: LD_INT 3
26526: PPUSH
26527: CALL_OW 1
26531: ST_TO_ADDR
// if missile < 2 then
26532: LD_VAR 0 14
26536: PUSH
26537: LD_INT 2
26539: LESS
26540: IFFALSE 26544
// exit ;
26542: GO 26766
// x := GetX ( enemy ) ;
26544: LD_ADDR_VAR 0 4
26548: PUSH
26549: LD_VAR 0 10
26553: PPUSH
26554: CALL_OW 250
26558: ST_TO_ADDR
// y := GetY ( enemy ) ;
26559: LD_ADDR_VAR 0 5
26563: PUSH
26564: LD_VAR 0 10
26568: PPUSH
26569: CALL_OW 251
26573: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26574: LD_ADDR_VAR 0 6
26578: PUSH
26579: LD_VAR 0 4
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PPUSH
26588: LD_INT 1
26590: PPUSH
26591: CALL_OW 12
26595: PLUS
26596: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26597: LD_ADDR_VAR 0 7
26601: PUSH
26602: LD_VAR 0 5
26606: PUSH
26607: LD_INT 1
26609: NEG
26610: PPUSH
26611: LD_INT 1
26613: PPUSH
26614: CALL_OW 12
26618: PLUS
26619: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26620: LD_VAR 0 6
26624: PPUSH
26625: LD_VAR 0 7
26629: PPUSH
26630: CALL_OW 488
26634: NOT
26635: IFFALSE 26657
// begin _x := x ;
26637: LD_ADDR_VAR 0 6
26641: PUSH
26642: LD_VAR 0 4
26646: ST_TO_ADDR
// _y := y ;
26647: LD_ADDR_VAR 0 7
26651: PUSH
26652: LD_VAR 0 5
26656: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26657: LD_ADDR_VAR 0 3
26661: PUSH
26662: LD_INT 1
26664: PPUSH
26665: LD_VAR 0 14
26669: PPUSH
26670: CALL_OW 12
26674: ST_TO_ADDR
// case i of 1 :
26675: LD_VAR 0 3
26679: PUSH
26680: LD_INT 1
26682: DOUBLE
26683: EQUAL
26684: IFTRUE 26688
26686: GO 26705
26688: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26689: LD_VAR 0 1
26693: PPUSH
26694: LD_VAR 0 10
26698: PPUSH
26699: CALL_OW 115
26703: GO 26766
26705: LD_INT 2
26707: DOUBLE
26708: EQUAL
26709: IFTRUE 26713
26711: GO 26735
26713: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26714: LD_VAR 0 1
26718: PPUSH
26719: LD_VAR 0 6
26723: PPUSH
26724: LD_VAR 0 7
26728: PPUSH
26729: CALL_OW 153
26733: GO 26766
26735: LD_INT 3
26737: DOUBLE
26738: EQUAL
26739: IFTRUE 26743
26741: GO 26765
26743: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26744: LD_VAR 0 1
26748: PPUSH
26749: LD_VAR 0 6
26753: PPUSH
26754: LD_VAR 0 7
26758: PPUSH
26759: CALL_OW 154
26763: GO 26766
26765: POP
// end ;
26766: LD_VAR 0 2
26770: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26771: LD_INT 0
26773: PPUSH
26774: PPUSH
26775: PPUSH
26776: PPUSH
26777: PPUSH
26778: PPUSH
// if not unit or not building then
26779: LD_VAR 0 1
26783: NOT
26784: PUSH
26785: LD_VAR 0 2
26789: NOT
26790: OR
26791: IFFALSE 26795
// exit ;
26793: GO 26953
// x := GetX ( building ) ;
26795: LD_ADDR_VAR 0 5
26799: PUSH
26800: LD_VAR 0 2
26804: PPUSH
26805: CALL_OW 250
26809: ST_TO_ADDR
// y := GetY ( building ) ;
26810: LD_ADDR_VAR 0 6
26814: PUSH
26815: LD_VAR 0 2
26819: PPUSH
26820: CALL_OW 251
26824: ST_TO_ADDR
// for i = 0 to 5 do
26825: LD_ADDR_VAR 0 4
26829: PUSH
26830: DOUBLE
26831: LD_INT 0
26833: DEC
26834: ST_TO_ADDR
26835: LD_INT 5
26837: PUSH
26838: FOR_TO
26839: IFFALSE 26951
// begin _x := ShiftX ( x , i , 3 ) ;
26841: LD_ADDR_VAR 0 7
26845: PUSH
26846: LD_VAR 0 5
26850: PPUSH
26851: LD_VAR 0 4
26855: PPUSH
26856: LD_INT 3
26858: PPUSH
26859: CALL_OW 272
26863: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26864: LD_ADDR_VAR 0 8
26868: PUSH
26869: LD_VAR 0 6
26873: PPUSH
26874: LD_VAR 0 4
26878: PPUSH
26879: LD_INT 3
26881: PPUSH
26882: CALL_OW 273
26886: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26887: LD_VAR 0 7
26891: PPUSH
26892: LD_VAR 0 8
26896: PPUSH
26897: CALL_OW 488
26901: NOT
26902: IFFALSE 26906
// continue ;
26904: GO 26838
// if HexInfo ( _x , _y ) = 0 then
26906: LD_VAR 0 7
26910: PPUSH
26911: LD_VAR 0 8
26915: PPUSH
26916: CALL_OW 428
26920: PUSH
26921: LD_INT 0
26923: EQUAL
26924: IFFALSE 26949
// begin ComMoveXY ( unit , _x , _y ) ;
26926: LD_VAR 0 1
26930: PPUSH
26931: LD_VAR 0 7
26935: PPUSH
26936: LD_VAR 0 8
26940: PPUSH
26941: CALL_OW 111
// exit ;
26945: POP
26946: POP
26947: GO 26953
// end ; end ;
26949: GO 26838
26951: POP
26952: POP
// end ;
26953: LD_VAR 0 3
26957: RET
// export function ScanBase ( side , base_area ) ; begin
26958: LD_INT 0
26960: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26961: LD_ADDR_VAR 0 3
26965: PUSH
26966: LD_VAR 0 2
26970: PPUSH
26971: LD_INT 81
26973: PUSH
26974: LD_VAR 0 1
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PPUSH
26983: CALL_OW 70
26987: ST_TO_ADDR
// end ;
26988: LD_VAR 0 3
26992: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26993: LD_INT 0
26995: PPUSH
26996: PPUSH
26997: PPUSH
26998: PPUSH
// result := false ;
26999: LD_ADDR_VAR 0 2
27003: PUSH
27004: LD_INT 0
27006: ST_TO_ADDR
// side := GetSide ( unit ) ;
27007: LD_ADDR_VAR 0 3
27011: PUSH
27012: LD_VAR 0 1
27016: PPUSH
27017: CALL_OW 255
27021: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27022: LD_ADDR_VAR 0 4
27026: PUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL_OW 248
27036: ST_TO_ADDR
// case nat of 1 :
27037: LD_VAR 0 4
27041: PUSH
27042: LD_INT 1
27044: DOUBLE
27045: EQUAL
27046: IFTRUE 27050
27048: GO 27061
27050: POP
// tech := tech_lassight ; 2 :
27051: LD_ADDR_VAR 0 5
27055: PUSH
27056: LD_INT 12
27058: ST_TO_ADDR
27059: GO 27100
27061: LD_INT 2
27063: DOUBLE
27064: EQUAL
27065: IFTRUE 27069
27067: GO 27080
27069: POP
// tech := tech_mortar ; 3 :
27070: LD_ADDR_VAR 0 5
27074: PUSH
27075: LD_INT 41
27077: ST_TO_ADDR
27078: GO 27100
27080: LD_INT 3
27082: DOUBLE
27083: EQUAL
27084: IFTRUE 27088
27086: GO 27099
27088: POP
// tech := tech_bazooka ; end ;
27089: LD_ADDR_VAR 0 5
27093: PUSH
27094: LD_INT 44
27096: ST_TO_ADDR
27097: GO 27100
27099: POP
// if Researched ( side , tech ) then
27100: LD_VAR 0 3
27104: PPUSH
27105: LD_VAR 0 5
27109: PPUSH
27110: CALL_OW 325
27114: IFFALSE 27141
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27116: LD_ADDR_VAR 0 2
27120: PUSH
27121: LD_INT 5
27123: PUSH
27124: LD_INT 8
27126: PUSH
27127: LD_INT 9
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: PUSH
27135: LD_VAR 0 4
27139: ARRAY
27140: ST_TO_ADDR
// end ;
27141: LD_VAR 0 2
27145: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27146: LD_INT 0
27148: PPUSH
27149: PPUSH
27150: PPUSH
// if not mines then
27151: LD_VAR 0 2
27155: NOT
27156: IFFALSE 27160
// exit ;
27158: GO 27304
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27160: LD_ADDR_VAR 0 5
27164: PUSH
27165: LD_INT 81
27167: PUSH
27168: LD_VAR 0 1
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 3
27179: PUSH
27180: LD_INT 21
27182: PUSH
27183: LD_INT 3
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PPUSH
27198: CALL_OW 69
27202: ST_TO_ADDR
// for i in mines do
27203: LD_ADDR_VAR 0 4
27207: PUSH
27208: LD_VAR 0 2
27212: PUSH
27213: FOR_IN
27214: IFFALSE 27302
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27216: LD_VAR 0 4
27220: PUSH
27221: LD_INT 1
27223: ARRAY
27224: PPUSH
27225: LD_VAR 0 4
27229: PUSH
27230: LD_INT 2
27232: ARRAY
27233: PPUSH
27234: CALL_OW 458
27238: NOT
27239: IFFALSE 27243
// continue ;
27241: GO 27213
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27243: LD_VAR 0 4
27247: PUSH
27248: LD_INT 1
27250: ARRAY
27251: PPUSH
27252: LD_VAR 0 4
27256: PUSH
27257: LD_INT 2
27259: ARRAY
27260: PPUSH
27261: CALL_OW 428
27265: PUSH
27266: LD_VAR 0 5
27270: IN
27271: IFFALSE 27300
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27273: LD_VAR 0 4
27277: PUSH
27278: LD_INT 1
27280: ARRAY
27281: PPUSH
27282: LD_VAR 0 4
27286: PUSH
27287: LD_INT 2
27289: ARRAY
27290: PPUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 456
// end ;
27300: GO 27213
27302: POP
27303: POP
// end ;
27304: LD_VAR 0 3
27308: RET
// export function Count ( array ) ; var i ; begin
27309: LD_INT 0
27311: PPUSH
27312: PPUSH
// result := 0 ;
27313: LD_ADDR_VAR 0 2
27317: PUSH
27318: LD_INT 0
27320: ST_TO_ADDR
// for i in array do
27321: LD_ADDR_VAR 0 3
27325: PUSH
27326: LD_VAR 0 1
27330: PUSH
27331: FOR_IN
27332: IFFALSE 27356
// if i then
27334: LD_VAR 0 3
27338: IFFALSE 27354
// result := result + 1 ;
27340: LD_ADDR_VAR 0 2
27344: PUSH
27345: LD_VAR 0 2
27349: PUSH
27350: LD_INT 1
27352: PLUS
27353: ST_TO_ADDR
27354: GO 27331
27356: POP
27357: POP
// end ;
27358: LD_VAR 0 2
27362: RET
// export function IsEmpty ( building ) ; begin
27363: LD_INT 0
27365: PPUSH
// if not building then
27366: LD_VAR 0 1
27370: NOT
27371: IFFALSE 27375
// exit ;
27373: GO 27418
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27375: LD_ADDR_VAR 0 2
27379: PUSH
27380: LD_VAR 0 1
27384: PUSH
27385: LD_INT 22
27387: PUSH
27388: LD_VAR 0 1
27392: PPUSH
27393: CALL_OW 255
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 58
27404: PUSH
27405: EMPTY
27406: LIST
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PPUSH
27412: CALL_OW 69
27416: IN
27417: ST_TO_ADDR
// end ;
27418: LD_VAR 0 2
27422: RET
// export function IsNotFull ( building ) ; var places ; begin
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
// if not building then
27427: LD_VAR 0 1
27431: NOT
27432: IFFALSE 27436
// exit ;
27434: GO 27607
// result := false ;
27436: LD_ADDR_VAR 0 2
27440: PUSH
27441: LD_INT 0
27443: ST_TO_ADDR
// places := 0 ;
27444: LD_ADDR_VAR 0 3
27448: PUSH
27449: LD_INT 0
27451: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27452: LD_VAR 0 1
27456: PPUSH
27457: CALL_OW 266
27461: PUSH
27462: LD_INT 0
27464: DOUBLE
27465: EQUAL
27466: IFTRUE 27524
27468: LD_INT 1
27470: DOUBLE
27471: EQUAL
27472: IFTRUE 27524
27474: LD_INT 6
27476: DOUBLE
27477: EQUAL
27478: IFTRUE 27524
27480: LD_INT 7
27482: DOUBLE
27483: EQUAL
27484: IFTRUE 27524
27486: LD_INT 8
27488: DOUBLE
27489: EQUAL
27490: IFTRUE 27524
27492: LD_INT 4
27494: DOUBLE
27495: EQUAL
27496: IFTRUE 27524
27498: LD_INT 5
27500: DOUBLE
27501: EQUAL
27502: IFTRUE 27524
27504: LD_INT 2
27506: DOUBLE
27507: EQUAL
27508: IFTRUE 27524
27510: LD_INT 3
27512: DOUBLE
27513: EQUAL
27514: IFTRUE 27524
27516: LD_INT 35
27518: DOUBLE
27519: EQUAL
27520: IFTRUE 27524
27522: GO 27535
27524: POP
// places := 6 ; b_bunker , b_breastwork :
27525: LD_ADDR_VAR 0 3
27529: PUSH
27530: LD_INT 6
27532: ST_TO_ADDR
27533: GO 27580
27535: LD_INT 32
27537: DOUBLE
27538: EQUAL
27539: IFTRUE 27549
27541: LD_INT 31
27543: DOUBLE
27544: EQUAL
27545: IFTRUE 27549
27547: GO 27560
27549: POP
// places := 1 ; b_control_tower :
27550: LD_ADDR_VAR 0 3
27554: PUSH
27555: LD_INT 1
27557: ST_TO_ADDR
27558: GO 27580
27560: LD_INT 36
27562: DOUBLE
27563: EQUAL
27564: IFTRUE 27568
27566: GO 27579
27568: POP
// places := 3 ; end ;
27569: LD_ADDR_VAR 0 3
27573: PUSH
27574: LD_INT 3
27576: ST_TO_ADDR
27577: GO 27580
27579: POP
// if places then
27580: LD_VAR 0 3
27584: IFFALSE 27607
// result := UnitsInside ( building ) < places ;
27586: LD_ADDR_VAR 0 2
27590: PUSH
27591: LD_VAR 0 1
27595: PPUSH
27596: CALL_OW 313
27600: PUSH
27601: LD_VAR 0 3
27605: LESS
27606: ST_TO_ADDR
// end ;
27607: LD_VAR 0 2
27611: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27612: LD_INT 0
27614: PPUSH
27615: PPUSH
27616: PPUSH
27617: PPUSH
// tmp := [ ] ;
27618: LD_ADDR_VAR 0 3
27622: PUSH
27623: EMPTY
27624: ST_TO_ADDR
// list := [ ] ;
27625: LD_ADDR_VAR 0 5
27629: PUSH
27630: EMPTY
27631: ST_TO_ADDR
// for i = 16 to 25 do
27632: LD_ADDR_VAR 0 4
27636: PUSH
27637: DOUBLE
27638: LD_INT 16
27640: DEC
27641: ST_TO_ADDR
27642: LD_INT 25
27644: PUSH
27645: FOR_TO
27646: IFFALSE 27719
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27648: LD_ADDR_VAR 0 3
27652: PUSH
27653: LD_VAR 0 3
27657: PUSH
27658: LD_INT 22
27660: PUSH
27661: LD_VAR 0 1
27665: PPUSH
27666: CALL_OW 255
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 91
27677: PUSH
27678: LD_VAR 0 1
27682: PUSH
27683: LD_INT 6
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 30
27693: PUSH
27694: LD_VAR 0 4
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: PPUSH
27711: CALL_OW 69
27715: ADD
27716: ST_TO_ADDR
27717: GO 27645
27719: POP
27720: POP
// for i = 1 to tmp do
27721: LD_ADDR_VAR 0 4
27725: PUSH
27726: DOUBLE
27727: LD_INT 1
27729: DEC
27730: ST_TO_ADDR
27731: LD_VAR 0 3
27735: PUSH
27736: FOR_TO
27737: IFFALSE 27825
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27739: LD_ADDR_VAR 0 5
27743: PUSH
27744: LD_VAR 0 5
27748: PUSH
27749: LD_VAR 0 3
27753: PUSH
27754: LD_VAR 0 4
27758: ARRAY
27759: PPUSH
27760: CALL_OW 266
27764: PUSH
27765: LD_VAR 0 3
27769: PUSH
27770: LD_VAR 0 4
27774: ARRAY
27775: PPUSH
27776: CALL_OW 250
27780: PUSH
27781: LD_VAR 0 3
27785: PUSH
27786: LD_VAR 0 4
27790: ARRAY
27791: PPUSH
27792: CALL_OW 251
27796: PUSH
27797: LD_VAR 0 3
27801: PUSH
27802: LD_VAR 0 4
27806: ARRAY
27807: PPUSH
27808: CALL_OW 254
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: PUSH
27819: EMPTY
27820: LIST
27821: ADD
27822: ST_TO_ADDR
27823: GO 27736
27825: POP
27826: POP
// result := list ;
27827: LD_ADDR_VAR 0 2
27831: PUSH
27832: LD_VAR 0 5
27836: ST_TO_ADDR
// end ;
27837: LD_VAR 0 2
27841: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27842: LD_INT 0
27844: PPUSH
27845: PPUSH
27846: PPUSH
27847: PPUSH
27848: PPUSH
27849: PPUSH
27850: PPUSH
// if not factory then
27851: LD_VAR 0 1
27855: NOT
27856: IFFALSE 27860
// exit ;
27858: GO 28453
// if control = control_apeman then
27860: LD_VAR 0 4
27864: PUSH
27865: LD_INT 5
27867: EQUAL
27868: IFFALSE 27977
// begin tmp := UnitsInside ( factory ) ;
27870: LD_ADDR_VAR 0 8
27874: PUSH
27875: LD_VAR 0 1
27879: PPUSH
27880: CALL_OW 313
27884: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27885: LD_VAR 0 8
27889: PPUSH
27890: LD_INT 25
27892: PUSH
27893: LD_INT 12
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PPUSH
27900: CALL_OW 72
27904: NOT
27905: IFFALSE 27915
// control := control_manual ;
27907: LD_ADDR_VAR 0 4
27911: PUSH
27912: LD_INT 1
27914: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27915: LD_ADDR_VAR 0 8
27919: PUSH
27920: LD_VAR 0 1
27924: PPUSH
27925: CALL 27612 0 1
27929: ST_TO_ADDR
// if tmp then
27930: LD_VAR 0 8
27934: IFFALSE 27977
// begin for i in tmp do
27936: LD_ADDR_VAR 0 7
27940: PUSH
27941: LD_VAR 0 8
27945: PUSH
27946: FOR_IN
27947: IFFALSE 27975
// if i [ 1 ] = b_ext_radio then
27949: LD_VAR 0 7
27953: PUSH
27954: LD_INT 1
27956: ARRAY
27957: PUSH
27958: LD_INT 22
27960: EQUAL
27961: IFFALSE 27973
// begin control := control_remote ;
27963: LD_ADDR_VAR 0 4
27967: PUSH
27968: LD_INT 2
27970: ST_TO_ADDR
// break ;
27971: GO 27975
// end ;
27973: GO 27946
27975: POP
27976: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27977: LD_VAR 0 1
27981: PPUSH
27982: LD_VAR 0 2
27986: PPUSH
27987: LD_VAR 0 3
27991: PPUSH
27992: LD_VAR 0 4
27996: PPUSH
27997: LD_VAR 0 5
28001: PPUSH
28002: CALL_OW 448
28006: IFFALSE 28041
// begin result := [ chassis , engine , control , weapon ] ;
28008: LD_ADDR_VAR 0 6
28012: PUSH
28013: LD_VAR 0 2
28017: PUSH
28018: LD_VAR 0 3
28022: PUSH
28023: LD_VAR 0 4
28027: PUSH
28028: LD_VAR 0 5
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: ST_TO_ADDR
// exit ;
28039: GO 28453
// end ; _chassis := AvailableChassisList ( factory ) ;
28041: LD_ADDR_VAR 0 9
28045: PUSH
28046: LD_VAR 0 1
28050: PPUSH
28051: CALL_OW 475
28055: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28056: LD_ADDR_VAR 0 11
28060: PUSH
28061: LD_VAR 0 1
28065: PPUSH
28066: CALL_OW 476
28070: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28071: LD_ADDR_VAR 0 12
28075: PUSH
28076: LD_VAR 0 1
28080: PPUSH
28081: CALL_OW 477
28085: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28086: LD_ADDR_VAR 0 10
28090: PUSH
28091: LD_VAR 0 1
28095: PPUSH
28096: CALL_OW 478
28100: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28101: LD_VAR 0 9
28105: NOT
28106: PUSH
28107: LD_VAR 0 11
28111: NOT
28112: OR
28113: PUSH
28114: LD_VAR 0 12
28118: NOT
28119: OR
28120: PUSH
28121: LD_VAR 0 10
28125: NOT
28126: OR
28127: IFFALSE 28162
// begin result := [ chassis , engine , control , weapon ] ;
28129: LD_ADDR_VAR 0 6
28133: PUSH
28134: LD_VAR 0 2
28138: PUSH
28139: LD_VAR 0 3
28143: PUSH
28144: LD_VAR 0 4
28148: PUSH
28149: LD_VAR 0 5
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: ST_TO_ADDR
// exit ;
28160: GO 28453
// end ; if not chassis in _chassis then
28162: LD_VAR 0 2
28166: PUSH
28167: LD_VAR 0 9
28171: IN
28172: NOT
28173: IFFALSE 28199
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28175: LD_ADDR_VAR 0 2
28179: PUSH
28180: LD_VAR 0 9
28184: PUSH
28185: LD_INT 1
28187: PPUSH
28188: LD_VAR 0 9
28192: PPUSH
28193: CALL_OW 12
28197: ARRAY
28198: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28199: LD_VAR 0 2
28203: PPUSH
28204: LD_VAR 0 3
28208: PPUSH
28209: CALL 28458 0 2
28213: NOT
28214: IFFALSE 28273
// repeat engine := _engine [ 1 ] ;
28216: LD_ADDR_VAR 0 3
28220: PUSH
28221: LD_VAR 0 11
28225: PUSH
28226: LD_INT 1
28228: ARRAY
28229: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28230: LD_ADDR_VAR 0 11
28234: PUSH
28235: LD_VAR 0 11
28239: PPUSH
28240: LD_INT 1
28242: PPUSH
28243: CALL_OW 3
28247: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28248: LD_VAR 0 2
28252: PPUSH
28253: LD_VAR 0 3
28257: PPUSH
28258: CALL 28458 0 2
28262: PUSH
28263: LD_VAR 0 11
28267: PUSH
28268: EMPTY
28269: EQUAL
28270: OR
28271: IFFALSE 28216
// if not control in _control then
28273: LD_VAR 0 4
28277: PUSH
28278: LD_VAR 0 12
28282: IN
28283: NOT
28284: IFFALSE 28310
// control := _control [ rand ( 1 , _control ) ] ;
28286: LD_ADDR_VAR 0 4
28290: PUSH
28291: LD_VAR 0 12
28295: PUSH
28296: LD_INT 1
28298: PPUSH
28299: LD_VAR 0 12
28303: PPUSH
28304: CALL_OW 12
28308: ARRAY
28309: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28310: LD_VAR 0 2
28314: PPUSH
28315: LD_VAR 0 5
28319: PPUSH
28320: CALL 28678 0 2
28324: NOT
28325: IFFALSE 28384
// repeat weapon := _weapon [ 1 ] ;
28327: LD_ADDR_VAR 0 5
28331: PUSH
28332: LD_VAR 0 10
28336: PUSH
28337: LD_INT 1
28339: ARRAY
28340: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28341: LD_ADDR_VAR 0 10
28345: PUSH
28346: LD_VAR 0 10
28350: PPUSH
28351: LD_INT 1
28353: PPUSH
28354: CALL_OW 3
28358: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28359: LD_VAR 0 2
28363: PPUSH
28364: LD_VAR 0 5
28368: PPUSH
28369: CALL 28678 0 2
28373: PUSH
28374: LD_VAR 0 10
28378: PUSH
28379: EMPTY
28380: EQUAL
28381: OR
28382: IFFALSE 28327
// result := [ ] ;
28384: LD_ADDR_VAR 0 6
28388: PUSH
28389: EMPTY
28390: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28391: LD_VAR 0 1
28395: PPUSH
28396: LD_VAR 0 2
28400: PPUSH
28401: LD_VAR 0 3
28405: PPUSH
28406: LD_VAR 0 4
28410: PPUSH
28411: LD_VAR 0 5
28415: PPUSH
28416: CALL_OW 448
28420: IFFALSE 28453
// result := [ chassis , engine , control , weapon ] ;
28422: LD_ADDR_VAR 0 6
28426: PUSH
28427: LD_VAR 0 2
28431: PUSH
28432: LD_VAR 0 3
28436: PUSH
28437: LD_VAR 0 4
28441: PUSH
28442: LD_VAR 0 5
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: ST_TO_ADDR
// end ;
28453: LD_VAR 0 6
28457: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28458: LD_INT 0
28460: PPUSH
// if not chassis or not engine then
28461: LD_VAR 0 1
28465: NOT
28466: PUSH
28467: LD_VAR 0 2
28471: NOT
28472: OR
28473: IFFALSE 28477
// exit ;
28475: GO 28673
// case engine of engine_solar :
28477: LD_VAR 0 2
28481: PUSH
28482: LD_INT 2
28484: DOUBLE
28485: EQUAL
28486: IFTRUE 28490
28488: GO 28528
28490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28491: LD_ADDR_VAR 0 3
28495: PUSH
28496: LD_INT 11
28498: PUSH
28499: LD_INT 12
28501: PUSH
28502: LD_INT 13
28504: PUSH
28505: LD_INT 14
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: LD_INT 2
28513: PUSH
28514: LD_INT 3
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: ST_TO_ADDR
28526: GO 28657
28528: LD_INT 1
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28598
28536: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28537: LD_ADDR_VAR 0 3
28541: PUSH
28542: LD_INT 11
28544: PUSH
28545: LD_INT 12
28547: PUSH
28548: LD_INT 13
28550: PUSH
28551: LD_INT 14
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: LD_INT 2
28559: PUSH
28560: LD_INT 3
28562: PUSH
28563: LD_INT 4
28565: PUSH
28566: LD_INT 5
28568: PUSH
28569: LD_INT 21
28571: PUSH
28572: LD_INT 23
28574: PUSH
28575: LD_INT 22
28577: PUSH
28578: LD_INT 24
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: ST_TO_ADDR
28596: GO 28657
28598: LD_INT 3
28600: DOUBLE
28601: EQUAL
28602: IFTRUE 28606
28604: GO 28656
28606: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28607: LD_ADDR_VAR 0 3
28611: PUSH
28612: LD_INT 13
28614: PUSH
28615: LD_INT 14
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: LD_INT 3
28623: PUSH
28624: LD_INT 4
28626: PUSH
28627: LD_INT 5
28629: PUSH
28630: LD_INT 21
28632: PUSH
28633: LD_INT 22
28635: PUSH
28636: LD_INT 23
28638: PUSH
28639: LD_INT 24
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: ST_TO_ADDR
28654: GO 28657
28656: POP
// result := ( chassis in result ) ;
28657: LD_ADDR_VAR 0 3
28661: PUSH
28662: LD_VAR 0 1
28666: PUSH
28667: LD_VAR 0 3
28671: IN
28672: ST_TO_ADDR
// end ;
28673: LD_VAR 0 3
28677: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28678: LD_INT 0
28680: PPUSH
// if not chassis or not weapon then
28681: LD_VAR 0 1
28685: NOT
28686: PUSH
28687: LD_VAR 0 2
28691: NOT
28692: OR
28693: IFFALSE 28697
// exit ;
28695: GO 29757
// case weapon of us_machine_gun :
28697: LD_VAR 0 2
28701: PUSH
28702: LD_INT 2
28704: DOUBLE
28705: EQUAL
28706: IFTRUE 28710
28708: GO 28740
28710: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28711: LD_ADDR_VAR 0 3
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: LD_INT 2
28721: PUSH
28722: LD_INT 3
28724: PUSH
28725: LD_INT 4
28727: PUSH
28728: LD_INT 5
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: ST_TO_ADDR
28738: GO 29741
28740: LD_INT 3
28742: DOUBLE
28743: EQUAL
28744: IFTRUE 28748
28746: GO 28778
28748: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28749: LD_ADDR_VAR 0 3
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: LD_INT 2
28759: PUSH
28760: LD_INT 3
28762: PUSH
28763: LD_INT 4
28765: PUSH
28766: LD_INT 5
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: ST_TO_ADDR
28776: GO 29741
28778: LD_INT 11
28780: DOUBLE
28781: EQUAL
28782: IFTRUE 28786
28784: GO 28816
28786: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28787: LD_ADDR_VAR 0 3
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: LD_INT 3
28800: PUSH
28801: LD_INT 4
28803: PUSH
28804: LD_INT 5
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: ST_TO_ADDR
28814: GO 29741
28816: LD_INT 4
28818: DOUBLE
28819: EQUAL
28820: IFTRUE 28824
28822: GO 28850
28824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28825: LD_ADDR_VAR 0 3
28829: PUSH
28830: LD_INT 2
28832: PUSH
28833: LD_INT 3
28835: PUSH
28836: LD_INT 4
28838: PUSH
28839: LD_INT 5
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: ST_TO_ADDR
28848: GO 29741
28850: LD_INT 5
28852: DOUBLE
28853: EQUAL
28854: IFTRUE 28858
28856: GO 28884
28858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28859: LD_ADDR_VAR 0 3
28863: PUSH
28864: LD_INT 2
28866: PUSH
28867: LD_INT 3
28869: PUSH
28870: LD_INT 4
28872: PUSH
28873: LD_INT 5
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: ST_TO_ADDR
28882: GO 29741
28884: LD_INT 9
28886: DOUBLE
28887: EQUAL
28888: IFTRUE 28892
28890: GO 28918
28892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28893: LD_ADDR_VAR 0 3
28897: PUSH
28898: LD_INT 2
28900: PUSH
28901: LD_INT 3
28903: PUSH
28904: LD_INT 4
28906: PUSH
28907: LD_INT 5
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: ST_TO_ADDR
28916: GO 29741
28918: LD_INT 7
28920: DOUBLE
28921: EQUAL
28922: IFTRUE 28926
28924: GO 28952
28926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28927: LD_ADDR_VAR 0 3
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: LD_INT 4
28940: PUSH
28941: LD_INT 5
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
28950: GO 29741
28952: LD_INT 12
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28960
28958: GO 28986
28960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28961: LD_ADDR_VAR 0 3
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: LD_INT 4
28974: PUSH
28975: LD_INT 5
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: ST_TO_ADDR
28984: GO 29741
28986: LD_INT 13
28988: DOUBLE
28989: EQUAL
28990: IFTRUE 28994
28992: GO 29020
28994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28995: LD_ADDR_VAR 0 3
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: LD_INT 3
29005: PUSH
29006: LD_INT 4
29008: PUSH
29009: LD_INT 5
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
29018: GO 29741
29020: LD_INT 14
29022: DOUBLE
29023: EQUAL
29024: IFTRUE 29028
29026: GO 29046
29028: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29029: LD_ADDR_VAR 0 3
29033: PUSH
29034: LD_INT 4
29036: PUSH
29037: LD_INT 5
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: ST_TO_ADDR
29044: GO 29741
29046: LD_INT 6
29048: DOUBLE
29049: EQUAL
29050: IFTRUE 29054
29052: GO 29072
29054: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29055: LD_ADDR_VAR 0 3
29059: PUSH
29060: LD_INT 4
29062: PUSH
29063: LD_INT 5
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: ST_TO_ADDR
29070: GO 29741
29072: LD_INT 10
29074: DOUBLE
29075: EQUAL
29076: IFTRUE 29080
29078: GO 29098
29080: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29081: LD_ADDR_VAR 0 3
29085: PUSH
29086: LD_INT 4
29088: PUSH
29089: LD_INT 5
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: ST_TO_ADDR
29096: GO 29741
29098: LD_INT 22
29100: DOUBLE
29101: EQUAL
29102: IFTRUE 29106
29104: GO 29132
29106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29107: LD_ADDR_VAR 0 3
29111: PUSH
29112: LD_INT 11
29114: PUSH
29115: LD_INT 12
29117: PUSH
29118: LD_INT 13
29120: PUSH
29121: LD_INT 14
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: ST_TO_ADDR
29130: GO 29741
29132: LD_INT 23
29134: DOUBLE
29135: EQUAL
29136: IFTRUE 29140
29138: GO 29166
29140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29141: LD_ADDR_VAR 0 3
29145: PUSH
29146: LD_INT 11
29148: PUSH
29149: LD_INT 12
29151: PUSH
29152: LD_INT 13
29154: PUSH
29155: LD_INT 14
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: ST_TO_ADDR
29164: GO 29741
29166: LD_INT 24
29168: DOUBLE
29169: EQUAL
29170: IFTRUE 29174
29172: GO 29200
29174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29175: LD_ADDR_VAR 0 3
29179: PUSH
29180: LD_INT 11
29182: PUSH
29183: LD_INT 12
29185: PUSH
29186: LD_INT 13
29188: PUSH
29189: LD_INT 14
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: ST_TO_ADDR
29198: GO 29741
29200: LD_INT 30
29202: DOUBLE
29203: EQUAL
29204: IFTRUE 29208
29206: GO 29234
29208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29209: LD_ADDR_VAR 0 3
29213: PUSH
29214: LD_INT 11
29216: PUSH
29217: LD_INT 12
29219: PUSH
29220: LD_INT 13
29222: PUSH
29223: LD_INT 14
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: ST_TO_ADDR
29232: GO 29741
29234: LD_INT 25
29236: DOUBLE
29237: EQUAL
29238: IFTRUE 29242
29240: GO 29260
29242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29243: LD_ADDR_VAR 0 3
29247: PUSH
29248: LD_INT 13
29250: PUSH
29251: LD_INT 14
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: ST_TO_ADDR
29258: GO 29741
29260: LD_INT 27
29262: DOUBLE
29263: EQUAL
29264: IFTRUE 29268
29266: GO 29286
29268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29269: LD_ADDR_VAR 0 3
29273: PUSH
29274: LD_INT 13
29276: PUSH
29277: LD_INT 14
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: ST_TO_ADDR
29284: GO 29741
29286: LD_INT 92
29288: DOUBLE
29289: EQUAL
29290: IFTRUE 29294
29292: GO 29320
29294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29295: LD_ADDR_VAR 0 3
29299: PUSH
29300: LD_INT 11
29302: PUSH
29303: LD_INT 12
29305: PUSH
29306: LD_INT 13
29308: PUSH
29309: LD_INT 14
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: ST_TO_ADDR
29318: GO 29741
29320: LD_INT 28
29322: DOUBLE
29323: EQUAL
29324: IFTRUE 29328
29326: GO 29346
29328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_INT 13
29336: PUSH
29337: LD_INT 14
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: ST_TO_ADDR
29344: GO 29741
29346: LD_INT 29
29348: DOUBLE
29349: EQUAL
29350: IFTRUE 29354
29352: GO 29372
29354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_INT 13
29362: PUSH
29363: LD_INT 14
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: ST_TO_ADDR
29370: GO 29741
29372: LD_INT 31
29374: DOUBLE
29375: EQUAL
29376: IFTRUE 29380
29378: GO 29398
29380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29381: LD_ADDR_VAR 0 3
29385: PUSH
29386: LD_INT 13
29388: PUSH
29389: LD_INT 14
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: ST_TO_ADDR
29396: GO 29741
29398: LD_INT 26
29400: DOUBLE
29401: EQUAL
29402: IFTRUE 29406
29404: GO 29424
29406: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29407: LD_ADDR_VAR 0 3
29411: PUSH
29412: LD_INT 13
29414: PUSH
29415: LD_INT 14
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: ST_TO_ADDR
29422: GO 29741
29424: LD_INT 42
29426: DOUBLE
29427: EQUAL
29428: IFTRUE 29432
29430: GO 29458
29432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29433: LD_ADDR_VAR 0 3
29437: PUSH
29438: LD_INT 21
29440: PUSH
29441: LD_INT 22
29443: PUSH
29444: LD_INT 23
29446: PUSH
29447: LD_INT 24
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: ST_TO_ADDR
29456: GO 29741
29458: LD_INT 43
29460: DOUBLE
29461: EQUAL
29462: IFTRUE 29466
29464: GO 29492
29466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29467: LD_ADDR_VAR 0 3
29471: PUSH
29472: LD_INT 21
29474: PUSH
29475: LD_INT 22
29477: PUSH
29478: LD_INT 23
29480: PUSH
29481: LD_INT 24
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: ST_TO_ADDR
29490: GO 29741
29492: LD_INT 44
29494: DOUBLE
29495: EQUAL
29496: IFTRUE 29500
29498: GO 29526
29500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29501: LD_ADDR_VAR 0 3
29505: PUSH
29506: LD_INT 21
29508: PUSH
29509: LD_INT 22
29511: PUSH
29512: LD_INT 23
29514: PUSH
29515: LD_INT 24
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: ST_TO_ADDR
29524: GO 29741
29526: LD_INT 45
29528: DOUBLE
29529: EQUAL
29530: IFTRUE 29534
29532: GO 29560
29534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29535: LD_ADDR_VAR 0 3
29539: PUSH
29540: LD_INT 21
29542: PUSH
29543: LD_INT 22
29545: PUSH
29546: LD_INT 23
29548: PUSH
29549: LD_INT 24
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: ST_TO_ADDR
29558: GO 29741
29560: LD_INT 49
29562: DOUBLE
29563: EQUAL
29564: IFTRUE 29568
29566: GO 29594
29568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29569: LD_ADDR_VAR 0 3
29573: PUSH
29574: LD_INT 21
29576: PUSH
29577: LD_INT 22
29579: PUSH
29580: LD_INT 23
29582: PUSH
29583: LD_INT 24
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: ST_TO_ADDR
29592: GO 29741
29594: LD_INT 51
29596: DOUBLE
29597: EQUAL
29598: IFTRUE 29602
29600: GO 29628
29602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_INT 21
29610: PUSH
29611: LD_INT 22
29613: PUSH
29614: LD_INT 23
29616: PUSH
29617: LD_INT 24
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: ST_TO_ADDR
29626: GO 29741
29628: LD_INT 52
29630: DOUBLE
29631: EQUAL
29632: IFTRUE 29636
29634: GO 29662
29636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29637: LD_ADDR_VAR 0 3
29641: PUSH
29642: LD_INT 21
29644: PUSH
29645: LD_INT 22
29647: PUSH
29648: LD_INT 23
29650: PUSH
29651: LD_INT 24
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: ST_TO_ADDR
29660: GO 29741
29662: LD_INT 53
29664: DOUBLE
29665: EQUAL
29666: IFTRUE 29670
29668: GO 29688
29670: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29671: LD_ADDR_VAR 0 3
29675: PUSH
29676: LD_INT 23
29678: PUSH
29679: LD_INT 24
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: ST_TO_ADDR
29686: GO 29741
29688: LD_INT 46
29690: DOUBLE
29691: EQUAL
29692: IFTRUE 29696
29694: GO 29714
29696: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29697: LD_ADDR_VAR 0 3
29701: PUSH
29702: LD_INT 23
29704: PUSH
29705: LD_INT 24
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: ST_TO_ADDR
29712: GO 29741
29714: LD_INT 47
29716: DOUBLE
29717: EQUAL
29718: IFTRUE 29722
29720: GO 29740
29722: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29723: LD_ADDR_VAR 0 3
29727: PUSH
29728: LD_INT 23
29730: PUSH
29731: LD_INT 24
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: ST_TO_ADDR
29738: GO 29741
29740: POP
// result := ( chassis in result ) ;
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_VAR 0 1
29750: PUSH
29751: LD_VAR 0 3
29755: IN
29756: ST_TO_ADDR
// end ;
29757: LD_VAR 0 3
29761: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29762: LD_INT 0
29764: PPUSH
29765: PPUSH
29766: PPUSH
29767: PPUSH
29768: PPUSH
29769: PPUSH
29770: PPUSH
// result := array ;
29771: LD_ADDR_VAR 0 5
29775: PUSH
29776: LD_VAR 0 1
29780: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29781: LD_VAR 0 1
29785: NOT
29786: PUSH
29787: LD_VAR 0 2
29791: NOT
29792: OR
29793: PUSH
29794: LD_VAR 0 3
29798: NOT
29799: OR
29800: PUSH
29801: LD_VAR 0 2
29805: PUSH
29806: LD_VAR 0 1
29810: GREATER
29811: OR
29812: PUSH
29813: LD_VAR 0 3
29817: PUSH
29818: LD_VAR 0 1
29822: GREATER
29823: OR
29824: IFFALSE 29828
// exit ;
29826: GO 30124
// if direction then
29828: LD_VAR 0 4
29832: IFFALSE 29896
// begin d := 1 ;
29834: LD_ADDR_VAR 0 9
29838: PUSH
29839: LD_INT 1
29841: ST_TO_ADDR
// if i_from > i_to then
29842: LD_VAR 0 2
29846: PUSH
29847: LD_VAR 0 3
29851: GREATER
29852: IFFALSE 29878
// length := ( array - i_from ) + i_to else
29854: LD_ADDR_VAR 0 11
29858: PUSH
29859: LD_VAR 0 1
29863: PUSH
29864: LD_VAR 0 2
29868: MINUS
29869: PUSH
29870: LD_VAR 0 3
29874: PLUS
29875: ST_TO_ADDR
29876: GO 29894
// length := i_to - i_from ;
29878: LD_ADDR_VAR 0 11
29882: PUSH
29883: LD_VAR 0 3
29887: PUSH
29888: LD_VAR 0 2
29892: MINUS
29893: ST_TO_ADDR
// end else
29894: GO 29957
// begin d := - 1 ;
29896: LD_ADDR_VAR 0 9
29900: PUSH
29901: LD_INT 1
29903: NEG
29904: ST_TO_ADDR
// if i_from > i_to then
29905: LD_VAR 0 2
29909: PUSH
29910: LD_VAR 0 3
29914: GREATER
29915: IFFALSE 29935
// length := i_from - i_to else
29917: LD_ADDR_VAR 0 11
29921: PUSH
29922: LD_VAR 0 2
29926: PUSH
29927: LD_VAR 0 3
29931: MINUS
29932: ST_TO_ADDR
29933: GO 29957
// length := ( array - i_to ) + i_from ;
29935: LD_ADDR_VAR 0 11
29939: PUSH
29940: LD_VAR 0 1
29944: PUSH
29945: LD_VAR 0 3
29949: MINUS
29950: PUSH
29951: LD_VAR 0 2
29955: PLUS
29956: ST_TO_ADDR
// end ; if not length then
29957: LD_VAR 0 11
29961: NOT
29962: IFFALSE 29966
// exit ;
29964: GO 30124
// tmp := array ;
29966: LD_ADDR_VAR 0 10
29970: PUSH
29971: LD_VAR 0 1
29975: ST_TO_ADDR
// for i = 1 to length do
29976: LD_ADDR_VAR 0 6
29980: PUSH
29981: DOUBLE
29982: LD_INT 1
29984: DEC
29985: ST_TO_ADDR
29986: LD_VAR 0 11
29990: PUSH
29991: FOR_TO
29992: IFFALSE 30112
// begin for j = 1 to array do
29994: LD_ADDR_VAR 0 7
29998: PUSH
29999: DOUBLE
30000: LD_INT 1
30002: DEC
30003: ST_TO_ADDR
30004: LD_VAR 0 1
30008: PUSH
30009: FOR_TO
30010: IFFALSE 30098
// begin k := j + d ;
30012: LD_ADDR_VAR 0 8
30016: PUSH
30017: LD_VAR 0 7
30021: PUSH
30022: LD_VAR 0 9
30026: PLUS
30027: ST_TO_ADDR
// if k > array then
30028: LD_VAR 0 8
30032: PUSH
30033: LD_VAR 0 1
30037: GREATER
30038: IFFALSE 30048
// k := 1 ;
30040: LD_ADDR_VAR 0 8
30044: PUSH
30045: LD_INT 1
30047: ST_TO_ADDR
// if not k then
30048: LD_VAR 0 8
30052: NOT
30053: IFFALSE 30065
// k := array ;
30055: LD_ADDR_VAR 0 8
30059: PUSH
30060: LD_VAR 0 1
30064: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30065: LD_ADDR_VAR 0 10
30069: PUSH
30070: LD_VAR 0 10
30074: PPUSH
30075: LD_VAR 0 8
30079: PPUSH
30080: LD_VAR 0 1
30084: PUSH
30085: LD_VAR 0 7
30089: ARRAY
30090: PPUSH
30091: CALL_OW 1
30095: ST_TO_ADDR
// end ;
30096: GO 30009
30098: POP
30099: POP
// array := tmp ;
30100: LD_ADDR_VAR 0 1
30104: PUSH
30105: LD_VAR 0 10
30109: ST_TO_ADDR
// end ;
30110: GO 29991
30112: POP
30113: POP
// result := array ;
30114: LD_ADDR_VAR 0 5
30118: PUSH
30119: LD_VAR 0 1
30123: ST_TO_ADDR
// end ;
30124: LD_VAR 0 5
30128: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30129: LD_INT 0
30131: PPUSH
30132: PPUSH
// result := 0 ;
30133: LD_ADDR_VAR 0 3
30137: PUSH
30138: LD_INT 0
30140: ST_TO_ADDR
// if not array or not value in array then
30141: LD_VAR 0 1
30145: NOT
30146: PUSH
30147: LD_VAR 0 2
30151: PUSH
30152: LD_VAR 0 1
30156: IN
30157: NOT
30158: OR
30159: IFFALSE 30163
// exit ;
30161: GO 30217
// for i = 1 to array do
30163: LD_ADDR_VAR 0 4
30167: PUSH
30168: DOUBLE
30169: LD_INT 1
30171: DEC
30172: ST_TO_ADDR
30173: LD_VAR 0 1
30177: PUSH
30178: FOR_TO
30179: IFFALSE 30215
// if value = array [ i ] then
30181: LD_VAR 0 2
30185: PUSH
30186: LD_VAR 0 1
30190: PUSH
30191: LD_VAR 0 4
30195: ARRAY
30196: EQUAL
30197: IFFALSE 30213
// begin result := i ;
30199: LD_ADDR_VAR 0 3
30203: PUSH
30204: LD_VAR 0 4
30208: ST_TO_ADDR
// exit ;
30209: POP
30210: POP
30211: GO 30217
// end ;
30213: GO 30178
30215: POP
30216: POP
// end ;
30217: LD_VAR 0 3
30221: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30222: LD_INT 0
30224: PPUSH
// vc_chassis := chassis ;
30225: LD_ADDR_OWVAR 37
30229: PUSH
30230: LD_VAR 0 1
30234: ST_TO_ADDR
// vc_engine := engine ;
30235: LD_ADDR_OWVAR 39
30239: PUSH
30240: LD_VAR 0 2
30244: ST_TO_ADDR
// vc_control := control ;
30245: LD_ADDR_OWVAR 38
30249: PUSH
30250: LD_VAR 0 3
30254: ST_TO_ADDR
// vc_weapon := weapon ;
30255: LD_ADDR_OWVAR 40
30259: PUSH
30260: LD_VAR 0 4
30264: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30265: LD_ADDR_OWVAR 41
30269: PUSH
30270: LD_VAR 0 5
30274: ST_TO_ADDR
// end ;
30275: LD_VAR 0 6
30279: RET
// export function WantPlant ( unit ) ; var task ; begin
30280: LD_INT 0
30282: PPUSH
30283: PPUSH
// result := false ;
30284: LD_ADDR_VAR 0 2
30288: PUSH
30289: LD_INT 0
30291: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30292: LD_ADDR_VAR 0 3
30296: PUSH
30297: LD_VAR 0 1
30301: PPUSH
30302: CALL_OW 437
30306: ST_TO_ADDR
// if task then
30307: LD_VAR 0 3
30311: IFFALSE 30339
// if task [ 1 ] [ 1 ] = p then
30313: LD_VAR 0 3
30317: PUSH
30318: LD_INT 1
30320: ARRAY
30321: PUSH
30322: LD_INT 1
30324: ARRAY
30325: PUSH
30326: LD_STRING p
30328: EQUAL
30329: IFFALSE 30339
// result := true ;
30331: LD_ADDR_VAR 0 2
30335: PUSH
30336: LD_INT 1
30338: ST_TO_ADDR
// end ;
30339: LD_VAR 0 2
30343: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30344: LD_INT 0
30346: PPUSH
30347: PPUSH
30348: PPUSH
30349: PPUSH
// if pos < 1 then
30350: LD_VAR 0 2
30354: PUSH
30355: LD_INT 1
30357: LESS
30358: IFFALSE 30362
// exit ;
30360: GO 30665
// if pos = 1 then
30362: LD_VAR 0 2
30366: PUSH
30367: LD_INT 1
30369: EQUAL
30370: IFFALSE 30403
// result := Replace ( arr , pos [ 1 ] , value ) else
30372: LD_ADDR_VAR 0 4
30376: PUSH
30377: LD_VAR 0 1
30381: PPUSH
30382: LD_VAR 0 2
30386: PUSH
30387: LD_INT 1
30389: ARRAY
30390: PPUSH
30391: LD_VAR 0 3
30395: PPUSH
30396: CALL_OW 1
30400: ST_TO_ADDR
30401: GO 30665
// begin tmp := arr ;
30403: LD_ADDR_VAR 0 6
30407: PUSH
30408: LD_VAR 0 1
30412: ST_TO_ADDR
// s_arr := [ tmp ] ;
30413: LD_ADDR_VAR 0 7
30417: PUSH
30418: LD_VAR 0 6
30422: PUSH
30423: EMPTY
30424: LIST
30425: ST_TO_ADDR
// for i = 1 to pos - 1 do
30426: LD_ADDR_VAR 0 5
30430: PUSH
30431: DOUBLE
30432: LD_INT 1
30434: DEC
30435: ST_TO_ADDR
30436: LD_VAR 0 2
30440: PUSH
30441: LD_INT 1
30443: MINUS
30444: PUSH
30445: FOR_TO
30446: IFFALSE 30491
// begin tmp := tmp [ pos [ i ] ] ;
30448: LD_ADDR_VAR 0 6
30452: PUSH
30453: LD_VAR 0 6
30457: PUSH
30458: LD_VAR 0 2
30462: PUSH
30463: LD_VAR 0 5
30467: ARRAY
30468: ARRAY
30469: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30470: LD_ADDR_VAR 0 7
30474: PUSH
30475: LD_VAR 0 7
30479: PUSH
30480: LD_VAR 0 6
30484: PUSH
30485: EMPTY
30486: LIST
30487: ADD
30488: ST_TO_ADDR
// end ;
30489: GO 30445
30491: POP
30492: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30493: LD_ADDR_VAR 0 6
30497: PUSH
30498: LD_VAR 0 6
30502: PPUSH
30503: LD_VAR 0 2
30507: PUSH
30508: LD_VAR 0 2
30512: ARRAY
30513: PPUSH
30514: LD_VAR 0 3
30518: PPUSH
30519: CALL_OW 1
30523: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30524: LD_ADDR_VAR 0 7
30528: PUSH
30529: LD_VAR 0 7
30533: PPUSH
30534: LD_VAR 0 7
30538: PPUSH
30539: LD_VAR 0 6
30543: PPUSH
30544: CALL_OW 1
30548: ST_TO_ADDR
// for i = s_arr downto 2 do
30549: LD_ADDR_VAR 0 5
30553: PUSH
30554: DOUBLE
30555: LD_VAR 0 7
30559: INC
30560: ST_TO_ADDR
30561: LD_INT 2
30563: PUSH
30564: FOR_DOWNTO
30565: IFFALSE 30649
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30567: LD_ADDR_VAR 0 6
30571: PUSH
30572: LD_VAR 0 7
30576: PUSH
30577: LD_VAR 0 5
30581: PUSH
30582: LD_INT 1
30584: MINUS
30585: ARRAY
30586: PPUSH
30587: LD_VAR 0 2
30591: PUSH
30592: LD_VAR 0 5
30596: PUSH
30597: LD_INT 1
30599: MINUS
30600: ARRAY
30601: PPUSH
30602: LD_VAR 0 7
30606: PUSH
30607: LD_VAR 0 5
30611: ARRAY
30612: PPUSH
30613: CALL_OW 1
30617: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30618: LD_ADDR_VAR 0 7
30622: PUSH
30623: LD_VAR 0 7
30627: PPUSH
30628: LD_VAR 0 5
30632: PUSH
30633: LD_INT 1
30635: MINUS
30636: PPUSH
30637: LD_VAR 0 6
30641: PPUSH
30642: CALL_OW 1
30646: ST_TO_ADDR
// end ;
30647: GO 30564
30649: POP
30650: POP
// result := s_arr [ 1 ] ;
30651: LD_ADDR_VAR 0 4
30655: PUSH
30656: LD_VAR 0 7
30660: PUSH
30661: LD_INT 1
30663: ARRAY
30664: ST_TO_ADDR
// end ; end ;
30665: LD_VAR 0 4
30669: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30670: LD_INT 0
30672: PPUSH
30673: PPUSH
// if not list then
30674: LD_VAR 0 1
30678: NOT
30679: IFFALSE 30683
// exit ;
30681: GO 30774
// i := list [ pos1 ] ;
30683: LD_ADDR_VAR 0 5
30687: PUSH
30688: LD_VAR 0 1
30692: PUSH
30693: LD_VAR 0 2
30697: ARRAY
30698: ST_TO_ADDR
// if not i then
30699: LD_VAR 0 5
30703: NOT
30704: IFFALSE 30708
// exit ;
30706: GO 30774
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30708: LD_ADDR_VAR 0 1
30712: PUSH
30713: LD_VAR 0 1
30717: PPUSH
30718: LD_VAR 0 2
30722: PPUSH
30723: LD_VAR 0 1
30727: PUSH
30728: LD_VAR 0 3
30732: ARRAY
30733: PPUSH
30734: CALL_OW 1
30738: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30739: LD_ADDR_VAR 0 1
30743: PUSH
30744: LD_VAR 0 1
30748: PPUSH
30749: LD_VAR 0 3
30753: PPUSH
30754: LD_VAR 0 5
30758: PPUSH
30759: CALL_OW 1
30763: ST_TO_ADDR
// result := list ;
30764: LD_ADDR_VAR 0 4
30768: PUSH
30769: LD_VAR 0 1
30773: ST_TO_ADDR
// end ;
30774: LD_VAR 0 4
30778: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30779: LD_INT 0
30781: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30782: LD_ADDR_VAR 0 5
30786: PUSH
30787: LD_VAR 0 1
30791: PPUSH
30792: CALL_OW 250
30796: PPUSH
30797: LD_VAR 0 1
30801: PPUSH
30802: CALL_OW 251
30806: PPUSH
30807: LD_VAR 0 2
30811: PPUSH
30812: LD_VAR 0 3
30816: PPUSH
30817: LD_VAR 0 4
30821: PPUSH
30822: CALL 30832 0 5
30826: ST_TO_ADDR
// end ;
30827: LD_VAR 0 5
30831: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30832: LD_INT 0
30834: PPUSH
30835: PPUSH
30836: PPUSH
30837: PPUSH
// if not list then
30838: LD_VAR 0 3
30842: NOT
30843: IFFALSE 30847
// exit ;
30845: GO 31235
// result := [ ] ;
30847: LD_ADDR_VAR 0 6
30851: PUSH
30852: EMPTY
30853: ST_TO_ADDR
// for i in list do
30854: LD_ADDR_VAR 0 7
30858: PUSH
30859: LD_VAR 0 3
30863: PUSH
30864: FOR_IN
30865: IFFALSE 31067
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30867: LD_ADDR_VAR 0 9
30871: PUSH
30872: LD_VAR 0 7
30876: PPUSH
30877: LD_VAR 0 1
30881: PPUSH
30882: LD_VAR 0 2
30886: PPUSH
30887: CALL_OW 297
30891: ST_TO_ADDR
// if not result then
30892: LD_VAR 0 6
30896: NOT
30897: IFFALSE 30923
// result := [ [ i , tmp ] ] else
30899: LD_ADDR_VAR 0 6
30903: PUSH
30904: LD_VAR 0 7
30908: PUSH
30909: LD_VAR 0 9
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: EMPTY
30919: LIST
30920: ST_TO_ADDR
30921: GO 31065
// begin if result [ result ] [ 2 ] < tmp then
30923: LD_VAR 0 6
30927: PUSH
30928: LD_VAR 0 6
30932: ARRAY
30933: PUSH
30934: LD_INT 2
30936: ARRAY
30937: PUSH
30938: LD_VAR 0 9
30942: LESS
30943: IFFALSE 30985
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30945: LD_ADDR_VAR 0 6
30949: PUSH
30950: LD_VAR 0 6
30954: PPUSH
30955: LD_VAR 0 6
30959: PUSH
30960: LD_INT 1
30962: PLUS
30963: PPUSH
30964: LD_VAR 0 7
30968: PUSH
30969: LD_VAR 0 9
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PPUSH
30978: CALL_OW 2
30982: ST_TO_ADDR
30983: GO 31065
// for j = 1 to result do
30985: LD_ADDR_VAR 0 8
30989: PUSH
30990: DOUBLE
30991: LD_INT 1
30993: DEC
30994: ST_TO_ADDR
30995: LD_VAR 0 6
30999: PUSH
31000: FOR_TO
31001: IFFALSE 31063
// begin if tmp < result [ j ] [ 2 ] then
31003: LD_VAR 0 9
31007: PUSH
31008: LD_VAR 0 6
31012: PUSH
31013: LD_VAR 0 8
31017: ARRAY
31018: PUSH
31019: LD_INT 2
31021: ARRAY
31022: LESS
31023: IFFALSE 31061
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31025: LD_ADDR_VAR 0 6
31029: PUSH
31030: LD_VAR 0 6
31034: PPUSH
31035: LD_VAR 0 8
31039: PPUSH
31040: LD_VAR 0 7
31044: PUSH
31045: LD_VAR 0 9
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PPUSH
31054: CALL_OW 2
31058: ST_TO_ADDR
// break ;
31059: GO 31063
// end ; end ;
31061: GO 31000
31063: POP
31064: POP
// end ; end ;
31065: GO 30864
31067: POP
31068: POP
// if result and not asc then
31069: LD_VAR 0 6
31073: PUSH
31074: LD_VAR 0 4
31078: NOT
31079: AND
31080: IFFALSE 31155
// begin tmp := result ;
31082: LD_ADDR_VAR 0 9
31086: PUSH
31087: LD_VAR 0 6
31091: ST_TO_ADDR
// for i = tmp downto 1 do
31092: LD_ADDR_VAR 0 7
31096: PUSH
31097: DOUBLE
31098: LD_VAR 0 9
31102: INC
31103: ST_TO_ADDR
31104: LD_INT 1
31106: PUSH
31107: FOR_DOWNTO
31108: IFFALSE 31153
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31110: LD_ADDR_VAR 0 6
31114: PUSH
31115: LD_VAR 0 6
31119: PPUSH
31120: LD_VAR 0 9
31124: PUSH
31125: LD_VAR 0 7
31129: MINUS
31130: PUSH
31131: LD_INT 1
31133: PLUS
31134: PPUSH
31135: LD_VAR 0 9
31139: PUSH
31140: LD_VAR 0 7
31144: ARRAY
31145: PPUSH
31146: CALL_OW 1
31150: ST_TO_ADDR
31151: GO 31107
31153: POP
31154: POP
// end ; tmp := [ ] ;
31155: LD_ADDR_VAR 0 9
31159: PUSH
31160: EMPTY
31161: ST_TO_ADDR
// if mode then
31162: LD_VAR 0 5
31166: IFFALSE 31235
// begin for i = 1 to result do
31168: LD_ADDR_VAR 0 7
31172: PUSH
31173: DOUBLE
31174: LD_INT 1
31176: DEC
31177: ST_TO_ADDR
31178: LD_VAR 0 6
31182: PUSH
31183: FOR_TO
31184: IFFALSE 31223
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31186: LD_ADDR_VAR 0 9
31190: PUSH
31191: LD_VAR 0 9
31195: PPUSH
31196: LD_VAR 0 7
31200: PPUSH
31201: LD_VAR 0 6
31205: PUSH
31206: LD_VAR 0 7
31210: ARRAY
31211: PUSH
31212: LD_INT 1
31214: ARRAY
31215: PPUSH
31216: CALL_OW 1
31220: ST_TO_ADDR
31221: GO 31183
31223: POP
31224: POP
// result := tmp ;
31225: LD_ADDR_VAR 0 6
31229: PUSH
31230: LD_VAR 0 9
31234: ST_TO_ADDR
// end ; end ;
31235: LD_VAR 0 6
31239: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31240: LD_INT 0
31242: PPUSH
31243: PPUSH
31244: PPUSH
31245: PPUSH
31246: PPUSH
31247: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31248: LD_ADDR_VAR 0 5
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: EMPTY
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: ST_TO_ADDR
// if not x or not y then
31270: LD_VAR 0 2
31274: NOT
31275: PUSH
31276: LD_VAR 0 3
31280: NOT
31281: OR
31282: IFFALSE 31286
// exit ;
31284: GO 32936
// if not range then
31286: LD_VAR 0 4
31290: NOT
31291: IFFALSE 31301
// range := 10 ;
31293: LD_ADDR_VAR 0 4
31297: PUSH
31298: LD_INT 10
31300: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31301: LD_ADDR_VAR 0 8
31305: PUSH
31306: LD_INT 81
31308: PUSH
31309: LD_VAR 0 1
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 92
31320: PUSH
31321: LD_VAR 0 2
31325: PUSH
31326: LD_VAR 0 3
31330: PUSH
31331: LD_VAR 0 4
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 3
31344: PUSH
31345: LD_INT 21
31347: PUSH
31348: LD_INT 3
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: PPUSH
31364: CALL_OW 69
31368: ST_TO_ADDR
// if not tmp then
31369: LD_VAR 0 8
31373: NOT
31374: IFFALSE 31378
// exit ;
31376: GO 32936
// for i in tmp do
31378: LD_ADDR_VAR 0 6
31382: PUSH
31383: LD_VAR 0 8
31387: PUSH
31388: FOR_IN
31389: IFFALSE 32911
// begin points := [ 0 , 0 , 0 ] ;
31391: LD_ADDR_VAR 0 9
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: ST_TO_ADDR
// bpoints := 1 ;
31410: LD_ADDR_VAR 0 10
31414: PUSH
31415: LD_INT 1
31417: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31418: LD_VAR 0 6
31422: PPUSH
31423: CALL_OW 247
31427: PUSH
31428: LD_INT 1
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 32014
31436: POP
// begin if GetClass ( i ) = 1 then
31437: LD_VAR 0 6
31441: PPUSH
31442: CALL_OW 257
31446: PUSH
31447: LD_INT 1
31449: EQUAL
31450: IFFALSE 31471
// points := [ 10 , 5 , 3 ] ;
31452: LD_ADDR_VAR 0 9
31456: PUSH
31457: LD_INT 10
31459: PUSH
31460: LD_INT 5
31462: PUSH
31463: LD_INT 3
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: LIST
31470: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31471: LD_VAR 0 6
31475: PPUSH
31476: CALL_OW 257
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: LD_INT 3
31486: PUSH
31487: LD_INT 4
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: IN
31495: IFFALSE 31516
// points := [ 3 , 2 , 1 ] ;
31497: LD_ADDR_VAR 0 9
31501: PUSH
31502: LD_INT 3
31504: PUSH
31505: LD_INT 2
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: LIST
31515: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31516: LD_VAR 0 6
31520: PPUSH
31521: CALL_OW 257
31525: PUSH
31526: LD_INT 5
31528: EQUAL
31529: IFFALSE 31550
// points := [ 130 , 5 , 2 ] ;
31531: LD_ADDR_VAR 0 9
31535: PUSH
31536: LD_INT 130
31538: PUSH
31539: LD_INT 5
31541: PUSH
31542: LD_INT 2
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31550: LD_VAR 0 6
31554: PPUSH
31555: CALL_OW 257
31559: PUSH
31560: LD_INT 8
31562: EQUAL
31563: IFFALSE 31584
// points := [ 35 , 35 , 30 ] ;
31565: LD_ADDR_VAR 0 9
31569: PUSH
31570: LD_INT 35
31572: PUSH
31573: LD_INT 35
31575: PUSH
31576: LD_INT 30
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: LIST
31583: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31584: LD_VAR 0 6
31588: PPUSH
31589: CALL_OW 257
31593: PUSH
31594: LD_INT 9
31596: EQUAL
31597: IFFALSE 31618
// points := [ 20 , 55 , 40 ] ;
31599: LD_ADDR_VAR 0 9
31603: PUSH
31604: LD_INT 20
31606: PUSH
31607: LD_INT 55
31609: PUSH
31610: LD_INT 40
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31618: LD_VAR 0 6
31622: PPUSH
31623: CALL_OW 257
31627: PUSH
31628: LD_INT 12
31630: PUSH
31631: LD_INT 16
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: IN
31638: IFFALSE 31659
// points := [ 5 , 3 , 2 ] ;
31640: LD_ADDR_VAR 0 9
31644: PUSH
31645: LD_INT 5
31647: PUSH
31648: LD_INT 3
31650: PUSH
31651: LD_INT 2
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: LIST
31658: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31659: LD_VAR 0 6
31663: PPUSH
31664: CALL_OW 257
31668: PUSH
31669: LD_INT 17
31671: EQUAL
31672: IFFALSE 31693
// points := [ 100 , 50 , 75 ] ;
31674: LD_ADDR_VAR 0 9
31678: PUSH
31679: LD_INT 100
31681: PUSH
31682: LD_INT 50
31684: PUSH
31685: LD_INT 75
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: LIST
31692: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31693: LD_VAR 0 6
31697: PPUSH
31698: CALL_OW 257
31702: PUSH
31703: LD_INT 15
31705: EQUAL
31706: IFFALSE 31727
// points := [ 10 , 5 , 3 ] ;
31708: LD_ADDR_VAR 0 9
31712: PUSH
31713: LD_INT 10
31715: PUSH
31716: LD_INT 5
31718: PUSH
31719: LD_INT 3
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: LIST
31726: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31727: LD_VAR 0 6
31731: PPUSH
31732: CALL_OW 257
31736: PUSH
31737: LD_INT 14
31739: EQUAL
31740: IFFALSE 31761
// points := [ 10 , 0 , 0 ] ;
31742: LD_ADDR_VAR 0 9
31746: PUSH
31747: LD_INT 10
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: LIST
31760: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31761: LD_VAR 0 6
31765: PPUSH
31766: CALL_OW 257
31770: PUSH
31771: LD_INT 11
31773: EQUAL
31774: IFFALSE 31795
// points := [ 30 , 10 , 5 ] ;
31776: LD_ADDR_VAR 0 9
31780: PUSH
31781: LD_INT 30
31783: PUSH
31784: LD_INT 10
31786: PUSH
31787: LD_INT 5
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31795: LD_VAR 0 1
31799: PPUSH
31800: LD_INT 5
31802: PPUSH
31803: CALL_OW 321
31807: PUSH
31808: LD_INT 2
31810: EQUAL
31811: IFFALSE 31828
// bpoints := bpoints * 1.8 ;
31813: LD_ADDR_VAR 0 10
31817: PUSH
31818: LD_VAR 0 10
31822: PUSH
31823: LD_REAL  1.80000000000000E+0000
31826: MUL
31827: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31828: LD_VAR 0 6
31832: PPUSH
31833: CALL_OW 257
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 3
31846: PUSH
31847: LD_INT 4
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: IN
31856: PUSH
31857: LD_VAR 0 1
31861: PPUSH
31862: LD_INT 51
31864: PPUSH
31865: CALL_OW 321
31869: PUSH
31870: LD_INT 2
31872: EQUAL
31873: AND
31874: IFFALSE 31891
// bpoints := bpoints * 1.2 ;
31876: LD_ADDR_VAR 0 10
31880: PUSH
31881: LD_VAR 0 10
31885: PUSH
31886: LD_REAL  1.20000000000000E+0000
31889: MUL
31890: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31891: LD_VAR 0 6
31895: PPUSH
31896: CALL_OW 257
31900: PUSH
31901: LD_INT 5
31903: PUSH
31904: LD_INT 7
31906: PUSH
31907: LD_INT 9
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: IN
31915: PUSH
31916: LD_VAR 0 1
31920: PPUSH
31921: LD_INT 52
31923: PPUSH
31924: CALL_OW 321
31928: PUSH
31929: LD_INT 2
31931: EQUAL
31932: AND
31933: IFFALSE 31950
// bpoints := bpoints * 1.5 ;
31935: LD_ADDR_VAR 0 10
31939: PUSH
31940: LD_VAR 0 10
31944: PUSH
31945: LD_REAL  1.50000000000000E+0000
31948: MUL
31949: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31950: LD_VAR 0 1
31954: PPUSH
31955: LD_INT 66
31957: PPUSH
31958: CALL_OW 321
31962: PUSH
31963: LD_INT 2
31965: EQUAL
31966: IFFALSE 31983
// bpoints := bpoints * 1.1 ;
31968: LD_ADDR_VAR 0 10
31972: PUSH
31973: LD_VAR 0 10
31977: PUSH
31978: LD_REAL  1.10000000000000E+0000
31981: MUL
31982: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31983: LD_ADDR_VAR 0 10
31987: PUSH
31988: LD_VAR 0 10
31992: PUSH
31993: LD_VAR 0 6
31997: PPUSH
31998: LD_INT 1
32000: PPUSH
32001: CALL_OW 259
32005: PUSH
32006: LD_REAL  1.15000000000000E+0000
32009: MUL
32010: MUL
32011: ST_TO_ADDR
// end ; unit_vehicle :
32012: GO 32840
32014: LD_INT 2
32016: DOUBLE
32017: EQUAL
32018: IFTRUE 32022
32020: GO 32828
32022: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32023: LD_VAR 0 6
32027: PPUSH
32028: CALL_OW 264
32032: PUSH
32033: LD_INT 2
32035: PUSH
32036: LD_INT 42
32038: PUSH
32039: LD_INT 24
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: LIST
32046: IN
32047: IFFALSE 32068
// points := [ 25 , 5 , 3 ] ;
32049: LD_ADDR_VAR 0 9
32053: PUSH
32054: LD_INT 25
32056: PUSH
32057: LD_INT 5
32059: PUSH
32060: LD_INT 3
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: LIST
32067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32068: LD_VAR 0 6
32072: PPUSH
32073: CALL_OW 264
32077: PUSH
32078: LD_INT 4
32080: PUSH
32081: LD_INT 43
32083: PUSH
32084: LD_INT 25
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: LIST
32091: IN
32092: IFFALSE 32113
// points := [ 40 , 15 , 5 ] ;
32094: LD_ADDR_VAR 0 9
32098: PUSH
32099: LD_INT 40
32101: PUSH
32102: LD_INT 15
32104: PUSH
32105: LD_INT 5
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32113: LD_VAR 0 6
32117: PPUSH
32118: CALL_OW 264
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: LD_INT 23
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: IN
32133: IFFALSE 32154
// points := [ 7 , 25 , 8 ] ;
32135: LD_ADDR_VAR 0 9
32139: PUSH
32140: LD_INT 7
32142: PUSH
32143: LD_INT 25
32145: PUSH
32146: LD_INT 8
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32154: LD_VAR 0 6
32158: PPUSH
32159: CALL_OW 264
32163: PUSH
32164: LD_INT 5
32166: PUSH
32167: LD_INT 27
32169: PUSH
32170: LD_INT 44
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: IN
32178: IFFALSE 32199
// points := [ 14 , 50 , 16 ] ;
32180: LD_ADDR_VAR 0 9
32184: PUSH
32185: LD_INT 14
32187: PUSH
32188: LD_INT 50
32190: PUSH
32191: LD_INT 16
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: LIST
32198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32199: LD_VAR 0 6
32203: PPUSH
32204: CALL_OW 264
32208: PUSH
32209: LD_INT 6
32211: PUSH
32212: LD_INT 46
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: IN
32219: IFFALSE 32240
// points := [ 32 , 120 , 70 ] ;
32221: LD_ADDR_VAR 0 9
32225: PUSH
32226: LD_INT 32
32228: PUSH
32229: LD_INT 120
32231: PUSH
32232: LD_INT 70
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: LIST
32239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32240: LD_VAR 0 6
32244: PPUSH
32245: CALL_OW 264
32249: PUSH
32250: LD_INT 7
32252: PUSH
32253: LD_INT 28
32255: PUSH
32256: LD_INT 45
32258: PUSH
32259: LD_INT 92
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: IN
32268: IFFALSE 32289
// points := [ 35 , 20 , 45 ] ;
32270: LD_ADDR_VAR 0 9
32274: PUSH
32275: LD_INT 35
32277: PUSH
32278: LD_INT 20
32280: PUSH
32281: LD_INT 45
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32289: LD_VAR 0 6
32293: PPUSH
32294: CALL_OW 264
32298: PUSH
32299: LD_INT 47
32301: PUSH
32302: EMPTY
32303: LIST
32304: IN
32305: IFFALSE 32326
// points := [ 67 , 45 , 75 ] ;
32307: LD_ADDR_VAR 0 9
32311: PUSH
32312: LD_INT 67
32314: PUSH
32315: LD_INT 45
32317: PUSH
32318: LD_INT 75
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: LIST
32325: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32326: LD_VAR 0 6
32330: PPUSH
32331: CALL_OW 264
32335: PUSH
32336: LD_INT 26
32338: PUSH
32339: EMPTY
32340: LIST
32341: IN
32342: IFFALSE 32363
// points := [ 120 , 30 , 80 ] ;
32344: LD_ADDR_VAR 0 9
32348: PUSH
32349: LD_INT 120
32351: PUSH
32352: LD_INT 30
32354: PUSH
32355: LD_INT 80
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: LIST
32362: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32363: LD_VAR 0 6
32367: PPUSH
32368: CALL_OW 264
32372: PUSH
32373: LD_INT 22
32375: PUSH
32376: EMPTY
32377: LIST
32378: IN
32379: IFFALSE 32400
// points := [ 40 , 1 , 1 ] ;
32381: LD_ADDR_VAR 0 9
32385: PUSH
32386: LD_INT 40
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: LIST
32399: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32400: LD_VAR 0 6
32404: PPUSH
32405: CALL_OW 264
32409: PUSH
32410: LD_INT 29
32412: PUSH
32413: EMPTY
32414: LIST
32415: IN
32416: IFFALSE 32437
// points := [ 70 , 200 , 400 ] ;
32418: LD_ADDR_VAR 0 9
32422: PUSH
32423: LD_INT 70
32425: PUSH
32426: LD_INT 200
32428: PUSH
32429: LD_INT 400
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: LIST
32436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32437: LD_VAR 0 6
32441: PPUSH
32442: CALL_OW 264
32446: PUSH
32447: LD_INT 14
32449: PUSH
32450: LD_INT 53
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: IN
32457: IFFALSE 32478
// points := [ 40 , 10 , 20 ] ;
32459: LD_ADDR_VAR 0 9
32463: PUSH
32464: LD_INT 40
32466: PUSH
32467: LD_INT 10
32469: PUSH
32470: LD_INT 20
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: LIST
32477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32478: LD_VAR 0 6
32482: PPUSH
32483: CALL_OW 264
32487: PUSH
32488: LD_INT 9
32490: PUSH
32491: EMPTY
32492: LIST
32493: IN
32494: IFFALSE 32515
// points := [ 5 , 70 , 20 ] ;
32496: LD_ADDR_VAR 0 9
32500: PUSH
32501: LD_INT 5
32503: PUSH
32504: LD_INT 70
32506: PUSH
32507: LD_INT 20
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32515: LD_VAR 0 6
32519: PPUSH
32520: CALL_OW 264
32524: PUSH
32525: LD_INT 10
32527: PUSH
32528: EMPTY
32529: LIST
32530: IN
32531: IFFALSE 32552
// points := [ 35 , 110 , 70 ] ;
32533: LD_ADDR_VAR 0 9
32537: PUSH
32538: LD_INT 35
32540: PUSH
32541: LD_INT 110
32543: PUSH
32544: LD_INT 70
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32552: LD_VAR 0 6
32556: PPUSH
32557: CALL_OW 265
32561: PUSH
32562: LD_INT 25
32564: EQUAL
32565: IFFALSE 32586
// points := [ 80 , 65 , 100 ] ;
32567: LD_ADDR_VAR 0 9
32571: PUSH
32572: LD_INT 80
32574: PUSH
32575: LD_INT 65
32577: PUSH
32578: LD_INT 100
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32586: LD_VAR 0 6
32590: PPUSH
32591: CALL_OW 263
32595: PUSH
32596: LD_INT 1
32598: EQUAL
32599: IFFALSE 32634
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32601: LD_ADDR_VAR 0 10
32605: PUSH
32606: LD_VAR 0 10
32610: PUSH
32611: LD_VAR 0 6
32615: PPUSH
32616: CALL_OW 311
32620: PPUSH
32621: LD_INT 3
32623: PPUSH
32624: CALL_OW 259
32628: PUSH
32629: LD_INT 4
32631: MUL
32632: MUL
32633: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32634: LD_VAR 0 6
32638: PPUSH
32639: CALL_OW 263
32643: PUSH
32644: LD_INT 2
32646: EQUAL
32647: IFFALSE 32698
// begin j := IsControledBy ( i ) ;
32649: LD_ADDR_VAR 0 7
32653: PUSH
32654: LD_VAR 0 6
32658: PPUSH
32659: CALL_OW 312
32663: ST_TO_ADDR
// if j then
32664: LD_VAR 0 7
32668: IFFALSE 32698
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32670: LD_ADDR_VAR 0 10
32674: PUSH
32675: LD_VAR 0 10
32679: PUSH
32680: LD_VAR 0 7
32684: PPUSH
32685: LD_INT 3
32687: PPUSH
32688: CALL_OW 259
32692: PUSH
32693: LD_INT 3
32695: MUL
32696: MUL
32697: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32698: LD_VAR 0 6
32702: PPUSH
32703: CALL_OW 264
32707: PUSH
32708: LD_INT 5
32710: PUSH
32711: LD_INT 6
32713: PUSH
32714: LD_INT 46
32716: PUSH
32717: LD_INT 44
32719: PUSH
32720: LD_INT 47
32722: PUSH
32723: LD_INT 45
32725: PUSH
32726: LD_INT 28
32728: PUSH
32729: LD_INT 7
32731: PUSH
32732: LD_INT 27
32734: PUSH
32735: LD_INT 29
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: IN
32750: PUSH
32751: LD_VAR 0 1
32755: PPUSH
32756: LD_INT 52
32758: PPUSH
32759: CALL_OW 321
32763: PUSH
32764: LD_INT 2
32766: EQUAL
32767: AND
32768: IFFALSE 32785
// bpoints := bpoints * 1.2 ;
32770: LD_ADDR_VAR 0 10
32774: PUSH
32775: LD_VAR 0 10
32779: PUSH
32780: LD_REAL  1.20000000000000E+0000
32783: MUL
32784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32785: LD_VAR 0 6
32789: PPUSH
32790: CALL_OW 264
32794: PUSH
32795: LD_INT 6
32797: PUSH
32798: LD_INT 46
32800: PUSH
32801: LD_INT 47
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: IN
32809: IFFALSE 32826
// bpoints := bpoints * 1.2 ;
32811: LD_ADDR_VAR 0 10
32815: PUSH
32816: LD_VAR 0 10
32820: PUSH
32821: LD_REAL  1.20000000000000E+0000
32824: MUL
32825: ST_TO_ADDR
// end ; unit_building :
32826: GO 32840
32828: LD_INT 3
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32839
32836: POP
// ; end ;
32837: GO 32840
32839: POP
// for j = 1 to 3 do
32840: LD_ADDR_VAR 0 7
32844: PUSH
32845: DOUBLE
32846: LD_INT 1
32848: DEC
32849: ST_TO_ADDR
32850: LD_INT 3
32852: PUSH
32853: FOR_TO
32854: IFFALSE 32907
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32856: LD_ADDR_VAR 0 5
32860: PUSH
32861: LD_VAR 0 5
32865: PPUSH
32866: LD_VAR 0 7
32870: PPUSH
32871: LD_VAR 0 5
32875: PUSH
32876: LD_VAR 0 7
32880: ARRAY
32881: PUSH
32882: LD_VAR 0 9
32886: PUSH
32887: LD_VAR 0 7
32891: ARRAY
32892: PUSH
32893: LD_VAR 0 10
32897: MUL
32898: PLUS
32899: PPUSH
32900: CALL_OW 1
32904: ST_TO_ADDR
32905: GO 32853
32907: POP
32908: POP
// end ;
32909: GO 31388
32911: POP
32912: POP
// result := Replace ( result , 4 , tmp ) ;
32913: LD_ADDR_VAR 0 5
32917: PUSH
32918: LD_VAR 0 5
32922: PPUSH
32923: LD_INT 4
32925: PPUSH
32926: LD_VAR 0 8
32930: PPUSH
32931: CALL_OW 1
32935: ST_TO_ADDR
// end ;
32936: LD_VAR 0 5
32940: RET
// export function DangerAtRange ( unit , range ) ; begin
32941: LD_INT 0
32943: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32944: LD_ADDR_VAR 0 3
32948: PUSH
32949: LD_VAR 0 1
32953: PPUSH
32954: CALL_OW 255
32958: PPUSH
32959: LD_VAR 0 1
32963: PPUSH
32964: CALL_OW 250
32968: PPUSH
32969: LD_VAR 0 1
32973: PPUSH
32974: CALL_OW 251
32978: PPUSH
32979: LD_VAR 0 2
32983: PPUSH
32984: CALL 31240 0 4
32988: ST_TO_ADDR
// end ;
32989: LD_VAR 0 3
32993: RET
// export function DangerInArea ( side , area ) ; begin
32994: LD_INT 0
32996: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32997: LD_ADDR_VAR 0 3
33001: PUSH
33002: LD_VAR 0 2
33006: PPUSH
33007: LD_INT 81
33009: PUSH
33010: LD_VAR 0 1
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PPUSH
33019: CALL_OW 70
33023: ST_TO_ADDR
// end ;
33024: LD_VAR 0 3
33028: RET
// export function IsExtension ( b ) ; begin
33029: LD_INT 0
33031: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33032: LD_ADDR_VAR 0 2
33036: PUSH
33037: LD_VAR 0 1
33041: PUSH
33042: LD_INT 23
33044: PUSH
33045: LD_INT 20
33047: PUSH
33048: LD_INT 22
33050: PUSH
33051: LD_INT 17
33053: PUSH
33054: LD_INT 24
33056: PUSH
33057: LD_INT 21
33059: PUSH
33060: LD_INT 19
33062: PUSH
33063: LD_INT 16
33065: PUSH
33066: LD_INT 25
33068: PUSH
33069: LD_INT 18
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: IN
33084: ST_TO_ADDR
// end ;
33085: LD_VAR 0 2
33089: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33090: LD_INT 0
33092: PPUSH
33093: PPUSH
33094: PPUSH
// result := [ ] ;
33095: LD_ADDR_VAR 0 4
33099: PUSH
33100: EMPTY
33101: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33102: LD_ADDR_VAR 0 5
33106: PUSH
33107: LD_VAR 0 2
33111: PPUSH
33112: LD_INT 21
33114: PUSH
33115: LD_INT 3
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PPUSH
33122: CALL_OW 70
33126: ST_TO_ADDR
// if not tmp then
33127: LD_VAR 0 5
33131: NOT
33132: IFFALSE 33136
// exit ;
33134: GO 33200
// if checkLink then
33136: LD_VAR 0 3
33140: IFFALSE 33190
// begin for i in tmp do
33142: LD_ADDR_VAR 0 6
33146: PUSH
33147: LD_VAR 0 5
33151: PUSH
33152: FOR_IN
33153: IFFALSE 33188
// if GetBase ( i ) <> base then
33155: LD_VAR 0 6
33159: PPUSH
33160: CALL_OW 274
33164: PUSH
33165: LD_VAR 0 1
33169: NONEQUAL
33170: IFFALSE 33186
// ComLinkToBase ( base , i ) ;
33172: LD_VAR 0 1
33176: PPUSH
33177: LD_VAR 0 6
33181: PPUSH
33182: CALL_OW 169
33186: GO 33152
33188: POP
33189: POP
// end ; result := tmp ;
33190: LD_ADDR_VAR 0 4
33194: PUSH
33195: LD_VAR 0 5
33199: ST_TO_ADDR
// end ;
33200: LD_VAR 0 4
33204: RET
// export function ComComplete ( units , b ) ; var i ; begin
33205: LD_INT 0
33207: PPUSH
33208: PPUSH
// if not units then
33209: LD_VAR 0 1
33213: NOT
33214: IFFALSE 33218
// exit ;
33216: GO 33308
// for i in units do
33218: LD_ADDR_VAR 0 4
33222: PUSH
33223: LD_VAR 0 1
33227: PUSH
33228: FOR_IN
33229: IFFALSE 33306
// if BuildingStatus ( b ) = bs_build then
33231: LD_VAR 0 2
33235: PPUSH
33236: CALL_OW 461
33240: PUSH
33241: LD_INT 1
33243: EQUAL
33244: IFFALSE 33304
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33246: LD_VAR 0 4
33250: PPUSH
33251: LD_STRING h
33253: PUSH
33254: LD_VAR 0 2
33258: PPUSH
33259: CALL_OW 250
33263: PUSH
33264: LD_VAR 0 2
33268: PPUSH
33269: CALL_OW 251
33273: PUSH
33274: LD_VAR 0 2
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: PUSH
33297: EMPTY
33298: LIST
33299: PPUSH
33300: CALL_OW 446
33304: GO 33228
33306: POP
33307: POP
// end ;
33308: LD_VAR 0 3
33312: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33313: LD_INT 0
33315: PPUSH
33316: PPUSH
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33321: LD_VAR 0 1
33325: NOT
33326: PUSH
33327: LD_VAR 0 1
33331: PPUSH
33332: CALL_OW 263
33336: PUSH
33337: LD_INT 2
33339: NONEQUAL
33340: OR
33341: IFFALSE 33345
// exit ;
33343: GO 33661
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33345: LD_ADDR_VAR 0 6
33349: PUSH
33350: LD_INT 22
33352: PUSH
33353: LD_VAR 0 1
33357: PPUSH
33358: CALL_OW 255
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: LD_INT 30
33372: PUSH
33373: LD_INT 36
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 34
33382: PUSH
33383: LD_INT 31
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PPUSH
33399: CALL_OW 69
33403: ST_TO_ADDR
// if not tmp then
33404: LD_VAR 0 6
33408: NOT
33409: IFFALSE 33413
// exit ;
33411: GO 33661
// result := [ ] ;
33413: LD_ADDR_VAR 0 2
33417: PUSH
33418: EMPTY
33419: ST_TO_ADDR
// for i in tmp do
33420: LD_ADDR_VAR 0 3
33424: PUSH
33425: LD_VAR 0 6
33429: PUSH
33430: FOR_IN
33431: IFFALSE 33502
// begin t := UnitsInside ( i ) ;
33433: LD_ADDR_VAR 0 4
33437: PUSH
33438: LD_VAR 0 3
33442: PPUSH
33443: CALL_OW 313
33447: ST_TO_ADDR
// if t then
33448: LD_VAR 0 4
33452: IFFALSE 33500
// for j in t do
33454: LD_ADDR_VAR 0 7
33458: PUSH
33459: LD_VAR 0 4
33463: PUSH
33464: FOR_IN
33465: IFFALSE 33498
// result := Replace ( result , result + 1 , j ) ;
33467: LD_ADDR_VAR 0 2
33471: PUSH
33472: LD_VAR 0 2
33476: PPUSH
33477: LD_VAR 0 2
33481: PUSH
33482: LD_INT 1
33484: PLUS
33485: PPUSH
33486: LD_VAR 0 7
33490: PPUSH
33491: CALL_OW 1
33495: ST_TO_ADDR
33496: GO 33464
33498: POP
33499: POP
// end ;
33500: GO 33430
33502: POP
33503: POP
// if not result then
33504: LD_VAR 0 2
33508: NOT
33509: IFFALSE 33513
// exit ;
33511: GO 33661
// mech := result [ 1 ] ;
33513: LD_ADDR_VAR 0 5
33517: PUSH
33518: LD_VAR 0 2
33522: PUSH
33523: LD_INT 1
33525: ARRAY
33526: ST_TO_ADDR
// if result > 1 then
33527: LD_VAR 0 2
33531: PUSH
33532: LD_INT 1
33534: GREATER
33535: IFFALSE 33647
// begin for i = 2 to result do
33537: LD_ADDR_VAR 0 3
33541: PUSH
33542: DOUBLE
33543: LD_INT 2
33545: DEC
33546: ST_TO_ADDR
33547: LD_VAR 0 2
33551: PUSH
33552: FOR_TO
33553: IFFALSE 33645
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33555: LD_ADDR_VAR 0 4
33559: PUSH
33560: LD_VAR 0 2
33564: PUSH
33565: LD_VAR 0 3
33569: ARRAY
33570: PPUSH
33571: LD_INT 3
33573: PPUSH
33574: CALL_OW 259
33578: PUSH
33579: LD_VAR 0 2
33583: PUSH
33584: LD_VAR 0 3
33588: ARRAY
33589: PPUSH
33590: CALL_OW 432
33594: MINUS
33595: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33596: LD_VAR 0 4
33600: PUSH
33601: LD_VAR 0 5
33605: PPUSH
33606: LD_INT 3
33608: PPUSH
33609: CALL_OW 259
33613: PUSH
33614: LD_VAR 0 5
33618: PPUSH
33619: CALL_OW 432
33623: MINUS
33624: GREATEREQUAL
33625: IFFALSE 33643
// mech := result [ i ] ;
33627: LD_ADDR_VAR 0 5
33631: PUSH
33632: LD_VAR 0 2
33636: PUSH
33637: LD_VAR 0 3
33641: ARRAY
33642: ST_TO_ADDR
// end ;
33643: GO 33552
33645: POP
33646: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33647: LD_VAR 0 1
33651: PPUSH
33652: LD_VAR 0 5
33656: PPUSH
33657: CALL_OW 135
// end ;
33661: LD_VAR 0 2
33665: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33666: LD_INT 0
33668: PPUSH
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
33675: PPUSH
33676: PPUSH
33677: PPUSH
33678: PPUSH
33679: PPUSH
33680: PPUSH
// result := [ ] ;
33681: LD_ADDR_VAR 0 7
33685: PUSH
33686: EMPTY
33687: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33688: LD_VAR 0 1
33692: PPUSH
33693: CALL_OW 266
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: IN
33708: NOT
33709: IFFALSE 33713
// exit ;
33711: GO 35347
// if name then
33713: LD_VAR 0 3
33717: IFFALSE 33733
// SetBName ( base_dep , name ) ;
33719: LD_VAR 0 1
33723: PPUSH
33724: LD_VAR 0 3
33728: PPUSH
33729: CALL_OW 500
// base := GetBase ( base_dep ) ;
33733: LD_ADDR_VAR 0 15
33737: PUSH
33738: LD_VAR 0 1
33742: PPUSH
33743: CALL_OW 274
33747: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33748: LD_ADDR_VAR 0 16
33752: PUSH
33753: LD_VAR 0 1
33757: PPUSH
33758: CALL_OW 255
33762: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33763: LD_ADDR_VAR 0 17
33767: PUSH
33768: LD_VAR 0 1
33772: PPUSH
33773: CALL_OW 248
33777: ST_TO_ADDR
// if sources then
33778: LD_VAR 0 5
33782: IFFALSE 33829
// for i = 1 to 3 do
33784: LD_ADDR_VAR 0 8
33788: PUSH
33789: DOUBLE
33790: LD_INT 1
33792: DEC
33793: ST_TO_ADDR
33794: LD_INT 3
33796: PUSH
33797: FOR_TO
33798: IFFALSE 33827
// AddResourceType ( base , i , sources [ i ] ) ;
33800: LD_VAR 0 15
33804: PPUSH
33805: LD_VAR 0 8
33809: PPUSH
33810: LD_VAR 0 5
33814: PUSH
33815: LD_VAR 0 8
33819: ARRAY
33820: PPUSH
33821: CALL_OW 276
33825: GO 33797
33827: POP
33828: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33829: LD_ADDR_VAR 0 18
33833: PUSH
33834: LD_VAR 0 15
33838: PPUSH
33839: LD_VAR 0 2
33843: PPUSH
33844: LD_INT 1
33846: PPUSH
33847: CALL 33090 0 3
33851: ST_TO_ADDR
// InitHc ;
33852: CALL_OW 19
// InitUc ;
33856: CALL_OW 18
// uc_side := side ;
33860: LD_ADDR_OWVAR 20
33864: PUSH
33865: LD_VAR 0 16
33869: ST_TO_ADDR
// uc_nation := nation ;
33870: LD_ADDR_OWVAR 21
33874: PUSH
33875: LD_VAR 0 17
33879: ST_TO_ADDR
// if buildings then
33880: LD_VAR 0 18
33884: IFFALSE 35206
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33886: LD_ADDR_VAR 0 19
33890: PUSH
33891: LD_VAR 0 18
33895: PPUSH
33896: LD_INT 2
33898: PUSH
33899: LD_INT 30
33901: PUSH
33902: LD_INT 29
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 30
33911: PUSH
33912: LD_INT 30
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: PPUSH
33924: CALL_OW 72
33928: ST_TO_ADDR
// if tmp then
33929: LD_VAR 0 19
33933: IFFALSE 33981
// for i in tmp do
33935: LD_ADDR_VAR 0 8
33939: PUSH
33940: LD_VAR 0 19
33944: PUSH
33945: FOR_IN
33946: IFFALSE 33979
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33948: LD_VAR 0 8
33952: PPUSH
33953: CALL_OW 250
33957: PPUSH
33958: LD_VAR 0 8
33962: PPUSH
33963: CALL_OW 251
33967: PPUSH
33968: LD_VAR 0 16
33972: PPUSH
33973: CALL_OW 441
33977: GO 33945
33979: POP
33980: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33981: LD_VAR 0 18
33985: PPUSH
33986: LD_INT 2
33988: PUSH
33989: LD_INT 30
33991: PUSH
33992: LD_INT 32
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 30
34001: PUSH
34002: LD_INT 33
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: PPUSH
34014: CALL_OW 72
34018: IFFALSE 34106
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34020: LD_ADDR_VAR 0 8
34024: PUSH
34025: LD_VAR 0 18
34029: PPUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 30
34035: PUSH
34036: LD_INT 32
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 30
34045: PUSH
34046: LD_INT 33
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: PPUSH
34058: CALL_OW 72
34062: PUSH
34063: FOR_IN
34064: IFFALSE 34104
// begin if not GetBWeapon ( i ) then
34066: LD_VAR 0 8
34070: PPUSH
34071: CALL_OW 269
34075: NOT
34076: IFFALSE 34102
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34078: LD_VAR 0 8
34082: PPUSH
34083: LD_VAR 0 8
34087: PPUSH
34088: LD_VAR 0 2
34092: PPUSH
34093: CALL 35352 0 2
34097: PPUSH
34098: CALL_OW 431
// end ;
34102: GO 34063
34104: POP
34105: POP
// end ; for i = 1 to personel do
34106: LD_ADDR_VAR 0 8
34110: PUSH
34111: DOUBLE
34112: LD_INT 1
34114: DEC
34115: ST_TO_ADDR
34116: LD_VAR 0 6
34120: PUSH
34121: FOR_TO
34122: IFFALSE 35186
// begin if i > 4 then
34124: LD_VAR 0 8
34128: PUSH
34129: LD_INT 4
34131: GREATER
34132: IFFALSE 34136
// break ;
34134: GO 35186
// case i of 1 :
34136: LD_VAR 0 8
34140: PUSH
34141: LD_INT 1
34143: DOUBLE
34144: EQUAL
34145: IFTRUE 34149
34147: GO 34229
34149: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34150: LD_ADDR_VAR 0 12
34154: PUSH
34155: LD_VAR 0 18
34159: PPUSH
34160: LD_INT 22
34162: PUSH
34163: LD_VAR 0 16
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 58
34174: PUSH
34175: EMPTY
34176: LIST
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: LD_INT 30
34183: PUSH
34184: LD_INT 32
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 30
34193: PUSH
34194: LD_INT 4
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 30
34203: PUSH
34204: LD_INT 5
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: PPUSH
34222: CALL_OW 72
34226: ST_TO_ADDR
34227: GO 34451
34229: LD_INT 2
34231: DOUBLE
34232: EQUAL
34233: IFTRUE 34237
34235: GO 34299
34237: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34238: LD_ADDR_VAR 0 12
34242: PUSH
34243: LD_VAR 0 18
34247: PPUSH
34248: LD_INT 22
34250: PUSH
34251: LD_VAR 0 16
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: LD_INT 30
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 30
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PPUSH
34292: CALL_OW 72
34296: ST_TO_ADDR
34297: GO 34451
34299: LD_INT 3
34301: DOUBLE
34302: EQUAL
34303: IFTRUE 34307
34305: GO 34369
34307: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34308: LD_ADDR_VAR 0 12
34312: PUSH
34313: LD_VAR 0 18
34317: PPUSH
34318: LD_INT 22
34320: PUSH
34321: LD_VAR 0 16
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: LD_INT 30
34335: PUSH
34336: LD_INT 2
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 30
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: LIST
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PPUSH
34362: CALL_OW 72
34366: ST_TO_ADDR
34367: GO 34451
34369: LD_INT 4
34371: DOUBLE
34372: EQUAL
34373: IFTRUE 34377
34375: GO 34450
34377: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34378: LD_ADDR_VAR 0 12
34382: PUSH
34383: LD_VAR 0 18
34387: PPUSH
34388: LD_INT 22
34390: PUSH
34391: LD_VAR 0 16
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: LD_INT 30
34405: PUSH
34406: LD_INT 6
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 30
34415: PUSH
34416: LD_INT 7
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 30
34425: PUSH
34426: LD_INT 8
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PPUSH
34443: CALL_OW 72
34447: ST_TO_ADDR
34448: GO 34451
34450: POP
// if i = 1 then
34451: LD_VAR 0 8
34455: PUSH
34456: LD_INT 1
34458: EQUAL
34459: IFFALSE 34570
// begin tmp := [ ] ;
34461: LD_ADDR_VAR 0 19
34465: PUSH
34466: EMPTY
34467: ST_TO_ADDR
// for j in f do
34468: LD_ADDR_VAR 0 9
34472: PUSH
34473: LD_VAR 0 12
34477: PUSH
34478: FOR_IN
34479: IFFALSE 34552
// if GetBType ( j ) = b_bunker then
34481: LD_VAR 0 9
34485: PPUSH
34486: CALL_OW 266
34490: PUSH
34491: LD_INT 32
34493: EQUAL
34494: IFFALSE 34521
// tmp := Insert ( tmp , 1 , j ) else
34496: LD_ADDR_VAR 0 19
34500: PUSH
34501: LD_VAR 0 19
34505: PPUSH
34506: LD_INT 1
34508: PPUSH
34509: LD_VAR 0 9
34513: PPUSH
34514: CALL_OW 2
34518: ST_TO_ADDR
34519: GO 34550
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34521: LD_ADDR_VAR 0 19
34525: PUSH
34526: LD_VAR 0 19
34530: PPUSH
34531: LD_VAR 0 19
34535: PUSH
34536: LD_INT 1
34538: PLUS
34539: PPUSH
34540: LD_VAR 0 9
34544: PPUSH
34545: CALL_OW 2
34549: ST_TO_ADDR
34550: GO 34478
34552: POP
34553: POP
// if tmp then
34554: LD_VAR 0 19
34558: IFFALSE 34570
// f := tmp ;
34560: LD_ADDR_VAR 0 12
34564: PUSH
34565: LD_VAR 0 19
34569: ST_TO_ADDR
// end ; x := personel [ i ] ;
34570: LD_ADDR_VAR 0 13
34574: PUSH
34575: LD_VAR 0 6
34579: PUSH
34580: LD_VAR 0 8
34584: ARRAY
34585: ST_TO_ADDR
// if x = - 1 then
34586: LD_VAR 0 13
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: EQUAL
34595: IFFALSE 34804
// begin for j in f do
34597: LD_ADDR_VAR 0 9
34601: PUSH
34602: LD_VAR 0 12
34606: PUSH
34607: FOR_IN
34608: IFFALSE 34800
// repeat InitHc ;
34610: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34614: LD_VAR 0 9
34618: PPUSH
34619: CALL_OW 266
34623: PUSH
34624: LD_INT 5
34626: EQUAL
34627: IFFALSE 34697
// begin if UnitsInside ( j ) < 3 then
34629: LD_VAR 0 9
34633: PPUSH
34634: CALL_OW 313
34638: PUSH
34639: LD_INT 3
34641: LESS
34642: IFFALSE 34678
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34644: LD_INT 0
34646: PPUSH
34647: LD_INT 5
34649: PUSH
34650: LD_INT 8
34652: PUSH
34653: LD_INT 9
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: LIST
34660: PUSH
34661: LD_VAR 0 17
34665: ARRAY
34666: PPUSH
34667: LD_VAR 0 4
34671: PPUSH
34672: CALL_OW 380
34676: GO 34695
// PrepareHuman ( false , i , skill ) ;
34678: LD_INT 0
34680: PPUSH
34681: LD_VAR 0 8
34685: PPUSH
34686: LD_VAR 0 4
34690: PPUSH
34691: CALL_OW 380
// end else
34695: GO 34714
// PrepareHuman ( false , i , skill ) ;
34697: LD_INT 0
34699: PPUSH
34700: LD_VAR 0 8
34704: PPUSH
34705: LD_VAR 0 4
34709: PPUSH
34710: CALL_OW 380
// un := CreateHuman ;
34714: LD_ADDR_VAR 0 14
34718: PUSH
34719: CALL_OW 44
34723: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34724: LD_ADDR_VAR 0 7
34728: PUSH
34729: LD_VAR 0 7
34733: PPUSH
34734: LD_INT 1
34736: PPUSH
34737: LD_VAR 0 14
34741: PPUSH
34742: CALL_OW 2
34746: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34747: LD_VAR 0 14
34751: PPUSH
34752: LD_VAR 0 9
34756: PPUSH
34757: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34761: LD_VAR 0 9
34765: PPUSH
34766: CALL_OW 313
34770: PUSH
34771: LD_INT 6
34773: EQUAL
34774: PUSH
34775: LD_VAR 0 9
34779: PPUSH
34780: CALL_OW 266
34784: PUSH
34785: LD_INT 32
34787: PUSH
34788: LD_INT 31
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: IN
34795: OR
34796: IFFALSE 34610
34798: GO 34607
34800: POP
34801: POP
// end else
34802: GO 35184
// for j = 1 to x do
34804: LD_ADDR_VAR 0 9
34808: PUSH
34809: DOUBLE
34810: LD_INT 1
34812: DEC
34813: ST_TO_ADDR
34814: LD_VAR 0 13
34818: PUSH
34819: FOR_TO
34820: IFFALSE 35182
// begin InitHc ;
34822: CALL_OW 19
// if not f then
34826: LD_VAR 0 12
34830: NOT
34831: IFFALSE 34920
// begin PrepareHuman ( false , i , skill ) ;
34833: LD_INT 0
34835: PPUSH
34836: LD_VAR 0 8
34840: PPUSH
34841: LD_VAR 0 4
34845: PPUSH
34846: CALL_OW 380
// un := CreateHuman ;
34850: LD_ADDR_VAR 0 14
34854: PUSH
34855: CALL_OW 44
34859: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34860: LD_ADDR_VAR 0 7
34864: PUSH
34865: LD_VAR 0 7
34869: PPUSH
34870: LD_INT 1
34872: PPUSH
34873: LD_VAR 0 14
34877: PPUSH
34878: CALL_OW 2
34882: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34883: LD_VAR 0 14
34887: PPUSH
34888: LD_VAR 0 1
34892: PPUSH
34893: CALL_OW 250
34897: PPUSH
34898: LD_VAR 0 1
34902: PPUSH
34903: CALL_OW 251
34907: PPUSH
34908: LD_INT 10
34910: PPUSH
34911: LD_INT 0
34913: PPUSH
34914: CALL_OW 50
// continue ;
34918: GO 34819
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34920: LD_VAR 0 12
34924: PUSH
34925: LD_INT 1
34927: ARRAY
34928: PPUSH
34929: CALL_OW 313
34933: PUSH
34934: LD_VAR 0 12
34938: PUSH
34939: LD_INT 1
34941: ARRAY
34942: PPUSH
34943: CALL_OW 266
34947: PUSH
34948: LD_INT 32
34950: PUSH
34951: LD_INT 31
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: IN
34958: AND
34959: PUSH
34960: LD_VAR 0 12
34964: PUSH
34965: LD_INT 1
34967: ARRAY
34968: PPUSH
34969: CALL_OW 313
34973: PUSH
34974: LD_INT 6
34976: EQUAL
34977: OR
34978: IFFALSE 34998
// f := Delete ( f , 1 ) ;
34980: LD_ADDR_VAR 0 12
34984: PUSH
34985: LD_VAR 0 12
34989: PPUSH
34990: LD_INT 1
34992: PPUSH
34993: CALL_OW 3
34997: ST_TO_ADDR
// if not f then
34998: LD_VAR 0 12
35002: NOT
35003: IFFALSE 35021
// begin x := x + 2 ;
35005: LD_ADDR_VAR 0 13
35009: PUSH
35010: LD_VAR 0 13
35014: PUSH
35015: LD_INT 2
35017: PLUS
35018: ST_TO_ADDR
// continue ;
35019: GO 34819
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35021: LD_VAR 0 12
35025: PUSH
35026: LD_INT 1
35028: ARRAY
35029: PPUSH
35030: CALL_OW 266
35034: PUSH
35035: LD_INT 5
35037: EQUAL
35038: IFFALSE 35112
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35040: LD_VAR 0 12
35044: PUSH
35045: LD_INT 1
35047: ARRAY
35048: PPUSH
35049: CALL_OW 313
35053: PUSH
35054: LD_INT 3
35056: LESS
35057: IFFALSE 35093
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35059: LD_INT 0
35061: PPUSH
35062: LD_INT 5
35064: PUSH
35065: LD_INT 8
35067: PUSH
35068: LD_INT 9
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: PUSH
35076: LD_VAR 0 17
35080: ARRAY
35081: PPUSH
35082: LD_VAR 0 4
35086: PPUSH
35087: CALL_OW 380
35091: GO 35110
// PrepareHuman ( false , i , skill ) ;
35093: LD_INT 0
35095: PPUSH
35096: LD_VAR 0 8
35100: PPUSH
35101: LD_VAR 0 4
35105: PPUSH
35106: CALL_OW 380
// end else
35110: GO 35129
// PrepareHuman ( false , i , skill ) ;
35112: LD_INT 0
35114: PPUSH
35115: LD_VAR 0 8
35119: PPUSH
35120: LD_VAR 0 4
35124: PPUSH
35125: CALL_OW 380
// un := CreateHuman ;
35129: LD_ADDR_VAR 0 14
35133: PUSH
35134: CALL_OW 44
35138: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35139: LD_ADDR_VAR 0 7
35143: PUSH
35144: LD_VAR 0 7
35148: PPUSH
35149: LD_INT 1
35151: PPUSH
35152: LD_VAR 0 14
35156: PPUSH
35157: CALL_OW 2
35161: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35162: LD_VAR 0 14
35166: PPUSH
35167: LD_VAR 0 12
35171: PUSH
35172: LD_INT 1
35174: ARRAY
35175: PPUSH
35176: CALL_OW 52
// end ;
35180: GO 34819
35182: POP
35183: POP
// end ;
35184: GO 34121
35186: POP
35187: POP
// result := result ^ buildings ;
35188: LD_ADDR_VAR 0 7
35192: PUSH
35193: LD_VAR 0 7
35197: PUSH
35198: LD_VAR 0 18
35202: ADD
35203: ST_TO_ADDR
// end else
35204: GO 35347
// begin for i = 1 to personel do
35206: LD_ADDR_VAR 0 8
35210: PUSH
35211: DOUBLE
35212: LD_INT 1
35214: DEC
35215: ST_TO_ADDR
35216: LD_VAR 0 6
35220: PUSH
35221: FOR_TO
35222: IFFALSE 35345
// begin if i > 4 then
35224: LD_VAR 0 8
35228: PUSH
35229: LD_INT 4
35231: GREATER
35232: IFFALSE 35236
// break ;
35234: GO 35345
// x := personel [ i ] ;
35236: LD_ADDR_VAR 0 13
35240: PUSH
35241: LD_VAR 0 6
35245: PUSH
35246: LD_VAR 0 8
35250: ARRAY
35251: ST_TO_ADDR
// if x = - 1 then
35252: LD_VAR 0 13
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: EQUAL
35261: IFFALSE 35265
// continue ;
35263: GO 35221
// PrepareHuman ( false , i , skill ) ;
35265: LD_INT 0
35267: PPUSH
35268: LD_VAR 0 8
35272: PPUSH
35273: LD_VAR 0 4
35277: PPUSH
35278: CALL_OW 380
// un := CreateHuman ;
35282: LD_ADDR_VAR 0 14
35286: PUSH
35287: CALL_OW 44
35291: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35292: LD_VAR 0 14
35296: PPUSH
35297: LD_VAR 0 1
35301: PPUSH
35302: CALL_OW 250
35306: PPUSH
35307: LD_VAR 0 1
35311: PPUSH
35312: CALL_OW 251
35316: PPUSH
35317: LD_INT 10
35319: PPUSH
35320: LD_INT 0
35322: PPUSH
35323: CALL_OW 50
// result := result ^ un ;
35327: LD_ADDR_VAR 0 7
35331: PUSH
35332: LD_VAR 0 7
35336: PUSH
35337: LD_VAR 0 14
35341: ADD
35342: ST_TO_ADDR
// end ;
35343: GO 35221
35345: POP
35346: POP
// end ; end ;
35347: LD_VAR 0 7
35351: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35352: LD_INT 0
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
// result := false ;
35370: LD_ADDR_VAR 0 3
35374: PUSH
35375: LD_INT 0
35377: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35378: LD_VAR 0 1
35382: NOT
35383: PUSH
35384: LD_VAR 0 1
35388: PPUSH
35389: CALL_OW 266
35393: PUSH
35394: LD_INT 32
35396: PUSH
35397: LD_INT 33
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: IN
35404: NOT
35405: OR
35406: IFFALSE 35410
// exit ;
35408: GO 36519
// nat := GetNation ( tower ) ;
35410: LD_ADDR_VAR 0 12
35414: PUSH
35415: LD_VAR 0 1
35419: PPUSH
35420: CALL_OW 248
35424: ST_TO_ADDR
// side := GetSide ( tower ) ;
35425: LD_ADDR_VAR 0 16
35429: PUSH
35430: LD_VAR 0 1
35434: PPUSH
35435: CALL_OW 255
35439: ST_TO_ADDR
// x := GetX ( tower ) ;
35440: LD_ADDR_VAR 0 10
35444: PUSH
35445: LD_VAR 0 1
35449: PPUSH
35450: CALL_OW 250
35454: ST_TO_ADDR
// y := GetY ( tower ) ;
35455: LD_ADDR_VAR 0 11
35459: PUSH
35460: LD_VAR 0 1
35464: PPUSH
35465: CALL_OW 251
35469: ST_TO_ADDR
// if not x or not y then
35470: LD_VAR 0 10
35474: NOT
35475: PUSH
35476: LD_VAR 0 11
35480: NOT
35481: OR
35482: IFFALSE 35486
// exit ;
35484: GO 36519
// weapon := 0 ;
35486: LD_ADDR_VAR 0 18
35490: PUSH
35491: LD_INT 0
35493: ST_TO_ADDR
// fac_list := [ ] ;
35494: LD_ADDR_VAR 0 17
35498: PUSH
35499: EMPTY
35500: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35501: LD_ADDR_VAR 0 6
35505: PUSH
35506: LD_VAR 0 1
35510: PPUSH
35511: CALL_OW 274
35515: PPUSH
35516: LD_VAR 0 2
35520: PPUSH
35521: LD_INT 0
35523: PPUSH
35524: CALL 33090 0 3
35528: PPUSH
35529: LD_INT 30
35531: PUSH
35532: LD_INT 3
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PPUSH
35539: CALL_OW 72
35543: ST_TO_ADDR
// if not factories then
35544: LD_VAR 0 6
35548: NOT
35549: IFFALSE 35553
// exit ;
35551: GO 36519
// for i in factories do
35553: LD_ADDR_VAR 0 8
35557: PUSH
35558: LD_VAR 0 6
35562: PUSH
35563: FOR_IN
35564: IFFALSE 35589
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35566: LD_ADDR_VAR 0 17
35570: PUSH
35571: LD_VAR 0 17
35575: PUSH
35576: LD_VAR 0 8
35580: PPUSH
35581: CALL_OW 478
35585: UNION
35586: ST_TO_ADDR
35587: GO 35563
35589: POP
35590: POP
// if not fac_list then
35591: LD_VAR 0 17
35595: NOT
35596: IFFALSE 35600
// exit ;
35598: GO 36519
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35600: LD_ADDR_VAR 0 5
35604: PUSH
35605: LD_INT 4
35607: PUSH
35608: LD_INT 5
35610: PUSH
35611: LD_INT 9
35613: PUSH
35614: LD_INT 10
35616: PUSH
35617: LD_INT 6
35619: PUSH
35620: LD_INT 7
35622: PUSH
35623: LD_INT 11
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 27
35637: PUSH
35638: LD_INT 28
35640: PUSH
35641: LD_INT 26
35643: PUSH
35644: LD_INT 30
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 43
35655: PUSH
35656: LD_INT 44
35658: PUSH
35659: LD_INT 46
35661: PUSH
35662: LD_INT 45
35664: PUSH
35665: LD_INT 47
35667: PUSH
35668: LD_INT 49
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: PUSH
35684: LD_VAR 0 12
35688: ARRAY
35689: ST_TO_ADDR
// list := list isect fac_list ;
35690: LD_ADDR_VAR 0 5
35694: PUSH
35695: LD_VAR 0 5
35699: PUSH
35700: LD_VAR 0 17
35704: ISECT
35705: ST_TO_ADDR
// if not list then
35706: LD_VAR 0 5
35710: NOT
35711: IFFALSE 35715
// exit ;
35713: GO 36519
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35715: LD_VAR 0 12
35719: PUSH
35720: LD_INT 3
35722: EQUAL
35723: PUSH
35724: LD_INT 49
35726: PUSH
35727: LD_VAR 0 5
35731: IN
35732: AND
35733: PUSH
35734: LD_INT 31
35736: PPUSH
35737: LD_VAR 0 16
35741: PPUSH
35742: CALL_OW 321
35746: PUSH
35747: LD_INT 2
35749: EQUAL
35750: AND
35751: IFFALSE 35811
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35753: LD_INT 22
35755: PUSH
35756: LD_VAR 0 16
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 35
35767: PUSH
35768: LD_INT 49
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 91
35777: PUSH
35778: LD_VAR 0 1
35782: PUSH
35783: LD_INT 10
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: PPUSH
35796: CALL_OW 69
35800: NOT
35801: IFFALSE 35811
// weapon := ru_time_lapser ;
35803: LD_ADDR_VAR 0 18
35807: PUSH
35808: LD_INT 49
35810: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35811: LD_VAR 0 12
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 2
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: IN
35826: PUSH
35827: LD_INT 11
35829: PUSH
35830: LD_VAR 0 5
35834: IN
35835: PUSH
35836: LD_INT 30
35838: PUSH
35839: LD_VAR 0 5
35843: IN
35844: OR
35845: AND
35846: PUSH
35847: LD_INT 6
35849: PPUSH
35850: LD_VAR 0 16
35854: PPUSH
35855: CALL_OW 321
35859: PUSH
35860: LD_INT 2
35862: EQUAL
35863: AND
35864: IFFALSE 36029
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35866: LD_INT 22
35868: PUSH
35869: LD_VAR 0 16
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: LD_INT 35
35883: PUSH
35884: LD_INT 11
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 35
35893: PUSH
35894: LD_INT 30
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 91
35908: PUSH
35909: LD_VAR 0 1
35913: PUSH
35914: LD_INT 18
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: PPUSH
35927: CALL_OW 69
35931: NOT
35932: PUSH
35933: LD_INT 22
35935: PUSH
35936: LD_VAR 0 16
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 2
35947: PUSH
35948: LD_INT 30
35950: PUSH
35951: LD_INT 32
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 30
35960: PUSH
35961: LD_INT 33
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 91
35975: PUSH
35976: LD_VAR 0 1
35980: PUSH
35981: LD_INT 12
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: PUSH
35994: EMPTY
35995: LIST
35996: PPUSH
35997: CALL_OW 69
36001: PUSH
36002: LD_INT 2
36004: GREATER
36005: AND
36006: IFFALSE 36029
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36008: LD_ADDR_VAR 0 18
36012: PUSH
36013: LD_INT 11
36015: PUSH
36016: LD_INT 30
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_VAR 0 12
36027: ARRAY
36028: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36029: LD_VAR 0 18
36033: NOT
36034: PUSH
36035: LD_INT 40
36037: PPUSH
36038: LD_VAR 0 16
36042: PPUSH
36043: CALL_OW 321
36047: PUSH
36048: LD_INT 2
36050: EQUAL
36051: AND
36052: PUSH
36053: LD_INT 7
36055: PUSH
36056: LD_VAR 0 5
36060: IN
36061: PUSH
36062: LD_INT 28
36064: PUSH
36065: LD_VAR 0 5
36069: IN
36070: OR
36071: PUSH
36072: LD_INT 45
36074: PUSH
36075: LD_VAR 0 5
36079: IN
36080: OR
36081: AND
36082: IFFALSE 36336
// begin hex := GetHexInfo ( x , y ) ;
36084: LD_ADDR_VAR 0 4
36088: PUSH
36089: LD_VAR 0 10
36093: PPUSH
36094: LD_VAR 0 11
36098: PPUSH
36099: CALL_OW 546
36103: ST_TO_ADDR
// if hex [ 1 ] then
36104: LD_VAR 0 4
36108: PUSH
36109: LD_INT 1
36111: ARRAY
36112: IFFALSE 36116
// exit ;
36114: GO 36519
// height := hex [ 2 ] ;
36116: LD_ADDR_VAR 0 15
36120: PUSH
36121: LD_VAR 0 4
36125: PUSH
36126: LD_INT 2
36128: ARRAY
36129: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36130: LD_ADDR_VAR 0 14
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: LD_INT 3
36143: PUSH
36144: LD_INT 5
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: ST_TO_ADDR
// for i in tmp do
36153: LD_ADDR_VAR 0 8
36157: PUSH
36158: LD_VAR 0 14
36162: PUSH
36163: FOR_IN
36164: IFFALSE 36334
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36166: LD_ADDR_VAR 0 9
36170: PUSH
36171: LD_VAR 0 10
36175: PPUSH
36176: LD_VAR 0 8
36180: PPUSH
36181: LD_INT 5
36183: PPUSH
36184: CALL_OW 272
36188: PUSH
36189: LD_VAR 0 11
36193: PPUSH
36194: LD_VAR 0 8
36198: PPUSH
36199: LD_INT 5
36201: PPUSH
36202: CALL_OW 273
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36211: LD_VAR 0 9
36215: PUSH
36216: LD_INT 1
36218: ARRAY
36219: PPUSH
36220: LD_VAR 0 9
36224: PUSH
36225: LD_INT 2
36227: ARRAY
36228: PPUSH
36229: CALL_OW 488
36233: IFFALSE 36332
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36235: LD_ADDR_VAR 0 4
36239: PUSH
36240: LD_VAR 0 9
36244: PUSH
36245: LD_INT 1
36247: ARRAY
36248: PPUSH
36249: LD_VAR 0 9
36253: PUSH
36254: LD_INT 2
36256: ARRAY
36257: PPUSH
36258: CALL_OW 546
36262: ST_TO_ADDR
// if hex [ 1 ] then
36263: LD_VAR 0 4
36267: PUSH
36268: LD_INT 1
36270: ARRAY
36271: IFFALSE 36275
// continue ;
36273: GO 36163
// h := hex [ 2 ] ;
36275: LD_ADDR_VAR 0 13
36279: PUSH
36280: LD_VAR 0 4
36284: PUSH
36285: LD_INT 2
36287: ARRAY
36288: ST_TO_ADDR
// if h + 7 < height then
36289: LD_VAR 0 13
36293: PUSH
36294: LD_INT 7
36296: PLUS
36297: PUSH
36298: LD_VAR 0 15
36302: LESS
36303: IFFALSE 36332
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36305: LD_ADDR_VAR 0 18
36309: PUSH
36310: LD_INT 7
36312: PUSH
36313: LD_INT 28
36315: PUSH
36316: LD_INT 45
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: PUSH
36324: LD_VAR 0 12
36328: ARRAY
36329: ST_TO_ADDR
// break ;
36330: GO 36334
// end ; end ; end ;
36332: GO 36163
36334: POP
36335: POP
// end ; if not weapon then
36336: LD_VAR 0 18
36340: NOT
36341: IFFALSE 36401
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36343: LD_ADDR_VAR 0 5
36347: PUSH
36348: LD_VAR 0 5
36352: PUSH
36353: LD_INT 11
36355: PUSH
36356: LD_INT 30
36358: PUSH
36359: LD_INT 49
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: LIST
36366: DIFF
36367: ST_TO_ADDR
// if not list then
36368: LD_VAR 0 5
36372: NOT
36373: IFFALSE 36377
// exit ;
36375: GO 36519
// weapon := list [ rand ( 1 , list ) ] ;
36377: LD_ADDR_VAR 0 18
36381: PUSH
36382: LD_VAR 0 5
36386: PUSH
36387: LD_INT 1
36389: PPUSH
36390: LD_VAR 0 5
36394: PPUSH
36395: CALL_OW 12
36399: ARRAY
36400: ST_TO_ADDR
// end ; if weapon then
36401: LD_VAR 0 18
36405: IFFALSE 36519
// begin tmp := CostOfWeapon ( weapon ) ;
36407: LD_ADDR_VAR 0 14
36411: PUSH
36412: LD_VAR 0 18
36416: PPUSH
36417: CALL_OW 451
36421: ST_TO_ADDR
// j := GetBase ( tower ) ;
36422: LD_ADDR_VAR 0 9
36426: PUSH
36427: LD_VAR 0 1
36431: PPUSH
36432: CALL_OW 274
36436: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36437: LD_VAR 0 9
36441: PPUSH
36442: LD_INT 1
36444: PPUSH
36445: CALL_OW 275
36449: PUSH
36450: LD_VAR 0 14
36454: PUSH
36455: LD_INT 1
36457: ARRAY
36458: GREATEREQUAL
36459: PUSH
36460: LD_VAR 0 9
36464: PPUSH
36465: LD_INT 2
36467: PPUSH
36468: CALL_OW 275
36472: PUSH
36473: LD_VAR 0 14
36477: PUSH
36478: LD_INT 2
36480: ARRAY
36481: GREATEREQUAL
36482: AND
36483: PUSH
36484: LD_VAR 0 9
36488: PPUSH
36489: LD_INT 3
36491: PPUSH
36492: CALL_OW 275
36496: PUSH
36497: LD_VAR 0 14
36501: PUSH
36502: LD_INT 3
36504: ARRAY
36505: GREATEREQUAL
36506: AND
36507: IFFALSE 36519
// result := weapon ;
36509: LD_ADDR_VAR 0 3
36513: PUSH
36514: LD_VAR 0 18
36518: ST_TO_ADDR
// end ; end ;
36519: LD_VAR 0 3
36523: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36524: LD_INT 0
36526: PPUSH
36527: PPUSH
// result := true ;
36528: LD_ADDR_VAR 0 3
36532: PUSH
36533: LD_INT 1
36535: ST_TO_ADDR
// if array1 = array2 then
36536: LD_VAR 0 1
36540: PUSH
36541: LD_VAR 0 2
36545: EQUAL
36546: IFFALSE 36606
// begin for i = 1 to array1 do
36548: LD_ADDR_VAR 0 4
36552: PUSH
36553: DOUBLE
36554: LD_INT 1
36556: DEC
36557: ST_TO_ADDR
36558: LD_VAR 0 1
36562: PUSH
36563: FOR_TO
36564: IFFALSE 36602
// if array1 [ i ] <> array2 [ i ] then
36566: LD_VAR 0 1
36570: PUSH
36571: LD_VAR 0 4
36575: ARRAY
36576: PUSH
36577: LD_VAR 0 2
36581: PUSH
36582: LD_VAR 0 4
36586: ARRAY
36587: NONEQUAL
36588: IFFALSE 36600
// begin result := false ;
36590: LD_ADDR_VAR 0 3
36594: PUSH
36595: LD_INT 0
36597: ST_TO_ADDR
// break ;
36598: GO 36602
// end ;
36600: GO 36563
36602: POP
36603: POP
// end else
36604: GO 36614
// result := false ;
36606: LD_ADDR_VAR 0 3
36610: PUSH
36611: LD_INT 0
36613: ST_TO_ADDR
// end ;
36614: LD_VAR 0 3
36618: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36619: LD_INT 0
36621: PPUSH
36622: PPUSH
// if not array1 or not array2 then
36623: LD_VAR 0 1
36627: NOT
36628: PUSH
36629: LD_VAR 0 2
36633: NOT
36634: OR
36635: IFFALSE 36639
// exit ;
36637: GO 36703
// result := true ;
36639: LD_ADDR_VAR 0 3
36643: PUSH
36644: LD_INT 1
36646: ST_TO_ADDR
// for i = 1 to array1 do
36647: LD_ADDR_VAR 0 4
36651: PUSH
36652: DOUBLE
36653: LD_INT 1
36655: DEC
36656: ST_TO_ADDR
36657: LD_VAR 0 1
36661: PUSH
36662: FOR_TO
36663: IFFALSE 36701
// if array1 [ i ] <> array2 [ i ] then
36665: LD_VAR 0 1
36669: PUSH
36670: LD_VAR 0 4
36674: ARRAY
36675: PUSH
36676: LD_VAR 0 2
36680: PUSH
36681: LD_VAR 0 4
36685: ARRAY
36686: NONEQUAL
36687: IFFALSE 36699
// begin result := false ;
36689: LD_ADDR_VAR 0 3
36693: PUSH
36694: LD_INT 0
36696: ST_TO_ADDR
// break ;
36697: GO 36701
// end ;
36699: GO 36662
36701: POP
36702: POP
// end ;
36703: LD_VAR 0 3
36707: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36708: LD_INT 0
36710: PPUSH
36711: PPUSH
36712: PPUSH
// pom := GetBase ( fac ) ;
36713: LD_ADDR_VAR 0 5
36717: PUSH
36718: LD_VAR 0 1
36722: PPUSH
36723: CALL_OW 274
36727: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36728: LD_ADDR_VAR 0 4
36732: PUSH
36733: LD_VAR 0 2
36737: PUSH
36738: LD_INT 1
36740: ARRAY
36741: PPUSH
36742: LD_VAR 0 2
36746: PUSH
36747: LD_INT 2
36749: ARRAY
36750: PPUSH
36751: LD_VAR 0 2
36755: PUSH
36756: LD_INT 3
36758: ARRAY
36759: PPUSH
36760: LD_VAR 0 2
36764: PUSH
36765: LD_INT 4
36767: ARRAY
36768: PPUSH
36769: CALL_OW 449
36773: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36774: LD_ADDR_VAR 0 3
36778: PUSH
36779: LD_VAR 0 5
36783: PPUSH
36784: LD_INT 1
36786: PPUSH
36787: CALL_OW 275
36791: PUSH
36792: LD_VAR 0 4
36796: PUSH
36797: LD_INT 1
36799: ARRAY
36800: GREATEREQUAL
36801: PUSH
36802: LD_VAR 0 5
36806: PPUSH
36807: LD_INT 2
36809: PPUSH
36810: CALL_OW 275
36814: PUSH
36815: LD_VAR 0 4
36819: PUSH
36820: LD_INT 2
36822: ARRAY
36823: GREATEREQUAL
36824: AND
36825: PUSH
36826: LD_VAR 0 5
36830: PPUSH
36831: LD_INT 3
36833: PPUSH
36834: CALL_OW 275
36838: PUSH
36839: LD_VAR 0 4
36843: PUSH
36844: LD_INT 3
36846: ARRAY
36847: GREATEREQUAL
36848: AND
36849: ST_TO_ADDR
// end ;
36850: LD_VAR 0 3
36854: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36855: LD_INT 0
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
// pom := GetBase ( building ) ;
36861: LD_ADDR_VAR 0 3
36865: PUSH
36866: LD_VAR 0 1
36870: PPUSH
36871: CALL_OW 274
36875: ST_TO_ADDR
// if not pom then
36876: LD_VAR 0 3
36880: NOT
36881: IFFALSE 36885
// exit ;
36883: GO 37055
// btype := GetBType ( building ) ;
36885: LD_ADDR_VAR 0 5
36889: PUSH
36890: LD_VAR 0 1
36894: PPUSH
36895: CALL_OW 266
36899: ST_TO_ADDR
// if btype = b_armoury then
36900: LD_VAR 0 5
36904: PUSH
36905: LD_INT 4
36907: EQUAL
36908: IFFALSE 36918
// btype := b_barracks ;
36910: LD_ADDR_VAR 0 5
36914: PUSH
36915: LD_INT 5
36917: ST_TO_ADDR
// if btype = b_depot then
36918: LD_VAR 0 5
36922: PUSH
36923: LD_INT 0
36925: EQUAL
36926: IFFALSE 36936
// btype := b_warehouse ;
36928: LD_ADDR_VAR 0 5
36932: PUSH
36933: LD_INT 1
36935: ST_TO_ADDR
// if btype = b_workshop then
36936: LD_VAR 0 5
36940: PUSH
36941: LD_INT 2
36943: EQUAL
36944: IFFALSE 36954
// btype := b_factory ;
36946: LD_ADDR_VAR 0 5
36950: PUSH
36951: LD_INT 3
36953: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36954: LD_ADDR_VAR 0 4
36958: PUSH
36959: LD_VAR 0 5
36963: PPUSH
36964: LD_VAR 0 1
36968: PPUSH
36969: CALL_OW 248
36973: PPUSH
36974: CALL_OW 450
36978: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36979: LD_ADDR_VAR 0 2
36983: PUSH
36984: LD_VAR 0 3
36988: PPUSH
36989: LD_INT 1
36991: PPUSH
36992: CALL_OW 275
36996: PUSH
36997: LD_VAR 0 4
37001: PUSH
37002: LD_INT 1
37004: ARRAY
37005: GREATEREQUAL
37006: PUSH
37007: LD_VAR 0 3
37011: PPUSH
37012: LD_INT 2
37014: PPUSH
37015: CALL_OW 275
37019: PUSH
37020: LD_VAR 0 4
37024: PUSH
37025: LD_INT 2
37027: ARRAY
37028: GREATEREQUAL
37029: AND
37030: PUSH
37031: LD_VAR 0 3
37035: PPUSH
37036: LD_INT 3
37038: PPUSH
37039: CALL_OW 275
37043: PUSH
37044: LD_VAR 0 4
37048: PUSH
37049: LD_INT 3
37051: ARRAY
37052: GREATEREQUAL
37053: AND
37054: ST_TO_ADDR
// end ;
37055: LD_VAR 0 2
37059: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37060: LD_INT 0
37062: PPUSH
37063: PPUSH
37064: PPUSH
// pom := GetBase ( building ) ;
37065: LD_ADDR_VAR 0 4
37069: PUSH
37070: LD_VAR 0 1
37074: PPUSH
37075: CALL_OW 274
37079: ST_TO_ADDR
// if not pom then
37080: LD_VAR 0 4
37084: NOT
37085: IFFALSE 37089
// exit ;
37087: GO 37190
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37089: LD_ADDR_VAR 0 5
37093: PUSH
37094: LD_VAR 0 2
37098: PPUSH
37099: LD_VAR 0 1
37103: PPUSH
37104: CALL_OW 248
37108: PPUSH
37109: CALL_OW 450
37113: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37114: LD_ADDR_VAR 0 3
37118: PUSH
37119: LD_VAR 0 4
37123: PPUSH
37124: LD_INT 1
37126: PPUSH
37127: CALL_OW 275
37131: PUSH
37132: LD_VAR 0 5
37136: PUSH
37137: LD_INT 1
37139: ARRAY
37140: GREATEREQUAL
37141: PUSH
37142: LD_VAR 0 4
37146: PPUSH
37147: LD_INT 2
37149: PPUSH
37150: CALL_OW 275
37154: PUSH
37155: LD_VAR 0 5
37159: PUSH
37160: LD_INT 2
37162: ARRAY
37163: GREATEREQUAL
37164: AND
37165: PUSH
37166: LD_VAR 0 4
37170: PPUSH
37171: LD_INT 3
37173: PPUSH
37174: CALL_OW 275
37178: PUSH
37179: LD_VAR 0 5
37183: PUSH
37184: LD_INT 3
37186: ARRAY
37187: GREATEREQUAL
37188: AND
37189: ST_TO_ADDR
// end ;
37190: LD_VAR 0 3
37194: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37195: LD_INT 0
37197: PPUSH
37198: PPUSH
37199: PPUSH
37200: PPUSH
37201: PPUSH
37202: PPUSH
37203: PPUSH
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
// result := false ;
37208: LD_ADDR_VAR 0 8
37212: PUSH
37213: LD_INT 0
37215: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37216: LD_VAR 0 5
37220: NOT
37221: PUSH
37222: LD_VAR 0 1
37226: NOT
37227: OR
37228: PUSH
37229: LD_VAR 0 2
37233: NOT
37234: OR
37235: PUSH
37236: LD_VAR 0 3
37240: NOT
37241: OR
37242: IFFALSE 37246
// exit ;
37244: GO 38060
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37246: LD_ADDR_VAR 0 14
37250: PUSH
37251: LD_VAR 0 1
37255: PPUSH
37256: LD_VAR 0 2
37260: PPUSH
37261: LD_VAR 0 3
37265: PPUSH
37266: LD_VAR 0 4
37270: PPUSH
37271: LD_VAR 0 5
37275: PUSH
37276: LD_INT 1
37278: ARRAY
37279: PPUSH
37280: CALL_OW 248
37284: PPUSH
37285: LD_INT 0
37287: PPUSH
37288: CALL 39293 0 6
37292: ST_TO_ADDR
// if not hexes then
37293: LD_VAR 0 14
37297: NOT
37298: IFFALSE 37302
// exit ;
37300: GO 38060
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37302: LD_ADDR_VAR 0 17
37306: PUSH
37307: LD_VAR 0 5
37311: PPUSH
37312: LD_INT 22
37314: PUSH
37315: LD_VAR 0 13
37319: PPUSH
37320: CALL_OW 255
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: LD_INT 30
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 30
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PPUSH
37361: CALL_OW 72
37365: ST_TO_ADDR
// for i = 1 to hexes do
37366: LD_ADDR_VAR 0 9
37370: PUSH
37371: DOUBLE
37372: LD_INT 1
37374: DEC
37375: ST_TO_ADDR
37376: LD_VAR 0 14
37380: PUSH
37381: FOR_TO
37382: IFFALSE 38058
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37384: LD_ADDR_VAR 0 13
37388: PUSH
37389: LD_VAR 0 14
37393: PUSH
37394: LD_VAR 0 9
37398: ARRAY
37399: PUSH
37400: LD_INT 1
37402: ARRAY
37403: PPUSH
37404: LD_VAR 0 14
37408: PUSH
37409: LD_VAR 0 9
37413: ARRAY
37414: PUSH
37415: LD_INT 2
37417: ARRAY
37418: PPUSH
37419: CALL_OW 428
37423: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37424: LD_VAR 0 14
37428: PUSH
37429: LD_VAR 0 9
37433: ARRAY
37434: PUSH
37435: LD_INT 1
37437: ARRAY
37438: PPUSH
37439: LD_VAR 0 14
37443: PUSH
37444: LD_VAR 0 9
37448: ARRAY
37449: PUSH
37450: LD_INT 2
37452: ARRAY
37453: PPUSH
37454: CALL_OW 351
37458: PUSH
37459: LD_VAR 0 14
37463: PUSH
37464: LD_VAR 0 9
37468: ARRAY
37469: PUSH
37470: LD_INT 1
37472: ARRAY
37473: PPUSH
37474: LD_VAR 0 14
37478: PUSH
37479: LD_VAR 0 9
37483: ARRAY
37484: PUSH
37485: LD_INT 2
37487: ARRAY
37488: PPUSH
37489: CALL_OW 488
37493: NOT
37494: OR
37495: PUSH
37496: LD_VAR 0 13
37500: PPUSH
37501: CALL_OW 247
37505: PUSH
37506: LD_INT 3
37508: EQUAL
37509: OR
37510: IFFALSE 37516
// exit ;
37512: POP
37513: POP
37514: GO 38060
// if not tmp then
37516: LD_VAR 0 13
37520: NOT
37521: IFFALSE 37525
// continue ;
37523: GO 37381
// result := true ;
37525: LD_ADDR_VAR 0 8
37529: PUSH
37530: LD_INT 1
37532: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37533: LD_VAR 0 6
37537: PUSH
37538: LD_VAR 0 13
37542: PPUSH
37543: CALL_OW 247
37547: PUSH
37548: LD_INT 2
37550: EQUAL
37551: AND
37552: PUSH
37553: LD_VAR 0 13
37557: PPUSH
37558: CALL_OW 263
37562: PUSH
37563: LD_INT 1
37565: EQUAL
37566: AND
37567: IFFALSE 37731
// begin if IsDrivenBy ( tmp ) then
37569: LD_VAR 0 13
37573: PPUSH
37574: CALL_OW 311
37578: IFFALSE 37582
// continue ;
37580: GO 37381
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37582: LD_VAR 0 6
37586: PPUSH
37587: LD_INT 3
37589: PUSH
37590: LD_INT 60
37592: PUSH
37593: EMPTY
37594: LIST
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 3
37602: PUSH
37603: LD_INT 55
37605: PUSH
37606: EMPTY
37607: LIST
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PPUSH
37617: CALL_OW 72
37621: IFFALSE 37729
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37623: LD_ADDR_VAR 0 18
37627: PUSH
37628: LD_VAR 0 6
37632: PPUSH
37633: LD_INT 3
37635: PUSH
37636: LD_INT 60
37638: PUSH
37639: EMPTY
37640: LIST
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 3
37648: PUSH
37649: LD_INT 55
37651: PUSH
37652: EMPTY
37653: LIST
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PPUSH
37663: CALL_OW 72
37667: PUSH
37668: LD_INT 1
37670: ARRAY
37671: ST_TO_ADDR
// if IsInUnit ( driver ) then
37672: LD_VAR 0 18
37676: PPUSH
37677: CALL_OW 310
37681: IFFALSE 37692
// ComExit ( driver ) ;
37683: LD_VAR 0 18
37687: PPUSH
37688: CALL 63054 0 1
// AddComEnterUnit ( driver , tmp ) ;
37692: LD_VAR 0 18
37696: PPUSH
37697: LD_VAR 0 13
37701: PPUSH
37702: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37706: LD_VAR 0 18
37710: PPUSH
37711: LD_VAR 0 7
37715: PPUSH
37716: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37720: LD_VAR 0 18
37724: PPUSH
37725: CALL_OW 181
// end ; continue ;
37729: GO 37381
// end ; if not cleaners or not tmp in cleaners then
37731: LD_VAR 0 6
37735: NOT
37736: PUSH
37737: LD_VAR 0 13
37741: PUSH
37742: LD_VAR 0 6
37746: IN
37747: NOT
37748: OR
37749: IFFALSE 38056
// begin if dep then
37751: LD_VAR 0 17
37755: IFFALSE 37891
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37757: LD_ADDR_VAR 0 16
37761: PUSH
37762: LD_VAR 0 17
37766: PUSH
37767: LD_INT 1
37769: ARRAY
37770: PPUSH
37771: CALL_OW 250
37775: PPUSH
37776: LD_VAR 0 17
37780: PUSH
37781: LD_INT 1
37783: ARRAY
37784: PPUSH
37785: CALL_OW 254
37789: PPUSH
37790: LD_INT 5
37792: PPUSH
37793: CALL_OW 272
37797: PUSH
37798: LD_VAR 0 17
37802: PUSH
37803: LD_INT 1
37805: ARRAY
37806: PPUSH
37807: CALL_OW 251
37811: PPUSH
37812: LD_VAR 0 17
37816: PUSH
37817: LD_INT 1
37819: ARRAY
37820: PPUSH
37821: CALL_OW 254
37825: PPUSH
37826: LD_INT 5
37828: PPUSH
37829: CALL_OW 273
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37838: LD_VAR 0 16
37842: PUSH
37843: LD_INT 1
37845: ARRAY
37846: PPUSH
37847: LD_VAR 0 16
37851: PUSH
37852: LD_INT 2
37854: ARRAY
37855: PPUSH
37856: CALL_OW 488
37860: IFFALSE 37891
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37862: LD_VAR 0 13
37866: PPUSH
37867: LD_VAR 0 16
37871: PUSH
37872: LD_INT 1
37874: ARRAY
37875: PPUSH
37876: LD_VAR 0 16
37880: PUSH
37881: LD_INT 2
37883: ARRAY
37884: PPUSH
37885: CALL_OW 111
// continue ;
37889: GO 37381
// end ; end ; r := GetDir ( tmp ) ;
37891: LD_ADDR_VAR 0 15
37895: PUSH
37896: LD_VAR 0 13
37900: PPUSH
37901: CALL_OW 254
37905: ST_TO_ADDR
// if r = 5 then
37906: LD_VAR 0 15
37910: PUSH
37911: LD_INT 5
37913: EQUAL
37914: IFFALSE 37924
// r := 0 ;
37916: LD_ADDR_VAR 0 15
37920: PUSH
37921: LD_INT 0
37923: ST_TO_ADDR
// for j = r to 5 do
37924: LD_ADDR_VAR 0 10
37928: PUSH
37929: DOUBLE
37930: LD_VAR 0 15
37934: DEC
37935: ST_TO_ADDR
37936: LD_INT 5
37938: PUSH
37939: FOR_TO
37940: IFFALSE 38054
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37942: LD_ADDR_VAR 0 11
37946: PUSH
37947: LD_VAR 0 13
37951: PPUSH
37952: CALL_OW 250
37956: PPUSH
37957: LD_VAR 0 10
37961: PPUSH
37962: LD_INT 2
37964: PPUSH
37965: CALL_OW 272
37969: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37970: LD_ADDR_VAR 0 12
37974: PUSH
37975: LD_VAR 0 13
37979: PPUSH
37980: CALL_OW 251
37984: PPUSH
37985: LD_VAR 0 10
37989: PPUSH
37990: LD_INT 2
37992: PPUSH
37993: CALL_OW 273
37997: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37998: LD_VAR 0 11
38002: PPUSH
38003: LD_VAR 0 12
38007: PPUSH
38008: CALL_OW 488
38012: PUSH
38013: LD_VAR 0 11
38017: PPUSH
38018: LD_VAR 0 12
38022: PPUSH
38023: CALL_OW 428
38027: NOT
38028: AND
38029: IFFALSE 38052
// begin ComMoveXY ( tmp , _x , _y ) ;
38031: LD_VAR 0 13
38035: PPUSH
38036: LD_VAR 0 11
38040: PPUSH
38041: LD_VAR 0 12
38045: PPUSH
38046: CALL_OW 111
// break ;
38050: GO 38054
// end ; end ;
38052: GO 37939
38054: POP
38055: POP
// end ; end ;
38056: GO 37381
38058: POP
38059: POP
// end ;
38060: LD_VAR 0 8
38064: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38065: LD_INT 0
38067: PPUSH
// result := true ;
38068: LD_ADDR_VAR 0 3
38072: PUSH
38073: LD_INT 1
38075: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38076: LD_VAR 0 2
38080: PUSH
38081: LD_INT 24
38083: DOUBLE
38084: EQUAL
38085: IFTRUE 38095
38087: LD_INT 33
38089: DOUBLE
38090: EQUAL
38091: IFTRUE 38095
38093: GO 38120
38095: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38096: LD_ADDR_VAR 0 3
38100: PUSH
38101: LD_INT 32
38103: PPUSH
38104: LD_VAR 0 1
38108: PPUSH
38109: CALL_OW 321
38113: PUSH
38114: LD_INT 2
38116: EQUAL
38117: ST_TO_ADDR
38118: GO 38436
38120: LD_INT 20
38122: DOUBLE
38123: EQUAL
38124: IFTRUE 38128
38126: GO 38153
38128: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38129: LD_ADDR_VAR 0 3
38133: PUSH
38134: LD_INT 6
38136: PPUSH
38137: LD_VAR 0 1
38141: PPUSH
38142: CALL_OW 321
38146: PUSH
38147: LD_INT 2
38149: EQUAL
38150: ST_TO_ADDR
38151: GO 38436
38153: LD_INT 22
38155: DOUBLE
38156: EQUAL
38157: IFTRUE 38167
38159: LD_INT 36
38161: DOUBLE
38162: EQUAL
38163: IFTRUE 38167
38165: GO 38192
38167: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38168: LD_ADDR_VAR 0 3
38172: PUSH
38173: LD_INT 15
38175: PPUSH
38176: LD_VAR 0 1
38180: PPUSH
38181: CALL_OW 321
38185: PUSH
38186: LD_INT 2
38188: EQUAL
38189: ST_TO_ADDR
38190: GO 38436
38192: LD_INT 30
38194: DOUBLE
38195: EQUAL
38196: IFTRUE 38200
38198: GO 38225
38200: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38201: LD_ADDR_VAR 0 3
38205: PUSH
38206: LD_INT 20
38208: PPUSH
38209: LD_VAR 0 1
38213: PPUSH
38214: CALL_OW 321
38218: PUSH
38219: LD_INT 2
38221: EQUAL
38222: ST_TO_ADDR
38223: GO 38436
38225: LD_INT 28
38227: DOUBLE
38228: EQUAL
38229: IFTRUE 38239
38231: LD_INT 21
38233: DOUBLE
38234: EQUAL
38235: IFTRUE 38239
38237: GO 38264
38239: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38240: LD_ADDR_VAR 0 3
38244: PUSH
38245: LD_INT 21
38247: PPUSH
38248: LD_VAR 0 1
38252: PPUSH
38253: CALL_OW 321
38257: PUSH
38258: LD_INT 2
38260: EQUAL
38261: ST_TO_ADDR
38262: GO 38436
38264: LD_INT 16
38266: DOUBLE
38267: EQUAL
38268: IFTRUE 38272
38270: GO 38297
38272: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38273: LD_ADDR_VAR 0 3
38277: PUSH
38278: LD_INT 84
38280: PPUSH
38281: LD_VAR 0 1
38285: PPUSH
38286: CALL_OW 321
38290: PUSH
38291: LD_INT 2
38293: EQUAL
38294: ST_TO_ADDR
38295: GO 38436
38297: LD_INT 19
38299: DOUBLE
38300: EQUAL
38301: IFTRUE 38311
38303: LD_INT 23
38305: DOUBLE
38306: EQUAL
38307: IFTRUE 38311
38309: GO 38336
38311: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38312: LD_ADDR_VAR 0 3
38316: PUSH
38317: LD_INT 83
38319: PPUSH
38320: LD_VAR 0 1
38324: PPUSH
38325: CALL_OW 321
38329: PUSH
38330: LD_INT 2
38332: EQUAL
38333: ST_TO_ADDR
38334: GO 38436
38336: LD_INT 17
38338: DOUBLE
38339: EQUAL
38340: IFTRUE 38344
38342: GO 38369
38344: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38345: LD_ADDR_VAR 0 3
38349: PUSH
38350: LD_INT 39
38352: PPUSH
38353: LD_VAR 0 1
38357: PPUSH
38358: CALL_OW 321
38362: PUSH
38363: LD_INT 2
38365: EQUAL
38366: ST_TO_ADDR
38367: GO 38436
38369: LD_INT 18
38371: DOUBLE
38372: EQUAL
38373: IFTRUE 38377
38375: GO 38402
38377: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38378: LD_ADDR_VAR 0 3
38382: PUSH
38383: LD_INT 40
38385: PPUSH
38386: LD_VAR 0 1
38390: PPUSH
38391: CALL_OW 321
38395: PUSH
38396: LD_INT 2
38398: EQUAL
38399: ST_TO_ADDR
38400: GO 38436
38402: LD_INT 27
38404: DOUBLE
38405: EQUAL
38406: IFTRUE 38410
38408: GO 38435
38410: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38411: LD_ADDR_VAR 0 3
38415: PUSH
38416: LD_INT 35
38418: PPUSH
38419: LD_VAR 0 1
38423: PPUSH
38424: CALL_OW 321
38428: PUSH
38429: LD_INT 2
38431: EQUAL
38432: ST_TO_ADDR
38433: GO 38436
38435: POP
// end ;
38436: LD_VAR 0 3
38440: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38441: LD_INT 0
38443: PPUSH
38444: PPUSH
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
// result := false ;
38454: LD_ADDR_VAR 0 6
38458: PUSH
38459: LD_INT 0
38461: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38462: LD_VAR 0 1
38466: NOT
38467: PUSH
38468: LD_VAR 0 1
38472: PPUSH
38473: CALL_OW 266
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: IN
38488: NOT
38489: OR
38490: PUSH
38491: LD_VAR 0 2
38495: NOT
38496: OR
38497: PUSH
38498: LD_VAR 0 5
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 3
38514: PUSH
38515: LD_INT 4
38517: PUSH
38518: LD_INT 5
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: IN
38529: NOT
38530: OR
38531: PUSH
38532: LD_VAR 0 3
38536: PPUSH
38537: LD_VAR 0 4
38541: PPUSH
38542: CALL_OW 488
38546: NOT
38547: OR
38548: IFFALSE 38552
// exit ;
38550: GO 39288
// side := GetSide ( depot ) ;
38552: LD_ADDR_VAR 0 9
38556: PUSH
38557: LD_VAR 0 1
38561: PPUSH
38562: CALL_OW 255
38566: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38567: LD_VAR 0 9
38571: PPUSH
38572: LD_VAR 0 2
38576: PPUSH
38577: CALL 38065 0 2
38581: NOT
38582: IFFALSE 38586
// exit ;
38584: GO 39288
// pom := GetBase ( depot ) ;
38586: LD_ADDR_VAR 0 10
38590: PUSH
38591: LD_VAR 0 1
38595: PPUSH
38596: CALL_OW 274
38600: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38601: LD_ADDR_VAR 0 11
38605: PUSH
38606: LD_VAR 0 2
38610: PPUSH
38611: LD_VAR 0 1
38615: PPUSH
38616: CALL_OW 248
38620: PPUSH
38621: CALL_OW 450
38625: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38626: LD_VAR 0 10
38630: PPUSH
38631: LD_INT 1
38633: PPUSH
38634: CALL_OW 275
38638: PUSH
38639: LD_VAR 0 11
38643: PUSH
38644: LD_INT 1
38646: ARRAY
38647: GREATEREQUAL
38648: PUSH
38649: LD_VAR 0 10
38653: PPUSH
38654: LD_INT 2
38656: PPUSH
38657: CALL_OW 275
38661: PUSH
38662: LD_VAR 0 11
38666: PUSH
38667: LD_INT 2
38669: ARRAY
38670: GREATEREQUAL
38671: AND
38672: PUSH
38673: LD_VAR 0 10
38677: PPUSH
38678: LD_INT 3
38680: PPUSH
38681: CALL_OW 275
38685: PUSH
38686: LD_VAR 0 11
38690: PUSH
38691: LD_INT 3
38693: ARRAY
38694: GREATEREQUAL
38695: AND
38696: NOT
38697: IFFALSE 38701
// exit ;
38699: GO 39288
// if GetBType ( depot ) = b_depot then
38701: LD_VAR 0 1
38705: PPUSH
38706: CALL_OW 266
38710: PUSH
38711: LD_INT 0
38713: EQUAL
38714: IFFALSE 38726
// dist := 28 else
38716: LD_ADDR_VAR 0 14
38720: PUSH
38721: LD_INT 28
38723: ST_TO_ADDR
38724: GO 38734
// dist := 36 ;
38726: LD_ADDR_VAR 0 14
38730: PUSH
38731: LD_INT 36
38733: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38734: LD_VAR 0 1
38738: PPUSH
38739: LD_VAR 0 3
38743: PPUSH
38744: LD_VAR 0 4
38748: PPUSH
38749: CALL_OW 297
38753: PUSH
38754: LD_VAR 0 14
38758: GREATER
38759: IFFALSE 38763
// exit ;
38761: GO 39288
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38763: LD_ADDR_VAR 0 12
38767: PUSH
38768: LD_VAR 0 2
38772: PPUSH
38773: LD_VAR 0 3
38777: PPUSH
38778: LD_VAR 0 4
38782: PPUSH
38783: LD_VAR 0 5
38787: PPUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: CALL_OW 248
38797: PPUSH
38798: LD_INT 0
38800: PPUSH
38801: CALL 39293 0 6
38805: ST_TO_ADDR
// if not hexes then
38806: LD_VAR 0 12
38810: NOT
38811: IFFALSE 38815
// exit ;
38813: GO 39288
// hex := GetHexInfo ( x , y ) ;
38815: LD_ADDR_VAR 0 15
38819: PUSH
38820: LD_VAR 0 3
38824: PPUSH
38825: LD_VAR 0 4
38829: PPUSH
38830: CALL_OW 546
38834: ST_TO_ADDR
// if hex [ 1 ] then
38835: LD_VAR 0 15
38839: PUSH
38840: LD_INT 1
38842: ARRAY
38843: IFFALSE 38847
// exit ;
38845: GO 39288
// height := hex [ 2 ] ;
38847: LD_ADDR_VAR 0 13
38851: PUSH
38852: LD_VAR 0 15
38856: PUSH
38857: LD_INT 2
38859: ARRAY
38860: ST_TO_ADDR
// for i = 1 to hexes do
38861: LD_ADDR_VAR 0 7
38865: PUSH
38866: DOUBLE
38867: LD_INT 1
38869: DEC
38870: ST_TO_ADDR
38871: LD_VAR 0 12
38875: PUSH
38876: FOR_TO
38877: IFFALSE 39207
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38879: LD_VAR 0 12
38883: PUSH
38884: LD_VAR 0 7
38888: ARRAY
38889: PUSH
38890: LD_INT 1
38892: ARRAY
38893: PPUSH
38894: LD_VAR 0 12
38898: PUSH
38899: LD_VAR 0 7
38903: ARRAY
38904: PUSH
38905: LD_INT 2
38907: ARRAY
38908: PPUSH
38909: CALL_OW 488
38913: NOT
38914: PUSH
38915: LD_VAR 0 12
38919: PUSH
38920: LD_VAR 0 7
38924: ARRAY
38925: PUSH
38926: LD_INT 1
38928: ARRAY
38929: PPUSH
38930: LD_VAR 0 12
38934: PUSH
38935: LD_VAR 0 7
38939: ARRAY
38940: PUSH
38941: LD_INT 2
38943: ARRAY
38944: PPUSH
38945: CALL_OW 428
38949: PUSH
38950: LD_INT 0
38952: GREATER
38953: OR
38954: PUSH
38955: LD_VAR 0 12
38959: PUSH
38960: LD_VAR 0 7
38964: ARRAY
38965: PUSH
38966: LD_INT 1
38968: ARRAY
38969: PPUSH
38970: LD_VAR 0 12
38974: PUSH
38975: LD_VAR 0 7
38979: ARRAY
38980: PUSH
38981: LD_INT 2
38983: ARRAY
38984: PPUSH
38985: CALL_OW 351
38989: OR
38990: IFFALSE 38996
// exit ;
38992: POP
38993: POP
38994: GO 39288
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38996: LD_ADDR_VAR 0 8
39000: PUSH
39001: LD_VAR 0 12
39005: PUSH
39006: LD_VAR 0 7
39010: ARRAY
39011: PUSH
39012: LD_INT 1
39014: ARRAY
39015: PPUSH
39016: LD_VAR 0 12
39020: PUSH
39021: LD_VAR 0 7
39025: ARRAY
39026: PUSH
39027: LD_INT 2
39029: ARRAY
39030: PPUSH
39031: CALL_OW 546
39035: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39036: LD_VAR 0 8
39040: PUSH
39041: LD_INT 1
39043: ARRAY
39044: PUSH
39045: LD_VAR 0 8
39049: PUSH
39050: LD_INT 2
39052: ARRAY
39053: PUSH
39054: LD_VAR 0 13
39058: PUSH
39059: LD_INT 2
39061: PLUS
39062: GREATER
39063: OR
39064: PUSH
39065: LD_VAR 0 8
39069: PUSH
39070: LD_INT 2
39072: ARRAY
39073: PUSH
39074: LD_VAR 0 13
39078: PUSH
39079: LD_INT 2
39081: MINUS
39082: LESS
39083: OR
39084: PUSH
39085: LD_VAR 0 8
39089: PUSH
39090: LD_INT 3
39092: ARRAY
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: LD_INT 8
39099: PUSH
39100: LD_INT 9
39102: PUSH
39103: LD_INT 10
39105: PUSH
39106: LD_INT 11
39108: PUSH
39109: LD_INT 12
39111: PUSH
39112: LD_INT 13
39114: PUSH
39115: LD_INT 16
39117: PUSH
39118: LD_INT 17
39120: PUSH
39121: LD_INT 18
39123: PUSH
39124: LD_INT 19
39126: PUSH
39127: LD_INT 20
39129: PUSH
39130: LD_INT 21
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: IN
39148: NOT
39149: OR
39150: PUSH
39151: LD_VAR 0 8
39155: PUSH
39156: LD_INT 5
39158: ARRAY
39159: NOT
39160: OR
39161: PUSH
39162: LD_VAR 0 8
39166: PUSH
39167: LD_INT 6
39169: ARRAY
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 7
39179: PUSH
39180: LD_INT 9
39182: PUSH
39183: LD_INT 10
39185: PUSH
39186: LD_INT 11
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: IN
39197: NOT
39198: OR
39199: IFFALSE 39205
// exit ;
39201: POP
39202: POP
39203: GO 39288
// end ;
39205: GO 38876
39207: POP
39208: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39209: LD_VAR 0 9
39213: PPUSH
39214: LD_VAR 0 3
39218: PPUSH
39219: LD_VAR 0 4
39223: PPUSH
39224: LD_INT 20
39226: PPUSH
39227: CALL 31240 0 4
39231: PUSH
39232: LD_INT 4
39234: ARRAY
39235: IFFALSE 39239
// exit ;
39237: GO 39288
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39239: LD_VAR 0 2
39243: PUSH
39244: LD_INT 29
39246: PUSH
39247: LD_INT 30
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: IN
39254: PUSH
39255: LD_VAR 0 3
39259: PPUSH
39260: LD_VAR 0 4
39264: PPUSH
39265: LD_VAR 0 9
39269: PPUSH
39270: CALL_OW 440
39274: NOT
39275: AND
39276: IFFALSE 39280
// exit ;
39278: GO 39288
// result := true ;
39280: LD_ADDR_VAR 0 6
39284: PUSH
39285: LD_INT 1
39287: ST_TO_ADDR
// end ;
39288: LD_VAR 0 6
39292: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39293: LD_INT 0
39295: PPUSH
39296: PPUSH
39297: PPUSH
39298: PPUSH
39299: PPUSH
39300: PPUSH
39301: PPUSH
39302: PPUSH
39303: PPUSH
39304: PPUSH
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
39312: PPUSH
39313: PPUSH
39314: PPUSH
39315: PPUSH
39316: PPUSH
39317: PPUSH
39318: PPUSH
39319: PPUSH
39320: PPUSH
39321: PPUSH
39322: PPUSH
39323: PPUSH
39324: PPUSH
39325: PPUSH
39326: PPUSH
39327: PPUSH
39328: PPUSH
39329: PPUSH
39330: PPUSH
39331: PPUSH
39332: PPUSH
39333: PPUSH
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
39339: PPUSH
39340: PPUSH
39341: PPUSH
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
39352: PPUSH
// result = [ ] ;
39353: LD_ADDR_VAR 0 7
39357: PUSH
39358: EMPTY
39359: ST_TO_ADDR
// temp_list = [ ] ;
39360: LD_ADDR_VAR 0 9
39364: PUSH
39365: EMPTY
39366: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39367: LD_VAR 0 4
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: LD_INT 3
39383: PUSH
39384: LD_INT 4
39386: PUSH
39387: LD_INT 5
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: IN
39398: NOT
39399: PUSH
39400: LD_VAR 0 1
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: IN
39415: PUSH
39416: LD_VAR 0 5
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: IN
39435: NOT
39436: AND
39437: OR
39438: IFFALSE 39442
// exit ;
39440: GO 57833
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39442: LD_VAR 0 1
39446: PUSH
39447: LD_INT 6
39449: PUSH
39450: LD_INT 7
39452: PUSH
39453: LD_INT 8
39455: PUSH
39456: LD_INT 13
39458: PUSH
39459: LD_INT 12
39461: PUSH
39462: LD_INT 15
39464: PUSH
39465: LD_INT 11
39467: PUSH
39468: LD_INT 14
39470: PUSH
39471: LD_INT 10
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: IN
39485: IFFALSE 39495
// btype = b_lab ;
39487: LD_ADDR_VAR 0 1
39491: PUSH
39492: LD_INT 6
39494: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39495: LD_VAR 0 6
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: IN
39514: NOT
39515: PUSH
39516: LD_VAR 0 1
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 2
39529: PUSH
39530: LD_INT 3
39532: PUSH
39533: LD_INT 6
39535: PUSH
39536: LD_INT 36
39538: PUSH
39539: LD_INT 4
39541: PUSH
39542: LD_INT 5
39544: PUSH
39545: LD_INT 31
39547: PUSH
39548: LD_INT 32
39550: PUSH
39551: LD_INT 33
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: IN
39567: NOT
39568: PUSH
39569: LD_VAR 0 6
39573: PUSH
39574: LD_INT 1
39576: EQUAL
39577: AND
39578: OR
39579: PUSH
39580: LD_VAR 0 1
39584: PUSH
39585: LD_INT 2
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: IN
39595: NOT
39596: PUSH
39597: LD_VAR 0 6
39601: PUSH
39602: LD_INT 2
39604: EQUAL
39605: AND
39606: OR
39607: IFFALSE 39617
// mode = 0 ;
39609: LD_ADDR_VAR 0 6
39613: PUSH
39614: LD_INT 0
39616: ST_TO_ADDR
// case mode of 0 :
39617: LD_VAR 0 6
39621: PUSH
39622: LD_INT 0
39624: DOUBLE
39625: EQUAL
39626: IFTRUE 39630
39628: GO 51083
39630: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39631: LD_ADDR_VAR 0 11
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: LD_INT 2
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 2
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: LD_INT 2
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: LD_INT 3
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 3
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39824: LD_ADDR_VAR 0 12
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: NEG
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 2
39958: NEG
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: NEG
39971: PUSH
39972: LD_INT 1
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 3
39981: NEG
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40020: LD_ADDR_VAR 0 13
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 2
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 2
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 2
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: NEG
40168: PUSH
40169: LD_INT 3
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 3
40179: NEG
40180: PUSH
40181: LD_INT 2
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 3
40191: NEG
40192: PUSH
40193: LD_INT 3
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40219: LD_ADDR_VAR 0 14
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: LD_INT 2
40304: NEG
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 2
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: LD_INT 3
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: LD_INT 3
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 2
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40415: LD_ADDR_VAR 0 15
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 2
40538: NEG
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 2
40549: NEG
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 2
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 3
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40608: LD_ADDR_VAR 0 16
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: LD_INT 2
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 3
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: LD_INT 3
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 2
40775: PUSH
40776: LD_INT 3
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40801: LD_ADDR_VAR 0 17
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: LD_INT 2
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 2
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: LD_INT 2
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 1
40966: NEG
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 2
40977: NEG
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 2
40988: NEG
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: NEG
41001: PUSH
41002: LD_INT 2
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41031: LD_ADDR_VAR 0 18
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 2
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: LD_INT 2
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: LD_INT 2
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: NEG
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41261: LD_ADDR_VAR 0 19
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 2
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: PUSH
41397: LD_INT 2
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 1
41426: NEG
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41491: LD_ADDR_VAR 0 20
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 2
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 2
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41721: LD_ADDR_VAR 0 21
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: LD_INT 2
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: NEG
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41951: LD_ADDR_VAR 0 22
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: LD_INT 2
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 2
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42181: LD_ADDR_VAR 0 23
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: PUSH
42317: LD_INT 2
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: NEG
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: LD_INT 2
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 3
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: LD_INT 3
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42461: LD_ADDR_VAR 0 24
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 2
42637: NEG
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 2
42648: NEG
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 3
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 3
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42737: LD_ADDR_VAR 0 25
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 3
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: LD_INT 3
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43011: LD_ADDR_VAR 0 26
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 3
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: NEG
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43287: LD_ADDR_VAR 0 27
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: LD_INT 2
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 2
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: NEG
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: NEG
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 3
43520: NEG
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 3
43532: NEG
43533: PUSH
43534: LD_INT 2
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43567: LD_ADDR_VAR 0 28
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: LD_INT 3
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: LD_INT 3
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 3
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 3
43814: NEG
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43849: LD_ADDR_VAR 0 29
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: LD_INT 3
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 3
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 3
44093: NEG
44094: PUSH
44095: LD_INT 2
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44128: LD_ADDR_VAR 0 30
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 3
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 3
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 3
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 3
44371: NEG
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44406: LD_ADDR_VAR 0 31
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: LD_INT 2
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: LD_INT 3
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 3
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 3
44649: NEG
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44684: LD_ADDR_VAR 0 32
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 2
44850: NEG
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 3
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 3
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 3
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 3
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44962: LD_ADDR_VAR 0 33
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: NEG
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: LD_INT 2
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: LD_INT 3
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 3
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 3
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 3
45206: NEG
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45241: LD_ADDR_VAR 0 34
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: LD_INT 3
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 3
45486: NEG
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45521: LD_ADDR_VAR 0 35
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45633: LD_ADDR_VAR 0 36
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45745: LD_ADDR_VAR 0 37
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45857: LD_ADDR_VAR 0 38
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45969: LD_ADDR_VAR 0 39
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46081: LD_ADDR_VAR 0 40
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46193: LD_ADDR_VAR 0 41
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 3
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 3
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 3
46426: PUSH
46427: LD_INT 2
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 3
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 3
46467: NEG
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 3
46478: NEG
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 3
46490: NEG
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: NEG
46503: PUSH
46504: LD_INT 3
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46543: LD_ADDR_VAR 0 42
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: LD_INT 2
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: LD_INT 3
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: LD_INT 3
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 3
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 3
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 3
46789: PUSH
46790: LD_INT 3
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: PUSH
46800: LD_INT 3
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 3
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 3
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 3
46840: NEG
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 3
46852: NEG
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46893: LD_ADDR_VAR 0 43
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: NEG
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 3
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 3
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 3
47189: NEG
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 3
47200: NEG
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47241: LD_ADDR_VAR 0 44
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 3
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 3
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 3
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: LD_INT 3
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 3
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 3
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 3
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 3
47550: NEG
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47591: LD_ADDR_VAR 0 45
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: LD_INT 3
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 3
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 3
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 3
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: LD_INT 3
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: NEG
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 3
47900: NEG
47901: PUSH
47902: LD_INT 3
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47941: LD_ADDR_VAR 0 46
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 3
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 3
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 3
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 3
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 3
48237: NEG
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 3
48248: NEG
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48289: LD_ADDR_VAR 0 47
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48440: LD_ADDR_VAR 0 48
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48587: LD_ADDR_VAR 0 49
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 2
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 2
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48731: LD_ADDR_VAR 0 50
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48875: LD_ADDR_VAR 0 51
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49022: LD_ADDR_VAR 0 52
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 2
49149: NEG
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49173: LD_ADDR_VAR 0 53
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49403: LD_ADDR_VAR 0 54
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49633: LD_ADDR_VAR 0 55
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49863: LD_ADDR_VAR 0 56
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 2
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50093: LD_ADDR_VAR 0 57
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50323: LD_ADDR_VAR 0 58
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 2
50510: NEG
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50553: LD_ADDR_VAR 0 59
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50641: LD_ADDR_VAR 0 60
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50729: LD_ADDR_VAR 0 61
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50817: LD_ADDR_VAR 0 62
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50905: LD_ADDR_VAR 0 63
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50993: LD_ADDR_VAR 0 64
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: ST_TO_ADDR
// end ; 1 :
51081: GO 56978
51083: LD_INT 1
51085: DOUBLE
51086: EQUAL
51087: IFTRUE 51091
51089: GO 53714
51091: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51092: LD_ADDR_VAR 0 11
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 3
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 3
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: LIST
51135: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51136: LD_ADDR_VAR 0 12
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 3
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 3
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51177: LD_ADDR_VAR 0 13
51181: PUSH
51182: LD_INT 3
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: LD_INT 3
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: LIST
51216: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51217: LD_ADDR_VAR 0 14
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 3
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 3
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: LIST
51257: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51258: LD_ADDR_VAR 0 15
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51302: LD_ADDR_VAR 0 16
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: NEG
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 3
51333: NEG
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51348: LD_ADDR_VAR 0 17
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 3
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: LIST
51391: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51392: LD_ADDR_VAR 0 18
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 3
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 3
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51433: LD_ADDR_VAR 0 19
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: PUSH
51451: LD_INT 3
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: LIST
51472: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51473: LD_ADDR_VAR 0 20
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 3
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: LIST
51513: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51514: LD_ADDR_VAR 0 21
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 3
51532: NEG
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: LIST
51557: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51558: LD_ADDR_VAR 0 22
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 3
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 3
51577: NEG
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 3
51589: NEG
51590: PUSH
51591: LD_INT 3
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: LIST
51603: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51604: LD_ADDR_VAR 0 23
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 4
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: LIST
51647: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51648: LD_ADDR_VAR 0 24
51652: PUSH
51653: LD_INT 3
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 4
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: LIST
51688: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51689: LD_ADDR_VAR 0 25
51693: PUSH
51694: LD_INT 3
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 4
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: LD_INT 4
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51729: LD_ADDR_VAR 0 26
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 3
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: LD_INT 4
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: LIST
51769: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51770: LD_ADDR_VAR 0 27
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 3
51788: NEG
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 4
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51814: LD_ADDR_VAR 0 28
51818: PUSH
51819: LD_INT 3
51821: NEG
51822: PUSH
51823: LD_INT 3
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 3
51833: NEG
51834: PUSH
51835: LD_INT 4
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 4
51845: NEG
51846: PUSH
51847: LD_INT 3
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: LIST
51859: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51860: LD_ADDR_VAR 0 29
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 3
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: LD_INT 4
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 4
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 3
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 5
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 5
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 4
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 6
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 6
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 5
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52015: LD_ADDR_VAR 0 30
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 4
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 4
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 4
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 5
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 5
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 5
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 6
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 6
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52158: LD_ADDR_VAR 0 31
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 4
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 4
52205: PUSH
52206: LD_INT 4
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: LD_INT 4
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 5
52225: PUSH
52226: LD_INT 4
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 5
52235: PUSH
52236: LD_INT 5
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 4
52245: PUSH
52246: LD_INT 5
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 6
52255: PUSH
52256: LD_INT 5
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 6
52265: PUSH
52266: LD_INT 6
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 5
52275: PUSH
52276: LD_INT 6
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52297: LD_ADDR_VAR 0 32
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 3
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 4
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 4
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: LD_INT 5
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 5
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 4
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 6
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 6
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 5
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52440: LD_ADDR_VAR 0 33
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 3
52458: NEG
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 3
52481: NEG
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 4
52492: NEG
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 4
52503: NEG
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 4
52515: NEG
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 5
52526: NEG
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 5
52537: NEG
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 5
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 6
52560: NEG
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 6
52571: NEG
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52595: LD_ADDR_VAR 0 34
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: LD_INT 3
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 3
52614: NEG
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: LD_INT 3
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 3
52638: NEG
52639: PUSH
52640: LD_INT 4
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 4
52650: NEG
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 4
52662: NEG
52663: PUSH
52664: LD_INT 4
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 4
52674: NEG
52675: PUSH
52676: LD_INT 5
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 5
52686: NEG
52687: PUSH
52688: LD_INT 4
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 5
52698: NEG
52699: PUSH
52700: LD_INT 5
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 5
52710: NEG
52711: PUSH
52712: LD_INT 6
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 6
52722: NEG
52723: PUSH
52724: LD_INT 5
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 6
52734: NEG
52735: PUSH
52736: LD_INT 6
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52758: LD_ADDR_VAR 0 41
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: LIST
52801: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52802: LD_ADDR_VAR 0 42
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52843: LD_ADDR_VAR 0 43
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 3
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: LD_INT 3
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: LIST
52882: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52883: LD_ADDR_VAR 0 44
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: LIST
52923: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52924: LD_ADDR_VAR 0 45
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 3
52953: NEG
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: LIST
52967: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52968: LD_ADDR_VAR 0 46
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 3
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: NEG
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53014: LD_ADDR_VAR 0 47
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53047: LD_ADDR_VAR 0 48
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 2
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53078: LD_ADDR_VAR 0 49
53082: PUSH
53083: LD_INT 3
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 3
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53107: LD_ADDR_VAR 0 50
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53136: LD_ADDR_VAR 0 51
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53167: LD_ADDR_VAR 0 52
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 3
53186: NEG
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53200: LD_ADDR_VAR 0 53
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: LD_INT 3
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53244: LD_ADDR_VAR 0 54
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53285: LD_ADDR_VAR 0 55
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: LD_INT 3
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53325: LD_ADDR_VAR 0 56
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 3
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: LIST
53365: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53366: LD_ADDR_VAR 0 57
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: NEG
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: LIST
53409: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53410: LD_ADDR_VAR 0 58
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: LD_INT 3
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: NEG
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: LIST
53455: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53456: LD_ADDR_VAR 0 59
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 2
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: LIST
53499: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53500: LD_ADDR_VAR 0 60
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: LIST
53540: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53541: LD_ADDR_VAR 0 61
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53581: LD_ADDR_VAR 0 62
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53622: LD_ADDR_VAR 0 63
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: LIST
53665: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53666: LD_ADDR_VAR 0 64
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: LIST
53711: ST_TO_ADDR
// end ; 2 :
53712: GO 56978
53714: LD_INT 2
53716: DOUBLE
53717: EQUAL
53718: IFTRUE 53722
53720: GO 56977
53722: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53723: LD_ADDR_VAR 0 29
53727: PUSH
53728: LD_INT 4
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 4
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 5
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 5
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 4
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 3
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 5
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 3
53823: PUSH
53824: LD_INT 3
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 4
53843: PUSH
53844: LD_INT 3
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 4
53853: PUSH
53854: LD_INT 4
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: PUSH
53864: LD_INT 4
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 4
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: LD_INT 4
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 4
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 4
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: LD_INT 5
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 5
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 4
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: LD_INT 3
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: LD_INT 5
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: LD_INT 3
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 3
54017: NEG
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 3
54051: NEG
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 4
54062: NEG
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 4
54073: NEG
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 4
54085: NEG
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 4
54108: NEG
54109: PUSH
54110: LD_INT 4
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 4
54120: NEG
54121: PUSH
54122: LD_INT 5
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 3
54132: NEG
54133: PUSH
54134: LD_INT 4
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 3
54144: NEG
54145: PUSH
54146: LD_INT 3
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 4
54156: NEG
54157: PUSH
54158: LD_INT 3
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 5
54168: NEG
54169: PUSH
54170: LD_INT 4
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 5
54180: NEG
54181: PUSH
54182: LD_INT 5
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: NEG
54193: PUSH
54194: LD_INT 5
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 5
54204: NEG
54205: PUSH
54206: LD_INT 3
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54261: LD_ADDR_VAR 0 30
54265: PUSH
54266: LD_INT 4
54268: PUSH
54269: LD_INT 4
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 4
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 5
54288: PUSH
54289: LD_INT 4
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 5
54298: PUSH
54299: LD_INT 5
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 4
54308: PUSH
54309: LD_INT 5
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 3
54318: PUSH
54319: LD_INT 4
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: LD_INT 3
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 5
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: LD_INT 5
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 3
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 4
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: LD_INT 3
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 4
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 4
54451: NEG
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 4
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 3
54474: NEG
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 3
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 4
54496: NEG
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 5
54507: NEG
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 5
54518: NEG
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 5
54530: NEG
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 3
54553: NEG
54554: PUSH
54555: LD_INT 3
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 3
54565: NEG
54566: PUSH
54567: LD_INT 4
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 2
54577: NEG
54578: PUSH
54579: LD_INT 3
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 3
54601: NEG
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 4
54613: NEG
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 4
54625: NEG
54626: PUSH
54627: LD_INT 4
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: LD_INT 4
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 4
54649: NEG
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 4
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 5
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 4
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: LD_INT 3
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 3
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: LD_INT 4
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: LD_INT 5
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: LD_INT 3
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: LD_INT 5
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54808: LD_ADDR_VAR 0 31
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 4
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 3
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: LD_INT 4
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 5
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 5
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 4
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: LD_INT 5
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: LD_INT 3
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 3
54908: NEG
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: NEG
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 4
54964: NEG
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 4
54975: NEG
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 4
54987: NEG
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 4
55010: NEG
55011: PUSH
55012: LD_INT 4
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 4
55022: NEG
55023: PUSH
55024: LD_INT 5
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 3
55034: NEG
55035: PUSH
55036: LD_INT 4
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 3
55046: NEG
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 4
55058: NEG
55059: PUSH
55060: LD_INT 3
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 5
55070: NEG
55071: PUSH
55072: LD_INT 4
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 5
55082: NEG
55083: PUSH
55084: LD_INT 5
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: LD_INT 5
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 5
55106: NEG
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 3
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 4
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: LD_INT 3
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: LD_INT 4
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 2
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 4
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 4
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 4
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 5
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 5
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 4
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 5
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55358: LD_ADDR_VAR 0 32
55362: PUSH
55363: LD_INT 4
55365: NEG
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 4
55376: NEG
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: NEG
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 3
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 4
55410: NEG
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 5
55421: NEG
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 5
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 5
55444: NEG
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 3
55456: NEG
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: NEG
55468: PUSH
55469: LD_INT 3
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 3
55479: NEG
55480: PUSH
55481: LD_INT 4
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 3
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 3
55515: NEG
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 4
55527: NEG
55528: PUSH
55529: LD_INT 3
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 4
55539: NEG
55540: PUSH
55541: LD_INT 4
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 4
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 4
55563: NEG
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 4
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 5
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 4
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 3
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 3
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 4
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 5
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: LD_INT 5
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 4
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 4
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 3
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 4
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 4
55770: PUSH
55771: LD_INT 4
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 4
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 5
55790: PUSH
55791: LD_INT 4
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 5
55800: PUSH
55801: LD_INT 5
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 4
55810: PUSH
55811: LD_INT 5
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 3
55820: PUSH
55821: LD_INT 4
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 3
55830: PUSH
55831: LD_INT 3
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 5
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 3
55850: PUSH
55851: LD_INT 5
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55905: LD_ADDR_VAR 0 33
55909: PUSH
55910: LD_INT 4
55912: NEG
55913: PUSH
55914: LD_INT 4
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 4
55924: NEG
55925: PUSH
55926: LD_INT 5
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: LD_INT 4
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: NEG
55949: PUSH
55950: LD_INT 3
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 4
55960: NEG
55961: PUSH
55962: LD_INT 3
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 5
55972: NEG
55973: PUSH
55974: LD_INT 4
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 5
55984: NEG
55985: PUSH
55986: LD_INT 5
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 3
55996: NEG
55997: PUSH
55998: LD_INT 5
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 5
56008: NEG
56009: PUSH
56010: LD_INT 3
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 3
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 4
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 3
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 4
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: LD_INT 4
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 4
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 4
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 5
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 5
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 4
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 3
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 5
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 3
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 4
56235: PUSH
56236: LD_INT 3
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: LD_INT 4
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 4
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 4
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 4
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 5
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 5
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 4
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 3
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: LD_INT 5
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56443: LD_ADDR_VAR 0 34
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 4
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 5
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 4
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: LD_INT 3
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 4
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 5
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 3
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 5
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 4
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 4
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 4
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 4
56645: PUSH
56646: LD_INT 4
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 4
56655: PUSH
56656: LD_INT 3
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 5
56665: PUSH
56666: LD_INT 4
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 5
56675: PUSH
56676: LD_INT 5
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 4
56685: PUSH
56686: LD_INT 5
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: LD_INT 4
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 5
56715: PUSH
56716: LD_INT 3
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: LD_INT 5
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 3
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 3
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 4
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 4
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 4
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: NEG
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 4
56828: NEG
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 4
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 3
56851: NEG
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 4
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 5
56884: NEG
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 5
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 5
56907: NEG
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: NEG
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: ST_TO_ADDR
// end ; end ;
56975: GO 56978
56977: POP
// case btype of b_depot , b_warehouse :
56978: LD_VAR 0 1
56982: PUSH
56983: LD_INT 0
56985: DOUBLE
56986: EQUAL
56987: IFTRUE 56997
56989: LD_INT 1
56991: DOUBLE
56992: EQUAL
56993: IFTRUE 56997
56995: GO 57198
56997: POP
// case nation of nation_american :
56998: LD_VAR 0 5
57002: PUSH
57003: LD_INT 1
57005: DOUBLE
57006: EQUAL
57007: IFTRUE 57011
57009: GO 57067
57011: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57012: LD_ADDR_VAR 0 9
57016: PUSH
57017: LD_VAR 0 11
57021: PUSH
57022: LD_VAR 0 12
57026: PUSH
57027: LD_VAR 0 13
57031: PUSH
57032: LD_VAR 0 14
57036: PUSH
57037: LD_VAR 0 15
57041: PUSH
57042: LD_VAR 0 16
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: PUSH
57055: LD_VAR 0 4
57059: PUSH
57060: LD_INT 1
57062: PLUS
57063: ARRAY
57064: ST_TO_ADDR
57065: GO 57196
57067: LD_INT 2
57069: DOUBLE
57070: EQUAL
57071: IFTRUE 57075
57073: GO 57131
57075: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57076: LD_ADDR_VAR 0 9
57080: PUSH
57081: LD_VAR 0 17
57085: PUSH
57086: LD_VAR 0 18
57090: PUSH
57091: LD_VAR 0 19
57095: PUSH
57096: LD_VAR 0 20
57100: PUSH
57101: LD_VAR 0 21
57105: PUSH
57106: LD_VAR 0 22
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: PUSH
57119: LD_VAR 0 4
57123: PUSH
57124: LD_INT 1
57126: PLUS
57127: ARRAY
57128: ST_TO_ADDR
57129: GO 57196
57131: LD_INT 3
57133: DOUBLE
57134: EQUAL
57135: IFTRUE 57139
57137: GO 57195
57139: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57140: LD_ADDR_VAR 0 9
57144: PUSH
57145: LD_VAR 0 23
57149: PUSH
57150: LD_VAR 0 24
57154: PUSH
57155: LD_VAR 0 25
57159: PUSH
57160: LD_VAR 0 26
57164: PUSH
57165: LD_VAR 0 27
57169: PUSH
57170: LD_VAR 0 28
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: PUSH
57183: LD_VAR 0 4
57187: PUSH
57188: LD_INT 1
57190: PLUS
57191: ARRAY
57192: ST_TO_ADDR
57193: GO 57196
57195: POP
57196: GO 57751
57198: LD_INT 2
57200: DOUBLE
57201: EQUAL
57202: IFTRUE 57212
57204: LD_INT 3
57206: DOUBLE
57207: EQUAL
57208: IFTRUE 57212
57210: GO 57268
57212: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57213: LD_ADDR_VAR 0 9
57217: PUSH
57218: LD_VAR 0 29
57222: PUSH
57223: LD_VAR 0 30
57227: PUSH
57228: LD_VAR 0 31
57232: PUSH
57233: LD_VAR 0 32
57237: PUSH
57238: LD_VAR 0 33
57242: PUSH
57243: LD_VAR 0 34
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: PUSH
57256: LD_VAR 0 4
57260: PUSH
57261: LD_INT 1
57263: PLUS
57264: ARRAY
57265: ST_TO_ADDR
57266: GO 57751
57268: LD_INT 16
57270: DOUBLE
57271: EQUAL
57272: IFTRUE 57330
57274: LD_INT 17
57276: DOUBLE
57277: EQUAL
57278: IFTRUE 57330
57280: LD_INT 18
57282: DOUBLE
57283: EQUAL
57284: IFTRUE 57330
57286: LD_INT 19
57288: DOUBLE
57289: EQUAL
57290: IFTRUE 57330
57292: LD_INT 22
57294: DOUBLE
57295: EQUAL
57296: IFTRUE 57330
57298: LD_INT 20
57300: DOUBLE
57301: EQUAL
57302: IFTRUE 57330
57304: LD_INT 21
57306: DOUBLE
57307: EQUAL
57308: IFTRUE 57330
57310: LD_INT 23
57312: DOUBLE
57313: EQUAL
57314: IFTRUE 57330
57316: LD_INT 24
57318: DOUBLE
57319: EQUAL
57320: IFTRUE 57330
57322: LD_INT 25
57324: DOUBLE
57325: EQUAL
57326: IFTRUE 57330
57328: GO 57386
57330: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57331: LD_ADDR_VAR 0 9
57335: PUSH
57336: LD_VAR 0 35
57340: PUSH
57341: LD_VAR 0 36
57345: PUSH
57346: LD_VAR 0 37
57350: PUSH
57351: LD_VAR 0 38
57355: PUSH
57356: LD_VAR 0 39
57360: PUSH
57361: LD_VAR 0 40
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: PUSH
57374: LD_VAR 0 4
57378: PUSH
57379: LD_INT 1
57381: PLUS
57382: ARRAY
57383: ST_TO_ADDR
57384: GO 57751
57386: LD_INT 6
57388: DOUBLE
57389: EQUAL
57390: IFTRUE 57442
57392: LD_INT 7
57394: DOUBLE
57395: EQUAL
57396: IFTRUE 57442
57398: LD_INT 8
57400: DOUBLE
57401: EQUAL
57402: IFTRUE 57442
57404: LD_INT 13
57406: DOUBLE
57407: EQUAL
57408: IFTRUE 57442
57410: LD_INT 12
57412: DOUBLE
57413: EQUAL
57414: IFTRUE 57442
57416: LD_INT 15
57418: DOUBLE
57419: EQUAL
57420: IFTRUE 57442
57422: LD_INT 11
57424: DOUBLE
57425: EQUAL
57426: IFTRUE 57442
57428: LD_INT 14
57430: DOUBLE
57431: EQUAL
57432: IFTRUE 57442
57434: LD_INT 10
57436: DOUBLE
57437: EQUAL
57438: IFTRUE 57442
57440: GO 57498
57442: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57443: LD_ADDR_VAR 0 9
57447: PUSH
57448: LD_VAR 0 41
57452: PUSH
57453: LD_VAR 0 42
57457: PUSH
57458: LD_VAR 0 43
57462: PUSH
57463: LD_VAR 0 44
57467: PUSH
57468: LD_VAR 0 45
57472: PUSH
57473: LD_VAR 0 46
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: PUSH
57486: LD_VAR 0 4
57490: PUSH
57491: LD_INT 1
57493: PLUS
57494: ARRAY
57495: ST_TO_ADDR
57496: GO 57751
57498: LD_INT 36
57500: DOUBLE
57501: EQUAL
57502: IFTRUE 57506
57504: GO 57562
57506: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57507: LD_ADDR_VAR 0 9
57511: PUSH
57512: LD_VAR 0 47
57516: PUSH
57517: LD_VAR 0 48
57521: PUSH
57522: LD_VAR 0 49
57526: PUSH
57527: LD_VAR 0 50
57531: PUSH
57532: LD_VAR 0 51
57536: PUSH
57537: LD_VAR 0 52
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: PUSH
57550: LD_VAR 0 4
57554: PUSH
57555: LD_INT 1
57557: PLUS
57558: ARRAY
57559: ST_TO_ADDR
57560: GO 57751
57562: LD_INT 4
57564: DOUBLE
57565: EQUAL
57566: IFTRUE 57588
57568: LD_INT 5
57570: DOUBLE
57571: EQUAL
57572: IFTRUE 57588
57574: LD_INT 34
57576: DOUBLE
57577: EQUAL
57578: IFTRUE 57588
57580: LD_INT 37
57582: DOUBLE
57583: EQUAL
57584: IFTRUE 57588
57586: GO 57644
57588: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57589: LD_ADDR_VAR 0 9
57593: PUSH
57594: LD_VAR 0 53
57598: PUSH
57599: LD_VAR 0 54
57603: PUSH
57604: LD_VAR 0 55
57608: PUSH
57609: LD_VAR 0 56
57613: PUSH
57614: LD_VAR 0 57
57618: PUSH
57619: LD_VAR 0 58
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: PUSH
57632: LD_VAR 0 4
57636: PUSH
57637: LD_INT 1
57639: PLUS
57640: ARRAY
57641: ST_TO_ADDR
57642: GO 57751
57644: LD_INT 31
57646: DOUBLE
57647: EQUAL
57648: IFTRUE 57694
57650: LD_INT 32
57652: DOUBLE
57653: EQUAL
57654: IFTRUE 57694
57656: LD_INT 33
57658: DOUBLE
57659: EQUAL
57660: IFTRUE 57694
57662: LD_INT 27
57664: DOUBLE
57665: EQUAL
57666: IFTRUE 57694
57668: LD_INT 26
57670: DOUBLE
57671: EQUAL
57672: IFTRUE 57694
57674: LD_INT 28
57676: DOUBLE
57677: EQUAL
57678: IFTRUE 57694
57680: LD_INT 29
57682: DOUBLE
57683: EQUAL
57684: IFTRUE 57694
57686: LD_INT 30
57688: DOUBLE
57689: EQUAL
57690: IFTRUE 57694
57692: GO 57750
57694: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57695: LD_ADDR_VAR 0 9
57699: PUSH
57700: LD_VAR 0 59
57704: PUSH
57705: LD_VAR 0 60
57709: PUSH
57710: LD_VAR 0 61
57714: PUSH
57715: LD_VAR 0 62
57719: PUSH
57720: LD_VAR 0 63
57724: PUSH
57725: LD_VAR 0 64
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: PUSH
57738: LD_VAR 0 4
57742: PUSH
57743: LD_INT 1
57745: PLUS
57746: ARRAY
57747: ST_TO_ADDR
57748: GO 57751
57750: POP
// temp_list2 = [ ] ;
57751: LD_ADDR_VAR 0 10
57755: PUSH
57756: EMPTY
57757: ST_TO_ADDR
// for i in temp_list do
57758: LD_ADDR_VAR 0 8
57762: PUSH
57763: LD_VAR 0 9
57767: PUSH
57768: FOR_IN
57769: IFFALSE 57821
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57771: LD_ADDR_VAR 0 10
57775: PUSH
57776: LD_VAR 0 10
57780: PUSH
57781: LD_VAR 0 8
57785: PUSH
57786: LD_INT 1
57788: ARRAY
57789: PUSH
57790: LD_VAR 0 2
57794: PLUS
57795: PUSH
57796: LD_VAR 0 8
57800: PUSH
57801: LD_INT 2
57803: ARRAY
57804: PUSH
57805: LD_VAR 0 3
57809: PLUS
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: ADD
57818: ST_TO_ADDR
57819: GO 57768
57821: POP
57822: POP
// result = temp_list2 ;
57823: LD_ADDR_VAR 0 7
57827: PUSH
57828: LD_VAR 0 10
57832: ST_TO_ADDR
// end ;
57833: LD_VAR 0 7
57837: RET
// export function EnemyInRange ( unit , dist ) ; begin
57838: LD_INT 0
57840: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57841: LD_ADDR_VAR 0 3
57845: PUSH
57846: LD_VAR 0 1
57850: PPUSH
57851: CALL_OW 255
57855: PPUSH
57856: LD_VAR 0 1
57860: PPUSH
57861: CALL_OW 250
57865: PPUSH
57866: LD_VAR 0 1
57870: PPUSH
57871: CALL_OW 251
57875: PPUSH
57876: LD_VAR 0 2
57880: PPUSH
57881: CALL 31240 0 4
57885: PUSH
57886: LD_INT 4
57888: ARRAY
57889: ST_TO_ADDR
// end ;
57890: LD_VAR 0 3
57894: RET
// export function PlayerSeeMe ( unit ) ; begin
57895: LD_INT 0
57897: PPUSH
// result := See ( your_side , unit ) ;
57898: LD_ADDR_VAR 0 2
57902: PUSH
57903: LD_OWVAR 2
57907: PPUSH
57908: LD_VAR 0 1
57912: PPUSH
57913: CALL_OW 292
57917: ST_TO_ADDR
// end ;
57918: LD_VAR 0 2
57922: RET
// export function ReverseDir ( unit ) ; begin
57923: LD_INT 0
57925: PPUSH
// if not unit then
57926: LD_VAR 0 1
57930: NOT
57931: IFFALSE 57935
// exit ;
57933: GO 57958
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57935: LD_ADDR_VAR 0 2
57939: PUSH
57940: LD_VAR 0 1
57944: PPUSH
57945: CALL_OW 254
57949: PUSH
57950: LD_INT 3
57952: PLUS
57953: PUSH
57954: LD_INT 6
57956: MOD
57957: ST_TO_ADDR
// end ;
57958: LD_VAR 0 2
57962: RET
// export function ReverseArray ( array ) ; var i ; begin
57963: LD_INT 0
57965: PPUSH
57966: PPUSH
// if not array then
57967: LD_VAR 0 1
57971: NOT
57972: IFFALSE 57976
// exit ;
57974: GO 58031
// result := [ ] ;
57976: LD_ADDR_VAR 0 2
57980: PUSH
57981: EMPTY
57982: ST_TO_ADDR
// for i := array downto 1 do
57983: LD_ADDR_VAR 0 3
57987: PUSH
57988: DOUBLE
57989: LD_VAR 0 1
57993: INC
57994: ST_TO_ADDR
57995: LD_INT 1
57997: PUSH
57998: FOR_DOWNTO
57999: IFFALSE 58029
// result := Join ( result , array [ i ] ) ;
58001: LD_ADDR_VAR 0 2
58005: PUSH
58006: LD_VAR 0 2
58010: PPUSH
58011: LD_VAR 0 1
58015: PUSH
58016: LD_VAR 0 3
58020: ARRAY
58021: PPUSH
58022: CALL 62656 0 2
58026: ST_TO_ADDR
58027: GO 57998
58029: POP
58030: POP
// end ;
58031: LD_VAR 0 2
58035: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58036: LD_INT 0
58038: PPUSH
58039: PPUSH
58040: PPUSH
58041: PPUSH
58042: PPUSH
58043: PPUSH
// if not unit or not hexes then
58044: LD_VAR 0 1
58048: NOT
58049: PUSH
58050: LD_VAR 0 2
58054: NOT
58055: OR
58056: IFFALSE 58060
// exit ;
58058: GO 58183
// dist := 9999 ;
58060: LD_ADDR_VAR 0 5
58064: PUSH
58065: LD_INT 9999
58067: ST_TO_ADDR
// for i = 1 to hexes do
58068: LD_ADDR_VAR 0 4
58072: PUSH
58073: DOUBLE
58074: LD_INT 1
58076: DEC
58077: ST_TO_ADDR
58078: LD_VAR 0 2
58082: PUSH
58083: FOR_TO
58084: IFFALSE 58171
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58086: LD_ADDR_VAR 0 6
58090: PUSH
58091: LD_VAR 0 1
58095: PPUSH
58096: LD_VAR 0 2
58100: PUSH
58101: LD_VAR 0 4
58105: ARRAY
58106: PUSH
58107: LD_INT 1
58109: ARRAY
58110: PPUSH
58111: LD_VAR 0 2
58115: PUSH
58116: LD_VAR 0 4
58120: ARRAY
58121: PUSH
58122: LD_INT 2
58124: ARRAY
58125: PPUSH
58126: CALL_OW 297
58130: ST_TO_ADDR
// if tdist < dist then
58131: LD_VAR 0 6
58135: PUSH
58136: LD_VAR 0 5
58140: LESS
58141: IFFALSE 58169
// begin hex := hexes [ i ] ;
58143: LD_ADDR_VAR 0 8
58147: PUSH
58148: LD_VAR 0 2
58152: PUSH
58153: LD_VAR 0 4
58157: ARRAY
58158: ST_TO_ADDR
// dist := tdist ;
58159: LD_ADDR_VAR 0 5
58163: PUSH
58164: LD_VAR 0 6
58168: ST_TO_ADDR
// end ; end ;
58169: GO 58083
58171: POP
58172: POP
// result := hex ;
58173: LD_ADDR_VAR 0 3
58177: PUSH
58178: LD_VAR 0 8
58182: ST_TO_ADDR
// end ;
58183: LD_VAR 0 3
58187: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58188: LD_INT 0
58190: PPUSH
58191: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58192: LD_VAR 0 1
58196: NOT
58197: PUSH
58198: LD_VAR 0 1
58202: PUSH
58203: LD_INT 21
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 23
58215: PUSH
58216: LD_INT 2
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PPUSH
58227: CALL_OW 69
58231: IN
58232: NOT
58233: OR
58234: IFFALSE 58238
// exit ;
58236: GO 58285
// for i = 1 to 3 do
58238: LD_ADDR_VAR 0 3
58242: PUSH
58243: DOUBLE
58244: LD_INT 1
58246: DEC
58247: ST_TO_ADDR
58248: LD_INT 3
58250: PUSH
58251: FOR_TO
58252: IFFALSE 58283
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58254: LD_VAR 0 1
58258: PPUSH
58259: CALL_OW 250
58263: PPUSH
58264: LD_VAR 0 1
58268: PPUSH
58269: CALL_OW 251
58273: PPUSH
58274: LD_INT 1
58276: PPUSH
58277: CALL_OW 453
58281: GO 58251
58283: POP
58284: POP
// end ;
58285: LD_VAR 0 2
58289: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58290: LD_INT 0
58292: PPUSH
58293: PPUSH
58294: PPUSH
58295: PPUSH
58296: PPUSH
58297: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58298: LD_VAR 0 1
58302: NOT
58303: PUSH
58304: LD_VAR 0 2
58308: NOT
58309: OR
58310: PUSH
58311: LD_VAR 0 1
58315: PPUSH
58316: CALL_OW 314
58320: OR
58321: IFFALSE 58325
// exit ;
58323: GO 58766
// x := GetX ( enemy_unit ) ;
58325: LD_ADDR_VAR 0 7
58329: PUSH
58330: LD_VAR 0 2
58334: PPUSH
58335: CALL_OW 250
58339: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58340: LD_ADDR_VAR 0 8
58344: PUSH
58345: LD_VAR 0 2
58349: PPUSH
58350: CALL_OW 251
58354: ST_TO_ADDR
// if not x or not y then
58355: LD_VAR 0 7
58359: NOT
58360: PUSH
58361: LD_VAR 0 8
58365: NOT
58366: OR
58367: IFFALSE 58371
// exit ;
58369: GO 58766
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58371: LD_ADDR_VAR 0 6
58375: PUSH
58376: LD_VAR 0 7
58380: PPUSH
58381: LD_INT 0
58383: PPUSH
58384: LD_INT 4
58386: PPUSH
58387: CALL_OW 272
58391: PUSH
58392: LD_VAR 0 8
58396: PPUSH
58397: LD_INT 0
58399: PPUSH
58400: LD_INT 4
58402: PPUSH
58403: CALL_OW 273
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_VAR 0 7
58416: PPUSH
58417: LD_INT 1
58419: PPUSH
58420: LD_INT 4
58422: PPUSH
58423: CALL_OW 272
58427: PUSH
58428: LD_VAR 0 8
58432: PPUSH
58433: LD_INT 1
58435: PPUSH
58436: LD_INT 4
58438: PPUSH
58439: CALL_OW 273
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_VAR 0 7
58452: PPUSH
58453: LD_INT 2
58455: PPUSH
58456: LD_INT 4
58458: PPUSH
58459: CALL_OW 272
58463: PUSH
58464: LD_VAR 0 8
58468: PPUSH
58469: LD_INT 2
58471: PPUSH
58472: LD_INT 4
58474: PPUSH
58475: CALL_OW 273
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_VAR 0 7
58488: PPUSH
58489: LD_INT 3
58491: PPUSH
58492: LD_INT 4
58494: PPUSH
58495: CALL_OW 272
58499: PUSH
58500: LD_VAR 0 8
58504: PPUSH
58505: LD_INT 3
58507: PPUSH
58508: LD_INT 4
58510: PPUSH
58511: CALL_OW 273
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_VAR 0 7
58524: PPUSH
58525: LD_INT 4
58527: PPUSH
58528: LD_INT 4
58530: PPUSH
58531: CALL_OW 272
58535: PUSH
58536: LD_VAR 0 8
58540: PPUSH
58541: LD_INT 4
58543: PPUSH
58544: LD_INT 4
58546: PPUSH
58547: CALL_OW 273
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_VAR 0 7
58560: PPUSH
58561: LD_INT 5
58563: PPUSH
58564: LD_INT 4
58566: PPUSH
58567: CALL_OW 272
58571: PUSH
58572: LD_VAR 0 8
58576: PPUSH
58577: LD_INT 5
58579: PPUSH
58580: LD_INT 4
58582: PPUSH
58583: CALL_OW 273
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: ST_TO_ADDR
// for i = tmp downto 1 do
58600: LD_ADDR_VAR 0 4
58604: PUSH
58605: DOUBLE
58606: LD_VAR 0 6
58610: INC
58611: ST_TO_ADDR
58612: LD_INT 1
58614: PUSH
58615: FOR_DOWNTO
58616: IFFALSE 58717
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58618: LD_VAR 0 6
58622: PUSH
58623: LD_VAR 0 4
58627: ARRAY
58628: PUSH
58629: LD_INT 1
58631: ARRAY
58632: PPUSH
58633: LD_VAR 0 6
58637: PUSH
58638: LD_VAR 0 4
58642: ARRAY
58643: PUSH
58644: LD_INT 2
58646: ARRAY
58647: PPUSH
58648: CALL_OW 488
58652: NOT
58653: PUSH
58654: LD_VAR 0 6
58658: PUSH
58659: LD_VAR 0 4
58663: ARRAY
58664: PUSH
58665: LD_INT 1
58667: ARRAY
58668: PPUSH
58669: LD_VAR 0 6
58673: PUSH
58674: LD_VAR 0 4
58678: ARRAY
58679: PUSH
58680: LD_INT 2
58682: ARRAY
58683: PPUSH
58684: CALL_OW 428
58688: PUSH
58689: LD_INT 0
58691: NONEQUAL
58692: OR
58693: IFFALSE 58715
// tmp := Delete ( tmp , i ) ;
58695: LD_ADDR_VAR 0 6
58699: PUSH
58700: LD_VAR 0 6
58704: PPUSH
58705: LD_VAR 0 4
58709: PPUSH
58710: CALL_OW 3
58714: ST_TO_ADDR
58715: GO 58615
58717: POP
58718: POP
// j := GetClosestHex ( unit , tmp ) ;
58719: LD_ADDR_VAR 0 5
58723: PUSH
58724: LD_VAR 0 1
58728: PPUSH
58729: LD_VAR 0 6
58733: PPUSH
58734: CALL 58036 0 2
58738: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58739: LD_VAR 0 1
58743: PPUSH
58744: LD_VAR 0 5
58748: PUSH
58749: LD_INT 1
58751: ARRAY
58752: PPUSH
58753: LD_VAR 0 5
58757: PUSH
58758: LD_INT 2
58760: ARRAY
58761: PPUSH
58762: CALL_OW 111
// end ;
58766: LD_VAR 0 3
58770: RET
// export function PrepareApemanSoldier ( ) ; begin
58771: LD_INT 0
58773: PPUSH
// uc_nation := 0 ;
58774: LD_ADDR_OWVAR 21
58778: PUSH
58779: LD_INT 0
58781: ST_TO_ADDR
// hc_sex := sex_male ;
58782: LD_ADDR_OWVAR 27
58786: PUSH
58787: LD_INT 1
58789: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58790: LD_ADDR_OWVAR 28
58794: PUSH
58795: LD_INT 15
58797: ST_TO_ADDR
// hc_gallery :=  ;
58798: LD_ADDR_OWVAR 33
58802: PUSH
58803: LD_STRING 
58805: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58806: LD_ADDR_OWVAR 31
58810: PUSH
58811: LD_INT 0
58813: PPUSH
58814: LD_INT 3
58816: PPUSH
58817: CALL_OW 12
58821: PUSH
58822: LD_INT 0
58824: PPUSH
58825: LD_INT 3
58827: PPUSH
58828: CALL_OW 12
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: ST_TO_ADDR
// end ;
58845: LD_VAR 0 1
58849: RET
// export function PrepareApemanEngineer ( ) ; begin
58850: LD_INT 0
58852: PPUSH
// uc_nation := 0 ;
58853: LD_ADDR_OWVAR 21
58857: PUSH
58858: LD_INT 0
58860: ST_TO_ADDR
// hc_sex := sex_male ;
58861: LD_ADDR_OWVAR 27
58865: PUSH
58866: LD_INT 1
58868: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58869: LD_ADDR_OWVAR 28
58873: PUSH
58874: LD_INT 16
58876: ST_TO_ADDR
// hc_gallery :=  ;
58877: LD_ADDR_OWVAR 33
58881: PUSH
58882: LD_STRING 
58884: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58885: LD_ADDR_OWVAR 31
58889: PUSH
58890: LD_INT 0
58892: PPUSH
58893: LD_INT 3
58895: PPUSH
58896: CALL_OW 12
58900: PUSH
58901: LD_INT 0
58903: PPUSH
58904: LD_INT 3
58906: PPUSH
58907: CALL_OW 12
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// end ;
58924: LD_VAR 0 1
58928: RET
// export function PrepareApeman ( agressivity ) ; begin
58929: LD_INT 0
58931: PPUSH
// uc_side := 0 ;
58932: LD_ADDR_OWVAR 20
58936: PUSH
58937: LD_INT 0
58939: ST_TO_ADDR
// uc_nation := 0 ;
58940: LD_ADDR_OWVAR 21
58944: PUSH
58945: LD_INT 0
58947: ST_TO_ADDR
// hc_sex := sex_male ;
58948: LD_ADDR_OWVAR 27
58952: PUSH
58953: LD_INT 1
58955: ST_TO_ADDR
// hc_class := class_apeman ;
58956: LD_ADDR_OWVAR 28
58960: PUSH
58961: LD_INT 12
58963: ST_TO_ADDR
// hc_gallery :=  ;
58964: LD_ADDR_OWVAR 33
58968: PUSH
58969: LD_STRING 
58971: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58972: LD_ADDR_OWVAR 35
58976: PUSH
58977: LD_VAR 0 1
58981: NEG
58982: PPUSH
58983: LD_VAR 0 1
58987: PPUSH
58988: CALL_OW 12
58992: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58993: LD_ADDR_OWVAR 31
58997: PUSH
58998: LD_INT 0
59000: PPUSH
59001: LD_INT 3
59003: PPUSH
59004: CALL_OW 12
59008: PUSH
59009: LD_INT 0
59011: PPUSH
59012: LD_INT 3
59014: PPUSH
59015: CALL_OW 12
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: ST_TO_ADDR
// end ;
59032: LD_VAR 0 2
59036: RET
// export function PrepareTiger ( agressivity ) ; begin
59037: LD_INT 0
59039: PPUSH
// uc_side := 0 ;
59040: LD_ADDR_OWVAR 20
59044: PUSH
59045: LD_INT 0
59047: ST_TO_ADDR
// uc_nation := 0 ;
59048: LD_ADDR_OWVAR 21
59052: PUSH
59053: LD_INT 0
59055: ST_TO_ADDR
// hc_class := class_tiger ;
59056: LD_ADDR_OWVAR 28
59060: PUSH
59061: LD_INT 14
59063: ST_TO_ADDR
// hc_gallery :=  ;
59064: LD_ADDR_OWVAR 33
59068: PUSH
59069: LD_STRING 
59071: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59072: LD_ADDR_OWVAR 35
59076: PUSH
59077: LD_VAR 0 1
59081: NEG
59082: PPUSH
59083: LD_VAR 0 1
59087: PPUSH
59088: CALL_OW 12
59092: ST_TO_ADDR
// end ;
59093: LD_VAR 0 2
59097: RET
// export function PrepareEnchidna ( ) ; begin
59098: LD_INT 0
59100: PPUSH
// uc_side := 0 ;
59101: LD_ADDR_OWVAR 20
59105: PUSH
59106: LD_INT 0
59108: ST_TO_ADDR
// uc_nation := 0 ;
59109: LD_ADDR_OWVAR 21
59113: PUSH
59114: LD_INT 0
59116: ST_TO_ADDR
// hc_class := class_baggie ;
59117: LD_ADDR_OWVAR 28
59121: PUSH
59122: LD_INT 13
59124: ST_TO_ADDR
// hc_gallery :=  ;
59125: LD_ADDR_OWVAR 33
59129: PUSH
59130: LD_STRING 
59132: ST_TO_ADDR
// end ;
59133: LD_VAR 0 1
59137: RET
// export function PrepareFrog ( ) ; begin
59138: LD_INT 0
59140: PPUSH
// uc_side := 0 ;
59141: LD_ADDR_OWVAR 20
59145: PUSH
59146: LD_INT 0
59148: ST_TO_ADDR
// uc_nation := 0 ;
59149: LD_ADDR_OWVAR 21
59153: PUSH
59154: LD_INT 0
59156: ST_TO_ADDR
// hc_class := class_frog ;
59157: LD_ADDR_OWVAR 28
59161: PUSH
59162: LD_INT 19
59164: ST_TO_ADDR
// hc_gallery :=  ;
59165: LD_ADDR_OWVAR 33
59169: PUSH
59170: LD_STRING 
59172: ST_TO_ADDR
// end ;
59173: LD_VAR 0 1
59177: RET
// export function PrepareFish ( ) ; begin
59178: LD_INT 0
59180: PPUSH
// uc_side := 0 ;
59181: LD_ADDR_OWVAR 20
59185: PUSH
59186: LD_INT 0
59188: ST_TO_ADDR
// uc_nation := 0 ;
59189: LD_ADDR_OWVAR 21
59193: PUSH
59194: LD_INT 0
59196: ST_TO_ADDR
// hc_class := class_fish ;
59197: LD_ADDR_OWVAR 28
59201: PUSH
59202: LD_INT 20
59204: ST_TO_ADDR
// hc_gallery :=  ;
59205: LD_ADDR_OWVAR 33
59209: PUSH
59210: LD_STRING 
59212: ST_TO_ADDR
// end ;
59213: LD_VAR 0 1
59217: RET
// export function PrepareBird ( ) ; begin
59218: LD_INT 0
59220: PPUSH
// uc_side := 0 ;
59221: LD_ADDR_OWVAR 20
59225: PUSH
59226: LD_INT 0
59228: ST_TO_ADDR
// uc_nation := 0 ;
59229: LD_ADDR_OWVAR 21
59233: PUSH
59234: LD_INT 0
59236: ST_TO_ADDR
// hc_class := class_phororhacos ;
59237: LD_ADDR_OWVAR 28
59241: PUSH
59242: LD_INT 18
59244: ST_TO_ADDR
// hc_gallery :=  ;
59245: LD_ADDR_OWVAR 33
59249: PUSH
59250: LD_STRING 
59252: ST_TO_ADDR
// end ;
59253: LD_VAR 0 1
59257: RET
// export function PrepareHorse ( ) ; begin
59258: LD_INT 0
59260: PPUSH
// uc_side := 0 ;
59261: LD_ADDR_OWVAR 20
59265: PUSH
59266: LD_INT 0
59268: ST_TO_ADDR
// uc_nation := 0 ;
59269: LD_ADDR_OWVAR 21
59273: PUSH
59274: LD_INT 0
59276: ST_TO_ADDR
// hc_class := class_horse ;
59277: LD_ADDR_OWVAR 28
59281: PUSH
59282: LD_INT 21
59284: ST_TO_ADDR
// hc_gallery :=  ;
59285: LD_ADDR_OWVAR 33
59289: PUSH
59290: LD_STRING 
59292: ST_TO_ADDR
// end ;
59293: LD_VAR 0 1
59297: RET
// export function PrepareMastodont ( ) ; begin
59298: LD_INT 0
59300: PPUSH
// uc_side := 0 ;
59301: LD_ADDR_OWVAR 20
59305: PUSH
59306: LD_INT 0
59308: ST_TO_ADDR
// uc_nation := 0 ;
59309: LD_ADDR_OWVAR 21
59313: PUSH
59314: LD_INT 0
59316: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59317: LD_ADDR_OWVAR 37
59321: PUSH
59322: LD_INT 31
59324: ST_TO_ADDR
// vc_control := control_rider ;
59325: LD_ADDR_OWVAR 38
59329: PUSH
59330: LD_INT 4
59332: ST_TO_ADDR
// end ;
59333: LD_VAR 0 1
59337: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59338: LD_INT 0
59340: PPUSH
59341: PPUSH
59342: PPUSH
// uc_side = 0 ;
59343: LD_ADDR_OWVAR 20
59347: PUSH
59348: LD_INT 0
59350: ST_TO_ADDR
// uc_nation = 0 ;
59351: LD_ADDR_OWVAR 21
59355: PUSH
59356: LD_INT 0
59358: ST_TO_ADDR
// InitHc_All ( ) ;
59359: CALL_OW 584
// InitVc ;
59363: CALL_OW 20
// if mastodonts then
59367: LD_VAR 0 6
59371: IFFALSE 59438
// for i = 1 to mastodonts do
59373: LD_ADDR_VAR 0 11
59377: PUSH
59378: DOUBLE
59379: LD_INT 1
59381: DEC
59382: ST_TO_ADDR
59383: LD_VAR 0 6
59387: PUSH
59388: FOR_TO
59389: IFFALSE 59436
// begin vc_chassis := 31 ;
59391: LD_ADDR_OWVAR 37
59395: PUSH
59396: LD_INT 31
59398: ST_TO_ADDR
// vc_control := control_rider ;
59399: LD_ADDR_OWVAR 38
59403: PUSH
59404: LD_INT 4
59406: ST_TO_ADDR
// animal := CreateVehicle ;
59407: LD_ADDR_VAR 0 12
59411: PUSH
59412: CALL_OW 45
59416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59417: LD_VAR 0 12
59421: PPUSH
59422: LD_VAR 0 8
59426: PPUSH
59427: LD_INT 0
59429: PPUSH
59430: CALL 61573 0 3
// end ;
59434: GO 59388
59436: POP
59437: POP
// if horses then
59438: LD_VAR 0 5
59442: IFFALSE 59509
// for i = 1 to horses do
59444: LD_ADDR_VAR 0 11
59448: PUSH
59449: DOUBLE
59450: LD_INT 1
59452: DEC
59453: ST_TO_ADDR
59454: LD_VAR 0 5
59458: PUSH
59459: FOR_TO
59460: IFFALSE 59507
// begin hc_class := 21 ;
59462: LD_ADDR_OWVAR 28
59466: PUSH
59467: LD_INT 21
59469: ST_TO_ADDR
// hc_gallery :=  ;
59470: LD_ADDR_OWVAR 33
59474: PUSH
59475: LD_STRING 
59477: ST_TO_ADDR
// animal := CreateHuman ;
59478: LD_ADDR_VAR 0 12
59482: PUSH
59483: CALL_OW 44
59487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59488: LD_VAR 0 12
59492: PPUSH
59493: LD_VAR 0 8
59497: PPUSH
59498: LD_INT 0
59500: PPUSH
59501: CALL 61573 0 3
// end ;
59505: GO 59459
59507: POP
59508: POP
// if birds then
59509: LD_VAR 0 1
59513: IFFALSE 59580
// for i = 1 to birds do
59515: LD_ADDR_VAR 0 11
59519: PUSH
59520: DOUBLE
59521: LD_INT 1
59523: DEC
59524: ST_TO_ADDR
59525: LD_VAR 0 1
59529: PUSH
59530: FOR_TO
59531: IFFALSE 59578
// begin hc_class = 18 ;
59533: LD_ADDR_OWVAR 28
59537: PUSH
59538: LD_INT 18
59540: ST_TO_ADDR
// hc_gallery =  ;
59541: LD_ADDR_OWVAR 33
59545: PUSH
59546: LD_STRING 
59548: ST_TO_ADDR
// animal := CreateHuman ;
59549: LD_ADDR_VAR 0 12
59553: PUSH
59554: CALL_OW 44
59558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59559: LD_VAR 0 12
59563: PPUSH
59564: LD_VAR 0 8
59568: PPUSH
59569: LD_INT 0
59571: PPUSH
59572: CALL 61573 0 3
// end ;
59576: GO 59530
59578: POP
59579: POP
// if tigers then
59580: LD_VAR 0 2
59584: IFFALSE 59668
// for i = 1 to tigers do
59586: LD_ADDR_VAR 0 11
59590: PUSH
59591: DOUBLE
59592: LD_INT 1
59594: DEC
59595: ST_TO_ADDR
59596: LD_VAR 0 2
59600: PUSH
59601: FOR_TO
59602: IFFALSE 59666
// begin hc_class = class_tiger ;
59604: LD_ADDR_OWVAR 28
59608: PUSH
59609: LD_INT 14
59611: ST_TO_ADDR
// hc_gallery =  ;
59612: LD_ADDR_OWVAR 33
59616: PUSH
59617: LD_STRING 
59619: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59620: LD_ADDR_OWVAR 35
59624: PUSH
59625: LD_INT 7
59627: NEG
59628: PPUSH
59629: LD_INT 7
59631: PPUSH
59632: CALL_OW 12
59636: ST_TO_ADDR
// animal := CreateHuman ;
59637: LD_ADDR_VAR 0 12
59641: PUSH
59642: CALL_OW 44
59646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59647: LD_VAR 0 12
59651: PPUSH
59652: LD_VAR 0 8
59656: PPUSH
59657: LD_INT 0
59659: PPUSH
59660: CALL 61573 0 3
// end ;
59664: GO 59601
59666: POP
59667: POP
// if apemans then
59668: LD_VAR 0 3
59672: IFFALSE 59795
// for i = 1 to apemans do
59674: LD_ADDR_VAR 0 11
59678: PUSH
59679: DOUBLE
59680: LD_INT 1
59682: DEC
59683: ST_TO_ADDR
59684: LD_VAR 0 3
59688: PUSH
59689: FOR_TO
59690: IFFALSE 59793
// begin hc_class = class_apeman ;
59692: LD_ADDR_OWVAR 28
59696: PUSH
59697: LD_INT 12
59699: ST_TO_ADDR
// hc_gallery =  ;
59700: LD_ADDR_OWVAR 33
59704: PUSH
59705: LD_STRING 
59707: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59708: LD_ADDR_OWVAR 35
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PPUSH
59717: LD_INT 2
59719: PPUSH
59720: CALL_OW 12
59724: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59725: LD_ADDR_OWVAR 31
59729: PUSH
59730: LD_INT 1
59732: PPUSH
59733: LD_INT 3
59735: PPUSH
59736: CALL_OW 12
59740: PUSH
59741: LD_INT 1
59743: PPUSH
59744: LD_INT 3
59746: PPUSH
59747: CALL_OW 12
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: ST_TO_ADDR
// animal := CreateHuman ;
59764: LD_ADDR_VAR 0 12
59768: PUSH
59769: CALL_OW 44
59773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59774: LD_VAR 0 12
59778: PPUSH
59779: LD_VAR 0 8
59783: PPUSH
59784: LD_INT 0
59786: PPUSH
59787: CALL 61573 0 3
// end ;
59791: GO 59689
59793: POP
59794: POP
// if enchidnas then
59795: LD_VAR 0 4
59799: IFFALSE 59866
// for i = 1 to enchidnas do
59801: LD_ADDR_VAR 0 11
59805: PUSH
59806: DOUBLE
59807: LD_INT 1
59809: DEC
59810: ST_TO_ADDR
59811: LD_VAR 0 4
59815: PUSH
59816: FOR_TO
59817: IFFALSE 59864
// begin hc_class = 13 ;
59819: LD_ADDR_OWVAR 28
59823: PUSH
59824: LD_INT 13
59826: ST_TO_ADDR
// hc_gallery =  ;
59827: LD_ADDR_OWVAR 33
59831: PUSH
59832: LD_STRING 
59834: ST_TO_ADDR
// animal := CreateHuman ;
59835: LD_ADDR_VAR 0 12
59839: PUSH
59840: CALL_OW 44
59844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59845: LD_VAR 0 12
59849: PPUSH
59850: LD_VAR 0 8
59854: PPUSH
59855: LD_INT 0
59857: PPUSH
59858: CALL 61573 0 3
// end ;
59862: GO 59816
59864: POP
59865: POP
// if fishes then
59866: LD_VAR 0 7
59870: IFFALSE 59937
// for i = 1 to fishes do
59872: LD_ADDR_VAR 0 11
59876: PUSH
59877: DOUBLE
59878: LD_INT 1
59880: DEC
59881: ST_TO_ADDR
59882: LD_VAR 0 7
59886: PUSH
59887: FOR_TO
59888: IFFALSE 59935
// begin hc_class = 20 ;
59890: LD_ADDR_OWVAR 28
59894: PUSH
59895: LD_INT 20
59897: ST_TO_ADDR
// hc_gallery =  ;
59898: LD_ADDR_OWVAR 33
59902: PUSH
59903: LD_STRING 
59905: ST_TO_ADDR
// animal := CreateHuman ;
59906: LD_ADDR_VAR 0 12
59910: PUSH
59911: CALL_OW 44
59915: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59916: LD_VAR 0 12
59920: PPUSH
59921: LD_VAR 0 9
59925: PPUSH
59926: LD_INT 0
59928: PPUSH
59929: CALL 61573 0 3
// end ;
59933: GO 59887
59935: POP
59936: POP
// end ;
59937: LD_VAR 0 10
59941: RET
// export function WantHeal ( sci , unit ) ; begin
59942: LD_INT 0
59944: PPUSH
// if GetTaskList ( sci ) > 0 then
59945: LD_VAR 0 1
59949: PPUSH
59950: CALL_OW 437
59954: PUSH
59955: LD_INT 0
59957: GREATER
59958: IFFALSE 60028
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59960: LD_VAR 0 1
59964: PPUSH
59965: CALL_OW 437
59969: PUSH
59970: LD_INT 1
59972: ARRAY
59973: PUSH
59974: LD_INT 1
59976: ARRAY
59977: PUSH
59978: LD_STRING l
59980: EQUAL
59981: PUSH
59982: LD_VAR 0 1
59986: PPUSH
59987: CALL_OW 437
59991: PUSH
59992: LD_INT 1
59994: ARRAY
59995: PUSH
59996: LD_INT 4
59998: ARRAY
59999: PUSH
60000: LD_VAR 0 2
60004: EQUAL
60005: AND
60006: IFFALSE 60018
// result := true else
60008: LD_ADDR_VAR 0 3
60012: PUSH
60013: LD_INT 1
60015: ST_TO_ADDR
60016: GO 60026
// result := false ;
60018: LD_ADDR_VAR 0 3
60022: PUSH
60023: LD_INT 0
60025: ST_TO_ADDR
// end else
60026: GO 60036
// result := false ;
60028: LD_ADDR_VAR 0 3
60032: PUSH
60033: LD_INT 0
60035: ST_TO_ADDR
// end ;
60036: LD_VAR 0 3
60040: RET
// export function HealTarget ( sci ) ; begin
60041: LD_INT 0
60043: PPUSH
// if not sci then
60044: LD_VAR 0 1
60048: NOT
60049: IFFALSE 60053
// exit ;
60051: GO 60118
// result := 0 ;
60053: LD_ADDR_VAR 0 2
60057: PUSH
60058: LD_INT 0
60060: ST_TO_ADDR
// if GetTaskList ( sci ) then
60061: LD_VAR 0 1
60065: PPUSH
60066: CALL_OW 437
60070: IFFALSE 60118
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60072: LD_VAR 0 1
60076: PPUSH
60077: CALL_OW 437
60081: PUSH
60082: LD_INT 1
60084: ARRAY
60085: PUSH
60086: LD_INT 1
60088: ARRAY
60089: PUSH
60090: LD_STRING l
60092: EQUAL
60093: IFFALSE 60118
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60095: LD_ADDR_VAR 0 2
60099: PUSH
60100: LD_VAR 0 1
60104: PPUSH
60105: CALL_OW 437
60109: PUSH
60110: LD_INT 1
60112: ARRAY
60113: PUSH
60114: LD_INT 4
60116: ARRAY
60117: ST_TO_ADDR
// end ;
60118: LD_VAR 0 2
60122: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60123: LD_INT 0
60125: PPUSH
60126: PPUSH
60127: PPUSH
60128: PPUSH
// if not base_units then
60129: LD_VAR 0 1
60133: NOT
60134: IFFALSE 60138
// exit ;
60136: GO 60225
// result := false ;
60138: LD_ADDR_VAR 0 2
60142: PUSH
60143: LD_INT 0
60145: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60146: LD_ADDR_VAR 0 5
60150: PUSH
60151: LD_VAR 0 1
60155: PPUSH
60156: LD_INT 21
60158: PUSH
60159: LD_INT 3
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PPUSH
60166: CALL_OW 72
60170: ST_TO_ADDR
// if not tmp then
60171: LD_VAR 0 5
60175: NOT
60176: IFFALSE 60180
// exit ;
60178: GO 60225
// for i in tmp do
60180: LD_ADDR_VAR 0 3
60184: PUSH
60185: LD_VAR 0 5
60189: PUSH
60190: FOR_IN
60191: IFFALSE 60223
// begin result := EnemyInRange ( i , 22 ) ;
60193: LD_ADDR_VAR 0 2
60197: PUSH
60198: LD_VAR 0 3
60202: PPUSH
60203: LD_INT 22
60205: PPUSH
60206: CALL 57838 0 2
60210: ST_TO_ADDR
// if result then
60211: LD_VAR 0 2
60215: IFFALSE 60221
// exit ;
60217: POP
60218: POP
60219: GO 60225
// end ;
60221: GO 60190
60223: POP
60224: POP
// end ;
60225: LD_VAR 0 2
60229: RET
// export function FilterByTag ( units , tag ) ; begin
60230: LD_INT 0
60232: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60233: LD_ADDR_VAR 0 3
60237: PUSH
60238: LD_VAR 0 1
60242: PPUSH
60243: LD_INT 120
60245: PUSH
60246: LD_VAR 0 2
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PPUSH
60255: CALL_OW 72
60259: ST_TO_ADDR
// end ;
60260: LD_VAR 0 3
60264: RET
// export function IsDriver ( un ) ; begin
60265: LD_INT 0
60267: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60268: LD_ADDR_VAR 0 2
60272: PUSH
60273: LD_VAR 0 1
60277: PUSH
60278: LD_INT 55
60280: PUSH
60281: EMPTY
60282: LIST
60283: PPUSH
60284: CALL_OW 69
60288: IN
60289: ST_TO_ADDR
// end ;
60290: LD_VAR 0 2
60294: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60295: LD_INT 0
60297: PPUSH
60298: PPUSH
// list := [ ] ;
60299: LD_ADDR_VAR 0 5
60303: PUSH
60304: EMPTY
60305: ST_TO_ADDR
// case d of 0 :
60306: LD_VAR 0 3
60310: PUSH
60311: LD_INT 0
60313: DOUBLE
60314: EQUAL
60315: IFTRUE 60319
60317: GO 60452
60319: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60320: LD_ADDR_VAR 0 5
60324: PUSH
60325: LD_VAR 0 1
60329: PUSH
60330: LD_INT 4
60332: MINUS
60333: PUSH
60334: LD_VAR 0 2
60338: PUSH
60339: LD_INT 4
60341: MINUS
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: LIST
60350: PUSH
60351: LD_VAR 0 1
60355: PUSH
60356: LD_INT 3
60358: MINUS
60359: PUSH
60360: LD_VAR 0 2
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: LIST
60372: PUSH
60373: LD_VAR 0 1
60377: PUSH
60378: LD_INT 4
60380: PLUS
60381: PUSH
60382: LD_VAR 0 2
60386: PUSH
60387: LD_INT 4
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: PUSH
60395: LD_VAR 0 1
60399: PUSH
60400: LD_INT 3
60402: PLUS
60403: PUSH
60404: LD_VAR 0 2
60408: PUSH
60409: LD_INT 3
60411: PLUS
60412: PUSH
60413: LD_INT 5
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: LIST
60420: PUSH
60421: LD_VAR 0 1
60425: PUSH
60426: LD_VAR 0 2
60430: PUSH
60431: LD_INT 4
60433: PLUS
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: ST_TO_ADDR
// end ; 1 :
60450: GO 61150
60452: LD_INT 1
60454: DOUBLE
60455: EQUAL
60456: IFTRUE 60460
60458: GO 60593
60460: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60461: LD_ADDR_VAR 0 5
60465: PUSH
60466: LD_VAR 0 1
60470: PUSH
60471: LD_VAR 0 2
60475: PUSH
60476: LD_INT 4
60478: MINUS
60479: PUSH
60480: LD_INT 3
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: PUSH
60488: LD_VAR 0 1
60492: PUSH
60493: LD_INT 3
60495: MINUS
60496: PUSH
60497: LD_VAR 0 2
60501: PUSH
60502: LD_INT 3
60504: MINUS
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: LIST
60513: PUSH
60514: LD_VAR 0 1
60518: PUSH
60519: LD_INT 4
60521: MINUS
60522: PUSH
60523: LD_VAR 0 2
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: LIST
60535: PUSH
60536: LD_VAR 0 1
60540: PUSH
60541: LD_VAR 0 2
60545: PUSH
60546: LD_INT 3
60548: PLUS
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: LIST
60557: PUSH
60558: LD_VAR 0 1
60562: PUSH
60563: LD_INT 4
60565: PLUS
60566: PUSH
60567: LD_VAR 0 2
60571: PUSH
60572: LD_INT 4
60574: PLUS
60575: PUSH
60576: LD_INT 5
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: LIST
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: ST_TO_ADDR
// end ; 2 :
60591: GO 61150
60593: LD_INT 2
60595: DOUBLE
60596: EQUAL
60597: IFTRUE 60601
60599: GO 60730
60601: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60602: LD_ADDR_VAR 0 5
60606: PUSH
60607: LD_VAR 0 1
60611: PUSH
60612: LD_VAR 0 2
60616: PUSH
60617: LD_INT 3
60619: MINUS
60620: PUSH
60621: LD_INT 3
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: LIST
60628: PUSH
60629: LD_VAR 0 1
60633: PUSH
60634: LD_INT 4
60636: PLUS
60637: PUSH
60638: LD_VAR 0 2
60642: PUSH
60643: LD_INT 4
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: PUSH
60651: LD_VAR 0 1
60655: PUSH
60656: LD_VAR 0 2
60660: PUSH
60661: LD_INT 4
60663: PLUS
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: LIST
60672: PUSH
60673: LD_VAR 0 1
60677: PUSH
60678: LD_INT 3
60680: MINUS
60681: PUSH
60682: LD_VAR 0 2
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: LIST
60694: PUSH
60695: LD_VAR 0 1
60699: PUSH
60700: LD_INT 4
60702: MINUS
60703: PUSH
60704: LD_VAR 0 2
60708: PUSH
60709: LD_INT 4
60711: MINUS
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: ST_TO_ADDR
// end ; 3 :
60728: GO 61150
60730: LD_INT 3
60732: DOUBLE
60733: EQUAL
60734: IFTRUE 60738
60736: GO 60871
60738: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60739: LD_ADDR_VAR 0 5
60743: PUSH
60744: LD_VAR 0 1
60748: PUSH
60749: LD_INT 3
60751: PLUS
60752: PUSH
60753: LD_VAR 0 2
60757: PUSH
60758: LD_INT 4
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: LIST
60765: PUSH
60766: LD_VAR 0 1
60770: PUSH
60771: LD_INT 4
60773: PLUS
60774: PUSH
60775: LD_VAR 0 2
60779: PUSH
60780: LD_INT 4
60782: PLUS
60783: PUSH
60784: LD_INT 5
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: PUSH
60792: LD_VAR 0 1
60796: PUSH
60797: LD_INT 4
60799: MINUS
60800: PUSH
60801: LD_VAR 0 2
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: LIST
60813: PUSH
60814: LD_VAR 0 1
60818: PUSH
60819: LD_VAR 0 2
60823: PUSH
60824: LD_INT 4
60826: MINUS
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: PUSH
60836: LD_VAR 0 1
60840: PUSH
60841: LD_INT 3
60843: MINUS
60844: PUSH
60845: LD_VAR 0 2
60849: PUSH
60850: LD_INT 3
60852: MINUS
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: LIST
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: ST_TO_ADDR
// end ; 4 :
60869: GO 61150
60871: LD_INT 4
60873: DOUBLE
60874: EQUAL
60875: IFTRUE 60879
60877: GO 61012
60879: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60880: LD_ADDR_VAR 0 5
60884: PUSH
60885: LD_VAR 0 1
60889: PUSH
60890: LD_VAR 0 2
60894: PUSH
60895: LD_INT 4
60897: PLUS
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: PUSH
60907: LD_VAR 0 1
60911: PUSH
60912: LD_INT 3
60914: PLUS
60915: PUSH
60916: LD_VAR 0 2
60920: PUSH
60921: LD_INT 3
60923: PLUS
60924: PUSH
60925: LD_INT 5
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: LIST
60932: PUSH
60933: LD_VAR 0 1
60937: PUSH
60938: LD_INT 4
60940: PLUS
60941: PUSH
60942: LD_VAR 0 2
60946: PUSH
60947: LD_INT 4
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: LIST
60954: PUSH
60955: LD_VAR 0 1
60959: PUSH
60960: LD_VAR 0 2
60964: PUSH
60965: LD_INT 3
60967: MINUS
60968: PUSH
60969: LD_INT 3
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: LIST
60976: PUSH
60977: LD_VAR 0 1
60981: PUSH
60982: LD_INT 4
60984: MINUS
60985: PUSH
60986: LD_VAR 0 2
60990: PUSH
60991: LD_INT 4
60993: MINUS
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: LIST
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: ST_TO_ADDR
// end ; 5 :
61010: GO 61150
61012: LD_INT 5
61014: DOUBLE
61015: EQUAL
61016: IFTRUE 61020
61018: GO 61149
61020: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61021: LD_ADDR_VAR 0 5
61025: PUSH
61026: LD_VAR 0 1
61030: PUSH
61031: LD_INT 4
61033: MINUS
61034: PUSH
61035: LD_VAR 0 2
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: PUSH
61048: LD_VAR 0 1
61052: PUSH
61053: LD_VAR 0 2
61057: PUSH
61058: LD_INT 4
61060: MINUS
61061: PUSH
61062: LD_INT 3
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: PUSH
61070: LD_VAR 0 1
61074: PUSH
61075: LD_INT 4
61077: PLUS
61078: PUSH
61079: LD_VAR 0 2
61083: PUSH
61084: LD_INT 4
61086: PLUS
61087: PUSH
61088: LD_INT 5
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: LIST
61095: PUSH
61096: LD_VAR 0 1
61100: PUSH
61101: LD_INT 3
61103: PLUS
61104: PUSH
61105: LD_VAR 0 2
61109: PUSH
61110: LD_INT 4
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: LIST
61117: PUSH
61118: LD_VAR 0 1
61122: PUSH
61123: LD_VAR 0 2
61127: PUSH
61128: LD_INT 3
61130: PLUS
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: LIST
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: ST_TO_ADDR
// end ; end ;
61147: GO 61150
61149: POP
// result := list ;
61150: LD_ADDR_VAR 0 4
61154: PUSH
61155: LD_VAR 0 5
61159: ST_TO_ADDR
// end ;
61160: LD_VAR 0 4
61164: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61165: LD_INT 0
61167: PPUSH
61168: PPUSH
61169: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61170: LD_VAR 0 1
61174: NOT
61175: PUSH
61176: LD_VAR 0 2
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: LD_INT 3
61189: PUSH
61190: LD_INT 4
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: IN
61199: NOT
61200: OR
61201: IFFALSE 61205
// exit ;
61203: GO 61297
// tmp := [ ] ;
61205: LD_ADDR_VAR 0 5
61209: PUSH
61210: EMPTY
61211: ST_TO_ADDR
// for i in units do
61212: LD_ADDR_VAR 0 4
61216: PUSH
61217: LD_VAR 0 1
61221: PUSH
61222: FOR_IN
61223: IFFALSE 61266
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61225: LD_ADDR_VAR 0 5
61229: PUSH
61230: LD_VAR 0 5
61234: PPUSH
61235: LD_VAR 0 5
61239: PUSH
61240: LD_INT 1
61242: PLUS
61243: PPUSH
61244: LD_VAR 0 4
61248: PPUSH
61249: LD_VAR 0 2
61253: PPUSH
61254: CALL_OW 259
61258: PPUSH
61259: CALL_OW 2
61263: ST_TO_ADDR
61264: GO 61222
61266: POP
61267: POP
// if not tmp then
61268: LD_VAR 0 5
61272: NOT
61273: IFFALSE 61277
// exit ;
61275: GO 61297
// result := SortListByListDesc ( units , tmp ) ;
61277: LD_ADDR_VAR 0 3
61281: PUSH
61282: LD_VAR 0 1
61286: PPUSH
61287: LD_VAR 0 5
61291: PPUSH
61292: CALL_OW 77
61296: ST_TO_ADDR
// end ;
61297: LD_VAR 0 3
61301: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61302: LD_INT 0
61304: PPUSH
61305: PPUSH
61306: PPUSH
// result := false ;
61307: LD_ADDR_VAR 0 3
61311: PUSH
61312: LD_INT 0
61314: ST_TO_ADDR
// x := GetX ( building ) ;
61315: LD_ADDR_VAR 0 4
61319: PUSH
61320: LD_VAR 0 2
61324: PPUSH
61325: CALL_OW 250
61329: ST_TO_ADDR
// y := GetY ( building ) ;
61330: LD_ADDR_VAR 0 5
61334: PUSH
61335: LD_VAR 0 2
61339: PPUSH
61340: CALL_OW 251
61344: ST_TO_ADDR
// if not building or not x or not y then
61345: LD_VAR 0 2
61349: NOT
61350: PUSH
61351: LD_VAR 0 4
61355: NOT
61356: OR
61357: PUSH
61358: LD_VAR 0 5
61362: NOT
61363: OR
61364: IFFALSE 61368
// exit ;
61366: GO 61460
// if GetTaskList ( unit ) then
61368: LD_VAR 0 1
61372: PPUSH
61373: CALL_OW 437
61377: IFFALSE 61460
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61379: LD_STRING e
61381: PUSH
61382: LD_VAR 0 1
61386: PPUSH
61387: CALL_OW 437
61391: PUSH
61392: LD_INT 1
61394: ARRAY
61395: PUSH
61396: LD_INT 1
61398: ARRAY
61399: EQUAL
61400: PUSH
61401: LD_VAR 0 4
61405: PUSH
61406: LD_VAR 0 1
61410: PPUSH
61411: CALL_OW 437
61415: PUSH
61416: LD_INT 1
61418: ARRAY
61419: PUSH
61420: LD_INT 2
61422: ARRAY
61423: EQUAL
61424: AND
61425: PUSH
61426: LD_VAR 0 5
61430: PUSH
61431: LD_VAR 0 1
61435: PPUSH
61436: CALL_OW 437
61440: PUSH
61441: LD_INT 1
61443: ARRAY
61444: PUSH
61445: LD_INT 3
61447: ARRAY
61448: EQUAL
61449: AND
61450: IFFALSE 61460
// result := true end ;
61452: LD_ADDR_VAR 0 3
61456: PUSH
61457: LD_INT 1
61459: ST_TO_ADDR
// end ;
61460: LD_VAR 0 3
61464: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61465: LD_INT 0
61467: PPUSH
// result := false ;
61468: LD_ADDR_VAR 0 4
61472: PUSH
61473: LD_INT 0
61475: ST_TO_ADDR
// if GetTaskList ( unit ) then
61476: LD_VAR 0 1
61480: PPUSH
61481: CALL_OW 437
61485: IFFALSE 61568
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61487: LD_STRING M
61489: PUSH
61490: LD_VAR 0 1
61494: PPUSH
61495: CALL_OW 437
61499: PUSH
61500: LD_INT 1
61502: ARRAY
61503: PUSH
61504: LD_INT 1
61506: ARRAY
61507: EQUAL
61508: PUSH
61509: LD_VAR 0 2
61513: PUSH
61514: LD_VAR 0 1
61518: PPUSH
61519: CALL_OW 437
61523: PUSH
61524: LD_INT 1
61526: ARRAY
61527: PUSH
61528: LD_INT 2
61530: ARRAY
61531: EQUAL
61532: AND
61533: PUSH
61534: LD_VAR 0 3
61538: PUSH
61539: LD_VAR 0 1
61543: PPUSH
61544: CALL_OW 437
61548: PUSH
61549: LD_INT 1
61551: ARRAY
61552: PUSH
61553: LD_INT 3
61555: ARRAY
61556: EQUAL
61557: AND
61558: IFFALSE 61568
// result := true ;
61560: LD_ADDR_VAR 0 4
61564: PUSH
61565: LD_INT 1
61567: ST_TO_ADDR
// end ; end ;
61568: LD_VAR 0 4
61572: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61573: LD_INT 0
61575: PPUSH
61576: PPUSH
61577: PPUSH
61578: PPUSH
// if not unit or not area then
61579: LD_VAR 0 1
61583: NOT
61584: PUSH
61585: LD_VAR 0 2
61589: NOT
61590: OR
61591: IFFALSE 61595
// exit ;
61593: GO 61759
// tmp := AreaToList ( area , i ) ;
61595: LD_ADDR_VAR 0 6
61599: PUSH
61600: LD_VAR 0 2
61604: PPUSH
61605: LD_VAR 0 5
61609: PPUSH
61610: CALL_OW 517
61614: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61615: LD_ADDR_VAR 0 5
61619: PUSH
61620: DOUBLE
61621: LD_INT 1
61623: DEC
61624: ST_TO_ADDR
61625: LD_VAR 0 6
61629: PUSH
61630: LD_INT 1
61632: ARRAY
61633: PUSH
61634: FOR_TO
61635: IFFALSE 61757
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61637: LD_ADDR_VAR 0 7
61641: PUSH
61642: LD_VAR 0 6
61646: PUSH
61647: LD_INT 1
61649: ARRAY
61650: PUSH
61651: LD_VAR 0 5
61655: ARRAY
61656: PUSH
61657: LD_VAR 0 6
61661: PUSH
61662: LD_INT 2
61664: ARRAY
61665: PUSH
61666: LD_VAR 0 5
61670: ARRAY
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61676: LD_VAR 0 7
61680: PUSH
61681: LD_INT 1
61683: ARRAY
61684: PPUSH
61685: LD_VAR 0 7
61689: PUSH
61690: LD_INT 2
61692: ARRAY
61693: PPUSH
61694: CALL_OW 428
61698: PUSH
61699: LD_INT 0
61701: EQUAL
61702: IFFALSE 61755
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61704: LD_VAR 0 1
61708: PPUSH
61709: LD_VAR 0 7
61713: PUSH
61714: LD_INT 1
61716: ARRAY
61717: PPUSH
61718: LD_VAR 0 7
61722: PUSH
61723: LD_INT 2
61725: ARRAY
61726: PPUSH
61727: LD_VAR 0 3
61731: PPUSH
61732: CALL_OW 48
// result := IsPlaced ( unit ) ;
61736: LD_ADDR_VAR 0 4
61740: PUSH
61741: LD_VAR 0 1
61745: PPUSH
61746: CALL_OW 305
61750: ST_TO_ADDR
// exit ;
61751: POP
61752: POP
61753: GO 61759
// end ; end ;
61755: GO 61634
61757: POP
61758: POP
// end ;
61759: LD_VAR 0 4
61763: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61764: LD_INT 0
61766: PPUSH
61767: PPUSH
61768: PPUSH
// if not side or side > 8 then
61769: LD_VAR 0 1
61773: NOT
61774: PUSH
61775: LD_VAR 0 1
61779: PUSH
61780: LD_INT 8
61782: GREATER
61783: OR
61784: IFFALSE 61788
// exit ;
61786: GO 61975
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61788: LD_ADDR_VAR 0 4
61792: PUSH
61793: LD_INT 22
61795: PUSH
61796: LD_VAR 0 1
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 21
61807: PUSH
61808: LD_INT 3
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PPUSH
61819: CALL_OW 69
61823: ST_TO_ADDR
// if not tmp then
61824: LD_VAR 0 4
61828: NOT
61829: IFFALSE 61833
// exit ;
61831: GO 61975
// enable_addtolog := true ;
61833: LD_ADDR_OWVAR 81
61837: PUSH
61838: LD_INT 1
61840: ST_TO_ADDR
// AddToLog ( [ ) ;
61841: LD_STRING [
61843: PPUSH
61844: CALL_OW 561
// for i in tmp do
61848: LD_ADDR_VAR 0 3
61852: PUSH
61853: LD_VAR 0 4
61857: PUSH
61858: FOR_IN
61859: IFFALSE 61966
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61861: LD_STRING [
61863: PUSH
61864: LD_VAR 0 3
61868: PPUSH
61869: CALL_OW 266
61873: STR
61874: PUSH
61875: LD_STRING , 
61877: STR
61878: PUSH
61879: LD_VAR 0 3
61883: PPUSH
61884: CALL_OW 250
61888: STR
61889: PUSH
61890: LD_STRING , 
61892: STR
61893: PUSH
61894: LD_VAR 0 3
61898: PPUSH
61899: CALL_OW 251
61903: STR
61904: PUSH
61905: LD_STRING , 
61907: STR
61908: PUSH
61909: LD_VAR 0 3
61913: PPUSH
61914: CALL_OW 254
61918: STR
61919: PUSH
61920: LD_STRING , 
61922: STR
61923: PUSH
61924: LD_VAR 0 3
61928: PPUSH
61929: LD_INT 1
61931: PPUSH
61932: CALL_OW 268
61936: STR
61937: PUSH
61938: LD_STRING , 
61940: STR
61941: PUSH
61942: LD_VAR 0 3
61946: PPUSH
61947: LD_INT 2
61949: PPUSH
61950: CALL_OW 268
61954: STR
61955: PUSH
61956: LD_STRING ],
61958: STR
61959: PPUSH
61960: CALL_OW 561
// end ;
61964: GO 61858
61966: POP
61967: POP
// AddToLog ( ]; ) ;
61968: LD_STRING ];
61970: PPUSH
61971: CALL_OW 561
// end ;
61975: LD_VAR 0 2
61979: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61980: LD_INT 0
61982: PPUSH
61983: PPUSH
61984: PPUSH
61985: PPUSH
61986: PPUSH
// if not area or not rate or not max then
61987: LD_VAR 0 1
61991: NOT
61992: PUSH
61993: LD_VAR 0 2
61997: NOT
61998: OR
61999: PUSH
62000: LD_VAR 0 4
62004: NOT
62005: OR
62006: IFFALSE 62010
// exit ;
62008: GO 62199
// while 1 do
62010: LD_INT 1
62012: IFFALSE 62199
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62014: LD_ADDR_VAR 0 9
62018: PUSH
62019: LD_VAR 0 1
62023: PPUSH
62024: LD_INT 1
62026: PPUSH
62027: CALL_OW 287
62031: PUSH
62032: LD_INT 10
62034: MUL
62035: ST_TO_ADDR
// r := rate / 10 ;
62036: LD_ADDR_VAR 0 7
62040: PUSH
62041: LD_VAR 0 2
62045: PUSH
62046: LD_INT 10
62048: DIVREAL
62049: ST_TO_ADDR
// time := 1 1$00 ;
62050: LD_ADDR_VAR 0 8
62054: PUSH
62055: LD_INT 2100
62057: ST_TO_ADDR
// if amount < min then
62058: LD_VAR 0 9
62062: PUSH
62063: LD_VAR 0 3
62067: LESS
62068: IFFALSE 62086
// r := r * 2 else
62070: LD_ADDR_VAR 0 7
62074: PUSH
62075: LD_VAR 0 7
62079: PUSH
62080: LD_INT 2
62082: MUL
62083: ST_TO_ADDR
62084: GO 62112
// if amount > max then
62086: LD_VAR 0 9
62090: PUSH
62091: LD_VAR 0 4
62095: GREATER
62096: IFFALSE 62112
// r := r / 2 ;
62098: LD_ADDR_VAR 0 7
62102: PUSH
62103: LD_VAR 0 7
62107: PUSH
62108: LD_INT 2
62110: DIVREAL
62111: ST_TO_ADDR
// time := time / r ;
62112: LD_ADDR_VAR 0 8
62116: PUSH
62117: LD_VAR 0 8
62121: PUSH
62122: LD_VAR 0 7
62126: DIVREAL
62127: ST_TO_ADDR
// if time < 0 then
62128: LD_VAR 0 8
62132: PUSH
62133: LD_INT 0
62135: LESS
62136: IFFALSE 62153
// time := time * - 1 ;
62138: LD_ADDR_VAR 0 8
62142: PUSH
62143: LD_VAR 0 8
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: MUL
62152: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62153: LD_VAR 0 8
62157: PUSH
62158: LD_INT 35
62160: PPUSH
62161: LD_INT 875
62163: PPUSH
62164: CALL_OW 12
62168: PLUS
62169: PPUSH
62170: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62174: LD_INT 1
62176: PPUSH
62177: LD_INT 5
62179: PPUSH
62180: CALL_OW 12
62184: PPUSH
62185: LD_VAR 0 1
62189: PPUSH
62190: LD_INT 1
62192: PPUSH
62193: CALL_OW 55
// end ;
62197: GO 62010
// end ;
62199: LD_VAR 0 5
62203: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62204: LD_INT 0
62206: PPUSH
62207: PPUSH
62208: PPUSH
62209: PPUSH
62210: PPUSH
62211: PPUSH
62212: PPUSH
62213: PPUSH
// if not turrets or not factories then
62214: LD_VAR 0 1
62218: NOT
62219: PUSH
62220: LD_VAR 0 2
62224: NOT
62225: OR
62226: IFFALSE 62230
// exit ;
62228: GO 62537
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62230: LD_ADDR_VAR 0 10
62234: PUSH
62235: LD_INT 5
62237: PUSH
62238: LD_INT 6
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 2
62247: PUSH
62248: LD_INT 4
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 3
62257: PUSH
62258: LD_INT 5
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 24
62272: PUSH
62273: LD_INT 25
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 23
62282: PUSH
62283: LD_INT 27
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 42
62296: PUSH
62297: LD_INT 43
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 44
62306: PUSH
62307: LD_INT 46
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 45
62316: PUSH
62317: LD_INT 47
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: ST_TO_ADDR
// result := [ ] ;
62334: LD_ADDR_VAR 0 3
62338: PUSH
62339: EMPTY
62340: ST_TO_ADDR
// for i in turrets do
62341: LD_ADDR_VAR 0 4
62345: PUSH
62346: LD_VAR 0 1
62350: PUSH
62351: FOR_IN
62352: IFFALSE 62535
// begin nat := GetNation ( i ) ;
62354: LD_ADDR_VAR 0 7
62358: PUSH
62359: LD_VAR 0 4
62363: PPUSH
62364: CALL_OW 248
62368: ST_TO_ADDR
// weapon := 0 ;
62369: LD_ADDR_VAR 0 8
62373: PUSH
62374: LD_INT 0
62376: ST_TO_ADDR
// if not nat then
62377: LD_VAR 0 7
62381: NOT
62382: IFFALSE 62386
// continue ;
62384: GO 62351
// for j in list [ nat ] do
62386: LD_ADDR_VAR 0 5
62390: PUSH
62391: LD_VAR 0 10
62395: PUSH
62396: LD_VAR 0 7
62400: ARRAY
62401: PUSH
62402: FOR_IN
62403: IFFALSE 62444
// if GetBWeapon ( i ) = j [ 1 ] then
62405: LD_VAR 0 4
62409: PPUSH
62410: CALL_OW 269
62414: PUSH
62415: LD_VAR 0 5
62419: PUSH
62420: LD_INT 1
62422: ARRAY
62423: EQUAL
62424: IFFALSE 62442
// begin weapon := j [ 2 ] ;
62426: LD_ADDR_VAR 0 8
62430: PUSH
62431: LD_VAR 0 5
62435: PUSH
62436: LD_INT 2
62438: ARRAY
62439: ST_TO_ADDR
// break ;
62440: GO 62444
// end ;
62442: GO 62402
62444: POP
62445: POP
// if not weapon then
62446: LD_VAR 0 8
62450: NOT
62451: IFFALSE 62455
// continue ;
62453: GO 62351
// for k in factories do
62455: LD_ADDR_VAR 0 6
62459: PUSH
62460: LD_VAR 0 2
62464: PUSH
62465: FOR_IN
62466: IFFALSE 62531
// begin weapons := AvailableWeaponList ( k ) ;
62468: LD_ADDR_VAR 0 9
62472: PUSH
62473: LD_VAR 0 6
62477: PPUSH
62478: CALL_OW 478
62482: ST_TO_ADDR
// if not weapons then
62483: LD_VAR 0 9
62487: NOT
62488: IFFALSE 62492
// continue ;
62490: GO 62465
// if weapon in weapons then
62492: LD_VAR 0 8
62496: PUSH
62497: LD_VAR 0 9
62501: IN
62502: IFFALSE 62529
// begin result := [ i , weapon ] ;
62504: LD_ADDR_VAR 0 3
62508: PUSH
62509: LD_VAR 0 4
62513: PUSH
62514: LD_VAR 0 8
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: ST_TO_ADDR
// exit ;
62523: POP
62524: POP
62525: POP
62526: POP
62527: GO 62537
// end ; end ;
62529: GO 62465
62531: POP
62532: POP
// end ;
62533: GO 62351
62535: POP
62536: POP
// end ;
62537: LD_VAR 0 3
62541: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62542: LD_INT 0
62544: PPUSH
// if not side or side > 8 then
62545: LD_VAR 0 3
62549: NOT
62550: PUSH
62551: LD_VAR 0 3
62555: PUSH
62556: LD_INT 8
62558: GREATER
62559: OR
62560: IFFALSE 62564
// exit ;
62562: GO 62623
// if not range then
62564: LD_VAR 0 4
62568: NOT
62569: IFFALSE 62580
// range := - 12 ;
62571: LD_ADDR_VAR 0 4
62575: PUSH
62576: LD_INT 12
62578: NEG
62579: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62580: LD_VAR 0 1
62584: PPUSH
62585: LD_VAR 0 2
62589: PPUSH
62590: LD_VAR 0 3
62594: PPUSH
62595: LD_VAR 0 4
62599: PPUSH
62600: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62604: LD_VAR 0 1
62608: PPUSH
62609: LD_VAR 0 2
62613: PPUSH
62614: LD_VAR 0 3
62618: PPUSH
62619: CALL_OW 331
// end ;
62623: LD_VAR 0 5
62627: RET
// export function Video ( mode ) ; begin
62628: LD_INT 0
62630: PPUSH
// ingame_video = mode ;
62631: LD_ADDR_OWVAR 52
62635: PUSH
62636: LD_VAR 0 1
62640: ST_TO_ADDR
// interface_hidden = mode ;
62641: LD_ADDR_OWVAR 54
62645: PUSH
62646: LD_VAR 0 1
62650: ST_TO_ADDR
// end ;
62651: LD_VAR 0 2
62655: RET
// export function Join ( array , element ) ; begin
62656: LD_INT 0
62658: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62659: LD_ADDR_VAR 0 3
62663: PUSH
62664: LD_VAR 0 1
62668: PPUSH
62669: LD_VAR 0 1
62673: PUSH
62674: LD_INT 1
62676: PLUS
62677: PPUSH
62678: LD_VAR 0 2
62682: PPUSH
62683: CALL_OW 1
62687: ST_TO_ADDR
// end ;
62688: LD_VAR 0 3
62692: RET
// export function JoinUnion ( array , element ) ; begin
62693: LD_INT 0
62695: PPUSH
// result := array union element ;
62696: LD_ADDR_VAR 0 3
62700: PUSH
62701: LD_VAR 0 1
62705: PUSH
62706: LD_VAR 0 2
62710: UNION
62711: ST_TO_ADDR
// end ;
62712: LD_VAR 0 3
62716: RET
// export function GetBehemoths ( side ) ; begin
62717: LD_INT 0
62719: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62720: LD_ADDR_VAR 0 2
62724: PUSH
62725: LD_INT 22
62727: PUSH
62728: LD_VAR 0 1
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 31
62739: PUSH
62740: LD_INT 25
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PPUSH
62751: CALL_OW 69
62755: ST_TO_ADDR
// end ;
62756: LD_VAR 0 2
62760: RET
// export function Shuffle ( array ) ; var i , index ; begin
62761: LD_INT 0
62763: PPUSH
62764: PPUSH
62765: PPUSH
// result := [ ] ;
62766: LD_ADDR_VAR 0 2
62770: PUSH
62771: EMPTY
62772: ST_TO_ADDR
// if not array then
62773: LD_VAR 0 1
62777: NOT
62778: IFFALSE 62782
// exit ;
62780: GO 62881
// Randomize ;
62782: CALL_OW 10
// for i = array downto 1 do
62786: LD_ADDR_VAR 0 3
62790: PUSH
62791: DOUBLE
62792: LD_VAR 0 1
62796: INC
62797: ST_TO_ADDR
62798: LD_INT 1
62800: PUSH
62801: FOR_DOWNTO
62802: IFFALSE 62879
// begin index := rand ( 1 , array ) ;
62804: LD_ADDR_VAR 0 4
62808: PUSH
62809: LD_INT 1
62811: PPUSH
62812: LD_VAR 0 1
62816: PPUSH
62817: CALL_OW 12
62821: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62822: LD_ADDR_VAR 0 2
62826: PUSH
62827: LD_VAR 0 2
62831: PPUSH
62832: LD_VAR 0 2
62836: PUSH
62837: LD_INT 1
62839: PLUS
62840: PPUSH
62841: LD_VAR 0 1
62845: PUSH
62846: LD_VAR 0 4
62850: ARRAY
62851: PPUSH
62852: CALL_OW 2
62856: ST_TO_ADDR
// array := Delete ( array , index ) ;
62857: LD_ADDR_VAR 0 1
62861: PUSH
62862: LD_VAR 0 1
62866: PPUSH
62867: LD_VAR 0 4
62871: PPUSH
62872: CALL_OW 3
62876: ST_TO_ADDR
// end ;
62877: GO 62801
62879: POP
62880: POP
// end ;
62881: LD_VAR 0 2
62885: RET
// export function GetBaseMaterials ( base ) ; begin
62886: LD_INT 0
62888: PPUSH
// result := [ 0 , 0 , 0 ] ;
62889: LD_ADDR_VAR 0 2
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: ST_TO_ADDR
// if not base then
62908: LD_VAR 0 1
62912: NOT
62913: IFFALSE 62917
// exit ;
62915: GO 62966
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62917: LD_ADDR_VAR 0 2
62921: PUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: LD_INT 1
62929: PPUSH
62930: CALL_OW 275
62934: PUSH
62935: LD_VAR 0 1
62939: PPUSH
62940: LD_INT 2
62942: PPUSH
62943: CALL_OW 275
62947: PUSH
62948: LD_VAR 0 1
62952: PPUSH
62953: LD_INT 3
62955: PPUSH
62956: CALL_OW 275
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: LIST
62965: ST_TO_ADDR
// end ;
62966: LD_VAR 0 2
62970: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62971: LD_INT 0
62973: PPUSH
62974: PPUSH
// result := array ;
62975: LD_ADDR_VAR 0 3
62979: PUSH
62980: LD_VAR 0 1
62984: ST_TO_ADDR
// if size >= result then
62985: LD_VAR 0 2
62989: PUSH
62990: LD_VAR 0 3
62994: GREATEREQUAL
62995: IFFALSE 62999
// exit ;
62997: GO 63049
// if size then
62999: LD_VAR 0 2
63003: IFFALSE 63049
// for i := array downto size do
63005: LD_ADDR_VAR 0 4
63009: PUSH
63010: DOUBLE
63011: LD_VAR 0 1
63015: INC
63016: ST_TO_ADDR
63017: LD_VAR 0 2
63021: PUSH
63022: FOR_DOWNTO
63023: IFFALSE 63047
// result := Delete ( result , result ) ;
63025: LD_ADDR_VAR 0 3
63029: PUSH
63030: LD_VAR 0 3
63034: PPUSH
63035: LD_VAR 0 3
63039: PPUSH
63040: CALL_OW 3
63044: ST_TO_ADDR
63045: GO 63022
63047: POP
63048: POP
// end ;
63049: LD_VAR 0 3
63053: RET
// export function ComExit ( unit ) ; var tmp ; begin
63054: LD_INT 0
63056: PPUSH
63057: PPUSH
// if not IsInUnit ( unit ) then
63058: LD_VAR 0 1
63062: PPUSH
63063: CALL_OW 310
63067: NOT
63068: IFFALSE 63072
// exit ;
63070: GO 63132
// tmp := IsInUnit ( unit ) ;
63072: LD_ADDR_VAR 0 3
63076: PUSH
63077: LD_VAR 0 1
63081: PPUSH
63082: CALL_OW 310
63086: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63087: LD_VAR 0 3
63091: PPUSH
63092: CALL_OW 247
63096: PUSH
63097: LD_INT 2
63099: EQUAL
63100: IFFALSE 63113
// ComExitVehicle ( unit ) else
63102: LD_VAR 0 1
63106: PPUSH
63107: CALL_OW 121
63111: GO 63122
// ComExitBuilding ( unit ) ;
63113: LD_VAR 0 1
63117: PPUSH
63118: CALL_OW 122
// result := tmp ;
63122: LD_ADDR_VAR 0 2
63126: PUSH
63127: LD_VAR 0 3
63131: ST_TO_ADDR
// end ;
63132: LD_VAR 0 2
63136: RET
// export function ComExitAll ( units ) ; var i ; begin
63137: LD_INT 0
63139: PPUSH
63140: PPUSH
// if not units then
63141: LD_VAR 0 1
63145: NOT
63146: IFFALSE 63150
// exit ;
63148: GO 63176
// for i in units do
63150: LD_ADDR_VAR 0 3
63154: PUSH
63155: LD_VAR 0 1
63159: PUSH
63160: FOR_IN
63161: IFFALSE 63174
// ComExit ( i ) ;
63163: LD_VAR 0 3
63167: PPUSH
63168: CALL 63054 0 1
63172: GO 63160
63174: POP
63175: POP
// end ;
63176: LD_VAR 0 2
63180: RET
// export function ResetHc ; begin
63181: LD_INT 0
63183: PPUSH
// InitHc ;
63184: CALL_OW 19
// hc_importance := 0 ;
63188: LD_ADDR_OWVAR 32
63192: PUSH
63193: LD_INT 0
63195: ST_TO_ADDR
// end ;
63196: LD_VAR 0 1
63200: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63201: LD_INT 0
63203: PPUSH
63204: PPUSH
63205: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63206: LD_ADDR_VAR 0 6
63210: PUSH
63211: LD_VAR 0 1
63215: PUSH
63216: LD_VAR 0 3
63220: PLUS
63221: PUSH
63222: LD_INT 2
63224: DIV
63225: ST_TO_ADDR
// if _x < 0 then
63226: LD_VAR 0 6
63230: PUSH
63231: LD_INT 0
63233: LESS
63234: IFFALSE 63251
// _x := _x * - 1 ;
63236: LD_ADDR_VAR 0 6
63240: PUSH
63241: LD_VAR 0 6
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: MUL
63250: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63251: LD_ADDR_VAR 0 7
63255: PUSH
63256: LD_VAR 0 2
63260: PUSH
63261: LD_VAR 0 4
63265: PLUS
63266: PUSH
63267: LD_INT 2
63269: DIV
63270: ST_TO_ADDR
// if _y < 0 then
63271: LD_VAR 0 7
63275: PUSH
63276: LD_INT 0
63278: LESS
63279: IFFALSE 63296
// _y := _y * - 1 ;
63281: LD_ADDR_VAR 0 7
63285: PUSH
63286: LD_VAR 0 7
63290: PUSH
63291: LD_INT 1
63293: NEG
63294: MUL
63295: ST_TO_ADDR
// result := [ _x , _y ] ;
63296: LD_ADDR_VAR 0 5
63300: PUSH
63301: LD_VAR 0 6
63305: PUSH
63306: LD_VAR 0 7
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: ST_TO_ADDR
// end ;
63315: LD_VAR 0 5
63319: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63320: LD_INT 0
63322: PPUSH
63323: PPUSH
63324: PPUSH
63325: PPUSH
// task := GetTaskList ( unit ) ;
63326: LD_ADDR_VAR 0 7
63330: PUSH
63331: LD_VAR 0 1
63335: PPUSH
63336: CALL_OW 437
63340: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63341: LD_VAR 0 7
63345: NOT
63346: PUSH
63347: LD_VAR 0 1
63351: PPUSH
63352: LD_VAR 0 2
63356: PPUSH
63357: CALL_OW 308
63361: NOT
63362: AND
63363: IFFALSE 63367
// exit ;
63365: GO 63485
// if IsInArea ( unit , area ) then
63367: LD_VAR 0 1
63371: PPUSH
63372: LD_VAR 0 2
63376: PPUSH
63377: CALL_OW 308
63381: IFFALSE 63399
// begin ComMoveToArea ( unit , goAway ) ;
63383: LD_VAR 0 1
63387: PPUSH
63388: LD_VAR 0 3
63392: PPUSH
63393: CALL_OW 113
// exit ;
63397: GO 63485
// end ; if task [ 1 ] [ 1 ] <> M then
63399: LD_VAR 0 7
63403: PUSH
63404: LD_INT 1
63406: ARRAY
63407: PUSH
63408: LD_INT 1
63410: ARRAY
63411: PUSH
63412: LD_STRING M
63414: NONEQUAL
63415: IFFALSE 63419
// exit ;
63417: GO 63485
// x := task [ 1 ] [ 2 ] ;
63419: LD_ADDR_VAR 0 5
63423: PUSH
63424: LD_VAR 0 7
63428: PUSH
63429: LD_INT 1
63431: ARRAY
63432: PUSH
63433: LD_INT 2
63435: ARRAY
63436: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63437: LD_ADDR_VAR 0 6
63441: PUSH
63442: LD_VAR 0 7
63446: PUSH
63447: LD_INT 1
63449: ARRAY
63450: PUSH
63451: LD_INT 3
63453: ARRAY
63454: ST_TO_ADDR
// if InArea ( x , y , area ) then
63455: LD_VAR 0 5
63459: PPUSH
63460: LD_VAR 0 6
63464: PPUSH
63465: LD_VAR 0 2
63469: PPUSH
63470: CALL_OW 309
63474: IFFALSE 63485
// ComStop ( unit ) ;
63476: LD_VAR 0 1
63480: PPUSH
63481: CALL_OW 141
// end ;
63485: LD_VAR 0 4
63489: RET
// export function Abs ( value ) ; begin
63490: LD_INT 0
63492: PPUSH
// result := value ;
63493: LD_ADDR_VAR 0 2
63497: PUSH
63498: LD_VAR 0 1
63502: ST_TO_ADDR
// if value < 0 then
63503: LD_VAR 0 1
63507: PUSH
63508: LD_INT 0
63510: LESS
63511: IFFALSE 63528
// result := value * - 1 ;
63513: LD_ADDR_VAR 0 2
63517: PUSH
63518: LD_VAR 0 1
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: MUL
63527: ST_TO_ADDR
// end ;
63528: LD_VAR 0 2
63532: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63533: LD_INT 0
63535: PPUSH
63536: PPUSH
63537: PPUSH
63538: PPUSH
63539: PPUSH
63540: PPUSH
63541: PPUSH
63542: PPUSH
// if not unit or not building then
63543: LD_VAR 0 1
63547: NOT
63548: PUSH
63549: LD_VAR 0 2
63553: NOT
63554: OR
63555: IFFALSE 63559
// exit ;
63557: GO 63785
// x := GetX ( building ) ;
63559: LD_ADDR_VAR 0 4
63563: PUSH
63564: LD_VAR 0 2
63568: PPUSH
63569: CALL_OW 250
63573: ST_TO_ADDR
// y := GetY ( building ) ;
63574: LD_ADDR_VAR 0 6
63578: PUSH
63579: LD_VAR 0 2
63583: PPUSH
63584: CALL_OW 251
63588: ST_TO_ADDR
// d := GetDir ( building ) ;
63589: LD_ADDR_VAR 0 8
63593: PUSH
63594: LD_VAR 0 2
63598: PPUSH
63599: CALL_OW 254
63603: ST_TO_ADDR
// r := 4 ;
63604: LD_ADDR_VAR 0 9
63608: PUSH
63609: LD_INT 4
63611: ST_TO_ADDR
// for i := 1 to 5 do
63612: LD_ADDR_VAR 0 10
63616: PUSH
63617: DOUBLE
63618: LD_INT 1
63620: DEC
63621: ST_TO_ADDR
63622: LD_INT 5
63624: PUSH
63625: FOR_TO
63626: IFFALSE 63783
// begin _x := ShiftX ( x , d , r + i ) ;
63628: LD_ADDR_VAR 0 5
63632: PUSH
63633: LD_VAR 0 4
63637: PPUSH
63638: LD_VAR 0 8
63642: PPUSH
63643: LD_VAR 0 9
63647: PUSH
63648: LD_VAR 0 10
63652: PLUS
63653: PPUSH
63654: CALL_OW 272
63658: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63659: LD_ADDR_VAR 0 7
63663: PUSH
63664: LD_VAR 0 6
63668: PPUSH
63669: LD_VAR 0 8
63673: PPUSH
63674: LD_VAR 0 9
63678: PUSH
63679: LD_VAR 0 10
63683: PLUS
63684: PPUSH
63685: CALL_OW 273
63689: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63690: LD_VAR 0 5
63694: PPUSH
63695: LD_VAR 0 7
63699: PPUSH
63700: CALL_OW 488
63704: PUSH
63705: LD_VAR 0 5
63709: PPUSH
63710: LD_VAR 0 7
63714: PPUSH
63715: CALL_OW 428
63719: PPUSH
63720: CALL_OW 247
63724: PUSH
63725: LD_INT 3
63727: PUSH
63728: LD_INT 2
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: IN
63735: NOT
63736: AND
63737: IFFALSE 63781
// begin ComMoveXY ( unit , _x , _y ) ;
63739: LD_VAR 0 1
63743: PPUSH
63744: LD_VAR 0 5
63748: PPUSH
63749: LD_VAR 0 7
63753: PPUSH
63754: CALL_OW 111
// result := [ _x , _y ] ;
63758: LD_ADDR_VAR 0 3
63762: PUSH
63763: LD_VAR 0 5
63767: PUSH
63768: LD_VAR 0 7
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: ST_TO_ADDR
// exit ;
63777: POP
63778: POP
63779: GO 63785
// end ; end ;
63781: GO 63625
63783: POP
63784: POP
// end ;
63785: LD_VAR 0 3
63789: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63790: LD_INT 0
63792: PPUSH
63793: PPUSH
63794: PPUSH
// result := 0 ;
63795: LD_ADDR_VAR 0 3
63799: PUSH
63800: LD_INT 0
63802: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63803: LD_VAR 0 1
63807: PUSH
63808: LD_INT 0
63810: LESS
63811: PUSH
63812: LD_VAR 0 1
63816: PUSH
63817: LD_INT 8
63819: GREATER
63820: OR
63821: PUSH
63822: LD_VAR 0 2
63826: PUSH
63827: LD_INT 0
63829: LESS
63830: OR
63831: PUSH
63832: LD_VAR 0 2
63836: PUSH
63837: LD_INT 8
63839: GREATER
63840: OR
63841: IFFALSE 63845
// exit ;
63843: GO 63920
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63845: LD_ADDR_VAR 0 4
63849: PUSH
63850: LD_INT 22
63852: PUSH
63853: LD_VAR 0 2
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PPUSH
63862: CALL_OW 69
63866: PUSH
63867: FOR_IN
63868: IFFALSE 63918
// begin un := UnitShoot ( i ) ;
63870: LD_ADDR_VAR 0 5
63874: PUSH
63875: LD_VAR 0 4
63879: PPUSH
63880: CALL_OW 504
63884: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63885: LD_VAR 0 5
63889: PPUSH
63890: CALL_OW 255
63894: PUSH
63895: LD_VAR 0 1
63899: EQUAL
63900: IFFALSE 63916
// begin result := un ;
63902: LD_ADDR_VAR 0 3
63906: PUSH
63907: LD_VAR 0 5
63911: ST_TO_ADDR
// exit ;
63912: POP
63913: POP
63914: GO 63920
// end ; end ;
63916: GO 63867
63918: POP
63919: POP
// end ;
63920: LD_VAR 0 3
63924: RET
// export function GetCargoBay ( units ) ; begin
63925: LD_INT 0
63927: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63928: LD_ADDR_VAR 0 2
63932: PUSH
63933: LD_VAR 0 1
63937: PPUSH
63938: LD_INT 2
63940: PUSH
63941: LD_INT 34
63943: PUSH
63944: LD_INT 12
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 34
63953: PUSH
63954: LD_INT 51
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 34
63963: PUSH
63964: LD_INT 32
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 34
63973: PUSH
63974: LD_INT 89
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: PPUSH
63988: CALL_OW 72
63992: ST_TO_ADDR
// end ;
63993: LD_VAR 0 2
63997: RET
// export function Negate ( value ) ; begin
63998: LD_INT 0
64000: PPUSH
// result := not value ;
64001: LD_ADDR_VAR 0 2
64005: PUSH
64006: LD_VAR 0 1
64010: NOT
64011: ST_TO_ADDR
// end ;
64012: LD_VAR 0 2
64016: RET
// export function Inc ( value ) ; begin
64017: LD_INT 0
64019: PPUSH
// result := value + 1 ;
64020: LD_ADDR_VAR 0 2
64024: PUSH
64025: LD_VAR 0 1
64029: PUSH
64030: LD_INT 1
64032: PLUS
64033: ST_TO_ADDR
// end ;
64034: LD_VAR 0 2
64038: RET
// export function Dec ( value ) ; begin
64039: LD_INT 0
64041: PPUSH
// result := value - 1 ;
64042: LD_ADDR_VAR 0 2
64046: PUSH
64047: LD_VAR 0 1
64051: PUSH
64052: LD_INT 1
64054: MINUS
64055: ST_TO_ADDR
// end ;
64056: LD_VAR 0 2
64060: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64061: LD_INT 0
64063: PPUSH
64064: PPUSH
64065: PPUSH
64066: PPUSH
64067: PPUSH
64068: PPUSH
64069: PPUSH
64070: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64071: LD_VAR 0 1
64075: PPUSH
64076: LD_VAR 0 2
64080: PPUSH
64081: CALL_OW 488
64085: NOT
64086: PUSH
64087: LD_VAR 0 3
64091: PPUSH
64092: LD_VAR 0 4
64096: PPUSH
64097: CALL_OW 488
64101: NOT
64102: OR
64103: IFFALSE 64116
// begin result := - 1 ;
64105: LD_ADDR_VAR 0 5
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: ST_TO_ADDR
// exit ;
64114: GO 64351
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64116: LD_ADDR_VAR 0 12
64120: PUSH
64121: LD_VAR 0 1
64125: PPUSH
64126: LD_VAR 0 2
64130: PPUSH
64131: LD_VAR 0 3
64135: PPUSH
64136: LD_VAR 0 4
64140: PPUSH
64141: CALL 63201 0 4
64145: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64146: LD_ADDR_VAR 0 11
64150: PUSH
64151: LD_VAR 0 1
64155: PPUSH
64156: LD_VAR 0 2
64160: PPUSH
64161: LD_VAR 0 12
64165: PUSH
64166: LD_INT 1
64168: ARRAY
64169: PPUSH
64170: LD_VAR 0 12
64174: PUSH
64175: LD_INT 2
64177: ARRAY
64178: PPUSH
64179: CALL_OW 298
64183: ST_TO_ADDR
// distance := 9999 ;
64184: LD_ADDR_VAR 0 10
64188: PUSH
64189: LD_INT 9999
64191: ST_TO_ADDR
// for i := 0 to 5 do
64192: LD_ADDR_VAR 0 6
64196: PUSH
64197: DOUBLE
64198: LD_INT 0
64200: DEC
64201: ST_TO_ADDR
64202: LD_INT 5
64204: PUSH
64205: FOR_TO
64206: IFFALSE 64349
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64208: LD_ADDR_VAR 0 7
64212: PUSH
64213: LD_VAR 0 1
64217: PPUSH
64218: LD_VAR 0 6
64222: PPUSH
64223: LD_VAR 0 11
64227: PPUSH
64228: CALL_OW 272
64232: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64233: LD_ADDR_VAR 0 8
64237: PUSH
64238: LD_VAR 0 2
64242: PPUSH
64243: LD_VAR 0 6
64247: PPUSH
64248: LD_VAR 0 11
64252: PPUSH
64253: CALL_OW 273
64257: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64258: LD_VAR 0 7
64262: PPUSH
64263: LD_VAR 0 8
64267: PPUSH
64268: CALL_OW 488
64272: NOT
64273: IFFALSE 64277
// continue ;
64275: GO 64205
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64277: LD_ADDR_VAR 0 9
64281: PUSH
64282: LD_VAR 0 12
64286: PUSH
64287: LD_INT 1
64289: ARRAY
64290: PPUSH
64291: LD_VAR 0 12
64295: PUSH
64296: LD_INT 2
64298: ARRAY
64299: PPUSH
64300: LD_VAR 0 7
64304: PPUSH
64305: LD_VAR 0 8
64309: PPUSH
64310: CALL_OW 298
64314: ST_TO_ADDR
// if tmp < distance then
64315: LD_VAR 0 9
64319: PUSH
64320: LD_VAR 0 10
64324: LESS
64325: IFFALSE 64347
// begin result := i ;
64327: LD_ADDR_VAR 0 5
64331: PUSH
64332: LD_VAR 0 6
64336: ST_TO_ADDR
// distance := tmp ;
64337: LD_ADDR_VAR 0 10
64341: PUSH
64342: LD_VAR 0 9
64346: ST_TO_ADDR
// end ; end ;
64347: GO 64205
64349: POP
64350: POP
// end ;
64351: LD_VAR 0 5
64355: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64356: LD_INT 0
64358: PPUSH
64359: PPUSH
// if not driver or not IsInUnit ( driver ) then
64360: LD_VAR 0 1
64364: NOT
64365: PUSH
64366: LD_VAR 0 1
64370: PPUSH
64371: CALL_OW 310
64375: NOT
64376: OR
64377: IFFALSE 64381
// exit ;
64379: GO 64471
// vehicle := IsInUnit ( driver ) ;
64381: LD_ADDR_VAR 0 3
64385: PUSH
64386: LD_VAR 0 1
64390: PPUSH
64391: CALL_OW 310
64395: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64396: LD_VAR 0 1
64400: PPUSH
64401: LD_STRING \
64403: PUSH
64404: LD_INT 0
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: PUSH
64431: LD_STRING E
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: LD_VAR 0 3
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PPUSH
64467: CALL_OW 446
// end ;
64471: LD_VAR 0 2
64475: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64476: LD_INT 0
64478: PPUSH
64479: PPUSH
// if not driver or not IsInUnit ( driver ) then
64480: LD_VAR 0 1
64484: NOT
64485: PUSH
64486: LD_VAR 0 1
64490: PPUSH
64491: CALL_OW 310
64495: NOT
64496: OR
64497: IFFALSE 64501
// exit ;
64499: GO 64591
// vehicle := IsInUnit ( driver ) ;
64501: LD_ADDR_VAR 0 3
64505: PUSH
64506: LD_VAR 0 1
64510: PPUSH
64511: CALL_OW 310
64515: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64516: LD_VAR 0 1
64520: PPUSH
64521: LD_STRING \
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: PUSH
64551: LD_STRING E
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: LD_VAR 0 3
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PPUSH
64587: CALL_OW 447
// end ;
64591: LD_VAR 0 2
64595: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64596: LD_INT 0
64598: PPUSH
64599: PPUSH
64600: PPUSH
// tmp := [ ] ;
64601: LD_ADDR_VAR 0 5
64605: PUSH
64606: EMPTY
64607: ST_TO_ADDR
// for i in units do
64608: LD_ADDR_VAR 0 4
64612: PUSH
64613: LD_VAR 0 1
64617: PUSH
64618: FOR_IN
64619: IFFALSE 64657
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64621: LD_ADDR_VAR 0 5
64625: PUSH
64626: LD_VAR 0 5
64630: PPUSH
64631: LD_VAR 0 5
64635: PUSH
64636: LD_INT 1
64638: PLUS
64639: PPUSH
64640: LD_VAR 0 4
64644: PPUSH
64645: CALL_OW 256
64649: PPUSH
64650: CALL_OW 2
64654: ST_TO_ADDR
64655: GO 64618
64657: POP
64658: POP
// if not tmp then
64659: LD_VAR 0 5
64663: NOT
64664: IFFALSE 64668
// exit ;
64666: GO 64716
// if asc then
64668: LD_VAR 0 2
64672: IFFALSE 64696
// result := SortListByListAsc ( units , tmp ) else
64674: LD_ADDR_VAR 0 3
64678: PUSH
64679: LD_VAR 0 1
64683: PPUSH
64684: LD_VAR 0 5
64688: PPUSH
64689: CALL_OW 76
64693: ST_TO_ADDR
64694: GO 64716
// result := SortListByListDesc ( units , tmp ) ;
64696: LD_ADDR_VAR 0 3
64700: PUSH
64701: LD_VAR 0 1
64705: PPUSH
64706: LD_VAR 0 5
64710: PPUSH
64711: CALL_OW 77
64715: ST_TO_ADDR
// end ;
64716: LD_VAR 0 3
64720: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64721: LD_INT 0
64723: PPUSH
64724: PPUSH
// task := GetTaskList ( mech ) ;
64725: LD_ADDR_VAR 0 4
64729: PUSH
64730: LD_VAR 0 1
64734: PPUSH
64735: CALL_OW 437
64739: ST_TO_ADDR
// if not task then
64740: LD_VAR 0 4
64744: NOT
64745: IFFALSE 64749
// exit ;
64747: GO 64791
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64749: LD_ADDR_VAR 0 3
64753: PUSH
64754: LD_VAR 0 4
64758: PUSH
64759: LD_INT 1
64761: ARRAY
64762: PUSH
64763: LD_INT 1
64765: ARRAY
64766: PUSH
64767: LD_STRING r
64769: EQUAL
64770: PUSH
64771: LD_VAR 0 4
64775: PUSH
64776: LD_INT 1
64778: ARRAY
64779: PUSH
64780: LD_INT 4
64782: ARRAY
64783: PUSH
64784: LD_VAR 0 2
64788: EQUAL
64789: AND
64790: ST_TO_ADDR
// end ;
64791: LD_VAR 0 3
64795: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64796: LD_INT 0
64798: PPUSH
// SetDir ( unit , d ) ;
64799: LD_VAR 0 1
64803: PPUSH
64804: LD_VAR 0 4
64808: PPUSH
64809: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64813: LD_VAR 0 1
64817: PPUSH
64818: LD_VAR 0 2
64822: PPUSH
64823: LD_VAR 0 3
64827: PPUSH
64828: LD_VAR 0 5
64832: PPUSH
64833: CALL_OW 48
// end ;
64837: LD_VAR 0 6
64841: RET
// export function ToNaturalNumber ( number ) ; begin
64842: LD_INT 0
64844: PPUSH
// result := number div 1 ;
64845: LD_ADDR_VAR 0 2
64849: PUSH
64850: LD_VAR 0 1
64854: PUSH
64855: LD_INT 1
64857: DIV
64858: ST_TO_ADDR
// if number < 0 then
64859: LD_VAR 0 1
64863: PUSH
64864: LD_INT 0
64866: LESS
64867: IFFALSE 64877
// result := 0 ;
64869: LD_ADDR_VAR 0 2
64873: PUSH
64874: LD_INT 0
64876: ST_TO_ADDR
// end ;
64877: LD_VAR 0 2
64881: RET
// export function SortByClass ( units , class ) ; var un ; begin
64882: LD_INT 0
64884: PPUSH
64885: PPUSH
// if not units or not class then
64886: LD_VAR 0 1
64890: NOT
64891: PUSH
64892: LD_VAR 0 2
64896: NOT
64897: OR
64898: IFFALSE 64902
// exit ;
64900: GO 64997
// result := [ ] ;
64902: LD_ADDR_VAR 0 3
64906: PUSH
64907: EMPTY
64908: ST_TO_ADDR
// for un in units do
64909: LD_ADDR_VAR 0 4
64913: PUSH
64914: LD_VAR 0 1
64918: PUSH
64919: FOR_IN
64920: IFFALSE 64995
// if GetClass ( un ) = class then
64922: LD_VAR 0 4
64926: PPUSH
64927: CALL_OW 257
64931: PUSH
64932: LD_VAR 0 2
64936: EQUAL
64937: IFFALSE 64964
// result := Insert ( result , 1 , un ) else
64939: LD_ADDR_VAR 0 3
64943: PUSH
64944: LD_VAR 0 3
64948: PPUSH
64949: LD_INT 1
64951: PPUSH
64952: LD_VAR 0 4
64956: PPUSH
64957: CALL_OW 2
64961: ST_TO_ADDR
64962: GO 64993
// result := Replace ( result , result + 1 , un ) ;
64964: LD_ADDR_VAR 0 3
64968: PUSH
64969: LD_VAR 0 3
64973: PPUSH
64974: LD_VAR 0 3
64978: PUSH
64979: LD_INT 1
64981: PLUS
64982: PPUSH
64983: LD_VAR 0 4
64987: PPUSH
64988: CALL_OW 1
64992: ST_TO_ADDR
64993: GO 64919
64995: POP
64996: POP
// end ;
64997: LD_VAR 0 3
65001: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65002: LD_INT 0
65004: PPUSH
65005: PPUSH
65006: PPUSH
65007: PPUSH
65008: PPUSH
65009: PPUSH
65010: PPUSH
// result := [ ] ;
65011: LD_ADDR_VAR 0 4
65015: PUSH
65016: EMPTY
65017: ST_TO_ADDR
// if x - r < 0 then
65018: LD_VAR 0 1
65022: PUSH
65023: LD_VAR 0 3
65027: MINUS
65028: PUSH
65029: LD_INT 0
65031: LESS
65032: IFFALSE 65044
// min_x := 0 else
65034: LD_ADDR_VAR 0 8
65038: PUSH
65039: LD_INT 0
65041: ST_TO_ADDR
65042: GO 65060
// min_x := x - r ;
65044: LD_ADDR_VAR 0 8
65048: PUSH
65049: LD_VAR 0 1
65053: PUSH
65054: LD_VAR 0 3
65058: MINUS
65059: ST_TO_ADDR
// if y - r < 0 then
65060: LD_VAR 0 2
65064: PUSH
65065: LD_VAR 0 3
65069: MINUS
65070: PUSH
65071: LD_INT 0
65073: LESS
65074: IFFALSE 65086
// min_y := 0 else
65076: LD_ADDR_VAR 0 7
65080: PUSH
65081: LD_INT 0
65083: ST_TO_ADDR
65084: GO 65102
// min_y := y - r ;
65086: LD_ADDR_VAR 0 7
65090: PUSH
65091: LD_VAR 0 2
65095: PUSH
65096: LD_VAR 0 3
65100: MINUS
65101: ST_TO_ADDR
// max_x := x + r ;
65102: LD_ADDR_VAR 0 9
65106: PUSH
65107: LD_VAR 0 1
65111: PUSH
65112: LD_VAR 0 3
65116: PLUS
65117: ST_TO_ADDR
// max_y := y + r ;
65118: LD_ADDR_VAR 0 10
65122: PUSH
65123: LD_VAR 0 2
65127: PUSH
65128: LD_VAR 0 3
65132: PLUS
65133: ST_TO_ADDR
// for _x = min_x to max_x do
65134: LD_ADDR_VAR 0 5
65138: PUSH
65139: DOUBLE
65140: LD_VAR 0 8
65144: DEC
65145: ST_TO_ADDR
65146: LD_VAR 0 9
65150: PUSH
65151: FOR_TO
65152: IFFALSE 65253
// for _y = min_y to max_y do
65154: LD_ADDR_VAR 0 6
65158: PUSH
65159: DOUBLE
65160: LD_VAR 0 7
65164: DEC
65165: ST_TO_ADDR
65166: LD_VAR 0 10
65170: PUSH
65171: FOR_TO
65172: IFFALSE 65249
// begin if not ValidHex ( _x , _y ) then
65174: LD_VAR 0 5
65178: PPUSH
65179: LD_VAR 0 6
65183: PPUSH
65184: CALL_OW 488
65188: NOT
65189: IFFALSE 65193
// continue ;
65191: GO 65171
// if GetResourceTypeXY ( _x , _y ) then
65193: LD_VAR 0 5
65197: PPUSH
65198: LD_VAR 0 6
65202: PPUSH
65203: CALL_OW 283
65207: IFFALSE 65247
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65209: LD_ADDR_VAR 0 4
65213: PUSH
65214: LD_VAR 0 4
65218: PPUSH
65219: LD_VAR 0 4
65223: PUSH
65224: LD_INT 1
65226: PLUS
65227: PPUSH
65228: LD_VAR 0 5
65232: PUSH
65233: LD_VAR 0 6
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PPUSH
65242: CALL_OW 1
65246: ST_TO_ADDR
// end ;
65247: GO 65171
65249: POP
65250: POP
65251: GO 65151
65253: POP
65254: POP
// end ;
65255: LD_VAR 0 4
65259: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65260: LD_INT 0
65262: PPUSH
65263: PPUSH
65264: PPUSH
65265: PPUSH
65266: PPUSH
65267: PPUSH
65268: PPUSH
65269: PPUSH
// if not units then
65270: LD_VAR 0 1
65274: NOT
65275: IFFALSE 65279
// exit ;
65277: GO 65803
// result := UnitFilter ( units , [ f_ok ] ) ;
65279: LD_ADDR_VAR 0 3
65283: PUSH
65284: LD_VAR 0 1
65288: PPUSH
65289: LD_INT 50
65291: PUSH
65292: EMPTY
65293: LIST
65294: PPUSH
65295: CALL_OW 72
65299: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65300: LD_ADDR_VAR 0 8
65304: PUSH
65305: LD_VAR 0 1
65309: PUSH
65310: LD_INT 1
65312: ARRAY
65313: PPUSH
65314: CALL_OW 255
65318: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65319: LD_ADDR_VAR 0 10
65323: PUSH
65324: LD_INT 29
65326: PUSH
65327: LD_INT 91
65329: PUSH
65330: LD_INT 49
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: LIST
65337: ST_TO_ADDR
// if not result then
65338: LD_VAR 0 3
65342: NOT
65343: IFFALSE 65347
// exit ;
65345: GO 65803
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65347: LD_ADDR_VAR 0 5
65351: PUSH
65352: LD_INT 81
65354: PUSH
65355: LD_VAR 0 8
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PPUSH
65364: CALL_OW 69
65368: ST_TO_ADDR
// for i in result do
65369: LD_ADDR_VAR 0 4
65373: PUSH
65374: LD_VAR 0 3
65378: PUSH
65379: FOR_IN
65380: IFFALSE 65801
// begin tag := GetTag ( i ) + 1 ;
65382: LD_ADDR_VAR 0 9
65386: PUSH
65387: LD_VAR 0 4
65391: PPUSH
65392: CALL_OW 110
65396: PUSH
65397: LD_INT 1
65399: PLUS
65400: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65401: LD_ADDR_VAR 0 7
65405: PUSH
65406: LD_VAR 0 4
65410: PPUSH
65411: CALL_OW 250
65415: PPUSH
65416: LD_VAR 0 4
65420: PPUSH
65421: CALL_OW 251
65425: PPUSH
65426: LD_INT 6
65428: PPUSH
65429: CALL 65002 0 3
65433: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65434: LD_VAR 0 4
65438: PPUSH
65439: CALL_OW 247
65443: PUSH
65444: LD_INT 2
65446: EQUAL
65447: PUSH
65448: LD_VAR 0 7
65452: AND
65453: PUSH
65454: LD_VAR 0 4
65458: PPUSH
65459: CALL_OW 264
65463: PUSH
65464: LD_VAR 0 10
65468: IN
65469: NOT
65470: AND
65471: IFFALSE 65510
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65473: LD_VAR 0 4
65477: PPUSH
65478: LD_VAR 0 7
65482: PUSH
65483: LD_INT 1
65485: ARRAY
65486: PUSH
65487: LD_INT 1
65489: ARRAY
65490: PPUSH
65491: LD_VAR 0 7
65495: PUSH
65496: LD_INT 1
65498: ARRAY
65499: PUSH
65500: LD_INT 2
65502: ARRAY
65503: PPUSH
65504: CALL_OW 116
65508: GO 65799
// if path > tag then
65510: LD_VAR 0 2
65514: PUSH
65515: LD_VAR 0 9
65519: GREATER
65520: IFFALSE 65728
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65522: LD_ADDR_VAR 0 6
65526: PUSH
65527: LD_VAR 0 5
65531: PPUSH
65532: LD_INT 91
65534: PUSH
65535: LD_VAR 0 4
65539: PUSH
65540: LD_INT 8
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: LIST
65547: PPUSH
65548: CALL_OW 72
65552: ST_TO_ADDR
// if nearEnemy then
65553: LD_VAR 0 6
65557: IFFALSE 65626
// begin if GetWeapon ( i ) = ru_time_lapser then
65559: LD_VAR 0 4
65563: PPUSH
65564: CALL_OW 264
65568: PUSH
65569: LD_INT 49
65571: EQUAL
65572: IFFALSE 65600
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65574: LD_VAR 0 4
65578: PPUSH
65579: LD_VAR 0 6
65583: PPUSH
65584: LD_VAR 0 4
65588: PPUSH
65589: CALL_OW 74
65593: PPUSH
65594: CALL_OW 112
65598: GO 65624
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65600: LD_VAR 0 4
65604: PPUSH
65605: LD_VAR 0 6
65609: PPUSH
65610: LD_VAR 0 4
65614: PPUSH
65615: CALL_OW 74
65619: PPUSH
65620: CALL_OW 115
// end else
65624: GO 65726
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65626: LD_VAR 0 4
65630: PPUSH
65631: LD_VAR 0 2
65635: PUSH
65636: LD_VAR 0 9
65640: ARRAY
65641: PUSH
65642: LD_INT 1
65644: ARRAY
65645: PPUSH
65646: LD_VAR 0 2
65650: PUSH
65651: LD_VAR 0 9
65655: ARRAY
65656: PUSH
65657: LD_INT 2
65659: ARRAY
65660: PPUSH
65661: CALL_OW 297
65665: PUSH
65666: LD_INT 6
65668: GREATER
65669: IFFALSE 65712
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65671: LD_VAR 0 4
65675: PPUSH
65676: LD_VAR 0 2
65680: PUSH
65681: LD_VAR 0 9
65685: ARRAY
65686: PUSH
65687: LD_INT 1
65689: ARRAY
65690: PPUSH
65691: LD_VAR 0 2
65695: PUSH
65696: LD_VAR 0 9
65700: ARRAY
65701: PUSH
65702: LD_INT 2
65704: ARRAY
65705: PPUSH
65706: CALL_OW 114
65710: GO 65726
// SetTag ( i , tag ) ;
65712: LD_VAR 0 4
65716: PPUSH
65717: LD_VAR 0 9
65721: PPUSH
65722: CALL_OW 109
// end else
65726: GO 65799
// if enemy then
65728: LD_VAR 0 5
65732: IFFALSE 65799
// begin if GetWeapon ( i ) = ru_time_lapser then
65734: LD_VAR 0 4
65738: PPUSH
65739: CALL_OW 264
65743: PUSH
65744: LD_INT 49
65746: EQUAL
65747: IFFALSE 65775
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65749: LD_VAR 0 4
65753: PPUSH
65754: LD_VAR 0 5
65758: PPUSH
65759: LD_VAR 0 4
65763: PPUSH
65764: CALL_OW 74
65768: PPUSH
65769: CALL_OW 112
65773: GO 65799
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65775: LD_VAR 0 4
65779: PPUSH
65780: LD_VAR 0 5
65784: PPUSH
65785: LD_VAR 0 4
65789: PPUSH
65790: CALL_OW 74
65794: PPUSH
65795: CALL_OW 115
// end ; end ;
65799: GO 65379
65801: POP
65802: POP
// end ;
65803: LD_VAR 0 3
65807: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65808: LD_INT 0
65810: PPUSH
65811: PPUSH
65812: PPUSH
// if not unit or IsInUnit ( unit ) then
65813: LD_VAR 0 1
65817: NOT
65818: PUSH
65819: LD_VAR 0 1
65823: PPUSH
65824: CALL_OW 310
65828: OR
65829: IFFALSE 65833
// exit ;
65831: GO 65924
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65833: LD_ADDR_VAR 0 4
65837: PUSH
65838: LD_VAR 0 1
65842: PPUSH
65843: CALL_OW 250
65847: PPUSH
65848: LD_VAR 0 2
65852: PPUSH
65853: LD_INT 1
65855: PPUSH
65856: CALL_OW 272
65860: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65861: LD_ADDR_VAR 0 5
65865: PUSH
65866: LD_VAR 0 1
65870: PPUSH
65871: CALL_OW 251
65875: PPUSH
65876: LD_VAR 0 2
65880: PPUSH
65881: LD_INT 1
65883: PPUSH
65884: CALL_OW 273
65888: ST_TO_ADDR
// if ValidHex ( x , y ) then
65889: LD_VAR 0 4
65893: PPUSH
65894: LD_VAR 0 5
65898: PPUSH
65899: CALL_OW 488
65903: IFFALSE 65924
// ComTurnXY ( unit , x , y ) ;
65905: LD_VAR 0 1
65909: PPUSH
65910: LD_VAR 0 4
65914: PPUSH
65915: LD_VAR 0 5
65919: PPUSH
65920: CALL_OW 118
// end ;
65924: LD_VAR 0 3
65928: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65929: LD_INT 0
65931: PPUSH
65932: PPUSH
// result := false ;
65933: LD_ADDR_VAR 0 3
65937: PUSH
65938: LD_INT 0
65940: ST_TO_ADDR
// if not units then
65941: LD_VAR 0 2
65945: NOT
65946: IFFALSE 65950
// exit ;
65948: GO 65995
// for i in units do
65950: LD_ADDR_VAR 0 4
65954: PUSH
65955: LD_VAR 0 2
65959: PUSH
65960: FOR_IN
65961: IFFALSE 65993
// if See ( side , i ) then
65963: LD_VAR 0 1
65967: PPUSH
65968: LD_VAR 0 4
65972: PPUSH
65973: CALL_OW 292
65977: IFFALSE 65991
// begin result := true ;
65979: LD_ADDR_VAR 0 3
65983: PUSH
65984: LD_INT 1
65986: ST_TO_ADDR
// exit ;
65987: POP
65988: POP
65989: GO 65995
// end ;
65991: GO 65960
65993: POP
65994: POP
// end ;
65995: LD_VAR 0 3
65999: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66000: LD_INT 0
66002: PPUSH
66003: PPUSH
66004: PPUSH
66005: PPUSH
// if not unit or not points then
66006: LD_VAR 0 1
66010: NOT
66011: PUSH
66012: LD_VAR 0 2
66016: NOT
66017: OR
66018: IFFALSE 66022
// exit ;
66020: GO 66112
// dist := 99999 ;
66022: LD_ADDR_VAR 0 5
66026: PUSH
66027: LD_INT 99999
66029: ST_TO_ADDR
// for i in points do
66030: LD_ADDR_VAR 0 4
66034: PUSH
66035: LD_VAR 0 2
66039: PUSH
66040: FOR_IN
66041: IFFALSE 66110
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66043: LD_ADDR_VAR 0 6
66047: PUSH
66048: LD_VAR 0 1
66052: PPUSH
66053: LD_VAR 0 4
66057: PUSH
66058: LD_INT 1
66060: ARRAY
66061: PPUSH
66062: LD_VAR 0 4
66066: PUSH
66067: LD_INT 2
66069: ARRAY
66070: PPUSH
66071: CALL_OW 297
66075: ST_TO_ADDR
// if tmpDist < dist then
66076: LD_VAR 0 6
66080: PUSH
66081: LD_VAR 0 5
66085: LESS
66086: IFFALSE 66108
// begin result := i ;
66088: LD_ADDR_VAR 0 3
66092: PUSH
66093: LD_VAR 0 4
66097: ST_TO_ADDR
// dist := tmpDist ;
66098: LD_ADDR_VAR 0 5
66102: PUSH
66103: LD_VAR 0 6
66107: ST_TO_ADDR
// end ; end ;
66108: GO 66040
66110: POP
66111: POP
// end ;
66112: LD_VAR 0 3
66116: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66117: LD_INT 0
66119: PPUSH
// uc_side := side ;
66120: LD_ADDR_OWVAR 20
66124: PUSH
66125: LD_VAR 0 1
66129: ST_TO_ADDR
// uc_nation := 3 ;
66130: LD_ADDR_OWVAR 21
66134: PUSH
66135: LD_INT 3
66137: ST_TO_ADDR
// vc_chassis := 25 ;
66138: LD_ADDR_OWVAR 37
66142: PUSH
66143: LD_INT 25
66145: ST_TO_ADDR
// vc_engine := engine_siberite ;
66146: LD_ADDR_OWVAR 39
66150: PUSH
66151: LD_INT 3
66153: ST_TO_ADDR
// vc_control := control_computer ;
66154: LD_ADDR_OWVAR 38
66158: PUSH
66159: LD_INT 3
66161: ST_TO_ADDR
// vc_weapon := 59 ;
66162: LD_ADDR_OWVAR 40
66166: PUSH
66167: LD_INT 59
66169: ST_TO_ADDR
// result := CreateVehicle ;
66170: LD_ADDR_VAR 0 5
66174: PUSH
66175: CALL_OW 45
66179: ST_TO_ADDR
// SetDir ( result , d ) ;
66180: LD_VAR 0 5
66184: PPUSH
66185: LD_VAR 0 4
66189: PPUSH
66190: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66194: LD_VAR 0 5
66198: PPUSH
66199: LD_VAR 0 2
66203: PPUSH
66204: LD_VAR 0 3
66208: PPUSH
66209: LD_INT 0
66211: PPUSH
66212: CALL_OW 48
// end ;
66216: LD_VAR 0 5
66220: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66221: LD_INT 0
66223: PPUSH
66224: PPUSH
66225: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66226: LD_ADDR_VAR 0 2
66230: PUSH
66231: LD_INT 0
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: LD_INT 0
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66249: LD_VAR 0 1
66253: NOT
66254: PUSH
66255: LD_VAR 0 1
66259: PPUSH
66260: CALL_OW 264
66264: PUSH
66265: LD_INT 12
66267: PUSH
66268: LD_INT 51
66270: PUSH
66271: LD_INT 32
66273: PUSH
66274: LD_INT 89
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: IN
66283: NOT
66284: OR
66285: IFFALSE 66289
// exit ;
66287: GO 66387
// for i := 1 to 3 do
66289: LD_ADDR_VAR 0 3
66293: PUSH
66294: DOUBLE
66295: LD_INT 1
66297: DEC
66298: ST_TO_ADDR
66299: LD_INT 3
66301: PUSH
66302: FOR_TO
66303: IFFALSE 66385
// begin tmp := GetCargo ( cargo , i ) ;
66305: LD_ADDR_VAR 0 4
66309: PUSH
66310: LD_VAR 0 1
66314: PPUSH
66315: LD_VAR 0 3
66319: PPUSH
66320: CALL_OW 289
66324: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66325: LD_ADDR_VAR 0 2
66329: PUSH
66330: LD_VAR 0 2
66334: PPUSH
66335: LD_VAR 0 3
66339: PPUSH
66340: LD_VAR 0 4
66344: PPUSH
66345: CALL_OW 1
66349: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66350: LD_ADDR_VAR 0 2
66354: PUSH
66355: LD_VAR 0 2
66359: PPUSH
66360: LD_INT 4
66362: PPUSH
66363: LD_VAR 0 2
66367: PUSH
66368: LD_INT 4
66370: ARRAY
66371: PUSH
66372: LD_VAR 0 4
66376: PLUS
66377: PPUSH
66378: CALL_OW 1
66382: ST_TO_ADDR
// end ;
66383: GO 66302
66385: POP
66386: POP
// end ;
66387: LD_VAR 0 2
66391: RET
// export function Length ( array ) ; begin
66392: LD_INT 0
66394: PPUSH
// result := array + 0 ;
66395: LD_ADDR_VAR 0 2
66399: PUSH
66400: LD_VAR 0 1
66404: PUSH
66405: LD_INT 0
66407: PLUS
66408: ST_TO_ADDR
// end ;
66409: LD_VAR 0 2
66413: RET
// export function PrepareArray ( array ) ; begin
66414: LD_INT 0
66416: PPUSH
// result := array diff 0 ;
66417: LD_ADDR_VAR 0 2
66421: PUSH
66422: LD_VAR 0 1
66426: PUSH
66427: LD_INT 0
66429: DIFF
66430: ST_TO_ADDR
// if not result [ 1 ] then
66431: LD_VAR 0 2
66435: PUSH
66436: LD_INT 1
66438: ARRAY
66439: NOT
66440: IFFALSE 66460
// result := Delete ( result , 1 ) ;
66442: LD_ADDR_VAR 0 2
66446: PUSH
66447: LD_VAR 0 2
66451: PPUSH
66452: LD_INT 1
66454: PPUSH
66455: CALL_OW 3
66459: ST_TO_ADDR
// end ;
66460: LD_VAR 0 2
66464: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66465: LD_INT 0
66467: PPUSH
66468: PPUSH
66469: PPUSH
66470: PPUSH
// sibRocketRange := 25 ;
66471: LD_ADDR_VAR 0 6
66475: PUSH
66476: LD_INT 25
66478: ST_TO_ADDR
// result := false ;
66479: LD_ADDR_VAR 0 4
66483: PUSH
66484: LD_INT 0
66486: ST_TO_ADDR
// for i := 0 to 5 do
66487: LD_ADDR_VAR 0 5
66491: PUSH
66492: DOUBLE
66493: LD_INT 0
66495: DEC
66496: ST_TO_ADDR
66497: LD_INT 5
66499: PUSH
66500: FOR_TO
66501: IFFALSE 66568
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66503: LD_VAR 0 1
66507: PPUSH
66508: LD_VAR 0 5
66512: PPUSH
66513: LD_VAR 0 6
66517: PPUSH
66518: CALL_OW 272
66522: PPUSH
66523: LD_VAR 0 2
66527: PPUSH
66528: LD_VAR 0 5
66532: PPUSH
66533: LD_VAR 0 6
66537: PPUSH
66538: CALL_OW 273
66542: PPUSH
66543: LD_VAR 0 3
66547: PPUSH
66548: CALL_OW 309
66552: IFFALSE 66566
// begin result := true ;
66554: LD_ADDR_VAR 0 4
66558: PUSH
66559: LD_INT 1
66561: ST_TO_ADDR
// exit ;
66562: POP
66563: POP
66564: GO 66570
// end ;
66566: GO 66500
66568: POP
66569: POP
// end ; end_of_file end_of_file
66570: LD_VAR 0 4
66574: RET
// every 0 0$1 do
66575: GO 66577
66577: DISABLE
// begin enable ;
66578: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
66579: LD_STRING updateTimer(
66581: PUSH
66582: LD_OWVAR 1
66586: STR
66587: PUSH
66588: LD_STRING );
66590: STR
66591: PPUSH
66592: CALL_OW 559
// end ;
66596: END
// export function SOS_MapStart ( ) ; begin
66597: LD_INT 0
66599: PPUSH
// if streamModeActive then
66600: LD_EXP 59
66604: IFFALSE 66613
// DefineStreamItems ( true ) ;
66606: LD_INT 1
66608: PPUSH
66609: CALL 68267 0 1
// UpdateFactoryWaypoints ( ) ;
66613: CALL 81128 0 0
// UpdateWarehouseGatheringPoints ( ) ;
66617: CALL 81385 0 0
// end ;
66621: LD_VAR 0 1
66625: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66626: LD_INT 0
66628: PPUSH
// if p2 = hack_mode then
66629: LD_VAR 0 2
66633: PUSH
66634: LD_INT 100
66636: EQUAL
66637: IFFALSE 67640
// begin if not StreamModeActive then
66639: LD_EXP 59
66643: NOT
66644: IFFALSE 66654
// StreamModeActive := true ;
66646: LD_ADDR_EXP 59
66650: PUSH
66651: LD_INT 1
66653: ST_TO_ADDR
// if p3 = 0 then
66654: LD_VAR 0 3
66658: PUSH
66659: LD_INT 0
66661: EQUAL
66662: IFFALSE 66668
// InitStreamMode ;
66664: CALL 67803 0 0
// if p3 = 1 then
66668: LD_VAR 0 3
66672: PUSH
66673: LD_INT 1
66675: EQUAL
66676: IFFALSE 66686
// sRocket := true ;
66678: LD_ADDR_EXP 64
66682: PUSH
66683: LD_INT 1
66685: ST_TO_ADDR
// if p3 = 2 then
66686: LD_VAR 0 3
66690: PUSH
66691: LD_INT 2
66693: EQUAL
66694: IFFALSE 66704
// sSpeed := true ;
66696: LD_ADDR_EXP 63
66700: PUSH
66701: LD_INT 1
66703: ST_TO_ADDR
// if p3 = 3 then
66704: LD_VAR 0 3
66708: PUSH
66709: LD_INT 3
66711: EQUAL
66712: IFFALSE 66722
// sEngine := true ;
66714: LD_ADDR_EXP 65
66718: PUSH
66719: LD_INT 1
66721: ST_TO_ADDR
// if p3 = 4 then
66722: LD_VAR 0 3
66726: PUSH
66727: LD_INT 4
66729: EQUAL
66730: IFFALSE 66740
// sSpec := true ;
66732: LD_ADDR_EXP 62
66736: PUSH
66737: LD_INT 1
66739: ST_TO_ADDR
// if p3 = 5 then
66740: LD_VAR 0 3
66744: PUSH
66745: LD_INT 5
66747: EQUAL
66748: IFFALSE 66758
// sLevel := true ;
66750: LD_ADDR_EXP 66
66754: PUSH
66755: LD_INT 1
66757: ST_TO_ADDR
// if p3 = 6 then
66758: LD_VAR 0 3
66762: PUSH
66763: LD_INT 6
66765: EQUAL
66766: IFFALSE 66776
// sArmoury := true ;
66768: LD_ADDR_EXP 67
66772: PUSH
66773: LD_INT 1
66775: ST_TO_ADDR
// if p3 = 7 then
66776: LD_VAR 0 3
66780: PUSH
66781: LD_INT 7
66783: EQUAL
66784: IFFALSE 66794
// sRadar := true ;
66786: LD_ADDR_EXP 68
66790: PUSH
66791: LD_INT 1
66793: ST_TO_ADDR
// if p3 = 8 then
66794: LD_VAR 0 3
66798: PUSH
66799: LD_INT 8
66801: EQUAL
66802: IFFALSE 66812
// sBunker := true ;
66804: LD_ADDR_EXP 69
66808: PUSH
66809: LD_INT 1
66811: ST_TO_ADDR
// if p3 = 9 then
66812: LD_VAR 0 3
66816: PUSH
66817: LD_INT 9
66819: EQUAL
66820: IFFALSE 66830
// sHack := true ;
66822: LD_ADDR_EXP 70
66826: PUSH
66827: LD_INT 1
66829: ST_TO_ADDR
// if p3 = 10 then
66830: LD_VAR 0 3
66834: PUSH
66835: LD_INT 10
66837: EQUAL
66838: IFFALSE 66848
// sFire := true ;
66840: LD_ADDR_EXP 71
66844: PUSH
66845: LD_INT 1
66847: ST_TO_ADDR
// if p3 = 11 then
66848: LD_VAR 0 3
66852: PUSH
66853: LD_INT 11
66855: EQUAL
66856: IFFALSE 66866
// sRefresh := true ;
66858: LD_ADDR_EXP 72
66862: PUSH
66863: LD_INT 1
66865: ST_TO_ADDR
// if p3 = 12 then
66866: LD_VAR 0 3
66870: PUSH
66871: LD_INT 12
66873: EQUAL
66874: IFFALSE 66884
// sExp := true ;
66876: LD_ADDR_EXP 73
66880: PUSH
66881: LD_INT 1
66883: ST_TO_ADDR
// if p3 = 13 then
66884: LD_VAR 0 3
66888: PUSH
66889: LD_INT 13
66891: EQUAL
66892: IFFALSE 66902
// sDepot := true ;
66894: LD_ADDR_EXP 74
66898: PUSH
66899: LD_INT 1
66901: ST_TO_ADDR
// if p3 = 14 then
66902: LD_VAR 0 3
66906: PUSH
66907: LD_INT 14
66909: EQUAL
66910: IFFALSE 66920
// sFlag := true ;
66912: LD_ADDR_EXP 75
66916: PUSH
66917: LD_INT 1
66919: ST_TO_ADDR
// if p3 = 15 then
66920: LD_VAR 0 3
66924: PUSH
66925: LD_INT 15
66927: EQUAL
66928: IFFALSE 66938
// sKamikadze := true ;
66930: LD_ADDR_EXP 83
66934: PUSH
66935: LD_INT 1
66937: ST_TO_ADDR
// if p3 = 16 then
66938: LD_VAR 0 3
66942: PUSH
66943: LD_INT 16
66945: EQUAL
66946: IFFALSE 66956
// sTroll := true ;
66948: LD_ADDR_EXP 84
66952: PUSH
66953: LD_INT 1
66955: ST_TO_ADDR
// if p3 = 17 then
66956: LD_VAR 0 3
66960: PUSH
66961: LD_INT 17
66963: EQUAL
66964: IFFALSE 66974
// sSlow := true ;
66966: LD_ADDR_EXP 85
66970: PUSH
66971: LD_INT 1
66973: ST_TO_ADDR
// if p3 = 18 then
66974: LD_VAR 0 3
66978: PUSH
66979: LD_INT 18
66981: EQUAL
66982: IFFALSE 66992
// sLack := true ;
66984: LD_ADDR_EXP 86
66988: PUSH
66989: LD_INT 1
66991: ST_TO_ADDR
// if p3 = 19 then
66992: LD_VAR 0 3
66996: PUSH
66997: LD_INT 19
66999: EQUAL
67000: IFFALSE 67010
// sTank := true ;
67002: LD_ADDR_EXP 88
67006: PUSH
67007: LD_INT 1
67009: ST_TO_ADDR
// if p3 = 20 then
67010: LD_VAR 0 3
67014: PUSH
67015: LD_INT 20
67017: EQUAL
67018: IFFALSE 67028
// sRemote := true ;
67020: LD_ADDR_EXP 89
67024: PUSH
67025: LD_INT 1
67027: ST_TO_ADDR
// if p3 = 21 then
67028: LD_VAR 0 3
67032: PUSH
67033: LD_INT 21
67035: EQUAL
67036: IFFALSE 67046
// sPowell := true ;
67038: LD_ADDR_EXP 90
67042: PUSH
67043: LD_INT 1
67045: ST_TO_ADDR
// if p3 = 22 then
67046: LD_VAR 0 3
67050: PUSH
67051: LD_INT 22
67053: EQUAL
67054: IFFALSE 67064
// sTeleport := true ;
67056: LD_ADDR_EXP 93
67060: PUSH
67061: LD_INT 1
67063: ST_TO_ADDR
// if p3 = 23 then
67064: LD_VAR 0 3
67068: PUSH
67069: LD_INT 23
67071: EQUAL
67072: IFFALSE 67082
// sOilTower := true ;
67074: LD_ADDR_EXP 95
67078: PUSH
67079: LD_INT 1
67081: ST_TO_ADDR
// if p3 = 24 then
67082: LD_VAR 0 3
67086: PUSH
67087: LD_INT 24
67089: EQUAL
67090: IFFALSE 67100
// sShovel := true ;
67092: LD_ADDR_EXP 96
67096: PUSH
67097: LD_INT 1
67099: ST_TO_ADDR
// if p3 = 25 then
67100: LD_VAR 0 3
67104: PUSH
67105: LD_INT 25
67107: EQUAL
67108: IFFALSE 67118
// sSheik := true ;
67110: LD_ADDR_EXP 97
67114: PUSH
67115: LD_INT 1
67117: ST_TO_ADDR
// if p3 = 26 then
67118: LD_VAR 0 3
67122: PUSH
67123: LD_INT 26
67125: EQUAL
67126: IFFALSE 67136
// sEarthquake := true ;
67128: LD_ADDR_EXP 99
67132: PUSH
67133: LD_INT 1
67135: ST_TO_ADDR
// if p3 = 27 then
67136: LD_VAR 0 3
67140: PUSH
67141: LD_INT 27
67143: EQUAL
67144: IFFALSE 67154
// sAI := true ;
67146: LD_ADDR_EXP 100
67150: PUSH
67151: LD_INT 1
67153: ST_TO_ADDR
// if p3 = 28 then
67154: LD_VAR 0 3
67158: PUSH
67159: LD_INT 28
67161: EQUAL
67162: IFFALSE 67172
// sCargo := true ;
67164: LD_ADDR_EXP 103
67168: PUSH
67169: LD_INT 1
67171: ST_TO_ADDR
// if p3 = 29 then
67172: LD_VAR 0 3
67176: PUSH
67177: LD_INT 29
67179: EQUAL
67180: IFFALSE 67190
// sDLaser := true ;
67182: LD_ADDR_EXP 104
67186: PUSH
67187: LD_INT 1
67189: ST_TO_ADDR
// if p3 = 30 then
67190: LD_VAR 0 3
67194: PUSH
67195: LD_INT 30
67197: EQUAL
67198: IFFALSE 67208
// sExchange := true ;
67200: LD_ADDR_EXP 105
67204: PUSH
67205: LD_INT 1
67207: ST_TO_ADDR
// if p3 = 31 then
67208: LD_VAR 0 3
67212: PUSH
67213: LD_INT 31
67215: EQUAL
67216: IFFALSE 67226
// sFac := true ;
67218: LD_ADDR_EXP 106
67222: PUSH
67223: LD_INT 1
67225: ST_TO_ADDR
// if p3 = 32 then
67226: LD_VAR 0 3
67230: PUSH
67231: LD_INT 32
67233: EQUAL
67234: IFFALSE 67244
// sPower := true ;
67236: LD_ADDR_EXP 107
67240: PUSH
67241: LD_INT 1
67243: ST_TO_ADDR
// if p3 = 33 then
67244: LD_VAR 0 3
67248: PUSH
67249: LD_INT 33
67251: EQUAL
67252: IFFALSE 67262
// sRandom := true ;
67254: LD_ADDR_EXP 108
67258: PUSH
67259: LD_INT 1
67261: ST_TO_ADDR
// if p3 = 34 then
67262: LD_VAR 0 3
67266: PUSH
67267: LD_INT 34
67269: EQUAL
67270: IFFALSE 67280
// sShield := true ;
67272: LD_ADDR_EXP 109
67276: PUSH
67277: LD_INT 1
67279: ST_TO_ADDR
// if p3 = 35 then
67280: LD_VAR 0 3
67284: PUSH
67285: LD_INT 35
67287: EQUAL
67288: IFFALSE 67298
// sTime := true ;
67290: LD_ADDR_EXP 110
67294: PUSH
67295: LD_INT 1
67297: ST_TO_ADDR
// if p3 = 36 then
67298: LD_VAR 0 3
67302: PUSH
67303: LD_INT 36
67305: EQUAL
67306: IFFALSE 67316
// sTools := true ;
67308: LD_ADDR_EXP 111
67312: PUSH
67313: LD_INT 1
67315: ST_TO_ADDR
// if p3 = 101 then
67316: LD_VAR 0 3
67320: PUSH
67321: LD_INT 101
67323: EQUAL
67324: IFFALSE 67334
// sSold := true ;
67326: LD_ADDR_EXP 76
67330: PUSH
67331: LD_INT 1
67333: ST_TO_ADDR
// if p3 = 102 then
67334: LD_VAR 0 3
67338: PUSH
67339: LD_INT 102
67341: EQUAL
67342: IFFALSE 67352
// sDiff := true ;
67344: LD_ADDR_EXP 77
67348: PUSH
67349: LD_INT 1
67351: ST_TO_ADDR
// if p3 = 103 then
67352: LD_VAR 0 3
67356: PUSH
67357: LD_INT 103
67359: EQUAL
67360: IFFALSE 67370
// sFog := true ;
67362: LD_ADDR_EXP 80
67366: PUSH
67367: LD_INT 1
67369: ST_TO_ADDR
// if p3 = 104 then
67370: LD_VAR 0 3
67374: PUSH
67375: LD_INT 104
67377: EQUAL
67378: IFFALSE 67388
// sReset := true ;
67380: LD_ADDR_EXP 81
67384: PUSH
67385: LD_INT 1
67387: ST_TO_ADDR
// if p3 = 105 then
67388: LD_VAR 0 3
67392: PUSH
67393: LD_INT 105
67395: EQUAL
67396: IFFALSE 67406
// sSun := true ;
67398: LD_ADDR_EXP 82
67402: PUSH
67403: LD_INT 1
67405: ST_TO_ADDR
// if p3 = 106 then
67406: LD_VAR 0 3
67410: PUSH
67411: LD_INT 106
67413: EQUAL
67414: IFFALSE 67424
// sTiger := true ;
67416: LD_ADDR_EXP 78
67420: PUSH
67421: LD_INT 1
67423: ST_TO_ADDR
// if p3 = 107 then
67424: LD_VAR 0 3
67428: PUSH
67429: LD_INT 107
67431: EQUAL
67432: IFFALSE 67442
// sBomb := true ;
67434: LD_ADDR_EXP 79
67438: PUSH
67439: LD_INT 1
67441: ST_TO_ADDR
// if p3 = 108 then
67442: LD_VAR 0 3
67446: PUSH
67447: LD_INT 108
67449: EQUAL
67450: IFFALSE 67460
// sWound := true ;
67452: LD_ADDR_EXP 87
67456: PUSH
67457: LD_INT 1
67459: ST_TO_ADDR
// if p3 = 109 then
67460: LD_VAR 0 3
67464: PUSH
67465: LD_INT 109
67467: EQUAL
67468: IFFALSE 67478
// sBetray := true ;
67470: LD_ADDR_EXP 91
67474: PUSH
67475: LD_INT 1
67477: ST_TO_ADDR
// if p3 = 110 then
67478: LD_VAR 0 3
67482: PUSH
67483: LD_INT 110
67485: EQUAL
67486: IFFALSE 67496
// sContamin := true ;
67488: LD_ADDR_EXP 92
67492: PUSH
67493: LD_INT 1
67495: ST_TO_ADDR
// if p3 = 111 then
67496: LD_VAR 0 3
67500: PUSH
67501: LD_INT 111
67503: EQUAL
67504: IFFALSE 67514
// sOil := true ;
67506: LD_ADDR_EXP 94
67510: PUSH
67511: LD_INT 1
67513: ST_TO_ADDR
// if p3 = 112 then
67514: LD_VAR 0 3
67518: PUSH
67519: LD_INT 112
67521: EQUAL
67522: IFFALSE 67532
// sStu := true ;
67524: LD_ADDR_EXP 98
67528: PUSH
67529: LD_INT 1
67531: ST_TO_ADDR
// if p3 = 113 then
67532: LD_VAR 0 3
67536: PUSH
67537: LD_INT 113
67539: EQUAL
67540: IFFALSE 67550
// sBazooka := true ;
67542: LD_ADDR_EXP 101
67546: PUSH
67547: LD_INT 1
67549: ST_TO_ADDR
// if p3 = 114 then
67550: LD_VAR 0 3
67554: PUSH
67555: LD_INT 114
67557: EQUAL
67558: IFFALSE 67568
// sMortar := true ;
67560: LD_ADDR_EXP 102
67564: PUSH
67565: LD_INT 1
67567: ST_TO_ADDR
// if p3 = 115 then
67568: LD_VAR 0 3
67572: PUSH
67573: LD_INT 115
67575: EQUAL
67576: IFFALSE 67586
// sRanger := true ;
67578: LD_ADDR_EXP 112
67582: PUSH
67583: LD_INT 1
67585: ST_TO_ADDR
// if p3 = 116 then
67586: LD_VAR 0 3
67590: PUSH
67591: LD_INT 116
67593: EQUAL
67594: IFFALSE 67604
// sComputer := true ;
67596: LD_ADDR_EXP 113
67600: PUSH
67601: LD_INT 1
67603: ST_TO_ADDR
// if p3 = 117 then
67604: LD_VAR 0 3
67608: PUSH
67609: LD_INT 117
67611: EQUAL
67612: IFFALSE 67622
// s30 := true ;
67614: LD_ADDR_EXP 114
67618: PUSH
67619: LD_INT 1
67621: ST_TO_ADDR
// if p3 = 118 then
67622: LD_VAR 0 3
67626: PUSH
67627: LD_INT 118
67629: EQUAL
67630: IFFALSE 67640
// s60 := true ;
67632: LD_ADDR_EXP 115
67636: PUSH
67637: LD_INT 1
67639: ST_TO_ADDR
// end ; if p2 = stream_mode then
67640: LD_VAR 0 2
67644: PUSH
67645: LD_INT 101
67647: EQUAL
67648: IFFALSE 67776
// begin case p3 of 1 :
67650: LD_VAR 0 3
67654: PUSH
67655: LD_INT 1
67657: DOUBLE
67658: EQUAL
67659: IFTRUE 67663
67661: GO 67670
67663: POP
// hHackUnlimitedResources ; 2 :
67664: CALL 79874 0 0
67668: GO 67776
67670: LD_INT 2
67672: DOUBLE
67673: EQUAL
67674: IFTRUE 67678
67676: GO 67685
67678: POP
// hHackSetLevel10 ; 3 :
67679: CALL 80007 0 0
67683: GO 67776
67685: LD_INT 3
67687: DOUBLE
67688: EQUAL
67689: IFTRUE 67693
67691: GO 67700
67693: POP
// hHackSetLevel10YourUnits ; 4 :
67694: CALL 80092 0 0
67698: GO 67776
67700: LD_INT 4
67702: DOUBLE
67703: EQUAL
67704: IFTRUE 67708
67706: GO 67715
67708: POP
// hHackInvincible ; 5 :
67709: CALL 80540 0 0
67713: GO 67776
67715: LD_INT 5
67717: DOUBLE
67718: EQUAL
67719: IFTRUE 67723
67721: GO 67730
67723: POP
// hHackInvisible ; 6 :
67724: CALL 80651 0 0
67728: GO 67776
67730: LD_INT 6
67732: DOUBLE
67733: EQUAL
67734: IFTRUE 67738
67736: GO 67745
67738: POP
// hHackChangeYourSide ; 7 :
67739: CALL 80708 0 0
67743: GO 67776
67745: LD_INT 7
67747: DOUBLE
67748: EQUAL
67749: IFTRUE 67753
67751: GO 67760
67753: POP
// hHackChangeUnitSide ; 8 :
67754: CALL 80750 0 0
67758: GO 67776
67760: LD_INT 8
67762: DOUBLE
67763: EQUAL
67764: IFTRUE 67768
67766: GO 67775
67768: POP
// hHackFog ; end ;
67769: CALL 80851 0 0
67773: GO 67776
67775: POP
// end ; end ;
67776: LD_VAR 0 7
67780: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
67781: GO 67783
67783: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
67784: LD_STRING initStreamRollete();
67786: PPUSH
67787: CALL_OW 559
// InitStreamMode ;
67791: CALL 67803 0 0
// DefineStreamItems ( false ) ;
67795: LD_INT 0
67797: PPUSH
67798: CALL 68267 0 1
// end ;
67802: END
// function InitStreamMode ; begin
67803: LD_INT 0
67805: PPUSH
// streamModeActive := false ;
67806: LD_ADDR_EXP 59
67810: PUSH
67811: LD_INT 0
67813: ST_TO_ADDR
// normalCounter := 36 ;
67814: LD_ADDR_EXP 60
67818: PUSH
67819: LD_INT 36
67821: ST_TO_ADDR
// hardcoreCounter := 18 ;
67822: LD_ADDR_EXP 61
67826: PUSH
67827: LD_INT 18
67829: ST_TO_ADDR
// sRocket := false ;
67830: LD_ADDR_EXP 64
67834: PUSH
67835: LD_INT 0
67837: ST_TO_ADDR
// sSpeed := false ;
67838: LD_ADDR_EXP 63
67842: PUSH
67843: LD_INT 0
67845: ST_TO_ADDR
// sEngine := false ;
67846: LD_ADDR_EXP 65
67850: PUSH
67851: LD_INT 0
67853: ST_TO_ADDR
// sSpec := false ;
67854: LD_ADDR_EXP 62
67858: PUSH
67859: LD_INT 0
67861: ST_TO_ADDR
// sLevel := false ;
67862: LD_ADDR_EXP 66
67866: PUSH
67867: LD_INT 0
67869: ST_TO_ADDR
// sArmoury := false ;
67870: LD_ADDR_EXP 67
67874: PUSH
67875: LD_INT 0
67877: ST_TO_ADDR
// sRadar := false ;
67878: LD_ADDR_EXP 68
67882: PUSH
67883: LD_INT 0
67885: ST_TO_ADDR
// sBunker := false ;
67886: LD_ADDR_EXP 69
67890: PUSH
67891: LD_INT 0
67893: ST_TO_ADDR
// sHack := false ;
67894: LD_ADDR_EXP 70
67898: PUSH
67899: LD_INT 0
67901: ST_TO_ADDR
// sFire := false ;
67902: LD_ADDR_EXP 71
67906: PUSH
67907: LD_INT 0
67909: ST_TO_ADDR
// sRefresh := false ;
67910: LD_ADDR_EXP 72
67914: PUSH
67915: LD_INT 0
67917: ST_TO_ADDR
// sExp := false ;
67918: LD_ADDR_EXP 73
67922: PUSH
67923: LD_INT 0
67925: ST_TO_ADDR
// sDepot := false ;
67926: LD_ADDR_EXP 74
67930: PUSH
67931: LD_INT 0
67933: ST_TO_ADDR
// sFlag := false ;
67934: LD_ADDR_EXP 75
67938: PUSH
67939: LD_INT 0
67941: ST_TO_ADDR
// sKamikadze := false ;
67942: LD_ADDR_EXP 83
67946: PUSH
67947: LD_INT 0
67949: ST_TO_ADDR
// sTroll := false ;
67950: LD_ADDR_EXP 84
67954: PUSH
67955: LD_INT 0
67957: ST_TO_ADDR
// sSlow := false ;
67958: LD_ADDR_EXP 85
67962: PUSH
67963: LD_INT 0
67965: ST_TO_ADDR
// sLack := false ;
67966: LD_ADDR_EXP 86
67970: PUSH
67971: LD_INT 0
67973: ST_TO_ADDR
// sTank := false ;
67974: LD_ADDR_EXP 88
67978: PUSH
67979: LD_INT 0
67981: ST_TO_ADDR
// sRemote := false ;
67982: LD_ADDR_EXP 89
67986: PUSH
67987: LD_INT 0
67989: ST_TO_ADDR
// sPowell := false ;
67990: LD_ADDR_EXP 90
67994: PUSH
67995: LD_INT 0
67997: ST_TO_ADDR
// sTeleport := false ;
67998: LD_ADDR_EXP 93
68002: PUSH
68003: LD_INT 0
68005: ST_TO_ADDR
// sOilTower := false ;
68006: LD_ADDR_EXP 95
68010: PUSH
68011: LD_INT 0
68013: ST_TO_ADDR
// sShovel := false ;
68014: LD_ADDR_EXP 96
68018: PUSH
68019: LD_INT 0
68021: ST_TO_ADDR
// sSheik := false ;
68022: LD_ADDR_EXP 97
68026: PUSH
68027: LD_INT 0
68029: ST_TO_ADDR
// sEarthquake := false ;
68030: LD_ADDR_EXP 99
68034: PUSH
68035: LD_INT 0
68037: ST_TO_ADDR
// sAI := false ;
68038: LD_ADDR_EXP 100
68042: PUSH
68043: LD_INT 0
68045: ST_TO_ADDR
// sCargo := false ;
68046: LD_ADDR_EXP 103
68050: PUSH
68051: LD_INT 0
68053: ST_TO_ADDR
// sDLaser := false ;
68054: LD_ADDR_EXP 104
68058: PUSH
68059: LD_INT 0
68061: ST_TO_ADDR
// sExchange := false ;
68062: LD_ADDR_EXP 105
68066: PUSH
68067: LD_INT 0
68069: ST_TO_ADDR
// sFac := false ;
68070: LD_ADDR_EXP 106
68074: PUSH
68075: LD_INT 0
68077: ST_TO_ADDR
// sPower := false ;
68078: LD_ADDR_EXP 107
68082: PUSH
68083: LD_INT 0
68085: ST_TO_ADDR
// sRandom := false ;
68086: LD_ADDR_EXP 108
68090: PUSH
68091: LD_INT 0
68093: ST_TO_ADDR
// sShield := false ;
68094: LD_ADDR_EXP 109
68098: PUSH
68099: LD_INT 0
68101: ST_TO_ADDR
// sTime := false ;
68102: LD_ADDR_EXP 110
68106: PUSH
68107: LD_INT 0
68109: ST_TO_ADDR
// sTools := false ;
68110: LD_ADDR_EXP 111
68114: PUSH
68115: LD_INT 0
68117: ST_TO_ADDR
// sSold := false ;
68118: LD_ADDR_EXP 76
68122: PUSH
68123: LD_INT 0
68125: ST_TO_ADDR
// sDiff := false ;
68126: LD_ADDR_EXP 77
68130: PUSH
68131: LD_INT 0
68133: ST_TO_ADDR
// sFog := false ;
68134: LD_ADDR_EXP 80
68138: PUSH
68139: LD_INT 0
68141: ST_TO_ADDR
// sReset := false ;
68142: LD_ADDR_EXP 81
68146: PUSH
68147: LD_INT 0
68149: ST_TO_ADDR
// sSun := false ;
68150: LD_ADDR_EXP 82
68154: PUSH
68155: LD_INT 0
68157: ST_TO_ADDR
// sTiger := false ;
68158: LD_ADDR_EXP 78
68162: PUSH
68163: LD_INT 0
68165: ST_TO_ADDR
// sBomb := false ;
68166: LD_ADDR_EXP 79
68170: PUSH
68171: LD_INT 0
68173: ST_TO_ADDR
// sWound := false ;
68174: LD_ADDR_EXP 87
68178: PUSH
68179: LD_INT 0
68181: ST_TO_ADDR
// sBetray := false ;
68182: LD_ADDR_EXP 91
68186: PUSH
68187: LD_INT 0
68189: ST_TO_ADDR
// sContamin := false ;
68190: LD_ADDR_EXP 92
68194: PUSH
68195: LD_INT 0
68197: ST_TO_ADDR
// sOil := false ;
68198: LD_ADDR_EXP 94
68202: PUSH
68203: LD_INT 0
68205: ST_TO_ADDR
// sStu := false ;
68206: LD_ADDR_EXP 98
68210: PUSH
68211: LD_INT 0
68213: ST_TO_ADDR
// sBazooka := false ;
68214: LD_ADDR_EXP 101
68218: PUSH
68219: LD_INT 0
68221: ST_TO_ADDR
// sMortar := false ;
68222: LD_ADDR_EXP 102
68226: PUSH
68227: LD_INT 0
68229: ST_TO_ADDR
// sRanger := false ;
68230: LD_ADDR_EXP 112
68234: PUSH
68235: LD_INT 0
68237: ST_TO_ADDR
// sComputer := false ;
68238: LD_ADDR_EXP 113
68242: PUSH
68243: LD_INT 0
68245: ST_TO_ADDR
// s30 := false ;
68246: LD_ADDR_EXP 114
68250: PUSH
68251: LD_INT 0
68253: ST_TO_ADDR
// s60 := false ;
68254: LD_ADDR_EXP 115
68258: PUSH
68259: LD_INT 0
68261: ST_TO_ADDR
// end ;
68262: LD_VAR 0 1
68266: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
68267: LD_INT 0
68269: PPUSH
68270: PPUSH
68271: PPUSH
68272: PPUSH
68273: PPUSH
68274: PPUSH
68275: PPUSH
// result := [ ] ;
68276: LD_ADDR_VAR 0 2
68280: PUSH
68281: EMPTY
68282: ST_TO_ADDR
// if campaign_id = 1 then
68283: LD_OWVAR 69
68287: PUSH
68288: LD_INT 1
68290: EQUAL
68291: IFFALSE 71457
// begin case mission_number of 1 :
68293: LD_OWVAR 70
68297: PUSH
68298: LD_INT 1
68300: DOUBLE
68301: EQUAL
68302: IFTRUE 68306
68304: GO 68382
68306: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
68307: LD_ADDR_VAR 0 2
68311: PUSH
68312: LD_INT 2
68314: PUSH
68315: LD_INT 4
68317: PUSH
68318: LD_INT 11
68320: PUSH
68321: LD_INT 12
68323: PUSH
68324: LD_INT 15
68326: PUSH
68327: LD_INT 16
68329: PUSH
68330: LD_INT 22
68332: PUSH
68333: LD_INT 23
68335: PUSH
68336: LD_INT 26
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 101
68352: PUSH
68353: LD_INT 102
68355: PUSH
68356: LD_INT 106
68358: PUSH
68359: LD_INT 116
68361: PUSH
68362: LD_INT 117
68364: PUSH
68365: LD_INT 118
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: ST_TO_ADDR
68380: GO 71455
68382: LD_INT 2
68384: DOUBLE
68385: EQUAL
68386: IFTRUE 68390
68388: GO 68474
68390: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
68391: LD_ADDR_VAR 0 2
68395: PUSH
68396: LD_INT 2
68398: PUSH
68399: LD_INT 4
68401: PUSH
68402: LD_INT 11
68404: PUSH
68405: LD_INT 12
68407: PUSH
68408: LD_INT 15
68410: PUSH
68411: LD_INT 16
68413: PUSH
68414: LD_INT 22
68416: PUSH
68417: LD_INT 23
68419: PUSH
68420: LD_INT 26
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 101
68436: PUSH
68437: LD_INT 102
68439: PUSH
68440: LD_INT 105
68442: PUSH
68443: LD_INT 106
68445: PUSH
68446: LD_INT 108
68448: PUSH
68449: LD_INT 116
68451: PUSH
68452: LD_INT 117
68454: PUSH
68455: LD_INT 118
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: ST_TO_ADDR
68472: GO 71455
68474: LD_INT 3
68476: DOUBLE
68477: EQUAL
68478: IFTRUE 68482
68480: GO 68570
68482: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
68483: LD_ADDR_VAR 0 2
68487: PUSH
68488: LD_INT 2
68490: PUSH
68491: LD_INT 4
68493: PUSH
68494: LD_INT 5
68496: PUSH
68497: LD_INT 11
68499: PUSH
68500: LD_INT 12
68502: PUSH
68503: LD_INT 15
68505: PUSH
68506: LD_INT 16
68508: PUSH
68509: LD_INT 22
68511: PUSH
68512: LD_INT 26
68514: PUSH
68515: LD_INT 36
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 101
68532: PUSH
68533: LD_INT 102
68535: PUSH
68536: LD_INT 105
68538: PUSH
68539: LD_INT 106
68541: PUSH
68542: LD_INT 108
68544: PUSH
68545: LD_INT 116
68547: PUSH
68548: LD_INT 117
68550: PUSH
68551: LD_INT 118
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: ST_TO_ADDR
68568: GO 71455
68570: LD_INT 4
68572: DOUBLE
68573: EQUAL
68574: IFTRUE 68578
68576: GO 68674
68578: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
68579: LD_ADDR_VAR 0 2
68583: PUSH
68584: LD_INT 2
68586: PUSH
68587: LD_INT 4
68589: PUSH
68590: LD_INT 5
68592: PUSH
68593: LD_INT 8
68595: PUSH
68596: LD_INT 11
68598: PUSH
68599: LD_INT 12
68601: PUSH
68602: LD_INT 15
68604: PUSH
68605: LD_INT 16
68607: PUSH
68608: LD_INT 22
68610: PUSH
68611: LD_INT 23
68613: PUSH
68614: LD_INT 26
68616: PUSH
68617: LD_INT 36
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 101
68636: PUSH
68637: LD_INT 102
68639: PUSH
68640: LD_INT 105
68642: PUSH
68643: LD_INT 106
68645: PUSH
68646: LD_INT 108
68648: PUSH
68649: LD_INT 116
68651: PUSH
68652: LD_INT 117
68654: PUSH
68655: LD_INT 118
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: ST_TO_ADDR
68672: GO 71455
68674: LD_INT 5
68676: DOUBLE
68677: EQUAL
68678: IFTRUE 68682
68680: GO 68794
68682: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
68683: LD_ADDR_VAR 0 2
68687: PUSH
68688: LD_INT 2
68690: PUSH
68691: LD_INT 4
68693: PUSH
68694: LD_INT 5
68696: PUSH
68697: LD_INT 6
68699: PUSH
68700: LD_INT 8
68702: PUSH
68703: LD_INT 11
68705: PUSH
68706: LD_INT 12
68708: PUSH
68709: LD_INT 15
68711: PUSH
68712: LD_INT 16
68714: PUSH
68715: LD_INT 22
68717: PUSH
68718: LD_INT 23
68720: PUSH
68721: LD_INT 25
68723: PUSH
68724: LD_INT 26
68726: PUSH
68727: LD_INT 36
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 101
68748: PUSH
68749: LD_INT 102
68751: PUSH
68752: LD_INT 105
68754: PUSH
68755: LD_INT 106
68757: PUSH
68758: LD_INT 108
68760: PUSH
68761: LD_INT 109
68763: PUSH
68764: LD_INT 112
68766: PUSH
68767: LD_INT 116
68769: PUSH
68770: LD_INT 117
68772: PUSH
68773: LD_INT 118
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: ST_TO_ADDR
68792: GO 71455
68794: LD_INT 6
68796: DOUBLE
68797: EQUAL
68798: IFTRUE 68802
68800: GO 68934
68802: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
68803: LD_ADDR_VAR 0 2
68807: PUSH
68808: LD_INT 2
68810: PUSH
68811: LD_INT 4
68813: PUSH
68814: LD_INT 5
68816: PUSH
68817: LD_INT 6
68819: PUSH
68820: LD_INT 8
68822: PUSH
68823: LD_INT 11
68825: PUSH
68826: LD_INT 12
68828: PUSH
68829: LD_INT 15
68831: PUSH
68832: LD_INT 16
68834: PUSH
68835: LD_INT 20
68837: PUSH
68838: LD_INT 21
68840: PUSH
68841: LD_INT 22
68843: PUSH
68844: LD_INT 23
68846: PUSH
68847: LD_INT 25
68849: PUSH
68850: LD_INT 26
68852: PUSH
68853: LD_INT 30
68855: PUSH
68856: LD_INT 31
68858: PUSH
68859: LD_INT 32
68861: PUSH
68862: LD_INT 36
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 101
68888: PUSH
68889: LD_INT 102
68891: PUSH
68892: LD_INT 105
68894: PUSH
68895: LD_INT 106
68897: PUSH
68898: LD_INT 108
68900: PUSH
68901: LD_INT 109
68903: PUSH
68904: LD_INT 112
68906: PUSH
68907: LD_INT 116
68909: PUSH
68910: LD_INT 117
68912: PUSH
68913: LD_INT 118
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: ST_TO_ADDR
68932: GO 71455
68934: LD_INT 7
68936: DOUBLE
68937: EQUAL
68938: IFTRUE 68942
68940: GO 69054
68942: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
68943: LD_ADDR_VAR 0 2
68947: PUSH
68948: LD_INT 2
68950: PUSH
68951: LD_INT 4
68953: PUSH
68954: LD_INT 5
68956: PUSH
68957: LD_INT 7
68959: PUSH
68960: LD_INT 11
68962: PUSH
68963: LD_INT 12
68965: PUSH
68966: LD_INT 15
68968: PUSH
68969: LD_INT 16
68971: PUSH
68972: LD_INT 20
68974: PUSH
68975: LD_INT 21
68977: PUSH
68978: LD_INT 22
68980: PUSH
68981: LD_INT 23
68983: PUSH
68984: LD_INT 25
68986: PUSH
68987: LD_INT 26
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 101
69008: PUSH
69009: LD_INT 102
69011: PUSH
69012: LD_INT 103
69014: PUSH
69015: LD_INT 105
69017: PUSH
69018: LD_INT 106
69020: PUSH
69021: LD_INT 108
69023: PUSH
69024: LD_INT 112
69026: PUSH
69027: LD_INT 116
69029: PUSH
69030: LD_INT 117
69032: PUSH
69033: LD_INT 118
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: ST_TO_ADDR
69052: GO 71455
69054: LD_INT 8
69056: DOUBLE
69057: EQUAL
69058: IFTRUE 69062
69060: GO 69202
69062: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
69063: LD_ADDR_VAR 0 2
69067: PUSH
69068: LD_INT 2
69070: PUSH
69071: LD_INT 4
69073: PUSH
69074: LD_INT 5
69076: PUSH
69077: LD_INT 6
69079: PUSH
69080: LD_INT 7
69082: PUSH
69083: LD_INT 8
69085: PUSH
69086: LD_INT 11
69088: PUSH
69089: LD_INT 12
69091: PUSH
69092: LD_INT 15
69094: PUSH
69095: LD_INT 16
69097: PUSH
69098: LD_INT 20
69100: PUSH
69101: LD_INT 21
69103: PUSH
69104: LD_INT 22
69106: PUSH
69107: LD_INT 23
69109: PUSH
69110: LD_INT 25
69112: PUSH
69113: LD_INT 26
69115: PUSH
69116: LD_INT 30
69118: PUSH
69119: LD_INT 31
69121: PUSH
69122: LD_INT 32
69124: PUSH
69125: LD_INT 36
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 101
69152: PUSH
69153: LD_INT 102
69155: PUSH
69156: LD_INT 103
69158: PUSH
69159: LD_INT 105
69161: PUSH
69162: LD_INT 106
69164: PUSH
69165: LD_INT 108
69167: PUSH
69168: LD_INT 109
69170: PUSH
69171: LD_INT 112
69173: PUSH
69174: LD_INT 116
69176: PUSH
69177: LD_INT 117
69179: PUSH
69180: LD_INT 118
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: ST_TO_ADDR
69200: GO 71455
69202: LD_INT 9
69204: DOUBLE
69205: EQUAL
69206: IFTRUE 69210
69208: GO 69358
69210: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
69211: LD_ADDR_VAR 0 2
69215: PUSH
69216: LD_INT 2
69218: PUSH
69219: LD_INT 4
69221: PUSH
69222: LD_INT 5
69224: PUSH
69225: LD_INT 6
69227: PUSH
69228: LD_INT 7
69230: PUSH
69231: LD_INT 8
69233: PUSH
69234: LD_INT 11
69236: PUSH
69237: LD_INT 12
69239: PUSH
69240: LD_INT 15
69242: PUSH
69243: LD_INT 16
69245: PUSH
69246: LD_INT 20
69248: PUSH
69249: LD_INT 21
69251: PUSH
69252: LD_INT 22
69254: PUSH
69255: LD_INT 23
69257: PUSH
69258: LD_INT 25
69260: PUSH
69261: LD_INT 26
69263: PUSH
69264: LD_INT 28
69266: PUSH
69267: LD_INT 30
69269: PUSH
69270: LD_INT 31
69272: PUSH
69273: LD_INT 32
69275: PUSH
69276: LD_INT 36
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 101
69304: PUSH
69305: LD_INT 102
69307: PUSH
69308: LD_INT 103
69310: PUSH
69311: LD_INT 105
69313: PUSH
69314: LD_INT 106
69316: PUSH
69317: LD_INT 108
69319: PUSH
69320: LD_INT 109
69322: PUSH
69323: LD_INT 112
69325: PUSH
69326: LD_INT 114
69328: PUSH
69329: LD_INT 116
69331: PUSH
69332: LD_INT 117
69334: PUSH
69335: LD_INT 118
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: ST_TO_ADDR
69356: GO 71455
69358: LD_INT 10
69360: DOUBLE
69361: EQUAL
69362: IFTRUE 69366
69364: GO 69562
69366: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
69367: LD_ADDR_VAR 0 2
69371: PUSH
69372: LD_INT 2
69374: PUSH
69375: LD_INT 4
69377: PUSH
69378: LD_INT 5
69380: PUSH
69381: LD_INT 6
69383: PUSH
69384: LD_INT 7
69386: PUSH
69387: LD_INT 8
69389: PUSH
69390: LD_INT 9
69392: PUSH
69393: LD_INT 10
69395: PUSH
69396: LD_INT 11
69398: PUSH
69399: LD_INT 12
69401: PUSH
69402: LD_INT 13
69404: PUSH
69405: LD_INT 14
69407: PUSH
69408: LD_INT 15
69410: PUSH
69411: LD_INT 16
69413: PUSH
69414: LD_INT 17
69416: PUSH
69417: LD_INT 18
69419: PUSH
69420: LD_INT 19
69422: PUSH
69423: LD_INT 20
69425: PUSH
69426: LD_INT 21
69428: PUSH
69429: LD_INT 22
69431: PUSH
69432: LD_INT 23
69434: PUSH
69435: LD_INT 24
69437: PUSH
69438: LD_INT 25
69440: PUSH
69441: LD_INT 26
69443: PUSH
69444: LD_INT 28
69446: PUSH
69447: LD_INT 30
69449: PUSH
69450: LD_INT 31
69452: PUSH
69453: LD_INT 32
69455: PUSH
69456: LD_INT 36
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 101
69492: PUSH
69493: LD_INT 102
69495: PUSH
69496: LD_INT 103
69498: PUSH
69499: LD_INT 104
69501: PUSH
69502: LD_INT 105
69504: PUSH
69505: LD_INT 106
69507: PUSH
69508: LD_INT 107
69510: PUSH
69511: LD_INT 108
69513: PUSH
69514: LD_INT 109
69516: PUSH
69517: LD_INT 110
69519: PUSH
69520: LD_INT 111
69522: PUSH
69523: LD_INT 112
69525: PUSH
69526: LD_INT 114
69528: PUSH
69529: LD_INT 116
69531: PUSH
69532: LD_INT 117
69534: PUSH
69535: LD_INT 118
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: ST_TO_ADDR
69560: GO 71455
69562: LD_INT 11
69564: DOUBLE
69565: EQUAL
69566: IFTRUE 69570
69568: GO 69774
69570: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
69571: LD_ADDR_VAR 0 2
69575: PUSH
69576: LD_INT 2
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: LD_INT 4
69584: PUSH
69585: LD_INT 5
69587: PUSH
69588: LD_INT 6
69590: PUSH
69591: LD_INT 7
69593: PUSH
69594: LD_INT 8
69596: PUSH
69597: LD_INT 9
69599: PUSH
69600: LD_INT 10
69602: PUSH
69603: LD_INT 11
69605: PUSH
69606: LD_INT 12
69608: PUSH
69609: LD_INT 13
69611: PUSH
69612: LD_INT 14
69614: PUSH
69615: LD_INT 15
69617: PUSH
69618: LD_INT 16
69620: PUSH
69621: LD_INT 17
69623: PUSH
69624: LD_INT 18
69626: PUSH
69627: LD_INT 19
69629: PUSH
69630: LD_INT 20
69632: PUSH
69633: LD_INT 21
69635: PUSH
69636: LD_INT 22
69638: PUSH
69639: LD_INT 23
69641: PUSH
69642: LD_INT 24
69644: PUSH
69645: LD_INT 25
69647: PUSH
69648: LD_INT 26
69650: PUSH
69651: LD_INT 28
69653: PUSH
69654: LD_INT 30
69656: PUSH
69657: LD_INT 31
69659: PUSH
69660: LD_INT 32
69662: PUSH
69663: LD_INT 34
69665: PUSH
69666: LD_INT 36
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 101
69704: PUSH
69705: LD_INT 102
69707: PUSH
69708: LD_INT 103
69710: PUSH
69711: LD_INT 104
69713: PUSH
69714: LD_INT 105
69716: PUSH
69717: LD_INT 106
69719: PUSH
69720: LD_INT 107
69722: PUSH
69723: LD_INT 108
69725: PUSH
69726: LD_INT 109
69728: PUSH
69729: LD_INT 110
69731: PUSH
69732: LD_INT 111
69734: PUSH
69735: LD_INT 112
69737: PUSH
69738: LD_INT 114
69740: PUSH
69741: LD_INT 116
69743: PUSH
69744: LD_INT 117
69746: PUSH
69747: LD_INT 118
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: ST_TO_ADDR
69772: GO 71455
69774: LD_INT 12
69776: DOUBLE
69777: EQUAL
69778: IFTRUE 69782
69780: GO 70002
69782: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
69783: LD_ADDR_VAR 0 2
69787: PUSH
69788: LD_INT 1
69790: PUSH
69791: LD_INT 2
69793: PUSH
69794: LD_INT 3
69796: PUSH
69797: LD_INT 4
69799: PUSH
69800: LD_INT 5
69802: PUSH
69803: LD_INT 6
69805: PUSH
69806: LD_INT 7
69808: PUSH
69809: LD_INT 8
69811: PUSH
69812: LD_INT 9
69814: PUSH
69815: LD_INT 10
69817: PUSH
69818: LD_INT 11
69820: PUSH
69821: LD_INT 12
69823: PUSH
69824: LD_INT 13
69826: PUSH
69827: LD_INT 14
69829: PUSH
69830: LD_INT 15
69832: PUSH
69833: LD_INT 16
69835: PUSH
69836: LD_INT 17
69838: PUSH
69839: LD_INT 18
69841: PUSH
69842: LD_INT 19
69844: PUSH
69845: LD_INT 20
69847: PUSH
69848: LD_INT 21
69850: PUSH
69851: LD_INT 22
69853: PUSH
69854: LD_INT 23
69856: PUSH
69857: LD_INT 24
69859: PUSH
69860: LD_INT 25
69862: PUSH
69863: LD_INT 26
69865: PUSH
69866: LD_INT 27
69868: PUSH
69869: LD_INT 28
69871: PUSH
69872: LD_INT 30
69874: PUSH
69875: LD_INT 31
69877: PUSH
69878: LD_INT 32
69880: PUSH
69881: LD_INT 33
69883: PUSH
69884: LD_INT 34
69886: PUSH
69887: LD_INT 36
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 101
69928: PUSH
69929: LD_INT 102
69931: PUSH
69932: LD_INT 103
69934: PUSH
69935: LD_INT 104
69937: PUSH
69938: LD_INT 105
69940: PUSH
69941: LD_INT 106
69943: PUSH
69944: LD_INT 107
69946: PUSH
69947: LD_INT 108
69949: PUSH
69950: LD_INT 109
69952: PUSH
69953: LD_INT 110
69955: PUSH
69956: LD_INT 111
69958: PUSH
69959: LD_INT 112
69961: PUSH
69962: LD_INT 113
69964: PUSH
69965: LD_INT 114
69967: PUSH
69968: LD_INT 116
69970: PUSH
69971: LD_INT 117
69973: PUSH
69974: LD_INT 118
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: ST_TO_ADDR
70000: GO 71455
70002: LD_INT 13
70004: DOUBLE
70005: EQUAL
70006: IFTRUE 70010
70008: GO 70218
70010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
70011: LD_ADDR_VAR 0 2
70015: PUSH
70016: LD_INT 1
70018: PUSH
70019: LD_INT 2
70021: PUSH
70022: LD_INT 3
70024: PUSH
70025: LD_INT 4
70027: PUSH
70028: LD_INT 5
70030: PUSH
70031: LD_INT 8
70033: PUSH
70034: LD_INT 9
70036: PUSH
70037: LD_INT 10
70039: PUSH
70040: LD_INT 11
70042: PUSH
70043: LD_INT 12
70045: PUSH
70046: LD_INT 14
70048: PUSH
70049: LD_INT 15
70051: PUSH
70052: LD_INT 16
70054: PUSH
70055: LD_INT 17
70057: PUSH
70058: LD_INT 18
70060: PUSH
70061: LD_INT 19
70063: PUSH
70064: LD_INT 20
70066: PUSH
70067: LD_INT 21
70069: PUSH
70070: LD_INT 22
70072: PUSH
70073: LD_INT 23
70075: PUSH
70076: LD_INT 24
70078: PUSH
70079: LD_INT 25
70081: PUSH
70082: LD_INT 26
70084: PUSH
70085: LD_INT 27
70087: PUSH
70088: LD_INT 28
70090: PUSH
70091: LD_INT 30
70093: PUSH
70094: LD_INT 31
70096: PUSH
70097: LD_INT 32
70099: PUSH
70100: LD_INT 33
70102: PUSH
70103: LD_INT 34
70105: PUSH
70106: LD_INT 36
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 101
70144: PUSH
70145: LD_INT 102
70147: PUSH
70148: LD_INT 103
70150: PUSH
70151: LD_INT 104
70153: PUSH
70154: LD_INT 105
70156: PUSH
70157: LD_INT 106
70159: PUSH
70160: LD_INT 107
70162: PUSH
70163: LD_INT 108
70165: PUSH
70166: LD_INT 109
70168: PUSH
70169: LD_INT 110
70171: PUSH
70172: LD_INT 111
70174: PUSH
70175: LD_INT 112
70177: PUSH
70178: LD_INT 113
70180: PUSH
70181: LD_INT 114
70183: PUSH
70184: LD_INT 116
70186: PUSH
70187: LD_INT 117
70189: PUSH
70190: LD_INT 118
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: ST_TO_ADDR
70216: GO 71455
70218: LD_INT 14
70220: DOUBLE
70221: EQUAL
70222: IFTRUE 70226
70224: GO 70450
70226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
70227: LD_ADDR_VAR 0 2
70231: PUSH
70232: LD_INT 1
70234: PUSH
70235: LD_INT 2
70237: PUSH
70238: LD_INT 3
70240: PUSH
70241: LD_INT 4
70243: PUSH
70244: LD_INT 5
70246: PUSH
70247: LD_INT 6
70249: PUSH
70250: LD_INT 7
70252: PUSH
70253: LD_INT 8
70255: PUSH
70256: LD_INT 9
70258: PUSH
70259: LD_INT 10
70261: PUSH
70262: LD_INT 11
70264: PUSH
70265: LD_INT 12
70267: PUSH
70268: LD_INT 13
70270: PUSH
70271: LD_INT 14
70273: PUSH
70274: LD_INT 15
70276: PUSH
70277: LD_INT 16
70279: PUSH
70280: LD_INT 17
70282: PUSH
70283: LD_INT 18
70285: PUSH
70286: LD_INT 19
70288: PUSH
70289: LD_INT 20
70291: PUSH
70292: LD_INT 21
70294: PUSH
70295: LD_INT 22
70297: PUSH
70298: LD_INT 23
70300: PUSH
70301: LD_INT 24
70303: PUSH
70304: LD_INT 25
70306: PUSH
70307: LD_INT 26
70309: PUSH
70310: LD_INT 27
70312: PUSH
70313: LD_INT 28
70315: PUSH
70316: LD_INT 29
70318: PUSH
70319: LD_INT 30
70321: PUSH
70322: LD_INT 31
70324: PUSH
70325: LD_INT 32
70327: PUSH
70328: LD_INT 33
70330: PUSH
70331: LD_INT 34
70333: PUSH
70334: LD_INT 36
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 101
70376: PUSH
70377: LD_INT 102
70379: PUSH
70380: LD_INT 103
70382: PUSH
70383: LD_INT 104
70385: PUSH
70386: LD_INT 105
70388: PUSH
70389: LD_INT 106
70391: PUSH
70392: LD_INT 107
70394: PUSH
70395: LD_INT 108
70397: PUSH
70398: LD_INT 109
70400: PUSH
70401: LD_INT 110
70403: PUSH
70404: LD_INT 111
70406: PUSH
70407: LD_INT 112
70409: PUSH
70410: LD_INT 113
70412: PUSH
70413: LD_INT 114
70415: PUSH
70416: LD_INT 116
70418: PUSH
70419: LD_INT 117
70421: PUSH
70422: LD_INT 118
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: ST_TO_ADDR
70448: GO 71455
70450: LD_INT 15
70452: DOUBLE
70453: EQUAL
70454: IFTRUE 70458
70456: GO 70682
70458: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
70459: LD_ADDR_VAR 0 2
70463: PUSH
70464: LD_INT 1
70466: PUSH
70467: LD_INT 2
70469: PUSH
70470: LD_INT 3
70472: PUSH
70473: LD_INT 4
70475: PUSH
70476: LD_INT 5
70478: PUSH
70479: LD_INT 6
70481: PUSH
70482: LD_INT 7
70484: PUSH
70485: LD_INT 8
70487: PUSH
70488: LD_INT 9
70490: PUSH
70491: LD_INT 10
70493: PUSH
70494: LD_INT 11
70496: PUSH
70497: LD_INT 12
70499: PUSH
70500: LD_INT 13
70502: PUSH
70503: LD_INT 14
70505: PUSH
70506: LD_INT 15
70508: PUSH
70509: LD_INT 16
70511: PUSH
70512: LD_INT 17
70514: PUSH
70515: LD_INT 18
70517: PUSH
70518: LD_INT 19
70520: PUSH
70521: LD_INT 20
70523: PUSH
70524: LD_INT 21
70526: PUSH
70527: LD_INT 22
70529: PUSH
70530: LD_INT 23
70532: PUSH
70533: LD_INT 24
70535: PUSH
70536: LD_INT 25
70538: PUSH
70539: LD_INT 26
70541: PUSH
70542: LD_INT 27
70544: PUSH
70545: LD_INT 28
70547: PUSH
70548: LD_INT 29
70550: PUSH
70551: LD_INT 30
70553: PUSH
70554: LD_INT 31
70556: PUSH
70557: LD_INT 32
70559: PUSH
70560: LD_INT 33
70562: PUSH
70563: LD_INT 34
70565: PUSH
70566: LD_INT 36
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 101
70608: PUSH
70609: LD_INT 102
70611: PUSH
70612: LD_INT 103
70614: PUSH
70615: LD_INT 104
70617: PUSH
70618: LD_INT 105
70620: PUSH
70621: LD_INT 106
70623: PUSH
70624: LD_INT 107
70626: PUSH
70627: LD_INT 108
70629: PUSH
70630: LD_INT 109
70632: PUSH
70633: LD_INT 110
70635: PUSH
70636: LD_INT 111
70638: PUSH
70639: LD_INT 112
70641: PUSH
70642: LD_INT 113
70644: PUSH
70645: LD_INT 114
70647: PUSH
70648: LD_INT 116
70650: PUSH
70651: LD_INT 117
70653: PUSH
70654: LD_INT 118
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: ST_TO_ADDR
70680: GO 71455
70682: LD_INT 16
70684: DOUBLE
70685: EQUAL
70686: IFTRUE 70690
70688: GO 70826
70690: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
70691: LD_ADDR_VAR 0 2
70695: PUSH
70696: LD_INT 2
70698: PUSH
70699: LD_INT 4
70701: PUSH
70702: LD_INT 5
70704: PUSH
70705: LD_INT 7
70707: PUSH
70708: LD_INT 11
70710: PUSH
70711: LD_INT 12
70713: PUSH
70714: LD_INT 15
70716: PUSH
70717: LD_INT 16
70719: PUSH
70720: LD_INT 20
70722: PUSH
70723: LD_INT 21
70725: PUSH
70726: LD_INT 22
70728: PUSH
70729: LD_INT 23
70731: PUSH
70732: LD_INT 25
70734: PUSH
70735: LD_INT 26
70737: PUSH
70738: LD_INT 30
70740: PUSH
70741: LD_INT 31
70743: PUSH
70744: LD_INT 32
70746: PUSH
70747: LD_INT 33
70749: PUSH
70750: LD_INT 34
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 101
70776: PUSH
70777: LD_INT 102
70779: PUSH
70780: LD_INT 103
70782: PUSH
70783: LD_INT 106
70785: PUSH
70786: LD_INT 108
70788: PUSH
70789: LD_INT 112
70791: PUSH
70792: LD_INT 113
70794: PUSH
70795: LD_INT 114
70797: PUSH
70798: LD_INT 116
70800: PUSH
70801: LD_INT 117
70803: PUSH
70804: LD_INT 118
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: ST_TO_ADDR
70824: GO 71455
70826: LD_INT 17
70828: DOUBLE
70829: EQUAL
70830: IFTRUE 70834
70832: GO 71058
70834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
70835: LD_ADDR_VAR 0 2
70839: PUSH
70840: LD_INT 1
70842: PUSH
70843: LD_INT 2
70845: PUSH
70846: LD_INT 3
70848: PUSH
70849: LD_INT 4
70851: PUSH
70852: LD_INT 5
70854: PUSH
70855: LD_INT 6
70857: PUSH
70858: LD_INT 7
70860: PUSH
70861: LD_INT 8
70863: PUSH
70864: LD_INT 9
70866: PUSH
70867: LD_INT 10
70869: PUSH
70870: LD_INT 11
70872: PUSH
70873: LD_INT 12
70875: PUSH
70876: LD_INT 13
70878: PUSH
70879: LD_INT 14
70881: PUSH
70882: LD_INT 15
70884: PUSH
70885: LD_INT 16
70887: PUSH
70888: LD_INT 17
70890: PUSH
70891: LD_INT 18
70893: PUSH
70894: LD_INT 19
70896: PUSH
70897: LD_INT 20
70899: PUSH
70900: LD_INT 21
70902: PUSH
70903: LD_INT 22
70905: PUSH
70906: LD_INT 23
70908: PUSH
70909: LD_INT 24
70911: PUSH
70912: LD_INT 25
70914: PUSH
70915: LD_INT 26
70917: PUSH
70918: LD_INT 27
70920: PUSH
70921: LD_INT 28
70923: PUSH
70924: LD_INT 29
70926: PUSH
70927: LD_INT 30
70929: PUSH
70930: LD_INT 31
70932: PUSH
70933: LD_INT 32
70935: PUSH
70936: LD_INT 33
70938: PUSH
70939: LD_INT 34
70941: PUSH
70942: LD_INT 36
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 101
70984: PUSH
70985: LD_INT 102
70987: PUSH
70988: LD_INT 103
70990: PUSH
70991: LD_INT 104
70993: PUSH
70994: LD_INT 105
70996: PUSH
70997: LD_INT 106
70999: PUSH
71000: LD_INT 107
71002: PUSH
71003: LD_INT 108
71005: PUSH
71006: LD_INT 109
71008: PUSH
71009: LD_INT 110
71011: PUSH
71012: LD_INT 111
71014: PUSH
71015: LD_INT 112
71017: PUSH
71018: LD_INT 113
71020: PUSH
71021: LD_INT 114
71023: PUSH
71024: LD_INT 116
71026: PUSH
71027: LD_INT 117
71029: PUSH
71030: LD_INT 118
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: ST_TO_ADDR
71056: GO 71455
71058: LD_INT 18
71060: DOUBLE
71061: EQUAL
71062: IFTRUE 71066
71064: GO 71214
71066: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
71067: LD_ADDR_VAR 0 2
71071: PUSH
71072: LD_INT 2
71074: PUSH
71075: LD_INT 4
71077: PUSH
71078: LD_INT 5
71080: PUSH
71081: LD_INT 7
71083: PUSH
71084: LD_INT 11
71086: PUSH
71087: LD_INT 12
71089: PUSH
71090: LD_INT 15
71092: PUSH
71093: LD_INT 16
71095: PUSH
71096: LD_INT 20
71098: PUSH
71099: LD_INT 21
71101: PUSH
71102: LD_INT 22
71104: PUSH
71105: LD_INT 23
71107: PUSH
71108: LD_INT 25
71110: PUSH
71111: LD_INT 26
71113: PUSH
71114: LD_INT 30
71116: PUSH
71117: LD_INT 31
71119: PUSH
71120: LD_INT 32
71122: PUSH
71123: LD_INT 33
71125: PUSH
71126: LD_INT 34
71128: PUSH
71129: LD_INT 35
71131: PUSH
71132: LD_INT 36
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 101
71160: PUSH
71161: LD_INT 102
71163: PUSH
71164: LD_INT 103
71166: PUSH
71167: LD_INT 106
71169: PUSH
71170: LD_INT 108
71172: PUSH
71173: LD_INT 112
71175: PUSH
71176: LD_INT 113
71178: PUSH
71179: LD_INT 114
71181: PUSH
71182: LD_INT 115
71184: PUSH
71185: LD_INT 116
71187: PUSH
71188: LD_INT 117
71190: PUSH
71191: LD_INT 118
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: ST_TO_ADDR
71212: GO 71455
71214: LD_INT 19
71216: DOUBLE
71217: EQUAL
71218: IFTRUE 71222
71220: GO 71454
71222: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
71223: LD_ADDR_VAR 0 2
71227: PUSH
71228: LD_INT 1
71230: PUSH
71231: LD_INT 2
71233: PUSH
71234: LD_INT 3
71236: PUSH
71237: LD_INT 4
71239: PUSH
71240: LD_INT 5
71242: PUSH
71243: LD_INT 6
71245: PUSH
71246: LD_INT 7
71248: PUSH
71249: LD_INT 8
71251: PUSH
71252: LD_INT 9
71254: PUSH
71255: LD_INT 10
71257: PUSH
71258: LD_INT 11
71260: PUSH
71261: LD_INT 12
71263: PUSH
71264: LD_INT 13
71266: PUSH
71267: LD_INT 14
71269: PUSH
71270: LD_INT 15
71272: PUSH
71273: LD_INT 16
71275: PUSH
71276: LD_INT 17
71278: PUSH
71279: LD_INT 18
71281: PUSH
71282: LD_INT 19
71284: PUSH
71285: LD_INT 20
71287: PUSH
71288: LD_INT 21
71290: PUSH
71291: LD_INT 22
71293: PUSH
71294: LD_INT 23
71296: PUSH
71297: LD_INT 24
71299: PUSH
71300: LD_INT 25
71302: PUSH
71303: LD_INT 26
71305: PUSH
71306: LD_INT 27
71308: PUSH
71309: LD_INT 28
71311: PUSH
71312: LD_INT 29
71314: PUSH
71315: LD_INT 30
71317: PUSH
71318: LD_INT 31
71320: PUSH
71321: LD_INT 32
71323: PUSH
71324: LD_INT 33
71326: PUSH
71327: LD_INT 34
71329: PUSH
71330: LD_INT 35
71332: PUSH
71333: LD_INT 36
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 101
71376: PUSH
71377: LD_INT 102
71379: PUSH
71380: LD_INT 103
71382: PUSH
71383: LD_INT 104
71385: PUSH
71386: LD_INT 105
71388: PUSH
71389: LD_INT 106
71391: PUSH
71392: LD_INT 107
71394: PUSH
71395: LD_INT 108
71397: PUSH
71398: LD_INT 109
71400: PUSH
71401: LD_INT 110
71403: PUSH
71404: LD_INT 111
71406: PUSH
71407: LD_INT 112
71409: PUSH
71410: LD_INT 113
71412: PUSH
71413: LD_INT 114
71415: PUSH
71416: LD_INT 115
71418: PUSH
71419: LD_INT 116
71421: PUSH
71422: LD_INT 117
71424: PUSH
71425: LD_INT 118
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: ST_TO_ADDR
71452: GO 71455
71454: POP
// end else
71455: GO 71686
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
71457: LD_ADDR_VAR 0 2
71461: PUSH
71462: LD_INT 1
71464: PUSH
71465: LD_INT 2
71467: PUSH
71468: LD_INT 3
71470: PUSH
71471: LD_INT 4
71473: PUSH
71474: LD_INT 5
71476: PUSH
71477: LD_INT 6
71479: PUSH
71480: LD_INT 7
71482: PUSH
71483: LD_INT 8
71485: PUSH
71486: LD_INT 9
71488: PUSH
71489: LD_INT 10
71491: PUSH
71492: LD_INT 11
71494: PUSH
71495: LD_INT 12
71497: PUSH
71498: LD_INT 13
71500: PUSH
71501: LD_INT 14
71503: PUSH
71504: LD_INT 15
71506: PUSH
71507: LD_INT 16
71509: PUSH
71510: LD_INT 17
71512: PUSH
71513: LD_INT 18
71515: PUSH
71516: LD_INT 19
71518: PUSH
71519: LD_INT 20
71521: PUSH
71522: LD_INT 21
71524: PUSH
71525: LD_INT 22
71527: PUSH
71528: LD_INT 23
71530: PUSH
71531: LD_INT 24
71533: PUSH
71534: LD_INT 25
71536: PUSH
71537: LD_INT 26
71539: PUSH
71540: LD_INT 27
71542: PUSH
71543: LD_INT 28
71545: PUSH
71546: LD_INT 29
71548: PUSH
71549: LD_INT 30
71551: PUSH
71552: LD_INT 31
71554: PUSH
71555: LD_INT 32
71557: PUSH
71558: LD_INT 33
71560: PUSH
71561: LD_INT 34
71563: PUSH
71564: LD_INT 35
71566: PUSH
71567: LD_INT 36
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 101
71610: PUSH
71611: LD_INT 102
71613: PUSH
71614: LD_INT 103
71616: PUSH
71617: LD_INT 104
71619: PUSH
71620: LD_INT 105
71622: PUSH
71623: LD_INT 106
71625: PUSH
71626: LD_INT 107
71628: PUSH
71629: LD_INT 108
71631: PUSH
71632: LD_INT 109
71634: PUSH
71635: LD_INT 110
71637: PUSH
71638: LD_INT 111
71640: PUSH
71641: LD_INT 112
71643: PUSH
71644: LD_INT 113
71646: PUSH
71647: LD_INT 114
71649: PUSH
71650: LD_INT 115
71652: PUSH
71653: LD_INT 116
71655: PUSH
71656: LD_INT 117
71658: PUSH
71659: LD_INT 118
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: ST_TO_ADDR
// if result then
71686: LD_VAR 0 2
71690: IFFALSE 72476
// begin normal :=  ;
71692: LD_ADDR_VAR 0 5
71696: PUSH
71697: LD_STRING 
71699: ST_TO_ADDR
// hardcore :=  ;
71700: LD_ADDR_VAR 0 6
71704: PUSH
71705: LD_STRING 
71707: ST_TO_ADDR
// active :=  ;
71708: LD_ADDR_VAR 0 7
71712: PUSH
71713: LD_STRING 
71715: ST_TO_ADDR
// for i = 1 to normalCounter do
71716: LD_ADDR_VAR 0 8
71720: PUSH
71721: DOUBLE
71722: LD_INT 1
71724: DEC
71725: ST_TO_ADDR
71726: LD_EXP 60
71730: PUSH
71731: FOR_TO
71732: IFFALSE 71833
// begin tmp := 0 ;
71734: LD_ADDR_VAR 0 3
71738: PUSH
71739: LD_STRING 0
71741: ST_TO_ADDR
// if result [ 1 ] then
71742: LD_VAR 0 2
71746: PUSH
71747: LD_INT 1
71749: ARRAY
71750: IFFALSE 71815
// if result [ 1 ] [ 1 ] = i then
71752: LD_VAR 0 2
71756: PUSH
71757: LD_INT 1
71759: ARRAY
71760: PUSH
71761: LD_INT 1
71763: ARRAY
71764: PUSH
71765: LD_VAR 0 8
71769: EQUAL
71770: IFFALSE 71815
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
71772: LD_ADDR_VAR 0 2
71776: PUSH
71777: LD_VAR 0 2
71781: PPUSH
71782: LD_INT 1
71784: PPUSH
71785: LD_VAR 0 2
71789: PUSH
71790: LD_INT 1
71792: ARRAY
71793: PPUSH
71794: LD_INT 1
71796: PPUSH
71797: CALL_OW 3
71801: PPUSH
71802: CALL_OW 1
71806: ST_TO_ADDR
// tmp := 1 ;
71807: LD_ADDR_VAR 0 3
71811: PUSH
71812: LD_STRING 1
71814: ST_TO_ADDR
// end ; normal := normal & tmp ;
71815: LD_ADDR_VAR 0 5
71819: PUSH
71820: LD_VAR 0 5
71824: PUSH
71825: LD_VAR 0 3
71829: STR
71830: ST_TO_ADDR
// end ;
71831: GO 71731
71833: POP
71834: POP
// for i = 1 to hardcoreCounter do
71835: LD_ADDR_VAR 0 8
71839: PUSH
71840: DOUBLE
71841: LD_INT 1
71843: DEC
71844: ST_TO_ADDR
71845: LD_EXP 61
71849: PUSH
71850: FOR_TO
71851: IFFALSE 71956
// begin tmp := 0 ;
71853: LD_ADDR_VAR 0 3
71857: PUSH
71858: LD_STRING 0
71860: ST_TO_ADDR
// if result [ 2 ] then
71861: LD_VAR 0 2
71865: PUSH
71866: LD_INT 2
71868: ARRAY
71869: IFFALSE 71938
// if result [ 2 ] [ 1 ] = 100 + i then
71871: LD_VAR 0 2
71875: PUSH
71876: LD_INT 2
71878: ARRAY
71879: PUSH
71880: LD_INT 1
71882: ARRAY
71883: PUSH
71884: LD_INT 100
71886: PUSH
71887: LD_VAR 0 8
71891: PLUS
71892: EQUAL
71893: IFFALSE 71938
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
71895: LD_ADDR_VAR 0 2
71899: PUSH
71900: LD_VAR 0 2
71904: PPUSH
71905: LD_INT 2
71907: PPUSH
71908: LD_VAR 0 2
71912: PUSH
71913: LD_INT 2
71915: ARRAY
71916: PPUSH
71917: LD_INT 1
71919: PPUSH
71920: CALL_OW 3
71924: PPUSH
71925: CALL_OW 1
71929: ST_TO_ADDR
// tmp := 1 ;
71930: LD_ADDR_VAR 0 3
71934: PUSH
71935: LD_STRING 1
71937: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
71938: LD_ADDR_VAR 0 6
71942: PUSH
71943: LD_VAR 0 6
71947: PUSH
71948: LD_VAR 0 3
71952: STR
71953: ST_TO_ADDR
// end ;
71954: GO 71850
71956: POP
71957: POP
// if isGameLoad then
71958: LD_VAR 0 1
71962: IFFALSE 72437
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
71964: LD_ADDR_VAR 0 4
71968: PUSH
71969: LD_EXP 64
71973: PUSH
71974: LD_EXP 63
71978: PUSH
71979: LD_EXP 65
71983: PUSH
71984: LD_EXP 62
71988: PUSH
71989: LD_EXP 66
71993: PUSH
71994: LD_EXP 67
71998: PUSH
71999: LD_EXP 68
72003: PUSH
72004: LD_EXP 69
72008: PUSH
72009: LD_EXP 70
72013: PUSH
72014: LD_EXP 71
72018: PUSH
72019: LD_EXP 72
72023: PUSH
72024: LD_EXP 73
72028: PUSH
72029: LD_EXP 74
72033: PUSH
72034: LD_EXP 75
72038: PUSH
72039: LD_EXP 83
72043: PUSH
72044: LD_EXP 84
72048: PUSH
72049: LD_EXP 85
72053: PUSH
72054: LD_EXP 86
72058: PUSH
72059: LD_EXP 88
72063: PUSH
72064: LD_EXP 89
72068: PUSH
72069: LD_EXP 90
72073: PUSH
72074: LD_EXP 93
72078: PUSH
72079: LD_EXP 95
72083: PUSH
72084: LD_EXP 96
72088: PUSH
72089: LD_EXP 97
72093: PUSH
72094: LD_EXP 99
72098: PUSH
72099: LD_EXP 100
72103: PUSH
72104: LD_EXP 103
72108: PUSH
72109: LD_EXP 104
72113: PUSH
72114: LD_EXP 105
72118: PUSH
72119: LD_EXP 106
72123: PUSH
72124: LD_EXP 107
72128: PUSH
72129: LD_EXP 108
72133: PUSH
72134: LD_EXP 109
72138: PUSH
72139: LD_EXP 110
72143: PUSH
72144: LD_EXP 111
72148: PUSH
72149: LD_EXP 76
72153: PUSH
72154: LD_EXP 77
72158: PUSH
72159: LD_EXP 80
72163: PUSH
72164: LD_EXP 81
72168: PUSH
72169: LD_EXP 82
72173: PUSH
72174: LD_EXP 78
72178: PUSH
72179: LD_EXP 79
72183: PUSH
72184: LD_EXP 87
72188: PUSH
72189: LD_EXP 91
72193: PUSH
72194: LD_EXP 92
72198: PUSH
72199: LD_EXP 94
72203: PUSH
72204: LD_EXP 98
72208: PUSH
72209: LD_EXP 101
72213: PUSH
72214: LD_EXP 102
72218: PUSH
72219: LD_EXP 112
72223: PUSH
72224: LD_EXP 113
72228: PUSH
72229: LD_EXP 114
72233: PUSH
72234: LD_EXP 115
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: ST_TO_ADDR
// tmp :=  ;
72295: LD_ADDR_VAR 0 3
72299: PUSH
72300: LD_STRING 
72302: ST_TO_ADDR
// for i = 1 to normalCounter do
72303: LD_ADDR_VAR 0 8
72307: PUSH
72308: DOUBLE
72309: LD_INT 1
72311: DEC
72312: ST_TO_ADDR
72313: LD_EXP 60
72317: PUSH
72318: FOR_TO
72319: IFFALSE 72355
// begin if flags [ i ] then
72321: LD_VAR 0 4
72325: PUSH
72326: LD_VAR 0 8
72330: ARRAY
72331: IFFALSE 72353
// tmp := tmp & i & ; ;
72333: LD_ADDR_VAR 0 3
72337: PUSH
72338: LD_VAR 0 3
72342: PUSH
72343: LD_VAR 0 8
72347: STR
72348: PUSH
72349: LD_STRING ;
72351: STR
72352: ST_TO_ADDR
// end ;
72353: GO 72318
72355: POP
72356: POP
// for i = 1 to hardcoreCounter do
72357: LD_ADDR_VAR 0 8
72361: PUSH
72362: DOUBLE
72363: LD_INT 1
72365: DEC
72366: ST_TO_ADDR
72367: LD_EXP 61
72371: PUSH
72372: FOR_TO
72373: IFFALSE 72419
// begin if flags [ normalCounter + i ] then
72375: LD_VAR 0 4
72379: PUSH
72380: LD_EXP 60
72384: PUSH
72385: LD_VAR 0 8
72389: PLUS
72390: ARRAY
72391: IFFALSE 72417
// tmp := tmp & ( 100 + i ) & ; ;
72393: LD_ADDR_VAR 0 3
72397: PUSH
72398: LD_VAR 0 3
72402: PUSH
72403: LD_INT 100
72405: PUSH
72406: LD_VAR 0 8
72410: PLUS
72411: STR
72412: PUSH
72413: LD_STRING ;
72415: STR
72416: ST_TO_ADDR
// end ;
72417: GO 72372
72419: POP
72420: POP
// if tmp then
72421: LD_VAR 0 3
72425: IFFALSE 72437
// active := tmp ;
72427: LD_ADDR_VAR 0 7
72431: PUSH
72432: LD_VAR 0 3
72436: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
72437: LD_STRING getStreamItemsFromMission("
72439: PUSH
72440: LD_VAR 0 5
72444: STR
72445: PUSH
72446: LD_STRING ","
72448: STR
72449: PUSH
72450: LD_VAR 0 6
72454: STR
72455: PUSH
72456: LD_STRING ","
72458: STR
72459: PUSH
72460: LD_VAR 0 7
72464: STR
72465: PUSH
72466: LD_STRING ")
72468: STR
72469: PPUSH
72470: CALL_OW 559
// end else
72474: GO 72483
// ToLua ( getStreamItemsFromMission("","","") ) ;
72476: LD_STRING getStreamItemsFromMission("","","")
72478: PPUSH
72479: CALL_OW 559
// end ;
72483: LD_VAR 0 2
72487: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
72488: LD_EXP 59
72492: PUSH
72493: LD_EXP 64
72497: AND
72498: IFFALSE 72622
72500: GO 72502
72502: DISABLE
72503: LD_INT 0
72505: PPUSH
72506: PPUSH
// begin enable ;
72507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
72508: LD_ADDR_VAR 0 2
72512: PUSH
72513: LD_INT 22
72515: PUSH
72516: LD_OWVAR 2
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 2
72527: PUSH
72528: LD_INT 34
72530: PUSH
72531: LD_INT 7
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 34
72540: PUSH
72541: LD_INT 45
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 34
72550: PUSH
72551: LD_INT 28
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 34
72560: PUSH
72561: LD_INT 47
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PPUSH
72579: CALL_OW 69
72583: ST_TO_ADDR
// if not tmp then
72584: LD_VAR 0 2
72588: NOT
72589: IFFALSE 72593
// exit ;
72591: GO 72622
// for i in tmp do
72593: LD_ADDR_VAR 0 1
72597: PUSH
72598: LD_VAR 0 2
72602: PUSH
72603: FOR_IN
72604: IFFALSE 72620
// begin SetLives ( i , 0 ) ;
72606: LD_VAR 0 1
72610: PPUSH
72611: LD_INT 0
72613: PPUSH
72614: CALL_OW 234
// end ;
72618: GO 72603
72620: POP
72621: POP
// end ;
72622: PPOPN 2
72624: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
72625: LD_EXP 59
72629: PUSH
72630: LD_EXP 65
72634: AND
72635: IFFALSE 72719
72637: GO 72639
72639: DISABLE
72640: LD_INT 0
72642: PPUSH
72643: PPUSH
// begin enable ;
72644: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
72645: LD_ADDR_VAR 0 2
72649: PUSH
72650: LD_INT 22
72652: PUSH
72653: LD_OWVAR 2
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: LD_INT 32
72664: PUSH
72665: LD_INT 3
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PPUSH
72676: CALL_OW 69
72680: ST_TO_ADDR
// if not tmp then
72681: LD_VAR 0 2
72685: NOT
72686: IFFALSE 72690
// exit ;
72688: GO 72719
// for i in tmp do
72690: LD_ADDR_VAR 0 1
72694: PUSH
72695: LD_VAR 0 2
72699: PUSH
72700: FOR_IN
72701: IFFALSE 72717
// begin SetLives ( i , 0 ) ;
72703: LD_VAR 0 1
72707: PPUSH
72708: LD_INT 0
72710: PPUSH
72711: CALL_OW 234
// end ;
72715: GO 72700
72717: POP
72718: POP
// end ;
72719: PPOPN 2
72721: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
72722: LD_EXP 59
72726: PUSH
72727: LD_EXP 62
72731: AND
72732: IFFALSE 72825
72734: GO 72736
72736: DISABLE
72737: LD_INT 0
72739: PPUSH
// begin enable ;
72740: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
72741: LD_ADDR_VAR 0 1
72745: PUSH
72746: LD_INT 22
72748: PUSH
72749: LD_OWVAR 2
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 2
72760: PUSH
72761: LD_INT 25
72763: PUSH
72764: LD_INT 5
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: LD_INT 25
72773: PUSH
72774: LD_INT 9
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 25
72783: PUSH
72784: LD_INT 8
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PPUSH
72801: CALL_OW 69
72805: PUSH
72806: FOR_IN
72807: IFFALSE 72823
// begin SetClass ( i , 1 ) ;
72809: LD_VAR 0 1
72813: PPUSH
72814: LD_INT 1
72816: PPUSH
72817: CALL_OW 336
// end ;
72821: GO 72806
72823: POP
72824: POP
// end ;
72825: PPOPN 1
72827: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
72828: LD_EXP 59
72832: PUSH
72833: LD_EXP 63
72837: AND
72838: PUSH
72839: LD_OWVAR 65
72843: PUSH
72844: LD_INT 7
72846: LESS
72847: AND
72848: IFFALSE 72862
72850: GO 72852
72852: DISABLE
// begin enable ;
72853: ENABLE
// game_speed := 7 ;
72854: LD_ADDR_OWVAR 65
72858: PUSH
72859: LD_INT 7
72861: ST_TO_ADDR
// end ;
72862: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
72863: LD_EXP 59
72867: PUSH
72868: LD_EXP 66
72872: AND
72873: IFFALSE 73075
72875: GO 72877
72877: DISABLE
72878: LD_INT 0
72880: PPUSH
72881: PPUSH
72882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72883: LD_ADDR_VAR 0 3
72887: PUSH
72888: LD_INT 81
72890: PUSH
72891: LD_OWVAR 2
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 21
72902: PUSH
72903: LD_INT 1
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: PPUSH
72914: CALL_OW 69
72918: ST_TO_ADDR
// if not tmp then
72919: LD_VAR 0 3
72923: NOT
72924: IFFALSE 72928
// exit ;
72926: GO 73075
// if tmp > 5 then
72928: LD_VAR 0 3
72932: PUSH
72933: LD_INT 5
72935: GREATER
72936: IFFALSE 72948
// k := 5 else
72938: LD_ADDR_VAR 0 2
72942: PUSH
72943: LD_INT 5
72945: ST_TO_ADDR
72946: GO 72958
// k := tmp ;
72948: LD_ADDR_VAR 0 2
72952: PUSH
72953: LD_VAR 0 3
72957: ST_TO_ADDR
// for i := 1 to k do
72958: LD_ADDR_VAR 0 1
72962: PUSH
72963: DOUBLE
72964: LD_INT 1
72966: DEC
72967: ST_TO_ADDR
72968: LD_VAR 0 2
72972: PUSH
72973: FOR_TO
72974: IFFALSE 73073
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
72976: LD_VAR 0 3
72980: PUSH
72981: LD_VAR 0 1
72985: ARRAY
72986: PPUSH
72987: LD_VAR 0 1
72991: PUSH
72992: LD_INT 4
72994: MOD
72995: PUSH
72996: LD_INT 1
72998: PLUS
72999: PPUSH
73000: CALL_OW 259
73004: PUSH
73005: LD_INT 10
73007: LESS
73008: IFFALSE 73071
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73010: LD_VAR 0 3
73014: PUSH
73015: LD_VAR 0 1
73019: ARRAY
73020: PPUSH
73021: LD_VAR 0 1
73025: PUSH
73026: LD_INT 4
73028: MOD
73029: PUSH
73030: LD_INT 1
73032: PLUS
73033: PPUSH
73034: LD_VAR 0 3
73038: PUSH
73039: LD_VAR 0 1
73043: ARRAY
73044: PPUSH
73045: LD_VAR 0 1
73049: PUSH
73050: LD_INT 4
73052: MOD
73053: PUSH
73054: LD_INT 1
73056: PLUS
73057: PPUSH
73058: CALL_OW 259
73062: PUSH
73063: LD_INT 1
73065: PLUS
73066: PPUSH
73067: CALL_OW 237
73071: GO 72973
73073: POP
73074: POP
// end ;
73075: PPOPN 3
73077: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73078: LD_EXP 59
73082: PUSH
73083: LD_EXP 67
73087: AND
73088: IFFALSE 73108
73090: GO 73092
73092: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73093: LD_INT 4
73095: PPUSH
73096: LD_OWVAR 2
73100: PPUSH
73101: LD_INT 0
73103: PPUSH
73104: CALL_OW 324
73108: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73109: LD_EXP 59
73113: PUSH
73114: LD_EXP 96
73118: AND
73119: IFFALSE 73139
73121: GO 73123
73123: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73124: LD_INT 19
73126: PPUSH
73127: LD_OWVAR 2
73131: PPUSH
73132: LD_INT 0
73134: PPUSH
73135: CALL_OW 324
73139: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73140: LD_EXP 59
73144: PUSH
73145: LD_EXP 68
73149: AND
73150: IFFALSE 73252
73152: GO 73154
73154: DISABLE
73155: LD_INT 0
73157: PPUSH
73158: PPUSH
// begin enable ;
73159: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73160: LD_ADDR_VAR 0 2
73164: PUSH
73165: LD_INT 22
73167: PUSH
73168: LD_OWVAR 2
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: PUSH
73177: LD_INT 2
73179: PUSH
73180: LD_INT 34
73182: PUSH
73183: LD_INT 11
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 34
73192: PUSH
73193: LD_INT 30
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: LIST
73204: PUSH
73205: EMPTY
73206: LIST
73207: LIST
73208: PPUSH
73209: CALL_OW 69
73213: ST_TO_ADDR
// if not tmp then
73214: LD_VAR 0 2
73218: NOT
73219: IFFALSE 73223
// exit ;
73221: GO 73252
// for i in tmp do
73223: LD_ADDR_VAR 0 1
73227: PUSH
73228: LD_VAR 0 2
73232: PUSH
73233: FOR_IN
73234: IFFALSE 73250
// begin SetLives ( i , 0 ) ;
73236: LD_VAR 0 1
73240: PPUSH
73241: LD_INT 0
73243: PPUSH
73244: CALL_OW 234
// end ;
73248: GO 73233
73250: POP
73251: POP
// end ;
73252: PPOPN 2
73254: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73255: LD_EXP 59
73259: PUSH
73260: LD_EXP 69
73264: AND
73265: IFFALSE 73285
73267: GO 73269
73269: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73270: LD_INT 32
73272: PPUSH
73273: LD_OWVAR 2
73277: PPUSH
73278: LD_INT 0
73280: PPUSH
73281: CALL_OW 324
73285: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73286: LD_EXP 59
73290: PUSH
73291: LD_EXP 70
73295: AND
73296: IFFALSE 73477
73298: GO 73300
73300: DISABLE
73301: LD_INT 0
73303: PPUSH
73304: PPUSH
73305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73306: LD_ADDR_VAR 0 2
73310: PUSH
73311: LD_INT 22
73313: PUSH
73314: LD_OWVAR 2
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 33
73325: PUSH
73326: LD_INT 3
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: PPUSH
73337: CALL_OW 69
73341: ST_TO_ADDR
// if not tmp then
73342: LD_VAR 0 2
73346: NOT
73347: IFFALSE 73351
// exit ;
73349: GO 73477
// side := 0 ;
73351: LD_ADDR_VAR 0 3
73355: PUSH
73356: LD_INT 0
73358: ST_TO_ADDR
// for i := 1 to 8 do
73359: LD_ADDR_VAR 0 1
73363: PUSH
73364: DOUBLE
73365: LD_INT 1
73367: DEC
73368: ST_TO_ADDR
73369: LD_INT 8
73371: PUSH
73372: FOR_TO
73373: IFFALSE 73421
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73375: LD_OWVAR 2
73379: PUSH
73380: LD_VAR 0 1
73384: NONEQUAL
73385: PUSH
73386: LD_OWVAR 2
73390: PPUSH
73391: LD_VAR 0 1
73395: PPUSH
73396: CALL_OW 81
73400: PUSH
73401: LD_INT 2
73403: EQUAL
73404: AND
73405: IFFALSE 73419
// begin side := i ;
73407: LD_ADDR_VAR 0 3
73411: PUSH
73412: LD_VAR 0 1
73416: ST_TO_ADDR
// break ;
73417: GO 73421
// end ;
73419: GO 73372
73421: POP
73422: POP
// if not side then
73423: LD_VAR 0 3
73427: NOT
73428: IFFALSE 73432
// exit ;
73430: GO 73477
// for i := 1 to tmp do
73432: LD_ADDR_VAR 0 1
73436: PUSH
73437: DOUBLE
73438: LD_INT 1
73440: DEC
73441: ST_TO_ADDR
73442: LD_VAR 0 2
73446: PUSH
73447: FOR_TO
73448: IFFALSE 73475
// if Prob ( 60 ) then
73450: LD_INT 60
73452: PPUSH
73453: CALL_OW 13
73457: IFFALSE 73473
// SetSide ( i , side ) ;
73459: LD_VAR 0 1
73463: PPUSH
73464: LD_VAR 0 3
73468: PPUSH
73469: CALL_OW 235
73473: GO 73447
73475: POP
73476: POP
// end ;
73477: PPOPN 3
73479: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
73480: LD_EXP 59
73484: PUSH
73485: LD_EXP 72
73489: AND
73490: IFFALSE 73609
73492: GO 73494
73494: DISABLE
73495: LD_INT 0
73497: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
73498: LD_ADDR_VAR 0 1
73502: PUSH
73503: LD_INT 22
73505: PUSH
73506: LD_OWVAR 2
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PUSH
73515: LD_INT 21
73517: PUSH
73518: LD_INT 1
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: PUSH
73525: LD_INT 3
73527: PUSH
73528: LD_INT 23
73530: PUSH
73531: LD_INT 0
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: LIST
73546: PPUSH
73547: CALL_OW 69
73551: PUSH
73552: FOR_IN
73553: IFFALSE 73607
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
73555: LD_VAR 0 1
73559: PPUSH
73560: CALL_OW 257
73564: PUSH
73565: LD_INT 1
73567: PUSH
73568: LD_INT 2
73570: PUSH
73571: LD_INT 3
73573: PUSH
73574: LD_INT 4
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: IN
73583: IFFALSE 73605
// SetClass ( un , rand ( 1 , 4 ) ) ;
73585: LD_VAR 0 1
73589: PPUSH
73590: LD_INT 1
73592: PPUSH
73593: LD_INT 4
73595: PPUSH
73596: CALL_OW 12
73600: PPUSH
73601: CALL_OW 336
73605: GO 73552
73607: POP
73608: POP
// end ;
73609: PPOPN 1
73611: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
73612: LD_EXP 59
73616: PUSH
73617: LD_EXP 71
73621: AND
73622: IFFALSE 73701
73624: GO 73626
73626: DISABLE
73627: LD_INT 0
73629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73630: LD_ADDR_VAR 0 1
73634: PUSH
73635: LD_INT 22
73637: PUSH
73638: LD_OWVAR 2
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 21
73649: PUSH
73650: LD_INT 3
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: PPUSH
73661: CALL_OW 69
73665: ST_TO_ADDR
// if not tmp then
73666: LD_VAR 0 1
73670: NOT
73671: IFFALSE 73675
// exit ;
73673: GO 73701
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
73675: LD_VAR 0 1
73679: PUSH
73680: LD_INT 1
73682: PPUSH
73683: LD_VAR 0 1
73687: PPUSH
73688: CALL_OW 12
73692: ARRAY
73693: PPUSH
73694: LD_INT 100
73696: PPUSH
73697: CALL_OW 234
// end ;
73701: PPOPN 1
73703: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
73704: LD_EXP 59
73708: PUSH
73709: LD_EXP 73
73713: AND
73714: IFFALSE 73812
73716: GO 73718
73718: DISABLE
73719: LD_INT 0
73721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73722: LD_ADDR_VAR 0 1
73726: PUSH
73727: LD_INT 22
73729: PUSH
73730: LD_OWVAR 2
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: PUSH
73739: LD_INT 21
73741: PUSH
73742: LD_INT 1
73744: PUSH
73745: EMPTY
73746: LIST
73747: LIST
73748: PUSH
73749: EMPTY
73750: LIST
73751: LIST
73752: PPUSH
73753: CALL_OW 69
73757: ST_TO_ADDR
// if not tmp then
73758: LD_VAR 0 1
73762: NOT
73763: IFFALSE 73767
// exit ;
73765: GO 73812
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
73767: LD_VAR 0 1
73771: PUSH
73772: LD_INT 1
73774: PPUSH
73775: LD_VAR 0 1
73779: PPUSH
73780: CALL_OW 12
73784: ARRAY
73785: PPUSH
73786: LD_INT 1
73788: PPUSH
73789: LD_INT 4
73791: PPUSH
73792: CALL_OW 12
73796: PPUSH
73797: LD_INT 3000
73799: PPUSH
73800: LD_INT 9000
73802: PPUSH
73803: CALL_OW 12
73807: PPUSH
73808: CALL_OW 492
// end ;
73812: PPOPN 1
73814: END
// every 0 0$1 trigger StreamModeActive and sDepot do
73815: LD_EXP 59
73819: PUSH
73820: LD_EXP 74
73824: AND
73825: IFFALSE 73845
73827: GO 73829
73829: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
73830: LD_INT 1
73832: PPUSH
73833: LD_OWVAR 2
73837: PPUSH
73838: LD_INT 0
73840: PPUSH
73841: CALL_OW 324
73845: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
73846: LD_EXP 59
73850: PUSH
73851: LD_EXP 75
73855: AND
73856: IFFALSE 73939
73858: GO 73860
73860: DISABLE
73861: LD_INT 0
73863: PPUSH
73864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73865: LD_ADDR_VAR 0 2
73869: PUSH
73870: LD_INT 22
73872: PUSH
73873: LD_OWVAR 2
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: PUSH
73882: LD_INT 21
73884: PUSH
73885: LD_INT 3
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PPUSH
73896: CALL_OW 69
73900: ST_TO_ADDR
// if not tmp then
73901: LD_VAR 0 2
73905: NOT
73906: IFFALSE 73910
// exit ;
73908: GO 73939
// for i in tmp do
73910: LD_ADDR_VAR 0 1
73914: PUSH
73915: LD_VAR 0 2
73919: PUSH
73920: FOR_IN
73921: IFFALSE 73937
// SetBLevel ( i , 10 ) ;
73923: LD_VAR 0 1
73927: PPUSH
73928: LD_INT 10
73930: PPUSH
73931: CALL_OW 241
73935: GO 73920
73937: POP
73938: POP
// end ;
73939: PPOPN 2
73941: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
73942: LD_EXP 59
73946: PUSH
73947: LD_EXP 76
73951: AND
73952: IFFALSE 74063
73954: GO 73956
73956: DISABLE
73957: LD_INT 0
73959: PPUSH
73960: PPUSH
73961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73962: LD_ADDR_VAR 0 3
73966: PUSH
73967: LD_INT 22
73969: PUSH
73970: LD_OWVAR 2
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 25
73981: PUSH
73982: LD_INT 1
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: PPUSH
73993: CALL_OW 69
73997: ST_TO_ADDR
// if not tmp then
73998: LD_VAR 0 3
74002: NOT
74003: IFFALSE 74007
// exit ;
74005: GO 74063
// un := tmp [ rand ( 1 , tmp ) ] ;
74007: LD_ADDR_VAR 0 2
74011: PUSH
74012: LD_VAR 0 3
74016: PUSH
74017: LD_INT 1
74019: PPUSH
74020: LD_VAR 0 3
74024: PPUSH
74025: CALL_OW 12
74029: ARRAY
74030: ST_TO_ADDR
// if Crawls ( un ) then
74031: LD_VAR 0 2
74035: PPUSH
74036: CALL_OW 318
74040: IFFALSE 74051
// ComWalk ( un ) ;
74042: LD_VAR 0 2
74046: PPUSH
74047: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74051: LD_VAR 0 2
74055: PPUSH
74056: LD_INT 5
74058: PPUSH
74059: CALL_OW 336
// end ;
74063: PPOPN 3
74065: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
74066: LD_EXP 59
74070: PUSH
74071: LD_EXP 77
74075: AND
74076: PUSH
74077: LD_OWVAR 67
74081: PUSH
74082: LD_INT 4
74084: LESS
74085: AND
74086: IFFALSE 74105
74088: GO 74090
74090: DISABLE
// begin Difficulty := Difficulty + 1 ;
74091: LD_ADDR_OWVAR 67
74095: PUSH
74096: LD_OWVAR 67
74100: PUSH
74101: LD_INT 1
74103: PLUS
74104: ST_TO_ADDR
// end ;
74105: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74106: LD_EXP 59
74110: PUSH
74111: LD_EXP 78
74115: AND
74116: IFFALSE 74219
74118: GO 74120
74120: DISABLE
74121: LD_INT 0
74123: PPUSH
// begin for i := 1 to 5 do
74124: LD_ADDR_VAR 0 1
74128: PUSH
74129: DOUBLE
74130: LD_INT 1
74132: DEC
74133: ST_TO_ADDR
74134: LD_INT 5
74136: PUSH
74137: FOR_TO
74138: IFFALSE 74217
// begin uc_nation := nation_nature ;
74140: LD_ADDR_OWVAR 21
74144: PUSH
74145: LD_INT 0
74147: ST_TO_ADDR
// uc_side := 0 ;
74148: LD_ADDR_OWVAR 20
74152: PUSH
74153: LD_INT 0
74155: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74156: LD_ADDR_OWVAR 29
74160: PUSH
74161: LD_INT 12
74163: PUSH
74164: LD_INT 12
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: ST_TO_ADDR
// hc_agressivity := 20 ;
74171: LD_ADDR_OWVAR 35
74175: PUSH
74176: LD_INT 20
74178: ST_TO_ADDR
// hc_class := class_tiger ;
74179: LD_ADDR_OWVAR 28
74183: PUSH
74184: LD_INT 14
74186: ST_TO_ADDR
// hc_gallery :=  ;
74187: LD_ADDR_OWVAR 33
74191: PUSH
74192: LD_STRING 
74194: ST_TO_ADDR
// hc_name :=  ;
74195: LD_ADDR_OWVAR 26
74199: PUSH
74200: LD_STRING 
74202: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74203: CALL_OW 44
74207: PPUSH
74208: LD_INT 0
74210: PPUSH
74211: CALL_OW 51
// end ;
74215: GO 74137
74217: POP
74218: POP
// end ;
74219: PPOPN 1
74221: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74222: LD_EXP 59
74226: PUSH
74227: LD_EXP 79
74231: AND
74232: IFFALSE 74241
74234: GO 74236
74236: DISABLE
// StreamSibBomb ;
74237: CALL 74242 0 0
74241: END
// export function StreamSibBomb ; var i , x , y ; begin
74242: LD_INT 0
74244: PPUSH
74245: PPUSH
74246: PPUSH
74247: PPUSH
// result := false ;
74248: LD_ADDR_VAR 0 1
74252: PUSH
74253: LD_INT 0
74255: ST_TO_ADDR
// for i := 1 to 16 do
74256: LD_ADDR_VAR 0 2
74260: PUSH
74261: DOUBLE
74262: LD_INT 1
74264: DEC
74265: ST_TO_ADDR
74266: LD_INT 16
74268: PUSH
74269: FOR_TO
74270: IFFALSE 74469
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74272: LD_ADDR_VAR 0 3
74276: PUSH
74277: LD_INT 10
74279: PUSH
74280: LD_INT 20
74282: PUSH
74283: LD_INT 30
74285: PUSH
74286: LD_INT 40
74288: PUSH
74289: LD_INT 50
74291: PUSH
74292: LD_INT 60
74294: PUSH
74295: LD_INT 70
74297: PUSH
74298: LD_INT 80
74300: PUSH
74301: LD_INT 90
74303: PUSH
74304: LD_INT 100
74306: PUSH
74307: LD_INT 110
74309: PUSH
74310: LD_INT 120
74312: PUSH
74313: LD_INT 130
74315: PUSH
74316: LD_INT 140
74318: PUSH
74319: LD_INT 150
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 1
74341: PPUSH
74342: LD_INT 15
74344: PPUSH
74345: CALL_OW 12
74349: ARRAY
74350: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74351: LD_ADDR_VAR 0 4
74355: PUSH
74356: LD_INT 10
74358: PUSH
74359: LD_INT 20
74361: PUSH
74362: LD_INT 30
74364: PUSH
74365: LD_INT 40
74367: PUSH
74368: LD_INT 50
74370: PUSH
74371: LD_INT 60
74373: PUSH
74374: LD_INT 70
74376: PUSH
74377: LD_INT 80
74379: PUSH
74380: LD_INT 90
74382: PUSH
74383: LD_INT 100
74385: PUSH
74386: LD_INT 110
74388: PUSH
74389: LD_INT 120
74391: PUSH
74392: LD_INT 130
74394: PUSH
74395: LD_INT 140
74397: PUSH
74398: LD_INT 150
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: PUSH
74418: LD_INT 1
74420: PPUSH
74421: LD_INT 15
74423: PPUSH
74424: CALL_OW 12
74428: ARRAY
74429: ST_TO_ADDR
// if ValidHex ( x , y ) then
74430: LD_VAR 0 3
74434: PPUSH
74435: LD_VAR 0 4
74439: PPUSH
74440: CALL_OW 488
74444: IFFALSE 74467
// begin result := [ x , y ] ;
74446: LD_ADDR_VAR 0 1
74450: PUSH
74451: LD_VAR 0 3
74455: PUSH
74456: LD_VAR 0 4
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: ST_TO_ADDR
// break ;
74465: GO 74469
// end ; end ;
74467: GO 74269
74469: POP
74470: POP
// if result then
74471: LD_VAR 0 1
74475: IFFALSE 74535
// begin ToLua ( playSibBomb() ) ;
74477: LD_STRING playSibBomb()
74479: PPUSH
74480: CALL_OW 559
// wait ( 0 0$14 ) ;
74484: LD_INT 490
74486: PPUSH
74487: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
74491: LD_VAR 0 1
74495: PUSH
74496: LD_INT 1
74498: ARRAY
74499: PPUSH
74500: LD_VAR 0 1
74504: PUSH
74505: LD_INT 2
74507: ARRAY
74508: PPUSH
74509: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
74513: LD_VAR 0 1
74517: PUSH
74518: LD_INT 1
74520: ARRAY
74521: PPUSH
74522: LD_VAR 0 1
74526: PUSH
74527: LD_INT 2
74529: ARRAY
74530: PPUSH
74531: CALL_OW 429
// end ; end ;
74535: LD_VAR 0 1
74539: RET
// every 0 0$1 trigger StreamModeActive and sReset do
74540: LD_EXP 59
74544: PUSH
74545: LD_EXP 81
74549: AND
74550: IFFALSE 74562
74552: GO 74554
74554: DISABLE
// YouLost (  ) ;
74555: LD_STRING 
74557: PPUSH
74558: CALL_OW 104
74562: END
// every 0 0$1 trigger StreamModeActive and sFog do
74563: LD_EXP 59
74567: PUSH
74568: LD_EXP 80
74572: AND
74573: IFFALSE 74587
74575: GO 74577
74577: DISABLE
// FogOff ( your_side ) ;
74578: LD_OWVAR 2
74582: PPUSH
74583: CALL_OW 344
74587: END
// every 0 0$1 trigger StreamModeActive and sSun do
74588: LD_EXP 59
74592: PUSH
74593: LD_EXP 82
74597: AND
74598: IFFALSE 74626
74600: GO 74602
74602: DISABLE
// begin solar_recharge_percent := 0 ;
74603: LD_ADDR_OWVAR 79
74607: PUSH
74608: LD_INT 0
74610: ST_TO_ADDR
// wait ( 5 5$00 ) ;
74611: LD_INT 10500
74613: PPUSH
74614: CALL_OW 67
// solar_recharge_percent := 100 ;
74618: LD_ADDR_OWVAR 79
74622: PUSH
74623: LD_INT 100
74625: ST_TO_ADDR
// end ;
74626: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
74627: LD_EXP 59
74631: PUSH
74632: LD_EXP 83
74636: AND
74637: IFFALSE 74876
74639: GO 74641
74641: DISABLE
74642: LD_INT 0
74644: PPUSH
74645: PPUSH
74646: PPUSH
// begin tmp := [ ] ;
74647: LD_ADDR_VAR 0 3
74651: PUSH
74652: EMPTY
74653: ST_TO_ADDR
// for i := 1 to 6 do
74654: LD_ADDR_VAR 0 1
74658: PUSH
74659: DOUBLE
74660: LD_INT 1
74662: DEC
74663: ST_TO_ADDR
74664: LD_INT 6
74666: PUSH
74667: FOR_TO
74668: IFFALSE 74773
// begin uc_nation := nation_nature ;
74670: LD_ADDR_OWVAR 21
74674: PUSH
74675: LD_INT 0
74677: ST_TO_ADDR
// uc_side := 0 ;
74678: LD_ADDR_OWVAR 20
74682: PUSH
74683: LD_INT 0
74685: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74686: LD_ADDR_OWVAR 29
74690: PUSH
74691: LD_INT 12
74693: PUSH
74694: LD_INT 12
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: ST_TO_ADDR
// hc_agressivity := 20 ;
74701: LD_ADDR_OWVAR 35
74705: PUSH
74706: LD_INT 20
74708: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
74709: LD_ADDR_OWVAR 28
74713: PUSH
74714: LD_INT 17
74716: ST_TO_ADDR
// hc_gallery :=  ;
74717: LD_ADDR_OWVAR 33
74721: PUSH
74722: LD_STRING 
74724: ST_TO_ADDR
// hc_name :=  ;
74725: LD_ADDR_OWVAR 26
74729: PUSH
74730: LD_STRING 
74732: ST_TO_ADDR
// un := CreateHuman ;
74733: LD_ADDR_VAR 0 2
74737: PUSH
74738: CALL_OW 44
74742: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
74743: LD_VAR 0 2
74747: PPUSH
74748: LD_INT 1
74750: PPUSH
74751: CALL_OW 51
// tmp := tmp ^ un ;
74755: LD_ADDR_VAR 0 3
74759: PUSH
74760: LD_VAR 0 3
74764: PUSH
74765: LD_VAR 0 2
74769: ADD
74770: ST_TO_ADDR
// end ;
74771: GO 74667
74773: POP
74774: POP
// repeat wait ( 0 0$1 ) ;
74775: LD_INT 35
74777: PPUSH
74778: CALL_OW 67
// for un in tmp do
74782: LD_ADDR_VAR 0 2
74786: PUSH
74787: LD_VAR 0 3
74791: PUSH
74792: FOR_IN
74793: IFFALSE 74867
// begin if IsDead ( un ) then
74795: LD_VAR 0 2
74799: PPUSH
74800: CALL_OW 301
74804: IFFALSE 74824
// begin tmp := tmp diff un ;
74806: LD_ADDR_VAR 0 3
74810: PUSH
74811: LD_VAR 0 3
74815: PUSH
74816: LD_VAR 0 2
74820: DIFF
74821: ST_TO_ADDR
// continue ;
74822: GO 74792
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
74824: LD_VAR 0 2
74828: PPUSH
74829: LD_INT 3
74831: PUSH
74832: LD_INT 22
74834: PUSH
74835: LD_INT 0
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: PPUSH
74846: CALL_OW 69
74850: PPUSH
74851: LD_VAR 0 2
74855: PPUSH
74856: CALL_OW 74
74860: PPUSH
74861: CALL_OW 115
// end ;
74865: GO 74792
74867: POP
74868: POP
// until not tmp ;
74869: LD_VAR 0 3
74873: NOT
74874: IFFALSE 74775
// end ;
74876: PPOPN 3
74878: END
// every 0 0$1 trigger StreamModeActive and sTroll do
74879: LD_EXP 59
74883: PUSH
74884: LD_EXP 84
74888: AND
74889: IFFALSE 74943
74891: GO 74893
74893: DISABLE
// begin ToLua ( displayTroll(); ) ;
74894: LD_STRING displayTroll();
74896: PPUSH
74897: CALL_OW 559
// wait ( 3 3$00 ) ;
74901: LD_INT 6300
74903: PPUSH
74904: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74908: LD_STRING hideTroll();
74910: PPUSH
74911: CALL_OW 559
// wait ( 1 1$00 ) ;
74915: LD_INT 2100
74917: PPUSH
74918: CALL_OW 67
// ToLua ( displayTroll(); ) ;
74922: LD_STRING displayTroll();
74924: PPUSH
74925: CALL_OW 559
// wait ( 1 1$00 ) ;
74929: LD_INT 2100
74931: PPUSH
74932: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74936: LD_STRING hideTroll();
74938: PPUSH
74939: CALL_OW 559
// end ;
74943: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
74944: LD_EXP 59
74948: PUSH
74949: LD_EXP 85
74953: AND
74954: IFFALSE 75017
74956: GO 74958
74958: DISABLE
74959: LD_INT 0
74961: PPUSH
// begin p := 0 ;
74962: LD_ADDR_VAR 0 1
74966: PUSH
74967: LD_INT 0
74969: ST_TO_ADDR
// repeat game_speed := 1 ;
74970: LD_ADDR_OWVAR 65
74974: PUSH
74975: LD_INT 1
74977: ST_TO_ADDR
// wait ( 0 0$1 ) ;
74978: LD_INT 35
74980: PPUSH
74981: CALL_OW 67
// p := p + 1 ;
74985: LD_ADDR_VAR 0 1
74989: PUSH
74990: LD_VAR 0 1
74994: PUSH
74995: LD_INT 1
74997: PLUS
74998: ST_TO_ADDR
// until p >= 60 ;
74999: LD_VAR 0 1
75003: PUSH
75004: LD_INT 60
75006: GREATEREQUAL
75007: IFFALSE 74970
// game_speed := 4 ;
75009: LD_ADDR_OWVAR 65
75013: PUSH
75014: LD_INT 4
75016: ST_TO_ADDR
// end ;
75017: PPOPN 1
75019: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75020: LD_EXP 59
75024: PUSH
75025: LD_EXP 86
75029: AND
75030: IFFALSE 75176
75032: GO 75034
75034: DISABLE
75035: LD_INT 0
75037: PPUSH
75038: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75039: LD_ADDR_VAR 0 1
75043: PUSH
75044: LD_INT 22
75046: PUSH
75047: LD_OWVAR 2
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: PUSH
75056: LD_INT 2
75058: PUSH
75059: LD_INT 30
75061: PUSH
75062: LD_INT 0
75064: PUSH
75065: EMPTY
75066: LIST
75067: LIST
75068: PUSH
75069: LD_INT 30
75071: PUSH
75072: LD_INT 1
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: PUSH
75079: EMPTY
75080: LIST
75081: LIST
75082: LIST
75083: PUSH
75084: EMPTY
75085: LIST
75086: LIST
75087: PPUSH
75088: CALL_OW 69
75092: ST_TO_ADDR
// if not depot then
75093: LD_VAR 0 1
75097: NOT
75098: IFFALSE 75102
// exit ;
75100: GO 75176
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75102: LD_ADDR_VAR 0 2
75106: PUSH
75107: LD_VAR 0 1
75111: PUSH
75112: LD_INT 1
75114: PPUSH
75115: LD_VAR 0 1
75119: PPUSH
75120: CALL_OW 12
75124: ARRAY
75125: PPUSH
75126: CALL_OW 274
75130: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75131: LD_VAR 0 2
75135: PPUSH
75136: LD_INT 1
75138: PPUSH
75139: LD_INT 0
75141: PPUSH
75142: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75146: LD_VAR 0 2
75150: PPUSH
75151: LD_INT 2
75153: PPUSH
75154: LD_INT 0
75156: PPUSH
75157: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75161: LD_VAR 0 2
75165: PPUSH
75166: LD_INT 3
75168: PPUSH
75169: LD_INT 0
75171: PPUSH
75172: CALL_OW 277
// end ;
75176: PPOPN 2
75178: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75179: LD_EXP 59
75183: PUSH
75184: LD_EXP 87
75188: AND
75189: IFFALSE 75286
75191: GO 75193
75193: DISABLE
75194: LD_INT 0
75196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75197: LD_ADDR_VAR 0 1
75201: PUSH
75202: LD_INT 22
75204: PUSH
75205: LD_OWVAR 2
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: PUSH
75214: LD_INT 21
75216: PUSH
75217: LD_INT 1
75219: PUSH
75220: EMPTY
75221: LIST
75222: LIST
75223: PUSH
75224: LD_INT 3
75226: PUSH
75227: LD_INT 23
75229: PUSH
75230: LD_INT 0
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: LIST
75245: PPUSH
75246: CALL_OW 69
75250: ST_TO_ADDR
// if not tmp then
75251: LD_VAR 0 1
75255: NOT
75256: IFFALSE 75260
// exit ;
75258: GO 75286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75260: LD_VAR 0 1
75264: PUSH
75265: LD_INT 1
75267: PPUSH
75268: LD_VAR 0 1
75272: PPUSH
75273: CALL_OW 12
75277: ARRAY
75278: PPUSH
75279: LD_INT 200
75281: PPUSH
75282: CALL_OW 234
// end ;
75286: PPOPN 1
75288: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75289: LD_EXP 59
75293: PUSH
75294: LD_EXP 88
75298: AND
75299: IFFALSE 75378
75301: GO 75303
75303: DISABLE
75304: LD_INT 0
75306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75307: LD_ADDR_VAR 0 1
75311: PUSH
75312: LD_INT 22
75314: PUSH
75315: LD_OWVAR 2
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: PUSH
75324: LD_INT 21
75326: PUSH
75327: LD_INT 2
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: PPUSH
75338: CALL_OW 69
75342: ST_TO_ADDR
// if not tmp then
75343: LD_VAR 0 1
75347: NOT
75348: IFFALSE 75352
// exit ;
75350: GO 75378
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75352: LD_VAR 0 1
75356: PUSH
75357: LD_INT 1
75359: PPUSH
75360: LD_VAR 0 1
75364: PPUSH
75365: CALL_OW 12
75369: ARRAY
75370: PPUSH
75371: LD_INT 60
75373: PPUSH
75374: CALL_OW 234
// end ;
75378: PPOPN 1
75380: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75381: LD_EXP 59
75385: PUSH
75386: LD_EXP 89
75390: AND
75391: IFFALSE 75490
75393: GO 75395
75395: DISABLE
75396: LD_INT 0
75398: PPUSH
75399: PPUSH
// begin enable ;
75400: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75401: LD_ADDR_VAR 0 1
75405: PUSH
75406: LD_INT 22
75408: PUSH
75409: LD_OWVAR 2
75413: PUSH
75414: EMPTY
75415: LIST
75416: LIST
75417: PUSH
75418: LD_INT 61
75420: PUSH
75421: EMPTY
75422: LIST
75423: PUSH
75424: LD_INT 33
75426: PUSH
75427: LD_INT 2
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: LIST
75438: PPUSH
75439: CALL_OW 69
75443: ST_TO_ADDR
// if not tmp then
75444: LD_VAR 0 1
75448: NOT
75449: IFFALSE 75453
// exit ;
75451: GO 75490
// for i in tmp do
75453: LD_ADDR_VAR 0 2
75457: PUSH
75458: LD_VAR 0 1
75462: PUSH
75463: FOR_IN
75464: IFFALSE 75488
// if IsControledBy ( i ) then
75466: LD_VAR 0 2
75470: PPUSH
75471: CALL_OW 312
75475: IFFALSE 75486
// ComUnlink ( i ) ;
75477: LD_VAR 0 2
75481: PPUSH
75482: CALL_OW 136
75486: GO 75463
75488: POP
75489: POP
// end ;
75490: PPOPN 2
75492: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
75493: LD_EXP 59
75497: PUSH
75498: LD_EXP 90
75502: AND
75503: IFFALSE 75643
75505: GO 75507
75507: DISABLE
75508: LD_INT 0
75510: PPUSH
75511: PPUSH
// begin ToLua ( displayPowell(); ) ;
75512: LD_STRING displayPowell();
75514: PPUSH
75515: CALL_OW 559
// uc_side := 0 ;
75519: LD_ADDR_OWVAR 20
75523: PUSH
75524: LD_INT 0
75526: ST_TO_ADDR
// uc_nation := 2 ;
75527: LD_ADDR_OWVAR 21
75531: PUSH
75532: LD_INT 2
75534: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
75535: LD_ADDR_OWVAR 37
75539: PUSH
75540: LD_INT 14
75542: ST_TO_ADDR
// vc_engine := engine_siberite ;
75543: LD_ADDR_OWVAR 39
75547: PUSH
75548: LD_INT 3
75550: ST_TO_ADDR
// vc_control := control_apeman ;
75551: LD_ADDR_OWVAR 38
75555: PUSH
75556: LD_INT 5
75558: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
75559: LD_ADDR_OWVAR 40
75563: PUSH
75564: LD_INT 29
75566: ST_TO_ADDR
// un := CreateVehicle ;
75567: LD_ADDR_VAR 0 2
75571: PUSH
75572: CALL_OW 45
75576: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75577: LD_VAR 0 2
75581: PPUSH
75582: LD_INT 1
75584: PPUSH
75585: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75589: LD_INT 35
75591: PPUSH
75592: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75596: LD_VAR 0 2
75600: PPUSH
75601: LD_INT 22
75603: PUSH
75604: LD_OWVAR 2
75608: PUSH
75609: EMPTY
75610: LIST
75611: LIST
75612: PPUSH
75613: CALL_OW 69
75617: PPUSH
75618: LD_VAR 0 2
75622: PPUSH
75623: CALL_OW 74
75627: PPUSH
75628: CALL_OW 115
// until IsDead ( un ) ;
75632: LD_VAR 0 2
75636: PPUSH
75637: CALL_OW 301
75641: IFFALSE 75589
// end ;
75643: PPOPN 2
75645: END
// every 0 0$1 trigger StreamModeActive and sStu do
75646: LD_EXP 59
75650: PUSH
75651: LD_EXP 98
75655: AND
75656: IFFALSE 75672
75658: GO 75660
75660: DISABLE
// begin ToLua ( displayStucuk(); ) ;
75661: LD_STRING displayStucuk();
75663: PPUSH
75664: CALL_OW 559
// ResetFog ;
75668: CALL_OW 335
// end ;
75672: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
75673: LD_EXP 59
75677: PUSH
75678: LD_EXP 91
75682: AND
75683: IFFALSE 75824
75685: GO 75687
75687: DISABLE
75688: LD_INT 0
75690: PPUSH
75691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75692: LD_ADDR_VAR 0 2
75696: PUSH
75697: LD_INT 22
75699: PUSH
75700: LD_OWVAR 2
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: PUSH
75709: LD_INT 21
75711: PUSH
75712: LD_INT 1
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: PPUSH
75723: CALL_OW 69
75727: ST_TO_ADDR
// if not tmp then
75728: LD_VAR 0 2
75732: NOT
75733: IFFALSE 75737
// exit ;
75735: GO 75824
// un := tmp [ rand ( 1 , tmp ) ] ;
75737: LD_ADDR_VAR 0 1
75741: PUSH
75742: LD_VAR 0 2
75746: PUSH
75747: LD_INT 1
75749: PPUSH
75750: LD_VAR 0 2
75754: PPUSH
75755: CALL_OW 12
75759: ARRAY
75760: ST_TO_ADDR
// SetSide ( un , 0 ) ;
75761: LD_VAR 0 1
75765: PPUSH
75766: LD_INT 0
75768: PPUSH
75769: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
75773: LD_VAR 0 1
75777: PPUSH
75778: LD_OWVAR 3
75782: PUSH
75783: LD_VAR 0 1
75787: DIFF
75788: PPUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 74
75798: PPUSH
75799: CALL_OW 115
// wait ( 0 0$20 ) ;
75803: LD_INT 700
75805: PPUSH
75806: CALL_OW 67
// SetSide ( un , your_side ) ;
75810: LD_VAR 0 1
75814: PPUSH
75815: LD_OWVAR 2
75819: PPUSH
75820: CALL_OW 235
// end ;
75824: PPOPN 2
75826: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
75827: LD_EXP 59
75831: PUSH
75832: LD_EXP 92
75836: AND
75837: IFFALSE 75943
75839: GO 75841
75841: DISABLE
75842: LD_INT 0
75844: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75845: LD_ADDR_VAR 0 1
75849: PUSH
75850: LD_INT 22
75852: PUSH
75853: LD_OWVAR 2
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PUSH
75862: LD_INT 2
75864: PUSH
75865: LD_INT 30
75867: PUSH
75868: LD_INT 0
75870: PUSH
75871: EMPTY
75872: LIST
75873: LIST
75874: PUSH
75875: LD_INT 30
75877: PUSH
75878: LD_INT 1
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: LIST
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: PPUSH
75894: CALL_OW 69
75898: ST_TO_ADDR
// if not depot then
75899: LD_VAR 0 1
75903: NOT
75904: IFFALSE 75908
// exit ;
75906: GO 75943
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
75908: LD_VAR 0 1
75912: PUSH
75913: LD_INT 1
75915: ARRAY
75916: PPUSH
75917: CALL_OW 250
75921: PPUSH
75922: LD_VAR 0 1
75926: PUSH
75927: LD_INT 1
75929: ARRAY
75930: PPUSH
75931: CALL_OW 251
75935: PPUSH
75936: LD_INT 70
75938: PPUSH
75939: CALL_OW 495
// end ;
75943: PPOPN 1
75945: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
75946: LD_EXP 59
75950: PUSH
75951: LD_EXP 93
75955: AND
75956: IFFALSE 76167
75958: GO 75960
75960: DISABLE
75961: LD_INT 0
75963: PPUSH
75964: PPUSH
75965: PPUSH
75966: PPUSH
75967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75968: LD_ADDR_VAR 0 5
75972: PUSH
75973: LD_INT 22
75975: PUSH
75976: LD_OWVAR 2
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PUSH
75985: LD_INT 21
75987: PUSH
75988: LD_INT 1
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: PUSH
75995: EMPTY
75996: LIST
75997: LIST
75998: PPUSH
75999: CALL_OW 69
76003: ST_TO_ADDR
// if not tmp then
76004: LD_VAR 0 5
76008: NOT
76009: IFFALSE 76013
// exit ;
76011: GO 76167
// for i in tmp do
76013: LD_ADDR_VAR 0 1
76017: PUSH
76018: LD_VAR 0 5
76022: PUSH
76023: FOR_IN
76024: IFFALSE 76165
// begin d := rand ( 0 , 5 ) ;
76026: LD_ADDR_VAR 0 4
76030: PUSH
76031: LD_INT 0
76033: PPUSH
76034: LD_INT 5
76036: PPUSH
76037: CALL_OW 12
76041: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76042: LD_ADDR_VAR 0 2
76046: PUSH
76047: LD_VAR 0 1
76051: PPUSH
76052: CALL_OW 250
76056: PPUSH
76057: LD_VAR 0 4
76061: PPUSH
76062: LD_INT 3
76064: PPUSH
76065: LD_INT 12
76067: PPUSH
76068: CALL_OW 12
76072: PPUSH
76073: CALL_OW 272
76077: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76078: LD_ADDR_VAR 0 3
76082: PUSH
76083: LD_VAR 0 1
76087: PPUSH
76088: CALL_OW 251
76092: PPUSH
76093: LD_VAR 0 4
76097: PPUSH
76098: LD_INT 3
76100: PPUSH
76101: LD_INT 12
76103: PPUSH
76104: CALL_OW 12
76108: PPUSH
76109: CALL_OW 273
76113: ST_TO_ADDR
// if ValidHex ( x , y ) then
76114: LD_VAR 0 2
76118: PPUSH
76119: LD_VAR 0 3
76123: PPUSH
76124: CALL_OW 488
76128: IFFALSE 76163
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76130: LD_VAR 0 1
76134: PPUSH
76135: LD_VAR 0 2
76139: PPUSH
76140: LD_VAR 0 3
76144: PPUSH
76145: LD_INT 3
76147: PPUSH
76148: LD_INT 6
76150: PPUSH
76151: CALL_OW 12
76155: PPUSH
76156: LD_INT 1
76158: PPUSH
76159: CALL_OW 483
// end ;
76163: GO 76023
76165: POP
76166: POP
// end ;
76167: PPOPN 5
76169: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76170: LD_EXP 59
76174: PUSH
76175: LD_EXP 94
76179: AND
76180: IFFALSE 76274
76182: GO 76184
76184: DISABLE
76185: LD_INT 0
76187: PPUSH
76188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76189: LD_ADDR_VAR 0 2
76193: PUSH
76194: LD_INT 22
76196: PUSH
76197: LD_OWVAR 2
76201: PUSH
76202: EMPTY
76203: LIST
76204: LIST
76205: PUSH
76206: LD_INT 32
76208: PUSH
76209: LD_INT 1
76211: PUSH
76212: EMPTY
76213: LIST
76214: LIST
76215: PUSH
76216: LD_INT 21
76218: PUSH
76219: LD_INT 2
76221: PUSH
76222: EMPTY
76223: LIST
76224: LIST
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: LIST
76230: PPUSH
76231: CALL_OW 69
76235: ST_TO_ADDR
// if not tmp then
76236: LD_VAR 0 2
76240: NOT
76241: IFFALSE 76245
// exit ;
76243: GO 76274
// for i in tmp do
76245: LD_ADDR_VAR 0 1
76249: PUSH
76250: LD_VAR 0 2
76254: PUSH
76255: FOR_IN
76256: IFFALSE 76272
// SetFuel ( i , 0 ) ;
76258: LD_VAR 0 1
76262: PPUSH
76263: LD_INT 0
76265: PPUSH
76266: CALL_OW 240
76270: GO 76255
76272: POP
76273: POP
// end ;
76274: PPOPN 2
76276: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76277: LD_EXP 59
76281: PUSH
76282: LD_EXP 95
76286: AND
76287: IFFALSE 76353
76289: GO 76291
76291: DISABLE
76292: LD_INT 0
76294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76295: LD_ADDR_VAR 0 1
76299: PUSH
76300: LD_INT 22
76302: PUSH
76303: LD_OWVAR 2
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: PUSH
76312: LD_INT 30
76314: PUSH
76315: LD_INT 29
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: PUSH
76322: EMPTY
76323: LIST
76324: LIST
76325: PPUSH
76326: CALL_OW 69
76330: ST_TO_ADDR
// if not tmp then
76331: LD_VAR 0 1
76335: NOT
76336: IFFALSE 76340
// exit ;
76338: GO 76353
// DestroyUnit ( tmp [ 1 ] ) ;
76340: LD_VAR 0 1
76344: PUSH
76345: LD_INT 1
76347: ARRAY
76348: PPUSH
76349: CALL_OW 65
// end ;
76353: PPOPN 1
76355: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76356: LD_EXP 59
76360: PUSH
76361: LD_EXP 97
76365: AND
76366: IFFALSE 76495
76368: GO 76370
76370: DISABLE
76371: LD_INT 0
76373: PPUSH
// begin uc_side := 0 ;
76374: LD_ADDR_OWVAR 20
76378: PUSH
76379: LD_INT 0
76381: ST_TO_ADDR
// uc_nation := nation_arabian ;
76382: LD_ADDR_OWVAR 21
76386: PUSH
76387: LD_INT 2
76389: ST_TO_ADDR
// hc_gallery :=  ;
76390: LD_ADDR_OWVAR 33
76394: PUSH
76395: LD_STRING 
76397: ST_TO_ADDR
// hc_name :=  ;
76398: LD_ADDR_OWVAR 26
76402: PUSH
76403: LD_STRING 
76405: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
76406: LD_INT 1
76408: PPUSH
76409: LD_INT 11
76411: PPUSH
76412: LD_INT 10
76414: PPUSH
76415: CALL_OW 380
// un := CreateHuman ;
76419: LD_ADDR_VAR 0 1
76423: PUSH
76424: CALL_OW 44
76428: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76429: LD_VAR 0 1
76433: PPUSH
76434: LD_INT 1
76436: PPUSH
76437: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76441: LD_INT 35
76443: PPUSH
76444: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76448: LD_VAR 0 1
76452: PPUSH
76453: LD_INT 22
76455: PUSH
76456: LD_OWVAR 2
76460: PUSH
76461: EMPTY
76462: LIST
76463: LIST
76464: PPUSH
76465: CALL_OW 69
76469: PPUSH
76470: LD_VAR 0 1
76474: PPUSH
76475: CALL_OW 74
76479: PPUSH
76480: CALL_OW 115
// until IsDead ( un ) ;
76484: LD_VAR 0 1
76488: PPUSH
76489: CALL_OW 301
76493: IFFALSE 76441
// end ;
76495: PPOPN 1
76497: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
76498: LD_EXP 59
76502: PUSH
76503: LD_EXP 99
76507: AND
76508: IFFALSE 76520
76510: GO 76512
76512: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
76513: LD_STRING earthquake(getX(game), 0, 32)
76515: PPUSH
76516: CALL_OW 559
76520: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
76521: LD_EXP 59
76525: PUSH
76526: LD_EXP 100
76530: AND
76531: IFFALSE 76622
76533: GO 76535
76535: DISABLE
76536: LD_INT 0
76538: PPUSH
// begin enable ;
76539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
76540: LD_ADDR_VAR 0 1
76544: PUSH
76545: LD_INT 22
76547: PUSH
76548: LD_OWVAR 2
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: PUSH
76557: LD_INT 21
76559: PUSH
76560: LD_INT 2
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: PUSH
76567: LD_INT 33
76569: PUSH
76570: LD_INT 3
76572: PUSH
76573: EMPTY
76574: LIST
76575: LIST
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: LIST
76581: PPUSH
76582: CALL_OW 69
76586: ST_TO_ADDR
// if not tmp then
76587: LD_VAR 0 1
76591: NOT
76592: IFFALSE 76596
// exit ;
76594: GO 76622
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76596: LD_VAR 0 1
76600: PUSH
76601: LD_INT 1
76603: PPUSH
76604: LD_VAR 0 1
76608: PPUSH
76609: CALL_OW 12
76613: ARRAY
76614: PPUSH
76615: LD_INT 1
76617: PPUSH
76618: CALL_OW 234
// end ;
76622: PPOPN 1
76624: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
76625: LD_EXP 59
76629: PUSH
76630: LD_EXP 101
76634: AND
76635: IFFALSE 76776
76637: GO 76639
76639: DISABLE
76640: LD_INT 0
76642: PPUSH
76643: PPUSH
76644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76645: LD_ADDR_VAR 0 3
76649: PUSH
76650: LD_INT 22
76652: PUSH
76653: LD_OWVAR 2
76657: PUSH
76658: EMPTY
76659: LIST
76660: LIST
76661: PUSH
76662: LD_INT 25
76664: PUSH
76665: LD_INT 1
76667: PUSH
76668: EMPTY
76669: LIST
76670: LIST
76671: PUSH
76672: EMPTY
76673: LIST
76674: LIST
76675: PPUSH
76676: CALL_OW 69
76680: ST_TO_ADDR
// if not tmp then
76681: LD_VAR 0 3
76685: NOT
76686: IFFALSE 76690
// exit ;
76688: GO 76776
// un := tmp [ rand ( 1 , tmp ) ] ;
76690: LD_ADDR_VAR 0 2
76694: PUSH
76695: LD_VAR 0 3
76699: PUSH
76700: LD_INT 1
76702: PPUSH
76703: LD_VAR 0 3
76707: PPUSH
76708: CALL_OW 12
76712: ARRAY
76713: ST_TO_ADDR
// if Crawls ( un ) then
76714: LD_VAR 0 2
76718: PPUSH
76719: CALL_OW 318
76723: IFFALSE 76734
// ComWalk ( un ) ;
76725: LD_VAR 0 2
76729: PPUSH
76730: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
76734: LD_VAR 0 2
76738: PPUSH
76739: LD_INT 9
76741: PPUSH
76742: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
76746: LD_INT 28
76748: PPUSH
76749: LD_OWVAR 2
76753: PPUSH
76754: LD_INT 2
76756: PPUSH
76757: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
76761: LD_INT 29
76763: PPUSH
76764: LD_OWVAR 2
76768: PPUSH
76769: LD_INT 2
76771: PPUSH
76772: CALL_OW 322
// end ;
76776: PPOPN 3
76778: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
76779: LD_EXP 59
76783: PUSH
76784: LD_EXP 102
76788: AND
76789: IFFALSE 76900
76791: GO 76793
76793: DISABLE
76794: LD_INT 0
76796: PPUSH
76797: PPUSH
76798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76799: LD_ADDR_VAR 0 3
76803: PUSH
76804: LD_INT 22
76806: PUSH
76807: LD_OWVAR 2
76811: PUSH
76812: EMPTY
76813: LIST
76814: LIST
76815: PUSH
76816: LD_INT 25
76818: PUSH
76819: LD_INT 1
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: PPUSH
76830: CALL_OW 69
76834: ST_TO_ADDR
// if not tmp then
76835: LD_VAR 0 3
76839: NOT
76840: IFFALSE 76844
// exit ;
76842: GO 76900
// un := tmp [ rand ( 1 , tmp ) ] ;
76844: LD_ADDR_VAR 0 2
76848: PUSH
76849: LD_VAR 0 3
76853: PUSH
76854: LD_INT 1
76856: PPUSH
76857: LD_VAR 0 3
76861: PPUSH
76862: CALL_OW 12
76866: ARRAY
76867: ST_TO_ADDR
// if Crawls ( un ) then
76868: LD_VAR 0 2
76872: PPUSH
76873: CALL_OW 318
76877: IFFALSE 76888
// ComWalk ( un ) ;
76879: LD_VAR 0 2
76883: PPUSH
76884: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76888: LD_VAR 0 2
76892: PPUSH
76893: LD_INT 8
76895: PPUSH
76896: CALL_OW 336
// end ;
76900: PPOPN 3
76902: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
76903: LD_EXP 59
76907: PUSH
76908: LD_EXP 103
76912: AND
76913: IFFALSE 77057
76915: GO 76917
76917: DISABLE
76918: LD_INT 0
76920: PPUSH
76921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
76922: LD_ADDR_VAR 0 2
76926: PUSH
76927: LD_INT 22
76929: PUSH
76930: LD_OWVAR 2
76934: PUSH
76935: EMPTY
76936: LIST
76937: LIST
76938: PUSH
76939: LD_INT 21
76941: PUSH
76942: LD_INT 2
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_INT 2
76951: PUSH
76952: LD_INT 34
76954: PUSH
76955: LD_INT 12
76957: PUSH
76958: EMPTY
76959: LIST
76960: LIST
76961: PUSH
76962: LD_INT 34
76964: PUSH
76965: LD_INT 51
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: PUSH
76972: LD_INT 34
76974: PUSH
76975: LD_INT 32
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: PUSH
76982: EMPTY
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: LIST
76992: PPUSH
76993: CALL_OW 69
76997: ST_TO_ADDR
// if not tmp then
76998: LD_VAR 0 2
77002: NOT
77003: IFFALSE 77007
// exit ;
77005: GO 77057
// for i in tmp do
77007: LD_ADDR_VAR 0 1
77011: PUSH
77012: LD_VAR 0 2
77016: PUSH
77017: FOR_IN
77018: IFFALSE 77055
// if GetCargo ( i , mat_artifact ) = 0 then
77020: LD_VAR 0 1
77024: PPUSH
77025: LD_INT 4
77027: PPUSH
77028: CALL_OW 289
77032: PUSH
77033: LD_INT 0
77035: EQUAL
77036: IFFALSE 77053
// SetCargo ( i , mat_siberit , 100 ) ;
77038: LD_VAR 0 1
77042: PPUSH
77043: LD_INT 3
77045: PPUSH
77046: LD_INT 100
77048: PPUSH
77049: CALL_OW 290
77053: GO 77017
77055: POP
77056: POP
// end ;
77057: PPOPN 2
77059: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77060: LD_EXP 59
77064: PUSH
77065: LD_EXP 104
77069: AND
77070: IFFALSE 77253
77072: GO 77074
77074: DISABLE
77075: LD_INT 0
77077: PPUSH
77078: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77079: LD_ADDR_VAR 0 2
77083: PUSH
77084: LD_INT 22
77086: PUSH
77087: LD_OWVAR 2
77091: PUSH
77092: EMPTY
77093: LIST
77094: LIST
77095: PPUSH
77096: CALL_OW 69
77100: ST_TO_ADDR
// if not tmp then
77101: LD_VAR 0 2
77105: NOT
77106: IFFALSE 77110
// exit ;
77108: GO 77253
// for i := 1 to 2 do
77110: LD_ADDR_VAR 0 1
77114: PUSH
77115: DOUBLE
77116: LD_INT 1
77118: DEC
77119: ST_TO_ADDR
77120: LD_INT 2
77122: PUSH
77123: FOR_TO
77124: IFFALSE 77251
// begin uc_side := your_side ;
77126: LD_ADDR_OWVAR 20
77130: PUSH
77131: LD_OWVAR 2
77135: ST_TO_ADDR
// uc_nation := nation_american ;
77136: LD_ADDR_OWVAR 21
77140: PUSH
77141: LD_INT 1
77143: ST_TO_ADDR
// vc_chassis := us_morphling ;
77144: LD_ADDR_OWVAR 37
77148: PUSH
77149: LD_INT 5
77151: ST_TO_ADDR
// vc_engine := engine_siberite ;
77152: LD_ADDR_OWVAR 39
77156: PUSH
77157: LD_INT 3
77159: ST_TO_ADDR
// vc_control := control_computer ;
77160: LD_ADDR_OWVAR 38
77164: PUSH
77165: LD_INT 3
77167: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77168: LD_ADDR_OWVAR 40
77172: PUSH
77173: LD_INT 10
77175: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77176: LD_VAR 0 2
77180: PUSH
77181: LD_INT 1
77183: ARRAY
77184: PPUSH
77185: CALL_OW 310
77189: NOT
77190: IFFALSE 77237
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77192: CALL_OW 45
77196: PPUSH
77197: LD_VAR 0 2
77201: PUSH
77202: LD_INT 1
77204: ARRAY
77205: PPUSH
77206: CALL_OW 250
77210: PPUSH
77211: LD_VAR 0 2
77215: PUSH
77216: LD_INT 1
77218: ARRAY
77219: PPUSH
77220: CALL_OW 251
77224: PPUSH
77225: LD_INT 12
77227: PPUSH
77228: LD_INT 1
77230: PPUSH
77231: CALL_OW 50
77235: GO 77249
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77237: CALL_OW 45
77241: PPUSH
77242: LD_INT 1
77244: PPUSH
77245: CALL_OW 51
// end ;
77249: GO 77123
77251: POP
77252: POP
// end ;
77253: PPOPN 2
77255: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77256: LD_EXP 59
77260: PUSH
77261: LD_EXP 105
77265: AND
77266: IFFALSE 77488
77268: GO 77270
77270: DISABLE
77271: LD_INT 0
77273: PPUSH
77274: PPUSH
77275: PPUSH
77276: PPUSH
77277: PPUSH
77278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77279: LD_ADDR_VAR 0 6
77283: PUSH
77284: LD_INT 22
77286: PUSH
77287: LD_OWVAR 2
77291: PUSH
77292: EMPTY
77293: LIST
77294: LIST
77295: PUSH
77296: LD_INT 21
77298: PUSH
77299: LD_INT 1
77301: PUSH
77302: EMPTY
77303: LIST
77304: LIST
77305: PUSH
77306: LD_INT 3
77308: PUSH
77309: LD_INT 23
77311: PUSH
77312: LD_INT 0
77314: PUSH
77315: EMPTY
77316: LIST
77317: LIST
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: PUSH
77323: EMPTY
77324: LIST
77325: LIST
77326: LIST
77327: PPUSH
77328: CALL_OW 69
77332: ST_TO_ADDR
// if not tmp then
77333: LD_VAR 0 6
77337: NOT
77338: IFFALSE 77342
// exit ;
77340: GO 77488
// s1 := rand ( 1 , 4 ) ;
77342: LD_ADDR_VAR 0 2
77346: PUSH
77347: LD_INT 1
77349: PPUSH
77350: LD_INT 4
77352: PPUSH
77353: CALL_OW 12
77357: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77358: LD_ADDR_VAR 0 4
77362: PUSH
77363: LD_VAR 0 6
77367: PUSH
77368: LD_INT 1
77370: ARRAY
77371: PPUSH
77372: LD_VAR 0 2
77376: PPUSH
77377: CALL_OW 259
77381: ST_TO_ADDR
// if s1 = 1 then
77382: LD_VAR 0 2
77386: PUSH
77387: LD_INT 1
77389: EQUAL
77390: IFFALSE 77410
// s2 := rand ( 2 , 4 ) else
77392: LD_ADDR_VAR 0 3
77396: PUSH
77397: LD_INT 2
77399: PPUSH
77400: LD_INT 4
77402: PPUSH
77403: CALL_OW 12
77407: ST_TO_ADDR
77408: GO 77418
// s2 := 1 ;
77410: LD_ADDR_VAR 0 3
77414: PUSH
77415: LD_INT 1
77417: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
77418: LD_ADDR_VAR 0 5
77422: PUSH
77423: LD_VAR 0 6
77427: PUSH
77428: LD_INT 1
77430: ARRAY
77431: PPUSH
77432: LD_VAR 0 3
77436: PPUSH
77437: CALL_OW 259
77441: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
77442: LD_VAR 0 6
77446: PUSH
77447: LD_INT 1
77449: ARRAY
77450: PPUSH
77451: LD_VAR 0 2
77455: PPUSH
77456: LD_VAR 0 5
77460: PPUSH
77461: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
77465: LD_VAR 0 6
77469: PUSH
77470: LD_INT 1
77472: ARRAY
77473: PPUSH
77474: LD_VAR 0 3
77478: PPUSH
77479: LD_VAR 0 4
77483: PPUSH
77484: CALL_OW 237
// end ;
77488: PPOPN 6
77490: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
77491: LD_EXP 59
77495: PUSH
77496: LD_EXP 106
77500: AND
77501: IFFALSE 77580
77503: GO 77505
77505: DISABLE
77506: LD_INT 0
77508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
77509: LD_ADDR_VAR 0 1
77513: PUSH
77514: LD_INT 22
77516: PUSH
77517: LD_OWVAR 2
77521: PUSH
77522: EMPTY
77523: LIST
77524: LIST
77525: PUSH
77526: LD_INT 30
77528: PUSH
77529: LD_INT 3
77531: PUSH
77532: EMPTY
77533: LIST
77534: LIST
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: PPUSH
77540: CALL_OW 69
77544: ST_TO_ADDR
// if not tmp then
77545: LD_VAR 0 1
77549: NOT
77550: IFFALSE 77554
// exit ;
77552: GO 77580
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77554: LD_VAR 0 1
77558: PUSH
77559: LD_INT 1
77561: PPUSH
77562: LD_VAR 0 1
77566: PPUSH
77567: CALL_OW 12
77571: ARRAY
77572: PPUSH
77573: LD_INT 1
77575: PPUSH
77576: CALL_OW 234
// end ;
77580: PPOPN 1
77582: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
77583: LD_EXP 59
77587: PUSH
77588: LD_EXP 107
77592: AND
77593: IFFALSE 77705
77595: GO 77597
77597: DISABLE
77598: LD_INT 0
77600: PPUSH
77601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
77602: LD_ADDR_VAR 0 2
77606: PUSH
77607: LD_INT 22
77609: PUSH
77610: LD_OWVAR 2
77614: PUSH
77615: EMPTY
77616: LIST
77617: LIST
77618: PUSH
77619: LD_INT 2
77621: PUSH
77622: LD_INT 30
77624: PUSH
77625: LD_INT 27
77627: PUSH
77628: EMPTY
77629: LIST
77630: LIST
77631: PUSH
77632: LD_INT 30
77634: PUSH
77635: LD_INT 26
77637: PUSH
77638: EMPTY
77639: LIST
77640: LIST
77641: PUSH
77642: LD_INT 30
77644: PUSH
77645: LD_INT 28
77647: PUSH
77648: EMPTY
77649: LIST
77650: LIST
77651: PUSH
77652: EMPTY
77653: LIST
77654: LIST
77655: LIST
77656: LIST
77657: PUSH
77658: EMPTY
77659: LIST
77660: LIST
77661: PPUSH
77662: CALL_OW 69
77666: ST_TO_ADDR
// if not tmp then
77667: LD_VAR 0 2
77671: NOT
77672: IFFALSE 77676
// exit ;
77674: GO 77705
// for i in tmp do
77676: LD_ADDR_VAR 0 1
77680: PUSH
77681: LD_VAR 0 2
77685: PUSH
77686: FOR_IN
77687: IFFALSE 77703
// SetLives ( i , 1 ) ;
77689: LD_VAR 0 1
77693: PPUSH
77694: LD_INT 1
77696: PPUSH
77697: CALL_OW 234
77701: GO 77686
77703: POP
77704: POP
// end ;
77705: PPOPN 2
77707: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
77708: LD_EXP 59
77712: PUSH
77713: LD_EXP 108
77717: AND
77718: IFFALSE 78005
77720: GO 77722
77722: DISABLE
77723: LD_INT 0
77725: PPUSH
77726: PPUSH
77727: PPUSH
// begin i := rand ( 1 , 7 ) ;
77728: LD_ADDR_VAR 0 1
77732: PUSH
77733: LD_INT 1
77735: PPUSH
77736: LD_INT 7
77738: PPUSH
77739: CALL_OW 12
77743: ST_TO_ADDR
// case i of 1 :
77744: LD_VAR 0 1
77748: PUSH
77749: LD_INT 1
77751: DOUBLE
77752: EQUAL
77753: IFTRUE 77757
77755: GO 77767
77757: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
77758: LD_STRING earthquake(getX(game), 0, 32)
77760: PPUSH
77761: CALL_OW 559
77765: GO 78005
77767: LD_INT 2
77769: DOUBLE
77770: EQUAL
77771: IFTRUE 77775
77773: GO 77789
77775: POP
// begin ToLua ( displayStucuk(); ) ;
77776: LD_STRING displayStucuk();
77778: PPUSH
77779: CALL_OW 559
// ResetFog ;
77783: CALL_OW 335
// end ; 3 :
77787: GO 78005
77789: LD_INT 3
77791: DOUBLE
77792: EQUAL
77793: IFTRUE 77797
77795: GO 77901
77797: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77798: LD_ADDR_VAR 0 2
77802: PUSH
77803: LD_INT 22
77805: PUSH
77806: LD_OWVAR 2
77810: PUSH
77811: EMPTY
77812: LIST
77813: LIST
77814: PUSH
77815: LD_INT 25
77817: PUSH
77818: LD_INT 1
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: PPUSH
77829: CALL_OW 69
77833: ST_TO_ADDR
// if not tmp then
77834: LD_VAR 0 2
77838: NOT
77839: IFFALSE 77843
// exit ;
77841: GO 78005
// un := tmp [ rand ( 1 , tmp ) ] ;
77843: LD_ADDR_VAR 0 3
77847: PUSH
77848: LD_VAR 0 2
77852: PUSH
77853: LD_INT 1
77855: PPUSH
77856: LD_VAR 0 2
77860: PPUSH
77861: CALL_OW 12
77865: ARRAY
77866: ST_TO_ADDR
// if Crawls ( un ) then
77867: LD_VAR 0 3
77871: PPUSH
77872: CALL_OW 318
77876: IFFALSE 77887
// ComWalk ( un ) ;
77878: LD_VAR 0 3
77882: PPUSH
77883: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77887: LD_VAR 0 3
77891: PPUSH
77892: LD_INT 8
77894: PPUSH
77895: CALL_OW 336
// end ; 4 :
77899: GO 78005
77901: LD_INT 4
77903: DOUBLE
77904: EQUAL
77905: IFTRUE 77909
77907: GO 77983
77909: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77910: LD_ADDR_VAR 0 2
77914: PUSH
77915: LD_INT 22
77917: PUSH
77918: LD_OWVAR 2
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: PUSH
77927: LD_INT 30
77929: PUSH
77930: LD_INT 29
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: PUSH
77937: EMPTY
77938: LIST
77939: LIST
77940: PPUSH
77941: CALL_OW 69
77945: ST_TO_ADDR
// if not tmp then
77946: LD_VAR 0 2
77950: NOT
77951: IFFALSE 77955
// exit ;
77953: GO 78005
// CenterNowOnUnits ( tmp [ 1 ] ) ;
77955: LD_VAR 0 2
77959: PUSH
77960: LD_INT 1
77962: ARRAY
77963: PPUSH
77964: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
77968: LD_VAR 0 2
77972: PUSH
77973: LD_INT 1
77975: ARRAY
77976: PPUSH
77977: CALL_OW 65
// end ; 5 .. 7 :
77981: GO 78005
77983: LD_INT 5
77985: DOUBLE
77986: GREATEREQUAL
77987: IFFALSE 77995
77989: LD_INT 7
77991: DOUBLE
77992: LESSEQUAL
77993: IFTRUE 77997
77995: GO 78004
77997: POP
// StreamSibBomb ; end ;
77998: CALL 74242 0 0
78002: GO 78005
78004: POP
// end ;
78005: PPOPN 3
78007: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78008: LD_EXP 59
78012: PUSH
78013: LD_EXP 109
78017: AND
78018: IFFALSE 78174
78020: GO 78022
78022: DISABLE
78023: LD_INT 0
78025: PPUSH
78026: PPUSH
78027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78028: LD_ADDR_VAR 0 2
78032: PUSH
78033: LD_INT 81
78035: PUSH
78036: LD_OWVAR 2
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: PUSH
78045: LD_INT 2
78047: PUSH
78048: LD_INT 21
78050: PUSH
78051: LD_INT 1
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: PUSH
78058: LD_INT 21
78060: PUSH
78061: LD_INT 2
78063: PUSH
78064: EMPTY
78065: LIST
78066: LIST
78067: PUSH
78068: EMPTY
78069: LIST
78070: LIST
78071: LIST
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: PPUSH
78077: CALL_OW 69
78081: ST_TO_ADDR
// if not tmp then
78082: LD_VAR 0 2
78086: NOT
78087: IFFALSE 78091
// exit ;
78089: GO 78174
// p := 0 ;
78091: LD_ADDR_VAR 0 3
78095: PUSH
78096: LD_INT 0
78098: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78099: LD_INT 35
78101: PPUSH
78102: CALL_OW 67
// p := p + 1 ;
78106: LD_ADDR_VAR 0 3
78110: PUSH
78111: LD_VAR 0 3
78115: PUSH
78116: LD_INT 1
78118: PLUS
78119: ST_TO_ADDR
// for i in tmp do
78120: LD_ADDR_VAR 0 1
78124: PUSH
78125: LD_VAR 0 2
78129: PUSH
78130: FOR_IN
78131: IFFALSE 78162
// if GetLives ( i ) < 1000 then
78133: LD_VAR 0 1
78137: PPUSH
78138: CALL_OW 256
78142: PUSH
78143: LD_INT 1000
78145: LESS
78146: IFFALSE 78160
// SetLives ( i , 1000 ) ;
78148: LD_VAR 0 1
78152: PPUSH
78153: LD_INT 1000
78155: PPUSH
78156: CALL_OW 234
78160: GO 78130
78162: POP
78163: POP
// until p > 20 ;
78164: LD_VAR 0 3
78168: PUSH
78169: LD_INT 20
78171: GREATER
78172: IFFALSE 78099
// end ;
78174: PPOPN 3
78176: END
// every 0 0$1 trigger StreamModeActive and sTime do
78177: LD_EXP 59
78181: PUSH
78182: LD_EXP 110
78186: AND
78187: IFFALSE 78222
78189: GO 78191
78191: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78192: LD_INT 28
78194: PPUSH
78195: LD_OWVAR 2
78199: PPUSH
78200: LD_INT 2
78202: PPUSH
78203: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78207: LD_INT 30
78209: PPUSH
78210: LD_OWVAR 2
78214: PPUSH
78215: LD_INT 2
78217: PPUSH
78218: CALL_OW 322
// end ;
78222: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78223: LD_EXP 59
78227: PUSH
78228: LD_EXP 111
78232: AND
78233: IFFALSE 78354
78235: GO 78237
78237: DISABLE
78238: LD_INT 0
78240: PPUSH
78241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78242: LD_ADDR_VAR 0 2
78246: PUSH
78247: LD_INT 22
78249: PUSH
78250: LD_OWVAR 2
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: PUSH
78259: LD_INT 21
78261: PUSH
78262: LD_INT 1
78264: PUSH
78265: EMPTY
78266: LIST
78267: LIST
78268: PUSH
78269: LD_INT 3
78271: PUSH
78272: LD_INT 23
78274: PUSH
78275: LD_INT 0
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: PUSH
78286: EMPTY
78287: LIST
78288: LIST
78289: LIST
78290: PPUSH
78291: CALL_OW 69
78295: ST_TO_ADDR
// if not tmp then
78296: LD_VAR 0 2
78300: NOT
78301: IFFALSE 78305
// exit ;
78303: GO 78354
// for i in tmp do
78305: LD_ADDR_VAR 0 1
78309: PUSH
78310: LD_VAR 0 2
78314: PUSH
78315: FOR_IN
78316: IFFALSE 78352
// begin if Crawls ( i ) then
78318: LD_VAR 0 1
78322: PPUSH
78323: CALL_OW 318
78327: IFFALSE 78338
// ComWalk ( i ) ;
78329: LD_VAR 0 1
78333: PPUSH
78334: CALL_OW 138
// SetClass ( i , 2 ) ;
78338: LD_VAR 0 1
78342: PPUSH
78343: LD_INT 2
78345: PPUSH
78346: CALL_OW 336
// end ;
78350: GO 78315
78352: POP
78353: POP
// end ;
78354: PPOPN 2
78356: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78357: LD_EXP 59
78361: PUSH
78362: LD_EXP 112
78366: AND
78367: IFFALSE 78655
78369: GO 78371
78371: DISABLE
78372: LD_INT 0
78374: PPUSH
78375: PPUSH
78376: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78377: LD_OWVAR 2
78381: PPUSH
78382: LD_INT 9
78384: PPUSH
78385: LD_INT 1
78387: PPUSH
78388: LD_INT 1
78390: PPUSH
78391: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78395: LD_INT 9
78397: PPUSH
78398: LD_OWVAR 2
78402: PPUSH
78403: CALL_OW 343
// uc_side := 9 ;
78407: LD_ADDR_OWVAR 20
78411: PUSH
78412: LD_INT 9
78414: ST_TO_ADDR
// uc_nation := 2 ;
78415: LD_ADDR_OWVAR 21
78419: PUSH
78420: LD_INT 2
78422: ST_TO_ADDR
// hc_name := Dark Warrior ;
78423: LD_ADDR_OWVAR 26
78427: PUSH
78428: LD_STRING Dark Warrior
78430: ST_TO_ADDR
// hc_gallery :=  ;
78431: LD_ADDR_OWVAR 33
78435: PUSH
78436: LD_STRING 
78438: ST_TO_ADDR
// hc_noskilllimit := true ;
78439: LD_ADDR_OWVAR 76
78443: PUSH
78444: LD_INT 1
78446: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
78447: LD_ADDR_OWVAR 31
78451: PUSH
78452: LD_INT 30
78454: PUSH
78455: LD_INT 30
78457: PUSH
78458: LD_INT 30
78460: PUSH
78461: LD_INT 30
78463: PUSH
78464: EMPTY
78465: LIST
78466: LIST
78467: LIST
78468: LIST
78469: ST_TO_ADDR
// un := CreateHuman ;
78470: LD_ADDR_VAR 0 3
78474: PUSH
78475: CALL_OW 44
78479: ST_TO_ADDR
// hc_noskilllimit := false ;
78480: LD_ADDR_OWVAR 76
78484: PUSH
78485: LD_INT 0
78487: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78488: LD_VAR 0 3
78492: PPUSH
78493: LD_INT 1
78495: PPUSH
78496: CALL_OW 51
// ToLua ( playRanger() ) ;
78500: LD_STRING playRanger()
78502: PPUSH
78503: CALL_OW 559
// p := 0 ;
78507: LD_ADDR_VAR 0 2
78511: PUSH
78512: LD_INT 0
78514: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78515: LD_INT 35
78517: PPUSH
78518: CALL_OW 67
// p := p + 1 ;
78522: LD_ADDR_VAR 0 2
78526: PUSH
78527: LD_VAR 0 2
78531: PUSH
78532: LD_INT 1
78534: PLUS
78535: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
78536: LD_VAR 0 3
78540: PPUSH
78541: CALL_OW 256
78545: PUSH
78546: LD_INT 1000
78548: LESS
78549: IFFALSE 78563
// SetLives ( un , 1000 ) ;
78551: LD_VAR 0 3
78555: PPUSH
78556: LD_INT 1000
78558: PPUSH
78559: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
78563: LD_VAR 0 3
78567: PPUSH
78568: LD_INT 81
78570: PUSH
78571: LD_OWVAR 2
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: PUSH
78580: LD_INT 91
78582: PUSH
78583: LD_VAR 0 3
78587: PUSH
78588: LD_INT 30
78590: PUSH
78591: EMPTY
78592: LIST
78593: LIST
78594: LIST
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: PPUSH
78600: CALL_OW 69
78604: PPUSH
78605: LD_VAR 0 3
78609: PPUSH
78610: CALL_OW 74
78614: PPUSH
78615: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
78619: LD_VAR 0 2
78623: PUSH
78624: LD_INT 80
78626: GREATER
78627: PUSH
78628: LD_VAR 0 3
78632: PPUSH
78633: CALL_OW 301
78637: OR
78638: IFFALSE 78515
// if un then
78640: LD_VAR 0 3
78644: IFFALSE 78655
// RemoveUnit ( un ) ;
78646: LD_VAR 0 3
78650: PPUSH
78651: CALL_OW 64
// end ;
78655: PPOPN 3
78657: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
78658: LD_EXP 113
78662: IFFALSE 78778
78664: GO 78666
78666: DISABLE
78667: LD_INT 0
78669: PPUSH
78670: PPUSH
78671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78672: LD_ADDR_VAR 0 2
78676: PUSH
78677: LD_INT 81
78679: PUSH
78680: LD_OWVAR 2
78684: PUSH
78685: EMPTY
78686: LIST
78687: LIST
78688: PUSH
78689: LD_INT 21
78691: PUSH
78692: LD_INT 1
78694: PUSH
78695: EMPTY
78696: LIST
78697: LIST
78698: PUSH
78699: EMPTY
78700: LIST
78701: LIST
78702: PPUSH
78703: CALL_OW 69
78707: ST_TO_ADDR
// ToLua ( playComputer() ) ;
78708: LD_STRING playComputer()
78710: PPUSH
78711: CALL_OW 559
// if not tmp then
78715: LD_VAR 0 2
78719: NOT
78720: IFFALSE 78724
// exit ;
78722: GO 78778
// for i in tmp do
78724: LD_ADDR_VAR 0 1
78728: PUSH
78729: LD_VAR 0 2
78733: PUSH
78734: FOR_IN
78735: IFFALSE 78776
// for j := 1 to 4 do
78737: LD_ADDR_VAR 0 3
78741: PUSH
78742: DOUBLE
78743: LD_INT 1
78745: DEC
78746: ST_TO_ADDR
78747: LD_INT 4
78749: PUSH
78750: FOR_TO
78751: IFFALSE 78772
// SetSkill ( i , j , 10 ) ;
78753: LD_VAR 0 1
78757: PPUSH
78758: LD_VAR 0 3
78762: PPUSH
78763: LD_INT 10
78765: PPUSH
78766: CALL_OW 237
78770: GO 78750
78772: POP
78773: POP
78774: GO 78734
78776: POP
78777: POP
// end ;
78778: PPOPN 3
78780: END
// every 0 0$1 trigger s30 do var i , tmp ;
78781: LD_EXP 114
78785: IFFALSE 78854
78787: GO 78789
78789: DISABLE
78790: LD_INT 0
78792: PPUSH
78793: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78794: LD_ADDR_VAR 0 2
78798: PUSH
78799: LD_INT 22
78801: PUSH
78802: LD_OWVAR 2
78806: PUSH
78807: EMPTY
78808: LIST
78809: LIST
78810: PPUSH
78811: CALL_OW 69
78815: ST_TO_ADDR
// if not tmp then
78816: LD_VAR 0 2
78820: NOT
78821: IFFALSE 78825
// exit ;
78823: GO 78854
// for i in tmp do
78825: LD_ADDR_VAR 0 1
78829: PUSH
78830: LD_VAR 0 2
78834: PUSH
78835: FOR_IN
78836: IFFALSE 78852
// SetLives ( i , 300 ) ;
78838: LD_VAR 0 1
78842: PPUSH
78843: LD_INT 300
78845: PPUSH
78846: CALL_OW 234
78850: GO 78835
78852: POP
78853: POP
// end ;
78854: PPOPN 2
78856: END
// every 0 0$1 trigger s60 do var i , tmp ;
78857: LD_EXP 115
78861: IFFALSE 78930
78863: GO 78865
78865: DISABLE
78866: LD_INT 0
78868: PPUSH
78869: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78870: LD_ADDR_VAR 0 2
78874: PUSH
78875: LD_INT 22
78877: PUSH
78878: LD_OWVAR 2
78882: PUSH
78883: EMPTY
78884: LIST
78885: LIST
78886: PPUSH
78887: CALL_OW 69
78891: ST_TO_ADDR
// if not tmp then
78892: LD_VAR 0 2
78896: NOT
78897: IFFALSE 78901
// exit ;
78899: GO 78930
// for i in tmp do
78901: LD_ADDR_VAR 0 1
78905: PUSH
78906: LD_VAR 0 2
78910: PUSH
78911: FOR_IN
78912: IFFALSE 78928
// SetLives ( i , 600 ) ;
78914: LD_VAR 0 1
78918: PPUSH
78919: LD_INT 600
78921: PPUSH
78922: CALL_OW 234
78926: GO 78911
78928: POP
78929: POP
// end ;
78930: PPOPN 2
78932: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
78933: LD_INT 0
78935: PPUSH
// case cmd of 301 :
78936: LD_VAR 0 1
78940: PUSH
78941: LD_INT 301
78943: DOUBLE
78944: EQUAL
78945: IFTRUE 78949
78947: GO 78981
78949: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
78950: LD_VAR 0 6
78954: PPUSH
78955: LD_VAR 0 7
78959: PPUSH
78960: LD_VAR 0 8
78964: PPUSH
78965: LD_VAR 0 4
78969: PPUSH
78970: LD_VAR 0 5
78974: PPUSH
78975: CALL 80182 0 5
78979: GO 79102
78981: LD_INT 302
78983: DOUBLE
78984: EQUAL
78985: IFTRUE 78989
78987: GO 79026
78989: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
78990: LD_VAR 0 6
78994: PPUSH
78995: LD_VAR 0 7
78999: PPUSH
79000: LD_VAR 0 8
79004: PPUSH
79005: LD_VAR 0 9
79009: PPUSH
79010: LD_VAR 0 4
79014: PPUSH
79015: LD_VAR 0 5
79019: PPUSH
79020: CALL 80273 0 6
79024: GO 79102
79026: LD_INT 303
79028: DOUBLE
79029: EQUAL
79030: IFTRUE 79034
79032: GO 79071
79034: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
79035: LD_VAR 0 6
79039: PPUSH
79040: LD_VAR 0 7
79044: PPUSH
79045: LD_VAR 0 8
79049: PPUSH
79050: LD_VAR 0 9
79054: PPUSH
79055: LD_VAR 0 4
79059: PPUSH
79060: LD_VAR 0 5
79064: PPUSH
79065: CALL 79107 0 6
79069: GO 79102
79071: LD_INT 304
79073: DOUBLE
79074: EQUAL
79075: IFTRUE 79079
79077: GO 79101
79079: POP
// hHackTeleport ( unit , x , y ) ; end ;
79080: LD_VAR 0 2
79084: PPUSH
79085: LD_VAR 0 4
79089: PPUSH
79090: LD_VAR 0 5
79094: PPUSH
79095: CALL 80866 0 3
79099: GO 79102
79101: POP
// end ;
79102: LD_VAR 0 12
79106: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
79107: LD_INT 0
79109: PPUSH
79110: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
79111: LD_VAR 0 1
79115: PUSH
79116: LD_INT 1
79118: LESS
79119: PUSH
79120: LD_VAR 0 1
79124: PUSH
79125: LD_INT 3
79127: GREATER
79128: OR
79129: PUSH
79130: LD_VAR 0 5
79134: PPUSH
79135: LD_VAR 0 6
79139: PPUSH
79140: CALL_OW 428
79144: OR
79145: IFFALSE 79149
// exit ;
79147: GO 79869
// uc_side := your_side ;
79149: LD_ADDR_OWVAR 20
79153: PUSH
79154: LD_OWVAR 2
79158: ST_TO_ADDR
// uc_nation := nation ;
79159: LD_ADDR_OWVAR 21
79163: PUSH
79164: LD_VAR 0 1
79168: ST_TO_ADDR
// bc_level = 1 ;
79169: LD_ADDR_OWVAR 43
79173: PUSH
79174: LD_INT 1
79176: ST_TO_ADDR
// case btype of 1 :
79177: LD_VAR 0 2
79181: PUSH
79182: LD_INT 1
79184: DOUBLE
79185: EQUAL
79186: IFTRUE 79190
79188: GO 79201
79190: POP
// bc_type := b_depot ; 2 :
79191: LD_ADDR_OWVAR 42
79195: PUSH
79196: LD_INT 0
79198: ST_TO_ADDR
79199: GO 79813
79201: LD_INT 2
79203: DOUBLE
79204: EQUAL
79205: IFTRUE 79209
79207: GO 79220
79209: POP
// bc_type := b_warehouse ; 3 :
79210: LD_ADDR_OWVAR 42
79214: PUSH
79215: LD_INT 1
79217: ST_TO_ADDR
79218: GO 79813
79220: LD_INT 3
79222: DOUBLE
79223: EQUAL
79224: IFTRUE 79228
79226: GO 79239
79228: POP
// bc_type := b_lab ; 4 .. 9 :
79229: LD_ADDR_OWVAR 42
79233: PUSH
79234: LD_INT 6
79236: ST_TO_ADDR
79237: GO 79813
79239: LD_INT 4
79241: DOUBLE
79242: GREATEREQUAL
79243: IFFALSE 79251
79245: LD_INT 9
79247: DOUBLE
79248: LESSEQUAL
79249: IFTRUE 79253
79251: GO 79305
79253: POP
// begin bc_type := b_lab_half ;
79254: LD_ADDR_OWVAR 42
79258: PUSH
79259: LD_INT 7
79261: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
79262: LD_ADDR_OWVAR 44
79266: PUSH
79267: LD_INT 10
79269: PUSH
79270: LD_INT 11
79272: PUSH
79273: LD_INT 12
79275: PUSH
79276: LD_INT 15
79278: PUSH
79279: LD_INT 14
79281: PUSH
79282: LD_INT 13
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: LIST
79289: LIST
79290: LIST
79291: LIST
79292: PUSH
79293: LD_VAR 0 2
79297: PUSH
79298: LD_INT 3
79300: MINUS
79301: ARRAY
79302: ST_TO_ADDR
// end ; 10 .. 13 :
79303: GO 79813
79305: LD_INT 10
79307: DOUBLE
79308: GREATEREQUAL
79309: IFFALSE 79317
79311: LD_INT 13
79313: DOUBLE
79314: LESSEQUAL
79315: IFTRUE 79319
79317: GO 79396
79319: POP
// begin bc_type := b_lab_full ;
79320: LD_ADDR_OWVAR 42
79324: PUSH
79325: LD_INT 8
79327: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
79328: LD_ADDR_OWVAR 44
79332: PUSH
79333: LD_INT 10
79335: PUSH
79336: LD_INT 12
79338: PUSH
79339: LD_INT 14
79341: PUSH
79342: LD_INT 13
79344: PUSH
79345: EMPTY
79346: LIST
79347: LIST
79348: LIST
79349: LIST
79350: PUSH
79351: LD_VAR 0 2
79355: PUSH
79356: LD_INT 9
79358: MINUS
79359: ARRAY
79360: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
79361: LD_ADDR_OWVAR 45
79365: PUSH
79366: LD_INT 11
79368: PUSH
79369: LD_INT 15
79371: PUSH
79372: LD_INT 12
79374: PUSH
79375: LD_INT 15
79377: PUSH
79378: EMPTY
79379: LIST
79380: LIST
79381: LIST
79382: LIST
79383: PUSH
79384: LD_VAR 0 2
79388: PUSH
79389: LD_INT 9
79391: MINUS
79392: ARRAY
79393: ST_TO_ADDR
// end ; 14 :
79394: GO 79813
79396: LD_INT 14
79398: DOUBLE
79399: EQUAL
79400: IFTRUE 79404
79402: GO 79415
79404: POP
// bc_type := b_workshop ; 15 :
79405: LD_ADDR_OWVAR 42
79409: PUSH
79410: LD_INT 2
79412: ST_TO_ADDR
79413: GO 79813
79415: LD_INT 15
79417: DOUBLE
79418: EQUAL
79419: IFTRUE 79423
79421: GO 79434
79423: POP
// bc_type := b_factory ; 16 :
79424: LD_ADDR_OWVAR 42
79428: PUSH
79429: LD_INT 3
79431: ST_TO_ADDR
79432: GO 79813
79434: LD_INT 16
79436: DOUBLE
79437: EQUAL
79438: IFTRUE 79442
79440: GO 79453
79442: POP
// bc_type := b_ext_gun ; 17 :
79443: LD_ADDR_OWVAR 42
79447: PUSH
79448: LD_INT 17
79450: ST_TO_ADDR
79451: GO 79813
79453: LD_INT 17
79455: DOUBLE
79456: EQUAL
79457: IFTRUE 79461
79459: GO 79489
79461: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
79462: LD_ADDR_OWVAR 42
79466: PUSH
79467: LD_INT 19
79469: PUSH
79470: LD_INT 23
79472: PUSH
79473: LD_INT 19
79475: PUSH
79476: EMPTY
79477: LIST
79478: LIST
79479: LIST
79480: PUSH
79481: LD_VAR 0 1
79485: ARRAY
79486: ST_TO_ADDR
79487: GO 79813
79489: LD_INT 18
79491: DOUBLE
79492: EQUAL
79493: IFTRUE 79497
79495: GO 79508
79497: POP
// bc_type := b_ext_radar ; 19 :
79498: LD_ADDR_OWVAR 42
79502: PUSH
79503: LD_INT 20
79505: ST_TO_ADDR
79506: GO 79813
79508: LD_INT 19
79510: DOUBLE
79511: EQUAL
79512: IFTRUE 79516
79514: GO 79527
79516: POP
// bc_type := b_ext_radio ; 20 :
79517: LD_ADDR_OWVAR 42
79521: PUSH
79522: LD_INT 22
79524: ST_TO_ADDR
79525: GO 79813
79527: LD_INT 20
79529: DOUBLE
79530: EQUAL
79531: IFTRUE 79535
79533: GO 79546
79535: POP
// bc_type := b_ext_siberium ; 21 :
79536: LD_ADDR_OWVAR 42
79540: PUSH
79541: LD_INT 21
79543: ST_TO_ADDR
79544: GO 79813
79546: LD_INT 21
79548: DOUBLE
79549: EQUAL
79550: IFTRUE 79554
79552: GO 79565
79554: POP
// bc_type := b_ext_computer ; 22 :
79555: LD_ADDR_OWVAR 42
79559: PUSH
79560: LD_INT 24
79562: ST_TO_ADDR
79563: GO 79813
79565: LD_INT 22
79567: DOUBLE
79568: EQUAL
79569: IFTRUE 79573
79571: GO 79584
79573: POP
// bc_type := b_ext_track ; 23 :
79574: LD_ADDR_OWVAR 42
79578: PUSH
79579: LD_INT 16
79581: ST_TO_ADDR
79582: GO 79813
79584: LD_INT 23
79586: DOUBLE
79587: EQUAL
79588: IFTRUE 79592
79590: GO 79603
79592: POP
// bc_type := b_ext_laser ; 24 :
79593: LD_ADDR_OWVAR 42
79597: PUSH
79598: LD_INT 25
79600: ST_TO_ADDR
79601: GO 79813
79603: LD_INT 24
79605: DOUBLE
79606: EQUAL
79607: IFTRUE 79611
79609: GO 79622
79611: POP
// bc_type := b_control_tower ; 25 :
79612: LD_ADDR_OWVAR 42
79616: PUSH
79617: LD_INT 36
79619: ST_TO_ADDR
79620: GO 79813
79622: LD_INT 25
79624: DOUBLE
79625: EQUAL
79626: IFTRUE 79630
79628: GO 79641
79630: POP
// bc_type := b_breastwork ; 26 :
79631: LD_ADDR_OWVAR 42
79635: PUSH
79636: LD_INT 31
79638: ST_TO_ADDR
79639: GO 79813
79641: LD_INT 26
79643: DOUBLE
79644: EQUAL
79645: IFTRUE 79649
79647: GO 79660
79649: POP
// bc_type := b_bunker ; 27 :
79650: LD_ADDR_OWVAR 42
79654: PUSH
79655: LD_INT 32
79657: ST_TO_ADDR
79658: GO 79813
79660: LD_INT 27
79662: DOUBLE
79663: EQUAL
79664: IFTRUE 79668
79666: GO 79679
79668: POP
// bc_type := b_turret ; 28 :
79669: LD_ADDR_OWVAR 42
79673: PUSH
79674: LD_INT 33
79676: ST_TO_ADDR
79677: GO 79813
79679: LD_INT 28
79681: DOUBLE
79682: EQUAL
79683: IFTRUE 79687
79685: GO 79698
79687: POP
// bc_type := b_armoury ; 29 :
79688: LD_ADDR_OWVAR 42
79692: PUSH
79693: LD_INT 4
79695: ST_TO_ADDR
79696: GO 79813
79698: LD_INT 29
79700: DOUBLE
79701: EQUAL
79702: IFTRUE 79706
79704: GO 79717
79706: POP
// bc_type := b_barracks ; 30 :
79707: LD_ADDR_OWVAR 42
79711: PUSH
79712: LD_INT 5
79714: ST_TO_ADDR
79715: GO 79813
79717: LD_INT 30
79719: DOUBLE
79720: EQUAL
79721: IFTRUE 79725
79723: GO 79736
79725: POP
// bc_type := b_solar_power ; 31 :
79726: LD_ADDR_OWVAR 42
79730: PUSH
79731: LD_INT 27
79733: ST_TO_ADDR
79734: GO 79813
79736: LD_INT 31
79738: DOUBLE
79739: EQUAL
79740: IFTRUE 79744
79742: GO 79755
79744: POP
// bc_type := b_oil_power ; 32 :
79745: LD_ADDR_OWVAR 42
79749: PUSH
79750: LD_INT 26
79752: ST_TO_ADDR
79753: GO 79813
79755: LD_INT 32
79757: DOUBLE
79758: EQUAL
79759: IFTRUE 79763
79761: GO 79774
79763: POP
// bc_type := b_siberite_power ; 33 :
79764: LD_ADDR_OWVAR 42
79768: PUSH
79769: LD_INT 28
79771: ST_TO_ADDR
79772: GO 79813
79774: LD_INT 33
79776: DOUBLE
79777: EQUAL
79778: IFTRUE 79782
79780: GO 79793
79782: POP
// bc_type := b_oil_mine ; 34 :
79783: LD_ADDR_OWVAR 42
79787: PUSH
79788: LD_INT 29
79790: ST_TO_ADDR
79791: GO 79813
79793: LD_INT 34
79795: DOUBLE
79796: EQUAL
79797: IFTRUE 79801
79799: GO 79812
79801: POP
// bc_type := b_siberite_mine ; end ;
79802: LD_ADDR_OWVAR 42
79806: PUSH
79807: LD_INT 30
79809: ST_TO_ADDR
79810: GO 79813
79812: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
79813: LD_ADDR_VAR 0 8
79817: PUSH
79818: LD_VAR 0 5
79822: PPUSH
79823: LD_VAR 0 6
79827: PPUSH
79828: LD_VAR 0 3
79832: PPUSH
79833: CALL_OW 47
79837: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
79838: LD_OWVAR 42
79842: PUSH
79843: LD_INT 32
79845: PUSH
79846: LD_INT 33
79848: PUSH
79849: EMPTY
79850: LIST
79851: LIST
79852: IN
79853: IFFALSE 79869
// PlaceWeaponTurret ( b , weapon ) ;
79855: LD_VAR 0 8
79859: PPUSH
79860: LD_VAR 0 4
79864: PPUSH
79865: CALL_OW 431
// end ;
79869: LD_VAR 0 7
79873: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79874: LD_INT 0
79876: PPUSH
79877: PPUSH
79878: PPUSH
79879: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79880: LD_ADDR_VAR 0 4
79884: PUSH
79885: LD_INT 22
79887: PUSH
79888: LD_OWVAR 2
79892: PUSH
79893: EMPTY
79894: LIST
79895: LIST
79896: PUSH
79897: LD_INT 2
79899: PUSH
79900: LD_INT 30
79902: PUSH
79903: LD_INT 0
79905: PUSH
79906: EMPTY
79907: LIST
79908: LIST
79909: PUSH
79910: LD_INT 30
79912: PUSH
79913: LD_INT 1
79915: PUSH
79916: EMPTY
79917: LIST
79918: LIST
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: LIST
79924: PUSH
79925: EMPTY
79926: LIST
79927: LIST
79928: PPUSH
79929: CALL_OW 69
79933: ST_TO_ADDR
// if not tmp then
79934: LD_VAR 0 4
79938: NOT
79939: IFFALSE 79943
// exit ;
79941: GO 80002
// for i in tmp do
79943: LD_ADDR_VAR 0 2
79947: PUSH
79948: LD_VAR 0 4
79952: PUSH
79953: FOR_IN
79954: IFFALSE 80000
// for j = 1 to 3 do
79956: LD_ADDR_VAR 0 3
79960: PUSH
79961: DOUBLE
79962: LD_INT 1
79964: DEC
79965: ST_TO_ADDR
79966: LD_INT 3
79968: PUSH
79969: FOR_TO
79970: IFFALSE 79996
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
79972: LD_VAR 0 2
79976: PPUSH
79977: CALL_OW 274
79981: PPUSH
79982: LD_VAR 0 3
79986: PPUSH
79987: LD_INT 99999
79989: PPUSH
79990: CALL_OW 277
79994: GO 79969
79996: POP
79997: POP
79998: GO 79953
80000: POP
80001: POP
// end ;
80002: LD_VAR 0 1
80006: RET
// export function hHackSetLevel10 ; var i , j ; begin
80007: LD_INT 0
80009: PPUSH
80010: PPUSH
80011: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80012: LD_ADDR_VAR 0 2
80016: PUSH
80017: LD_INT 21
80019: PUSH
80020: LD_INT 1
80022: PUSH
80023: EMPTY
80024: LIST
80025: LIST
80026: PPUSH
80027: CALL_OW 69
80031: PUSH
80032: FOR_IN
80033: IFFALSE 80085
// if IsSelected ( i ) then
80035: LD_VAR 0 2
80039: PPUSH
80040: CALL_OW 306
80044: IFFALSE 80083
// begin for j := 1 to 4 do
80046: LD_ADDR_VAR 0 3
80050: PUSH
80051: DOUBLE
80052: LD_INT 1
80054: DEC
80055: ST_TO_ADDR
80056: LD_INT 4
80058: PUSH
80059: FOR_TO
80060: IFFALSE 80081
// SetSkill ( i , j , 10 ) ;
80062: LD_VAR 0 2
80066: PPUSH
80067: LD_VAR 0 3
80071: PPUSH
80072: LD_INT 10
80074: PPUSH
80075: CALL_OW 237
80079: GO 80059
80081: POP
80082: POP
// end ;
80083: GO 80032
80085: POP
80086: POP
// end ;
80087: LD_VAR 0 1
80091: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
80092: LD_INT 0
80094: PPUSH
80095: PPUSH
80096: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
80097: LD_ADDR_VAR 0 2
80101: PUSH
80102: LD_INT 22
80104: PUSH
80105: LD_OWVAR 2
80109: PUSH
80110: EMPTY
80111: LIST
80112: LIST
80113: PUSH
80114: LD_INT 21
80116: PUSH
80117: LD_INT 1
80119: PUSH
80120: EMPTY
80121: LIST
80122: LIST
80123: PUSH
80124: EMPTY
80125: LIST
80126: LIST
80127: PPUSH
80128: CALL_OW 69
80132: PUSH
80133: FOR_IN
80134: IFFALSE 80175
// begin for j := 1 to 4 do
80136: LD_ADDR_VAR 0 3
80140: PUSH
80141: DOUBLE
80142: LD_INT 1
80144: DEC
80145: ST_TO_ADDR
80146: LD_INT 4
80148: PUSH
80149: FOR_TO
80150: IFFALSE 80171
// SetSkill ( i , j , 10 ) ;
80152: LD_VAR 0 2
80156: PPUSH
80157: LD_VAR 0 3
80161: PPUSH
80162: LD_INT 10
80164: PPUSH
80165: CALL_OW 237
80169: GO 80149
80171: POP
80172: POP
// end ;
80173: GO 80133
80175: POP
80176: POP
// end ;
80177: LD_VAR 0 1
80181: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
80182: LD_INT 0
80184: PPUSH
// uc_side := your_side ;
80185: LD_ADDR_OWVAR 20
80189: PUSH
80190: LD_OWVAR 2
80194: ST_TO_ADDR
// uc_nation := nation ;
80195: LD_ADDR_OWVAR 21
80199: PUSH
80200: LD_VAR 0 1
80204: ST_TO_ADDR
// InitHc ;
80205: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
80209: LD_INT 0
80211: PPUSH
80212: LD_VAR 0 2
80216: PPUSH
80217: LD_VAR 0 3
80221: PPUSH
80222: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
80226: LD_VAR 0 4
80230: PPUSH
80231: LD_VAR 0 5
80235: PPUSH
80236: CALL_OW 428
80240: PUSH
80241: LD_INT 0
80243: EQUAL
80244: IFFALSE 80268
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
80246: CALL_OW 44
80250: PPUSH
80251: LD_VAR 0 4
80255: PPUSH
80256: LD_VAR 0 5
80260: PPUSH
80261: LD_INT 1
80263: PPUSH
80264: CALL_OW 48
// end ;
80268: LD_VAR 0 6
80272: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
80273: LD_INT 0
80275: PPUSH
80276: PPUSH
// uc_side := your_side ;
80277: LD_ADDR_OWVAR 20
80281: PUSH
80282: LD_OWVAR 2
80286: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
80287: LD_VAR 0 1
80291: PUSH
80292: LD_INT 1
80294: PUSH
80295: LD_INT 2
80297: PUSH
80298: LD_INT 3
80300: PUSH
80301: LD_INT 4
80303: PUSH
80304: LD_INT 5
80306: PUSH
80307: EMPTY
80308: LIST
80309: LIST
80310: LIST
80311: LIST
80312: LIST
80313: IN
80314: IFFALSE 80326
// uc_nation := nation_american else
80316: LD_ADDR_OWVAR 21
80320: PUSH
80321: LD_INT 1
80323: ST_TO_ADDR
80324: GO 80369
// if chassis in [ 11 , 12 , 13 , 14 ] then
80326: LD_VAR 0 1
80330: PUSH
80331: LD_INT 11
80333: PUSH
80334: LD_INT 12
80336: PUSH
80337: LD_INT 13
80339: PUSH
80340: LD_INT 14
80342: PUSH
80343: EMPTY
80344: LIST
80345: LIST
80346: LIST
80347: LIST
80348: IN
80349: IFFALSE 80361
// uc_nation := nation_arabian else
80351: LD_ADDR_OWVAR 21
80355: PUSH
80356: LD_INT 2
80358: ST_TO_ADDR
80359: GO 80369
// uc_nation := nation_russian ;
80361: LD_ADDR_OWVAR 21
80365: PUSH
80366: LD_INT 3
80368: ST_TO_ADDR
// vc_chassis := chassis ;
80369: LD_ADDR_OWVAR 37
80373: PUSH
80374: LD_VAR 0 1
80378: ST_TO_ADDR
// vc_engine := engine ;
80379: LD_ADDR_OWVAR 39
80383: PUSH
80384: LD_VAR 0 2
80388: ST_TO_ADDR
// vc_control := control ;
80389: LD_ADDR_OWVAR 38
80393: PUSH
80394: LD_VAR 0 3
80398: ST_TO_ADDR
// vc_weapon := weapon ;
80399: LD_ADDR_OWVAR 40
80403: PUSH
80404: LD_VAR 0 4
80408: ST_TO_ADDR
// un := CreateVehicle ;
80409: LD_ADDR_VAR 0 8
80413: PUSH
80414: CALL_OW 45
80418: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
80419: LD_VAR 0 8
80423: PPUSH
80424: LD_INT 0
80426: PPUSH
80427: LD_INT 5
80429: PPUSH
80430: CALL_OW 12
80434: PPUSH
80435: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
80439: LD_VAR 0 8
80443: PPUSH
80444: LD_VAR 0 5
80448: PPUSH
80449: LD_VAR 0 6
80453: PPUSH
80454: LD_INT 1
80456: PPUSH
80457: CALL_OW 48
// end ;
80461: LD_VAR 0 7
80465: RET
// export hInvincible ; every 1 do
80466: GO 80468
80468: DISABLE
// hInvincible := [ ] ;
80469: LD_ADDR_EXP 116
80473: PUSH
80474: EMPTY
80475: ST_TO_ADDR
80476: END
// every 10 do var i ;
80477: GO 80479
80479: DISABLE
80480: LD_INT 0
80482: PPUSH
// begin enable ;
80483: ENABLE
// if not hInvincible then
80484: LD_EXP 116
80488: NOT
80489: IFFALSE 80493
// exit ;
80491: GO 80537
// for i in hInvincible do
80493: LD_ADDR_VAR 0 1
80497: PUSH
80498: LD_EXP 116
80502: PUSH
80503: FOR_IN
80504: IFFALSE 80535
// if GetLives ( i ) < 1000 then
80506: LD_VAR 0 1
80510: PPUSH
80511: CALL_OW 256
80515: PUSH
80516: LD_INT 1000
80518: LESS
80519: IFFALSE 80533
// SetLives ( i , 1000 ) ;
80521: LD_VAR 0 1
80525: PPUSH
80526: LD_INT 1000
80528: PPUSH
80529: CALL_OW 234
80533: GO 80503
80535: POP
80536: POP
// end ;
80537: PPOPN 1
80539: END
// export function hHackInvincible ; var i ; begin
80540: LD_INT 0
80542: PPUSH
80543: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
80544: LD_ADDR_VAR 0 2
80548: PUSH
80549: LD_INT 2
80551: PUSH
80552: LD_INT 21
80554: PUSH
80555: LD_INT 1
80557: PUSH
80558: EMPTY
80559: LIST
80560: LIST
80561: PUSH
80562: LD_INT 21
80564: PUSH
80565: LD_INT 2
80567: PUSH
80568: EMPTY
80569: LIST
80570: LIST
80571: PUSH
80572: EMPTY
80573: LIST
80574: LIST
80575: LIST
80576: PPUSH
80577: CALL_OW 69
80581: PUSH
80582: FOR_IN
80583: IFFALSE 80644
// if IsSelected ( i ) then
80585: LD_VAR 0 2
80589: PPUSH
80590: CALL_OW 306
80594: IFFALSE 80642
// begin if i in hInvincible then
80596: LD_VAR 0 2
80600: PUSH
80601: LD_EXP 116
80605: IN
80606: IFFALSE 80626
// hInvincible := hInvincible diff i else
80608: LD_ADDR_EXP 116
80612: PUSH
80613: LD_EXP 116
80617: PUSH
80618: LD_VAR 0 2
80622: DIFF
80623: ST_TO_ADDR
80624: GO 80642
// hInvincible := hInvincible union i ;
80626: LD_ADDR_EXP 116
80630: PUSH
80631: LD_EXP 116
80635: PUSH
80636: LD_VAR 0 2
80640: UNION
80641: ST_TO_ADDR
// end ;
80642: GO 80582
80644: POP
80645: POP
// end ;
80646: LD_VAR 0 1
80650: RET
// export function hHackInvisible ; var i , j ; begin
80651: LD_INT 0
80653: PPUSH
80654: PPUSH
80655: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80656: LD_ADDR_VAR 0 2
80660: PUSH
80661: LD_INT 21
80663: PUSH
80664: LD_INT 1
80666: PUSH
80667: EMPTY
80668: LIST
80669: LIST
80670: PPUSH
80671: CALL_OW 69
80675: PUSH
80676: FOR_IN
80677: IFFALSE 80701
// if IsSelected ( i ) then
80679: LD_VAR 0 2
80683: PPUSH
80684: CALL_OW 306
80688: IFFALSE 80699
// ComForceInvisible ( i ) ;
80690: LD_VAR 0 2
80694: PPUSH
80695: CALL_OW 496
80699: GO 80676
80701: POP
80702: POP
// end ;
80703: LD_VAR 0 1
80707: RET
// export function hHackChangeYourSide ; begin
80708: LD_INT 0
80710: PPUSH
// if your_side = 8 then
80711: LD_OWVAR 2
80715: PUSH
80716: LD_INT 8
80718: EQUAL
80719: IFFALSE 80731
// your_side := 0 else
80721: LD_ADDR_OWVAR 2
80725: PUSH
80726: LD_INT 0
80728: ST_TO_ADDR
80729: GO 80745
// your_side := your_side + 1 ;
80731: LD_ADDR_OWVAR 2
80735: PUSH
80736: LD_OWVAR 2
80740: PUSH
80741: LD_INT 1
80743: PLUS
80744: ST_TO_ADDR
// end ;
80745: LD_VAR 0 1
80749: RET
// export function hHackChangeUnitSide ; var i , j ; begin
80750: LD_INT 0
80752: PPUSH
80753: PPUSH
80754: PPUSH
// for i in all_units do
80755: LD_ADDR_VAR 0 2
80759: PUSH
80760: LD_OWVAR 3
80764: PUSH
80765: FOR_IN
80766: IFFALSE 80844
// if IsSelected ( i ) then
80768: LD_VAR 0 2
80772: PPUSH
80773: CALL_OW 306
80777: IFFALSE 80842
// begin j := GetSide ( i ) ;
80779: LD_ADDR_VAR 0 3
80783: PUSH
80784: LD_VAR 0 2
80788: PPUSH
80789: CALL_OW 255
80793: ST_TO_ADDR
// if j = 8 then
80794: LD_VAR 0 3
80798: PUSH
80799: LD_INT 8
80801: EQUAL
80802: IFFALSE 80814
// j := 0 else
80804: LD_ADDR_VAR 0 3
80808: PUSH
80809: LD_INT 0
80811: ST_TO_ADDR
80812: GO 80828
// j := j + 1 ;
80814: LD_ADDR_VAR 0 3
80818: PUSH
80819: LD_VAR 0 3
80823: PUSH
80824: LD_INT 1
80826: PLUS
80827: ST_TO_ADDR
// SetSide ( i , j ) ;
80828: LD_VAR 0 2
80832: PPUSH
80833: LD_VAR 0 3
80837: PPUSH
80838: CALL_OW 235
// end ;
80842: GO 80765
80844: POP
80845: POP
// end ;
80846: LD_VAR 0 1
80850: RET
// export function hHackFog ; begin
80851: LD_INT 0
80853: PPUSH
// FogOff ( true ) ;
80854: LD_INT 1
80856: PPUSH
80857: CALL_OW 344
// end ;
80861: LD_VAR 0 1
80865: RET
// export function hHackTeleport ( unit , x , y ) ; begin
80866: LD_INT 0
80868: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
80869: LD_VAR 0 1
80873: PPUSH
80874: LD_VAR 0 2
80878: PPUSH
80879: LD_VAR 0 3
80883: PPUSH
80884: LD_INT 1
80886: PPUSH
80887: LD_INT 1
80889: PPUSH
80890: CALL_OW 483
// CenterOnXY ( x , y ) ;
80894: LD_VAR 0 2
80898: PPUSH
80899: LD_VAR 0 3
80903: PPUSH
80904: CALL_OW 84
// end ;
80908: LD_VAR 0 4
80912: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
80913: LD_INT 0
80915: PPUSH
80916: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
80917: LD_VAR 0 1
80921: NOT
80922: PUSH
80923: LD_VAR 0 2
80927: PPUSH
80928: LD_VAR 0 3
80932: PPUSH
80933: CALL_OW 488
80937: NOT
80938: OR
80939: PUSH
80940: LD_VAR 0 1
80944: PPUSH
80945: CALL_OW 266
80949: PUSH
80950: LD_INT 3
80952: NONEQUAL
80953: PUSH
80954: LD_VAR 0 1
80958: PPUSH
80959: CALL_OW 247
80963: PUSH
80964: LD_INT 1
80966: EQUAL
80967: NOT
80968: AND
80969: OR
80970: IFFALSE 80974
// exit ;
80972: GO 81123
// if GetType ( factory ) = unit_human then
80974: LD_VAR 0 1
80978: PPUSH
80979: CALL_OW 247
80983: PUSH
80984: LD_INT 1
80986: EQUAL
80987: IFFALSE 81004
// factory := IsInUnit ( factory ) ;
80989: LD_ADDR_VAR 0 1
80993: PUSH
80994: LD_VAR 0 1
80998: PPUSH
80999: CALL_OW 310
81003: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
81004: LD_VAR 0 1
81008: PPUSH
81009: CALL_OW 266
81013: PUSH
81014: LD_INT 3
81016: NONEQUAL
81017: IFFALSE 81021
// exit ;
81019: GO 81123
// if HexInfo ( x , y ) = factory then
81021: LD_VAR 0 2
81025: PPUSH
81026: LD_VAR 0 3
81030: PPUSH
81031: CALL_OW 428
81035: PUSH
81036: LD_VAR 0 1
81040: EQUAL
81041: IFFALSE 81068
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
81043: LD_ADDR_EXP 117
81047: PUSH
81048: LD_EXP 117
81052: PPUSH
81053: LD_VAR 0 1
81057: PPUSH
81058: LD_INT 0
81060: PPUSH
81061: CALL_OW 1
81065: ST_TO_ADDR
81066: GO 81119
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
81068: LD_ADDR_EXP 117
81072: PUSH
81073: LD_EXP 117
81077: PPUSH
81078: LD_VAR 0 1
81082: PPUSH
81083: LD_VAR 0 1
81087: PPUSH
81088: CALL_OW 255
81092: PUSH
81093: LD_VAR 0 1
81097: PUSH
81098: LD_VAR 0 2
81102: PUSH
81103: LD_VAR 0 3
81107: PUSH
81108: EMPTY
81109: LIST
81110: LIST
81111: LIST
81112: LIST
81113: PPUSH
81114: CALL_OW 1
81118: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81119: CALL 81128 0 0
// end ;
81123: LD_VAR 0 4
81127: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
81128: LD_INT 0
81130: PPUSH
81131: PPUSH
81132: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
81133: LD_STRING resetFactoryWaypoint();
81135: PPUSH
81136: CALL_OW 559
// if factoryWaypoints then
81140: LD_EXP 117
81144: IFFALSE 81270
// begin list := PrepareArray ( factoryWaypoints ) ;
81146: LD_ADDR_VAR 0 3
81150: PUSH
81151: LD_EXP 117
81155: PPUSH
81156: CALL 66414 0 1
81160: ST_TO_ADDR
// for i := 1 to list do
81161: LD_ADDR_VAR 0 2
81165: PUSH
81166: DOUBLE
81167: LD_INT 1
81169: DEC
81170: ST_TO_ADDR
81171: LD_VAR 0 3
81175: PUSH
81176: FOR_TO
81177: IFFALSE 81268
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81179: LD_STRING setFactoryWaypointXY(
81181: PUSH
81182: LD_VAR 0 3
81186: PUSH
81187: LD_VAR 0 2
81191: ARRAY
81192: PUSH
81193: LD_INT 1
81195: ARRAY
81196: STR
81197: PUSH
81198: LD_STRING ,
81200: STR
81201: PUSH
81202: LD_VAR 0 3
81206: PUSH
81207: LD_VAR 0 2
81211: ARRAY
81212: PUSH
81213: LD_INT 2
81215: ARRAY
81216: STR
81217: PUSH
81218: LD_STRING ,
81220: STR
81221: PUSH
81222: LD_VAR 0 3
81226: PUSH
81227: LD_VAR 0 2
81231: ARRAY
81232: PUSH
81233: LD_INT 3
81235: ARRAY
81236: STR
81237: PUSH
81238: LD_STRING ,
81240: STR
81241: PUSH
81242: LD_VAR 0 3
81246: PUSH
81247: LD_VAR 0 2
81251: ARRAY
81252: PUSH
81253: LD_INT 4
81255: ARRAY
81256: STR
81257: PUSH
81258: LD_STRING )
81260: STR
81261: PPUSH
81262: CALL_OW 559
81266: GO 81176
81268: POP
81269: POP
// end ; end ;
81270: LD_VAR 0 1
81274: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
81275: LD_INT 0
81277: PPUSH
// if HexInfo ( x , y ) = warehouse then
81278: LD_VAR 0 2
81282: PPUSH
81283: LD_VAR 0 3
81287: PPUSH
81288: CALL_OW 428
81292: PUSH
81293: LD_VAR 0 1
81297: EQUAL
81298: IFFALSE 81325
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
81300: LD_ADDR_EXP 118
81304: PUSH
81305: LD_EXP 118
81309: PPUSH
81310: LD_VAR 0 1
81314: PPUSH
81315: LD_INT 0
81317: PPUSH
81318: CALL_OW 1
81322: ST_TO_ADDR
81323: GO 81376
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
81325: LD_ADDR_EXP 118
81329: PUSH
81330: LD_EXP 118
81334: PPUSH
81335: LD_VAR 0 1
81339: PPUSH
81340: LD_VAR 0 1
81344: PPUSH
81345: CALL_OW 255
81349: PUSH
81350: LD_VAR 0 1
81354: PUSH
81355: LD_VAR 0 2
81359: PUSH
81360: LD_VAR 0 3
81364: PUSH
81365: EMPTY
81366: LIST
81367: LIST
81368: LIST
81369: LIST
81370: PPUSH
81371: CALL_OW 1
81375: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
81376: CALL 81385 0 0
// end ;
81380: LD_VAR 0 4
81384: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
81385: LD_INT 0
81387: PPUSH
81388: PPUSH
81389: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
81390: LD_STRING resetWarehouseGatheringPoints();
81392: PPUSH
81393: CALL_OW 559
// if warehouseGatheringPoints then
81397: LD_EXP 118
81401: IFFALSE 81527
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
81403: LD_ADDR_VAR 0 3
81407: PUSH
81408: LD_EXP 118
81412: PPUSH
81413: CALL 66414 0 1
81417: ST_TO_ADDR
// for i := 1 to list do
81418: LD_ADDR_VAR 0 2
81422: PUSH
81423: DOUBLE
81424: LD_INT 1
81426: DEC
81427: ST_TO_ADDR
81428: LD_VAR 0 3
81432: PUSH
81433: FOR_TO
81434: IFFALSE 81525
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81436: LD_STRING setWarehouseGatheringPointXY(
81438: PUSH
81439: LD_VAR 0 3
81443: PUSH
81444: LD_VAR 0 2
81448: ARRAY
81449: PUSH
81450: LD_INT 1
81452: ARRAY
81453: STR
81454: PUSH
81455: LD_STRING ,
81457: STR
81458: PUSH
81459: LD_VAR 0 3
81463: PUSH
81464: LD_VAR 0 2
81468: ARRAY
81469: PUSH
81470: LD_INT 2
81472: ARRAY
81473: STR
81474: PUSH
81475: LD_STRING ,
81477: STR
81478: PUSH
81479: LD_VAR 0 3
81483: PUSH
81484: LD_VAR 0 2
81488: ARRAY
81489: PUSH
81490: LD_INT 3
81492: ARRAY
81493: STR
81494: PUSH
81495: LD_STRING ,
81497: STR
81498: PUSH
81499: LD_VAR 0 3
81503: PUSH
81504: LD_VAR 0 2
81508: ARRAY
81509: PUSH
81510: LD_INT 4
81512: ARRAY
81513: STR
81514: PUSH
81515: LD_STRING )
81517: STR
81518: PPUSH
81519: CALL_OW 559
81523: GO 81433
81525: POP
81526: POP
// end ; end ;
81527: LD_VAR 0 1
81531: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
81532: LD_EXP 118
81536: IFFALSE 82221
81538: GO 81540
81540: DISABLE
81541: LD_INT 0
81543: PPUSH
81544: PPUSH
81545: PPUSH
81546: PPUSH
81547: PPUSH
81548: PPUSH
81549: PPUSH
81550: PPUSH
81551: PPUSH
// begin enable ;
81552: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
81553: LD_ADDR_VAR 0 3
81557: PUSH
81558: LD_EXP 118
81562: PPUSH
81563: CALL 66414 0 1
81567: ST_TO_ADDR
// if not list then
81568: LD_VAR 0 3
81572: NOT
81573: IFFALSE 81577
// exit ;
81575: GO 82221
// for i := 1 to list do
81577: LD_ADDR_VAR 0 1
81581: PUSH
81582: DOUBLE
81583: LD_INT 1
81585: DEC
81586: ST_TO_ADDR
81587: LD_VAR 0 3
81591: PUSH
81592: FOR_TO
81593: IFFALSE 82219
// begin depot := list [ i ] [ 2 ] ;
81595: LD_ADDR_VAR 0 8
81599: PUSH
81600: LD_VAR 0 3
81604: PUSH
81605: LD_VAR 0 1
81609: ARRAY
81610: PUSH
81611: LD_INT 2
81613: ARRAY
81614: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
81615: LD_ADDR_VAR 0 5
81619: PUSH
81620: LD_VAR 0 3
81624: PUSH
81625: LD_VAR 0 1
81629: ARRAY
81630: PUSH
81631: LD_INT 1
81633: ARRAY
81634: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
81635: LD_VAR 0 8
81639: PPUSH
81640: CALL_OW 301
81644: PUSH
81645: LD_VAR 0 5
81649: PUSH
81650: LD_VAR 0 8
81654: PPUSH
81655: CALL_OW 255
81659: NONEQUAL
81660: OR
81661: IFFALSE 81690
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
81663: LD_ADDR_EXP 118
81667: PUSH
81668: LD_EXP 118
81672: PPUSH
81673: LD_VAR 0 8
81677: PPUSH
81678: LD_INT 0
81680: PPUSH
81681: CALL_OW 1
81685: ST_TO_ADDR
// exit ;
81686: POP
81687: POP
81688: GO 82221
// end ; x := list [ i ] [ 3 ] ;
81690: LD_ADDR_VAR 0 6
81694: PUSH
81695: LD_VAR 0 3
81699: PUSH
81700: LD_VAR 0 1
81704: ARRAY
81705: PUSH
81706: LD_INT 3
81708: ARRAY
81709: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
81710: LD_ADDR_VAR 0 7
81714: PUSH
81715: LD_VAR 0 3
81719: PUSH
81720: LD_VAR 0 1
81724: ARRAY
81725: PUSH
81726: LD_INT 4
81728: ARRAY
81729: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
81730: LD_ADDR_VAR 0 9
81734: PUSH
81735: LD_VAR 0 6
81739: PPUSH
81740: LD_VAR 0 7
81744: PPUSH
81745: LD_INT 16
81747: PPUSH
81748: CALL 65002 0 3
81752: ST_TO_ADDR
// if not cratesNearbyPoint then
81753: LD_VAR 0 9
81757: NOT
81758: IFFALSE 81764
// exit ;
81760: POP
81761: POP
81762: GO 82221
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
81764: LD_ADDR_VAR 0 4
81768: PUSH
81769: LD_INT 22
81771: PUSH
81772: LD_VAR 0 5
81776: PUSH
81777: EMPTY
81778: LIST
81779: LIST
81780: PUSH
81781: LD_INT 3
81783: PUSH
81784: LD_INT 60
81786: PUSH
81787: EMPTY
81788: LIST
81789: PUSH
81790: EMPTY
81791: LIST
81792: LIST
81793: PUSH
81794: LD_INT 91
81796: PUSH
81797: LD_VAR 0 8
81801: PUSH
81802: LD_INT 6
81804: PUSH
81805: EMPTY
81806: LIST
81807: LIST
81808: LIST
81809: PUSH
81810: LD_INT 2
81812: PUSH
81813: LD_INT 25
81815: PUSH
81816: LD_INT 2
81818: PUSH
81819: EMPTY
81820: LIST
81821: LIST
81822: PUSH
81823: LD_INT 25
81825: PUSH
81826: LD_INT 16
81828: PUSH
81829: EMPTY
81830: LIST
81831: LIST
81832: PUSH
81833: EMPTY
81834: LIST
81835: LIST
81836: LIST
81837: PUSH
81838: EMPTY
81839: LIST
81840: LIST
81841: LIST
81842: LIST
81843: PPUSH
81844: CALL_OW 69
81848: PUSH
81849: LD_VAR 0 8
81853: PPUSH
81854: CALL_OW 313
81858: PPUSH
81859: LD_INT 3
81861: PUSH
81862: LD_INT 60
81864: PUSH
81865: EMPTY
81866: LIST
81867: PUSH
81868: EMPTY
81869: LIST
81870: LIST
81871: PUSH
81872: LD_INT 2
81874: PUSH
81875: LD_INT 25
81877: PUSH
81878: LD_INT 2
81880: PUSH
81881: EMPTY
81882: LIST
81883: LIST
81884: PUSH
81885: LD_INT 25
81887: PUSH
81888: LD_INT 16
81890: PUSH
81891: EMPTY
81892: LIST
81893: LIST
81894: PUSH
81895: EMPTY
81896: LIST
81897: LIST
81898: LIST
81899: PUSH
81900: EMPTY
81901: LIST
81902: LIST
81903: PPUSH
81904: CALL_OW 72
81908: UNION
81909: ST_TO_ADDR
// if tmp then
81910: LD_VAR 0 4
81914: IFFALSE 81994
// begin tmp := ShrinkArray ( tmp , 3 ) ;
81916: LD_ADDR_VAR 0 4
81920: PUSH
81921: LD_VAR 0 4
81925: PPUSH
81926: LD_INT 3
81928: PPUSH
81929: CALL 62971 0 2
81933: ST_TO_ADDR
// for j in tmp do
81934: LD_ADDR_VAR 0 2
81938: PUSH
81939: LD_VAR 0 4
81943: PUSH
81944: FOR_IN
81945: IFFALSE 81988
// begin if IsInUnit ( j ) then
81947: LD_VAR 0 2
81951: PPUSH
81952: CALL_OW 310
81956: IFFALSE 81967
// ComExit ( j ) ;
81958: LD_VAR 0 2
81962: PPUSH
81963: CALL 63054 0 1
// AddComCollect ( j , x , y ) ;
81967: LD_VAR 0 2
81971: PPUSH
81972: LD_VAR 0 6
81976: PPUSH
81977: LD_VAR 0 7
81981: PPUSH
81982: CALL_OW 177
// end ;
81986: GO 81944
81988: POP
81989: POP
// exit ;
81990: POP
81991: POP
81992: GO 82221
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
81994: LD_ADDR_VAR 0 4
81998: PUSH
81999: LD_INT 22
82001: PUSH
82002: LD_VAR 0 5
82006: PUSH
82007: EMPTY
82008: LIST
82009: LIST
82010: PUSH
82011: LD_INT 91
82013: PUSH
82014: LD_VAR 0 8
82018: PUSH
82019: LD_INT 8
82021: PUSH
82022: EMPTY
82023: LIST
82024: LIST
82025: LIST
82026: PUSH
82027: LD_INT 2
82029: PUSH
82030: LD_INT 34
82032: PUSH
82033: LD_INT 12
82035: PUSH
82036: EMPTY
82037: LIST
82038: LIST
82039: PUSH
82040: LD_INT 34
82042: PUSH
82043: LD_INT 51
82045: PUSH
82046: EMPTY
82047: LIST
82048: LIST
82049: PUSH
82050: LD_INT 34
82052: PUSH
82053: LD_INT 32
82055: PUSH
82056: EMPTY
82057: LIST
82058: LIST
82059: PUSH
82060: LD_INT 34
82062: PUSH
82063: LD_INT 89
82065: PUSH
82066: EMPTY
82067: LIST
82068: LIST
82069: PUSH
82070: EMPTY
82071: LIST
82072: LIST
82073: LIST
82074: LIST
82075: LIST
82076: PUSH
82077: EMPTY
82078: LIST
82079: LIST
82080: LIST
82081: PPUSH
82082: CALL_OW 69
82086: ST_TO_ADDR
// if tmp then
82087: LD_VAR 0 4
82091: IFFALSE 82217
// begin for j in tmp do
82093: LD_ADDR_VAR 0 2
82097: PUSH
82098: LD_VAR 0 4
82102: PUSH
82103: FOR_IN
82104: IFFALSE 82215
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
82106: LD_VAR 0 2
82110: PPUSH
82111: CALL_OW 262
82115: PUSH
82116: LD_INT 3
82118: EQUAL
82119: PUSH
82120: LD_VAR 0 2
82124: PPUSH
82125: CALL_OW 261
82129: PUSH
82130: LD_INT 20
82132: GREATER
82133: OR
82134: PUSH
82135: LD_VAR 0 2
82139: PPUSH
82140: CALL_OW 314
82144: NOT
82145: AND
82146: PUSH
82147: LD_VAR 0 2
82151: PPUSH
82152: CALL_OW 263
82156: PUSH
82157: LD_INT 1
82159: NONEQUAL
82160: PUSH
82161: LD_VAR 0 2
82165: PPUSH
82166: CALL_OW 311
82170: OR
82171: AND
82172: IFFALSE 82213
// begin ComCollect ( j , x , y ) ;
82174: LD_VAR 0 2
82178: PPUSH
82179: LD_VAR 0 6
82183: PPUSH
82184: LD_VAR 0 7
82188: PPUSH
82189: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
82193: LD_VAR 0 2
82197: PPUSH
82198: LD_VAR 0 8
82202: PPUSH
82203: CALL_OW 172
// exit ;
82207: POP
82208: POP
82209: POP
82210: POP
82211: GO 82221
// end ;
82213: GO 82103
82215: POP
82216: POP
// end ; end ;
82217: GO 81592
82219: POP
82220: POP
// end ; end_of_file
82221: PPOPN 9
82223: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82224: LD_VAR 0 1
82228: PUSH
82229: LD_INT 200
82231: DOUBLE
82232: GREATEREQUAL
82233: IFFALSE 82241
82235: LD_INT 299
82237: DOUBLE
82238: LESSEQUAL
82239: IFTRUE 82243
82241: GO 82275
82243: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82244: LD_VAR 0 1
82248: PPUSH
82249: LD_VAR 0 2
82253: PPUSH
82254: LD_VAR 0 3
82258: PPUSH
82259: LD_VAR 0 4
82263: PPUSH
82264: LD_VAR 0 5
82268: PPUSH
82269: CALL 82763 0 5
82273: GO 82352
82275: LD_INT 300
82277: DOUBLE
82278: GREATEREQUAL
82279: IFFALSE 82287
82281: LD_INT 399
82283: DOUBLE
82284: LESSEQUAL
82285: IFTRUE 82289
82287: GO 82351
82289: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82290: LD_VAR 0 1
82294: PPUSH
82295: LD_VAR 0 2
82299: PPUSH
82300: LD_VAR 0 3
82304: PPUSH
82305: LD_VAR 0 4
82309: PPUSH
82310: LD_VAR 0 5
82314: PPUSH
82315: LD_VAR 0 6
82319: PPUSH
82320: LD_VAR 0 7
82324: PPUSH
82325: LD_VAR 0 8
82329: PPUSH
82330: LD_VAR 0 9
82334: PPUSH
82335: LD_VAR 0 10
82339: PPUSH
82340: LD_VAR 0 11
82344: PPUSH
82345: CALL 78933 0 11
82349: GO 82352
82351: POP
// end ;
82352: PPOPN 11
82354: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82355: LD_VAR 0 1
82359: PPUSH
82360: LD_VAR 0 2
82364: PPUSH
82365: LD_VAR 0 3
82369: PPUSH
82370: LD_VAR 0 4
82374: PPUSH
82375: LD_VAR 0 5
82379: PPUSH
82380: CALL 82499 0 5
// end ; end_of_file
82384: PPOPN 5
82386: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
82387: LD_INT 0
82389: PPUSH
82390: PPUSH
82391: PPUSH
82392: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
82393: LD_VAR 0 1
82397: PPUSH
82398: CALL_OW 264
82402: PUSH
82403: LD_INT 91
82405: EQUAL
82406: IFFALSE 82478
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82408: LD_INT 68
82410: PPUSH
82411: LD_VAR 0 1
82415: PPUSH
82416: CALL_OW 255
82420: PPUSH
82421: CALL_OW 321
82425: PUSH
82426: LD_INT 2
82428: EQUAL
82429: IFFALSE 82441
// eff := 70 else
82431: LD_ADDR_VAR 0 4
82435: PUSH
82436: LD_INT 70
82438: ST_TO_ADDR
82439: GO 82449
// eff := 30 ;
82441: LD_ADDR_VAR 0 4
82445: PUSH
82446: LD_INT 30
82448: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
82449: LD_VAR 0 1
82453: PPUSH
82454: CALL_OW 250
82458: PPUSH
82459: LD_VAR 0 1
82463: PPUSH
82464: CALL_OW 251
82468: PPUSH
82469: LD_VAR 0 4
82473: PPUSH
82474: CALL_OW 495
// end ; end ;
82478: LD_VAR 0 2
82482: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
82483: LD_INT 0
82485: PPUSH
// end ;
82486: LD_VAR 0 4
82490: RET
// export function SOS_Command ( cmd ) ; begin
82491: LD_INT 0
82493: PPUSH
// end ;
82494: LD_VAR 0 2
82498: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
82499: LD_INT 0
82501: PPUSH
// end ;
82502: LD_VAR 0 6
82506: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
82507: LD_INT 0
82509: PPUSH
82510: PPUSH
// if not vehicle or not factory then
82511: LD_VAR 0 1
82515: NOT
82516: PUSH
82517: LD_VAR 0 2
82521: NOT
82522: OR
82523: IFFALSE 82527
// exit ;
82525: GO 82758
// if factoryWaypoints >= factory then
82527: LD_EXP 117
82531: PUSH
82532: LD_VAR 0 2
82536: GREATEREQUAL
82537: IFFALSE 82758
// if factoryWaypoints [ factory ] then
82539: LD_EXP 117
82543: PUSH
82544: LD_VAR 0 2
82548: ARRAY
82549: IFFALSE 82758
// begin if GetControl ( vehicle ) = control_manual then
82551: LD_VAR 0 1
82555: PPUSH
82556: CALL_OW 263
82560: PUSH
82561: LD_INT 1
82563: EQUAL
82564: IFFALSE 82645
// begin driver := IsDrivenBy ( vehicle ) ;
82566: LD_ADDR_VAR 0 4
82570: PUSH
82571: LD_VAR 0 1
82575: PPUSH
82576: CALL_OW 311
82580: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
82581: LD_VAR 0 4
82585: PPUSH
82586: LD_EXP 117
82590: PUSH
82591: LD_VAR 0 2
82595: ARRAY
82596: PUSH
82597: LD_INT 3
82599: ARRAY
82600: PPUSH
82601: LD_EXP 117
82605: PUSH
82606: LD_VAR 0 2
82610: ARRAY
82611: PUSH
82612: LD_INT 4
82614: ARRAY
82615: PPUSH
82616: CALL_OW 171
// AddComExitVehicle ( driver ) ;
82620: LD_VAR 0 4
82624: PPUSH
82625: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
82629: LD_VAR 0 4
82633: PPUSH
82634: LD_VAR 0 2
82638: PPUSH
82639: CALL_OW 180
// end else
82643: GO 82758
// if GetControl ( vehicle ) = control_remote then
82645: LD_VAR 0 1
82649: PPUSH
82650: CALL_OW 263
82654: PUSH
82655: LD_INT 2
82657: EQUAL
82658: IFFALSE 82719
// begin wait ( 0 0$2 ) ;
82660: LD_INT 70
82662: PPUSH
82663: CALL_OW 67
// if Connect ( vehicle ) then
82667: LD_VAR 0 1
82671: PPUSH
82672: CALL 33313 0 1
82676: IFFALSE 82717
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
82678: LD_VAR 0 1
82682: PPUSH
82683: LD_EXP 117
82687: PUSH
82688: LD_VAR 0 2
82692: ARRAY
82693: PUSH
82694: LD_INT 3
82696: ARRAY
82697: PPUSH
82698: LD_EXP 117
82702: PUSH
82703: LD_VAR 0 2
82707: ARRAY
82708: PUSH
82709: LD_INT 4
82711: ARRAY
82712: PPUSH
82713: CALL_OW 171
// end else
82717: GO 82758
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
82719: LD_VAR 0 1
82723: PPUSH
82724: LD_EXP 117
82728: PUSH
82729: LD_VAR 0 2
82733: ARRAY
82734: PUSH
82735: LD_INT 3
82737: ARRAY
82738: PPUSH
82739: LD_EXP 117
82743: PUSH
82744: LD_VAR 0 2
82748: ARRAY
82749: PUSH
82750: LD_INT 4
82752: ARRAY
82753: PPUSH
82754: CALL_OW 171
// end ; end ;
82758: LD_VAR 0 3
82762: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
82763: LD_INT 0
82765: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
82766: LD_VAR 0 1
82770: PUSH
82771: LD_INT 250
82773: EQUAL
82774: PUSH
82775: LD_VAR 0 2
82779: PPUSH
82780: CALL_OW 264
82784: PUSH
82785: LD_INT 81
82787: EQUAL
82788: AND
82789: IFFALSE 82810
// MinerPlaceMine ( unit , x , y ) ;
82791: LD_VAR 0 2
82795: PPUSH
82796: LD_VAR 0 4
82800: PPUSH
82801: LD_VAR 0 5
82805: PPUSH
82806: CALL 85195 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
82810: LD_VAR 0 1
82814: PUSH
82815: LD_INT 251
82817: EQUAL
82818: PUSH
82819: LD_VAR 0 2
82823: PPUSH
82824: CALL_OW 264
82828: PUSH
82829: LD_INT 81
82831: EQUAL
82832: AND
82833: IFFALSE 82854
// MinerDetonateMine ( unit , x , y ) ;
82835: LD_VAR 0 2
82839: PPUSH
82840: LD_VAR 0 4
82844: PPUSH
82845: LD_VAR 0 5
82849: PPUSH
82850: CALL 85470 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
82854: LD_VAR 0 1
82858: PUSH
82859: LD_INT 252
82861: EQUAL
82862: PUSH
82863: LD_VAR 0 2
82867: PPUSH
82868: CALL_OW 264
82872: PUSH
82873: LD_INT 81
82875: EQUAL
82876: AND
82877: IFFALSE 82898
// MinerCreateMinefield ( unit , x , y ) ;
82879: LD_VAR 0 2
82883: PPUSH
82884: LD_VAR 0 4
82888: PPUSH
82889: LD_VAR 0 5
82893: PPUSH
82894: CALL 85887 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
82898: LD_VAR 0 1
82902: PUSH
82903: LD_INT 253
82905: EQUAL
82906: PUSH
82907: LD_VAR 0 2
82911: PPUSH
82912: CALL_OW 257
82916: PUSH
82917: LD_INT 5
82919: EQUAL
82920: AND
82921: IFFALSE 82942
// ComBinocular ( unit , x , y ) ;
82923: LD_VAR 0 2
82927: PPUSH
82928: LD_VAR 0 4
82932: PPUSH
82933: LD_VAR 0 5
82937: PPUSH
82938: CALL 86256 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
82942: LD_VAR 0 1
82946: PUSH
82947: LD_INT 254
82949: EQUAL
82950: PUSH
82951: LD_VAR 0 2
82955: PPUSH
82956: CALL_OW 264
82960: PUSH
82961: LD_INT 99
82963: EQUAL
82964: AND
82965: PUSH
82966: LD_VAR 0 3
82970: PPUSH
82971: CALL_OW 263
82975: PUSH
82976: LD_INT 3
82978: EQUAL
82979: AND
82980: IFFALSE 82996
// HackDestroyVehicle ( unit , selectedUnit ) ;
82982: LD_VAR 0 2
82986: PPUSH
82987: LD_VAR 0 3
82991: PPUSH
82992: CALL 84559 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
82996: LD_VAR 0 1
83000: PUSH
83001: LD_INT 255
83003: EQUAL
83004: PUSH
83005: LD_VAR 0 2
83009: PPUSH
83010: CALL_OW 264
83014: PUSH
83015: LD_INT 14
83017: PUSH
83018: LD_INT 53
83020: PUSH
83021: EMPTY
83022: LIST
83023: LIST
83024: IN
83025: AND
83026: PUSH
83027: LD_VAR 0 4
83031: PPUSH
83032: LD_VAR 0 5
83036: PPUSH
83037: CALL_OW 488
83041: AND
83042: IFFALSE 83066
// CutTreeXYR ( unit , x , y , 12 ) ;
83044: LD_VAR 0 2
83048: PPUSH
83049: LD_VAR 0 4
83053: PPUSH
83054: LD_VAR 0 5
83058: PPUSH
83059: LD_INT 12
83061: PPUSH
83062: CALL 83129 0 4
// if cmd = 256 then
83066: LD_VAR 0 1
83070: PUSH
83071: LD_INT 256
83073: EQUAL
83074: IFFALSE 83095
// SetFactoryWaypoint ( unit , x , y ) ;
83076: LD_VAR 0 2
83080: PPUSH
83081: LD_VAR 0 4
83085: PPUSH
83086: LD_VAR 0 5
83090: PPUSH
83091: CALL 80913 0 3
// if cmd = 257 then
83095: LD_VAR 0 1
83099: PUSH
83100: LD_INT 257
83102: EQUAL
83103: IFFALSE 83124
// SetWarehouseGatheringPoint ( unit , x , y ) ;
83105: LD_VAR 0 2
83109: PPUSH
83110: LD_VAR 0 4
83114: PPUSH
83115: LD_VAR 0 5
83119: PPUSH
83120: CALL 81275 0 3
// end ;
83124: LD_VAR 0 6
83128: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
83129: LD_INT 0
83131: PPUSH
83132: PPUSH
83133: PPUSH
83134: PPUSH
83135: PPUSH
83136: PPUSH
83137: PPUSH
83138: PPUSH
83139: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
83140: LD_VAR 0 1
83144: NOT
83145: PUSH
83146: LD_VAR 0 2
83150: PPUSH
83151: LD_VAR 0 3
83155: PPUSH
83156: CALL_OW 488
83160: NOT
83161: OR
83162: PUSH
83163: LD_VAR 0 4
83167: NOT
83168: OR
83169: IFFALSE 83173
// exit ;
83171: GO 83513
// list := [ ] ;
83173: LD_ADDR_VAR 0 13
83177: PUSH
83178: EMPTY
83179: ST_TO_ADDR
// if x - r < 0 then
83180: LD_VAR 0 2
83184: PUSH
83185: LD_VAR 0 4
83189: MINUS
83190: PUSH
83191: LD_INT 0
83193: LESS
83194: IFFALSE 83206
// min_x := 0 else
83196: LD_ADDR_VAR 0 7
83200: PUSH
83201: LD_INT 0
83203: ST_TO_ADDR
83204: GO 83222
// min_x := x - r ;
83206: LD_ADDR_VAR 0 7
83210: PUSH
83211: LD_VAR 0 2
83215: PUSH
83216: LD_VAR 0 4
83220: MINUS
83221: ST_TO_ADDR
// if y - r < 0 then
83222: LD_VAR 0 3
83226: PUSH
83227: LD_VAR 0 4
83231: MINUS
83232: PUSH
83233: LD_INT 0
83235: LESS
83236: IFFALSE 83248
// min_y := 0 else
83238: LD_ADDR_VAR 0 8
83242: PUSH
83243: LD_INT 0
83245: ST_TO_ADDR
83246: GO 83264
// min_y := y - r ;
83248: LD_ADDR_VAR 0 8
83252: PUSH
83253: LD_VAR 0 3
83257: PUSH
83258: LD_VAR 0 4
83262: MINUS
83263: ST_TO_ADDR
// max_x := x + r ;
83264: LD_ADDR_VAR 0 9
83268: PUSH
83269: LD_VAR 0 2
83273: PUSH
83274: LD_VAR 0 4
83278: PLUS
83279: ST_TO_ADDR
// max_y := y + r ;
83280: LD_ADDR_VAR 0 10
83284: PUSH
83285: LD_VAR 0 3
83289: PUSH
83290: LD_VAR 0 4
83294: PLUS
83295: ST_TO_ADDR
// for _x = min_x to max_x do
83296: LD_ADDR_VAR 0 11
83300: PUSH
83301: DOUBLE
83302: LD_VAR 0 7
83306: DEC
83307: ST_TO_ADDR
83308: LD_VAR 0 9
83312: PUSH
83313: FOR_TO
83314: IFFALSE 83431
// for _y = min_y to max_y do
83316: LD_ADDR_VAR 0 12
83320: PUSH
83321: DOUBLE
83322: LD_VAR 0 8
83326: DEC
83327: ST_TO_ADDR
83328: LD_VAR 0 10
83332: PUSH
83333: FOR_TO
83334: IFFALSE 83427
// begin if not ValidHex ( _x , _y ) then
83336: LD_VAR 0 11
83340: PPUSH
83341: LD_VAR 0 12
83345: PPUSH
83346: CALL_OW 488
83350: NOT
83351: IFFALSE 83355
// continue ;
83353: GO 83333
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83355: LD_VAR 0 11
83359: PPUSH
83360: LD_VAR 0 12
83364: PPUSH
83365: CALL_OW 351
83369: PUSH
83370: LD_VAR 0 11
83374: PPUSH
83375: LD_VAR 0 12
83379: PPUSH
83380: CALL_OW 554
83384: AND
83385: IFFALSE 83425
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83387: LD_ADDR_VAR 0 13
83391: PUSH
83392: LD_VAR 0 13
83396: PPUSH
83397: LD_VAR 0 13
83401: PUSH
83402: LD_INT 1
83404: PLUS
83405: PPUSH
83406: LD_VAR 0 11
83410: PUSH
83411: LD_VAR 0 12
83415: PUSH
83416: EMPTY
83417: LIST
83418: LIST
83419: PPUSH
83420: CALL_OW 2
83424: ST_TO_ADDR
// end ;
83425: GO 83333
83427: POP
83428: POP
83429: GO 83313
83431: POP
83432: POP
// if not list then
83433: LD_VAR 0 13
83437: NOT
83438: IFFALSE 83442
// exit ;
83440: GO 83513
// for i in list do
83442: LD_ADDR_VAR 0 6
83446: PUSH
83447: LD_VAR 0 13
83451: PUSH
83452: FOR_IN
83453: IFFALSE 83511
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
83455: LD_VAR 0 1
83459: PPUSH
83460: LD_STRING M
83462: PUSH
83463: LD_VAR 0 6
83467: PUSH
83468: LD_INT 1
83470: ARRAY
83471: PUSH
83472: LD_VAR 0 6
83476: PUSH
83477: LD_INT 2
83479: ARRAY
83480: PUSH
83481: LD_INT 0
83483: PUSH
83484: LD_INT 0
83486: PUSH
83487: LD_INT 0
83489: PUSH
83490: LD_INT 0
83492: PUSH
83493: EMPTY
83494: LIST
83495: LIST
83496: LIST
83497: LIST
83498: LIST
83499: LIST
83500: LIST
83501: PUSH
83502: EMPTY
83503: LIST
83504: PPUSH
83505: CALL_OW 447
83509: GO 83452
83511: POP
83512: POP
// end ;
83513: LD_VAR 0 5
83517: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
83518: LD_EXP 120
83522: NOT
83523: IFFALSE 83573
83525: GO 83527
83527: DISABLE
// begin initHack := true ;
83528: LD_ADDR_EXP 120
83532: PUSH
83533: LD_INT 1
83535: ST_TO_ADDR
// hackTanks := [ ] ;
83536: LD_ADDR_EXP 121
83540: PUSH
83541: EMPTY
83542: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
83543: LD_ADDR_EXP 122
83547: PUSH
83548: EMPTY
83549: ST_TO_ADDR
// hackLimit := 3 ;
83550: LD_ADDR_EXP 123
83554: PUSH
83555: LD_INT 3
83557: ST_TO_ADDR
// hackDist := 12 ;
83558: LD_ADDR_EXP 124
83562: PUSH
83563: LD_INT 12
83565: ST_TO_ADDR
// hackCounter := [ ] ;
83566: LD_ADDR_EXP 125
83570: PUSH
83571: EMPTY
83572: ST_TO_ADDR
// end ;
83573: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
83574: LD_EXP 120
83578: PUSH
83579: LD_INT 34
83581: PUSH
83582: LD_INT 99
83584: PUSH
83585: EMPTY
83586: LIST
83587: LIST
83588: PPUSH
83589: CALL_OW 69
83593: AND
83594: IFFALSE 83847
83596: GO 83598
83598: DISABLE
83599: LD_INT 0
83601: PPUSH
83602: PPUSH
// begin enable ;
83603: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
83604: LD_ADDR_VAR 0 1
83608: PUSH
83609: LD_INT 34
83611: PUSH
83612: LD_INT 99
83614: PUSH
83615: EMPTY
83616: LIST
83617: LIST
83618: PPUSH
83619: CALL_OW 69
83623: PUSH
83624: FOR_IN
83625: IFFALSE 83845
// begin if not i in hackTanks then
83627: LD_VAR 0 1
83631: PUSH
83632: LD_EXP 121
83636: IN
83637: NOT
83638: IFFALSE 83721
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
83640: LD_ADDR_EXP 121
83644: PUSH
83645: LD_EXP 121
83649: PPUSH
83650: LD_EXP 121
83654: PUSH
83655: LD_INT 1
83657: PLUS
83658: PPUSH
83659: LD_VAR 0 1
83663: PPUSH
83664: CALL_OW 1
83668: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
83669: LD_ADDR_EXP 122
83673: PUSH
83674: LD_EXP 122
83678: PPUSH
83679: LD_EXP 122
83683: PUSH
83684: LD_INT 1
83686: PLUS
83687: PPUSH
83688: EMPTY
83689: PPUSH
83690: CALL_OW 1
83694: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
83695: LD_ADDR_EXP 125
83699: PUSH
83700: LD_EXP 125
83704: PPUSH
83705: LD_EXP 125
83709: PUSH
83710: LD_INT 1
83712: PLUS
83713: PPUSH
83714: EMPTY
83715: PPUSH
83716: CALL_OW 1
83720: ST_TO_ADDR
// end ; if not IsOk ( i ) then
83721: LD_VAR 0 1
83725: PPUSH
83726: CALL_OW 302
83730: NOT
83731: IFFALSE 83744
// begin HackUnlinkAll ( i ) ;
83733: LD_VAR 0 1
83737: PPUSH
83738: CALL 83850 0 1
// continue ;
83742: GO 83624
// end ; HackCheckCapturedStatus ( i ) ;
83744: LD_VAR 0 1
83748: PPUSH
83749: CALL 84293 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
83753: LD_ADDR_VAR 0 2
83757: PUSH
83758: LD_INT 81
83760: PUSH
83761: LD_VAR 0 1
83765: PPUSH
83766: CALL_OW 255
83770: PUSH
83771: EMPTY
83772: LIST
83773: LIST
83774: PUSH
83775: LD_INT 33
83777: PUSH
83778: LD_INT 3
83780: PUSH
83781: EMPTY
83782: LIST
83783: LIST
83784: PUSH
83785: LD_INT 91
83787: PUSH
83788: LD_VAR 0 1
83792: PUSH
83793: LD_EXP 124
83797: PUSH
83798: EMPTY
83799: LIST
83800: LIST
83801: LIST
83802: PUSH
83803: LD_INT 50
83805: PUSH
83806: EMPTY
83807: LIST
83808: PUSH
83809: EMPTY
83810: LIST
83811: LIST
83812: LIST
83813: LIST
83814: PPUSH
83815: CALL_OW 69
83819: ST_TO_ADDR
// if not tmp then
83820: LD_VAR 0 2
83824: NOT
83825: IFFALSE 83829
// continue ;
83827: GO 83624
// HackLink ( i , tmp ) ;
83829: LD_VAR 0 1
83833: PPUSH
83834: LD_VAR 0 2
83838: PPUSH
83839: CALL 83986 0 2
// end ;
83843: GO 83624
83845: POP
83846: POP
// end ;
83847: PPOPN 2
83849: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
83850: LD_INT 0
83852: PPUSH
83853: PPUSH
83854: PPUSH
// if not hack in hackTanks then
83855: LD_VAR 0 1
83859: PUSH
83860: LD_EXP 121
83864: IN
83865: NOT
83866: IFFALSE 83870
// exit ;
83868: GO 83981
// index := GetElementIndex ( hackTanks , hack ) ;
83870: LD_ADDR_VAR 0 4
83874: PUSH
83875: LD_EXP 121
83879: PPUSH
83880: LD_VAR 0 1
83884: PPUSH
83885: CALL 30129 0 2
83889: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
83890: LD_EXP 122
83894: PUSH
83895: LD_VAR 0 4
83899: ARRAY
83900: IFFALSE 83981
// begin for i in hackTanksCaptured [ index ] do
83902: LD_ADDR_VAR 0 3
83906: PUSH
83907: LD_EXP 122
83911: PUSH
83912: LD_VAR 0 4
83916: ARRAY
83917: PUSH
83918: FOR_IN
83919: IFFALSE 83945
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
83921: LD_VAR 0 3
83925: PUSH
83926: LD_INT 1
83928: ARRAY
83929: PPUSH
83930: LD_VAR 0 3
83934: PUSH
83935: LD_INT 2
83937: ARRAY
83938: PPUSH
83939: CALL_OW 235
83943: GO 83918
83945: POP
83946: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
83947: LD_ADDR_EXP 122
83951: PUSH
83952: LD_EXP 122
83956: PPUSH
83957: LD_VAR 0 4
83961: PPUSH
83962: EMPTY
83963: PPUSH
83964: CALL_OW 1
83968: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
83969: LD_VAR 0 1
83973: PPUSH
83974: LD_INT 0
83976: PPUSH
83977: CALL_OW 505
// end ; end ;
83981: LD_VAR 0 2
83985: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
83986: LD_INT 0
83988: PPUSH
83989: PPUSH
83990: PPUSH
// if not hack in hackTanks or not vehicles then
83991: LD_VAR 0 1
83995: PUSH
83996: LD_EXP 121
84000: IN
84001: NOT
84002: PUSH
84003: LD_VAR 0 2
84007: NOT
84008: OR
84009: IFFALSE 84013
// exit ;
84011: GO 84288
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
84013: LD_ADDR_VAR 0 2
84017: PUSH
84018: LD_VAR 0 1
84022: PPUSH
84023: LD_VAR 0 2
84027: PPUSH
84028: LD_INT 1
84030: PPUSH
84031: LD_INT 1
84033: PPUSH
84034: CALL 30779 0 4
84038: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
84039: LD_ADDR_VAR 0 5
84043: PUSH
84044: LD_EXP 121
84048: PPUSH
84049: LD_VAR 0 1
84053: PPUSH
84054: CALL 30129 0 2
84058: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
84059: LD_EXP 122
84063: PUSH
84064: LD_VAR 0 5
84068: ARRAY
84069: PUSH
84070: LD_EXP 123
84074: LESS
84075: IFFALSE 84264
// begin for i := 1 to vehicles do
84077: LD_ADDR_VAR 0 4
84081: PUSH
84082: DOUBLE
84083: LD_INT 1
84085: DEC
84086: ST_TO_ADDR
84087: LD_VAR 0 2
84091: PUSH
84092: FOR_TO
84093: IFFALSE 84262
// begin if hackTanksCaptured [ index ] = hackLimit then
84095: LD_EXP 122
84099: PUSH
84100: LD_VAR 0 5
84104: ARRAY
84105: PUSH
84106: LD_EXP 123
84110: EQUAL
84111: IFFALSE 84115
// break ;
84113: GO 84262
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
84115: LD_ADDR_EXP 125
84119: PUSH
84120: LD_EXP 125
84124: PPUSH
84125: LD_VAR 0 5
84129: PPUSH
84130: LD_EXP 125
84134: PUSH
84135: LD_VAR 0 5
84139: ARRAY
84140: PUSH
84141: LD_INT 1
84143: PLUS
84144: PPUSH
84145: CALL_OW 1
84149: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
84150: LD_ADDR_EXP 122
84154: PUSH
84155: LD_EXP 122
84159: PPUSH
84160: LD_VAR 0 5
84164: PUSH
84165: LD_EXP 122
84169: PUSH
84170: LD_VAR 0 5
84174: ARRAY
84175: PUSH
84176: LD_INT 1
84178: PLUS
84179: PUSH
84180: EMPTY
84181: LIST
84182: LIST
84183: PPUSH
84184: LD_VAR 0 2
84188: PUSH
84189: LD_VAR 0 4
84193: ARRAY
84194: PUSH
84195: LD_VAR 0 2
84199: PUSH
84200: LD_VAR 0 4
84204: ARRAY
84205: PPUSH
84206: CALL_OW 255
84210: PUSH
84211: EMPTY
84212: LIST
84213: LIST
84214: PPUSH
84215: CALL 30344 0 3
84219: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
84220: LD_VAR 0 2
84224: PUSH
84225: LD_VAR 0 4
84229: ARRAY
84230: PPUSH
84231: LD_VAR 0 1
84235: PPUSH
84236: CALL_OW 255
84240: PPUSH
84241: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
84245: LD_VAR 0 2
84249: PUSH
84250: LD_VAR 0 4
84254: ARRAY
84255: PPUSH
84256: CALL_OW 141
// end ;
84260: GO 84092
84262: POP
84263: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84264: LD_VAR 0 1
84268: PPUSH
84269: LD_EXP 122
84273: PUSH
84274: LD_VAR 0 5
84278: ARRAY
84279: PUSH
84280: LD_INT 0
84282: PLUS
84283: PPUSH
84284: CALL_OW 505
// end ;
84288: LD_VAR 0 3
84292: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
84293: LD_INT 0
84295: PPUSH
84296: PPUSH
84297: PPUSH
84298: PPUSH
// if not hack in hackTanks then
84299: LD_VAR 0 1
84303: PUSH
84304: LD_EXP 121
84308: IN
84309: NOT
84310: IFFALSE 84314
// exit ;
84312: GO 84554
// index := GetElementIndex ( hackTanks , hack ) ;
84314: LD_ADDR_VAR 0 4
84318: PUSH
84319: LD_EXP 121
84323: PPUSH
84324: LD_VAR 0 1
84328: PPUSH
84329: CALL 30129 0 2
84333: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
84334: LD_ADDR_VAR 0 3
84338: PUSH
84339: DOUBLE
84340: LD_EXP 122
84344: PUSH
84345: LD_VAR 0 4
84349: ARRAY
84350: INC
84351: ST_TO_ADDR
84352: LD_INT 1
84354: PUSH
84355: FOR_DOWNTO
84356: IFFALSE 84528
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
84358: LD_ADDR_VAR 0 5
84362: PUSH
84363: LD_EXP 122
84367: PUSH
84368: LD_VAR 0 4
84372: ARRAY
84373: PUSH
84374: LD_VAR 0 3
84378: ARRAY
84379: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
84380: LD_VAR 0 5
84384: PUSH
84385: LD_INT 1
84387: ARRAY
84388: PPUSH
84389: CALL_OW 302
84393: NOT
84394: PUSH
84395: LD_VAR 0 5
84399: PUSH
84400: LD_INT 1
84402: ARRAY
84403: PPUSH
84404: CALL_OW 255
84408: PUSH
84409: LD_VAR 0 1
84413: PPUSH
84414: CALL_OW 255
84418: NONEQUAL
84419: OR
84420: IFFALSE 84526
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
84422: LD_VAR 0 5
84426: PUSH
84427: LD_INT 1
84429: ARRAY
84430: PPUSH
84431: CALL_OW 305
84435: PUSH
84436: LD_VAR 0 5
84440: PUSH
84441: LD_INT 1
84443: ARRAY
84444: PPUSH
84445: CALL_OW 255
84449: PUSH
84450: LD_VAR 0 1
84454: PPUSH
84455: CALL_OW 255
84459: EQUAL
84460: AND
84461: IFFALSE 84485
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
84463: LD_VAR 0 5
84467: PUSH
84468: LD_INT 1
84470: ARRAY
84471: PPUSH
84472: LD_VAR 0 5
84476: PUSH
84477: LD_INT 2
84479: ARRAY
84480: PPUSH
84481: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
84485: LD_ADDR_EXP 122
84489: PUSH
84490: LD_EXP 122
84494: PPUSH
84495: LD_VAR 0 4
84499: PPUSH
84500: LD_EXP 122
84504: PUSH
84505: LD_VAR 0 4
84509: ARRAY
84510: PPUSH
84511: LD_VAR 0 3
84515: PPUSH
84516: CALL_OW 3
84520: PPUSH
84521: CALL_OW 1
84525: ST_TO_ADDR
// end ; end ;
84526: GO 84355
84528: POP
84529: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84530: LD_VAR 0 1
84534: PPUSH
84535: LD_EXP 122
84539: PUSH
84540: LD_VAR 0 4
84544: ARRAY
84545: PUSH
84546: LD_INT 0
84548: PLUS
84549: PPUSH
84550: CALL_OW 505
// end ;
84554: LD_VAR 0 2
84558: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
84559: LD_INT 0
84561: PPUSH
84562: PPUSH
84563: PPUSH
84564: PPUSH
// if not hack in hackTanks then
84565: LD_VAR 0 1
84569: PUSH
84570: LD_EXP 121
84574: IN
84575: NOT
84576: IFFALSE 84580
// exit ;
84578: GO 84665
// index := GetElementIndex ( hackTanks , hack ) ;
84580: LD_ADDR_VAR 0 5
84584: PUSH
84585: LD_EXP 121
84589: PPUSH
84590: LD_VAR 0 1
84594: PPUSH
84595: CALL 30129 0 2
84599: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
84600: LD_ADDR_VAR 0 4
84604: PUSH
84605: DOUBLE
84606: LD_INT 1
84608: DEC
84609: ST_TO_ADDR
84610: LD_EXP 122
84614: PUSH
84615: LD_VAR 0 5
84619: ARRAY
84620: PUSH
84621: FOR_TO
84622: IFFALSE 84663
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
84624: LD_EXP 122
84628: PUSH
84629: LD_VAR 0 5
84633: ARRAY
84634: PUSH
84635: LD_VAR 0 4
84639: ARRAY
84640: PUSH
84641: LD_INT 1
84643: ARRAY
84644: PUSH
84645: LD_VAR 0 2
84649: EQUAL
84650: IFFALSE 84661
// KillUnit ( vehicle ) ;
84652: LD_VAR 0 2
84656: PPUSH
84657: CALL_OW 66
84661: GO 84621
84663: POP
84664: POP
// end ;
84665: LD_VAR 0 3
84669: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
84670: LD_EXP 126
84674: NOT
84675: IFFALSE 84710
84677: GO 84679
84679: DISABLE
// begin initMiner := true ;
84680: LD_ADDR_EXP 126
84684: PUSH
84685: LD_INT 1
84687: ST_TO_ADDR
// minersList := [ ] ;
84688: LD_ADDR_EXP 127
84692: PUSH
84693: EMPTY
84694: ST_TO_ADDR
// minerMinesList := [ ] ;
84695: LD_ADDR_EXP 128
84699: PUSH
84700: EMPTY
84701: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
84702: LD_ADDR_EXP 129
84706: PUSH
84707: LD_INT 5
84709: ST_TO_ADDR
// end ;
84710: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
84711: LD_EXP 126
84715: PUSH
84716: LD_INT 34
84718: PUSH
84719: LD_INT 81
84721: PUSH
84722: EMPTY
84723: LIST
84724: LIST
84725: PPUSH
84726: CALL_OW 69
84730: AND
84731: IFFALSE 85192
84733: GO 84735
84735: DISABLE
84736: LD_INT 0
84738: PPUSH
84739: PPUSH
84740: PPUSH
84741: PPUSH
// begin enable ;
84742: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
84743: LD_ADDR_VAR 0 1
84747: PUSH
84748: LD_INT 34
84750: PUSH
84751: LD_INT 81
84753: PUSH
84754: EMPTY
84755: LIST
84756: LIST
84757: PPUSH
84758: CALL_OW 69
84762: PUSH
84763: FOR_IN
84764: IFFALSE 84836
// begin if not i in minersList then
84766: LD_VAR 0 1
84770: PUSH
84771: LD_EXP 127
84775: IN
84776: NOT
84777: IFFALSE 84834
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
84779: LD_ADDR_EXP 127
84783: PUSH
84784: LD_EXP 127
84788: PPUSH
84789: LD_EXP 127
84793: PUSH
84794: LD_INT 1
84796: PLUS
84797: PPUSH
84798: LD_VAR 0 1
84802: PPUSH
84803: CALL_OW 1
84807: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
84808: LD_ADDR_EXP 128
84812: PUSH
84813: LD_EXP 128
84817: PPUSH
84818: LD_EXP 128
84822: PUSH
84823: LD_INT 1
84825: PLUS
84826: PPUSH
84827: EMPTY
84828: PPUSH
84829: CALL_OW 1
84833: ST_TO_ADDR
// end end ;
84834: GO 84763
84836: POP
84837: POP
// for i := minerMinesList downto 1 do
84838: LD_ADDR_VAR 0 1
84842: PUSH
84843: DOUBLE
84844: LD_EXP 128
84848: INC
84849: ST_TO_ADDR
84850: LD_INT 1
84852: PUSH
84853: FOR_DOWNTO
84854: IFFALSE 85190
// begin if IsLive ( minersList [ i ] ) then
84856: LD_EXP 127
84860: PUSH
84861: LD_VAR 0 1
84865: ARRAY
84866: PPUSH
84867: CALL_OW 300
84871: IFFALSE 84899
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
84873: LD_EXP 127
84877: PUSH
84878: LD_VAR 0 1
84882: ARRAY
84883: PPUSH
84884: LD_EXP 128
84888: PUSH
84889: LD_VAR 0 1
84893: ARRAY
84894: PPUSH
84895: CALL_OW 505
// if not minerMinesList [ i ] then
84899: LD_EXP 128
84903: PUSH
84904: LD_VAR 0 1
84908: ARRAY
84909: NOT
84910: IFFALSE 84914
// continue ;
84912: GO 84853
// for j := minerMinesList [ i ] downto 1 do
84914: LD_ADDR_VAR 0 2
84918: PUSH
84919: DOUBLE
84920: LD_EXP 128
84924: PUSH
84925: LD_VAR 0 1
84929: ARRAY
84930: INC
84931: ST_TO_ADDR
84932: LD_INT 1
84934: PUSH
84935: FOR_DOWNTO
84936: IFFALSE 85186
// begin side := GetSide ( minersList [ i ] ) ;
84938: LD_ADDR_VAR 0 3
84942: PUSH
84943: LD_EXP 127
84947: PUSH
84948: LD_VAR 0 1
84952: ARRAY
84953: PPUSH
84954: CALL_OW 255
84958: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
84959: LD_ADDR_VAR 0 4
84963: PUSH
84964: LD_EXP 128
84968: PUSH
84969: LD_VAR 0 1
84973: ARRAY
84974: PUSH
84975: LD_VAR 0 2
84979: ARRAY
84980: PUSH
84981: LD_INT 1
84983: ARRAY
84984: PPUSH
84985: LD_EXP 128
84989: PUSH
84990: LD_VAR 0 1
84994: ARRAY
84995: PUSH
84996: LD_VAR 0 2
85000: ARRAY
85001: PUSH
85002: LD_INT 2
85004: ARRAY
85005: PPUSH
85006: CALL_OW 428
85010: ST_TO_ADDR
// if not tmp then
85011: LD_VAR 0 4
85015: NOT
85016: IFFALSE 85020
// continue ;
85018: GO 84935
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
85020: LD_VAR 0 4
85024: PUSH
85025: LD_INT 81
85027: PUSH
85028: LD_VAR 0 3
85032: PUSH
85033: EMPTY
85034: LIST
85035: LIST
85036: PPUSH
85037: CALL_OW 69
85041: IN
85042: PUSH
85043: LD_EXP 128
85047: PUSH
85048: LD_VAR 0 1
85052: ARRAY
85053: PUSH
85054: LD_VAR 0 2
85058: ARRAY
85059: PUSH
85060: LD_INT 1
85062: ARRAY
85063: PPUSH
85064: LD_EXP 128
85068: PUSH
85069: LD_VAR 0 1
85073: ARRAY
85074: PUSH
85075: LD_VAR 0 2
85079: ARRAY
85080: PUSH
85081: LD_INT 2
85083: ARRAY
85084: PPUSH
85085: CALL_OW 458
85089: AND
85090: IFFALSE 85184
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
85092: LD_EXP 128
85096: PUSH
85097: LD_VAR 0 1
85101: ARRAY
85102: PUSH
85103: LD_VAR 0 2
85107: ARRAY
85108: PUSH
85109: LD_INT 1
85111: ARRAY
85112: PPUSH
85113: LD_EXP 128
85117: PUSH
85118: LD_VAR 0 1
85122: ARRAY
85123: PUSH
85124: LD_VAR 0 2
85128: ARRAY
85129: PUSH
85130: LD_INT 2
85132: ARRAY
85133: PPUSH
85134: LD_VAR 0 3
85138: PPUSH
85139: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
85143: LD_ADDR_EXP 128
85147: PUSH
85148: LD_EXP 128
85152: PPUSH
85153: LD_VAR 0 1
85157: PPUSH
85158: LD_EXP 128
85162: PUSH
85163: LD_VAR 0 1
85167: ARRAY
85168: PPUSH
85169: LD_VAR 0 2
85173: PPUSH
85174: CALL_OW 3
85178: PPUSH
85179: CALL_OW 1
85183: ST_TO_ADDR
// end ; end ;
85184: GO 84935
85186: POP
85187: POP
// end ;
85188: GO 84853
85190: POP
85191: POP
// end ;
85192: PPOPN 4
85194: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
85195: LD_INT 0
85197: PPUSH
85198: PPUSH
// result := false ;
85199: LD_ADDR_VAR 0 4
85203: PUSH
85204: LD_INT 0
85206: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
85207: LD_VAR 0 1
85211: PPUSH
85212: CALL_OW 264
85216: PUSH
85217: LD_INT 81
85219: EQUAL
85220: NOT
85221: IFFALSE 85225
// exit ;
85223: GO 85465
// index := GetElementIndex ( minersList , unit ) ;
85225: LD_ADDR_VAR 0 5
85229: PUSH
85230: LD_EXP 127
85234: PPUSH
85235: LD_VAR 0 1
85239: PPUSH
85240: CALL 30129 0 2
85244: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
85245: LD_EXP 128
85249: PUSH
85250: LD_VAR 0 5
85254: ARRAY
85255: PUSH
85256: LD_EXP 129
85260: GREATEREQUAL
85261: IFFALSE 85265
// exit ;
85263: GO 85465
// ComMoveXY ( unit , x , y ) ;
85265: LD_VAR 0 1
85269: PPUSH
85270: LD_VAR 0 2
85274: PPUSH
85275: LD_VAR 0 3
85279: PPUSH
85280: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85284: LD_INT 35
85286: PPUSH
85287: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
85291: LD_VAR 0 1
85295: PPUSH
85296: LD_VAR 0 2
85300: PPUSH
85301: LD_VAR 0 3
85305: PPUSH
85306: CALL 61465 0 3
85310: NOT
85311: PUSH
85312: LD_VAR 0 1
85316: PPUSH
85317: CALL_OW 314
85321: AND
85322: IFFALSE 85326
// exit ;
85324: GO 85465
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
85326: LD_VAR 0 2
85330: PPUSH
85331: LD_VAR 0 3
85335: PPUSH
85336: CALL_OW 428
85340: PUSH
85341: LD_VAR 0 1
85345: EQUAL
85346: PUSH
85347: LD_VAR 0 1
85351: PPUSH
85352: CALL_OW 314
85356: NOT
85357: AND
85358: IFFALSE 85284
// PlaySoundXY ( x , y , PlantMine ) ;
85360: LD_VAR 0 2
85364: PPUSH
85365: LD_VAR 0 3
85369: PPUSH
85370: LD_STRING PlantMine
85372: PPUSH
85373: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
85377: LD_VAR 0 2
85381: PPUSH
85382: LD_VAR 0 3
85386: PPUSH
85387: LD_VAR 0 1
85391: PPUSH
85392: CALL_OW 255
85396: PPUSH
85397: LD_INT 0
85399: PPUSH
85400: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
85404: LD_ADDR_EXP 128
85408: PUSH
85409: LD_EXP 128
85413: PPUSH
85414: LD_VAR 0 5
85418: PUSH
85419: LD_EXP 128
85423: PUSH
85424: LD_VAR 0 5
85428: ARRAY
85429: PUSH
85430: LD_INT 1
85432: PLUS
85433: PUSH
85434: EMPTY
85435: LIST
85436: LIST
85437: PPUSH
85438: LD_VAR 0 2
85442: PUSH
85443: LD_VAR 0 3
85447: PUSH
85448: EMPTY
85449: LIST
85450: LIST
85451: PPUSH
85452: CALL 30344 0 3
85456: ST_TO_ADDR
// result := true ;
85457: LD_ADDR_VAR 0 4
85461: PUSH
85462: LD_INT 1
85464: ST_TO_ADDR
// end ;
85465: LD_VAR 0 4
85469: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
85470: LD_INT 0
85472: PPUSH
85473: PPUSH
85474: PPUSH
// if not unit in minersList then
85475: LD_VAR 0 1
85479: PUSH
85480: LD_EXP 127
85484: IN
85485: NOT
85486: IFFALSE 85490
// exit ;
85488: GO 85882
// index := GetElementIndex ( minersList , unit ) ;
85490: LD_ADDR_VAR 0 6
85494: PUSH
85495: LD_EXP 127
85499: PPUSH
85500: LD_VAR 0 1
85504: PPUSH
85505: CALL 30129 0 2
85509: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
85510: LD_ADDR_VAR 0 5
85514: PUSH
85515: DOUBLE
85516: LD_EXP 128
85520: PUSH
85521: LD_VAR 0 6
85525: ARRAY
85526: INC
85527: ST_TO_ADDR
85528: LD_INT 1
85530: PUSH
85531: FOR_DOWNTO
85532: IFFALSE 85693
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
85534: LD_EXP 128
85538: PUSH
85539: LD_VAR 0 6
85543: ARRAY
85544: PUSH
85545: LD_VAR 0 5
85549: ARRAY
85550: PUSH
85551: LD_INT 1
85553: ARRAY
85554: PUSH
85555: LD_VAR 0 2
85559: EQUAL
85560: PUSH
85561: LD_EXP 128
85565: PUSH
85566: LD_VAR 0 6
85570: ARRAY
85571: PUSH
85572: LD_VAR 0 5
85576: ARRAY
85577: PUSH
85578: LD_INT 2
85580: ARRAY
85581: PUSH
85582: LD_VAR 0 3
85586: EQUAL
85587: AND
85588: IFFALSE 85691
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85590: LD_EXP 128
85594: PUSH
85595: LD_VAR 0 6
85599: ARRAY
85600: PUSH
85601: LD_VAR 0 5
85605: ARRAY
85606: PUSH
85607: LD_INT 1
85609: ARRAY
85610: PPUSH
85611: LD_EXP 128
85615: PUSH
85616: LD_VAR 0 6
85620: ARRAY
85621: PUSH
85622: LD_VAR 0 5
85626: ARRAY
85627: PUSH
85628: LD_INT 2
85630: ARRAY
85631: PPUSH
85632: LD_VAR 0 1
85636: PPUSH
85637: CALL_OW 255
85641: PPUSH
85642: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85646: LD_ADDR_EXP 128
85650: PUSH
85651: LD_EXP 128
85655: PPUSH
85656: LD_VAR 0 6
85660: PPUSH
85661: LD_EXP 128
85665: PUSH
85666: LD_VAR 0 6
85670: ARRAY
85671: PPUSH
85672: LD_VAR 0 5
85676: PPUSH
85677: CALL_OW 3
85681: PPUSH
85682: CALL_OW 1
85686: ST_TO_ADDR
// exit ;
85687: POP
85688: POP
85689: GO 85882
// end ; end ;
85691: GO 85531
85693: POP
85694: POP
// for i := minerMinesList [ index ] downto 1 do
85695: LD_ADDR_VAR 0 5
85699: PUSH
85700: DOUBLE
85701: LD_EXP 128
85705: PUSH
85706: LD_VAR 0 6
85710: ARRAY
85711: INC
85712: ST_TO_ADDR
85713: LD_INT 1
85715: PUSH
85716: FOR_DOWNTO
85717: IFFALSE 85880
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
85719: LD_EXP 128
85723: PUSH
85724: LD_VAR 0 6
85728: ARRAY
85729: PUSH
85730: LD_VAR 0 5
85734: ARRAY
85735: PUSH
85736: LD_INT 1
85738: ARRAY
85739: PPUSH
85740: LD_EXP 128
85744: PUSH
85745: LD_VAR 0 6
85749: ARRAY
85750: PUSH
85751: LD_VAR 0 5
85755: ARRAY
85756: PUSH
85757: LD_INT 2
85759: ARRAY
85760: PPUSH
85761: LD_VAR 0 2
85765: PPUSH
85766: LD_VAR 0 3
85770: PPUSH
85771: CALL_OW 298
85775: PUSH
85776: LD_INT 6
85778: LESS
85779: IFFALSE 85878
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85781: LD_EXP 128
85785: PUSH
85786: LD_VAR 0 6
85790: ARRAY
85791: PUSH
85792: LD_VAR 0 5
85796: ARRAY
85797: PUSH
85798: LD_INT 1
85800: ARRAY
85801: PPUSH
85802: LD_EXP 128
85806: PUSH
85807: LD_VAR 0 6
85811: ARRAY
85812: PUSH
85813: LD_VAR 0 5
85817: ARRAY
85818: PUSH
85819: LD_INT 2
85821: ARRAY
85822: PPUSH
85823: LD_VAR 0 1
85827: PPUSH
85828: CALL_OW 255
85832: PPUSH
85833: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85837: LD_ADDR_EXP 128
85841: PUSH
85842: LD_EXP 128
85846: PPUSH
85847: LD_VAR 0 6
85851: PPUSH
85852: LD_EXP 128
85856: PUSH
85857: LD_VAR 0 6
85861: ARRAY
85862: PPUSH
85863: LD_VAR 0 5
85867: PPUSH
85868: CALL_OW 3
85872: PPUSH
85873: CALL_OW 1
85877: ST_TO_ADDR
// end ; end ;
85878: GO 85716
85880: POP
85881: POP
// end ;
85882: LD_VAR 0 4
85886: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
85887: LD_INT 0
85889: PPUSH
85890: PPUSH
85891: PPUSH
85892: PPUSH
85893: PPUSH
85894: PPUSH
85895: PPUSH
85896: PPUSH
85897: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
85898: LD_VAR 0 1
85902: PPUSH
85903: CALL_OW 264
85907: PUSH
85908: LD_INT 81
85910: EQUAL
85911: NOT
85912: PUSH
85913: LD_VAR 0 1
85917: PUSH
85918: LD_EXP 127
85922: IN
85923: NOT
85924: OR
85925: IFFALSE 85929
// exit ;
85927: GO 86251
// index := GetElementIndex ( minersList , unit ) ;
85929: LD_ADDR_VAR 0 6
85933: PUSH
85934: LD_EXP 127
85938: PPUSH
85939: LD_VAR 0 1
85943: PPUSH
85944: CALL 30129 0 2
85948: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
85949: LD_ADDR_VAR 0 8
85953: PUSH
85954: LD_EXP 129
85958: PUSH
85959: LD_EXP 128
85963: PUSH
85964: LD_VAR 0 6
85968: ARRAY
85969: MINUS
85970: ST_TO_ADDR
// if not minesFreeAmount then
85971: LD_VAR 0 8
85975: NOT
85976: IFFALSE 85980
// exit ;
85978: GO 86251
// tmp := [ ] ;
85980: LD_ADDR_VAR 0 7
85984: PUSH
85985: EMPTY
85986: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
85987: LD_ADDR_VAR 0 5
85991: PUSH
85992: DOUBLE
85993: LD_INT 1
85995: DEC
85996: ST_TO_ADDR
85997: LD_VAR 0 8
86001: PUSH
86002: FOR_TO
86003: IFFALSE 86198
// begin _d := rand ( 0 , 5 ) ;
86005: LD_ADDR_VAR 0 11
86009: PUSH
86010: LD_INT 0
86012: PPUSH
86013: LD_INT 5
86015: PPUSH
86016: CALL_OW 12
86020: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
86021: LD_ADDR_VAR 0 12
86025: PUSH
86026: LD_INT 2
86028: PPUSH
86029: LD_INT 6
86031: PPUSH
86032: CALL_OW 12
86036: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
86037: LD_ADDR_VAR 0 9
86041: PUSH
86042: LD_VAR 0 2
86046: PPUSH
86047: LD_VAR 0 11
86051: PPUSH
86052: LD_VAR 0 12
86056: PPUSH
86057: CALL_OW 272
86061: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
86062: LD_ADDR_VAR 0 10
86066: PUSH
86067: LD_VAR 0 3
86071: PPUSH
86072: LD_VAR 0 11
86076: PPUSH
86077: LD_VAR 0 12
86081: PPUSH
86082: CALL_OW 273
86086: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
86087: LD_VAR 0 9
86091: PPUSH
86092: LD_VAR 0 10
86096: PPUSH
86097: CALL_OW 488
86101: PUSH
86102: LD_VAR 0 9
86106: PUSH
86107: LD_VAR 0 10
86111: PUSH
86112: EMPTY
86113: LIST
86114: LIST
86115: PUSH
86116: LD_VAR 0 7
86120: IN
86121: NOT
86122: AND
86123: PUSH
86124: LD_VAR 0 9
86128: PPUSH
86129: LD_VAR 0 10
86133: PPUSH
86134: CALL_OW 458
86138: NOT
86139: AND
86140: IFFALSE 86182
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
86142: LD_ADDR_VAR 0 7
86146: PUSH
86147: LD_VAR 0 7
86151: PPUSH
86152: LD_VAR 0 7
86156: PUSH
86157: LD_INT 1
86159: PLUS
86160: PPUSH
86161: LD_VAR 0 9
86165: PUSH
86166: LD_VAR 0 10
86170: PUSH
86171: EMPTY
86172: LIST
86173: LIST
86174: PPUSH
86175: CALL_OW 1
86179: ST_TO_ADDR
86180: GO 86196
// i := i - 1 ;
86182: LD_ADDR_VAR 0 5
86186: PUSH
86187: LD_VAR 0 5
86191: PUSH
86192: LD_INT 1
86194: MINUS
86195: ST_TO_ADDR
// end ;
86196: GO 86002
86198: POP
86199: POP
// for i in tmp do
86200: LD_ADDR_VAR 0 5
86204: PUSH
86205: LD_VAR 0 7
86209: PUSH
86210: FOR_IN
86211: IFFALSE 86249
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
86213: LD_VAR 0 1
86217: PPUSH
86218: LD_VAR 0 5
86222: PUSH
86223: LD_INT 1
86225: ARRAY
86226: PPUSH
86227: LD_VAR 0 5
86231: PUSH
86232: LD_INT 2
86234: ARRAY
86235: PPUSH
86236: CALL 85195 0 3
86240: NOT
86241: IFFALSE 86247
// exit ;
86243: POP
86244: POP
86245: GO 86251
86247: GO 86210
86249: POP
86250: POP
// end ;
86251: LD_VAR 0 4
86255: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
86256: LD_INT 0
86258: PPUSH
86259: PPUSH
86260: PPUSH
86261: PPUSH
86262: PPUSH
86263: PPUSH
86264: PPUSH
// if not GetClass ( unit ) = class_sniper then
86265: LD_VAR 0 1
86269: PPUSH
86270: CALL_OW 257
86274: PUSH
86275: LD_INT 5
86277: EQUAL
86278: NOT
86279: IFFALSE 86283
// exit ;
86281: GO 86671
// dist := 8 ;
86283: LD_ADDR_VAR 0 5
86287: PUSH
86288: LD_INT 8
86290: ST_TO_ADDR
// viewRange := 12 ;
86291: LD_ADDR_VAR 0 7
86295: PUSH
86296: LD_INT 12
86298: ST_TO_ADDR
// side := GetSide ( unit ) ;
86299: LD_ADDR_VAR 0 6
86303: PUSH
86304: LD_VAR 0 1
86308: PPUSH
86309: CALL_OW 255
86313: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
86314: LD_INT 61
86316: PPUSH
86317: LD_VAR 0 6
86321: PPUSH
86322: CALL_OW 321
86326: PUSH
86327: LD_INT 2
86329: EQUAL
86330: IFFALSE 86340
// viewRange := 16 ;
86332: LD_ADDR_VAR 0 7
86336: PUSH
86337: LD_INT 16
86339: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
86340: LD_VAR 0 1
86344: PPUSH
86345: LD_VAR 0 2
86349: PPUSH
86350: LD_VAR 0 3
86354: PPUSH
86355: CALL_OW 297
86359: PUSH
86360: LD_VAR 0 5
86364: GREATER
86365: IFFALSE 86444
// begin ComMoveXY ( unit , x , y ) ;
86367: LD_VAR 0 1
86371: PPUSH
86372: LD_VAR 0 2
86376: PPUSH
86377: LD_VAR 0 3
86381: PPUSH
86382: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86386: LD_INT 35
86388: PPUSH
86389: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
86393: LD_VAR 0 1
86397: PPUSH
86398: LD_VAR 0 2
86402: PPUSH
86403: LD_VAR 0 3
86407: PPUSH
86408: CALL 61465 0 3
86412: NOT
86413: IFFALSE 86417
// exit ;
86415: GO 86671
// until GetDistUnitXY ( unit , x , y ) < dist ;
86417: LD_VAR 0 1
86421: PPUSH
86422: LD_VAR 0 2
86426: PPUSH
86427: LD_VAR 0 3
86431: PPUSH
86432: CALL_OW 297
86436: PUSH
86437: LD_VAR 0 5
86441: LESS
86442: IFFALSE 86386
// end ; ComTurnXY ( unit , x , y ) ;
86444: LD_VAR 0 1
86448: PPUSH
86449: LD_VAR 0 2
86453: PPUSH
86454: LD_VAR 0 3
86458: PPUSH
86459: CALL_OW 118
// wait ( 5 ) ;
86463: LD_INT 5
86465: PPUSH
86466: CALL_OW 67
// _d := GetDir ( unit ) ;
86470: LD_ADDR_VAR 0 10
86474: PUSH
86475: LD_VAR 0 1
86479: PPUSH
86480: CALL_OW 254
86484: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
86485: LD_ADDR_VAR 0 8
86489: PUSH
86490: LD_VAR 0 1
86494: PPUSH
86495: CALL_OW 250
86499: PPUSH
86500: LD_VAR 0 10
86504: PPUSH
86505: LD_VAR 0 5
86509: PPUSH
86510: CALL_OW 272
86514: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
86515: LD_ADDR_VAR 0 9
86519: PUSH
86520: LD_VAR 0 1
86524: PPUSH
86525: CALL_OW 251
86529: PPUSH
86530: LD_VAR 0 10
86534: PPUSH
86535: LD_VAR 0 5
86539: PPUSH
86540: CALL_OW 273
86544: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
86545: LD_VAR 0 8
86549: PPUSH
86550: LD_VAR 0 9
86554: PPUSH
86555: CALL_OW 488
86559: NOT
86560: IFFALSE 86564
// exit ;
86562: GO 86671
// ComAnimCustom ( unit , 1 ) ;
86564: LD_VAR 0 1
86568: PPUSH
86569: LD_INT 1
86571: PPUSH
86572: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
86576: LD_VAR 0 8
86580: PPUSH
86581: LD_VAR 0 9
86585: PPUSH
86586: LD_VAR 0 6
86590: PPUSH
86591: LD_VAR 0 7
86595: PPUSH
86596: CALL_OW 330
// repeat wait ( 1 ) ;
86600: LD_INT 1
86602: PPUSH
86603: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
86607: LD_VAR 0 1
86611: PPUSH
86612: CALL_OW 316
86616: PUSH
86617: LD_VAR 0 1
86621: PPUSH
86622: CALL_OW 314
86626: OR
86627: PUSH
86628: LD_VAR 0 1
86632: PPUSH
86633: CALL_OW 302
86637: NOT
86638: OR
86639: PUSH
86640: LD_VAR 0 1
86644: PPUSH
86645: CALL_OW 301
86649: OR
86650: IFFALSE 86600
// RemoveSeeing ( _x , _y , side ) ;
86652: LD_VAR 0 8
86656: PPUSH
86657: LD_VAR 0 9
86661: PPUSH
86662: LD_VAR 0 6
86666: PPUSH
86667: CALL_OW 331
// end ; end_of_file
86671: LD_VAR 0 4
86675: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86676: LD_VAR 0 1
86680: PPUSH
86681: LD_VAR 0 2
86685: PPUSH
86686: LD_VAR 0 3
86690: PPUSH
86691: LD_VAR 0 4
86695: PPUSH
86696: LD_VAR 0 5
86700: PPUSH
86701: LD_VAR 0 6
86705: PPUSH
86706: CALL 66626 0 6
// end ;
86710: PPOPN 6
86712: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86713: LD_INT 0
86715: PPUSH
// begin if not units then
86716: LD_VAR 0 1
86720: NOT
86721: IFFALSE 86725
// exit ;
86723: GO 86725
// end ;
86725: PPOPN 7
86727: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86728: CALL 66597 0 0
// end ;
86732: PPOPN 1
86734: END
