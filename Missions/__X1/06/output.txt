// starting begin ResetFog ;
   0: CALL_OW 335
// InitGlobalVariables ;
   4: CALL 61051 0 0
// Init ;
   8: CALL 62 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 26
// Difficulty := 3 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 3
  25: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  26: LD_INT 1
  28: PPUSH
  29: LD_INT 3
  31: PPUSH
  32: CALL 6301 0 2
// PrepareArabian ;
  36: CALL 321 0 0
// PrepareRussian ;
  40: CALL 7148 0 0
// Action ;
  44: CALL 14370 0 0
// if debug then
  48: LD_EXP 1
  52: IFFALSE 61
// FogOff ( 2 ) ;
  54: LD_INT 2
  56: PPUSH
  57: CALL_OW 344
// end ;
  61: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// debug := false ;
  65: LD_ADDR_EXP 1
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// prefix := 05_ ;
  73: LD_ADDR_EXP 2
  77: PUSH
  78: LD_STRING 05_
  80: ST_TO_ADDR
// bergkampfArrived := false ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// omarArrived := false ;
  89: LD_ADDR_EXP 6
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// outpostDestroyed := false ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// ruLoseCounter := 0 ;
 105: LD_ADDR_EXP 5
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// rolfScriptBase := false ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// omarScriptBase := false ;
 121: LD_ADDR_EXP 8
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// linkedWithRolf := 0 ;
 129: LD_ADDR_EXP 10
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 137: LD_ADDR_EXP 24
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// rolfDied := false ;
 145: LD_ADDR_EXP 11
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// leninSpotted := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// mortarConstructed := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// rolfHasVehicles := false ;
 169: LD_ADDR_EXP 14
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// leninScriptBase := true ;
 177: LD_ADDR_EXP 9
 181: PUSH
 182: LD_INT 1
 184: ST_TO_ADDR
// rolfWantVehicles := false ;
 185: LD_ADDR_EXP 15
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// omarWantVehicles := false ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// omarHasVehicles := false ;
 201: LD_ADDR_EXP 20
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// escapeAllowed := false ;
 209: LD_ADDR_EXP 22
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 8 8$00 , 6 6$00 , 5 5$00 ] [ Difficulty ] ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_INT 16800
 224: PUSH
 225: LD_INT 12600
 227: PUSH
 228: LD_INT 10500
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: PUSH
 236: LD_OWVAR 67
 240: ARRAY
 241: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 9 9$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
 242: LD_ADDR_EXP 18
 246: PUSH
 247: LD_INT 18900
 249: PUSH
 250: LD_INT 14700
 252: PUSH
 253: LD_INT 12600
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: PUSH
 261: LD_OWVAR 67
 265: ARRAY
 266: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 267: LD_ADDR_EXP 19
 271: PUSH
 272: LD_INT 4
 274: PUSH
 275: LD_INT 5
 277: PUSH
 278: LD_INT 6
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: LIST
 285: PUSH
 286: LD_OWVAR 67
 290: ARRAY
 291: ST_TO_ADDR
// omarAttack := false ;
 292: LD_ADDR_EXP 21
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// disableAttackOnHeike := false ;
 300: LD_ADDR_EXP 25
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// escapeTimer := 4 4$00 ;
 308: LD_ADDR_EXP 23
 312: PUSH
 313: LD_INT 8400
 315: ST_TO_ADDR
// end ; end_of_file
 316: LD_VAR 0 1
 320: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 321: LD_INT 0
 323: PPUSH
 324: PPUSH
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
// uc_nation := 2 ;
 335: LD_ADDR_OWVAR 21
 339: PUSH
 340: LD_INT 2
 342: ST_TO_ADDR
// uc_side := 5 ;
 343: LD_ADDR_OWVAR 20
 347: PUSH
 348: LD_INT 5
 350: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 351: LD_ADDR_EXP 34
 355: PUSH
 356: LD_STRING Abdul
 358: PPUSH
 359: LD_INT 0
 361: PPUSH
 362: LD_STRING 
 364: PPUSH
 365: CALL 22296 0 3
 369: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 370: LD_ADDR_EXP 36
 374: PUSH
 375: LD_STRING Omar
 377: PPUSH
 378: LD_INT 0
 380: PPUSH
 381: LD_STRING 
 383: PPUSH
 384: CALL 22296 0 3
 388: ST_TO_ADDR
// uc_side := 2 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 2
 396: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 397: LD_ADDR_EXP 26
 401: PUSH
 402: LD_STRING Heike
 404: PPUSH
 405: LD_EXP 1
 409: NOT
 410: PPUSH
 411: LD_EXP 2
 415: PPUSH
 416: CALL 22296 0 3
 420: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 421: LD_ADDR_EXP 29
 425: PUSH
 426: LD_STRING Ibrahim
 428: PPUSH
 429: LD_EXP 1
 433: NOT
 434: PPUSH
 435: LD_EXP 2
 439: PPUSH
 440: CALL 22296 0 3
 444: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 445: LD_ADDR_EXP 27
 449: PUSH
 450: LD_STRING Givi
 452: PPUSH
 453: LD_EXP 1
 457: NOT
 458: PPUSH
 459: LD_EXP 2
 463: PPUSH
 464: CALL 22296 0 3
 468: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 469: LD_ADDR_EXP 30
 473: PUSH
 474: LD_STRING Kamil
 476: PPUSH
 477: LD_EXP 1
 481: NOT
 482: PPUSH
 483: LD_EXP 2
 487: PPUSH
 488: CALL 22296 0 3
 492: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 493: LD_ADDR_EXP 31
 497: PUSH
 498: LD_STRING Kaia
 500: PPUSH
 501: LD_EXP 1
 505: NOT
 506: PPUSH
 507: LD_EXP 2
 511: PPUSH
 512: CALL 22296 0 3
 516: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 517: LD_ADDR_EXP 32
 521: PUSH
 522: LD_STRING Sophia
 524: PPUSH
 525: LD_EXP 1
 529: NOT
 530: PPUSH
 531: LD_EXP 2
 535: PPUSH
 536: CALL 22296 0 3
 540: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 541: LD_ADDR_EXP 33
 545: PUSH
 546: LD_STRING Markov
 548: PPUSH
 549: LD_EXP 1
 553: NOT
 554: PPUSH
 555: LD_EXP 2
 559: PPUSH
 560: CALL 22296 0 3
 564: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 565: LD_ADDR_EXP 38
 569: PUSH
 570: LD_STRING Aviradze
 572: PPUSH
 573: LD_EXP 1
 577: NOT
 578: PPUSH
 579: LD_EXP 2
 583: PPUSH
 584: CALL 22296 0 3
 588: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 589: LD_ADDR_EXP 37
 593: PUSH
 594: LD_STRING Kurt
 596: PPUSH
 597: LD_EXP 1
 601: NOT
 602: PPUSH
 603: LD_EXP 2
 607: PPUSH
 608: CALL 22296 0 3
 612: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 613: LD_ADDR_EXP 28
 617: PUSH
 618: LD_STRING Mike
 620: PPUSH
 621: LD_EXP 1
 625: NOT
 626: PPUSH
 627: LD_EXP 2
 631: PPUSH
 632: CALL 22296 0 3
 636: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 637: LD_ADDR_EXP 35
 641: PUSH
 642: LD_STRING Olaf
 644: PPUSH
 645: LD_INT 0
 647: PPUSH
 648: LD_STRING 
 650: PPUSH
 651: CALL 22296 0 3
 655: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 656: LD_ADDR_EXP 41
 660: PUSH
 661: LD_STRING 05_others
 663: PPUSH
 664: CALL_OW 31
 668: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 669: LD_ADDR_EXP 42
 673: PUSH
 674: LD_STRING 05_apes
 676: PPUSH
 677: CALL_OW 31
 681: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 682: LD_ADDR_VAR 0 5
 686: PUSH
 687: LD_STRING 05_Radar
 689: PPUSH
 690: LD_EXP 1
 694: PPUSH
 695: CALL_OW 30
 699: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 700: LD_ADDR_VAR 0 6
 704: PUSH
 705: LD_STRING 05_RemoteControl
 707: PPUSH
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 30
 717: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 718: LD_ADDR_VAR 0 7
 722: PUSH
 723: LD_STRING 05_DrugsTested
 725: PPUSH
 726: LD_EXP 1
 730: PPUSH
 731: CALL_OW 30
 735: ST_TO_ADDR
// if hasDrugs then
 736: LD_VAR 0 7
 740: IFFALSE 755
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 742: LD_INT 5
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 2
 750: PPUSH
 751: CALL_OW 322
// if hasRadar then
 755: LD_VAR 0 5
 759: IFFALSE 774
// SetTech ( tech_radar , 2 , state_researched ) ;
 761: LD_INT 6
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: LD_INT 2
 769: PPUSH
 770: CALL_OW 322
// if hasRemote then
 774: LD_VAR 0 6
 778: IFFALSE 793
// SetTech ( tech_remCont , 2 , state_researched ) ;
 780: LD_INT 15
 782: PPUSH
 783: LD_INT 2
 785: PPUSH
 786: LD_INT 2
 788: PPUSH
 789: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 793: LD_ADDR_VAR 0 12
 797: PUSH
 798: LD_INT 5
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 517
 808: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 809: LD_ADDR_VAR 0 2
 813: PUSH
 814: DOUBLE
 815: LD_INT 1
 817: DEC
 818: ST_TO_ADDR
 819: LD_VAR 0 12
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: PUSH
 828: FOR_TO
 829: IFFALSE 906
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 831: LD_VAR 0 12
 835: PUSH
 836: LD_INT 1
 838: ARRAY
 839: PUSH
 840: LD_VAR 0 2
 844: ARRAY
 845: PPUSH
 846: LD_VAR 0 12
 850: PUSH
 851: LD_INT 2
 853: ARRAY
 854: PUSH
 855: LD_VAR 0 2
 859: ARRAY
 860: PPUSH
 861: CALL_OW 351
 865: IFFALSE 904
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 867: LD_VAR 0 12
 871: PUSH
 872: LD_INT 1
 874: ARRAY
 875: PUSH
 876: LD_VAR 0 2
 880: ARRAY
 881: PPUSH
 882: LD_VAR 0 12
 886: PUSH
 887: LD_INT 2
 889: ARRAY
 890: PUSH
 891: LD_VAR 0 2
 895: ARRAY
 896: PPUSH
 897: LD_INT 2
 899: PPUSH
 900: CALL_OW 244
 904: GO 828
 906: POP
 907: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 908: LD_ADDR_VAR 0 4
 912: PUSH
 913: LD_INT 0
 915: PUSH
 916: LD_INT 206
 918: PUSH
 919: LD_INT 80
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 32
 933: PUSH
 934: LD_INT 221
 936: PUSH
 937: LD_INT 95
 939: PUSH
 940: LD_INT 5
 942: PUSH
 943: LD_INT 23
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_INT 32
 955: PUSH
 956: LD_INT 223
 958: PUSH
 959: LD_INT 88
 961: PUSH
 962: LD_INT 5
 964: PUSH
 965: LD_INT 24
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: PUSH
 975: LD_INT 32
 977: PUSH
 978: LD_INT 202
 980: PUSH
 981: LD_INT 64
 983: PUSH
 984: LD_INT 2
 986: PUSH
 987: LD_INT 25
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: PUSH
 997: LD_INT 3
 999: PUSH
1000: LD_INT 203
1002: PUSH
1003: LD_INT 91
1005: PUSH
1006: LD_INT 1
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: PUSH
1015: LD_INT 8
1017: PUSH
1018: LD_INT 217
1020: PUSH
1021: LD_INT 78
1023: PUSH
1024: LD_INT 4
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 27
1035: PUSH
1036: LD_INT 220
1038: PUSH
1039: LD_INT 99
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: PUSH
1051: LD_INT 27
1053: PUSH
1054: LD_INT 220
1056: PUSH
1057: LD_INT 103
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_INT 27
1071: PUSH
1072: LD_INT 216
1074: PUSH
1075: LD_INT 102
1077: PUSH
1078: LD_INT 1
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: PUSH
1087: LD_INT 17
1089: PUSH
1090: LD_INT 203
1092: PUSH
1093: LD_INT 94
1095: PUSH
1096: LD_INT 0
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_INT 23
1107: PUSH
1108: LD_INT 200
1110: PUSH
1111: LD_INT 88
1113: PUSH
1114: LD_INT 2
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 16
1125: PUSH
1126: LD_INT 199
1128: PUSH
1129: LD_INT 91
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 26
1143: PUSH
1144: LD_INT 197
1146: PUSH
1147: LD_INT 81
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_INT 26
1161: PUSH
1162: LD_INT 197
1164: PUSH
1165: LD_INT 78
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: ST_TO_ADDR
// if hasRadar then
1193: LD_VAR 0 5
1197: IFFALSE 1241
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1199: LD_ADDR_VAR 0 4
1203: PUSH
1204: LD_VAR 0 4
1208: PPUSH
1209: LD_VAR 0 4
1213: PUSH
1214: LD_INT 1
1216: PLUS
1217: PPUSH
1218: LD_INT 20
1220: PUSH
1221: LD_INT 203
1223: PUSH
1224: LD_INT 87
1226: PUSH
1227: LD_INT 3
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: PPUSH
1236: CALL_OW 1
1240: ST_TO_ADDR
// if hasRemote then
1241: LD_VAR 0 6
1245: IFFALSE 1289
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1247: LD_ADDR_VAR 0 4
1251: PUSH
1252: LD_VAR 0 4
1256: PPUSH
1257: LD_VAR 0 4
1261: PUSH
1262: LD_INT 1
1264: PLUS
1265: PPUSH
1266: LD_INT 22
1268: PUSH
1269: LD_INT 207
1271: PUSH
1272: LD_INT 95
1274: PUSH
1275: LD_INT 5
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: PPUSH
1284: CALL_OW 1
1288: ST_TO_ADDR
// for i in base do
1289: LD_ADDR_VAR 0 2
1293: PUSH
1294: LD_VAR 0 4
1298: PUSH
1299: FOR_IN
1300: IFFALSE 1481
// begin bc_type := i [ 1 ] ;
1302: LD_ADDR_OWVAR 42
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: LD_INT 1
1314: ARRAY
1315: ST_TO_ADDR
// bc_level := 3 ;
1316: LD_ADDR_OWVAR 43
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1324: LD_VAR 0 2
1328: PUSH
1329: LD_INT 1
1331: ARRAY
1332: PUSH
1333: LD_INT 8
1335: EQUAL
1336: IFFALSE 1371
// begin bc_kind1 := b_lab_weapon ;
1338: LD_ADDR_OWVAR 44
1342: PUSH
1343: LD_INT 10
1345: ST_TO_ADDR
// if hasRadar then
1346: LD_VAR 0 5
1350: IFFALSE 1362
// bc_kind2 := b_lab_opto else
1352: LD_ADDR_OWVAR 45
1356: PUSH
1357: LD_INT 15
1359: ST_TO_ADDR
1360: GO 1371
// bc_kind2 := - 1 ;
1362: LD_ADDR_OWVAR 45
1366: PUSH
1367: LD_INT 1
1369: NEG
1370: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1371: LD_ADDR_VAR 0 3
1375: PUSH
1376: LD_VAR 0 2
1380: PUSH
1381: LD_INT 2
1383: ARRAY
1384: PPUSH
1385: LD_VAR 0 2
1389: PUSH
1390: LD_INT 3
1392: ARRAY
1393: PPUSH
1394: LD_VAR 0 2
1398: PUSH
1399: LD_INT 4
1401: ARRAY
1402: PPUSH
1403: CALL_OW 47
1407: ST_TO_ADDR
// if i > 4 then
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 4
1415: GREATER
1416: IFFALSE 1436
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1418: LD_VAR 0 3
1422: PPUSH
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 5
1430: ARRAY
1431: PPUSH
1432: CALL_OW 431
// if i [ 1 ] = b_bunker then
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 1
1443: ARRAY
1444: PUSH
1445: LD_INT 32
1447: EQUAL
1448: IFFALSE 1479
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1450: LD_ADDR_VAR 0 11
1454: PUSH
1455: LD_VAR 0 11
1459: PPUSH
1460: LD_VAR 0 11
1464: PUSH
1465: LD_INT 1
1467: PLUS
1468: PPUSH
1469: LD_VAR 0 3
1473: PPUSH
1474: CALL_OW 1
1478: ST_TO_ADDR
// end ;
1479: GO 1299
1481: POP
1482: POP
// depot := HexInfo ( 206 , 80 ) ;
1483: LD_ADDR_VAR 0 9
1487: PUSH
1488: LD_INT 206
1490: PPUSH
1491: LD_INT 80
1493: PPUSH
1494: CALL_OW 428
1498: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1499: LD_ADDR_VAR 0 8
1503: PUSH
1504: LD_INT 203
1506: PPUSH
1507: LD_INT 91
1509: PPUSH
1510: CALL_OW 428
1514: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1515: LD_ADDR_VAR 0 10
1519: PUSH
1520: LD_INT 217
1522: PPUSH
1523: LD_INT 78
1525: PPUSH
1526: CALL_OW 428
1530: ST_TO_ADDR
// arDepot := depot ;
1531: LD_ADDR_EXP 40
1535: PUSH
1536: LD_VAR 0 9
1540: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 ] [ Difficulty ] ) ;
1541: LD_VAR 0 9
1545: PPUSH
1546: CALL_OW 274
1550: PPUSH
1551: LD_INT 1
1553: PPUSH
1554: LD_INT 360
1556: PUSH
1557: LD_INT 260
1559: PUSH
1560: LD_INT 160
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: PUSH
1568: LD_OWVAR 67
1572: ARRAY
1573: PPUSH
1574: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 ] [ Difficulty ] ) ;
1578: LD_VAR 0 9
1582: PPUSH
1583: CALL_OW 274
1587: PPUSH
1588: LD_INT 2
1590: PPUSH
1591: LD_INT 200
1593: PUSH
1594: LD_INT 170
1596: PUSH
1597: LD_INT 130
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: PUSH
1605: LD_OWVAR 67
1609: ARRAY
1610: PPUSH
1611: CALL_OW 277
// uc_nation := 2 ;
1615: LD_ADDR_OWVAR 21
1619: PUSH
1620: LD_INT 2
1622: ST_TO_ADDR
// uc_side := 2 ;
1623: LD_ADDR_OWVAR 20
1627: PUSH
1628: LD_INT 2
1630: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1631: LD_INT 13
1633: PPUSH
1634: LD_INT 1
1636: PPUSH
1637: LD_INT 1
1639: PPUSH
1640: LD_INT 27
1642: PPUSH
1643: LD_INT 33
1645: PPUSH
1646: CALL 27160 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1650: CALL_OW 45
1654: PPUSH
1655: LD_INT 190
1657: PPUSH
1658: LD_INT 64
1660: PPUSH
1661: LD_INT 5
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL 60965 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1671: LD_INT 13
1673: PPUSH
1674: LD_INT 1
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: LD_INT 25
1682: PPUSH
1683: LD_INT 22
1685: PPUSH
1686: CALL 27160 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1690: CALL_OW 45
1694: PPUSH
1695: LD_INT 188
1697: PPUSH
1698: LD_INT 67
1700: PPUSH
1701: LD_INT 5
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL 60965 0 5
// if hasRemote then
1711: LD_VAR 0 6
1715: IFFALSE 1797
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1717: LD_INT 13
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: LD_INT 1
1725: PPUSH
1726: LD_INT 31
1728: PPUSH
1729: LD_INT 35
1731: PPUSH
1732: CALL 27160 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1736: CALL_OW 45
1740: PPUSH
1741: LD_INT 191
1743: PPUSH
1744: LD_INT 71
1746: PPUSH
1747: LD_INT 5
1749: PPUSH
1750: LD_INT 0
1752: PPUSH
1753: CALL 60965 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1757: LD_INT 14
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 55
1771: PPUSH
1772: CALL 27160 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1776: CALL_OW 45
1780: PPUSH
1781: LD_INT 199
1783: PPUSH
1784: LD_INT 67
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL 60965 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1797: LD_EXP 26
1801: PPUSH
1802: LD_INT 213
1804: PPUSH
1805: LD_INT 87
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1815: LD_EXP 26
1819: PPUSH
1820: LD_INT 214
1822: PPUSH
1823: LD_INT 87
1825: PPUSH
1826: CALL_OW 118
// if Kaia then
1830: LD_EXP 31
1834: IFFALSE 1869
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1836: LD_EXP 31
1840: PPUSH
1841: LD_INT 213
1843: PPUSH
1844: LD_INT 85
1846: PPUSH
1847: LD_INT 0
1849: PPUSH
1850: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1854: LD_EXP 31
1858: PPUSH
1859: LD_INT 215
1861: PPUSH
1862: LD_INT 87
1864: PPUSH
1865: CALL_OW 118
// end ; if Olaf and Kaia then
1869: LD_EXP 35
1873: PUSH
1874: LD_EXP 31
1878: AND
1879: IFFALSE 1916
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1881: LD_EXP 35
1885: PPUSH
1886: LD_INT 215
1888: PPUSH
1889: LD_INT 87
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1899: LD_EXP 35
1903: PPUSH
1904: LD_INT 213
1906: PPUSH
1907: LD_INT 85
1909: PPUSH
1910: CALL_OW 118
// end else
1914: GO 1936
// if Olaf then
1916: LD_EXP 35
1920: IFFALSE 1936
// PlaceHumanInUnit ( Olaf , factory ) ;
1922: LD_EXP 35
1926: PPUSH
1927: LD_VAR 0 8
1931: PPUSH
1932: CALL_OW 52
// if Givi then
1936: LD_EXP 27
1940: IFFALSE 2021
// begin if Kaia and Olaf then
1942: LD_EXP 31
1946: PUSH
1947: LD_EXP 35
1951: AND
1952: IFFALSE 1989
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
1954: LD_EXP 27
1958: PPUSH
1959: LD_INT 247
1961: PPUSH
1962: LD_INT 117
1964: PPUSH
1965: LD_INT 0
1967: PPUSH
1968: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
1972: LD_EXP 27
1976: PPUSH
1977: LD_INT 248
1979: PPUSH
1980: LD_INT 118
1982: PPUSH
1983: CALL_OW 118
// end else
1987: GO 2021
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
1989: LD_EXP 27
1993: PPUSH
1994: LD_INT 216
1996: PPUSH
1997: LD_INT 88
1999: PPUSH
2000: LD_INT 0
2002: PPUSH
2003: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2007: LD_EXP 27
2011: PPUSH
2012: LD_EXP 26
2016: PPUSH
2017: CALL_OW 119
// end ; end ; if Kurt then
2021: LD_EXP 37
2025: IFFALSE 2045
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2027: LD_EXP 37
2031: PPUSH
2032: LD_VAR 0 11
2036: PUSH
2037: LD_INT 2
2039: ARRAY
2040: PPUSH
2041: CALL_OW 52
// if Mike then
2045: LD_EXP 28
2049: IFFALSE 2069
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2051: LD_EXP 28
2055: PPUSH
2056: LD_VAR 0 11
2060: PUSH
2061: LD_INT 3
2063: ARRAY
2064: PPUSH
2065: CALL_OW 52
// if Kamil then
2069: LD_EXP 30
2073: IFFALSE 2135
// begin if Kaia and Olaf then
2075: LD_EXP 31
2079: PUSH
2080: LD_EXP 35
2084: AND
2085: IFFALSE 2103
// PlaceHumanInUnit ( Kamil , depot ) else
2087: LD_EXP 30
2091: PPUSH
2092: LD_VAR 0 9
2096: PPUSH
2097: CALL_OW 52
2101: GO 2135
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2103: LD_EXP 30
2107: PPUSH
2108: LD_INT 213
2110: PPUSH
2111: LD_INT 87
2113: PPUSH
2114: LD_INT 0
2116: PPUSH
2117: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2121: LD_EXP 30
2125: PPUSH
2126: LD_EXP 26
2130: PPUSH
2131: CALL_OW 119
// end ; end ; if Sophia then
2135: LD_EXP 32
2139: IFFALSE 2155
// PlaceHumanInUnit ( Sophia , depot ) ;
2141: LD_EXP 32
2145: PPUSH
2146: LD_VAR 0 9
2150: PPUSH
2151: CALL_OW 52
// if Aviradze then
2155: LD_EXP 38
2159: IFFALSE 2175
// PlaceHumanInUnit ( Aviradze , lab ) ;
2161: LD_EXP 38
2165: PPUSH
2166: LD_VAR 0 10
2170: PPUSH
2171: CALL_OW 52
// if Ibrahim then
2175: LD_EXP 29
2179: IFFALSE 2195
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2181: LD_EXP 29
2185: PPUSH
2186: LD_VAR 0 10
2190: PPUSH
2191: CALL_OW 52
// if Markov then
2195: LD_EXP 33
2199: IFFALSE 2215
// PlaceHumanInUnit ( Markov , factory ) ;
2201: LD_EXP 33
2205: PPUSH
2206: LD_VAR 0 8
2210: PPUSH
2211: CALL_OW 52
// if heikeSecondSquad then
2215: LD_EXP 41
2219: IFFALSE 2259
// for i in heikeSecondSquad do
2221: LD_ADDR_VAR 0 2
2225: PUSH
2226: LD_EXP 41
2230: PUSH
2231: FOR_IN
2232: IFFALSE 2257
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2234: LD_VAR 0 2
2238: PPUSH
2239: LD_INT 190
2241: PPUSH
2242: LD_INT 65
2244: PPUSH
2245: LD_INT 5
2247: PPUSH
2248: LD_INT 0
2250: PPUSH
2251: CALL_OW 50
2255: GO 2231
2257: POP
2258: POP
// if heikeApes then
2259: LD_EXP 42
2263: IFFALSE 2303
// for i in heikeApes do
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_EXP 42
2274: PUSH
2275: FOR_IN
2276: IFFALSE 2301
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2278: LD_VAR 0 2
2282: PPUSH
2283: LD_INT 190
2285: PPUSH
2286: LD_INT 70
2288: PPUSH
2289: LD_INT 5
2291: PPUSH
2292: LD_INT 0
2294: PPUSH
2295: CALL_OW 50
2299: GO 2275
2301: POP
2302: POP
// end ;
2303: LD_VAR 0 1
2307: RET
// export function PrepareRolfSquad ; var i , j ; begin
2308: LD_INT 0
2310: PPUSH
2311: PPUSH
2312: PPUSH
// uc_side := 8 ;
2313: LD_ADDR_OWVAR 20
2317: PUSH
2318: LD_INT 8
2320: ST_TO_ADDR
// uc_nation := 2 ;
2321: LD_ADDR_OWVAR 21
2325: PUSH
2326: LD_INT 2
2328: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2329: LD_ADDR_EXP 39
2333: PUSH
2334: LD_STRING Bergkamp
2336: PPUSH
2337: CALL_OW 25
2341: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2342: LD_ADDR_EXP 43
2346: PUSH
2347: LD_EXP 39
2351: PUSH
2352: EMPTY
2353: LIST
2354: ST_TO_ADDR
// for i := 1 to 4 do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: DOUBLE
2361: LD_INT 1
2363: DEC
2364: ST_TO_ADDR
2365: LD_INT 4
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2449
// begin for j := 1 to [ 5 , 0 , 3 , 1 ] [ i ] do
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: DOUBLE
2377: LD_INT 1
2379: DEC
2380: ST_TO_ADDR
2381: LD_INT 5
2383: PUSH
2384: LD_INT 0
2386: PUSH
2387: LD_INT 3
2389: PUSH
2390: LD_INT 1
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: PUSH
2399: LD_VAR 0 2
2403: ARRAY
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2445
// begin PrepareHuman ( false , i , 5 ) ;
2408: LD_INT 0
2410: PPUSH
2411: LD_VAR 0 2
2415: PPUSH
2416: LD_INT 5
2418: PPUSH
2419: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2423: LD_ADDR_EXP 43
2427: PUSH
2428: LD_EXP 43
2432: PPUSH
2433: CALL_OW 44
2437: PPUSH
2438: CALL 59034 0 2
2442: ST_TO_ADDR
// end ;
2443: GO 2405
2445: POP
2446: POP
// end ;
2447: GO 2368
2449: POP
2450: POP
// if HexInfo ( 5 , 3 ) then
2451: LD_INT 5
2453: PPUSH
2454: LD_INT 3
2456: PPUSH
2457: CALL_OW 428
2461: IFFALSE 2478
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2463: LD_INT 5
2465: PPUSH
2466: LD_INT 3
2468: PPUSH
2469: CALL_OW 428
2473: PPUSH
2474: CALL_OW 64
// for i in rolfSquad do
2478: LD_ADDR_VAR 0 2
2482: PUSH
2483: LD_EXP 43
2487: PUSH
2488: FOR_IN
2489: IFFALSE 2625
// begin uc_direction := 2 ;
2491: LD_ADDR_OWVAR 24
2495: PUSH
2496: LD_INT 2
2498: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2499: LD_VAR 0 2
2503: PPUSH
2504: CALL_OW 257
2508: PUSH
2509: LD_INT 3
2511: EQUAL
2512: IFFALSE 2586
// begin uc_side := 8 ;
2514: LD_ADDR_OWVAR 20
2518: PUSH
2519: LD_INT 8
2521: ST_TO_ADDR
// uc_nation := 2 ;
2522: LD_ADDR_OWVAR 21
2526: PUSH
2527: LD_INT 2
2529: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2530: LD_INT 13
2532: PPUSH
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: LD_INT 27
2541: PPUSH
2542: LD_INT 88
2544: PPUSH
2545: CALL 27160 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2549: CALL_OW 45
2553: PPUSH
2554: LD_INT 11
2556: PPUSH
2557: LD_INT 0
2559: PPUSH
2560: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2564: LD_VAR 0 2
2568: PPUSH
2569: LD_INT 5
2571: PPUSH
2572: LD_INT 3
2574: PPUSH
2575: CALL_OW 428
2579: PPUSH
2580: CALL_OW 52
// end else
2584: GO 2601
// PlaceUnitArea ( i , northSpawn , false ) ;
2586: LD_VAR 0 2
2590: PPUSH
2591: LD_INT 11
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2601: LD_VAR 0 2
2605: PPUSH
2606: LD_INT 29
2608: PPUSH
2609: LD_INT 10
2611: PPUSH
2612: CALL_OW 111
// wait ( 0 0$2 ) ;
2616: LD_INT 70
2618: PPUSH
2619: CALL_OW 67
// end ;
2623: GO 2488
2625: POP
2626: POP
// wait ( 0 0$5 ) ;
2627: LD_INT 175
2629: PPUSH
2630: CALL_OW 67
// end ;
2634: LD_VAR 0 1
2638: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2639: LD_INT 0
2641: PPUSH
2642: PPUSH
2643: PPUSH
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2644: LD_ADDR_VAR 0 3
2648: PUSH
2649: LD_INT 4
2651: PUSH
2652: LD_INT 82
2654: PUSH
2655: LD_INT 64
2657: PUSH
2658: LD_INT 1
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: PUSH
2667: LD_INT 31
2669: PUSH
2670: LD_INT 73
2672: PUSH
2673: LD_INT 58
2675: PUSH
2676: LD_INT 0
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: ST_TO_ADDR
// for i in tmp do
2689: LD_ADDR_VAR 0 2
2693: PUSH
2694: LD_VAR 0 3
2698: PUSH
2699: FOR_IN
2700: IFFALSE 2749
// AddComBuild ( Rolf , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2702: LD_EXP 39
2706: PPUSH
2707: LD_VAR 0 2
2711: PUSH
2712: LD_INT 1
2714: ARRAY
2715: PPUSH
2716: LD_VAR 0 2
2720: PUSH
2721: LD_INT 2
2723: ARRAY
2724: PPUSH
2725: LD_VAR 0 2
2729: PUSH
2730: LD_INT 3
2732: ARRAY
2733: PPUSH
2734: LD_VAR 0 2
2738: PUSH
2739: LD_INT 4
2741: ARRAY
2742: PPUSH
2743: CALL_OW 205
2747: GO 2699
2749: POP
2750: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2751: LD_EXP 43
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: LD_INT 63
2762: PPUSH
2763: LD_INT 42
2765: PPUSH
2766: CALL_OW 428
2770: PPUSH
2771: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2775: LD_EXP 43
2779: PUSH
2780: LD_INT 3
2782: ARRAY
2783: PPUSH
2784: LD_INT 94
2786: PPUSH
2787: LD_INT 63
2789: PPUSH
2790: CALL_OW 428
2794: PPUSH
2795: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2799: LD_INT 35
2801: PPUSH
2802: CALL_OW 67
// until not HasTask ( Rolf ) ;
2806: LD_EXP 39
2810: PPUSH
2811: CALL_OW 314
2815: NOT
2816: IFFALSE 2799
// rolfScriptBase := true ;
2818: LD_ADDR_EXP 7
2822: PUSH
2823: LD_INT 1
2825: ST_TO_ADDR
// end ;
2826: LD_VAR 0 1
2830: RET
// every 0 0$1 trigger rolfScriptBase do var i , b , p , tmp , sol , sci , mech , enemyInBase , hasVehicle ;
2831: LD_EXP 7
2835: IFFALSE 3695
2837: GO 2839
2839: DISABLE
2840: LD_INT 0
2842: PPUSH
2843: PPUSH
2844: PPUSH
2845: PPUSH
2846: PPUSH
2847: PPUSH
2848: PPUSH
2849: PPUSH
2850: PPUSH
// begin enable ;
2851: ENABLE
// if not rolfSquad then
2852: LD_EXP 43
2856: NOT
2857: IFFALSE 2861
// exit ;
2859: GO 3695
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
2861: LD_ADDR_VAR 0 8
2865: PUSH
2866: LD_INT 12
2868: PPUSH
2869: LD_INT 81
2871: PUSH
2872: LD_INT 8
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 70
2883: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
2884: LD_ADDR_VAR 0 5
2888: PUSH
2889: LD_EXP 43
2893: PPUSH
2894: LD_INT 25
2896: PUSH
2897: LD_INT 1
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PPUSH
2904: CALL_OW 72
2908: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
2909: LD_ADDR_VAR 0 7
2913: PUSH
2914: LD_EXP 43
2918: PPUSH
2919: LD_INT 25
2921: PUSH
2922: LD_INT 3
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PPUSH
2929: CALL_OW 72
2933: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
2934: LD_ADDR_VAR 0 6
2938: PUSH
2939: LD_EXP 43
2943: PPUSH
2944: LD_INT 25
2946: PUSH
2947: LD_INT 4
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PPUSH
2954: CALL_OW 72
2958: ST_TO_ADDR
// if sol then
2959: LD_VAR 0 5
2963: IFFALSE 3255
// for i in sol do
2965: LD_ADDR_VAR 0 1
2969: PUSH
2970: LD_VAR 0 5
2974: PUSH
2975: FOR_IN
2976: IFFALSE 3253
// if not IsInUnit ( i ) and not HasTask ( i ) then
2978: LD_VAR 0 1
2982: PPUSH
2983: CALL_OW 310
2987: NOT
2988: PUSH
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 314
2998: NOT
2999: AND
3000: IFFALSE 3251
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3002: LD_VAR 0 1
3006: PPUSH
3007: CALL_OW 256
3011: PUSH
3012: LD_INT 500
3014: LESS
3015: PUSH
3016: LD_VAR 0 1
3020: PPUSH
3021: LD_INT 80
3023: PPUSH
3024: LD_INT 49
3026: PPUSH
3027: CALL_OW 297
3031: PUSH
3032: LD_INT 6
3034: GREATER
3035: AND
3036: IFFALSE 3055
// begin ComMoveXY ( i , 80 , 49 ) ;
3038: LD_VAR 0 1
3042: PPUSH
3043: LD_INT 80
3045: PPUSH
3046: LD_INT 49
3048: PPUSH
3049: CALL_OW 111
// continue ;
3053: GO 2975
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3055: LD_ADDR_VAR 0 4
3059: PUSH
3060: LD_INT 22
3062: PUSH
3063: LD_INT 8
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 50
3072: PUSH
3073: EMPTY
3074: LIST
3075: PUSH
3076: LD_INT 2
3078: PUSH
3079: LD_INT 30
3081: PUSH
3082: LD_INT 4
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 30
3091: PUSH
3092: LD_INT 5
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 30
3101: PUSH
3102: LD_INT 32
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: PUSH
3109: LD_INT 30
3111: PUSH
3112: LD_INT 31
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: ST_TO_ADDR
// if tmp then
3136: LD_VAR 0 4
3140: IFFALSE 3251
// begin for b in tmp do
3142: LD_ADDR_VAR 0 2
3146: PUSH
3147: LD_VAR 0 4
3151: PUSH
3152: FOR_IN
3153: IFFALSE 3249
// begin case GetBType ( b ) of b_armoury , b_barracks :
3155: LD_VAR 0 2
3159: PPUSH
3160: CALL_OW 266
3164: PUSH
3165: LD_INT 4
3167: DOUBLE
3168: EQUAL
3169: IFTRUE 3179
3171: LD_INT 5
3173: DOUBLE
3174: EQUAL
3175: IFTRUE 3179
3177: GO 3190
3179: POP
// p := 6 ; b_breastwork , b_bunker :
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: LD_INT 6
3187: ST_TO_ADDR
3188: GO 3216
3190: LD_INT 31
3192: DOUBLE
3193: EQUAL
3194: IFTRUE 3204
3196: LD_INT 32
3198: DOUBLE
3199: EQUAL
3200: IFTRUE 3204
3202: GO 3215
3204: POP
// p := 1 ; end ;
3205: LD_ADDR_VAR 0 3
3209: PUSH
3210: LD_INT 1
3212: ST_TO_ADDR
3213: GO 3216
3215: POP
// if UnitsInside ( b ) < p then
3216: LD_VAR 0 2
3220: PPUSH
3221: CALL_OW 313
3225: PUSH
3226: LD_VAR 0 3
3230: LESS
3231: IFFALSE 3247
// ComEnterUnit ( i , b ) ;
3233: LD_VAR 0 1
3237: PPUSH
3238: LD_VAR 0 2
3242: PPUSH
3243: CALL_OW 120
// end ;
3247: GO 3152
3249: POP
3250: POP
// end ; end ;
3251: GO 2975
3253: POP
3254: POP
// if sci then
3255: LD_VAR 0 6
3259: IFFALSE 3314
// for i in sci do
3261: LD_ADDR_VAR 0 1
3265: PUSH
3266: LD_VAR 0 6
3270: PUSH
3271: FOR_IN
3272: IFFALSE 3312
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3274: LD_VAR 0 1
3278: PPUSH
3279: LD_INT 80
3281: PPUSH
3282: LD_INT 49
3284: PPUSH
3285: CALL_OW 297
3289: PUSH
3290: LD_INT 9
3292: GREATER
3293: IFFALSE 3310
// ComMoveXY ( i , 80 , 49 ) ;
3295: LD_VAR 0 1
3299: PPUSH
3300: LD_INT 80
3302: PPUSH
3303: LD_INT 49
3305: PPUSH
3306: CALL_OW 111
// end ;
3310: GO 3271
3312: POP
3313: POP
// if mech then
3314: LD_VAR 0 7
3318: IFFALSE 3523
// for i in mech do
3320: LD_ADDR_VAR 0 1
3324: PUSH
3325: LD_VAR 0 7
3329: PUSH
3330: FOR_IN
3331: IFFALSE 3521
// begin hasVehicle := IsInUnit ( i ) ;
3333: LD_ADDR_VAR 0 9
3337: PUSH
3338: LD_VAR 0 1
3342: PPUSH
3343: CALL_OW 310
3347: ST_TO_ADDR
// if enemyInBase then
3348: LD_VAR 0 8
3352: IFFALSE 3439
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3354: LD_VAR 0 9
3358: PUSH
3359: LD_VAR 0 9
3363: PPUSH
3364: CALL_OW 256
3368: PUSH
3369: LD_INT 500
3371: GREATER
3372: AND
3373: IFFALSE 3401
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3375: LD_VAR 0 9
3379: PPUSH
3380: LD_VAR 0 8
3384: PPUSH
3385: LD_VAR 0 9
3389: PPUSH
3390: CALL_OW 74
3394: PPUSH
3395: CALL_OW 115
3399: GO 3437
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 6 then
3401: LD_VAR 0 9
3405: PPUSH
3406: LD_INT 86
3408: PPUSH
3409: LD_INT 49
3411: PPUSH
3412: CALL_OW 297
3416: PUSH
3417: LD_INT 6
3419: GREATER
3420: IFFALSE 3437
// ComMoveXY ( hasVehicle , 86 , 49 ) ;
3422: LD_VAR 0 9
3426: PPUSH
3427: LD_INT 86
3429: PPUSH
3430: LD_INT 49
3432: PPUSH
3433: CALL_OW 111
// end else
3437: GO 3519
// begin if GetDistUnitXY ( i , 86 , 49 ) > 6 then
3439: LD_VAR 0 1
3443: PPUSH
3444: LD_INT 86
3446: PPUSH
3447: LD_INT 49
3449: PPUSH
3450: CALL_OW 297
3454: PUSH
3455: LD_INT 6
3457: GREATER
3458: IFFALSE 3477
// ComMoveXY ( i , 86 , 49 ) else
3460: LD_VAR 0 1
3464: PPUSH
3465: LD_INT 86
3467: PPUSH
3468: LD_INT 49
3470: PPUSH
3471: CALL_OW 111
3475: GO 3519
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3477: LD_VAR 0 9
3481: PUSH
3482: LD_VAR 0 9
3486: PPUSH
3487: CALL_OW 256
3491: PUSH
3492: LD_INT 1000
3494: LESS
3495: AND
3496: IFFALSE 3519
// begin SetFuel ( hasVehicle , 100 ) ;
3498: LD_VAR 0 9
3502: PPUSH
3503: LD_INT 100
3505: PPUSH
3506: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3510: LD_VAR 0 1
3514: PPUSH
3515: CALL 60525 0 1
// end ; end ; end ;
3519: GO 3330
3521: POP
3522: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3523: LD_ADDR_VAR 0 4
3527: PUSH
3528: LD_INT 12
3530: PPUSH
3531: LD_INT 3
3533: PUSH
3534: LD_INT 24
3536: PUSH
3537: LD_INT 1000
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PUSH
3548: LD_INT 21
3550: PUSH
3551: LD_INT 3
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PPUSH
3562: CALL_OW 70
3566: ST_TO_ADDR
// if tmp and IsOk ( Rolf ) then
3567: LD_VAR 0 4
3571: PUSH
3572: LD_EXP 39
3576: PPUSH
3577: CALL_OW 302
3581: AND
3582: IFFALSE 3624
// begin if IsInUnit ( Rolf ) then
3584: LD_EXP 39
3588: PPUSH
3589: CALL_OW 310
3593: IFFALSE 3606
// ComExitBuilding ( Rolf ) else
3595: LD_EXP 39
3599: PPUSH
3600: CALL_OW 122
3604: GO 3624
// ComRepairBuilding ( Rolf , tmp [ 1 ] ) ;
3606: LD_EXP 39
3610: PPUSH
3611: LD_VAR 0 4
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: CALL_OW 130
// end ; if not tmp then
3624: LD_VAR 0 4
3628: NOT
3629: IFFALSE 3695
// if GetLives ( Rolf ) < 700 then
3631: LD_EXP 39
3635: PPUSH
3636: CALL_OW 256
3640: PUSH
3641: LD_INT 700
3643: LESS
3644: IFFALSE 3663
// ComMoveXY ( Rolf , 80 , 49 ) else
3646: LD_EXP 39
3650: PPUSH
3651: LD_INT 80
3653: PPUSH
3654: LD_INT 49
3656: PPUSH
3657: CALL_OW 111
3661: GO 3695
// if not IsInUnit ( Rolf ) then
3663: LD_EXP 39
3667: PPUSH
3668: CALL_OW 310
3672: NOT
3673: IFFALSE 3695
// ComEnterUnit ( Rolf , HexInfo ( 86 , 54 ) ) ;
3675: LD_EXP 39
3679: PPUSH
3680: LD_INT 86
3682: PPUSH
3683: LD_INT 54
3685: PPUSH
3686: CALL_OW 428
3690: PPUSH
3691: CALL_OW 120
// end ;
3695: PPOPN 9
3697: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3698: LD_INT 0
3700: PPUSH
3701: PPUSH
3702: PPUSH
3703: PPUSH
// uc_side := 5 ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_INT 5
3711: ST_TO_ADDR
// uc_nation := 2 ;
3712: LD_ADDR_OWVAR 21
3716: PUSH
3717: LD_INT 2
3719: ST_TO_ADDR
// omarSquad := [ ] ;
3720: LD_ADDR_EXP 44
3724: PUSH
3725: EMPTY
3726: ST_TO_ADDR
// for i := 1 to 4 do
3727: LD_ADDR_VAR 0 2
3731: PUSH
3732: DOUBLE
3733: LD_INT 1
3735: DEC
3736: ST_TO_ADDR
3737: LD_INT 4
3739: PUSH
3740: FOR_TO
3741: IFFALSE 3827
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 6
3755: PUSH
3756: LD_INT 2
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: LD_EXP 19
3766: PLUS
3767: PUSH
3768: LD_INT 2
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: PUSH
3777: LD_VAR 0 2
3781: ARRAY
3782: PUSH
3783: FOR_TO
3784: IFFALSE 3823
// begin PrepareHuman ( false , i , 5 ) ;
3786: LD_INT 0
3788: PPUSH
3789: LD_VAR 0 2
3793: PPUSH
3794: LD_INT 5
3796: PPUSH
3797: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
3801: LD_ADDR_EXP 44
3805: PUSH
3806: LD_EXP 44
3810: PPUSH
3811: CALL_OW 44
3815: PPUSH
3816: CALL 59034 0 2
3820: ST_TO_ADDR
// end ;
3821: GO 3783
3823: POP
3824: POP
// end ;
3825: GO 3740
3827: POP
3828: POP
// if HexInfo ( 340 , 205 ) then
3829: LD_INT 340
3831: PPUSH
3832: LD_INT 205
3834: PPUSH
3835: CALL_OW 428
3839: IFFALSE 3856
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
3841: LD_INT 340
3843: PPUSH
3844: LD_INT 205
3846: PPUSH
3847: CALL_OW 428
3851: PPUSH
3852: CALL_OW 64
// p := 0 ;
3856: LD_ADDR_VAR 0 4
3860: PUSH
3861: LD_INT 0
3863: ST_TO_ADDR
// for i in omarSquad do
3864: LD_ADDR_VAR 0 2
3868: PUSH
3869: LD_EXP 44
3873: PUSH
3874: FOR_IN
3875: IFFALSE 4056
// begin uc_direction := 4 ;
3877: LD_ADDR_OWVAR 24
3881: PUSH
3882: LD_INT 4
3884: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
3885: LD_VAR 0 2
3889: PPUSH
3890: CALL_OW 257
3894: PUSH
3895: LD_INT 3
3897: EQUAL
3898: PUSH
3899: LD_VAR 0 4
3903: PUSH
3904: LD_INT 2
3906: LESS
3907: AND
3908: IFFALSE 4017
// begin p := p + 1 ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_VAR 0 4
3919: PUSH
3920: LD_INT 1
3922: PLUS
3923: ST_TO_ADDR
// uc_side := 5 ;
3924: LD_ADDR_OWVAR 20
3928: PUSH
3929: LD_INT 5
3931: ST_TO_ADDR
// uc_nation := 2 ;
3932: LD_ADDR_OWVAR 21
3936: PUSH
3937: LD_INT 2
3939: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_rocket_launcher , ar_gun ] [ i mod 2 + 1 ] , 88 ) ;
3940: LD_INT 13
3942: PPUSH
3943: LD_INT 1
3945: PPUSH
3946: LD_INT 1
3948: PPUSH
3949: LD_INT 28
3951: PUSH
3952: LD_INT 27
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: PUSH
3959: LD_VAR 0 2
3963: PUSH
3964: LD_INT 2
3966: MOD
3967: PUSH
3968: LD_INT 1
3970: PLUS
3971: ARRAY
3972: PPUSH
3973: LD_INT 88
3975: PPUSH
3976: CALL 27160 0 5
// PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
3980: CALL_OW 45
3984: PPUSH
3985: LD_INT 13
3987: PPUSH
3988: LD_INT 0
3990: PPUSH
3991: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
3995: LD_VAR 0 2
3999: PPUSH
4000: LD_INT 340
4002: PPUSH
4003: LD_INT 205
4005: PPUSH
4006: CALL_OW 428
4010: PPUSH
4011: CALL_OW 52
// end else
4015: GO 4032
// PlaceUnitArea ( i , southSpawn , false ) ;
4017: LD_VAR 0 2
4021: PPUSH
4022: LD_INT 13
4024: PPUSH
4025: LD_INT 0
4027: PPUSH
4028: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4032: LD_VAR 0 2
4036: PPUSH
4037: LD_INT 333
4039: PPUSH
4040: LD_INT 210
4042: PPUSH
4043: CALL_OW 111
// wait ( 0 0$2 ) ;
4047: LD_INT 70
4049: PPUSH
4050: CALL_OW 67
// end ;
4054: GO 3874
4056: POP
4057: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4058: LD_EXP 36
4062: PPUSH
4063: LD_INT 340
4065: PPUSH
4066: LD_INT 205
4068: PPUSH
4069: LD_INT 0
4071: PPUSH
4072: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4076: LD_EXP 36
4080: PPUSH
4081: LD_INT 333
4083: PPUSH
4084: LD_INT 206
4086: PPUSH
4087: CALL_OW 111
// wait ( 0 0$2 ) ;
4091: LD_INT 70
4093: PPUSH
4094: CALL_OW 67
// ComHold ( omarSquad ) ;
4098: LD_EXP 44
4102: PPUSH
4103: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_class , 1 ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4107: LD_EXP 36
4111: PUSH
4112: LD_EXP 44
4116: PPUSH
4117: LD_INT 25
4119: PUSH
4120: LD_INT 1
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PPUSH
4127: CALL_OW 72
4131: UNION
4132: PUSH
4133: LD_INT 22
4135: PUSH
4136: LD_INT 5
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: LD_INT 21
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PPUSH
4157: CALL_OW 69
4161: UNION
4162: PPUSH
4163: LD_INT 315
4165: PPUSH
4166: LD_INT 214
4168: PPUSH
4169: CALL_OW 114
// wait ( 0 0$22 ) ;
4173: LD_INT 770
4175: PPUSH
4176: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4180: LD_EXP 44
4184: PUSH
4185: LD_EXP 36
4189: UNION
4190: PPUSH
4191: LD_INT 329
4193: PPUSH
4194: LD_INT 231
4196: PPUSH
4197: CALL_OW 114
// end ;
4201: LD_VAR 0 1
4205: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4206: LD_EXP 8
4210: IFFALSE 5275
4212: GO 4214
4214: DISABLE
4215: LD_INT 0
4217: PPUSH
4218: PPUSH
4219: PPUSH
4220: PPUSH
4221: PPUSH
4222: PPUSH
4223: PPUSH
4224: PPUSH
4225: PPUSH
4226: PPUSH
4227: PPUSH
// begin enable ;
4228: ENABLE
// if not omarSquad then
4229: LD_EXP 44
4233: NOT
4234: IFFALSE 4238
// exit ;
4236: GO 5275
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4238: LD_ADDR_VAR 0 10
4242: PUSH
4243: LD_INT 14
4245: PPUSH
4246: LD_INT 81
4248: PUSH
4249: LD_INT 5
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PPUSH
4256: CALL_OW 70
4260: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
4261: LD_ADDR_VAR 0 6
4265: PUSH
4266: LD_EXP 44
4270: PPUSH
4271: LD_INT 25
4273: PUSH
4274: LD_INT 1
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: PPUSH
4281: CALL_OW 72
4285: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4286: LD_ADDR_VAR 0 7
4290: PUSH
4291: LD_EXP 44
4295: PPUSH
4296: LD_INT 25
4298: PUSH
4299: LD_INT 2
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PPUSH
4306: CALL_OW 72
4310: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4311: LD_ADDR_VAR 0 9
4315: PUSH
4316: LD_EXP 44
4320: PPUSH
4321: LD_INT 25
4323: PUSH
4324: LD_INT 3
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PPUSH
4331: CALL_OW 72
4335: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4336: LD_ADDR_VAR 0 8
4340: PUSH
4341: LD_EXP 44
4345: PPUSH
4346: LD_INT 25
4348: PUSH
4349: LD_INT 4
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: PPUSH
4356: CALL_OW 72
4360: ST_TO_ADDR
// if sol then
4361: LD_VAR 0 6
4365: IFFALSE 4729
// for i in sol do
4367: LD_ADDR_VAR 0 1
4371: PUSH
4372: LD_VAR 0 6
4376: PUSH
4377: FOR_IN
4378: IFFALSE 4727
// if not HasTask ( i ) then
4380: LD_VAR 0 1
4384: PPUSH
4385: CALL_OW 314
4389: NOT
4390: IFFALSE 4725
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4392: LD_VAR 0 1
4396: PPUSH
4397: CALL_OW 310
4401: NOT
4402: PUSH
4403: LD_VAR 0 1
4407: PPUSH
4408: CALL_OW 256
4412: PUSH
4413: LD_INT 500
4415: LESS
4416: AND
4417: PUSH
4418: LD_VAR 0 1
4422: PPUSH
4423: LD_INT 333
4425: PPUSH
4426: LD_INT 234
4428: PPUSH
4429: CALL_OW 297
4433: PUSH
4434: LD_INT 6
4436: GREATER
4437: AND
4438: IFFALSE 4457
// begin ComMoveXY ( i , 333 , 234 ) ;
4440: LD_VAR 0 1
4444: PPUSH
4445: LD_INT 333
4447: PPUSH
4448: LD_INT 234
4450: PPUSH
4451: CALL_OW 111
// continue ;
4455: GO 4377
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4457: LD_ADDR_VAR 0 5
4461: PUSH
4462: LD_INT 22
4464: PUSH
4465: LD_INT 5
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 58
4474: PUSH
4475: EMPTY
4476: LIST
4477: PUSH
4478: LD_INT 50
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: LD_INT 2
4486: PUSH
4487: LD_INT 30
4489: PUSH
4490: LD_INT 32
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 30
4499: PUSH
4500: LD_INT 31
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4523: LD_VAR 0 5
4527: PUSH
4528: LD_VAR 0 1
4532: PPUSH
4533: CALL_OW 310
4537: PPUSH
4538: CALL_OW 266
4542: PUSH
4543: LD_INT 31
4545: NONEQUAL
4546: AND
4547: IFFALSE 4629
// begin for j in tmp do
4549: LD_ADDR_VAR 0 2
4553: PUSH
4554: LD_VAR 0 5
4558: PUSH
4559: FOR_IN
4560: IFFALSE 4625
// if GetTag ( j ) <> 1 then
4562: LD_VAR 0 2
4566: PPUSH
4567: CALL_OW 110
4571: PUSH
4572: LD_INT 1
4574: NONEQUAL
4575: IFFALSE 4623
// begin SetTag ( j , 1 ) ;
4577: LD_VAR 0 2
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: CALL_OW 109
// if IsInUnit ( i ) then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 310
4598: IFFALSE 4609
// ComExit ( i ) ;
4600: LD_VAR 0 1
4604: PPUSH
4605: CALL 59422 0 1
// AddComEnterUnit ( i , j ) ;
4609: LD_VAR 0 1
4613: PPUSH
4614: LD_VAR 0 2
4618: PPUSH
4619: CALL_OW 180
// end ;
4623: GO 4559
4625: POP
4626: POP
// end else
4627: GO 4725
// if not IsInUnit ( i ) then
4629: LD_VAR 0 1
4633: PPUSH
4634: CALL_OW 310
4638: NOT
4639: IFFALSE 4725
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
4641: LD_ADDR_VAR 0 5
4645: PUSH
4646: LD_INT 22
4648: PUSH
4649: LD_INT 5
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 50
4658: PUSH
4659: EMPTY
4660: LIST
4661: PUSH
4662: LD_INT 30
4664: PUSH
4665: LD_INT 4
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: PPUSH
4677: CALL_OW 69
4681: ST_TO_ADDR
// if tmp then
4682: LD_VAR 0 5
4686: IFFALSE 4725
// if UnitsInside ( tmp [ 1 ] ) < 6 then
4688: LD_VAR 0 5
4692: PUSH
4693: LD_INT 1
4695: ARRAY
4696: PPUSH
4697: CALL_OW 313
4701: PUSH
4702: LD_INT 6
4704: LESS
4705: IFFALSE 4725
// ComEnterUnit ( i , tmp [ 1 ] ) ;
4707: LD_VAR 0 1
4711: PPUSH
4712: LD_VAR 0 5
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: CALL_OW 120
// end ; end ;
4725: GO 4377
4727: POP
4728: POP
// if sci then
4729: LD_VAR 0 8
4733: IFFALSE 4788
// for i in sci do
4735: LD_ADDR_VAR 0 1
4739: PUSH
4740: LD_VAR 0 8
4744: PUSH
4745: FOR_IN
4746: IFFALSE 4786
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 333
4755: PPUSH
4756: LD_INT 234
4758: PPUSH
4759: CALL_OW 297
4763: PUSH
4764: LD_INT 9
4766: GREATER
4767: IFFALSE 4784
// ComMoveXY ( i , 333 , 234 ) ;
4769: LD_VAR 0 1
4773: PPUSH
4774: LD_INT 333
4776: PPUSH
4777: LD_INT 234
4779: PPUSH
4780: CALL_OW 111
// end ;
4784: GO 4745
4786: POP
4787: POP
// if mech then
4788: LD_VAR 0 9
4792: IFFALSE 4997
// for i in mech do
4794: LD_ADDR_VAR 0 1
4798: PUSH
4799: LD_VAR 0 9
4803: PUSH
4804: FOR_IN
4805: IFFALSE 4995
// begin hasVehicle := IsInUnit ( i ) ;
4807: LD_ADDR_VAR 0 11
4811: PUSH
4812: LD_VAR 0 1
4816: PPUSH
4817: CALL_OW 310
4821: ST_TO_ADDR
// if enemyInBase then
4822: LD_VAR 0 10
4826: IFFALSE 4913
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4828: LD_VAR 0 11
4832: PUSH
4833: LD_VAR 0 11
4837: PPUSH
4838: CALL_OW 256
4842: PUSH
4843: LD_INT 500
4845: GREATER
4846: AND
4847: IFFALSE 4875
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4849: LD_VAR 0 11
4853: PPUSH
4854: LD_VAR 0 10
4858: PPUSH
4859: LD_VAR 0 11
4863: PPUSH
4864: CALL_OW 74
4868: PPUSH
4869: CALL_OW 115
4873: GO 4911
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
4875: LD_VAR 0 11
4879: PPUSH
4880: LD_INT 333
4882: PPUSH
4883: LD_INT 234
4885: PPUSH
4886: CALL_OW 297
4890: PUSH
4891: LD_INT 6
4893: GREATER
4894: IFFALSE 4911
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
4896: LD_VAR 0 11
4900: PPUSH
4901: LD_INT 333
4903: PPUSH
4904: LD_INT 234
4906: PPUSH
4907: CALL_OW 111
// end else
4911: GO 4993
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
4913: LD_VAR 0 1
4917: PPUSH
4918: LD_INT 333
4920: PPUSH
4921: LD_INT 234
4923: PPUSH
4924: CALL_OW 297
4928: PUSH
4929: LD_INT 6
4931: GREATER
4932: IFFALSE 4951
// ComMoveXY ( i , 333 , 234 ) else
4934: LD_VAR 0 1
4938: PPUSH
4939: LD_INT 333
4941: PPUSH
4942: LD_INT 234
4944: PPUSH
4945: CALL_OW 111
4949: GO 4993
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4951: LD_VAR 0 11
4955: PUSH
4956: LD_VAR 0 11
4960: PPUSH
4961: CALL_OW 256
4965: PUSH
4966: LD_INT 1000
4968: LESS
4969: AND
4970: IFFALSE 4993
// begin SetFuel ( hasVehicle , 100 ) ;
4972: LD_VAR 0 11
4976: PPUSH
4977: LD_INT 100
4979: PPUSH
4980: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4984: LD_VAR 0 1
4988: PPUSH
4989: CALL 60525 0 1
// end ; end ; end ;
4993: GO 4804
4995: POP
4996: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4997: LD_ADDR_VAR 0 5
5001: PUSH
5002: LD_INT 14
5004: PPUSH
5005: LD_INT 3
5007: PUSH
5008: LD_INT 24
5010: PUSH
5011: LD_INT 1000
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: LD_INT 21
5024: PUSH
5025: LD_INT 3
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PPUSH
5036: CALL_OW 70
5040: ST_TO_ADDR
// if tmp and eng then
5041: LD_VAR 0 5
5045: PUSH
5046: LD_VAR 0 7
5050: AND
5051: IFFALSE 5157
// begin for i in eng do
5053: LD_ADDR_VAR 0 1
5057: PUSH
5058: LD_VAR 0 7
5062: PUSH
5063: FOR_IN
5064: IFFALSE 5155
// if IsInUnit ( i ) then
5066: LD_VAR 0 1
5070: PPUSH
5071: CALL_OW 310
5075: IFFALSE 5088
// ComExitBuilding ( i ) else
5077: LD_VAR 0 1
5081: PPUSH
5082: CALL_OW 122
5086: GO 5153
// if GetLives ( i ) = 1000 then
5088: LD_VAR 0 1
5092: PPUSH
5093: CALL_OW 256
5097: PUSH
5098: LD_INT 1000
5100: EQUAL
5101: IFFALSE 5123
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5103: LD_VAR 0 1
5107: PPUSH
5108: LD_VAR 0 5
5112: PUSH
5113: LD_INT 1
5115: ARRAY
5116: PPUSH
5117: CALL_OW 130
5121: GO 5153
// if GetLives ( i ) < 700 then
5123: LD_VAR 0 1
5127: PPUSH
5128: CALL_OW 256
5132: PUSH
5133: LD_INT 700
5135: LESS
5136: IFFALSE 5153
// ComMoveXY ( i , 333 , 234 ) ;
5138: LD_VAR 0 1
5142: PPUSH
5143: LD_INT 333
5145: PPUSH
5146: LD_INT 234
5148: PPUSH
5149: CALL_OW 111
5153: GO 5063
5155: POP
5156: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5157: LD_VAR 0 5
5161: NOT
5162: PUSH
5163: LD_VAR 0 7
5167: PPUSH
5168: LD_INT 3
5170: PUSH
5171: LD_INT 54
5173: PUSH
5174: EMPTY
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 72
5185: AND
5186: IFFALSE 5275
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5188: LD_ADDR_VAR 0 1
5192: PUSH
5193: LD_VAR 0 7
5197: PPUSH
5198: LD_INT 3
5200: PUSH
5201: LD_INT 54
5203: PUSH
5204: EMPTY
5205: LIST
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PPUSH
5211: CALL_OW 72
5215: PUSH
5216: FOR_IN
5217: IFFALSE 5273
// if GetLives ( i ) < 1000 then
5219: LD_VAR 0 1
5223: PPUSH
5224: CALL_OW 256
5228: PUSH
5229: LD_INT 1000
5231: LESS
5232: IFFALSE 5251
// ComMoveXY ( i , 333 , 234 ) else
5234: LD_VAR 0 1
5238: PPUSH
5239: LD_INT 333
5241: PPUSH
5242: LD_INT 234
5244: PPUSH
5245: CALL_OW 111
5249: GO 5271
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5251: LD_VAR 0 1
5255: PPUSH
5256: LD_INT 341
5258: PPUSH
5259: LD_INT 232
5261: PPUSH
5262: CALL_OW 428
5266: PPUSH
5267: CALL_OW 120
5271: GO 5216
5273: POP
5274: POP
// end ;
5275: PPOPN 11
5277: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5278: LD_EXP 36
5282: PPUSH
5283: CALL_OW 256
5287: PUSH
5288: LD_INT 1000
5290: LESS
5291: IFFALSE 5309
5293: GO 5295
5295: DISABLE
// begin enable ;
5296: ENABLE
// SetLives ( Omar , 1000 ) ;
5297: LD_EXP 36
5301: PPUSH
5302: LD_INT 1000
5304: PPUSH
5305: CALL_OW 234
// end ;
5309: END
// every 0 0$1 trigger omarAttack do var i ;
5310: LD_EXP 21
5314: IFFALSE 5993
5316: GO 5318
5318: DISABLE
5319: LD_INT 0
5321: PPUSH
// begin wait ( 0 0$20 ) ;
5322: LD_INT 700
5324: PPUSH
5325: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_class , 1 ] ) ) ;
5329: LD_EXP 44
5333: PPUSH
5334: LD_INT 25
5336: PUSH
5337: LD_INT 1
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PPUSH
5344: CALL_OW 72
5348: PPUSH
5349: CALL_OW 122
// wait ( 0 0$3 ) ;
5353: LD_INT 105
5355: PPUSH
5356: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5360: LD_EXP 44
5364: PUSH
5365: LD_EXP 36
5369: UNION
5370: PPUSH
5371: LD_INT 225
5373: PPUSH
5374: LD_INT 223
5376: PPUSH
5377: CALL_OW 114
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5381: LD_INT 22
5383: PUSH
5384: LD_INT 5
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: PUSH
5391: LD_INT 2
5393: PUSH
5394: LD_INT 25
5396: PUSH
5397: LD_INT 1
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: PUSH
5404: LD_INT 21
5406: PUSH
5407: LD_INT 2
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PPUSH
5423: CALL_OW 69
5427: PPUSH
5428: LD_INT 167
5430: PPUSH
5431: LD_INT 231
5433: PPUSH
5434: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5438: LD_EXP 44
5442: PPUSH
5443: LD_INT 25
5445: PUSH
5446: LD_INT 4
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PPUSH
5453: CALL_OW 72
5457: PPUSH
5458: LD_INT 222
5460: PPUSH
5461: LD_INT 229
5463: PPUSH
5464: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5468: LD_INT 35
5470: PPUSH
5471: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5475: LD_ADDR_VAR 0 1
5479: PUSH
5480: LD_EXP 44
5484: PUSH
5485: LD_INT 22
5487: PUSH
5488: LD_INT 5
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: PUSH
5495: LD_INT 21
5497: PUSH
5498: LD_INT 2
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PPUSH
5509: CALL_OW 69
5513: UNION
5514: PUSH
5515: FOR_IN
5516: IFFALSE 5984
// begin if IsDead ( i ) then
5518: LD_VAR 0 1
5522: PPUSH
5523: CALL_OW 301
5527: IFFALSE 5547
// begin omarSquad := omarSquad diff i ;
5529: LD_ADDR_EXP 44
5533: PUSH
5534: LD_EXP 44
5538: PUSH
5539: LD_VAR 0 1
5543: DIFF
5544: ST_TO_ADDR
// continue ;
5545: GO 5515
// end ; if GetClass ( i ) = 1 then
5547: LD_VAR 0 1
5551: PPUSH
5552: CALL_OW 257
5556: PUSH
5557: LD_INT 1
5559: EQUAL
5560: IFFALSE 5718
// begin if GetLives ( i ) < 500 and GetTag ( i ) = 0 then
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 256
5571: PUSH
5572: LD_INT 500
5574: LESS
5575: PUSH
5576: LD_VAR 0 1
5580: PPUSH
5581: CALL_OW 110
5585: PUSH
5586: LD_INT 0
5588: EQUAL
5589: AND
5590: IFFALSE 5619
// begin SetTag ( i , 1 ) ;
5592: LD_VAR 0 1
5596: PPUSH
5597: LD_INT 1
5599: PPUSH
5600: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
5604: LD_VAR 0 1
5608: PPUSH
5609: LD_INT 222
5611: PPUSH
5612: LD_INT 229
5614: PPUSH
5615: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
5619: LD_VAR 0 1
5623: PPUSH
5624: CALL_OW 256
5628: PUSH
5629: LD_INT 1000
5631: EQUAL
5632: PUSH
5633: LD_VAR 0 1
5637: PPUSH
5638: CALL_OW 110
5642: PUSH
5643: LD_INT 1
5645: EQUAL
5646: AND
5647: IFFALSE 5661
// SetTag ( i , 0 ) ;
5649: LD_VAR 0 1
5653: PPUSH
5654: LD_INT 0
5656: PPUSH
5657: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 500 and not HasTask ( i ) then
5661: LD_VAR 0 1
5665: PPUSH
5666: CALL_OW 110
5670: PUSH
5671: LD_INT 0
5673: EQUAL
5674: PUSH
5675: LD_VAR 0 1
5679: PPUSH
5680: CALL_OW 256
5684: PUSH
5685: LD_INT 500
5687: GREATEREQUAL
5688: AND
5689: PUSH
5690: LD_VAR 0 1
5694: PPUSH
5695: CALL_OW 314
5699: NOT
5700: AND
5701: IFFALSE 5718
// ComAgressiveMove ( i , 167 , 231 ) ;
5703: LD_VAR 0 1
5707: PPUSH
5708: LD_INT 167
5710: PPUSH
5711: LD_INT 231
5713: PPUSH
5714: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 247
5727: PUSH
5728: LD_INT 2
5730: EQUAL
5731: IFFALSE 5982
// begin if GetLives ( i ) < 500 and GetTag ( i ) = 0 then
5733: LD_VAR 0 1
5737: PPUSH
5738: CALL_OW 256
5742: PUSH
5743: LD_INT 500
5745: LESS
5746: PUSH
5747: LD_VAR 0 1
5751: PPUSH
5752: CALL_OW 110
5756: PUSH
5757: LD_INT 0
5759: EQUAL
5760: AND
5761: IFFALSE 5790
// begin SetTag ( i , 1 ) ;
5763: LD_VAR 0 1
5767: PPUSH
5768: LD_INT 1
5770: PPUSH
5771: CALL_OW 109
// ComMoveXY ( i , 219 , 219 ) ;
5775: LD_VAR 0 1
5779: PPUSH
5780: LD_INT 219
5782: PPUSH
5783: LD_INT 219
5785: PPUSH
5786: CALL_OW 111
// end ; if GetLives ( i ) < 500 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , 219 , 219 ) < 10 then
5790: LD_VAR 0 1
5794: PPUSH
5795: CALL_OW 256
5799: PUSH
5800: LD_INT 500
5802: LESS
5803: PUSH
5804: LD_VAR 0 1
5808: PPUSH
5809: CALL_OW 110
5813: PUSH
5814: LD_INT 1
5816: EQUAL
5817: AND
5818: PUSH
5819: LD_VAR 0 1
5823: PPUSH
5824: CALL_OW 311
5828: AND
5829: PUSH
5830: LD_VAR 0 1
5834: PPUSH
5835: LD_INT 219
5837: PPUSH
5838: LD_INT 219
5840: PPUSH
5841: CALL_OW 297
5845: PUSH
5846: LD_INT 10
5848: LESS
5849: AND
5850: IFFALSE 5861
// ComRepairVehicleAndReturn ( i ) ;
5852: LD_VAR 0 1
5856: PPUSH
5857: CALL 60525 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
5861: LD_VAR 0 1
5865: PPUSH
5866: CALL_OW 256
5870: PUSH
5871: LD_INT 1000
5873: EQUAL
5874: PUSH
5875: LD_VAR 0 1
5879: PPUSH
5880: CALL_OW 110
5884: PUSH
5885: LD_INT 1
5887: EQUAL
5888: AND
5889: PUSH
5890: LD_VAR 0 1
5894: PPUSH
5895: CALL_OW 311
5899: AND
5900: IFFALSE 5914
// SetTag ( i , 0 ) ;
5902: LD_VAR 0 1
5906: PPUSH
5907: LD_INT 0
5909: PPUSH
5910: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 500 and IsDrivenBy ( i ) and not HasTask ( i ) then
5914: LD_VAR 0 1
5918: PPUSH
5919: CALL_OW 110
5923: PUSH
5924: LD_INT 0
5926: EQUAL
5927: PUSH
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 256
5937: PUSH
5938: LD_INT 500
5940: GREATEREQUAL
5941: AND
5942: PUSH
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 311
5952: AND
5953: PUSH
5954: LD_VAR 0 1
5958: PPUSH
5959: CALL_OW 314
5963: NOT
5964: AND
5965: IFFALSE 5982
// ComAgressiveMove ( i , 167 , 231 ) ;
5967: LD_VAR 0 1
5971: PPUSH
5972: LD_INT 167
5974: PPUSH
5975: LD_INT 231
5977: PPUSH
5978: CALL_OW 114
// end ; end ;
5982: GO 5515
5984: POP
5985: POP
// until not omarSquad ;
5986: LD_EXP 44
5990: NOT
5991: IFFALSE 5468
// end ; end_of_file
5993: PPOPN 1
5995: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
5996: LD_INT 0
5998: PPUSH
// uc_side := side ;
5999: LD_ADDR_OWVAR 20
6003: PUSH
6004: LD_VAR 0 1
6008: ST_TO_ADDR
// uc_nation := nation ;
6009: LD_ADDR_OWVAR 21
6013: PUSH
6014: LD_VAR 0 2
6018: ST_TO_ADDR
// vc_chassis := chassis ;
6019: LD_ADDR_OWVAR 37
6023: PUSH
6024: LD_VAR 0 3
6028: ST_TO_ADDR
// vc_engine := engine ;
6029: LD_ADDR_OWVAR 39
6033: PUSH
6034: LD_VAR 0 4
6038: ST_TO_ADDR
// vc_control := control ;
6039: LD_ADDR_OWVAR 38
6043: PUSH
6044: LD_VAR 0 5
6048: ST_TO_ADDR
// vc_weapon := weapon ;
6049: LD_ADDR_OWVAR 40
6053: PUSH
6054: LD_VAR 0 6
6058: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6059: LD_ADDR_OWVAR 41
6063: PUSH
6064: LD_VAR 0 7
6068: ST_TO_ADDR
// result := CreateVehicle ;
6069: LD_ADDR_VAR 0 8
6073: PUSH
6074: CALL_OW 45
6078: ST_TO_ADDR
// end ;
6079: LD_VAR 0 8
6083: RET
// export function SayX ( units , ident ) ; var i ; begin
6084: LD_INT 0
6086: PPUSH
6087: PPUSH
// result := false ;
6088: LD_ADDR_VAR 0 3
6092: PUSH
6093: LD_INT 0
6095: ST_TO_ADDR
// if not units then
6096: LD_VAR 0 1
6100: NOT
6101: IFFALSE 6105
// exit ;
6103: GO 6159
// for i in units do
6105: LD_ADDR_VAR 0 4
6109: PUSH
6110: LD_VAR 0 1
6114: PUSH
6115: FOR_IN
6116: IFFALSE 6157
// if IsOk ( i ) then
6118: LD_VAR 0 4
6122: PPUSH
6123: CALL_OW 302
6127: IFFALSE 6155
// begin Say ( i , ident ) ;
6129: LD_VAR 0 4
6133: PPUSH
6134: LD_VAR 0 2
6138: PPUSH
6139: CALL_OW 88
// result := i ;
6143: LD_ADDR_VAR 0 3
6147: PUSH
6148: LD_VAR 0 4
6152: ST_TO_ADDR
// break ;
6153: GO 6157
// end ;
6155: GO 6115
6157: POP
6158: POP
// end ;
6159: LD_VAR 0 3
6163: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
6164: LD_INT 0
6166: PPUSH
6167: PPUSH
// InitUc ;
6168: CALL_OW 18
// InitHc ;
6172: CALL_OW 19
// uc_side := 0 ;
6176: LD_ADDR_OWVAR 20
6180: PUSH
6181: LD_INT 0
6183: ST_TO_ADDR
// uc_nation := 0 ;
6184: LD_ADDR_OWVAR 21
6188: PUSH
6189: LD_INT 0
6191: ST_TO_ADDR
// for i = 1 to amount do
6192: LD_ADDR_VAR 0 4
6196: PUSH
6197: DOUBLE
6198: LD_INT 1
6200: DEC
6201: ST_TO_ADDR
6202: LD_VAR 0 2
6206: PUSH
6207: FOR_TO
6208: IFFALSE 6290
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
6210: LD_ADDR_OWVAR 29
6214: PUSH
6215: LD_INT 9
6217: PPUSH
6218: LD_INT 12
6220: PPUSH
6221: CALL_OW 12
6225: PUSH
6226: LD_INT 9
6228: PPUSH
6229: LD_INT 12
6231: PPUSH
6232: CALL_OW 12
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
6241: LD_ADDR_OWVAR 35
6245: PUSH
6246: LD_INT 1
6248: NEG
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: CALL_OW 12
6257: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
6258: LD_INT 0
6260: PPUSH
6261: LD_INT 12
6263: PPUSH
6264: LD_INT 1
6266: PPUSH
6267: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
6271: CALL_OW 44
6275: PPUSH
6276: LD_VAR 0 1
6280: PPUSH
6281: LD_INT 0
6283: PPUSH
6284: CALL_OW 49
// end ;
6288: GO 6207
6290: POP
6291: POP
// InitHc ;
6292: CALL_OW 19
// end ;
6296: LD_VAR 0 3
6300: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
6301: LD_INT 0
6303: PPUSH
6304: PPUSH
// uc_side := 0 ;
6305: LD_ADDR_OWVAR 20
6309: PUSH
6310: LD_INT 0
6312: ST_TO_ADDR
// uc_nation := 0 ;
6313: LD_ADDR_OWVAR 21
6317: PUSH
6318: LD_INT 0
6320: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
6321: LD_INT 7
6323: PPUSH
6324: LD_INT 6
6326: PUSH
6327: LD_INT 5
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: LD_OWVAR 67
6342: ARRAY
6343: PPUSH
6344: CALL 6164 0 2
// for i = 1 to 2 do
6348: LD_ADDR_VAR 0 4
6352: PUSH
6353: DOUBLE
6354: LD_INT 1
6356: DEC
6357: ST_TO_ADDR
6358: LD_INT 2
6360: PUSH
6361: FOR_TO
6362: IFFALSE 6401
// begin vc_chassis := class_mastodont ;
6364: LD_ADDR_OWVAR 37
6368: PUSH
6369: LD_EXP 71
6373: ST_TO_ADDR
// vc_control := control_rider ;
6374: LD_ADDR_OWVAR 38
6378: PUSH
6379: LD_INT 4
6381: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
6382: CALL_OW 45
6386: PPUSH
6387: LD_VAR 0 1
6391: PPUSH
6392: LD_INT 0
6394: PPUSH
6395: CALL 57948 0 3
// end ;
6399: GO 6361
6401: POP
6402: POP
// for i := 1 to 4 do
6403: LD_ADDR_VAR 0 4
6407: PUSH
6408: DOUBLE
6409: LD_INT 1
6411: DEC
6412: ST_TO_ADDR
6413: LD_INT 4
6415: PUSH
6416: FOR_TO
6417: IFFALSE 6456
// begin hc_class := class_horse ;
6419: LD_ADDR_OWVAR 28
6423: PUSH
6424: LD_EXP 72
6428: ST_TO_ADDR
// hc_gallery :=  ;
6429: LD_ADDR_OWVAR 33
6433: PUSH
6434: LD_STRING 
6436: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
6437: CALL_OW 44
6441: PPUSH
6442: LD_VAR 0 1
6446: PPUSH
6447: LD_INT 0
6449: PPUSH
6450: CALL_OW 49
// end ;
6454: GO 6416
6456: POP
6457: POP
// for i = 1 to 5 do
6458: LD_ADDR_VAR 0 4
6462: PUSH
6463: DOUBLE
6464: LD_INT 1
6466: DEC
6467: ST_TO_ADDR
6468: LD_INT 5
6470: PUSH
6471: FOR_TO
6472: IFFALSE 6526
// begin hc_class = class_tiger ;
6474: LD_ADDR_OWVAR 28
6478: PUSH
6479: LD_INT 14
6481: ST_TO_ADDR
// hc_gallery =  ;
6482: LD_ADDR_OWVAR 33
6486: PUSH
6487: LD_STRING 
6489: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
6490: LD_ADDR_OWVAR 35
6494: PUSH
6495: LD_INT 7
6497: NEG
6498: PPUSH
6499: LD_INT 7
6501: PPUSH
6502: CALL_OW 12
6506: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
6507: CALL_OW 44
6511: PPUSH
6512: LD_VAR 0 1
6516: PPUSH
6517: LD_INT 0
6519: PPUSH
6520: CALL 57948 0 3
// end ;
6524: GO 6471
6526: POP
6527: POP
// for i := 1 to 4 do
6528: LD_ADDR_VAR 0 4
6532: PUSH
6533: DOUBLE
6534: LD_INT 1
6536: DEC
6537: ST_TO_ADDR
6538: LD_INT 4
6540: PUSH
6541: FOR_TO
6542: IFFALSE 6579
// begin hc_class := class_phororhacos ;
6544: LD_ADDR_OWVAR 28
6548: PUSH
6549: LD_INT 18
6551: ST_TO_ADDR
// hc_gallery :=  ;
6552: LD_ADDR_OWVAR 33
6556: PUSH
6557: LD_STRING 
6559: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
6560: CALL_OW 44
6564: PPUSH
6565: LD_VAR 0 1
6569: PPUSH
6570: LD_INT 0
6572: PPUSH
6573: CALL_OW 49
// end ;
6577: GO 6541
6579: POP
6580: POP
// for i := 1 to 4 do
6581: LD_ADDR_VAR 0 4
6585: PUSH
6586: DOUBLE
6587: LD_INT 1
6589: DEC
6590: ST_TO_ADDR
6591: LD_INT 4
6593: PUSH
6594: FOR_TO
6595: IFFALSE 6632
// begin hc_class := class_baggie ;
6597: LD_ADDR_OWVAR 28
6601: PUSH
6602: LD_INT 13
6604: ST_TO_ADDR
// hc_gallery :=  ;
6605: LD_ADDR_OWVAR 33
6609: PUSH
6610: LD_STRING 
6612: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
6613: CALL_OW 44
6617: PPUSH
6618: LD_VAR 0 1
6622: PPUSH
6623: LD_INT 0
6625: PPUSH
6626: CALL_OW 49
// end ;
6630: GO 6594
6632: POP
6633: POP
// for i := 1 to 7 do
6634: LD_ADDR_VAR 0 4
6638: PUSH
6639: DOUBLE
6640: LD_INT 1
6642: DEC
6643: ST_TO_ADDR
6644: LD_INT 7
6646: PUSH
6647: FOR_TO
6648: IFFALSE 6685
// begin hc_class := class_frog ;
6650: LD_ADDR_OWVAR 28
6654: PUSH
6655: LD_INT 19
6657: ST_TO_ADDR
// hc_gallery :=  ;
6658: LD_ADDR_OWVAR 33
6662: PUSH
6663: LD_STRING 
6665: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
6666: CALL_OW 44
6670: PPUSH
6671: LD_VAR 0 2
6675: PPUSH
6676: LD_INT 0
6678: PPUSH
6679: CALL_OW 49
// end ;
6683: GO 6647
6685: POP
6686: POP
// end ;
6687: LD_VAR 0 3
6691: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
6692: LD_INT 0
6694: PPUSH
6695: PPUSH
6696: PPUSH
// if not observer or not unit then
6697: LD_VAR 0 1
6701: NOT
6702: PUSH
6703: LD_VAR 0 2
6707: NOT
6708: OR
6709: IFFALSE 6713
// exit ;
6711: GO 6761
// if not See ( GetSide ( observer ) , unit ) then
6713: LD_VAR 0 1
6717: PPUSH
6718: CALL_OW 255
6722: PPUSH
6723: LD_VAR 0 2
6727: PPUSH
6728: CALL_OW 292
6732: NOT
6733: IFFALSE 6737
// exit ;
6735: GO 6761
// result := GetDistUnits ( observer , unit ) < 12 ;
6737: LD_ADDR_VAR 0 3
6741: PUSH
6742: LD_VAR 0 1
6746: PPUSH
6747: LD_VAR 0 2
6751: PPUSH
6752: CALL_OW 296
6756: PUSH
6757: LD_INT 12
6759: LESS
6760: ST_TO_ADDR
// end ;
6761: LD_VAR 0 3
6765: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
6766: LD_INT 0
6768: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
6769: LD_VAR 0 2
6773: PUSH
6774: LD_INT 1
6776: ARRAY
6777: PPUSH
6778: LD_VAR 0 2
6782: PUSH
6783: LD_INT 2
6785: ARRAY
6786: PPUSH
6787: CALL_OW 488
6791: PUSH
6792: LD_VAR 0 2
6796: PUSH
6797: LD_INT 1
6799: ARRAY
6800: PPUSH
6801: LD_VAR 0 2
6805: PUSH
6806: LD_INT 2
6808: ARRAY
6809: PPUSH
6810: CALL_OW 428
6814: PUSH
6815: LD_INT 0
6817: EQUAL
6818: AND
6819: IFFALSE 6853
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
6821: LD_VAR 0 1
6825: PPUSH
6826: LD_VAR 0 2
6830: PUSH
6831: LD_INT 1
6833: ARRAY
6834: PPUSH
6835: LD_VAR 0 2
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: PPUSH
6844: LD_VAR 0 3
6848: PPUSH
6849: CALL_OW 48
// end ;
6853: LD_VAR 0 4
6857: RET
// export function ReverseArray ( array ) ; var i ; begin
6858: LD_INT 0
6860: PPUSH
6861: PPUSH
// if not array then
6862: LD_VAR 0 1
6866: NOT
6867: IFFALSE 6871
// exit ;
6869: GO 6929
// result := [ ] ;
6871: LD_ADDR_VAR 0 2
6875: PUSH
6876: EMPTY
6877: ST_TO_ADDR
// for i := 1 to array do
6878: LD_ADDR_VAR 0 3
6882: PUSH
6883: DOUBLE
6884: LD_INT 1
6886: DEC
6887: ST_TO_ADDR
6888: LD_VAR 0 1
6892: PUSH
6893: FOR_TO
6894: IFFALSE 6927
// result := Insert ( result , 1 , array [ i ] ) ;
6896: LD_ADDR_VAR 0 2
6900: PUSH
6901: LD_VAR 0 2
6905: PPUSH
6906: LD_INT 1
6908: PPUSH
6909: LD_VAR 0 1
6913: PUSH
6914: LD_VAR 0 3
6918: ARRAY
6919: PPUSH
6920: CALL_OW 2
6924: ST_TO_ADDR
6925: GO 6893
6927: POP
6928: POP
// end ;
6929: LD_VAR 0 2
6933: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
6934: LD_INT 0
6936: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
6937: LD_VAR 0 1
6941: PPUSH
6942: LD_VAR 0 2
6946: PPUSH
6947: LD_VAR 0 3
6951: PPUSH
6952: LD_VAR 0 4
6956: PPUSH
6957: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
6961: LD_VAR 0 1
6965: PPUSH
6966: LD_VAR 0 2
6970: PPUSH
6971: LD_VAR 0 3
6975: PPUSH
6976: CALL_OW 331
// end ;
6980: LD_VAR 0 5
6984: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
6985: LD_INT 0
6987: PPUSH
// if not units then
6988: LD_VAR 0 1
6992: NOT
6993: IFFALSE 6997
// exit ;
6995: GO 7080
// result := true ;
6997: LD_ADDR_VAR 0 4
7001: PUSH
7002: LD_INT 1
7004: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
7005: LD_VAR 0 1
7009: PPUSH
7010: LD_INT 26
7012: PUSH
7013: LD_INT 1
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PPUSH
7020: CALL_OW 72
7024: PUSH
7025: LD_INT 1
7027: ARRAY
7028: PPUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: CALL_OW 88
7038: NOT
7039: IFFALSE 7080
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
7041: LD_ADDR_VAR 0 4
7045: PUSH
7046: LD_VAR 0 1
7050: PPUSH
7051: LD_INT 26
7053: PUSH
7054: LD_INT 2
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PPUSH
7061: CALL_OW 72
7065: PUSH
7066: LD_INT 1
7068: ARRAY
7069: PPUSH
7070: LD_VAR 0 3
7074: PPUSH
7075: CALL_OW 88
7079: ST_TO_ADDR
// end ;
7080: LD_VAR 0 4
7084: RET
// export function SeeGroup ( side , group ) ; var i ; begin
7085: LD_INT 0
7087: PPUSH
7088: PPUSH
// if not group then
7089: LD_VAR 0 2
7093: NOT
7094: IFFALSE 7098
// exit ;
7096: GO 7143
// for i in group do
7098: LD_ADDR_VAR 0 4
7102: PUSH
7103: LD_VAR 0 2
7107: PUSH
7108: FOR_IN
7109: IFFALSE 7141
// if See ( side , i ) then
7111: LD_VAR 0 1
7115: PPUSH
7116: LD_VAR 0 4
7120: PPUSH
7121: CALL_OW 292
7125: IFFALSE 7139
// begin result := true ;
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_INT 1
7134: ST_TO_ADDR
// exit ;
7135: POP
7136: POP
7137: GO 7143
// end ;
7139: GO 7108
7141: POP
7142: POP
// end ; end_of_file
7143: LD_VAR 0 3
7147: RET
// export Morozov ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
7148: LD_INT 0
7150: PPUSH
7151: PPUSH
7152: PPUSH
7153: PPUSH
7154: PPUSH
7155: PPUSH
7156: PPUSH
// uc_side := 3 ;
7157: LD_ADDR_OWVAR 20
7161: PUSH
7162: LD_INT 3
7164: ST_TO_ADDR
// uc_nation := 3 ;
7165: LD_ADDR_OWVAR 21
7169: PUSH
7170: LD_INT 3
7172: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
7173: LD_ADDR_EXP 45
7177: PUSH
7178: LD_STRING Morozov
7180: PPUSH
7181: CALL_OW 25
7185: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
7186: LD_EXP 45
7190: PPUSH
7191: LD_INT 52
7193: PPUSH
7194: CALL_OW 52
// SetBName ( ruLenin , lenin ) ;
7198: LD_INT 52
7200: PPUSH
7201: LD_STRING lenin
7203: PPUSH
7204: CALL_OW 500
// ruOutsiders := [ ] ;
7208: LD_ADDR_EXP 47
7212: PUSH
7213: EMPTY
7214: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
7215: LD_ADDR_EXP 49
7219: PUSH
7220: EMPTY
7221: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
7222: LD_ADDR_EXP 50
7226: PUSH
7227: EMPTY
7228: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
7229: LD_ADDR_EXP 51
7233: PUSH
7234: EMPTY
7235: ST_TO_ADDR
// ruAttackers := [ ] ;
7236: LD_ADDR_EXP 52
7240: PUSH
7241: EMPTY
7242: ST_TO_ADDR
// waveStrength := 0 ;
7243: LD_ADDR_EXP 53
7247: PUSH
7248: LD_INT 0
7250: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7251: LD_ADDR_VAR 0 7
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 21
7268: PUSH
7269: LD_INT 3
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// for i in tmp do
7285: LD_ADDR_VAR 0 2
7289: PUSH
7290: LD_VAR 0 7
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7329
// SetBLevel ( i , [ 5 , 5 , 6 ] [ Difficulty ] ) ;
7298: LD_VAR 0 2
7302: PPUSH
7303: LD_INT 5
7305: PUSH
7306: LD_INT 5
7308: PUSH
7309: LD_INT 6
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: LIST
7316: PUSH
7317: LD_OWVAR 67
7321: ARRAY
7322: PPUSH
7323: CALL_OW 241
7327: GO 7295
7329: POP
7330: POP
// for i := 1 to 3 do
7331: LD_ADDR_VAR 0 2
7335: PUSH
7336: DOUBLE
7337: LD_INT 1
7339: DEC
7340: ST_TO_ADDR
7341: LD_INT 3
7343: PUSH
7344: FOR_TO
7345: IFFALSE 7383
// begin PrepareHuman ( false , 1 , 0 ) ;
7347: LD_INT 0
7349: PPUSH
7350: LD_INT 1
7352: PPUSH
7353: LD_INT 0
7355: PPUSH
7356: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
7360: CALL_OW 44
7364: PPUSH
7365: LD_INT 75
7367: PPUSH
7368: LD_INT 49
7370: PPUSH
7371: LD_INT 3
7373: PPUSH
7374: LD_INT 0
7376: PPUSH
7377: CALL_OW 50
// end ;
7381: GO 7344
7383: POP
7384: POP
// for i := 1 to 4 do
7385: LD_ADDR_VAR 0 2
7389: PUSH
7390: DOUBLE
7391: LD_INT 1
7393: DEC
7394: ST_TO_ADDR
7395: LD_INT 4
7397: PUSH
7398: FOR_TO
7399: IFFALSE 7445
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
7401: LD_INT 0
7403: PPUSH
7404: LD_INT 1
7406: PPUSH
7407: LD_INT 2
7409: PPUSH
7410: CALL_OW 12
7414: PPUSH
7415: LD_INT 0
7417: PPUSH
7418: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
7422: CALL_OW 44
7426: PPUSH
7427: LD_INT 330
7429: PPUSH
7430: LD_INT 231
7432: PPUSH
7433: LD_INT 5
7435: PPUSH
7436: LD_INT 0
7438: PPUSH
7439: CALL_OW 50
// end ;
7443: GO 7398
7445: POP
7446: POP
// hc_class := 1 ;
7447: LD_ADDR_OWVAR 28
7451: PUSH
7452: LD_INT 1
7454: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
7455: CALL_OW 44
7459: PPUSH
7460: LD_INT 324
7462: PPUSH
7463: LD_INT 219
7465: PPUSH
7466: CALL_OW 428
7470: PPUSH
7471: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
7475: CALL_OW 44
7479: PPUSH
7480: LD_INT 316
7482: PPUSH
7483: LD_INT 223
7485: PPUSH
7486: CALL_OW 428
7490: PPUSH
7491: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
7495: LD_ADDR_VAR 0 7
7499: PUSH
7500: LD_INT 172
7502: PPUSH
7503: LD_INT 198
7505: PPUSH
7506: CALL_OW 428
7510: PPUSH
7511: CALL_OW 274
7515: PUSH
7516: LD_INT 189
7518: PPUSH
7519: LD_INT 156
7521: PPUSH
7522: CALL_OW 428
7526: PPUSH
7527: CALL_OW 274
7531: PUSH
7532: LD_INT 341
7534: PPUSH
7535: LD_INT 232
7537: PPUSH
7538: CALL_OW 428
7542: PPUSH
7543: CALL_OW 274
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: ST_TO_ADDR
// for i in tmp do
7553: LD_ADDR_VAR 0 2
7557: PUSH
7558: LD_VAR 0 7
7562: PUSH
7563: FOR_IN
7564: IFFALSE 7598
// begin SetResourceType ( i , mat_cans , 200 ) ;
7566: LD_VAR 0 2
7570: PPUSH
7571: LD_INT 1
7573: PPUSH
7574: LD_INT 200
7576: PPUSH
7577: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
7581: LD_VAR 0 2
7585: PPUSH
7586: LD_INT 2
7588: PPUSH
7589: LD_INT 200
7591: PPUSH
7592: CALL_OW 277
// end ;
7596: GO 7563
7598: POP
7599: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 177 , 114 ] , [ 138 , 96 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
7600: LD_ADDR_VAR 0 7
7604: PUSH
7605: LD_INT 198
7607: PUSH
7608: LD_INT 158
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 203
7617: PUSH
7618: LD_INT 166
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 177
7627: PUSH
7628: LD_INT 114
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 138
7637: PUSH
7638: LD_INT 96
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 181
7647: PUSH
7648: LD_INT 209
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 178
7657: PUSH
7658: LD_INT 196
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 181
7667: PUSH
7668: LD_INT 212
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: ST_TO_ADDR
// for i := 1 to tmp do
7684: LD_ADDR_VAR 0 2
7688: PUSH
7689: DOUBLE
7690: LD_INT 1
7692: DEC
7693: ST_TO_ADDR
7694: LD_VAR 0 7
7698: PUSH
7699: FOR_TO
7700: IFFALSE 7817
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
7702: LD_INT 0
7704: PPUSH
7705: LD_INT 1
7707: PPUSH
7708: LD_INT 4
7710: PUSH
7711: LD_INT 5
7713: PUSH
7714: LD_INT 6
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: PUSH
7722: LD_OWVAR 67
7726: ARRAY
7727: PPUSH
7728: CALL_OW 380
// un := CreateHuman ;
7732: LD_ADDR_VAR 0 5
7736: PUSH
7737: CALL_OW 44
7741: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
7742: LD_ADDR_VAR 0 4
7746: PUSH
7747: LD_VAR 0 7
7751: PUSH
7752: LD_VAR 0 2
7756: ARRAY
7757: PUSH
7758: LD_INT 1
7760: ARRAY
7761: PPUSH
7762: LD_VAR 0 7
7766: PUSH
7767: LD_VAR 0 2
7771: ARRAY
7772: PUSH
7773: LD_INT 2
7775: ARRAY
7776: PPUSH
7777: CALL_OW 428
7781: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
7782: LD_VAR 0 5
7786: PPUSH
7787: LD_VAR 0 4
7791: PPUSH
7792: CALL 54868 0 1
7796: PPUSH
7797: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7801: LD_VAR 0 5
7805: PPUSH
7806: LD_VAR 0 4
7810: PPUSH
7811: CALL_OW 52
// end ;
7815: GO 7699
7817: POP
7818: POP
// for i := 1 to 3 do
7819: LD_ADDR_VAR 0 2
7823: PUSH
7824: DOUBLE
7825: LD_INT 1
7827: DEC
7828: ST_TO_ADDR
7829: LD_INT 3
7831: PUSH
7832: FOR_TO
7833: IFFALSE 7888
// begin InitHc ;
7835: CALL_OW 19
// uc_nation := 0 ;
7839: LD_ADDR_OWVAR 21
7843: PUSH
7844: LD_INT 0
7846: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
7847: LD_ADDR_OWVAR 28
7851: PUSH
7852: LD_INT 16
7854: ST_TO_ADDR
// un := CreateHuman ;
7855: LD_ADDR_VAR 0 5
7859: PUSH
7860: CALL_OW 44
7864: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
7865: LD_VAR 0 5
7869: PPUSH
7870: LD_INT 194
7872: PPUSH
7873: LD_INT 164
7875: PPUSH
7876: LD_INT 6
7878: PPUSH
7879: LD_INT 0
7881: PPUSH
7882: CALL_OW 50
// end ;
7886: GO 7832
7888: POP
7889: POP
// uc_nation := 3 ;
7890: LD_ADDR_OWVAR 21
7894: PUSH
7895: LD_INT 3
7897: ST_TO_ADDR
// if Difficulty > 1 then
7898: LD_OWVAR 67
7902: PUSH
7903: LD_INT 1
7905: GREATER
7906: IFFALSE 7994
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
7908: LD_INT 24
7910: PPUSH
7911: LD_INT 1
7913: PPUSH
7914: LD_INT 1
7916: PPUSH
7917: LD_INT 44
7919: PPUSH
7920: LD_INT 10
7922: PPUSH
7923: CALL 27160 0 5
// un := CreateVehicle ;
7927: LD_ADDR_VAR 0 5
7931: PUSH
7932: CALL_OW 45
7936: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
7937: LD_VAR 0 5
7941: PPUSH
7942: LD_INT 199
7944: PPUSH
7945: LD_INT 162
7947: PPUSH
7948: LD_INT 1
7950: PPUSH
7951: LD_INT 0
7953: PPUSH
7954: CALL 60965 0 5
// ComHold ( un ) ;
7958: LD_VAR 0 5
7962: PPUSH
7963: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
7967: LD_INT 0
7969: PPUSH
7970: LD_INT 3
7972: PPUSH
7973: LD_INT 4
7975: PPUSH
7976: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7980: CALL_OW 44
7984: PPUSH
7985: LD_VAR 0 5
7989: PPUSH
7990: CALL_OW 52
// end ; tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
7994: LD_ADDR_VAR 0 7
7998: PUSH
7999: LD_INT 135
8001: PUSH
8002: LD_INT 100
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: LD_INT 137
8011: PUSH
8012: LD_INT 92
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: ST_TO_ADDR
// for i := 1 to tmp do
8023: LD_ADDR_VAR 0 2
8027: PUSH
8028: DOUBLE
8029: LD_INT 1
8031: DEC
8032: ST_TO_ADDR
8033: LD_VAR 0 7
8037: PUSH
8038: FOR_TO
8039: IFFALSE 8205
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
8041: LD_INT 22
8043: PUSH
8044: LD_INT 22
8046: PUSH
8047: LD_INT 24
8049: PUSH
8050: LD_INT 24
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: LD_OWVAR 67
8063: PUSH
8064: LD_INT 0
8066: PPUSH
8067: LD_INT 1
8069: PPUSH
8070: CALL_OW 12
8074: PLUS
8075: ARRAY
8076: PPUSH
8077: LD_INT 1
8079: PPUSH
8080: LD_INT 1
8082: PPUSH
8083: LD_INT 44
8085: PPUSH
8086: LD_INT 25
8088: PPUSH
8089: CALL 27160 0 5
// veh := CreateVehicle ;
8093: LD_ADDR_VAR 0 6
8097: PUSH
8098: CALL_OW 45
8102: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8103: LD_VAR 0 6
8107: PPUSH
8108: LD_INT 2
8110: PPUSH
8111: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
8115: LD_VAR 0 6
8119: PPUSH
8120: LD_VAR 0 7
8124: PUSH
8125: LD_VAR 0 2
8129: ARRAY
8130: PUSH
8131: LD_INT 1
8133: ARRAY
8134: PPUSH
8135: LD_VAR 0 7
8139: PUSH
8140: LD_VAR 0 2
8144: ARRAY
8145: PUSH
8146: LD_INT 2
8148: ARRAY
8149: PPUSH
8150: LD_INT 0
8152: PPUSH
8153: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
8157: LD_INT 0
8159: PPUSH
8160: LD_INT 3
8162: PPUSH
8163: LD_INT 6
8165: PPUSH
8166: CALL_OW 380
// un := CreateHuman ;
8170: LD_ADDR_VAR 0 5
8174: PUSH
8175: CALL_OW 44
8179: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8180: LD_VAR 0 5
8184: PPUSH
8185: LD_VAR 0 6
8189: PPUSH
8190: CALL_OW 52
// ComHold ( veh ) ;
8194: LD_VAR 0 6
8198: PPUSH
8199: CALL_OW 140
// end ;
8203: GO 8038
8205: POP
8206: POP
// if Difficulty > 1 then
8207: LD_OWVAR 67
8211: PUSH
8212: LD_INT 1
8214: GREATER
8215: IFFALSE 8572
// begin tmp := [ 191 , 122 ] ;
8217: LD_ADDR_VAR 0 7
8221: PUSH
8222: LD_INT 191
8224: PUSH
8225: LD_INT 122
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
8232: LD_INT 24
8234: PPUSH
8235: LD_INT 1
8237: PPUSH
8238: LD_INT 1
8240: PPUSH
8241: LD_INT 44
8243: PPUSH
8244: LD_INT 30
8246: PPUSH
8247: CALL 27160 0 5
// ruBlockadeTank := CreateVehicle ;
8251: LD_ADDR_EXP 46
8255: PUSH
8256: CALL_OW 45
8260: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
8261: LD_EXP 46
8265: PPUSH
8266: LD_INT 2
8268: PPUSH
8269: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
8273: LD_EXP 46
8277: PPUSH
8278: LD_INT 191
8280: PPUSH
8281: LD_INT 122
8283: PPUSH
8284: LD_INT 0
8286: PPUSH
8287: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
8291: LD_INT 1
8293: PPUSH
8294: LD_INT 5
8296: PUSH
8297: LD_INT 6
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: PUSH
8304: LD_OWVAR 67
8308: PUSH
8309: LD_INT 1
8311: MINUS
8312: ARRAY
8313: PPUSH
8314: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
8318: CALL_OW 44
8322: PPUSH
8323: LD_EXP 46
8327: PPUSH
8328: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
8332: LD_EXP 46
8336: PPUSH
8337: CALL_OW 140
// ruBlockadeSquad := [ ] ;
8341: LD_ADDR_EXP 48
8345: PUSH
8346: EMPTY
8347: ST_TO_ADDR
// for i := 1 to [ 3 , 4 ] [ Difficulty - 1 ] do
8348: LD_ADDR_VAR 0 2
8352: PUSH
8353: DOUBLE
8354: LD_INT 1
8356: DEC
8357: ST_TO_ADDR
8358: LD_INT 3
8360: PUSH
8361: LD_INT 4
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: LD_OWVAR 67
8372: PUSH
8373: LD_INT 1
8375: MINUS
8376: ARRAY
8377: PUSH
8378: FOR_TO
8379: IFFALSE 8491
// begin PrepareHuman ( false , 1 , [ 5 , 6 ] [ Difficulty - 1 ] ) ;
8381: LD_INT 0
8383: PPUSH
8384: LD_INT 1
8386: PPUSH
8387: LD_INT 5
8389: PUSH
8390: LD_INT 6
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_OWVAR 67
8401: PUSH
8402: LD_INT 1
8404: MINUS
8405: ARRAY
8406: PPUSH
8407: CALL_OW 380
// un := CreateHuman ;
8411: LD_ADDR_VAR 0 5
8415: PUSH
8416: CALL_OW 44
8420: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
8421: LD_VAR 0 5
8425: PPUSH
8426: LD_INT 9
8428: PPUSH
8429: LD_INT 0
8431: PPUSH
8432: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
8436: LD_VAR 0 5
8440: PPUSH
8441: LD_INT 198
8443: PPUSH
8444: LD_INT 129
8446: PPUSH
8447: CALL_OW 118
// AddComCrawl ( un ) ;
8451: LD_VAR 0 5
8455: PPUSH
8456: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
8460: LD_ADDR_EXP 48
8464: PUSH
8465: LD_EXP 48
8469: PPUSH
8470: LD_EXP 48
8474: PUSH
8475: LD_INT 1
8477: PLUS
8478: PPUSH
8479: LD_VAR 0 5
8483: PPUSH
8484: CALL_OW 1
8488: ST_TO_ADDR
// end ;
8489: GO 8378
8491: POP
8492: POP
// PrepareHuman ( false , 4 , 5 ) ;
8493: LD_INT 0
8495: PPUSH
8496: LD_INT 4
8498: PPUSH
8499: LD_INT 5
8501: PPUSH
8502: CALL_OW 380
// un := CreateHuman ;
8506: LD_ADDR_VAR 0 5
8510: PUSH
8511: CALL_OW 44
8515: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
8516: LD_VAR 0 5
8520: PPUSH
8521: LD_INT 179
8523: PPUSH
8524: LD_INT 113
8526: PPUSH
8527: LD_INT 0
8529: PPUSH
8530: CALL_OW 48
// ComHold ( un ) ;
8534: LD_VAR 0 5
8538: PPUSH
8539: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
8543: LD_ADDR_EXP 48
8547: PUSH
8548: LD_EXP 48
8552: PPUSH
8553: LD_EXP 48
8557: PUSH
8558: LD_INT 1
8560: PLUS
8561: PPUSH
8562: LD_VAR 0 5
8566: PPUSH
8567: CALL_OW 1
8571: ST_TO_ADDR
// end ; tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
8572: LD_ADDR_VAR 0 7
8576: PUSH
8577: LD_INT 167
8579: PPUSH
8580: LD_INT 243
8582: PPUSH
8583: CALL_OW 428
8587: PPUSH
8588: CALL_OW 274
8592: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
8593: LD_VAR 0 7
8597: PPUSH
8598: LD_INT 1
8600: PPUSH
8601: LD_INT 1000
8603: PPUSH
8604: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
8608: LD_VAR 0 7
8612: PPUSH
8613: LD_INT 2
8615: PPUSH
8616: LD_INT 400
8618: PPUSH
8619: CALL_OW 277
// tmp := HexInfo ( 169 , 226 ) ;
8623: LD_ADDR_VAR 0 7
8627: PUSH
8628: LD_INT 169
8630: PPUSH
8631: LD_INT 226
8633: PPUSH
8634: CALL_OW 428
8638: ST_TO_ADDR
// for i := 1 to 3 do
8639: LD_ADDR_VAR 0 2
8643: PUSH
8644: DOUBLE
8645: LD_INT 1
8647: DEC
8648: ST_TO_ADDR
8649: LD_INT 3
8651: PUSH
8652: FOR_TO
8653: IFFALSE 8740
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8655: LD_INT 0
8657: PPUSH
8658: LD_INT 1
8660: PPUSH
8661: LD_INT 4
8663: PUSH
8664: LD_INT 5
8666: PUSH
8667: LD_INT 5
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: LIST
8674: PUSH
8675: LD_OWVAR 67
8679: ARRAY
8680: PPUSH
8681: CALL_OW 380
// un := CreateHuman ;
8685: LD_ADDR_VAR 0 5
8689: PUSH
8690: CALL_OW 44
8694: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
8695: LD_VAR 0 5
8699: PPUSH
8700: LD_VAR 0 7
8704: PPUSH
8705: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
8709: LD_ADDR_EXP 49
8713: PUSH
8714: LD_EXP 49
8718: PPUSH
8719: LD_EXP 49
8723: PUSH
8724: LD_INT 1
8726: PLUS
8727: PPUSH
8728: LD_VAR 0 5
8732: PPUSH
8733: CALL_OW 1
8737: ST_TO_ADDR
// end ;
8738: GO 8652
8740: POP
8741: POP
// tmp := [ [ 165 , 224 ] , [ 173 , 228 ] ] ;
8742: LD_ADDR_VAR 0 7
8746: PUSH
8747: LD_INT 165
8749: PUSH
8750: LD_INT 224
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 173
8759: PUSH
8760: LD_INT 228
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: ST_TO_ADDR
// for i := 1 to tmp do
8771: LD_ADDR_VAR 0 2
8775: PUSH
8776: DOUBLE
8777: LD_INT 1
8779: DEC
8780: ST_TO_ADDR
8781: LD_VAR 0 7
8785: PUSH
8786: FOR_TO
8787: IFFALSE 8904
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8789: LD_INT 0
8791: PPUSH
8792: LD_INT 1
8794: PPUSH
8795: LD_INT 4
8797: PUSH
8798: LD_INT 5
8800: PUSH
8801: LD_INT 5
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_OWVAR 67
8813: ARRAY
8814: PPUSH
8815: CALL_OW 380
// un := CreateHuman ;
8819: LD_ADDR_VAR 0 5
8823: PUSH
8824: CALL_OW 44
8828: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
8829: LD_VAR 0 5
8833: PPUSH
8834: LD_VAR 0 7
8838: PUSH
8839: LD_VAR 0 2
8843: ARRAY
8844: PUSH
8845: LD_INT 1
8847: ARRAY
8848: PPUSH
8849: LD_VAR 0 7
8853: PUSH
8854: LD_VAR 0 2
8858: ARRAY
8859: PUSH
8860: LD_INT 2
8862: ARRAY
8863: PPUSH
8864: CALL_OW 428
8868: PPUSH
8869: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
8873: LD_ADDR_EXP 49
8877: PUSH
8878: LD_EXP 49
8882: PPUSH
8883: LD_EXP 49
8887: PUSH
8888: LD_INT 1
8890: PLUS
8891: PPUSH
8892: LD_VAR 0 5
8896: PPUSH
8897: CALL_OW 1
8901: ST_TO_ADDR
// end ;
8902: GO 8786
8904: POP
8905: POP
// for i := 1 to 2 do
8906: LD_ADDR_VAR 0 2
8910: PUSH
8911: DOUBLE
8912: LD_INT 1
8914: DEC
8915: ST_TO_ADDR
8916: LD_INT 2
8918: PUSH
8919: FOR_TO
8920: IFFALSE 8975
// begin InitHc ;
8922: CALL_OW 19
// uc_nation := 0 ;
8926: LD_ADDR_OWVAR 21
8930: PUSH
8931: LD_INT 0
8933: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
8934: LD_ADDR_OWVAR 28
8938: PUSH
8939: LD_INT 16
8941: ST_TO_ADDR
// un := CreateHuman ;
8942: LD_ADDR_VAR 0 5
8946: PUSH
8947: CALL_OW 44
8951: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
8952: LD_VAR 0 5
8956: PPUSH
8957: LD_INT 166
8959: PPUSH
8960: LD_INT 233
8962: PPUSH
8963: LD_INT 2
8965: PPUSH
8966: LD_INT 0
8968: PPUSH
8969: CALL_OW 50
// end ;
8973: GO 8919
8975: POP
8976: POP
// uc_nation := 3 ;
8977: LD_ADDR_OWVAR 21
8981: PUSH
8982: LD_INT 3
8984: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
8985: LD_ADDR_VAR 0 7
8989: PUSH
8990: LD_INT 71
8992: PUSH
8993: LD_INT 52
8995: PUSH
8996: LD_INT 11
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: LIST
9003: ST_TO_ADDR
// for i in tmp do
9004: LD_ADDR_VAR 0 2
9008: PUSH
9009: LD_VAR 0 7
9013: PUSH
9014: FOR_IN
9015: IFFALSE 9059
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
9017: LD_VAR 0 2
9021: PPUSH
9022: CALL_OW 274
9026: PPUSH
9027: LD_INT 1
9029: PPUSH
9030: LD_INT 3000
9032: PPUSH
9033: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
9037: LD_VAR 0 2
9041: PPUSH
9042: CALL_OW 274
9046: PPUSH
9047: LD_INT 2
9049: PPUSH
9050: LD_INT 600
9052: PPUSH
9053: CALL_OW 277
// end ;
9057: GO 9014
9059: POP
9060: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
9061: LD_ADDR_VAR 0 7
9065: PUSH
9066: LD_INT 41
9068: PUSH
9069: LD_INT 57
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: LD_INT 38
9078: PUSH
9079: LD_INT 55
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 50
9088: PUSH
9089: LD_INT 73
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 51
9098: PUSH
9099: LD_INT 65
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 82
9108: PUSH
9109: LD_INT 93
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: LD_INT 87
9118: PUSH
9119: LD_INT 100
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 91
9128: PUSH
9129: LD_INT 109
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 84
9138: PUSH
9139: LD_INT 120
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 113
9148: PUSH
9149: LD_INT 153
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 123
9158: PUSH
9159: LD_INT 171
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 125
9168: PUSH
9169: LD_INT 178
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PUSH
9176: LD_INT 125
9178: PUSH
9179: LD_INT 188
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: LD_INT 125
9188: PUSH
9189: LD_INT 201
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 33
9198: PUSH
9199: LD_INT 60
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: LD_INT 76
9208: PUSH
9209: LD_INT 95
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 84
9218: PUSH
9219: LD_INT 111
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 112
9228: PUSH
9229: LD_INT 165
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: ST_TO_ADDR
// for i := 1 to tmp do
9255: LD_ADDR_VAR 0 2
9259: PUSH
9260: DOUBLE
9261: LD_INT 1
9263: DEC
9264: ST_TO_ADDR
9265: LD_VAR 0 7
9269: PUSH
9270: FOR_TO
9271: IFFALSE 9498
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
9273: LD_ADDR_VAR 0 4
9277: PUSH
9278: LD_VAR 0 7
9282: PUSH
9283: LD_VAR 0 2
9287: ARRAY
9288: PUSH
9289: LD_INT 1
9291: ARRAY
9292: PPUSH
9293: LD_VAR 0 7
9297: PUSH
9298: LD_VAR 0 2
9302: ARRAY
9303: PUSH
9304: LD_INT 2
9306: ARRAY
9307: PPUSH
9308: CALL_OW 428
9312: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
9313: LD_VAR 0 4
9317: PPUSH
9318: CALL_OW 266
9322: PUSH
9323: LD_INT 4
9325: PUSH
9326: LD_INT 5
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: IN
9333: IFFALSE 9413
// begin for j := 1 to Difficulty do
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: DOUBLE
9341: LD_INT 1
9343: DEC
9344: ST_TO_ADDR
9345: LD_OWVAR 67
9349: PUSH
9350: FOR_TO
9351: IFFALSE 9409
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9353: LD_INT 0
9355: PPUSH
9356: LD_INT 1
9358: PPUSH
9359: LD_INT 4
9361: PUSH
9362: LD_INT 5
9364: PUSH
9365: LD_INT 5
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: PUSH
9373: LD_OWVAR 67
9377: ARRAY
9378: PPUSH
9379: CALL_OW 380
// un := CreateHuman ;
9383: LD_ADDR_VAR 0 5
9387: PUSH
9388: CALL_OW 44
9392: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
9393: LD_VAR 0 5
9397: PPUSH
9398: LD_VAR 0 4
9402: PPUSH
9403: CALL_OW 52
// end ;
9407: GO 9350
9409: POP
9410: POP
// end else
9411: GO 9467
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9413: LD_INT 0
9415: PPUSH
9416: LD_INT 1
9418: PPUSH
9419: LD_INT 4
9421: PUSH
9422: LD_INT 5
9424: PUSH
9425: LD_INT 5
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: LIST
9432: PUSH
9433: LD_OWVAR 67
9437: ARRAY
9438: PPUSH
9439: CALL_OW 380
// un := CreateHuman ;
9443: LD_ADDR_VAR 0 5
9447: PUSH
9448: CALL_OW 44
9452: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
9453: LD_VAR 0 5
9457: PPUSH
9458: LD_VAR 0 4
9462: PPUSH
9463: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
9467: LD_ADDR_EXP 50
9471: PUSH
9472: LD_EXP 50
9476: PPUSH
9477: LD_EXP 50
9481: PUSH
9482: LD_INT 1
9484: PLUS
9485: PPUSH
9486: LD_VAR 0 5
9490: PPUSH
9491: CALL_OW 1
9495: ST_TO_ADDR
// end ;
9496: GO 9270
9498: POP
9499: POP
// for i := 1 to 5 do
9500: LD_ADDR_VAR 0 2
9504: PUSH
9505: DOUBLE
9506: LD_INT 1
9508: DEC
9509: ST_TO_ADDR
9510: LD_INT 5
9512: PUSH
9513: FOR_TO
9514: IFFALSE 9608
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9516: LD_INT 0
9518: PPUSH
9519: LD_INT 2
9521: PPUSH
9522: LD_INT 4
9524: PUSH
9525: LD_INT 5
9527: PUSH
9528: LD_INT 5
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: PUSH
9536: LD_OWVAR 67
9540: ARRAY
9541: PPUSH
9542: CALL_OW 380
// un := CreateHuman ;
9546: LD_ADDR_VAR 0 5
9550: PUSH
9551: CALL_OW 44
9555: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
9556: LD_VAR 0 5
9560: PPUSH
9561: LD_INT 66
9563: PPUSH
9564: LD_INT 101
9566: PPUSH
9567: LD_INT 3
9569: PPUSH
9570: LD_INT 0
9572: PPUSH
9573: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
9577: LD_ADDR_EXP 50
9581: PUSH
9582: LD_EXP 50
9586: PPUSH
9587: LD_EXP 50
9591: PUSH
9592: LD_INT 1
9594: PLUS
9595: PPUSH
9596: LD_VAR 0 5
9600: PPUSH
9601: CALL_OW 1
9605: ST_TO_ADDR
// end ;
9606: GO 9513
9608: POP
9609: POP
// tmp := [ ruFac1 , ruFac2 ] ;
9610: LD_ADDR_VAR 0 7
9614: PUSH
9615: LD_INT 72
9617: PUSH
9618: LD_INT 12
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: ST_TO_ADDR
// for i := 1 to tmp do
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: DOUBLE
9631: LD_INT 1
9633: DEC
9634: ST_TO_ADDR
9635: LD_VAR 0 7
9639: PUSH
9640: FOR_TO
9641: IFFALSE 9754
// for j := 1 to 6 do
9643: LD_ADDR_VAR 0 3
9647: PUSH
9648: DOUBLE
9649: LD_INT 1
9651: DEC
9652: ST_TO_ADDR
9653: LD_INT 6
9655: PUSH
9656: FOR_TO
9657: IFFALSE 9750
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9659: LD_INT 0
9661: PPUSH
9662: LD_INT 3
9664: PPUSH
9665: LD_INT 4
9667: PUSH
9668: LD_INT 5
9670: PUSH
9671: LD_INT 5
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: LIST
9678: PUSH
9679: LD_OWVAR 67
9683: ARRAY
9684: PPUSH
9685: CALL_OW 380
// un := CreateHuman ;
9689: LD_ADDR_VAR 0 5
9693: PUSH
9694: CALL_OW 44
9698: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
9699: LD_VAR 0 5
9703: PPUSH
9704: LD_VAR 0 7
9708: PUSH
9709: LD_VAR 0 2
9713: ARRAY
9714: PPUSH
9715: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
9719: LD_ADDR_EXP 50
9723: PUSH
9724: LD_EXP 50
9728: PPUSH
9729: LD_EXP 50
9733: PUSH
9734: LD_INT 1
9736: PLUS
9737: PPUSH
9738: LD_VAR 0 5
9742: PPUSH
9743: CALL_OW 1
9747: ST_TO_ADDR
// end ;
9748: GO 9656
9750: POP
9751: POP
9752: GO 9640
9754: POP
9755: POP
// for i := 1 to 3 do
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: DOUBLE
9762: LD_INT 1
9764: DEC
9765: ST_TO_ADDR
9766: LD_INT 3
9768: PUSH
9769: FOR_TO
9770: IFFALSE 9855
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
9772: LD_INT 0
9774: PPUSH
9775: LD_INT 4
9777: PPUSH
9778: LD_INT 4
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: LD_INT 5
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: PUSH
9792: LD_OWVAR 67
9796: ARRAY
9797: PPUSH
9798: CALL_OW 380
// un := CreateHuman ;
9802: LD_ADDR_VAR 0 5
9806: PUSH
9807: CALL_OW 44
9811: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
9812: LD_VAR 0 5
9816: PPUSH
9817: LD_INT 17
9819: PPUSH
9820: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
9824: LD_ADDR_EXP 50
9828: PUSH
9829: LD_EXP 50
9833: PPUSH
9834: LD_EXP 50
9838: PUSH
9839: LD_INT 1
9841: PLUS
9842: PPUSH
9843: LD_VAR 0 5
9847: PPUSH
9848: CALL_OW 1
9852: ST_TO_ADDR
// end ;
9853: GO 9769
9855: POP
9856: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
9857: LD_ADDR_VAR 0 2
9861: PUSH
9862: DOUBLE
9863: LD_INT 1
9865: DEC
9866: ST_TO_ADDR
9867: LD_INT 2
9869: PUSH
9870: LD_INT 3
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: LD_OWVAR 67
9885: ARRAY
9886: PUSH
9887: FOR_TO
9888: IFFALSE 10008
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
9890: LD_INT 22
9892: PPUSH
9893: LD_INT 1
9895: PPUSH
9896: LD_INT 1
9898: PPUSH
9899: LD_INT 52
9901: PPUSH
9902: LD_INT 100
9904: PPUSH
9905: CALL 27160 0 5
// veh := CreateVehicle ;
9909: LD_ADDR_VAR 0 6
9913: PUSH
9914: CALL_OW 45
9918: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
9919: LD_INT 0
9921: PPUSH
9922: LD_INT 3
9924: PPUSH
9925: LD_INT 4
9927: PPUSH
9928: CALL_OW 380
// un := CreateHuman ;
9932: LD_ADDR_VAR 0 5
9936: PUSH
9937: CALL_OW 44
9941: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
9942: LD_VAR 0 6
9946: PPUSH
9947: LD_INT 107
9949: PPUSH
9950: LD_INT 182
9952: PPUSH
9953: LD_INT 4
9955: PPUSH
9956: LD_INT 0
9958: PPUSH
9959: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
9963: LD_VAR 0 5
9967: PPUSH
9968: LD_VAR 0 6
9972: PPUSH
9973: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
9977: LD_ADDR_EXP 50
9981: PUSH
9982: LD_EXP 50
9986: PPUSH
9987: LD_EXP 50
9991: PUSH
9992: LD_INT 1
9994: PLUS
9995: PPUSH
9996: LD_VAR 0 5
10000: PPUSH
10001: CALL_OW 1
10005: ST_TO_ADDR
// end ;
10006: GO 9887
10008: POP
10009: POP
// InitHc ;
10010: CALL_OW 19
// for i := 1 to [ 6 , 8 , 10 ] [ Difficulty ] do
10014: LD_ADDR_VAR 0 2
10018: PUSH
10019: DOUBLE
10020: LD_INT 1
10022: DEC
10023: ST_TO_ADDR
10024: LD_INT 6
10026: PUSH
10027: LD_INT 8
10029: PUSH
10030: LD_INT 10
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: PUSH
10038: LD_OWVAR 67
10042: ARRAY
10043: PUSH
10044: FOR_TO
10045: IFFALSE 10117
// begin uc_nation := 0 ;
10047: LD_ADDR_OWVAR 21
10051: PUSH
10052: LD_INT 0
10054: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
10055: LD_ADDR_OWVAR 28
10059: PUSH
10060: LD_INT 15
10062: ST_TO_ADDR
// un := CreateHuman ;
10063: LD_ADDR_VAR 0 5
10067: PUSH
10068: CALL_OW 44
10072: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
10073: LD_VAR 0 5
10077: PPUSH
10078: LD_INT 269
10080: PUSH
10081: LD_INT 300
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_VAR 0 2
10092: PUSH
10093: LD_INT 2
10095: MOD
10096: PUSH
10097: LD_INT 1
10099: PLUS
10100: ARRAY
10101: PPUSH
10102: LD_INT 182
10104: PPUSH
10105: LD_INT 4
10107: PPUSH
10108: LD_INT 0
10110: PPUSH
10111: CALL_OW 50
// end ;
10115: GO 10044
10117: POP
10118: POP
// uc_nation := 3 ;
10119: LD_ADDR_OWVAR 21
10123: PUSH
10124: LD_INT 3
10126: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
10127: LD_INT 21
10129: PPUSH
10130: LD_INT 1
10132: PPUSH
10133: LD_INT 1
10135: PPUSH
10136: LD_INT 51
10138: PPUSH
10139: LD_INT 12
10141: PPUSH
10142: CALL 27160 0 5
// veh := CreateVehicle ;
10146: LD_ADDR_VAR 0 6
10150: PUSH
10151: CALL_OW 45
10155: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
10156: LD_VAR 0 6
10160: PPUSH
10161: LD_INT 269
10163: PPUSH
10164: LD_INT 66
10166: PPUSH
10167: LD_INT 4
10169: PPUSH
10170: LD_INT 0
10172: PPUSH
10173: CALL 60965 0 5
// SetLives ( veh , 333 ) ;
10177: LD_VAR 0 6
10181: PPUSH
10182: LD_INT 333
10184: PPUSH
10185: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
10189: LD_VAR 0 6
10193: PPUSH
10194: LD_INT 2
10196: PPUSH
10197: LD_INT 100
10199: PPUSH
10200: CALL_OW 290
// end ;
10204: LD_VAR 0 1
10208: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
10209: LD_EXP 46
10213: PUSH
10214: LD_EXP 46
10218: PPUSH
10219: CALL_OW 255
10223: PUSH
10224: LD_INT 3
10226: EQUAL
10227: AND
10228: IFFALSE 10391
10230: GO 10232
10232: DISABLE
10233: LD_INT 0
10235: PPUSH
// begin enable ;
10236: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
10237: LD_INT 81
10239: PUSH
10240: LD_INT 3
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 91
10249: PUSH
10250: LD_EXP 46
10254: PUSH
10255: LD_INT 15
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 69
10271: IFFALSE 10351
// begin if not IsDrivenBy ( ruBlockadeTank ) then
10273: LD_EXP 46
10277: PPUSH
10278: CALL_OW 311
10282: NOT
10283: IFFALSE 10349
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
10285: LD_ADDR_VAR 0 1
10289: PUSH
10290: LD_INT 22
10292: PUSH
10293: LD_INT 3
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 21
10302: PUSH
10303: LD_INT 1
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PPUSH
10314: CALL_OW 69
10318: PPUSH
10319: LD_EXP 46
10323: PPUSH
10324: CALL_OW 74
10328: ST_TO_ADDR
// if driver then
10329: LD_VAR 0 1
10333: IFFALSE 10349
// ComEnterUnit ( driver , ruBlockadeTank ) ;
10335: LD_VAR 0 1
10339: PPUSH
10340: LD_EXP 46
10344: PPUSH
10345: CALL_OW 120
// end ; exit ;
10349: GO 10391
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
10351: LD_EXP 46
10355: PPUSH
10356: CALL_OW 256
10360: PUSH
10361: LD_INT 1000
10363: LESS
10364: PUSH
10365: LD_EXP 46
10369: PPUSH
10370: CALL_OW 311
10374: AND
10375: IFFALSE 10391
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
10377: LD_EXP 46
10381: PPUSH
10382: CALL_OW 311
10386: PPUSH
10387: CALL 60525 0 1
// end ;
10391: PPOPN 1
10393: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
10394: LD_EXP 48
10398: PPUSH
10399: LD_INT 3
10401: PUSH
10402: LD_INT 24
10404: PUSH
10405: LD_INT 1000
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PPUSH
10416: CALL_OW 72
10420: PUSH
10421: LD_EXP 48
10425: PPUSH
10426: LD_INT 25
10428: PUSH
10429: LD_INT 4
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 50
10438: PUSH
10439: EMPTY
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PPUSH
10446: CALL_OW 72
10450: AND
10451: IFFALSE 10639
10453: GO 10455
10455: DISABLE
10456: LD_INT 0
10458: PPUSH
10459: PPUSH
10460: PPUSH
// begin enable ;
10461: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
10462: LD_ADDR_VAR 0 3
10466: PUSH
10467: LD_EXP 48
10471: PPUSH
10472: LD_INT 3
10474: PUSH
10475: LD_INT 24
10477: PUSH
10478: LD_INT 1000
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PPUSH
10489: CALL_OW 72
10493: PPUSH
10494: LD_INT 1
10496: PPUSH
10497: CALL 60765 0 2
10501: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
10502: LD_ADDR_VAR 0 2
10506: PUSH
10507: LD_EXP 48
10511: PPUSH
10512: LD_INT 25
10514: PUSH
10515: LD_INT 4
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 50
10524: PUSH
10525: EMPTY
10526: LIST
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PPUSH
10532: CALL_OW 72
10536: PUSH
10537: LD_INT 1
10539: ARRAY
10540: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
10541: LD_VAR 0 2
10545: PPUSH
10546: LD_VAR 0 3
10550: PUSH
10551: LD_INT 1
10553: ARRAY
10554: PPUSH
10555: CALL 56264 0 2
10559: NOT
10560: IFFALSE 10639
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
10562: LD_VAR 0 3
10566: PUSH
10567: LD_INT 1
10569: ARRAY
10570: PPUSH
10571: LD_INT 9
10573: PPUSH
10574: CALL_OW 308
10578: NOT
10579: IFFALSE 10597
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
10581: LD_VAR 0 3
10585: PUSH
10586: LD_INT 1
10588: ARRAY
10589: PPUSH
10590: LD_INT 9
10592: PPUSH
10593: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
10597: LD_VAR 0 2
10601: PPUSH
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 1
10609: ARRAY
10610: PPUSH
10611: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
10615: LD_VAR 0 2
10619: PPUSH
10620: LD_INT 179
10622: PPUSH
10623: LD_INT 113
10625: PPUSH
10626: CALL_OW 171
// AddComHold ( sci ) ;
10630: LD_VAR 0 2
10634: PPUSH
10635: CALL_OW 200
// end ; end ;
10639: PPOPN 3
10641: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
10642: LD_INT 2
10644: PPUSH
10645: LD_INT 52
10647: PPUSH
10648: CALL_OW 292
10652: IFFALSE 10757
10654: GO 10656
10656: DISABLE
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
10661: LD_ADDR_VAR 0 2
10665: PUSH
10666: LD_EXP 50
10670: PPUSH
10671: LD_INT 25
10673: PUSH
10674: LD_INT 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 50
10683: PUSH
10684: EMPTY
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL_OW 72
10695: ST_TO_ADDR
// if not tmp then
10696: LD_VAR 0 2
10700: NOT
10701: IFFALSE 10705
// exit ;
10703: GO 10757
// for i in tmp do
10705: LD_ADDR_VAR 0 1
10709: PUSH
10710: LD_VAR 0 2
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10755
// begin if IsInUnit ( i ) then
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 310
10727: IFFALSE 10738
// ComExitBuilding ( i ) ;
10729: LD_VAR 0 1
10733: PPUSH
10734: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
10738: LD_VAR 0 1
10742: PPUSH
10743: LD_INT 84
10745: PPUSH
10746: LD_INT 133
10748: PPUSH
10749: CALL_OW 174
// end ;
10753: GO 10715
10755: POP
10756: POP
// end ;
10757: PPOPN 2
10759: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) do var i , tmp ;
10760: LD_INT 10
10762: PPUSH
10763: LD_INT 81
10765: PUSH
10766: LD_INT 3
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PPUSH
10773: CALL_OW 70
10777: IFFALSE 10884
10779: GO 10781
10781: DISABLE
10782: LD_INT 0
10784: PPUSH
10785: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
10786: LD_ADDR_VAR 0 2
10790: PUSH
10791: LD_INT 72
10793: PUSH
10794: LD_INT 12
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: ST_TO_ADDR
// for i := 1 to 6 do
10801: LD_ADDR_VAR 0 1
10805: PUSH
10806: DOUBLE
10807: LD_INT 1
10809: DEC
10810: ST_TO_ADDR
10811: LD_INT 6
10813: PUSH
10814: FOR_TO
10815: IFFALSE 10882
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
10817: LD_VAR 0 2
10821: PPUSH
10822: LD_INT 22
10824: PUSH
10825: LD_INT 23
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 1
10834: PPUSH
10835: LD_INT 2
10837: PPUSH
10838: CALL_OW 12
10842: ARRAY
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 44
10852: PUSH
10853: LD_INT 46
10855: PUSH
10856: LD_INT 47
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 1
10866: PPUSH
10867: LD_INT 3
10869: PPUSH
10870: CALL_OW 12
10874: ARRAY
10875: PPUSH
10876: CALL_OW 185
10880: GO 10814
10882: POP
10883: POP
// end ;
10884: PPOPN 2
10886: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
10887: LD_EXP 9
10891: IFFALSE 12032
10893: GO 10895
10895: DISABLE
10896: LD_INT 0
10898: PPUSH
10899: PPUSH
10900: PPUSH
10901: PPUSH
10902: PPUSH
10903: PPUSH
// begin enable ;
10904: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
10905: LD_ADDR_VAR 0 6
10909: PUSH
10910: LD_INT 10
10912: PPUSH
10913: LD_INT 81
10915: PUSH
10916: LD_INT 3
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PPUSH
10923: CALL_OW 70
10927: ST_TO_ADDR
// if ruSpecialVehicleGroup then
10928: LD_EXP 51
10932: IFFALSE 11198
// begin for i in ruSpecialVehicleGroup do
10934: LD_ADDR_VAR 0 1
10938: PUSH
10939: LD_EXP 51
10943: PUSH
10944: FOR_IN
10945: IFFALSE 11196
// begin if enemyInBase then
10947: LD_VAR 0 6
10951: IFFALSE 11194
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
10953: LD_VAR 0 1
10957: PPUSH
10958: CALL_OW 256
10962: PUSH
10963: LD_INT 500
10965: GREATER
10966: PUSH
10967: LD_VAR 0 1
10971: PPUSH
10972: CALL_OW 110
10976: PUSH
10977: LD_INT 0
10979: EQUAL
10980: AND
10981: IFFALSE 11007
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
10983: LD_VAR 0 1
10987: PPUSH
10988: LD_VAR 0 6
10992: PPUSH
10993: LD_VAR 0 1
10997: PPUSH
10998: CALL_OW 74
11002: PPUSH
11003: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
11007: LD_VAR 0 1
11011: PPUSH
11012: CALL_OW 256
11016: PUSH
11017: LD_INT 500
11019: LESSEQUAL
11020: PUSH
11021: LD_VAR 0 1
11025: PPUSH
11026: CALL_OW 110
11030: PUSH
11031: LD_INT 0
11033: EQUAL
11034: AND
11035: IFFALSE 11064
// begin SetTag ( i , 1 ) ;
11037: LD_VAR 0 1
11041: PPUSH
11042: LD_INT 1
11044: PPUSH
11045: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
11049: LD_VAR 0 1
11053: PPUSH
11054: LD_INT 83
11056: PPUSH
11057: LD_INT 134
11059: PPUSH
11060: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
11064: LD_VAR 0 1
11068: PPUSH
11069: CALL_OW 256
11073: PUSH
11074: LD_INT 1000
11076: LESS
11077: PUSH
11078: LD_VAR 0 1
11082: PPUSH
11083: CALL_OW 110
11087: PUSH
11088: LD_INT 1
11090: EQUAL
11091: AND
11092: PUSH
11093: LD_VAR 0 1
11097: PPUSH
11098: LD_INT 83
11100: PPUSH
11101: LD_INT 134
11103: PPUSH
11104: CALL_OW 297
11108: PUSH
11109: LD_INT 6
11111: LESS
11112: AND
11113: IFFALSE 11141
// begin SetFuel ( i , 100 ) ;
11115: LD_VAR 0 1
11119: PPUSH
11120: LD_INT 100
11122: PPUSH
11123: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
11127: LD_VAR 0 1
11131: PPUSH
11132: CALL_OW 310
11136: PPUSH
11137: CALL 60645 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
11141: LD_VAR 0 1
11145: PPUSH
11146: CALL_OW 256
11150: PUSH
11151: LD_INT 1000
11153: EQUAL
11154: PUSH
11155: LD_VAR 0 1
11159: PPUSH
11160: CALL_OW 110
11164: PUSH
11165: LD_INT 1
11167: EQUAL
11168: AND
11169: PUSH
11170: LD_VAR 0 1
11174: PPUSH
11175: CALL_OW 311
11179: AND
11180: IFFALSE 11194
// SetTag ( i , 0 ) ;
11182: LD_VAR 0 1
11186: PPUSH
11187: LD_INT 0
11189: PPUSH
11190: CALL_OW 109
// end ; end ;
11194: GO 10944
11196: POP
11197: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
11198: LD_ADDR_VAR 0 5
11202: PUSH
11203: LD_EXP 50
11207: PPUSH
11208: LD_INT 25
11210: PUSH
11211: LD_INT 4
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PPUSH
11218: CALL_OW 72
11222: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11223: LD_ADDR_VAR 0 4
11227: PUSH
11228: LD_EXP 50
11232: PPUSH
11233: LD_INT 92
11235: PUSH
11236: LD_INT 92
11238: PUSH
11239: LD_INT 155
11241: PUSH
11242: LD_INT 12
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 3
11253: PUSH
11254: LD_INT 24
11256: PUSH
11257: LD_INT 1000
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 72
11276: ST_TO_ADDR
// if sci then
11277: LD_VAR 0 5
11281: IFFALSE 11414
// begin if hurt then
11283: LD_VAR 0 4
11287: IFFALSE 11360
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
11289: LD_VAR 0 5
11293: PPUSH
11294: LD_INT 3
11296: PUSH
11297: LD_INT 54
11299: PUSH
11300: EMPTY
11301: LIST
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PPUSH
11307: CALL_OW 72
11311: IFFALSE 11340
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
11313: LD_VAR 0 5
11317: PPUSH
11318: LD_INT 3
11320: PUSH
11321: LD_INT 54
11323: PUSH
11324: EMPTY
11325: LIST
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: CALL_OW 72
11335: PPUSH
11336: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
11340: LD_VAR 0 5
11344: PPUSH
11345: LD_VAR 0 4
11349: PUSH
11350: LD_INT 1
11352: ARRAY
11353: PPUSH
11354: CALL_OW 188
// end else
11358: GO 11414
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
11360: LD_VAR 0 5
11364: PPUSH
11365: LD_INT 3
11367: PUSH
11368: LD_INT 54
11370: PUSH
11371: EMPTY
11372: LIST
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PPUSH
11378: CALL_OW 72
11382: IFFALSE 11414
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
11384: LD_VAR 0 5
11388: PPUSH
11389: LD_INT 3
11391: PUSH
11392: LD_INT 54
11394: PUSH
11395: EMPTY
11396: LIST
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PPUSH
11402: CALL_OW 72
11406: PPUSH
11407: LD_INT 17
11409: PPUSH
11410: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11414: LD_ADDR_VAR 0 3
11418: PUSH
11419: LD_INT 10
11421: PPUSH
11422: LD_INT 21
11424: PUSH
11425: LD_INT 3
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 3
11434: PUSH
11435: LD_INT 24
11437: PUSH
11438: LD_INT 1000
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PPUSH
11453: CALL_OW 70
11457: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11458: LD_ADDR_VAR 0 2
11462: PUSH
11463: LD_EXP 50
11467: PPUSH
11468: LD_INT 25
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PPUSH
11478: CALL_OW 72
11482: PUSH
11483: LD_INT 22
11485: PUSH
11486: LD_INT 3
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 34
11495: PUSH
11496: LD_INT 52
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PPUSH
11507: CALL_OW 69
11511: UNION
11512: ST_TO_ADDR
// if not tmp then
11513: LD_VAR 0 2
11517: NOT
11518: IFFALSE 11522
// exit ;
11520: GO 12032
// for i in tmp do
11522: LD_ADDR_VAR 0 1
11526: PUSH
11527: LD_VAR 0 2
11531: PUSH
11532: FOR_IN
11533: IFFALSE 12030
// begin if GetClass ( i ) = 2 then
11535: LD_VAR 0 1
11539: PPUSH
11540: CALL_OW 257
11544: PUSH
11545: LD_INT 2
11547: EQUAL
11548: IFFALSE 11767
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
11550: LD_VAR 0 1
11554: PPUSH
11555: CALL_OW 256
11559: PUSH
11560: LD_INT 1000
11562: EQUAL
11563: PUSH
11564: LD_VAR 0 1
11568: PPUSH
11569: CALL_OW 110
11573: PUSH
11574: LD_INT 1
11576: EQUAL
11577: AND
11578: IFFALSE 11592
// SetTag ( i , 0 ) ;
11580: LD_VAR 0 1
11584: PPUSH
11585: LD_INT 0
11587: PPUSH
11588: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 256
11601: PUSH
11602: LD_INT 500
11604: LESSEQUAL
11605: PUSH
11606: LD_VAR 0 1
11610: PPUSH
11611: CALL_OW 110
11615: PUSH
11616: LD_INT 0
11618: EQUAL
11619: AND
11620: IFFALSE 11649
// begin SetTag ( i , 1 ) ;
11622: LD_VAR 0 1
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
11634: LD_VAR 0 1
11638: PPUSH
11639: LD_INT 92
11641: PPUSH
11642: LD_INT 155
11644: PPUSH
11645: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
11649: LD_VAR 0 3
11653: PUSH
11654: LD_VAR 0 1
11658: PPUSH
11659: CALL_OW 256
11663: PUSH
11664: LD_INT 500
11666: GREATER
11667: AND
11668: PUSH
11669: LD_VAR 0 1
11673: PPUSH
11674: CALL_OW 110
11678: PUSH
11679: LD_INT 0
11681: EQUAL
11682: AND
11683: PUSH
11684: LD_VAR 0 1
11688: PPUSH
11689: CALL_OW 314
11693: NOT
11694: AND
11695: IFFALSE 11765
// begin if b then
11697: LD_VAR 0 3
11701: IFFALSE 11733
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
11703: LD_VAR 0 1
11707: PPUSH
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 1
11715: PPUSH
11716: LD_VAR 0 3
11720: PPUSH
11721: CALL_OW 12
11725: ARRAY
11726: PPUSH
11727: CALL_OW 130
11731: GO 11765
// if GetDistUnitXY ( i , 94 , 165 ) then
11733: LD_VAR 0 1
11737: PPUSH
11738: LD_INT 94
11740: PPUSH
11741: LD_INT 165
11743: PPUSH
11744: CALL_OW 297
11748: IFFALSE 11765
// ComMoveXY ( i , 94 , 165 ) ;
11750: LD_VAR 0 1
11754: PPUSH
11755: LD_INT 94
11757: PPUSH
11758: LD_INT 165
11760: PPUSH
11761: CALL_OW 111
// end ; end else
11765: GO 12028
// if GetWeapon ( i ) = ru_crane then
11767: LD_VAR 0 1
11771: PPUSH
11772: CALL_OW 264
11776: PUSH
11777: LD_INT 52
11779: EQUAL
11780: IFFALSE 12028
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
11782: LD_VAR 0 1
11786: PPUSH
11787: CALL_OW 256
11791: PUSH
11792: LD_INT 1000
11794: EQUAL
11795: PUSH
11796: LD_VAR 0 1
11800: PPUSH
11801: CALL_OW 110
11805: PUSH
11806: LD_INT 1
11808: EQUAL
11809: AND
11810: IFFALSE 11836
// begin SetTag ( i , 0 ) ;
11812: LD_VAR 0 1
11816: PPUSH
11817: LD_INT 0
11819: PPUSH
11820: CALL_OW 109
// SetFuel ( i , 100 ) ;
11824: LD_VAR 0 1
11828: PPUSH
11829: LD_INT 100
11831: PPUSH
11832: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
11836: LD_VAR 0 1
11840: PPUSH
11841: CALL_OW 256
11845: PUSH
11846: LD_INT 500
11848: LESSEQUAL
11849: PUSH
11850: LD_VAR 0 1
11854: PPUSH
11855: CALL_OW 110
11859: PUSH
11860: LD_INT 0
11862: EQUAL
11863: AND
11864: IFFALSE 11907
// begin SetTag ( i , 1 ) ;
11866: LD_VAR 0 1
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
11878: LD_VAR 0 1
11882: PPUSH
11883: LD_INT 83
11885: PPUSH
11886: LD_INT 135
11888: PPUSH
11889: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
11893: LD_VAR 0 1
11897: PPUSH
11898: CALL_OW 310
11902: PPUSH
11903: CALL 60645 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
11907: LD_VAR 0 1
11911: PPUSH
11912: CALL_OW 256
11916: PUSH
11917: LD_INT 500
11919: GREATER
11920: PUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 110
11930: PUSH
11931: LD_INT 0
11933: EQUAL
11934: AND
11935: PUSH
11936: LD_VAR 0 1
11940: PPUSH
11941: CALL_OW 311
11945: AND
11946: PUSH
11947: LD_VAR 0 1
11951: PPUSH
11952: CALL_OW 314
11956: NOT
11957: AND
11958: IFFALSE 12028
// begin if b then
11960: LD_VAR 0 3
11964: IFFALSE 11996
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
11966: LD_VAR 0 1
11970: PPUSH
11971: LD_VAR 0 3
11975: PUSH
11976: LD_INT 1
11978: PPUSH
11979: LD_VAR 0 3
11983: PPUSH
11984: CALL_OW 12
11988: ARRAY
11989: PPUSH
11990: CALL_OW 130
11994: GO 12028
// if GetDistUnitXY ( i , 94 , 165 ) then
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_INT 94
12003: PPUSH
12004: LD_INT 165
12006: PPUSH
12007: CALL_OW 297
12011: IFFALSE 12028
// ComMoveXY ( i , 94 , 165 ) ;
12013: LD_VAR 0 1
12017: PPUSH
12018: LD_INT 94
12020: PPUSH
12021: LD_INT 165
12023: PPUSH
12024: CALL_OW 111
// end ; end ; end ;
12028: GO 11532
12030: POP
12031: POP
// end ;
12032: PPOPN 6
12034: END
// every 6 6$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
12035: LD_EXP 21
12039: NOT
12040: PUSH
12041: LD_EXP 25
12045: NOT
12046: AND
12047: IFFALSE 12916
12049: GO 12051
12051: DISABLE
12052: LD_INT 0
12054: PPUSH
12055: PPUSH
12056: PPUSH
12057: PPUSH
// begin enable ;
12058: ENABLE
// if Prob ( 40 ) then
12059: LD_INT 40
12061: PPUSH
12062: CALL_OW 13
12066: IFFALSE 12082
// waveStrength := waveStrength + 1 ;
12068: LD_ADDR_EXP 53
12072: PUSH
12073: LD_EXP 53
12077: PUSH
12078: LD_INT 1
12080: PLUS
12081: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 ] [ Difficulty ] then
12082: LD_EXP 53
12086: PUSH
12087: LD_INT 4
12089: PUSH
12090: LD_INT 5
12092: PUSH
12093: LD_INT 6
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: PUSH
12101: LD_OWVAR 67
12105: ARRAY
12106: GREATER
12107: IFFALSE 12140
// begin waveStrength := waveStrength + Difficulty ;
12109: LD_ADDR_EXP 53
12113: PUSH
12114: LD_EXP 53
12118: PUSH
12119: LD_OWVAR 67
12123: PLUS
12124: ST_TO_ADDR
// disableAttackOnHeike := true ;
12125: LD_ADDR_EXP 25
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
// wait ( 3 3$00 ) ;
12133: LD_INT 6300
12135: PPUSH
12136: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
12140: LD_EXP 25
12144: PUSH
12145: LD_OWVAR 67
12149: PUSH
12150: LD_INT 1
12152: GREATER
12153: AND
12154: IFFALSE 12359
// begin for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
12156: LD_ADDR_VAR 0 1
12160: PUSH
12161: DOUBLE
12162: LD_INT 1
12164: DEC
12165: ST_TO_ADDR
12166: LD_INT 3
12168: PUSH
12169: LD_INT 3
12171: PUSH
12172: LD_INT 4
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: PUSH
12180: LD_OWVAR 67
12184: ARRAY
12185: PUSH
12186: FOR_TO
12187: IFFALSE 12357
// begin InitHc ;
12189: CALL_OW 19
// InitVc ;
12193: CALL_OW 20
// uc_side := 3 ;
12197: LD_ADDR_OWVAR 20
12201: PUSH
12202: LD_INT 3
12204: ST_TO_ADDR
// uc_nation := 3 ;
12205: LD_ADDR_OWVAR 21
12209: PUSH
12210: LD_INT 3
12212: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
12213: LD_INT 0
12215: PPUSH
12216: LD_INT 1
12218: PPUSH
12219: LD_OWVAR 67
12223: PUSH
12224: LD_INT 2
12226: PLUS
12227: PPUSH
12228: CALL_OW 380
// un := CreateHuman ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: CALL_OW 44
12241: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
12242: LD_VAR 0 2
12246: PPUSH
12247: LD_INT 160
12249: PPUSH
12250: LD_INT 3
12252: PPUSH
12253: LD_INT 2
12255: PPUSH
12256: LD_INT 0
12258: PPUSH
12259: CALL 60965 0 5
// SetClass ( un , class_bazooker ) ;
12263: LD_VAR 0 2
12267: PPUSH
12268: LD_INT 9
12270: PPUSH
12271: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
12275: LD_ADDR_EXP 52
12279: PUSH
12280: LD_EXP 52
12284: PPUSH
12285: LD_EXP 52
12289: PUSH
12290: LD_INT 1
12292: PLUS
12293: PPUSH
12294: LD_VAR 0 2
12298: PPUSH
12299: CALL_OW 1
12303: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
12304: LD_VAR 0 2
12308: PPUSH
12309: LD_INT 177
12311: PPUSH
12312: LD_INT 17
12314: PPUSH
12315: CALL_OW 111
// wait ( 0 0$2 ) ;
12319: LD_INT 70
12321: PPUSH
12322: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
12326: LD_ADDR_VAR 0 4
12330: PUSH
12331: LD_VAR 0 4
12335: PPUSH
12336: LD_VAR 0 4
12340: PUSH
12341: LD_INT 1
12343: PLUS
12344: PPUSH
12345: LD_VAR 0 2
12349: PPUSH
12350: CALL_OW 1
12354: ST_TO_ADDR
// end ;
12355: GO 12186
12357: POP
12358: POP
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + waveStrength do
12359: LD_ADDR_VAR 0 1
12363: PUSH
12364: DOUBLE
12365: LD_INT 1
12367: DEC
12368: ST_TO_ADDR
12369: LD_INT 2
12371: PUSH
12372: LD_INT 3
12374: PUSH
12375: LD_INT 4
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: PUSH
12383: LD_OWVAR 67
12387: ARRAY
12388: PUSH
12389: LD_EXP 53
12393: PLUS
12394: PUSH
12395: FOR_TO
12396: IFFALSE 12705
// begin InitHc ;
12398: CALL_OW 19
// InitVc ;
12402: CALL_OW 20
// uc_side := 3 ;
12406: LD_ADDR_OWVAR 20
12410: PUSH
12411: LD_INT 3
12413: ST_TO_ADDR
// uc_nation := 3 ;
12414: LD_ADDR_OWVAR 21
12418: PUSH
12419: LD_INT 3
12421: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
12422: LD_INT 22
12424: PUSH
12425: LD_INT 23
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 1
12434: PPUSH
12435: LD_INT 2
12437: PPUSH
12438: CALL_OW 12
12442: ARRAY
12443: PPUSH
12444: LD_INT 1
12446: PPUSH
12447: LD_INT 1
12449: PPUSH
12450: LD_INT 44
12452: PUSH
12453: LD_INT 45
12455: PUSH
12456: LD_INT 43
12458: PUSH
12459: LD_INT 42
12461: PUSH
12462: LD_INT 44
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 1
12474: PPUSH
12475: LD_INT 5
12477: PPUSH
12478: CALL_OW 12
12482: ARRAY
12483: PPUSH
12484: LD_INT 99
12486: PPUSH
12487: CALL 27160 0 5
// veh := CreateVehicle ;
12491: LD_ADDR_VAR 0 3
12495: PUSH
12496: CALL_OW 45
12500: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
12501: LD_VAR 0 3
12505: PPUSH
12506: LD_INT 160
12508: PPUSH
12509: LD_INT 3
12511: PPUSH
12512: LD_INT 2
12514: PPUSH
12515: LD_INT 0
12517: PPUSH
12518: CALL 60965 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
12522: LD_ADDR_EXP 52
12526: PUSH
12527: LD_EXP 52
12531: PPUSH
12532: LD_EXP 52
12536: PUSH
12537: LD_INT 1
12539: PLUS
12540: PPUSH
12541: LD_VAR 0 3
12545: PPUSH
12546: CALL_OW 1
12550: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
12551: LD_INT 0
12553: PPUSH
12554: LD_INT 3
12556: PPUSH
12557: LD_OWVAR 67
12561: PUSH
12562: LD_INT 2
12564: PLUS
12565: PPUSH
12566: CALL_OW 380
// un := CreateHuman ;
12570: LD_ADDR_VAR 0 2
12574: PUSH
12575: CALL_OW 44
12579: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12580: LD_VAR 0 2
12584: PPUSH
12585: LD_VAR 0 3
12589: PPUSH
12590: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
12594: LD_ADDR_EXP 52
12598: PUSH
12599: LD_EXP 52
12603: PPUSH
12604: LD_EXP 52
12608: PUSH
12609: LD_INT 1
12611: PLUS
12612: PPUSH
12613: LD_VAR 0 2
12617: PPUSH
12618: CALL_OW 1
12622: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
12623: LD_VAR 0 2
12627: PPUSH
12628: LD_INT 177
12630: PPUSH
12631: LD_INT 17
12633: PPUSH
12634: CALL_OW 111
// wait ( 0 0$2 ) ;
12638: LD_INT 70
12640: PPUSH
12641: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
12645: LD_ADDR_VAR 0 4
12649: PUSH
12650: LD_VAR 0 4
12654: PPUSH
12655: LD_VAR 0 4
12659: PUSH
12660: LD_INT 1
12662: PLUS
12663: PPUSH
12664: LD_VAR 0 3
12668: PPUSH
12669: CALL_OW 1
12673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
12674: LD_ADDR_VAR 0 4
12678: PUSH
12679: LD_VAR 0 4
12683: PPUSH
12684: LD_VAR 0 4
12688: PUSH
12689: LD_INT 1
12691: PLUS
12692: PPUSH
12693: LD_VAR 0 2
12697: PPUSH
12698: CALL_OW 1
12702: ST_TO_ADDR
// end ;
12703: GO 12395
12705: POP
12706: POP
// for i in tmp do
12707: LD_ADDR_VAR 0 1
12711: PUSH
12712: LD_VAR 0 4
12716: PUSH
12717: FOR_IN
12718: IFFALSE 12808
// begin if Prob ( 50 ) then
12720: LD_INT 50
12722: PPUSH
12723: CALL_OW 13
12727: IFFALSE 12746
// ComAgressiveMove ( i , 206 , 73 ) else
12729: LD_VAR 0 1
12733: PPUSH
12734: LD_INT 206
12736: PPUSH
12737: LD_INT 73
12739: PPUSH
12740: CALL_OW 114
12744: GO 12806
// begin ComAgressiveMove ( i , 206 , 73 ) ;
12746: LD_VAR 0 1
12750: PPUSH
12751: LD_INT 206
12753: PPUSH
12754: LD_INT 73
12756: PPUSH
12757: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
12761: LD_VAR 0 1
12765: PPUSH
12766: LD_INT 257
12768: PPUSH
12769: LD_INT 105
12771: PPUSH
12772: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
12776: LD_VAR 0 1
12780: PPUSH
12781: LD_INT 227
12783: PPUSH
12784: LD_INT 97
12786: PPUSH
12787: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
12791: LD_VAR 0 1
12795: PPUSH
12796: LD_INT 206
12798: PPUSH
12799: LD_INT 73
12801: PPUSH
12802: CALL_OW 174
// end ; end ;
12806: GO 12717
12808: POP
12809: POP
// repeat wait ( 0 0$1 ) ;
12810: LD_INT 35
12812: PPUSH
12813: CALL_OW 67
// for i in tmp do
12817: LD_ADDR_VAR 0 1
12821: PUSH
12822: LD_VAR 0 4
12826: PUSH
12827: FOR_IN
12828: IFFALSE 12907
// if IsDead ( i ) then
12830: LD_VAR 0 1
12834: PPUSH
12835: CALL_OW 301
12839: IFFALSE 12859
// tmp := tmp diff i else
12841: LD_ADDR_VAR 0 4
12845: PUSH
12846: LD_VAR 0 4
12850: PUSH
12851: LD_VAR 0 1
12855: DIFF
12856: ST_TO_ADDR
12857: GO 12905
// if not HasTask ( i ) then
12859: LD_VAR 0 1
12863: PPUSH
12864: CALL_OW 314
12868: NOT
12869: IFFALSE 12905
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
12871: LD_VAR 0 1
12875: PPUSH
12876: LD_INT 81
12878: PUSH
12879: LD_INT 3
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PPUSH
12886: CALL_OW 69
12890: PPUSH
12891: LD_VAR 0 1
12895: PPUSH
12896: CALL_OW 74
12900: PPUSH
12901: CALL_OW 115
12905: GO 12827
12907: POP
12908: POP
// until not tmp ;
12909: LD_VAR 0 4
12913: NOT
12914: IFFALSE 12810
// end ;
12916: PPOPN 4
12918: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
12919: LD_EXP 21
12923: NOT
12924: PUSH
12925: LD_EXP 3
12929: AND
12930: PUSH
12931: LD_EXP 14
12935: NOT
12936: AND
12937: IFFALSE 13767
12939: GO 12941
12941: DISABLE
12942: LD_INT 0
12944: PPUSH
12945: PPUSH
12946: PPUSH
12947: PPUSH
// begin enable ;
12948: ENABLE
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
12949: LD_ADDR_VAR 0 1
12953: PUSH
12954: DOUBLE
12955: LD_INT 1
12957: DEC
12958: ST_TO_ADDR
12959: LD_INT 2
12961: PUSH
12962: LD_INT 3
12964: PUSH
12965: LD_INT 3
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: LD_OWVAR 67
12977: ARRAY
12978: PUSH
12979: FOR_TO
12980: IFFALSE 13285
// begin InitHc ;
12982: CALL_OW 19
// InitVc ;
12986: CALL_OW 20
// uc_side := 3 ;
12990: LD_ADDR_OWVAR 20
12994: PUSH
12995: LD_INT 3
12997: ST_TO_ADDR
// uc_nation := 3 ;
12998: LD_ADDR_OWVAR 21
13002: PUSH
13003: LD_INT 3
13005: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13006: LD_INT 22
13008: PUSH
13009: LD_INT 23
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 1
13018: PPUSH
13019: LD_INT 2
13021: PPUSH
13022: CALL_OW 12
13026: ARRAY
13027: PPUSH
13028: LD_INT 1
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: LD_INT 44
13036: PUSH
13037: LD_INT 45
13039: PUSH
13040: LD_INT 43
13042: PUSH
13043: LD_INT 42
13045: PUSH
13046: LD_INT 44
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 1
13058: PPUSH
13059: LD_INT 5
13061: PPUSH
13062: CALL_OW 12
13066: ARRAY
13067: PPUSH
13068: LD_INT 99
13070: PPUSH
13071: CALL 27160 0 5
// veh := CreateVehicle ;
13075: LD_ADDR_VAR 0 3
13079: PUSH
13080: CALL_OW 45
13084: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
13085: LD_VAR 0 3
13089: PPUSH
13090: LD_INT 5
13092: PPUSH
13093: LD_INT 3
13095: PPUSH
13096: LD_INT 2
13098: PPUSH
13099: LD_INT 0
13101: PPUSH
13102: CALL 60965 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
13106: LD_ADDR_EXP 52
13110: PUSH
13111: LD_EXP 52
13115: PPUSH
13116: LD_EXP 52
13120: PUSH
13121: LD_INT 1
13123: PLUS
13124: PPUSH
13125: LD_VAR 0 3
13129: PPUSH
13130: CALL_OW 1
13134: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
13135: LD_INT 0
13137: PPUSH
13138: LD_INT 3
13140: PPUSH
13141: LD_OWVAR 67
13145: PPUSH
13146: CALL_OW 380
// un := CreateHuman ;
13150: LD_ADDR_VAR 0 2
13154: PUSH
13155: CALL_OW 44
13159: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13160: LD_VAR 0 2
13164: PPUSH
13165: LD_VAR 0 3
13169: PPUSH
13170: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13174: LD_ADDR_EXP 52
13178: PUSH
13179: LD_EXP 52
13183: PPUSH
13184: LD_EXP 52
13188: PUSH
13189: LD_INT 1
13191: PLUS
13192: PPUSH
13193: LD_VAR 0 2
13197: PPUSH
13198: CALL_OW 1
13202: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
13203: LD_VAR 0 2
13207: PPUSH
13208: LD_INT 23
13210: PPUSH
13211: LD_INT 7
13213: PPUSH
13214: CALL_OW 111
// wait ( 0 0$2 ) ;
13218: LD_INT 70
13220: PPUSH
13221: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
13225: LD_ADDR_VAR 0 4
13229: PUSH
13230: LD_VAR 0 4
13234: PPUSH
13235: LD_VAR 0 4
13239: PUSH
13240: LD_INT 1
13242: PLUS
13243: PPUSH
13244: LD_VAR 0 3
13248: PPUSH
13249: CALL_OW 1
13253: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13254: LD_ADDR_VAR 0 4
13258: PUSH
13259: LD_VAR 0 4
13263: PPUSH
13264: LD_VAR 0 4
13268: PUSH
13269: LD_INT 1
13271: PLUS
13272: PPUSH
13273: LD_VAR 0 2
13277: PPUSH
13278: CALL_OW 1
13282: ST_TO_ADDR
// end ;
13283: GO 12979
13285: POP
13286: POP
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
13287: LD_ADDR_VAR 0 1
13291: PUSH
13292: DOUBLE
13293: LD_INT 1
13295: DEC
13296: ST_TO_ADDR
13297: LD_INT 2
13299: PUSH
13300: LD_INT 3
13302: PUSH
13303: LD_INT 4
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: PUSH
13311: LD_OWVAR 67
13315: ARRAY
13316: PUSH
13317: FOR_TO
13318: IFFALSE 13627
// begin InitHc ;
13320: CALL_OW 19
// InitVc ;
13324: CALL_OW 20
// uc_side := 3 ;
13328: LD_ADDR_OWVAR 20
13332: PUSH
13333: LD_INT 3
13335: ST_TO_ADDR
// uc_nation := 3 ;
13336: LD_ADDR_OWVAR 21
13340: PUSH
13341: LD_INT 3
13343: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
13344: LD_INT 22
13346: PUSH
13347: LD_INT 23
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: LD_INT 1
13356: PPUSH
13357: LD_INT 2
13359: PPUSH
13360: CALL_OW 12
13364: ARRAY
13365: PPUSH
13366: LD_INT 1
13368: PPUSH
13369: LD_INT 1
13371: PPUSH
13372: LD_INT 44
13374: PUSH
13375: LD_INT 45
13377: PUSH
13378: LD_INT 43
13380: PUSH
13381: LD_INT 42
13383: PUSH
13384: LD_INT 44
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 1
13396: PPUSH
13397: LD_INT 5
13399: PPUSH
13400: CALL_OW 12
13404: ARRAY
13405: PPUSH
13406: LD_INT 99
13408: PPUSH
13409: CALL 27160 0 5
// veh := CreateVehicle ;
13413: LD_ADDR_VAR 0 3
13417: PUSH
13418: CALL_OW 45
13422: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
13423: LD_VAR 0 3
13427: PPUSH
13428: LD_INT 127
13430: PPUSH
13431: LD_INT 243
13433: PPUSH
13434: LD_INT 0
13436: PPUSH
13437: LD_INT 0
13439: PPUSH
13440: CALL 60965 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
13444: LD_ADDR_EXP 52
13448: PUSH
13449: LD_EXP 52
13453: PPUSH
13454: LD_EXP 52
13458: PUSH
13459: LD_INT 1
13461: PLUS
13462: PPUSH
13463: LD_VAR 0 3
13467: PPUSH
13468: CALL_OW 1
13472: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
13473: LD_INT 0
13475: PPUSH
13476: LD_INT 3
13478: PPUSH
13479: LD_OWVAR 67
13483: PUSH
13484: LD_INT 2
13486: PLUS
13487: PPUSH
13488: CALL_OW 380
// un := CreateHuman ;
13492: LD_ADDR_VAR 0 2
13496: PUSH
13497: CALL_OW 44
13501: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13502: LD_VAR 0 2
13506: PPUSH
13507: LD_VAR 0 3
13511: PPUSH
13512: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13516: LD_ADDR_EXP 52
13520: PUSH
13521: LD_EXP 52
13525: PPUSH
13526: LD_EXP 52
13530: PUSH
13531: LD_INT 1
13533: PLUS
13534: PPUSH
13535: LD_VAR 0 2
13539: PPUSH
13540: CALL_OW 1
13544: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
13545: LD_VAR 0 2
13549: PPUSH
13550: LD_INT 130
13552: PPUSH
13553: LD_INT 233
13555: PPUSH
13556: CALL_OW 111
// wait ( 0 0$2 ) ;
13560: LD_INT 70
13562: PPUSH
13563: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
13567: LD_ADDR_VAR 0 4
13571: PUSH
13572: LD_VAR 0 4
13576: PPUSH
13577: LD_VAR 0 4
13581: PUSH
13582: LD_INT 1
13584: PLUS
13585: PPUSH
13586: LD_VAR 0 3
13590: PPUSH
13591: CALL_OW 1
13595: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
13596: LD_ADDR_VAR 0 4
13600: PUSH
13601: LD_VAR 0 4
13605: PPUSH
13606: LD_VAR 0 4
13610: PUSH
13611: LD_INT 1
13613: PLUS
13614: PPUSH
13615: LD_VAR 0 2
13619: PPUSH
13620: CALL_OW 1
13624: ST_TO_ADDR
// end ;
13625: GO 13317
13627: POP
13628: POP
// for i in tmp do
13629: LD_ADDR_VAR 0 1
13633: PUSH
13634: LD_VAR 0 4
13638: PUSH
13639: FOR_IN
13640: IFFALSE 13659
// begin ComAgressiveMove ( i , 76 , 49 ) ;
13642: LD_VAR 0 1
13646: PPUSH
13647: LD_INT 76
13649: PPUSH
13650: LD_INT 49
13652: PPUSH
13653: CALL_OW 114
// end ;
13657: GO 13639
13659: POP
13660: POP
// repeat wait ( 0 0$1 ) ;
13661: LD_INT 35
13663: PPUSH
13664: CALL_OW 67
// for i in tmp do
13668: LD_ADDR_VAR 0 1
13672: PUSH
13673: LD_VAR 0 4
13677: PUSH
13678: FOR_IN
13679: IFFALSE 13758
// if IsDead ( i ) then
13681: LD_VAR 0 1
13685: PPUSH
13686: CALL_OW 301
13690: IFFALSE 13710
// tmp := tmp diff i else
13692: LD_ADDR_VAR 0 4
13696: PUSH
13697: LD_VAR 0 4
13701: PUSH
13702: LD_VAR 0 1
13706: DIFF
13707: ST_TO_ADDR
13708: GO 13756
// if not HasTask ( i ) then
13710: LD_VAR 0 1
13714: PPUSH
13715: CALL_OW 314
13719: NOT
13720: IFFALSE 13756
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
13722: LD_VAR 0 1
13726: PPUSH
13727: LD_INT 81
13729: PUSH
13730: LD_INT 3
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PPUSH
13737: CALL_OW 69
13741: PPUSH
13742: LD_VAR 0 1
13746: PPUSH
13747: CALL_OW 74
13751: PPUSH
13752: CALL_OW 115
13756: GO 13678
13758: POP
13759: POP
// until not tmp ;
13760: LD_VAR 0 4
13764: NOT
13765: IFFALSE 13661
// end ;
13767: PPOPN 4
13769: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
13770: LD_EXP 6
13774: IFFALSE 14245
13776: GO 13778
13778: DISABLE
13779: LD_INT 0
13781: PPUSH
13782: PPUSH
13783: PPUSH
13784: PPUSH
// begin wait ( 3 3$00 ) ;
13785: LD_INT 6300
13787: PPUSH
13788: CALL_OW 67
// for i := 1 to 3 do
13792: LD_ADDR_VAR 0 1
13796: PUSH
13797: DOUBLE
13798: LD_INT 1
13800: DEC
13801: ST_TO_ADDR
13802: LD_INT 3
13804: PUSH
13805: FOR_TO
13806: IFFALSE 14105
// begin InitHc ;
13808: CALL_OW 19
// InitVc ;
13812: CALL_OW 20
// uc_side := 3 ;
13816: LD_ADDR_OWVAR 20
13820: PUSH
13821: LD_INT 3
13823: ST_TO_ADDR
// uc_nation := 3 ;
13824: LD_ADDR_OWVAR 21
13828: PUSH
13829: LD_INT 3
13831: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
13832: LD_INT 22
13834: PUSH
13835: LD_INT 23
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 1
13844: PPUSH
13845: LD_INT 2
13847: PPUSH
13848: CALL_OW 12
13852: ARRAY
13853: PPUSH
13854: LD_INT 1
13856: PPUSH
13857: LD_INT 1
13859: PPUSH
13860: LD_INT 44
13862: PUSH
13863: LD_INT 43
13865: PUSH
13866: LD_INT 42
13868: PUSH
13869: LD_INT 44
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 1
13880: PPUSH
13881: LD_INT 4
13883: PPUSH
13884: CALL_OW 12
13888: ARRAY
13889: PPUSH
13890: LD_INT 99
13892: PPUSH
13893: CALL 27160 0 5
// veh := CreateVehicle ;
13897: LD_ADDR_VAR 0 3
13901: PUSH
13902: CALL_OW 45
13906: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
13907: LD_VAR 0 3
13911: PPUSH
13912: LD_INT 293
13914: PPUSH
13915: LD_INT 246
13917: PPUSH
13918: LD_INT 5
13920: PPUSH
13921: LD_INT 0
13923: PPUSH
13924: CALL 60965 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
13928: LD_ADDR_EXP 52
13932: PUSH
13933: LD_EXP 52
13937: PPUSH
13938: LD_EXP 52
13942: PUSH
13943: LD_INT 1
13945: PLUS
13946: PPUSH
13947: LD_VAR 0 3
13951: PPUSH
13952: CALL_OW 1
13956: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
13957: LD_INT 0
13959: PPUSH
13960: LD_INT 3
13962: PPUSH
13963: LD_INT 3
13965: PPUSH
13966: CALL_OW 380
// un := CreateHuman ;
13970: LD_ADDR_VAR 0 2
13974: PUSH
13975: CALL_OW 44
13979: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13980: LD_VAR 0 2
13984: PPUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
13994: LD_ADDR_EXP 52
13998: PUSH
13999: LD_EXP 52
14003: PPUSH
14004: LD_EXP 52
14008: PUSH
14009: LD_INT 1
14011: PLUS
14012: PPUSH
14013: LD_VAR 0 2
14017: PPUSH
14018: CALL_OW 1
14022: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
14023: LD_VAR 0 2
14027: PPUSH
14028: LD_INT 273
14030: PPUSH
14031: LD_INT 227
14033: PPUSH
14034: CALL_OW 111
// wait ( 0 0$2 ) ;
14038: LD_INT 70
14040: PPUSH
14041: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14045: LD_ADDR_VAR 0 4
14049: PUSH
14050: LD_VAR 0 4
14054: PPUSH
14055: LD_VAR 0 4
14059: PUSH
14060: LD_INT 1
14062: PLUS
14063: PPUSH
14064: LD_VAR 0 3
14068: PPUSH
14069: CALL_OW 1
14073: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14074: LD_ADDR_VAR 0 4
14078: PUSH
14079: LD_VAR 0 4
14083: PPUSH
14084: LD_VAR 0 4
14088: PUSH
14089: LD_INT 1
14091: PLUS
14092: PPUSH
14093: LD_VAR 0 2
14097: PPUSH
14098: CALL_OW 1
14102: ST_TO_ADDR
// end ;
14103: GO 13805
14105: POP
14106: POP
// for i in tmp do
14107: LD_ADDR_VAR 0 1
14111: PUSH
14112: LD_VAR 0 4
14116: PUSH
14117: FOR_IN
14118: IFFALSE 14137
// begin ComAgressiveMove ( i , 330 , 231 ) ;
14120: LD_VAR 0 1
14124: PPUSH
14125: LD_INT 330
14127: PPUSH
14128: LD_INT 231
14130: PPUSH
14131: CALL_OW 114
// end ;
14135: GO 14117
14137: POP
14138: POP
// repeat wait ( 0 0$1 ) ;
14139: LD_INT 35
14141: PPUSH
14142: CALL_OW 67
// for i in tmp do
14146: LD_ADDR_VAR 0 1
14150: PUSH
14151: LD_VAR 0 4
14155: PUSH
14156: FOR_IN
14157: IFFALSE 14236
// if IsDead ( i ) then
14159: LD_VAR 0 1
14163: PPUSH
14164: CALL_OW 301
14168: IFFALSE 14188
// tmp := tmp diff i else
14170: LD_ADDR_VAR 0 4
14174: PUSH
14175: LD_VAR 0 4
14179: PUSH
14180: LD_VAR 0 1
14184: DIFF
14185: ST_TO_ADDR
14186: GO 14234
// if not HasTask ( i ) then
14188: LD_VAR 0 1
14192: PPUSH
14193: CALL_OW 314
14197: NOT
14198: IFFALSE 14234
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14200: LD_VAR 0 1
14204: PPUSH
14205: LD_INT 81
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PPUSH
14215: CALL_OW 69
14219: PPUSH
14220: LD_VAR 0 1
14224: PPUSH
14225: CALL_OW 74
14229: PPUSH
14230: CALL_OW 115
14234: GO 14156
14236: POP
14237: POP
// until not tmp ;
14238: LD_VAR 0 4
14242: NOT
14243: IFFALSE 14139
// end ;
14245: PPOPN 4
14247: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
14248: LD_INT 3
14250: PUSH
14251: LD_INT 22
14253: PUSH
14254: LD_INT 2
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 32
14267: PUSH
14268: LD_INT 1
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 69
14283: IFFALSE 14367
14285: GO 14287
14287: DISABLE
14288: LD_INT 0
14290: PPUSH
// begin enable ;
14291: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
14292: LD_ADDR_VAR 0 1
14296: PUSH
14297: LD_INT 3
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 32
14316: PUSH
14317: LD_INT 1
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PPUSH
14328: CALL_OW 69
14332: PUSH
14333: FOR_IN
14334: IFFALSE 14365
// if GetFuel ( i ) < 3 then
14336: LD_VAR 0 1
14340: PPUSH
14341: CALL_OW 261
14345: PUSH
14346: LD_INT 3
14348: LESS
14349: IFFALSE 14363
// SetFuel ( i , 3 ) ;
14351: LD_VAR 0 1
14355: PPUSH
14356: LD_INT 3
14358: PPUSH
14359: CALL_OW 240
14363: GO 14333
14365: POP
14366: POP
// end ; end_of_file
14367: PPOPN 1
14369: END
// export function Action ; begin
14370: LD_INT 0
14372: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
14373: LD_INT 2
14375: PPUSH
14376: LD_INT 4
14378: PPUSH
14379: CALL_OW 332
// Video ( true ) ;
14383: LD_INT 1
14385: PPUSH
14386: CALL 59006 0 1
// CenterNowOnXY ( 213 , 89 ) ;
14390: LD_INT 213
14392: PPUSH
14393: LD_INT 89
14395: PPUSH
14396: CALL_OW 86
// if not debug then
14400: LD_EXP 1
14404: NOT
14405: IFFALSE 14439
// begin if Kaia and Olaf then
14407: LD_EXP 31
14411: PUSH
14412: LD_EXP 35
14416: AND
14417: IFFALSE 14423
// SceneKaiaWithOlaf ;
14419: CALL 14462 0 0
// if Givi and Kamil then
14423: LD_EXP 27
14427: PUSH
14428: LD_EXP 30
14432: AND
14433: IFFALSE 14439
// SceneWithGiviAndKamil ;
14435: CALL 15033 0 0
// end ; Video ( false ) ;
14439: LD_INT 0
14441: PPUSH
14442: CALL 59006 0 1
// ChangeMissionObjectives ( M1 ) ;
14446: LD_STRING M1
14448: PPUSH
14449: CALL_OW 337
// SaveForQuickRestart ;
14453: CALL_OW 22
// end ;
14457: LD_VAR 0 1
14461: RET
// export function SceneKaiaWithOlaf ; begin
14462: LD_INT 0
14464: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
14465: LD_INT 22
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 30
14477: PUSH
14478: LD_INT 3
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PPUSH
14489: CALL_OW 69
14493: PPUSH
14494: LD_INT 14
14496: PPUSH
14497: LD_INT 1
14499: PPUSH
14500: LD_INT 1
14502: PPUSH
14503: LD_INT 26
14505: PPUSH
14506: CALL_OW 125
// wait ( 0 0$1 ) ;
14510: LD_INT 35
14512: PPUSH
14513: CALL_OW 67
// Say ( Kaia , DK-06-Mem-1 ) ;
14517: LD_EXP 31
14521: PPUSH
14522: LD_STRING DK-06-Mem-1
14524: PPUSH
14525: CALL_OW 88
// Say ( Kaia , DK-06-Mem-2 ) ;
14529: LD_EXP 31
14533: PPUSH
14534: LD_STRING DK-06-Mem-2
14536: PPUSH
14537: CALL_OW 88
// Say ( Olaf , DO-06-Mem-3 ) ;
14541: LD_EXP 35
14545: PPUSH
14546: LD_STRING DO-06-Mem-3
14548: PPUSH
14549: CALL_OW 88
// Say ( Kaia , DK-06-Mem-4 ) ;
14553: LD_EXP 31
14557: PPUSH
14558: LD_STRING DK-06-Mem-4
14560: PPUSH
14561: CALL_OW 88
// Say ( Olaf , DO-06-Mem-5 ) ;
14565: LD_EXP 35
14569: PPUSH
14570: LD_STRING DO-06-Mem-5
14572: PPUSH
14573: CALL_OW 88
// wait ( 0 0$2 ) ;
14577: LD_INT 70
14579: PPUSH
14580: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
14584: LD_INT 22
14586: PUSH
14587: LD_INT 2
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 30
14596: PUSH
14597: LD_INT 3
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PPUSH
14608: CALL_OW 69
14612: PPUSH
14613: LD_INT 90
14615: PPUSH
14616: CALL_OW 329
// Say ( Olaf , DO-06-Mem-6 ) ;
14620: LD_EXP 35
14624: PPUSH
14625: LD_STRING DO-06-Mem-6
14627: PPUSH
14628: CALL_OW 88
// Say ( Kaia , DK-06-Mem-7 ) ;
14632: LD_EXP 31
14636: PPUSH
14637: LD_STRING DK-06-Mem-7
14639: PPUSH
14640: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
14644: LD_EXP 26
14648: PPUSH
14649: LD_EXP 31
14653: PPUSH
14654: CALL_OW 119
// Say ( Heike , DH-06-Mem-8 ) ;
14658: LD_EXP 26
14662: PPUSH
14663: LD_STRING DH-06-Mem-8
14665: PPUSH
14666: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
14670: LD_EXP 31
14674: PUSH
14675: LD_EXP 35
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PPUSH
14684: LD_EXP 26
14688: PPUSH
14689: CALL_OW 119
// Say ( Olaf , DO-06-Mem-9 ) ;
14693: LD_EXP 35
14697: PPUSH
14698: LD_STRING DO-06-Mem-9
14700: PPUSH
14701: CALL_OW 88
// Say ( Olaf , DO-06-Mem-10 ) ;
14705: LD_EXP 35
14709: PPUSH
14710: LD_STRING DO-06-Mem-10
14712: PPUSH
14713: CALL_OW 88
// Say ( Olaf , DO-06-Mem-11 ) ;
14717: LD_EXP 35
14721: PPUSH
14722: LD_STRING DO-06-Mem-11
14724: PPUSH
14725: CALL_OW 88
// Say ( Olaf , DO-06-Mem-12 ) ;
14729: LD_EXP 35
14733: PPUSH
14734: LD_STRING DO-06-Mem-12
14736: PPUSH
14737: CALL_OW 88
// Say ( Kaia , DK-06-Mem-13 ) ;
14741: LD_EXP 31
14745: PPUSH
14746: LD_STRING DK-06-Mem-13
14748: PPUSH
14749: CALL_OW 88
// Say ( Kaia , DK-06-Mem-14 ) ;
14753: LD_EXP 31
14757: PPUSH
14758: LD_STRING DK-06-Mem-14
14760: PPUSH
14761: CALL_OW 88
// Say ( Kaia , DK-06-Mem-15 ) ;
14765: LD_EXP 31
14769: PPUSH
14770: LD_STRING DK-06-Mem-15
14772: PPUSH
14773: CALL_OW 88
// Say ( Kaia , DK-06-Mem-16 ) ;
14777: LD_EXP 31
14781: PPUSH
14782: LD_STRING DK-06-Mem-16
14784: PPUSH
14785: CALL_OW 88
// Say ( Kaia , DK-06-Mem-17 ) ;
14789: LD_EXP 31
14793: PPUSH
14794: LD_STRING DK-06-Mem-17
14796: PPUSH
14797: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
14801: LD_EXP 35
14805: PPUSH
14806: LD_EXP 31
14810: PPUSH
14811: CALL_OW 119
// Say ( Olaf , DO-06-Mem-18 ) ;
14815: LD_EXP 35
14819: PPUSH
14820: LD_STRING DO-06-Mem-18
14822: PPUSH
14823: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
14827: LD_EXP 31
14831: PPUSH
14832: LD_EXP 35
14836: PPUSH
14837: CALL_OW 119
// Say ( Kaia , DK-06-Mem-19 ) ;
14841: LD_EXP 31
14845: PPUSH
14846: LD_STRING DK-06-Mem-19
14848: PPUSH
14849: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
14853: LD_EXP 35
14857: PPUSH
14858: LD_INT 214
14860: PPUSH
14861: LD_INT 86
14863: PPUSH
14864: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
14868: LD_EXP 35
14872: PPUSH
14873: LD_EXP 31
14877: PPUSH
14878: CALL_OW 179
// if Givi then
14882: LD_EXP 27
14886: IFFALSE 14917
// begin ComMoveXY ( Givi , 217 , 86 ) ;
14888: LD_EXP 27
14892: PPUSH
14893: LD_INT 217
14895: PPUSH
14896: LD_INT 86
14898: PPUSH
14899: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
14903: LD_EXP 27
14907: PPUSH
14908: LD_EXP 26
14912: PPUSH
14913: CALL_OW 179
// end ; if Kamil then
14917: LD_EXP 30
14921: IFFALSE 14961
// begin ComExit ( Kamil ) ;
14923: LD_EXP 30
14927: PPUSH
14928: CALL 59422 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
14932: LD_EXP 30
14936: PPUSH
14937: LD_INT 212
14939: PPUSH
14940: LD_INT 86
14942: PPUSH
14943: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
14947: LD_EXP 30
14951: PPUSH
14952: LD_EXP 26
14956: PPUSH
14957: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
14961: LD_INT 70
14963: PPUSH
14964: CALL_OW 67
// Say ( Heike , DH-06-Mem-20 ) ;
14968: LD_EXP 26
14972: PPUSH
14973: LD_STRING DH-06-Mem-20
14975: PPUSH
14976: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
14980: LD_EXP 35
14984: PPUSH
14985: LD_INT 215
14987: PPUSH
14988: LD_INT 87
14990: PPUSH
14991: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
14995: LD_EXP 35
14999: PPUSH
15000: LD_EXP 31
15004: PPUSH
15005: CALL_OW 179
// Say ( Kaia , DK-06-Mem-21 ) ;
15009: LD_EXP 31
15013: PPUSH
15014: LD_STRING DK-06-Mem-21
15016: PPUSH
15017: CALL_OW 88
// wait ( 0 0$2 ) ;
15021: LD_INT 70
15023: PPUSH
15024: CALL_OW 67
// end ;
15028: LD_VAR 0 1
15032: RET
// export function SceneWithGiviAndKamil ; begin
15033: LD_INT 0
15035: PPUSH
// if Markov then
15036: LD_EXP 33
15040: IFFALSE 15091
// begin if IsInUnit ( Markov ) then
15042: LD_EXP 33
15046: PPUSH
15047: CALL_OW 310
15051: IFFALSE 15062
// ComExit ( Markov ) ;
15053: LD_EXP 33
15057: PPUSH
15058: CALL 59422 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
15062: LD_EXP 33
15066: PPUSH
15067: LD_INT 212
15069: PPUSH
15070: LD_INT 88
15072: PPUSH
15073: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
15077: LD_EXP 33
15081: PPUSH
15082: LD_EXP 26
15086: PPUSH
15087: CALL_OW 179
// end ; Say ( Givi , DG-06-Obj-1 ) ;
15091: LD_EXP 27
15095: PPUSH
15096: LD_STRING DG-06-Obj-1
15098: PPUSH
15099: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-2 ) ;
15103: LD_EXP 30
15107: PPUSH
15108: LD_STRING DKam-06-Obj-2
15110: PPUSH
15111: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
15115: LD_EXP 26
15119: PPUSH
15120: LD_EXP 30
15124: PPUSH
15125: CALL_OW 119
// Say ( Kamil , DKam-06-Obj-3 ) ;
15129: LD_EXP 30
15133: PPUSH
15134: LD_STRING DKam-06-Obj-3
15136: PPUSH
15137: CALL_OW 88
// Say ( Markov , DMar-06-Obj-4 ) ;
15141: LD_EXP 33
15145: PPUSH
15146: LD_STRING DMar-06-Obj-4
15148: PPUSH
15149: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-6 ) ;
15153: LD_EXP 30
15157: PPUSH
15158: LD_STRING DKam-06-Obj-6
15160: PPUSH
15161: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-7 ) ;
15165: LD_EXP 30
15169: PPUSH
15170: LD_STRING DKam-06-Obj-7
15172: PPUSH
15173: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-8 ) ;
15177: LD_EXP 30
15181: PPUSH
15182: LD_STRING DKam-06-Obj-8
15184: PPUSH
15185: CALL_OW 88
// Say ( Heike , DH-06-Obj-9 ) ;
15189: LD_EXP 26
15193: PPUSH
15194: LD_STRING DH-06-Obj-9
15196: PPUSH
15197: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-10 ) ;
15201: LD_EXP 30
15205: PPUSH
15206: LD_STRING DKam-06-Obj-10
15208: PPUSH
15209: CALL_OW 88
// Say ( Kamil , DKam-06-Obj-11 ) ;
15213: LD_EXP 30
15217: PPUSH
15218: LD_STRING DKam-06-Obj-11
15220: PPUSH
15221: CALL_OW 88
// Say ( Markov , DMar-06-Obj-12 ) ;
15225: LD_EXP 33
15229: PPUSH
15230: LD_STRING DMar-06-Obj-12
15232: PPUSH
15233: CALL_OW 88
// Say ( Markov , DMar-06-Obj-13 ) ;
15237: LD_EXP 33
15241: PPUSH
15242: LD_STRING DMar-06-Obj-13
15244: PPUSH
15245: CALL_OW 88
// Say ( Markov , DMar-06-Obj-14 ) ;
15249: LD_EXP 33
15253: PPUSH
15254: LD_STRING DMar-06-Obj-14
15256: PPUSH
15257: CALL_OW 88
// Say ( Olaf , DO-06-Obj-15 ) ;
15261: LD_EXP 35
15265: PPUSH
15266: LD_STRING DO-06-Obj-15
15268: PPUSH
15269: CALL_OW 88
// Say ( Olaf , DO-06-Obj-16 ) ;
15273: LD_EXP 35
15277: PPUSH
15278: LD_STRING DO-06-Obj-16
15280: PPUSH
15281: CALL_OW 88
// Say ( Heike , DH-06-Obj-17 ) ;
15285: LD_EXP 26
15289: PPUSH
15290: LD_STRING DH-06-Obj-17
15292: PPUSH
15293: CALL_OW 88
// Say ( Olaf , DO-06-Obj-18 ) ;
15297: LD_EXP 35
15301: PPUSH
15302: LD_STRING DO-06-Obj-18
15304: PPUSH
15305: CALL_OW 88
// end ;
15309: LD_VAR 0 1
15313: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
15314: LD_INT 34
15316: PUSH
15317: LD_EXP 59
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PPUSH
15326: CALL_OW 69
15330: IFFALSE 15520
15332: GO 15334
15334: DISABLE
15335: LD_INT 0
15337: PPUSH
// begin CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
15338: LD_INT 34
15340: PUSH
15341: LD_EXP 59
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PPUSH
15350: CALL_OW 69
15354: PPUSH
15355: CALL_OW 87
// DialogueOn ;
15359: CALL_OW 6
// if Markov then
15363: LD_EXP 33
15367: IFFALSE 15395
// begin Say ( Markov , DMar-06-Grn-1 ) ;
15369: LD_EXP 33
15373: PPUSH
15374: LD_STRING DMar-06-Grn-1
15376: PPUSH
15377: CALL_OW 88
// Say ( Heike , DH-06-Grn-2 ) ;
15381: LD_EXP 26
15385: PPUSH
15386: LD_STRING DH-06-Grn-2
15388: PPUSH
15389: CALL_OW 88
// end else
15393: GO 15494
// if heikeSecondSquad then
15395: LD_EXP 41
15399: IFFALSE 15494
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
15401: LD_ADDR_VAR 0 1
15405: PUSH
15406: LD_EXP 41
15410: PUSH
15411: LD_INT 1
15413: PPUSH
15414: LD_EXP 41
15418: PPUSH
15419: CALL_OW 12
15423: ARRAY
15424: ST_TO_ADDR
// case GetSex ( random ) of 1 :
15425: LD_VAR 0 1
15429: PPUSH
15430: CALL_OW 258
15434: PUSH
15435: LD_INT 1
15437: DOUBLE
15438: EQUAL
15439: IFTRUE 15443
15441: GO 15458
15443: POP
// Say ( random , DArm-06-Grn-1 ) ; 2 :
15444: LD_VAR 0 1
15448: PPUSH
15449: LD_STRING DArm-06-Grn-1
15451: PPUSH
15452: CALL_OW 88
15456: GO 15482
15458: LD_INT 2
15460: DOUBLE
15461: EQUAL
15462: IFTRUE 15466
15464: GO 15481
15466: POP
// Say ( random , DArf-06-Grn-1 ) ; end ;
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_STRING DArf-06-Grn-1
15474: PPUSH
15475: CALL_OW 88
15479: GO 15482
15481: POP
// Say ( Heike , DH-06-Grn-2 ) ;
15482: LD_EXP 26
15486: PPUSH
15487: LD_STRING DH-06-Grn-2
15489: PPUSH
15490: CALL_OW 88
// end ; DialogueOff ;
15494: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
15498: LD_STRING MortarConstructed
15500: PPUSH
15501: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
15505: LD_STRING SelfPropelledMortar
15507: PPUSH
15508: CALL_OW 339
// mortarConstructed := true ;
15512: LD_ADDR_EXP 13
15516: PUSH
15517: LD_INT 1
15519: ST_TO_ADDR
// end ;
15520: PPOPN 1
15522: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
15523: LD_INT 2
15525: PPUSH
15526: LD_INT 8
15528: PPUSH
15529: CALL_OW 294
15533: IFFALSE 15676
15535: GO 15537
15537: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
15538: LD_INT 200
15540: PPUSH
15541: LD_INT 162
15543: PPUSH
15544: LD_INT 2
15546: PPUSH
15547: LD_INT 6
15549: NEG
15550: PPUSH
15551: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
15555: LD_INT 200
15557: PPUSH
15558: LD_INT 162
15560: PPUSH
15561: LD_INT 2
15563: PPUSH
15564: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
15568: LD_INT 200
15570: PPUSH
15571: LD_INT 162
15573: PPUSH
15574: CALL_OW 84
// if not IsOk ( Kurt ) then
15578: LD_EXP 37
15582: PPUSH
15583: CALL_OW 302
15587: NOT
15588: IFFALSE 15592
// exit ;
15590: GO 15676
// Say ( Kurt , DKs-06-Otpst-2-1 ) ;
15592: LD_EXP 37
15596: PPUSH
15597: LD_STRING DKs-06-Otpst-2-1
15599: PPUSH
15600: CALL_OW 88
// Say ( Kaia , DK-06-Otpst-2-2 ) ;
15604: LD_EXP 31
15608: PPUSH
15609: LD_STRING DK-06-Otpst-2-2
15611: PPUSH
15612: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-3 ) ;
15616: LD_EXP 37
15620: PPUSH
15621: LD_STRING DKs-06-Otpst-2-3
15623: PPUSH
15624: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-4 ) ;
15628: LD_EXP 37
15632: PPUSH
15633: LD_STRING DKs-06-Otpst-2-4
15635: PPUSH
15636: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-5 ) ;
15640: LD_EXP 37
15644: PPUSH
15645: LD_STRING DKs-06-Otpst-2-5
15647: PPUSH
15648: CALL_OW 88
// Say ( Kamil , DKam-06-Otpst-2-6 ) ;
15652: LD_EXP 30
15656: PPUSH
15657: LD_STRING DKam-06-Otpst-2-6
15659: PPUSH
15660: CALL_OW 88
// Say ( Kurt , DKs-06-Otpst-2-7 ) ;
15664: LD_EXP 37
15668: PPUSH
15669: LD_STRING DKs-06-Otpst-2-7
15671: PPUSH
15672: CALL_OW 88
// end ;
15676: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
15677: LD_INT 8
15679: PPUSH
15680: LD_INT 22
15682: PUSH
15683: LD_INT 3
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 21
15692: PUSH
15693: LD_INT 3
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PPUSH
15704: CALL_OW 70
15708: NOT
15709: PUSH
15710: LD_EXP 3
15714: NOT
15715: AND
15716: IFFALSE 15966
15718: GO 15720
15720: DISABLE
15721: LD_INT 0
15723: PPUSH
// begin outpostDestroyed := true ;
15724: LD_ADDR_EXP 4
15728: PUSH
15729: LD_INT 1
15731: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
15732: LD_INT 22
15734: PUSH
15735: LD_INT 2
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 34
15744: PUSH
15745: LD_EXP 59
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 92
15756: PUSH
15757: LD_INT 195
15759: PUSH
15760: LD_INT 164
15762: PUSH
15763: LD_INT 12
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: LIST
15776: PPUSH
15777: CALL_OW 69
15781: NOT
15782: IFFALSE 15786
// exit ;
15784: GO 15966
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
15786: LD_EXP 27
15790: PPUSH
15791: CALL_OW 302
15795: NOT
15796: PUSH
15797: LD_EXP 31
15801: PPUSH
15802: CALL_OW 302
15806: NOT
15807: OR
15808: IFFALSE 15812
// exit ;
15810: GO 15966
// Say ( Givi , DG-06-Otpst-1-1 ) ;
15812: LD_EXP 27
15816: PPUSH
15817: LD_STRING DG-06-Otpst-1-1
15819: PPUSH
15820: CALL_OW 88
// Say ( Kaia , DK-06-Otpst-1-2 ) ;
15824: LD_EXP 31
15828: PPUSH
15829: LD_STRING DK-06-Otpst-1-2
15831: PPUSH
15832: CALL_OW 88
// if IsOk ( Markov ) then
15836: LD_EXP 33
15840: PPUSH
15841: CALL_OW 302
15845: IFFALSE 15873
// begin Say ( Markov , DMar-06-Otpst-1-3 ) ;
15847: LD_EXP 33
15851: PPUSH
15852: LD_STRING DMar-06-Otpst-1-3
15854: PPUSH
15855: CALL_OW 88
// Say ( Markov , DMar-06-Otpst-1-4 ) ;
15859: LD_EXP 33
15863: PPUSH
15864: LD_STRING DMar-06-Otpst-1-4
15866: PPUSH
15867: CALL_OW 88
// end else
15871: GO 15954
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
15873: LD_ADDR_VAR 0 1
15877: PUSH
15878: LD_EXP 41
15882: PUSH
15883: LD_INT 1
15885: PPUSH
15886: LD_EXP 41
15890: PPUSH
15891: CALL_OW 12
15895: ARRAY
15896: ST_TO_ADDR
// case GetSex ( random ) of 1 :
15897: LD_VAR 0 1
15901: PPUSH
15902: CALL_OW 258
15906: PUSH
15907: LD_INT 1
15909: DOUBLE
15910: EQUAL
15911: IFTRUE 15915
15913: GO 15930
15915: POP
// Say ( random , DArm-06-Otpst-1-a-3 ) ; 2 :
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_STRING DArm-06-Otpst-1-a-3
15923: PPUSH
15924: CALL_OW 88
15928: GO 15954
15930: LD_INT 2
15932: DOUBLE
15933: EQUAL
15934: IFTRUE 15938
15936: GO 15953
15938: POP
// Say ( random , DArf-06-Otpst-1-a-3 ) ; end ;
15939: LD_VAR 0 1
15943: PPUSH
15944: LD_STRING DArf-06-Otpst-1-a-3
15946: PPUSH
15947: CALL_OW 88
15951: GO 15954
15953: POP
// end ; Say ( Givi , DG-06-Otpst-1-5 ) ;
15954: LD_EXP 27
15958: PPUSH
15959: LD_STRING DG-06-Otpst-1-5
15961: PPUSH
15962: CALL_OW 88
// end ;
15966: PPOPN 1
15968: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
15969: LD_EXP 31
15973: PPUSH
15974: CALL_OW 256
15978: PUSH
15979: LD_INT 10
15981: LESS
15982: IFFALSE 16096
15984: GO 15986
15986: DISABLE
// begin DialogueOn ;
15987: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15991: LD_EXP 31
15995: PPUSH
15996: CALL_OW 87
// ForceSay ( Kaia , DK-06-Dead-1 ) ;
16000: LD_EXP 31
16004: PPUSH
16005: LD_STRING DK-06-Dead-1
16007: PPUSH
16008: CALL_OW 91
// Say ( Heike , DH-06-Dead-2 ) ;
16012: LD_EXP 26
16016: PPUSH
16017: LD_STRING DH-06-Dead-2
16019: PPUSH
16020: CALL_OW 88
// ForceSay ( Kaia , DK-06-Dead-3 ) ;
16024: LD_EXP 31
16028: PPUSH
16029: LD_STRING DK-06-Dead-3
16031: PPUSH
16032: CALL_OW 91
// Say ( Heike , DH-06-Dead-4 ) ;
16036: LD_EXP 26
16040: PPUSH
16041: LD_STRING DH-06-Dead-4
16043: PPUSH
16044: CALL_OW 88
// if IsOk ( Mike ) then
16048: LD_EXP 28
16052: PPUSH
16053: CALL_OW 302
16057: IFFALSE 16083
// begin Say ( Mike , DM-06-Dead-5 ) ;
16059: LD_EXP 28
16063: PPUSH
16064: LD_STRING DM-06-Dead-5
16066: PPUSH
16067: CALL_OW 88
// Say ( Heike , DH-06-Dead-6 ) ;
16071: LD_EXP 26
16075: PPUSH
16076: LD_STRING DH-06-Dead-6
16078: PPUSH
16079: CALL_OW 88
// end ; DialogueOff ;
16083: CALL_OW 7
// KillUnit ( Kaia ) ;
16087: LD_EXP 31
16091: PPUSH
16092: CALL_OW 66
// end ;
16096: END
// every 0 0$1 trigger tick >= 5 5$20 or ruLoseCounter > 6 do var i , tmp , dep ;
16097: LD_OWVAR 1
16101: PUSH
16102: LD_INT 11200
16104: GREATEREQUAL
16105: PUSH
16106: LD_EXP 5
16110: PUSH
16111: LD_INT 6
16113: GREATER
16114: OR
16115: IFFALSE 16557
16117: GO 16119
16119: DISABLE
16120: LD_INT 0
16122: PPUSH
16123: PPUSH
16124: PPUSH
// begin PrepareRolfSquad ;
16125: CALL 2308 0 0
// dep := HexInfo ( 86 , 54 ) ;
16129: LD_ADDR_VAR 0 3
16133: PUSH
16134: LD_INT 86
16136: PPUSH
16137: LD_INT 54
16139: PPUSH
16140: CALL_OW 428
16144: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
16145: LD_VAR 0 3
16149: PPUSH
16150: CALL_OW 274
16154: PPUSH
16155: LD_INT 1
16157: PPUSH
16158: LD_INT 300
16160: PPUSH
16161: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
16165: LD_VAR 0 3
16169: PPUSH
16170: CALL_OW 274
16174: PPUSH
16175: LD_INT 2
16177: PPUSH
16178: LD_INT 300
16180: PPUSH
16181: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
16185: LD_EXP 43
16189: PPUSH
16190: LD_INT 79
16192: PPUSH
16193: LD_INT 52
16195: PPUSH
16196: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
16200: LD_INT 35
16202: PPUSH
16203: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
16207: LD_INT 12
16209: PPUSH
16210: LD_INT 22
16212: PUSH
16213: LD_INT 3
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 21
16222: PUSH
16223: LD_INT 1
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PPUSH
16234: CALL_OW 70
16238: NOT
16239: IFFALSE 16200
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
16241: LD_ADDR_VAR 0 2
16245: PUSH
16246: LD_INT 12
16248: PPUSH
16249: LD_INT 21
16251: PUSH
16252: LD_INT 3
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PPUSH
16259: CALL_OW 70
16263: ST_TO_ADDR
// for i in tmp do
16264: LD_ADDR_VAR 0 1
16268: PUSH
16269: LD_VAR 0 2
16273: PUSH
16274: FOR_IN
16275: IFFALSE 16291
// SetSide ( i , 8 ) ;
16277: LD_VAR 0 1
16281: PPUSH
16282: LD_INT 8
16284: PPUSH
16285: CALL_OW 235
16289: GO 16274
16291: POP
16292: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
16293: LD_INT 63
16295: PPUSH
16296: LD_INT 42
16298: PPUSH
16299: CALL_OW 428
16303: PPUSH
16304: LD_INT 320
16306: PPUSH
16307: CALL_OW 234
// ComEnterUnit ( Rolf , dep ) ;
16311: LD_EXP 39
16315: PPUSH
16316: LD_VAR 0 3
16320: PPUSH
16321: CALL_OW 120
// AddComChangeProfession ( Rolf , class_engineer ) ;
16325: LD_EXP 39
16329: PPUSH
16330: LD_INT 2
16332: PPUSH
16333: CALL_OW 183
// AddComExitBuilding ( Rolf ) ;
16337: LD_EXP 39
16341: PPUSH
16342: CALL_OW 182
// wait ( 0 0$20 ) ;
16346: LD_INT 700
16348: PPUSH
16349: CALL_OW 67
// DialogueOn ;
16353: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
16357: LD_INT 8
16359: PPUSH
16360: LD_INT 2
16362: PPUSH
16363: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
16367: LD_INT 86
16369: PPUSH
16370: LD_INT 54
16372: PPUSH
16373: CALL_OW 428
16377: PPUSH
16378: LD_STRING antwerp
16380: PPUSH
16381: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
16385: LD_EXP 39
16389: PPUSH
16390: CALL_OW 87
// SayRadio ( Rolf , DRf-06-rast-1 ) ;
16394: LD_EXP 39
16398: PPUSH
16399: LD_STRING DRf-06-rast-1
16401: PPUSH
16402: CALL_OW 94
// Say ( Heike , DH-06-rast-2 ) ;
16406: LD_EXP 26
16410: PPUSH
16411: LD_STRING DH-06-rast-2
16413: PPUSH
16414: CALL_OW 88
// SayRadio ( Rolf , DRf-06-rast-3 ) ;
16418: LD_EXP 39
16422: PPUSH
16423: LD_STRING DRf-06-rast-3
16425: PPUSH
16426: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-4 ) ;
16430: LD_EXP 39
16434: PPUSH
16435: LD_STRING DRf-06-rast-4
16437: PPUSH
16438: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-5 ) ;
16442: LD_EXP 39
16446: PPUSH
16447: LD_STRING DRf-06-rast-5
16449: PPUSH
16450: CALL_OW 94
// if IsOk ( Aviradze ) then
16454: LD_EXP 38
16458: PPUSH
16459: CALL_OW 302
16463: IFFALSE 16522
// begin CenterNowOnUnits ( Aviradze ) ;
16465: LD_EXP 38
16469: PPUSH
16470: CALL_OW 87
// Say ( Aviradze , DA-06-rast-6 ) ;
16474: LD_EXP 38
16478: PPUSH
16479: LD_STRING DA-06-rast-6
16481: PPUSH
16482: CALL_OW 88
// Say ( Heike , DH-06-rast-7 ) ;
16486: LD_EXP 26
16490: PPUSH
16491: LD_STRING DH-06-rast-7
16493: PPUSH
16494: CALL_OW 88
// Say ( Givi , DG-06-rast-8 ) ;
16498: LD_EXP 27
16502: PPUSH
16503: LD_STRING DG-06-rast-8
16505: PPUSH
16506: CALL_OW 88
// Say ( Givi , DG-06-rast-9 ) ;
16510: LD_EXP 27
16514: PPUSH
16515: LD_STRING DG-06-rast-9
16517: PPUSH
16518: CALL_OW 88
// end ; Say ( Heike , DH-06-rast-10 ) ;
16522: LD_EXP 26
16526: PPUSH
16527: LD_STRING DH-06-rast-10
16529: PPUSH
16530: CALL_OW 88
// DialogueOff ;
16534: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
16538: LD_STRING M2
16540: PPUSH
16541: CALL_OW 337
// bergkampfArrived := true ;
16545: LD_ADDR_EXP 3
16549: PUSH
16550: LD_INT 1
16552: ST_TO_ADDR
// PrepareRolfBase ;
16553: CALL 2639 0 0
// end ;
16557: PPOPN 3
16559: END
// every 0 0$1 trigger GetDistUnits ( Heike , Rolf ) < 8 do var i ;
16560: LD_EXP 26
16564: PPUSH
16565: LD_EXP 39
16569: PPUSH
16570: CALL_OW 296
16574: PUSH
16575: LD_INT 8
16577: LESS
16578: IFFALSE 17138
16580: GO 16582
16582: DISABLE
16583: LD_INT 0
16585: PPUSH
// begin DialogueOn ;
16586: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
16590: LD_EXP 39
16594: PPUSH
16595: CALL_OW 87
// if rolfSquad >= 10 then
16599: LD_EXP 43
16603: PUSH
16604: LD_INT 10
16606: GREATEREQUAL
16607: IFFALSE 16786
// begin linkedWithRolf := 2 ;
16609: LD_ADDR_EXP 10
16613: PUSH
16614: LD_INT 2
16616: ST_TO_ADDR
// Say ( Rolf , DRf-06-rast-11 ) ;
16617: LD_EXP 39
16621: PPUSH
16622: LD_STRING DRf-06-rast-11
16624: PPUSH
16625: CALL_OW 88
// Say ( Heike , DH-06-rast-12 ) ;
16629: LD_EXP 26
16633: PPUSH
16634: LD_STRING DH-06-rast-12
16636: PPUSH
16637: CALL_OW 88
// Say ( Rolf , DRf-06-rast-13 ) ;
16641: LD_EXP 39
16645: PPUSH
16646: LD_STRING DRf-06-rast-13
16648: PPUSH
16649: CALL_OW 88
// Say ( Heike , DH-06-rast-14 ) ;
16653: LD_EXP 26
16657: PPUSH
16658: LD_STRING DH-06-rast-14
16660: PPUSH
16661: CALL_OW 88
// Say ( Rolf , DRf-06-rast-15 ) ;
16665: LD_EXP 39
16669: PPUSH
16670: LD_STRING DRf-06-rast-15
16672: PPUSH
16673: CALL_OW 88
// Say ( Heike , DH-06-rast-16 ) ;
16677: LD_EXP 26
16681: PPUSH
16682: LD_STRING DH-06-rast-16
16684: PPUSH
16685: CALL_OW 88
// if IsOk ( Mike ) then
16689: LD_EXP 28
16693: PPUSH
16694: CALL_OW 302
16698: IFFALSE 16772
// begin Say ( Mike , DM-06-rast-17 ) ;
16700: LD_EXP 28
16704: PPUSH
16705: LD_STRING DM-06-rast-17
16707: PPUSH
16708: CALL_OW 88
// Say ( Heike , DH-06-rast-18 ) ;
16712: LD_EXP 26
16716: PPUSH
16717: LD_STRING DH-06-rast-18
16719: PPUSH
16720: CALL_OW 88
// Say ( Mike , DM-06-rast-19 ) ;
16724: LD_EXP 28
16728: PPUSH
16729: LD_STRING DM-06-rast-19
16731: PPUSH
16732: CALL_OW 88
// Say ( Heike , DH-06-rast-20 ) ;
16736: LD_EXP 26
16740: PPUSH
16741: LD_STRING DH-06-rast-20
16743: PPUSH
16744: CALL_OW 88
// Say ( Mike , DM-06-rast-21 ) ;
16748: LD_EXP 28
16752: PPUSH
16753: LD_STRING DM-06-rast-21
16755: PPUSH
16756: CALL_OW 88
// Say ( Heike , DH-06-rast-22 ) ;
16760: LD_EXP 26
16764: PPUSH
16765: LD_STRING DH-06-rast-22
16767: PPUSH
16768: CALL_OW 88
// end ; Say ( Heike , DH-06-rast-23 ) ;
16772: LD_EXP 26
16776: PPUSH
16777: LD_STRING DH-06-rast-23
16779: PPUSH
16780: CALL_OW 88
// end else
16784: GO 16936
// begin linkedWithRolf := 1 ;
16786: LD_ADDR_EXP 10
16790: PUSH
16791: LD_INT 1
16793: ST_TO_ADDR
// Say ( Rolf , DRf-06-rast-a-11 ) ;
16794: LD_EXP 39
16798: PPUSH
16799: LD_STRING DRf-06-rast-a-11
16801: PPUSH
16802: CALL_OW 88
// Say ( Heike , DH-06-rast-a-12 ) ;
16806: LD_EXP 26
16810: PPUSH
16811: LD_STRING DH-06-rast-a-12
16813: PPUSH
16814: CALL_OW 88
// if IsOk ( Kurt ) then
16818: LD_EXP 37
16822: PPUSH
16823: CALL_OW 302
16827: IFFALSE 16924
// begin Say ( Kurt , DKs-06-rast-a-13 ) ;
16829: LD_EXP 37
16833: PPUSH
16834: LD_STRING DKs-06-rast-a-13
16836: PPUSH
16837: CALL_OW 88
// Say ( Rolf , DRf-06-rast-a-14 ) ;
16841: LD_EXP 39
16845: PPUSH
16846: LD_STRING DRf-06-rast-a-14
16848: PPUSH
16849: CALL_OW 88
// Say ( Rolf , DRf-06-rast-a-15 ) ;
16853: LD_EXP 39
16857: PPUSH
16858: LD_STRING DRf-06-rast-a-15
16860: PPUSH
16861: CALL_OW 88
// Say ( Kurt , DKs-06-rast-a-16 ) ;
16865: LD_EXP 37
16869: PPUSH
16870: LD_STRING DKs-06-rast-a-16
16872: PPUSH
16873: CALL_OW 88
// if IsOk ( Givi ) then
16877: LD_EXP 27
16881: PPUSH
16882: CALL_OW 302
16886: IFFALSE 16924
// begin Say ( Givi , DG-06-rast-a-17 ) ;
16888: LD_EXP 27
16892: PPUSH
16893: LD_STRING DG-06-rast-a-17
16895: PPUSH
16896: CALL_OW 88
// Say ( Givi , DG-06-rast-a-18 ) ;
16900: LD_EXP 27
16904: PPUSH
16905: LD_STRING DG-06-rast-a-18
16907: PPUSH
16908: CALL_OW 88
// Say ( Kurt , DKs-06-rast-a-19 ) ;
16912: LD_EXP 37
16916: PPUSH
16917: LD_STRING DKs-06-rast-a-19
16919: PPUSH
16920: CALL_OW 88
// end ; end ; Say ( Heike , DH-06-rast-a-20 ) ;
16924: LD_EXP 26
16928: PPUSH
16929: LD_STRING DH-06-rast-a-20
16931: PPUSH
16932: CALL_OW 88
// end ; Say ( Rolf , DRf-06-rast-24 ) ;
16936: LD_EXP 39
16940: PPUSH
16941: LD_STRING DRf-06-rast-24
16943: PPUSH
16944: CALL_OW 88
// if IsOk ( Aviradze ) then
16948: LD_EXP 38
16952: PPUSH
16953: CALL_OW 302
16957: IFFALSE 17057
// begin Say ( Aviradze , DA-06-rast-25 ) ;
16959: LD_EXP 38
16963: PPUSH
16964: LD_STRING DA-06-rast-25
16966: PPUSH
16967: CALL_OW 88
// Say ( Heike , DH-06-rast-26 ) ;
16971: LD_EXP 26
16975: PPUSH
16976: LD_STRING DH-06-rast-26
16978: PPUSH
16979: CALL_OW 88
// Say ( Aviradze , DA-06-rast-27 ) ;
16983: LD_EXP 38
16987: PPUSH
16988: LD_STRING DA-06-rast-27
16990: PPUSH
16991: CALL_OW 88
// if IsOk ( Markov ) then
16995: LD_EXP 33
16999: PPUSH
17000: CALL_OW 302
17004: IFFALSE 17032
// begin Say ( Markov , DMar-06-rast-28 ) ;
17006: LD_EXP 33
17010: PPUSH
17011: LD_STRING DMar-06-rast-28
17013: PPUSH
17014: CALL_OW 88
// Say ( Markov , DMar-06-rast-29 ) ;
17018: LD_EXP 33
17022: PPUSH
17023: LD_STRING DMar-06-rast-29
17025: PPUSH
17026: CALL_OW 88
// end else
17030: GO 17055
// if IsOk ( Sophia ) then
17032: LD_EXP 32
17036: PPUSH
17037: CALL_OW 302
17041: IFFALSE 17055
// begin Say ( Sophia , DS-06-rast-28 ) ;
17043: LD_EXP 32
17047: PPUSH
17048: LD_STRING DS-06-rast-28
17050: PPUSH
17051: CALL_OW 88
// end ; end else
17055: GO 17080
// if IsOk ( Sophia ) then
17057: LD_EXP 32
17061: PPUSH
17062: CALL_OW 302
17066: IFFALSE 17080
// Say ( Sophia , DS-06-rast-29 ) ;
17068: LD_EXP 32
17072: PPUSH
17073: LD_STRING DS-06-rast-29
17075: PPUSH
17076: CALL_OW 88
// DialogueOff ;
17080: CALL_OW 7
// rolfScriptBase := false ;
17084: LD_ADDR_EXP 7
17088: PUSH
17089: LD_INT 0
17091: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
17092: LD_STRING M3
17094: PPUSH
17095: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
17099: LD_ADDR_VAR 0 1
17103: PUSH
17104: LD_INT 22
17106: PUSH
17107: LD_INT 8
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PPUSH
17114: CALL_OW 69
17118: PUSH
17119: FOR_IN
17120: IFFALSE 17136
// SetSide ( i , 2 ) ;
17122: LD_VAR 0 1
17126: PPUSH
17127: LD_INT 2
17129: PPUSH
17130: CALL_OW 235
17134: GO 17119
17136: POP
17137: POP
// end ;
17138: PPOPN 1
17140: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf do var random ;
17141: LD_EXP 3
17145: PUSH
17146: LD_EXP 39
17150: PPUSH
17151: CALL_OW 256
17155: PUSH
17156: LD_INT 400
17158: LESS
17159: AND
17160: PUSH
17161: LD_EXP 10
17165: NOT
17166: AND
17167: IFFALSE 17441
17169: GO 17171
17171: DISABLE
17172: LD_INT 0
17174: PPUSH
// begin DialogueOn ;
17175: CALL_OW 6
// SayRadio ( Rolf , DRf-06-rast-f-11 ) ;
17179: LD_EXP 39
17183: PPUSH
17184: LD_STRING DRf-06-rast-f-11
17186: PPUSH
17187: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-f-12 ) ;
17191: LD_EXP 39
17195: PPUSH
17196: LD_STRING DRf-06-rast-f-12
17198: PPUSH
17199: CALL_OW 94
// SayRadio ( Rolf , DRf-06-rast-f-13 ) ;
17203: LD_EXP 39
17207: PPUSH
17208: LD_STRING DRf-06-rast-f-13
17210: PPUSH
17211: CALL_OW 94
// DialogueOff ;
17215: CALL_OW 7
// KillUnit ( Rolf ) ;
17219: LD_EXP 39
17223: PPUSH
17224: CALL_OW 66
// wait ( 0 0$1 ) ;
17228: LD_INT 35
17230: PPUSH
17231: CALL_OW 67
// if not IsOk ( Givi ) then
17235: LD_EXP 27
17239: PPUSH
17240: CALL_OW 302
17244: NOT
17245: IFFALSE 17249
// exit ;
17247: GO 17441
// DialogueOn ;
17249: CALL_OW 6
// Say ( Givi , DG-06-rast-f-14 ) ;
17253: LD_EXP 27
17257: PPUSH
17258: LD_STRING DG-06-rast-f-14
17260: PPUSH
17261: CALL_OW 88
// Say ( Givi , DG-06-rast-f-15 ) ;
17265: LD_EXP 27
17269: PPUSH
17270: LD_STRING DG-06-rast-f-15
17272: PPUSH
17273: CALL_OW 88
// if IsOk ( Kaia ) then
17277: LD_EXP 31
17281: PPUSH
17282: CALL_OW 302
17286: IFFALSE 17302
// Say ( Kaia , DK-06-rast-f-16 ) else
17288: LD_EXP 31
17292: PPUSH
17293: LD_STRING DK-06-rast-f-16
17295: PPUSH
17296: CALL_OW 88
17300: GO 17389
// if heikeSecondSquad then
17302: LD_EXP 41
17306: IFFALSE 17389
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
17308: LD_ADDR_VAR 0 1
17312: PUSH
17313: LD_EXP 41
17317: PUSH
17318: LD_INT 1
17320: PPUSH
17321: LD_EXP 41
17325: PPUSH
17326: CALL_OW 12
17330: ARRAY
17331: ST_TO_ADDR
// case GetSex ( random ) of 1 :
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 258
17341: PUSH
17342: LD_INT 1
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17365
17350: POP
// Say ( random , DArm-06-rast-f-a-16 ) ; 2 :
17351: LD_VAR 0 1
17355: PPUSH
17356: LD_STRING DArm-06-rast-f-a-16
17358: PPUSH
17359: CALL_OW 88
17363: GO 17389
17365: LD_INT 2
17367: DOUBLE
17368: EQUAL
17369: IFTRUE 17373
17371: GO 17388
17373: POP
// Say ( random , DArf-06-rast-f-a-16 ) ; end ;
17374: LD_VAR 0 1
17378: PPUSH
17379: LD_STRING DArf-06-rast-f-a-16
17381: PPUSH
17382: CALL_OW 88
17386: GO 17389
17388: POP
// end ; Say ( Givi , DG-06-rast-f-17 ) ;
17389: LD_EXP 27
17393: PPUSH
17394: LD_STRING DG-06-rast-f-17
17396: PPUSH
17397: CALL_OW 88
// Say ( Givi , DG-06-rast-f-18 ) ;
17401: LD_EXP 27
17405: PPUSH
17406: LD_STRING DG-06-rast-f-18
17408: PPUSH
17409: CALL_OW 88
// Say ( Givi , DG-06-rast-f-19 ) ;
17413: LD_EXP 27
17417: PPUSH
17418: LD_STRING DG-06-rast-f-19
17420: PPUSH
17421: CALL_OW 88
// Say ( Givi , DG-06-rast-f-20 ) ;
17425: LD_EXP 27
17429: PPUSH
17430: LD_STRING DG-06-rast-f-20
17432: PPUSH
17433: CALL_OW 88
// DialogueOff ;
17437: CALL_OW 7
// end ;
17441: PPOPN 1
17443: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
17444: LD_INT 2
17446: PPUSH
17447: LD_INT 10
17449: PPUSH
17450: CALL_OW 294
17454: IFFALSE 17527
17456: GO 17458
17458: DISABLE
// begin Say ( Givi , DG-06-Len-1 ) ;
17459: LD_EXP 27
17463: PPUSH
17464: LD_STRING DG-06-Len-1
17466: PPUSH
17467: CALL_OW 88
// Say ( Kurt , DKs-06-Len-2 ) ;
17471: LD_EXP 37
17475: PPUSH
17476: LD_STRING DKs-06-Len-2
17478: PPUSH
17479: CALL_OW 88
// Say ( Kurt , DKs-06-Len-3 ) ;
17483: LD_EXP 37
17487: PPUSH
17488: LD_STRING DKs-06-Len-3
17490: PPUSH
17491: CALL_OW 88
// Say ( Heike , DH-06-Len-4 ) ;
17495: LD_EXP 26
17499: PPUSH
17500: LD_STRING DH-06-Len-4
17502: PPUSH
17503: CALL_OW 88
// Say ( Kaia , DK-06-Len-5 ) ;
17507: LD_EXP 31
17511: PPUSH
17512: LD_STRING DK-06-Len-5
17514: PPUSH
17515: CALL_OW 88
// leninSpotted := true ;
17519: LD_ADDR_EXP 12
17523: PUSH
17524: LD_INT 1
17526: ST_TO_ADDR
// end ;
17527: END
// every 0 0$1 trigger bergkampfArrived and tick > 12 12$00 do var i ;
17528: LD_EXP 3
17532: PUSH
17533: LD_OWVAR 1
17537: PUSH
17538: LD_INT 25200
17540: GREATER
17541: AND
17542: IFFALSE 17912
17544: GO 17546
17546: DISABLE
17547: LD_INT 0
17549: PPUSH
// begin wait ( 1 1$20 ) ;
17550: LD_INT 2800
17552: PPUSH
17553: CALL_OW 67
// PrepareOmarSquad ;
17557: CALL 3698 0 0
// repeat wait ( 0 0$1 ) ;
17561: LD_INT 35
17563: PPUSH
17564: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
17568: LD_INT 14
17570: PPUSH
17571: LD_INT 22
17573: PUSH
17574: LD_INT 3
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 2
17583: PUSH
17584: LD_INT 21
17586: PUSH
17587: LD_INT 1
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 59
17596: PUSH
17597: EMPTY
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PPUSH
17609: CALL_OW 70
17613: NOT
17614: IFFALSE 17561
// for i in omarSquad do
17616: LD_ADDR_VAR 0 1
17620: PUSH
17621: LD_EXP 44
17625: PUSH
17626: FOR_IN
17627: IFFALSE 17658
// if GetLives ( i ) < 750 then
17629: LD_VAR 0 1
17633: PPUSH
17634: CALL_OW 256
17638: PUSH
17639: LD_INT 750
17641: LESS
17642: IFFALSE 17656
// SetLives ( i , 1000 ) ;
17644: LD_VAR 0 1
17648: PPUSH
17649: LD_INT 1000
17651: PPUSH
17652: CALL_OW 234
17656: GO 17626
17658: POP
17659: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
17660: LD_ADDR_VAR 0 1
17664: PUSH
17665: LD_INT 14
17667: PPUSH
17668: LD_INT 21
17670: PUSH
17671: LD_INT 3
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PPUSH
17678: CALL_OW 70
17682: PUSH
17683: FOR_IN
17684: IFFALSE 17700
// SetSide ( i , 5 ) ;
17686: LD_VAR 0 1
17690: PPUSH
17691: LD_INT 5
17693: PPUSH
17694: CALL_OW 235
17698: GO 17683
17700: POP
17701: POP
// wait ( 0 0$3 ) ;
17702: LD_INT 105
17704: PPUSH
17705: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
17709: LD_INT 5
17711: PPUSH
17712: LD_INT 2
17714: PPUSH
17715: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
17719: LD_EXP 36
17723: PPUSH
17724: CALL_OW 87
// DialogueOn ;
17728: CALL_OW 6
// SayRadio ( Omar , DOm-06-Veh-1 ) ;
17732: LD_EXP 36
17736: PPUSH
17737: LD_STRING DOm-06-Veh-1
17739: PPUSH
17740: CALL_OW 94
// SayRadio ( Omar , DOm-06-Veh-2 ) ;
17744: LD_EXP 36
17748: PPUSH
17749: LD_STRING DOm-06-Veh-2
17751: PPUSH
17752: CALL_OW 94
// SayRadio ( Omar , DOm-06-Veh-3 ) ;
17756: LD_EXP 36
17760: PPUSH
17761: LD_STRING DOm-06-Veh-3
17763: PPUSH
17764: CALL_OW 94
// if mortarConstructed then
17768: LD_EXP 13
17772: IFFALSE 17786
// SayRadio ( Omar , DOm-06-Veh-4 ) ;
17774: LD_EXP 36
17778: PPUSH
17779: LD_STRING DOm-06-Veh-4
17781: PPUSH
17782: CALL_OW 94
// Say ( Heike , DH-06-Veh-5 ) ;
17786: LD_EXP 26
17790: PPUSH
17791: LD_STRING DH-06-Veh-5
17793: PPUSH
17794: CALL_OW 88
// if IsOk ( Kurt ) then
17798: LD_EXP 37
17802: PPUSH
17803: CALL_OW 302
17807: IFFALSE 17857
// begin Say ( Kurt , DKs-06-Veh-6 ) ;
17809: LD_EXP 37
17813: PPUSH
17814: LD_STRING DKs-06-Veh-6
17816: PPUSH
17817: CALL_OW 88
// Say ( Kurt , DKs-06-Veh-7 ) ;
17821: LD_EXP 37
17825: PPUSH
17826: LD_STRING DKs-06-Veh-7
17828: PPUSH
17829: CALL_OW 88
// Say ( Givi , DG-06-Veh-8 ) ;
17833: LD_EXP 27
17837: PPUSH
17838: LD_STRING DG-06-Veh-8
17840: PPUSH
17841: CALL_OW 88
// Say ( Mike , DM-06-Veh-9 ) ;
17845: LD_EXP 28
17849: PPUSH
17850: LD_STRING DM-06-Veh-9
17852: PPUSH
17853: CALL_OW 88
// end ; DialogueOff ;
17857: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
17861: LD_STRING M4
17863: PPUSH
17864: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
17868: LD_EXP 36
17872: PPUSH
17873: LD_INT 341
17875: PPUSH
17876: LD_INT 232
17878: PPUSH
17879: CALL_OW 428
17883: PPUSH
17884: CALL_OW 120
// omarArrived := true ;
17888: LD_ADDR_EXP 6
17892: PUSH
17893: LD_INT 1
17895: ST_TO_ADDR
// omarScriptBase := true ;
17896: LD_ADDR_EXP 8
17900: PUSH
17901: LD_INT 1
17903: ST_TO_ADDR
// omarWantVehicles := true ;
17904: LD_ADDR_EXP 16
17908: PUSH
17909: LD_INT 1
17911: ST_TO_ADDR
// end ;
17912: PPOPN 1
17914: END
// every 0 0$1 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
17915: LD_EXP 39
17919: PPUSH
17920: CALL_OW 302
17924: PUSH
17925: LD_EXP 10
17929: AND
17930: PUSH
17931: LD_EXP 6
17935: AND
17936: IFFALSE 18033
17938: GO 17940
17940: DISABLE
// begin CenterNowOnUnits ( Rolf ) ;
17941: LD_EXP 39
17945: PPUSH
17946: CALL_OW 87
// DialogueOn ;
17950: CALL_OW 6
// Say ( Rolf , DRf-06-Veh-10 ) ;
17954: LD_EXP 39
17958: PPUSH
17959: LD_STRING DRf-06-Veh-10
17961: PPUSH
17962: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-11 ) ;
17966: LD_EXP 39
17970: PPUSH
17971: LD_STRING DRf-06-Veh-11
17973: PPUSH
17974: CALL_OW 88
// Say ( Heike , DH-06-Veh-12 ) ;
17978: LD_EXP 26
17982: PPUSH
17983: LD_STRING DH-06-Veh-12
17985: PPUSH
17986: CALL_OW 88
// Say ( Heike , DH-06-Veh-13 ) ;
17990: LD_EXP 26
17994: PPUSH
17995: LD_STRING DH-06-Veh-13
17997: PPUSH
17998: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-14 ) ;
18002: LD_EXP 39
18006: PPUSH
18007: LD_STRING DRf-06-Veh-14
18009: PPUSH
18010: CALL_OW 88
// DialogueOff ;
18014: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
18018: LD_STRING M5
18020: PPUSH
18021: CALL_OW 337
// rolfWantVehicles := true ;
18025: LD_ADDR_EXP 15
18029: PUSH
18030: LD_INT 1
18032: ST_TO_ADDR
// end ;
18033: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
18034: LD_EXP 16
18038: IFFALSE 18775
18040: GO 18042
18042: DISABLE
18043: LD_INT 0
18045: PPUSH
18046: PPUSH
18047: PPUSH
18048: PPUSH
18049: PPUSH
18050: PPUSH
// begin wait ( 0 0$3 ) ;
18051: LD_INT 105
18053: PPUSH
18054: CALL_OW 67
// Hint ( OmarVehicles ) ;
18058: LD_STRING OmarVehicles
18060: PPUSH
18061: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
18065: LD_INT 16
18067: PPUSH
18068: LD_INT 1
18070: PPUSH
18071: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
18075: LD_INT 35
18077: PPUSH
18078: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
18082: LD_ADDR_EXP 18
18086: PUSH
18087: LD_EXP 18
18091: PUSH
18092: LD_INT 35
18094: MINUS
18095: ST_TO_ADDR
// display_strings := [ #X106-1 , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) ] ;
18096: LD_ADDR_OWVAR 47
18100: PUSH
18101: LD_STRING #X106-1
18103: PUSH
18104: LD_EXP 19
18108: PUSH
18109: LD_INT 16
18111: PPUSH
18112: LD_INT 22
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 21
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 33
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 58
18144: PUSH
18145: EMPTY
18146: LIST
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 70
18158: MINUS
18159: PPUSH
18160: CALL 61011 0 1
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
18169: LD_EXP 18
18173: PUSH
18174: LD_INT 0
18176: LESSEQUAL
18177: IFFALSE 18277
// begin display_strings := [ ] ;
18179: LD_ADDR_OWVAR 47
18183: PUSH
18184: EMPTY
18185: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
18186: LD_STRING M4a
18188: PPUSH
18189: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
18193: LD_INT 16
18195: PPUSH
18196: LD_INT 0
18198: PPUSH
18199: CALL_OW 424
// DialogueOn ;
18203: CALL_OW 6
// SayRadio ( Omar , DOm-06-Veh-b-15 ) ;
18207: LD_EXP 36
18211: PPUSH
18212: LD_STRING DOm-06-Veh-b-15
18214: PPUSH
18215: CALL_OW 94
// Say ( Heike , DH-06-Veh-b-16 ) ;
18219: LD_EXP 26
18223: PPUSH
18224: LD_STRING DH-06-Veh-b-16
18226: PPUSH
18227: CALL_OW 88
// SayRadio ( Omar , DOm-06-Veh-b-17 ) ;
18231: LD_EXP 36
18235: PPUSH
18236: LD_STRING DOm-06-Veh-b-17
18238: PPUSH
18239: CALL_OW 94
// Say ( Kaia , DK-06-Veh-b-18 ) ;
18243: LD_EXP 31
18247: PPUSH
18248: LD_STRING DK-06-Veh-b-18
18250: PPUSH
18251: CALL_OW 88
// DialogueOff ;
18255: CALL_OW 7
// omarAttack := true ;
18259: LD_ADDR_EXP 21
18263: PUSH
18264: LD_INT 1
18266: ST_TO_ADDR
// omarScriptBase := false ;
18267: LD_ADDR_EXP 8
18271: PUSH
18272: LD_INT 0
18274: ST_TO_ADDR
// exit ;
18275: GO 18775
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
18277: LD_EXP 19
18281: PUSH
18282: LD_INT 16
18284: PPUSH
18285: LD_INT 22
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 21
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 33
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 58
18317: PUSH
18318: EMPTY
18319: LIST
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: PPUSH
18327: CALL_OW 70
18331: LESSEQUAL
18332: IFFALSE 18075
// DialogueOn ;
18334: CALL_OW 6
// SayRadio ( Omar , DOm-06-Veh-a-15 ) ;
18338: LD_EXP 36
18342: PPUSH
18343: LD_STRING DOm-06-Veh-a-15
18345: PPUSH
18346: CALL_OW 94
// Say ( Kaia , DK-06-Veh-a-16 ) ;
18350: LD_EXP 31
18354: PPUSH
18355: LD_STRING DK-06-Veh-a-16
18357: PPUSH
18358: CALL_OW 88
// DialogueOff ;
18362: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
18366: LD_STRING M4a
18368: PPUSH
18369: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
18373: LD_INT 16
18375: PPUSH
18376: LD_INT 0
18378: PPUSH
18379: CALL_OW 424
// omarHasVehicles := true ;
18383: LD_ADDR_EXP 20
18387: PUSH
18388: LD_INT 1
18390: ST_TO_ADDR
// omarAttack := true ;
18391: LD_ADDR_EXP 21
18395: PUSH
18396: LD_INT 1
18398: ST_TO_ADDR
// omarScriptBase := false ;
18399: LD_ADDR_EXP 8
18403: PUSH
18404: LD_INT 0
18406: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
18407: LD_ADDR_VAR 0 2
18411: PUSH
18412: LD_INT 16
18414: PPUSH
18415: LD_INT 22
18417: PUSH
18418: LD_INT 2
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 21
18427: PUSH
18428: LD_INT 2
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 33
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 58
18447: PUSH
18448: EMPTY
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: PPUSH
18457: CALL_OW 70
18461: ST_TO_ADDR
// for i in tmp do
18462: LD_ADDR_VAR 0 1
18466: PUSH
18467: LD_VAR 0 2
18471: PUSH
18472: FOR_IN
18473: IFFALSE 18501
// begin SetFuel ( i , 100 ) ;
18475: LD_VAR 0 1
18479: PPUSH
18480: LD_INT 100
18482: PPUSH
18483: CALL_OW 240
// SetSide ( i , 8 ) ;
18487: LD_VAR 0 1
18491: PPUSH
18492: LD_INT 8
18494: PPUSH
18495: CALL_OW 235
// end ;
18499: GO 18472
18501: POP
18502: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
18503: LD_ADDR_VAR 0 3
18507: PUSH
18508: LD_EXP 44
18512: PPUSH
18513: LD_INT 25
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PPUSH
18523: CALL_OW 72
18527: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
18528: LD_ADDR_VAR 0 4
18532: PUSH
18533: LD_EXP 44
18537: PPUSH
18538: LD_INT 25
18540: PUSH
18541: LD_INT 3
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PPUSH
18548: CALL_OW 72
18552: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
18553: LD_ADDR_VAR 0 5
18557: PUSH
18558: LD_INT 324
18560: PPUSH
18561: LD_INT 234
18563: PPUSH
18564: CALL_OW 428
18568: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
18569: LD_ADDR_VAR 0 6
18573: PUSH
18574: LD_INT 334
18576: PPUSH
18577: LD_INT 241
18579: PPUSH
18580: CALL_OW 428
18584: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
18585: LD_VAR 0 6
18589: PPUSH
18590: CALL_OW 313
18594: PPUSH
18595: CALL_OW 122
// if eng then
18599: LD_VAR 0 3
18603: IFFALSE 18711
// begin if eng + mech <= tmp then
18605: LD_VAR 0 3
18609: PUSH
18610: LD_VAR 0 4
18614: PLUS
18615: PUSH
18616: LD_VAR 0 2
18620: LESSEQUAL
18621: IFFALSE 18676
// begin ComEnterUnit ( eng , workshop ) ;
18623: LD_VAR 0 3
18627: PPUSH
18628: LD_VAR 0 5
18632: PPUSH
18633: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
18637: LD_VAR 0 3
18641: PPUSH
18642: LD_INT 3
18644: PPUSH
18645: CALL_OW 183
// AddComExitBuilding ( eng ) ;
18649: LD_VAR 0 3
18653: PPUSH
18654: CALL_OW 182
// mech := mech union eng ;
18658: LD_ADDR_VAR 0 4
18662: PUSH
18663: LD_VAR 0 4
18667: PUSH
18668: LD_VAR 0 3
18672: UNION
18673: ST_TO_ADDR
// end else
18674: GO 18711
// begin ComEnterUnit ( eng , armoury ) ;
18676: LD_VAR 0 3
18680: PPUSH
18681: LD_VAR 0 6
18685: PPUSH
18686: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
18690: LD_VAR 0 3
18694: PPUSH
18695: LD_INT 1
18697: PPUSH
18698: CALL_OW 183
// AddComExitBuilding ( eng ) ;
18702: LD_VAR 0 3
18706: PPUSH
18707: CALL_OW 182
// end ; end ; for i := 1 to mech do
18711: LD_ADDR_VAR 0 1
18715: PUSH
18716: DOUBLE
18717: LD_INT 1
18719: DEC
18720: ST_TO_ADDR
18721: LD_VAR 0 4
18725: PUSH
18726: FOR_TO
18727: IFFALSE 18773
// if i > tmp then
18729: LD_VAR 0 1
18733: PUSH
18734: LD_VAR 0 2
18738: GREATER
18739: IFFALSE 18745
// break else
18741: GO 18773
18743: GO 18771
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
18745: LD_VAR 0 4
18749: PUSH
18750: LD_VAR 0 1
18754: ARRAY
18755: PPUSH
18756: LD_VAR 0 2
18760: PUSH
18761: LD_VAR 0 1
18765: ARRAY
18766: PPUSH
18767: CALL_OW 180
18771: GO 18726
18773: POP
18774: POP
// end ;
18775: PPOPN 6
18777: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , tmp ;
18778: LD_EXP 39
18782: PPUSH
18783: CALL_OW 302
18787: PUSH
18788: LD_EXP 15
18792: AND
18793: IFFALSE 19316
18795: GO 18797
18797: DISABLE
18798: LD_INT 0
18800: PPUSH
18801: PPUSH
// begin tmp := [ ] ;
18802: LD_ADDR_VAR 0 2
18806: PUSH
18807: EMPTY
18808: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18809: LD_INT 35
18811: PPUSH
18812: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
18816: LD_ADDR_EXP 17
18820: PUSH
18821: LD_EXP 17
18825: PUSH
18826: LD_INT 35
18828: MINUS
18829: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
18830: LD_EXP 17
18834: PUSH
18835: LD_INT 0
18837: LESSEQUAL
18838: PUSH
18839: LD_EXP 21
18843: OR
18844: IFFALSE 19062
// begin DialogueOn ;
18846: CALL_OW 6
// Say ( Rolf , DRf-06-Veh-b-19 ) ;
18850: LD_EXP 39
18854: PPUSH
18855: LD_STRING DRf-06-Veh-b-19
18857: PPUSH
18858: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-b-20 ) ;
18862: LD_EXP 39
18866: PPUSH
18867: LD_STRING DRf-06-Veh-b-20
18869: PPUSH
18870: CALL_OW 88
// Say ( Heike , DH-06-Veh-b-21 ) ;
18874: LD_EXP 26
18878: PPUSH
18879: LD_STRING DH-06-Veh-b-21
18881: PPUSH
18882: CALL_OW 88
// if IsOk ( Givi ) then
18886: LD_EXP 27
18890: PPUSH
18891: CALL_OW 302
18895: IFFALSE 18933
// begin Say ( Givi , DG-06-Veh-b-22 ) ;
18897: LD_EXP 27
18901: PPUSH
18902: LD_STRING DG-06-Veh-b-22
18904: PPUSH
18905: CALL_OW 88
// Say ( Heike , DH-06-Veh-b-23 ) ;
18909: LD_EXP 26
18913: PPUSH
18914: LD_STRING DH-06-Veh-b-23
18916: PPUSH
18917: CALL_OW 88
// Say ( Givi , DG-06-Veh-b-24 ) ;
18921: LD_EXP 27
18925: PPUSH
18926: LD_STRING DG-06-Veh-b-24
18928: PPUSH
18929: CALL_OW 88
// end ; DialogueOff ;
18933: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
18937: LD_STRING M5a
18939: PPUSH
18940: CALL_OW 337
// for i in rolfSquad do
18944: LD_ADDR_VAR 0 1
18948: PUSH
18949: LD_EXP 43
18953: PUSH
18954: FOR_IN
18955: IFFALSE 19021
// begin SetSide ( i , 8 ) ;
18957: LD_VAR 0 1
18961: PPUSH
18962: LD_INT 8
18964: PPUSH
18965: CALL_OW 235
// if IsDriver ( i ) then
18969: LD_VAR 0 1
18973: PPUSH
18974: CALL 56640 0 1
18978: IFFALSE 18999
// SetSide ( IsInUnit ( i ) , 8 ) else
18980: LD_VAR 0 1
18984: PPUSH
18985: CALL_OW 310
18989: PPUSH
18990: LD_INT 8
18992: PPUSH
18993: CALL_OW 235
18997: GO 19019
// if IsInUnit ( i ) then
18999: LD_VAR 0 1
19003: PPUSH
19004: CALL_OW 310
19008: IFFALSE 19019
// ComExitBuilding ( i ) ;
19010: LD_VAR 0 1
19014: PPUSH
19015: CALL_OW 122
// end ;
19019: GO 18954
19021: POP
19022: POP
// wait ( 0 0$1 ) ;
19023: LD_INT 35
19025: PPUSH
19026: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
19030: LD_EXP 43
19034: PPUSH
19035: LD_INT 229
19037: PPUSH
19038: LD_INT 154
19040: PPUSH
19041: CALL_OW 114
// AddComAgressiveMove ( rolfSquad , 158 , 162 ) ;
19045: LD_EXP 43
19049: PPUSH
19050: LD_INT 158
19052: PPUSH
19053: LD_INT 162
19055: PPUSH
19056: CALL_OW 174
// exit ;
19060: GO 19316
// end ; tmp := [ ] ;
19062: LD_ADDR_VAR 0 2
19066: PUSH
19067: EMPTY
19068: ST_TO_ADDR
// for i in rolfSquad do
19069: LD_ADDR_VAR 0 1
19073: PUSH
19074: LD_EXP 43
19078: PUSH
19079: FOR_IN
19080: IFFALSE 19149
// if IsDriver ( i ) and GetFuel ( IsInUnit ( i ) ) >= 50 then
19082: LD_VAR 0 1
19086: PPUSH
19087: CALL 56640 0 1
19091: PUSH
19092: LD_VAR 0 1
19096: PPUSH
19097: CALL_OW 310
19101: PPUSH
19102: CALL_OW 261
19106: PUSH
19107: LD_INT 50
19109: GREATEREQUAL
19110: AND
19111: IFFALSE 19147
// tmp := Replace ( tmp , tmp + 1 , IsInUnit ( i ) ) ;
19113: LD_ADDR_VAR 0 2
19117: PUSH
19118: LD_VAR 0 2
19122: PPUSH
19123: LD_VAR 0 2
19127: PUSH
19128: LD_INT 1
19130: PLUS
19131: PPUSH
19132: LD_VAR 0 1
19136: PPUSH
19137: CALL_OW 310
19141: PPUSH
19142: CALL_OW 1
19146: ST_TO_ADDR
19147: GO 19079
19149: POP
19150: POP
// if IsDead ( Rolf ) then
19151: LD_EXP 39
19155: PPUSH
19156: CALL_OW 301
19160: IFFALSE 19171
// begin ChangeMissionObjectives ( M5a ) ;
19162: LD_STRING M5a
19164: PPUSH
19165: CALL_OW 337
// exit ;
19169: GO 19316
// end ; until tmp = rolfSquad ;
19171: LD_VAR 0 2
19175: PUSH
19176: LD_EXP 43
19180: EQUAL
19181: IFFALSE 18809
// DialogueOn ;
19183: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
19187: LD_EXP 39
19191: PPUSH
19192: CALL_OW 87
// Say ( Rolf , DRf-06-Veh-a-17 ) ;
19196: LD_EXP 39
19200: PPUSH
19201: LD_STRING DRf-06-Veh-a-17
19203: PPUSH
19204: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
19208: LD_EXP 26
19212: PPUSH
19213: LD_STRING DH-08-Veh-a-18
19215: PPUSH
19216: CALL_OW 88
// Say ( Rolf , DRf-06-Veh-a-19 ) ;
19220: LD_EXP 39
19224: PPUSH
19225: LD_STRING DRf-06-Veh-a-19
19227: PPUSH
19228: CALL_OW 88
// DialogueOff ;
19232: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
19236: LD_STRING M5a
19238: PPUSH
19239: CALL_OW 337
// rolfHasVehicles := true ;
19243: LD_ADDR_EXP 14
19247: PUSH
19248: LD_INT 1
19250: ST_TO_ADDR
// for i in rolfSquad union tmp do
19251: LD_ADDR_VAR 0 1
19255: PUSH
19256: LD_EXP 43
19260: PUSH
19261: LD_VAR 0 2
19265: UNION
19266: PUSH
19267: FOR_IN
19268: IFFALSE 19284
// SetSide ( i , 8 ) ;
19270: LD_VAR 0 1
19274: PPUSH
19275: LD_INT 8
19277: PPUSH
19278: CALL_OW 235
19282: GO 19267
19284: POP
19285: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
19286: LD_EXP 43
19290: PPUSH
19291: LD_INT 229
19293: PPUSH
19294: LD_INT 154
19296: PPUSH
19297: CALL_OW 114
// AddComAgressiveMove ( rolfSquad , 158 , 162 ) ;
19301: LD_EXP 43
19305: PPUSH
19306: LD_INT 158
19308: PPUSH
19309: LD_INT 162
19311: PPUSH
19312: CALL_OW 174
// end ;
19316: PPOPN 2
19318: END
// every 0 0$1 trigger leninSpotted and omarAttack do
19319: LD_EXP 12
19323: PUSH
19324: LD_EXP 21
19328: AND
19329: IFFALSE 19629
19331: GO 19333
19333: DISABLE
// begin wait ( 0 0$45 ) ;
19334: LD_INT 1575
19336: PPUSH
19337: CALL_OW 67
// DialogueOn ;
19341: CALL_OW 6
// SayRadio ( Shariff , DShar-06-End-1 ) ;
19345: LD_EXP 34
19349: PPUSH
19350: LD_STRING DShar-06-End-1
19352: PPUSH
19353: CALL_OW 94
// Say ( Heike , DH-06-End-2 ) ;
19357: LD_EXP 26
19361: PPUSH
19362: LD_STRING DH-06-End-2
19364: PPUSH
19365: CALL_OW 88
// SayRadio ( Shariff , DShar-06-End-3 ) ;
19369: LD_EXP 34
19373: PPUSH
19374: LD_STRING DShar-06-End-3
19376: PPUSH
19377: CALL_OW 94
// Say ( Heike , DH-06-End-4 ) ;
19381: LD_EXP 26
19385: PPUSH
19386: LD_STRING DH-06-End-4
19388: PPUSH
19389: CALL_OW 88
// SayRadio ( Shariff , DShar-06-End-5 ) ;
19393: LD_EXP 34
19397: PPUSH
19398: LD_STRING DShar-06-End-5
19400: PPUSH
19401: CALL_OW 94
// SayRadio ( Shariff , DShar-06-End-6 ) ;
19405: LD_EXP 34
19409: PPUSH
19410: LD_STRING DShar-06-End-6
19412: PPUSH
19413: CALL_OW 94
// dwait ( 0 0$2 ) ;
19417: LD_INT 70
19419: PPUSH
19420: CALL_OW 68
// Say ( Heike , DH-06-End-7 ) ;
19424: LD_EXP 26
19428: PPUSH
19429: LD_STRING DH-06-End-7
19431: PPUSH
19432: CALL_OW 88
// DialogueOff ;
19436: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
19440: LD_STRING M6
19442: PPUSH
19443: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
19447: LD_INT 17
19449: PPUSH
19450: LD_INT 1
19452: PPUSH
19453: CALL_OW 424
// escapeAllowed := true ;
19457: LD_ADDR_EXP 22
19461: PUSH
19462: LD_INT 1
19464: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19465: LD_INT 35
19467: PPUSH
19468: CALL_OW 67
// Say ( Kurt , DKs-06-End-8 ) ;
19472: LD_EXP 37
19476: PPUSH
19477: LD_STRING DKs-06-End-8
19479: PPUSH
19480: CALL_OW 88
// Say ( Kaia , DK-06-End-10 ) ;
19484: LD_EXP 31
19488: PPUSH
19489: LD_STRING DK-06-End-10
19491: PPUSH
19492: CALL_OW 88
// Say ( Kurt , DKs-06-End-9 ) ;
19496: LD_EXP 37
19500: PPUSH
19501: LD_STRING DKs-06-End-9
19503: PPUSH
19504: CALL_OW 88
// Say ( Markov , DMar-06-End-11 ) ;
19508: LD_EXP 33
19512: PPUSH
19513: LD_STRING DMar-06-End-11
19515: PPUSH
19516: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
19520: LD_STRING 05_DrugsTested
19522: PPUSH
19523: LD_EXP 1
19527: PPUSH
19528: CALL_OW 30
19532: IFFALSE 19546
// Say ( Mike , DM-06-End-12 ) ;
19534: LD_EXP 28
19538: PPUSH
19539: LD_STRING DM-06-End-12
19541: PPUSH
19542: CALL_OW 88
// Say ( Olaf , DO-06-End-13 ) ;
19546: LD_EXP 35
19550: PPUSH
19551: LD_STRING DO-06-End-13
19553: PPUSH
19554: CALL_OW 88
// if IsOk ( Sophia ) then
19558: LD_EXP 32
19562: PPUSH
19563: CALL_OW 302
19567: IFFALSE 19593
// begin Say ( Sophia , DS-06-End-15 ) ;
19569: LD_EXP 32
19573: PPUSH
19574: LD_STRING DS-06-End-15
19576: PPUSH
19577: CALL_OW 88
// Say ( Kaia , DK-06-End-16 ) ;
19581: LD_EXP 31
19585: PPUSH
19586: LD_STRING DK-06-End-16
19588: PPUSH
19589: CALL_OW 88
// end ; Say ( Givi , DG-06-End-17 ) ;
19593: LD_EXP 27
19597: PPUSH
19598: LD_STRING DG-06-End-17
19600: PPUSH
19601: CALL_OW 88
// Say ( Givi , DG-06-End-18 ) ;
19605: LD_EXP 27
19609: PPUSH
19610: LD_STRING DG-06-End-18
19612: PPUSH
19613: CALL_OW 88
// Say ( Givi , DG-06-End-19 ) ;
19617: LD_EXP 27
19621: PPUSH
19622: LD_STRING DG-06-End-19
19624: PPUSH
19625: CALL_OW 88
// end ;
19629: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
19630: LD_EXP 22
19634: IFFALSE 19762
19636: GO 19638
19638: DISABLE
19639: LD_INT 0
19641: PPUSH
19642: PPUSH
// begin enable ;
19643: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
19644: LD_ADDR_OWVAR 47
19648: PUSH
19649: LD_STRING #X106-2
19651: PUSH
19652: LD_EXP 23
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
19661: LD_ADDR_EXP 23
19665: PUSH
19666: LD_EXP 23
19670: PUSH
19671: LD_INT 35
19673: MINUS
19674: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
19675: LD_ADDR_VAR 0 2
19679: PUSH
19680: LD_INT 17
19682: PPUSH
19683: LD_INT 22
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 21
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 23
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: PPUSH
19718: CALL_OW 71
19722: ST_TO_ADDR
// if not outsiders then
19723: LD_VAR 0 2
19727: NOT
19728: IFFALSE 19745
// begin escapeAllowed := false ;
19730: LD_ADDR_EXP 22
19734: PUSH
19735: LD_INT 0
19737: ST_TO_ADDR
// disable ;
19738: DISABLE
// MissionWin ;
19739: CALL 19765 0 0
// exit ;
19743: GO 19762
// end ; if escapeTimer <= 0 0$00 then
19745: LD_EXP 23
19749: PUSH
19750: LD_INT 0
19752: LESSEQUAL
19753: IFFALSE 19762
// YouLost ( TimeOut ) ;
19755: LD_STRING TimeOut
19757: PPUSH
19758: CALL_OW 104
// end ;
19762: PPOPN 2
19764: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
19765: LD_INT 0
19767: PPUSH
19768: PPUSH
19769: PPUSH
19770: PPUSH
19771: PPUSH
// Say ( Heike , DH-06-End-20 ) ;
19772: LD_EXP 26
19776: PPUSH
19777: LD_STRING DH-06-End-20
19779: PPUSH
19780: CALL_OW 88
// if rolfDied then
19784: LD_EXP 11
19788: IFFALSE 19803
// AddMedal ( med1 , - 1 ) else
19790: LD_STRING med1
19792: PPUSH
19793: LD_INT 1
19795: NEG
19796: PPUSH
19797: CALL_OW 101
19801: GO 19813
// AddMedal ( med1 , 1 ) ;
19803: LD_STRING med1
19805: PPUSH
19806: LD_INT 1
19808: PPUSH
19809: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
19813: LD_EXP 20
19817: PUSH
19818: LD_EXP 14
19822: AND
19823: IFFALSE 19837
// AddMedal ( med2 , 1 ) else
19825: LD_STRING med2
19827: PPUSH
19828: LD_INT 1
19830: PPUSH
19831: CALL_OW 101
19835: GO 19886
// if omarHasVehicles then
19837: LD_EXP 20
19841: IFFALSE 19856
// AddMedal ( med2 , - 1 ) else
19843: LD_STRING med2
19845: PPUSH
19846: LD_INT 1
19848: NEG
19849: PPUSH
19850: CALL_OW 101
19854: GO 19886
// if rolfHasVehicles then
19856: LD_EXP 14
19860: IFFALSE 19875
// AddMedal ( med2 , - 2 ) else
19862: LD_STRING med2
19864: PPUSH
19865: LD_INT 2
19867: NEG
19868: PPUSH
19869: CALL_OW 101
19873: GO 19886
// AddMedal ( med2 , - 3 ) ;
19875: LD_STRING med2
19877: PPUSH
19878: LD_INT 3
19880: NEG
19881: PPUSH
19882: CALL_OW 101
// if ruLoseCounter >= [ 40 , 55 , 70 ] [ Difficulty ] and heikeLoseCounter = 0 then
19886: LD_EXP 5
19890: PUSH
19891: LD_INT 40
19893: PUSH
19894: LD_INT 55
19896: PUSH
19897: LD_INT 70
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: LIST
19904: PUSH
19905: LD_OWVAR 67
19909: ARRAY
19910: GREATEREQUAL
19911: PUSH
19912: LD_EXP 24
19916: PUSH
19917: LD_INT 0
19919: EQUAL
19920: AND
19921: IFFALSE 19935
// AddMedal ( med3 , 1 ) else
19923: LD_STRING med3
19925: PPUSH
19926: LD_INT 1
19928: PPUSH
19929: CALL_OW 101
19933: GO 19965
// if heikeLoseCounter then
19935: LD_EXP 24
19939: IFFALSE 19954
// AddMedal ( med3 , - 1 ) else
19941: LD_STRING med3
19943: PPUSH
19944: LD_INT 1
19946: NEG
19947: PPUSH
19948: CALL_OW 101
19952: GO 19965
// AddMedal ( med3 , - 2 ) ;
19954: LD_STRING med3
19956: PPUSH
19957: LD_INT 2
19959: NEG
19960: PPUSH
19961: CALL_OW 101
// GiveMedals ( MAIN ) ;
19965: LD_STRING MAIN
19967: PPUSH
19968: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
19972: LD_INT 22
19974: PUSH
19975: LD_INT 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 23
19984: PUSH
19985: LD_INT 2
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 21
19994: PUSH
19995: LD_INT 1
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: LIST
20006: PPUSH
20007: CALL_OW 69
20011: PPUSH
20012: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
20016: LD_EXP 26
20020: PPUSH
20021: LD_STRING 06_Heike
20023: PPUSH
20024: CALL_OW 38
// if Aviradze then
20028: LD_EXP 38
20032: IFFALSE 20046
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
20034: LD_EXP 38
20038: PPUSH
20039: LD_STRING 06_Aviradze
20041: PPUSH
20042: CALL_OW 38
// if Ibrahim then
20046: LD_EXP 29
20050: IFFALSE 20064
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
20052: LD_EXP 29
20056: PPUSH
20057: LD_STRING 06_Ibrahim
20059: PPUSH
20060: CALL_OW 38
// if Kamil then
20064: LD_EXP 30
20068: IFFALSE 20082
// SaveCharacters ( Kamil , 06_Kamil ) ;
20070: LD_EXP 30
20074: PPUSH
20075: LD_STRING 06_Kamil
20077: PPUSH
20078: CALL_OW 38
// if Sophia then
20082: LD_EXP 32
20086: IFFALSE 20100
// SaveCharacters ( Sophia , 06_Sophia ) ;
20088: LD_EXP 32
20092: PPUSH
20093: LD_STRING 06_Sophia
20095: PPUSH
20096: CALL_OW 38
// if Kaia then
20100: LD_EXP 31
20104: IFFALSE 20118
// SaveCharacters ( Kaia , 06_Kaia ) ;
20106: LD_EXP 31
20110: PPUSH
20111: LD_STRING 06_Kaia
20113: PPUSH
20114: CALL_OW 38
// if Givi then
20118: LD_EXP 27
20122: IFFALSE 20136
// SaveCharacters ( Givi , 06_Givi ) ;
20124: LD_EXP 27
20128: PPUSH
20129: LD_STRING 06_Givi
20131: PPUSH
20132: CALL_OW 38
// if Mike then
20136: LD_EXP 28
20140: IFFALSE 20154
// SaveCharacters ( Mike , 06_Mike ) ;
20142: LD_EXP 28
20146: PPUSH
20147: LD_STRING 06_Mike
20149: PPUSH
20150: CALL_OW 38
// if Markov then
20154: LD_EXP 33
20158: IFFALSE 20172
// SaveCharacters ( Markov , 06_Markov ) ;
20160: LD_EXP 33
20164: PPUSH
20165: LD_STRING 06_Markov
20167: PPUSH
20168: CALL_OW 38
// if Kurt then
20172: LD_EXP 37
20176: IFFALSE 20190
// SaveCharacters ( Kurt , 06_Kurt ) ;
20178: LD_EXP 37
20182: PPUSH
20183: LD_STRING 06_Kurt
20185: PPUSH
20186: CALL_OW 38
// if heikeSecondSquad then
20190: LD_EXP 41
20194: IFFALSE 20208
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
20196: LD_EXP 41
20200: PPUSH
20201: LD_STRING 06_others
20203: PPUSH
20204: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
20208: LD_ADDR_VAR 0 3
20212: PUSH
20213: LD_INT 22
20215: PUSH
20216: LD_INT 2
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 23
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PPUSH
20237: CALL_OW 69
20241: ST_TO_ADDR
// if tmp then
20242: LD_VAR 0 3
20246: IFFALSE 20260
// SaveCharacters ( tmp , 06_apes ) ;
20248: LD_VAR 0 3
20252: PPUSH
20253: LD_STRING 06_apes
20255: PPUSH
20256: CALL_OW 38
// if Rolf then
20260: LD_EXP 39
20264: IFFALSE 20278
// SaveCharacters ( Rolf , 06_Rolf ) ;
20266: LD_EXP 39
20270: PPUSH
20271: LD_STRING 06_Rolf
20273: PPUSH
20274: CALL_OW 38
// tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
20278: LD_ADDR_VAR 0 3
20282: PUSH
20283: LD_INT 17
20285: PPUSH
20286: LD_INT 21
20288: PUSH
20289: LD_INT 2
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PPUSH
20296: CALL_OW 70
20300: ST_TO_ADDR
// if tmp then
20301: LD_VAR 0 3
20305: IFFALSE 20599
// begin tmp2 := [ ] ;
20307: LD_ADDR_VAR 0 4
20311: PUSH
20312: EMPTY
20313: ST_TO_ADDR
// for i in tmp do
20314: LD_ADDR_VAR 0 2
20318: PUSH
20319: LD_VAR 0 3
20323: PUSH
20324: FOR_IN
20325: IFFALSE 20585
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
20327: LD_VAR 0 2
20331: PPUSH
20332: CALL_OW 264
20336: PUSH
20337: LD_INT 32
20339: PUSH
20340: LD_INT 12
20342: PUSH
20343: LD_INT 51
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: LIST
20350: IN
20351: IFFALSE 20488
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
20353: LD_ADDR_VAR 0 5
20357: PUSH
20358: LD_VAR 0 2
20362: PPUSH
20363: LD_INT 1
20365: PPUSH
20366: CALL_OW 289
20370: PUSH
20371: LD_VAR 0 2
20375: PPUSH
20376: LD_INT 2
20378: PPUSH
20379: CALL_OW 289
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
20388: LD_ADDR_VAR 0 4
20392: PUSH
20393: LD_VAR 0 4
20397: PPUSH
20398: LD_VAR 0 4
20402: PUSH
20403: LD_INT 1
20405: PLUS
20406: PPUSH
20407: LD_VAR 0 2
20411: PPUSH
20412: CALL_OW 265
20416: PUSH
20417: LD_VAR 0 2
20421: PPUSH
20422: CALL_OW 262
20426: PUSH
20427: LD_VAR 0 2
20431: PPUSH
20432: CALL_OW 263
20436: PUSH
20437: LD_VAR 0 2
20441: PPUSH
20442: CALL_OW 264
20446: PUSH
20447: LD_VAR 0 2
20451: PPUSH
20452: CALL_OW 248
20456: PUSH
20457: LD_VAR 0 2
20461: PPUSH
20462: CALL_OW 256
20466: PUSH
20467: LD_VAR 0 5
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: PPUSH
20481: CALL_OW 1
20485: ST_TO_ADDR
// end else
20486: GO 20583
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
20488: LD_ADDR_VAR 0 4
20492: PUSH
20493: LD_VAR 0 4
20497: PPUSH
20498: LD_VAR 0 4
20502: PUSH
20503: LD_INT 1
20505: PLUS
20506: PPUSH
20507: LD_VAR 0 2
20511: PPUSH
20512: CALL_OW 265
20516: PUSH
20517: LD_VAR 0 2
20521: PPUSH
20522: CALL_OW 262
20526: PUSH
20527: LD_VAR 0 2
20531: PPUSH
20532: CALL_OW 263
20536: PUSH
20537: LD_VAR 0 2
20541: PPUSH
20542: CALL_OW 264
20546: PUSH
20547: LD_VAR 0 2
20551: PPUSH
20552: CALL_OW 248
20556: PUSH
20557: LD_VAR 0 2
20561: PPUSH
20562: CALL_OW 256
20566: PUSH
20567: EMPTY
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: PPUSH
20578: CALL_OW 1
20582: ST_TO_ADDR
20583: GO 20324
20585: POP
20586: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
20587: LD_VAR 0 4
20591: PPUSH
20592: LD_STRING 06_Vehicles
20594: PPUSH
20595: CALL_OW 39
// end ; YouWin ;
20599: CALL_OW 103
// end ; end_of_file
20603: LD_VAR 0 1
20607: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
20608: LD_INT 0
20610: PPUSH
// begin if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
20611: LD_VAR 0 1
20615: PPUSH
20616: CALL_OW 255
20620: PUSH
20621: LD_INT 2
20623: EQUAL
20624: PUSH
20625: LD_OWVAR 52
20629: AND
20630: PUSH
20631: LD_VAR 0 1
20635: PPUSH
20636: CALL_OW 263
20640: PUSH
20641: LD_INT 1
20643: EQUAL
20644: AND
20645: IFFALSE 20700
// begin driver := IsDrivenBy ( vehicle ) ;
20647: LD_ADDR_VAR 0 3
20651: PUSH
20652: LD_VAR 0 1
20656: PPUSH
20657: CALL_OW 311
20661: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
20662: LD_VAR 0 1
20666: PPUSH
20667: LD_INT 211
20669: PPUSH
20670: LD_INT 101
20672: PPUSH
20673: CALL_OW 111
// AddComExitVehicle ( driver ) ;
20677: LD_VAR 0 3
20681: PPUSH
20682: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20686: LD_VAR 0 3
20690: PPUSH
20691: LD_VAR 0 2
20695: PPUSH
20696: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
20700: LD_VAR 0 1
20704: PPUSH
20705: CALL_OW 255
20709: PUSH
20710: LD_INT 3
20712: EQUAL
20713: IFFALSE 20744
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
20715: LD_ADDR_EXP 51
20719: PUSH
20720: LD_EXP 51
20724: PPUSH
20725: LD_EXP 51
20729: PUSH
20730: LD_INT 1
20732: PLUS
20733: PPUSH
20734: LD_VAR 0 1
20738: PPUSH
20739: CALL_OW 1
20743: ST_TO_ADDR
// end ;
20744: PPOPN 3
20746: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
20747: LD_VAR 0 1
20751: PPUSH
20752: CALL_OW 255
20756: PUSH
20757: LD_INT 8
20759: EQUAL
20760: PUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: CALL_OW 266
20770: PUSH
20771: LD_INT 4
20773: EQUAL
20774: AND
20775: IFFALSE 20786
// ComUpgrade ( b ) ;
20777: LD_VAR 0 1
20781: PPUSH
20782: CALL_OW 146
// end ;
20786: PPOPN 1
20788: END
// on UnitDestroyed ( un ) do begin if un = Heike then
20789: LD_VAR 0 1
20793: PUSH
20794: LD_EXP 26
20798: EQUAL
20799: IFFALSE 20808
// YouLost ( Heike ) ;
20801: LD_STRING Heike
20803: PPUSH
20804: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
20808: LD_VAR 0 1
20812: PUSH
20813: LD_INT 22
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 23
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PPUSH
20837: CALL_OW 69
20841: IN
20842: IFFALSE 20858
// heikeLoseCounter := heikeLoseCounter + 1 ;
20844: LD_ADDR_EXP 24
20848: PUSH
20849: LD_EXP 24
20853: PUSH
20854: LD_INT 1
20856: PLUS
20857: ST_TO_ADDR
// if un = arDepot then
20858: LD_VAR 0 1
20862: PUSH
20863: LD_EXP 40
20867: EQUAL
20868: IFFALSE 20877
// YouLost ( Base ) ;
20870: LD_STRING Base
20872: PPUSH
20873: CALL_OW 104
// if un = Rolf then
20877: LD_VAR 0 1
20881: PUSH
20882: LD_EXP 39
20886: EQUAL
20887: IFFALSE 20897
// rolfDied := true ;
20889: LD_ADDR_EXP 11
20893: PUSH
20894: LD_INT 1
20896: ST_TO_ADDR
// if un in rolfSquad then
20897: LD_VAR 0 1
20901: PUSH
20902: LD_EXP 43
20906: IN
20907: IFFALSE 20925
// rolfSquad := rolfSquad diff un ;
20909: LD_ADDR_EXP 43
20913: PUSH
20914: LD_EXP 43
20918: PUSH
20919: LD_VAR 0 1
20923: DIFF
20924: ST_TO_ADDR
// if un in omarSquad then
20925: LD_VAR 0 1
20929: PUSH
20930: LD_EXP 44
20934: IN
20935: IFFALSE 20953
// omarSquad := omarSquad diff un ;
20937: LD_ADDR_EXP 44
20941: PUSH
20942: LD_EXP 44
20946: PUSH
20947: LD_VAR 0 1
20951: DIFF
20952: ST_TO_ADDR
// if GetSide ( un ) = 3 then
20953: LD_VAR 0 1
20957: PPUSH
20958: CALL_OW 255
20962: PUSH
20963: LD_INT 3
20965: EQUAL
20966: IFFALSE 20982
// ruLoseCounter := ruLoseCounter + 1 ;
20968: LD_ADDR_EXP 5
20972: PUSH
20973: LD_EXP 5
20977: PUSH
20978: LD_INT 1
20980: PLUS
20981: ST_TO_ADDR
// if un in ruAttackers then
20982: LD_VAR 0 1
20986: PUSH
20987: LD_EXP 52
20991: IN
20992: IFFALSE 21010
// ruAttackers := ruAttackers diff un ;
20994: LD_ADDR_EXP 52
20998: PUSH
20999: LD_EXP 52
21003: PUSH
21004: LD_VAR 0 1
21008: DIFF
21009: ST_TO_ADDR
// end ;
21010: PPOPN 1
21012: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
21013: LD_INT 0
21015: PPUSH
21016: PPUSH
21017: PPUSH
21018: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
21019: LD_VAR 0 1
21023: PPUSH
21024: CALL_OW 255
21028: PUSH
21029: LD_INT 3
21031: EQUAL
21032: PUSH
21033: LD_VAR 0 1
21037: PUSH
21038: LD_EXP 52
21042: IN
21043: NOT
21044: AND
21045: IFFALSE 21541
// begin if not IsInArea ( un , ruMainBase ) then
21047: LD_VAR 0 1
21051: PPUSH
21052: LD_INT 10
21054: PPUSH
21055: CALL_OW 308
21059: NOT
21060: IFFALSE 21074
// ComMoveToArea ( un , ruMainBase ) ;
21062: LD_VAR 0 1
21066: PPUSH
21067: LD_INT 10
21069: PPUSH
21070: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
21074: LD_INT 35
21076: PPUSH
21077: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
21081: LD_VAR 0 1
21085: PPUSH
21086: CALL_OW 302
21090: NOT
21091: PUSH
21092: LD_VAR 0 1
21096: PPUSH
21097: LD_INT 10
21099: PPUSH
21100: CALL_OW 308
21104: OR
21105: IFFALSE 21074
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
21107: LD_ADDR_EXP 50
21111: PUSH
21112: LD_EXP 50
21116: PPUSH
21117: LD_EXP 50
21121: PUSH
21122: LD_INT 1
21124: PLUS
21125: PPUSH
21126: LD_VAR 0 1
21130: PPUSH
21131: CALL_OW 1
21135: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
21136: LD_ADDR_VAR 0 8
21140: PUSH
21141: LD_INT 72
21143: PUSH
21144: LD_INT 12
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: ST_TO_ADDR
// if tmp then
21151: LD_VAR 0 8
21155: IFFALSE 21270
// for i in tmp do
21157: LD_ADDR_VAR 0 5
21161: PUSH
21162: LD_VAR 0 8
21166: PUSH
21167: FOR_IN
21168: IFFALSE 21268
// if UnitsInside ( i ) < 6 then
21170: LD_VAR 0 5
21174: PPUSH
21175: CALL_OW 313
21179: PUSH
21180: LD_INT 6
21182: LESS
21183: IFFALSE 21266
// begin AddComEnterUnit ( un , i ) ;
21185: LD_VAR 0 1
21189: PPUSH
21190: LD_VAR 0 5
21194: PPUSH
21195: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
21199: LD_VAR 0 8
21203: PPUSH
21204: LD_INT 22
21206: PUSH
21207: LD_INT 23
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: PPUSH
21217: LD_INT 2
21219: PPUSH
21220: CALL_OW 12
21224: ARRAY
21225: PPUSH
21226: LD_INT 1
21228: PPUSH
21229: LD_INT 1
21231: PPUSH
21232: LD_INT 44
21234: PUSH
21235: LD_INT 46
21237: PUSH
21238: LD_INT 47
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 1
21248: PPUSH
21249: LD_INT 3
21251: PPUSH
21252: CALL_OW 12
21256: ARRAY
21257: PPUSH
21258: CALL_OW 185
// exit ;
21262: POP
21263: POP
21264: GO 21541
// end ;
21266: GO 21167
21268: POP
21269: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
21270: LD_ADDR_VAR 0 8
21274: PUSH
21275: LD_INT 10
21277: PPUSH
21278: LD_INT 22
21280: PUSH
21281: LD_INT 3
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 50
21290: PUSH
21291: EMPTY
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: LD_INT 30
21299: PUSH
21300: LD_INT 4
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 30
21309: PUSH
21310: LD_INT 5
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 30
21319: PUSH
21320: LD_INT 32
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 30
21329: PUSH
21330: LD_INT 31
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: PPUSH
21349: CALL_OW 70
21353: ST_TO_ADDR
// if not tmp then
21354: LD_VAR 0 8
21358: NOT
21359: IFFALSE 21378
// begin ComMoveXY ( un , 83 , 133 ) ;
21361: LD_VAR 0 1
21365: PPUSH
21366: LD_INT 83
21368: PPUSH
21369: LD_INT 133
21371: PPUSH
21372: CALL_OW 111
// exit ;
21376: GO 21541
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
21378: LD_ADDR_VAR 0 6
21382: PUSH
21383: LD_VAR 0 1
21387: PPUSH
21388: LD_VAR 0 8
21392: PPUSH
21393: LD_INT 1
21395: PPUSH
21396: LD_INT 1
21398: PPUSH
21399: CALL 27717 0 4
21403: PUSH
21404: FOR_IN
21405: IFFALSE 21539
// begin case GetBType ( b ) of b_armoury , b_barracks :
21407: LD_VAR 0 6
21411: PPUSH
21412: CALL_OW 266
21416: PUSH
21417: LD_INT 4
21419: DOUBLE
21420: EQUAL
21421: IFTRUE 21431
21423: LD_INT 5
21425: DOUBLE
21426: EQUAL
21427: IFTRUE 21431
21429: GO 21442
21431: POP
// p := 6 ; b_breastwork , b_bunker :
21432: LD_ADDR_VAR 0 7
21436: PUSH
21437: LD_INT 6
21439: ST_TO_ADDR
21440: GO 21468
21442: LD_INT 31
21444: DOUBLE
21445: EQUAL
21446: IFTRUE 21456
21448: LD_INT 32
21450: DOUBLE
21451: EQUAL
21452: IFTRUE 21456
21454: GO 21467
21456: POP
// p := 1 ; end ;
21457: LD_ADDR_VAR 0 7
21461: PUSH
21462: LD_INT 1
21464: ST_TO_ADDR
21465: GO 21468
21467: POP
// if UnitsInside ( b ) < p then
21468: LD_VAR 0 6
21472: PPUSH
21473: CALL_OW 313
21477: PUSH
21478: LD_VAR 0 7
21482: LESS
21483: IFFALSE 21537
// begin ComEnterUnit ( un , b ) ;
21485: LD_VAR 0 1
21489: PPUSH
21490: LD_VAR 0 6
21494: PPUSH
21495: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
21499: LD_VAR 0 6
21503: PPUSH
21504: CALL_OW 266
21508: PUSH
21509: LD_INT 4
21511: PUSH
21512: LD_INT 5
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: IN
21519: IFFALSE 21533
// AddComChangeProfession ( un , class_soldier ) ;
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_INT 1
21528: PPUSH
21529: CALL_OW 183
// exit ;
21533: POP
21534: POP
21535: GO 21541
// end ; end ;
21537: GO 21404
21539: POP
21540: POP
// end ; end ;
21541: PPOPN 8
21543: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
21544: LD_INT 0
21546: PPUSH
21547: PPUSH
21548: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
21549: LD_VAR 0 2
21553: PPUSH
21554: CALL_OW 255
21558: PUSH
21559: LD_INT 3
21561: EQUAL
21562: PUSH
21563: LD_VAR 0 2
21567: PPUSH
21568: CALL_OW 257
21572: PUSH
21573: LD_INT 1
21575: EQUAL
21576: AND
21577: PUSH
21578: LD_VAR 0 2
21582: PUSH
21583: LD_EXP 50
21587: IN
21588: NOT
21589: AND
21590: IFFALSE 21903
// begin ComMoveToArea ( un , ruMainBase ) ;
21592: LD_VAR 0 2
21596: PPUSH
21597: LD_INT 10
21599: PPUSH
21600: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
21604: LD_INT 35
21606: PPUSH
21607: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
21611: LD_VAR 0 2
21615: PPUSH
21616: CALL_OW 302
21620: NOT
21621: PUSH
21622: LD_VAR 0 2
21626: PPUSH
21627: LD_INT 10
21629: PPUSH
21630: CALL_OW 308
21634: OR
21635: IFFALSE 21604
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
21637: LD_ADDR_EXP 50
21641: PUSH
21642: LD_EXP 50
21646: PPUSH
21647: LD_EXP 50
21651: PUSH
21652: LD_INT 1
21654: PLUS
21655: PPUSH
21656: LD_VAR 0 2
21660: PPUSH
21661: CALL_OW 1
21665: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
21666: LD_ADDR_VAR 0 4
21670: PUSH
21671: LD_INT 10
21673: PPUSH
21674: LD_INT 22
21676: PUSH
21677: LD_INT 3
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 50
21686: PUSH
21687: EMPTY
21688: LIST
21689: PUSH
21690: LD_INT 2
21692: PUSH
21693: LD_INT 30
21695: PUSH
21696: LD_INT 4
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 30
21705: PUSH
21706: LD_INT 5
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 30
21715: PUSH
21716: LD_INT 32
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 30
21725: PUSH
21726: LD_INT 31
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: LIST
21744: PPUSH
21745: CALL_OW 70
21749: ST_TO_ADDR
// if not tmp then
21750: LD_VAR 0 4
21754: NOT
21755: IFFALSE 21774
// begin ComMoveXY ( un , 83 , 133 ) ;
21757: LD_VAR 0 2
21761: PPUSH
21762: LD_INT 83
21764: PPUSH
21765: LD_INT 133
21767: PPUSH
21768: CALL_OW 111
// exit ;
21772: GO 22152
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
21774: LD_ADDR_VAR 0 5
21778: PUSH
21779: LD_VAR 0 2
21783: PPUSH
21784: LD_VAR 0 4
21788: PPUSH
21789: LD_INT 1
21791: PPUSH
21792: LD_INT 1
21794: PPUSH
21795: CALL 27717 0 4
21799: PUSH
21800: FOR_IN
21801: IFFALSE 21901
// begin case GetBType ( b ) of b_armoury , b_barracks :
21803: LD_VAR 0 5
21807: PPUSH
21808: CALL_OW 266
21812: PUSH
21813: LD_INT 4
21815: DOUBLE
21816: EQUAL
21817: IFTRUE 21827
21819: LD_INT 5
21821: DOUBLE
21822: EQUAL
21823: IFTRUE 21827
21825: GO 21838
21827: POP
// p := 6 ; b_breastwork , b_bunker :
21828: LD_ADDR_VAR 0 3
21832: PUSH
21833: LD_INT 6
21835: ST_TO_ADDR
21836: GO 21864
21838: LD_INT 31
21840: DOUBLE
21841: EQUAL
21842: IFTRUE 21852
21844: LD_INT 32
21846: DOUBLE
21847: EQUAL
21848: IFTRUE 21852
21850: GO 21863
21852: POP
// p := 1 ; end ;
21853: LD_ADDR_VAR 0 3
21857: PUSH
21858: LD_INT 1
21860: ST_TO_ADDR
21861: GO 21864
21863: POP
// if UnitsInside ( b ) < p then
21864: LD_VAR 0 5
21868: PPUSH
21869: CALL_OW 313
21873: PUSH
21874: LD_VAR 0 3
21878: LESS
21879: IFFALSE 21899
// begin ComEnterUnit ( un , b ) ;
21881: LD_VAR 0 2
21885: PPUSH
21886: LD_VAR 0 5
21890: PPUSH
21891: CALL_OW 120
// exit ;
21895: POP
21896: POP
21897: GO 22152
// end ; end ;
21899: GO 21800
21901: POP
21902: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
21903: LD_VAR 0 2
21907: PUSH
21908: LD_EXP 50
21912: IN
21913: PUSH
21914: LD_VAR 0 2
21918: PPUSH
21919: CALL_OW 257
21923: PUSH
21924: LD_INT 1
21926: EQUAL
21927: AND
21928: IFFALSE 22152
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
21930: LD_ADDR_VAR 0 4
21934: PUSH
21935: LD_INT 10
21937: PPUSH
21938: LD_INT 22
21940: PUSH
21941: LD_INT 3
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 50
21950: PUSH
21951: EMPTY
21952: LIST
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 30
21959: PUSH
21960: LD_INT 4
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 30
21969: PUSH
21970: LD_INT 5
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 30
21979: PUSH
21980: LD_INT 32
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 30
21989: PUSH
21990: LD_INT 31
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: LIST
22008: PPUSH
22009: CALL_OW 70
22013: ST_TO_ADDR
// if not tmp then
22014: LD_VAR 0 4
22018: NOT
22019: IFFALSE 22023
// exit ;
22021: GO 22152
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
22023: LD_ADDR_VAR 0 5
22027: PUSH
22028: LD_VAR 0 2
22032: PPUSH
22033: LD_VAR 0 4
22037: PPUSH
22038: LD_INT 1
22040: PPUSH
22041: LD_INT 1
22043: PPUSH
22044: CALL 27717 0 4
22048: PUSH
22049: FOR_IN
22050: IFFALSE 22150
// begin case GetBType ( b ) of b_armoury , b_barracks :
22052: LD_VAR 0 5
22056: PPUSH
22057: CALL_OW 266
22061: PUSH
22062: LD_INT 4
22064: DOUBLE
22065: EQUAL
22066: IFTRUE 22076
22068: LD_INT 5
22070: DOUBLE
22071: EQUAL
22072: IFTRUE 22076
22074: GO 22087
22076: POP
// p := 6 ; b_breastwork , b_bunker :
22077: LD_ADDR_VAR 0 3
22081: PUSH
22082: LD_INT 6
22084: ST_TO_ADDR
22085: GO 22113
22087: LD_INT 31
22089: DOUBLE
22090: EQUAL
22091: IFTRUE 22101
22093: LD_INT 32
22095: DOUBLE
22096: EQUAL
22097: IFTRUE 22101
22099: GO 22112
22101: POP
// p := 1 ; end ;
22102: LD_ADDR_VAR 0 3
22106: PUSH
22107: LD_INT 1
22109: ST_TO_ADDR
22110: GO 22113
22112: POP
// if UnitsInside ( b ) < p then
22113: LD_VAR 0 5
22117: PPUSH
22118: CALL_OW 313
22122: PUSH
22123: LD_VAR 0 3
22127: LESS
22128: IFFALSE 22148
// begin ComEnterUnit ( un , b ) ;
22130: LD_VAR 0 2
22134: PPUSH
22135: LD_VAR 0 5
22139: PPUSH
22140: CALL_OW 120
// exit ;
22144: POP
22145: POP
22146: GO 22152
// end ; end ;
22148: GO 22049
22150: POP
22151: POP
// end ; end ;
22152: PPOPN 5
22154: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
22155: LD_VAR 0 1
22159: PUSH
22160: LD_INT 2
22162: EQUAL
22163: PUSH
22164: LD_VAR 0 2
22168: PUSH
22169: LD_INT 5
22171: PUSH
22172: LD_INT 8
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: IN
22179: AND
22180: IFFALSE 22189
// YouLost ( FriendlyFire ) ;
22182: LD_STRING FriendlyFire
22184: PPUSH
22185: CALL_OW 104
// end ;
22189: PPOPN 2
22191: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
22192: LD_VAR 0 1
22196: PPUSH
22197: CALL_OW 255
22201: PUSH
22202: LD_INT 8
22204: EQUAL
22205: PUSH
22206: LD_VAR 0 1
22210: PPUSH
22211: CALL_OW 266
22215: PUSH
22216: LD_INT 5
22218: EQUAL
22219: AND
22220: IFFALSE 22234
// SetClass ( unit , class_mortar ) ;
22222: LD_VAR 0 2
22226: PPUSH
22227: LD_INT 8
22229: PPUSH
22230: CALL_OW 336
// end ; end_of_file
22234: PPOPN 2
22236: END
// every 0 0$30 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 ] [ Difficulty ] do
22237: LD_INT 6
22239: PPUSH
22240: LD_INT 1
22242: PPUSH
22243: CALL_OW 287
22247: PUSH
22248: LD_INT 300
22250: PUSH
22251: LD_INT 250
22253: PUSH
22254: LD_INT 200
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: PUSH
22262: LD_OWVAR 67
22266: ARRAY
22267: LESS
22268: IFFALSE 22295
22270: GO 22272
22272: DISABLE
// begin enable ;
22273: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
22274: LD_INT 1
22276: PPUSH
22277: LD_INT 5
22279: PPUSH
22280: CALL_OW 12
22284: PPUSH
22285: LD_INT 6
22287: PPUSH
22288: LD_INT 1
22290: PPUSH
22291: CALL_OW 55
// end ; end_of_file
22295: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22296: LD_INT 0
22298: PPUSH
22299: PPUSH
// if exist_mode then
22300: LD_VAR 0 2
22304: IFFALSE 22329
// unit := CreateCharacter ( prefix & ident ) else
22306: LD_ADDR_VAR 0 5
22310: PUSH
22311: LD_VAR 0 3
22315: PUSH
22316: LD_VAR 0 1
22320: STR
22321: PPUSH
22322: CALL_OW 34
22326: ST_TO_ADDR
22327: GO 22344
// unit := NewCharacter ( ident ) ;
22329: LD_ADDR_VAR 0 5
22333: PUSH
22334: LD_VAR 0 1
22338: PPUSH
22339: CALL_OW 25
22343: ST_TO_ADDR
// result := unit ;
22344: LD_ADDR_VAR 0 4
22348: PUSH
22349: LD_VAR 0 5
22353: ST_TO_ADDR
// end ;
22354: LD_VAR 0 4
22358: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22359: LD_INT 0
22361: PPUSH
22362: PPUSH
// if not side or not nation then
22363: LD_VAR 0 1
22367: NOT
22368: PUSH
22369: LD_VAR 0 2
22373: NOT
22374: OR
22375: IFFALSE 22379
// exit ;
22377: GO 23147
// case nation of nation_american :
22379: LD_VAR 0 2
22383: PUSH
22384: LD_INT 1
22386: DOUBLE
22387: EQUAL
22388: IFTRUE 22392
22390: GO 22606
22392: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22393: LD_ADDR_VAR 0 4
22397: PUSH
22398: LD_INT 35
22400: PUSH
22401: LD_INT 45
22403: PUSH
22404: LD_INT 46
22406: PUSH
22407: LD_INT 47
22409: PUSH
22410: LD_INT 82
22412: PUSH
22413: LD_INT 83
22415: PUSH
22416: LD_INT 84
22418: PUSH
22419: LD_INT 85
22421: PUSH
22422: LD_INT 86
22424: PUSH
22425: LD_INT 1
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: LD_INT 6
22433: PUSH
22434: LD_INT 15
22436: PUSH
22437: LD_INT 16
22439: PUSH
22440: LD_INT 7
22442: PUSH
22443: LD_INT 12
22445: PUSH
22446: LD_INT 13
22448: PUSH
22449: LD_INT 10
22451: PUSH
22452: LD_INT 14
22454: PUSH
22455: LD_INT 20
22457: PUSH
22458: LD_INT 21
22460: PUSH
22461: LD_INT 22
22463: PUSH
22464: LD_INT 25
22466: PUSH
22467: LD_INT 32
22469: PUSH
22470: LD_INT 27
22472: PUSH
22473: LD_INT 36
22475: PUSH
22476: LD_INT 69
22478: PUSH
22479: LD_INT 39
22481: PUSH
22482: LD_INT 34
22484: PUSH
22485: LD_INT 40
22487: PUSH
22488: LD_INT 48
22490: PUSH
22491: LD_INT 49
22493: PUSH
22494: LD_INT 50
22496: PUSH
22497: LD_INT 51
22499: PUSH
22500: LD_INT 52
22502: PUSH
22503: LD_INT 53
22505: PUSH
22506: LD_INT 54
22508: PUSH
22509: LD_INT 55
22511: PUSH
22512: LD_INT 56
22514: PUSH
22515: LD_INT 57
22517: PUSH
22518: LD_INT 58
22520: PUSH
22521: LD_INT 59
22523: PUSH
22524: LD_INT 60
22526: PUSH
22527: LD_INT 61
22529: PUSH
22530: LD_INT 62
22532: PUSH
22533: LD_INT 80
22535: PUSH
22536: LD_INT 82
22538: PUSH
22539: LD_INT 83
22541: PUSH
22542: LD_INT 84
22544: PUSH
22545: LD_INT 85
22547: PUSH
22548: LD_INT 86
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: ST_TO_ADDR
22604: GO 23071
22606: LD_INT 2
22608: DOUBLE
22609: EQUAL
22610: IFTRUE 22614
22612: GO 22840
22614: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22615: LD_ADDR_VAR 0 4
22619: PUSH
22620: LD_INT 35
22622: PUSH
22623: LD_INT 45
22625: PUSH
22626: LD_INT 46
22628: PUSH
22629: LD_INT 47
22631: PUSH
22632: LD_INT 82
22634: PUSH
22635: LD_INT 83
22637: PUSH
22638: LD_INT 84
22640: PUSH
22641: LD_INT 85
22643: PUSH
22644: LD_INT 87
22646: PUSH
22647: LD_INT 70
22649: PUSH
22650: LD_INT 1
22652: PUSH
22653: LD_INT 11
22655: PUSH
22656: LD_INT 3
22658: PUSH
22659: LD_INT 4
22661: PUSH
22662: LD_INT 5
22664: PUSH
22665: LD_INT 6
22667: PUSH
22668: LD_INT 15
22670: PUSH
22671: LD_INT 18
22673: PUSH
22674: LD_INT 7
22676: PUSH
22677: LD_INT 17
22679: PUSH
22680: LD_INT 8
22682: PUSH
22683: LD_INT 20
22685: PUSH
22686: LD_INT 21
22688: PUSH
22689: LD_INT 22
22691: PUSH
22692: LD_INT 72
22694: PUSH
22695: LD_INT 26
22697: PUSH
22698: LD_INT 69
22700: PUSH
22701: LD_INT 39
22703: PUSH
22704: LD_INT 40
22706: PUSH
22707: LD_INT 41
22709: PUSH
22710: LD_INT 42
22712: PUSH
22713: LD_INT 43
22715: PUSH
22716: LD_INT 48
22718: PUSH
22719: LD_INT 49
22721: PUSH
22722: LD_INT 50
22724: PUSH
22725: LD_INT 51
22727: PUSH
22728: LD_INT 52
22730: PUSH
22731: LD_INT 53
22733: PUSH
22734: LD_INT 54
22736: PUSH
22737: LD_INT 55
22739: PUSH
22740: LD_INT 56
22742: PUSH
22743: LD_INT 60
22745: PUSH
22746: LD_INT 61
22748: PUSH
22749: LD_INT 62
22751: PUSH
22752: LD_INT 66
22754: PUSH
22755: LD_INT 67
22757: PUSH
22758: LD_INT 68
22760: PUSH
22761: LD_INT 81
22763: PUSH
22764: LD_INT 82
22766: PUSH
22767: LD_INT 83
22769: PUSH
22770: LD_INT 84
22772: PUSH
22773: LD_INT 85
22775: PUSH
22776: LD_INT 87
22778: PUSH
22779: LD_INT 88
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: ST_TO_ADDR
22838: GO 23071
22840: LD_INT 3
22842: DOUBLE
22843: EQUAL
22844: IFTRUE 22848
22846: GO 23070
22848: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22849: LD_ADDR_VAR 0 4
22853: PUSH
22854: LD_INT 46
22856: PUSH
22857: LD_INT 47
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: LD_INT 2
22865: PUSH
22866: LD_INT 82
22868: PUSH
22869: LD_INT 83
22871: PUSH
22872: LD_INT 84
22874: PUSH
22875: LD_INT 85
22877: PUSH
22878: LD_INT 86
22880: PUSH
22881: LD_INT 11
22883: PUSH
22884: LD_INT 9
22886: PUSH
22887: LD_INT 20
22889: PUSH
22890: LD_INT 19
22892: PUSH
22893: LD_INT 21
22895: PUSH
22896: LD_INT 24
22898: PUSH
22899: LD_INT 22
22901: PUSH
22902: LD_INT 25
22904: PUSH
22905: LD_INT 28
22907: PUSH
22908: LD_INT 29
22910: PUSH
22911: LD_INT 30
22913: PUSH
22914: LD_INT 31
22916: PUSH
22917: LD_INT 37
22919: PUSH
22920: LD_INT 38
22922: PUSH
22923: LD_INT 32
22925: PUSH
22926: LD_INT 27
22928: PUSH
22929: LD_INT 33
22931: PUSH
22932: LD_INT 69
22934: PUSH
22935: LD_INT 39
22937: PUSH
22938: LD_INT 34
22940: PUSH
22941: LD_INT 40
22943: PUSH
22944: LD_INT 71
22946: PUSH
22947: LD_INT 23
22949: PUSH
22950: LD_INT 44
22952: PUSH
22953: LD_INT 48
22955: PUSH
22956: LD_INT 49
22958: PUSH
22959: LD_INT 50
22961: PUSH
22962: LD_INT 51
22964: PUSH
22965: LD_INT 52
22967: PUSH
22968: LD_INT 53
22970: PUSH
22971: LD_INT 54
22973: PUSH
22974: LD_INT 55
22976: PUSH
22977: LD_INT 56
22979: PUSH
22980: LD_INT 57
22982: PUSH
22983: LD_INT 58
22985: PUSH
22986: LD_INT 59
22988: PUSH
22989: LD_INT 63
22991: PUSH
22992: LD_INT 64
22994: PUSH
22995: LD_INT 65
22997: PUSH
22998: LD_INT 82
23000: PUSH
23001: LD_INT 83
23003: PUSH
23004: LD_INT 84
23006: PUSH
23007: LD_INT 85
23009: PUSH
23010: LD_INT 86
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: ST_TO_ADDR
23068: GO 23071
23070: POP
// if state > - 1 and state < 3 then
23071: LD_VAR 0 3
23075: PUSH
23076: LD_INT 1
23078: NEG
23079: GREATER
23080: PUSH
23081: LD_VAR 0 3
23085: PUSH
23086: LD_INT 3
23088: LESS
23089: AND
23090: IFFALSE 23147
// for i in result do
23092: LD_ADDR_VAR 0 5
23096: PUSH
23097: LD_VAR 0 4
23101: PUSH
23102: FOR_IN
23103: IFFALSE 23145
// if GetTech ( i , side ) <> state then
23105: LD_VAR 0 5
23109: PPUSH
23110: LD_VAR 0 1
23114: PPUSH
23115: CALL_OW 321
23119: PUSH
23120: LD_VAR 0 3
23124: NONEQUAL
23125: IFFALSE 23143
// result := result diff i ;
23127: LD_ADDR_VAR 0 4
23131: PUSH
23132: LD_VAR 0 4
23136: PUSH
23137: LD_VAR 0 5
23141: DIFF
23142: ST_TO_ADDR
23143: GO 23102
23145: POP
23146: POP
// end ;
23147: LD_VAR 0 4
23151: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23152: LD_INT 0
23154: PPUSH
23155: PPUSH
23156: PPUSH
// result := true ;
23157: LD_ADDR_VAR 0 3
23161: PUSH
23162: LD_INT 1
23164: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23165: LD_ADDR_VAR 0 5
23169: PUSH
23170: LD_VAR 0 2
23174: PPUSH
23175: CALL_OW 480
23179: ST_TO_ADDR
// if not tmp then
23180: LD_VAR 0 5
23184: NOT
23185: IFFALSE 23189
// exit ;
23187: GO 23238
// for i in tmp do
23189: LD_ADDR_VAR 0 4
23193: PUSH
23194: LD_VAR 0 5
23198: PUSH
23199: FOR_IN
23200: IFFALSE 23236
// if GetTech ( i , side ) <> state_researched then
23202: LD_VAR 0 4
23206: PPUSH
23207: LD_VAR 0 1
23211: PPUSH
23212: CALL_OW 321
23216: PUSH
23217: LD_INT 2
23219: NONEQUAL
23220: IFFALSE 23234
// begin result := false ;
23222: LD_ADDR_VAR 0 3
23226: PUSH
23227: LD_INT 0
23229: ST_TO_ADDR
// exit ;
23230: POP
23231: POP
23232: GO 23238
// end ;
23234: GO 23199
23236: POP
23237: POP
// end ;
23238: LD_VAR 0 3
23242: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23243: LD_INT 0
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
23250: PPUSH
23251: PPUSH
23252: PPUSH
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
23257: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23258: LD_VAR 0 1
23262: NOT
23263: PUSH
23264: LD_VAR 0 1
23268: PPUSH
23269: CALL_OW 257
23273: PUSH
23274: LD_INT 9
23276: NONEQUAL
23277: OR
23278: IFFALSE 23282
// exit ;
23280: GO 23855
// side := GetSide ( unit ) ;
23282: LD_ADDR_VAR 0 9
23286: PUSH
23287: LD_VAR 0 1
23291: PPUSH
23292: CALL_OW 255
23296: ST_TO_ADDR
// tech_space := tech_spacanom ;
23297: LD_ADDR_VAR 0 12
23301: PUSH
23302: LD_INT 29
23304: ST_TO_ADDR
// tech_time := tech_taurad ;
23305: LD_ADDR_VAR 0 13
23309: PUSH
23310: LD_INT 28
23312: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23313: LD_ADDR_VAR 0 11
23317: PUSH
23318: LD_VAR 0 1
23322: PPUSH
23323: CALL_OW 310
23327: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23328: LD_VAR 0 11
23332: PPUSH
23333: CALL_OW 247
23337: PUSH
23338: LD_INT 2
23340: EQUAL
23341: IFFALSE 23345
// exit ;
23343: GO 23855
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23345: LD_ADDR_VAR 0 8
23349: PUSH
23350: LD_INT 81
23352: PUSH
23353: LD_VAR 0 9
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 3
23364: PUSH
23365: LD_INT 21
23367: PUSH
23368: LD_INT 3
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PPUSH
23383: CALL_OW 69
23387: ST_TO_ADDR
// if not tmp then
23388: LD_VAR 0 8
23392: NOT
23393: IFFALSE 23397
// exit ;
23395: GO 23855
// if in_unit then
23397: LD_VAR 0 11
23401: IFFALSE 23425
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23403: LD_ADDR_VAR 0 10
23407: PUSH
23408: LD_VAR 0 8
23412: PPUSH
23413: LD_VAR 0 11
23417: PPUSH
23418: CALL_OW 74
23422: ST_TO_ADDR
23423: GO 23445
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23425: LD_ADDR_VAR 0 10
23429: PUSH
23430: LD_VAR 0 8
23434: PPUSH
23435: LD_VAR 0 1
23439: PPUSH
23440: CALL_OW 74
23444: ST_TO_ADDR
// if not enemy then
23445: LD_VAR 0 10
23449: NOT
23450: IFFALSE 23454
// exit ;
23452: GO 23855
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23454: LD_VAR 0 11
23458: PUSH
23459: LD_VAR 0 11
23463: PPUSH
23464: LD_VAR 0 10
23468: PPUSH
23469: CALL_OW 296
23473: PUSH
23474: LD_INT 13
23476: GREATER
23477: AND
23478: PUSH
23479: LD_VAR 0 1
23483: PPUSH
23484: LD_VAR 0 10
23488: PPUSH
23489: CALL_OW 296
23493: PUSH
23494: LD_INT 12
23496: GREATER
23497: OR
23498: IFFALSE 23502
// exit ;
23500: GO 23855
// missile := [ 1 ] ;
23502: LD_ADDR_VAR 0 14
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23513: LD_VAR 0 9
23517: PPUSH
23518: LD_VAR 0 12
23522: PPUSH
23523: CALL_OW 325
23527: IFFALSE 23556
// missile := Insert ( missile , missile + 1 , 2 ) ;
23529: LD_ADDR_VAR 0 14
23533: PUSH
23534: LD_VAR 0 14
23538: PPUSH
23539: LD_VAR 0 14
23543: PUSH
23544: LD_INT 1
23546: PLUS
23547: PPUSH
23548: LD_INT 2
23550: PPUSH
23551: CALL_OW 2
23555: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23556: LD_VAR 0 9
23560: PPUSH
23561: LD_VAR 0 13
23565: PPUSH
23566: CALL_OW 325
23570: PUSH
23571: LD_VAR 0 10
23575: PPUSH
23576: CALL_OW 255
23580: PPUSH
23581: LD_VAR 0 13
23585: PPUSH
23586: CALL_OW 325
23590: NOT
23591: AND
23592: IFFALSE 23621
// missile := Insert ( missile , missile + 1 , 3 ) ;
23594: LD_ADDR_VAR 0 14
23598: PUSH
23599: LD_VAR 0 14
23603: PPUSH
23604: LD_VAR 0 14
23608: PUSH
23609: LD_INT 1
23611: PLUS
23612: PPUSH
23613: LD_INT 3
23615: PPUSH
23616: CALL_OW 2
23620: ST_TO_ADDR
// if missile < 2 then
23621: LD_VAR 0 14
23625: PUSH
23626: LD_INT 2
23628: LESS
23629: IFFALSE 23633
// exit ;
23631: GO 23855
// x := GetX ( enemy ) ;
23633: LD_ADDR_VAR 0 4
23637: PUSH
23638: LD_VAR 0 10
23642: PPUSH
23643: CALL_OW 250
23647: ST_TO_ADDR
// y := GetY ( enemy ) ;
23648: LD_ADDR_VAR 0 5
23652: PUSH
23653: LD_VAR 0 10
23657: PPUSH
23658: CALL_OW 251
23662: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23663: LD_ADDR_VAR 0 6
23667: PUSH
23668: LD_VAR 0 4
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PPUSH
23677: LD_INT 1
23679: PPUSH
23680: CALL_OW 12
23684: PLUS
23685: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23686: LD_ADDR_VAR 0 7
23690: PUSH
23691: LD_VAR 0 5
23695: PUSH
23696: LD_INT 1
23698: NEG
23699: PPUSH
23700: LD_INT 1
23702: PPUSH
23703: CALL_OW 12
23707: PLUS
23708: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23709: LD_VAR 0 6
23713: PPUSH
23714: LD_VAR 0 7
23718: PPUSH
23719: CALL_OW 488
23723: NOT
23724: IFFALSE 23746
// begin _x := x ;
23726: LD_ADDR_VAR 0 6
23730: PUSH
23731: LD_VAR 0 4
23735: ST_TO_ADDR
// _y := y ;
23736: LD_ADDR_VAR 0 7
23740: PUSH
23741: LD_VAR 0 5
23745: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23746: LD_ADDR_VAR 0 3
23750: PUSH
23751: LD_INT 1
23753: PPUSH
23754: LD_VAR 0 14
23758: PPUSH
23759: CALL_OW 12
23763: ST_TO_ADDR
// case i of 1 :
23764: LD_VAR 0 3
23768: PUSH
23769: LD_INT 1
23771: DOUBLE
23772: EQUAL
23773: IFTRUE 23777
23775: GO 23794
23777: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23778: LD_VAR 0 1
23782: PPUSH
23783: LD_VAR 0 10
23787: PPUSH
23788: CALL_OW 115
23792: GO 23855
23794: LD_INT 2
23796: DOUBLE
23797: EQUAL
23798: IFTRUE 23802
23800: GO 23824
23802: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23803: LD_VAR 0 1
23807: PPUSH
23808: LD_VAR 0 6
23812: PPUSH
23813: LD_VAR 0 7
23817: PPUSH
23818: CALL_OW 153
23822: GO 23855
23824: LD_INT 3
23826: DOUBLE
23827: EQUAL
23828: IFTRUE 23832
23830: GO 23854
23832: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23833: LD_VAR 0 1
23837: PPUSH
23838: LD_VAR 0 6
23842: PPUSH
23843: LD_VAR 0 7
23847: PPUSH
23848: CALL_OW 154
23852: GO 23855
23854: POP
// end ;
23855: LD_VAR 0 2
23859: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23860: LD_INT 0
23862: PPUSH
23863: PPUSH
23864: PPUSH
23865: PPUSH
23866: PPUSH
23867: PPUSH
// if not unit or not building then
23868: LD_VAR 0 1
23872: NOT
23873: PUSH
23874: LD_VAR 0 2
23878: NOT
23879: OR
23880: IFFALSE 23884
// exit ;
23882: GO 24042
// x := GetX ( building ) ;
23884: LD_ADDR_VAR 0 5
23888: PUSH
23889: LD_VAR 0 2
23893: PPUSH
23894: CALL_OW 250
23898: ST_TO_ADDR
// y := GetY ( building ) ;
23899: LD_ADDR_VAR 0 6
23903: PUSH
23904: LD_VAR 0 2
23908: PPUSH
23909: CALL_OW 251
23913: ST_TO_ADDR
// for i = 0 to 5 do
23914: LD_ADDR_VAR 0 4
23918: PUSH
23919: DOUBLE
23920: LD_INT 0
23922: DEC
23923: ST_TO_ADDR
23924: LD_INT 5
23926: PUSH
23927: FOR_TO
23928: IFFALSE 24040
// begin _x := ShiftX ( x , i , 3 ) ;
23930: LD_ADDR_VAR 0 7
23934: PUSH
23935: LD_VAR 0 5
23939: PPUSH
23940: LD_VAR 0 4
23944: PPUSH
23945: LD_INT 3
23947: PPUSH
23948: CALL_OW 272
23952: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23953: LD_ADDR_VAR 0 8
23957: PUSH
23958: LD_VAR 0 6
23962: PPUSH
23963: LD_VAR 0 4
23967: PPUSH
23968: LD_INT 3
23970: PPUSH
23971: CALL_OW 273
23975: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23976: LD_VAR 0 7
23980: PPUSH
23981: LD_VAR 0 8
23985: PPUSH
23986: CALL_OW 488
23990: NOT
23991: IFFALSE 23995
// continue ;
23993: GO 23927
// if HexInfo ( _x , _y ) = 0 then
23995: LD_VAR 0 7
23999: PPUSH
24000: LD_VAR 0 8
24004: PPUSH
24005: CALL_OW 428
24009: PUSH
24010: LD_INT 0
24012: EQUAL
24013: IFFALSE 24038
// begin ComMoveXY ( unit , _x , _y ) ;
24015: LD_VAR 0 1
24019: PPUSH
24020: LD_VAR 0 7
24024: PPUSH
24025: LD_VAR 0 8
24029: PPUSH
24030: CALL_OW 111
// exit ;
24034: POP
24035: POP
24036: GO 24042
// end ; end ;
24038: GO 23927
24040: POP
24041: POP
// end ;
24042: LD_VAR 0 3
24046: RET
// export function ScanBase ( side , base_area ) ; begin
24047: LD_INT 0
24049: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24050: LD_ADDR_VAR 0 3
24054: PUSH
24055: LD_VAR 0 2
24059: PPUSH
24060: LD_INT 81
24062: PUSH
24063: LD_VAR 0 1
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PPUSH
24072: CALL_OW 70
24076: ST_TO_ADDR
// end ;
24077: LD_VAR 0 3
24081: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24082: LD_INT 0
24084: PPUSH
24085: PPUSH
24086: PPUSH
24087: PPUSH
// result := false ;
24088: LD_ADDR_VAR 0 2
24092: PUSH
24093: LD_INT 0
24095: ST_TO_ADDR
// side := GetSide ( unit ) ;
24096: LD_ADDR_VAR 0 3
24100: PUSH
24101: LD_VAR 0 1
24105: PPUSH
24106: CALL_OW 255
24110: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24111: LD_ADDR_VAR 0 4
24115: PUSH
24116: LD_VAR 0 1
24120: PPUSH
24121: CALL_OW 248
24125: ST_TO_ADDR
// case nat of 1 :
24126: LD_VAR 0 4
24130: PUSH
24131: LD_INT 1
24133: DOUBLE
24134: EQUAL
24135: IFTRUE 24139
24137: GO 24150
24139: POP
// tech := tech_lassight ; 2 :
24140: LD_ADDR_VAR 0 5
24144: PUSH
24145: LD_INT 12
24147: ST_TO_ADDR
24148: GO 24189
24150: LD_INT 2
24152: DOUBLE
24153: EQUAL
24154: IFTRUE 24158
24156: GO 24169
24158: POP
// tech := tech_mortar ; 3 :
24159: LD_ADDR_VAR 0 5
24163: PUSH
24164: LD_INT 41
24166: ST_TO_ADDR
24167: GO 24189
24169: LD_INT 3
24171: DOUBLE
24172: EQUAL
24173: IFTRUE 24177
24175: GO 24188
24177: POP
// tech := tech_bazooka ; end ;
24178: LD_ADDR_VAR 0 5
24182: PUSH
24183: LD_INT 44
24185: ST_TO_ADDR
24186: GO 24189
24188: POP
// if Researched ( side , tech ) then
24189: LD_VAR 0 3
24193: PPUSH
24194: LD_VAR 0 5
24198: PPUSH
24199: CALL_OW 325
24203: IFFALSE 24230
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24205: LD_ADDR_VAR 0 2
24209: PUSH
24210: LD_INT 5
24212: PUSH
24213: LD_INT 8
24215: PUSH
24216: LD_INT 9
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: LIST
24223: PUSH
24224: LD_VAR 0 4
24228: ARRAY
24229: ST_TO_ADDR
// end ;
24230: LD_VAR 0 2
24234: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24235: LD_INT 0
24237: PPUSH
24238: PPUSH
24239: PPUSH
// if not mines then
24240: LD_VAR 0 2
24244: NOT
24245: IFFALSE 24249
// exit ;
24247: GO 24393
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24249: LD_ADDR_VAR 0 5
24253: PUSH
24254: LD_INT 81
24256: PUSH
24257: LD_VAR 0 1
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 3
24268: PUSH
24269: LD_INT 21
24271: PUSH
24272: LD_INT 3
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PPUSH
24287: CALL_OW 69
24291: ST_TO_ADDR
// for i in mines do
24292: LD_ADDR_VAR 0 4
24296: PUSH
24297: LD_VAR 0 2
24301: PUSH
24302: FOR_IN
24303: IFFALSE 24391
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24305: LD_VAR 0 4
24309: PUSH
24310: LD_INT 1
24312: ARRAY
24313: PPUSH
24314: LD_VAR 0 4
24318: PUSH
24319: LD_INT 2
24321: ARRAY
24322: PPUSH
24323: CALL_OW 458
24327: NOT
24328: IFFALSE 24332
// continue ;
24330: GO 24302
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24332: LD_VAR 0 4
24336: PUSH
24337: LD_INT 1
24339: ARRAY
24340: PPUSH
24341: LD_VAR 0 4
24345: PUSH
24346: LD_INT 2
24348: ARRAY
24349: PPUSH
24350: CALL_OW 428
24354: PUSH
24355: LD_VAR 0 5
24359: IN
24360: IFFALSE 24389
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24362: LD_VAR 0 4
24366: PUSH
24367: LD_INT 1
24369: ARRAY
24370: PPUSH
24371: LD_VAR 0 4
24375: PUSH
24376: LD_INT 2
24378: ARRAY
24379: PPUSH
24380: LD_VAR 0 1
24384: PPUSH
24385: CALL_OW 456
// end ;
24389: GO 24302
24391: POP
24392: POP
// end ;
24393: LD_VAR 0 3
24397: RET
// export function Count ( array ) ; var i ; begin
24398: LD_INT 0
24400: PPUSH
24401: PPUSH
// result := 0 ;
24402: LD_ADDR_VAR 0 2
24406: PUSH
24407: LD_INT 0
24409: ST_TO_ADDR
// for i in array do
24410: LD_ADDR_VAR 0 3
24414: PUSH
24415: LD_VAR 0 1
24419: PUSH
24420: FOR_IN
24421: IFFALSE 24445
// if i then
24423: LD_VAR 0 3
24427: IFFALSE 24443
// result := result + 1 ;
24429: LD_ADDR_VAR 0 2
24433: PUSH
24434: LD_VAR 0 2
24438: PUSH
24439: LD_INT 1
24441: PLUS
24442: ST_TO_ADDR
24443: GO 24420
24445: POP
24446: POP
// end ;
24447: LD_VAR 0 2
24451: RET
// export function IsEmpty ( building ) ; begin
24452: LD_INT 0
24454: PPUSH
// if not building then
24455: LD_VAR 0 1
24459: NOT
24460: IFFALSE 24464
// exit ;
24462: GO 24507
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24464: LD_ADDR_VAR 0 2
24468: PUSH
24469: LD_VAR 0 1
24473: PUSH
24474: LD_INT 22
24476: PUSH
24477: LD_VAR 0 1
24481: PPUSH
24482: CALL_OW 255
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 58
24493: PUSH
24494: EMPTY
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PPUSH
24501: CALL_OW 69
24505: IN
24506: ST_TO_ADDR
// end ;
24507: LD_VAR 0 2
24511: RET
// export function IsNotFull ( building ) ; begin
24512: LD_INT 0
24514: PPUSH
// if not building then
24515: LD_VAR 0 1
24519: NOT
24520: IFFALSE 24524
// exit ;
24522: GO 24543
// result := UnitsInside ( building ) < 6 ;
24524: LD_ADDR_VAR 0 2
24528: PUSH
24529: LD_VAR 0 1
24533: PPUSH
24534: CALL_OW 313
24538: PUSH
24539: LD_INT 6
24541: LESS
24542: ST_TO_ADDR
// end ;
24543: LD_VAR 0 2
24547: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24548: LD_INT 0
24550: PPUSH
24551: PPUSH
24552: PPUSH
24553: PPUSH
// tmp := [ ] ;
24554: LD_ADDR_VAR 0 3
24558: PUSH
24559: EMPTY
24560: ST_TO_ADDR
// list := [ ] ;
24561: LD_ADDR_VAR 0 5
24565: PUSH
24566: EMPTY
24567: ST_TO_ADDR
// for i = 16 to 25 do
24568: LD_ADDR_VAR 0 4
24572: PUSH
24573: DOUBLE
24574: LD_INT 16
24576: DEC
24577: ST_TO_ADDR
24578: LD_INT 25
24580: PUSH
24581: FOR_TO
24582: IFFALSE 24655
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24584: LD_ADDR_VAR 0 3
24588: PUSH
24589: LD_VAR 0 3
24593: PUSH
24594: LD_INT 22
24596: PUSH
24597: LD_VAR 0 1
24601: PPUSH
24602: CALL_OW 255
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 91
24613: PUSH
24614: LD_VAR 0 1
24618: PUSH
24619: LD_INT 6
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 30
24629: PUSH
24630: LD_VAR 0 4
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: PUSH
24644: EMPTY
24645: LIST
24646: PPUSH
24647: CALL_OW 69
24651: ADD
24652: ST_TO_ADDR
24653: GO 24581
24655: POP
24656: POP
// for i = 1 to tmp do
24657: LD_ADDR_VAR 0 4
24661: PUSH
24662: DOUBLE
24663: LD_INT 1
24665: DEC
24666: ST_TO_ADDR
24667: LD_VAR 0 3
24671: PUSH
24672: FOR_TO
24673: IFFALSE 24761
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24675: LD_ADDR_VAR 0 5
24679: PUSH
24680: LD_VAR 0 5
24684: PUSH
24685: LD_VAR 0 3
24689: PUSH
24690: LD_VAR 0 4
24694: ARRAY
24695: PPUSH
24696: CALL_OW 266
24700: PUSH
24701: LD_VAR 0 3
24705: PUSH
24706: LD_VAR 0 4
24710: ARRAY
24711: PPUSH
24712: CALL_OW 250
24716: PUSH
24717: LD_VAR 0 3
24721: PUSH
24722: LD_VAR 0 4
24726: ARRAY
24727: PPUSH
24728: CALL_OW 251
24732: PUSH
24733: LD_VAR 0 3
24737: PUSH
24738: LD_VAR 0 4
24742: ARRAY
24743: PPUSH
24744: CALL_OW 254
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: PUSH
24755: EMPTY
24756: LIST
24757: ADD
24758: ST_TO_ADDR
24759: GO 24672
24761: POP
24762: POP
// result := list ;
24763: LD_ADDR_VAR 0 2
24767: PUSH
24768: LD_VAR 0 5
24772: ST_TO_ADDR
// end ;
24773: LD_VAR 0 2
24777: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24778: LD_INT 0
24780: PPUSH
24781: PPUSH
24782: PPUSH
24783: PPUSH
24784: PPUSH
24785: PPUSH
24786: PPUSH
// if not factory then
24787: LD_VAR 0 1
24791: NOT
24792: IFFALSE 24796
// exit ;
24794: GO 25389
// if control = control_apeman then
24796: LD_VAR 0 4
24800: PUSH
24801: LD_INT 5
24803: EQUAL
24804: IFFALSE 24913
// begin tmp := UnitsInside ( factory ) ;
24806: LD_ADDR_VAR 0 8
24810: PUSH
24811: LD_VAR 0 1
24815: PPUSH
24816: CALL_OW 313
24820: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24821: LD_VAR 0 8
24825: PPUSH
24826: LD_INT 25
24828: PUSH
24829: LD_INT 12
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PPUSH
24836: CALL_OW 72
24840: NOT
24841: IFFALSE 24851
// control := control_manual ;
24843: LD_ADDR_VAR 0 4
24847: PUSH
24848: LD_INT 1
24850: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24851: LD_ADDR_VAR 0 8
24855: PUSH
24856: LD_VAR 0 1
24860: PPUSH
24861: CALL 24548 0 1
24865: ST_TO_ADDR
// if tmp then
24866: LD_VAR 0 8
24870: IFFALSE 24913
// begin for i in tmp do
24872: LD_ADDR_VAR 0 7
24876: PUSH
24877: LD_VAR 0 8
24881: PUSH
24882: FOR_IN
24883: IFFALSE 24911
// if i [ 1 ] = b_ext_radio then
24885: LD_VAR 0 7
24889: PUSH
24890: LD_INT 1
24892: ARRAY
24893: PUSH
24894: LD_INT 22
24896: EQUAL
24897: IFFALSE 24909
// begin control := control_remote ;
24899: LD_ADDR_VAR 0 4
24903: PUSH
24904: LD_INT 2
24906: ST_TO_ADDR
// break ;
24907: GO 24911
// end ;
24909: GO 24882
24911: POP
24912: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24913: LD_VAR 0 1
24917: PPUSH
24918: LD_VAR 0 2
24922: PPUSH
24923: LD_VAR 0 3
24927: PPUSH
24928: LD_VAR 0 4
24932: PPUSH
24933: LD_VAR 0 5
24937: PPUSH
24938: CALL_OW 448
24942: IFFALSE 24977
// begin result := [ chassis , engine , control , weapon ] ;
24944: LD_ADDR_VAR 0 6
24948: PUSH
24949: LD_VAR 0 2
24953: PUSH
24954: LD_VAR 0 3
24958: PUSH
24959: LD_VAR 0 4
24963: PUSH
24964: LD_VAR 0 5
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: ST_TO_ADDR
// exit ;
24975: GO 25389
// end ; _chassis := AvailableChassisList ( factory ) ;
24977: LD_ADDR_VAR 0 9
24981: PUSH
24982: LD_VAR 0 1
24986: PPUSH
24987: CALL_OW 475
24991: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24992: LD_ADDR_VAR 0 11
24996: PUSH
24997: LD_VAR 0 1
25001: PPUSH
25002: CALL_OW 476
25006: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25007: LD_ADDR_VAR 0 12
25011: PUSH
25012: LD_VAR 0 1
25016: PPUSH
25017: CALL_OW 477
25021: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25022: LD_ADDR_VAR 0 10
25026: PUSH
25027: LD_VAR 0 1
25031: PPUSH
25032: CALL_OW 478
25036: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25037: LD_VAR 0 9
25041: NOT
25042: PUSH
25043: LD_VAR 0 11
25047: NOT
25048: OR
25049: PUSH
25050: LD_VAR 0 12
25054: NOT
25055: OR
25056: PUSH
25057: LD_VAR 0 10
25061: NOT
25062: OR
25063: IFFALSE 25098
// begin result := [ chassis , engine , control , weapon ] ;
25065: LD_ADDR_VAR 0 6
25069: PUSH
25070: LD_VAR 0 2
25074: PUSH
25075: LD_VAR 0 3
25079: PUSH
25080: LD_VAR 0 4
25084: PUSH
25085: LD_VAR 0 5
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: ST_TO_ADDR
// exit ;
25096: GO 25389
// end ; if not chassis in _chassis then
25098: LD_VAR 0 2
25102: PUSH
25103: LD_VAR 0 9
25107: IN
25108: NOT
25109: IFFALSE 25135
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25111: LD_ADDR_VAR 0 2
25115: PUSH
25116: LD_VAR 0 9
25120: PUSH
25121: LD_INT 1
25123: PPUSH
25124: LD_VAR 0 9
25128: PPUSH
25129: CALL_OW 12
25133: ARRAY
25134: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25135: LD_VAR 0 2
25139: PPUSH
25140: LD_VAR 0 3
25144: PPUSH
25145: CALL 25394 0 2
25149: NOT
25150: IFFALSE 25209
// repeat engine := _engine [ 1 ] ;
25152: LD_ADDR_VAR 0 3
25156: PUSH
25157: LD_VAR 0 11
25161: PUSH
25162: LD_INT 1
25164: ARRAY
25165: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25166: LD_ADDR_VAR 0 11
25170: PUSH
25171: LD_VAR 0 11
25175: PPUSH
25176: LD_INT 1
25178: PPUSH
25179: CALL_OW 3
25183: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25184: LD_VAR 0 2
25188: PPUSH
25189: LD_VAR 0 3
25193: PPUSH
25194: CALL 25394 0 2
25198: PUSH
25199: LD_VAR 0 11
25203: PUSH
25204: EMPTY
25205: EQUAL
25206: OR
25207: IFFALSE 25152
// if not control in _control then
25209: LD_VAR 0 4
25213: PUSH
25214: LD_VAR 0 12
25218: IN
25219: NOT
25220: IFFALSE 25246
// control := _control [ rand ( 1 , _control ) ] ;
25222: LD_ADDR_VAR 0 4
25226: PUSH
25227: LD_VAR 0 12
25231: PUSH
25232: LD_INT 1
25234: PPUSH
25235: LD_VAR 0 12
25239: PPUSH
25240: CALL_OW 12
25244: ARRAY
25245: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25246: LD_VAR 0 2
25250: PPUSH
25251: LD_VAR 0 5
25255: PPUSH
25256: CALL 25614 0 2
25260: NOT
25261: IFFALSE 25320
// repeat weapon := _weapon [ 1 ] ;
25263: LD_ADDR_VAR 0 5
25267: PUSH
25268: LD_VAR 0 10
25272: PUSH
25273: LD_INT 1
25275: ARRAY
25276: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25277: LD_ADDR_VAR 0 10
25281: PUSH
25282: LD_VAR 0 10
25286: PPUSH
25287: LD_INT 1
25289: PPUSH
25290: CALL_OW 3
25294: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25295: LD_VAR 0 2
25299: PPUSH
25300: LD_VAR 0 5
25304: PPUSH
25305: CALL 25614 0 2
25309: PUSH
25310: LD_VAR 0 10
25314: PUSH
25315: EMPTY
25316: EQUAL
25317: OR
25318: IFFALSE 25263
// result := [ ] ;
25320: LD_ADDR_VAR 0 6
25324: PUSH
25325: EMPTY
25326: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25327: LD_VAR 0 1
25331: PPUSH
25332: LD_VAR 0 2
25336: PPUSH
25337: LD_VAR 0 3
25341: PPUSH
25342: LD_VAR 0 4
25346: PPUSH
25347: LD_VAR 0 5
25351: PPUSH
25352: CALL_OW 448
25356: IFFALSE 25389
// result := [ chassis , engine , control , weapon ] ;
25358: LD_ADDR_VAR 0 6
25362: PUSH
25363: LD_VAR 0 2
25367: PUSH
25368: LD_VAR 0 3
25372: PUSH
25373: LD_VAR 0 4
25377: PUSH
25378: LD_VAR 0 5
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: ST_TO_ADDR
// end ;
25389: LD_VAR 0 6
25393: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25394: LD_INT 0
25396: PPUSH
// if not chassis or not engine then
25397: LD_VAR 0 1
25401: NOT
25402: PUSH
25403: LD_VAR 0 2
25407: NOT
25408: OR
25409: IFFALSE 25413
// exit ;
25411: GO 25609
// case engine of engine_solar :
25413: LD_VAR 0 2
25417: PUSH
25418: LD_INT 2
25420: DOUBLE
25421: EQUAL
25422: IFTRUE 25426
25424: GO 25464
25426: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25427: LD_ADDR_VAR 0 3
25431: PUSH
25432: LD_INT 11
25434: PUSH
25435: LD_INT 12
25437: PUSH
25438: LD_INT 13
25440: PUSH
25441: LD_INT 14
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: LD_INT 3
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: ST_TO_ADDR
25462: GO 25593
25464: LD_INT 1
25466: DOUBLE
25467: EQUAL
25468: IFTRUE 25472
25470: GO 25534
25472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25473: LD_ADDR_VAR 0 3
25477: PUSH
25478: LD_INT 11
25480: PUSH
25481: LD_INT 12
25483: PUSH
25484: LD_INT 13
25486: PUSH
25487: LD_INT 14
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: LD_INT 3
25498: PUSH
25499: LD_INT 4
25501: PUSH
25502: LD_INT 5
25504: PUSH
25505: LD_INT 21
25507: PUSH
25508: LD_INT 23
25510: PUSH
25511: LD_INT 22
25513: PUSH
25514: LD_INT 24
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: ST_TO_ADDR
25532: GO 25593
25534: LD_INT 3
25536: DOUBLE
25537: EQUAL
25538: IFTRUE 25542
25540: GO 25592
25542: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25543: LD_ADDR_VAR 0 3
25547: PUSH
25548: LD_INT 13
25550: PUSH
25551: LD_INT 14
25553: PUSH
25554: LD_INT 2
25556: PUSH
25557: LD_INT 3
25559: PUSH
25560: LD_INT 4
25562: PUSH
25563: LD_INT 5
25565: PUSH
25566: LD_INT 21
25568: PUSH
25569: LD_INT 22
25571: PUSH
25572: LD_INT 23
25574: PUSH
25575: LD_INT 24
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: ST_TO_ADDR
25590: GO 25593
25592: POP
// result := ( chassis in result ) ;
25593: LD_ADDR_VAR 0 3
25597: PUSH
25598: LD_VAR 0 1
25602: PUSH
25603: LD_VAR 0 3
25607: IN
25608: ST_TO_ADDR
// end ;
25609: LD_VAR 0 3
25613: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25614: LD_INT 0
25616: PPUSH
// if not chassis or not weapon then
25617: LD_VAR 0 1
25621: NOT
25622: PUSH
25623: LD_VAR 0 2
25627: NOT
25628: OR
25629: IFFALSE 25633
// exit ;
25631: GO 26695
// case weapon of us_machine_gun :
25633: LD_VAR 0 2
25637: PUSH
25638: LD_INT 2
25640: DOUBLE
25641: EQUAL
25642: IFTRUE 25646
25644: GO 25676
25646: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25647: LD_ADDR_VAR 0 3
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: LD_INT 2
25657: PUSH
25658: LD_INT 3
25660: PUSH
25661: LD_INT 4
25663: PUSH
25664: LD_INT 5
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: ST_TO_ADDR
25674: GO 26679
25676: LD_INT 3
25678: DOUBLE
25679: EQUAL
25680: IFTRUE 25684
25682: GO 25714
25684: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25685: LD_ADDR_VAR 0 3
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: LD_INT 3
25698: PUSH
25699: LD_INT 4
25701: PUSH
25702: LD_INT 5
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: ST_TO_ADDR
25712: GO 26679
25714: LD_INT 11
25716: DOUBLE
25717: EQUAL
25718: IFTRUE 25722
25720: GO 25752
25722: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25723: LD_ADDR_VAR 0 3
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: LD_INT 3
25736: PUSH
25737: LD_INT 4
25739: PUSH
25740: LD_INT 5
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: ST_TO_ADDR
25750: GO 26679
25752: LD_INT 4
25754: DOUBLE
25755: EQUAL
25756: IFTRUE 25760
25758: GO 25786
25760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25761: LD_ADDR_VAR 0 3
25765: PUSH
25766: LD_INT 2
25768: PUSH
25769: LD_INT 3
25771: PUSH
25772: LD_INT 4
25774: PUSH
25775: LD_INT 5
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: ST_TO_ADDR
25784: GO 26679
25786: LD_INT 5
25788: DOUBLE
25789: EQUAL
25790: IFTRUE 25794
25792: GO 25820
25794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25795: LD_ADDR_VAR 0 3
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: LD_INT 3
25805: PUSH
25806: LD_INT 4
25808: PUSH
25809: LD_INT 5
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: ST_TO_ADDR
25818: GO 26679
25820: LD_INT 9
25822: DOUBLE
25823: EQUAL
25824: IFTRUE 25828
25826: GO 25854
25828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25829: LD_ADDR_VAR 0 3
25833: PUSH
25834: LD_INT 2
25836: PUSH
25837: LD_INT 3
25839: PUSH
25840: LD_INT 4
25842: PUSH
25843: LD_INT 5
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: ST_TO_ADDR
25852: GO 26679
25854: LD_INT 7
25856: DOUBLE
25857: EQUAL
25858: IFTRUE 25862
25860: GO 25888
25862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25863: LD_ADDR_VAR 0 3
25867: PUSH
25868: LD_INT 2
25870: PUSH
25871: LD_INT 3
25873: PUSH
25874: LD_INT 4
25876: PUSH
25877: LD_INT 5
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: ST_TO_ADDR
25886: GO 26679
25888: LD_INT 12
25890: DOUBLE
25891: EQUAL
25892: IFTRUE 25896
25894: GO 25922
25896: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25897: LD_ADDR_VAR 0 3
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: LD_INT 3
25907: PUSH
25908: LD_INT 4
25910: PUSH
25911: LD_INT 5
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: ST_TO_ADDR
25920: GO 26679
25922: LD_INT 13
25924: DOUBLE
25925: EQUAL
25926: IFTRUE 25930
25928: GO 25956
25930: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25931: LD_ADDR_VAR 0 3
25935: PUSH
25936: LD_INT 2
25938: PUSH
25939: LD_INT 3
25941: PUSH
25942: LD_INT 4
25944: PUSH
25945: LD_INT 5
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: ST_TO_ADDR
25954: GO 26679
25956: LD_INT 14
25958: DOUBLE
25959: EQUAL
25960: IFTRUE 25964
25962: GO 25982
25964: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25965: LD_ADDR_VAR 0 3
25969: PUSH
25970: LD_INT 4
25972: PUSH
25973: LD_INT 5
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: ST_TO_ADDR
25980: GO 26679
25982: LD_INT 6
25984: DOUBLE
25985: EQUAL
25986: IFTRUE 25990
25988: GO 26008
25990: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25991: LD_ADDR_VAR 0 3
25995: PUSH
25996: LD_INT 4
25998: PUSH
25999: LD_INT 5
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: ST_TO_ADDR
26006: GO 26679
26008: LD_INT 10
26010: DOUBLE
26011: EQUAL
26012: IFTRUE 26016
26014: GO 26034
26016: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26017: LD_ADDR_VAR 0 3
26021: PUSH
26022: LD_INT 4
26024: PUSH
26025: LD_INT 5
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: ST_TO_ADDR
26032: GO 26679
26034: LD_INT 22
26036: DOUBLE
26037: EQUAL
26038: IFTRUE 26042
26040: GO 26068
26042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26043: LD_ADDR_VAR 0 3
26047: PUSH
26048: LD_INT 11
26050: PUSH
26051: LD_INT 12
26053: PUSH
26054: LD_INT 13
26056: PUSH
26057: LD_INT 14
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: ST_TO_ADDR
26066: GO 26679
26068: LD_INT 23
26070: DOUBLE
26071: EQUAL
26072: IFTRUE 26076
26074: GO 26102
26076: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26077: LD_ADDR_VAR 0 3
26081: PUSH
26082: LD_INT 11
26084: PUSH
26085: LD_INT 12
26087: PUSH
26088: LD_INT 13
26090: PUSH
26091: LD_INT 14
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: ST_TO_ADDR
26100: GO 26679
26102: LD_INT 24
26104: DOUBLE
26105: EQUAL
26106: IFTRUE 26110
26108: GO 26136
26110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26111: LD_ADDR_VAR 0 3
26115: PUSH
26116: LD_INT 11
26118: PUSH
26119: LD_INT 12
26121: PUSH
26122: LD_INT 13
26124: PUSH
26125: LD_INT 14
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: ST_TO_ADDR
26134: GO 26679
26136: LD_INT 30
26138: DOUBLE
26139: EQUAL
26140: IFTRUE 26144
26142: GO 26170
26144: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26145: LD_ADDR_VAR 0 3
26149: PUSH
26150: LD_INT 11
26152: PUSH
26153: LD_INT 12
26155: PUSH
26156: LD_INT 13
26158: PUSH
26159: LD_INT 14
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: ST_TO_ADDR
26168: GO 26679
26170: LD_INT 25
26172: DOUBLE
26173: EQUAL
26174: IFTRUE 26178
26176: GO 26196
26178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26179: LD_ADDR_VAR 0 3
26183: PUSH
26184: LD_INT 13
26186: PUSH
26187: LD_INT 14
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: ST_TO_ADDR
26194: GO 26679
26196: LD_INT 27
26198: DOUBLE
26199: EQUAL
26200: IFTRUE 26204
26202: GO 26222
26204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26205: LD_ADDR_VAR 0 3
26209: PUSH
26210: LD_INT 13
26212: PUSH
26213: LD_INT 14
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: ST_TO_ADDR
26220: GO 26679
26222: LD_EXP 59
26226: DOUBLE
26227: EQUAL
26228: IFTRUE 26232
26230: GO 26258
26232: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26233: LD_ADDR_VAR 0 3
26237: PUSH
26238: LD_INT 11
26240: PUSH
26241: LD_INT 12
26243: PUSH
26244: LD_INT 13
26246: PUSH
26247: LD_INT 14
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: ST_TO_ADDR
26256: GO 26679
26258: LD_INT 28
26260: DOUBLE
26261: EQUAL
26262: IFTRUE 26266
26264: GO 26284
26266: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26267: LD_ADDR_VAR 0 3
26271: PUSH
26272: LD_INT 13
26274: PUSH
26275: LD_INT 14
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: ST_TO_ADDR
26282: GO 26679
26284: LD_INT 29
26286: DOUBLE
26287: EQUAL
26288: IFTRUE 26292
26290: GO 26310
26292: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26293: LD_ADDR_VAR 0 3
26297: PUSH
26298: LD_INT 13
26300: PUSH
26301: LD_INT 14
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: ST_TO_ADDR
26308: GO 26679
26310: LD_INT 31
26312: DOUBLE
26313: EQUAL
26314: IFTRUE 26318
26316: GO 26336
26318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26319: LD_ADDR_VAR 0 3
26323: PUSH
26324: LD_INT 13
26326: PUSH
26327: LD_INT 14
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: ST_TO_ADDR
26334: GO 26679
26336: LD_INT 26
26338: DOUBLE
26339: EQUAL
26340: IFTRUE 26344
26342: GO 26362
26344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26345: LD_ADDR_VAR 0 3
26349: PUSH
26350: LD_INT 13
26352: PUSH
26353: LD_INT 14
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: ST_TO_ADDR
26360: GO 26679
26362: LD_INT 42
26364: DOUBLE
26365: EQUAL
26366: IFTRUE 26370
26368: GO 26396
26370: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26371: LD_ADDR_VAR 0 3
26375: PUSH
26376: LD_INT 21
26378: PUSH
26379: LD_INT 22
26381: PUSH
26382: LD_INT 23
26384: PUSH
26385: LD_INT 24
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: ST_TO_ADDR
26394: GO 26679
26396: LD_INT 43
26398: DOUBLE
26399: EQUAL
26400: IFTRUE 26404
26402: GO 26430
26404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26405: LD_ADDR_VAR 0 3
26409: PUSH
26410: LD_INT 21
26412: PUSH
26413: LD_INT 22
26415: PUSH
26416: LD_INT 23
26418: PUSH
26419: LD_INT 24
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: ST_TO_ADDR
26428: GO 26679
26430: LD_INT 44
26432: DOUBLE
26433: EQUAL
26434: IFTRUE 26438
26436: GO 26464
26438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26439: LD_ADDR_VAR 0 3
26443: PUSH
26444: LD_INT 21
26446: PUSH
26447: LD_INT 22
26449: PUSH
26450: LD_INT 23
26452: PUSH
26453: LD_INT 24
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: ST_TO_ADDR
26462: GO 26679
26464: LD_INT 45
26466: DOUBLE
26467: EQUAL
26468: IFTRUE 26472
26470: GO 26498
26472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26473: LD_ADDR_VAR 0 3
26477: PUSH
26478: LD_INT 21
26480: PUSH
26481: LD_INT 22
26483: PUSH
26484: LD_INT 23
26486: PUSH
26487: LD_INT 24
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: ST_TO_ADDR
26496: GO 26679
26498: LD_INT 49
26500: DOUBLE
26501: EQUAL
26502: IFTRUE 26506
26504: GO 26532
26506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26507: LD_ADDR_VAR 0 3
26511: PUSH
26512: LD_INT 21
26514: PUSH
26515: LD_INT 22
26517: PUSH
26518: LD_INT 23
26520: PUSH
26521: LD_INT 24
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: ST_TO_ADDR
26530: GO 26679
26532: LD_INT 51
26534: DOUBLE
26535: EQUAL
26536: IFTRUE 26540
26538: GO 26566
26540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26541: LD_ADDR_VAR 0 3
26545: PUSH
26546: LD_INT 21
26548: PUSH
26549: LD_INT 22
26551: PUSH
26552: LD_INT 23
26554: PUSH
26555: LD_INT 24
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: ST_TO_ADDR
26564: GO 26679
26566: LD_INT 52
26568: DOUBLE
26569: EQUAL
26570: IFTRUE 26574
26572: GO 26600
26574: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26575: LD_ADDR_VAR 0 3
26579: PUSH
26580: LD_INT 21
26582: PUSH
26583: LD_INT 22
26585: PUSH
26586: LD_INT 23
26588: PUSH
26589: LD_INT 24
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: ST_TO_ADDR
26598: GO 26679
26600: LD_INT 53
26602: DOUBLE
26603: EQUAL
26604: IFTRUE 26608
26606: GO 26626
26608: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26609: LD_ADDR_VAR 0 3
26613: PUSH
26614: LD_INT 23
26616: PUSH
26617: LD_INT 24
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: ST_TO_ADDR
26624: GO 26679
26626: LD_INT 46
26628: DOUBLE
26629: EQUAL
26630: IFTRUE 26634
26632: GO 26652
26634: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26635: LD_ADDR_VAR 0 3
26639: PUSH
26640: LD_INT 23
26642: PUSH
26643: LD_INT 24
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: ST_TO_ADDR
26650: GO 26679
26652: LD_INT 47
26654: DOUBLE
26655: EQUAL
26656: IFTRUE 26660
26658: GO 26678
26660: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26661: LD_ADDR_VAR 0 3
26665: PUSH
26666: LD_INT 23
26668: PUSH
26669: LD_INT 24
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: ST_TO_ADDR
26676: GO 26679
26678: POP
// result := ( chassis in result ) ;
26679: LD_ADDR_VAR 0 3
26683: PUSH
26684: LD_VAR 0 1
26688: PUSH
26689: LD_VAR 0 3
26693: IN
26694: ST_TO_ADDR
// end ;
26695: LD_VAR 0 3
26699: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26700: LD_INT 0
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
// result := array ;
26709: LD_ADDR_VAR 0 5
26713: PUSH
26714: LD_VAR 0 1
26718: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26719: LD_VAR 0 1
26723: NOT
26724: PUSH
26725: LD_VAR 0 2
26729: NOT
26730: OR
26731: PUSH
26732: LD_VAR 0 3
26736: NOT
26737: OR
26738: PUSH
26739: LD_VAR 0 2
26743: PUSH
26744: LD_VAR 0 1
26748: GREATER
26749: OR
26750: PUSH
26751: LD_VAR 0 3
26755: PUSH
26756: LD_VAR 0 1
26760: GREATER
26761: OR
26762: IFFALSE 26766
// exit ;
26764: GO 27062
// if direction then
26766: LD_VAR 0 4
26770: IFFALSE 26834
// begin d := 1 ;
26772: LD_ADDR_VAR 0 9
26776: PUSH
26777: LD_INT 1
26779: ST_TO_ADDR
// if i_from > i_to then
26780: LD_VAR 0 2
26784: PUSH
26785: LD_VAR 0 3
26789: GREATER
26790: IFFALSE 26816
// length := ( array - i_from ) + i_to else
26792: LD_ADDR_VAR 0 11
26796: PUSH
26797: LD_VAR 0 1
26801: PUSH
26802: LD_VAR 0 2
26806: MINUS
26807: PUSH
26808: LD_VAR 0 3
26812: PLUS
26813: ST_TO_ADDR
26814: GO 26832
// length := i_to - i_from ;
26816: LD_ADDR_VAR 0 11
26820: PUSH
26821: LD_VAR 0 3
26825: PUSH
26826: LD_VAR 0 2
26830: MINUS
26831: ST_TO_ADDR
// end else
26832: GO 26895
// begin d := - 1 ;
26834: LD_ADDR_VAR 0 9
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: ST_TO_ADDR
// if i_from > i_to then
26843: LD_VAR 0 2
26847: PUSH
26848: LD_VAR 0 3
26852: GREATER
26853: IFFALSE 26873
// length := i_from - i_to else
26855: LD_ADDR_VAR 0 11
26859: PUSH
26860: LD_VAR 0 2
26864: PUSH
26865: LD_VAR 0 3
26869: MINUS
26870: ST_TO_ADDR
26871: GO 26895
// length := ( array - i_to ) + i_from ;
26873: LD_ADDR_VAR 0 11
26877: PUSH
26878: LD_VAR 0 1
26882: PUSH
26883: LD_VAR 0 3
26887: MINUS
26888: PUSH
26889: LD_VAR 0 2
26893: PLUS
26894: ST_TO_ADDR
// end ; if not length then
26895: LD_VAR 0 11
26899: NOT
26900: IFFALSE 26904
// exit ;
26902: GO 27062
// tmp := array ;
26904: LD_ADDR_VAR 0 10
26908: PUSH
26909: LD_VAR 0 1
26913: ST_TO_ADDR
// for i = 1 to length do
26914: LD_ADDR_VAR 0 6
26918: PUSH
26919: DOUBLE
26920: LD_INT 1
26922: DEC
26923: ST_TO_ADDR
26924: LD_VAR 0 11
26928: PUSH
26929: FOR_TO
26930: IFFALSE 27050
// begin for j = 1 to array do
26932: LD_ADDR_VAR 0 7
26936: PUSH
26937: DOUBLE
26938: LD_INT 1
26940: DEC
26941: ST_TO_ADDR
26942: LD_VAR 0 1
26946: PUSH
26947: FOR_TO
26948: IFFALSE 27036
// begin k := j + d ;
26950: LD_ADDR_VAR 0 8
26954: PUSH
26955: LD_VAR 0 7
26959: PUSH
26960: LD_VAR 0 9
26964: PLUS
26965: ST_TO_ADDR
// if k > array then
26966: LD_VAR 0 8
26970: PUSH
26971: LD_VAR 0 1
26975: GREATER
26976: IFFALSE 26986
// k := 1 ;
26978: LD_ADDR_VAR 0 8
26982: PUSH
26983: LD_INT 1
26985: ST_TO_ADDR
// if not k then
26986: LD_VAR 0 8
26990: NOT
26991: IFFALSE 27003
// k := array ;
26993: LD_ADDR_VAR 0 8
26997: PUSH
26998: LD_VAR 0 1
27002: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27003: LD_ADDR_VAR 0 10
27007: PUSH
27008: LD_VAR 0 10
27012: PPUSH
27013: LD_VAR 0 8
27017: PPUSH
27018: LD_VAR 0 1
27022: PUSH
27023: LD_VAR 0 7
27027: ARRAY
27028: PPUSH
27029: CALL_OW 1
27033: ST_TO_ADDR
// end ;
27034: GO 26947
27036: POP
27037: POP
// array := tmp ;
27038: LD_ADDR_VAR 0 1
27042: PUSH
27043: LD_VAR 0 10
27047: ST_TO_ADDR
// end ;
27048: GO 26929
27050: POP
27051: POP
// result := array ;
27052: LD_ADDR_VAR 0 5
27056: PUSH
27057: LD_VAR 0 1
27061: ST_TO_ADDR
// end ;
27062: LD_VAR 0 5
27066: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27067: LD_INT 0
27069: PPUSH
27070: PPUSH
// result := 0 ;
27071: LD_ADDR_VAR 0 3
27075: PUSH
27076: LD_INT 0
27078: ST_TO_ADDR
// if not array or not value in array then
27079: LD_VAR 0 1
27083: NOT
27084: PUSH
27085: LD_VAR 0 2
27089: PUSH
27090: LD_VAR 0 1
27094: IN
27095: NOT
27096: OR
27097: IFFALSE 27101
// exit ;
27099: GO 27155
// for i = 1 to array do
27101: LD_ADDR_VAR 0 4
27105: PUSH
27106: DOUBLE
27107: LD_INT 1
27109: DEC
27110: ST_TO_ADDR
27111: LD_VAR 0 1
27115: PUSH
27116: FOR_TO
27117: IFFALSE 27153
// if value = array [ i ] then
27119: LD_VAR 0 2
27123: PUSH
27124: LD_VAR 0 1
27128: PUSH
27129: LD_VAR 0 4
27133: ARRAY
27134: EQUAL
27135: IFFALSE 27151
// begin result := i ;
27137: LD_ADDR_VAR 0 3
27141: PUSH
27142: LD_VAR 0 4
27146: ST_TO_ADDR
// exit ;
27147: POP
27148: POP
27149: GO 27155
// end ;
27151: GO 27116
27153: POP
27154: POP
// end ;
27155: LD_VAR 0 3
27159: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27160: LD_INT 0
27162: PPUSH
// vc_chassis := chassis ;
27163: LD_ADDR_OWVAR 37
27167: PUSH
27168: LD_VAR 0 1
27172: ST_TO_ADDR
// vc_engine := engine ;
27173: LD_ADDR_OWVAR 39
27177: PUSH
27178: LD_VAR 0 2
27182: ST_TO_ADDR
// vc_control := control ;
27183: LD_ADDR_OWVAR 38
27187: PUSH
27188: LD_VAR 0 3
27192: ST_TO_ADDR
// vc_weapon := weapon ;
27193: LD_ADDR_OWVAR 40
27197: PUSH
27198: LD_VAR 0 4
27202: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27203: LD_ADDR_OWVAR 41
27207: PUSH
27208: LD_VAR 0 5
27212: ST_TO_ADDR
// end ;
27213: LD_VAR 0 6
27217: RET
// export function WantPlant ( unit ) ; var task ; begin
27218: LD_INT 0
27220: PPUSH
27221: PPUSH
// result := false ;
27222: LD_ADDR_VAR 0 2
27226: PUSH
27227: LD_INT 0
27229: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27230: LD_ADDR_VAR 0 3
27234: PUSH
27235: LD_VAR 0 1
27239: PPUSH
27240: CALL_OW 437
27244: ST_TO_ADDR
// if task then
27245: LD_VAR 0 3
27249: IFFALSE 27277
// if task [ 1 ] [ 1 ] = p then
27251: LD_VAR 0 3
27255: PUSH
27256: LD_INT 1
27258: ARRAY
27259: PUSH
27260: LD_INT 1
27262: ARRAY
27263: PUSH
27264: LD_STRING p
27266: EQUAL
27267: IFFALSE 27277
// result := true ;
27269: LD_ADDR_VAR 0 2
27273: PUSH
27274: LD_INT 1
27276: ST_TO_ADDR
// end ;
27277: LD_VAR 0 2
27281: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27282: LD_INT 0
27284: PPUSH
27285: PPUSH
27286: PPUSH
27287: PPUSH
// if pos < 1 then
27288: LD_VAR 0 2
27292: PUSH
27293: LD_INT 1
27295: LESS
27296: IFFALSE 27300
// exit ;
27298: GO 27603
// if pos = 1 then
27300: LD_VAR 0 2
27304: PUSH
27305: LD_INT 1
27307: EQUAL
27308: IFFALSE 27341
// result := Replace ( arr , pos [ 1 ] , value ) else
27310: LD_ADDR_VAR 0 4
27314: PUSH
27315: LD_VAR 0 1
27319: PPUSH
27320: LD_VAR 0 2
27324: PUSH
27325: LD_INT 1
27327: ARRAY
27328: PPUSH
27329: LD_VAR 0 3
27333: PPUSH
27334: CALL_OW 1
27338: ST_TO_ADDR
27339: GO 27603
// begin tmp := arr ;
27341: LD_ADDR_VAR 0 6
27345: PUSH
27346: LD_VAR 0 1
27350: ST_TO_ADDR
// s_arr := [ tmp ] ;
27351: LD_ADDR_VAR 0 7
27355: PUSH
27356: LD_VAR 0 6
27360: PUSH
27361: EMPTY
27362: LIST
27363: ST_TO_ADDR
// for i = 1 to pos - 1 do
27364: LD_ADDR_VAR 0 5
27368: PUSH
27369: DOUBLE
27370: LD_INT 1
27372: DEC
27373: ST_TO_ADDR
27374: LD_VAR 0 2
27378: PUSH
27379: LD_INT 1
27381: MINUS
27382: PUSH
27383: FOR_TO
27384: IFFALSE 27429
// begin tmp := tmp [ pos [ i ] ] ;
27386: LD_ADDR_VAR 0 6
27390: PUSH
27391: LD_VAR 0 6
27395: PUSH
27396: LD_VAR 0 2
27400: PUSH
27401: LD_VAR 0 5
27405: ARRAY
27406: ARRAY
27407: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27408: LD_ADDR_VAR 0 7
27412: PUSH
27413: LD_VAR 0 7
27417: PUSH
27418: LD_VAR 0 6
27422: PUSH
27423: EMPTY
27424: LIST
27425: ADD
27426: ST_TO_ADDR
// end ;
27427: GO 27383
27429: POP
27430: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27431: LD_ADDR_VAR 0 6
27435: PUSH
27436: LD_VAR 0 6
27440: PPUSH
27441: LD_VAR 0 2
27445: PUSH
27446: LD_VAR 0 2
27450: ARRAY
27451: PPUSH
27452: LD_VAR 0 3
27456: PPUSH
27457: CALL_OW 1
27461: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27462: LD_ADDR_VAR 0 7
27466: PUSH
27467: LD_VAR 0 7
27471: PPUSH
27472: LD_VAR 0 7
27476: PPUSH
27477: LD_VAR 0 6
27481: PPUSH
27482: CALL_OW 1
27486: ST_TO_ADDR
// for i = s_arr downto 2 do
27487: LD_ADDR_VAR 0 5
27491: PUSH
27492: DOUBLE
27493: LD_VAR 0 7
27497: INC
27498: ST_TO_ADDR
27499: LD_INT 2
27501: PUSH
27502: FOR_DOWNTO
27503: IFFALSE 27587
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27505: LD_ADDR_VAR 0 6
27509: PUSH
27510: LD_VAR 0 7
27514: PUSH
27515: LD_VAR 0 5
27519: PUSH
27520: LD_INT 1
27522: MINUS
27523: ARRAY
27524: PPUSH
27525: LD_VAR 0 2
27529: PUSH
27530: LD_VAR 0 5
27534: PUSH
27535: LD_INT 1
27537: MINUS
27538: ARRAY
27539: PPUSH
27540: LD_VAR 0 7
27544: PUSH
27545: LD_VAR 0 5
27549: ARRAY
27550: PPUSH
27551: CALL_OW 1
27555: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27556: LD_ADDR_VAR 0 7
27560: PUSH
27561: LD_VAR 0 7
27565: PPUSH
27566: LD_VAR 0 5
27570: PUSH
27571: LD_INT 1
27573: MINUS
27574: PPUSH
27575: LD_VAR 0 6
27579: PPUSH
27580: CALL_OW 1
27584: ST_TO_ADDR
// end ;
27585: GO 27502
27587: POP
27588: POP
// result := s_arr [ 1 ] ;
27589: LD_ADDR_VAR 0 4
27593: PUSH
27594: LD_VAR 0 7
27598: PUSH
27599: LD_INT 1
27601: ARRAY
27602: ST_TO_ADDR
// end ; end ;
27603: LD_VAR 0 4
27607: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27608: LD_INT 0
27610: PPUSH
27611: PPUSH
// if not list then
27612: LD_VAR 0 1
27616: NOT
27617: IFFALSE 27621
// exit ;
27619: GO 27712
// i := list [ pos1 ] ;
27621: LD_ADDR_VAR 0 5
27625: PUSH
27626: LD_VAR 0 1
27630: PUSH
27631: LD_VAR 0 2
27635: ARRAY
27636: ST_TO_ADDR
// if not i then
27637: LD_VAR 0 5
27641: NOT
27642: IFFALSE 27646
// exit ;
27644: GO 27712
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27646: LD_ADDR_VAR 0 1
27650: PUSH
27651: LD_VAR 0 1
27655: PPUSH
27656: LD_VAR 0 2
27660: PPUSH
27661: LD_VAR 0 1
27665: PUSH
27666: LD_VAR 0 3
27670: ARRAY
27671: PPUSH
27672: CALL_OW 1
27676: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27677: LD_ADDR_VAR 0 1
27681: PUSH
27682: LD_VAR 0 1
27686: PPUSH
27687: LD_VAR 0 3
27691: PPUSH
27692: LD_VAR 0 5
27696: PPUSH
27697: CALL_OW 1
27701: ST_TO_ADDR
// result := list ;
27702: LD_ADDR_VAR 0 4
27706: PUSH
27707: LD_VAR 0 1
27711: ST_TO_ADDR
// end ;
27712: LD_VAR 0 4
27716: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27717: LD_INT 0
27719: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27720: LD_ADDR_VAR 0 5
27724: PUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL_OW 250
27734: PPUSH
27735: LD_VAR 0 1
27739: PPUSH
27740: CALL_OW 251
27744: PPUSH
27745: LD_VAR 0 2
27749: PPUSH
27750: LD_VAR 0 3
27754: PPUSH
27755: LD_VAR 0 4
27759: PPUSH
27760: CALL 27770 0 5
27764: ST_TO_ADDR
// end ;
27765: LD_VAR 0 5
27769: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27770: LD_INT 0
27772: PPUSH
27773: PPUSH
27774: PPUSH
27775: PPUSH
// if not list then
27776: LD_VAR 0 3
27780: NOT
27781: IFFALSE 27785
// exit ;
27783: GO 28173
// result := [ ] ;
27785: LD_ADDR_VAR 0 6
27789: PUSH
27790: EMPTY
27791: ST_TO_ADDR
// for i in list do
27792: LD_ADDR_VAR 0 7
27796: PUSH
27797: LD_VAR 0 3
27801: PUSH
27802: FOR_IN
27803: IFFALSE 28005
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27805: LD_ADDR_VAR 0 9
27809: PUSH
27810: LD_VAR 0 7
27814: PPUSH
27815: LD_VAR 0 1
27819: PPUSH
27820: LD_VAR 0 2
27824: PPUSH
27825: CALL_OW 297
27829: ST_TO_ADDR
// if not result then
27830: LD_VAR 0 6
27834: NOT
27835: IFFALSE 27861
// result := [ [ i , tmp ] ] else
27837: LD_ADDR_VAR 0 6
27841: PUSH
27842: LD_VAR 0 7
27846: PUSH
27847: LD_VAR 0 9
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: EMPTY
27857: LIST
27858: ST_TO_ADDR
27859: GO 28003
// begin if result [ result ] [ 2 ] < tmp then
27861: LD_VAR 0 6
27865: PUSH
27866: LD_VAR 0 6
27870: ARRAY
27871: PUSH
27872: LD_INT 2
27874: ARRAY
27875: PUSH
27876: LD_VAR 0 9
27880: LESS
27881: IFFALSE 27923
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27883: LD_ADDR_VAR 0 6
27887: PUSH
27888: LD_VAR 0 6
27892: PPUSH
27893: LD_VAR 0 6
27897: PUSH
27898: LD_INT 1
27900: PLUS
27901: PPUSH
27902: LD_VAR 0 7
27906: PUSH
27907: LD_VAR 0 9
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PPUSH
27916: CALL_OW 2
27920: ST_TO_ADDR
27921: GO 28003
// for j = 1 to result do
27923: LD_ADDR_VAR 0 8
27927: PUSH
27928: DOUBLE
27929: LD_INT 1
27931: DEC
27932: ST_TO_ADDR
27933: LD_VAR 0 6
27937: PUSH
27938: FOR_TO
27939: IFFALSE 28001
// begin if tmp < result [ j ] [ 2 ] then
27941: LD_VAR 0 9
27945: PUSH
27946: LD_VAR 0 6
27950: PUSH
27951: LD_VAR 0 8
27955: ARRAY
27956: PUSH
27957: LD_INT 2
27959: ARRAY
27960: LESS
27961: IFFALSE 27999
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27963: LD_ADDR_VAR 0 6
27967: PUSH
27968: LD_VAR 0 6
27972: PPUSH
27973: LD_VAR 0 8
27977: PPUSH
27978: LD_VAR 0 7
27982: PUSH
27983: LD_VAR 0 9
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PPUSH
27992: CALL_OW 2
27996: ST_TO_ADDR
// break ;
27997: GO 28001
// end ; end ;
27999: GO 27938
28001: POP
28002: POP
// end ; end ;
28003: GO 27802
28005: POP
28006: POP
// if result and not asc then
28007: LD_VAR 0 6
28011: PUSH
28012: LD_VAR 0 4
28016: NOT
28017: AND
28018: IFFALSE 28093
// begin tmp := result ;
28020: LD_ADDR_VAR 0 9
28024: PUSH
28025: LD_VAR 0 6
28029: ST_TO_ADDR
// for i = tmp downto 1 do
28030: LD_ADDR_VAR 0 7
28034: PUSH
28035: DOUBLE
28036: LD_VAR 0 9
28040: INC
28041: ST_TO_ADDR
28042: LD_INT 1
28044: PUSH
28045: FOR_DOWNTO
28046: IFFALSE 28091
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28048: LD_ADDR_VAR 0 6
28052: PUSH
28053: LD_VAR 0 6
28057: PPUSH
28058: LD_VAR 0 9
28062: PUSH
28063: LD_VAR 0 7
28067: MINUS
28068: PUSH
28069: LD_INT 1
28071: PLUS
28072: PPUSH
28073: LD_VAR 0 9
28077: PUSH
28078: LD_VAR 0 7
28082: ARRAY
28083: PPUSH
28084: CALL_OW 1
28088: ST_TO_ADDR
28089: GO 28045
28091: POP
28092: POP
// end ; tmp := [ ] ;
28093: LD_ADDR_VAR 0 9
28097: PUSH
28098: EMPTY
28099: ST_TO_ADDR
// if mode then
28100: LD_VAR 0 5
28104: IFFALSE 28173
// begin for i = 1 to result do
28106: LD_ADDR_VAR 0 7
28110: PUSH
28111: DOUBLE
28112: LD_INT 1
28114: DEC
28115: ST_TO_ADDR
28116: LD_VAR 0 6
28120: PUSH
28121: FOR_TO
28122: IFFALSE 28161
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28124: LD_ADDR_VAR 0 9
28128: PUSH
28129: LD_VAR 0 9
28133: PPUSH
28134: LD_VAR 0 7
28138: PPUSH
28139: LD_VAR 0 6
28143: PUSH
28144: LD_VAR 0 7
28148: ARRAY
28149: PUSH
28150: LD_INT 1
28152: ARRAY
28153: PPUSH
28154: CALL_OW 1
28158: ST_TO_ADDR
28159: GO 28121
28161: POP
28162: POP
// result := tmp ;
28163: LD_ADDR_VAR 0 6
28167: PUSH
28168: LD_VAR 0 9
28172: ST_TO_ADDR
// end ; end ;
28173: LD_VAR 0 6
28177: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28178: LD_INT 0
28180: PPUSH
28181: PPUSH
28182: PPUSH
28183: PPUSH
28184: PPUSH
28185: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28186: LD_ADDR_VAR 0 5
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: EMPTY
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: ST_TO_ADDR
// if not x or not y then
28208: LD_VAR 0 2
28212: NOT
28213: PUSH
28214: LD_VAR 0 3
28218: NOT
28219: OR
28220: IFFALSE 28224
// exit ;
28222: GO 29876
// if not range then
28224: LD_VAR 0 4
28228: NOT
28229: IFFALSE 28239
// range := 10 ;
28231: LD_ADDR_VAR 0 4
28235: PUSH
28236: LD_INT 10
28238: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28239: LD_ADDR_VAR 0 8
28243: PUSH
28244: LD_INT 81
28246: PUSH
28247: LD_VAR 0 1
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 92
28258: PUSH
28259: LD_VAR 0 2
28263: PUSH
28264: LD_VAR 0 3
28268: PUSH
28269: LD_VAR 0 4
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 3
28282: PUSH
28283: LD_INT 21
28285: PUSH
28286: LD_INT 3
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: PPUSH
28302: CALL_OW 69
28306: ST_TO_ADDR
// if not tmp then
28307: LD_VAR 0 8
28311: NOT
28312: IFFALSE 28316
// exit ;
28314: GO 29876
// for i in tmp do
28316: LD_ADDR_VAR 0 6
28320: PUSH
28321: LD_VAR 0 8
28325: PUSH
28326: FOR_IN
28327: IFFALSE 29851
// begin points := [ 0 , 0 , 0 ] ;
28329: LD_ADDR_VAR 0 9
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: ST_TO_ADDR
// bpoints := 1 ;
28348: LD_ADDR_VAR 0 10
28352: PUSH
28353: LD_INT 1
28355: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28356: LD_VAR 0 6
28360: PPUSH
28361: CALL_OW 247
28365: PUSH
28366: LD_INT 1
28368: DOUBLE
28369: EQUAL
28370: IFTRUE 28374
28372: GO 28952
28374: POP
// begin if GetClass ( i ) = 1 then
28375: LD_VAR 0 6
28379: PPUSH
28380: CALL_OW 257
28384: PUSH
28385: LD_INT 1
28387: EQUAL
28388: IFFALSE 28409
// points := [ 10 , 5 , 3 ] ;
28390: LD_ADDR_VAR 0 9
28394: PUSH
28395: LD_INT 10
28397: PUSH
28398: LD_INT 5
28400: PUSH
28401: LD_INT 3
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: LIST
28408: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28409: LD_VAR 0 6
28413: PPUSH
28414: CALL_OW 257
28418: PUSH
28419: LD_INT 2
28421: PUSH
28422: LD_INT 3
28424: PUSH
28425: LD_INT 4
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: IN
28433: IFFALSE 28454
// points := [ 3 , 2 , 1 ] ;
28435: LD_ADDR_VAR 0 9
28439: PUSH
28440: LD_INT 3
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28454: LD_VAR 0 6
28458: PPUSH
28459: CALL_OW 257
28463: PUSH
28464: LD_INT 5
28466: EQUAL
28467: IFFALSE 28488
// points := [ 130 , 5 , 2 ] ;
28469: LD_ADDR_VAR 0 9
28473: PUSH
28474: LD_INT 130
28476: PUSH
28477: LD_INT 5
28479: PUSH
28480: LD_INT 2
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: LIST
28487: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28488: LD_VAR 0 6
28492: PPUSH
28493: CALL_OW 257
28497: PUSH
28498: LD_INT 8
28500: EQUAL
28501: IFFALSE 28522
// points := [ 35 , 35 , 30 ] ;
28503: LD_ADDR_VAR 0 9
28507: PUSH
28508: LD_INT 35
28510: PUSH
28511: LD_INT 35
28513: PUSH
28514: LD_INT 30
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: LIST
28521: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28522: LD_VAR 0 6
28526: PPUSH
28527: CALL_OW 257
28531: PUSH
28532: LD_INT 9
28534: EQUAL
28535: IFFALSE 28556
// points := [ 20 , 55 , 40 ] ;
28537: LD_ADDR_VAR 0 9
28541: PUSH
28542: LD_INT 20
28544: PUSH
28545: LD_INT 55
28547: PUSH
28548: LD_INT 40
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28556: LD_VAR 0 6
28560: PPUSH
28561: CALL_OW 257
28565: PUSH
28566: LD_INT 12
28568: PUSH
28569: LD_INT 16
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: IN
28576: IFFALSE 28597
// points := [ 5 , 3 , 2 ] ;
28578: LD_ADDR_VAR 0 9
28582: PUSH
28583: LD_INT 5
28585: PUSH
28586: LD_INT 3
28588: PUSH
28589: LD_INT 2
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: LIST
28596: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28597: LD_VAR 0 6
28601: PPUSH
28602: CALL_OW 257
28606: PUSH
28607: LD_INT 17
28609: EQUAL
28610: IFFALSE 28631
// points := [ 100 , 50 , 75 ] ;
28612: LD_ADDR_VAR 0 9
28616: PUSH
28617: LD_INT 100
28619: PUSH
28620: LD_INT 50
28622: PUSH
28623: LD_INT 75
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: LIST
28630: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28631: LD_VAR 0 6
28635: PPUSH
28636: CALL_OW 257
28640: PUSH
28641: LD_INT 15
28643: EQUAL
28644: IFFALSE 28665
// points := [ 10 , 5 , 3 ] ;
28646: LD_ADDR_VAR 0 9
28650: PUSH
28651: LD_INT 10
28653: PUSH
28654: LD_INT 5
28656: PUSH
28657: LD_INT 3
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: LIST
28664: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28665: LD_VAR 0 6
28669: PPUSH
28670: CALL_OW 257
28674: PUSH
28675: LD_INT 14
28677: EQUAL
28678: IFFALSE 28699
// points := [ 10 , 0 , 0 ] ;
28680: LD_ADDR_VAR 0 9
28684: PUSH
28685: LD_INT 10
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: LIST
28698: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28699: LD_VAR 0 6
28703: PPUSH
28704: CALL_OW 257
28708: PUSH
28709: LD_INT 11
28711: EQUAL
28712: IFFALSE 28733
// points := [ 30 , 10 , 5 ] ;
28714: LD_ADDR_VAR 0 9
28718: PUSH
28719: LD_INT 30
28721: PUSH
28722: LD_INT 10
28724: PUSH
28725: LD_INT 5
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: LIST
28732: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28733: LD_VAR 0 1
28737: PPUSH
28738: LD_INT 5
28740: PPUSH
28741: CALL_OW 321
28745: PUSH
28746: LD_INT 2
28748: EQUAL
28749: IFFALSE 28766
// bpoints := bpoints * 1.8 ;
28751: LD_ADDR_VAR 0 10
28755: PUSH
28756: LD_VAR 0 10
28760: PUSH
28761: LD_REAL  1.80000000000000E+0000
28764: MUL
28765: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28766: LD_VAR 0 6
28770: PPUSH
28771: CALL_OW 257
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: LD_INT 3
28784: PUSH
28785: LD_INT 4
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: IN
28794: PUSH
28795: LD_VAR 0 1
28799: PPUSH
28800: LD_INT 51
28802: PPUSH
28803: CALL_OW 321
28807: PUSH
28808: LD_INT 2
28810: EQUAL
28811: AND
28812: IFFALSE 28829
// bpoints := bpoints * 1.2 ;
28814: LD_ADDR_VAR 0 10
28818: PUSH
28819: LD_VAR 0 10
28823: PUSH
28824: LD_REAL  1.20000000000000E+0000
28827: MUL
28828: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28829: LD_VAR 0 6
28833: PPUSH
28834: CALL_OW 257
28838: PUSH
28839: LD_INT 5
28841: PUSH
28842: LD_INT 7
28844: PUSH
28845: LD_INT 9
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: LIST
28852: IN
28853: PUSH
28854: LD_VAR 0 1
28858: PPUSH
28859: LD_INT 52
28861: PPUSH
28862: CALL_OW 321
28866: PUSH
28867: LD_INT 2
28869: EQUAL
28870: AND
28871: IFFALSE 28888
// bpoints := bpoints * 1.5 ;
28873: LD_ADDR_VAR 0 10
28877: PUSH
28878: LD_VAR 0 10
28882: PUSH
28883: LD_REAL  1.50000000000000E+0000
28886: MUL
28887: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28888: LD_VAR 0 1
28892: PPUSH
28893: LD_INT 66
28895: PPUSH
28896: CALL_OW 321
28900: PUSH
28901: LD_INT 2
28903: EQUAL
28904: IFFALSE 28921
// bpoints := bpoints * 1.1 ;
28906: LD_ADDR_VAR 0 10
28910: PUSH
28911: LD_VAR 0 10
28915: PUSH
28916: LD_REAL  1.10000000000000E+0000
28919: MUL
28920: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28921: LD_ADDR_VAR 0 10
28925: PUSH
28926: LD_VAR 0 10
28930: PUSH
28931: LD_VAR 0 6
28935: PPUSH
28936: LD_INT 1
28938: PPUSH
28939: CALL_OW 259
28943: PUSH
28944: LD_REAL  1.15000000000000E+0000
28947: MUL
28948: MUL
28949: ST_TO_ADDR
// end ; unit_vehicle :
28950: GO 29780
28952: LD_INT 2
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28960
28958: GO 29768
28960: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28961: LD_VAR 0 6
28965: PPUSH
28966: CALL_OW 264
28970: PUSH
28971: LD_INT 2
28973: PUSH
28974: LD_INT 42
28976: PUSH
28977: LD_INT 24
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: LIST
28984: IN
28985: IFFALSE 29006
// points := [ 25 , 5 , 3 ] ;
28987: LD_ADDR_VAR 0 9
28991: PUSH
28992: LD_INT 25
28994: PUSH
28995: LD_INT 5
28997: PUSH
28998: LD_INT 3
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29006: LD_VAR 0 6
29010: PPUSH
29011: CALL_OW 264
29015: PUSH
29016: LD_INT 4
29018: PUSH
29019: LD_INT 43
29021: PUSH
29022: LD_INT 25
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: LIST
29029: IN
29030: IFFALSE 29051
// points := [ 40 , 15 , 5 ] ;
29032: LD_ADDR_VAR 0 9
29036: PUSH
29037: LD_INT 40
29039: PUSH
29040: LD_INT 15
29042: PUSH
29043: LD_INT 5
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29051: LD_VAR 0 6
29055: PPUSH
29056: CALL_OW 264
29060: PUSH
29061: LD_INT 3
29063: PUSH
29064: LD_INT 23
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: IN
29071: IFFALSE 29092
// points := [ 7 , 25 , 8 ] ;
29073: LD_ADDR_VAR 0 9
29077: PUSH
29078: LD_INT 7
29080: PUSH
29081: LD_INT 25
29083: PUSH
29084: LD_INT 8
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: LIST
29091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29092: LD_VAR 0 6
29096: PPUSH
29097: CALL_OW 264
29101: PUSH
29102: LD_INT 5
29104: PUSH
29105: LD_INT 27
29107: PUSH
29108: LD_INT 44
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: LIST
29115: IN
29116: IFFALSE 29137
// points := [ 14 , 50 , 16 ] ;
29118: LD_ADDR_VAR 0 9
29122: PUSH
29123: LD_INT 14
29125: PUSH
29126: LD_INT 50
29128: PUSH
29129: LD_INT 16
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: LIST
29136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29137: LD_VAR 0 6
29141: PPUSH
29142: CALL_OW 264
29146: PUSH
29147: LD_INT 6
29149: PUSH
29150: LD_INT 46
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: IN
29157: IFFALSE 29178
// points := [ 32 , 120 , 70 ] ;
29159: LD_ADDR_VAR 0 9
29163: PUSH
29164: LD_INT 32
29166: PUSH
29167: LD_INT 120
29169: PUSH
29170: LD_INT 70
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29178: LD_VAR 0 6
29182: PPUSH
29183: CALL_OW 264
29187: PUSH
29188: LD_INT 7
29190: PUSH
29191: LD_INT 28
29193: PUSH
29194: LD_INT 45
29196: PUSH
29197: LD_EXP 59
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: IN
29208: IFFALSE 29229
// points := [ 35 , 20 , 45 ] ;
29210: LD_ADDR_VAR 0 9
29214: PUSH
29215: LD_INT 35
29217: PUSH
29218: LD_INT 20
29220: PUSH
29221: LD_INT 45
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: LIST
29228: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29229: LD_VAR 0 6
29233: PPUSH
29234: CALL_OW 264
29238: PUSH
29239: LD_INT 47
29241: PUSH
29242: EMPTY
29243: LIST
29244: IN
29245: IFFALSE 29266
// points := [ 67 , 45 , 75 ] ;
29247: LD_ADDR_VAR 0 9
29251: PUSH
29252: LD_INT 67
29254: PUSH
29255: LD_INT 45
29257: PUSH
29258: LD_INT 75
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29266: LD_VAR 0 6
29270: PPUSH
29271: CALL_OW 264
29275: PUSH
29276: LD_INT 26
29278: PUSH
29279: EMPTY
29280: LIST
29281: IN
29282: IFFALSE 29303
// points := [ 120 , 30 , 80 ] ;
29284: LD_ADDR_VAR 0 9
29288: PUSH
29289: LD_INT 120
29291: PUSH
29292: LD_INT 30
29294: PUSH
29295: LD_INT 80
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: LIST
29302: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29303: LD_VAR 0 6
29307: PPUSH
29308: CALL_OW 264
29312: PUSH
29313: LD_INT 22
29315: PUSH
29316: EMPTY
29317: LIST
29318: IN
29319: IFFALSE 29340
// points := [ 40 , 1 , 1 ] ;
29321: LD_ADDR_VAR 0 9
29325: PUSH
29326: LD_INT 40
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: LIST
29339: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29340: LD_VAR 0 6
29344: PPUSH
29345: CALL_OW 264
29349: PUSH
29350: LD_INT 29
29352: PUSH
29353: EMPTY
29354: LIST
29355: IN
29356: IFFALSE 29377
// points := [ 70 , 200 , 400 ] ;
29358: LD_ADDR_VAR 0 9
29362: PUSH
29363: LD_INT 70
29365: PUSH
29366: LD_INT 200
29368: PUSH
29369: LD_INT 400
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29377: LD_VAR 0 6
29381: PPUSH
29382: CALL_OW 264
29386: PUSH
29387: LD_INT 14
29389: PUSH
29390: LD_INT 53
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: IN
29397: IFFALSE 29418
// points := [ 40 , 10 , 20 ] ;
29399: LD_ADDR_VAR 0 9
29403: PUSH
29404: LD_INT 40
29406: PUSH
29407: LD_INT 10
29409: PUSH
29410: LD_INT 20
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29418: LD_VAR 0 6
29422: PPUSH
29423: CALL_OW 264
29427: PUSH
29428: LD_INT 9
29430: PUSH
29431: EMPTY
29432: LIST
29433: IN
29434: IFFALSE 29455
// points := [ 5 , 70 , 20 ] ;
29436: LD_ADDR_VAR 0 9
29440: PUSH
29441: LD_INT 5
29443: PUSH
29444: LD_INT 70
29446: PUSH
29447: LD_INT 20
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29455: LD_VAR 0 6
29459: PPUSH
29460: CALL_OW 264
29464: PUSH
29465: LD_INT 10
29467: PUSH
29468: EMPTY
29469: LIST
29470: IN
29471: IFFALSE 29492
// points := [ 35 , 110 , 70 ] ;
29473: LD_ADDR_VAR 0 9
29477: PUSH
29478: LD_INT 35
29480: PUSH
29481: LD_INT 110
29483: PUSH
29484: LD_INT 70
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29492: LD_VAR 0 6
29496: PPUSH
29497: CALL_OW 265
29501: PUSH
29502: LD_INT 25
29504: EQUAL
29505: IFFALSE 29526
// points := [ 80 , 65 , 100 ] ;
29507: LD_ADDR_VAR 0 9
29511: PUSH
29512: LD_INT 80
29514: PUSH
29515: LD_INT 65
29517: PUSH
29518: LD_INT 100
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29526: LD_VAR 0 6
29530: PPUSH
29531: CALL_OW 263
29535: PUSH
29536: LD_INT 1
29538: EQUAL
29539: IFFALSE 29574
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29541: LD_ADDR_VAR 0 10
29545: PUSH
29546: LD_VAR 0 10
29550: PUSH
29551: LD_VAR 0 6
29555: PPUSH
29556: CALL_OW 311
29560: PPUSH
29561: LD_INT 3
29563: PPUSH
29564: CALL_OW 259
29568: PUSH
29569: LD_INT 4
29571: MUL
29572: MUL
29573: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29574: LD_VAR 0 6
29578: PPUSH
29579: CALL_OW 263
29583: PUSH
29584: LD_INT 2
29586: EQUAL
29587: IFFALSE 29638
// begin j := IsControledBy ( i ) ;
29589: LD_ADDR_VAR 0 7
29593: PUSH
29594: LD_VAR 0 6
29598: PPUSH
29599: CALL_OW 312
29603: ST_TO_ADDR
// if j then
29604: LD_VAR 0 7
29608: IFFALSE 29638
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29610: LD_ADDR_VAR 0 10
29614: PUSH
29615: LD_VAR 0 10
29619: PUSH
29620: LD_VAR 0 7
29624: PPUSH
29625: LD_INT 3
29627: PPUSH
29628: CALL_OW 259
29632: PUSH
29633: LD_INT 3
29635: MUL
29636: MUL
29637: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29638: LD_VAR 0 6
29642: PPUSH
29643: CALL_OW 264
29647: PUSH
29648: LD_INT 5
29650: PUSH
29651: LD_INT 6
29653: PUSH
29654: LD_INT 46
29656: PUSH
29657: LD_INT 44
29659: PUSH
29660: LD_INT 47
29662: PUSH
29663: LD_INT 45
29665: PUSH
29666: LD_INT 28
29668: PUSH
29669: LD_INT 7
29671: PUSH
29672: LD_INT 27
29674: PUSH
29675: LD_INT 29
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: IN
29690: PUSH
29691: LD_VAR 0 1
29695: PPUSH
29696: LD_INT 52
29698: PPUSH
29699: CALL_OW 321
29703: PUSH
29704: LD_INT 2
29706: EQUAL
29707: AND
29708: IFFALSE 29725
// bpoints := bpoints * 1.2 ;
29710: LD_ADDR_VAR 0 10
29714: PUSH
29715: LD_VAR 0 10
29719: PUSH
29720: LD_REAL  1.20000000000000E+0000
29723: MUL
29724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29725: LD_VAR 0 6
29729: PPUSH
29730: CALL_OW 264
29734: PUSH
29735: LD_INT 6
29737: PUSH
29738: LD_INT 46
29740: PUSH
29741: LD_INT 47
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: LIST
29748: IN
29749: IFFALSE 29766
// bpoints := bpoints * 1.2 ;
29751: LD_ADDR_VAR 0 10
29755: PUSH
29756: LD_VAR 0 10
29760: PUSH
29761: LD_REAL  1.20000000000000E+0000
29764: MUL
29765: ST_TO_ADDR
// end ; unit_building :
29766: GO 29780
29768: LD_INT 3
29770: DOUBLE
29771: EQUAL
29772: IFTRUE 29776
29774: GO 29779
29776: POP
// ; end ;
29777: GO 29780
29779: POP
// for j = 1 to 3 do
29780: LD_ADDR_VAR 0 7
29784: PUSH
29785: DOUBLE
29786: LD_INT 1
29788: DEC
29789: ST_TO_ADDR
29790: LD_INT 3
29792: PUSH
29793: FOR_TO
29794: IFFALSE 29847
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29796: LD_ADDR_VAR 0 5
29800: PUSH
29801: LD_VAR 0 5
29805: PPUSH
29806: LD_VAR 0 7
29810: PPUSH
29811: LD_VAR 0 5
29815: PUSH
29816: LD_VAR 0 7
29820: ARRAY
29821: PUSH
29822: LD_VAR 0 9
29826: PUSH
29827: LD_VAR 0 7
29831: ARRAY
29832: PUSH
29833: LD_VAR 0 10
29837: MUL
29838: PLUS
29839: PPUSH
29840: CALL_OW 1
29844: ST_TO_ADDR
29845: GO 29793
29847: POP
29848: POP
// end ;
29849: GO 28326
29851: POP
29852: POP
// result := Replace ( result , 4 , tmp ) ;
29853: LD_ADDR_VAR 0 5
29857: PUSH
29858: LD_VAR 0 5
29862: PPUSH
29863: LD_INT 4
29865: PPUSH
29866: LD_VAR 0 8
29870: PPUSH
29871: CALL_OW 1
29875: ST_TO_ADDR
// end ;
29876: LD_VAR 0 5
29880: RET
// export function DangerAtRange ( unit , range ) ; begin
29881: LD_INT 0
29883: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29884: LD_ADDR_VAR 0 3
29888: PUSH
29889: LD_VAR 0 1
29893: PPUSH
29894: CALL_OW 255
29898: PPUSH
29899: LD_VAR 0 1
29903: PPUSH
29904: CALL_OW 250
29908: PPUSH
29909: LD_VAR 0 1
29913: PPUSH
29914: CALL_OW 251
29918: PPUSH
29919: LD_VAR 0 2
29923: PPUSH
29924: CALL 28178 0 4
29928: ST_TO_ADDR
// end ;
29929: LD_VAR 0 3
29933: RET
// export function DangerInArea ( side , area ) ; begin
29934: LD_INT 0
29936: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29937: LD_ADDR_VAR 0 3
29941: PUSH
29942: LD_VAR 0 2
29946: PPUSH
29947: LD_INT 81
29949: PUSH
29950: LD_VAR 0 1
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PPUSH
29959: CALL_OW 70
29963: ST_TO_ADDR
// end ;
29964: LD_VAR 0 3
29968: RET
// export function IsExtension ( b ) ; begin
29969: LD_INT 0
29971: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29972: LD_ADDR_VAR 0 2
29976: PUSH
29977: LD_VAR 0 1
29981: PUSH
29982: LD_INT 23
29984: PUSH
29985: LD_INT 20
29987: PUSH
29988: LD_INT 22
29990: PUSH
29991: LD_INT 17
29993: PUSH
29994: LD_INT 24
29996: PUSH
29997: LD_INT 21
29999: PUSH
30000: LD_INT 19
30002: PUSH
30003: LD_INT 16
30005: PUSH
30006: LD_INT 25
30008: PUSH
30009: LD_INT 18
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: IN
30024: ST_TO_ADDR
// end ;
30025: LD_VAR 0 2
30029: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30030: LD_INT 0
30032: PPUSH
30033: PPUSH
30034: PPUSH
// result := [ ] ;
30035: LD_ADDR_VAR 0 4
30039: PUSH
30040: EMPTY
30041: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30042: LD_ADDR_VAR 0 5
30046: PUSH
30047: LD_VAR 0 2
30051: PPUSH
30052: LD_INT 21
30054: PUSH
30055: LD_INT 3
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PPUSH
30062: CALL_OW 70
30066: ST_TO_ADDR
// if not tmp then
30067: LD_VAR 0 5
30071: NOT
30072: IFFALSE 30076
// exit ;
30074: GO 30140
// if checkLink then
30076: LD_VAR 0 3
30080: IFFALSE 30130
// begin for i in tmp do
30082: LD_ADDR_VAR 0 6
30086: PUSH
30087: LD_VAR 0 5
30091: PUSH
30092: FOR_IN
30093: IFFALSE 30128
// if GetBase ( i ) <> base then
30095: LD_VAR 0 6
30099: PPUSH
30100: CALL_OW 274
30104: PUSH
30105: LD_VAR 0 1
30109: NONEQUAL
30110: IFFALSE 30126
// ComLinkToBase ( base , i ) ;
30112: LD_VAR 0 1
30116: PPUSH
30117: LD_VAR 0 6
30121: PPUSH
30122: CALL_OW 169
30126: GO 30092
30128: POP
30129: POP
// end ; result := tmp ;
30130: LD_ADDR_VAR 0 4
30134: PUSH
30135: LD_VAR 0 5
30139: ST_TO_ADDR
// end ;
30140: LD_VAR 0 4
30144: RET
// export function ComComplete ( units , b ) ; var i ; begin
30145: LD_INT 0
30147: PPUSH
30148: PPUSH
// if not units then
30149: LD_VAR 0 1
30153: NOT
30154: IFFALSE 30158
// exit ;
30156: GO 30248
// for i in units do
30158: LD_ADDR_VAR 0 4
30162: PUSH
30163: LD_VAR 0 1
30167: PUSH
30168: FOR_IN
30169: IFFALSE 30246
// if BuildingStatus ( b ) = bs_build then
30171: LD_VAR 0 2
30175: PPUSH
30176: CALL_OW 461
30180: PUSH
30181: LD_INT 1
30183: EQUAL
30184: IFFALSE 30244
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30186: LD_VAR 0 4
30190: PPUSH
30191: LD_STRING h
30193: PUSH
30194: LD_VAR 0 2
30198: PPUSH
30199: CALL_OW 250
30203: PUSH
30204: LD_VAR 0 2
30208: PPUSH
30209: CALL_OW 251
30213: PUSH
30214: LD_VAR 0 2
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: PUSH
30237: EMPTY
30238: LIST
30239: PPUSH
30240: CALL_OW 446
30244: GO 30168
30246: POP
30247: POP
// end ;
30248: LD_VAR 0 3
30252: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30253: LD_INT 0
30255: PPUSH
30256: PPUSH
30257: PPUSH
30258: PPUSH
30259: PPUSH
30260: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
30261: LD_VAR 0 1
30265: NOT
30266: PUSH
30267: LD_VAR 0 1
30271: PPUSH
30272: CALL_OW 263
30276: PUSH
30277: LD_INT 2
30279: EQUAL
30280: NOT
30281: OR
30282: IFFALSE 30286
// exit ;
30284: GO 30602
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30286: LD_ADDR_VAR 0 6
30290: PUSH
30291: LD_INT 22
30293: PUSH
30294: LD_VAR 0 1
30298: PPUSH
30299: CALL_OW 255
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 2
30310: PUSH
30311: LD_INT 30
30313: PUSH
30314: LD_INT 36
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 34
30323: PUSH
30324: LD_INT 31
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PPUSH
30340: CALL_OW 69
30344: ST_TO_ADDR
// if not tmp then
30345: LD_VAR 0 6
30349: NOT
30350: IFFALSE 30354
// exit ;
30352: GO 30602
// result := [ ] ;
30354: LD_ADDR_VAR 0 2
30358: PUSH
30359: EMPTY
30360: ST_TO_ADDR
// for i in tmp do
30361: LD_ADDR_VAR 0 3
30365: PUSH
30366: LD_VAR 0 6
30370: PUSH
30371: FOR_IN
30372: IFFALSE 30443
// begin t := UnitsInside ( i ) ;
30374: LD_ADDR_VAR 0 4
30378: PUSH
30379: LD_VAR 0 3
30383: PPUSH
30384: CALL_OW 313
30388: ST_TO_ADDR
// if t then
30389: LD_VAR 0 4
30393: IFFALSE 30441
// for j in t do
30395: LD_ADDR_VAR 0 7
30399: PUSH
30400: LD_VAR 0 4
30404: PUSH
30405: FOR_IN
30406: IFFALSE 30439
// result := Insert ( result , result + 1 , j ) ;
30408: LD_ADDR_VAR 0 2
30412: PUSH
30413: LD_VAR 0 2
30417: PPUSH
30418: LD_VAR 0 2
30422: PUSH
30423: LD_INT 1
30425: PLUS
30426: PPUSH
30427: LD_VAR 0 7
30431: PPUSH
30432: CALL_OW 2
30436: ST_TO_ADDR
30437: GO 30405
30439: POP
30440: POP
// end ;
30441: GO 30371
30443: POP
30444: POP
// if not result then
30445: LD_VAR 0 2
30449: NOT
30450: IFFALSE 30454
// exit ;
30452: GO 30602
// mech := result [ 1 ] ;
30454: LD_ADDR_VAR 0 5
30458: PUSH
30459: LD_VAR 0 2
30463: PUSH
30464: LD_INT 1
30466: ARRAY
30467: ST_TO_ADDR
// if result > 1 then
30468: LD_VAR 0 2
30472: PUSH
30473: LD_INT 1
30475: GREATER
30476: IFFALSE 30588
// for i = 2 to result do
30478: LD_ADDR_VAR 0 3
30482: PUSH
30483: DOUBLE
30484: LD_INT 2
30486: DEC
30487: ST_TO_ADDR
30488: LD_VAR 0 2
30492: PUSH
30493: FOR_TO
30494: IFFALSE 30586
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30496: LD_ADDR_VAR 0 4
30500: PUSH
30501: LD_VAR 0 2
30505: PUSH
30506: LD_VAR 0 3
30510: ARRAY
30511: PPUSH
30512: LD_INT 3
30514: PPUSH
30515: CALL_OW 259
30519: PUSH
30520: LD_VAR 0 2
30524: PUSH
30525: LD_VAR 0 3
30529: ARRAY
30530: PPUSH
30531: CALL_OW 432
30535: MINUS
30536: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30537: LD_VAR 0 4
30541: PUSH
30542: LD_VAR 0 5
30546: PPUSH
30547: LD_INT 3
30549: PPUSH
30550: CALL_OW 259
30554: PUSH
30555: LD_VAR 0 5
30559: PPUSH
30560: CALL_OW 432
30564: MINUS
30565: GREATEREQUAL
30566: IFFALSE 30584
// mech := result [ i ] ;
30568: LD_ADDR_VAR 0 5
30572: PUSH
30573: LD_VAR 0 2
30577: PUSH
30578: LD_VAR 0 3
30582: ARRAY
30583: ST_TO_ADDR
// end ;
30584: GO 30493
30586: POP
30587: POP
// ComLinkTo ( vehicle , mech ) ;
30588: LD_VAR 0 1
30592: PPUSH
30593: LD_VAR 0 5
30597: PPUSH
30598: CALL_OW 135
// end ;
30602: LD_VAR 0 2
30606: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30607: LD_INT 0
30609: PPUSH
30610: PPUSH
30611: PPUSH
30612: PPUSH
30613: PPUSH
30614: PPUSH
30615: PPUSH
30616: PPUSH
30617: PPUSH
30618: PPUSH
30619: PPUSH
30620: PPUSH
30621: PPUSH
// result := [ ] ;
30622: LD_ADDR_VAR 0 7
30626: PUSH
30627: EMPTY
30628: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30629: LD_VAR 0 1
30633: PPUSH
30634: CALL_OW 266
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: IN
30649: NOT
30650: IFFALSE 30654
// exit ;
30652: GO 32288
// if name then
30654: LD_VAR 0 3
30658: IFFALSE 30674
// SetBName ( base_dep , name ) ;
30660: LD_VAR 0 1
30664: PPUSH
30665: LD_VAR 0 3
30669: PPUSH
30670: CALL_OW 500
// base := GetBase ( base_dep ) ;
30674: LD_ADDR_VAR 0 15
30678: PUSH
30679: LD_VAR 0 1
30683: PPUSH
30684: CALL_OW 274
30688: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30689: LD_ADDR_VAR 0 16
30693: PUSH
30694: LD_VAR 0 1
30698: PPUSH
30699: CALL_OW 255
30703: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30704: LD_ADDR_VAR 0 17
30708: PUSH
30709: LD_VAR 0 1
30713: PPUSH
30714: CALL_OW 248
30718: ST_TO_ADDR
// if sources then
30719: LD_VAR 0 5
30723: IFFALSE 30770
// for i = 1 to 3 do
30725: LD_ADDR_VAR 0 8
30729: PUSH
30730: DOUBLE
30731: LD_INT 1
30733: DEC
30734: ST_TO_ADDR
30735: LD_INT 3
30737: PUSH
30738: FOR_TO
30739: IFFALSE 30768
// AddResourceType ( base , i , sources [ i ] ) ;
30741: LD_VAR 0 15
30745: PPUSH
30746: LD_VAR 0 8
30750: PPUSH
30751: LD_VAR 0 5
30755: PUSH
30756: LD_VAR 0 8
30760: ARRAY
30761: PPUSH
30762: CALL_OW 276
30766: GO 30738
30768: POP
30769: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30770: LD_ADDR_VAR 0 18
30774: PUSH
30775: LD_VAR 0 15
30779: PPUSH
30780: LD_VAR 0 2
30784: PPUSH
30785: LD_INT 1
30787: PPUSH
30788: CALL 30030 0 3
30792: ST_TO_ADDR
// InitHc ;
30793: CALL_OW 19
// InitUc ;
30797: CALL_OW 18
// uc_side := side ;
30801: LD_ADDR_OWVAR 20
30805: PUSH
30806: LD_VAR 0 16
30810: ST_TO_ADDR
// uc_nation := nation ;
30811: LD_ADDR_OWVAR 21
30815: PUSH
30816: LD_VAR 0 17
30820: ST_TO_ADDR
// if buildings then
30821: LD_VAR 0 18
30825: IFFALSE 32147
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30827: LD_ADDR_VAR 0 19
30831: PUSH
30832: LD_VAR 0 18
30836: PPUSH
30837: LD_INT 2
30839: PUSH
30840: LD_INT 30
30842: PUSH
30843: LD_INT 29
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 30
30852: PUSH
30853: LD_INT 30
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: PPUSH
30865: CALL_OW 72
30869: ST_TO_ADDR
// if tmp then
30870: LD_VAR 0 19
30874: IFFALSE 30922
// for i in tmp do
30876: LD_ADDR_VAR 0 8
30880: PUSH
30881: LD_VAR 0 19
30885: PUSH
30886: FOR_IN
30887: IFFALSE 30920
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30889: LD_VAR 0 8
30893: PPUSH
30894: CALL_OW 250
30898: PPUSH
30899: LD_VAR 0 8
30903: PPUSH
30904: CALL_OW 251
30908: PPUSH
30909: LD_VAR 0 16
30913: PPUSH
30914: CALL_OW 441
30918: GO 30886
30920: POP
30921: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30922: LD_VAR 0 18
30926: PPUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 30
30932: PUSH
30933: LD_INT 32
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 30
30942: PUSH
30943: LD_INT 33
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: PPUSH
30955: CALL_OW 72
30959: IFFALSE 31047
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30961: LD_ADDR_VAR 0 8
30965: PUSH
30966: LD_VAR 0 18
30970: PPUSH
30971: LD_INT 2
30973: PUSH
30974: LD_INT 30
30976: PUSH
30977: LD_INT 32
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 30
30986: PUSH
30987: LD_INT 33
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: PPUSH
30999: CALL_OW 72
31003: PUSH
31004: FOR_IN
31005: IFFALSE 31045
// begin if not GetBWeapon ( i ) then
31007: LD_VAR 0 8
31011: PPUSH
31012: CALL_OW 269
31016: NOT
31017: IFFALSE 31043
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31019: LD_VAR 0 8
31023: PPUSH
31024: LD_VAR 0 8
31028: PPUSH
31029: LD_VAR 0 2
31033: PPUSH
31034: CALL 32293 0 2
31038: PPUSH
31039: CALL_OW 431
// end ;
31043: GO 31004
31045: POP
31046: POP
// end ; for i = 1 to personel do
31047: LD_ADDR_VAR 0 8
31051: PUSH
31052: DOUBLE
31053: LD_INT 1
31055: DEC
31056: ST_TO_ADDR
31057: LD_VAR 0 6
31061: PUSH
31062: FOR_TO
31063: IFFALSE 32127
// begin if i > 4 then
31065: LD_VAR 0 8
31069: PUSH
31070: LD_INT 4
31072: GREATER
31073: IFFALSE 31077
// break ;
31075: GO 32127
// case i of 1 :
31077: LD_VAR 0 8
31081: PUSH
31082: LD_INT 1
31084: DOUBLE
31085: EQUAL
31086: IFTRUE 31090
31088: GO 31170
31090: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31091: LD_ADDR_VAR 0 12
31095: PUSH
31096: LD_VAR 0 18
31100: PPUSH
31101: LD_INT 22
31103: PUSH
31104: LD_VAR 0 16
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 58
31115: PUSH
31116: EMPTY
31117: LIST
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 30
31124: PUSH
31125: LD_INT 32
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 30
31134: PUSH
31135: LD_INT 4
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 30
31144: PUSH
31145: LD_INT 5
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: PPUSH
31163: CALL_OW 72
31167: ST_TO_ADDR
31168: GO 31392
31170: LD_INT 2
31172: DOUBLE
31173: EQUAL
31174: IFTRUE 31178
31176: GO 31240
31178: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31179: LD_ADDR_VAR 0 12
31183: PUSH
31184: LD_VAR 0 18
31188: PPUSH
31189: LD_INT 22
31191: PUSH
31192: LD_VAR 0 16
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 2
31203: PUSH
31204: LD_INT 30
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 30
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PPUSH
31233: CALL_OW 72
31237: ST_TO_ADDR
31238: GO 31392
31240: LD_INT 3
31242: DOUBLE
31243: EQUAL
31244: IFTRUE 31248
31246: GO 31310
31248: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31249: LD_ADDR_VAR 0 12
31253: PUSH
31254: LD_VAR 0 18
31258: PPUSH
31259: LD_INT 22
31261: PUSH
31262: LD_VAR 0 16
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: LD_INT 30
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 30
31286: PUSH
31287: LD_INT 3
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PPUSH
31303: CALL_OW 72
31307: ST_TO_ADDR
31308: GO 31392
31310: LD_INT 4
31312: DOUBLE
31313: EQUAL
31314: IFTRUE 31318
31316: GO 31391
31318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31319: LD_ADDR_VAR 0 12
31323: PUSH
31324: LD_VAR 0 18
31328: PPUSH
31329: LD_INT 22
31331: PUSH
31332: LD_VAR 0 16
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: LD_INT 30
31346: PUSH
31347: LD_INT 6
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 30
31356: PUSH
31357: LD_INT 7
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 30
31366: PUSH
31367: LD_INT 8
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PPUSH
31384: CALL_OW 72
31388: ST_TO_ADDR
31389: GO 31392
31391: POP
// if i = 1 then
31392: LD_VAR 0 8
31396: PUSH
31397: LD_INT 1
31399: EQUAL
31400: IFFALSE 31511
// begin tmp := [ ] ;
31402: LD_ADDR_VAR 0 19
31406: PUSH
31407: EMPTY
31408: ST_TO_ADDR
// for j in f do
31409: LD_ADDR_VAR 0 9
31413: PUSH
31414: LD_VAR 0 12
31418: PUSH
31419: FOR_IN
31420: IFFALSE 31493
// if GetBType ( j ) = b_bunker then
31422: LD_VAR 0 9
31426: PPUSH
31427: CALL_OW 266
31431: PUSH
31432: LD_INT 32
31434: EQUAL
31435: IFFALSE 31462
// tmp := Insert ( tmp , 1 , j ) else
31437: LD_ADDR_VAR 0 19
31441: PUSH
31442: LD_VAR 0 19
31446: PPUSH
31447: LD_INT 1
31449: PPUSH
31450: LD_VAR 0 9
31454: PPUSH
31455: CALL_OW 2
31459: ST_TO_ADDR
31460: GO 31491
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31462: LD_ADDR_VAR 0 19
31466: PUSH
31467: LD_VAR 0 19
31471: PPUSH
31472: LD_VAR 0 19
31476: PUSH
31477: LD_INT 1
31479: PLUS
31480: PPUSH
31481: LD_VAR 0 9
31485: PPUSH
31486: CALL_OW 2
31490: ST_TO_ADDR
31491: GO 31419
31493: POP
31494: POP
// if tmp then
31495: LD_VAR 0 19
31499: IFFALSE 31511
// f := tmp ;
31501: LD_ADDR_VAR 0 12
31505: PUSH
31506: LD_VAR 0 19
31510: ST_TO_ADDR
// end ; x := personel [ i ] ;
31511: LD_ADDR_VAR 0 13
31515: PUSH
31516: LD_VAR 0 6
31520: PUSH
31521: LD_VAR 0 8
31525: ARRAY
31526: ST_TO_ADDR
// if x = - 1 then
31527: LD_VAR 0 13
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: EQUAL
31536: IFFALSE 31745
// begin for j in f do
31538: LD_ADDR_VAR 0 9
31542: PUSH
31543: LD_VAR 0 12
31547: PUSH
31548: FOR_IN
31549: IFFALSE 31741
// repeat InitHc ;
31551: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31555: LD_VAR 0 9
31559: PPUSH
31560: CALL_OW 266
31564: PUSH
31565: LD_INT 5
31567: EQUAL
31568: IFFALSE 31638
// begin if UnitsInside ( j ) < 3 then
31570: LD_VAR 0 9
31574: PPUSH
31575: CALL_OW 313
31579: PUSH
31580: LD_INT 3
31582: LESS
31583: IFFALSE 31619
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31585: LD_INT 0
31587: PPUSH
31588: LD_INT 5
31590: PUSH
31591: LD_INT 8
31593: PUSH
31594: LD_INT 9
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: PUSH
31602: LD_VAR 0 17
31606: ARRAY
31607: PPUSH
31608: LD_VAR 0 4
31612: PPUSH
31613: CALL_OW 380
31617: GO 31636
// PrepareHuman ( false , i , skill ) ;
31619: LD_INT 0
31621: PPUSH
31622: LD_VAR 0 8
31626: PPUSH
31627: LD_VAR 0 4
31631: PPUSH
31632: CALL_OW 380
// end else
31636: GO 31655
// PrepareHuman ( false , i , skill ) ;
31638: LD_INT 0
31640: PPUSH
31641: LD_VAR 0 8
31645: PPUSH
31646: LD_VAR 0 4
31650: PPUSH
31651: CALL_OW 380
// un := CreateHuman ;
31655: LD_ADDR_VAR 0 14
31659: PUSH
31660: CALL_OW 44
31664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31665: LD_ADDR_VAR 0 7
31669: PUSH
31670: LD_VAR 0 7
31674: PPUSH
31675: LD_INT 1
31677: PPUSH
31678: LD_VAR 0 14
31682: PPUSH
31683: CALL_OW 2
31687: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31688: LD_VAR 0 14
31692: PPUSH
31693: LD_VAR 0 9
31697: PPUSH
31698: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31702: LD_VAR 0 9
31706: PPUSH
31707: CALL_OW 313
31711: PUSH
31712: LD_INT 6
31714: EQUAL
31715: PUSH
31716: LD_VAR 0 9
31720: PPUSH
31721: CALL_OW 266
31725: PUSH
31726: LD_INT 32
31728: PUSH
31729: LD_INT 31
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: IN
31736: OR
31737: IFFALSE 31551
31739: GO 31548
31741: POP
31742: POP
// end else
31743: GO 32125
// for j = 1 to x do
31745: LD_ADDR_VAR 0 9
31749: PUSH
31750: DOUBLE
31751: LD_INT 1
31753: DEC
31754: ST_TO_ADDR
31755: LD_VAR 0 13
31759: PUSH
31760: FOR_TO
31761: IFFALSE 32123
// begin InitHc ;
31763: CALL_OW 19
// if not f then
31767: LD_VAR 0 12
31771: NOT
31772: IFFALSE 31861
// begin PrepareHuman ( false , i , skill ) ;
31774: LD_INT 0
31776: PPUSH
31777: LD_VAR 0 8
31781: PPUSH
31782: LD_VAR 0 4
31786: PPUSH
31787: CALL_OW 380
// un := CreateHuman ;
31791: LD_ADDR_VAR 0 14
31795: PUSH
31796: CALL_OW 44
31800: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31801: LD_ADDR_VAR 0 7
31805: PUSH
31806: LD_VAR 0 7
31810: PPUSH
31811: LD_INT 1
31813: PPUSH
31814: LD_VAR 0 14
31818: PPUSH
31819: CALL_OW 2
31823: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31824: LD_VAR 0 14
31828: PPUSH
31829: LD_VAR 0 1
31833: PPUSH
31834: CALL_OW 250
31838: PPUSH
31839: LD_VAR 0 1
31843: PPUSH
31844: CALL_OW 251
31848: PPUSH
31849: LD_INT 10
31851: PPUSH
31852: LD_INT 0
31854: PPUSH
31855: CALL_OW 50
// continue ;
31859: GO 31760
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31861: LD_VAR 0 12
31865: PUSH
31866: LD_INT 1
31868: ARRAY
31869: PPUSH
31870: CALL_OW 313
31874: PUSH
31875: LD_VAR 0 12
31879: PUSH
31880: LD_INT 1
31882: ARRAY
31883: PPUSH
31884: CALL_OW 266
31888: PUSH
31889: LD_INT 32
31891: PUSH
31892: LD_INT 31
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: IN
31899: AND
31900: PUSH
31901: LD_VAR 0 12
31905: PUSH
31906: LD_INT 1
31908: ARRAY
31909: PPUSH
31910: CALL_OW 313
31914: PUSH
31915: LD_INT 6
31917: EQUAL
31918: OR
31919: IFFALSE 31939
// f := Delete ( f , 1 ) ;
31921: LD_ADDR_VAR 0 12
31925: PUSH
31926: LD_VAR 0 12
31930: PPUSH
31931: LD_INT 1
31933: PPUSH
31934: CALL_OW 3
31938: ST_TO_ADDR
// if not f then
31939: LD_VAR 0 12
31943: NOT
31944: IFFALSE 31962
// begin x := x + 2 ;
31946: LD_ADDR_VAR 0 13
31950: PUSH
31951: LD_VAR 0 13
31955: PUSH
31956: LD_INT 2
31958: PLUS
31959: ST_TO_ADDR
// continue ;
31960: GO 31760
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31962: LD_VAR 0 12
31966: PUSH
31967: LD_INT 1
31969: ARRAY
31970: PPUSH
31971: CALL_OW 266
31975: PUSH
31976: LD_INT 5
31978: EQUAL
31979: IFFALSE 32053
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31981: LD_VAR 0 12
31985: PUSH
31986: LD_INT 1
31988: ARRAY
31989: PPUSH
31990: CALL_OW 313
31994: PUSH
31995: LD_INT 3
31997: LESS
31998: IFFALSE 32034
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32000: LD_INT 0
32002: PPUSH
32003: LD_INT 5
32005: PUSH
32006: LD_INT 8
32008: PUSH
32009: LD_INT 9
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: PUSH
32017: LD_VAR 0 17
32021: ARRAY
32022: PPUSH
32023: LD_VAR 0 4
32027: PPUSH
32028: CALL_OW 380
32032: GO 32051
// PrepareHuman ( false , i , skill ) ;
32034: LD_INT 0
32036: PPUSH
32037: LD_VAR 0 8
32041: PPUSH
32042: LD_VAR 0 4
32046: PPUSH
32047: CALL_OW 380
// end else
32051: GO 32070
// PrepareHuman ( false , i , skill ) ;
32053: LD_INT 0
32055: PPUSH
32056: LD_VAR 0 8
32060: PPUSH
32061: LD_VAR 0 4
32065: PPUSH
32066: CALL_OW 380
// un := CreateHuman ;
32070: LD_ADDR_VAR 0 14
32074: PUSH
32075: CALL_OW 44
32079: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32080: LD_ADDR_VAR 0 7
32084: PUSH
32085: LD_VAR 0 7
32089: PPUSH
32090: LD_INT 1
32092: PPUSH
32093: LD_VAR 0 14
32097: PPUSH
32098: CALL_OW 2
32102: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32103: LD_VAR 0 14
32107: PPUSH
32108: LD_VAR 0 12
32112: PUSH
32113: LD_INT 1
32115: ARRAY
32116: PPUSH
32117: CALL_OW 52
// end ;
32121: GO 31760
32123: POP
32124: POP
// end ;
32125: GO 31062
32127: POP
32128: POP
// result := result ^ buildings ;
32129: LD_ADDR_VAR 0 7
32133: PUSH
32134: LD_VAR 0 7
32138: PUSH
32139: LD_VAR 0 18
32143: ADD
32144: ST_TO_ADDR
// end else
32145: GO 32288
// begin for i = 1 to personel do
32147: LD_ADDR_VAR 0 8
32151: PUSH
32152: DOUBLE
32153: LD_INT 1
32155: DEC
32156: ST_TO_ADDR
32157: LD_VAR 0 6
32161: PUSH
32162: FOR_TO
32163: IFFALSE 32286
// begin if i > 4 then
32165: LD_VAR 0 8
32169: PUSH
32170: LD_INT 4
32172: GREATER
32173: IFFALSE 32177
// break ;
32175: GO 32286
// x := personel [ i ] ;
32177: LD_ADDR_VAR 0 13
32181: PUSH
32182: LD_VAR 0 6
32186: PUSH
32187: LD_VAR 0 8
32191: ARRAY
32192: ST_TO_ADDR
// if x = - 1 then
32193: LD_VAR 0 13
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: EQUAL
32202: IFFALSE 32206
// continue ;
32204: GO 32162
// PrepareHuman ( false , i , skill ) ;
32206: LD_INT 0
32208: PPUSH
32209: LD_VAR 0 8
32213: PPUSH
32214: LD_VAR 0 4
32218: PPUSH
32219: CALL_OW 380
// un := CreateHuman ;
32223: LD_ADDR_VAR 0 14
32227: PUSH
32228: CALL_OW 44
32232: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32233: LD_VAR 0 14
32237: PPUSH
32238: LD_VAR 0 1
32242: PPUSH
32243: CALL_OW 250
32247: PPUSH
32248: LD_VAR 0 1
32252: PPUSH
32253: CALL_OW 251
32257: PPUSH
32258: LD_INT 10
32260: PPUSH
32261: LD_INT 0
32263: PPUSH
32264: CALL_OW 50
// result := result ^ un ;
32268: LD_ADDR_VAR 0 7
32272: PUSH
32273: LD_VAR 0 7
32277: PUSH
32278: LD_VAR 0 14
32282: ADD
32283: ST_TO_ADDR
// end ;
32284: GO 32162
32286: POP
32287: POP
// end ; end ;
32288: LD_VAR 0 7
32292: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32293: LD_INT 0
32295: PPUSH
32296: PPUSH
32297: PPUSH
32298: PPUSH
32299: PPUSH
32300: PPUSH
32301: PPUSH
32302: PPUSH
32303: PPUSH
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
// result := false ;
32311: LD_ADDR_VAR 0 3
32315: PUSH
32316: LD_INT 0
32318: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32319: LD_VAR 0 1
32323: NOT
32324: PUSH
32325: LD_VAR 0 1
32329: PPUSH
32330: CALL_OW 266
32334: PUSH
32335: LD_INT 32
32337: PUSH
32338: LD_INT 33
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: IN
32345: NOT
32346: OR
32347: IFFALSE 32351
// exit ;
32349: GO 33460
// nat := GetNation ( tower ) ;
32351: LD_ADDR_VAR 0 12
32355: PUSH
32356: LD_VAR 0 1
32360: PPUSH
32361: CALL_OW 248
32365: ST_TO_ADDR
// side := GetSide ( tower ) ;
32366: LD_ADDR_VAR 0 16
32370: PUSH
32371: LD_VAR 0 1
32375: PPUSH
32376: CALL_OW 255
32380: ST_TO_ADDR
// x := GetX ( tower ) ;
32381: LD_ADDR_VAR 0 10
32385: PUSH
32386: LD_VAR 0 1
32390: PPUSH
32391: CALL_OW 250
32395: ST_TO_ADDR
// y := GetY ( tower ) ;
32396: LD_ADDR_VAR 0 11
32400: PUSH
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 251
32410: ST_TO_ADDR
// if not x or not y then
32411: LD_VAR 0 10
32415: NOT
32416: PUSH
32417: LD_VAR 0 11
32421: NOT
32422: OR
32423: IFFALSE 32427
// exit ;
32425: GO 33460
// weapon := 0 ;
32427: LD_ADDR_VAR 0 18
32431: PUSH
32432: LD_INT 0
32434: ST_TO_ADDR
// fac_list := [ ] ;
32435: LD_ADDR_VAR 0 17
32439: PUSH
32440: EMPTY
32441: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32442: LD_ADDR_VAR 0 6
32446: PUSH
32447: LD_VAR 0 1
32451: PPUSH
32452: CALL_OW 274
32456: PPUSH
32457: LD_VAR 0 2
32461: PPUSH
32462: LD_INT 0
32464: PPUSH
32465: CALL 30030 0 3
32469: PPUSH
32470: LD_INT 30
32472: PUSH
32473: LD_INT 3
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PPUSH
32480: CALL_OW 72
32484: ST_TO_ADDR
// if not factories then
32485: LD_VAR 0 6
32489: NOT
32490: IFFALSE 32494
// exit ;
32492: GO 33460
// for i in factories do
32494: LD_ADDR_VAR 0 8
32498: PUSH
32499: LD_VAR 0 6
32503: PUSH
32504: FOR_IN
32505: IFFALSE 32530
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32507: LD_ADDR_VAR 0 17
32511: PUSH
32512: LD_VAR 0 17
32516: PUSH
32517: LD_VAR 0 8
32521: PPUSH
32522: CALL_OW 478
32526: UNION
32527: ST_TO_ADDR
32528: GO 32504
32530: POP
32531: POP
// if not fac_list then
32532: LD_VAR 0 17
32536: NOT
32537: IFFALSE 32541
// exit ;
32539: GO 33460
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32541: LD_ADDR_VAR 0 5
32545: PUSH
32546: LD_INT 4
32548: PUSH
32549: LD_INT 5
32551: PUSH
32552: LD_INT 9
32554: PUSH
32555: LD_INT 10
32557: PUSH
32558: LD_INT 6
32560: PUSH
32561: LD_INT 7
32563: PUSH
32564: LD_INT 11
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 27
32578: PUSH
32579: LD_INT 28
32581: PUSH
32582: LD_INT 26
32584: PUSH
32585: LD_INT 30
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 43
32596: PUSH
32597: LD_INT 44
32599: PUSH
32600: LD_INT 46
32602: PUSH
32603: LD_INT 45
32605: PUSH
32606: LD_INT 47
32608: PUSH
32609: LD_INT 49
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: PUSH
32625: LD_VAR 0 12
32629: ARRAY
32630: ST_TO_ADDR
// list := list isect fac_list ;
32631: LD_ADDR_VAR 0 5
32635: PUSH
32636: LD_VAR 0 5
32640: PUSH
32641: LD_VAR 0 17
32645: ISECT
32646: ST_TO_ADDR
// if not list then
32647: LD_VAR 0 5
32651: NOT
32652: IFFALSE 32656
// exit ;
32654: GO 33460
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32656: LD_VAR 0 12
32660: PUSH
32661: LD_INT 3
32663: EQUAL
32664: PUSH
32665: LD_INT 49
32667: PUSH
32668: LD_VAR 0 5
32672: IN
32673: AND
32674: PUSH
32675: LD_INT 31
32677: PPUSH
32678: LD_VAR 0 16
32682: PPUSH
32683: CALL_OW 321
32687: PUSH
32688: LD_INT 2
32690: EQUAL
32691: AND
32692: IFFALSE 32752
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32694: LD_INT 22
32696: PUSH
32697: LD_VAR 0 16
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 35
32708: PUSH
32709: LD_INT 49
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 91
32718: PUSH
32719: LD_VAR 0 1
32723: PUSH
32724: LD_INT 10
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: LIST
32736: PPUSH
32737: CALL_OW 69
32741: NOT
32742: IFFALSE 32752
// weapon := ru_time_lapser ;
32744: LD_ADDR_VAR 0 18
32748: PUSH
32749: LD_INT 49
32751: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32752: LD_VAR 0 12
32756: PUSH
32757: LD_INT 1
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: IN
32767: PUSH
32768: LD_INT 11
32770: PUSH
32771: LD_VAR 0 5
32775: IN
32776: PUSH
32777: LD_INT 30
32779: PUSH
32780: LD_VAR 0 5
32784: IN
32785: OR
32786: AND
32787: PUSH
32788: LD_INT 6
32790: PPUSH
32791: LD_VAR 0 16
32795: PPUSH
32796: CALL_OW 321
32800: PUSH
32801: LD_INT 2
32803: EQUAL
32804: AND
32805: IFFALSE 32970
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32807: LD_INT 22
32809: PUSH
32810: LD_VAR 0 16
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 35
32824: PUSH
32825: LD_INT 11
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 35
32834: PUSH
32835: LD_INT 30
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 91
32849: PUSH
32850: LD_VAR 0 1
32854: PUSH
32855: LD_INT 18
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: LIST
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: LIST
32867: PPUSH
32868: CALL_OW 69
32872: NOT
32873: PUSH
32874: LD_INT 22
32876: PUSH
32877: LD_VAR 0 16
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: PUSH
32889: LD_INT 30
32891: PUSH
32892: LD_INT 32
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 30
32901: PUSH
32902: LD_INT 33
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 91
32916: PUSH
32917: LD_VAR 0 1
32921: PUSH
32922: LD_INT 12
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: LIST
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: LIST
32934: PUSH
32935: EMPTY
32936: LIST
32937: PPUSH
32938: CALL_OW 69
32942: PUSH
32943: LD_INT 2
32945: GREATER
32946: AND
32947: IFFALSE 32970
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32949: LD_ADDR_VAR 0 18
32953: PUSH
32954: LD_INT 11
32956: PUSH
32957: LD_INT 30
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_VAR 0 12
32968: ARRAY
32969: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32970: LD_VAR 0 18
32974: NOT
32975: PUSH
32976: LD_INT 40
32978: PPUSH
32979: LD_VAR 0 16
32983: PPUSH
32984: CALL_OW 321
32988: PUSH
32989: LD_INT 2
32991: EQUAL
32992: AND
32993: PUSH
32994: LD_INT 7
32996: PUSH
32997: LD_VAR 0 5
33001: IN
33002: PUSH
33003: LD_INT 28
33005: PUSH
33006: LD_VAR 0 5
33010: IN
33011: OR
33012: PUSH
33013: LD_INT 45
33015: PUSH
33016: LD_VAR 0 5
33020: IN
33021: OR
33022: AND
33023: IFFALSE 33277
// begin hex := GetHexInfo ( x , y ) ;
33025: LD_ADDR_VAR 0 4
33029: PUSH
33030: LD_VAR 0 10
33034: PPUSH
33035: LD_VAR 0 11
33039: PPUSH
33040: CALL_OW 546
33044: ST_TO_ADDR
// if hex [ 1 ] then
33045: LD_VAR 0 4
33049: PUSH
33050: LD_INT 1
33052: ARRAY
33053: IFFALSE 33057
// exit ;
33055: GO 33460
// height := hex [ 2 ] ;
33057: LD_ADDR_VAR 0 15
33061: PUSH
33062: LD_VAR 0 4
33066: PUSH
33067: LD_INT 2
33069: ARRAY
33070: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33071: LD_ADDR_VAR 0 14
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 3
33084: PUSH
33085: LD_INT 5
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: ST_TO_ADDR
// for i in tmp do
33094: LD_ADDR_VAR 0 8
33098: PUSH
33099: LD_VAR 0 14
33103: PUSH
33104: FOR_IN
33105: IFFALSE 33275
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33107: LD_ADDR_VAR 0 9
33111: PUSH
33112: LD_VAR 0 10
33116: PPUSH
33117: LD_VAR 0 8
33121: PPUSH
33122: LD_INT 5
33124: PPUSH
33125: CALL_OW 272
33129: PUSH
33130: LD_VAR 0 11
33134: PPUSH
33135: LD_VAR 0 8
33139: PPUSH
33140: LD_INT 5
33142: PPUSH
33143: CALL_OW 273
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33152: LD_VAR 0 9
33156: PUSH
33157: LD_INT 1
33159: ARRAY
33160: PPUSH
33161: LD_VAR 0 9
33165: PUSH
33166: LD_INT 2
33168: ARRAY
33169: PPUSH
33170: CALL_OW 488
33174: IFFALSE 33273
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33176: LD_ADDR_VAR 0 4
33180: PUSH
33181: LD_VAR 0 9
33185: PUSH
33186: LD_INT 1
33188: ARRAY
33189: PPUSH
33190: LD_VAR 0 9
33194: PUSH
33195: LD_INT 2
33197: ARRAY
33198: PPUSH
33199: CALL_OW 546
33203: ST_TO_ADDR
// if hex [ 1 ] then
33204: LD_VAR 0 4
33208: PUSH
33209: LD_INT 1
33211: ARRAY
33212: IFFALSE 33216
// continue ;
33214: GO 33104
// h := hex [ 2 ] ;
33216: LD_ADDR_VAR 0 13
33220: PUSH
33221: LD_VAR 0 4
33225: PUSH
33226: LD_INT 2
33228: ARRAY
33229: ST_TO_ADDR
// if h + 7 < height then
33230: LD_VAR 0 13
33234: PUSH
33235: LD_INT 7
33237: PLUS
33238: PUSH
33239: LD_VAR 0 15
33243: LESS
33244: IFFALSE 33273
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33246: LD_ADDR_VAR 0 18
33250: PUSH
33251: LD_INT 7
33253: PUSH
33254: LD_INT 28
33256: PUSH
33257: LD_INT 45
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: PUSH
33265: LD_VAR 0 12
33269: ARRAY
33270: ST_TO_ADDR
// break ;
33271: GO 33275
// end ; end ; end ;
33273: GO 33104
33275: POP
33276: POP
// end ; if not weapon then
33277: LD_VAR 0 18
33281: NOT
33282: IFFALSE 33342
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33284: LD_ADDR_VAR 0 5
33288: PUSH
33289: LD_VAR 0 5
33293: PUSH
33294: LD_INT 11
33296: PUSH
33297: LD_INT 30
33299: PUSH
33300: LD_INT 49
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: LIST
33307: DIFF
33308: ST_TO_ADDR
// if not list then
33309: LD_VAR 0 5
33313: NOT
33314: IFFALSE 33318
// exit ;
33316: GO 33460
// weapon := list [ rand ( 1 , list ) ] ;
33318: LD_ADDR_VAR 0 18
33322: PUSH
33323: LD_VAR 0 5
33327: PUSH
33328: LD_INT 1
33330: PPUSH
33331: LD_VAR 0 5
33335: PPUSH
33336: CALL_OW 12
33340: ARRAY
33341: ST_TO_ADDR
// end ; if weapon then
33342: LD_VAR 0 18
33346: IFFALSE 33460
// begin tmp := CostOfWeapon ( weapon ) ;
33348: LD_ADDR_VAR 0 14
33352: PUSH
33353: LD_VAR 0 18
33357: PPUSH
33358: CALL_OW 451
33362: ST_TO_ADDR
// j := GetBase ( tower ) ;
33363: LD_ADDR_VAR 0 9
33367: PUSH
33368: LD_VAR 0 1
33372: PPUSH
33373: CALL_OW 274
33377: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33378: LD_VAR 0 9
33382: PPUSH
33383: LD_INT 1
33385: PPUSH
33386: CALL_OW 275
33390: PUSH
33391: LD_VAR 0 14
33395: PUSH
33396: LD_INT 1
33398: ARRAY
33399: GREATEREQUAL
33400: PUSH
33401: LD_VAR 0 9
33405: PPUSH
33406: LD_INT 2
33408: PPUSH
33409: CALL_OW 275
33413: PUSH
33414: LD_VAR 0 14
33418: PUSH
33419: LD_INT 2
33421: ARRAY
33422: GREATEREQUAL
33423: AND
33424: PUSH
33425: LD_VAR 0 9
33429: PPUSH
33430: LD_INT 3
33432: PPUSH
33433: CALL_OW 275
33437: PUSH
33438: LD_VAR 0 14
33442: PUSH
33443: LD_INT 3
33445: ARRAY
33446: GREATEREQUAL
33447: AND
33448: IFFALSE 33460
// result := weapon ;
33450: LD_ADDR_VAR 0 3
33454: PUSH
33455: LD_VAR 0 18
33459: ST_TO_ADDR
// end ; end ;
33460: LD_VAR 0 3
33464: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33465: LD_INT 0
33467: PPUSH
33468: PPUSH
// result := true ;
33469: LD_ADDR_VAR 0 3
33473: PUSH
33474: LD_INT 1
33476: ST_TO_ADDR
// if array1 = array2 then
33477: LD_VAR 0 1
33481: PUSH
33482: LD_VAR 0 2
33486: EQUAL
33487: IFFALSE 33547
// begin for i = 1 to array1 do
33489: LD_ADDR_VAR 0 4
33493: PUSH
33494: DOUBLE
33495: LD_INT 1
33497: DEC
33498: ST_TO_ADDR
33499: LD_VAR 0 1
33503: PUSH
33504: FOR_TO
33505: IFFALSE 33543
// if array1 [ i ] <> array2 [ i ] then
33507: LD_VAR 0 1
33511: PUSH
33512: LD_VAR 0 4
33516: ARRAY
33517: PUSH
33518: LD_VAR 0 2
33522: PUSH
33523: LD_VAR 0 4
33527: ARRAY
33528: NONEQUAL
33529: IFFALSE 33541
// begin result := false ;
33531: LD_ADDR_VAR 0 3
33535: PUSH
33536: LD_INT 0
33538: ST_TO_ADDR
// break ;
33539: GO 33543
// end ;
33541: GO 33504
33543: POP
33544: POP
// end else
33545: GO 33555
// result := false ;
33547: LD_ADDR_VAR 0 3
33551: PUSH
33552: LD_INT 0
33554: ST_TO_ADDR
// end ;
33555: LD_VAR 0 3
33559: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33560: LD_INT 0
33562: PPUSH
33563: PPUSH
// if not array1 or not array2 then
33564: LD_VAR 0 1
33568: NOT
33569: PUSH
33570: LD_VAR 0 2
33574: NOT
33575: OR
33576: IFFALSE 33580
// exit ;
33578: GO 33644
// result := true ;
33580: LD_ADDR_VAR 0 3
33584: PUSH
33585: LD_INT 1
33587: ST_TO_ADDR
// for i = 1 to array1 do
33588: LD_ADDR_VAR 0 4
33592: PUSH
33593: DOUBLE
33594: LD_INT 1
33596: DEC
33597: ST_TO_ADDR
33598: LD_VAR 0 1
33602: PUSH
33603: FOR_TO
33604: IFFALSE 33642
// if array1 [ i ] <> array2 [ i ] then
33606: LD_VAR 0 1
33610: PUSH
33611: LD_VAR 0 4
33615: ARRAY
33616: PUSH
33617: LD_VAR 0 2
33621: PUSH
33622: LD_VAR 0 4
33626: ARRAY
33627: NONEQUAL
33628: IFFALSE 33640
// begin result := false ;
33630: LD_ADDR_VAR 0 3
33634: PUSH
33635: LD_INT 0
33637: ST_TO_ADDR
// break ;
33638: GO 33642
// end ;
33640: GO 33603
33642: POP
33643: POP
// end ;
33644: LD_VAR 0 3
33648: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33649: LD_INT 0
33651: PPUSH
33652: PPUSH
33653: PPUSH
// pom := GetBase ( fac ) ;
33654: LD_ADDR_VAR 0 5
33658: PUSH
33659: LD_VAR 0 1
33663: PPUSH
33664: CALL_OW 274
33668: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33669: LD_ADDR_VAR 0 4
33673: PUSH
33674: LD_VAR 0 2
33678: PUSH
33679: LD_INT 1
33681: ARRAY
33682: PPUSH
33683: LD_VAR 0 2
33687: PUSH
33688: LD_INT 2
33690: ARRAY
33691: PPUSH
33692: LD_VAR 0 2
33696: PUSH
33697: LD_INT 3
33699: ARRAY
33700: PPUSH
33701: LD_VAR 0 2
33705: PUSH
33706: LD_INT 4
33708: ARRAY
33709: PPUSH
33710: CALL_OW 449
33714: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33715: LD_ADDR_VAR 0 3
33719: PUSH
33720: LD_VAR 0 5
33724: PPUSH
33725: LD_INT 1
33727: PPUSH
33728: CALL_OW 275
33732: PUSH
33733: LD_VAR 0 4
33737: PUSH
33738: LD_INT 1
33740: ARRAY
33741: GREATEREQUAL
33742: PUSH
33743: LD_VAR 0 5
33747: PPUSH
33748: LD_INT 2
33750: PPUSH
33751: CALL_OW 275
33755: PUSH
33756: LD_VAR 0 4
33760: PUSH
33761: LD_INT 2
33763: ARRAY
33764: GREATEREQUAL
33765: AND
33766: PUSH
33767: LD_VAR 0 5
33771: PPUSH
33772: LD_INT 3
33774: PPUSH
33775: CALL_OW 275
33779: PUSH
33780: LD_VAR 0 4
33784: PUSH
33785: LD_INT 3
33787: ARRAY
33788: GREATEREQUAL
33789: AND
33790: ST_TO_ADDR
// end ;
33791: LD_VAR 0 3
33795: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33796: LD_INT 0
33798: PPUSH
33799: PPUSH
33800: PPUSH
33801: PPUSH
// pom := GetBase ( building ) ;
33802: LD_ADDR_VAR 0 3
33806: PUSH
33807: LD_VAR 0 1
33811: PPUSH
33812: CALL_OW 274
33816: ST_TO_ADDR
// if not pom then
33817: LD_VAR 0 3
33821: NOT
33822: IFFALSE 33826
// exit ;
33824: GO 33996
// btype := GetBType ( building ) ;
33826: LD_ADDR_VAR 0 5
33830: PUSH
33831: LD_VAR 0 1
33835: PPUSH
33836: CALL_OW 266
33840: ST_TO_ADDR
// if btype = b_armoury then
33841: LD_VAR 0 5
33845: PUSH
33846: LD_INT 4
33848: EQUAL
33849: IFFALSE 33859
// btype := b_barracks ;
33851: LD_ADDR_VAR 0 5
33855: PUSH
33856: LD_INT 5
33858: ST_TO_ADDR
// if btype = b_depot then
33859: LD_VAR 0 5
33863: PUSH
33864: LD_INT 0
33866: EQUAL
33867: IFFALSE 33877
// btype := b_warehouse ;
33869: LD_ADDR_VAR 0 5
33873: PUSH
33874: LD_INT 1
33876: ST_TO_ADDR
// if btype = b_workshop then
33877: LD_VAR 0 5
33881: PUSH
33882: LD_INT 2
33884: EQUAL
33885: IFFALSE 33895
// btype := b_factory ;
33887: LD_ADDR_VAR 0 5
33891: PUSH
33892: LD_INT 3
33894: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33895: LD_ADDR_VAR 0 4
33899: PUSH
33900: LD_VAR 0 5
33904: PPUSH
33905: LD_VAR 0 1
33909: PPUSH
33910: CALL_OW 248
33914: PPUSH
33915: CALL_OW 450
33919: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33920: LD_ADDR_VAR 0 2
33924: PUSH
33925: LD_VAR 0 3
33929: PPUSH
33930: LD_INT 1
33932: PPUSH
33933: CALL_OW 275
33937: PUSH
33938: LD_VAR 0 4
33942: PUSH
33943: LD_INT 1
33945: ARRAY
33946: GREATEREQUAL
33947: PUSH
33948: LD_VAR 0 3
33952: PPUSH
33953: LD_INT 2
33955: PPUSH
33956: CALL_OW 275
33960: PUSH
33961: LD_VAR 0 4
33965: PUSH
33966: LD_INT 2
33968: ARRAY
33969: GREATEREQUAL
33970: AND
33971: PUSH
33972: LD_VAR 0 3
33976: PPUSH
33977: LD_INT 3
33979: PPUSH
33980: CALL_OW 275
33984: PUSH
33985: LD_VAR 0 4
33989: PUSH
33990: LD_INT 3
33992: ARRAY
33993: GREATEREQUAL
33994: AND
33995: ST_TO_ADDR
// end ;
33996: LD_VAR 0 2
34000: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34001: LD_INT 0
34003: PPUSH
34004: PPUSH
34005: PPUSH
// pom := GetBase ( building ) ;
34006: LD_ADDR_VAR 0 4
34010: PUSH
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL_OW 274
34020: ST_TO_ADDR
// if not pom then
34021: LD_VAR 0 4
34025: NOT
34026: IFFALSE 34030
// exit ;
34028: GO 34131
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34030: LD_ADDR_VAR 0 5
34034: PUSH
34035: LD_VAR 0 2
34039: PPUSH
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL_OW 248
34049: PPUSH
34050: CALL_OW 450
34054: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34055: LD_ADDR_VAR 0 3
34059: PUSH
34060: LD_VAR 0 4
34064: PPUSH
34065: LD_INT 1
34067: PPUSH
34068: CALL_OW 275
34072: PUSH
34073: LD_VAR 0 5
34077: PUSH
34078: LD_INT 1
34080: ARRAY
34081: GREATEREQUAL
34082: PUSH
34083: LD_VAR 0 4
34087: PPUSH
34088: LD_INT 2
34090: PPUSH
34091: CALL_OW 275
34095: PUSH
34096: LD_VAR 0 5
34100: PUSH
34101: LD_INT 2
34103: ARRAY
34104: GREATEREQUAL
34105: AND
34106: PUSH
34107: LD_VAR 0 4
34111: PPUSH
34112: LD_INT 3
34114: PPUSH
34115: CALL_OW 275
34119: PUSH
34120: LD_VAR 0 5
34124: PUSH
34125: LD_INT 3
34127: ARRAY
34128: GREATEREQUAL
34129: AND
34130: ST_TO_ADDR
// end ;
34131: LD_VAR 0 3
34135: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34136: LD_INT 0
34138: PPUSH
34139: PPUSH
34140: PPUSH
34141: PPUSH
34142: PPUSH
34143: PPUSH
34144: PPUSH
34145: PPUSH
34146: PPUSH
34147: PPUSH
34148: PPUSH
// result := false ;
34149: LD_ADDR_VAR 0 8
34153: PUSH
34154: LD_INT 0
34156: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34157: LD_VAR 0 5
34161: NOT
34162: PUSH
34163: LD_VAR 0 1
34167: NOT
34168: OR
34169: PUSH
34170: LD_VAR 0 2
34174: NOT
34175: OR
34176: PUSH
34177: LD_VAR 0 3
34181: NOT
34182: OR
34183: IFFALSE 34187
// exit ;
34185: GO 35001
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34187: LD_ADDR_VAR 0 14
34191: PUSH
34192: LD_VAR 0 1
34196: PPUSH
34197: LD_VAR 0 2
34201: PPUSH
34202: LD_VAR 0 3
34206: PPUSH
34207: LD_VAR 0 4
34211: PPUSH
34212: LD_VAR 0 5
34216: PUSH
34217: LD_INT 1
34219: ARRAY
34220: PPUSH
34221: CALL_OW 248
34225: PPUSH
34226: LD_INT 0
34228: PPUSH
34229: CALL 36238 0 6
34233: ST_TO_ADDR
// if not hexes then
34234: LD_VAR 0 14
34238: NOT
34239: IFFALSE 34243
// exit ;
34241: GO 35001
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34243: LD_ADDR_VAR 0 17
34247: PUSH
34248: LD_VAR 0 5
34252: PPUSH
34253: LD_INT 22
34255: PUSH
34256: LD_VAR 0 13
34260: PPUSH
34261: CALL_OW 255
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 2
34272: PUSH
34273: LD_INT 30
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 30
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PPUSH
34302: CALL_OW 72
34306: ST_TO_ADDR
// for i = 1 to hexes do
34307: LD_ADDR_VAR 0 9
34311: PUSH
34312: DOUBLE
34313: LD_INT 1
34315: DEC
34316: ST_TO_ADDR
34317: LD_VAR 0 14
34321: PUSH
34322: FOR_TO
34323: IFFALSE 34999
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34325: LD_ADDR_VAR 0 13
34329: PUSH
34330: LD_VAR 0 14
34334: PUSH
34335: LD_VAR 0 9
34339: ARRAY
34340: PUSH
34341: LD_INT 1
34343: ARRAY
34344: PPUSH
34345: LD_VAR 0 14
34349: PUSH
34350: LD_VAR 0 9
34354: ARRAY
34355: PUSH
34356: LD_INT 2
34358: ARRAY
34359: PPUSH
34360: CALL_OW 428
34364: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34365: LD_VAR 0 14
34369: PUSH
34370: LD_VAR 0 9
34374: ARRAY
34375: PUSH
34376: LD_INT 1
34378: ARRAY
34379: PPUSH
34380: LD_VAR 0 14
34384: PUSH
34385: LD_VAR 0 9
34389: ARRAY
34390: PUSH
34391: LD_INT 2
34393: ARRAY
34394: PPUSH
34395: CALL_OW 351
34399: PUSH
34400: LD_VAR 0 14
34404: PUSH
34405: LD_VAR 0 9
34409: ARRAY
34410: PUSH
34411: LD_INT 1
34413: ARRAY
34414: PPUSH
34415: LD_VAR 0 14
34419: PUSH
34420: LD_VAR 0 9
34424: ARRAY
34425: PUSH
34426: LD_INT 2
34428: ARRAY
34429: PPUSH
34430: CALL_OW 488
34434: NOT
34435: OR
34436: PUSH
34437: LD_VAR 0 13
34441: PPUSH
34442: CALL_OW 247
34446: PUSH
34447: LD_INT 3
34449: EQUAL
34450: OR
34451: IFFALSE 34457
// exit ;
34453: POP
34454: POP
34455: GO 35001
// if not tmp then
34457: LD_VAR 0 13
34461: NOT
34462: IFFALSE 34466
// continue ;
34464: GO 34322
// result := true ;
34466: LD_ADDR_VAR 0 8
34470: PUSH
34471: LD_INT 1
34473: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34474: LD_VAR 0 6
34478: PUSH
34479: LD_VAR 0 13
34483: PPUSH
34484: CALL_OW 247
34488: PUSH
34489: LD_INT 2
34491: EQUAL
34492: AND
34493: PUSH
34494: LD_VAR 0 13
34498: PPUSH
34499: CALL_OW 263
34503: PUSH
34504: LD_INT 1
34506: EQUAL
34507: AND
34508: IFFALSE 34672
// begin if IsDrivenBy ( tmp ) then
34510: LD_VAR 0 13
34514: PPUSH
34515: CALL_OW 311
34519: IFFALSE 34523
// continue ;
34521: GO 34322
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34523: LD_VAR 0 6
34527: PPUSH
34528: LD_INT 3
34530: PUSH
34531: LD_INT 60
34533: PUSH
34534: EMPTY
34535: LIST
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: LD_INT 55
34546: PUSH
34547: EMPTY
34548: LIST
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PPUSH
34558: CALL_OW 72
34562: IFFALSE 34670
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34564: LD_ADDR_VAR 0 18
34568: PUSH
34569: LD_VAR 0 6
34573: PPUSH
34574: LD_INT 3
34576: PUSH
34577: LD_INT 60
34579: PUSH
34580: EMPTY
34581: LIST
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 55
34592: PUSH
34593: EMPTY
34594: LIST
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PPUSH
34604: CALL_OW 72
34608: PUSH
34609: LD_INT 1
34611: ARRAY
34612: ST_TO_ADDR
// if IsInUnit ( driver ) then
34613: LD_VAR 0 18
34617: PPUSH
34618: CALL_OW 310
34622: IFFALSE 34633
// ComExit ( driver ) ;
34624: LD_VAR 0 18
34628: PPUSH
34629: CALL 59422 0 1
// AddComEnterUnit ( driver , tmp ) ;
34633: LD_VAR 0 18
34637: PPUSH
34638: LD_VAR 0 13
34642: PPUSH
34643: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34647: LD_VAR 0 18
34651: PPUSH
34652: LD_VAR 0 7
34656: PPUSH
34657: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34661: LD_VAR 0 18
34665: PPUSH
34666: CALL_OW 181
// end ; continue ;
34670: GO 34322
// end ; if not cleaners or not tmp in cleaners then
34672: LD_VAR 0 6
34676: NOT
34677: PUSH
34678: LD_VAR 0 13
34682: PUSH
34683: LD_VAR 0 6
34687: IN
34688: NOT
34689: OR
34690: IFFALSE 34997
// begin if dep then
34692: LD_VAR 0 17
34696: IFFALSE 34832
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34698: LD_ADDR_VAR 0 16
34702: PUSH
34703: LD_VAR 0 17
34707: PUSH
34708: LD_INT 1
34710: ARRAY
34711: PPUSH
34712: CALL_OW 250
34716: PPUSH
34717: LD_VAR 0 17
34721: PUSH
34722: LD_INT 1
34724: ARRAY
34725: PPUSH
34726: CALL_OW 254
34730: PPUSH
34731: LD_INT 5
34733: PPUSH
34734: CALL_OW 272
34738: PUSH
34739: LD_VAR 0 17
34743: PUSH
34744: LD_INT 1
34746: ARRAY
34747: PPUSH
34748: CALL_OW 251
34752: PPUSH
34753: LD_VAR 0 17
34757: PUSH
34758: LD_INT 1
34760: ARRAY
34761: PPUSH
34762: CALL_OW 254
34766: PPUSH
34767: LD_INT 5
34769: PPUSH
34770: CALL_OW 273
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34779: LD_VAR 0 16
34783: PUSH
34784: LD_INT 1
34786: ARRAY
34787: PPUSH
34788: LD_VAR 0 16
34792: PUSH
34793: LD_INT 2
34795: ARRAY
34796: PPUSH
34797: CALL_OW 488
34801: IFFALSE 34832
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34803: LD_VAR 0 13
34807: PPUSH
34808: LD_VAR 0 16
34812: PUSH
34813: LD_INT 1
34815: ARRAY
34816: PPUSH
34817: LD_VAR 0 16
34821: PUSH
34822: LD_INT 2
34824: ARRAY
34825: PPUSH
34826: CALL_OW 111
// continue ;
34830: GO 34322
// end ; end ; r := GetDir ( tmp ) ;
34832: LD_ADDR_VAR 0 15
34836: PUSH
34837: LD_VAR 0 13
34841: PPUSH
34842: CALL_OW 254
34846: ST_TO_ADDR
// if r = 5 then
34847: LD_VAR 0 15
34851: PUSH
34852: LD_INT 5
34854: EQUAL
34855: IFFALSE 34865
// r := 0 ;
34857: LD_ADDR_VAR 0 15
34861: PUSH
34862: LD_INT 0
34864: ST_TO_ADDR
// for j = r to 5 do
34865: LD_ADDR_VAR 0 10
34869: PUSH
34870: DOUBLE
34871: LD_VAR 0 15
34875: DEC
34876: ST_TO_ADDR
34877: LD_INT 5
34879: PUSH
34880: FOR_TO
34881: IFFALSE 34995
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34883: LD_ADDR_VAR 0 11
34887: PUSH
34888: LD_VAR 0 13
34892: PPUSH
34893: CALL_OW 250
34897: PPUSH
34898: LD_VAR 0 10
34902: PPUSH
34903: LD_INT 2
34905: PPUSH
34906: CALL_OW 272
34910: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34911: LD_ADDR_VAR 0 12
34915: PUSH
34916: LD_VAR 0 13
34920: PPUSH
34921: CALL_OW 251
34925: PPUSH
34926: LD_VAR 0 10
34930: PPUSH
34931: LD_INT 2
34933: PPUSH
34934: CALL_OW 273
34938: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34939: LD_VAR 0 11
34943: PPUSH
34944: LD_VAR 0 12
34948: PPUSH
34949: CALL_OW 488
34953: PUSH
34954: LD_VAR 0 11
34958: PPUSH
34959: LD_VAR 0 12
34963: PPUSH
34964: CALL_OW 428
34968: NOT
34969: AND
34970: IFFALSE 34993
// begin ComMoveXY ( tmp , _x , _y ) ;
34972: LD_VAR 0 13
34976: PPUSH
34977: LD_VAR 0 11
34981: PPUSH
34982: LD_VAR 0 12
34986: PPUSH
34987: CALL_OW 111
// break ;
34991: GO 34995
// end ; end ;
34993: GO 34880
34995: POP
34996: POP
// end ; end ;
34997: GO 34322
34999: POP
35000: POP
// end ;
35001: LD_VAR 0 8
35005: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35006: LD_INT 0
35008: PPUSH
// result := true ;
35009: LD_ADDR_VAR 0 3
35013: PUSH
35014: LD_INT 1
35016: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35017: LD_VAR 0 2
35021: PUSH
35022: LD_INT 24
35024: DOUBLE
35025: EQUAL
35026: IFTRUE 35036
35028: LD_INT 33
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35061
35036: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_INT 32
35044: PPUSH
35045: LD_VAR 0 1
35049: PPUSH
35050: CALL_OW 321
35054: PUSH
35055: LD_INT 2
35057: EQUAL
35058: ST_TO_ADDR
35059: GO 35381
35061: LD_INT 20
35063: DOUBLE
35064: EQUAL
35065: IFTRUE 35069
35067: GO 35094
35069: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35070: LD_ADDR_VAR 0 3
35074: PUSH
35075: LD_INT 6
35077: PPUSH
35078: LD_VAR 0 1
35082: PPUSH
35083: CALL_OW 321
35087: PUSH
35088: LD_INT 2
35090: EQUAL
35091: ST_TO_ADDR
35092: GO 35381
35094: LD_INT 22
35096: DOUBLE
35097: EQUAL
35098: IFTRUE 35108
35100: LD_INT 36
35102: DOUBLE
35103: EQUAL
35104: IFTRUE 35108
35106: GO 35133
35108: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35109: LD_ADDR_VAR 0 3
35113: PUSH
35114: LD_INT 15
35116: PPUSH
35117: LD_VAR 0 1
35121: PPUSH
35122: CALL_OW 321
35126: PUSH
35127: LD_INT 2
35129: EQUAL
35130: ST_TO_ADDR
35131: GO 35381
35133: LD_INT 30
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35141
35139: GO 35166
35141: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35142: LD_ADDR_VAR 0 3
35146: PUSH
35147: LD_INT 20
35149: PPUSH
35150: LD_VAR 0 1
35154: PPUSH
35155: CALL_OW 321
35159: PUSH
35160: LD_INT 2
35162: EQUAL
35163: ST_TO_ADDR
35164: GO 35381
35166: LD_INT 28
35168: DOUBLE
35169: EQUAL
35170: IFTRUE 35180
35172: LD_INT 21
35174: DOUBLE
35175: EQUAL
35176: IFTRUE 35180
35178: GO 35205
35180: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35181: LD_ADDR_VAR 0 3
35185: PUSH
35186: LD_INT 21
35188: PPUSH
35189: LD_VAR 0 1
35193: PPUSH
35194: CALL_OW 321
35198: PUSH
35199: LD_INT 2
35201: EQUAL
35202: ST_TO_ADDR
35203: GO 35381
35205: LD_INT 16
35207: DOUBLE
35208: EQUAL
35209: IFTRUE 35213
35211: GO 35240
35213: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35214: LD_ADDR_VAR 0 3
35218: PUSH
35219: LD_EXP 66
35223: PPUSH
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL_OW 321
35233: PUSH
35234: LD_INT 2
35236: EQUAL
35237: ST_TO_ADDR
35238: GO 35381
35240: LD_INT 19
35242: DOUBLE
35243: EQUAL
35244: IFTRUE 35254
35246: LD_INT 23
35248: DOUBLE
35249: EQUAL
35250: IFTRUE 35254
35252: GO 35281
35254: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35255: LD_ADDR_VAR 0 3
35259: PUSH
35260: LD_EXP 65
35264: PPUSH
35265: LD_VAR 0 1
35269: PPUSH
35270: CALL_OW 321
35274: PUSH
35275: LD_INT 2
35277: EQUAL
35278: ST_TO_ADDR
35279: GO 35381
35281: LD_INT 17
35283: DOUBLE
35284: EQUAL
35285: IFTRUE 35289
35287: GO 35314
35289: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35290: LD_ADDR_VAR 0 3
35294: PUSH
35295: LD_INT 39
35297: PPUSH
35298: LD_VAR 0 1
35302: PPUSH
35303: CALL_OW 321
35307: PUSH
35308: LD_INT 2
35310: EQUAL
35311: ST_TO_ADDR
35312: GO 35381
35314: LD_INT 18
35316: DOUBLE
35317: EQUAL
35318: IFTRUE 35322
35320: GO 35347
35322: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35323: LD_ADDR_VAR 0 3
35327: PUSH
35328: LD_INT 40
35330: PPUSH
35331: LD_VAR 0 1
35335: PPUSH
35336: CALL_OW 321
35340: PUSH
35341: LD_INT 2
35343: EQUAL
35344: ST_TO_ADDR
35345: GO 35381
35347: LD_INT 27
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35355
35353: GO 35380
35355: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35356: LD_ADDR_VAR 0 3
35360: PUSH
35361: LD_INT 35
35363: PPUSH
35364: LD_VAR 0 1
35368: PPUSH
35369: CALL_OW 321
35373: PUSH
35374: LD_INT 2
35376: EQUAL
35377: ST_TO_ADDR
35378: GO 35381
35380: POP
// end ;
35381: LD_VAR 0 3
35385: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35386: LD_INT 0
35388: PPUSH
35389: PPUSH
35390: PPUSH
35391: PPUSH
35392: PPUSH
35393: PPUSH
35394: PPUSH
35395: PPUSH
35396: PPUSH
35397: PPUSH
35398: PPUSH
// result := false ;
35399: LD_ADDR_VAR 0 6
35403: PUSH
35404: LD_INT 0
35406: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35407: LD_VAR 0 1
35411: NOT
35412: PUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 266
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: IN
35433: NOT
35434: OR
35435: PUSH
35436: LD_VAR 0 2
35440: NOT
35441: OR
35442: PUSH
35443: LD_VAR 0 5
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: LD_INT 2
35456: PUSH
35457: LD_INT 3
35459: PUSH
35460: LD_INT 4
35462: PUSH
35463: LD_INT 5
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: IN
35474: NOT
35475: OR
35476: PUSH
35477: LD_VAR 0 3
35481: PPUSH
35482: LD_VAR 0 4
35486: PPUSH
35487: CALL_OW 488
35491: NOT
35492: OR
35493: IFFALSE 35497
// exit ;
35495: GO 36233
// side := GetSide ( depot ) ;
35497: LD_ADDR_VAR 0 9
35501: PUSH
35502: LD_VAR 0 1
35506: PPUSH
35507: CALL_OW 255
35511: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35512: LD_VAR 0 9
35516: PPUSH
35517: LD_VAR 0 2
35521: PPUSH
35522: CALL 35006 0 2
35526: NOT
35527: IFFALSE 35531
// exit ;
35529: GO 36233
// pom := GetBase ( depot ) ;
35531: LD_ADDR_VAR 0 10
35535: PUSH
35536: LD_VAR 0 1
35540: PPUSH
35541: CALL_OW 274
35545: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35546: LD_ADDR_VAR 0 11
35550: PUSH
35551: LD_VAR 0 2
35555: PPUSH
35556: LD_VAR 0 1
35560: PPUSH
35561: CALL_OW 248
35565: PPUSH
35566: CALL_OW 450
35570: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35571: LD_VAR 0 10
35575: PPUSH
35576: LD_INT 1
35578: PPUSH
35579: CALL_OW 275
35583: PUSH
35584: LD_VAR 0 11
35588: PUSH
35589: LD_INT 1
35591: ARRAY
35592: GREATEREQUAL
35593: PUSH
35594: LD_VAR 0 10
35598: PPUSH
35599: LD_INT 2
35601: PPUSH
35602: CALL_OW 275
35606: PUSH
35607: LD_VAR 0 11
35611: PUSH
35612: LD_INT 2
35614: ARRAY
35615: GREATEREQUAL
35616: AND
35617: PUSH
35618: LD_VAR 0 10
35622: PPUSH
35623: LD_INT 3
35625: PPUSH
35626: CALL_OW 275
35630: PUSH
35631: LD_VAR 0 11
35635: PUSH
35636: LD_INT 3
35638: ARRAY
35639: GREATEREQUAL
35640: AND
35641: NOT
35642: IFFALSE 35646
// exit ;
35644: GO 36233
// if GetBType ( depot ) = b_depot then
35646: LD_VAR 0 1
35650: PPUSH
35651: CALL_OW 266
35655: PUSH
35656: LD_INT 0
35658: EQUAL
35659: IFFALSE 35671
// dist := 28 else
35661: LD_ADDR_VAR 0 14
35665: PUSH
35666: LD_INT 28
35668: ST_TO_ADDR
35669: GO 35679
// dist := 36 ;
35671: LD_ADDR_VAR 0 14
35675: PUSH
35676: LD_INT 36
35678: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35679: LD_VAR 0 1
35683: PPUSH
35684: LD_VAR 0 3
35688: PPUSH
35689: LD_VAR 0 4
35693: PPUSH
35694: CALL_OW 297
35698: PUSH
35699: LD_VAR 0 14
35703: GREATER
35704: IFFALSE 35708
// exit ;
35706: GO 36233
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35708: LD_ADDR_VAR 0 12
35712: PUSH
35713: LD_VAR 0 2
35717: PPUSH
35718: LD_VAR 0 3
35722: PPUSH
35723: LD_VAR 0 4
35727: PPUSH
35728: LD_VAR 0 5
35732: PPUSH
35733: LD_VAR 0 1
35737: PPUSH
35738: CALL_OW 248
35742: PPUSH
35743: LD_INT 0
35745: PPUSH
35746: CALL 36238 0 6
35750: ST_TO_ADDR
// if not hexes then
35751: LD_VAR 0 12
35755: NOT
35756: IFFALSE 35760
// exit ;
35758: GO 36233
// hex := GetHexInfo ( x , y ) ;
35760: LD_ADDR_VAR 0 15
35764: PUSH
35765: LD_VAR 0 3
35769: PPUSH
35770: LD_VAR 0 4
35774: PPUSH
35775: CALL_OW 546
35779: ST_TO_ADDR
// if hex [ 1 ] then
35780: LD_VAR 0 15
35784: PUSH
35785: LD_INT 1
35787: ARRAY
35788: IFFALSE 35792
// exit ;
35790: GO 36233
// height := hex [ 2 ] ;
35792: LD_ADDR_VAR 0 13
35796: PUSH
35797: LD_VAR 0 15
35801: PUSH
35802: LD_INT 2
35804: ARRAY
35805: ST_TO_ADDR
// for i = 1 to hexes do
35806: LD_ADDR_VAR 0 7
35810: PUSH
35811: DOUBLE
35812: LD_INT 1
35814: DEC
35815: ST_TO_ADDR
35816: LD_VAR 0 12
35820: PUSH
35821: FOR_TO
35822: IFFALSE 36152
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35824: LD_VAR 0 12
35828: PUSH
35829: LD_VAR 0 7
35833: ARRAY
35834: PUSH
35835: LD_INT 1
35837: ARRAY
35838: PPUSH
35839: LD_VAR 0 12
35843: PUSH
35844: LD_VAR 0 7
35848: ARRAY
35849: PUSH
35850: LD_INT 2
35852: ARRAY
35853: PPUSH
35854: CALL_OW 488
35858: NOT
35859: PUSH
35860: LD_VAR 0 12
35864: PUSH
35865: LD_VAR 0 7
35869: ARRAY
35870: PUSH
35871: LD_INT 1
35873: ARRAY
35874: PPUSH
35875: LD_VAR 0 12
35879: PUSH
35880: LD_VAR 0 7
35884: ARRAY
35885: PUSH
35886: LD_INT 2
35888: ARRAY
35889: PPUSH
35890: CALL_OW 428
35894: PUSH
35895: LD_INT 0
35897: GREATER
35898: OR
35899: PUSH
35900: LD_VAR 0 12
35904: PUSH
35905: LD_VAR 0 7
35909: ARRAY
35910: PUSH
35911: LD_INT 1
35913: ARRAY
35914: PPUSH
35915: LD_VAR 0 12
35919: PUSH
35920: LD_VAR 0 7
35924: ARRAY
35925: PUSH
35926: LD_INT 2
35928: ARRAY
35929: PPUSH
35930: CALL_OW 351
35934: OR
35935: IFFALSE 35941
// exit ;
35937: POP
35938: POP
35939: GO 36233
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35941: LD_ADDR_VAR 0 8
35945: PUSH
35946: LD_VAR 0 12
35950: PUSH
35951: LD_VAR 0 7
35955: ARRAY
35956: PUSH
35957: LD_INT 1
35959: ARRAY
35960: PPUSH
35961: LD_VAR 0 12
35965: PUSH
35966: LD_VAR 0 7
35970: ARRAY
35971: PUSH
35972: LD_INT 2
35974: ARRAY
35975: PPUSH
35976: CALL_OW 546
35980: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35981: LD_VAR 0 8
35985: PUSH
35986: LD_INT 1
35988: ARRAY
35989: PUSH
35990: LD_VAR 0 8
35994: PUSH
35995: LD_INT 2
35997: ARRAY
35998: PUSH
35999: LD_VAR 0 13
36003: PUSH
36004: LD_INT 2
36006: PLUS
36007: GREATER
36008: OR
36009: PUSH
36010: LD_VAR 0 8
36014: PUSH
36015: LD_INT 2
36017: ARRAY
36018: PUSH
36019: LD_VAR 0 13
36023: PUSH
36024: LD_INT 2
36026: MINUS
36027: LESS
36028: OR
36029: PUSH
36030: LD_VAR 0 8
36034: PUSH
36035: LD_INT 3
36037: ARRAY
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 8
36044: PUSH
36045: LD_INT 9
36047: PUSH
36048: LD_INT 10
36050: PUSH
36051: LD_INT 11
36053: PUSH
36054: LD_INT 12
36056: PUSH
36057: LD_INT 13
36059: PUSH
36060: LD_INT 16
36062: PUSH
36063: LD_INT 17
36065: PUSH
36066: LD_INT 18
36068: PUSH
36069: LD_INT 19
36071: PUSH
36072: LD_INT 20
36074: PUSH
36075: LD_INT 21
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: IN
36093: NOT
36094: OR
36095: PUSH
36096: LD_VAR 0 8
36100: PUSH
36101: LD_INT 5
36103: ARRAY
36104: NOT
36105: OR
36106: PUSH
36107: LD_VAR 0 8
36111: PUSH
36112: LD_INT 6
36114: ARRAY
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 7
36124: PUSH
36125: LD_INT 9
36127: PUSH
36128: LD_INT 10
36130: PUSH
36131: LD_INT 11
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: IN
36142: NOT
36143: OR
36144: IFFALSE 36150
// exit ;
36146: POP
36147: POP
36148: GO 36233
// end ;
36150: GO 35821
36152: POP
36153: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36154: LD_VAR 0 9
36158: PPUSH
36159: LD_VAR 0 3
36163: PPUSH
36164: LD_VAR 0 4
36168: PPUSH
36169: LD_INT 20
36171: PPUSH
36172: CALL 28178 0 4
36176: PUSH
36177: LD_INT 4
36179: ARRAY
36180: IFFALSE 36184
// exit ;
36182: GO 36233
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36184: LD_VAR 0 2
36188: PUSH
36189: LD_INT 29
36191: PUSH
36192: LD_INT 30
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: IN
36199: PUSH
36200: LD_VAR 0 3
36204: PPUSH
36205: LD_VAR 0 4
36209: PPUSH
36210: LD_VAR 0 9
36214: PPUSH
36215: CALL_OW 440
36219: NOT
36220: AND
36221: IFFALSE 36225
// exit ;
36223: GO 36233
// result := true ;
36225: LD_ADDR_VAR 0 6
36229: PUSH
36230: LD_INT 1
36232: ST_TO_ADDR
// end ;
36233: LD_VAR 0 6
36237: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36238: LD_INT 0
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
36246: PPUSH
36247: PPUSH
36248: PPUSH
36249: PPUSH
36250: PPUSH
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
36255: PPUSH
36256: PPUSH
36257: PPUSH
36258: PPUSH
36259: PPUSH
36260: PPUSH
36261: PPUSH
36262: PPUSH
36263: PPUSH
36264: PPUSH
36265: PPUSH
36266: PPUSH
36267: PPUSH
36268: PPUSH
36269: PPUSH
36270: PPUSH
36271: PPUSH
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
36290: PPUSH
36291: PPUSH
36292: PPUSH
36293: PPUSH
36294: PPUSH
36295: PPUSH
36296: PPUSH
36297: PPUSH
// result = [ ] ;
36298: LD_ADDR_VAR 0 7
36302: PUSH
36303: EMPTY
36304: ST_TO_ADDR
// temp_list = [ ] ;
36305: LD_ADDR_VAR 0 9
36309: PUSH
36310: EMPTY
36311: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36312: LD_VAR 0 4
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: LD_INT 2
36325: PUSH
36326: LD_INT 3
36328: PUSH
36329: LD_INT 4
36331: PUSH
36332: LD_INT 5
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: IN
36343: NOT
36344: PUSH
36345: LD_VAR 0 1
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: IN
36360: PUSH
36361: LD_VAR 0 5
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: LD_INT 3
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: IN
36380: NOT
36381: AND
36382: OR
36383: IFFALSE 36387
// exit ;
36385: GO 54778
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36387: LD_VAR 0 1
36391: PUSH
36392: LD_INT 6
36394: PUSH
36395: LD_INT 7
36397: PUSH
36398: LD_INT 8
36400: PUSH
36401: LD_INT 13
36403: PUSH
36404: LD_INT 12
36406: PUSH
36407: LD_INT 15
36409: PUSH
36410: LD_INT 11
36412: PUSH
36413: LD_INT 14
36415: PUSH
36416: LD_INT 10
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: IN
36430: IFFALSE 36440
// btype = b_lab ;
36432: LD_ADDR_VAR 0 1
36436: PUSH
36437: LD_INT 6
36439: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36440: LD_VAR 0 6
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: IN
36459: NOT
36460: PUSH
36461: LD_VAR 0 1
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: LD_INT 2
36474: PUSH
36475: LD_INT 3
36477: PUSH
36478: LD_INT 6
36480: PUSH
36481: LD_INT 36
36483: PUSH
36484: LD_INT 4
36486: PUSH
36487: LD_INT 5
36489: PUSH
36490: LD_INT 31
36492: PUSH
36493: LD_INT 32
36495: PUSH
36496: LD_INT 33
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: IN
36512: NOT
36513: PUSH
36514: LD_VAR 0 6
36518: PUSH
36519: LD_INT 1
36521: EQUAL
36522: AND
36523: OR
36524: PUSH
36525: LD_VAR 0 1
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: LD_INT 3
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: IN
36540: NOT
36541: PUSH
36542: LD_VAR 0 6
36546: PUSH
36547: LD_INT 2
36549: EQUAL
36550: AND
36551: OR
36552: IFFALSE 36562
// mode = 0 ;
36554: LD_ADDR_VAR 0 6
36558: PUSH
36559: LD_INT 0
36561: ST_TO_ADDR
// case mode of 0 :
36562: LD_VAR 0 6
36566: PUSH
36567: LD_INT 0
36569: DOUBLE
36570: EQUAL
36571: IFTRUE 36575
36573: GO 48028
36575: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36576: LD_ADDR_VAR 0 11
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: LD_INT 1
36596: NEG
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: LD_INT 2
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: LD_INT 3
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 3
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: NEG
36743: PUSH
36744: LD_INT 2
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36769: LD_ADDR_VAR 0 12
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: NEG
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 2
36903: NEG
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 2
36915: NEG
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 3
36926: NEG
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 3
36937: NEG
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36965: LD_ADDR_VAR 0 13
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: LD_INT 2
37050: NEG
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: NEG
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 2
37112: NEG
37113: PUSH
37114: LD_INT 3
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 3
37124: NEG
37125: PUSH
37126: LD_INT 2
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 3
37136: NEG
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37164: LD_ADDR_VAR 0 14
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: NEG
37246: PUSH
37247: LD_INT 2
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 1
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: LD_INT 3
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 3
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 2
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37360: LD_ADDR_VAR 0 15
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: LD_INT 1
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: LD_INT 1
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: NEG
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 3
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 3
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37553: LD_ADDR_VAR 0 16
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 0
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 2
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 2
37676: NEG
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 2
37688: NEG
37689: PUSH
37690: LD_INT 2
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 3
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 3
37710: PUSH
37711: LD_INT 3
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: LD_INT 3
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37746: LD_ADDR_VAR 0 17
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 1
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: LD_INT 2
37831: NEG
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: LD_INT 1
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: LD_INT 2
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: NEG
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: NEG
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37976: LD_ADDR_VAR 0 18
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: LD_INT 1
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: LD_INT 2
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 2
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 2
38111: PUSH
38112: LD_INT 2
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: LD_INT 2
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: LD_INT 2
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: NEG
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 2
38175: NEG
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38206: LD_ADDR_VAR 0 19
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: LD_INT 2
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 2
38393: NEG
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: NEG
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38436: LD_ADDR_VAR 0 20
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 2
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: LD_INT 2
38532: NEG
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: LD_INT 2
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: LD_INT 2
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 2
38623: NEG
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: NEG
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38666: LD_ADDR_VAR 0 21
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: NEG
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38896: LD_ADDR_VAR 0 22
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: NEG
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: NEG
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39126: LD_ADDR_VAR 0 23
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 2
39325: NEG
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: LD_INT 3
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: LD_INT 3
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 2
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39406: LD_ADDR_VAR 0 24
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: NEG
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: LD_INT 2
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: LD_INT 2
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: LD_INT 2
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: LD_INT 2
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: LD_INT 2
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 3
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39682: LD_ADDR_VAR 0 25
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 2
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 2
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 2
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: NEG
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 2
39881: NEG
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 3
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 3
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 3
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39956: LD_ADDR_VAR 0 26
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 3
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 3
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: LD_INT 2
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40232: LD_ADDR_VAR 0 27
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 2
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: NEG
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 2
40454: NEG
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 3
40465: NEG
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 3
40477: NEG
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40512: LD_ADDR_VAR 0 28
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: LD_INT 1
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 2
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: LD_INT 2
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 2
40688: NEG
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 2
40711: NEG
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: LD_INT 3
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 3
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 3
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 3
40759: NEG
40760: PUSH
40761: LD_INT 2
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40794: LD_ADDR_VAR 0 29
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 2
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: LD_INT 3
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 3
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 3
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 3
41038: NEG
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41073: LD_ADDR_VAR 0 30
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 3
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 3
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: LD_INT 3
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 3
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41351: LD_ADDR_VAR 0 31
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: LD_INT 3
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 3
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: LD_INT 3
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 3
41594: NEG
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41629: LD_ADDR_VAR 0 32
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: LD_INT 2
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 2
41795: NEG
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 3
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 2
41861: NEG
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 3
41872: NEG
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41907: LD_ADDR_VAR 0 33
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: LD_INT 2
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 2
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: LD_INT 3
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 3
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: LD_INT 3
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 3
42151: NEG
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42186: LD_ADDR_VAR 0 34
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: LD_INT 3
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 3
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: LD_INT 3
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 3
42431: NEG
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42466: LD_ADDR_VAR 0 35
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42578: LD_ADDR_VAR 0 36
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42690: LD_ADDR_VAR 0 37
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42802: LD_ADDR_VAR 0 38
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42914: LD_ADDR_VAR 0 39
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 2
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43026: LD_ADDR_VAR 0 40
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43138: LD_ADDR_VAR 0 41
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 2
43304: NEG
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: NEG
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: LD_INT 3
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 3
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 3
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 3
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 3
43381: PUSH
43382: LD_INT 3
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: LD_INT 3
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 3
43412: NEG
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 3
43423: NEG
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 3
43447: NEG
43448: PUSH
43449: LD_INT 3
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43488: LD_ADDR_VAR 0 42
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 2
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 2
43666: NEG
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: LD_INT 3
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 3
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 3
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 3
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 3
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 3
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 3
43785: NEG
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 3
43797: NEG
43798: PUSH
43799: LD_INT 3
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43838: LD_ADDR_VAR 0 43
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: LD_INT 3
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 3
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 3
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 3
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 3
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 3
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 3
44134: NEG
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 3
44145: NEG
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44186: LD_ADDR_VAR 0 44
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 2
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 2
44341: NEG
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 3
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 3
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 3
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 3
44429: PUSH
44430: LD_INT 3
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: LD_INT 3
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 3
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 3
44495: NEG
44496: PUSH
44497: LD_INT 3
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44536: LD_ADDR_VAR 0 45
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: LD_INT 2
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: LD_INT 3
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 3
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 3
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 3
44782: PUSH
44783: LD_INT 3
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 3
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 3
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 3
44833: NEG
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 3
44845: NEG
44846: PUSH
44847: LD_INT 3
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44886: LD_ADDR_VAR 0 46
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 3
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 3
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 3
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 3
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 3
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 3
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 3
45182: NEG
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 3
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45234: LD_ADDR_VAR 0 47
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: NEG
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45385: LD_ADDR_VAR 0 48
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45532: LD_ADDR_VAR 0 49
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45676: LD_ADDR_VAR 0 50
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 2
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45820: LD_ADDR_VAR 0 51
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45967: LD_ADDR_VAR 0 52
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46118: LD_ADDR_VAR 0 53
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46348: LD_ADDR_VAR 0 54
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46578: LD_ADDR_VAR 0 55
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46808: LD_ADDR_VAR 0 56
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: LD_INT 2
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47038: LD_ADDR_VAR 0 57
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47268: LD_ADDR_VAR 0 58
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47498: LD_ADDR_VAR 0 59
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47586: LD_ADDR_VAR 0 60
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47674: LD_ADDR_VAR 0 61
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47762: LD_ADDR_VAR 0 62
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47850: LD_ADDR_VAR 0 63
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47938: LD_ADDR_VAR 0 64
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: ST_TO_ADDR
// end ; 1 :
48026: GO 53923
48028: LD_INT 1
48030: DOUBLE
48031: EQUAL
48032: IFTRUE 48036
48034: GO 50659
48036: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48037: LD_ADDR_VAR 0 11
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 3
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 3
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48081: LD_ADDR_VAR 0 12
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 3
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 3
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48122: LD_ADDR_VAR 0 13
48126: PUSH
48127: LD_INT 3
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: LD_INT 3
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 3
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: LIST
48161: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48162: LD_ADDR_VAR 0 14
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48203: LD_ADDR_VAR 0 15
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 3
48232: NEG
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48247: LD_ADDR_VAR 0 16
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 3
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 3
48278: NEG
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48293: LD_ADDR_VAR 0 17
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 3
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: LIST
48336: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48337: LD_ADDR_VAR 0 18
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: LIST
48377: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48378: LD_ADDR_VAR 0 19
48382: PUSH
48383: LD_INT 3
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: LD_INT 3
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: LIST
48417: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48418: LD_ADDR_VAR 0 20
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 3
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: LIST
48458: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48459: LD_ADDR_VAR 0 21
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 3
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48503: LD_ADDR_VAR 0 22
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 3
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 3
48522: NEG
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 3
48534: NEG
48535: PUSH
48536: LD_INT 3
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: LIST
48548: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48549: LD_ADDR_VAR 0 23
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 4
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 3
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48593: LD_ADDR_VAR 0 24
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 4
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48634: LD_ADDR_VAR 0 25
48638: PUSH
48639: LD_INT 3
48641: PUSH
48642: LD_INT 3
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 4
48651: PUSH
48652: LD_INT 3
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 3
48661: PUSH
48662: LD_INT 4
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: LIST
48673: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48674: LD_ADDR_VAR 0 26
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 4
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: LIST
48714: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48715: LD_ADDR_VAR 0 27
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 3
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 4
48744: NEG
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48759: LD_ADDR_VAR 0 28
48763: PUSH
48764: LD_INT 3
48766: NEG
48767: PUSH
48768: LD_INT 3
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 3
48778: NEG
48779: PUSH
48780: LD_INT 4
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 4
48790: NEG
48791: PUSH
48792: LD_INT 3
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48805: LD_ADDR_VAR 0 29
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: LD_INT 3
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 3
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 2
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 4
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 4
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 5
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 5
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 4
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 6
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 6
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 5
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48960: LD_ADDR_VAR 0 30
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 3
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 3
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 4
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 4
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 4
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 5
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 5
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 5
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 6
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 6
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49103: LD_ADDR_VAR 0 31
49107: PUSH
49108: LD_INT 3
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 3
49120: PUSH
49121: LD_INT 3
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: PUSH
49131: LD_INT 3
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 4
49140: PUSH
49141: LD_INT 3
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 4
49150: PUSH
49151: LD_INT 4
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 3
49160: PUSH
49161: LD_INT 4
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 5
49170: PUSH
49171: LD_INT 4
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 5
49180: PUSH
49181: LD_INT 5
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 4
49190: PUSH
49191: LD_INT 5
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 6
49200: PUSH
49201: LD_INT 5
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 6
49210: PUSH
49211: LD_INT 6
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 5
49220: PUSH
49221: LD_INT 6
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49242: LD_ADDR_VAR 0 32
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: LD_INT 3
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: LD_INT 4
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 4
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: LD_INT 3
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 5
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: LD_INT 5
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: LD_INT 4
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 6
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 6
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 5
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49385: LD_ADDR_VAR 0 33
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 3
49403: NEG
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 3
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 3
49426: NEG
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 4
49437: NEG
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 4
49448: NEG
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 4
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 5
49471: NEG
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 5
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 5
49494: NEG
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 6
49505: NEG
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 6
49516: NEG
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49540: LD_ADDR_VAR 0 34
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 3
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 3
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 3
49571: NEG
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 3
49583: NEG
49584: PUSH
49585: LD_INT 4
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 4
49595: NEG
49596: PUSH
49597: LD_INT 3
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 4
49607: NEG
49608: PUSH
49609: LD_INT 4
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 4
49619: NEG
49620: PUSH
49621: LD_INT 5
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 5
49631: NEG
49632: PUSH
49633: LD_INT 4
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 5
49643: NEG
49644: PUSH
49645: LD_INT 5
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 5
49655: NEG
49656: PUSH
49657: LD_INT 6
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 6
49667: NEG
49668: PUSH
49669: LD_INT 5
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 6
49679: NEG
49680: PUSH
49681: LD_INT 6
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49703: LD_ADDR_VAR 0 41
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: LIST
49746: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49747: LD_ADDR_VAR 0 42
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 3
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49788: LD_ADDR_VAR 0 43
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 3
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: LIST
49827: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49828: LD_ADDR_VAR 0 44
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 3
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49869: LD_ADDR_VAR 0 45
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49913: LD_ADDR_VAR 0 46
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: LD_INT 3
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49959: LD_ADDR_VAR 0 47
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 3
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 3
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49992: LD_ADDR_VAR 0 48
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50023: LD_ADDR_VAR 0 49
50027: PUSH
50028: LD_INT 3
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50052: LD_ADDR_VAR 0 50
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 3
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50081: LD_ADDR_VAR 0 51
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50112: LD_ADDR_VAR 0 52
50116: PUSH
50117: LD_INT 3
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 3
50131: NEG
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50145: LD_ADDR_VAR 0 53
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50189: LD_ADDR_VAR 0 54
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50230: LD_ADDR_VAR 0 55
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: LIST
50269: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50270: LD_ADDR_VAR 0 56
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50311: LD_ADDR_VAR 0 57
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 3
50329: NEG
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: NEG
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50355: LD_ADDR_VAR 0 58
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 3
50374: NEG
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50401: LD_ADDR_VAR 0 59
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50445: LD_ADDR_VAR 0 60
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: LIST
50485: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50486: LD_ADDR_VAR 0 61
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50526: LD_ADDR_VAR 0 62
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50567: LD_ADDR_VAR 0 63
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50611: LD_ADDR_VAR 0 64
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: ST_TO_ADDR
// end ; 2 :
50657: GO 53923
50659: LD_INT 2
50661: DOUBLE
50662: EQUAL
50663: IFTRUE 50667
50665: GO 53922
50667: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50668: LD_ADDR_VAR 0 29
50672: PUSH
50673: LD_INT 4
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 4
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 5
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 5
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 4
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 5
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: LD_INT 3
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 4
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 4
50798: PUSH
50799: LD_INT 4
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: LD_INT 4
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 3
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 4
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 4
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 4
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: LD_INT 3
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 4
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 5
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 5
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 4
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: LD_INT 3
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: LD_INT 5
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 3
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 4
51007: NEG
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 4
51018: NEG
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 4
51030: NEG
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 4
51053: NEG
51054: PUSH
51055: LD_INT 4
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 4
51065: NEG
51066: PUSH
51067: LD_INT 5
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 3
51077: NEG
51078: PUSH
51079: LD_INT 4
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 4
51101: NEG
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 5
51113: NEG
51114: PUSH
51115: LD_INT 4
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 5
51125: NEG
51126: PUSH
51127: LD_INT 5
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: LD_INT 5
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 5
51149: NEG
51150: PUSH
51151: LD_INT 3
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51206: LD_ADDR_VAR 0 30
51210: PUSH
51211: LD_INT 4
51213: PUSH
51214: LD_INT 4
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 4
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 5
51233: PUSH
51234: LD_INT 4
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 5
51243: PUSH
51244: LD_INT 5
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 4
51253: PUSH
51254: LD_INT 5
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: LD_INT 4
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 5
51283: PUSH
51284: LD_INT 3
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: LD_INT 5
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 3
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 4
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 4
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 4
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 4
51396: NEG
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 4
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 3
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 4
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 5
51452: NEG
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 5
51463: NEG
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 5
51475: NEG
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: NEG
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 3
51498: NEG
51499: PUSH
51500: LD_INT 3
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 3
51510: NEG
51511: PUSH
51512: LD_INT 4
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 3
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: NEG
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 4
51558: NEG
51559: PUSH
51560: LD_INT 3
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 4
51570: NEG
51571: PUSH
51572: LD_INT 4
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 4
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 4
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 4
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 5
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 4
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 3
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 4
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 5
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: LD_INT 3
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: LD_INT 5
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51753: LD_ADDR_VAR 0 31
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 4
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 4
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 5
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 5
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 4
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 5
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: LD_INT 3
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 3
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 3
51898: NEG
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 4
51909: NEG
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 4
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 4
51932: NEG
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 4
51955: NEG
51956: PUSH
51957: LD_INT 4
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 4
51967: NEG
51968: PUSH
51969: LD_INT 5
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 3
51979: NEG
51980: PUSH
51981: LD_INT 4
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 3
51991: NEG
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 4
52003: NEG
52004: PUSH
52005: LD_INT 3
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 5
52015: NEG
52016: PUSH
52017: LD_INT 4
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 5
52027: NEG
52028: PUSH
52029: LD_INT 5
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 3
52039: NEG
52040: PUSH
52041: LD_INT 5
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 5
52051: NEG
52052: PUSH
52053: LD_INT 3
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 3
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 4
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 4
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: LD_INT 4
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 4
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 4
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 5
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 5
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 4
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 3
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 3
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 5
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52303: LD_ADDR_VAR 0 32
52307: PUSH
52308: LD_INT 4
52310: NEG
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 4
52321: NEG
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 3
52344: NEG
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 4
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 5
52366: NEG
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 5
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 5
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 3
52401: NEG
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 3
52424: NEG
52425: PUSH
52426: LD_INT 4
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 3
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 4
52472: NEG
52473: PUSH
52474: LD_INT 3
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 4
52484: NEG
52485: PUSH
52486: LD_INT 4
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 4
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 4
52508: NEG
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 4
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 5
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 4
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 3
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 4
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 5
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 3
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 5
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 3
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 4
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 4
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 4
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 4
52715: PUSH
52716: LD_INT 4
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 4
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 5
52735: PUSH
52736: LD_INT 4
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 5
52745: PUSH
52746: LD_INT 5
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 4
52755: PUSH
52756: LD_INT 5
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: PUSH
52766: LD_INT 4
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 5
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 3
52795: PUSH
52796: LD_INT 5
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52850: LD_ADDR_VAR 0 33
52854: PUSH
52855: LD_INT 4
52857: NEG
52858: PUSH
52859: LD_INT 4
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 4
52869: NEG
52870: PUSH
52871: LD_INT 5
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: NEG
52882: PUSH
52883: LD_INT 4
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 3
52893: NEG
52894: PUSH
52895: LD_INT 3
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 4
52905: NEG
52906: PUSH
52907: LD_INT 3
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 5
52917: NEG
52918: PUSH
52919: LD_INT 4
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 5
52929: NEG
52930: PUSH
52931: LD_INT 5
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 3
52941: NEG
52942: PUSH
52943: LD_INT 5
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 5
52953: NEG
52954: PUSH
52955: LD_INT 3
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 3
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 4
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: LD_INT 4
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 2
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: LD_INT 4
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 4
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 4
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 5
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 5
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 4
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 3
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 3
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 5
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 3
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 4
53180: PUSH
53181: LD_INT 3
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 4
53190: PUSH
53191: LD_INT 4
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: LD_INT 4
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 4
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: LD_INT 4
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 4
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 4
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: LD_INT 5
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 5
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: LD_INT 4
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 5
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: LD_INT 3
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53388: LD_ADDR_VAR 0 34
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 4
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 5
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 4
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 3
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 4
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 5
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: LD_INT 3
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: LD_INT 5
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 4
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 4
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 4
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 4
53590: PUSH
53591: LD_INT 4
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 4
53600: PUSH
53601: LD_INT 3
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 5
53610: PUSH
53611: LD_INT 4
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 5
53620: PUSH
53621: LD_INT 5
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 4
53630: PUSH
53631: LD_INT 5
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 3
53640: PUSH
53641: LD_INT 4
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 3
53650: PUSH
53651: LD_INT 3
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 5
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: LD_INT 5
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 4
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 4
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 2
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 4
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 4
53773: NEG
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 4
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 3
53796: NEG
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 4
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 5
53829: NEG
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 5
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 5
53852: NEG
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 3
53864: NEG
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: ST_TO_ADDR
// end ; end ;
53920: GO 53923
53922: POP
// case btype of b_depot , b_warehouse :
53923: LD_VAR 0 1
53927: PUSH
53928: LD_INT 0
53930: DOUBLE
53931: EQUAL
53932: IFTRUE 53942
53934: LD_INT 1
53936: DOUBLE
53937: EQUAL
53938: IFTRUE 53942
53940: GO 54143
53942: POP
// case nation of nation_american :
53943: LD_VAR 0 5
53947: PUSH
53948: LD_INT 1
53950: DOUBLE
53951: EQUAL
53952: IFTRUE 53956
53954: GO 54012
53956: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53957: LD_ADDR_VAR 0 9
53961: PUSH
53962: LD_VAR 0 11
53966: PUSH
53967: LD_VAR 0 12
53971: PUSH
53972: LD_VAR 0 13
53976: PUSH
53977: LD_VAR 0 14
53981: PUSH
53982: LD_VAR 0 15
53986: PUSH
53987: LD_VAR 0 16
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: PUSH
54000: LD_VAR 0 4
54004: PUSH
54005: LD_INT 1
54007: PLUS
54008: ARRAY
54009: ST_TO_ADDR
54010: GO 54141
54012: LD_INT 2
54014: DOUBLE
54015: EQUAL
54016: IFTRUE 54020
54018: GO 54076
54020: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54021: LD_ADDR_VAR 0 9
54025: PUSH
54026: LD_VAR 0 17
54030: PUSH
54031: LD_VAR 0 18
54035: PUSH
54036: LD_VAR 0 19
54040: PUSH
54041: LD_VAR 0 20
54045: PUSH
54046: LD_VAR 0 21
54050: PUSH
54051: LD_VAR 0 22
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: PUSH
54064: LD_VAR 0 4
54068: PUSH
54069: LD_INT 1
54071: PLUS
54072: ARRAY
54073: ST_TO_ADDR
54074: GO 54141
54076: LD_INT 3
54078: DOUBLE
54079: EQUAL
54080: IFTRUE 54084
54082: GO 54140
54084: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54085: LD_ADDR_VAR 0 9
54089: PUSH
54090: LD_VAR 0 23
54094: PUSH
54095: LD_VAR 0 24
54099: PUSH
54100: LD_VAR 0 25
54104: PUSH
54105: LD_VAR 0 26
54109: PUSH
54110: LD_VAR 0 27
54114: PUSH
54115: LD_VAR 0 28
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: PUSH
54128: LD_VAR 0 4
54132: PUSH
54133: LD_INT 1
54135: PLUS
54136: ARRAY
54137: ST_TO_ADDR
54138: GO 54141
54140: POP
54141: GO 54696
54143: LD_INT 2
54145: DOUBLE
54146: EQUAL
54147: IFTRUE 54157
54149: LD_INT 3
54151: DOUBLE
54152: EQUAL
54153: IFTRUE 54157
54155: GO 54213
54157: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54158: LD_ADDR_VAR 0 9
54162: PUSH
54163: LD_VAR 0 29
54167: PUSH
54168: LD_VAR 0 30
54172: PUSH
54173: LD_VAR 0 31
54177: PUSH
54178: LD_VAR 0 32
54182: PUSH
54183: LD_VAR 0 33
54187: PUSH
54188: LD_VAR 0 34
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: PUSH
54201: LD_VAR 0 4
54205: PUSH
54206: LD_INT 1
54208: PLUS
54209: ARRAY
54210: ST_TO_ADDR
54211: GO 54696
54213: LD_INT 16
54215: DOUBLE
54216: EQUAL
54217: IFTRUE 54275
54219: LD_INT 17
54221: DOUBLE
54222: EQUAL
54223: IFTRUE 54275
54225: LD_INT 18
54227: DOUBLE
54228: EQUAL
54229: IFTRUE 54275
54231: LD_INT 19
54233: DOUBLE
54234: EQUAL
54235: IFTRUE 54275
54237: LD_INT 22
54239: DOUBLE
54240: EQUAL
54241: IFTRUE 54275
54243: LD_INT 20
54245: DOUBLE
54246: EQUAL
54247: IFTRUE 54275
54249: LD_INT 21
54251: DOUBLE
54252: EQUAL
54253: IFTRUE 54275
54255: LD_INT 23
54257: DOUBLE
54258: EQUAL
54259: IFTRUE 54275
54261: LD_INT 24
54263: DOUBLE
54264: EQUAL
54265: IFTRUE 54275
54267: LD_INT 25
54269: DOUBLE
54270: EQUAL
54271: IFTRUE 54275
54273: GO 54331
54275: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54276: LD_ADDR_VAR 0 9
54280: PUSH
54281: LD_VAR 0 35
54285: PUSH
54286: LD_VAR 0 36
54290: PUSH
54291: LD_VAR 0 37
54295: PUSH
54296: LD_VAR 0 38
54300: PUSH
54301: LD_VAR 0 39
54305: PUSH
54306: LD_VAR 0 40
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: PUSH
54319: LD_VAR 0 4
54323: PUSH
54324: LD_INT 1
54326: PLUS
54327: ARRAY
54328: ST_TO_ADDR
54329: GO 54696
54331: LD_INT 6
54333: DOUBLE
54334: EQUAL
54335: IFTRUE 54387
54337: LD_INT 7
54339: DOUBLE
54340: EQUAL
54341: IFTRUE 54387
54343: LD_INT 8
54345: DOUBLE
54346: EQUAL
54347: IFTRUE 54387
54349: LD_INT 13
54351: DOUBLE
54352: EQUAL
54353: IFTRUE 54387
54355: LD_INT 12
54357: DOUBLE
54358: EQUAL
54359: IFTRUE 54387
54361: LD_INT 15
54363: DOUBLE
54364: EQUAL
54365: IFTRUE 54387
54367: LD_INT 11
54369: DOUBLE
54370: EQUAL
54371: IFTRUE 54387
54373: LD_INT 14
54375: DOUBLE
54376: EQUAL
54377: IFTRUE 54387
54379: LD_INT 10
54381: DOUBLE
54382: EQUAL
54383: IFTRUE 54387
54385: GO 54443
54387: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54388: LD_ADDR_VAR 0 9
54392: PUSH
54393: LD_VAR 0 41
54397: PUSH
54398: LD_VAR 0 42
54402: PUSH
54403: LD_VAR 0 43
54407: PUSH
54408: LD_VAR 0 44
54412: PUSH
54413: LD_VAR 0 45
54417: PUSH
54418: LD_VAR 0 46
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: PUSH
54431: LD_VAR 0 4
54435: PUSH
54436: LD_INT 1
54438: PLUS
54439: ARRAY
54440: ST_TO_ADDR
54441: GO 54696
54443: LD_INT 36
54445: DOUBLE
54446: EQUAL
54447: IFTRUE 54451
54449: GO 54507
54451: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54452: LD_ADDR_VAR 0 9
54456: PUSH
54457: LD_VAR 0 47
54461: PUSH
54462: LD_VAR 0 48
54466: PUSH
54467: LD_VAR 0 49
54471: PUSH
54472: LD_VAR 0 50
54476: PUSH
54477: LD_VAR 0 51
54481: PUSH
54482: LD_VAR 0 52
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: PUSH
54495: LD_VAR 0 4
54499: PUSH
54500: LD_INT 1
54502: PLUS
54503: ARRAY
54504: ST_TO_ADDR
54505: GO 54696
54507: LD_INT 4
54509: DOUBLE
54510: EQUAL
54511: IFTRUE 54533
54513: LD_INT 5
54515: DOUBLE
54516: EQUAL
54517: IFTRUE 54533
54519: LD_INT 34
54521: DOUBLE
54522: EQUAL
54523: IFTRUE 54533
54525: LD_INT 37
54527: DOUBLE
54528: EQUAL
54529: IFTRUE 54533
54531: GO 54589
54533: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54534: LD_ADDR_VAR 0 9
54538: PUSH
54539: LD_VAR 0 53
54543: PUSH
54544: LD_VAR 0 54
54548: PUSH
54549: LD_VAR 0 55
54553: PUSH
54554: LD_VAR 0 56
54558: PUSH
54559: LD_VAR 0 57
54563: PUSH
54564: LD_VAR 0 58
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: PUSH
54577: LD_VAR 0 4
54581: PUSH
54582: LD_INT 1
54584: PLUS
54585: ARRAY
54586: ST_TO_ADDR
54587: GO 54696
54589: LD_INT 31
54591: DOUBLE
54592: EQUAL
54593: IFTRUE 54639
54595: LD_INT 32
54597: DOUBLE
54598: EQUAL
54599: IFTRUE 54639
54601: LD_INT 33
54603: DOUBLE
54604: EQUAL
54605: IFTRUE 54639
54607: LD_INT 27
54609: DOUBLE
54610: EQUAL
54611: IFTRUE 54639
54613: LD_INT 26
54615: DOUBLE
54616: EQUAL
54617: IFTRUE 54639
54619: LD_INT 28
54621: DOUBLE
54622: EQUAL
54623: IFTRUE 54639
54625: LD_INT 29
54627: DOUBLE
54628: EQUAL
54629: IFTRUE 54639
54631: LD_INT 30
54633: DOUBLE
54634: EQUAL
54635: IFTRUE 54639
54637: GO 54695
54639: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54640: LD_ADDR_VAR 0 9
54644: PUSH
54645: LD_VAR 0 59
54649: PUSH
54650: LD_VAR 0 60
54654: PUSH
54655: LD_VAR 0 61
54659: PUSH
54660: LD_VAR 0 62
54664: PUSH
54665: LD_VAR 0 63
54669: PUSH
54670: LD_VAR 0 64
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: PUSH
54683: LD_VAR 0 4
54687: PUSH
54688: LD_INT 1
54690: PLUS
54691: ARRAY
54692: ST_TO_ADDR
54693: GO 54696
54695: POP
// temp_list2 = [ ] ;
54696: LD_ADDR_VAR 0 10
54700: PUSH
54701: EMPTY
54702: ST_TO_ADDR
// for i in temp_list do
54703: LD_ADDR_VAR 0 8
54707: PUSH
54708: LD_VAR 0 9
54712: PUSH
54713: FOR_IN
54714: IFFALSE 54766
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54716: LD_ADDR_VAR 0 10
54720: PUSH
54721: LD_VAR 0 10
54725: PUSH
54726: LD_VAR 0 8
54730: PUSH
54731: LD_INT 1
54733: ARRAY
54734: PUSH
54735: LD_VAR 0 2
54739: PLUS
54740: PUSH
54741: LD_VAR 0 8
54745: PUSH
54746: LD_INT 2
54748: ARRAY
54749: PUSH
54750: LD_VAR 0 3
54754: PLUS
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: ADD
54763: ST_TO_ADDR
54764: GO 54713
54766: POP
54767: POP
// result = temp_list2 ;
54768: LD_ADDR_VAR 0 7
54772: PUSH
54773: LD_VAR 0 10
54777: ST_TO_ADDR
// end ;
54778: LD_VAR 0 7
54782: RET
// export function EnemyInRange ( unit , dist ) ; begin
54783: LD_INT 0
54785: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54786: LD_ADDR_VAR 0 3
54790: PUSH
54791: LD_VAR 0 1
54795: PPUSH
54796: CALL_OW 255
54800: PPUSH
54801: LD_VAR 0 1
54805: PPUSH
54806: CALL_OW 250
54810: PPUSH
54811: LD_VAR 0 1
54815: PPUSH
54816: CALL_OW 251
54820: PPUSH
54821: LD_VAR 0 2
54825: PPUSH
54826: CALL 28178 0 4
54830: PUSH
54831: LD_INT 4
54833: ARRAY
54834: ST_TO_ADDR
// end ;
54835: LD_VAR 0 3
54839: RET
// export function PlayerSeeMe ( unit ) ; begin
54840: LD_INT 0
54842: PPUSH
// result := See ( your_side , unit ) ;
54843: LD_ADDR_VAR 0 2
54847: PUSH
54848: LD_OWVAR 2
54852: PPUSH
54853: LD_VAR 0 1
54857: PPUSH
54858: CALL_OW 292
54862: ST_TO_ADDR
// end ;
54863: LD_VAR 0 2
54867: RET
// export function ReverseDir ( unit ) ; begin
54868: LD_INT 0
54870: PPUSH
// if not unit then
54871: LD_VAR 0 1
54875: NOT
54876: IFFALSE 54880
// exit ;
54878: GO 54903
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54880: LD_ADDR_VAR 0 2
54884: PUSH
54885: LD_VAR 0 1
54889: PPUSH
54890: CALL_OW 254
54894: PUSH
54895: LD_INT 3
54897: PLUS
54898: PUSH
54899: LD_INT 6
54901: MOD
54902: ST_TO_ADDR
// end ;
54903: LD_VAR 0 2
54907: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54908: LD_INT 0
54910: PPUSH
54911: PPUSH
54912: PPUSH
54913: PPUSH
54914: PPUSH
// if not hexes then
54915: LD_VAR 0 2
54919: NOT
54920: IFFALSE 54924
// exit ;
54922: GO 55072
// dist := 9999 ;
54924: LD_ADDR_VAR 0 5
54928: PUSH
54929: LD_INT 9999
54931: ST_TO_ADDR
// for i = 1 to hexes do
54932: LD_ADDR_VAR 0 4
54936: PUSH
54937: DOUBLE
54938: LD_INT 1
54940: DEC
54941: ST_TO_ADDR
54942: LD_VAR 0 2
54946: PUSH
54947: FOR_TO
54948: IFFALSE 55060
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54950: LD_VAR 0 1
54954: PPUSH
54955: LD_VAR 0 2
54959: PUSH
54960: LD_VAR 0 4
54964: ARRAY
54965: PUSH
54966: LD_INT 1
54968: ARRAY
54969: PPUSH
54970: LD_VAR 0 2
54974: PUSH
54975: LD_VAR 0 4
54979: ARRAY
54980: PUSH
54981: LD_INT 2
54983: ARRAY
54984: PPUSH
54985: CALL_OW 297
54989: PUSH
54990: LD_VAR 0 5
54994: LESS
54995: IFFALSE 55058
// begin hex := hexes [ i ] ;
54997: LD_ADDR_VAR 0 7
55001: PUSH
55002: LD_VAR 0 2
55006: PUSH
55007: LD_VAR 0 4
55011: ARRAY
55012: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55013: LD_ADDR_VAR 0 5
55017: PUSH
55018: LD_VAR 0 1
55022: PPUSH
55023: LD_VAR 0 2
55027: PUSH
55028: LD_VAR 0 4
55032: ARRAY
55033: PUSH
55034: LD_INT 1
55036: ARRAY
55037: PPUSH
55038: LD_VAR 0 2
55042: PUSH
55043: LD_VAR 0 4
55047: ARRAY
55048: PUSH
55049: LD_INT 2
55051: ARRAY
55052: PPUSH
55053: CALL_OW 297
55057: ST_TO_ADDR
// end ; end ;
55058: GO 54947
55060: POP
55061: POP
// result := hex ;
55062: LD_ADDR_VAR 0 3
55066: PUSH
55067: LD_VAR 0 7
55071: ST_TO_ADDR
// end ;
55072: LD_VAR 0 3
55076: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55077: LD_INT 0
55079: PPUSH
55080: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55081: LD_VAR 0 1
55085: NOT
55086: PUSH
55087: LD_VAR 0 1
55091: PUSH
55092: LD_INT 21
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 23
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PPUSH
55116: CALL_OW 69
55120: IN
55121: NOT
55122: OR
55123: IFFALSE 55127
// exit ;
55125: GO 55174
// for i = 1 to 3 do
55127: LD_ADDR_VAR 0 3
55131: PUSH
55132: DOUBLE
55133: LD_INT 1
55135: DEC
55136: ST_TO_ADDR
55137: LD_INT 3
55139: PUSH
55140: FOR_TO
55141: IFFALSE 55172
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55143: LD_VAR 0 1
55147: PPUSH
55148: CALL_OW 250
55152: PPUSH
55153: LD_VAR 0 1
55157: PPUSH
55158: CALL_OW 251
55162: PPUSH
55163: LD_INT 1
55165: PPUSH
55166: CALL_OW 453
55170: GO 55140
55172: POP
55173: POP
// end ;
55174: LD_VAR 0 2
55178: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55179: LD_INT 0
55181: PPUSH
55182: PPUSH
55183: PPUSH
55184: PPUSH
55185: PPUSH
55186: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55187: LD_VAR 0 1
55191: NOT
55192: PUSH
55193: LD_VAR 0 2
55197: NOT
55198: OR
55199: PUSH
55200: LD_VAR 0 1
55204: PPUSH
55205: CALL_OW 314
55209: OR
55210: IFFALSE 55214
// exit ;
55212: GO 55655
// x := GetX ( enemy_unit ) ;
55214: LD_ADDR_VAR 0 7
55218: PUSH
55219: LD_VAR 0 2
55223: PPUSH
55224: CALL_OW 250
55228: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55229: LD_ADDR_VAR 0 8
55233: PUSH
55234: LD_VAR 0 2
55238: PPUSH
55239: CALL_OW 251
55243: ST_TO_ADDR
// if not x or not y then
55244: LD_VAR 0 7
55248: NOT
55249: PUSH
55250: LD_VAR 0 8
55254: NOT
55255: OR
55256: IFFALSE 55260
// exit ;
55258: GO 55655
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55260: LD_ADDR_VAR 0 6
55264: PUSH
55265: LD_VAR 0 7
55269: PPUSH
55270: LD_INT 0
55272: PPUSH
55273: LD_INT 4
55275: PPUSH
55276: CALL_OW 272
55280: PUSH
55281: LD_VAR 0 8
55285: PPUSH
55286: LD_INT 0
55288: PPUSH
55289: LD_INT 4
55291: PPUSH
55292: CALL_OW 273
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_VAR 0 7
55305: PPUSH
55306: LD_INT 1
55308: PPUSH
55309: LD_INT 4
55311: PPUSH
55312: CALL_OW 272
55316: PUSH
55317: LD_VAR 0 8
55321: PPUSH
55322: LD_INT 1
55324: PPUSH
55325: LD_INT 4
55327: PPUSH
55328: CALL_OW 273
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_VAR 0 7
55341: PPUSH
55342: LD_INT 2
55344: PPUSH
55345: LD_INT 4
55347: PPUSH
55348: CALL_OW 272
55352: PUSH
55353: LD_VAR 0 8
55357: PPUSH
55358: LD_INT 2
55360: PPUSH
55361: LD_INT 4
55363: PPUSH
55364: CALL_OW 273
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_VAR 0 7
55377: PPUSH
55378: LD_INT 3
55380: PPUSH
55381: LD_INT 4
55383: PPUSH
55384: CALL_OW 272
55388: PUSH
55389: LD_VAR 0 8
55393: PPUSH
55394: LD_INT 3
55396: PPUSH
55397: LD_INT 4
55399: PPUSH
55400: CALL_OW 273
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_VAR 0 7
55413: PPUSH
55414: LD_INT 4
55416: PPUSH
55417: LD_INT 4
55419: PPUSH
55420: CALL_OW 272
55424: PUSH
55425: LD_VAR 0 8
55429: PPUSH
55430: LD_INT 4
55432: PPUSH
55433: LD_INT 4
55435: PPUSH
55436: CALL_OW 273
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_VAR 0 7
55449: PPUSH
55450: LD_INT 5
55452: PPUSH
55453: LD_INT 4
55455: PPUSH
55456: CALL_OW 272
55460: PUSH
55461: LD_VAR 0 8
55465: PPUSH
55466: LD_INT 5
55468: PPUSH
55469: LD_INT 4
55471: PPUSH
55472: CALL_OW 273
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: ST_TO_ADDR
// for i = tmp downto 1 do
55489: LD_ADDR_VAR 0 4
55493: PUSH
55494: DOUBLE
55495: LD_VAR 0 6
55499: INC
55500: ST_TO_ADDR
55501: LD_INT 1
55503: PUSH
55504: FOR_DOWNTO
55505: IFFALSE 55606
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55507: LD_VAR 0 6
55511: PUSH
55512: LD_VAR 0 4
55516: ARRAY
55517: PUSH
55518: LD_INT 1
55520: ARRAY
55521: PPUSH
55522: LD_VAR 0 6
55526: PUSH
55527: LD_VAR 0 4
55531: ARRAY
55532: PUSH
55533: LD_INT 2
55535: ARRAY
55536: PPUSH
55537: CALL_OW 488
55541: NOT
55542: PUSH
55543: LD_VAR 0 6
55547: PUSH
55548: LD_VAR 0 4
55552: ARRAY
55553: PUSH
55554: LD_INT 1
55556: ARRAY
55557: PPUSH
55558: LD_VAR 0 6
55562: PUSH
55563: LD_VAR 0 4
55567: ARRAY
55568: PUSH
55569: LD_INT 2
55571: ARRAY
55572: PPUSH
55573: CALL_OW 428
55577: PUSH
55578: LD_INT 0
55580: NONEQUAL
55581: OR
55582: IFFALSE 55604
// tmp := Delete ( tmp , i ) ;
55584: LD_ADDR_VAR 0 6
55588: PUSH
55589: LD_VAR 0 6
55593: PPUSH
55594: LD_VAR 0 4
55598: PPUSH
55599: CALL_OW 3
55603: ST_TO_ADDR
55604: GO 55504
55606: POP
55607: POP
// j := GetClosestHex ( unit , tmp ) ;
55608: LD_ADDR_VAR 0 5
55612: PUSH
55613: LD_VAR 0 1
55617: PPUSH
55618: LD_VAR 0 6
55622: PPUSH
55623: CALL 54908 0 2
55627: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55628: LD_VAR 0 1
55632: PPUSH
55633: LD_VAR 0 5
55637: PUSH
55638: LD_INT 1
55640: ARRAY
55641: PPUSH
55642: LD_VAR 0 5
55646: PUSH
55647: LD_INT 2
55649: ARRAY
55650: PPUSH
55651: CALL_OW 111
// end ;
55655: LD_VAR 0 3
55659: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55660: LD_INT 0
55662: PPUSH
55663: PPUSH
55664: PPUSH
// uc_side = 0 ;
55665: LD_ADDR_OWVAR 20
55669: PUSH
55670: LD_INT 0
55672: ST_TO_ADDR
// uc_nation = 0 ;
55673: LD_ADDR_OWVAR 21
55677: PUSH
55678: LD_INT 0
55680: ST_TO_ADDR
// InitHc_All ( ) ;
55681: CALL_OW 584
// InitVc ;
55685: CALL_OW 20
// if mastodonts then
55689: LD_VAR 0 6
55693: IFFALSE 55760
// for i = 1 to mastodonts do
55695: LD_ADDR_VAR 0 11
55699: PUSH
55700: DOUBLE
55701: LD_INT 1
55703: DEC
55704: ST_TO_ADDR
55705: LD_VAR 0 6
55709: PUSH
55710: FOR_TO
55711: IFFALSE 55758
// begin vc_chassis := 31 ;
55713: LD_ADDR_OWVAR 37
55717: PUSH
55718: LD_INT 31
55720: ST_TO_ADDR
// vc_control := control_rider ;
55721: LD_ADDR_OWVAR 38
55725: PUSH
55726: LD_INT 4
55728: ST_TO_ADDR
// animal := CreateVehicle ;
55729: LD_ADDR_VAR 0 12
55733: PUSH
55734: CALL_OW 45
55738: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55739: LD_VAR 0 12
55743: PPUSH
55744: LD_VAR 0 8
55748: PPUSH
55749: LD_INT 0
55751: PPUSH
55752: CALL 57948 0 3
// end ;
55756: GO 55710
55758: POP
55759: POP
// if horses then
55760: LD_VAR 0 5
55764: IFFALSE 55831
// for i = 1 to horses do
55766: LD_ADDR_VAR 0 11
55770: PUSH
55771: DOUBLE
55772: LD_INT 1
55774: DEC
55775: ST_TO_ADDR
55776: LD_VAR 0 5
55780: PUSH
55781: FOR_TO
55782: IFFALSE 55829
// begin hc_class := 21 ;
55784: LD_ADDR_OWVAR 28
55788: PUSH
55789: LD_INT 21
55791: ST_TO_ADDR
// hc_gallery :=  ;
55792: LD_ADDR_OWVAR 33
55796: PUSH
55797: LD_STRING 
55799: ST_TO_ADDR
// animal := CreateHuman ;
55800: LD_ADDR_VAR 0 12
55804: PUSH
55805: CALL_OW 44
55809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55810: LD_VAR 0 12
55814: PPUSH
55815: LD_VAR 0 8
55819: PPUSH
55820: LD_INT 0
55822: PPUSH
55823: CALL 57948 0 3
// end ;
55827: GO 55781
55829: POP
55830: POP
// if birds then
55831: LD_VAR 0 1
55835: IFFALSE 55902
// for i = 1 to birds do
55837: LD_ADDR_VAR 0 11
55841: PUSH
55842: DOUBLE
55843: LD_INT 1
55845: DEC
55846: ST_TO_ADDR
55847: LD_VAR 0 1
55851: PUSH
55852: FOR_TO
55853: IFFALSE 55900
// begin hc_class = 18 ;
55855: LD_ADDR_OWVAR 28
55859: PUSH
55860: LD_INT 18
55862: ST_TO_ADDR
// hc_gallery =  ;
55863: LD_ADDR_OWVAR 33
55867: PUSH
55868: LD_STRING 
55870: ST_TO_ADDR
// animal := CreateHuman ;
55871: LD_ADDR_VAR 0 12
55875: PUSH
55876: CALL_OW 44
55880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55881: LD_VAR 0 12
55885: PPUSH
55886: LD_VAR 0 8
55890: PPUSH
55891: LD_INT 0
55893: PPUSH
55894: CALL 57948 0 3
// end ;
55898: GO 55852
55900: POP
55901: POP
// if tigers then
55902: LD_VAR 0 2
55906: IFFALSE 55990
// for i = 1 to tigers do
55908: LD_ADDR_VAR 0 11
55912: PUSH
55913: DOUBLE
55914: LD_INT 1
55916: DEC
55917: ST_TO_ADDR
55918: LD_VAR 0 2
55922: PUSH
55923: FOR_TO
55924: IFFALSE 55988
// begin hc_class = class_tiger ;
55926: LD_ADDR_OWVAR 28
55930: PUSH
55931: LD_INT 14
55933: ST_TO_ADDR
// hc_gallery =  ;
55934: LD_ADDR_OWVAR 33
55938: PUSH
55939: LD_STRING 
55941: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55942: LD_ADDR_OWVAR 35
55946: PUSH
55947: LD_INT 7
55949: NEG
55950: PPUSH
55951: LD_INT 7
55953: PPUSH
55954: CALL_OW 12
55958: ST_TO_ADDR
// animal := CreateHuman ;
55959: LD_ADDR_VAR 0 12
55963: PUSH
55964: CALL_OW 44
55968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55969: LD_VAR 0 12
55973: PPUSH
55974: LD_VAR 0 8
55978: PPUSH
55979: LD_INT 0
55981: PPUSH
55982: CALL 57948 0 3
// end ;
55986: GO 55923
55988: POP
55989: POP
// if apemans then
55990: LD_VAR 0 3
55994: IFFALSE 56117
// for i = 1 to apemans do
55996: LD_ADDR_VAR 0 11
56000: PUSH
56001: DOUBLE
56002: LD_INT 1
56004: DEC
56005: ST_TO_ADDR
56006: LD_VAR 0 3
56010: PUSH
56011: FOR_TO
56012: IFFALSE 56115
// begin hc_class = class_apeman ;
56014: LD_ADDR_OWVAR 28
56018: PUSH
56019: LD_INT 12
56021: ST_TO_ADDR
// hc_gallery =  ;
56022: LD_ADDR_OWVAR 33
56026: PUSH
56027: LD_STRING 
56029: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56030: LD_ADDR_OWVAR 35
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PPUSH
56039: LD_INT 2
56041: PPUSH
56042: CALL_OW 12
56046: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56047: LD_ADDR_OWVAR 31
56051: PUSH
56052: LD_INT 1
56054: PPUSH
56055: LD_INT 3
56057: PPUSH
56058: CALL_OW 12
56062: PUSH
56063: LD_INT 1
56065: PPUSH
56066: LD_INT 3
56068: PPUSH
56069: CALL_OW 12
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: ST_TO_ADDR
// animal := CreateHuman ;
56086: LD_ADDR_VAR 0 12
56090: PUSH
56091: CALL_OW 44
56095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56096: LD_VAR 0 12
56100: PPUSH
56101: LD_VAR 0 8
56105: PPUSH
56106: LD_INT 0
56108: PPUSH
56109: CALL 57948 0 3
// end ;
56113: GO 56011
56115: POP
56116: POP
// if enchidnas then
56117: LD_VAR 0 4
56121: IFFALSE 56188
// for i = 1 to enchidnas do
56123: LD_ADDR_VAR 0 11
56127: PUSH
56128: DOUBLE
56129: LD_INT 1
56131: DEC
56132: ST_TO_ADDR
56133: LD_VAR 0 4
56137: PUSH
56138: FOR_TO
56139: IFFALSE 56186
// begin hc_class = 13 ;
56141: LD_ADDR_OWVAR 28
56145: PUSH
56146: LD_INT 13
56148: ST_TO_ADDR
// hc_gallery =  ;
56149: LD_ADDR_OWVAR 33
56153: PUSH
56154: LD_STRING 
56156: ST_TO_ADDR
// animal := CreateHuman ;
56157: LD_ADDR_VAR 0 12
56161: PUSH
56162: CALL_OW 44
56166: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56167: LD_VAR 0 12
56171: PPUSH
56172: LD_VAR 0 8
56176: PPUSH
56177: LD_INT 0
56179: PPUSH
56180: CALL 57948 0 3
// end ;
56184: GO 56138
56186: POP
56187: POP
// if fishes then
56188: LD_VAR 0 7
56192: IFFALSE 56259
// for i = 1 to fishes do
56194: LD_ADDR_VAR 0 11
56198: PUSH
56199: DOUBLE
56200: LD_INT 1
56202: DEC
56203: ST_TO_ADDR
56204: LD_VAR 0 7
56208: PUSH
56209: FOR_TO
56210: IFFALSE 56257
// begin hc_class = 20 ;
56212: LD_ADDR_OWVAR 28
56216: PUSH
56217: LD_INT 20
56219: ST_TO_ADDR
// hc_gallery =  ;
56220: LD_ADDR_OWVAR 33
56224: PUSH
56225: LD_STRING 
56227: ST_TO_ADDR
// animal := CreateHuman ;
56228: LD_ADDR_VAR 0 12
56232: PUSH
56233: CALL_OW 44
56237: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56238: LD_VAR 0 12
56242: PPUSH
56243: LD_VAR 0 9
56247: PPUSH
56248: LD_INT 0
56250: PPUSH
56251: CALL 57948 0 3
// end ;
56255: GO 56209
56257: POP
56258: POP
// end ;
56259: LD_VAR 0 10
56263: RET
// export function WantHeal ( sci , unit ) ; begin
56264: LD_INT 0
56266: PPUSH
// if GetTaskList ( sci ) > 0 then
56267: LD_VAR 0 1
56271: PPUSH
56272: CALL_OW 437
56276: PUSH
56277: LD_INT 0
56279: GREATER
56280: IFFALSE 56350
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56282: LD_VAR 0 1
56286: PPUSH
56287: CALL_OW 437
56291: PUSH
56292: LD_INT 1
56294: ARRAY
56295: PUSH
56296: LD_INT 1
56298: ARRAY
56299: PUSH
56300: LD_STRING l
56302: EQUAL
56303: PUSH
56304: LD_VAR 0 1
56308: PPUSH
56309: CALL_OW 437
56313: PUSH
56314: LD_INT 1
56316: ARRAY
56317: PUSH
56318: LD_INT 4
56320: ARRAY
56321: PUSH
56322: LD_VAR 0 2
56326: EQUAL
56327: AND
56328: IFFALSE 56340
// result := true else
56330: LD_ADDR_VAR 0 3
56334: PUSH
56335: LD_INT 1
56337: ST_TO_ADDR
56338: GO 56348
// result := false ;
56340: LD_ADDR_VAR 0 3
56344: PUSH
56345: LD_INT 0
56347: ST_TO_ADDR
// end else
56348: GO 56358
// result := false ;
56350: LD_ADDR_VAR 0 3
56354: PUSH
56355: LD_INT 0
56357: ST_TO_ADDR
// end ;
56358: LD_VAR 0 3
56362: RET
// export function HealTarget ( sci ) ; begin
56363: LD_INT 0
56365: PPUSH
// if not sci then
56366: LD_VAR 0 1
56370: NOT
56371: IFFALSE 56375
// exit ;
56373: GO 56440
// result := 0 ;
56375: LD_ADDR_VAR 0 2
56379: PUSH
56380: LD_INT 0
56382: ST_TO_ADDR
// if GetTaskList ( sci ) then
56383: LD_VAR 0 1
56387: PPUSH
56388: CALL_OW 437
56392: IFFALSE 56440
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56394: LD_VAR 0 1
56398: PPUSH
56399: CALL_OW 437
56403: PUSH
56404: LD_INT 1
56406: ARRAY
56407: PUSH
56408: LD_INT 1
56410: ARRAY
56411: PUSH
56412: LD_STRING l
56414: EQUAL
56415: IFFALSE 56440
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56417: LD_ADDR_VAR 0 2
56421: PUSH
56422: LD_VAR 0 1
56426: PPUSH
56427: CALL_OW 437
56431: PUSH
56432: LD_INT 1
56434: ARRAY
56435: PUSH
56436: LD_INT 4
56438: ARRAY
56439: ST_TO_ADDR
// end ;
56440: LD_VAR 0 2
56444: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56445: LD_INT 0
56447: PPUSH
56448: PPUSH
56449: PPUSH
56450: PPUSH
// if not base_units then
56451: LD_VAR 0 1
56455: NOT
56456: IFFALSE 56460
// exit ;
56458: GO 56547
// result := false ;
56460: LD_ADDR_VAR 0 2
56464: PUSH
56465: LD_INT 0
56467: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56468: LD_ADDR_VAR 0 5
56472: PUSH
56473: LD_VAR 0 1
56477: PPUSH
56478: LD_INT 21
56480: PUSH
56481: LD_INT 3
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PPUSH
56488: CALL_OW 72
56492: ST_TO_ADDR
// if not tmp then
56493: LD_VAR 0 5
56497: NOT
56498: IFFALSE 56502
// exit ;
56500: GO 56547
// for i in tmp do
56502: LD_ADDR_VAR 0 3
56506: PUSH
56507: LD_VAR 0 5
56511: PUSH
56512: FOR_IN
56513: IFFALSE 56545
// begin result := EnemyInRange ( i , 22 ) ;
56515: LD_ADDR_VAR 0 2
56519: PUSH
56520: LD_VAR 0 3
56524: PPUSH
56525: LD_INT 22
56527: PPUSH
56528: CALL 54783 0 2
56532: ST_TO_ADDR
// if result then
56533: LD_VAR 0 2
56537: IFFALSE 56543
// exit ;
56539: POP
56540: POP
56541: GO 56547
// end ;
56543: GO 56512
56545: POP
56546: POP
// end ;
56547: LD_VAR 0 2
56551: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56552: LD_INT 0
56554: PPUSH
56555: PPUSH
// if not units then
56556: LD_VAR 0 1
56560: NOT
56561: IFFALSE 56565
// exit ;
56563: GO 56635
// result := [ ] ;
56565: LD_ADDR_VAR 0 3
56569: PUSH
56570: EMPTY
56571: ST_TO_ADDR
// for i in units do
56572: LD_ADDR_VAR 0 4
56576: PUSH
56577: LD_VAR 0 1
56581: PUSH
56582: FOR_IN
56583: IFFALSE 56633
// if GetTag ( i ) = tag then
56585: LD_VAR 0 4
56589: PPUSH
56590: CALL_OW 110
56594: PUSH
56595: LD_VAR 0 2
56599: EQUAL
56600: IFFALSE 56631
// result := Insert ( result , result + 1 , i ) ;
56602: LD_ADDR_VAR 0 3
56606: PUSH
56607: LD_VAR 0 3
56611: PPUSH
56612: LD_VAR 0 3
56616: PUSH
56617: LD_INT 1
56619: PLUS
56620: PPUSH
56621: LD_VAR 0 4
56625: PPUSH
56626: CALL_OW 2
56630: ST_TO_ADDR
56631: GO 56582
56633: POP
56634: POP
// end ;
56635: LD_VAR 0 3
56639: RET
// export function IsDriver ( un ) ; begin
56640: LD_INT 0
56642: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56643: LD_ADDR_VAR 0 2
56647: PUSH
56648: LD_VAR 0 1
56652: PUSH
56653: LD_INT 55
56655: PUSH
56656: EMPTY
56657: LIST
56658: PPUSH
56659: CALL_OW 69
56663: IN
56664: ST_TO_ADDR
// end ;
56665: LD_VAR 0 2
56669: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56670: LD_INT 0
56672: PPUSH
56673: PPUSH
// list := [ ] ;
56674: LD_ADDR_VAR 0 5
56678: PUSH
56679: EMPTY
56680: ST_TO_ADDR
// case d of 0 :
56681: LD_VAR 0 3
56685: PUSH
56686: LD_INT 0
56688: DOUBLE
56689: EQUAL
56690: IFTRUE 56694
56692: GO 56827
56694: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56695: LD_ADDR_VAR 0 5
56699: PUSH
56700: LD_VAR 0 1
56704: PUSH
56705: LD_INT 4
56707: MINUS
56708: PUSH
56709: LD_VAR 0 2
56713: PUSH
56714: LD_INT 4
56716: MINUS
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: LIST
56725: PUSH
56726: LD_VAR 0 1
56730: PUSH
56731: LD_INT 3
56733: MINUS
56734: PUSH
56735: LD_VAR 0 2
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: LIST
56747: PUSH
56748: LD_VAR 0 1
56752: PUSH
56753: LD_INT 4
56755: PLUS
56756: PUSH
56757: LD_VAR 0 2
56761: PUSH
56762: LD_INT 4
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: LIST
56769: PUSH
56770: LD_VAR 0 1
56774: PUSH
56775: LD_INT 3
56777: PLUS
56778: PUSH
56779: LD_VAR 0 2
56783: PUSH
56784: LD_INT 3
56786: PLUS
56787: PUSH
56788: LD_INT 5
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: PUSH
56796: LD_VAR 0 1
56800: PUSH
56801: LD_VAR 0 2
56805: PUSH
56806: LD_INT 4
56808: PLUS
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: ST_TO_ADDR
// end ; 1 :
56825: GO 57525
56827: LD_INT 1
56829: DOUBLE
56830: EQUAL
56831: IFTRUE 56835
56833: GO 56968
56835: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56836: LD_ADDR_VAR 0 5
56840: PUSH
56841: LD_VAR 0 1
56845: PUSH
56846: LD_VAR 0 2
56850: PUSH
56851: LD_INT 4
56853: MINUS
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: LIST
56862: PUSH
56863: LD_VAR 0 1
56867: PUSH
56868: LD_INT 3
56870: MINUS
56871: PUSH
56872: LD_VAR 0 2
56876: PUSH
56877: LD_INT 3
56879: MINUS
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: PUSH
56889: LD_VAR 0 1
56893: PUSH
56894: LD_INT 4
56896: MINUS
56897: PUSH
56898: LD_VAR 0 2
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: PUSH
56911: LD_VAR 0 1
56915: PUSH
56916: LD_VAR 0 2
56920: PUSH
56921: LD_INT 3
56923: PLUS
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: PUSH
56933: LD_VAR 0 1
56937: PUSH
56938: LD_INT 4
56940: PLUS
56941: PUSH
56942: LD_VAR 0 2
56946: PUSH
56947: LD_INT 4
56949: PLUS
56950: PUSH
56951: LD_INT 5
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: ST_TO_ADDR
// end ; 2 :
56966: GO 57525
56968: LD_INT 2
56970: DOUBLE
56971: EQUAL
56972: IFTRUE 56976
56974: GO 57105
56976: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56977: LD_ADDR_VAR 0 5
56981: PUSH
56982: LD_VAR 0 1
56986: PUSH
56987: LD_VAR 0 2
56991: PUSH
56992: LD_INT 3
56994: MINUS
56995: PUSH
56996: LD_INT 3
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: PUSH
57004: LD_VAR 0 1
57008: PUSH
57009: LD_INT 4
57011: PLUS
57012: PUSH
57013: LD_VAR 0 2
57017: PUSH
57018: LD_INT 4
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: LIST
57025: PUSH
57026: LD_VAR 0 1
57030: PUSH
57031: LD_VAR 0 2
57035: PUSH
57036: LD_INT 4
57038: PLUS
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: LIST
57047: PUSH
57048: LD_VAR 0 1
57052: PUSH
57053: LD_INT 3
57055: MINUS
57056: PUSH
57057: LD_VAR 0 2
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: LIST
57069: PUSH
57070: LD_VAR 0 1
57074: PUSH
57075: LD_INT 4
57077: MINUS
57078: PUSH
57079: LD_VAR 0 2
57083: PUSH
57084: LD_INT 4
57086: MINUS
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: LIST
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// end ; 3 :
57103: GO 57525
57105: LD_INT 3
57107: DOUBLE
57108: EQUAL
57109: IFTRUE 57113
57111: GO 57246
57113: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57114: LD_ADDR_VAR 0 5
57118: PUSH
57119: LD_VAR 0 1
57123: PUSH
57124: LD_INT 3
57126: PLUS
57127: PUSH
57128: LD_VAR 0 2
57132: PUSH
57133: LD_INT 4
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: PUSH
57141: LD_VAR 0 1
57145: PUSH
57146: LD_INT 4
57148: PLUS
57149: PUSH
57150: LD_VAR 0 2
57154: PUSH
57155: LD_INT 4
57157: PLUS
57158: PUSH
57159: LD_INT 5
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: PUSH
57167: LD_VAR 0 1
57171: PUSH
57172: LD_INT 4
57174: MINUS
57175: PUSH
57176: LD_VAR 0 2
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: LIST
57188: PUSH
57189: LD_VAR 0 1
57193: PUSH
57194: LD_VAR 0 2
57198: PUSH
57199: LD_INT 4
57201: MINUS
57202: PUSH
57203: LD_INT 3
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: LIST
57210: PUSH
57211: LD_VAR 0 1
57215: PUSH
57216: LD_INT 3
57218: MINUS
57219: PUSH
57220: LD_VAR 0 2
57224: PUSH
57225: LD_INT 3
57227: MINUS
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: ST_TO_ADDR
// end ; 4 :
57244: GO 57525
57246: LD_INT 4
57248: DOUBLE
57249: EQUAL
57250: IFTRUE 57254
57252: GO 57387
57254: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57255: LD_ADDR_VAR 0 5
57259: PUSH
57260: LD_VAR 0 1
57264: PUSH
57265: LD_VAR 0 2
57269: PUSH
57270: LD_INT 4
57272: PLUS
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: LIST
57281: PUSH
57282: LD_VAR 0 1
57286: PUSH
57287: LD_INT 3
57289: PLUS
57290: PUSH
57291: LD_VAR 0 2
57295: PUSH
57296: LD_INT 3
57298: PLUS
57299: PUSH
57300: LD_INT 5
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: LIST
57307: PUSH
57308: LD_VAR 0 1
57312: PUSH
57313: LD_INT 4
57315: PLUS
57316: PUSH
57317: LD_VAR 0 2
57321: PUSH
57322: LD_INT 4
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: LIST
57329: PUSH
57330: LD_VAR 0 1
57334: PUSH
57335: LD_VAR 0 2
57339: PUSH
57340: LD_INT 3
57342: MINUS
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: PUSH
57352: LD_VAR 0 1
57356: PUSH
57357: LD_INT 4
57359: MINUS
57360: PUSH
57361: LD_VAR 0 2
57365: PUSH
57366: LD_INT 4
57368: MINUS
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: LIST
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// end ; 5 :
57385: GO 57525
57387: LD_INT 5
57389: DOUBLE
57390: EQUAL
57391: IFTRUE 57395
57393: GO 57524
57395: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57396: LD_ADDR_VAR 0 5
57400: PUSH
57401: LD_VAR 0 1
57405: PUSH
57406: LD_INT 4
57408: MINUS
57409: PUSH
57410: LD_VAR 0 2
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: PUSH
57423: LD_VAR 0 1
57427: PUSH
57428: LD_VAR 0 2
57432: PUSH
57433: LD_INT 4
57435: MINUS
57436: PUSH
57437: LD_INT 3
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: LIST
57444: PUSH
57445: LD_VAR 0 1
57449: PUSH
57450: LD_INT 4
57452: PLUS
57453: PUSH
57454: LD_VAR 0 2
57458: PUSH
57459: LD_INT 4
57461: PLUS
57462: PUSH
57463: LD_INT 5
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: LIST
57470: PUSH
57471: LD_VAR 0 1
57475: PUSH
57476: LD_INT 3
57478: PLUS
57479: PUSH
57480: LD_VAR 0 2
57484: PUSH
57485: LD_INT 4
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: PUSH
57493: LD_VAR 0 1
57497: PUSH
57498: LD_VAR 0 2
57502: PUSH
57503: LD_INT 3
57505: PLUS
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: LIST
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// end ; end ;
57522: GO 57525
57524: POP
// result := list ;
57525: LD_ADDR_VAR 0 4
57529: PUSH
57530: LD_VAR 0 5
57534: ST_TO_ADDR
// end ;
57535: LD_VAR 0 4
57539: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57540: LD_INT 0
57542: PPUSH
57543: PPUSH
57544: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57545: LD_VAR 0 1
57549: NOT
57550: PUSH
57551: LD_VAR 0 2
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: LD_INT 4
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: IN
57574: NOT
57575: OR
57576: IFFALSE 57580
// exit ;
57578: GO 57672
// tmp := [ ] ;
57580: LD_ADDR_VAR 0 5
57584: PUSH
57585: EMPTY
57586: ST_TO_ADDR
// for i in units do
57587: LD_ADDR_VAR 0 4
57591: PUSH
57592: LD_VAR 0 1
57596: PUSH
57597: FOR_IN
57598: IFFALSE 57641
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57600: LD_ADDR_VAR 0 5
57604: PUSH
57605: LD_VAR 0 5
57609: PPUSH
57610: LD_VAR 0 5
57614: PUSH
57615: LD_INT 1
57617: PLUS
57618: PPUSH
57619: LD_VAR 0 4
57623: PPUSH
57624: LD_VAR 0 2
57628: PPUSH
57629: CALL_OW 259
57633: PPUSH
57634: CALL_OW 2
57638: ST_TO_ADDR
57639: GO 57597
57641: POP
57642: POP
// if not tmp then
57643: LD_VAR 0 5
57647: NOT
57648: IFFALSE 57652
// exit ;
57650: GO 57672
// result := SortListByListDesc ( units , tmp ) ;
57652: LD_ADDR_VAR 0 3
57656: PUSH
57657: LD_VAR 0 1
57661: PPUSH
57662: LD_VAR 0 5
57666: PPUSH
57667: CALL_OW 77
57671: ST_TO_ADDR
// end ;
57672: LD_VAR 0 3
57676: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57677: LD_INT 0
57679: PPUSH
57680: PPUSH
57681: PPUSH
// result := false ;
57682: LD_ADDR_VAR 0 3
57686: PUSH
57687: LD_INT 0
57689: ST_TO_ADDR
// x := GetX ( building ) ;
57690: LD_ADDR_VAR 0 4
57694: PUSH
57695: LD_VAR 0 2
57699: PPUSH
57700: CALL_OW 250
57704: ST_TO_ADDR
// y := GetY ( building ) ;
57705: LD_ADDR_VAR 0 5
57709: PUSH
57710: LD_VAR 0 2
57714: PPUSH
57715: CALL_OW 251
57719: ST_TO_ADDR
// if not building or not x or not y then
57720: LD_VAR 0 2
57724: NOT
57725: PUSH
57726: LD_VAR 0 4
57730: NOT
57731: OR
57732: PUSH
57733: LD_VAR 0 5
57737: NOT
57738: OR
57739: IFFALSE 57743
// exit ;
57741: GO 57835
// if GetTaskList ( unit ) then
57743: LD_VAR 0 1
57747: PPUSH
57748: CALL_OW 437
57752: IFFALSE 57835
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57754: LD_STRING e
57756: PUSH
57757: LD_VAR 0 1
57761: PPUSH
57762: CALL_OW 437
57766: PUSH
57767: LD_INT 1
57769: ARRAY
57770: PUSH
57771: LD_INT 1
57773: ARRAY
57774: EQUAL
57775: PUSH
57776: LD_VAR 0 4
57780: PUSH
57781: LD_VAR 0 1
57785: PPUSH
57786: CALL_OW 437
57790: PUSH
57791: LD_INT 1
57793: ARRAY
57794: PUSH
57795: LD_INT 2
57797: ARRAY
57798: EQUAL
57799: AND
57800: PUSH
57801: LD_VAR 0 5
57805: PUSH
57806: LD_VAR 0 1
57810: PPUSH
57811: CALL_OW 437
57815: PUSH
57816: LD_INT 1
57818: ARRAY
57819: PUSH
57820: LD_INT 3
57822: ARRAY
57823: EQUAL
57824: AND
57825: IFFALSE 57835
// result := true end ;
57827: LD_ADDR_VAR 0 3
57831: PUSH
57832: LD_INT 1
57834: ST_TO_ADDR
// end ;
57835: LD_VAR 0 3
57839: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57840: LD_INT 0
57842: PPUSH
// result := false ;
57843: LD_ADDR_VAR 0 4
57847: PUSH
57848: LD_INT 0
57850: ST_TO_ADDR
// if GetTaskList ( unit ) then
57851: LD_VAR 0 1
57855: PPUSH
57856: CALL_OW 437
57860: IFFALSE 57943
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57862: LD_STRING M
57864: PUSH
57865: LD_VAR 0 1
57869: PPUSH
57870: CALL_OW 437
57874: PUSH
57875: LD_INT 1
57877: ARRAY
57878: PUSH
57879: LD_INT 1
57881: ARRAY
57882: EQUAL
57883: PUSH
57884: LD_VAR 0 2
57888: PUSH
57889: LD_VAR 0 1
57893: PPUSH
57894: CALL_OW 437
57898: PUSH
57899: LD_INT 1
57901: ARRAY
57902: PUSH
57903: LD_INT 2
57905: ARRAY
57906: EQUAL
57907: AND
57908: PUSH
57909: LD_VAR 0 3
57913: PUSH
57914: LD_VAR 0 1
57918: PPUSH
57919: CALL_OW 437
57923: PUSH
57924: LD_INT 1
57926: ARRAY
57927: PUSH
57928: LD_INT 3
57930: ARRAY
57931: EQUAL
57932: AND
57933: IFFALSE 57943
// result := true ;
57935: LD_ADDR_VAR 0 4
57939: PUSH
57940: LD_INT 1
57942: ST_TO_ADDR
// end ; end ;
57943: LD_VAR 0 4
57947: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57948: LD_INT 0
57950: PPUSH
57951: PPUSH
57952: PPUSH
57953: PPUSH
// if not unit or not area then
57954: LD_VAR 0 1
57958: NOT
57959: PUSH
57960: LD_VAR 0 2
57964: NOT
57965: OR
57966: IFFALSE 57970
// exit ;
57968: GO 58134
// tmp := AreaToList ( area , i ) ;
57970: LD_ADDR_VAR 0 6
57974: PUSH
57975: LD_VAR 0 2
57979: PPUSH
57980: LD_VAR 0 5
57984: PPUSH
57985: CALL_OW 517
57989: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57990: LD_ADDR_VAR 0 5
57994: PUSH
57995: DOUBLE
57996: LD_INT 1
57998: DEC
57999: ST_TO_ADDR
58000: LD_VAR 0 6
58004: PUSH
58005: LD_INT 1
58007: ARRAY
58008: PUSH
58009: FOR_TO
58010: IFFALSE 58132
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58012: LD_ADDR_VAR 0 7
58016: PUSH
58017: LD_VAR 0 6
58021: PUSH
58022: LD_INT 1
58024: ARRAY
58025: PUSH
58026: LD_VAR 0 5
58030: ARRAY
58031: PUSH
58032: LD_VAR 0 6
58036: PUSH
58037: LD_INT 2
58039: ARRAY
58040: PUSH
58041: LD_VAR 0 5
58045: ARRAY
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58051: LD_VAR 0 7
58055: PUSH
58056: LD_INT 1
58058: ARRAY
58059: PPUSH
58060: LD_VAR 0 7
58064: PUSH
58065: LD_INT 2
58067: ARRAY
58068: PPUSH
58069: CALL_OW 428
58073: PUSH
58074: LD_INT 0
58076: EQUAL
58077: IFFALSE 58130
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58079: LD_VAR 0 1
58083: PPUSH
58084: LD_VAR 0 7
58088: PUSH
58089: LD_INT 1
58091: ARRAY
58092: PPUSH
58093: LD_VAR 0 7
58097: PUSH
58098: LD_INT 2
58100: ARRAY
58101: PPUSH
58102: LD_VAR 0 3
58106: PPUSH
58107: CALL_OW 48
// result := IsPlaced ( unit ) ;
58111: LD_ADDR_VAR 0 4
58115: PUSH
58116: LD_VAR 0 1
58120: PPUSH
58121: CALL_OW 305
58125: ST_TO_ADDR
// exit ;
58126: POP
58127: POP
58128: GO 58134
// end ; end ;
58130: GO 58009
58132: POP
58133: POP
// end ;
58134: LD_VAR 0 4
58138: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58139: LD_INT 0
58141: PPUSH
58142: PPUSH
58143: PPUSH
// if not side or side > 8 then
58144: LD_VAR 0 1
58148: NOT
58149: PUSH
58150: LD_VAR 0 1
58154: PUSH
58155: LD_INT 8
58157: GREATER
58158: OR
58159: IFFALSE 58163
// exit ;
58161: GO 58350
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58163: LD_ADDR_VAR 0 4
58167: PUSH
58168: LD_INT 22
58170: PUSH
58171: LD_VAR 0 1
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 21
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PPUSH
58194: CALL_OW 69
58198: ST_TO_ADDR
// if not tmp then
58199: LD_VAR 0 4
58203: NOT
58204: IFFALSE 58208
// exit ;
58206: GO 58350
// enable_addtolog := true ;
58208: LD_ADDR_OWVAR 81
58212: PUSH
58213: LD_INT 1
58215: ST_TO_ADDR
// AddToLog ( [ ) ;
58216: LD_STRING [
58218: PPUSH
58219: CALL_OW 561
// for i in tmp do
58223: LD_ADDR_VAR 0 3
58227: PUSH
58228: LD_VAR 0 4
58232: PUSH
58233: FOR_IN
58234: IFFALSE 58341
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58236: LD_STRING [
58238: PUSH
58239: LD_VAR 0 3
58243: PPUSH
58244: CALL_OW 266
58248: STR
58249: PUSH
58250: LD_STRING , 
58252: STR
58253: PUSH
58254: LD_VAR 0 3
58258: PPUSH
58259: CALL_OW 250
58263: STR
58264: PUSH
58265: LD_STRING , 
58267: STR
58268: PUSH
58269: LD_VAR 0 3
58273: PPUSH
58274: CALL_OW 251
58278: STR
58279: PUSH
58280: LD_STRING , 
58282: STR
58283: PUSH
58284: LD_VAR 0 3
58288: PPUSH
58289: CALL_OW 254
58293: STR
58294: PUSH
58295: LD_STRING , 
58297: STR
58298: PUSH
58299: LD_VAR 0 3
58303: PPUSH
58304: LD_INT 1
58306: PPUSH
58307: CALL_OW 268
58311: STR
58312: PUSH
58313: LD_STRING , 
58315: STR
58316: PUSH
58317: LD_VAR 0 3
58321: PPUSH
58322: LD_INT 2
58324: PPUSH
58325: CALL_OW 268
58329: STR
58330: PUSH
58331: LD_STRING ],
58333: STR
58334: PPUSH
58335: CALL_OW 561
// end ;
58339: GO 58233
58341: POP
58342: POP
// AddToLog ( ]; ) ;
58343: LD_STRING ];
58345: PPUSH
58346: CALL_OW 561
// end ;
58350: LD_VAR 0 2
58354: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58355: LD_INT 0
58357: PPUSH
58358: PPUSH
58359: PPUSH
58360: PPUSH
58361: PPUSH
// if not area or not rate or not max then
58362: LD_VAR 0 1
58366: NOT
58367: PUSH
58368: LD_VAR 0 2
58372: NOT
58373: OR
58374: PUSH
58375: LD_VAR 0 4
58379: NOT
58380: OR
58381: IFFALSE 58385
// exit ;
58383: GO 58577
// while 1 do
58385: LD_INT 1
58387: IFFALSE 58577
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58389: LD_ADDR_VAR 0 9
58393: PUSH
58394: LD_VAR 0 1
58398: PPUSH
58399: LD_INT 1
58401: PPUSH
58402: CALL_OW 287
58406: PUSH
58407: LD_INT 10
58409: MUL
58410: ST_TO_ADDR
// r := rate / 10 ;
58411: LD_ADDR_VAR 0 7
58415: PUSH
58416: LD_VAR 0 2
58420: PUSH
58421: LD_INT 10
58423: DIVREAL
58424: ST_TO_ADDR
// time := 1 1$00 ;
58425: LD_ADDR_VAR 0 8
58429: PUSH
58430: LD_INT 2100
58432: ST_TO_ADDR
// if amount < min then
58433: LD_VAR 0 9
58437: PUSH
58438: LD_VAR 0 3
58442: LESS
58443: IFFALSE 58461
// r := r * 2 else
58445: LD_ADDR_VAR 0 7
58449: PUSH
58450: LD_VAR 0 7
58454: PUSH
58455: LD_INT 2
58457: MUL
58458: ST_TO_ADDR
58459: GO 58487
// if amount > max then
58461: LD_VAR 0 9
58465: PUSH
58466: LD_VAR 0 4
58470: GREATER
58471: IFFALSE 58487
// r := r / 2 ;
58473: LD_ADDR_VAR 0 7
58477: PUSH
58478: LD_VAR 0 7
58482: PUSH
58483: LD_INT 2
58485: DIVREAL
58486: ST_TO_ADDR
// time := time / r ;
58487: LD_ADDR_VAR 0 8
58491: PUSH
58492: LD_VAR 0 8
58496: PUSH
58497: LD_VAR 0 7
58501: DIVREAL
58502: ST_TO_ADDR
// if time < 0 then
58503: LD_VAR 0 8
58507: PUSH
58508: LD_INT 0
58510: LESS
58511: IFFALSE 58528
// time := time * - 1 ;
58513: LD_ADDR_VAR 0 8
58517: PUSH
58518: LD_VAR 0 8
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: MUL
58527: ST_TO_ADDR
// wait ( time ) ;
58528: LD_VAR 0 8
58532: PPUSH
58533: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58537: LD_INT 35
58539: PPUSH
58540: LD_INT 875
58542: PPUSH
58543: CALL_OW 12
58547: PPUSH
58548: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58552: LD_INT 1
58554: PPUSH
58555: LD_INT 5
58557: PPUSH
58558: CALL_OW 12
58562: PPUSH
58563: LD_VAR 0 1
58567: PPUSH
58568: LD_INT 1
58570: PPUSH
58571: CALL_OW 55
// end ;
58575: GO 58385
// end ;
58577: LD_VAR 0 5
58581: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58582: LD_INT 0
58584: PPUSH
58585: PPUSH
58586: PPUSH
58587: PPUSH
58588: PPUSH
58589: PPUSH
58590: PPUSH
58591: PPUSH
// if not turrets or not factories then
58592: LD_VAR 0 1
58596: NOT
58597: PUSH
58598: LD_VAR 0 2
58602: NOT
58603: OR
58604: IFFALSE 58608
// exit ;
58606: GO 58915
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58608: LD_ADDR_VAR 0 10
58612: PUSH
58613: LD_INT 5
58615: PUSH
58616: LD_INT 6
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: LD_INT 4
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: LD_INT 5
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 24
58650: PUSH
58651: LD_INT 25
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 23
58660: PUSH
58661: LD_INT 27
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 42
58674: PUSH
58675: LD_INT 43
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 44
58684: PUSH
58685: LD_INT 46
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 45
58694: PUSH
58695: LD_INT 47
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: LIST
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: LIST
58711: ST_TO_ADDR
// result := [ ] ;
58712: LD_ADDR_VAR 0 3
58716: PUSH
58717: EMPTY
58718: ST_TO_ADDR
// for i in turrets do
58719: LD_ADDR_VAR 0 4
58723: PUSH
58724: LD_VAR 0 1
58728: PUSH
58729: FOR_IN
58730: IFFALSE 58913
// begin nat := GetNation ( i ) ;
58732: LD_ADDR_VAR 0 7
58736: PUSH
58737: LD_VAR 0 4
58741: PPUSH
58742: CALL_OW 248
58746: ST_TO_ADDR
// weapon := 0 ;
58747: LD_ADDR_VAR 0 8
58751: PUSH
58752: LD_INT 0
58754: ST_TO_ADDR
// if not nat then
58755: LD_VAR 0 7
58759: NOT
58760: IFFALSE 58764
// continue ;
58762: GO 58729
// for j in list [ nat ] do
58764: LD_ADDR_VAR 0 5
58768: PUSH
58769: LD_VAR 0 10
58773: PUSH
58774: LD_VAR 0 7
58778: ARRAY
58779: PUSH
58780: FOR_IN
58781: IFFALSE 58822
// if GetBWeapon ( i ) = j [ 1 ] then
58783: LD_VAR 0 4
58787: PPUSH
58788: CALL_OW 269
58792: PUSH
58793: LD_VAR 0 5
58797: PUSH
58798: LD_INT 1
58800: ARRAY
58801: EQUAL
58802: IFFALSE 58820
// begin weapon := j [ 2 ] ;
58804: LD_ADDR_VAR 0 8
58808: PUSH
58809: LD_VAR 0 5
58813: PUSH
58814: LD_INT 2
58816: ARRAY
58817: ST_TO_ADDR
// break ;
58818: GO 58822
// end ;
58820: GO 58780
58822: POP
58823: POP
// if not weapon then
58824: LD_VAR 0 8
58828: NOT
58829: IFFALSE 58833
// continue ;
58831: GO 58729
// for k in factories do
58833: LD_ADDR_VAR 0 6
58837: PUSH
58838: LD_VAR 0 2
58842: PUSH
58843: FOR_IN
58844: IFFALSE 58909
// begin weapons := AvailableWeaponList ( k ) ;
58846: LD_ADDR_VAR 0 9
58850: PUSH
58851: LD_VAR 0 6
58855: PPUSH
58856: CALL_OW 478
58860: ST_TO_ADDR
// if not weapons then
58861: LD_VAR 0 9
58865: NOT
58866: IFFALSE 58870
// continue ;
58868: GO 58843
// if weapon in weapons then
58870: LD_VAR 0 8
58874: PUSH
58875: LD_VAR 0 9
58879: IN
58880: IFFALSE 58907
// begin result := [ i , weapon ] ;
58882: LD_ADDR_VAR 0 3
58886: PUSH
58887: LD_VAR 0 4
58891: PUSH
58892: LD_VAR 0 8
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: ST_TO_ADDR
// exit ;
58901: POP
58902: POP
58903: POP
58904: POP
58905: GO 58915
// end ; end ;
58907: GO 58843
58909: POP
58910: POP
// end ;
58911: GO 58729
58913: POP
58914: POP
// end ;
58915: LD_VAR 0 3
58919: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58920: LD_INT 0
58922: PPUSH
// if not side or side > 8 then
58923: LD_VAR 0 3
58927: NOT
58928: PUSH
58929: LD_VAR 0 3
58933: PUSH
58934: LD_INT 8
58936: GREATER
58937: OR
58938: IFFALSE 58942
// exit ;
58940: GO 59001
// if not range then
58942: LD_VAR 0 4
58946: NOT
58947: IFFALSE 58958
// range := - 12 ;
58949: LD_ADDR_VAR 0 4
58953: PUSH
58954: LD_INT 12
58956: NEG
58957: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58958: LD_VAR 0 1
58962: PPUSH
58963: LD_VAR 0 2
58967: PPUSH
58968: LD_VAR 0 3
58972: PPUSH
58973: LD_VAR 0 4
58977: PPUSH
58978: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58982: LD_VAR 0 1
58986: PPUSH
58987: LD_VAR 0 2
58991: PPUSH
58992: LD_VAR 0 3
58996: PPUSH
58997: CALL_OW 331
// end ;
59001: LD_VAR 0 5
59005: RET
// export function Video ( mode ) ; begin
59006: LD_INT 0
59008: PPUSH
// ingame_video = mode ;
59009: LD_ADDR_OWVAR 52
59013: PUSH
59014: LD_VAR 0 1
59018: ST_TO_ADDR
// interface_hidden = mode ;
59019: LD_ADDR_OWVAR 54
59023: PUSH
59024: LD_VAR 0 1
59028: ST_TO_ADDR
// end ;
59029: LD_VAR 0 2
59033: RET
// export function Join ( array , element ) ; begin
59034: LD_INT 0
59036: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59037: LD_ADDR_VAR 0 3
59041: PUSH
59042: LD_VAR 0 1
59046: PPUSH
59047: LD_VAR 0 1
59051: PUSH
59052: LD_INT 1
59054: PLUS
59055: PPUSH
59056: LD_VAR 0 2
59060: PPUSH
59061: CALL_OW 1
59065: ST_TO_ADDR
// end ;
59066: LD_VAR 0 3
59070: RET
// export function JoinUnion ( array , element ) ; begin
59071: LD_INT 0
59073: PPUSH
// result := array union element ;
59074: LD_ADDR_VAR 0 3
59078: PUSH
59079: LD_VAR 0 1
59083: PUSH
59084: LD_VAR 0 2
59088: UNION
59089: ST_TO_ADDR
// end ;
59090: LD_VAR 0 3
59094: RET
// export function GetBehemoths ( side ) ; begin
59095: LD_INT 0
59097: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59098: LD_ADDR_VAR 0 2
59102: PUSH
59103: LD_INT 22
59105: PUSH
59106: LD_VAR 0 1
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 31
59117: PUSH
59118: LD_INT 25
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PPUSH
59129: CALL_OW 69
59133: ST_TO_ADDR
// end ;
59134: LD_VAR 0 2
59138: RET
// export function Shuffle ( array ) ; var i , index ; begin
59139: LD_INT 0
59141: PPUSH
59142: PPUSH
59143: PPUSH
// result := [ ] ;
59144: LD_ADDR_VAR 0 2
59148: PUSH
59149: EMPTY
59150: ST_TO_ADDR
// if not array then
59151: LD_VAR 0 1
59155: NOT
59156: IFFALSE 59160
// exit ;
59158: GO 59259
// Randomize ;
59160: CALL_OW 10
// for i = array downto 1 do
59164: LD_ADDR_VAR 0 3
59168: PUSH
59169: DOUBLE
59170: LD_VAR 0 1
59174: INC
59175: ST_TO_ADDR
59176: LD_INT 1
59178: PUSH
59179: FOR_DOWNTO
59180: IFFALSE 59257
// begin index := rand ( 1 , array ) ;
59182: LD_ADDR_VAR 0 4
59186: PUSH
59187: LD_INT 1
59189: PPUSH
59190: LD_VAR 0 1
59194: PPUSH
59195: CALL_OW 12
59199: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59200: LD_ADDR_VAR 0 2
59204: PUSH
59205: LD_VAR 0 2
59209: PPUSH
59210: LD_VAR 0 2
59214: PUSH
59215: LD_INT 1
59217: PLUS
59218: PPUSH
59219: LD_VAR 0 1
59223: PUSH
59224: LD_VAR 0 4
59228: ARRAY
59229: PPUSH
59230: CALL_OW 2
59234: ST_TO_ADDR
// array := Delete ( array , index ) ;
59235: LD_ADDR_VAR 0 1
59239: PUSH
59240: LD_VAR 0 1
59244: PPUSH
59245: LD_VAR 0 4
59249: PPUSH
59250: CALL_OW 3
59254: ST_TO_ADDR
// end ;
59255: GO 59179
59257: POP
59258: POP
// end ;
59259: LD_VAR 0 2
59263: RET
// export function GetBaseMaterials ( base ) ; begin
59264: LD_INT 0
59266: PPUSH
// result := [ 0 , 0 , 0 ] ;
59267: LD_ADDR_VAR 0 2
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: LIST
59285: ST_TO_ADDR
// if not base then
59286: LD_VAR 0 1
59290: NOT
59291: IFFALSE 59295
// exit ;
59293: GO 59344
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59295: LD_ADDR_VAR 0 2
59299: PUSH
59300: LD_VAR 0 1
59304: PPUSH
59305: LD_INT 1
59307: PPUSH
59308: CALL_OW 275
59312: PUSH
59313: LD_VAR 0 1
59317: PPUSH
59318: LD_INT 2
59320: PPUSH
59321: CALL_OW 275
59325: PUSH
59326: LD_VAR 0 1
59330: PPUSH
59331: LD_INT 3
59333: PPUSH
59334: CALL_OW 275
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: ST_TO_ADDR
// end ;
59344: LD_VAR 0 2
59348: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59349: LD_INT 0
59351: PPUSH
59352: PPUSH
// result := array ;
59353: LD_ADDR_VAR 0 3
59357: PUSH
59358: LD_VAR 0 1
59362: ST_TO_ADDR
// if size > 0 then
59363: LD_VAR 0 2
59367: PUSH
59368: LD_INT 0
59370: GREATER
59371: IFFALSE 59417
// for i := array downto size do
59373: LD_ADDR_VAR 0 4
59377: PUSH
59378: DOUBLE
59379: LD_VAR 0 1
59383: INC
59384: ST_TO_ADDR
59385: LD_VAR 0 2
59389: PUSH
59390: FOR_DOWNTO
59391: IFFALSE 59415
// result := Delete ( result , result ) ;
59393: LD_ADDR_VAR 0 3
59397: PUSH
59398: LD_VAR 0 3
59402: PPUSH
59403: LD_VAR 0 3
59407: PPUSH
59408: CALL_OW 3
59412: ST_TO_ADDR
59413: GO 59390
59415: POP
59416: POP
// end ;
59417: LD_VAR 0 3
59421: RET
// export function ComExit ( unit ) ; var tmp ; begin
59422: LD_INT 0
59424: PPUSH
59425: PPUSH
// if not IsInUnit ( unit ) then
59426: LD_VAR 0 1
59430: PPUSH
59431: CALL_OW 310
59435: NOT
59436: IFFALSE 59440
// exit ;
59438: GO 59500
// tmp := IsInUnit ( unit ) ;
59440: LD_ADDR_VAR 0 3
59444: PUSH
59445: LD_VAR 0 1
59449: PPUSH
59450: CALL_OW 310
59454: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59455: LD_VAR 0 3
59459: PPUSH
59460: CALL_OW 247
59464: PUSH
59465: LD_INT 2
59467: EQUAL
59468: IFFALSE 59481
// ComExitVehicle ( unit ) else
59470: LD_VAR 0 1
59474: PPUSH
59475: CALL_OW 121
59479: GO 59490
// ComExitBuilding ( unit ) ;
59481: LD_VAR 0 1
59485: PPUSH
59486: CALL_OW 122
// result := tmp ;
59490: LD_ADDR_VAR 0 2
59494: PUSH
59495: LD_VAR 0 3
59499: ST_TO_ADDR
// end ;
59500: LD_VAR 0 2
59504: RET
// export function ComExitAll ( units ) ; var i ; begin
59505: LD_INT 0
59507: PPUSH
59508: PPUSH
// if not units then
59509: LD_VAR 0 1
59513: NOT
59514: IFFALSE 59518
// exit ;
59516: GO 59544
// for i in units do
59518: LD_ADDR_VAR 0 3
59522: PUSH
59523: LD_VAR 0 1
59527: PUSH
59528: FOR_IN
59529: IFFALSE 59542
// ComExit ( i ) ;
59531: LD_VAR 0 3
59535: PPUSH
59536: CALL 59422 0 1
59540: GO 59528
59542: POP
59543: POP
// end ;
59544: LD_VAR 0 2
59548: RET
// export function ResetHc ; begin
59549: LD_INT 0
59551: PPUSH
// InitHc ;
59552: CALL_OW 19
// hc_importance := 0 ;
59556: LD_ADDR_OWVAR 32
59560: PUSH
59561: LD_INT 0
59563: ST_TO_ADDR
// end ;
59564: LD_VAR 0 1
59568: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59569: LD_INT 0
59571: PPUSH
59572: PPUSH
59573: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59574: LD_ADDR_VAR 0 6
59578: PUSH
59579: LD_VAR 0 1
59583: PUSH
59584: LD_VAR 0 3
59588: PLUS
59589: PUSH
59590: LD_INT 2
59592: DIV
59593: ST_TO_ADDR
// if _x < 0 then
59594: LD_VAR 0 6
59598: PUSH
59599: LD_INT 0
59601: LESS
59602: IFFALSE 59619
// _x := _x * - 1 ;
59604: LD_ADDR_VAR 0 6
59608: PUSH
59609: LD_VAR 0 6
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: MUL
59618: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59619: LD_ADDR_VAR 0 7
59623: PUSH
59624: LD_VAR 0 2
59628: PUSH
59629: LD_VAR 0 4
59633: PLUS
59634: PUSH
59635: LD_INT 2
59637: DIV
59638: ST_TO_ADDR
// if _y < 0 then
59639: LD_VAR 0 7
59643: PUSH
59644: LD_INT 0
59646: LESS
59647: IFFALSE 59664
// _y := _y * - 1 ;
59649: LD_ADDR_VAR 0 7
59653: PUSH
59654: LD_VAR 0 7
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: MUL
59663: ST_TO_ADDR
// result := [ _x , _y ] ;
59664: LD_ADDR_VAR 0 5
59668: PUSH
59669: LD_VAR 0 6
59673: PUSH
59674: LD_VAR 0 7
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: ST_TO_ADDR
// end ;
59683: LD_VAR 0 5
59687: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59688: LD_INT 0
59690: PPUSH
59691: PPUSH
59692: PPUSH
59693: PPUSH
// task := GetTaskList ( unit ) ;
59694: LD_ADDR_VAR 0 7
59698: PUSH
59699: LD_VAR 0 1
59703: PPUSH
59704: CALL_OW 437
59708: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59709: LD_VAR 0 7
59713: NOT
59714: PUSH
59715: LD_VAR 0 1
59719: PPUSH
59720: LD_VAR 0 2
59724: PPUSH
59725: CALL_OW 308
59729: NOT
59730: AND
59731: IFFALSE 59735
// exit ;
59733: GO 59853
// if IsInArea ( unit , area ) then
59735: LD_VAR 0 1
59739: PPUSH
59740: LD_VAR 0 2
59744: PPUSH
59745: CALL_OW 308
59749: IFFALSE 59767
// begin ComMoveToArea ( unit , goAway ) ;
59751: LD_VAR 0 1
59755: PPUSH
59756: LD_VAR 0 3
59760: PPUSH
59761: CALL_OW 113
// exit ;
59765: GO 59853
// end ; if task [ 1 ] [ 1 ] <> M then
59767: LD_VAR 0 7
59771: PUSH
59772: LD_INT 1
59774: ARRAY
59775: PUSH
59776: LD_INT 1
59778: ARRAY
59779: PUSH
59780: LD_STRING M
59782: NONEQUAL
59783: IFFALSE 59787
// exit ;
59785: GO 59853
// x := task [ 1 ] [ 2 ] ;
59787: LD_ADDR_VAR 0 5
59791: PUSH
59792: LD_VAR 0 7
59796: PUSH
59797: LD_INT 1
59799: ARRAY
59800: PUSH
59801: LD_INT 2
59803: ARRAY
59804: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59805: LD_ADDR_VAR 0 6
59809: PUSH
59810: LD_VAR 0 7
59814: PUSH
59815: LD_INT 1
59817: ARRAY
59818: PUSH
59819: LD_INT 3
59821: ARRAY
59822: ST_TO_ADDR
// if InArea ( x , y , area ) then
59823: LD_VAR 0 5
59827: PPUSH
59828: LD_VAR 0 6
59832: PPUSH
59833: LD_VAR 0 2
59837: PPUSH
59838: CALL_OW 309
59842: IFFALSE 59853
// ComStop ( unit ) ;
59844: LD_VAR 0 1
59848: PPUSH
59849: CALL_OW 141
// end ;
59853: LD_VAR 0 4
59857: RET
// export function Abs ( value ) ; begin
59858: LD_INT 0
59860: PPUSH
// result := value ;
59861: LD_ADDR_VAR 0 2
59865: PUSH
59866: LD_VAR 0 1
59870: ST_TO_ADDR
// if value < 0 then
59871: LD_VAR 0 1
59875: PUSH
59876: LD_INT 0
59878: LESS
59879: IFFALSE 59896
// result := value * - 1 ;
59881: LD_ADDR_VAR 0 2
59885: PUSH
59886: LD_VAR 0 1
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: MUL
59895: ST_TO_ADDR
// end ;
59896: LD_VAR 0 2
59900: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59901: LD_INT 0
59903: PPUSH
59904: PPUSH
59905: PPUSH
59906: PPUSH
59907: PPUSH
59908: PPUSH
59909: PPUSH
59910: PPUSH
// if not unit or not building then
59911: LD_VAR 0 1
59915: NOT
59916: PUSH
59917: LD_VAR 0 2
59921: NOT
59922: OR
59923: IFFALSE 59927
// exit ;
59925: GO 60153
// x := GetX ( building ) ;
59927: LD_ADDR_VAR 0 4
59931: PUSH
59932: LD_VAR 0 2
59936: PPUSH
59937: CALL_OW 250
59941: ST_TO_ADDR
// y := GetY ( building ) ;
59942: LD_ADDR_VAR 0 6
59946: PUSH
59947: LD_VAR 0 2
59951: PPUSH
59952: CALL_OW 251
59956: ST_TO_ADDR
// d := GetDir ( building ) ;
59957: LD_ADDR_VAR 0 8
59961: PUSH
59962: LD_VAR 0 2
59966: PPUSH
59967: CALL_OW 254
59971: ST_TO_ADDR
// r := 4 ;
59972: LD_ADDR_VAR 0 9
59976: PUSH
59977: LD_INT 4
59979: ST_TO_ADDR
// for i := 1 to 5 do
59980: LD_ADDR_VAR 0 10
59984: PUSH
59985: DOUBLE
59986: LD_INT 1
59988: DEC
59989: ST_TO_ADDR
59990: LD_INT 5
59992: PUSH
59993: FOR_TO
59994: IFFALSE 60151
// begin _x := ShiftX ( x , d , r + i ) ;
59996: LD_ADDR_VAR 0 5
60000: PUSH
60001: LD_VAR 0 4
60005: PPUSH
60006: LD_VAR 0 8
60010: PPUSH
60011: LD_VAR 0 9
60015: PUSH
60016: LD_VAR 0 10
60020: PLUS
60021: PPUSH
60022: CALL_OW 272
60026: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60027: LD_ADDR_VAR 0 7
60031: PUSH
60032: LD_VAR 0 6
60036: PPUSH
60037: LD_VAR 0 8
60041: PPUSH
60042: LD_VAR 0 9
60046: PUSH
60047: LD_VAR 0 10
60051: PLUS
60052: PPUSH
60053: CALL_OW 273
60057: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60058: LD_VAR 0 5
60062: PPUSH
60063: LD_VAR 0 7
60067: PPUSH
60068: CALL_OW 488
60072: PUSH
60073: LD_VAR 0 5
60077: PPUSH
60078: LD_VAR 0 7
60082: PPUSH
60083: CALL_OW 428
60087: PPUSH
60088: CALL_OW 247
60092: PUSH
60093: LD_INT 3
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: IN
60103: NOT
60104: AND
60105: IFFALSE 60149
// begin ComMoveXY ( unit , _x , _y ) ;
60107: LD_VAR 0 1
60111: PPUSH
60112: LD_VAR 0 5
60116: PPUSH
60117: LD_VAR 0 7
60121: PPUSH
60122: CALL_OW 111
// result := [ _x , _y ] ;
60126: LD_ADDR_VAR 0 3
60130: PUSH
60131: LD_VAR 0 5
60135: PUSH
60136: LD_VAR 0 7
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: ST_TO_ADDR
// exit ;
60145: POP
60146: POP
60147: GO 60153
// end ; end ;
60149: GO 59993
60151: POP
60152: POP
// end ;
60153: LD_VAR 0 3
60157: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60158: LD_INT 0
60160: PPUSH
60161: PPUSH
60162: PPUSH
// result := 0 ;
60163: LD_ADDR_VAR 0 3
60167: PUSH
60168: LD_INT 0
60170: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60171: LD_VAR 0 1
60175: PUSH
60176: LD_INT 0
60178: LESS
60179: PUSH
60180: LD_VAR 0 1
60184: PUSH
60185: LD_INT 8
60187: GREATER
60188: OR
60189: PUSH
60190: LD_VAR 0 2
60194: PUSH
60195: LD_INT 0
60197: LESS
60198: OR
60199: PUSH
60200: LD_VAR 0 2
60204: PUSH
60205: LD_INT 8
60207: GREATER
60208: OR
60209: IFFALSE 60213
// exit ;
60211: GO 60288
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60213: LD_ADDR_VAR 0 4
60217: PUSH
60218: LD_INT 22
60220: PUSH
60221: LD_VAR 0 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PPUSH
60230: CALL_OW 69
60234: PUSH
60235: FOR_IN
60236: IFFALSE 60286
// begin un := UnitShoot ( i ) ;
60238: LD_ADDR_VAR 0 5
60242: PUSH
60243: LD_VAR 0 4
60247: PPUSH
60248: CALL_OW 504
60252: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60253: LD_VAR 0 5
60257: PPUSH
60258: CALL_OW 255
60262: PUSH
60263: LD_VAR 0 1
60267: EQUAL
60268: IFFALSE 60284
// begin result := un ;
60270: LD_ADDR_VAR 0 3
60274: PUSH
60275: LD_VAR 0 5
60279: ST_TO_ADDR
// exit ;
60280: POP
60281: POP
60282: GO 60288
// end ; end ;
60284: GO 60235
60286: POP
60287: POP
// end ;
60288: LD_VAR 0 3
60292: RET
// export function GetCargoBay ( units ) ; begin
60293: LD_INT 0
60295: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60296: LD_ADDR_VAR 0 2
60300: PUSH
60301: LD_VAR 0 1
60305: PPUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 34
60311: PUSH
60312: LD_INT 12
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 34
60321: PUSH
60322: LD_INT 51
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 34
60331: PUSH
60332: LD_INT 32
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 34
60341: PUSH
60342: LD_EXP 55
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: PPUSH
60358: CALL_OW 72
60362: ST_TO_ADDR
// end ;
60363: LD_VAR 0 2
60367: RET
// export function Negate ( value ) ; begin
60368: LD_INT 0
60370: PPUSH
// result := not value ;
60371: LD_ADDR_VAR 0 2
60375: PUSH
60376: LD_VAR 0 1
60380: NOT
60381: ST_TO_ADDR
// end ;
60382: LD_VAR 0 2
60386: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
60387: LD_INT 0
60389: PPUSH
// if x1 = x2 then
60390: LD_VAR 0 1
60394: PUSH
60395: LD_VAR 0 3
60399: EQUAL
60400: IFFALSE 60434
// begin if y1 > y2 then
60402: LD_VAR 0 2
60406: PUSH
60407: LD_VAR 0 4
60411: GREATER
60412: IFFALSE 60424
// result := 0 else
60414: LD_ADDR_VAR 0 5
60418: PUSH
60419: LD_INT 0
60421: ST_TO_ADDR
60422: GO 60432
// result := 3 ;
60424: LD_ADDR_VAR 0 5
60428: PUSH
60429: LD_INT 3
60431: ST_TO_ADDR
// exit ;
60432: GO 60520
// end ; if y1 = y2 then
60434: LD_VAR 0 2
60438: PUSH
60439: LD_VAR 0 4
60443: EQUAL
60444: IFFALSE 60478
// begin if x1 > x2 then
60446: LD_VAR 0 1
60450: PUSH
60451: LD_VAR 0 3
60455: GREATER
60456: IFFALSE 60468
// result := 1 else
60458: LD_ADDR_VAR 0 5
60462: PUSH
60463: LD_INT 1
60465: ST_TO_ADDR
60466: GO 60476
// result := 4 ;
60468: LD_ADDR_VAR 0 5
60472: PUSH
60473: LD_INT 4
60475: ST_TO_ADDR
// exit ;
60476: GO 60520
// end ; if x1 > x2 and y1 > y2 then
60478: LD_VAR 0 1
60482: PUSH
60483: LD_VAR 0 3
60487: GREATER
60488: PUSH
60489: LD_VAR 0 2
60493: PUSH
60494: LD_VAR 0 4
60498: GREATER
60499: AND
60500: IFFALSE 60512
// result := 2 else
60502: LD_ADDR_VAR 0 5
60506: PUSH
60507: LD_INT 2
60509: ST_TO_ADDR
60510: GO 60520
// result := 5 ;
60512: LD_ADDR_VAR 0 5
60516: PUSH
60517: LD_INT 5
60519: ST_TO_ADDR
// end ;
60520: LD_VAR 0 5
60524: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60525: LD_INT 0
60527: PPUSH
60528: PPUSH
// if not driver or not IsInUnit ( driver ) then
60529: LD_VAR 0 1
60533: NOT
60534: PUSH
60535: LD_VAR 0 1
60539: PPUSH
60540: CALL_OW 310
60544: NOT
60545: OR
60546: IFFALSE 60550
// exit ;
60548: GO 60640
// vehicle := IsInUnit ( driver ) ;
60550: LD_ADDR_VAR 0 3
60554: PUSH
60555: LD_VAR 0 1
60559: PPUSH
60560: CALL_OW 310
60564: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60565: LD_VAR 0 1
60569: PPUSH
60570: LD_STRING \
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: PUSH
60600: LD_STRING E
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: LD_VAR 0 3
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PPUSH
60636: CALL_OW 446
// end ;
60640: LD_VAR 0 2
60644: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60645: LD_INT 0
60647: PPUSH
60648: PPUSH
// if not driver or not IsInUnit ( driver ) then
60649: LD_VAR 0 1
60653: NOT
60654: PUSH
60655: LD_VAR 0 1
60659: PPUSH
60660: CALL_OW 310
60664: NOT
60665: OR
60666: IFFALSE 60670
// exit ;
60668: GO 60760
// vehicle := IsInUnit ( driver ) ;
60670: LD_ADDR_VAR 0 3
60674: PUSH
60675: LD_VAR 0 1
60679: PPUSH
60680: CALL_OW 310
60684: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60685: LD_VAR 0 1
60689: PPUSH
60690: LD_STRING \
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: PUSH
60720: LD_STRING E
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_VAR 0 3
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PPUSH
60756: CALL_OW 447
// end ;
60760: LD_VAR 0 2
60764: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60765: LD_INT 0
60767: PPUSH
60768: PPUSH
60769: PPUSH
// tmp := [ ] ;
60770: LD_ADDR_VAR 0 5
60774: PUSH
60775: EMPTY
60776: ST_TO_ADDR
// for i in units do
60777: LD_ADDR_VAR 0 4
60781: PUSH
60782: LD_VAR 0 1
60786: PUSH
60787: FOR_IN
60788: IFFALSE 60826
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60790: LD_ADDR_VAR 0 5
60794: PUSH
60795: LD_VAR 0 5
60799: PPUSH
60800: LD_VAR 0 5
60804: PUSH
60805: LD_INT 1
60807: PLUS
60808: PPUSH
60809: LD_VAR 0 4
60813: PPUSH
60814: CALL_OW 256
60818: PPUSH
60819: CALL_OW 2
60823: ST_TO_ADDR
60824: GO 60787
60826: POP
60827: POP
// if not tmp then
60828: LD_VAR 0 5
60832: NOT
60833: IFFALSE 60837
// exit ;
60835: GO 60885
// if asc then
60837: LD_VAR 0 2
60841: IFFALSE 60865
// result := SortListByListAsc ( units , tmp ) else
60843: LD_ADDR_VAR 0 3
60847: PUSH
60848: LD_VAR 0 1
60852: PPUSH
60853: LD_VAR 0 5
60857: PPUSH
60858: CALL_OW 76
60862: ST_TO_ADDR
60863: GO 60885
// result := SortListByListDesc ( units , tmp ) ;
60865: LD_ADDR_VAR 0 3
60869: PUSH
60870: LD_VAR 0 1
60874: PPUSH
60875: LD_VAR 0 5
60879: PPUSH
60880: CALL_OW 77
60884: ST_TO_ADDR
// end ;
60885: LD_VAR 0 3
60889: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60890: LD_INT 0
60892: PPUSH
60893: PPUSH
// task := GetTaskList ( mech ) ;
60894: LD_ADDR_VAR 0 4
60898: PUSH
60899: LD_VAR 0 1
60903: PPUSH
60904: CALL_OW 437
60908: ST_TO_ADDR
// if not task then
60909: LD_VAR 0 4
60913: NOT
60914: IFFALSE 60918
// exit ;
60916: GO 60960
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60918: LD_ADDR_VAR 0 3
60922: PUSH
60923: LD_VAR 0 4
60927: PUSH
60928: LD_INT 1
60930: ARRAY
60931: PUSH
60932: LD_INT 1
60934: ARRAY
60935: PUSH
60936: LD_STRING r
60938: EQUAL
60939: PUSH
60940: LD_VAR 0 4
60944: PUSH
60945: LD_INT 1
60947: ARRAY
60948: PUSH
60949: LD_INT 4
60951: ARRAY
60952: PUSH
60953: LD_VAR 0 2
60957: EQUAL
60958: AND
60959: ST_TO_ADDR
// end ;
60960: LD_VAR 0 3
60964: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60965: LD_INT 0
60967: PPUSH
// SetDir ( unit , d ) ;
60968: LD_VAR 0 1
60972: PPUSH
60973: LD_VAR 0 4
60977: PPUSH
60978: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60982: LD_VAR 0 1
60986: PPUSH
60987: LD_VAR 0 2
60991: PPUSH
60992: LD_VAR 0 3
60996: PPUSH
60997: LD_VAR 0 5
61001: PPUSH
61002: CALL_OW 48
// end ;
61006: LD_VAR 0 6
61010: RET
// export function ToNaturalNumber ( number ) ; begin
61011: LD_INT 0
61013: PPUSH
// result := number div 1 ;
61014: LD_ADDR_VAR 0 2
61018: PUSH
61019: LD_VAR 0 1
61023: PUSH
61024: LD_INT 1
61026: DIV
61027: ST_TO_ADDR
// if number < 0 then
61028: LD_VAR 0 1
61032: PUSH
61033: LD_INT 0
61035: LESS
61036: IFFALSE 61046
// result := 0 ;
61038: LD_ADDR_VAR 0 2
61042: PUSH
61043: LD_INT 0
61045: ST_TO_ADDR
// end ; end_of_file
61046: LD_VAR 0 2
61050: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
61051: LD_INT 0
61053: PPUSH
// ar_miner := 81 ;
61054: LD_ADDR_EXP 61
61058: PUSH
61059: LD_INT 81
61061: ST_TO_ADDR
// ar_crane := 88 ;
61062: LD_ADDR_EXP 60
61066: PUSH
61067: LD_INT 88
61069: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
61070: LD_ADDR_EXP 55
61074: PUSH
61075: LD_INT 89
61077: ST_TO_ADDR
// us_hack := 99 ;
61078: LD_ADDR_EXP 56
61082: PUSH
61083: LD_INT 99
61085: ST_TO_ADDR
// us_artillery := 97 ;
61086: LD_ADDR_EXP 57
61090: PUSH
61091: LD_INT 97
61093: ST_TO_ADDR
// ar_bio_bomb := 91 ;
61094: LD_ADDR_EXP 58
61098: PUSH
61099: LD_INT 91
61101: ST_TO_ADDR
// ar_mortar := 92 ;
61102: LD_ADDR_EXP 59
61106: PUSH
61107: LD_INT 92
61109: ST_TO_ADDR
// ru_radar := 98 ;
61110: LD_ADDR_EXP 54
61114: PUSH
61115: LD_INT 98
61117: ST_TO_ADDR
// tech_Artillery := 80 ;
61118: LD_ADDR_EXP 62
61122: PUSH
61123: LD_INT 80
61125: ST_TO_ADDR
// tech_RadMat := 81 ;
61126: LD_ADDR_EXP 63
61130: PUSH
61131: LD_INT 81
61133: ST_TO_ADDR
// tech_BasicTools := 82 ;
61134: LD_ADDR_EXP 64
61138: PUSH
61139: LD_INT 82
61141: ST_TO_ADDR
// tech_Cargo := 83 ;
61142: LD_ADDR_EXP 65
61146: PUSH
61147: LD_INT 83
61149: ST_TO_ADDR
// tech_Track := 84 ;
61150: LD_ADDR_EXP 66
61154: PUSH
61155: LD_INT 84
61157: ST_TO_ADDR
// tech_Crane := 85 ;
61158: LD_ADDR_EXP 67
61162: PUSH
61163: LD_INT 85
61165: ST_TO_ADDR
// tech_Bulldozer := 86 ;
61166: LD_ADDR_EXP 68
61170: PUSH
61171: LD_INT 86
61173: ST_TO_ADDR
// tech_Hovercraft := 87 ;
61174: LD_ADDR_EXP 69
61178: PUSH
61179: LD_INT 87
61181: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
61182: LD_ADDR_EXP 70
61186: PUSH
61187: LD_INT 88
61189: ST_TO_ADDR
// class_mastodont := 31 ;
61190: LD_ADDR_EXP 71
61194: PUSH
61195: LD_INT 31
61197: ST_TO_ADDR
// class_horse := 21 ;
61198: LD_ADDR_EXP 72
61202: PUSH
61203: LD_INT 21
61205: ST_TO_ADDR
// end ;
61206: LD_VAR 0 1
61210: RET
// every 1 do
61211: GO 61213
61213: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
61214: CALL 61051 0 0
61218: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61219: LD_INT 0
61221: PPUSH
// if p2 = 100 then
61222: LD_VAR 0 2
61226: PUSH
61227: LD_INT 100
61229: EQUAL
61230: IFFALSE 62179
// begin if not StreamModeActive then
61232: LD_EXP 73
61236: NOT
61237: IFFALSE 61247
// StreamModeActive := true ;
61239: LD_ADDR_EXP 73
61243: PUSH
61244: LD_INT 1
61246: ST_TO_ADDR
// if p3 = 0 then
61247: LD_VAR 0 3
61251: PUSH
61252: LD_INT 0
61254: EQUAL
61255: IFFALSE 61261
// InitStreamMode ;
61257: CALL 62339 0 0
// if p3 = 1 then
61261: LD_VAR 0 3
61265: PUSH
61266: LD_INT 1
61268: EQUAL
61269: IFFALSE 61279
// sRocket := true ;
61271: LD_ADDR_EXP 78
61275: PUSH
61276: LD_INT 1
61278: ST_TO_ADDR
// if p3 = 2 then
61279: LD_VAR 0 3
61283: PUSH
61284: LD_INT 2
61286: EQUAL
61287: IFFALSE 61297
// sSpeed := true ;
61289: LD_ADDR_EXP 77
61293: PUSH
61294: LD_INT 1
61296: ST_TO_ADDR
// if p3 = 3 then
61297: LD_VAR 0 3
61301: PUSH
61302: LD_INT 3
61304: EQUAL
61305: IFFALSE 61315
// sEngine := true ;
61307: LD_ADDR_EXP 79
61311: PUSH
61312: LD_INT 1
61314: ST_TO_ADDR
// if p3 = 4 then
61315: LD_VAR 0 3
61319: PUSH
61320: LD_INT 4
61322: EQUAL
61323: IFFALSE 61333
// sSpec := true ;
61325: LD_ADDR_EXP 76
61329: PUSH
61330: LD_INT 1
61332: ST_TO_ADDR
// if p3 = 5 then
61333: LD_VAR 0 3
61337: PUSH
61338: LD_INT 5
61340: EQUAL
61341: IFFALSE 61351
// sLevel := true ;
61343: LD_ADDR_EXP 80
61347: PUSH
61348: LD_INT 1
61350: ST_TO_ADDR
// if p3 = 6 then
61351: LD_VAR 0 3
61355: PUSH
61356: LD_INT 6
61358: EQUAL
61359: IFFALSE 61369
// sArmoury := true ;
61361: LD_ADDR_EXP 81
61365: PUSH
61366: LD_INT 1
61368: ST_TO_ADDR
// if p3 = 7 then
61369: LD_VAR 0 3
61373: PUSH
61374: LD_INT 7
61376: EQUAL
61377: IFFALSE 61387
// sRadar := true ;
61379: LD_ADDR_EXP 82
61383: PUSH
61384: LD_INT 1
61386: ST_TO_ADDR
// if p3 = 8 then
61387: LD_VAR 0 3
61391: PUSH
61392: LD_INT 8
61394: EQUAL
61395: IFFALSE 61405
// sBunker := true ;
61397: LD_ADDR_EXP 83
61401: PUSH
61402: LD_INT 1
61404: ST_TO_ADDR
// if p3 = 9 then
61405: LD_VAR 0 3
61409: PUSH
61410: LD_INT 9
61412: EQUAL
61413: IFFALSE 61423
// sHack := true ;
61415: LD_ADDR_EXP 84
61419: PUSH
61420: LD_INT 1
61422: ST_TO_ADDR
// if p3 = 10 then
61423: LD_VAR 0 3
61427: PUSH
61428: LD_INT 10
61430: EQUAL
61431: IFFALSE 61441
// sFire := true ;
61433: LD_ADDR_EXP 85
61437: PUSH
61438: LD_INT 1
61440: ST_TO_ADDR
// if p3 = 11 then
61441: LD_VAR 0 3
61445: PUSH
61446: LD_INT 11
61448: EQUAL
61449: IFFALSE 61459
// sRefresh := true ;
61451: LD_ADDR_EXP 86
61455: PUSH
61456: LD_INT 1
61458: ST_TO_ADDR
// if p3 = 12 then
61459: LD_VAR 0 3
61463: PUSH
61464: LD_INT 12
61466: EQUAL
61467: IFFALSE 61477
// sExp := true ;
61469: LD_ADDR_EXP 87
61473: PUSH
61474: LD_INT 1
61476: ST_TO_ADDR
// if p3 = 13 then
61477: LD_VAR 0 3
61481: PUSH
61482: LD_INT 13
61484: EQUAL
61485: IFFALSE 61495
// sDepot := true ;
61487: LD_ADDR_EXP 88
61491: PUSH
61492: LD_INT 1
61494: ST_TO_ADDR
// if p3 = 14 then
61495: LD_VAR 0 3
61499: PUSH
61500: LD_INT 14
61502: EQUAL
61503: IFFALSE 61513
// sFlag := true ;
61505: LD_ADDR_EXP 89
61509: PUSH
61510: LD_INT 1
61512: ST_TO_ADDR
// if p3 = 15 then
61513: LD_VAR 0 3
61517: PUSH
61518: LD_INT 15
61520: EQUAL
61521: IFFALSE 61531
// sKamikadze := true ;
61523: LD_ADDR_EXP 97
61527: PUSH
61528: LD_INT 1
61530: ST_TO_ADDR
// if p3 = 16 then
61531: LD_VAR 0 3
61535: PUSH
61536: LD_INT 16
61538: EQUAL
61539: IFFALSE 61549
// sTroll := true ;
61541: LD_ADDR_EXP 98
61545: PUSH
61546: LD_INT 1
61548: ST_TO_ADDR
// if p3 = 17 then
61549: LD_VAR 0 3
61553: PUSH
61554: LD_INT 17
61556: EQUAL
61557: IFFALSE 61567
// sSlow := true ;
61559: LD_ADDR_EXP 99
61563: PUSH
61564: LD_INT 1
61566: ST_TO_ADDR
// if p3 = 18 then
61567: LD_VAR 0 3
61571: PUSH
61572: LD_INT 18
61574: EQUAL
61575: IFFALSE 61585
// sLack := true ;
61577: LD_ADDR_EXP 100
61581: PUSH
61582: LD_INT 1
61584: ST_TO_ADDR
// if p3 = 19 then
61585: LD_VAR 0 3
61589: PUSH
61590: LD_INT 19
61592: EQUAL
61593: IFFALSE 61603
// sTank := true ;
61595: LD_ADDR_EXP 102
61599: PUSH
61600: LD_INT 1
61602: ST_TO_ADDR
// if p3 = 20 then
61603: LD_VAR 0 3
61607: PUSH
61608: LD_INT 20
61610: EQUAL
61611: IFFALSE 61621
// sRemote := true ;
61613: LD_ADDR_EXP 103
61617: PUSH
61618: LD_INT 1
61620: ST_TO_ADDR
// if p3 = 21 then
61621: LD_VAR 0 3
61625: PUSH
61626: LD_INT 21
61628: EQUAL
61629: IFFALSE 61639
// sPowell := true ;
61631: LD_ADDR_EXP 104
61635: PUSH
61636: LD_INT 1
61638: ST_TO_ADDR
// if p3 = 22 then
61639: LD_VAR 0 3
61643: PUSH
61644: LD_INT 22
61646: EQUAL
61647: IFFALSE 61657
// sTeleport := true ;
61649: LD_ADDR_EXP 107
61653: PUSH
61654: LD_INT 1
61656: ST_TO_ADDR
// if p3 = 23 then
61657: LD_VAR 0 3
61661: PUSH
61662: LD_INT 23
61664: EQUAL
61665: IFFALSE 61675
// sOilTower := true ;
61667: LD_ADDR_EXP 109
61671: PUSH
61672: LD_INT 1
61674: ST_TO_ADDR
// if p3 = 24 then
61675: LD_VAR 0 3
61679: PUSH
61680: LD_INT 24
61682: EQUAL
61683: IFFALSE 61693
// sShovel := true ;
61685: LD_ADDR_EXP 110
61689: PUSH
61690: LD_INT 1
61692: ST_TO_ADDR
// if p3 = 25 then
61693: LD_VAR 0 3
61697: PUSH
61698: LD_INT 25
61700: EQUAL
61701: IFFALSE 61711
// sSheik := true ;
61703: LD_ADDR_EXP 111
61707: PUSH
61708: LD_INT 1
61710: ST_TO_ADDR
// if p3 = 26 then
61711: LD_VAR 0 3
61715: PUSH
61716: LD_INT 26
61718: EQUAL
61719: IFFALSE 61729
// sEarthquake := true ;
61721: LD_ADDR_EXP 113
61725: PUSH
61726: LD_INT 1
61728: ST_TO_ADDR
// if p3 = 27 then
61729: LD_VAR 0 3
61733: PUSH
61734: LD_INT 27
61736: EQUAL
61737: IFFALSE 61747
// sAI := true ;
61739: LD_ADDR_EXP 114
61743: PUSH
61744: LD_INT 1
61746: ST_TO_ADDR
// if p3 = 28 then
61747: LD_VAR 0 3
61751: PUSH
61752: LD_INT 28
61754: EQUAL
61755: IFFALSE 61765
// sCargo := true ;
61757: LD_ADDR_EXP 117
61761: PUSH
61762: LD_INT 1
61764: ST_TO_ADDR
// if p3 = 29 then
61765: LD_VAR 0 3
61769: PUSH
61770: LD_INT 29
61772: EQUAL
61773: IFFALSE 61783
// sDLaser := true ;
61775: LD_ADDR_EXP 118
61779: PUSH
61780: LD_INT 1
61782: ST_TO_ADDR
// if p3 = 30 then
61783: LD_VAR 0 3
61787: PUSH
61788: LD_INT 30
61790: EQUAL
61791: IFFALSE 61801
// sExchange := true ;
61793: LD_ADDR_EXP 119
61797: PUSH
61798: LD_INT 1
61800: ST_TO_ADDR
// if p3 = 31 then
61801: LD_VAR 0 3
61805: PUSH
61806: LD_INT 31
61808: EQUAL
61809: IFFALSE 61819
// sFac := true ;
61811: LD_ADDR_EXP 120
61815: PUSH
61816: LD_INT 1
61818: ST_TO_ADDR
// if p3 = 32 then
61819: LD_VAR 0 3
61823: PUSH
61824: LD_INT 32
61826: EQUAL
61827: IFFALSE 61837
// sPower := true ;
61829: LD_ADDR_EXP 121
61833: PUSH
61834: LD_INT 1
61836: ST_TO_ADDR
// if p3 = 33 then
61837: LD_VAR 0 3
61841: PUSH
61842: LD_INT 33
61844: EQUAL
61845: IFFALSE 61855
// sRandom := true ;
61847: LD_ADDR_EXP 122
61851: PUSH
61852: LD_INT 1
61854: ST_TO_ADDR
// if p3 = 34 then
61855: LD_VAR 0 3
61859: PUSH
61860: LD_INT 34
61862: EQUAL
61863: IFFALSE 61873
// sShield := true ;
61865: LD_ADDR_EXP 123
61869: PUSH
61870: LD_INT 1
61872: ST_TO_ADDR
// if p3 = 35 then
61873: LD_VAR 0 3
61877: PUSH
61878: LD_INT 35
61880: EQUAL
61881: IFFALSE 61891
// sTime := true ;
61883: LD_ADDR_EXP 124
61887: PUSH
61888: LD_INT 1
61890: ST_TO_ADDR
// if p3 = 36 then
61891: LD_VAR 0 3
61895: PUSH
61896: LD_INT 36
61898: EQUAL
61899: IFFALSE 61909
// sTools := true ;
61901: LD_ADDR_EXP 125
61905: PUSH
61906: LD_INT 1
61908: ST_TO_ADDR
// if p3 = 101 then
61909: LD_VAR 0 3
61913: PUSH
61914: LD_INT 101
61916: EQUAL
61917: IFFALSE 61927
// sSold := true ;
61919: LD_ADDR_EXP 90
61923: PUSH
61924: LD_INT 1
61926: ST_TO_ADDR
// if p3 = 102 then
61927: LD_VAR 0 3
61931: PUSH
61932: LD_INT 102
61934: EQUAL
61935: IFFALSE 61945
// sDiff := true ;
61937: LD_ADDR_EXP 91
61941: PUSH
61942: LD_INT 1
61944: ST_TO_ADDR
// if p3 = 103 then
61945: LD_VAR 0 3
61949: PUSH
61950: LD_INT 103
61952: EQUAL
61953: IFFALSE 61963
// sFog := true ;
61955: LD_ADDR_EXP 94
61959: PUSH
61960: LD_INT 1
61962: ST_TO_ADDR
// if p3 = 104 then
61963: LD_VAR 0 3
61967: PUSH
61968: LD_INT 104
61970: EQUAL
61971: IFFALSE 61981
// sReset := true ;
61973: LD_ADDR_EXP 95
61977: PUSH
61978: LD_INT 1
61980: ST_TO_ADDR
// if p3 = 105 then
61981: LD_VAR 0 3
61985: PUSH
61986: LD_INT 105
61988: EQUAL
61989: IFFALSE 61999
// sSun := true ;
61991: LD_ADDR_EXP 96
61995: PUSH
61996: LD_INT 1
61998: ST_TO_ADDR
// if p3 = 106 then
61999: LD_VAR 0 3
62003: PUSH
62004: LD_INT 106
62006: EQUAL
62007: IFFALSE 62017
// sTiger := true ;
62009: LD_ADDR_EXP 92
62013: PUSH
62014: LD_INT 1
62016: ST_TO_ADDR
// if p3 = 107 then
62017: LD_VAR 0 3
62021: PUSH
62022: LD_INT 107
62024: EQUAL
62025: IFFALSE 62035
// sBomb := true ;
62027: LD_ADDR_EXP 93
62031: PUSH
62032: LD_INT 1
62034: ST_TO_ADDR
// if p3 = 108 then
62035: LD_VAR 0 3
62039: PUSH
62040: LD_INT 108
62042: EQUAL
62043: IFFALSE 62053
// sWound := true ;
62045: LD_ADDR_EXP 101
62049: PUSH
62050: LD_INT 1
62052: ST_TO_ADDR
// if p3 = 109 then
62053: LD_VAR 0 3
62057: PUSH
62058: LD_INT 109
62060: EQUAL
62061: IFFALSE 62071
// sBetray := true ;
62063: LD_ADDR_EXP 105
62067: PUSH
62068: LD_INT 1
62070: ST_TO_ADDR
// if p3 = 110 then
62071: LD_VAR 0 3
62075: PUSH
62076: LD_INT 110
62078: EQUAL
62079: IFFALSE 62089
// sContamin := true ;
62081: LD_ADDR_EXP 106
62085: PUSH
62086: LD_INT 1
62088: ST_TO_ADDR
// if p3 = 111 then
62089: LD_VAR 0 3
62093: PUSH
62094: LD_INT 111
62096: EQUAL
62097: IFFALSE 62107
// sOil := true ;
62099: LD_ADDR_EXP 108
62103: PUSH
62104: LD_INT 1
62106: ST_TO_ADDR
// if p3 = 112 then
62107: LD_VAR 0 3
62111: PUSH
62112: LD_INT 112
62114: EQUAL
62115: IFFALSE 62125
// sStu := true ;
62117: LD_ADDR_EXP 112
62121: PUSH
62122: LD_INT 1
62124: ST_TO_ADDR
// if p3 = 113 then
62125: LD_VAR 0 3
62129: PUSH
62130: LD_INT 113
62132: EQUAL
62133: IFFALSE 62143
// sBazooka := true ;
62135: LD_ADDR_EXP 115
62139: PUSH
62140: LD_INT 1
62142: ST_TO_ADDR
// if p3 = 114 then
62143: LD_VAR 0 3
62147: PUSH
62148: LD_INT 114
62150: EQUAL
62151: IFFALSE 62161
// sMortar := true ;
62153: LD_ADDR_EXP 116
62157: PUSH
62158: LD_INT 1
62160: ST_TO_ADDR
// if p3 = 115 then
62161: LD_VAR 0 3
62165: PUSH
62166: LD_INT 115
62168: EQUAL
62169: IFFALSE 62179
// sRanger := true ;
62171: LD_ADDR_EXP 126
62175: PUSH
62176: LD_INT 1
62178: ST_TO_ADDR
// end ; if p2 = 101 then
62179: LD_VAR 0 2
62183: PUSH
62184: LD_INT 101
62186: EQUAL
62187: IFFALSE 62315
// begin case p3 of 1 :
62189: LD_VAR 0 3
62193: PUSH
62194: LD_INT 1
62196: DOUBLE
62197: EQUAL
62198: IFTRUE 62202
62200: GO 62209
62202: POP
// hHackUnlimitedResources ; 2 :
62203: CALL 73352 0 0
62207: GO 62315
62209: LD_INT 2
62211: DOUBLE
62212: EQUAL
62213: IFTRUE 62217
62215: GO 62224
62217: POP
// hHackSetLevel10 ; 3 :
62218: CALL 73485 0 0
62222: GO 62315
62224: LD_INT 3
62226: DOUBLE
62227: EQUAL
62228: IFTRUE 62232
62230: GO 62239
62232: POP
// hHackSetLevel10YourUnits ; 4 :
62233: CALL 73570 0 0
62237: GO 62315
62239: LD_INT 4
62241: DOUBLE
62242: EQUAL
62243: IFTRUE 62247
62245: GO 62254
62247: POP
// hHackInvincible ; 5 :
62248: CALL 74018 0 0
62252: GO 62315
62254: LD_INT 5
62256: DOUBLE
62257: EQUAL
62258: IFTRUE 62262
62260: GO 62269
62262: POP
// hHackInvisible ; 6 :
62263: CALL 74129 0 0
62267: GO 62315
62269: LD_INT 6
62271: DOUBLE
62272: EQUAL
62273: IFTRUE 62277
62275: GO 62284
62277: POP
// hHackChangeYourSide ; 7 :
62278: CALL 74186 0 0
62282: GO 62315
62284: LD_INT 7
62286: DOUBLE
62287: EQUAL
62288: IFTRUE 62292
62290: GO 62299
62292: POP
// hHackChangeUnitSide ; 8 :
62293: CALL 74228 0 0
62297: GO 62315
62299: LD_INT 8
62301: DOUBLE
62302: EQUAL
62303: IFTRUE 62307
62305: GO 62314
62307: POP
// hHackFog ; end ;
62308: CALL 74329 0 0
62312: GO 62315
62314: POP
// end ; end ;
62315: LD_VAR 0 7
62319: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
62320: GO 62322
62322: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
62323: LD_STRING initStreamRollete();
62325: PPUSH
62326: CALL_OW 559
// InitStreamMode ;
62330: CALL 62339 0 0
// DefineStreamItems ( ) ;
62334: CALL 62779 0 0
// end ;
62338: END
// function InitStreamMode ; begin
62339: LD_INT 0
62341: PPUSH
// streamModeActive := false ;
62342: LD_ADDR_EXP 73
62346: PUSH
62347: LD_INT 0
62349: ST_TO_ADDR
// normalCounter := 36 ;
62350: LD_ADDR_EXP 74
62354: PUSH
62355: LD_INT 36
62357: ST_TO_ADDR
// hardcoreCounter := 16 ;
62358: LD_ADDR_EXP 75
62362: PUSH
62363: LD_INT 16
62365: ST_TO_ADDR
// sRocket := false ;
62366: LD_ADDR_EXP 78
62370: PUSH
62371: LD_INT 0
62373: ST_TO_ADDR
// sSpeed := false ;
62374: LD_ADDR_EXP 77
62378: PUSH
62379: LD_INT 0
62381: ST_TO_ADDR
// sEngine := false ;
62382: LD_ADDR_EXP 79
62386: PUSH
62387: LD_INT 0
62389: ST_TO_ADDR
// sSpec := false ;
62390: LD_ADDR_EXP 76
62394: PUSH
62395: LD_INT 0
62397: ST_TO_ADDR
// sLevel := false ;
62398: LD_ADDR_EXP 80
62402: PUSH
62403: LD_INT 0
62405: ST_TO_ADDR
// sArmoury := false ;
62406: LD_ADDR_EXP 81
62410: PUSH
62411: LD_INT 0
62413: ST_TO_ADDR
// sRadar := false ;
62414: LD_ADDR_EXP 82
62418: PUSH
62419: LD_INT 0
62421: ST_TO_ADDR
// sBunker := false ;
62422: LD_ADDR_EXP 83
62426: PUSH
62427: LD_INT 0
62429: ST_TO_ADDR
// sHack := false ;
62430: LD_ADDR_EXP 84
62434: PUSH
62435: LD_INT 0
62437: ST_TO_ADDR
// sFire := false ;
62438: LD_ADDR_EXP 85
62442: PUSH
62443: LD_INT 0
62445: ST_TO_ADDR
// sRefresh := false ;
62446: LD_ADDR_EXP 86
62450: PUSH
62451: LD_INT 0
62453: ST_TO_ADDR
// sExp := false ;
62454: LD_ADDR_EXP 87
62458: PUSH
62459: LD_INT 0
62461: ST_TO_ADDR
// sDepot := false ;
62462: LD_ADDR_EXP 88
62466: PUSH
62467: LD_INT 0
62469: ST_TO_ADDR
// sFlag := false ;
62470: LD_ADDR_EXP 89
62474: PUSH
62475: LD_INT 0
62477: ST_TO_ADDR
// sKamikadze := false ;
62478: LD_ADDR_EXP 97
62482: PUSH
62483: LD_INT 0
62485: ST_TO_ADDR
// sTroll := false ;
62486: LD_ADDR_EXP 98
62490: PUSH
62491: LD_INT 0
62493: ST_TO_ADDR
// sSlow := false ;
62494: LD_ADDR_EXP 99
62498: PUSH
62499: LD_INT 0
62501: ST_TO_ADDR
// sLack := false ;
62502: LD_ADDR_EXP 100
62506: PUSH
62507: LD_INT 0
62509: ST_TO_ADDR
// sTank := false ;
62510: LD_ADDR_EXP 102
62514: PUSH
62515: LD_INT 0
62517: ST_TO_ADDR
// sRemote := false ;
62518: LD_ADDR_EXP 103
62522: PUSH
62523: LD_INT 0
62525: ST_TO_ADDR
// sPowell := false ;
62526: LD_ADDR_EXP 104
62530: PUSH
62531: LD_INT 0
62533: ST_TO_ADDR
// sTeleport := false ;
62534: LD_ADDR_EXP 107
62538: PUSH
62539: LD_INT 0
62541: ST_TO_ADDR
// sOilTower := false ;
62542: LD_ADDR_EXP 109
62546: PUSH
62547: LD_INT 0
62549: ST_TO_ADDR
// sShovel := false ;
62550: LD_ADDR_EXP 110
62554: PUSH
62555: LD_INT 0
62557: ST_TO_ADDR
// sSheik := false ;
62558: LD_ADDR_EXP 111
62562: PUSH
62563: LD_INT 0
62565: ST_TO_ADDR
// sEarthquake := false ;
62566: LD_ADDR_EXP 113
62570: PUSH
62571: LD_INT 0
62573: ST_TO_ADDR
// sAI := false ;
62574: LD_ADDR_EXP 114
62578: PUSH
62579: LD_INT 0
62581: ST_TO_ADDR
// sCargo := false ;
62582: LD_ADDR_EXP 117
62586: PUSH
62587: LD_INT 0
62589: ST_TO_ADDR
// sDLaser := false ;
62590: LD_ADDR_EXP 118
62594: PUSH
62595: LD_INT 0
62597: ST_TO_ADDR
// sExchange := false ;
62598: LD_ADDR_EXP 119
62602: PUSH
62603: LD_INT 0
62605: ST_TO_ADDR
// sFac := false ;
62606: LD_ADDR_EXP 120
62610: PUSH
62611: LD_INT 0
62613: ST_TO_ADDR
// sPower := false ;
62614: LD_ADDR_EXP 121
62618: PUSH
62619: LD_INT 0
62621: ST_TO_ADDR
// sRandom := false ;
62622: LD_ADDR_EXP 122
62626: PUSH
62627: LD_INT 0
62629: ST_TO_ADDR
// sShield := false ;
62630: LD_ADDR_EXP 123
62634: PUSH
62635: LD_INT 0
62637: ST_TO_ADDR
// sTime := false ;
62638: LD_ADDR_EXP 124
62642: PUSH
62643: LD_INT 0
62645: ST_TO_ADDR
// sTools := false ;
62646: LD_ADDR_EXP 125
62650: PUSH
62651: LD_INT 0
62653: ST_TO_ADDR
// sSold := false ;
62654: LD_ADDR_EXP 90
62658: PUSH
62659: LD_INT 0
62661: ST_TO_ADDR
// sDiff := false ;
62662: LD_ADDR_EXP 91
62666: PUSH
62667: LD_INT 0
62669: ST_TO_ADDR
// sFog := false ;
62670: LD_ADDR_EXP 94
62674: PUSH
62675: LD_INT 0
62677: ST_TO_ADDR
// sReset := false ;
62678: LD_ADDR_EXP 95
62682: PUSH
62683: LD_INT 0
62685: ST_TO_ADDR
// sSun := false ;
62686: LD_ADDR_EXP 96
62690: PUSH
62691: LD_INT 0
62693: ST_TO_ADDR
// sTiger := false ;
62694: LD_ADDR_EXP 92
62698: PUSH
62699: LD_INT 0
62701: ST_TO_ADDR
// sBomb := false ;
62702: LD_ADDR_EXP 93
62706: PUSH
62707: LD_INT 0
62709: ST_TO_ADDR
// sWound := false ;
62710: LD_ADDR_EXP 101
62714: PUSH
62715: LD_INT 0
62717: ST_TO_ADDR
// sBetray := false ;
62718: LD_ADDR_EXP 105
62722: PUSH
62723: LD_INT 0
62725: ST_TO_ADDR
// sContamin := false ;
62726: LD_ADDR_EXP 106
62730: PUSH
62731: LD_INT 0
62733: ST_TO_ADDR
// sOil := false ;
62734: LD_ADDR_EXP 108
62738: PUSH
62739: LD_INT 0
62741: ST_TO_ADDR
// sStu := false ;
62742: LD_ADDR_EXP 112
62746: PUSH
62747: LD_INT 0
62749: ST_TO_ADDR
// sBazooka := false ;
62750: LD_ADDR_EXP 115
62754: PUSH
62755: LD_INT 0
62757: ST_TO_ADDR
// sMortar := false ;
62758: LD_ADDR_EXP 116
62762: PUSH
62763: LD_INT 0
62765: ST_TO_ADDR
// sRanger := false ;
62766: LD_ADDR_EXP 126
62770: PUSH
62771: LD_INT 0
62773: ST_TO_ADDR
// end ;
62774: LD_VAR 0 1
62778: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
62779: LD_INT 0
62781: PPUSH
62782: PPUSH
62783: PPUSH
62784: PPUSH
62785: PPUSH
// result := [ ] ;
62786: LD_ADDR_VAR 0 1
62790: PUSH
62791: EMPTY
62792: ST_TO_ADDR
// if campaign_id = 1 then
62793: LD_OWVAR 69
62797: PUSH
62798: LD_INT 1
62800: EQUAL
62801: IFFALSE 65739
// begin case mission_number of 1 :
62803: LD_OWVAR 70
62807: PUSH
62808: LD_INT 1
62810: DOUBLE
62811: EQUAL
62812: IFTRUE 62816
62814: GO 62880
62816: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
62817: LD_ADDR_VAR 0 1
62821: PUSH
62822: LD_INT 2
62824: PUSH
62825: LD_INT 4
62827: PUSH
62828: LD_INT 11
62830: PUSH
62831: LD_INT 12
62833: PUSH
62834: LD_INT 15
62836: PUSH
62837: LD_INT 16
62839: PUSH
62840: LD_INT 22
62842: PUSH
62843: LD_INT 23
62845: PUSH
62846: LD_INT 26
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 101
62862: PUSH
62863: LD_INT 102
62865: PUSH
62866: LD_INT 106
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: LIST
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: ST_TO_ADDR
62878: GO 65737
62880: LD_INT 2
62882: DOUBLE
62883: EQUAL
62884: IFTRUE 62888
62886: GO 62960
62888: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
62889: LD_ADDR_VAR 0 1
62893: PUSH
62894: LD_INT 2
62896: PUSH
62897: LD_INT 4
62899: PUSH
62900: LD_INT 11
62902: PUSH
62903: LD_INT 12
62905: PUSH
62906: LD_INT 15
62908: PUSH
62909: LD_INT 16
62911: PUSH
62912: LD_INT 22
62914: PUSH
62915: LD_INT 23
62917: PUSH
62918: LD_INT 26
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 101
62934: PUSH
62935: LD_INT 102
62937: PUSH
62938: LD_INT 105
62940: PUSH
62941: LD_INT 106
62943: PUSH
62944: LD_INT 108
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: ST_TO_ADDR
62958: GO 65737
62960: LD_INT 3
62962: DOUBLE
62963: EQUAL
62964: IFTRUE 62968
62966: GO 63044
62968: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
62969: LD_ADDR_VAR 0 1
62973: PUSH
62974: LD_INT 2
62976: PUSH
62977: LD_INT 4
62979: PUSH
62980: LD_INT 5
62982: PUSH
62983: LD_INT 11
62985: PUSH
62986: LD_INT 12
62988: PUSH
62989: LD_INT 15
62991: PUSH
62992: LD_INT 16
62994: PUSH
62995: LD_INT 22
62997: PUSH
62998: LD_INT 26
63000: PUSH
63001: LD_INT 36
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 101
63018: PUSH
63019: LD_INT 102
63021: PUSH
63022: LD_INT 105
63024: PUSH
63025: LD_INT 106
63027: PUSH
63028: LD_INT 108
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: ST_TO_ADDR
63042: GO 65737
63044: LD_INT 4
63046: DOUBLE
63047: EQUAL
63048: IFTRUE 63052
63050: GO 63136
63052: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
63053: LD_ADDR_VAR 0 1
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: LD_INT 4
63063: PUSH
63064: LD_INT 5
63066: PUSH
63067: LD_INT 8
63069: PUSH
63070: LD_INT 11
63072: PUSH
63073: LD_INT 12
63075: PUSH
63076: LD_INT 15
63078: PUSH
63079: LD_INT 16
63081: PUSH
63082: LD_INT 22
63084: PUSH
63085: LD_INT 23
63087: PUSH
63088: LD_INT 26
63090: PUSH
63091: LD_INT 36
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 101
63110: PUSH
63111: LD_INT 102
63113: PUSH
63114: LD_INT 105
63116: PUSH
63117: LD_INT 106
63119: PUSH
63120: LD_INT 108
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: ST_TO_ADDR
63134: GO 65737
63136: LD_INT 5
63138: DOUBLE
63139: EQUAL
63140: IFTRUE 63144
63142: GO 63244
63144: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
63145: LD_ADDR_VAR 0 1
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: LD_INT 4
63155: PUSH
63156: LD_INT 5
63158: PUSH
63159: LD_INT 6
63161: PUSH
63162: LD_INT 8
63164: PUSH
63165: LD_INT 11
63167: PUSH
63168: LD_INT 12
63170: PUSH
63171: LD_INT 15
63173: PUSH
63174: LD_INT 16
63176: PUSH
63177: LD_INT 22
63179: PUSH
63180: LD_INT 23
63182: PUSH
63183: LD_INT 25
63185: PUSH
63186: LD_INT 26
63188: PUSH
63189: LD_INT 36
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 101
63210: PUSH
63211: LD_INT 102
63213: PUSH
63214: LD_INT 105
63216: PUSH
63217: LD_INT 106
63219: PUSH
63220: LD_INT 108
63222: PUSH
63223: LD_INT 109
63225: PUSH
63226: LD_INT 112
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: ST_TO_ADDR
63242: GO 65737
63244: LD_INT 6
63246: DOUBLE
63247: EQUAL
63248: IFTRUE 63252
63250: GO 63372
63252: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
63253: LD_ADDR_VAR 0 1
63257: PUSH
63258: LD_INT 2
63260: PUSH
63261: LD_INT 4
63263: PUSH
63264: LD_INT 5
63266: PUSH
63267: LD_INT 6
63269: PUSH
63270: LD_INT 8
63272: PUSH
63273: LD_INT 11
63275: PUSH
63276: LD_INT 12
63278: PUSH
63279: LD_INT 15
63281: PUSH
63282: LD_INT 16
63284: PUSH
63285: LD_INT 20
63287: PUSH
63288: LD_INT 21
63290: PUSH
63291: LD_INT 22
63293: PUSH
63294: LD_INT 23
63296: PUSH
63297: LD_INT 25
63299: PUSH
63300: LD_INT 26
63302: PUSH
63303: LD_INT 30
63305: PUSH
63306: LD_INT 31
63308: PUSH
63309: LD_INT 32
63311: PUSH
63312: LD_INT 36
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 101
63338: PUSH
63339: LD_INT 102
63341: PUSH
63342: LD_INT 105
63344: PUSH
63345: LD_INT 106
63347: PUSH
63348: LD_INT 108
63350: PUSH
63351: LD_INT 109
63353: PUSH
63354: LD_INT 112
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: ST_TO_ADDR
63370: GO 65737
63372: LD_INT 7
63374: DOUBLE
63375: EQUAL
63376: IFTRUE 63380
63378: GO 63480
63380: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
63381: LD_ADDR_VAR 0 1
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: LD_INT 4
63391: PUSH
63392: LD_INT 5
63394: PUSH
63395: LD_INT 7
63397: PUSH
63398: LD_INT 11
63400: PUSH
63401: LD_INT 12
63403: PUSH
63404: LD_INT 15
63406: PUSH
63407: LD_INT 16
63409: PUSH
63410: LD_INT 20
63412: PUSH
63413: LD_INT 21
63415: PUSH
63416: LD_INT 22
63418: PUSH
63419: LD_INT 23
63421: PUSH
63422: LD_INT 25
63424: PUSH
63425: LD_INT 26
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 101
63446: PUSH
63447: LD_INT 102
63449: PUSH
63450: LD_INT 103
63452: PUSH
63453: LD_INT 105
63455: PUSH
63456: LD_INT 106
63458: PUSH
63459: LD_INT 108
63461: PUSH
63462: LD_INT 112
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: ST_TO_ADDR
63478: GO 65737
63480: LD_INT 8
63482: DOUBLE
63483: EQUAL
63484: IFTRUE 63488
63486: GO 63616
63488: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
63489: LD_ADDR_VAR 0 1
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: LD_INT 4
63499: PUSH
63500: LD_INT 5
63502: PUSH
63503: LD_INT 6
63505: PUSH
63506: LD_INT 7
63508: PUSH
63509: LD_INT 8
63511: PUSH
63512: LD_INT 11
63514: PUSH
63515: LD_INT 12
63517: PUSH
63518: LD_INT 15
63520: PUSH
63521: LD_INT 16
63523: PUSH
63524: LD_INT 20
63526: PUSH
63527: LD_INT 21
63529: PUSH
63530: LD_INT 22
63532: PUSH
63533: LD_INT 23
63535: PUSH
63536: LD_INT 25
63538: PUSH
63539: LD_INT 26
63541: PUSH
63542: LD_INT 30
63544: PUSH
63545: LD_INT 31
63547: PUSH
63548: LD_INT 32
63550: PUSH
63551: LD_INT 36
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 101
63578: PUSH
63579: LD_INT 102
63581: PUSH
63582: LD_INT 103
63584: PUSH
63585: LD_INT 105
63587: PUSH
63588: LD_INT 106
63590: PUSH
63591: LD_INT 108
63593: PUSH
63594: LD_INT 109
63596: PUSH
63597: LD_INT 112
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: ST_TO_ADDR
63614: GO 65737
63616: LD_INT 9
63618: DOUBLE
63619: EQUAL
63620: IFTRUE 63624
63622: GO 63760
63624: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
63625: LD_ADDR_VAR 0 1
63629: PUSH
63630: LD_INT 2
63632: PUSH
63633: LD_INT 4
63635: PUSH
63636: LD_INT 5
63638: PUSH
63639: LD_INT 6
63641: PUSH
63642: LD_INT 7
63644: PUSH
63645: LD_INT 8
63647: PUSH
63648: LD_INT 11
63650: PUSH
63651: LD_INT 12
63653: PUSH
63654: LD_INT 15
63656: PUSH
63657: LD_INT 16
63659: PUSH
63660: LD_INT 20
63662: PUSH
63663: LD_INT 21
63665: PUSH
63666: LD_INT 22
63668: PUSH
63669: LD_INT 23
63671: PUSH
63672: LD_INT 25
63674: PUSH
63675: LD_INT 26
63677: PUSH
63678: LD_INT 28
63680: PUSH
63681: LD_INT 30
63683: PUSH
63684: LD_INT 31
63686: PUSH
63687: LD_INT 32
63689: PUSH
63690: LD_INT 36
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 101
63718: PUSH
63719: LD_INT 102
63721: PUSH
63722: LD_INT 103
63724: PUSH
63725: LD_INT 105
63727: PUSH
63728: LD_INT 106
63730: PUSH
63731: LD_INT 108
63733: PUSH
63734: LD_INT 109
63736: PUSH
63737: LD_INT 112
63739: PUSH
63740: LD_INT 114
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: ST_TO_ADDR
63758: GO 65737
63760: LD_INT 10
63762: DOUBLE
63763: EQUAL
63764: IFTRUE 63768
63766: GO 63952
63768: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
63769: LD_ADDR_VAR 0 1
63773: PUSH
63774: LD_INT 2
63776: PUSH
63777: LD_INT 4
63779: PUSH
63780: LD_INT 5
63782: PUSH
63783: LD_INT 6
63785: PUSH
63786: LD_INT 7
63788: PUSH
63789: LD_INT 8
63791: PUSH
63792: LD_INT 9
63794: PUSH
63795: LD_INT 10
63797: PUSH
63798: LD_INT 11
63800: PUSH
63801: LD_INT 12
63803: PUSH
63804: LD_INT 13
63806: PUSH
63807: LD_INT 14
63809: PUSH
63810: LD_INT 15
63812: PUSH
63813: LD_INT 16
63815: PUSH
63816: LD_INT 17
63818: PUSH
63819: LD_INT 18
63821: PUSH
63822: LD_INT 19
63824: PUSH
63825: LD_INT 20
63827: PUSH
63828: LD_INT 21
63830: PUSH
63831: LD_INT 22
63833: PUSH
63834: LD_INT 23
63836: PUSH
63837: LD_INT 24
63839: PUSH
63840: LD_INT 25
63842: PUSH
63843: LD_INT 26
63845: PUSH
63846: LD_INT 28
63848: PUSH
63849: LD_INT 30
63851: PUSH
63852: LD_INT 31
63854: PUSH
63855: LD_INT 32
63857: PUSH
63858: LD_INT 36
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 101
63894: PUSH
63895: LD_INT 102
63897: PUSH
63898: LD_INT 103
63900: PUSH
63901: LD_INT 104
63903: PUSH
63904: LD_INT 105
63906: PUSH
63907: LD_INT 106
63909: PUSH
63910: LD_INT 107
63912: PUSH
63913: LD_INT 108
63915: PUSH
63916: LD_INT 109
63918: PUSH
63919: LD_INT 110
63921: PUSH
63922: LD_INT 111
63924: PUSH
63925: LD_INT 112
63927: PUSH
63928: LD_INT 114
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: ST_TO_ADDR
63950: GO 65737
63952: LD_INT 11
63954: DOUBLE
63955: EQUAL
63956: IFTRUE 63960
63958: GO 64152
63960: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
63961: LD_ADDR_VAR 0 1
63965: PUSH
63966: LD_INT 2
63968: PUSH
63969: LD_INT 3
63971: PUSH
63972: LD_INT 4
63974: PUSH
63975: LD_INT 5
63977: PUSH
63978: LD_INT 6
63980: PUSH
63981: LD_INT 7
63983: PUSH
63984: LD_INT 8
63986: PUSH
63987: LD_INT 9
63989: PUSH
63990: LD_INT 10
63992: PUSH
63993: LD_INT 11
63995: PUSH
63996: LD_INT 12
63998: PUSH
63999: LD_INT 13
64001: PUSH
64002: LD_INT 14
64004: PUSH
64005: LD_INT 15
64007: PUSH
64008: LD_INT 16
64010: PUSH
64011: LD_INT 17
64013: PUSH
64014: LD_INT 18
64016: PUSH
64017: LD_INT 19
64019: PUSH
64020: LD_INT 20
64022: PUSH
64023: LD_INT 21
64025: PUSH
64026: LD_INT 22
64028: PUSH
64029: LD_INT 23
64031: PUSH
64032: LD_INT 24
64034: PUSH
64035: LD_INT 25
64037: PUSH
64038: LD_INT 26
64040: PUSH
64041: LD_INT 28
64043: PUSH
64044: LD_INT 30
64046: PUSH
64047: LD_INT 31
64049: PUSH
64050: LD_INT 32
64052: PUSH
64053: LD_INT 34
64055: PUSH
64056: LD_INT 36
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 101
64094: PUSH
64095: LD_INT 102
64097: PUSH
64098: LD_INT 103
64100: PUSH
64101: LD_INT 104
64103: PUSH
64104: LD_INT 105
64106: PUSH
64107: LD_INT 106
64109: PUSH
64110: LD_INT 107
64112: PUSH
64113: LD_INT 108
64115: PUSH
64116: LD_INT 109
64118: PUSH
64119: LD_INT 110
64121: PUSH
64122: LD_INT 111
64124: PUSH
64125: LD_INT 112
64127: PUSH
64128: LD_INT 114
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: ST_TO_ADDR
64150: GO 65737
64152: LD_INT 12
64154: DOUBLE
64155: EQUAL
64156: IFTRUE 64160
64158: GO 64368
64160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
64161: LD_ADDR_VAR 0 1
64165: PUSH
64166: LD_INT 1
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: LD_INT 3
64174: PUSH
64175: LD_INT 4
64177: PUSH
64178: LD_INT 5
64180: PUSH
64181: LD_INT 6
64183: PUSH
64184: LD_INT 7
64186: PUSH
64187: LD_INT 8
64189: PUSH
64190: LD_INT 9
64192: PUSH
64193: LD_INT 10
64195: PUSH
64196: LD_INT 11
64198: PUSH
64199: LD_INT 12
64201: PUSH
64202: LD_INT 13
64204: PUSH
64205: LD_INT 14
64207: PUSH
64208: LD_INT 15
64210: PUSH
64211: LD_INT 16
64213: PUSH
64214: LD_INT 17
64216: PUSH
64217: LD_INT 18
64219: PUSH
64220: LD_INT 19
64222: PUSH
64223: LD_INT 20
64225: PUSH
64226: LD_INT 21
64228: PUSH
64229: LD_INT 22
64231: PUSH
64232: LD_INT 23
64234: PUSH
64235: LD_INT 24
64237: PUSH
64238: LD_INT 25
64240: PUSH
64241: LD_INT 26
64243: PUSH
64244: LD_INT 27
64246: PUSH
64247: LD_INT 28
64249: PUSH
64250: LD_INT 30
64252: PUSH
64253: LD_INT 31
64255: PUSH
64256: LD_INT 32
64258: PUSH
64259: LD_INT 33
64261: PUSH
64262: LD_INT 34
64264: PUSH
64265: LD_INT 36
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 101
64306: PUSH
64307: LD_INT 102
64309: PUSH
64310: LD_INT 103
64312: PUSH
64313: LD_INT 104
64315: PUSH
64316: LD_INT 105
64318: PUSH
64319: LD_INT 106
64321: PUSH
64322: LD_INT 107
64324: PUSH
64325: LD_INT 108
64327: PUSH
64328: LD_INT 109
64330: PUSH
64331: LD_INT 110
64333: PUSH
64334: LD_INT 111
64336: PUSH
64337: LD_INT 112
64339: PUSH
64340: LD_INT 113
64342: PUSH
64343: LD_INT 114
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: ST_TO_ADDR
64366: GO 65737
64368: LD_INT 13
64370: DOUBLE
64371: EQUAL
64372: IFTRUE 64376
64374: GO 64572
64376: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
64377: LD_ADDR_VAR 0 1
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: LD_INT 2
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: LD_INT 4
64393: PUSH
64394: LD_INT 5
64396: PUSH
64397: LD_INT 8
64399: PUSH
64400: LD_INT 9
64402: PUSH
64403: LD_INT 10
64405: PUSH
64406: LD_INT 11
64408: PUSH
64409: LD_INT 12
64411: PUSH
64412: LD_INT 14
64414: PUSH
64415: LD_INT 15
64417: PUSH
64418: LD_INT 16
64420: PUSH
64421: LD_INT 17
64423: PUSH
64424: LD_INT 18
64426: PUSH
64427: LD_INT 19
64429: PUSH
64430: LD_INT 20
64432: PUSH
64433: LD_INT 21
64435: PUSH
64436: LD_INT 22
64438: PUSH
64439: LD_INT 23
64441: PUSH
64442: LD_INT 24
64444: PUSH
64445: LD_INT 25
64447: PUSH
64448: LD_INT 26
64450: PUSH
64451: LD_INT 27
64453: PUSH
64454: LD_INT 28
64456: PUSH
64457: LD_INT 30
64459: PUSH
64460: LD_INT 31
64462: PUSH
64463: LD_INT 32
64465: PUSH
64466: LD_INT 33
64468: PUSH
64469: LD_INT 34
64471: PUSH
64472: LD_INT 36
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 101
64510: PUSH
64511: LD_INT 102
64513: PUSH
64514: LD_INT 103
64516: PUSH
64517: LD_INT 104
64519: PUSH
64520: LD_INT 105
64522: PUSH
64523: LD_INT 106
64525: PUSH
64526: LD_INT 107
64528: PUSH
64529: LD_INT 108
64531: PUSH
64532: LD_INT 109
64534: PUSH
64535: LD_INT 110
64537: PUSH
64538: LD_INT 111
64540: PUSH
64541: LD_INT 112
64543: PUSH
64544: LD_INT 113
64546: PUSH
64547: LD_INT 114
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: ST_TO_ADDR
64570: GO 65737
64572: LD_INT 14
64574: DOUBLE
64575: EQUAL
64576: IFTRUE 64580
64578: GO 64792
64580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
64581: LD_ADDR_VAR 0 1
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: LD_INT 2
64591: PUSH
64592: LD_INT 3
64594: PUSH
64595: LD_INT 4
64597: PUSH
64598: LD_INT 5
64600: PUSH
64601: LD_INT 6
64603: PUSH
64604: LD_INT 7
64606: PUSH
64607: LD_INT 8
64609: PUSH
64610: LD_INT 9
64612: PUSH
64613: LD_INT 10
64615: PUSH
64616: LD_INT 11
64618: PUSH
64619: LD_INT 12
64621: PUSH
64622: LD_INT 13
64624: PUSH
64625: LD_INT 14
64627: PUSH
64628: LD_INT 15
64630: PUSH
64631: LD_INT 16
64633: PUSH
64634: LD_INT 17
64636: PUSH
64637: LD_INT 18
64639: PUSH
64640: LD_INT 19
64642: PUSH
64643: LD_INT 20
64645: PUSH
64646: LD_INT 21
64648: PUSH
64649: LD_INT 22
64651: PUSH
64652: LD_INT 23
64654: PUSH
64655: LD_INT 24
64657: PUSH
64658: LD_INT 25
64660: PUSH
64661: LD_INT 26
64663: PUSH
64664: LD_INT 27
64666: PUSH
64667: LD_INT 28
64669: PUSH
64670: LD_INT 29
64672: PUSH
64673: LD_INT 30
64675: PUSH
64676: LD_INT 31
64678: PUSH
64679: LD_INT 32
64681: PUSH
64682: LD_INT 33
64684: PUSH
64685: LD_INT 34
64687: PUSH
64688: LD_INT 36
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 101
64730: PUSH
64731: LD_INT 102
64733: PUSH
64734: LD_INT 103
64736: PUSH
64737: LD_INT 104
64739: PUSH
64740: LD_INT 105
64742: PUSH
64743: LD_INT 106
64745: PUSH
64746: LD_INT 107
64748: PUSH
64749: LD_INT 108
64751: PUSH
64752: LD_INT 109
64754: PUSH
64755: LD_INT 110
64757: PUSH
64758: LD_INT 111
64760: PUSH
64761: LD_INT 112
64763: PUSH
64764: LD_INT 113
64766: PUSH
64767: LD_INT 114
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: ST_TO_ADDR
64790: GO 65737
64792: LD_INT 15
64794: DOUBLE
64795: EQUAL
64796: IFTRUE 64800
64798: GO 65012
64800: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
64801: LD_ADDR_VAR 0 1
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: LD_INT 2
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: LD_INT 4
64817: PUSH
64818: LD_INT 5
64820: PUSH
64821: LD_INT 6
64823: PUSH
64824: LD_INT 7
64826: PUSH
64827: LD_INT 8
64829: PUSH
64830: LD_INT 9
64832: PUSH
64833: LD_INT 10
64835: PUSH
64836: LD_INT 11
64838: PUSH
64839: LD_INT 12
64841: PUSH
64842: LD_INT 13
64844: PUSH
64845: LD_INT 14
64847: PUSH
64848: LD_INT 15
64850: PUSH
64851: LD_INT 16
64853: PUSH
64854: LD_INT 17
64856: PUSH
64857: LD_INT 18
64859: PUSH
64860: LD_INT 19
64862: PUSH
64863: LD_INT 20
64865: PUSH
64866: LD_INT 21
64868: PUSH
64869: LD_INT 22
64871: PUSH
64872: LD_INT 23
64874: PUSH
64875: LD_INT 24
64877: PUSH
64878: LD_INT 25
64880: PUSH
64881: LD_INT 26
64883: PUSH
64884: LD_INT 27
64886: PUSH
64887: LD_INT 28
64889: PUSH
64890: LD_INT 29
64892: PUSH
64893: LD_INT 30
64895: PUSH
64896: LD_INT 31
64898: PUSH
64899: LD_INT 32
64901: PUSH
64902: LD_INT 33
64904: PUSH
64905: LD_INT 34
64907: PUSH
64908: LD_INT 36
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 101
64950: PUSH
64951: LD_INT 102
64953: PUSH
64954: LD_INT 103
64956: PUSH
64957: LD_INT 104
64959: PUSH
64960: LD_INT 105
64962: PUSH
64963: LD_INT 106
64965: PUSH
64966: LD_INT 107
64968: PUSH
64969: LD_INT 108
64971: PUSH
64972: LD_INT 109
64974: PUSH
64975: LD_INT 110
64977: PUSH
64978: LD_INT 111
64980: PUSH
64981: LD_INT 112
64983: PUSH
64984: LD_INT 113
64986: PUSH
64987: LD_INT 114
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: ST_TO_ADDR
65010: GO 65737
65012: LD_INT 16
65014: DOUBLE
65015: EQUAL
65016: IFTRUE 65020
65018: GO 65144
65020: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
65021: LD_ADDR_VAR 0 1
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: LD_INT 4
65031: PUSH
65032: LD_INT 5
65034: PUSH
65035: LD_INT 7
65037: PUSH
65038: LD_INT 11
65040: PUSH
65041: LD_INT 12
65043: PUSH
65044: LD_INT 15
65046: PUSH
65047: LD_INT 16
65049: PUSH
65050: LD_INT 20
65052: PUSH
65053: LD_INT 21
65055: PUSH
65056: LD_INT 22
65058: PUSH
65059: LD_INT 23
65061: PUSH
65062: LD_INT 25
65064: PUSH
65065: LD_INT 26
65067: PUSH
65068: LD_INT 30
65070: PUSH
65071: LD_INT 31
65073: PUSH
65074: LD_INT 32
65076: PUSH
65077: LD_INT 33
65079: PUSH
65080: LD_INT 34
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 101
65106: PUSH
65107: LD_INT 102
65109: PUSH
65110: LD_INT 103
65112: PUSH
65113: LD_INT 106
65115: PUSH
65116: LD_INT 108
65118: PUSH
65119: LD_INT 112
65121: PUSH
65122: LD_INT 113
65124: PUSH
65125: LD_INT 114
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: ST_TO_ADDR
65142: GO 65737
65144: LD_INT 17
65146: DOUBLE
65147: EQUAL
65148: IFTRUE 65152
65150: GO 65364
65152: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
65153: LD_ADDR_VAR 0 1
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: LD_INT 2
65163: PUSH
65164: LD_INT 3
65166: PUSH
65167: LD_INT 4
65169: PUSH
65170: LD_INT 5
65172: PUSH
65173: LD_INT 6
65175: PUSH
65176: LD_INT 7
65178: PUSH
65179: LD_INT 8
65181: PUSH
65182: LD_INT 9
65184: PUSH
65185: LD_INT 10
65187: PUSH
65188: LD_INT 11
65190: PUSH
65191: LD_INT 12
65193: PUSH
65194: LD_INT 13
65196: PUSH
65197: LD_INT 14
65199: PUSH
65200: LD_INT 15
65202: PUSH
65203: LD_INT 16
65205: PUSH
65206: LD_INT 17
65208: PUSH
65209: LD_INT 18
65211: PUSH
65212: LD_INT 19
65214: PUSH
65215: LD_INT 20
65217: PUSH
65218: LD_INT 21
65220: PUSH
65221: LD_INT 22
65223: PUSH
65224: LD_INT 23
65226: PUSH
65227: LD_INT 24
65229: PUSH
65230: LD_INT 25
65232: PUSH
65233: LD_INT 26
65235: PUSH
65236: LD_INT 27
65238: PUSH
65239: LD_INT 28
65241: PUSH
65242: LD_INT 29
65244: PUSH
65245: LD_INT 30
65247: PUSH
65248: LD_INT 31
65250: PUSH
65251: LD_INT 32
65253: PUSH
65254: LD_INT 33
65256: PUSH
65257: LD_INT 34
65259: PUSH
65260: LD_INT 36
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 101
65302: PUSH
65303: LD_INT 102
65305: PUSH
65306: LD_INT 103
65308: PUSH
65309: LD_INT 104
65311: PUSH
65312: LD_INT 105
65314: PUSH
65315: LD_INT 106
65317: PUSH
65318: LD_INT 107
65320: PUSH
65321: LD_INT 108
65323: PUSH
65324: LD_INT 109
65326: PUSH
65327: LD_INT 110
65329: PUSH
65330: LD_INT 111
65332: PUSH
65333: LD_INT 112
65335: PUSH
65336: LD_INT 113
65338: PUSH
65339: LD_INT 114
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: ST_TO_ADDR
65362: GO 65737
65364: LD_INT 18
65366: DOUBLE
65367: EQUAL
65368: IFTRUE 65372
65370: GO 65508
65372: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
65373: LD_ADDR_VAR 0 1
65377: PUSH
65378: LD_INT 2
65380: PUSH
65381: LD_INT 4
65383: PUSH
65384: LD_INT 5
65386: PUSH
65387: LD_INT 7
65389: PUSH
65390: LD_INT 11
65392: PUSH
65393: LD_INT 12
65395: PUSH
65396: LD_INT 15
65398: PUSH
65399: LD_INT 16
65401: PUSH
65402: LD_INT 20
65404: PUSH
65405: LD_INT 21
65407: PUSH
65408: LD_INT 22
65410: PUSH
65411: LD_INT 23
65413: PUSH
65414: LD_INT 25
65416: PUSH
65417: LD_INT 26
65419: PUSH
65420: LD_INT 30
65422: PUSH
65423: LD_INT 31
65425: PUSH
65426: LD_INT 32
65428: PUSH
65429: LD_INT 33
65431: PUSH
65432: LD_INT 34
65434: PUSH
65435: LD_INT 35
65437: PUSH
65438: LD_INT 36
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 101
65466: PUSH
65467: LD_INT 102
65469: PUSH
65470: LD_INT 103
65472: PUSH
65473: LD_INT 106
65475: PUSH
65476: LD_INT 108
65478: PUSH
65479: LD_INT 112
65481: PUSH
65482: LD_INT 113
65484: PUSH
65485: LD_INT 114
65487: PUSH
65488: LD_INT 115
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: ST_TO_ADDR
65506: GO 65737
65508: LD_INT 19
65510: DOUBLE
65511: EQUAL
65512: IFTRUE 65516
65514: GO 65736
65516: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
65517: LD_ADDR_VAR 0 1
65521: PUSH
65522: LD_INT 1
65524: PUSH
65525: LD_INT 2
65527: PUSH
65528: LD_INT 3
65530: PUSH
65531: LD_INT 4
65533: PUSH
65534: LD_INT 5
65536: PUSH
65537: LD_INT 6
65539: PUSH
65540: LD_INT 7
65542: PUSH
65543: LD_INT 8
65545: PUSH
65546: LD_INT 9
65548: PUSH
65549: LD_INT 10
65551: PUSH
65552: LD_INT 11
65554: PUSH
65555: LD_INT 12
65557: PUSH
65558: LD_INT 13
65560: PUSH
65561: LD_INT 14
65563: PUSH
65564: LD_INT 15
65566: PUSH
65567: LD_INT 16
65569: PUSH
65570: LD_INT 17
65572: PUSH
65573: LD_INT 18
65575: PUSH
65576: LD_INT 19
65578: PUSH
65579: LD_INT 20
65581: PUSH
65582: LD_INT 21
65584: PUSH
65585: LD_INT 22
65587: PUSH
65588: LD_INT 23
65590: PUSH
65591: LD_INT 24
65593: PUSH
65594: LD_INT 25
65596: PUSH
65597: LD_INT 26
65599: PUSH
65600: LD_INT 27
65602: PUSH
65603: LD_INT 28
65605: PUSH
65606: LD_INT 29
65608: PUSH
65609: LD_INT 30
65611: PUSH
65612: LD_INT 31
65614: PUSH
65615: LD_INT 32
65617: PUSH
65618: LD_INT 33
65620: PUSH
65621: LD_INT 34
65623: PUSH
65624: LD_INT 35
65626: PUSH
65627: LD_INT 36
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 101
65670: PUSH
65671: LD_INT 102
65673: PUSH
65674: LD_INT 103
65676: PUSH
65677: LD_INT 104
65679: PUSH
65680: LD_INT 105
65682: PUSH
65683: LD_INT 106
65685: PUSH
65686: LD_INT 107
65688: PUSH
65689: LD_INT 108
65691: PUSH
65692: LD_INT 109
65694: PUSH
65695: LD_INT 110
65697: PUSH
65698: LD_INT 111
65700: PUSH
65701: LD_INT 112
65703: PUSH
65704: LD_INT 113
65706: PUSH
65707: LD_INT 114
65709: PUSH
65710: LD_INT 115
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: ST_TO_ADDR
65734: GO 65737
65736: POP
// end else
65737: GO 65956
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
65739: LD_ADDR_VAR 0 1
65743: PUSH
65744: LD_INT 1
65746: PUSH
65747: LD_INT 2
65749: PUSH
65750: LD_INT 3
65752: PUSH
65753: LD_INT 4
65755: PUSH
65756: LD_INT 5
65758: PUSH
65759: LD_INT 6
65761: PUSH
65762: LD_INT 7
65764: PUSH
65765: LD_INT 8
65767: PUSH
65768: LD_INT 9
65770: PUSH
65771: LD_INT 10
65773: PUSH
65774: LD_INT 11
65776: PUSH
65777: LD_INT 12
65779: PUSH
65780: LD_INT 13
65782: PUSH
65783: LD_INT 14
65785: PUSH
65786: LD_INT 15
65788: PUSH
65789: LD_INT 16
65791: PUSH
65792: LD_INT 17
65794: PUSH
65795: LD_INT 18
65797: PUSH
65798: LD_INT 19
65800: PUSH
65801: LD_INT 20
65803: PUSH
65804: LD_INT 21
65806: PUSH
65807: LD_INT 22
65809: PUSH
65810: LD_INT 23
65812: PUSH
65813: LD_INT 24
65815: PUSH
65816: LD_INT 25
65818: PUSH
65819: LD_INT 26
65821: PUSH
65822: LD_INT 27
65824: PUSH
65825: LD_INT 28
65827: PUSH
65828: LD_INT 29
65830: PUSH
65831: LD_INT 30
65833: PUSH
65834: LD_INT 31
65836: PUSH
65837: LD_INT 32
65839: PUSH
65840: LD_INT 33
65842: PUSH
65843: LD_INT 34
65845: PUSH
65846: LD_INT 35
65848: PUSH
65849: LD_INT 36
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 101
65892: PUSH
65893: LD_INT 102
65895: PUSH
65896: LD_INT 103
65898: PUSH
65899: LD_INT 104
65901: PUSH
65902: LD_INT 105
65904: PUSH
65905: LD_INT 106
65907: PUSH
65908: LD_INT 107
65910: PUSH
65911: LD_INT 108
65913: PUSH
65914: LD_INT 109
65916: PUSH
65917: LD_INT 110
65919: PUSH
65920: LD_INT 111
65922: PUSH
65923: LD_INT 112
65925: PUSH
65926: LD_INT 113
65928: PUSH
65929: LD_INT 114
65931: PUSH
65932: LD_INT 115
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: ST_TO_ADDR
// if result then
65956: LD_VAR 0 1
65960: IFFALSE 66249
// begin normal :=  ;
65962: LD_ADDR_VAR 0 3
65966: PUSH
65967: LD_STRING 
65969: ST_TO_ADDR
// hardcore :=  ;
65970: LD_ADDR_VAR 0 4
65974: PUSH
65975: LD_STRING 
65977: ST_TO_ADDR
// for i = 1 to normalCounter do
65978: LD_ADDR_VAR 0 5
65982: PUSH
65983: DOUBLE
65984: LD_INT 1
65986: DEC
65987: ST_TO_ADDR
65988: LD_EXP 74
65992: PUSH
65993: FOR_TO
65994: IFFALSE 66095
// begin tmp := 0 ;
65996: LD_ADDR_VAR 0 2
66000: PUSH
66001: LD_STRING 0
66003: ST_TO_ADDR
// if result [ 1 ] then
66004: LD_VAR 0 1
66008: PUSH
66009: LD_INT 1
66011: ARRAY
66012: IFFALSE 66077
// if result [ 1 ] [ 1 ] = i then
66014: LD_VAR 0 1
66018: PUSH
66019: LD_INT 1
66021: ARRAY
66022: PUSH
66023: LD_INT 1
66025: ARRAY
66026: PUSH
66027: LD_VAR 0 5
66031: EQUAL
66032: IFFALSE 66077
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66034: LD_ADDR_VAR 0 1
66038: PUSH
66039: LD_VAR 0 1
66043: PPUSH
66044: LD_INT 1
66046: PPUSH
66047: LD_VAR 0 1
66051: PUSH
66052: LD_INT 1
66054: ARRAY
66055: PPUSH
66056: LD_INT 1
66058: PPUSH
66059: CALL_OW 3
66063: PPUSH
66064: CALL_OW 1
66068: ST_TO_ADDR
// tmp := 1 ;
66069: LD_ADDR_VAR 0 2
66073: PUSH
66074: LD_STRING 1
66076: ST_TO_ADDR
// end ; normal := normal & tmp ;
66077: LD_ADDR_VAR 0 3
66081: PUSH
66082: LD_VAR 0 3
66086: PUSH
66087: LD_VAR 0 2
66091: STR
66092: ST_TO_ADDR
// end ;
66093: GO 65993
66095: POP
66096: POP
// for i = 1 to hardcoreCounter do
66097: LD_ADDR_VAR 0 5
66101: PUSH
66102: DOUBLE
66103: LD_INT 1
66105: DEC
66106: ST_TO_ADDR
66107: LD_EXP 75
66111: PUSH
66112: FOR_TO
66113: IFFALSE 66218
// begin tmp := 0 ;
66115: LD_ADDR_VAR 0 2
66119: PUSH
66120: LD_STRING 0
66122: ST_TO_ADDR
// if result [ 2 ] then
66123: LD_VAR 0 1
66127: PUSH
66128: LD_INT 2
66130: ARRAY
66131: IFFALSE 66200
// if result [ 2 ] [ 1 ] = 100 + i then
66133: LD_VAR 0 1
66137: PUSH
66138: LD_INT 2
66140: ARRAY
66141: PUSH
66142: LD_INT 1
66144: ARRAY
66145: PUSH
66146: LD_INT 100
66148: PUSH
66149: LD_VAR 0 5
66153: PLUS
66154: EQUAL
66155: IFFALSE 66200
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66157: LD_ADDR_VAR 0 1
66161: PUSH
66162: LD_VAR 0 1
66166: PPUSH
66167: LD_INT 2
66169: PPUSH
66170: LD_VAR 0 1
66174: PUSH
66175: LD_INT 2
66177: ARRAY
66178: PPUSH
66179: LD_INT 1
66181: PPUSH
66182: CALL_OW 3
66186: PPUSH
66187: CALL_OW 1
66191: ST_TO_ADDR
// tmp := 1 ;
66192: LD_ADDR_VAR 0 2
66196: PUSH
66197: LD_STRING 1
66199: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66200: LD_ADDR_VAR 0 4
66204: PUSH
66205: LD_VAR 0 4
66209: PUSH
66210: LD_VAR 0 2
66214: STR
66215: ST_TO_ADDR
// end ;
66216: GO 66112
66218: POP
66219: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
66220: LD_STRING getStreamItemsFromMission("
66222: PUSH
66223: LD_VAR 0 3
66227: STR
66228: PUSH
66229: LD_STRING ","
66231: STR
66232: PUSH
66233: LD_VAR 0 4
66237: STR
66238: PUSH
66239: LD_STRING ")
66241: STR
66242: PPUSH
66243: CALL_OW 559
// end else
66247: GO 66256
// ToLua ( getStreamItemsFromMission("","") ) ;
66249: LD_STRING getStreamItemsFromMission("","")
66251: PPUSH
66252: CALL_OW 559
// end ;
66256: LD_VAR 0 1
66260: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
66261: LD_EXP 73
66265: PUSH
66266: LD_EXP 78
66270: AND
66271: IFFALSE 66395
66273: GO 66275
66275: DISABLE
66276: LD_INT 0
66278: PPUSH
66279: PPUSH
// begin enable ;
66280: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
66281: LD_ADDR_VAR 0 2
66285: PUSH
66286: LD_INT 22
66288: PUSH
66289: LD_OWVAR 2
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 2
66300: PUSH
66301: LD_INT 34
66303: PUSH
66304: LD_INT 7
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 34
66313: PUSH
66314: LD_INT 45
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 34
66323: PUSH
66324: LD_INT 28
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 34
66333: PUSH
66334: LD_INT 47
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PPUSH
66352: CALL_OW 69
66356: ST_TO_ADDR
// if not tmp then
66357: LD_VAR 0 2
66361: NOT
66362: IFFALSE 66366
// exit ;
66364: GO 66395
// for i in tmp do
66366: LD_ADDR_VAR 0 1
66370: PUSH
66371: LD_VAR 0 2
66375: PUSH
66376: FOR_IN
66377: IFFALSE 66393
// begin SetLives ( i , 0 ) ;
66379: LD_VAR 0 1
66383: PPUSH
66384: LD_INT 0
66386: PPUSH
66387: CALL_OW 234
// end ;
66391: GO 66376
66393: POP
66394: POP
// end ;
66395: PPOPN 2
66397: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
66398: LD_EXP 73
66402: PUSH
66403: LD_EXP 79
66407: AND
66408: IFFALSE 66492
66410: GO 66412
66412: DISABLE
66413: LD_INT 0
66415: PPUSH
66416: PPUSH
// begin enable ;
66417: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
66418: LD_ADDR_VAR 0 2
66422: PUSH
66423: LD_INT 22
66425: PUSH
66426: LD_OWVAR 2
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 32
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PPUSH
66449: CALL_OW 69
66453: ST_TO_ADDR
// if not tmp then
66454: LD_VAR 0 2
66458: NOT
66459: IFFALSE 66463
// exit ;
66461: GO 66492
// for i in tmp do
66463: LD_ADDR_VAR 0 1
66467: PUSH
66468: LD_VAR 0 2
66472: PUSH
66473: FOR_IN
66474: IFFALSE 66490
// begin SetLives ( i , 0 ) ;
66476: LD_VAR 0 1
66480: PPUSH
66481: LD_INT 0
66483: PPUSH
66484: CALL_OW 234
// end ;
66488: GO 66473
66490: POP
66491: POP
// end ;
66492: PPOPN 2
66494: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
66495: LD_EXP 73
66499: PUSH
66500: LD_EXP 76
66504: AND
66505: IFFALSE 66598
66507: GO 66509
66509: DISABLE
66510: LD_INT 0
66512: PPUSH
// begin enable ;
66513: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
66514: LD_ADDR_VAR 0 1
66518: PUSH
66519: LD_INT 22
66521: PUSH
66522: LD_OWVAR 2
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 2
66533: PUSH
66534: LD_INT 25
66536: PUSH
66537: LD_INT 5
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 25
66546: PUSH
66547: LD_INT 9
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 25
66556: PUSH
66557: LD_INT 8
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PPUSH
66574: CALL_OW 69
66578: PUSH
66579: FOR_IN
66580: IFFALSE 66596
// begin SetClass ( i , 1 ) ;
66582: LD_VAR 0 1
66586: PPUSH
66587: LD_INT 1
66589: PPUSH
66590: CALL_OW 336
// end ;
66594: GO 66579
66596: POP
66597: POP
// end ;
66598: PPOPN 1
66600: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
66601: LD_EXP 73
66605: PUSH
66606: LD_EXP 77
66610: AND
66611: PUSH
66612: LD_OWVAR 65
66616: PUSH
66617: LD_INT 7
66619: LESS
66620: AND
66621: IFFALSE 66635
66623: GO 66625
66625: DISABLE
// begin enable ;
66626: ENABLE
// game_speed := 7 ;
66627: LD_ADDR_OWVAR 65
66631: PUSH
66632: LD_INT 7
66634: ST_TO_ADDR
// end ;
66635: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
66636: LD_EXP 73
66640: PUSH
66641: LD_EXP 80
66645: AND
66646: IFFALSE 66848
66648: GO 66650
66650: DISABLE
66651: LD_INT 0
66653: PPUSH
66654: PPUSH
66655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
66656: LD_ADDR_VAR 0 3
66660: PUSH
66661: LD_INT 81
66663: PUSH
66664: LD_OWVAR 2
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 21
66675: PUSH
66676: LD_INT 1
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PPUSH
66687: CALL_OW 69
66691: ST_TO_ADDR
// if not tmp then
66692: LD_VAR 0 3
66696: NOT
66697: IFFALSE 66701
// exit ;
66699: GO 66848
// if tmp > 5 then
66701: LD_VAR 0 3
66705: PUSH
66706: LD_INT 5
66708: GREATER
66709: IFFALSE 66721
// k := 5 else
66711: LD_ADDR_VAR 0 2
66715: PUSH
66716: LD_INT 5
66718: ST_TO_ADDR
66719: GO 66731
// k := tmp ;
66721: LD_ADDR_VAR 0 2
66725: PUSH
66726: LD_VAR 0 3
66730: ST_TO_ADDR
// for i := 1 to k do
66731: LD_ADDR_VAR 0 1
66735: PUSH
66736: DOUBLE
66737: LD_INT 1
66739: DEC
66740: ST_TO_ADDR
66741: LD_VAR 0 2
66745: PUSH
66746: FOR_TO
66747: IFFALSE 66846
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
66749: LD_VAR 0 3
66753: PUSH
66754: LD_VAR 0 1
66758: ARRAY
66759: PPUSH
66760: LD_VAR 0 1
66764: PUSH
66765: LD_INT 4
66767: MOD
66768: PUSH
66769: LD_INT 1
66771: PLUS
66772: PPUSH
66773: CALL_OW 259
66777: PUSH
66778: LD_INT 10
66780: LESS
66781: IFFALSE 66844
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
66783: LD_VAR 0 3
66787: PUSH
66788: LD_VAR 0 1
66792: ARRAY
66793: PPUSH
66794: LD_VAR 0 1
66798: PUSH
66799: LD_INT 4
66801: MOD
66802: PUSH
66803: LD_INT 1
66805: PLUS
66806: PPUSH
66807: LD_VAR 0 3
66811: PUSH
66812: LD_VAR 0 1
66816: ARRAY
66817: PPUSH
66818: LD_VAR 0 1
66822: PUSH
66823: LD_INT 4
66825: MOD
66826: PUSH
66827: LD_INT 1
66829: PLUS
66830: PPUSH
66831: CALL_OW 259
66835: PUSH
66836: LD_INT 1
66838: PLUS
66839: PPUSH
66840: CALL_OW 237
66844: GO 66746
66846: POP
66847: POP
// end ;
66848: PPOPN 3
66850: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
66851: LD_EXP 73
66855: PUSH
66856: LD_EXP 81
66860: AND
66861: IFFALSE 66881
66863: GO 66865
66865: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
66866: LD_INT 4
66868: PPUSH
66869: LD_OWVAR 2
66873: PPUSH
66874: LD_INT 0
66876: PPUSH
66877: CALL_OW 324
66881: END
// every 0 0$1 trigger StreamModeActive and sShovel do
66882: LD_EXP 73
66886: PUSH
66887: LD_EXP 110
66891: AND
66892: IFFALSE 66912
66894: GO 66896
66896: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
66897: LD_INT 19
66899: PPUSH
66900: LD_OWVAR 2
66904: PPUSH
66905: LD_INT 0
66907: PPUSH
66908: CALL_OW 324
66912: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
66913: LD_EXP 73
66917: PUSH
66918: LD_EXP 82
66922: AND
66923: IFFALSE 67025
66925: GO 66927
66927: DISABLE
66928: LD_INT 0
66930: PPUSH
66931: PPUSH
// begin enable ;
66932: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
66933: LD_ADDR_VAR 0 2
66937: PUSH
66938: LD_INT 22
66940: PUSH
66941: LD_OWVAR 2
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: LD_INT 34
66955: PUSH
66956: LD_INT 11
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 34
66965: PUSH
66966: LD_INT 30
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: LIST
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PPUSH
66982: CALL_OW 69
66986: ST_TO_ADDR
// if not tmp then
66987: LD_VAR 0 2
66991: NOT
66992: IFFALSE 66996
// exit ;
66994: GO 67025
// for i in tmp do
66996: LD_ADDR_VAR 0 1
67000: PUSH
67001: LD_VAR 0 2
67005: PUSH
67006: FOR_IN
67007: IFFALSE 67023
// begin SetLives ( i , 0 ) ;
67009: LD_VAR 0 1
67013: PPUSH
67014: LD_INT 0
67016: PPUSH
67017: CALL_OW 234
// end ;
67021: GO 67006
67023: POP
67024: POP
// end ;
67025: PPOPN 2
67027: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67028: LD_EXP 73
67032: PUSH
67033: LD_EXP 83
67037: AND
67038: IFFALSE 67058
67040: GO 67042
67042: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
67043: LD_INT 32
67045: PPUSH
67046: LD_OWVAR 2
67050: PPUSH
67051: LD_INT 0
67053: PPUSH
67054: CALL_OW 324
67058: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
67059: LD_EXP 73
67063: PUSH
67064: LD_EXP 84
67068: AND
67069: IFFALSE 67250
67071: GO 67073
67073: DISABLE
67074: LD_INT 0
67076: PPUSH
67077: PPUSH
67078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
67079: LD_ADDR_VAR 0 2
67083: PUSH
67084: LD_INT 22
67086: PUSH
67087: LD_OWVAR 2
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 33
67098: PUSH
67099: LD_INT 3
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PPUSH
67110: CALL_OW 69
67114: ST_TO_ADDR
// if not tmp then
67115: LD_VAR 0 2
67119: NOT
67120: IFFALSE 67124
// exit ;
67122: GO 67250
// side := 0 ;
67124: LD_ADDR_VAR 0 3
67128: PUSH
67129: LD_INT 0
67131: ST_TO_ADDR
// for i := 1 to 8 do
67132: LD_ADDR_VAR 0 1
67136: PUSH
67137: DOUBLE
67138: LD_INT 1
67140: DEC
67141: ST_TO_ADDR
67142: LD_INT 8
67144: PUSH
67145: FOR_TO
67146: IFFALSE 67194
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
67148: LD_OWVAR 2
67152: PUSH
67153: LD_VAR 0 1
67157: NONEQUAL
67158: PUSH
67159: LD_OWVAR 2
67163: PPUSH
67164: LD_VAR 0 1
67168: PPUSH
67169: CALL_OW 81
67173: PUSH
67174: LD_INT 2
67176: EQUAL
67177: AND
67178: IFFALSE 67192
// begin side := i ;
67180: LD_ADDR_VAR 0 3
67184: PUSH
67185: LD_VAR 0 1
67189: ST_TO_ADDR
// break ;
67190: GO 67194
// end ;
67192: GO 67145
67194: POP
67195: POP
// if not side then
67196: LD_VAR 0 3
67200: NOT
67201: IFFALSE 67205
// exit ;
67203: GO 67250
// for i := 1 to tmp do
67205: LD_ADDR_VAR 0 1
67209: PUSH
67210: DOUBLE
67211: LD_INT 1
67213: DEC
67214: ST_TO_ADDR
67215: LD_VAR 0 2
67219: PUSH
67220: FOR_TO
67221: IFFALSE 67248
// if Prob ( 60 ) then
67223: LD_INT 60
67225: PPUSH
67226: CALL_OW 13
67230: IFFALSE 67246
// SetSide ( i , side ) ;
67232: LD_VAR 0 1
67236: PPUSH
67237: LD_VAR 0 3
67241: PPUSH
67242: CALL_OW 235
67246: GO 67220
67248: POP
67249: POP
// end ;
67250: PPOPN 3
67252: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
67253: LD_EXP 73
67257: PUSH
67258: LD_EXP 86
67262: AND
67263: IFFALSE 67382
67265: GO 67267
67267: DISABLE
67268: LD_INT 0
67270: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
67271: LD_ADDR_VAR 0 1
67275: PUSH
67276: LD_INT 22
67278: PUSH
67279: LD_OWVAR 2
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 21
67290: PUSH
67291: LD_INT 1
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 3
67300: PUSH
67301: LD_INT 23
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: LIST
67319: PPUSH
67320: CALL_OW 69
67324: PUSH
67325: FOR_IN
67326: IFFALSE 67380
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
67328: LD_VAR 0 1
67332: PPUSH
67333: CALL_OW 257
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: LD_INT 3
67346: PUSH
67347: LD_INT 4
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: IN
67356: IFFALSE 67378
// SetClass ( un , rand ( 1 , 4 ) ) ;
67358: LD_VAR 0 1
67362: PPUSH
67363: LD_INT 1
67365: PPUSH
67366: LD_INT 4
67368: PPUSH
67369: CALL_OW 12
67373: PPUSH
67374: CALL_OW 336
67378: GO 67325
67380: POP
67381: POP
// end ;
67382: PPOPN 1
67384: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
67385: LD_EXP 73
67389: PUSH
67390: LD_EXP 85
67394: AND
67395: IFFALSE 67474
67397: GO 67399
67399: DISABLE
67400: LD_INT 0
67402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67403: LD_ADDR_VAR 0 1
67407: PUSH
67408: LD_INT 22
67410: PUSH
67411: LD_OWVAR 2
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 21
67422: PUSH
67423: LD_INT 3
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PPUSH
67434: CALL_OW 69
67438: ST_TO_ADDR
// if not tmp then
67439: LD_VAR 0 1
67443: NOT
67444: IFFALSE 67448
// exit ;
67446: GO 67474
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
67448: LD_VAR 0 1
67452: PUSH
67453: LD_INT 1
67455: PPUSH
67456: LD_VAR 0 1
67460: PPUSH
67461: CALL_OW 12
67465: ARRAY
67466: PPUSH
67467: LD_INT 100
67469: PPUSH
67470: CALL_OW 234
// end ;
67474: PPOPN 1
67476: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
67477: LD_EXP 73
67481: PUSH
67482: LD_EXP 87
67486: AND
67487: IFFALSE 67585
67489: GO 67491
67491: DISABLE
67492: LD_INT 0
67494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67495: LD_ADDR_VAR 0 1
67499: PUSH
67500: LD_INT 22
67502: PUSH
67503: LD_OWVAR 2
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 21
67514: PUSH
67515: LD_INT 1
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PPUSH
67526: CALL_OW 69
67530: ST_TO_ADDR
// if not tmp then
67531: LD_VAR 0 1
67535: NOT
67536: IFFALSE 67540
// exit ;
67538: GO 67585
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
67540: LD_VAR 0 1
67544: PUSH
67545: LD_INT 1
67547: PPUSH
67548: LD_VAR 0 1
67552: PPUSH
67553: CALL_OW 12
67557: ARRAY
67558: PPUSH
67559: LD_INT 1
67561: PPUSH
67562: LD_INT 4
67564: PPUSH
67565: CALL_OW 12
67569: PPUSH
67570: LD_INT 3000
67572: PPUSH
67573: LD_INT 9000
67575: PPUSH
67576: CALL_OW 12
67580: PPUSH
67581: CALL_OW 492
// end ;
67585: PPOPN 1
67587: END
// every 0 0$1 trigger StreamModeActive and sDepot do
67588: LD_EXP 73
67592: PUSH
67593: LD_EXP 88
67597: AND
67598: IFFALSE 67618
67600: GO 67602
67602: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
67603: LD_INT 1
67605: PPUSH
67606: LD_OWVAR 2
67610: PPUSH
67611: LD_INT 0
67613: PPUSH
67614: CALL_OW 324
67618: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
67619: LD_EXP 73
67623: PUSH
67624: LD_EXP 89
67628: AND
67629: IFFALSE 67712
67631: GO 67633
67633: DISABLE
67634: LD_INT 0
67636: PPUSH
67637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67638: LD_ADDR_VAR 0 2
67642: PUSH
67643: LD_INT 22
67645: PUSH
67646: LD_OWVAR 2
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 21
67657: PUSH
67658: LD_INT 3
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PPUSH
67669: CALL_OW 69
67673: ST_TO_ADDR
// if not tmp then
67674: LD_VAR 0 2
67678: NOT
67679: IFFALSE 67683
// exit ;
67681: GO 67712
// for i in tmp do
67683: LD_ADDR_VAR 0 1
67687: PUSH
67688: LD_VAR 0 2
67692: PUSH
67693: FOR_IN
67694: IFFALSE 67710
// SetBLevel ( i , 10 ) ;
67696: LD_VAR 0 1
67700: PPUSH
67701: LD_INT 10
67703: PPUSH
67704: CALL_OW 241
67708: GO 67693
67710: POP
67711: POP
// end ;
67712: PPOPN 2
67714: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
67715: LD_EXP 73
67719: PUSH
67720: LD_EXP 90
67724: AND
67725: IFFALSE 67836
67727: GO 67729
67729: DISABLE
67730: LD_INT 0
67732: PPUSH
67733: PPUSH
67734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67735: LD_ADDR_VAR 0 3
67739: PUSH
67740: LD_INT 22
67742: PUSH
67743: LD_OWVAR 2
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 25
67754: PUSH
67755: LD_INT 1
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PPUSH
67766: CALL_OW 69
67770: ST_TO_ADDR
// if not tmp then
67771: LD_VAR 0 3
67775: NOT
67776: IFFALSE 67780
// exit ;
67778: GO 67836
// un := tmp [ rand ( 1 , tmp ) ] ;
67780: LD_ADDR_VAR 0 2
67784: PUSH
67785: LD_VAR 0 3
67789: PUSH
67790: LD_INT 1
67792: PPUSH
67793: LD_VAR 0 3
67797: PPUSH
67798: CALL_OW 12
67802: ARRAY
67803: ST_TO_ADDR
// if Crawls ( un ) then
67804: LD_VAR 0 2
67808: PPUSH
67809: CALL_OW 318
67813: IFFALSE 67824
// ComWalk ( un ) ;
67815: LD_VAR 0 2
67819: PPUSH
67820: CALL_OW 138
// SetClass ( un , class_sniper ) ;
67824: LD_VAR 0 2
67828: PPUSH
67829: LD_INT 5
67831: PPUSH
67832: CALL_OW 336
// end ;
67836: PPOPN 3
67838: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
67839: LD_EXP 73
67843: PUSH
67844: LD_EXP 91
67848: AND
67849: PUSH
67850: LD_OWVAR 67
67854: PUSH
67855: LD_INT 3
67857: LESS
67858: AND
67859: IFFALSE 67878
67861: GO 67863
67863: DISABLE
// Difficulty := Difficulty + 1 ;
67864: LD_ADDR_OWVAR 67
67868: PUSH
67869: LD_OWVAR 67
67873: PUSH
67874: LD_INT 1
67876: PLUS
67877: ST_TO_ADDR
67878: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
67879: LD_EXP 73
67883: PUSH
67884: LD_EXP 92
67888: AND
67889: IFFALSE 67992
67891: GO 67893
67893: DISABLE
67894: LD_INT 0
67896: PPUSH
// begin for i := 1 to 5 do
67897: LD_ADDR_VAR 0 1
67901: PUSH
67902: DOUBLE
67903: LD_INT 1
67905: DEC
67906: ST_TO_ADDR
67907: LD_INT 5
67909: PUSH
67910: FOR_TO
67911: IFFALSE 67990
// begin uc_nation := nation_nature ;
67913: LD_ADDR_OWVAR 21
67917: PUSH
67918: LD_INT 0
67920: ST_TO_ADDR
// uc_side := 0 ;
67921: LD_ADDR_OWVAR 20
67925: PUSH
67926: LD_INT 0
67928: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67929: LD_ADDR_OWVAR 29
67933: PUSH
67934: LD_INT 12
67936: PUSH
67937: LD_INT 12
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: ST_TO_ADDR
// hc_agressivity := 20 ;
67944: LD_ADDR_OWVAR 35
67948: PUSH
67949: LD_INT 20
67951: ST_TO_ADDR
// hc_class := class_tiger ;
67952: LD_ADDR_OWVAR 28
67956: PUSH
67957: LD_INT 14
67959: ST_TO_ADDR
// hc_gallery :=  ;
67960: LD_ADDR_OWVAR 33
67964: PUSH
67965: LD_STRING 
67967: ST_TO_ADDR
// hc_name :=  ;
67968: LD_ADDR_OWVAR 26
67972: PUSH
67973: LD_STRING 
67975: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
67976: CALL_OW 44
67980: PPUSH
67981: LD_INT 0
67983: PPUSH
67984: CALL_OW 51
// end ;
67988: GO 67910
67990: POP
67991: POP
// end ;
67992: PPOPN 1
67994: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67995: LD_EXP 73
67999: PUSH
68000: LD_EXP 93
68004: AND
68005: IFFALSE 68014
68007: GO 68009
68009: DISABLE
// StreamSibBomb ;
68010: CALL 68015 0 0
68014: END
// export function StreamSibBomb ; var i , x , y ; begin
68015: LD_INT 0
68017: PPUSH
68018: PPUSH
68019: PPUSH
68020: PPUSH
// result := false ;
68021: LD_ADDR_VAR 0 1
68025: PUSH
68026: LD_INT 0
68028: ST_TO_ADDR
// for i := 1 to 16 do
68029: LD_ADDR_VAR 0 2
68033: PUSH
68034: DOUBLE
68035: LD_INT 1
68037: DEC
68038: ST_TO_ADDR
68039: LD_INT 16
68041: PUSH
68042: FOR_TO
68043: IFFALSE 68242
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68045: LD_ADDR_VAR 0 3
68049: PUSH
68050: LD_INT 10
68052: PUSH
68053: LD_INT 20
68055: PUSH
68056: LD_INT 30
68058: PUSH
68059: LD_INT 40
68061: PUSH
68062: LD_INT 50
68064: PUSH
68065: LD_INT 60
68067: PUSH
68068: LD_INT 70
68070: PUSH
68071: LD_INT 80
68073: PUSH
68074: LD_INT 90
68076: PUSH
68077: LD_INT 100
68079: PUSH
68080: LD_INT 110
68082: PUSH
68083: LD_INT 120
68085: PUSH
68086: LD_INT 130
68088: PUSH
68089: LD_INT 140
68091: PUSH
68092: LD_INT 150
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 1
68114: PPUSH
68115: LD_INT 15
68117: PPUSH
68118: CALL_OW 12
68122: ARRAY
68123: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68124: LD_ADDR_VAR 0 4
68128: PUSH
68129: LD_INT 10
68131: PUSH
68132: LD_INT 20
68134: PUSH
68135: LD_INT 30
68137: PUSH
68138: LD_INT 40
68140: PUSH
68141: LD_INT 50
68143: PUSH
68144: LD_INT 60
68146: PUSH
68147: LD_INT 70
68149: PUSH
68150: LD_INT 80
68152: PUSH
68153: LD_INT 90
68155: PUSH
68156: LD_INT 100
68158: PUSH
68159: LD_INT 110
68161: PUSH
68162: LD_INT 120
68164: PUSH
68165: LD_INT 130
68167: PUSH
68168: LD_INT 140
68170: PUSH
68171: LD_INT 150
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 1
68193: PPUSH
68194: LD_INT 15
68196: PPUSH
68197: CALL_OW 12
68201: ARRAY
68202: ST_TO_ADDR
// if ValidHex ( x , y ) then
68203: LD_VAR 0 3
68207: PPUSH
68208: LD_VAR 0 4
68212: PPUSH
68213: CALL_OW 488
68217: IFFALSE 68240
// begin result := [ x , y ] ;
68219: LD_ADDR_VAR 0 1
68223: PUSH
68224: LD_VAR 0 3
68228: PUSH
68229: LD_VAR 0 4
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: ST_TO_ADDR
// break ;
68238: GO 68242
// end ; end ;
68240: GO 68042
68242: POP
68243: POP
// if result then
68244: LD_VAR 0 1
68248: IFFALSE 68308
// begin ToLua ( playSibBomb() ) ;
68250: LD_STRING playSibBomb()
68252: PPUSH
68253: CALL_OW 559
// wait ( 0 0$14 ) ;
68257: LD_INT 490
68259: PPUSH
68260: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
68264: LD_VAR 0 1
68268: PUSH
68269: LD_INT 1
68271: ARRAY
68272: PPUSH
68273: LD_VAR 0 1
68277: PUSH
68278: LD_INT 2
68280: ARRAY
68281: PPUSH
68282: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
68286: LD_VAR 0 1
68290: PUSH
68291: LD_INT 1
68293: ARRAY
68294: PPUSH
68295: LD_VAR 0 1
68299: PUSH
68300: LD_INT 2
68302: ARRAY
68303: PPUSH
68304: CALL_OW 429
// end ; end ;
68308: LD_VAR 0 1
68312: RET
// every 0 0$1 trigger StreamModeActive and sReset do
68313: LD_EXP 73
68317: PUSH
68318: LD_EXP 95
68322: AND
68323: IFFALSE 68335
68325: GO 68327
68327: DISABLE
// YouLost (  ) ;
68328: LD_STRING 
68330: PPUSH
68331: CALL_OW 104
68335: END
// every 0 0$1 trigger StreamModeActive and sFog do
68336: LD_EXP 73
68340: PUSH
68341: LD_EXP 94
68345: AND
68346: IFFALSE 68360
68348: GO 68350
68350: DISABLE
// FogOff ( your_side ) ;
68351: LD_OWVAR 2
68355: PPUSH
68356: CALL_OW 344
68360: END
// every 0 0$1 trigger StreamModeActive and sSun do
68361: LD_EXP 73
68365: PUSH
68366: LD_EXP 96
68370: AND
68371: IFFALSE 68399
68373: GO 68375
68375: DISABLE
// begin solar_recharge_percent := 0 ;
68376: LD_ADDR_OWVAR 79
68380: PUSH
68381: LD_INT 0
68383: ST_TO_ADDR
// wait ( 5 5$00 ) ;
68384: LD_INT 10500
68386: PPUSH
68387: CALL_OW 67
// solar_recharge_percent := 100 ;
68391: LD_ADDR_OWVAR 79
68395: PUSH
68396: LD_INT 100
68398: ST_TO_ADDR
// end ;
68399: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
68400: LD_EXP 73
68404: PUSH
68405: LD_EXP 97
68409: AND
68410: IFFALSE 68649
68412: GO 68414
68414: DISABLE
68415: LD_INT 0
68417: PPUSH
68418: PPUSH
68419: PPUSH
// begin tmp := [ ] ;
68420: LD_ADDR_VAR 0 3
68424: PUSH
68425: EMPTY
68426: ST_TO_ADDR
// for i := 1 to 6 do
68427: LD_ADDR_VAR 0 1
68431: PUSH
68432: DOUBLE
68433: LD_INT 1
68435: DEC
68436: ST_TO_ADDR
68437: LD_INT 6
68439: PUSH
68440: FOR_TO
68441: IFFALSE 68546
// begin uc_nation := nation_nature ;
68443: LD_ADDR_OWVAR 21
68447: PUSH
68448: LD_INT 0
68450: ST_TO_ADDR
// uc_side := 0 ;
68451: LD_ADDR_OWVAR 20
68455: PUSH
68456: LD_INT 0
68458: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68459: LD_ADDR_OWVAR 29
68463: PUSH
68464: LD_INT 12
68466: PUSH
68467: LD_INT 12
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: ST_TO_ADDR
// hc_agressivity := 20 ;
68474: LD_ADDR_OWVAR 35
68478: PUSH
68479: LD_INT 20
68481: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
68482: LD_ADDR_OWVAR 28
68486: PUSH
68487: LD_INT 17
68489: ST_TO_ADDR
// hc_gallery :=  ;
68490: LD_ADDR_OWVAR 33
68494: PUSH
68495: LD_STRING 
68497: ST_TO_ADDR
// hc_name :=  ;
68498: LD_ADDR_OWVAR 26
68502: PUSH
68503: LD_STRING 
68505: ST_TO_ADDR
// un := CreateHuman ;
68506: LD_ADDR_VAR 0 2
68510: PUSH
68511: CALL_OW 44
68515: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
68516: LD_VAR 0 2
68520: PPUSH
68521: LD_INT 1
68523: PPUSH
68524: CALL_OW 51
// tmp := tmp ^ un ;
68528: LD_ADDR_VAR 0 3
68532: PUSH
68533: LD_VAR 0 3
68537: PUSH
68538: LD_VAR 0 2
68542: ADD
68543: ST_TO_ADDR
// end ;
68544: GO 68440
68546: POP
68547: POP
// repeat wait ( 0 0$1 ) ;
68548: LD_INT 35
68550: PPUSH
68551: CALL_OW 67
// for un in tmp do
68555: LD_ADDR_VAR 0 2
68559: PUSH
68560: LD_VAR 0 3
68564: PUSH
68565: FOR_IN
68566: IFFALSE 68640
// begin if IsDead ( un ) then
68568: LD_VAR 0 2
68572: PPUSH
68573: CALL_OW 301
68577: IFFALSE 68597
// begin tmp := tmp diff un ;
68579: LD_ADDR_VAR 0 3
68583: PUSH
68584: LD_VAR 0 3
68588: PUSH
68589: LD_VAR 0 2
68593: DIFF
68594: ST_TO_ADDR
// continue ;
68595: GO 68565
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
68597: LD_VAR 0 2
68601: PPUSH
68602: LD_INT 3
68604: PUSH
68605: LD_INT 22
68607: PUSH
68608: LD_INT 0
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PPUSH
68619: CALL_OW 69
68623: PPUSH
68624: LD_VAR 0 2
68628: PPUSH
68629: CALL_OW 74
68633: PPUSH
68634: CALL_OW 115
// end ;
68638: GO 68565
68640: POP
68641: POP
// until not tmp ;
68642: LD_VAR 0 3
68646: NOT
68647: IFFALSE 68548
// end ;
68649: PPOPN 3
68651: END
// every 0 0$1 trigger StreamModeActive and sTroll do
68652: LD_EXP 73
68656: PUSH
68657: LD_EXP 98
68661: AND
68662: IFFALSE 68716
68664: GO 68666
68666: DISABLE
// begin ToLua ( displayTroll(); ) ;
68667: LD_STRING displayTroll();
68669: PPUSH
68670: CALL_OW 559
// wait ( 3 3$00 ) ;
68674: LD_INT 6300
68676: PPUSH
68677: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68681: LD_STRING hideTroll();
68683: PPUSH
68684: CALL_OW 559
// wait ( 1 1$00 ) ;
68688: LD_INT 2100
68690: PPUSH
68691: CALL_OW 67
// ToLua ( displayTroll(); ) ;
68695: LD_STRING displayTroll();
68697: PPUSH
68698: CALL_OW 559
// wait ( 1 1$00 ) ;
68702: LD_INT 2100
68704: PPUSH
68705: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68709: LD_STRING hideTroll();
68711: PPUSH
68712: CALL_OW 559
// end ;
68716: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
68717: LD_EXP 73
68721: PUSH
68722: LD_EXP 99
68726: AND
68727: IFFALSE 68790
68729: GO 68731
68731: DISABLE
68732: LD_INT 0
68734: PPUSH
// begin p := 0 ;
68735: LD_ADDR_VAR 0 1
68739: PUSH
68740: LD_INT 0
68742: ST_TO_ADDR
// repeat game_speed := 1 ;
68743: LD_ADDR_OWVAR 65
68747: PUSH
68748: LD_INT 1
68750: ST_TO_ADDR
// wait ( 0 0$1 ) ;
68751: LD_INT 35
68753: PPUSH
68754: CALL_OW 67
// p := p + 1 ;
68758: LD_ADDR_VAR 0 1
68762: PUSH
68763: LD_VAR 0 1
68767: PUSH
68768: LD_INT 1
68770: PLUS
68771: ST_TO_ADDR
// until p >= 60 ;
68772: LD_VAR 0 1
68776: PUSH
68777: LD_INT 60
68779: GREATEREQUAL
68780: IFFALSE 68743
// game_speed := 4 ;
68782: LD_ADDR_OWVAR 65
68786: PUSH
68787: LD_INT 4
68789: ST_TO_ADDR
// end ;
68790: PPOPN 1
68792: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
68793: LD_EXP 73
68797: PUSH
68798: LD_EXP 100
68802: AND
68803: IFFALSE 68949
68805: GO 68807
68807: DISABLE
68808: LD_INT 0
68810: PPUSH
68811: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68812: LD_ADDR_VAR 0 1
68816: PUSH
68817: LD_INT 22
68819: PUSH
68820: LD_OWVAR 2
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 2
68831: PUSH
68832: LD_INT 30
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 30
68844: PUSH
68845: LD_INT 1
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: LIST
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PPUSH
68861: CALL_OW 69
68865: ST_TO_ADDR
// if not depot then
68866: LD_VAR 0 1
68870: NOT
68871: IFFALSE 68875
// exit ;
68873: GO 68949
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
68875: LD_ADDR_VAR 0 2
68879: PUSH
68880: LD_VAR 0 1
68884: PUSH
68885: LD_INT 1
68887: PPUSH
68888: LD_VAR 0 1
68892: PPUSH
68893: CALL_OW 12
68897: ARRAY
68898: PPUSH
68899: CALL_OW 274
68903: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
68904: LD_VAR 0 2
68908: PPUSH
68909: LD_INT 1
68911: PPUSH
68912: LD_INT 0
68914: PPUSH
68915: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
68919: LD_VAR 0 2
68923: PPUSH
68924: LD_INT 2
68926: PPUSH
68927: LD_INT 0
68929: PPUSH
68930: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
68934: LD_VAR 0 2
68938: PPUSH
68939: LD_INT 3
68941: PPUSH
68942: LD_INT 0
68944: PPUSH
68945: CALL_OW 277
// end ;
68949: PPOPN 2
68951: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
68952: LD_EXP 73
68956: PUSH
68957: LD_EXP 101
68961: AND
68962: IFFALSE 69059
68964: GO 68966
68966: DISABLE
68967: LD_INT 0
68969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68970: LD_ADDR_VAR 0 1
68974: PUSH
68975: LD_INT 22
68977: PUSH
68978: LD_OWVAR 2
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 21
68989: PUSH
68990: LD_INT 1
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 3
68999: PUSH
69000: LD_INT 23
69002: PUSH
69003: LD_INT 0
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: LIST
69018: PPUSH
69019: CALL_OW 69
69023: ST_TO_ADDR
// if not tmp then
69024: LD_VAR 0 1
69028: NOT
69029: IFFALSE 69033
// exit ;
69031: GO 69059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69033: LD_VAR 0 1
69037: PUSH
69038: LD_INT 1
69040: PPUSH
69041: LD_VAR 0 1
69045: PPUSH
69046: CALL_OW 12
69050: ARRAY
69051: PPUSH
69052: LD_INT 200
69054: PPUSH
69055: CALL_OW 234
// end ;
69059: PPOPN 1
69061: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
69062: LD_EXP 73
69066: PUSH
69067: LD_EXP 102
69071: AND
69072: IFFALSE 69151
69074: GO 69076
69076: DISABLE
69077: LD_INT 0
69079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
69080: LD_ADDR_VAR 0 1
69084: PUSH
69085: LD_INT 22
69087: PUSH
69088: LD_OWVAR 2
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 21
69099: PUSH
69100: LD_INT 2
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PPUSH
69111: CALL_OW 69
69115: ST_TO_ADDR
// if not tmp then
69116: LD_VAR 0 1
69120: NOT
69121: IFFALSE 69125
// exit ;
69123: GO 69151
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
69125: LD_VAR 0 1
69129: PUSH
69130: LD_INT 1
69132: PPUSH
69133: LD_VAR 0 1
69137: PPUSH
69138: CALL_OW 12
69142: ARRAY
69143: PPUSH
69144: LD_INT 60
69146: PPUSH
69147: CALL_OW 234
// end ;
69151: PPOPN 1
69153: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
69154: LD_EXP 73
69158: PUSH
69159: LD_EXP 103
69163: AND
69164: IFFALSE 69263
69166: GO 69168
69168: DISABLE
69169: LD_INT 0
69171: PPUSH
69172: PPUSH
// begin enable ;
69173: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
69174: LD_ADDR_VAR 0 1
69178: PUSH
69179: LD_INT 22
69181: PUSH
69182: LD_OWVAR 2
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 61
69193: PUSH
69194: EMPTY
69195: LIST
69196: PUSH
69197: LD_INT 33
69199: PUSH
69200: LD_INT 2
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: LIST
69211: PPUSH
69212: CALL_OW 69
69216: ST_TO_ADDR
// if not tmp then
69217: LD_VAR 0 1
69221: NOT
69222: IFFALSE 69226
// exit ;
69224: GO 69263
// for i in tmp do
69226: LD_ADDR_VAR 0 2
69230: PUSH
69231: LD_VAR 0 1
69235: PUSH
69236: FOR_IN
69237: IFFALSE 69261
// if IsControledBy ( i ) then
69239: LD_VAR 0 2
69243: PPUSH
69244: CALL_OW 312
69248: IFFALSE 69259
// ComUnlink ( i ) ;
69250: LD_VAR 0 2
69254: PPUSH
69255: CALL_OW 136
69259: GO 69236
69261: POP
69262: POP
// end ;
69263: PPOPN 2
69265: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
69266: LD_EXP 73
69270: PUSH
69271: LD_EXP 104
69275: AND
69276: IFFALSE 69416
69278: GO 69280
69280: DISABLE
69281: LD_INT 0
69283: PPUSH
69284: PPUSH
// begin ToLua ( displayPowell(); ) ;
69285: LD_STRING displayPowell();
69287: PPUSH
69288: CALL_OW 559
// uc_side := 0 ;
69292: LD_ADDR_OWVAR 20
69296: PUSH
69297: LD_INT 0
69299: ST_TO_ADDR
// uc_nation := 2 ;
69300: LD_ADDR_OWVAR 21
69304: PUSH
69305: LD_INT 2
69307: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
69308: LD_ADDR_OWVAR 37
69312: PUSH
69313: LD_INT 14
69315: ST_TO_ADDR
// vc_engine := engine_siberite ;
69316: LD_ADDR_OWVAR 39
69320: PUSH
69321: LD_INT 3
69323: ST_TO_ADDR
// vc_control := control_apeman ;
69324: LD_ADDR_OWVAR 38
69328: PUSH
69329: LD_INT 5
69331: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
69332: LD_ADDR_OWVAR 40
69336: PUSH
69337: LD_INT 29
69339: ST_TO_ADDR
// un := CreateVehicle ;
69340: LD_ADDR_VAR 0 2
69344: PUSH
69345: CALL_OW 45
69349: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69350: LD_VAR 0 2
69354: PPUSH
69355: LD_INT 1
69357: PPUSH
69358: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69362: LD_INT 35
69364: PPUSH
69365: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69369: LD_VAR 0 2
69373: PPUSH
69374: LD_INT 22
69376: PUSH
69377: LD_OWVAR 2
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PPUSH
69386: CALL_OW 69
69390: PPUSH
69391: LD_VAR 0 2
69395: PPUSH
69396: CALL_OW 74
69400: PPUSH
69401: CALL_OW 115
// until IsDead ( un ) ;
69405: LD_VAR 0 2
69409: PPUSH
69410: CALL_OW 301
69414: IFFALSE 69362
// end ;
69416: PPOPN 2
69418: END
// every 0 0$1 trigger StreamModeActive and sStu do
69419: LD_EXP 73
69423: PUSH
69424: LD_EXP 112
69428: AND
69429: IFFALSE 69445
69431: GO 69433
69433: DISABLE
// begin ToLua ( displayStucuk(); ) ;
69434: LD_STRING displayStucuk();
69436: PPUSH
69437: CALL_OW 559
// ResetFog ;
69441: CALL_OW 335
// end ;
69445: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
69446: LD_EXP 73
69450: PUSH
69451: LD_EXP 105
69455: AND
69456: IFFALSE 69597
69458: GO 69460
69460: DISABLE
69461: LD_INT 0
69463: PPUSH
69464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69465: LD_ADDR_VAR 0 2
69469: PUSH
69470: LD_INT 22
69472: PUSH
69473: LD_OWVAR 2
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 21
69484: PUSH
69485: LD_INT 1
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PPUSH
69496: CALL_OW 69
69500: ST_TO_ADDR
// if not tmp then
69501: LD_VAR 0 2
69505: NOT
69506: IFFALSE 69510
// exit ;
69508: GO 69597
// un := tmp [ rand ( 1 , tmp ) ] ;
69510: LD_ADDR_VAR 0 1
69514: PUSH
69515: LD_VAR 0 2
69519: PUSH
69520: LD_INT 1
69522: PPUSH
69523: LD_VAR 0 2
69527: PPUSH
69528: CALL_OW 12
69532: ARRAY
69533: ST_TO_ADDR
// SetSide ( un , 0 ) ;
69534: LD_VAR 0 1
69538: PPUSH
69539: LD_INT 0
69541: PPUSH
69542: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
69546: LD_VAR 0 1
69550: PPUSH
69551: LD_OWVAR 3
69555: PUSH
69556: LD_VAR 0 1
69560: DIFF
69561: PPUSH
69562: LD_VAR 0 1
69566: PPUSH
69567: CALL_OW 74
69571: PPUSH
69572: CALL_OW 115
// wait ( 0 0$20 ) ;
69576: LD_INT 700
69578: PPUSH
69579: CALL_OW 67
// SetSide ( un , your_side ) ;
69583: LD_VAR 0 1
69587: PPUSH
69588: LD_OWVAR 2
69592: PPUSH
69593: CALL_OW 235
// end ;
69597: PPOPN 2
69599: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
69600: LD_EXP 73
69604: PUSH
69605: LD_EXP 106
69609: AND
69610: IFFALSE 69716
69612: GO 69614
69614: DISABLE
69615: LD_INT 0
69617: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69618: LD_ADDR_VAR 0 1
69622: PUSH
69623: LD_INT 22
69625: PUSH
69626: LD_OWVAR 2
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 2
69637: PUSH
69638: LD_INT 30
69640: PUSH
69641: LD_INT 0
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 30
69650: PUSH
69651: LD_INT 1
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: LIST
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PPUSH
69667: CALL_OW 69
69671: ST_TO_ADDR
// if not depot then
69672: LD_VAR 0 1
69676: NOT
69677: IFFALSE 69681
// exit ;
69679: GO 69716
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
69681: LD_VAR 0 1
69685: PUSH
69686: LD_INT 1
69688: ARRAY
69689: PPUSH
69690: CALL_OW 250
69694: PPUSH
69695: LD_VAR 0 1
69699: PUSH
69700: LD_INT 1
69702: ARRAY
69703: PPUSH
69704: CALL_OW 251
69708: PPUSH
69709: LD_INT 70
69711: PPUSH
69712: CALL_OW 495
// end ;
69716: PPOPN 1
69718: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
69719: LD_EXP 73
69723: PUSH
69724: LD_EXP 107
69728: AND
69729: IFFALSE 69940
69731: GO 69733
69733: DISABLE
69734: LD_INT 0
69736: PPUSH
69737: PPUSH
69738: PPUSH
69739: PPUSH
69740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69741: LD_ADDR_VAR 0 5
69745: PUSH
69746: LD_INT 22
69748: PUSH
69749: LD_OWVAR 2
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 21
69760: PUSH
69761: LD_INT 1
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PPUSH
69772: CALL_OW 69
69776: ST_TO_ADDR
// if not tmp then
69777: LD_VAR 0 5
69781: NOT
69782: IFFALSE 69786
// exit ;
69784: GO 69940
// for i in tmp do
69786: LD_ADDR_VAR 0 1
69790: PUSH
69791: LD_VAR 0 5
69795: PUSH
69796: FOR_IN
69797: IFFALSE 69938
// begin d := rand ( 0 , 5 ) ;
69799: LD_ADDR_VAR 0 4
69803: PUSH
69804: LD_INT 0
69806: PPUSH
69807: LD_INT 5
69809: PPUSH
69810: CALL_OW 12
69814: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
69815: LD_ADDR_VAR 0 2
69819: PUSH
69820: LD_VAR 0 1
69824: PPUSH
69825: CALL_OW 250
69829: PPUSH
69830: LD_VAR 0 4
69834: PPUSH
69835: LD_INT 3
69837: PPUSH
69838: LD_INT 12
69840: PPUSH
69841: CALL_OW 12
69845: PPUSH
69846: CALL_OW 272
69850: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
69851: LD_ADDR_VAR 0 3
69855: PUSH
69856: LD_VAR 0 1
69860: PPUSH
69861: CALL_OW 251
69865: PPUSH
69866: LD_VAR 0 4
69870: PPUSH
69871: LD_INT 3
69873: PPUSH
69874: LD_INT 12
69876: PPUSH
69877: CALL_OW 12
69881: PPUSH
69882: CALL_OW 273
69886: ST_TO_ADDR
// if ValidHex ( x , y ) then
69887: LD_VAR 0 2
69891: PPUSH
69892: LD_VAR 0 3
69896: PPUSH
69897: CALL_OW 488
69901: IFFALSE 69936
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
69903: LD_VAR 0 1
69907: PPUSH
69908: LD_VAR 0 2
69912: PPUSH
69913: LD_VAR 0 3
69917: PPUSH
69918: LD_INT 3
69920: PPUSH
69921: LD_INT 6
69923: PPUSH
69924: CALL_OW 12
69928: PPUSH
69929: LD_INT 1
69931: PPUSH
69932: CALL_OW 483
// end ;
69936: GO 69796
69938: POP
69939: POP
// end ;
69940: PPOPN 5
69942: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
69943: LD_EXP 73
69947: PUSH
69948: LD_EXP 108
69952: AND
69953: IFFALSE 70047
69955: GO 69957
69957: DISABLE
69958: LD_INT 0
69960: PPUSH
69961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69962: LD_ADDR_VAR 0 2
69966: PUSH
69967: LD_INT 22
69969: PUSH
69970: LD_OWVAR 2
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 32
69981: PUSH
69982: LD_INT 1
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 21
69991: PUSH
69992: LD_INT 2
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: LIST
70003: PPUSH
70004: CALL_OW 69
70008: ST_TO_ADDR
// if not tmp then
70009: LD_VAR 0 2
70013: NOT
70014: IFFALSE 70018
// exit ;
70016: GO 70047
// for i in tmp do
70018: LD_ADDR_VAR 0 1
70022: PUSH
70023: LD_VAR 0 2
70027: PUSH
70028: FOR_IN
70029: IFFALSE 70045
// SetFuel ( i , 0 ) ;
70031: LD_VAR 0 1
70035: PPUSH
70036: LD_INT 0
70038: PPUSH
70039: CALL_OW 240
70043: GO 70028
70045: POP
70046: POP
// end ;
70047: PPOPN 2
70049: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
70050: LD_EXP 73
70054: PUSH
70055: LD_EXP 109
70059: AND
70060: IFFALSE 70126
70062: GO 70064
70064: DISABLE
70065: LD_INT 0
70067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70068: LD_ADDR_VAR 0 1
70072: PUSH
70073: LD_INT 22
70075: PUSH
70076: LD_OWVAR 2
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 30
70087: PUSH
70088: LD_INT 29
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PPUSH
70099: CALL_OW 69
70103: ST_TO_ADDR
// if not tmp then
70104: LD_VAR 0 1
70108: NOT
70109: IFFALSE 70113
// exit ;
70111: GO 70126
// DestroyUnit ( tmp [ 1 ] ) ;
70113: LD_VAR 0 1
70117: PUSH
70118: LD_INT 1
70120: ARRAY
70121: PPUSH
70122: CALL_OW 65
// end ;
70126: PPOPN 1
70128: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
70129: LD_EXP 73
70133: PUSH
70134: LD_EXP 111
70138: AND
70139: IFFALSE 70268
70141: GO 70143
70143: DISABLE
70144: LD_INT 0
70146: PPUSH
// begin uc_side := 0 ;
70147: LD_ADDR_OWVAR 20
70151: PUSH
70152: LD_INT 0
70154: ST_TO_ADDR
// uc_nation := nation_arabian ;
70155: LD_ADDR_OWVAR 21
70159: PUSH
70160: LD_INT 2
70162: ST_TO_ADDR
// hc_gallery :=  ;
70163: LD_ADDR_OWVAR 33
70167: PUSH
70168: LD_STRING 
70170: ST_TO_ADDR
// hc_name :=  ;
70171: LD_ADDR_OWVAR 26
70175: PUSH
70176: LD_STRING 
70178: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
70179: LD_INT 1
70181: PPUSH
70182: LD_INT 11
70184: PPUSH
70185: LD_INT 10
70187: PPUSH
70188: CALL_OW 380
// un := CreateHuman ;
70192: LD_ADDR_VAR 0 1
70196: PUSH
70197: CALL_OW 44
70201: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70202: LD_VAR 0 1
70206: PPUSH
70207: LD_INT 1
70209: PPUSH
70210: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70214: LD_INT 35
70216: PPUSH
70217: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70221: LD_VAR 0 1
70225: PPUSH
70226: LD_INT 22
70228: PUSH
70229: LD_OWVAR 2
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PPUSH
70238: CALL_OW 69
70242: PPUSH
70243: LD_VAR 0 1
70247: PPUSH
70248: CALL_OW 74
70252: PPUSH
70253: CALL_OW 115
// until IsDead ( un ) ;
70257: LD_VAR 0 1
70261: PPUSH
70262: CALL_OW 301
70266: IFFALSE 70214
// end ;
70268: PPOPN 1
70270: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
70271: LD_EXP 73
70275: PUSH
70276: LD_EXP 113
70280: AND
70281: IFFALSE 70293
70283: GO 70285
70285: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
70286: LD_STRING earthquake(getX(game), 0, 32)
70288: PPUSH
70289: CALL_OW 559
70293: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
70294: LD_EXP 73
70298: PUSH
70299: LD_EXP 114
70303: AND
70304: IFFALSE 70395
70306: GO 70308
70308: DISABLE
70309: LD_INT 0
70311: PPUSH
// begin enable ;
70312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
70313: LD_ADDR_VAR 0 1
70317: PUSH
70318: LD_INT 22
70320: PUSH
70321: LD_OWVAR 2
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 21
70332: PUSH
70333: LD_INT 2
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 33
70342: PUSH
70343: LD_INT 3
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: LIST
70354: PPUSH
70355: CALL_OW 69
70359: ST_TO_ADDR
// if not tmp then
70360: LD_VAR 0 1
70364: NOT
70365: IFFALSE 70369
// exit ;
70367: GO 70395
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70369: LD_VAR 0 1
70373: PUSH
70374: LD_INT 1
70376: PPUSH
70377: LD_VAR 0 1
70381: PPUSH
70382: CALL_OW 12
70386: ARRAY
70387: PPUSH
70388: LD_INT 1
70390: PPUSH
70391: CALL_OW 234
// end ;
70395: PPOPN 1
70397: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
70398: LD_EXP 73
70402: PUSH
70403: LD_EXP 115
70407: AND
70408: IFFALSE 70549
70410: GO 70412
70412: DISABLE
70413: LD_INT 0
70415: PPUSH
70416: PPUSH
70417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70418: LD_ADDR_VAR 0 3
70422: PUSH
70423: LD_INT 22
70425: PUSH
70426: LD_OWVAR 2
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 25
70437: PUSH
70438: LD_INT 1
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PPUSH
70449: CALL_OW 69
70453: ST_TO_ADDR
// if not tmp then
70454: LD_VAR 0 3
70458: NOT
70459: IFFALSE 70463
// exit ;
70461: GO 70549
// un := tmp [ rand ( 1 , tmp ) ] ;
70463: LD_ADDR_VAR 0 2
70467: PUSH
70468: LD_VAR 0 3
70472: PUSH
70473: LD_INT 1
70475: PPUSH
70476: LD_VAR 0 3
70480: PPUSH
70481: CALL_OW 12
70485: ARRAY
70486: ST_TO_ADDR
// if Crawls ( un ) then
70487: LD_VAR 0 2
70491: PPUSH
70492: CALL_OW 318
70496: IFFALSE 70507
// ComWalk ( un ) ;
70498: LD_VAR 0 2
70502: PPUSH
70503: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
70507: LD_VAR 0 2
70511: PPUSH
70512: LD_INT 9
70514: PPUSH
70515: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
70519: LD_INT 28
70521: PPUSH
70522: LD_OWVAR 2
70526: PPUSH
70527: LD_INT 2
70529: PPUSH
70530: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
70534: LD_INT 29
70536: PPUSH
70537: LD_OWVAR 2
70541: PPUSH
70542: LD_INT 2
70544: PPUSH
70545: CALL_OW 322
// end ;
70549: PPOPN 3
70551: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
70552: LD_EXP 73
70556: PUSH
70557: LD_EXP 116
70561: AND
70562: IFFALSE 70673
70564: GO 70566
70566: DISABLE
70567: LD_INT 0
70569: PPUSH
70570: PPUSH
70571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70572: LD_ADDR_VAR 0 3
70576: PUSH
70577: LD_INT 22
70579: PUSH
70580: LD_OWVAR 2
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 25
70591: PUSH
70592: LD_INT 1
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PPUSH
70603: CALL_OW 69
70607: ST_TO_ADDR
// if not tmp then
70608: LD_VAR 0 3
70612: NOT
70613: IFFALSE 70617
// exit ;
70615: GO 70673
// un := tmp [ rand ( 1 , tmp ) ] ;
70617: LD_ADDR_VAR 0 2
70621: PUSH
70622: LD_VAR 0 3
70626: PUSH
70627: LD_INT 1
70629: PPUSH
70630: LD_VAR 0 3
70634: PPUSH
70635: CALL_OW 12
70639: ARRAY
70640: ST_TO_ADDR
// if Crawls ( un ) then
70641: LD_VAR 0 2
70645: PPUSH
70646: CALL_OW 318
70650: IFFALSE 70661
// ComWalk ( un ) ;
70652: LD_VAR 0 2
70656: PPUSH
70657: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70661: LD_VAR 0 2
70665: PPUSH
70666: LD_INT 8
70668: PPUSH
70669: CALL_OW 336
// end ;
70673: PPOPN 3
70675: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
70676: LD_EXP 73
70680: PUSH
70681: LD_EXP 117
70685: AND
70686: IFFALSE 70830
70688: GO 70690
70690: DISABLE
70691: LD_INT 0
70693: PPUSH
70694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
70695: LD_ADDR_VAR 0 2
70699: PUSH
70700: LD_INT 22
70702: PUSH
70703: LD_OWVAR 2
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 21
70714: PUSH
70715: LD_INT 2
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 2
70724: PUSH
70725: LD_INT 34
70727: PUSH
70728: LD_INT 12
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 34
70737: PUSH
70738: LD_INT 51
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 34
70747: PUSH
70748: LD_INT 32
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: LIST
70765: PPUSH
70766: CALL_OW 69
70770: ST_TO_ADDR
// if not tmp then
70771: LD_VAR 0 2
70775: NOT
70776: IFFALSE 70780
// exit ;
70778: GO 70830
// for i in tmp do
70780: LD_ADDR_VAR 0 1
70784: PUSH
70785: LD_VAR 0 2
70789: PUSH
70790: FOR_IN
70791: IFFALSE 70828
// if GetCargo ( i , mat_artifact ) = 0 then
70793: LD_VAR 0 1
70797: PPUSH
70798: LD_INT 4
70800: PPUSH
70801: CALL_OW 289
70805: PUSH
70806: LD_INT 0
70808: EQUAL
70809: IFFALSE 70826
// SetCargo ( i , mat_siberit , 100 ) ;
70811: LD_VAR 0 1
70815: PPUSH
70816: LD_INT 3
70818: PPUSH
70819: LD_INT 100
70821: PPUSH
70822: CALL_OW 290
70826: GO 70790
70828: POP
70829: POP
// end ;
70830: PPOPN 2
70832: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
70833: LD_EXP 73
70837: PUSH
70838: LD_EXP 118
70842: AND
70843: IFFALSE 71026
70845: GO 70847
70847: DISABLE
70848: LD_INT 0
70850: PPUSH
70851: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70852: LD_ADDR_VAR 0 2
70856: PUSH
70857: LD_INT 22
70859: PUSH
70860: LD_OWVAR 2
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PPUSH
70869: CALL_OW 69
70873: ST_TO_ADDR
// if not tmp then
70874: LD_VAR 0 2
70878: NOT
70879: IFFALSE 70883
// exit ;
70881: GO 71026
// for i := 1 to 2 do
70883: LD_ADDR_VAR 0 1
70887: PUSH
70888: DOUBLE
70889: LD_INT 1
70891: DEC
70892: ST_TO_ADDR
70893: LD_INT 2
70895: PUSH
70896: FOR_TO
70897: IFFALSE 71024
// begin uc_side := your_side ;
70899: LD_ADDR_OWVAR 20
70903: PUSH
70904: LD_OWVAR 2
70908: ST_TO_ADDR
// uc_nation := nation_american ;
70909: LD_ADDR_OWVAR 21
70913: PUSH
70914: LD_INT 1
70916: ST_TO_ADDR
// vc_chassis := us_morphling ;
70917: LD_ADDR_OWVAR 37
70921: PUSH
70922: LD_INT 5
70924: ST_TO_ADDR
// vc_engine := engine_siberite ;
70925: LD_ADDR_OWVAR 39
70929: PUSH
70930: LD_INT 3
70932: ST_TO_ADDR
// vc_control := control_computer ;
70933: LD_ADDR_OWVAR 38
70937: PUSH
70938: LD_INT 3
70940: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70941: LD_ADDR_OWVAR 40
70945: PUSH
70946: LD_INT 10
70948: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70949: LD_VAR 0 2
70953: PUSH
70954: LD_INT 1
70956: ARRAY
70957: PPUSH
70958: CALL_OW 310
70962: NOT
70963: IFFALSE 71010
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
70965: CALL_OW 45
70969: PPUSH
70970: LD_VAR 0 2
70974: PUSH
70975: LD_INT 1
70977: ARRAY
70978: PPUSH
70979: CALL_OW 250
70983: PPUSH
70984: LD_VAR 0 2
70988: PUSH
70989: LD_INT 1
70991: ARRAY
70992: PPUSH
70993: CALL_OW 251
70997: PPUSH
70998: LD_INT 12
71000: PPUSH
71001: LD_INT 1
71003: PPUSH
71004: CALL_OW 50
71008: GO 71022
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71010: CALL_OW 45
71014: PPUSH
71015: LD_INT 1
71017: PPUSH
71018: CALL_OW 51
// end ;
71022: GO 70896
71024: POP
71025: POP
// end ;
71026: PPOPN 2
71028: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71029: LD_EXP 73
71033: PUSH
71034: LD_EXP 119
71038: AND
71039: IFFALSE 71261
71041: GO 71043
71043: DISABLE
71044: LD_INT 0
71046: PPUSH
71047: PPUSH
71048: PPUSH
71049: PPUSH
71050: PPUSH
71051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71052: LD_ADDR_VAR 0 6
71056: PUSH
71057: LD_INT 22
71059: PUSH
71060: LD_OWVAR 2
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 21
71071: PUSH
71072: LD_INT 1
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 3
71081: PUSH
71082: LD_INT 23
71084: PUSH
71085: LD_INT 0
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: LIST
71100: PPUSH
71101: CALL_OW 69
71105: ST_TO_ADDR
// if not tmp then
71106: LD_VAR 0 6
71110: NOT
71111: IFFALSE 71115
// exit ;
71113: GO 71261
// s1 := rand ( 1 , 4 ) ;
71115: LD_ADDR_VAR 0 2
71119: PUSH
71120: LD_INT 1
71122: PPUSH
71123: LD_INT 4
71125: PPUSH
71126: CALL_OW 12
71130: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
71131: LD_ADDR_VAR 0 4
71135: PUSH
71136: LD_VAR 0 6
71140: PUSH
71141: LD_INT 1
71143: ARRAY
71144: PPUSH
71145: LD_VAR 0 2
71149: PPUSH
71150: CALL_OW 259
71154: ST_TO_ADDR
// if s1 = 1 then
71155: LD_VAR 0 2
71159: PUSH
71160: LD_INT 1
71162: EQUAL
71163: IFFALSE 71183
// s2 := rand ( 2 , 4 ) else
71165: LD_ADDR_VAR 0 3
71169: PUSH
71170: LD_INT 2
71172: PPUSH
71173: LD_INT 4
71175: PPUSH
71176: CALL_OW 12
71180: ST_TO_ADDR
71181: GO 71191
// s2 := 1 ;
71183: LD_ADDR_VAR 0 3
71187: PUSH
71188: LD_INT 1
71190: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
71191: LD_ADDR_VAR 0 5
71195: PUSH
71196: LD_VAR 0 6
71200: PUSH
71201: LD_INT 1
71203: ARRAY
71204: PPUSH
71205: LD_VAR 0 3
71209: PPUSH
71210: CALL_OW 259
71214: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
71215: LD_VAR 0 6
71219: PUSH
71220: LD_INT 1
71222: ARRAY
71223: PPUSH
71224: LD_VAR 0 2
71228: PPUSH
71229: LD_VAR 0 5
71233: PPUSH
71234: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
71238: LD_VAR 0 6
71242: PUSH
71243: LD_INT 1
71245: ARRAY
71246: PPUSH
71247: LD_VAR 0 3
71251: PPUSH
71252: LD_VAR 0 4
71256: PPUSH
71257: CALL_OW 237
// end ;
71261: PPOPN 6
71263: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
71264: LD_EXP 73
71268: PUSH
71269: LD_EXP 120
71273: AND
71274: IFFALSE 71353
71276: GO 71278
71278: DISABLE
71279: LD_INT 0
71281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
71282: LD_ADDR_VAR 0 1
71286: PUSH
71287: LD_INT 22
71289: PUSH
71290: LD_OWVAR 2
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 30
71301: PUSH
71302: LD_INT 3
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PPUSH
71313: CALL_OW 69
71317: ST_TO_ADDR
// if not tmp then
71318: LD_VAR 0 1
71322: NOT
71323: IFFALSE 71327
// exit ;
71325: GO 71353
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71327: LD_VAR 0 1
71331: PUSH
71332: LD_INT 1
71334: PPUSH
71335: LD_VAR 0 1
71339: PPUSH
71340: CALL_OW 12
71344: ARRAY
71345: PPUSH
71346: LD_INT 1
71348: PPUSH
71349: CALL_OW 234
// end ;
71353: PPOPN 1
71355: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
71356: LD_EXP 73
71360: PUSH
71361: LD_EXP 121
71365: AND
71366: IFFALSE 71478
71368: GO 71370
71370: DISABLE
71371: LD_INT 0
71373: PPUSH
71374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
71375: LD_ADDR_VAR 0 2
71379: PUSH
71380: LD_INT 22
71382: PUSH
71383: LD_OWVAR 2
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 2
71394: PUSH
71395: LD_INT 30
71397: PUSH
71398: LD_INT 27
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 30
71407: PUSH
71408: LD_INT 26
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 30
71417: PUSH
71418: LD_INT 28
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PPUSH
71435: CALL_OW 69
71439: ST_TO_ADDR
// if not tmp then
71440: LD_VAR 0 2
71444: NOT
71445: IFFALSE 71449
// exit ;
71447: GO 71478
// for i in tmp do
71449: LD_ADDR_VAR 0 1
71453: PUSH
71454: LD_VAR 0 2
71458: PUSH
71459: FOR_IN
71460: IFFALSE 71476
// SetLives ( i , 1 ) ;
71462: LD_VAR 0 1
71466: PPUSH
71467: LD_INT 1
71469: PPUSH
71470: CALL_OW 234
71474: GO 71459
71476: POP
71477: POP
// end ;
71478: PPOPN 2
71480: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
71481: LD_EXP 73
71485: PUSH
71486: LD_EXP 122
71490: AND
71491: IFFALSE 71765
71493: GO 71495
71495: DISABLE
71496: LD_INT 0
71498: PPUSH
71499: PPUSH
71500: PPUSH
// begin i := rand ( 1 , 7 ) ;
71501: LD_ADDR_VAR 0 1
71505: PUSH
71506: LD_INT 1
71508: PPUSH
71509: LD_INT 7
71511: PPUSH
71512: CALL_OW 12
71516: ST_TO_ADDR
// case i of 1 :
71517: LD_VAR 0 1
71521: PUSH
71522: LD_INT 1
71524: DOUBLE
71525: EQUAL
71526: IFTRUE 71530
71528: GO 71540
71530: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
71531: LD_STRING earthquake(getX(game), 0, 32)
71533: PPUSH
71534: CALL_OW 559
71538: GO 71765
71540: LD_INT 2
71542: DOUBLE
71543: EQUAL
71544: IFTRUE 71548
71546: GO 71562
71548: POP
// begin ToLua ( displayStucuk(); ) ;
71549: LD_STRING displayStucuk();
71551: PPUSH
71552: CALL_OW 559
// ResetFog ;
71556: CALL_OW 335
// end ; 3 :
71560: GO 71765
71562: LD_INT 3
71564: DOUBLE
71565: EQUAL
71566: IFTRUE 71570
71568: GO 71674
71570: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71571: LD_ADDR_VAR 0 2
71575: PUSH
71576: LD_INT 22
71578: PUSH
71579: LD_OWVAR 2
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 25
71590: PUSH
71591: LD_INT 1
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PPUSH
71602: CALL_OW 69
71606: ST_TO_ADDR
// if not tmp then
71607: LD_VAR 0 2
71611: NOT
71612: IFFALSE 71616
// exit ;
71614: GO 71765
// un := tmp [ rand ( 1 , tmp ) ] ;
71616: LD_ADDR_VAR 0 3
71620: PUSH
71621: LD_VAR 0 2
71625: PUSH
71626: LD_INT 1
71628: PPUSH
71629: LD_VAR 0 2
71633: PPUSH
71634: CALL_OW 12
71638: ARRAY
71639: ST_TO_ADDR
// if Crawls ( un ) then
71640: LD_VAR 0 3
71644: PPUSH
71645: CALL_OW 318
71649: IFFALSE 71660
// ComWalk ( un ) ;
71651: LD_VAR 0 3
71655: PPUSH
71656: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71660: LD_VAR 0 3
71664: PPUSH
71665: LD_INT 8
71667: PPUSH
71668: CALL_OW 336
// end ; 4 :
71672: GO 71765
71674: LD_INT 4
71676: DOUBLE
71677: EQUAL
71678: IFTRUE 71682
71680: GO 71743
71682: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71683: LD_ADDR_VAR 0 2
71687: PUSH
71688: LD_INT 22
71690: PUSH
71691: LD_OWVAR 2
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: LD_INT 30
71702: PUSH
71703: LD_INT 29
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PPUSH
71714: CALL_OW 69
71718: ST_TO_ADDR
// if not tmp then
71719: LD_VAR 0 2
71723: NOT
71724: IFFALSE 71728
// exit ;
71726: GO 71765
// DestroyUnit ( tmp [ 1 ] ) ;
71728: LD_VAR 0 2
71732: PUSH
71733: LD_INT 1
71735: ARRAY
71736: PPUSH
71737: CALL_OW 65
// end ; 5 .. 7 :
71741: GO 71765
71743: LD_INT 5
71745: DOUBLE
71746: GREATEREQUAL
71747: IFFALSE 71755
71749: LD_INT 7
71751: DOUBLE
71752: LESSEQUAL
71753: IFTRUE 71757
71755: GO 71764
71757: POP
// StreamSibBomb ; end ;
71758: CALL 68015 0 0
71762: GO 71765
71764: POP
// end ;
71765: PPOPN 3
71767: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
71768: LD_EXP 73
71772: PUSH
71773: LD_EXP 123
71777: AND
71778: IFFALSE 71934
71780: GO 71782
71782: DISABLE
71783: LD_INT 0
71785: PPUSH
71786: PPUSH
71787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
71788: LD_ADDR_VAR 0 2
71792: PUSH
71793: LD_INT 81
71795: PUSH
71796: LD_OWVAR 2
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: LD_INT 21
71810: PUSH
71811: LD_INT 1
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 21
71820: PUSH
71821: LD_INT 2
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: LIST
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PPUSH
71837: CALL_OW 69
71841: ST_TO_ADDR
// if not tmp then
71842: LD_VAR 0 2
71846: NOT
71847: IFFALSE 71851
// exit ;
71849: GO 71934
// p := 0 ;
71851: LD_ADDR_VAR 0 3
71855: PUSH
71856: LD_INT 0
71858: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71859: LD_INT 35
71861: PPUSH
71862: CALL_OW 67
// p := p + 1 ;
71866: LD_ADDR_VAR 0 3
71870: PUSH
71871: LD_VAR 0 3
71875: PUSH
71876: LD_INT 1
71878: PLUS
71879: ST_TO_ADDR
// for i in tmp do
71880: LD_ADDR_VAR 0 1
71884: PUSH
71885: LD_VAR 0 2
71889: PUSH
71890: FOR_IN
71891: IFFALSE 71922
// if GetLives ( i ) < 1000 then
71893: LD_VAR 0 1
71897: PPUSH
71898: CALL_OW 256
71902: PUSH
71903: LD_INT 1000
71905: LESS
71906: IFFALSE 71920
// SetLives ( i , 1000 ) ;
71908: LD_VAR 0 1
71912: PPUSH
71913: LD_INT 1000
71915: PPUSH
71916: CALL_OW 234
71920: GO 71890
71922: POP
71923: POP
// until p > 20 ;
71924: LD_VAR 0 3
71928: PUSH
71929: LD_INT 20
71931: GREATER
71932: IFFALSE 71859
// end ;
71934: PPOPN 3
71936: END
// every 0 0$1 trigger StreamModeActive and sTime do
71937: LD_EXP 73
71941: PUSH
71942: LD_EXP 124
71946: AND
71947: IFFALSE 71982
71949: GO 71951
71951: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
71952: LD_INT 28
71954: PPUSH
71955: LD_OWVAR 2
71959: PPUSH
71960: LD_INT 2
71962: PPUSH
71963: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71967: LD_INT 30
71969: PPUSH
71970: LD_OWVAR 2
71974: PPUSH
71975: LD_INT 2
71977: PPUSH
71978: CALL_OW 322
// end ;
71982: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71983: LD_EXP 73
71987: PUSH
71988: LD_EXP 125
71992: AND
71993: IFFALSE 72114
71995: GO 71997
71997: DISABLE
71998: LD_INT 0
72000: PPUSH
72001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72002: LD_ADDR_VAR 0 2
72006: PUSH
72007: LD_INT 22
72009: PUSH
72010: LD_OWVAR 2
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 21
72021: PUSH
72022: LD_INT 1
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 3
72031: PUSH
72032: LD_INT 23
72034: PUSH
72035: LD_INT 0
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: LIST
72050: PPUSH
72051: CALL_OW 69
72055: ST_TO_ADDR
// if not tmp then
72056: LD_VAR 0 2
72060: NOT
72061: IFFALSE 72065
// exit ;
72063: GO 72114
// for i in tmp do
72065: LD_ADDR_VAR 0 1
72069: PUSH
72070: LD_VAR 0 2
72074: PUSH
72075: FOR_IN
72076: IFFALSE 72112
// begin if Crawls ( i ) then
72078: LD_VAR 0 1
72082: PPUSH
72083: CALL_OW 318
72087: IFFALSE 72098
// ComWalk ( i ) ;
72089: LD_VAR 0 1
72093: PPUSH
72094: CALL_OW 138
// SetClass ( i , 2 ) ;
72098: LD_VAR 0 1
72102: PPUSH
72103: LD_INT 2
72105: PPUSH
72106: CALL_OW 336
// end ;
72110: GO 72075
72112: POP
72113: POP
// end ;
72114: PPOPN 2
72116: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
72117: LD_EXP 73
72121: PUSH
72122: LD_EXP 126
72126: AND
72127: IFFALSE 72408
72129: GO 72131
72131: DISABLE
72132: LD_INT 0
72134: PPUSH
72135: PPUSH
72136: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
72137: LD_OWVAR 2
72141: PPUSH
72142: LD_INT 9
72144: PPUSH
72145: LD_INT 1
72147: PPUSH
72148: LD_INT 1
72150: PPUSH
72151: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
72155: LD_INT 9
72157: PPUSH
72158: LD_OWVAR 2
72162: PPUSH
72163: CALL_OW 343
// uc_side := 9 ;
72167: LD_ADDR_OWVAR 20
72171: PUSH
72172: LD_INT 9
72174: ST_TO_ADDR
// uc_nation := 2 ;
72175: LD_ADDR_OWVAR 21
72179: PUSH
72180: LD_INT 2
72182: ST_TO_ADDR
// hc_name := Dark Warrior ;
72183: LD_ADDR_OWVAR 26
72187: PUSH
72188: LD_STRING Dark Warrior
72190: ST_TO_ADDR
// hc_gallery :=  ;
72191: LD_ADDR_OWVAR 33
72195: PUSH
72196: LD_STRING 
72198: ST_TO_ADDR
// hc_noskilllimit := true ;
72199: LD_ADDR_OWVAR 76
72203: PUSH
72204: LD_INT 1
72206: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
72207: LD_ADDR_OWVAR 31
72211: PUSH
72212: LD_INT 30
72214: PUSH
72215: LD_INT 30
72217: PUSH
72218: LD_INT 30
72220: PUSH
72221: LD_INT 30
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: ST_TO_ADDR
// un := CreateHuman ;
72230: LD_ADDR_VAR 0 3
72234: PUSH
72235: CALL_OW 44
72239: ST_TO_ADDR
// hc_noskilllimit := false ;
72240: LD_ADDR_OWVAR 76
72244: PUSH
72245: LD_INT 0
72247: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72248: LD_VAR 0 3
72252: PPUSH
72253: LD_INT 1
72255: PPUSH
72256: CALL_OW 51
// p := 0 ;
72260: LD_ADDR_VAR 0 2
72264: PUSH
72265: LD_INT 0
72267: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72268: LD_INT 35
72270: PPUSH
72271: CALL_OW 67
// p := p + 1 ;
72275: LD_ADDR_VAR 0 2
72279: PUSH
72280: LD_VAR 0 2
72284: PUSH
72285: LD_INT 1
72287: PLUS
72288: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
72289: LD_VAR 0 3
72293: PPUSH
72294: CALL_OW 256
72298: PUSH
72299: LD_INT 1000
72301: LESS
72302: IFFALSE 72316
// SetLives ( un , 1000 ) ;
72304: LD_VAR 0 3
72308: PPUSH
72309: LD_INT 1000
72311: PPUSH
72312: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
72316: LD_VAR 0 3
72320: PPUSH
72321: LD_INT 81
72323: PUSH
72324: LD_OWVAR 2
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 91
72335: PUSH
72336: LD_VAR 0 3
72340: PUSH
72341: LD_INT 30
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: LIST
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PPUSH
72353: CALL_OW 69
72357: PPUSH
72358: LD_VAR 0 3
72362: PPUSH
72363: CALL_OW 74
72367: PPUSH
72368: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
72372: LD_VAR 0 2
72376: PUSH
72377: LD_INT 60
72379: GREATER
72380: PUSH
72381: LD_VAR 0 3
72385: PPUSH
72386: CALL_OW 301
72390: OR
72391: IFFALSE 72268
// if un then
72393: LD_VAR 0 3
72397: IFFALSE 72408
// RemoveUnit ( un ) ;
72399: LD_VAR 0 3
72403: PPUSH
72404: CALL_OW 64
// end ;
72408: PPOPN 3
72410: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72411: LD_INT 0
72413: PPUSH
// case cmd of 301 :
72414: LD_VAR 0 1
72418: PUSH
72419: LD_INT 301
72421: DOUBLE
72422: EQUAL
72423: IFTRUE 72427
72425: GO 72459
72427: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
72428: LD_VAR 0 6
72432: PPUSH
72433: LD_VAR 0 7
72437: PPUSH
72438: LD_VAR 0 8
72442: PPUSH
72443: LD_VAR 0 4
72447: PPUSH
72448: LD_VAR 0 5
72452: PPUSH
72453: CALL 73660 0 5
72457: GO 72580
72459: LD_INT 302
72461: DOUBLE
72462: EQUAL
72463: IFTRUE 72467
72465: GO 72504
72467: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
72468: LD_VAR 0 6
72472: PPUSH
72473: LD_VAR 0 7
72477: PPUSH
72478: LD_VAR 0 8
72482: PPUSH
72483: LD_VAR 0 9
72487: PPUSH
72488: LD_VAR 0 4
72492: PPUSH
72493: LD_VAR 0 5
72497: PPUSH
72498: CALL 73751 0 6
72502: GO 72580
72504: LD_INT 303
72506: DOUBLE
72507: EQUAL
72508: IFTRUE 72512
72510: GO 72549
72512: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
72513: LD_VAR 0 6
72517: PPUSH
72518: LD_VAR 0 7
72522: PPUSH
72523: LD_VAR 0 8
72527: PPUSH
72528: LD_VAR 0 9
72532: PPUSH
72533: LD_VAR 0 4
72537: PPUSH
72538: LD_VAR 0 5
72542: PPUSH
72543: CALL 72585 0 6
72547: GO 72580
72549: LD_INT 304
72551: DOUBLE
72552: EQUAL
72553: IFTRUE 72557
72555: GO 72579
72557: POP
// hHackTeleport ( unit , x , y ) ; end ;
72558: LD_VAR 0 2
72562: PPUSH
72563: LD_VAR 0 4
72567: PPUSH
72568: LD_VAR 0 5
72572: PPUSH
72573: CALL 74344 0 3
72577: GO 72580
72579: POP
// end ;
72580: LD_VAR 0 12
72584: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
72585: LD_INT 0
72587: PPUSH
72588: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
72589: LD_VAR 0 1
72593: PUSH
72594: LD_INT 1
72596: LESS
72597: PUSH
72598: LD_VAR 0 1
72602: PUSH
72603: LD_INT 3
72605: GREATER
72606: OR
72607: PUSH
72608: LD_VAR 0 5
72612: PPUSH
72613: LD_VAR 0 6
72617: PPUSH
72618: CALL_OW 428
72622: OR
72623: IFFALSE 72627
// exit ;
72625: GO 73347
// uc_side := your_side ;
72627: LD_ADDR_OWVAR 20
72631: PUSH
72632: LD_OWVAR 2
72636: ST_TO_ADDR
// uc_nation := nation ;
72637: LD_ADDR_OWVAR 21
72641: PUSH
72642: LD_VAR 0 1
72646: ST_TO_ADDR
// bc_level = 1 ;
72647: LD_ADDR_OWVAR 43
72651: PUSH
72652: LD_INT 1
72654: ST_TO_ADDR
// case btype of 1 :
72655: LD_VAR 0 2
72659: PUSH
72660: LD_INT 1
72662: DOUBLE
72663: EQUAL
72664: IFTRUE 72668
72666: GO 72679
72668: POP
// bc_type := b_depot ; 2 :
72669: LD_ADDR_OWVAR 42
72673: PUSH
72674: LD_INT 0
72676: ST_TO_ADDR
72677: GO 73291
72679: LD_INT 2
72681: DOUBLE
72682: EQUAL
72683: IFTRUE 72687
72685: GO 72698
72687: POP
// bc_type := b_warehouse ; 3 :
72688: LD_ADDR_OWVAR 42
72692: PUSH
72693: LD_INT 1
72695: ST_TO_ADDR
72696: GO 73291
72698: LD_INT 3
72700: DOUBLE
72701: EQUAL
72702: IFTRUE 72706
72704: GO 72717
72706: POP
// bc_type := b_lab ; 4 .. 9 :
72707: LD_ADDR_OWVAR 42
72711: PUSH
72712: LD_INT 6
72714: ST_TO_ADDR
72715: GO 73291
72717: LD_INT 4
72719: DOUBLE
72720: GREATEREQUAL
72721: IFFALSE 72729
72723: LD_INT 9
72725: DOUBLE
72726: LESSEQUAL
72727: IFTRUE 72731
72729: GO 72783
72731: POP
// begin bc_type := b_lab_half ;
72732: LD_ADDR_OWVAR 42
72736: PUSH
72737: LD_INT 7
72739: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
72740: LD_ADDR_OWVAR 44
72744: PUSH
72745: LD_INT 10
72747: PUSH
72748: LD_INT 11
72750: PUSH
72751: LD_INT 12
72753: PUSH
72754: LD_INT 15
72756: PUSH
72757: LD_INT 14
72759: PUSH
72760: LD_INT 13
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: PUSH
72771: LD_VAR 0 2
72775: PUSH
72776: LD_INT 3
72778: MINUS
72779: ARRAY
72780: ST_TO_ADDR
// end ; 10 .. 13 :
72781: GO 73291
72783: LD_INT 10
72785: DOUBLE
72786: GREATEREQUAL
72787: IFFALSE 72795
72789: LD_INT 13
72791: DOUBLE
72792: LESSEQUAL
72793: IFTRUE 72797
72795: GO 72874
72797: POP
// begin bc_type := b_lab_full ;
72798: LD_ADDR_OWVAR 42
72802: PUSH
72803: LD_INT 8
72805: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
72806: LD_ADDR_OWVAR 44
72810: PUSH
72811: LD_INT 10
72813: PUSH
72814: LD_INT 12
72816: PUSH
72817: LD_INT 14
72819: PUSH
72820: LD_INT 13
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: PUSH
72829: LD_VAR 0 2
72833: PUSH
72834: LD_INT 9
72836: MINUS
72837: ARRAY
72838: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
72839: LD_ADDR_OWVAR 45
72843: PUSH
72844: LD_INT 11
72846: PUSH
72847: LD_INT 15
72849: PUSH
72850: LD_INT 12
72852: PUSH
72853: LD_INT 15
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: PUSH
72862: LD_VAR 0 2
72866: PUSH
72867: LD_INT 9
72869: MINUS
72870: ARRAY
72871: ST_TO_ADDR
// end ; 14 :
72872: GO 73291
72874: LD_INT 14
72876: DOUBLE
72877: EQUAL
72878: IFTRUE 72882
72880: GO 72893
72882: POP
// bc_type := b_workshop ; 15 :
72883: LD_ADDR_OWVAR 42
72887: PUSH
72888: LD_INT 2
72890: ST_TO_ADDR
72891: GO 73291
72893: LD_INT 15
72895: DOUBLE
72896: EQUAL
72897: IFTRUE 72901
72899: GO 72912
72901: POP
// bc_type := b_factory ; 16 :
72902: LD_ADDR_OWVAR 42
72906: PUSH
72907: LD_INT 3
72909: ST_TO_ADDR
72910: GO 73291
72912: LD_INT 16
72914: DOUBLE
72915: EQUAL
72916: IFTRUE 72920
72918: GO 72931
72920: POP
// bc_type := b_ext_gun ; 17 :
72921: LD_ADDR_OWVAR 42
72925: PUSH
72926: LD_INT 17
72928: ST_TO_ADDR
72929: GO 73291
72931: LD_INT 17
72933: DOUBLE
72934: EQUAL
72935: IFTRUE 72939
72937: GO 72967
72939: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
72940: LD_ADDR_OWVAR 42
72944: PUSH
72945: LD_INT 19
72947: PUSH
72948: LD_INT 23
72950: PUSH
72951: LD_INT 19
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: LIST
72958: PUSH
72959: LD_VAR 0 1
72963: ARRAY
72964: ST_TO_ADDR
72965: GO 73291
72967: LD_INT 18
72969: DOUBLE
72970: EQUAL
72971: IFTRUE 72975
72973: GO 72986
72975: POP
// bc_type := b_ext_radar ; 19 :
72976: LD_ADDR_OWVAR 42
72980: PUSH
72981: LD_INT 20
72983: ST_TO_ADDR
72984: GO 73291
72986: LD_INT 19
72988: DOUBLE
72989: EQUAL
72990: IFTRUE 72994
72992: GO 73005
72994: POP
// bc_type := b_ext_radio ; 20 :
72995: LD_ADDR_OWVAR 42
72999: PUSH
73000: LD_INT 22
73002: ST_TO_ADDR
73003: GO 73291
73005: LD_INT 20
73007: DOUBLE
73008: EQUAL
73009: IFTRUE 73013
73011: GO 73024
73013: POP
// bc_type := b_ext_siberium ; 21 :
73014: LD_ADDR_OWVAR 42
73018: PUSH
73019: LD_INT 21
73021: ST_TO_ADDR
73022: GO 73291
73024: LD_INT 21
73026: DOUBLE
73027: EQUAL
73028: IFTRUE 73032
73030: GO 73043
73032: POP
// bc_type := b_ext_computer ; 22 :
73033: LD_ADDR_OWVAR 42
73037: PUSH
73038: LD_INT 24
73040: ST_TO_ADDR
73041: GO 73291
73043: LD_INT 22
73045: DOUBLE
73046: EQUAL
73047: IFTRUE 73051
73049: GO 73062
73051: POP
// bc_type := b_ext_track ; 23 :
73052: LD_ADDR_OWVAR 42
73056: PUSH
73057: LD_INT 16
73059: ST_TO_ADDR
73060: GO 73291
73062: LD_INT 23
73064: DOUBLE
73065: EQUAL
73066: IFTRUE 73070
73068: GO 73081
73070: POP
// bc_type := b_ext_laser ; 24 :
73071: LD_ADDR_OWVAR 42
73075: PUSH
73076: LD_INT 25
73078: ST_TO_ADDR
73079: GO 73291
73081: LD_INT 24
73083: DOUBLE
73084: EQUAL
73085: IFTRUE 73089
73087: GO 73100
73089: POP
// bc_type := b_control_tower ; 25 :
73090: LD_ADDR_OWVAR 42
73094: PUSH
73095: LD_INT 36
73097: ST_TO_ADDR
73098: GO 73291
73100: LD_INT 25
73102: DOUBLE
73103: EQUAL
73104: IFTRUE 73108
73106: GO 73119
73108: POP
// bc_type := b_breastwork ; 26 :
73109: LD_ADDR_OWVAR 42
73113: PUSH
73114: LD_INT 31
73116: ST_TO_ADDR
73117: GO 73291
73119: LD_INT 26
73121: DOUBLE
73122: EQUAL
73123: IFTRUE 73127
73125: GO 73138
73127: POP
// bc_type := b_bunker ; 27 :
73128: LD_ADDR_OWVAR 42
73132: PUSH
73133: LD_INT 32
73135: ST_TO_ADDR
73136: GO 73291
73138: LD_INT 27
73140: DOUBLE
73141: EQUAL
73142: IFTRUE 73146
73144: GO 73157
73146: POP
// bc_type := b_turret ; 28 :
73147: LD_ADDR_OWVAR 42
73151: PUSH
73152: LD_INT 33
73154: ST_TO_ADDR
73155: GO 73291
73157: LD_INT 28
73159: DOUBLE
73160: EQUAL
73161: IFTRUE 73165
73163: GO 73176
73165: POP
// bc_type := b_armoury ; 29 :
73166: LD_ADDR_OWVAR 42
73170: PUSH
73171: LD_INT 4
73173: ST_TO_ADDR
73174: GO 73291
73176: LD_INT 29
73178: DOUBLE
73179: EQUAL
73180: IFTRUE 73184
73182: GO 73195
73184: POP
// bc_type := b_barracks ; 30 :
73185: LD_ADDR_OWVAR 42
73189: PUSH
73190: LD_INT 5
73192: ST_TO_ADDR
73193: GO 73291
73195: LD_INT 30
73197: DOUBLE
73198: EQUAL
73199: IFTRUE 73203
73201: GO 73214
73203: POP
// bc_type := b_solar_power ; 31 :
73204: LD_ADDR_OWVAR 42
73208: PUSH
73209: LD_INT 27
73211: ST_TO_ADDR
73212: GO 73291
73214: LD_INT 31
73216: DOUBLE
73217: EQUAL
73218: IFTRUE 73222
73220: GO 73233
73222: POP
// bc_type := b_oil_power ; 32 :
73223: LD_ADDR_OWVAR 42
73227: PUSH
73228: LD_INT 26
73230: ST_TO_ADDR
73231: GO 73291
73233: LD_INT 32
73235: DOUBLE
73236: EQUAL
73237: IFTRUE 73241
73239: GO 73252
73241: POP
// bc_type := b_siberite_power ; 33 :
73242: LD_ADDR_OWVAR 42
73246: PUSH
73247: LD_INT 28
73249: ST_TO_ADDR
73250: GO 73291
73252: LD_INT 33
73254: DOUBLE
73255: EQUAL
73256: IFTRUE 73260
73258: GO 73271
73260: POP
// bc_type := b_oil_mine ; 34 :
73261: LD_ADDR_OWVAR 42
73265: PUSH
73266: LD_INT 29
73268: ST_TO_ADDR
73269: GO 73291
73271: LD_INT 34
73273: DOUBLE
73274: EQUAL
73275: IFTRUE 73279
73277: GO 73290
73279: POP
// bc_type := b_siberite_mine ; end ;
73280: LD_ADDR_OWVAR 42
73284: PUSH
73285: LD_INT 30
73287: ST_TO_ADDR
73288: GO 73291
73290: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
73291: LD_ADDR_VAR 0 8
73295: PUSH
73296: LD_VAR 0 5
73300: PPUSH
73301: LD_VAR 0 6
73305: PPUSH
73306: LD_VAR 0 3
73310: PPUSH
73311: CALL_OW 47
73315: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
73316: LD_OWVAR 42
73320: PUSH
73321: LD_INT 32
73323: PUSH
73324: LD_INT 33
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: IN
73331: IFFALSE 73347
// PlaceWeaponTurret ( b , weapon ) ;
73333: LD_VAR 0 8
73337: PPUSH
73338: LD_VAR 0 4
73342: PPUSH
73343: CALL_OW 431
// end ;
73347: LD_VAR 0 7
73351: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
73352: LD_INT 0
73354: PPUSH
73355: PPUSH
73356: PPUSH
73357: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73358: LD_ADDR_VAR 0 4
73362: PUSH
73363: LD_INT 22
73365: PUSH
73366: LD_OWVAR 2
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 2
73377: PUSH
73378: LD_INT 30
73380: PUSH
73381: LD_INT 0
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 30
73390: PUSH
73391: LD_INT 1
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: LIST
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PPUSH
73407: CALL_OW 69
73411: ST_TO_ADDR
// if not tmp then
73412: LD_VAR 0 4
73416: NOT
73417: IFFALSE 73421
// exit ;
73419: GO 73480
// for i in tmp do
73421: LD_ADDR_VAR 0 2
73425: PUSH
73426: LD_VAR 0 4
73430: PUSH
73431: FOR_IN
73432: IFFALSE 73478
// for j = 1 to 3 do
73434: LD_ADDR_VAR 0 3
73438: PUSH
73439: DOUBLE
73440: LD_INT 1
73442: DEC
73443: ST_TO_ADDR
73444: LD_INT 3
73446: PUSH
73447: FOR_TO
73448: IFFALSE 73474
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
73450: LD_VAR 0 2
73454: PPUSH
73455: CALL_OW 274
73459: PPUSH
73460: LD_VAR 0 3
73464: PPUSH
73465: LD_INT 99999
73467: PPUSH
73468: CALL_OW 277
73472: GO 73447
73474: POP
73475: POP
73476: GO 73431
73478: POP
73479: POP
// end ;
73480: LD_VAR 0 1
73484: RET
// export function hHackSetLevel10 ; var i , j ; begin
73485: LD_INT 0
73487: PPUSH
73488: PPUSH
73489: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73490: LD_ADDR_VAR 0 2
73494: PUSH
73495: LD_INT 21
73497: PUSH
73498: LD_INT 1
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PPUSH
73505: CALL_OW 69
73509: PUSH
73510: FOR_IN
73511: IFFALSE 73563
// if IsSelected ( i ) then
73513: LD_VAR 0 2
73517: PPUSH
73518: CALL_OW 306
73522: IFFALSE 73561
// begin for j := 1 to 4 do
73524: LD_ADDR_VAR 0 3
73528: PUSH
73529: DOUBLE
73530: LD_INT 1
73532: DEC
73533: ST_TO_ADDR
73534: LD_INT 4
73536: PUSH
73537: FOR_TO
73538: IFFALSE 73559
// SetSkill ( i , j , 10 ) ;
73540: LD_VAR 0 2
73544: PPUSH
73545: LD_VAR 0 3
73549: PPUSH
73550: LD_INT 10
73552: PPUSH
73553: CALL_OW 237
73557: GO 73537
73559: POP
73560: POP
// end ;
73561: GO 73510
73563: POP
73564: POP
// end ;
73565: LD_VAR 0 1
73569: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
73570: LD_INT 0
73572: PPUSH
73573: PPUSH
73574: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
73575: LD_ADDR_VAR 0 2
73579: PUSH
73580: LD_INT 22
73582: PUSH
73583: LD_OWVAR 2
73587: PUSH
73588: EMPTY
73589: LIST
73590: LIST
73591: PUSH
73592: LD_INT 21
73594: PUSH
73595: LD_INT 1
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: PPUSH
73606: CALL_OW 69
73610: PUSH
73611: FOR_IN
73612: IFFALSE 73653
// begin for j := 1 to 4 do
73614: LD_ADDR_VAR 0 3
73618: PUSH
73619: DOUBLE
73620: LD_INT 1
73622: DEC
73623: ST_TO_ADDR
73624: LD_INT 4
73626: PUSH
73627: FOR_TO
73628: IFFALSE 73649
// SetSkill ( i , j , 10 ) ;
73630: LD_VAR 0 2
73634: PPUSH
73635: LD_VAR 0 3
73639: PPUSH
73640: LD_INT 10
73642: PPUSH
73643: CALL_OW 237
73647: GO 73627
73649: POP
73650: POP
// end ;
73651: GO 73611
73653: POP
73654: POP
// end ;
73655: LD_VAR 0 1
73659: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73660: LD_INT 0
73662: PPUSH
// uc_side := your_side ;
73663: LD_ADDR_OWVAR 20
73667: PUSH
73668: LD_OWVAR 2
73672: ST_TO_ADDR
// uc_nation := nation ;
73673: LD_ADDR_OWVAR 21
73677: PUSH
73678: LD_VAR 0 1
73682: ST_TO_ADDR
// InitHc ;
73683: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73687: LD_INT 0
73689: PPUSH
73690: LD_VAR 0 2
73694: PPUSH
73695: LD_VAR 0 3
73699: PPUSH
73700: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73704: LD_VAR 0 4
73708: PPUSH
73709: LD_VAR 0 5
73713: PPUSH
73714: CALL_OW 428
73718: PUSH
73719: LD_INT 0
73721: EQUAL
73722: IFFALSE 73746
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73724: CALL_OW 44
73728: PPUSH
73729: LD_VAR 0 4
73733: PPUSH
73734: LD_VAR 0 5
73738: PPUSH
73739: LD_INT 1
73741: PPUSH
73742: CALL_OW 48
// end ;
73746: LD_VAR 0 6
73750: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
73751: LD_INT 0
73753: PPUSH
73754: PPUSH
// uc_side := your_side ;
73755: LD_ADDR_OWVAR 20
73759: PUSH
73760: LD_OWVAR 2
73764: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
73765: LD_VAR 0 1
73769: PUSH
73770: LD_INT 1
73772: PUSH
73773: LD_INT 2
73775: PUSH
73776: LD_INT 3
73778: PUSH
73779: LD_INT 4
73781: PUSH
73782: LD_INT 5
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: IN
73792: IFFALSE 73804
// uc_nation := nation_american else
73794: LD_ADDR_OWVAR 21
73798: PUSH
73799: LD_INT 1
73801: ST_TO_ADDR
73802: GO 73847
// if chassis in [ 11 , 12 , 13 , 14 ] then
73804: LD_VAR 0 1
73808: PUSH
73809: LD_INT 11
73811: PUSH
73812: LD_INT 12
73814: PUSH
73815: LD_INT 13
73817: PUSH
73818: LD_INT 14
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: IN
73827: IFFALSE 73839
// uc_nation := nation_arabian else
73829: LD_ADDR_OWVAR 21
73833: PUSH
73834: LD_INT 2
73836: ST_TO_ADDR
73837: GO 73847
// uc_nation := nation_russian ;
73839: LD_ADDR_OWVAR 21
73843: PUSH
73844: LD_INT 3
73846: ST_TO_ADDR
// vc_chassis := chassis ;
73847: LD_ADDR_OWVAR 37
73851: PUSH
73852: LD_VAR 0 1
73856: ST_TO_ADDR
// vc_engine := engine ;
73857: LD_ADDR_OWVAR 39
73861: PUSH
73862: LD_VAR 0 2
73866: ST_TO_ADDR
// vc_control := control ;
73867: LD_ADDR_OWVAR 38
73871: PUSH
73872: LD_VAR 0 3
73876: ST_TO_ADDR
// vc_weapon := weapon ;
73877: LD_ADDR_OWVAR 40
73881: PUSH
73882: LD_VAR 0 4
73886: ST_TO_ADDR
// un := CreateVehicle ;
73887: LD_ADDR_VAR 0 8
73891: PUSH
73892: CALL_OW 45
73896: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
73897: LD_VAR 0 8
73901: PPUSH
73902: LD_INT 0
73904: PPUSH
73905: LD_INT 5
73907: PPUSH
73908: CALL_OW 12
73912: PPUSH
73913: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
73917: LD_VAR 0 8
73921: PPUSH
73922: LD_VAR 0 5
73926: PPUSH
73927: LD_VAR 0 6
73931: PPUSH
73932: LD_INT 1
73934: PPUSH
73935: CALL_OW 48
// end ;
73939: LD_VAR 0 7
73943: RET
// export hInvincible ; every 1 do
73944: GO 73946
73946: DISABLE
// hInvincible := [ ] ;
73947: LD_ADDR_EXP 127
73951: PUSH
73952: EMPTY
73953: ST_TO_ADDR
73954: END
// every 10 do var i ;
73955: GO 73957
73957: DISABLE
73958: LD_INT 0
73960: PPUSH
// begin enable ;
73961: ENABLE
// if not hInvincible then
73962: LD_EXP 127
73966: NOT
73967: IFFALSE 73971
// exit ;
73969: GO 74015
// for i in hInvincible do
73971: LD_ADDR_VAR 0 1
73975: PUSH
73976: LD_EXP 127
73980: PUSH
73981: FOR_IN
73982: IFFALSE 74013
// if GetLives ( i ) < 1000 then
73984: LD_VAR 0 1
73988: PPUSH
73989: CALL_OW 256
73993: PUSH
73994: LD_INT 1000
73996: LESS
73997: IFFALSE 74011
// SetLives ( i , 1000 ) ;
73999: LD_VAR 0 1
74003: PPUSH
74004: LD_INT 1000
74006: PPUSH
74007: CALL_OW 234
74011: GO 73981
74013: POP
74014: POP
// end ;
74015: PPOPN 1
74017: END
// export function hHackInvincible ; var i ; begin
74018: LD_INT 0
74020: PPUSH
74021: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
74022: LD_ADDR_VAR 0 2
74026: PUSH
74027: LD_INT 2
74029: PUSH
74030: LD_INT 21
74032: PUSH
74033: LD_INT 1
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 21
74042: PUSH
74043: LD_INT 2
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: LIST
74054: PPUSH
74055: CALL_OW 69
74059: PUSH
74060: FOR_IN
74061: IFFALSE 74122
// if IsSelected ( i ) then
74063: LD_VAR 0 2
74067: PPUSH
74068: CALL_OW 306
74072: IFFALSE 74120
// begin if i in hInvincible then
74074: LD_VAR 0 2
74078: PUSH
74079: LD_EXP 127
74083: IN
74084: IFFALSE 74104
// hInvincible := hInvincible diff i else
74086: LD_ADDR_EXP 127
74090: PUSH
74091: LD_EXP 127
74095: PUSH
74096: LD_VAR 0 2
74100: DIFF
74101: ST_TO_ADDR
74102: GO 74120
// hInvincible := hInvincible union i ;
74104: LD_ADDR_EXP 127
74108: PUSH
74109: LD_EXP 127
74113: PUSH
74114: LD_VAR 0 2
74118: UNION
74119: ST_TO_ADDR
// end ;
74120: GO 74060
74122: POP
74123: POP
// end ;
74124: LD_VAR 0 1
74128: RET
// export function hHackInvisible ; var i , j ; begin
74129: LD_INT 0
74131: PPUSH
74132: PPUSH
74133: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74134: LD_ADDR_VAR 0 2
74138: PUSH
74139: LD_INT 21
74141: PUSH
74142: LD_INT 1
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PPUSH
74149: CALL_OW 69
74153: PUSH
74154: FOR_IN
74155: IFFALSE 74179
// if IsSelected ( i ) then
74157: LD_VAR 0 2
74161: PPUSH
74162: CALL_OW 306
74166: IFFALSE 74177
// ComForceInvisible ( i ) ;
74168: LD_VAR 0 2
74172: PPUSH
74173: CALL_OW 496
74177: GO 74154
74179: POP
74180: POP
// end ;
74181: LD_VAR 0 1
74185: RET
// export function hHackChangeYourSide ; begin
74186: LD_INT 0
74188: PPUSH
// if your_side = 8 then
74189: LD_OWVAR 2
74193: PUSH
74194: LD_INT 8
74196: EQUAL
74197: IFFALSE 74209
// your_side := 0 else
74199: LD_ADDR_OWVAR 2
74203: PUSH
74204: LD_INT 0
74206: ST_TO_ADDR
74207: GO 74223
// your_side := your_side + 1 ;
74209: LD_ADDR_OWVAR 2
74213: PUSH
74214: LD_OWVAR 2
74218: PUSH
74219: LD_INT 1
74221: PLUS
74222: ST_TO_ADDR
// end ;
74223: LD_VAR 0 1
74227: RET
// export function hHackChangeUnitSide ; var i , j ; begin
74228: LD_INT 0
74230: PPUSH
74231: PPUSH
74232: PPUSH
// for i in all_units do
74233: LD_ADDR_VAR 0 2
74237: PUSH
74238: LD_OWVAR 3
74242: PUSH
74243: FOR_IN
74244: IFFALSE 74322
// if IsSelected ( i ) then
74246: LD_VAR 0 2
74250: PPUSH
74251: CALL_OW 306
74255: IFFALSE 74320
// begin j := GetSide ( i ) ;
74257: LD_ADDR_VAR 0 3
74261: PUSH
74262: LD_VAR 0 2
74266: PPUSH
74267: CALL_OW 255
74271: ST_TO_ADDR
// if j = 8 then
74272: LD_VAR 0 3
74276: PUSH
74277: LD_INT 8
74279: EQUAL
74280: IFFALSE 74292
// j := 0 else
74282: LD_ADDR_VAR 0 3
74286: PUSH
74287: LD_INT 0
74289: ST_TO_ADDR
74290: GO 74306
// j := j + 1 ;
74292: LD_ADDR_VAR 0 3
74296: PUSH
74297: LD_VAR 0 3
74301: PUSH
74302: LD_INT 1
74304: PLUS
74305: ST_TO_ADDR
// SetSide ( i , j ) ;
74306: LD_VAR 0 2
74310: PPUSH
74311: LD_VAR 0 3
74315: PPUSH
74316: CALL_OW 235
// end ;
74320: GO 74243
74322: POP
74323: POP
// end ;
74324: LD_VAR 0 1
74328: RET
// export function hHackFog ; begin
74329: LD_INT 0
74331: PPUSH
// FogOff ( true ) ;
74332: LD_INT 1
74334: PPUSH
74335: CALL_OW 344
// end ;
74339: LD_VAR 0 1
74343: RET
// export function hHackTeleport ( unit , x , y ) ; begin
74344: LD_INT 0
74346: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
74347: LD_VAR 0 1
74351: PPUSH
74352: LD_VAR 0 2
74356: PPUSH
74357: LD_VAR 0 3
74361: PPUSH
74362: LD_INT 1
74364: PPUSH
74365: LD_INT 1
74367: PPUSH
74368: CALL_OW 483
// CenterOnXY ( x , y ) ;
74372: LD_VAR 0 2
74376: PPUSH
74377: LD_VAR 0 3
74381: PPUSH
74382: CALL_OW 84
// end ; end_of_file
74386: LD_VAR 0 4
74390: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74391: LD_VAR 0 1
74395: PUSH
74396: LD_INT 200
74398: DOUBLE
74399: GREATEREQUAL
74400: IFFALSE 74408
74402: LD_INT 299
74404: DOUBLE
74405: LESSEQUAL
74406: IFTRUE 74410
74408: GO 74442
74410: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74411: LD_VAR 0 1
74415: PPUSH
74416: LD_VAR 0 2
74420: PPUSH
74421: LD_VAR 0 3
74425: PPUSH
74426: LD_VAR 0 4
74430: PPUSH
74431: LD_VAR 0 5
74435: PPUSH
74436: CALL 74686 0 5
74440: GO 74519
74442: LD_INT 300
74444: DOUBLE
74445: GREATEREQUAL
74446: IFFALSE 74454
74448: LD_INT 399
74450: DOUBLE
74451: LESSEQUAL
74452: IFTRUE 74456
74454: GO 74518
74456: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74457: LD_VAR 0 1
74461: PPUSH
74462: LD_VAR 0 2
74466: PPUSH
74467: LD_VAR 0 3
74471: PPUSH
74472: LD_VAR 0 4
74476: PPUSH
74477: LD_VAR 0 5
74481: PPUSH
74482: LD_VAR 0 6
74486: PPUSH
74487: LD_VAR 0 7
74491: PPUSH
74492: LD_VAR 0 8
74496: PPUSH
74497: LD_VAR 0 9
74501: PPUSH
74502: LD_VAR 0 10
74506: PPUSH
74507: LD_VAR 0 11
74511: PPUSH
74512: CALL 72411 0 11
74516: GO 74519
74518: POP
// end ;
74519: PPOPN 11
74521: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74522: LD_VAR 0 1
74526: PPUSH
74527: LD_VAR 0 2
74531: PPUSH
74532: LD_VAR 0 3
74536: PPUSH
74537: LD_VAR 0 4
74541: PPUSH
74542: LD_VAR 0 5
74546: PPUSH
74547: CALL 74668 0 5
// end ; end_of_file
74551: PPOPN 5
74553: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
74554: LD_INT 0
74556: PPUSH
74557: PPUSH
74558: PPUSH
74559: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
74560: LD_VAR 0 1
74564: PPUSH
74565: CALL_OW 264
74569: PUSH
74570: LD_EXP 58
74574: EQUAL
74575: IFFALSE 74647
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
74577: LD_INT 68
74579: PPUSH
74580: LD_VAR 0 1
74584: PPUSH
74585: CALL_OW 255
74589: PPUSH
74590: CALL_OW 321
74594: PUSH
74595: LD_INT 2
74597: EQUAL
74598: IFFALSE 74610
// eff := 70 else
74600: LD_ADDR_VAR 0 4
74604: PUSH
74605: LD_INT 70
74607: ST_TO_ADDR
74608: GO 74618
// eff := 30 ;
74610: LD_ADDR_VAR 0 4
74614: PUSH
74615: LD_INT 30
74617: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
74618: LD_VAR 0 1
74622: PPUSH
74623: CALL_OW 250
74627: PPUSH
74628: LD_VAR 0 1
74632: PPUSH
74633: CALL_OW 251
74637: PPUSH
74638: LD_VAR 0 4
74642: PPUSH
74643: CALL_OW 495
// end ; end ;
74647: LD_VAR 0 2
74651: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
74652: LD_INT 0
74654: PPUSH
// end ;
74655: LD_VAR 0 4
74659: RET
// export function SOS_Command ( cmd ) ; begin
74660: LD_INT 0
74662: PPUSH
// end ;
74663: LD_VAR 0 2
74667: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
74668: LD_INT 0
74670: PPUSH
// if cmd = 121 then
74671: LD_VAR 0 1
74675: PUSH
74676: LD_INT 121
74678: EQUAL
74679: IFFALSE 74681
// end ;
74681: LD_VAR 0 6
74685: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74686: LD_INT 0
74688: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74689: LD_VAR 0 1
74693: PUSH
74694: LD_INT 250
74696: EQUAL
74697: PUSH
74698: LD_VAR 0 2
74702: PPUSH
74703: CALL_OW 264
74707: PUSH
74708: LD_EXP 61
74712: EQUAL
74713: AND
74714: IFFALSE 74735
// MinerPlaceMine ( unit , x , y ) ;
74716: LD_VAR 0 2
74720: PPUSH
74721: LD_VAR 0 4
74725: PPUSH
74726: LD_VAR 0 5
74730: PPUSH
74731: CALL 77084 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74735: LD_VAR 0 1
74739: PUSH
74740: LD_INT 251
74742: EQUAL
74743: PUSH
74744: LD_VAR 0 2
74748: PPUSH
74749: CALL_OW 264
74753: PUSH
74754: LD_EXP 61
74758: EQUAL
74759: AND
74760: IFFALSE 74781
// MinerDetonateMine ( unit , x , y ) ;
74762: LD_VAR 0 2
74766: PPUSH
74767: LD_VAR 0 4
74771: PPUSH
74772: LD_VAR 0 5
74776: PPUSH
74777: CALL 77361 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74781: LD_VAR 0 1
74785: PUSH
74786: LD_INT 252
74788: EQUAL
74789: PUSH
74790: LD_VAR 0 2
74794: PPUSH
74795: CALL_OW 264
74799: PUSH
74800: LD_EXP 61
74804: EQUAL
74805: AND
74806: IFFALSE 74827
// MinerCreateMinefield ( unit , x , y ) ;
74808: LD_VAR 0 2
74812: PPUSH
74813: LD_VAR 0 4
74817: PPUSH
74818: LD_VAR 0 5
74822: PPUSH
74823: CALL 77778 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74827: LD_VAR 0 1
74831: PUSH
74832: LD_INT 253
74834: EQUAL
74835: PUSH
74836: LD_VAR 0 2
74840: PPUSH
74841: CALL_OW 257
74845: PUSH
74846: LD_INT 5
74848: EQUAL
74849: AND
74850: IFFALSE 74871
// ComBinocular ( unit , x , y ) ;
74852: LD_VAR 0 2
74856: PPUSH
74857: LD_VAR 0 4
74861: PPUSH
74862: LD_VAR 0 5
74866: PPUSH
74867: CALL 78149 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74871: LD_VAR 0 1
74875: PUSH
74876: LD_INT 254
74878: EQUAL
74879: PUSH
74880: LD_VAR 0 2
74884: PPUSH
74885: CALL_OW 264
74889: PUSH
74890: LD_EXP 56
74894: EQUAL
74895: AND
74896: PUSH
74897: LD_VAR 0 3
74901: PPUSH
74902: CALL_OW 263
74906: PUSH
74907: LD_INT 3
74909: EQUAL
74910: AND
74911: IFFALSE 74927
// HackDestroyVehicle ( unit , selectedUnit ) ;
74913: LD_VAR 0 2
74917: PPUSH
74918: LD_VAR 0 3
74922: PPUSH
74923: CALL 76444 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74927: LD_VAR 0 1
74931: PUSH
74932: LD_INT 255
74934: EQUAL
74935: PUSH
74936: LD_VAR 0 2
74940: PPUSH
74941: CALL_OW 264
74945: PUSH
74946: LD_INT 14
74948: PUSH
74949: LD_INT 53
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: IN
74956: AND
74957: PUSH
74958: LD_VAR 0 4
74962: PPUSH
74963: LD_VAR 0 5
74967: PPUSH
74968: CALL_OW 488
74972: AND
74973: IFFALSE 74997
// CutTreeXYR ( unit , x , y , 12 ) ;
74975: LD_VAR 0 2
74979: PPUSH
74980: LD_VAR 0 4
74984: PPUSH
74985: LD_VAR 0 5
74989: PPUSH
74990: LD_INT 12
74992: PPUSH
74993: CALL 75010 0 4
// end ;
74997: LD_VAR 0 6
75001: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
75002: LD_INT 0
75004: PPUSH
// end ;
75005: LD_VAR 0 4
75009: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
75010: LD_INT 0
75012: PPUSH
75013: PPUSH
75014: PPUSH
75015: PPUSH
75016: PPUSH
75017: PPUSH
75018: PPUSH
75019: PPUSH
75020: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
75021: LD_VAR 0 1
75025: NOT
75026: PUSH
75027: LD_VAR 0 2
75031: PPUSH
75032: LD_VAR 0 3
75036: PPUSH
75037: CALL_OW 488
75041: NOT
75042: OR
75043: PUSH
75044: LD_VAR 0 4
75048: NOT
75049: OR
75050: IFFALSE 75054
// exit ;
75052: GO 75394
// list := [ ] ;
75054: LD_ADDR_VAR 0 13
75058: PUSH
75059: EMPTY
75060: ST_TO_ADDR
// if x - r < 0 then
75061: LD_VAR 0 2
75065: PUSH
75066: LD_VAR 0 4
75070: MINUS
75071: PUSH
75072: LD_INT 0
75074: LESS
75075: IFFALSE 75087
// min_x := 0 else
75077: LD_ADDR_VAR 0 7
75081: PUSH
75082: LD_INT 0
75084: ST_TO_ADDR
75085: GO 75103
// min_x := x - r ;
75087: LD_ADDR_VAR 0 7
75091: PUSH
75092: LD_VAR 0 2
75096: PUSH
75097: LD_VAR 0 4
75101: MINUS
75102: ST_TO_ADDR
// if y - r < 0 then
75103: LD_VAR 0 3
75107: PUSH
75108: LD_VAR 0 4
75112: MINUS
75113: PUSH
75114: LD_INT 0
75116: LESS
75117: IFFALSE 75129
// min_y := 0 else
75119: LD_ADDR_VAR 0 8
75123: PUSH
75124: LD_INT 0
75126: ST_TO_ADDR
75127: GO 75145
// min_y := y - r ;
75129: LD_ADDR_VAR 0 8
75133: PUSH
75134: LD_VAR 0 3
75138: PUSH
75139: LD_VAR 0 4
75143: MINUS
75144: ST_TO_ADDR
// max_x := x + r ;
75145: LD_ADDR_VAR 0 9
75149: PUSH
75150: LD_VAR 0 2
75154: PUSH
75155: LD_VAR 0 4
75159: PLUS
75160: ST_TO_ADDR
// max_y := y + r ;
75161: LD_ADDR_VAR 0 10
75165: PUSH
75166: LD_VAR 0 3
75170: PUSH
75171: LD_VAR 0 4
75175: PLUS
75176: ST_TO_ADDR
// for _x = min_x to max_x do
75177: LD_ADDR_VAR 0 11
75181: PUSH
75182: DOUBLE
75183: LD_VAR 0 7
75187: DEC
75188: ST_TO_ADDR
75189: LD_VAR 0 9
75193: PUSH
75194: FOR_TO
75195: IFFALSE 75312
// for _y = min_y to max_y do
75197: LD_ADDR_VAR 0 12
75201: PUSH
75202: DOUBLE
75203: LD_VAR 0 8
75207: DEC
75208: ST_TO_ADDR
75209: LD_VAR 0 10
75213: PUSH
75214: FOR_TO
75215: IFFALSE 75308
// begin if not ValidHex ( _x , _y ) then
75217: LD_VAR 0 11
75221: PPUSH
75222: LD_VAR 0 12
75226: PPUSH
75227: CALL_OW 488
75231: NOT
75232: IFFALSE 75236
// continue ;
75234: GO 75214
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75236: LD_VAR 0 11
75240: PPUSH
75241: LD_VAR 0 12
75245: PPUSH
75246: CALL_OW 351
75250: PUSH
75251: LD_VAR 0 11
75255: PPUSH
75256: LD_VAR 0 12
75260: PPUSH
75261: CALL_OW 554
75265: AND
75266: IFFALSE 75306
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75268: LD_ADDR_VAR 0 13
75272: PUSH
75273: LD_VAR 0 13
75277: PPUSH
75278: LD_VAR 0 13
75282: PUSH
75283: LD_INT 1
75285: PLUS
75286: PPUSH
75287: LD_VAR 0 11
75291: PUSH
75292: LD_VAR 0 12
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: PPUSH
75301: CALL_OW 2
75305: ST_TO_ADDR
// end ;
75306: GO 75214
75308: POP
75309: POP
75310: GO 75194
75312: POP
75313: POP
// if not list then
75314: LD_VAR 0 13
75318: NOT
75319: IFFALSE 75323
// exit ;
75321: GO 75394
// for i in list do
75323: LD_ADDR_VAR 0 6
75327: PUSH
75328: LD_VAR 0 13
75332: PUSH
75333: FOR_IN
75334: IFFALSE 75392
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
75336: LD_VAR 0 1
75340: PPUSH
75341: LD_STRING M
75343: PUSH
75344: LD_VAR 0 6
75348: PUSH
75349: LD_INT 1
75351: ARRAY
75352: PUSH
75353: LD_VAR 0 6
75357: PUSH
75358: LD_INT 2
75360: ARRAY
75361: PUSH
75362: LD_INT 0
75364: PUSH
75365: LD_INT 0
75367: PUSH
75368: LD_INT 0
75370: PUSH
75371: LD_INT 0
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: PUSH
75383: EMPTY
75384: LIST
75385: PPUSH
75386: CALL_OW 447
75390: GO 75333
75392: POP
75393: POP
// end ;
75394: LD_VAR 0 5
75398: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75399: LD_EXP 130
75403: NOT
75404: IFFALSE 75454
75406: GO 75408
75408: DISABLE
// begin initHack := true ;
75409: LD_ADDR_EXP 130
75413: PUSH
75414: LD_INT 1
75416: ST_TO_ADDR
// hackTanks := [ ] ;
75417: LD_ADDR_EXP 131
75421: PUSH
75422: EMPTY
75423: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75424: LD_ADDR_EXP 132
75428: PUSH
75429: EMPTY
75430: ST_TO_ADDR
// hackLimit := 3 ;
75431: LD_ADDR_EXP 133
75435: PUSH
75436: LD_INT 3
75438: ST_TO_ADDR
// hackDist := 12 ;
75439: LD_ADDR_EXP 134
75443: PUSH
75444: LD_INT 12
75446: ST_TO_ADDR
// hackCounter := [ ] ;
75447: LD_ADDR_EXP 135
75451: PUSH
75452: EMPTY
75453: ST_TO_ADDR
// end ;
75454: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75455: LD_EXP 130
75459: PUSH
75460: LD_INT 34
75462: PUSH
75463: LD_EXP 56
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: PPUSH
75472: CALL_OW 69
75476: AND
75477: IFFALSE 75732
75479: GO 75481
75481: DISABLE
75482: LD_INT 0
75484: PPUSH
75485: PPUSH
// begin enable ;
75486: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75487: LD_ADDR_VAR 0 1
75491: PUSH
75492: LD_INT 34
75494: PUSH
75495: LD_EXP 56
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PPUSH
75504: CALL_OW 69
75508: PUSH
75509: FOR_IN
75510: IFFALSE 75730
// begin if not i in hackTanks then
75512: LD_VAR 0 1
75516: PUSH
75517: LD_EXP 131
75521: IN
75522: NOT
75523: IFFALSE 75606
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75525: LD_ADDR_EXP 131
75529: PUSH
75530: LD_EXP 131
75534: PPUSH
75535: LD_EXP 131
75539: PUSH
75540: LD_INT 1
75542: PLUS
75543: PPUSH
75544: LD_VAR 0 1
75548: PPUSH
75549: CALL_OW 1
75553: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75554: LD_ADDR_EXP 132
75558: PUSH
75559: LD_EXP 132
75563: PPUSH
75564: LD_EXP 132
75568: PUSH
75569: LD_INT 1
75571: PLUS
75572: PPUSH
75573: EMPTY
75574: PPUSH
75575: CALL_OW 1
75579: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75580: LD_ADDR_EXP 135
75584: PUSH
75585: LD_EXP 135
75589: PPUSH
75590: LD_EXP 135
75594: PUSH
75595: LD_INT 1
75597: PLUS
75598: PPUSH
75599: EMPTY
75600: PPUSH
75601: CALL_OW 1
75605: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75606: LD_VAR 0 1
75610: PPUSH
75611: CALL_OW 302
75615: NOT
75616: IFFALSE 75629
// begin HackUnlinkAll ( i ) ;
75618: LD_VAR 0 1
75622: PPUSH
75623: CALL 75735 0 1
// continue ;
75627: GO 75509
// end ; HackCheckCapturedStatus ( i ) ;
75629: LD_VAR 0 1
75633: PPUSH
75634: CALL 76178 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75638: LD_ADDR_VAR 0 2
75642: PUSH
75643: LD_INT 81
75645: PUSH
75646: LD_VAR 0 1
75650: PPUSH
75651: CALL_OW 255
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: PUSH
75660: LD_INT 33
75662: PUSH
75663: LD_INT 3
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: LD_INT 91
75672: PUSH
75673: LD_VAR 0 1
75677: PUSH
75678: LD_EXP 134
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 50
75690: PUSH
75691: EMPTY
75692: LIST
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: LIST
75698: LIST
75699: PPUSH
75700: CALL_OW 69
75704: ST_TO_ADDR
// if not tmp then
75705: LD_VAR 0 2
75709: NOT
75710: IFFALSE 75714
// continue ;
75712: GO 75509
// HackLink ( i , tmp ) ;
75714: LD_VAR 0 1
75718: PPUSH
75719: LD_VAR 0 2
75723: PPUSH
75724: CALL 75871 0 2
// end ;
75728: GO 75509
75730: POP
75731: POP
// end ;
75732: PPOPN 2
75734: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75735: LD_INT 0
75737: PPUSH
75738: PPUSH
75739: PPUSH
// if not hack in hackTanks then
75740: LD_VAR 0 1
75744: PUSH
75745: LD_EXP 131
75749: IN
75750: NOT
75751: IFFALSE 75755
// exit ;
75753: GO 75866
// index := GetElementIndex ( hackTanks , hack ) ;
75755: LD_ADDR_VAR 0 4
75759: PUSH
75760: LD_EXP 131
75764: PPUSH
75765: LD_VAR 0 1
75769: PPUSH
75770: CALL 27067 0 2
75774: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75775: LD_EXP 132
75779: PUSH
75780: LD_VAR 0 4
75784: ARRAY
75785: IFFALSE 75866
// begin for i in hackTanksCaptured [ index ] do
75787: LD_ADDR_VAR 0 3
75791: PUSH
75792: LD_EXP 132
75796: PUSH
75797: LD_VAR 0 4
75801: ARRAY
75802: PUSH
75803: FOR_IN
75804: IFFALSE 75830
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75806: LD_VAR 0 3
75810: PUSH
75811: LD_INT 1
75813: ARRAY
75814: PPUSH
75815: LD_VAR 0 3
75819: PUSH
75820: LD_INT 2
75822: ARRAY
75823: PPUSH
75824: CALL_OW 235
75828: GO 75803
75830: POP
75831: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75832: LD_ADDR_EXP 132
75836: PUSH
75837: LD_EXP 132
75841: PPUSH
75842: LD_VAR 0 4
75846: PPUSH
75847: EMPTY
75848: PPUSH
75849: CALL_OW 1
75853: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75854: LD_VAR 0 1
75858: PPUSH
75859: LD_INT 0
75861: PPUSH
75862: CALL_OW 505
// end ; end ;
75866: LD_VAR 0 2
75870: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75871: LD_INT 0
75873: PPUSH
75874: PPUSH
75875: PPUSH
// if not hack in hackTanks or not vehicles then
75876: LD_VAR 0 1
75880: PUSH
75881: LD_EXP 131
75885: IN
75886: NOT
75887: PUSH
75888: LD_VAR 0 2
75892: NOT
75893: OR
75894: IFFALSE 75898
// exit ;
75896: GO 76173
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75898: LD_ADDR_VAR 0 2
75902: PUSH
75903: LD_VAR 0 1
75907: PPUSH
75908: LD_VAR 0 2
75912: PPUSH
75913: LD_INT 1
75915: PPUSH
75916: LD_INT 1
75918: PPUSH
75919: CALL 27717 0 4
75923: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
75924: LD_ADDR_VAR 0 5
75928: PUSH
75929: LD_EXP 131
75933: PPUSH
75934: LD_VAR 0 1
75938: PPUSH
75939: CALL 27067 0 2
75943: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
75944: LD_EXP 132
75948: PUSH
75949: LD_VAR 0 5
75953: ARRAY
75954: PUSH
75955: LD_EXP 133
75959: LESS
75960: IFFALSE 76149
// begin for i := 1 to vehicles do
75962: LD_ADDR_VAR 0 4
75966: PUSH
75967: DOUBLE
75968: LD_INT 1
75970: DEC
75971: ST_TO_ADDR
75972: LD_VAR 0 2
75976: PUSH
75977: FOR_TO
75978: IFFALSE 76147
// begin if hackTanksCaptured [ index ] = hackLimit then
75980: LD_EXP 132
75984: PUSH
75985: LD_VAR 0 5
75989: ARRAY
75990: PUSH
75991: LD_EXP 133
75995: EQUAL
75996: IFFALSE 76000
// break ;
75998: GO 76147
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
76000: LD_ADDR_EXP 135
76004: PUSH
76005: LD_EXP 135
76009: PPUSH
76010: LD_VAR 0 5
76014: PPUSH
76015: LD_EXP 135
76019: PUSH
76020: LD_VAR 0 5
76024: ARRAY
76025: PUSH
76026: LD_INT 1
76028: PLUS
76029: PPUSH
76030: CALL_OW 1
76034: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
76035: LD_ADDR_EXP 132
76039: PUSH
76040: LD_EXP 132
76044: PPUSH
76045: LD_VAR 0 5
76049: PUSH
76050: LD_EXP 132
76054: PUSH
76055: LD_VAR 0 5
76059: ARRAY
76060: PUSH
76061: LD_INT 1
76063: PLUS
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: PPUSH
76069: LD_VAR 0 2
76073: PUSH
76074: LD_VAR 0 4
76078: ARRAY
76079: PUSH
76080: LD_VAR 0 2
76084: PUSH
76085: LD_VAR 0 4
76089: ARRAY
76090: PPUSH
76091: CALL_OW 255
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: PPUSH
76100: CALL 27282 0 3
76104: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76105: LD_VAR 0 2
76109: PUSH
76110: LD_VAR 0 4
76114: ARRAY
76115: PPUSH
76116: LD_VAR 0 1
76120: PPUSH
76121: CALL_OW 255
76125: PPUSH
76126: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76130: LD_VAR 0 2
76134: PUSH
76135: LD_VAR 0 4
76139: ARRAY
76140: PPUSH
76141: CALL_OW 141
// end ;
76145: GO 75977
76147: POP
76148: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76149: LD_VAR 0 1
76153: PPUSH
76154: LD_EXP 132
76158: PUSH
76159: LD_VAR 0 5
76163: ARRAY
76164: PUSH
76165: LD_INT 0
76167: PLUS
76168: PPUSH
76169: CALL_OW 505
// end ;
76173: LD_VAR 0 3
76177: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76178: LD_INT 0
76180: PPUSH
76181: PPUSH
76182: PPUSH
76183: PPUSH
// if not hack in hackTanks then
76184: LD_VAR 0 1
76188: PUSH
76189: LD_EXP 131
76193: IN
76194: NOT
76195: IFFALSE 76199
// exit ;
76197: GO 76439
// index := GetElementIndex ( hackTanks , hack ) ;
76199: LD_ADDR_VAR 0 4
76203: PUSH
76204: LD_EXP 131
76208: PPUSH
76209: LD_VAR 0 1
76213: PPUSH
76214: CALL 27067 0 2
76218: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76219: LD_ADDR_VAR 0 3
76223: PUSH
76224: DOUBLE
76225: LD_EXP 132
76229: PUSH
76230: LD_VAR 0 4
76234: ARRAY
76235: INC
76236: ST_TO_ADDR
76237: LD_INT 1
76239: PUSH
76240: FOR_DOWNTO
76241: IFFALSE 76413
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76243: LD_ADDR_VAR 0 5
76247: PUSH
76248: LD_EXP 132
76252: PUSH
76253: LD_VAR 0 4
76257: ARRAY
76258: PUSH
76259: LD_VAR 0 3
76263: ARRAY
76264: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76265: LD_VAR 0 5
76269: PUSH
76270: LD_INT 1
76272: ARRAY
76273: PPUSH
76274: CALL_OW 302
76278: NOT
76279: PUSH
76280: LD_VAR 0 5
76284: PUSH
76285: LD_INT 1
76287: ARRAY
76288: PPUSH
76289: CALL_OW 255
76293: PUSH
76294: LD_VAR 0 1
76298: PPUSH
76299: CALL_OW 255
76303: NONEQUAL
76304: OR
76305: IFFALSE 76411
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76307: LD_VAR 0 5
76311: PUSH
76312: LD_INT 1
76314: ARRAY
76315: PPUSH
76316: CALL_OW 305
76320: PUSH
76321: LD_VAR 0 5
76325: PUSH
76326: LD_INT 1
76328: ARRAY
76329: PPUSH
76330: CALL_OW 255
76334: PUSH
76335: LD_VAR 0 1
76339: PPUSH
76340: CALL_OW 255
76344: EQUAL
76345: AND
76346: IFFALSE 76370
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76348: LD_VAR 0 5
76352: PUSH
76353: LD_INT 1
76355: ARRAY
76356: PPUSH
76357: LD_VAR 0 5
76361: PUSH
76362: LD_INT 2
76364: ARRAY
76365: PPUSH
76366: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76370: LD_ADDR_EXP 132
76374: PUSH
76375: LD_EXP 132
76379: PPUSH
76380: LD_VAR 0 4
76384: PPUSH
76385: LD_EXP 132
76389: PUSH
76390: LD_VAR 0 4
76394: ARRAY
76395: PPUSH
76396: LD_VAR 0 3
76400: PPUSH
76401: CALL_OW 3
76405: PPUSH
76406: CALL_OW 1
76410: ST_TO_ADDR
// end ; end ;
76411: GO 76240
76413: POP
76414: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76415: LD_VAR 0 1
76419: PPUSH
76420: LD_EXP 132
76424: PUSH
76425: LD_VAR 0 4
76429: ARRAY
76430: PUSH
76431: LD_INT 0
76433: PLUS
76434: PPUSH
76435: CALL_OW 505
// end ;
76439: LD_VAR 0 2
76443: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76444: LD_INT 0
76446: PPUSH
76447: PPUSH
76448: PPUSH
76449: PPUSH
// if not hack in hackTanks then
76450: LD_VAR 0 1
76454: PUSH
76455: LD_EXP 131
76459: IN
76460: NOT
76461: IFFALSE 76465
// exit ;
76463: GO 76550
// index := GetElementIndex ( hackTanks , hack ) ;
76465: LD_ADDR_VAR 0 5
76469: PUSH
76470: LD_EXP 131
76474: PPUSH
76475: LD_VAR 0 1
76479: PPUSH
76480: CALL 27067 0 2
76484: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76485: LD_ADDR_VAR 0 4
76489: PUSH
76490: DOUBLE
76491: LD_INT 1
76493: DEC
76494: ST_TO_ADDR
76495: LD_EXP 132
76499: PUSH
76500: LD_VAR 0 5
76504: ARRAY
76505: PUSH
76506: FOR_TO
76507: IFFALSE 76548
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76509: LD_EXP 132
76513: PUSH
76514: LD_VAR 0 5
76518: ARRAY
76519: PUSH
76520: LD_VAR 0 4
76524: ARRAY
76525: PUSH
76526: LD_INT 1
76528: ARRAY
76529: PUSH
76530: LD_VAR 0 2
76534: EQUAL
76535: IFFALSE 76546
// KillUnit ( vehicle ) ;
76537: LD_VAR 0 2
76541: PPUSH
76542: CALL_OW 66
76546: GO 76506
76548: POP
76549: POP
// end ;
76550: LD_VAR 0 3
76554: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76555: LD_EXP 136
76559: NOT
76560: IFFALSE 76595
76562: GO 76564
76564: DISABLE
// begin initMiner := true ;
76565: LD_ADDR_EXP 136
76569: PUSH
76570: LD_INT 1
76572: ST_TO_ADDR
// minersList := [ ] ;
76573: LD_ADDR_EXP 137
76577: PUSH
76578: EMPTY
76579: ST_TO_ADDR
// minerMinesList := [ ] ;
76580: LD_ADDR_EXP 138
76584: PUSH
76585: EMPTY
76586: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76587: LD_ADDR_EXP 139
76591: PUSH
76592: LD_INT 5
76594: ST_TO_ADDR
// end ;
76595: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76596: LD_EXP 136
76600: PUSH
76601: LD_INT 34
76603: PUSH
76604: LD_EXP 61
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PPUSH
76613: CALL_OW 69
76617: AND
76618: IFFALSE 77081
76620: GO 76622
76622: DISABLE
76623: LD_INT 0
76625: PPUSH
76626: PPUSH
76627: PPUSH
76628: PPUSH
// begin enable ;
76629: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76630: LD_ADDR_VAR 0 1
76634: PUSH
76635: LD_INT 34
76637: PUSH
76638: LD_EXP 61
76642: PUSH
76643: EMPTY
76644: LIST
76645: LIST
76646: PPUSH
76647: CALL_OW 69
76651: PUSH
76652: FOR_IN
76653: IFFALSE 76725
// begin if not i in minersList then
76655: LD_VAR 0 1
76659: PUSH
76660: LD_EXP 137
76664: IN
76665: NOT
76666: IFFALSE 76723
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76668: LD_ADDR_EXP 137
76672: PUSH
76673: LD_EXP 137
76677: PPUSH
76678: LD_EXP 137
76682: PUSH
76683: LD_INT 1
76685: PLUS
76686: PPUSH
76687: LD_VAR 0 1
76691: PPUSH
76692: CALL_OW 1
76696: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76697: LD_ADDR_EXP 138
76701: PUSH
76702: LD_EXP 138
76706: PPUSH
76707: LD_EXP 138
76711: PUSH
76712: LD_INT 1
76714: PLUS
76715: PPUSH
76716: EMPTY
76717: PPUSH
76718: CALL_OW 1
76722: ST_TO_ADDR
// end end ;
76723: GO 76652
76725: POP
76726: POP
// for i := minerMinesList downto 1 do
76727: LD_ADDR_VAR 0 1
76731: PUSH
76732: DOUBLE
76733: LD_EXP 138
76737: INC
76738: ST_TO_ADDR
76739: LD_INT 1
76741: PUSH
76742: FOR_DOWNTO
76743: IFFALSE 77079
// begin if IsLive ( minersList [ i ] ) then
76745: LD_EXP 137
76749: PUSH
76750: LD_VAR 0 1
76754: ARRAY
76755: PPUSH
76756: CALL_OW 300
76760: IFFALSE 76788
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76762: LD_EXP 137
76766: PUSH
76767: LD_VAR 0 1
76771: ARRAY
76772: PPUSH
76773: LD_EXP 138
76777: PUSH
76778: LD_VAR 0 1
76782: ARRAY
76783: PPUSH
76784: CALL_OW 505
// if not minerMinesList [ i ] then
76788: LD_EXP 138
76792: PUSH
76793: LD_VAR 0 1
76797: ARRAY
76798: NOT
76799: IFFALSE 76803
// continue ;
76801: GO 76742
// for j := minerMinesList [ i ] downto 1 do
76803: LD_ADDR_VAR 0 2
76807: PUSH
76808: DOUBLE
76809: LD_EXP 138
76813: PUSH
76814: LD_VAR 0 1
76818: ARRAY
76819: INC
76820: ST_TO_ADDR
76821: LD_INT 1
76823: PUSH
76824: FOR_DOWNTO
76825: IFFALSE 77075
// begin side := GetSide ( minersList [ i ] ) ;
76827: LD_ADDR_VAR 0 3
76831: PUSH
76832: LD_EXP 137
76836: PUSH
76837: LD_VAR 0 1
76841: ARRAY
76842: PPUSH
76843: CALL_OW 255
76847: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76848: LD_ADDR_VAR 0 4
76852: PUSH
76853: LD_EXP 138
76857: PUSH
76858: LD_VAR 0 1
76862: ARRAY
76863: PUSH
76864: LD_VAR 0 2
76868: ARRAY
76869: PUSH
76870: LD_INT 1
76872: ARRAY
76873: PPUSH
76874: LD_EXP 138
76878: PUSH
76879: LD_VAR 0 1
76883: ARRAY
76884: PUSH
76885: LD_VAR 0 2
76889: ARRAY
76890: PUSH
76891: LD_INT 2
76893: ARRAY
76894: PPUSH
76895: CALL_OW 428
76899: ST_TO_ADDR
// if not tmp then
76900: LD_VAR 0 4
76904: NOT
76905: IFFALSE 76909
// continue ;
76907: GO 76824
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76909: LD_VAR 0 4
76913: PUSH
76914: LD_INT 81
76916: PUSH
76917: LD_VAR 0 3
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PPUSH
76926: CALL_OW 69
76930: IN
76931: PUSH
76932: LD_EXP 138
76936: PUSH
76937: LD_VAR 0 1
76941: ARRAY
76942: PUSH
76943: LD_VAR 0 2
76947: ARRAY
76948: PUSH
76949: LD_INT 1
76951: ARRAY
76952: PPUSH
76953: LD_EXP 138
76957: PUSH
76958: LD_VAR 0 1
76962: ARRAY
76963: PUSH
76964: LD_VAR 0 2
76968: ARRAY
76969: PUSH
76970: LD_INT 2
76972: ARRAY
76973: PPUSH
76974: CALL_OW 458
76978: AND
76979: IFFALSE 77073
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
76981: LD_EXP 138
76985: PUSH
76986: LD_VAR 0 1
76990: ARRAY
76991: PUSH
76992: LD_VAR 0 2
76996: ARRAY
76997: PUSH
76998: LD_INT 1
77000: ARRAY
77001: PPUSH
77002: LD_EXP 138
77006: PUSH
77007: LD_VAR 0 1
77011: ARRAY
77012: PUSH
77013: LD_VAR 0 2
77017: ARRAY
77018: PUSH
77019: LD_INT 2
77021: ARRAY
77022: PPUSH
77023: LD_VAR 0 3
77027: PPUSH
77028: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
77032: LD_ADDR_EXP 138
77036: PUSH
77037: LD_EXP 138
77041: PPUSH
77042: LD_VAR 0 1
77046: PPUSH
77047: LD_EXP 138
77051: PUSH
77052: LD_VAR 0 1
77056: ARRAY
77057: PPUSH
77058: LD_VAR 0 2
77062: PPUSH
77063: CALL_OW 3
77067: PPUSH
77068: CALL_OW 1
77072: ST_TO_ADDR
// end ; end ;
77073: GO 76824
77075: POP
77076: POP
// end ;
77077: GO 76742
77079: POP
77080: POP
// end ;
77081: PPOPN 4
77083: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77084: LD_INT 0
77086: PPUSH
77087: PPUSH
// result := false ;
77088: LD_ADDR_VAR 0 4
77092: PUSH
77093: LD_INT 0
77095: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77096: LD_VAR 0 1
77100: PPUSH
77101: CALL_OW 264
77105: PUSH
77106: LD_EXP 61
77110: EQUAL
77111: NOT
77112: IFFALSE 77116
// exit ;
77114: GO 77356
// index := GetElementIndex ( minersList , unit ) ;
77116: LD_ADDR_VAR 0 5
77120: PUSH
77121: LD_EXP 137
77125: PPUSH
77126: LD_VAR 0 1
77130: PPUSH
77131: CALL 27067 0 2
77135: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77136: LD_EXP 138
77140: PUSH
77141: LD_VAR 0 5
77145: ARRAY
77146: PUSH
77147: LD_EXP 139
77151: GREATEREQUAL
77152: IFFALSE 77156
// exit ;
77154: GO 77356
// ComMoveXY ( unit , x , y ) ;
77156: LD_VAR 0 1
77160: PPUSH
77161: LD_VAR 0 2
77165: PPUSH
77166: LD_VAR 0 3
77170: PPUSH
77171: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77175: LD_INT 35
77177: PPUSH
77178: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77182: LD_VAR 0 1
77186: PPUSH
77187: LD_VAR 0 2
77191: PPUSH
77192: LD_VAR 0 3
77196: PPUSH
77197: CALL 57840 0 3
77201: NOT
77202: PUSH
77203: LD_VAR 0 1
77207: PPUSH
77208: CALL_OW 314
77212: AND
77213: IFFALSE 77217
// exit ;
77215: GO 77356
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77217: LD_VAR 0 2
77221: PPUSH
77222: LD_VAR 0 3
77226: PPUSH
77227: CALL_OW 428
77231: PUSH
77232: LD_VAR 0 1
77236: EQUAL
77237: PUSH
77238: LD_VAR 0 1
77242: PPUSH
77243: CALL_OW 314
77247: NOT
77248: AND
77249: IFFALSE 77175
// PlaySoundXY ( x , y , PlantMine ) ;
77251: LD_VAR 0 2
77255: PPUSH
77256: LD_VAR 0 3
77260: PPUSH
77261: LD_STRING PlantMine
77263: PPUSH
77264: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77268: LD_VAR 0 2
77272: PPUSH
77273: LD_VAR 0 3
77277: PPUSH
77278: LD_VAR 0 1
77282: PPUSH
77283: CALL_OW 255
77287: PPUSH
77288: LD_INT 0
77290: PPUSH
77291: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77295: LD_ADDR_EXP 138
77299: PUSH
77300: LD_EXP 138
77304: PPUSH
77305: LD_VAR 0 5
77309: PUSH
77310: LD_EXP 138
77314: PUSH
77315: LD_VAR 0 5
77319: ARRAY
77320: PUSH
77321: LD_INT 1
77323: PLUS
77324: PUSH
77325: EMPTY
77326: LIST
77327: LIST
77328: PPUSH
77329: LD_VAR 0 2
77333: PUSH
77334: LD_VAR 0 3
77338: PUSH
77339: EMPTY
77340: LIST
77341: LIST
77342: PPUSH
77343: CALL 27282 0 3
77347: ST_TO_ADDR
// result := true ;
77348: LD_ADDR_VAR 0 4
77352: PUSH
77353: LD_INT 1
77355: ST_TO_ADDR
// end ;
77356: LD_VAR 0 4
77360: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77361: LD_INT 0
77363: PPUSH
77364: PPUSH
77365: PPUSH
// if not unit in minersList then
77366: LD_VAR 0 1
77370: PUSH
77371: LD_EXP 137
77375: IN
77376: NOT
77377: IFFALSE 77381
// exit ;
77379: GO 77773
// index := GetElementIndex ( minersList , unit ) ;
77381: LD_ADDR_VAR 0 6
77385: PUSH
77386: LD_EXP 137
77390: PPUSH
77391: LD_VAR 0 1
77395: PPUSH
77396: CALL 27067 0 2
77400: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77401: LD_ADDR_VAR 0 5
77405: PUSH
77406: DOUBLE
77407: LD_EXP 138
77411: PUSH
77412: LD_VAR 0 6
77416: ARRAY
77417: INC
77418: ST_TO_ADDR
77419: LD_INT 1
77421: PUSH
77422: FOR_DOWNTO
77423: IFFALSE 77584
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77425: LD_EXP 138
77429: PUSH
77430: LD_VAR 0 6
77434: ARRAY
77435: PUSH
77436: LD_VAR 0 5
77440: ARRAY
77441: PUSH
77442: LD_INT 1
77444: ARRAY
77445: PUSH
77446: LD_VAR 0 2
77450: EQUAL
77451: PUSH
77452: LD_EXP 138
77456: PUSH
77457: LD_VAR 0 6
77461: ARRAY
77462: PUSH
77463: LD_VAR 0 5
77467: ARRAY
77468: PUSH
77469: LD_INT 2
77471: ARRAY
77472: PUSH
77473: LD_VAR 0 3
77477: EQUAL
77478: AND
77479: IFFALSE 77582
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77481: LD_EXP 138
77485: PUSH
77486: LD_VAR 0 6
77490: ARRAY
77491: PUSH
77492: LD_VAR 0 5
77496: ARRAY
77497: PUSH
77498: LD_INT 1
77500: ARRAY
77501: PPUSH
77502: LD_EXP 138
77506: PUSH
77507: LD_VAR 0 6
77511: ARRAY
77512: PUSH
77513: LD_VAR 0 5
77517: ARRAY
77518: PUSH
77519: LD_INT 2
77521: ARRAY
77522: PPUSH
77523: LD_VAR 0 1
77527: PPUSH
77528: CALL_OW 255
77532: PPUSH
77533: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77537: LD_ADDR_EXP 138
77541: PUSH
77542: LD_EXP 138
77546: PPUSH
77547: LD_VAR 0 6
77551: PPUSH
77552: LD_EXP 138
77556: PUSH
77557: LD_VAR 0 6
77561: ARRAY
77562: PPUSH
77563: LD_VAR 0 5
77567: PPUSH
77568: CALL_OW 3
77572: PPUSH
77573: CALL_OW 1
77577: ST_TO_ADDR
// exit ;
77578: POP
77579: POP
77580: GO 77773
// end ; end ;
77582: GO 77422
77584: POP
77585: POP
// for i := minerMinesList [ index ] downto 1 do
77586: LD_ADDR_VAR 0 5
77590: PUSH
77591: DOUBLE
77592: LD_EXP 138
77596: PUSH
77597: LD_VAR 0 6
77601: ARRAY
77602: INC
77603: ST_TO_ADDR
77604: LD_INT 1
77606: PUSH
77607: FOR_DOWNTO
77608: IFFALSE 77771
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77610: LD_EXP 138
77614: PUSH
77615: LD_VAR 0 6
77619: ARRAY
77620: PUSH
77621: LD_VAR 0 5
77625: ARRAY
77626: PUSH
77627: LD_INT 1
77629: ARRAY
77630: PPUSH
77631: LD_EXP 138
77635: PUSH
77636: LD_VAR 0 6
77640: ARRAY
77641: PUSH
77642: LD_VAR 0 5
77646: ARRAY
77647: PUSH
77648: LD_INT 2
77650: ARRAY
77651: PPUSH
77652: LD_VAR 0 2
77656: PPUSH
77657: LD_VAR 0 3
77661: PPUSH
77662: CALL_OW 298
77666: PUSH
77667: LD_INT 6
77669: LESS
77670: IFFALSE 77769
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77672: LD_EXP 138
77676: PUSH
77677: LD_VAR 0 6
77681: ARRAY
77682: PUSH
77683: LD_VAR 0 5
77687: ARRAY
77688: PUSH
77689: LD_INT 1
77691: ARRAY
77692: PPUSH
77693: LD_EXP 138
77697: PUSH
77698: LD_VAR 0 6
77702: ARRAY
77703: PUSH
77704: LD_VAR 0 5
77708: ARRAY
77709: PUSH
77710: LD_INT 2
77712: ARRAY
77713: PPUSH
77714: LD_VAR 0 1
77718: PPUSH
77719: CALL_OW 255
77723: PPUSH
77724: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77728: LD_ADDR_EXP 138
77732: PUSH
77733: LD_EXP 138
77737: PPUSH
77738: LD_VAR 0 6
77742: PPUSH
77743: LD_EXP 138
77747: PUSH
77748: LD_VAR 0 6
77752: ARRAY
77753: PPUSH
77754: LD_VAR 0 5
77758: PPUSH
77759: CALL_OW 3
77763: PPUSH
77764: CALL_OW 1
77768: ST_TO_ADDR
// end ; end ;
77769: GO 77607
77771: POP
77772: POP
// end ;
77773: LD_VAR 0 4
77777: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77778: LD_INT 0
77780: PPUSH
77781: PPUSH
77782: PPUSH
77783: PPUSH
77784: PPUSH
77785: PPUSH
77786: PPUSH
77787: PPUSH
77788: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77789: LD_VAR 0 1
77793: PPUSH
77794: CALL_OW 264
77798: PUSH
77799: LD_EXP 61
77803: EQUAL
77804: NOT
77805: PUSH
77806: LD_VAR 0 1
77810: PUSH
77811: LD_EXP 137
77815: IN
77816: NOT
77817: OR
77818: IFFALSE 77822
// exit ;
77820: GO 78144
// index := GetElementIndex ( minersList , unit ) ;
77822: LD_ADDR_VAR 0 6
77826: PUSH
77827: LD_EXP 137
77831: PPUSH
77832: LD_VAR 0 1
77836: PPUSH
77837: CALL 27067 0 2
77841: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77842: LD_ADDR_VAR 0 8
77846: PUSH
77847: LD_EXP 139
77851: PUSH
77852: LD_EXP 138
77856: PUSH
77857: LD_VAR 0 6
77861: ARRAY
77862: MINUS
77863: ST_TO_ADDR
// if not minesFreeAmount then
77864: LD_VAR 0 8
77868: NOT
77869: IFFALSE 77873
// exit ;
77871: GO 78144
// tmp := [ ] ;
77873: LD_ADDR_VAR 0 7
77877: PUSH
77878: EMPTY
77879: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77880: LD_ADDR_VAR 0 5
77884: PUSH
77885: DOUBLE
77886: LD_INT 1
77888: DEC
77889: ST_TO_ADDR
77890: LD_VAR 0 8
77894: PUSH
77895: FOR_TO
77896: IFFALSE 78091
// begin _d := rand ( 0 , 5 ) ;
77898: LD_ADDR_VAR 0 11
77902: PUSH
77903: LD_INT 0
77905: PPUSH
77906: LD_INT 5
77908: PPUSH
77909: CALL_OW 12
77913: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77914: LD_ADDR_VAR 0 12
77918: PUSH
77919: LD_INT 2
77921: PPUSH
77922: LD_INT 6
77924: PPUSH
77925: CALL_OW 12
77929: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77930: LD_ADDR_VAR 0 9
77934: PUSH
77935: LD_VAR 0 2
77939: PPUSH
77940: LD_VAR 0 11
77944: PPUSH
77945: LD_VAR 0 12
77949: PPUSH
77950: CALL_OW 272
77954: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
77955: LD_ADDR_VAR 0 10
77959: PUSH
77960: LD_VAR 0 3
77964: PPUSH
77965: LD_VAR 0 11
77969: PPUSH
77970: LD_VAR 0 12
77974: PPUSH
77975: CALL_OW 273
77979: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
77980: LD_VAR 0 9
77984: PPUSH
77985: LD_VAR 0 10
77989: PPUSH
77990: CALL_OW 488
77994: PUSH
77995: LD_VAR 0 9
77999: PUSH
78000: LD_VAR 0 10
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: PUSH
78009: LD_VAR 0 7
78013: IN
78014: NOT
78015: AND
78016: PUSH
78017: LD_VAR 0 9
78021: PPUSH
78022: LD_VAR 0 10
78026: PPUSH
78027: CALL_OW 458
78031: NOT
78032: AND
78033: IFFALSE 78075
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
78035: LD_ADDR_VAR 0 7
78039: PUSH
78040: LD_VAR 0 7
78044: PPUSH
78045: LD_VAR 0 7
78049: PUSH
78050: LD_INT 1
78052: PLUS
78053: PPUSH
78054: LD_VAR 0 9
78058: PUSH
78059: LD_VAR 0 10
78063: PUSH
78064: EMPTY
78065: LIST
78066: LIST
78067: PPUSH
78068: CALL_OW 1
78072: ST_TO_ADDR
78073: GO 78089
// i := i - 1 ;
78075: LD_ADDR_VAR 0 5
78079: PUSH
78080: LD_VAR 0 5
78084: PUSH
78085: LD_INT 1
78087: MINUS
78088: ST_TO_ADDR
// end ;
78089: GO 77895
78091: POP
78092: POP
// for i in tmp do
78093: LD_ADDR_VAR 0 5
78097: PUSH
78098: LD_VAR 0 7
78102: PUSH
78103: FOR_IN
78104: IFFALSE 78142
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78106: LD_VAR 0 1
78110: PPUSH
78111: LD_VAR 0 5
78115: PUSH
78116: LD_INT 1
78118: ARRAY
78119: PPUSH
78120: LD_VAR 0 5
78124: PUSH
78125: LD_INT 2
78127: ARRAY
78128: PPUSH
78129: CALL 77084 0 3
78133: NOT
78134: IFFALSE 78140
// exit ;
78136: POP
78137: POP
78138: GO 78144
78140: GO 78103
78142: POP
78143: POP
// end ;
78144: LD_VAR 0 4
78148: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78149: LD_INT 0
78151: PPUSH
78152: PPUSH
78153: PPUSH
78154: PPUSH
78155: PPUSH
78156: PPUSH
78157: PPUSH
// if not GetClass ( unit ) = class_sniper then
78158: LD_VAR 0 1
78162: PPUSH
78163: CALL_OW 257
78167: PUSH
78168: LD_INT 5
78170: EQUAL
78171: NOT
78172: IFFALSE 78176
// exit ;
78174: GO 78564
// dist := 8 ;
78176: LD_ADDR_VAR 0 5
78180: PUSH
78181: LD_INT 8
78183: ST_TO_ADDR
// viewRange := 12 ;
78184: LD_ADDR_VAR 0 7
78188: PUSH
78189: LD_INT 12
78191: ST_TO_ADDR
// side := GetSide ( unit ) ;
78192: LD_ADDR_VAR 0 6
78196: PUSH
78197: LD_VAR 0 1
78201: PPUSH
78202: CALL_OW 255
78206: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78207: LD_INT 61
78209: PPUSH
78210: LD_VAR 0 6
78214: PPUSH
78215: CALL_OW 321
78219: PUSH
78220: LD_INT 2
78222: EQUAL
78223: IFFALSE 78233
// viewRange := 16 ;
78225: LD_ADDR_VAR 0 7
78229: PUSH
78230: LD_INT 16
78232: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78233: LD_VAR 0 1
78237: PPUSH
78238: LD_VAR 0 2
78242: PPUSH
78243: LD_VAR 0 3
78247: PPUSH
78248: CALL_OW 297
78252: PUSH
78253: LD_VAR 0 5
78257: GREATER
78258: IFFALSE 78337
// begin ComMoveXY ( unit , x , y ) ;
78260: LD_VAR 0 1
78264: PPUSH
78265: LD_VAR 0 2
78269: PPUSH
78270: LD_VAR 0 3
78274: PPUSH
78275: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78279: LD_INT 35
78281: PPUSH
78282: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78286: LD_VAR 0 1
78290: PPUSH
78291: LD_VAR 0 2
78295: PPUSH
78296: LD_VAR 0 3
78300: PPUSH
78301: CALL 57840 0 3
78305: NOT
78306: IFFALSE 78310
// exit ;
78308: GO 78564
// until GetDistUnitXY ( unit , x , y ) < dist ;
78310: LD_VAR 0 1
78314: PPUSH
78315: LD_VAR 0 2
78319: PPUSH
78320: LD_VAR 0 3
78324: PPUSH
78325: CALL_OW 297
78329: PUSH
78330: LD_VAR 0 5
78334: LESS
78335: IFFALSE 78279
// end ; ComTurnXY ( unit , x , y ) ;
78337: LD_VAR 0 1
78341: PPUSH
78342: LD_VAR 0 2
78346: PPUSH
78347: LD_VAR 0 3
78351: PPUSH
78352: CALL_OW 118
// wait ( 5 ) ;
78356: LD_INT 5
78358: PPUSH
78359: CALL_OW 67
// _d := GetDir ( unit ) ;
78363: LD_ADDR_VAR 0 10
78367: PUSH
78368: LD_VAR 0 1
78372: PPUSH
78373: CALL_OW 254
78377: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78378: LD_ADDR_VAR 0 8
78382: PUSH
78383: LD_VAR 0 1
78387: PPUSH
78388: CALL_OW 250
78392: PPUSH
78393: LD_VAR 0 10
78397: PPUSH
78398: LD_VAR 0 5
78402: PPUSH
78403: CALL_OW 272
78407: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78408: LD_ADDR_VAR 0 9
78412: PUSH
78413: LD_VAR 0 1
78417: PPUSH
78418: CALL_OW 251
78422: PPUSH
78423: LD_VAR 0 10
78427: PPUSH
78428: LD_VAR 0 5
78432: PPUSH
78433: CALL_OW 273
78437: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78438: LD_VAR 0 8
78442: PPUSH
78443: LD_VAR 0 9
78447: PPUSH
78448: CALL_OW 488
78452: NOT
78453: IFFALSE 78457
// exit ;
78455: GO 78564
// ComAnimCustom ( unit , 1 ) ;
78457: LD_VAR 0 1
78461: PPUSH
78462: LD_INT 1
78464: PPUSH
78465: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78469: LD_VAR 0 8
78473: PPUSH
78474: LD_VAR 0 9
78478: PPUSH
78479: LD_VAR 0 6
78483: PPUSH
78484: LD_VAR 0 7
78488: PPUSH
78489: CALL_OW 330
// repeat wait ( 1 ) ;
78493: LD_INT 1
78495: PPUSH
78496: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78500: LD_VAR 0 1
78504: PPUSH
78505: CALL_OW 316
78509: PUSH
78510: LD_VAR 0 1
78514: PPUSH
78515: CALL_OW 314
78519: OR
78520: PUSH
78521: LD_VAR 0 1
78525: PPUSH
78526: CALL_OW 302
78530: NOT
78531: OR
78532: PUSH
78533: LD_VAR 0 1
78537: PPUSH
78538: CALL_OW 301
78542: OR
78543: IFFALSE 78493
// RemoveSeeing ( _x , _y , side ) ;
78545: LD_VAR 0 8
78549: PPUSH
78550: LD_VAR 0 9
78554: PPUSH
78555: LD_VAR 0 6
78559: PPUSH
78560: CALL_OW 331
// end ; end_of_file
78564: LD_VAR 0 4
78568: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78569: LD_VAR 0 1
78573: PPUSH
78574: LD_VAR 0 2
78578: PPUSH
78579: LD_VAR 0 3
78583: PPUSH
78584: LD_VAR 0 4
78588: PPUSH
78589: LD_VAR 0 5
78593: PPUSH
78594: LD_VAR 0 6
78598: PPUSH
78599: CALL 61219 0 6
// end ;
78603: PPOPN 6
78605: END
