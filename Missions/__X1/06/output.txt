// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 7511 0 2
// PrepareArabian ;
  32: CALL 377 0 0
// PrepareRussian ;
  36: CALL 8282 0 0
// Action ;
  40: CALL 16467 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// bergkampfArrived := false ;
 109: LD_ADDR_EXP 3
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omarArrived := false ;
 117: LD_ADDR_EXP 6
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// outpostDestroyed := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// ruLoseCounter := 0 ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// rolfScriptBase := false ;
 141: LD_ADDR_EXP 9
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omarScriptBase := false ;
 149: LD_ADDR_EXP 10
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// linkedWithRolf := 0 ;
 157: LD_ADDR_EXP 12
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 165: LD_ADDR_EXP 26
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// rolfDied := false ;
 173: LD_ADDR_EXP 13
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// leninSpotted := false ;
 181: LD_ADDR_EXP 14
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// mortarConstructed := false ;
 189: LD_ADDR_EXP 15
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// rolfHasVehicles := false ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// leninScriptBase := true ;
 205: LD_ADDR_EXP 11
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// rolfWantVehicles := false ;
 213: LD_ADDR_EXP 17
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// omarWantVehicles := false ;
 221: LD_ADDR_EXP 18
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// omarHasVehicles := false ;
 229: LD_ADDR_EXP 22
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// escapeAllowed := false ;
 237: LD_ADDR_EXP 24
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 9 9$00 , 8 8$30 , 8 8$00 , 7 7$00 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 18900
 252: PUSH
 253: LD_INT 17850
 255: PUSH
 256: LD_INT 16800
 258: PUSH
 259: LD_INT 14700
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] ;
 274: LD_ADDR_EXP 20
 278: PUSH
 279: LD_INT 21000
 281: PUSH
 282: LD_INT 18900
 284: PUSH
 285: LD_INT 16800
 287: PUSH
 288: LD_INT 14700
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: LIST
 296: PUSH
 297: LD_OWVAR 67
 301: ARRAY
 302: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 303: LD_ADDR_EXP 21
 307: PUSH
 308: LD_INT 4
 310: PUSH
 311: LD_INT 5
 313: PUSH
 314: LD_INT 6
 316: PUSH
 317: LD_INT 6
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: PUSH
 326: LD_OWVAR 67
 330: ARRAY
 331: ST_TO_ADDR
// omarAttack := false ;
 332: LD_ADDR_EXP 23
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// disableAttackOnHeike := false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// escapeTimer := 5 5$00 ;
 348: LD_ADDR_EXP 25
 352: PUSH
 353: LD_INT 10500
 355: ST_TO_ADDR
// firstAttack := true ;
 356: LD_ADDR_EXP 28
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// canRolfJoin := true ;
 364: LD_ADDR_EXP 29
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// end ; end_of_file
 372: LD_VAR 0 1
 376: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , tmp ; begin
 377: LD_INT 0
 379: PPUSH
 380: PPUSH
 381: PPUSH
 382: PPUSH
 383: PPUSH
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
 389: PPUSH
 390: PPUSH
// uc_nation := 2 ;
 391: LD_ADDR_OWVAR 21
 395: PUSH
 396: LD_INT 2
 398: ST_TO_ADDR
// uc_side := 5 ;
 399: LD_ADDR_OWVAR 20
 403: PUSH
 404: LD_INT 5
 406: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 407: LD_ADDR_EXP 38
 411: PUSH
 412: LD_STRING Abdul
 414: PPUSH
 415: LD_INT 0
 417: PPUSH
 418: LD_STRING 
 420: PPUSH
 421: CALL 25695 0 3
 425: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 426: LD_ADDR_EXP 40
 430: PUSH
 431: LD_STRING Omar
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: LD_STRING 
 439: PPUSH
 440: CALL 25695 0 3
 444: ST_TO_ADDR
// uc_side := 2 ;
 445: LD_ADDR_OWVAR 20
 449: PUSH
 450: LD_INT 2
 452: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 453: LD_ADDR_EXP 30
 457: PUSH
 458: LD_STRING Heike
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: LD_EXP 2
 471: PPUSH
 472: CALL 25695 0 3
 476: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 477: LD_ADDR_EXP 33
 481: PUSH
 482: LD_STRING Ibrahim
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: LD_EXP 2
 495: PPUSH
 496: CALL 25695 0 3
 500: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 501: LD_ADDR_EXP 31
 505: PUSH
 506: LD_STRING Givi
 508: PPUSH
 509: LD_EXP 1
 513: NOT
 514: PPUSH
 515: LD_EXP 2
 519: PPUSH
 520: CALL 25695 0 3
 524: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 525: LD_ADDR_EXP 34
 529: PUSH
 530: LD_STRING Kamil
 532: PPUSH
 533: LD_EXP 1
 537: NOT
 538: PPUSH
 539: LD_EXP 2
 543: PPUSH
 544: CALL 25695 0 3
 548: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 549: LD_ADDR_EXP 35
 553: PUSH
 554: LD_STRING Kaia
 556: PPUSH
 557: LD_EXP 1
 561: NOT
 562: PPUSH
 563: LD_EXP 2
 567: PPUSH
 568: CALL 25695 0 3
 572: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 573: LD_ADDR_EXP 36
 577: PUSH
 578: LD_STRING Sophia
 580: PPUSH
 581: LD_EXP 1
 585: NOT
 586: PPUSH
 587: LD_EXP 2
 591: PPUSH
 592: CALL 25695 0 3
 596: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 597: LD_ADDR_EXP 37
 601: PUSH
 602: LD_STRING Markov
 604: PPUSH
 605: LD_EXP 1
 609: NOT
 610: PPUSH
 611: LD_EXP 2
 615: PPUSH
 616: CALL 25695 0 3
 620: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 621: LD_ADDR_EXP 42
 625: PUSH
 626: LD_STRING Aviradze
 628: PPUSH
 629: LD_EXP 1
 633: NOT
 634: PPUSH
 635: LD_EXP 2
 639: PPUSH
 640: CALL 25695 0 3
 644: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 645: LD_ADDR_EXP 41
 649: PUSH
 650: LD_STRING Kurt
 652: PPUSH
 653: LD_EXP 1
 657: NOT
 658: PPUSH
 659: LD_EXP 2
 663: PPUSH
 664: CALL 25695 0 3
 668: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 669: LD_ADDR_EXP 32
 673: PUSH
 674: LD_STRING Mike
 676: PPUSH
 677: LD_EXP 1
 681: NOT
 682: PPUSH
 683: LD_EXP 2
 687: PPUSH
 688: CALL 25695 0 3
 692: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 693: LD_ADDR_EXP 39
 697: PUSH
 698: LD_STRING Olaf
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: LD_STRING 
 706: PPUSH
 707: CALL 25695 0 3
 711: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 712: LD_ADDR_EXP 45
 716: PUSH
 717: LD_STRING 05_others
 719: PPUSH
 720: CALL_OW 31
 724: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 725: LD_ADDR_EXP 46
 729: PUSH
 730: LD_STRING 05_apes
 732: PPUSH
 733: CALL_OW 31
 737: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: LD_STRING 05_Radar
 745: PPUSH
 746: LD_EXP 1
 750: PPUSH
 751: CALL_OW 30
 755: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 756: LD_ADDR_VAR 0 6
 760: PUSH
 761: LD_STRING 05_RemoteControl
 763: PPUSH
 764: LD_EXP 1
 768: PPUSH
 769: CALL_OW 30
 773: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 774: LD_ADDR_VAR 0 7
 778: PUSH
 779: LD_STRING 05_DrugsTested
 781: PPUSH
 782: LD_EXP 1
 786: PPUSH
 787: CALL_OW 30
 791: ST_TO_ADDR
// if hasDrugs then
 792: LD_VAR 0 7
 796: IFFALSE 811
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 798: LD_INT 5
 800: PPUSH
 801: LD_INT 2
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: CALL_OW 322
// if hasRadar then
 811: LD_VAR 0 5
 815: IFFALSE 830
// SetTech ( tech_radar , 2 , state_researched ) ;
 817: LD_INT 6
 819: PPUSH
 820: LD_INT 2
 822: PPUSH
 823: LD_INT 2
 825: PPUSH
 826: CALL_OW 322
// if hasRemote then
 830: LD_VAR 0 6
 834: IFFALSE 849
// SetTech ( tech_remCont , 2 , state_researched ) ;
 836: LD_INT 15
 838: PPUSH
 839: LD_INT 2
 841: PPUSH
 842: LD_INT 2
 844: PPUSH
 845: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 849: LD_ADDR_VAR 0 12
 853: PUSH
 854: LD_INT 5
 856: PPUSH
 857: LD_INT 0
 859: PPUSH
 860: CALL_OW 517
 864: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 865: LD_ADDR_VAR 0 2
 869: PUSH
 870: DOUBLE
 871: LD_INT 1
 873: DEC
 874: ST_TO_ADDR
 875: LD_VAR 0 12
 879: PUSH
 880: LD_INT 1
 882: ARRAY
 883: PUSH
 884: FOR_TO
 885: IFFALSE 962
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 887: LD_VAR 0 12
 891: PUSH
 892: LD_INT 1
 894: ARRAY
 895: PUSH
 896: LD_VAR 0 2
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 12
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PUSH
 911: LD_VAR 0 2
 915: ARRAY
 916: PPUSH
 917: CALL_OW 351
 921: IFFALSE 960
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
 923: LD_VAR 0 12
 927: PUSH
 928: LD_INT 1
 930: ARRAY
 931: PUSH
 932: LD_VAR 0 2
 936: ARRAY
 937: PPUSH
 938: LD_VAR 0 12
 942: PUSH
 943: LD_INT 2
 945: ARRAY
 946: PUSH
 947: LD_VAR 0 2
 951: ARRAY
 952: PPUSH
 953: LD_INT 2
 955: PPUSH
 956: CALL_OW 244
 960: GO 884
 962: POP
 963: POP
// base := [ [ b_depot , 206 , 80 , 1 ] , [ b_bunker , 221 , 95 , 5 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 ] , [ b_lab_full , 217 , 78 , 4 ] , [ b_solar_power , 220 , 99 , 1 ] , [ b_solar_power , 220 , 103 , 1 ] , [ b_solar_power , 216 , 102 , 1 ] , [ b_ext_gun , 203 , 94 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 ] , [ b_ext_track , 199 , 91 , 1 ] , [ b_oil_power , 197 , 81 , 1 ] , [ b_oil_power , 197 , 78 , 3 ] ] ;
 964: LD_ADDR_VAR 0 4
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 206
 974: PUSH
 975: LD_INT 80
 977: PUSH
 978: LD_INT 1
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: LD_INT 32
 989: PUSH
 990: LD_INT 221
 992: PUSH
 993: LD_INT 95
 995: PUSH
 996: LD_INT 5
 998: PUSH
 999: LD_INT 23
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 32
1011: PUSH
1012: LD_INT 223
1014: PUSH
1015: LD_INT 88
1017: PUSH
1018: LD_INT 5
1020: PUSH
1021: LD_INT 24
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 32
1033: PUSH
1034: LD_INT 202
1036: PUSH
1037: LD_INT 64
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 25
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_INT 3
1055: PUSH
1056: LD_INT 203
1058: PUSH
1059: LD_INT 91
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 8
1073: PUSH
1074: LD_INT 217
1076: PUSH
1077: LD_INT 78
1079: PUSH
1080: LD_INT 4
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 27
1091: PUSH
1092: LD_INT 220
1094: PUSH
1095: LD_INT 99
1097: PUSH
1098: LD_INT 1
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 27
1109: PUSH
1110: LD_INT 220
1112: PUSH
1113: LD_INT 103
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_INT 27
1127: PUSH
1128: LD_INT 216
1130: PUSH
1131: LD_INT 102
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 17
1145: PUSH
1146: LD_INT 203
1148: PUSH
1149: LD_INT 94
1151: PUSH
1152: LD_INT 0
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: PUSH
1161: LD_INT 23
1163: PUSH
1164: LD_INT 200
1166: PUSH
1167: LD_INT 88
1169: PUSH
1170: LD_INT 2
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_INT 16
1181: PUSH
1182: LD_INT 199
1184: PUSH
1185: LD_INT 91
1187: PUSH
1188: LD_INT 1
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 26
1199: PUSH
1200: LD_INT 197
1202: PUSH
1203: LD_INT 81
1205: PUSH
1206: LD_INT 1
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 197
1220: PUSH
1221: LD_INT 78
1223: PUSH
1224: LD_INT 3
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: ST_TO_ADDR
// if hasRadar then
1249: LD_VAR 0 5
1253: IFFALSE 1297
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 ] ) ;
1255: LD_ADDR_VAR 0 4
1259: PUSH
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_VAR 0 4
1269: PUSH
1270: LD_INT 1
1272: PLUS
1273: PPUSH
1274: LD_INT 20
1276: PUSH
1277: LD_INT 203
1279: PUSH
1280: LD_INT 87
1282: PUSH
1283: LD_INT 3
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 1
1296: ST_TO_ADDR
// if hasRemote then
1297: LD_VAR 0 6
1301: IFFALSE 1345
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 ] ) ;
1303: LD_ADDR_VAR 0 4
1307: PUSH
1308: LD_VAR 0 4
1312: PPUSH
1313: LD_VAR 0 4
1317: PUSH
1318: LD_INT 1
1320: PLUS
1321: PPUSH
1322: LD_INT 22
1324: PUSH
1325: LD_INT 207
1327: PUSH
1328: LD_INT 95
1330: PUSH
1331: LD_INT 5
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 1
1344: ST_TO_ADDR
// for i in base do
1345: LD_ADDR_VAR 0 2
1349: PUSH
1350: LD_VAR 0 4
1354: PUSH
1355: FOR_IN
1356: IFFALSE 1537
// begin bc_type := i [ 1 ] ;
1358: LD_ADDR_OWVAR 42
1362: PUSH
1363: LD_VAR 0 2
1367: PUSH
1368: LD_INT 1
1370: ARRAY
1371: ST_TO_ADDR
// bc_level := 3 ;
1372: LD_ADDR_OWVAR 43
1376: PUSH
1377: LD_INT 3
1379: ST_TO_ADDR
// if i [ 1 ] = b_lab_full then
1380: LD_VAR 0 2
1384: PUSH
1385: LD_INT 1
1387: ARRAY
1388: PUSH
1389: LD_INT 8
1391: EQUAL
1392: IFFALSE 1427
// begin bc_kind1 := b_lab_weapon ;
1394: LD_ADDR_OWVAR 44
1398: PUSH
1399: LD_INT 10
1401: ST_TO_ADDR
// if hasRadar then
1402: LD_VAR 0 5
1406: IFFALSE 1418
// bc_kind2 := b_lab_opto else
1408: LD_ADDR_OWVAR 45
1412: PUSH
1413: LD_INT 15
1415: ST_TO_ADDR
1416: GO 1427
// bc_kind2 := - 1 ;
1418: LD_ADDR_OWVAR 45
1422: PUSH
1423: LD_INT 1
1425: NEG
1426: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1427: LD_ADDR_VAR 0 3
1431: PUSH
1432: LD_VAR 0 2
1436: PUSH
1437: LD_INT 2
1439: ARRAY
1440: PPUSH
1441: LD_VAR 0 2
1445: PUSH
1446: LD_INT 3
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 2
1454: PUSH
1455: LD_INT 4
1457: ARRAY
1458: PPUSH
1459: CALL_OW 47
1463: ST_TO_ADDR
// if i > 4 then
1464: LD_VAR 0 2
1468: PUSH
1469: LD_INT 4
1471: GREATER
1472: IFFALSE 1492
// PlaceWeaponTurret ( b , i [ 5 ] ) ;
1474: LD_VAR 0 3
1478: PPUSH
1479: LD_VAR 0 2
1483: PUSH
1484: LD_INT 5
1486: ARRAY
1487: PPUSH
1488: CALL_OW 431
// if i [ 1 ] = b_bunker then
1492: LD_VAR 0 2
1496: PUSH
1497: LD_INT 1
1499: ARRAY
1500: PUSH
1501: LD_INT 32
1503: EQUAL
1504: IFFALSE 1535
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
1506: LD_ADDR_VAR 0 11
1510: PUSH
1511: LD_VAR 0 11
1515: PPUSH
1516: LD_VAR 0 11
1520: PUSH
1521: LD_INT 1
1523: PLUS
1524: PPUSH
1525: LD_VAR 0 3
1529: PPUSH
1530: CALL_OW 1
1534: ST_TO_ADDR
// end ;
1535: GO 1355
1537: POP
1538: POP
// depot := HexInfo ( 206 , 80 ) ;
1539: LD_ADDR_VAR 0 9
1543: PUSH
1544: LD_INT 206
1546: PPUSH
1547: LD_INT 80
1549: PPUSH
1550: CALL_OW 428
1554: ST_TO_ADDR
// factory := HexInfo ( 203 , 91 ) ;
1555: LD_ADDR_VAR 0 8
1559: PUSH
1560: LD_INT 203
1562: PPUSH
1563: LD_INT 91
1565: PPUSH
1566: CALL_OW 428
1570: ST_TO_ADDR
// lab := HexInfo ( 217 , 78 ) ;
1571: LD_ADDR_VAR 0 10
1575: PUSH
1576: LD_INT 217
1578: PPUSH
1579: LD_INT 78
1581: PPUSH
1582: CALL_OW 428
1586: ST_TO_ADDR
// arDepot := depot ;
1587: LD_ADDR_EXP 44
1591: PUSH
1592: LD_VAR 0 9
1596: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 160 , 120 ] [ Difficulty ] ) ;
1597: LD_VAR 0 9
1601: PPUSH
1602: CALL_OW 274
1606: PPUSH
1607: LD_INT 1
1609: PPUSH
1610: LD_INT 360
1612: PUSH
1613: LD_INT 260
1615: PUSH
1616: LD_INT 160
1618: PUSH
1619: LD_INT 120
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_OWVAR 67
1632: ARRAY
1633: PPUSH
1634: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 130 , 100 ] [ Difficulty ] ) ;
1638: LD_VAR 0 9
1642: PPUSH
1643: CALL_OW 274
1647: PPUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 200
1653: PUSH
1654: LD_INT 170
1656: PUSH
1657: LD_INT 130
1659: PUSH
1660: LD_INT 100
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_OWVAR 67
1673: ARRAY
1674: PPUSH
1675: CALL_OW 277
// uc_nation := 2 ;
1679: LD_ADDR_OWVAR 21
1683: PUSH
1684: LD_INT 2
1686: ST_TO_ADDR
// uc_side := 2 ;
1687: LD_ADDR_OWVAR 20
1691: PUSH
1692: LD_INT 2
1694: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
1695: LD_INT 13
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: LD_INT 27
1706: PPUSH
1707: LD_INT 33
1709: PPUSH
1710: CALL 30710 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
1714: CALL_OW 45
1718: PPUSH
1719: LD_INT 190
1721: PPUSH
1722: LD_INT 64
1724: PPUSH
1725: LD_INT 5
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL 65284 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
1735: LD_INT 13
1737: PPUSH
1738: LD_INT 1
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 25
1746: PPUSH
1747: LD_INT 22
1749: PPUSH
1750: CALL 30710 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
1754: CALL_OW 45
1758: PPUSH
1759: LD_INT 188
1761: PPUSH
1762: LD_INT 67
1764: PPUSH
1765: LD_INT 5
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL 65284 0 5
// if hasRemote then
1775: LD_VAR 0 6
1779: IFFALSE 1861
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_control_tower , 35 ) ;
1781: LD_INT 13
1783: PPUSH
1784: LD_INT 1
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 31
1792: PPUSH
1793: LD_INT 35
1795: PPUSH
1796: CALL 30710 0 5
// PlaceUnitXYD ( CreateVehicle , 191 , 71 , 5 , false ) ;
1800: CALL_OW 45
1804: PPUSH
1805: LD_INT 191
1807: PPUSH
1808: LD_INT 71
1810: PPUSH
1811: LD_INT 5
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL 65284 0 5
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_remote , ar_gun , 55 ) ;
1821: LD_INT 14
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: LD_INT 27
1832: PPUSH
1833: LD_INT 55
1835: PPUSH
1836: CALL 30710 0 5
// PlaceUnitXYD ( CreateVehicle , 199 , 67 , 0 , false ) ;
1840: CALL_OW 45
1844: PPUSH
1845: LD_INT 199
1847: PPUSH
1848: LD_INT 67
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL 65284 0 5
// end ; PlaceUnitXY ( Heike , 213 , 87 , false ) ;
1861: LD_EXP 30
1865: PPUSH
1866: LD_INT 213
1868: PPUSH
1869: LD_INT 87
1871: PPUSH
1872: LD_INT 0
1874: PPUSH
1875: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
1879: LD_EXP 30
1883: PPUSH
1884: LD_INT 214
1886: PPUSH
1887: LD_INT 87
1889: PPUSH
1890: CALL_OW 118
// if Kaia then
1894: LD_EXP 35
1898: IFFALSE 1933
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
1900: LD_EXP 35
1904: PPUSH
1905: LD_INT 213
1907: PPUSH
1908: LD_INT 85
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
1918: LD_EXP 35
1922: PPUSH
1923: LD_INT 215
1925: PPUSH
1926: LD_INT 87
1928: PPUSH
1929: CALL_OW 118
// end ; if Olaf and Kaia then
1933: LD_EXP 39
1937: PUSH
1938: LD_EXP 35
1942: AND
1943: IFFALSE 1980
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
1945: LD_EXP 39
1949: PPUSH
1950: LD_INT 215
1952: PPUSH
1953: LD_INT 87
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
1963: LD_EXP 39
1967: PPUSH
1968: LD_INT 213
1970: PPUSH
1971: LD_INT 85
1973: PPUSH
1974: CALL_OW 118
// end else
1978: GO 2000
// if Olaf then
1980: LD_EXP 39
1984: IFFALSE 2000
// PlaceHumanInUnit ( Olaf , factory ) ;
1986: LD_EXP 39
1990: PPUSH
1991: LD_VAR 0 8
1995: PPUSH
1996: CALL_OW 52
// if Givi then
2000: LD_EXP 31
2004: IFFALSE 2085
// begin if Kaia and Olaf then
2006: LD_EXP 35
2010: PUSH
2011: LD_EXP 39
2015: AND
2016: IFFALSE 2053
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2018: LD_EXP 31
2022: PPUSH
2023: LD_INT 247
2025: PPUSH
2026: LD_INT 117
2028: PPUSH
2029: LD_INT 0
2031: PPUSH
2032: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2036: LD_EXP 31
2040: PPUSH
2041: LD_INT 248
2043: PPUSH
2044: LD_INT 118
2046: PPUSH
2047: CALL_OW 118
// end else
2051: GO 2085
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2053: LD_EXP 31
2057: PPUSH
2058: LD_INT 216
2060: PPUSH
2061: LD_INT 88
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2071: LD_EXP 31
2075: PPUSH
2076: LD_EXP 30
2080: PPUSH
2081: CALL_OW 119
// end ; end ; if Kurt then
2085: LD_EXP 41
2089: IFFALSE 2109
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2091: LD_EXP 41
2095: PPUSH
2096: LD_VAR 0 11
2100: PUSH
2101: LD_INT 2
2103: ARRAY
2104: PPUSH
2105: CALL_OW 52
// if Mike then
2109: LD_EXP 32
2113: IFFALSE 2133
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2115: LD_EXP 32
2119: PPUSH
2120: LD_VAR 0 11
2124: PUSH
2125: LD_INT 3
2127: ARRAY
2128: PPUSH
2129: CALL_OW 52
// if Kamil then
2133: LD_EXP 34
2137: IFFALSE 2199
// begin if Kaia and Olaf then
2139: LD_EXP 35
2143: PUSH
2144: LD_EXP 39
2148: AND
2149: IFFALSE 2167
// PlaceHumanInUnit ( Kamil , depot ) else
2151: LD_EXP 34
2155: PPUSH
2156: LD_VAR 0 9
2160: PPUSH
2161: CALL_OW 52
2165: GO 2199
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
2167: LD_EXP 34
2171: PPUSH
2172: LD_INT 213
2174: PPUSH
2175: LD_INT 87
2177: PPUSH
2178: LD_INT 0
2180: PPUSH
2181: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
2185: LD_EXP 34
2189: PPUSH
2190: LD_EXP 30
2194: PPUSH
2195: CALL_OW 119
// end ; end ; if Sophia then
2199: LD_EXP 36
2203: IFFALSE 2219
// PlaceHumanInUnit ( Sophia , depot ) ;
2205: LD_EXP 36
2209: PPUSH
2210: LD_VAR 0 9
2214: PPUSH
2215: CALL_OW 52
// if Aviradze then
2219: LD_EXP 42
2223: IFFALSE 2239
// PlaceHumanInUnit ( Aviradze , lab ) ;
2225: LD_EXP 42
2229: PPUSH
2230: LD_VAR 0 10
2234: PPUSH
2235: CALL_OW 52
// if Ibrahim then
2239: LD_EXP 33
2243: IFFALSE 2259
// PlaceHumanInUnit ( Ibrahim , lab ) ;
2245: LD_EXP 33
2249: PPUSH
2250: LD_VAR 0 10
2254: PPUSH
2255: CALL_OW 52
// if Markov then
2259: LD_EXP 37
2263: IFFALSE 2279
// PlaceHumanInUnit ( Markov , factory ) ;
2265: LD_EXP 37
2269: PPUSH
2270: LD_VAR 0 8
2274: PPUSH
2275: CALL_OW 52
// if heikeSecondSquad then
2279: LD_EXP 45
2283: IFFALSE 2323
// for i in heikeSecondSquad do
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: LD_EXP 45
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2321
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
2298: LD_VAR 0 2
2302: PPUSH
2303: LD_INT 190
2305: PPUSH
2306: LD_INT 65
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: LD_INT 0
2314: PPUSH
2315: CALL_OW 50
2319: GO 2295
2321: POP
2322: POP
// if heikeApes then
2323: LD_EXP 46
2327: IFFALSE 2367
// for i in heikeApes do
2329: LD_ADDR_VAR 0 2
2333: PUSH
2334: LD_EXP 46
2338: PUSH
2339: FOR_IN
2340: IFFALSE 2365
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
2342: LD_VAR 0 2
2346: PPUSH
2347: LD_INT 190
2349: PPUSH
2350: LD_INT 70
2352: PPUSH
2353: LD_INT 5
2355: PPUSH
2356: LD_INT 0
2358: PPUSH
2359: CALL_OW 50
2363: GO 2339
2365: POP
2366: POP
// end ;
2367: LD_VAR 0 1
2371: RET
// export function PrepareRolfSquad ; var i , j ; begin
2372: LD_INT 0
2374: PPUSH
2375: PPUSH
2376: PPUSH
// uc_side := 8 ;
2377: LD_ADDR_OWVAR 20
2381: PUSH
2382: LD_INT 8
2384: ST_TO_ADDR
// uc_nation := 2 ;
2385: LD_ADDR_OWVAR 21
2389: PUSH
2390: LD_INT 2
2392: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
2393: LD_ADDR_EXP 43
2397: PUSH
2398: LD_STRING Bergkamp
2400: PPUSH
2401: CALL_OW 25
2405: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
2406: LD_ADDR_EXP 47
2410: PUSH
2411: LD_EXP 43
2415: PUSH
2416: EMPTY
2417: LIST
2418: ST_TO_ADDR
// for i := 1 to 4 do
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: DOUBLE
2425: LD_INT 1
2427: DEC
2428: ST_TO_ADDR
2429: LD_INT 4
2431: PUSH
2432: FOR_TO
2433: IFFALSE 2513
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
2435: LD_ADDR_VAR 0 3
2439: PUSH
2440: DOUBLE
2441: LD_INT 1
2443: DEC
2444: ST_TO_ADDR
2445: LD_INT 5
2447: PUSH
2448: LD_INT 2
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 1
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_VAR 0 2
2467: ARRAY
2468: PUSH
2469: FOR_TO
2470: IFFALSE 2509
// begin PrepareHuman ( false , i , 5 ) ;
2472: LD_INT 0
2474: PPUSH
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_INT 5
2482: PPUSH
2483: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
2487: LD_ADDR_EXP 47
2491: PUSH
2492: LD_EXP 47
2496: PPUSH
2497: CALL_OW 44
2501: PPUSH
2502: CALL 63144 0 2
2506: ST_TO_ADDR
// end ;
2507: GO 2469
2509: POP
2510: POP
// end ;
2511: GO 2432
2513: POP
2514: POP
// if HexInfo ( 5 , 3 ) then
2515: LD_INT 5
2517: PPUSH
2518: LD_INT 3
2520: PPUSH
2521: CALL_OW 428
2525: IFFALSE 2542
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
2527: LD_INT 5
2529: PPUSH
2530: LD_INT 3
2532: PPUSH
2533: CALL_OW 428
2537: PPUSH
2538: CALL_OW 64
// for i in rolfSquad do
2542: LD_ADDR_VAR 0 2
2546: PUSH
2547: LD_EXP 47
2551: PUSH
2552: FOR_IN
2553: IFFALSE 2689
// begin uc_direction := 2 ;
2555: LD_ADDR_OWVAR 24
2559: PUSH
2560: LD_INT 2
2562: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
2563: LD_VAR 0 2
2567: PPUSH
2568: CALL_OW 257
2572: PUSH
2573: LD_INT 3
2575: EQUAL
2576: IFFALSE 2650
// begin uc_side := 8 ;
2578: LD_ADDR_OWVAR 20
2582: PUSH
2583: LD_INT 8
2585: ST_TO_ADDR
// uc_nation := 2 ;
2586: LD_ADDR_OWVAR 21
2590: PUSH
2591: LD_INT 2
2593: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
2594: LD_INT 13
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: LD_INT 1
2602: PPUSH
2603: LD_INT 27
2605: PPUSH
2606: LD_INT 88
2608: PPUSH
2609: CALL 30710 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
2613: CALL_OW 45
2617: PPUSH
2618: LD_INT 11
2620: PPUSH
2621: LD_INT 0
2623: PPUSH
2624: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
2628: LD_VAR 0 2
2632: PPUSH
2633: LD_INT 5
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: CALL_OW 428
2643: PPUSH
2644: CALL_OW 52
// end else
2648: GO 2665
// PlaceUnitArea ( i , northSpawn , false ) ;
2650: LD_VAR 0 2
2654: PPUSH
2655: LD_INT 11
2657: PPUSH
2658: LD_INT 0
2660: PPUSH
2661: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
2665: LD_VAR 0 2
2669: PPUSH
2670: LD_INT 29
2672: PPUSH
2673: LD_INT 10
2675: PPUSH
2676: CALL_OW 111
// wait ( 0 0$2 ) ;
2680: LD_INT 70
2682: PPUSH
2683: CALL_OW 67
// end ;
2687: GO 2552
2689: POP
2690: POP
// wait ( 0 0$5 ) ;
2691: LD_INT 175
2693: PPUSH
2694: CALL_OW 67
// end ;
2698: LD_VAR 0 1
2702: RET
// export function PrepareRolfBase ; var i , tmp ; begin
2703: LD_INT 0
2705: PPUSH
2706: PPUSH
2707: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
2708: LD_EXP 43
2712: PPUSH
2713: LD_INT 94
2715: PPUSH
2716: LD_INT 63
2718: PPUSH
2719: CALL_OW 428
2723: PPUSH
2724: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: LD_INT 4
2735: PUSH
2736: LD_INT 82
2738: PUSH
2739: LD_INT 64
2741: PUSH
2742: LD_INT 1
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 31
2753: PUSH
2754: LD_INT 73
2756: PUSH
2757: LD_INT 58
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: ST_TO_ADDR
// for i in tmp do
2773: LD_ADDR_VAR 0 2
2777: PUSH
2778: LD_VAR 0 3
2782: PUSH
2783: FOR_IN
2784: IFFALSE 2848
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2786: LD_EXP 47
2790: PPUSH
2791: LD_INT 25
2793: PUSH
2794: LD_INT 2
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PPUSH
2801: CALL_OW 72
2805: PPUSH
2806: LD_VAR 0 2
2810: PUSH
2811: LD_INT 1
2813: ARRAY
2814: PPUSH
2815: LD_VAR 0 2
2819: PUSH
2820: LD_INT 2
2822: ARRAY
2823: PPUSH
2824: LD_VAR 0 2
2828: PUSH
2829: LD_INT 3
2831: ARRAY
2832: PPUSH
2833: LD_VAR 0 2
2837: PUSH
2838: LD_INT 4
2840: ARRAY
2841: PPUSH
2842: CALL_OW 205
2846: GO 2783
2848: POP
2849: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
2850: LD_EXP 47
2854: PUSH
2855: LD_INT 2
2857: ARRAY
2858: PPUSH
2859: LD_INT 63
2861: PPUSH
2862: LD_INT 42
2864: PPUSH
2865: CALL_OW 428
2869: PPUSH
2870: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
2874: LD_EXP 47
2878: PUSH
2879: LD_INT 3
2881: ARRAY
2882: PPUSH
2883: LD_INT 94
2885: PPUSH
2886: LD_INT 63
2888: PPUSH
2889: CALL_OW 428
2893: PPUSH
2894: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2898: LD_INT 35
2900: PPUSH
2901: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
2905: LD_EXP 47
2909: PPUSH
2910: LD_INT 25
2912: PUSH
2913: LD_INT 2
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: LD_INT 60
2925: PUSH
2926: EMPTY
2927: LIST
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 72
2941: IFFALSE 2898
// rolfScriptBase := true ;
2943: LD_ADDR_EXP 9
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// end ;
2951: LD_VAR 0 1
2955: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
2956: LD_EXP 9
2960: PUSH
2961: LD_EXP 43
2965: PPUSH
2966: CALL_OW 255
2970: PUSH
2971: LD_INT 8
2973: EQUAL
2974: AND
2975: IFFALSE 3982
2977: GO 2979
2979: DISABLE
2980: LD_INT 0
2982: PPUSH
2983: PPUSH
2984: PPUSH
2985: PPUSH
2986: PPUSH
2987: PPUSH
2988: PPUSH
2989: PPUSH
2990: PPUSH
2991: PPUSH
// begin enable ;
2992: ENABLE
// if not rolfSquad then
2993: LD_EXP 47
2997: NOT
2998: IFFALSE 3002
// exit ;
3000: GO 3982
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
3002: LD_ADDR_VAR 0 9
3006: PUSH
3007: LD_INT 12
3009: PPUSH
3010: LD_INT 81
3012: PUSH
3013: LD_INT 8
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PPUSH
3020: CALL_OW 70
3024: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
3025: LD_ADDR_VAR 0 5
3029: PUSH
3030: LD_EXP 47
3034: PPUSH
3035: LD_INT 25
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PPUSH
3045: CALL_OW 72
3049: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
3050: LD_ADDR_VAR 0 6
3054: PUSH
3055: LD_EXP 47
3059: PPUSH
3060: LD_INT 25
3062: PUSH
3063: LD_INT 2
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PPUSH
3070: CALL_OW 72
3074: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
3075: LD_ADDR_VAR 0 8
3079: PUSH
3080: LD_EXP 47
3084: PPUSH
3085: LD_INT 25
3087: PUSH
3088: LD_INT 3
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PPUSH
3095: CALL_OW 72
3099: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
3100: LD_ADDR_VAR 0 7
3104: PUSH
3105: LD_EXP 47
3109: PPUSH
3110: LD_INT 25
3112: PUSH
3113: LD_INT 4
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL_OW 72
3124: ST_TO_ADDR
// if sol then
3125: LD_VAR 0 5
3129: IFFALSE 3427
// for i in sol union Rolf do
3131: LD_ADDR_VAR 0 1
3135: PUSH
3136: LD_VAR 0 5
3140: PUSH
3141: LD_EXP 43
3145: UNION
3146: PUSH
3147: FOR_IN
3148: IFFALSE 3425
// if not IsInUnit ( i ) and not HasTask ( i ) then
3150: LD_VAR 0 1
3154: PPUSH
3155: CALL_OW 310
3159: NOT
3160: PUSH
3161: LD_VAR 0 1
3165: PPUSH
3166: CALL_OW 314
3170: NOT
3171: AND
3172: IFFALSE 3423
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
3174: LD_VAR 0 1
3178: PPUSH
3179: CALL_OW 256
3183: PUSH
3184: LD_INT 500
3186: LESS
3187: PUSH
3188: LD_VAR 0 1
3192: PPUSH
3193: LD_INT 80
3195: PPUSH
3196: LD_INT 49
3198: PPUSH
3199: CALL_OW 297
3203: PUSH
3204: LD_INT 6
3206: GREATER
3207: AND
3208: IFFALSE 3227
// begin ComMoveXY ( i , 80 , 49 ) ;
3210: LD_VAR 0 1
3214: PPUSH
3215: LD_INT 80
3217: PPUSH
3218: LD_INT 49
3220: PPUSH
3221: CALL_OW 111
// continue ;
3225: GO 3147
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
3227: LD_ADDR_VAR 0 4
3231: PUSH
3232: LD_INT 22
3234: PUSH
3235: LD_INT 8
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 50
3244: PUSH
3245: EMPTY
3246: LIST
3247: PUSH
3248: LD_INT 2
3250: PUSH
3251: LD_INT 30
3253: PUSH
3254: LD_INT 4
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 30
3263: PUSH
3264: LD_INT 5
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 30
3273: PUSH
3274: LD_INT 32
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 31
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: PPUSH
3303: CALL_OW 69
3307: ST_TO_ADDR
// if tmp then
3308: LD_VAR 0 4
3312: IFFALSE 3423
// begin for b in tmp do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: LD_VAR 0 4
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3421
// begin case GetBType ( b ) of b_armoury , b_barracks :
3327: LD_VAR 0 2
3331: PPUSH
3332: CALL_OW 266
3336: PUSH
3337: LD_INT 4
3339: DOUBLE
3340: EQUAL
3341: IFTRUE 3351
3343: LD_INT 5
3345: DOUBLE
3346: EQUAL
3347: IFTRUE 3351
3349: GO 3362
3351: POP
// p := 6 ; b_breastwork , b_bunker :
3352: LD_ADDR_VAR 0 3
3356: PUSH
3357: LD_INT 6
3359: ST_TO_ADDR
3360: GO 3388
3362: LD_INT 31
3364: DOUBLE
3365: EQUAL
3366: IFTRUE 3376
3368: LD_INT 32
3370: DOUBLE
3371: EQUAL
3372: IFTRUE 3376
3374: GO 3387
3376: POP
// p := 1 ; end ;
3377: LD_ADDR_VAR 0 3
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
3385: GO 3388
3387: POP
// if UnitsInside ( b ) < p then
3388: LD_VAR 0 2
3392: PPUSH
3393: CALL_OW 313
3397: PUSH
3398: LD_VAR 0 3
3402: LESS
3403: IFFALSE 3419
// ComEnterUnit ( i , b ) ;
3405: LD_VAR 0 1
3409: PPUSH
3410: LD_VAR 0 2
3414: PPUSH
3415: CALL_OW 120
// end ;
3419: GO 3324
3421: POP
3422: POP
// end ; end ;
3423: GO 3147
3425: POP
3426: POP
// if sci then
3427: LD_VAR 0 7
3431: IFFALSE 3486
// for i in sci do
3433: LD_ADDR_VAR 0 1
3437: PUSH
3438: LD_VAR 0 7
3442: PUSH
3443: FOR_IN
3444: IFFALSE 3484
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
3446: LD_VAR 0 1
3450: PPUSH
3451: LD_INT 80
3453: PPUSH
3454: LD_INT 49
3456: PPUSH
3457: CALL_OW 297
3461: PUSH
3462: LD_INT 9
3464: GREATER
3465: IFFALSE 3482
// ComMoveXY ( i , 80 , 49 ) ;
3467: LD_VAR 0 1
3471: PPUSH
3472: LD_INT 80
3474: PPUSH
3475: LD_INT 49
3477: PPUSH
3478: CALL_OW 111
// end ;
3482: GO 3443
3484: POP
3485: POP
// if mech then
3486: LD_VAR 0 8
3490: IFFALSE 3704
// for i in mech do
3492: LD_ADDR_VAR 0 1
3496: PUSH
3497: LD_VAR 0 8
3501: PUSH
3502: FOR_IN
3503: IFFALSE 3702
// begin hasVehicle := IsInUnit ( i ) ;
3505: LD_ADDR_VAR 0 10
3509: PUSH
3510: LD_VAR 0 1
3514: PPUSH
3515: CALL_OW 310
3519: ST_TO_ADDR
// if enemyInBase then
3520: LD_VAR 0 9
3524: IFFALSE 3620
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
3526: LD_VAR 0 10
3530: PUSH
3531: LD_VAR 0 10
3535: PPUSH
3536: CALL_OW 256
3540: PUSH
3541: LD_INT 500
3543: GREATER
3544: AND
3545: IFFALSE 3573
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
3547: LD_VAR 0 10
3551: PPUSH
3552: LD_VAR 0 9
3556: PPUSH
3557: LD_VAR 0 10
3561: PPUSH
3562: CALL_OW 74
3566: PPUSH
3567: CALL_OW 115
3571: GO 3618
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
3573: LD_VAR 0 10
3577: PPUSH
3578: LD_INT 86
3580: PPUSH
3581: LD_INT 49
3583: PPUSH
3584: CALL_OW 297
3588: PUSH
3589: LD_INT 8
3591: GREATER
3592: IFFALSE 3618
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
3594: LD_VAR 0 10
3598: PPUSH
3599: LD_INT 86
3601: PPUSH
3602: LD_INT 49
3604: PPUSH
3605: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
3609: LD_VAR 0 1
3613: PPUSH
3614: CALL 64964 0 1
// end end else
3618: GO 3700
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
3620: LD_VAR 0 1
3624: PPUSH
3625: LD_INT 86
3627: PPUSH
3628: LD_INT 49
3630: PPUSH
3631: CALL_OW 297
3635: PUSH
3636: LD_INT 8
3638: GREATER
3639: IFFALSE 3658
// ComMoveXY ( i , 86 , 49 ) else
3641: LD_VAR 0 1
3645: PPUSH
3646: LD_INT 86
3648: PPUSH
3649: LD_INT 49
3651: PPUSH
3652: CALL_OW 111
3656: GO 3700
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
3658: LD_VAR 0 10
3662: PUSH
3663: LD_VAR 0 10
3667: PPUSH
3668: CALL_OW 256
3672: PUSH
3673: LD_INT 1000
3675: LESS
3676: AND
3677: IFFALSE 3700
// begin SetFuel ( hasVehicle , 100 ) ;
3679: LD_VAR 0 10
3683: PPUSH
3684: LD_INT 100
3686: PPUSH
3687: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
3691: LD_VAR 0 1
3695: PPUSH
3696: CALL 64844 0 1
// end ; end ; end ;
3700: GO 3502
3702: POP
3703: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3704: LD_ADDR_VAR 0 4
3708: PUSH
3709: LD_INT 12
3711: PPUSH
3712: LD_INT 3
3714: PUSH
3715: LD_INT 24
3717: PUSH
3718: LD_INT 1000
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 21
3731: PUSH
3732: LD_INT 3
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 70
3747: ST_TO_ADDR
// if tmp and eng then
3748: LD_VAR 0 4
3752: PUSH
3753: LD_VAR 0 6
3757: AND
3758: IFFALSE 3864
// begin for i in eng do
3760: LD_ADDR_VAR 0 1
3764: PUSH
3765: LD_VAR 0 6
3769: PUSH
3770: FOR_IN
3771: IFFALSE 3862
// if IsInUnit ( i ) then
3773: LD_VAR 0 1
3777: PPUSH
3778: CALL_OW 310
3782: IFFALSE 3795
// ComExitBuilding ( i ) else
3784: LD_VAR 0 1
3788: PPUSH
3789: CALL_OW 122
3793: GO 3860
// if GetLives ( i ) = 1000 then
3795: LD_VAR 0 1
3799: PPUSH
3800: CALL_OW 256
3804: PUSH
3805: LD_INT 1000
3807: EQUAL
3808: IFFALSE 3830
// ComRepairBuilding ( i , tmp [ 1 ] ) else
3810: LD_VAR 0 1
3814: PPUSH
3815: LD_VAR 0 4
3819: PUSH
3820: LD_INT 1
3822: ARRAY
3823: PPUSH
3824: CALL_OW 130
3828: GO 3860
// if GetLives ( i ) < 700 then
3830: LD_VAR 0 1
3834: PPUSH
3835: CALL_OW 256
3839: PUSH
3840: LD_INT 700
3842: LESS
3843: IFFALSE 3860
// ComMoveXY ( i , 80 , 49 ) ;
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_INT 80
3852: PPUSH
3853: LD_INT 49
3855: PPUSH
3856: CALL_OW 111
3860: GO 3770
3862: POP
3863: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
3864: LD_VAR 0 4
3868: NOT
3869: PUSH
3870: LD_VAR 0 6
3874: PPUSH
3875: LD_INT 3
3877: PUSH
3878: LD_INT 54
3880: PUSH
3881: EMPTY
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 72
3892: AND
3893: IFFALSE 3982
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 6
3904: PPUSH
3905: LD_INT 3
3907: PUSH
3908: LD_INT 54
3910: PUSH
3911: EMPTY
3912: LIST
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 72
3922: PUSH
3923: FOR_IN
3924: IFFALSE 3980
// if GetLives ( i ) < 1000 then
3926: LD_VAR 0 1
3930: PPUSH
3931: CALL_OW 256
3935: PUSH
3936: LD_INT 1000
3938: LESS
3939: IFFALSE 3958
// ComMoveXY ( i , 80 , 49 ) else
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 80
3948: PPUSH
3949: LD_INT 49
3951: PPUSH
3952: CALL_OW 111
3956: GO 3978
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_INT 86
3965: PPUSH
3966: LD_INT 54
3968: PPUSH
3969: CALL_OW 428
3973: PPUSH
3974: CALL_OW 120
3978: GO 3923
3980: POP
3981: POP
// end ;
3982: PPOPN 10
3984: END
// export function PrepareOmarSquad ; var i , j , p ; begin
3985: LD_INT 0
3987: PPUSH
3988: PPUSH
3989: PPUSH
3990: PPUSH
// uc_side := 5 ;
3991: LD_ADDR_OWVAR 20
3995: PUSH
3996: LD_INT 5
3998: ST_TO_ADDR
// uc_nation := 2 ;
3999: LD_ADDR_OWVAR 21
4003: PUSH
4004: LD_INT 2
4006: ST_TO_ADDR
// omarSquad := [ ] ;
4007: LD_ADDR_EXP 48
4011: PUSH
4012: EMPTY
4013: ST_TO_ADDR
// for i := 1 to 4 do
4014: LD_ADDR_VAR 0 2
4018: PUSH
4019: DOUBLE
4020: LD_INT 1
4022: DEC
4023: ST_TO_ADDR
4024: LD_INT 4
4026: PUSH
4027: FOR_TO
4028: IFFALSE 4151
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
4030: LD_ADDR_VAR 0 3
4034: PUSH
4035: DOUBLE
4036: LD_INT 1
4038: DEC
4039: ST_TO_ADDR
4040: LD_INT 6
4042: PUSH
4043: LD_INT 2
4045: PUSH
4046: LD_INT 2
4048: PUSH
4049: LD_EXP 21
4053: PLUS
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: PUSH
4064: LD_VAR 0 2
4068: ARRAY
4069: PUSH
4070: FOR_TO
4071: IFFALSE 4147
// begin PrepareHuman ( false , i , 5 ) ;
4073: LD_INT 0
4075: PPUSH
4076: LD_VAR 0 2
4080: PPUSH
4081: LD_INT 5
4083: PPUSH
4084: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
4088: LD_ADDR_EXP 48
4092: PUSH
4093: LD_EXP 48
4097: PPUSH
4098: CALL_OW 44
4102: PPUSH
4103: CALL 63144 0 2
4107: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
4108: LD_VAR 0 2
4112: PUSH
4113: LD_INT 1
4115: EQUAL
4116: PUSH
4117: LD_INT 50
4119: PPUSH
4120: CALL_OW 13
4124: AND
4125: IFFALSE 4145
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
4127: LD_EXP 48
4131: PUSH
4132: LD_EXP 48
4136: ARRAY
4137: PPUSH
4138: LD_INT 8
4140: PPUSH
4141: CALL_OW 336
// end ;
4145: GO 4070
4147: POP
4148: POP
// end ;
4149: GO 4027
4151: POP
4152: POP
// if HexInfo ( 340 , 205 ) then
4153: LD_INT 340
4155: PPUSH
4156: LD_INT 205
4158: PPUSH
4159: CALL_OW 428
4163: IFFALSE 4180
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
4165: LD_INT 340
4167: PPUSH
4168: LD_INT 205
4170: PPUSH
4171: CALL_OW 428
4175: PPUSH
4176: CALL_OW 64
// p := 0 ;
4180: LD_ADDR_VAR 0 4
4184: PUSH
4185: LD_INT 0
4187: ST_TO_ADDR
// for i in omarSquad do
4188: LD_ADDR_VAR 0 2
4192: PUSH
4193: LD_EXP 48
4197: PUSH
4198: FOR_IN
4199: IFFALSE 4400
// begin uc_direction := 4 ;
4201: LD_ADDR_OWVAR 24
4205: PUSH
4206: LD_INT 4
4208: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
4209: LD_VAR 0 2
4213: PPUSH
4214: CALL_OW 257
4218: PUSH
4219: LD_INT 3
4221: EQUAL
4222: PUSH
4223: LD_VAR 0 4
4227: PUSH
4228: LD_INT 2
4230: LESS
4231: AND
4232: IFFALSE 4361
// begin p := p + 1 ;
4234: LD_ADDR_VAR 0 4
4238: PUSH
4239: LD_VAR 0 4
4243: PUSH
4244: LD_INT 1
4246: PLUS
4247: ST_TO_ADDR
// uc_side := 5 ;
4248: LD_ADDR_OWVAR 20
4252: PUSH
4253: LD_INT 5
4255: ST_TO_ADDR
// if rand ( 0 , 1 ) then
4256: LD_INT 0
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: CALL_OW 12
4266: IFFALSE 4297
// begin uc_nation := 2 ;
4268: LD_ADDR_OWVAR 21
4272: PUSH
4273: LD_INT 2
4275: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
4276: LD_INT 13
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_INT 1
4284: PPUSH
4285: LD_INT 27
4287: PPUSH
4288: LD_INT 88
4290: PPUSH
4291: CALL 30710 0 5
// end else
4295: GO 4324
// begin uc_nation := 3 ;
4297: LD_ADDR_OWVAR 21
4301: PUSH
4302: LD_INT 3
4304: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
4305: LD_INT 22
4307: PPUSH
4308: LD_INT 1
4310: PPUSH
4311: LD_INT 1
4313: PPUSH
4314: LD_INT 45
4316: PPUSH
4317: LD_INT 88
4319: PPUSH
4320: CALL 30710 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
4324: CALL_OW 45
4328: PPUSH
4329: LD_INT 13
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
4339: LD_VAR 0 2
4343: PPUSH
4344: LD_INT 340
4346: PPUSH
4347: LD_INT 205
4349: PPUSH
4350: CALL_OW 428
4354: PPUSH
4355: CALL_OW 52
// end else
4359: GO 4376
// PlaceUnitArea ( i , southSpawn , false ) ;
4361: LD_VAR 0 2
4365: PPUSH
4366: LD_INT 13
4368: PPUSH
4369: LD_INT 0
4371: PPUSH
4372: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
4376: LD_VAR 0 2
4380: PPUSH
4381: LD_INT 333
4383: PPUSH
4384: LD_INT 210
4386: PPUSH
4387: CALL_OW 111
// wait ( 0 0$2 ) ;
4391: LD_INT 70
4393: PPUSH
4394: CALL_OW 67
// end ;
4398: GO 4198
4400: POP
4401: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
4402: LD_EXP 40
4406: PPUSH
4407: LD_INT 340
4409: PPUSH
4410: LD_INT 205
4412: PPUSH
4413: LD_INT 0
4415: PPUSH
4416: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
4420: LD_EXP 40
4424: PPUSH
4425: LD_INT 333
4427: PPUSH
4428: LD_INT 206
4430: PPUSH
4431: CALL_OW 111
// wait ( 0 0$2 ) ;
4435: LD_INT 70
4437: PPUSH
4438: CALL_OW 67
// ComHold ( omarSquad ) ;
4442: LD_EXP 48
4446: PPUSH
4447: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
4451: LD_EXP 40
4455: PUSH
4456: LD_EXP 48
4460: PPUSH
4461: LD_INT 2
4463: PUSH
4464: LD_INT 25
4466: PUSH
4467: LD_INT 1
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 25
4476: PUSH
4477: LD_INT 8
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: PPUSH
4489: CALL_OW 72
4493: UNION
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 5
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 2
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 69
4523: UNION
4524: PPUSH
4525: LD_INT 315
4527: PPUSH
4528: LD_INT 214
4530: PPUSH
4531: CALL_OW 114
// wait ( 0 0$22 ) ;
4535: LD_INT 770
4537: PPUSH
4538: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
4542: LD_EXP 48
4546: PUSH
4547: LD_EXP 40
4551: UNION
4552: PPUSH
4553: LD_INT 329
4555: PPUSH
4556: LD_INT 231
4558: PPUSH
4559: CALL_OW 114
// end ;
4563: LD_VAR 0 1
4567: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4568: LD_EXP 10
4572: IFFALSE 5655
4574: GO 4576
4576: DISABLE
4577: LD_INT 0
4579: PPUSH
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
// begin enable ;
4590: ENABLE
// if not omarSquad then
4591: LD_EXP 48
4595: NOT
4596: IFFALSE 4600
// exit ;
4598: GO 5655
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
4600: LD_ADDR_VAR 0 10
4604: PUSH
4605: LD_INT 14
4607: PPUSH
4608: LD_INT 81
4610: PUSH
4611: LD_INT 5
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PPUSH
4618: CALL_OW 70
4622: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
4623: LD_ADDR_VAR 0 6
4627: PUSH
4628: LD_EXP 48
4632: PPUSH
4633: LD_INT 2
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 1
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 25
4648: PUSH
4649: LD_INT 8
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: LIST
4660: PPUSH
4661: CALL_OW 72
4665: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
4666: LD_ADDR_VAR 0 7
4670: PUSH
4671: LD_EXP 48
4675: PPUSH
4676: LD_INT 25
4678: PUSH
4679: LD_INT 2
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PPUSH
4686: CALL_OW 72
4690: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
4691: LD_ADDR_VAR 0 9
4695: PUSH
4696: LD_EXP 48
4700: PPUSH
4701: LD_INT 25
4703: PUSH
4704: LD_INT 3
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 72
4715: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
4716: LD_ADDR_VAR 0 8
4720: PUSH
4721: LD_EXP 48
4725: PPUSH
4726: LD_INT 25
4728: PUSH
4729: LD_INT 4
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PPUSH
4736: CALL_OW 72
4740: ST_TO_ADDR
// if sol then
4741: LD_VAR 0 6
4745: IFFALSE 5109
// for i in sol do
4747: LD_ADDR_VAR 0 1
4751: PUSH
4752: LD_VAR 0 6
4756: PUSH
4757: FOR_IN
4758: IFFALSE 5107
// if not HasTask ( i ) then
4760: LD_VAR 0 1
4764: PPUSH
4765: CALL_OW 314
4769: NOT
4770: IFFALSE 5105
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
4772: LD_VAR 0 1
4776: PPUSH
4777: CALL_OW 310
4781: NOT
4782: PUSH
4783: LD_VAR 0 1
4787: PPUSH
4788: CALL_OW 256
4792: PUSH
4793: LD_INT 500
4795: LESS
4796: AND
4797: PUSH
4798: LD_VAR 0 1
4802: PPUSH
4803: LD_INT 333
4805: PPUSH
4806: LD_INT 234
4808: PPUSH
4809: CALL_OW 297
4813: PUSH
4814: LD_INT 6
4816: GREATER
4817: AND
4818: IFFALSE 4837
// begin ComMoveXY ( i , 333 , 234 ) ;
4820: LD_VAR 0 1
4824: PPUSH
4825: LD_INT 333
4827: PPUSH
4828: LD_INT 234
4830: PPUSH
4831: CALL_OW 111
// continue ;
4835: GO 4757
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4837: LD_ADDR_VAR 0 5
4841: PUSH
4842: LD_INT 22
4844: PUSH
4845: LD_INT 5
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 58
4854: PUSH
4855: EMPTY
4856: LIST
4857: PUSH
4858: LD_INT 50
4860: PUSH
4861: EMPTY
4862: LIST
4863: PUSH
4864: LD_INT 2
4866: PUSH
4867: LD_INT 30
4869: PUSH
4870: LD_INT 32
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 30
4879: PUSH
4880: LD_INT 31
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PPUSH
4898: CALL_OW 69
4902: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
4903: LD_VAR 0 5
4907: PUSH
4908: LD_VAR 0 1
4912: PPUSH
4913: CALL_OW 310
4917: PPUSH
4918: CALL_OW 266
4922: PUSH
4923: LD_INT 31
4925: NONEQUAL
4926: AND
4927: IFFALSE 5009
// begin for j in tmp do
4929: LD_ADDR_VAR 0 2
4933: PUSH
4934: LD_VAR 0 5
4938: PUSH
4939: FOR_IN
4940: IFFALSE 5005
// if GetTag ( j ) <> 1 then
4942: LD_VAR 0 2
4946: PPUSH
4947: CALL_OW 110
4951: PUSH
4952: LD_INT 1
4954: NONEQUAL
4955: IFFALSE 5003
// begin SetTag ( j , 1 ) ;
4957: LD_VAR 0 2
4961: PPUSH
4962: LD_INT 1
4964: PPUSH
4965: CALL_OW 109
// if IsInUnit ( i ) then
4969: LD_VAR 0 1
4973: PPUSH
4974: CALL_OW 310
4978: IFFALSE 4989
// ComExit ( i ) ;
4980: LD_VAR 0 1
4984: PPUSH
4985: CALL 63542 0 1
// AddComEnterUnit ( i , j ) ;
4989: LD_VAR 0 1
4993: PPUSH
4994: LD_VAR 0 2
4998: PPUSH
4999: CALL_OW 180
// end ;
5003: GO 4939
5005: POP
5006: POP
// end else
5007: GO 5105
// if not IsInUnit ( i ) then
5009: LD_VAR 0 1
5013: PPUSH
5014: CALL_OW 310
5018: NOT
5019: IFFALSE 5105
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
5021: LD_ADDR_VAR 0 5
5025: PUSH
5026: LD_INT 22
5028: PUSH
5029: LD_INT 5
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 50
5038: PUSH
5039: EMPTY
5040: LIST
5041: PUSH
5042: LD_INT 30
5044: PUSH
5045: LD_INT 4
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PPUSH
5057: CALL_OW 69
5061: ST_TO_ADDR
// if tmp then
5062: LD_VAR 0 5
5066: IFFALSE 5105
// if UnitsInside ( tmp [ 1 ] ) < 6 then
5068: LD_VAR 0 5
5072: PUSH
5073: LD_INT 1
5075: ARRAY
5076: PPUSH
5077: CALL_OW 313
5081: PUSH
5082: LD_INT 6
5084: LESS
5085: IFFALSE 5105
// ComEnterUnit ( i , tmp [ 1 ] ) ;
5087: LD_VAR 0 1
5091: PPUSH
5092: LD_VAR 0 5
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PPUSH
5101: CALL_OW 120
// end ; end ;
5105: GO 4757
5107: POP
5108: POP
// if sci then
5109: LD_VAR 0 8
5113: IFFALSE 5168
// for i in sci do
5115: LD_ADDR_VAR 0 1
5119: PUSH
5120: LD_VAR 0 8
5124: PUSH
5125: FOR_IN
5126: IFFALSE 5166
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
5128: LD_VAR 0 1
5132: PPUSH
5133: LD_INT 333
5135: PPUSH
5136: LD_INT 234
5138: PPUSH
5139: CALL_OW 297
5143: PUSH
5144: LD_INT 9
5146: GREATER
5147: IFFALSE 5164
// ComMoveXY ( i , 333 , 234 ) ;
5149: LD_VAR 0 1
5153: PPUSH
5154: LD_INT 333
5156: PPUSH
5157: LD_INT 234
5159: PPUSH
5160: CALL_OW 111
// end ;
5164: GO 5125
5166: POP
5167: POP
// if mech then
5168: LD_VAR 0 9
5172: IFFALSE 5377
// for i in mech do
5174: LD_ADDR_VAR 0 1
5178: PUSH
5179: LD_VAR 0 9
5183: PUSH
5184: FOR_IN
5185: IFFALSE 5375
// begin hasVehicle := IsInUnit ( i ) ;
5187: LD_ADDR_VAR 0 11
5191: PUSH
5192: LD_VAR 0 1
5196: PPUSH
5197: CALL_OW 310
5201: ST_TO_ADDR
// if enemyInBase then
5202: LD_VAR 0 10
5206: IFFALSE 5293
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
5208: LD_VAR 0 11
5212: PUSH
5213: LD_VAR 0 11
5217: PPUSH
5218: CALL_OW 256
5222: PUSH
5223: LD_INT 500
5225: GREATER
5226: AND
5227: IFFALSE 5255
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
5229: LD_VAR 0 11
5233: PPUSH
5234: LD_VAR 0 10
5238: PPUSH
5239: LD_VAR 0 11
5243: PPUSH
5244: CALL_OW 74
5248: PPUSH
5249: CALL_OW 115
5253: GO 5291
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
5255: LD_VAR 0 11
5259: PPUSH
5260: LD_INT 333
5262: PPUSH
5263: LD_INT 234
5265: PPUSH
5266: CALL_OW 297
5270: PUSH
5271: LD_INT 6
5273: GREATER
5274: IFFALSE 5291
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
5276: LD_VAR 0 11
5280: PPUSH
5281: LD_INT 333
5283: PPUSH
5284: LD_INT 234
5286: PPUSH
5287: CALL_OW 111
// end else
5291: GO 5373
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
5293: LD_VAR 0 1
5297: PPUSH
5298: LD_INT 333
5300: PPUSH
5301: LD_INT 234
5303: PPUSH
5304: CALL_OW 297
5308: PUSH
5309: LD_INT 6
5311: GREATER
5312: IFFALSE 5331
// ComMoveXY ( i , 333 , 234 ) else
5314: LD_VAR 0 1
5318: PPUSH
5319: LD_INT 333
5321: PPUSH
5322: LD_INT 234
5324: PPUSH
5325: CALL_OW 111
5329: GO 5373
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
5331: LD_VAR 0 11
5335: PUSH
5336: LD_VAR 0 11
5340: PPUSH
5341: CALL_OW 256
5345: PUSH
5346: LD_INT 1000
5348: LESS
5349: AND
5350: IFFALSE 5373
// begin SetFuel ( hasVehicle , 100 ) ;
5352: LD_VAR 0 11
5356: PPUSH
5357: LD_INT 100
5359: PPUSH
5360: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
5364: LD_VAR 0 1
5368: PPUSH
5369: CALL 64844 0 1
// end ; end ; end ;
5373: GO 5184
5375: POP
5376: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
5377: LD_ADDR_VAR 0 5
5381: PUSH
5382: LD_INT 14
5384: PPUSH
5385: LD_INT 3
5387: PUSH
5388: LD_INT 24
5390: PUSH
5391: LD_INT 1000
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: LD_INT 21
5404: PUSH
5405: LD_INT 3
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PPUSH
5416: CALL_OW 70
5420: ST_TO_ADDR
// if tmp and eng then
5421: LD_VAR 0 5
5425: PUSH
5426: LD_VAR 0 7
5430: AND
5431: IFFALSE 5537
// begin for i in eng do
5433: LD_ADDR_VAR 0 1
5437: PUSH
5438: LD_VAR 0 7
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5535
// if IsInUnit ( i ) then
5446: LD_VAR 0 1
5450: PPUSH
5451: CALL_OW 310
5455: IFFALSE 5468
// ComExitBuilding ( i ) else
5457: LD_VAR 0 1
5461: PPUSH
5462: CALL_OW 122
5466: GO 5533
// if GetLives ( i ) = 1000 then
5468: LD_VAR 0 1
5472: PPUSH
5473: CALL_OW 256
5477: PUSH
5478: LD_INT 1000
5480: EQUAL
5481: IFFALSE 5503
// ComRepairBuilding ( i , tmp [ 1 ] ) else
5483: LD_VAR 0 1
5487: PPUSH
5488: LD_VAR 0 5
5492: PUSH
5493: LD_INT 1
5495: ARRAY
5496: PPUSH
5497: CALL_OW 130
5501: GO 5533
// if GetLives ( i ) < 700 then
5503: LD_VAR 0 1
5507: PPUSH
5508: CALL_OW 256
5512: PUSH
5513: LD_INT 700
5515: LESS
5516: IFFALSE 5533
// ComMoveXY ( i , 333 , 234 ) ;
5518: LD_VAR 0 1
5522: PPUSH
5523: LD_INT 333
5525: PPUSH
5526: LD_INT 234
5528: PPUSH
5529: CALL_OW 111
5533: GO 5443
5535: POP
5536: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5537: LD_VAR 0 5
5541: NOT
5542: PUSH
5543: LD_VAR 0 7
5547: PPUSH
5548: LD_INT 3
5550: PUSH
5551: LD_INT 54
5553: PUSH
5554: EMPTY
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 72
5565: AND
5566: IFFALSE 5655
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5568: LD_ADDR_VAR 0 1
5572: PUSH
5573: LD_VAR 0 7
5577: PPUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 54
5583: PUSH
5584: EMPTY
5585: LIST
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PPUSH
5591: CALL_OW 72
5595: PUSH
5596: FOR_IN
5597: IFFALSE 5653
// if GetLives ( i ) < 1000 then
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 256
5608: PUSH
5609: LD_INT 1000
5611: LESS
5612: IFFALSE 5631
// ComMoveXY ( i , 333 , 234 ) else
5614: LD_VAR 0 1
5618: PPUSH
5619: LD_INT 333
5621: PPUSH
5622: LD_INT 234
5624: PPUSH
5625: CALL_OW 111
5629: GO 5651
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
5631: LD_VAR 0 1
5635: PPUSH
5636: LD_INT 341
5638: PPUSH
5639: LD_INT 232
5641: PPUSH
5642: CALL_OW 428
5646: PPUSH
5647: CALL_OW 120
5651: GO 5596
5653: POP
5654: POP
// end ;
5655: PPOPN 11
5657: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
5658: LD_EXP 40
5662: PPUSH
5663: CALL_OW 256
5667: PUSH
5668: LD_INT 1000
5670: LESS
5671: IFFALSE 5689
5673: GO 5675
5675: DISABLE
// begin enable ;
5676: ENABLE
// SetLives ( Omar , 1000 ) ;
5677: LD_EXP 40
5681: PPUSH
5682: LD_INT 1000
5684: PPUSH
5685: CALL_OW 234
// end ;
5689: END
// every 0 0$1 trigger omarAttack do var i , nearestPoint ;
5690: LD_EXP 23
5694: IFFALSE 6570
5696: GO 5698
5698: DISABLE
5699: LD_INT 0
5701: PPUSH
5702: PPUSH
// begin wait ( 0 0$25 ) ;
5703: LD_INT 875
5705: PPUSH
5706: CALL_OW 67
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
5710: LD_EXP 48
5714: PPUSH
5715: LD_INT 2
5717: PUSH
5718: LD_INT 25
5720: PUSH
5721: LD_INT 1
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 25
5730: PUSH
5731: LD_INT 8
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 72
5747: PPUSH
5748: CALL_OW 122
// wait ( 0 0$3 ) ;
5752: LD_INT 105
5754: PPUSH
5755: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , 225 , 223 ) ;
5759: LD_EXP 48
5763: PUSH
5764: LD_EXP 40
5768: UNION
5769: PPUSH
5770: LD_INT 225
5772: PPUSH
5773: LD_INT 223
5775: PPUSH
5776: CALL_OW 174
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_type , unit_vehicle ] ] ] ) , 167 , 231 ) ;
5780: LD_INT 22
5782: PUSH
5783: LD_INT 5
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: LD_INT 2
5792: PUSH
5793: LD_INT 25
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 25
5805: PUSH
5806: LD_INT 8
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 21
5815: PUSH
5816: LD_INT 2
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PPUSH
5833: CALL_OW 69
5837: PPUSH
5838: LD_INT 167
5840: PPUSH
5841: LD_INT 231
5843: PPUSH
5844: CALL_OW 174
// AddComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 222 , 229 ) ;
5848: LD_EXP 48
5852: PPUSH
5853: LD_INT 25
5855: PUSH
5856: LD_INT 4
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PPUSH
5863: CALL_OW 72
5867: PPUSH
5868: LD_INT 222
5870: PPUSH
5871: LD_INT 229
5873: PPUSH
5874: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5878: LD_INT 35
5880: PPUSH
5881: CALL_OW 67
// for i in omarSquad union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5885: LD_ADDR_VAR 0 1
5889: PUSH
5890: LD_EXP 48
5894: PUSH
5895: LD_INT 22
5897: PUSH
5898: LD_INT 5
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 21
5907: PUSH
5908: LD_INT 2
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PPUSH
5919: CALL_OW 69
5923: UNION
5924: PUSH
5925: FOR_IN
5926: IFFALSE 6561
// begin if IsDead ( i ) then
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 301
5937: IFFALSE 5957
// begin omarSquad := omarSquad diff i ;
5939: LD_ADDR_EXP 48
5943: PUSH
5944: LD_EXP 48
5948: PUSH
5949: LD_VAR 0 1
5953: DIFF
5954: ST_TO_ADDR
// continue ;
5955: GO 5925
// end ; if GetClass ( i ) in [ 1 , 8 ] then
5957: LD_VAR 0 1
5961: PPUSH
5962: CALL_OW 257
5966: PUSH
5967: LD_INT 1
5969: PUSH
5970: LD_INT 8
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: IN
5977: IFFALSE 6171
// begin if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 256
5988: PUSH
5989: LD_INT 700
5991: LESS
5992: PUSH
5993: LD_VAR 0 1
5997: PPUSH
5998: CALL_OW 110
6002: PUSH
6003: LD_INT 0
6005: EQUAL
6006: AND
6007: IFFALSE 6036
// begin SetTag ( i , 1 ) ;
6009: LD_VAR 0 1
6013: PPUSH
6014: LD_INT 1
6016: PPUSH
6017: CALL_OW 109
// ComMoveXY ( i , 222 , 229 ) ;
6021: LD_VAR 0 1
6025: PPUSH
6026: LD_INT 222
6028: PPUSH
6029: LD_INT 229
6031: PPUSH
6032: CALL_OW 111
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 256
6045: PUSH
6046: LD_INT 1000
6048: EQUAL
6049: PUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: CALL_OW 110
6059: PUSH
6060: LD_INT 1
6062: EQUAL
6063: AND
6064: IFFALSE 6078
// SetTag ( i , 0 ) ;
6066: LD_VAR 0 1
6070: PPUSH
6071: LD_INT 0
6073: PPUSH
6074: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and not HasTask ( i ) then
6078: LD_VAR 0 1
6082: PPUSH
6083: CALL_OW 110
6087: PUSH
6088: LD_INT 0
6090: EQUAL
6091: PUSH
6092: LD_VAR 0 1
6096: PPUSH
6097: CALL_OW 256
6101: PUSH
6102: LD_INT 700
6104: GREATEREQUAL
6105: AND
6106: PUSH
6107: LD_VAR 0 1
6111: PPUSH
6112: CALL_OW 314
6116: NOT
6117: AND
6118: IFFALSE 6171
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6120: LD_INT 18
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 3
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: IFFALSE 6156
// ComAgressiveMove ( i , 167 , 231 ) else
6139: LD_VAR 0 1
6143: PPUSH
6144: LD_INT 167
6146: PPUSH
6147: LD_INT 231
6149: PPUSH
6150: CALL_OW 114
6154: GO 6171
// ComAgressiveMove ( i , 106 , 153 ) ;
6156: LD_VAR 0 1
6160: PPUSH
6161: LD_INT 106
6163: PPUSH
6164: LD_INT 153
6166: PPUSH
6167: CALL_OW 114
// end ; if GetType ( i ) = unit_vehicle then
6171: LD_VAR 0 1
6175: PPUSH
6176: CALL_OW 247
6180: PUSH
6181: LD_INT 2
6183: EQUAL
6184: IFFALSE 6559
// begin nearestPoint := [ 219 , 219 ] ;
6186: LD_ADDR_VAR 0 2
6190: PUSH
6191: LD_INT 219
6193: PUSH
6194: LD_INT 219
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: ST_TO_ADDR
// if GetDistUnitXY ( i , 156 , 202 ) < GetDistUnitXY ( i , 219 , 219 ) then
6201: LD_VAR 0 1
6205: PPUSH
6206: LD_INT 156
6208: PPUSH
6209: LD_INT 202
6211: PPUSH
6212: CALL_OW 297
6216: PUSH
6217: LD_VAR 0 1
6221: PPUSH
6222: LD_INT 219
6224: PPUSH
6225: LD_INT 219
6227: PPUSH
6228: CALL_OW 297
6232: LESS
6233: IFFALSE 6250
// nearestPoint := [ 156 , 202 ] ;
6235: LD_ADDR_VAR 0 2
6239: PUSH
6240: LD_INT 156
6242: PUSH
6243: LD_INT 202
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: ST_TO_ADDR
// if GetLives ( i ) < 700 and GetTag ( i ) = 0 then
6250: LD_VAR 0 1
6254: PPUSH
6255: CALL_OW 256
6259: PUSH
6260: LD_INT 700
6262: LESS
6263: PUSH
6264: LD_VAR 0 1
6268: PPUSH
6269: CALL_OW 110
6273: PUSH
6274: LD_INT 0
6276: EQUAL
6277: AND
6278: IFFALSE 6319
// begin SetTag ( i , 1 ) ;
6280: LD_VAR 0 1
6284: PPUSH
6285: LD_INT 1
6287: PPUSH
6288: CALL_OW 109
// ComMoveXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) ;
6292: LD_VAR 0 1
6296: PPUSH
6297: LD_VAR 0 2
6301: PUSH
6302: LD_INT 1
6304: ARRAY
6305: PPUSH
6306: LD_VAR 0 2
6310: PUSH
6311: LD_INT 2
6313: ARRAY
6314: PPUSH
6315: CALL_OW 111
// end ; if GetLives ( i ) < 700 and GetTag ( i ) = 1 and IsDrivenBy ( i ) and GetDistUnitXY ( i , nearestPoint [ 1 ] , nearestPoint [ 2 ] ) < 10 then
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 256
6328: PUSH
6329: LD_INT 700
6331: LESS
6332: PUSH
6333: LD_VAR 0 1
6337: PPUSH
6338: CALL_OW 110
6342: PUSH
6343: LD_INT 1
6345: EQUAL
6346: AND
6347: PUSH
6348: LD_VAR 0 1
6352: PPUSH
6353: CALL_OW 311
6357: AND
6358: PUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: LD_VAR 0 2
6368: PUSH
6369: LD_INT 1
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 2
6377: PUSH
6378: LD_INT 2
6380: ARRAY
6381: PPUSH
6382: CALL_OW 297
6386: PUSH
6387: LD_INT 10
6389: LESS
6390: AND
6391: IFFALSE 6402
// ComRepairVehicleAndReturn ( i ) ;
6393: LD_VAR 0 1
6397: PPUSH
6398: CALL 64844 0 1
// if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
6402: LD_VAR 0 1
6406: PPUSH
6407: CALL_OW 256
6411: PUSH
6412: LD_INT 1000
6414: EQUAL
6415: PUSH
6416: LD_VAR 0 1
6420: PPUSH
6421: CALL_OW 110
6425: PUSH
6426: LD_INT 1
6428: EQUAL
6429: AND
6430: PUSH
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 311
6440: AND
6441: IFFALSE 6455
// SetTag ( i , 0 ) ;
6443: LD_VAR 0 1
6447: PPUSH
6448: LD_INT 0
6450: PPUSH
6451: CALL_OW 109
// if GetTag ( i ) = 0 and GetLives ( i ) >= 700 and IsDrivenBy ( i ) and not HasTask ( i ) then
6455: LD_VAR 0 1
6459: PPUSH
6460: CALL_OW 110
6464: PUSH
6465: LD_INT 0
6467: EQUAL
6468: PUSH
6469: LD_VAR 0 1
6473: PPUSH
6474: CALL_OW 256
6478: PUSH
6479: LD_INT 700
6481: GREATEREQUAL
6482: AND
6483: PUSH
6484: LD_VAR 0 1
6488: PPUSH
6489: CALL_OW 311
6493: AND
6494: PUSH
6495: LD_VAR 0 1
6499: PPUSH
6500: CALL_OW 314
6504: NOT
6505: AND
6506: IFFALSE 6559
// if FilterUnitsInArea ( helperBaseDef , [ f_side , 3 ] ) then
6508: LD_INT 18
6510: PPUSH
6511: LD_INT 22
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PPUSH
6521: CALL_OW 70
6525: IFFALSE 6544
// ComAgressiveMove ( i , 167 , 231 ) else
6527: LD_VAR 0 1
6531: PPUSH
6532: LD_INT 167
6534: PPUSH
6535: LD_INT 231
6537: PPUSH
6538: CALL_OW 114
6542: GO 6559
// ComAgressiveMove ( i , 106 , 153 ) ;
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 106
6551: PPUSH
6552: LD_INT 153
6554: PPUSH
6555: CALL_OW 114
// end ; end ;
6559: GO 5925
6561: POP
6562: POP
// until not omarSquad ;
6563: LD_EXP 48
6567: NOT
6568: IFFALSE 5878
// end ;
6570: PPOPN 2
6572: END
// export function GoForOil ; var i , tmp , data , chance , vehicle ; begin
6573: LD_INT 0
6575: PPUSH
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
// repeat wait ( 0 0$1 ) ;
6581: LD_INT 35
6583: PPUSH
6584: CALL_OW 67
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) ;
6588: LD_ADDR_VAR 0 3
6592: PUSH
6593: LD_INT 20
6595: PPUSH
6596: LD_INT 22
6598: PUSH
6599: LD_INT 2
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 33
6608: PUSH
6609: LD_INT 1
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PPUSH
6620: CALL_OW 70
6624: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
6625: LD_VAR 0 3
6629: PPUSH
6630: LD_INT 2
6632: PUSH
6633: LD_INT 34
6635: PUSH
6636: LD_INT 32
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: LD_INT 34
6645: PUSH
6646: LD_INT 51
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 72
6662: IFFALSE 6679
// if Query ( QConvoy ) = 1 then
6664: LD_STRING QConvoy
6666: PPUSH
6667: CALL_OW 97
6671: PUSH
6672: LD_INT 1
6674: EQUAL
6675: IFFALSE 6679
// break ;
6677: GO 6683
// until false ;
6679: LD_INT 0
6681: IFFALSE 6581
// SetAreaMapShow ( oilArea , 0 ) ;
6683: LD_INT 20
6685: PPUSH
6686: LD_INT 0
6688: PPUSH
6689: CALL_OW 424
// data := [ ] ;
6693: LD_ADDR_VAR 0 4
6697: PUSH
6698: EMPTY
6699: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
6700: LD_ADDR_VAR 0 5
6704: PUSH
6705: LD_INT 60
6707: PUSH
6708: LD_INT 50
6710: PUSH
6711: LD_INT 40
6713: PUSH
6714: LD_INT 30
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PUSH
6723: LD_OWVAR 67
6727: ARRAY
6728: ST_TO_ADDR
// for i in tmp do
6729: LD_ADDR_VAR 0 2
6733: PUSH
6734: LD_VAR 0 3
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6826
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , ] ) ;
6742: LD_ADDR_VAR 0 4
6746: PUSH
6747: LD_VAR 0 4
6751: PPUSH
6752: LD_VAR 0 2
6756: PUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: CALL_OW 311
6766: PUSH
6767: LD_VAR 0 2
6771: PPUSH
6772: CALL_OW 256
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL 63144 0 2
6786: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 311
6796: PPUSH
6797: CALL_OW 64
// RemoveUnit ( i ) ;
6801: LD_VAR 0 2
6805: PPUSH
6806: CALL_OW 64
// chance := chance + 20 ;
6810: LD_ADDR_VAR 0 5
6814: PUSH
6815: LD_VAR 0 5
6819: PUSH
6820: LD_INT 20
6822: PLUS
6823: ST_TO_ADDR
// end ;
6824: GO 6739
6826: POP
6827: POP
// wait ( rand ( 4 4$30 , 5 5$30 ) ) ;
6828: LD_INT 9450
6830: PPUSH
6831: LD_INT 11550
6833: PPUSH
6834: CALL_OW 12
6838: PPUSH
6839: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6843: LD_INT 35
6845: PPUSH
6846: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
6850: LD_INT 22
6852: PUSH
6853: LD_INT 3
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 92
6862: PUSH
6863: LD_INT 261
6865: PUSH
6866: LD_INT 71
6868: PUSH
6869: LD_INT 12
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PPUSH
6882: CALL_OW 69
6886: NOT
6887: PUSH
6888: LD_INT 277
6890: PPUSH
6891: LD_INT 80
6893: PPUSH
6894: CALL_OW 428
6898: NOT
6899: AND
6900: IFFALSE 6843
// for i in data do
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: LD_VAR 0 4
6911: PUSH
6912: FOR_IN
6913: IFFALSE 7188
// begin uc_nation := GetNation ( i [ 1 ] ) ;
6915: LD_ADDR_OWVAR 21
6919: PUSH
6920: LD_VAR 0 2
6924: PUSH
6925: LD_INT 1
6927: ARRAY
6928: PPUSH
6929: CALL_OW 248
6933: ST_TO_ADDR
// uc_side := 2 ;
6934: LD_ADDR_OWVAR 20
6938: PUSH
6939: LD_INT 2
6941: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
6942: LD_VAR 0 2
6946: PUSH
6947: LD_INT 1
6949: ARRAY
6950: PPUSH
6951: CALL_OW 265
6955: PPUSH
6956: LD_VAR 0 2
6960: PUSH
6961: LD_INT 1
6963: ARRAY
6964: PPUSH
6965: CALL_OW 262
6969: PPUSH
6970: LD_VAR 0 2
6974: PUSH
6975: LD_INT 1
6977: ARRAY
6978: PPUSH
6979: CALL_OW 263
6983: PPUSH
6984: LD_VAR 0 2
6988: PUSH
6989: LD_INT 1
6991: ARRAY
6992: PPUSH
6993: CALL_OW 264
6997: PPUSH
6998: LD_INT 66
7000: PPUSH
7001: CALL 30710 0 5
// vehicle := CreateVehicle ;
7005: LD_ADDR_VAR 0 6
7009: PUSH
7010: CALL_OW 45
7014: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
7015: LD_VAR 0 6
7019: PPUSH
7020: LD_INT 277
7022: PPUSH
7023: LD_INT 80
7025: PPUSH
7026: LD_INT 4
7028: PPUSH
7029: LD_INT 0
7031: PPUSH
7032: CALL 65284 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
7036: LD_VAR 0 2
7040: PUSH
7041: LD_INT 2
7043: ARRAY
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
7054: LD_VAR 0 6
7058: PPUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_INT 3
7066: ARRAY
7067: PPUSH
7068: CALL_OW 234
// if Prob ( chance ) then
7072: LD_VAR 0 5
7076: PPUSH
7077: CALL_OW 13
7081: IFFALSE 7122
// begin if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
7083: LD_VAR 0 6
7087: PPUSH
7088: CALL_OW 264
7092: PUSH
7093: LD_INT 32
7095: PUSH
7096: LD_INT 51
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: IN
7103: IFFALSE 7120
// SetCargo ( vehicle , mat_oil , 100 ) ;
7105: LD_VAR 0 6
7109: PPUSH
7110: LD_INT 2
7112: PPUSH
7113: LD_INT 100
7115: PPUSH
7116: CALL_OW 290
// end else
7120: GO 7148
// if i [ 3 ] > 333 then
7122: LD_VAR 0 2
7126: PUSH
7127: LD_INT 3
7129: ARRAY
7130: PUSH
7131: LD_INT 333
7133: GREATER
7134: IFFALSE 7148
// SetLives ( vehicle , 333 ) ;
7136: LD_VAR 0 6
7140: PPUSH
7141: LD_INT 333
7143: PPUSH
7144: CALL_OW 234
// ComMoveXY ( vehicle , 250 , 119 ) ;
7148: LD_VAR 0 6
7152: PPUSH
7153: LD_INT 250
7155: PPUSH
7156: LD_INT 119
7158: PPUSH
7159: CALL_OW 111
// repeat wait ( 0 0$5 ) ;
7163: LD_INT 175
7165: PPUSH
7166: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ f_placed ] ) ;
7170: LD_INT 20
7172: PPUSH
7173: LD_INT 52
7175: PUSH
7176: EMPTY
7177: LIST
7178: PPUSH
7179: CALL_OW 70
7183: NOT
7184: IFFALSE 7163
// end ;
7186: GO 6912
7188: POP
7189: POP
// wait ( 0 0$30 ) ;
7190: LD_INT 1050
7192: PPUSH
7193: CALL_OW 67
// GoForOil ;
7197: CALL 6573 0 0
// end ; end_of_file
7201: LD_VAR 0 1
7205: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
7206: LD_INT 0
7208: PPUSH
// uc_side := side ;
7209: LD_ADDR_OWVAR 20
7213: PUSH
7214: LD_VAR 0 1
7218: ST_TO_ADDR
// uc_nation := nation ;
7219: LD_ADDR_OWVAR 21
7223: PUSH
7224: LD_VAR 0 2
7228: ST_TO_ADDR
// vc_chassis := chassis ;
7229: LD_ADDR_OWVAR 37
7233: PUSH
7234: LD_VAR 0 3
7238: ST_TO_ADDR
// vc_engine := engine ;
7239: LD_ADDR_OWVAR 39
7243: PUSH
7244: LD_VAR 0 4
7248: ST_TO_ADDR
// vc_control := control ;
7249: LD_ADDR_OWVAR 38
7253: PUSH
7254: LD_VAR 0 5
7258: ST_TO_ADDR
// vc_weapon := weapon ;
7259: LD_ADDR_OWVAR 40
7263: PUSH
7264: LD_VAR 0 6
7268: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7269: LD_ADDR_OWVAR 41
7273: PUSH
7274: LD_VAR 0 7
7278: ST_TO_ADDR
// result := CreateVehicle ;
7279: LD_ADDR_VAR 0 8
7283: PUSH
7284: CALL_OW 45
7288: ST_TO_ADDR
// end ;
7289: LD_VAR 0 8
7293: RET
// export function SayX ( units , ident ) ; var i ; begin
7294: LD_INT 0
7296: PPUSH
7297: PPUSH
// result := false ;
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_INT 0
7305: ST_TO_ADDR
// if not units then
7306: LD_VAR 0 1
7310: NOT
7311: IFFALSE 7315
// exit ;
7313: GO 7369
// for i in units do
7315: LD_ADDR_VAR 0 4
7319: PUSH
7320: LD_VAR 0 1
7324: PUSH
7325: FOR_IN
7326: IFFALSE 7367
// if IsOk ( i ) then
7328: LD_VAR 0 4
7332: PPUSH
7333: CALL_OW 302
7337: IFFALSE 7365
// begin Say ( i , ident ) ;
7339: LD_VAR 0 4
7343: PPUSH
7344: LD_VAR 0 2
7348: PPUSH
7349: CALL_OW 88
// result := i ;
7353: LD_ADDR_VAR 0 3
7357: PUSH
7358: LD_VAR 0 4
7362: ST_TO_ADDR
// break ;
7363: GO 7367
// end ;
7365: GO 7325
7367: POP
7368: POP
// end ;
7369: LD_VAR 0 3
7373: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
7374: LD_INT 0
7376: PPUSH
7377: PPUSH
// InitUc ;
7378: CALL_OW 18
// InitHc ;
7382: CALL_OW 19
// uc_side := 0 ;
7386: LD_ADDR_OWVAR 20
7390: PUSH
7391: LD_INT 0
7393: ST_TO_ADDR
// uc_nation := 0 ;
7394: LD_ADDR_OWVAR 21
7398: PUSH
7399: LD_INT 0
7401: ST_TO_ADDR
// for i = 1 to amount do
7402: LD_ADDR_VAR 0 4
7406: PUSH
7407: DOUBLE
7408: LD_INT 1
7410: DEC
7411: ST_TO_ADDR
7412: LD_VAR 0 2
7416: PUSH
7417: FOR_TO
7418: IFFALSE 7500
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
7420: LD_ADDR_OWVAR 29
7424: PUSH
7425: LD_INT 9
7427: PPUSH
7428: LD_INT 12
7430: PPUSH
7431: CALL_OW 12
7435: PUSH
7436: LD_INT 9
7438: PPUSH
7439: LD_INT 12
7441: PPUSH
7442: CALL_OW 12
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
7451: LD_ADDR_OWVAR 35
7455: PUSH
7456: LD_INT 1
7458: NEG
7459: PPUSH
7460: LD_INT 1
7462: PPUSH
7463: CALL_OW 12
7467: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
7468: LD_INT 0
7470: PPUSH
7471: LD_INT 12
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
7481: CALL_OW 44
7485: PPUSH
7486: LD_VAR 0 1
7490: PPUSH
7491: LD_INT 0
7493: PPUSH
7494: CALL_OW 49
// end ;
7498: GO 7417
7500: POP
7501: POP
// InitHc ;
7502: CALL_OW 19
// end ;
7506: LD_VAR 0 3
7510: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
7511: LD_INT 0
7513: PPUSH
7514: PPUSH
// uc_side := 0 ;
7515: LD_ADDR_OWVAR 20
7519: PUSH
7520: LD_INT 0
7522: ST_TO_ADDR
// uc_nation := 0 ;
7523: LD_ADDR_OWVAR 21
7527: PUSH
7528: LD_INT 0
7530: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
7531: LD_INT 7
7533: PPUSH
7534: LD_INT 6
7536: PUSH
7537: LD_INT 5
7539: PUSH
7540: LD_INT 4
7542: PUSH
7543: LD_INT 3
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PUSH
7552: LD_OWVAR 67
7556: ARRAY
7557: PPUSH
7558: CALL 7374 0 2
// for i = 1 to 2 do
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: DOUBLE
7568: LD_INT 1
7570: DEC
7571: ST_TO_ADDR
7572: LD_INT 2
7574: PUSH
7575: FOR_TO
7576: IFFALSE 7613
// begin vc_chassis := class_mastodont ;
7578: LD_ADDR_OWVAR 37
7582: PUSH
7583: LD_INT 31
7585: ST_TO_ADDR
// vc_control := control_rider ;
7586: LD_ADDR_OWVAR 38
7590: PUSH
7591: LD_INT 4
7593: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
7594: CALL_OW 45
7598: PPUSH
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_INT 0
7606: PPUSH
7607: CALL 62061 0 3
// end ;
7611: GO 7575
7613: POP
7614: POP
// for i := 1 to 4 do
7615: LD_ADDR_VAR 0 4
7619: PUSH
7620: DOUBLE
7621: LD_INT 1
7623: DEC
7624: ST_TO_ADDR
7625: LD_INT 4
7627: PUSH
7628: FOR_TO
7629: IFFALSE 7666
// begin hc_class := class_horse ;
7631: LD_ADDR_OWVAR 28
7635: PUSH
7636: LD_INT 21
7638: ST_TO_ADDR
// hc_gallery :=  ;
7639: LD_ADDR_OWVAR 33
7643: PUSH
7644: LD_STRING 
7646: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7647: CALL_OW 44
7651: PPUSH
7652: LD_VAR 0 1
7656: PPUSH
7657: LD_INT 0
7659: PPUSH
7660: CALL_OW 49
// end ;
7664: GO 7628
7666: POP
7667: POP
// for i = 1 to 5 do
7668: LD_ADDR_VAR 0 4
7672: PUSH
7673: DOUBLE
7674: LD_INT 1
7676: DEC
7677: ST_TO_ADDR
7678: LD_INT 5
7680: PUSH
7681: FOR_TO
7682: IFFALSE 7736
// begin hc_class = class_tiger ;
7684: LD_ADDR_OWVAR 28
7688: PUSH
7689: LD_INT 14
7691: ST_TO_ADDR
// hc_gallery =  ;
7692: LD_ADDR_OWVAR 33
7696: PUSH
7697: LD_STRING 
7699: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
7700: LD_ADDR_OWVAR 35
7704: PUSH
7705: LD_INT 7
7707: NEG
7708: PPUSH
7709: LD_INT 7
7711: PPUSH
7712: CALL_OW 12
7716: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
7717: CALL_OW 44
7721: PPUSH
7722: LD_VAR 0 1
7726: PPUSH
7727: LD_INT 0
7729: PPUSH
7730: CALL 62061 0 3
// end ;
7734: GO 7681
7736: POP
7737: POP
// for i := 1 to 4 do
7738: LD_ADDR_VAR 0 4
7742: PUSH
7743: DOUBLE
7744: LD_INT 1
7746: DEC
7747: ST_TO_ADDR
7748: LD_INT 4
7750: PUSH
7751: FOR_TO
7752: IFFALSE 7789
// begin hc_class := class_phororhacos ;
7754: LD_ADDR_OWVAR 28
7758: PUSH
7759: LD_INT 18
7761: ST_TO_ADDR
// hc_gallery :=  ;
7762: LD_ADDR_OWVAR 33
7766: PUSH
7767: LD_STRING 
7769: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7770: CALL_OW 44
7774: PPUSH
7775: LD_VAR 0 1
7779: PPUSH
7780: LD_INT 0
7782: PPUSH
7783: CALL_OW 49
// end ;
7787: GO 7751
7789: POP
7790: POP
// for i := 1 to 4 do
7791: LD_ADDR_VAR 0 4
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_INT 4
7803: PUSH
7804: FOR_TO
7805: IFFALSE 7842
// begin hc_class := class_baggie ;
7807: LD_ADDR_OWVAR 28
7811: PUSH
7812: LD_INT 13
7814: ST_TO_ADDR
// hc_gallery :=  ;
7815: LD_ADDR_OWVAR 33
7819: PUSH
7820: LD_STRING 
7822: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
7823: CALL_OW 44
7827: PPUSH
7828: LD_VAR 0 1
7832: PPUSH
7833: LD_INT 0
7835: PPUSH
7836: CALL_OW 49
// end ;
7840: GO 7804
7842: POP
7843: POP
// for i := 1 to 7 do
7844: LD_ADDR_VAR 0 4
7848: PUSH
7849: DOUBLE
7850: LD_INT 1
7852: DEC
7853: ST_TO_ADDR
7854: LD_INT 7
7856: PUSH
7857: FOR_TO
7858: IFFALSE 7895
// begin hc_class := class_frog ;
7860: LD_ADDR_OWVAR 28
7864: PUSH
7865: LD_INT 19
7867: ST_TO_ADDR
// hc_gallery :=  ;
7868: LD_ADDR_OWVAR 33
7872: PUSH
7873: LD_STRING 
7875: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
7876: CALL_OW 44
7880: PPUSH
7881: LD_VAR 0 2
7885: PPUSH
7886: LD_INT 0
7888: PPUSH
7889: CALL_OW 49
// end ;
7893: GO 7857
7895: POP
7896: POP
// end ;
7897: LD_VAR 0 3
7901: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
7902: LD_INT 0
7904: PPUSH
7905: PPUSH
7906: PPUSH
// if not observer or not unit then
7907: LD_VAR 0 1
7911: NOT
7912: PUSH
7913: LD_VAR 0 2
7917: NOT
7918: OR
7919: IFFALSE 7923
// exit ;
7921: GO 7971
// if not See ( GetSide ( observer ) , unit ) then
7923: LD_VAR 0 1
7927: PPUSH
7928: CALL_OW 255
7932: PPUSH
7933: LD_VAR 0 2
7937: PPUSH
7938: CALL_OW 292
7942: NOT
7943: IFFALSE 7947
// exit ;
7945: GO 7971
// result := GetDistUnits ( observer , unit ) < 12 ;
7947: LD_ADDR_VAR 0 3
7951: PUSH
7952: LD_VAR 0 1
7956: PPUSH
7957: LD_VAR 0 2
7961: PPUSH
7962: CALL_OW 296
7966: PUSH
7967: LD_INT 12
7969: LESS
7970: ST_TO_ADDR
// end ;
7971: LD_VAR 0 3
7975: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
7976: LD_INT 0
7978: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
7979: LD_VAR 0 2
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PPUSH
7988: LD_VAR 0 2
7992: PUSH
7993: LD_INT 2
7995: ARRAY
7996: PPUSH
7997: CALL_OW 488
8001: PUSH
8002: LD_VAR 0 2
8006: PUSH
8007: LD_INT 1
8009: ARRAY
8010: PPUSH
8011: LD_VAR 0 2
8015: PUSH
8016: LD_INT 2
8018: ARRAY
8019: PPUSH
8020: CALL_OW 428
8024: PUSH
8025: LD_INT 0
8027: EQUAL
8028: AND
8029: IFFALSE 8063
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_VAR 0 2
8040: PUSH
8041: LD_INT 1
8043: ARRAY
8044: PPUSH
8045: LD_VAR 0 2
8049: PUSH
8050: LD_INT 2
8052: ARRAY
8053: PPUSH
8054: LD_VAR 0 3
8058: PPUSH
8059: CALL_OW 48
// end ;
8063: LD_VAR 0 4
8067: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
8068: LD_INT 0
8070: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
8071: LD_VAR 0 1
8075: PPUSH
8076: LD_VAR 0 2
8080: PPUSH
8081: LD_VAR 0 3
8085: PPUSH
8086: LD_VAR 0 4
8090: PPUSH
8091: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
8095: LD_VAR 0 1
8099: PPUSH
8100: LD_VAR 0 2
8104: PPUSH
8105: LD_VAR 0 3
8109: PPUSH
8110: CALL_OW 331
// end ;
8114: LD_VAR 0 5
8118: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
8119: LD_INT 0
8121: PPUSH
// if not units then
8122: LD_VAR 0 1
8126: NOT
8127: IFFALSE 8131
// exit ;
8129: GO 8214
// result := true ;
8131: LD_ADDR_VAR 0 4
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
8139: LD_VAR 0 1
8143: PPUSH
8144: LD_INT 26
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PPUSH
8154: CALL_OW 72
8158: PUSH
8159: LD_INT 1
8161: ARRAY
8162: PPUSH
8163: LD_VAR 0 2
8167: PPUSH
8168: CALL_OW 88
8172: NOT
8173: IFFALSE 8214
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
8175: LD_ADDR_VAR 0 4
8179: PUSH
8180: LD_VAR 0 1
8184: PPUSH
8185: LD_INT 26
8187: PUSH
8188: LD_INT 2
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 72
8199: PUSH
8200: LD_INT 1
8202: ARRAY
8203: PPUSH
8204: LD_VAR 0 3
8208: PPUSH
8209: CALL_OW 88
8213: ST_TO_ADDR
// end ;
8214: LD_VAR 0 4
8218: RET
// export function SeeGroup ( side , group ) ; var i ; begin
8219: LD_INT 0
8221: PPUSH
8222: PPUSH
// if not group then
8223: LD_VAR 0 2
8227: NOT
8228: IFFALSE 8232
// exit ;
8230: GO 8277
// for i in group do
8232: LD_ADDR_VAR 0 4
8236: PUSH
8237: LD_VAR 0 2
8241: PUSH
8242: FOR_IN
8243: IFFALSE 8275
// if See ( side , i ) then
8245: LD_VAR 0 1
8249: PPUSH
8250: LD_VAR 0 4
8254: PPUSH
8255: CALL_OW 292
8259: IFFALSE 8273
// begin result := true ;
8261: LD_ADDR_VAR 0 3
8265: PUSH
8266: LD_INT 1
8268: ST_TO_ADDR
// exit ;
8269: POP
8270: POP
8271: GO 8277
// end ;
8273: GO 8242
8275: POP
8276: POP
// end ; end_of_file
8277: LD_VAR 0 3
8281: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
8282: LD_INT 0
8284: PPUSH
8285: PPUSH
8286: PPUSH
8287: PPUSH
8288: PPUSH
8289: PPUSH
8290: PPUSH
// uc_side := 3 ;
8291: LD_ADDR_OWVAR 20
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// uc_nation := 3 ;
8299: LD_ADDR_OWVAR 21
8303: PUSH
8304: LD_INT 3
8306: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
8307: LD_ADDR_EXP 49
8311: PUSH
8312: LD_STRING Morozov
8314: PPUSH
8315: CALL_OW 25
8319: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
8320: LD_EXP 49
8324: PPUSH
8325: LD_INT 52
8327: PPUSH
8328: CALL_OW 52
// if not gaidarKilled then
8332: LD_EXP 7
8336: NOT
8337: IFFALSE 8370
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
8339: LD_ADDR_EXP 50
8343: PUSH
8344: LD_STRING Gaydar
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: LD_STRING 
8352: PPUSH
8353: CALL 25695 0 3
8357: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
8358: LD_EXP 50
8362: PPUSH
8363: LD_INT 52
8365: PPUSH
8366: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
8370: LD_INT 52
8372: PPUSH
8373: LD_STRING lenin
8375: PPUSH
8376: CALL_OW 500
// ruOutsiders := [ ] ;
8380: LD_ADDR_EXP 52
8384: PUSH
8385: EMPTY
8386: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
8387: LD_ADDR_EXP 54
8391: PUSH
8392: EMPTY
8393: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
8394: LD_ADDR_EXP 55
8398: PUSH
8399: EMPTY
8400: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
8401: LD_ADDR_EXP 56
8405: PUSH
8406: EMPTY
8407: ST_TO_ADDR
// ruAttackers := [ ] ;
8408: LD_ADDR_EXP 57
8412: PUSH
8413: EMPTY
8414: ST_TO_ADDR
// waveStrength := 0 ;
8415: LD_ADDR_EXP 58
8419: PUSH
8420: LD_INT 0
8422: ST_TO_ADDR
// if not gaidarKilled then
8423: LD_EXP 7
8427: NOT
8428: IFFALSE 8438
// waveStrength := 2 ;
8430: LD_ADDR_EXP 58
8434: PUSH
8435: LD_INT 2
8437: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
8438: LD_ADDR_VAR 0 7
8442: PUSH
8443: LD_INT 22
8445: PUSH
8446: LD_INT 3
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: LD_INT 21
8455: PUSH
8456: LD_INT 3
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PPUSH
8467: CALL_OW 69
8471: ST_TO_ADDR
// for i in tmp do
8472: LD_ADDR_VAR 0 2
8476: PUSH
8477: LD_VAR 0 7
8481: PUSH
8482: FOR_IN
8483: IFFALSE 8520
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8485: LD_VAR 0 2
8489: PPUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 6
8495: PUSH
8496: LD_INT 7
8498: PUSH
8499: LD_INT 8
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: PUSH
8508: LD_OWVAR 67
8512: ARRAY
8513: PPUSH
8514: CALL_OW 241
8518: GO 8482
8520: POP
8521: POP
// for i := 1 to 3 do
8522: LD_ADDR_VAR 0 2
8526: PUSH
8527: DOUBLE
8528: LD_INT 1
8530: DEC
8531: ST_TO_ADDR
8532: LD_INT 3
8534: PUSH
8535: FOR_TO
8536: IFFALSE 8574
// begin PrepareHuman ( false , 1 , 0 ) ;
8538: LD_INT 0
8540: PPUSH
8541: LD_INT 1
8543: PPUSH
8544: LD_INT 0
8546: PPUSH
8547: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
8551: CALL_OW 44
8555: PPUSH
8556: LD_INT 75
8558: PPUSH
8559: LD_INT 49
8561: PPUSH
8562: LD_INT 3
8564: PPUSH
8565: LD_INT 0
8567: PPUSH
8568: CALL_OW 50
// end ;
8572: GO 8535
8574: POP
8575: POP
// for i := 1 to 4 do
8576: LD_ADDR_VAR 0 2
8580: PUSH
8581: DOUBLE
8582: LD_INT 1
8584: DEC
8585: ST_TO_ADDR
8586: LD_INT 4
8588: PUSH
8589: FOR_TO
8590: IFFALSE 8636
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
8592: LD_INT 0
8594: PPUSH
8595: LD_INT 1
8597: PPUSH
8598: LD_INT 2
8600: PPUSH
8601: CALL_OW 12
8605: PPUSH
8606: LD_INT 0
8608: PPUSH
8609: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
8613: CALL_OW 44
8617: PPUSH
8618: LD_INT 330
8620: PPUSH
8621: LD_INT 231
8623: PPUSH
8624: LD_INT 5
8626: PPUSH
8627: LD_INT 0
8629: PPUSH
8630: CALL_OW 50
// end ;
8634: GO 8589
8636: POP
8637: POP
// hc_class := 1 ;
8638: LD_ADDR_OWVAR 28
8642: PUSH
8643: LD_INT 1
8645: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
8646: CALL_OW 44
8650: PPUSH
8651: LD_INT 324
8653: PPUSH
8654: LD_INT 219
8656: PPUSH
8657: CALL_OW 428
8661: PPUSH
8662: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
8666: CALL_OW 44
8670: PPUSH
8671: LD_INT 316
8673: PPUSH
8674: LD_INT 223
8676: PPUSH
8677: CALL_OW 428
8681: PPUSH
8682: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
8686: LD_ADDR_VAR 0 7
8690: PUSH
8691: LD_INT 172
8693: PPUSH
8694: LD_INT 198
8696: PPUSH
8697: CALL_OW 428
8701: PPUSH
8702: CALL_OW 274
8706: PUSH
8707: LD_INT 189
8709: PPUSH
8710: LD_INT 156
8712: PPUSH
8713: CALL_OW 428
8717: PPUSH
8718: CALL_OW 274
8722: PUSH
8723: LD_INT 341
8725: PPUSH
8726: LD_INT 232
8728: PPUSH
8729: CALL_OW 428
8733: PPUSH
8734: CALL_OW 274
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: ST_TO_ADDR
// for i in tmp do
8744: LD_ADDR_VAR 0 2
8748: PUSH
8749: LD_VAR 0 7
8753: PUSH
8754: FOR_IN
8755: IFFALSE 8789
// begin SetResourceType ( i , mat_cans , 200 ) ;
8757: LD_VAR 0 2
8761: PPUSH
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 200
8767: PPUSH
8768: CALL_OW 277
// SetResourceType ( i , mat_oil , 200 ) ;
8772: LD_VAR 0 2
8776: PPUSH
8777: LD_INT 2
8779: PPUSH
8780: LD_INT 200
8782: PPUSH
8783: CALL_OW 277
// end ;
8787: GO 8754
8789: POP
8790: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
8791: LD_ADDR_VAR 0 7
8795: PUSH
8796: LD_INT 177
8798: PUSH
8799: LD_INT 114
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 138
8808: PUSH
8809: LD_INT 96
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: ST_TO_ADDR
// for i := 1 to tmp do
8820: LD_ADDR_VAR 0 2
8824: PUSH
8825: DOUBLE
8826: LD_INT 1
8828: DEC
8829: ST_TO_ADDR
8830: LD_VAR 0 7
8834: PUSH
8835: FOR_TO
8836: IFFALSE 8919
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
8838: LD_INT 0
8840: PPUSH
8841: LD_INT 9
8843: PPUSH
8844: LD_INT 6
8846: PPUSH
8847: CALL_OW 380
// un := CreateHuman ;
8851: LD_ADDR_VAR 0 5
8855: PUSH
8856: CALL_OW 44
8860: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8861: LD_VAR 0 5
8865: PPUSH
8866: LD_INT 2
8868: PPUSH
8869: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
8873: LD_VAR 0 5
8877: PPUSH
8878: LD_VAR 0 7
8882: PUSH
8883: LD_VAR 0 2
8887: ARRAY
8888: PUSH
8889: LD_INT 1
8891: ARRAY
8892: PPUSH
8893: LD_VAR 0 7
8897: PUSH
8898: LD_VAR 0 2
8902: ARRAY
8903: PUSH
8904: LD_INT 2
8906: ARRAY
8907: PPUSH
8908: CALL_OW 428
8912: PPUSH
8913: CALL_OW 52
// end ;
8917: GO 8835
8919: POP
8920: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
8921: LD_ADDR_VAR 0 7
8925: PUSH
8926: LD_INT 198
8928: PUSH
8929: LD_INT 158
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 203
8938: PUSH
8939: LD_INT 166
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 181
8948: PUSH
8949: LD_INT 209
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 178
8958: PUSH
8959: LD_INT 196
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 181
8968: PUSH
8969: LD_INT 212
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: ST_TO_ADDR
// for i := 1 to tmp do
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: DOUBLE
8989: LD_INT 1
8991: DEC
8992: ST_TO_ADDR
8993: LD_VAR 0 7
8997: PUSH
8998: FOR_TO
8999: IFFALSE 9120
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
9001: LD_INT 0
9003: PPUSH
9004: LD_INT 1
9006: PPUSH
9007: LD_INT 4
9009: PUSH
9010: LD_INT 5
9012: PUSH
9013: LD_INT 6
9015: PUSH
9016: LD_INT 7
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: PUSH
9025: LD_OWVAR 67
9029: ARRAY
9030: PPUSH
9031: CALL_OW 380
// un := CreateHuman ;
9035: LD_ADDR_VAR 0 5
9039: PUSH
9040: CALL_OW 44
9044: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
9045: LD_ADDR_VAR 0 4
9049: PUSH
9050: LD_VAR 0 7
9054: PUSH
9055: LD_VAR 0 2
9059: ARRAY
9060: PUSH
9061: LD_INT 1
9063: ARRAY
9064: PPUSH
9065: LD_VAR 0 7
9069: PUSH
9070: LD_VAR 0 2
9074: ARRAY
9075: PUSH
9076: LD_INT 2
9078: ARRAY
9079: PPUSH
9080: CALL_OW 428
9084: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
9085: LD_VAR 0 5
9089: PPUSH
9090: LD_VAR 0 4
9094: PPUSH
9095: CALL 58411 0 1
9099: PPUSH
9100: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
9104: LD_VAR 0 5
9108: PPUSH
9109: LD_VAR 0 4
9113: PPUSH
9114: CALL_OW 52
// end ;
9118: GO 8998
9120: POP
9121: POP
// for i := 1 to 3 do
9122: LD_ADDR_VAR 0 2
9126: PUSH
9127: DOUBLE
9128: LD_INT 1
9130: DEC
9131: ST_TO_ADDR
9132: LD_INT 3
9134: PUSH
9135: FOR_TO
9136: IFFALSE 9191
// begin InitHc ;
9138: CALL_OW 19
// uc_nation := 0 ;
9142: LD_ADDR_OWVAR 21
9146: PUSH
9147: LD_INT 0
9149: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
9150: LD_ADDR_OWVAR 28
9154: PUSH
9155: LD_INT 16
9157: ST_TO_ADDR
// un := CreateHuman ;
9158: LD_ADDR_VAR 0 5
9162: PUSH
9163: CALL_OW 44
9167: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
9168: LD_VAR 0 5
9172: PPUSH
9173: LD_INT 194
9175: PPUSH
9176: LD_INT 164
9178: PPUSH
9179: LD_INT 6
9181: PPUSH
9182: LD_INT 0
9184: PPUSH
9185: CALL_OW 50
// end ;
9189: GO 9135
9191: POP
9192: POP
// uc_nation := 3 ;
9193: LD_ADDR_OWVAR 21
9197: PUSH
9198: LD_INT 3
9200: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
9201: LD_INT 24
9203: PPUSH
9204: LD_INT 1
9206: PPUSH
9207: LD_INT 1
9209: PPUSH
9210: LD_INT 44
9212: PPUSH
9213: LD_INT 10
9215: PPUSH
9216: CALL 30710 0 5
// un := CreateVehicle ;
9220: LD_ADDR_VAR 0 5
9224: PUSH
9225: CALL_OW 45
9229: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 162 , 1 , false ) ;
9230: LD_VAR 0 5
9234: PPUSH
9235: LD_INT 199
9237: PPUSH
9238: LD_INT 162
9240: PPUSH
9241: LD_INT 1
9243: PPUSH
9244: LD_INT 0
9246: PPUSH
9247: CALL 65284 0 5
// ComHold ( un ) ;
9251: LD_VAR 0 5
9255: PPUSH
9256: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
9260: LD_INT 0
9262: PPUSH
9263: LD_INT 3
9265: PPUSH
9266: LD_INT 4
9268: PPUSH
9269: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
9273: CALL_OW 44
9277: PPUSH
9278: LD_VAR 0 5
9282: PPUSH
9283: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
9287: LD_INT 24
9289: PPUSH
9290: LD_INT 1
9292: PPUSH
9293: LD_INT 1
9295: PPUSH
9296: LD_INT 45
9298: PPUSH
9299: LD_INT 10
9301: PPUSH
9302: CALL 30710 0 5
// un := CreateVehicle ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: CALL_OW 45
9315: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
9316: LD_VAR 0 5
9320: PPUSH
9321: LD_INT 129
9323: PPUSH
9324: LD_INT 93
9326: PPUSH
9327: LD_INT 1
9329: PPUSH
9330: LD_INT 0
9332: PPUSH
9333: CALL 65284 0 5
// ComHold ( un ) ;
9337: LD_VAR 0 5
9341: PPUSH
9342: CALL_OW 140
// if Difficulty > 1 then
9346: LD_OWVAR 67
9350: PUSH
9351: LD_INT 1
9353: GREATER
9354: IFFALSE 9528
// begin PrepareHuman ( false , 3 , 4 ) ;
9356: LD_INT 0
9358: PPUSH
9359: LD_INT 3
9361: PPUSH
9362: LD_INT 4
9364: PPUSH
9365: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
9369: CALL_OW 44
9373: PPUSH
9374: LD_VAR 0 5
9378: PPUSH
9379: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
9383: LD_INT 24
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: LD_INT 1
9391: PPUSH
9392: LD_INT 45
9394: PPUSH
9395: LD_INT 10
9397: PPUSH
9398: CALL 30710 0 5
// un := CreateVehicle ;
9402: LD_ADDR_VAR 0 5
9406: PUSH
9407: CALL_OW 45
9411: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 92 , 2 , false ) ;
9412: LD_VAR 0 5
9416: PPUSH
9417: LD_INT 134
9419: PPUSH
9420: LD_INT 92
9422: PPUSH
9423: LD_INT 2
9425: PPUSH
9426: LD_INT 0
9428: PPUSH
9429: CALL 65284 0 5
// ComHold ( un ) ;
9433: LD_VAR 0 5
9437: PPUSH
9438: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
9442: LD_INT 0
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 4
9450: PPUSH
9451: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
9455: CALL_OW 44
9459: PPUSH
9460: LD_VAR 0 5
9464: PPUSH
9465: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
9469: LD_INT 24
9471: PPUSH
9472: LD_INT 1
9474: PPUSH
9475: LD_INT 1
9477: PPUSH
9478: LD_INT 45
9480: PPUSH
9481: LD_INT 10
9483: PPUSH
9484: CALL 30710 0 5
// un := CreateVehicle ;
9488: LD_ADDR_VAR 0 5
9492: PUSH
9493: CALL_OW 45
9497: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
9498: LD_VAR 0 5
9502: PPUSH
9503: LD_INT 200
9505: PPUSH
9506: LD_INT 173
9508: PPUSH
9509: LD_INT 1
9511: PPUSH
9512: LD_INT 0
9514: PPUSH
9515: CALL 65284 0 5
// ComHold ( un ) ;
9519: LD_VAR 0 5
9523: PPUSH
9524: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
9528: LD_INT 0
9530: PPUSH
9531: LD_INT 3
9533: PPUSH
9534: LD_INT 4
9536: PPUSH
9537: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
9541: CALL_OW 44
9545: PPUSH
9546: LD_VAR 0 5
9550: PPUSH
9551: CALL_OW 52
// bc_type := b_armoury ;
9555: LD_ADDR_OWVAR 42
9559: PUSH
9560: LD_INT 4
9562: ST_TO_ADDR
// if Difficulty > 1 then
9563: LD_OWVAR 67
9567: PUSH
9568: LD_INT 1
9570: GREATER
9571: IFFALSE 9581
// bc_type := b_barracks ;
9573: LD_ADDR_OWVAR 42
9577: PUSH
9578: LD_INT 5
9580: ST_TO_ADDR
// bc_level := 6 ;
9581: LD_ADDR_OWVAR 43
9585: PUSH
9586: LD_INT 6
9588: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
9589: LD_INT 120
9591: PPUSH
9592: LD_INT 100
9594: PPUSH
9595: LD_INT 5
9597: PPUSH
9598: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
9602: LD_ADDR_VAR 0 2
9606: PUSH
9607: DOUBLE
9608: LD_INT 1
9610: DEC
9611: ST_TO_ADDR
9612: LD_INT 3
9614: PUSH
9615: LD_INT 3
9617: PUSH
9618: LD_INT 4
9620: PUSH
9621: LD_INT 4
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: LD_OWVAR 67
9634: ARRAY
9635: PUSH
9636: FOR_TO
9637: IFFALSE 9695
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
9639: LD_INT 0
9641: PPUSH
9642: LD_INT 1
9644: PUSH
9645: LD_INT 1
9647: PUSH
9648: LD_INT 9
9650: PUSH
9651: LD_INT 9
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: LD_OWVAR 67
9664: ARRAY
9665: PPUSH
9666: LD_INT 5
9668: PPUSH
9669: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
9673: CALL_OW 44
9677: PPUSH
9678: LD_INT 120
9680: PPUSH
9681: LD_INT 100
9683: PPUSH
9684: CALL_OW 428
9688: PPUSH
9689: CALL_OW 52
// end ;
9693: GO 9636
9695: POP
9696: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
9697: LD_ADDR_VAR 0 7
9701: PUSH
9702: LD_INT 135
9704: PUSH
9705: LD_INT 100
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 137
9714: PUSH
9715: LD_INT 92
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// for i := 1 to tmp do
9726: LD_ADDR_VAR 0 2
9730: PUSH
9731: DOUBLE
9732: LD_INT 1
9734: DEC
9735: ST_TO_ADDR
9736: LD_VAR 0 7
9740: PUSH
9741: FOR_TO
9742: IFFALSE 9912
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
9744: LD_INT 22
9746: PUSH
9747: LD_INT 22
9749: PUSH
9750: LD_INT 24
9752: PUSH
9753: LD_INT 24
9755: PUSH
9756: LD_INT 24
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: PUSH
9766: LD_OWVAR 67
9770: PUSH
9771: LD_INT 0
9773: PPUSH
9774: LD_INT 1
9776: PPUSH
9777: CALL_OW 12
9781: PLUS
9782: ARRAY
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: LD_INT 44
9792: PPUSH
9793: LD_INT 25
9795: PPUSH
9796: CALL 30710 0 5
// veh := CreateVehicle ;
9800: LD_ADDR_VAR 0 6
9804: PUSH
9805: CALL_OW 45
9809: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9810: LD_VAR 0 6
9814: PPUSH
9815: LD_INT 2
9817: PPUSH
9818: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
9822: LD_VAR 0 6
9826: PPUSH
9827: LD_VAR 0 7
9831: PUSH
9832: LD_VAR 0 2
9836: ARRAY
9837: PUSH
9838: LD_INT 1
9840: ARRAY
9841: PPUSH
9842: LD_VAR 0 7
9846: PUSH
9847: LD_VAR 0 2
9851: ARRAY
9852: PUSH
9853: LD_INT 2
9855: ARRAY
9856: PPUSH
9857: LD_INT 0
9859: PPUSH
9860: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
9864: LD_INT 0
9866: PPUSH
9867: LD_INT 3
9869: PPUSH
9870: LD_INT 6
9872: PPUSH
9873: CALL_OW 380
// un := CreateHuman ;
9877: LD_ADDR_VAR 0 5
9881: PUSH
9882: CALL_OW 44
9886: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9887: LD_VAR 0 5
9891: PPUSH
9892: LD_VAR 0 6
9896: PPUSH
9897: CALL_OW 52
// ComHold ( veh ) ;
9901: LD_VAR 0 6
9905: PPUSH
9906: CALL_OW 140
// end ;
9910: GO 9741
9912: POP
9913: POP
// tmp := [ 191 , 122 ] ;
9914: LD_ADDR_VAR 0 7
9918: PUSH
9919: LD_INT 191
9921: PUSH
9922: LD_INT 122
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
9929: LD_INT 24
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: LD_INT 1
9937: PPUSH
9938: LD_INT 44
9940: PPUSH
9941: LD_INT 30
9943: PPUSH
9944: CALL 30710 0 5
// ruBlockadeTank := CreateVehicle ;
9948: LD_ADDR_EXP 51
9952: PUSH
9953: CALL_OW 45
9957: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
9958: LD_EXP 51
9962: PPUSH
9963: LD_INT 2
9965: PPUSH
9966: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
9970: LD_EXP 51
9974: PPUSH
9975: LD_INT 191
9977: PPUSH
9978: LD_INT 122
9980: PPUSH
9981: LD_INT 0
9983: PPUSH
9984: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
9988: LD_INT 1
9990: PPUSH
9991: LD_INT 5
9993: PUSH
9994: LD_INT 6
9996: PUSH
9997: LD_INT 7
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: PUSH
10005: LD_OWVAR 67
10009: PUSH
10010: LD_INT 1
10012: MINUS
10013: ARRAY
10014: PPUSH
10015: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
10019: CALL_OW 44
10023: PPUSH
10024: LD_EXP 51
10028: PPUSH
10029: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
10033: LD_EXP 51
10037: PPUSH
10038: CALL_OW 140
// ruBlockadeSquad := [ ] ;
10042: LD_ADDR_EXP 53
10046: PUSH
10047: EMPTY
10048: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 6 , 6 ] [ Difficulty ] do
10049: LD_ADDR_VAR 0 2
10053: PUSH
10054: DOUBLE
10055: LD_INT 1
10057: DEC
10058: ST_TO_ADDR
10059: LD_INT 3
10061: PUSH
10062: LD_INT 4
10064: PUSH
10065: LD_INT 6
10067: PUSH
10068: LD_INT 6
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: PUSH
10077: LD_OWVAR 67
10081: ARRAY
10082: PUSH
10083: FOR_TO
10084: IFFALSE 10200
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
10086: LD_INT 0
10088: PPUSH
10089: LD_INT 1
10091: PPUSH
10092: LD_INT 4
10094: PUSH
10095: LD_INT 5
10097: PUSH
10098: LD_INT 6
10100: PUSH
10101: LD_INT 7
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: LD_OWVAR 67
10114: ARRAY
10115: PPUSH
10116: CALL_OW 380
// un := CreateHuman ;
10120: LD_ADDR_VAR 0 5
10124: PUSH
10125: CALL_OW 44
10129: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
10130: LD_VAR 0 5
10134: PPUSH
10135: LD_INT 9
10137: PPUSH
10138: LD_INT 0
10140: PPUSH
10141: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
10145: LD_VAR 0 5
10149: PPUSH
10150: LD_INT 198
10152: PPUSH
10153: LD_INT 129
10155: PPUSH
10156: CALL_OW 118
// AddComCrawl ( un ) ;
10160: LD_VAR 0 5
10164: PPUSH
10165: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
10169: LD_ADDR_EXP 53
10173: PUSH
10174: LD_EXP 53
10178: PPUSH
10179: LD_EXP 53
10183: PUSH
10184: LD_INT 1
10186: PLUS
10187: PPUSH
10188: LD_VAR 0 5
10192: PPUSH
10193: CALL_OW 1
10197: ST_TO_ADDR
// end ;
10198: GO 10083
10200: POP
10201: POP
// PrepareHuman ( false , 4 , 5 ) ;
10202: LD_INT 0
10204: PPUSH
10205: LD_INT 4
10207: PPUSH
10208: LD_INT 5
10210: PPUSH
10211: CALL_OW 380
// un := CreateHuman ;
10215: LD_ADDR_VAR 0 5
10219: PUSH
10220: CALL_OW 44
10224: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
10225: LD_VAR 0 5
10229: PPUSH
10230: LD_INT 179
10232: PPUSH
10233: LD_INT 113
10235: PPUSH
10236: LD_INT 0
10238: PPUSH
10239: CALL_OW 48
// ComHold ( un ) ;
10243: LD_VAR 0 5
10247: PPUSH
10248: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
10252: LD_ADDR_EXP 53
10256: PUSH
10257: LD_EXP 53
10261: PPUSH
10262: LD_EXP 53
10266: PUSH
10267: LD_INT 1
10269: PLUS
10270: PPUSH
10271: LD_VAR 0 5
10275: PPUSH
10276: CALL_OW 1
10280: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
10281: LD_ADDR_VAR 0 7
10285: PUSH
10286: LD_INT 167
10288: PPUSH
10289: LD_INT 243
10291: PPUSH
10292: CALL_OW 428
10296: PPUSH
10297: CALL_OW 274
10301: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
10302: LD_VAR 0 7
10306: PPUSH
10307: LD_INT 1
10309: PPUSH
10310: LD_INT 1000
10312: PPUSH
10313: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
10317: LD_VAR 0 7
10321: PPUSH
10322: LD_INT 2
10324: PPUSH
10325: LD_INT 400
10327: PPUSH
10328: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
10332: LD_ADDR_VAR 0 7
10336: PUSH
10337: LD_INT 169
10339: PPUSH
10340: LD_INT 229
10342: PPUSH
10343: CALL_OW 428
10347: ST_TO_ADDR
// for i := 1 to 3 do
10348: LD_ADDR_VAR 0 2
10352: PUSH
10353: DOUBLE
10354: LD_INT 1
10356: DEC
10357: ST_TO_ADDR
10358: LD_INT 3
10360: PUSH
10361: FOR_TO
10362: IFFALSE 10453
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10364: LD_INT 0
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: LD_INT 4
10372: PUSH
10373: LD_INT 5
10375: PUSH
10376: LD_INT 5
10378: PUSH
10379: LD_INT 6
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: PUSH
10388: LD_OWVAR 67
10392: ARRAY
10393: PPUSH
10394: CALL_OW 380
// un := CreateHuman ;
10398: LD_ADDR_VAR 0 5
10402: PUSH
10403: CALL_OW 44
10407: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
10408: LD_VAR 0 5
10412: PPUSH
10413: LD_VAR 0 7
10417: PPUSH
10418: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
10422: LD_ADDR_EXP 54
10426: PUSH
10427: LD_EXP 54
10431: PPUSH
10432: LD_EXP 54
10436: PUSH
10437: LD_INT 1
10439: PLUS
10440: PPUSH
10441: LD_VAR 0 5
10445: PPUSH
10446: CALL_OW 1
10450: ST_TO_ADDR
// end ;
10451: GO 10361
10453: POP
10454: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
10455: LD_ADDR_VAR 0 7
10459: PUSH
10460: LD_INT 165
10462: PUSH
10463: LD_INT 227
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PUSH
10470: LD_INT 173
10472: PUSH
10473: LD_INT 231
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: ST_TO_ADDR
// for i := 1 to tmp do
10484: LD_ADDR_VAR 0 2
10488: PUSH
10489: DOUBLE
10490: LD_INT 1
10492: DEC
10493: ST_TO_ADDR
10494: LD_VAR 0 7
10498: PUSH
10499: FOR_TO
10500: IFFALSE 10621
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
10502: LD_INT 0
10504: PPUSH
10505: LD_INT 1
10507: PPUSH
10508: LD_INT 4
10510: PUSH
10511: LD_INT 5
10513: PUSH
10514: LD_INT 5
10516: PUSH
10517: LD_INT 6
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PUSH
10526: LD_OWVAR 67
10530: ARRAY
10531: PPUSH
10532: CALL_OW 380
// un := CreateHuman ;
10536: LD_ADDR_VAR 0 5
10540: PUSH
10541: CALL_OW 44
10545: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
10546: LD_VAR 0 5
10550: PPUSH
10551: LD_VAR 0 7
10555: PUSH
10556: LD_VAR 0 2
10560: ARRAY
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PPUSH
10566: LD_VAR 0 7
10570: PUSH
10571: LD_VAR 0 2
10575: ARRAY
10576: PUSH
10577: LD_INT 2
10579: ARRAY
10580: PPUSH
10581: CALL_OW 428
10585: PPUSH
10586: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
10590: LD_ADDR_EXP 54
10594: PUSH
10595: LD_EXP 54
10599: PPUSH
10600: LD_EXP 54
10604: PUSH
10605: LD_INT 1
10607: PLUS
10608: PPUSH
10609: LD_VAR 0 5
10613: PPUSH
10614: CALL_OW 1
10618: ST_TO_ADDR
// end ;
10619: GO 10499
10621: POP
10622: POP
// for i := 1 to 2 do
10623: LD_ADDR_VAR 0 2
10627: PUSH
10628: DOUBLE
10629: LD_INT 1
10631: DEC
10632: ST_TO_ADDR
10633: LD_INT 2
10635: PUSH
10636: FOR_TO
10637: IFFALSE 10692
// begin InitHc ;
10639: CALL_OW 19
// uc_nation := 0 ;
10643: LD_ADDR_OWVAR 21
10647: PUSH
10648: LD_INT 0
10650: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
10651: LD_ADDR_OWVAR 28
10655: PUSH
10656: LD_INT 16
10658: ST_TO_ADDR
// un := CreateHuman ;
10659: LD_ADDR_VAR 0 5
10663: PUSH
10664: CALL_OW 44
10668: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
10669: LD_VAR 0 5
10673: PPUSH
10674: LD_INT 166
10676: PPUSH
10677: LD_INT 233
10679: PPUSH
10680: LD_INT 2
10682: PPUSH
10683: LD_INT 0
10685: PPUSH
10686: CALL_OW 50
// end ;
10690: GO 10636
10692: POP
10693: POP
// uc_nation := 3 ;
10694: LD_ADDR_OWVAR 21
10698: PUSH
10699: LD_INT 3
10701: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
10702: LD_ADDR_VAR 0 7
10706: PUSH
10707: LD_INT 71
10709: PUSH
10710: LD_INT 52
10712: PUSH
10713: LD_INT 11
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: LIST
10720: ST_TO_ADDR
// for i in tmp do
10721: LD_ADDR_VAR 0 2
10725: PUSH
10726: LD_VAR 0 7
10730: PUSH
10731: FOR_IN
10732: IFFALSE 10776
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL_OW 274
10743: PPUSH
10744: LD_INT 1
10746: PPUSH
10747: LD_INT 3000
10749: PPUSH
10750: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
10754: LD_VAR 0 2
10758: PPUSH
10759: CALL_OW 274
10763: PPUSH
10764: LD_INT 2
10766: PPUSH
10767: LD_INT 600
10769: PPUSH
10770: CALL_OW 277
// end ;
10774: GO 10731
10776: POP
10777: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
10778: LD_ADDR_VAR 0 7
10782: PUSH
10783: LD_INT 41
10785: PUSH
10786: LD_INT 57
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 38
10795: PUSH
10796: LD_INT 55
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 50
10805: PUSH
10806: LD_INT 73
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 51
10815: PUSH
10816: LD_INT 65
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 82
10825: PUSH
10826: LD_INT 93
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 87
10835: PUSH
10836: LD_INT 100
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 91
10845: PUSH
10846: LD_INT 109
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 84
10855: PUSH
10856: LD_INT 120
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 113
10865: PUSH
10866: LD_INT 153
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 123
10875: PUSH
10876: LD_INT 171
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 125
10885: PUSH
10886: LD_INT 178
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 125
10895: PUSH
10896: LD_INT 188
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 125
10905: PUSH
10906: LD_INT 201
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 33
10915: PUSH
10916: LD_INT 60
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 76
10925: PUSH
10926: LD_INT 95
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 84
10935: PUSH
10936: LD_INT 111
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 112
10945: PUSH
10946: LD_INT 165
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: ST_TO_ADDR
// for i := 1 to tmp do
10972: LD_ADDR_VAR 0 2
10976: PUSH
10977: DOUBLE
10978: LD_INT 1
10980: DEC
10981: ST_TO_ADDR
10982: LD_VAR 0 7
10986: PUSH
10987: FOR_TO
10988: IFFALSE 11235
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
10990: LD_ADDR_VAR 0 4
10994: PUSH
10995: LD_VAR 0 7
10999: PUSH
11000: LD_VAR 0 2
11004: ARRAY
11005: PUSH
11006: LD_INT 1
11008: ARRAY
11009: PPUSH
11010: LD_VAR 0 7
11014: PUSH
11015: LD_VAR 0 2
11019: ARRAY
11020: PUSH
11021: LD_INT 2
11023: ARRAY
11024: PPUSH
11025: CALL_OW 428
11029: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
11030: LD_VAR 0 4
11034: PPUSH
11035: CALL_OW 266
11039: PUSH
11040: LD_INT 4
11042: PUSH
11043: LD_INT 5
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: IN
11050: IFFALSE 11134
// begin for j := 1 to Difficulty do
11052: LD_ADDR_VAR 0 3
11056: PUSH
11057: DOUBLE
11058: LD_INT 1
11060: DEC
11061: ST_TO_ADDR
11062: LD_OWVAR 67
11066: PUSH
11067: FOR_TO
11068: IFFALSE 11130
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11070: LD_INT 0
11072: PPUSH
11073: LD_INT 1
11075: PPUSH
11076: LD_INT 4
11078: PUSH
11079: LD_INT 5
11081: PUSH
11082: LD_INT 5
11084: PUSH
11085: LD_INT 6
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: LD_OWVAR 67
11098: ARRAY
11099: PPUSH
11100: CALL_OW 380
// un := CreateHuman ;
11104: LD_ADDR_VAR 0 5
11108: PUSH
11109: CALL_OW 44
11113: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
11114: LD_VAR 0 5
11118: PPUSH
11119: LD_VAR 0 4
11123: PPUSH
11124: CALL_OW 52
// end ;
11128: GO 11067
11130: POP
11131: POP
// end else
11132: GO 11204
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11134: LD_INT 0
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: LD_INT 4
11142: PUSH
11143: LD_INT 5
11145: PUSH
11146: LD_INT 5
11148: PUSH
11149: LD_INT 6
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: PUSH
11158: LD_OWVAR 67
11162: ARRAY
11163: PPUSH
11164: CALL_OW 380
// un := CreateHuman ;
11168: LD_ADDR_VAR 0 5
11172: PUSH
11173: CALL_OW 44
11177: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
11178: LD_VAR 0 5
11182: PPUSH
11183: LD_VAR 0 4
11187: PPUSH
11188: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
11192: LD_VAR 0 5
11196: PPUSH
11197: LD_INT 9
11199: PPUSH
11200: CALL_OW 336
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11204: LD_ADDR_EXP 55
11208: PUSH
11209: LD_EXP 55
11213: PPUSH
11214: LD_EXP 55
11218: PUSH
11219: LD_INT 1
11221: PLUS
11222: PPUSH
11223: LD_VAR 0 5
11227: PPUSH
11228: CALL_OW 1
11232: ST_TO_ADDR
// end ;
11233: GO 10987
11235: POP
11236: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
11237: LD_ADDR_VAR 0 4
11241: PUSH
11242: LD_INT 10
11244: PPUSH
11245: LD_INT 22
11247: PUSH
11248: LD_INT 3
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 30
11257: PUSH
11258: LD_INT 32
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 58
11267: PUSH
11268: EMPTY
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 70
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11416
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
11284: LD_INT 40
11286: PUSH
11287: LD_INT 50
11289: PUSH
11290: LD_INT 75
11292: PUSH
11293: LD_INT 80
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: LD_OWVAR 67
11306: ARRAY
11307: PUSH
11308: LD_EXP 7
11312: PUSH
11313: LD_INT 10
11315: MUL
11316: MINUS
11317: PPUSH
11318: CALL_OW 13
11322: NOT
11323: IFFALSE 11327
// continue ;
11325: GO 11281
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11327: LD_INT 0
11329: PPUSH
11330: LD_INT 1
11332: PPUSH
11333: LD_INT 4
11335: PUSH
11336: LD_INT 5
11338: PUSH
11339: LD_INT 5
11341: PUSH
11342: LD_INT 6
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: PUSH
11351: LD_OWVAR 67
11355: ARRAY
11356: PPUSH
11357: CALL_OW 380
// un := CreateHuman ;
11361: LD_ADDR_VAR 0 5
11365: PUSH
11366: CALL_OW 44
11370: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
11371: LD_VAR 0 5
11375: PPUSH
11376: LD_VAR 0 4
11380: PPUSH
11381: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11385: LD_ADDR_EXP 55
11389: PUSH
11390: LD_EXP 55
11394: PPUSH
11395: LD_EXP 55
11399: PUSH
11400: LD_INT 1
11402: PLUS
11403: PPUSH
11404: LD_VAR 0 5
11408: PPUSH
11409: CALL_OW 1
11413: ST_TO_ADDR
// end ;
11414: GO 11281
11416: POP
11417: POP
// for i := 1 to 5 do
11418: LD_ADDR_VAR 0 2
11422: PUSH
11423: DOUBLE
11424: LD_INT 1
11426: DEC
11427: ST_TO_ADDR
11428: LD_INT 5
11430: PUSH
11431: FOR_TO
11432: IFFALSE 11530
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11434: LD_INT 0
11436: PPUSH
11437: LD_INT 2
11439: PPUSH
11440: LD_INT 4
11442: PUSH
11443: LD_INT 5
11445: PUSH
11446: LD_INT 5
11448: PUSH
11449: LD_INT 6
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: PUSH
11458: LD_OWVAR 67
11462: ARRAY
11463: PPUSH
11464: CALL_OW 380
// un := CreateHuman ;
11468: LD_ADDR_VAR 0 5
11472: PUSH
11473: CALL_OW 44
11477: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
11478: LD_VAR 0 5
11482: PPUSH
11483: LD_INT 66
11485: PPUSH
11486: LD_INT 101
11488: PPUSH
11489: LD_INT 3
11491: PPUSH
11492: LD_INT 0
11494: PPUSH
11495: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11499: LD_ADDR_EXP 55
11503: PUSH
11504: LD_EXP 55
11508: PPUSH
11509: LD_EXP 55
11513: PUSH
11514: LD_INT 1
11516: PLUS
11517: PPUSH
11518: LD_VAR 0 5
11522: PPUSH
11523: CALL_OW 1
11527: ST_TO_ADDR
// end ;
11528: GO 11431
11530: POP
11531: POP
// tmp := [ ruFac1 , ruFac2 ] ;
11532: LD_ADDR_VAR 0 7
11536: PUSH
11537: LD_INT 72
11539: PUSH
11540: LD_INT 12
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: ST_TO_ADDR
// for i := 1 to tmp do
11547: LD_ADDR_VAR 0 2
11551: PUSH
11552: DOUBLE
11553: LD_INT 1
11555: DEC
11556: ST_TO_ADDR
11557: LD_VAR 0 7
11561: PUSH
11562: FOR_TO
11563: IFFALSE 11680
// for j := 1 to 6 do
11565: LD_ADDR_VAR 0 3
11569: PUSH
11570: DOUBLE
11571: LD_INT 1
11573: DEC
11574: ST_TO_ADDR
11575: LD_INT 6
11577: PUSH
11578: FOR_TO
11579: IFFALSE 11676
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11581: LD_INT 0
11583: PPUSH
11584: LD_INT 3
11586: PPUSH
11587: LD_INT 4
11589: PUSH
11590: LD_INT 5
11592: PUSH
11593: LD_INT 5
11595: PUSH
11596: LD_INT 6
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: PUSH
11605: LD_OWVAR 67
11609: ARRAY
11610: PPUSH
11611: CALL_OW 380
// un := CreateHuman ;
11615: LD_ADDR_VAR 0 5
11619: PUSH
11620: CALL_OW 44
11624: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
11625: LD_VAR 0 5
11629: PPUSH
11630: LD_VAR 0 7
11634: PUSH
11635: LD_VAR 0 2
11639: ARRAY
11640: PPUSH
11641: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11645: LD_ADDR_EXP 55
11649: PUSH
11650: LD_EXP 55
11654: PPUSH
11655: LD_EXP 55
11659: PUSH
11660: LD_INT 1
11662: PLUS
11663: PPUSH
11664: LD_VAR 0 5
11668: PPUSH
11669: CALL_OW 1
11673: ST_TO_ADDR
// end ;
11674: GO 11578
11676: POP
11677: POP
11678: GO 11562
11680: POP
11681: POP
// for i := 1 to 3 do
11682: LD_ADDR_VAR 0 2
11686: PUSH
11687: DOUBLE
11688: LD_INT 1
11690: DEC
11691: ST_TO_ADDR
11692: LD_INT 3
11694: PUSH
11695: FOR_TO
11696: IFFALSE 11785
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
11698: LD_INT 0
11700: PPUSH
11701: LD_INT 4
11703: PPUSH
11704: LD_INT 4
11706: PUSH
11707: LD_INT 5
11709: PUSH
11710: LD_INT 5
11712: PUSH
11713: LD_INT 6
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: PUSH
11722: LD_OWVAR 67
11726: ARRAY
11727: PPUSH
11728: CALL_OW 380
// un := CreateHuman ;
11732: LD_ADDR_VAR 0 5
11736: PUSH
11737: CALL_OW 44
11741: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
11742: LD_VAR 0 5
11746: PPUSH
11747: LD_INT 17
11749: PPUSH
11750: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11754: LD_ADDR_EXP 55
11758: PUSH
11759: LD_EXP 55
11763: PPUSH
11764: LD_EXP 55
11768: PUSH
11769: LD_INT 1
11771: PLUS
11772: PPUSH
11773: LD_VAR 0 5
11777: PPUSH
11778: CALL_OW 1
11782: ST_TO_ADDR
// end ;
11783: GO 11695
11785: POP
11786: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
11787: LD_ADDR_VAR 0 2
11791: PUSH
11792: DOUBLE
11793: LD_INT 1
11795: DEC
11796: ST_TO_ADDR
11797: LD_INT 2
11799: PUSH
11800: LD_INT 3
11802: PUSH
11803: LD_INT 3
11805: PUSH
11806: LD_INT 3
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: PUSH
11815: LD_OWVAR 67
11819: ARRAY
11820: PUSH
11821: FOR_TO
11822: IFFALSE 11942
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
11824: LD_INT 22
11826: PPUSH
11827: LD_INT 1
11829: PPUSH
11830: LD_INT 1
11832: PPUSH
11833: LD_INT 52
11835: PPUSH
11836: LD_INT 100
11838: PPUSH
11839: CALL 30710 0 5
// veh := CreateVehicle ;
11843: LD_ADDR_VAR 0 6
11847: PUSH
11848: CALL_OW 45
11852: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
11853: LD_INT 0
11855: PPUSH
11856: LD_INT 3
11858: PPUSH
11859: LD_INT 4
11861: PPUSH
11862: CALL_OW 380
// un := CreateHuman ;
11866: LD_ADDR_VAR 0 5
11870: PUSH
11871: CALL_OW 44
11875: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
11876: LD_VAR 0 6
11880: PPUSH
11881: LD_INT 107
11883: PPUSH
11884: LD_INT 182
11886: PPUSH
11887: LD_INT 4
11889: PPUSH
11890: LD_INT 0
11892: PPUSH
11893: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11897: LD_VAR 0 5
11901: PPUSH
11902: LD_VAR 0 6
11906: PPUSH
11907: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
11911: LD_ADDR_EXP 55
11915: PUSH
11916: LD_EXP 55
11920: PPUSH
11921: LD_EXP 55
11925: PUSH
11926: LD_INT 1
11928: PLUS
11929: PPUSH
11930: LD_VAR 0 5
11934: PPUSH
11935: CALL_OW 1
11939: ST_TO_ADDR
// end ;
11940: GO 11821
11942: POP
11943: POP
// InitHc ;
11944: CALL_OW 19
// for i := 1 to [ 4 , 6 , 8 , 12 ] [ Difficulty ] do
11948: LD_ADDR_VAR 0 2
11952: PUSH
11953: DOUBLE
11954: LD_INT 1
11956: DEC
11957: ST_TO_ADDR
11958: LD_INT 4
11960: PUSH
11961: LD_INT 6
11963: PUSH
11964: LD_INT 8
11966: PUSH
11967: LD_INT 12
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: PUSH
11976: LD_OWVAR 67
11980: ARRAY
11981: PUSH
11982: FOR_TO
11983: IFFALSE 12078
// begin uc_nation := 0 ;
11985: LD_ADDR_OWVAR 21
11989: PUSH
11990: LD_INT 0
11992: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
11993: LD_ADDR_OWVAR 28
11997: PUSH
11998: LD_INT 15
12000: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
12001: LD_ADDR_OWVAR 31
12005: PUSH
12006: LD_INT 3
12008: PUSH
12009: LD_INT 0
12011: PUSH
12012: LD_INT 0
12014: PUSH
12015: LD_INT 0
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: ST_TO_ADDR
// un := CreateHuman ;
12024: LD_ADDR_VAR 0 5
12028: PUSH
12029: CALL_OW 44
12033: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
12034: LD_VAR 0 5
12038: PPUSH
12039: LD_INT 269
12041: PUSH
12042: LD_INT 300
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_VAR 0 2
12053: PUSH
12054: LD_INT 2
12056: MOD
12057: PUSH
12058: LD_INT 1
12060: PLUS
12061: ARRAY
12062: PPUSH
12063: LD_INT 182
12065: PPUSH
12066: LD_INT 4
12068: PPUSH
12069: LD_INT 0
12071: PPUSH
12072: CALL_OW 50
// end ;
12076: GO 11982
12078: POP
12079: POP
// uc_nation := 3 ;
12080: LD_ADDR_OWVAR 21
12084: PUSH
12085: LD_INT 3
12087: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
12088: LD_EXP 8
12092: PUSH
12093: LD_INT 10
12095: PUSH
12096: LD_INT 8
12098: PUSH
12099: LD_INT 6
12101: PUSH
12102: LD_INT 5
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: PUSH
12111: LD_OWVAR 67
12115: ARRAY
12116: LESS
12117: IFFALSE 12196
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
12119: LD_INT 21
12121: PPUSH
12122: LD_INT 1
12124: PPUSH
12125: LD_INT 1
12127: PPUSH
12128: LD_INT 51
12130: PPUSH
12131: LD_INT 12
12133: PPUSH
12134: CALL 30710 0 5
// veh := CreateVehicle ;
12138: LD_ADDR_VAR 0 6
12142: PUSH
12143: CALL_OW 45
12147: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
12148: LD_VAR 0 6
12152: PPUSH
12153: LD_INT 269
12155: PPUSH
12156: LD_INT 66
12158: PPUSH
12159: LD_INT 4
12161: PPUSH
12162: LD_INT 0
12164: PPUSH
12165: CALL 65284 0 5
// SetLives ( veh , 333 ) ;
12169: LD_VAR 0 6
12173: PPUSH
12174: LD_INT 333
12176: PPUSH
12177: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
12181: LD_VAR 0 6
12185: PPUSH
12186: LD_INT 2
12188: PPUSH
12189: LD_INT 100
12191: PPUSH
12192: CALL_OW 290
// end ; end ;
12196: LD_VAR 0 1
12200: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
12201: LD_EXP 51
12205: PUSH
12206: LD_EXP 51
12210: PPUSH
12211: CALL_OW 255
12215: PUSH
12216: LD_INT 3
12218: EQUAL
12219: AND
12220: IFFALSE 12383
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
// begin enable ;
12228: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
12229: LD_INT 81
12231: PUSH
12232: LD_INT 3
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 91
12241: PUSH
12242: LD_EXP 51
12246: PUSH
12247: LD_INT 15
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PPUSH
12259: CALL_OW 69
12263: IFFALSE 12343
// begin if not IsDrivenBy ( ruBlockadeTank ) then
12265: LD_EXP 51
12269: PPUSH
12270: CALL_OW 311
12274: NOT
12275: IFFALSE 12341
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
12277: LD_ADDR_VAR 0 1
12281: PUSH
12282: LD_INT 22
12284: PUSH
12285: LD_INT 3
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 21
12294: PUSH
12295: LD_INT 1
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PPUSH
12306: CALL_OW 69
12310: PPUSH
12311: LD_EXP 51
12315: PPUSH
12316: CALL_OW 74
12320: ST_TO_ADDR
// if driver then
12321: LD_VAR 0 1
12325: IFFALSE 12341
// ComEnterUnit ( driver , ruBlockadeTank ) ;
12327: LD_VAR 0 1
12331: PPUSH
12332: LD_EXP 51
12336: PPUSH
12337: CALL_OW 120
// end ; exit ;
12341: GO 12383
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
12343: LD_EXP 51
12347: PPUSH
12348: CALL_OW 256
12352: PUSH
12353: LD_INT 1000
12355: LESS
12356: PUSH
12357: LD_EXP 51
12361: PPUSH
12362: CALL_OW 311
12366: AND
12367: IFFALSE 12383
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
12369: LD_EXP 51
12373: PPUSH
12374: CALL_OW 311
12378: PPUSH
12379: CALL 64844 0 1
// end ;
12383: PPOPN 1
12385: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
12386: LD_EXP 53
12390: PPUSH
12391: LD_INT 3
12393: PUSH
12394: LD_INT 24
12396: PUSH
12397: LD_INT 1000
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PPUSH
12408: CALL_OW 72
12412: PUSH
12413: LD_EXP 53
12417: PPUSH
12418: LD_INT 25
12420: PUSH
12421: LD_INT 4
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 50
12430: PUSH
12431: EMPTY
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 72
12442: AND
12443: IFFALSE 12631
12445: GO 12447
12447: DISABLE
12448: LD_INT 0
12450: PPUSH
12451: PPUSH
12452: PPUSH
// begin enable ;
12453: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
12454: LD_ADDR_VAR 0 3
12458: PUSH
12459: LD_EXP 53
12463: PPUSH
12464: LD_INT 3
12466: PUSH
12467: LD_INT 24
12469: PUSH
12470: LD_INT 1000
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PPUSH
12481: CALL_OW 72
12485: PPUSH
12486: LD_INT 1
12488: PPUSH
12489: CALL 65084 0 2
12493: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
12494: LD_ADDR_VAR 0 2
12498: PUSH
12499: LD_EXP 53
12503: PPUSH
12504: LD_INT 25
12506: PUSH
12507: LD_INT 4
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 50
12516: PUSH
12517: EMPTY
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PPUSH
12524: CALL_OW 72
12528: PUSH
12529: LD_INT 1
12531: ARRAY
12532: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
12533: LD_VAR 0 2
12537: PPUSH
12538: LD_VAR 0 3
12542: PUSH
12543: LD_INT 1
12545: ARRAY
12546: PPUSH
12547: CALL 60430 0 2
12551: NOT
12552: IFFALSE 12631
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
12554: LD_VAR 0 3
12558: PUSH
12559: LD_INT 1
12561: ARRAY
12562: PPUSH
12563: LD_INT 9
12565: PPUSH
12566: CALL_OW 308
12570: NOT
12571: IFFALSE 12589
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
12573: LD_VAR 0 3
12577: PUSH
12578: LD_INT 1
12580: ARRAY
12581: PPUSH
12582: LD_INT 9
12584: PPUSH
12585: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
12589: LD_VAR 0 2
12593: PPUSH
12594: LD_VAR 0 3
12598: PUSH
12599: LD_INT 1
12601: ARRAY
12602: PPUSH
12603: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
12607: LD_VAR 0 2
12611: PPUSH
12612: LD_INT 179
12614: PPUSH
12615: LD_INT 113
12617: PPUSH
12618: CALL_OW 171
// AddComHold ( sci ) ;
12622: LD_VAR 0 2
12626: PPUSH
12627: CALL_OW 200
// end ; end ;
12631: PPOPN 3
12633: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
12634: LD_INT 2
12636: PPUSH
12637: LD_INT 52
12639: PPUSH
12640: CALL_OW 292
12644: IFFALSE 12749
12646: GO 12648
12648: DISABLE
12649: LD_INT 0
12651: PPUSH
12652: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: LD_EXP 55
12662: PPUSH
12663: LD_INT 25
12665: PUSH
12666: LD_INT 1
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: LD_INT 50
12675: PUSH
12676: EMPTY
12677: LIST
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PPUSH
12683: CALL_OW 72
12687: ST_TO_ADDR
// if not tmp then
12688: LD_VAR 0 2
12692: NOT
12693: IFFALSE 12697
// exit ;
12695: GO 12749
// for i in tmp do
12697: LD_ADDR_VAR 0 1
12701: PUSH
12702: LD_VAR 0 2
12706: PUSH
12707: FOR_IN
12708: IFFALSE 12747
// begin if IsInUnit ( i ) then
12710: LD_VAR 0 1
12714: PPUSH
12715: CALL_OW 310
12719: IFFALSE 12730
// ComExitBuilding ( i ) ;
12721: LD_VAR 0 1
12725: PPUSH
12726: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
12730: LD_VAR 0 1
12734: PPUSH
12735: LD_INT 84
12737: PPUSH
12738: LD_INT 133
12740: PPUSH
12741: CALL_OW 174
// end ;
12745: GO 12707
12747: POP
12748: POP
// end ;
12749: PPOPN 2
12751: END
// every 0 0$1 trigger leninSpotted do var i , tmp , weapon ;
12752: LD_EXP 14
12756: IFFALSE 12916
12758: GO 12760
12760: DISABLE
12761: LD_INT 0
12763: PPUSH
12764: PPUSH
12765: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
12766: LD_ADDR_VAR 0 2
12770: PUSH
12771: LD_INT 72
12773: PUSH
12774: LD_INT 12
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
12781: LD_ADDR_VAR 0 3
12785: PUSH
12786: LD_INT 44
12788: PUSH
12789: LD_INT 43
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 45
12798: PUSH
12799: LD_INT 44
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 45
12808: PUSH
12809: LD_INT 46
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: LD_INT 45
12818: PUSH
12819: LD_INT 46
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: PUSH
12832: LD_OWVAR 67
12836: ARRAY
12837: ST_TO_ADDR
// for i := 1 to 6 do
12838: LD_ADDR_VAR 0 1
12842: PUSH
12843: DOUBLE
12844: LD_INT 1
12846: DEC
12847: ST_TO_ADDR
12848: LD_INT 6
12850: PUSH
12851: FOR_TO
12852: IFFALSE 12914
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
12854: LD_VAR 0 2
12858: PPUSH
12859: LD_INT 22
12861: PUSH
12862: LD_INT 23
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_VAR 0 1
12873: PUSH
12874: LD_INT 2
12876: MOD
12877: PUSH
12878: LD_INT 1
12880: PLUS
12881: ARRAY
12882: PPUSH
12883: LD_INT 1
12885: PPUSH
12886: LD_INT 1
12888: PPUSH
12889: LD_VAR 0 3
12893: PUSH
12894: LD_VAR 0 1
12898: PUSH
12899: LD_INT 2
12901: MOD
12902: PUSH
12903: LD_INT 1
12905: PLUS
12906: ARRAY
12907: PPUSH
12908: CALL_OW 185
12912: GO 12851
12914: POP
12915: POP
// end ;
12916: PPOPN 3
12918: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
12919: LD_EXP 11
12923: IFFALSE 14072
12925: GO 12927
12927: DISABLE
12928: LD_INT 0
12930: PPUSH
12931: PPUSH
12932: PPUSH
12933: PPUSH
12934: PPUSH
12935: PPUSH
// begin enable ;
12936: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
12937: LD_ADDR_VAR 0 6
12941: PUSH
12942: LD_INT 10
12944: PPUSH
12945: LD_INT 81
12947: PUSH
12948: LD_INT 3
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PPUSH
12955: CALL_OW 70
12959: ST_TO_ADDR
// if ruSpecialVehicleGroup then
12960: LD_EXP 56
12964: IFFALSE 13230
// begin for i in ruSpecialVehicleGroup do
12966: LD_ADDR_VAR 0 1
12970: PUSH
12971: LD_EXP 56
12975: PUSH
12976: FOR_IN
12977: IFFALSE 13228
// begin if enemyInBase then
12979: LD_VAR 0 6
12983: IFFALSE 13226
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
12985: LD_VAR 0 1
12989: PPUSH
12990: CALL_OW 256
12994: PUSH
12995: LD_INT 500
12997: GREATER
12998: PUSH
12999: LD_VAR 0 1
13003: PPUSH
13004: CALL_OW 110
13008: PUSH
13009: LD_INT 0
13011: EQUAL
13012: AND
13013: IFFALSE 13039
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
13015: LD_VAR 0 1
13019: PPUSH
13020: LD_VAR 0 6
13024: PPUSH
13025: LD_VAR 0 1
13029: PPUSH
13030: CALL_OW 74
13034: PPUSH
13035: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13039: LD_VAR 0 1
13043: PPUSH
13044: CALL_OW 256
13048: PUSH
13049: LD_INT 500
13051: LESSEQUAL
13052: PUSH
13053: LD_VAR 0 1
13057: PPUSH
13058: CALL_OW 110
13062: PUSH
13063: LD_INT 0
13065: EQUAL
13066: AND
13067: IFFALSE 13096
// begin SetTag ( i , 1 ) ;
13069: LD_VAR 0 1
13073: PPUSH
13074: LD_INT 1
13076: PPUSH
13077: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
13081: LD_VAR 0 1
13085: PPUSH
13086: LD_INT 83
13088: PPUSH
13089: LD_INT 134
13091: PPUSH
13092: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
13096: LD_VAR 0 1
13100: PPUSH
13101: CALL_OW 256
13105: PUSH
13106: LD_INT 1000
13108: LESS
13109: PUSH
13110: LD_VAR 0 1
13114: PPUSH
13115: CALL_OW 110
13119: PUSH
13120: LD_INT 1
13122: EQUAL
13123: AND
13124: PUSH
13125: LD_VAR 0 1
13129: PPUSH
13130: LD_INT 83
13132: PPUSH
13133: LD_INT 134
13135: PPUSH
13136: CALL_OW 297
13140: PUSH
13141: LD_INT 6
13143: LESS
13144: AND
13145: IFFALSE 13173
// begin SetFuel ( i , 100 ) ;
13147: LD_VAR 0 1
13151: PPUSH
13152: LD_INT 100
13154: PPUSH
13155: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
13159: LD_VAR 0 1
13163: PPUSH
13164: CALL_OW 310
13168: PPUSH
13169: CALL 64964 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
13173: LD_VAR 0 1
13177: PPUSH
13178: CALL_OW 256
13182: PUSH
13183: LD_INT 1000
13185: EQUAL
13186: PUSH
13187: LD_VAR 0 1
13191: PPUSH
13192: CALL_OW 110
13196: PUSH
13197: LD_INT 1
13199: EQUAL
13200: AND
13201: PUSH
13202: LD_VAR 0 1
13206: PPUSH
13207: CALL_OW 311
13211: AND
13212: IFFALSE 13226
// SetTag ( i , 0 ) ;
13214: LD_VAR 0 1
13218: PPUSH
13219: LD_INT 0
13221: PPUSH
13222: CALL_OW 109
// end ; end ;
13226: GO 12976
13228: POP
13229: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
13230: LD_ADDR_VAR 0 5
13234: PUSH
13235: LD_EXP 55
13239: PPUSH
13240: LD_INT 25
13242: PUSH
13243: LD_INT 4
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PPUSH
13250: CALL_OW 72
13254: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13255: LD_ADDR_VAR 0 4
13259: PUSH
13260: LD_EXP 55
13264: PPUSH
13265: LD_INT 92
13267: PUSH
13268: LD_INT 92
13270: PUSH
13271: LD_INT 155
13273: PUSH
13274: LD_INT 12
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 3
13285: PUSH
13286: LD_INT 24
13288: PUSH
13289: LD_INT 1000
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 72
13308: ST_TO_ADDR
// if sci then
13309: LD_VAR 0 5
13313: IFFALSE 13446
// begin if hurt then
13315: LD_VAR 0 4
13319: IFFALSE 13392
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
13321: LD_VAR 0 5
13325: PPUSH
13326: LD_INT 3
13328: PUSH
13329: LD_INT 54
13331: PUSH
13332: EMPTY
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PPUSH
13339: CALL_OW 72
13343: IFFALSE 13372
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
13345: LD_VAR 0 5
13349: PPUSH
13350: LD_INT 3
13352: PUSH
13353: LD_INT 54
13355: PUSH
13356: EMPTY
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PPUSH
13363: CALL_OW 72
13367: PPUSH
13368: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
13372: LD_VAR 0 5
13376: PPUSH
13377: LD_VAR 0 4
13381: PUSH
13382: LD_INT 1
13384: ARRAY
13385: PPUSH
13386: CALL_OW 188
// end else
13390: GO 13446
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
13392: LD_VAR 0 5
13396: PPUSH
13397: LD_INT 3
13399: PUSH
13400: LD_INT 54
13402: PUSH
13403: EMPTY
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 72
13414: IFFALSE 13446
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
13416: LD_VAR 0 5
13420: PPUSH
13421: LD_INT 3
13423: PUSH
13424: LD_INT 54
13426: PUSH
13427: EMPTY
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 72
13438: PPUSH
13439: LD_INT 17
13441: PPUSH
13442: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13446: LD_ADDR_VAR 0 3
13450: PUSH
13451: LD_INT 10
13453: PPUSH
13454: LD_INT 21
13456: PUSH
13457: LD_INT 3
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 3
13466: PUSH
13467: LD_INT 24
13469: PUSH
13470: LD_INT 1000
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PPUSH
13485: CALL_OW 70
13489: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
13490: LD_ADDR_VAR 0 2
13494: PUSH
13495: LD_EXP 55
13499: PPUSH
13500: LD_INT 25
13502: PUSH
13503: LD_INT 2
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PPUSH
13510: CALL_OW 72
13514: PUSH
13515: LD_INT 22
13517: PUSH
13518: LD_INT 3
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 34
13527: PUSH
13528: LD_INT 52
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 69
13543: UNION
13544: ST_TO_ADDR
// if not tmp then
13545: LD_VAR 0 2
13549: NOT
13550: IFFALSE 13554
// exit ;
13552: GO 14072
// for i in tmp do
13554: LD_ADDR_VAR 0 1
13558: PUSH
13559: LD_VAR 0 2
13563: PUSH
13564: FOR_IN
13565: IFFALSE 14070
// begin if GetClass ( i ) = 2 then
13567: LD_VAR 0 1
13571: PPUSH
13572: CALL_OW 257
13576: PUSH
13577: LD_INT 2
13579: EQUAL
13580: IFFALSE 13803
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13582: LD_VAR 0 1
13586: PPUSH
13587: CALL_OW 256
13591: PUSH
13592: LD_INT 1000
13594: EQUAL
13595: PUSH
13596: LD_VAR 0 1
13600: PPUSH
13601: CALL_OW 110
13605: PUSH
13606: LD_INT 1
13608: EQUAL
13609: AND
13610: IFFALSE 13624
// SetTag ( i , 0 ) ;
13612: LD_VAR 0 1
13616: PPUSH
13617: LD_INT 0
13619: PPUSH
13620: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13624: LD_VAR 0 1
13628: PPUSH
13629: CALL_OW 256
13633: PUSH
13634: LD_INT 500
13636: LESSEQUAL
13637: PUSH
13638: LD_VAR 0 1
13642: PPUSH
13643: CALL_OW 110
13647: PUSH
13648: LD_INT 0
13650: EQUAL
13651: AND
13652: IFFALSE 13681
// begin SetTag ( i , 1 ) ;
13654: LD_VAR 0 1
13658: PPUSH
13659: LD_INT 1
13661: PPUSH
13662: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
13666: LD_VAR 0 1
13670: PPUSH
13671: LD_INT 92
13673: PPUSH
13674: LD_INT 155
13676: PPUSH
13677: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
13681: LD_VAR 0 3
13685: PUSH
13686: LD_VAR 0 1
13690: PPUSH
13691: CALL_OW 256
13695: PUSH
13696: LD_INT 500
13698: GREATER
13699: AND
13700: PUSH
13701: LD_VAR 0 1
13705: PPUSH
13706: CALL_OW 110
13710: PUSH
13711: LD_INT 0
13713: EQUAL
13714: AND
13715: PUSH
13716: LD_VAR 0 1
13720: PPUSH
13721: CALL_OW 314
13725: NOT
13726: AND
13727: IFFALSE 13801
// begin if b then
13729: LD_VAR 0 3
13733: IFFALSE 13765
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
13735: LD_VAR 0 1
13739: PPUSH
13740: LD_VAR 0 3
13744: PUSH
13745: LD_INT 1
13747: PPUSH
13748: LD_VAR 0 3
13752: PPUSH
13753: CALL_OW 12
13757: ARRAY
13758: PPUSH
13759: CALL_OW 130
13763: GO 13801
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
13765: LD_VAR 0 1
13769: PPUSH
13770: LD_INT 94
13772: PPUSH
13773: LD_INT 165
13775: PPUSH
13776: CALL_OW 297
13780: PUSH
13781: LD_INT 8
13783: GREATER
13784: IFFALSE 13801
// ComMoveXY ( i , 94 , 165 ) ;
13786: LD_VAR 0 1
13790: PPUSH
13791: LD_INT 94
13793: PPUSH
13794: LD_INT 165
13796: PPUSH
13797: CALL_OW 111
// end ; end else
13801: GO 14068
// if GetWeapon ( i ) = ru_crane then
13803: LD_VAR 0 1
13807: PPUSH
13808: CALL_OW 264
13812: PUSH
13813: LD_INT 52
13815: EQUAL
13816: IFFALSE 14068
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
13818: LD_VAR 0 1
13822: PPUSH
13823: CALL_OW 256
13827: PUSH
13828: LD_INT 1000
13830: EQUAL
13831: PUSH
13832: LD_VAR 0 1
13836: PPUSH
13837: CALL_OW 110
13841: PUSH
13842: LD_INT 1
13844: EQUAL
13845: AND
13846: IFFALSE 13872
// begin SetTag ( i , 0 ) ;
13848: LD_VAR 0 1
13852: PPUSH
13853: LD_INT 0
13855: PPUSH
13856: CALL_OW 109
// SetFuel ( i , 100 ) ;
13860: LD_VAR 0 1
13864: PPUSH
13865: LD_INT 100
13867: PPUSH
13868: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 256
13881: PUSH
13882: LD_INT 500
13884: LESSEQUAL
13885: PUSH
13886: LD_VAR 0 1
13890: PPUSH
13891: CALL_OW 110
13895: PUSH
13896: LD_INT 0
13898: EQUAL
13899: AND
13900: IFFALSE 13943
// begin SetTag ( i , 1 ) ;
13902: LD_VAR 0 1
13906: PPUSH
13907: LD_INT 1
13909: PPUSH
13910: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
13914: LD_VAR 0 1
13918: PPUSH
13919: LD_INT 83
13921: PPUSH
13922: LD_INT 135
13924: PPUSH
13925: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
13929: LD_VAR 0 1
13933: PPUSH
13934: CALL_OW 310
13938: PPUSH
13939: CALL 64964 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
13943: LD_VAR 0 1
13947: PPUSH
13948: CALL_OW 256
13952: PUSH
13953: LD_INT 500
13955: GREATER
13956: PUSH
13957: LD_VAR 0 1
13961: PPUSH
13962: CALL_OW 110
13966: PUSH
13967: LD_INT 0
13969: EQUAL
13970: AND
13971: PUSH
13972: LD_VAR 0 1
13976: PPUSH
13977: CALL_OW 311
13981: AND
13982: PUSH
13983: LD_VAR 0 1
13987: PPUSH
13988: CALL_OW 314
13992: NOT
13993: AND
13994: IFFALSE 14068
// begin if b then
13996: LD_VAR 0 3
14000: IFFALSE 14032
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
14002: LD_VAR 0 1
14006: PPUSH
14007: LD_VAR 0 3
14011: PUSH
14012: LD_INT 1
14014: PPUSH
14015: LD_VAR 0 3
14019: PPUSH
14020: CALL_OW 12
14024: ARRAY
14025: PPUSH
14026: CALL_OW 130
14030: GO 14068
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
14032: LD_VAR 0 1
14036: PPUSH
14037: LD_INT 94
14039: PPUSH
14040: LD_INT 165
14042: PPUSH
14043: CALL_OW 297
14047: PUSH
14048: LD_INT 8
14050: GREATER
14051: IFFALSE 14068
// ComMoveXY ( i , 94 , 165 ) ;
14053: LD_VAR 0 1
14057: PPUSH
14058: LD_INT 94
14060: PPUSH
14061: LD_INT 165
14063: PPUSH
14064: CALL_OW 111
// end ; end ; end ;
14068: GO 13564
14070: POP
14071: POP
// end ;
14072: PPOPN 6
14074: END
// every 8 8$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp ;
14075: LD_EXP 23
14079: NOT
14080: PUSH
14081: LD_EXP 27
14085: NOT
14086: AND
14087: IFFALSE 15003
14089: GO 14091
14091: DISABLE
14092: LD_INT 0
14094: PPUSH
14095: PPUSH
14096: PPUSH
14097: PPUSH
// begin enable ;
14098: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
14099: LD_INT 35
14101: PUSH
14102: LD_INT 45
14104: PUSH
14105: LD_INT 55
14107: PUSH
14108: LD_INT 60
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: PUSH
14117: LD_OWVAR 67
14121: ARRAY
14122: PPUSH
14123: CALL_OW 13
14127: IFFALSE 14143
// waveStrength := waveStrength + 1 ;
14129: LD_ADDR_EXP 58
14133: PUSH
14134: LD_EXP 58
14138: PUSH
14139: LD_INT 1
14141: PLUS
14142: ST_TO_ADDR
// if waveStrength > [ 4 , 5 , 6 , 7 ] [ Difficulty ] then
14143: LD_EXP 58
14147: PUSH
14148: LD_INT 4
14150: PUSH
14151: LD_INT 5
14153: PUSH
14154: LD_INT 6
14156: PUSH
14157: LD_INT 7
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: PUSH
14166: LD_OWVAR 67
14170: ARRAY
14171: GREATER
14172: IFFALSE 14205
// begin waveStrength := waveStrength + Difficulty ;
14174: LD_ADDR_EXP 58
14178: PUSH
14179: LD_EXP 58
14183: PUSH
14184: LD_OWVAR 67
14188: PLUS
14189: ST_TO_ADDR
// disableAttackOnHeike := true ;
14190: LD_ADDR_EXP 27
14194: PUSH
14195: LD_INT 1
14197: ST_TO_ADDR
// wait ( 3 3$00 ) ;
14198: LD_INT 6300
14200: PPUSH
14201: CALL_OW 67
// end ; if disableAttackOnHeike and Difficulty > 1 then
14205: LD_EXP 27
14209: PUSH
14210: LD_OWVAR 67
14214: PUSH
14215: LD_INT 1
14217: GREATER
14218: AND
14219: IFFALSE 14428
// begin for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
14221: LD_ADDR_VAR 0 1
14225: PUSH
14226: DOUBLE
14227: LD_INT 1
14229: DEC
14230: ST_TO_ADDR
14231: LD_INT 3
14233: PUSH
14234: LD_INT 3
14236: PUSH
14237: LD_INT 4
14239: PUSH
14240: LD_INT 4
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: PUSH
14249: LD_OWVAR 67
14253: ARRAY
14254: PUSH
14255: FOR_TO
14256: IFFALSE 14426
// begin InitHc ;
14258: CALL_OW 19
// InitVc ;
14262: CALL_OW 20
// uc_side := 3 ;
14266: LD_ADDR_OWVAR 20
14270: PUSH
14271: LD_INT 3
14273: ST_TO_ADDR
// uc_nation := 3 ;
14274: LD_ADDR_OWVAR 21
14278: PUSH
14279: LD_INT 3
14281: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
14282: LD_INT 0
14284: PPUSH
14285: LD_INT 1
14287: PPUSH
14288: LD_OWVAR 67
14292: PUSH
14293: LD_INT 2
14295: PLUS
14296: PPUSH
14297: CALL_OW 380
// un := CreateHuman ;
14301: LD_ADDR_VAR 0 2
14305: PUSH
14306: CALL_OW 44
14310: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
14311: LD_VAR 0 2
14315: PPUSH
14316: LD_INT 160
14318: PPUSH
14319: LD_INT 3
14321: PPUSH
14322: LD_INT 2
14324: PPUSH
14325: LD_INT 0
14327: PPUSH
14328: CALL 65284 0 5
// SetClass ( un , class_bazooker ) ;
14332: LD_VAR 0 2
14336: PPUSH
14337: LD_INT 9
14339: PPUSH
14340: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14344: LD_ADDR_EXP 57
14348: PUSH
14349: LD_EXP 57
14353: PPUSH
14354: LD_EXP 57
14358: PUSH
14359: LD_INT 1
14361: PLUS
14362: PPUSH
14363: LD_VAR 0 2
14367: PPUSH
14368: CALL_OW 1
14372: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
14373: LD_VAR 0 2
14377: PPUSH
14378: LD_INT 177
14380: PPUSH
14381: LD_INT 17
14383: PPUSH
14384: CALL_OW 111
// wait ( 0 0$2 ) ;
14388: LD_INT 70
14390: PPUSH
14391: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14395: LD_ADDR_VAR 0 4
14399: PUSH
14400: LD_VAR 0 4
14404: PPUSH
14405: LD_VAR 0 4
14409: PUSH
14410: LD_INT 1
14412: PLUS
14413: PPUSH
14414: LD_VAR 0 2
14418: PPUSH
14419: CALL_OW 1
14423: ST_TO_ADDR
// end ;
14424: GO 14255
14426: POP
14427: POP
// end ; for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] + waveStrength do
14428: LD_ADDR_VAR 0 1
14432: PUSH
14433: DOUBLE
14434: LD_INT 1
14436: DEC
14437: ST_TO_ADDR
14438: LD_INT 2
14440: PUSH
14441: LD_INT 3
14443: PUSH
14444: LD_INT 4
14446: PUSH
14447: LD_INT 5
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: PUSH
14456: LD_OWVAR 67
14460: ARRAY
14461: PUSH
14462: LD_EXP 58
14466: PLUS
14467: PUSH
14468: FOR_TO
14469: IFFALSE 14778
// begin InitHc ;
14471: CALL_OW 19
// InitVc ;
14475: CALL_OW 20
// uc_side := 3 ;
14479: LD_ADDR_OWVAR 20
14483: PUSH
14484: LD_INT 3
14486: ST_TO_ADDR
// uc_nation := 3 ;
14487: LD_ADDR_OWVAR 21
14491: PUSH
14492: LD_INT 3
14494: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
14495: LD_INT 22
14497: PUSH
14498: LD_INT 23
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 1
14507: PPUSH
14508: LD_INT 2
14510: PPUSH
14511: CALL_OW 12
14515: ARRAY
14516: PPUSH
14517: LD_INT 1
14519: PPUSH
14520: LD_INT 1
14522: PPUSH
14523: LD_INT 44
14525: PUSH
14526: LD_INT 45
14528: PUSH
14529: LD_INT 43
14531: PUSH
14532: LD_INT 42
14534: PUSH
14535: LD_INT 44
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 1
14547: PPUSH
14548: LD_INT 5
14550: PPUSH
14551: CALL_OW 12
14555: ARRAY
14556: PPUSH
14557: LD_INT 99
14559: PPUSH
14560: CALL 30710 0 5
// veh := CreateVehicle ;
14564: LD_ADDR_VAR 0 3
14568: PUSH
14569: CALL_OW 45
14573: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
14574: LD_VAR 0 3
14578: PPUSH
14579: LD_INT 160
14581: PPUSH
14582: LD_INT 3
14584: PPUSH
14585: LD_INT 2
14587: PPUSH
14588: LD_INT 0
14590: PPUSH
14591: CALL 65284 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
14595: LD_ADDR_EXP 57
14599: PUSH
14600: LD_EXP 57
14604: PPUSH
14605: LD_EXP 57
14609: PUSH
14610: LD_INT 1
14612: PLUS
14613: PPUSH
14614: LD_VAR 0 3
14618: PPUSH
14619: CALL_OW 1
14623: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
14624: LD_INT 0
14626: PPUSH
14627: LD_INT 3
14629: PPUSH
14630: LD_OWVAR 67
14634: PUSH
14635: LD_INT 2
14637: PLUS
14638: PPUSH
14639: CALL_OW 380
// un := CreateHuman ;
14643: LD_ADDR_VAR 0 2
14647: PUSH
14648: CALL_OW 44
14652: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14653: LD_VAR 0 2
14657: PPUSH
14658: LD_VAR 0 3
14662: PPUSH
14663: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
14667: LD_ADDR_EXP 57
14671: PUSH
14672: LD_EXP 57
14676: PPUSH
14677: LD_EXP 57
14681: PUSH
14682: LD_INT 1
14684: PLUS
14685: PPUSH
14686: LD_VAR 0 2
14690: PPUSH
14691: CALL_OW 1
14695: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
14696: LD_VAR 0 2
14700: PPUSH
14701: LD_INT 177
14703: PPUSH
14704: LD_INT 17
14706: PPUSH
14707: CALL_OW 111
// wait ( 0 0$2 ) ;
14711: LD_INT 70
14713: PPUSH
14714: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
14718: LD_ADDR_VAR 0 4
14722: PUSH
14723: LD_VAR 0 4
14727: PPUSH
14728: LD_VAR 0 4
14732: PUSH
14733: LD_INT 1
14735: PLUS
14736: PPUSH
14737: LD_VAR 0 3
14741: PPUSH
14742: CALL_OW 1
14746: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
14747: LD_ADDR_VAR 0 4
14751: PUSH
14752: LD_VAR 0 4
14756: PPUSH
14757: LD_VAR 0 4
14761: PUSH
14762: LD_INT 1
14764: PLUS
14765: PPUSH
14766: LD_VAR 0 2
14770: PPUSH
14771: CALL_OW 1
14775: ST_TO_ADDR
// end ;
14776: GO 14468
14778: POP
14779: POP
// for i in tmp do
14780: LD_ADDR_VAR 0 1
14784: PUSH
14785: LD_VAR 0 4
14789: PUSH
14790: FOR_IN
14791: IFFALSE 14881
// begin if Prob ( 50 ) then
14793: LD_INT 50
14795: PPUSH
14796: CALL_OW 13
14800: IFFALSE 14819
// ComAgressiveMove ( i , 206 , 73 ) else
14802: LD_VAR 0 1
14806: PPUSH
14807: LD_INT 206
14809: PPUSH
14810: LD_INT 73
14812: PPUSH
14813: CALL_OW 114
14817: GO 14879
// begin ComAgressiveMove ( i , 206 , 73 ) ;
14819: LD_VAR 0 1
14823: PPUSH
14824: LD_INT 206
14826: PPUSH
14827: LD_INT 73
14829: PPUSH
14830: CALL_OW 114
// AddComAgressiveMove ( i , 257 , 105 ) ;
14834: LD_VAR 0 1
14838: PPUSH
14839: LD_INT 257
14841: PPUSH
14842: LD_INT 105
14844: PPUSH
14845: CALL_OW 174
// AddComAgressiveMove ( i , 227 , 97 ) ;
14849: LD_VAR 0 1
14853: PPUSH
14854: LD_INT 227
14856: PPUSH
14857: LD_INT 97
14859: PPUSH
14860: CALL_OW 174
// AddComAgressiveMove ( i , 206 , 73 ) ;
14864: LD_VAR 0 1
14868: PPUSH
14869: LD_INT 206
14871: PPUSH
14872: LD_INT 73
14874: PPUSH
14875: CALL_OW 174
// end ; end ;
14879: GO 14790
14881: POP
14882: POP
// repeat wait ( 0 0$1 ) ;
14883: LD_INT 35
14885: PPUSH
14886: CALL_OW 67
// for i in tmp do
14890: LD_ADDR_VAR 0 1
14894: PUSH
14895: LD_VAR 0 4
14899: PUSH
14900: FOR_IN
14901: IFFALSE 14980
// if IsDead ( i ) then
14903: LD_VAR 0 1
14907: PPUSH
14908: CALL_OW 301
14912: IFFALSE 14932
// tmp := tmp diff i else
14914: LD_ADDR_VAR 0 4
14918: PUSH
14919: LD_VAR 0 4
14923: PUSH
14924: LD_VAR 0 1
14928: DIFF
14929: ST_TO_ADDR
14930: GO 14978
// if not HasTask ( i ) then
14932: LD_VAR 0 1
14936: PPUSH
14937: CALL_OW 314
14941: NOT
14942: IFFALSE 14978
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
14944: LD_VAR 0 1
14948: PPUSH
14949: LD_INT 81
14951: PUSH
14952: LD_INT 3
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: PPUSH
14964: LD_VAR 0 1
14968: PPUSH
14969: CALL_OW 74
14973: PPUSH
14974: CALL_OW 115
14978: GO 14900
14980: POP
14981: POP
// until not tmp ;
14982: LD_VAR 0 4
14986: NOT
14987: IFFALSE 14883
// if firstAttack then
14989: LD_EXP 28
14993: IFFALSE 15003
// firstAttack := false ;
14995: LD_ADDR_EXP 28
14999: PUSH
15000: LD_INT 0
15002: ST_TO_ADDR
// end ;
15003: PPOPN 4
15005: END
// every 8 8$00 trigger not omarAttack and bergkampfArrived and not rolfHasVehicles do var i , un , veh , tmp ;
15006: LD_EXP 23
15010: NOT
15011: PUSH
15012: LD_EXP 3
15016: AND
15017: PUSH
15018: LD_EXP 16
15022: NOT
15023: AND
15024: IFFALSE 15864
15026: GO 15028
15028: DISABLE
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
15033: PPUSH
15034: PPUSH
// begin enable ;
15035: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15036: LD_ADDR_VAR 0 1
15040: PUSH
15041: DOUBLE
15042: LD_INT 1
15044: DEC
15045: ST_TO_ADDR
15046: LD_INT 1
15048: PUSH
15049: LD_INT 2
15051: PUSH
15052: LD_INT 2
15054: PUSH
15055: LD_INT 3
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: PUSH
15064: LD_OWVAR 67
15068: ARRAY
15069: PUSH
15070: FOR_TO
15071: IFFALSE 15372
// begin InitHc ;
15073: CALL_OW 19
// InitVc ;
15077: CALL_OW 20
// uc_side := 3 ;
15081: LD_ADDR_OWVAR 20
15085: PUSH
15086: LD_INT 3
15088: ST_TO_ADDR
// uc_nation := 3 ;
15089: LD_ADDR_OWVAR 21
15093: PUSH
15094: LD_INT 3
15096: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
15097: LD_INT 22
15099: PUSH
15100: LD_INT 23
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 1
15109: PPUSH
15110: LD_INT 2
15112: PPUSH
15113: CALL_OW 12
15117: ARRAY
15118: PPUSH
15119: LD_INT 1
15121: PPUSH
15122: LD_INT 1
15124: PPUSH
15125: LD_INT 44
15127: PUSH
15128: LD_INT 43
15130: PUSH
15131: LD_INT 42
15133: PUSH
15134: LD_INT 44
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 1
15145: PPUSH
15146: LD_INT 4
15148: PPUSH
15149: CALL_OW 12
15153: ARRAY
15154: PPUSH
15155: LD_INT 99
15157: PPUSH
15158: CALL 30710 0 5
// veh := CreateVehicle ;
15162: LD_ADDR_VAR 0 3
15166: PUSH
15167: CALL_OW 45
15171: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
15172: LD_VAR 0 3
15176: PPUSH
15177: LD_INT 5
15179: PPUSH
15180: LD_INT 3
15182: PPUSH
15183: LD_INT 2
15185: PPUSH
15186: LD_INT 0
15188: PPUSH
15189: CALL 65284 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
15193: LD_ADDR_EXP 57
15197: PUSH
15198: LD_EXP 57
15202: PPUSH
15203: LD_EXP 57
15207: PUSH
15208: LD_INT 1
15210: PLUS
15211: PPUSH
15212: LD_VAR 0 3
15216: PPUSH
15217: CALL_OW 1
15221: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
15222: LD_INT 0
15224: PPUSH
15225: LD_INT 3
15227: PPUSH
15228: LD_OWVAR 67
15232: PPUSH
15233: CALL_OW 380
// un := CreateHuman ;
15237: LD_ADDR_VAR 0 2
15241: PUSH
15242: CALL_OW 44
15246: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15247: LD_VAR 0 2
15251: PPUSH
15252: LD_VAR 0 3
15256: PPUSH
15257: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15261: LD_ADDR_EXP 57
15265: PUSH
15266: LD_EXP 57
15270: PPUSH
15271: LD_EXP 57
15275: PUSH
15276: LD_INT 1
15278: PLUS
15279: PPUSH
15280: LD_VAR 0 2
15284: PPUSH
15285: CALL_OW 1
15289: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
15290: LD_VAR 0 2
15294: PPUSH
15295: LD_INT 23
15297: PPUSH
15298: LD_INT 7
15300: PPUSH
15301: CALL_OW 111
// wait ( 0 0$2 ) ;
15305: LD_INT 70
15307: PPUSH
15308: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15312: LD_ADDR_VAR 0 4
15316: PUSH
15317: LD_VAR 0 4
15321: PPUSH
15322: LD_VAR 0 4
15326: PUSH
15327: LD_INT 1
15329: PLUS
15330: PPUSH
15331: LD_VAR 0 3
15335: PPUSH
15336: CALL_OW 1
15340: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15341: LD_ADDR_VAR 0 4
15345: PUSH
15346: LD_VAR 0 4
15350: PPUSH
15351: LD_VAR 0 4
15355: PUSH
15356: LD_INT 1
15358: PLUS
15359: PPUSH
15360: LD_VAR 0 2
15364: PPUSH
15365: CALL_OW 1
15369: ST_TO_ADDR
// end ;
15370: GO 15070
15372: POP
15373: POP
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + waveStrength do
15374: LD_ADDR_VAR 0 1
15378: PUSH
15379: DOUBLE
15380: LD_INT 1
15382: DEC
15383: ST_TO_ADDR
15384: LD_INT 3
15386: PUSH
15387: LD_INT 4
15389: PUSH
15390: LD_INT 4
15392: PUSH
15393: LD_INT 5
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: PUSH
15402: LD_OWVAR 67
15406: ARRAY
15407: PUSH
15408: LD_EXP 58
15412: PLUS
15413: PUSH
15414: FOR_TO
15415: IFFALSE 15724
// begin InitHc ;
15417: CALL_OW 19
// InitVc ;
15421: CALL_OW 20
// uc_side := 3 ;
15425: LD_ADDR_OWVAR 20
15429: PUSH
15430: LD_INT 3
15432: ST_TO_ADDR
// uc_nation := 3 ;
15433: LD_ADDR_OWVAR 21
15437: PUSH
15438: LD_INT 3
15440: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
15441: LD_INT 22
15443: PUSH
15444: LD_INT 23
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 1
15453: PPUSH
15454: LD_INT 2
15456: PPUSH
15457: CALL_OW 12
15461: ARRAY
15462: PPUSH
15463: LD_INT 1
15465: PPUSH
15466: LD_INT 1
15468: PPUSH
15469: LD_INT 44
15471: PUSH
15472: LD_INT 45
15474: PUSH
15475: LD_INT 43
15477: PUSH
15478: LD_INT 42
15480: PUSH
15481: LD_INT 44
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 1
15493: PPUSH
15494: LD_INT 5
15496: PPUSH
15497: CALL_OW 12
15501: ARRAY
15502: PPUSH
15503: LD_INT 99
15505: PPUSH
15506: CALL 30710 0 5
// veh := CreateVehicle ;
15510: LD_ADDR_VAR 0 3
15514: PUSH
15515: CALL_OW 45
15519: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
15520: LD_VAR 0 3
15524: PPUSH
15525: LD_INT 127
15527: PPUSH
15528: LD_INT 243
15530: PPUSH
15531: LD_INT 0
15533: PPUSH
15534: LD_INT 0
15536: PPUSH
15537: CALL 65284 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
15541: LD_ADDR_EXP 57
15545: PUSH
15546: LD_EXP 57
15550: PPUSH
15551: LD_EXP 57
15555: PUSH
15556: LD_INT 1
15558: PLUS
15559: PPUSH
15560: LD_VAR 0 3
15564: PPUSH
15565: CALL_OW 1
15569: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
15570: LD_INT 0
15572: PPUSH
15573: LD_INT 3
15575: PPUSH
15576: LD_OWVAR 67
15580: PUSH
15581: LD_INT 2
15583: PLUS
15584: PPUSH
15585: CALL_OW 380
// un := CreateHuman ;
15589: LD_ADDR_VAR 0 2
15593: PUSH
15594: CALL_OW 44
15598: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15599: LD_VAR 0 2
15603: PPUSH
15604: LD_VAR 0 3
15608: PPUSH
15609: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
15613: LD_ADDR_EXP 57
15617: PUSH
15618: LD_EXP 57
15622: PPUSH
15623: LD_EXP 57
15627: PUSH
15628: LD_INT 1
15630: PLUS
15631: PPUSH
15632: LD_VAR 0 2
15636: PPUSH
15637: CALL_OW 1
15641: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
15642: LD_VAR 0 2
15646: PPUSH
15647: LD_INT 130
15649: PPUSH
15650: LD_INT 233
15652: PPUSH
15653: CALL_OW 111
// wait ( 0 0$2 ) ;
15657: LD_INT 70
15659: PPUSH
15660: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
15664: LD_ADDR_VAR 0 4
15668: PUSH
15669: LD_VAR 0 4
15673: PPUSH
15674: LD_VAR 0 4
15678: PUSH
15679: LD_INT 1
15681: PLUS
15682: PPUSH
15683: LD_VAR 0 3
15687: PPUSH
15688: CALL_OW 1
15692: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
15693: LD_ADDR_VAR 0 4
15697: PUSH
15698: LD_VAR 0 4
15702: PPUSH
15703: LD_VAR 0 4
15707: PUSH
15708: LD_INT 1
15710: PLUS
15711: PPUSH
15712: LD_VAR 0 2
15716: PPUSH
15717: CALL_OW 1
15721: ST_TO_ADDR
// end ;
15722: GO 15414
15724: POP
15725: POP
// for i in tmp do
15726: LD_ADDR_VAR 0 1
15730: PUSH
15731: LD_VAR 0 4
15735: PUSH
15736: FOR_IN
15737: IFFALSE 15756
// ComAgressiveMove ( i , 76 , 49 ) ;
15739: LD_VAR 0 1
15743: PPUSH
15744: LD_INT 76
15746: PPUSH
15747: LD_INT 49
15749: PPUSH
15750: CALL_OW 114
15754: GO 15736
15756: POP
15757: POP
// repeat wait ( 0 0$1 ) ;
15758: LD_INT 35
15760: PPUSH
15761: CALL_OW 67
// for i in tmp do
15765: LD_ADDR_VAR 0 1
15769: PUSH
15770: LD_VAR 0 4
15774: PUSH
15775: FOR_IN
15776: IFFALSE 15855
// if IsDead ( i ) then
15778: LD_VAR 0 1
15782: PPUSH
15783: CALL_OW 301
15787: IFFALSE 15807
// tmp := tmp diff i else
15789: LD_ADDR_VAR 0 4
15793: PUSH
15794: LD_VAR 0 4
15798: PUSH
15799: LD_VAR 0 1
15803: DIFF
15804: ST_TO_ADDR
15805: GO 15853
// if not HasTask ( i ) then
15807: LD_VAR 0 1
15811: PPUSH
15812: CALL_OW 314
15816: NOT
15817: IFFALSE 15853
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 81
15826: PUSH
15827: LD_INT 3
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PPUSH
15834: CALL_OW 69
15838: PPUSH
15839: LD_VAR 0 1
15843: PPUSH
15844: CALL_OW 74
15848: PPUSH
15849: CALL_OW 115
15853: GO 15775
15855: POP
15856: POP
// until not tmp ;
15857: LD_VAR 0 4
15861: NOT
15862: IFFALSE 15758
// end ;
15864: PPOPN 4
15866: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
15867: LD_EXP 6
15871: IFFALSE 16342
15873: GO 15875
15875: DISABLE
15876: LD_INT 0
15878: PPUSH
15879: PPUSH
15880: PPUSH
15881: PPUSH
// begin wait ( 3 3$00 ) ;
15882: LD_INT 6300
15884: PPUSH
15885: CALL_OW 67
// for i := 1 to 3 do
15889: LD_ADDR_VAR 0 1
15893: PUSH
15894: DOUBLE
15895: LD_INT 1
15897: DEC
15898: ST_TO_ADDR
15899: LD_INT 3
15901: PUSH
15902: FOR_TO
15903: IFFALSE 16202
// begin InitHc ;
15905: CALL_OW 19
// InitVc ;
15909: CALL_OW 20
// uc_side := 3 ;
15913: LD_ADDR_OWVAR 20
15917: PUSH
15918: LD_INT 3
15920: ST_TO_ADDR
// uc_nation := 3 ;
15921: LD_ADDR_OWVAR 21
15925: PUSH
15926: LD_INT 3
15928: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
15929: LD_INT 22
15931: PUSH
15932: LD_INT 23
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 1
15941: PPUSH
15942: LD_INT 2
15944: PPUSH
15945: CALL_OW 12
15949: ARRAY
15950: PPUSH
15951: LD_INT 1
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: LD_INT 44
15959: PUSH
15960: LD_INT 43
15962: PUSH
15963: LD_INT 42
15965: PUSH
15966: LD_INT 44
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 1
15977: PPUSH
15978: LD_INT 4
15980: PPUSH
15981: CALL_OW 12
15985: ARRAY
15986: PPUSH
15987: LD_INT 99
15989: PPUSH
15990: CALL 30710 0 5
// veh := CreateVehicle ;
15994: LD_ADDR_VAR 0 3
15998: PUSH
15999: CALL_OW 45
16003: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
16004: LD_VAR 0 3
16008: PPUSH
16009: LD_INT 293
16011: PPUSH
16012: LD_INT 246
16014: PPUSH
16015: LD_INT 5
16017: PPUSH
16018: LD_INT 0
16020: PPUSH
16021: CALL 65284 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
16025: LD_ADDR_EXP 57
16029: PUSH
16030: LD_EXP 57
16034: PPUSH
16035: LD_EXP 57
16039: PUSH
16040: LD_INT 1
16042: PLUS
16043: PPUSH
16044: LD_VAR 0 3
16048: PPUSH
16049: CALL_OW 1
16053: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
16054: LD_INT 0
16056: PPUSH
16057: LD_INT 3
16059: PPUSH
16060: LD_INT 3
16062: PPUSH
16063: CALL_OW 380
// un := CreateHuman ;
16067: LD_ADDR_VAR 0 2
16071: PUSH
16072: CALL_OW 44
16076: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16077: LD_VAR 0 2
16081: PPUSH
16082: LD_VAR 0 3
16086: PPUSH
16087: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
16091: LD_ADDR_EXP 57
16095: PUSH
16096: LD_EXP 57
16100: PPUSH
16101: LD_EXP 57
16105: PUSH
16106: LD_INT 1
16108: PLUS
16109: PPUSH
16110: LD_VAR 0 2
16114: PPUSH
16115: CALL_OW 1
16119: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
16120: LD_VAR 0 2
16124: PPUSH
16125: LD_INT 273
16127: PPUSH
16128: LD_INT 227
16130: PPUSH
16131: CALL_OW 111
// wait ( 0 0$2 ) ;
16135: LD_INT 70
16137: PPUSH
16138: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
16142: LD_ADDR_VAR 0 4
16146: PUSH
16147: LD_VAR 0 4
16151: PPUSH
16152: LD_VAR 0 4
16156: PUSH
16157: LD_INT 1
16159: PLUS
16160: PPUSH
16161: LD_VAR 0 3
16165: PPUSH
16166: CALL_OW 1
16170: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
16171: LD_ADDR_VAR 0 4
16175: PUSH
16176: LD_VAR 0 4
16180: PPUSH
16181: LD_VAR 0 4
16185: PUSH
16186: LD_INT 1
16188: PLUS
16189: PPUSH
16190: LD_VAR 0 2
16194: PPUSH
16195: CALL_OW 1
16199: ST_TO_ADDR
// end ;
16200: GO 15902
16202: POP
16203: POP
// for i in tmp do
16204: LD_ADDR_VAR 0 1
16208: PUSH
16209: LD_VAR 0 4
16213: PUSH
16214: FOR_IN
16215: IFFALSE 16234
// ComAgressiveMove ( i , 330 , 231 ) ;
16217: LD_VAR 0 1
16221: PPUSH
16222: LD_INT 330
16224: PPUSH
16225: LD_INT 231
16227: PPUSH
16228: CALL_OW 114
16232: GO 16214
16234: POP
16235: POP
// repeat wait ( 0 0$1 ) ;
16236: LD_INT 35
16238: PPUSH
16239: CALL_OW 67
// for i in tmp do
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_VAR 0 4
16252: PUSH
16253: FOR_IN
16254: IFFALSE 16333
// if IsDead ( i ) then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 301
16265: IFFALSE 16285
// tmp := tmp diff i else
16267: LD_ADDR_VAR 0 4
16271: PUSH
16272: LD_VAR 0 4
16276: PUSH
16277: LD_VAR 0 1
16281: DIFF
16282: ST_TO_ADDR
16283: GO 16331
// if not HasTask ( i ) then
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 314
16294: NOT
16295: IFFALSE 16331
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
16297: LD_VAR 0 1
16301: PPUSH
16302: LD_INT 81
16304: PUSH
16305: LD_INT 3
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PPUSH
16312: CALL_OW 69
16316: PPUSH
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 74
16326: PPUSH
16327: CALL_OW 115
16331: GO 16253
16333: POP
16334: POP
// until not tmp ;
16335: LD_VAR 0 4
16339: NOT
16340: IFFALSE 16236
// end ;
16342: PPOPN 4
16344: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
16345: LD_INT 3
16347: PUSH
16348: LD_INT 22
16350: PUSH
16351: LD_INT 2
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 32
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 69
16380: IFFALSE 16464
16382: GO 16384
16384: DISABLE
16385: LD_INT 0
16387: PPUSH
// begin enable ;
16388: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
16389: LD_ADDR_VAR 0 1
16393: PUSH
16394: LD_INT 3
16396: PUSH
16397: LD_INT 22
16399: PUSH
16400: LD_INT 2
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 32
16413: PUSH
16414: LD_INT 1
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PPUSH
16425: CALL_OW 69
16429: PUSH
16430: FOR_IN
16431: IFFALSE 16462
// if GetFuel ( i ) < 3 then
16433: LD_VAR 0 1
16437: PPUSH
16438: CALL_OW 261
16442: PUSH
16443: LD_INT 3
16445: LESS
16446: IFFALSE 16460
// SetFuel ( i , 3 ) ;
16448: LD_VAR 0 1
16452: PPUSH
16453: LD_INT 3
16455: PPUSH
16456: CALL_OW 240
16460: GO 16430
16462: POP
16463: POP
// end ; end_of_file
16464: PPOPN 1
16466: END
// export function Action ; begin
16467: LD_INT 0
16469: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
16470: LD_INT 2
16472: PPUSH
16473: LD_INT 4
16475: PPUSH
16476: CALL_OW 332
// Video ( true ) ;
16480: LD_INT 1
16482: PPUSH
16483: CALL 63116 0 1
// music_nat := 3 ;
16487: LD_ADDR_OWVAR 71
16491: PUSH
16492: LD_INT 3
16494: ST_TO_ADDR
// music_class := music_recon ;
16495: LD_ADDR_OWVAR 72
16499: PUSH
16500: LD_INT 3
16502: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
16503: LD_INT 213
16505: PPUSH
16506: LD_INT 89
16508: PPUSH
16509: CALL_OW 86
// if not debug then
16513: LD_EXP 1
16517: NOT
16518: IFFALSE 16552
// begin if Kaia and Olaf then
16520: LD_EXP 35
16524: PUSH
16525: LD_EXP 39
16529: AND
16530: IFFALSE 16536
// SceneKaiaWithOlaf ;
16532: CALL 16591 0 0
// if Givi and Kamil then
16536: LD_EXP 31
16540: PUSH
16541: LD_EXP 34
16545: AND
16546: IFFALSE 16552
// SceneWithGiviAndKamil ;
16548: CALL 17162 0 0
// end ; Video ( false ) ;
16552: LD_INT 0
16554: PPUSH
16555: CALL 63116 0 1
// ChangeMissionObjectives ( M1 ) ;
16559: LD_STRING M1
16561: PPUSH
16562: CALL_OW 337
// music_nat := music_auto ;
16566: LD_ADDR_OWVAR 71
16570: PUSH
16571: LD_INT 0
16573: ST_TO_ADDR
// music_class := music_auto ;
16574: LD_ADDR_OWVAR 72
16578: PUSH
16579: LD_INT 0
16581: ST_TO_ADDR
// SaveForQuickRestart ;
16582: CALL_OW 22
// end ;
16586: LD_VAR 0 1
16590: RET
// export function SceneKaiaWithOlaf ; begin
16591: LD_INT 0
16593: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
16594: LD_INT 22
16596: PUSH
16597: LD_INT 2
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 30
16606: PUSH
16607: LD_INT 3
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: PPUSH
16623: LD_INT 14
16625: PPUSH
16626: LD_INT 1
16628: PPUSH
16629: LD_INT 1
16631: PPUSH
16632: LD_INT 26
16634: PPUSH
16635: CALL_OW 125
// wait ( 0 0$1 ) ;
16639: LD_INT 35
16641: PPUSH
16642: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
16646: LD_EXP 35
16650: PPUSH
16651: LD_STRING DK-Mem-1
16653: PPUSH
16654: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
16658: LD_EXP 35
16662: PPUSH
16663: LD_STRING DK-Mem-2
16665: PPUSH
16666: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
16670: LD_EXP 39
16674: PPUSH
16675: LD_STRING DO-Mem-3
16677: PPUSH
16678: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
16682: LD_EXP 35
16686: PPUSH
16687: LD_STRING DK-Mem-4
16689: PPUSH
16690: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
16694: LD_EXP 39
16698: PPUSH
16699: LD_STRING DO-Mem-5
16701: PPUSH
16702: CALL_OW 88
// wait ( 0 0$2 ) ;
16706: LD_INT 70
16708: PPUSH
16709: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
16713: LD_INT 22
16715: PUSH
16716: LD_INT 2
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 30
16725: PUSH
16726: LD_INT 3
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PPUSH
16737: CALL_OW 69
16741: PPUSH
16742: LD_INT 90
16744: PPUSH
16745: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
16749: LD_EXP 39
16753: PPUSH
16754: LD_STRING DO-Mem-6
16756: PPUSH
16757: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
16761: LD_EXP 35
16765: PPUSH
16766: LD_STRING DK-Mem-7
16768: PPUSH
16769: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
16773: LD_EXP 30
16777: PPUSH
16778: LD_EXP 35
16782: PPUSH
16783: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
16787: LD_EXP 30
16791: PPUSH
16792: LD_STRING DH-Mem-8
16794: PPUSH
16795: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
16799: LD_EXP 35
16803: PUSH
16804: LD_EXP 39
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PPUSH
16813: LD_EXP 30
16817: PPUSH
16818: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
16822: LD_EXP 39
16826: PPUSH
16827: LD_STRING DO-Mem-9
16829: PPUSH
16830: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
16834: LD_EXP 39
16838: PPUSH
16839: LD_STRING DO-Mem-10
16841: PPUSH
16842: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
16846: LD_EXP 39
16850: PPUSH
16851: LD_STRING DO-Mem-11
16853: PPUSH
16854: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
16858: LD_EXP 39
16862: PPUSH
16863: LD_STRING DO-Mem-12
16865: PPUSH
16866: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
16870: LD_EXP 35
16874: PPUSH
16875: LD_STRING DK-Mem-13
16877: PPUSH
16878: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
16882: LD_EXP 35
16886: PPUSH
16887: LD_STRING DK-Mem-14
16889: PPUSH
16890: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
16894: LD_EXP 35
16898: PPUSH
16899: LD_STRING DK-Mem-15
16901: PPUSH
16902: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
16906: LD_EXP 35
16910: PPUSH
16911: LD_STRING DK-Mem-16
16913: PPUSH
16914: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
16918: LD_EXP 35
16922: PPUSH
16923: LD_STRING DK-Mem-17
16925: PPUSH
16926: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
16930: LD_EXP 39
16934: PPUSH
16935: LD_EXP 35
16939: PPUSH
16940: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
16944: LD_EXP 39
16948: PPUSH
16949: LD_STRING DO-Mem-18
16951: PPUSH
16952: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
16956: LD_EXP 35
16960: PPUSH
16961: LD_EXP 39
16965: PPUSH
16966: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
16970: LD_EXP 35
16974: PPUSH
16975: LD_STRING DK-Mem-19
16977: PPUSH
16978: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
16982: LD_EXP 39
16986: PPUSH
16987: LD_INT 214
16989: PPUSH
16990: LD_INT 86
16992: PPUSH
16993: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
16997: LD_EXP 39
17001: PPUSH
17002: LD_EXP 35
17006: PPUSH
17007: CALL_OW 179
// if Givi then
17011: LD_EXP 31
17015: IFFALSE 17046
// begin ComMoveXY ( Givi , 217 , 86 ) ;
17017: LD_EXP 31
17021: PPUSH
17022: LD_INT 217
17024: PPUSH
17025: LD_INT 86
17027: PPUSH
17028: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
17032: LD_EXP 31
17036: PPUSH
17037: LD_EXP 30
17041: PPUSH
17042: CALL_OW 179
// end ; if Kamil then
17046: LD_EXP 34
17050: IFFALSE 17090
// begin ComExit ( Kamil ) ;
17052: LD_EXP 34
17056: PPUSH
17057: CALL 63542 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
17061: LD_EXP 34
17065: PPUSH
17066: LD_INT 212
17068: PPUSH
17069: LD_INT 86
17071: PPUSH
17072: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
17076: LD_EXP 34
17080: PPUSH
17081: LD_EXP 30
17085: PPUSH
17086: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
17090: LD_INT 70
17092: PPUSH
17093: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
17097: LD_EXP 30
17101: PPUSH
17102: LD_STRING DH-Mem-20
17104: PPUSH
17105: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
17109: LD_EXP 39
17113: PPUSH
17114: LD_INT 215
17116: PPUSH
17117: LD_INT 87
17119: PPUSH
17120: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
17124: LD_EXP 39
17128: PPUSH
17129: LD_EXP 35
17133: PPUSH
17134: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
17138: LD_EXP 35
17142: PPUSH
17143: LD_STRING DK-Mem-21
17145: PPUSH
17146: CALL_OW 88
// wait ( 0 0$2 ) ;
17150: LD_INT 70
17152: PPUSH
17153: CALL_OW 67
// end ;
17157: LD_VAR 0 1
17161: RET
// export function SceneWithGiviAndKamil ; begin
17162: LD_INT 0
17164: PPUSH
// if Markov then
17165: LD_EXP 37
17169: IFFALSE 17220
// begin if IsInUnit ( Markov ) then
17171: LD_EXP 37
17175: PPUSH
17176: CALL_OW 310
17180: IFFALSE 17191
// ComExit ( Markov ) ;
17182: LD_EXP 37
17186: PPUSH
17187: CALL 63542 0 1
// AddComMoveXY ( Markov , 212 , 88 ) ;
17191: LD_EXP 37
17195: PPUSH
17196: LD_INT 212
17198: PPUSH
17199: LD_INT 88
17201: PPUSH
17202: CALL_OW 171
// AddComTurnUnit ( Markov , Heike ) ;
17206: LD_EXP 37
17210: PPUSH
17211: LD_EXP 30
17215: PPUSH
17216: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
17220: LD_EXP 31
17224: PPUSH
17225: LD_STRING DG-Obj-1
17227: PPUSH
17228: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
17232: LD_EXP 34
17236: PPUSH
17237: LD_STRING DKam-Obj-2
17239: PPUSH
17240: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
17244: LD_EXP 30
17248: PPUSH
17249: LD_EXP 34
17253: PPUSH
17254: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
17258: LD_EXP 34
17262: PPUSH
17263: LD_STRING DKam-Obj-3
17265: PPUSH
17266: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
17270: LD_EXP 37
17274: PPUSH
17275: LD_STRING DMar-Obj-4
17277: PPUSH
17278: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
17282: LD_EXP 34
17286: PPUSH
17287: LD_STRING DKam-Obj-6
17289: PPUSH
17290: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
17294: LD_EXP 34
17298: PPUSH
17299: LD_STRING DKam-Obj-7
17301: PPUSH
17302: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
17306: LD_EXP 34
17310: PPUSH
17311: LD_STRING DKam-Obj-8
17313: PPUSH
17314: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
17318: LD_EXP 30
17322: PPUSH
17323: LD_STRING DH-Obj-9
17325: PPUSH
17326: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
17330: LD_EXP 34
17334: PPUSH
17335: LD_STRING DKam-Obj-10
17337: PPUSH
17338: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
17342: LD_EXP 34
17346: PPUSH
17347: LD_STRING DKam-Obj-11
17349: PPUSH
17350: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
17354: LD_EXP 37
17358: PPUSH
17359: LD_STRING DMar-Obj-12
17361: PPUSH
17362: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
17366: LD_EXP 37
17370: PPUSH
17371: LD_STRING DMar-Obj-13
17373: PPUSH
17374: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
17378: LD_EXP 37
17382: PPUSH
17383: LD_STRING DMar-Obj-14
17385: PPUSH
17386: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
17390: LD_EXP 39
17394: PPUSH
17395: LD_STRING DO-Obj-15
17397: PPUSH
17398: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
17402: LD_EXP 39
17406: PPUSH
17407: LD_STRING DO-Obj-16
17409: PPUSH
17410: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
17414: LD_EXP 30
17418: PPUSH
17419: LD_STRING DH-Obj-17
17421: PPUSH
17422: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
17426: LD_EXP 39
17430: PPUSH
17431: LD_STRING DO-Obj-18
17433: PPUSH
17434: CALL_OW 88
// end ;
17438: LD_VAR 0 1
17442: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
17443: LD_INT 34
17445: PUSH
17446: LD_INT 92
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PPUSH
17453: CALL_OW 69
17457: IFFALSE 17652
17459: GO 17461
17461: DISABLE
17462: LD_INT 0
17464: PPUSH
// begin wait ( 0 0$2 ) ;
17465: LD_INT 70
17467: PPUSH
17468: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
17472: LD_INT 34
17474: PUSH
17475: LD_INT 92
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PPUSH
17482: CALL_OW 69
17486: PPUSH
17487: CALL_OW 87
// DialogueOn ;
17491: CALL_OW 6
// if Markov then
17495: LD_EXP 37
17499: IFFALSE 17527
// begin Say ( Markov , DMar-Grn-1 ) ;
17501: LD_EXP 37
17505: PPUSH
17506: LD_STRING DMar-Grn-1
17508: PPUSH
17509: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
17513: LD_EXP 30
17517: PPUSH
17518: LD_STRING DH-Grn-2
17520: PPUSH
17521: CALL_OW 88
// end else
17525: GO 17626
// if heikeSecondSquad then
17527: LD_EXP 45
17531: IFFALSE 17626
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
17533: LD_ADDR_VAR 0 1
17537: PUSH
17538: LD_EXP 45
17542: PUSH
17543: LD_INT 1
17545: PPUSH
17546: LD_EXP 45
17550: PPUSH
17551: CALL_OW 12
17555: ARRAY
17556: ST_TO_ADDR
// case GetSex ( random ) of 1 :
17557: LD_VAR 0 1
17561: PPUSH
17562: CALL_OW 258
17566: PUSH
17567: LD_INT 1
17569: DOUBLE
17570: EQUAL
17571: IFTRUE 17575
17573: GO 17590
17575: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
17576: LD_VAR 0 1
17580: PPUSH
17581: LD_STRING DArm-Grn-1
17583: PPUSH
17584: CALL_OW 88
17588: GO 17614
17590: LD_INT 2
17592: DOUBLE
17593: EQUAL
17594: IFTRUE 17598
17596: GO 17613
17598: POP
// Say ( random , DArf-Grn-1 ) ; end ;
17599: LD_VAR 0 1
17603: PPUSH
17604: LD_STRING DArf-Grn-1
17606: PPUSH
17607: CALL_OW 88
17611: GO 17614
17613: POP
// Say ( Heike , DH-Grn-2 ) ;
17614: LD_EXP 30
17618: PPUSH
17619: LD_STRING DH-Grn-2
17621: PPUSH
17622: CALL_OW 88
// end ; DialogueOff ;
17626: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
17630: LD_STRING MortarConstructed
17632: PPUSH
17633: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
17637: LD_STRING SelfPropelledMortar
17639: PPUSH
17640: CALL_OW 339
// mortarConstructed := true ;
17644: LD_ADDR_EXP 15
17648: PUSH
17649: LD_INT 1
17651: ST_TO_ADDR
// end ;
17652: PPOPN 1
17654: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
17655: LD_INT 2
17657: PPUSH
17658: LD_INT 8
17660: PPUSH
17661: CALL_OW 294
17665: IFFALSE 17808
17667: GO 17669
17669: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
17670: LD_INT 200
17672: PPUSH
17673: LD_INT 162
17675: PPUSH
17676: LD_INT 2
17678: PPUSH
17679: LD_INT 6
17681: NEG
17682: PPUSH
17683: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
17687: LD_INT 200
17689: PPUSH
17690: LD_INT 162
17692: PPUSH
17693: LD_INT 2
17695: PPUSH
17696: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
17700: LD_INT 200
17702: PPUSH
17703: LD_INT 162
17705: PPUSH
17706: CALL_OW 84
// if not IsOk ( Kurt ) then
17710: LD_EXP 41
17714: PPUSH
17715: CALL_OW 302
17719: NOT
17720: IFFALSE 17724
// exit ;
17722: GO 17808
// Say ( Kurt , DKs-Otpst-2-1 ) ;
17724: LD_EXP 41
17728: PPUSH
17729: LD_STRING DKs-Otpst-2-1
17731: PPUSH
17732: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
17736: LD_EXP 35
17740: PPUSH
17741: LD_STRING DK-Otpst-2-2
17743: PPUSH
17744: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
17748: LD_EXP 41
17752: PPUSH
17753: LD_STRING DKs-Otpst-2-3
17755: PPUSH
17756: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
17760: LD_EXP 41
17764: PPUSH
17765: LD_STRING DKs-Otpst-2-4
17767: PPUSH
17768: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
17772: LD_EXP 41
17776: PPUSH
17777: LD_STRING DKs-Otpst-2-5
17779: PPUSH
17780: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
17784: LD_EXP 34
17788: PPUSH
17789: LD_STRING DKam-Otpst-2-6
17791: PPUSH
17792: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
17796: LD_EXP 41
17800: PPUSH
17801: LD_STRING DKs-Otpst-2-7
17803: PPUSH
17804: CALL_OW 88
// end ;
17808: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
17809: LD_INT 8
17811: PPUSH
17812: LD_INT 22
17814: PUSH
17815: LD_INT 3
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 21
17824: PUSH
17825: LD_INT 3
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PPUSH
17836: CALL_OW 70
17840: NOT
17841: PUSH
17842: LD_EXP 3
17846: NOT
17847: AND
17848: IFFALSE 18096
17850: GO 17852
17852: DISABLE
17853: LD_INT 0
17855: PPUSH
// begin outpostDestroyed := true ;
17856: LD_ADDR_EXP 4
17860: PUSH
17861: LD_INT 1
17863: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
17864: LD_INT 22
17866: PUSH
17867: LD_INT 2
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 34
17876: PUSH
17877: LD_INT 92
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 92
17886: PUSH
17887: LD_INT 195
17889: PUSH
17890: LD_INT 164
17892: PUSH
17893: LD_INT 12
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: PPUSH
17907: CALL_OW 69
17911: NOT
17912: IFFALSE 17916
// exit ;
17914: GO 18096
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
17916: LD_EXP 31
17920: PPUSH
17921: CALL_OW 302
17925: NOT
17926: PUSH
17927: LD_EXP 35
17931: PPUSH
17932: CALL_OW 302
17936: NOT
17937: OR
17938: IFFALSE 17942
// exit ;
17940: GO 18096
// Say ( Givi , DG-Otpst-1-1 ) ;
17942: LD_EXP 31
17946: PPUSH
17947: LD_STRING DG-Otpst-1-1
17949: PPUSH
17950: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
17954: LD_EXP 35
17958: PPUSH
17959: LD_STRING DK-Otpst-1-2
17961: PPUSH
17962: CALL_OW 88
// if IsOk ( Markov ) then
17966: LD_EXP 37
17970: PPUSH
17971: CALL_OW 302
17975: IFFALSE 18003
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
17977: LD_EXP 37
17981: PPUSH
17982: LD_STRING DMar-Otpst-1-3
17984: PPUSH
17985: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
17989: LD_EXP 37
17993: PPUSH
17994: LD_STRING DMar-Otpst-1-4
17996: PPUSH
17997: CALL_OW 88
// end else
18001: GO 18084
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
18003: LD_ADDR_VAR 0 1
18007: PUSH
18008: LD_EXP 45
18012: PUSH
18013: LD_INT 1
18015: PPUSH
18016: LD_EXP 45
18020: PPUSH
18021: CALL_OW 12
18025: ARRAY
18026: ST_TO_ADDR
// case GetSex ( random ) of 1 :
18027: LD_VAR 0 1
18031: PPUSH
18032: CALL_OW 258
18036: PUSH
18037: LD_INT 1
18039: DOUBLE
18040: EQUAL
18041: IFTRUE 18045
18043: GO 18060
18045: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
18046: LD_VAR 0 1
18050: PPUSH
18051: LD_STRING DArm-Otpst-1-a-3
18053: PPUSH
18054: CALL_OW 88
18058: GO 18084
18060: LD_INT 2
18062: DOUBLE
18063: EQUAL
18064: IFTRUE 18068
18066: GO 18083
18068: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
18069: LD_VAR 0 1
18073: PPUSH
18074: LD_STRING DArf-Otpst-1-a-3
18076: PPUSH
18077: CALL_OW 88
18081: GO 18084
18083: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
18084: LD_EXP 31
18088: PPUSH
18089: LD_STRING DG-Otpst-1-5
18091: PPUSH
18092: CALL_OW 88
// end ;
18096: PPOPN 1
18098: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
18099: LD_EXP 35
18103: PPUSH
18104: CALL_OW 256
18108: PUSH
18109: LD_INT 10
18111: LESS
18112: IFFALSE 18226
18114: GO 18116
18116: DISABLE
// begin DialogueOn ;
18117: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18121: LD_EXP 35
18125: PPUSH
18126: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
18130: LD_EXP 35
18134: PPUSH
18135: LD_STRING DK-Dead-1
18137: PPUSH
18138: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
18142: LD_EXP 30
18146: PPUSH
18147: LD_STRING DH-Dead-2
18149: PPUSH
18150: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
18154: LD_EXP 35
18158: PPUSH
18159: LD_STRING DK-Dead-3
18161: PPUSH
18162: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
18166: LD_EXP 30
18170: PPUSH
18171: LD_STRING DH-Dead-4
18173: PPUSH
18174: CALL_OW 88
// if IsOk ( Mike ) then
18178: LD_EXP 32
18182: PPUSH
18183: CALL_OW 302
18187: IFFALSE 18213
// begin Say ( Mike , DM-Dead-5 ) ;
18189: LD_EXP 32
18193: PPUSH
18194: LD_STRING DM-Dead-5
18196: PPUSH
18197: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
18201: LD_EXP 30
18205: PPUSH
18206: LD_STRING DH-Dead-6
18208: PPUSH
18209: CALL_OW 88
// end ; DialogueOff ;
18213: CALL_OW 7
// KillUnit ( Kaia ) ;
18217: LD_EXP 35
18221: PPUSH
18222: CALL_OW 66
// end ;
18226: END
// every 0 0$1 trigger tick >= 10 10$20 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
18227: LD_OWVAR 1
18231: PUSH
18232: LD_INT 21700
18234: GREATEREQUAL
18235: PUSH
18236: LD_EXP 5
18240: PUSH
18241: LD_INT 5
18243: GREATER
18244: OR
18245: PUSH
18246: LD_INT 22
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 92
18258: PUSH
18259: LD_INT 103
18261: PUSH
18262: LD_INT 81
18264: PUSH
18265: LD_INT 20
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PPUSH
18278: CALL_OW 69
18282: OR
18283: IFFALSE 18690
18285: GO 18287
18287: DISABLE
18288: LD_INT 0
18290: PPUSH
18291: PPUSH
18292: PPUSH
// begin PrepareRolfSquad ;
18293: CALL 2372 0 0
// dep := HexInfo ( 86 , 54 ) ;
18297: LD_ADDR_VAR 0 3
18301: PUSH
18302: LD_INT 86
18304: PPUSH
18305: LD_INT 54
18307: PPUSH
18308: CALL_OW 428
18312: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
18313: LD_VAR 0 3
18317: PPUSH
18318: CALL_OW 274
18322: PPUSH
18323: LD_INT 1
18325: PPUSH
18326: LD_INT 300
18328: PPUSH
18329: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
18333: LD_VAR 0 3
18337: PPUSH
18338: CALL_OW 274
18342: PPUSH
18343: LD_INT 2
18345: PPUSH
18346: LD_INT 300
18348: PPUSH
18349: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
18353: LD_EXP 47
18357: PPUSH
18358: LD_INT 79
18360: PPUSH
18361: LD_INT 52
18363: PPUSH
18364: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
18368: LD_INT 35
18370: PPUSH
18371: CALL_OW 67
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
18375: LD_INT 12
18377: PPUSH
18378: LD_INT 22
18380: PUSH
18381: LD_INT 3
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 21
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 70
18406: NOT
18407: IFFALSE 18368
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_INT 12
18416: PPUSH
18417: LD_INT 21
18419: PUSH
18420: LD_INT 3
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 70
18431: ST_TO_ADDR
// for i in tmp do
18432: LD_ADDR_VAR 0 1
18436: PUSH
18437: LD_VAR 0 2
18441: PUSH
18442: FOR_IN
18443: IFFALSE 18459
// SetSide ( i , 8 ) ;
18445: LD_VAR 0 1
18449: PPUSH
18450: LD_INT 8
18452: PPUSH
18453: CALL_OW 235
18457: GO 18442
18459: POP
18460: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
18461: LD_INT 63
18463: PPUSH
18464: LD_INT 42
18466: PPUSH
18467: CALL_OW 428
18471: PPUSH
18472: LD_INT 320
18474: PPUSH
18475: CALL_OW 234
// wait ( 0 0$10 ) ;
18479: LD_INT 350
18481: PPUSH
18482: CALL_OW 67
// DialogueOn ;
18486: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
18490: LD_INT 8
18492: PPUSH
18493: LD_INT 2
18495: PPUSH
18496: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
18500: LD_INT 86
18502: PPUSH
18503: LD_INT 54
18505: PPUSH
18506: CALL_OW 428
18510: PPUSH
18511: LD_STRING antwerp
18513: PPUSH
18514: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
18518: LD_EXP 43
18522: PPUSH
18523: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
18527: LD_EXP 43
18531: PPUSH
18532: LD_STRING DRf-rast-1
18534: PPUSH
18535: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
18539: LD_EXP 30
18543: PPUSH
18544: LD_STRING DH-rast-2
18546: PPUSH
18547: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
18551: LD_EXP 43
18555: PPUSH
18556: LD_STRING DRf-rast-3
18558: PPUSH
18559: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
18563: LD_EXP 43
18567: PPUSH
18568: LD_STRING DRf-rast-4
18570: PPUSH
18571: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
18575: LD_EXP 43
18579: PPUSH
18580: LD_STRING DRf-rast-5
18582: PPUSH
18583: CALL_OW 94
// if IsOk ( Aviradze ) then
18587: LD_EXP 42
18591: PPUSH
18592: CALL_OW 302
18596: IFFALSE 18655
// begin CenterNowOnUnits ( Aviradze ) ;
18598: LD_EXP 42
18602: PPUSH
18603: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
18607: LD_EXP 42
18611: PPUSH
18612: LD_STRING DA-rast-6
18614: PPUSH
18615: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
18619: LD_EXP 30
18623: PPUSH
18624: LD_STRING DH-rast-7
18626: PPUSH
18627: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
18631: LD_EXP 31
18635: PPUSH
18636: LD_STRING DG-rast-8
18638: PPUSH
18639: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
18643: LD_EXP 31
18647: PPUSH
18648: LD_STRING DG-rast-9
18650: PPUSH
18651: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
18655: LD_EXP 30
18659: PPUSH
18660: LD_STRING DH-rast-10
18662: PPUSH
18663: CALL_OW 88
// DialogueOff ;
18667: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18671: LD_STRING M2
18673: PPUSH
18674: CALL_OW 337
// bergkampfArrived := true ;
18678: LD_ADDR_EXP 3
18682: PUSH
18683: LD_INT 1
18685: ST_TO_ADDR
// PrepareRolfBase ;
18686: CALL 2703 0 0
// end ;
18690: PPOPN 3
18692: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
18693: LD_INT 12
18695: PPUSH
18696: LD_INT 22
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PPUSH
18706: CALL_OW 70
18710: PUSH
18711: LD_EXP 43
18715: PPUSH
18716: CALL_OW 302
18720: AND
18721: PUSH
18722: LD_EXP 29
18726: AND
18727: IFFALSE 19287
18729: GO 18731
18731: DISABLE
18732: LD_INT 0
18734: PPUSH
// begin rolfScriptBase := false ;
18735: LD_ADDR_EXP 9
18739: PUSH
18740: LD_INT 0
18742: ST_TO_ADDR
// DialogueOn ;
18743: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
18747: LD_EXP 43
18751: PPUSH
18752: CALL_OW 87
// if rolfSquad >= 10 then
18756: LD_EXP 47
18760: PUSH
18761: LD_INT 10
18763: GREATEREQUAL
18764: IFFALSE 18943
// begin linkedWithRolf := 2 ;
18766: LD_ADDR_EXP 12
18770: PUSH
18771: LD_INT 2
18773: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
18774: LD_EXP 43
18778: PPUSH
18779: LD_STRING DRf-rast-11
18781: PPUSH
18782: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
18786: LD_EXP 30
18790: PPUSH
18791: LD_STRING DH-rast-12
18793: PPUSH
18794: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
18798: LD_EXP 43
18802: PPUSH
18803: LD_STRING DRf-rast-13
18805: PPUSH
18806: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
18810: LD_EXP 30
18814: PPUSH
18815: LD_STRING DH-rast-14
18817: PPUSH
18818: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
18822: LD_EXP 43
18826: PPUSH
18827: LD_STRING DRf-rast-15
18829: PPUSH
18830: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
18834: LD_EXP 30
18838: PPUSH
18839: LD_STRING DH-rast-16
18841: PPUSH
18842: CALL_OW 88
// if IsOk ( Mike ) then
18846: LD_EXP 32
18850: PPUSH
18851: CALL_OW 302
18855: IFFALSE 18929
// begin Say ( Mike , DM-rast-17 ) ;
18857: LD_EXP 32
18861: PPUSH
18862: LD_STRING DM-rast-17
18864: PPUSH
18865: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
18869: LD_EXP 30
18873: PPUSH
18874: LD_STRING DH-rast-18
18876: PPUSH
18877: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
18881: LD_EXP 32
18885: PPUSH
18886: LD_STRING DM-rast-19
18888: PPUSH
18889: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
18893: LD_EXP 30
18897: PPUSH
18898: LD_STRING DH-rast-20
18900: PPUSH
18901: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
18905: LD_EXP 32
18909: PPUSH
18910: LD_STRING DM-rast-21
18912: PPUSH
18913: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
18917: LD_EXP 30
18921: PPUSH
18922: LD_STRING DH-rast-22
18924: PPUSH
18925: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
18929: LD_EXP 30
18933: PPUSH
18934: LD_STRING DH-rast-23
18936: PPUSH
18937: CALL_OW 88
// end else
18941: GO 19093
// begin linkedWithRolf := 1 ;
18943: LD_ADDR_EXP 12
18947: PUSH
18948: LD_INT 1
18950: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
18951: LD_EXP 43
18955: PPUSH
18956: LD_STRING DRf-rast-a-11
18958: PPUSH
18959: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
18963: LD_EXP 30
18967: PPUSH
18968: LD_STRING DH-rast-a-12
18970: PPUSH
18971: CALL_OW 88
// if IsOk ( Kurt ) then
18975: LD_EXP 41
18979: PPUSH
18980: CALL_OW 302
18984: IFFALSE 19081
// begin Say ( Kurt , DKs-rast-a-13 ) ;
18986: LD_EXP 41
18990: PPUSH
18991: LD_STRING DKs-rast-a-13
18993: PPUSH
18994: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
18998: LD_EXP 43
19002: PPUSH
19003: LD_STRING DRf-rast-a-14
19005: PPUSH
19006: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
19010: LD_EXP 43
19014: PPUSH
19015: LD_STRING DRf-rast-a-15
19017: PPUSH
19018: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
19022: LD_EXP 41
19026: PPUSH
19027: LD_STRING DKs-rast-a-16
19029: PPUSH
19030: CALL_OW 88
// if IsOk ( Givi ) then
19034: LD_EXP 31
19038: PPUSH
19039: CALL_OW 302
19043: IFFALSE 19081
// begin Say ( Givi , DG-rast-a-17 ) ;
19045: LD_EXP 31
19049: PPUSH
19050: LD_STRING DG-rast-a-17
19052: PPUSH
19053: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
19057: LD_EXP 31
19061: PPUSH
19062: LD_STRING DG-rast-a-18
19064: PPUSH
19065: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
19069: LD_EXP 41
19073: PPUSH
19074: LD_STRING DKs-rast-a-19
19076: PPUSH
19077: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
19081: LD_EXP 30
19085: PPUSH
19086: LD_STRING DH-rast-a-20
19088: PPUSH
19089: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
19093: LD_EXP 43
19097: PPUSH
19098: LD_STRING DRf-rast-24
19100: PPUSH
19101: CALL_OW 88
// if IsOk ( Aviradze ) then
19105: LD_EXP 42
19109: PPUSH
19110: CALL_OW 302
19114: IFFALSE 19214
// begin Say ( Aviradze , DA-rast-25 ) ;
19116: LD_EXP 42
19120: PPUSH
19121: LD_STRING DA-rast-25
19123: PPUSH
19124: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
19128: LD_EXP 30
19132: PPUSH
19133: LD_STRING DH-rast-26
19135: PPUSH
19136: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
19140: LD_EXP 42
19144: PPUSH
19145: LD_STRING DA-rast-27
19147: PPUSH
19148: CALL_OW 88
// if IsOk ( Markov ) then
19152: LD_EXP 37
19156: PPUSH
19157: CALL_OW 302
19161: IFFALSE 19189
// begin Say ( Markov , DMar-rast-28 ) ;
19163: LD_EXP 37
19167: PPUSH
19168: LD_STRING DMar-rast-28
19170: PPUSH
19171: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
19175: LD_EXP 37
19179: PPUSH
19180: LD_STRING DMar-rast-29
19182: PPUSH
19183: CALL_OW 88
// end else
19187: GO 19212
// if IsOk ( Sophia ) then
19189: LD_EXP 36
19193: PPUSH
19194: CALL_OW 302
19198: IFFALSE 19212
// begin Say ( Sophia , DS-rast-28 ) ;
19200: LD_EXP 36
19204: PPUSH
19205: LD_STRING DS-rast-28
19207: PPUSH
19208: CALL_OW 88
// end ; end else
19212: GO 19237
// if IsOk ( Sophia ) then
19214: LD_EXP 36
19218: PPUSH
19219: CALL_OW 302
19223: IFFALSE 19237
// Say ( Sophia , DS-rast-29 ) ;
19225: LD_EXP 36
19229: PPUSH
19230: LD_STRING DS-rast-29
19232: PPUSH
19233: CALL_OW 88
// DialogueOff ;
19237: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
19241: LD_STRING M3
19243: PPUSH
19244: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
19248: LD_ADDR_VAR 0 1
19252: PUSH
19253: LD_INT 22
19255: PUSH
19256: LD_INT 8
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PPUSH
19263: CALL_OW 69
19267: PUSH
19268: FOR_IN
19269: IFFALSE 19285
// SetSide ( i , 2 ) ;
19271: LD_VAR 0 1
19275: PPUSH
19276: LD_INT 2
19278: PPUSH
19279: CALL_OW 235
19283: GO 19268
19285: POP
19286: POP
// end ;
19287: PPOPN 1
19289: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
19290: LD_EXP 23
19294: PUSH
19295: LD_EXP 12
19299: NOT
19300: AND
19301: PUSH
19302: LD_EXP 29
19306: AND
19307: IFFALSE 19398
19309: GO 19311
19311: DISABLE
19312: LD_INT 0
19314: PPUSH
// begin canRolfJoin := false ;
19315: LD_ADDR_EXP 29
19319: PUSH
19320: LD_INT 0
19322: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
19323: LD_STRING M3
19325: PPUSH
19326: CALL_OW 337
// for i in rolfSquad do
19330: LD_ADDR_VAR 0 1
19334: PUSH
19335: LD_EXP 47
19339: PUSH
19340: FOR_IN
19341: IFFALSE 19396
// begin ComExit ( i ) ;
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL 63542 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
19352: LD_VAR 0 1
19356: PPUSH
19357: LD_INT 147
19359: PPUSH
19360: LD_INT 162
19362: PPUSH
19363: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
19367: LD_VAR 0 1
19371: PPUSH
19372: LD_INT 1050
19374: PPUSH
19375: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
19379: LD_VAR 0 1
19383: PPUSH
19384: LD_INT 103
19386: PPUSH
19387: LD_INT 162
19389: PPUSH
19390: CALL_OW 174
// end ;
19394: GO 19340
19396: POP
19397: POP
// end ;
19398: PPOPN 1
19400: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
19401: LD_EXP 3
19405: PUSH
19406: LD_EXP 43
19410: PPUSH
19411: CALL_OW 256
19415: PUSH
19416: LD_INT 400
19418: LESS
19419: AND
19420: PUSH
19421: LD_EXP 12
19425: NOT
19426: AND
19427: PUSH
19428: LD_EXP 29
19432: AND
19433: IFFALSE 19707
19435: GO 19437
19437: DISABLE
19438: LD_INT 0
19440: PPUSH
// begin DialogueOn ;
19441: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
19445: LD_EXP 43
19449: PPUSH
19450: LD_STRING DRf-rast-f-11
19452: PPUSH
19453: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
19457: LD_EXP 43
19461: PPUSH
19462: LD_STRING DRf-rast-f-12
19464: PPUSH
19465: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
19469: LD_EXP 43
19473: PPUSH
19474: LD_STRING DRf-rast-f-13
19476: PPUSH
19477: CALL_OW 94
// DialogueOff ;
19481: CALL_OW 7
// KillUnit ( Rolf ) ;
19485: LD_EXP 43
19489: PPUSH
19490: CALL_OW 66
// wait ( 0 0$1 ) ;
19494: LD_INT 35
19496: PPUSH
19497: CALL_OW 67
// if not IsOk ( Givi ) then
19501: LD_EXP 31
19505: PPUSH
19506: CALL_OW 302
19510: NOT
19511: IFFALSE 19515
// exit ;
19513: GO 19707
// DialogueOn ;
19515: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
19519: LD_EXP 31
19523: PPUSH
19524: LD_STRING DG-rast-f-14
19526: PPUSH
19527: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
19531: LD_EXP 31
19535: PPUSH
19536: LD_STRING DG-rast-f-15
19538: PPUSH
19539: CALL_OW 88
// if IsOk ( Kaia ) then
19543: LD_EXP 35
19547: PPUSH
19548: CALL_OW 302
19552: IFFALSE 19568
// Say ( Kaia , DK-rast-f-16 ) else
19554: LD_EXP 35
19558: PPUSH
19559: LD_STRING DK-rast-f-16
19561: PPUSH
19562: CALL_OW 88
19566: GO 19655
// if heikeSecondSquad then
19568: LD_EXP 45
19572: IFFALSE 19655
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
19574: LD_ADDR_VAR 0 1
19578: PUSH
19579: LD_EXP 45
19583: PUSH
19584: LD_INT 1
19586: PPUSH
19587: LD_EXP 45
19591: PPUSH
19592: CALL_OW 12
19596: ARRAY
19597: ST_TO_ADDR
// case GetSex ( random ) of 1 :
19598: LD_VAR 0 1
19602: PPUSH
19603: CALL_OW 258
19607: PUSH
19608: LD_INT 1
19610: DOUBLE
19611: EQUAL
19612: IFTRUE 19616
19614: GO 19631
19616: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
19617: LD_VAR 0 1
19621: PPUSH
19622: LD_STRING DArm-rast-f-a-16
19624: PPUSH
19625: CALL_OW 88
19629: GO 19655
19631: LD_INT 2
19633: DOUBLE
19634: EQUAL
19635: IFTRUE 19639
19637: GO 19654
19639: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
19640: LD_VAR 0 1
19644: PPUSH
19645: LD_STRING DArf-rast-f-a-16
19647: PPUSH
19648: CALL_OW 88
19652: GO 19655
19654: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
19655: LD_EXP 31
19659: PPUSH
19660: LD_STRING DG-rast-f-17
19662: PPUSH
19663: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
19667: LD_EXP 31
19671: PPUSH
19672: LD_STRING DG-rast-f-18
19674: PPUSH
19675: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
19679: LD_EXP 31
19683: PPUSH
19684: LD_STRING DG-rast-f-19
19686: PPUSH
19687: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
19691: LD_EXP 31
19695: PPUSH
19696: LD_STRING DG-rast-f-20
19698: PPUSH
19699: CALL_OW 88
// DialogueOff ;
19703: CALL_OW 7
// end ;
19707: PPOPN 1
19709: END
// every 0 0$1 trigger SeeArea ( 2 , ruMainBase ) do
19710: LD_INT 2
19712: PPUSH
19713: LD_INT 10
19715: PPUSH
19716: CALL_OW 294
19720: IFFALSE 19793
19722: GO 19724
19724: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
19725: LD_EXP 31
19729: PPUSH
19730: LD_STRING DG-Len-1
19732: PPUSH
19733: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
19737: LD_EXP 41
19741: PPUSH
19742: LD_STRING DKs-Len-2
19744: PPUSH
19745: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
19749: LD_EXP 41
19753: PPUSH
19754: LD_STRING DKs-Len-3
19756: PPUSH
19757: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
19761: LD_EXP 30
19765: PPUSH
19766: LD_STRING DH-Len-4
19768: PPUSH
19769: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
19773: LD_EXP 35
19777: PPUSH
19778: LD_STRING DK-Len-5
19780: PPUSH
19781: CALL_OW 88
// leninSpotted := true ;
19785: LD_ADDR_EXP 14
19789: PUSH
19790: LD_INT 1
19792: ST_TO_ADDR
// end ;
19793: END
// every 0 0$1 trigger bergkampfArrived and tick > [ 21 21$00 , 20 20$00 , 19 19$00 , 18 18$00 ] [ Difficulty ] do var i , tmp , inOmarBase ;
19794: LD_EXP 3
19798: PUSH
19799: LD_OWVAR 1
19803: PUSH
19804: LD_INT 44100
19806: PUSH
19807: LD_INT 42000
19809: PUSH
19810: LD_INT 39900
19812: PUSH
19813: LD_INT 37800
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: PUSH
19822: LD_OWVAR 67
19826: ARRAY
19827: GREATER
19828: AND
19829: IFFALSE 20444
19831: GO 19833
19833: DISABLE
19834: LD_INT 0
19836: PPUSH
19837: PPUSH
19838: PPUSH
// begin PrepareOmarSquad ;
19839: CALL 3985 0 0
// repeat wait ( 0 0$1 ) ;
19843: LD_INT 35
19845: PPUSH
19846: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
19850: LD_INT 14
19852: PPUSH
19853: LD_INT 22
19855: PUSH
19856: LD_INT 3
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: LD_INT 21
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 59
19878: PUSH
19879: EMPTY
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PPUSH
19891: CALL_OW 70
19895: NOT
19896: IFFALSE 19843
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
19898: LD_ADDR_VAR 0 2
19902: PUSH
19903: LD_INT 14
19905: PPUSH
19906: LD_INT 22
19908: PUSH
19909: LD_INT 2
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PPUSH
19916: CALL_OW 70
19920: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
19921: LD_ADDR_VAR 0 3
19925: PUSH
19926: LD_VAR 0 2
19930: PUSH
19931: LD_INT 0
19933: GREATER
19934: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
19935: LD_VAR 0 2
19939: PPUSH
19940: LD_INT 21
19942: PUSH
19943: LD_INT 3
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PPUSH
19950: CALL_OW 72
19954: IFFALSE 20039
// begin Say ( Omar , DOm-Base-1b ) ;
19956: LD_EXP 40
19960: PPUSH
19961: LD_STRING DOm-Base-1b
19963: PPUSH
19964: CALL_OW 88
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
19968: LD_ADDR_VAR 0 1
19972: PUSH
19973: LD_VAR 0 2
19977: PPUSH
19978: LD_INT 21
19980: PUSH
19981: LD_INT 3
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PPUSH
19988: CALL_OW 72
19992: PUSH
19993: FOR_IN
19994: IFFALSE 20035
// begin if UnitsInside ( i ) then
19996: LD_VAR 0 1
20000: PPUSH
20001: CALL_OW 313
20005: IFFALSE 20021
// ComExitBuilding ( UnitsInside ( i ) ) ;
20007: LD_VAR 0 1
20011: PPUSH
20012: CALL_OW 313
20016: PPUSH
20017: CALL_OW 122
// SetSide ( i , 5 ) ;
20021: LD_VAR 0 1
20025: PPUSH
20026: LD_INT 5
20028: PPUSH
20029: CALL_OW 235
// end ;
20033: GO 19993
20035: POP
20036: POP
// end else
20037: GO 20086
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
20039: LD_VAR 0 2
20043: PPUSH
20044: LD_INT 21
20046: PUSH
20047: LD_INT 2
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PPUSH
20054: CALL_OW 72
20058: IFFALSE 20074
// Say ( Omar , DOm-Base-1v ) else
20060: LD_EXP 40
20064: PPUSH
20065: LD_STRING DOm-Base-1v
20067: PPUSH
20068: CALL_OW 88
20072: GO 20086
// Say ( Omar , DOm-Base-1h ) ;
20074: LD_EXP 40
20078: PPUSH
20079: LD_STRING DOm-Base-1h
20081: PPUSH
20082: CALL_OW 88
// for i in omarSquad do
20086: LD_ADDR_VAR 0 1
20090: PUSH
20091: LD_EXP 48
20095: PUSH
20096: FOR_IN
20097: IFFALSE 20128
// if GetLives ( i ) < 750 then
20099: LD_VAR 0 1
20103: PPUSH
20104: CALL_OW 256
20108: PUSH
20109: LD_INT 750
20111: LESS
20112: IFFALSE 20126
// SetLives ( i , 1000 ) ;
20114: LD_VAR 0 1
20118: PPUSH
20119: LD_INT 1000
20121: PPUSH
20122: CALL_OW 234
20126: GO 20096
20128: POP
20129: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
20130: LD_ADDR_VAR 0 1
20134: PUSH
20135: LD_INT 14
20137: PPUSH
20138: LD_INT 21
20140: PUSH
20141: LD_INT 3
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PPUSH
20148: CALL_OW 70
20152: PUSH
20153: FOR_IN
20154: IFFALSE 20170
// SetSide ( i , 5 ) ;
20156: LD_VAR 0 1
20160: PPUSH
20161: LD_INT 5
20163: PPUSH
20164: CALL_OW 235
20168: GO 20153
20170: POP
20171: POP
// wait ( 0 0$3 ) ;
20172: LD_INT 105
20174: PPUSH
20175: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
20179: LD_INT 5
20181: PPUSH
20182: LD_INT 2
20184: PPUSH
20185: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
20189: LD_EXP 40
20193: PPUSH
20194: CALL_OW 87
// DialogueOn ;
20198: CALL_OW 6
// if inOmarBase then
20202: LD_VAR 0 3
20206: IFFALSE 20264
// begin Say ( Omar , DOm-Veh-1a ) ;
20208: LD_EXP 40
20212: PPUSH
20213: LD_STRING DOm-Veh-1a
20215: PPUSH
20216: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
20220: LD_EXP 40
20224: PPUSH
20225: LD_STRING DOm-Veh-2a
20227: PPUSH
20228: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
20232: LD_EXP 40
20236: PPUSH
20237: LD_STRING DOm-Veh-3a
20239: PPUSH
20240: CALL_OW 88
// if mortarConstructed then
20244: LD_EXP 15
20248: IFFALSE 20262
// Say ( Omar , DOm-Veh-4a ) ;
20250: LD_EXP 40
20254: PPUSH
20255: LD_STRING DOm-Veh-4a
20257: PPUSH
20258: CALL_OW 88
// end else
20262: GO 20318
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
20264: LD_EXP 40
20268: PPUSH
20269: LD_STRING DOm-Veh-1
20271: PPUSH
20272: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
20276: LD_EXP 40
20280: PPUSH
20281: LD_STRING DOm-Veh-2
20283: PPUSH
20284: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
20288: LD_EXP 40
20292: PPUSH
20293: LD_STRING DOm-Veh-3
20295: PPUSH
20296: CALL_OW 94
// if mortarConstructed then
20300: LD_EXP 15
20304: IFFALSE 20318
// SayRadio ( Omar , DOm-Veh-4 ) ;
20306: LD_EXP 40
20310: PPUSH
20311: LD_STRING DOm-Veh-4
20313: PPUSH
20314: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
20318: LD_EXP 30
20322: PPUSH
20323: LD_STRING DH-Veh-5
20325: PPUSH
20326: CALL_OW 88
// if IsOk ( Kurt ) then
20330: LD_EXP 41
20334: PPUSH
20335: CALL_OW 302
20339: IFFALSE 20389
// begin Say ( Kurt , DKs-Veh-6 ) ;
20341: LD_EXP 41
20345: PPUSH
20346: LD_STRING DKs-Veh-6
20348: PPUSH
20349: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
20353: LD_EXP 41
20357: PPUSH
20358: LD_STRING DKs-Veh-7
20360: PPUSH
20361: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
20365: LD_EXP 31
20369: PPUSH
20370: LD_STRING DG-Veh-8
20372: PPUSH
20373: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
20377: LD_EXP 32
20381: PPUSH
20382: LD_STRING DM-Veh-9
20384: PPUSH
20385: CALL_OW 88
// end ; DialogueOff ;
20389: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
20393: LD_STRING M4
20395: PPUSH
20396: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
20400: LD_EXP 40
20404: PPUSH
20405: LD_INT 341
20407: PPUSH
20408: LD_INT 232
20410: PPUSH
20411: CALL_OW 428
20415: PPUSH
20416: CALL_OW 120
// omarArrived := true ;
20420: LD_ADDR_EXP 6
20424: PUSH
20425: LD_INT 1
20427: ST_TO_ADDR
// omarScriptBase := true ;
20428: LD_ADDR_EXP 10
20432: PUSH
20433: LD_INT 1
20435: ST_TO_ADDR
// omarWantVehicles := true ;
20436: LD_ADDR_EXP 18
20440: PUSH
20441: LD_INT 1
20443: ST_TO_ADDR
// end ;
20444: PPOPN 3
20446: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
20447: LD_INT 10
20449: PPUSH
20450: LD_INT 22
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PPUSH
20460: CALL_OW 70
20464: PUSH
20465: LD_EXP 6
20469: AND
20470: PUSH
20471: LD_EXP 40
20475: PPUSH
20476: CALL_OW 302
20480: AND
20481: PUSH
20482: LD_EXP 23
20486: NOT
20487: AND
20488: IFFALSE 20505
20490: GO 20492
20492: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
20493: LD_EXP 40
20497: PPUSH
20498: LD_STRING DOm-Lenin
20500: PPUSH
20501: CALL_OW 94
20505: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
20506: LD_EXP 43
20510: PPUSH
20511: CALL_OW 302
20515: PUSH
20516: LD_EXP 12
20520: AND
20521: PUSH
20522: LD_EXP 6
20526: AND
20527: IFFALSE 20631
20529: GO 20531
20531: DISABLE
// begin wait ( 0 0$20 ) ;
20532: LD_INT 700
20534: PPUSH
20535: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
20539: LD_EXP 43
20543: PPUSH
20544: CALL_OW 87
// DialogueOn ;
20548: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
20552: LD_EXP 43
20556: PPUSH
20557: LD_STRING DRf-Veh-10
20559: PPUSH
20560: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
20564: LD_EXP 43
20568: PPUSH
20569: LD_STRING DRf-Veh-11
20571: PPUSH
20572: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
20576: LD_EXP 30
20580: PPUSH
20581: LD_STRING DH-Veh-12
20583: PPUSH
20584: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
20588: LD_EXP 30
20592: PPUSH
20593: LD_STRING DH-Veh-13
20595: PPUSH
20596: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
20600: LD_EXP 43
20604: PPUSH
20605: LD_STRING DRf-Veh-14
20607: PPUSH
20608: CALL_OW 88
// DialogueOff ;
20612: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
20616: LD_STRING M5
20618: PPUSH
20619: CALL_OW 337
// rolfWantVehicles := true ;
20623: LD_ADDR_EXP 17
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// end ;
20631: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
20632: LD_EXP 18
20636: IFFALSE 21335
20638: GO 20640
20640: DISABLE
20641: LD_INT 0
20643: PPUSH
20644: PPUSH
20645: PPUSH
20646: PPUSH
20647: PPUSH
20648: PPUSH
// begin wait ( 0 0$3 ) ;
20649: LD_INT 105
20651: PPUSH
20652: CALL_OW 67
// Hint ( OmarVehicles ) ;
20656: LD_STRING OmarVehicles
20658: PPUSH
20659: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
20663: LD_INT 16
20665: PPUSH
20666: LD_INT 1
20668: PPUSH
20669: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
20673: LD_INT 35
20675: PPUSH
20676: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
20680: LD_ADDR_EXP 20
20684: PUSH
20685: LD_EXP 20
20689: PUSH
20690: LD_INT 35
20692: MINUS
20693: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
20694: LD_EXP 20
20698: PUSH
20699: LD_INT 0
20701: LESSEQUAL
20702: IFFALSE 20802
// begin display_strings := [ ] ;
20704: LD_ADDR_OWVAR 47
20708: PUSH
20709: EMPTY
20710: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
20711: LD_STRING M4a
20713: PPUSH
20714: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
20718: LD_INT 16
20720: PPUSH
20721: LD_INT 0
20723: PPUSH
20724: CALL_OW 424
// DialogueOn ;
20728: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
20732: LD_EXP 40
20736: PPUSH
20737: LD_STRING DOm-Veh-b-15
20739: PPUSH
20740: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
20744: LD_EXP 30
20748: PPUSH
20749: LD_STRING DH-Veh-b-16
20751: PPUSH
20752: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
20756: LD_EXP 40
20760: PPUSH
20761: LD_STRING DOm-Veh-b-17
20763: PPUSH
20764: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
20768: LD_EXP 35
20772: PPUSH
20773: LD_STRING DK-Veh-b-18
20775: PPUSH
20776: CALL_OW 88
// DialogueOff ;
20780: CALL_OW 7
// omarAttack := true ;
20784: LD_ADDR_EXP 23
20788: PUSH
20789: LD_INT 1
20791: ST_TO_ADDR
// omarScriptBase := false ;
20792: LD_ADDR_EXP 10
20796: PUSH
20797: LD_INT 0
20799: ST_TO_ADDR
// exit ;
20800: GO 21335
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
20802: LD_EXP 21
20806: PUSH
20807: LD_INT 16
20809: PPUSH
20810: LD_INT 22
20812: PUSH
20813: LD_INT 2
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 21
20822: PUSH
20823: LD_INT 2
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 33
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 58
20842: PUSH
20843: EMPTY
20844: LIST
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: PPUSH
20852: CALL_OW 70
20856: LESSEQUAL
20857: IFFALSE 20673
// omarWaitingForVehiclesTimer := 0 0$00 ;
20859: LD_ADDR_EXP 20
20863: PUSH
20864: LD_INT 0
20866: ST_TO_ADDR
// display_strings := [ ] ;
20867: LD_ADDR_OWVAR 47
20871: PUSH
20872: EMPTY
20873: ST_TO_ADDR
// DialogueOn ;
20874: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
20878: LD_EXP 40
20882: PPUSH
20883: LD_STRING DOm-Veh-a-15
20885: PPUSH
20886: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
20890: LD_EXP 35
20894: PPUSH
20895: LD_STRING DK-Veh-a-16
20897: PPUSH
20898: CALL_OW 88
// DialogueOff ;
20902: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
20906: LD_STRING M4a
20908: PPUSH
20909: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
20913: LD_INT 16
20915: PPUSH
20916: LD_INT 0
20918: PPUSH
20919: CALL_OW 424
// omarHasVehicles := true ;
20923: LD_ADDR_EXP 22
20927: PUSH
20928: LD_INT 1
20930: ST_TO_ADDR
// wait ( 1 1$00 ) ;
20931: LD_INT 2100
20933: PPUSH
20934: CALL_OW 67
// omarAttack := true ;
20938: LD_ADDR_EXP 23
20942: PUSH
20943: LD_INT 1
20945: ST_TO_ADDR
// omarScriptBase := false ;
20946: LD_ADDR_EXP 10
20950: PUSH
20951: LD_INT 0
20953: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
20954: LD_ADDR_VAR 0 2
20958: PUSH
20959: LD_INT 16
20961: PPUSH
20962: LD_INT 22
20964: PUSH
20965: LD_INT 2
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 21
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 33
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 58
20994: PUSH
20995: EMPTY
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: PPUSH
21004: CALL_OW 70
21008: ST_TO_ADDR
// for i in tmp do
21009: LD_ADDR_VAR 0 1
21013: PUSH
21014: LD_VAR 0 2
21018: PUSH
21019: FOR_IN
21020: IFFALSE 21048
// begin SetFuel ( i , 100 ) ;
21022: LD_VAR 0 1
21026: PPUSH
21027: LD_INT 100
21029: PPUSH
21030: CALL_OW 240
// SetSide ( i , 5 ) ;
21034: LD_VAR 0 1
21038: PPUSH
21039: LD_INT 5
21041: PPUSH
21042: CALL_OW 235
// end ;
21046: GO 21019
21048: POP
21049: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
21050: LD_ADDR_VAR 0 3
21054: PUSH
21055: LD_EXP 48
21059: PPUSH
21060: LD_INT 25
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PPUSH
21070: CALL_OW 72
21074: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
21075: LD_ADDR_VAR 0 4
21079: PUSH
21080: LD_EXP 48
21084: PPUSH
21085: LD_INT 3
21087: PUSH
21088: LD_INT 55
21090: PUSH
21091: EMPTY
21092: LIST
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 25
21100: PUSH
21101: LD_INT 3
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PPUSH
21112: CALL_OW 72
21116: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
21117: LD_ADDR_VAR 0 5
21121: PUSH
21122: LD_INT 324
21124: PPUSH
21125: LD_INT 234
21127: PPUSH
21128: CALL_OW 428
21132: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
21133: LD_ADDR_VAR 0 6
21137: PUSH
21138: LD_INT 334
21140: PPUSH
21141: LD_INT 241
21143: PPUSH
21144: CALL_OW 428
21148: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
21149: LD_VAR 0 6
21153: PPUSH
21154: CALL_OW 313
21158: PPUSH
21159: CALL_OW 122
// if eng then
21163: LD_VAR 0 3
21167: IFFALSE 21275
// begin if eng + mech <= tmp then
21169: LD_VAR 0 3
21173: PUSH
21174: LD_VAR 0 4
21178: PLUS
21179: PUSH
21180: LD_VAR 0 2
21184: LESSEQUAL
21185: IFFALSE 21240
// begin ComEnterUnit ( eng , workshop ) ;
21187: LD_VAR 0 3
21191: PPUSH
21192: LD_VAR 0 5
21196: PPUSH
21197: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
21201: LD_VAR 0 3
21205: PPUSH
21206: LD_INT 3
21208: PPUSH
21209: CALL_OW 183
// AddComExitBuilding ( eng ) ;
21213: LD_VAR 0 3
21217: PPUSH
21218: CALL_OW 182
// mech := mech union eng ;
21222: LD_ADDR_VAR 0 4
21226: PUSH
21227: LD_VAR 0 4
21231: PUSH
21232: LD_VAR 0 3
21236: UNION
21237: ST_TO_ADDR
// end else
21238: GO 21275
// begin ComEnterUnit ( eng , armoury ) ;
21240: LD_VAR 0 3
21244: PPUSH
21245: LD_VAR 0 6
21249: PPUSH
21250: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
21254: LD_VAR 0 3
21258: PPUSH
21259: LD_INT 1
21261: PPUSH
21262: CALL_OW 183
// AddComExitBuilding ( eng ) ;
21266: LD_VAR 0 3
21270: PPUSH
21271: CALL_OW 182
// end ; end ; for i := 1 to tmp do
21275: LD_ADDR_VAR 0 1
21279: PUSH
21280: DOUBLE
21281: LD_INT 1
21283: DEC
21284: ST_TO_ADDR
21285: LD_VAR 0 2
21289: PUSH
21290: FOR_TO
21291: IFFALSE 21333
// if i <= mech then
21293: LD_VAR 0 1
21297: PUSH
21298: LD_VAR 0 4
21302: LESSEQUAL
21303: IFFALSE 21331
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
21305: LD_VAR 0 4
21309: PUSH
21310: LD_VAR 0 1
21314: ARRAY
21315: PPUSH
21316: LD_VAR 0 2
21320: PUSH
21321: LD_VAR 0 1
21325: ARRAY
21326: PPUSH
21327: CALL_OW 180
21331: GO 21290
21333: POP
21334: POP
// end ;
21335: PPOPN 6
21337: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i ;
21338: LD_EXP 43
21342: PPUSH
21343: CALL_OW 302
21347: PUSH
21348: LD_EXP 17
21352: AND
21353: IFFALSE 21811
21355: GO 21357
21357: DISABLE
21358: LD_INT 0
21360: PPUSH
// begin repeat wait ( 0 0$1 ) ;
21361: LD_INT 35
21363: PPUSH
21364: CALL_OW 67
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
21368: LD_ADDR_EXP 19
21372: PUSH
21373: LD_EXP 19
21377: PUSH
21378: LD_INT 35
21380: MINUS
21381: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 or omarAttack then
21382: LD_EXP 19
21386: PUSH
21387: LD_INT 0
21389: LESSEQUAL
21390: PUSH
21391: LD_EXP 23
21395: OR
21396: IFFALSE 21614
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
21398: LD_ADDR_EXP 19
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// display_strings := [ ] ;
21406: LD_ADDR_OWVAR 47
21410: PUSH
21411: EMPTY
21412: ST_TO_ADDR
// DialogueOn ;
21413: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
21417: LD_EXP 43
21421: PPUSH
21422: LD_STRING DRf-Veh-b-19
21424: PPUSH
21425: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
21429: LD_EXP 43
21433: PPUSH
21434: LD_STRING DRf-Veh-b-20
21436: PPUSH
21437: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
21441: LD_EXP 30
21445: PPUSH
21446: LD_STRING DH-Veh-b-21
21448: PPUSH
21449: CALL_OW 88
// if IsOk ( Givi ) then
21453: LD_EXP 31
21457: PPUSH
21458: CALL_OW 302
21462: IFFALSE 21500
// begin Say ( Givi , DG-Veh-b-22 ) ;
21464: LD_EXP 31
21468: PPUSH
21469: LD_STRING DG-Veh-b-22
21471: PPUSH
21472: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
21476: LD_EXP 30
21480: PPUSH
21481: LD_STRING DH-Veh-b-23
21483: PPUSH
21484: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
21488: LD_EXP 31
21492: PPUSH
21493: LD_STRING DG-Veh-b-24
21495: PPUSH
21496: CALL_OW 88
// end ; DialogueOff ;
21500: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
21504: LD_STRING M5a
21506: PPUSH
21507: CALL_OW 337
// for i in rolfSquad do
21511: LD_ADDR_VAR 0 1
21515: PUSH
21516: LD_EXP 47
21520: PUSH
21521: FOR_IN
21522: IFFALSE 21588
// begin SetSide ( i , 8 ) ;
21524: LD_VAR 0 1
21528: PPUSH
21529: LD_INT 8
21531: PPUSH
21532: CALL_OW 235
// if IsDriver ( i ) then
21536: LD_VAR 0 1
21540: PPUSH
21541: CALL 60753 0 1
21545: IFFALSE 21566
// SetSide ( IsInUnit ( i ) , 8 ) else
21547: LD_VAR 0 1
21551: PPUSH
21552: CALL_OW 310
21556: PPUSH
21557: LD_INT 8
21559: PPUSH
21560: CALL_OW 235
21564: GO 21586
// if IsInUnit ( i ) then
21566: LD_VAR 0 1
21570: PPUSH
21571: CALL_OW 310
21575: IFFALSE 21586
// ComExitBuilding ( i ) ;
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 122
// end ;
21586: GO 21521
21588: POP
21589: POP
// wait ( 0 0$1 ) ;
21590: LD_INT 35
21592: PPUSH
21593: CALL_OW 67
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
21597: LD_EXP 47
21601: PPUSH
21602: LD_INT 229
21604: PPUSH
21605: LD_INT 154
21607: PPUSH
21608: CALL_OW 114
// exit ;
21612: GO 21811
// end ; if IsDead ( Rolf ) then
21614: LD_EXP 43
21618: PPUSH
21619: CALL_OW 301
21623: IFFALSE 21634
// begin ChangeMissionObjectives ( M5a ) ;
21625: LD_STRING M5a
21627: PPUSH
21628: CALL_OW 337
// exit ;
21632: GO 21811
// end ; until Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) ;
21634: LD_EXP 47
21638: PPUSH
21639: LD_INT 55
21641: PUSH
21642: EMPTY
21643: LIST
21644: PPUSH
21645: CALL_OW 72
21649: PPUSH
21650: CALL 27797 0 1
21654: PUSH
21655: LD_EXP 47
21659: PPUSH
21660: CALL 27797 0 1
21664: EQUAL
21665: IFFALSE 21361
// rolfWaitingForVehiclesTimer := 0 0$00 ;
21667: LD_ADDR_EXP 19
21671: PUSH
21672: LD_INT 0
21674: ST_TO_ADDR
// display_strings := [ ] ;
21675: LD_ADDR_OWVAR 47
21679: PUSH
21680: EMPTY
21681: ST_TO_ADDR
// DialogueOn ;
21682: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21686: LD_EXP 43
21690: PPUSH
21691: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
21695: LD_EXP 43
21699: PPUSH
21700: LD_STRING DRf-Veh-a-17
21702: PPUSH
21703: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
21707: LD_EXP 30
21711: PPUSH
21712: LD_STRING DH-08-Veh-a-18
21714: PPUSH
21715: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
21719: LD_EXP 43
21723: PPUSH
21724: LD_STRING DRf-Veh-a-19
21726: PPUSH
21727: CALL_OW 88
// DialogueOff ;
21731: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
21735: LD_STRING M5a
21737: PPUSH
21738: CALL_OW 337
// rolfHasVehicles := true ;
21742: LD_ADDR_EXP 16
21746: PUSH
21747: LD_INT 1
21749: ST_TO_ADDR
// for i in rolfSquad do
21750: LD_ADDR_VAR 0 1
21754: PUSH
21755: LD_EXP 47
21759: PUSH
21760: FOR_IN
21761: IFFALSE 21794
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
21763: LD_VAR 0 1
21767: PPUSH
21768: CALL_OW 310
21772: PPUSH
21773: LD_INT 8
21775: PPUSH
21776: CALL_OW 235
// SetSide ( i , 8 ) ;
21780: LD_VAR 0 1
21784: PPUSH
21785: LD_INT 8
21787: PPUSH
21788: CALL_OW 235
// end ;
21792: GO 21760
21794: POP
21795: POP
// ComAgressiveMove ( rolfSquad , 229 , 154 ) ;
21796: LD_EXP 47
21800: PPUSH
21801: LD_INT 229
21803: PPUSH
21804: LD_INT 154
21806: PPUSH
21807: CALL_OW 114
// end ;
21811: PPOPN 1
21813: END
// every 0 0$1 trigger leninSpotted do
21814: LD_EXP 14
21818: IFFALSE 21906
21820: GO 21822
21822: DISABLE
// begin wait ( 0 0$10 ) ;
21823: LD_INT 350
21825: PPUSH
21826: CALL_OW 67
// DialogueOn ;
21830: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
21834: LD_EXP 42
21838: PPUSH
21839: LD_STRING DA-Transmission-1
21841: PPUSH
21842: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
21846: LD_EXP 49
21850: PPUSH
21851: LD_STRING DMzw-Transmission-2
21853: PPUSH
21854: CALL_OW 94
// if gaidarKilled then
21858: LD_EXP 7
21862: IFFALSE 21878
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
21864: LD_EXP 49
21868: PPUSH
21869: LD_STRING DMzw-Transmission-3
21871: PPUSH
21872: CALL_OW 94
21876: GO 21890
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
21878: LD_EXP 49
21882: PPUSH
21883: LD_STRING DMzw-Transmission-a-3
21885: PPUSH
21886: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
21890: LD_EXP 30
21894: PPUSH
21895: LD_STRING DH-Transmission-4
21897: PPUSH
21898: CALL_OW 88
// DialogueOff ;
21902: CALL_OW 7
// end ;
21906: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
21907: LD_INT 22
21909: PUSH
21910: LD_INT 3
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 25
21919: PUSH
21920: LD_INT 9
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 101
21929: PUSH
21930: LD_INT 2
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: LIST
21941: PPUSH
21942: CALL_OW 69
21946: PUSH
21947: LD_EXP 30
21951: PPUSH
21952: CALL_OW 302
21956: AND
21957: IFFALSE 22022
21959: GO 21961
21961: DISABLE
// begin CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
21962: LD_INT 22
21964: PUSH
21965: LD_INT 3
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 25
21974: PUSH
21975: LD_INT 9
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 101
21984: PUSH
21985: LD_INT 2
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: LIST
21996: PPUSH
21997: CALL_OW 69
22001: PUSH
22002: LD_INT 1
22004: ARRAY
22005: PPUSH
22006: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
22010: LD_EXP 30
22014: PPUSH
22015: LD_STRING DH-Rubazooka-1
22017: PPUSH
22018: CALL_OW 88
// end ;
22022: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
22023: LD_INT 19
22025: PPUSH
22026: LD_INT 22
22028: PUSH
22029: LD_INT 3
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PPUSH
22036: CALL_OW 70
22040: PUSH
22041: LD_EXP 28
22045: AND
22046: IFFALSE 22097
22048: GO 22050
22050: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
22051: LD_INT 19
22053: PPUSH
22054: LD_INT 22
22056: PUSH
22057: LD_INT 3
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PPUSH
22064: CALL_OW 70
22068: PPUSH
22069: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
22073: LD_EXP 30
22077: PPUSH
22078: LD_STRING DH-Ruattfirst-1
22080: PPUSH
22081: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
22085: LD_EXP 30
22089: PPUSH
22090: LD_STRING DH-Ruattfirst-2
22092: PPUSH
22093: CALL_OW 88
// end ;
22097: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
22098: LD_INT 19
22100: PPUSH
22101: LD_INT 22
22103: PUSH
22104: LD_INT 3
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PPUSH
22111: CALL_OW 70
22115: PUSH
22116: LD_EXP 28
22120: NOT
22121: AND
22122: IFFALSE 22161
22124: GO 22126
22126: DISABLE
// begin CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
22127: LD_INT 19
22129: PPUSH
22130: LD_INT 22
22132: PUSH
22133: LD_INT 3
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PPUSH
22140: CALL_OW 70
22144: PPUSH
22145: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
22149: LD_EXP 30
22153: PPUSH
22154: LD_STRING DH-Ruattnext-1
22156: PPUSH
22157: CALL_OW 88
// end ;
22161: END
// every 0 0$1 trigger GetResourceType ( GetBase ( arDepot ) , mat_oil ) < 31 and IsOk ( Givi ) do
22162: LD_EXP 44
22166: PPUSH
22167: CALL_OW 274
22171: PPUSH
22172: LD_INT 2
22174: PPUSH
22175: CALL_OW 275
22179: PUSH
22180: LD_INT 31
22182: LESS
22183: PUSH
22184: LD_EXP 31
22188: PPUSH
22189: CALL_OW 302
22193: AND
22194: IFFALSE 22276
22196: GO 22198
22198: DISABLE
// begin DialogueOn ;
22199: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
22203: LD_EXP 30
22207: PPUSH
22208: LD_STRING DH-Fuel-1
22210: PPUSH
22211: CALL_OW 88
// Say ( Givi , DG-Fuel-2 ) ;
22215: LD_EXP 31
22219: PPUSH
22220: LD_STRING DG-Fuel-2
22222: PPUSH
22223: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
22227: LD_EXP 31
22231: PPUSH
22232: LD_STRING DG-Fuel-3
22234: PPUSH
22235: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
22239: LD_EXP 31
22243: PPUSH
22244: LD_STRING DG-Fuel-4
22246: PPUSH
22247: CALL_OW 88
// DialogueOff ;
22251: CALL_OW 7
// Query ( QOil ) ;
22255: LD_STRING QOil
22257: PPUSH
22258: CALL_OW 97
// SetAreaMapShow ( oilArea , 1 ) ;
22262: LD_INT 20
22264: PPUSH
22265: LD_INT 1
22267: PPUSH
22268: CALL_OW 424
// GoForOil ( ) ;
22272: CALL 6573 0 0
// end ;
22276: END
// every 0 0$1 trigger leninSpotted and omarAttack or IsDead ( Morozov ) do
22277: LD_EXP 14
22281: PUSH
22282: LD_EXP 23
22286: AND
22287: PUSH
22288: LD_EXP 49
22292: PPUSH
22293: CALL_OW 301
22297: OR
22298: IFFALSE 22598
22300: GO 22302
22302: DISABLE
// begin wait ( 1 1$45 ) ;
22303: LD_INT 3675
22305: PPUSH
22306: CALL_OW 67
// DialogueOn ;
22310: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
22314: LD_EXP 38
22318: PPUSH
22319: LD_STRING DShar-End-1
22321: PPUSH
22322: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
22326: LD_EXP 30
22330: PPUSH
22331: LD_STRING DH-End-2
22333: PPUSH
22334: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
22338: LD_EXP 38
22342: PPUSH
22343: LD_STRING DShar-End-3
22345: PPUSH
22346: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
22350: LD_EXP 30
22354: PPUSH
22355: LD_STRING DH-End-4
22357: PPUSH
22358: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
22362: LD_EXP 38
22366: PPUSH
22367: LD_STRING DShar-End-5
22369: PPUSH
22370: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
22374: LD_EXP 38
22378: PPUSH
22379: LD_STRING DShar-End-6
22381: PPUSH
22382: CALL_OW 94
// dwait ( 0 0$2 ) ;
22386: LD_INT 70
22388: PPUSH
22389: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
22393: LD_EXP 30
22397: PPUSH
22398: LD_STRING DH-End-7
22400: PPUSH
22401: CALL_OW 88
// DialogueOff ;
22405: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
22409: LD_STRING M6
22411: PPUSH
22412: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
22416: LD_INT 17
22418: PPUSH
22419: LD_INT 1
22421: PPUSH
22422: CALL_OW 424
// escapeAllowed := true ;
22426: LD_ADDR_EXP 24
22430: PUSH
22431: LD_INT 1
22433: ST_TO_ADDR
// wait ( 0 0$2 ) ;
22434: LD_INT 70
22436: PPUSH
22437: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
22441: LD_EXP 41
22445: PPUSH
22446: LD_STRING DKs-End-8
22448: PPUSH
22449: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
22453: LD_EXP 35
22457: PPUSH
22458: LD_STRING DK-End-10
22460: PPUSH
22461: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
22465: LD_EXP 41
22469: PPUSH
22470: LD_STRING DKs-End-9
22472: PPUSH
22473: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
22477: LD_EXP 37
22481: PPUSH
22482: LD_STRING DMar-End-11
22484: PPUSH
22485: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
22489: LD_STRING 05_DrugsTested
22491: PPUSH
22492: LD_EXP 1
22496: PPUSH
22497: CALL_OW 30
22501: IFFALSE 22515
// Say ( Mike , DM-End-12 ) ;
22503: LD_EXP 32
22507: PPUSH
22508: LD_STRING DM-End-12
22510: PPUSH
22511: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
22515: LD_EXP 39
22519: PPUSH
22520: LD_STRING DO-End-13
22522: PPUSH
22523: CALL_OW 88
// if IsOk ( Sophia ) then
22527: LD_EXP 36
22531: PPUSH
22532: CALL_OW 302
22536: IFFALSE 22562
// begin Say ( Sophia , DS-End-15 ) ;
22538: LD_EXP 36
22542: PPUSH
22543: LD_STRING DS-End-15
22545: PPUSH
22546: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
22550: LD_EXP 35
22554: PPUSH
22555: LD_STRING DK-End-16
22557: PPUSH
22558: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
22562: LD_EXP 31
22566: PPUSH
22567: LD_STRING DG-End-17
22569: PPUSH
22570: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
22574: LD_EXP 31
22578: PPUSH
22579: LD_STRING DG-End-18
22581: PPUSH
22582: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
22586: LD_EXP 31
22590: PPUSH
22591: LD_STRING DG-End-19
22593: PPUSH
22594: CALL_OW 88
// end ;
22598: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
22599: LD_EXP 24
22603: IFFALSE 22731
22605: GO 22607
22607: DISABLE
22608: LD_INT 0
22610: PPUSH
22611: PPUSH
// begin enable ;
22612: ENABLE
// display_strings := [ #X106-2 , escapeTimer ] ;
22613: LD_ADDR_OWVAR 47
22617: PUSH
22618: LD_STRING #X106-2
22620: PUSH
22621: LD_EXP 25
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
22630: LD_ADDR_EXP 25
22634: PUSH
22635: LD_EXP 25
22639: PUSH
22640: LD_INT 35
22642: MINUS
22643: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
22644: LD_ADDR_VAR 0 2
22648: PUSH
22649: LD_INT 17
22651: PPUSH
22652: LD_INT 22
22654: PUSH
22655: LD_INT 2
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 21
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 23
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: LIST
22686: PPUSH
22687: CALL_OW 71
22691: ST_TO_ADDR
// if not outsiders then
22692: LD_VAR 0 2
22696: NOT
22697: IFFALSE 22714
// begin escapeAllowed := false ;
22699: LD_ADDR_EXP 24
22703: PUSH
22704: LD_INT 0
22706: ST_TO_ADDR
// disable ;
22707: DISABLE
// MissionWin ;
22708: CALL 22734 0 0
// exit ;
22712: GO 22731
// end ; if escapeTimer <= 0 0$00 then
22714: LD_EXP 25
22718: PUSH
22719: LD_INT 0
22721: LESSEQUAL
22722: IFFALSE 22731
// YouLost ( TimeOut ) ;
22724: LD_STRING TimeOut
22726: PPUSH
22727: CALL_OW 104
// end ;
22731: PPOPN 2
22733: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
22734: LD_INT 0
22736: PPUSH
22737: PPUSH
22738: PPUSH
22739: PPUSH
22740: PPUSH
// Say ( Heike , DH-End-20 ) ;
22741: LD_EXP 30
22745: PPUSH
22746: LD_STRING DH-End-20
22748: PPUSH
22749: CALL_OW 88
// if rolfDied then
22753: LD_EXP 13
22757: IFFALSE 22772
// AddMedal ( med1 , - 1 ) else
22759: LD_STRING med1
22761: PPUSH
22762: LD_INT 1
22764: NEG
22765: PPUSH
22766: CALL_OW 101
22770: GO 22802
// if not canRolfJoin then
22772: LD_EXP 29
22776: NOT
22777: IFFALSE 22792
// AddMedal ( med1 , - 2 ) else
22779: LD_STRING med1
22781: PPUSH
22782: LD_INT 2
22784: NEG
22785: PPUSH
22786: CALL_OW 101
22790: GO 22802
// AddMedal ( med1 , 1 ) ;
22792: LD_STRING med1
22794: PPUSH
22795: LD_INT 1
22797: PPUSH
22798: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
22802: LD_EXP 22
22806: PUSH
22807: LD_EXP 16
22811: AND
22812: IFFALSE 22826
// AddMedal ( med2 , 1 ) else
22814: LD_STRING med2
22816: PPUSH
22817: LD_INT 1
22819: PPUSH
22820: CALL_OW 101
22824: GO 22875
// if omarHasVehicles then
22826: LD_EXP 22
22830: IFFALSE 22845
// AddMedal ( med2 , - 1 ) else
22832: LD_STRING med2
22834: PPUSH
22835: LD_INT 1
22837: NEG
22838: PPUSH
22839: CALL_OW 101
22843: GO 22875
// if rolfHasVehicles then
22845: LD_EXP 16
22849: IFFALSE 22864
// AddMedal ( med2 , - 2 ) else
22851: LD_STRING med2
22853: PPUSH
22854: LD_INT 2
22856: NEG
22857: PPUSH
22858: CALL_OW 101
22862: GO 22875
// AddMedal ( med2 , - 3 ) ;
22864: LD_STRING med2
22866: PPUSH
22867: LD_INT 3
22869: NEG
22870: PPUSH
22871: CALL_OW 101
// if ruLoseCounter >= [ 30 , 45 , 50 , 62 ] [ Difficulty ] and heikeLoseCounter = 0 then
22875: LD_EXP 5
22879: PUSH
22880: LD_INT 30
22882: PUSH
22883: LD_INT 45
22885: PUSH
22886: LD_INT 50
22888: PUSH
22889: LD_INT 62
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: PUSH
22898: LD_OWVAR 67
22902: ARRAY
22903: GREATEREQUAL
22904: PUSH
22905: LD_EXP 26
22909: PUSH
22910: LD_INT 0
22912: EQUAL
22913: AND
22914: IFFALSE 22928
// AddMedal ( med3 , 1 ) else
22916: LD_STRING med3
22918: PPUSH
22919: LD_INT 1
22921: PPUSH
22922: CALL_OW 101
22926: GO 22958
// if heikeLoseCounter then
22928: LD_EXP 26
22932: IFFALSE 22947
// AddMedal ( med3 , - 2 ) else
22934: LD_STRING med3
22936: PPUSH
22937: LD_INT 2
22939: NEG
22940: PPUSH
22941: CALL_OW 101
22945: GO 22958
// AddMedal ( med3 , - 1 ) ;
22947: LD_STRING med3
22949: PPUSH
22950: LD_INT 1
22952: NEG
22953: PPUSH
22954: CALL_OW 101
// GiveMedals ( MAIN ) ;
22958: LD_STRING MAIN
22960: PPUSH
22961: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
22965: LD_INT 22
22967: PUSH
22968: LD_INT 2
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 23
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 21
22987: PUSH
22988: LD_INT 1
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: PPUSH
23000: CALL_OW 69
23004: PPUSH
23005: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
23009: LD_EXP 30
23013: PPUSH
23014: LD_STRING 06_Heike
23016: PPUSH
23017: CALL_OW 38
// if Aviradze then
23021: LD_EXP 42
23025: IFFALSE 23039
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
23027: LD_EXP 42
23031: PPUSH
23032: LD_STRING 06_Aviradze
23034: PPUSH
23035: CALL_OW 38
// if Ibrahim then
23039: LD_EXP 33
23043: IFFALSE 23057
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
23045: LD_EXP 33
23049: PPUSH
23050: LD_STRING 06_Ibrahim
23052: PPUSH
23053: CALL_OW 38
// if Kamil then
23057: LD_EXP 34
23061: IFFALSE 23075
// SaveCharacters ( Kamil , 06_Kamil ) ;
23063: LD_EXP 34
23067: PPUSH
23068: LD_STRING 06_Kamil
23070: PPUSH
23071: CALL_OW 38
// if Sophia then
23075: LD_EXP 36
23079: IFFALSE 23093
// SaveCharacters ( Sophia , 06_Sophia ) ;
23081: LD_EXP 36
23085: PPUSH
23086: LD_STRING 06_Sophia
23088: PPUSH
23089: CALL_OW 38
// if Kaia then
23093: LD_EXP 35
23097: IFFALSE 23111
// SaveCharacters ( Kaia , 06_Kaia ) ;
23099: LD_EXP 35
23103: PPUSH
23104: LD_STRING 06_Kaia
23106: PPUSH
23107: CALL_OW 38
// if Givi then
23111: LD_EXP 31
23115: IFFALSE 23129
// SaveCharacters ( Givi , 06_Givi ) ;
23117: LD_EXP 31
23121: PPUSH
23122: LD_STRING 06_Givi
23124: PPUSH
23125: CALL_OW 38
// if Mike then
23129: LD_EXP 32
23133: IFFALSE 23147
// SaveCharacters ( Mike , 06_Mike ) ;
23135: LD_EXP 32
23139: PPUSH
23140: LD_STRING 06_Mike
23142: PPUSH
23143: CALL_OW 38
// if Markov then
23147: LD_EXP 37
23151: IFFALSE 23165
// SaveCharacters ( Markov , 06_Markov ) ;
23153: LD_EXP 37
23157: PPUSH
23158: LD_STRING 06_Markov
23160: PPUSH
23161: CALL_OW 38
// if Kurt then
23165: LD_EXP 41
23169: IFFALSE 23183
// SaveCharacters ( Kurt , 06_Kurt ) ;
23171: LD_EXP 41
23175: PPUSH
23176: LD_STRING 06_Kurt
23178: PPUSH
23179: CALL_OW 38
// if heikeSecondSquad then
23183: LD_EXP 45
23187: IFFALSE 23201
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
23189: LD_EXP 45
23193: PPUSH
23194: LD_STRING 06_others
23196: PPUSH
23197: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
23201: LD_ADDR_VAR 0 3
23205: PUSH
23206: LD_INT 22
23208: PUSH
23209: LD_INT 2
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 23
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PPUSH
23230: CALL_OW 69
23234: ST_TO_ADDR
// if tmp then
23235: LD_VAR 0 3
23239: IFFALSE 23253
// SaveCharacters ( tmp , 06_apes ) ;
23241: LD_VAR 0 3
23245: PPUSH
23246: LD_STRING 06_apes
23248: PPUSH
23249: CALL_OW 38
// if Rolf then
23253: LD_EXP 43
23257: IFFALSE 23308
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
23259: LD_EXP 43
23263: PPUSH
23264: LD_STRING 06_Rolf
23266: PPUSH
23267: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
23271: LD_STRING enableBioCharacter(BIO_ROLF)
23273: PPUSH
23274: CALL_OW 559
// if rolfSquad diff Rolf then
23278: LD_EXP 47
23282: PUSH
23283: LD_EXP 43
23287: DIFF
23288: IFFALSE 23308
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
23290: LD_EXP 47
23294: PUSH
23295: LD_EXP 43
23299: DIFF
23300: PPUSH
23301: LD_STRING 06_RolfSquad
23303: PPUSH
23304: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
23308: LD_ADDR_VAR 0 3
23312: PUSH
23313: LD_INT 17
23315: PPUSH
23316: LD_INT 21
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PPUSH
23326: CALL_OW 70
23330: ST_TO_ADDR
// if tmp then
23331: LD_VAR 0 3
23335: IFFALSE 23629
// begin tmp2 := [ ] ;
23337: LD_ADDR_VAR 0 4
23341: PUSH
23342: EMPTY
23343: ST_TO_ADDR
// for i in tmp do
23344: LD_ADDR_VAR 0 2
23348: PUSH
23349: LD_VAR 0 3
23353: PUSH
23354: FOR_IN
23355: IFFALSE 23615
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
23357: LD_VAR 0 2
23361: PPUSH
23362: CALL_OW 264
23366: PUSH
23367: LD_INT 32
23369: PUSH
23370: LD_INT 12
23372: PUSH
23373: LD_INT 51
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: LIST
23380: IN
23381: IFFALSE 23518
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
23383: LD_ADDR_VAR 0 5
23387: PUSH
23388: LD_VAR 0 2
23392: PPUSH
23393: LD_INT 1
23395: PPUSH
23396: CALL_OW 289
23400: PUSH
23401: LD_VAR 0 2
23405: PPUSH
23406: LD_INT 2
23408: PPUSH
23409: CALL_OW 289
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
23418: LD_ADDR_VAR 0 4
23422: PUSH
23423: LD_VAR 0 4
23427: PPUSH
23428: LD_VAR 0 4
23432: PUSH
23433: LD_INT 1
23435: PLUS
23436: PPUSH
23437: LD_VAR 0 2
23441: PPUSH
23442: CALL_OW 265
23446: PUSH
23447: LD_VAR 0 2
23451: PPUSH
23452: CALL_OW 262
23456: PUSH
23457: LD_VAR 0 2
23461: PPUSH
23462: CALL_OW 263
23466: PUSH
23467: LD_VAR 0 2
23471: PPUSH
23472: CALL_OW 264
23476: PUSH
23477: LD_VAR 0 2
23481: PPUSH
23482: CALL_OW 248
23486: PUSH
23487: LD_VAR 0 2
23491: PPUSH
23492: CALL_OW 256
23496: PUSH
23497: LD_VAR 0 5
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: PPUSH
23511: CALL_OW 1
23515: ST_TO_ADDR
// end else
23516: GO 23613
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
23518: LD_ADDR_VAR 0 4
23522: PUSH
23523: LD_VAR 0 4
23527: PPUSH
23528: LD_VAR 0 4
23532: PUSH
23533: LD_INT 1
23535: PLUS
23536: PPUSH
23537: LD_VAR 0 2
23541: PPUSH
23542: CALL_OW 265
23546: PUSH
23547: LD_VAR 0 2
23551: PPUSH
23552: CALL_OW 262
23556: PUSH
23557: LD_VAR 0 2
23561: PPUSH
23562: CALL_OW 263
23566: PUSH
23567: LD_VAR 0 2
23571: PPUSH
23572: CALL_OW 264
23576: PUSH
23577: LD_VAR 0 2
23581: PPUSH
23582: CALL_OW 248
23586: PUSH
23587: LD_VAR 0 2
23591: PPUSH
23592: CALL_OW 256
23596: PUSH
23597: EMPTY
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: PPUSH
23608: CALL_OW 1
23612: ST_TO_ADDR
23613: GO 23354
23615: POP
23616: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
23617: LD_VAR 0 4
23621: PPUSH
23622: LD_STRING 06_Vehicles
23624: PPUSH
23625: CALL_OW 39
// end ; YouWin ;
23629: CALL_OW 103
// end ; end_of_file
23633: LD_VAR 0 1
23637: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
23638: LD_INT 0
23640: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
23641: LD_VAR 0 1
23645: PPUSH
23646: LD_VAR 0 2
23650: PPUSH
23651: CALL 82995 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
23655: LD_VAR 0 1
23659: PPUSH
23660: CALL_OW 255
23664: PUSH
23665: LD_INT 2
23667: EQUAL
23668: PUSH
23669: LD_OWVAR 52
23673: AND
23674: PUSH
23675: LD_VAR 0 1
23679: PPUSH
23680: CALL_OW 263
23684: PUSH
23685: LD_INT 1
23687: EQUAL
23688: AND
23689: IFFALSE 23744
// begin driver := IsDrivenBy ( vehicle ) ;
23691: LD_ADDR_VAR 0 3
23695: PUSH
23696: LD_VAR 0 1
23700: PPUSH
23701: CALL_OW 311
23705: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
23706: LD_VAR 0 1
23710: PPUSH
23711: LD_INT 211
23713: PPUSH
23714: LD_INT 101
23716: PPUSH
23717: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23721: LD_VAR 0 3
23725: PPUSH
23726: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23730: LD_VAR 0 3
23734: PPUSH
23735: LD_VAR 0 2
23739: PPUSH
23740: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
23744: LD_VAR 0 1
23748: PPUSH
23749: CALL_OW 255
23753: PUSH
23754: LD_INT 3
23756: EQUAL
23757: IFFALSE 23788
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
23759: LD_ADDR_EXP 56
23763: PUSH
23764: LD_EXP 56
23768: PPUSH
23769: LD_EXP 56
23773: PUSH
23774: LD_INT 1
23776: PLUS
23777: PPUSH
23778: LD_VAR 0 1
23782: PPUSH
23783: CALL_OW 1
23787: ST_TO_ADDR
// end ;
23788: PPOPN 3
23790: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
23791: LD_VAR 0 1
23795: PPUSH
23796: CALL_OW 255
23800: PUSH
23801: LD_INT 8
23803: EQUAL
23804: PUSH
23805: LD_VAR 0 1
23809: PPUSH
23810: CALL_OW 266
23814: PUSH
23815: LD_INT 4
23817: EQUAL
23818: AND
23819: IFFALSE 23830
// ComUpgrade ( b ) ;
23821: LD_VAR 0 1
23825: PPUSH
23826: CALL_OW 146
// end ;
23830: PPOPN 1
23832: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
23833: LD_VAR 0 1
23837: PPUSH
23838: CALL 82875 0 1
// if un = Heike then
23842: LD_VAR 0 1
23846: PUSH
23847: LD_EXP 30
23851: EQUAL
23852: IFFALSE 23861
// YouLost ( Heike ) ;
23854: LD_STRING Heike
23856: PPUSH
23857: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] ] ) then
23861: LD_VAR 0 1
23865: PUSH
23866: LD_INT 22
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 23
23878: PUSH
23879: LD_INT 2
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PPUSH
23890: CALL_OW 69
23894: IN
23895: IFFALSE 23911
// heikeLoseCounter := heikeLoseCounter + 1 ;
23897: LD_ADDR_EXP 26
23901: PUSH
23902: LD_EXP 26
23906: PUSH
23907: LD_INT 1
23909: PLUS
23910: ST_TO_ADDR
// if un = arDepot then
23911: LD_VAR 0 1
23915: PUSH
23916: LD_EXP 44
23920: EQUAL
23921: IFFALSE 23930
// YouLost ( Base ) ;
23923: LD_STRING Base
23925: PPUSH
23926: CALL_OW 104
// if un = Rolf then
23930: LD_VAR 0 1
23934: PUSH
23935: LD_EXP 43
23939: EQUAL
23940: IFFALSE 23950
// rolfDied := true ;
23942: LD_ADDR_EXP 13
23946: PUSH
23947: LD_INT 1
23949: ST_TO_ADDR
// if un in rolfSquad then
23950: LD_VAR 0 1
23954: PUSH
23955: LD_EXP 47
23959: IN
23960: IFFALSE 23978
// rolfSquad := rolfSquad diff un ;
23962: LD_ADDR_EXP 47
23966: PUSH
23967: LD_EXP 47
23971: PUSH
23972: LD_VAR 0 1
23976: DIFF
23977: ST_TO_ADDR
// if un in omarSquad then
23978: LD_VAR 0 1
23982: PUSH
23983: LD_EXP 48
23987: IN
23988: IFFALSE 24006
// omarSquad := omarSquad diff un ;
23990: LD_ADDR_EXP 48
23994: PUSH
23995: LD_EXP 48
23999: PUSH
24000: LD_VAR 0 1
24004: DIFF
24005: ST_TO_ADDR
// if GetSide ( un ) = 3 then
24006: LD_VAR 0 1
24010: PPUSH
24011: CALL_OW 255
24015: PUSH
24016: LD_INT 3
24018: EQUAL
24019: IFFALSE 24035
// ruLoseCounter := ruLoseCounter + 1 ;
24021: LD_ADDR_EXP 5
24025: PUSH
24026: LD_EXP 5
24030: PUSH
24031: LD_INT 1
24033: PLUS
24034: ST_TO_ADDR
// if un in ruAttackers then
24035: LD_VAR 0 1
24039: PUSH
24040: LD_EXP 57
24044: IN
24045: IFFALSE 24063
// ruAttackers := ruAttackers diff un ;
24047: LD_ADDR_EXP 57
24051: PUSH
24052: LD_EXP 57
24056: PUSH
24057: LD_VAR 0 1
24061: DIFF
24062: ST_TO_ADDR
// end ;
24063: PPOPN 1
24065: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
24066: LD_INT 0
24068: PPUSH
24069: PPUSH
24070: PPUSH
24071: PPUSH
// begin if GetSide ( un ) = 3 and not un in ruAttackers then
24072: LD_VAR 0 1
24076: PPUSH
24077: CALL_OW 255
24081: PUSH
24082: LD_INT 3
24084: EQUAL
24085: PUSH
24086: LD_VAR 0 1
24090: PUSH
24091: LD_EXP 57
24095: IN
24096: NOT
24097: AND
24098: IFFALSE 24594
// begin if not IsInArea ( un , ruMainBase ) then
24100: LD_VAR 0 1
24104: PPUSH
24105: LD_INT 10
24107: PPUSH
24108: CALL_OW 308
24112: NOT
24113: IFFALSE 24127
// ComMoveToArea ( un , ruMainBase ) ;
24115: LD_VAR 0 1
24119: PPUSH
24120: LD_INT 10
24122: PPUSH
24123: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
24127: LD_INT 35
24129: PPUSH
24130: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
24134: LD_VAR 0 1
24138: PPUSH
24139: CALL_OW 302
24143: NOT
24144: PUSH
24145: LD_VAR 0 1
24149: PPUSH
24150: LD_INT 10
24152: PPUSH
24153: CALL_OW 308
24157: OR
24158: IFFALSE 24127
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
24160: LD_ADDR_EXP 55
24164: PUSH
24165: LD_EXP 55
24169: PPUSH
24170: LD_EXP 55
24174: PUSH
24175: LD_INT 1
24177: PLUS
24178: PPUSH
24179: LD_VAR 0 1
24183: PPUSH
24184: CALL_OW 1
24188: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
24189: LD_ADDR_VAR 0 8
24193: PUSH
24194: LD_INT 72
24196: PUSH
24197: LD_INT 12
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: ST_TO_ADDR
// if tmp then
24204: LD_VAR 0 8
24208: IFFALSE 24323
// for i in tmp do
24210: LD_ADDR_VAR 0 5
24214: PUSH
24215: LD_VAR 0 8
24219: PUSH
24220: FOR_IN
24221: IFFALSE 24321
// if UnitsInside ( i ) < 6 then
24223: LD_VAR 0 5
24227: PPUSH
24228: CALL_OW 313
24232: PUSH
24233: LD_INT 6
24235: LESS
24236: IFFALSE 24319
// begin AddComEnterUnit ( un , i ) ;
24238: LD_VAR 0 1
24242: PPUSH
24243: LD_VAR 0 5
24247: PPUSH
24248: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
24252: LD_VAR 0 8
24256: PPUSH
24257: LD_INT 22
24259: PUSH
24260: LD_INT 23
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 1
24269: PPUSH
24270: LD_INT 2
24272: PPUSH
24273: CALL_OW 12
24277: ARRAY
24278: PPUSH
24279: LD_INT 1
24281: PPUSH
24282: LD_INT 1
24284: PPUSH
24285: LD_INT 44
24287: PUSH
24288: LD_INT 46
24290: PUSH
24291: LD_INT 47
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 1
24301: PPUSH
24302: LD_INT 3
24304: PPUSH
24305: CALL_OW 12
24309: ARRAY
24310: PPUSH
24311: CALL_OW 185
// exit ;
24315: POP
24316: POP
24317: GO 24594
// end ;
24319: GO 24220
24321: POP
24322: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24323: LD_ADDR_VAR 0 8
24327: PUSH
24328: LD_INT 10
24330: PPUSH
24331: LD_INT 22
24333: PUSH
24334: LD_INT 3
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 50
24343: PUSH
24344: EMPTY
24345: LIST
24346: PUSH
24347: LD_INT 2
24349: PUSH
24350: LD_INT 30
24352: PUSH
24353: LD_INT 4
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 30
24362: PUSH
24363: LD_INT 5
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 30
24372: PUSH
24373: LD_INT 32
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 30
24382: PUSH
24383: LD_INT 31
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: LIST
24401: PPUSH
24402: CALL_OW 70
24406: ST_TO_ADDR
// if not tmp then
24407: LD_VAR 0 8
24411: NOT
24412: IFFALSE 24431
// begin ComMoveXY ( un , 83 , 133 ) ;
24414: LD_VAR 0 1
24418: PPUSH
24419: LD_INT 83
24421: PPUSH
24422: LD_INT 133
24424: PPUSH
24425: CALL_OW 111
// exit ;
24429: GO 24594
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24431: LD_ADDR_VAR 0 6
24435: PUSH
24436: LD_VAR 0 1
24440: PPUSH
24441: LD_VAR 0 8
24445: PPUSH
24446: LD_INT 1
24448: PPUSH
24449: LD_INT 1
24451: PPUSH
24452: CALL 31267 0 4
24456: PUSH
24457: FOR_IN
24458: IFFALSE 24592
// begin case GetBType ( b ) of b_armoury , b_barracks :
24460: LD_VAR 0 6
24464: PPUSH
24465: CALL_OW 266
24469: PUSH
24470: LD_INT 4
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24484
24476: LD_INT 5
24478: DOUBLE
24479: EQUAL
24480: IFTRUE 24484
24482: GO 24495
24484: POP
// p := 6 ; b_breastwork , b_bunker :
24485: LD_ADDR_VAR 0 7
24489: PUSH
24490: LD_INT 6
24492: ST_TO_ADDR
24493: GO 24521
24495: LD_INT 31
24497: DOUBLE
24498: EQUAL
24499: IFTRUE 24509
24501: LD_INT 32
24503: DOUBLE
24504: EQUAL
24505: IFTRUE 24509
24507: GO 24520
24509: POP
// p := 1 ; end ;
24510: LD_ADDR_VAR 0 7
24514: PUSH
24515: LD_INT 1
24517: ST_TO_ADDR
24518: GO 24521
24520: POP
// if UnitsInside ( b ) < p then
24521: LD_VAR 0 6
24525: PPUSH
24526: CALL_OW 313
24530: PUSH
24531: LD_VAR 0 7
24535: LESS
24536: IFFALSE 24590
// begin ComEnterUnit ( un , b ) ;
24538: LD_VAR 0 1
24542: PPUSH
24543: LD_VAR 0 6
24547: PPUSH
24548: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
24552: LD_VAR 0 6
24556: PPUSH
24557: CALL_OW 266
24561: PUSH
24562: LD_INT 4
24564: PUSH
24565: LD_INT 5
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: IN
24572: IFFALSE 24586
// AddComChangeProfession ( un , class_soldier ) ;
24574: LD_VAR 0 1
24578: PPUSH
24579: LD_INT 1
24581: PPUSH
24582: CALL_OW 183
// exit ;
24586: POP
24587: POP
24588: GO 24594
// end ; end ;
24590: GO 24457
24592: POP
24593: POP
// end ; end ;
24594: PPOPN 8
24596: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
24597: LD_INT 0
24599: PPUSH
24600: PPUSH
24601: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
24602: LD_VAR 0 2
24606: PPUSH
24607: CALL_OW 255
24611: PUSH
24612: LD_INT 3
24614: EQUAL
24615: PUSH
24616: LD_VAR 0 2
24620: PPUSH
24621: CALL_OW 257
24625: PUSH
24626: LD_INT 1
24628: EQUAL
24629: AND
24630: PUSH
24631: LD_VAR 0 2
24635: PUSH
24636: LD_EXP 55
24640: IN
24641: NOT
24642: AND
24643: IFFALSE 24956
// begin ComMoveToArea ( un , ruMainBase ) ;
24645: LD_VAR 0 2
24649: PPUSH
24650: LD_INT 10
24652: PPUSH
24653: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
24657: LD_INT 35
24659: PPUSH
24660: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
24664: LD_VAR 0 2
24668: PPUSH
24669: CALL_OW 302
24673: NOT
24674: PUSH
24675: LD_VAR 0 2
24679: PPUSH
24680: LD_INT 10
24682: PPUSH
24683: CALL_OW 308
24687: OR
24688: IFFALSE 24657
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
24690: LD_ADDR_EXP 55
24694: PUSH
24695: LD_EXP 55
24699: PPUSH
24700: LD_EXP 55
24704: PUSH
24705: LD_INT 1
24707: PLUS
24708: PPUSH
24709: LD_VAR 0 2
24713: PPUSH
24714: CALL_OW 1
24718: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24719: LD_ADDR_VAR 0 4
24723: PUSH
24724: LD_INT 10
24726: PPUSH
24727: LD_INT 22
24729: PUSH
24730: LD_INT 3
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 50
24739: PUSH
24740: EMPTY
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 30
24748: PUSH
24749: LD_INT 4
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 30
24758: PUSH
24759: LD_INT 5
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 30
24768: PUSH
24769: LD_INT 32
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 30
24778: PUSH
24779: LD_INT 31
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: PPUSH
24798: CALL_OW 70
24802: ST_TO_ADDR
// if not tmp then
24803: LD_VAR 0 4
24807: NOT
24808: IFFALSE 24827
// begin ComMoveXY ( un , 83 , 133 ) ;
24810: LD_VAR 0 2
24814: PPUSH
24815: LD_INT 83
24817: PPUSH
24818: LD_INT 133
24820: PPUSH
24821: CALL_OW 111
// exit ;
24825: GO 25205
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
24827: LD_ADDR_VAR 0 5
24831: PUSH
24832: LD_VAR 0 2
24836: PPUSH
24837: LD_VAR 0 4
24841: PPUSH
24842: LD_INT 1
24844: PPUSH
24845: LD_INT 1
24847: PPUSH
24848: CALL 31267 0 4
24852: PUSH
24853: FOR_IN
24854: IFFALSE 24954
// begin case GetBType ( b ) of b_armoury , b_barracks :
24856: LD_VAR 0 5
24860: PPUSH
24861: CALL_OW 266
24865: PUSH
24866: LD_INT 4
24868: DOUBLE
24869: EQUAL
24870: IFTRUE 24880
24872: LD_INT 5
24874: DOUBLE
24875: EQUAL
24876: IFTRUE 24880
24878: GO 24891
24880: POP
// p := 6 ; b_breastwork , b_bunker :
24881: LD_ADDR_VAR 0 3
24885: PUSH
24886: LD_INT 6
24888: ST_TO_ADDR
24889: GO 24917
24891: LD_INT 31
24893: DOUBLE
24894: EQUAL
24895: IFTRUE 24905
24897: LD_INT 32
24899: DOUBLE
24900: EQUAL
24901: IFTRUE 24905
24903: GO 24916
24905: POP
// p := 1 ; end ;
24906: LD_ADDR_VAR 0 3
24910: PUSH
24911: LD_INT 1
24913: ST_TO_ADDR
24914: GO 24917
24916: POP
// if UnitsInside ( b ) < p then
24917: LD_VAR 0 5
24921: PPUSH
24922: CALL_OW 313
24926: PUSH
24927: LD_VAR 0 3
24931: LESS
24932: IFFALSE 24952
// begin ComEnterUnit ( un , b ) ;
24934: LD_VAR 0 2
24938: PPUSH
24939: LD_VAR 0 5
24943: PPUSH
24944: CALL_OW 120
// exit ;
24948: POP
24949: POP
24950: GO 25205
// end ; end ;
24952: GO 24853
24954: POP
24955: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
24956: LD_VAR 0 2
24960: PUSH
24961: LD_EXP 55
24965: IN
24966: PUSH
24967: LD_VAR 0 2
24971: PPUSH
24972: CALL_OW 257
24976: PUSH
24977: LD_INT 1
24979: EQUAL
24980: AND
24981: IFFALSE 25205
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
24983: LD_ADDR_VAR 0 4
24987: PUSH
24988: LD_INT 10
24990: PPUSH
24991: LD_INT 22
24993: PUSH
24994: LD_INT 3
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 50
25003: PUSH
25004: EMPTY
25005: LIST
25006: PUSH
25007: LD_INT 2
25009: PUSH
25010: LD_INT 30
25012: PUSH
25013: LD_INT 4
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 30
25022: PUSH
25023: LD_INT 5
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 30
25032: PUSH
25033: LD_INT 32
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 30
25042: PUSH
25043: LD_INT 31
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: LIST
25061: PPUSH
25062: CALL_OW 70
25066: ST_TO_ADDR
// if not tmp then
25067: LD_VAR 0 4
25071: NOT
25072: IFFALSE 25076
// exit ;
25074: GO 25205
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
25076: LD_ADDR_VAR 0 5
25080: PUSH
25081: LD_VAR 0 2
25085: PPUSH
25086: LD_VAR 0 4
25090: PPUSH
25091: LD_INT 1
25093: PPUSH
25094: LD_INT 1
25096: PPUSH
25097: CALL 31267 0 4
25101: PUSH
25102: FOR_IN
25103: IFFALSE 25203
// begin case GetBType ( b ) of b_armoury , b_barracks :
25105: LD_VAR 0 5
25109: PPUSH
25110: CALL_OW 266
25114: PUSH
25115: LD_INT 4
25117: DOUBLE
25118: EQUAL
25119: IFTRUE 25129
25121: LD_INT 5
25123: DOUBLE
25124: EQUAL
25125: IFTRUE 25129
25127: GO 25140
25129: POP
// p := 6 ; b_breastwork , b_bunker :
25130: LD_ADDR_VAR 0 3
25134: PUSH
25135: LD_INT 6
25137: ST_TO_ADDR
25138: GO 25166
25140: LD_INT 31
25142: DOUBLE
25143: EQUAL
25144: IFTRUE 25154
25146: LD_INT 32
25148: DOUBLE
25149: EQUAL
25150: IFTRUE 25154
25152: GO 25165
25154: POP
// p := 1 ; end ;
25155: LD_ADDR_VAR 0 3
25159: PUSH
25160: LD_INT 1
25162: ST_TO_ADDR
25163: GO 25166
25165: POP
// if UnitsInside ( b ) < p then
25166: LD_VAR 0 5
25170: PPUSH
25171: CALL_OW 313
25175: PUSH
25176: LD_VAR 0 3
25180: LESS
25181: IFFALSE 25201
// begin ComEnterUnit ( un , b ) ;
25183: LD_VAR 0 2
25187: PPUSH
25188: LD_VAR 0 5
25192: PPUSH
25193: CALL_OW 120
// exit ;
25197: POP
25198: POP
25199: GO 25205
// end ; end ;
25201: GO 25102
25203: POP
25204: POP
// end ; end ;
25205: PPOPN 5
25207: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
25208: LD_VAR 0 1
25212: PUSH
25213: LD_INT 2
25215: EQUAL
25216: PUSH
25217: LD_VAR 0 2
25221: PUSH
25222: LD_INT 5
25224: PUSH
25225: LD_INT 8
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: IN
25232: AND
25233: IFFALSE 25242
// YouLost ( FriendlyFire ) ;
25235: LD_STRING FriendlyFire
25237: PPUSH
25238: CALL_OW 104
// end ;
25242: PPOPN 2
25244: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
25245: LD_VAR 0 1
25249: PPUSH
25250: CALL_OW 255
25254: PUSH
25255: LD_INT 8
25257: EQUAL
25258: PUSH
25259: LD_VAR 0 1
25263: PPUSH
25264: CALL_OW 266
25268: PUSH
25269: LD_INT 5
25271: EQUAL
25272: AND
25273: IFFALSE 25287
// SetClass ( unit , class_mortar ) ;
25275: LD_VAR 0 2
25279: PPUSH
25280: LD_INT 8
25282: PPUSH
25283: CALL_OW 336
// end ; end_of_file
25287: PPOPN 2
25289: END
// every 0 0$50 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 300 , 250 , 200 , 150 ] [ Difficulty ] do
25290: LD_INT 6
25292: PPUSH
25293: LD_INT 1
25295: PPUSH
25296: CALL_OW 287
25300: PUSH
25301: LD_INT 300
25303: PUSH
25304: LD_INT 250
25306: PUSH
25307: LD_INT 200
25309: PUSH
25310: LD_INT 150
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: PUSH
25319: LD_OWVAR 67
25323: ARRAY
25324: LESS
25325: IFFALSE 25352
25327: GO 25329
25329: DISABLE
// begin enable ;
25330: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
25331: LD_INT 1
25333: PPUSH
25334: LD_INT 5
25336: PPUSH
25337: CALL_OW 12
25341: PPUSH
25342: LD_INT 6
25344: PPUSH
25345: LD_INT 1
25347: PPUSH
25348: CALL_OW 55
// end ; end_of_file
25352: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
25353: LD_EXP 18
25357: PUSH
25358: LD_EXP 20
25362: AND
25363: PUSH
25364: LD_EXP 17
25368: PUSH
25369: LD_EXP 19
25373: AND
25374: OR
25375: IFFALSE 25694
25377: GO 25379
25379: DISABLE
// begin enable ;
25380: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
25381: LD_EXP 18
25385: PUSH
25386: LD_EXP 20
25390: AND
25391: PUSH
25392: LD_EXP 17
25396: PUSH
25397: LD_EXP 19
25401: AND
25402: AND
25403: IFFALSE 25540
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25405: LD_ADDR_OWVAR 47
25409: PUSH
25410: LD_STRING #X106-1a
25412: PUSH
25413: LD_EXP 21
25417: PUSH
25418: LD_INT 16
25420: PPUSH
25421: LD_INT 22
25423: PUSH
25424: LD_INT 2
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 21
25433: PUSH
25434: LD_INT 2
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 33
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 58
25453: PUSH
25454: EMPTY
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: PPUSH
25463: CALL_OW 70
25467: MINUS
25468: PPUSH
25469: CALL 65330 0 1
25473: PUSH
25474: LD_STRING #X106-3a
25476: PUSH
25477: LD_EXP 20
25481: PUSH
25482: LD_STRING #X106-1
25484: PUSH
25485: LD_EXP 47
25489: PUSH
25490: LD_INT 0
25492: PLUS
25493: PUSH
25494: LD_EXP 47
25498: PPUSH
25499: LD_INT 55
25501: PUSH
25502: EMPTY
25503: LIST
25504: PPUSH
25505: CALL_OW 72
25509: PUSH
25510: LD_INT 0
25512: PLUS
25513: MINUS
25514: PPUSH
25515: CALL 65330 0 1
25519: PUSH
25520: LD_STRING #X106-3
25522: PUSH
25523: LD_EXP 19
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: ST_TO_ADDR
// end else
25538: GO 25694
// if omarWantVehicles and omarWaitingForVehiclesTimer then
25540: LD_EXP 18
25544: PUSH
25545: LD_EXP 20
25549: AND
25550: IFFALSE 25637
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
25552: LD_ADDR_OWVAR 47
25556: PUSH
25557: LD_STRING #X106-1a
25559: PUSH
25560: LD_EXP 21
25564: PUSH
25565: LD_INT 16
25567: PPUSH
25568: LD_INT 22
25570: PUSH
25571: LD_INT 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 21
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 33
25590: PUSH
25591: LD_INT 1
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 58
25600: PUSH
25601: EMPTY
25602: LIST
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: PPUSH
25610: CALL_OW 70
25614: MINUS
25615: PPUSH
25616: CALL 65330 0 1
25620: PUSH
25621: LD_STRING #X106-3a
25623: PUSH
25624: LD_EXP 20
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: ST_TO_ADDR
// end else
25635: GO 25694
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
25637: LD_ADDR_OWVAR 47
25641: PUSH
25642: LD_STRING #X106-1
25644: PUSH
25645: LD_EXP 47
25649: PUSH
25650: LD_INT 0
25652: PLUS
25653: PUSH
25654: LD_EXP 47
25658: PPUSH
25659: LD_INT 55
25661: PUSH
25662: EMPTY
25663: LIST
25664: PPUSH
25665: CALL_OW 72
25669: PUSH
25670: LD_INT 0
25672: PLUS
25673: MINUS
25674: PPUSH
25675: CALL 65330 0 1
25679: PUSH
25680: LD_STRING #X106-3
25682: PUSH
25683: LD_EXP 19
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: ST_TO_ADDR
// end ; end ; end_of_file
25694: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25695: LD_INT 0
25697: PPUSH
25698: PPUSH
// if exist_mode then
25699: LD_VAR 0 2
25703: IFFALSE 25728
// unit := CreateCharacter ( prefix & ident ) else
25705: LD_ADDR_VAR 0 5
25709: PUSH
25710: LD_VAR 0 3
25714: PUSH
25715: LD_VAR 0 1
25719: STR
25720: PPUSH
25721: CALL_OW 34
25725: ST_TO_ADDR
25726: GO 25743
// unit := NewCharacter ( ident ) ;
25728: LD_ADDR_VAR 0 5
25732: PUSH
25733: LD_VAR 0 1
25737: PPUSH
25738: CALL_OW 25
25742: ST_TO_ADDR
// result := unit ;
25743: LD_ADDR_VAR 0 4
25747: PUSH
25748: LD_VAR 0 5
25752: ST_TO_ADDR
// end ;
25753: LD_VAR 0 4
25757: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25758: LD_INT 0
25760: PPUSH
25761: PPUSH
// if not side or not nation then
25762: LD_VAR 0 1
25766: NOT
25767: PUSH
25768: LD_VAR 0 2
25772: NOT
25773: OR
25774: IFFALSE 25778
// exit ;
25776: GO 26546
// case nation of nation_american :
25778: LD_VAR 0 2
25782: PUSH
25783: LD_INT 1
25785: DOUBLE
25786: EQUAL
25787: IFTRUE 25791
25789: GO 26005
25791: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25792: LD_ADDR_VAR 0 4
25796: PUSH
25797: LD_INT 35
25799: PUSH
25800: LD_INT 45
25802: PUSH
25803: LD_INT 46
25805: PUSH
25806: LD_INT 47
25808: PUSH
25809: LD_INT 82
25811: PUSH
25812: LD_INT 83
25814: PUSH
25815: LD_INT 84
25817: PUSH
25818: LD_INT 85
25820: PUSH
25821: LD_INT 86
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 6
25832: PUSH
25833: LD_INT 15
25835: PUSH
25836: LD_INT 16
25838: PUSH
25839: LD_INT 7
25841: PUSH
25842: LD_INT 12
25844: PUSH
25845: LD_INT 13
25847: PUSH
25848: LD_INT 10
25850: PUSH
25851: LD_INT 14
25853: PUSH
25854: LD_INT 20
25856: PUSH
25857: LD_INT 21
25859: PUSH
25860: LD_INT 22
25862: PUSH
25863: LD_INT 25
25865: PUSH
25866: LD_INT 32
25868: PUSH
25869: LD_INT 27
25871: PUSH
25872: LD_INT 36
25874: PUSH
25875: LD_INT 69
25877: PUSH
25878: LD_INT 39
25880: PUSH
25881: LD_INT 34
25883: PUSH
25884: LD_INT 40
25886: PUSH
25887: LD_INT 48
25889: PUSH
25890: LD_INT 49
25892: PUSH
25893: LD_INT 50
25895: PUSH
25896: LD_INT 51
25898: PUSH
25899: LD_INT 52
25901: PUSH
25902: LD_INT 53
25904: PUSH
25905: LD_INT 54
25907: PUSH
25908: LD_INT 55
25910: PUSH
25911: LD_INT 56
25913: PUSH
25914: LD_INT 57
25916: PUSH
25917: LD_INT 58
25919: PUSH
25920: LD_INT 59
25922: PUSH
25923: LD_INT 60
25925: PUSH
25926: LD_INT 61
25928: PUSH
25929: LD_INT 62
25931: PUSH
25932: LD_INT 80
25934: PUSH
25935: LD_INT 82
25937: PUSH
25938: LD_INT 83
25940: PUSH
25941: LD_INT 84
25943: PUSH
25944: LD_INT 85
25946: PUSH
25947: LD_INT 86
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: ST_TO_ADDR
26003: GO 26470
26005: LD_INT 2
26007: DOUBLE
26008: EQUAL
26009: IFTRUE 26013
26011: GO 26239
26013: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26014: LD_ADDR_VAR 0 4
26018: PUSH
26019: LD_INT 35
26021: PUSH
26022: LD_INT 45
26024: PUSH
26025: LD_INT 46
26027: PUSH
26028: LD_INT 47
26030: PUSH
26031: LD_INT 82
26033: PUSH
26034: LD_INT 83
26036: PUSH
26037: LD_INT 84
26039: PUSH
26040: LD_INT 85
26042: PUSH
26043: LD_INT 87
26045: PUSH
26046: LD_INT 70
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 11
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: LD_INT 4
26060: PUSH
26061: LD_INT 5
26063: PUSH
26064: LD_INT 6
26066: PUSH
26067: LD_INT 15
26069: PUSH
26070: LD_INT 18
26072: PUSH
26073: LD_INT 7
26075: PUSH
26076: LD_INT 17
26078: PUSH
26079: LD_INT 8
26081: PUSH
26082: LD_INT 20
26084: PUSH
26085: LD_INT 21
26087: PUSH
26088: LD_INT 22
26090: PUSH
26091: LD_INT 72
26093: PUSH
26094: LD_INT 26
26096: PUSH
26097: LD_INT 69
26099: PUSH
26100: LD_INT 39
26102: PUSH
26103: LD_INT 40
26105: PUSH
26106: LD_INT 41
26108: PUSH
26109: LD_INT 42
26111: PUSH
26112: LD_INT 43
26114: PUSH
26115: LD_INT 48
26117: PUSH
26118: LD_INT 49
26120: PUSH
26121: LD_INT 50
26123: PUSH
26124: LD_INT 51
26126: PUSH
26127: LD_INT 52
26129: PUSH
26130: LD_INT 53
26132: PUSH
26133: LD_INT 54
26135: PUSH
26136: LD_INT 55
26138: PUSH
26139: LD_INT 56
26141: PUSH
26142: LD_INT 60
26144: PUSH
26145: LD_INT 61
26147: PUSH
26148: LD_INT 62
26150: PUSH
26151: LD_INT 66
26153: PUSH
26154: LD_INT 67
26156: PUSH
26157: LD_INT 68
26159: PUSH
26160: LD_INT 81
26162: PUSH
26163: LD_INT 82
26165: PUSH
26166: LD_INT 83
26168: PUSH
26169: LD_INT 84
26171: PUSH
26172: LD_INT 85
26174: PUSH
26175: LD_INT 87
26177: PUSH
26178: LD_INT 88
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: ST_TO_ADDR
26237: GO 26470
26239: LD_INT 3
26241: DOUBLE
26242: EQUAL
26243: IFTRUE 26247
26245: GO 26469
26247: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26248: LD_ADDR_VAR 0 4
26252: PUSH
26253: LD_INT 46
26255: PUSH
26256: LD_INT 47
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: LD_INT 82
26267: PUSH
26268: LD_INT 83
26270: PUSH
26271: LD_INT 84
26273: PUSH
26274: LD_INT 85
26276: PUSH
26277: LD_INT 86
26279: PUSH
26280: LD_INT 11
26282: PUSH
26283: LD_INT 9
26285: PUSH
26286: LD_INT 20
26288: PUSH
26289: LD_INT 19
26291: PUSH
26292: LD_INT 21
26294: PUSH
26295: LD_INT 24
26297: PUSH
26298: LD_INT 22
26300: PUSH
26301: LD_INT 25
26303: PUSH
26304: LD_INT 28
26306: PUSH
26307: LD_INT 29
26309: PUSH
26310: LD_INT 30
26312: PUSH
26313: LD_INT 31
26315: PUSH
26316: LD_INT 37
26318: PUSH
26319: LD_INT 38
26321: PUSH
26322: LD_INT 32
26324: PUSH
26325: LD_INT 27
26327: PUSH
26328: LD_INT 33
26330: PUSH
26331: LD_INT 69
26333: PUSH
26334: LD_INT 39
26336: PUSH
26337: LD_INT 34
26339: PUSH
26340: LD_INT 40
26342: PUSH
26343: LD_INT 71
26345: PUSH
26346: LD_INT 23
26348: PUSH
26349: LD_INT 44
26351: PUSH
26352: LD_INT 48
26354: PUSH
26355: LD_INT 49
26357: PUSH
26358: LD_INT 50
26360: PUSH
26361: LD_INT 51
26363: PUSH
26364: LD_INT 52
26366: PUSH
26367: LD_INT 53
26369: PUSH
26370: LD_INT 54
26372: PUSH
26373: LD_INT 55
26375: PUSH
26376: LD_INT 56
26378: PUSH
26379: LD_INT 57
26381: PUSH
26382: LD_INT 58
26384: PUSH
26385: LD_INT 59
26387: PUSH
26388: LD_INT 63
26390: PUSH
26391: LD_INT 64
26393: PUSH
26394: LD_INT 65
26396: PUSH
26397: LD_INT 82
26399: PUSH
26400: LD_INT 83
26402: PUSH
26403: LD_INT 84
26405: PUSH
26406: LD_INT 85
26408: PUSH
26409: LD_INT 86
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: ST_TO_ADDR
26467: GO 26470
26469: POP
// if state > - 1 and state < 3 then
26470: LD_VAR 0 3
26474: PUSH
26475: LD_INT 1
26477: NEG
26478: GREATER
26479: PUSH
26480: LD_VAR 0 3
26484: PUSH
26485: LD_INT 3
26487: LESS
26488: AND
26489: IFFALSE 26546
// for i in result do
26491: LD_ADDR_VAR 0 5
26495: PUSH
26496: LD_VAR 0 4
26500: PUSH
26501: FOR_IN
26502: IFFALSE 26544
// if GetTech ( i , side ) <> state then
26504: LD_VAR 0 5
26508: PPUSH
26509: LD_VAR 0 1
26513: PPUSH
26514: CALL_OW 321
26518: PUSH
26519: LD_VAR 0 3
26523: NONEQUAL
26524: IFFALSE 26542
// result := result diff i ;
26526: LD_ADDR_VAR 0 4
26530: PUSH
26531: LD_VAR 0 4
26535: PUSH
26536: LD_VAR 0 5
26540: DIFF
26541: ST_TO_ADDR
26542: GO 26501
26544: POP
26545: POP
// end ;
26546: LD_VAR 0 4
26550: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26551: LD_INT 0
26553: PPUSH
26554: PPUSH
26555: PPUSH
// result := true ;
26556: LD_ADDR_VAR 0 3
26560: PUSH
26561: LD_INT 1
26563: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26564: LD_ADDR_VAR 0 5
26568: PUSH
26569: LD_VAR 0 2
26573: PPUSH
26574: CALL_OW 480
26578: ST_TO_ADDR
// if not tmp then
26579: LD_VAR 0 5
26583: NOT
26584: IFFALSE 26588
// exit ;
26586: GO 26637
// for i in tmp do
26588: LD_ADDR_VAR 0 4
26592: PUSH
26593: LD_VAR 0 5
26597: PUSH
26598: FOR_IN
26599: IFFALSE 26635
// if GetTech ( i , side ) <> state_researched then
26601: LD_VAR 0 4
26605: PPUSH
26606: LD_VAR 0 1
26610: PPUSH
26611: CALL_OW 321
26615: PUSH
26616: LD_INT 2
26618: NONEQUAL
26619: IFFALSE 26633
// begin result := false ;
26621: LD_ADDR_VAR 0 3
26625: PUSH
26626: LD_INT 0
26628: ST_TO_ADDR
// exit ;
26629: POP
26630: POP
26631: GO 26637
// end ;
26633: GO 26598
26635: POP
26636: POP
// end ;
26637: LD_VAR 0 3
26641: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26642: LD_INT 0
26644: PPUSH
26645: PPUSH
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
26650: PPUSH
26651: PPUSH
26652: PPUSH
26653: PPUSH
26654: PPUSH
26655: PPUSH
26656: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26657: LD_VAR 0 1
26661: NOT
26662: PUSH
26663: LD_VAR 0 1
26667: PPUSH
26668: CALL_OW 257
26672: PUSH
26673: LD_INT 9
26675: NONEQUAL
26676: OR
26677: IFFALSE 26681
// exit ;
26679: GO 27254
// side := GetSide ( unit ) ;
26681: LD_ADDR_VAR 0 9
26685: PUSH
26686: LD_VAR 0 1
26690: PPUSH
26691: CALL_OW 255
26695: ST_TO_ADDR
// tech_space := tech_spacanom ;
26696: LD_ADDR_VAR 0 12
26700: PUSH
26701: LD_INT 29
26703: ST_TO_ADDR
// tech_time := tech_taurad ;
26704: LD_ADDR_VAR 0 13
26708: PUSH
26709: LD_INT 28
26711: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26712: LD_ADDR_VAR 0 11
26716: PUSH
26717: LD_VAR 0 1
26721: PPUSH
26722: CALL_OW 310
26726: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26727: LD_VAR 0 11
26731: PPUSH
26732: CALL_OW 247
26736: PUSH
26737: LD_INT 2
26739: EQUAL
26740: IFFALSE 26744
// exit ;
26742: GO 27254
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26744: LD_ADDR_VAR 0 8
26748: PUSH
26749: LD_INT 81
26751: PUSH
26752: LD_VAR 0 9
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 3
26763: PUSH
26764: LD_INT 21
26766: PUSH
26767: LD_INT 3
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PPUSH
26782: CALL_OW 69
26786: ST_TO_ADDR
// if not tmp then
26787: LD_VAR 0 8
26791: NOT
26792: IFFALSE 26796
// exit ;
26794: GO 27254
// if in_unit then
26796: LD_VAR 0 11
26800: IFFALSE 26824
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26802: LD_ADDR_VAR 0 10
26806: PUSH
26807: LD_VAR 0 8
26811: PPUSH
26812: LD_VAR 0 11
26816: PPUSH
26817: CALL_OW 74
26821: ST_TO_ADDR
26822: GO 26844
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26824: LD_ADDR_VAR 0 10
26828: PUSH
26829: LD_VAR 0 8
26833: PPUSH
26834: LD_VAR 0 1
26838: PPUSH
26839: CALL_OW 74
26843: ST_TO_ADDR
// if not enemy then
26844: LD_VAR 0 10
26848: NOT
26849: IFFALSE 26853
// exit ;
26851: GO 27254
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26853: LD_VAR 0 11
26857: PUSH
26858: LD_VAR 0 11
26862: PPUSH
26863: LD_VAR 0 10
26867: PPUSH
26868: CALL_OW 296
26872: PUSH
26873: LD_INT 13
26875: GREATER
26876: AND
26877: PUSH
26878: LD_VAR 0 1
26882: PPUSH
26883: LD_VAR 0 10
26887: PPUSH
26888: CALL_OW 296
26892: PUSH
26893: LD_INT 12
26895: GREATER
26896: OR
26897: IFFALSE 26901
// exit ;
26899: GO 27254
// missile := [ 1 ] ;
26901: LD_ADDR_VAR 0 14
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: EMPTY
26910: LIST
26911: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26912: LD_VAR 0 9
26916: PPUSH
26917: LD_VAR 0 12
26921: PPUSH
26922: CALL_OW 325
26926: IFFALSE 26955
// missile := Replace ( missile , missile + 1 , 2 ) ;
26928: LD_ADDR_VAR 0 14
26932: PUSH
26933: LD_VAR 0 14
26937: PPUSH
26938: LD_VAR 0 14
26942: PUSH
26943: LD_INT 1
26945: PLUS
26946: PPUSH
26947: LD_INT 2
26949: PPUSH
26950: CALL_OW 1
26954: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26955: LD_VAR 0 9
26959: PPUSH
26960: LD_VAR 0 13
26964: PPUSH
26965: CALL_OW 325
26969: PUSH
26970: LD_VAR 0 10
26974: PPUSH
26975: CALL_OW 255
26979: PPUSH
26980: LD_VAR 0 13
26984: PPUSH
26985: CALL_OW 325
26989: NOT
26990: AND
26991: IFFALSE 27020
// missile := Replace ( missile , missile + 1 , 3 ) ;
26993: LD_ADDR_VAR 0 14
26997: PUSH
26998: LD_VAR 0 14
27002: PPUSH
27003: LD_VAR 0 14
27007: PUSH
27008: LD_INT 1
27010: PLUS
27011: PPUSH
27012: LD_INT 3
27014: PPUSH
27015: CALL_OW 1
27019: ST_TO_ADDR
// if missile < 2 then
27020: LD_VAR 0 14
27024: PUSH
27025: LD_INT 2
27027: LESS
27028: IFFALSE 27032
// exit ;
27030: GO 27254
// x := GetX ( enemy ) ;
27032: LD_ADDR_VAR 0 4
27036: PUSH
27037: LD_VAR 0 10
27041: PPUSH
27042: CALL_OW 250
27046: ST_TO_ADDR
// y := GetY ( enemy ) ;
27047: LD_ADDR_VAR 0 5
27051: PUSH
27052: LD_VAR 0 10
27056: PPUSH
27057: CALL_OW 251
27061: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27062: LD_ADDR_VAR 0 6
27066: PUSH
27067: LD_VAR 0 4
27071: PUSH
27072: LD_INT 1
27074: NEG
27075: PPUSH
27076: LD_INT 1
27078: PPUSH
27079: CALL_OW 12
27083: PLUS
27084: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27085: LD_ADDR_VAR 0 7
27089: PUSH
27090: LD_VAR 0 5
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PPUSH
27099: LD_INT 1
27101: PPUSH
27102: CALL_OW 12
27106: PLUS
27107: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27108: LD_VAR 0 6
27112: PPUSH
27113: LD_VAR 0 7
27117: PPUSH
27118: CALL_OW 488
27122: NOT
27123: IFFALSE 27145
// begin _x := x ;
27125: LD_ADDR_VAR 0 6
27129: PUSH
27130: LD_VAR 0 4
27134: ST_TO_ADDR
// _y := y ;
27135: LD_ADDR_VAR 0 7
27139: PUSH
27140: LD_VAR 0 5
27144: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27145: LD_ADDR_VAR 0 3
27149: PUSH
27150: LD_INT 1
27152: PPUSH
27153: LD_VAR 0 14
27157: PPUSH
27158: CALL_OW 12
27162: ST_TO_ADDR
// case i of 1 :
27163: LD_VAR 0 3
27167: PUSH
27168: LD_INT 1
27170: DOUBLE
27171: EQUAL
27172: IFTRUE 27176
27174: GO 27193
27176: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27177: LD_VAR 0 1
27181: PPUSH
27182: LD_VAR 0 10
27186: PPUSH
27187: CALL_OW 115
27191: GO 27254
27193: LD_INT 2
27195: DOUBLE
27196: EQUAL
27197: IFTRUE 27201
27199: GO 27223
27201: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27202: LD_VAR 0 1
27206: PPUSH
27207: LD_VAR 0 6
27211: PPUSH
27212: LD_VAR 0 7
27216: PPUSH
27217: CALL_OW 153
27221: GO 27254
27223: LD_INT 3
27225: DOUBLE
27226: EQUAL
27227: IFTRUE 27231
27229: GO 27253
27231: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27232: LD_VAR 0 1
27236: PPUSH
27237: LD_VAR 0 6
27241: PPUSH
27242: LD_VAR 0 7
27246: PPUSH
27247: CALL_OW 154
27251: GO 27254
27253: POP
// end ;
27254: LD_VAR 0 2
27258: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27259: LD_INT 0
27261: PPUSH
27262: PPUSH
27263: PPUSH
27264: PPUSH
27265: PPUSH
27266: PPUSH
// if not unit or not building then
27267: LD_VAR 0 1
27271: NOT
27272: PUSH
27273: LD_VAR 0 2
27277: NOT
27278: OR
27279: IFFALSE 27283
// exit ;
27281: GO 27441
// x := GetX ( building ) ;
27283: LD_ADDR_VAR 0 5
27287: PUSH
27288: LD_VAR 0 2
27292: PPUSH
27293: CALL_OW 250
27297: ST_TO_ADDR
// y := GetY ( building ) ;
27298: LD_ADDR_VAR 0 6
27302: PUSH
27303: LD_VAR 0 2
27307: PPUSH
27308: CALL_OW 251
27312: ST_TO_ADDR
// for i = 0 to 5 do
27313: LD_ADDR_VAR 0 4
27317: PUSH
27318: DOUBLE
27319: LD_INT 0
27321: DEC
27322: ST_TO_ADDR
27323: LD_INT 5
27325: PUSH
27326: FOR_TO
27327: IFFALSE 27439
// begin _x := ShiftX ( x , i , 3 ) ;
27329: LD_ADDR_VAR 0 7
27333: PUSH
27334: LD_VAR 0 5
27338: PPUSH
27339: LD_VAR 0 4
27343: PPUSH
27344: LD_INT 3
27346: PPUSH
27347: CALL_OW 272
27351: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27352: LD_ADDR_VAR 0 8
27356: PUSH
27357: LD_VAR 0 6
27361: PPUSH
27362: LD_VAR 0 4
27366: PPUSH
27367: LD_INT 3
27369: PPUSH
27370: CALL_OW 273
27374: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27375: LD_VAR 0 7
27379: PPUSH
27380: LD_VAR 0 8
27384: PPUSH
27385: CALL_OW 488
27389: NOT
27390: IFFALSE 27394
// continue ;
27392: GO 27326
// if HexInfo ( _x , _y ) = 0 then
27394: LD_VAR 0 7
27398: PPUSH
27399: LD_VAR 0 8
27403: PPUSH
27404: CALL_OW 428
27408: PUSH
27409: LD_INT 0
27411: EQUAL
27412: IFFALSE 27437
// begin ComMoveXY ( unit , _x , _y ) ;
27414: LD_VAR 0 1
27418: PPUSH
27419: LD_VAR 0 7
27423: PPUSH
27424: LD_VAR 0 8
27428: PPUSH
27429: CALL_OW 111
// exit ;
27433: POP
27434: POP
27435: GO 27441
// end ; end ;
27437: GO 27326
27439: POP
27440: POP
// end ;
27441: LD_VAR 0 3
27445: RET
// export function ScanBase ( side , base_area ) ; begin
27446: LD_INT 0
27448: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27449: LD_ADDR_VAR 0 3
27453: PUSH
27454: LD_VAR 0 2
27458: PPUSH
27459: LD_INT 81
27461: PUSH
27462: LD_VAR 0 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PPUSH
27471: CALL_OW 70
27475: ST_TO_ADDR
// end ;
27476: LD_VAR 0 3
27480: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27481: LD_INT 0
27483: PPUSH
27484: PPUSH
27485: PPUSH
27486: PPUSH
// result := false ;
27487: LD_ADDR_VAR 0 2
27491: PUSH
27492: LD_INT 0
27494: ST_TO_ADDR
// side := GetSide ( unit ) ;
27495: LD_ADDR_VAR 0 3
27499: PUSH
27500: LD_VAR 0 1
27504: PPUSH
27505: CALL_OW 255
27509: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27510: LD_ADDR_VAR 0 4
27514: PUSH
27515: LD_VAR 0 1
27519: PPUSH
27520: CALL_OW 248
27524: ST_TO_ADDR
// case nat of 1 :
27525: LD_VAR 0 4
27529: PUSH
27530: LD_INT 1
27532: DOUBLE
27533: EQUAL
27534: IFTRUE 27538
27536: GO 27549
27538: POP
// tech := tech_lassight ; 2 :
27539: LD_ADDR_VAR 0 5
27543: PUSH
27544: LD_INT 12
27546: ST_TO_ADDR
27547: GO 27588
27549: LD_INT 2
27551: DOUBLE
27552: EQUAL
27553: IFTRUE 27557
27555: GO 27568
27557: POP
// tech := tech_mortar ; 3 :
27558: LD_ADDR_VAR 0 5
27562: PUSH
27563: LD_INT 41
27565: ST_TO_ADDR
27566: GO 27588
27568: LD_INT 3
27570: DOUBLE
27571: EQUAL
27572: IFTRUE 27576
27574: GO 27587
27576: POP
// tech := tech_bazooka ; end ;
27577: LD_ADDR_VAR 0 5
27581: PUSH
27582: LD_INT 44
27584: ST_TO_ADDR
27585: GO 27588
27587: POP
// if Researched ( side , tech ) then
27588: LD_VAR 0 3
27592: PPUSH
27593: LD_VAR 0 5
27597: PPUSH
27598: CALL_OW 325
27602: IFFALSE 27629
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27604: LD_ADDR_VAR 0 2
27608: PUSH
27609: LD_INT 5
27611: PUSH
27612: LD_INT 8
27614: PUSH
27615: LD_INT 9
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: LIST
27622: PUSH
27623: LD_VAR 0 4
27627: ARRAY
27628: ST_TO_ADDR
// end ;
27629: LD_VAR 0 2
27633: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27634: LD_INT 0
27636: PPUSH
27637: PPUSH
27638: PPUSH
// if not mines then
27639: LD_VAR 0 2
27643: NOT
27644: IFFALSE 27648
// exit ;
27646: GO 27792
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27648: LD_ADDR_VAR 0 5
27652: PUSH
27653: LD_INT 81
27655: PUSH
27656: LD_VAR 0 1
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 3
27667: PUSH
27668: LD_INT 21
27670: PUSH
27671: LD_INT 3
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PPUSH
27686: CALL_OW 69
27690: ST_TO_ADDR
// for i in mines do
27691: LD_ADDR_VAR 0 4
27695: PUSH
27696: LD_VAR 0 2
27700: PUSH
27701: FOR_IN
27702: IFFALSE 27790
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27704: LD_VAR 0 4
27708: PUSH
27709: LD_INT 1
27711: ARRAY
27712: PPUSH
27713: LD_VAR 0 4
27717: PUSH
27718: LD_INT 2
27720: ARRAY
27721: PPUSH
27722: CALL_OW 458
27726: NOT
27727: IFFALSE 27731
// continue ;
27729: GO 27701
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27731: LD_VAR 0 4
27735: PUSH
27736: LD_INT 1
27738: ARRAY
27739: PPUSH
27740: LD_VAR 0 4
27744: PUSH
27745: LD_INT 2
27747: ARRAY
27748: PPUSH
27749: CALL_OW 428
27753: PUSH
27754: LD_VAR 0 5
27758: IN
27759: IFFALSE 27788
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27761: LD_VAR 0 4
27765: PUSH
27766: LD_INT 1
27768: ARRAY
27769: PPUSH
27770: LD_VAR 0 4
27774: PUSH
27775: LD_INT 2
27777: ARRAY
27778: PPUSH
27779: LD_VAR 0 1
27783: PPUSH
27784: CALL_OW 456
// end ;
27788: GO 27701
27790: POP
27791: POP
// end ;
27792: LD_VAR 0 3
27796: RET
// export function Count ( array ) ; var i ; begin
27797: LD_INT 0
27799: PPUSH
27800: PPUSH
// result := 0 ;
27801: LD_ADDR_VAR 0 2
27805: PUSH
27806: LD_INT 0
27808: ST_TO_ADDR
// for i in array do
27809: LD_ADDR_VAR 0 3
27813: PUSH
27814: LD_VAR 0 1
27818: PUSH
27819: FOR_IN
27820: IFFALSE 27844
// if i then
27822: LD_VAR 0 3
27826: IFFALSE 27842
// result := result + 1 ;
27828: LD_ADDR_VAR 0 2
27832: PUSH
27833: LD_VAR 0 2
27837: PUSH
27838: LD_INT 1
27840: PLUS
27841: ST_TO_ADDR
27842: GO 27819
27844: POP
27845: POP
// end ;
27846: LD_VAR 0 2
27850: RET
// export function IsEmpty ( building ) ; begin
27851: LD_INT 0
27853: PPUSH
// if not building then
27854: LD_VAR 0 1
27858: NOT
27859: IFFALSE 27863
// exit ;
27861: GO 27906
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27863: LD_ADDR_VAR 0 2
27867: PUSH
27868: LD_VAR 0 1
27872: PUSH
27873: LD_INT 22
27875: PUSH
27876: LD_VAR 0 1
27880: PPUSH
27881: CALL_OW 255
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 58
27892: PUSH
27893: EMPTY
27894: LIST
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PPUSH
27900: CALL_OW 69
27904: IN
27905: ST_TO_ADDR
// end ;
27906: LD_VAR 0 2
27910: RET
// export function IsNotFull ( building ) ; var places ; begin
27911: LD_INT 0
27913: PPUSH
27914: PPUSH
// if not building then
27915: LD_VAR 0 1
27919: NOT
27920: IFFALSE 27924
// exit ;
27922: GO 28095
// result := false ;
27924: LD_ADDR_VAR 0 2
27928: PUSH
27929: LD_INT 0
27931: ST_TO_ADDR
// places := 0 ;
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: LD_INT 0
27939: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27940: LD_VAR 0 1
27944: PPUSH
27945: CALL_OW 266
27949: PUSH
27950: LD_INT 0
27952: DOUBLE
27953: EQUAL
27954: IFTRUE 28012
27956: LD_INT 1
27958: DOUBLE
27959: EQUAL
27960: IFTRUE 28012
27962: LD_INT 6
27964: DOUBLE
27965: EQUAL
27966: IFTRUE 28012
27968: LD_INT 7
27970: DOUBLE
27971: EQUAL
27972: IFTRUE 28012
27974: LD_INT 8
27976: DOUBLE
27977: EQUAL
27978: IFTRUE 28012
27980: LD_INT 4
27982: DOUBLE
27983: EQUAL
27984: IFTRUE 28012
27986: LD_INT 5
27988: DOUBLE
27989: EQUAL
27990: IFTRUE 28012
27992: LD_INT 2
27994: DOUBLE
27995: EQUAL
27996: IFTRUE 28012
27998: LD_INT 3
28000: DOUBLE
28001: EQUAL
28002: IFTRUE 28012
28004: LD_INT 35
28006: DOUBLE
28007: EQUAL
28008: IFTRUE 28012
28010: GO 28023
28012: POP
// places := 6 ; b_bunker , b_breastwork :
28013: LD_ADDR_VAR 0 3
28017: PUSH
28018: LD_INT 6
28020: ST_TO_ADDR
28021: GO 28068
28023: LD_INT 32
28025: DOUBLE
28026: EQUAL
28027: IFTRUE 28037
28029: LD_INT 31
28031: DOUBLE
28032: EQUAL
28033: IFTRUE 28037
28035: GO 28048
28037: POP
// places := 1 ; b_control_tower :
28038: LD_ADDR_VAR 0 3
28042: PUSH
28043: LD_INT 1
28045: ST_TO_ADDR
28046: GO 28068
28048: LD_INT 36
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28056
28054: GO 28067
28056: POP
// places := 3 ; end ;
28057: LD_ADDR_VAR 0 3
28061: PUSH
28062: LD_INT 3
28064: ST_TO_ADDR
28065: GO 28068
28067: POP
// if places then
28068: LD_VAR 0 3
28072: IFFALSE 28095
// result := UnitsInside ( building ) < places ;
28074: LD_ADDR_VAR 0 2
28078: PUSH
28079: LD_VAR 0 1
28083: PPUSH
28084: CALL_OW 313
28088: PUSH
28089: LD_VAR 0 3
28093: LESS
28094: ST_TO_ADDR
// end ;
28095: LD_VAR 0 2
28099: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28100: LD_INT 0
28102: PPUSH
28103: PPUSH
28104: PPUSH
28105: PPUSH
// tmp := [ ] ;
28106: LD_ADDR_VAR 0 3
28110: PUSH
28111: EMPTY
28112: ST_TO_ADDR
// list := [ ] ;
28113: LD_ADDR_VAR 0 5
28117: PUSH
28118: EMPTY
28119: ST_TO_ADDR
// for i = 16 to 25 do
28120: LD_ADDR_VAR 0 4
28124: PUSH
28125: DOUBLE
28126: LD_INT 16
28128: DEC
28129: ST_TO_ADDR
28130: LD_INT 25
28132: PUSH
28133: FOR_TO
28134: IFFALSE 28207
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: LD_VAR 0 3
28145: PUSH
28146: LD_INT 22
28148: PUSH
28149: LD_VAR 0 1
28153: PPUSH
28154: CALL_OW 255
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 91
28165: PUSH
28166: LD_VAR 0 1
28170: PUSH
28171: LD_INT 6
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 30
28181: PUSH
28182: LD_VAR 0 4
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: LIST
28195: PUSH
28196: EMPTY
28197: LIST
28198: PPUSH
28199: CALL_OW 69
28203: ADD
28204: ST_TO_ADDR
28205: GO 28133
28207: POP
28208: POP
// for i = 1 to tmp do
28209: LD_ADDR_VAR 0 4
28213: PUSH
28214: DOUBLE
28215: LD_INT 1
28217: DEC
28218: ST_TO_ADDR
28219: LD_VAR 0 3
28223: PUSH
28224: FOR_TO
28225: IFFALSE 28313
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28227: LD_ADDR_VAR 0 5
28231: PUSH
28232: LD_VAR 0 5
28236: PUSH
28237: LD_VAR 0 3
28241: PUSH
28242: LD_VAR 0 4
28246: ARRAY
28247: PPUSH
28248: CALL_OW 266
28252: PUSH
28253: LD_VAR 0 3
28257: PUSH
28258: LD_VAR 0 4
28262: ARRAY
28263: PPUSH
28264: CALL_OW 250
28268: PUSH
28269: LD_VAR 0 3
28273: PUSH
28274: LD_VAR 0 4
28278: ARRAY
28279: PPUSH
28280: CALL_OW 251
28284: PUSH
28285: LD_VAR 0 3
28289: PUSH
28290: LD_VAR 0 4
28294: ARRAY
28295: PPUSH
28296: CALL_OW 254
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: ADD
28310: ST_TO_ADDR
28311: GO 28224
28313: POP
28314: POP
// result := list ;
28315: LD_ADDR_VAR 0 2
28319: PUSH
28320: LD_VAR 0 5
28324: ST_TO_ADDR
// end ;
28325: LD_VAR 0 2
28329: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28330: LD_INT 0
28332: PPUSH
28333: PPUSH
28334: PPUSH
28335: PPUSH
28336: PPUSH
28337: PPUSH
28338: PPUSH
// if not factory then
28339: LD_VAR 0 1
28343: NOT
28344: IFFALSE 28348
// exit ;
28346: GO 28941
// if control = control_apeman then
28348: LD_VAR 0 4
28352: PUSH
28353: LD_INT 5
28355: EQUAL
28356: IFFALSE 28465
// begin tmp := UnitsInside ( factory ) ;
28358: LD_ADDR_VAR 0 8
28362: PUSH
28363: LD_VAR 0 1
28367: PPUSH
28368: CALL_OW 313
28372: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28373: LD_VAR 0 8
28377: PPUSH
28378: LD_INT 25
28380: PUSH
28381: LD_INT 12
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PPUSH
28388: CALL_OW 72
28392: NOT
28393: IFFALSE 28403
// control := control_manual ;
28395: LD_ADDR_VAR 0 4
28399: PUSH
28400: LD_INT 1
28402: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28403: LD_ADDR_VAR 0 8
28407: PUSH
28408: LD_VAR 0 1
28412: PPUSH
28413: CALL 28100 0 1
28417: ST_TO_ADDR
// if tmp then
28418: LD_VAR 0 8
28422: IFFALSE 28465
// begin for i in tmp do
28424: LD_ADDR_VAR 0 7
28428: PUSH
28429: LD_VAR 0 8
28433: PUSH
28434: FOR_IN
28435: IFFALSE 28463
// if i [ 1 ] = b_ext_radio then
28437: LD_VAR 0 7
28441: PUSH
28442: LD_INT 1
28444: ARRAY
28445: PUSH
28446: LD_INT 22
28448: EQUAL
28449: IFFALSE 28461
// begin control := control_remote ;
28451: LD_ADDR_VAR 0 4
28455: PUSH
28456: LD_INT 2
28458: ST_TO_ADDR
// break ;
28459: GO 28463
// end ;
28461: GO 28434
28463: POP
28464: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28465: LD_VAR 0 1
28469: PPUSH
28470: LD_VAR 0 2
28474: PPUSH
28475: LD_VAR 0 3
28479: PPUSH
28480: LD_VAR 0 4
28484: PPUSH
28485: LD_VAR 0 5
28489: PPUSH
28490: CALL_OW 448
28494: IFFALSE 28529
// begin result := [ chassis , engine , control , weapon ] ;
28496: LD_ADDR_VAR 0 6
28500: PUSH
28501: LD_VAR 0 2
28505: PUSH
28506: LD_VAR 0 3
28510: PUSH
28511: LD_VAR 0 4
28515: PUSH
28516: LD_VAR 0 5
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: ST_TO_ADDR
// exit ;
28527: GO 28941
// end ; _chassis := AvailableChassisList ( factory ) ;
28529: LD_ADDR_VAR 0 9
28533: PUSH
28534: LD_VAR 0 1
28538: PPUSH
28539: CALL_OW 475
28543: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28544: LD_ADDR_VAR 0 11
28548: PUSH
28549: LD_VAR 0 1
28553: PPUSH
28554: CALL_OW 476
28558: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28559: LD_ADDR_VAR 0 12
28563: PUSH
28564: LD_VAR 0 1
28568: PPUSH
28569: CALL_OW 477
28573: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28574: LD_ADDR_VAR 0 10
28578: PUSH
28579: LD_VAR 0 1
28583: PPUSH
28584: CALL_OW 478
28588: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28589: LD_VAR 0 9
28593: NOT
28594: PUSH
28595: LD_VAR 0 11
28599: NOT
28600: OR
28601: PUSH
28602: LD_VAR 0 12
28606: NOT
28607: OR
28608: PUSH
28609: LD_VAR 0 10
28613: NOT
28614: OR
28615: IFFALSE 28650
// begin result := [ chassis , engine , control , weapon ] ;
28617: LD_ADDR_VAR 0 6
28621: PUSH
28622: LD_VAR 0 2
28626: PUSH
28627: LD_VAR 0 3
28631: PUSH
28632: LD_VAR 0 4
28636: PUSH
28637: LD_VAR 0 5
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: ST_TO_ADDR
// exit ;
28648: GO 28941
// end ; if not chassis in _chassis then
28650: LD_VAR 0 2
28654: PUSH
28655: LD_VAR 0 9
28659: IN
28660: NOT
28661: IFFALSE 28687
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28663: LD_ADDR_VAR 0 2
28667: PUSH
28668: LD_VAR 0 9
28672: PUSH
28673: LD_INT 1
28675: PPUSH
28676: LD_VAR 0 9
28680: PPUSH
28681: CALL_OW 12
28685: ARRAY
28686: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28687: LD_VAR 0 2
28691: PPUSH
28692: LD_VAR 0 3
28696: PPUSH
28697: CALL 28946 0 2
28701: NOT
28702: IFFALSE 28761
// repeat engine := _engine [ 1 ] ;
28704: LD_ADDR_VAR 0 3
28708: PUSH
28709: LD_VAR 0 11
28713: PUSH
28714: LD_INT 1
28716: ARRAY
28717: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28718: LD_ADDR_VAR 0 11
28722: PUSH
28723: LD_VAR 0 11
28727: PPUSH
28728: LD_INT 1
28730: PPUSH
28731: CALL_OW 3
28735: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28736: LD_VAR 0 2
28740: PPUSH
28741: LD_VAR 0 3
28745: PPUSH
28746: CALL 28946 0 2
28750: PUSH
28751: LD_VAR 0 11
28755: PUSH
28756: EMPTY
28757: EQUAL
28758: OR
28759: IFFALSE 28704
// if not control in _control then
28761: LD_VAR 0 4
28765: PUSH
28766: LD_VAR 0 12
28770: IN
28771: NOT
28772: IFFALSE 28798
// control := _control [ rand ( 1 , _control ) ] ;
28774: LD_ADDR_VAR 0 4
28778: PUSH
28779: LD_VAR 0 12
28783: PUSH
28784: LD_INT 1
28786: PPUSH
28787: LD_VAR 0 12
28791: PPUSH
28792: CALL_OW 12
28796: ARRAY
28797: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28798: LD_VAR 0 2
28802: PPUSH
28803: LD_VAR 0 5
28807: PPUSH
28808: CALL 29166 0 2
28812: NOT
28813: IFFALSE 28872
// repeat weapon := _weapon [ 1 ] ;
28815: LD_ADDR_VAR 0 5
28819: PUSH
28820: LD_VAR 0 10
28824: PUSH
28825: LD_INT 1
28827: ARRAY
28828: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28829: LD_ADDR_VAR 0 10
28833: PUSH
28834: LD_VAR 0 10
28838: PPUSH
28839: LD_INT 1
28841: PPUSH
28842: CALL_OW 3
28846: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28847: LD_VAR 0 2
28851: PPUSH
28852: LD_VAR 0 5
28856: PPUSH
28857: CALL 29166 0 2
28861: PUSH
28862: LD_VAR 0 10
28866: PUSH
28867: EMPTY
28868: EQUAL
28869: OR
28870: IFFALSE 28815
// result := [ ] ;
28872: LD_ADDR_VAR 0 6
28876: PUSH
28877: EMPTY
28878: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28879: LD_VAR 0 1
28883: PPUSH
28884: LD_VAR 0 2
28888: PPUSH
28889: LD_VAR 0 3
28893: PPUSH
28894: LD_VAR 0 4
28898: PPUSH
28899: LD_VAR 0 5
28903: PPUSH
28904: CALL_OW 448
28908: IFFALSE 28941
// result := [ chassis , engine , control , weapon ] ;
28910: LD_ADDR_VAR 0 6
28914: PUSH
28915: LD_VAR 0 2
28919: PUSH
28920: LD_VAR 0 3
28924: PUSH
28925: LD_VAR 0 4
28929: PUSH
28930: LD_VAR 0 5
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: ST_TO_ADDR
// end ;
28941: LD_VAR 0 6
28945: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28946: LD_INT 0
28948: PPUSH
// if not chassis or not engine then
28949: LD_VAR 0 1
28953: NOT
28954: PUSH
28955: LD_VAR 0 2
28959: NOT
28960: OR
28961: IFFALSE 28965
// exit ;
28963: GO 29161
// case engine of engine_solar :
28965: LD_VAR 0 2
28969: PUSH
28970: LD_INT 2
28972: DOUBLE
28973: EQUAL
28974: IFTRUE 28978
28976: GO 29016
28978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28979: LD_ADDR_VAR 0 3
28983: PUSH
28984: LD_INT 11
28986: PUSH
28987: LD_INT 12
28989: PUSH
28990: LD_INT 13
28992: PUSH
28993: LD_INT 14
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: LD_INT 3
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: ST_TO_ADDR
29014: GO 29145
29016: LD_INT 1
29018: DOUBLE
29019: EQUAL
29020: IFTRUE 29024
29022: GO 29086
29024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29025: LD_ADDR_VAR 0 3
29029: PUSH
29030: LD_INT 11
29032: PUSH
29033: LD_INT 12
29035: PUSH
29036: LD_INT 13
29038: PUSH
29039: LD_INT 14
29041: PUSH
29042: LD_INT 1
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: LD_INT 3
29050: PUSH
29051: LD_INT 4
29053: PUSH
29054: LD_INT 5
29056: PUSH
29057: LD_INT 21
29059: PUSH
29060: LD_INT 23
29062: PUSH
29063: LD_INT 22
29065: PUSH
29066: LD_INT 24
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: ST_TO_ADDR
29084: GO 29145
29086: LD_INT 3
29088: DOUBLE
29089: EQUAL
29090: IFTRUE 29094
29092: GO 29144
29094: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29095: LD_ADDR_VAR 0 3
29099: PUSH
29100: LD_INT 13
29102: PUSH
29103: LD_INT 14
29105: PUSH
29106: LD_INT 2
29108: PUSH
29109: LD_INT 3
29111: PUSH
29112: LD_INT 4
29114: PUSH
29115: LD_INT 5
29117: PUSH
29118: LD_INT 21
29120: PUSH
29121: LD_INT 22
29123: PUSH
29124: LD_INT 23
29126: PUSH
29127: LD_INT 24
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: ST_TO_ADDR
29142: GO 29145
29144: POP
// result := ( chassis in result ) ;
29145: LD_ADDR_VAR 0 3
29149: PUSH
29150: LD_VAR 0 1
29154: PUSH
29155: LD_VAR 0 3
29159: IN
29160: ST_TO_ADDR
// end ;
29161: LD_VAR 0 3
29165: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29166: LD_INT 0
29168: PPUSH
// if not chassis or not weapon then
29169: LD_VAR 0 1
29173: NOT
29174: PUSH
29175: LD_VAR 0 2
29179: NOT
29180: OR
29181: IFFALSE 29185
// exit ;
29183: GO 30245
// case weapon of us_machine_gun :
29185: LD_VAR 0 2
29189: PUSH
29190: LD_INT 2
29192: DOUBLE
29193: EQUAL
29194: IFTRUE 29198
29196: GO 29228
29198: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29199: LD_ADDR_VAR 0 3
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: LD_INT 2
29209: PUSH
29210: LD_INT 3
29212: PUSH
29213: LD_INT 4
29215: PUSH
29216: LD_INT 5
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: ST_TO_ADDR
29226: GO 30229
29228: LD_INT 3
29230: DOUBLE
29231: EQUAL
29232: IFTRUE 29236
29234: GO 29266
29236: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29237: LD_ADDR_VAR 0 3
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: LD_INT 2
29247: PUSH
29248: LD_INT 3
29250: PUSH
29251: LD_INT 4
29253: PUSH
29254: LD_INT 5
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
29264: GO 30229
29266: LD_INT 11
29268: DOUBLE
29269: EQUAL
29270: IFTRUE 29274
29272: GO 29304
29274: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29275: LD_ADDR_VAR 0 3
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: LD_INT 3
29288: PUSH
29289: LD_INT 4
29291: PUSH
29292: LD_INT 5
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: ST_TO_ADDR
29302: GO 30229
29304: LD_INT 4
29306: DOUBLE
29307: EQUAL
29308: IFTRUE 29312
29310: GO 29338
29312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29313: LD_ADDR_VAR 0 3
29317: PUSH
29318: LD_INT 2
29320: PUSH
29321: LD_INT 3
29323: PUSH
29324: LD_INT 4
29326: PUSH
29327: LD_INT 5
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: ST_TO_ADDR
29336: GO 30229
29338: LD_INT 5
29340: DOUBLE
29341: EQUAL
29342: IFTRUE 29346
29344: GO 29372
29346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29347: LD_ADDR_VAR 0 3
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: LD_INT 4
29360: PUSH
29361: LD_INT 5
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: ST_TO_ADDR
29370: GO 30229
29372: LD_INT 9
29374: DOUBLE
29375: EQUAL
29376: IFTRUE 29380
29378: GO 29406
29380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29381: LD_ADDR_VAR 0 3
29385: PUSH
29386: LD_INT 2
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: LD_INT 4
29394: PUSH
29395: LD_INT 5
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: ST_TO_ADDR
29404: GO 30229
29406: LD_INT 7
29408: DOUBLE
29409: EQUAL
29410: IFTRUE 29414
29412: GO 29440
29414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29415: LD_ADDR_VAR 0 3
29419: PUSH
29420: LD_INT 2
29422: PUSH
29423: LD_INT 3
29425: PUSH
29426: LD_INT 4
29428: PUSH
29429: LD_INT 5
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: ST_TO_ADDR
29438: GO 30229
29440: LD_INT 12
29442: DOUBLE
29443: EQUAL
29444: IFTRUE 29448
29446: GO 29474
29448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29449: LD_ADDR_VAR 0 3
29453: PUSH
29454: LD_INT 2
29456: PUSH
29457: LD_INT 3
29459: PUSH
29460: LD_INT 4
29462: PUSH
29463: LD_INT 5
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: ST_TO_ADDR
29472: GO 30229
29474: LD_INT 13
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29508
29482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29483: LD_ADDR_VAR 0 3
29487: PUSH
29488: LD_INT 2
29490: PUSH
29491: LD_INT 3
29493: PUSH
29494: LD_INT 4
29496: PUSH
29497: LD_INT 5
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: ST_TO_ADDR
29506: GO 30229
29508: LD_INT 14
29510: DOUBLE
29511: EQUAL
29512: IFTRUE 29516
29514: GO 29534
29516: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29517: LD_ADDR_VAR 0 3
29521: PUSH
29522: LD_INT 4
29524: PUSH
29525: LD_INT 5
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: ST_TO_ADDR
29532: GO 30229
29534: LD_INT 6
29536: DOUBLE
29537: EQUAL
29538: IFTRUE 29542
29540: GO 29560
29542: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29543: LD_ADDR_VAR 0 3
29547: PUSH
29548: LD_INT 4
29550: PUSH
29551: LD_INT 5
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: ST_TO_ADDR
29558: GO 30229
29560: LD_INT 10
29562: DOUBLE
29563: EQUAL
29564: IFTRUE 29568
29566: GO 29586
29568: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29569: LD_ADDR_VAR 0 3
29573: PUSH
29574: LD_INT 4
29576: PUSH
29577: LD_INT 5
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: ST_TO_ADDR
29584: GO 30229
29586: LD_INT 22
29588: DOUBLE
29589: EQUAL
29590: IFTRUE 29594
29592: GO 29620
29594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29595: LD_ADDR_VAR 0 3
29599: PUSH
29600: LD_INT 11
29602: PUSH
29603: LD_INT 12
29605: PUSH
29606: LD_INT 13
29608: PUSH
29609: LD_INT 14
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: ST_TO_ADDR
29618: GO 30229
29620: LD_INT 23
29622: DOUBLE
29623: EQUAL
29624: IFTRUE 29628
29626: GO 29654
29628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29629: LD_ADDR_VAR 0 3
29633: PUSH
29634: LD_INT 11
29636: PUSH
29637: LD_INT 12
29639: PUSH
29640: LD_INT 13
29642: PUSH
29643: LD_INT 14
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: ST_TO_ADDR
29652: GO 30229
29654: LD_INT 24
29656: DOUBLE
29657: EQUAL
29658: IFTRUE 29662
29660: GO 29688
29662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29663: LD_ADDR_VAR 0 3
29667: PUSH
29668: LD_INT 11
29670: PUSH
29671: LD_INT 12
29673: PUSH
29674: LD_INT 13
29676: PUSH
29677: LD_INT 14
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: ST_TO_ADDR
29686: GO 30229
29688: LD_INT 30
29690: DOUBLE
29691: EQUAL
29692: IFTRUE 29696
29694: GO 29722
29696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29697: LD_ADDR_VAR 0 3
29701: PUSH
29702: LD_INT 11
29704: PUSH
29705: LD_INT 12
29707: PUSH
29708: LD_INT 13
29710: PUSH
29711: LD_INT 14
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: ST_TO_ADDR
29720: GO 30229
29722: LD_INT 25
29724: DOUBLE
29725: EQUAL
29726: IFTRUE 29730
29728: GO 29748
29730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29731: LD_ADDR_VAR 0 3
29735: PUSH
29736: LD_INT 13
29738: PUSH
29739: LD_INT 14
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: ST_TO_ADDR
29746: GO 30229
29748: LD_INT 27
29750: DOUBLE
29751: EQUAL
29752: IFTRUE 29756
29754: GO 29774
29756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29757: LD_ADDR_VAR 0 3
29761: PUSH
29762: LD_INT 13
29764: PUSH
29765: LD_INT 14
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: ST_TO_ADDR
29772: GO 30229
29774: LD_INT 92
29776: DOUBLE
29777: EQUAL
29778: IFTRUE 29782
29780: GO 29808
29782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29783: LD_ADDR_VAR 0 3
29787: PUSH
29788: LD_INT 11
29790: PUSH
29791: LD_INT 12
29793: PUSH
29794: LD_INT 13
29796: PUSH
29797: LD_INT 14
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: ST_TO_ADDR
29806: GO 30229
29808: LD_INT 28
29810: DOUBLE
29811: EQUAL
29812: IFTRUE 29816
29814: GO 29834
29816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29817: LD_ADDR_VAR 0 3
29821: PUSH
29822: LD_INT 13
29824: PUSH
29825: LD_INT 14
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: ST_TO_ADDR
29832: GO 30229
29834: LD_INT 29
29836: DOUBLE
29837: EQUAL
29838: IFTRUE 29842
29840: GO 29860
29842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29843: LD_ADDR_VAR 0 3
29847: PUSH
29848: LD_INT 13
29850: PUSH
29851: LD_INT 14
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: ST_TO_ADDR
29858: GO 30229
29860: LD_INT 31
29862: DOUBLE
29863: EQUAL
29864: IFTRUE 29868
29866: GO 29886
29868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29869: LD_ADDR_VAR 0 3
29873: PUSH
29874: LD_INT 13
29876: PUSH
29877: LD_INT 14
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: ST_TO_ADDR
29884: GO 30229
29886: LD_INT 26
29888: DOUBLE
29889: EQUAL
29890: IFTRUE 29894
29892: GO 29912
29894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29895: LD_ADDR_VAR 0 3
29899: PUSH
29900: LD_INT 13
29902: PUSH
29903: LD_INT 14
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: ST_TO_ADDR
29910: GO 30229
29912: LD_INT 42
29914: DOUBLE
29915: EQUAL
29916: IFTRUE 29920
29918: GO 29946
29920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29921: LD_ADDR_VAR 0 3
29925: PUSH
29926: LD_INT 21
29928: PUSH
29929: LD_INT 22
29931: PUSH
29932: LD_INT 23
29934: PUSH
29935: LD_INT 24
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: ST_TO_ADDR
29944: GO 30229
29946: LD_INT 43
29948: DOUBLE
29949: EQUAL
29950: IFTRUE 29954
29952: GO 29980
29954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29955: LD_ADDR_VAR 0 3
29959: PUSH
29960: LD_INT 21
29962: PUSH
29963: LD_INT 22
29965: PUSH
29966: LD_INT 23
29968: PUSH
29969: LD_INT 24
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: ST_TO_ADDR
29978: GO 30229
29980: LD_INT 44
29982: DOUBLE
29983: EQUAL
29984: IFTRUE 29988
29986: GO 30014
29988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: LD_INT 21
29996: PUSH
29997: LD_INT 22
29999: PUSH
30000: LD_INT 23
30002: PUSH
30003: LD_INT 24
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: ST_TO_ADDR
30012: GO 30229
30014: LD_INT 45
30016: DOUBLE
30017: EQUAL
30018: IFTRUE 30022
30020: GO 30048
30022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30023: LD_ADDR_VAR 0 3
30027: PUSH
30028: LD_INT 21
30030: PUSH
30031: LD_INT 22
30033: PUSH
30034: LD_INT 23
30036: PUSH
30037: LD_INT 24
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
30046: GO 30229
30048: LD_INT 49
30050: DOUBLE
30051: EQUAL
30052: IFTRUE 30056
30054: GO 30082
30056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30057: LD_ADDR_VAR 0 3
30061: PUSH
30062: LD_INT 21
30064: PUSH
30065: LD_INT 22
30067: PUSH
30068: LD_INT 23
30070: PUSH
30071: LD_INT 24
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: ST_TO_ADDR
30080: GO 30229
30082: LD_INT 51
30084: DOUBLE
30085: EQUAL
30086: IFTRUE 30090
30088: GO 30116
30090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30091: LD_ADDR_VAR 0 3
30095: PUSH
30096: LD_INT 21
30098: PUSH
30099: LD_INT 22
30101: PUSH
30102: LD_INT 23
30104: PUSH
30105: LD_INT 24
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: ST_TO_ADDR
30114: GO 30229
30116: LD_INT 52
30118: DOUBLE
30119: EQUAL
30120: IFTRUE 30124
30122: GO 30150
30124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30125: LD_ADDR_VAR 0 3
30129: PUSH
30130: LD_INT 21
30132: PUSH
30133: LD_INT 22
30135: PUSH
30136: LD_INT 23
30138: PUSH
30139: LD_INT 24
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: ST_TO_ADDR
30148: GO 30229
30150: LD_INT 53
30152: DOUBLE
30153: EQUAL
30154: IFTRUE 30158
30156: GO 30176
30158: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30159: LD_ADDR_VAR 0 3
30163: PUSH
30164: LD_INT 23
30166: PUSH
30167: LD_INT 24
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: ST_TO_ADDR
30174: GO 30229
30176: LD_INT 46
30178: DOUBLE
30179: EQUAL
30180: IFTRUE 30184
30182: GO 30202
30184: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30185: LD_ADDR_VAR 0 3
30189: PUSH
30190: LD_INT 23
30192: PUSH
30193: LD_INT 24
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: ST_TO_ADDR
30200: GO 30229
30202: LD_INT 47
30204: DOUBLE
30205: EQUAL
30206: IFTRUE 30210
30208: GO 30228
30210: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30211: LD_ADDR_VAR 0 3
30215: PUSH
30216: LD_INT 23
30218: PUSH
30219: LD_INT 24
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: ST_TO_ADDR
30226: GO 30229
30228: POP
// result := ( chassis in result ) ;
30229: LD_ADDR_VAR 0 3
30233: PUSH
30234: LD_VAR 0 1
30238: PUSH
30239: LD_VAR 0 3
30243: IN
30244: ST_TO_ADDR
// end ;
30245: LD_VAR 0 3
30249: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30250: LD_INT 0
30252: PPUSH
30253: PPUSH
30254: PPUSH
30255: PPUSH
30256: PPUSH
30257: PPUSH
30258: PPUSH
// result := array ;
30259: LD_ADDR_VAR 0 5
30263: PUSH
30264: LD_VAR 0 1
30268: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30269: LD_VAR 0 1
30273: NOT
30274: PUSH
30275: LD_VAR 0 2
30279: NOT
30280: OR
30281: PUSH
30282: LD_VAR 0 3
30286: NOT
30287: OR
30288: PUSH
30289: LD_VAR 0 2
30293: PUSH
30294: LD_VAR 0 1
30298: GREATER
30299: OR
30300: PUSH
30301: LD_VAR 0 3
30305: PUSH
30306: LD_VAR 0 1
30310: GREATER
30311: OR
30312: IFFALSE 30316
// exit ;
30314: GO 30612
// if direction then
30316: LD_VAR 0 4
30320: IFFALSE 30384
// begin d := 1 ;
30322: LD_ADDR_VAR 0 9
30326: PUSH
30327: LD_INT 1
30329: ST_TO_ADDR
// if i_from > i_to then
30330: LD_VAR 0 2
30334: PUSH
30335: LD_VAR 0 3
30339: GREATER
30340: IFFALSE 30366
// length := ( array - i_from ) + i_to else
30342: LD_ADDR_VAR 0 11
30346: PUSH
30347: LD_VAR 0 1
30351: PUSH
30352: LD_VAR 0 2
30356: MINUS
30357: PUSH
30358: LD_VAR 0 3
30362: PLUS
30363: ST_TO_ADDR
30364: GO 30382
// length := i_to - i_from ;
30366: LD_ADDR_VAR 0 11
30370: PUSH
30371: LD_VAR 0 3
30375: PUSH
30376: LD_VAR 0 2
30380: MINUS
30381: ST_TO_ADDR
// end else
30382: GO 30445
// begin d := - 1 ;
30384: LD_ADDR_VAR 0 9
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: ST_TO_ADDR
// if i_from > i_to then
30393: LD_VAR 0 2
30397: PUSH
30398: LD_VAR 0 3
30402: GREATER
30403: IFFALSE 30423
// length := i_from - i_to else
30405: LD_ADDR_VAR 0 11
30409: PUSH
30410: LD_VAR 0 2
30414: PUSH
30415: LD_VAR 0 3
30419: MINUS
30420: ST_TO_ADDR
30421: GO 30445
// length := ( array - i_to ) + i_from ;
30423: LD_ADDR_VAR 0 11
30427: PUSH
30428: LD_VAR 0 1
30432: PUSH
30433: LD_VAR 0 3
30437: MINUS
30438: PUSH
30439: LD_VAR 0 2
30443: PLUS
30444: ST_TO_ADDR
// end ; if not length then
30445: LD_VAR 0 11
30449: NOT
30450: IFFALSE 30454
// exit ;
30452: GO 30612
// tmp := array ;
30454: LD_ADDR_VAR 0 10
30458: PUSH
30459: LD_VAR 0 1
30463: ST_TO_ADDR
// for i = 1 to length do
30464: LD_ADDR_VAR 0 6
30468: PUSH
30469: DOUBLE
30470: LD_INT 1
30472: DEC
30473: ST_TO_ADDR
30474: LD_VAR 0 11
30478: PUSH
30479: FOR_TO
30480: IFFALSE 30600
// begin for j = 1 to array do
30482: LD_ADDR_VAR 0 7
30486: PUSH
30487: DOUBLE
30488: LD_INT 1
30490: DEC
30491: ST_TO_ADDR
30492: LD_VAR 0 1
30496: PUSH
30497: FOR_TO
30498: IFFALSE 30586
// begin k := j + d ;
30500: LD_ADDR_VAR 0 8
30504: PUSH
30505: LD_VAR 0 7
30509: PUSH
30510: LD_VAR 0 9
30514: PLUS
30515: ST_TO_ADDR
// if k > array then
30516: LD_VAR 0 8
30520: PUSH
30521: LD_VAR 0 1
30525: GREATER
30526: IFFALSE 30536
// k := 1 ;
30528: LD_ADDR_VAR 0 8
30532: PUSH
30533: LD_INT 1
30535: ST_TO_ADDR
// if not k then
30536: LD_VAR 0 8
30540: NOT
30541: IFFALSE 30553
// k := array ;
30543: LD_ADDR_VAR 0 8
30547: PUSH
30548: LD_VAR 0 1
30552: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30553: LD_ADDR_VAR 0 10
30557: PUSH
30558: LD_VAR 0 10
30562: PPUSH
30563: LD_VAR 0 8
30567: PPUSH
30568: LD_VAR 0 1
30572: PUSH
30573: LD_VAR 0 7
30577: ARRAY
30578: PPUSH
30579: CALL_OW 1
30583: ST_TO_ADDR
// end ;
30584: GO 30497
30586: POP
30587: POP
// array := tmp ;
30588: LD_ADDR_VAR 0 1
30592: PUSH
30593: LD_VAR 0 10
30597: ST_TO_ADDR
// end ;
30598: GO 30479
30600: POP
30601: POP
// result := array ;
30602: LD_ADDR_VAR 0 5
30606: PUSH
30607: LD_VAR 0 1
30611: ST_TO_ADDR
// end ;
30612: LD_VAR 0 5
30616: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30617: LD_INT 0
30619: PPUSH
30620: PPUSH
// result := 0 ;
30621: LD_ADDR_VAR 0 3
30625: PUSH
30626: LD_INT 0
30628: ST_TO_ADDR
// if not array or not value in array then
30629: LD_VAR 0 1
30633: NOT
30634: PUSH
30635: LD_VAR 0 2
30639: PUSH
30640: LD_VAR 0 1
30644: IN
30645: NOT
30646: OR
30647: IFFALSE 30651
// exit ;
30649: GO 30705
// for i = 1 to array do
30651: LD_ADDR_VAR 0 4
30655: PUSH
30656: DOUBLE
30657: LD_INT 1
30659: DEC
30660: ST_TO_ADDR
30661: LD_VAR 0 1
30665: PUSH
30666: FOR_TO
30667: IFFALSE 30703
// if value = array [ i ] then
30669: LD_VAR 0 2
30673: PUSH
30674: LD_VAR 0 1
30678: PUSH
30679: LD_VAR 0 4
30683: ARRAY
30684: EQUAL
30685: IFFALSE 30701
// begin result := i ;
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: LD_VAR 0 4
30696: ST_TO_ADDR
// exit ;
30697: POP
30698: POP
30699: GO 30705
// end ;
30701: GO 30666
30703: POP
30704: POP
// end ;
30705: LD_VAR 0 3
30709: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30710: LD_INT 0
30712: PPUSH
// vc_chassis := chassis ;
30713: LD_ADDR_OWVAR 37
30717: PUSH
30718: LD_VAR 0 1
30722: ST_TO_ADDR
// vc_engine := engine ;
30723: LD_ADDR_OWVAR 39
30727: PUSH
30728: LD_VAR 0 2
30732: ST_TO_ADDR
// vc_control := control ;
30733: LD_ADDR_OWVAR 38
30737: PUSH
30738: LD_VAR 0 3
30742: ST_TO_ADDR
// vc_weapon := weapon ;
30743: LD_ADDR_OWVAR 40
30747: PUSH
30748: LD_VAR 0 4
30752: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30753: LD_ADDR_OWVAR 41
30757: PUSH
30758: LD_VAR 0 5
30762: ST_TO_ADDR
// end ;
30763: LD_VAR 0 6
30767: RET
// export function WantPlant ( unit ) ; var task ; begin
30768: LD_INT 0
30770: PPUSH
30771: PPUSH
// result := false ;
30772: LD_ADDR_VAR 0 2
30776: PUSH
30777: LD_INT 0
30779: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30780: LD_ADDR_VAR 0 3
30784: PUSH
30785: LD_VAR 0 1
30789: PPUSH
30790: CALL_OW 437
30794: ST_TO_ADDR
// if task then
30795: LD_VAR 0 3
30799: IFFALSE 30827
// if task [ 1 ] [ 1 ] = p then
30801: LD_VAR 0 3
30805: PUSH
30806: LD_INT 1
30808: ARRAY
30809: PUSH
30810: LD_INT 1
30812: ARRAY
30813: PUSH
30814: LD_STRING p
30816: EQUAL
30817: IFFALSE 30827
// result := true ;
30819: LD_ADDR_VAR 0 2
30823: PUSH
30824: LD_INT 1
30826: ST_TO_ADDR
// end ;
30827: LD_VAR 0 2
30831: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30832: LD_INT 0
30834: PPUSH
30835: PPUSH
30836: PPUSH
30837: PPUSH
// if pos < 1 then
30838: LD_VAR 0 2
30842: PUSH
30843: LD_INT 1
30845: LESS
30846: IFFALSE 30850
// exit ;
30848: GO 31153
// if pos = 1 then
30850: LD_VAR 0 2
30854: PUSH
30855: LD_INT 1
30857: EQUAL
30858: IFFALSE 30891
// result := Replace ( arr , pos [ 1 ] , value ) else
30860: LD_ADDR_VAR 0 4
30864: PUSH
30865: LD_VAR 0 1
30869: PPUSH
30870: LD_VAR 0 2
30874: PUSH
30875: LD_INT 1
30877: ARRAY
30878: PPUSH
30879: LD_VAR 0 3
30883: PPUSH
30884: CALL_OW 1
30888: ST_TO_ADDR
30889: GO 31153
// begin tmp := arr ;
30891: LD_ADDR_VAR 0 6
30895: PUSH
30896: LD_VAR 0 1
30900: ST_TO_ADDR
// s_arr := [ tmp ] ;
30901: LD_ADDR_VAR 0 7
30905: PUSH
30906: LD_VAR 0 6
30910: PUSH
30911: EMPTY
30912: LIST
30913: ST_TO_ADDR
// for i = 1 to pos - 1 do
30914: LD_ADDR_VAR 0 5
30918: PUSH
30919: DOUBLE
30920: LD_INT 1
30922: DEC
30923: ST_TO_ADDR
30924: LD_VAR 0 2
30928: PUSH
30929: LD_INT 1
30931: MINUS
30932: PUSH
30933: FOR_TO
30934: IFFALSE 30979
// begin tmp := tmp [ pos [ i ] ] ;
30936: LD_ADDR_VAR 0 6
30940: PUSH
30941: LD_VAR 0 6
30945: PUSH
30946: LD_VAR 0 2
30950: PUSH
30951: LD_VAR 0 5
30955: ARRAY
30956: ARRAY
30957: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30958: LD_ADDR_VAR 0 7
30962: PUSH
30963: LD_VAR 0 7
30967: PUSH
30968: LD_VAR 0 6
30972: PUSH
30973: EMPTY
30974: LIST
30975: ADD
30976: ST_TO_ADDR
// end ;
30977: GO 30933
30979: POP
30980: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30981: LD_ADDR_VAR 0 6
30985: PUSH
30986: LD_VAR 0 6
30990: PPUSH
30991: LD_VAR 0 2
30995: PUSH
30996: LD_VAR 0 2
31000: ARRAY
31001: PPUSH
31002: LD_VAR 0 3
31006: PPUSH
31007: CALL_OW 1
31011: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31012: LD_ADDR_VAR 0 7
31016: PUSH
31017: LD_VAR 0 7
31021: PPUSH
31022: LD_VAR 0 7
31026: PPUSH
31027: LD_VAR 0 6
31031: PPUSH
31032: CALL_OW 1
31036: ST_TO_ADDR
// for i = s_arr downto 2 do
31037: LD_ADDR_VAR 0 5
31041: PUSH
31042: DOUBLE
31043: LD_VAR 0 7
31047: INC
31048: ST_TO_ADDR
31049: LD_INT 2
31051: PUSH
31052: FOR_DOWNTO
31053: IFFALSE 31137
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31055: LD_ADDR_VAR 0 6
31059: PUSH
31060: LD_VAR 0 7
31064: PUSH
31065: LD_VAR 0 5
31069: PUSH
31070: LD_INT 1
31072: MINUS
31073: ARRAY
31074: PPUSH
31075: LD_VAR 0 2
31079: PUSH
31080: LD_VAR 0 5
31084: PUSH
31085: LD_INT 1
31087: MINUS
31088: ARRAY
31089: PPUSH
31090: LD_VAR 0 7
31094: PUSH
31095: LD_VAR 0 5
31099: ARRAY
31100: PPUSH
31101: CALL_OW 1
31105: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31106: LD_ADDR_VAR 0 7
31110: PUSH
31111: LD_VAR 0 7
31115: PPUSH
31116: LD_VAR 0 5
31120: PUSH
31121: LD_INT 1
31123: MINUS
31124: PPUSH
31125: LD_VAR 0 6
31129: PPUSH
31130: CALL_OW 1
31134: ST_TO_ADDR
// end ;
31135: GO 31052
31137: POP
31138: POP
// result := s_arr [ 1 ] ;
31139: LD_ADDR_VAR 0 4
31143: PUSH
31144: LD_VAR 0 7
31148: PUSH
31149: LD_INT 1
31151: ARRAY
31152: ST_TO_ADDR
// end ; end ;
31153: LD_VAR 0 4
31157: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31158: LD_INT 0
31160: PPUSH
31161: PPUSH
// if not list then
31162: LD_VAR 0 1
31166: NOT
31167: IFFALSE 31171
// exit ;
31169: GO 31262
// i := list [ pos1 ] ;
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: LD_VAR 0 1
31180: PUSH
31181: LD_VAR 0 2
31185: ARRAY
31186: ST_TO_ADDR
// if not i then
31187: LD_VAR 0 5
31191: NOT
31192: IFFALSE 31196
// exit ;
31194: GO 31262
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31196: LD_ADDR_VAR 0 1
31200: PUSH
31201: LD_VAR 0 1
31205: PPUSH
31206: LD_VAR 0 2
31210: PPUSH
31211: LD_VAR 0 1
31215: PUSH
31216: LD_VAR 0 3
31220: ARRAY
31221: PPUSH
31222: CALL_OW 1
31226: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31227: LD_ADDR_VAR 0 1
31231: PUSH
31232: LD_VAR 0 1
31236: PPUSH
31237: LD_VAR 0 3
31241: PPUSH
31242: LD_VAR 0 5
31246: PPUSH
31247: CALL_OW 1
31251: ST_TO_ADDR
// result := list ;
31252: LD_ADDR_VAR 0 4
31256: PUSH
31257: LD_VAR 0 1
31261: ST_TO_ADDR
// end ;
31262: LD_VAR 0 4
31266: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31267: LD_INT 0
31269: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31270: LD_ADDR_VAR 0 5
31274: PUSH
31275: LD_VAR 0 1
31279: PPUSH
31280: CALL_OW 250
31284: PPUSH
31285: LD_VAR 0 1
31289: PPUSH
31290: CALL_OW 251
31294: PPUSH
31295: LD_VAR 0 2
31299: PPUSH
31300: LD_VAR 0 3
31304: PPUSH
31305: LD_VAR 0 4
31309: PPUSH
31310: CALL 31320 0 5
31314: ST_TO_ADDR
// end ;
31315: LD_VAR 0 5
31319: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31320: LD_INT 0
31322: PPUSH
31323: PPUSH
31324: PPUSH
31325: PPUSH
// if not list then
31326: LD_VAR 0 3
31330: NOT
31331: IFFALSE 31335
// exit ;
31333: GO 31723
// result := [ ] ;
31335: LD_ADDR_VAR 0 6
31339: PUSH
31340: EMPTY
31341: ST_TO_ADDR
// for i in list do
31342: LD_ADDR_VAR 0 7
31346: PUSH
31347: LD_VAR 0 3
31351: PUSH
31352: FOR_IN
31353: IFFALSE 31555
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31355: LD_ADDR_VAR 0 9
31359: PUSH
31360: LD_VAR 0 7
31364: PPUSH
31365: LD_VAR 0 1
31369: PPUSH
31370: LD_VAR 0 2
31374: PPUSH
31375: CALL_OW 297
31379: ST_TO_ADDR
// if not result then
31380: LD_VAR 0 6
31384: NOT
31385: IFFALSE 31411
// result := [ [ i , tmp ] ] else
31387: LD_ADDR_VAR 0 6
31391: PUSH
31392: LD_VAR 0 7
31396: PUSH
31397: LD_VAR 0 9
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: EMPTY
31407: LIST
31408: ST_TO_ADDR
31409: GO 31553
// begin if result [ result ] [ 2 ] < tmp then
31411: LD_VAR 0 6
31415: PUSH
31416: LD_VAR 0 6
31420: ARRAY
31421: PUSH
31422: LD_INT 2
31424: ARRAY
31425: PUSH
31426: LD_VAR 0 9
31430: LESS
31431: IFFALSE 31473
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31433: LD_ADDR_VAR 0 6
31437: PUSH
31438: LD_VAR 0 6
31442: PPUSH
31443: LD_VAR 0 6
31447: PUSH
31448: LD_INT 1
31450: PLUS
31451: PPUSH
31452: LD_VAR 0 7
31456: PUSH
31457: LD_VAR 0 9
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PPUSH
31466: CALL_OW 2
31470: ST_TO_ADDR
31471: GO 31553
// for j = 1 to result do
31473: LD_ADDR_VAR 0 8
31477: PUSH
31478: DOUBLE
31479: LD_INT 1
31481: DEC
31482: ST_TO_ADDR
31483: LD_VAR 0 6
31487: PUSH
31488: FOR_TO
31489: IFFALSE 31551
// begin if tmp < result [ j ] [ 2 ] then
31491: LD_VAR 0 9
31495: PUSH
31496: LD_VAR 0 6
31500: PUSH
31501: LD_VAR 0 8
31505: ARRAY
31506: PUSH
31507: LD_INT 2
31509: ARRAY
31510: LESS
31511: IFFALSE 31549
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31513: LD_ADDR_VAR 0 6
31517: PUSH
31518: LD_VAR 0 6
31522: PPUSH
31523: LD_VAR 0 8
31527: PPUSH
31528: LD_VAR 0 7
31532: PUSH
31533: LD_VAR 0 9
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PPUSH
31542: CALL_OW 2
31546: ST_TO_ADDR
// break ;
31547: GO 31551
// end ; end ;
31549: GO 31488
31551: POP
31552: POP
// end ; end ;
31553: GO 31352
31555: POP
31556: POP
// if result and not asc then
31557: LD_VAR 0 6
31561: PUSH
31562: LD_VAR 0 4
31566: NOT
31567: AND
31568: IFFALSE 31643
// begin tmp := result ;
31570: LD_ADDR_VAR 0 9
31574: PUSH
31575: LD_VAR 0 6
31579: ST_TO_ADDR
// for i = tmp downto 1 do
31580: LD_ADDR_VAR 0 7
31584: PUSH
31585: DOUBLE
31586: LD_VAR 0 9
31590: INC
31591: ST_TO_ADDR
31592: LD_INT 1
31594: PUSH
31595: FOR_DOWNTO
31596: IFFALSE 31641
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31598: LD_ADDR_VAR 0 6
31602: PUSH
31603: LD_VAR 0 6
31607: PPUSH
31608: LD_VAR 0 9
31612: PUSH
31613: LD_VAR 0 7
31617: MINUS
31618: PUSH
31619: LD_INT 1
31621: PLUS
31622: PPUSH
31623: LD_VAR 0 9
31627: PUSH
31628: LD_VAR 0 7
31632: ARRAY
31633: PPUSH
31634: CALL_OW 1
31638: ST_TO_ADDR
31639: GO 31595
31641: POP
31642: POP
// end ; tmp := [ ] ;
31643: LD_ADDR_VAR 0 9
31647: PUSH
31648: EMPTY
31649: ST_TO_ADDR
// if mode then
31650: LD_VAR 0 5
31654: IFFALSE 31723
// begin for i = 1 to result do
31656: LD_ADDR_VAR 0 7
31660: PUSH
31661: DOUBLE
31662: LD_INT 1
31664: DEC
31665: ST_TO_ADDR
31666: LD_VAR 0 6
31670: PUSH
31671: FOR_TO
31672: IFFALSE 31711
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31674: LD_ADDR_VAR 0 9
31678: PUSH
31679: LD_VAR 0 9
31683: PPUSH
31684: LD_VAR 0 7
31688: PPUSH
31689: LD_VAR 0 6
31693: PUSH
31694: LD_VAR 0 7
31698: ARRAY
31699: PUSH
31700: LD_INT 1
31702: ARRAY
31703: PPUSH
31704: CALL_OW 1
31708: ST_TO_ADDR
31709: GO 31671
31711: POP
31712: POP
// result := tmp ;
31713: LD_ADDR_VAR 0 6
31717: PUSH
31718: LD_VAR 0 9
31722: ST_TO_ADDR
// end ; end ;
31723: LD_VAR 0 6
31727: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31728: LD_INT 0
31730: PPUSH
31731: PPUSH
31732: PPUSH
31733: PPUSH
31734: PPUSH
31735: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31736: LD_ADDR_VAR 0 5
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: EMPTY
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: ST_TO_ADDR
// if not x or not y then
31758: LD_VAR 0 2
31762: NOT
31763: PUSH
31764: LD_VAR 0 3
31768: NOT
31769: OR
31770: IFFALSE 31774
// exit ;
31772: GO 33424
// if not range then
31774: LD_VAR 0 4
31778: NOT
31779: IFFALSE 31789
// range := 10 ;
31781: LD_ADDR_VAR 0 4
31785: PUSH
31786: LD_INT 10
31788: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31789: LD_ADDR_VAR 0 8
31793: PUSH
31794: LD_INT 81
31796: PUSH
31797: LD_VAR 0 1
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 92
31808: PUSH
31809: LD_VAR 0 2
31813: PUSH
31814: LD_VAR 0 3
31818: PUSH
31819: LD_VAR 0 4
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 3
31832: PUSH
31833: LD_INT 21
31835: PUSH
31836: LD_INT 3
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: LIST
31851: PPUSH
31852: CALL_OW 69
31856: ST_TO_ADDR
// if not tmp then
31857: LD_VAR 0 8
31861: NOT
31862: IFFALSE 31866
// exit ;
31864: GO 33424
// for i in tmp do
31866: LD_ADDR_VAR 0 6
31870: PUSH
31871: LD_VAR 0 8
31875: PUSH
31876: FOR_IN
31877: IFFALSE 33399
// begin points := [ 0 , 0 , 0 ] ;
31879: LD_ADDR_VAR 0 9
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: ST_TO_ADDR
// bpoints := 1 ;
31898: LD_ADDR_VAR 0 10
31902: PUSH
31903: LD_INT 1
31905: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31906: LD_VAR 0 6
31910: PPUSH
31911: CALL_OW 247
31915: PUSH
31916: LD_INT 1
31918: DOUBLE
31919: EQUAL
31920: IFTRUE 31924
31922: GO 32502
31924: POP
// begin if GetClass ( i ) = 1 then
31925: LD_VAR 0 6
31929: PPUSH
31930: CALL_OW 257
31934: PUSH
31935: LD_INT 1
31937: EQUAL
31938: IFFALSE 31959
// points := [ 10 , 5 , 3 ] ;
31940: LD_ADDR_VAR 0 9
31944: PUSH
31945: LD_INT 10
31947: PUSH
31948: LD_INT 5
31950: PUSH
31951: LD_INT 3
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31959: LD_VAR 0 6
31963: PPUSH
31964: CALL_OW 257
31968: PUSH
31969: LD_INT 2
31971: PUSH
31972: LD_INT 3
31974: PUSH
31975: LD_INT 4
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: LIST
31982: IN
31983: IFFALSE 32004
// points := [ 3 , 2 , 1 ] ;
31985: LD_ADDR_VAR 0 9
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: LD_INT 1
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32004: LD_VAR 0 6
32008: PPUSH
32009: CALL_OW 257
32013: PUSH
32014: LD_INT 5
32016: EQUAL
32017: IFFALSE 32038
// points := [ 130 , 5 , 2 ] ;
32019: LD_ADDR_VAR 0 9
32023: PUSH
32024: LD_INT 130
32026: PUSH
32027: LD_INT 5
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32038: LD_VAR 0 6
32042: PPUSH
32043: CALL_OW 257
32047: PUSH
32048: LD_INT 8
32050: EQUAL
32051: IFFALSE 32072
// points := [ 35 , 35 , 30 ] ;
32053: LD_ADDR_VAR 0 9
32057: PUSH
32058: LD_INT 35
32060: PUSH
32061: LD_INT 35
32063: PUSH
32064: LD_INT 30
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32072: LD_VAR 0 6
32076: PPUSH
32077: CALL_OW 257
32081: PUSH
32082: LD_INT 9
32084: EQUAL
32085: IFFALSE 32106
// points := [ 20 , 55 , 40 ] ;
32087: LD_ADDR_VAR 0 9
32091: PUSH
32092: LD_INT 20
32094: PUSH
32095: LD_INT 55
32097: PUSH
32098: LD_INT 40
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32106: LD_VAR 0 6
32110: PPUSH
32111: CALL_OW 257
32115: PUSH
32116: LD_INT 12
32118: PUSH
32119: LD_INT 16
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: IN
32126: IFFALSE 32147
// points := [ 5 , 3 , 2 ] ;
32128: LD_ADDR_VAR 0 9
32132: PUSH
32133: LD_INT 5
32135: PUSH
32136: LD_INT 3
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32147: LD_VAR 0 6
32151: PPUSH
32152: CALL_OW 257
32156: PUSH
32157: LD_INT 17
32159: EQUAL
32160: IFFALSE 32181
// points := [ 100 , 50 , 75 ] ;
32162: LD_ADDR_VAR 0 9
32166: PUSH
32167: LD_INT 100
32169: PUSH
32170: LD_INT 50
32172: PUSH
32173: LD_INT 75
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32181: LD_VAR 0 6
32185: PPUSH
32186: CALL_OW 257
32190: PUSH
32191: LD_INT 15
32193: EQUAL
32194: IFFALSE 32215
// points := [ 10 , 5 , 3 ] ;
32196: LD_ADDR_VAR 0 9
32200: PUSH
32201: LD_INT 10
32203: PUSH
32204: LD_INT 5
32206: PUSH
32207: LD_INT 3
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32215: LD_VAR 0 6
32219: PPUSH
32220: CALL_OW 257
32224: PUSH
32225: LD_INT 14
32227: EQUAL
32228: IFFALSE 32249
// points := [ 10 , 0 , 0 ] ;
32230: LD_ADDR_VAR 0 9
32234: PUSH
32235: LD_INT 10
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: LIST
32248: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32249: LD_VAR 0 6
32253: PPUSH
32254: CALL_OW 257
32258: PUSH
32259: LD_INT 11
32261: EQUAL
32262: IFFALSE 32283
// points := [ 30 , 10 , 5 ] ;
32264: LD_ADDR_VAR 0 9
32268: PUSH
32269: LD_INT 30
32271: PUSH
32272: LD_INT 10
32274: PUSH
32275: LD_INT 5
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32283: LD_VAR 0 1
32287: PPUSH
32288: LD_INT 5
32290: PPUSH
32291: CALL_OW 321
32295: PUSH
32296: LD_INT 2
32298: EQUAL
32299: IFFALSE 32316
// bpoints := bpoints * 1.8 ;
32301: LD_ADDR_VAR 0 10
32305: PUSH
32306: LD_VAR 0 10
32310: PUSH
32311: LD_REAL  1.80000000000000E+0000
32314: MUL
32315: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32316: LD_VAR 0 6
32320: PPUSH
32321: CALL_OW 257
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: LD_INT 3
32334: PUSH
32335: LD_INT 4
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: IN
32344: PUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: LD_INT 51
32352: PPUSH
32353: CALL_OW 321
32357: PUSH
32358: LD_INT 2
32360: EQUAL
32361: AND
32362: IFFALSE 32379
// bpoints := bpoints * 1.2 ;
32364: LD_ADDR_VAR 0 10
32368: PUSH
32369: LD_VAR 0 10
32373: PUSH
32374: LD_REAL  1.20000000000000E+0000
32377: MUL
32378: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32379: LD_VAR 0 6
32383: PPUSH
32384: CALL_OW 257
32388: PUSH
32389: LD_INT 5
32391: PUSH
32392: LD_INT 7
32394: PUSH
32395: LD_INT 9
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: IN
32403: PUSH
32404: LD_VAR 0 1
32408: PPUSH
32409: LD_INT 52
32411: PPUSH
32412: CALL_OW 321
32416: PUSH
32417: LD_INT 2
32419: EQUAL
32420: AND
32421: IFFALSE 32438
// bpoints := bpoints * 1.5 ;
32423: LD_ADDR_VAR 0 10
32427: PUSH
32428: LD_VAR 0 10
32432: PUSH
32433: LD_REAL  1.50000000000000E+0000
32436: MUL
32437: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32438: LD_VAR 0 1
32442: PPUSH
32443: LD_INT 66
32445: PPUSH
32446: CALL_OW 321
32450: PUSH
32451: LD_INT 2
32453: EQUAL
32454: IFFALSE 32471
// bpoints := bpoints * 1.1 ;
32456: LD_ADDR_VAR 0 10
32460: PUSH
32461: LD_VAR 0 10
32465: PUSH
32466: LD_REAL  1.10000000000000E+0000
32469: MUL
32470: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32471: LD_ADDR_VAR 0 10
32475: PUSH
32476: LD_VAR 0 10
32480: PUSH
32481: LD_VAR 0 6
32485: PPUSH
32486: LD_INT 1
32488: PPUSH
32489: CALL_OW 259
32493: PUSH
32494: LD_REAL  1.15000000000000E+0000
32497: MUL
32498: MUL
32499: ST_TO_ADDR
// end ; unit_vehicle :
32500: GO 33328
32502: LD_INT 2
32504: DOUBLE
32505: EQUAL
32506: IFTRUE 32510
32508: GO 33316
32510: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32511: LD_VAR 0 6
32515: PPUSH
32516: CALL_OW 264
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: LD_INT 42
32526: PUSH
32527: LD_INT 24
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: LIST
32534: IN
32535: IFFALSE 32556
// points := [ 25 , 5 , 3 ] ;
32537: LD_ADDR_VAR 0 9
32541: PUSH
32542: LD_INT 25
32544: PUSH
32545: LD_INT 5
32547: PUSH
32548: LD_INT 3
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32556: LD_VAR 0 6
32560: PPUSH
32561: CALL_OW 264
32565: PUSH
32566: LD_INT 4
32568: PUSH
32569: LD_INT 43
32571: PUSH
32572: LD_INT 25
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: LIST
32579: IN
32580: IFFALSE 32601
// points := [ 40 , 15 , 5 ] ;
32582: LD_ADDR_VAR 0 9
32586: PUSH
32587: LD_INT 40
32589: PUSH
32590: LD_INT 15
32592: PUSH
32593: LD_INT 5
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: LIST
32600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32601: LD_VAR 0 6
32605: PPUSH
32606: CALL_OW 264
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: LD_INT 23
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: IN
32621: IFFALSE 32642
// points := [ 7 , 25 , 8 ] ;
32623: LD_ADDR_VAR 0 9
32627: PUSH
32628: LD_INT 7
32630: PUSH
32631: LD_INT 25
32633: PUSH
32634: LD_INT 8
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32642: LD_VAR 0 6
32646: PPUSH
32647: CALL_OW 264
32651: PUSH
32652: LD_INT 5
32654: PUSH
32655: LD_INT 27
32657: PUSH
32658: LD_INT 44
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: IN
32666: IFFALSE 32687
// points := [ 14 , 50 , 16 ] ;
32668: LD_ADDR_VAR 0 9
32672: PUSH
32673: LD_INT 14
32675: PUSH
32676: LD_INT 50
32678: PUSH
32679: LD_INT 16
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32687: LD_VAR 0 6
32691: PPUSH
32692: CALL_OW 264
32696: PUSH
32697: LD_INT 6
32699: PUSH
32700: LD_INT 46
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: IN
32707: IFFALSE 32728
// points := [ 32 , 120 , 70 ] ;
32709: LD_ADDR_VAR 0 9
32713: PUSH
32714: LD_INT 32
32716: PUSH
32717: LD_INT 120
32719: PUSH
32720: LD_INT 70
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: LIST
32727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32728: LD_VAR 0 6
32732: PPUSH
32733: CALL_OW 264
32737: PUSH
32738: LD_INT 7
32740: PUSH
32741: LD_INT 28
32743: PUSH
32744: LD_INT 45
32746: PUSH
32747: LD_INT 92
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: IN
32756: IFFALSE 32777
// points := [ 35 , 20 , 45 ] ;
32758: LD_ADDR_VAR 0 9
32762: PUSH
32763: LD_INT 35
32765: PUSH
32766: LD_INT 20
32768: PUSH
32769: LD_INT 45
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: LIST
32776: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32777: LD_VAR 0 6
32781: PPUSH
32782: CALL_OW 264
32786: PUSH
32787: LD_INT 47
32789: PUSH
32790: EMPTY
32791: LIST
32792: IN
32793: IFFALSE 32814
// points := [ 67 , 45 , 75 ] ;
32795: LD_ADDR_VAR 0 9
32799: PUSH
32800: LD_INT 67
32802: PUSH
32803: LD_INT 45
32805: PUSH
32806: LD_INT 75
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32814: LD_VAR 0 6
32818: PPUSH
32819: CALL_OW 264
32823: PUSH
32824: LD_INT 26
32826: PUSH
32827: EMPTY
32828: LIST
32829: IN
32830: IFFALSE 32851
// points := [ 120 , 30 , 80 ] ;
32832: LD_ADDR_VAR 0 9
32836: PUSH
32837: LD_INT 120
32839: PUSH
32840: LD_INT 30
32842: PUSH
32843: LD_INT 80
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: LIST
32850: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32851: LD_VAR 0 6
32855: PPUSH
32856: CALL_OW 264
32860: PUSH
32861: LD_INT 22
32863: PUSH
32864: EMPTY
32865: LIST
32866: IN
32867: IFFALSE 32888
// points := [ 40 , 1 , 1 ] ;
32869: LD_ADDR_VAR 0 9
32873: PUSH
32874: LD_INT 40
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32888: LD_VAR 0 6
32892: PPUSH
32893: CALL_OW 264
32897: PUSH
32898: LD_INT 29
32900: PUSH
32901: EMPTY
32902: LIST
32903: IN
32904: IFFALSE 32925
// points := [ 70 , 200 , 400 ] ;
32906: LD_ADDR_VAR 0 9
32910: PUSH
32911: LD_INT 70
32913: PUSH
32914: LD_INT 200
32916: PUSH
32917: LD_INT 400
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32925: LD_VAR 0 6
32929: PPUSH
32930: CALL_OW 264
32934: PUSH
32935: LD_INT 14
32937: PUSH
32938: LD_INT 53
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: IN
32945: IFFALSE 32966
// points := [ 40 , 10 , 20 ] ;
32947: LD_ADDR_VAR 0 9
32951: PUSH
32952: LD_INT 40
32954: PUSH
32955: LD_INT 10
32957: PUSH
32958: LD_INT 20
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32966: LD_VAR 0 6
32970: PPUSH
32971: CALL_OW 264
32975: PUSH
32976: LD_INT 9
32978: PUSH
32979: EMPTY
32980: LIST
32981: IN
32982: IFFALSE 33003
// points := [ 5 , 70 , 20 ] ;
32984: LD_ADDR_VAR 0 9
32988: PUSH
32989: LD_INT 5
32991: PUSH
32992: LD_INT 70
32994: PUSH
32995: LD_INT 20
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33003: LD_VAR 0 6
33007: PPUSH
33008: CALL_OW 264
33012: PUSH
33013: LD_INT 10
33015: PUSH
33016: EMPTY
33017: LIST
33018: IN
33019: IFFALSE 33040
// points := [ 35 , 110 , 70 ] ;
33021: LD_ADDR_VAR 0 9
33025: PUSH
33026: LD_INT 35
33028: PUSH
33029: LD_INT 110
33031: PUSH
33032: LD_INT 70
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33040: LD_VAR 0 6
33044: PPUSH
33045: CALL_OW 265
33049: PUSH
33050: LD_INT 25
33052: EQUAL
33053: IFFALSE 33074
// points := [ 80 , 65 , 100 ] ;
33055: LD_ADDR_VAR 0 9
33059: PUSH
33060: LD_INT 80
33062: PUSH
33063: LD_INT 65
33065: PUSH
33066: LD_INT 100
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: LIST
33073: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33074: LD_VAR 0 6
33078: PPUSH
33079: CALL_OW 263
33083: PUSH
33084: LD_INT 1
33086: EQUAL
33087: IFFALSE 33122
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33089: LD_ADDR_VAR 0 10
33093: PUSH
33094: LD_VAR 0 10
33098: PUSH
33099: LD_VAR 0 6
33103: PPUSH
33104: CALL_OW 311
33108: PPUSH
33109: LD_INT 3
33111: PPUSH
33112: CALL_OW 259
33116: PUSH
33117: LD_INT 4
33119: MUL
33120: MUL
33121: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33122: LD_VAR 0 6
33126: PPUSH
33127: CALL_OW 263
33131: PUSH
33132: LD_INT 2
33134: EQUAL
33135: IFFALSE 33186
// begin j := IsControledBy ( i ) ;
33137: LD_ADDR_VAR 0 7
33141: PUSH
33142: LD_VAR 0 6
33146: PPUSH
33147: CALL_OW 312
33151: ST_TO_ADDR
// if j then
33152: LD_VAR 0 7
33156: IFFALSE 33186
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33158: LD_ADDR_VAR 0 10
33162: PUSH
33163: LD_VAR 0 10
33167: PUSH
33168: LD_VAR 0 7
33172: PPUSH
33173: LD_INT 3
33175: PPUSH
33176: CALL_OW 259
33180: PUSH
33181: LD_INT 3
33183: MUL
33184: MUL
33185: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33186: LD_VAR 0 6
33190: PPUSH
33191: CALL_OW 264
33195: PUSH
33196: LD_INT 5
33198: PUSH
33199: LD_INT 6
33201: PUSH
33202: LD_INT 46
33204: PUSH
33205: LD_INT 44
33207: PUSH
33208: LD_INT 47
33210: PUSH
33211: LD_INT 45
33213: PUSH
33214: LD_INT 28
33216: PUSH
33217: LD_INT 7
33219: PUSH
33220: LD_INT 27
33222: PUSH
33223: LD_INT 29
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: IN
33238: PUSH
33239: LD_VAR 0 1
33243: PPUSH
33244: LD_INT 52
33246: PPUSH
33247: CALL_OW 321
33251: PUSH
33252: LD_INT 2
33254: EQUAL
33255: AND
33256: IFFALSE 33273
// bpoints := bpoints * 1.2 ;
33258: LD_ADDR_VAR 0 10
33262: PUSH
33263: LD_VAR 0 10
33267: PUSH
33268: LD_REAL  1.20000000000000E+0000
33271: MUL
33272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33273: LD_VAR 0 6
33277: PPUSH
33278: CALL_OW 264
33282: PUSH
33283: LD_INT 6
33285: PUSH
33286: LD_INT 46
33288: PUSH
33289: LD_INT 47
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: IN
33297: IFFALSE 33314
// bpoints := bpoints * 1.2 ;
33299: LD_ADDR_VAR 0 10
33303: PUSH
33304: LD_VAR 0 10
33308: PUSH
33309: LD_REAL  1.20000000000000E+0000
33312: MUL
33313: ST_TO_ADDR
// end ; unit_building :
33314: GO 33328
33316: LD_INT 3
33318: DOUBLE
33319: EQUAL
33320: IFTRUE 33324
33322: GO 33327
33324: POP
// ; end ;
33325: GO 33328
33327: POP
// for j = 1 to 3 do
33328: LD_ADDR_VAR 0 7
33332: PUSH
33333: DOUBLE
33334: LD_INT 1
33336: DEC
33337: ST_TO_ADDR
33338: LD_INT 3
33340: PUSH
33341: FOR_TO
33342: IFFALSE 33395
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33344: LD_ADDR_VAR 0 5
33348: PUSH
33349: LD_VAR 0 5
33353: PPUSH
33354: LD_VAR 0 7
33358: PPUSH
33359: LD_VAR 0 5
33363: PUSH
33364: LD_VAR 0 7
33368: ARRAY
33369: PUSH
33370: LD_VAR 0 9
33374: PUSH
33375: LD_VAR 0 7
33379: ARRAY
33380: PUSH
33381: LD_VAR 0 10
33385: MUL
33386: PLUS
33387: PPUSH
33388: CALL_OW 1
33392: ST_TO_ADDR
33393: GO 33341
33395: POP
33396: POP
// end ;
33397: GO 31876
33399: POP
33400: POP
// result := Replace ( result , 4 , tmp ) ;
33401: LD_ADDR_VAR 0 5
33405: PUSH
33406: LD_VAR 0 5
33410: PPUSH
33411: LD_INT 4
33413: PPUSH
33414: LD_VAR 0 8
33418: PPUSH
33419: CALL_OW 1
33423: ST_TO_ADDR
// end ;
33424: LD_VAR 0 5
33428: RET
// export function DangerAtRange ( unit , range ) ; begin
33429: LD_INT 0
33431: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33432: LD_ADDR_VAR 0 3
33436: PUSH
33437: LD_VAR 0 1
33441: PPUSH
33442: CALL_OW 255
33446: PPUSH
33447: LD_VAR 0 1
33451: PPUSH
33452: CALL_OW 250
33456: PPUSH
33457: LD_VAR 0 1
33461: PPUSH
33462: CALL_OW 251
33466: PPUSH
33467: LD_VAR 0 2
33471: PPUSH
33472: CALL 31728 0 4
33476: ST_TO_ADDR
// end ;
33477: LD_VAR 0 3
33481: RET
// export function DangerInArea ( side , area ) ; begin
33482: LD_INT 0
33484: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33485: LD_ADDR_VAR 0 3
33489: PUSH
33490: LD_VAR 0 2
33494: PPUSH
33495: LD_INT 81
33497: PUSH
33498: LD_VAR 0 1
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PPUSH
33507: CALL_OW 70
33511: ST_TO_ADDR
// end ;
33512: LD_VAR 0 3
33516: RET
// export function IsExtension ( b ) ; begin
33517: LD_INT 0
33519: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33520: LD_ADDR_VAR 0 2
33524: PUSH
33525: LD_VAR 0 1
33529: PUSH
33530: LD_INT 23
33532: PUSH
33533: LD_INT 20
33535: PUSH
33536: LD_INT 22
33538: PUSH
33539: LD_INT 17
33541: PUSH
33542: LD_INT 24
33544: PUSH
33545: LD_INT 21
33547: PUSH
33548: LD_INT 19
33550: PUSH
33551: LD_INT 16
33553: PUSH
33554: LD_INT 25
33556: PUSH
33557: LD_INT 18
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: IN
33572: ST_TO_ADDR
// end ;
33573: LD_VAR 0 2
33577: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33578: LD_INT 0
33580: PPUSH
33581: PPUSH
33582: PPUSH
// result := [ ] ;
33583: LD_ADDR_VAR 0 4
33587: PUSH
33588: EMPTY
33589: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33590: LD_ADDR_VAR 0 5
33594: PUSH
33595: LD_VAR 0 2
33599: PPUSH
33600: LD_INT 21
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PPUSH
33610: CALL_OW 70
33614: ST_TO_ADDR
// if not tmp then
33615: LD_VAR 0 5
33619: NOT
33620: IFFALSE 33624
// exit ;
33622: GO 33688
// if checkLink then
33624: LD_VAR 0 3
33628: IFFALSE 33678
// begin for i in tmp do
33630: LD_ADDR_VAR 0 6
33634: PUSH
33635: LD_VAR 0 5
33639: PUSH
33640: FOR_IN
33641: IFFALSE 33676
// if GetBase ( i ) <> base then
33643: LD_VAR 0 6
33647: PPUSH
33648: CALL_OW 274
33652: PUSH
33653: LD_VAR 0 1
33657: NONEQUAL
33658: IFFALSE 33674
// ComLinkToBase ( base , i ) ;
33660: LD_VAR 0 1
33664: PPUSH
33665: LD_VAR 0 6
33669: PPUSH
33670: CALL_OW 169
33674: GO 33640
33676: POP
33677: POP
// end ; result := tmp ;
33678: LD_ADDR_VAR 0 4
33682: PUSH
33683: LD_VAR 0 5
33687: ST_TO_ADDR
// end ;
33688: LD_VAR 0 4
33692: RET
// export function ComComplete ( units , b ) ; var i ; begin
33693: LD_INT 0
33695: PPUSH
33696: PPUSH
// if not units then
33697: LD_VAR 0 1
33701: NOT
33702: IFFALSE 33706
// exit ;
33704: GO 33796
// for i in units do
33706: LD_ADDR_VAR 0 4
33710: PUSH
33711: LD_VAR 0 1
33715: PUSH
33716: FOR_IN
33717: IFFALSE 33794
// if BuildingStatus ( b ) = bs_build then
33719: LD_VAR 0 2
33723: PPUSH
33724: CALL_OW 461
33728: PUSH
33729: LD_INT 1
33731: EQUAL
33732: IFFALSE 33792
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33734: LD_VAR 0 4
33738: PPUSH
33739: LD_STRING h
33741: PUSH
33742: LD_VAR 0 2
33746: PPUSH
33747: CALL_OW 250
33751: PUSH
33752: LD_VAR 0 2
33756: PPUSH
33757: CALL_OW 251
33761: PUSH
33762: LD_VAR 0 2
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: PUSH
33785: EMPTY
33786: LIST
33787: PPUSH
33788: CALL_OW 446
33792: GO 33716
33794: POP
33795: POP
// end ;
33796: LD_VAR 0 3
33800: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33801: LD_INT 0
33803: PPUSH
33804: PPUSH
33805: PPUSH
33806: PPUSH
33807: PPUSH
33808: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33809: LD_VAR 0 1
33813: NOT
33814: PUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: CALL_OW 263
33824: PUSH
33825: LD_INT 2
33827: NONEQUAL
33828: OR
33829: IFFALSE 33833
// exit ;
33831: GO 34149
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33833: LD_ADDR_VAR 0 6
33837: PUSH
33838: LD_INT 22
33840: PUSH
33841: LD_VAR 0 1
33845: PPUSH
33846: CALL_OW 255
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: LD_INT 30
33860: PUSH
33861: LD_INT 36
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 34
33870: PUSH
33871: LD_INT 31
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: LIST
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PPUSH
33887: CALL_OW 69
33891: ST_TO_ADDR
// if not tmp then
33892: LD_VAR 0 6
33896: NOT
33897: IFFALSE 33901
// exit ;
33899: GO 34149
// result := [ ] ;
33901: LD_ADDR_VAR 0 2
33905: PUSH
33906: EMPTY
33907: ST_TO_ADDR
// for i in tmp do
33908: LD_ADDR_VAR 0 3
33912: PUSH
33913: LD_VAR 0 6
33917: PUSH
33918: FOR_IN
33919: IFFALSE 33990
// begin t := UnitsInside ( i ) ;
33921: LD_ADDR_VAR 0 4
33925: PUSH
33926: LD_VAR 0 3
33930: PPUSH
33931: CALL_OW 313
33935: ST_TO_ADDR
// if t then
33936: LD_VAR 0 4
33940: IFFALSE 33988
// for j in t do
33942: LD_ADDR_VAR 0 7
33946: PUSH
33947: LD_VAR 0 4
33951: PUSH
33952: FOR_IN
33953: IFFALSE 33986
// result := Replace ( result , result + 1 , j ) ;
33955: LD_ADDR_VAR 0 2
33959: PUSH
33960: LD_VAR 0 2
33964: PPUSH
33965: LD_VAR 0 2
33969: PUSH
33970: LD_INT 1
33972: PLUS
33973: PPUSH
33974: LD_VAR 0 7
33978: PPUSH
33979: CALL_OW 1
33983: ST_TO_ADDR
33984: GO 33952
33986: POP
33987: POP
// end ;
33988: GO 33918
33990: POP
33991: POP
// if not result then
33992: LD_VAR 0 2
33996: NOT
33997: IFFALSE 34001
// exit ;
33999: GO 34149
// mech := result [ 1 ] ;
34001: LD_ADDR_VAR 0 5
34005: PUSH
34006: LD_VAR 0 2
34010: PUSH
34011: LD_INT 1
34013: ARRAY
34014: ST_TO_ADDR
// if result > 1 then
34015: LD_VAR 0 2
34019: PUSH
34020: LD_INT 1
34022: GREATER
34023: IFFALSE 34135
// begin for i = 2 to result do
34025: LD_ADDR_VAR 0 3
34029: PUSH
34030: DOUBLE
34031: LD_INT 2
34033: DEC
34034: ST_TO_ADDR
34035: LD_VAR 0 2
34039: PUSH
34040: FOR_TO
34041: IFFALSE 34133
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34043: LD_ADDR_VAR 0 4
34047: PUSH
34048: LD_VAR 0 2
34052: PUSH
34053: LD_VAR 0 3
34057: ARRAY
34058: PPUSH
34059: LD_INT 3
34061: PPUSH
34062: CALL_OW 259
34066: PUSH
34067: LD_VAR 0 2
34071: PUSH
34072: LD_VAR 0 3
34076: ARRAY
34077: PPUSH
34078: CALL_OW 432
34082: MINUS
34083: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34084: LD_VAR 0 4
34088: PUSH
34089: LD_VAR 0 5
34093: PPUSH
34094: LD_INT 3
34096: PPUSH
34097: CALL_OW 259
34101: PUSH
34102: LD_VAR 0 5
34106: PPUSH
34107: CALL_OW 432
34111: MINUS
34112: GREATEREQUAL
34113: IFFALSE 34131
// mech := result [ i ] ;
34115: LD_ADDR_VAR 0 5
34119: PUSH
34120: LD_VAR 0 2
34124: PUSH
34125: LD_VAR 0 3
34129: ARRAY
34130: ST_TO_ADDR
// end ;
34131: GO 34040
34133: POP
34134: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34135: LD_VAR 0 1
34139: PPUSH
34140: LD_VAR 0 5
34144: PPUSH
34145: CALL_OW 135
// end ;
34149: LD_VAR 0 2
34153: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34154: LD_INT 0
34156: PPUSH
34157: PPUSH
34158: PPUSH
34159: PPUSH
34160: PPUSH
34161: PPUSH
34162: PPUSH
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
34168: PPUSH
// result := [ ] ;
34169: LD_ADDR_VAR 0 7
34173: PUSH
34174: EMPTY
34175: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34176: LD_VAR 0 1
34180: PPUSH
34181: CALL_OW 266
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: LD_INT 1
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: IN
34196: NOT
34197: IFFALSE 34201
// exit ;
34199: GO 35835
// if name then
34201: LD_VAR 0 3
34205: IFFALSE 34221
// SetBName ( base_dep , name ) ;
34207: LD_VAR 0 1
34211: PPUSH
34212: LD_VAR 0 3
34216: PPUSH
34217: CALL_OW 500
// base := GetBase ( base_dep ) ;
34221: LD_ADDR_VAR 0 15
34225: PUSH
34226: LD_VAR 0 1
34230: PPUSH
34231: CALL_OW 274
34235: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34236: LD_ADDR_VAR 0 16
34240: PUSH
34241: LD_VAR 0 1
34245: PPUSH
34246: CALL_OW 255
34250: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34251: LD_ADDR_VAR 0 17
34255: PUSH
34256: LD_VAR 0 1
34260: PPUSH
34261: CALL_OW 248
34265: ST_TO_ADDR
// if sources then
34266: LD_VAR 0 5
34270: IFFALSE 34317
// for i = 1 to 3 do
34272: LD_ADDR_VAR 0 8
34276: PUSH
34277: DOUBLE
34278: LD_INT 1
34280: DEC
34281: ST_TO_ADDR
34282: LD_INT 3
34284: PUSH
34285: FOR_TO
34286: IFFALSE 34315
// AddResourceType ( base , i , sources [ i ] ) ;
34288: LD_VAR 0 15
34292: PPUSH
34293: LD_VAR 0 8
34297: PPUSH
34298: LD_VAR 0 5
34302: PUSH
34303: LD_VAR 0 8
34307: ARRAY
34308: PPUSH
34309: CALL_OW 276
34313: GO 34285
34315: POP
34316: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34317: LD_ADDR_VAR 0 18
34321: PUSH
34322: LD_VAR 0 15
34326: PPUSH
34327: LD_VAR 0 2
34331: PPUSH
34332: LD_INT 1
34334: PPUSH
34335: CALL 33578 0 3
34339: ST_TO_ADDR
// InitHc ;
34340: CALL_OW 19
// InitUc ;
34344: CALL_OW 18
// uc_side := side ;
34348: LD_ADDR_OWVAR 20
34352: PUSH
34353: LD_VAR 0 16
34357: ST_TO_ADDR
// uc_nation := nation ;
34358: LD_ADDR_OWVAR 21
34362: PUSH
34363: LD_VAR 0 17
34367: ST_TO_ADDR
// if buildings then
34368: LD_VAR 0 18
34372: IFFALSE 35694
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34374: LD_ADDR_VAR 0 19
34378: PUSH
34379: LD_VAR 0 18
34383: PPUSH
34384: LD_INT 2
34386: PUSH
34387: LD_INT 30
34389: PUSH
34390: LD_INT 29
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 30
34399: PUSH
34400: LD_INT 30
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: PPUSH
34412: CALL_OW 72
34416: ST_TO_ADDR
// if tmp then
34417: LD_VAR 0 19
34421: IFFALSE 34469
// for i in tmp do
34423: LD_ADDR_VAR 0 8
34427: PUSH
34428: LD_VAR 0 19
34432: PUSH
34433: FOR_IN
34434: IFFALSE 34467
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34436: LD_VAR 0 8
34440: PPUSH
34441: CALL_OW 250
34445: PPUSH
34446: LD_VAR 0 8
34450: PPUSH
34451: CALL_OW 251
34455: PPUSH
34456: LD_VAR 0 16
34460: PPUSH
34461: CALL_OW 441
34465: GO 34433
34467: POP
34468: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34469: LD_VAR 0 18
34473: PPUSH
34474: LD_INT 2
34476: PUSH
34477: LD_INT 30
34479: PUSH
34480: LD_INT 32
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 30
34489: PUSH
34490: LD_INT 33
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: PPUSH
34502: CALL_OW 72
34506: IFFALSE 34594
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34508: LD_ADDR_VAR 0 8
34512: PUSH
34513: LD_VAR 0 18
34517: PPUSH
34518: LD_INT 2
34520: PUSH
34521: LD_INT 30
34523: PUSH
34524: LD_INT 32
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 30
34533: PUSH
34534: LD_INT 33
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: LIST
34545: PPUSH
34546: CALL_OW 72
34550: PUSH
34551: FOR_IN
34552: IFFALSE 34592
// begin if not GetBWeapon ( i ) then
34554: LD_VAR 0 8
34558: PPUSH
34559: CALL_OW 269
34563: NOT
34564: IFFALSE 34590
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34566: LD_VAR 0 8
34570: PPUSH
34571: LD_VAR 0 8
34575: PPUSH
34576: LD_VAR 0 2
34580: PPUSH
34581: CALL 35840 0 2
34585: PPUSH
34586: CALL_OW 431
// end ;
34590: GO 34551
34592: POP
34593: POP
// end ; for i = 1 to personel do
34594: LD_ADDR_VAR 0 8
34598: PUSH
34599: DOUBLE
34600: LD_INT 1
34602: DEC
34603: ST_TO_ADDR
34604: LD_VAR 0 6
34608: PUSH
34609: FOR_TO
34610: IFFALSE 35674
// begin if i > 4 then
34612: LD_VAR 0 8
34616: PUSH
34617: LD_INT 4
34619: GREATER
34620: IFFALSE 34624
// break ;
34622: GO 35674
// case i of 1 :
34624: LD_VAR 0 8
34628: PUSH
34629: LD_INT 1
34631: DOUBLE
34632: EQUAL
34633: IFTRUE 34637
34635: GO 34717
34637: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34638: LD_ADDR_VAR 0 12
34642: PUSH
34643: LD_VAR 0 18
34647: PPUSH
34648: LD_INT 22
34650: PUSH
34651: LD_VAR 0 16
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 58
34662: PUSH
34663: EMPTY
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: LD_INT 30
34671: PUSH
34672: LD_INT 32
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 30
34681: PUSH
34682: LD_INT 4
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 30
34691: PUSH
34692: LD_INT 5
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: PPUSH
34710: CALL_OW 72
34714: ST_TO_ADDR
34715: GO 34939
34717: LD_INT 2
34719: DOUBLE
34720: EQUAL
34721: IFTRUE 34725
34723: GO 34787
34725: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34726: LD_ADDR_VAR 0 12
34730: PUSH
34731: LD_VAR 0 18
34735: PPUSH
34736: LD_INT 22
34738: PUSH
34739: LD_VAR 0 16
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: LD_INT 30
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 30
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: LIST
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PPUSH
34780: CALL_OW 72
34784: ST_TO_ADDR
34785: GO 34939
34787: LD_INT 3
34789: DOUBLE
34790: EQUAL
34791: IFTRUE 34795
34793: GO 34857
34795: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34796: LD_ADDR_VAR 0 12
34800: PUSH
34801: LD_VAR 0 18
34805: PPUSH
34806: LD_INT 22
34808: PUSH
34809: LD_VAR 0 16
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: LD_INT 30
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 30
34833: PUSH
34834: LD_INT 3
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PPUSH
34850: CALL_OW 72
34854: ST_TO_ADDR
34855: GO 34939
34857: LD_INT 4
34859: DOUBLE
34860: EQUAL
34861: IFTRUE 34865
34863: GO 34938
34865: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34866: LD_ADDR_VAR 0 12
34870: PUSH
34871: LD_VAR 0 18
34875: PPUSH
34876: LD_INT 22
34878: PUSH
34879: LD_VAR 0 16
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: LD_INT 30
34893: PUSH
34894: LD_INT 6
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 30
34903: PUSH
34904: LD_INT 7
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 30
34913: PUSH
34914: LD_INT 8
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PPUSH
34931: CALL_OW 72
34935: ST_TO_ADDR
34936: GO 34939
34938: POP
// if i = 1 then
34939: LD_VAR 0 8
34943: PUSH
34944: LD_INT 1
34946: EQUAL
34947: IFFALSE 35058
// begin tmp := [ ] ;
34949: LD_ADDR_VAR 0 19
34953: PUSH
34954: EMPTY
34955: ST_TO_ADDR
// for j in f do
34956: LD_ADDR_VAR 0 9
34960: PUSH
34961: LD_VAR 0 12
34965: PUSH
34966: FOR_IN
34967: IFFALSE 35040
// if GetBType ( j ) = b_bunker then
34969: LD_VAR 0 9
34973: PPUSH
34974: CALL_OW 266
34978: PUSH
34979: LD_INT 32
34981: EQUAL
34982: IFFALSE 35009
// tmp := Insert ( tmp , 1 , j ) else
34984: LD_ADDR_VAR 0 19
34988: PUSH
34989: LD_VAR 0 19
34993: PPUSH
34994: LD_INT 1
34996: PPUSH
34997: LD_VAR 0 9
35001: PPUSH
35002: CALL_OW 2
35006: ST_TO_ADDR
35007: GO 35038
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35009: LD_ADDR_VAR 0 19
35013: PUSH
35014: LD_VAR 0 19
35018: PPUSH
35019: LD_VAR 0 19
35023: PUSH
35024: LD_INT 1
35026: PLUS
35027: PPUSH
35028: LD_VAR 0 9
35032: PPUSH
35033: CALL_OW 2
35037: ST_TO_ADDR
35038: GO 34966
35040: POP
35041: POP
// if tmp then
35042: LD_VAR 0 19
35046: IFFALSE 35058
// f := tmp ;
35048: LD_ADDR_VAR 0 12
35052: PUSH
35053: LD_VAR 0 19
35057: ST_TO_ADDR
// end ; x := personel [ i ] ;
35058: LD_ADDR_VAR 0 13
35062: PUSH
35063: LD_VAR 0 6
35067: PUSH
35068: LD_VAR 0 8
35072: ARRAY
35073: ST_TO_ADDR
// if x = - 1 then
35074: LD_VAR 0 13
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: EQUAL
35083: IFFALSE 35292
// begin for j in f do
35085: LD_ADDR_VAR 0 9
35089: PUSH
35090: LD_VAR 0 12
35094: PUSH
35095: FOR_IN
35096: IFFALSE 35288
// repeat InitHc ;
35098: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35102: LD_VAR 0 9
35106: PPUSH
35107: CALL_OW 266
35111: PUSH
35112: LD_INT 5
35114: EQUAL
35115: IFFALSE 35185
// begin if UnitsInside ( j ) < 3 then
35117: LD_VAR 0 9
35121: PPUSH
35122: CALL_OW 313
35126: PUSH
35127: LD_INT 3
35129: LESS
35130: IFFALSE 35166
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35132: LD_INT 0
35134: PPUSH
35135: LD_INT 5
35137: PUSH
35138: LD_INT 8
35140: PUSH
35141: LD_INT 9
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: LIST
35148: PUSH
35149: LD_VAR 0 17
35153: ARRAY
35154: PPUSH
35155: LD_VAR 0 4
35159: PPUSH
35160: CALL_OW 380
35164: GO 35183
// PrepareHuman ( false , i , skill ) ;
35166: LD_INT 0
35168: PPUSH
35169: LD_VAR 0 8
35173: PPUSH
35174: LD_VAR 0 4
35178: PPUSH
35179: CALL_OW 380
// end else
35183: GO 35202
// PrepareHuman ( false , i , skill ) ;
35185: LD_INT 0
35187: PPUSH
35188: LD_VAR 0 8
35192: PPUSH
35193: LD_VAR 0 4
35197: PPUSH
35198: CALL_OW 380
// un := CreateHuman ;
35202: LD_ADDR_VAR 0 14
35206: PUSH
35207: CALL_OW 44
35211: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35212: LD_ADDR_VAR 0 7
35216: PUSH
35217: LD_VAR 0 7
35221: PPUSH
35222: LD_INT 1
35224: PPUSH
35225: LD_VAR 0 14
35229: PPUSH
35230: CALL_OW 2
35234: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35235: LD_VAR 0 14
35239: PPUSH
35240: LD_VAR 0 9
35244: PPUSH
35245: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35249: LD_VAR 0 9
35253: PPUSH
35254: CALL_OW 313
35258: PUSH
35259: LD_INT 6
35261: EQUAL
35262: PUSH
35263: LD_VAR 0 9
35267: PPUSH
35268: CALL_OW 266
35272: PUSH
35273: LD_INT 32
35275: PUSH
35276: LD_INT 31
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: IN
35283: OR
35284: IFFALSE 35098
35286: GO 35095
35288: POP
35289: POP
// end else
35290: GO 35672
// for j = 1 to x do
35292: LD_ADDR_VAR 0 9
35296: PUSH
35297: DOUBLE
35298: LD_INT 1
35300: DEC
35301: ST_TO_ADDR
35302: LD_VAR 0 13
35306: PUSH
35307: FOR_TO
35308: IFFALSE 35670
// begin InitHc ;
35310: CALL_OW 19
// if not f then
35314: LD_VAR 0 12
35318: NOT
35319: IFFALSE 35408
// begin PrepareHuman ( false , i , skill ) ;
35321: LD_INT 0
35323: PPUSH
35324: LD_VAR 0 8
35328: PPUSH
35329: LD_VAR 0 4
35333: PPUSH
35334: CALL_OW 380
// un := CreateHuman ;
35338: LD_ADDR_VAR 0 14
35342: PUSH
35343: CALL_OW 44
35347: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35348: LD_ADDR_VAR 0 7
35352: PUSH
35353: LD_VAR 0 7
35357: PPUSH
35358: LD_INT 1
35360: PPUSH
35361: LD_VAR 0 14
35365: PPUSH
35366: CALL_OW 2
35370: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35371: LD_VAR 0 14
35375: PPUSH
35376: LD_VAR 0 1
35380: PPUSH
35381: CALL_OW 250
35385: PPUSH
35386: LD_VAR 0 1
35390: PPUSH
35391: CALL_OW 251
35395: PPUSH
35396: LD_INT 10
35398: PPUSH
35399: LD_INT 0
35401: PPUSH
35402: CALL_OW 50
// continue ;
35406: GO 35307
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35408: LD_VAR 0 12
35412: PUSH
35413: LD_INT 1
35415: ARRAY
35416: PPUSH
35417: CALL_OW 313
35421: PUSH
35422: LD_VAR 0 12
35426: PUSH
35427: LD_INT 1
35429: ARRAY
35430: PPUSH
35431: CALL_OW 266
35435: PUSH
35436: LD_INT 32
35438: PUSH
35439: LD_INT 31
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: IN
35446: AND
35447: PUSH
35448: LD_VAR 0 12
35452: PUSH
35453: LD_INT 1
35455: ARRAY
35456: PPUSH
35457: CALL_OW 313
35461: PUSH
35462: LD_INT 6
35464: EQUAL
35465: OR
35466: IFFALSE 35486
// f := Delete ( f , 1 ) ;
35468: LD_ADDR_VAR 0 12
35472: PUSH
35473: LD_VAR 0 12
35477: PPUSH
35478: LD_INT 1
35480: PPUSH
35481: CALL_OW 3
35485: ST_TO_ADDR
// if not f then
35486: LD_VAR 0 12
35490: NOT
35491: IFFALSE 35509
// begin x := x + 2 ;
35493: LD_ADDR_VAR 0 13
35497: PUSH
35498: LD_VAR 0 13
35502: PUSH
35503: LD_INT 2
35505: PLUS
35506: ST_TO_ADDR
// continue ;
35507: GO 35307
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35509: LD_VAR 0 12
35513: PUSH
35514: LD_INT 1
35516: ARRAY
35517: PPUSH
35518: CALL_OW 266
35522: PUSH
35523: LD_INT 5
35525: EQUAL
35526: IFFALSE 35600
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35528: LD_VAR 0 12
35532: PUSH
35533: LD_INT 1
35535: ARRAY
35536: PPUSH
35537: CALL_OW 313
35541: PUSH
35542: LD_INT 3
35544: LESS
35545: IFFALSE 35581
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35547: LD_INT 0
35549: PPUSH
35550: LD_INT 5
35552: PUSH
35553: LD_INT 8
35555: PUSH
35556: LD_INT 9
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: PUSH
35564: LD_VAR 0 17
35568: ARRAY
35569: PPUSH
35570: LD_VAR 0 4
35574: PPUSH
35575: CALL_OW 380
35579: GO 35598
// PrepareHuman ( false , i , skill ) ;
35581: LD_INT 0
35583: PPUSH
35584: LD_VAR 0 8
35588: PPUSH
35589: LD_VAR 0 4
35593: PPUSH
35594: CALL_OW 380
// end else
35598: GO 35617
// PrepareHuman ( false , i , skill ) ;
35600: LD_INT 0
35602: PPUSH
35603: LD_VAR 0 8
35607: PPUSH
35608: LD_VAR 0 4
35612: PPUSH
35613: CALL_OW 380
// un := CreateHuman ;
35617: LD_ADDR_VAR 0 14
35621: PUSH
35622: CALL_OW 44
35626: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35627: LD_ADDR_VAR 0 7
35631: PUSH
35632: LD_VAR 0 7
35636: PPUSH
35637: LD_INT 1
35639: PPUSH
35640: LD_VAR 0 14
35644: PPUSH
35645: CALL_OW 2
35649: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35650: LD_VAR 0 14
35654: PPUSH
35655: LD_VAR 0 12
35659: PUSH
35660: LD_INT 1
35662: ARRAY
35663: PPUSH
35664: CALL_OW 52
// end ;
35668: GO 35307
35670: POP
35671: POP
// end ;
35672: GO 34609
35674: POP
35675: POP
// result := result ^ buildings ;
35676: LD_ADDR_VAR 0 7
35680: PUSH
35681: LD_VAR 0 7
35685: PUSH
35686: LD_VAR 0 18
35690: ADD
35691: ST_TO_ADDR
// end else
35692: GO 35835
// begin for i = 1 to personel do
35694: LD_ADDR_VAR 0 8
35698: PUSH
35699: DOUBLE
35700: LD_INT 1
35702: DEC
35703: ST_TO_ADDR
35704: LD_VAR 0 6
35708: PUSH
35709: FOR_TO
35710: IFFALSE 35833
// begin if i > 4 then
35712: LD_VAR 0 8
35716: PUSH
35717: LD_INT 4
35719: GREATER
35720: IFFALSE 35724
// break ;
35722: GO 35833
// x := personel [ i ] ;
35724: LD_ADDR_VAR 0 13
35728: PUSH
35729: LD_VAR 0 6
35733: PUSH
35734: LD_VAR 0 8
35738: ARRAY
35739: ST_TO_ADDR
// if x = - 1 then
35740: LD_VAR 0 13
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: EQUAL
35749: IFFALSE 35753
// continue ;
35751: GO 35709
// PrepareHuman ( false , i , skill ) ;
35753: LD_INT 0
35755: PPUSH
35756: LD_VAR 0 8
35760: PPUSH
35761: LD_VAR 0 4
35765: PPUSH
35766: CALL_OW 380
// un := CreateHuman ;
35770: LD_ADDR_VAR 0 14
35774: PUSH
35775: CALL_OW 44
35779: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35780: LD_VAR 0 14
35784: PPUSH
35785: LD_VAR 0 1
35789: PPUSH
35790: CALL_OW 250
35794: PPUSH
35795: LD_VAR 0 1
35799: PPUSH
35800: CALL_OW 251
35804: PPUSH
35805: LD_INT 10
35807: PPUSH
35808: LD_INT 0
35810: PPUSH
35811: CALL_OW 50
// result := result ^ un ;
35815: LD_ADDR_VAR 0 7
35819: PUSH
35820: LD_VAR 0 7
35824: PUSH
35825: LD_VAR 0 14
35829: ADD
35830: ST_TO_ADDR
// end ;
35831: GO 35709
35833: POP
35834: POP
// end ; end ;
35835: LD_VAR 0 7
35839: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35840: LD_INT 0
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
35849: PPUSH
35850: PPUSH
35851: PPUSH
35852: PPUSH
35853: PPUSH
35854: PPUSH
35855: PPUSH
35856: PPUSH
35857: PPUSH
// result := false ;
35858: LD_ADDR_VAR 0 3
35862: PUSH
35863: LD_INT 0
35865: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35866: LD_VAR 0 1
35870: NOT
35871: PUSH
35872: LD_VAR 0 1
35876: PPUSH
35877: CALL_OW 266
35881: PUSH
35882: LD_INT 32
35884: PUSH
35885: LD_INT 33
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: IN
35892: NOT
35893: OR
35894: IFFALSE 35898
// exit ;
35896: GO 37007
// nat := GetNation ( tower ) ;
35898: LD_ADDR_VAR 0 12
35902: PUSH
35903: LD_VAR 0 1
35907: PPUSH
35908: CALL_OW 248
35912: ST_TO_ADDR
// side := GetSide ( tower ) ;
35913: LD_ADDR_VAR 0 16
35917: PUSH
35918: LD_VAR 0 1
35922: PPUSH
35923: CALL_OW 255
35927: ST_TO_ADDR
// x := GetX ( tower ) ;
35928: LD_ADDR_VAR 0 10
35932: PUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 250
35942: ST_TO_ADDR
// y := GetY ( tower ) ;
35943: LD_ADDR_VAR 0 11
35947: PUSH
35948: LD_VAR 0 1
35952: PPUSH
35953: CALL_OW 251
35957: ST_TO_ADDR
// if not x or not y then
35958: LD_VAR 0 10
35962: NOT
35963: PUSH
35964: LD_VAR 0 11
35968: NOT
35969: OR
35970: IFFALSE 35974
// exit ;
35972: GO 37007
// weapon := 0 ;
35974: LD_ADDR_VAR 0 18
35978: PUSH
35979: LD_INT 0
35981: ST_TO_ADDR
// fac_list := [ ] ;
35982: LD_ADDR_VAR 0 17
35986: PUSH
35987: EMPTY
35988: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35989: LD_ADDR_VAR 0 6
35993: PUSH
35994: LD_VAR 0 1
35998: PPUSH
35999: CALL_OW 274
36003: PPUSH
36004: LD_VAR 0 2
36008: PPUSH
36009: LD_INT 0
36011: PPUSH
36012: CALL 33578 0 3
36016: PPUSH
36017: LD_INT 30
36019: PUSH
36020: LD_INT 3
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PPUSH
36027: CALL_OW 72
36031: ST_TO_ADDR
// if not factories then
36032: LD_VAR 0 6
36036: NOT
36037: IFFALSE 36041
// exit ;
36039: GO 37007
// for i in factories do
36041: LD_ADDR_VAR 0 8
36045: PUSH
36046: LD_VAR 0 6
36050: PUSH
36051: FOR_IN
36052: IFFALSE 36077
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36054: LD_ADDR_VAR 0 17
36058: PUSH
36059: LD_VAR 0 17
36063: PUSH
36064: LD_VAR 0 8
36068: PPUSH
36069: CALL_OW 478
36073: UNION
36074: ST_TO_ADDR
36075: GO 36051
36077: POP
36078: POP
// if not fac_list then
36079: LD_VAR 0 17
36083: NOT
36084: IFFALSE 36088
// exit ;
36086: GO 37007
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36088: LD_ADDR_VAR 0 5
36092: PUSH
36093: LD_INT 4
36095: PUSH
36096: LD_INT 5
36098: PUSH
36099: LD_INT 9
36101: PUSH
36102: LD_INT 10
36104: PUSH
36105: LD_INT 6
36107: PUSH
36108: LD_INT 7
36110: PUSH
36111: LD_INT 11
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 27
36125: PUSH
36126: LD_INT 28
36128: PUSH
36129: LD_INT 26
36131: PUSH
36132: LD_INT 30
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 43
36143: PUSH
36144: LD_INT 44
36146: PUSH
36147: LD_INT 46
36149: PUSH
36150: LD_INT 45
36152: PUSH
36153: LD_INT 47
36155: PUSH
36156: LD_INT 49
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: PUSH
36172: LD_VAR 0 12
36176: ARRAY
36177: ST_TO_ADDR
// list := list isect fac_list ;
36178: LD_ADDR_VAR 0 5
36182: PUSH
36183: LD_VAR 0 5
36187: PUSH
36188: LD_VAR 0 17
36192: ISECT
36193: ST_TO_ADDR
// if not list then
36194: LD_VAR 0 5
36198: NOT
36199: IFFALSE 36203
// exit ;
36201: GO 37007
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36203: LD_VAR 0 12
36207: PUSH
36208: LD_INT 3
36210: EQUAL
36211: PUSH
36212: LD_INT 49
36214: PUSH
36215: LD_VAR 0 5
36219: IN
36220: AND
36221: PUSH
36222: LD_INT 31
36224: PPUSH
36225: LD_VAR 0 16
36229: PPUSH
36230: CALL_OW 321
36234: PUSH
36235: LD_INT 2
36237: EQUAL
36238: AND
36239: IFFALSE 36299
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36241: LD_INT 22
36243: PUSH
36244: LD_VAR 0 16
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 35
36255: PUSH
36256: LD_INT 49
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 91
36265: PUSH
36266: LD_VAR 0 1
36270: PUSH
36271: LD_INT 10
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: LIST
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: PPUSH
36284: CALL_OW 69
36288: NOT
36289: IFFALSE 36299
// weapon := ru_time_lapser ;
36291: LD_ADDR_VAR 0 18
36295: PUSH
36296: LD_INT 49
36298: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36299: LD_VAR 0 12
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: IN
36314: PUSH
36315: LD_INT 11
36317: PUSH
36318: LD_VAR 0 5
36322: IN
36323: PUSH
36324: LD_INT 30
36326: PUSH
36327: LD_VAR 0 5
36331: IN
36332: OR
36333: AND
36334: PUSH
36335: LD_INT 6
36337: PPUSH
36338: LD_VAR 0 16
36342: PPUSH
36343: CALL_OW 321
36347: PUSH
36348: LD_INT 2
36350: EQUAL
36351: AND
36352: IFFALSE 36517
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36354: LD_INT 22
36356: PUSH
36357: LD_VAR 0 16
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: LD_INT 35
36371: PUSH
36372: LD_INT 11
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 35
36381: PUSH
36382: LD_INT 30
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 91
36396: PUSH
36397: LD_VAR 0 1
36401: PUSH
36402: LD_INT 18
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: PPUSH
36415: CALL_OW 69
36419: NOT
36420: PUSH
36421: LD_INT 22
36423: PUSH
36424: LD_VAR 0 16
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: PUSH
36436: LD_INT 30
36438: PUSH
36439: LD_INT 32
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 30
36448: PUSH
36449: LD_INT 33
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 91
36463: PUSH
36464: LD_VAR 0 1
36468: PUSH
36469: LD_INT 12
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: LIST
36481: PUSH
36482: EMPTY
36483: LIST
36484: PPUSH
36485: CALL_OW 69
36489: PUSH
36490: LD_INT 2
36492: GREATER
36493: AND
36494: IFFALSE 36517
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36496: LD_ADDR_VAR 0 18
36500: PUSH
36501: LD_INT 11
36503: PUSH
36504: LD_INT 30
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_VAR 0 12
36515: ARRAY
36516: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36517: LD_VAR 0 18
36521: NOT
36522: PUSH
36523: LD_INT 40
36525: PPUSH
36526: LD_VAR 0 16
36530: PPUSH
36531: CALL_OW 321
36535: PUSH
36536: LD_INT 2
36538: EQUAL
36539: AND
36540: PUSH
36541: LD_INT 7
36543: PUSH
36544: LD_VAR 0 5
36548: IN
36549: PUSH
36550: LD_INT 28
36552: PUSH
36553: LD_VAR 0 5
36557: IN
36558: OR
36559: PUSH
36560: LD_INT 45
36562: PUSH
36563: LD_VAR 0 5
36567: IN
36568: OR
36569: AND
36570: IFFALSE 36824
// begin hex := GetHexInfo ( x , y ) ;
36572: LD_ADDR_VAR 0 4
36576: PUSH
36577: LD_VAR 0 10
36581: PPUSH
36582: LD_VAR 0 11
36586: PPUSH
36587: CALL_OW 546
36591: ST_TO_ADDR
// if hex [ 1 ] then
36592: LD_VAR 0 4
36596: PUSH
36597: LD_INT 1
36599: ARRAY
36600: IFFALSE 36604
// exit ;
36602: GO 37007
// height := hex [ 2 ] ;
36604: LD_ADDR_VAR 0 15
36608: PUSH
36609: LD_VAR 0 4
36613: PUSH
36614: LD_INT 2
36616: ARRAY
36617: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36618: LD_ADDR_VAR 0 14
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: LD_INT 3
36631: PUSH
36632: LD_INT 5
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: ST_TO_ADDR
// for i in tmp do
36641: LD_ADDR_VAR 0 8
36645: PUSH
36646: LD_VAR 0 14
36650: PUSH
36651: FOR_IN
36652: IFFALSE 36822
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36654: LD_ADDR_VAR 0 9
36658: PUSH
36659: LD_VAR 0 10
36663: PPUSH
36664: LD_VAR 0 8
36668: PPUSH
36669: LD_INT 5
36671: PPUSH
36672: CALL_OW 272
36676: PUSH
36677: LD_VAR 0 11
36681: PPUSH
36682: LD_VAR 0 8
36686: PPUSH
36687: LD_INT 5
36689: PPUSH
36690: CALL_OW 273
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36699: LD_VAR 0 9
36703: PUSH
36704: LD_INT 1
36706: ARRAY
36707: PPUSH
36708: LD_VAR 0 9
36712: PUSH
36713: LD_INT 2
36715: ARRAY
36716: PPUSH
36717: CALL_OW 488
36721: IFFALSE 36820
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36723: LD_ADDR_VAR 0 4
36727: PUSH
36728: LD_VAR 0 9
36732: PUSH
36733: LD_INT 1
36735: ARRAY
36736: PPUSH
36737: LD_VAR 0 9
36741: PUSH
36742: LD_INT 2
36744: ARRAY
36745: PPUSH
36746: CALL_OW 546
36750: ST_TO_ADDR
// if hex [ 1 ] then
36751: LD_VAR 0 4
36755: PUSH
36756: LD_INT 1
36758: ARRAY
36759: IFFALSE 36763
// continue ;
36761: GO 36651
// h := hex [ 2 ] ;
36763: LD_ADDR_VAR 0 13
36767: PUSH
36768: LD_VAR 0 4
36772: PUSH
36773: LD_INT 2
36775: ARRAY
36776: ST_TO_ADDR
// if h + 7 < height then
36777: LD_VAR 0 13
36781: PUSH
36782: LD_INT 7
36784: PLUS
36785: PUSH
36786: LD_VAR 0 15
36790: LESS
36791: IFFALSE 36820
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36793: LD_ADDR_VAR 0 18
36797: PUSH
36798: LD_INT 7
36800: PUSH
36801: LD_INT 28
36803: PUSH
36804: LD_INT 45
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: LIST
36811: PUSH
36812: LD_VAR 0 12
36816: ARRAY
36817: ST_TO_ADDR
// break ;
36818: GO 36822
// end ; end ; end ;
36820: GO 36651
36822: POP
36823: POP
// end ; if not weapon then
36824: LD_VAR 0 18
36828: NOT
36829: IFFALSE 36889
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36831: LD_ADDR_VAR 0 5
36835: PUSH
36836: LD_VAR 0 5
36840: PUSH
36841: LD_INT 11
36843: PUSH
36844: LD_INT 30
36846: PUSH
36847: LD_INT 49
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: LIST
36854: DIFF
36855: ST_TO_ADDR
// if not list then
36856: LD_VAR 0 5
36860: NOT
36861: IFFALSE 36865
// exit ;
36863: GO 37007
// weapon := list [ rand ( 1 , list ) ] ;
36865: LD_ADDR_VAR 0 18
36869: PUSH
36870: LD_VAR 0 5
36874: PUSH
36875: LD_INT 1
36877: PPUSH
36878: LD_VAR 0 5
36882: PPUSH
36883: CALL_OW 12
36887: ARRAY
36888: ST_TO_ADDR
// end ; if weapon then
36889: LD_VAR 0 18
36893: IFFALSE 37007
// begin tmp := CostOfWeapon ( weapon ) ;
36895: LD_ADDR_VAR 0 14
36899: PUSH
36900: LD_VAR 0 18
36904: PPUSH
36905: CALL_OW 451
36909: ST_TO_ADDR
// j := GetBase ( tower ) ;
36910: LD_ADDR_VAR 0 9
36914: PUSH
36915: LD_VAR 0 1
36919: PPUSH
36920: CALL_OW 274
36924: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36925: LD_VAR 0 9
36929: PPUSH
36930: LD_INT 1
36932: PPUSH
36933: CALL_OW 275
36937: PUSH
36938: LD_VAR 0 14
36942: PUSH
36943: LD_INT 1
36945: ARRAY
36946: GREATEREQUAL
36947: PUSH
36948: LD_VAR 0 9
36952: PPUSH
36953: LD_INT 2
36955: PPUSH
36956: CALL_OW 275
36960: PUSH
36961: LD_VAR 0 14
36965: PUSH
36966: LD_INT 2
36968: ARRAY
36969: GREATEREQUAL
36970: AND
36971: PUSH
36972: LD_VAR 0 9
36976: PPUSH
36977: LD_INT 3
36979: PPUSH
36980: CALL_OW 275
36984: PUSH
36985: LD_VAR 0 14
36989: PUSH
36990: LD_INT 3
36992: ARRAY
36993: GREATEREQUAL
36994: AND
36995: IFFALSE 37007
// result := weapon ;
36997: LD_ADDR_VAR 0 3
37001: PUSH
37002: LD_VAR 0 18
37006: ST_TO_ADDR
// end ; end ;
37007: LD_VAR 0 3
37011: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37012: LD_INT 0
37014: PPUSH
37015: PPUSH
// result := true ;
37016: LD_ADDR_VAR 0 3
37020: PUSH
37021: LD_INT 1
37023: ST_TO_ADDR
// if array1 = array2 then
37024: LD_VAR 0 1
37028: PUSH
37029: LD_VAR 0 2
37033: EQUAL
37034: IFFALSE 37094
// begin for i = 1 to array1 do
37036: LD_ADDR_VAR 0 4
37040: PUSH
37041: DOUBLE
37042: LD_INT 1
37044: DEC
37045: ST_TO_ADDR
37046: LD_VAR 0 1
37050: PUSH
37051: FOR_TO
37052: IFFALSE 37090
// if array1 [ i ] <> array2 [ i ] then
37054: LD_VAR 0 1
37058: PUSH
37059: LD_VAR 0 4
37063: ARRAY
37064: PUSH
37065: LD_VAR 0 2
37069: PUSH
37070: LD_VAR 0 4
37074: ARRAY
37075: NONEQUAL
37076: IFFALSE 37088
// begin result := false ;
37078: LD_ADDR_VAR 0 3
37082: PUSH
37083: LD_INT 0
37085: ST_TO_ADDR
// break ;
37086: GO 37090
// end ;
37088: GO 37051
37090: POP
37091: POP
// end else
37092: GO 37102
// result := false ;
37094: LD_ADDR_VAR 0 3
37098: PUSH
37099: LD_INT 0
37101: ST_TO_ADDR
// end ;
37102: LD_VAR 0 3
37106: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37107: LD_INT 0
37109: PPUSH
37110: PPUSH
// if not array1 or not array2 then
37111: LD_VAR 0 1
37115: NOT
37116: PUSH
37117: LD_VAR 0 2
37121: NOT
37122: OR
37123: IFFALSE 37127
// exit ;
37125: GO 37191
// result := true ;
37127: LD_ADDR_VAR 0 3
37131: PUSH
37132: LD_INT 1
37134: ST_TO_ADDR
// for i = 1 to array1 do
37135: LD_ADDR_VAR 0 4
37139: PUSH
37140: DOUBLE
37141: LD_INT 1
37143: DEC
37144: ST_TO_ADDR
37145: LD_VAR 0 1
37149: PUSH
37150: FOR_TO
37151: IFFALSE 37189
// if array1 [ i ] <> array2 [ i ] then
37153: LD_VAR 0 1
37157: PUSH
37158: LD_VAR 0 4
37162: ARRAY
37163: PUSH
37164: LD_VAR 0 2
37168: PUSH
37169: LD_VAR 0 4
37173: ARRAY
37174: NONEQUAL
37175: IFFALSE 37187
// begin result := false ;
37177: LD_ADDR_VAR 0 3
37181: PUSH
37182: LD_INT 0
37184: ST_TO_ADDR
// break ;
37185: GO 37189
// end ;
37187: GO 37150
37189: POP
37190: POP
// end ;
37191: LD_VAR 0 3
37195: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37196: LD_INT 0
37198: PPUSH
37199: PPUSH
37200: PPUSH
// pom := GetBase ( fac ) ;
37201: LD_ADDR_VAR 0 5
37205: PUSH
37206: LD_VAR 0 1
37210: PPUSH
37211: CALL_OW 274
37215: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37216: LD_ADDR_VAR 0 4
37220: PUSH
37221: LD_VAR 0 2
37225: PUSH
37226: LD_INT 1
37228: ARRAY
37229: PPUSH
37230: LD_VAR 0 2
37234: PUSH
37235: LD_INT 2
37237: ARRAY
37238: PPUSH
37239: LD_VAR 0 2
37243: PUSH
37244: LD_INT 3
37246: ARRAY
37247: PPUSH
37248: LD_VAR 0 2
37252: PUSH
37253: LD_INT 4
37255: ARRAY
37256: PPUSH
37257: CALL_OW 449
37261: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37262: LD_ADDR_VAR 0 3
37266: PUSH
37267: LD_VAR 0 5
37271: PPUSH
37272: LD_INT 1
37274: PPUSH
37275: CALL_OW 275
37279: PUSH
37280: LD_VAR 0 4
37284: PUSH
37285: LD_INT 1
37287: ARRAY
37288: GREATEREQUAL
37289: PUSH
37290: LD_VAR 0 5
37294: PPUSH
37295: LD_INT 2
37297: PPUSH
37298: CALL_OW 275
37302: PUSH
37303: LD_VAR 0 4
37307: PUSH
37308: LD_INT 2
37310: ARRAY
37311: GREATEREQUAL
37312: AND
37313: PUSH
37314: LD_VAR 0 5
37318: PPUSH
37319: LD_INT 3
37321: PPUSH
37322: CALL_OW 275
37326: PUSH
37327: LD_VAR 0 4
37331: PUSH
37332: LD_INT 3
37334: ARRAY
37335: GREATEREQUAL
37336: AND
37337: ST_TO_ADDR
// end ;
37338: LD_VAR 0 3
37342: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37343: LD_INT 0
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
// pom := GetBase ( building ) ;
37349: LD_ADDR_VAR 0 3
37353: PUSH
37354: LD_VAR 0 1
37358: PPUSH
37359: CALL_OW 274
37363: ST_TO_ADDR
// if not pom then
37364: LD_VAR 0 3
37368: NOT
37369: IFFALSE 37373
// exit ;
37371: GO 37543
// btype := GetBType ( building ) ;
37373: LD_ADDR_VAR 0 5
37377: PUSH
37378: LD_VAR 0 1
37382: PPUSH
37383: CALL_OW 266
37387: ST_TO_ADDR
// if btype = b_armoury then
37388: LD_VAR 0 5
37392: PUSH
37393: LD_INT 4
37395: EQUAL
37396: IFFALSE 37406
// btype := b_barracks ;
37398: LD_ADDR_VAR 0 5
37402: PUSH
37403: LD_INT 5
37405: ST_TO_ADDR
// if btype = b_depot then
37406: LD_VAR 0 5
37410: PUSH
37411: LD_INT 0
37413: EQUAL
37414: IFFALSE 37424
// btype := b_warehouse ;
37416: LD_ADDR_VAR 0 5
37420: PUSH
37421: LD_INT 1
37423: ST_TO_ADDR
// if btype = b_workshop then
37424: LD_VAR 0 5
37428: PUSH
37429: LD_INT 2
37431: EQUAL
37432: IFFALSE 37442
// btype := b_factory ;
37434: LD_ADDR_VAR 0 5
37438: PUSH
37439: LD_INT 3
37441: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37442: LD_ADDR_VAR 0 4
37446: PUSH
37447: LD_VAR 0 5
37451: PPUSH
37452: LD_VAR 0 1
37456: PPUSH
37457: CALL_OW 248
37461: PPUSH
37462: CALL_OW 450
37466: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37467: LD_ADDR_VAR 0 2
37471: PUSH
37472: LD_VAR 0 3
37476: PPUSH
37477: LD_INT 1
37479: PPUSH
37480: CALL_OW 275
37484: PUSH
37485: LD_VAR 0 4
37489: PUSH
37490: LD_INT 1
37492: ARRAY
37493: GREATEREQUAL
37494: PUSH
37495: LD_VAR 0 3
37499: PPUSH
37500: LD_INT 2
37502: PPUSH
37503: CALL_OW 275
37507: PUSH
37508: LD_VAR 0 4
37512: PUSH
37513: LD_INT 2
37515: ARRAY
37516: GREATEREQUAL
37517: AND
37518: PUSH
37519: LD_VAR 0 3
37523: PPUSH
37524: LD_INT 3
37526: PPUSH
37527: CALL_OW 275
37531: PUSH
37532: LD_VAR 0 4
37536: PUSH
37537: LD_INT 3
37539: ARRAY
37540: GREATEREQUAL
37541: AND
37542: ST_TO_ADDR
// end ;
37543: LD_VAR 0 2
37547: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37548: LD_INT 0
37550: PPUSH
37551: PPUSH
37552: PPUSH
// pom := GetBase ( building ) ;
37553: LD_ADDR_VAR 0 4
37557: PUSH
37558: LD_VAR 0 1
37562: PPUSH
37563: CALL_OW 274
37567: ST_TO_ADDR
// if not pom then
37568: LD_VAR 0 4
37572: NOT
37573: IFFALSE 37577
// exit ;
37575: GO 37678
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37577: LD_ADDR_VAR 0 5
37581: PUSH
37582: LD_VAR 0 2
37586: PPUSH
37587: LD_VAR 0 1
37591: PPUSH
37592: CALL_OW 248
37596: PPUSH
37597: CALL_OW 450
37601: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37602: LD_ADDR_VAR 0 3
37606: PUSH
37607: LD_VAR 0 4
37611: PPUSH
37612: LD_INT 1
37614: PPUSH
37615: CALL_OW 275
37619: PUSH
37620: LD_VAR 0 5
37624: PUSH
37625: LD_INT 1
37627: ARRAY
37628: GREATEREQUAL
37629: PUSH
37630: LD_VAR 0 4
37634: PPUSH
37635: LD_INT 2
37637: PPUSH
37638: CALL_OW 275
37642: PUSH
37643: LD_VAR 0 5
37647: PUSH
37648: LD_INT 2
37650: ARRAY
37651: GREATEREQUAL
37652: AND
37653: PUSH
37654: LD_VAR 0 4
37658: PPUSH
37659: LD_INT 3
37661: PPUSH
37662: CALL_OW 275
37666: PUSH
37667: LD_VAR 0 5
37671: PUSH
37672: LD_INT 3
37674: ARRAY
37675: GREATEREQUAL
37676: AND
37677: ST_TO_ADDR
// end ;
37678: LD_VAR 0 3
37682: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37683: LD_INT 0
37685: PPUSH
37686: PPUSH
37687: PPUSH
37688: PPUSH
37689: PPUSH
37690: PPUSH
37691: PPUSH
37692: PPUSH
37693: PPUSH
37694: PPUSH
37695: PPUSH
// result := false ;
37696: LD_ADDR_VAR 0 8
37700: PUSH
37701: LD_INT 0
37703: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37704: LD_VAR 0 5
37708: NOT
37709: PUSH
37710: LD_VAR 0 1
37714: NOT
37715: OR
37716: PUSH
37717: LD_VAR 0 2
37721: NOT
37722: OR
37723: PUSH
37724: LD_VAR 0 3
37728: NOT
37729: OR
37730: IFFALSE 37734
// exit ;
37732: GO 38548
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37734: LD_ADDR_VAR 0 14
37738: PUSH
37739: LD_VAR 0 1
37743: PPUSH
37744: LD_VAR 0 2
37748: PPUSH
37749: LD_VAR 0 3
37753: PPUSH
37754: LD_VAR 0 4
37758: PPUSH
37759: LD_VAR 0 5
37763: PUSH
37764: LD_INT 1
37766: ARRAY
37767: PPUSH
37768: CALL_OW 248
37772: PPUSH
37773: LD_INT 0
37775: PPUSH
37776: CALL 39781 0 6
37780: ST_TO_ADDR
// if not hexes then
37781: LD_VAR 0 14
37785: NOT
37786: IFFALSE 37790
// exit ;
37788: GO 38548
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37790: LD_ADDR_VAR 0 17
37794: PUSH
37795: LD_VAR 0 5
37799: PPUSH
37800: LD_INT 22
37802: PUSH
37803: LD_VAR 0 13
37807: PPUSH
37808: CALL_OW 255
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: PUSH
37820: LD_INT 30
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 30
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: LIST
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PPUSH
37849: CALL_OW 72
37853: ST_TO_ADDR
// for i = 1 to hexes do
37854: LD_ADDR_VAR 0 9
37858: PUSH
37859: DOUBLE
37860: LD_INT 1
37862: DEC
37863: ST_TO_ADDR
37864: LD_VAR 0 14
37868: PUSH
37869: FOR_TO
37870: IFFALSE 38546
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37872: LD_ADDR_VAR 0 13
37876: PUSH
37877: LD_VAR 0 14
37881: PUSH
37882: LD_VAR 0 9
37886: ARRAY
37887: PUSH
37888: LD_INT 1
37890: ARRAY
37891: PPUSH
37892: LD_VAR 0 14
37896: PUSH
37897: LD_VAR 0 9
37901: ARRAY
37902: PUSH
37903: LD_INT 2
37905: ARRAY
37906: PPUSH
37907: CALL_OW 428
37911: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37912: LD_VAR 0 14
37916: PUSH
37917: LD_VAR 0 9
37921: ARRAY
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: PPUSH
37927: LD_VAR 0 14
37931: PUSH
37932: LD_VAR 0 9
37936: ARRAY
37937: PUSH
37938: LD_INT 2
37940: ARRAY
37941: PPUSH
37942: CALL_OW 351
37946: PUSH
37947: LD_VAR 0 14
37951: PUSH
37952: LD_VAR 0 9
37956: ARRAY
37957: PUSH
37958: LD_INT 1
37960: ARRAY
37961: PPUSH
37962: LD_VAR 0 14
37966: PUSH
37967: LD_VAR 0 9
37971: ARRAY
37972: PUSH
37973: LD_INT 2
37975: ARRAY
37976: PPUSH
37977: CALL_OW 488
37981: NOT
37982: OR
37983: PUSH
37984: LD_VAR 0 13
37988: PPUSH
37989: CALL_OW 247
37993: PUSH
37994: LD_INT 3
37996: EQUAL
37997: OR
37998: IFFALSE 38004
// exit ;
38000: POP
38001: POP
38002: GO 38548
// if not tmp then
38004: LD_VAR 0 13
38008: NOT
38009: IFFALSE 38013
// continue ;
38011: GO 37869
// result := true ;
38013: LD_ADDR_VAR 0 8
38017: PUSH
38018: LD_INT 1
38020: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38021: LD_VAR 0 6
38025: PUSH
38026: LD_VAR 0 13
38030: PPUSH
38031: CALL_OW 247
38035: PUSH
38036: LD_INT 2
38038: EQUAL
38039: AND
38040: PUSH
38041: LD_VAR 0 13
38045: PPUSH
38046: CALL_OW 263
38050: PUSH
38051: LD_INT 1
38053: EQUAL
38054: AND
38055: IFFALSE 38219
// begin if IsDrivenBy ( tmp ) then
38057: LD_VAR 0 13
38061: PPUSH
38062: CALL_OW 311
38066: IFFALSE 38070
// continue ;
38068: GO 37869
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38070: LD_VAR 0 6
38074: PPUSH
38075: LD_INT 3
38077: PUSH
38078: LD_INT 60
38080: PUSH
38081: EMPTY
38082: LIST
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 3
38090: PUSH
38091: LD_INT 55
38093: PUSH
38094: EMPTY
38095: LIST
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PPUSH
38105: CALL_OW 72
38109: IFFALSE 38217
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38111: LD_ADDR_VAR 0 18
38115: PUSH
38116: LD_VAR 0 6
38120: PPUSH
38121: LD_INT 3
38123: PUSH
38124: LD_INT 60
38126: PUSH
38127: EMPTY
38128: LIST
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 3
38136: PUSH
38137: LD_INT 55
38139: PUSH
38140: EMPTY
38141: LIST
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PPUSH
38151: CALL_OW 72
38155: PUSH
38156: LD_INT 1
38158: ARRAY
38159: ST_TO_ADDR
// if IsInUnit ( driver ) then
38160: LD_VAR 0 18
38164: PPUSH
38165: CALL_OW 310
38169: IFFALSE 38180
// ComExit ( driver ) ;
38171: LD_VAR 0 18
38175: PPUSH
38176: CALL 63542 0 1
// AddComEnterUnit ( driver , tmp ) ;
38180: LD_VAR 0 18
38184: PPUSH
38185: LD_VAR 0 13
38189: PPUSH
38190: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38194: LD_VAR 0 18
38198: PPUSH
38199: LD_VAR 0 7
38203: PPUSH
38204: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38208: LD_VAR 0 18
38212: PPUSH
38213: CALL_OW 181
// end ; continue ;
38217: GO 37869
// end ; if not cleaners or not tmp in cleaners then
38219: LD_VAR 0 6
38223: NOT
38224: PUSH
38225: LD_VAR 0 13
38229: PUSH
38230: LD_VAR 0 6
38234: IN
38235: NOT
38236: OR
38237: IFFALSE 38544
// begin if dep then
38239: LD_VAR 0 17
38243: IFFALSE 38379
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38245: LD_ADDR_VAR 0 16
38249: PUSH
38250: LD_VAR 0 17
38254: PUSH
38255: LD_INT 1
38257: ARRAY
38258: PPUSH
38259: CALL_OW 250
38263: PPUSH
38264: LD_VAR 0 17
38268: PUSH
38269: LD_INT 1
38271: ARRAY
38272: PPUSH
38273: CALL_OW 254
38277: PPUSH
38278: LD_INT 5
38280: PPUSH
38281: CALL_OW 272
38285: PUSH
38286: LD_VAR 0 17
38290: PUSH
38291: LD_INT 1
38293: ARRAY
38294: PPUSH
38295: CALL_OW 251
38299: PPUSH
38300: LD_VAR 0 17
38304: PUSH
38305: LD_INT 1
38307: ARRAY
38308: PPUSH
38309: CALL_OW 254
38313: PPUSH
38314: LD_INT 5
38316: PPUSH
38317: CALL_OW 273
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38326: LD_VAR 0 16
38330: PUSH
38331: LD_INT 1
38333: ARRAY
38334: PPUSH
38335: LD_VAR 0 16
38339: PUSH
38340: LD_INT 2
38342: ARRAY
38343: PPUSH
38344: CALL_OW 488
38348: IFFALSE 38379
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38350: LD_VAR 0 13
38354: PPUSH
38355: LD_VAR 0 16
38359: PUSH
38360: LD_INT 1
38362: ARRAY
38363: PPUSH
38364: LD_VAR 0 16
38368: PUSH
38369: LD_INT 2
38371: ARRAY
38372: PPUSH
38373: CALL_OW 111
// continue ;
38377: GO 37869
// end ; end ; r := GetDir ( tmp ) ;
38379: LD_ADDR_VAR 0 15
38383: PUSH
38384: LD_VAR 0 13
38388: PPUSH
38389: CALL_OW 254
38393: ST_TO_ADDR
// if r = 5 then
38394: LD_VAR 0 15
38398: PUSH
38399: LD_INT 5
38401: EQUAL
38402: IFFALSE 38412
// r := 0 ;
38404: LD_ADDR_VAR 0 15
38408: PUSH
38409: LD_INT 0
38411: ST_TO_ADDR
// for j = r to 5 do
38412: LD_ADDR_VAR 0 10
38416: PUSH
38417: DOUBLE
38418: LD_VAR 0 15
38422: DEC
38423: ST_TO_ADDR
38424: LD_INT 5
38426: PUSH
38427: FOR_TO
38428: IFFALSE 38542
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38430: LD_ADDR_VAR 0 11
38434: PUSH
38435: LD_VAR 0 13
38439: PPUSH
38440: CALL_OW 250
38444: PPUSH
38445: LD_VAR 0 10
38449: PPUSH
38450: LD_INT 2
38452: PPUSH
38453: CALL_OW 272
38457: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38458: LD_ADDR_VAR 0 12
38462: PUSH
38463: LD_VAR 0 13
38467: PPUSH
38468: CALL_OW 251
38472: PPUSH
38473: LD_VAR 0 10
38477: PPUSH
38478: LD_INT 2
38480: PPUSH
38481: CALL_OW 273
38485: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38486: LD_VAR 0 11
38490: PPUSH
38491: LD_VAR 0 12
38495: PPUSH
38496: CALL_OW 488
38500: PUSH
38501: LD_VAR 0 11
38505: PPUSH
38506: LD_VAR 0 12
38510: PPUSH
38511: CALL_OW 428
38515: NOT
38516: AND
38517: IFFALSE 38540
// begin ComMoveXY ( tmp , _x , _y ) ;
38519: LD_VAR 0 13
38523: PPUSH
38524: LD_VAR 0 11
38528: PPUSH
38529: LD_VAR 0 12
38533: PPUSH
38534: CALL_OW 111
// break ;
38538: GO 38542
// end ; end ;
38540: GO 38427
38542: POP
38543: POP
// end ; end ;
38544: GO 37869
38546: POP
38547: POP
// end ;
38548: LD_VAR 0 8
38552: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38553: LD_INT 0
38555: PPUSH
// result := true ;
38556: LD_ADDR_VAR 0 3
38560: PUSH
38561: LD_INT 1
38563: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38564: LD_VAR 0 2
38568: PUSH
38569: LD_INT 24
38571: DOUBLE
38572: EQUAL
38573: IFTRUE 38583
38575: LD_INT 33
38577: DOUBLE
38578: EQUAL
38579: IFTRUE 38583
38581: GO 38608
38583: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38584: LD_ADDR_VAR 0 3
38588: PUSH
38589: LD_INT 32
38591: PPUSH
38592: LD_VAR 0 1
38596: PPUSH
38597: CALL_OW 321
38601: PUSH
38602: LD_INT 2
38604: EQUAL
38605: ST_TO_ADDR
38606: GO 38924
38608: LD_INT 20
38610: DOUBLE
38611: EQUAL
38612: IFTRUE 38616
38614: GO 38641
38616: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38617: LD_ADDR_VAR 0 3
38621: PUSH
38622: LD_INT 6
38624: PPUSH
38625: LD_VAR 0 1
38629: PPUSH
38630: CALL_OW 321
38634: PUSH
38635: LD_INT 2
38637: EQUAL
38638: ST_TO_ADDR
38639: GO 38924
38641: LD_INT 22
38643: DOUBLE
38644: EQUAL
38645: IFTRUE 38655
38647: LD_INT 36
38649: DOUBLE
38650: EQUAL
38651: IFTRUE 38655
38653: GO 38680
38655: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38656: LD_ADDR_VAR 0 3
38660: PUSH
38661: LD_INT 15
38663: PPUSH
38664: LD_VAR 0 1
38668: PPUSH
38669: CALL_OW 321
38673: PUSH
38674: LD_INT 2
38676: EQUAL
38677: ST_TO_ADDR
38678: GO 38924
38680: LD_INT 30
38682: DOUBLE
38683: EQUAL
38684: IFTRUE 38688
38686: GO 38713
38688: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38689: LD_ADDR_VAR 0 3
38693: PUSH
38694: LD_INT 20
38696: PPUSH
38697: LD_VAR 0 1
38701: PPUSH
38702: CALL_OW 321
38706: PUSH
38707: LD_INT 2
38709: EQUAL
38710: ST_TO_ADDR
38711: GO 38924
38713: LD_INT 28
38715: DOUBLE
38716: EQUAL
38717: IFTRUE 38727
38719: LD_INT 21
38721: DOUBLE
38722: EQUAL
38723: IFTRUE 38727
38725: GO 38752
38727: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38728: LD_ADDR_VAR 0 3
38732: PUSH
38733: LD_INT 21
38735: PPUSH
38736: LD_VAR 0 1
38740: PPUSH
38741: CALL_OW 321
38745: PUSH
38746: LD_INT 2
38748: EQUAL
38749: ST_TO_ADDR
38750: GO 38924
38752: LD_INT 16
38754: DOUBLE
38755: EQUAL
38756: IFTRUE 38760
38758: GO 38785
38760: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38761: LD_ADDR_VAR 0 3
38765: PUSH
38766: LD_INT 84
38768: PPUSH
38769: LD_VAR 0 1
38773: PPUSH
38774: CALL_OW 321
38778: PUSH
38779: LD_INT 2
38781: EQUAL
38782: ST_TO_ADDR
38783: GO 38924
38785: LD_INT 19
38787: DOUBLE
38788: EQUAL
38789: IFTRUE 38799
38791: LD_INT 23
38793: DOUBLE
38794: EQUAL
38795: IFTRUE 38799
38797: GO 38824
38799: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38800: LD_ADDR_VAR 0 3
38804: PUSH
38805: LD_INT 83
38807: PPUSH
38808: LD_VAR 0 1
38812: PPUSH
38813: CALL_OW 321
38817: PUSH
38818: LD_INT 2
38820: EQUAL
38821: ST_TO_ADDR
38822: GO 38924
38824: LD_INT 17
38826: DOUBLE
38827: EQUAL
38828: IFTRUE 38832
38830: GO 38857
38832: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38833: LD_ADDR_VAR 0 3
38837: PUSH
38838: LD_INT 39
38840: PPUSH
38841: LD_VAR 0 1
38845: PPUSH
38846: CALL_OW 321
38850: PUSH
38851: LD_INT 2
38853: EQUAL
38854: ST_TO_ADDR
38855: GO 38924
38857: LD_INT 18
38859: DOUBLE
38860: EQUAL
38861: IFTRUE 38865
38863: GO 38890
38865: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38866: LD_ADDR_VAR 0 3
38870: PUSH
38871: LD_INT 40
38873: PPUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: CALL_OW 321
38883: PUSH
38884: LD_INT 2
38886: EQUAL
38887: ST_TO_ADDR
38888: GO 38924
38890: LD_INT 27
38892: DOUBLE
38893: EQUAL
38894: IFTRUE 38898
38896: GO 38923
38898: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38899: LD_ADDR_VAR 0 3
38903: PUSH
38904: LD_INT 35
38906: PPUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: CALL_OW 321
38916: PUSH
38917: LD_INT 2
38919: EQUAL
38920: ST_TO_ADDR
38921: GO 38924
38923: POP
// end ;
38924: LD_VAR 0 3
38928: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38929: LD_INT 0
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
// result := false ;
38942: LD_ADDR_VAR 0 6
38946: PUSH
38947: LD_INT 0
38949: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38950: LD_VAR 0 1
38954: NOT
38955: PUSH
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 266
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: IN
38976: NOT
38977: OR
38978: PUSH
38979: LD_VAR 0 2
38983: NOT
38984: OR
38985: PUSH
38986: LD_VAR 0 5
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: LD_INT 2
38999: PUSH
39000: LD_INT 3
39002: PUSH
39003: LD_INT 4
39005: PUSH
39006: LD_INT 5
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: IN
39017: NOT
39018: OR
39019: PUSH
39020: LD_VAR 0 3
39024: PPUSH
39025: LD_VAR 0 4
39029: PPUSH
39030: CALL_OW 488
39034: NOT
39035: OR
39036: IFFALSE 39040
// exit ;
39038: GO 39776
// side := GetSide ( depot ) ;
39040: LD_ADDR_VAR 0 9
39044: PUSH
39045: LD_VAR 0 1
39049: PPUSH
39050: CALL_OW 255
39054: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39055: LD_VAR 0 9
39059: PPUSH
39060: LD_VAR 0 2
39064: PPUSH
39065: CALL 38553 0 2
39069: NOT
39070: IFFALSE 39074
// exit ;
39072: GO 39776
// pom := GetBase ( depot ) ;
39074: LD_ADDR_VAR 0 10
39078: PUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 274
39088: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39089: LD_ADDR_VAR 0 11
39093: PUSH
39094: LD_VAR 0 2
39098: PPUSH
39099: LD_VAR 0 1
39103: PPUSH
39104: CALL_OW 248
39108: PPUSH
39109: CALL_OW 450
39113: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39114: LD_VAR 0 10
39118: PPUSH
39119: LD_INT 1
39121: PPUSH
39122: CALL_OW 275
39126: PUSH
39127: LD_VAR 0 11
39131: PUSH
39132: LD_INT 1
39134: ARRAY
39135: GREATEREQUAL
39136: PUSH
39137: LD_VAR 0 10
39141: PPUSH
39142: LD_INT 2
39144: PPUSH
39145: CALL_OW 275
39149: PUSH
39150: LD_VAR 0 11
39154: PUSH
39155: LD_INT 2
39157: ARRAY
39158: GREATEREQUAL
39159: AND
39160: PUSH
39161: LD_VAR 0 10
39165: PPUSH
39166: LD_INT 3
39168: PPUSH
39169: CALL_OW 275
39173: PUSH
39174: LD_VAR 0 11
39178: PUSH
39179: LD_INT 3
39181: ARRAY
39182: GREATEREQUAL
39183: AND
39184: NOT
39185: IFFALSE 39189
// exit ;
39187: GO 39776
// if GetBType ( depot ) = b_depot then
39189: LD_VAR 0 1
39193: PPUSH
39194: CALL_OW 266
39198: PUSH
39199: LD_INT 0
39201: EQUAL
39202: IFFALSE 39214
// dist := 28 else
39204: LD_ADDR_VAR 0 14
39208: PUSH
39209: LD_INT 28
39211: ST_TO_ADDR
39212: GO 39222
// dist := 36 ;
39214: LD_ADDR_VAR 0 14
39218: PUSH
39219: LD_INT 36
39221: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39222: LD_VAR 0 1
39226: PPUSH
39227: LD_VAR 0 3
39231: PPUSH
39232: LD_VAR 0 4
39236: PPUSH
39237: CALL_OW 297
39241: PUSH
39242: LD_VAR 0 14
39246: GREATER
39247: IFFALSE 39251
// exit ;
39249: GO 39776
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39251: LD_ADDR_VAR 0 12
39255: PUSH
39256: LD_VAR 0 2
39260: PPUSH
39261: LD_VAR 0 3
39265: PPUSH
39266: LD_VAR 0 4
39270: PPUSH
39271: LD_VAR 0 5
39275: PPUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL_OW 248
39285: PPUSH
39286: LD_INT 0
39288: PPUSH
39289: CALL 39781 0 6
39293: ST_TO_ADDR
// if not hexes then
39294: LD_VAR 0 12
39298: NOT
39299: IFFALSE 39303
// exit ;
39301: GO 39776
// hex := GetHexInfo ( x , y ) ;
39303: LD_ADDR_VAR 0 15
39307: PUSH
39308: LD_VAR 0 3
39312: PPUSH
39313: LD_VAR 0 4
39317: PPUSH
39318: CALL_OW 546
39322: ST_TO_ADDR
// if hex [ 1 ] then
39323: LD_VAR 0 15
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: IFFALSE 39335
// exit ;
39333: GO 39776
// height := hex [ 2 ] ;
39335: LD_ADDR_VAR 0 13
39339: PUSH
39340: LD_VAR 0 15
39344: PUSH
39345: LD_INT 2
39347: ARRAY
39348: ST_TO_ADDR
// for i = 1 to hexes do
39349: LD_ADDR_VAR 0 7
39353: PUSH
39354: DOUBLE
39355: LD_INT 1
39357: DEC
39358: ST_TO_ADDR
39359: LD_VAR 0 12
39363: PUSH
39364: FOR_TO
39365: IFFALSE 39695
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39367: LD_VAR 0 12
39371: PUSH
39372: LD_VAR 0 7
39376: ARRAY
39377: PUSH
39378: LD_INT 1
39380: ARRAY
39381: PPUSH
39382: LD_VAR 0 12
39386: PUSH
39387: LD_VAR 0 7
39391: ARRAY
39392: PUSH
39393: LD_INT 2
39395: ARRAY
39396: PPUSH
39397: CALL_OW 488
39401: NOT
39402: PUSH
39403: LD_VAR 0 12
39407: PUSH
39408: LD_VAR 0 7
39412: ARRAY
39413: PUSH
39414: LD_INT 1
39416: ARRAY
39417: PPUSH
39418: LD_VAR 0 12
39422: PUSH
39423: LD_VAR 0 7
39427: ARRAY
39428: PUSH
39429: LD_INT 2
39431: ARRAY
39432: PPUSH
39433: CALL_OW 428
39437: PUSH
39438: LD_INT 0
39440: GREATER
39441: OR
39442: PUSH
39443: LD_VAR 0 12
39447: PUSH
39448: LD_VAR 0 7
39452: ARRAY
39453: PUSH
39454: LD_INT 1
39456: ARRAY
39457: PPUSH
39458: LD_VAR 0 12
39462: PUSH
39463: LD_VAR 0 7
39467: ARRAY
39468: PUSH
39469: LD_INT 2
39471: ARRAY
39472: PPUSH
39473: CALL_OW 351
39477: OR
39478: IFFALSE 39484
// exit ;
39480: POP
39481: POP
39482: GO 39776
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39484: LD_ADDR_VAR 0 8
39488: PUSH
39489: LD_VAR 0 12
39493: PUSH
39494: LD_VAR 0 7
39498: ARRAY
39499: PUSH
39500: LD_INT 1
39502: ARRAY
39503: PPUSH
39504: LD_VAR 0 12
39508: PUSH
39509: LD_VAR 0 7
39513: ARRAY
39514: PUSH
39515: LD_INT 2
39517: ARRAY
39518: PPUSH
39519: CALL_OW 546
39523: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39524: LD_VAR 0 8
39528: PUSH
39529: LD_INT 1
39531: ARRAY
39532: PUSH
39533: LD_VAR 0 8
39537: PUSH
39538: LD_INT 2
39540: ARRAY
39541: PUSH
39542: LD_VAR 0 13
39546: PUSH
39547: LD_INT 2
39549: PLUS
39550: GREATER
39551: OR
39552: PUSH
39553: LD_VAR 0 8
39557: PUSH
39558: LD_INT 2
39560: ARRAY
39561: PUSH
39562: LD_VAR 0 13
39566: PUSH
39567: LD_INT 2
39569: MINUS
39570: LESS
39571: OR
39572: PUSH
39573: LD_VAR 0 8
39577: PUSH
39578: LD_INT 3
39580: ARRAY
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 8
39587: PUSH
39588: LD_INT 9
39590: PUSH
39591: LD_INT 10
39593: PUSH
39594: LD_INT 11
39596: PUSH
39597: LD_INT 12
39599: PUSH
39600: LD_INT 13
39602: PUSH
39603: LD_INT 16
39605: PUSH
39606: LD_INT 17
39608: PUSH
39609: LD_INT 18
39611: PUSH
39612: LD_INT 19
39614: PUSH
39615: LD_INT 20
39617: PUSH
39618: LD_INT 21
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: IN
39636: NOT
39637: OR
39638: PUSH
39639: LD_VAR 0 8
39643: PUSH
39644: LD_INT 5
39646: ARRAY
39647: NOT
39648: OR
39649: PUSH
39650: LD_VAR 0 8
39654: PUSH
39655: LD_INT 6
39657: ARRAY
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 7
39667: PUSH
39668: LD_INT 9
39670: PUSH
39671: LD_INT 10
39673: PUSH
39674: LD_INT 11
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: IN
39685: NOT
39686: OR
39687: IFFALSE 39693
// exit ;
39689: POP
39690: POP
39691: GO 39776
// end ;
39693: GO 39364
39695: POP
39696: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39697: LD_VAR 0 9
39701: PPUSH
39702: LD_VAR 0 3
39706: PPUSH
39707: LD_VAR 0 4
39711: PPUSH
39712: LD_INT 20
39714: PPUSH
39715: CALL 31728 0 4
39719: PUSH
39720: LD_INT 4
39722: ARRAY
39723: IFFALSE 39727
// exit ;
39725: GO 39776
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39727: LD_VAR 0 2
39731: PUSH
39732: LD_INT 29
39734: PUSH
39735: LD_INT 30
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: IN
39742: PUSH
39743: LD_VAR 0 3
39747: PPUSH
39748: LD_VAR 0 4
39752: PPUSH
39753: LD_VAR 0 9
39757: PPUSH
39758: CALL_OW 440
39762: NOT
39763: AND
39764: IFFALSE 39768
// exit ;
39766: GO 39776
// result := true ;
39768: LD_ADDR_VAR 0 6
39772: PUSH
39773: LD_INT 1
39775: ST_TO_ADDR
// end ;
39776: LD_VAR 0 6
39780: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39781: LD_INT 0
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
39803: PPUSH
39804: PPUSH
39805: PPUSH
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
// result = [ ] ;
39841: LD_ADDR_VAR 0 7
39845: PUSH
39846: EMPTY
39847: ST_TO_ADDR
// temp_list = [ ] ;
39848: LD_ADDR_VAR 0 9
39852: PUSH
39853: EMPTY
39854: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39855: LD_VAR 0 4
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: LD_INT 3
39871: PUSH
39872: LD_INT 4
39874: PUSH
39875: LD_INT 5
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: IN
39886: NOT
39887: PUSH
39888: LD_VAR 0 1
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: IN
39903: PUSH
39904: LD_VAR 0 5
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: LD_INT 3
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: IN
39923: NOT
39924: AND
39925: OR
39926: IFFALSE 39930
// exit ;
39928: GO 58321
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39930: LD_VAR 0 1
39934: PUSH
39935: LD_INT 6
39937: PUSH
39938: LD_INT 7
39940: PUSH
39941: LD_INT 8
39943: PUSH
39944: LD_INT 13
39946: PUSH
39947: LD_INT 12
39949: PUSH
39950: LD_INT 15
39952: PUSH
39953: LD_INT 11
39955: PUSH
39956: LD_INT 14
39958: PUSH
39959: LD_INT 10
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: IN
39973: IFFALSE 39983
// btype = b_lab ;
39975: LD_ADDR_VAR 0 1
39979: PUSH
39980: LD_INT 6
39982: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39983: LD_VAR 0 6
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: IN
40002: NOT
40003: PUSH
40004: LD_VAR 0 1
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: LD_INT 2
40017: PUSH
40018: LD_INT 3
40020: PUSH
40021: LD_INT 6
40023: PUSH
40024: LD_INT 36
40026: PUSH
40027: LD_INT 4
40029: PUSH
40030: LD_INT 5
40032: PUSH
40033: LD_INT 31
40035: PUSH
40036: LD_INT 32
40038: PUSH
40039: LD_INT 33
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: IN
40055: NOT
40056: PUSH
40057: LD_VAR 0 6
40061: PUSH
40062: LD_INT 1
40064: EQUAL
40065: AND
40066: OR
40067: PUSH
40068: LD_VAR 0 1
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: LD_INT 3
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: IN
40083: NOT
40084: PUSH
40085: LD_VAR 0 6
40089: PUSH
40090: LD_INT 2
40092: EQUAL
40093: AND
40094: OR
40095: IFFALSE 40105
// mode = 0 ;
40097: LD_ADDR_VAR 0 6
40101: PUSH
40102: LD_INT 0
40104: ST_TO_ADDR
// case mode of 0 :
40105: LD_VAR 0 6
40109: PUSH
40110: LD_INT 0
40112: DOUBLE
40113: EQUAL
40114: IFTRUE 40118
40116: GO 51571
40118: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40119: LD_ADDR_VAR 0 11
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: LD_INT 1
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 3
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 3
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40312: LD_ADDR_VAR 0 12
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 2
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: NEG
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 3
40469: NEG
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 3
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40508: LD_ADDR_VAR 0 13
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: LD_INT 2
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: NEG
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: NEG
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: LD_INT 3
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 3
40667: NEG
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 3
40679: NEG
40680: PUSH
40681: LD_INT 3
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40707: LD_ADDR_VAR 0 14
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 3
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 3
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40903: LD_ADDR_VAR 0 15
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 3
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41096: LD_ADDR_VAR 0 16
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: LD_INT 2
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 3
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: LD_INT 3
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41289: LD_ADDR_VAR 0 17
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 2
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: NEG
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: NEG
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41519: LD_ADDR_VAR 0 18
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: LD_INT 2
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 2
41695: NEG
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: LD_INT 2
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41749: LD_ADDR_VAR 0 19
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 2
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41979: LD_ADDR_VAR 0 20
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42209: LD_ADDR_VAR 0 21
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 2
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42439: LD_ADDR_VAR 0 22
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 2
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 2
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 2
42626: NEG
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: LD_INT 2
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42669: LD_ADDR_VAR 0 23
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 2
42856: NEG
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: LD_INT 2
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: LD_INT 3
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 3
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: LD_INT 2
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42949: LD_ADDR_VAR 0 24
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43225: LD_ADDR_VAR 0 25
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 2
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: LD_INT 2
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: NEG
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 3
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 3
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: LD_INT 3
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 3
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43499: LD_ADDR_VAR 0 26
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 2
43698: NEG
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: LD_INT 3
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43775: LD_ADDR_VAR 0 27
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: NEG
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: NEG
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 2
43997: NEG
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 3
44008: NEG
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 3
44020: NEG
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44055: LD_ADDR_VAR 0 28
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 2
44254: NEG
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: LD_INT 3
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 3
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 3
44290: NEG
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 3
44302: NEG
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44337: LD_ADDR_VAR 0 29
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 3
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 3
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 3
44581: NEG
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44616: LD_ADDR_VAR 0 30
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 3
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 3
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 2
44848: NEG
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 3
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44894: LD_ADDR_VAR 0 31
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: LD_INT 3
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 3
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 3
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45172: LD_ADDR_VAR 0 32
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: LD_INT 2
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 2
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 3
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 3
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 3
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45450: LD_ADDR_VAR 0 33
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: LD_INT 3
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 3
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 3
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 3
45694: NEG
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45729: LD_ADDR_VAR 0 34
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 3
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 3
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46009: LD_ADDR_VAR 0 35
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46121: LD_ADDR_VAR 0 36
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46233: LD_ADDR_VAR 0 37
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46345: LD_ADDR_VAR 0 38
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46457: LD_ADDR_VAR 0 39
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46569: LD_ADDR_VAR 0 40
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46681: LD_ADDR_VAR 0 41
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: LD_INT 3
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 3
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: LD_INT 3
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 3
46955: NEG
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 3
46966: NEG
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: NEG
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: LD_INT 3
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47031: LD_ADDR_VAR 0 42
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 3
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: LD_INT 3
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 3
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 3
47277: PUSH
47278: LD_INT 3
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 3
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 3
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 3
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: LD_INT 2
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 3
47340: NEG
47341: PUSH
47342: LD_INT 3
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47381: LD_ADDR_VAR 0 43
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 2
47547: NEG
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 3
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 3
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 3
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 3
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 3
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 3
47677: NEG
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 3
47688: NEG
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47729: LD_ADDR_VAR 0 44
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: LD_INT 3
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 3
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 3
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 3
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 3
47972: PUSH
47973: LD_INT 3
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 3
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: NEG
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 3
48038: NEG
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48079: LD_ADDR_VAR 0 45
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 3
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 3
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: LD_INT 3
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 3
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 3
48388: NEG
48389: PUSH
48390: LD_INT 3
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48429: LD_ADDR_VAR 0 46
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 3
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 3
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 3
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 3
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: LD_INT 2
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 3
48725: NEG
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 3
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48777: LD_ADDR_VAR 0 47
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48928: LD_ADDR_VAR 0 48
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49075: LD_ADDR_VAR 0 49
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49219: LD_ADDR_VAR 0 50
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49363: LD_ADDR_VAR 0 51
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: NEG
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49510: LD_ADDR_VAR 0 52
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49661: LD_ADDR_VAR 0 53
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49891: LD_ADDR_VAR 0 54
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50121: LD_ADDR_VAR 0 55
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50351: LD_ADDR_VAR 0 56
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50581: LD_ADDR_VAR 0 57
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50811: LD_ADDR_VAR 0 58
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51041: LD_ADDR_VAR 0 59
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51129: LD_ADDR_VAR 0 60
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51217: LD_ADDR_VAR 0 61
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51305: LD_ADDR_VAR 0 62
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51393: LD_ADDR_VAR 0 63
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51481: LD_ADDR_VAR 0 64
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: ST_TO_ADDR
// end ; 1 :
51569: GO 57466
51571: LD_INT 1
51573: DOUBLE
51574: EQUAL
51575: IFTRUE 51579
51577: GO 54202
51579: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51580: LD_ADDR_VAR 0 11
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: LD_INT 3
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: LIST
51623: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51624: LD_ADDR_VAR 0 12
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51665: LD_ADDR_VAR 0 13
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: LIST
51704: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51705: LD_ADDR_VAR 0 14
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: LD_INT 3
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 3
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51746: LD_ADDR_VAR 0 15
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 3
51764: NEG
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 3
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: LIST
51789: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51790: LD_ADDR_VAR 0 16
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: LD_INT 3
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: NEG
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: NEG
51822: PUSH
51823: LD_INT 3
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51836: LD_ADDR_VAR 0 17
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: LD_INT 3
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51880: LD_ADDR_VAR 0 18
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 3
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 3
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51921: LD_ADDR_VAR 0 19
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 3
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: LD_INT 3
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: LIST
51960: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51961: LD_ADDR_VAR 0 20
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: LIST
52001: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52002: LD_ADDR_VAR 0 21
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: NEG
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 3
52031: NEG
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: LIST
52045: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52046: LD_ADDR_VAR 0 22
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: LD_INT 3
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 3
52065: NEG
52066: PUSH
52067: LD_INT 2
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 3
52077: NEG
52078: PUSH
52079: LD_INT 3
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: LIST
52091: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52092: LD_ADDR_VAR 0 23
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 3
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 4
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52136: LD_ADDR_VAR 0 24
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 4
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: LIST
52176: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52177: LD_ADDR_VAR 0 25
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 4
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: LD_INT 4
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52217: LD_ADDR_VAR 0 26
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 4
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: LIST
52257: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52258: LD_ADDR_VAR 0 27
52262: PUSH
52263: LD_INT 3
52265: NEG
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 3
52276: NEG
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 4
52287: NEG
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: LIST
52301: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52302: LD_ADDR_VAR 0 28
52306: PUSH
52307: LD_INT 3
52309: NEG
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 3
52321: NEG
52322: PUSH
52323: LD_INT 4
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 4
52333: NEG
52334: PUSH
52335: LD_INT 3
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52348: LD_ADDR_VAR 0 29
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 3
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 3
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 4
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 4
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 3
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 5
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 5
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 4
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 6
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 6
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 5
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52503: LD_ADDR_VAR 0 30
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 4
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 4
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 4
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 5
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 5
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 5
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 6
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 6
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52646: LD_ADDR_VAR 0 31
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: LD_INT 3
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 4
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 4
52693: PUSH
52694: LD_INT 4
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: LD_INT 4
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 5
52713: PUSH
52714: LD_INT 4
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 5
52723: PUSH
52724: LD_INT 5
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 4
52733: PUSH
52734: LD_INT 5
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 6
52743: PUSH
52744: LD_INT 5
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 6
52753: PUSH
52754: LD_INT 6
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 5
52763: PUSH
52764: LD_INT 6
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52785: LD_ADDR_VAR 0 32
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 3
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 4
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 4
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 3
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 5
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 5
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 4
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 6
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 6
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 5
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52928: LD_ADDR_VAR 0 33
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 3
52946: NEG
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 3
52957: NEG
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 3
52969: NEG
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 4
52980: NEG
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 4
52991: NEG
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 4
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 5
53014: NEG
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 5
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 5
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 6
53048: NEG
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 6
53059: NEG
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53083: LD_ADDR_VAR 0 34
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: LD_INT 3
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: NEG
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: NEG
53115: PUSH
53116: LD_INT 3
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 3
53126: NEG
53127: PUSH
53128: LD_INT 4
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 4
53138: NEG
53139: PUSH
53140: LD_INT 3
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 4
53150: NEG
53151: PUSH
53152: LD_INT 4
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 4
53162: NEG
53163: PUSH
53164: LD_INT 5
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 5
53174: NEG
53175: PUSH
53176: LD_INT 4
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 5
53186: NEG
53187: PUSH
53188: LD_INT 5
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 5
53198: NEG
53199: PUSH
53200: LD_INT 6
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 6
53210: NEG
53211: PUSH
53212: LD_INT 5
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 6
53222: NEG
53223: PUSH
53224: LD_INT 6
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53246: LD_ADDR_VAR 0 41
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53290: LD_ADDR_VAR 0 42
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 3
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: LIST
53330: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53331: LD_ADDR_VAR 0 43
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53371: LD_ADDR_VAR 0 44
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53412: LD_ADDR_VAR 0 45
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: LIST
53455: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53456: LD_ADDR_VAR 0 46
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: LD_INT 3
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53502: LD_ADDR_VAR 0 47
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 3
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53535: LD_ADDR_VAR 0 48
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53566: LD_ADDR_VAR 0 49
53570: PUSH
53571: LD_INT 3
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 3
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53595: LD_ADDR_VAR 0 50
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: LD_INT 3
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53624: LD_ADDR_VAR 0 51
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53655: LD_ADDR_VAR 0 52
53659: PUSH
53660: LD_INT 3
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 3
53674: NEG
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53688: LD_ADDR_VAR 0 53
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 3
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 3
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: LIST
53731: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53732: LD_ADDR_VAR 0 54
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 3
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: LIST
53772: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53773: LD_ADDR_VAR 0 55
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: LD_INT 3
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: LD_INT 3
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53813: LD_ADDR_VAR 0 56
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 3
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: LIST
53853: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53854: LD_ADDR_VAR 0 57
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 3
53883: NEG
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: LIST
53897: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53898: LD_ADDR_VAR 0 58
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: LD_INT 3
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 3
53917: NEG
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: NEG
53930: PUSH
53931: LD_INT 3
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53944: LD_ADDR_VAR 0 59
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: LIST
53987: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53988: LD_ADDR_VAR 0 60
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54029: LD_ADDR_VAR 0 61
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: LIST
54068: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54069: LD_ADDR_VAR 0 62
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: LIST
54109: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54110: LD_ADDR_VAR 0 63
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54154: LD_ADDR_VAR 0 64
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: ST_TO_ADDR
// end ; 2 :
54200: GO 57466
54202: LD_INT 2
54204: DOUBLE
54205: EQUAL
54206: IFTRUE 54210
54208: GO 57465
54210: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54211: LD_ADDR_VAR 0 29
54215: PUSH
54216: LD_INT 4
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 4
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 5
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 5
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 4
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 3
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 5
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 3
54311: PUSH
54312: LD_INT 3
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 3
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 4
54331: PUSH
54332: LD_INT 3
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 4
54341: PUSH
54342: LD_INT 4
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: LD_INT 4
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 4
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: LD_INT 4
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 4
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 3
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: LD_INT 4
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 5
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 5
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 4
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 3
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: LD_INT 5
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: LD_INT 3
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 3
54494: NEG
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 3
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 3
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 4
54550: NEG
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 4
54561: NEG
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 4
54573: NEG
54574: PUSH
54575: LD_INT 2
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 4
54596: NEG
54597: PUSH
54598: LD_INT 4
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 4
54608: NEG
54609: PUSH
54610: LD_INT 5
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: NEG
54621: PUSH
54622: LD_INT 4
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 3
54632: NEG
54633: PUSH
54634: LD_INT 3
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 4
54644: NEG
54645: PUSH
54646: LD_INT 3
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 5
54656: NEG
54657: PUSH
54658: LD_INT 4
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 5
54668: NEG
54669: PUSH
54670: LD_INT 5
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 3
54680: NEG
54681: PUSH
54682: LD_INT 5
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 5
54692: NEG
54693: PUSH
54694: LD_INT 3
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54749: LD_ADDR_VAR 0 30
54753: PUSH
54754: LD_INT 4
54756: PUSH
54757: LD_INT 4
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 4
54766: PUSH
54767: LD_INT 3
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 5
54776: PUSH
54777: LD_INT 4
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 5
54786: PUSH
54787: LD_INT 5
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 4
54796: PUSH
54797: LD_INT 5
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 3
54806: PUSH
54807: LD_INT 4
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 5
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: LD_INT 5
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 3
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: LD_INT 3
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 4
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 4
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: LD_INT 3
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: LD_INT 4
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: LD_INT 2
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 4
54939: NEG
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 4
54950: NEG
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 3
54973: NEG
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 4
54984: NEG
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 5
54995: NEG
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 5
55006: NEG
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 5
55018: NEG
55019: PUSH
55020: LD_INT 2
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 3
55030: NEG
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 3
55041: NEG
55042: PUSH
55043: LD_INT 3
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: NEG
55054: PUSH
55055: LD_INT 4
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 4
55101: NEG
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 4
55113: NEG
55114: PUSH
55115: LD_INT 4
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 4
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 4
55137: NEG
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 4
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 5
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 4
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: LD_INT 3
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 4
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 5
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: LD_INT 5
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55296: LD_ADDR_VAR 0 31
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 4
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 4
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 5
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 5
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: LD_INT 4
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: LD_INT 5
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: LD_INT 3
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 3
55396: NEG
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 3
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 3
55441: NEG
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 4
55452: NEG
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 4
55463: NEG
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 4
55475: NEG
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: NEG
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 4
55498: NEG
55499: PUSH
55500: LD_INT 4
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 4
55510: NEG
55511: PUSH
55512: LD_INT 5
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 3
55522: NEG
55523: PUSH
55524: LD_INT 4
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 3
55534: NEG
55535: PUSH
55536: LD_INT 3
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 4
55546: NEG
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 5
55558: NEG
55559: PUSH
55560: LD_INT 4
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 5
55570: NEG
55571: PUSH
55572: LD_INT 5
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 3
55582: NEG
55583: PUSH
55584: LD_INT 5
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 5
55594: NEG
55595: PUSH
55596: LD_INT 3
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 4
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 3
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 4
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: LD_INT 4
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 4
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 4
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 5
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 5
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 4
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 3
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 3
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 5
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55846: LD_ADDR_VAR 0 32
55850: PUSH
55851: LD_INT 4
55853: NEG
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 4
55864: NEG
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 3
55876: NEG
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 3
55887: NEG
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 4
55898: NEG
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 5
55909: NEG
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 5
55920: NEG
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 5
55932: NEG
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 3
55944: NEG
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 3
55955: NEG
55956: PUSH
55957: LD_INT 3
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 3
55967: NEG
55968: PUSH
55969: LD_INT 4
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: LD_INT 3
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: NEG
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 4
56015: NEG
56016: PUSH
56017: LD_INT 3
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 4
56027: NEG
56028: PUSH
56029: LD_INT 4
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: LD_INT 4
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 4
56051: NEG
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 4
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 5
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 4
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 3
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 3
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: LD_INT 4
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: LD_INT 5
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: LD_INT 5
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 3
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 4
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 4
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 4
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: LD_INT 4
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 4
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 5
56278: PUSH
56279: LD_INT 4
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 5
56288: PUSH
56289: LD_INT 5
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: LD_INT 5
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 3
56308: PUSH
56309: LD_INT 4
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: LD_INT 3
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 5
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: LD_INT 5
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56393: LD_ADDR_VAR 0 33
56397: PUSH
56398: LD_INT 4
56400: NEG
56401: PUSH
56402: LD_INT 4
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 4
56412: NEG
56413: PUSH
56414: LD_INT 5
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: LD_INT 4
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: NEG
56437: PUSH
56438: LD_INT 3
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 4
56448: NEG
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 5
56460: NEG
56461: PUSH
56462: LD_INT 4
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 5
56472: NEG
56473: PUSH
56474: LD_INT 5
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 3
56484: NEG
56485: PUSH
56486: LD_INT 5
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 5
56496: NEG
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 3
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 4
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 0
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 3
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: LD_INT 4
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: LD_INT 4
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 4
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 4
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 5
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 5
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 4
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 5
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: PUSH
56704: LD_INT 3
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 4
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 4
56733: PUSH
56734: LD_INT 4
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: LD_INT 4
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 4
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: LD_INT 4
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 4
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: LD_INT 4
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 5
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 5
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 4
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: LD_INT 3
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: LD_INT 5
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 3
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56931: LD_ADDR_VAR 0 34
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 4
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 5
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 4
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 3
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 4
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 5
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: LD_INT 3
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 5
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 4
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 4
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 4
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 4
57133: PUSH
57134: LD_INT 4
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 4
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 5
57153: PUSH
57154: LD_INT 4
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 5
57163: PUSH
57164: LD_INT 5
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 4
57173: PUSH
57174: LD_INT 5
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: LD_INT 4
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: LD_INT 3
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 5
57203: PUSH
57204: LD_INT 3
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: PUSH
57214: LD_INT 5
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 3
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 4
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 4
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 4
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 4
57316: NEG
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 4
57327: NEG
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 3
57339: NEG
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 3
57350: NEG
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 4
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 5
57372: NEG
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 5
57383: NEG
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 5
57395: NEG
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: ST_TO_ADDR
// end ; end ;
57463: GO 57466
57465: POP
// case btype of b_depot , b_warehouse :
57466: LD_VAR 0 1
57470: PUSH
57471: LD_INT 0
57473: DOUBLE
57474: EQUAL
57475: IFTRUE 57485
57477: LD_INT 1
57479: DOUBLE
57480: EQUAL
57481: IFTRUE 57485
57483: GO 57686
57485: POP
// case nation of nation_american :
57486: LD_VAR 0 5
57490: PUSH
57491: LD_INT 1
57493: DOUBLE
57494: EQUAL
57495: IFTRUE 57499
57497: GO 57555
57499: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57500: LD_ADDR_VAR 0 9
57504: PUSH
57505: LD_VAR 0 11
57509: PUSH
57510: LD_VAR 0 12
57514: PUSH
57515: LD_VAR 0 13
57519: PUSH
57520: LD_VAR 0 14
57524: PUSH
57525: LD_VAR 0 15
57529: PUSH
57530: LD_VAR 0 16
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: PUSH
57543: LD_VAR 0 4
57547: PUSH
57548: LD_INT 1
57550: PLUS
57551: ARRAY
57552: ST_TO_ADDR
57553: GO 57684
57555: LD_INT 2
57557: DOUBLE
57558: EQUAL
57559: IFTRUE 57563
57561: GO 57619
57563: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57564: LD_ADDR_VAR 0 9
57568: PUSH
57569: LD_VAR 0 17
57573: PUSH
57574: LD_VAR 0 18
57578: PUSH
57579: LD_VAR 0 19
57583: PUSH
57584: LD_VAR 0 20
57588: PUSH
57589: LD_VAR 0 21
57593: PUSH
57594: LD_VAR 0 22
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: PUSH
57607: LD_VAR 0 4
57611: PUSH
57612: LD_INT 1
57614: PLUS
57615: ARRAY
57616: ST_TO_ADDR
57617: GO 57684
57619: LD_INT 3
57621: DOUBLE
57622: EQUAL
57623: IFTRUE 57627
57625: GO 57683
57627: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57628: LD_ADDR_VAR 0 9
57632: PUSH
57633: LD_VAR 0 23
57637: PUSH
57638: LD_VAR 0 24
57642: PUSH
57643: LD_VAR 0 25
57647: PUSH
57648: LD_VAR 0 26
57652: PUSH
57653: LD_VAR 0 27
57657: PUSH
57658: LD_VAR 0 28
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: PUSH
57671: LD_VAR 0 4
57675: PUSH
57676: LD_INT 1
57678: PLUS
57679: ARRAY
57680: ST_TO_ADDR
57681: GO 57684
57683: POP
57684: GO 58239
57686: LD_INT 2
57688: DOUBLE
57689: EQUAL
57690: IFTRUE 57700
57692: LD_INT 3
57694: DOUBLE
57695: EQUAL
57696: IFTRUE 57700
57698: GO 57756
57700: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57701: LD_ADDR_VAR 0 9
57705: PUSH
57706: LD_VAR 0 29
57710: PUSH
57711: LD_VAR 0 30
57715: PUSH
57716: LD_VAR 0 31
57720: PUSH
57721: LD_VAR 0 32
57725: PUSH
57726: LD_VAR 0 33
57730: PUSH
57731: LD_VAR 0 34
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: PUSH
57744: LD_VAR 0 4
57748: PUSH
57749: LD_INT 1
57751: PLUS
57752: ARRAY
57753: ST_TO_ADDR
57754: GO 58239
57756: LD_INT 16
57758: DOUBLE
57759: EQUAL
57760: IFTRUE 57818
57762: LD_INT 17
57764: DOUBLE
57765: EQUAL
57766: IFTRUE 57818
57768: LD_INT 18
57770: DOUBLE
57771: EQUAL
57772: IFTRUE 57818
57774: LD_INT 19
57776: DOUBLE
57777: EQUAL
57778: IFTRUE 57818
57780: LD_INT 22
57782: DOUBLE
57783: EQUAL
57784: IFTRUE 57818
57786: LD_INT 20
57788: DOUBLE
57789: EQUAL
57790: IFTRUE 57818
57792: LD_INT 21
57794: DOUBLE
57795: EQUAL
57796: IFTRUE 57818
57798: LD_INT 23
57800: DOUBLE
57801: EQUAL
57802: IFTRUE 57818
57804: LD_INT 24
57806: DOUBLE
57807: EQUAL
57808: IFTRUE 57818
57810: LD_INT 25
57812: DOUBLE
57813: EQUAL
57814: IFTRUE 57818
57816: GO 57874
57818: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57819: LD_ADDR_VAR 0 9
57823: PUSH
57824: LD_VAR 0 35
57828: PUSH
57829: LD_VAR 0 36
57833: PUSH
57834: LD_VAR 0 37
57838: PUSH
57839: LD_VAR 0 38
57843: PUSH
57844: LD_VAR 0 39
57848: PUSH
57849: LD_VAR 0 40
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: PUSH
57862: LD_VAR 0 4
57866: PUSH
57867: LD_INT 1
57869: PLUS
57870: ARRAY
57871: ST_TO_ADDR
57872: GO 58239
57874: LD_INT 6
57876: DOUBLE
57877: EQUAL
57878: IFTRUE 57930
57880: LD_INT 7
57882: DOUBLE
57883: EQUAL
57884: IFTRUE 57930
57886: LD_INT 8
57888: DOUBLE
57889: EQUAL
57890: IFTRUE 57930
57892: LD_INT 13
57894: DOUBLE
57895: EQUAL
57896: IFTRUE 57930
57898: LD_INT 12
57900: DOUBLE
57901: EQUAL
57902: IFTRUE 57930
57904: LD_INT 15
57906: DOUBLE
57907: EQUAL
57908: IFTRUE 57930
57910: LD_INT 11
57912: DOUBLE
57913: EQUAL
57914: IFTRUE 57930
57916: LD_INT 14
57918: DOUBLE
57919: EQUAL
57920: IFTRUE 57930
57922: LD_INT 10
57924: DOUBLE
57925: EQUAL
57926: IFTRUE 57930
57928: GO 57986
57930: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57931: LD_ADDR_VAR 0 9
57935: PUSH
57936: LD_VAR 0 41
57940: PUSH
57941: LD_VAR 0 42
57945: PUSH
57946: LD_VAR 0 43
57950: PUSH
57951: LD_VAR 0 44
57955: PUSH
57956: LD_VAR 0 45
57960: PUSH
57961: LD_VAR 0 46
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: PUSH
57974: LD_VAR 0 4
57978: PUSH
57979: LD_INT 1
57981: PLUS
57982: ARRAY
57983: ST_TO_ADDR
57984: GO 58239
57986: LD_INT 36
57988: DOUBLE
57989: EQUAL
57990: IFTRUE 57994
57992: GO 58050
57994: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57995: LD_ADDR_VAR 0 9
57999: PUSH
58000: LD_VAR 0 47
58004: PUSH
58005: LD_VAR 0 48
58009: PUSH
58010: LD_VAR 0 49
58014: PUSH
58015: LD_VAR 0 50
58019: PUSH
58020: LD_VAR 0 51
58024: PUSH
58025: LD_VAR 0 52
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: PUSH
58038: LD_VAR 0 4
58042: PUSH
58043: LD_INT 1
58045: PLUS
58046: ARRAY
58047: ST_TO_ADDR
58048: GO 58239
58050: LD_INT 4
58052: DOUBLE
58053: EQUAL
58054: IFTRUE 58076
58056: LD_INT 5
58058: DOUBLE
58059: EQUAL
58060: IFTRUE 58076
58062: LD_INT 34
58064: DOUBLE
58065: EQUAL
58066: IFTRUE 58076
58068: LD_INT 37
58070: DOUBLE
58071: EQUAL
58072: IFTRUE 58076
58074: GO 58132
58076: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58077: LD_ADDR_VAR 0 9
58081: PUSH
58082: LD_VAR 0 53
58086: PUSH
58087: LD_VAR 0 54
58091: PUSH
58092: LD_VAR 0 55
58096: PUSH
58097: LD_VAR 0 56
58101: PUSH
58102: LD_VAR 0 57
58106: PUSH
58107: LD_VAR 0 58
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: PUSH
58120: LD_VAR 0 4
58124: PUSH
58125: LD_INT 1
58127: PLUS
58128: ARRAY
58129: ST_TO_ADDR
58130: GO 58239
58132: LD_INT 31
58134: DOUBLE
58135: EQUAL
58136: IFTRUE 58182
58138: LD_INT 32
58140: DOUBLE
58141: EQUAL
58142: IFTRUE 58182
58144: LD_INT 33
58146: DOUBLE
58147: EQUAL
58148: IFTRUE 58182
58150: LD_INT 27
58152: DOUBLE
58153: EQUAL
58154: IFTRUE 58182
58156: LD_INT 26
58158: DOUBLE
58159: EQUAL
58160: IFTRUE 58182
58162: LD_INT 28
58164: DOUBLE
58165: EQUAL
58166: IFTRUE 58182
58168: LD_INT 29
58170: DOUBLE
58171: EQUAL
58172: IFTRUE 58182
58174: LD_INT 30
58176: DOUBLE
58177: EQUAL
58178: IFTRUE 58182
58180: GO 58238
58182: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58183: LD_ADDR_VAR 0 9
58187: PUSH
58188: LD_VAR 0 59
58192: PUSH
58193: LD_VAR 0 60
58197: PUSH
58198: LD_VAR 0 61
58202: PUSH
58203: LD_VAR 0 62
58207: PUSH
58208: LD_VAR 0 63
58212: PUSH
58213: LD_VAR 0 64
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: PUSH
58226: LD_VAR 0 4
58230: PUSH
58231: LD_INT 1
58233: PLUS
58234: ARRAY
58235: ST_TO_ADDR
58236: GO 58239
58238: POP
// temp_list2 = [ ] ;
58239: LD_ADDR_VAR 0 10
58243: PUSH
58244: EMPTY
58245: ST_TO_ADDR
// for i in temp_list do
58246: LD_ADDR_VAR 0 8
58250: PUSH
58251: LD_VAR 0 9
58255: PUSH
58256: FOR_IN
58257: IFFALSE 58309
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58259: LD_ADDR_VAR 0 10
58263: PUSH
58264: LD_VAR 0 10
58268: PUSH
58269: LD_VAR 0 8
58273: PUSH
58274: LD_INT 1
58276: ARRAY
58277: PUSH
58278: LD_VAR 0 2
58282: PLUS
58283: PUSH
58284: LD_VAR 0 8
58288: PUSH
58289: LD_INT 2
58291: ARRAY
58292: PUSH
58293: LD_VAR 0 3
58297: PLUS
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: EMPTY
58304: LIST
58305: ADD
58306: ST_TO_ADDR
58307: GO 58256
58309: POP
58310: POP
// result = temp_list2 ;
58311: LD_ADDR_VAR 0 7
58315: PUSH
58316: LD_VAR 0 10
58320: ST_TO_ADDR
// end ;
58321: LD_VAR 0 7
58325: RET
// export function EnemyInRange ( unit , dist ) ; begin
58326: LD_INT 0
58328: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58329: LD_ADDR_VAR 0 3
58333: PUSH
58334: LD_VAR 0 1
58338: PPUSH
58339: CALL_OW 255
58343: PPUSH
58344: LD_VAR 0 1
58348: PPUSH
58349: CALL_OW 250
58353: PPUSH
58354: LD_VAR 0 1
58358: PPUSH
58359: CALL_OW 251
58363: PPUSH
58364: LD_VAR 0 2
58368: PPUSH
58369: CALL 31728 0 4
58373: PUSH
58374: LD_INT 4
58376: ARRAY
58377: ST_TO_ADDR
// end ;
58378: LD_VAR 0 3
58382: RET
// export function PlayerSeeMe ( unit ) ; begin
58383: LD_INT 0
58385: PPUSH
// result := See ( your_side , unit ) ;
58386: LD_ADDR_VAR 0 2
58390: PUSH
58391: LD_OWVAR 2
58395: PPUSH
58396: LD_VAR 0 1
58400: PPUSH
58401: CALL_OW 292
58405: ST_TO_ADDR
// end ;
58406: LD_VAR 0 2
58410: RET
// export function ReverseDir ( unit ) ; begin
58411: LD_INT 0
58413: PPUSH
// if not unit then
58414: LD_VAR 0 1
58418: NOT
58419: IFFALSE 58423
// exit ;
58421: GO 58446
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58423: LD_ADDR_VAR 0 2
58427: PUSH
58428: LD_VAR 0 1
58432: PPUSH
58433: CALL_OW 254
58437: PUSH
58438: LD_INT 3
58440: PLUS
58441: PUSH
58442: LD_INT 6
58444: MOD
58445: ST_TO_ADDR
// end ;
58446: LD_VAR 0 2
58450: RET
// export function ReverseArray ( array ) ; var i ; begin
58451: LD_INT 0
58453: PPUSH
58454: PPUSH
// if not array then
58455: LD_VAR 0 1
58459: NOT
58460: IFFALSE 58464
// exit ;
58462: GO 58519
// result := [ ] ;
58464: LD_ADDR_VAR 0 2
58468: PUSH
58469: EMPTY
58470: ST_TO_ADDR
// for i := array downto 1 do
58471: LD_ADDR_VAR 0 3
58475: PUSH
58476: DOUBLE
58477: LD_VAR 0 1
58481: INC
58482: ST_TO_ADDR
58483: LD_INT 1
58485: PUSH
58486: FOR_DOWNTO
58487: IFFALSE 58517
// result := Join ( result , array [ i ] ) ;
58489: LD_ADDR_VAR 0 2
58493: PUSH
58494: LD_VAR 0 2
58498: PPUSH
58499: LD_VAR 0 1
58503: PUSH
58504: LD_VAR 0 3
58508: ARRAY
58509: PPUSH
58510: CALL 63144 0 2
58514: ST_TO_ADDR
58515: GO 58486
58517: POP
58518: POP
// end ;
58519: LD_VAR 0 2
58523: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58524: LD_INT 0
58526: PPUSH
58527: PPUSH
58528: PPUSH
58529: PPUSH
58530: PPUSH
58531: PPUSH
// if not unit or not hexes then
58532: LD_VAR 0 1
58536: NOT
58537: PUSH
58538: LD_VAR 0 2
58542: NOT
58543: OR
58544: IFFALSE 58548
// exit ;
58546: GO 58671
// dist := 9999 ;
58548: LD_ADDR_VAR 0 5
58552: PUSH
58553: LD_INT 9999
58555: ST_TO_ADDR
// for i = 1 to hexes do
58556: LD_ADDR_VAR 0 4
58560: PUSH
58561: DOUBLE
58562: LD_INT 1
58564: DEC
58565: ST_TO_ADDR
58566: LD_VAR 0 2
58570: PUSH
58571: FOR_TO
58572: IFFALSE 58659
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58574: LD_ADDR_VAR 0 6
58578: PUSH
58579: LD_VAR 0 1
58583: PPUSH
58584: LD_VAR 0 2
58588: PUSH
58589: LD_VAR 0 4
58593: ARRAY
58594: PUSH
58595: LD_INT 1
58597: ARRAY
58598: PPUSH
58599: LD_VAR 0 2
58603: PUSH
58604: LD_VAR 0 4
58608: ARRAY
58609: PUSH
58610: LD_INT 2
58612: ARRAY
58613: PPUSH
58614: CALL_OW 297
58618: ST_TO_ADDR
// if tdist < dist then
58619: LD_VAR 0 6
58623: PUSH
58624: LD_VAR 0 5
58628: LESS
58629: IFFALSE 58657
// begin hex := hexes [ i ] ;
58631: LD_ADDR_VAR 0 8
58635: PUSH
58636: LD_VAR 0 2
58640: PUSH
58641: LD_VAR 0 4
58645: ARRAY
58646: ST_TO_ADDR
// dist := tdist ;
58647: LD_ADDR_VAR 0 5
58651: PUSH
58652: LD_VAR 0 6
58656: ST_TO_ADDR
// end ; end ;
58657: GO 58571
58659: POP
58660: POP
// result := hex ;
58661: LD_ADDR_VAR 0 3
58665: PUSH
58666: LD_VAR 0 8
58670: ST_TO_ADDR
// end ;
58671: LD_VAR 0 3
58675: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58676: LD_INT 0
58678: PPUSH
58679: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58680: LD_VAR 0 1
58684: NOT
58685: PUSH
58686: LD_VAR 0 1
58690: PUSH
58691: LD_INT 21
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 23
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PPUSH
58715: CALL_OW 69
58719: IN
58720: NOT
58721: OR
58722: IFFALSE 58726
// exit ;
58724: GO 58773
// for i = 1 to 3 do
58726: LD_ADDR_VAR 0 3
58730: PUSH
58731: DOUBLE
58732: LD_INT 1
58734: DEC
58735: ST_TO_ADDR
58736: LD_INT 3
58738: PUSH
58739: FOR_TO
58740: IFFALSE 58771
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58742: LD_VAR 0 1
58746: PPUSH
58747: CALL_OW 250
58751: PPUSH
58752: LD_VAR 0 1
58756: PPUSH
58757: CALL_OW 251
58761: PPUSH
58762: LD_INT 1
58764: PPUSH
58765: CALL_OW 453
58769: GO 58739
58771: POP
58772: POP
// end ;
58773: LD_VAR 0 2
58777: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58778: LD_INT 0
58780: PPUSH
58781: PPUSH
58782: PPUSH
58783: PPUSH
58784: PPUSH
58785: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58786: LD_VAR 0 1
58790: NOT
58791: PUSH
58792: LD_VAR 0 2
58796: NOT
58797: OR
58798: PUSH
58799: LD_VAR 0 1
58803: PPUSH
58804: CALL_OW 314
58808: OR
58809: IFFALSE 58813
// exit ;
58811: GO 59254
// x := GetX ( enemy_unit ) ;
58813: LD_ADDR_VAR 0 7
58817: PUSH
58818: LD_VAR 0 2
58822: PPUSH
58823: CALL_OW 250
58827: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58828: LD_ADDR_VAR 0 8
58832: PUSH
58833: LD_VAR 0 2
58837: PPUSH
58838: CALL_OW 251
58842: ST_TO_ADDR
// if not x or not y then
58843: LD_VAR 0 7
58847: NOT
58848: PUSH
58849: LD_VAR 0 8
58853: NOT
58854: OR
58855: IFFALSE 58859
// exit ;
58857: GO 59254
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58859: LD_ADDR_VAR 0 6
58863: PUSH
58864: LD_VAR 0 7
58868: PPUSH
58869: LD_INT 0
58871: PPUSH
58872: LD_INT 4
58874: PPUSH
58875: CALL_OW 272
58879: PUSH
58880: LD_VAR 0 8
58884: PPUSH
58885: LD_INT 0
58887: PPUSH
58888: LD_INT 4
58890: PPUSH
58891: CALL_OW 273
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_VAR 0 7
58904: PPUSH
58905: LD_INT 1
58907: PPUSH
58908: LD_INT 4
58910: PPUSH
58911: CALL_OW 272
58915: PUSH
58916: LD_VAR 0 8
58920: PPUSH
58921: LD_INT 1
58923: PPUSH
58924: LD_INT 4
58926: PPUSH
58927: CALL_OW 273
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_VAR 0 7
58940: PPUSH
58941: LD_INT 2
58943: PPUSH
58944: LD_INT 4
58946: PPUSH
58947: CALL_OW 272
58951: PUSH
58952: LD_VAR 0 8
58956: PPUSH
58957: LD_INT 2
58959: PPUSH
58960: LD_INT 4
58962: PPUSH
58963: CALL_OW 273
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_VAR 0 7
58976: PPUSH
58977: LD_INT 3
58979: PPUSH
58980: LD_INT 4
58982: PPUSH
58983: CALL_OW 272
58987: PUSH
58988: LD_VAR 0 8
58992: PPUSH
58993: LD_INT 3
58995: PPUSH
58996: LD_INT 4
58998: PPUSH
58999: CALL_OW 273
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_VAR 0 7
59012: PPUSH
59013: LD_INT 4
59015: PPUSH
59016: LD_INT 4
59018: PPUSH
59019: CALL_OW 272
59023: PUSH
59024: LD_VAR 0 8
59028: PPUSH
59029: LD_INT 4
59031: PPUSH
59032: LD_INT 4
59034: PPUSH
59035: CALL_OW 273
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_VAR 0 7
59048: PPUSH
59049: LD_INT 5
59051: PPUSH
59052: LD_INT 4
59054: PPUSH
59055: CALL_OW 272
59059: PUSH
59060: LD_VAR 0 8
59064: PPUSH
59065: LD_INT 5
59067: PPUSH
59068: LD_INT 4
59070: PPUSH
59071: CALL_OW 273
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: ST_TO_ADDR
// for i = tmp downto 1 do
59088: LD_ADDR_VAR 0 4
59092: PUSH
59093: DOUBLE
59094: LD_VAR 0 6
59098: INC
59099: ST_TO_ADDR
59100: LD_INT 1
59102: PUSH
59103: FOR_DOWNTO
59104: IFFALSE 59205
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59106: LD_VAR 0 6
59110: PUSH
59111: LD_VAR 0 4
59115: ARRAY
59116: PUSH
59117: LD_INT 1
59119: ARRAY
59120: PPUSH
59121: LD_VAR 0 6
59125: PUSH
59126: LD_VAR 0 4
59130: ARRAY
59131: PUSH
59132: LD_INT 2
59134: ARRAY
59135: PPUSH
59136: CALL_OW 488
59140: NOT
59141: PUSH
59142: LD_VAR 0 6
59146: PUSH
59147: LD_VAR 0 4
59151: ARRAY
59152: PUSH
59153: LD_INT 1
59155: ARRAY
59156: PPUSH
59157: LD_VAR 0 6
59161: PUSH
59162: LD_VAR 0 4
59166: ARRAY
59167: PUSH
59168: LD_INT 2
59170: ARRAY
59171: PPUSH
59172: CALL_OW 428
59176: PUSH
59177: LD_INT 0
59179: NONEQUAL
59180: OR
59181: IFFALSE 59203
// tmp := Delete ( tmp , i ) ;
59183: LD_ADDR_VAR 0 6
59187: PUSH
59188: LD_VAR 0 6
59192: PPUSH
59193: LD_VAR 0 4
59197: PPUSH
59198: CALL_OW 3
59202: ST_TO_ADDR
59203: GO 59103
59205: POP
59206: POP
// j := GetClosestHex ( unit , tmp ) ;
59207: LD_ADDR_VAR 0 5
59211: PUSH
59212: LD_VAR 0 1
59216: PPUSH
59217: LD_VAR 0 6
59221: PPUSH
59222: CALL 58524 0 2
59226: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59227: LD_VAR 0 1
59231: PPUSH
59232: LD_VAR 0 5
59236: PUSH
59237: LD_INT 1
59239: ARRAY
59240: PPUSH
59241: LD_VAR 0 5
59245: PUSH
59246: LD_INT 2
59248: ARRAY
59249: PPUSH
59250: CALL_OW 111
// end ;
59254: LD_VAR 0 3
59258: RET
// export function PrepareApemanSoldier ( ) ; begin
59259: LD_INT 0
59261: PPUSH
// uc_nation := 0 ;
59262: LD_ADDR_OWVAR 21
59266: PUSH
59267: LD_INT 0
59269: ST_TO_ADDR
// hc_sex := sex_male ;
59270: LD_ADDR_OWVAR 27
59274: PUSH
59275: LD_INT 1
59277: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59278: LD_ADDR_OWVAR 28
59282: PUSH
59283: LD_INT 15
59285: ST_TO_ADDR
// hc_gallery :=  ;
59286: LD_ADDR_OWVAR 33
59290: PUSH
59291: LD_STRING 
59293: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59294: LD_ADDR_OWVAR 31
59298: PUSH
59299: LD_INT 0
59301: PPUSH
59302: LD_INT 3
59304: PPUSH
59305: CALL_OW 12
59309: PUSH
59310: LD_INT 0
59312: PPUSH
59313: LD_INT 3
59315: PPUSH
59316: CALL_OW 12
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: ST_TO_ADDR
// end ;
59333: LD_VAR 0 1
59337: RET
// export function PrepareApemanEngineer ( ) ; begin
59338: LD_INT 0
59340: PPUSH
// uc_nation := 0 ;
59341: LD_ADDR_OWVAR 21
59345: PUSH
59346: LD_INT 0
59348: ST_TO_ADDR
// hc_sex := sex_male ;
59349: LD_ADDR_OWVAR 27
59353: PUSH
59354: LD_INT 1
59356: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59357: LD_ADDR_OWVAR 28
59361: PUSH
59362: LD_INT 16
59364: ST_TO_ADDR
// hc_gallery :=  ;
59365: LD_ADDR_OWVAR 33
59369: PUSH
59370: LD_STRING 
59372: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59373: LD_ADDR_OWVAR 31
59377: PUSH
59378: LD_INT 0
59380: PPUSH
59381: LD_INT 3
59383: PPUSH
59384: CALL_OW 12
59388: PUSH
59389: LD_INT 0
59391: PPUSH
59392: LD_INT 3
59394: PPUSH
59395: CALL_OW 12
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: ST_TO_ADDR
// end ;
59412: LD_VAR 0 1
59416: RET
// export function PrepareApeman ( agressivity ) ; begin
59417: LD_INT 0
59419: PPUSH
// uc_side := 0 ;
59420: LD_ADDR_OWVAR 20
59424: PUSH
59425: LD_INT 0
59427: ST_TO_ADDR
// uc_nation := 0 ;
59428: LD_ADDR_OWVAR 21
59432: PUSH
59433: LD_INT 0
59435: ST_TO_ADDR
// hc_sex := sex_male ;
59436: LD_ADDR_OWVAR 27
59440: PUSH
59441: LD_INT 1
59443: ST_TO_ADDR
// hc_class := class_apeman ;
59444: LD_ADDR_OWVAR 28
59448: PUSH
59449: LD_INT 12
59451: ST_TO_ADDR
// hc_gallery :=  ;
59452: LD_ADDR_OWVAR 33
59456: PUSH
59457: LD_STRING 
59459: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59460: LD_ADDR_OWVAR 35
59464: PUSH
59465: LD_VAR 0 1
59469: NEG
59470: PPUSH
59471: LD_VAR 0 1
59475: PPUSH
59476: CALL_OW 12
59480: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59481: LD_ADDR_OWVAR 31
59485: PUSH
59486: LD_INT 0
59488: PPUSH
59489: LD_INT 3
59491: PPUSH
59492: CALL_OW 12
59496: PUSH
59497: LD_INT 0
59499: PPUSH
59500: LD_INT 3
59502: PPUSH
59503: CALL_OW 12
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: ST_TO_ADDR
// end ;
59520: LD_VAR 0 2
59524: RET
// export function PrepareTiger ( agressivity ) ; begin
59525: LD_INT 0
59527: PPUSH
// uc_side := 0 ;
59528: LD_ADDR_OWVAR 20
59532: PUSH
59533: LD_INT 0
59535: ST_TO_ADDR
// uc_nation := 0 ;
59536: LD_ADDR_OWVAR 21
59540: PUSH
59541: LD_INT 0
59543: ST_TO_ADDR
// hc_class := class_tiger ;
59544: LD_ADDR_OWVAR 28
59548: PUSH
59549: LD_INT 14
59551: ST_TO_ADDR
// hc_gallery :=  ;
59552: LD_ADDR_OWVAR 33
59556: PUSH
59557: LD_STRING 
59559: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59560: LD_ADDR_OWVAR 35
59564: PUSH
59565: LD_VAR 0 1
59569: NEG
59570: PPUSH
59571: LD_VAR 0 1
59575: PPUSH
59576: CALL_OW 12
59580: ST_TO_ADDR
// end ;
59581: LD_VAR 0 2
59585: RET
// export function PrepareEnchidna ( ) ; begin
59586: LD_INT 0
59588: PPUSH
// uc_side := 0 ;
59589: LD_ADDR_OWVAR 20
59593: PUSH
59594: LD_INT 0
59596: ST_TO_ADDR
// uc_nation := 0 ;
59597: LD_ADDR_OWVAR 21
59601: PUSH
59602: LD_INT 0
59604: ST_TO_ADDR
// hc_class := class_baggie ;
59605: LD_ADDR_OWVAR 28
59609: PUSH
59610: LD_INT 13
59612: ST_TO_ADDR
// hc_gallery :=  ;
59613: LD_ADDR_OWVAR 33
59617: PUSH
59618: LD_STRING 
59620: ST_TO_ADDR
// end ;
59621: LD_VAR 0 1
59625: RET
// export function PrepareFrog ( ) ; begin
59626: LD_INT 0
59628: PPUSH
// uc_side := 0 ;
59629: LD_ADDR_OWVAR 20
59633: PUSH
59634: LD_INT 0
59636: ST_TO_ADDR
// uc_nation := 0 ;
59637: LD_ADDR_OWVAR 21
59641: PUSH
59642: LD_INT 0
59644: ST_TO_ADDR
// hc_class := class_frog ;
59645: LD_ADDR_OWVAR 28
59649: PUSH
59650: LD_INT 19
59652: ST_TO_ADDR
// hc_gallery :=  ;
59653: LD_ADDR_OWVAR 33
59657: PUSH
59658: LD_STRING 
59660: ST_TO_ADDR
// end ;
59661: LD_VAR 0 1
59665: RET
// export function PrepareFish ( ) ; begin
59666: LD_INT 0
59668: PPUSH
// uc_side := 0 ;
59669: LD_ADDR_OWVAR 20
59673: PUSH
59674: LD_INT 0
59676: ST_TO_ADDR
// uc_nation := 0 ;
59677: LD_ADDR_OWVAR 21
59681: PUSH
59682: LD_INT 0
59684: ST_TO_ADDR
// hc_class := class_fish ;
59685: LD_ADDR_OWVAR 28
59689: PUSH
59690: LD_INT 20
59692: ST_TO_ADDR
// hc_gallery :=  ;
59693: LD_ADDR_OWVAR 33
59697: PUSH
59698: LD_STRING 
59700: ST_TO_ADDR
// end ;
59701: LD_VAR 0 1
59705: RET
// export function PrepareBird ( ) ; begin
59706: LD_INT 0
59708: PPUSH
// uc_side := 0 ;
59709: LD_ADDR_OWVAR 20
59713: PUSH
59714: LD_INT 0
59716: ST_TO_ADDR
// uc_nation := 0 ;
59717: LD_ADDR_OWVAR 21
59721: PUSH
59722: LD_INT 0
59724: ST_TO_ADDR
// hc_class := class_phororhacos ;
59725: LD_ADDR_OWVAR 28
59729: PUSH
59730: LD_INT 18
59732: ST_TO_ADDR
// hc_gallery :=  ;
59733: LD_ADDR_OWVAR 33
59737: PUSH
59738: LD_STRING 
59740: ST_TO_ADDR
// end ;
59741: LD_VAR 0 1
59745: RET
// export function PrepareHorse ( ) ; begin
59746: LD_INT 0
59748: PPUSH
// uc_side := 0 ;
59749: LD_ADDR_OWVAR 20
59753: PUSH
59754: LD_INT 0
59756: ST_TO_ADDR
// uc_nation := 0 ;
59757: LD_ADDR_OWVAR 21
59761: PUSH
59762: LD_INT 0
59764: ST_TO_ADDR
// hc_class := class_horse ;
59765: LD_ADDR_OWVAR 28
59769: PUSH
59770: LD_INT 21
59772: ST_TO_ADDR
// hc_gallery :=  ;
59773: LD_ADDR_OWVAR 33
59777: PUSH
59778: LD_STRING 
59780: ST_TO_ADDR
// end ;
59781: LD_VAR 0 1
59785: RET
// export function PrepareMastodont ( ) ; begin
59786: LD_INT 0
59788: PPUSH
// uc_side := 0 ;
59789: LD_ADDR_OWVAR 20
59793: PUSH
59794: LD_INT 0
59796: ST_TO_ADDR
// uc_nation := 0 ;
59797: LD_ADDR_OWVAR 21
59801: PUSH
59802: LD_INT 0
59804: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59805: LD_ADDR_OWVAR 37
59809: PUSH
59810: LD_INT 31
59812: ST_TO_ADDR
// vc_control := control_rider ;
59813: LD_ADDR_OWVAR 38
59817: PUSH
59818: LD_INT 4
59820: ST_TO_ADDR
// end ;
59821: LD_VAR 0 1
59825: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59826: LD_INT 0
59828: PPUSH
59829: PPUSH
59830: PPUSH
// uc_side = 0 ;
59831: LD_ADDR_OWVAR 20
59835: PUSH
59836: LD_INT 0
59838: ST_TO_ADDR
// uc_nation = 0 ;
59839: LD_ADDR_OWVAR 21
59843: PUSH
59844: LD_INT 0
59846: ST_TO_ADDR
// InitHc_All ( ) ;
59847: CALL_OW 584
// InitVc ;
59851: CALL_OW 20
// if mastodonts then
59855: LD_VAR 0 6
59859: IFFALSE 59926
// for i = 1 to mastodonts do
59861: LD_ADDR_VAR 0 11
59865: PUSH
59866: DOUBLE
59867: LD_INT 1
59869: DEC
59870: ST_TO_ADDR
59871: LD_VAR 0 6
59875: PUSH
59876: FOR_TO
59877: IFFALSE 59924
// begin vc_chassis := 31 ;
59879: LD_ADDR_OWVAR 37
59883: PUSH
59884: LD_INT 31
59886: ST_TO_ADDR
// vc_control := control_rider ;
59887: LD_ADDR_OWVAR 38
59891: PUSH
59892: LD_INT 4
59894: ST_TO_ADDR
// animal := CreateVehicle ;
59895: LD_ADDR_VAR 0 12
59899: PUSH
59900: CALL_OW 45
59904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59905: LD_VAR 0 12
59909: PPUSH
59910: LD_VAR 0 8
59914: PPUSH
59915: LD_INT 0
59917: PPUSH
59918: CALL 62061 0 3
// end ;
59922: GO 59876
59924: POP
59925: POP
// if horses then
59926: LD_VAR 0 5
59930: IFFALSE 59997
// for i = 1 to horses do
59932: LD_ADDR_VAR 0 11
59936: PUSH
59937: DOUBLE
59938: LD_INT 1
59940: DEC
59941: ST_TO_ADDR
59942: LD_VAR 0 5
59946: PUSH
59947: FOR_TO
59948: IFFALSE 59995
// begin hc_class := 21 ;
59950: LD_ADDR_OWVAR 28
59954: PUSH
59955: LD_INT 21
59957: ST_TO_ADDR
// hc_gallery :=  ;
59958: LD_ADDR_OWVAR 33
59962: PUSH
59963: LD_STRING 
59965: ST_TO_ADDR
// animal := CreateHuman ;
59966: LD_ADDR_VAR 0 12
59970: PUSH
59971: CALL_OW 44
59975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59976: LD_VAR 0 12
59980: PPUSH
59981: LD_VAR 0 8
59985: PPUSH
59986: LD_INT 0
59988: PPUSH
59989: CALL 62061 0 3
// end ;
59993: GO 59947
59995: POP
59996: POP
// if birds then
59997: LD_VAR 0 1
60001: IFFALSE 60068
// for i = 1 to birds do
60003: LD_ADDR_VAR 0 11
60007: PUSH
60008: DOUBLE
60009: LD_INT 1
60011: DEC
60012: ST_TO_ADDR
60013: LD_VAR 0 1
60017: PUSH
60018: FOR_TO
60019: IFFALSE 60066
// begin hc_class = 18 ;
60021: LD_ADDR_OWVAR 28
60025: PUSH
60026: LD_INT 18
60028: ST_TO_ADDR
// hc_gallery =  ;
60029: LD_ADDR_OWVAR 33
60033: PUSH
60034: LD_STRING 
60036: ST_TO_ADDR
// animal := CreateHuman ;
60037: LD_ADDR_VAR 0 12
60041: PUSH
60042: CALL_OW 44
60046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60047: LD_VAR 0 12
60051: PPUSH
60052: LD_VAR 0 8
60056: PPUSH
60057: LD_INT 0
60059: PPUSH
60060: CALL 62061 0 3
// end ;
60064: GO 60018
60066: POP
60067: POP
// if tigers then
60068: LD_VAR 0 2
60072: IFFALSE 60156
// for i = 1 to tigers do
60074: LD_ADDR_VAR 0 11
60078: PUSH
60079: DOUBLE
60080: LD_INT 1
60082: DEC
60083: ST_TO_ADDR
60084: LD_VAR 0 2
60088: PUSH
60089: FOR_TO
60090: IFFALSE 60154
// begin hc_class = class_tiger ;
60092: LD_ADDR_OWVAR 28
60096: PUSH
60097: LD_INT 14
60099: ST_TO_ADDR
// hc_gallery =  ;
60100: LD_ADDR_OWVAR 33
60104: PUSH
60105: LD_STRING 
60107: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60108: LD_ADDR_OWVAR 35
60112: PUSH
60113: LD_INT 7
60115: NEG
60116: PPUSH
60117: LD_INT 7
60119: PPUSH
60120: CALL_OW 12
60124: ST_TO_ADDR
// animal := CreateHuman ;
60125: LD_ADDR_VAR 0 12
60129: PUSH
60130: CALL_OW 44
60134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60135: LD_VAR 0 12
60139: PPUSH
60140: LD_VAR 0 8
60144: PPUSH
60145: LD_INT 0
60147: PPUSH
60148: CALL 62061 0 3
// end ;
60152: GO 60089
60154: POP
60155: POP
// if apemans then
60156: LD_VAR 0 3
60160: IFFALSE 60283
// for i = 1 to apemans do
60162: LD_ADDR_VAR 0 11
60166: PUSH
60167: DOUBLE
60168: LD_INT 1
60170: DEC
60171: ST_TO_ADDR
60172: LD_VAR 0 3
60176: PUSH
60177: FOR_TO
60178: IFFALSE 60281
// begin hc_class = class_apeman ;
60180: LD_ADDR_OWVAR 28
60184: PUSH
60185: LD_INT 12
60187: ST_TO_ADDR
// hc_gallery =  ;
60188: LD_ADDR_OWVAR 33
60192: PUSH
60193: LD_STRING 
60195: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60196: LD_ADDR_OWVAR 35
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PPUSH
60205: LD_INT 2
60207: PPUSH
60208: CALL_OW 12
60212: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60213: LD_ADDR_OWVAR 31
60217: PUSH
60218: LD_INT 1
60220: PPUSH
60221: LD_INT 3
60223: PPUSH
60224: CALL_OW 12
60228: PUSH
60229: LD_INT 1
60231: PPUSH
60232: LD_INT 3
60234: PPUSH
60235: CALL_OW 12
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: ST_TO_ADDR
// animal := CreateHuman ;
60252: LD_ADDR_VAR 0 12
60256: PUSH
60257: CALL_OW 44
60261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60262: LD_VAR 0 12
60266: PPUSH
60267: LD_VAR 0 8
60271: PPUSH
60272: LD_INT 0
60274: PPUSH
60275: CALL 62061 0 3
// end ;
60279: GO 60177
60281: POP
60282: POP
// if enchidnas then
60283: LD_VAR 0 4
60287: IFFALSE 60354
// for i = 1 to enchidnas do
60289: LD_ADDR_VAR 0 11
60293: PUSH
60294: DOUBLE
60295: LD_INT 1
60297: DEC
60298: ST_TO_ADDR
60299: LD_VAR 0 4
60303: PUSH
60304: FOR_TO
60305: IFFALSE 60352
// begin hc_class = 13 ;
60307: LD_ADDR_OWVAR 28
60311: PUSH
60312: LD_INT 13
60314: ST_TO_ADDR
// hc_gallery =  ;
60315: LD_ADDR_OWVAR 33
60319: PUSH
60320: LD_STRING 
60322: ST_TO_ADDR
// animal := CreateHuman ;
60323: LD_ADDR_VAR 0 12
60327: PUSH
60328: CALL_OW 44
60332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60333: LD_VAR 0 12
60337: PPUSH
60338: LD_VAR 0 8
60342: PPUSH
60343: LD_INT 0
60345: PPUSH
60346: CALL 62061 0 3
// end ;
60350: GO 60304
60352: POP
60353: POP
// if fishes then
60354: LD_VAR 0 7
60358: IFFALSE 60425
// for i = 1 to fishes do
60360: LD_ADDR_VAR 0 11
60364: PUSH
60365: DOUBLE
60366: LD_INT 1
60368: DEC
60369: ST_TO_ADDR
60370: LD_VAR 0 7
60374: PUSH
60375: FOR_TO
60376: IFFALSE 60423
// begin hc_class = 20 ;
60378: LD_ADDR_OWVAR 28
60382: PUSH
60383: LD_INT 20
60385: ST_TO_ADDR
// hc_gallery =  ;
60386: LD_ADDR_OWVAR 33
60390: PUSH
60391: LD_STRING 
60393: ST_TO_ADDR
// animal := CreateHuman ;
60394: LD_ADDR_VAR 0 12
60398: PUSH
60399: CALL_OW 44
60403: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60404: LD_VAR 0 12
60408: PPUSH
60409: LD_VAR 0 9
60413: PPUSH
60414: LD_INT 0
60416: PPUSH
60417: CALL 62061 0 3
// end ;
60421: GO 60375
60423: POP
60424: POP
// end ;
60425: LD_VAR 0 10
60429: RET
// export function WantHeal ( sci , unit ) ; begin
60430: LD_INT 0
60432: PPUSH
// if GetTaskList ( sci ) > 0 then
60433: LD_VAR 0 1
60437: PPUSH
60438: CALL_OW 437
60442: PUSH
60443: LD_INT 0
60445: GREATER
60446: IFFALSE 60516
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60448: LD_VAR 0 1
60452: PPUSH
60453: CALL_OW 437
60457: PUSH
60458: LD_INT 1
60460: ARRAY
60461: PUSH
60462: LD_INT 1
60464: ARRAY
60465: PUSH
60466: LD_STRING l
60468: EQUAL
60469: PUSH
60470: LD_VAR 0 1
60474: PPUSH
60475: CALL_OW 437
60479: PUSH
60480: LD_INT 1
60482: ARRAY
60483: PUSH
60484: LD_INT 4
60486: ARRAY
60487: PUSH
60488: LD_VAR 0 2
60492: EQUAL
60493: AND
60494: IFFALSE 60506
// result := true else
60496: LD_ADDR_VAR 0 3
60500: PUSH
60501: LD_INT 1
60503: ST_TO_ADDR
60504: GO 60514
// result := false ;
60506: LD_ADDR_VAR 0 3
60510: PUSH
60511: LD_INT 0
60513: ST_TO_ADDR
// end else
60514: GO 60524
// result := false ;
60516: LD_ADDR_VAR 0 3
60520: PUSH
60521: LD_INT 0
60523: ST_TO_ADDR
// end ;
60524: LD_VAR 0 3
60528: RET
// export function HealTarget ( sci ) ; begin
60529: LD_INT 0
60531: PPUSH
// if not sci then
60532: LD_VAR 0 1
60536: NOT
60537: IFFALSE 60541
// exit ;
60539: GO 60606
// result := 0 ;
60541: LD_ADDR_VAR 0 2
60545: PUSH
60546: LD_INT 0
60548: ST_TO_ADDR
// if GetTaskList ( sci ) then
60549: LD_VAR 0 1
60553: PPUSH
60554: CALL_OW 437
60558: IFFALSE 60606
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60560: LD_VAR 0 1
60564: PPUSH
60565: CALL_OW 437
60569: PUSH
60570: LD_INT 1
60572: ARRAY
60573: PUSH
60574: LD_INT 1
60576: ARRAY
60577: PUSH
60578: LD_STRING l
60580: EQUAL
60581: IFFALSE 60606
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60583: LD_ADDR_VAR 0 2
60587: PUSH
60588: LD_VAR 0 1
60592: PPUSH
60593: CALL_OW 437
60597: PUSH
60598: LD_INT 1
60600: ARRAY
60601: PUSH
60602: LD_INT 4
60604: ARRAY
60605: ST_TO_ADDR
// end ;
60606: LD_VAR 0 2
60610: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60611: LD_INT 0
60613: PPUSH
60614: PPUSH
60615: PPUSH
60616: PPUSH
// if not base_units then
60617: LD_VAR 0 1
60621: NOT
60622: IFFALSE 60626
// exit ;
60624: GO 60713
// result := false ;
60626: LD_ADDR_VAR 0 2
60630: PUSH
60631: LD_INT 0
60633: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60634: LD_ADDR_VAR 0 5
60638: PUSH
60639: LD_VAR 0 1
60643: PPUSH
60644: LD_INT 21
60646: PUSH
60647: LD_INT 3
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PPUSH
60654: CALL_OW 72
60658: ST_TO_ADDR
// if not tmp then
60659: LD_VAR 0 5
60663: NOT
60664: IFFALSE 60668
// exit ;
60666: GO 60713
// for i in tmp do
60668: LD_ADDR_VAR 0 3
60672: PUSH
60673: LD_VAR 0 5
60677: PUSH
60678: FOR_IN
60679: IFFALSE 60711
// begin result := EnemyInRange ( i , 22 ) ;
60681: LD_ADDR_VAR 0 2
60685: PUSH
60686: LD_VAR 0 3
60690: PPUSH
60691: LD_INT 22
60693: PPUSH
60694: CALL 58326 0 2
60698: ST_TO_ADDR
// if result then
60699: LD_VAR 0 2
60703: IFFALSE 60709
// exit ;
60705: POP
60706: POP
60707: GO 60713
// end ;
60709: GO 60678
60711: POP
60712: POP
// end ;
60713: LD_VAR 0 2
60717: RET
// export function FilterByTag ( units , tag ) ; begin
60718: LD_INT 0
60720: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60721: LD_ADDR_VAR 0 3
60725: PUSH
60726: LD_VAR 0 1
60730: PPUSH
60731: LD_INT 120
60733: PUSH
60734: LD_VAR 0 2
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PPUSH
60743: CALL_OW 72
60747: ST_TO_ADDR
// end ;
60748: LD_VAR 0 3
60752: RET
// export function IsDriver ( un ) ; begin
60753: LD_INT 0
60755: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60756: LD_ADDR_VAR 0 2
60760: PUSH
60761: LD_VAR 0 1
60765: PUSH
60766: LD_INT 55
60768: PUSH
60769: EMPTY
60770: LIST
60771: PPUSH
60772: CALL_OW 69
60776: IN
60777: ST_TO_ADDR
// end ;
60778: LD_VAR 0 2
60782: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60783: LD_INT 0
60785: PPUSH
60786: PPUSH
// list := [ ] ;
60787: LD_ADDR_VAR 0 5
60791: PUSH
60792: EMPTY
60793: ST_TO_ADDR
// case d of 0 :
60794: LD_VAR 0 3
60798: PUSH
60799: LD_INT 0
60801: DOUBLE
60802: EQUAL
60803: IFTRUE 60807
60805: GO 60940
60807: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60808: LD_ADDR_VAR 0 5
60812: PUSH
60813: LD_VAR 0 1
60817: PUSH
60818: LD_INT 4
60820: MINUS
60821: PUSH
60822: LD_VAR 0 2
60826: PUSH
60827: LD_INT 4
60829: MINUS
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: LIST
60838: PUSH
60839: LD_VAR 0 1
60843: PUSH
60844: LD_INT 3
60846: MINUS
60847: PUSH
60848: LD_VAR 0 2
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: LIST
60860: PUSH
60861: LD_VAR 0 1
60865: PUSH
60866: LD_INT 4
60868: PLUS
60869: PUSH
60870: LD_VAR 0 2
60874: PUSH
60875: LD_INT 4
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: LIST
60882: PUSH
60883: LD_VAR 0 1
60887: PUSH
60888: LD_INT 3
60890: PLUS
60891: PUSH
60892: LD_VAR 0 2
60896: PUSH
60897: LD_INT 3
60899: PLUS
60900: PUSH
60901: LD_INT 5
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: LIST
60908: PUSH
60909: LD_VAR 0 1
60913: PUSH
60914: LD_VAR 0 2
60918: PUSH
60919: LD_INT 4
60921: PLUS
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: LIST
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: ST_TO_ADDR
// end ; 1 :
60938: GO 61638
60940: LD_INT 1
60942: DOUBLE
60943: EQUAL
60944: IFTRUE 60948
60946: GO 61081
60948: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60949: LD_ADDR_VAR 0 5
60953: PUSH
60954: LD_VAR 0 1
60958: PUSH
60959: LD_VAR 0 2
60963: PUSH
60964: LD_INT 4
60966: MINUS
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: LIST
60975: PUSH
60976: LD_VAR 0 1
60980: PUSH
60981: LD_INT 3
60983: MINUS
60984: PUSH
60985: LD_VAR 0 2
60989: PUSH
60990: LD_INT 3
60992: MINUS
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: PUSH
61002: LD_VAR 0 1
61006: PUSH
61007: LD_INT 4
61009: MINUS
61010: PUSH
61011: LD_VAR 0 2
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: LIST
61023: PUSH
61024: LD_VAR 0 1
61028: PUSH
61029: LD_VAR 0 2
61033: PUSH
61034: LD_INT 3
61036: PLUS
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: LIST
61045: PUSH
61046: LD_VAR 0 1
61050: PUSH
61051: LD_INT 4
61053: PLUS
61054: PUSH
61055: LD_VAR 0 2
61059: PUSH
61060: LD_INT 4
61062: PLUS
61063: PUSH
61064: LD_INT 5
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: ST_TO_ADDR
// end ; 2 :
61079: GO 61638
61081: LD_INT 2
61083: DOUBLE
61084: EQUAL
61085: IFTRUE 61089
61087: GO 61218
61089: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61090: LD_ADDR_VAR 0 5
61094: PUSH
61095: LD_VAR 0 1
61099: PUSH
61100: LD_VAR 0 2
61104: PUSH
61105: LD_INT 3
61107: MINUS
61108: PUSH
61109: LD_INT 3
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: PUSH
61117: LD_VAR 0 1
61121: PUSH
61122: LD_INT 4
61124: PLUS
61125: PUSH
61126: LD_VAR 0 2
61130: PUSH
61131: LD_INT 4
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: LIST
61138: PUSH
61139: LD_VAR 0 1
61143: PUSH
61144: LD_VAR 0 2
61148: PUSH
61149: LD_INT 4
61151: PLUS
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: LIST
61160: PUSH
61161: LD_VAR 0 1
61165: PUSH
61166: LD_INT 3
61168: MINUS
61169: PUSH
61170: LD_VAR 0 2
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: PUSH
61183: LD_VAR 0 1
61187: PUSH
61188: LD_INT 4
61190: MINUS
61191: PUSH
61192: LD_VAR 0 2
61196: PUSH
61197: LD_INT 4
61199: MINUS
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: LIST
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: ST_TO_ADDR
// end ; 3 :
61216: GO 61638
61218: LD_INT 3
61220: DOUBLE
61221: EQUAL
61222: IFTRUE 61226
61224: GO 61359
61226: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61227: LD_ADDR_VAR 0 5
61231: PUSH
61232: LD_VAR 0 1
61236: PUSH
61237: LD_INT 3
61239: PLUS
61240: PUSH
61241: LD_VAR 0 2
61245: PUSH
61246: LD_INT 4
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: PUSH
61254: LD_VAR 0 1
61258: PUSH
61259: LD_INT 4
61261: PLUS
61262: PUSH
61263: LD_VAR 0 2
61267: PUSH
61268: LD_INT 4
61270: PLUS
61271: PUSH
61272: LD_INT 5
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: PUSH
61280: LD_VAR 0 1
61284: PUSH
61285: LD_INT 4
61287: MINUS
61288: PUSH
61289: LD_VAR 0 2
61293: PUSH
61294: LD_INT 1
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: LIST
61301: PUSH
61302: LD_VAR 0 1
61306: PUSH
61307: LD_VAR 0 2
61311: PUSH
61312: LD_INT 4
61314: MINUS
61315: PUSH
61316: LD_INT 3
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: PUSH
61324: LD_VAR 0 1
61328: PUSH
61329: LD_INT 3
61331: MINUS
61332: PUSH
61333: LD_VAR 0 2
61337: PUSH
61338: LD_INT 3
61340: MINUS
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: ST_TO_ADDR
// end ; 4 :
61357: GO 61638
61359: LD_INT 4
61361: DOUBLE
61362: EQUAL
61363: IFTRUE 61367
61365: GO 61500
61367: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61368: LD_ADDR_VAR 0 5
61372: PUSH
61373: LD_VAR 0 1
61377: PUSH
61378: LD_VAR 0 2
61382: PUSH
61383: LD_INT 4
61385: PLUS
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: LIST
61394: PUSH
61395: LD_VAR 0 1
61399: PUSH
61400: LD_INT 3
61402: PLUS
61403: PUSH
61404: LD_VAR 0 2
61408: PUSH
61409: LD_INT 3
61411: PLUS
61412: PUSH
61413: LD_INT 5
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: PUSH
61421: LD_VAR 0 1
61425: PUSH
61426: LD_INT 4
61428: PLUS
61429: PUSH
61430: LD_VAR 0 2
61434: PUSH
61435: LD_INT 4
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: LIST
61442: PUSH
61443: LD_VAR 0 1
61447: PUSH
61448: LD_VAR 0 2
61452: PUSH
61453: LD_INT 3
61455: MINUS
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: LIST
61464: PUSH
61465: LD_VAR 0 1
61469: PUSH
61470: LD_INT 4
61472: MINUS
61473: PUSH
61474: LD_VAR 0 2
61478: PUSH
61479: LD_INT 4
61481: MINUS
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: LIST
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: ST_TO_ADDR
// end ; 5 :
61498: GO 61638
61500: LD_INT 5
61502: DOUBLE
61503: EQUAL
61504: IFTRUE 61508
61506: GO 61637
61508: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61509: LD_ADDR_VAR 0 5
61513: PUSH
61514: LD_VAR 0 1
61518: PUSH
61519: LD_INT 4
61521: MINUS
61522: PUSH
61523: LD_VAR 0 2
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: PUSH
61536: LD_VAR 0 1
61540: PUSH
61541: LD_VAR 0 2
61545: PUSH
61546: LD_INT 4
61548: MINUS
61549: PUSH
61550: LD_INT 3
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: PUSH
61558: LD_VAR 0 1
61562: PUSH
61563: LD_INT 4
61565: PLUS
61566: PUSH
61567: LD_VAR 0 2
61571: PUSH
61572: LD_INT 4
61574: PLUS
61575: PUSH
61576: LD_INT 5
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: LIST
61583: PUSH
61584: LD_VAR 0 1
61588: PUSH
61589: LD_INT 3
61591: PLUS
61592: PUSH
61593: LD_VAR 0 2
61597: PUSH
61598: LD_INT 4
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: LIST
61605: PUSH
61606: LD_VAR 0 1
61610: PUSH
61611: LD_VAR 0 2
61615: PUSH
61616: LD_INT 3
61618: PLUS
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: ST_TO_ADDR
// end ; end ;
61635: GO 61638
61637: POP
// result := list ;
61638: LD_ADDR_VAR 0 4
61642: PUSH
61643: LD_VAR 0 5
61647: ST_TO_ADDR
// end ;
61648: LD_VAR 0 4
61652: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61653: LD_INT 0
61655: PPUSH
61656: PPUSH
61657: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61658: LD_VAR 0 1
61662: NOT
61663: PUSH
61664: LD_VAR 0 2
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: LD_INT 2
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: LD_INT 4
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: IN
61687: NOT
61688: OR
61689: IFFALSE 61693
// exit ;
61691: GO 61785
// tmp := [ ] ;
61693: LD_ADDR_VAR 0 5
61697: PUSH
61698: EMPTY
61699: ST_TO_ADDR
// for i in units do
61700: LD_ADDR_VAR 0 4
61704: PUSH
61705: LD_VAR 0 1
61709: PUSH
61710: FOR_IN
61711: IFFALSE 61754
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61713: LD_ADDR_VAR 0 5
61717: PUSH
61718: LD_VAR 0 5
61722: PPUSH
61723: LD_VAR 0 5
61727: PUSH
61728: LD_INT 1
61730: PLUS
61731: PPUSH
61732: LD_VAR 0 4
61736: PPUSH
61737: LD_VAR 0 2
61741: PPUSH
61742: CALL_OW 259
61746: PPUSH
61747: CALL_OW 2
61751: ST_TO_ADDR
61752: GO 61710
61754: POP
61755: POP
// if not tmp then
61756: LD_VAR 0 5
61760: NOT
61761: IFFALSE 61765
// exit ;
61763: GO 61785
// result := SortListByListDesc ( units , tmp ) ;
61765: LD_ADDR_VAR 0 3
61769: PUSH
61770: LD_VAR 0 1
61774: PPUSH
61775: LD_VAR 0 5
61779: PPUSH
61780: CALL_OW 77
61784: ST_TO_ADDR
// end ;
61785: LD_VAR 0 3
61789: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61790: LD_INT 0
61792: PPUSH
61793: PPUSH
61794: PPUSH
// result := false ;
61795: LD_ADDR_VAR 0 3
61799: PUSH
61800: LD_INT 0
61802: ST_TO_ADDR
// x := GetX ( building ) ;
61803: LD_ADDR_VAR 0 4
61807: PUSH
61808: LD_VAR 0 2
61812: PPUSH
61813: CALL_OW 250
61817: ST_TO_ADDR
// y := GetY ( building ) ;
61818: LD_ADDR_VAR 0 5
61822: PUSH
61823: LD_VAR 0 2
61827: PPUSH
61828: CALL_OW 251
61832: ST_TO_ADDR
// if not building or not x or not y then
61833: LD_VAR 0 2
61837: NOT
61838: PUSH
61839: LD_VAR 0 4
61843: NOT
61844: OR
61845: PUSH
61846: LD_VAR 0 5
61850: NOT
61851: OR
61852: IFFALSE 61856
// exit ;
61854: GO 61948
// if GetTaskList ( unit ) then
61856: LD_VAR 0 1
61860: PPUSH
61861: CALL_OW 437
61865: IFFALSE 61948
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61867: LD_STRING e
61869: PUSH
61870: LD_VAR 0 1
61874: PPUSH
61875: CALL_OW 437
61879: PUSH
61880: LD_INT 1
61882: ARRAY
61883: PUSH
61884: LD_INT 1
61886: ARRAY
61887: EQUAL
61888: PUSH
61889: LD_VAR 0 4
61893: PUSH
61894: LD_VAR 0 1
61898: PPUSH
61899: CALL_OW 437
61903: PUSH
61904: LD_INT 1
61906: ARRAY
61907: PUSH
61908: LD_INT 2
61910: ARRAY
61911: EQUAL
61912: AND
61913: PUSH
61914: LD_VAR 0 5
61918: PUSH
61919: LD_VAR 0 1
61923: PPUSH
61924: CALL_OW 437
61928: PUSH
61929: LD_INT 1
61931: ARRAY
61932: PUSH
61933: LD_INT 3
61935: ARRAY
61936: EQUAL
61937: AND
61938: IFFALSE 61948
// result := true end ;
61940: LD_ADDR_VAR 0 3
61944: PUSH
61945: LD_INT 1
61947: ST_TO_ADDR
// end ;
61948: LD_VAR 0 3
61952: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61953: LD_INT 0
61955: PPUSH
// result := false ;
61956: LD_ADDR_VAR 0 4
61960: PUSH
61961: LD_INT 0
61963: ST_TO_ADDR
// if GetTaskList ( unit ) then
61964: LD_VAR 0 1
61968: PPUSH
61969: CALL_OW 437
61973: IFFALSE 62056
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61975: LD_STRING M
61977: PUSH
61978: LD_VAR 0 1
61982: PPUSH
61983: CALL_OW 437
61987: PUSH
61988: LD_INT 1
61990: ARRAY
61991: PUSH
61992: LD_INT 1
61994: ARRAY
61995: EQUAL
61996: PUSH
61997: LD_VAR 0 2
62001: PUSH
62002: LD_VAR 0 1
62006: PPUSH
62007: CALL_OW 437
62011: PUSH
62012: LD_INT 1
62014: ARRAY
62015: PUSH
62016: LD_INT 2
62018: ARRAY
62019: EQUAL
62020: AND
62021: PUSH
62022: LD_VAR 0 3
62026: PUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: CALL_OW 437
62036: PUSH
62037: LD_INT 1
62039: ARRAY
62040: PUSH
62041: LD_INT 3
62043: ARRAY
62044: EQUAL
62045: AND
62046: IFFALSE 62056
// result := true ;
62048: LD_ADDR_VAR 0 4
62052: PUSH
62053: LD_INT 1
62055: ST_TO_ADDR
// end ; end ;
62056: LD_VAR 0 4
62060: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62061: LD_INT 0
62063: PPUSH
62064: PPUSH
62065: PPUSH
62066: PPUSH
// if not unit or not area then
62067: LD_VAR 0 1
62071: NOT
62072: PUSH
62073: LD_VAR 0 2
62077: NOT
62078: OR
62079: IFFALSE 62083
// exit ;
62081: GO 62247
// tmp := AreaToList ( area , i ) ;
62083: LD_ADDR_VAR 0 6
62087: PUSH
62088: LD_VAR 0 2
62092: PPUSH
62093: LD_VAR 0 5
62097: PPUSH
62098: CALL_OW 517
62102: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62103: LD_ADDR_VAR 0 5
62107: PUSH
62108: DOUBLE
62109: LD_INT 1
62111: DEC
62112: ST_TO_ADDR
62113: LD_VAR 0 6
62117: PUSH
62118: LD_INT 1
62120: ARRAY
62121: PUSH
62122: FOR_TO
62123: IFFALSE 62245
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62125: LD_ADDR_VAR 0 7
62129: PUSH
62130: LD_VAR 0 6
62134: PUSH
62135: LD_INT 1
62137: ARRAY
62138: PUSH
62139: LD_VAR 0 5
62143: ARRAY
62144: PUSH
62145: LD_VAR 0 6
62149: PUSH
62150: LD_INT 2
62152: ARRAY
62153: PUSH
62154: LD_VAR 0 5
62158: ARRAY
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62164: LD_VAR 0 7
62168: PUSH
62169: LD_INT 1
62171: ARRAY
62172: PPUSH
62173: LD_VAR 0 7
62177: PUSH
62178: LD_INT 2
62180: ARRAY
62181: PPUSH
62182: CALL_OW 428
62186: PUSH
62187: LD_INT 0
62189: EQUAL
62190: IFFALSE 62243
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62192: LD_VAR 0 1
62196: PPUSH
62197: LD_VAR 0 7
62201: PUSH
62202: LD_INT 1
62204: ARRAY
62205: PPUSH
62206: LD_VAR 0 7
62210: PUSH
62211: LD_INT 2
62213: ARRAY
62214: PPUSH
62215: LD_VAR 0 3
62219: PPUSH
62220: CALL_OW 48
// result := IsPlaced ( unit ) ;
62224: LD_ADDR_VAR 0 4
62228: PUSH
62229: LD_VAR 0 1
62233: PPUSH
62234: CALL_OW 305
62238: ST_TO_ADDR
// exit ;
62239: POP
62240: POP
62241: GO 62247
// end ; end ;
62243: GO 62122
62245: POP
62246: POP
// end ;
62247: LD_VAR 0 4
62251: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62252: LD_INT 0
62254: PPUSH
62255: PPUSH
62256: PPUSH
// if not side or side > 8 then
62257: LD_VAR 0 1
62261: NOT
62262: PUSH
62263: LD_VAR 0 1
62267: PUSH
62268: LD_INT 8
62270: GREATER
62271: OR
62272: IFFALSE 62276
// exit ;
62274: GO 62463
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62276: LD_ADDR_VAR 0 4
62280: PUSH
62281: LD_INT 22
62283: PUSH
62284: LD_VAR 0 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 21
62295: PUSH
62296: LD_INT 3
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PPUSH
62307: CALL_OW 69
62311: ST_TO_ADDR
// if not tmp then
62312: LD_VAR 0 4
62316: NOT
62317: IFFALSE 62321
// exit ;
62319: GO 62463
// enable_addtolog := true ;
62321: LD_ADDR_OWVAR 81
62325: PUSH
62326: LD_INT 1
62328: ST_TO_ADDR
// AddToLog ( [ ) ;
62329: LD_STRING [
62331: PPUSH
62332: CALL_OW 561
// for i in tmp do
62336: LD_ADDR_VAR 0 3
62340: PUSH
62341: LD_VAR 0 4
62345: PUSH
62346: FOR_IN
62347: IFFALSE 62454
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62349: LD_STRING [
62351: PUSH
62352: LD_VAR 0 3
62356: PPUSH
62357: CALL_OW 266
62361: STR
62362: PUSH
62363: LD_STRING , 
62365: STR
62366: PUSH
62367: LD_VAR 0 3
62371: PPUSH
62372: CALL_OW 250
62376: STR
62377: PUSH
62378: LD_STRING , 
62380: STR
62381: PUSH
62382: LD_VAR 0 3
62386: PPUSH
62387: CALL_OW 251
62391: STR
62392: PUSH
62393: LD_STRING , 
62395: STR
62396: PUSH
62397: LD_VAR 0 3
62401: PPUSH
62402: CALL_OW 254
62406: STR
62407: PUSH
62408: LD_STRING , 
62410: STR
62411: PUSH
62412: LD_VAR 0 3
62416: PPUSH
62417: LD_INT 1
62419: PPUSH
62420: CALL_OW 268
62424: STR
62425: PUSH
62426: LD_STRING , 
62428: STR
62429: PUSH
62430: LD_VAR 0 3
62434: PPUSH
62435: LD_INT 2
62437: PPUSH
62438: CALL_OW 268
62442: STR
62443: PUSH
62444: LD_STRING ],
62446: STR
62447: PPUSH
62448: CALL_OW 561
// end ;
62452: GO 62346
62454: POP
62455: POP
// AddToLog ( ]; ) ;
62456: LD_STRING ];
62458: PPUSH
62459: CALL_OW 561
// end ;
62463: LD_VAR 0 2
62467: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62468: LD_INT 0
62470: PPUSH
62471: PPUSH
62472: PPUSH
62473: PPUSH
62474: PPUSH
// if not area or not rate or not max then
62475: LD_VAR 0 1
62479: NOT
62480: PUSH
62481: LD_VAR 0 2
62485: NOT
62486: OR
62487: PUSH
62488: LD_VAR 0 4
62492: NOT
62493: OR
62494: IFFALSE 62498
// exit ;
62496: GO 62687
// while 1 do
62498: LD_INT 1
62500: IFFALSE 62687
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62502: LD_ADDR_VAR 0 9
62506: PUSH
62507: LD_VAR 0 1
62511: PPUSH
62512: LD_INT 1
62514: PPUSH
62515: CALL_OW 287
62519: PUSH
62520: LD_INT 10
62522: MUL
62523: ST_TO_ADDR
// r := rate / 10 ;
62524: LD_ADDR_VAR 0 7
62528: PUSH
62529: LD_VAR 0 2
62533: PUSH
62534: LD_INT 10
62536: DIVREAL
62537: ST_TO_ADDR
// time := 1 1$00 ;
62538: LD_ADDR_VAR 0 8
62542: PUSH
62543: LD_INT 2100
62545: ST_TO_ADDR
// if amount < min then
62546: LD_VAR 0 9
62550: PUSH
62551: LD_VAR 0 3
62555: LESS
62556: IFFALSE 62574
// r := r * 2 else
62558: LD_ADDR_VAR 0 7
62562: PUSH
62563: LD_VAR 0 7
62567: PUSH
62568: LD_INT 2
62570: MUL
62571: ST_TO_ADDR
62572: GO 62600
// if amount > max then
62574: LD_VAR 0 9
62578: PUSH
62579: LD_VAR 0 4
62583: GREATER
62584: IFFALSE 62600
// r := r / 2 ;
62586: LD_ADDR_VAR 0 7
62590: PUSH
62591: LD_VAR 0 7
62595: PUSH
62596: LD_INT 2
62598: DIVREAL
62599: ST_TO_ADDR
// time := time / r ;
62600: LD_ADDR_VAR 0 8
62604: PUSH
62605: LD_VAR 0 8
62609: PUSH
62610: LD_VAR 0 7
62614: DIVREAL
62615: ST_TO_ADDR
// if time < 0 then
62616: LD_VAR 0 8
62620: PUSH
62621: LD_INT 0
62623: LESS
62624: IFFALSE 62641
// time := time * - 1 ;
62626: LD_ADDR_VAR 0 8
62630: PUSH
62631: LD_VAR 0 8
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: MUL
62640: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62641: LD_VAR 0 8
62645: PUSH
62646: LD_INT 35
62648: PPUSH
62649: LD_INT 875
62651: PPUSH
62652: CALL_OW 12
62656: PLUS
62657: PPUSH
62658: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62662: LD_INT 1
62664: PPUSH
62665: LD_INT 5
62667: PPUSH
62668: CALL_OW 12
62672: PPUSH
62673: LD_VAR 0 1
62677: PPUSH
62678: LD_INT 1
62680: PPUSH
62681: CALL_OW 55
// end ;
62685: GO 62498
// end ;
62687: LD_VAR 0 5
62691: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62692: LD_INT 0
62694: PPUSH
62695: PPUSH
62696: PPUSH
62697: PPUSH
62698: PPUSH
62699: PPUSH
62700: PPUSH
62701: PPUSH
// if not turrets or not factories then
62702: LD_VAR 0 1
62706: NOT
62707: PUSH
62708: LD_VAR 0 2
62712: NOT
62713: OR
62714: IFFALSE 62718
// exit ;
62716: GO 63025
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62718: LD_ADDR_VAR 0 10
62722: PUSH
62723: LD_INT 5
62725: PUSH
62726: LD_INT 6
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: LD_INT 4
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 3
62745: PUSH
62746: LD_INT 5
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 24
62760: PUSH
62761: LD_INT 25
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 23
62770: PUSH
62771: LD_INT 27
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 42
62784: PUSH
62785: LD_INT 43
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 44
62794: PUSH
62795: LD_INT 46
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 45
62804: PUSH
62805: LD_INT 47
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: LIST
62821: ST_TO_ADDR
// result := [ ] ;
62822: LD_ADDR_VAR 0 3
62826: PUSH
62827: EMPTY
62828: ST_TO_ADDR
// for i in turrets do
62829: LD_ADDR_VAR 0 4
62833: PUSH
62834: LD_VAR 0 1
62838: PUSH
62839: FOR_IN
62840: IFFALSE 63023
// begin nat := GetNation ( i ) ;
62842: LD_ADDR_VAR 0 7
62846: PUSH
62847: LD_VAR 0 4
62851: PPUSH
62852: CALL_OW 248
62856: ST_TO_ADDR
// weapon := 0 ;
62857: LD_ADDR_VAR 0 8
62861: PUSH
62862: LD_INT 0
62864: ST_TO_ADDR
// if not nat then
62865: LD_VAR 0 7
62869: NOT
62870: IFFALSE 62874
// continue ;
62872: GO 62839
// for j in list [ nat ] do
62874: LD_ADDR_VAR 0 5
62878: PUSH
62879: LD_VAR 0 10
62883: PUSH
62884: LD_VAR 0 7
62888: ARRAY
62889: PUSH
62890: FOR_IN
62891: IFFALSE 62932
// if GetBWeapon ( i ) = j [ 1 ] then
62893: LD_VAR 0 4
62897: PPUSH
62898: CALL_OW 269
62902: PUSH
62903: LD_VAR 0 5
62907: PUSH
62908: LD_INT 1
62910: ARRAY
62911: EQUAL
62912: IFFALSE 62930
// begin weapon := j [ 2 ] ;
62914: LD_ADDR_VAR 0 8
62918: PUSH
62919: LD_VAR 0 5
62923: PUSH
62924: LD_INT 2
62926: ARRAY
62927: ST_TO_ADDR
// break ;
62928: GO 62932
// end ;
62930: GO 62890
62932: POP
62933: POP
// if not weapon then
62934: LD_VAR 0 8
62938: NOT
62939: IFFALSE 62943
// continue ;
62941: GO 62839
// for k in factories do
62943: LD_ADDR_VAR 0 6
62947: PUSH
62948: LD_VAR 0 2
62952: PUSH
62953: FOR_IN
62954: IFFALSE 63019
// begin weapons := AvailableWeaponList ( k ) ;
62956: LD_ADDR_VAR 0 9
62960: PUSH
62961: LD_VAR 0 6
62965: PPUSH
62966: CALL_OW 478
62970: ST_TO_ADDR
// if not weapons then
62971: LD_VAR 0 9
62975: NOT
62976: IFFALSE 62980
// continue ;
62978: GO 62953
// if weapon in weapons then
62980: LD_VAR 0 8
62984: PUSH
62985: LD_VAR 0 9
62989: IN
62990: IFFALSE 63017
// begin result := [ i , weapon ] ;
62992: LD_ADDR_VAR 0 3
62996: PUSH
62997: LD_VAR 0 4
63001: PUSH
63002: LD_VAR 0 8
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: ST_TO_ADDR
// exit ;
63011: POP
63012: POP
63013: POP
63014: POP
63015: GO 63025
// end ; end ;
63017: GO 62953
63019: POP
63020: POP
// end ;
63021: GO 62839
63023: POP
63024: POP
// end ;
63025: LD_VAR 0 3
63029: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63030: LD_INT 0
63032: PPUSH
// if not side or side > 8 then
63033: LD_VAR 0 3
63037: NOT
63038: PUSH
63039: LD_VAR 0 3
63043: PUSH
63044: LD_INT 8
63046: GREATER
63047: OR
63048: IFFALSE 63052
// exit ;
63050: GO 63111
// if not range then
63052: LD_VAR 0 4
63056: NOT
63057: IFFALSE 63068
// range := - 12 ;
63059: LD_ADDR_VAR 0 4
63063: PUSH
63064: LD_INT 12
63066: NEG
63067: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63068: LD_VAR 0 1
63072: PPUSH
63073: LD_VAR 0 2
63077: PPUSH
63078: LD_VAR 0 3
63082: PPUSH
63083: LD_VAR 0 4
63087: PPUSH
63088: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63092: LD_VAR 0 1
63096: PPUSH
63097: LD_VAR 0 2
63101: PPUSH
63102: LD_VAR 0 3
63106: PPUSH
63107: CALL_OW 331
// end ;
63111: LD_VAR 0 5
63115: RET
// export function Video ( mode ) ; begin
63116: LD_INT 0
63118: PPUSH
// ingame_video = mode ;
63119: LD_ADDR_OWVAR 52
63123: PUSH
63124: LD_VAR 0 1
63128: ST_TO_ADDR
// interface_hidden = mode ;
63129: LD_ADDR_OWVAR 54
63133: PUSH
63134: LD_VAR 0 1
63138: ST_TO_ADDR
// end ;
63139: LD_VAR 0 2
63143: RET
// export function Join ( array , element ) ; begin
63144: LD_INT 0
63146: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63147: LD_ADDR_VAR 0 3
63151: PUSH
63152: LD_VAR 0 1
63156: PPUSH
63157: LD_VAR 0 1
63161: PUSH
63162: LD_INT 1
63164: PLUS
63165: PPUSH
63166: LD_VAR 0 2
63170: PPUSH
63171: CALL_OW 1
63175: ST_TO_ADDR
// end ;
63176: LD_VAR 0 3
63180: RET
// export function JoinUnion ( array , element ) ; begin
63181: LD_INT 0
63183: PPUSH
// result := array union element ;
63184: LD_ADDR_VAR 0 3
63188: PUSH
63189: LD_VAR 0 1
63193: PUSH
63194: LD_VAR 0 2
63198: UNION
63199: ST_TO_ADDR
// end ;
63200: LD_VAR 0 3
63204: RET
// export function GetBehemoths ( side ) ; begin
63205: LD_INT 0
63207: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63208: LD_ADDR_VAR 0 2
63212: PUSH
63213: LD_INT 22
63215: PUSH
63216: LD_VAR 0 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 31
63227: PUSH
63228: LD_INT 25
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PPUSH
63239: CALL_OW 69
63243: ST_TO_ADDR
// end ;
63244: LD_VAR 0 2
63248: RET
// export function Shuffle ( array ) ; var i , index ; begin
63249: LD_INT 0
63251: PPUSH
63252: PPUSH
63253: PPUSH
// result := [ ] ;
63254: LD_ADDR_VAR 0 2
63258: PUSH
63259: EMPTY
63260: ST_TO_ADDR
// if not array then
63261: LD_VAR 0 1
63265: NOT
63266: IFFALSE 63270
// exit ;
63268: GO 63369
// Randomize ;
63270: CALL_OW 10
// for i = array downto 1 do
63274: LD_ADDR_VAR 0 3
63278: PUSH
63279: DOUBLE
63280: LD_VAR 0 1
63284: INC
63285: ST_TO_ADDR
63286: LD_INT 1
63288: PUSH
63289: FOR_DOWNTO
63290: IFFALSE 63367
// begin index := rand ( 1 , array ) ;
63292: LD_ADDR_VAR 0 4
63296: PUSH
63297: LD_INT 1
63299: PPUSH
63300: LD_VAR 0 1
63304: PPUSH
63305: CALL_OW 12
63309: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63310: LD_ADDR_VAR 0 2
63314: PUSH
63315: LD_VAR 0 2
63319: PPUSH
63320: LD_VAR 0 2
63324: PUSH
63325: LD_INT 1
63327: PLUS
63328: PPUSH
63329: LD_VAR 0 1
63333: PUSH
63334: LD_VAR 0 4
63338: ARRAY
63339: PPUSH
63340: CALL_OW 2
63344: ST_TO_ADDR
// array := Delete ( array , index ) ;
63345: LD_ADDR_VAR 0 1
63349: PUSH
63350: LD_VAR 0 1
63354: PPUSH
63355: LD_VAR 0 4
63359: PPUSH
63360: CALL_OW 3
63364: ST_TO_ADDR
// end ;
63365: GO 63289
63367: POP
63368: POP
// end ;
63369: LD_VAR 0 2
63373: RET
// export function GetBaseMaterials ( base ) ; begin
63374: LD_INT 0
63376: PPUSH
// result := [ 0 , 0 , 0 ] ;
63377: LD_ADDR_VAR 0 2
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: LIST
63395: ST_TO_ADDR
// if not base then
63396: LD_VAR 0 1
63400: NOT
63401: IFFALSE 63405
// exit ;
63403: GO 63454
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63405: LD_ADDR_VAR 0 2
63409: PUSH
63410: LD_VAR 0 1
63414: PPUSH
63415: LD_INT 1
63417: PPUSH
63418: CALL_OW 275
63422: PUSH
63423: LD_VAR 0 1
63427: PPUSH
63428: LD_INT 2
63430: PPUSH
63431: CALL_OW 275
63435: PUSH
63436: LD_VAR 0 1
63440: PPUSH
63441: LD_INT 3
63443: PPUSH
63444: CALL_OW 275
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: ST_TO_ADDR
// end ;
63454: LD_VAR 0 2
63458: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63459: LD_INT 0
63461: PPUSH
63462: PPUSH
// result := array ;
63463: LD_ADDR_VAR 0 3
63467: PUSH
63468: LD_VAR 0 1
63472: ST_TO_ADDR
// if size >= result then
63473: LD_VAR 0 2
63477: PUSH
63478: LD_VAR 0 3
63482: GREATEREQUAL
63483: IFFALSE 63487
// exit ;
63485: GO 63537
// if size then
63487: LD_VAR 0 2
63491: IFFALSE 63537
// for i := array downto size do
63493: LD_ADDR_VAR 0 4
63497: PUSH
63498: DOUBLE
63499: LD_VAR 0 1
63503: INC
63504: ST_TO_ADDR
63505: LD_VAR 0 2
63509: PUSH
63510: FOR_DOWNTO
63511: IFFALSE 63535
// result := Delete ( result , result ) ;
63513: LD_ADDR_VAR 0 3
63517: PUSH
63518: LD_VAR 0 3
63522: PPUSH
63523: LD_VAR 0 3
63527: PPUSH
63528: CALL_OW 3
63532: ST_TO_ADDR
63533: GO 63510
63535: POP
63536: POP
// end ;
63537: LD_VAR 0 3
63541: RET
// export function ComExit ( unit ) ; var tmp ; begin
63542: LD_INT 0
63544: PPUSH
63545: PPUSH
// if not IsInUnit ( unit ) then
63546: LD_VAR 0 1
63550: PPUSH
63551: CALL_OW 310
63555: NOT
63556: IFFALSE 63560
// exit ;
63558: GO 63620
// tmp := IsInUnit ( unit ) ;
63560: LD_ADDR_VAR 0 3
63564: PUSH
63565: LD_VAR 0 1
63569: PPUSH
63570: CALL_OW 310
63574: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63575: LD_VAR 0 3
63579: PPUSH
63580: CALL_OW 247
63584: PUSH
63585: LD_INT 2
63587: EQUAL
63588: IFFALSE 63601
// ComExitVehicle ( unit ) else
63590: LD_VAR 0 1
63594: PPUSH
63595: CALL_OW 121
63599: GO 63610
// ComExitBuilding ( unit ) ;
63601: LD_VAR 0 1
63605: PPUSH
63606: CALL_OW 122
// result := tmp ;
63610: LD_ADDR_VAR 0 2
63614: PUSH
63615: LD_VAR 0 3
63619: ST_TO_ADDR
// end ;
63620: LD_VAR 0 2
63624: RET
// export function ComExitAll ( units ) ; var i ; begin
63625: LD_INT 0
63627: PPUSH
63628: PPUSH
// if not units then
63629: LD_VAR 0 1
63633: NOT
63634: IFFALSE 63638
// exit ;
63636: GO 63664
// for i in units do
63638: LD_ADDR_VAR 0 3
63642: PUSH
63643: LD_VAR 0 1
63647: PUSH
63648: FOR_IN
63649: IFFALSE 63662
// ComExit ( i ) ;
63651: LD_VAR 0 3
63655: PPUSH
63656: CALL 63542 0 1
63660: GO 63648
63662: POP
63663: POP
// end ;
63664: LD_VAR 0 2
63668: RET
// export function ResetHc ; begin
63669: LD_INT 0
63671: PPUSH
// InitHc ;
63672: CALL_OW 19
// hc_importance := 0 ;
63676: LD_ADDR_OWVAR 32
63680: PUSH
63681: LD_INT 0
63683: ST_TO_ADDR
// end ;
63684: LD_VAR 0 1
63688: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63689: LD_INT 0
63691: PPUSH
63692: PPUSH
63693: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63694: LD_ADDR_VAR 0 6
63698: PUSH
63699: LD_VAR 0 1
63703: PUSH
63704: LD_VAR 0 3
63708: PLUS
63709: PUSH
63710: LD_INT 2
63712: DIV
63713: ST_TO_ADDR
// if _x < 0 then
63714: LD_VAR 0 6
63718: PUSH
63719: LD_INT 0
63721: LESS
63722: IFFALSE 63739
// _x := _x * - 1 ;
63724: LD_ADDR_VAR 0 6
63728: PUSH
63729: LD_VAR 0 6
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: MUL
63738: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63739: LD_ADDR_VAR 0 7
63743: PUSH
63744: LD_VAR 0 2
63748: PUSH
63749: LD_VAR 0 4
63753: PLUS
63754: PUSH
63755: LD_INT 2
63757: DIV
63758: ST_TO_ADDR
// if _y < 0 then
63759: LD_VAR 0 7
63763: PUSH
63764: LD_INT 0
63766: LESS
63767: IFFALSE 63784
// _y := _y * - 1 ;
63769: LD_ADDR_VAR 0 7
63773: PUSH
63774: LD_VAR 0 7
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: MUL
63783: ST_TO_ADDR
// result := [ _x , _y ] ;
63784: LD_ADDR_VAR 0 5
63788: PUSH
63789: LD_VAR 0 6
63793: PUSH
63794: LD_VAR 0 7
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: ST_TO_ADDR
// end ;
63803: LD_VAR 0 5
63807: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63808: LD_INT 0
63810: PPUSH
63811: PPUSH
63812: PPUSH
63813: PPUSH
// task := GetTaskList ( unit ) ;
63814: LD_ADDR_VAR 0 7
63818: PUSH
63819: LD_VAR 0 1
63823: PPUSH
63824: CALL_OW 437
63828: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63829: LD_VAR 0 7
63833: NOT
63834: PUSH
63835: LD_VAR 0 1
63839: PPUSH
63840: LD_VAR 0 2
63844: PPUSH
63845: CALL_OW 308
63849: NOT
63850: AND
63851: IFFALSE 63855
// exit ;
63853: GO 63973
// if IsInArea ( unit , area ) then
63855: LD_VAR 0 1
63859: PPUSH
63860: LD_VAR 0 2
63864: PPUSH
63865: CALL_OW 308
63869: IFFALSE 63887
// begin ComMoveToArea ( unit , goAway ) ;
63871: LD_VAR 0 1
63875: PPUSH
63876: LD_VAR 0 3
63880: PPUSH
63881: CALL_OW 113
// exit ;
63885: GO 63973
// end ; if task [ 1 ] [ 1 ] <> M then
63887: LD_VAR 0 7
63891: PUSH
63892: LD_INT 1
63894: ARRAY
63895: PUSH
63896: LD_INT 1
63898: ARRAY
63899: PUSH
63900: LD_STRING M
63902: NONEQUAL
63903: IFFALSE 63907
// exit ;
63905: GO 63973
// x := task [ 1 ] [ 2 ] ;
63907: LD_ADDR_VAR 0 5
63911: PUSH
63912: LD_VAR 0 7
63916: PUSH
63917: LD_INT 1
63919: ARRAY
63920: PUSH
63921: LD_INT 2
63923: ARRAY
63924: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63925: LD_ADDR_VAR 0 6
63929: PUSH
63930: LD_VAR 0 7
63934: PUSH
63935: LD_INT 1
63937: ARRAY
63938: PUSH
63939: LD_INT 3
63941: ARRAY
63942: ST_TO_ADDR
// if InArea ( x , y , area ) then
63943: LD_VAR 0 5
63947: PPUSH
63948: LD_VAR 0 6
63952: PPUSH
63953: LD_VAR 0 2
63957: PPUSH
63958: CALL_OW 309
63962: IFFALSE 63973
// ComStop ( unit ) ;
63964: LD_VAR 0 1
63968: PPUSH
63969: CALL_OW 141
// end ;
63973: LD_VAR 0 4
63977: RET
// export function Abs ( value ) ; begin
63978: LD_INT 0
63980: PPUSH
// result := value ;
63981: LD_ADDR_VAR 0 2
63985: PUSH
63986: LD_VAR 0 1
63990: ST_TO_ADDR
// if value < 0 then
63991: LD_VAR 0 1
63995: PUSH
63996: LD_INT 0
63998: LESS
63999: IFFALSE 64016
// result := value * - 1 ;
64001: LD_ADDR_VAR 0 2
64005: PUSH
64006: LD_VAR 0 1
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: MUL
64015: ST_TO_ADDR
// end ;
64016: LD_VAR 0 2
64020: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64021: LD_INT 0
64023: PPUSH
64024: PPUSH
64025: PPUSH
64026: PPUSH
64027: PPUSH
64028: PPUSH
64029: PPUSH
64030: PPUSH
// if not unit or not building then
64031: LD_VAR 0 1
64035: NOT
64036: PUSH
64037: LD_VAR 0 2
64041: NOT
64042: OR
64043: IFFALSE 64047
// exit ;
64045: GO 64273
// x := GetX ( building ) ;
64047: LD_ADDR_VAR 0 4
64051: PUSH
64052: LD_VAR 0 2
64056: PPUSH
64057: CALL_OW 250
64061: ST_TO_ADDR
// y := GetY ( building ) ;
64062: LD_ADDR_VAR 0 6
64066: PUSH
64067: LD_VAR 0 2
64071: PPUSH
64072: CALL_OW 251
64076: ST_TO_ADDR
// d := GetDir ( building ) ;
64077: LD_ADDR_VAR 0 8
64081: PUSH
64082: LD_VAR 0 2
64086: PPUSH
64087: CALL_OW 254
64091: ST_TO_ADDR
// r := 4 ;
64092: LD_ADDR_VAR 0 9
64096: PUSH
64097: LD_INT 4
64099: ST_TO_ADDR
// for i := 1 to 5 do
64100: LD_ADDR_VAR 0 10
64104: PUSH
64105: DOUBLE
64106: LD_INT 1
64108: DEC
64109: ST_TO_ADDR
64110: LD_INT 5
64112: PUSH
64113: FOR_TO
64114: IFFALSE 64271
// begin _x := ShiftX ( x , d , r + i ) ;
64116: LD_ADDR_VAR 0 5
64120: PUSH
64121: LD_VAR 0 4
64125: PPUSH
64126: LD_VAR 0 8
64130: PPUSH
64131: LD_VAR 0 9
64135: PUSH
64136: LD_VAR 0 10
64140: PLUS
64141: PPUSH
64142: CALL_OW 272
64146: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64147: LD_ADDR_VAR 0 7
64151: PUSH
64152: LD_VAR 0 6
64156: PPUSH
64157: LD_VAR 0 8
64161: PPUSH
64162: LD_VAR 0 9
64166: PUSH
64167: LD_VAR 0 10
64171: PLUS
64172: PPUSH
64173: CALL_OW 273
64177: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64178: LD_VAR 0 5
64182: PPUSH
64183: LD_VAR 0 7
64187: PPUSH
64188: CALL_OW 488
64192: PUSH
64193: LD_VAR 0 5
64197: PPUSH
64198: LD_VAR 0 7
64202: PPUSH
64203: CALL_OW 428
64207: PPUSH
64208: CALL_OW 247
64212: PUSH
64213: LD_INT 3
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: IN
64223: NOT
64224: AND
64225: IFFALSE 64269
// begin ComMoveXY ( unit , _x , _y ) ;
64227: LD_VAR 0 1
64231: PPUSH
64232: LD_VAR 0 5
64236: PPUSH
64237: LD_VAR 0 7
64241: PPUSH
64242: CALL_OW 111
// result := [ _x , _y ] ;
64246: LD_ADDR_VAR 0 3
64250: PUSH
64251: LD_VAR 0 5
64255: PUSH
64256: LD_VAR 0 7
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: ST_TO_ADDR
// exit ;
64265: POP
64266: POP
64267: GO 64273
// end ; end ;
64269: GO 64113
64271: POP
64272: POP
// end ;
64273: LD_VAR 0 3
64277: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64278: LD_INT 0
64280: PPUSH
64281: PPUSH
64282: PPUSH
// result := 0 ;
64283: LD_ADDR_VAR 0 3
64287: PUSH
64288: LD_INT 0
64290: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64291: LD_VAR 0 1
64295: PUSH
64296: LD_INT 0
64298: LESS
64299: PUSH
64300: LD_VAR 0 1
64304: PUSH
64305: LD_INT 8
64307: GREATER
64308: OR
64309: PUSH
64310: LD_VAR 0 2
64314: PUSH
64315: LD_INT 0
64317: LESS
64318: OR
64319: PUSH
64320: LD_VAR 0 2
64324: PUSH
64325: LD_INT 8
64327: GREATER
64328: OR
64329: IFFALSE 64333
// exit ;
64331: GO 64408
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64333: LD_ADDR_VAR 0 4
64337: PUSH
64338: LD_INT 22
64340: PUSH
64341: LD_VAR 0 2
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PPUSH
64350: CALL_OW 69
64354: PUSH
64355: FOR_IN
64356: IFFALSE 64406
// begin un := UnitShoot ( i ) ;
64358: LD_ADDR_VAR 0 5
64362: PUSH
64363: LD_VAR 0 4
64367: PPUSH
64368: CALL_OW 504
64372: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64373: LD_VAR 0 5
64377: PPUSH
64378: CALL_OW 255
64382: PUSH
64383: LD_VAR 0 1
64387: EQUAL
64388: IFFALSE 64404
// begin result := un ;
64390: LD_ADDR_VAR 0 3
64394: PUSH
64395: LD_VAR 0 5
64399: ST_TO_ADDR
// exit ;
64400: POP
64401: POP
64402: GO 64408
// end ; end ;
64404: GO 64355
64406: POP
64407: POP
// end ;
64408: LD_VAR 0 3
64412: RET
// export function GetCargoBay ( units ) ; begin
64413: LD_INT 0
64415: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64416: LD_ADDR_VAR 0 2
64420: PUSH
64421: LD_VAR 0 1
64425: PPUSH
64426: LD_INT 2
64428: PUSH
64429: LD_INT 34
64431: PUSH
64432: LD_INT 12
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 34
64441: PUSH
64442: LD_INT 51
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 34
64451: PUSH
64452: LD_INT 32
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 34
64461: PUSH
64462: LD_INT 89
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: PPUSH
64476: CALL_OW 72
64480: ST_TO_ADDR
// end ;
64481: LD_VAR 0 2
64485: RET
// export function Negate ( value ) ; begin
64486: LD_INT 0
64488: PPUSH
// result := not value ;
64489: LD_ADDR_VAR 0 2
64493: PUSH
64494: LD_VAR 0 1
64498: NOT
64499: ST_TO_ADDR
// end ;
64500: LD_VAR 0 2
64504: RET
// export function Inc ( value ) ; begin
64505: LD_INT 0
64507: PPUSH
// result := value + 1 ;
64508: LD_ADDR_VAR 0 2
64512: PUSH
64513: LD_VAR 0 1
64517: PUSH
64518: LD_INT 1
64520: PLUS
64521: ST_TO_ADDR
// end ;
64522: LD_VAR 0 2
64526: RET
// export function Dec ( value ) ; begin
64527: LD_INT 0
64529: PPUSH
// result := value - 1 ;
64530: LD_ADDR_VAR 0 2
64534: PUSH
64535: LD_VAR 0 1
64539: PUSH
64540: LD_INT 1
64542: MINUS
64543: ST_TO_ADDR
// end ;
64544: LD_VAR 0 2
64548: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64549: LD_INT 0
64551: PPUSH
64552: PPUSH
64553: PPUSH
64554: PPUSH
64555: PPUSH
64556: PPUSH
64557: PPUSH
64558: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64559: LD_VAR 0 1
64563: PPUSH
64564: LD_VAR 0 2
64568: PPUSH
64569: CALL_OW 488
64573: NOT
64574: PUSH
64575: LD_VAR 0 3
64579: PPUSH
64580: LD_VAR 0 4
64584: PPUSH
64585: CALL_OW 488
64589: NOT
64590: OR
64591: IFFALSE 64604
// begin result := - 1 ;
64593: LD_ADDR_VAR 0 5
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: ST_TO_ADDR
// exit ;
64602: GO 64839
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64604: LD_ADDR_VAR 0 12
64608: PUSH
64609: LD_VAR 0 1
64613: PPUSH
64614: LD_VAR 0 2
64618: PPUSH
64619: LD_VAR 0 3
64623: PPUSH
64624: LD_VAR 0 4
64628: PPUSH
64629: CALL 63689 0 4
64633: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64634: LD_ADDR_VAR 0 11
64638: PUSH
64639: LD_VAR 0 1
64643: PPUSH
64644: LD_VAR 0 2
64648: PPUSH
64649: LD_VAR 0 12
64653: PUSH
64654: LD_INT 1
64656: ARRAY
64657: PPUSH
64658: LD_VAR 0 12
64662: PUSH
64663: LD_INT 2
64665: ARRAY
64666: PPUSH
64667: CALL_OW 298
64671: ST_TO_ADDR
// distance := 9999 ;
64672: LD_ADDR_VAR 0 10
64676: PUSH
64677: LD_INT 9999
64679: ST_TO_ADDR
// for i := 0 to 5 do
64680: LD_ADDR_VAR 0 6
64684: PUSH
64685: DOUBLE
64686: LD_INT 0
64688: DEC
64689: ST_TO_ADDR
64690: LD_INT 5
64692: PUSH
64693: FOR_TO
64694: IFFALSE 64837
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64696: LD_ADDR_VAR 0 7
64700: PUSH
64701: LD_VAR 0 1
64705: PPUSH
64706: LD_VAR 0 6
64710: PPUSH
64711: LD_VAR 0 11
64715: PPUSH
64716: CALL_OW 272
64720: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64721: LD_ADDR_VAR 0 8
64725: PUSH
64726: LD_VAR 0 2
64730: PPUSH
64731: LD_VAR 0 6
64735: PPUSH
64736: LD_VAR 0 11
64740: PPUSH
64741: CALL_OW 273
64745: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64746: LD_VAR 0 7
64750: PPUSH
64751: LD_VAR 0 8
64755: PPUSH
64756: CALL_OW 488
64760: NOT
64761: IFFALSE 64765
// continue ;
64763: GO 64693
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64765: LD_ADDR_VAR 0 9
64769: PUSH
64770: LD_VAR 0 12
64774: PUSH
64775: LD_INT 1
64777: ARRAY
64778: PPUSH
64779: LD_VAR 0 12
64783: PUSH
64784: LD_INT 2
64786: ARRAY
64787: PPUSH
64788: LD_VAR 0 7
64792: PPUSH
64793: LD_VAR 0 8
64797: PPUSH
64798: CALL_OW 298
64802: ST_TO_ADDR
// if tmp < distance then
64803: LD_VAR 0 9
64807: PUSH
64808: LD_VAR 0 10
64812: LESS
64813: IFFALSE 64835
// begin result := i ;
64815: LD_ADDR_VAR 0 5
64819: PUSH
64820: LD_VAR 0 6
64824: ST_TO_ADDR
// distance := tmp ;
64825: LD_ADDR_VAR 0 10
64829: PUSH
64830: LD_VAR 0 9
64834: ST_TO_ADDR
// end ; end ;
64835: GO 64693
64837: POP
64838: POP
// end ;
64839: LD_VAR 0 5
64843: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64844: LD_INT 0
64846: PPUSH
64847: PPUSH
// if not driver or not IsInUnit ( driver ) then
64848: LD_VAR 0 1
64852: NOT
64853: PUSH
64854: LD_VAR 0 1
64858: PPUSH
64859: CALL_OW 310
64863: NOT
64864: OR
64865: IFFALSE 64869
// exit ;
64867: GO 64959
// vehicle := IsInUnit ( driver ) ;
64869: LD_ADDR_VAR 0 3
64873: PUSH
64874: LD_VAR 0 1
64878: PPUSH
64879: CALL_OW 310
64883: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64884: LD_VAR 0 1
64888: PPUSH
64889: LD_STRING \
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: LD_INT 0
64897: PUSH
64898: LD_INT 0
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: PUSH
64919: LD_STRING E
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: LD_VAR 0 3
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PPUSH
64955: CALL_OW 446
// end ;
64959: LD_VAR 0 2
64963: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64964: LD_INT 0
64966: PPUSH
64967: PPUSH
// if not driver or not IsInUnit ( driver ) then
64968: LD_VAR 0 1
64972: NOT
64973: PUSH
64974: LD_VAR 0 1
64978: PPUSH
64979: CALL_OW 310
64983: NOT
64984: OR
64985: IFFALSE 64989
// exit ;
64987: GO 65079
// vehicle := IsInUnit ( driver ) ;
64989: LD_ADDR_VAR 0 3
64993: PUSH
64994: LD_VAR 0 1
64998: PPUSH
64999: CALL_OW 310
65003: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65004: LD_VAR 0 1
65008: PPUSH
65009: LD_STRING \
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: PUSH
65039: LD_STRING E
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: LD_VAR 0 3
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PPUSH
65075: CALL_OW 447
// end ;
65079: LD_VAR 0 2
65083: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65084: LD_INT 0
65086: PPUSH
65087: PPUSH
65088: PPUSH
// tmp := [ ] ;
65089: LD_ADDR_VAR 0 5
65093: PUSH
65094: EMPTY
65095: ST_TO_ADDR
// for i in units do
65096: LD_ADDR_VAR 0 4
65100: PUSH
65101: LD_VAR 0 1
65105: PUSH
65106: FOR_IN
65107: IFFALSE 65145
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65109: LD_ADDR_VAR 0 5
65113: PUSH
65114: LD_VAR 0 5
65118: PPUSH
65119: LD_VAR 0 5
65123: PUSH
65124: LD_INT 1
65126: PLUS
65127: PPUSH
65128: LD_VAR 0 4
65132: PPUSH
65133: CALL_OW 256
65137: PPUSH
65138: CALL_OW 2
65142: ST_TO_ADDR
65143: GO 65106
65145: POP
65146: POP
// if not tmp then
65147: LD_VAR 0 5
65151: NOT
65152: IFFALSE 65156
// exit ;
65154: GO 65204
// if asc then
65156: LD_VAR 0 2
65160: IFFALSE 65184
// result := SortListByListAsc ( units , tmp ) else
65162: LD_ADDR_VAR 0 3
65166: PUSH
65167: LD_VAR 0 1
65171: PPUSH
65172: LD_VAR 0 5
65176: PPUSH
65177: CALL_OW 76
65181: ST_TO_ADDR
65182: GO 65204
// result := SortListByListDesc ( units , tmp ) ;
65184: LD_ADDR_VAR 0 3
65188: PUSH
65189: LD_VAR 0 1
65193: PPUSH
65194: LD_VAR 0 5
65198: PPUSH
65199: CALL_OW 77
65203: ST_TO_ADDR
// end ;
65204: LD_VAR 0 3
65208: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65209: LD_INT 0
65211: PPUSH
65212: PPUSH
// task := GetTaskList ( mech ) ;
65213: LD_ADDR_VAR 0 4
65217: PUSH
65218: LD_VAR 0 1
65222: PPUSH
65223: CALL_OW 437
65227: ST_TO_ADDR
// if not task then
65228: LD_VAR 0 4
65232: NOT
65233: IFFALSE 65237
// exit ;
65235: GO 65279
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65237: LD_ADDR_VAR 0 3
65241: PUSH
65242: LD_VAR 0 4
65246: PUSH
65247: LD_INT 1
65249: ARRAY
65250: PUSH
65251: LD_INT 1
65253: ARRAY
65254: PUSH
65255: LD_STRING r
65257: EQUAL
65258: PUSH
65259: LD_VAR 0 4
65263: PUSH
65264: LD_INT 1
65266: ARRAY
65267: PUSH
65268: LD_INT 4
65270: ARRAY
65271: PUSH
65272: LD_VAR 0 2
65276: EQUAL
65277: AND
65278: ST_TO_ADDR
// end ;
65279: LD_VAR 0 3
65283: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65284: LD_INT 0
65286: PPUSH
// SetDir ( unit , d ) ;
65287: LD_VAR 0 1
65291: PPUSH
65292: LD_VAR 0 4
65296: PPUSH
65297: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65301: LD_VAR 0 1
65305: PPUSH
65306: LD_VAR 0 2
65310: PPUSH
65311: LD_VAR 0 3
65315: PPUSH
65316: LD_VAR 0 5
65320: PPUSH
65321: CALL_OW 48
// end ;
65325: LD_VAR 0 6
65329: RET
// export function ToNaturalNumber ( number ) ; begin
65330: LD_INT 0
65332: PPUSH
// result := number div 1 ;
65333: LD_ADDR_VAR 0 2
65337: PUSH
65338: LD_VAR 0 1
65342: PUSH
65343: LD_INT 1
65345: DIV
65346: ST_TO_ADDR
// if number < 0 then
65347: LD_VAR 0 1
65351: PUSH
65352: LD_INT 0
65354: LESS
65355: IFFALSE 65365
// result := 0 ;
65357: LD_ADDR_VAR 0 2
65361: PUSH
65362: LD_INT 0
65364: ST_TO_ADDR
// end ;
65365: LD_VAR 0 2
65369: RET
// export function SortByClass ( units , class ) ; var un ; begin
65370: LD_INT 0
65372: PPUSH
65373: PPUSH
// if not units or not class then
65374: LD_VAR 0 1
65378: NOT
65379: PUSH
65380: LD_VAR 0 2
65384: NOT
65385: OR
65386: IFFALSE 65390
// exit ;
65388: GO 65485
// result := [ ] ;
65390: LD_ADDR_VAR 0 3
65394: PUSH
65395: EMPTY
65396: ST_TO_ADDR
// for un in units do
65397: LD_ADDR_VAR 0 4
65401: PUSH
65402: LD_VAR 0 1
65406: PUSH
65407: FOR_IN
65408: IFFALSE 65483
// if GetClass ( un ) = class then
65410: LD_VAR 0 4
65414: PPUSH
65415: CALL_OW 257
65419: PUSH
65420: LD_VAR 0 2
65424: EQUAL
65425: IFFALSE 65452
// result := Insert ( result , 1 , un ) else
65427: LD_ADDR_VAR 0 3
65431: PUSH
65432: LD_VAR 0 3
65436: PPUSH
65437: LD_INT 1
65439: PPUSH
65440: LD_VAR 0 4
65444: PPUSH
65445: CALL_OW 2
65449: ST_TO_ADDR
65450: GO 65481
// result := Replace ( result , result + 1 , un ) ;
65452: LD_ADDR_VAR 0 3
65456: PUSH
65457: LD_VAR 0 3
65461: PPUSH
65462: LD_VAR 0 3
65466: PUSH
65467: LD_INT 1
65469: PLUS
65470: PPUSH
65471: LD_VAR 0 4
65475: PPUSH
65476: CALL_OW 1
65480: ST_TO_ADDR
65481: GO 65407
65483: POP
65484: POP
// end ;
65485: LD_VAR 0 3
65489: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65490: LD_INT 0
65492: PPUSH
65493: PPUSH
65494: PPUSH
65495: PPUSH
65496: PPUSH
65497: PPUSH
65498: PPUSH
// result := [ ] ;
65499: LD_ADDR_VAR 0 4
65503: PUSH
65504: EMPTY
65505: ST_TO_ADDR
// if x - r < 0 then
65506: LD_VAR 0 1
65510: PUSH
65511: LD_VAR 0 3
65515: MINUS
65516: PUSH
65517: LD_INT 0
65519: LESS
65520: IFFALSE 65532
// min_x := 0 else
65522: LD_ADDR_VAR 0 8
65526: PUSH
65527: LD_INT 0
65529: ST_TO_ADDR
65530: GO 65548
// min_x := x - r ;
65532: LD_ADDR_VAR 0 8
65536: PUSH
65537: LD_VAR 0 1
65541: PUSH
65542: LD_VAR 0 3
65546: MINUS
65547: ST_TO_ADDR
// if y - r < 0 then
65548: LD_VAR 0 2
65552: PUSH
65553: LD_VAR 0 3
65557: MINUS
65558: PUSH
65559: LD_INT 0
65561: LESS
65562: IFFALSE 65574
// min_y := 0 else
65564: LD_ADDR_VAR 0 7
65568: PUSH
65569: LD_INT 0
65571: ST_TO_ADDR
65572: GO 65590
// min_y := y - r ;
65574: LD_ADDR_VAR 0 7
65578: PUSH
65579: LD_VAR 0 2
65583: PUSH
65584: LD_VAR 0 3
65588: MINUS
65589: ST_TO_ADDR
// max_x := x + r ;
65590: LD_ADDR_VAR 0 9
65594: PUSH
65595: LD_VAR 0 1
65599: PUSH
65600: LD_VAR 0 3
65604: PLUS
65605: ST_TO_ADDR
// max_y := y + r ;
65606: LD_ADDR_VAR 0 10
65610: PUSH
65611: LD_VAR 0 2
65615: PUSH
65616: LD_VAR 0 3
65620: PLUS
65621: ST_TO_ADDR
// for _x = min_x to max_x do
65622: LD_ADDR_VAR 0 5
65626: PUSH
65627: DOUBLE
65628: LD_VAR 0 8
65632: DEC
65633: ST_TO_ADDR
65634: LD_VAR 0 9
65638: PUSH
65639: FOR_TO
65640: IFFALSE 65741
// for _y = min_y to max_y do
65642: LD_ADDR_VAR 0 6
65646: PUSH
65647: DOUBLE
65648: LD_VAR 0 7
65652: DEC
65653: ST_TO_ADDR
65654: LD_VAR 0 10
65658: PUSH
65659: FOR_TO
65660: IFFALSE 65737
// begin if not ValidHex ( _x , _y ) then
65662: LD_VAR 0 5
65666: PPUSH
65667: LD_VAR 0 6
65671: PPUSH
65672: CALL_OW 488
65676: NOT
65677: IFFALSE 65681
// continue ;
65679: GO 65659
// if GetResourceTypeXY ( _x , _y ) then
65681: LD_VAR 0 5
65685: PPUSH
65686: LD_VAR 0 6
65690: PPUSH
65691: CALL_OW 283
65695: IFFALSE 65735
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65697: LD_ADDR_VAR 0 4
65701: PUSH
65702: LD_VAR 0 4
65706: PPUSH
65707: LD_VAR 0 4
65711: PUSH
65712: LD_INT 1
65714: PLUS
65715: PPUSH
65716: LD_VAR 0 5
65720: PUSH
65721: LD_VAR 0 6
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PPUSH
65730: CALL_OW 1
65734: ST_TO_ADDR
// end ;
65735: GO 65659
65737: POP
65738: POP
65739: GO 65639
65741: POP
65742: POP
// end ;
65743: LD_VAR 0 4
65747: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65748: LD_INT 0
65750: PPUSH
65751: PPUSH
65752: PPUSH
65753: PPUSH
65754: PPUSH
65755: PPUSH
65756: PPUSH
65757: PPUSH
// if not units then
65758: LD_VAR 0 1
65762: NOT
65763: IFFALSE 65767
// exit ;
65765: GO 66291
// result := UnitFilter ( units , [ f_ok ] ) ;
65767: LD_ADDR_VAR 0 3
65771: PUSH
65772: LD_VAR 0 1
65776: PPUSH
65777: LD_INT 50
65779: PUSH
65780: EMPTY
65781: LIST
65782: PPUSH
65783: CALL_OW 72
65787: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65788: LD_ADDR_VAR 0 8
65792: PUSH
65793: LD_VAR 0 1
65797: PUSH
65798: LD_INT 1
65800: ARRAY
65801: PPUSH
65802: CALL_OW 255
65806: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65807: LD_ADDR_VAR 0 10
65811: PUSH
65812: LD_INT 29
65814: PUSH
65815: LD_INT 91
65817: PUSH
65818: LD_INT 49
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: ST_TO_ADDR
// if not result then
65826: LD_VAR 0 3
65830: NOT
65831: IFFALSE 65835
// exit ;
65833: GO 66291
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65835: LD_ADDR_VAR 0 5
65839: PUSH
65840: LD_INT 81
65842: PUSH
65843: LD_VAR 0 8
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PPUSH
65852: CALL_OW 69
65856: ST_TO_ADDR
// for i in result do
65857: LD_ADDR_VAR 0 4
65861: PUSH
65862: LD_VAR 0 3
65866: PUSH
65867: FOR_IN
65868: IFFALSE 66289
// begin tag := GetTag ( i ) + 1 ;
65870: LD_ADDR_VAR 0 9
65874: PUSH
65875: LD_VAR 0 4
65879: PPUSH
65880: CALL_OW 110
65884: PUSH
65885: LD_INT 1
65887: PLUS
65888: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65889: LD_ADDR_VAR 0 7
65893: PUSH
65894: LD_VAR 0 4
65898: PPUSH
65899: CALL_OW 250
65903: PPUSH
65904: LD_VAR 0 4
65908: PPUSH
65909: CALL_OW 251
65913: PPUSH
65914: LD_INT 6
65916: PPUSH
65917: CALL 65490 0 3
65921: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65922: LD_VAR 0 4
65926: PPUSH
65927: CALL_OW 247
65931: PUSH
65932: LD_INT 2
65934: EQUAL
65935: PUSH
65936: LD_VAR 0 7
65940: AND
65941: PUSH
65942: LD_VAR 0 4
65946: PPUSH
65947: CALL_OW 264
65951: PUSH
65952: LD_VAR 0 10
65956: IN
65957: NOT
65958: AND
65959: IFFALSE 65998
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65961: LD_VAR 0 4
65965: PPUSH
65966: LD_VAR 0 7
65970: PUSH
65971: LD_INT 1
65973: ARRAY
65974: PUSH
65975: LD_INT 1
65977: ARRAY
65978: PPUSH
65979: LD_VAR 0 7
65983: PUSH
65984: LD_INT 1
65986: ARRAY
65987: PUSH
65988: LD_INT 2
65990: ARRAY
65991: PPUSH
65992: CALL_OW 116
65996: GO 66287
// if path > tag then
65998: LD_VAR 0 2
66002: PUSH
66003: LD_VAR 0 9
66007: GREATER
66008: IFFALSE 66216
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66010: LD_ADDR_VAR 0 6
66014: PUSH
66015: LD_VAR 0 5
66019: PPUSH
66020: LD_INT 91
66022: PUSH
66023: LD_VAR 0 4
66027: PUSH
66028: LD_INT 8
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: LIST
66035: PPUSH
66036: CALL_OW 72
66040: ST_TO_ADDR
// if nearEnemy then
66041: LD_VAR 0 6
66045: IFFALSE 66114
// begin if GetWeapon ( i ) = ru_time_lapser then
66047: LD_VAR 0 4
66051: PPUSH
66052: CALL_OW 264
66056: PUSH
66057: LD_INT 49
66059: EQUAL
66060: IFFALSE 66088
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66062: LD_VAR 0 4
66066: PPUSH
66067: LD_VAR 0 6
66071: PPUSH
66072: LD_VAR 0 4
66076: PPUSH
66077: CALL_OW 74
66081: PPUSH
66082: CALL_OW 112
66086: GO 66112
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66088: LD_VAR 0 4
66092: PPUSH
66093: LD_VAR 0 6
66097: PPUSH
66098: LD_VAR 0 4
66102: PPUSH
66103: CALL_OW 74
66107: PPUSH
66108: CALL_OW 115
// end else
66112: GO 66214
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66114: LD_VAR 0 4
66118: PPUSH
66119: LD_VAR 0 2
66123: PUSH
66124: LD_VAR 0 9
66128: ARRAY
66129: PUSH
66130: LD_INT 1
66132: ARRAY
66133: PPUSH
66134: LD_VAR 0 2
66138: PUSH
66139: LD_VAR 0 9
66143: ARRAY
66144: PUSH
66145: LD_INT 2
66147: ARRAY
66148: PPUSH
66149: CALL_OW 297
66153: PUSH
66154: LD_INT 6
66156: GREATER
66157: IFFALSE 66200
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66159: LD_VAR 0 4
66163: PPUSH
66164: LD_VAR 0 2
66168: PUSH
66169: LD_VAR 0 9
66173: ARRAY
66174: PUSH
66175: LD_INT 1
66177: ARRAY
66178: PPUSH
66179: LD_VAR 0 2
66183: PUSH
66184: LD_VAR 0 9
66188: ARRAY
66189: PUSH
66190: LD_INT 2
66192: ARRAY
66193: PPUSH
66194: CALL_OW 114
66198: GO 66214
// SetTag ( i , tag ) ;
66200: LD_VAR 0 4
66204: PPUSH
66205: LD_VAR 0 9
66209: PPUSH
66210: CALL_OW 109
// end else
66214: GO 66287
// if enemy then
66216: LD_VAR 0 5
66220: IFFALSE 66287
// begin if GetWeapon ( i ) = ru_time_lapser then
66222: LD_VAR 0 4
66226: PPUSH
66227: CALL_OW 264
66231: PUSH
66232: LD_INT 49
66234: EQUAL
66235: IFFALSE 66263
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66237: LD_VAR 0 4
66241: PPUSH
66242: LD_VAR 0 5
66246: PPUSH
66247: LD_VAR 0 4
66251: PPUSH
66252: CALL_OW 74
66256: PPUSH
66257: CALL_OW 112
66261: GO 66287
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66263: LD_VAR 0 4
66267: PPUSH
66268: LD_VAR 0 5
66272: PPUSH
66273: LD_VAR 0 4
66277: PPUSH
66278: CALL_OW 74
66282: PPUSH
66283: CALL_OW 115
// end ; end ;
66287: GO 65867
66289: POP
66290: POP
// end ;
66291: LD_VAR 0 3
66295: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66296: LD_INT 0
66298: PPUSH
66299: PPUSH
66300: PPUSH
// if not unit or IsInUnit ( unit ) then
66301: LD_VAR 0 1
66305: NOT
66306: PUSH
66307: LD_VAR 0 1
66311: PPUSH
66312: CALL_OW 310
66316: OR
66317: IFFALSE 66321
// exit ;
66319: GO 66412
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66321: LD_ADDR_VAR 0 4
66325: PUSH
66326: LD_VAR 0 1
66330: PPUSH
66331: CALL_OW 250
66335: PPUSH
66336: LD_VAR 0 2
66340: PPUSH
66341: LD_INT 1
66343: PPUSH
66344: CALL_OW 272
66348: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66349: LD_ADDR_VAR 0 5
66353: PUSH
66354: LD_VAR 0 1
66358: PPUSH
66359: CALL_OW 251
66363: PPUSH
66364: LD_VAR 0 2
66368: PPUSH
66369: LD_INT 1
66371: PPUSH
66372: CALL_OW 273
66376: ST_TO_ADDR
// if ValidHex ( x , y ) then
66377: LD_VAR 0 4
66381: PPUSH
66382: LD_VAR 0 5
66386: PPUSH
66387: CALL_OW 488
66391: IFFALSE 66412
// ComTurnXY ( unit , x , y ) ;
66393: LD_VAR 0 1
66397: PPUSH
66398: LD_VAR 0 4
66402: PPUSH
66403: LD_VAR 0 5
66407: PPUSH
66408: CALL_OW 118
// end ;
66412: LD_VAR 0 3
66416: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66417: LD_INT 0
66419: PPUSH
66420: PPUSH
// result := false ;
66421: LD_ADDR_VAR 0 3
66425: PUSH
66426: LD_INT 0
66428: ST_TO_ADDR
// if not units then
66429: LD_VAR 0 2
66433: NOT
66434: IFFALSE 66438
// exit ;
66436: GO 66483
// for i in units do
66438: LD_ADDR_VAR 0 4
66442: PUSH
66443: LD_VAR 0 2
66447: PUSH
66448: FOR_IN
66449: IFFALSE 66481
// if See ( side , i ) then
66451: LD_VAR 0 1
66455: PPUSH
66456: LD_VAR 0 4
66460: PPUSH
66461: CALL_OW 292
66465: IFFALSE 66479
// begin result := true ;
66467: LD_ADDR_VAR 0 3
66471: PUSH
66472: LD_INT 1
66474: ST_TO_ADDR
// exit ;
66475: POP
66476: POP
66477: GO 66483
// end ;
66479: GO 66448
66481: POP
66482: POP
// end ;
66483: LD_VAR 0 3
66487: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66488: LD_INT 0
66490: PPUSH
66491: PPUSH
66492: PPUSH
66493: PPUSH
// if not unit or not points then
66494: LD_VAR 0 1
66498: NOT
66499: PUSH
66500: LD_VAR 0 2
66504: NOT
66505: OR
66506: IFFALSE 66510
// exit ;
66508: GO 66600
// dist := 99999 ;
66510: LD_ADDR_VAR 0 5
66514: PUSH
66515: LD_INT 99999
66517: ST_TO_ADDR
// for i in points do
66518: LD_ADDR_VAR 0 4
66522: PUSH
66523: LD_VAR 0 2
66527: PUSH
66528: FOR_IN
66529: IFFALSE 66598
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66531: LD_ADDR_VAR 0 6
66535: PUSH
66536: LD_VAR 0 1
66540: PPUSH
66541: LD_VAR 0 4
66545: PUSH
66546: LD_INT 1
66548: ARRAY
66549: PPUSH
66550: LD_VAR 0 4
66554: PUSH
66555: LD_INT 2
66557: ARRAY
66558: PPUSH
66559: CALL_OW 297
66563: ST_TO_ADDR
// if tmpDist < dist then
66564: LD_VAR 0 6
66568: PUSH
66569: LD_VAR 0 5
66573: LESS
66574: IFFALSE 66596
// begin result := i ;
66576: LD_ADDR_VAR 0 3
66580: PUSH
66581: LD_VAR 0 4
66585: ST_TO_ADDR
// dist := tmpDist ;
66586: LD_ADDR_VAR 0 5
66590: PUSH
66591: LD_VAR 0 6
66595: ST_TO_ADDR
// end ; end ;
66596: GO 66528
66598: POP
66599: POP
// end ;
66600: LD_VAR 0 3
66604: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66605: LD_INT 0
66607: PPUSH
// uc_side := side ;
66608: LD_ADDR_OWVAR 20
66612: PUSH
66613: LD_VAR 0 1
66617: ST_TO_ADDR
// uc_nation := 3 ;
66618: LD_ADDR_OWVAR 21
66622: PUSH
66623: LD_INT 3
66625: ST_TO_ADDR
// vc_chassis := 25 ;
66626: LD_ADDR_OWVAR 37
66630: PUSH
66631: LD_INT 25
66633: ST_TO_ADDR
// vc_engine := engine_siberite ;
66634: LD_ADDR_OWVAR 39
66638: PUSH
66639: LD_INT 3
66641: ST_TO_ADDR
// vc_control := control_computer ;
66642: LD_ADDR_OWVAR 38
66646: PUSH
66647: LD_INT 3
66649: ST_TO_ADDR
// vc_weapon := 59 ;
66650: LD_ADDR_OWVAR 40
66654: PUSH
66655: LD_INT 59
66657: ST_TO_ADDR
// result := CreateVehicle ;
66658: LD_ADDR_VAR 0 5
66662: PUSH
66663: CALL_OW 45
66667: ST_TO_ADDR
// SetDir ( result , d ) ;
66668: LD_VAR 0 5
66672: PPUSH
66673: LD_VAR 0 4
66677: PPUSH
66678: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66682: LD_VAR 0 5
66686: PPUSH
66687: LD_VAR 0 2
66691: PPUSH
66692: LD_VAR 0 3
66696: PPUSH
66697: LD_INT 0
66699: PPUSH
66700: CALL_OW 48
// end ;
66704: LD_VAR 0 5
66708: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66709: LD_INT 0
66711: PPUSH
66712: PPUSH
66713: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66714: LD_ADDR_VAR 0 2
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: LD_INT 0
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66737: LD_VAR 0 1
66741: NOT
66742: PUSH
66743: LD_VAR 0 1
66747: PPUSH
66748: CALL_OW 264
66752: PUSH
66753: LD_INT 12
66755: PUSH
66756: LD_INT 51
66758: PUSH
66759: LD_INT 32
66761: PUSH
66762: LD_INT 89
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: IN
66771: NOT
66772: OR
66773: IFFALSE 66777
// exit ;
66775: GO 66875
// for i := 1 to 3 do
66777: LD_ADDR_VAR 0 3
66781: PUSH
66782: DOUBLE
66783: LD_INT 1
66785: DEC
66786: ST_TO_ADDR
66787: LD_INT 3
66789: PUSH
66790: FOR_TO
66791: IFFALSE 66873
// begin tmp := GetCargo ( cargo , i ) ;
66793: LD_ADDR_VAR 0 4
66797: PUSH
66798: LD_VAR 0 1
66802: PPUSH
66803: LD_VAR 0 3
66807: PPUSH
66808: CALL_OW 289
66812: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66813: LD_ADDR_VAR 0 2
66817: PUSH
66818: LD_VAR 0 2
66822: PPUSH
66823: LD_VAR 0 3
66827: PPUSH
66828: LD_VAR 0 4
66832: PPUSH
66833: CALL_OW 1
66837: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66838: LD_ADDR_VAR 0 2
66842: PUSH
66843: LD_VAR 0 2
66847: PPUSH
66848: LD_INT 4
66850: PPUSH
66851: LD_VAR 0 2
66855: PUSH
66856: LD_INT 4
66858: ARRAY
66859: PUSH
66860: LD_VAR 0 4
66864: PLUS
66865: PPUSH
66866: CALL_OW 1
66870: ST_TO_ADDR
// end ;
66871: GO 66790
66873: POP
66874: POP
// end ;
66875: LD_VAR 0 2
66879: RET
// export function Length ( array ) ; begin
66880: LD_INT 0
66882: PPUSH
// result := array + 0 ;
66883: LD_ADDR_VAR 0 2
66887: PUSH
66888: LD_VAR 0 1
66892: PUSH
66893: LD_INT 0
66895: PLUS
66896: ST_TO_ADDR
// end ;
66897: LD_VAR 0 2
66901: RET
// export function PrepareArray ( array ) ; begin
66902: LD_INT 0
66904: PPUSH
// result := array diff 0 ;
66905: LD_ADDR_VAR 0 2
66909: PUSH
66910: LD_VAR 0 1
66914: PUSH
66915: LD_INT 0
66917: DIFF
66918: ST_TO_ADDR
// if not result [ 1 ] then
66919: LD_VAR 0 2
66923: PUSH
66924: LD_INT 1
66926: ARRAY
66927: NOT
66928: IFFALSE 66948
// result := Delete ( result , 1 ) ;
66930: LD_ADDR_VAR 0 2
66934: PUSH
66935: LD_VAR 0 2
66939: PPUSH
66940: LD_INT 1
66942: PPUSH
66943: CALL_OW 3
66947: ST_TO_ADDR
// end ;
66948: LD_VAR 0 2
66952: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66953: LD_INT 0
66955: PPUSH
66956: PPUSH
66957: PPUSH
66958: PPUSH
// sibRocketRange := 25 ;
66959: LD_ADDR_VAR 0 6
66963: PUSH
66964: LD_INT 25
66966: ST_TO_ADDR
// result := false ;
66967: LD_ADDR_VAR 0 4
66971: PUSH
66972: LD_INT 0
66974: ST_TO_ADDR
// for i := 0 to 5 do
66975: LD_ADDR_VAR 0 5
66979: PUSH
66980: DOUBLE
66981: LD_INT 0
66983: DEC
66984: ST_TO_ADDR
66985: LD_INT 5
66987: PUSH
66988: FOR_TO
66989: IFFALSE 67056
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66991: LD_VAR 0 1
66995: PPUSH
66996: LD_VAR 0 5
67000: PPUSH
67001: LD_VAR 0 6
67005: PPUSH
67006: CALL_OW 272
67010: PPUSH
67011: LD_VAR 0 2
67015: PPUSH
67016: LD_VAR 0 5
67020: PPUSH
67021: LD_VAR 0 6
67025: PPUSH
67026: CALL_OW 273
67030: PPUSH
67031: LD_VAR 0 3
67035: PPUSH
67036: CALL_OW 309
67040: IFFALSE 67054
// begin result := true ;
67042: LD_ADDR_VAR 0 4
67046: PUSH
67047: LD_INT 1
67049: ST_TO_ADDR
// exit ;
67050: POP
67051: POP
67052: GO 67058
// end ;
67054: GO 66988
67056: POP
67057: POP
// end ; end_of_file end_of_file
67058: LD_VAR 0 4
67062: RET
// every 0 0$1 do
67063: GO 67065
67065: DISABLE
// begin enable ;
67066: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
67067: LD_STRING updateTimer(
67069: PUSH
67070: LD_OWVAR 1
67074: STR
67075: PUSH
67076: LD_STRING );
67078: STR
67079: PPUSH
67080: CALL_OW 559
// end ;
67084: END
// export function SOS_MapStart ( ) ; begin
67085: LD_INT 0
67087: PPUSH
// if streamModeActive then
67088: LD_EXP 59
67092: IFFALSE 67101
// DefineStreamItems ( true ) ;
67094: LD_INT 1
67096: PPUSH
67097: CALL 68755 0 1
// UpdateFactoryWaypoints ( ) ;
67101: CALL 81616 0 0
// UpdateWarehouseGatheringPoints ( ) ;
67105: CALL 81873 0 0
// end ;
67109: LD_VAR 0 1
67113: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67114: LD_INT 0
67116: PPUSH
// if p2 = hack_mode then
67117: LD_VAR 0 2
67121: PUSH
67122: LD_INT 100
67124: EQUAL
67125: IFFALSE 68128
// begin if not StreamModeActive then
67127: LD_EXP 59
67131: NOT
67132: IFFALSE 67142
// StreamModeActive := true ;
67134: LD_ADDR_EXP 59
67138: PUSH
67139: LD_INT 1
67141: ST_TO_ADDR
// if p3 = 0 then
67142: LD_VAR 0 3
67146: PUSH
67147: LD_INT 0
67149: EQUAL
67150: IFFALSE 67156
// InitStreamMode ;
67152: CALL 68291 0 0
// if p3 = 1 then
67156: LD_VAR 0 3
67160: PUSH
67161: LD_INT 1
67163: EQUAL
67164: IFFALSE 67174
// sRocket := true ;
67166: LD_ADDR_EXP 64
67170: PUSH
67171: LD_INT 1
67173: ST_TO_ADDR
// if p3 = 2 then
67174: LD_VAR 0 3
67178: PUSH
67179: LD_INT 2
67181: EQUAL
67182: IFFALSE 67192
// sSpeed := true ;
67184: LD_ADDR_EXP 63
67188: PUSH
67189: LD_INT 1
67191: ST_TO_ADDR
// if p3 = 3 then
67192: LD_VAR 0 3
67196: PUSH
67197: LD_INT 3
67199: EQUAL
67200: IFFALSE 67210
// sEngine := true ;
67202: LD_ADDR_EXP 65
67206: PUSH
67207: LD_INT 1
67209: ST_TO_ADDR
// if p3 = 4 then
67210: LD_VAR 0 3
67214: PUSH
67215: LD_INT 4
67217: EQUAL
67218: IFFALSE 67228
// sSpec := true ;
67220: LD_ADDR_EXP 62
67224: PUSH
67225: LD_INT 1
67227: ST_TO_ADDR
// if p3 = 5 then
67228: LD_VAR 0 3
67232: PUSH
67233: LD_INT 5
67235: EQUAL
67236: IFFALSE 67246
// sLevel := true ;
67238: LD_ADDR_EXP 66
67242: PUSH
67243: LD_INT 1
67245: ST_TO_ADDR
// if p3 = 6 then
67246: LD_VAR 0 3
67250: PUSH
67251: LD_INT 6
67253: EQUAL
67254: IFFALSE 67264
// sArmoury := true ;
67256: LD_ADDR_EXP 67
67260: PUSH
67261: LD_INT 1
67263: ST_TO_ADDR
// if p3 = 7 then
67264: LD_VAR 0 3
67268: PUSH
67269: LD_INT 7
67271: EQUAL
67272: IFFALSE 67282
// sRadar := true ;
67274: LD_ADDR_EXP 68
67278: PUSH
67279: LD_INT 1
67281: ST_TO_ADDR
// if p3 = 8 then
67282: LD_VAR 0 3
67286: PUSH
67287: LD_INT 8
67289: EQUAL
67290: IFFALSE 67300
// sBunker := true ;
67292: LD_ADDR_EXP 69
67296: PUSH
67297: LD_INT 1
67299: ST_TO_ADDR
// if p3 = 9 then
67300: LD_VAR 0 3
67304: PUSH
67305: LD_INT 9
67307: EQUAL
67308: IFFALSE 67318
// sHack := true ;
67310: LD_ADDR_EXP 70
67314: PUSH
67315: LD_INT 1
67317: ST_TO_ADDR
// if p3 = 10 then
67318: LD_VAR 0 3
67322: PUSH
67323: LD_INT 10
67325: EQUAL
67326: IFFALSE 67336
// sFire := true ;
67328: LD_ADDR_EXP 71
67332: PUSH
67333: LD_INT 1
67335: ST_TO_ADDR
// if p3 = 11 then
67336: LD_VAR 0 3
67340: PUSH
67341: LD_INT 11
67343: EQUAL
67344: IFFALSE 67354
// sRefresh := true ;
67346: LD_ADDR_EXP 72
67350: PUSH
67351: LD_INT 1
67353: ST_TO_ADDR
// if p3 = 12 then
67354: LD_VAR 0 3
67358: PUSH
67359: LD_INT 12
67361: EQUAL
67362: IFFALSE 67372
// sExp := true ;
67364: LD_ADDR_EXP 73
67368: PUSH
67369: LD_INT 1
67371: ST_TO_ADDR
// if p3 = 13 then
67372: LD_VAR 0 3
67376: PUSH
67377: LD_INT 13
67379: EQUAL
67380: IFFALSE 67390
// sDepot := true ;
67382: LD_ADDR_EXP 74
67386: PUSH
67387: LD_INT 1
67389: ST_TO_ADDR
// if p3 = 14 then
67390: LD_VAR 0 3
67394: PUSH
67395: LD_INT 14
67397: EQUAL
67398: IFFALSE 67408
// sFlag := true ;
67400: LD_ADDR_EXP 75
67404: PUSH
67405: LD_INT 1
67407: ST_TO_ADDR
// if p3 = 15 then
67408: LD_VAR 0 3
67412: PUSH
67413: LD_INT 15
67415: EQUAL
67416: IFFALSE 67426
// sKamikadze := true ;
67418: LD_ADDR_EXP 83
67422: PUSH
67423: LD_INT 1
67425: ST_TO_ADDR
// if p3 = 16 then
67426: LD_VAR 0 3
67430: PUSH
67431: LD_INT 16
67433: EQUAL
67434: IFFALSE 67444
// sTroll := true ;
67436: LD_ADDR_EXP 84
67440: PUSH
67441: LD_INT 1
67443: ST_TO_ADDR
// if p3 = 17 then
67444: LD_VAR 0 3
67448: PUSH
67449: LD_INT 17
67451: EQUAL
67452: IFFALSE 67462
// sSlow := true ;
67454: LD_ADDR_EXP 85
67458: PUSH
67459: LD_INT 1
67461: ST_TO_ADDR
// if p3 = 18 then
67462: LD_VAR 0 3
67466: PUSH
67467: LD_INT 18
67469: EQUAL
67470: IFFALSE 67480
// sLack := true ;
67472: LD_ADDR_EXP 86
67476: PUSH
67477: LD_INT 1
67479: ST_TO_ADDR
// if p3 = 19 then
67480: LD_VAR 0 3
67484: PUSH
67485: LD_INT 19
67487: EQUAL
67488: IFFALSE 67498
// sTank := true ;
67490: LD_ADDR_EXP 88
67494: PUSH
67495: LD_INT 1
67497: ST_TO_ADDR
// if p3 = 20 then
67498: LD_VAR 0 3
67502: PUSH
67503: LD_INT 20
67505: EQUAL
67506: IFFALSE 67516
// sRemote := true ;
67508: LD_ADDR_EXP 89
67512: PUSH
67513: LD_INT 1
67515: ST_TO_ADDR
// if p3 = 21 then
67516: LD_VAR 0 3
67520: PUSH
67521: LD_INT 21
67523: EQUAL
67524: IFFALSE 67534
// sPowell := true ;
67526: LD_ADDR_EXP 90
67530: PUSH
67531: LD_INT 1
67533: ST_TO_ADDR
// if p3 = 22 then
67534: LD_VAR 0 3
67538: PUSH
67539: LD_INT 22
67541: EQUAL
67542: IFFALSE 67552
// sTeleport := true ;
67544: LD_ADDR_EXP 93
67548: PUSH
67549: LD_INT 1
67551: ST_TO_ADDR
// if p3 = 23 then
67552: LD_VAR 0 3
67556: PUSH
67557: LD_INT 23
67559: EQUAL
67560: IFFALSE 67570
// sOilTower := true ;
67562: LD_ADDR_EXP 95
67566: PUSH
67567: LD_INT 1
67569: ST_TO_ADDR
// if p3 = 24 then
67570: LD_VAR 0 3
67574: PUSH
67575: LD_INT 24
67577: EQUAL
67578: IFFALSE 67588
// sShovel := true ;
67580: LD_ADDR_EXP 96
67584: PUSH
67585: LD_INT 1
67587: ST_TO_ADDR
// if p3 = 25 then
67588: LD_VAR 0 3
67592: PUSH
67593: LD_INT 25
67595: EQUAL
67596: IFFALSE 67606
// sSheik := true ;
67598: LD_ADDR_EXP 97
67602: PUSH
67603: LD_INT 1
67605: ST_TO_ADDR
// if p3 = 26 then
67606: LD_VAR 0 3
67610: PUSH
67611: LD_INT 26
67613: EQUAL
67614: IFFALSE 67624
// sEarthquake := true ;
67616: LD_ADDR_EXP 99
67620: PUSH
67621: LD_INT 1
67623: ST_TO_ADDR
// if p3 = 27 then
67624: LD_VAR 0 3
67628: PUSH
67629: LD_INT 27
67631: EQUAL
67632: IFFALSE 67642
// sAI := true ;
67634: LD_ADDR_EXP 100
67638: PUSH
67639: LD_INT 1
67641: ST_TO_ADDR
// if p3 = 28 then
67642: LD_VAR 0 3
67646: PUSH
67647: LD_INT 28
67649: EQUAL
67650: IFFALSE 67660
// sCargo := true ;
67652: LD_ADDR_EXP 103
67656: PUSH
67657: LD_INT 1
67659: ST_TO_ADDR
// if p3 = 29 then
67660: LD_VAR 0 3
67664: PUSH
67665: LD_INT 29
67667: EQUAL
67668: IFFALSE 67678
// sDLaser := true ;
67670: LD_ADDR_EXP 104
67674: PUSH
67675: LD_INT 1
67677: ST_TO_ADDR
// if p3 = 30 then
67678: LD_VAR 0 3
67682: PUSH
67683: LD_INT 30
67685: EQUAL
67686: IFFALSE 67696
// sExchange := true ;
67688: LD_ADDR_EXP 105
67692: PUSH
67693: LD_INT 1
67695: ST_TO_ADDR
// if p3 = 31 then
67696: LD_VAR 0 3
67700: PUSH
67701: LD_INT 31
67703: EQUAL
67704: IFFALSE 67714
// sFac := true ;
67706: LD_ADDR_EXP 106
67710: PUSH
67711: LD_INT 1
67713: ST_TO_ADDR
// if p3 = 32 then
67714: LD_VAR 0 3
67718: PUSH
67719: LD_INT 32
67721: EQUAL
67722: IFFALSE 67732
// sPower := true ;
67724: LD_ADDR_EXP 107
67728: PUSH
67729: LD_INT 1
67731: ST_TO_ADDR
// if p3 = 33 then
67732: LD_VAR 0 3
67736: PUSH
67737: LD_INT 33
67739: EQUAL
67740: IFFALSE 67750
// sRandom := true ;
67742: LD_ADDR_EXP 108
67746: PUSH
67747: LD_INT 1
67749: ST_TO_ADDR
// if p3 = 34 then
67750: LD_VAR 0 3
67754: PUSH
67755: LD_INT 34
67757: EQUAL
67758: IFFALSE 67768
// sShield := true ;
67760: LD_ADDR_EXP 109
67764: PUSH
67765: LD_INT 1
67767: ST_TO_ADDR
// if p3 = 35 then
67768: LD_VAR 0 3
67772: PUSH
67773: LD_INT 35
67775: EQUAL
67776: IFFALSE 67786
// sTime := true ;
67778: LD_ADDR_EXP 110
67782: PUSH
67783: LD_INT 1
67785: ST_TO_ADDR
// if p3 = 36 then
67786: LD_VAR 0 3
67790: PUSH
67791: LD_INT 36
67793: EQUAL
67794: IFFALSE 67804
// sTools := true ;
67796: LD_ADDR_EXP 111
67800: PUSH
67801: LD_INT 1
67803: ST_TO_ADDR
// if p3 = 101 then
67804: LD_VAR 0 3
67808: PUSH
67809: LD_INT 101
67811: EQUAL
67812: IFFALSE 67822
// sSold := true ;
67814: LD_ADDR_EXP 76
67818: PUSH
67819: LD_INT 1
67821: ST_TO_ADDR
// if p3 = 102 then
67822: LD_VAR 0 3
67826: PUSH
67827: LD_INT 102
67829: EQUAL
67830: IFFALSE 67840
// sDiff := true ;
67832: LD_ADDR_EXP 77
67836: PUSH
67837: LD_INT 1
67839: ST_TO_ADDR
// if p3 = 103 then
67840: LD_VAR 0 3
67844: PUSH
67845: LD_INT 103
67847: EQUAL
67848: IFFALSE 67858
// sFog := true ;
67850: LD_ADDR_EXP 80
67854: PUSH
67855: LD_INT 1
67857: ST_TO_ADDR
// if p3 = 104 then
67858: LD_VAR 0 3
67862: PUSH
67863: LD_INT 104
67865: EQUAL
67866: IFFALSE 67876
// sReset := true ;
67868: LD_ADDR_EXP 81
67872: PUSH
67873: LD_INT 1
67875: ST_TO_ADDR
// if p3 = 105 then
67876: LD_VAR 0 3
67880: PUSH
67881: LD_INT 105
67883: EQUAL
67884: IFFALSE 67894
// sSun := true ;
67886: LD_ADDR_EXP 82
67890: PUSH
67891: LD_INT 1
67893: ST_TO_ADDR
// if p3 = 106 then
67894: LD_VAR 0 3
67898: PUSH
67899: LD_INT 106
67901: EQUAL
67902: IFFALSE 67912
// sTiger := true ;
67904: LD_ADDR_EXP 78
67908: PUSH
67909: LD_INT 1
67911: ST_TO_ADDR
// if p3 = 107 then
67912: LD_VAR 0 3
67916: PUSH
67917: LD_INT 107
67919: EQUAL
67920: IFFALSE 67930
// sBomb := true ;
67922: LD_ADDR_EXP 79
67926: PUSH
67927: LD_INT 1
67929: ST_TO_ADDR
// if p3 = 108 then
67930: LD_VAR 0 3
67934: PUSH
67935: LD_INT 108
67937: EQUAL
67938: IFFALSE 67948
// sWound := true ;
67940: LD_ADDR_EXP 87
67944: PUSH
67945: LD_INT 1
67947: ST_TO_ADDR
// if p3 = 109 then
67948: LD_VAR 0 3
67952: PUSH
67953: LD_INT 109
67955: EQUAL
67956: IFFALSE 67966
// sBetray := true ;
67958: LD_ADDR_EXP 91
67962: PUSH
67963: LD_INT 1
67965: ST_TO_ADDR
// if p3 = 110 then
67966: LD_VAR 0 3
67970: PUSH
67971: LD_INT 110
67973: EQUAL
67974: IFFALSE 67984
// sContamin := true ;
67976: LD_ADDR_EXP 92
67980: PUSH
67981: LD_INT 1
67983: ST_TO_ADDR
// if p3 = 111 then
67984: LD_VAR 0 3
67988: PUSH
67989: LD_INT 111
67991: EQUAL
67992: IFFALSE 68002
// sOil := true ;
67994: LD_ADDR_EXP 94
67998: PUSH
67999: LD_INT 1
68001: ST_TO_ADDR
// if p3 = 112 then
68002: LD_VAR 0 3
68006: PUSH
68007: LD_INT 112
68009: EQUAL
68010: IFFALSE 68020
// sStu := true ;
68012: LD_ADDR_EXP 98
68016: PUSH
68017: LD_INT 1
68019: ST_TO_ADDR
// if p3 = 113 then
68020: LD_VAR 0 3
68024: PUSH
68025: LD_INT 113
68027: EQUAL
68028: IFFALSE 68038
// sBazooka := true ;
68030: LD_ADDR_EXP 101
68034: PUSH
68035: LD_INT 1
68037: ST_TO_ADDR
// if p3 = 114 then
68038: LD_VAR 0 3
68042: PUSH
68043: LD_INT 114
68045: EQUAL
68046: IFFALSE 68056
// sMortar := true ;
68048: LD_ADDR_EXP 102
68052: PUSH
68053: LD_INT 1
68055: ST_TO_ADDR
// if p3 = 115 then
68056: LD_VAR 0 3
68060: PUSH
68061: LD_INT 115
68063: EQUAL
68064: IFFALSE 68074
// sRanger := true ;
68066: LD_ADDR_EXP 112
68070: PUSH
68071: LD_INT 1
68073: ST_TO_ADDR
// if p3 = 116 then
68074: LD_VAR 0 3
68078: PUSH
68079: LD_INT 116
68081: EQUAL
68082: IFFALSE 68092
// sComputer := true ;
68084: LD_ADDR_EXP 113
68088: PUSH
68089: LD_INT 1
68091: ST_TO_ADDR
// if p3 = 117 then
68092: LD_VAR 0 3
68096: PUSH
68097: LD_INT 117
68099: EQUAL
68100: IFFALSE 68110
// s30 := true ;
68102: LD_ADDR_EXP 114
68106: PUSH
68107: LD_INT 1
68109: ST_TO_ADDR
// if p3 = 118 then
68110: LD_VAR 0 3
68114: PUSH
68115: LD_INT 118
68117: EQUAL
68118: IFFALSE 68128
// s60 := true ;
68120: LD_ADDR_EXP 115
68124: PUSH
68125: LD_INT 1
68127: ST_TO_ADDR
// end ; if p2 = stream_mode then
68128: LD_VAR 0 2
68132: PUSH
68133: LD_INT 101
68135: EQUAL
68136: IFFALSE 68264
// begin case p3 of 1 :
68138: LD_VAR 0 3
68142: PUSH
68143: LD_INT 1
68145: DOUBLE
68146: EQUAL
68147: IFTRUE 68151
68149: GO 68158
68151: POP
// hHackUnlimitedResources ; 2 :
68152: CALL 80362 0 0
68156: GO 68264
68158: LD_INT 2
68160: DOUBLE
68161: EQUAL
68162: IFTRUE 68166
68164: GO 68173
68166: POP
// hHackSetLevel10 ; 3 :
68167: CALL 80495 0 0
68171: GO 68264
68173: LD_INT 3
68175: DOUBLE
68176: EQUAL
68177: IFTRUE 68181
68179: GO 68188
68181: POP
// hHackSetLevel10YourUnits ; 4 :
68182: CALL 80580 0 0
68186: GO 68264
68188: LD_INT 4
68190: DOUBLE
68191: EQUAL
68192: IFTRUE 68196
68194: GO 68203
68196: POP
// hHackInvincible ; 5 :
68197: CALL 81028 0 0
68201: GO 68264
68203: LD_INT 5
68205: DOUBLE
68206: EQUAL
68207: IFTRUE 68211
68209: GO 68218
68211: POP
// hHackInvisible ; 6 :
68212: CALL 81139 0 0
68216: GO 68264
68218: LD_INT 6
68220: DOUBLE
68221: EQUAL
68222: IFTRUE 68226
68224: GO 68233
68226: POP
// hHackChangeYourSide ; 7 :
68227: CALL 81196 0 0
68231: GO 68264
68233: LD_INT 7
68235: DOUBLE
68236: EQUAL
68237: IFTRUE 68241
68239: GO 68248
68241: POP
// hHackChangeUnitSide ; 8 :
68242: CALL 81238 0 0
68246: GO 68264
68248: LD_INT 8
68250: DOUBLE
68251: EQUAL
68252: IFTRUE 68256
68254: GO 68263
68256: POP
// hHackFog ; end ;
68257: CALL 81339 0 0
68261: GO 68264
68263: POP
// end ; end ;
68264: LD_VAR 0 7
68268: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
68269: GO 68271
68271: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
68272: LD_STRING initStreamRollete();
68274: PPUSH
68275: CALL_OW 559
// InitStreamMode ;
68279: CALL 68291 0 0
// DefineStreamItems ( false ) ;
68283: LD_INT 0
68285: PPUSH
68286: CALL 68755 0 1
// end ;
68290: END
// function InitStreamMode ; begin
68291: LD_INT 0
68293: PPUSH
// streamModeActive := false ;
68294: LD_ADDR_EXP 59
68298: PUSH
68299: LD_INT 0
68301: ST_TO_ADDR
// normalCounter := 36 ;
68302: LD_ADDR_EXP 60
68306: PUSH
68307: LD_INT 36
68309: ST_TO_ADDR
// hardcoreCounter := 18 ;
68310: LD_ADDR_EXP 61
68314: PUSH
68315: LD_INT 18
68317: ST_TO_ADDR
// sRocket := false ;
68318: LD_ADDR_EXP 64
68322: PUSH
68323: LD_INT 0
68325: ST_TO_ADDR
// sSpeed := false ;
68326: LD_ADDR_EXP 63
68330: PUSH
68331: LD_INT 0
68333: ST_TO_ADDR
// sEngine := false ;
68334: LD_ADDR_EXP 65
68338: PUSH
68339: LD_INT 0
68341: ST_TO_ADDR
// sSpec := false ;
68342: LD_ADDR_EXP 62
68346: PUSH
68347: LD_INT 0
68349: ST_TO_ADDR
// sLevel := false ;
68350: LD_ADDR_EXP 66
68354: PUSH
68355: LD_INT 0
68357: ST_TO_ADDR
// sArmoury := false ;
68358: LD_ADDR_EXP 67
68362: PUSH
68363: LD_INT 0
68365: ST_TO_ADDR
// sRadar := false ;
68366: LD_ADDR_EXP 68
68370: PUSH
68371: LD_INT 0
68373: ST_TO_ADDR
// sBunker := false ;
68374: LD_ADDR_EXP 69
68378: PUSH
68379: LD_INT 0
68381: ST_TO_ADDR
// sHack := false ;
68382: LD_ADDR_EXP 70
68386: PUSH
68387: LD_INT 0
68389: ST_TO_ADDR
// sFire := false ;
68390: LD_ADDR_EXP 71
68394: PUSH
68395: LD_INT 0
68397: ST_TO_ADDR
// sRefresh := false ;
68398: LD_ADDR_EXP 72
68402: PUSH
68403: LD_INT 0
68405: ST_TO_ADDR
// sExp := false ;
68406: LD_ADDR_EXP 73
68410: PUSH
68411: LD_INT 0
68413: ST_TO_ADDR
// sDepot := false ;
68414: LD_ADDR_EXP 74
68418: PUSH
68419: LD_INT 0
68421: ST_TO_ADDR
// sFlag := false ;
68422: LD_ADDR_EXP 75
68426: PUSH
68427: LD_INT 0
68429: ST_TO_ADDR
// sKamikadze := false ;
68430: LD_ADDR_EXP 83
68434: PUSH
68435: LD_INT 0
68437: ST_TO_ADDR
// sTroll := false ;
68438: LD_ADDR_EXP 84
68442: PUSH
68443: LD_INT 0
68445: ST_TO_ADDR
// sSlow := false ;
68446: LD_ADDR_EXP 85
68450: PUSH
68451: LD_INT 0
68453: ST_TO_ADDR
// sLack := false ;
68454: LD_ADDR_EXP 86
68458: PUSH
68459: LD_INT 0
68461: ST_TO_ADDR
// sTank := false ;
68462: LD_ADDR_EXP 88
68466: PUSH
68467: LD_INT 0
68469: ST_TO_ADDR
// sRemote := false ;
68470: LD_ADDR_EXP 89
68474: PUSH
68475: LD_INT 0
68477: ST_TO_ADDR
// sPowell := false ;
68478: LD_ADDR_EXP 90
68482: PUSH
68483: LD_INT 0
68485: ST_TO_ADDR
// sTeleport := false ;
68486: LD_ADDR_EXP 93
68490: PUSH
68491: LD_INT 0
68493: ST_TO_ADDR
// sOilTower := false ;
68494: LD_ADDR_EXP 95
68498: PUSH
68499: LD_INT 0
68501: ST_TO_ADDR
// sShovel := false ;
68502: LD_ADDR_EXP 96
68506: PUSH
68507: LD_INT 0
68509: ST_TO_ADDR
// sSheik := false ;
68510: LD_ADDR_EXP 97
68514: PUSH
68515: LD_INT 0
68517: ST_TO_ADDR
// sEarthquake := false ;
68518: LD_ADDR_EXP 99
68522: PUSH
68523: LD_INT 0
68525: ST_TO_ADDR
// sAI := false ;
68526: LD_ADDR_EXP 100
68530: PUSH
68531: LD_INT 0
68533: ST_TO_ADDR
// sCargo := false ;
68534: LD_ADDR_EXP 103
68538: PUSH
68539: LD_INT 0
68541: ST_TO_ADDR
// sDLaser := false ;
68542: LD_ADDR_EXP 104
68546: PUSH
68547: LD_INT 0
68549: ST_TO_ADDR
// sExchange := false ;
68550: LD_ADDR_EXP 105
68554: PUSH
68555: LD_INT 0
68557: ST_TO_ADDR
// sFac := false ;
68558: LD_ADDR_EXP 106
68562: PUSH
68563: LD_INT 0
68565: ST_TO_ADDR
// sPower := false ;
68566: LD_ADDR_EXP 107
68570: PUSH
68571: LD_INT 0
68573: ST_TO_ADDR
// sRandom := false ;
68574: LD_ADDR_EXP 108
68578: PUSH
68579: LD_INT 0
68581: ST_TO_ADDR
// sShield := false ;
68582: LD_ADDR_EXP 109
68586: PUSH
68587: LD_INT 0
68589: ST_TO_ADDR
// sTime := false ;
68590: LD_ADDR_EXP 110
68594: PUSH
68595: LD_INT 0
68597: ST_TO_ADDR
// sTools := false ;
68598: LD_ADDR_EXP 111
68602: PUSH
68603: LD_INT 0
68605: ST_TO_ADDR
// sSold := false ;
68606: LD_ADDR_EXP 76
68610: PUSH
68611: LD_INT 0
68613: ST_TO_ADDR
// sDiff := false ;
68614: LD_ADDR_EXP 77
68618: PUSH
68619: LD_INT 0
68621: ST_TO_ADDR
// sFog := false ;
68622: LD_ADDR_EXP 80
68626: PUSH
68627: LD_INT 0
68629: ST_TO_ADDR
// sReset := false ;
68630: LD_ADDR_EXP 81
68634: PUSH
68635: LD_INT 0
68637: ST_TO_ADDR
// sSun := false ;
68638: LD_ADDR_EXP 82
68642: PUSH
68643: LD_INT 0
68645: ST_TO_ADDR
// sTiger := false ;
68646: LD_ADDR_EXP 78
68650: PUSH
68651: LD_INT 0
68653: ST_TO_ADDR
// sBomb := false ;
68654: LD_ADDR_EXP 79
68658: PUSH
68659: LD_INT 0
68661: ST_TO_ADDR
// sWound := false ;
68662: LD_ADDR_EXP 87
68666: PUSH
68667: LD_INT 0
68669: ST_TO_ADDR
// sBetray := false ;
68670: LD_ADDR_EXP 91
68674: PUSH
68675: LD_INT 0
68677: ST_TO_ADDR
// sContamin := false ;
68678: LD_ADDR_EXP 92
68682: PUSH
68683: LD_INT 0
68685: ST_TO_ADDR
// sOil := false ;
68686: LD_ADDR_EXP 94
68690: PUSH
68691: LD_INT 0
68693: ST_TO_ADDR
// sStu := false ;
68694: LD_ADDR_EXP 98
68698: PUSH
68699: LD_INT 0
68701: ST_TO_ADDR
// sBazooka := false ;
68702: LD_ADDR_EXP 101
68706: PUSH
68707: LD_INT 0
68709: ST_TO_ADDR
// sMortar := false ;
68710: LD_ADDR_EXP 102
68714: PUSH
68715: LD_INT 0
68717: ST_TO_ADDR
// sRanger := false ;
68718: LD_ADDR_EXP 112
68722: PUSH
68723: LD_INT 0
68725: ST_TO_ADDR
// sComputer := false ;
68726: LD_ADDR_EXP 113
68730: PUSH
68731: LD_INT 0
68733: ST_TO_ADDR
// s30 := false ;
68734: LD_ADDR_EXP 114
68738: PUSH
68739: LD_INT 0
68741: ST_TO_ADDR
// s60 := false ;
68742: LD_ADDR_EXP 115
68746: PUSH
68747: LD_INT 0
68749: ST_TO_ADDR
// end ;
68750: LD_VAR 0 1
68754: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
68755: LD_INT 0
68757: PPUSH
68758: PPUSH
68759: PPUSH
68760: PPUSH
68761: PPUSH
68762: PPUSH
68763: PPUSH
// result := [ ] ;
68764: LD_ADDR_VAR 0 2
68768: PUSH
68769: EMPTY
68770: ST_TO_ADDR
// if campaign_id = 1 then
68771: LD_OWVAR 69
68775: PUSH
68776: LD_INT 1
68778: EQUAL
68779: IFFALSE 71945
// begin case mission_number of 1 :
68781: LD_OWVAR 70
68785: PUSH
68786: LD_INT 1
68788: DOUBLE
68789: EQUAL
68790: IFTRUE 68794
68792: GO 68870
68794: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
68795: LD_ADDR_VAR 0 2
68799: PUSH
68800: LD_INT 2
68802: PUSH
68803: LD_INT 4
68805: PUSH
68806: LD_INT 11
68808: PUSH
68809: LD_INT 12
68811: PUSH
68812: LD_INT 15
68814: PUSH
68815: LD_INT 16
68817: PUSH
68818: LD_INT 22
68820: PUSH
68821: LD_INT 23
68823: PUSH
68824: LD_INT 26
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 101
68840: PUSH
68841: LD_INT 102
68843: PUSH
68844: LD_INT 106
68846: PUSH
68847: LD_INT 116
68849: PUSH
68850: LD_INT 117
68852: PUSH
68853: LD_INT 118
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: ST_TO_ADDR
68868: GO 71943
68870: LD_INT 2
68872: DOUBLE
68873: EQUAL
68874: IFTRUE 68878
68876: GO 68962
68878: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
68879: LD_ADDR_VAR 0 2
68883: PUSH
68884: LD_INT 2
68886: PUSH
68887: LD_INT 4
68889: PUSH
68890: LD_INT 11
68892: PUSH
68893: LD_INT 12
68895: PUSH
68896: LD_INT 15
68898: PUSH
68899: LD_INT 16
68901: PUSH
68902: LD_INT 22
68904: PUSH
68905: LD_INT 23
68907: PUSH
68908: LD_INT 26
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 101
68924: PUSH
68925: LD_INT 102
68927: PUSH
68928: LD_INT 105
68930: PUSH
68931: LD_INT 106
68933: PUSH
68934: LD_INT 108
68936: PUSH
68937: LD_INT 116
68939: PUSH
68940: LD_INT 117
68942: PUSH
68943: LD_INT 118
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: ST_TO_ADDR
68960: GO 71943
68962: LD_INT 3
68964: DOUBLE
68965: EQUAL
68966: IFTRUE 68970
68968: GO 69058
68970: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
68971: LD_ADDR_VAR 0 2
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: LD_INT 4
68981: PUSH
68982: LD_INT 5
68984: PUSH
68985: LD_INT 11
68987: PUSH
68988: LD_INT 12
68990: PUSH
68991: LD_INT 15
68993: PUSH
68994: LD_INT 16
68996: PUSH
68997: LD_INT 22
68999: PUSH
69000: LD_INT 26
69002: PUSH
69003: LD_INT 36
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 101
69020: PUSH
69021: LD_INT 102
69023: PUSH
69024: LD_INT 105
69026: PUSH
69027: LD_INT 106
69029: PUSH
69030: LD_INT 108
69032: PUSH
69033: LD_INT 116
69035: PUSH
69036: LD_INT 117
69038: PUSH
69039: LD_INT 118
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: ST_TO_ADDR
69056: GO 71943
69058: LD_INT 4
69060: DOUBLE
69061: EQUAL
69062: IFTRUE 69066
69064: GO 69162
69066: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
69067: LD_ADDR_VAR 0 2
69071: PUSH
69072: LD_INT 2
69074: PUSH
69075: LD_INT 4
69077: PUSH
69078: LD_INT 5
69080: PUSH
69081: LD_INT 8
69083: PUSH
69084: LD_INT 11
69086: PUSH
69087: LD_INT 12
69089: PUSH
69090: LD_INT 15
69092: PUSH
69093: LD_INT 16
69095: PUSH
69096: LD_INT 22
69098: PUSH
69099: LD_INT 23
69101: PUSH
69102: LD_INT 26
69104: PUSH
69105: LD_INT 36
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 101
69124: PUSH
69125: LD_INT 102
69127: PUSH
69128: LD_INT 105
69130: PUSH
69131: LD_INT 106
69133: PUSH
69134: LD_INT 108
69136: PUSH
69137: LD_INT 116
69139: PUSH
69140: LD_INT 117
69142: PUSH
69143: LD_INT 118
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: ST_TO_ADDR
69160: GO 71943
69162: LD_INT 5
69164: DOUBLE
69165: EQUAL
69166: IFTRUE 69170
69168: GO 69282
69170: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
69171: LD_ADDR_VAR 0 2
69175: PUSH
69176: LD_INT 2
69178: PUSH
69179: LD_INT 4
69181: PUSH
69182: LD_INT 5
69184: PUSH
69185: LD_INT 6
69187: PUSH
69188: LD_INT 8
69190: PUSH
69191: LD_INT 11
69193: PUSH
69194: LD_INT 12
69196: PUSH
69197: LD_INT 15
69199: PUSH
69200: LD_INT 16
69202: PUSH
69203: LD_INT 22
69205: PUSH
69206: LD_INT 23
69208: PUSH
69209: LD_INT 25
69211: PUSH
69212: LD_INT 26
69214: PUSH
69215: LD_INT 36
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 101
69236: PUSH
69237: LD_INT 102
69239: PUSH
69240: LD_INT 105
69242: PUSH
69243: LD_INT 106
69245: PUSH
69246: LD_INT 108
69248: PUSH
69249: LD_INT 109
69251: PUSH
69252: LD_INT 112
69254: PUSH
69255: LD_INT 116
69257: PUSH
69258: LD_INT 117
69260: PUSH
69261: LD_INT 118
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: ST_TO_ADDR
69280: GO 71943
69282: LD_INT 6
69284: DOUBLE
69285: EQUAL
69286: IFTRUE 69290
69288: GO 69422
69290: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
69291: LD_ADDR_VAR 0 2
69295: PUSH
69296: LD_INT 2
69298: PUSH
69299: LD_INT 4
69301: PUSH
69302: LD_INT 5
69304: PUSH
69305: LD_INT 6
69307: PUSH
69308: LD_INT 8
69310: PUSH
69311: LD_INT 11
69313: PUSH
69314: LD_INT 12
69316: PUSH
69317: LD_INT 15
69319: PUSH
69320: LD_INT 16
69322: PUSH
69323: LD_INT 20
69325: PUSH
69326: LD_INT 21
69328: PUSH
69329: LD_INT 22
69331: PUSH
69332: LD_INT 23
69334: PUSH
69335: LD_INT 25
69337: PUSH
69338: LD_INT 26
69340: PUSH
69341: LD_INT 30
69343: PUSH
69344: LD_INT 31
69346: PUSH
69347: LD_INT 32
69349: PUSH
69350: LD_INT 36
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 101
69376: PUSH
69377: LD_INT 102
69379: PUSH
69380: LD_INT 105
69382: PUSH
69383: LD_INT 106
69385: PUSH
69386: LD_INT 108
69388: PUSH
69389: LD_INT 109
69391: PUSH
69392: LD_INT 112
69394: PUSH
69395: LD_INT 116
69397: PUSH
69398: LD_INT 117
69400: PUSH
69401: LD_INT 118
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: ST_TO_ADDR
69420: GO 71943
69422: LD_INT 7
69424: DOUBLE
69425: EQUAL
69426: IFTRUE 69430
69428: GO 69542
69430: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
69431: LD_ADDR_VAR 0 2
69435: PUSH
69436: LD_INT 2
69438: PUSH
69439: LD_INT 4
69441: PUSH
69442: LD_INT 5
69444: PUSH
69445: LD_INT 7
69447: PUSH
69448: LD_INT 11
69450: PUSH
69451: LD_INT 12
69453: PUSH
69454: LD_INT 15
69456: PUSH
69457: LD_INT 16
69459: PUSH
69460: LD_INT 20
69462: PUSH
69463: LD_INT 21
69465: PUSH
69466: LD_INT 22
69468: PUSH
69469: LD_INT 23
69471: PUSH
69472: LD_INT 25
69474: PUSH
69475: LD_INT 26
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 101
69496: PUSH
69497: LD_INT 102
69499: PUSH
69500: LD_INT 103
69502: PUSH
69503: LD_INT 105
69505: PUSH
69506: LD_INT 106
69508: PUSH
69509: LD_INT 108
69511: PUSH
69512: LD_INT 112
69514: PUSH
69515: LD_INT 116
69517: PUSH
69518: LD_INT 117
69520: PUSH
69521: LD_INT 118
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: ST_TO_ADDR
69540: GO 71943
69542: LD_INT 8
69544: DOUBLE
69545: EQUAL
69546: IFTRUE 69550
69548: GO 69690
69550: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
69551: LD_ADDR_VAR 0 2
69555: PUSH
69556: LD_INT 2
69558: PUSH
69559: LD_INT 4
69561: PUSH
69562: LD_INT 5
69564: PUSH
69565: LD_INT 6
69567: PUSH
69568: LD_INT 7
69570: PUSH
69571: LD_INT 8
69573: PUSH
69574: LD_INT 11
69576: PUSH
69577: LD_INT 12
69579: PUSH
69580: LD_INT 15
69582: PUSH
69583: LD_INT 16
69585: PUSH
69586: LD_INT 20
69588: PUSH
69589: LD_INT 21
69591: PUSH
69592: LD_INT 22
69594: PUSH
69595: LD_INT 23
69597: PUSH
69598: LD_INT 25
69600: PUSH
69601: LD_INT 26
69603: PUSH
69604: LD_INT 30
69606: PUSH
69607: LD_INT 31
69609: PUSH
69610: LD_INT 32
69612: PUSH
69613: LD_INT 36
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 101
69640: PUSH
69641: LD_INT 102
69643: PUSH
69644: LD_INT 103
69646: PUSH
69647: LD_INT 105
69649: PUSH
69650: LD_INT 106
69652: PUSH
69653: LD_INT 108
69655: PUSH
69656: LD_INT 109
69658: PUSH
69659: LD_INT 112
69661: PUSH
69662: LD_INT 116
69664: PUSH
69665: LD_INT 117
69667: PUSH
69668: LD_INT 118
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: ST_TO_ADDR
69688: GO 71943
69690: LD_INT 9
69692: DOUBLE
69693: EQUAL
69694: IFTRUE 69698
69696: GO 69846
69698: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
69699: LD_ADDR_VAR 0 2
69703: PUSH
69704: LD_INT 2
69706: PUSH
69707: LD_INT 4
69709: PUSH
69710: LD_INT 5
69712: PUSH
69713: LD_INT 6
69715: PUSH
69716: LD_INT 7
69718: PUSH
69719: LD_INT 8
69721: PUSH
69722: LD_INT 11
69724: PUSH
69725: LD_INT 12
69727: PUSH
69728: LD_INT 15
69730: PUSH
69731: LD_INT 16
69733: PUSH
69734: LD_INT 20
69736: PUSH
69737: LD_INT 21
69739: PUSH
69740: LD_INT 22
69742: PUSH
69743: LD_INT 23
69745: PUSH
69746: LD_INT 25
69748: PUSH
69749: LD_INT 26
69751: PUSH
69752: LD_INT 28
69754: PUSH
69755: LD_INT 30
69757: PUSH
69758: LD_INT 31
69760: PUSH
69761: LD_INT 32
69763: PUSH
69764: LD_INT 36
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 101
69792: PUSH
69793: LD_INT 102
69795: PUSH
69796: LD_INT 103
69798: PUSH
69799: LD_INT 105
69801: PUSH
69802: LD_INT 106
69804: PUSH
69805: LD_INT 108
69807: PUSH
69808: LD_INT 109
69810: PUSH
69811: LD_INT 112
69813: PUSH
69814: LD_INT 114
69816: PUSH
69817: LD_INT 116
69819: PUSH
69820: LD_INT 117
69822: PUSH
69823: LD_INT 118
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: ST_TO_ADDR
69844: GO 71943
69846: LD_INT 10
69848: DOUBLE
69849: EQUAL
69850: IFTRUE 69854
69852: GO 70050
69854: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
69855: LD_ADDR_VAR 0 2
69859: PUSH
69860: LD_INT 2
69862: PUSH
69863: LD_INT 4
69865: PUSH
69866: LD_INT 5
69868: PUSH
69869: LD_INT 6
69871: PUSH
69872: LD_INT 7
69874: PUSH
69875: LD_INT 8
69877: PUSH
69878: LD_INT 9
69880: PUSH
69881: LD_INT 10
69883: PUSH
69884: LD_INT 11
69886: PUSH
69887: LD_INT 12
69889: PUSH
69890: LD_INT 13
69892: PUSH
69893: LD_INT 14
69895: PUSH
69896: LD_INT 15
69898: PUSH
69899: LD_INT 16
69901: PUSH
69902: LD_INT 17
69904: PUSH
69905: LD_INT 18
69907: PUSH
69908: LD_INT 19
69910: PUSH
69911: LD_INT 20
69913: PUSH
69914: LD_INT 21
69916: PUSH
69917: LD_INT 22
69919: PUSH
69920: LD_INT 23
69922: PUSH
69923: LD_INT 24
69925: PUSH
69926: LD_INT 25
69928: PUSH
69929: LD_INT 26
69931: PUSH
69932: LD_INT 28
69934: PUSH
69935: LD_INT 30
69937: PUSH
69938: LD_INT 31
69940: PUSH
69941: LD_INT 32
69943: PUSH
69944: LD_INT 36
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 101
69980: PUSH
69981: LD_INT 102
69983: PUSH
69984: LD_INT 103
69986: PUSH
69987: LD_INT 104
69989: PUSH
69990: LD_INT 105
69992: PUSH
69993: LD_INT 106
69995: PUSH
69996: LD_INT 107
69998: PUSH
69999: LD_INT 108
70001: PUSH
70002: LD_INT 109
70004: PUSH
70005: LD_INT 110
70007: PUSH
70008: LD_INT 111
70010: PUSH
70011: LD_INT 112
70013: PUSH
70014: LD_INT 114
70016: PUSH
70017: LD_INT 116
70019: PUSH
70020: LD_INT 117
70022: PUSH
70023: LD_INT 118
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: ST_TO_ADDR
70048: GO 71943
70050: LD_INT 11
70052: DOUBLE
70053: EQUAL
70054: IFTRUE 70058
70056: GO 70262
70058: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
70059: LD_ADDR_VAR 0 2
70063: PUSH
70064: LD_INT 2
70066: PUSH
70067: LD_INT 3
70069: PUSH
70070: LD_INT 4
70072: PUSH
70073: LD_INT 5
70075: PUSH
70076: LD_INT 6
70078: PUSH
70079: LD_INT 7
70081: PUSH
70082: LD_INT 8
70084: PUSH
70085: LD_INT 9
70087: PUSH
70088: LD_INT 10
70090: PUSH
70091: LD_INT 11
70093: PUSH
70094: LD_INT 12
70096: PUSH
70097: LD_INT 13
70099: PUSH
70100: LD_INT 14
70102: PUSH
70103: LD_INT 15
70105: PUSH
70106: LD_INT 16
70108: PUSH
70109: LD_INT 17
70111: PUSH
70112: LD_INT 18
70114: PUSH
70115: LD_INT 19
70117: PUSH
70118: LD_INT 20
70120: PUSH
70121: LD_INT 21
70123: PUSH
70124: LD_INT 22
70126: PUSH
70127: LD_INT 23
70129: PUSH
70130: LD_INT 24
70132: PUSH
70133: LD_INT 25
70135: PUSH
70136: LD_INT 26
70138: PUSH
70139: LD_INT 28
70141: PUSH
70142: LD_INT 30
70144: PUSH
70145: LD_INT 31
70147: PUSH
70148: LD_INT 32
70150: PUSH
70151: LD_INT 34
70153: PUSH
70154: LD_INT 36
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 101
70192: PUSH
70193: LD_INT 102
70195: PUSH
70196: LD_INT 103
70198: PUSH
70199: LD_INT 104
70201: PUSH
70202: LD_INT 105
70204: PUSH
70205: LD_INT 106
70207: PUSH
70208: LD_INT 107
70210: PUSH
70211: LD_INT 108
70213: PUSH
70214: LD_INT 109
70216: PUSH
70217: LD_INT 110
70219: PUSH
70220: LD_INT 111
70222: PUSH
70223: LD_INT 112
70225: PUSH
70226: LD_INT 114
70228: PUSH
70229: LD_INT 116
70231: PUSH
70232: LD_INT 117
70234: PUSH
70235: LD_INT 118
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: ST_TO_ADDR
70260: GO 71943
70262: LD_INT 12
70264: DOUBLE
70265: EQUAL
70266: IFTRUE 70270
70268: GO 70490
70270: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
70271: LD_ADDR_VAR 0 2
70275: PUSH
70276: LD_INT 1
70278: PUSH
70279: LD_INT 2
70281: PUSH
70282: LD_INT 3
70284: PUSH
70285: LD_INT 4
70287: PUSH
70288: LD_INT 5
70290: PUSH
70291: LD_INT 6
70293: PUSH
70294: LD_INT 7
70296: PUSH
70297: LD_INT 8
70299: PUSH
70300: LD_INT 9
70302: PUSH
70303: LD_INT 10
70305: PUSH
70306: LD_INT 11
70308: PUSH
70309: LD_INT 12
70311: PUSH
70312: LD_INT 13
70314: PUSH
70315: LD_INT 14
70317: PUSH
70318: LD_INT 15
70320: PUSH
70321: LD_INT 16
70323: PUSH
70324: LD_INT 17
70326: PUSH
70327: LD_INT 18
70329: PUSH
70330: LD_INT 19
70332: PUSH
70333: LD_INT 20
70335: PUSH
70336: LD_INT 21
70338: PUSH
70339: LD_INT 22
70341: PUSH
70342: LD_INT 23
70344: PUSH
70345: LD_INT 24
70347: PUSH
70348: LD_INT 25
70350: PUSH
70351: LD_INT 26
70353: PUSH
70354: LD_INT 27
70356: PUSH
70357: LD_INT 28
70359: PUSH
70360: LD_INT 30
70362: PUSH
70363: LD_INT 31
70365: PUSH
70366: LD_INT 32
70368: PUSH
70369: LD_INT 33
70371: PUSH
70372: LD_INT 34
70374: PUSH
70375: LD_INT 36
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 101
70416: PUSH
70417: LD_INT 102
70419: PUSH
70420: LD_INT 103
70422: PUSH
70423: LD_INT 104
70425: PUSH
70426: LD_INT 105
70428: PUSH
70429: LD_INT 106
70431: PUSH
70432: LD_INT 107
70434: PUSH
70435: LD_INT 108
70437: PUSH
70438: LD_INT 109
70440: PUSH
70441: LD_INT 110
70443: PUSH
70444: LD_INT 111
70446: PUSH
70447: LD_INT 112
70449: PUSH
70450: LD_INT 113
70452: PUSH
70453: LD_INT 114
70455: PUSH
70456: LD_INT 116
70458: PUSH
70459: LD_INT 117
70461: PUSH
70462: LD_INT 118
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: ST_TO_ADDR
70488: GO 71943
70490: LD_INT 13
70492: DOUBLE
70493: EQUAL
70494: IFTRUE 70498
70496: GO 70706
70498: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
70499: LD_ADDR_VAR 0 2
70503: PUSH
70504: LD_INT 1
70506: PUSH
70507: LD_INT 2
70509: PUSH
70510: LD_INT 3
70512: PUSH
70513: LD_INT 4
70515: PUSH
70516: LD_INT 5
70518: PUSH
70519: LD_INT 8
70521: PUSH
70522: LD_INT 9
70524: PUSH
70525: LD_INT 10
70527: PUSH
70528: LD_INT 11
70530: PUSH
70531: LD_INT 12
70533: PUSH
70534: LD_INT 14
70536: PUSH
70537: LD_INT 15
70539: PUSH
70540: LD_INT 16
70542: PUSH
70543: LD_INT 17
70545: PUSH
70546: LD_INT 18
70548: PUSH
70549: LD_INT 19
70551: PUSH
70552: LD_INT 20
70554: PUSH
70555: LD_INT 21
70557: PUSH
70558: LD_INT 22
70560: PUSH
70561: LD_INT 23
70563: PUSH
70564: LD_INT 24
70566: PUSH
70567: LD_INT 25
70569: PUSH
70570: LD_INT 26
70572: PUSH
70573: LD_INT 27
70575: PUSH
70576: LD_INT 28
70578: PUSH
70579: LD_INT 30
70581: PUSH
70582: LD_INT 31
70584: PUSH
70585: LD_INT 32
70587: PUSH
70588: LD_INT 33
70590: PUSH
70591: LD_INT 34
70593: PUSH
70594: LD_INT 36
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 101
70632: PUSH
70633: LD_INT 102
70635: PUSH
70636: LD_INT 103
70638: PUSH
70639: LD_INT 104
70641: PUSH
70642: LD_INT 105
70644: PUSH
70645: LD_INT 106
70647: PUSH
70648: LD_INT 107
70650: PUSH
70651: LD_INT 108
70653: PUSH
70654: LD_INT 109
70656: PUSH
70657: LD_INT 110
70659: PUSH
70660: LD_INT 111
70662: PUSH
70663: LD_INT 112
70665: PUSH
70666: LD_INT 113
70668: PUSH
70669: LD_INT 114
70671: PUSH
70672: LD_INT 116
70674: PUSH
70675: LD_INT 117
70677: PUSH
70678: LD_INT 118
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: ST_TO_ADDR
70704: GO 71943
70706: LD_INT 14
70708: DOUBLE
70709: EQUAL
70710: IFTRUE 70714
70712: GO 70938
70714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
70715: LD_ADDR_VAR 0 2
70719: PUSH
70720: LD_INT 1
70722: PUSH
70723: LD_INT 2
70725: PUSH
70726: LD_INT 3
70728: PUSH
70729: LD_INT 4
70731: PUSH
70732: LD_INT 5
70734: PUSH
70735: LD_INT 6
70737: PUSH
70738: LD_INT 7
70740: PUSH
70741: LD_INT 8
70743: PUSH
70744: LD_INT 9
70746: PUSH
70747: LD_INT 10
70749: PUSH
70750: LD_INT 11
70752: PUSH
70753: LD_INT 12
70755: PUSH
70756: LD_INT 13
70758: PUSH
70759: LD_INT 14
70761: PUSH
70762: LD_INT 15
70764: PUSH
70765: LD_INT 16
70767: PUSH
70768: LD_INT 17
70770: PUSH
70771: LD_INT 18
70773: PUSH
70774: LD_INT 19
70776: PUSH
70777: LD_INT 20
70779: PUSH
70780: LD_INT 21
70782: PUSH
70783: LD_INT 22
70785: PUSH
70786: LD_INT 23
70788: PUSH
70789: LD_INT 24
70791: PUSH
70792: LD_INT 25
70794: PUSH
70795: LD_INT 26
70797: PUSH
70798: LD_INT 27
70800: PUSH
70801: LD_INT 28
70803: PUSH
70804: LD_INT 29
70806: PUSH
70807: LD_INT 30
70809: PUSH
70810: LD_INT 31
70812: PUSH
70813: LD_INT 32
70815: PUSH
70816: LD_INT 33
70818: PUSH
70819: LD_INT 34
70821: PUSH
70822: LD_INT 36
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 101
70864: PUSH
70865: LD_INT 102
70867: PUSH
70868: LD_INT 103
70870: PUSH
70871: LD_INT 104
70873: PUSH
70874: LD_INT 105
70876: PUSH
70877: LD_INT 106
70879: PUSH
70880: LD_INT 107
70882: PUSH
70883: LD_INT 108
70885: PUSH
70886: LD_INT 109
70888: PUSH
70889: LD_INT 110
70891: PUSH
70892: LD_INT 111
70894: PUSH
70895: LD_INT 112
70897: PUSH
70898: LD_INT 113
70900: PUSH
70901: LD_INT 114
70903: PUSH
70904: LD_INT 116
70906: PUSH
70907: LD_INT 117
70909: PUSH
70910: LD_INT 118
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: ST_TO_ADDR
70936: GO 71943
70938: LD_INT 15
70940: DOUBLE
70941: EQUAL
70942: IFTRUE 70946
70944: GO 71170
70946: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
70947: LD_ADDR_VAR 0 2
70951: PUSH
70952: LD_INT 1
70954: PUSH
70955: LD_INT 2
70957: PUSH
70958: LD_INT 3
70960: PUSH
70961: LD_INT 4
70963: PUSH
70964: LD_INT 5
70966: PUSH
70967: LD_INT 6
70969: PUSH
70970: LD_INT 7
70972: PUSH
70973: LD_INT 8
70975: PUSH
70976: LD_INT 9
70978: PUSH
70979: LD_INT 10
70981: PUSH
70982: LD_INT 11
70984: PUSH
70985: LD_INT 12
70987: PUSH
70988: LD_INT 13
70990: PUSH
70991: LD_INT 14
70993: PUSH
70994: LD_INT 15
70996: PUSH
70997: LD_INT 16
70999: PUSH
71000: LD_INT 17
71002: PUSH
71003: LD_INT 18
71005: PUSH
71006: LD_INT 19
71008: PUSH
71009: LD_INT 20
71011: PUSH
71012: LD_INT 21
71014: PUSH
71015: LD_INT 22
71017: PUSH
71018: LD_INT 23
71020: PUSH
71021: LD_INT 24
71023: PUSH
71024: LD_INT 25
71026: PUSH
71027: LD_INT 26
71029: PUSH
71030: LD_INT 27
71032: PUSH
71033: LD_INT 28
71035: PUSH
71036: LD_INT 29
71038: PUSH
71039: LD_INT 30
71041: PUSH
71042: LD_INT 31
71044: PUSH
71045: LD_INT 32
71047: PUSH
71048: LD_INT 33
71050: PUSH
71051: LD_INT 34
71053: PUSH
71054: LD_INT 36
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 101
71096: PUSH
71097: LD_INT 102
71099: PUSH
71100: LD_INT 103
71102: PUSH
71103: LD_INT 104
71105: PUSH
71106: LD_INT 105
71108: PUSH
71109: LD_INT 106
71111: PUSH
71112: LD_INT 107
71114: PUSH
71115: LD_INT 108
71117: PUSH
71118: LD_INT 109
71120: PUSH
71121: LD_INT 110
71123: PUSH
71124: LD_INT 111
71126: PUSH
71127: LD_INT 112
71129: PUSH
71130: LD_INT 113
71132: PUSH
71133: LD_INT 114
71135: PUSH
71136: LD_INT 116
71138: PUSH
71139: LD_INT 117
71141: PUSH
71142: LD_INT 118
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: ST_TO_ADDR
71168: GO 71943
71170: LD_INT 16
71172: DOUBLE
71173: EQUAL
71174: IFTRUE 71178
71176: GO 71314
71178: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
71179: LD_ADDR_VAR 0 2
71183: PUSH
71184: LD_INT 2
71186: PUSH
71187: LD_INT 4
71189: PUSH
71190: LD_INT 5
71192: PUSH
71193: LD_INT 7
71195: PUSH
71196: LD_INT 11
71198: PUSH
71199: LD_INT 12
71201: PUSH
71202: LD_INT 15
71204: PUSH
71205: LD_INT 16
71207: PUSH
71208: LD_INT 20
71210: PUSH
71211: LD_INT 21
71213: PUSH
71214: LD_INT 22
71216: PUSH
71217: LD_INT 23
71219: PUSH
71220: LD_INT 25
71222: PUSH
71223: LD_INT 26
71225: PUSH
71226: LD_INT 30
71228: PUSH
71229: LD_INT 31
71231: PUSH
71232: LD_INT 32
71234: PUSH
71235: LD_INT 33
71237: PUSH
71238: LD_INT 34
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 101
71264: PUSH
71265: LD_INT 102
71267: PUSH
71268: LD_INT 103
71270: PUSH
71271: LD_INT 106
71273: PUSH
71274: LD_INT 108
71276: PUSH
71277: LD_INT 112
71279: PUSH
71280: LD_INT 113
71282: PUSH
71283: LD_INT 114
71285: PUSH
71286: LD_INT 116
71288: PUSH
71289: LD_INT 117
71291: PUSH
71292: LD_INT 118
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: ST_TO_ADDR
71312: GO 71943
71314: LD_INT 17
71316: DOUBLE
71317: EQUAL
71318: IFTRUE 71322
71320: GO 71546
71322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
71323: LD_ADDR_VAR 0 2
71327: PUSH
71328: LD_INT 1
71330: PUSH
71331: LD_INT 2
71333: PUSH
71334: LD_INT 3
71336: PUSH
71337: LD_INT 4
71339: PUSH
71340: LD_INT 5
71342: PUSH
71343: LD_INT 6
71345: PUSH
71346: LD_INT 7
71348: PUSH
71349: LD_INT 8
71351: PUSH
71352: LD_INT 9
71354: PUSH
71355: LD_INT 10
71357: PUSH
71358: LD_INT 11
71360: PUSH
71361: LD_INT 12
71363: PUSH
71364: LD_INT 13
71366: PUSH
71367: LD_INT 14
71369: PUSH
71370: LD_INT 15
71372: PUSH
71373: LD_INT 16
71375: PUSH
71376: LD_INT 17
71378: PUSH
71379: LD_INT 18
71381: PUSH
71382: LD_INT 19
71384: PUSH
71385: LD_INT 20
71387: PUSH
71388: LD_INT 21
71390: PUSH
71391: LD_INT 22
71393: PUSH
71394: LD_INT 23
71396: PUSH
71397: LD_INT 24
71399: PUSH
71400: LD_INT 25
71402: PUSH
71403: LD_INT 26
71405: PUSH
71406: LD_INT 27
71408: PUSH
71409: LD_INT 28
71411: PUSH
71412: LD_INT 29
71414: PUSH
71415: LD_INT 30
71417: PUSH
71418: LD_INT 31
71420: PUSH
71421: LD_INT 32
71423: PUSH
71424: LD_INT 33
71426: PUSH
71427: LD_INT 34
71429: PUSH
71430: LD_INT 36
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 101
71472: PUSH
71473: LD_INT 102
71475: PUSH
71476: LD_INT 103
71478: PUSH
71479: LD_INT 104
71481: PUSH
71482: LD_INT 105
71484: PUSH
71485: LD_INT 106
71487: PUSH
71488: LD_INT 107
71490: PUSH
71491: LD_INT 108
71493: PUSH
71494: LD_INT 109
71496: PUSH
71497: LD_INT 110
71499: PUSH
71500: LD_INT 111
71502: PUSH
71503: LD_INT 112
71505: PUSH
71506: LD_INT 113
71508: PUSH
71509: LD_INT 114
71511: PUSH
71512: LD_INT 116
71514: PUSH
71515: LD_INT 117
71517: PUSH
71518: LD_INT 118
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: ST_TO_ADDR
71544: GO 71943
71546: LD_INT 18
71548: DOUBLE
71549: EQUAL
71550: IFTRUE 71554
71552: GO 71702
71554: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
71555: LD_ADDR_VAR 0 2
71559: PUSH
71560: LD_INT 2
71562: PUSH
71563: LD_INT 4
71565: PUSH
71566: LD_INT 5
71568: PUSH
71569: LD_INT 7
71571: PUSH
71572: LD_INT 11
71574: PUSH
71575: LD_INT 12
71577: PUSH
71578: LD_INT 15
71580: PUSH
71581: LD_INT 16
71583: PUSH
71584: LD_INT 20
71586: PUSH
71587: LD_INT 21
71589: PUSH
71590: LD_INT 22
71592: PUSH
71593: LD_INT 23
71595: PUSH
71596: LD_INT 25
71598: PUSH
71599: LD_INT 26
71601: PUSH
71602: LD_INT 30
71604: PUSH
71605: LD_INT 31
71607: PUSH
71608: LD_INT 32
71610: PUSH
71611: LD_INT 33
71613: PUSH
71614: LD_INT 34
71616: PUSH
71617: LD_INT 35
71619: PUSH
71620: LD_INT 36
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 101
71648: PUSH
71649: LD_INT 102
71651: PUSH
71652: LD_INT 103
71654: PUSH
71655: LD_INT 106
71657: PUSH
71658: LD_INT 108
71660: PUSH
71661: LD_INT 112
71663: PUSH
71664: LD_INT 113
71666: PUSH
71667: LD_INT 114
71669: PUSH
71670: LD_INT 115
71672: PUSH
71673: LD_INT 116
71675: PUSH
71676: LD_INT 117
71678: PUSH
71679: LD_INT 118
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: ST_TO_ADDR
71700: GO 71943
71702: LD_INT 19
71704: DOUBLE
71705: EQUAL
71706: IFTRUE 71710
71708: GO 71942
71710: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
71711: LD_ADDR_VAR 0 2
71715: PUSH
71716: LD_INT 1
71718: PUSH
71719: LD_INT 2
71721: PUSH
71722: LD_INT 3
71724: PUSH
71725: LD_INT 4
71727: PUSH
71728: LD_INT 5
71730: PUSH
71731: LD_INT 6
71733: PUSH
71734: LD_INT 7
71736: PUSH
71737: LD_INT 8
71739: PUSH
71740: LD_INT 9
71742: PUSH
71743: LD_INT 10
71745: PUSH
71746: LD_INT 11
71748: PUSH
71749: LD_INT 12
71751: PUSH
71752: LD_INT 13
71754: PUSH
71755: LD_INT 14
71757: PUSH
71758: LD_INT 15
71760: PUSH
71761: LD_INT 16
71763: PUSH
71764: LD_INT 17
71766: PUSH
71767: LD_INT 18
71769: PUSH
71770: LD_INT 19
71772: PUSH
71773: LD_INT 20
71775: PUSH
71776: LD_INT 21
71778: PUSH
71779: LD_INT 22
71781: PUSH
71782: LD_INT 23
71784: PUSH
71785: LD_INT 24
71787: PUSH
71788: LD_INT 25
71790: PUSH
71791: LD_INT 26
71793: PUSH
71794: LD_INT 27
71796: PUSH
71797: LD_INT 28
71799: PUSH
71800: LD_INT 29
71802: PUSH
71803: LD_INT 30
71805: PUSH
71806: LD_INT 31
71808: PUSH
71809: LD_INT 32
71811: PUSH
71812: LD_INT 33
71814: PUSH
71815: LD_INT 34
71817: PUSH
71818: LD_INT 35
71820: PUSH
71821: LD_INT 36
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 101
71864: PUSH
71865: LD_INT 102
71867: PUSH
71868: LD_INT 103
71870: PUSH
71871: LD_INT 104
71873: PUSH
71874: LD_INT 105
71876: PUSH
71877: LD_INT 106
71879: PUSH
71880: LD_INT 107
71882: PUSH
71883: LD_INT 108
71885: PUSH
71886: LD_INT 109
71888: PUSH
71889: LD_INT 110
71891: PUSH
71892: LD_INT 111
71894: PUSH
71895: LD_INT 112
71897: PUSH
71898: LD_INT 113
71900: PUSH
71901: LD_INT 114
71903: PUSH
71904: LD_INT 115
71906: PUSH
71907: LD_INT 116
71909: PUSH
71910: LD_INT 117
71912: PUSH
71913: LD_INT 118
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: ST_TO_ADDR
71940: GO 71943
71942: POP
// end else
71943: GO 72174
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
71945: LD_ADDR_VAR 0 2
71949: PUSH
71950: LD_INT 1
71952: PUSH
71953: LD_INT 2
71955: PUSH
71956: LD_INT 3
71958: PUSH
71959: LD_INT 4
71961: PUSH
71962: LD_INT 5
71964: PUSH
71965: LD_INT 6
71967: PUSH
71968: LD_INT 7
71970: PUSH
71971: LD_INT 8
71973: PUSH
71974: LD_INT 9
71976: PUSH
71977: LD_INT 10
71979: PUSH
71980: LD_INT 11
71982: PUSH
71983: LD_INT 12
71985: PUSH
71986: LD_INT 13
71988: PUSH
71989: LD_INT 14
71991: PUSH
71992: LD_INT 15
71994: PUSH
71995: LD_INT 16
71997: PUSH
71998: LD_INT 17
72000: PUSH
72001: LD_INT 18
72003: PUSH
72004: LD_INT 19
72006: PUSH
72007: LD_INT 20
72009: PUSH
72010: LD_INT 21
72012: PUSH
72013: LD_INT 22
72015: PUSH
72016: LD_INT 23
72018: PUSH
72019: LD_INT 24
72021: PUSH
72022: LD_INT 25
72024: PUSH
72025: LD_INT 26
72027: PUSH
72028: LD_INT 27
72030: PUSH
72031: LD_INT 28
72033: PUSH
72034: LD_INT 29
72036: PUSH
72037: LD_INT 30
72039: PUSH
72040: LD_INT 31
72042: PUSH
72043: LD_INT 32
72045: PUSH
72046: LD_INT 33
72048: PUSH
72049: LD_INT 34
72051: PUSH
72052: LD_INT 35
72054: PUSH
72055: LD_INT 36
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 101
72098: PUSH
72099: LD_INT 102
72101: PUSH
72102: LD_INT 103
72104: PUSH
72105: LD_INT 104
72107: PUSH
72108: LD_INT 105
72110: PUSH
72111: LD_INT 106
72113: PUSH
72114: LD_INT 107
72116: PUSH
72117: LD_INT 108
72119: PUSH
72120: LD_INT 109
72122: PUSH
72123: LD_INT 110
72125: PUSH
72126: LD_INT 111
72128: PUSH
72129: LD_INT 112
72131: PUSH
72132: LD_INT 113
72134: PUSH
72135: LD_INT 114
72137: PUSH
72138: LD_INT 115
72140: PUSH
72141: LD_INT 116
72143: PUSH
72144: LD_INT 117
72146: PUSH
72147: LD_INT 118
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: ST_TO_ADDR
// if result then
72174: LD_VAR 0 2
72178: IFFALSE 72964
// begin normal :=  ;
72180: LD_ADDR_VAR 0 5
72184: PUSH
72185: LD_STRING 
72187: ST_TO_ADDR
// hardcore :=  ;
72188: LD_ADDR_VAR 0 6
72192: PUSH
72193: LD_STRING 
72195: ST_TO_ADDR
// active :=  ;
72196: LD_ADDR_VAR 0 7
72200: PUSH
72201: LD_STRING 
72203: ST_TO_ADDR
// for i = 1 to normalCounter do
72204: LD_ADDR_VAR 0 8
72208: PUSH
72209: DOUBLE
72210: LD_INT 1
72212: DEC
72213: ST_TO_ADDR
72214: LD_EXP 60
72218: PUSH
72219: FOR_TO
72220: IFFALSE 72321
// begin tmp := 0 ;
72222: LD_ADDR_VAR 0 3
72226: PUSH
72227: LD_STRING 0
72229: ST_TO_ADDR
// if result [ 1 ] then
72230: LD_VAR 0 2
72234: PUSH
72235: LD_INT 1
72237: ARRAY
72238: IFFALSE 72303
// if result [ 1 ] [ 1 ] = i then
72240: LD_VAR 0 2
72244: PUSH
72245: LD_INT 1
72247: ARRAY
72248: PUSH
72249: LD_INT 1
72251: ARRAY
72252: PUSH
72253: LD_VAR 0 8
72257: EQUAL
72258: IFFALSE 72303
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
72260: LD_ADDR_VAR 0 2
72264: PUSH
72265: LD_VAR 0 2
72269: PPUSH
72270: LD_INT 1
72272: PPUSH
72273: LD_VAR 0 2
72277: PUSH
72278: LD_INT 1
72280: ARRAY
72281: PPUSH
72282: LD_INT 1
72284: PPUSH
72285: CALL_OW 3
72289: PPUSH
72290: CALL_OW 1
72294: ST_TO_ADDR
// tmp := 1 ;
72295: LD_ADDR_VAR 0 3
72299: PUSH
72300: LD_STRING 1
72302: ST_TO_ADDR
// end ; normal := normal & tmp ;
72303: LD_ADDR_VAR 0 5
72307: PUSH
72308: LD_VAR 0 5
72312: PUSH
72313: LD_VAR 0 3
72317: STR
72318: ST_TO_ADDR
// end ;
72319: GO 72219
72321: POP
72322: POP
// for i = 1 to hardcoreCounter do
72323: LD_ADDR_VAR 0 8
72327: PUSH
72328: DOUBLE
72329: LD_INT 1
72331: DEC
72332: ST_TO_ADDR
72333: LD_EXP 61
72337: PUSH
72338: FOR_TO
72339: IFFALSE 72444
// begin tmp := 0 ;
72341: LD_ADDR_VAR 0 3
72345: PUSH
72346: LD_STRING 0
72348: ST_TO_ADDR
// if result [ 2 ] then
72349: LD_VAR 0 2
72353: PUSH
72354: LD_INT 2
72356: ARRAY
72357: IFFALSE 72426
// if result [ 2 ] [ 1 ] = 100 + i then
72359: LD_VAR 0 2
72363: PUSH
72364: LD_INT 2
72366: ARRAY
72367: PUSH
72368: LD_INT 1
72370: ARRAY
72371: PUSH
72372: LD_INT 100
72374: PUSH
72375: LD_VAR 0 8
72379: PLUS
72380: EQUAL
72381: IFFALSE 72426
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
72383: LD_ADDR_VAR 0 2
72387: PUSH
72388: LD_VAR 0 2
72392: PPUSH
72393: LD_INT 2
72395: PPUSH
72396: LD_VAR 0 2
72400: PUSH
72401: LD_INT 2
72403: ARRAY
72404: PPUSH
72405: LD_INT 1
72407: PPUSH
72408: CALL_OW 3
72412: PPUSH
72413: CALL_OW 1
72417: ST_TO_ADDR
// tmp := 1 ;
72418: LD_ADDR_VAR 0 3
72422: PUSH
72423: LD_STRING 1
72425: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
72426: LD_ADDR_VAR 0 6
72430: PUSH
72431: LD_VAR 0 6
72435: PUSH
72436: LD_VAR 0 3
72440: STR
72441: ST_TO_ADDR
// end ;
72442: GO 72338
72444: POP
72445: POP
// if isGameLoad then
72446: LD_VAR 0 1
72450: IFFALSE 72925
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
72452: LD_ADDR_VAR 0 4
72456: PUSH
72457: LD_EXP 64
72461: PUSH
72462: LD_EXP 63
72466: PUSH
72467: LD_EXP 65
72471: PUSH
72472: LD_EXP 62
72476: PUSH
72477: LD_EXP 66
72481: PUSH
72482: LD_EXP 67
72486: PUSH
72487: LD_EXP 68
72491: PUSH
72492: LD_EXP 69
72496: PUSH
72497: LD_EXP 70
72501: PUSH
72502: LD_EXP 71
72506: PUSH
72507: LD_EXP 72
72511: PUSH
72512: LD_EXP 73
72516: PUSH
72517: LD_EXP 74
72521: PUSH
72522: LD_EXP 75
72526: PUSH
72527: LD_EXP 83
72531: PUSH
72532: LD_EXP 84
72536: PUSH
72537: LD_EXP 85
72541: PUSH
72542: LD_EXP 86
72546: PUSH
72547: LD_EXP 88
72551: PUSH
72552: LD_EXP 89
72556: PUSH
72557: LD_EXP 90
72561: PUSH
72562: LD_EXP 93
72566: PUSH
72567: LD_EXP 95
72571: PUSH
72572: LD_EXP 96
72576: PUSH
72577: LD_EXP 97
72581: PUSH
72582: LD_EXP 99
72586: PUSH
72587: LD_EXP 100
72591: PUSH
72592: LD_EXP 103
72596: PUSH
72597: LD_EXP 104
72601: PUSH
72602: LD_EXP 105
72606: PUSH
72607: LD_EXP 106
72611: PUSH
72612: LD_EXP 107
72616: PUSH
72617: LD_EXP 108
72621: PUSH
72622: LD_EXP 109
72626: PUSH
72627: LD_EXP 110
72631: PUSH
72632: LD_EXP 111
72636: PUSH
72637: LD_EXP 76
72641: PUSH
72642: LD_EXP 77
72646: PUSH
72647: LD_EXP 80
72651: PUSH
72652: LD_EXP 81
72656: PUSH
72657: LD_EXP 82
72661: PUSH
72662: LD_EXP 78
72666: PUSH
72667: LD_EXP 79
72671: PUSH
72672: LD_EXP 87
72676: PUSH
72677: LD_EXP 91
72681: PUSH
72682: LD_EXP 92
72686: PUSH
72687: LD_EXP 94
72691: PUSH
72692: LD_EXP 98
72696: PUSH
72697: LD_EXP 101
72701: PUSH
72702: LD_EXP 102
72706: PUSH
72707: LD_EXP 112
72711: PUSH
72712: LD_EXP 113
72716: PUSH
72717: LD_EXP 114
72721: PUSH
72722: LD_EXP 115
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: ST_TO_ADDR
// tmp :=  ;
72783: LD_ADDR_VAR 0 3
72787: PUSH
72788: LD_STRING 
72790: ST_TO_ADDR
// for i = 1 to normalCounter do
72791: LD_ADDR_VAR 0 8
72795: PUSH
72796: DOUBLE
72797: LD_INT 1
72799: DEC
72800: ST_TO_ADDR
72801: LD_EXP 60
72805: PUSH
72806: FOR_TO
72807: IFFALSE 72843
// begin if flags [ i ] then
72809: LD_VAR 0 4
72813: PUSH
72814: LD_VAR 0 8
72818: ARRAY
72819: IFFALSE 72841
// tmp := tmp & i & ; ;
72821: LD_ADDR_VAR 0 3
72825: PUSH
72826: LD_VAR 0 3
72830: PUSH
72831: LD_VAR 0 8
72835: STR
72836: PUSH
72837: LD_STRING ;
72839: STR
72840: ST_TO_ADDR
// end ;
72841: GO 72806
72843: POP
72844: POP
// for i = 1 to hardcoreCounter do
72845: LD_ADDR_VAR 0 8
72849: PUSH
72850: DOUBLE
72851: LD_INT 1
72853: DEC
72854: ST_TO_ADDR
72855: LD_EXP 61
72859: PUSH
72860: FOR_TO
72861: IFFALSE 72907
// begin if flags [ normalCounter + i ] then
72863: LD_VAR 0 4
72867: PUSH
72868: LD_EXP 60
72872: PUSH
72873: LD_VAR 0 8
72877: PLUS
72878: ARRAY
72879: IFFALSE 72905
// tmp := tmp & ( 100 + i ) & ; ;
72881: LD_ADDR_VAR 0 3
72885: PUSH
72886: LD_VAR 0 3
72890: PUSH
72891: LD_INT 100
72893: PUSH
72894: LD_VAR 0 8
72898: PLUS
72899: STR
72900: PUSH
72901: LD_STRING ;
72903: STR
72904: ST_TO_ADDR
// end ;
72905: GO 72860
72907: POP
72908: POP
// if tmp then
72909: LD_VAR 0 3
72913: IFFALSE 72925
// active := tmp ;
72915: LD_ADDR_VAR 0 7
72919: PUSH
72920: LD_VAR 0 3
72924: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
72925: LD_STRING getStreamItemsFromMission("
72927: PUSH
72928: LD_VAR 0 5
72932: STR
72933: PUSH
72934: LD_STRING ","
72936: STR
72937: PUSH
72938: LD_VAR 0 6
72942: STR
72943: PUSH
72944: LD_STRING ","
72946: STR
72947: PUSH
72948: LD_VAR 0 7
72952: STR
72953: PUSH
72954: LD_STRING ")
72956: STR
72957: PPUSH
72958: CALL_OW 559
// end else
72962: GO 72971
// ToLua ( getStreamItemsFromMission("","","") ) ;
72964: LD_STRING getStreamItemsFromMission("","","")
72966: PPUSH
72967: CALL_OW 559
// end ;
72971: LD_VAR 0 2
72975: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
72976: LD_EXP 59
72980: PUSH
72981: LD_EXP 64
72985: AND
72986: IFFALSE 73110
72988: GO 72990
72990: DISABLE
72991: LD_INT 0
72993: PPUSH
72994: PPUSH
// begin enable ;
72995: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
72996: LD_ADDR_VAR 0 2
73000: PUSH
73001: LD_INT 22
73003: PUSH
73004: LD_OWVAR 2
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 2
73015: PUSH
73016: LD_INT 34
73018: PUSH
73019: LD_INT 7
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PUSH
73026: LD_INT 34
73028: PUSH
73029: LD_INT 45
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 34
73038: PUSH
73039: LD_INT 28
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 34
73048: PUSH
73049: LD_INT 47
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: PPUSH
73067: CALL_OW 69
73071: ST_TO_ADDR
// if not tmp then
73072: LD_VAR 0 2
73076: NOT
73077: IFFALSE 73081
// exit ;
73079: GO 73110
// for i in tmp do
73081: LD_ADDR_VAR 0 1
73085: PUSH
73086: LD_VAR 0 2
73090: PUSH
73091: FOR_IN
73092: IFFALSE 73108
// begin SetLives ( i , 0 ) ;
73094: LD_VAR 0 1
73098: PPUSH
73099: LD_INT 0
73101: PPUSH
73102: CALL_OW 234
// end ;
73106: GO 73091
73108: POP
73109: POP
// end ;
73110: PPOPN 2
73112: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
73113: LD_EXP 59
73117: PUSH
73118: LD_EXP 65
73122: AND
73123: IFFALSE 73207
73125: GO 73127
73127: DISABLE
73128: LD_INT 0
73130: PPUSH
73131: PPUSH
// begin enable ;
73132: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
73133: LD_ADDR_VAR 0 2
73137: PUSH
73138: LD_INT 22
73140: PUSH
73141: LD_OWVAR 2
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: LD_INT 32
73152: PUSH
73153: LD_INT 3
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PPUSH
73164: CALL_OW 69
73168: ST_TO_ADDR
// if not tmp then
73169: LD_VAR 0 2
73173: NOT
73174: IFFALSE 73178
// exit ;
73176: GO 73207
// for i in tmp do
73178: LD_ADDR_VAR 0 1
73182: PUSH
73183: LD_VAR 0 2
73187: PUSH
73188: FOR_IN
73189: IFFALSE 73205
// begin SetLives ( i , 0 ) ;
73191: LD_VAR 0 1
73195: PPUSH
73196: LD_INT 0
73198: PPUSH
73199: CALL_OW 234
// end ;
73203: GO 73188
73205: POP
73206: POP
// end ;
73207: PPOPN 2
73209: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
73210: LD_EXP 59
73214: PUSH
73215: LD_EXP 62
73219: AND
73220: IFFALSE 73313
73222: GO 73224
73224: DISABLE
73225: LD_INT 0
73227: PPUSH
// begin enable ;
73228: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
73229: LD_ADDR_VAR 0 1
73233: PUSH
73234: LD_INT 22
73236: PUSH
73237: LD_OWVAR 2
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PUSH
73246: LD_INT 2
73248: PUSH
73249: LD_INT 25
73251: PUSH
73252: LD_INT 5
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PUSH
73259: LD_INT 25
73261: PUSH
73262: LD_INT 9
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 25
73271: PUSH
73272: LD_INT 8
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PPUSH
73289: CALL_OW 69
73293: PUSH
73294: FOR_IN
73295: IFFALSE 73311
// begin SetClass ( i , 1 ) ;
73297: LD_VAR 0 1
73301: PPUSH
73302: LD_INT 1
73304: PPUSH
73305: CALL_OW 336
// end ;
73309: GO 73294
73311: POP
73312: POP
// end ;
73313: PPOPN 1
73315: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
73316: LD_EXP 59
73320: PUSH
73321: LD_EXP 63
73325: AND
73326: PUSH
73327: LD_OWVAR 65
73331: PUSH
73332: LD_INT 7
73334: LESS
73335: AND
73336: IFFALSE 73350
73338: GO 73340
73340: DISABLE
// begin enable ;
73341: ENABLE
// game_speed := 7 ;
73342: LD_ADDR_OWVAR 65
73346: PUSH
73347: LD_INT 7
73349: ST_TO_ADDR
// end ;
73350: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
73351: LD_EXP 59
73355: PUSH
73356: LD_EXP 66
73360: AND
73361: IFFALSE 73563
73363: GO 73365
73365: DISABLE
73366: LD_INT 0
73368: PPUSH
73369: PPUSH
73370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73371: LD_ADDR_VAR 0 3
73375: PUSH
73376: LD_INT 81
73378: PUSH
73379: LD_OWVAR 2
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 21
73390: PUSH
73391: LD_INT 1
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PPUSH
73402: CALL_OW 69
73406: ST_TO_ADDR
// if not tmp then
73407: LD_VAR 0 3
73411: NOT
73412: IFFALSE 73416
// exit ;
73414: GO 73563
// if tmp > 5 then
73416: LD_VAR 0 3
73420: PUSH
73421: LD_INT 5
73423: GREATER
73424: IFFALSE 73436
// k := 5 else
73426: LD_ADDR_VAR 0 2
73430: PUSH
73431: LD_INT 5
73433: ST_TO_ADDR
73434: GO 73446
// k := tmp ;
73436: LD_ADDR_VAR 0 2
73440: PUSH
73441: LD_VAR 0 3
73445: ST_TO_ADDR
// for i := 1 to k do
73446: LD_ADDR_VAR 0 1
73450: PUSH
73451: DOUBLE
73452: LD_INT 1
73454: DEC
73455: ST_TO_ADDR
73456: LD_VAR 0 2
73460: PUSH
73461: FOR_TO
73462: IFFALSE 73561
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
73464: LD_VAR 0 3
73468: PUSH
73469: LD_VAR 0 1
73473: ARRAY
73474: PPUSH
73475: LD_VAR 0 1
73479: PUSH
73480: LD_INT 4
73482: MOD
73483: PUSH
73484: LD_INT 1
73486: PLUS
73487: PPUSH
73488: CALL_OW 259
73492: PUSH
73493: LD_INT 10
73495: LESS
73496: IFFALSE 73559
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73498: LD_VAR 0 3
73502: PUSH
73503: LD_VAR 0 1
73507: ARRAY
73508: PPUSH
73509: LD_VAR 0 1
73513: PUSH
73514: LD_INT 4
73516: MOD
73517: PUSH
73518: LD_INT 1
73520: PLUS
73521: PPUSH
73522: LD_VAR 0 3
73526: PUSH
73527: LD_VAR 0 1
73531: ARRAY
73532: PPUSH
73533: LD_VAR 0 1
73537: PUSH
73538: LD_INT 4
73540: MOD
73541: PUSH
73542: LD_INT 1
73544: PLUS
73545: PPUSH
73546: CALL_OW 259
73550: PUSH
73551: LD_INT 1
73553: PLUS
73554: PPUSH
73555: CALL_OW 237
73559: GO 73461
73561: POP
73562: POP
// end ;
73563: PPOPN 3
73565: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73566: LD_EXP 59
73570: PUSH
73571: LD_EXP 67
73575: AND
73576: IFFALSE 73596
73578: GO 73580
73580: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73581: LD_INT 4
73583: PPUSH
73584: LD_OWVAR 2
73588: PPUSH
73589: LD_INT 0
73591: PPUSH
73592: CALL_OW 324
73596: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73597: LD_EXP 59
73601: PUSH
73602: LD_EXP 96
73606: AND
73607: IFFALSE 73627
73609: GO 73611
73611: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73612: LD_INT 19
73614: PPUSH
73615: LD_OWVAR 2
73619: PPUSH
73620: LD_INT 0
73622: PPUSH
73623: CALL_OW 324
73627: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73628: LD_EXP 59
73632: PUSH
73633: LD_EXP 68
73637: AND
73638: IFFALSE 73740
73640: GO 73642
73642: DISABLE
73643: LD_INT 0
73645: PPUSH
73646: PPUSH
// begin enable ;
73647: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73648: LD_ADDR_VAR 0 2
73652: PUSH
73653: LD_INT 22
73655: PUSH
73656: LD_OWVAR 2
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 2
73667: PUSH
73668: LD_INT 34
73670: PUSH
73671: LD_INT 11
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: LD_INT 34
73680: PUSH
73681: LD_INT 30
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: LIST
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PPUSH
73697: CALL_OW 69
73701: ST_TO_ADDR
// if not tmp then
73702: LD_VAR 0 2
73706: NOT
73707: IFFALSE 73711
// exit ;
73709: GO 73740
// for i in tmp do
73711: LD_ADDR_VAR 0 1
73715: PUSH
73716: LD_VAR 0 2
73720: PUSH
73721: FOR_IN
73722: IFFALSE 73738
// begin SetLives ( i , 0 ) ;
73724: LD_VAR 0 1
73728: PPUSH
73729: LD_INT 0
73731: PPUSH
73732: CALL_OW 234
// end ;
73736: GO 73721
73738: POP
73739: POP
// end ;
73740: PPOPN 2
73742: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73743: LD_EXP 59
73747: PUSH
73748: LD_EXP 69
73752: AND
73753: IFFALSE 73773
73755: GO 73757
73757: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73758: LD_INT 32
73760: PPUSH
73761: LD_OWVAR 2
73765: PPUSH
73766: LD_INT 0
73768: PPUSH
73769: CALL_OW 324
73773: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73774: LD_EXP 59
73778: PUSH
73779: LD_EXP 70
73783: AND
73784: IFFALSE 73965
73786: GO 73788
73788: DISABLE
73789: LD_INT 0
73791: PPUSH
73792: PPUSH
73793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73794: LD_ADDR_VAR 0 2
73798: PUSH
73799: LD_INT 22
73801: PUSH
73802: LD_OWVAR 2
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PUSH
73811: LD_INT 33
73813: PUSH
73814: LD_INT 3
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: PPUSH
73825: CALL_OW 69
73829: ST_TO_ADDR
// if not tmp then
73830: LD_VAR 0 2
73834: NOT
73835: IFFALSE 73839
// exit ;
73837: GO 73965
// side := 0 ;
73839: LD_ADDR_VAR 0 3
73843: PUSH
73844: LD_INT 0
73846: ST_TO_ADDR
// for i := 1 to 8 do
73847: LD_ADDR_VAR 0 1
73851: PUSH
73852: DOUBLE
73853: LD_INT 1
73855: DEC
73856: ST_TO_ADDR
73857: LD_INT 8
73859: PUSH
73860: FOR_TO
73861: IFFALSE 73909
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73863: LD_OWVAR 2
73867: PUSH
73868: LD_VAR 0 1
73872: NONEQUAL
73873: PUSH
73874: LD_OWVAR 2
73878: PPUSH
73879: LD_VAR 0 1
73883: PPUSH
73884: CALL_OW 81
73888: PUSH
73889: LD_INT 2
73891: EQUAL
73892: AND
73893: IFFALSE 73907
// begin side := i ;
73895: LD_ADDR_VAR 0 3
73899: PUSH
73900: LD_VAR 0 1
73904: ST_TO_ADDR
// break ;
73905: GO 73909
// end ;
73907: GO 73860
73909: POP
73910: POP
// if not side then
73911: LD_VAR 0 3
73915: NOT
73916: IFFALSE 73920
// exit ;
73918: GO 73965
// for i := 1 to tmp do
73920: LD_ADDR_VAR 0 1
73924: PUSH
73925: DOUBLE
73926: LD_INT 1
73928: DEC
73929: ST_TO_ADDR
73930: LD_VAR 0 2
73934: PUSH
73935: FOR_TO
73936: IFFALSE 73963
// if Prob ( 60 ) then
73938: LD_INT 60
73940: PPUSH
73941: CALL_OW 13
73945: IFFALSE 73961
// SetSide ( i , side ) ;
73947: LD_VAR 0 1
73951: PPUSH
73952: LD_VAR 0 3
73956: PPUSH
73957: CALL_OW 235
73961: GO 73935
73963: POP
73964: POP
// end ;
73965: PPOPN 3
73967: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
73968: LD_EXP 59
73972: PUSH
73973: LD_EXP 72
73977: AND
73978: IFFALSE 74097
73980: GO 73982
73982: DISABLE
73983: LD_INT 0
73985: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
73986: LD_ADDR_VAR 0 1
73990: PUSH
73991: LD_INT 22
73993: PUSH
73994: LD_OWVAR 2
73998: PUSH
73999: EMPTY
74000: LIST
74001: LIST
74002: PUSH
74003: LD_INT 21
74005: PUSH
74006: LD_INT 1
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: PUSH
74013: LD_INT 3
74015: PUSH
74016: LD_INT 23
74018: PUSH
74019: LD_INT 0
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: LIST
74034: PPUSH
74035: CALL_OW 69
74039: PUSH
74040: FOR_IN
74041: IFFALSE 74095
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
74043: LD_VAR 0 1
74047: PPUSH
74048: CALL_OW 257
74052: PUSH
74053: LD_INT 1
74055: PUSH
74056: LD_INT 2
74058: PUSH
74059: LD_INT 3
74061: PUSH
74062: LD_INT 4
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: IN
74071: IFFALSE 74093
// SetClass ( un , rand ( 1 , 4 ) ) ;
74073: LD_VAR 0 1
74077: PPUSH
74078: LD_INT 1
74080: PPUSH
74081: LD_INT 4
74083: PPUSH
74084: CALL_OW 12
74088: PPUSH
74089: CALL_OW 336
74093: GO 74040
74095: POP
74096: POP
// end ;
74097: PPOPN 1
74099: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
74100: LD_EXP 59
74104: PUSH
74105: LD_EXP 71
74109: AND
74110: IFFALSE 74189
74112: GO 74114
74114: DISABLE
74115: LD_INT 0
74117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74118: LD_ADDR_VAR 0 1
74122: PUSH
74123: LD_INT 22
74125: PUSH
74126: LD_OWVAR 2
74130: PUSH
74131: EMPTY
74132: LIST
74133: LIST
74134: PUSH
74135: LD_INT 21
74137: PUSH
74138: LD_INT 3
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PPUSH
74149: CALL_OW 69
74153: ST_TO_ADDR
// if not tmp then
74154: LD_VAR 0 1
74158: NOT
74159: IFFALSE 74163
// exit ;
74161: GO 74189
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
74163: LD_VAR 0 1
74167: PUSH
74168: LD_INT 1
74170: PPUSH
74171: LD_VAR 0 1
74175: PPUSH
74176: CALL_OW 12
74180: ARRAY
74181: PPUSH
74182: LD_INT 100
74184: PPUSH
74185: CALL_OW 234
// end ;
74189: PPOPN 1
74191: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
74192: LD_EXP 59
74196: PUSH
74197: LD_EXP 73
74201: AND
74202: IFFALSE 74300
74204: GO 74206
74206: DISABLE
74207: LD_INT 0
74209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74210: LD_ADDR_VAR 0 1
74214: PUSH
74215: LD_INT 22
74217: PUSH
74218: LD_OWVAR 2
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PUSH
74227: LD_INT 21
74229: PUSH
74230: LD_INT 1
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PPUSH
74241: CALL_OW 69
74245: ST_TO_ADDR
// if not tmp then
74246: LD_VAR 0 1
74250: NOT
74251: IFFALSE 74255
// exit ;
74253: GO 74300
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
74255: LD_VAR 0 1
74259: PUSH
74260: LD_INT 1
74262: PPUSH
74263: LD_VAR 0 1
74267: PPUSH
74268: CALL_OW 12
74272: ARRAY
74273: PPUSH
74274: LD_INT 1
74276: PPUSH
74277: LD_INT 4
74279: PPUSH
74280: CALL_OW 12
74284: PPUSH
74285: LD_INT 3000
74287: PPUSH
74288: LD_INT 9000
74290: PPUSH
74291: CALL_OW 12
74295: PPUSH
74296: CALL_OW 492
// end ;
74300: PPOPN 1
74302: END
// every 0 0$1 trigger StreamModeActive and sDepot do
74303: LD_EXP 59
74307: PUSH
74308: LD_EXP 74
74312: AND
74313: IFFALSE 74333
74315: GO 74317
74317: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
74318: LD_INT 1
74320: PPUSH
74321: LD_OWVAR 2
74325: PPUSH
74326: LD_INT 0
74328: PPUSH
74329: CALL_OW 324
74333: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
74334: LD_EXP 59
74338: PUSH
74339: LD_EXP 75
74343: AND
74344: IFFALSE 74427
74346: GO 74348
74348: DISABLE
74349: LD_INT 0
74351: PPUSH
74352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74353: LD_ADDR_VAR 0 2
74357: PUSH
74358: LD_INT 22
74360: PUSH
74361: LD_OWVAR 2
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_INT 21
74372: PUSH
74373: LD_INT 3
74375: PUSH
74376: EMPTY
74377: LIST
74378: LIST
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: PPUSH
74384: CALL_OW 69
74388: ST_TO_ADDR
// if not tmp then
74389: LD_VAR 0 2
74393: NOT
74394: IFFALSE 74398
// exit ;
74396: GO 74427
// for i in tmp do
74398: LD_ADDR_VAR 0 1
74402: PUSH
74403: LD_VAR 0 2
74407: PUSH
74408: FOR_IN
74409: IFFALSE 74425
// SetBLevel ( i , 10 ) ;
74411: LD_VAR 0 1
74415: PPUSH
74416: LD_INT 10
74418: PPUSH
74419: CALL_OW 241
74423: GO 74408
74425: POP
74426: POP
// end ;
74427: PPOPN 2
74429: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
74430: LD_EXP 59
74434: PUSH
74435: LD_EXP 76
74439: AND
74440: IFFALSE 74551
74442: GO 74444
74444: DISABLE
74445: LD_INT 0
74447: PPUSH
74448: PPUSH
74449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74450: LD_ADDR_VAR 0 3
74454: PUSH
74455: LD_INT 22
74457: PUSH
74458: LD_OWVAR 2
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: PUSH
74467: LD_INT 25
74469: PUSH
74470: LD_INT 1
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PPUSH
74481: CALL_OW 69
74485: ST_TO_ADDR
// if not tmp then
74486: LD_VAR 0 3
74490: NOT
74491: IFFALSE 74495
// exit ;
74493: GO 74551
// un := tmp [ rand ( 1 , tmp ) ] ;
74495: LD_ADDR_VAR 0 2
74499: PUSH
74500: LD_VAR 0 3
74504: PUSH
74505: LD_INT 1
74507: PPUSH
74508: LD_VAR 0 3
74512: PPUSH
74513: CALL_OW 12
74517: ARRAY
74518: ST_TO_ADDR
// if Crawls ( un ) then
74519: LD_VAR 0 2
74523: PPUSH
74524: CALL_OW 318
74528: IFFALSE 74539
// ComWalk ( un ) ;
74530: LD_VAR 0 2
74534: PPUSH
74535: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74539: LD_VAR 0 2
74543: PPUSH
74544: LD_INT 5
74546: PPUSH
74547: CALL_OW 336
// end ;
74551: PPOPN 3
74553: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
74554: LD_EXP 59
74558: PUSH
74559: LD_EXP 77
74563: AND
74564: PUSH
74565: LD_OWVAR 67
74569: PUSH
74570: LD_INT 4
74572: LESS
74573: AND
74574: IFFALSE 74593
74576: GO 74578
74578: DISABLE
// begin Difficulty := Difficulty + 1 ;
74579: LD_ADDR_OWVAR 67
74583: PUSH
74584: LD_OWVAR 67
74588: PUSH
74589: LD_INT 1
74591: PLUS
74592: ST_TO_ADDR
// end ;
74593: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74594: LD_EXP 59
74598: PUSH
74599: LD_EXP 78
74603: AND
74604: IFFALSE 74707
74606: GO 74608
74608: DISABLE
74609: LD_INT 0
74611: PPUSH
// begin for i := 1 to 5 do
74612: LD_ADDR_VAR 0 1
74616: PUSH
74617: DOUBLE
74618: LD_INT 1
74620: DEC
74621: ST_TO_ADDR
74622: LD_INT 5
74624: PUSH
74625: FOR_TO
74626: IFFALSE 74705
// begin uc_nation := nation_nature ;
74628: LD_ADDR_OWVAR 21
74632: PUSH
74633: LD_INT 0
74635: ST_TO_ADDR
// uc_side := 0 ;
74636: LD_ADDR_OWVAR 20
74640: PUSH
74641: LD_INT 0
74643: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74644: LD_ADDR_OWVAR 29
74648: PUSH
74649: LD_INT 12
74651: PUSH
74652: LD_INT 12
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: ST_TO_ADDR
// hc_agressivity := 20 ;
74659: LD_ADDR_OWVAR 35
74663: PUSH
74664: LD_INT 20
74666: ST_TO_ADDR
// hc_class := class_tiger ;
74667: LD_ADDR_OWVAR 28
74671: PUSH
74672: LD_INT 14
74674: ST_TO_ADDR
// hc_gallery :=  ;
74675: LD_ADDR_OWVAR 33
74679: PUSH
74680: LD_STRING 
74682: ST_TO_ADDR
// hc_name :=  ;
74683: LD_ADDR_OWVAR 26
74687: PUSH
74688: LD_STRING 
74690: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74691: CALL_OW 44
74695: PPUSH
74696: LD_INT 0
74698: PPUSH
74699: CALL_OW 51
// end ;
74703: GO 74625
74705: POP
74706: POP
// end ;
74707: PPOPN 1
74709: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74710: LD_EXP 59
74714: PUSH
74715: LD_EXP 79
74719: AND
74720: IFFALSE 74729
74722: GO 74724
74724: DISABLE
// StreamSibBomb ;
74725: CALL 74730 0 0
74729: END
// export function StreamSibBomb ; var i , x , y ; begin
74730: LD_INT 0
74732: PPUSH
74733: PPUSH
74734: PPUSH
74735: PPUSH
// result := false ;
74736: LD_ADDR_VAR 0 1
74740: PUSH
74741: LD_INT 0
74743: ST_TO_ADDR
// for i := 1 to 16 do
74744: LD_ADDR_VAR 0 2
74748: PUSH
74749: DOUBLE
74750: LD_INT 1
74752: DEC
74753: ST_TO_ADDR
74754: LD_INT 16
74756: PUSH
74757: FOR_TO
74758: IFFALSE 74957
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74760: LD_ADDR_VAR 0 3
74764: PUSH
74765: LD_INT 10
74767: PUSH
74768: LD_INT 20
74770: PUSH
74771: LD_INT 30
74773: PUSH
74774: LD_INT 40
74776: PUSH
74777: LD_INT 50
74779: PUSH
74780: LD_INT 60
74782: PUSH
74783: LD_INT 70
74785: PUSH
74786: LD_INT 80
74788: PUSH
74789: LD_INT 90
74791: PUSH
74792: LD_INT 100
74794: PUSH
74795: LD_INT 110
74797: PUSH
74798: LD_INT 120
74800: PUSH
74801: LD_INT 130
74803: PUSH
74804: LD_INT 140
74806: PUSH
74807: LD_INT 150
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: PUSH
74827: LD_INT 1
74829: PPUSH
74830: LD_INT 15
74832: PPUSH
74833: CALL_OW 12
74837: ARRAY
74838: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74839: LD_ADDR_VAR 0 4
74843: PUSH
74844: LD_INT 10
74846: PUSH
74847: LD_INT 20
74849: PUSH
74850: LD_INT 30
74852: PUSH
74853: LD_INT 40
74855: PUSH
74856: LD_INT 50
74858: PUSH
74859: LD_INT 60
74861: PUSH
74862: LD_INT 70
74864: PUSH
74865: LD_INT 80
74867: PUSH
74868: LD_INT 90
74870: PUSH
74871: LD_INT 100
74873: PUSH
74874: LD_INT 110
74876: PUSH
74877: LD_INT 120
74879: PUSH
74880: LD_INT 130
74882: PUSH
74883: LD_INT 140
74885: PUSH
74886: LD_INT 150
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: PUSH
74906: LD_INT 1
74908: PPUSH
74909: LD_INT 15
74911: PPUSH
74912: CALL_OW 12
74916: ARRAY
74917: ST_TO_ADDR
// if ValidHex ( x , y ) then
74918: LD_VAR 0 3
74922: PPUSH
74923: LD_VAR 0 4
74927: PPUSH
74928: CALL_OW 488
74932: IFFALSE 74955
// begin result := [ x , y ] ;
74934: LD_ADDR_VAR 0 1
74938: PUSH
74939: LD_VAR 0 3
74943: PUSH
74944: LD_VAR 0 4
74948: PUSH
74949: EMPTY
74950: LIST
74951: LIST
74952: ST_TO_ADDR
// break ;
74953: GO 74957
// end ; end ;
74955: GO 74757
74957: POP
74958: POP
// if result then
74959: LD_VAR 0 1
74963: IFFALSE 75023
// begin ToLua ( playSibBomb() ) ;
74965: LD_STRING playSibBomb()
74967: PPUSH
74968: CALL_OW 559
// wait ( 0 0$14 ) ;
74972: LD_INT 490
74974: PPUSH
74975: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
74979: LD_VAR 0 1
74983: PUSH
74984: LD_INT 1
74986: ARRAY
74987: PPUSH
74988: LD_VAR 0 1
74992: PUSH
74993: LD_INT 2
74995: ARRAY
74996: PPUSH
74997: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
75001: LD_VAR 0 1
75005: PUSH
75006: LD_INT 1
75008: ARRAY
75009: PPUSH
75010: LD_VAR 0 1
75014: PUSH
75015: LD_INT 2
75017: ARRAY
75018: PPUSH
75019: CALL_OW 429
// end ; end ;
75023: LD_VAR 0 1
75027: RET
// every 0 0$1 trigger StreamModeActive and sReset do
75028: LD_EXP 59
75032: PUSH
75033: LD_EXP 81
75037: AND
75038: IFFALSE 75050
75040: GO 75042
75042: DISABLE
// YouLost (  ) ;
75043: LD_STRING 
75045: PPUSH
75046: CALL_OW 104
75050: END
// every 0 0$1 trigger StreamModeActive and sFog do
75051: LD_EXP 59
75055: PUSH
75056: LD_EXP 80
75060: AND
75061: IFFALSE 75075
75063: GO 75065
75065: DISABLE
// FogOff ( your_side ) ;
75066: LD_OWVAR 2
75070: PPUSH
75071: CALL_OW 344
75075: END
// every 0 0$1 trigger StreamModeActive and sSun do
75076: LD_EXP 59
75080: PUSH
75081: LD_EXP 82
75085: AND
75086: IFFALSE 75114
75088: GO 75090
75090: DISABLE
// begin solar_recharge_percent := 0 ;
75091: LD_ADDR_OWVAR 79
75095: PUSH
75096: LD_INT 0
75098: ST_TO_ADDR
// wait ( 5 5$00 ) ;
75099: LD_INT 10500
75101: PPUSH
75102: CALL_OW 67
// solar_recharge_percent := 100 ;
75106: LD_ADDR_OWVAR 79
75110: PUSH
75111: LD_INT 100
75113: ST_TO_ADDR
// end ;
75114: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
75115: LD_EXP 59
75119: PUSH
75120: LD_EXP 83
75124: AND
75125: IFFALSE 75364
75127: GO 75129
75129: DISABLE
75130: LD_INT 0
75132: PPUSH
75133: PPUSH
75134: PPUSH
// begin tmp := [ ] ;
75135: LD_ADDR_VAR 0 3
75139: PUSH
75140: EMPTY
75141: ST_TO_ADDR
// for i := 1 to 6 do
75142: LD_ADDR_VAR 0 1
75146: PUSH
75147: DOUBLE
75148: LD_INT 1
75150: DEC
75151: ST_TO_ADDR
75152: LD_INT 6
75154: PUSH
75155: FOR_TO
75156: IFFALSE 75261
// begin uc_nation := nation_nature ;
75158: LD_ADDR_OWVAR 21
75162: PUSH
75163: LD_INT 0
75165: ST_TO_ADDR
// uc_side := 0 ;
75166: LD_ADDR_OWVAR 20
75170: PUSH
75171: LD_INT 0
75173: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75174: LD_ADDR_OWVAR 29
75178: PUSH
75179: LD_INT 12
75181: PUSH
75182: LD_INT 12
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: ST_TO_ADDR
// hc_agressivity := 20 ;
75189: LD_ADDR_OWVAR 35
75193: PUSH
75194: LD_INT 20
75196: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
75197: LD_ADDR_OWVAR 28
75201: PUSH
75202: LD_INT 17
75204: ST_TO_ADDR
// hc_gallery :=  ;
75205: LD_ADDR_OWVAR 33
75209: PUSH
75210: LD_STRING 
75212: ST_TO_ADDR
// hc_name :=  ;
75213: LD_ADDR_OWVAR 26
75217: PUSH
75218: LD_STRING 
75220: ST_TO_ADDR
// un := CreateHuman ;
75221: LD_ADDR_VAR 0 2
75225: PUSH
75226: CALL_OW 44
75230: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
75231: LD_VAR 0 2
75235: PPUSH
75236: LD_INT 1
75238: PPUSH
75239: CALL_OW 51
// tmp := tmp ^ un ;
75243: LD_ADDR_VAR 0 3
75247: PUSH
75248: LD_VAR 0 3
75252: PUSH
75253: LD_VAR 0 2
75257: ADD
75258: ST_TO_ADDR
// end ;
75259: GO 75155
75261: POP
75262: POP
// repeat wait ( 0 0$1 ) ;
75263: LD_INT 35
75265: PPUSH
75266: CALL_OW 67
// for un in tmp do
75270: LD_ADDR_VAR 0 2
75274: PUSH
75275: LD_VAR 0 3
75279: PUSH
75280: FOR_IN
75281: IFFALSE 75355
// begin if IsDead ( un ) then
75283: LD_VAR 0 2
75287: PPUSH
75288: CALL_OW 301
75292: IFFALSE 75312
// begin tmp := tmp diff un ;
75294: LD_ADDR_VAR 0 3
75298: PUSH
75299: LD_VAR 0 3
75303: PUSH
75304: LD_VAR 0 2
75308: DIFF
75309: ST_TO_ADDR
// continue ;
75310: GO 75280
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
75312: LD_VAR 0 2
75316: PPUSH
75317: LD_INT 3
75319: PUSH
75320: LD_INT 22
75322: PUSH
75323: LD_INT 0
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: PPUSH
75334: CALL_OW 69
75338: PPUSH
75339: LD_VAR 0 2
75343: PPUSH
75344: CALL_OW 74
75348: PPUSH
75349: CALL_OW 115
// end ;
75353: GO 75280
75355: POP
75356: POP
// until not tmp ;
75357: LD_VAR 0 3
75361: NOT
75362: IFFALSE 75263
// end ;
75364: PPOPN 3
75366: END
// every 0 0$1 trigger StreamModeActive and sTroll do
75367: LD_EXP 59
75371: PUSH
75372: LD_EXP 84
75376: AND
75377: IFFALSE 75431
75379: GO 75381
75381: DISABLE
// begin ToLua ( displayTroll(); ) ;
75382: LD_STRING displayTroll();
75384: PPUSH
75385: CALL_OW 559
// wait ( 3 3$00 ) ;
75389: LD_INT 6300
75391: PPUSH
75392: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75396: LD_STRING hideTroll();
75398: PPUSH
75399: CALL_OW 559
// wait ( 1 1$00 ) ;
75403: LD_INT 2100
75405: PPUSH
75406: CALL_OW 67
// ToLua ( displayTroll(); ) ;
75410: LD_STRING displayTroll();
75412: PPUSH
75413: CALL_OW 559
// wait ( 1 1$00 ) ;
75417: LD_INT 2100
75419: PPUSH
75420: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75424: LD_STRING hideTroll();
75426: PPUSH
75427: CALL_OW 559
// end ;
75431: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
75432: LD_EXP 59
75436: PUSH
75437: LD_EXP 85
75441: AND
75442: IFFALSE 75505
75444: GO 75446
75446: DISABLE
75447: LD_INT 0
75449: PPUSH
// begin p := 0 ;
75450: LD_ADDR_VAR 0 1
75454: PUSH
75455: LD_INT 0
75457: ST_TO_ADDR
// repeat game_speed := 1 ;
75458: LD_ADDR_OWVAR 65
75462: PUSH
75463: LD_INT 1
75465: ST_TO_ADDR
// wait ( 0 0$1 ) ;
75466: LD_INT 35
75468: PPUSH
75469: CALL_OW 67
// p := p + 1 ;
75473: LD_ADDR_VAR 0 1
75477: PUSH
75478: LD_VAR 0 1
75482: PUSH
75483: LD_INT 1
75485: PLUS
75486: ST_TO_ADDR
// until p >= 60 ;
75487: LD_VAR 0 1
75491: PUSH
75492: LD_INT 60
75494: GREATEREQUAL
75495: IFFALSE 75458
// game_speed := 4 ;
75497: LD_ADDR_OWVAR 65
75501: PUSH
75502: LD_INT 4
75504: ST_TO_ADDR
// end ;
75505: PPOPN 1
75507: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75508: LD_EXP 59
75512: PUSH
75513: LD_EXP 86
75517: AND
75518: IFFALSE 75664
75520: GO 75522
75522: DISABLE
75523: LD_INT 0
75525: PPUSH
75526: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75527: LD_ADDR_VAR 0 1
75531: PUSH
75532: LD_INT 22
75534: PUSH
75535: LD_OWVAR 2
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: PUSH
75544: LD_INT 2
75546: PUSH
75547: LD_INT 30
75549: PUSH
75550: LD_INT 0
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: PUSH
75557: LD_INT 30
75559: PUSH
75560: LD_INT 1
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: EMPTY
75568: LIST
75569: LIST
75570: LIST
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: PPUSH
75576: CALL_OW 69
75580: ST_TO_ADDR
// if not depot then
75581: LD_VAR 0 1
75585: NOT
75586: IFFALSE 75590
// exit ;
75588: GO 75664
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75590: LD_ADDR_VAR 0 2
75594: PUSH
75595: LD_VAR 0 1
75599: PUSH
75600: LD_INT 1
75602: PPUSH
75603: LD_VAR 0 1
75607: PPUSH
75608: CALL_OW 12
75612: ARRAY
75613: PPUSH
75614: CALL_OW 274
75618: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75619: LD_VAR 0 2
75623: PPUSH
75624: LD_INT 1
75626: PPUSH
75627: LD_INT 0
75629: PPUSH
75630: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75634: LD_VAR 0 2
75638: PPUSH
75639: LD_INT 2
75641: PPUSH
75642: LD_INT 0
75644: PPUSH
75645: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75649: LD_VAR 0 2
75653: PPUSH
75654: LD_INT 3
75656: PPUSH
75657: LD_INT 0
75659: PPUSH
75660: CALL_OW 277
// end ;
75664: PPOPN 2
75666: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75667: LD_EXP 59
75671: PUSH
75672: LD_EXP 87
75676: AND
75677: IFFALSE 75774
75679: GO 75681
75681: DISABLE
75682: LD_INT 0
75684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75685: LD_ADDR_VAR 0 1
75689: PUSH
75690: LD_INT 22
75692: PUSH
75693: LD_OWVAR 2
75697: PUSH
75698: EMPTY
75699: LIST
75700: LIST
75701: PUSH
75702: LD_INT 21
75704: PUSH
75705: LD_INT 1
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: PUSH
75712: LD_INT 3
75714: PUSH
75715: LD_INT 23
75717: PUSH
75718: LD_INT 0
75720: PUSH
75721: EMPTY
75722: LIST
75723: LIST
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PUSH
75729: EMPTY
75730: LIST
75731: LIST
75732: LIST
75733: PPUSH
75734: CALL_OW 69
75738: ST_TO_ADDR
// if not tmp then
75739: LD_VAR 0 1
75743: NOT
75744: IFFALSE 75748
// exit ;
75746: GO 75774
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75748: LD_VAR 0 1
75752: PUSH
75753: LD_INT 1
75755: PPUSH
75756: LD_VAR 0 1
75760: PPUSH
75761: CALL_OW 12
75765: ARRAY
75766: PPUSH
75767: LD_INT 200
75769: PPUSH
75770: CALL_OW 234
// end ;
75774: PPOPN 1
75776: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75777: LD_EXP 59
75781: PUSH
75782: LD_EXP 88
75786: AND
75787: IFFALSE 75866
75789: GO 75791
75791: DISABLE
75792: LD_INT 0
75794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75795: LD_ADDR_VAR 0 1
75799: PUSH
75800: LD_INT 22
75802: PUSH
75803: LD_OWVAR 2
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: PUSH
75812: LD_INT 21
75814: PUSH
75815: LD_INT 2
75817: PUSH
75818: EMPTY
75819: LIST
75820: LIST
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: PPUSH
75826: CALL_OW 69
75830: ST_TO_ADDR
// if not tmp then
75831: LD_VAR 0 1
75835: NOT
75836: IFFALSE 75840
// exit ;
75838: GO 75866
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75840: LD_VAR 0 1
75844: PUSH
75845: LD_INT 1
75847: PPUSH
75848: LD_VAR 0 1
75852: PPUSH
75853: CALL_OW 12
75857: ARRAY
75858: PPUSH
75859: LD_INT 60
75861: PPUSH
75862: CALL_OW 234
// end ;
75866: PPOPN 1
75868: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75869: LD_EXP 59
75873: PUSH
75874: LD_EXP 89
75878: AND
75879: IFFALSE 75978
75881: GO 75883
75883: DISABLE
75884: LD_INT 0
75886: PPUSH
75887: PPUSH
// begin enable ;
75888: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75889: LD_ADDR_VAR 0 1
75893: PUSH
75894: LD_INT 22
75896: PUSH
75897: LD_OWVAR 2
75901: PUSH
75902: EMPTY
75903: LIST
75904: LIST
75905: PUSH
75906: LD_INT 61
75908: PUSH
75909: EMPTY
75910: LIST
75911: PUSH
75912: LD_INT 33
75914: PUSH
75915: LD_INT 2
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: LIST
75926: PPUSH
75927: CALL_OW 69
75931: ST_TO_ADDR
// if not tmp then
75932: LD_VAR 0 1
75936: NOT
75937: IFFALSE 75941
// exit ;
75939: GO 75978
// for i in tmp do
75941: LD_ADDR_VAR 0 2
75945: PUSH
75946: LD_VAR 0 1
75950: PUSH
75951: FOR_IN
75952: IFFALSE 75976
// if IsControledBy ( i ) then
75954: LD_VAR 0 2
75958: PPUSH
75959: CALL_OW 312
75963: IFFALSE 75974
// ComUnlink ( i ) ;
75965: LD_VAR 0 2
75969: PPUSH
75970: CALL_OW 136
75974: GO 75951
75976: POP
75977: POP
// end ;
75978: PPOPN 2
75980: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
75981: LD_EXP 59
75985: PUSH
75986: LD_EXP 90
75990: AND
75991: IFFALSE 76131
75993: GO 75995
75995: DISABLE
75996: LD_INT 0
75998: PPUSH
75999: PPUSH
// begin ToLua ( displayPowell(); ) ;
76000: LD_STRING displayPowell();
76002: PPUSH
76003: CALL_OW 559
// uc_side := 0 ;
76007: LD_ADDR_OWVAR 20
76011: PUSH
76012: LD_INT 0
76014: ST_TO_ADDR
// uc_nation := 2 ;
76015: LD_ADDR_OWVAR 21
76019: PUSH
76020: LD_INT 2
76022: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
76023: LD_ADDR_OWVAR 37
76027: PUSH
76028: LD_INT 14
76030: ST_TO_ADDR
// vc_engine := engine_siberite ;
76031: LD_ADDR_OWVAR 39
76035: PUSH
76036: LD_INT 3
76038: ST_TO_ADDR
// vc_control := control_apeman ;
76039: LD_ADDR_OWVAR 38
76043: PUSH
76044: LD_INT 5
76046: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
76047: LD_ADDR_OWVAR 40
76051: PUSH
76052: LD_INT 29
76054: ST_TO_ADDR
// un := CreateVehicle ;
76055: LD_ADDR_VAR 0 2
76059: PUSH
76060: CALL_OW 45
76064: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76065: LD_VAR 0 2
76069: PPUSH
76070: LD_INT 1
76072: PPUSH
76073: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76077: LD_INT 35
76079: PPUSH
76080: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76084: LD_VAR 0 2
76088: PPUSH
76089: LD_INT 22
76091: PUSH
76092: LD_OWVAR 2
76096: PUSH
76097: EMPTY
76098: LIST
76099: LIST
76100: PPUSH
76101: CALL_OW 69
76105: PPUSH
76106: LD_VAR 0 2
76110: PPUSH
76111: CALL_OW 74
76115: PPUSH
76116: CALL_OW 115
// until IsDead ( un ) ;
76120: LD_VAR 0 2
76124: PPUSH
76125: CALL_OW 301
76129: IFFALSE 76077
// end ;
76131: PPOPN 2
76133: END
// every 0 0$1 trigger StreamModeActive and sStu do
76134: LD_EXP 59
76138: PUSH
76139: LD_EXP 98
76143: AND
76144: IFFALSE 76160
76146: GO 76148
76148: DISABLE
// begin ToLua ( displayStucuk(); ) ;
76149: LD_STRING displayStucuk();
76151: PPUSH
76152: CALL_OW 559
// ResetFog ;
76156: CALL_OW 335
// end ;
76160: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
76161: LD_EXP 59
76165: PUSH
76166: LD_EXP 91
76170: AND
76171: IFFALSE 76312
76173: GO 76175
76175: DISABLE
76176: LD_INT 0
76178: PPUSH
76179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76180: LD_ADDR_VAR 0 2
76184: PUSH
76185: LD_INT 22
76187: PUSH
76188: LD_OWVAR 2
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PUSH
76197: LD_INT 21
76199: PUSH
76200: LD_INT 1
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: PPUSH
76211: CALL_OW 69
76215: ST_TO_ADDR
// if not tmp then
76216: LD_VAR 0 2
76220: NOT
76221: IFFALSE 76225
// exit ;
76223: GO 76312
// un := tmp [ rand ( 1 , tmp ) ] ;
76225: LD_ADDR_VAR 0 1
76229: PUSH
76230: LD_VAR 0 2
76234: PUSH
76235: LD_INT 1
76237: PPUSH
76238: LD_VAR 0 2
76242: PPUSH
76243: CALL_OW 12
76247: ARRAY
76248: ST_TO_ADDR
// SetSide ( un , 0 ) ;
76249: LD_VAR 0 1
76253: PPUSH
76254: LD_INT 0
76256: PPUSH
76257: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
76261: LD_VAR 0 1
76265: PPUSH
76266: LD_OWVAR 3
76270: PUSH
76271: LD_VAR 0 1
76275: DIFF
76276: PPUSH
76277: LD_VAR 0 1
76281: PPUSH
76282: CALL_OW 74
76286: PPUSH
76287: CALL_OW 115
// wait ( 0 0$20 ) ;
76291: LD_INT 700
76293: PPUSH
76294: CALL_OW 67
// SetSide ( un , your_side ) ;
76298: LD_VAR 0 1
76302: PPUSH
76303: LD_OWVAR 2
76307: PPUSH
76308: CALL_OW 235
// end ;
76312: PPOPN 2
76314: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
76315: LD_EXP 59
76319: PUSH
76320: LD_EXP 92
76324: AND
76325: IFFALSE 76431
76327: GO 76329
76329: DISABLE
76330: LD_INT 0
76332: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76333: LD_ADDR_VAR 0 1
76337: PUSH
76338: LD_INT 22
76340: PUSH
76341: LD_OWVAR 2
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: PUSH
76350: LD_INT 2
76352: PUSH
76353: LD_INT 30
76355: PUSH
76356: LD_INT 0
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: PUSH
76363: LD_INT 30
76365: PUSH
76366: LD_INT 1
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: LIST
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: PPUSH
76382: CALL_OW 69
76386: ST_TO_ADDR
// if not depot then
76387: LD_VAR 0 1
76391: NOT
76392: IFFALSE 76396
// exit ;
76394: GO 76431
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
76396: LD_VAR 0 1
76400: PUSH
76401: LD_INT 1
76403: ARRAY
76404: PPUSH
76405: CALL_OW 250
76409: PPUSH
76410: LD_VAR 0 1
76414: PUSH
76415: LD_INT 1
76417: ARRAY
76418: PPUSH
76419: CALL_OW 251
76423: PPUSH
76424: LD_INT 70
76426: PPUSH
76427: CALL_OW 495
// end ;
76431: PPOPN 1
76433: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
76434: LD_EXP 59
76438: PUSH
76439: LD_EXP 93
76443: AND
76444: IFFALSE 76655
76446: GO 76448
76448: DISABLE
76449: LD_INT 0
76451: PPUSH
76452: PPUSH
76453: PPUSH
76454: PPUSH
76455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76456: LD_ADDR_VAR 0 5
76460: PUSH
76461: LD_INT 22
76463: PUSH
76464: LD_OWVAR 2
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: PUSH
76473: LD_INT 21
76475: PUSH
76476: LD_INT 1
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: PUSH
76483: EMPTY
76484: LIST
76485: LIST
76486: PPUSH
76487: CALL_OW 69
76491: ST_TO_ADDR
// if not tmp then
76492: LD_VAR 0 5
76496: NOT
76497: IFFALSE 76501
// exit ;
76499: GO 76655
// for i in tmp do
76501: LD_ADDR_VAR 0 1
76505: PUSH
76506: LD_VAR 0 5
76510: PUSH
76511: FOR_IN
76512: IFFALSE 76653
// begin d := rand ( 0 , 5 ) ;
76514: LD_ADDR_VAR 0 4
76518: PUSH
76519: LD_INT 0
76521: PPUSH
76522: LD_INT 5
76524: PPUSH
76525: CALL_OW 12
76529: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76530: LD_ADDR_VAR 0 2
76534: PUSH
76535: LD_VAR 0 1
76539: PPUSH
76540: CALL_OW 250
76544: PPUSH
76545: LD_VAR 0 4
76549: PPUSH
76550: LD_INT 3
76552: PPUSH
76553: LD_INT 12
76555: PPUSH
76556: CALL_OW 12
76560: PPUSH
76561: CALL_OW 272
76565: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76566: LD_ADDR_VAR 0 3
76570: PUSH
76571: LD_VAR 0 1
76575: PPUSH
76576: CALL_OW 251
76580: PPUSH
76581: LD_VAR 0 4
76585: PPUSH
76586: LD_INT 3
76588: PPUSH
76589: LD_INT 12
76591: PPUSH
76592: CALL_OW 12
76596: PPUSH
76597: CALL_OW 273
76601: ST_TO_ADDR
// if ValidHex ( x , y ) then
76602: LD_VAR 0 2
76606: PPUSH
76607: LD_VAR 0 3
76611: PPUSH
76612: CALL_OW 488
76616: IFFALSE 76651
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76618: LD_VAR 0 1
76622: PPUSH
76623: LD_VAR 0 2
76627: PPUSH
76628: LD_VAR 0 3
76632: PPUSH
76633: LD_INT 3
76635: PPUSH
76636: LD_INT 6
76638: PPUSH
76639: CALL_OW 12
76643: PPUSH
76644: LD_INT 1
76646: PPUSH
76647: CALL_OW 483
// end ;
76651: GO 76511
76653: POP
76654: POP
// end ;
76655: PPOPN 5
76657: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76658: LD_EXP 59
76662: PUSH
76663: LD_EXP 94
76667: AND
76668: IFFALSE 76762
76670: GO 76672
76672: DISABLE
76673: LD_INT 0
76675: PPUSH
76676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76677: LD_ADDR_VAR 0 2
76681: PUSH
76682: LD_INT 22
76684: PUSH
76685: LD_OWVAR 2
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: PUSH
76694: LD_INT 32
76696: PUSH
76697: LD_INT 1
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: PUSH
76704: LD_INT 21
76706: PUSH
76707: LD_INT 2
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: LIST
76718: PPUSH
76719: CALL_OW 69
76723: ST_TO_ADDR
// if not tmp then
76724: LD_VAR 0 2
76728: NOT
76729: IFFALSE 76733
// exit ;
76731: GO 76762
// for i in tmp do
76733: LD_ADDR_VAR 0 1
76737: PUSH
76738: LD_VAR 0 2
76742: PUSH
76743: FOR_IN
76744: IFFALSE 76760
// SetFuel ( i , 0 ) ;
76746: LD_VAR 0 1
76750: PPUSH
76751: LD_INT 0
76753: PPUSH
76754: CALL_OW 240
76758: GO 76743
76760: POP
76761: POP
// end ;
76762: PPOPN 2
76764: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76765: LD_EXP 59
76769: PUSH
76770: LD_EXP 95
76774: AND
76775: IFFALSE 76841
76777: GO 76779
76779: DISABLE
76780: LD_INT 0
76782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76783: LD_ADDR_VAR 0 1
76787: PUSH
76788: LD_INT 22
76790: PUSH
76791: LD_OWVAR 2
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PUSH
76800: LD_INT 30
76802: PUSH
76803: LD_INT 29
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PPUSH
76814: CALL_OW 69
76818: ST_TO_ADDR
// if not tmp then
76819: LD_VAR 0 1
76823: NOT
76824: IFFALSE 76828
// exit ;
76826: GO 76841
// DestroyUnit ( tmp [ 1 ] ) ;
76828: LD_VAR 0 1
76832: PUSH
76833: LD_INT 1
76835: ARRAY
76836: PPUSH
76837: CALL_OW 65
// end ;
76841: PPOPN 1
76843: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76844: LD_EXP 59
76848: PUSH
76849: LD_EXP 97
76853: AND
76854: IFFALSE 76983
76856: GO 76858
76858: DISABLE
76859: LD_INT 0
76861: PPUSH
// begin uc_side := 0 ;
76862: LD_ADDR_OWVAR 20
76866: PUSH
76867: LD_INT 0
76869: ST_TO_ADDR
// uc_nation := nation_arabian ;
76870: LD_ADDR_OWVAR 21
76874: PUSH
76875: LD_INT 2
76877: ST_TO_ADDR
// hc_gallery :=  ;
76878: LD_ADDR_OWVAR 33
76882: PUSH
76883: LD_STRING 
76885: ST_TO_ADDR
// hc_name :=  ;
76886: LD_ADDR_OWVAR 26
76890: PUSH
76891: LD_STRING 
76893: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
76894: LD_INT 1
76896: PPUSH
76897: LD_INT 11
76899: PPUSH
76900: LD_INT 10
76902: PPUSH
76903: CALL_OW 380
// un := CreateHuman ;
76907: LD_ADDR_VAR 0 1
76911: PUSH
76912: CALL_OW 44
76916: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76917: LD_VAR 0 1
76921: PPUSH
76922: LD_INT 1
76924: PPUSH
76925: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76929: LD_INT 35
76931: PPUSH
76932: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76936: LD_VAR 0 1
76940: PPUSH
76941: LD_INT 22
76943: PUSH
76944: LD_OWVAR 2
76948: PUSH
76949: EMPTY
76950: LIST
76951: LIST
76952: PPUSH
76953: CALL_OW 69
76957: PPUSH
76958: LD_VAR 0 1
76962: PPUSH
76963: CALL_OW 74
76967: PPUSH
76968: CALL_OW 115
// until IsDead ( un ) ;
76972: LD_VAR 0 1
76976: PPUSH
76977: CALL_OW 301
76981: IFFALSE 76929
// end ;
76983: PPOPN 1
76985: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
76986: LD_EXP 59
76990: PUSH
76991: LD_EXP 99
76995: AND
76996: IFFALSE 77008
76998: GO 77000
77000: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
77001: LD_STRING earthquake(getX(game), 0, 32)
77003: PPUSH
77004: CALL_OW 559
77008: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
77009: LD_EXP 59
77013: PUSH
77014: LD_EXP 100
77018: AND
77019: IFFALSE 77110
77021: GO 77023
77023: DISABLE
77024: LD_INT 0
77026: PPUSH
// begin enable ;
77027: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
77028: LD_ADDR_VAR 0 1
77032: PUSH
77033: LD_INT 22
77035: PUSH
77036: LD_OWVAR 2
77040: PUSH
77041: EMPTY
77042: LIST
77043: LIST
77044: PUSH
77045: LD_INT 21
77047: PUSH
77048: LD_INT 2
77050: PUSH
77051: EMPTY
77052: LIST
77053: LIST
77054: PUSH
77055: LD_INT 33
77057: PUSH
77058: LD_INT 3
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PUSH
77065: EMPTY
77066: LIST
77067: LIST
77068: LIST
77069: PPUSH
77070: CALL_OW 69
77074: ST_TO_ADDR
// if not tmp then
77075: LD_VAR 0 1
77079: NOT
77080: IFFALSE 77084
// exit ;
77082: GO 77110
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77084: LD_VAR 0 1
77088: PUSH
77089: LD_INT 1
77091: PPUSH
77092: LD_VAR 0 1
77096: PPUSH
77097: CALL_OW 12
77101: ARRAY
77102: PPUSH
77103: LD_INT 1
77105: PPUSH
77106: CALL_OW 234
// end ;
77110: PPOPN 1
77112: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
77113: LD_EXP 59
77117: PUSH
77118: LD_EXP 101
77122: AND
77123: IFFALSE 77264
77125: GO 77127
77127: DISABLE
77128: LD_INT 0
77130: PPUSH
77131: PPUSH
77132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77133: LD_ADDR_VAR 0 3
77137: PUSH
77138: LD_INT 22
77140: PUSH
77141: LD_OWVAR 2
77145: PUSH
77146: EMPTY
77147: LIST
77148: LIST
77149: PUSH
77150: LD_INT 25
77152: PUSH
77153: LD_INT 1
77155: PUSH
77156: EMPTY
77157: LIST
77158: LIST
77159: PUSH
77160: EMPTY
77161: LIST
77162: LIST
77163: PPUSH
77164: CALL_OW 69
77168: ST_TO_ADDR
// if not tmp then
77169: LD_VAR 0 3
77173: NOT
77174: IFFALSE 77178
// exit ;
77176: GO 77264
// un := tmp [ rand ( 1 , tmp ) ] ;
77178: LD_ADDR_VAR 0 2
77182: PUSH
77183: LD_VAR 0 3
77187: PUSH
77188: LD_INT 1
77190: PPUSH
77191: LD_VAR 0 3
77195: PPUSH
77196: CALL_OW 12
77200: ARRAY
77201: ST_TO_ADDR
// if Crawls ( un ) then
77202: LD_VAR 0 2
77206: PPUSH
77207: CALL_OW 318
77211: IFFALSE 77222
// ComWalk ( un ) ;
77213: LD_VAR 0 2
77217: PPUSH
77218: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
77222: LD_VAR 0 2
77226: PPUSH
77227: LD_INT 9
77229: PPUSH
77230: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
77234: LD_INT 28
77236: PPUSH
77237: LD_OWVAR 2
77241: PPUSH
77242: LD_INT 2
77244: PPUSH
77245: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
77249: LD_INT 29
77251: PPUSH
77252: LD_OWVAR 2
77256: PPUSH
77257: LD_INT 2
77259: PPUSH
77260: CALL_OW 322
// end ;
77264: PPOPN 3
77266: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
77267: LD_EXP 59
77271: PUSH
77272: LD_EXP 102
77276: AND
77277: IFFALSE 77388
77279: GO 77281
77281: DISABLE
77282: LD_INT 0
77284: PPUSH
77285: PPUSH
77286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77287: LD_ADDR_VAR 0 3
77291: PUSH
77292: LD_INT 22
77294: PUSH
77295: LD_OWVAR 2
77299: PUSH
77300: EMPTY
77301: LIST
77302: LIST
77303: PUSH
77304: LD_INT 25
77306: PUSH
77307: LD_INT 1
77309: PUSH
77310: EMPTY
77311: LIST
77312: LIST
77313: PUSH
77314: EMPTY
77315: LIST
77316: LIST
77317: PPUSH
77318: CALL_OW 69
77322: ST_TO_ADDR
// if not tmp then
77323: LD_VAR 0 3
77327: NOT
77328: IFFALSE 77332
// exit ;
77330: GO 77388
// un := tmp [ rand ( 1 , tmp ) ] ;
77332: LD_ADDR_VAR 0 2
77336: PUSH
77337: LD_VAR 0 3
77341: PUSH
77342: LD_INT 1
77344: PPUSH
77345: LD_VAR 0 3
77349: PPUSH
77350: CALL_OW 12
77354: ARRAY
77355: ST_TO_ADDR
// if Crawls ( un ) then
77356: LD_VAR 0 2
77360: PPUSH
77361: CALL_OW 318
77365: IFFALSE 77376
// ComWalk ( un ) ;
77367: LD_VAR 0 2
77371: PPUSH
77372: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77376: LD_VAR 0 2
77380: PPUSH
77381: LD_INT 8
77383: PPUSH
77384: CALL_OW 336
// end ;
77388: PPOPN 3
77390: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
77391: LD_EXP 59
77395: PUSH
77396: LD_EXP 103
77400: AND
77401: IFFALSE 77545
77403: GO 77405
77405: DISABLE
77406: LD_INT 0
77408: PPUSH
77409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
77410: LD_ADDR_VAR 0 2
77414: PUSH
77415: LD_INT 22
77417: PUSH
77418: LD_OWVAR 2
77422: PUSH
77423: EMPTY
77424: LIST
77425: LIST
77426: PUSH
77427: LD_INT 21
77429: PUSH
77430: LD_INT 2
77432: PUSH
77433: EMPTY
77434: LIST
77435: LIST
77436: PUSH
77437: LD_INT 2
77439: PUSH
77440: LD_INT 34
77442: PUSH
77443: LD_INT 12
77445: PUSH
77446: EMPTY
77447: LIST
77448: LIST
77449: PUSH
77450: LD_INT 34
77452: PUSH
77453: LD_INT 51
77455: PUSH
77456: EMPTY
77457: LIST
77458: LIST
77459: PUSH
77460: LD_INT 34
77462: PUSH
77463: LD_INT 32
77465: PUSH
77466: EMPTY
77467: LIST
77468: LIST
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: LIST
77474: LIST
77475: PUSH
77476: EMPTY
77477: LIST
77478: LIST
77479: LIST
77480: PPUSH
77481: CALL_OW 69
77485: ST_TO_ADDR
// if not tmp then
77486: LD_VAR 0 2
77490: NOT
77491: IFFALSE 77495
// exit ;
77493: GO 77545
// for i in tmp do
77495: LD_ADDR_VAR 0 1
77499: PUSH
77500: LD_VAR 0 2
77504: PUSH
77505: FOR_IN
77506: IFFALSE 77543
// if GetCargo ( i , mat_artifact ) = 0 then
77508: LD_VAR 0 1
77512: PPUSH
77513: LD_INT 4
77515: PPUSH
77516: CALL_OW 289
77520: PUSH
77521: LD_INT 0
77523: EQUAL
77524: IFFALSE 77541
// SetCargo ( i , mat_siberit , 100 ) ;
77526: LD_VAR 0 1
77530: PPUSH
77531: LD_INT 3
77533: PPUSH
77534: LD_INT 100
77536: PPUSH
77537: CALL_OW 290
77541: GO 77505
77543: POP
77544: POP
// end ;
77545: PPOPN 2
77547: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77548: LD_EXP 59
77552: PUSH
77553: LD_EXP 104
77557: AND
77558: IFFALSE 77741
77560: GO 77562
77562: DISABLE
77563: LD_INT 0
77565: PPUSH
77566: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77567: LD_ADDR_VAR 0 2
77571: PUSH
77572: LD_INT 22
77574: PUSH
77575: LD_OWVAR 2
77579: PUSH
77580: EMPTY
77581: LIST
77582: LIST
77583: PPUSH
77584: CALL_OW 69
77588: ST_TO_ADDR
// if not tmp then
77589: LD_VAR 0 2
77593: NOT
77594: IFFALSE 77598
// exit ;
77596: GO 77741
// for i := 1 to 2 do
77598: LD_ADDR_VAR 0 1
77602: PUSH
77603: DOUBLE
77604: LD_INT 1
77606: DEC
77607: ST_TO_ADDR
77608: LD_INT 2
77610: PUSH
77611: FOR_TO
77612: IFFALSE 77739
// begin uc_side := your_side ;
77614: LD_ADDR_OWVAR 20
77618: PUSH
77619: LD_OWVAR 2
77623: ST_TO_ADDR
// uc_nation := nation_american ;
77624: LD_ADDR_OWVAR 21
77628: PUSH
77629: LD_INT 1
77631: ST_TO_ADDR
// vc_chassis := us_morphling ;
77632: LD_ADDR_OWVAR 37
77636: PUSH
77637: LD_INT 5
77639: ST_TO_ADDR
// vc_engine := engine_siberite ;
77640: LD_ADDR_OWVAR 39
77644: PUSH
77645: LD_INT 3
77647: ST_TO_ADDR
// vc_control := control_computer ;
77648: LD_ADDR_OWVAR 38
77652: PUSH
77653: LD_INT 3
77655: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77656: LD_ADDR_OWVAR 40
77660: PUSH
77661: LD_INT 10
77663: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77664: LD_VAR 0 2
77668: PUSH
77669: LD_INT 1
77671: ARRAY
77672: PPUSH
77673: CALL_OW 310
77677: NOT
77678: IFFALSE 77725
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77680: CALL_OW 45
77684: PPUSH
77685: LD_VAR 0 2
77689: PUSH
77690: LD_INT 1
77692: ARRAY
77693: PPUSH
77694: CALL_OW 250
77698: PPUSH
77699: LD_VAR 0 2
77703: PUSH
77704: LD_INT 1
77706: ARRAY
77707: PPUSH
77708: CALL_OW 251
77712: PPUSH
77713: LD_INT 12
77715: PPUSH
77716: LD_INT 1
77718: PPUSH
77719: CALL_OW 50
77723: GO 77737
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77725: CALL_OW 45
77729: PPUSH
77730: LD_INT 1
77732: PPUSH
77733: CALL_OW 51
// end ;
77737: GO 77611
77739: POP
77740: POP
// end ;
77741: PPOPN 2
77743: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77744: LD_EXP 59
77748: PUSH
77749: LD_EXP 105
77753: AND
77754: IFFALSE 77976
77756: GO 77758
77758: DISABLE
77759: LD_INT 0
77761: PPUSH
77762: PPUSH
77763: PPUSH
77764: PPUSH
77765: PPUSH
77766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77767: LD_ADDR_VAR 0 6
77771: PUSH
77772: LD_INT 22
77774: PUSH
77775: LD_OWVAR 2
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: PUSH
77784: LD_INT 21
77786: PUSH
77787: LD_INT 1
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: PUSH
77794: LD_INT 3
77796: PUSH
77797: LD_INT 23
77799: PUSH
77800: LD_INT 0
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: PUSH
77807: EMPTY
77808: LIST
77809: LIST
77810: PUSH
77811: EMPTY
77812: LIST
77813: LIST
77814: LIST
77815: PPUSH
77816: CALL_OW 69
77820: ST_TO_ADDR
// if not tmp then
77821: LD_VAR 0 6
77825: NOT
77826: IFFALSE 77830
// exit ;
77828: GO 77976
// s1 := rand ( 1 , 4 ) ;
77830: LD_ADDR_VAR 0 2
77834: PUSH
77835: LD_INT 1
77837: PPUSH
77838: LD_INT 4
77840: PPUSH
77841: CALL_OW 12
77845: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77846: LD_ADDR_VAR 0 4
77850: PUSH
77851: LD_VAR 0 6
77855: PUSH
77856: LD_INT 1
77858: ARRAY
77859: PPUSH
77860: LD_VAR 0 2
77864: PPUSH
77865: CALL_OW 259
77869: ST_TO_ADDR
// if s1 = 1 then
77870: LD_VAR 0 2
77874: PUSH
77875: LD_INT 1
77877: EQUAL
77878: IFFALSE 77898
// s2 := rand ( 2 , 4 ) else
77880: LD_ADDR_VAR 0 3
77884: PUSH
77885: LD_INT 2
77887: PPUSH
77888: LD_INT 4
77890: PPUSH
77891: CALL_OW 12
77895: ST_TO_ADDR
77896: GO 77906
// s2 := 1 ;
77898: LD_ADDR_VAR 0 3
77902: PUSH
77903: LD_INT 1
77905: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
77906: LD_ADDR_VAR 0 5
77910: PUSH
77911: LD_VAR 0 6
77915: PUSH
77916: LD_INT 1
77918: ARRAY
77919: PPUSH
77920: LD_VAR 0 3
77924: PPUSH
77925: CALL_OW 259
77929: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
77930: LD_VAR 0 6
77934: PUSH
77935: LD_INT 1
77937: ARRAY
77938: PPUSH
77939: LD_VAR 0 2
77943: PPUSH
77944: LD_VAR 0 5
77948: PPUSH
77949: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
77953: LD_VAR 0 6
77957: PUSH
77958: LD_INT 1
77960: ARRAY
77961: PPUSH
77962: LD_VAR 0 3
77966: PPUSH
77967: LD_VAR 0 4
77971: PPUSH
77972: CALL_OW 237
// end ;
77976: PPOPN 6
77978: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
77979: LD_EXP 59
77983: PUSH
77984: LD_EXP 106
77988: AND
77989: IFFALSE 78068
77991: GO 77993
77993: DISABLE
77994: LD_INT 0
77996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
77997: LD_ADDR_VAR 0 1
78001: PUSH
78002: LD_INT 22
78004: PUSH
78005: LD_OWVAR 2
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: PUSH
78014: LD_INT 30
78016: PUSH
78017: LD_INT 3
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: PPUSH
78028: CALL_OW 69
78032: ST_TO_ADDR
// if not tmp then
78033: LD_VAR 0 1
78037: NOT
78038: IFFALSE 78042
// exit ;
78040: GO 78068
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78042: LD_VAR 0 1
78046: PUSH
78047: LD_INT 1
78049: PPUSH
78050: LD_VAR 0 1
78054: PPUSH
78055: CALL_OW 12
78059: ARRAY
78060: PPUSH
78061: LD_INT 1
78063: PPUSH
78064: CALL_OW 234
// end ;
78068: PPOPN 1
78070: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
78071: LD_EXP 59
78075: PUSH
78076: LD_EXP 107
78080: AND
78081: IFFALSE 78193
78083: GO 78085
78085: DISABLE
78086: LD_INT 0
78088: PPUSH
78089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
78090: LD_ADDR_VAR 0 2
78094: PUSH
78095: LD_INT 22
78097: PUSH
78098: LD_OWVAR 2
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: PUSH
78107: LD_INT 2
78109: PUSH
78110: LD_INT 30
78112: PUSH
78113: LD_INT 27
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: PUSH
78120: LD_INT 30
78122: PUSH
78123: LD_INT 26
78125: PUSH
78126: EMPTY
78127: LIST
78128: LIST
78129: PUSH
78130: LD_INT 30
78132: PUSH
78133: LD_INT 28
78135: PUSH
78136: EMPTY
78137: LIST
78138: LIST
78139: PUSH
78140: EMPTY
78141: LIST
78142: LIST
78143: LIST
78144: LIST
78145: PUSH
78146: EMPTY
78147: LIST
78148: LIST
78149: PPUSH
78150: CALL_OW 69
78154: ST_TO_ADDR
// if not tmp then
78155: LD_VAR 0 2
78159: NOT
78160: IFFALSE 78164
// exit ;
78162: GO 78193
// for i in tmp do
78164: LD_ADDR_VAR 0 1
78168: PUSH
78169: LD_VAR 0 2
78173: PUSH
78174: FOR_IN
78175: IFFALSE 78191
// SetLives ( i , 1 ) ;
78177: LD_VAR 0 1
78181: PPUSH
78182: LD_INT 1
78184: PPUSH
78185: CALL_OW 234
78189: GO 78174
78191: POP
78192: POP
// end ;
78193: PPOPN 2
78195: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
78196: LD_EXP 59
78200: PUSH
78201: LD_EXP 108
78205: AND
78206: IFFALSE 78493
78208: GO 78210
78210: DISABLE
78211: LD_INT 0
78213: PPUSH
78214: PPUSH
78215: PPUSH
// begin i := rand ( 1 , 7 ) ;
78216: LD_ADDR_VAR 0 1
78220: PUSH
78221: LD_INT 1
78223: PPUSH
78224: LD_INT 7
78226: PPUSH
78227: CALL_OW 12
78231: ST_TO_ADDR
// case i of 1 :
78232: LD_VAR 0 1
78236: PUSH
78237: LD_INT 1
78239: DOUBLE
78240: EQUAL
78241: IFTRUE 78245
78243: GO 78255
78245: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
78246: LD_STRING earthquake(getX(game), 0, 32)
78248: PPUSH
78249: CALL_OW 559
78253: GO 78493
78255: LD_INT 2
78257: DOUBLE
78258: EQUAL
78259: IFTRUE 78263
78261: GO 78277
78263: POP
// begin ToLua ( displayStucuk(); ) ;
78264: LD_STRING displayStucuk();
78266: PPUSH
78267: CALL_OW 559
// ResetFog ;
78271: CALL_OW 335
// end ; 3 :
78275: GO 78493
78277: LD_INT 3
78279: DOUBLE
78280: EQUAL
78281: IFTRUE 78285
78283: GO 78389
78285: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78286: LD_ADDR_VAR 0 2
78290: PUSH
78291: LD_INT 22
78293: PUSH
78294: LD_OWVAR 2
78298: PUSH
78299: EMPTY
78300: LIST
78301: LIST
78302: PUSH
78303: LD_INT 25
78305: PUSH
78306: LD_INT 1
78308: PUSH
78309: EMPTY
78310: LIST
78311: LIST
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: PPUSH
78317: CALL_OW 69
78321: ST_TO_ADDR
// if not tmp then
78322: LD_VAR 0 2
78326: NOT
78327: IFFALSE 78331
// exit ;
78329: GO 78493
// un := tmp [ rand ( 1 , tmp ) ] ;
78331: LD_ADDR_VAR 0 3
78335: PUSH
78336: LD_VAR 0 2
78340: PUSH
78341: LD_INT 1
78343: PPUSH
78344: LD_VAR 0 2
78348: PPUSH
78349: CALL_OW 12
78353: ARRAY
78354: ST_TO_ADDR
// if Crawls ( un ) then
78355: LD_VAR 0 3
78359: PPUSH
78360: CALL_OW 318
78364: IFFALSE 78375
// ComWalk ( un ) ;
78366: LD_VAR 0 3
78370: PPUSH
78371: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78375: LD_VAR 0 3
78379: PPUSH
78380: LD_INT 8
78382: PPUSH
78383: CALL_OW 336
// end ; 4 :
78387: GO 78493
78389: LD_INT 4
78391: DOUBLE
78392: EQUAL
78393: IFTRUE 78397
78395: GO 78471
78397: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78398: LD_ADDR_VAR 0 2
78402: PUSH
78403: LD_INT 22
78405: PUSH
78406: LD_OWVAR 2
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: PUSH
78415: LD_INT 30
78417: PUSH
78418: LD_INT 29
78420: PUSH
78421: EMPTY
78422: LIST
78423: LIST
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: PPUSH
78429: CALL_OW 69
78433: ST_TO_ADDR
// if not tmp then
78434: LD_VAR 0 2
78438: NOT
78439: IFFALSE 78443
// exit ;
78441: GO 78493
// CenterNowOnUnits ( tmp [ 1 ] ) ;
78443: LD_VAR 0 2
78447: PUSH
78448: LD_INT 1
78450: ARRAY
78451: PPUSH
78452: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
78456: LD_VAR 0 2
78460: PUSH
78461: LD_INT 1
78463: ARRAY
78464: PPUSH
78465: CALL_OW 65
// end ; 5 .. 7 :
78469: GO 78493
78471: LD_INT 5
78473: DOUBLE
78474: GREATEREQUAL
78475: IFFALSE 78483
78477: LD_INT 7
78479: DOUBLE
78480: LESSEQUAL
78481: IFTRUE 78485
78483: GO 78492
78485: POP
// StreamSibBomb ; end ;
78486: CALL 74730 0 0
78490: GO 78493
78492: POP
// end ;
78493: PPOPN 3
78495: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78496: LD_EXP 59
78500: PUSH
78501: LD_EXP 109
78505: AND
78506: IFFALSE 78662
78508: GO 78510
78510: DISABLE
78511: LD_INT 0
78513: PPUSH
78514: PPUSH
78515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78516: LD_ADDR_VAR 0 2
78520: PUSH
78521: LD_INT 81
78523: PUSH
78524: LD_OWVAR 2
78528: PUSH
78529: EMPTY
78530: LIST
78531: LIST
78532: PUSH
78533: LD_INT 2
78535: PUSH
78536: LD_INT 21
78538: PUSH
78539: LD_INT 1
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: PUSH
78546: LD_INT 21
78548: PUSH
78549: LD_INT 2
78551: PUSH
78552: EMPTY
78553: LIST
78554: LIST
78555: PUSH
78556: EMPTY
78557: LIST
78558: LIST
78559: LIST
78560: PUSH
78561: EMPTY
78562: LIST
78563: LIST
78564: PPUSH
78565: CALL_OW 69
78569: ST_TO_ADDR
// if not tmp then
78570: LD_VAR 0 2
78574: NOT
78575: IFFALSE 78579
// exit ;
78577: GO 78662
// p := 0 ;
78579: LD_ADDR_VAR 0 3
78583: PUSH
78584: LD_INT 0
78586: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78587: LD_INT 35
78589: PPUSH
78590: CALL_OW 67
// p := p + 1 ;
78594: LD_ADDR_VAR 0 3
78598: PUSH
78599: LD_VAR 0 3
78603: PUSH
78604: LD_INT 1
78606: PLUS
78607: ST_TO_ADDR
// for i in tmp do
78608: LD_ADDR_VAR 0 1
78612: PUSH
78613: LD_VAR 0 2
78617: PUSH
78618: FOR_IN
78619: IFFALSE 78650
// if GetLives ( i ) < 1000 then
78621: LD_VAR 0 1
78625: PPUSH
78626: CALL_OW 256
78630: PUSH
78631: LD_INT 1000
78633: LESS
78634: IFFALSE 78648
// SetLives ( i , 1000 ) ;
78636: LD_VAR 0 1
78640: PPUSH
78641: LD_INT 1000
78643: PPUSH
78644: CALL_OW 234
78648: GO 78618
78650: POP
78651: POP
// until p > 20 ;
78652: LD_VAR 0 3
78656: PUSH
78657: LD_INT 20
78659: GREATER
78660: IFFALSE 78587
// end ;
78662: PPOPN 3
78664: END
// every 0 0$1 trigger StreamModeActive and sTime do
78665: LD_EXP 59
78669: PUSH
78670: LD_EXP 110
78674: AND
78675: IFFALSE 78710
78677: GO 78679
78679: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78680: LD_INT 28
78682: PPUSH
78683: LD_OWVAR 2
78687: PPUSH
78688: LD_INT 2
78690: PPUSH
78691: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78695: LD_INT 30
78697: PPUSH
78698: LD_OWVAR 2
78702: PPUSH
78703: LD_INT 2
78705: PPUSH
78706: CALL_OW 322
// end ;
78710: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78711: LD_EXP 59
78715: PUSH
78716: LD_EXP 111
78720: AND
78721: IFFALSE 78842
78723: GO 78725
78725: DISABLE
78726: LD_INT 0
78728: PPUSH
78729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78730: LD_ADDR_VAR 0 2
78734: PUSH
78735: LD_INT 22
78737: PUSH
78738: LD_OWVAR 2
78742: PUSH
78743: EMPTY
78744: LIST
78745: LIST
78746: PUSH
78747: LD_INT 21
78749: PUSH
78750: LD_INT 1
78752: PUSH
78753: EMPTY
78754: LIST
78755: LIST
78756: PUSH
78757: LD_INT 3
78759: PUSH
78760: LD_INT 23
78762: PUSH
78763: LD_INT 0
78765: PUSH
78766: EMPTY
78767: LIST
78768: LIST
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: PUSH
78774: EMPTY
78775: LIST
78776: LIST
78777: LIST
78778: PPUSH
78779: CALL_OW 69
78783: ST_TO_ADDR
// if not tmp then
78784: LD_VAR 0 2
78788: NOT
78789: IFFALSE 78793
// exit ;
78791: GO 78842
// for i in tmp do
78793: LD_ADDR_VAR 0 1
78797: PUSH
78798: LD_VAR 0 2
78802: PUSH
78803: FOR_IN
78804: IFFALSE 78840
// begin if Crawls ( i ) then
78806: LD_VAR 0 1
78810: PPUSH
78811: CALL_OW 318
78815: IFFALSE 78826
// ComWalk ( i ) ;
78817: LD_VAR 0 1
78821: PPUSH
78822: CALL_OW 138
// SetClass ( i , 2 ) ;
78826: LD_VAR 0 1
78830: PPUSH
78831: LD_INT 2
78833: PPUSH
78834: CALL_OW 336
// end ;
78838: GO 78803
78840: POP
78841: POP
// end ;
78842: PPOPN 2
78844: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78845: LD_EXP 59
78849: PUSH
78850: LD_EXP 112
78854: AND
78855: IFFALSE 79143
78857: GO 78859
78859: DISABLE
78860: LD_INT 0
78862: PPUSH
78863: PPUSH
78864: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78865: LD_OWVAR 2
78869: PPUSH
78870: LD_INT 9
78872: PPUSH
78873: LD_INT 1
78875: PPUSH
78876: LD_INT 1
78878: PPUSH
78879: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78883: LD_INT 9
78885: PPUSH
78886: LD_OWVAR 2
78890: PPUSH
78891: CALL_OW 343
// uc_side := 9 ;
78895: LD_ADDR_OWVAR 20
78899: PUSH
78900: LD_INT 9
78902: ST_TO_ADDR
// uc_nation := 2 ;
78903: LD_ADDR_OWVAR 21
78907: PUSH
78908: LD_INT 2
78910: ST_TO_ADDR
// hc_name := Dark Warrior ;
78911: LD_ADDR_OWVAR 26
78915: PUSH
78916: LD_STRING Dark Warrior
78918: ST_TO_ADDR
// hc_gallery :=  ;
78919: LD_ADDR_OWVAR 33
78923: PUSH
78924: LD_STRING 
78926: ST_TO_ADDR
// hc_noskilllimit := true ;
78927: LD_ADDR_OWVAR 76
78931: PUSH
78932: LD_INT 1
78934: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
78935: LD_ADDR_OWVAR 31
78939: PUSH
78940: LD_INT 30
78942: PUSH
78943: LD_INT 30
78945: PUSH
78946: LD_INT 30
78948: PUSH
78949: LD_INT 30
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: ST_TO_ADDR
// un := CreateHuman ;
78958: LD_ADDR_VAR 0 3
78962: PUSH
78963: CALL_OW 44
78967: ST_TO_ADDR
// hc_noskilllimit := false ;
78968: LD_ADDR_OWVAR 76
78972: PUSH
78973: LD_INT 0
78975: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78976: LD_VAR 0 3
78980: PPUSH
78981: LD_INT 1
78983: PPUSH
78984: CALL_OW 51
// ToLua ( playRanger() ) ;
78988: LD_STRING playRanger()
78990: PPUSH
78991: CALL_OW 559
// p := 0 ;
78995: LD_ADDR_VAR 0 2
78999: PUSH
79000: LD_INT 0
79002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79003: LD_INT 35
79005: PPUSH
79006: CALL_OW 67
// p := p + 1 ;
79010: LD_ADDR_VAR 0 2
79014: PUSH
79015: LD_VAR 0 2
79019: PUSH
79020: LD_INT 1
79022: PLUS
79023: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
79024: LD_VAR 0 3
79028: PPUSH
79029: CALL_OW 256
79033: PUSH
79034: LD_INT 1000
79036: LESS
79037: IFFALSE 79051
// SetLives ( un , 1000 ) ;
79039: LD_VAR 0 3
79043: PPUSH
79044: LD_INT 1000
79046: PPUSH
79047: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
79051: LD_VAR 0 3
79055: PPUSH
79056: LD_INT 81
79058: PUSH
79059: LD_OWVAR 2
79063: PUSH
79064: EMPTY
79065: LIST
79066: LIST
79067: PUSH
79068: LD_INT 91
79070: PUSH
79071: LD_VAR 0 3
79075: PUSH
79076: LD_INT 30
79078: PUSH
79079: EMPTY
79080: LIST
79081: LIST
79082: LIST
79083: PUSH
79084: EMPTY
79085: LIST
79086: LIST
79087: PPUSH
79088: CALL_OW 69
79092: PPUSH
79093: LD_VAR 0 3
79097: PPUSH
79098: CALL_OW 74
79102: PPUSH
79103: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
79107: LD_VAR 0 2
79111: PUSH
79112: LD_INT 80
79114: GREATER
79115: PUSH
79116: LD_VAR 0 3
79120: PPUSH
79121: CALL_OW 301
79125: OR
79126: IFFALSE 79003
// if un then
79128: LD_VAR 0 3
79132: IFFALSE 79143
// RemoveUnit ( un ) ;
79134: LD_VAR 0 3
79138: PPUSH
79139: CALL_OW 64
// end ;
79143: PPOPN 3
79145: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
79146: LD_EXP 113
79150: IFFALSE 79266
79152: GO 79154
79154: DISABLE
79155: LD_INT 0
79157: PPUSH
79158: PPUSH
79159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
79160: LD_ADDR_VAR 0 2
79164: PUSH
79165: LD_INT 81
79167: PUSH
79168: LD_OWVAR 2
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: PUSH
79177: LD_INT 21
79179: PUSH
79180: LD_INT 1
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: PUSH
79187: EMPTY
79188: LIST
79189: LIST
79190: PPUSH
79191: CALL_OW 69
79195: ST_TO_ADDR
// ToLua ( playComputer() ) ;
79196: LD_STRING playComputer()
79198: PPUSH
79199: CALL_OW 559
// if not tmp then
79203: LD_VAR 0 2
79207: NOT
79208: IFFALSE 79212
// exit ;
79210: GO 79266
// for i in tmp do
79212: LD_ADDR_VAR 0 1
79216: PUSH
79217: LD_VAR 0 2
79221: PUSH
79222: FOR_IN
79223: IFFALSE 79264
// for j := 1 to 4 do
79225: LD_ADDR_VAR 0 3
79229: PUSH
79230: DOUBLE
79231: LD_INT 1
79233: DEC
79234: ST_TO_ADDR
79235: LD_INT 4
79237: PUSH
79238: FOR_TO
79239: IFFALSE 79260
// SetSkill ( i , j , 10 ) ;
79241: LD_VAR 0 1
79245: PPUSH
79246: LD_VAR 0 3
79250: PPUSH
79251: LD_INT 10
79253: PPUSH
79254: CALL_OW 237
79258: GO 79238
79260: POP
79261: POP
79262: GO 79222
79264: POP
79265: POP
// end ;
79266: PPOPN 3
79268: END
// every 0 0$1 trigger s30 do var i , tmp ;
79269: LD_EXP 114
79273: IFFALSE 79342
79275: GO 79277
79277: DISABLE
79278: LD_INT 0
79280: PPUSH
79281: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79282: LD_ADDR_VAR 0 2
79286: PUSH
79287: LD_INT 22
79289: PUSH
79290: LD_OWVAR 2
79294: PUSH
79295: EMPTY
79296: LIST
79297: LIST
79298: PPUSH
79299: CALL_OW 69
79303: ST_TO_ADDR
// if not tmp then
79304: LD_VAR 0 2
79308: NOT
79309: IFFALSE 79313
// exit ;
79311: GO 79342
// for i in tmp do
79313: LD_ADDR_VAR 0 1
79317: PUSH
79318: LD_VAR 0 2
79322: PUSH
79323: FOR_IN
79324: IFFALSE 79340
// SetLives ( i , 300 ) ;
79326: LD_VAR 0 1
79330: PPUSH
79331: LD_INT 300
79333: PPUSH
79334: CALL_OW 234
79338: GO 79323
79340: POP
79341: POP
// end ;
79342: PPOPN 2
79344: END
// every 0 0$1 trigger s60 do var i , tmp ;
79345: LD_EXP 115
79349: IFFALSE 79418
79351: GO 79353
79353: DISABLE
79354: LD_INT 0
79356: PPUSH
79357: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79358: LD_ADDR_VAR 0 2
79362: PUSH
79363: LD_INT 22
79365: PUSH
79366: LD_OWVAR 2
79370: PUSH
79371: EMPTY
79372: LIST
79373: LIST
79374: PPUSH
79375: CALL_OW 69
79379: ST_TO_ADDR
// if not tmp then
79380: LD_VAR 0 2
79384: NOT
79385: IFFALSE 79389
// exit ;
79387: GO 79418
// for i in tmp do
79389: LD_ADDR_VAR 0 1
79393: PUSH
79394: LD_VAR 0 2
79398: PUSH
79399: FOR_IN
79400: IFFALSE 79416
// SetLives ( i , 600 ) ;
79402: LD_VAR 0 1
79406: PPUSH
79407: LD_INT 600
79409: PPUSH
79410: CALL_OW 234
79414: GO 79399
79416: POP
79417: POP
// end ;
79418: PPOPN 2
79420: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
79421: LD_INT 0
79423: PPUSH
// case cmd of 301 :
79424: LD_VAR 0 1
79428: PUSH
79429: LD_INT 301
79431: DOUBLE
79432: EQUAL
79433: IFTRUE 79437
79435: GO 79469
79437: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
79438: LD_VAR 0 6
79442: PPUSH
79443: LD_VAR 0 7
79447: PPUSH
79448: LD_VAR 0 8
79452: PPUSH
79453: LD_VAR 0 4
79457: PPUSH
79458: LD_VAR 0 5
79462: PPUSH
79463: CALL 80670 0 5
79467: GO 79590
79469: LD_INT 302
79471: DOUBLE
79472: EQUAL
79473: IFTRUE 79477
79475: GO 79514
79477: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
79478: LD_VAR 0 6
79482: PPUSH
79483: LD_VAR 0 7
79487: PPUSH
79488: LD_VAR 0 8
79492: PPUSH
79493: LD_VAR 0 9
79497: PPUSH
79498: LD_VAR 0 4
79502: PPUSH
79503: LD_VAR 0 5
79507: PPUSH
79508: CALL 80761 0 6
79512: GO 79590
79514: LD_INT 303
79516: DOUBLE
79517: EQUAL
79518: IFTRUE 79522
79520: GO 79559
79522: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
79523: LD_VAR 0 6
79527: PPUSH
79528: LD_VAR 0 7
79532: PPUSH
79533: LD_VAR 0 8
79537: PPUSH
79538: LD_VAR 0 9
79542: PPUSH
79543: LD_VAR 0 4
79547: PPUSH
79548: LD_VAR 0 5
79552: PPUSH
79553: CALL 79595 0 6
79557: GO 79590
79559: LD_INT 304
79561: DOUBLE
79562: EQUAL
79563: IFTRUE 79567
79565: GO 79589
79567: POP
// hHackTeleport ( unit , x , y ) ; end ;
79568: LD_VAR 0 2
79572: PPUSH
79573: LD_VAR 0 4
79577: PPUSH
79578: LD_VAR 0 5
79582: PPUSH
79583: CALL 81354 0 3
79587: GO 79590
79589: POP
// end ;
79590: LD_VAR 0 12
79594: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
79595: LD_INT 0
79597: PPUSH
79598: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
79599: LD_VAR 0 1
79603: PUSH
79604: LD_INT 1
79606: LESS
79607: PUSH
79608: LD_VAR 0 1
79612: PUSH
79613: LD_INT 3
79615: GREATER
79616: OR
79617: PUSH
79618: LD_VAR 0 5
79622: PPUSH
79623: LD_VAR 0 6
79627: PPUSH
79628: CALL_OW 428
79632: OR
79633: IFFALSE 79637
// exit ;
79635: GO 80357
// uc_side := your_side ;
79637: LD_ADDR_OWVAR 20
79641: PUSH
79642: LD_OWVAR 2
79646: ST_TO_ADDR
// uc_nation := nation ;
79647: LD_ADDR_OWVAR 21
79651: PUSH
79652: LD_VAR 0 1
79656: ST_TO_ADDR
// bc_level = 1 ;
79657: LD_ADDR_OWVAR 43
79661: PUSH
79662: LD_INT 1
79664: ST_TO_ADDR
// case btype of 1 :
79665: LD_VAR 0 2
79669: PUSH
79670: LD_INT 1
79672: DOUBLE
79673: EQUAL
79674: IFTRUE 79678
79676: GO 79689
79678: POP
// bc_type := b_depot ; 2 :
79679: LD_ADDR_OWVAR 42
79683: PUSH
79684: LD_INT 0
79686: ST_TO_ADDR
79687: GO 80301
79689: LD_INT 2
79691: DOUBLE
79692: EQUAL
79693: IFTRUE 79697
79695: GO 79708
79697: POP
// bc_type := b_warehouse ; 3 :
79698: LD_ADDR_OWVAR 42
79702: PUSH
79703: LD_INT 1
79705: ST_TO_ADDR
79706: GO 80301
79708: LD_INT 3
79710: DOUBLE
79711: EQUAL
79712: IFTRUE 79716
79714: GO 79727
79716: POP
// bc_type := b_lab ; 4 .. 9 :
79717: LD_ADDR_OWVAR 42
79721: PUSH
79722: LD_INT 6
79724: ST_TO_ADDR
79725: GO 80301
79727: LD_INT 4
79729: DOUBLE
79730: GREATEREQUAL
79731: IFFALSE 79739
79733: LD_INT 9
79735: DOUBLE
79736: LESSEQUAL
79737: IFTRUE 79741
79739: GO 79793
79741: POP
// begin bc_type := b_lab_half ;
79742: LD_ADDR_OWVAR 42
79746: PUSH
79747: LD_INT 7
79749: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
79750: LD_ADDR_OWVAR 44
79754: PUSH
79755: LD_INT 10
79757: PUSH
79758: LD_INT 11
79760: PUSH
79761: LD_INT 12
79763: PUSH
79764: LD_INT 15
79766: PUSH
79767: LD_INT 14
79769: PUSH
79770: LD_INT 13
79772: PUSH
79773: EMPTY
79774: LIST
79775: LIST
79776: LIST
79777: LIST
79778: LIST
79779: LIST
79780: PUSH
79781: LD_VAR 0 2
79785: PUSH
79786: LD_INT 3
79788: MINUS
79789: ARRAY
79790: ST_TO_ADDR
// end ; 10 .. 13 :
79791: GO 80301
79793: LD_INT 10
79795: DOUBLE
79796: GREATEREQUAL
79797: IFFALSE 79805
79799: LD_INT 13
79801: DOUBLE
79802: LESSEQUAL
79803: IFTRUE 79807
79805: GO 79884
79807: POP
// begin bc_type := b_lab_full ;
79808: LD_ADDR_OWVAR 42
79812: PUSH
79813: LD_INT 8
79815: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
79816: LD_ADDR_OWVAR 44
79820: PUSH
79821: LD_INT 10
79823: PUSH
79824: LD_INT 12
79826: PUSH
79827: LD_INT 14
79829: PUSH
79830: LD_INT 13
79832: PUSH
79833: EMPTY
79834: LIST
79835: LIST
79836: LIST
79837: LIST
79838: PUSH
79839: LD_VAR 0 2
79843: PUSH
79844: LD_INT 9
79846: MINUS
79847: ARRAY
79848: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
79849: LD_ADDR_OWVAR 45
79853: PUSH
79854: LD_INT 11
79856: PUSH
79857: LD_INT 15
79859: PUSH
79860: LD_INT 12
79862: PUSH
79863: LD_INT 15
79865: PUSH
79866: EMPTY
79867: LIST
79868: LIST
79869: LIST
79870: LIST
79871: PUSH
79872: LD_VAR 0 2
79876: PUSH
79877: LD_INT 9
79879: MINUS
79880: ARRAY
79881: ST_TO_ADDR
// end ; 14 :
79882: GO 80301
79884: LD_INT 14
79886: DOUBLE
79887: EQUAL
79888: IFTRUE 79892
79890: GO 79903
79892: POP
// bc_type := b_workshop ; 15 :
79893: LD_ADDR_OWVAR 42
79897: PUSH
79898: LD_INT 2
79900: ST_TO_ADDR
79901: GO 80301
79903: LD_INT 15
79905: DOUBLE
79906: EQUAL
79907: IFTRUE 79911
79909: GO 79922
79911: POP
// bc_type := b_factory ; 16 :
79912: LD_ADDR_OWVAR 42
79916: PUSH
79917: LD_INT 3
79919: ST_TO_ADDR
79920: GO 80301
79922: LD_INT 16
79924: DOUBLE
79925: EQUAL
79926: IFTRUE 79930
79928: GO 79941
79930: POP
// bc_type := b_ext_gun ; 17 :
79931: LD_ADDR_OWVAR 42
79935: PUSH
79936: LD_INT 17
79938: ST_TO_ADDR
79939: GO 80301
79941: LD_INT 17
79943: DOUBLE
79944: EQUAL
79945: IFTRUE 79949
79947: GO 79977
79949: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
79950: LD_ADDR_OWVAR 42
79954: PUSH
79955: LD_INT 19
79957: PUSH
79958: LD_INT 23
79960: PUSH
79961: LD_INT 19
79963: PUSH
79964: EMPTY
79965: LIST
79966: LIST
79967: LIST
79968: PUSH
79969: LD_VAR 0 1
79973: ARRAY
79974: ST_TO_ADDR
79975: GO 80301
79977: LD_INT 18
79979: DOUBLE
79980: EQUAL
79981: IFTRUE 79985
79983: GO 79996
79985: POP
// bc_type := b_ext_radar ; 19 :
79986: LD_ADDR_OWVAR 42
79990: PUSH
79991: LD_INT 20
79993: ST_TO_ADDR
79994: GO 80301
79996: LD_INT 19
79998: DOUBLE
79999: EQUAL
80000: IFTRUE 80004
80002: GO 80015
80004: POP
// bc_type := b_ext_radio ; 20 :
80005: LD_ADDR_OWVAR 42
80009: PUSH
80010: LD_INT 22
80012: ST_TO_ADDR
80013: GO 80301
80015: LD_INT 20
80017: DOUBLE
80018: EQUAL
80019: IFTRUE 80023
80021: GO 80034
80023: POP
// bc_type := b_ext_siberium ; 21 :
80024: LD_ADDR_OWVAR 42
80028: PUSH
80029: LD_INT 21
80031: ST_TO_ADDR
80032: GO 80301
80034: LD_INT 21
80036: DOUBLE
80037: EQUAL
80038: IFTRUE 80042
80040: GO 80053
80042: POP
// bc_type := b_ext_computer ; 22 :
80043: LD_ADDR_OWVAR 42
80047: PUSH
80048: LD_INT 24
80050: ST_TO_ADDR
80051: GO 80301
80053: LD_INT 22
80055: DOUBLE
80056: EQUAL
80057: IFTRUE 80061
80059: GO 80072
80061: POP
// bc_type := b_ext_track ; 23 :
80062: LD_ADDR_OWVAR 42
80066: PUSH
80067: LD_INT 16
80069: ST_TO_ADDR
80070: GO 80301
80072: LD_INT 23
80074: DOUBLE
80075: EQUAL
80076: IFTRUE 80080
80078: GO 80091
80080: POP
// bc_type := b_ext_laser ; 24 :
80081: LD_ADDR_OWVAR 42
80085: PUSH
80086: LD_INT 25
80088: ST_TO_ADDR
80089: GO 80301
80091: LD_INT 24
80093: DOUBLE
80094: EQUAL
80095: IFTRUE 80099
80097: GO 80110
80099: POP
// bc_type := b_control_tower ; 25 :
80100: LD_ADDR_OWVAR 42
80104: PUSH
80105: LD_INT 36
80107: ST_TO_ADDR
80108: GO 80301
80110: LD_INT 25
80112: DOUBLE
80113: EQUAL
80114: IFTRUE 80118
80116: GO 80129
80118: POP
// bc_type := b_breastwork ; 26 :
80119: LD_ADDR_OWVAR 42
80123: PUSH
80124: LD_INT 31
80126: ST_TO_ADDR
80127: GO 80301
80129: LD_INT 26
80131: DOUBLE
80132: EQUAL
80133: IFTRUE 80137
80135: GO 80148
80137: POP
// bc_type := b_bunker ; 27 :
80138: LD_ADDR_OWVAR 42
80142: PUSH
80143: LD_INT 32
80145: ST_TO_ADDR
80146: GO 80301
80148: LD_INT 27
80150: DOUBLE
80151: EQUAL
80152: IFTRUE 80156
80154: GO 80167
80156: POP
// bc_type := b_turret ; 28 :
80157: LD_ADDR_OWVAR 42
80161: PUSH
80162: LD_INT 33
80164: ST_TO_ADDR
80165: GO 80301
80167: LD_INT 28
80169: DOUBLE
80170: EQUAL
80171: IFTRUE 80175
80173: GO 80186
80175: POP
// bc_type := b_armoury ; 29 :
80176: LD_ADDR_OWVAR 42
80180: PUSH
80181: LD_INT 4
80183: ST_TO_ADDR
80184: GO 80301
80186: LD_INT 29
80188: DOUBLE
80189: EQUAL
80190: IFTRUE 80194
80192: GO 80205
80194: POP
// bc_type := b_barracks ; 30 :
80195: LD_ADDR_OWVAR 42
80199: PUSH
80200: LD_INT 5
80202: ST_TO_ADDR
80203: GO 80301
80205: LD_INT 30
80207: DOUBLE
80208: EQUAL
80209: IFTRUE 80213
80211: GO 80224
80213: POP
// bc_type := b_solar_power ; 31 :
80214: LD_ADDR_OWVAR 42
80218: PUSH
80219: LD_INT 27
80221: ST_TO_ADDR
80222: GO 80301
80224: LD_INT 31
80226: DOUBLE
80227: EQUAL
80228: IFTRUE 80232
80230: GO 80243
80232: POP
// bc_type := b_oil_power ; 32 :
80233: LD_ADDR_OWVAR 42
80237: PUSH
80238: LD_INT 26
80240: ST_TO_ADDR
80241: GO 80301
80243: LD_INT 32
80245: DOUBLE
80246: EQUAL
80247: IFTRUE 80251
80249: GO 80262
80251: POP
// bc_type := b_siberite_power ; 33 :
80252: LD_ADDR_OWVAR 42
80256: PUSH
80257: LD_INT 28
80259: ST_TO_ADDR
80260: GO 80301
80262: LD_INT 33
80264: DOUBLE
80265: EQUAL
80266: IFTRUE 80270
80268: GO 80281
80270: POP
// bc_type := b_oil_mine ; 34 :
80271: LD_ADDR_OWVAR 42
80275: PUSH
80276: LD_INT 29
80278: ST_TO_ADDR
80279: GO 80301
80281: LD_INT 34
80283: DOUBLE
80284: EQUAL
80285: IFTRUE 80289
80287: GO 80300
80289: POP
// bc_type := b_siberite_mine ; end ;
80290: LD_ADDR_OWVAR 42
80294: PUSH
80295: LD_INT 30
80297: ST_TO_ADDR
80298: GO 80301
80300: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
80301: LD_ADDR_VAR 0 8
80305: PUSH
80306: LD_VAR 0 5
80310: PPUSH
80311: LD_VAR 0 6
80315: PPUSH
80316: LD_VAR 0 3
80320: PPUSH
80321: CALL_OW 47
80325: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
80326: LD_OWVAR 42
80330: PUSH
80331: LD_INT 32
80333: PUSH
80334: LD_INT 33
80336: PUSH
80337: EMPTY
80338: LIST
80339: LIST
80340: IN
80341: IFFALSE 80357
// PlaceWeaponTurret ( b , weapon ) ;
80343: LD_VAR 0 8
80347: PPUSH
80348: LD_VAR 0 4
80352: PPUSH
80353: CALL_OW 431
// end ;
80357: LD_VAR 0 7
80361: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
80362: LD_INT 0
80364: PPUSH
80365: PPUSH
80366: PPUSH
80367: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80368: LD_ADDR_VAR 0 4
80372: PUSH
80373: LD_INT 22
80375: PUSH
80376: LD_OWVAR 2
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: PUSH
80385: LD_INT 2
80387: PUSH
80388: LD_INT 30
80390: PUSH
80391: LD_INT 0
80393: PUSH
80394: EMPTY
80395: LIST
80396: LIST
80397: PUSH
80398: LD_INT 30
80400: PUSH
80401: LD_INT 1
80403: PUSH
80404: EMPTY
80405: LIST
80406: LIST
80407: PUSH
80408: EMPTY
80409: LIST
80410: LIST
80411: LIST
80412: PUSH
80413: EMPTY
80414: LIST
80415: LIST
80416: PPUSH
80417: CALL_OW 69
80421: ST_TO_ADDR
// if not tmp then
80422: LD_VAR 0 4
80426: NOT
80427: IFFALSE 80431
// exit ;
80429: GO 80490
// for i in tmp do
80431: LD_ADDR_VAR 0 2
80435: PUSH
80436: LD_VAR 0 4
80440: PUSH
80441: FOR_IN
80442: IFFALSE 80488
// for j = 1 to 3 do
80444: LD_ADDR_VAR 0 3
80448: PUSH
80449: DOUBLE
80450: LD_INT 1
80452: DEC
80453: ST_TO_ADDR
80454: LD_INT 3
80456: PUSH
80457: FOR_TO
80458: IFFALSE 80484
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
80460: LD_VAR 0 2
80464: PPUSH
80465: CALL_OW 274
80469: PPUSH
80470: LD_VAR 0 3
80474: PPUSH
80475: LD_INT 99999
80477: PPUSH
80478: CALL_OW 277
80482: GO 80457
80484: POP
80485: POP
80486: GO 80441
80488: POP
80489: POP
// end ;
80490: LD_VAR 0 1
80494: RET
// export function hHackSetLevel10 ; var i , j ; begin
80495: LD_INT 0
80497: PPUSH
80498: PPUSH
80499: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80500: LD_ADDR_VAR 0 2
80504: PUSH
80505: LD_INT 21
80507: PUSH
80508: LD_INT 1
80510: PUSH
80511: EMPTY
80512: LIST
80513: LIST
80514: PPUSH
80515: CALL_OW 69
80519: PUSH
80520: FOR_IN
80521: IFFALSE 80573
// if IsSelected ( i ) then
80523: LD_VAR 0 2
80527: PPUSH
80528: CALL_OW 306
80532: IFFALSE 80571
// begin for j := 1 to 4 do
80534: LD_ADDR_VAR 0 3
80538: PUSH
80539: DOUBLE
80540: LD_INT 1
80542: DEC
80543: ST_TO_ADDR
80544: LD_INT 4
80546: PUSH
80547: FOR_TO
80548: IFFALSE 80569
// SetSkill ( i , j , 10 ) ;
80550: LD_VAR 0 2
80554: PPUSH
80555: LD_VAR 0 3
80559: PPUSH
80560: LD_INT 10
80562: PPUSH
80563: CALL_OW 237
80567: GO 80547
80569: POP
80570: POP
// end ;
80571: GO 80520
80573: POP
80574: POP
// end ;
80575: LD_VAR 0 1
80579: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
80580: LD_INT 0
80582: PPUSH
80583: PPUSH
80584: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
80585: LD_ADDR_VAR 0 2
80589: PUSH
80590: LD_INT 22
80592: PUSH
80593: LD_OWVAR 2
80597: PUSH
80598: EMPTY
80599: LIST
80600: LIST
80601: PUSH
80602: LD_INT 21
80604: PUSH
80605: LD_INT 1
80607: PUSH
80608: EMPTY
80609: LIST
80610: LIST
80611: PUSH
80612: EMPTY
80613: LIST
80614: LIST
80615: PPUSH
80616: CALL_OW 69
80620: PUSH
80621: FOR_IN
80622: IFFALSE 80663
// begin for j := 1 to 4 do
80624: LD_ADDR_VAR 0 3
80628: PUSH
80629: DOUBLE
80630: LD_INT 1
80632: DEC
80633: ST_TO_ADDR
80634: LD_INT 4
80636: PUSH
80637: FOR_TO
80638: IFFALSE 80659
// SetSkill ( i , j , 10 ) ;
80640: LD_VAR 0 2
80644: PPUSH
80645: LD_VAR 0 3
80649: PPUSH
80650: LD_INT 10
80652: PPUSH
80653: CALL_OW 237
80657: GO 80637
80659: POP
80660: POP
// end ;
80661: GO 80621
80663: POP
80664: POP
// end ;
80665: LD_VAR 0 1
80669: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
80670: LD_INT 0
80672: PPUSH
// uc_side := your_side ;
80673: LD_ADDR_OWVAR 20
80677: PUSH
80678: LD_OWVAR 2
80682: ST_TO_ADDR
// uc_nation := nation ;
80683: LD_ADDR_OWVAR 21
80687: PUSH
80688: LD_VAR 0 1
80692: ST_TO_ADDR
// InitHc ;
80693: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
80697: LD_INT 0
80699: PPUSH
80700: LD_VAR 0 2
80704: PPUSH
80705: LD_VAR 0 3
80709: PPUSH
80710: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
80714: LD_VAR 0 4
80718: PPUSH
80719: LD_VAR 0 5
80723: PPUSH
80724: CALL_OW 428
80728: PUSH
80729: LD_INT 0
80731: EQUAL
80732: IFFALSE 80756
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
80734: CALL_OW 44
80738: PPUSH
80739: LD_VAR 0 4
80743: PPUSH
80744: LD_VAR 0 5
80748: PPUSH
80749: LD_INT 1
80751: PPUSH
80752: CALL_OW 48
// end ;
80756: LD_VAR 0 6
80760: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
80761: LD_INT 0
80763: PPUSH
80764: PPUSH
// uc_side := your_side ;
80765: LD_ADDR_OWVAR 20
80769: PUSH
80770: LD_OWVAR 2
80774: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
80775: LD_VAR 0 1
80779: PUSH
80780: LD_INT 1
80782: PUSH
80783: LD_INT 2
80785: PUSH
80786: LD_INT 3
80788: PUSH
80789: LD_INT 4
80791: PUSH
80792: LD_INT 5
80794: PUSH
80795: EMPTY
80796: LIST
80797: LIST
80798: LIST
80799: LIST
80800: LIST
80801: IN
80802: IFFALSE 80814
// uc_nation := nation_american else
80804: LD_ADDR_OWVAR 21
80808: PUSH
80809: LD_INT 1
80811: ST_TO_ADDR
80812: GO 80857
// if chassis in [ 11 , 12 , 13 , 14 ] then
80814: LD_VAR 0 1
80818: PUSH
80819: LD_INT 11
80821: PUSH
80822: LD_INT 12
80824: PUSH
80825: LD_INT 13
80827: PUSH
80828: LD_INT 14
80830: PUSH
80831: EMPTY
80832: LIST
80833: LIST
80834: LIST
80835: LIST
80836: IN
80837: IFFALSE 80849
// uc_nation := nation_arabian else
80839: LD_ADDR_OWVAR 21
80843: PUSH
80844: LD_INT 2
80846: ST_TO_ADDR
80847: GO 80857
// uc_nation := nation_russian ;
80849: LD_ADDR_OWVAR 21
80853: PUSH
80854: LD_INT 3
80856: ST_TO_ADDR
// vc_chassis := chassis ;
80857: LD_ADDR_OWVAR 37
80861: PUSH
80862: LD_VAR 0 1
80866: ST_TO_ADDR
// vc_engine := engine ;
80867: LD_ADDR_OWVAR 39
80871: PUSH
80872: LD_VAR 0 2
80876: ST_TO_ADDR
// vc_control := control ;
80877: LD_ADDR_OWVAR 38
80881: PUSH
80882: LD_VAR 0 3
80886: ST_TO_ADDR
// vc_weapon := weapon ;
80887: LD_ADDR_OWVAR 40
80891: PUSH
80892: LD_VAR 0 4
80896: ST_TO_ADDR
// un := CreateVehicle ;
80897: LD_ADDR_VAR 0 8
80901: PUSH
80902: CALL_OW 45
80906: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
80907: LD_VAR 0 8
80911: PPUSH
80912: LD_INT 0
80914: PPUSH
80915: LD_INT 5
80917: PPUSH
80918: CALL_OW 12
80922: PPUSH
80923: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
80927: LD_VAR 0 8
80931: PPUSH
80932: LD_VAR 0 5
80936: PPUSH
80937: LD_VAR 0 6
80941: PPUSH
80942: LD_INT 1
80944: PPUSH
80945: CALL_OW 48
// end ;
80949: LD_VAR 0 7
80953: RET
// export hInvincible ; every 1 do
80954: GO 80956
80956: DISABLE
// hInvincible := [ ] ;
80957: LD_ADDR_EXP 116
80961: PUSH
80962: EMPTY
80963: ST_TO_ADDR
80964: END
// every 10 do var i ;
80965: GO 80967
80967: DISABLE
80968: LD_INT 0
80970: PPUSH
// begin enable ;
80971: ENABLE
// if not hInvincible then
80972: LD_EXP 116
80976: NOT
80977: IFFALSE 80981
// exit ;
80979: GO 81025
// for i in hInvincible do
80981: LD_ADDR_VAR 0 1
80985: PUSH
80986: LD_EXP 116
80990: PUSH
80991: FOR_IN
80992: IFFALSE 81023
// if GetLives ( i ) < 1000 then
80994: LD_VAR 0 1
80998: PPUSH
80999: CALL_OW 256
81003: PUSH
81004: LD_INT 1000
81006: LESS
81007: IFFALSE 81021
// SetLives ( i , 1000 ) ;
81009: LD_VAR 0 1
81013: PPUSH
81014: LD_INT 1000
81016: PPUSH
81017: CALL_OW 234
81021: GO 80991
81023: POP
81024: POP
// end ;
81025: PPOPN 1
81027: END
// export function hHackInvincible ; var i ; begin
81028: LD_INT 0
81030: PPUSH
81031: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
81032: LD_ADDR_VAR 0 2
81036: PUSH
81037: LD_INT 2
81039: PUSH
81040: LD_INT 21
81042: PUSH
81043: LD_INT 1
81045: PUSH
81046: EMPTY
81047: LIST
81048: LIST
81049: PUSH
81050: LD_INT 21
81052: PUSH
81053: LD_INT 2
81055: PUSH
81056: EMPTY
81057: LIST
81058: LIST
81059: PUSH
81060: EMPTY
81061: LIST
81062: LIST
81063: LIST
81064: PPUSH
81065: CALL_OW 69
81069: PUSH
81070: FOR_IN
81071: IFFALSE 81132
// if IsSelected ( i ) then
81073: LD_VAR 0 2
81077: PPUSH
81078: CALL_OW 306
81082: IFFALSE 81130
// begin if i in hInvincible then
81084: LD_VAR 0 2
81088: PUSH
81089: LD_EXP 116
81093: IN
81094: IFFALSE 81114
// hInvincible := hInvincible diff i else
81096: LD_ADDR_EXP 116
81100: PUSH
81101: LD_EXP 116
81105: PUSH
81106: LD_VAR 0 2
81110: DIFF
81111: ST_TO_ADDR
81112: GO 81130
// hInvincible := hInvincible union i ;
81114: LD_ADDR_EXP 116
81118: PUSH
81119: LD_EXP 116
81123: PUSH
81124: LD_VAR 0 2
81128: UNION
81129: ST_TO_ADDR
// end ;
81130: GO 81070
81132: POP
81133: POP
// end ;
81134: LD_VAR 0 1
81138: RET
// export function hHackInvisible ; var i , j ; begin
81139: LD_INT 0
81141: PPUSH
81142: PPUSH
81143: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81144: LD_ADDR_VAR 0 2
81148: PUSH
81149: LD_INT 21
81151: PUSH
81152: LD_INT 1
81154: PUSH
81155: EMPTY
81156: LIST
81157: LIST
81158: PPUSH
81159: CALL_OW 69
81163: PUSH
81164: FOR_IN
81165: IFFALSE 81189
// if IsSelected ( i ) then
81167: LD_VAR 0 2
81171: PPUSH
81172: CALL_OW 306
81176: IFFALSE 81187
// ComForceInvisible ( i ) ;
81178: LD_VAR 0 2
81182: PPUSH
81183: CALL_OW 496
81187: GO 81164
81189: POP
81190: POP
// end ;
81191: LD_VAR 0 1
81195: RET
// export function hHackChangeYourSide ; begin
81196: LD_INT 0
81198: PPUSH
// if your_side = 8 then
81199: LD_OWVAR 2
81203: PUSH
81204: LD_INT 8
81206: EQUAL
81207: IFFALSE 81219
// your_side := 0 else
81209: LD_ADDR_OWVAR 2
81213: PUSH
81214: LD_INT 0
81216: ST_TO_ADDR
81217: GO 81233
// your_side := your_side + 1 ;
81219: LD_ADDR_OWVAR 2
81223: PUSH
81224: LD_OWVAR 2
81228: PUSH
81229: LD_INT 1
81231: PLUS
81232: ST_TO_ADDR
// end ;
81233: LD_VAR 0 1
81237: RET
// export function hHackChangeUnitSide ; var i , j ; begin
81238: LD_INT 0
81240: PPUSH
81241: PPUSH
81242: PPUSH
// for i in all_units do
81243: LD_ADDR_VAR 0 2
81247: PUSH
81248: LD_OWVAR 3
81252: PUSH
81253: FOR_IN
81254: IFFALSE 81332
// if IsSelected ( i ) then
81256: LD_VAR 0 2
81260: PPUSH
81261: CALL_OW 306
81265: IFFALSE 81330
// begin j := GetSide ( i ) ;
81267: LD_ADDR_VAR 0 3
81271: PUSH
81272: LD_VAR 0 2
81276: PPUSH
81277: CALL_OW 255
81281: ST_TO_ADDR
// if j = 8 then
81282: LD_VAR 0 3
81286: PUSH
81287: LD_INT 8
81289: EQUAL
81290: IFFALSE 81302
// j := 0 else
81292: LD_ADDR_VAR 0 3
81296: PUSH
81297: LD_INT 0
81299: ST_TO_ADDR
81300: GO 81316
// j := j + 1 ;
81302: LD_ADDR_VAR 0 3
81306: PUSH
81307: LD_VAR 0 3
81311: PUSH
81312: LD_INT 1
81314: PLUS
81315: ST_TO_ADDR
// SetSide ( i , j ) ;
81316: LD_VAR 0 2
81320: PPUSH
81321: LD_VAR 0 3
81325: PPUSH
81326: CALL_OW 235
// end ;
81330: GO 81253
81332: POP
81333: POP
// end ;
81334: LD_VAR 0 1
81338: RET
// export function hHackFog ; begin
81339: LD_INT 0
81341: PPUSH
// FogOff ( true ) ;
81342: LD_INT 1
81344: PPUSH
81345: CALL_OW 344
// end ;
81349: LD_VAR 0 1
81353: RET
// export function hHackTeleport ( unit , x , y ) ; begin
81354: LD_INT 0
81356: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
81357: LD_VAR 0 1
81361: PPUSH
81362: LD_VAR 0 2
81366: PPUSH
81367: LD_VAR 0 3
81371: PPUSH
81372: LD_INT 1
81374: PPUSH
81375: LD_INT 1
81377: PPUSH
81378: CALL_OW 483
// CenterOnXY ( x , y ) ;
81382: LD_VAR 0 2
81386: PPUSH
81387: LD_VAR 0 3
81391: PPUSH
81392: CALL_OW 84
// end ;
81396: LD_VAR 0 4
81400: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
81401: LD_INT 0
81403: PPUSH
81404: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
81405: LD_VAR 0 1
81409: NOT
81410: PUSH
81411: LD_VAR 0 2
81415: PPUSH
81416: LD_VAR 0 3
81420: PPUSH
81421: CALL_OW 488
81425: NOT
81426: OR
81427: PUSH
81428: LD_VAR 0 1
81432: PPUSH
81433: CALL_OW 266
81437: PUSH
81438: LD_INT 3
81440: NONEQUAL
81441: PUSH
81442: LD_VAR 0 1
81446: PPUSH
81447: CALL_OW 247
81451: PUSH
81452: LD_INT 1
81454: EQUAL
81455: NOT
81456: AND
81457: OR
81458: IFFALSE 81462
// exit ;
81460: GO 81611
// if GetType ( factory ) = unit_human then
81462: LD_VAR 0 1
81466: PPUSH
81467: CALL_OW 247
81471: PUSH
81472: LD_INT 1
81474: EQUAL
81475: IFFALSE 81492
// factory := IsInUnit ( factory ) ;
81477: LD_ADDR_VAR 0 1
81481: PUSH
81482: LD_VAR 0 1
81486: PPUSH
81487: CALL_OW 310
81491: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
81492: LD_VAR 0 1
81496: PPUSH
81497: CALL_OW 266
81501: PUSH
81502: LD_INT 3
81504: NONEQUAL
81505: IFFALSE 81509
// exit ;
81507: GO 81611
// if HexInfo ( x , y ) = factory then
81509: LD_VAR 0 2
81513: PPUSH
81514: LD_VAR 0 3
81518: PPUSH
81519: CALL_OW 428
81523: PUSH
81524: LD_VAR 0 1
81528: EQUAL
81529: IFFALSE 81556
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
81531: LD_ADDR_EXP 117
81535: PUSH
81536: LD_EXP 117
81540: PPUSH
81541: LD_VAR 0 1
81545: PPUSH
81546: LD_INT 0
81548: PPUSH
81549: CALL_OW 1
81553: ST_TO_ADDR
81554: GO 81607
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
81556: LD_ADDR_EXP 117
81560: PUSH
81561: LD_EXP 117
81565: PPUSH
81566: LD_VAR 0 1
81570: PPUSH
81571: LD_VAR 0 1
81575: PPUSH
81576: CALL_OW 255
81580: PUSH
81581: LD_VAR 0 1
81585: PUSH
81586: LD_VAR 0 2
81590: PUSH
81591: LD_VAR 0 3
81595: PUSH
81596: EMPTY
81597: LIST
81598: LIST
81599: LIST
81600: LIST
81601: PPUSH
81602: CALL_OW 1
81606: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81607: CALL 81616 0 0
// end ;
81611: LD_VAR 0 4
81615: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
81616: LD_INT 0
81618: PPUSH
81619: PPUSH
81620: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
81621: LD_STRING resetFactoryWaypoint();
81623: PPUSH
81624: CALL_OW 559
// if factoryWaypoints then
81628: LD_EXP 117
81632: IFFALSE 81758
// begin list := PrepareArray ( factoryWaypoints ) ;
81634: LD_ADDR_VAR 0 3
81638: PUSH
81639: LD_EXP 117
81643: PPUSH
81644: CALL 66902 0 1
81648: ST_TO_ADDR
// for i := 1 to list do
81649: LD_ADDR_VAR 0 2
81653: PUSH
81654: DOUBLE
81655: LD_INT 1
81657: DEC
81658: ST_TO_ADDR
81659: LD_VAR 0 3
81663: PUSH
81664: FOR_TO
81665: IFFALSE 81756
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81667: LD_STRING setFactoryWaypointXY(
81669: PUSH
81670: LD_VAR 0 3
81674: PUSH
81675: LD_VAR 0 2
81679: ARRAY
81680: PUSH
81681: LD_INT 1
81683: ARRAY
81684: STR
81685: PUSH
81686: LD_STRING ,
81688: STR
81689: PUSH
81690: LD_VAR 0 3
81694: PUSH
81695: LD_VAR 0 2
81699: ARRAY
81700: PUSH
81701: LD_INT 2
81703: ARRAY
81704: STR
81705: PUSH
81706: LD_STRING ,
81708: STR
81709: PUSH
81710: LD_VAR 0 3
81714: PUSH
81715: LD_VAR 0 2
81719: ARRAY
81720: PUSH
81721: LD_INT 3
81723: ARRAY
81724: STR
81725: PUSH
81726: LD_STRING ,
81728: STR
81729: PUSH
81730: LD_VAR 0 3
81734: PUSH
81735: LD_VAR 0 2
81739: ARRAY
81740: PUSH
81741: LD_INT 4
81743: ARRAY
81744: STR
81745: PUSH
81746: LD_STRING )
81748: STR
81749: PPUSH
81750: CALL_OW 559
81754: GO 81664
81756: POP
81757: POP
// end ; end ;
81758: LD_VAR 0 1
81762: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
81763: LD_INT 0
81765: PPUSH
// if HexInfo ( x , y ) = warehouse then
81766: LD_VAR 0 2
81770: PPUSH
81771: LD_VAR 0 3
81775: PPUSH
81776: CALL_OW 428
81780: PUSH
81781: LD_VAR 0 1
81785: EQUAL
81786: IFFALSE 81813
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
81788: LD_ADDR_EXP 118
81792: PUSH
81793: LD_EXP 118
81797: PPUSH
81798: LD_VAR 0 1
81802: PPUSH
81803: LD_INT 0
81805: PPUSH
81806: CALL_OW 1
81810: ST_TO_ADDR
81811: GO 81864
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
81813: LD_ADDR_EXP 118
81817: PUSH
81818: LD_EXP 118
81822: PPUSH
81823: LD_VAR 0 1
81827: PPUSH
81828: LD_VAR 0 1
81832: PPUSH
81833: CALL_OW 255
81837: PUSH
81838: LD_VAR 0 1
81842: PUSH
81843: LD_VAR 0 2
81847: PUSH
81848: LD_VAR 0 3
81852: PUSH
81853: EMPTY
81854: LIST
81855: LIST
81856: LIST
81857: LIST
81858: PPUSH
81859: CALL_OW 1
81863: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
81864: CALL 81873 0 0
// end ;
81868: LD_VAR 0 4
81872: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
81873: LD_INT 0
81875: PPUSH
81876: PPUSH
81877: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
81878: LD_STRING resetWarehouseGatheringPoints();
81880: PPUSH
81881: CALL_OW 559
// if warehouseGatheringPoints then
81885: LD_EXP 118
81889: IFFALSE 82015
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
81891: LD_ADDR_VAR 0 3
81895: PUSH
81896: LD_EXP 118
81900: PPUSH
81901: CALL 66902 0 1
81905: ST_TO_ADDR
// for i := 1 to list do
81906: LD_ADDR_VAR 0 2
81910: PUSH
81911: DOUBLE
81912: LD_INT 1
81914: DEC
81915: ST_TO_ADDR
81916: LD_VAR 0 3
81920: PUSH
81921: FOR_TO
81922: IFFALSE 82013
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81924: LD_STRING setWarehouseGatheringPointXY(
81926: PUSH
81927: LD_VAR 0 3
81931: PUSH
81932: LD_VAR 0 2
81936: ARRAY
81937: PUSH
81938: LD_INT 1
81940: ARRAY
81941: STR
81942: PUSH
81943: LD_STRING ,
81945: STR
81946: PUSH
81947: LD_VAR 0 3
81951: PUSH
81952: LD_VAR 0 2
81956: ARRAY
81957: PUSH
81958: LD_INT 2
81960: ARRAY
81961: STR
81962: PUSH
81963: LD_STRING ,
81965: STR
81966: PUSH
81967: LD_VAR 0 3
81971: PUSH
81972: LD_VAR 0 2
81976: ARRAY
81977: PUSH
81978: LD_INT 3
81980: ARRAY
81981: STR
81982: PUSH
81983: LD_STRING ,
81985: STR
81986: PUSH
81987: LD_VAR 0 3
81991: PUSH
81992: LD_VAR 0 2
81996: ARRAY
81997: PUSH
81998: LD_INT 4
82000: ARRAY
82001: STR
82002: PUSH
82003: LD_STRING )
82005: STR
82006: PPUSH
82007: CALL_OW 559
82011: GO 81921
82013: POP
82014: POP
// end ; end ;
82015: LD_VAR 0 1
82019: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
82020: LD_EXP 118
82024: IFFALSE 82709
82026: GO 82028
82028: DISABLE
82029: LD_INT 0
82031: PPUSH
82032: PPUSH
82033: PPUSH
82034: PPUSH
82035: PPUSH
82036: PPUSH
82037: PPUSH
82038: PPUSH
82039: PPUSH
// begin enable ;
82040: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
82041: LD_ADDR_VAR 0 3
82045: PUSH
82046: LD_EXP 118
82050: PPUSH
82051: CALL 66902 0 1
82055: ST_TO_ADDR
// if not list then
82056: LD_VAR 0 3
82060: NOT
82061: IFFALSE 82065
// exit ;
82063: GO 82709
// for i := 1 to list do
82065: LD_ADDR_VAR 0 1
82069: PUSH
82070: DOUBLE
82071: LD_INT 1
82073: DEC
82074: ST_TO_ADDR
82075: LD_VAR 0 3
82079: PUSH
82080: FOR_TO
82081: IFFALSE 82707
// begin depot := list [ i ] [ 2 ] ;
82083: LD_ADDR_VAR 0 8
82087: PUSH
82088: LD_VAR 0 3
82092: PUSH
82093: LD_VAR 0 1
82097: ARRAY
82098: PUSH
82099: LD_INT 2
82101: ARRAY
82102: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
82103: LD_ADDR_VAR 0 5
82107: PUSH
82108: LD_VAR 0 3
82112: PUSH
82113: LD_VAR 0 1
82117: ARRAY
82118: PUSH
82119: LD_INT 1
82121: ARRAY
82122: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
82123: LD_VAR 0 8
82127: PPUSH
82128: CALL_OW 301
82132: PUSH
82133: LD_VAR 0 5
82137: PUSH
82138: LD_VAR 0 8
82142: PPUSH
82143: CALL_OW 255
82147: NONEQUAL
82148: OR
82149: IFFALSE 82178
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
82151: LD_ADDR_EXP 118
82155: PUSH
82156: LD_EXP 118
82160: PPUSH
82161: LD_VAR 0 8
82165: PPUSH
82166: LD_INT 0
82168: PPUSH
82169: CALL_OW 1
82173: ST_TO_ADDR
// exit ;
82174: POP
82175: POP
82176: GO 82709
// end ; x := list [ i ] [ 3 ] ;
82178: LD_ADDR_VAR 0 6
82182: PUSH
82183: LD_VAR 0 3
82187: PUSH
82188: LD_VAR 0 1
82192: ARRAY
82193: PUSH
82194: LD_INT 3
82196: ARRAY
82197: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
82198: LD_ADDR_VAR 0 7
82202: PUSH
82203: LD_VAR 0 3
82207: PUSH
82208: LD_VAR 0 1
82212: ARRAY
82213: PUSH
82214: LD_INT 4
82216: ARRAY
82217: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
82218: LD_ADDR_VAR 0 9
82222: PUSH
82223: LD_VAR 0 6
82227: PPUSH
82228: LD_VAR 0 7
82232: PPUSH
82233: LD_INT 16
82235: PPUSH
82236: CALL 65490 0 3
82240: ST_TO_ADDR
// if not cratesNearbyPoint then
82241: LD_VAR 0 9
82245: NOT
82246: IFFALSE 82252
// exit ;
82248: POP
82249: POP
82250: GO 82709
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
82252: LD_ADDR_VAR 0 4
82256: PUSH
82257: LD_INT 22
82259: PUSH
82260: LD_VAR 0 5
82264: PUSH
82265: EMPTY
82266: LIST
82267: LIST
82268: PUSH
82269: LD_INT 3
82271: PUSH
82272: LD_INT 60
82274: PUSH
82275: EMPTY
82276: LIST
82277: PUSH
82278: EMPTY
82279: LIST
82280: LIST
82281: PUSH
82282: LD_INT 91
82284: PUSH
82285: LD_VAR 0 8
82289: PUSH
82290: LD_INT 6
82292: PUSH
82293: EMPTY
82294: LIST
82295: LIST
82296: LIST
82297: PUSH
82298: LD_INT 2
82300: PUSH
82301: LD_INT 25
82303: PUSH
82304: LD_INT 2
82306: PUSH
82307: EMPTY
82308: LIST
82309: LIST
82310: PUSH
82311: LD_INT 25
82313: PUSH
82314: LD_INT 16
82316: PUSH
82317: EMPTY
82318: LIST
82319: LIST
82320: PUSH
82321: EMPTY
82322: LIST
82323: LIST
82324: LIST
82325: PUSH
82326: EMPTY
82327: LIST
82328: LIST
82329: LIST
82330: LIST
82331: PPUSH
82332: CALL_OW 69
82336: PUSH
82337: LD_VAR 0 8
82341: PPUSH
82342: CALL_OW 313
82346: PPUSH
82347: LD_INT 3
82349: PUSH
82350: LD_INT 60
82352: PUSH
82353: EMPTY
82354: LIST
82355: PUSH
82356: EMPTY
82357: LIST
82358: LIST
82359: PUSH
82360: LD_INT 2
82362: PUSH
82363: LD_INT 25
82365: PUSH
82366: LD_INT 2
82368: PUSH
82369: EMPTY
82370: LIST
82371: LIST
82372: PUSH
82373: LD_INT 25
82375: PUSH
82376: LD_INT 16
82378: PUSH
82379: EMPTY
82380: LIST
82381: LIST
82382: PUSH
82383: EMPTY
82384: LIST
82385: LIST
82386: LIST
82387: PUSH
82388: EMPTY
82389: LIST
82390: LIST
82391: PPUSH
82392: CALL_OW 72
82396: UNION
82397: ST_TO_ADDR
// if tmp then
82398: LD_VAR 0 4
82402: IFFALSE 82482
// begin tmp := ShrinkArray ( tmp , 3 ) ;
82404: LD_ADDR_VAR 0 4
82408: PUSH
82409: LD_VAR 0 4
82413: PPUSH
82414: LD_INT 3
82416: PPUSH
82417: CALL 63459 0 2
82421: ST_TO_ADDR
// for j in tmp do
82422: LD_ADDR_VAR 0 2
82426: PUSH
82427: LD_VAR 0 4
82431: PUSH
82432: FOR_IN
82433: IFFALSE 82476
// begin if IsInUnit ( j ) then
82435: LD_VAR 0 2
82439: PPUSH
82440: CALL_OW 310
82444: IFFALSE 82455
// ComExit ( j ) ;
82446: LD_VAR 0 2
82450: PPUSH
82451: CALL 63542 0 1
// AddComCollect ( j , x , y ) ;
82455: LD_VAR 0 2
82459: PPUSH
82460: LD_VAR 0 6
82464: PPUSH
82465: LD_VAR 0 7
82469: PPUSH
82470: CALL_OW 177
// end ;
82474: GO 82432
82476: POP
82477: POP
// exit ;
82478: POP
82479: POP
82480: GO 82709
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
82482: LD_ADDR_VAR 0 4
82486: PUSH
82487: LD_INT 22
82489: PUSH
82490: LD_VAR 0 5
82494: PUSH
82495: EMPTY
82496: LIST
82497: LIST
82498: PUSH
82499: LD_INT 91
82501: PUSH
82502: LD_VAR 0 8
82506: PUSH
82507: LD_INT 8
82509: PUSH
82510: EMPTY
82511: LIST
82512: LIST
82513: LIST
82514: PUSH
82515: LD_INT 2
82517: PUSH
82518: LD_INT 34
82520: PUSH
82521: LD_INT 12
82523: PUSH
82524: EMPTY
82525: LIST
82526: LIST
82527: PUSH
82528: LD_INT 34
82530: PUSH
82531: LD_INT 51
82533: PUSH
82534: EMPTY
82535: LIST
82536: LIST
82537: PUSH
82538: LD_INT 34
82540: PUSH
82541: LD_INT 32
82543: PUSH
82544: EMPTY
82545: LIST
82546: LIST
82547: PUSH
82548: LD_INT 34
82550: PUSH
82551: LD_INT 89
82553: PUSH
82554: EMPTY
82555: LIST
82556: LIST
82557: PUSH
82558: EMPTY
82559: LIST
82560: LIST
82561: LIST
82562: LIST
82563: LIST
82564: PUSH
82565: EMPTY
82566: LIST
82567: LIST
82568: LIST
82569: PPUSH
82570: CALL_OW 69
82574: ST_TO_ADDR
// if tmp then
82575: LD_VAR 0 4
82579: IFFALSE 82705
// begin for j in tmp do
82581: LD_ADDR_VAR 0 2
82585: PUSH
82586: LD_VAR 0 4
82590: PUSH
82591: FOR_IN
82592: IFFALSE 82703
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
82594: LD_VAR 0 2
82598: PPUSH
82599: CALL_OW 262
82603: PUSH
82604: LD_INT 3
82606: EQUAL
82607: PUSH
82608: LD_VAR 0 2
82612: PPUSH
82613: CALL_OW 261
82617: PUSH
82618: LD_INT 20
82620: GREATER
82621: OR
82622: PUSH
82623: LD_VAR 0 2
82627: PPUSH
82628: CALL_OW 314
82632: NOT
82633: AND
82634: PUSH
82635: LD_VAR 0 2
82639: PPUSH
82640: CALL_OW 263
82644: PUSH
82645: LD_INT 1
82647: NONEQUAL
82648: PUSH
82649: LD_VAR 0 2
82653: PPUSH
82654: CALL_OW 311
82658: OR
82659: AND
82660: IFFALSE 82701
// begin ComCollect ( j , x , y ) ;
82662: LD_VAR 0 2
82666: PPUSH
82667: LD_VAR 0 6
82671: PPUSH
82672: LD_VAR 0 7
82676: PPUSH
82677: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
82681: LD_VAR 0 2
82685: PPUSH
82686: LD_VAR 0 8
82690: PPUSH
82691: CALL_OW 172
// exit ;
82695: POP
82696: POP
82697: POP
82698: POP
82699: GO 82709
// end ;
82701: GO 82591
82703: POP
82704: POP
// end ; end ;
82705: GO 82080
82707: POP
82708: POP
// end ; end_of_file
82709: PPOPN 9
82711: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82712: LD_VAR 0 1
82716: PUSH
82717: LD_INT 200
82719: DOUBLE
82720: GREATEREQUAL
82721: IFFALSE 82729
82723: LD_INT 299
82725: DOUBLE
82726: LESSEQUAL
82727: IFTRUE 82731
82729: GO 82763
82731: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82732: LD_VAR 0 1
82736: PPUSH
82737: LD_VAR 0 2
82741: PPUSH
82742: LD_VAR 0 3
82746: PPUSH
82747: LD_VAR 0 4
82751: PPUSH
82752: LD_VAR 0 5
82756: PPUSH
82757: CALL 83251 0 5
82761: GO 82840
82763: LD_INT 300
82765: DOUBLE
82766: GREATEREQUAL
82767: IFFALSE 82775
82769: LD_INT 399
82771: DOUBLE
82772: LESSEQUAL
82773: IFTRUE 82777
82775: GO 82839
82777: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82778: LD_VAR 0 1
82782: PPUSH
82783: LD_VAR 0 2
82787: PPUSH
82788: LD_VAR 0 3
82792: PPUSH
82793: LD_VAR 0 4
82797: PPUSH
82798: LD_VAR 0 5
82802: PPUSH
82803: LD_VAR 0 6
82807: PPUSH
82808: LD_VAR 0 7
82812: PPUSH
82813: LD_VAR 0 8
82817: PPUSH
82818: LD_VAR 0 9
82822: PPUSH
82823: LD_VAR 0 10
82827: PPUSH
82828: LD_VAR 0 11
82832: PPUSH
82833: CALL 79421 0 11
82837: GO 82840
82839: POP
// end ;
82840: PPOPN 11
82842: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82843: LD_VAR 0 1
82847: PPUSH
82848: LD_VAR 0 2
82852: PPUSH
82853: LD_VAR 0 3
82857: PPUSH
82858: LD_VAR 0 4
82862: PPUSH
82863: LD_VAR 0 5
82867: PPUSH
82868: CALL 82987 0 5
// end ; end_of_file
82872: PPOPN 5
82874: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
82875: LD_INT 0
82877: PPUSH
82878: PPUSH
82879: PPUSH
82880: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
82881: LD_VAR 0 1
82885: PPUSH
82886: CALL_OW 264
82890: PUSH
82891: LD_INT 91
82893: EQUAL
82894: IFFALSE 82966
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82896: LD_INT 68
82898: PPUSH
82899: LD_VAR 0 1
82903: PPUSH
82904: CALL_OW 255
82908: PPUSH
82909: CALL_OW 321
82913: PUSH
82914: LD_INT 2
82916: EQUAL
82917: IFFALSE 82929
// eff := 70 else
82919: LD_ADDR_VAR 0 4
82923: PUSH
82924: LD_INT 70
82926: ST_TO_ADDR
82927: GO 82937
// eff := 30 ;
82929: LD_ADDR_VAR 0 4
82933: PUSH
82934: LD_INT 30
82936: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
82937: LD_VAR 0 1
82941: PPUSH
82942: CALL_OW 250
82946: PPUSH
82947: LD_VAR 0 1
82951: PPUSH
82952: CALL_OW 251
82956: PPUSH
82957: LD_VAR 0 4
82961: PPUSH
82962: CALL_OW 495
// end ; end ;
82966: LD_VAR 0 2
82970: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
82971: LD_INT 0
82973: PPUSH
// end ;
82974: LD_VAR 0 4
82978: RET
// export function SOS_Command ( cmd ) ; begin
82979: LD_INT 0
82981: PPUSH
// end ;
82982: LD_VAR 0 2
82986: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
82987: LD_INT 0
82989: PPUSH
// end ;
82990: LD_VAR 0 6
82994: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
82995: LD_INT 0
82997: PPUSH
82998: PPUSH
// if not vehicle or not factory then
82999: LD_VAR 0 1
83003: NOT
83004: PUSH
83005: LD_VAR 0 2
83009: NOT
83010: OR
83011: IFFALSE 83015
// exit ;
83013: GO 83246
// if factoryWaypoints >= factory then
83015: LD_EXP 117
83019: PUSH
83020: LD_VAR 0 2
83024: GREATEREQUAL
83025: IFFALSE 83246
// if factoryWaypoints [ factory ] then
83027: LD_EXP 117
83031: PUSH
83032: LD_VAR 0 2
83036: ARRAY
83037: IFFALSE 83246
// begin if GetControl ( vehicle ) = control_manual then
83039: LD_VAR 0 1
83043: PPUSH
83044: CALL_OW 263
83048: PUSH
83049: LD_INT 1
83051: EQUAL
83052: IFFALSE 83133
// begin driver := IsDrivenBy ( vehicle ) ;
83054: LD_ADDR_VAR 0 4
83058: PUSH
83059: LD_VAR 0 1
83063: PPUSH
83064: CALL_OW 311
83068: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
83069: LD_VAR 0 4
83073: PPUSH
83074: LD_EXP 117
83078: PUSH
83079: LD_VAR 0 2
83083: ARRAY
83084: PUSH
83085: LD_INT 3
83087: ARRAY
83088: PPUSH
83089: LD_EXP 117
83093: PUSH
83094: LD_VAR 0 2
83098: ARRAY
83099: PUSH
83100: LD_INT 4
83102: ARRAY
83103: PPUSH
83104: CALL_OW 171
// AddComExitVehicle ( driver ) ;
83108: LD_VAR 0 4
83112: PPUSH
83113: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
83117: LD_VAR 0 4
83121: PPUSH
83122: LD_VAR 0 2
83126: PPUSH
83127: CALL_OW 180
// end else
83131: GO 83246
// if GetControl ( vehicle ) = control_remote then
83133: LD_VAR 0 1
83137: PPUSH
83138: CALL_OW 263
83142: PUSH
83143: LD_INT 2
83145: EQUAL
83146: IFFALSE 83207
// begin wait ( 0 0$2 ) ;
83148: LD_INT 70
83150: PPUSH
83151: CALL_OW 67
// if Connect ( vehicle ) then
83155: LD_VAR 0 1
83159: PPUSH
83160: CALL 33801 0 1
83164: IFFALSE 83205
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
83166: LD_VAR 0 1
83170: PPUSH
83171: LD_EXP 117
83175: PUSH
83176: LD_VAR 0 2
83180: ARRAY
83181: PUSH
83182: LD_INT 3
83184: ARRAY
83185: PPUSH
83186: LD_EXP 117
83190: PUSH
83191: LD_VAR 0 2
83195: ARRAY
83196: PUSH
83197: LD_INT 4
83199: ARRAY
83200: PPUSH
83201: CALL_OW 171
// end else
83205: GO 83246
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
83207: LD_VAR 0 1
83211: PPUSH
83212: LD_EXP 117
83216: PUSH
83217: LD_VAR 0 2
83221: ARRAY
83222: PUSH
83223: LD_INT 3
83225: ARRAY
83226: PPUSH
83227: LD_EXP 117
83231: PUSH
83232: LD_VAR 0 2
83236: ARRAY
83237: PUSH
83238: LD_INT 4
83240: ARRAY
83241: PPUSH
83242: CALL_OW 171
// end ; end ;
83246: LD_VAR 0 3
83250: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
83251: LD_INT 0
83253: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
83254: LD_VAR 0 1
83258: PUSH
83259: LD_INT 250
83261: EQUAL
83262: PUSH
83263: LD_VAR 0 2
83267: PPUSH
83268: CALL_OW 264
83272: PUSH
83273: LD_INT 81
83275: EQUAL
83276: AND
83277: IFFALSE 83298
// MinerPlaceMine ( unit , x , y ) ;
83279: LD_VAR 0 2
83283: PPUSH
83284: LD_VAR 0 4
83288: PPUSH
83289: LD_VAR 0 5
83293: PPUSH
83294: CALL 85683 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
83298: LD_VAR 0 1
83302: PUSH
83303: LD_INT 251
83305: EQUAL
83306: PUSH
83307: LD_VAR 0 2
83311: PPUSH
83312: CALL_OW 264
83316: PUSH
83317: LD_INT 81
83319: EQUAL
83320: AND
83321: IFFALSE 83342
// MinerDetonateMine ( unit , x , y ) ;
83323: LD_VAR 0 2
83327: PPUSH
83328: LD_VAR 0 4
83332: PPUSH
83333: LD_VAR 0 5
83337: PPUSH
83338: CALL 85958 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
83342: LD_VAR 0 1
83346: PUSH
83347: LD_INT 252
83349: EQUAL
83350: PUSH
83351: LD_VAR 0 2
83355: PPUSH
83356: CALL_OW 264
83360: PUSH
83361: LD_INT 81
83363: EQUAL
83364: AND
83365: IFFALSE 83386
// MinerCreateMinefield ( unit , x , y ) ;
83367: LD_VAR 0 2
83371: PPUSH
83372: LD_VAR 0 4
83376: PPUSH
83377: LD_VAR 0 5
83381: PPUSH
83382: CALL 86375 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
83386: LD_VAR 0 1
83390: PUSH
83391: LD_INT 253
83393: EQUAL
83394: PUSH
83395: LD_VAR 0 2
83399: PPUSH
83400: CALL_OW 257
83404: PUSH
83405: LD_INT 5
83407: EQUAL
83408: AND
83409: IFFALSE 83430
// ComBinocular ( unit , x , y ) ;
83411: LD_VAR 0 2
83415: PPUSH
83416: LD_VAR 0 4
83420: PPUSH
83421: LD_VAR 0 5
83425: PPUSH
83426: CALL 86744 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
83430: LD_VAR 0 1
83434: PUSH
83435: LD_INT 254
83437: EQUAL
83438: PUSH
83439: LD_VAR 0 2
83443: PPUSH
83444: CALL_OW 264
83448: PUSH
83449: LD_INT 99
83451: EQUAL
83452: AND
83453: PUSH
83454: LD_VAR 0 3
83458: PPUSH
83459: CALL_OW 263
83463: PUSH
83464: LD_INT 3
83466: EQUAL
83467: AND
83468: IFFALSE 83484
// HackDestroyVehicle ( unit , selectedUnit ) ;
83470: LD_VAR 0 2
83474: PPUSH
83475: LD_VAR 0 3
83479: PPUSH
83480: CALL 85047 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
83484: LD_VAR 0 1
83488: PUSH
83489: LD_INT 255
83491: EQUAL
83492: PUSH
83493: LD_VAR 0 2
83497: PPUSH
83498: CALL_OW 264
83502: PUSH
83503: LD_INT 14
83505: PUSH
83506: LD_INT 53
83508: PUSH
83509: EMPTY
83510: LIST
83511: LIST
83512: IN
83513: AND
83514: PUSH
83515: LD_VAR 0 4
83519: PPUSH
83520: LD_VAR 0 5
83524: PPUSH
83525: CALL_OW 488
83529: AND
83530: IFFALSE 83554
// CutTreeXYR ( unit , x , y , 12 ) ;
83532: LD_VAR 0 2
83536: PPUSH
83537: LD_VAR 0 4
83541: PPUSH
83542: LD_VAR 0 5
83546: PPUSH
83547: LD_INT 12
83549: PPUSH
83550: CALL 83617 0 4
// if cmd = 256 then
83554: LD_VAR 0 1
83558: PUSH
83559: LD_INT 256
83561: EQUAL
83562: IFFALSE 83583
// SetFactoryWaypoint ( unit , x , y ) ;
83564: LD_VAR 0 2
83568: PPUSH
83569: LD_VAR 0 4
83573: PPUSH
83574: LD_VAR 0 5
83578: PPUSH
83579: CALL 81401 0 3
// if cmd = 257 then
83583: LD_VAR 0 1
83587: PUSH
83588: LD_INT 257
83590: EQUAL
83591: IFFALSE 83612
// SetWarehouseGatheringPoint ( unit , x , y ) ;
83593: LD_VAR 0 2
83597: PPUSH
83598: LD_VAR 0 4
83602: PPUSH
83603: LD_VAR 0 5
83607: PPUSH
83608: CALL 81763 0 3
// end ;
83612: LD_VAR 0 6
83616: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
83617: LD_INT 0
83619: PPUSH
83620: PPUSH
83621: PPUSH
83622: PPUSH
83623: PPUSH
83624: PPUSH
83625: PPUSH
83626: PPUSH
83627: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
83628: LD_VAR 0 1
83632: NOT
83633: PUSH
83634: LD_VAR 0 2
83638: PPUSH
83639: LD_VAR 0 3
83643: PPUSH
83644: CALL_OW 488
83648: NOT
83649: OR
83650: PUSH
83651: LD_VAR 0 4
83655: NOT
83656: OR
83657: IFFALSE 83661
// exit ;
83659: GO 84001
// list := [ ] ;
83661: LD_ADDR_VAR 0 13
83665: PUSH
83666: EMPTY
83667: ST_TO_ADDR
// if x - r < 0 then
83668: LD_VAR 0 2
83672: PUSH
83673: LD_VAR 0 4
83677: MINUS
83678: PUSH
83679: LD_INT 0
83681: LESS
83682: IFFALSE 83694
// min_x := 0 else
83684: LD_ADDR_VAR 0 7
83688: PUSH
83689: LD_INT 0
83691: ST_TO_ADDR
83692: GO 83710
// min_x := x - r ;
83694: LD_ADDR_VAR 0 7
83698: PUSH
83699: LD_VAR 0 2
83703: PUSH
83704: LD_VAR 0 4
83708: MINUS
83709: ST_TO_ADDR
// if y - r < 0 then
83710: LD_VAR 0 3
83714: PUSH
83715: LD_VAR 0 4
83719: MINUS
83720: PUSH
83721: LD_INT 0
83723: LESS
83724: IFFALSE 83736
// min_y := 0 else
83726: LD_ADDR_VAR 0 8
83730: PUSH
83731: LD_INT 0
83733: ST_TO_ADDR
83734: GO 83752
// min_y := y - r ;
83736: LD_ADDR_VAR 0 8
83740: PUSH
83741: LD_VAR 0 3
83745: PUSH
83746: LD_VAR 0 4
83750: MINUS
83751: ST_TO_ADDR
// max_x := x + r ;
83752: LD_ADDR_VAR 0 9
83756: PUSH
83757: LD_VAR 0 2
83761: PUSH
83762: LD_VAR 0 4
83766: PLUS
83767: ST_TO_ADDR
// max_y := y + r ;
83768: LD_ADDR_VAR 0 10
83772: PUSH
83773: LD_VAR 0 3
83777: PUSH
83778: LD_VAR 0 4
83782: PLUS
83783: ST_TO_ADDR
// for _x = min_x to max_x do
83784: LD_ADDR_VAR 0 11
83788: PUSH
83789: DOUBLE
83790: LD_VAR 0 7
83794: DEC
83795: ST_TO_ADDR
83796: LD_VAR 0 9
83800: PUSH
83801: FOR_TO
83802: IFFALSE 83919
// for _y = min_y to max_y do
83804: LD_ADDR_VAR 0 12
83808: PUSH
83809: DOUBLE
83810: LD_VAR 0 8
83814: DEC
83815: ST_TO_ADDR
83816: LD_VAR 0 10
83820: PUSH
83821: FOR_TO
83822: IFFALSE 83915
// begin if not ValidHex ( _x , _y ) then
83824: LD_VAR 0 11
83828: PPUSH
83829: LD_VAR 0 12
83833: PPUSH
83834: CALL_OW 488
83838: NOT
83839: IFFALSE 83843
// continue ;
83841: GO 83821
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83843: LD_VAR 0 11
83847: PPUSH
83848: LD_VAR 0 12
83852: PPUSH
83853: CALL_OW 351
83857: PUSH
83858: LD_VAR 0 11
83862: PPUSH
83863: LD_VAR 0 12
83867: PPUSH
83868: CALL_OW 554
83872: AND
83873: IFFALSE 83913
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83875: LD_ADDR_VAR 0 13
83879: PUSH
83880: LD_VAR 0 13
83884: PPUSH
83885: LD_VAR 0 13
83889: PUSH
83890: LD_INT 1
83892: PLUS
83893: PPUSH
83894: LD_VAR 0 11
83898: PUSH
83899: LD_VAR 0 12
83903: PUSH
83904: EMPTY
83905: LIST
83906: LIST
83907: PPUSH
83908: CALL_OW 2
83912: ST_TO_ADDR
// end ;
83913: GO 83821
83915: POP
83916: POP
83917: GO 83801
83919: POP
83920: POP
// if not list then
83921: LD_VAR 0 13
83925: NOT
83926: IFFALSE 83930
// exit ;
83928: GO 84001
// for i in list do
83930: LD_ADDR_VAR 0 6
83934: PUSH
83935: LD_VAR 0 13
83939: PUSH
83940: FOR_IN
83941: IFFALSE 83999
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
83943: LD_VAR 0 1
83947: PPUSH
83948: LD_STRING M
83950: PUSH
83951: LD_VAR 0 6
83955: PUSH
83956: LD_INT 1
83958: ARRAY
83959: PUSH
83960: LD_VAR 0 6
83964: PUSH
83965: LD_INT 2
83967: ARRAY
83968: PUSH
83969: LD_INT 0
83971: PUSH
83972: LD_INT 0
83974: PUSH
83975: LD_INT 0
83977: PUSH
83978: LD_INT 0
83980: PUSH
83981: EMPTY
83982: LIST
83983: LIST
83984: LIST
83985: LIST
83986: LIST
83987: LIST
83988: LIST
83989: PUSH
83990: EMPTY
83991: LIST
83992: PPUSH
83993: CALL_OW 447
83997: GO 83940
83999: POP
84000: POP
// end ;
84001: LD_VAR 0 5
84005: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
84006: LD_EXP 120
84010: NOT
84011: IFFALSE 84061
84013: GO 84015
84015: DISABLE
// begin initHack := true ;
84016: LD_ADDR_EXP 120
84020: PUSH
84021: LD_INT 1
84023: ST_TO_ADDR
// hackTanks := [ ] ;
84024: LD_ADDR_EXP 121
84028: PUSH
84029: EMPTY
84030: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
84031: LD_ADDR_EXP 122
84035: PUSH
84036: EMPTY
84037: ST_TO_ADDR
// hackLimit := 3 ;
84038: LD_ADDR_EXP 123
84042: PUSH
84043: LD_INT 3
84045: ST_TO_ADDR
// hackDist := 12 ;
84046: LD_ADDR_EXP 124
84050: PUSH
84051: LD_INT 12
84053: ST_TO_ADDR
// hackCounter := [ ] ;
84054: LD_ADDR_EXP 125
84058: PUSH
84059: EMPTY
84060: ST_TO_ADDR
// end ;
84061: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
84062: LD_EXP 120
84066: PUSH
84067: LD_INT 34
84069: PUSH
84070: LD_INT 99
84072: PUSH
84073: EMPTY
84074: LIST
84075: LIST
84076: PPUSH
84077: CALL_OW 69
84081: AND
84082: IFFALSE 84335
84084: GO 84086
84086: DISABLE
84087: LD_INT 0
84089: PPUSH
84090: PPUSH
// begin enable ;
84091: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
84092: LD_ADDR_VAR 0 1
84096: PUSH
84097: LD_INT 34
84099: PUSH
84100: LD_INT 99
84102: PUSH
84103: EMPTY
84104: LIST
84105: LIST
84106: PPUSH
84107: CALL_OW 69
84111: PUSH
84112: FOR_IN
84113: IFFALSE 84333
// begin if not i in hackTanks then
84115: LD_VAR 0 1
84119: PUSH
84120: LD_EXP 121
84124: IN
84125: NOT
84126: IFFALSE 84209
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
84128: LD_ADDR_EXP 121
84132: PUSH
84133: LD_EXP 121
84137: PPUSH
84138: LD_EXP 121
84142: PUSH
84143: LD_INT 1
84145: PLUS
84146: PPUSH
84147: LD_VAR 0 1
84151: PPUSH
84152: CALL_OW 1
84156: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
84157: LD_ADDR_EXP 122
84161: PUSH
84162: LD_EXP 122
84166: PPUSH
84167: LD_EXP 122
84171: PUSH
84172: LD_INT 1
84174: PLUS
84175: PPUSH
84176: EMPTY
84177: PPUSH
84178: CALL_OW 1
84182: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
84183: LD_ADDR_EXP 125
84187: PUSH
84188: LD_EXP 125
84192: PPUSH
84193: LD_EXP 125
84197: PUSH
84198: LD_INT 1
84200: PLUS
84201: PPUSH
84202: EMPTY
84203: PPUSH
84204: CALL_OW 1
84208: ST_TO_ADDR
// end ; if not IsOk ( i ) then
84209: LD_VAR 0 1
84213: PPUSH
84214: CALL_OW 302
84218: NOT
84219: IFFALSE 84232
// begin HackUnlinkAll ( i ) ;
84221: LD_VAR 0 1
84225: PPUSH
84226: CALL 84338 0 1
// continue ;
84230: GO 84112
// end ; HackCheckCapturedStatus ( i ) ;
84232: LD_VAR 0 1
84236: PPUSH
84237: CALL 84781 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
84241: LD_ADDR_VAR 0 2
84245: PUSH
84246: LD_INT 81
84248: PUSH
84249: LD_VAR 0 1
84253: PPUSH
84254: CALL_OW 255
84258: PUSH
84259: EMPTY
84260: LIST
84261: LIST
84262: PUSH
84263: LD_INT 33
84265: PUSH
84266: LD_INT 3
84268: PUSH
84269: EMPTY
84270: LIST
84271: LIST
84272: PUSH
84273: LD_INT 91
84275: PUSH
84276: LD_VAR 0 1
84280: PUSH
84281: LD_EXP 124
84285: PUSH
84286: EMPTY
84287: LIST
84288: LIST
84289: LIST
84290: PUSH
84291: LD_INT 50
84293: PUSH
84294: EMPTY
84295: LIST
84296: PUSH
84297: EMPTY
84298: LIST
84299: LIST
84300: LIST
84301: LIST
84302: PPUSH
84303: CALL_OW 69
84307: ST_TO_ADDR
// if not tmp then
84308: LD_VAR 0 2
84312: NOT
84313: IFFALSE 84317
// continue ;
84315: GO 84112
// HackLink ( i , tmp ) ;
84317: LD_VAR 0 1
84321: PPUSH
84322: LD_VAR 0 2
84326: PPUSH
84327: CALL 84474 0 2
// end ;
84331: GO 84112
84333: POP
84334: POP
// end ;
84335: PPOPN 2
84337: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
84338: LD_INT 0
84340: PPUSH
84341: PPUSH
84342: PPUSH
// if not hack in hackTanks then
84343: LD_VAR 0 1
84347: PUSH
84348: LD_EXP 121
84352: IN
84353: NOT
84354: IFFALSE 84358
// exit ;
84356: GO 84469
// index := GetElementIndex ( hackTanks , hack ) ;
84358: LD_ADDR_VAR 0 4
84362: PUSH
84363: LD_EXP 121
84367: PPUSH
84368: LD_VAR 0 1
84372: PPUSH
84373: CALL 30617 0 2
84377: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
84378: LD_EXP 122
84382: PUSH
84383: LD_VAR 0 4
84387: ARRAY
84388: IFFALSE 84469
// begin for i in hackTanksCaptured [ index ] do
84390: LD_ADDR_VAR 0 3
84394: PUSH
84395: LD_EXP 122
84399: PUSH
84400: LD_VAR 0 4
84404: ARRAY
84405: PUSH
84406: FOR_IN
84407: IFFALSE 84433
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
84409: LD_VAR 0 3
84413: PUSH
84414: LD_INT 1
84416: ARRAY
84417: PPUSH
84418: LD_VAR 0 3
84422: PUSH
84423: LD_INT 2
84425: ARRAY
84426: PPUSH
84427: CALL_OW 235
84431: GO 84406
84433: POP
84434: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
84435: LD_ADDR_EXP 122
84439: PUSH
84440: LD_EXP 122
84444: PPUSH
84445: LD_VAR 0 4
84449: PPUSH
84450: EMPTY
84451: PPUSH
84452: CALL_OW 1
84456: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
84457: LD_VAR 0 1
84461: PPUSH
84462: LD_INT 0
84464: PPUSH
84465: CALL_OW 505
// end ; end ;
84469: LD_VAR 0 2
84473: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
84474: LD_INT 0
84476: PPUSH
84477: PPUSH
84478: PPUSH
// if not hack in hackTanks or not vehicles then
84479: LD_VAR 0 1
84483: PUSH
84484: LD_EXP 121
84488: IN
84489: NOT
84490: PUSH
84491: LD_VAR 0 2
84495: NOT
84496: OR
84497: IFFALSE 84501
// exit ;
84499: GO 84776
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
84501: LD_ADDR_VAR 0 2
84505: PUSH
84506: LD_VAR 0 1
84510: PPUSH
84511: LD_VAR 0 2
84515: PPUSH
84516: LD_INT 1
84518: PPUSH
84519: LD_INT 1
84521: PPUSH
84522: CALL 31267 0 4
84526: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
84527: LD_ADDR_VAR 0 5
84531: PUSH
84532: LD_EXP 121
84536: PPUSH
84537: LD_VAR 0 1
84541: PPUSH
84542: CALL 30617 0 2
84546: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
84547: LD_EXP 122
84551: PUSH
84552: LD_VAR 0 5
84556: ARRAY
84557: PUSH
84558: LD_EXP 123
84562: LESS
84563: IFFALSE 84752
// begin for i := 1 to vehicles do
84565: LD_ADDR_VAR 0 4
84569: PUSH
84570: DOUBLE
84571: LD_INT 1
84573: DEC
84574: ST_TO_ADDR
84575: LD_VAR 0 2
84579: PUSH
84580: FOR_TO
84581: IFFALSE 84750
// begin if hackTanksCaptured [ index ] = hackLimit then
84583: LD_EXP 122
84587: PUSH
84588: LD_VAR 0 5
84592: ARRAY
84593: PUSH
84594: LD_EXP 123
84598: EQUAL
84599: IFFALSE 84603
// break ;
84601: GO 84750
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
84603: LD_ADDR_EXP 125
84607: PUSH
84608: LD_EXP 125
84612: PPUSH
84613: LD_VAR 0 5
84617: PPUSH
84618: LD_EXP 125
84622: PUSH
84623: LD_VAR 0 5
84627: ARRAY
84628: PUSH
84629: LD_INT 1
84631: PLUS
84632: PPUSH
84633: CALL_OW 1
84637: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
84638: LD_ADDR_EXP 122
84642: PUSH
84643: LD_EXP 122
84647: PPUSH
84648: LD_VAR 0 5
84652: PUSH
84653: LD_EXP 122
84657: PUSH
84658: LD_VAR 0 5
84662: ARRAY
84663: PUSH
84664: LD_INT 1
84666: PLUS
84667: PUSH
84668: EMPTY
84669: LIST
84670: LIST
84671: PPUSH
84672: LD_VAR 0 2
84676: PUSH
84677: LD_VAR 0 4
84681: ARRAY
84682: PUSH
84683: LD_VAR 0 2
84687: PUSH
84688: LD_VAR 0 4
84692: ARRAY
84693: PPUSH
84694: CALL_OW 255
84698: PUSH
84699: EMPTY
84700: LIST
84701: LIST
84702: PPUSH
84703: CALL 30832 0 3
84707: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
84708: LD_VAR 0 2
84712: PUSH
84713: LD_VAR 0 4
84717: ARRAY
84718: PPUSH
84719: LD_VAR 0 1
84723: PPUSH
84724: CALL_OW 255
84728: PPUSH
84729: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
84733: LD_VAR 0 2
84737: PUSH
84738: LD_VAR 0 4
84742: ARRAY
84743: PPUSH
84744: CALL_OW 141
// end ;
84748: GO 84580
84750: POP
84751: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84752: LD_VAR 0 1
84756: PPUSH
84757: LD_EXP 122
84761: PUSH
84762: LD_VAR 0 5
84766: ARRAY
84767: PUSH
84768: LD_INT 0
84770: PLUS
84771: PPUSH
84772: CALL_OW 505
// end ;
84776: LD_VAR 0 3
84780: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
84781: LD_INT 0
84783: PPUSH
84784: PPUSH
84785: PPUSH
84786: PPUSH
// if not hack in hackTanks then
84787: LD_VAR 0 1
84791: PUSH
84792: LD_EXP 121
84796: IN
84797: NOT
84798: IFFALSE 84802
// exit ;
84800: GO 85042
// index := GetElementIndex ( hackTanks , hack ) ;
84802: LD_ADDR_VAR 0 4
84806: PUSH
84807: LD_EXP 121
84811: PPUSH
84812: LD_VAR 0 1
84816: PPUSH
84817: CALL 30617 0 2
84821: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
84822: LD_ADDR_VAR 0 3
84826: PUSH
84827: DOUBLE
84828: LD_EXP 122
84832: PUSH
84833: LD_VAR 0 4
84837: ARRAY
84838: INC
84839: ST_TO_ADDR
84840: LD_INT 1
84842: PUSH
84843: FOR_DOWNTO
84844: IFFALSE 85016
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
84846: LD_ADDR_VAR 0 5
84850: PUSH
84851: LD_EXP 122
84855: PUSH
84856: LD_VAR 0 4
84860: ARRAY
84861: PUSH
84862: LD_VAR 0 3
84866: ARRAY
84867: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
84868: LD_VAR 0 5
84872: PUSH
84873: LD_INT 1
84875: ARRAY
84876: PPUSH
84877: CALL_OW 302
84881: NOT
84882: PUSH
84883: LD_VAR 0 5
84887: PUSH
84888: LD_INT 1
84890: ARRAY
84891: PPUSH
84892: CALL_OW 255
84896: PUSH
84897: LD_VAR 0 1
84901: PPUSH
84902: CALL_OW 255
84906: NONEQUAL
84907: OR
84908: IFFALSE 85014
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
84910: LD_VAR 0 5
84914: PUSH
84915: LD_INT 1
84917: ARRAY
84918: PPUSH
84919: CALL_OW 305
84923: PUSH
84924: LD_VAR 0 5
84928: PUSH
84929: LD_INT 1
84931: ARRAY
84932: PPUSH
84933: CALL_OW 255
84937: PUSH
84938: LD_VAR 0 1
84942: PPUSH
84943: CALL_OW 255
84947: EQUAL
84948: AND
84949: IFFALSE 84973
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
84951: LD_VAR 0 5
84955: PUSH
84956: LD_INT 1
84958: ARRAY
84959: PPUSH
84960: LD_VAR 0 5
84964: PUSH
84965: LD_INT 2
84967: ARRAY
84968: PPUSH
84969: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
84973: LD_ADDR_EXP 122
84977: PUSH
84978: LD_EXP 122
84982: PPUSH
84983: LD_VAR 0 4
84987: PPUSH
84988: LD_EXP 122
84992: PUSH
84993: LD_VAR 0 4
84997: ARRAY
84998: PPUSH
84999: LD_VAR 0 3
85003: PPUSH
85004: CALL_OW 3
85008: PPUSH
85009: CALL_OW 1
85013: ST_TO_ADDR
// end ; end ;
85014: GO 84843
85016: POP
85017: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85018: LD_VAR 0 1
85022: PPUSH
85023: LD_EXP 122
85027: PUSH
85028: LD_VAR 0 4
85032: ARRAY
85033: PUSH
85034: LD_INT 0
85036: PLUS
85037: PPUSH
85038: CALL_OW 505
// end ;
85042: LD_VAR 0 2
85046: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
85047: LD_INT 0
85049: PPUSH
85050: PPUSH
85051: PPUSH
85052: PPUSH
// if not hack in hackTanks then
85053: LD_VAR 0 1
85057: PUSH
85058: LD_EXP 121
85062: IN
85063: NOT
85064: IFFALSE 85068
// exit ;
85066: GO 85153
// index := GetElementIndex ( hackTanks , hack ) ;
85068: LD_ADDR_VAR 0 5
85072: PUSH
85073: LD_EXP 121
85077: PPUSH
85078: LD_VAR 0 1
85082: PPUSH
85083: CALL 30617 0 2
85087: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
85088: LD_ADDR_VAR 0 4
85092: PUSH
85093: DOUBLE
85094: LD_INT 1
85096: DEC
85097: ST_TO_ADDR
85098: LD_EXP 122
85102: PUSH
85103: LD_VAR 0 5
85107: ARRAY
85108: PUSH
85109: FOR_TO
85110: IFFALSE 85151
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
85112: LD_EXP 122
85116: PUSH
85117: LD_VAR 0 5
85121: ARRAY
85122: PUSH
85123: LD_VAR 0 4
85127: ARRAY
85128: PUSH
85129: LD_INT 1
85131: ARRAY
85132: PUSH
85133: LD_VAR 0 2
85137: EQUAL
85138: IFFALSE 85149
// KillUnit ( vehicle ) ;
85140: LD_VAR 0 2
85144: PPUSH
85145: CALL_OW 66
85149: GO 85109
85151: POP
85152: POP
// end ;
85153: LD_VAR 0 3
85157: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
85158: LD_EXP 126
85162: NOT
85163: IFFALSE 85198
85165: GO 85167
85167: DISABLE
// begin initMiner := true ;
85168: LD_ADDR_EXP 126
85172: PUSH
85173: LD_INT 1
85175: ST_TO_ADDR
// minersList := [ ] ;
85176: LD_ADDR_EXP 127
85180: PUSH
85181: EMPTY
85182: ST_TO_ADDR
// minerMinesList := [ ] ;
85183: LD_ADDR_EXP 128
85187: PUSH
85188: EMPTY
85189: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
85190: LD_ADDR_EXP 129
85194: PUSH
85195: LD_INT 5
85197: ST_TO_ADDR
// end ;
85198: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
85199: LD_EXP 126
85203: PUSH
85204: LD_INT 34
85206: PUSH
85207: LD_INT 81
85209: PUSH
85210: EMPTY
85211: LIST
85212: LIST
85213: PPUSH
85214: CALL_OW 69
85218: AND
85219: IFFALSE 85680
85221: GO 85223
85223: DISABLE
85224: LD_INT 0
85226: PPUSH
85227: PPUSH
85228: PPUSH
85229: PPUSH
// begin enable ;
85230: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
85231: LD_ADDR_VAR 0 1
85235: PUSH
85236: LD_INT 34
85238: PUSH
85239: LD_INT 81
85241: PUSH
85242: EMPTY
85243: LIST
85244: LIST
85245: PPUSH
85246: CALL_OW 69
85250: PUSH
85251: FOR_IN
85252: IFFALSE 85324
// begin if not i in minersList then
85254: LD_VAR 0 1
85258: PUSH
85259: LD_EXP 127
85263: IN
85264: NOT
85265: IFFALSE 85322
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
85267: LD_ADDR_EXP 127
85271: PUSH
85272: LD_EXP 127
85276: PPUSH
85277: LD_EXP 127
85281: PUSH
85282: LD_INT 1
85284: PLUS
85285: PPUSH
85286: LD_VAR 0 1
85290: PPUSH
85291: CALL_OW 1
85295: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
85296: LD_ADDR_EXP 128
85300: PUSH
85301: LD_EXP 128
85305: PPUSH
85306: LD_EXP 128
85310: PUSH
85311: LD_INT 1
85313: PLUS
85314: PPUSH
85315: EMPTY
85316: PPUSH
85317: CALL_OW 1
85321: ST_TO_ADDR
// end end ;
85322: GO 85251
85324: POP
85325: POP
// for i := minerMinesList downto 1 do
85326: LD_ADDR_VAR 0 1
85330: PUSH
85331: DOUBLE
85332: LD_EXP 128
85336: INC
85337: ST_TO_ADDR
85338: LD_INT 1
85340: PUSH
85341: FOR_DOWNTO
85342: IFFALSE 85678
// begin if IsLive ( minersList [ i ] ) then
85344: LD_EXP 127
85348: PUSH
85349: LD_VAR 0 1
85353: ARRAY
85354: PPUSH
85355: CALL_OW 300
85359: IFFALSE 85387
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
85361: LD_EXP 127
85365: PUSH
85366: LD_VAR 0 1
85370: ARRAY
85371: PPUSH
85372: LD_EXP 128
85376: PUSH
85377: LD_VAR 0 1
85381: ARRAY
85382: PPUSH
85383: CALL_OW 505
// if not minerMinesList [ i ] then
85387: LD_EXP 128
85391: PUSH
85392: LD_VAR 0 1
85396: ARRAY
85397: NOT
85398: IFFALSE 85402
// continue ;
85400: GO 85341
// for j := minerMinesList [ i ] downto 1 do
85402: LD_ADDR_VAR 0 2
85406: PUSH
85407: DOUBLE
85408: LD_EXP 128
85412: PUSH
85413: LD_VAR 0 1
85417: ARRAY
85418: INC
85419: ST_TO_ADDR
85420: LD_INT 1
85422: PUSH
85423: FOR_DOWNTO
85424: IFFALSE 85674
// begin side := GetSide ( minersList [ i ] ) ;
85426: LD_ADDR_VAR 0 3
85430: PUSH
85431: LD_EXP 127
85435: PUSH
85436: LD_VAR 0 1
85440: ARRAY
85441: PPUSH
85442: CALL_OW 255
85446: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
85447: LD_ADDR_VAR 0 4
85451: PUSH
85452: LD_EXP 128
85456: PUSH
85457: LD_VAR 0 1
85461: ARRAY
85462: PUSH
85463: LD_VAR 0 2
85467: ARRAY
85468: PUSH
85469: LD_INT 1
85471: ARRAY
85472: PPUSH
85473: LD_EXP 128
85477: PUSH
85478: LD_VAR 0 1
85482: ARRAY
85483: PUSH
85484: LD_VAR 0 2
85488: ARRAY
85489: PUSH
85490: LD_INT 2
85492: ARRAY
85493: PPUSH
85494: CALL_OW 428
85498: ST_TO_ADDR
// if not tmp then
85499: LD_VAR 0 4
85503: NOT
85504: IFFALSE 85508
// continue ;
85506: GO 85423
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
85508: LD_VAR 0 4
85512: PUSH
85513: LD_INT 81
85515: PUSH
85516: LD_VAR 0 3
85520: PUSH
85521: EMPTY
85522: LIST
85523: LIST
85524: PPUSH
85525: CALL_OW 69
85529: IN
85530: PUSH
85531: LD_EXP 128
85535: PUSH
85536: LD_VAR 0 1
85540: ARRAY
85541: PUSH
85542: LD_VAR 0 2
85546: ARRAY
85547: PUSH
85548: LD_INT 1
85550: ARRAY
85551: PPUSH
85552: LD_EXP 128
85556: PUSH
85557: LD_VAR 0 1
85561: ARRAY
85562: PUSH
85563: LD_VAR 0 2
85567: ARRAY
85568: PUSH
85569: LD_INT 2
85571: ARRAY
85572: PPUSH
85573: CALL_OW 458
85577: AND
85578: IFFALSE 85672
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
85580: LD_EXP 128
85584: PUSH
85585: LD_VAR 0 1
85589: ARRAY
85590: PUSH
85591: LD_VAR 0 2
85595: ARRAY
85596: PUSH
85597: LD_INT 1
85599: ARRAY
85600: PPUSH
85601: LD_EXP 128
85605: PUSH
85606: LD_VAR 0 1
85610: ARRAY
85611: PUSH
85612: LD_VAR 0 2
85616: ARRAY
85617: PUSH
85618: LD_INT 2
85620: ARRAY
85621: PPUSH
85622: LD_VAR 0 3
85626: PPUSH
85627: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
85631: LD_ADDR_EXP 128
85635: PUSH
85636: LD_EXP 128
85640: PPUSH
85641: LD_VAR 0 1
85645: PPUSH
85646: LD_EXP 128
85650: PUSH
85651: LD_VAR 0 1
85655: ARRAY
85656: PPUSH
85657: LD_VAR 0 2
85661: PPUSH
85662: CALL_OW 3
85666: PPUSH
85667: CALL_OW 1
85671: ST_TO_ADDR
// end ; end ;
85672: GO 85423
85674: POP
85675: POP
// end ;
85676: GO 85341
85678: POP
85679: POP
// end ;
85680: PPOPN 4
85682: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
85683: LD_INT 0
85685: PPUSH
85686: PPUSH
// result := false ;
85687: LD_ADDR_VAR 0 4
85691: PUSH
85692: LD_INT 0
85694: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
85695: LD_VAR 0 1
85699: PPUSH
85700: CALL_OW 264
85704: PUSH
85705: LD_INT 81
85707: EQUAL
85708: NOT
85709: IFFALSE 85713
// exit ;
85711: GO 85953
// index := GetElementIndex ( minersList , unit ) ;
85713: LD_ADDR_VAR 0 5
85717: PUSH
85718: LD_EXP 127
85722: PPUSH
85723: LD_VAR 0 1
85727: PPUSH
85728: CALL 30617 0 2
85732: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
85733: LD_EXP 128
85737: PUSH
85738: LD_VAR 0 5
85742: ARRAY
85743: PUSH
85744: LD_EXP 129
85748: GREATEREQUAL
85749: IFFALSE 85753
// exit ;
85751: GO 85953
// ComMoveXY ( unit , x , y ) ;
85753: LD_VAR 0 1
85757: PPUSH
85758: LD_VAR 0 2
85762: PPUSH
85763: LD_VAR 0 3
85767: PPUSH
85768: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85772: LD_INT 35
85774: PPUSH
85775: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
85779: LD_VAR 0 1
85783: PPUSH
85784: LD_VAR 0 2
85788: PPUSH
85789: LD_VAR 0 3
85793: PPUSH
85794: CALL 61953 0 3
85798: NOT
85799: PUSH
85800: LD_VAR 0 1
85804: PPUSH
85805: CALL_OW 314
85809: AND
85810: IFFALSE 85814
// exit ;
85812: GO 85953
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
85814: LD_VAR 0 2
85818: PPUSH
85819: LD_VAR 0 3
85823: PPUSH
85824: CALL_OW 428
85828: PUSH
85829: LD_VAR 0 1
85833: EQUAL
85834: PUSH
85835: LD_VAR 0 1
85839: PPUSH
85840: CALL_OW 314
85844: NOT
85845: AND
85846: IFFALSE 85772
// PlaySoundXY ( x , y , PlantMine ) ;
85848: LD_VAR 0 2
85852: PPUSH
85853: LD_VAR 0 3
85857: PPUSH
85858: LD_STRING PlantMine
85860: PPUSH
85861: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
85865: LD_VAR 0 2
85869: PPUSH
85870: LD_VAR 0 3
85874: PPUSH
85875: LD_VAR 0 1
85879: PPUSH
85880: CALL_OW 255
85884: PPUSH
85885: LD_INT 0
85887: PPUSH
85888: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
85892: LD_ADDR_EXP 128
85896: PUSH
85897: LD_EXP 128
85901: PPUSH
85902: LD_VAR 0 5
85906: PUSH
85907: LD_EXP 128
85911: PUSH
85912: LD_VAR 0 5
85916: ARRAY
85917: PUSH
85918: LD_INT 1
85920: PLUS
85921: PUSH
85922: EMPTY
85923: LIST
85924: LIST
85925: PPUSH
85926: LD_VAR 0 2
85930: PUSH
85931: LD_VAR 0 3
85935: PUSH
85936: EMPTY
85937: LIST
85938: LIST
85939: PPUSH
85940: CALL 30832 0 3
85944: ST_TO_ADDR
// result := true ;
85945: LD_ADDR_VAR 0 4
85949: PUSH
85950: LD_INT 1
85952: ST_TO_ADDR
// end ;
85953: LD_VAR 0 4
85957: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
85958: LD_INT 0
85960: PPUSH
85961: PPUSH
85962: PPUSH
// if not unit in minersList then
85963: LD_VAR 0 1
85967: PUSH
85968: LD_EXP 127
85972: IN
85973: NOT
85974: IFFALSE 85978
// exit ;
85976: GO 86370
// index := GetElementIndex ( minersList , unit ) ;
85978: LD_ADDR_VAR 0 6
85982: PUSH
85983: LD_EXP 127
85987: PPUSH
85988: LD_VAR 0 1
85992: PPUSH
85993: CALL 30617 0 2
85997: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
85998: LD_ADDR_VAR 0 5
86002: PUSH
86003: DOUBLE
86004: LD_EXP 128
86008: PUSH
86009: LD_VAR 0 6
86013: ARRAY
86014: INC
86015: ST_TO_ADDR
86016: LD_INT 1
86018: PUSH
86019: FOR_DOWNTO
86020: IFFALSE 86181
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
86022: LD_EXP 128
86026: PUSH
86027: LD_VAR 0 6
86031: ARRAY
86032: PUSH
86033: LD_VAR 0 5
86037: ARRAY
86038: PUSH
86039: LD_INT 1
86041: ARRAY
86042: PUSH
86043: LD_VAR 0 2
86047: EQUAL
86048: PUSH
86049: LD_EXP 128
86053: PUSH
86054: LD_VAR 0 6
86058: ARRAY
86059: PUSH
86060: LD_VAR 0 5
86064: ARRAY
86065: PUSH
86066: LD_INT 2
86068: ARRAY
86069: PUSH
86070: LD_VAR 0 3
86074: EQUAL
86075: AND
86076: IFFALSE 86179
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
86078: LD_EXP 128
86082: PUSH
86083: LD_VAR 0 6
86087: ARRAY
86088: PUSH
86089: LD_VAR 0 5
86093: ARRAY
86094: PUSH
86095: LD_INT 1
86097: ARRAY
86098: PPUSH
86099: LD_EXP 128
86103: PUSH
86104: LD_VAR 0 6
86108: ARRAY
86109: PUSH
86110: LD_VAR 0 5
86114: ARRAY
86115: PUSH
86116: LD_INT 2
86118: ARRAY
86119: PPUSH
86120: LD_VAR 0 1
86124: PPUSH
86125: CALL_OW 255
86129: PPUSH
86130: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
86134: LD_ADDR_EXP 128
86138: PUSH
86139: LD_EXP 128
86143: PPUSH
86144: LD_VAR 0 6
86148: PPUSH
86149: LD_EXP 128
86153: PUSH
86154: LD_VAR 0 6
86158: ARRAY
86159: PPUSH
86160: LD_VAR 0 5
86164: PPUSH
86165: CALL_OW 3
86169: PPUSH
86170: CALL_OW 1
86174: ST_TO_ADDR
// exit ;
86175: POP
86176: POP
86177: GO 86370
// end ; end ;
86179: GO 86019
86181: POP
86182: POP
// for i := minerMinesList [ index ] downto 1 do
86183: LD_ADDR_VAR 0 5
86187: PUSH
86188: DOUBLE
86189: LD_EXP 128
86193: PUSH
86194: LD_VAR 0 6
86198: ARRAY
86199: INC
86200: ST_TO_ADDR
86201: LD_INT 1
86203: PUSH
86204: FOR_DOWNTO
86205: IFFALSE 86368
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
86207: LD_EXP 128
86211: PUSH
86212: LD_VAR 0 6
86216: ARRAY
86217: PUSH
86218: LD_VAR 0 5
86222: ARRAY
86223: PUSH
86224: LD_INT 1
86226: ARRAY
86227: PPUSH
86228: LD_EXP 128
86232: PUSH
86233: LD_VAR 0 6
86237: ARRAY
86238: PUSH
86239: LD_VAR 0 5
86243: ARRAY
86244: PUSH
86245: LD_INT 2
86247: ARRAY
86248: PPUSH
86249: LD_VAR 0 2
86253: PPUSH
86254: LD_VAR 0 3
86258: PPUSH
86259: CALL_OW 298
86263: PUSH
86264: LD_INT 6
86266: LESS
86267: IFFALSE 86366
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
86269: LD_EXP 128
86273: PUSH
86274: LD_VAR 0 6
86278: ARRAY
86279: PUSH
86280: LD_VAR 0 5
86284: ARRAY
86285: PUSH
86286: LD_INT 1
86288: ARRAY
86289: PPUSH
86290: LD_EXP 128
86294: PUSH
86295: LD_VAR 0 6
86299: ARRAY
86300: PUSH
86301: LD_VAR 0 5
86305: ARRAY
86306: PUSH
86307: LD_INT 2
86309: ARRAY
86310: PPUSH
86311: LD_VAR 0 1
86315: PPUSH
86316: CALL_OW 255
86320: PPUSH
86321: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
86325: LD_ADDR_EXP 128
86329: PUSH
86330: LD_EXP 128
86334: PPUSH
86335: LD_VAR 0 6
86339: PPUSH
86340: LD_EXP 128
86344: PUSH
86345: LD_VAR 0 6
86349: ARRAY
86350: PPUSH
86351: LD_VAR 0 5
86355: PPUSH
86356: CALL_OW 3
86360: PPUSH
86361: CALL_OW 1
86365: ST_TO_ADDR
// end ; end ;
86366: GO 86204
86368: POP
86369: POP
// end ;
86370: LD_VAR 0 4
86374: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
86375: LD_INT 0
86377: PPUSH
86378: PPUSH
86379: PPUSH
86380: PPUSH
86381: PPUSH
86382: PPUSH
86383: PPUSH
86384: PPUSH
86385: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
86386: LD_VAR 0 1
86390: PPUSH
86391: CALL_OW 264
86395: PUSH
86396: LD_INT 81
86398: EQUAL
86399: NOT
86400: PUSH
86401: LD_VAR 0 1
86405: PUSH
86406: LD_EXP 127
86410: IN
86411: NOT
86412: OR
86413: IFFALSE 86417
// exit ;
86415: GO 86739
// index := GetElementIndex ( minersList , unit ) ;
86417: LD_ADDR_VAR 0 6
86421: PUSH
86422: LD_EXP 127
86426: PPUSH
86427: LD_VAR 0 1
86431: PPUSH
86432: CALL 30617 0 2
86436: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
86437: LD_ADDR_VAR 0 8
86441: PUSH
86442: LD_EXP 129
86446: PUSH
86447: LD_EXP 128
86451: PUSH
86452: LD_VAR 0 6
86456: ARRAY
86457: MINUS
86458: ST_TO_ADDR
// if not minesFreeAmount then
86459: LD_VAR 0 8
86463: NOT
86464: IFFALSE 86468
// exit ;
86466: GO 86739
// tmp := [ ] ;
86468: LD_ADDR_VAR 0 7
86472: PUSH
86473: EMPTY
86474: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
86475: LD_ADDR_VAR 0 5
86479: PUSH
86480: DOUBLE
86481: LD_INT 1
86483: DEC
86484: ST_TO_ADDR
86485: LD_VAR 0 8
86489: PUSH
86490: FOR_TO
86491: IFFALSE 86686
// begin _d := rand ( 0 , 5 ) ;
86493: LD_ADDR_VAR 0 11
86497: PUSH
86498: LD_INT 0
86500: PPUSH
86501: LD_INT 5
86503: PPUSH
86504: CALL_OW 12
86508: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
86509: LD_ADDR_VAR 0 12
86513: PUSH
86514: LD_INT 2
86516: PPUSH
86517: LD_INT 6
86519: PPUSH
86520: CALL_OW 12
86524: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
86525: LD_ADDR_VAR 0 9
86529: PUSH
86530: LD_VAR 0 2
86534: PPUSH
86535: LD_VAR 0 11
86539: PPUSH
86540: LD_VAR 0 12
86544: PPUSH
86545: CALL_OW 272
86549: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
86550: LD_ADDR_VAR 0 10
86554: PUSH
86555: LD_VAR 0 3
86559: PPUSH
86560: LD_VAR 0 11
86564: PPUSH
86565: LD_VAR 0 12
86569: PPUSH
86570: CALL_OW 273
86574: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
86575: LD_VAR 0 9
86579: PPUSH
86580: LD_VAR 0 10
86584: PPUSH
86585: CALL_OW 488
86589: PUSH
86590: LD_VAR 0 9
86594: PUSH
86595: LD_VAR 0 10
86599: PUSH
86600: EMPTY
86601: LIST
86602: LIST
86603: PUSH
86604: LD_VAR 0 7
86608: IN
86609: NOT
86610: AND
86611: PUSH
86612: LD_VAR 0 9
86616: PPUSH
86617: LD_VAR 0 10
86621: PPUSH
86622: CALL_OW 458
86626: NOT
86627: AND
86628: IFFALSE 86670
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
86630: LD_ADDR_VAR 0 7
86634: PUSH
86635: LD_VAR 0 7
86639: PPUSH
86640: LD_VAR 0 7
86644: PUSH
86645: LD_INT 1
86647: PLUS
86648: PPUSH
86649: LD_VAR 0 9
86653: PUSH
86654: LD_VAR 0 10
86658: PUSH
86659: EMPTY
86660: LIST
86661: LIST
86662: PPUSH
86663: CALL_OW 1
86667: ST_TO_ADDR
86668: GO 86684
// i := i - 1 ;
86670: LD_ADDR_VAR 0 5
86674: PUSH
86675: LD_VAR 0 5
86679: PUSH
86680: LD_INT 1
86682: MINUS
86683: ST_TO_ADDR
// end ;
86684: GO 86490
86686: POP
86687: POP
// for i in tmp do
86688: LD_ADDR_VAR 0 5
86692: PUSH
86693: LD_VAR 0 7
86697: PUSH
86698: FOR_IN
86699: IFFALSE 86737
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
86701: LD_VAR 0 1
86705: PPUSH
86706: LD_VAR 0 5
86710: PUSH
86711: LD_INT 1
86713: ARRAY
86714: PPUSH
86715: LD_VAR 0 5
86719: PUSH
86720: LD_INT 2
86722: ARRAY
86723: PPUSH
86724: CALL 85683 0 3
86728: NOT
86729: IFFALSE 86735
// exit ;
86731: POP
86732: POP
86733: GO 86739
86735: GO 86698
86737: POP
86738: POP
// end ;
86739: LD_VAR 0 4
86743: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
86744: LD_INT 0
86746: PPUSH
86747: PPUSH
86748: PPUSH
86749: PPUSH
86750: PPUSH
86751: PPUSH
86752: PPUSH
// if not GetClass ( unit ) = class_sniper then
86753: LD_VAR 0 1
86757: PPUSH
86758: CALL_OW 257
86762: PUSH
86763: LD_INT 5
86765: EQUAL
86766: NOT
86767: IFFALSE 86771
// exit ;
86769: GO 87159
// dist := 8 ;
86771: LD_ADDR_VAR 0 5
86775: PUSH
86776: LD_INT 8
86778: ST_TO_ADDR
// viewRange := 12 ;
86779: LD_ADDR_VAR 0 7
86783: PUSH
86784: LD_INT 12
86786: ST_TO_ADDR
// side := GetSide ( unit ) ;
86787: LD_ADDR_VAR 0 6
86791: PUSH
86792: LD_VAR 0 1
86796: PPUSH
86797: CALL_OW 255
86801: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
86802: LD_INT 61
86804: PPUSH
86805: LD_VAR 0 6
86809: PPUSH
86810: CALL_OW 321
86814: PUSH
86815: LD_INT 2
86817: EQUAL
86818: IFFALSE 86828
// viewRange := 16 ;
86820: LD_ADDR_VAR 0 7
86824: PUSH
86825: LD_INT 16
86827: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
86828: LD_VAR 0 1
86832: PPUSH
86833: LD_VAR 0 2
86837: PPUSH
86838: LD_VAR 0 3
86842: PPUSH
86843: CALL_OW 297
86847: PUSH
86848: LD_VAR 0 5
86852: GREATER
86853: IFFALSE 86932
// begin ComMoveXY ( unit , x , y ) ;
86855: LD_VAR 0 1
86859: PPUSH
86860: LD_VAR 0 2
86864: PPUSH
86865: LD_VAR 0 3
86869: PPUSH
86870: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86874: LD_INT 35
86876: PPUSH
86877: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
86881: LD_VAR 0 1
86885: PPUSH
86886: LD_VAR 0 2
86890: PPUSH
86891: LD_VAR 0 3
86895: PPUSH
86896: CALL 61953 0 3
86900: NOT
86901: IFFALSE 86905
// exit ;
86903: GO 87159
// until GetDistUnitXY ( unit , x , y ) < dist ;
86905: LD_VAR 0 1
86909: PPUSH
86910: LD_VAR 0 2
86914: PPUSH
86915: LD_VAR 0 3
86919: PPUSH
86920: CALL_OW 297
86924: PUSH
86925: LD_VAR 0 5
86929: LESS
86930: IFFALSE 86874
// end ; ComTurnXY ( unit , x , y ) ;
86932: LD_VAR 0 1
86936: PPUSH
86937: LD_VAR 0 2
86941: PPUSH
86942: LD_VAR 0 3
86946: PPUSH
86947: CALL_OW 118
// wait ( 5 ) ;
86951: LD_INT 5
86953: PPUSH
86954: CALL_OW 67
// _d := GetDir ( unit ) ;
86958: LD_ADDR_VAR 0 10
86962: PUSH
86963: LD_VAR 0 1
86967: PPUSH
86968: CALL_OW 254
86972: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
86973: LD_ADDR_VAR 0 8
86977: PUSH
86978: LD_VAR 0 1
86982: PPUSH
86983: CALL_OW 250
86987: PPUSH
86988: LD_VAR 0 10
86992: PPUSH
86993: LD_VAR 0 5
86997: PPUSH
86998: CALL_OW 272
87002: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
87003: LD_ADDR_VAR 0 9
87007: PUSH
87008: LD_VAR 0 1
87012: PPUSH
87013: CALL_OW 251
87017: PPUSH
87018: LD_VAR 0 10
87022: PPUSH
87023: LD_VAR 0 5
87027: PPUSH
87028: CALL_OW 273
87032: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
87033: LD_VAR 0 8
87037: PPUSH
87038: LD_VAR 0 9
87042: PPUSH
87043: CALL_OW 488
87047: NOT
87048: IFFALSE 87052
// exit ;
87050: GO 87159
// ComAnimCustom ( unit , 1 ) ;
87052: LD_VAR 0 1
87056: PPUSH
87057: LD_INT 1
87059: PPUSH
87060: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
87064: LD_VAR 0 8
87068: PPUSH
87069: LD_VAR 0 9
87073: PPUSH
87074: LD_VAR 0 6
87078: PPUSH
87079: LD_VAR 0 7
87083: PPUSH
87084: CALL_OW 330
// repeat wait ( 1 ) ;
87088: LD_INT 1
87090: PPUSH
87091: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
87095: LD_VAR 0 1
87099: PPUSH
87100: CALL_OW 316
87104: PUSH
87105: LD_VAR 0 1
87109: PPUSH
87110: CALL_OW 314
87114: OR
87115: PUSH
87116: LD_VAR 0 1
87120: PPUSH
87121: CALL_OW 302
87125: NOT
87126: OR
87127: PUSH
87128: LD_VAR 0 1
87132: PPUSH
87133: CALL_OW 301
87137: OR
87138: IFFALSE 87088
// RemoveSeeing ( _x , _y , side ) ;
87140: LD_VAR 0 8
87144: PPUSH
87145: LD_VAR 0 9
87149: PPUSH
87150: LD_VAR 0 6
87154: PPUSH
87155: CALL_OW 331
// end ; end_of_file
87159: LD_VAR 0 4
87163: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
87164: LD_VAR 0 1
87168: PPUSH
87169: LD_VAR 0 2
87173: PPUSH
87174: LD_VAR 0 3
87178: PPUSH
87179: LD_VAR 0 4
87183: PPUSH
87184: LD_VAR 0 5
87188: PPUSH
87189: LD_VAR 0 6
87193: PPUSH
87194: CALL 67114 0 6
// end ;
87198: PPOPN 6
87200: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
87201: LD_INT 0
87203: PPUSH
// begin if not units then
87204: LD_VAR 0 1
87208: NOT
87209: IFFALSE 87213
// exit ;
87211: GO 87213
// end ;
87213: PPOPN 7
87215: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
87216: CALL 67085 0 0
// end ;
87220: PPOPN 1
87222: END
